
SQL*Plus: Release 11.2.0.1.0 Production on Wed Dec 15 00:50:29 2010

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

00:50:29 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
00:50:29 SQL> 00:50:29 SQL> --
00:50:29 SQL> -- eur10.sql
00:50:29 SQL> --
00:50:29 SQL> 
00:50:29 SQL> -- Creates views and tables for backtesting a forex SVM strategy
00:50:29 SQL> 
00:50:29 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.04
00:50:29 SQL> 
00:50:29 SQL> -- I created ibfu_t here:
00:50:29 SQL> -- /pt/s/rlk/svm4hp/update_ibfu_t.sql
00:50:29 SQL> 
00:50:29 SQL> CREATE OR REPLACE VIEW q11 AS
00:50:29   2  SELECT
00:50:29   3  pair
00:50:29   4  ,ydate
00:50:29   5  ,prdate
00:50:29   6  ,rownum rnum -- acts as t in my time-series
00:50:29   7  ,clse
00:50:29   8  ,LAG(clse,1,NULL)OVER(PARTITION BY pair ORDER BY pair,ydate) lg1
00:50:29   9  ,LAG(clse,2,NULL)OVER(PARTITION BY pair ORDER BY pair,ydate) lg2
00:50:29  10  ,LAG(clse,3,NULL)OVER(PARTITION BY pair ORDER BY pair,ydate) lg3
00:50:29  11  ,LAG(clse,4,NULL)OVER(PARTITION BY pair ORDER BY pair,ydate) lg4
00:50:29  12  ,LAG(clse,5,NULL)OVER(PARTITION BY pair ORDER BY pair,ydate) lg5
00:50:29  13  ,LAG(clse,6,NULL)OVER(PARTITION BY pair ORDER BY pair,ydate) lg6
00:50:29  14  ,LAG(clse,7,NULL)OVER(PARTITION BY pair ORDER BY pair,ydate) lg7
00:50:29  15  ,LAG(clse,8,NULL)OVER(PARTITION BY pair ORDER BY pair,ydate) lg8
00:50:29  16  ,LAG(clse,9,NULL)OVER(PARTITION BY pair ORDER BY pair,ydate) lg9
00:50:29  17  ,LAG(clse,12,NULL)OVER(PARTITION BY pair ORDER BY pair,ydate) lg12
00:50:29  18  ,LAG(clse,18,NULL)OVER(PARTITION BY pair ORDER BY pair,ydate) lg18
00:50:29  19  ,LAG(clse,24,NULL)OVER(PARTITION BY pair ORDER BY pair,ydate) lg24
00:50:29  20  ,LAG(clse,72,NULL)OVER(PARTITION BY pair ORDER BY pair,ydate) lg72
00:50:29  21  ,LEAD(clse,4,NULL)OVER(PARTITION BY pair ORDER BY pair,ydate) ld4
00:50:29  22  FROM ibfu_t WHERE pair LIKE'%eur%'
00:50:29  23  ORDER BY ydate
00:50:29  24  /

View created.

Elapsed: 00:00:00.16
00:50:29 SQL> 
00:50:29 SQL> -- rpt
00:50:29 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
eur_usd 	3792

Elapsed: 00:00:00.13
00:50:29 SQL> 
00:50:29 SQL> -- Calc deltas and gains
00:50:29 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.14
00:50:29 SQL> 
00:50:29 SQL> CREATE TABLE q13 COMPRESS AS
00:50:29   2  SELECT
00:50:29   3  pair
00:50:29   4  ,ydate
00:50:29   5  ,prdate
00:50:29   6  ,rnum
00:50:29   7  ,lg4
00:50:29   8  ,lg8
00:50:29   9  ,lg12
00:50:29  10  ,ld4
00:50:29  11  ,CASE WHEN(clse-lg12)>0 then 1 ELSE -1 END trend
00:50:29  12  -- step by 1
00:50:29  13  ,clse-lg1 d01
00:50:29  14  ,lg1-lg2	d12
00:50:29  15  ,lg2-lg3	d23
00:50:29  16  ,lg3-lg4	d34
00:50:29  17  ,lg4-lg5	d45
00:50:29  18  ,lg5-lg6	d56
00:50:29  19  ,lg6-lg7	d67
00:50:29  20  ,lg7-lg8	d78
00:50:29  21  ,lg8-lg9	d89
00:50:29  22  -- step by 2
00:50:29  23  ,clse-lg2 d02
00:50:29  24  ,lg2-lg4 d24
00:50:29  25  ,lg4-lg6 d46
00:50:29  26  ,lg6-lg8 d68
00:50:29  27  -- step by 3
00:50:29  28  ,clse-lg3 d03
00:50:29  29  ,lg3-lg6	d36
00:50:29  30  ,lg6-lg9	d69
00:50:29  31  ,lg9-lg12 d912
00:50:29  32  -- step by 4
00:50:29  33  ,clse-lg4 d04
00:50:29  34  ,lg4-lg8	d48
00:50:29  35  ,lg8-lg12 d812
00:50:29  36  ,lg6-lg12 d612
00:50:29  37  ,lg12-lg18 d1218
00:50:29  38  --
00:50:29  39  ,ABS(clse-lg1)dc1
00:50:29  40  ,ABS(clse-lg2)dc2
00:50:29  41  ,ABS(clse-lg3)dc3
00:50:29  42  ,ABS(clse-lg4)dc4
00:50:29  43  ,ABS(clse-lg5)dc5
00:50:29  44  ,ABS(clse-lg6)dc6
00:50:29  45  ,ABS(clse-lg7)dc7
00:50:29  46  ,ABS(clse-lg8)dc8
00:50:29  47  ,ABS(clse-lg9)dc9
00:50:29  48  ,ABS(clse-lg12)dc12
00:50:29  49  ,ABS(clse-lg18)dc18
00:50:29  50  ,ABS(clse-lg24)dc24
00:50:29  51  ,ABS(clse-lg72)dc72
00:50:29  52  ,(ld4-clse) ug4
00:50:29  53  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 2  PRECEDING AND CURRENT ROW)crr2
00:50:29  54  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 3  PRECEDING AND CURRENT ROW)crr3
00:50:29  55  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 4  PRECEDING AND CURRENT ROW)crr4
00:50:29  56  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 5  PRECEDING AND CURRENT ROW)crr5
00:50:29  57  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6  PRECEDING AND CURRENT ROW)crr6
00:50:29  58  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 7  PRECEDING AND CURRENT ROW)crr7
00:50:29  59  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 8  PRECEDING AND CURRENT ROW)crr8
00:50:29  60  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 9  PRECEDING AND CURRENT ROW)crr9
00:50:29  61  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12 PRECEDING AND CURRENT ROW)crr12
00:50:29  62  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 24 PRECEDING AND CURRENT ROW)crr24
00:50:29  63  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 72 PRECEDING AND CURRENT ROW)crr72
00:50:29  64  ,0+TO_CHAR(ydate,'HH24')hh
00:50:29  65  ,0+TO_CHAR(ydate,'D')d
00:50:29  66  ,0+TO_CHAR(ydate,'W')w
00:50:29  67  FROM q11
00:50:29  68  ORDER BY pair,ydate
00:50:29  69  /

Table created.

Elapsed: 00:00:00.68
00:50:30 SQL> 
00:50:30 SQL> -- rpt
00:50:30 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    1929
	-1	    1863

Elapsed: 00:00:00.07
00:50:30 SQL> 
00:50:30 SQL> -- Calc gains and ntiles
00:50:30 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.13
00:50:30 SQL> CREATE TABLE q15 COMPRESS AS
00:50:30   2  SELECT
00:50:30   3  pair
00:50:30   4  ,ydate
00:50:30   5  ,prdate -- Should be unique
00:50:30   6  ,trend -- +1 or -1
00:50:30   7  ,dc12 -- next statement needs this
00:50:30   8  -- Use NTILE() to derive some attributes
00:50:30   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d12))		 att00
00:50:30  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d23))		 att01
00:50:30  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d34))		 att02
00:50:30  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d45))		 att03
00:50:30  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d56))		 att04
00:50:30  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d67))		 att05
00:50:30  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d78))		 att06
00:50:30  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d89))		 att07
00:50:30  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d912)) 	 att08
00:50:30  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc2)		 att09
00:50:30  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc3)		 att10
00:50:30  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc4)		 att11
00:50:30  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc5)		 att12
00:50:30  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6)		 att13
00:50:30  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc7)		 att14
00:50:30  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8)		 att15
00:50:30  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc9)		 att16
00:50:30  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att17
00:50:30  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc24)		 att18
00:50:30  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc72)		 att19
00:50:30  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr2,7))) att20
00:50:30  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr3,7))) att21
00:50:30  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr4,7))) att22
00:50:30  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr5,7))) att23
00:50:30  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6,7))) att24
00:50:30  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att25
00:50:30  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att26
00:50:30  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr72,7)))att27
00:50:30  37  -- date related integers: hour of day, day of week, week of month:
00:50:30  38  ,hh    att28
00:50:30  39  ,d     att29
00:50:30  40  ,w     att30
00:50:30  41  ,trend att31
00:50:30  42  ,ug4 g4
00:50:30  43  ,CASE WHEN ug4 IS NULL THEN NULL WHEN ug4 > 0.0006 THEN 'up' ELSE 'nup' END gatt
00:50:30  44  ,CASE WHEN ug4 IS NULL THEN NULL WHEN ug4< -0.0006 THEN 'up' ELSE 'nup' END gattn
00:50:30  45  FROM q13
00:50:30  46  ORDER BY pair,ydate
00:50:30  47  /

Table created.

Elapsed: 00:00:00.86
00:50:31 SQL> 
00:50:31 SQL> -- rpt
00:50:31 SQL> SELECT pair,trend,gatt,gattn,AVG(g4),COUNT(g4),CORR(dc12,g4)FROM q15
00:50:31   2  GROUP BY pair,trend,gatt,gattn
00:50:31   3  ORDER BY pair,trend,gatt,gattn
00:50:31   4  /

PAIR	     TREND GAT GAT    AVG(G4)  COUNT(G4) CORR(DC12,G4)
------- ---------- --- --- ---------- ---------- -------------
eur_usd 	-1 nup nup -.00004014	     295    .048269751
eur_usd 	-1 nup up  -.00348792	     755    -.02175909
eur_usd 	-1 up  nup .003626545	     809    -.09547087
eur_usd 	-1			       0
eur_usd 	 1 nup nup 4.2437E-06	     357    .068853821
eur_usd 	 1 nup up   -.0032753	     827    -.02133736
eur_usd 	 1 up  nup .003599664	     745    -.01955522

7 rows selected.

Elapsed: 00:00:00.09
00:50:31 SQL> 
00:50:31 SQL> -- rpt
00:50:31 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
eur_usd 2010-12-15 00:00:00

Elapsed: 00:00:00.00
00:50:31 SQL> 
00:50:31 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.09
00:50:31 SQL> CREATE TABLE modsrc COMPRESS AS
00:50:31   2  SELECT
00:50:31   3  pair
00:50:31   4  ,ydate
00:50:31   5  ,prdate
00:50:31   6  ,trend
00:50:31   7  ,g4
00:50:31   8  ,gatt
00:50:31   9  ,gattn
00:50:31  10  ,dc12
00:50:31  11  FROM q15
00:50:31  12  /

Table created.

Elapsed: 00:00:00.10
00:50:31 SQL> 
00:50:31 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.14
00:50:31 SQL> 
00:50:31 SQL> -- rpt
00:50:31 SQL> 
00:50:31 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
       3792

Elapsed: 00:00:00.09
00:50:32 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
       3792

Elapsed: 00:00:00.00
00:50:32 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
       3792

Elapsed: 00:00:00.00
00:50:32 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
       3792

Elapsed: 00:00:00.00
00:50:32 SQL> 
00:50:32 SQL> SELECT pair,trend,gatt,gattn,AVG(g4),COUNT(g4),CORR(dc12,g4)FROM modsrc
00:50:32   2  GROUP BY pair,trend,gatt,gattn
00:50:32   3  ORDER BY pair,trend,gatt,gattn
00:50:32   4  /

PAIR	     TREND GAT GAT    AVG(G4)  COUNT(G4) CORR(DC12,G4)
------- ---------- --- --- ---------- ---------- -------------
eur_usd 	-1 nup nup -.00004014	     295    .048269751
eur_usd 	-1 nup up  -.00348792	     755    -.02175909
eur_usd 	-1 up  nup .003626545	     809    -.09547087
eur_usd 	-1			       0
eur_usd 	 1 nup nup 4.2437E-06	     357    .068853821
eur_usd 	 1 nup up   -.0032753	     827    -.02133736
eur_usd 	 1 up  nup .003599664	     745    -.01955522

7 rows selected.

Elapsed: 00:00:00.01
00:50:32 SQL> 
00:50:32 SQL> DROP   TABLE eur_ms10 ;

Table dropped.

Elapsed: 00:00:00.12
00:50:32 SQL> CREATE TABLE eur_ms10 COMPRESS AS
00:50:32   2  SELECT
00:50:32   3  ydate
00:50:32   4  ,trend eur_trend
00:50:32   5  ,g4    eur_g4
00:50:32   6  ,gatt  eur_gatt
00:50:32   7  ,gattn	eur_gattn
00:50:32   8  FROM modsrc
00:50:32   9  /

Table created.

Elapsed: 00:00:00.09
00:50:32 SQL> 
00:50:32 SQL> ANALYZE TABLE eur_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.06
00:50:32 SQL> 
00:50:32 SQL> -- rpt
00:50:32 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g4),MIN(g4),MAX(g4)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G4)	 MIN(G4)    MAX(G4)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-05-12 08:00:00 2010-12-14 19:00:00	 1929	  -.0175      .0172
	-1 2010-05-11 13:00:00 2010-12-15 00:00:00	 1859	  -.0164      .0224

Elapsed: 00:00:00.01
00:50:32 SQL> SELECT eur_trend,MIN(ydate),MAX(ydate),COUNT(eur_trend),MIN(eur_g4),MAX(eur_g4)FROM eur_ms10 GROUP BY eur_trend;

 EUR_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(EUR_TREND) MIN(EUR_G4) MAX(EUR_G4)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-05-12 08:00:00 2010-12-14 19:00:00	       1929	 -.0175       .0172
	-1 2010-05-11 13:00:00 2010-12-15 00:00:00	       1863	 -.0164       .0224

Elapsed: 00:00:00.01
00:50:32 SQL> 
00:50:32 SQL> -- I need a copy of q15 attributes
00:50:32 SQL> 
00:50:32 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.17
00:50:32 SQL> CREATE TABLE eur_att COMPRESS AS
00:50:32   2  SELECT
00:50:32   3  ydate
00:50:32   4  ,att00 eur_att00
00:50:32   5  ,att01 eur_att01
00:50:32   6  ,att02 eur_att02
00:50:32   7  ,att03 eur_att03
00:50:32   8  ,att04 eur_att04
00:50:32   9  ,att05 eur_att05
00:50:32  10  ,att06 eur_att06
00:50:32  11  ,att07 eur_att07
00:50:32  12  ,att08 eur_att08
00:50:32  13  ,att09 eur_att09
00:50:32  14  ,att10 eur_att10
00:50:32  15  ,att11 eur_att11
00:50:32  16  ,att12 eur_att12
00:50:32  17  ,att13 eur_att13
00:50:32  18  ,att14 eur_att14
00:50:32  19  ,att15 eur_att15
00:50:32  20  ,att16 eur_att16
00:50:32  21  ,att17 eur_att17
00:50:32  22  ,att18 eur_att18
00:50:32  23  ,att19 eur_att19
00:50:32  24  ,att20 eur_att20
00:50:32  25  ,att21 eur_att21
00:50:32  26  ,att22 eur_att22
00:50:32  27  ,att23 eur_att23
00:50:32  28  ,att24 eur_att24
00:50:32  29  ,att25 eur_att25
00:50:32  30  ,att26 eur_att26
00:50:32  31  ,att27 eur_att27
00:50:32  32  ,att28 eur_att28
00:50:32  33  ,att29 eur_att29
00:50:32  34  ,att30 eur_att30
00:50:32  35  ,att31 eur_att31
00:50:32  36  FROM q15
00:50:32  37  /

Table created.

Elapsed: 00:00:00.16
00:50:32 SQL> 
00:50:32 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.28
00:50:32 SQL> 
00:50:32 SQL> -- rpt
00:50:32 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
      3792

Elapsed: 00:00:00.00
00:50:32 SQL> 
00:50:32 SQL> --
00:50:32 SQL> -- aud10.sql
00:50:32 SQL> --
00:50:32 SQL> 
00:50:32 SQL> -- Creates views and tables for backtesting a forex SVM strategy
00:50:32 SQL> 
00:50:32 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.82
00:50:33 SQL> 
00:50:33 SQL> -- I created ibfu_t here:
00:50:33 SQL> -- /pt/s/rlk/svm4hp/update_ibfu_t.sql
00:50:33 SQL> 
00:50:33 SQL> CREATE OR REPLACE VIEW q11 AS
00:50:33   2  SELECT
00:50:33   3  pair
00:50:33   4  ,ydate
00:50:33   5  ,prdate
00:50:33   6  ,rownum rnum -- acts as t in my time-series
00:50:33   7  ,clse
00:50:33   8  ,LAG(clse,1,NULL)OVER(PARTITION BY pair ORDER BY pair,ydate) lg1
00:50:33   9  ,LAG(clse,2,NULL)OVER(PARTITION BY pair ORDER BY pair,ydate) lg2
00:50:33  10  ,LAG(clse,3,NULL)OVER(PARTITION BY pair ORDER BY pair,ydate) lg3
00:50:33  11  ,LAG(clse,4,NULL)OVER(PARTITION BY pair ORDER BY pair,ydate) lg4
00:50:33  12  ,LAG(clse,5,NULL)OVER(PARTITION BY pair ORDER BY pair,ydate) lg5
00:50:33  13  ,LAG(clse,6,NULL)OVER(PARTITION BY pair ORDER BY pair,ydate) lg6
00:50:33  14  ,LAG(clse,7,NULL)OVER(PARTITION BY pair ORDER BY pair,ydate) lg7
00:50:33  15  ,LAG(clse,8,NULL)OVER(PARTITION BY pair ORDER BY pair,ydate) lg8
00:50:33  16  ,LAG(clse,9,NULL)OVER(PARTITION BY pair ORDER BY pair,ydate) lg9
00:50:33  17  ,LAG(clse,12,NULL)OVER(PARTITION BY pair ORDER BY pair,ydate) lg12
00:50:33  18  ,LAG(clse,18,NULL)OVER(PARTITION BY pair ORDER BY pair,ydate) lg18
00:50:33  19  ,LAG(clse,24,NULL)OVER(PARTITION BY pair ORDER BY pair,ydate) lg24
00:50:33  20  ,LAG(clse,72,NULL)OVER(PARTITION BY pair ORDER BY pair,ydate) lg72
00:50:33  21  ,LEAD(clse,4,NULL)OVER(PARTITION BY pair ORDER BY pair,ydate) ld4
00:50:33  22  FROM ibfu_t WHERE pair LIKE'%aud%'
00:50:33  23  ORDER BY ydate
00:50:33  24  /

View created.

Elapsed: 00:00:00.05
00:50:33 SQL> 
00:50:33 SQL> -- rpt
00:50:33 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
aud_usd 	3792

Elapsed: 00:00:00.17
00:50:34 SQL> 
00:50:34 SQL> -- Calc deltas and gains
00:50:34 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.20
00:50:34 SQL> 
00:50:34 SQL> CREATE TABLE q13 COMPRESS AS
00:50:34   2  SELECT
00:50:34   3  pair
00:50:34   4  ,ydate
00:50:34   5  ,prdate
00:50:34   6  ,rnum
00:50:34   7  ,lg4
00:50:34   8  ,lg8
00:50:34   9  ,lg12
00:50:34  10  ,ld4
00:50:34  11  ,CASE WHEN(clse-lg12)>0 then 1 ELSE -1 END trend
00:50:34  12  -- step by 1
00:50:34  13  ,clse-lg1 d01
00:50:34  14  ,lg1-lg2	d12
00:50:34  15  ,lg2-lg3	d23
00:50:34  16  ,lg3-lg4	d34
00:50:34  17  ,lg4-lg5	d45
00:50:34  18  ,lg5-lg6	d56
00:50:34  19  ,lg6-lg7	d67
00:50:34  20  ,lg7-lg8	d78
00:50:34  21  ,lg8-lg9	d89
00:50:34  22  -- step by 2
00:50:34  23  ,clse-lg2 d02
00:50:34  24  ,lg2-lg4 d24
00:50:34  25  ,lg4-lg6 d46
00:50:34  26  ,lg6-lg8 d68
00:50:34  27  -- step by 3
00:50:34  28  ,clse-lg3 d03
00:50:34  29  ,lg3-lg6	d36
00:50:34  30  ,lg6-lg9	d69
00:50:34  31  ,lg9-lg12 d912
00:50:34  32  -- step by 4
00:50:34  33  ,clse-lg4 d04
00:50:34  34  ,lg4-lg8	d48
00:50:34  35  ,lg8-lg12 d812
00:50:34  36  ,lg6-lg12 d612
00:50:34  37  ,lg12-lg18 d1218
00:50:34  38  --
00:50:34  39  ,ABS(clse-lg1)dc1
00:50:34  40  ,ABS(clse-lg2)dc2
00:50:34  41  ,ABS(clse-lg3)dc3
00:50:34  42  ,ABS(clse-lg4)dc4
00:50:34  43  ,ABS(clse-lg5)dc5
00:50:34  44  ,ABS(clse-lg6)dc6
00:50:34  45  ,ABS(clse-lg7)dc7
00:50:34  46  ,ABS(clse-lg8)dc8
00:50:34  47  ,ABS(clse-lg9)dc9
00:50:34  48  ,ABS(clse-lg12)dc12
00:50:34  49  ,ABS(clse-lg18)dc18
00:50:34  50  ,ABS(clse-lg24)dc24
00:50:34  51  ,ABS(clse-lg72)dc72
00:50:34  52  ,(ld4-clse) ug4
00:50:34  53  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 2  PRECEDING AND CURRENT ROW)crr2
00:50:34  54  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 3  PRECEDING AND CURRENT ROW)crr3
00:50:34  55  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 4  PRECEDING AND CURRENT ROW)crr4
00:50:34  56  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 5  PRECEDING AND CURRENT ROW)crr5
00:50:34  57  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6  PRECEDING AND CURRENT ROW)crr6
00:50:34  58  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 7  PRECEDING AND CURRENT ROW)crr7
00:50:34  59  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 8  PRECEDING AND CURRENT ROW)crr8
00:50:34  60  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 9  PRECEDING AND CURRENT ROW)crr9
00:50:34  61  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12 PRECEDING AND CURRENT ROW)crr12
00:50:34  62  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 24 PRECEDING AND CURRENT ROW)crr24
00:50:34  63  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 72 PRECEDING AND CURRENT ROW)crr72
00:50:34  64  ,0+TO_CHAR(ydate,'HH24')hh
00:50:34  65  ,0+TO_CHAR(ydate,'D')d
00:50:34  66  ,0+TO_CHAR(ydate,'W')w
00:50:34  67  FROM q11
00:50:34  68  ORDER BY pair,ydate
00:50:34  69  /

Table created.

Elapsed: 00:00:00.96
00:50:35 SQL> 
00:50:35 SQL> -- rpt
00:50:35 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    1951
	-1	    1841

Elapsed: 00:00:00.07
00:50:35 SQL> 
00:50:35 SQL> -- Calc gains and ntiles
00:50:35 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.14
00:50:35 SQL> CREATE TABLE q15 COMPRESS AS
00:50:35   2  SELECT
00:50:35   3  pair
00:50:35   4  ,ydate
00:50:35   5  ,prdate -- Should be unique
00:50:35   6  ,trend -- +1 or -1
00:50:35   7  ,dc12 -- next statement needs this
00:50:35   8  -- Use NTILE() to derive some attributes
00:50:35   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d12))		 att00
00:50:35  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d23))		 att01
00:50:35  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d34))		 att02
00:50:35  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d45))		 att03
00:50:35  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d56))		 att04
00:50:35  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d67))		 att05
00:50:35  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d78))		 att06
00:50:35  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d89))		 att07
00:50:35  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d912)) 	 att08
00:50:35  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc2)		 att09
00:50:35  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc3)		 att10
00:50:35  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc4)		 att11
00:50:35  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc5)		 att12
00:50:35  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6)		 att13
00:50:35  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc7)		 att14
00:50:35  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8)		 att15
00:50:35  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc9)		 att16
00:50:35  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att17
00:50:35  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc24)		 att18
00:50:35  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc72)		 att19
00:50:35  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr2,7))) att20
00:50:35  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr3,7))) att21
00:50:35  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr4,7))) att22
00:50:35  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr5,7))) att23
00:50:35  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6,7))) att24
00:50:35  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att25
00:50:35  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att26
00:50:35  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr72,7)))att27
00:50:35  37  -- date related integers: hour of day, day of week, week of month:
00:50:35  38  ,hh    att28
00:50:35  39  ,d     att29
00:50:35  40  ,w     att30
00:50:35  41  ,trend att31
00:50:35  42  ,ug4 g4
00:50:35  43  ,CASE WHEN ug4 IS NULL THEN NULL WHEN ug4 > 0.0006 THEN 'up' ELSE 'nup' END gatt
00:50:35  44  ,CASE WHEN ug4 IS NULL THEN NULL WHEN ug4< -0.0006 THEN 'up' ELSE 'nup' END gattn
00:50:35  45  FROM q13
00:50:35  46  ORDER BY pair,ydate
00:50:35  47  /

Table created.

Elapsed: 00:00:00.81
00:50:36 SQL> 
00:50:36 SQL> -- rpt
00:50:36 SQL> SELECT pair,trend,gatt,gattn,AVG(g4),COUNT(g4),CORR(dc12,g4)FROM q15
00:50:36   2  GROUP BY pair,trend,gatt,gattn
00:50:36   3  ORDER BY pair,trend,gatt,gattn
00:50:36   4  /

PAIR	     TREND GAT GAT    AVG(G4)  COUNT(G4) CORR(DC12,G4)
------- ---------- --- --- ---------- ---------- -------------
aud_usd 	-1 nup nup  -.0000113	     301    .037489029
aud_usd 	-1 nup up  -.00326065	     716    -.16044588
aud_usd 	-1 up  nup .003175335	     822    .149459209
aud_usd 	-1			       0
aud_usd 	 1 nup nup -.00002417	     362    -.02443808
aud_usd 	 1 nup up   -.0031269	     762    -.00734127
aud_usd 	 1 up  nup .003059152	     825    -.01396605
aud_usd 	 1			       0

8 rows selected.

Elapsed: 00:00:00.06
00:50:36 SQL> 
00:50:36 SQL> -- rpt
00:50:36 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
aud_usd 2010-12-15 00:00:00

Elapsed: 00:00:00.00
00:50:36 SQL> 
00:50:36 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.16
00:50:36 SQL> CREATE TABLE modsrc COMPRESS AS
00:50:36   2  SELECT
00:50:36   3  pair
00:50:36   4  ,ydate
00:50:36   5  ,prdate
00:50:36   6  ,trend
00:50:36   7  ,g4
00:50:36   8  ,gatt
00:50:36   9  ,gattn
00:50:36  10  ,dc12
00:50:36  11  FROM q15
00:50:36  12  /

Table created.

Elapsed: 00:00:00.06
00:50:36 SQL> 
00:50:36 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.11
00:50:36 SQL> 
00:50:36 SQL> -- rpt
00:50:36 SQL> 
00:50:36 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
       3792

Elapsed: 00:00:00.08
00:50:36 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
       3792

Elapsed: 00:00:00.00
00:50:36 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
       3792

Elapsed: 00:00:00.00
00:50:36 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
       3792

Elapsed: 00:00:00.01
00:50:36 SQL> 
00:50:36 SQL> SELECT pair,trend,gatt,gattn,AVG(g4),COUNT(g4),CORR(dc12,g4)FROM modsrc
00:50:36   2  GROUP BY pair,trend,gatt,gattn
00:50:36   3  ORDER BY pair,trend,gatt,gattn
00:50:36   4  /

PAIR	     TREND GAT GAT    AVG(G4)  COUNT(G4) CORR(DC12,G4)
------- ---------- --- --- ---------- ---------- -------------
aud_usd 	-1 nup nup  -.0000113	     301    .037489029
aud_usd 	-1 nup up  -.00326065	     716    -.16044588
aud_usd 	-1 up  nup .003175335	     822    .149459209
aud_usd 	-1			       0
aud_usd 	 1 nup nup -.00002417	     362    -.02443808
aud_usd 	 1 nup up   -.0031269	     762    -.00734127
aud_usd 	 1 up  nup .003059152	     825    -.01396605
aud_usd 	 1			       0

8 rows selected.

Elapsed: 00:00:00.00
00:50:36 SQL> 
00:50:36 SQL> DROP   TABLE aud_ms10 ;

Table dropped.

Elapsed: 00:00:00.15
00:50:36 SQL> CREATE TABLE aud_ms10 COMPRESS AS
00:50:36   2  SELECT
00:50:36   3  ydate
00:50:36   4  ,trend aud_trend
00:50:36   5  ,g4    aud_g4
00:50:36   6  ,gatt  aud_gatt
00:50:36   7  ,gattn	aud_gattn
00:50:36   8  FROM modsrc
00:50:36   9  /

Table created.

Elapsed: 00:00:00.07
00:50:36 SQL> 
00:50:36 SQL> ANALYZE TABLE aud_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.07
00:50:36 SQL> 
00:50:36 SQL> -- rpt
00:50:36 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g4),MIN(g4),MAX(g4)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G4)	 MIN(G4)    MAX(G4)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-05-12 01:00:00 2010-12-14 22:00:00	 1949	  -.0197      .0116
	-1 2010-05-11 13:00:00 2010-12-15 00:00:00	 1839	  -.0179      .0184

Elapsed: 00:00:00.01
00:50:36 SQL> SELECT aud_trend,MIN(ydate),MAX(ydate),COUNT(aud_trend),MIN(aud_g4),MAX(aud_g4)FROM aud_ms10 GROUP BY aud_trend;

 AUD_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(AUD_TREND) MIN(AUD_G4) MAX(AUD_G4)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-05-12 01:00:00 2010-12-14 22:00:00	       1951	 -.0197       .0116
	-1 2010-05-11 13:00:00 2010-12-15 00:00:00	       1841	 -.0179       .0184

Elapsed: 00:00:00.00
00:50:36 SQL> 
00:50:36 SQL> -- I need a copy of q15 attributes
00:50:36 SQL> 
00:50:36 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.04
00:50:37 SQL> CREATE TABLE aud_att COMPRESS AS
00:50:37   2  SELECT
00:50:37   3  ydate
00:50:37   4  ,att00 aud_att00
00:50:37   5  ,att01 aud_att01
00:50:37   6  ,att02 aud_att02
00:50:37   7  ,att03 aud_att03
00:50:37   8  ,att04 aud_att04
00:50:37   9  ,att05 aud_att05
00:50:37  10  ,att06 aud_att06
00:50:37  11  ,att07 aud_att07
00:50:37  12  ,att08 aud_att08
00:50:37  13  ,att09 aud_att09
00:50:37  14  ,att10 aud_att10
00:50:37  15  ,att11 aud_att11
00:50:37  16  ,att12 aud_att12
00:50:37  17  ,att13 aud_att13
00:50:37  18  ,att14 aud_att14
00:50:37  19  ,att15 aud_att15
00:50:37  20  ,att16 aud_att16
00:50:37  21  ,att17 aud_att17
00:50:37  22  ,att18 aud_att18
00:50:37  23  ,att19 aud_att19
00:50:37  24  ,att20 aud_att20
00:50:37  25  ,att21 aud_att21
00:50:37  26  ,att22 aud_att22
00:50:37  27  ,att23 aud_att23
00:50:37  28  ,att24 aud_att24
00:50:37  29  ,att25 aud_att25
00:50:37  30  ,att26 aud_att26
00:50:37  31  ,att27 aud_att27
00:50:37  32  ,att28 aud_att28
00:50:37  33  ,att29 aud_att29
00:50:37  34  ,att30 aud_att30
00:50:37  35  ,att31 aud_att31
00:50:37  36  FROM q15
00:50:37  37  /

Table created.

Elapsed: 00:00:00.10
00:50:37 SQL> 
00:50:37 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
00:50:37 SQL> 
00:50:37 SQL> -- rpt
00:50:37 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
      3792

Elapsed: 00:00:00.03
00:50:37 SQL> 
00:50:37 SQL> --
00:50:37 SQL> -- gbp10.sql
00:50:37 SQL> --
00:50:37 SQL> 
00:50:37 SQL> -- Creates views and tables for backtesting a forex SVM strategy
00:50:37 SQL> 
00:50:37 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.84
00:50:38 SQL> 
00:50:38 SQL> -- I created ibfu_t here:
00:50:38 SQL> -- /pt/s/rlk/svm4hp/update_ibfu_t.sql
00:50:38 SQL> 
00:50:38 SQL> CREATE OR REPLACE VIEW q11 AS
00:50:38   2  SELECT
00:50:38   3  pair
00:50:38   4  ,ydate
00:50:38   5  ,prdate
00:50:38   6  ,rownum rnum -- acts as t in my time-series
00:50:38   7  ,clse
00:50:38   8  ,LAG(clse,1,NULL)OVER(PARTITION BY pair ORDER BY pair,ydate) lg1
00:50:38   9  ,LAG(clse,2,NULL)OVER(PARTITION BY pair ORDER BY pair,ydate) lg2
00:50:38  10  ,LAG(clse,3,NULL)OVER(PARTITION BY pair ORDER BY pair,ydate) lg3
00:50:38  11  ,LAG(clse,4,NULL)OVER(PARTITION BY pair ORDER BY pair,ydate) lg4
00:50:38  12  ,LAG(clse,5,NULL)OVER(PARTITION BY pair ORDER BY pair,ydate) lg5
00:50:38  13  ,LAG(clse,6,NULL)OVER(PARTITION BY pair ORDER BY pair,ydate) lg6
00:50:38  14  ,LAG(clse,7,NULL)OVER(PARTITION BY pair ORDER BY pair,ydate) lg7
00:50:38  15  ,LAG(clse,8,NULL)OVER(PARTITION BY pair ORDER BY pair,ydate) lg8
00:50:38  16  ,LAG(clse,9,NULL)OVER(PARTITION BY pair ORDER BY pair,ydate) lg9
00:50:38  17  ,LAG(clse,12,NULL)OVER(PARTITION BY pair ORDER BY pair,ydate) lg12
00:50:38  18  ,LAG(clse,18,NULL)OVER(PARTITION BY pair ORDER BY pair,ydate) lg18
00:50:38  19  ,LAG(clse,24,NULL)OVER(PARTITION BY pair ORDER BY pair,ydate) lg24
00:50:38  20  ,LAG(clse,72,NULL)OVER(PARTITION BY pair ORDER BY pair,ydate) lg72
00:50:38  21  ,LEAD(clse,4,NULL)OVER(PARTITION BY pair ORDER BY pair,ydate) ld4
00:50:38  22  FROM ibfu_t WHERE pair LIKE'%gbp%'
00:50:38  23  ORDER BY ydate
00:50:38  24  /

View created.

Elapsed: 00:00:00.08
00:50:38 SQL> 
00:50:38 SQL> -- rpt
00:50:38 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
gbp_usd 	3792

Elapsed: 00:00:00.10
00:50:38 SQL> 
00:50:38 SQL> -- Calc deltas and gains
00:50:38 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.13
00:50:38 SQL> 
00:50:38 SQL> CREATE TABLE q13 COMPRESS AS
00:50:38   2  SELECT
00:50:38   3  pair
00:50:38   4  ,ydate
00:50:38   5  ,prdate
00:50:38   6  ,rnum
00:50:38   7  ,lg4
00:50:38   8  ,lg8
00:50:38   9  ,lg12
00:50:38  10  ,ld4
00:50:38  11  ,CASE WHEN(clse-lg12)>0 then 1 ELSE -1 END trend
00:50:38  12  -- step by 1
00:50:38  13  ,clse-lg1 d01
00:50:38  14  ,lg1-lg2	d12
00:50:38  15  ,lg2-lg3	d23
00:50:38  16  ,lg3-lg4	d34
00:50:38  17  ,lg4-lg5	d45
00:50:38  18  ,lg5-lg6	d56
00:50:38  19  ,lg6-lg7	d67
00:50:38  20  ,lg7-lg8	d78
00:50:38  21  ,lg8-lg9	d89
00:50:38  22  -- step by 2
00:50:38  23  ,clse-lg2 d02
00:50:38  24  ,lg2-lg4 d24
00:50:38  25  ,lg4-lg6 d46
00:50:38  26  ,lg6-lg8 d68
00:50:38  27  -- step by 3
00:50:38  28  ,clse-lg3 d03
00:50:38  29  ,lg3-lg6	d36
00:50:38  30  ,lg6-lg9	d69
00:50:38  31  ,lg9-lg12 d912
00:50:38  32  -- step by 4
00:50:38  33  ,clse-lg4 d04
00:50:38  34  ,lg4-lg8	d48
00:50:38  35  ,lg8-lg12 d812
00:50:38  36  ,lg6-lg12 d612
00:50:38  37  ,lg12-lg18 d1218
00:50:38  38  --
00:50:38  39  ,ABS(clse-lg1)dc1
00:50:38  40  ,ABS(clse-lg2)dc2
00:50:38  41  ,ABS(clse-lg3)dc3
00:50:38  42  ,ABS(clse-lg4)dc4
00:50:38  43  ,ABS(clse-lg5)dc5
00:50:38  44  ,ABS(clse-lg6)dc6
00:50:38  45  ,ABS(clse-lg7)dc7
00:50:38  46  ,ABS(clse-lg8)dc8
00:50:38  47  ,ABS(clse-lg9)dc9
00:50:38  48  ,ABS(clse-lg12)dc12
00:50:38  49  ,ABS(clse-lg18)dc18
00:50:38  50  ,ABS(clse-lg24)dc24
00:50:38  51  ,ABS(clse-lg72)dc72
00:50:38  52  ,(ld4-clse) ug4
00:50:38  53  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 2  PRECEDING AND CURRENT ROW)crr2
00:50:38  54  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 3  PRECEDING AND CURRENT ROW)crr3
00:50:38  55  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 4  PRECEDING AND CURRENT ROW)crr4
00:50:38  56  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 5  PRECEDING AND CURRENT ROW)crr5
00:50:38  57  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6  PRECEDING AND CURRENT ROW)crr6
00:50:38  58  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 7  PRECEDING AND CURRENT ROW)crr7
00:50:38  59  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 8  PRECEDING AND CURRENT ROW)crr8
00:50:38  60  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 9  PRECEDING AND CURRENT ROW)crr9
00:50:38  61  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12 PRECEDING AND CURRENT ROW)crr12
00:50:38  62  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 24 PRECEDING AND CURRENT ROW)crr24
00:50:38  63  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 72 PRECEDING AND CURRENT ROW)crr72
00:50:38  64  ,0+TO_CHAR(ydate,'HH24')hh
00:50:38  65  ,0+TO_CHAR(ydate,'D')d
00:50:38  66  ,0+TO_CHAR(ydate,'W')w
00:50:38  67  FROM q11
00:50:38  68  ORDER BY pair,ydate
00:50:38  69  /

Table created.

Elapsed: 00:00:00.38
00:50:38 SQL> 
00:50:38 SQL> -- rpt
00:50:38 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    1918
	-1	    1874

Elapsed: 00:00:00.10
00:50:38 SQL> 
00:50:38 SQL> -- Calc gains and ntiles
00:50:38 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.10
00:50:39 SQL> CREATE TABLE q15 COMPRESS AS
00:50:39   2  SELECT
00:50:39   3  pair
00:50:39   4  ,ydate
00:50:39   5  ,prdate -- Should be unique
00:50:39   6  ,trend -- +1 or -1
00:50:39   7  ,dc12 -- next statement needs this
00:50:39   8  -- Use NTILE() to derive some attributes
00:50:39   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d12))		 att00
00:50:39  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d23))		 att01
00:50:39  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d34))		 att02
00:50:39  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d45))		 att03
00:50:39  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d56))		 att04
00:50:39  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d67))		 att05
00:50:39  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d78))		 att06
00:50:39  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d89))		 att07
00:50:39  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d912)) 	 att08
00:50:39  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc2)		 att09
00:50:39  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc3)		 att10
00:50:39  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc4)		 att11
00:50:39  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc5)		 att12
00:50:39  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6)		 att13
00:50:39  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc7)		 att14
00:50:39  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8)		 att15
00:50:39  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc9)		 att16
00:50:39  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att17
00:50:39  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc24)		 att18
00:50:39  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc72)		 att19
00:50:39  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr2,7))) att20
00:50:39  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr3,7))) att21
00:50:39  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr4,7))) att22
00:50:39  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr5,7))) att23
00:50:39  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6,7))) att24
00:50:39  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att25
00:50:39  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att26
00:50:39  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr72,7)))att27
00:50:39  37  -- date related integers: hour of day, day of week, week of month:
00:50:39  38  ,hh    att28
00:50:39  39  ,d     att29
00:50:39  40  ,w     att30
00:50:39  41  ,trend att31
00:50:39  42  ,ug4 g4
00:50:39  43  ,CASE WHEN ug4 IS NULL THEN NULL WHEN ug4 > 0.0006 THEN 'up' ELSE 'nup' END gatt
00:50:39  44  ,CASE WHEN ug4 IS NULL THEN NULL WHEN ug4< -0.0006 THEN 'up' ELSE 'nup' END gattn
00:50:39  45  FROM q13
00:50:39  46  ORDER BY pair,ydate
00:50:39  47  /

Table created.

Elapsed: 00:00:00.71
00:50:39 SQL> 
00:50:39 SQL> -- rpt
00:50:39 SQL> SELECT pair,trend,gatt,gattn,AVG(g4),COUNT(g4),CORR(dc12,g4)FROM q15
00:50:39   2  GROUP BY pair,trend,gatt,gattn
00:50:39   3  ORDER BY pair,trend,gatt,gattn
00:50:39   4  /

PAIR	     TREND GAT GAT    AVG(G4)  COUNT(G4) CORR(DC12,G4)
------- ---------- --- --- ---------- ---------- -------------
gbp_usd 	-1 nup nup -3.832E-06	     304    .031143431
gbp_usd 	-1 nup up  -.00343995	     771     -.0408022
gbp_usd 	-1 up  nup .003627428	     795    .021496454
gbp_usd 	-1			       0
gbp_usd 	 1 nup nup 7.9279E-06	     333    .029231468
gbp_usd 	 1 nup up  -.00341519	     792    .053150895
gbp_usd 	 1 up  nup .003562295	     793    -.04671055

7 rows selected.

Elapsed: 00:00:00.02
00:50:39 SQL> 
00:50:39 SQL> -- rpt
00:50:39 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
gbp_usd 2010-12-15 00:00:00

Elapsed: 00:00:00.01
00:50:39 SQL> 
00:50:39 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.16
00:50:39 SQL> CREATE TABLE modsrc COMPRESS AS
00:50:39   2  SELECT
00:50:39   3  pair
00:50:39   4  ,ydate
00:50:39   5  ,prdate
00:50:39   6  ,trend
00:50:39   7  ,g4
00:50:39   8  ,gatt
00:50:39   9  ,gattn
00:50:39  10  ,dc12
00:50:39  11  FROM q15
00:50:39  12  /

Table created.

Elapsed: 00:00:00.06
00:50:40 SQL> 
00:50:40 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.12
00:50:40 SQL> 
00:50:40 SQL> -- rpt
00:50:40 SQL> 
00:50:40 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
       3792

Elapsed: 00:00:00.08
00:50:40 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
       3792

Elapsed: 00:00:00.00
00:50:40 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
       3792

Elapsed: 00:00:00.00
00:50:40 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
       3792

Elapsed: 00:00:00.00
00:50:40 SQL> 
00:50:40 SQL> SELECT pair,trend,gatt,gattn,AVG(g4),COUNT(g4),CORR(dc12,g4)FROM modsrc
00:50:40   2  GROUP BY pair,trend,gatt,gattn
00:50:40   3  ORDER BY pair,trend,gatt,gattn
00:50:40   4  /

PAIR	     TREND GAT GAT    AVG(G4)  COUNT(G4) CORR(DC12,G4)
------- ---------- --- --- ---------- ---------- -------------
gbp_usd 	-1 nup nup -3.832E-06	     304    .031143431
gbp_usd 	-1 nup up  -.00343995	     771     -.0408022
gbp_usd 	-1 up  nup .003627428	     795    .021496454
gbp_usd 	-1			       0
gbp_usd 	 1 nup nup 7.9279E-06	     333    .029231468
gbp_usd 	 1 nup up  -.00341519	     792    .053150895
gbp_usd 	 1 up  nup .003562295	     793    -.04671055

7 rows selected.

Elapsed: 00:00:00.01
00:50:40 SQL> 
00:50:40 SQL> DROP   TABLE gbp_ms10 ;

Table dropped.

Elapsed: 00:00:00.13
00:50:40 SQL> CREATE TABLE gbp_ms10 COMPRESS AS
00:50:40   2  SELECT
00:50:40   3  ydate
00:50:40   4  ,trend gbp_trend
00:50:40   5  ,g4    gbp_g4
00:50:40   6  ,gatt  gbp_gatt
00:50:40   7  ,gattn	gbp_gattn
00:50:40   8  FROM modsrc
00:50:40   9  /

Table created.

Elapsed: 00:00:00.16
00:50:40 SQL> 
00:50:40 SQL> ANALYZE TABLE gbp_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.11
00:50:40 SQL> 
00:50:40 SQL> -- rpt
00:50:40 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g4),MIN(g4),MAX(g4)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G4)	 MIN(G4)    MAX(G4)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-05-12 01:00:00 2010-12-14 11:00:00	 1918	  -.0194      .0192
	-1 2010-05-11 13:00:00 2010-12-15 00:00:00	 1870	  -.0243      .0217

Elapsed: 00:00:00.01
00:50:40 SQL> SELECT gbp_trend,MIN(ydate),MAX(ydate),COUNT(gbp_trend),MIN(gbp_g4),MAX(gbp_g4)FROM gbp_ms10 GROUP BY gbp_trend;

 GBP_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(GBP_TREND) MIN(GBP_G4) MAX(GBP_G4)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-05-12 01:00:00 2010-12-14 11:00:00	       1918	 -.0194       .0192
	-1 2010-05-11 13:00:00 2010-12-15 00:00:00	       1874	 -.0243       .0217

Elapsed: 00:00:00.02
00:50:40 SQL> 
00:50:40 SQL> -- I need a copy of q15 attributes
00:50:40 SQL> 
00:50:40 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.10
00:50:40 SQL> CREATE TABLE gbp_att COMPRESS AS
00:50:40   2  SELECT
00:50:40   3  ydate
00:50:40   4  ,att00 gbp_att00
00:50:40   5  ,att01 gbp_att01
00:50:40   6  ,att02 gbp_att02
00:50:40   7  ,att03 gbp_att03
00:50:40   8  ,att04 gbp_att04
00:50:40   9  ,att05 gbp_att05
00:50:40  10  ,att06 gbp_att06
00:50:40  11  ,att07 gbp_att07
00:50:40  12  ,att08 gbp_att08
00:50:40  13  ,att09 gbp_att09
00:50:40  14  ,att10 gbp_att10
00:50:40  15  ,att11 gbp_att11
00:50:40  16  ,att12 gbp_att12
00:50:40  17  ,att13 gbp_att13
00:50:40  18  ,att14 gbp_att14
00:50:40  19  ,att15 gbp_att15
00:50:40  20  ,att16 gbp_att16
00:50:40  21  ,att17 gbp_att17
00:50:40  22  ,att18 gbp_att18
00:50:40  23  ,att19 gbp_att19
00:50:40  24  ,att20 gbp_att20
00:50:40  25  ,att21 gbp_att21
00:50:40  26  ,att22 gbp_att22
00:50:40  27  ,att23 gbp_att23
00:50:40  28  ,att24 gbp_att24
00:50:40  29  ,att25 gbp_att25
00:50:40  30  ,att26 gbp_att26
00:50:40  31  ,att27 gbp_att27
00:50:40  32  ,att28 gbp_att28
00:50:40  33  ,att29 gbp_att29
00:50:40  34  ,att30 gbp_att30
00:50:40  35  ,att31 gbp_att31
00:50:40  36  FROM q15
00:50:40  37  /

Table created.

Elapsed: 00:00:00.19
00:50:40 SQL> 
00:50:40 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
00:50:41 SQL> 
00:50:41 SQL> -- rpt
00:50:41 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
      3792

Elapsed: 00:00:00.00
00:50:41 SQL> 
00:50:41 SQL> --
00:50:41 SQL> -- jpy10.sql
00:50:41 SQL> --
00:50:41 SQL> 
00:50:41 SQL> -- Creates views and tables for backtesting a forex SVM strategy
00:50:41 SQL> 
00:50:41 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:01.05
00:50:42 SQL> 
00:50:42 SQL> -- I created ibfu_t here:
00:50:42 SQL> -- /pt/s/rlk/svm4hp/update_ibfu_t.sql
00:50:42 SQL> 
00:50:42 SQL> CREATE OR REPLACE VIEW q11 AS
00:50:42   2  SELECT
00:50:42   3  pair
00:50:42   4  ,ydate
00:50:42   5  ,prdate
00:50:42   6  ,rownum rnum -- acts as t in my time-series
00:50:42   7  ,clse
00:50:42   8  ,LAG(clse,1,NULL)OVER(PARTITION BY pair ORDER BY pair,ydate) lg1
00:50:42   9  ,LAG(clse,2,NULL)OVER(PARTITION BY pair ORDER BY pair,ydate) lg2
00:50:42  10  ,LAG(clse,3,NULL)OVER(PARTITION BY pair ORDER BY pair,ydate) lg3
00:50:42  11  ,LAG(clse,4,NULL)OVER(PARTITION BY pair ORDER BY pair,ydate) lg4
00:50:42  12  ,LAG(clse,5,NULL)OVER(PARTITION BY pair ORDER BY pair,ydate) lg5
00:50:42  13  ,LAG(clse,6,NULL)OVER(PARTITION BY pair ORDER BY pair,ydate) lg6
00:50:42  14  ,LAG(clse,7,NULL)OVER(PARTITION BY pair ORDER BY pair,ydate) lg7
00:50:42  15  ,LAG(clse,8,NULL)OVER(PARTITION BY pair ORDER BY pair,ydate) lg8
00:50:42  16  ,LAG(clse,9,NULL)OVER(PARTITION BY pair ORDER BY pair,ydate) lg9
00:50:42  17  ,LAG(clse,12,NULL)OVER(PARTITION BY pair ORDER BY pair,ydate) lg12
00:50:42  18  ,LAG(clse,18,NULL)OVER(PARTITION BY pair ORDER BY pair,ydate) lg18
00:50:42  19  ,LAG(clse,24,NULL)OVER(PARTITION BY pair ORDER BY pair,ydate) lg24
00:50:42  20  ,LAG(clse,72,NULL)OVER(PARTITION BY pair ORDER BY pair,ydate) lg72
00:50:42  21  ,LEAD(clse,4,NULL)OVER(PARTITION BY pair ORDER BY pair,ydate) ld4
00:50:42  22  FROM ibfu_t WHERE pair LIKE'%jpy%'
00:50:42  23  ORDER BY ydate
00:50:42  24  /

View created.

Elapsed: 00:00:00.03
00:50:42 SQL> 
00:50:42 SQL> -- rpt
00:50:42 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
usd_jpy 	3792

Elapsed: 00:00:00.09
00:50:42 SQL> 
00:50:42 SQL> -- Calc deltas and gains
00:50:42 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.72
00:50:43 SQL> 
00:50:43 SQL> CREATE TABLE q13 COMPRESS AS
00:50:43   2  SELECT
00:50:43   3  pair
00:50:43   4  ,ydate
00:50:43   5  ,prdate
00:50:43   6  ,rnum
00:50:43   7  ,lg4
00:50:43   8  ,lg8
00:50:43   9  ,lg12
00:50:43  10  ,ld4
00:50:43  11  ,CASE WHEN(clse-lg12)>0 then 1 ELSE -1 END trend
00:50:43  12  -- step by 1
00:50:43  13  ,clse-lg1 d01
00:50:43  14  ,lg1-lg2	d12
00:50:43  15  ,lg2-lg3	d23
00:50:43  16  ,lg3-lg4	d34
00:50:43  17  ,lg4-lg5	d45
00:50:43  18  ,lg5-lg6	d56
00:50:43  19  ,lg6-lg7	d67
00:50:43  20  ,lg7-lg8	d78
00:50:43  21  ,lg8-lg9	d89
00:50:43  22  -- step by 2
00:50:43  23  ,clse-lg2 d02
00:50:43  24  ,lg2-lg4 d24
00:50:43  25  ,lg4-lg6 d46
00:50:43  26  ,lg6-lg8 d68
00:50:43  27  -- step by 3
00:50:43  28  ,clse-lg3 d03
00:50:43  29  ,lg3-lg6	d36
00:50:43  30  ,lg6-lg9	d69
00:50:43  31  ,lg9-lg12 d912
00:50:43  32  -- step by 4
00:50:43  33  ,clse-lg4 d04
00:50:43  34  ,lg4-lg8	d48
00:50:43  35  ,lg8-lg12 d812
00:50:43  36  ,lg6-lg12 d612
00:50:43  37  ,lg12-lg18 d1218
00:50:43  38  --
00:50:43  39  ,ABS(clse-lg1)dc1
00:50:43  40  ,ABS(clse-lg2)dc2
00:50:43  41  ,ABS(clse-lg3)dc3
00:50:43  42  ,ABS(clse-lg4)dc4
00:50:43  43  ,ABS(clse-lg5)dc5
00:50:43  44  ,ABS(clse-lg6)dc6
00:50:43  45  ,ABS(clse-lg7)dc7
00:50:43  46  ,ABS(clse-lg8)dc8
00:50:43  47  ,ABS(clse-lg9)dc9
00:50:43  48  ,ABS(clse-lg12)dc12
00:50:43  49  ,ABS(clse-lg18)dc18
00:50:43  50  ,ABS(clse-lg24)dc24
00:50:43  51  ,ABS(clse-lg72)dc72
00:50:43  52  ,(ld4-clse) ug4
00:50:43  53  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 2  PRECEDING AND CURRENT ROW)crr2
00:50:43  54  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 3  PRECEDING AND CURRENT ROW)crr3
00:50:43  55  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 4  PRECEDING AND CURRENT ROW)crr4
00:50:43  56  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 5  PRECEDING AND CURRENT ROW)crr5
00:50:43  57  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6  PRECEDING AND CURRENT ROW)crr6
00:50:43  58  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 7  PRECEDING AND CURRENT ROW)crr7
00:50:43  59  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 8  PRECEDING AND CURRENT ROW)crr8
00:50:43  60  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 9  PRECEDING AND CURRENT ROW)crr9
00:50:43  61  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12 PRECEDING AND CURRENT ROW)crr12
00:50:43  62  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 24 PRECEDING AND CURRENT ROW)crr24
00:50:43  63  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 72 PRECEDING AND CURRENT ROW)crr72
00:50:43  64  ,0+TO_CHAR(ydate,'HH24')hh
00:50:43  65  ,0+TO_CHAR(ydate,'D')d
00:50:43  66  ,0+TO_CHAR(ydate,'W')w
00:50:43  67  FROM q11
00:50:43  68  ORDER BY pair,ydate
00:50:43  69  /

Table created.

Elapsed: 00:00:00.50
00:50:43 SQL> 
00:50:43 SQL> -- rpt
00:50:43 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    1712
	-1	    2080

Elapsed: 00:00:00.04
00:50:43 SQL> 
00:50:43 SQL> -- Calc gains and ntiles
00:50:43 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.12
00:50:43 SQL> CREATE TABLE q15 COMPRESS AS
00:50:43   2  SELECT
00:50:43   3  pair
00:50:43   4  ,ydate
00:50:43   5  ,prdate -- Should be unique
00:50:43   6  ,trend -- +1 or -1
00:50:43   7  ,dc12 -- next statement needs this
00:50:43   8  -- Use NTILE() to derive some attributes
00:50:43   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d12))		 att00
00:50:43  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d23))		 att01
00:50:43  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d34))		 att02
00:50:43  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d45))		 att03
00:50:43  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d56))		 att04
00:50:43  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d67))		 att05
00:50:43  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d78))		 att06
00:50:43  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d89))		 att07
00:50:43  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d912)) 	 att08
00:50:43  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc2)		 att09
00:50:43  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc3)		 att10
00:50:43  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc4)		 att11
00:50:43  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc5)		 att12
00:50:43  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6)		 att13
00:50:43  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc7)		 att14
00:50:43  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8)		 att15
00:50:43  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc9)		 att16
00:50:43  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att17
00:50:43  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc24)		 att18
00:50:43  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc72)		 att19
00:50:43  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr2,7))) att20
00:50:43  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr3,7))) att21
00:50:43  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr4,7))) att22
00:50:43  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr5,7))) att23
00:50:43  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6,7))) att24
00:50:43  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att25
00:50:43  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att26
00:50:43  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr72,7)))att27
00:50:43  37  -- date related integers: hour of day, day of week, week of month:
00:50:43  38  ,hh    att28
00:50:43  39  ,d     att29
00:50:43  40  ,w     att30
00:50:43  41  ,trend att31
00:50:43  42  ,ug4 g4
00:50:43  43  ,CASE WHEN ug4 IS NULL THEN NULL WHEN ug4 > 0.0006 THEN 'up' ELSE 'nup' END gatt
00:50:43  44  ,CASE WHEN ug4 IS NULL THEN NULL WHEN ug4< -0.0006 THEN 'up' ELSE 'nup' END gattn
00:50:43  45  FROM q13
00:50:43  46  ORDER BY pair,ydate
00:50:43  47  /

Table created.

Elapsed: 00:00:01.38
00:50:45 SQL> 
00:50:45 SQL> -- rpt
00:50:45 SQL> SELECT pair,trend,gatt,gattn,AVG(g4),COUNT(g4),CORR(dc12,g4)FROM q15
00:50:45   2  GROUP BY pair,trend,gatt,gattn
00:50:45   3  ORDER BY pair,trend,gatt,gattn
00:50:45   4  /

PAIR	     TREND GAT GAT    AVG(G4)  COUNT(G4) CORR(DC12,G4)
------- ---------- --- --- ---------- ---------- -------------
usd_jpy 	-1 nup nup	    0	      57
usd_jpy 	-1 nup up  -.16870621	     999    -.06495076
usd_jpy 	-1 up  nup .160062012	    1024    .157761449
usd_jpy 	 1 nup nup	    0	      28
usd_jpy 	 1 nup up  -.16423427	     922    -.00550838
usd_jpy 	 1 up  nup .157787599	     758    .109714172
usd_jpy 	 1			       0

7 rows selected.

Elapsed: 00:00:00.07
00:50:45 SQL> 
00:50:45 SQL> -- rpt
00:50:45 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
usd_jpy 2010-12-15 00:00:00

Elapsed: 00:00:00.02
00:50:45 SQL> 
00:50:45 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.10
00:50:45 SQL> CREATE TABLE modsrc COMPRESS AS
00:50:45   2  SELECT
00:50:45   3  pair
00:50:45   4  ,ydate
00:50:45   5  ,prdate
00:50:45   6  ,trend
00:50:45   7  ,g4
00:50:45   8  ,gatt
00:50:45   9  ,gattn
00:50:45  10  ,dc12
00:50:45  11  FROM q15
00:50:45  12  /

Table created.

Elapsed: 00:00:00.04
00:50:45 SQL> 
00:50:45 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.06
00:50:45 SQL> 
00:50:45 SQL> -- rpt
00:50:45 SQL> 
00:50:45 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
       3792

Elapsed: 00:00:00.08
00:50:45 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
       3792

Elapsed: 00:00:00.00
00:50:45 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
       3792

Elapsed: 00:00:00.01
00:50:45 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
       3792

Elapsed: 00:00:00.00
00:50:45 SQL> 
00:50:45 SQL> SELECT pair,trend,gatt,gattn,AVG(g4),COUNT(g4),CORR(dc12,g4)FROM modsrc
00:50:45   2  GROUP BY pair,trend,gatt,gattn
00:50:45   3  ORDER BY pair,trend,gatt,gattn
00:50:45   4  /

PAIR	     TREND GAT GAT    AVG(G4)  COUNT(G4) CORR(DC12,G4)
------- ---------- --- --- ---------- ---------- -------------
usd_jpy 	-1 nup nup	    0	      57
usd_jpy 	-1 nup up  -.16870621	     999    -.06495076
usd_jpy 	-1 up  nup .160062012	    1024    .157761449
usd_jpy 	 1 nup nup	    0	      28
usd_jpy 	 1 nup up  -.16423427	     922    -.00550838
usd_jpy 	 1 up  nup .157787599	     758    .109714172
usd_jpy 	 1			       0

7 rows selected.

Elapsed: 00:00:00.00
00:50:45 SQL> 
00:50:45 SQL> DROP   TABLE jpy_ms10 ;

Table dropped.

Elapsed: 00:00:00.17
00:50:45 SQL> CREATE TABLE jpy_ms10 COMPRESS AS
00:50:45   2  SELECT
00:50:45   3  ydate
00:50:45   4  ,trend jpy_trend
00:50:45   5  ,g4    jpy_g4
00:50:45   6  ,gatt  jpy_gatt
00:50:45   7  ,gattn	jpy_gattn
00:50:45   8  FROM modsrc
00:50:45   9  /

Table created.

Elapsed: 00:00:00.06
00:50:45 SQL> 
00:50:45 SQL> ANALYZE TABLE jpy_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.11
00:50:45 SQL> 
00:50:45 SQL> -- rpt
00:50:45 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g4),MIN(g4),MAX(g4)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G4)	 MIN(G4)    MAX(G4)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-05-12 01:00:00 2010-12-15 00:00:00	 1708	   -1.05	.71
	-1 2010-05-11 13:00:00 2010-12-14 19:00:00	 2080	   -2.13       1.97

Elapsed: 00:00:00.01
00:50:45 SQL> SELECT jpy_trend,MIN(ydate),MAX(ydate),COUNT(jpy_trend),MIN(jpy_g4),MAX(jpy_g4)FROM jpy_ms10 GROUP BY jpy_trend;

 JPY_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(JPY_TREND) MIN(JPY_G4) MAX(JPY_G4)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-05-12 01:00:00 2010-12-15 00:00:00	       1712	  -1.05 	.71
	-1 2010-05-11 13:00:00 2010-12-14 19:00:00	       2080	  -2.13        1.97

Elapsed: 00:00:00.00
00:50:45 SQL> 
00:50:45 SQL> -- I need a copy of q15 attributes
00:50:45 SQL> 
00:50:45 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.08
00:50:45 SQL> CREATE TABLE jpy_att COMPRESS AS
00:50:45   2  SELECT
00:50:45   3  ydate
00:50:45   4  ,att00 jpy_att00
00:50:45   5  ,att01 jpy_att01
00:50:45   6  ,att02 jpy_att02
00:50:45   7  ,att03 jpy_att03
00:50:45   8  ,att04 jpy_att04
00:50:45   9  ,att05 jpy_att05
00:50:45  10  ,att06 jpy_att06
00:50:45  11  ,att07 jpy_att07
00:50:45  12  ,att08 jpy_att08
00:50:45  13  ,att09 jpy_att09
00:50:45  14  ,att10 jpy_att10
00:50:45  15  ,att11 jpy_att11
00:50:45  16  ,att12 jpy_att12
00:50:45  17  ,att13 jpy_att13
00:50:45  18  ,att14 jpy_att14
00:50:45  19  ,att15 jpy_att15
00:50:45  20  ,att16 jpy_att16
00:50:45  21  ,att17 jpy_att17
00:50:45  22  ,att18 jpy_att18
00:50:45  23  ,att19 jpy_att19
00:50:45  24  ,att20 jpy_att20
00:50:45  25  ,att21 jpy_att21
00:50:45  26  ,att22 jpy_att22
00:50:45  27  ,att23 jpy_att23
00:50:45  28  ,att24 jpy_att24
00:50:45  29  ,att25 jpy_att25
00:50:45  30  ,att26 jpy_att26
00:50:45  31  ,att27 jpy_att27
00:50:45  32  ,att28 jpy_att28
00:50:45  33  ,att29 jpy_att29
00:50:45  34  ,att30 jpy_att30
00:50:45  35  ,att31 jpy_att31
00:50:45  36  FROM q15
00:50:45  37  /

Table created.

Elapsed: 00:00:00.75
00:50:46 SQL> 
00:50:46 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.31
00:50:46 SQL> 
00:50:46 SQL> -- rpt
00:50:46 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
      3792

Elapsed: 00:00:00.01
00:50:46 SQL> 
00:50:46 SQL> --
00:50:46 SQL> -- cad10.sql
00:50:46 SQL> --
00:50:46 SQL> 
00:50:46 SQL> -- Creates views and tables for backtesting a forex SVM strategy
00:50:46 SQL> 
00:50:46 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.91
00:50:47 SQL> 
00:50:47 SQL> -- I created ibfu_t here:
00:50:47 SQL> -- /pt/s/rlk/svm4hp/update_ibfu_t.sql
00:50:47 SQL> 
00:50:47 SQL> CREATE OR REPLACE VIEW q11 AS
00:50:47   2  SELECT
00:50:47   3  pair
00:50:47   4  ,ydate
00:50:47   5  ,prdate
00:50:47   6  ,rownum rnum -- acts as t in my time-series
00:50:47   7  ,clse
00:50:47   8  ,LAG(clse,1,NULL)OVER(PARTITION BY pair ORDER BY pair,ydate) lg1
00:50:47   9  ,LAG(clse,2,NULL)OVER(PARTITION BY pair ORDER BY pair,ydate) lg2
00:50:47  10  ,LAG(clse,3,NULL)OVER(PARTITION BY pair ORDER BY pair,ydate) lg3
00:50:47  11  ,LAG(clse,4,NULL)OVER(PARTITION BY pair ORDER BY pair,ydate) lg4
00:50:47  12  ,LAG(clse,5,NULL)OVER(PARTITION BY pair ORDER BY pair,ydate) lg5
00:50:47  13  ,LAG(clse,6,NULL)OVER(PARTITION BY pair ORDER BY pair,ydate) lg6
00:50:47  14  ,LAG(clse,7,NULL)OVER(PARTITION BY pair ORDER BY pair,ydate) lg7
00:50:47  15  ,LAG(clse,8,NULL)OVER(PARTITION BY pair ORDER BY pair,ydate) lg8
00:50:47  16  ,LAG(clse,9,NULL)OVER(PARTITION BY pair ORDER BY pair,ydate) lg9
00:50:47  17  ,LAG(clse,12,NULL)OVER(PARTITION BY pair ORDER BY pair,ydate) lg12
00:50:47  18  ,LAG(clse,18,NULL)OVER(PARTITION BY pair ORDER BY pair,ydate) lg18
00:50:47  19  ,LAG(clse,24,NULL)OVER(PARTITION BY pair ORDER BY pair,ydate) lg24
00:50:47  20  ,LAG(clse,72,NULL)OVER(PARTITION BY pair ORDER BY pair,ydate) lg72
00:50:47  21  ,LEAD(clse,4,NULL)OVER(PARTITION BY pair ORDER BY pair,ydate) ld4
00:50:47  22  FROM ibfu_t WHERE pair LIKE'%cad%'
00:50:47  23  ORDER BY ydate
00:50:47  24  /

View created.

Elapsed: 00:00:00.05
00:50:47 SQL> 
00:50:47 SQL> -- rpt
00:50:47 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
usd_cad 	3792

Elapsed: 00:00:00.10
00:50:48 SQL> 
00:50:48 SQL> -- Calc deltas and gains
00:50:48 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.17
00:50:48 SQL> 
00:50:48 SQL> CREATE TABLE q13 COMPRESS AS
00:50:48   2  SELECT
00:50:48   3  pair
00:50:48   4  ,ydate
00:50:48   5  ,prdate
00:50:48   6  ,rnum
00:50:48   7  ,lg4
00:50:48   8  ,lg8
00:50:48   9  ,lg12
00:50:48  10  ,ld4
00:50:48  11  ,CASE WHEN(clse-lg12)>0 then 1 ELSE -1 END trend
00:50:48  12  -- step by 1
00:50:48  13  ,clse-lg1 d01
00:50:48  14  ,lg1-lg2	d12
00:50:48  15  ,lg2-lg3	d23
00:50:48  16  ,lg3-lg4	d34
00:50:48  17  ,lg4-lg5	d45
00:50:48  18  ,lg5-lg6	d56
00:50:48  19  ,lg6-lg7	d67
00:50:48  20  ,lg7-lg8	d78
00:50:48  21  ,lg8-lg9	d89
00:50:48  22  -- step by 2
00:50:48  23  ,clse-lg2 d02
00:50:48  24  ,lg2-lg4 d24
00:50:48  25  ,lg4-lg6 d46
00:50:48  26  ,lg6-lg8 d68
00:50:48  27  -- step by 3
00:50:48  28  ,clse-lg3 d03
00:50:48  29  ,lg3-lg6	d36
00:50:48  30  ,lg6-lg9	d69
00:50:48  31  ,lg9-lg12 d912
00:50:48  32  -- step by 4
00:50:48  33  ,clse-lg4 d04
00:50:48  34  ,lg4-lg8	d48
00:50:48  35  ,lg8-lg12 d812
00:50:48  36  ,lg6-lg12 d612
00:50:48  37  ,lg12-lg18 d1218
00:50:48  38  --
00:50:48  39  ,ABS(clse-lg1)dc1
00:50:48  40  ,ABS(clse-lg2)dc2
00:50:48  41  ,ABS(clse-lg3)dc3
00:50:48  42  ,ABS(clse-lg4)dc4
00:50:48  43  ,ABS(clse-lg5)dc5
00:50:48  44  ,ABS(clse-lg6)dc6
00:50:48  45  ,ABS(clse-lg7)dc7
00:50:48  46  ,ABS(clse-lg8)dc8
00:50:48  47  ,ABS(clse-lg9)dc9
00:50:48  48  ,ABS(clse-lg12)dc12
00:50:48  49  ,ABS(clse-lg18)dc18
00:50:48  50  ,ABS(clse-lg24)dc24
00:50:48  51  ,ABS(clse-lg72)dc72
00:50:48  52  ,(ld4-clse) ug4
00:50:48  53  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 2  PRECEDING AND CURRENT ROW)crr2
00:50:48  54  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 3  PRECEDING AND CURRENT ROW)crr3
00:50:48  55  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 4  PRECEDING AND CURRENT ROW)crr4
00:50:48  56  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 5  PRECEDING AND CURRENT ROW)crr5
00:50:48  57  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6  PRECEDING AND CURRENT ROW)crr6
00:50:48  58  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 7  PRECEDING AND CURRENT ROW)crr7
00:50:48  59  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 8  PRECEDING AND CURRENT ROW)crr8
00:50:48  60  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 9  PRECEDING AND CURRENT ROW)crr9
00:50:48  61  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12 PRECEDING AND CURRENT ROW)crr12
00:50:48  62  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 24 PRECEDING AND CURRENT ROW)crr24
00:50:48  63  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 72 PRECEDING AND CURRENT ROW)crr72
00:50:48  64  ,0+TO_CHAR(ydate,'HH24')hh
00:50:48  65  ,0+TO_CHAR(ydate,'D')d
00:50:48  66  ,0+TO_CHAR(ydate,'W')w
00:50:48  67  FROM q11
00:50:48  68  ORDER BY pair,ydate
00:50:48  69  /

Table created.

Elapsed: 00:00:00.39
00:50:48 SQL> 
00:50:48 SQL> -- rpt
00:50:48 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    1734
	-1	    2058

Elapsed: 00:00:00.09
00:50:48 SQL> 
00:50:48 SQL> -- Calc gains and ntiles
00:50:48 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.25
00:50:48 SQL> CREATE TABLE q15 COMPRESS AS
00:50:48   2  SELECT
00:50:48   3  pair
00:50:48   4  ,ydate
00:50:48   5  ,prdate -- Should be unique
00:50:48   6  ,trend -- +1 or -1
00:50:48   7  ,dc12 -- next statement needs this
00:50:48   8  -- Use NTILE() to derive some attributes
00:50:48   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d12))		 att00
00:50:48  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d23))		 att01
00:50:48  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d34))		 att02
00:50:48  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d45))		 att03
00:50:48  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d56))		 att04
00:50:48  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d67))		 att05
00:50:48  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d78))		 att06
00:50:48  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d89))		 att07
00:50:48  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d912)) 	 att08
00:50:48  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc2)		 att09
00:50:48  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc3)		 att10
00:50:48  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc4)		 att11
00:50:48  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc5)		 att12
00:50:48  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6)		 att13
00:50:48  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc7)		 att14
00:50:48  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8)		 att15
00:50:48  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc9)		 att16
00:50:48  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att17
00:50:48  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc24)		 att18
00:50:48  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc72)		 att19
00:50:48  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr2,7))) att20
00:50:48  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr3,7))) att21
00:50:48  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr4,7))) att22
00:50:48  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr5,7))) att23
00:50:48  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6,7))) att24
00:50:48  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att25
00:50:48  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att26
00:50:48  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr72,7)))att27
00:50:48  37  -- date related integers: hour of day, day of week, week of month:
00:50:48  38  ,hh    att28
00:50:48  39  ,d     att29
00:50:48  40  ,w     att30
00:50:48  41  ,trend att31
00:50:48  42  ,ug4 g4
00:50:48  43  ,CASE WHEN ug4 IS NULL THEN NULL WHEN ug4 > 0.0006 THEN 'up' ELSE 'nup' END gatt
00:50:48  44  ,CASE WHEN ug4 IS NULL THEN NULL WHEN ug4< -0.0006 THEN 'up' ELSE 'nup' END gattn
00:50:48  45  FROM q13
00:50:48  46  ORDER BY pair,ydate
00:50:48  47  /

Table created.

Elapsed: 00:00:00.84
00:50:49 SQL> 
00:50:49 SQL> -- rpt
00:50:49 SQL> SELECT pair,trend,gatt,gattn,AVG(g4),COUNT(g4),CORR(dc12,g4)FROM q15
00:50:49   2  GROUP BY pair,trend,gatt,gattn
00:50:49   3  ORDER BY pair,trend,gatt,gattn
00:50:49   4  /

PAIR	     TREND GAT GAT    AVG(G4)  COUNT(G4) CORR(DC12,G4)
------- ---------- --- --- ---------- ---------- -------------
usd_cad 	-1 nup nup -.00003116	     495    .026030817
usd_cad 	-1 nup up  -.00261484	     790    .068465838
usd_cad 	-1 up  nup .002811655	     769    .029227285
usd_cad 	-1			       0
usd_cad 	 1 nup nup -4.593E-07	     381    .041039252
usd_cad 	 1 nup up  -.00285413	     718    -.01070071
usd_cad 	 1 up  nup .003006969	     635    .054044227

7 rows selected.

Elapsed: 00:00:00.03
00:50:49 SQL> 
00:50:49 SQL> -- rpt
00:50:49 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
usd_cad 2010-12-15 00:00:00

Elapsed: 00:00:00.01
00:50:49 SQL> 
00:50:49 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
00:50:49 SQL> CREATE TABLE modsrc COMPRESS AS
00:50:49   2  SELECT
00:50:49   3  pair
00:50:49   4  ,ydate
00:50:49   5  ,prdate
00:50:49   6  ,trend
00:50:49   7  ,g4
00:50:49   8  ,gatt
00:50:49   9  ,gattn
00:50:49  10  ,dc12
00:50:49  11  FROM q15
00:50:49  12  /

Table created.

Elapsed: 00:00:00.05
00:50:49 SQL> 
00:50:49 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
00:50:50 SQL> 
00:50:50 SQL> -- rpt
00:50:50 SQL> 
00:50:50 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
       3792

Elapsed: 00:00:00.08
00:50:50 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
       3792

Elapsed: 00:00:00.00
00:50:50 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
       3792

Elapsed: 00:00:00.00
00:50:50 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
       3792

Elapsed: 00:00:00.01
00:50:50 SQL> 
00:50:50 SQL> SELECT pair,trend,gatt,gattn,AVG(g4),COUNT(g4),CORR(dc12,g4)FROM modsrc
00:50:50   2  GROUP BY pair,trend,gatt,gattn
00:50:50   3  ORDER BY pair,trend,gatt,gattn
00:50:50   4  /

PAIR	     TREND GAT GAT    AVG(G4)  COUNT(G4) CORR(DC12,G4)
------- ---------- --- --- ---------- ---------- -------------
usd_cad 	-1 nup nup -.00003116	     495    .026030817
usd_cad 	-1 nup up  -.00261484	     790    .068465838
usd_cad 	-1 up  nup .002811655	     769    .029227285
usd_cad 	-1			       0
usd_cad 	 1 nup nup -4.593E-07	     381    .041039252
usd_cad 	 1 nup up  -.00285413	     718    -.01070071
usd_cad 	 1 up  nup .003006969	     635    .054044227

7 rows selected.

Elapsed: 00:00:00.00
00:50:50 SQL> 
00:50:50 SQL> DROP   TABLE cad_ms10 ;

Table dropped.

Elapsed: 00:00:00.11
00:50:50 SQL> CREATE TABLE cad_ms10 COMPRESS AS
00:50:50   2  SELECT
00:50:50   3  ydate
00:50:50   4  ,trend cad_trend
00:50:50   5  ,g4    cad_g4
00:50:50   6  ,gatt  cad_gatt
00:50:50   7  ,gattn	cad_gattn
00:50:50   8  FROM modsrc
00:50:50   9  /

Table created.

Elapsed: 00:00:00.03
00:50:50 SQL> 
00:50:50 SQL> ANALYZE TABLE cad_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.10
00:50:50 SQL> 
00:50:50 SQL> -- rpt
00:50:50 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g4),MIN(g4),MAX(g4)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G4)	 MIN(G4)    MAX(G4)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-05-12 03:00:00 2010-12-14 15:00:00	 1734	  -.0173      .0159
	-1 2010-05-11 13:00:00 2010-12-15 00:00:00	 2054	  -.0139      .0147

Elapsed: 00:00:00.01
00:50:50 SQL> SELECT cad_trend,MIN(ydate),MAX(ydate),COUNT(cad_trend),MIN(cad_g4),MAX(cad_g4)FROM cad_ms10 GROUP BY cad_trend;

 CAD_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(CAD_TREND) MIN(CAD_G4) MAX(CAD_G4)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-05-12 03:00:00 2010-12-14 15:00:00	       1734	 -.0173       .0159
	-1 2010-05-11 13:00:00 2010-12-15 00:00:00	       2058	 -.0139       .0147

Elapsed: 00:00:00.03
00:50:50 SQL> 
00:50:50 SQL> -- I need a copy of q15 attributes
00:50:50 SQL> 
00:50:50 SQL> DROP   TABLE cad_att;

Table dropped.

Elapsed: 00:00:00.55
00:50:51 SQL> CREATE TABLE cad_att COMPRESS AS
00:50:51   2  SELECT
00:50:51   3  ydate
00:50:51   4  ,att00 cad_att00
00:50:51   5  ,att01 cad_att01
00:50:51   6  ,att02 cad_att02
00:50:51   7  ,att03 cad_att03
00:50:51   8  ,att04 cad_att04
00:50:51   9  ,att05 cad_att05
00:50:51  10  ,att06 cad_att06
00:50:51  11  ,att07 cad_att07
00:50:51  12  ,att08 cad_att08
00:50:51  13  ,att09 cad_att09
00:50:51  14  ,att10 cad_att10
00:50:51  15  ,att11 cad_att11
00:50:51  16  ,att12 cad_att12
00:50:51  17  ,att13 cad_att13
00:50:51  18  ,att14 cad_att14
00:50:51  19  ,att15 cad_att15
00:50:51  20  ,att16 cad_att16
00:50:51  21  ,att17 cad_att17
00:50:51  22  ,att18 cad_att18
00:50:51  23  ,att19 cad_att19
00:50:51  24  ,att20 cad_att20
00:50:51  25  ,att21 cad_att21
00:50:51  26  ,att22 cad_att22
00:50:51  27  ,att23 cad_att23
00:50:51  28  ,att24 cad_att24
00:50:51  29  ,att25 cad_att25
00:50:51  30  ,att26 cad_att26
00:50:51  31  ,att27 cad_att27
00:50:51  32  ,att28 cad_att28
00:50:51  33  ,att29 cad_att29
00:50:51  34  ,att30 cad_att30
00:50:51  35  ,att31 cad_att31
00:50:51  36  FROM q15
00:50:51  37  /

Table created.

Elapsed: 00:00:00.34
00:50:51 SQL> 
00:50:51 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
00:50:51 SQL> 
00:50:51 SQL> -- rpt
00:50:51 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
      3792

Elapsed: 00:00:00.00
00:50:51 SQL> 
00:50:51 SQL> --
00:50:51 SQL> -- chf10.sql
00:50:51 SQL> --
00:50:51 SQL> 
00:50:51 SQL> -- Creates views and tables for backtesting a forex SVM strategy
00:50:51 SQL> 
00:50:51 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:01.00
00:50:52 SQL> 
00:50:52 SQL> -- I created ibfu_t here:
00:50:52 SQL> -- /pt/s/rlk/svm4hp/update_ibfu_t.sql
00:50:52 SQL> 
00:50:52 SQL> CREATE OR REPLACE VIEW q11 AS
00:50:52   2  SELECT
00:50:52   3  pair
00:50:52   4  ,ydate
00:50:52   5  ,prdate
00:50:52   6  ,rownum rnum -- acts as t in my time-series
00:50:52   7  ,clse
00:50:52   8  ,LAG(clse,1,NULL)OVER(PARTITION BY pair ORDER BY pair,ydate) lg1
00:50:52   9  ,LAG(clse,2,NULL)OVER(PARTITION BY pair ORDER BY pair,ydate) lg2
00:50:52  10  ,LAG(clse,3,NULL)OVER(PARTITION BY pair ORDER BY pair,ydate) lg3
00:50:52  11  ,LAG(clse,4,NULL)OVER(PARTITION BY pair ORDER BY pair,ydate) lg4
00:50:52  12  ,LAG(clse,5,NULL)OVER(PARTITION BY pair ORDER BY pair,ydate) lg5
00:50:52  13  ,LAG(clse,6,NULL)OVER(PARTITION BY pair ORDER BY pair,ydate) lg6
00:50:52  14  ,LAG(clse,7,NULL)OVER(PARTITION BY pair ORDER BY pair,ydate) lg7
00:50:52  15  ,LAG(clse,8,NULL)OVER(PARTITION BY pair ORDER BY pair,ydate) lg8
00:50:52  16  ,LAG(clse,9,NULL)OVER(PARTITION BY pair ORDER BY pair,ydate) lg9
00:50:52  17  ,LAG(clse,12,NULL)OVER(PARTITION BY pair ORDER BY pair,ydate) lg12
00:50:52  18  ,LAG(clse,18,NULL)OVER(PARTITION BY pair ORDER BY pair,ydate) lg18
00:50:52  19  ,LAG(clse,24,NULL)OVER(PARTITION BY pair ORDER BY pair,ydate) lg24
00:50:52  20  ,LAG(clse,72,NULL)OVER(PARTITION BY pair ORDER BY pair,ydate) lg72
00:50:52  21  ,LEAD(clse,4,NULL)OVER(PARTITION BY pair ORDER BY pair,ydate) ld4
00:50:52  22  FROM ibfu_t WHERE pair LIKE'%chf%'
00:50:52  23  ORDER BY ydate
00:50:52  24  /

View created.

Elapsed: 00:00:00.05
00:50:52 SQL> 
00:50:52 SQL> -- rpt
00:50:52 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
usd_chf 	3792

Elapsed: 00:00:00.08
00:50:52 SQL> 
00:50:52 SQL> -- Calc deltas and gains
00:50:52 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.36
00:50:53 SQL> 
00:50:53 SQL> CREATE TABLE q13 COMPRESS AS
00:50:53   2  SELECT
00:50:53   3  pair
00:50:53   4  ,ydate
00:50:53   5  ,prdate
00:50:53   6  ,rnum
00:50:53   7  ,lg4
00:50:53   8  ,lg8
00:50:53   9  ,lg12
00:50:53  10  ,ld4
00:50:53  11  ,CASE WHEN(clse-lg12)>0 then 1 ELSE -1 END trend
00:50:53  12  -- step by 1
00:50:53  13  ,clse-lg1 d01
00:50:53  14  ,lg1-lg2	d12
00:50:53  15  ,lg2-lg3	d23
00:50:53  16  ,lg3-lg4	d34
00:50:53  17  ,lg4-lg5	d45
00:50:53  18  ,lg5-lg6	d56
00:50:53  19  ,lg6-lg7	d67
00:50:53  20  ,lg7-lg8	d78
00:50:53  21  ,lg8-lg9	d89
00:50:53  22  -- step by 2
00:50:53  23  ,clse-lg2 d02
00:50:53  24  ,lg2-lg4 d24
00:50:53  25  ,lg4-lg6 d46
00:50:53  26  ,lg6-lg8 d68
00:50:53  27  -- step by 3
00:50:53  28  ,clse-lg3 d03
00:50:53  29  ,lg3-lg6	d36
00:50:53  30  ,lg6-lg9	d69
00:50:53  31  ,lg9-lg12 d912
00:50:53  32  -- step by 4
00:50:53  33  ,clse-lg4 d04
00:50:53  34  ,lg4-lg8	d48
00:50:53  35  ,lg8-lg12 d812
00:50:53  36  ,lg6-lg12 d612
00:50:53  37  ,lg12-lg18 d1218
00:50:53  38  --
00:50:53  39  ,ABS(clse-lg1)dc1
00:50:53  40  ,ABS(clse-lg2)dc2
00:50:53  41  ,ABS(clse-lg3)dc3
00:50:53  42  ,ABS(clse-lg4)dc4
00:50:53  43  ,ABS(clse-lg5)dc5
00:50:53  44  ,ABS(clse-lg6)dc6
00:50:53  45  ,ABS(clse-lg7)dc7
00:50:53  46  ,ABS(clse-lg8)dc8
00:50:53  47  ,ABS(clse-lg9)dc9
00:50:53  48  ,ABS(clse-lg12)dc12
00:50:53  49  ,ABS(clse-lg18)dc18
00:50:53  50  ,ABS(clse-lg24)dc24
00:50:53  51  ,ABS(clse-lg72)dc72
00:50:53  52  ,(ld4-clse) ug4
00:50:53  53  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 2  PRECEDING AND CURRENT ROW)crr2
00:50:53  54  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 3  PRECEDING AND CURRENT ROW)crr3
00:50:53  55  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 4  PRECEDING AND CURRENT ROW)crr4
00:50:53  56  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 5  PRECEDING AND CURRENT ROW)crr5
00:50:53  57  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6  PRECEDING AND CURRENT ROW)crr6
00:50:53  58  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 7  PRECEDING AND CURRENT ROW)crr7
00:50:53  59  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 8  PRECEDING AND CURRENT ROW)crr8
00:50:53  60  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 9  PRECEDING AND CURRENT ROW)crr9
00:50:53  61  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12 PRECEDING AND CURRENT ROW)crr12
00:50:53  62  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 24 PRECEDING AND CURRENT ROW)crr24
00:50:53  63  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 72 PRECEDING AND CURRENT ROW)crr72
00:50:53  64  ,0+TO_CHAR(ydate,'HH24')hh
00:50:53  65  ,0+TO_CHAR(ydate,'D')d
00:50:53  66  ,0+TO_CHAR(ydate,'W')w
00:50:53  67  FROM q11
00:50:53  68  ORDER BY pair,ydate
00:50:53  69  /

Table created.

Elapsed: 00:00:00.38
00:50:53 SQL> 
00:50:53 SQL> -- rpt
00:50:53 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    1715
	-1	    2077

Elapsed: 00:00:00.12
00:50:53 SQL> 
00:50:53 SQL> -- Calc gains and ntiles
00:50:53 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.16
00:50:53 SQL> CREATE TABLE q15 COMPRESS AS
00:50:53   2  SELECT
00:50:53   3  pair
00:50:53   4  ,ydate
00:50:53   5  ,prdate -- Should be unique
00:50:53   6  ,trend -- +1 or -1
00:50:53   7  ,dc12 -- next statement needs this
00:50:53   8  -- Use NTILE() to derive some attributes
00:50:53   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d12))		 att00
00:50:53  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d23))		 att01
00:50:53  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d34))		 att02
00:50:53  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d45))		 att03
00:50:53  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d56))		 att04
00:50:53  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d67))		 att05
00:50:53  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d78))		 att06
00:50:53  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d89))		 att07
00:50:53  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d912)) 	 att08
00:50:53  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc2)		 att09
00:50:53  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc3)		 att10
00:50:53  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc4)		 att11
00:50:53  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc5)		 att12
00:50:53  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6)		 att13
00:50:53  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc7)		 att14
00:50:53  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8)		 att15
00:50:53  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc9)		 att16
00:50:53  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att17
00:50:53  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc24)		 att18
00:50:53  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc72)		 att19
00:50:53  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr2,7))) att20
00:50:53  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr3,7))) att21
00:50:53  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr4,7))) att22
00:50:53  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr5,7))) att23
00:50:53  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6,7))) att24
00:50:53  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att25
00:50:53  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att26
00:50:53  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr72,7)))att27
00:50:53  37  -- date related integers: hour of day, day of week, week of month:
00:50:53  38  ,hh    att28
00:50:53  39  ,d     att29
00:50:53  40  ,w     att30
00:50:53  41  ,trend att31
00:50:53  42  ,ug4 g4
00:50:53  43  ,CASE WHEN ug4 IS NULL THEN NULL WHEN ug4 > 0.0006 THEN 'up' ELSE 'nup' END gatt
00:50:53  44  ,CASE WHEN ug4 IS NULL THEN NULL WHEN ug4< -0.0006 THEN 'up' ELSE 'nup' END gattn
00:50:53  45  FROM q13
00:50:53  46  ORDER BY pair,ydate
00:50:53  47  /

Table created.

Elapsed: 00:00:00.88
00:50:54 SQL> 
00:50:54 SQL> -- rpt
00:50:54 SQL> SELECT pair,trend,gatt,gattn,AVG(g4),COUNT(g4),CORR(dc12,g4)FROM q15
00:50:54   2  GROUP BY pair,trend,gatt,gattn
00:50:54   3  ORDER BY pair,trend,gatt,gattn
00:50:54   4  /

PAIR	     TREND GAT GAT    AVG(G4)  COUNT(G4) CORR(DC12,G4)
------- ---------- --- --- ---------- ---------- -------------
usd_chf 	-1 nup nup  .00001003	     500    .064926761
usd_chf 	-1 nup up   -.0028407	     767    .075396575
usd_chf 	-1 up  nup .002673685	     806    -.06509418
usd_chf 	-1			       0
usd_chf 	 1 nup nup -.00001178	     401    .038442876
usd_chf 	 1 nup up  -.00292213	     738    .016780666
usd_chf 	 1 up  nup .002766519	     576    -.06192624

7 rows selected.

Elapsed: 00:00:00.03
00:50:54 SQL> 
00:50:54 SQL> -- rpt
00:50:54 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
usd_chf 2010-12-15 00:00:00

Elapsed: 00:00:00.01
00:50:54 SQL> 
00:50:54 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.15
00:50:54 SQL> CREATE TABLE modsrc COMPRESS AS
00:50:54   2  SELECT
00:50:54   3  pair
00:50:54   4  ,ydate
00:50:54   5  ,prdate
00:50:54   6  ,trend
00:50:54   7  ,g4
00:50:54   8  ,gatt
00:50:54   9  ,gattn
00:50:54  10  ,dc12
00:50:54  11  FROM q15
00:50:54  12  /

Table created.

Elapsed: 00:00:00.06
00:50:54 SQL> 
00:50:54 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.13
00:50:54 SQL> 
00:50:54 SQL> -- rpt
00:50:54 SQL> 
00:50:54 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
       3792

Elapsed: 00:00:00.10
00:50:55 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
       3792

Elapsed: 00:00:00.00
00:50:55 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
       3792

Elapsed: 00:00:00.02
00:50:55 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
       3792

Elapsed: 00:00:00.01
00:50:55 SQL> 
00:50:55 SQL> SELECT pair,trend,gatt,gattn,AVG(g4),COUNT(g4),CORR(dc12,g4)FROM modsrc
00:50:55   2  GROUP BY pair,trend,gatt,gattn
00:50:55   3  ORDER BY pair,trend,gatt,gattn
00:50:55   4  /

PAIR	     TREND GAT GAT    AVG(G4)  COUNT(G4) CORR(DC12,G4)
------- ---------- --- --- ---------- ---------- -------------
usd_chf 	-1 nup nup  .00001003	     500    .064926761
usd_chf 	-1 nup up   -.0028407	     767    .075396575
usd_chf 	-1 up  nup .002673685	     806    -.06509418
usd_chf 	-1			       0
usd_chf 	 1 nup nup -.00001178	     401    .038442876
usd_chf 	 1 nup up  -.00292213	     738    .016780666
usd_chf 	 1 up  nup .002766519	     576    -.06192624

7 rows selected.

Elapsed: 00:00:00.01
00:50:55 SQL> 
00:50:55 SQL> DROP   TABLE chf_ms10 ;

Table dropped.

Elapsed: 00:00:00.12
00:50:55 SQL> CREATE TABLE chf_ms10 COMPRESS AS
00:50:55   2  SELECT
00:50:55   3  ydate
00:50:55   4  ,trend chf_trend
00:50:55   5  ,g4    chf_g4
00:50:55   6  ,gatt  chf_gatt
00:50:55   7  ,gattn	chf_gattn
00:50:55   8  FROM modsrc
00:50:55   9  /

Table created.

Elapsed: 00:00:00.06
00:50:55 SQL> 
00:50:55 SQL> ANALYZE TABLE chf_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.11
00:50:55 SQL> 
00:50:55 SQL> -- rpt
00:50:55 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g4),MIN(g4),MAX(g4)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G4)	 MIN(G4)    MAX(G4)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-05-12 01:00:00 2010-12-14 07:00:00	 1715	  -.0227      .0156
	-1 2010-05-11 13:00:00 2010-12-15 00:00:00	 2073	   -.016      .0145

Elapsed: 00:00:00.06
00:50:55 SQL> SELECT chf_trend,MIN(ydate),MAX(ydate),COUNT(chf_trend),MIN(chf_g4),MAX(chf_g4)FROM chf_ms10 GROUP BY chf_trend;

 CHF_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(CHF_TREND) MIN(CHF_G4) MAX(CHF_G4)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-05-12 01:00:00 2010-12-14 07:00:00	       1715	 -.0227       .0156
	-1 2010-05-11 13:00:00 2010-12-15 00:00:00	       2077	  -.016       .0145

Elapsed: 00:00:00.00
00:50:55 SQL> 
00:50:55 SQL> -- I need a copy of q15 attributes
00:50:55 SQL> 
00:50:55 SQL> DROP   TABLE chf_att;

Table dropped.

Elapsed: 00:00:00.10
00:50:55 SQL> CREATE TABLE chf_att COMPRESS AS
00:50:55   2  SELECT
00:50:55   3  ydate
00:50:55   4  ,att00 chf_att00
00:50:55   5  ,att01 chf_att01
00:50:55   6  ,att02 chf_att02
00:50:55   7  ,att03 chf_att03
00:50:55   8  ,att04 chf_att04
00:50:55   9  ,att05 chf_att05
00:50:55  10  ,att06 chf_att06
00:50:55  11  ,att07 chf_att07
00:50:55  12  ,att08 chf_att08
00:50:55  13  ,att09 chf_att09
00:50:55  14  ,att10 chf_att10
00:50:55  15  ,att11 chf_att11
00:50:55  16  ,att12 chf_att12
00:50:55  17  ,att13 chf_att13
00:50:55  18  ,att14 chf_att14
00:50:55  19  ,att15 chf_att15
00:50:55  20  ,att16 chf_att16
00:50:55  21  ,att17 chf_att17
00:50:55  22  ,att18 chf_att18
00:50:55  23  ,att19 chf_att19
00:50:55  24  ,att20 chf_att20
00:50:55  25  ,att21 chf_att21
00:50:55  26  ,att22 chf_att22
00:50:55  27  ,att23 chf_att23
00:50:55  28  ,att24 chf_att24
00:50:55  29  ,att25 chf_att25
00:50:55  30  ,att26 chf_att26
00:50:55  31  ,att27 chf_att27
00:50:55  32  ,att28 chf_att28
00:50:55  33  ,att29 chf_att29
00:50:55  34  ,att30 chf_att30
00:50:55  35  ,att31 chf_att31
00:50:55  36  FROM q15
00:50:55  37  /

Table created.

Elapsed: 00:00:00.14
00:50:55 SQL> 
00:50:55 SQL> ANALYZE TABLE chf_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
00:50:55 SQL> 
00:50:55 SQL> -- rpt
00:50:55 SQL> SELECT COUNT(*)FROM chf_att;

  COUNT(*)
----------
      3792

Elapsed: 00:00:00.00
00:50:55 SQL> 
00:50:55 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
