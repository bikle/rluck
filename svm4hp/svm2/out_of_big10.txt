
SQL*Plus: Release 11.2.0.1.0 Production on Thu Dec 16 00:52:42 2010

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

00:52:42 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
00:52:42 SQL> 00:52:42 SQL> --
00:52:42 SQL> -- eur10.sql
00:52:42 SQL> --
00:52:42 SQL> 
00:52:42 SQL> -- Creates views and tables for backtesting a forex SVM strategy
00:52:42 SQL> 
00:52:42 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.01
00:52:42 SQL> 
00:52:42 SQL> -- I created di5min here:
00:52:42 SQL> -- /pt/s/rlk/svm4hp/update_di5min.sql
00:52:42 SQL> 
00:52:42 SQL> CREATE OR REPLACE VIEW q11 AS
00:52:42   2  SELECT
00:52:42   3  pair
00:52:42   4  ,ydate
00:52:42   5  ,prdate
00:52:42   6  ,rownum rnum -- acts as t in my time-series
00:52:42   7  ,clse
00:52:42   8  ,LAG(clse,6*1,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg1
00:52:42   9  ,LAG(clse,6*2,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg2
00:52:42  10  ,LAG(clse,6*3,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg3
00:52:42  11  ,LAG(clse,6*4,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg4
00:52:42  12  ,LAG(clse,6*5,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg5
00:52:42  13  ,LAG(clse,6*6,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg6
00:52:42  14  ,LAG(clse,6*7,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg7
00:52:42  15  ,LAG(clse,6*8,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg8
00:52:42  16  ,LAG(clse,6*9,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg9
00:52:42  17  ,LAG(clse,6*12,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg12
00:52:42  18  ,LAG(clse,6*18,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg18
00:52:42  19  ,LAG(clse,6*24,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg24
00:52:42  20  ,LAG(clse,6*72,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg72
00:52:42  21  ,LEAD(clse,6*4,NULL)OVER(PARTITION BY pair ORDER BY ydate) ld4
00:52:42  22  FROM di5min WHERE pair LIKE'%eur%'
00:52:42  23  ORDER BY ydate
00:52:42  24  /

View created.

Elapsed: 00:00:00.05
00:52:42 SQL> 
00:52:42 SQL> -- rpt
00:52:42 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
eur_usd        18642

Elapsed: 00:00:00.32
00:52:42 SQL> 
00:52:42 SQL> -- Calc deltas and gains
00:52:42 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.05
00:52:42 SQL> 
00:52:42 SQL> CREATE TABLE q13 COMPRESS AS
00:52:42   2  SELECT
00:52:42   3  pair
00:52:42   4  ,ydate
00:52:42   5  ,prdate
00:52:42   6  ,rnum
00:52:42   7  ,lg4
00:52:42   8  ,lg8
00:52:42   9  ,lg12
00:52:42  10  ,ld4
00:52:42  11  ,CASE WHEN(clse-lg12)>0 then 1 ELSE -1 END trend
00:52:42  12  -- step by 1
00:52:42  13  ,clse-lg1 d01
00:52:42  14  ,lg1-lg2	d12
00:52:42  15  ,lg2-lg3	d23
00:52:42  16  ,lg3-lg4	d34
00:52:42  17  ,lg4-lg5	d45
00:52:42  18  ,lg5-lg6	d56
00:52:42  19  ,lg6-lg7	d67
00:52:42  20  ,lg7-lg8	d78
00:52:42  21  ,lg8-lg9	d89
00:52:42  22  -- step by 2
00:52:42  23  ,clse-lg2 d02
00:52:42  24  ,lg2-lg4 d24
00:52:42  25  ,lg4-lg6 d46
00:52:42  26  ,lg6-lg8 d68
00:52:42  27  -- step by 3
00:52:42  28  ,clse-lg3 d03
00:52:42  29  ,lg3-lg6	d36
00:52:42  30  ,lg6-lg9	d69
00:52:42  31  ,lg9-lg12 d912
00:52:42  32  -- step by 4
00:52:42  33  ,clse-lg4 d04
00:52:42  34  ,lg4-lg8	d48
00:52:42  35  ,lg8-lg12 d812
00:52:42  36  ,lg6-lg12 d612
00:52:42  37  ,lg12-lg18 d1218
00:52:42  38  --
00:52:42  39  ,ABS(clse-lg1)dc1
00:52:42  40  ,ABS(clse-lg2)dc2
00:52:42  41  ,ABS(clse-lg3)dc3
00:52:42  42  ,ABS(clse-lg4)dc4
00:52:42  43  ,ABS(clse-lg5)dc5
00:52:42  44  ,ABS(clse-lg6)dc6
00:52:42  45  ,ABS(clse-lg7)dc7
00:52:42  46  ,ABS(clse-lg8)dc8
00:52:42  47  ,ABS(clse-lg9)dc9
00:52:42  48  ,ABS(clse-lg12)dc12
00:52:42  49  ,ABS(clse-lg18)dc18
00:52:42  50  ,ABS(clse-lg24)dc24
00:52:42  51  ,ABS(clse-lg72)dc72
00:52:42  52  ,(ld4-clse) ug4
00:52:42  53  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*2  PRECEDING AND CURRENT ROW)crr2
00:52:42  54  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*3  PRECEDING AND CURRENT ROW)crr3
00:52:42  55  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*4  PRECEDING AND CURRENT ROW)crr4
00:52:42  56  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*5  PRECEDING AND CURRENT ROW)crr5
00:52:42  57  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*6  PRECEDING AND CURRENT ROW)crr6
00:52:42  58  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*7  PRECEDING AND CURRENT ROW)crr7
00:52:42  59  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*8  PRECEDING AND CURRENT ROW)crr8
00:52:42  60  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*9  PRECEDING AND CURRENT ROW)crr9
00:52:42  61  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*12 PRECEDING AND CURRENT ROW)crr12
00:52:42  62  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*24 PRECEDING AND CURRENT ROW)crr24
00:52:42  63  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*72 PRECEDING AND CURRENT ROW)crr72
00:52:42  64  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
00:52:42  65  ,0+TO_CHAR(ydate,'D')d
00:52:42  66  ,0+TO_CHAR(ydate,'W')w
00:52:42  67  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
00:52:42  68  FROM q11
00:52:42  69  -- I dont want any NULL values from the LAG() functions:
00:52:42  70  WHERE lg72 > 0
00:52:42  71  ORDER BY pair,ydate
00:52:42  72  /

Table created.

Elapsed: 00:00:01.71
00:52:44 SQL> 
00:52:44 SQL> -- rpt
00:52:44 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    9392
	-1	    8818

Elapsed: 00:00:00.02
00:52:44 SQL> 
00:52:44 SQL> -- Calc gains and ntiles
00:52:44 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.04
00:52:44 SQL> CREATE TABLE q15 COMPRESS AS
00:52:44   2  SELECT
00:52:44   3  pair
00:52:44   4  ,ydate
00:52:44   5  ,prdate -- Should be unique
00:52:44   6  ,trend -- +1 or -1
00:52:44   7  ,dc12 -- next statement needs this
00:52:44   8  -- Use NTILE() to derive some attributes
00:52:44   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d12))		 att00
00:52:44  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d23))		 att01
00:52:44  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d34))		 att02
00:52:44  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d45))		 att03
00:52:44  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d56))		 att04
00:52:44  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d67))		 att05
00:52:44  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d78))		 att06
00:52:44  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d89))		 att07
00:52:44  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d912)) 	 att08
00:52:44  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc2)		 att09
00:52:44  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc3)		 att10
00:52:44  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc4)		 att11
00:52:44  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc5)		 att12
00:52:44  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6)		 att13
00:52:44  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc7)		 att14
00:52:44  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8)		 att15
00:52:44  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc9)		 att16
00:52:44  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att17
00:52:44  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc24)		 att18
00:52:44  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc72)		 att19
00:52:44  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr2,7))) att20
00:52:44  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr3,7))) att21
00:52:44  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr4,7))) att22
00:52:44  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr5,7))) att23
00:52:44  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6,7))) att24
00:52:44  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att25
00:52:44  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att26
00:52:44  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr72,7)))att27
00:52:44  37  -- date related integers: hour of day, day of week, week of month:
00:52:44  38  ,hh    att28
00:52:44  39  ,d     att29
00:52:44  40  ,w     att30
00:52:44  41  ,mpm   att31
00:52:44  42  ,trend att32
00:52:44  43  ,ug4 g4
00:52:44  44  ,CASE WHEN ug4 IS NULL THEN NULL WHEN ug4 > 0.0006 THEN 'up' ELSE 'nup' END gatt
00:52:44  45  ,CASE WHEN ug4 IS NULL THEN NULL WHEN ug4< -0.0006 THEN 'up' ELSE 'nup' END gattn
00:52:44  46  FROM q13
00:52:44  47  ORDER BY pair,ydate
00:52:44  48  /

Table created.

Elapsed: 00:00:03.55
00:52:48 SQL> 
00:52:48 SQL> -- rpt
00:52:48 SQL> SELECT pair,trend,gatt,gattn,AVG(g4),COUNT(g4),CORR(dc12,g4)FROM q15
00:52:48   2  GROUP BY pair,trend,gatt,gattn
00:52:48   3  ORDER BY pair,trend,gatt,gattn
00:52:48   4  /

PAIR	     TREND GAT GAT    AVG(G4)  COUNT(G4) CORR(DC12,G4)
------- ---------- --- --- ---------- ---------- -------------
eur_usd 	-1 nup nup -9.101E-06	    1552    .017421953
eur_usd 	-1 nup up   -.0033644	    3560    .028502562
eur_usd 	-1 up  nup .003596945	    3682    -.16565689
eur_usd 	-1			       0
eur_usd 	 1 nup nup -3.539E-06	    1787    .027043047
eur_usd 	 1 nup up  -.00312663	    3855    .082037728
eur_usd 	 1 up  nup .003475607	    3750    -.03599509

7 rows selected.

Elapsed: 00:00:00.04
00:52:48 SQL> 
00:52:48 SQL> -- rpt
00:52:48 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
eur_usd 2010-12-16 00:40:00

Elapsed: 00:00:00.01
00:52:48 SQL> 
00:52:48 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.04
00:52:48 SQL> CREATE TABLE modsrc COMPRESS AS
00:52:48   2  SELECT
00:52:48   3  pair
00:52:48   4  ,ydate
00:52:48   5  ,prdate
00:52:48   6  ,trend
00:52:48   7  ,g4
00:52:48   8  ,gatt
00:52:48   9  ,gattn
00:52:48  10  ,dc12
00:52:48  11  FROM q15
00:52:48  12  /

Table created.

Elapsed: 00:00:00.08
00:52:48 SQL> 
00:52:48 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
00:52:48 SQL> 
00:52:48 SQL> -- rpt
00:52:48 SQL> 
00:52:48 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      18642

Elapsed: 00:00:00.32
00:52:48 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      18210

Elapsed: 00:00:00.00
00:52:48 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      18210

Elapsed: 00:00:00.01
00:52:48 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      18210

Elapsed: 00:00:00.00
00:52:48 SQL> 
00:52:48 SQL> SELECT pair,trend,gatt,gattn,AVG(g4),COUNT(g4),CORR(dc12,g4)FROM modsrc
00:52:48   2  GROUP BY pair,trend,gatt,gattn
00:52:48   3  ORDER BY pair,trend,gatt,gattn
00:52:48   4  /

PAIR	     TREND GAT GAT    AVG(G4)  COUNT(G4) CORR(DC12,G4)
------- ---------- --- --- ---------- ---------- -------------
eur_usd 	-1 nup nup -9.101E-06	    1552    .017421953
eur_usd 	-1 nup up   -.0033644	    3560    .028502562
eur_usd 	-1 up  nup .003596945	    3682    -.16565689
eur_usd 	-1			       0
eur_usd 	 1 nup nup -3.539E-06	    1787    .027043047
eur_usd 	 1 nup up  -.00312663	    3855    .082037728
eur_usd 	 1 up  nup .003475607	    3750    -.03599509

7 rows selected.

Elapsed: 00:00:00.02
00:52:48 SQL> 
00:52:48 SQL> DROP   TABLE eur_ms10 ;

Table dropped.

Elapsed: 00:00:00.04
00:52:48 SQL> CREATE TABLE eur_ms10 COMPRESS AS
00:52:48   2  SELECT
00:52:48   3  ydate
00:52:48   4  ,trend eur_trend
00:52:48   5  ,g4    eur_g4
00:52:48   6  ,gatt  eur_gatt
00:52:48   7  ,gattn	eur_gattn
00:52:48   8  FROM modsrc
00:52:48   9  /

Table created.

Elapsed: 00:00:00.06
00:52:48 SQL> 
00:52:48 SQL> ANALYZE TABLE eur_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.14
00:52:49 SQL> 
00:52:49 SQL> -- rpt
00:52:49 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g4),MIN(g4),MAX(g4)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G4)	 MIN(G4)    MAX(G4)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-06-23 10:50:01 2010-12-15 15:20:00	 9392	  -.0153      .0165
	-1 2010-06-22 05:00:01 2010-12-16 00:40:00	 8794	  -.0164      .0167

Elapsed: 00:00:00.02
00:52:49 SQL> SELECT eur_trend,MIN(ydate),MAX(ydate),COUNT(eur_trend),MIN(eur_g4),MAX(eur_g4)FROM eur_ms10 GROUP BY eur_trend;

 EUR_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(EUR_TREND) MIN(EUR_G4) MAX(EUR_G4)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-06-23 10:50:01 2010-12-15 15:20:00	       9392	 -.0153       .0165
	-1 2010-06-22 05:00:01 2010-12-16 00:40:00	       8818	 -.0164       .0167

Elapsed: 00:00:00.01
00:52:49 SQL> 
00:52:49 SQL> -- I need a copy of q15 attributes
00:52:49 SQL> 
00:52:49 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.05
00:52:49 SQL> CREATE TABLE eur_att COMPRESS AS
00:52:49   2  SELECT
00:52:49   3  ydate
00:52:49   4  ,att00 eur_att00
00:52:49   5  ,att01 eur_att01
00:52:49   6  ,att02 eur_att02
00:52:49   7  ,att03 eur_att03
00:52:49   8  ,att04 eur_att04
00:52:49   9  ,att05 eur_att05
00:52:49  10  ,att06 eur_att06
00:52:49  11  ,att07 eur_att07
00:52:49  12  ,att08 eur_att08
00:52:49  13  ,att09 eur_att09
00:52:49  14  ,att10 eur_att10
00:52:49  15  ,att11 eur_att11
00:52:49  16  ,att12 eur_att12
00:52:49  17  ,att13 eur_att13
00:52:49  18  ,att14 eur_att14
00:52:49  19  ,att15 eur_att15
00:52:49  20  ,att16 eur_att16
00:52:49  21  ,att17 eur_att17
00:52:49  22  ,att18 eur_att18
00:52:49  23  ,att19 eur_att19
00:52:49  24  ,att20 eur_att20
00:52:49  25  ,att21 eur_att21
00:52:49  26  ,att22 eur_att22
00:52:49  27  ,att23 eur_att23
00:52:49  28  ,att24 eur_att24
00:52:49  29  ,att25 eur_att25
00:52:49  30  ,att26 eur_att26
00:52:49  31  ,att27 eur_att27
00:52:49  32  ,att28 eur_att28
00:52:49  33  ,att29 eur_att29
00:52:49  34  ,att30 eur_att30
00:52:49  35  ,att31 eur_att31
00:52:49  36  ,att32 eur_att32
00:52:49  37  FROM q15
00:52:49  38  /

Table created.

Elapsed: 00:00:00.12
00:52:49 SQL> 
00:52:49 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.39
00:52:49 SQL> 
00:52:49 SQL> -- rpt
00:52:49 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     18210

Elapsed: 00:00:00.01
00:52:49 SQL> 
00:52:49 SQL> --
00:52:49 SQL> -- aud10.sql
00:52:49 SQL> --
00:52:49 SQL> 
00:52:49 SQL> -- Creates views and tables for backtesting a forex SVM strategy
00:52:49 SQL> 
00:52:49 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.33
00:52:50 SQL> 
00:52:50 SQL> -- I created di5min here:
00:52:50 SQL> -- /pt/s/rlk/svm4hp/update_di5min.sql
00:52:50 SQL> 
00:52:50 SQL> CREATE OR REPLACE VIEW q11 AS
00:52:50   2  SELECT
00:52:50   3  pair
00:52:50   4  ,ydate
00:52:50   5  ,prdate
00:52:50   6  ,rownum rnum -- acts as t in my time-series
00:52:50   7  ,clse
00:52:50   8  ,LAG(clse,6*1,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg1
00:52:50   9  ,LAG(clse,6*2,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg2
00:52:50  10  ,LAG(clse,6*3,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg3
00:52:50  11  ,LAG(clse,6*4,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg4
00:52:50  12  ,LAG(clse,6*5,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg5
00:52:50  13  ,LAG(clse,6*6,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg6
00:52:50  14  ,LAG(clse,6*7,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg7
00:52:50  15  ,LAG(clse,6*8,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg8
00:52:50  16  ,LAG(clse,6*9,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg9
00:52:50  17  ,LAG(clse,6*12,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg12
00:52:50  18  ,LAG(clse,6*18,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg18
00:52:50  19  ,LAG(clse,6*24,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg24
00:52:50  20  ,LAG(clse,6*72,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg72
00:52:50  21  ,LEAD(clse,6*4,NULL)OVER(PARTITION BY pair ORDER BY ydate) ld4
00:52:50  22  FROM di5min WHERE pair LIKE'%aud%'
00:52:50  23  ORDER BY ydate
00:52:50  24  /

View created.

Elapsed: 00:00:00.05
00:52:50 SQL> 
00:52:50 SQL> -- rpt
00:52:50 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
aud_usd        18641

Elapsed: 00:00:00.31
00:52:50 SQL> 
00:52:50 SQL> -- Calc deltas and gains
00:52:50 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.16
00:52:50 SQL> 
00:52:50 SQL> CREATE TABLE q13 COMPRESS AS
00:52:50   2  SELECT
00:52:50   3  pair
00:52:50   4  ,ydate
00:52:50   5  ,prdate
00:52:50   6  ,rnum
00:52:50   7  ,lg4
00:52:50   8  ,lg8
00:52:50   9  ,lg12
00:52:50  10  ,ld4
00:52:50  11  ,CASE WHEN(clse-lg12)>0 then 1 ELSE -1 END trend
00:52:50  12  -- step by 1
00:52:50  13  ,clse-lg1 d01
00:52:50  14  ,lg1-lg2	d12
00:52:50  15  ,lg2-lg3	d23
00:52:50  16  ,lg3-lg4	d34
00:52:50  17  ,lg4-lg5	d45
00:52:50  18  ,lg5-lg6	d56
00:52:50  19  ,lg6-lg7	d67
00:52:50  20  ,lg7-lg8	d78
00:52:50  21  ,lg8-lg9	d89
00:52:50  22  -- step by 2
00:52:50  23  ,clse-lg2 d02
00:52:50  24  ,lg2-lg4 d24
00:52:50  25  ,lg4-lg6 d46
00:52:50  26  ,lg6-lg8 d68
00:52:50  27  -- step by 3
00:52:50  28  ,clse-lg3 d03
00:52:50  29  ,lg3-lg6	d36
00:52:50  30  ,lg6-lg9	d69
00:52:50  31  ,lg9-lg12 d912
00:52:50  32  -- step by 4
00:52:50  33  ,clse-lg4 d04
00:52:50  34  ,lg4-lg8	d48
00:52:50  35  ,lg8-lg12 d812
00:52:50  36  ,lg6-lg12 d612
00:52:50  37  ,lg12-lg18 d1218
00:52:50  38  --
00:52:50  39  ,ABS(clse-lg1)dc1
00:52:50  40  ,ABS(clse-lg2)dc2
00:52:50  41  ,ABS(clse-lg3)dc3
00:52:50  42  ,ABS(clse-lg4)dc4
00:52:50  43  ,ABS(clse-lg5)dc5
00:52:50  44  ,ABS(clse-lg6)dc6
00:52:50  45  ,ABS(clse-lg7)dc7
00:52:50  46  ,ABS(clse-lg8)dc8
00:52:50  47  ,ABS(clse-lg9)dc9
00:52:50  48  ,ABS(clse-lg12)dc12
00:52:50  49  ,ABS(clse-lg18)dc18
00:52:50  50  ,ABS(clse-lg24)dc24
00:52:50  51  ,ABS(clse-lg72)dc72
00:52:50  52  ,(ld4-clse) ug4
00:52:50  53  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*2  PRECEDING AND CURRENT ROW)crr2
00:52:50  54  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*3  PRECEDING AND CURRENT ROW)crr3
00:52:50  55  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*4  PRECEDING AND CURRENT ROW)crr4
00:52:50  56  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*5  PRECEDING AND CURRENT ROW)crr5
00:52:50  57  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*6  PRECEDING AND CURRENT ROW)crr6
00:52:50  58  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*7  PRECEDING AND CURRENT ROW)crr7
00:52:50  59  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*8  PRECEDING AND CURRENT ROW)crr8
00:52:50  60  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*9  PRECEDING AND CURRENT ROW)crr9
00:52:50  61  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*12 PRECEDING AND CURRENT ROW)crr12
00:52:50  62  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*24 PRECEDING AND CURRENT ROW)crr24
00:52:50  63  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*72 PRECEDING AND CURRENT ROW)crr72
00:52:50  64  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
00:52:50  65  ,0+TO_CHAR(ydate,'D')d
00:52:50  66  ,0+TO_CHAR(ydate,'W')w
00:52:50  67  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
00:52:50  68  FROM q11
00:52:50  69  -- I dont want any NULL values from the LAG() functions:
00:52:50  70  WHERE lg72 > 0
00:52:50  71  ORDER BY pair,ydate
00:52:50  72  /

Table created.

Elapsed: 00:00:01.47
00:52:52 SQL> 
00:52:52 SQL> -- rpt
00:52:52 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    9368
	-1	    8841

Elapsed: 00:00:00.03
00:52:52 SQL> 
00:52:52 SQL> -- Calc gains and ntiles
00:52:52 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.14
00:52:52 SQL> CREATE TABLE q15 COMPRESS AS
00:52:52   2  SELECT
00:52:52   3  pair
00:52:52   4  ,ydate
00:52:52   5  ,prdate -- Should be unique
00:52:52   6  ,trend -- +1 or -1
00:52:52   7  ,dc12 -- next statement needs this
00:52:52   8  -- Use NTILE() to derive some attributes
00:52:52   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d12))		 att00
00:52:52  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d23))		 att01
00:52:52  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d34))		 att02
00:52:52  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d45))		 att03
00:52:52  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d56))		 att04
00:52:52  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d67))		 att05
00:52:52  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d78))		 att06
00:52:52  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d89))		 att07
00:52:52  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d912)) 	 att08
00:52:52  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc2)		 att09
00:52:52  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc3)		 att10
00:52:52  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc4)		 att11
00:52:52  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc5)		 att12
00:52:52  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6)		 att13
00:52:52  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc7)		 att14
00:52:52  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8)		 att15
00:52:52  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc9)		 att16
00:52:52  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att17
00:52:52  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc24)		 att18
00:52:52  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc72)		 att19
00:52:52  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr2,7))) att20
00:52:52  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr3,7))) att21
00:52:52  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr4,7))) att22
00:52:52  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr5,7))) att23
00:52:52  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6,7))) att24
00:52:52  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att25
00:52:52  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att26
00:52:52  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr72,7)))att27
00:52:52  37  -- date related integers: hour of day, day of week, week of month:
00:52:52  38  ,hh    att28
00:52:52  39  ,d     att29
00:52:52  40  ,w     att30
00:52:52  41  ,mpm   att31
00:52:52  42  ,trend att32
00:52:52  43  ,ug4 g4
00:52:52  44  ,CASE WHEN ug4 IS NULL THEN NULL WHEN ug4 > 0.0006 THEN 'up' ELSE 'nup' END gatt
00:52:52  45  ,CASE WHEN ug4 IS NULL THEN NULL WHEN ug4< -0.0006 THEN 'up' ELSE 'nup' END gattn
00:52:52  46  FROM q13
00:52:52  47  ORDER BY pair,ydate
00:52:52  48  /

Table created.

Elapsed: 00:00:03.54
00:52:55 SQL> 
00:52:55 SQL> -- rpt
00:52:55 SQL> SELECT pair,trend,gatt,gattn,AVG(g4),COUNT(g4),CORR(dc12,g4)FROM q15
00:52:55   2  GROUP BY pair,trend,gatt,gattn
00:52:55   3  ORDER BY pair,trend,gatt,gattn
00:52:55   4  /

PAIR	     TREND GAT GAT    AVG(G4)  COUNT(G4) CORR(DC12,G4)
------- ---------- --- --- ---------- ---------- -------------
aud_usd 	-1 nup nup .000019897	    1548    -.01470676
aud_usd 	-1 nup up  -.00303708	    3403    -.03332868
aud_usd 	-1 up  nup  .00294806	    3866    .024207344
aud_usd 	-1			       0
aud_usd 	 1 nup nup -8.103E-06	    1842    .028880926
aud_usd 	 1 nup up  -.00277752	    3614    .030798343
aud_usd 	 1 up  nup .002962347	    3912    -.03775307

7 rows selected.

Elapsed: 00:00:00.03
00:52:55 SQL> 
00:52:55 SQL> -- rpt
00:52:55 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
aud_usd 2010-12-16 00:40:00

Elapsed: 00:00:00.02
00:52:55 SQL> 
00:52:55 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
00:52:55 SQL> CREATE TABLE modsrc COMPRESS AS
00:52:55   2  SELECT
00:52:55   3  pair
00:52:55   4  ,ydate
00:52:55   5  ,prdate
00:52:55   6  ,trend
00:52:55   7  ,g4
00:52:55   8  ,gatt
00:52:55   9  ,gattn
00:52:55  10  ,dc12
00:52:55  11  FROM q15
00:52:55  12  /

Table created.

Elapsed: 00:00:00.08
00:52:55 SQL> 
00:52:55 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.26
00:52:56 SQL> 
00:52:56 SQL> -- rpt
00:52:56 SQL> 
00:52:56 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      18641

Elapsed: 00:00:00.32
00:52:56 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      18209

Elapsed: 00:00:00.01
00:52:56 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      18209

Elapsed: 00:00:00.00
00:52:56 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      18209

Elapsed: 00:00:00.00
00:52:56 SQL> 
00:52:56 SQL> SELECT pair,trend,gatt,gattn,AVG(g4),COUNT(g4),CORR(dc12,g4)FROM modsrc
00:52:56   2  GROUP BY pair,trend,gatt,gattn
00:52:56   3  ORDER BY pair,trend,gatt,gattn
00:52:56   4  /

PAIR	     TREND GAT GAT    AVG(G4)  COUNT(G4) CORR(DC12,G4)
------- ---------- --- --- ---------- ---------- -------------
aud_usd 	-1 nup nup .000019897	    1548    -.01470676
aud_usd 	-1 nup up  -.00303708	    3403    -.03332868
aud_usd 	-1 up  nup  .00294806	    3866    .024207344
aud_usd 	-1			       0
aud_usd 	 1 nup nup -8.103E-06	    1842    .028880926
aud_usd 	 1 nup up  -.00277752	    3614    .030798343
aud_usd 	 1 up  nup .002962347	    3912    -.03775307

7 rows selected.

Elapsed: 00:00:00.03
00:52:56 SQL> 
00:52:56 SQL> DROP   TABLE aud_ms10 ;

Table dropped.

Elapsed: 00:00:00.03
00:52:56 SQL> CREATE TABLE aud_ms10 COMPRESS AS
00:52:56   2  SELECT
00:52:56   3  ydate
00:52:56   4  ,trend aud_trend
00:52:56   5  ,g4    aud_g4
00:52:56   6  ,gatt  aud_gatt
00:52:56   7  ,gattn	aud_gattn
00:52:56   8  FROM modsrc
00:52:56   9  /

Table created.

Elapsed: 00:00:00.06
00:52:56 SQL> 
00:52:56 SQL> ANALYZE TABLE aud_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
00:52:56 SQL> 
00:52:56 SQL> -- rpt
00:52:56 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g4),MIN(g4),MAX(g4)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G4)	 MIN(G4)    MAX(G4)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-06-23 20:40:01 2010-12-14 22:20:00	 9368	  -.0162      .0122
	-1 2010-06-22 05:00:01 2010-12-16 00:40:00	 8817	   -.017      .0131

Elapsed: 00:00:00.02
00:52:56 SQL> SELECT aud_trend,MIN(ydate),MAX(ydate),COUNT(aud_trend),MIN(aud_g4),MAX(aud_g4)FROM aud_ms10 GROUP BY aud_trend;

 AUD_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(AUD_TREND) MIN(AUD_G4) MAX(AUD_G4)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-06-23 20:40:01 2010-12-14 22:20:00	       9368	 -.0162       .0122
	-1 2010-06-22 05:00:01 2010-12-16 00:40:00	       8841	  -.017       .0131

Elapsed: 00:00:00.01
00:52:56 SQL> 
00:52:56 SQL> -- I need a copy of q15 attributes
00:52:56 SQL> 
00:52:56 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.04
00:52:56 SQL> CREATE TABLE aud_att COMPRESS AS
00:52:56   2  SELECT
00:52:56   3  ydate
00:52:56   4  ,att00 aud_att00
00:52:56   5  ,att01 aud_att01
00:52:56   6  ,att02 aud_att02
00:52:56   7  ,att03 aud_att03
00:52:56   8  ,att04 aud_att04
00:52:56   9  ,att05 aud_att05
00:52:56  10  ,att06 aud_att06
00:52:56  11  ,att07 aud_att07
00:52:56  12  ,att08 aud_att08
00:52:56  13  ,att09 aud_att09
00:52:56  14  ,att10 aud_att10
00:52:56  15  ,att11 aud_att11
00:52:56  16  ,att12 aud_att12
00:52:56  17  ,att13 aud_att13
00:52:56  18  ,att14 aud_att14
00:52:56  19  ,att15 aud_att15
00:52:56  20  ,att16 aud_att16
00:52:56  21  ,att17 aud_att17
00:52:56  22  ,att18 aud_att18
00:52:56  23  ,att19 aud_att19
00:52:56  24  ,att20 aud_att20
00:52:56  25  ,att21 aud_att21
00:52:56  26  ,att22 aud_att22
00:52:56  27  ,att23 aud_att23
00:52:56  28  ,att24 aud_att24
00:52:56  29  ,att25 aud_att25
00:52:56  30  ,att26 aud_att26
00:52:56  31  ,att27 aud_att27
00:52:56  32  ,att28 aud_att28
00:52:56  33  ,att29 aud_att29
00:52:56  34  ,att30 aud_att30
00:52:56  35  ,att31 aud_att31
00:52:56  36  ,att32 aud_att32
00:52:56  37  FROM q15
00:52:56  38  /

Table created.

Elapsed: 00:00:00.17
00:52:57 SQL> 
00:52:57 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.37
00:52:57 SQL> 
00:52:57 SQL> -- rpt
00:52:57 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     18209

Elapsed: 00:00:00.00
00:52:57 SQL> 
00:52:57 SQL> --
00:52:57 SQL> -- gbp10.sql
00:52:57 SQL> --
00:52:57 SQL> 
00:52:57 SQL> -- Creates views and tables for backtesting a forex SVM strategy
00:52:57 SQL> 
00:52:57 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.34
00:52:57 SQL> 
00:52:57 SQL> -- I created di5min here:
00:52:57 SQL> -- /pt/s/rlk/svm4hp/update_di5min.sql
00:52:57 SQL> 
00:52:57 SQL> CREATE OR REPLACE VIEW q11 AS
00:52:57   2  SELECT
00:52:57   3  pair
00:52:57   4  ,ydate
00:52:57   5  ,prdate
00:52:57   6  ,rownum rnum -- acts as t in my time-series
00:52:57   7  ,clse
00:52:57   8  ,LAG(clse,6*1,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg1
00:52:57   9  ,LAG(clse,6*2,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg2
00:52:57  10  ,LAG(clse,6*3,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg3
00:52:57  11  ,LAG(clse,6*4,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg4
00:52:57  12  ,LAG(clse,6*5,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg5
00:52:57  13  ,LAG(clse,6*6,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg6
00:52:57  14  ,LAG(clse,6*7,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg7
00:52:57  15  ,LAG(clse,6*8,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg8
00:52:57  16  ,LAG(clse,6*9,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg9
00:52:57  17  ,LAG(clse,6*12,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg12
00:52:57  18  ,LAG(clse,6*18,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg18
00:52:57  19  ,LAG(clse,6*24,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg24
00:52:57  20  ,LAG(clse,6*72,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg72
00:52:57  21  ,LEAD(clse,6*4,NULL)OVER(PARTITION BY pair ORDER BY ydate) ld4
00:52:57  22  FROM di5min WHERE pair LIKE'%gbp%'
00:52:57  23  ORDER BY ydate
00:52:57  24  /

View created.

Elapsed: 00:00:00.05
00:52:57 SQL> 
00:52:57 SQL> -- rpt
00:52:57 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
gbp_usd        18641

Elapsed: 00:00:00.31
00:52:58 SQL> 
00:52:58 SQL> -- Calc deltas and gains
00:52:58 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.23
00:52:58 SQL> 
00:52:58 SQL> CREATE TABLE q13 COMPRESS AS
00:52:58   2  SELECT
00:52:58   3  pair
00:52:58   4  ,ydate
00:52:58   5  ,prdate
00:52:58   6  ,rnum
00:52:58   7  ,lg4
00:52:58   8  ,lg8
00:52:58   9  ,lg12
00:52:58  10  ,ld4
00:52:58  11  ,CASE WHEN(clse-lg12)>0 then 1 ELSE -1 END trend
00:52:58  12  -- step by 1
00:52:58  13  ,clse-lg1 d01
00:52:58  14  ,lg1-lg2	d12
00:52:58  15  ,lg2-lg3	d23
00:52:58  16  ,lg3-lg4	d34
00:52:58  17  ,lg4-lg5	d45
00:52:58  18  ,lg5-lg6	d56
00:52:58  19  ,lg6-lg7	d67
00:52:58  20  ,lg7-lg8	d78
00:52:58  21  ,lg8-lg9	d89
00:52:58  22  -- step by 2
00:52:58  23  ,clse-lg2 d02
00:52:58  24  ,lg2-lg4 d24
00:52:58  25  ,lg4-lg6 d46
00:52:58  26  ,lg6-lg8 d68
00:52:58  27  -- step by 3
00:52:58  28  ,clse-lg3 d03
00:52:58  29  ,lg3-lg6	d36
00:52:58  30  ,lg6-lg9	d69
00:52:58  31  ,lg9-lg12 d912
00:52:58  32  -- step by 4
00:52:58  33  ,clse-lg4 d04
00:52:58  34  ,lg4-lg8	d48
00:52:58  35  ,lg8-lg12 d812
00:52:58  36  ,lg6-lg12 d612
00:52:58  37  ,lg12-lg18 d1218
00:52:58  38  --
00:52:58  39  ,ABS(clse-lg1)dc1
00:52:58  40  ,ABS(clse-lg2)dc2
00:52:58  41  ,ABS(clse-lg3)dc3
00:52:58  42  ,ABS(clse-lg4)dc4
00:52:58  43  ,ABS(clse-lg5)dc5
00:52:58  44  ,ABS(clse-lg6)dc6
00:52:58  45  ,ABS(clse-lg7)dc7
00:52:58  46  ,ABS(clse-lg8)dc8
00:52:58  47  ,ABS(clse-lg9)dc9
00:52:58  48  ,ABS(clse-lg12)dc12
00:52:58  49  ,ABS(clse-lg18)dc18
00:52:58  50  ,ABS(clse-lg24)dc24
00:52:58  51  ,ABS(clse-lg72)dc72
00:52:58  52  ,(ld4-clse) ug4
00:52:58  53  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*2  PRECEDING AND CURRENT ROW)crr2
00:52:58  54  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*3  PRECEDING AND CURRENT ROW)crr3
00:52:58  55  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*4  PRECEDING AND CURRENT ROW)crr4
00:52:58  56  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*5  PRECEDING AND CURRENT ROW)crr5
00:52:58  57  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*6  PRECEDING AND CURRENT ROW)crr6
00:52:58  58  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*7  PRECEDING AND CURRENT ROW)crr7
00:52:58  59  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*8  PRECEDING AND CURRENT ROW)crr8
00:52:58  60  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*9  PRECEDING AND CURRENT ROW)crr9
00:52:58  61  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*12 PRECEDING AND CURRENT ROW)crr12
00:52:58  62  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*24 PRECEDING AND CURRENT ROW)crr24
00:52:58  63  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*72 PRECEDING AND CURRENT ROW)crr72
00:52:58  64  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
00:52:58  65  ,0+TO_CHAR(ydate,'D')d
00:52:58  66  ,0+TO_CHAR(ydate,'W')w
00:52:58  67  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
00:52:58  68  FROM q11
00:52:58  69  -- I dont want any NULL values from the LAG() functions:
00:52:58  70  WHERE lg72 > 0
00:52:58  71  ORDER BY pair,ydate
00:52:58  72  /

Table created.

Elapsed: 00:00:01.51
00:52:59 SQL> 
00:52:59 SQL> -- rpt
00:52:59 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    9054
	-1	    9155

Elapsed: 00:00:00.03
00:52:59 SQL> 
00:52:59 SQL> -- Calc gains and ntiles
00:52:59 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.12
00:53:00 SQL> CREATE TABLE q15 COMPRESS AS
00:53:00   2  SELECT
00:53:00   3  pair
00:53:00   4  ,ydate
00:53:00   5  ,prdate -- Should be unique
00:53:00   6  ,trend -- +1 or -1
00:53:00   7  ,dc12 -- next statement needs this
00:53:00   8  -- Use NTILE() to derive some attributes
00:53:00   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d12))		 att00
00:53:00  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d23))		 att01
00:53:00  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d34))		 att02
00:53:00  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d45))		 att03
00:53:00  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d56))		 att04
00:53:00  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d67))		 att05
00:53:00  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d78))		 att06
00:53:00  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d89))		 att07
00:53:00  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d912)) 	 att08
00:53:00  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc2)		 att09
00:53:00  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc3)		 att10
00:53:00  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc4)		 att11
00:53:00  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc5)		 att12
00:53:00  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6)		 att13
00:53:00  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc7)		 att14
00:53:00  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8)		 att15
00:53:00  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc9)		 att16
00:53:00  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att17
00:53:00  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc24)		 att18
00:53:00  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc72)		 att19
00:53:00  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr2,7))) att20
00:53:00  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr3,7))) att21
00:53:00  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr4,7))) att22
00:53:00  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr5,7))) att23
00:53:00  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6,7))) att24
00:53:00  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att25
00:53:00  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att26
00:53:00  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr72,7)))att27
00:53:00  37  -- date related integers: hour of day, day of week, week of month:
00:53:00  38  ,hh    att28
00:53:00  39  ,d     att29
00:53:00  40  ,w     att30
00:53:00  41  ,mpm   att31
00:53:00  42  ,trend att32
00:53:00  43  ,ug4 g4
00:53:00  44  ,CASE WHEN ug4 IS NULL THEN NULL WHEN ug4 > 0.0006 THEN 'up' ELSE 'nup' END gatt
00:53:00  45  ,CASE WHEN ug4 IS NULL THEN NULL WHEN ug4< -0.0006 THEN 'up' ELSE 'nup' END gattn
00:53:00  46  FROM q13
00:53:00  47  ORDER BY pair,ydate
00:53:00  48  /

Table created.

Elapsed: 00:00:03.51
00:53:03 SQL> 
00:53:03 SQL> -- rpt
00:53:03 SQL> SELECT pair,trend,gatt,gattn,AVG(g4),COUNT(g4),CORR(dc12,g4)FROM q15
00:53:03   2  GROUP BY pair,trend,gatt,gattn
00:53:03   3  ORDER BY pair,trend,gatt,gattn
00:53:03   4  /

PAIR	     TREND GAT GAT    AVG(G4)  COUNT(G4) CORR(DC12,G4)
------- ---------- --- --- ---------- ---------- -------------
gbp_usd 	-1 nup nup -.00001104	    1656    .029110922
gbp_usd 	-1 nup up  -.00322246	    3754    .004746461
gbp_usd 	-1 up  nup  .00345866	    3721    -.03180176
gbp_usd 	-1			       0
gbp_usd 	 1 nup nup -1.668E-06	    1574    .026963894
gbp_usd 	 1 nup up  -.00315288	    3752    .059674922
gbp_usd 	 1 up  nup .003498297	    3728    -.11108955

7 rows selected.

Elapsed: 00:00:00.04
00:53:03 SQL> 
00:53:03 SQL> -- rpt
00:53:03 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
gbp_usd 2010-12-16 00:40:00

Elapsed: 00:00:00.01
00:53:03 SQL> 
00:53:03 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.10
00:53:03 SQL> CREATE TABLE modsrc COMPRESS AS
00:53:03   2  SELECT
00:53:03   3  pair
00:53:03   4  ,ydate
00:53:03   5  ,prdate
00:53:03   6  ,trend
00:53:03   7  ,g4
00:53:03   8  ,gatt
00:53:03   9  ,gattn
00:53:03  10  ,dc12
00:53:03  11  FROM q15
00:53:03  12  /

Table created.

Elapsed: 00:00:00.08
00:53:03 SQL> 
00:53:03 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
00:53:03 SQL> 
00:53:03 SQL> -- rpt
00:53:03 SQL> 
00:53:03 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      18641

Elapsed: 00:00:00.31
00:53:04 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      18209

Elapsed: 00:00:00.00
00:53:04 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      18209

Elapsed: 00:00:00.01
00:53:04 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      18209

Elapsed: 00:00:00.00
00:53:04 SQL> 
00:53:04 SQL> SELECT pair,trend,gatt,gattn,AVG(g4),COUNT(g4),CORR(dc12,g4)FROM modsrc
00:53:04   2  GROUP BY pair,trend,gatt,gattn
00:53:04   3  ORDER BY pair,trend,gatt,gattn
00:53:04   4  /

PAIR	     TREND GAT GAT    AVG(G4)  COUNT(G4) CORR(DC12,G4)
------- ---------- --- --- ---------- ---------- -------------
gbp_usd 	-1 nup nup -.00001104	    1656    .029110922
gbp_usd 	-1 nup up  -.00322246	    3754    .004746461
gbp_usd 	-1 up  nup  .00345866	    3721    -.03180176
gbp_usd 	-1			       0
gbp_usd 	 1 nup nup -1.668E-06	    1574    .026963894
gbp_usd 	 1 nup up  -.00315288	    3752    .059674922
gbp_usd 	 1 up  nup .003498297	    3728    -.11108955

7 rows selected.

Elapsed: 00:00:00.02
00:53:04 SQL> 
00:53:04 SQL> DROP   TABLE gbp_ms10 ;

Table dropped.

Elapsed: 00:00:00.05
00:53:04 SQL> CREATE TABLE gbp_ms10 COMPRESS AS
00:53:04   2  SELECT
00:53:04   3  ydate
00:53:04   4  ,trend gbp_trend
00:53:04   5  ,g4    gbp_g4
00:53:04   6  ,gatt  gbp_gatt
00:53:04   7  ,gattn	gbp_gattn
00:53:04   8  FROM modsrc
00:53:04   9  /

Table created.

Elapsed: 00:00:00.05
00:53:04 SQL> 
00:53:04 SQL> ANALYZE TABLE gbp_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.14
00:53:04 SQL> 
00:53:04 SQL> -- rpt
00:53:04 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g4),MIN(g4),MAX(g4)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G4)	 MIN(G4)    MAX(G4)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-06-22 15:30:01 2010-12-15 03:50:00	 9054	  -.0194      .0192
	-1 2010-06-22 05:00:01 2010-12-16 00:40:00	 9131	  -.0153      .0189

Elapsed: 00:00:00.02
00:53:04 SQL> SELECT gbp_trend,MIN(ydate),MAX(ydate),COUNT(gbp_trend),MIN(gbp_g4),MAX(gbp_g4)FROM gbp_ms10 GROUP BY gbp_trend;

 GBP_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(GBP_TREND) MIN(GBP_G4) MAX(GBP_G4)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-06-22 15:30:01 2010-12-15 03:50:00	       9054	 -.0194       .0192
	-1 2010-06-22 05:00:01 2010-12-16 00:40:00	       9155	 -.0153       .0189

Elapsed: 00:00:00.01
00:53:04 SQL> 
00:53:04 SQL> -- I need a copy of q15 attributes
00:53:04 SQL> 
00:53:04 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.05
00:53:04 SQL> CREATE TABLE gbp_att COMPRESS AS
00:53:04   2  SELECT
00:53:04   3  ydate
00:53:04   4  ,att00 gbp_att00
00:53:04   5  ,att01 gbp_att01
00:53:04   6  ,att02 gbp_att02
00:53:04   7  ,att03 gbp_att03
00:53:04   8  ,att04 gbp_att04
00:53:04   9  ,att05 gbp_att05
00:53:04  10  ,att06 gbp_att06
00:53:04  11  ,att07 gbp_att07
00:53:04  12  ,att08 gbp_att08
00:53:04  13  ,att09 gbp_att09
00:53:04  14  ,att10 gbp_att10
00:53:04  15  ,att11 gbp_att11
00:53:04  16  ,att12 gbp_att12
00:53:04  17  ,att13 gbp_att13
00:53:04  18  ,att14 gbp_att14
00:53:04  19  ,att15 gbp_att15
00:53:04  20  ,att16 gbp_att16
00:53:04  21  ,att17 gbp_att17
00:53:04  22  ,att18 gbp_att18
00:53:04  23  ,att19 gbp_att19
00:53:04  24  ,att20 gbp_att20
00:53:04  25  ,att21 gbp_att21
00:53:04  26  ,att22 gbp_att22
00:53:04  27  ,att23 gbp_att23
00:53:04  28  ,att24 gbp_att24
00:53:04  29  ,att25 gbp_att25
00:53:04  30  ,att26 gbp_att26
00:53:04  31  ,att27 gbp_att27
00:53:04  32  ,att28 gbp_att28
00:53:04  33  ,att29 gbp_att29
00:53:04  34  ,att30 gbp_att30
00:53:04  35  ,att31 gbp_att31
00:53:04  36  ,att32 gbp_att32
00:53:04  37  FROM q15
00:53:04  38  /

Table created.

Elapsed: 00:00:00.17
00:53:04 SQL> 
00:53:04 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.36
00:53:05 SQL> 
00:53:05 SQL> -- rpt
00:53:05 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     18209

Elapsed: 00:00:00.00
00:53:05 SQL> 
00:53:05 SQL> --
00:53:05 SQL> -- jpy10.sql
00:53:05 SQL> --
00:53:05 SQL> 
00:53:05 SQL> -- Creates views and tables for backtesting a forex SVM strategy
00:53:05 SQL> 
00:53:05 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.30
00:53:05 SQL> 
00:53:05 SQL> -- I created di5min here:
00:53:05 SQL> -- /pt/s/rlk/svm4hp/update_di5min.sql
00:53:05 SQL> 
00:53:05 SQL> CREATE OR REPLACE VIEW q11 AS
00:53:05   2  SELECT
00:53:05   3  pair
00:53:05   4  ,ydate
00:53:05   5  ,prdate
00:53:05   6  ,rownum rnum -- acts as t in my time-series
00:53:05   7  ,clse
00:53:05   8  ,LAG(clse,6*1,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg1
00:53:05   9  ,LAG(clse,6*2,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg2
00:53:05  10  ,LAG(clse,6*3,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg3
00:53:05  11  ,LAG(clse,6*4,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg4
00:53:05  12  ,LAG(clse,6*5,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg5
00:53:05  13  ,LAG(clse,6*6,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg6
00:53:05  14  ,LAG(clse,6*7,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg7
00:53:05  15  ,LAG(clse,6*8,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg8
00:53:05  16  ,LAG(clse,6*9,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg9
00:53:05  17  ,LAG(clse,6*12,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg12
00:53:05  18  ,LAG(clse,6*18,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg18
00:53:05  19  ,LAG(clse,6*24,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg24
00:53:05  20  ,LAG(clse,6*72,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg72
00:53:05  21  ,LEAD(clse,6*4,NULL)OVER(PARTITION BY pair ORDER BY ydate) ld4
00:53:05  22  FROM di5min WHERE pair LIKE'%jpy%'
00:53:05  23  ORDER BY ydate
00:53:05  24  /

View created.

Elapsed: 00:00:00.05
00:53:05 SQL> 
00:53:05 SQL> -- rpt
00:53:05 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
usd_jpy        18642

Elapsed: 00:00:00.31
00:53:05 SQL> 
00:53:05 SQL> -- Calc deltas and gains
00:53:05 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.20
00:53:06 SQL> 
00:53:06 SQL> CREATE TABLE q13 COMPRESS AS
00:53:06   2  SELECT
00:53:06   3  pair
00:53:06   4  ,ydate
00:53:06   5  ,prdate
00:53:06   6  ,rnum
00:53:06   7  ,lg4
00:53:06   8  ,lg8
00:53:06   9  ,lg12
00:53:06  10  ,ld4
00:53:06  11  ,CASE WHEN(clse-lg12)>0 then 1 ELSE -1 END trend
00:53:06  12  -- step by 1
00:53:06  13  ,clse-lg1 d01
00:53:06  14  ,lg1-lg2	d12
00:53:06  15  ,lg2-lg3	d23
00:53:06  16  ,lg3-lg4	d34
00:53:06  17  ,lg4-lg5	d45
00:53:06  18  ,lg5-lg6	d56
00:53:06  19  ,lg6-lg7	d67
00:53:06  20  ,lg7-lg8	d78
00:53:06  21  ,lg8-lg9	d89
00:53:06  22  -- step by 2
00:53:06  23  ,clse-lg2 d02
00:53:06  24  ,lg2-lg4 d24
00:53:06  25  ,lg4-lg6 d46
00:53:06  26  ,lg6-lg8 d68
00:53:06  27  -- step by 3
00:53:06  28  ,clse-lg3 d03
00:53:06  29  ,lg3-lg6	d36
00:53:06  30  ,lg6-lg9	d69
00:53:06  31  ,lg9-lg12 d912
00:53:06  32  -- step by 4
00:53:06  33  ,clse-lg4 d04
00:53:06  34  ,lg4-lg8	d48
00:53:06  35  ,lg8-lg12 d812
00:53:06  36  ,lg6-lg12 d612
00:53:06  37  ,lg12-lg18 d1218
00:53:06  38  --
00:53:06  39  ,ABS(clse-lg1)dc1
00:53:06  40  ,ABS(clse-lg2)dc2
00:53:06  41  ,ABS(clse-lg3)dc3
00:53:06  42  ,ABS(clse-lg4)dc4
00:53:06  43  ,ABS(clse-lg5)dc5
00:53:06  44  ,ABS(clse-lg6)dc6
00:53:06  45  ,ABS(clse-lg7)dc7
00:53:06  46  ,ABS(clse-lg8)dc8
00:53:06  47  ,ABS(clse-lg9)dc9
00:53:06  48  ,ABS(clse-lg12)dc12
00:53:06  49  ,ABS(clse-lg18)dc18
00:53:06  50  ,ABS(clse-lg24)dc24
00:53:06  51  ,ABS(clse-lg72)dc72
00:53:06  52  ,(ld4-clse) ug4
00:53:06  53  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*2  PRECEDING AND CURRENT ROW)crr2
00:53:06  54  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*3  PRECEDING AND CURRENT ROW)crr3
00:53:06  55  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*4  PRECEDING AND CURRENT ROW)crr4
00:53:06  56  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*5  PRECEDING AND CURRENT ROW)crr5
00:53:06  57  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*6  PRECEDING AND CURRENT ROW)crr6
00:53:06  58  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*7  PRECEDING AND CURRENT ROW)crr7
00:53:06  59  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*8  PRECEDING AND CURRENT ROW)crr8
00:53:06  60  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*9  PRECEDING AND CURRENT ROW)crr9
00:53:06  61  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*12 PRECEDING AND CURRENT ROW)crr12
00:53:06  62  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*24 PRECEDING AND CURRENT ROW)crr24
00:53:06  63  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*72 PRECEDING AND CURRENT ROW)crr72
00:53:06  64  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
00:53:06  65  ,0+TO_CHAR(ydate,'D')d
00:53:06  66  ,0+TO_CHAR(ydate,'W')w
00:53:06  67  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
00:53:06  68  FROM q11
00:53:06  69  -- I dont want any NULL values from the LAG() functions:
00:53:06  70  WHERE lg72 > 0
00:53:06  71  ORDER BY pair,ydate
00:53:06  72  /

Table created.

Elapsed: 00:00:01.43
00:53:07 SQL> 
00:53:07 SQL> -- rpt
00:53:07 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    8113
	-1	   10097

Elapsed: 00:00:00.03
00:53:07 SQL> 
00:53:07 SQL> -- Calc gains and ntiles
00:53:07 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.14
00:53:07 SQL> CREATE TABLE q15 COMPRESS AS
00:53:07   2  SELECT
00:53:07   3  pair
00:53:07   4  ,ydate
00:53:07   5  ,prdate -- Should be unique
00:53:07   6  ,trend -- +1 or -1
00:53:07   7  ,dc12 -- next statement needs this
00:53:07   8  -- Use NTILE() to derive some attributes
00:53:07   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d12))		 att00
00:53:07  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d23))		 att01
00:53:07  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d34))		 att02
00:53:07  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d45))		 att03
00:53:07  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d56))		 att04
00:53:07  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d67))		 att05
00:53:07  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d78))		 att06
00:53:07  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d89))		 att07
00:53:07  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d912)) 	 att08
00:53:07  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc2)		 att09
00:53:07  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc3)		 att10
00:53:07  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc4)		 att11
00:53:07  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc5)		 att12
00:53:07  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6)		 att13
00:53:07  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc7)		 att14
00:53:07  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8)		 att15
00:53:07  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc9)		 att16
00:53:07  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att17
00:53:07  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc24)		 att18
00:53:07  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc72)		 att19
00:53:07  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr2,7))) att20
00:53:07  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr3,7))) att21
00:53:07  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr4,7))) att22
00:53:07  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr5,7))) att23
00:53:07  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6,7))) att24
00:53:07  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att25
00:53:07  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att26
00:53:07  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr72,7)))att27
00:53:07  37  -- date related integers: hour of day, day of week, week of month:
00:53:07  38  ,hh    att28
00:53:07  39  ,d     att29
00:53:07  40  ,w     att30
00:53:07  41  ,mpm   att31
00:53:07  42  ,trend att32
00:53:07  43  ,ug4 g4
00:53:07  44  ,CASE WHEN ug4 IS NULL THEN NULL WHEN ug4 > 0.0006 THEN 'up' ELSE 'nup' END gatt
00:53:07  45  ,CASE WHEN ug4 IS NULL THEN NULL WHEN ug4< -0.0006 THEN 'up' ELSE 'nup' END gattn
00:53:07  46  FROM q13
00:53:07  47  ORDER BY pair,ydate
00:53:07  48  /

Table created.

Elapsed: 00:00:03.59
00:53:11 SQL> 
00:53:11 SQL> -- rpt
00:53:11 SQL> SELECT pair,trend,gatt,gattn,AVG(g4),COUNT(g4),CORR(dc12,g4)FROM q15
00:53:11   2  GROUP BY pair,trend,gatt,gattn
00:53:11   3  ORDER BY pair,trend,gatt,gattn
00:53:11   4  /

PAIR	     TREND GAT GAT    AVG(G4)  COUNT(G4) CORR(DC12,G4)
------- ---------- --- --- ---------- ---------- -------------
usd_jpy 	-1 nup nup	    0	     245
usd_jpy 	-1 nup up  -.15411024	    4962    .024281394
usd_jpy 	-1 up  nup .147026585	    4890    .046720655
usd_jpy 	 1 nup nup	    0	     175
usd_jpy 	 1 nup up  -.15613295	    4325    -.04897404
usd_jpy 	 1 up  nup .157883115	    3589    .141466485
usd_jpy 	 1			       0

7 rows selected.

Elapsed: 00:00:00.04
00:53:11 SQL> 
00:53:11 SQL> -- rpt
00:53:11 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
usd_jpy 2010-12-16 00:40:00

Elapsed: 00:00:00.01
00:53:11 SQL> 
00:53:11 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
00:53:11 SQL> CREATE TABLE modsrc COMPRESS AS
00:53:11   2  SELECT
00:53:11   3  pair
00:53:11   4  ,ydate
00:53:11   5  ,prdate
00:53:11   6  ,trend
00:53:11   7  ,g4
00:53:11   8  ,gatt
00:53:11   9  ,gattn
00:53:11  10  ,dc12
00:53:11  11  FROM q15
00:53:11  12  /

Table created.

Elapsed: 00:00:00.09
00:53:11 SQL> 
00:53:11 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.27
00:53:11 SQL> 
00:53:11 SQL> -- rpt
00:53:11 SQL> 
00:53:11 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      18642

Elapsed: 00:00:00.32
00:53:12 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      18210

Elapsed: 00:00:00.00
00:53:12 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      18210

Elapsed: 00:00:00.01
00:53:12 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      18210

Elapsed: 00:00:00.00
00:53:12 SQL> 
00:53:12 SQL> SELECT pair,trend,gatt,gattn,AVG(g4),COUNT(g4),CORR(dc12,g4)FROM modsrc
00:53:12   2  GROUP BY pair,trend,gatt,gattn
00:53:12   3  ORDER BY pair,trend,gatt,gattn
00:53:12   4  /

PAIR	     TREND GAT GAT    AVG(G4)  COUNT(G4) CORR(DC12,G4)
------- ---------- --- --- ---------- ---------- -------------
usd_jpy 	-1 nup nup	    0	     245
usd_jpy 	-1 nup up  -.15411024	    4962    .024281394
usd_jpy 	-1 up  nup .147026585	    4890    .046720655
usd_jpy 	 1 nup nup	    0	     175
usd_jpy 	 1 nup up  -.15613295	    4325    -.04897404
usd_jpy 	 1 up  nup .157883115	    3589    .141466485
usd_jpy 	 1			       0

7 rows selected.

Elapsed: 00:00:00.02
00:53:12 SQL> 
00:53:12 SQL> DROP   TABLE jpy_ms10 ;

Table dropped.

Elapsed: 00:00:00.04
00:53:12 SQL> CREATE TABLE jpy_ms10 COMPRESS AS
00:53:12   2  SELECT
00:53:12   3  ydate
00:53:12   4  ,trend jpy_trend
00:53:12   5  ,g4    jpy_g4
00:53:12   6  ,gatt  jpy_gatt
00:53:12   7  ,gattn	jpy_gattn
00:53:12   8  FROM modsrc
00:53:12   9  /

Table created.

Elapsed: 00:00:00.06
00:53:12 SQL> 
00:53:12 SQL> ANALYZE TABLE jpy_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
00:53:12 SQL> 
00:53:12 SQL> -- rpt
00:53:12 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g4),MIN(g4),MAX(g4)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G4)	 MIN(G4)    MAX(G4)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-06-22 05:00:01 2010-12-16 00:40:00	 8089	   -1.07       1.04
	-1 2010-06-22 06:20:01 2010-12-15 15:10:00	10097	   -1.18       1.99

Elapsed: 00:00:00.02
00:53:12 SQL> SELECT jpy_trend,MIN(ydate),MAX(ydate),COUNT(jpy_trend),MIN(jpy_g4),MAX(jpy_g4)FROM jpy_ms10 GROUP BY jpy_trend;

 JPY_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(JPY_TREND) MIN(JPY_G4) MAX(JPY_G4)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-06-22 05:00:01 2010-12-16 00:40:00	       8113	  -1.07        1.04
	-1 2010-06-22 06:20:01 2010-12-15 15:10:00	      10097	  -1.18        1.99

Elapsed: 00:00:00.02
00:53:12 SQL> 
00:53:12 SQL> -- I need a copy of q15 attributes
00:53:12 SQL> 
00:53:12 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.03
00:53:12 SQL> CREATE TABLE jpy_att COMPRESS AS
00:53:12   2  SELECT
00:53:12   3  ydate
00:53:12   4  ,att00 jpy_att00
00:53:12   5  ,att01 jpy_att01
00:53:12   6  ,att02 jpy_att02
00:53:12   7  ,att03 jpy_att03
00:53:12   8  ,att04 jpy_att04
00:53:12   9  ,att05 jpy_att05
00:53:12  10  ,att06 jpy_att06
00:53:12  11  ,att07 jpy_att07
00:53:12  12  ,att08 jpy_att08
00:53:12  13  ,att09 jpy_att09
00:53:12  14  ,att10 jpy_att10
00:53:12  15  ,att11 jpy_att11
00:53:12  16  ,att12 jpy_att12
00:53:12  17  ,att13 jpy_att13
00:53:12  18  ,att14 jpy_att14
00:53:12  19  ,att15 jpy_att15
00:53:12  20  ,att16 jpy_att16
00:53:12  21  ,att17 jpy_att17
00:53:12  22  ,att18 jpy_att18
00:53:12  23  ,att19 jpy_att19
00:53:12  24  ,att20 jpy_att20
00:53:12  25  ,att21 jpy_att21
00:53:12  26  ,att22 jpy_att22
00:53:12  27  ,att23 jpy_att23
00:53:12  28  ,att24 jpy_att24
00:53:12  29  ,att25 jpy_att25
00:53:12  30  ,att26 jpy_att26
00:53:12  31  ,att27 jpy_att27
00:53:12  32  ,att28 jpy_att28
00:53:12  33  ,att29 jpy_att29
00:53:12  34  ,att30 jpy_att30
00:53:12  35  ,att31 jpy_att31
00:53:12  36  ,att32 jpy_att32
00:53:12  37  FROM q15
00:53:12  38  /

Table created.

Elapsed: 00:00:00.13
00:53:12 SQL> 
00:53:12 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.36
00:53:12 SQL> 
00:53:12 SQL> -- rpt
00:53:12 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     18210

Elapsed: 00:00:00.00
00:53:12 SQL> 
00:53:12 SQL> --
00:53:12 SQL> -- cad10.sql
00:53:12 SQL> --
00:53:12 SQL> 
00:53:12 SQL> -- Creates views and tables for backtesting a forex SVM strategy
00:53:12 SQL> 
00:53:12 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.36
00:53:13 SQL> 
00:53:13 SQL> -- I created di5min here:
00:53:13 SQL> -- /pt/s/rlk/svm4hp/update_di5min.sql
00:53:13 SQL> 
00:53:13 SQL> CREATE OR REPLACE VIEW q11 AS
00:53:13   2  SELECT
00:53:13   3  pair
00:53:13   4  ,ydate
00:53:13   5  ,prdate
00:53:13   6  ,rownum rnum -- acts as t in my time-series
00:53:13   7  ,clse
00:53:13   8  ,LAG(clse,6*1,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg1
00:53:13   9  ,LAG(clse,6*2,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg2
00:53:13  10  ,LAG(clse,6*3,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg3
00:53:13  11  ,LAG(clse,6*4,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg4
00:53:13  12  ,LAG(clse,6*5,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg5
00:53:13  13  ,LAG(clse,6*6,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg6
00:53:13  14  ,LAG(clse,6*7,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg7
00:53:13  15  ,LAG(clse,6*8,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg8
00:53:13  16  ,LAG(clse,6*9,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg9
00:53:13  17  ,LAG(clse,6*12,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg12
00:53:13  18  ,LAG(clse,6*18,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg18
00:53:13  19  ,LAG(clse,6*24,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg24
00:53:13  20  ,LAG(clse,6*72,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg72
00:53:13  21  ,LEAD(clse,6*4,NULL)OVER(PARTITION BY pair ORDER BY ydate) ld4
00:53:13  22  FROM di5min WHERE pair LIKE'%cad%'
00:53:13  23  ORDER BY ydate
00:53:13  24  /

View created.

Elapsed: 00:00:00.05
00:53:13 SQL> 
00:53:13 SQL> -- rpt
00:53:13 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
usd_cad        18640

Elapsed: 00:00:00.31
00:53:13 SQL> 
00:53:13 SQL> -- Calc deltas and gains
00:53:13 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.22
00:53:13 SQL> 
00:53:13 SQL> CREATE TABLE q13 COMPRESS AS
00:53:13   2  SELECT
00:53:13   3  pair
00:53:13   4  ,ydate
00:53:13   5  ,prdate
00:53:13   6  ,rnum
00:53:13   7  ,lg4
00:53:13   8  ,lg8
00:53:13   9  ,lg12
00:53:13  10  ,ld4
00:53:13  11  ,CASE WHEN(clse-lg12)>0 then 1 ELSE -1 END trend
00:53:13  12  -- step by 1
00:53:13  13  ,clse-lg1 d01
00:53:13  14  ,lg1-lg2	d12
00:53:13  15  ,lg2-lg3	d23
00:53:13  16  ,lg3-lg4	d34
00:53:13  17  ,lg4-lg5	d45
00:53:13  18  ,lg5-lg6	d56
00:53:13  19  ,lg6-lg7	d67
00:53:13  20  ,lg7-lg8	d78
00:53:13  21  ,lg8-lg9	d89
00:53:13  22  -- step by 2
00:53:13  23  ,clse-lg2 d02
00:53:13  24  ,lg2-lg4 d24
00:53:13  25  ,lg4-lg6 d46
00:53:13  26  ,lg6-lg8 d68
00:53:13  27  -- step by 3
00:53:13  28  ,clse-lg3 d03
00:53:13  29  ,lg3-lg6	d36
00:53:13  30  ,lg6-lg9	d69
00:53:13  31  ,lg9-lg12 d912
00:53:13  32  -- step by 4
00:53:13  33  ,clse-lg4 d04
00:53:13  34  ,lg4-lg8	d48
00:53:13  35  ,lg8-lg12 d812
00:53:13  36  ,lg6-lg12 d612
00:53:13  37  ,lg12-lg18 d1218
00:53:13  38  --
00:53:13  39  ,ABS(clse-lg1)dc1
00:53:13  40  ,ABS(clse-lg2)dc2
00:53:13  41  ,ABS(clse-lg3)dc3
00:53:13  42  ,ABS(clse-lg4)dc4
00:53:13  43  ,ABS(clse-lg5)dc5
00:53:13  44  ,ABS(clse-lg6)dc6
00:53:13  45  ,ABS(clse-lg7)dc7
00:53:13  46  ,ABS(clse-lg8)dc8
00:53:13  47  ,ABS(clse-lg9)dc9
00:53:13  48  ,ABS(clse-lg12)dc12
00:53:13  49  ,ABS(clse-lg18)dc18
00:53:13  50  ,ABS(clse-lg24)dc24
00:53:13  51  ,ABS(clse-lg72)dc72
00:53:13  52  ,(ld4-clse) ug4
00:53:13  53  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*2  PRECEDING AND CURRENT ROW)crr2
00:53:13  54  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*3  PRECEDING AND CURRENT ROW)crr3
00:53:13  55  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*4  PRECEDING AND CURRENT ROW)crr4
00:53:13  56  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*5  PRECEDING AND CURRENT ROW)crr5
00:53:13  57  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*6  PRECEDING AND CURRENT ROW)crr6
00:53:13  58  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*7  PRECEDING AND CURRENT ROW)crr7
00:53:13  59  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*8  PRECEDING AND CURRENT ROW)crr8
00:53:13  60  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*9  PRECEDING AND CURRENT ROW)crr9
00:53:13  61  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*12 PRECEDING AND CURRENT ROW)crr12
00:53:13  62  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*24 PRECEDING AND CURRENT ROW)crr24
00:53:13  63  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*72 PRECEDING AND CURRENT ROW)crr72
00:53:13  64  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
00:53:13  65  ,0+TO_CHAR(ydate,'D')d
00:53:13  66  ,0+TO_CHAR(ydate,'W')w
00:53:13  67  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
00:53:13  68  FROM q11
00:53:13  69  -- I dont want any NULL values from the LAG() functions:
00:53:13  70  WHERE lg72 > 0
00:53:13  71  ORDER BY pair,ydate
00:53:13  72  /

Table created.

Elapsed: 00:00:01.51
00:53:15 SQL> 
00:53:15 SQL> -- rpt
00:53:15 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    8445
	-1	    9763

Elapsed: 00:00:00.03
00:53:15 SQL> 
00:53:15 SQL> -- Calc gains and ntiles
00:53:15 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.13
00:53:15 SQL> CREATE TABLE q15 COMPRESS AS
00:53:15   2  SELECT
00:53:15   3  pair
00:53:15   4  ,ydate
00:53:15   5  ,prdate -- Should be unique
00:53:15   6  ,trend -- +1 or -1
00:53:15   7  ,dc12 -- next statement needs this
00:53:15   8  -- Use NTILE() to derive some attributes
00:53:15   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d12))		 att00
00:53:15  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d23))		 att01
00:53:15  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d34))		 att02
00:53:15  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d45))		 att03
00:53:15  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d56))		 att04
00:53:15  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d67))		 att05
00:53:15  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d78))		 att06
00:53:15  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d89))		 att07
00:53:15  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d912)) 	 att08
00:53:15  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc2)		 att09
00:53:15  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc3)		 att10
00:53:15  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc4)		 att11
00:53:15  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc5)		 att12
00:53:15  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6)		 att13
00:53:15  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc7)		 att14
00:53:15  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8)		 att15
00:53:15  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc9)		 att16
00:53:15  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att17
00:53:15  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc24)		 att18
00:53:15  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc72)		 att19
00:53:15  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr2,7))) att20
00:53:15  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr3,7))) att21
00:53:15  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr4,7))) att22
00:53:15  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr5,7))) att23
00:53:15  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6,7))) att24
00:53:15  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att25
00:53:15  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att26
00:53:15  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr72,7)))att27
00:53:15  37  -- date related integers: hour of day, day of week, week of month:
00:53:15  38  ,hh    att28
00:53:15  39  ,d     att29
00:53:15  40  ,w     att30
00:53:15  41  ,mpm   att31
00:53:15  42  ,trend att32
00:53:15  43  ,ug4 g4
00:53:15  44  ,CASE WHEN ug4 IS NULL THEN NULL WHEN ug4 > 0.0006 THEN 'up' ELSE 'nup' END gatt
00:53:15  45  ,CASE WHEN ug4 IS NULL THEN NULL WHEN ug4< -0.0006 THEN 'up' ELSE 'nup' END gattn
00:53:15  46  FROM q13
00:53:15  47  ORDER BY pair,ydate
00:53:15  48  /

Table created.

Elapsed: 00:00:03.61
00:53:19 SQL> 
00:53:19 SQL> -- rpt
00:53:19 SQL> SELECT pair,trend,gatt,gattn,AVG(g4),COUNT(g4),CORR(dc12,g4)FROM q15
00:53:19   2  GROUP BY pair,trend,gatt,gattn
00:53:19   3  ORDER BY pair,trend,gatt,gattn
00:53:19   4  /

PAIR	     TREND GAT GAT    AVG(G4)  COUNT(G4) CORR(DC12,G4)
------- ---------- --- --- ---------- ---------- -------------
usd_cad 	-1 nup nup -8.212E-06	    2466    -.01457992
usd_cad 	-1 nup up  -.00244937	    3754    .083482706
usd_cad 	-1 up  nup .002586161	    3519    -.00327628
usd_cad 	-1			       0
usd_cad 	 1 nup nup -.00001662	    1995    -.00361941
usd_cad 	 1 nup up  -.00258606	    3405    .030380405
usd_cad 	 1 up  nup .002794737	    3045    .010460174

7 rows selected.

Elapsed: 00:00:00.03
00:53:19 SQL> 
00:53:19 SQL> -- rpt
00:53:19 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
usd_cad 2010-12-16 00:40:00

Elapsed: 00:00:00.01
00:53:19 SQL> 
00:53:19 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.11
00:53:19 SQL> CREATE TABLE modsrc COMPRESS AS
00:53:19   2  SELECT
00:53:19   3  pair
00:53:19   4  ,ydate
00:53:19   5  ,prdate
00:53:19   6  ,trend
00:53:19   7  ,g4
00:53:19   8  ,gatt
00:53:19   9  ,gattn
00:53:19  10  ,dc12
00:53:19  11  FROM q15
00:53:19  12  /

Table created.

Elapsed: 00:00:00.09
00:53:19 SQL> 
00:53:19 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
00:53:19 SQL> 
00:53:19 SQL> -- rpt
00:53:19 SQL> 
00:53:19 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      18640

Elapsed: 00:00:00.31
00:53:19 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      18208

Elapsed: 00:00:00.01
00:53:19 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      18208

Elapsed: 00:00:00.08
00:53:19 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      18208

Elapsed: 00:00:00.01
00:53:19 SQL> 
00:53:19 SQL> SELECT pair,trend,gatt,gattn,AVG(g4),COUNT(g4),CORR(dc12,g4)FROM modsrc
00:53:19   2  GROUP BY pair,trend,gatt,gattn
00:53:19   3  ORDER BY pair,trend,gatt,gattn
00:53:19   4  /

PAIR	     TREND GAT GAT    AVG(G4)  COUNT(G4) CORR(DC12,G4)
------- ---------- --- --- ---------- ---------- -------------
usd_cad 	-1 nup nup -8.212E-06	    2466    -.01457992
usd_cad 	-1 nup up  -.00244937	    3754    .083482706
usd_cad 	-1 up  nup .002586161	    3519    -.00327628
usd_cad 	-1			       0
usd_cad 	 1 nup nup -.00001662	    1995    -.00361941
usd_cad 	 1 nup up  -.00258606	    3405    .030380405
usd_cad 	 1 up  nup .002794737	    3045    .010460174

7 rows selected.

Elapsed: 00:00:00.02
00:53:20 SQL> 
00:53:20 SQL> DROP   TABLE cad_ms10 ;

Table dropped.

Elapsed: 00:00:00.04
00:53:20 SQL> CREATE TABLE cad_ms10 COMPRESS AS
00:53:20   2  SELECT
00:53:20   3  ydate
00:53:20   4  ,trend cad_trend
00:53:20   5  ,g4    cad_g4
00:53:20   6  ,gatt  cad_gatt
00:53:20   7  ,gattn	cad_gattn
00:53:20   8  FROM modsrc
00:53:20   9  /

Table created.

Elapsed: 00:00:00.06
00:53:20 SQL> 
00:53:20 SQL> ANALYZE TABLE cad_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.14
00:53:20 SQL> 
00:53:20 SQL> -- rpt
00:53:20 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g4),MIN(g4),MAX(g4)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G4)	 MIN(G4)    MAX(G4)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-06-22 05:00:01 2010-12-15 12:00:00	 8445	  -.0153      .0164
	-1 2010-06-24 11:00:01 2010-12-16 00:40:00	 9739	  -.0127      .0151

Elapsed: 00:00:00.02
00:53:20 SQL> SELECT cad_trend,MIN(ydate),MAX(ydate),COUNT(cad_trend),MIN(cad_g4),MAX(cad_g4)FROM cad_ms10 GROUP BY cad_trend;

 CAD_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(CAD_TREND) MIN(CAD_G4) MAX(CAD_G4)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-06-22 05:00:01 2010-12-15 12:00:00	       8445	 -.0153       .0164
	-1 2010-06-24 11:00:01 2010-12-16 00:40:00	       9763	 -.0127       .0151

Elapsed: 00:00:00.01
00:53:20 SQL> 
00:53:20 SQL> -- I need a copy of q15 attributes
00:53:20 SQL> 
00:53:20 SQL> DROP   TABLE cad_att;

Table dropped.

Elapsed: 00:00:00.05
00:53:20 SQL> CREATE TABLE cad_att COMPRESS AS
00:53:20   2  SELECT
00:53:20   3  ydate
00:53:20   4  ,att00 cad_att00
00:53:20   5  ,att01 cad_att01
00:53:20   6  ,att02 cad_att02
00:53:20   7  ,att03 cad_att03
00:53:20   8  ,att04 cad_att04
00:53:20   9  ,att05 cad_att05
00:53:20  10  ,att06 cad_att06
00:53:20  11  ,att07 cad_att07
00:53:20  12  ,att08 cad_att08
00:53:20  13  ,att09 cad_att09
00:53:20  14  ,att10 cad_att10
00:53:20  15  ,att11 cad_att11
00:53:20  16  ,att12 cad_att12
00:53:20  17  ,att13 cad_att13
00:53:20  18  ,att14 cad_att14
00:53:20  19  ,att15 cad_att15
00:53:20  20  ,att16 cad_att16
00:53:20  21  ,att17 cad_att17
00:53:20  22  ,att18 cad_att18
00:53:20  23  ,att19 cad_att19
00:53:20  24  ,att20 cad_att20
00:53:20  25  ,att21 cad_att21
00:53:20  26  ,att22 cad_att22
00:53:20  27  ,att23 cad_att23
00:53:20  28  ,att24 cad_att24
00:53:20  29  ,att25 cad_att25
00:53:20  30  ,att26 cad_att26
00:53:20  31  ,att27 cad_att27
00:53:20  32  ,att28 cad_att28
00:53:20  33  ,att29 cad_att29
00:53:20  34  ,att30 cad_att30
00:53:20  35  ,att31 cad_att31
00:53:20  36  ,att32 cad_att32
00:53:20  37  FROM q15
00:53:20  38  /

Table created.

Elapsed: 00:00:00.14
00:53:20 SQL> 
00:53:20 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.37
00:53:20 SQL> 
00:53:20 SQL> -- rpt
00:53:20 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
     18208

Elapsed: 00:00:00.01
00:53:20 SQL> 
00:53:20 SQL> --
00:53:20 SQL> -- chf10.sql
00:53:20 SQL> --
00:53:20 SQL> 
00:53:20 SQL> -- Creates views and tables for backtesting a forex SVM strategy
00:53:20 SQL> 
00:53:20 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.36
00:53:21 SQL> 
00:53:21 SQL> -- I created di5min here:
00:53:21 SQL> -- /pt/s/rlk/svm4hp/update_di5min.sql
00:53:21 SQL> 
00:53:21 SQL> CREATE OR REPLACE VIEW q11 AS
00:53:21   2  SELECT
00:53:21   3  pair
00:53:21   4  ,ydate
00:53:21   5  ,prdate
00:53:21   6  ,rownum rnum -- acts as t in my time-series
00:53:21   7  ,clse
00:53:21   8  ,LAG(clse,6*1,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg1
00:53:21   9  ,LAG(clse,6*2,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg2
00:53:21  10  ,LAG(clse,6*3,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg3
00:53:21  11  ,LAG(clse,6*4,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg4
00:53:21  12  ,LAG(clse,6*5,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg5
00:53:21  13  ,LAG(clse,6*6,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg6
00:53:21  14  ,LAG(clse,6*7,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg7
00:53:21  15  ,LAG(clse,6*8,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg8
00:53:21  16  ,LAG(clse,6*9,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg9
00:53:21  17  ,LAG(clse,6*12,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg12
00:53:21  18  ,LAG(clse,6*18,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg18
00:53:21  19  ,LAG(clse,6*24,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg24
00:53:21  20  ,LAG(clse,6*72,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg72
00:53:21  21  ,LEAD(clse,6*4,NULL)OVER(PARTITION BY pair ORDER BY ydate) ld4
00:53:21  22  FROM di5min WHERE pair LIKE'%chf%'
00:53:21  23  ORDER BY ydate
00:53:21  24  /

View created.

Elapsed: 00:00:00.04
00:53:21 SQL> 
00:53:21 SQL> -- rpt
00:53:21 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
usd_chf        18642

Elapsed: 00:00:00.30
00:53:21 SQL> 
00:53:21 SQL> -- Calc deltas and gains
00:53:21 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.12
00:53:21 SQL> 
00:53:21 SQL> CREATE TABLE q13 COMPRESS AS
00:53:21   2  SELECT
00:53:21   3  pair
00:53:21   4  ,ydate
00:53:21   5  ,prdate
00:53:21   6  ,rnum
00:53:21   7  ,lg4
00:53:21   8  ,lg8
00:53:21   9  ,lg12
00:53:21  10  ,ld4
00:53:21  11  ,CASE WHEN(clse-lg12)>0 then 1 ELSE -1 END trend
00:53:21  12  -- step by 1
00:53:21  13  ,clse-lg1 d01
00:53:21  14  ,lg1-lg2	d12
00:53:21  15  ,lg2-lg3	d23
00:53:21  16  ,lg3-lg4	d34
00:53:21  17  ,lg4-lg5	d45
00:53:21  18  ,lg5-lg6	d56
00:53:21  19  ,lg6-lg7	d67
00:53:21  20  ,lg7-lg8	d78
00:53:21  21  ,lg8-lg9	d89
00:53:21  22  -- step by 2
00:53:21  23  ,clse-lg2 d02
00:53:21  24  ,lg2-lg4 d24
00:53:21  25  ,lg4-lg6 d46
00:53:21  26  ,lg6-lg8 d68
00:53:21  27  -- step by 3
00:53:21  28  ,clse-lg3 d03
00:53:21  29  ,lg3-lg6	d36
00:53:21  30  ,lg6-lg9	d69
00:53:21  31  ,lg9-lg12 d912
00:53:21  32  -- step by 4
00:53:21  33  ,clse-lg4 d04
00:53:21  34  ,lg4-lg8	d48
00:53:21  35  ,lg8-lg12 d812
00:53:21  36  ,lg6-lg12 d612
00:53:21  37  ,lg12-lg18 d1218
00:53:21  38  --
00:53:21  39  ,ABS(clse-lg1)dc1
00:53:21  40  ,ABS(clse-lg2)dc2
00:53:21  41  ,ABS(clse-lg3)dc3
00:53:21  42  ,ABS(clse-lg4)dc4
00:53:21  43  ,ABS(clse-lg5)dc5
00:53:21  44  ,ABS(clse-lg6)dc6
00:53:21  45  ,ABS(clse-lg7)dc7
00:53:21  46  ,ABS(clse-lg8)dc8
00:53:21  47  ,ABS(clse-lg9)dc9
00:53:21  48  ,ABS(clse-lg12)dc12
00:53:21  49  ,ABS(clse-lg18)dc18
00:53:21  50  ,ABS(clse-lg24)dc24
00:53:21  51  ,ABS(clse-lg72)dc72
00:53:21  52  ,(ld4-clse) ug4
00:53:21  53  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*2  PRECEDING AND CURRENT ROW)crr2
00:53:21  54  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*3  PRECEDING AND CURRENT ROW)crr3
00:53:21  55  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*4  PRECEDING AND CURRENT ROW)crr4
00:53:21  56  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*5  PRECEDING AND CURRENT ROW)crr5
00:53:21  57  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*6  PRECEDING AND CURRENT ROW)crr6
00:53:21  58  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*7  PRECEDING AND CURRENT ROW)crr7
00:53:21  59  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*8  PRECEDING AND CURRENT ROW)crr8
00:53:21  60  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*9  PRECEDING AND CURRENT ROW)crr9
00:53:21  61  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*12 PRECEDING AND CURRENT ROW)crr12
00:53:21  62  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*24 PRECEDING AND CURRENT ROW)crr24
00:53:21  63  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*72 PRECEDING AND CURRENT ROW)crr72
00:53:21  64  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
00:53:21  65  ,0+TO_CHAR(ydate,'D')d
00:53:21  66  ,0+TO_CHAR(ydate,'W')w
00:53:21  67  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
00:53:21  68  FROM q11
00:53:21  69  -- I dont want any NULL values from the LAG() functions:
00:53:21  70  WHERE lg72 > 0
00:53:21  71  ORDER BY pair,ydate
00:53:21  72  /

Table created.

Elapsed: 00:00:01.50
00:53:23 SQL> 
00:53:23 SQL> -- rpt
00:53:23 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    8181
	-1	   10029

Elapsed: 00:00:00.03
00:53:23 SQL> 
00:53:23 SQL> -- Calc gains and ntiles
00:53:23 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.14
00:53:23 SQL> CREATE TABLE q15 COMPRESS AS
00:53:23   2  SELECT
00:53:23   3  pair
00:53:23   4  ,ydate
00:53:23   5  ,prdate -- Should be unique
00:53:23   6  ,trend -- +1 or -1
00:53:23   7  ,dc12 -- next statement needs this
00:53:23   8  -- Use NTILE() to derive some attributes
00:53:23   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d12))		 att00
00:53:23  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d23))		 att01
00:53:23  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d34))		 att02
00:53:23  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d45))		 att03
00:53:23  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d56))		 att04
00:53:23  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d67))		 att05
00:53:23  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d78))		 att06
00:53:23  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d89))		 att07
00:53:23  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d912)) 	 att08
00:53:23  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc2)		 att09
00:53:23  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc3)		 att10
00:53:23  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc4)		 att11
00:53:23  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc5)		 att12
00:53:23  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6)		 att13
00:53:23  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc7)		 att14
00:53:23  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8)		 att15
00:53:23  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc9)		 att16
00:53:23  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att17
00:53:23  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc24)		 att18
00:53:23  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc72)		 att19
00:53:23  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr2,7))) att20
00:53:23  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr3,7))) att21
00:53:23  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr4,7))) att22
00:53:23  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr5,7))) att23
00:53:23  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6,7))) att24
00:53:23  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att25
00:53:23  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att26
00:53:23  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr72,7)))att27
00:53:23  37  -- date related integers: hour of day, day of week, week of month:
00:53:23  38  ,hh    att28
00:53:23  39  ,d     att29
00:53:23  40  ,w     att30
00:53:23  41  ,mpm   att31
00:53:23  42  ,trend att32
00:53:23  43  ,ug4 g4
00:53:23  44  ,CASE WHEN ug4 IS NULL THEN NULL WHEN ug4 > 0.0006 THEN 'up' ELSE 'nup' END gatt
00:53:23  45  ,CASE WHEN ug4 IS NULL THEN NULL WHEN ug4< -0.0006 THEN 'up' ELSE 'nup' END gattn
00:53:23  46  FROM q13
00:53:23  47  ORDER BY pair,ydate
00:53:23  48  /

Table created.

Elapsed: 00:00:03.57
00:53:26 SQL> 
00:53:26 SQL> -- rpt
00:53:26 SQL> SELECT pair,trend,gatt,gattn,AVG(g4),COUNT(g4),CORR(dc12,g4)FROM q15
00:53:26   2  GROUP BY pair,trend,gatt,gattn
00:53:26   3  ORDER BY pair,trend,gatt,gattn
00:53:26   4  /

PAIR	     TREND GAT GAT    AVG(G4)  COUNT(G4) CORR(DC12,G4)
------- ---------- --- --- ---------- ---------- -------------
usd_chf 	-1 nup nup .000028071	    2564    .055510503
usd_chf 	-1 nup up   -.0029293	    3716    .069773965
usd_chf 	-1 up  nup .002560463	    3749    -.12042573
usd_chf 	 1 nup nup 1.4845E-06	    2004    .034959916
usd_chf 	 1 nup up  -.00268022	    3418    .097774878
usd_chf 	 1 up  nup  .00254394	    2735    -.13754561
usd_chf 	 1			       0

7 rows selected.

Elapsed: 00:00:00.04
00:53:26 SQL> 
00:53:26 SQL> -- rpt
00:53:26 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
usd_chf 2010-12-16 00:40:00

Elapsed: 00:00:00.01
00:53:26 SQL> 
00:53:26 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
00:53:27 SQL> CREATE TABLE modsrc COMPRESS AS
00:53:27   2  SELECT
00:53:27   3  pair
00:53:27   4  ,ydate
00:53:27   5  ,prdate
00:53:27   6  ,trend
00:53:27   7  ,g4
00:53:27   8  ,gatt
00:53:27   9  ,gattn
00:53:27  10  ,dc12
00:53:27  11  FROM q15
00:53:27  12  /

Table created.

Elapsed: 00:00:00.08
00:53:27 SQL> 
00:53:27 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
00:53:27 SQL> 
00:53:27 SQL> -- rpt
00:53:27 SQL> 
00:53:27 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      18642

Elapsed: 00:00:00.31
00:53:27 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      18210

Elapsed: 00:00:00.01
00:53:27 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      18210

Elapsed: 00:00:00.00
00:53:27 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      18210

Elapsed: 00:00:00.00
00:53:27 SQL> 
00:53:27 SQL> SELECT pair,trend,gatt,gattn,AVG(g4),COUNT(g4),CORR(dc12,g4)FROM modsrc
00:53:27   2  GROUP BY pair,trend,gatt,gattn
00:53:27   3  ORDER BY pair,trend,gatt,gattn
00:53:27   4  /

PAIR	     TREND GAT GAT    AVG(G4)  COUNT(G4) CORR(DC12,G4)
------- ---------- --- --- ---------- ---------- -------------
usd_chf 	-1 nup nup .000028071	    2564    .055510503
usd_chf 	-1 nup up   -.0029293	    3716    .069773965
usd_chf 	-1 up  nup .002560463	    3749    -.12042573
usd_chf 	 1 nup nup 1.4845E-06	    2004    .034959916
usd_chf 	 1 nup up  -.00268022	    3418    .097774878
usd_chf 	 1 up  nup  .00254394	    2735    -.13754561
usd_chf 	 1			       0

7 rows selected.

Elapsed: 00:00:00.03
00:53:27 SQL> 
00:53:27 SQL> DROP   TABLE chf_ms10 ;

Table dropped.

Elapsed: 00:00:00.03
00:53:27 SQL> CREATE TABLE chf_ms10 COMPRESS AS
00:53:27   2  SELECT
00:53:27   3  ydate
00:53:27   4  ,trend chf_trend
00:53:27   5  ,g4    chf_g4
00:53:27   6  ,gatt  chf_gatt
00:53:27   7  ,gattn	chf_gattn
00:53:27   8  FROM modsrc
00:53:27   9  /

Table created.

Elapsed: 00:00:00.06
00:53:27 SQL> 
00:53:27 SQL> ANALYZE TABLE chf_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.14
00:53:27 SQL> 
00:53:27 SQL> -- rpt
00:53:27 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g4),MIN(g4),MAX(g4)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G4)	 MIN(G4)    MAX(G4)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-06-22 05:00:01 2010-12-16 00:40:00	 8157	-.016775      .0136
	-1 2010-06-22 12:40:01 2010-12-15 16:30:00	10029	  -.0166      .0149

Elapsed: 00:00:00.02
00:53:27 SQL> SELECT chf_trend,MIN(ydate),MAX(ydate),COUNT(chf_trend),MIN(chf_g4),MAX(chf_g4)FROM chf_ms10 GROUP BY chf_trend;

 CHF_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(CHF_TREND) MIN(CHF_G4) MAX(CHF_G4)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-06-22 05:00:01 2010-12-16 00:40:00	       8181    -.016775       .0136
	-1 2010-06-22 12:40:01 2010-12-15 16:30:00	      10029	 -.0166       .0149

Elapsed: 00:00:00.01
00:53:28 SQL> 
00:53:28 SQL> -- I need a copy of q15 attributes
00:53:28 SQL> 
00:53:28 SQL> DROP   TABLE chf_att;

Table dropped.

Elapsed: 00:00:00.05
00:53:28 SQL> CREATE TABLE chf_att COMPRESS AS
00:53:28   2  SELECT
00:53:28   3  ydate
00:53:28   4  ,att00 chf_att00
00:53:28   5  ,att01 chf_att01
00:53:28   6  ,att02 chf_att02
00:53:28   7  ,att03 chf_att03
00:53:28   8  ,att04 chf_att04
00:53:28   9  ,att05 chf_att05
00:53:28  10  ,att06 chf_att06
00:53:28  11  ,att07 chf_att07
00:53:28  12  ,att08 chf_att08
00:53:28  13  ,att09 chf_att09
00:53:28  14  ,att10 chf_att10
00:53:28  15  ,att11 chf_att11
00:53:28  16  ,att12 chf_att12
00:53:28  17  ,att13 chf_att13
00:53:28  18  ,att14 chf_att14
00:53:28  19  ,att15 chf_att15
00:53:28  20  ,att16 chf_att16
00:53:28  21  ,att17 chf_att17
00:53:28  22  ,att18 chf_att18
00:53:28  23  ,att19 chf_att19
00:53:28  24  ,att20 chf_att20
00:53:28  25  ,att21 chf_att21
00:53:28  26  ,att22 chf_att22
00:53:28  27  ,att23 chf_att23
00:53:28  28  ,att24 chf_att24
00:53:28  29  ,att25 chf_att25
00:53:28  30  ,att26 chf_att26
00:53:28  31  ,att27 chf_att27
00:53:28  32  ,att28 chf_att28
00:53:28  33  ,att29 chf_att29
00:53:28  34  ,att30 chf_att30
00:53:28  35  ,att31 chf_att31
00:53:28  36  ,att32 chf_att32
00:53:28  37  FROM q15
00:53:28  38  /

Table created.

Elapsed: 00:00:00.13
00:53:28 SQL> 
00:53:28 SQL> ANALYZE TABLE chf_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.38
00:53:28 SQL> 
00:53:28 SQL> -- rpt
00:53:28 SQL> SELECT COUNT(*)FROM chf_att;

  COUNT(*)
----------
     18210

Elapsed: 00:00:00.00
00:53:28 SQL> 
00:53:28 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
