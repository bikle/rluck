
SQL*Plus: Release 11.2.0.1.0 Production on Fri Dec 17 00:00:17 2010

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

00:00:17 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
00:00:17 SQL> 00:00:17 SQL> --
00:00:17 SQL> -- eur10.sql
00:00:17 SQL> --
00:00:17 SQL> 
00:00:17 SQL> -- Creates views and tables for backtesting a forex SVM strategy
00:00:17 SQL> 
00:00:17 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.01
00:00:17 SQL> 
00:00:17 SQL> -- I created di5min here:
00:00:17 SQL> -- /pt/s/rlk/svm4hp/update_di5min.sql
00:00:17 SQL> 
00:00:17 SQL> CREATE OR REPLACE VIEW q11 AS
00:00:17   2  SELECT
00:00:17   3  pair
00:00:17   4  ,ydate
00:00:17   5  ,prdate
00:00:17   6  ,rownum rnum -- acts as t in my time-series
00:00:17   7  ,clse
00:00:17   8  ,LAG(clse,12*1,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg1
00:00:17   9  ,LAG(clse,12*2,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg2
00:00:17  10  ,LAG(clse,12*3,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg3
00:00:17  11  ,LAG(clse,12*4,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg4
00:00:17  12  ,LAG(clse,12*5,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg5
00:00:17  13  ,LAG(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg6
00:00:17  14  ,LAG(clse,12*7,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg7
00:00:17  15  ,LAG(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg8
00:00:17  16  ,LAG(clse,12*9,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg9
00:00:17  17  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg12
00:00:17  18  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg18
00:00:17  19  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg24
00:00:17  20  ,LAG(clse,12*72,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg72
00:00:17  21  ,LEAD(clse,12*4,NULL)OVER(PARTITION BY pair ORDER BY ydate) ld4
00:00:17  22  FROM di5min WHERE pair LIKE'%eur%'
00:00:17  23  ORDER BY ydate
00:00:17  24  /

View created.

Elapsed: 00:00:00.04
00:00:17 SQL> 
00:00:17 SQL> -- rpt
00:00:17 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
eur_usd        20821

Elapsed: 00:00:00.37
00:00:18 SQL> 
00:00:18 SQL> -- Calc deltas and gains
00:00:18 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.18
00:00:18 SQL> 
00:00:18 SQL> CREATE TABLE q13 COMPRESS AS
00:00:18   2  SELECT
00:00:18   3  pair
00:00:18   4  ,ydate
00:00:18   5  ,prdate
00:00:18   6  ,rnum
00:00:18   7  ,lg4
00:00:18   8  ,lg8
00:00:18   9  ,lg12
00:00:18  10  ,ld4
00:00:18  11  ,CASE WHEN(clse-lg12)>0 then 1 ELSE -1 END trend
00:00:18  12  -- step by 1
00:00:18  13  ,clse-lg1 d01
00:00:18  14  ,lg1-lg2	d12
00:00:18  15  ,lg2-lg3	d23
00:00:18  16  ,lg3-lg4	d34
00:00:18  17  ,lg4-lg5	d45
00:00:18  18  ,lg5-lg6	d56
00:00:18  19  ,lg6-lg7	d67
00:00:18  20  ,lg7-lg8	d78
00:00:18  21  ,lg8-lg9	d89
00:00:18  22  -- step by 2
00:00:18  23  ,clse-lg2 d02
00:00:18  24  ,lg2-lg4 d24
00:00:18  25  ,lg4-lg6 d46
00:00:18  26  ,lg6-lg8 d68
00:00:18  27  -- step by 3
00:00:18  28  ,clse-lg3 d03
00:00:18  29  ,lg3-lg6	d36
00:00:18  30  ,lg6-lg9	d69
00:00:18  31  ,lg9-lg12 d912
00:00:18  32  -- step by 4
00:00:18  33  ,clse-lg4 d04
00:00:18  34  ,lg4-lg8	d48
00:00:18  35  ,lg8-lg12 d812
00:00:18  36  ,lg6-lg12 d612
00:00:18  37  ,lg12-lg18 d1218
00:00:18  38  --
00:00:18  39  ,ABS(clse-lg1)dc1
00:00:18  40  ,ABS(clse-lg2)dc2
00:00:18  41  ,ABS(clse-lg3)dc3
00:00:18  42  ,ABS(clse-lg4)dc4
00:00:18  43  ,ABS(clse-lg5)dc5
00:00:18  44  ,ABS(clse-lg6)dc6
00:00:18  45  ,ABS(clse-lg7)dc7
00:00:18  46  ,ABS(clse-lg8)dc8
00:00:18  47  ,ABS(clse-lg9)dc9
00:00:18  48  ,ABS(clse-lg12)dc12
00:00:18  49  ,ABS(clse-lg18)dc18
00:00:18  50  ,ABS(clse-lg24)dc24
00:00:18  51  ,ABS(clse-lg72)dc72
00:00:18  52  ,(ld4-clse) ug4
00:00:18  53  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*2  PRECEDING AND CURRENT ROW)crr2
00:00:18  54  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*3  PRECEDING AND CURRENT ROW)crr3
00:00:18  55  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
00:00:18  56  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*5  PRECEDING AND CURRENT ROW)crr5
00:00:18  57  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
00:00:18  58  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*7  PRECEDING AND CURRENT ROW)crr7
00:00:18  59  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
00:00:18  60  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*9  PRECEDING AND CURRENT ROW)crr9
00:00:18  61  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
00:00:18  62  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
00:00:18  63  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*72 PRECEDING AND CURRENT ROW)crr72
00:00:18  64  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
00:00:18  65  ,0+TO_CHAR(ydate,'D')d
00:00:18  66  ,0+TO_CHAR(ydate,'W')w
00:00:18  67  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
00:00:18  68  FROM q11
00:00:18  69  -- I dont want any NULL values from the LAG() functions:
00:00:18  70  WHERE lg72 > 0
00:00:18  71  ORDER BY pair,ydate
00:00:18  72  /

Table created.

Elapsed: 00:00:02.04
00:00:20 SQL> 
00:00:20 SQL> -- rpt
00:00:20 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	   10289
	-1	    9668

Elapsed: 00:00:00.28
00:00:20 SQL> 
00:00:20 SQL> -- Calc gains and ntiles
00:00:20 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.13
00:00:20 SQL> CREATE TABLE q15 COMPRESS AS
00:00:20   2  SELECT
00:00:20   3  pair
00:00:20   4  ,ydate
00:00:20   5  ,prdate -- Should be unique
00:00:20   6  ,trend -- +1 or -1
00:00:20   7  ,dc12 -- next statement needs this
00:00:20   8  -- Use NTILE() to derive some attributes
00:00:20   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d12))		 att00
00:00:20  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d23))		 att01
00:00:20  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d34))		 att02
00:00:20  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d45))		 att03
00:00:20  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d56))		 att04
00:00:20  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d67))		 att05
00:00:20  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d78))		 att06
00:00:20  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d89))		 att07
00:00:20  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d912)) 	 att08
00:00:20  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc2)		 att09
00:00:20  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc3)		 att10
00:00:20  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc4)		 att11
00:00:20  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc5)		 att12
00:00:20  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6)		 att13
00:00:20  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc7)		 att14
00:00:20  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8)		 att15
00:00:20  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc9)		 att16
00:00:20  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att17
00:00:20  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc24)		 att18
00:00:20  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc72)		 att19
00:00:20  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr2,7))) att20
00:00:20  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr3,7))) att21
00:00:20  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr4,7))) att22
00:00:20  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr5,7))) att23
00:00:20  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6,7))) att24
00:00:20  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att25
00:00:20  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att26
00:00:20  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr72,7)))att27
00:00:20  37  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
00:00:20  38  ,hh    att28
00:00:20  39  ,d     att29
00:00:20  40  ,w     att30
00:00:20  41  ,mpm   att31
00:00:20  42  ,trend att32
00:00:20  43  ,ug4 g4
00:00:20  44  ,CASE WHEN ug4 IS NULL THEN NULL WHEN ug4 > 0.0006 THEN 'up' ELSE 'nup' END gatt
00:00:20  45  ,CASE WHEN ug4 IS NULL THEN NULL WHEN ug4< -0.0006 THEN 'up' ELSE 'nup' END gattn
00:00:20  46  FROM q13
00:00:20  47  ORDER BY pair,ydate
00:00:20  48  /

Table created.

Elapsed: 00:00:04.28
00:00:24 SQL> 
00:00:24 SQL> -- rpt
00:00:24 SQL> SELECT pair,trend,gatt,gattn,AVG(g4),COUNT(g4),CORR(dc12,g4)FROM q15
00:00:24   2  GROUP BY pair,trend,gatt,gattn
00:00:24   3  ORDER BY pair,trend,gatt,gattn
00:00:24   4  /

PAIR	     TREND GAT GAT    AVG(G4)  COUNT(G4) CORR(DC12,G4)
------- ---------- --- --- ---------- ---------- -------------
eur_usd 	-1 nup nup -.00001559	    1451    .040431941
eur_usd 	-1 nup up  -.00362281	    4024    .148664094
eur_usd 	-1 up  nup .003624946	    4164    -.20602483
eur_usd 	-1			       0
eur_usd 	 1 nup nup .000014474	    1741     .03725399
eur_usd 	 1 nup up  -.00342209	    4203     .11794192
eur_usd 	 1 up  nup .003717447	    4326    -.14406462
eur_usd 	 1			       0

8 rows selected.

Elapsed: 00:00:00.21
00:00:25 SQL> 
00:00:25 SQL> -- rpt
00:00:25 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
eur_usd 2010-12-16 23:50:00

Elapsed: 00:00:00.01
00:00:25 SQL> 
00:00:25 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.09
00:00:25 SQL> CREATE TABLE modsrc COMPRESS AS
00:00:25   2  SELECT
00:00:25   3  pair
00:00:25   4  ,ydate
00:00:25   5  ,prdate
00:00:25   6  ,trend
00:00:25   7  ,g4
00:00:25   8  ,gatt
00:00:25   9  ,gattn
00:00:25  10  ,dc12
00:00:25  11  FROM q15
00:00:25  12  /

Table created.

Elapsed: 00:00:00.18
00:00:25 SQL> 
00:00:25 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.29
00:00:25 SQL> 
00:00:25 SQL> -- rpt
00:00:25 SQL> 
00:00:25 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20821

Elapsed: 00:00:00.36
00:00:26 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      19957

Elapsed: 00:00:00.01
00:00:26 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      19957

Elapsed: 00:00:00.00
00:00:26 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      19957

Elapsed: 00:00:00.01
00:00:26 SQL> 
00:00:26 SQL> SELECT pair,trend,gatt,gattn,AVG(g4),COUNT(g4),CORR(dc12,g4)FROM modsrc
00:00:26   2  GROUP BY pair,trend,gatt,gattn
00:00:26   3  ORDER BY pair,trend,gatt,gattn
00:00:26   4  /

PAIR	     TREND GAT GAT    AVG(G4)  COUNT(G4) CORR(DC12,G4)
------- ---------- --- --- ---------- ---------- -------------
eur_usd 	-1 nup nup -.00001559	    1451    .040431941
eur_usd 	-1 nup up  -.00362281	    4024    .148664094
eur_usd 	-1 up  nup .003624946	    4164    -.20602483
eur_usd 	-1			       0
eur_usd 	 1 nup nup .000014474	    1741     .03725399
eur_usd 	 1 nup up  -.00342209	    4203     .11794192
eur_usd 	 1 up  nup .003717447	    4326    -.14406462
eur_usd 	 1			       0

8 rows selected.

Elapsed: 00:00:00.02
00:00:26 SQL> 
00:00:26 SQL> DROP   TABLE eur_ms10 ;

Table dropped.

Elapsed: 00:00:00.04
00:00:26 SQL> CREATE TABLE eur_ms10 COMPRESS AS
00:00:26   2  SELECT
00:00:26   3  ydate
00:00:26   4  ,trend eur_trend
00:00:26   5  ,g4    eur_g4
00:00:26   6  ,gatt  eur_gatt
00:00:26   7  ,gattn eur_gattn
00:00:26   8  FROM modsrc
00:00:26   9  /

Table created.

Elapsed: 00:00:00.07
00:00:26 SQL> 
00:00:26 SQL> ANALYZE TABLE eur_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.23
00:00:26 SQL> 
00:00:26 SQL> -- rpt
00:00:26 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g4),MIN(g4),MAX(g4)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G4)	 MIN(G4)    MAX(G4)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-12 23:25:01 2010-12-16 23:40:00	10270	  -.0153      .0165
	-1 2010-09-12 23:05:01 2010-12-16 23:50:00	 9639	  -.0164      .0167

Elapsed: 00:00:00.02
00:00:26 SQL> SELECT eur_trend,MIN(ydate),MAX(ydate),COUNT(eur_trend),MIN(eur_g4),MAX(eur_g4)FROM eur_ms10 GROUP BY eur_trend;

 EUR_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(EUR_TREND) MIN(EUR_G4) MAX(EUR_G4)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-12 23:25:01 2010-12-16 23:40:00	      10289	 -.0153       .0165
	-1 2010-09-12 23:05:01 2010-12-16 23:50:00	       9668	 -.0164       .0167

Elapsed: 00:00:00.01
00:00:26 SQL> 
00:00:26 SQL> -- I need a copy of q15 attributes
00:00:26 SQL> 
00:00:26 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.04
00:00:26 SQL> CREATE TABLE eur_att COMPRESS AS
00:00:26   2  SELECT
00:00:26   3  ydate
00:00:26   4  ,att00 eur_att00
00:00:26   5  ,att01 eur_att01
00:00:26   6  ,att02 eur_att02
00:00:26   7  ,att03 eur_att03
00:00:26   8  ,att04 eur_att04
00:00:26   9  ,att05 eur_att05
00:00:26  10  ,att06 eur_att06
00:00:26  11  ,att07 eur_att07
00:00:26  12  ,att08 eur_att08
00:00:26  13  ,att09 eur_att09
00:00:26  14  ,att10 eur_att10
00:00:26  15  ,att11 eur_att11
00:00:26  16  ,att12 eur_att12
00:00:26  17  ,att13 eur_att13
00:00:26  18  ,att14 eur_att14
00:00:26  19  ,att15 eur_att15
00:00:26  20  ,att16 eur_att16
00:00:26  21  ,att17 eur_att17
00:00:26  22  ,att18 eur_att18
00:00:26  23  ,att19 eur_att19
00:00:26  24  ,att20 eur_att20
00:00:26  25  ,att21 eur_att21
00:00:26  26  ,att22 eur_att22
00:00:26  27  ,att23 eur_att23
00:00:26  28  ,att24 eur_att24
00:00:26  29  ,att25 eur_att25
00:00:26  30  ,att26 eur_att26
00:00:26  31  ,att27 eur_att27
00:00:26  32  ,att28 eur_att28
00:00:26  33  ,att29 eur_att29
00:00:26  34  ,att30 eur_att30
00:00:26  35  ,att31 eur_att31
00:00:26  36  ,att32 eur_att32
00:00:26  37  FROM q15
00:00:26  38  /

Table created.

Elapsed: 00:00:00.23
00:00:26 SQL> 
00:00:26 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.51
00:00:27 SQL> 
00:00:27 SQL> -- rpt
00:00:27 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     19957

Elapsed: 00:00:00.01
00:00:27 SQL> 
00:00:27 SQL> --
00:00:27 SQL> -- aud10.sql
00:00:27 SQL> --
00:00:27 SQL> 
00:00:27 SQL> -- Creates views and tables for backtesting a forex SVM strategy
00:00:27 SQL> 
00:00:27 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.32
00:00:27 SQL> 
00:00:27 SQL> -- I created di5min here:
00:00:27 SQL> -- /pt/s/rlk/svm4hp/update_di5min.sql
00:00:27 SQL> 
00:00:27 SQL> CREATE OR REPLACE VIEW q11 AS
00:00:27   2  SELECT
00:00:27   3  pair
00:00:27   4  ,ydate
00:00:27   5  ,prdate
00:00:27   6  ,rownum rnum -- acts as t in my time-series
00:00:27   7  ,clse
00:00:27   8  ,LAG(clse,12*1,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg1
00:00:27   9  ,LAG(clse,12*2,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg2
00:00:27  10  ,LAG(clse,12*3,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg3
00:00:27  11  ,LAG(clse,12*4,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg4
00:00:27  12  ,LAG(clse,12*5,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg5
00:00:27  13  ,LAG(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg6
00:00:27  14  ,LAG(clse,12*7,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg7
00:00:27  15  ,LAG(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg8
00:00:27  16  ,LAG(clse,12*9,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg9
00:00:27  17  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg12
00:00:27  18  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg18
00:00:27  19  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg24
00:00:27  20  ,LAG(clse,12*72,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg72
00:00:27  21  ,LEAD(clse,12*4,NULL)OVER(PARTITION BY pair ORDER BY ydate) ld4
00:00:27  22  FROM di5min WHERE pair LIKE'%aud%'
00:00:27  23  ORDER BY ydate
00:00:27  24  /

View created.

Elapsed: 00:00:00.02
00:00:27 SQL> 
00:00:27 SQL> -- rpt
00:00:27 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
aud_usd        20818

Elapsed: 00:00:00.35
00:00:27 SQL> 
00:00:27 SQL> -- Calc deltas and gains
00:00:27 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.26
00:00:28 SQL> 
00:00:28 SQL> CREATE TABLE q13 COMPRESS AS
00:00:28   2  SELECT
00:00:28   3  pair
00:00:28   4  ,ydate
00:00:28   5  ,prdate
00:00:28   6  ,rnum
00:00:28   7  ,lg4
00:00:28   8  ,lg8
00:00:28   9  ,lg12
00:00:28  10  ,ld4
00:00:28  11  ,CASE WHEN(clse-lg12)>0 then 1 ELSE -1 END trend
00:00:28  12  -- step by 1
00:00:28  13  ,clse-lg1 d01
00:00:28  14  ,lg1-lg2	d12
00:00:28  15  ,lg2-lg3	d23
00:00:28  16  ,lg3-lg4	d34
00:00:28  17  ,lg4-lg5	d45
00:00:28  18  ,lg5-lg6	d56
00:00:28  19  ,lg6-lg7	d67
00:00:28  20  ,lg7-lg8	d78
00:00:28  21  ,lg8-lg9	d89
00:00:28  22  -- step by 2
00:00:28  23  ,clse-lg2 d02
00:00:28  24  ,lg2-lg4 d24
00:00:28  25  ,lg4-lg6 d46
00:00:28  26  ,lg6-lg8 d68
00:00:28  27  -- step by 3
00:00:28  28  ,clse-lg3 d03
00:00:28  29  ,lg3-lg6	d36
00:00:28  30  ,lg6-lg9	d69
00:00:28  31  ,lg9-lg12 d912
00:00:28  32  -- step by 4
00:00:28  33  ,clse-lg4 d04
00:00:28  34  ,lg4-lg8	d48
00:00:28  35  ,lg8-lg12 d812
00:00:28  36  ,lg6-lg12 d612
00:00:28  37  ,lg12-lg18 d1218
00:00:28  38  --
00:00:28  39  ,ABS(clse-lg1)dc1
00:00:28  40  ,ABS(clse-lg2)dc2
00:00:28  41  ,ABS(clse-lg3)dc3
00:00:28  42  ,ABS(clse-lg4)dc4
00:00:28  43  ,ABS(clse-lg5)dc5
00:00:28  44  ,ABS(clse-lg6)dc6
00:00:28  45  ,ABS(clse-lg7)dc7
00:00:28  46  ,ABS(clse-lg8)dc8
00:00:28  47  ,ABS(clse-lg9)dc9
00:00:28  48  ,ABS(clse-lg12)dc12
00:00:28  49  ,ABS(clse-lg18)dc18
00:00:28  50  ,ABS(clse-lg24)dc24
00:00:28  51  ,ABS(clse-lg72)dc72
00:00:28  52  ,(ld4-clse) ug4
00:00:28  53  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*2  PRECEDING AND CURRENT ROW)crr2
00:00:28  54  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*3  PRECEDING AND CURRENT ROW)crr3
00:00:28  55  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
00:00:28  56  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*5  PRECEDING AND CURRENT ROW)crr5
00:00:28  57  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
00:00:28  58  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*7  PRECEDING AND CURRENT ROW)crr7
00:00:28  59  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
00:00:28  60  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*9  PRECEDING AND CURRENT ROW)crr9
00:00:28  61  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
00:00:28  62  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
00:00:28  63  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*72 PRECEDING AND CURRENT ROW)crr72
00:00:28  64  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
00:00:28  65  ,0+TO_CHAR(ydate,'D')d
00:00:28  66  ,0+TO_CHAR(ydate,'W')w
00:00:28  67  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
00:00:28  68  FROM q11
00:00:28  69  -- I dont want any NULL values from the LAG() functions:
00:00:28  70  WHERE lg72 > 0
00:00:28  71  ORDER BY pair,ydate
00:00:28  72  /

Table created.

Elapsed: 00:00:01.74
00:00:29 SQL> 
00:00:29 SQL> -- rpt
00:00:29 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	   10454
	-1	    9500

Elapsed: 00:00:00.20
00:00:30 SQL> 
00:00:30 SQL> -- Calc gains and ntiles
00:00:30 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.30
00:00:30 SQL> CREATE TABLE q15 COMPRESS AS
00:00:30   2  SELECT
00:00:30   3  pair
00:00:30   4  ,ydate
00:00:30   5  ,prdate -- Should be unique
00:00:30   6  ,trend -- +1 or -1
00:00:30   7  ,dc12 -- next statement needs this
00:00:30   8  -- Use NTILE() to derive some attributes
00:00:30   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d12))		 att00
00:00:30  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d23))		 att01
00:00:30  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d34))		 att02
00:00:30  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d45))		 att03
00:00:30  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d56))		 att04
00:00:30  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d67))		 att05
00:00:30  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d78))		 att06
00:00:30  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d89))		 att07
00:00:30  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d912)) 	 att08
00:00:30  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc2)		 att09
00:00:30  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc3)		 att10
00:00:30  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc4)		 att11
00:00:30  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc5)		 att12
00:00:30  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6)		 att13
00:00:30  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc7)		 att14
00:00:30  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8)		 att15
00:00:30  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc9)		 att16
00:00:30  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att17
00:00:30  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc24)		 att18
00:00:30  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc72)		 att19
00:00:30  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr2,7))) att20
00:00:30  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr3,7))) att21
00:00:30  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr4,7))) att22
00:00:30  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr5,7))) att23
00:00:30  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6,7))) att24
00:00:30  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att25
00:00:30  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att26
00:00:30  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr72,7)))att27
00:00:30  37  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
00:00:30  38  ,hh    att28
00:00:30  39  ,d     att29
00:00:30  40  ,w     att30
00:00:30  41  ,mpm   att31
00:00:30  42  ,trend att32
00:00:30  43  ,ug4 g4
00:00:30  44  ,CASE WHEN ug4 IS NULL THEN NULL WHEN ug4 > 0.0006 THEN 'up' ELSE 'nup' END gatt
00:00:30  45  ,CASE WHEN ug4 IS NULL THEN NULL WHEN ug4< -0.0006 THEN 'up' ELSE 'nup' END gattn
00:00:30  46  FROM q13
00:00:30  47  ORDER BY pair,ydate
00:00:30  48  /

Table created.

Elapsed: 00:00:04.10
00:00:34 SQL> 
00:00:34 SQL> -- rpt
00:00:34 SQL> SELECT pair,trend,gatt,gattn,AVG(g4),COUNT(g4),CORR(dc12,g4)FROM q15
00:00:34   2  GROUP BY pair,trend,gatt,gattn
00:00:34   3  ORDER BY pair,trend,gatt,gattn
00:00:34   4  /

PAIR	     TREND GAT GAT    AVG(G4)  COUNT(G4) CORR(DC12,G4)
------- ---------- --- --- ---------- ---------- -------------
aud_usd 	-1 nup nup .000032531	    1537    -.04095214
aud_usd 	-1 nup up  -.00318952	    3595    .000866359
aud_usd 	-1 up  nup .002977892	    4357    .026303793
aud_usd 	-1			       0
aud_usd 	 1 nup nup 2.2949E-06	    1950    .023122877
aud_usd 	 1 nup up   -.0028891	    4057    .054230128
aud_usd 	 1 up  nup  .00294017	    4410    -.17793968
aud_usd 	 1			       0

8 rows selected.

Elapsed: 00:00:00.07
00:00:34 SQL> 
00:00:34 SQL> -- rpt
00:00:34 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
aud_usd 2010-12-16 23:50:00

Elapsed: 00:00:00.01
00:00:34 SQL> 
00:00:34 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.27
00:00:34 SQL> CREATE TABLE modsrc COMPRESS AS
00:00:34   2  SELECT
00:00:34   3  pair
00:00:34   4  ,ydate
00:00:34   5  ,prdate
00:00:34   6  ,trend
00:00:34   7  ,g4
00:00:34   8  ,gatt
00:00:34   9  ,gattn
00:00:34  10  ,dc12
00:00:34  11  FROM q15
00:00:34  12  /

Table created.

Elapsed: 00:00:00.15
00:00:35 SQL> 
00:00:35 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.30
00:00:35 SQL> 
00:00:35 SQL> -- rpt
00:00:35 SQL> 
00:00:35 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20818

Elapsed: 00:00:00.37
00:00:35 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      19954

Elapsed: 00:00:00.01
00:00:35 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      19954

Elapsed: 00:00:00.00
00:00:35 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      19954

Elapsed: 00:00:00.01
00:00:35 SQL> 
00:00:35 SQL> SELECT pair,trend,gatt,gattn,AVG(g4),COUNT(g4),CORR(dc12,g4)FROM modsrc
00:00:35   2  GROUP BY pair,trend,gatt,gattn
00:00:35   3  ORDER BY pair,trend,gatt,gattn
00:00:35   4  /

PAIR	     TREND GAT GAT    AVG(G4)  COUNT(G4) CORR(DC12,G4)
------- ---------- --- --- ---------- ---------- -------------
aud_usd 	-1 nup nup .000032531	    1537    -.04095214
aud_usd 	-1 nup up  -.00318952	    3595    .000866359
aud_usd 	-1 up  nup .002977892	    4357    .026303793
aud_usd 	-1			       0
aud_usd 	 1 nup nup 2.2949E-06	    1950    .023122877
aud_usd 	 1 nup up   -.0028891	    4057    .054230128
aud_usd 	 1 up  nup  .00294017	    4410    -.17793968
aud_usd 	 1			       0

8 rows selected.

Elapsed: 00:00:00.02
00:00:35 SQL> 
00:00:35 SQL> DROP   TABLE aud_ms10 ;

Table dropped.

Elapsed: 00:00:00.05
00:00:35 SQL> CREATE TABLE aud_ms10 COMPRESS AS
00:00:35   2  SELECT
00:00:35   3  ydate
00:00:35   4  ,trend aud_trend
00:00:35   5  ,g4    aud_g4
00:00:35   6  ,gatt  aud_gatt
00:00:35   7  ,gattn aud_gattn
00:00:35   8  FROM modsrc
00:00:35   9  /

Table created.

Elapsed: 00:00:00.09
00:00:35 SQL> 
00:00:35 SQL> ANALYZE TABLE aud_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
00:00:36 SQL> 
00:00:36 SQL> -- rpt
00:00:36 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g4),MIN(g4),MAX(g4)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G4)	 MIN(G4)    MAX(G4)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-12 23:05:01 2010-12-16 23:50:00	10417	  -.0162    .010925
	-1 2010-09-14 00:35:01 2010-12-16 21:20:00	 9489	   -.017      .0131

Elapsed: 00:00:00.02
00:00:36 SQL> SELECT aud_trend,MIN(ydate),MAX(ydate),COUNT(aud_trend),MIN(aud_g4),MAX(aud_g4)FROM aud_ms10 GROUP BY aud_trend;

 AUD_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(AUD_TREND) MIN(AUD_G4) MAX(AUD_G4)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-12 23:05:01 2010-12-16 23:50:00	      10454	 -.0162     .010925
	-1 2010-09-14 00:35:01 2010-12-16 21:20:00	       9500	  -.017       .0131

Elapsed: 00:00:00.02
00:00:36 SQL> 
00:00:36 SQL> -- I need a copy of q15 attributes
00:00:36 SQL> 
00:00:36 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.03
00:00:36 SQL> CREATE TABLE aud_att COMPRESS AS
00:00:36   2  SELECT
00:00:36   3  ydate
00:00:36   4  ,att00 aud_att00
00:00:36   5  ,att01 aud_att01
00:00:36   6  ,att02 aud_att02
00:00:36   7  ,att03 aud_att03
00:00:36   8  ,att04 aud_att04
00:00:36   9  ,att05 aud_att05
00:00:36  10  ,att06 aud_att06
00:00:36  11  ,att07 aud_att07
00:00:36  12  ,att08 aud_att08
00:00:36  13  ,att09 aud_att09
00:00:36  14  ,att10 aud_att10
00:00:36  15  ,att11 aud_att11
00:00:36  16  ,att12 aud_att12
00:00:36  17  ,att13 aud_att13
00:00:36  18  ,att14 aud_att14
00:00:36  19  ,att15 aud_att15
00:00:36  20  ,att16 aud_att16
00:00:36  21  ,att17 aud_att17
00:00:36  22  ,att18 aud_att18
00:00:36  23  ,att19 aud_att19
00:00:36  24  ,att20 aud_att20
00:00:36  25  ,att21 aud_att21
00:00:36  26  ,att22 aud_att22
00:00:36  27  ,att23 aud_att23
00:00:36  28  ,att24 aud_att24
00:00:36  29  ,att25 aud_att25
00:00:36  30  ,att26 aud_att26
00:00:36  31  ,att27 aud_att27
00:00:36  32  ,att28 aud_att28
00:00:36  33  ,att29 aud_att29
00:00:36  34  ,att30 aud_att30
00:00:36  35  ,att31 aud_att31
00:00:36  36  ,att32 aud_att32
00:00:36  37  FROM q15
00:00:36  38  /

Table created.

Elapsed: 00:00:00.18
00:00:36 SQL> 
00:00:36 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.48
00:00:36 SQL> 
00:00:36 SQL> -- rpt
00:00:36 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     19954

Elapsed: 00:00:00.01
00:00:36 SQL> 
00:00:36 SQL> --
00:00:36 SQL> -- gbp10.sql
00:00:36 SQL> --
00:00:36 SQL> 
00:00:36 SQL> -- Creates views and tables for backtesting a forex SVM strategy
00:00:36 SQL> 
00:00:36 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.31
00:00:37 SQL> 
00:00:37 SQL> -- I created di5min here:
00:00:37 SQL> -- /pt/s/rlk/svm4hp/update_di5min.sql
00:00:37 SQL> 
00:00:37 SQL> CREATE OR REPLACE VIEW q11 AS
00:00:37   2  SELECT
00:00:37   3  pair
00:00:37   4  ,ydate
00:00:37   5  ,prdate
00:00:37   6  ,rownum rnum -- acts as t in my time-series
00:00:37   7  ,clse
00:00:37   8  ,LAG(clse,12*1,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg1
00:00:37   9  ,LAG(clse,12*2,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg2
00:00:37  10  ,LAG(clse,12*3,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg3
00:00:37  11  ,LAG(clse,12*4,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg4
00:00:37  12  ,LAG(clse,12*5,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg5
00:00:37  13  ,LAG(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg6
00:00:37  14  ,LAG(clse,12*7,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg7
00:00:37  15  ,LAG(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg8
00:00:37  16  ,LAG(clse,12*9,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg9
00:00:37  17  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg12
00:00:37  18  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg18
00:00:37  19  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg24
00:00:37  20  ,LAG(clse,12*72,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg72
00:00:37  21  ,LEAD(clse,12*4,NULL)OVER(PARTITION BY pair ORDER BY ydate) ld4
00:00:37  22  FROM di5min WHERE pair LIKE'%gbp%'
00:00:37  23  ORDER BY ydate
00:00:37  24  /

View created.

Elapsed: 00:00:00.05
00:00:37 SQL> 
00:00:37 SQL> -- rpt
00:00:37 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
gbp_usd        20820

Elapsed: 00:00:00.36
00:00:37 SQL> 
00:00:37 SQL> -- Calc deltas and gains
00:00:37 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.23
00:00:37 SQL> 
00:00:37 SQL> CREATE TABLE q13 COMPRESS AS
00:00:37   2  SELECT
00:00:37   3  pair
00:00:37   4  ,ydate
00:00:37   5  ,prdate
00:00:37   6  ,rnum
00:00:37   7  ,lg4
00:00:37   8  ,lg8
00:00:37   9  ,lg12
00:00:37  10  ,ld4
00:00:37  11  ,CASE WHEN(clse-lg12)>0 then 1 ELSE -1 END trend
00:00:37  12  -- step by 1
00:00:37  13  ,clse-lg1 d01
00:00:37  14  ,lg1-lg2	d12
00:00:37  15  ,lg2-lg3	d23
00:00:37  16  ,lg3-lg4	d34
00:00:37  17  ,lg4-lg5	d45
00:00:37  18  ,lg5-lg6	d56
00:00:37  19  ,lg6-lg7	d67
00:00:37  20  ,lg7-lg8	d78
00:00:37  21  ,lg8-lg9	d89
00:00:37  22  -- step by 2
00:00:37  23  ,clse-lg2 d02
00:00:37  24  ,lg2-lg4 d24
00:00:37  25  ,lg4-lg6 d46
00:00:37  26  ,lg6-lg8 d68
00:00:37  27  -- step by 3
00:00:37  28  ,clse-lg3 d03
00:00:37  29  ,lg3-lg6	d36
00:00:37  30  ,lg6-lg9	d69
00:00:37  31  ,lg9-lg12 d912
00:00:37  32  -- step by 4
00:00:37  33  ,clse-lg4 d04
00:00:37  34  ,lg4-lg8	d48
00:00:37  35  ,lg8-lg12 d812
00:00:37  36  ,lg6-lg12 d612
00:00:37  37  ,lg12-lg18 d1218
00:00:37  38  --
00:00:37  39  ,ABS(clse-lg1)dc1
00:00:37  40  ,ABS(clse-lg2)dc2
00:00:37  41  ,ABS(clse-lg3)dc3
00:00:37  42  ,ABS(clse-lg4)dc4
00:00:37  43  ,ABS(clse-lg5)dc5
00:00:37  44  ,ABS(clse-lg6)dc6
00:00:37  45  ,ABS(clse-lg7)dc7
00:00:37  46  ,ABS(clse-lg8)dc8
00:00:37  47  ,ABS(clse-lg9)dc9
00:00:37  48  ,ABS(clse-lg12)dc12
00:00:37  49  ,ABS(clse-lg18)dc18
00:00:37  50  ,ABS(clse-lg24)dc24
00:00:37  51  ,ABS(clse-lg72)dc72
00:00:37  52  ,(ld4-clse) ug4
00:00:37  53  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*2  PRECEDING AND CURRENT ROW)crr2
00:00:37  54  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*3  PRECEDING AND CURRENT ROW)crr3
00:00:37  55  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
00:00:37  56  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*5  PRECEDING AND CURRENT ROW)crr5
00:00:37  57  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
00:00:37  58  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*7  PRECEDING AND CURRENT ROW)crr7
00:00:37  59  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
00:00:37  60  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*9  PRECEDING AND CURRENT ROW)crr9
00:00:37  61  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
00:00:37  62  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
00:00:37  63  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*72 PRECEDING AND CURRENT ROW)crr72
00:00:37  64  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
00:00:37  65  ,0+TO_CHAR(ydate,'D')d
00:00:37  66  ,0+TO_CHAR(ydate,'W')w
00:00:37  67  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
00:00:37  68  FROM q11
00:00:37  69  -- I dont want any NULL values from the LAG() functions:
00:00:37  70  WHERE lg72 > 0
00:00:37  71  ORDER BY pair,ydate
00:00:37  72  /

Table created.

Elapsed: 00:00:01.76
00:00:39 SQL> 
00:00:39 SQL> -- rpt
00:00:39 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    9745
	-1	   10211

Elapsed: 00:00:00.13
00:00:39 SQL> 
00:00:39 SQL> -- Calc gains and ntiles
00:00:39 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.13
00:00:39 SQL> CREATE TABLE q15 COMPRESS AS
00:00:39   2  SELECT
00:00:39   3  pair
00:00:39   4  ,ydate
00:00:39   5  ,prdate -- Should be unique
00:00:39   6  ,trend -- +1 or -1
00:00:39   7  ,dc12 -- next statement needs this
00:00:39   8  -- Use NTILE() to derive some attributes
00:00:39   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d12))		 att00
00:00:39  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d23))		 att01
00:00:39  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d34))		 att02
00:00:39  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d45))		 att03
00:00:39  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d56))		 att04
00:00:39  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d67))		 att05
00:00:39  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d78))		 att06
00:00:39  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d89))		 att07
00:00:39  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d912)) 	 att08
00:00:39  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc2)		 att09
00:00:39  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc3)		 att10
00:00:39  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc4)		 att11
00:00:39  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc5)		 att12
00:00:39  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6)		 att13
00:00:39  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc7)		 att14
00:00:39  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8)		 att15
00:00:39  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc9)		 att16
00:00:39  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att17
00:00:39  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc24)		 att18
00:00:39  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc72)		 att19
00:00:39  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr2,7))) att20
00:00:39  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr3,7))) att21
00:00:39  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr4,7))) att22
00:00:39  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr5,7))) att23
00:00:39  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6,7))) att24
00:00:39  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att25
00:00:39  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att26
00:00:39  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr72,7)))att27
00:00:39  37  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
00:00:39  38  ,hh    att28
00:00:39  39  ,d     att29
00:00:39  40  ,w     att30
00:00:39  41  ,mpm   att31
00:00:39  42  ,trend att32
00:00:39  43  ,ug4 g4
00:00:39  44  ,CASE WHEN ug4 IS NULL THEN NULL WHEN ug4 > 0.0006 THEN 'up' ELSE 'nup' END gatt
00:00:39  45  ,CASE WHEN ug4 IS NULL THEN NULL WHEN ug4< -0.0006 THEN 'up' ELSE 'nup' END gattn
00:00:39  46  FROM q13
00:00:39  47  ORDER BY pair,ydate
00:00:39  48  /

Table created.

Elapsed: 00:00:04.19
00:00:44 SQL> 
00:00:44 SQL> -- rpt
00:00:44 SQL> SELECT pair,trend,gatt,gattn,AVG(g4),COUNT(g4),CORR(dc12,g4)FROM q15
00:00:44   2  GROUP BY pair,trend,gatt,gattn
00:00:44   3  ORDER BY pair,trend,gatt,gattn
00:00:44   4  /

PAIR	     TREND GAT GAT    AVG(G4)  COUNT(G4) CORR(DC12,G4)
------- ---------- --- --- ---------- ---------- -------------
gbp_usd 	-1 nup nup -5.246E-07	    1811    .059906803
gbp_usd 	-1 nup up  -.00327618	    4038    -.01089499
gbp_usd 	-1 up  nup .003107588	    4362    -.09381616
gbp_usd 	 1 nup nup .000010662	    1625    .015390196
gbp_usd 	 1 nup up  -.00321854	    4133    -.00827244
gbp_usd 	 1 up  nup .003571865	    3939    -.16596946
gbp_usd 	 1			       0

7 rows selected.

Elapsed: 00:00:00.04
00:00:44 SQL> 
00:00:44 SQL> -- rpt
00:00:44 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
gbp_usd 2010-12-16 23:50:00

Elapsed: 00:00:00.01
00:00:44 SQL> 
00:00:44 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
00:00:44 SQL> CREATE TABLE modsrc COMPRESS AS
00:00:44   2  SELECT
00:00:44   3  pair
00:00:44   4  ,ydate
00:00:44   5  ,prdate
00:00:44   6  ,trend
00:00:44   7  ,g4
00:00:44   8  ,gatt
00:00:44   9  ,gattn
00:00:44  10  ,dc12
00:00:44  11  FROM q15
00:00:44  12  /

Table created.

Elapsed: 00:00:00.08
00:00:44 SQL> 
00:00:44 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
00:00:44 SQL> 
00:00:44 SQL> -- rpt
00:00:44 SQL> 
00:00:44 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20820

Elapsed: 00:00:00.40
00:00:44 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      19956

Elapsed: 00:00:00.01
00:00:44 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      19956

Elapsed: 00:00:00.01
00:00:44 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      19956

Elapsed: 00:00:00.00
00:00:44 SQL> 
00:00:44 SQL> SELECT pair,trend,gatt,gattn,AVG(g4),COUNT(g4),CORR(dc12,g4)FROM modsrc
00:00:44   2  GROUP BY pair,trend,gatt,gattn
00:00:44   3  ORDER BY pair,trend,gatt,gattn
00:00:44   4  /

PAIR	     TREND GAT GAT    AVG(G4)  COUNT(G4) CORR(DC12,G4)
------- ---------- --- --- ---------- ---------- -------------
gbp_usd 	-1 nup nup -5.246E-07	    1811    .059906803
gbp_usd 	-1 nup up  -.00327618	    4038    -.01089499
gbp_usd 	-1 up  nup .003107588	    4362    -.09381616
gbp_usd 	 1 nup nup .000010662	    1625    .015390196
gbp_usd 	 1 nup up  -.00321854	    4133    -.00827244
gbp_usd 	 1 up  nup .003571865	    3939    -.16596946
gbp_usd 	 1			       0

7 rows selected.

Elapsed: 00:00:00.02
00:00:44 SQL> 
00:00:44 SQL> DROP   TABLE gbp_ms10 ;

Table dropped.

Elapsed: 00:00:00.04
00:00:44 SQL> CREATE TABLE gbp_ms10 COMPRESS AS
00:00:44   2  SELECT
00:00:44   3  ydate
00:00:44   4  ,trend gbp_trend
00:00:44   5  ,g4    gbp_g4
00:00:44   6  ,gatt  gbp_gatt
00:00:44   7  ,gattn gbp_gattn
00:00:44   8  FROM modsrc
00:00:44   9  /

Table created.

Elapsed: 00:00:00.07
00:00:45 SQL> 
00:00:45 SQL> ANALYZE TABLE gbp_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
00:00:45 SQL> 
00:00:45 SQL> -- rpt
00:00:45 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g4),MIN(g4),MAX(g4)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G4)	 MIN(G4)    MAX(G4)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-13 00:05:01 2010-12-16 23:50:00	 9697	  -.0194      .0179
	-1 2010-09-12 23:05:01 2010-12-16 07:30:00	10211	  -.0153      .0159

Elapsed: 00:00:00.02
00:00:45 SQL> SELECT gbp_trend,MIN(ydate),MAX(ydate),COUNT(gbp_trend),MIN(gbp_g4),MAX(gbp_g4)FROM gbp_ms10 GROUP BY gbp_trend;

 GBP_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(GBP_TREND) MIN(GBP_G4) MAX(GBP_G4)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-13 00:05:01 2010-12-16 23:50:00	       9745	 -.0194       .0179
	-1 2010-09-12 23:05:01 2010-12-16 07:30:00	      10211	 -.0153       .0159

Elapsed: 00:00:00.01
00:00:45 SQL> 
00:00:45 SQL> -- I need a copy of q15 attributes
00:00:45 SQL> 
00:00:45 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.05
00:00:45 SQL> CREATE TABLE gbp_att COMPRESS AS
00:00:45   2  SELECT
00:00:45   3  ydate
00:00:45   4  ,att00 gbp_att00
00:00:45   5  ,att01 gbp_att01
00:00:45   6  ,att02 gbp_att02
00:00:45   7  ,att03 gbp_att03
00:00:45   8  ,att04 gbp_att04
00:00:45   9  ,att05 gbp_att05
00:00:45  10  ,att06 gbp_att06
00:00:45  11  ,att07 gbp_att07
00:00:45  12  ,att08 gbp_att08
00:00:45  13  ,att09 gbp_att09
00:00:45  14  ,att10 gbp_att10
00:00:45  15  ,att11 gbp_att11
00:00:45  16  ,att12 gbp_att12
00:00:45  17  ,att13 gbp_att13
00:00:45  18  ,att14 gbp_att14
00:00:45  19  ,att15 gbp_att15
00:00:45  20  ,att16 gbp_att16
00:00:45  21  ,att17 gbp_att17
00:00:45  22  ,att18 gbp_att18
00:00:45  23  ,att19 gbp_att19
00:00:45  24  ,att20 gbp_att20
00:00:45  25  ,att21 gbp_att21
00:00:45  26  ,att22 gbp_att22
00:00:45  27  ,att23 gbp_att23
00:00:45  28  ,att24 gbp_att24
00:00:45  29  ,att25 gbp_att25
00:00:45  30  ,att26 gbp_att26
00:00:45  31  ,att27 gbp_att27
00:00:45  32  ,att28 gbp_att28
00:00:45  33  ,att29 gbp_att29
00:00:45  34  ,att30 gbp_att30
00:00:45  35  ,att31 gbp_att31
00:00:45  36  ,att32 gbp_att32
00:00:45  37  FROM q15
00:00:45  38  /

Table created.

Elapsed: 00:00:00.13
00:00:45 SQL> 
00:00:45 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.40
00:00:45 SQL> 
00:00:45 SQL> -- rpt
00:00:45 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     19956

Elapsed: 00:00:00.01
00:00:45 SQL> 
00:00:45 SQL> --
00:00:45 SQL> -- jpy10.sql
00:00:45 SQL> --
00:00:45 SQL> 
00:00:45 SQL> -- Creates views and tables for backtesting a forex SVM strategy
00:00:45 SQL> 
00:00:45 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.29
00:00:46 SQL> 
00:00:46 SQL> -- I created di5min here:
00:00:46 SQL> -- /pt/s/rlk/svm4hp/update_di5min.sql
00:00:46 SQL> 
00:00:46 SQL> CREATE OR REPLACE VIEW q11 AS
00:00:46   2  SELECT
00:00:46   3  pair
00:00:46   4  ,ydate
00:00:46   5  ,prdate
00:00:46   6  ,rownum rnum -- acts as t in my time-series
00:00:46   7  ,clse
00:00:46   8  ,LAG(clse,12*1,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg1
00:00:46   9  ,LAG(clse,12*2,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg2
00:00:46  10  ,LAG(clse,12*3,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg3
00:00:46  11  ,LAG(clse,12*4,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg4
00:00:46  12  ,LAG(clse,12*5,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg5
00:00:46  13  ,LAG(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg6
00:00:46  14  ,LAG(clse,12*7,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg7
00:00:46  15  ,LAG(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg8
00:00:46  16  ,LAG(clse,12*9,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg9
00:00:46  17  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg12
00:00:46  18  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg18
00:00:46  19  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg24
00:00:46  20  ,LAG(clse,12*72,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg72
00:00:46  21  ,LEAD(clse,12*4,NULL)OVER(PARTITION BY pair ORDER BY ydate) ld4
00:00:46  22  FROM di5min WHERE pair LIKE'%jpy%'
00:00:46  23  ORDER BY ydate
00:00:46  24  /

View created.

Elapsed: 00:00:00.06
00:00:46 SQL> 
00:00:46 SQL> -- rpt
00:00:46 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
usd_jpy        20821

Elapsed: 00:00:00.38
00:00:46 SQL> 
00:00:46 SQL> -- Calc deltas and gains
00:00:46 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.25
00:00:46 SQL> 
00:00:46 SQL> CREATE TABLE q13 COMPRESS AS
00:00:46   2  SELECT
00:00:46   3  pair
00:00:46   4  ,ydate
00:00:46   5  ,prdate
00:00:46   6  ,rnum
00:00:46   7  ,lg4
00:00:46   8  ,lg8
00:00:46   9  ,lg12
00:00:46  10  ,ld4
00:00:46  11  ,CASE WHEN(clse-lg12)>0 then 1 ELSE -1 END trend
00:00:46  12  -- step by 1
00:00:46  13  ,clse-lg1 d01
00:00:46  14  ,lg1-lg2	d12
00:00:46  15  ,lg2-lg3	d23
00:00:46  16  ,lg3-lg4	d34
00:00:46  17  ,lg4-lg5	d45
00:00:46  18  ,lg5-lg6	d56
00:00:46  19  ,lg6-lg7	d67
00:00:46  20  ,lg7-lg8	d78
00:00:46  21  ,lg8-lg9	d89
00:00:46  22  -- step by 2
00:00:46  23  ,clse-lg2 d02
00:00:46  24  ,lg2-lg4 d24
00:00:46  25  ,lg4-lg6 d46
00:00:46  26  ,lg6-lg8 d68
00:00:46  27  -- step by 3
00:00:46  28  ,clse-lg3 d03
00:00:46  29  ,lg3-lg6	d36
00:00:46  30  ,lg6-lg9	d69
00:00:46  31  ,lg9-lg12 d912
00:00:46  32  -- step by 4
00:00:46  33  ,clse-lg4 d04
00:00:46  34  ,lg4-lg8	d48
00:00:46  35  ,lg8-lg12 d812
00:00:46  36  ,lg6-lg12 d612
00:00:46  37  ,lg12-lg18 d1218
00:00:46  38  --
00:00:46  39  ,ABS(clse-lg1)dc1
00:00:46  40  ,ABS(clse-lg2)dc2
00:00:46  41  ,ABS(clse-lg3)dc3
00:00:46  42  ,ABS(clse-lg4)dc4
00:00:46  43  ,ABS(clse-lg5)dc5
00:00:46  44  ,ABS(clse-lg6)dc6
00:00:46  45  ,ABS(clse-lg7)dc7
00:00:46  46  ,ABS(clse-lg8)dc8
00:00:46  47  ,ABS(clse-lg9)dc9
00:00:46  48  ,ABS(clse-lg12)dc12
00:00:46  49  ,ABS(clse-lg18)dc18
00:00:46  50  ,ABS(clse-lg24)dc24
00:00:46  51  ,ABS(clse-lg72)dc72
00:00:46  52  ,(ld4-clse) ug4
00:00:46  53  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*2  PRECEDING AND CURRENT ROW)crr2
00:00:46  54  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*3  PRECEDING AND CURRENT ROW)crr3
00:00:46  55  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
00:00:46  56  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*5  PRECEDING AND CURRENT ROW)crr5
00:00:46  57  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
00:00:46  58  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*7  PRECEDING AND CURRENT ROW)crr7
00:00:46  59  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
00:00:46  60  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*9  PRECEDING AND CURRENT ROW)crr9
00:00:46  61  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
00:00:46  62  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
00:00:46  63  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*72 PRECEDING AND CURRENT ROW)crr72
00:00:46  64  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
00:00:46  65  ,0+TO_CHAR(ydate,'D')d
00:00:46  66  ,0+TO_CHAR(ydate,'W')w
00:00:46  67  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
00:00:46  68  FROM q11
00:00:46  69  -- I dont want any NULL values from the LAG() functions:
00:00:46  70  WHERE lg72 > 0
00:00:46  71  ORDER BY pair,ydate
00:00:46  72  /

Table created.

Elapsed: 00:00:01.75
00:00:48 SQL> 
00:00:48 SQL> -- rpt
00:00:48 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    9248
	-1	   10709

Elapsed: 00:00:00.03
00:00:48 SQL> 
00:00:48 SQL> -- Calc gains and ntiles
00:00:48 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.13
00:00:48 SQL> CREATE TABLE q15 COMPRESS AS
00:00:48   2  SELECT
00:00:48   3  pair
00:00:48   4  ,ydate
00:00:48   5  ,prdate -- Should be unique
00:00:48   6  ,trend -- +1 or -1
00:00:48   7  ,dc12 -- next statement needs this
00:00:48   8  -- Use NTILE() to derive some attributes
00:00:48   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d12))		 att00
00:00:48  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d23))		 att01
00:00:48  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d34))		 att02
00:00:48  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d45))		 att03
00:00:48  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d56))		 att04
00:00:48  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d67))		 att05
00:00:48  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d78))		 att06
00:00:48  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d89))		 att07
00:00:48  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d912)) 	 att08
00:00:48  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc2)		 att09
00:00:48  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc3)		 att10
00:00:48  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc4)		 att11
00:00:48  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc5)		 att12
00:00:48  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6)		 att13
00:00:48  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc7)		 att14
00:00:48  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8)		 att15
00:00:48  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc9)		 att16
00:00:48  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att17
00:00:48  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc24)		 att18
00:00:48  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc72)		 att19
00:00:48  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr2,7))) att20
00:00:48  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr3,7))) att21
00:00:48  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr4,7))) att22
00:00:48  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr5,7))) att23
00:00:48  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6,7))) att24
00:00:48  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att25
00:00:48  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att26
00:00:48  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr72,7)))att27
00:00:48  37  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
00:00:48  38  ,hh    att28
00:00:48  39  ,d     att29
00:00:48  40  ,w     att30
00:00:48  41  ,mpm   att31
00:00:48  42  ,trend att32
00:00:48  43  ,ug4 g4
00:00:48  44  ,CASE WHEN ug4 IS NULL THEN NULL WHEN ug4 > 0.0006 THEN 'up' ELSE 'nup' END gatt
00:00:48  45  ,CASE WHEN ug4 IS NULL THEN NULL WHEN ug4< -0.0006 THEN 'up' ELSE 'nup' END gattn
00:00:48  46  FROM q13
00:00:48  47  ORDER BY pair,ydate
00:00:48  48  /

Table created.

Elapsed: 00:00:04.45
00:00:53 SQL> 
00:00:53 SQL> -- rpt
00:00:53 SQL> SELECT pair,trend,gatt,gattn,AVG(g4),COUNT(g4),CORR(dc12,g4)FROM q15
00:00:53   2  GROUP BY pair,trend,gatt,gattn
00:00:53   3  ORDER BY pair,trend,gatt,gattn
00:00:53   4  /

PAIR	     TREND GAT GAT    AVG(G4)  COUNT(G4) CORR(DC12,G4)
------- ---------- --- --- ---------- ---------- -------------
usd_jpy 	-1 nup nup	    0	     181
usd_jpy 	-1 nup up  -.13711354	    5201    .023258513
usd_jpy 	-1 up  nup .142687252	    5287    .058730771
usd_jpy 	-1			       0
usd_jpy 	 1 nup nup	    0	     167
usd_jpy 	 1 nup up   -.1343175	    4989     -.0140398
usd_jpy 	 1 up  nup .152379407	    4084    .184257426
usd_jpy 	 1			       0

8 rows selected.

Elapsed: 00:00:00.04
00:00:53 SQL> 
00:00:53 SQL> -- rpt
00:00:53 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
usd_jpy 2010-12-16 23:50:00

Elapsed: 00:00:00.01
00:00:53 SQL> 
00:00:53 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.14
00:00:53 SQL> CREATE TABLE modsrc COMPRESS AS
00:00:53   2  SELECT
00:00:53   3  pair
00:00:53   4  ,ydate
00:00:53   5  ,prdate
00:00:53   6  ,trend
00:00:53   7  ,g4
00:00:53   8  ,gatt
00:00:53   9  ,gattn
00:00:53  10  ,dc12
00:00:53  11  FROM q15
00:00:53  12  /

Table created.

Elapsed: 00:00:00.10
00:00:53 SQL> 
00:00:53 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.22
00:00:53 SQL> 
00:00:53 SQL> -- rpt
00:00:53 SQL> 
00:00:53 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20821

Elapsed: 00:00:00.37
00:00:54 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      19957

Elapsed: 00:00:00.01
00:00:54 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      19957

Elapsed: 00:00:00.00
00:00:54 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      19957

Elapsed: 00:00:00.01
00:00:54 SQL> 
00:00:54 SQL> SELECT pair,trend,gatt,gattn,AVG(g4),COUNT(g4),CORR(dc12,g4)FROM modsrc
00:00:54   2  GROUP BY pair,trend,gatt,gattn
00:00:54   3  ORDER BY pair,trend,gatt,gattn
00:00:54   4  /

PAIR	     TREND GAT GAT    AVG(G4)  COUNT(G4) CORR(DC12,G4)
------- ---------- --- --- ---------- ---------- -------------
usd_jpy 	-1 nup nup	    0	     181
usd_jpy 	-1 nup up  -.13711354	    5201    .023258513
usd_jpy 	-1 up  nup .142687252	    5287    .058730771
usd_jpy 	-1			       0
usd_jpy 	 1 nup nup	    0	     167
usd_jpy 	 1 nup up   -.1343175	    4989     -.0140398
usd_jpy 	 1 up  nup .152379407	    4084    .184257426
usd_jpy 	 1			       0

8 rows selected.

Elapsed: 00:00:00.03
00:00:54 SQL> 
00:00:54 SQL> DROP   TABLE jpy_ms10 ;

Table dropped.

Elapsed: 00:00:00.05
00:00:54 SQL> CREATE TABLE jpy_ms10 COMPRESS AS
00:00:54   2  SELECT
00:00:54   3  ydate
00:00:54   4  ,trend jpy_trend
00:00:54   5  ,g4    jpy_g4
00:00:54   6  ,gatt  jpy_gatt
00:00:54   7  ,gattn jpy_gattn
00:00:54   8  FROM modsrc
00:00:54   9  /

Table created.

Elapsed: 00:00:00.07
00:00:54 SQL> 
00:00:54 SQL> ANALYZE TABLE jpy_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.22
00:00:54 SQL> 
00:00:54 SQL> -- rpt
00:00:54 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g4),MIN(g4),MAX(g4)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G4)	 MIN(G4)    MAX(G4)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-12 23:05:01 2010-12-16 23:50:00	 9240	   -1.07	1.5
	-1 2010-09-12 23:35:01 2010-12-16 23:20:00	10669	 -1.0775       1.99

Elapsed: 00:00:00.02
00:00:54 SQL> SELECT jpy_trend,MIN(ydate),MAX(ydate),COUNT(jpy_trend),MIN(jpy_g4),MAX(jpy_g4)FROM jpy_ms10 GROUP BY jpy_trend;

 JPY_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(JPY_TREND) MIN(JPY_G4) MAX(JPY_G4)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-12 23:05:01 2010-12-16 23:50:00	       9248	  -1.07 	1.5
	-1 2010-09-12 23:35:01 2010-12-16 23:20:00	      10709	-1.0775        1.99

Elapsed: 00:00:00.02
00:00:54 SQL> 
00:00:54 SQL> -- I need a copy of q15 attributes
00:00:54 SQL> 
00:00:54 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.04
00:00:54 SQL> CREATE TABLE jpy_att COMPRESS AS
00:00:54   2  SELECT
00:00:54   3  ydate
00:00:54   4  ,att00 jpy_att00
00:00:54   5  ,att01 jpy_att01
00:00:54   6  ,att02 jpy_att02
00:00:54   7  ,att03 jpy_att03
00:00:54   8  ,att04 jpy_att04
00:00:54   9  ,att05 jpy_att05
00:00:54  10  ,att06 jpy_att06
00:00:54  11  ,att07 jpy_att07
00:00:54  12  ,att08 jpy_att08
00:00:54  13  ,att09 jpy_att09
00:00:54  14  ,att10 jpy_att10
00:00:54  15  ,att11 jpy_att11
00:00:54  16  ,att12 jpy_att12
00:00:54  17  ,att13 jpy_att13
00:00:54  18  ,att14 jpy_att14
00:00:54  19  ,att15 jpy_att15
00:00:54  20  ,att16 jpy_att16
00:00:54  21  ,att17 jpy_att17
00:00:54  22  ,att18 jpy_att18
00:00:54  23  ,att19 jpy_att19
00:00:54  24  ,att20 jpy_att20
00:00:54  25  ,att21 jpy_att21
00:00:54  26  ,att22 jpy_att22
00:00:54  27  ,att23 jpy_att23
00:00:54  28  ,att24 jpy_att24
00:00:54  29  ,att25 jpy_att25
00:00:54  30  ,att26 jpy_att26
00:00:54  31  ,att27 jpy_att27
00:00:54  32  ,att28 jpy_att28
00:00:54  33  ,att29 jpy_att29
00:00:54  34  ,att30 jpy_att30
00:00:54  35  ,att31 jpy_att31
00:00:54  36  ,att32 jpy_att32
00:00:54  37  FROM q15
00:00:54  38  /

Table created.

Elapsed: 00:00:00.18
00:00:54 SQL> 
00:00:54 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.41
00:00:55 SQL> 
00:00:55 SQL> -- rpt
00:00:55 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     19957

Elapsed: 00:00:00.01
00:00:55 SQL> 
00:00:55 SQL> --
00:00:55 SQL> -- cad10.sql
00:00:55 SQL> --
00:00:55 SQL> 
00:00:55 SQL> -- Creates views and tables for backtesting a forex SVM strategy
00:00:55 SQL> 
00:00:55 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.46
00:00:55 SQL> 
00:00:55 SQL> -- I created di5min here:
00:00:55 SQL> -- /pt/s/rlk/svm4hp/update_di5min.sql
00:00:55 SQL> 
00:00:55 SQL> CREATE OR REPLACE VIEW q11 AS
00:00:55   2  SELECT
00:00:55   3  pair
00:00:55   4  ,ydate
00:00:55   5  ,prdate
00:00:55   6  ,rownum rnum -- acts as t in my time-series
00:00:55   7  ,clse
00:00:55   8  ,LAG(clse,12*1,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg1
00:00:55   9  ,LAG(clse,12*2,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg2
00:00:55  10  ,LAG(clse,12*3,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg3
00:00:55  11  ,LAG(clse,12*4,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg4
00:00:55  12  ,LAG(clse,12*5,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg5
00:00:55  13  ,LAG(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg6
00:00:55  14  ,LAG(clse,12*7,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg7
00:00:55  15  ,LAG(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg8
00:00:55  16  ,LAG(clse,12*9,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg9
00:00:55  17  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg12
00:00:55  18  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg18
00:00:55  19  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg24
00:00:55  20  ,LAG(clse,12*72,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg72
00:00:55  21  ,LEAD(clse,12*4,NULL)OVER(PARTITION BY pair ORDER BY ydate) ld4
00:00:55  22  FROM di5min WHERE pair LIKE'%cad%'
00:00:55  23  ORDER BY ydate
00:00:55  24  /

View created.

Elapsed: 00:00:00.05
00:00:55 SQL> 
00:00:55 SQL> -- rpt
00:00:55 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
usd_cad        20817

Elapsed: 00:00:00.38
00:00:56 SQL> 
00:00:56 SQL> -- Calc deltas and gains
00:00:56 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.19
00:00:56 SQL> 
00:00:56 SQL> CREATE TABLE q13 COMPRESS AS
00:00:56   2  SELECT
00:00:56   3  pair
00:00:56   4  ,ydate
00:00:56   5  ,prdate
00:00:56   6  ,rnum
00:00:56   7  ,lg4
00:00:56   8  ,lg8
00:00:56   9  ,lg12
00:00:56  10  ,ld4
00:00:56  11  ,CASE WHEN(clse-lg12)>0 then 1 ELSE -1 END trend
00:00:56  12  -- step by 1
00:00:56  13  ,clse-lg1 d01
00:00:56  14  ,lg1-lg2	d12
00:00:56  15  ,lg2-lg3	d23
00:00:56  16  ,lg3-lg4	d34
00:00:56  17  ,lg4-lg5	d45
00:00:56  18  ,lg5-lg6	d56
00:00:56  19  ,lg6-lg7	d67
00:00:56  20  ,lg7-lg8	d78
00:00:56  21  ,lg8-lg9	d89
00:00:56  22  -- step by 2
00:00:56  23  ,clse-lg2 d02
00:00:56  24  ,lg2-lg4 d24
00:00:56  25  ,lg4-lg6 d46
00:00:56  26  ,lg6-lg8 d68
00:00:56  27  -- step by 3
00:00:56  28  ,clse-lg3 d03
00:00:56  29  ,lg3-lg6	d36
00:00:56  30  ,lg6-lg9	d69
00:00:56  31  ,lg9-lg12 d912
00:00:56  32  -- step by 4
00:00:56  33  ,clse-lg4 d04
00:00:56  34  ,lg4-lg8	d48
00:00:56  35  ,lg8-lg12 d812
00:00:56  36  ,lg6-lg12 d612
00:00:56  37  ,lg12-lg18 d1218
00:00:56  38  --
00:00:56  39  ,ABS(clse-lg1)dc1
00:00:56  40  ,ABS(clse-lg2)dc2
00:00:56  41  ,ABS(clse-lg3)dc3
00:00:56  42  ,ABS(clse-lg4)dc4
00:00:56  43  ,ABS(clse-lg5)dc5
00:00:56  44  ,ABS(clse-lg6)dc6
00:00:56  45  ,ABS(clse-lg7)dc7
00:00:56  46  ,ABS(clse-lg8)dc8
00:00:56  47  ,ABS(clse-lg9)dc9
00:00:56  48  ,ABS(clse-lg12)dc12
00:00:56  49  ,ABS(clse-lg18)dc18
00:00:56  50  ,ABS(clse-lg24)dc24
00:00:56  51  ,ABS(clse-lg72)dc72
00:00:56  52  ,(ld4-clse) ug4
00:00:56  53  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*2  PRECEDING AND CURRENT ROW)crr2
00:00:56  54  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*3  PRECEDING AND CURRENT ROW)crr3
00:00:56  55  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
00:00:56  56  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*5  PRECEDING AND CURRENT ROW)crr5
00:00:56  57  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
00:00:56  58  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*7  PRECEDING AND CURRENT ROW)crr7
00:00:56  59  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
00:00:56  60  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*9  PRECEDING AND CURRENT ROW)crr9
00:00:56  61  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
00:00:56  62  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
00:00:56  63  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*72 PRECEDING AND CURRENT ROW)crr72
00:00:56  64  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
00:00:56  65  ,0+TO_CHAR(ydate,'D')d
00:00:56  66  ,0+TO_CHAR(ydate,'W')w
00:00:56  67  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
00:00:56  68  FROM q11
00:00:56  69  -- I dont want any NULL values from the LAG() functions:
00:00:56  70  WHERE lg72 > 0
00:00:56  71  ORDER BY pair,ydate
00:00:56  72  /

Table created.

Elapsed: 00:00:01.68
00:00:57 SQL> 
00:00:57 SQL> -- rpt
00:00:57 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    9002
	-1	   10951

Elapsed: 00:00:00.03
00:00:57 SQL> 
00:00:57 SQL> -- Calc gains and ntiles
00:00:57 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.18
00:00:58 SQL> CREATE TABLE q15 COMPRESS AS
00:00:58   2  SELECT
00:00:58   3  pair
00:00:58   4  ,ydate
00:00:58   5  ,prdate -- Should be unique
00:00:58   6  ,trend -- +1 or -1
00:00:58   7  ,dc12 -- next statement needs this
00:00:58   8  -- Use NTILE() to derive some attributes
00:00:58   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d12))		 att00
00:00:58  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d23))		 att01
00:00:58  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d34))		 att02
00:00:58  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d45))		 att03
00:00:58  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d56))		 att04
00:00:58  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d67))		 att05
00:00:58  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d78))		 att06
00:00:58  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d89))		 att07
00:00:58  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d912)) 	 att08
00:00:58  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc2)		 att09
00:00:58  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc3)		 att10
00:00:58  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc4)		 att11
00:00:58  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc5)		 att12
00:00:58  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6)		 att13
00:00:58  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc7)		 att14
00:00:58  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8)		 att15
00:00:58  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc9)		 att16
00:00:58  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att17
00:00:58  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc24)		 att18
00:00:58  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc72)		 att19
00:00:58  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr2,7))) att20
00:00:58  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr3,7))) att21
00:00:58  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr4,7))) att22
00:00:58  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr5,7))) att23
00:00:58  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6,7))) att24
00:00:58  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att25
00:00:58  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att26
00:00:58  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr72,7)))att27
00:00:58  37  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
00:00:58  38  ,hh    att28
00:00:58  39  ,d     att29
00:00:58  40  ,w     att30
00:00:58  41  ,mpm   att31
00:00:58  42  ,trend att32
00:00:58  43  ,ug4 g4
00:00:58  44  ,CASE WHEN ug4 IS NULL THEN NULL WHEN ug4 > 0.0006 THEN 'up' ELSE 'nup' END gatt
00:00:58  45  ,CASE WHEN ug4 IS NULL THEN NULL WHEN ug4< -0.0006 THEN 'up' ELSE 'nup' END gattn
00:00:58  46  FROM q13
00:00:58  47  ORDER BY pair,ydate
00:00:58  48  /

Table created.

Elapsed: 00:00:04.04
00:01:02 SQL> 
00:01:02 SQL> -- rpt
00:01:02 SQL> SELECT pair,trend,gatt,gattn,AVG(g4),COUNT(g4),CORR(dc12,g4)FROM q15
00:01:02   2  GROUP BY pair,trend,gatt,gattn
00:01:02   3  ORDER BY pair,trend,gatt,gattn
00:01:02   4  /

PAIR	     TREND GAT GAT    AVG(G4)  COUNT(G4) CORR(DC12,G4)
------- ---------- --- --- ---------- ---------- -------------
usd_cad 	-1 nup nup -4.103E-06	    3022    .015826632
usd_cad 	-1 nup up  -.00225153	    4093    .063378027
usd_cad 	-1 up  nup .002396566	    3822    -.00128762
usd_cad 	-1			       0
usd_cad 	 1 nup nup -.00001659	    2087    -.06438212
usd_cad 	 1 nup up  -.00237507	    3821      .0047318
usd_cad 	 1 up  nup .002590989	    3060    .004013367
usd_cad 	 1			       0

8 rows selected.

Elapsed: 00:00:00.04
00:01:02 SQL> 
00:01:02 SQL> -- rpt
00:01:02 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
usd_cad 2010-12-16 23:50:00

Elapsed: 00:00:00.01
00:01:02 SQL> 
00:01:02 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
00:01:02 SQL> CREATE TABLE modsrc COMPRESS AS
00:01:02   2  SELECT
00:01:02   3  pair
00:01:02   4  ,ydate
00:01:02   5  ,prdate
00:01:02   6  ,trend
00:01:02   7  ,g4
00:01:02   8  ,gatt
00:01:02   9  ,gattn
00:01:02  10  ,dc12
00:01:02  11  FROM q15
00:01:02  12  /

Table created.

Elapsed: 00:00:00.09
00:01:02 SQL> 
00:01:02 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.23
00:01:02 SQL> 
00:01:02 SQL> -- rpt
00:01:02 SQL> 
00:01:02 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20817

Elapsed: 00:00:00.34
00:01:02 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      19953

Elapsed: 00:00:00.01
00:01:02 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      19953

Elapsed: 00:00:00.01
00:01:02 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      19953

Elapsed: 00:00:00.00
00:01:02 SQL> 
00:01:02 SQL> SELECT pair,trend,gatt,gattn,AVG(g4),COUNT(g4),CORR(dc12,g4)FROM modsrc
00:01:02   2  GROUP BY pair,trend,gatt,gattn
00:01:02   3  ORDER BY pair,trend,gatt,gattn
00:01:02   4  /

PAIR	     TREND GAT GAT    AVG(G4)  COUNT(G4) CORR(DC12,G4)
------- ---------- --- --- ---------- ---------- -------------
usd_cad 	-1 nup nup -4.103E-06	    3022    .015826632
usd_cad 	-1 nup up  -.00225153	    4093    .063378027
usd_cad 	-1 up  nup .002396566	    3822    -.00128762
usd_cad 	-1			       0
usd_cad 	 1 nup nup -.00001659	    2087    -.06438212
usd_cad 	 1 nup up  -.00237507	    3821      .0047318
usd_cad 	 1 up  nup .002590989	    3060    .004013367
usd_cad 	 1			       0

8 rows selected.

Elapsed: 00:00:00.02
00:01:02 SQL> 
00:01:02 SQL> DROP   TABLE cad_ms10 ;

Table dropped.

Elapsed: 00:00:00.03
00:01:03 SQL> CREATE TABLE cad_ms10 COMPRESS AS
00:01:03   2  SELECT
00:01:03   3  ydate
00:01:03   4  ,trend cad_trend
00:01:03   5  ,g4    cad_g4
00:01:03   6  ,gatt  cad_gatt
00:01:03   7  ,gattn cad_gattn
00:01:03   8  FROM modsrc
00:01:03   9  /

Table created.

Elapsed: 00:00:00.07
00:01:03 SQL> 
00:01:03 SQL> ANALYZE TABLE cad_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
00:01:03 SQL> 
00:01:03 SQL> -- rpt
00:01:03 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g4),MIN(g4),MAX(g4)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G4)	 MIN(G4)    MAX(G4)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-12 23:05:01 2010-12-16 23:50:00	 8968	  -.0089      .0151
	-1 2010-09-12 23:30:01 2010-12-16 23:35:00	10937	  -.0107      .0147

Elapsed: 00:00:00.02
00:01:03 SQL> SELECT cad_trend,MIN(ydate),MAX(ydate),COUNT(cad_trend),MIN(cad_g4),MAX(cad_g4)FROM cad_ms10 GROUP BY cad_trend;

 CAD_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(CAD_TREND) MIN(CAD_G4) MAX(CAD_G4)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-12 23:05:01 2010-12-16 23:50:00	       9002	 -.0089       .0151
	-1 2010-09-12 23:30:01 2010-12-16 23:35:00	      10951	 -.0107       .0147

Elapsed: 00:00:00.02
00:01:03 SQL> 
00:01:03 SQL> -- I need a copy of q15 attributes
00:01:03 SQL> 
00:01:03 SQL> DROP   TABLE cad_att;

Table dropped.

Elapsed: 00:00:00.04
00:01:03 SQL> CREATE TABLE cad_att COMPRESS AS
00:01:03   2  SELECT
00:01:03   3  ydate
00:01:03   4  ,att00 cad_att00
00:01:03   5  ,att01 cad_att01
00:01:03   6  ,att02 cad_att02
00:01:03   7  ,att03 cad_att03
00:01:03   8  ,att04 cad_att04
00:01:03   9  ,att05 cad_att05
00:01:03  10  ,att06 cad_att06
00:01:03  11  ,att07 cad_att07
00:01:03  12  ,att08 cad_att08
00:01:03  13  ,att09 cad_att09
00:01:03  14  ,att10 cad_att10
00:01:03  15  ,att11 cad_att11
00:01:03  16  ,att12 cad_att12
00:01:03  17  ,att13 cad_att13
00:01:03  18  ,att14 cad_att14
00:01:03  19  ,att15 cad_att15
00:01:03  20  ,att16 cad_att16
00:01:03  21  ,att17 cad_att17
00:01:03  22  ,att18 cad_att18
00:01:03  23  ,att19 cad_att19
00:01:03  24  ,att20 cad_att20
00:01:03  25  ,att21 cad_att21
00:01:03  26  ,att22 cad_att22
00:01:03  27  ,att23 cad_att23
00:01:03  28  ,att24 cad_att24
00:01:03  29  ,att25 cad_att25
00:01:03  30  ,att26 cad_att26
00:01:03  31  ,att27 cad_att27
00:01:03  32  ,att28 cad_att28
00:01:03  33  ,att29 cad_att29
00:01:03  34  ,att30 cad_att30
00:01:03  35  ,att31 cad_att31
00:01:03  36  ,att32 cad_att32
00:01:03  37  FROM q15
00:01:03  38  /

Table created.

Elapsed: 00:00:00.14
00:01:03 SQL> 
00:01:03 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.40
00:01:03 SQL> 
00:01:03 SQL> -- rpt
00:01:03 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
     19953

Elapsed: 00:00:00.01
00:01:03 SQL> 
00:01:03 SQL> --
00:01:03 SQL> -- chf10.sql
00:01:03 SQL> --
00:01:03 SQL> 
00:01:03 SQL> -- Creates views and tables for backtesting a forex SVM strategy
00:01:03 SQL> 
00:01:03 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.30
00:01:04 SQL> 
00:01:04 SQL> -- I created di5min here:
00:01:04 SQL> -- /pt/s/rlk/svm4hp/update_di5min.sql
00:01:04 SQL> 
00:01:04 SQL> CREATE OR REPLACE VIEW q11 AS
00:01:04   2  SELECT
00:01:04   3  pair
00:01:04   4  ,ydate
00:01:04   5  ,prdate
00:01:04   6  ,rownum rnum -- acts as t in my time-series
00:01:04   7  ,clse
00:01:04   8  ,LAG(clse,12*1,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg1
00:01:04   9  ,LAG(clse,12*2,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg2
00:01:04  10  ,LAG(clse,12*3,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg3
00:01:04  11  ,LAG(clse,12*4,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg4
00:01:04  12  ,LAG(clse,12*5,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg5
00:01:04  13  ,LAG(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg6
00:01:04  14  ,LAG(clse,12*7,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg7
00:01:04  15  ,LAG(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg8
00:01:04  16  ,LAG(clse,12*9,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg9
00:01:04  17  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg12
00:01:04  18  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg18
00:01:04  19  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg24
00:01:04  20  ,LAG(clse,12*72,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg72
00:01:04  21  ,LEAD(clse,12*4,NULL)OVER(PARTITION BY pair ORDER BY ydate) ld4
00:01:04  22  FROM di5min WHERE pair LIKE'%chf%'
00:01:04  23  ORDER BY ydate
00:01:04  24  /

View created.

Elapsed: 00:00:00.05
00:01:04 SQL> 
00:01:04 SQL> -- rpt
00:01:04 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
usd_chf        20820

Elapsed: 00:00:00.35
00:01:04 SQL> 
00:01:04 SQL> -- Calc deltas and gains
00:01:04 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.18
00:01:04 SQL> 
00:01:04 SQL> CREATE TABLE q13 COMPRESS AS
00:01:04   2  SELECT
00:01:04   3  pair
00:01:04   4  ,ydate
00:01:04   5  ,prdate
00:01:04   6  ,rnum
00:01:04   7  ,lg4
00:01:04   8  ,lg8
00:01:04   9  ,lg12
00:01:04  10  ,ld4
00:01:04  11  ,CASE WHEN(clse-lg12)>0 then 1 ELSE -1 END trend
00:01:04  12  -- step by 1
00:01:04  13  ,clse-lg1 d01
00:01:04  14  ,lg1-lg2	d12
00:01:04  15  ,lg2-lg3	d23
00:01:04  16  ,lg3-lg4	d34
00:01:04  17  ,lg4-lg5	d45
00:01:04  18  ,lg5-lg6	d56
00:01:04  19  ,lg6-lg7	d67
00:01:04  20  ,lg7-lg8	d78
00:01:04  21  ,lg8-lg9	d89
00:01:04  22  -- step by 2
00:01:04  23  ,clse-lg2 d02
00:01:04  24  ,lg2-lg4 d24
00:01:04  25  ,lg4-lg6 d46
00:01:04  26  ,lg6-lg8 d68
00:01:04  27  -- step by 3
00:01:04  28  ,clse-lg3 d03
00:01:04  29  ,lg3-lg6	d36
00:01:04  30  ,lg6-lg9	d69
00:01:04  31  ,lg9-lg12 d912
00:01:04  32  -- step by 4
00:01:04  33  ,clse-lg4 d04
00:01:04  34  ,lg4-lg8	d48
00:01:04  35  ,lg8-lg12 d812
00:01:04  36  ,lg6-lg12 d612
00:01:04  37  ,lg12-lg18 d1218
00:01:04  38  --
00:01:04  39  ,ABS(clse-lg1)dc1
00:01:04  40  ,ABS(clse-lg2)dc2
00:01:04  41  ,ABS(clse-lg3)dc3
00:01:04  42  ,ABS(clse-lg4)dc4
00:01:04  43  ,ABS(clse-lg5)dc5
00:01:04  44  ,ABS(clse-lg6)dc6
00:01:04  45  ,ABS(clse-lg7)dc7
00:01:04  46  ,ABS(clse-lg8)dc8
00:01:04  47  ,ABS(clse-lg9)dc9
00:01:04  48  ,ABS(clse-lg12)dc12
00:01:04  49  ,ABS(clse-lg18)dc18
00:01:04  50  ,ABS(clse-lg24)dc24
00:01:04  51  ,ABS(clse-lg72)dc72
00:01:04  52  ,(ld4-clse) ug4
00:01:04  53  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*2  PRECEDING AND CURRENT ROW)crr2
00:01:04  54  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*3  PRECEDING AND CURRENT ROW)crr3
00:01:04  55  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
00:01:04  56  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*5  PRECEDING AND CURRENT ROW)crr5
00:01:04  57  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
00:01:04  58  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*7  PRECEDING AND CURRENT ROW)crr7
00:01:04  59  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
00:01:04  60  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*9  PRECEDING AND CURRENT ROW)crr9
00:01:04  61  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
00:01:04  62  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
00:01:04  63  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*72 PRECEDING AND CURRENT ROW)crr72
00:01:04  64  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
00:01:04  65  ,0+TO_CHAR(ydate,'D')d
00:01:04  66  ,0+TO_CHAR(ydate,'W')w
00:01:04  67  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
00:01:04  68  FROM q11
00:01:04  69  -- I dont want any NULL values from the LAG() functions:
00:01:04  70  WHERE lg72 > 0
00:01:04  71  ORDER BY pair,ydate
00:01:04  72  /

Table created.

Elapsed: 00:00:01.70
00:01:06 SQL> 
00:01:06 SQL> -- rpt
00:01:06 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    9320
	-1	   10636

Elapsed: 00:00:00.04
00:01:06 SQL> 
00:01:06 SQL> -- Calc gains and ntiles
00:01:06 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.14
00:01:06 SQL> CREATE TABLE q15 COMPRESS AS
00:01:06   2  SELECT
00:01:06   3  pair
00:01:06   4  ,ydate
00:01:06   5  ,prdate -- Should be unique
00:01:06   6  ,trend -- +1 or -1
00:01:06   7  ,dc12 -- next statement needs this
00:01:06   8  -- Use NTILE() to derive some attributes
00:01:06   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d12))		 att00
00:01:06  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d23))		 att01
00:01:06  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d34))		 att02
00:01:06  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d45))		 att03
00:01:06  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d56))		 att04
00:01:06  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d67))		 att05
00:01:06  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d78))		 att06
00:01:06  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d89))		 att07
00:01:06  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d912)) 	 att08
00:01:06  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc2)		 att09
00:01:06  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc3)		 att10
00:01:06  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc4)		 att11
00:01:06  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc5)		 att12
00:01:06  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6)		 att13
00:01:06  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc7)		 att14
00:01:06  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8)		 att15
00:01:06  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc9)		 att16
00:01:06  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att17
00:01:06  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc24)		 att18
00:01:06  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc72)		 att19
00:01:06  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr2,7))) att20
00:01:06  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr3,7))) att21
00:01:06  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr4,7))) att22
00:01:06  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr5,7))) att23
00:01:06  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6,7))) att24
00:01:06  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att25
00:01:06  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att26
00:01:06  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr72,7)))att27
00:01:06  37  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
00:01:06  38  ,hh    att28
00:01:06  39  ,d     att29
00:01:06  40  ,w     att30
00:01:06  41  ,mpm   att31
00:01:06  42  ,trend att32
00:01:06  43  ,ug4 g4
00:01:06  44  ,CASE WHEN ug4 IS NULL THEN NULL WHEN ug4 > 0.0006 THEN 'up' ELSE 'nup' END gatt
00:01:06  45  ,CASE WHEN ug4 IS NULL THEN NULL WHEN ug4< -0.0006 THEN 'up' ELSE 'nup' END gattn
00:01:06  46  FROM q13
00:01:06  47  ORDER BY pair,ydate
00:01:06  48  /

Table created.

Elapsed: 00:00:04.04
00:01:10 SQL> 
00:01:10 SQL> -- rpt
00:01:10 SQL> SELECT pair,trend,gatt,gattn,AVG(g4),COUNT(g4),CORR(dc12,g4)FROM q15
00:01:10   2  GROUP BY pair,trend,gatt,gattn
00:01:10   3  ORDER BY pair,trend,gatt,gattn
00:01:10   4  /

PAIR	     TREND GAT GAT    AVG(G4)  COUNT(G4) CORR(DC12,G4)
------- ---------- --- --- ---------- ---------- -------------
usd_chf 	-1 nup nup .000032146	    2645    .042491123
usd_chf 	-1 nup up  -.00291818	    3895    .058789464
usd_chf 	-1 up  nup .002646511	    4048    -.12069668
usd_chf 	-1			       0
usd_chf 	 1 nup nup 8.9398E-06	    2226    .017980122
usd_chf 	 1 nup up  -.00254098	    3862    .111937469
usd_chf 	 1 up  nup .002433841	    3232     -.1606913

7 rows selected.

Elapsed: 00:00:00.04
00:01:10 SQL> 
00:01:10 SQL> -- rpt
00:01:10 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
usd_chf 2010-12-16 23:50:00

Elapsed: 00:00:00.01
00:01:10 SQL> 
00:01:10 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
00:01:10 SQL> CREATE TABLE modsrc COMPRESS AS
00:01:10   2  SELECT
00:01:10   3  pair
00:01:10   4  ,ydate
00:01:10   5  ,prdate
00:01:10   6  ,trend
00:01:10   7  ,g4
00:01:10   8  ,gatt
00:01:10   9  ,gattn
00:01:10  10  ,dc12
00:01:10  11  FROM q15
00:01:10  12  /

Table created.

Elapsed: 00:00:00.09
00:01:10 SQL> 
00:01:10 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
00:01:11 SQL> 
00:01:11 SQL> -- rpt
00:01:11 SQL> 
00:01:11 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20820

Elapsed: 00:00:00.35
00:01:11 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      19956

Elapsed: 00:00:00.01
00:01:11 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      19956

Elapsed: 00:00:00.01
00:01:11 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      19956

Elapsed: 00:00:00.00
00:01:11 SQL> 
00:01:11 SQL> SELECT pair,trend,gatt,gattn,AVG(g4),COUNT(g4),CORR(dc12,g4)FROM modsrc
00:01:11   2  GROUP BY pair,trend,gatt,gattn
00:01:11   3  ORDER BY pair,trend,gatt,gattn
00:01:11   4  /

PAIR	     TREND GAT GAT    AVG(G4)  COUNT(G4) CORR(DC12,G4)
------- ---------- --- --- ---------- ---------- -------------
usd_chf 	-1 nup nup .000032146	    2645    .042491123
usd_chf 	-1 nup up  -.00291818	    3895    .058789464
usd_chf 	-1 up  nup .002646511	    4048    -.12069668
usd_chf 	-1			       0
usd_chf 	 1 nup nup 8.9398E-06	    2226    .017980122
usd_chf 	 1 nup up  -.00254098	    3862    .111937469
usd_chf 	 1 up  nup .002433841	    3232     -.1606913

7 rows selected.

Elapsed: 00:00:00.03
00:01:11 SQL> 
00:01:11 SQL> DROP   TABLE chf_ms10 ;

Table dropped.

Elapsed: 00:00:00.13
00:01:11 SQL> CREATE TABLE chf_ms10 COMPRESS AS
00:01:11   2  SELECT
00:01:11   3  ydate
00:01:11   4  ,trend chf_trend
00:01:11   5  ,g4    chf_g4
00:01:11   6  ,gatt  chf_gatt
00:01:11   7  ,gattn chf_gattn
00:01:11   8  FROM modsrc
00:01:11   9  /

Table created.

Elapsed: 00:00:00.06
00:01:11 SQL> 
00:01:11 SQL> ANALYZE TABLE chf_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
00:01:11 SQL> 
00:01:11 SQL> -- rpt
00:01:11 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g4),MIN(g4),MAX(g4)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G4)	 MIN(G4)    MAX(G4)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-15 02:05:01 2010-12-16 18:55:00	 9320	  -.0176     .01365
	-1 2010-09-12 23:05:01 2010-12-16 23:50:00	10588	  -.0166      .0149

Elapsed: 00:00:00.02
00:01:11 SQL> SELECT chf_trend,MIN(ydate),MAX(ydate),COUNT(chf_trend),MIN(chf_g4),MAX(chf_g4)FROM chf_ms10 GROUP BY chf_trend;

 CHF_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(CHF_TREND) MIN(CHF_G4) MAX(CHF_G4)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-15 02:05:01 2010-12-16 18:55:00	       9320	 -.0176      .01365
	-1 2010-09-12 23:05:01 2010-12-16 23:50:00	      10636	 -.0166       .0149

Elapsed: 00:00:00.02
00:01:12 SQL> 
00:01:12 SQL> -- I need a copy of q15 attributes
00:01:12 SQL> 
00:01:12 SQL> DROP   TABLE chf_att;

Table dropped.

Elapsed: 00:00:00.03
00:01:12 SQL> CREATE TABLE chf_att COMPRESS AS
00:01:12   2  SELECT
00:01:12   3  ydate
00:01:12   4  ,att00 chf_att00
00:01:12   5  ,att01 chf_att01
00:01:12   6  ,att02 chf_att02
00:01:12   7  ,att03 chf_att03
00:01:12   8  ,att04 chf_att04
00:01:12   9  ,att05 chf_att05
00:01:12  10  ,att06 chf_att06
00:01:12  11  ,att07 chf_att07
00:01:12  12  ,att08 chf_att08
00:01:12  13  ,att09 chf_att09
00:01:12  14  ,att10 chf_att10
00:01:12  15  ,att11 chf_att11
00:01:12  16  ,att12 chf_att12
00:01:12  17  ,att13 chf_att13
00:01:12  18  ,att14 chf_att14
00:01:12  19  ,att15 chf_att15
00:01:12  20  ,att16 chf_att16
00:01:12  21  ,att17 chf_att17
00:01:12  22  ,att18 chf_att18
00:01:12  23  ,att19 chf_att19
00:01:12  24  ,att20 chf_att20
00:01:12  25  ,att21 chf_att21
00:01:12  26  ,att22 chf_att22
00:01:12  27  ,att23 chf_att23
00:01:12  28  ,att24 chf_att24
00:01:12  29  ,att25 chf_att25
00:01:12  30  ,att26 chf_att26
00:01:12  31  ,att27 chf_att27
00:01:12  32  ,att28 chf_att28
00:01:12  33  ,att29 chf_att29
00:01:12  34  ,att30 chf_att30
00:01:12  35  ,att31 chf_att31
00:01:12  36  ,att32 chf_att32
00:01:12  37  FROM q15
00:01:12  38  /

Table created.

Elapsed: 00:00:00.14
00:01:12 SQL> 
00:01:12 SQL> ANALYZE TABLE chf_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.41
00:01:12 SQL> 
00:01:12 SQL> -- rpt
00:01:12 SQL> SELECT COUNT(*)FROM chf_att;

  COUNT(*)
----------
     19956

Elapsed: 00:00:00.01
00:01:12 SQL> 
00:01:12 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
