
SQL*Plus: Release 11.2.0.1.0 Production on Thu Dec 16 22:48:20 2010

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

22:48:20 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
22:48:20 SQL> 22:48:20 SQL> --
22:48:20 SQL> -- eur10.sql
22:48:20 SQL> --
22:48:20 SQL> 
22:48:20 SQL> -- Creates views and tables for backtesting a forex SVM strategy
22:48:20 SQL> 
22:48:20 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.03
22:48:20 SQL> 
22:48:20 SQL> -- I created di5min here:
22:48:20 SQL> -- /pt/s/rlk/svm4hp/update_di5min.sql
22:48:20 SQL> 
22:48:20 SQL> CREATE OR REPLACE VIEW q11 AS
22:48:20   2  SELECT
22:48:20   3  pair
22:48:20   4  ,ydate
22:48:20   5  ,prdate
22:48:20   6  ,rownum rnum -- acts as t in my time-series
22:48:20   7  ,clse
22:48:20   8  ,LAG(clse,12*1,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg1
22:48:20   9  ,LAG(clse,12*2,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg2
22:48:20  10  ,LAG(clse,12*3,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg3
22:48:20  11  ,LAG(clse,12*4,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg4
22:48:20  12  ,LAG(clse,12*5,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg5
22:48:20  13  ,LAG(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg6
22:48:20  14  ,LAG(clse,12*7,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg7
22:48:20  15  ,LAG(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg8
22:48:20  16  ,LAG(clse,12*9,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg9
22:48:20  17  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg12
22:48:20  18  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg18
22:48:20  19  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg24
22:48:20  20  ,LAG(clse,12*72,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg72
22:48:20  21  ,LEAD(clse,12*4,NULL)OVER(PARTITION BY pair ORDER BY ydate) ld4
22:48:20  22  FROM di5min WHERE pair LIKE'%eur%'
22:48:20  23  ORDER BY ydate
22:48:20  24  /

View created.

Elapsed: 00:00:00.05
22:48:20 SQL> 
22:48:20 SQL> -- rpt
22:48:20 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
eur_usd        20822

Elapsed: 00:00:00.35
22:48:21 SQL> 
22:48:21 SQL> -- Calc deltas and gains
22:48:21 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.05
22:48:21 SQL> 
22:48:21 SQL> CREATE TABLE q13 COMPRESS AS
22:48:21   2  SELECT
22:48:21   3  pair
22:48:21   4  ,ydate
22:48:21   5  ,prdate
22:48:21   6  ,rnum
22:48:21   7  ,lg4
22:48:21   8  ,lg8
22:48:21   9  ,lg12
22:48:21  10  ,ld4
22:48:21  11  ,CASE WHEN(clse-lg12)>0 then 1 ELSE -1 END trend
22:48:21  12  -- step by 1
22:48:21  13  ,clse-lg1 d01
22:48:21  14  ,lg1-lg2	d12
22:48:21  15  ,lg2-lg3	d23
22:48:21  16  ,lg3-lg4	d34
22:48:21  17  ,lg4-lg5	d45
22:48:21  18  ,lg5-lg6	d56
22:48:21  19  ,lg6-lg7	d67
22:48:21  20  ,lg7-lg8	d78
22:48:21  21  ,lg8-lg9	d89
22:48:21  22  -- step by 2
22:48:21  23  ,clse-lg2 d02
22:48:21  24  ,lg2-lg4 d24
22:48:21  25  ,lg4-lg6 d46
22:48:21  26  ,lg6-lg8 d68
22:48:21  27  -- step by 3
22:48:21  28  ,clse-lg3 d03
22:48:21  29  ,lg3-lg6	d36
22:48:21  30  ,lg6-lg9	d69
22:48:21  31  ,lg9-lg12 d912
22:48:21  32  -- step by 4
22:48:21  33  ,clse-lg4 d04
22:48:21  34  ,lg4-lg8	d48
22:48:21  35  ,lg8-lg12 d812
22:48:21  36  ,lg6-lg12 d612
22:48:21  37  ,lg12-lg18 d1218
22:48:21  38  --
22:48:21  39  ,ABS(clse-lg1)dc1
22:48:21  40  ,ABS(clse-lg2)dc2
22:48:21  41  ,ABS(clse-lg3)dc3
22:48:21  42  ,ABS(clse-lg4)dc4
22:48:21  43  ,ABS(clse-lg5)dc5
22:48:21  44  ,ABS(clse-lg6)dc6
22:48:21  45  ,ABS(clse-lg7)dc7
22:48:21  46  ,ABS(clse-lg8)dc8
22:48:21  47  ,ABS(clse-lg9)dc9
22:48:21  48  ,ABS(clse-lg12)dc12
22:48:21  49  ,ABS(clse-lg18)dc18
22:48:21  50  ,ABS(clse-lg24)dc24
22:48:21  51  ,ABS(clse-lg72)dc72
22:48:21  52  ,(ld4-clse) ug4
22:48:21  53  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*2  PRECEDING AND CURRENT ROW)crr2
22:48:21  54  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*3  PRECEDING AND CURRENT ROW)crr3
22:48:21  55  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
22:48:21  56  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*5  PRECEDING AND CURRENT ROW)crr5
22:48:21  57  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
22:48:21  58  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*7  PRECEDING AND CURRENT ROW)crr7
22:48:21  59  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
22:48:21  60  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*9  PRECEDING AND CURRENT ROW)crr9
22:48:21  61  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
22:48:21  62  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
22:48:21  63  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*72 PRECEDING AND CURRENT ROW)crr72
22:48:21  64  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:48:21  65  ,0+TO_CHAR(ydate,'D')d
22:48:21  66  ,0+TO_CHAR(ydate,'W')w
22:48:21  67  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:48:21  68  FROM q11
22:48:21  69  -- I dont want any NULL values from the LAG() functions:
22:48:21  70  WHERE lg72 > 0
22:48:21  71  ORDER BY pair,ydate
22:48:21  72  /

Table created.

Elapsed: 00:00:01.99
22:48:23 SQL> 
22:48:23 SQL> -- rpt
22:48:23 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	   10281
	-1	    9677

Elapsed: 00:00:00.04
22:48:23 SQL> 
22:48:23 SQL> -- Calc gains and ntiles
22:48:23 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.03
22:48:23 SQL> CREATE TABLE q15 COMPRESS AS
22:48:23   2  SELECT
22:48:23   3  pair
22:48:23   4  ,ydate
22:48:23   5  ,prdate -- Should be unique
22:48:23   6  ,trend -- +1 or -1
22:48:23   7  ,dc12 -- next statement needs this
22:48:23   8  -- Use NTILE() to derive some attributes
22:48:23   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d12))		 att00
22:48:23  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d23))		 att01
22:48:23  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d34))		 att02
22:48:23  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d45))		 att03
22:48:23  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d56))		 att04
22:48:23  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d67))		 att05
22:48:23  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d78))		 att06
22:48:23  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d89))		 att07
22:48:23  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d912)) 	 att08
22:48:23  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc2)		 att09
22:48:23  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc3)		 att10
22:48:23  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc4)		 att11
22:48:23  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc5)		 att12
22:48:23  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6)		 att13
22:48:23  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc7)		 att14
22:48:23  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8)		 att15
22:48:23  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc9)		 att16
22:48:23  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att17
22:48:23  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc24)		 att18
22:48:23  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc72)		 att19
22:48:23  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr2,7))) att20
22:48:23  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr3,7))) att21
22:48:23  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr4,7))) att22
22:48:23  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr5,7))) att23
22:48:23  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6,7))) att24
22:48:23  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att25
22:48:23  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att26
22:48:23  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr72,7)))att27
22:48:23  37  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
22:48:23  38  ,hh    att28
22:48:23  39  ,d     att29
22:48:23  40  ,w     att30
22:48:23  41  ,mpm   att31
22:48:23  42  ,trend att32
22:48:23  43  ,ug4 g4
22:48:23  44  ,CASE WHEN ug4 IS NULL THEN NULL WHEN ug4 > 0.0006 THEN 'up' ELSE 'nup' END gatt
22:48:23  45  ,CASE WHEN ug4 IS NULL THEN NULL WHEN ug4< -0.0006 THEN 'up' ELSE 'nup' END gattn
22:48:23  46  FROM q13
22:48:23  47  ORDER BY pair,ydate
22:48:23  48  /

Table created.

Elapsed: 00:00:03.95
22:48:27 SQL> 
22:48:27 SQL> -- rpt
22:48:27 SQL> SELECT pair,trend,gatt,gattn,AVG(g4),COUNT(g4),CORR(dc12,g4)FROM q15
22:48:27   2  GROUP BY pair,trend,gatt,gattn
22:48:27   3  ORDER BY pair,trend,gatt,gattn
22:48:27   4  /

PAIR	     TREND GAT GAT    AVG(G4)  COUNT(G4) CORR(DC12,G4)
------- ---------- --- --- ---------- ---------- -------------
eur_usd 	-1 nup nup -.00001559	    1451    .040431941
eur_usd 	-1 nup up  -.00362281	    4024    .148664094
eur_usd 	-1 up  nup .003640962	    4163    -.21094145
eur_usd 	-1			       0
eur_usd 	 1 nup nup .000014474	    1741     .03725399
eur_usd 	 1 nup up  -.00342209	    4203     .11794192
eur_usd 	 1 up  nup  .00371886	    4328    -.14464731
eur_usd 	 1			       0

8 rows selected.

Elapsed: 00:00:00.04
22:48:27 SQL> 
22:48:27 SQL> -- rpt
22:48:27 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
eur_usd 2010-12-16 22:40:00

Elapsed: 00:00:00.01
22:48:27 SQL> 
22:48:27 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.03
22:48:27 SQL> CREATE TABLE modsrc COMPRESS AS
22:48:27   2  SELECT
22:48:27   3  pair
22:48:27   4  ,ydate
22:48:27   5  ,prdate
22:48:27   6  ,trend
22:48:27   7  ,g4
22:48:27   8  ,gatt
22:48:27   9  ,gattn
22:48:27  10  ,dc12
22:48:27  11  FROM q15
22:48:27  12  /

Table created.

Elapsed: 00:00:00.08
22:48:27 SQL> 
22:48:27 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.27
22:48:27 SQL> 
22:48:27 SQL> -- rpt
22:48:27 SQL> 
22:48:27 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20822

Elapsed: 00:00:00.34
22:48:28 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      19958

Elapsed: 00:00:00.01
22:48:28 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      19958

Elapsed: 00:00:00.00
22:48:28 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      19958

Elapsed: 00:00:00.01
22:48:28 SQL> 
22:48:28 SQL> SELECT pair,trend,gatt,gattn,AVG(g4),COUNT(g4),CORR(dc12,g4)FROM modsrc
22:48:28   2  GROUP BY pair,trend,gatt,gattn
22:48:28   3  ORDER BY pair,trend,gatt,gattn
22:48:28   4  /

PAIR	     TREND GAT GAT    AVG(G4)  COUNT(G4) CORR(DC12,G4)
------- ---------- --- --- ---------- ---------- -------------
eur_usd 	-1 nup nup -.00001559	    1451    .040431941
eur_usd 	-1 nup up  -.00362281	    4024    .148664094
eur_usd 	-1 up  nup .003640962	    4163    -.21094145
eur_usd 	-1			       0
eur_usd 	 1 nup nup .000014474	    1741     .03725399
eur_usd 	 1 nup up  -.00342209	    4203     .11794192
eur_usd 	 1 up  nup  .00371886	    4328    -.14464731
eur_usd 	 1			       0

8 rows selected.

Elapsed: 00:00:00.02
22:48:28 SQL> 
22:48:28 SQL> DROP   TABLE eur_ms10 ;

Table dropped.

Elapsed: 00:00:00.07
22:48:28 SQL> CREATE TABLE eur_ms10 COMPRESS AS
22:48:28   2  SELECT
22:48:28   3  ydate
22:48:28   4  ,trend eur_trend
22:48:28   5  ,g4    eur_g4
22:48:28   6  ,gatt  eur_gatt
22:48:28   7  ,gattn eur_gattn
22:48:28   8  FROM modsrc
22:48:28   9  /

Table created.

Elapsed: 00:00:00.06
22:48:28 SQL> 
22:48:28 SQL> ANALYZE TABLE eur_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
22:48:28 SQL> 
22:48:28 SQL> -- rpt
22:48:28 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g4),MIN(g4),MAX(g4)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G4)	 MIN(G4)    MAX(G4)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-12 22:15:01 2010-12-16 22:40:00	10272	  -.0153      .0165
	-1 2010-09-12 21:50:01 2010-12-16 21:50:00	 9638	  -.0164      .0167

Elapsed: 00:00:00.02
22:48:28 SQL> SELECT eur_trend,MIN(ydate),MAX(ydate),COUNT(eur_trend),MIN(eur_g4),MAX(eur_g4)FROM eur_ms10 GROUP BY eur_trend;

 EUR_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(EUR_TREND) MIN(EUR_G4) MAX(EUR_G4)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-12 22:15:01 2010-12-16 22:40:00	      10281	 -.0153       .0165
	-1 2010-09-12 21:50:01 2010-12-16 21:50:00	       9677	 -.0164       .0167

Elapsed: 00:00:00.02
22:48:28 SQL> 
22:48:28 SQL> -- I need a copy of q15 attributes
22:48:28 SQL> 
22:48:28 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.03
22:48:28 SQL> CREATE TABLE eur_att COMPRESS AS
22:48:28   2  SELECT
22:48:28   3  ydate
22:48:28   4  ,att00 eur_att00
22:48:28   5  ,att01 eur_att01
22:48:28   6  ,att02 eur_att02
22:48:28   7  ,att03 eur_att03
22:48:28   8  ,att04 eur_att04
22:48:28   9  ,att05 eur_att05
22:48:28  10  ,att06 eur_att06
22:48:28  11  ,att07 eur_att07
22:48:28  12  ,att08 eur_att08
22:48:28  13  ,att09 eur_att09
22:48:28  14  ,att10 eur_att10
22:48:28  15  ,att11 eur_att11
22:48:28  16  ,att12 eur_att12
22:48:28  17  ,att13 eur_att13
22:48:28  18  ,att14 eur_att14
22:48:28  19  ,att15 eur_att15
22:48:28  20  ,att16 eur_att16
22:48:28  21  ,att17 eur_att17
22:48:28  22  ,att18 eur_att18
22:48:28  23  ,att19 eur_att19
22:48:28  24  ,att20 eur_att20
22:48:28  25  ,att21 eur_att21
22:48:28  26  ,att22 eur_att22
22:48:28  27  ,att23 eur_att23
22:48:28  28  ,att24 eur_att24
22:48:28  29  ,att25 eur_att25
22:48:28  30  ,att26 eur_att26
22:48:28  31  ,att27 eur_att27
22:48:28  32  ,att28 eur_att28
22:48:28  33  ,att29 eur_att29
22:48:28  34  ,att30 eur_att30
22:48:28  35  ,att31 eur_att31
22:48:28  36  ,att32 eur_att32
22:48:28  37  FROM q15
22:48:28  38  /

Table created.

Elapsed: 00:00:00.13
22:48:28 SQL> 
22:48:28 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.42
22:48:29 SQL> 
22:48:29 SQL> -- rpt
22:48:29 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     19958

Elapsed: 00:00:00.00
22:48:29 SQL> 
22:48:29 SQL> --
22:48:29 SQL> -- aud10.sql
22:48:29 SQL> --
22:48:29 SQL> 
22:48:29 SQL> -- Creates views and tables for backtesting a forex SVM strategy
22:48:29 SQL> 
22:48:29 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.35
22:48:29 SQL> 
22:48:29 SQL> -- I created di5min here:
22:48:29 SQL> -- /pt/s/rlk/svm4hp/update_di5min.sql
22:48:29 SQL> 
22:48:29 SQL> CREATE OR REPLACE VIEW q11 AS
22:48:29   2  SELECT
22:48:29   3  pair
22:48:29   4  ,ydate
22:48:29   5  ,prdate
22:48:29   6  ,rownum rnum -- acts as t in my time-series
22:48:29   7  ,clse
22:48:29   8  ,LAG(clse,12*1,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg1
22:48:29   9  ,LAG(clse,12*2,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg2
22:48:29  10  ,LAG(clse,12*3,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg3
22:48:29  11  ,LAG(clse,12*4,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg4
22:48:29  12  ,LAG(clse,12*5,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg5
22:48:29  13  ,LAG(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg6
22:48:29  14  ,LAG(clse,12*7,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg7
22:48:29  15  ,LAG(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg8
22:48:29  16  ,LAG(clse,12*9,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg9
22:48:29  17  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg12
22:48:29  18  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg18
22:48:29  19  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg24
22:48:29  20  ,LAG(clse,12*72,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg72
22:48:29  21  ,LEAD(clse,12*4,NULL)OVER(PARTITION BY pair ORDER BY ydate) ld4
22:48:29  22  FROM di5min WHERE pair LIKE'%aud%'
22:48:29  23  ORDER BY ydate
22:48:29  24  /

View created.

Elapsed: 00:00:00.05
22:48:29 SQL> 
22:48:29 SQL> -- rpt
22:48:29 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
aud_usd        20819

Elapsed: 00:00:00.35
22:48:29 SQL> 
22:48:29 SQL> -- Calc deltas and gains
22:48:29 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.18
22:48:30 SQL> 
22:48:30 SQL> CREATE TABLE q13 COMPRESS AS
22:48:30   2  SELECT
22:48:30   3  pair
22:48:30   4  ,ydate
22:48:30   5  ,prdate
22:48:30   6  ,rnum
22:48:30   7  ,lg4
22:48:30   8  ,lg8
22:48:30   9  ,lg12
22:48:30  10  ,ld4
22:48:30  11  ,CASE WHEN(clse-lg12)>0 then 1 ELSE -1 END trend
22:48:30  12  -- step by 1
22:48:30  13  ,clse-lg1 d01
22:48:30  14  ,lg1-lg2	d12
22:48:30  15  ,lg2-lg3	d23
22:48:30  16  ,lg3-lg4	d34
22:48:30  17  ,lg4-lg5	d45
22:48:30  18  ,lg5-lg6	d56
22:48:30  19  ,lg6-lg7	d67
22:48:30  20  ,lg7-lg8	d78
22:48:30  21  ,lg8-lg9	d89
22:48:30  22  -- step by 2
22:48:30  23  ,clse-lg2 d02
22:48:30  24  ,lg2-lg4 d24
22:48:30  25  ,lg4-lg6 d46
22:48:30  26  ,lg6-lg8 d68
22:48:30  27  -- step by 3
22:48:30  28  ,clse-lg3 d03
22:48:30  29  ,lg3-lg6	d36
22:48:30  30  ,lg6-lg9	d69
22:48:30  31  ,lg9-lg12 d912
22:48:30  32  -- step by 4
22:48:30  33  ,clse-lg4 d04
22:48:30  34  ,lg4-lg8	d48
22:48:30  35  ,lg8-lg12 d812
22:48:30  36  ,lg6-lg12 d612
22:48:30  37  ,lg12-lg18 d1218
22:48:30  38  --
22:48:30  39  ,ABS(clse-lg1)dc1
22:48:30  40  ,ABS(clse-lg2)dc2
22:48:30  41  ,ABS(clse-lg3)dc3
22:48:30  42  ,ABS(clse-lg4)dc4
22:48:30  43  ,ABS(clse-lg5)dc5
22:48:30  44  ,ABS(clse-lg6)dc6
22:48:30  45  ,ABS(clse-lg7)dc7
22:48:30  46  ,ABS(clse-lg8)dc8
22:48:30  47  ,ABS(clse-lg9)dc9
22:48:30  48  ,ABS(clse-lg12)dc12
22:48:30  49  ,ABS(clse-lg18)dc18
22:48:30  50  ,ABS(clse-lg24)dc24
22:48:30  51  ,ABS(clse-lg72)dc72
22:48:30  52  ,(ld4-clse) ug4
22:48:30  53  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*2  PRECEDING AND CURRENT ROW)crr2
22:48:30  54  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*3  PRECEDING AND CURRENT ROW)crr3
22:48:30  55  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
22:48:30  56  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*5  PRECEDING AND CURRENT ROW)crr5
22:48:30  57  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
22:48:30  58  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*7  PRECEDING AND CURRENT ROW)crr7
22:48:30  59  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
22:48:30  60  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*9  PRECEDING AND CURRENT ROW)crr9
22:48:30  61  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
22:48:30  62  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
22:48:30  63  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*72 PRECEDING AND CURRENT ROW)crr72
22:48:30  64  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:48:30  65  ,0+TO_CHAR(ydate,'D')d
22:48:30  66  ,0+TO_CHAR(ydate,'W')w
22:48:30  67  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:48:30  68  FROM q11
22:48:30  69  -- I dont want any NULL values from the LAG() functions:
22:48:30  70  WHERE lg72 > 0
22:48:30  71  ORDER BY pair,ydate
22:48:30  72  /

Table created.

Elapsed: 00:00:01.67
22:48:31 SQL> 
22:48:31 SQL> -- rpt
22:48:31 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	   10455
	-1	    9500

Elapsed: 00:00:00.03
22:48:31 SQL> 
22:48:31 SQL> -- Calc gains and ntiles
22:48:31 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.20
22:48:31 SQL> CREATE TABLE q15 COMPRESS AS
22:48:31   2  SELECT
22:48:31   3  pair
22:48:31   4  ,ydate
22:48:31   5  ,prdate -- Should be unique
22:48:31   6  ,trend -- +1 or -1
22:48:31   7  ,dc12 -- next statement needs this
22:48:31   8  -- Use NTILE() to derive some attributes
22:48:31   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d12))		 att00
22:48:31  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d23))		 att01
22:48:31  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d34))		 att02
22:48:31  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d45))		 att03
22:48:31  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d56))		 att04
22:48:31  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d67))		 att05
22:48:31  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d78))		 att06
22:48:31  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d89))		 att07
22:48:31  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d912)) 	 att08
22:48:31  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc2)		 att09
22:48:31  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc3)		 att10
22:48:31  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc4)		 att11
22:48:31  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc5)		 att12
22:48:31  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6)		 att13
22:48:31  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc7)		 att14
22:48:31  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8)		 att15
22:48:31  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc9)		 att16
22:48:31  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att17
22:48:31  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc24)		 att18
22:48:31  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc72)		 att19
22:48:31  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr2,7))) att20
22:48:31  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr3,7))) att21
22:48:31  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr4,7))) att22
22:48:31  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr5,7))) att23
22:48:31  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6,7))) att24
22:48:31  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att25
22:48:31  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att26
22:48:31  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr72,7)))att27
22:48:31  37  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
22:48:31  38  ,hh    att28
22:48:31  39  ,d     att29
22:48:31  40  ,w     att30
22:48:31  41  ,mpm   att31
22:48:31  42  ,trend att32
22:48:31  43  ,ug4 g4
22:48:31  44  ,CASE WHEN ug4 IS NULL THEN NULL WHEN ug4 > 0.0006 THEN 'up' ELSE 'nup' END gatt
22:48:31  45  ,CASE WHEN ug4 IS NULL THEN NULL WHEN ug4< -0.0006 THEN 'up' ELSE 'nup' END gattn
22:48:31  46  FROM q13
22:48:31  47  ORDER BY pair,ydate
22:48:31  48  /

Table created.

Elapsed: 00:00:03.96
22:48:35 SQL> 
22:48:35 SQL> -- rpt
22:48:35 SQL> SELECT pair,trend,gatt,gattn,AVG(g4),COUNT(g4),CORR(dc12,g4)FROM q15
22:48:35   2  GROUP BY pair,trend,gatt,gattn
22:48:35   3  ORDER BY pair,trend,gatt,gattn
22:48:35   4  /

PAIR	     TREND GAT GAT    AVG(G4)  COUNT(G4) CORR(DC12,G4)
------- ---------- --- --- ---------- ---------- -------------
aud_usd 	-1 nup nup .000032531	    1537    -.04095214
aud_usd 	-1 nup up  -.00318952	    3595    .000866359
aud_usd 	-1 up  nup .002978534	    4350    .025943469
aud_usd 	-1			       0
aud_usd 	 1 nup nup 2.2949E-06	    1950    .023122877
aud_usd 	 1 nup up   -.0028891	    4057    .054230128
aud_usd 	 1 up  nup .002936663	    4418    -.17775932
aud_usd 	 1			       0

8 rows selected.

Elapsed: 00:00:00.04
22:48:35 SQL> 
22:48:35 SQL> -- rpt
22:48:35 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
aud_usd 2010-12-16 22:40:00

Elapsed: 00:00:00.01
22:48:35 SQL> 
22:48:35 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
22:48:36 SQL> CREATE TABLE modsrc COMPRESS AS
22:48:36   2  SELECT
22:48:36   3  pair
22:48:36   4  ,ydate
22:48:36   5  ,prdate
22:48:36   6  ,trend
22:48:36   7  ,g4
22:48:36   8  ,gatt
22:48:36   9  ,gattn
22:48:36  10  ,dc12
22:48:36  11  FROM q15
22:48:36  12  /

Table created.

Elapsed: 00:00:00.09
22:48:36 SQL> 
22:48:36 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
22:48:36 SQL> 
22:48:36 SQL> -- rpt
22:48:36 SQL> 
22:48:36 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20819

Elapsed: 00:00:00.34
22:48:36 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      19955

Elapsed: 00:00:00.01
22:48:36 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      19955

Elapsed: 00:00:00.00
22:48:36 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      19955

Elapsed: 00:00:00.00
22:48:36 SQL> 
22:48:36 SQL> SELECT pair,trend,gatt,gattn,AVG(g4),COUNT(g4),CORR(dc12,g4)FROM modsrc
22:48:36   2  GROUP BY pair,trend,gatt,gattn
22:48:36   3  ORDER BY pair,trend,gatt,gattn
22:48:36   4  /

PAIR	     TREND GAT GAT    AVG(G4)  COUNT(G4) CORR(DC12,G4)
------- ---------- --- --- ---------- ---------- -------------
aud_usd 	-1 nup nup .000032531	    1537    -.04095214
aud_usd 	-1 nup up  -.00318952	    3595    .000866359
aud_usd 	-1 up  nup .002978534	    4350    .025943469
aud_usd 	-1			       0
aud_usd 	 1 nup nup 2.2949E-06	    1950    .023122877
aud_usd 	 1 nup up   -.0028891	    4057    .054230128
aud_usd 	 1 up  nup .002936663	    4418    -.17775932
aud_usd 	 1			       0

8 rows selected.

Elapsed: 00:00:00.03
22:48:36 SQL> 
22:48:36 SQL> DROP   TABLE aud_ms10 ;

Table dropped.

Elapsed: 00:00:00.03
22:48:36 SQL> CREATE TABLE aud_ms10 COMPRESS AS
22:48:36   2  SELECT
22:48:36   3  ydate
22:48:36   4  ,trend aud_trend
22:48:36   5  ,g4    aud_g4
22:48:36   6  ,gatt  aud_gatt
22:48:36   7  ,gattn aud_gattn
22:48:36   8  FROM modsrc
22:48:36   9  /

Table created.

Elapsed: 00:00:00.07
22:48:36 SQL> 
22:48:36 SQL> ANALYZE TABLE aud_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
22:48:37 SQL> 
22:48:37 SQL> -- rpt
22:48:37 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g4),MIN(g4),MAX(g4)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G4)	 MIN(G4)    MAX(G4)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-12 21:50:01 2010-12-16 22:40:00	10425	  -.0162    .010925
	-1 2010-09-14 00:35:01 2010-12-16 21:20:00	 9482	   -.017      .0131

Elapsed: 00:00:00.02
22:48:37 SQL> SELECT aud_trend,MIN(ydate),MAX(ydate),COUNT(aud_trend),MIN(aud_g4),MAX(aud_g4)FROM aud_ms10 GROUP BY aud_trend;

 AUD_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(AUD_TREND) MIN(AUD_G4) MAX(AUD_G4)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-12 21:50:01 2010-12-16 22:40:00	      10455	 -.0162     .010925
	-1 2010-09-14 00:35:01 2010-12-16 21:20:00	       9500	  -.017       .0131

Elapsed: 00:00:00.02
22:48:37 SQL> 
22:48:37 SQL> -- I need a copy of q15 attributes
22:48:37 SQL> 
22:48:37 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.05
22:48:37 SQL> CREATE TABLE aud_att COMPRESS AS
22:48:37   2  SELECT
22:48:37   3  ydate
22:48:37   4  ,att00 aud_att00
22:48:37   5  ,att01 aud_att01
22:48:37   6  ,att02 aud_att02
22:48:37   7  ,att03 aud_att03
22:48:37   8  ,att04 aud_att04
22:48:37   9  ,att05 aud_att05
22:48:37  10  ,att06 aud_att06
22:48:37  11  ,att07 aud_att07
22:48:37  12  ,att08 aud_att08
22:48:37  13  ,att09 aud_att09
22:48:37  14  ,att10 aud_att10
22:48:37  15  ,att11 aud_att11
22:48:37  16  ,att12 aud_att12
22:48:37  17  ,att13 aud_att13
22:48:37  18  ,att14 aud_att14
22:48:37  19  ,att15 aud_att15
22:48:37  20  ,att16 aud_att16
22:48:37  21  ,att17 aud_att17
22:48:37  22  ,att18 aud_att18
22:48:37  23  ,att19 aud_att19
22:48:37  24  ,att20 aud_att20
22:48:37  25  ,att21 aud_att21
22:48:37  26  ,att22 aud_att22
22:48:37  27  ,att23 aud_att23
22:48:37  28  ,att24 aud_att24
22:48:37  29  ,att25 aud_att25
22:48:37  30  ,att26 aud_att26
22:48:37  31  ,att27 aud_att27
22:48:37  32  ,att28 aud_att28
22:48:37  33  ,att29 aud_att29
22:48:37  34  ,att30 aud_att30
22:48:37  35  ,att31 aud_att31
22:48:37  36  ,att32 aud_att32
22:48:37  37  FROM q15
22:48:37  38  /

Table created.

Elapsed: 00:00:00.14
22:48:37 SQL> 
22:48:37 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.41
22:48:37 SQL> 
22:48:37 SQL> -- rpt
22:48:37 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     19955

Elapsed: 00:00:00.01
22:48:37 SQL> 
22:48:37 SQL> --
22:48:37 SQL> -- gbp10.sql
22:48:37 SQL> --
22:48:37 SQL> 
22:48:37 SQL> -- Creates views and tables for backtesting a forex SVM strategy
22:48:37 SQL> 
22:48:37 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.44
22:48:38 SQL> 
22:48:38 SQL> -- I created di5min here:
22:48:38 SQL> -- /pt/s/rlk/svm4hp/update_di5min.sql
22:48:38 SQL> 
22:48:38 SQL> CREATE OR REPLACE VIEW q11 AS
22:48:38   2  SELECT
22:48:38   3  pair
22:48:38   4  ,ydate
22:48:38   5  ,prdate
22:48:38   6  ,rownum rnum -- acts as t in my time-series
22:48:38   7  ,clse
22:48:38   8  ,LAG(clse,12*1,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg1
22:48:38   9  ,LAG(clse,12*2,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg2
22:48:38  10  ,LAG(clse,12*3,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg3
22:48:38  11  ,LAG(clse,12*4,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg4
22:48:38  12  ,LAG(clse,12*5,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg5
22:48:38  13  ,LAG(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg6
22:48:38  14  ,LAG(clse,12*7,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg7
22:48:38  15  ,LAG(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg8
22:48:38  16  ,LAG(clse,12*9,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg9
22:48:38  17  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg12
22:48:38  18  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg18
22:48:38  19  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg24
22:48:38  20  ,LAG(clse,12*72,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg72
22:48:38  21  ,LEAD(clse,12*4,NULL)OVER(PARTITION BY pair ORDER BY ydate) ld4
22:48:38  22  FROM di5min WHERE pair LIKE'%gbp%'
22:48:38  23  ORDER BY ydate
22:48:38  24  /

View created.

Elapsed: 00:00:00.08
22:48:38 SQL> 
22:48:38 SQL> -- rpt
22:48:38 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
gbp_usd        20821

Elapsed: 00:00:00.36
22:48:38 SQL> 
22:48:38 SQL> -- Calc deltas and gains
22:48:38 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.23
22:48:38 SQL> 
22:48:38 SQL> CREATE TABLE q13 COMPRESS AS
22:48:38   2  SELECT
22:48:38   3  pair
22:48:38   4  ,ydate
22:48:38   5  ,prdate
22:48:38   6  ,rnum
22:48:38   7  ,lg4
22:48:38   8  ,lg8
22:48:38   9  ,lg12
22:48:38  10  ,ld4
22:48:38  11  ,CASE WHEN(clse-lg12)>0 then 1 ELSE -1 END trend
22:48:38  12  -- step by 1
22:48:38  13  ,clse-lg1 d01
22:48:38  14  ,lg1-lg2	d12
22:48:38  15  ,lg2-lg3	d23
22:48:38  16  ,lg3-lg4	d34
22:48:38  17  ,lg4-lg5	d45
22:48:38  18  ,lg5-lg6	d56
22:48:38  19  ,lg6-lg7	d67
22:48:38  20  ,lg7-lg8	d78
22:48:38  21  ,lg8-lg9	d89
22:48:38  22  -- step by 2
22:48:38  23  ,clse-lg2 d02
22:48:38  24  ,lg2-lg4 d24
22:48:38  25  ,lg4-lg6 d46
22:48:38  26  ,lg6-lg8 d68
22:48:38  27  -- step by 3
22:48:38  28  ,clse-lg3 d03
22:48:38  29  ,lg3-lg6	d36
22:48:38  30  ,lg6-lg9	d69
22:48:38  31  ,lg9-lg12 d912
22:48:38  32  -- step by 4
22:48:38  33  ,clse-lg4 d04
22:48:38  34  ,lg4-lg8	d48
22:48:38  35  ,lg8-lg12 d812
22:48:38  36  ,lg6-lg12 d612
22:48:38  37  ,lg12-lg18 d1218
22:48:38  38  --
22:48:38  39  ,ABS(clse-lg1)dc1
22:48:38  40  ,ABS(clse-lg2)dc2
22:48:38  41  ,ABS(clse-lg3)dc3
22:48:38  42  ,ABS(clse-lg4)dc4
22:48:38  43  ,ABS(clse-lg5)dc5
22:48:38  44  ,ABS(clse-lg6)dc6
22:48:38  45  ,ABS(clse-lg7)dc7
22:48:38  46  ,ABS(clse-lg8)dc8
22:48:38  47  ,ABS(clse-lg9)dc9
22:48:38  48  ,ABS(clse-lg12)dc12
22:48:38  49  ,ABS(clse-lg18)dc18
22:48:38  50  ,ABS(clse-lg24)dc24
22:48:38  51  ,ABS(clse-lg72)dc72
22:48:38  52  ,(ld4-clse) ug4
22:48:38  53  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*2  PRECEDING AND CURRENT ROW)crr2
22:48:38  54  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*3  PRECEDING AND CURRENT ROW)crr3
22:48:38  55  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
22:48:38  56  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*5  PRECEDING AND CURRENT ROW)crr5
22:48:38  57  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
22:48:38  58  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*7  PRECEDING AND CURRENT ROW)crr7
22:48:38  59  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
22:48:38  60  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*9  PRECEDING AND CURRENT ROW)crr9
22:48:38  61  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
22:48:38  62  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
22:48:38  63  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*72 PRECEDING AND CURRENT ROW)crr72
22:48:38  64  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:48:38  65  ,0+TO_CHAR(ydate,'D')d
22:48:38  66  ,0+TO_CHAR(ydate,'W')w
22:48:38  67  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:48:38  68  FROM q11
22:48:38  69  -- I dont want any NULL values from the LAG() functions:
22:48:38  70  WHERE lg72 > 0
22:48:38  71  ORDER BY pair,ydate
22:48:38  72  /

Table created.

Elapsed: 00:00:01.72
22:48:40 SQL> 
22:48:40 SQL> -- rpt
22:48:40 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    9731
	-1	   10226

Elapsed: 00:00:00.03
22:48:40 SQL> 
22:48:40 SQL> -- Calc gains and ntiles
22:48:40 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.11
22:48:40 SQL> CREATE TABLE q15 COMPRESS AS
22:48:40   2  SELECT
22:48:40   3  pair
22:48:40   4  ,ydate
22:48:40   5  ,prdate -- Should be unique
22:48:40   6  ,trend -- +1 or -1
22:48:40   7  ,dc12 -- next statement needs this
22:48:40   8  -- Use NTILE() to derive some attributes
22:48:40   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d12))		 att00
22:48:40  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d23))		 att01
22:48:40  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d34))		 att02
22:48:40  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d45))		 att03
22:48:40  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d56))		 att04
22:48:40  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d67))		 att05
22:48:40  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d78))		 att06
22:48:40  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d89))		 att07
22:48:40  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d912)) 	 att08
22:48:40  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc2)		 att09
22:48:40  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc3)		 att10
22:48:40  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc4)		 att11
22:48:40  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc5)		 att12
22:48:40  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6)		 att13
22:48:40  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc7)		 att14
22:48:40  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8)		 att15
22:48:40  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc9)		 att16
22:48:40  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att17
22:48:40  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc24)		 att18
22:48:40  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc72)		 att19
22:48:40  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr2,7))) att20
22:48:40  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr3,7))) att21
22:48:40  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr4,7))) att22
22:48:40  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr5,7))) att23
22:48:40  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6,7))) att24
22:48:40  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att25
22:48:40  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att26
22:48:40  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr72,7)))att27
22:48:40  37  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
22:48:40  38  ,hh    att28
22:48:40  39  ,d     att29
22:48:40  40  ,w     att30
22:48:40  41  ,mpm   att31
22:48:40  42  ,trend att32
22:48:40  43  ,ug4 g4
22:48:40  44  ,CASE WHEN ug4 IS NULL THEN NULL WHEN ug4 > 0.0006 THEN 'up' ELSE 'nup' END gatt
22:48:40  45  ,CASE WHEN ug4 IS NULL THEN NULL WHEN ug4< -0.0006 THEN 'up' ELSE 'nup' END gattn
22:48:40  46  FROM q13
22:48:40  47  ORDER BY pair,ydate
22:48:40  48  /

Table created.

Elapsed: 00:00:04.24
22:48:44 SQL> 
22:48:44 SQL> -- rpt
22:48:44 SQL> SELECT pair,trend,gatt,gattn,AVG(g4),COUNT(g4),CORR(dc12,g4)FROM q15
22:48:44   2  GROUP BY pair,trend,gatt,gattn
22:48:44   3  ORDER BY pair,trend,gatt,gattn
22:48:44   4  /

PAIR	     TREND GAT GAT    AVG(G4)  COUNT(G4) CORR(DC12,G4)
------- ---------- --- --- ---------- ---------- -------------
gbp_usd 	-1 nup nup -5.246E-07	    1811    .059906803
gbp_usd 	-1 nup up  -.00327618	    4038    -.01089499
gbp_usd 	-1 up  nup .003111012	    4377    -.09233128
gbp_usd 	 1 nup nup .000010662	    1625    .015390196
gbp_usd 	 1 nup up  -.00321854	    4133    -.00827244
gbp_usd 	 1 up  nup .003575446	    3925    -.16628472
gbp_usd 	 1			       0

7 rows selected.

Elapsed: 00:00:00.04
22:48:44 SQL> 
22:48:44 SQL> -- rpt
22:48:44 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
gbp_usd 2010-12-16 22:40:00

Elapsed: 00:00:00.01
22:48:44 SQL> 
22:48:44 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.18
22:48:45 SQL> CREATE TABLE modsrc COMPRESS AS
22:48:45   2  SELECT
22:48:45   3  pair
22:48:45   4  ,ydate
22:48:45   5  ,prdate
22:48:45   6  ,trend
22:48:45   7  ,g4
22:48:45   8  ,gatt
22:48:45   9  ,gattn
22:48:45  10  ,dc12
22:48:45  11  FROM q15
22:48:45  12  /

Table created.

Elapsed: 00:00:00.09
22:48:45 SQL> 
22:48:45 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
22:48:45 SQL> 
22:48:45 SQL> -- rpt
22:48:45 SQL> 
22:48:45 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20821

Elapsed: 00:00:00.35
22:48:45 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      19957

Elapsed: 00:00:00.01
22:48:45 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      19957

Elapsed: 00:00:00.00
22:48:45 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      19957

Elapsed: 00:00:00.01
22:48:45 SQL> 
22:48:45 SQL> SELECT pair,trend,gatt,gattn,AVG(g4),COUNT(g4),CORR(dc12,g4)FROM modsrc
22:48:45   2  GROUP BY pair,trend,gatt,gattn
22:48:45   3  ORDER BY pair,trend,gatt,gattn
22:48:45   4  /

PAIR	     TREND GAT GAT    AVG(G4)  COUNT(G4) CORR(DC12,G4)
------- ---------- --- --- ---------- ---------- -------------
gbp_usd 	-1 nup nup -5.246E-07	    1811    .059906803
gbp_usd 	-1 nup up  -.00327618	    4038    -.01089499
gbp_usd 	-1 up  nup .003111012	    4377    -.09233128
gbp_usd 	 1 nup nup .000010662	    1625    .015390196
gbp_usd 	 1 nup up  -.00321854	    4133    -.00827244
gbp_usd 	 1 up  nup .003575446	    3925    -.16628472
gbp_usd 	 1			       0

7 rows selected.

Elapsed: 00:00:00.02
22:48:45 SQL> 
22:48:45 SQL> DROP   TABLE gbp_ms10 ;

Table dropped.

Elapsed: 00:00:00.04
22:48:45 SQL> CREATE TABLE gbp_ms10 COMPRESS AS
22:48:45   2  SELECT
22:48:45   3  ydate
22:48:45   4  ,trend gbp_trend
22:48:45   5  ,g4    gbp_g4
22:48:45   6  ,gatt  gbp_gatt
22:48:45   7  ,gattn gbp_gattn
22:48:45   8  FROM modsrc
22:48:45   9  /

Table created.

Elapsed: 00:00:00.07
22:48:45 SQL> 
22:48:45 SQL> ANALYZE TABLE gbp_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
22:48:46 SQL> 
22:48:46 SQL> -- rpt
22:48:46 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g4),MIN(g4),MAX(g4)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G4)	 MIN(G4)    MAX(G4)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-13 00:05:01 2010-12-16 22:40:00	 9683	  -.0194      .0179
	-1 2010-09-12 21:50:01 2010-12-16 07:30:00	10226	  -.0153      .0159

Elapsed: 00:00:00.02
22:48:46 SQL> SELECT gbp_trend,MIN(ydate),MAX(ydate),COUNT(gbp_trend),MIN(gbp_g4),MAX(gbp_g4)FROM gbp_ms10 GROUP BY gbp_trend;

 GBP_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(GBP_TREND) MIN(GBP_G4) MAX(GBP_G4)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-13 00:05:01 2010-12-16 22:40:00	       9731	 -.0194       .0179
	-1 2010-09-12 21:50:01 2010-12-16 07:30:00	      10226	 -.0153       .0159

Elapsed: 00:00:00.01
22:48:46 SQL> 
22:48:46 SQL> -- I need a copy of q15 attributes
22:48:46 SQL> 
22:48:46 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.04
22:48:46 SQL> CREATE TABLE gbp_att COMPRESS AS
22:48:46   2  SELECT
22:48:46   3  ydate
22:48:46   4  ,att00 gbp_att00
22:48:46   5  ,att01 gbp_att01
22:48:46   6  ,att02 gbp_att02
22:48:46   7  ,att03 gbp_att03
22:48:46   8  ,att04 gbp_att04
22:48:46   9  ,att05 gbp_att05
22:48:46  10  ,att06 gbp_att06
22:48:46  11  ,att07 gbp_att07
22:48:46  12  ,att08 gbp_att08
22:48:46  13  ,att09 gbp_att09
22:48:46  14  ,att10 gbp_att10
22:48:46  15  ,att11 gbp_att11
22:48:46  16  ,att12 gbp_att12
22:48:46  17  ,att13 gbp_att13
22:48:46  18  ,att14 gbp_att14
22:48:46  19  ,att15 gbp_att15
22:48:46  20  ,att16 gbp_att16
22:48:46  21  ,att17 gbp_att17
22:48:46  22  ,att18 gbp_att18
22:48:46  23  ,att19 gbp_att19
22:48:46  24  ,att20 gbp_att20
22:48:46  25  ,att21 gbp_att21
22:48:46  26  ,att22 gbp_att22
22:48:46  27  ,att23 gbp_att23
22:48:46  28  ,att24 gbp_att24
22:48:46  29  ,att25 gbp_att25
22:48:46  30  ,att26 gbp_att26
22:48:46  31  ,att27 gbp_att27
22:48:46  32  ,att28 gbp_att28
22:48:46  33  ,att29 gbp_att29
22:48:46  34  ,att30 gbp_att30
22:48:46  35  ,att31 gbp_att31
22:48:46  36  ,att32 gbp_att32
22:48:46  37  FROM q15
22:48:46  38  /

Table created.

Elapsed: 00:00:00.14
22:48:46 SQL> 
22:48:46 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.39
22:48:46 SQL> 
22:48:46 SQL> -- rpt
22:48:46 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     19957

Elapsed: 00:00:00.00
22:48:46 SQL> 
22:48:46 SQL> --
22:48:46 SQL> -- jpy10.sql
22:48:46 SQL> --
22:48:46 SQL> 
22:48:46 SQL> -- Creates views and tables for backtesting a forex SVM strategy
22:48:46 SQL> 
22:48:46 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.78
22:48:47 SQL> 
22:48:47 SQL> -- I created di5min here:
22:48:47 SQL> -- /pt/s/rlk/svm4hp/update_di5min.sql
22:48:47 SQL> 
22:48:47 SQL> CREATE OR REPLACE VIEW q11 AS
22:48:47   2  SELECT
22:48:47   3  pair
22:48:47   4  ,ydate
22:48:47   5  ,prdate
22:48:47   6  ,rownum rnum -- acts as t in my time-series
22:48:47   7  ,clse
22:48:47   8  ,LAG(clse,12*1,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg1
22:48:47   9  ,LAG(clse,12*2,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg2
22:48:47  10  ,LAG(clse,12*3,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg3
22:48:47  11  ,LAG(clse,12*4,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg4
22:48:47  12  ,LAG(clse,12*5,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg5
22:48:47  13  ,LAG(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg6
22:48:47  14  ,LAG(clse,12*7,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg7
22:48:47  15  ,LAG(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg8
22:48:47  16  ,LAG(clse,12*9,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg9
22:48:47  17  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg12
22:48:47  18  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg18
22:48:47  19  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg24
22:48:47  20  ,LAG(clse,12*72,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg72
22:48:47  21  ,LEAD(clse,12*4,NULL)OVER(PARTITION BY pair ORDER BY ydate) ld4
22:48:47  22  FROM di5min WHERE pair LIKE'%jpy%'
22:48:47  23  ORDER BY ydate
22:48:47  24  /

View created.

Elapsed: 00:00:00.05
22:48:47 SQL> 
22:48:47 SQL> -- rpt
22:48:47 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
usd_jpy        20822

Elapsed: 00:00:00.35
22:48:47 SQL> 
22:48:47 SQL> -- Calc deltas and gains
22:48:47 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.17
22:48:48 SQL> 
22:48:48 SQL> CREATE TABLE q13 COMPRESS AS
22:48:48   2  SELECT
22:48:48   3  pair
22:48:48   4  ,ydate
22:48:48   5  ,prdate
22:48:48   6  ,rnum
22:48:48   7  ,lg4
22:48:48   8  ,lg8
22:48:48   9  ,lg12
22:48:48  10  ,ld4
22:48:48  11  ,CASE WHEN(clse-lg12)>0 then 1 ELSE -1 END trend
22:48:48  12  -- step by 1
22:48:48  13  ,clse-lg1 d01
22:48:48  14  ,lg1-lg2	d12
22:48:48  15  ,lg2-lg3	d23
22:48:48  16  ,lg3-lg4	d34
22:48:48  17  ,lg4-lg5	d45
22:48:48  18  ,lg5-lg6	d56
22:48:48  19  ,lg6-lg7	d67
22:48:48  20  ,lg7-lg8	d78
22:48:48  21  ,lg8-lg9	d89
22:48:48  22  -- step by 2
22:48:48  23  ,clse-lg2 d02
22:48:48  24  ,lg2-lg4 d24
22:48:48  25  ,lg4-lg6 d46
22:48:48  26  ,lg6-lg8 d68
22:48:48  27  -- step by 3
22:48:48  28  ,clse-lg3 d03
22:48:48  29  ,lg3-lg6	d36
22:48:48  30  ,lg6-lg9	d69
22:48:48  31  ,lg9-lg12 d912
22:48:48  32  -- step by 4
22:48:48  33  ,clse-lg4 d04
22:48:48  34  ,lg4-lg8	d48
22:48:48  35  ,lg8-lg12 d812
22:48:48  36  ,lg6-lg12 d612
22:48:48  37  ,lg12-lg18 d1218
22:48:48  38  --
22:48:48  39  ,ABS(clse-lg1)dc1
22:48:48  40  ,ABS(clse-lg2)dc2
22:48:48  41  ,ABS(clse-lg3)dc3
22:48:48  42  ,ABS(clse-lg4)dc4
22:48:48  43  ,ABS(clse-lg5)dc5
22:48:48  44  ,ABS(clse-lg6)dc6
22:48:48  45  ,ABS(clse-lg7)dc7
22:48:48  46  ,ABS(clse-lg8)dc8
22:48:48  47  ,ABS(clse-lg9)dc9
22:48:48  48  ,ABS(clse-lg12)dc12
22:48:48  49  ,ABS(clse-lg18)dc18
22:48:48  50  ,ABS(clse-lg24)dc24
22:48:48  51  ,ABS(clse-lg72)dc72
22:48:48  52  ,(ld4-clse) ug4
22:48:48  53  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*2  PRECEDING AND CURRENT ROW)crr2
22:48:48  54  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*3  PRECEDING AND CURRENT ROW)crr3
22:48:48  55  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
22:48:48  56  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*5  PRECEDING AND CURRENT ROW)crr5
22:48:48  57  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
22:48:48  58  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*7  PRECEDING AND CURRENT ROW)crr7
22:48:48  59  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
22:48:48  60  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*9  PRECEDING AND CURRENT ROW)crr9
22:48:48  61  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
22:48:48  62  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
22:48:48  63  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*72 PRECEDING AND CURRENT ROW)crr72
22:48:48  64  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:48:48  65  ,0+TO_CHAR(ydate,'D')d
22:48:48  66  ,0+TO_CHAR(ydate,'W')w
22:48:48  67  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:48:48  68  FROM q11
22:48:48  69  -- I dont want any NULL values from the LAG() functions:
22:48:48  70  WHERE lg72 > 0
22:48:48  71  ORDER BY pair,ydate
22:48:48  72  /

Table created.

Elapsed: 00:00:01.66
22:48:49 SQL> 
22:48:49 SQL> -- rpt
22:48:49 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    9257
	-1	   10701

Elapsed: 00:00:00.03
22:48:49 SQL> 
22:48:49 SQL> -- Calc gains and ntiles
22:48:49 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.13
22:48:49 SQL> CREATE TABLE q15 COMPRESS AS
22:48:49   2  SELECT
22:48:49   3  pair
22:48:49   4  ,ydate
22:48:49   5  ,prdate -- Should be unique
22:48:49   6  ,trend -- +1 or -1
22:48:49   7  ,dc12 -- next statement needs this
22:48:49   8  -- Use NTILE() to derive some attributes
22:48:49   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d12))		 att00
22:48:49  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d23))		 att01
22:48:49  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d34))		 att02
22:48:49  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d45))		 att03
22:48:49  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d56))		 att04
22:48:49  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d67))		 att05
22:48:49  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d78))		 att06
22:48:49  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d89))		 att07
22:48:49  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d912)) 	 att08
22:48:49  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc2)		 att09
22:48:49  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc3)		 att10
22:48:49  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc4)		 att11
22:48:49  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc5)		 att12
22:48:49  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6)		 att13
22:48:49  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc7)		 att14
22:48:49  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8)		 att15
22:48:49  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc9)		 att16
22:48:49  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att17
22:48:49  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc24)		 att18
22:48:49  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc72)		 att19
22:48:49  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr2,7))) att20
22:48:49  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr3,7))) att21
22:48:49  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr4,7))) att22
22:48:49  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr5,7))) att23
22:48:49  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6,7))) att24
22:48:49  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att25
22:48:49  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att26
22:48:49  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr72,7)))att27
22:48:49  37  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
22:48:49  38  ,hh    att28
22:48:49  39  ,d     att29
22:48:49  40  ,w     att30
22:48:49  41  ,mpm   att31
22:48:49  42  ,trend att32
22:48:49  43  ,ug4 g4
22:48:49  44  ,CASE WHEN ug4 IS NULL THEN NULL WHEN ug4 > 0.0006 THEN 'up' ELSE 'nup' END gatt
22:48:49  45  ,CASE WHEN ug4 IS NULL THEN NULL WHEN ug4< -0.0006 THEN 'up' ELSE 'nup' END gattn
22:48:49  46  FROM q13
22:48:49  47  ORDER BY pair,ydate
22:48:49  48  /

Table created.

Elapsed: 00:00:03.99
22:48:53 SQL> 
22:48:53 SQL> -- rpt
22:48:53 SQL> SELECT pair,trend,gatt,gattn,AVG(g4),COUNT(g4),CORR(dc12,g4)FROM q15
22:48:53   2  GROUP BY pair,trend,gatt,gattn
22:48:53   3  ORDER BY pair,trend,gatt,gattn
22:48:53   4  /

PAIR	     TREND GAT GAT    AVG(G4)  COUNT(G4) CORR(DC12,G4)
------- ---------- --- --- ---------- ---------- -------------
usd_jpy 	-1 nup nup	    0	     181
usd_jpy 	-1 nup up  -.13706863	    5187    .022862812
usd_jpy 	-1 up  nup .142687252	    5287    .058730771
usd_jpy 	-1			       0
usd_jpy 	 1 nup nup	    0	     167
usd_jpy 	 1 nup up  -.13441585	    5003     -.0145611
usd_jpy 	 1 up  nup .152344553	    4085    .184293761
usd_jpy 	 1			       0

8 rows selected.

Elapsed: 00:00:00.04
22:48:53 SQL> 
22:48:53 SQL> -- rpt
22:48:53 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
usd_jpy 2010-12-16 22:40:00

Elapsed: 00:00:00.03
22:48:53 SQL> 
22:48:53 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.14
22:48:54 SQL> CREATE TABLE modsrc COMPRESS AS
22:48:54   2  SELECT
22:48:54   3  pair
22:48:54   4  ,ydate
22:48:54   5  ,prdate
22:48:54   6  ,trend
22:48:54   7  ,g4
22:48:54   8  ,gatt
22:48:54   9  ,gattn
22:48:54  10  ,dc12
22:48:54  11  FROM q15
22:48:54  12  /

Table created.

Elapsed: 00:00:00.10
22:48:54 SQL> 
22:48:54 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
22:48:54 SQL> 
22:48:54 SQL> -- rpt
22:48:54 SQL> 
22:48:54 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20822

Elapsed: 00:00:00.35
22:48:54 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      19958

Elapsed: 00:00:00.00
22:48:54 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      19958

Elapsed: 00:00:00.01
22:48:54 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      19958

Elapsed: 00:00:00.00
22:48:54 SQL> 
22:48:54 SQL> SELECT pair,trend,gatt,gattn,AVG(g4),COUNT(g4),CORR(dc12,g4)FROM modsrc
22:48:54   2  GROUP BY pair,trend,gatt,gattn
22:48:54   3  ORDER BY pair,trend,gatt,gattn
22:48:54   4  /

PAIR	     TREND GAT GAT    AVG(G4)  COUNT(G4) CORR(DC12,G4)
------- ---------- --- --- ---------- ---------- -------------
usd_jpy 	-1 nup nup	    0	     181
usd_jpy 	-1 nup up  -.13706863	    5187    .022862812
usd_jpy 	-1 up  nup .142687252	    5287    .058730771
usd_jpy 	-1			       0
usd_jpy 	 1 nup nup	    0	     167
usd_jpy 	 1 nup up  -.13441585	    5003     -.0145611
usd_jpy 	 1 up  nup .152344553	    4085    .184293761
usd_jpy 	 1			       0

8 rows selected.

Elapsed: 00:00:00.04
22:48:54 SQL> 
22:48:54 SQL> DROP   TABLE jpy_ms10 ;

Table dropped.

Elapsed: 00:00:00.03
22:48:54 SQL> CREATE TABLE jpy_ms10 COMPRESS AS
22:48:54   2  SELECT
22:48:54   3  ydate
22:48:54   4  ,trend jpy_trend
22:48:54   5  ,g4    jpy_g4
22:48:54   6  ,gatt  jpy_gatt
22:48:54   7  ,gattn jpy_gattn
22:48:54   8  FROM modsrc
22:48:54   9  /

Table created.

Elapsed: 00:00:00.07
22:48:54 SQL> 
22:48:54 SQL> ANALYZE TABLE jpy_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
22:48:55 SQL> 
22:48:55 SQL> -- rpt
22:48:55 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g4),MIN(g4),MAX(g4)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G4)	 MIN(G4)    MAX(G4)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-12 21:50:01 2010-12-16 21:35:00	 9255	   -1.07	1.5
	-1 2010-09-12 23:35:01 2010-12-16 22:40:00	10655	 -1.0775       1.99

Elapsed: 00:00:00.02
22:48:55 SQL> SELECT jpy_trend,MIN(ydate),MAX(ydate),COUNT(jpy_trend),MIN(jpy_g4),MAX(jpy_g4)FROM jpy_ms10 GROUP BY jpy_trend;

 JPY_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(JPY_TREND) MIN(JPY_G4) MAX(JPY_G4)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-12 21:50:01 2010-12-16 21:35:00	       9257	  -1.07 	1.5
	-1 2010-09-12 23:35:01 2010-12-16 22:40:00	      10701	-1.0775        1.99

Elapsed: 00:00:00.02
22:48:55 SQL> 
22:48:55 SQL> -- I need a copy of q15 attributes
22:48:55 SQL> 
22:48:55 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.03
22:48:55 SQL> CREATE TABLE jpy_att COMPRESS AS
22:48:55   2  SELECT
22:48:55   3  ydate
22:48:55   4  ,att00 jpy_att00
22:48:55   5  ,att01 jpy_att01
22:48:55   6  ,att02 jpy_att02
22:48:55   7  ,att03 jpy_att03
22:48:55   8  ,att04 jpy_att04
22:48:55   9  ,att05 jpy_att05
22:48:55  10  ,att06 jpy_att06
22:48:55  11  ,att07 jpy_att07
22:48:55  12  ,att08 jpy_att08
22:48:55  13  ,att09 jpy_att09
22:48:55  14  ,att10 jpy_att10
22:48:55  15  ,att11 jpy_att11
22:48:55  16  ,att12 jpy_att12
22:48:55  17  ,att13 jpy_att13
22:48:55  18  ,att14 jpy_att14
22:48:55  19  ,att15 jpy_att15
22:48:55  20  ,att16 jpy_att16
22:48:55  21  ,att17 jpy_att17
22:48:55  22  ,att18 jpy_att18
22:48:55  23  ,att19 jpy_att19
22:48:55  24  ,att20 jpy_att20
22:48:55  25  ,att21 jpy_att21
22:48:55  26  ,att22 jpy_att22
22:48:55  27  ,att23 jpy_att23
22:48:55  28  ,att24 jpy_att24
22:48:55  29  ,att25 jpy_att25
22:48:55  30  ,att26 jpy_att26
22:48:55  31  ,att27 jpy_att27
22:48:55  32  ,att28 jpy_att28
22:48:55  33  ,att29 jpy_att29
22:48:55  34  ,att30 jpy_att30
22:48:55  35  ,att31 jpy_att31
22:48:55  36  ,att32 jpy_att32
22:48:55  37  FROM q15
22:48:55  38  /

Table created.

Elapsed: 00:00:00.13
22:48:55 SQL> 
22:48:55 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.44
22:48:55 SQL> 
22:48:55 SQL> -- rpt
22:48:55 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     19958

Elapsed: 00:00:00.01
22:48:55 SQL> 
22:48:55 SQL> --
22:48:55 SQL> -- cad10.sql
22:48:55 SQL> --
22:48:55 SQL> 
22:48:55 SQL> -- Creates views and tables for backtesting a forex SVM strategy
22:48:55 SQL> 
22:48:55 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.30
22:48:56 SQL> 
22:48:56 SQL> -- I created di5min here:
22:48:56 SQL> -- /pt/s/rlk/svm4hp/update_di5min.sql
22:48:56 SQL> 
22:48:56 SQL> CREATE OR REPLACE VIEW q11 AS
22:48:56   2  SELECT
22:48:56   3  pair
22:48:56   4  ,ydate
22:48:56   5  ,prdate
22:48:56   6  ,rownum rnum -- acts as t in my time-series
22:48:56   7  ,clse
22:48:56   8  ,LAG(clse,12*1,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg1
22:48:56   9  ,LAG(clse,12*2,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg2
22:48:56  10  ,LAG(clse,12*3,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg3
22:48:56  11  ,LAG(clse,12*4,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg4
22:48:56  12  ,LAG(clse,12*5,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg5
22:48:56  13  ,LAG(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg6
22:48:56  14  ,LAG(clse,12*7,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg7
22:48:56  15  ,LAG(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg8
22:48:56  16  ,LAG(clse,12*9,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg9
22:48:56  17  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg12
22:48:56  18  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg18
22:48:56  19  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg24
22:48:56  20  ,LAG(clse,12*72,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg72
22:48:56  21  ,LEAD(clse,12*4,NULL)OVER(PARTITION BY pair ORDER BY ydate) ld4
22:48:56  22  FROM di5min WHERE pair LIKE'%cad%'
22:48:56  23  ORDER BY ydate
22:48:56  24  /

View created.

Elapsed: 00:00:00.05
22:48:56 SQL> 
22:48:56 SQL> -- rpt
22:48:56 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
usd_cad        20818

Elapsed: 00:00:00.35
22:48:56 SQL> 
22:48:56 SQL> -- Calc deltas and gains
22:48:56 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.24
22:48:56 SQL> 
22:48:56 SQL> CREATE TABLE q13 COMPRESS AS
22:48:56   2  SELECT
22:48:56   3  pair
22:48:56   4  ,ydate
22:48:56   5  ,prdate
22:48:56   6  ,rnum
22:48:56   7  ,lg4
22:48:56   8  ,lg8
22:48:56   9  ,lg12
22:48:56  10  ,ld4
22:48:56  11  ,CASE WHEN(clse-lg12)>0 then 1 ELSE -1 END trend
22:48:56  12  -- step by 1
22:48:56  13  ,clse-lg1 d01
22:48:56  14  ,lg1-lg2	d12
22:48:56  15  ,lg2-lg3	d23
22:48:56  16  ,lg3-lg4	d34
22:48:56  17  ,lg4-lg5	d45
22:48:56  18  ,lg5-lg6	d56
22:48:56  19  ,lg6-lg7	d67
22:48:56  20  ,lg7-lg8	d78
22:48:56  21  ,lg8-lg9	d89
22:48:56  22  -- step by 2
22:48:56  23  ,clse-lg2 d02
22:48:56  24  ,lg2-lg4 d24
22:48:56  25  ,lg4-lg6 d46
22:48:56  26  ,lg6-lg8 d68
22:48:56  27  -- step by 3
22:48:56  28  ,clse-lg3 d03
22:48:56  29  ,lg3-lg6	d36
22:48:56  30  ,lg6-lg9	d69
22:48:56  31  ,lg9-lg12 d912
22:48:56  32  -- step by 4
22:48:56  33  ,clse-lg4 d04
22:48:56  34  ,lg4-lg8	d48
22:48:56  35  ,lg8-lg12 d812
22:48:56  36  ,lg6-lg12 d612
22:48:56  37  ,lg12-lg18 d1218
22:48:56  38  --
22:48:56  39  ,ABS(clse-lg1)dc1
22:48:56  40  ,ABS(clse-lg2)dc2
22:48:56  41  ,ABS(clse-lg3)dc3
22:48:56  42  ,ABS(clse-lg4)dc4
22:48:56  43  ,ABS(clse-lg5)dc5
22:48:56  44  ,ABS(clse-lg6)dc6
22:48:56  45  ,ABS(clse-lg7)dc7
22:48:56  46  ,ABS(clse-lg8)dc8
22:48:56  47  ,ABS(clse-lg9)dc9
22:48:56  48  ,ABS(clse-lg12)dc12
22:48:56  49  ,ABS(clse-lg18)dc18
22:48:56  50  ,ABS(clse-lg24)dc24
22:48:56  51  ,ABS(clse-lg72)dc72
22:48:56  52  ,(ld4-clse) ug4
22:48:56  53  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*2  PRECEDING AND CURRENT ROW)crr2
22:48:56  54  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*3  PRECEDING AND CURRENT ROW)crr3
22:48:56  55  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
22:48:56  56  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*5  PRECEDING AND CURRENT ROW)crr5
22:48:56  57  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
22:48:56  58  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*7  PRECEDING AND CURRENT ROW)crr7
22:48:56  59  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
22:48:56  60  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*9  PRECEDING AND CURRENT ROW)crr9
22:48:56  61  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
22:48:56  62  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
22:48:56  63  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*72 PRECEDING AND CURRENT ROW)crr72
22:48:56  64  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:48:56  65  ,0+TO_CHAR(ydate,'D')d
22:48:56  66  ,0+TO_CHAR(ydate,'W')w
22:48:56  67  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:48:56  68  FROM q11
22:48:56  69  -- I dont want any NULL values from the LAG() functions:
22:48:56  70  WHERE lg72 > 0
22:48:56  71  ORDER BY pair,ydate
22:48:56  72  /

Table created.

Elapsed: 00:00:01.69
22:48:58 SQL> 
22:48:58 SQL> -- rpt
22:48:58 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    9013
	-1	   10941

Elapsed: 00:00:00.03
22:48:58 SQL> 
22:48:58 SQL> -- Calc gains and ntiles
22:48:58 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.12
22:48:58 SQL> CREATE TABLE q15 COMPRESS AS
22:48:58   2  SELECT
22:48:58   3  pair
22:48:58   4  ,ydate
22:48:58   5  ,prdate -- Should be unique
22:48:58   6  ,trend -- +1 or -1
22:48:58   7  ,dc12 -- next statement needs this
22:48:58   8  -- Use NTILE() to derive some attributes
22:48:58   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d12))		 att00
22:48:58  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d23))		 att01
22:48:58  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d34))		 att02
22:48:58  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d45))		 att03
22:48:58  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d56))		 att04
22:48:58  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d67))		 att05
22:48:58  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d78))		 att06
22:48:58  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d89))		 att07
22:48:58  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d912)) 	 att08
22:48:58  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc2)		 att09
22:48:58  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc3)		 att10
22:48:58  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc4)		 att11
22:48:58  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc5)		 att12
22:48:58  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6)		 att13
22:48:58  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc7)		 att14
22:48:58  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8)		 att15
22:48:58  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc9)		 att16
22:48:58  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att17
22:48:58  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc24)		 att18
22:48:58  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc72)		 att19
22:48:58  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr2,7))) att20
22:48:58  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr3,7))) att21
22:48:58  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr4,7))) att22
22:48:58  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr5,7))) att23
22:48:58  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6,7))) att24
22:48:58  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att25
22:48:58  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att26
22:48:58  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr72,7)))att27
22:48:58  37  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
22:48:58  38  ,hh    att28
22:48:58  39  ,d     att29
22:48:58  40  ,w     att30
22:48:58  41  ,mpm   att31
22:48:58  42  ,trend att32
22:48:58  43  ,ug4 g4
22:48:58  44  ,CASE WHEN ug4 IS NULL THEN NULL WHEN ug4 > 0.0006 THEN 'up' ELSE 'nup' END gatt
22:48:58  45  ,CASE WHEN ug4 IS NULL THEN NULL WHEN ug4< -0.0006 THEN 'up' ELSE 'nup' END gattn
22:48:58  46  FROM q13
22:48:58  47  ORDER BY pair,ydate
22:48:58  48  /
