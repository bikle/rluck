
SQL*Plus: Release 11.2.0.1.0 Production on Thu Dec 16 03:49:02 2010

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

03:49:02 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
03:49:02 SQL> 03:49:02 SQL> --
03:49:02 SQL> -- eur10.sql
03:49:02 SQL> --
03:49:02 SQL> 
03:49:02 SQL> -- Creates views and tables for backtesting a forex SVM strategy
03:49:02 SQL> 
03:49:02 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.01
03:49:02 SQL> 
03:49:02 SQL> -- I created di5min here:
03:49:02 SQL> -- /pt/s/rlk/svm4hp/update_di5min.sql
03:49:02 SQL> 
03:49:02 SQL> CREATE OR REPLACE VIEW q11 AS
03:49:02   2  SELECT
03:49:02   3  pair
03:49:02   4  ,ydate
03:49:02   5  ,prdate
03:49:02   6  ,rownum rnum -- acts as t in my time-series
03:49:02   7  ,clse
03:49:02   8  ,LAG(clse,6*1,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg1
03:49:02   9  ,LAG(clse,6*2,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg2
03:49:02  10  ,LAG(clse,6*3,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg3
03:49:02  11  ,LAG(clse,6*4,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg4
03:49:02  12  ,LAG(clse,6*5,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg5
03:49:02  13  ,LAG(clse,6*6,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg6
03:49:02  14  ,LAG(clse,6*7,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg7
03:49:02  15  ,LAG(clse,6*8,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg8
03:49:02  16  ,LAG(clse,6*9,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg9
03:49:02  17  ,LAG(clse,6*12,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg12
03:49:02  18  ,LAG(clse,6*18,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg18
03:49:02  19  ,LAG(clse,6*24,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg24
03:49:02  20  ,LAG(clse,6*72,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg72
03:49:02  21  ,LEAD(clse,6*4,NULL)OVER(PARTITION BY pair ORDER BY ydate) ld4
03:49:02  22  FROM di5min WHERE pair LIKE'%eur%'
03:49:02  23  ORDER BY ydate
03:49:02  24  /

View created.

Elapsed: 00:00:00.05
03:49:02 SQL> 
03:49:02 SQL> -- rpt
03:49:02 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
eur_usd        18643

Elapsed: 00:00:00.32
03:49:03 SQL> 
03:49:03 SQL> -- Calc deltas and gains
03:49:03 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.22
03:49:03 SQL> 
03:49:03 SQL> CREATE TABLE q13 COMPRESS AS
03:49:03   2  SELECT
03:49:03   3  pair
03:49:03   4  ,ydate
03:49:03   5  ,prdate
03:49:03   6  ,rnum
03:49:03   7  ,lg4
03:49:03   8  ,lg8
03:49:03   9  ,lg12
03:49:03  10  ,ld4
03:49:03  11  ,CASE WHEN(clse-lg12)>0 then 1 ELSE -1 END trend
03:49:03  12  -- step by 1
03:49:03  13  ,clse-lg1 d01
03:49:03  14  ,lg1-lg2	d12
03:49:03  15  ,lg2-lg3	d23
03:49:03  16  ,lg3-lg4	d34
03:49:03  17  ,lg4-lg5	d45
03:49:03  18  ,lg5-lg6	d56
03:49:03  19  ,lg6-lg7	d67
03:49:03  20  ,lg7-lg8	d78
03:49:03  21  ,lg8-lg9	d89
03:49:03  22  -- step by 2
03:49:03  23  ,clse-lg2 d02
03:49:03  24  ,lg2-lg4 d24
03:49:03  25  ,lg4-lg6 d46
03:49:03  26  ,lg6-lg8 d68
03:49:03  27  -- step by 3
03:49:03  28  ,clse-lg3 d03
03:49:03  29  ,lg3-lg6	d36
03:49:03  30  ,lg6-lg9	d69
03:49:03  31  ,lg9-lg12 d912
03:49:03  32  -- step by 4
03:49:03  33  ,clse-lg4 d04
03:49:03  34  ,lg4-lg8	d48
03:49:03  35  ,lg8-lg12 d812
03:49:03  36  ,lg6-lg12 d612
03:49:03  37  ,lg12-lg18 d1218
03:49:03  38  --
03:49:03  39  ,ABS(clse-lg1)dc1
03:49:03  40  ,ABS(clse-lg2)dc2
03:49:03  41  ,ABS(clse-lg3)dc3
03:49:03  42  ,ABS(clse-lg4)dc4
03:49:03  43  ,ABS(clse-lg5)dc5
03:49:03  44  ,ABS(clse-lg6)dc6
03:49:03  45  ,ABS(clse-lg7)dc7
03:49:03  46  ,ABS(clse-lg8)dc8
03:49:03  47  ,ABS(clse-lg9)dc9
03:49:03  48  ,ABS(clse-lg12)dc12
03:49:03  49  ,ABS(clse-lg18)dc18
03:49:03  50  ,ABS(clse-lg24)dc24
03:49:03  51  ,ABS(clse-lg72)dc72
03:49:03  52  ,(ld4-clse) ug4
03:49:03  53  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*2  PRECEDING AND CURRENT ROW)crr2
03:49:03  54  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*3  PRECEDING AND CURRENT ROW)crr3
03:49:03  55  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*4  PRECEDING AND CURRENT ROW)crr4
03:49:03  56  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*5  PRECEDING AND CURRENT ROW)crr5
03:49:03  57  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*6  PRECEDING AND CURRENT ROW)crr6
03:49:03  58  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*7  PRECEDING AND CURRENT ROW)crr7
03:49:03  59  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*8  PRECEDING AND CURRENT ROW)crr8
03:49:03  60  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*9  PRECEDING AND CURRENT ROW)crr9
03:49:03  61  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*12 PRECEDING AND CURRENT ROW)crr12
03:49:03  62  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*24 PRECEDING AND CURRENT ROW)crr24
03:49:03  63  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*72 PRECEDING AND CURRENT ROW)crr72
03:49:03  64  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
03:49:03  65  ,0+TO_CHAR(ydate,'D')d
03:49:03  66  ,0+TO_CHAR(ydate,'W')w
03:49:03  67  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
03:49:03  68  FROM q11
03:49:03  69  -- I dont want any NULL values from the LAG() functions:
03:49:03  70  WHERE lg72 > 0
03:49:03  71  ORDER BY pair,ydate
03:49:03  72  /

Table created.

Elapsed: 00:00:01.70
03:49:05 SQL> 
03:49:05 SQL> -- rpt
03:49:05 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    9392
	-1	    8819

Elapsed: 00:00:00.02
03:49:05 SQL> 
03:49:05 SQL> -- Calc gains and ntiles
03:49:05 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.09
03:49:05 SQL> CREATE TABLE q15 COMPRESS AS
03:49:05   2  SELECT
03:49:05   3  pair
03:49:05   4  ,ydate
03:49:05   5  ,prdate -- Should be unique
03:49:05   6  ,trend -- +1 or -1
03:49:05   7  ,dc12 -- next statement needs this
03:49:05   8  -- Use NTILE() to derive some attributes
03:49:05   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d12))		 att00
03:49:05  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d23))		 att01
03:49:05  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d34))		 att02
03:49:05  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d45))		 att03
03:49:05  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d56))		 att04
03:49:05  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d67))		 att05
03:49:05  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d78))		 att06
03:49:05  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d89))		 att07
03:49:05  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d912)) 	 att08
03:49:05  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc2)		 att09
03:49:05  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc3)		 att10
03:49:05  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc4)		 att11
03:49:05  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc5)		 att12
03:49:05  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6)		 att13
03:49:05  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc7)		 att14
03:49:05  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8)		 att15
03:49:05  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc9)		 att16
03:49:05  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att17
03:49:05  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc24)		 att18
03:49:05  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc72)		 att19
03:49:05  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr2,7))) att20
03:49:05  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr3,7))) att21
03:49:05  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr4,7))) att22
03:49:05  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr5,7))) att23
03:49:05  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6,7))) att24
03:49:05  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att25
03:49:05  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att26
03:49:05  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr72,7)))att27
03:49:05  37  -- date related integers: hour of day, day of week, week of month:
03:49:05  38  ,hh    att28
03:49:05  39  ,d     att29
03:49:05  40  ,w     att30
03:49:05  41  ,mpm   att31
03:49:05  42  ,trend att32
03:49:05  43  ,ug4 g4
03:49:05  44  ,CASE WHEN ug4 IS NULL THEN NULL WHEN ug4 > 0.0006 THEN 'up' ELSE 'nup' END gatt
03:49:05  45  ,CASE WHEN ug4 IS NULL THEN NULL WHEN ug4< -0.0006 THEN 'up' ELSE 'nup' END gattn
03:49:05  46  FROM q13
03:49:05  47  ORDER BY pair,ydate
03:49:05  48  /

Table created.

Elapsed: 00:00:03.52
03:49:08 SQL> 
03:49:08 SQL> -- rpt
03:49:08 SQL> SELECT pair,trend,gatt,gattn,AVG(g4),COUNT(g4),CORR(dc12,g4)FROM q15
03:49:08   2  GROUP BY pair,trend,gatt,gattn
03:49:08   3  ORDER BY pair,trend,gatt,gattn
03:49:08   4  /

PAIR	     TREND GAT GAT    AVG(G4)  COUNT(G4) CORR(DC12,G4)
------- ---------- --- --- ---------- ---------- -------------
eur_usd 	-1 nup nup -8.638E-06	    1557    .018513141
eur_usd 	-1 nup up  -.00336889	    3550    .025177018
eur_usd 	-1 up  nup .003593303	    3688    -.16667287
eur_usd 	-1			       0
eur_usd 	 1 nup nup -3.539E-06	    1787    .027043047
eur_usd 	 1 nup up  -.00312663	    3855    .082037728
eur_usd 	 1 up  nup .003475607	    3750    -.03599509

7 rows selected.

Elapsed: 00:00:00.04
03:49:08 SQL> 
03:49:08 SQL> -- rpt
03:49:08 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
eur_usd 2010-12-16 03:40:00

Elapsed: 00:00:00.02
03:49:08 SQL> 
03:49:08 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.11
03:49:08 SQL> CREATE TABLE modsrc COMPRESS AS
03:49:08   2  SELECT
03:49:08   3  pair
03:49:08   4  ,ydate
03:49:08   5  ,prdate
03:49:08   6  ,trend
03:49:08   7  ,g4
03:49:08   8  ,gatt
03:49:08   9  ,gattn
03:49:08  10  ,dc12
03:49:08  11  FROM q15
03:49:08  12  /

Table created.

Elapsed: 00:00:00.07
03:49:09 SQL> 
03:49:09 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
03:49:09 SQL> 
03:49:09 SQL> -- rpt
03:49:09 SQL> 
03:49:09 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      18643

Elapsed: 00:00:00.32
03:49:09 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      18211

Elapsed: 00:00:00.01
03:49:09 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      18211

Elapsed: 00:00:00.00
03:49:09 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      18211

Elapsed: 00:00:00.01
03:49:09 SQL> 
03:49:09 SQL> SELECT pair,trend,gatt,gattn,AVG(g4),COUNT(g4),CORR(dc12,g4)FROM modsrc
03:49:09   2  GROUP BY pair,trend,gatt,gattn
03:49:09   3  ORDER BY pair,trend,gatt,gattn
03:49:09   4  /

PAIR	     TREND GAT GAT    AVG(G4)  COUNT(G4) CORR(DC12,G4)
------- ---------- --- --- ---------- ---------- -------------
eur_usd 	-1 nup nup -8.638E-06	    1557    .018513141
eur_usd 	-1 nup up  -.00336889	    3550    .025177018
eur_usd 	-1 up  nup .003593303	    3688    -.16667287
eur_usd 	-1			       0
eur_usd 	 1 nup nup -3.539E-06	    1787    .027043047
eur_usd 	 1 nup up  -.00312663	    3855    .082037728
eur_usd 	 1 up  nup .003475607	    3750    -.03599509

7 rows selected.

Elapsed: 00:00:00.02
03:49:09 SQL> 
03:49:09 SQL> DROP   TABLE eur_ms10 ;

Table dropped.

Elapsed: 00:00:00.14
03:49:09 SQL> CREATE TABLE eur_ms10 COMPRESS AS
03:49:09   2  SELECT
03:49:09   3  ydate
03:49:09   4  ,trend eur_trend
03:49:09   5  ,g4    eur_g4
03:49:09   6  ,gatt  eur_gatt
03:49:09   7  ,gattn	eur_gattn
03:49:09   8  FROM modsrc
03:49:09   9  /

Table created.

Elapsed: 00:00:00.06
03:49:09 SQL> 
03:49:09 SQL> ANALYZE TABLE eur_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
03:49:09 SQL> 
03:49:09 SQL> -- rpt
03:49:09 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g4),MIN(g4),MAX(g4)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G4)	 MIN(G4)    MAX(G4)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-06-23 10:50:01 2010-12-15 15:20:00	 9392	  -.0153      .0165
	-1 2010-06-22 10:30:01 2010-12-16 03:40:00	 8795	  -.0164      .0167

Elapsed: 00:00:00.01
03:49:09 SQL> SELECT eur_trend,MIN(ydate),MAX(ydate),COUNT(eur_trend),MIN(eur_g4),MAX(eur_g4)FROM eur_ms10 GROUP BY eur_trend;

 EUR_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(EUR_TREND) MIN(EUR_G4) MAX(EUR_G4)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-06-23 10:50:01 2010-12-15 15:20:00	       9392	 -.0153       .0165
	-1 2010-06-22 10:30:01 2010-12-16 03:40:00	       8819	 -.0164       .0167

Elapsed: 00:00:00.02
03:49:09 SQL> 
03:49:09 SQL> -- I need a copy of q15 attributes
03:49:09 SQL> 
03:49:09 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.16
03:49:10 SQL> CREATE TABLE eur_att COMPRESS AS
03:49:10   2  SELECT
03:49:10   3  ydate
03:49:10   4  ,att00 eur_att00
03:49:10   5  ,att01 eur_att01
03:49:10   6  ,att02 eur_att02
03:49:10   7  ,att03 eur_att03
03:49:10   8  ,att04 eur_att04
03:49:10   9  ,att05 eur_att05
03:49:10  10  ,att06 eur_att06
03:49:10  11  ,att07 eur_att07
03:49:10  12  ,att08 eur_att08
03:49:10  13  ,att09 eur_att09
03:49:10  14  ,att10 eur_att10
03:49:10  15  ,att11 eur_att11
03:49:10  16  ,att12 eur_att12
03:49:10  17  ,att13 eur_att13
03:49:10  18  ,att14 eur_att14
03:49:10  19  ,att15 eur_att15
03:49:10  20  ,att16 eur_att16
03:49:10  21  ,att17 eur_att17
03:49:10  22  ,att18 eur_att18
03:49:10  23  ,att19 eur_att19
03:49:10  24  ,att20 eur_att20
03:49:10  25  ,att21 eur_att21
03:49:10  26  ,att22 eur_att22
03:49:10  27  ,att23 eur_att23
03:49:10  28  ,att24 eur_att24
03:49:10  29  ,att25 eur_att25
03:49:10  30  ,att26 eur_att26
03:49:10  31  ,att27 eur_att27
03:49:10  32  ,att28 eur_att28
03:49:10  33  ,att29 eur_att29
03:49:10  34  ,att30 eur_att30
03:49:10  35  ,att31 eur_att31
03:49:10  36  ,att32 eur_att32
03:49:10  37  FROM q15
03:49:10  38  /

Table created.

Elapsed: 00:00:00.12
03:49:10 SQL> 
03:49:10 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.40
03:49:10 SQL> 
03:49:10 SQL> -- rpt
03:49:10 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     18211

Elapsed: 00:00:00.00
03:49:10 SQL> 
03:49:10 SQL> --
03:49:10 SQL> -- aud10.sql
03:49:10 SQL> --
03:49:10 SQL> 
03:49:10 SQL> -- Creates views and tables for backtesting a forex SVM strategy
03:49:10 SQL> 
03:49:10 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.33
03:49:10 SQL> 
03:49:10 SQL> -- I created di5min here:
03:49:10 SQL> -- /pt/s/rlk/svm4hp/update_di5min.sql
03:49:10 SQL> 
03:49:10 SQL> CREATE OR REPLACE VIEW q11 AS
03:49:10   2  SELECT
03:49:10   3  pair
03:49:10   4  ,ydate
03:49:10   5  ,prdate
03:49:10   6  ,rownum rnum -- acts as t in my time-series
03:49:10   7  ,clse
03:49:10   8  ,LAG(clse,6*1,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg1
03:49:10   9  ,LAG(clse,6*2,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg2
03:49:10  10  ,LAG(clse,6*3,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg3
03:49:10  11  ,LAG(clse,6*4,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg4
03:49:10  12  ,LAG(clse,6*5,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg5
03:49:10  13  ,LAG(clse,6*6,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg6
03:49:10  14  ,LAG(clse,6*7,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg7
03:49:10  15  ,LAG(clse,6*8,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg8
03:49:10  16  ,LAG(clse,6*9,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg9
03:49:10  17  ,LAG(clse,6*12,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg12
03:49:10  18  ,LAG(clse,6*18,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg18
03:49:10  19  ,LAG(clse,6*24,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg24
03:49:10  20  ,LAG(clse,6*72,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg72
03:49:10  21  ,LEAD(clse,6*4,NULL)OVER(PARTITION BY pair ORDER BY ydate) ld4
03:49:10  22  FROM di5min WHERE pair LIKE'%aud%'
03:49:10  23  ORDER BY ydate
03:49:10  24  /

View created.

Elapsed: 00:00:00.05
03:49:11 SQL> 
03:49:11 SQL> -- rpt
03:49:11 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
aud_usd        18642

Elapsed: 00:00:00.32
03:49:11 SQL> 
03:49:11 SQL> -- Calc deltas and gains
03:49:11 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.22
03:49:11 SQL> 
03:49:11 SQL> CREATE TABLE q13 COMPRESS AS
03:49:11   2  SELECT
03:49:11   3  pair
03:49:11   4  ,ydate
03:49:11   5  ,prdate
03:49:11   6  ,rnum
03:49:11   7  ,lg4
03:49:11   8  ,lg8
03:49:11   9  ,lg12
03:49:11  10  ,ld4
03:49:11  11  ,CASE WHEN(clse-lg12)>0 then 1 ELSE -1 END trend
03:49:11  12  -- step by 1
03:49:11  13  ,clse-lg1 d01
03:49:11  14  ,lg1-lg2	d12
03:49:11  15  ,lg2-lg3	d23
03:49:11  16  ,lg3-lg4	d34
03:49:11  17  ,lg4-lg5	d45
03:49:11  18  ,lg5-lg6	d56
03:49:11  19  ,lg6-lg7	d67
03:49:11  20  ,lg7-lg8	d78
03:49:11  21  ,lg8-lg9	d89
03:49:11  22  -- step by 2
03:49:11  23  ,clse-lg2 d02
03:49:11  24  ,lg2-lg4 d24
03:49:11  25  ,lg4-lg6 d46
03:49:11  26  ,lg6-lg8 d68
03:49:11  27  -- step by 3
03:49:11  28  ,clse-lg3 d03
03:49:11  29  ,lg3-lg6	d36
03:49:11  30  ,lg6-lg9	d69
03:49:11  31  ,lg9-lg12 d912
03:49:11  32  -- step by 4
03:49:11  33  ,clse-lg4 d04
03:49:11  34  ,lg4-lg8	d48
03:49:11  35  ,lg8-lg12 d812
03:49:11  36  ,lg6-lg12 d612
03:49:11  37  ,lg12-lg18 d1218
03:49:11  38  --
03:49:11  39  ,ABS(clse-lg1)dc1
03:49:11  40  ,ABS(clse-lg2)dc2
03:49:11  41  ,ABS(clse-lg3)dc3
03:49:11  42  ,ABS(clse-lg4)dc4
03:49:11  43  ,ABS(clse-lg5)dc5
03:49:11  44  ,ABS(clse-lg6)dc6
03:49:11  45  ,ABS(clse-lg7)dc7
03:49:11  46  ,ABS(clse-lg8)dc8
03:49:11  47  ,ABS(clse-lg9)dc9
03:49:11  48  ,ABS(clse-lg12)dc12
03:49:11  49  ,ABS(clse-lg18)dc18
03:49:11  50  ,ABS(clse-lg24)dc24
03:49:11  51  ,ABS(clse-lg72)dc72
03:49:11  52  ,(ld4-clse) ug4
03:49:11  53  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*2  PRECEDING AND CURRENT ROW)crr2
03:49:11  54  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*3  PRECEDING AND CURRENT ROW)crr3
03:49:11  55  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*4  PRECEDING AND CURRENT ROW)crr4
03:49:11  56  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*5  PRECEDING AND CURRENT ROW)crr5
03:49:11  57  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*6  PRECEDING AND CURRENT ROW)crr6
03:49:11  58  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*7  PRECEDING AND CURRENT ROW)crr7
03:49:11  59  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*8  PRECEDING AND CURRENT ROW)crr8
03:49:11  60  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*9  PRECEDING AND CURRENT ROW)crr9
03:49:11  61  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*12 PRECEDING AND CURRENT ROW)crr12
03:49:11  62  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*24 PRECEDING AND CURRENT ROW)crr24
03:49:11  63  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*72 PRECEDING AND CURRENT ROW)crr72
03:49:11  64  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
03:49:11  65  ,0+TO_CHAR(ydate,'D')d
03:49:11  66  ,0+TO_CHAR(ydate,'W')w
03:49:11  67  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
03:49:11  68  FROM q11
03:49:11  69  -- I dont want any NULL values from the LAG() functions:
03:49:11  70  WHERE lg72 > 0
03:49:11  71  ORDER BY pair,ydate
03:49:11  72  /

Table created.

Elapsed: 00:00:01.48
03:49:13 SQL> 
03:49:13 SQL> -- rpt
03:49:13 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    9368
	-1	    8842

Elapsed: 00:00:00.02
03:49:13 SQL> 
03:49:13 SQL> -- Calc gains and ntiles
03:49:13 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.15
03:49:13 SQL> CREATE TABLE q15 COMPRESS AS
03:49:13   2  SELECT
03:49:13   3  pair
03:49:13   4  ,ydate
03:49:13   5  ,prdate -- Should be unique
03:49:13   6  ,trend -- +1 or -1
03:49:13   7  ,dc12 -- next statement needs this
03:49:13   8  -- Use NTILE() to derive some attributes
03:49:13   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d12))		 att00
03:49:13  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d23))		 att01
03:49:13  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d34))		 att02
03:49:13  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d45))		 att03
03:49:13  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d56))		 att04
03:49:13  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d67))		 att05
03:49:13  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d78))		 att06
03:49:13  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d89))		 att07
03:49:13  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d912)) 	 att08
03:49:13  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc2)		 att09
03:49:13  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc3)		 att10
03:49:13  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc4)		 att11
03:49:13  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc5)		 att12
03:49:13  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6)		 att13
03:49:13  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc7)		 att14
03:49:13  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8)		 att15
03:49:13  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc9)		 att16
03:49:13  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att17
03:49:13  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc24)		 att18
03:49:13  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc72)		 att19
03:49:13  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr2,7))) att20
03:49:13  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr3,7))) att21
03:49:13  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr4,7))) att22
03:49:13  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr5,7))) att23
03:49:13  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6,7))) att24
03:49:13  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att25
03:49:13  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att26
03:49:13  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr72,7)))att27
03:49:13  37  -- date related integers: hour of day, day of week, week of month:
03:49:13  38  ,hh    att28
03:49:13  39  ,d     att29
03:49:13  40  ,w     att30
03:49:13  41  ,mpm   att31
03:49:13  42  ,trend att32
03:49:13  43  ,ug4 g4
03:49:13  44  ,CASE WHEN ug4 IS NULL THEN NULL WHEN ug4 > 0.0006 THEN 'up' ELSE 'nup' END gatt
03:49:13  45  ,CASE WHEN ug4 IS NULL THEN NULL WHEN ug4< -0.0006 THEN 'up' ELSE 'nup' END gattn
03:49:13  46  FROM q13
03:49:13  47  ORDER BY pair,ydate
03:49:13  48  /

Table created.

Elapsed: 00:00:03.61
03:49:16 SQL> 
03:49:16 SQL> -- rpt
03:49:16 SQL> SELECT pair,trend,gatt,gattn,AVG(g4),COUNT(g4),CORR(dc12,g4)FROM q15
03:49:16   2  GROUP BY pair,trend,gatt,gattn
03:49:16   3  ORDER BY pair,trend,gatt,gattn
03:49:16   4  /

PAIR	     TREND GAT GAT    AVG(G4)  COUNT(G4) CORR(DC12,G4)
------- ---------- --- --- ---------- ---------- -------------
aud_usd 	-1 nup nup  .00001989	    1551    -.01409264
aud_usd 	-1 nup up  -.00303776	    3402    -.03367671
aud_usd 	-1 up  nup .002948351	    3865    .024253347
aud_usd 	-1			       0
aud_usd 	 1 nup nup -8.103E-06	    1842    .028880926
aud_usd 	 1 nup up  -.00277752	    3614    .030798343
aud_usd 	 1 up  nup .002962347	    3912    -.03775307

7 rows selected.

Elapsed: 00:00:00.04
03:49:16 SQL> 
03:49:16 SQL> -- rpt
03:49:16 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
aud_usd 2010-12-16 03:40:00

Elapsed: 00:00:00.01
03:49:16 SQL> 
03:49:16 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.14
03:49:17 SQL> CREATE TABLE modsrc COMPRESS AS
03:49:17   2  SELECT
03:49:17   3  pair
03:49:17   4  ,ydate
03:49:17   5  ,prdate
03:49:17   6  ,trend
03:49:17   7  ,g4
03:49:17   8  ,gatt
03:49:17   9  ,gattn
03:49:17  10  ,dc12
03:49:17  11  FROM q15
03:49:17  12  /

Table created.

Elapsed: 00:00:00.09
03:49:17 SQL> 
03:49:17 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.26
03:49:17 SQL> 
03:49:17 SQL> -- rpt
03:49:17 SQL> 
03:49:17 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      18642

Elapsed: 00:00:00.32
03:49:17 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      18210

Elapsed: 00:00:00.00
03:49:17 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      18210

Elapsed: 00:00:00.01
03:49:17 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      18210

Elapsed: 00:00:00.00
03:49:17 SQL> 
03:49:17 SQL> SELECT pair,trend,gatt,gattn,AVG(g4),COUNT(g4),CORR(dc12,g4)FROM modsrc
03:49:17   2  GROUP BY pair,trend,gatt,gattn
03:49:17   3  ORDER BY pair,trend,gatt,gattn
03:49:17   4  /

PAIR	     TREND GAT GAT    AVG(G4)  COUNT(G4) CORR(DC12,G4)
------- ---------- --- --- ---------- ---------- -------------
aud_usd 	-1 nup nup  .00001989	    1551    -.01409264
aud_usd 	-1 nup up  -.00303776	    3402    -.03367671
aud_usd 	-1 up  nup .002948351	    3865    .024253347
aud_usd 	-1			       0
aud_usd 	 1 nup nup -8.103E-06	    1842    .028880926
aud_usd 	 1 nup up  -.00277752	    3614    .030798343
aud_usd 	 1 up  nup .002962347	    3912    -.03775307

7 rows selected.

Elapsed: 00:00:00.02
03:49:17 SQL> 
03:49:17 SQL> DROP   TABLE aud_ms10 ;

Table dropped.

Elapsed: 00:00:00.05
03:49:17 SQL> CREATE TABLE aud_ms10 COMPRESS AS
03:49:17   2  SELECT
03:49:17   3  ydate
03:49:17   4  ,trend aud_trend
03:49:17   5  ,g4    aud_g4
03:49:17   6  ,gatt  aud_gatt
03:49:17   7  ,gattn	aud_gattn
03:49:17   8  FROM modsrc
03:49:17   9  /

Table created.

Elapsed: 00:00:00.06
03:49:17 SQL> 
03:49:17 SQL> ANALYZE TABLE aud_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
03:49:18 SQL> 
03:49:18 SQL> -- rpt
03:49:18 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g4),MIN(g4),MAX(g4)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G4)	 MIN(G4)    MAX(G4)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-06-23 20:40:01 2010-12-14 22:20:00	 9368	  -.0162      .0122
	-1 2010-06-22 10:30:01 2010-12-16 03:40:00	 8818	   -.017      .0131

Elapsed: 00:00:00.02
03:49:18 SQL> SELECT aud_trend,MIN(ydate),MAX(ydate),COUNT(aud_trend),MIN(aud_g4),MAX(aud_g4)FROM aud_ms10 GROUP BY aud_trend;

 AUD_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(AUD_TREND) MIN(AUD_G4) MAX(AUD_G4)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-06-23 20:40:01 2010-12-14 22:20:00	       9368	 -.0162       .0122
	-1 2010-06-22 10:30:01 2010-12-16 03:40:00	       8842	  -.017       .0131

Elapsed: 00:00:00.01
03:49:18 SQL> 
03:49:18 SQL> -- I need a copy of q15 attributes
03:49:18 SQL> 
03:49:18 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.12
03:49:18 SQL> CREATE TABLE aud_att COMPRESS AS
03:49:18   2  SELECT
03:49:18   3  ydate
03:49:18   4  ,att00 aud_att00
03:49:18   5  ,att01 aud_att01
03:49:18   6  ,att02 aud_att02
03:49:18   7  ,att03 aud_att03
03:49:18   8  ,att04 aud_att04
03:49:18   9  ,att05 aud_att05
03:49:18  10  ,att06 aud_att06
03:49:18  11  ,att07 aud_att07
03:49:18  12  ,att08 aud_att08
03:49:18  13  ,att09 aud_att09
03:49:18  14  ,att10 aud_att10
03:49:18  15  ,att11 aud_att11
03:49:18  16  ,att12 aud_att12
03:49:18  17  ,att13 aud_att13
03:49:18  18  ,att14 aud_att14
03:49:18  19  ,att15 aud_att15
03:49:18  20  ,att16 aud_att16
03:49:18  21  ,att17 aud_att17
03:49:18  22  ,att18 aud_att18
03:49:18  23  ,att19 aud_att19
03:49:18  24  ,att20 aud_att20
03:49:18  25  ,att21 aud_att21
03:49:18  26  ,att22 aud_att22
03:49:18  27  ,att23 aud_att23
03:49:18  28  ,att24 aud_att24
03:49:18  29  ,att25 aud_att25
03:49:18  30  ,att26 aud_att26
03:49:18  31  ,att27 aud_att27
03:49:18  32  ,att28 aud_att28
03:49:18  33  ,att29 aud_att29
03:49:18  34  ,att30 aud_att30
03:49:18  35  ,att31 aud_att31
03:49:18  36  ,att32 aud_att32
03:49:18  37  FROM q15
03:49:18  38  /

Table created.

Elapsed: 00:00:00.17
03:49:18 SQL> 
03:49:18 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.44
03:49:18 SQL> 
03:49:18 SQL> -- rpt
03:49:18 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     18210

Elapsed: 00:00:00.00
03:49:18 SQL> 
03:49:18 SQL> --
03:49:18 SQL> -- gbp10.sql
03:49:18 SQL> --
03:49:18 SQL> 
03:49:18 SQL> -- Creates views and tables for backtesting a forex SVM strategy
03:49:18 SQL> 
03:49:18 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.33
03:49:19 SQL> 
03:49:19 SQL> -- I created di5min here:
03:49:19 SQL> -- /pt/s/rlk/svm4hp/update_di5min.sql
03:49:19 SQL> 
03:49:19 SQL> CREATE OR REPLACE VIEW q11 AS
03:49:19   2  SELECT
03:49:19   3  pair
03:49:19   4  ,ydate
03:49:19   5  ,prdate
03:49:19   6  ,rownum rnum -- acts as t in my time-series
03:49:19   7  ,clse
03:49:19   8  ,LAG(clse,6*1,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg1
03:49:19   9  ,LAG(clse,6*2,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg2
03:49:19  10  ,LAG(clse,6*3,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg3
03:49:19  11  ,LAG(clse,6*4,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg4
03:49:19  12  ,LAG(clse,6*5,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg5
03:49:19  13  ,LAG(clse,6*6,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg6
03:49:19  14  ,LAG(clse,6*7,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg7
03:49:19  15  ,LAG(clse,6*8,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg8
03:49:19  16  ,LAG(clse,6*9,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg9
03:49:19  17  ,LAG(clse,6*12,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg12
03:49:19  18  ,LAG(clse,6*18,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg18
03:49:19  19  ,LAG(clse,6*24,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg24
03:49:19  20  ,LAG(clse,6*72,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg72
03:49:19  21  ,LEAD(clse,6*4,NULL)OVER(PARTITION BY pair ORDER BY ydate) ld4
03:49:19  22  FROM di5min WHERE pair LIKE'%gbp%'
03:49:19  23  ORDER BY ydate
03:49:19  24  /

View created.

Elapsed: 00:00:00.04
03:49:19 SQL> 
03:49:19 SQL> -- rpt
03:49:19 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
gbp_usd        18642

Elapsed: 00:00:00.32
03:49:19 SQL> 
03:49:19 SQL> -- Calc deltas and gains
03:49:19 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.17
03:49:19 SQL> 
03:49:19 SQL> CREATE TABLE q13 COMPRESS AS
03:49:19   2  SELECT
03:49:19   3  pair
03:49:19   4  ,ydate
03:49:19   5  ,prdate
03:49:19   6  ,rnum
03:49:19   7  ,lg4
03:49:19   8  ,lg8
03:49:19   9  ,lg12
03:49:19  10  ,ld4
03:49:19  11  ,CASE WHEN(clse-lg12)>0 then 1 ELSE -1 END trend
03:49:19  12  -- step by 1
03:49:19  13  ,clse-lg1 d01
03:49:19  14  ,lg1-lg2	d12
03:49:19  15  ,lg2-lg3	d23
03:49:19  16  ,lg3-lg4	d34
03:49:19  17  ,lg4-lg5	d45
03:49:19  18  ,lg5-lg6	d56
03:49:19  19  ,lg6-lg7	d67
03:49:19  20  ,lg7-lg8	d78
03:49:19  21  ,lg8-lg9	d89
03:49:19  22  -- step by 2
03:49:19  23  ,clse-lg2 d02
03:49:19  24  ,lg2-lg4 d24
03:49:19  25  ,lg4-lg6 d46
03:49:19  26  ,lg6-lg8 d68
03:49:19  27  -- step by 3
03:49:19  28  ,clse-lg3 d03
03:49:19  29  ,lg3-lg6	d36
03:49:19  30  ,lg6-lg9	d69
03:49:19  31  ,lg9-lg12 d912
03:49:19  32  -- step by 4
03:49:19  33  ,clse-lg4 d04
03:49:19  34  ,lg4-lg8	d48
03:49:19  35  ,lg8-lg12 d812
03:49:19  36  ,lg6-lg12 d612
03:49:19  37  ,lg12-lg18 d1218
03:49:19  38  --
03:49:19  39  ,ABS(clse-lg1)dc1
03:49:19  40  ,ABS(clse-lg2)dc2
03:49:19  41  ,ABS(clse-lg3)dc3
03:49:19  42  ,ABS(clse-lg4)dc4
03:49:19  43  ,ABS(clse-lg5)dc5
03:49:19  44  ,ABS(clse-lg6)dc6
03:49:19  45  ,ABS(clse-lg7)dc7
03:49:19  46  ,ABS(clse-lg8)dc8
03:49:19  47  ,ABS(clse-lg9)dc9
03:49:19  48  ,ABS(clse-lg12)dc12
03:49:19  49  ,ABS(clse-lg18)dc18
03:49:19  50  ,ABS(clse-lg24)dc24
03:49:19  51  ,ABS(clse-lg72)dc72
03:49:19  52  ,(ld4-clse) ug4
03:49:19  53  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*2  PRECEDING AND CURRENT ROW)crr2
03:49:19  54  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*3  PRECEDING AND CURRENT ROW)crr3
03:49:19  55  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*4  PRECEDING AND CURRENT ROW)crr4
03:49:19  56  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*5  PRECEDING AND CURRENT ROW)crr5
03:49:19  57  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*6  PRECEDING AND CURRENT ROW)crr6
03:49:19  58  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*7  PRECEDING AND CURRENT ROW)crr7
03:49:19  59  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*8  PRECEDING AND CURRENT ROW)crr8
03:49:19  60  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*9  PRECEDING AND CURRENT ROW)crr9
03:49:19  61  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*12 PRECEDING AND CURRENT ROW)crr12
03:49:19  62  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*24 PRECEDING AND CURRENT ROW)crr24
03:49:19  63  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*72 PRECEDING AND CURRENT ROW)crr72
03:49:19  64  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
03:49:19  65  ,0+TO_CHAR(ydate,'D')d
03:49:19  66  ,0+TO_CHAR(ydate,'W')w
03:49:19  67  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
03:49:19  68  FROM q11
03:49:19  69  -- I dont want any NULL values from the LAG() functions:
03:49:19  70  WHERE lg72 > 0
03:49:19  71  ORDER BY pair,ydate
03:49:19  72  /

Table created.

Elapsed: 00:00:01.51
03:49:21 SQL> 
03:49:21 SQL> -- rpt
03:49:21 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    9054
	-1	    9156

Elapsed: 00:00:00.03
03:49:21 SQL> 
03:49:21 SQL> -- Calc gains and ntiles
03:49:21 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.17
03:49:21 SQL> CREATE TABLE q15 COMPRESS AS
03:49:21   2  SELECT
03:49:21   3  pair
03:49:21   4  ,ydate
03:49:21   5  ,prdate -- Should be unique
03:49:21   6  ,trend -- +1 or -1
03:49:21   7  ,dc12 -- next statement needs this
03:49:21   8  -- Use NTILE() to derive some attributes
03:49:21   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d12))		 att00
03:49:21  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d23))		 att01
03:49:21  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d34))		 att02
03:49:21  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d45))		 att03
03:49:21  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d56))		 att04
03:49:21  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d67))		 att05
03:49:21  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d78))		 att06
03:49:21  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d89))		 att07
03:49:21  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d912)) 	 att08
03:49:21  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc2)		 att09
03:49:21  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc3)		 att10
03:49:21  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc4)		 att11
03:49:21  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc5)		 att12
03:49:21  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6)		 att13
03:49:21  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc7)		 att14
03:49:21  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8)		 att15
03:49:21  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc9)		 att16
03:49:21  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att17
03:49:21  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc24)		 att18
03:49:21  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc72)		 att19
03:49:21  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr2,7))) att20
03:49:21  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr3,7))) att21
03:49:21  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr4,7))) att22
03:49:21  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr5,7))) att23
03:49:21  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6,7))) att24
03:49:21  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att25
03:49:21  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att26
03:49:21  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr72,7)))att27
03:49:21  37  -- date related integers: hour of day, day of week, week of month:
03:49:21  38  ,hh    att28
03:49:21  39  ,d     att29
03:49:21  40  ,w     att30
03:49:21  41  ,mpm   att31
03:49:21  42  ,trend att32
03:49:21  43  ,ug4 g4
03:49:21  44  ,CASE WHEN ug4 IS NULL THEN NULL WHEN ug4 > 0.0006 THEN 'up' ELSE 'nup' END gatt
03:49:21  45  ,CASE WHEN ug4 IS NULL THEN NULL WHEN ug4< -0.0006 THEN 'up' ELSE 'nup' END gattn
03:49:21  46  FROM q13
03:49:21  47  ORDER BY pair,ydate
03:49:21  48  /

Table created.

Elapsed: 00:00:03.60
03:49:24 SQL> 
03:49:24 SQL> -- rpt
03:49:24 SQL> SELECT pair,trend,gatt,gattn,AVG(g4),COUNT(g4),CORR(dc12,g4)FROM q15
03:49:24   2  GROUP BY pair,trend,gatt,gattn
03:49:24   3  ORDER BY pair,trend,gatt,gattn
03:49:24   4  /

PAIR	     TREND GAT GAT    AVG(G4)  COUNT(G4) CORR(DC12,G4)
------- ---------- --- --- ---------- ---------- -------------
gbp_usd 	-1 nup nup -.00001084	    1660     .03004883
gbp_usd 	-1 nup up  -.00322177	    3755    .005336286
gbp_usd 	-1 up  nup .003426217	    3717     -.0670227
gbp_usd 	-1			       0
gbp_usd 	 1 nup nup -1.668E-06	    1574    .026963894
gbp_usd 	 1 nup up  -.00315288	    3752    .059674922
gbp_usd 	 1 up  nup .003498297	    3728    -.11108955

7 rows selected.

Elapsed: 00:00:00.04
03:49:25 SQL> 
03:49:25 SQL> -- rpt
03:49:25 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
gbp_usd 2010-12-16 03:40:00

Elapsed: 00:00:00.01
03:49:25 SQL> 
03:49:25 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.10
03:49:25 SQL> CREATE TABLE modsrc COMPRESS AS
03:49:25   2  SELECT
03:49:25   3  pair
03:49:25   4  ,ydate
03:49:25   5  ,prdate
03:49:25   6  ,trend
03:49:25   7  ,g4
03:49:25   8  ,gatt
03:49:25   9  ,gattn
03:49:25  10  ,dc12
03:49:25  11  FROM q15
03:49:25  12  /

Table created.

Elapsed: 00:00:00.08
03:49:25 SQL> 
03:49:25 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
03:49:25 SQL> 
03:49:25 SQL> -- rpt
03:49:25 SQL> 
03:49:25 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      18642

Elapsed: 00:00:00.30
03:49:25 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      18210

Elapsed: 00:00:00.00
03:49:25 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      18210

Elapsed: 00:00:00.01
03:49:25 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      18210

Elapsed: 00:00:00.00
03:49:25 SQL> 
03:49:25 SQL> SELECT pair,trend,gatt,gattn,AVG(g4),COUNT(g4),CORR(dc12,g4)FROM modsrc
03:49:25   2  GROUP BY pair,trend,gatt,gattn
03:49:25   3  ORDER BY pair,trend,gatt,gattn
03:49:25   4  /

PAIR	     TREND GAT GAT    AVG(G4)  COUNT(G4) CORR(DC12,G4)
------- ---------- --- --- ---------- ---------- -------------
gbp_usd 	-1 nup nup -.00001084	    1660     .03004883
gbp_usd 	-1 nup up  -.00322177	    3755    .005336286
gbp_usd 	-1 up  nup .003426217	    3717     -.0670227
gbp_usd 	-1			       0
gbp_usd 	 1 nup nup -1.668E-06	    1574    .026963894
gbp_usd 	 1 nup up  -.00315288	    3752    .059674922
gbp_usd 	 1 up  nup .003498297	    3728    -.11108955

7 rows selected.

Elapsed: 00:00:00.02
03:49:25 SQL> 
03:49:25 SQL> DROP   TABLE gbp_ms10 ;

Table dropped.

Elapsed: 00:00:00.08
03:49:25 SQL> CREATE TABLE gbp_ms10 COMPRESS AS
03:49:25   2  SELECT
03:49:25   3  ydate
03:49:25   4  ,trend gbp_trend
03:49:25   5  ,g4    gbp_g4
03:49:25   6  ,gatt  gbp_gatt
03:49:25   7  ,gattn	gbp_gattn
03:49:25   8  FROM modsrc
03:49:25   9  /

Table created.

Elapsed: 00:00:00.06
03:49:25 SQL> 
03:49:25 SQL> ANALYZE TABLE gbp_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.83
03:49:26 SQL> 
03:49:26 SQL> -- rpt
03:49:26 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g4),MIN(g4),MAX(g4)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G4)	 MIN(G4)    MAX(G4)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-06-22 15:30:01 2010-12-15 03:50:00	 9054	  -.0194      .0192
	-1 2010-06-22 10:30:01 2010-12-16 03:40:00	 9132	  -.0153      .0189

Elapsed: 00:00:00.02
03:49:26 SQL> SELECT gbp_trend,MIN(ydate),MAX(ydate),COUNT(gbp_trend),MIN(gbp_g4),MAX(gbp_g4)FROM gbp_ms10 GROUP BY gbp_trend;

 GBP_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(GBP_TREND) MIN(GBP_G4) MAX(GBP_G4)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-06-22 15:30:01 2010-12-15 03:50:00	       9054	 -.0194       .0192
	-1 2010-06-22 10:30:01 2010-12-16 03:40:00	       9156	 -.0153       .0189

Elapsed: 00:00:00.02
03:49:26 SQL> 
03:49:26 SQL> -- I need a copy of q15 attributes
03:49:26 SQL> 
03:49:26 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.29
03:49:27 SQL> CREATE TABLE gbp_att COMPRESS AS
03:49:27   2  SELECT
03:49:27   3  ydate
03:49:27   4  ,att00 gbp_att00
03:49:27   5  ,att01 gbp_att01
03:49:27   6  ,att02 gbp_att02
03:49:27   7  ,att03 gbp_att03
03:49:27   8  ,att04 gbp_att04
03:49:27   9  ,att05 gbp_att05
03:49:27  10  ,att06 gbp_att06
03:49:27  11  ,att07 gbp_att07
03:49:27  12  ,att08 gbp_att08
03:49:27  13  ,att09 gbp_att09
03:49:27  14  ,att10 gbp_att10
03:49:27  15  ,att11 gbp_att11
03:49:27  16  ,att12 gbp_att12
03:49:27  17  ,att13 gbp_att13
03:49:27  18  ,att14 gbp_att14
03:49:27  19  ,att15 gbp_att15
03:49:27  20  ,att16 gbp_att16
03:49:27  21  ,att17 gbp_att17
03:49:27  22  ,att18 gbp_att18
03:49:27  23  ,att19 gbp_att19
03:49:27  24  ,att20 gbp_att20
03:49:27  25  ,att21 gbp_att21
03:49:27  26  ,att22 gbp_att22
03:49:27  27  ,att23 gbp_att23
03:49:27  28  ,att24 gbp_att24
03:49:27  29  ,att25 gbp_att25
03:49:27  30  ,att26 gbp_att26
03:49:27  31  ,att27 gbp_att27
03:49:27  32  ,att28 gbp_att28
03:49:27  33  ,att29 gbp_att29
03:49:27  34  ,att30 gbp_att30
03:49:27  35  ,att31 gbp_att31
03:49:27  36  ,att32 gbp_att32
03:49:27  37  FROM q15
03:49:27  38  /

Table created.

Elapsed: 00:00:00.13
03:49:27 SQL> 
03:49:27 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.39
03:49:27 SQL> 
03:49:27 SQL> -- rpt
03:49:27 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     18210

Elapsed: 00:00:00.00
03:49:27 SQL> 
03:49:27 SQL> --
03:49:27 SQL> -- jpy10.sql
03:49:27 SQL> --
03:49:27 SQL> 
03:49:27 SQL> -- Creates views and tables for backtesting a forex SVM strategy
03:49:27 SQL> 
03:49:27 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.31
03:49:27 SQL> 
03:49:27 SQL> -- I created di5min here:
03:49:27 SQL> -- /pt/s/rlk/svm4hp/update_di5min.sql
03:49:27 SQL> 
03:49:27 SQL> CREATE OR REPLACE VIEW q11 AS
03:49:27   2  SELECT
03:49:27   3  pair
03:49:27   4  ,ydate
03:49:27   5  ,prdate
03:49:27   6  ,rownum rnum -- acts as t in my time-series
03:49:27   7  ,clse
03:49:27   8  ,LAG(clse,6*1,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg1
03:49:27   9  ,LAG(clse,6*2,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg2
03:49:27  10  ,LAG(clse,6*3,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg3
03:49:27  11  ,LAG(clse,6*4,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg4
03:49:27  12  ,LAG(clse,6*5,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg5
03:49:27  13  ,LAG(clse,6*6,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg6
03:49:27  14  ,LAG(clse,6*7,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg7
03:49:27  15  ,LAG(clse,6*8,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg8
03:49:27  16  ,LAG(clse,6*9,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg9
03:49:27  17  ,LAG(clse,6*12,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg12
03:49:27  18  ,LAG(clse,6*18,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg18
03:49:27  19  ,LAG(clse,6*24,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg24
03:49:27  20  ,LAG(clse,6*72,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg72
03:49:27  21  ,LEAD(clse,6*4,NULL)OVER(PARTITION BY pair ORDER BY ydate) ld4
03:49:27  22  FROM di5min WHERE pair LIKE'%jpy%'
03:49:27  23  ORDER BY ydate
03:49:27  24  /

View created.

Elapsed: 00:00:00.04
03:49:27 SQL> 
03:49:27 SQL> -- rpt
03:49:27 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
usd_jpy        18643

Elapsed: 00:00:00.32
03:49:28 SQL> 
03:49:28 SQL> -- Calc deltas and gains
03:49:28 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.25
03:49:28 SQL> 
03:49:28 SQL> CREATE TABLE q13 COMPRESS AS
03:49:28   2  SELECT
03:49:28   3  pair
03:49:28   4  ,ydate
03:49:28   5  ,prdate
03:49:28   6  ,rnum
03:49:28   7  ,lg4
03:49:28   8  ,lg8
03:49:28   9  ,lg12
03:49:28  10  ,ld4
03:49:28  11  ,CASE WHEN(clse-lg12)>0 then 1 ELSE -1 END trend
03:49:28  12  -- step by 1
03:49:28  13  ,clse-lg1 d01
03:49:28  14  ,lg1-lg2	d12
03:49:28  15  ,lg2-lg3	d23
03:49:28  16  ,lg3-lg4	d34
03:49:28  17  ,lg4-lg5	d45
03:49:28  18  ,lg5-lg6	d56
03:49:28  19  ,lg6-lg7	d67
03:49:28  20  ,lg7-lg8	d78
03:49:28  21  ,lg8-lg9	d89
03:49:28  22  -- step by 2
03:49:28  23  ,clse-lg2 d02
03:49:28  24  ,lg2-lg4 d24
03:49:28  25  ,lg4-lg6 d46
03:49:28  26  ,lg6-lg8 d68
03:49:28  27  -- step by 3
03:49:28  28  ,clse-lg3 d03
03:49:28  29  ,lg3-lg6	d36
03:49:28  30  ,lg6-lg9	d69
03:49:28  31  ,lg9-lg12 d912
03:49:28  32  -- step by 4
03:49:28  33  ,clse-lg4 d04
03:49:28  34  ,lg4-lg8	d48
03:49:28  35  ,lg8-lg12 d812
03:49:28  36  ,lg6-lg12 d612
03:49:28  37  ,lg12-lg18 d1218
03:49:28  38  --
03:49:28  39  ,ABS(clse-lg1)dc1
03:49:28  40  ,ABS(clse-lg2)dc2
03:49:28  41  ,ABS(clse-lg3)dc3
03:49:28  42  ,ABS(clse-lg4)dc4
03:49:28  43  ,ABS(clse-lg5)dc5
03:49:28  44  ,ABS(clse-lg6)dc6
03:49:28  45  ,ABS(clse-lg7)dc7
03:49:28  46  ,ABS(clse-lg8)dc8
03:49:28  47  ,ABS(clse-lg9)dc9
03:49:28  48  ,ABS(clse-lg12)dc12
03:49:28  49  ,ABS(clse-lg18)dc18
03:49:28  50  ,ABS(clse-lg24)dc24
03:49:28  51  ,ABS(clse-lg72)dc72
03:49:28  52  ,(ld4-clse) ug4
03:49:28  53  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*2  PRECEDING AND CURRENT ROW)crr2
03:49:28  54  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*3  PRECEDING AND CURRENT ROW)crr3
03:49:28  55  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*4  PRECEDING AND CURRENT ROW)crr4
03:49:28  56  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*5  PRECEDING AND CURRENT ROW)crr5
03:49:28  57  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*6  PRECEDING AND CURRENT ROW)crr6
03:49:28  58  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*7  PRECEDING AND CURRENT ROW)crr7
03:49:28  59  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*8  PRECEDING AND CURRENT ROW)crr8
03:49:28  60  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*9  PRECEDING AND CURRENT ROW)crr9
03:49:28  61  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*12 PRECEDING AND CURRENT ROW)crr12
03:49:28  62  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*24 PRECEDING AND CURRENT ROW)crr24
03:49:28  63  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*72 PRECEDING AND CURRENT ROW)crr72
03:49:28  64  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
03:49:28  65  ,0+TO_CHAR(ydate,'D')d
03:49:28  66  ,0+TO_CHAR(ydate,'W')w
03:49:28  67  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
03:49:28  68  FROM q11
03:49:28  69  -- I dont want any NULL values from the LAG() functions:
03:49:28  70  WHERE lg72 > 0
03:49:28  71  ORDER BY pair,ydate
03:49:28  72  /

Table created.

Elapsed: 00:00:01.46
03:49:29 SQL> 
03:49:29 SQL> -- rpt
03:49:29 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    8124
	-1	   10087

Elapsed: 00:00:00.03
03:49:30 SQL> 
03:49:30 SQL> -- Calc gains and ntiles
03:49:30 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.23
03:49:30 SQL> CREATE TABLE q15 COMPRESS AS
03:49:30   2  SELECT
03:49:30   3  pair
03:49:30   4  ,ydate
03:49:30   5  ,prdate -- Should be unique
03:49:30   6  ,trend -- +1 or -1
03:49:30   7  ,dc12 -- next statement needs this
03:49:30   8  -- Use NTILE() to derive some attributes
03:49:30   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d12))		 att00
03:49:30  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d23))		 att01
03:49:30  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d34))		 att02
03:49:30  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d45))		 att03
03:49:30  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d56))		 att04
03:49:30  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d67))		 att05
03:49:30  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d78))		 att06
03:49:30  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d89))		 att07
03:49:30  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d912)) 	 att08
03:49:30  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc2)		 att09
03:49:30  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc3)		 att10
03:49:30  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc4)		 att11
03:49:30  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc5)		 att12
03:49:30  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6)		 att13
03:49:30  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc7)		 att14
03:49:30  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8)		 att15
03:49:30  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc9)		 att16
03:49:30  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att17
03:49:30  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc24)		 att18
03:49:30  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc72)		 att19
03:49:30  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr2,7))) att20
03:49:30  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr3,7))) att21
03:49:30  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr4,7))) att22
03:49:30  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr5,7))) att23
03:49:30  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6,7))) att24
03:49:30  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att25
03:49:30  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att26
03:49:30  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr72,7)))att27
03:49:30  37  -- date related integers: hour of day, day of week, week of month:
03:49:30  38  ,hh    att28
03:49:30  39  ,d     att29
03:49:30  40  ,w     att30
03:49:30  41  ,mpm   att31
03:49:30  42  ,trend att32
03:49:30  43  ,ug4 g4
03:49:30  44  ,CASE WHEN ug4 IS NULL THEN NULL WHEN ug4 > 0.0006 THEN 'up' ELSE 'nup' END gatt
03:49:30  45  ,CASE WHEN ug4 IS NULL THEN NULL WHEN ug4< -0.0006 THEN 'up' ELSE 'nup' END gattn
03:49:30  46  FROM q13
03:49:30  47  ORDER BY pair,ydate
03:49:30  48  /

Table created.

Elapsed: 00:00:03.55
03:49:33 SQL> 
03:49:33 SQL> -- rpt
03:49:33 SQL> SELECT pair,trend,gatt,gattn,AVG(g4),COUNT(g4),CORR(dc12,g4)FROM q15
03:49:33   2  GROUP BY pair,trend,gatt,gattn
03:49:33   3  ORDER BY pair,trend,gatt,gattn
03:49:33   4  /

PAIR	     TREND GAT GAT    AVG(G4)  COUNT(G4) CORR(DC12,G4)
------- ---------- --- --- ---------- ---------- -------------
usd_jpy 	-1 nup nup	    0	     245
usd_jpy 	-1 nup up  -.15421143	    4952    .023877435
usd_jpy 	-1 up  nup .147026585	    4890    .046720655
usd_jpy 	 1 nup nup	    0	     176
usd_jpy 	 1 nup up  -.15578316	    4335    -.04894743
usd_jpy 	 1 up  nup .157883115	    3589    .141466485
usd_jpy 	 1			       0

7 rows selected.

Elapsed: 00:00:00.03
03:49:33 SQL> 
03:49:33 SQL> -- rpt
03:49:33 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
usd_jpy 2010-12-16 03:40:00

Elapsed: 00:00:00.01
03:49:33 SQL> 
03:49:33 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.17
03:49:33 SQL> CREATE TABLE modsrc COMPRESS AS
03:49:33   2  SELECT
03:49:33   3  pair
03:49:33   4  ,ydate
03:49:33   5  ,prdate
03:49:33   6  ,trend
03:49:33   7  ,g4
03:49:33   8  ,gatt
03:49:33   9  ,gattn
03:49:33  10  ,dc12
03:49:33  11  FROM q15
03:49:33  12  /

Table created.

Elapsed: 00:00:00.09
03:49:34 SQL> 
03:49:34 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.25
03:49:34 SQL> 
03:49:34 SQL> -- rpt
03:49:34 SQL> 
03:49:34 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      18643

Elapsed: 00:00:00.31
03:49:34 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      18211

Elapsed: 00:00:00.01
03:49:34 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      18211

Elapsed: 00:00:00.00
03:49:34 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      18211

Elapsed: 00:00:00.00
03:49:34 SQL> 
03:49:34 SQL> SELECT pair,trend,gatt,gattn,AVG(g4),COUNT(g4),CORR(dc12,g4)FROM modsrc
03:49:34   2  GROUP BY pair,trend,gatt,gattn
03:49:34   3  ORDER BY pair,trend,gatt,gattn
03:49:34   4  /

PAIR	     TREND GAT GAT    AVG(G4)  COUNT(G4) CORR(DC12,G4)
------- ---------- --- --- ---------- ---------- -------------
usd_jpy 	-1 nup nup	    0	     245
usd_jpy 	-1 nup up  -.15421143	    4952    .023877435
usd_jpy 	-1 up  nup .147026585	    4890    .046720655
usd_jpy 	 1 nup nup	    0	     176
usd_jpy 	 1 nup up  -.15578316	    4335    -.04894743
usd_jpy 	 1 up  nup .157883115	    3589    .141466485
usd_jpy 	 1			       0

7 rows selected.

Elapsed: 00:00:00.03
03:49:34 SQL> 
03:49:34 SQL> DROP   TABLE jpy_ms10 ;

Table dropped.

Elapsed: 00:00:00.09
03:49:34 SQL> CREATE TABLE jpy_ms10 COMPRESS AS
03:49:34   2  SELECT
03:49:34   3  ydate
03:49:34   4  ,trend jpy_trend
03:49:34   5  ,g4    jpy_g4
03:49:34   6  ,gatt  jpy_gatt
03:49:34   7  ,gattn	jpy_gattn
03:49:34   8  FROM modsrc
03:49:34   9  /

Table created.

Elapsed: 00:00:00.06
03:49:34 SQL> 
03:49:34 SQL> ANALYZE TABLE jpy_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.12
03:49:34 SQL> 
03:49:34 SQL> -- rpt
03:49:34 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g4),MIN(g4),MAX(g4)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G4)	 MIN(G4)    MAX(G4)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-06-24 20:40:01 2010-12-16 03:40:00	 8100	   -1.07       1.04
	-1 2010-06-22 10:30:01 2010-12-15 15:10:00	10087	   -1.18       1.99

Elapsed: 00:00:00.02
03:49:34 SQL> SELECT jpy_trend,MIN(ydate),MAX(ydate),COUNT(jpy_trend),MIN(jpy_g4),MAX(jpy_g4)FROM jpy_ms10 GROUP BY jpy_trend;

 JPY_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(JPY_TREND) MIN(JPY_G4) MAX(JPY_G4)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-06-24 20:40:01 2010-12-16 03:40:00	       8124	  -1.07        1.04
	-1 2010-06-22 10:30:01 2010-12-15 15:10:00	      10087	  -1.18        1.99

Elapsed: 00:00:00.01
03:49:34 SQL> 
03:49:34 SQL> -- I need a copy of q15 attributes
03:49:34 SQL> 
03:49:34 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.12
03:49:35 SQL> CREATE TABLE jpy_att COMPRESS AS
03:49:35   2  SELECT
03:49:35   3  ydate
03:49:35   4  ,att00 jpy_att00
03:49:35   5  ,att01 jpy_att01
03:49:35   6  ,att02 jpy_att02
03:49:35   7  ,att03 jpy_att03
03:49:35   8  ,att04 jpy_att04
03:49:35   9  ,att05 jpy_att05
03:49:35  10  ,att06 jpy_att06
03:49:35  11  ,att07 jpy_att07
03:49:35  12  ,att08 jpy_att08
03:49:35  13  ,att09 jpy_att09
03:49:35  14  ,att10 jpy_att10
03:49:35  15  ,att11 jpy_att11
03:49:35  16  ,att12 jpy_att12
03:49:35  17  ,att13 jpy_att13
03:49:35  18  ,att14 jpy_att14
03:49:35  19  ,att15 jpy_att15
03:49:35  20  ,att16 jpy_att16
03:49:35  21  ,att17 jpy_att17
03:49:35  22  ,att18 jpy_att18
03:49:35  23  ,att19 jpy_att19
03:49:35  24  ,att20 jpy_att20
03:49:35  25  ,att21 jpy_att21
03:49:35  26  ,att22 jpy_att22
03:49:35  27  ,att23 jpy_att23
03:49:35  28  ,att24 jpy_att24
03:49:35  29  ,att25 jpy_att25
03:49:35  30  ,att26 jpy_att26
03:49:35  31  ,att27 jpy_att27
03:49:35  32  ,att28 jpy_att28
03:49:35  33  ,att29 jpy_att29
03:49:35  34  ,att30 jpy_att30
03:49:35  35  ,att31 jpy_att31
03:49:35  36  ,att32 jpy_att32
03:49:35  37  FROM q15
03:49:35  38  /

Table created.

Elapsed: 00:00:00.13
03:49:35 SQL> 
03:49:35 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.39
03:49:35 SQL> 
03:49:35 SQL> -- rpt
03:49:35 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     18211

Elapsed: 00:00:00.00
03:49:35 SQL> 
03:49:35 SQL> --
03:49:35 SQL> -- cad10.sql
03:49:35 SQL> --
03:49:35 SQL> 
03:49:35 SQL> -- Creates views and tables for backtesting a forex SVM strategy
03:49:35 SQL> 
03:49:35 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.50
03:49:36 SQL> 
03:49:36 SQL> -- I created di5min here:
03:49:36 SQL> -- /pt/s/rlk/svm4hp/update_di5min.sql
03:49:36 SQL> 
03:49:36 SQL> CREATE OR REPLACE VIEW q11 AS
03:49:36   2  SELECT
03:49:36   3  pair
03:49:36   4  ,ydate
03:49:36   5  ,prdate
03:49:36   6  ,rownum rnum -- acts as t in my time-series
03:49:36   7  ,clse
03:49:36   8  ,LAG(clse,6*1,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg1
03:49:36   9  ,LAG(clse,6*2,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg2
03:49:36  10  ,LAG(clse,6*3,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg3
03:49:36  11  ,LAG(clse,6*4,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg4
03:49:36  12  ,LAG(clse,6*5,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg5
03:49:36  13  ,LAG(clse,6*6,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg6
03:49:36  14  ,LAG(clse,6*7,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg7
03:49:36  15  ,LAG(clse,6*8,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg8
03:49:36  16  ,LAG(clse,6*9,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg9
03:49:36  17  ,LAG(clse,6*12,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg12
03:49:36  18  ,LAG(clse,6*18,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg18
03:49:36  19  ,LAG(clse,6*24,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg24
03:49:36  20  ,LAG(clse,6*72,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg72
03:49:36  21  ,LEAD(clse,6*4,NULL)OVER(PARTITION BY pair ORDER BY ydate) ld4
03:49:36  22  FROM di5min WHERE pair LIKE'%cad%'
03:49:36  23  ORDER BY ydate
03:49:36  24  /

View created.

Elapsed: 00:00:00.07
03:49:36 SQL> 
03:49:36 SQL> -- rpt
03:49:36 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
usd_cad        18641

Elapsed: 00:00:00.31
03:49:36 SQL> 
03:49:36 SQL> -- Calc deltas and gains
03:49:36 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.17
03:49:36 SQL> 
03:49:36 SQL> CREATE TABLE q13 COMPRESS AS
03:49:36   2  SELECT
03:49:36   3  pair
03:49:36   4  ,ydate
03:49:36   5  ,prdate
03:49:36   6  ,rnum
03:49:36   7  ,lg4
03:49:36   8  ,lg8
03:49:36   9  ,lg12
03:49:36  10  ,ld4
03:49:36  11  ,CASE WHEN(clse-lg12)>0 then 1 ELSE -1 END trend
03:49:36  12  -- step by 1
03:49:36  13  ,clse-lg1 d01
03:49:36  14  ,lg1-lg2	d12
03:49:36  15  ,lg2-lg3	d23
03:49:36  16  ,lg3-lg4	d34
03:49:36  17  ,lg4-lg5	d45
03:49:36  18  ,lg5-lg6	d56
03:49:36  19  ,lg6-lg7	d67
03:49:36  20  ,lg7-lg8	d78
03:49:36  21  ,lg8-lg9	d89
03:49:36  22  -- step by 2
03:49:36  23  ,clse-lg2 d02
03:49:36  24  ,lg2-lg4 d24
03:49:36  25  ,lg4-lg6 d46
03:49:36  26  ,lg6-lg8 d68
03:49:36  27  -- step by 3
03:49:36  28  ,clse-lg3 d03
03:49:36  29  ,lg3-lg6	d36
03:49:36  30  ,lg6-lg9	d69
03:49:36  31  ,lg9-lg12 d912
03:49:36  32  -- step by 4
03:49:36  33  ,clse-lg4 d04
03:49:36  34  ,lg4-lg8	d48
03:49:36  35  ,lg8-lg12 d812
03:49:36  36  ,lg6-lg12 d612
03:49:36  37  ,lg12-lg18 d1218
03:49:36  38  --
03:49:36  39  ,ABS(clse-lg1)dc1
03:49:36  40  ,ABS(clse-lg2)dc2
03:49:36  41  ,ABS(clse-lg3)dc3
03:49:36  42  ,ABS(clse-lg4)dc4
03:49:36  43  ,ABS(clse-lg5)dc5
03:49:36  44  ,ABS(clse-lg6)dc6
03:49:36  45  ,ABS(clse-lg7)dc7
03:49:36  46  ,ABS(clse-lg8)dc8
03:49:36  47  ,ABS(clse-lg9)dc9
03:49:36  48  ,ABS(clse-lg12)dc12
03:49:36  49  ,ABS(clse-lg18)dc18
03:49:36  50  ,ABS(clse-lg24)dc24
03:49:36  51  ,ABS(clse-lg72)dc72
03:49:36  52  ,(ld4-clse) ug4
03:49:36  53  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*2  PRECEDING AND CURRENT ROW)crr2
03:49:36  54  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*3  PRECEDING AND CURRENT ROW)crr3
03:49:36  55  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*4  PRECEDING AND CURRENT ROW)crr4
03:49:36  56  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*5  PRECEDING AND CURRENT ROW)crr5
03:49:36  57  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*6  PRECEDING AND CURRENT ROW)crr6
03:49:36  58  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*7  PRECEDING AND CURRENT ROW)crr7
03:49:36  59  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*8  PRECEDING AND CURRENT ROW)crr8
03:49:36  60  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*9  PRECEDING AND CURRENT ROW)crr9
03:49:36  61  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*12 PRECEDING AND CURRENT ROW)crr12
03:49:36  62  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*24 PRECEDING AND CURRENT ROW)crr24
03:49:36  63  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*72 PRECEDING AND CURRENT ROW)crr72
03:49:36  64  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
03:49:36  65  ,0+TO_CHAR(ydate,'D')d
03:49:36  66  ,0+TO_CHAR(ydate,'W')w
03:49:36  67  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
03:49:36  68  FROM q11
03:49:36  69  -- I dont want any NULL values from the LAG() functions:
03:49:36  70  WHERE lg72 > 0
03:49:36  71  ORDER BY pair,ydate
03:49:36  72  /

Table created.

Elapsed: 00:00:01.55
03:49:38 SQL> 
03:49:38 SQL> -- rpt
03:49:38 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    8429
	-1	    9780

Elapsed: 00:00:00.03
03:49:38 SQL> 
03:49:38 SQL> -- Calc gains and ntiles
03:49:38 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.11
03:49:38 SQL> CREATE TABLE q15 COMPRESS AS
03:49:38   2  SELECT
03:49:38   3  pair
03:49:38   4  ,ydate
03:49:38   5  ,prdate -- Should be unique
03:49:38   6  ,trend -- +1 or -1
03:49:38   7  ,dc12 -- next statement needs this
03:49:38   8  -- Use NTILE() to derive some attributes
03:49:38   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d12))		 att00
03:49:38  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d23))		 att01
03:49:38  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d34))		 att02
03:49:38  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d45))		 att03
03:49:38  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d56))		 att04
03:49:38  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d67))		 att05
03:49:38  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d78))		 att06
03:49:38  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d89))		 att07
03:49:38  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d912)) 	 att08
03:49:38  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc2)		 att09
03:49:38  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc3)		 att10
03:49:38  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc4)		 att11
03:49:38  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc5)		 att12
03:49:38  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6)		 att13
03:49:38  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc7)		 att14
03:49:38  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8)		 att15
03:49:38  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc9)		 att16
03:49:38  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att17
03:49:38  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc24)		 att18
03:49:38  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc72)		 att19
03:49:38  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr2,7))) att20
03:49:38  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr3,7))) att21
03:49:38  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr4,7))) att22
03:49:38  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr5,7))) att23
03:49:38  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6,7))) att24
03:49:38  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att25
03:49:38  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att26
03:49:38  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr72,7)))att27
03:49:38  37  -- date related integers: hour of day, day of week, week of month:
03:49:38  38  ,hh    att28
03:49:38  39  ,d     att29
03:49:38  40  ,w     att30
03:49:38  41  ,mpm   att31
03:49:38  42  ,trend att32
03:49:38  43  ,ug4 g4
03:49:38  44  ,CASE WHEN ug4 IS NULL THEN NULL WHEN ug4 > 0.0006 THEN 'up' ELSE 'nup' END gatt
03:49:38  45  ,CASE WHEN ug4 IS NULL THEN NULL WHEN ug4< -0.0006 THEN 'up' ELSE 'nup' END gattn
03:49:38  46  FROM q13
03:49:38  47  ORDER BY pair,ydate
03:49:38  48  /

Table created.

Elapsed: 00:00:03.61
03:49:42 SQL> 
03:49:42 SQL> -- rpt
03:49:42 SQL> SELECT pair,trend,gatt,gattn,AVG(g4),COUNT(g4),CORR(dc12,g4)FROM q15
03:49:42   2  GROUP BY pair,trend,gatt,gattn
03:49:42   3  ORDER BY pair,trend,gatt,gattn
03:49:42   4  /

PAIR	     TREND GAT GAT    AVG(G4)  COUNT(G4) CORR(DC12,G4)
------- ---------- --- --- ---------- ---------- -------------
usd_cad 	-1 nup nup -8.942E-06	    2480    -.01415493
usd_cad 	-1 nup up  -.00244889	    3755    .083396494
usd_cad 	-1 up  nup .002584717	    3522    -.00331921
usd_cad 	-1			       0
usd_cad 	 1 nup nup -.00001662	    1995    -.00361941
usd_cad 	 1 nup up  -.00258607	    3392    .030256005
usd_cad 	 1 up  nup .002796407	    3041    .011005435
usd_cad 	 1			       0

8 rows selected.

Elapsed: 00:00:00.03
03:49:42 SQL> 
03:49:42 SQL> -- rpt
03:49:42 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
usd_cad 2010-12-16 03:40:00

Elapsed: 00:00:00.01
03:49:42 SQL> 
03:49:42 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.14
03:49:42 SQL> CREATE TABLE modsrc COMPRESS AS
03:49:42   2  SELECT
03:49:42   3  pair
03:49:42   4  ,ydate
03:49:42   5  ,prdate
03:49:42   6  ,trend
03:49:42   7  ,g4
03:49:42   8  ,gatt
03:49:42   9  ,gattn
03:49:42  10  ,dc12
03:49:42  11  FROM q15
03:49:42  12  /

Table created.

Elapsed: 00:00:00.15
03:49:42 SQL> 
03:49:42 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
03:49:42 SQL> 
03:49:42 SQL> -- rpt
03:49:42 SQL> 
03:49:42 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      18641

Elapsed: 00:00:00.30
03:49:42 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      18209

Elapsed: 00:00:00.01
03:49:42 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      18209

Elapsed: 00:00:00.00
03:49:42 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      18209

Elapsed: 00:00:00.00
03:49:42 SQL> 
03:49:42 SQL> SELECT pair,trend,gatt,gattn,AVG(g4),COUNT(g4),CORR(dc12,g4)FROM modsrc
03:49:42   2  GROUP BY pair,trend,gatt,gattn
03:49:42   3  ORDER BY pair,trend,gatt,gattn
03:49:42   4  /

PAIR	     TREND GAT GAT    AVG(G4)  COUNT(G4) CORR(DC12,G4)
------- ---------- --- --- ---------- ---------- -------------
usd_cad 	-1 nup nup -8.942E-06	    2480    -.01415493
usd_cad 	-1 nup up  -.00244889	    3755    .083396494
usd_cad 	-1 up  nup .002584717	    3522    -.00331921
usd_cad 	-1			       0
usd_cad 	 1 nup nup -.00001662	    1995    -.00361941
usd_cad 	 1 nup up  -.00258607	    3392    .030256005
usd_cad 	 1 up  nup .002796407	    3041    .011005435
usd_cad 	 1			       0

8 rows selected.

Elapsed: 00:00:00.02
03:49:42 SQL> 
03:49:42 SQL> DROP   TABLE cad_ms10 ;

Table dropped.

Elapsed: 00:00:00.15
03:49:43 SQL> CREATE TABLE cad_ms10 COMPRESS AS
03:49:43   2  SELECT
03:49:43   3  ydate
03:49:43   4  ,trend cad_trend
03:49:43   5  ,g4    cad_g4
03:49:43   6  ,gatt  cad_gatt
03:49:43   7  ,gattn	cad_gattn
03:49:43   8  FROM modsrc
03:49:43   9  /

Table created.

Elapsed: 00:00:00.05
03:49:43 SQL> 
03:49:43 SQL> ANALYZE TABLE cad_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.14
03:49:43 SQL> 
03:49:43 SQL> -- rpt
03:49:43 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g4),MIN(g4),MAX(g4)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G4)	 MIN(G4)    MAX(G4)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-06-22 10:30:01 2010-12-16 03:40:00	 8428	  -.0153      .0164
	-1 2010-06-24 11:00:01 2010-12-16 03:30:00	 9757	  -.0127      .0151

Elapsed: 00:00:00.02
03:49:43 SQL> SELECT cad_trend,MIN(ydate),MAX(ydate),COUNT(cad_trend),MIN(cad_g4),MAX(cad_g4)FROM cad_ms10 GROUP BY cad_trend;

 CAD_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(CAD_TREND) MIN(CAD_G4) MAX(CAD_G4)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-06-22 10:30:01 2010-12-16 03:40:00	       8429	 -.0153       .0164
	-1 2010-06-24 11:00:01 2010-12-16 03:30:00	       9780	 -.0127       .0151

Elapsed: 00:00:00.01
03:49:43 SQL> 
03:49:43 SQL> -- I need a copy of q15 attributes
03:49:43 SQL> 
03:49:43 SQL> DROP   TABLE cad_att;

Table dropped.

Elapsed: 00:00:00.18
03:49:43 SQL> CREATE TABLE cad_att COMPRESS AS
03:49:43   2  SELECT
03:49:43   3  ydate
03:49:43   4  ,att00 cad_att00
03:49:43   5  ,att01 cad_att01
03:49:43   6  ,att02 cad_att02
03:49:43   7  ,att03 cad_att03
03:49:43   8  ,att04 cad_att04
03:49:43   9  ,att05 cad_att05
03:49:43  10  ,att06 cad_att06
03:49:43  11  ,att07 cad_att07
03:49:43  12  ,att08 cad_att08
03:49:43  13  ,att09 cad_att09
03:49:43  14  ,att10 cad_att10
03:49:43  15  ,att11 cad_att11
03:49:43  16  ,att12 cad_att12
03:49:43  17  ,att13 cad_att13
03:49:43  18  ,att14 cad_att14
03:49:43  19  ,att15 cad_att15
03:49:43  20  ,att16 cad_att16
03:49:43  21  ,att17 cad_att17
03:49:43  22  ,att18 cad_att18
03:49:43  23  ,att19 cad_att19
03:49:43  24  ,att20 cad_att20
03:49:43  25  ,att21 cad_att21
03:49:43  26  ,att22 cad_att22
03:49:43  27  ,att23 cad_att23
03:49:43  28  ,att24 cad_att24
03:49:43  29  ,att25 cad_att25
03:49:43  30  ,att26 cad_att26
03:49:43  31  ,att27 cad_att27
03:49:43  32  ,att28 cad_att28
03:49:43  33  ,att29 cad_att29
03:49:43  34  ,att30 cad_att30
03:49:43  35  ,att31 cad_att31
03:49:43  36  ,att32 cad_att32
03:49:43  37  FROM q15
03:49:43  38  /

Table created.

Elapsed: 00:00:00.12
03:49:43 SQL> 
03:49:43 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.38
03:49:43 SQL> 
03:49:43 SQL> -- rpt
03:49:43 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
     18209

Elapsed: 00:00:00.01
03:49:43 SQL> 
03:49:43 SQL> --
03:49:43 SQL> -- chf10.sql
03:49:43 SQL> --
03:49:43 SQL> 
03:49:43 SQL> -- Creates views and tables for backtesting a forex SVM strategy
03:49:43 SQL> 
03:49:43 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.34
03:49:44 SQL> 
03:49:44 SQL> -- I created di5min here:
03:49:44 SQL> -- /pt/s/rlk/svm4hp/update_di5min.sql
03:49:44 SQL> 
03:49:44 SQL> CREATE OR REPLACE VIEW q11 AS
03:49:44   2  SELECT
03:49:44   3  pair
03:49:44   4  ,ydate
03:49:44   5  ,prdate
03:49:44   6  ,rownum rnum -- acts as t in my time-series
03:49:44   7  ,clse
03:49:44   8  ,LAG(clse,6*1,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg1
03:49:44   9  ,LAG(clse,6*2,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg2
03:49:44  10  ,LAG(clse,6*3,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg3
03:49:44  11  ,LAG(clse,6*4,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg4
03:49:44  12  ,LAG(clse,6*5,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg5
03:49:44  13  ,LAG(clse,6*6,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg6
03:49:44  14  ,LAG(clse,6*7,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg7
03:49:44  15  ,LAG(clse,6*8,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg8
03:49:44  16  ,LAG(clse,6*9,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg9
03:49:44  17  ,LAG(clse,6*12,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg12
03:49:44  18  ,LAG(clse,6*18,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg18
03:49:44  19  ,LAG(clse,6*24,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg24
03:49:44  20  ,LAG(clse,6*72,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg72
03:49:44  21  ,LEAD(clse,6*4,NULL)OVER(PARTITION BY pair ORDER BY ydate) ld4
03:49:44  22  FROM di5min WHERE pair LIKE'%chf%'
03:49:44  23  ORDER BY ydate
03:49:44  24  /

View created.

Elapsed: 00:00:00.05
03:49:44 SQL> 
03:49:44 SQL> -- rpt
03:49:44 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
usd_chf        18643

Elapsed: 00:00:00.31
03:49:44 SQL> 
03:49:44 SQL> -- Calc deltas and gains
03:49:44 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.23
03:49:44 SQL> 
03:49:44 SQL> CREATE TABLE q13 COMPRESS AS
03:49:44   2  SELECT
03:49:44   3  pair
03:49:44   4  ,ydate
03:49:44   5  ,prdate
03:49:44   6  ,rnum
03:49:44   7  ,lg4
03:49:44   8  ,lg8
03:49:44   9  ,lg12
03:49:44  10  ,ld4
03:49:44  11  ,CASE WHEN(clse-lg12)>0 then 1 ELSE -1 END trend
03:49:44  12  -- step by 1
03:49:44  13  ,clse-lg1 d01
03:49:44  14  ,lg1-lg2	d12
03:49:44  15  ,lg2-lg3	d23
03:49:44  16  ,lg3-lg4	d34
03:49:44  17  ,lg4-lg5	d45
03:49:44  18  ,lg5-lg6	d56
03:49:44  19  ,lg6-lg7	d67
03:49:44  20  ,lg7-lg8	d78
03:49:44  21  ,lg8-lg9	d89
03:49:44  22  -- step by 2
03:49:44  23  ,clse-lg2 d02
03:49:44  24  ,lg2-lg4 d24
03:49:44  25  ,lg4-lg6 d46
03:49:44  26  ,lg6-lg8 d68
03:49:44  27  -- step by 3
03:49:44  28  ,clse-lg3 d03
03:49:44  29  ,lg3-lg6	d36
03:49:44  30  ,lg6-lg9	d69
03:49:44  31  ,lg9-lg12 d912
03:49:44  32  -- step by 4
03:49:44  33  ,clse-lg4 d04
03:49:44  34  ,lg4-lg8	d48
03:49:44  35  ,lg8-lg12 d812
03:49:44  36  ,lg6-lg12 d612
03:49:44  37  ,lg12-lg18 d1218
03:49:44  38  --
03:49:44  39  ,ABS(clse-lg1)dc1
03:49:44  40  ,ABS(clse-lg2)dc2
03:49:44  41  ,ABS(clse-lg3)dc3
03:49:44  42  ,ABS(clse-lg4)dc4
03:49:44  43  ,ABS(clse-lg5)dc5
03:49:44  44  ,ABS(clse-lg6)dc6
03:49:44  45  ,ABS(clse-lg7)dc7
03:49:44  46  ,ABS(clse-lg8)dc8
03:49:44  47  ,ABS(clse-lg9)dc9
03:49:44  48  ,ABS(clse-lg12)dc12
03:49:44  49  ,ABS(clse-lg18)dc18
03:49:44  50  ,ABS(clse-lg24)dc24
03:49:44  51  ,ABS(clse-lg72)dc72
03:49:44  52  ,(ld4-clse) ug4
03:49:44  53  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*2  PRECEDING AND CURRENT ROW)crr2
03:49:44  54  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*3  PRECEDING AND CURRENT ROW)crr3
03:49:44  55  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*4  PRECEDING AND CURRENT ROW)crr4
03:49:44  56  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*5  PRECEDING AND CURRENT ROW)crr5
03:49:44  57  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*6  PRECEDING AND CURRENT ROW)crr6
03:49:44  58  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*7  PRECEDING AND CURRENT ROW)crr7
03:49:44  59  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*8  PRECEDING AND CURRENT ROW)crr8
03:49:44  60  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*9  PRECEDING AND CURRENT ROW)crr9
03:49:44  61  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*12 PRECEDING AND CURRENT ROW)crr12
03:49:44  62  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*24 PRECEDING AND CURRENT ROW)crr24
03:49:44  63  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*72 PRECEDING AND CURRENT ROW)crr72
03:49:44  64  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
03:49:44  65  ,0+TO_CHAR(ydate,'D')d
03:49:44  66  ,0+TO_CHAR(ydate,'W')w
03:49:44  67  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
03:49:44  68  FROM q11
03:49:44  69  -- I dont want any NULL values from the LAG() functions:
03:49:44  70  WHERE lg72 > 0
03:49:44  71  ORDER BY pair,ydate
03:49:44  72  /

Table created.

Elapsed: 00:00:01.48
03:49:46 SQL> 
03:49:46 SQL> -- rpt
03:49:46 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    8182
	-1	   10029

Elapsed: 00:00:00.02
03:49:46 SQL> 
03:49:46 SQL> -- Calc gains and ntiles
03:49:46 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.23
03:49:46 SQL> CREATE TABLE q15 COMPRESS AS
03:49:46   2  SELECT
03:49:46   3  pair
03:49:46   4  ,ydate
03:49:46   5  ,prdate -- Should be unique
03:49:46   6  ,trend -- +1 or -1
03:49:46   7  ,dc12 -- next statement needs this
03:49:46   8  -- Use NTILE() to derive some attributes
03:49:46   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d12))		 att00
03:49:46  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d23))		 att01
03:49:46  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d34))		 att02
03:49:46  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d45))		 att03
03:49:46  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d56))		 att04
03:49:46  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d67))		 att05
03:49:46  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d78))		 att06
03:49:46  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d89))		 att07
03:49:46  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d912)) 	 att08
03:49:46  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc2)		 att09
03:49:46  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc3)		 att10
03:49:46  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc4)		 att11
03:49:46  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc5)		 att12
03:49:46  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6)		 att13
03:49:46  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc7)		 att14
03:49:46  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8)		 att15
03:49:46  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc9)		 att16
03:49:46  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att17
03:49:46  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc24)		 att18
03:49:46  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc72)		 att19
03:49:46  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr2,7))) att20
03:49:46  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr3,7))) att21
03:49:46  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr4,7))) att22
03:49:46  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr5,7))) att23
03:49:46  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6,7))) att24
03:49:46  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att25
03:49:46  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att26
03:49:46  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr72,7)))att27
03:49:46  37  -- date related integers: hour of day, day of week, week of month:
03:49:46  38  ,hh    att28
03:49:46  39  ,d     att29
03:49:46  40  ,w     att30
03:49:46  41  ,mpm   att31
03:49:46  42  ,trend att32
03:49:46  43  ,ug4 g4
03:49:46  44  ,CASE WHEN ug4 IS NULL THEN NULL WHEN ug4 > 0.0006 THEN 'up' ELSE 'nup' END gatt
03:49:46  45  ,CASE WHEN ug4 IS NULL THEN NULL WHEN ug4< -0.0006 THEN 'up' ELSE 'nup' END gattn
03:49:46  46  FROM q13
03:49:46  47  ORDER BY pair,ydate
03:49:46  48  /

Table created.

Elapsed: 00:00:03.55
03:49:50 SQL> 
03:49:50 SQL> -- rpt
03:49:50 SQL> SELECT pair,trend,gatt,gattn,AVG(g4),COUNT(g4),CORR(dc12,g4)FROM q15
03:49:50   2  GROUP BY pair,trend,gatt,gattn
03:49:50   3  ORDER BY pair,trend,gatt,gattn
03:49:50   4  /

PAIR	     TREND GAT GAT    AVG(G4)  COUNT(G4) CORR(DC12,G4)
------- ---------- --- --- ---------- ---------- -------------
usd_chf 	-1 nup nup .000028071	    2564    .055510503
usd_chf 	-1 nup up   -.0029293	    3716    .069773965
usd_chf 	-1 up  nup .002560463	    3749    -.12042573
usd_chf 	 1 nup nup 2.4826E-06	    2014    .036206844
usd_chf 	 1 nup up  -.00267113	    3408    .101340142
usd_chf 	 1 up  nup .002543266	    2736    -.13764331
usd_chf 	 1			       0

7 rows selected.

Elapsed: 00:00:00.03
03:49:50 SQL> 
03:49:50 SQL> -- rpt
03:49:50 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
usd_chf 2010-12-16 03:40:00

Elapsed: 00:00:00.01
03:49:50 SQL> 
03:49:50 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.18
03:49:50 SQL> CREATE TABLE modsrc COMPRESS AS
03:49:50   2  SELECT
03:49:50   3  pair
03:49:50   4  ,ydate
03:49:50   5  ,prdate
03:49:50   6  ,trend
03:49:50   7  ,g4
03:49:50   8  ,gatt
03:49:50   9  ,gattn
03:49:50  10  ,dc12
03:49:50  11  FROM q15
03:49:50  12  /

Table created.

Elapsed: 00:00:00.09
03:49:50 SQL> 
03:49:50 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.27
03:49:50 SQL> 
03:49:50 SQL> -- rpt
03:49:50 SQL> 
03:49:50 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      18643

Elapsed: 00:00:00.31
03:49:51 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      18211

Elapsed: 00:00:00.01
03:49:51 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      18211

Elapsed: 00:00:00.00
03:49:51 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      18211

Elapsed: 00:00:00.01
03:49:51 SQL> 
03:49:51 SQL> SELECT pair,trend,gatt,gattn,AVG(g4),COUNT(g4),CORR(dc12,g4)FROM modsrc
03:49:51   2  GROUP BY pair,trend,gatt,gattn
03:49:51   3  ORDER BY pair,trend,gatt,gattn
03:49:51   4  /

PAIR	     TREND GAT GAT    AVG(G4)  COUNT(G4) CORR(DC12,G4)
------- ---------- --- --- ---------- ---------- -------------
usd_chf 	-1 nup nup .000028071	    2564    .055510503
usd_chf 	-1 nup up   -.0029293	    3716    .069773965
usd_chf 	-1 up  nup .002560463	    3749    -.12042573
usd_chf 	 1 nup nup 2.4826E-06	    2014    .036206844
usd_chf 	 1 nup up  -.00267113	    3408    .101340142
usd_chf 	 1 up  nup .002543266	    2736    -.13764331
usd_chf 	 1			       0

7 rows selected.

Elapsed: 00:00:00.03
03:49:51 SQL> 
03:49:51 SQL> DROP   TABLE chf_ms10 ;

Table dropped.

Elapsed: 00:00:00.14
03:49:51 SQL> CREATE TABLE chf_ms10 COMPRESS AS
03:49:51   2  SELECT
03:49:51   3  ydate
03:49:51   4  ,trend chf_trend
03:49:51   5  ,g4    chf_g4
03:49:51   6  ,gatt  chf_gatt
03:49:51   7  ,gattn	chf_gattn
03:49:51   8  FROM modsrc
03:49:51   9  /

Table created.

Elapsed: 00:00:00.06
03:49:51 SQL> 
03:49:51 SQL> ANALYZE TABLE chf_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
03:49:51 SQL> 
03:49:51 SQL> -- rpt
03:49:51 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g4),MIN(g4),MAX(g4)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G4)	 MIN(G4)    MAX(G4)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-06-22 10:30:01 2010-12-16 03:40:00	 8158	-.016775      .0136
	-1 2010-06-22 12:40:01 2010-12-15 16:30:00	10029	  -.0166      .0149

Elapsed: 00:00:00.02
03:49:51 SQL> SELECT chf_trend,MIN(ydate),MAX(ydate),COUNT(chf_trend),MIN(chf_g4),MAX(chf_g4)FROM chf_ms10 GROUP BY chf_trend;

 CHF_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(CHF_TREND) MIN(CHF_G4) MAX(CHF_G4)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-06-22 10:30:01 2010-12-16 03:40:00	       8182    -.016775       .0136
	-1 2010-06-22 12:40:01 2010-12-15 16:30:00	      10029	 -.0166       .0149

Elapsed: 00:00:00.01
03:49:51 SQL> 
03:49:51 SQL> -- I need a copy of q15 attributes
03:49:51 SQL> 
03:49:51 SQL> DROP   TABLE chf_att;

Table dropped.

Elapsed: 00:00:00.13
03:49:51 SQL> CREATE TABLE chf_att COMPRESS AS
03:49:51   2  SELECT
03:49:51   3  ydate
03:49:51   4  ,att00 chf_att00
03:49:51   5  ,att01 chf_att01
03:49:51   6  ,att02 chf_att02
03:49:51   7  ,att03 chf_att03
03:49:51   8  ,att04 chf_att04
03:49:51   9  ,att05 chf_att05
03:49:51  10  ,att06 chf_att06
03:49:51  11  ,att07 chf_att07
03:49:51  12  ,att08 chf_att08
03:49:51  13  ,att09 chf_att09
03:49:51  14  ,att10 chf_att10
03:49:51  15  ,att11 chf_att11
03:49:51  16  ,att12 chf_att12
03:49:51  17  ,att13 chf_att13
03:49:51  18  ,att14 chf_att14
03:49:51  19  ,att15 chf_att15
03:49:51  20  ,att16 chf_att16
03:49:51  21  ,att17 chf_att17
03:49:51  22  ,att18 chf_att18
03:49:51  23  ,att19 chf_att19
03:49:51  24  ,att20 chf_att20
03:49:51  25  ,att21 chf_att21
03:49:51  26  ,att22 chf_att22
03:49:51  27  ,att23 chf_att23
03:49:51  28  ,att24 chf_att24
03:49:51  29  ,att25 chf_att25
03:49:51  30  ,att26 chf_att26
03:49:51  31  ,att27 chf_att27
03:49:51  32  ,att28 chf_att28
03:49:51  33  ,att29 chf_att29
03:49:51  34  ,att30 chf_att30
03:49:51  35  ,att31 chf_att31
03:49:51  36  ,att32 chf_att32
03:49:51  37  FROM q15
03:49:51  38  /

Table created.

Elapsed: 00:00:00.13
03:49:51 SQL> 
03:49:51 SQL> ANALYZE TABLE chf_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.36
03:49:52 SQL> 
03:49:52 SQL> -- rpt
03:49:52 SQL> SELECT COUNT(*)FROM chf_att;

  COUNT(*)
----------
     18211

Elapsed: 00:00:00.00
03:49:52 SQL> 
03:49:52 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
