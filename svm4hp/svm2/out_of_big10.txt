
SQL*Plus: Release 11.2.0.1.0 Production on Thu Dec 16 18:27:59 2010

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

18:27:59 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
18:27:59 SQL> 18:27:59 SQL> --
18:27:59 SQL> -- eur10.sql
18:27:59 SQL> --
18:27:59 SQL> 
18:27:59 SQL> -- Creates views and tables for backtesting a forex SVM strategy
18:27:59 SQL> 
18:27:59 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.01
18:27:59 SQL> 
18:27:59 SQL> -- I created di5min here:
18:27:59 SQL> -- /pt/s/rlk/svm4hp/update_di5min.sql
18:27:59 SQL> 
18:27:59 SQL> CREATE OR REPLACE VIEW q11 AS
18:27:59   2  SELECT
18:27:59   3  pair
18:27:59   4  ,ydate
18:27:59   5  ,prdate
18:27:59   6  ,rownum rnum -- acts as t in my time-series
18:27:59   7  ,clse
18:27:59   8  ,LAG(clse,6*1,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg1
18:27:59   9  ,LAG(clse,6*2,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg2
18:27:59  10  ,LAG(clse,6*3,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg3
18:27:59  11  ,LAG(clse,6*4,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg4
18:27:59  12  ,LAG(clse,6*5,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg5
18:27:59  13  ,LAG(clse,6*6,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg6
18:27:59  14  ,LAG(clse,6*7,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg7
18:27:59  15  ,LAG(clse,6*8,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg8
18:27:59  16  ,LAG(clse,6*9,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg9
18:27:59  17  ,LAG(clse,6*12,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg12
18:27:59  18  ,LAG(clse,6*18,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg18
18:27:59  19  ,LAG(clse,6*24,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg24
18:27:59  20  ,LAG(clse,6*72,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg72
18:27:59  21  ,LEAD(clse,6*4,NULL)OVER(PARTITION BY pair ORDER BY ydate) ld4
18:27:59  22  FROM di5min WHERE pair LIKE'%eur%'
18:27:59  23  ORDER BY ydate
18:27:59  24  /

View created.

Elapsed: 00:00:00.04
18:27:59 SQL> 
18:27:59 SQL> -- rpt
18:27:59 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
eur_usd        18643

Elapsed: 00:00:00.32
18:27:59 SQL> 
18:27:59 SQL> -- Calc deltas and gains
18:27:59 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.16
18:28:00 SQL> 
18:28:00 SQL> CREATE TABLE q13 COMPRESS AS
18:28:00   2  SELECT
18:28:00   3  pair
18:28:00   4  ,ydate
18:28:00   5  ,prdate
18:28:00   6  ,rnum
18:28:00   7  ,lg4
18:28:00   8  ,lg8
18:28:00   9  ,lg12
18:28:00  10  ,ld4
18:28:00  11  ,CASE WHEN(clse-lg12)>0 then 1 ELSE -1 END trend
18:28:00  12  -- step by 1
18:28:00  13  ,clse-lg1 d01
18:28:00  14  ,lg1-lg2	d12
18:28:00  15  ,lg2-lg3	d23
18:28:00  16  ,lg3-lg4	d34
18:28:00  17  ,lg4-lg5	d45
18:28:00  18  ,lg5-lg6	d56
18:28:00  19  ,lg6-lg7	d67
18:28:00  20  ,lg7-lg8	d78
18:28:00  21  ,lg8-lg9	d89
18:28:00  22  -- step by 2
18:28:00  23  ,clse-lg2 d02
18:28:00  24  ,lg2-lg4 d24
18:28:00  25  ,lg4-lg6 d46
18:28:00  26  ,lg6-lg8 d68
18:28:00  27  -- step by 3
18:28:00  28  ,clse-lg3 d03
18:28:00  29  ,lg3-lg6	d36
18:28:00  30  ,lg6-lg9	d69
18:28:00  31  ,lg9-lg12 d912
18:28:00  32  -- step by 4
18:28:00  33  ,clse-lg4 d04
18:28:00  34  ,lg4-lg8	d48
18:28:00  35  ,lg8-lg12 d812
18:28:00  36  ,lg6-lg12 d612
18:28:00  37  ,lg12-lg18 d1218
18:28:00  38  --
18:28:00  39  ,ABS(clse-lg1)dc1
18:28:00  40  ,ABS(clse-lg2)dc2
18:28:00  41  ,ABS(clse-lg3)dc3
18:28:00  42  ,ABS(clse-lg4)dc4
18:28:00  43  ,ABS(clse-lg5)dc5
18:28:00  44  ,ABS(clse-lg6)dc6
18:28:00  45  ,ABS(clse-lg7)dc7
18:28:00  46  ,ABS(clse-lg8)dc8
18:28:00  47  ,ABS(clse-lg9)dc9
18:28:00  48  ,ABS(clse-lg12)dc12
18:28:00  49  ,ABS(clse-lg18)dc18
18:28:00  50  ,ABS(clse-lg24)dc24
18:28:00  51  ,ABS(clse-lg72)dc72
18:28:00  52  ,(ld4-clse) ug4
18:28:00  53  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*2  PRECEDING AND CURRENT ROW)crr2
18:28:00  54  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*3  PRECEDING AND CURRENT ROW)crr3
18:28:00  55  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*4  PRECEDING AND CURRENT ROW)crr4
18:28:00  56  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*5  PRECEDING AND CURRENT ROW)crr5
18:28:00  57  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*6  PRECEDING AND CURRENT ROW)crr6
18:28:00  58  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*7  PRECEDING AND CURRENT ROW)crr7
18:28:00  59  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*8  PRECEDING AND CURRENT ROW)crr8
18:28:00  60  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*9  PRECEDING AND CURRENT ROW)crr9
18:28:00  61  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*12 PRECEDING AND CURRENT ROW)crr12
18:28:00  62  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*24 PRECEDING AND CURRENT ROW)crr24
18:28:00  63  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*72 PRECEDING AND CURRENT ROW)crr72
18:28:00  64  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
18:28:00  65  ,0+TO_CHAR(ydate,'D')d
18:28:00  66  ,0+TO_CHAR(ydate,'W')w
18:28:00  67  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
18:28:00  68  FROM q11
18:28:00  69  -- I dont want any NULL values from the LAG() functions:
18:28:00  70  WHERE lg72 > 0
18:28:00  71  ORDER BY pair,ydate
18:28:00  72  /

Table created.

Elapsed: 00:00:01.71
18:28:01 SQL> 
18:28:01 SQL> -- rpt
18:28:01 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    9436
	-1	    8775

Elapsed: 00:00:00.03
18:28:01 SQL> 
18:28:01 SQL> -- Calc gains and ntiles
18:28:01 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.17
18:28:01 SQL> CREATE TABLE q15 COMPRESS AS
18:28:01   2  SELECT
18:28:01   3  pair
18:28:01   4  ,ydate
18:28:01   5  ,prdate -- Should be unique
18:28:01   6  ,trend -- +1 or -1
18:28:01   7  ,dc12 -- next statement needs this
18:28:01   8  -- Use NTILE() to derive some attributes
18:28:01   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d12))		 att00
18:28:01  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d23))		 att01
18:28:01  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d34))		 att02
18:28:01  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d45))		 att03
18:28:01  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d56))		 att04
18:28:01  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d67))		 att05
18:28:01  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d78))		 att06
18:28:01  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d89))		 att07
18:28:01  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d912)) 	 att08
18:28:01  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc2)		 att09
18:28:01  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc3)		 att10
18:28:01  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc4)		 att11
18:28:01  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc5)		 att12
18:28:01  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6)		 att13
18:28:01  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc7)		 att14
18:28:01  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8)		 att15
18:28:01  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc9)		 att16
18:28:01  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att17
18:28:01  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc24)		 att18
18:28:01  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc72)		 att19
18:28:01  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr2,7))) att20
18:28:01  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr3,7))) att21
18:28:01  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr4,7))) att22
18:28:01  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr5,7))) att23
18:28:01  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6,7))) att24
18:28:01  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att25
18:28:01  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att26
18:28:01  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr72,7)))att27
18:28:01  37  -- date related integers: hour of day, day of week, week of month:
18:28:01  38  ,hh    att28
18:28:01  39  ,d     att29
18:28:01  40  ,w     att30
18:28:01  41  ,mpm   att31
18:28:01  42  ,trend att32
18:28:01  43  ,ug4 g4
18:28:01  44  ,CASE WHEN ug4 IS NULL THEN NULL WHEN ug4 > 0.0006 THEN 'up' ELSE 'nup' END gatt
18:28:01  45  ,CASE WHEN ug4 IS NULL THEN NULL WHEN ug4< -0.0006 THEN 'up' ELSE 'nup' END gattn
18:28:01  46  FROM q13
18:28:01  47  ORDER BY pair,ydate
18:28:01  48  /

Table created.

Elapsed: 00:00:03.58
18:28:05 SQL> 
18:28:05 SQL> -- rpt
18:28:05 SQL> SELECT pair,trend,gatt,gattn,AVG(g4),COUNT(g4),CORR(dc12,g4)FROM q15
18:28:05   2  GROUP BY pair,trend,gatt,gattn
18:28:05   3  ORDER BY pair,trend,gatt,gattn
18:28:05   4  /

PAIR	     TREND GAT GAT    AVG(G4)  COUNT(G4) CORR(DC12,G4)
------- ---------- --- --- ---------- ---------- -------------
eur_usd 	-1 nup nup -9.425E-06	    1549    .015640758
eur_usd 	-1 nup up  -.00336065	    3529     .02859213
eur_usd 	-1 up  nup .003574518	    3680    -.17035265
eur_usd 	-1			       0
eur_usd 	 1 nup nup -2.883E-06	    1795    .024889674
eur_usd 	 1 nup up  -.00312613	    3880    .081526945
eur_usd 	 1 up  nup  .00347195	    3754     -.0346489
eur_usd 	 1			       0

8 rows selected.

Elapsed: 00:00:00.04
18:28:05 SQL> 
18:28:05 SQL> -- rpt
18:28:05 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
eur_usd 2010-12-16 18:20:00

Elapsed: 00:00:00.01
18:28:05 SQL> 
18:28:05 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.17
18:28:05 SQL> CREATE TABLE modsrc COMPRESS AS
18:28:05   2  SELECT
18:28:05   3  pair
18:28:05   4  ,ydate
18:28:05   5  ,prdate
18:28:05   6  ,trend
18:28:05   7  ,g4
18:28:05   8  ,gatt
18:28:05   9  ,gattn
18:28:05  10  ,dc12
18:28:05  11  FROM q15
18:28:05  12  /

Table created.

Elapsed: 00:00:00.08
18:28:05 SQL> 
18:28:05 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
18:28:06 SQL> 
18:28:06 SQL> -- rpt
18:28:06 SQL> 
18:28:06 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      18643

Elapsed: 00:00:00.30
18:28:06 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      18211

Elapsed: 00:00:00.00
18:28:06 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      18211

Elapsed: 00:00:00.01
18:28:06 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      18211

Elapsed: 00:00:00.00
18:28:06 SQL> 
18:28:06 SQL> SELECT pair,trend,gatt,gattn,AVG(g4),COUNT(g4),CORR(dc12,g4)FROM modsrc
18:28:06   2  GROUP BY pair,trend,gatt,gattn
18:28:06   3  ORDER BY pair,trend,gatt,gattn
18:28:06   4  /

PAIR	     TREND GAT GAT    AVG(G4)  COUNT(G4) CORR(DC12,G4)
------- ---------- --- --- ---------- ---------- -------------
eur_usd 	-1 nup nup -9.425E-06	    1549    .015640758
eur_usd 	-1 nup up  -.00336065	    3529     .02859213
eur_usd 	-1 up  nup .003574518	    3680    -.17035265
eur_usd 	-1			       0
eur_usd 	 1 nup nup -2.883E-06	    1795    .024889674
eur_usd 	 1 nup up  -.00312613	    3880    .081526945
eur_usd 	 1 up  nup  .00347195	    3754     -.0346489
eur_usd 	 1			       0

8 rows selected.

Elapsed: 00:00:00.02
18:28:06 SQL> 
18:28:06 SQL> DROP   TABLE eur_ms10 ;

Table dropped.

Elapsed: 00:00:00.07
18:28:06 SQL> CREATE TABLE eur_ms10 COMPRESS AS
18:28:06   2  SELECT
18:28:06   3  ydate
18:28:06   4  ,trend eur_trend
18:28:06   5  ,g4    eur_g4
18:28:06   6  ,gatt  eur_gatt
18:28:06   7  ,gattn	eur_gattn
18:28:06   8  FROM modsrc
18:28:06   9  /

Table created.

Elapsed: 00:00:00.05
18:28:06 SQL> 
18:28:06 SQL> ANALYZE TABLE eur_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
18:28:06 SQL> 
18:28:06 SQL> -- rpt
18:28:06 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g4),MIN(g4),MAX(g4)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G4)	 MIN(G4)    MAX(G4)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-06-23 18:20:01 2010-12-16 18:00:00	 9429	  -.0153      .0165
	-1 2010-06-23 17:00:01 2010-12-16 18:20:00	 8758	  -.0164      .0167

Elapsed: 00:00:00.02
18:28:06 SQL> SELECT eur_trend,MIN(ydate),MAX(ydate),COUNT(eur_trend),MIN(eur_g4),MAX(eur_g4)FROM eur_ms10 GROUP BY eur_trend;

 EUR_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(EUR_TREND) MIN(EUR_G4) MAX(EUR_G4)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-06-23 18:20:01 2010-12-16 18:00:00	       9436	 -.0153       .0165
	-1 2010-06-23 17:00:01 2010-12-16 18:20:00	       8775	 -.0164       .0167

Elapsed: 00:00:00.01
18:28:06 SQL> 
18:28:06 SQL> -- I need a copy of q15 attributes
18:28:06 SQL> 
18:28:06 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.17
18:28:06 SQL> CREATE TABLE eur_att COMPRESS AS
18:28:06   2  SELECT
18:28:06   3  ydate
18:28:06   4  ,att00 eur_att00
18:28:06   5  ,att01 eur_att01
18:28:06   6  ,att02 eur_att02
18:28:06   7  ,att03 eur_att03
18:28:06   8  ,att04 eur_att04
18:28:06   9  ,att05 eur_att05
18:28:06  10  ,att06 eur_att06
18:28:06  11  ,att07 eur_att07
18:28:06  12  ,att08 eur_att08
18:28:06  13  ,att09 eur_att09
18:28:06  14  ,att10 eur_att10
18:28:06  15  ,att11 eur_att11
18:28:06  16  ,att12 eur_att12
18:28:06  17  ,att13 eur_att13
18:28:06  18  ,att14 eur_att14
18:28:06  19  ,att15 eur_att15
18:28:06  20  ,att16 eur_att16
18:28:06  21  ,att17 eur_att17
18:28:06  22  ,att18 eur_att18
18:28:06  23  ,att19 eur_att19
18:28:06  24  ,att20 eur_att20
18:28:06  25  ,att21 eur_att21
18:28:06  26  ,att22 eur_att22
18:28:06  27  ,att23 eur_att23
18:28:06  28  ,att24 eur_att24
18:28:06  29  ,att25 eur_att25
18:28:06  30  ,att26 eur_att26
18:28:06  31  ,att27 eur_att27
18:28:06  32  ,att28 eur_att28
18:28:06  33  ,att29 eur_att29
18:28:06  34  ,att30 eur_att30
18:28:06  35  ,att31 eur_att31
18:28:06  36  ,att32 eur_att32
18:28:06  37  FROM q15
18:28:06  38  /

Table created.

Elapsed: 00:00:00.13
18:28:07 SQL> 
18:28:07 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
18:28:07 SQL> 
18:28:07 SQL> -- rpt
18:28:07 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     18211

Elapsed: 00:00:00.01
18:28:07 SQL> 
18:28:07 SQL> --
18:28:07 SQL> -- aud10.sql
18:28:07 SQL> --
18:28:07 SQL> 
18:28:07 SQL> -- Creates views and tables for backtesting a forex SVM strategy
18:28:07 SQL> 
18:28:07 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.40
18:28:07 SQL> 
18:28:07 SQL> -- I created di5min here:
18:28:07 SQL> -- /pt/s/rlk/svm4hp/update_di5min.sql
18:28:07 SQL> 
18:28:07 SQL> CREATE OR REPLACE VIEW q11 AS
18:28:07   2  SELECT
18:28:07   3  pair
18:28:07   4  ,ydate
18:28:07   5  ,prdate
18:28:07   6  ,rownum rnum -- acts as t in my time-series
18:28:07   7  ,clse
18:28:07   8  ,LAG(clse,6*1,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg1
18:28:07   9  ,LAG(clse,6*2,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg2
18:28:07  10  ,LAG(clse,6*3,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg3
18:28:07  11  ,LAG(clse,6*4,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg4
18:28:07  12  ,LAG(clse,6*5,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg5
18:28:07  13  ,LAG(clse,6*6,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg6
18:28:07  14  ,LAG(clse,6*7,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg7
18:28:07  15  ,LAG(clse,6*8,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg8
18:28:07  16  ,LAG(clse,6*9,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg9
18:28:07  17  ,LAG(clse,6*12,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg12
18:28:07  18  ,LAG(clse,6*18,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg18
18:28:07  19  ,LAG(clse,6*24,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg24
18:28:07  20  ,LAG(clse,6*72,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg72
18:28:07  21  ,LEAD(clse,6*4,NULL)OVER(PARTITION BY pair ORDER BY ydate) ld4
18:28:07  22  FROM di5min WHERE pair LIKE'%aud%'
18:28:07  23  ORDER BY ydate
18:28:07  24  /

View created.

Elapsed: 00:00:00.04
18:28:07 SQL> 
18:28:07 SQL> -- rpt
18:28:07 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
aud_usd        18642

Elapsed: 00:00:00.32
18:28:08 SQL> 
18:28:08 SQL> -- Calc deltas and gains
18:28:08 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.22
18:28:08 SQL> 
18:28:08 SQL> CREATE TABLE q13 COMPRESS AS
18:28:08   2  SELECT
18:28:08   3  pair
18:28:08   4  ,ydate
18:28:08   5  ,prdate
18:28:08   6  ,rnum
18:28:08   7  ,lg4
18:28:08   8  ,lg8
18:28:08   9  ,lg12
18:28:08  10  ,ld4
18:28:08  11  ,CASE WHEN(clse-lg12)>0 then 1 ELSE -1 END trend
18:28:08  12  -- step by 1
18:28:08  13  ,clse-lg1 d01
18:28:08  14  ,lg1-lg2	d12
18:28:08  15  ,lg2-lg3	d23
18:28:08  16  ,lg3-lg4	d34
18:28:08  17  ,lg4-lg5	d45
18:28:08  18  ,lg5-lg6	d56
18:28:08  19  ,lg6-lg7	d67
18:28:08  20  ,lg7-lg8	d78
18:28:08  21  ,lg8-lg9	d89
18:28:08  22  -- step by 2
18:28:08  23  ,clse-lg2 d02
18:28:08  24  ,lg2-lg4 d24
18:28:08  25  ,lg4-lg6 d46
18:28:08  26  ,lg6-lg8 d68
18:28:08  27  -- step by 3
18:28:08  28  ,clse-lg3 d03
18:28:08  29  ,lg3-lg6	d36
18:28:08  30  ,lg6-lg9	d69
18:28:08  31  ,lg9-lg12 d912
18:28:08  32  -- step by 4
18:28:08  33  ,clse-lg4 d04
18:28:08  34  ,lg4-lg8	d48
18:28:08  35  ,lg8-lg12 d812
18:28:08  36  ,lg6-lg12 d612
18:28:08  37  ,lg12-lg18 d1218
18:28:08  38  --
18:28:08  39  ,ABS(clse-lg1)dc1
18:28:08  40  ,ABS(clse-lg2)dc2
18:28:08  41  ,ABS(clse-lg3)dc3
18:28:08  42  ,ABS(clse-lg4)dc4
18:28:08  43  ,ABS(clse-lg5)dc5
18:28:08  44  ,ABS(clse-lg6)dc6
18:28:08  45  ,ABS(clse-lg7)dc7
18:28:08  46  ,ABS(clse-lg8)dc8
18:28:08  47  ,ABS(clse-lg9)dc9
18:28:08  48  ,ABS(clse-lg12)dc12
18:28:08  49  ,ABS(clse-lg18)dc18
18:28:08  50  ,ABS(clse-lg24)dc24
18:28:08  51  ,ABS(clse-lg72)dc72
18:28:08  52  ,(ld4-clse) ug4
18:28:08  53  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*2  PRECEDING AND CURRENT ROW)crr2
18:28:08  54  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*3  PRECEDING AND CURRENT ROW)crr3
18:28:08  55  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*4  PRECEDING AND CURRENT ROW)crr4
18:28:08  56  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*5  PRECEDING AND CURRENT ROW)crr5
18:28:08  57  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*6  PRECEDING AND CURRENT ROW)crr6
18:28:08  58  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*7  PRECEDING AND CURRENT ROW)crr7
18:28:08  59  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*8  PRECEDING AND CURRENT ROW)crr8
18:28:08  60  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*9  PRECEDING AND CURRENT ROW)crr9
18:28:08  61  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*12 PRECEDING AND CURRENT ROW)crr12
18:28:08  62  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*24 PRECEDING AND CURRENT ROW)crr24
18:28:08  63  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*72 PRECEDING AND CURRENT ROW)crr72
18:28:08  64  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
18:28:08  65  ,0+TO_CHAR(ydate,'D')d
18:28:08  66  ,0+TO_CHAR(ydate,'W')w
18:28:08  67  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
18:28:08  68  FROM q11
18:28:08  69  -- I dont want any NULL values from the LAG() functions:
18:28:08  70  WHERE lg72 > 0
18:28:08  71  ORDER BY pair,ydate
18:28:08  72  /

Table created.

Elapsed: 00:00:01.50
18:28:09 SQL> 
18:28:09 SQL> -- rpt
18:28:09 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    9422
	-1	    8788

Elapsed: 00:00:00.02
18:28:09 SQL> 
18:28:09 SQL> -- Calc gains and ntiles
18:28:09 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.13
18:28:10 SQL> CREATE TABLE q15 COMPRESS AS
18:28:10   2  SELECT
18:28:10   3  pair
18:28:10   4  ,ydate
18:28:10   5  ,prdate -- Should be unique
18:28:10   6  ,trend -- +1 or -1
18:28:10   7  ,dc12 -- next statement needs this
18:28:10   8  -- Use NTILE() to derive some attributes
18:28:10   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d12))		 att00
18:28:10  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d23))		 att01
18:28:10  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d34))		 att02
18:28:10  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d45))		 att03
18:28:10  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d56))		 att04
18:28:10  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d67))		 att05
18:28:10  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d78))		 att06
18:28:10  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d89))		 att07
18:28:10  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d912)) 	 att08
18:28:10  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc2)		 att09
18:28:10  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc3)		 att10
18:28:10  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc4)		 att11
18:28:10  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc5)		 att12
18:28:10  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6)		 att13
18:28:10  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc7)		 att14
18:28:10  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8)		 att15
18:28:10  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc9)		 att16
18:28:10  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att17
18:28:10  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc24)		 att18
18:28:10  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc72)		 att19
18:28:10  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr2,7))) att20
18:28:10  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr3,7))) att21
18:28:10  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr4,7))) att22
18:28:10  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr5,7))) att23
18:28:10  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6,7))) att24
18:28:10  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att25
18:28:10  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att26
18:28:10  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr72,7)))att27
18:28:10  37  -- date related integers: hour of day, day of week, week of month:
18:28:10  38  ,hh    att28
18:28:10  39  ,d     att29
18:28:10  40  ,w     att30
18:28:10  41  ,mpm   att31
18:28:10  42  ,trend att32
18:28:10  43  ,ug4 g4
18:28:10  44  ,CASE WHEN ug4 IS NULL THEN NULL WHEN ug4 > 0.0006 THEN 'up' ELSE 'nup' END gatt
18:28:10  45  ,CASE WHEN ug4 IS NULL THEN NULL WHEN ug4< -0.0006 THEN 'up' ELSE 'nup' END gattn
18:28:10  46  FROM q13
18:28:10  47  ORDER BY pair,ydate
18:28:10  48  /

Table created.

Elapsed: 00:00:03.59
18:28:13 SQL> 
18:28:13 SQL> -- rpt
18:28:13 SQL> SELECT pair,trend,gatt,gattn,AVG(g4),COUNT(g4),CORR(dc12,g4)FROM q15
18:28:13   2  GROUP BY pair,trend,gatt,gattn
18:28:13   3  ORDER BY pair,trend,gatt,gattn
18:28:13   4  /

PAIR	     TREND GAT GAT    AVG(G4)  COUNT(G4) CORR(DC12,G4)
------- ---------- --- --- ---------- ---------- -------------
aud_usd 	-1 nup nup  .00002097	    1551    -.01387686
aud_usd 	-1 nup up  -.00301658	    3369    -.03716081
aud_usd 	-1 up  nup  .00293881	    3856    .018179814
aud_usd 	-1			       0
aud_usd 	 1 nup nup -6.442E-06	    1855    .026044922
aud_usd 	 1 nup up  -.00278087	    3632    .031359516
aud_usd 	 1 up  nup .002959234	    3923     -.0365915
aud_usd 	 1			       0

8 rows selected.

Elapsed: 00:00:00.04
18:28:13 SQL> 
18:28:13 SQL> -- rpt
18:28:13 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
aud_usd 2010-12-16 18:20:00

Elapsed: 00:00:00.01
18:28:13 SQL> 
18:28:13 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.14
18:28:13 SQL> CREATE TABLE modsrc COMPRESS AS
18:28:13   2  SELECT
18:28:13   3  pair
18:28:13   4  ,ydate
18:28:13   5  ,prdate
18:28:13   6  ,trend
18:28:13   7  ,g4
18:28:13   8  ,gatt
18:28:13   9  ,gattn
18:28:13  10  ,dc12
18:28:13  11  FROM q15
18:28:13  12  /

Table created.

Elapsed: 00:00:00.08
18:28:13 SQL> 
18:28:13 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
18:28:14 SQL> 
18:28:14 SQL> -- rpt
18:28:14 SQL> 
18:28:14 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      18642

Elapsed: 00:00:00.32
18:28:14 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      18210

Elapsed: 00:00:00.01
18:28:14 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      18210

Elapsed: 00:00:00.00
18:28:14 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      18210

Elapsed: 00:00:00.00
18:28:14 SQL> 
18:28:14 SQL> SELECT pair,trend,gatt,gattn,AVG(g4),COUNT(g4),CORR(dc12,g4)FROM modsrc
18:28:14   2  GROUP BY pair,trend,gatt,gattn
18:28:14   3  ORDER BY pair,trend,gatt,gattn
18:28:14   4  /

PAIR	     TREND GAT GAT    AVG(G4)  COUNT(G4) CORR(DC12,G4)
------- ---------- --- --- ---------- ---------- -------------
aud_usd 	-1 nup nup  .00002097	    1551    -.01387686
aud_usd 	-1 nup up  -.00301658	    3369    -.03716081
aud_usd 	-1 up  nup  .00293881	    3856    .018179814
aud_usd 	-1			       0
aud_usd 	 1 nup nup -6.442E-06	    1855    .026044922
aud_usd 	 1 nup up  -.00278087	    3632    .031359516
aud_usd 	 1 up  nup .002959234	    3923     -.0365915
aud_usd 	 1			       0

8 rows selected.

Elapsed: 00:00:00.03
18:28:14 SQL> 
18:28:14 SQL> DROP   TABLE aud_ms10 ;

Table dropped.

Elapsed: 00:00:00.08
18:28:14 SQL> CREATE TABLE aud_ms10 COMPRESS AS
18:28:14   2  SELECT
18:28:14   3  ydate
18:28:14   4  ,trend aud_trend
18:28:14   5  ,g4    aud_g4
18:28:14   6  ,gatt  aud_gatt
18:28:14   7  ,gattn	aud_gattn
18:28:14   8  FROM modsrc
18:28:14   9  /

Table created.

Elapsed: 00:00:00.06
18:28:14 SQL> 
18:28:14 SQL> ANALYZE TABLE aud_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
18:28:14 SQL> 
18:28:14 SQL> -- rpt
18:28:14 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g4),MIN(g4),MAX(g4)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G4)	 MIN(G4)    MAX(G4)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-06-23 20:40:01 2010-12-16 18:20:00	 9410	  -.0162      .0122
	-1 2010-06-23 17:00:01 2010-12-16 17:10:00	 8776	   -.017      .0131

Elapsed: 00:00:00.02
18:28:14 SQL> SELECT aud_trend,MIN(ydate),MAX(ydate),COUNT(aud_trend),MIN(aud_g4),MAX(aud_g4)FROM aud_ms10 GROUP BY aud_trend;

 AUD_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(AUD_TREND) MIN(AUD_G4) MAX(AUD_G4)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-06-23 20:40:01 2010-12-16 18:20:00	       9422	 -.0162       .0122
	-1 2010-06-23 17:00:01 2010-12-16 17:10:00	       8788	  -.017       .0131

Elapsed: 00:00:00.01
18:28:14 SQL> 
18:28:14 SQL> -- I need a copy of q15 attributes
18:28:14 SQL> 
18:28:14 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.12
18:28:14 SQL> CREATE TABLE aud_att COMPRESS AS
18:28:14   2  SELECT
18:28:14   3  ydate
18:28:14   4  ,att00 aud_att00
18:28:14   5  ,att01 aud_att01
18:28:14   6  ,att02 aud_att02
18:28:14   7  ,att03 aud_att03
18:28:14   8  ,att04 aud_att04
18:28:14   9  ,att05 aud_att05
18:28:14  10  ,att06 aud_att06
18:28:14  11  ,att07 aud_att07
18:28:14  12  ,att08 aud_att08
18:28:14  13  ,att09 aud_att09
18:28:14  14  ,att10 aud_att10
18:28:14  15  ,att11 aud_att11
18:28:14  16  ,att12 aud_att12
18:28:14  17  ,att13 aud_att13
18:28:14  18  ,att14 aud_att14
18:28:14  19  ,att15 aud_att15
18:28:14  20  ,att16 aud_att16
18:28:14  21  ,att17 aud_att17
18:28:14  22  ,att18 aud_att18
18:28:14  23  ,att19 aud_att19
18:28:14  24  ,att20 aud_att20
18:28:14  25  ,att21 aud_att21
18:28:14  26  ,att22 aud_att22
18:28:14  27  ,att23 aud_att23
18:28:14  28  ,att24 aud_att24
18:28:14  29  ,att25 aud_att25
18:28:14  30  ,att26 aud_att26
18:28:14  31  ,att27 aud_att27
18:28:14  32  ,att28 aud_att28
18:28:14  33  ,att29 aud_att29
18:28:14  34  ,att30 aud_att30
18:28:14  35  ,att31 aud_att31
18:28:14  36  ,att32 aud_att32
18:28:14  37  FROM q15
18:28:14  38  /

Table created.

Elapsed: 00:00:00.11
18:28:15 SQL> 
18:28:15 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.37
18:28:15 SQL> 
18:28:15 SQL> -- rpt
18:28:15 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     18210

Elapsed: 00:00:00.00
18:28:15 SQL> 
18:28:15 SQL> --
18:28:15 SQL> -- gbp10.sql
18:28:15 SQL> --
18:28:15 SQL> 
18:28:15 SQL> -- Creates views and tables for backtesting a forex SVM strategy
18:28:15 SQL> 
18:28:15 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.31
18:28:15 SQL> 
18:28:15 SQL> -- I created di5min here:
18:28:15 SQL> -- /pt/s/rlk/svm4hp/update_di5min.sql
18:28:15 SQL> 
18:28:15 SQL> CREATE OR REPLACE VIEW q11 AS
18:28:15   2  SELECT
18:28:15   3  pair
18:28:15   4  ,ydate
18:28:15   5  ,prdate
18:28:15   6  ,rownum rnum -- acts as t in my time-series
18:28:15   7  ,clse
18:28:15   8  ,LAG(clse,6*1,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg1
18:28:15   9  ,LAG(clse,6*2,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg2
18:28:15  10  ,LAG(clse,6*3,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg3
18:28:15  11  ,LAG(clse,6*4,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg4
18:28:15  12  ,LAG(clse,6*5,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg5
18:28:15  13  ,LAG(clse,6*6,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg6
18:28:15  14  ,LAG(clse,6*7,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg7
18:28:15  15  ,LAG(clse,6*8,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg8
18:28:15  16  ,LAG(clse,6*9,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg9
18:28:15  17  ,LAG(clse,6*12,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg12
18:28:15  18  ,LAG(clse,6*18,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg18
18:28:15  19  ,LAG(clse,6*24,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg24
18:28:15  20  ,LAG(clse,6*72,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg72
18:28:15  21  ,LEAD(clse,6*4,NULL)OVER(PARTITION BY pair ORDER BY ydate) ld4
18:28:15  22  FROM di5min WHERE pair LIKE'%gbp%'
18:28:15  23  ORDER BY ydate
18:28:15  24  /

View created.

Elapsed: 00:00:00.05
18:28:15 SQL> 
18:28:15 SQL> -- rpt
18:28:15 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
gbp_usd        18642

Elapsed: 00:00:00.32
18:28:16 SQL> 
18:28:16 SQL> -- Calc deltas and gains
18:28:16 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.23
18:28:16 SQL> 
18:28:16 SQL> CREATE TABLE q13 COMPRESS AS
18:28:16   2  SELECT
18:28:16   3  pair
18:28:16   4  ,ydate
18:28:16   5  ,prdate
18:28:16   6  ,rnum
18:28:16   7  ,lg4
18:28:16   8  ,lg8
18:28:16   9  ,lg12
18:28:16  10  ,ld4
18:28:16  11  ,CASE WHEN(clse-lg12)>0 then 1 ELSE -1 END trend
18:28:16  12  -- step by 1
18:28:16  13  ,clse-lg1 d01
18:28:16  14  ,lg1-lg2	d12
18:28:16  15  ,lg2-lg3	d23
18:28:16  16  ,lg3-lg4	d34
18:28:16  17  ,lg4-lg5	d45
18:28:16  18  ,lg5-lg6	d56
18:28:16  19  ,lg6-lg7	d67
18:28:16  20  ,lg7-lg8	d78
18:28:16  21  ,lg8-lg9	d89
18:28:16  22  -- step by 2
18:28:16  23  ,clse-lg2 d02
18:28:16  24  ,lg2-lg4 d24
18:28:16  25  ,lg4-lg6 d46
18:28:16  26  ,lg6-lg8 d68
18:28:16  27  -- step by 3
18:28:16  28  ,clse-lg3 d03
18:28:16  29  ,lg3-lg6	d36
18:28:16  30  ,lg6-lg9	d69
18:28:16  31  ,lg9-lg12 d912
18:28:16  32  -- step by 4
18:28:16  33  ,clse-lg4 d04
18:28:16  34  ,lg4-lg8	d48
18:28:16  35  ,lg8-lg12 d812
18:28:16  36  ,lg6-lg12 d612
18:28:16  37  ,lg12-lg18 d1218
18:28:16  38  --
18:28:16  39  ,ABS(clse-lg1)dc1
18:28:16  40  ,ABS(clse-lg2)dc2
18:28:16  41  ,ABS(clse-lg3)dc3
18:28:16  42  ,ABS(clse-lg4)dc4
18:28:16  43  ,ABS(clse-lg5)dc5
18:28:16  44  ,ABS(clse-lg6)dc6
18:28:16  45  ,ABS(clse-lg7)dc7
18:28:16  46  ,ABS(clse-lg8)dc8
18:28:16  47  ,ABS(clse-lg9)dc9
18:28:16  48  ,ABS(clse-lg12)dc12
18:28:16  49  ,ABS(clse-lg18)dc18
18:28:16  50  ,ABS(clse-lg24)dc24
18:28:16  51  ,ABS(clse-lg72)dc72
18:28:16  52  ,(ld4-clse) ug4
18:28:16  53  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*2  PRECEDING AND CURRENT ROW)crr2
18:28:16  54  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*3  PRECEDING AND CURRENT ROW)crr3
18:28:16  55  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*4  PRECEDING AND CURRENT ROW)crr4
18:28:16  56  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*5  PRECEDING AND CURRENT ROW)crr5
18:28:16  57  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*6  PRECEDING AND CURRENT ROW)crr6
18:28:16  58  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*7  PRECEDING AND CURRENT ROW)crr7
18:28:16  59  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*8  PRECEDING AND CURRENT ROW)crr8
18:28:16  60  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*9  PRECEDING AND CURRENT ROW)crr9
18:28:16  61  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*12 PRECEDING AND CURRENT ROW)crr12
18:28:16  62  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*24 PRECEDING AND CURRENT ROW)crr24
18:28:16  63  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*72 PRECEDING AND CURRENT ROW)crr72
18:28:16  64  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
18:28:16  65  ,0+TO_CHAR(ydate,'D')d
18:28:16  66  ,0+TO_CHAR(ydate,'W')w
18:28:16  67  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
18:28:16  68  FROM q11
18:28:16  69  -- I dont want any NULL values from the LAG() functions:
18:28:16  70  WHERE lg72 > 0
18:28:16  71  ORDER BY pair,ydate
18:28:16  72  /

Table created.

Elapsed: 00:00:01.51
18:28:17 SQL> 
18:28:17 SQL> -- rpt
18:28:17 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    9046
	-1	    9164

Elapsed: 00:00:00.03
18:28:17 SQL> 
18:28:17 SQL> -- Calc gains and ntiles
18:28:17 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.13
18:28:18 SQL> CREATE TABLE q15 COMPRESS AS
18:28:18   2  SELECT
18:28:18   3  pair
18:28:18   4  ,ydate
18:28:18   5  ,prdate -- Should be unique
18:28:18   6  ,trend -- +1 or -1
18:28:18   7  ,dc12 -- next statement needs this
18:28:18   8  -- Use NTILE() to derive some attributes
18:28:18   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d12))		 att00
18:28:18  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d23))		 att01
18:28:18  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d34))		 att02
18:28:18  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d45))		 att03
18:28:18  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d56))		 att04
18:28:18  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d67))		 att05
18:28:18  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d78))		 att06
18:28:18  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d89))		 att07
18:28:18  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d912)) 	 att08
18:28:18  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc2)		 att09
18:28:18  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc3)		 att10
18:28:18  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc4)		 att11
18:28:18  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc5)		 att12
18:28:18  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6)		 att13
18:28:18  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc7)		 att14
18:28:18  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8)		 att15
18:28:18  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc9)		 att16
18:28:18  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att17
18:28:18  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc24)		 att18
18:28:18  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc72)		 att19
18:28:18  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr2,7))) att20
18:28:18  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr3,7))) att21
18:28:18  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr4,7))) att22
18:28:18  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr5,7))) att23
18:28:18  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6,7))) att24
18:28:18  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att25
18:28:18  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att26
18:28:18  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr72,7)))att27
18:28:18  37  -- date related integers: hour of day, day of week, week of month:
18:28:18  38  ,hh    att28
18:28:18  39  ,d     att29
18:28:18  40  ,w     att30
18:28:18  41  ,mpm   att31
18:28:18  42  ,trend att32
18:28:18  43  ,ug4 g4
18:28:18  44  ,CASE WHEN ug4 IS NULL THEN NULL WHEN ug4 > 0.0006 THEN 'up' ELSE 'nup' END gatt
18:28:18  45  ,CASE WHEN ug4 IS NULL THEN NULL WHEN ug4< -0.0006 THEN 'up' ELSE 'nup' END gattn
18:28:18  46  FROM q13
18:28:18  47  ORDER BY pair,ydate
18:28:18  48  /

Table created.

Elapsed: 00:00:03.58
18:28:21 SQL> 
18:28:21 SQL> -- rpt
18:28:21 SQL> SELECT pair,trend,gatt,gattn,AVG(g4),COUNT(g4),CORR(dc12,g4)FROM q15
18:28:21   2  GROUP BY pair,trend,gatt,gattn
18:28:21   3  ORDER BY pair,trend,gatt,gattn
18:28:21   4  /

PAIR	     TREND GAT GAT    AVG(G4)  COUNT(G4) CORR(DC12,G4)
------- ---------- --- --- ---------- ---------- -------------
gbp_usd 	-1 nup nup -.00001075	    1665    .029283562
gbp_usd 	-1 nup up  -.00321482	    3766    .010462998
gbp_usd 	-1 up  nup  .00341474	    3733    -.07848333
gbp_usd 	 1 nup nup -2.937E-06	    1575    .022288832
gbp_usd 	 1 nup up  -.00315052	    3755    .058811194
gbp_usd 	 1 up  nup .003458397	    3692    -.12069507
gbp_usd 	 1			       0

7 rows selected.

Elapsed: 00:00:00.04
18:28:21 SQL> 
18:28:21 SQL> -- rpt
18:28:21 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
gbp_usd 2010-12-16 18:20:00

Elapsed: 00:00:00.01
18:28:21 SQL> 
18:28:21 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
18:28:21 SQL> CREATE TABLE modsrc COMPRESS AS
18:28:21   2  SELECT
18:28:21   3  pair
18:28:21   4  ,ydate
18:28:21   5  ,prdate
18:28:21   6  ,trend
18:28:21   7  ,g4
18:28:21   8  ,gatt
18:28:21   9  ,gattn
18:28:21  10  ,dc12
18:28:21  11  FROM q15
18:28:21  12  /

Table created.

Elapsed: 00:00:00.08
18:28:21 SQL> 
18:28:21 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
18:28:22 SQL> 
18:28:22 SQL> -- rpt
18:28:22 SQL> 
18:28:22 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      18642

Elapsed: 00:00:00.32
18:28:22 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      18210

Elapsed: 00:00:00.00
18:28:22 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      18210

Elapsed: 00:00:00.01
18:28:22 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      18210

Elapsed: 00:00:00.00
18:28:22 SQL> 
18:28:22 SQL> SELECT pair,trend,gatt,gattn,AVG(g4),COUNT(g4),CORR(dc12,g4)FROM modsrc
18:28:22   2  GROUP BY pair,trend,gatt,gattn
18:28:22   3  ORDER BY pair,trend,gatt,gattn
18:28:22   4  /

PAIR	     TREND GAT GAT    AVG(G4)  COUNT(G4) CORR(DC12,G4)
------- ---------- --- --- ---------- ---------- -------------
gbp_usd 	-1 nup nup -.00001075	    1665    .029283562
gbp_usd 	-1 nup up  -.00321482	    3766    .010462998
gbp_usd 	-1 up  nup  .00341474	    3733    -.07848333
gbp_usd 	 1 nup nup -2.937E-06	    1575    .022288832
gbp_usd 	 1 nup up  -.00315052	    3755    .058811194
gbp_usd 	 1 up  nup .003458397	    3692    -.12069507
gbp_usd 	 1			       0

7 rows selected.

Elapsed: 00:00:00.02
18:28:22 SQL> 
18:28:22 SQL> DROP   TABLE gbp_ms10 ;

Table dropped.

Elapsed: 00:00:00.15
18:28:22 SQL> CREATE TABLE gbp_ms10 COMPRESS AS
18:28:22   2  SELECT
18:28:22   3  ydate
18:28:22   4  ,trend gbp_trend
18:28:22   5  ,g4    gbp_g4
18:28:22   6  ,gatt  gbp_gatt
18:28:22   7  ,gattn	gbp_gattn
18:28:22   8  FROM modsrc
18:28:22   9  /

Table created.

Elapsed: 00:00:00.05
18:28:22 SQL> 
18:28:22 SQL> ANALYZE TABLE gbp_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
18:28:22 SQL> 
18:28:22 SQL> -- rpt
18:28:22 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g4),MIN(g4),MAX(g4)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G4)	 MIN(G4)    MAX(G4)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-06-23 17:00:01 2010-12-16 18:20:00	 9022	  -.0194      .0192
	-1 2010-06-24 16:00:01 2010-12-16 07:30:00	 9164	  -.0153      .0189

Elapsed: 00:00:00.02
18:28:22 SQL> SELECT gbp_trend,MIN(ydate),MAX(ydate),COUNT(gbp_trend),MIN(gbp_g4),MAX(gbp_g4)FROM gbp_ms10 GROUP BY gbp_trend;

 GBP_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(GBP_TREND) MIN(GBP_G4) MAX(GBP_G4)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-06-23 17:00:01 2010-12-16 18:20:00	       9046	 -.0194       .0192
	-1 2010-06-24 16:00:01 2010-12-16 07:30:00	       9164	 -.0153       .0189

Elapsed: 00:00:00.01
18:28:22 SQL> 
18:28:22 SQL> -- I need a copy of q15 attributes
18:28:22 SQL> 
18:28:22 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.15
18:28:22 SQL> CREATE TABLE gbp_att COMPRESS AS
18:28:22   2  SELECT
18:28:22   3  ydate
18:28:22   4  ,att00 gbp_att00
18:28:22   5  ,att01 gbp_att01
18:28:22   6  ,att02 gbp_att02
18:28:22   7  ,att03 gbp_att03
18:28:22   8  ,att04 gbp_att04
18:28:22   9  ,att05 gbp_att05
18:28:22  10  ,att06 gbp_att06
18:28:22  11  ,att07 gbp_att07
18:28:22  12  ,att08 gbp_att08
18:28:22  13  ,att09 gbp_att09
18:28:22  14  ,att10 gbp_att10
18:28:22  15  ,att11 gbp_att11
18:28:22  16  ,att12 gbp_att12
18:28:22  17  ,att13 gbp_att13
18:28:22  18  ,att14 gbp_att14
18:28:22  19  ,att15 gbp_att15
18:28:22  20  ,att16 gbp_att16
18:28:22  21  ,att17 gbp_att17
18:28:22  22  ,att18 gbp_att18
18:28:22  23  ,att19 gbp_att19
18:28:22  24  ,att20 gbp_att20
18:28:22  25  ,att21 gbp_att21
18:28:22  26  ,att22 gbp_att22
18:28:22  27  ,att23 gbp_att23
18:28:22  28  ,att24 gbp_att24
18:28:22  29  ,att25 gbp_att25
18:28:22  30  ,att26 gbp_att26
18:28:22  31  ,att27 gbp_att27
18:28:22  32  ,att28 gbp_att28
18:28:22  33  ,att29 gbp_att29
18:28:22  34  ,att30 gbp_att30
18:28:22  35  ,att31 gbp_att31
18:28:22  36  ,att32 gbp_att32
18:28:22  37  FROM q15
18:28:22  38  /

Table created.

Elapsed: 00:00:00.12
18:28:23 SQL> 
18:28:23 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.36
18:28:23 SQL> 
18:28:23 SQL> -- rpt
18:28:23 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     18210

Elapsed: 00:00:00.00
18:28:23 SQL> 
18:28:23 SQL> --
18:28:23 SQL> -- jpy10.sql
18:28:23 SQL> --
18:28:23 SQL> 
18:28:23 SQL> -- Creates views and tables for backtesting a forex SVM strategy
18:28:23 SQL> 
18:28:23 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.34
18:28:23 SQL> 
18:28:23 SQL> -- I created di5min here:
18:28:23 SQL> -- /pt/s/rlk/svm4hp/update_di5min.sql
18:28:23 SQL> 
18:28:23 SQL> CREATE OR REPLACE VIEW q11 AS
18:28:23   2  SELECT
18:28:23   3  pair
18:28:23   4  ,ydate
18:28:23   5  ,prdate
18:28:23   6  ,rownum rnum -- acts as t in my time-series
18:28:23   7  ,clse
18:28:23   8  ,LAG(clse,6*1,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg1
18:28:23   9  ,LAG(clse,6*2,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg2
18:28:23  10  ,LAG(clse,6*3,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg3
18:28:23  11  ,LAG(clse,6*4,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg4
18:28:23  12  ,LAG(clse,6*5,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg5
18:28:23  13  ,LAG(clse,6*6,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg6
18:28:23  14  ,LAG(clse,6*7,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg7
18:28:23  15  ,LAG(clse,6*8,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg8
18:28:23  16  ,LAG(clse,6*9,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg9
18:28:23  17  ,LAG(clse,6*12,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg12
18:28:23  18  ,LAG(clse,6*18,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg18
18:28:23  19  ,LAG(clse,6*24,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg24
18:28:23  20  ,LAG(clse,6*72,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg72
18:28:23  21  ,LEAD(clse,6*4,NULL)OVER(PARTITION BY pair ORDER BY ydate) ld4
18:28:23  22  FROM di5min WHERE pair LIKE'%jpy%'
18:28:23  23  ORDER BY ydate
18:28:23  24  /

View created.

Elapsed: 00:00:00.04
18:28:23 SQL> 
18:28:23 SQL> -- rpt
18:28:23 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
usd_jpy        18643

Elapsed: 00:00:00.31
18:28:24 SQL> 
18:28:24 SQL> -- Calc deltas and gains
18:28:24 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.81
18:28:24 SQL> 
18:28:24 SQL> CREATE TABLE q13 COMPRESS AS
18:28:24   2  SELECT
18:28:24   3  pair
18:28:24   4  ,ydate
18:28:24   5  ,prdate
18:28:24   6  ,rnum
18:28:24   7  ,lg4
18:28:24   8  ,lg8
18:28:24   9  ,lg12
18:28:24  10  ,ld4
18:28:24  11  ,CASE WHEN(clse-lg12)>0 then 1 ELSE -1 END trend
18:28:24  12  -- step by 1
18:28:24  13  ,clse-lg1 d01
18:28:24  14  ,lg1-lg2	d12
18:28:24  15  ,lg2-lg3	d23
18:28:24  16  ,lg3-lg4	d34
18:28:24  17  ,lg4-lg5	d45
18:28:24  18  ,lg5-lg6	d56
18:28:24  19  ,lg6-lg7	d67
18:28:24  20  ,lg7-lg8	d78
18:28:24  21  ,lg8-lg9	d89
18:28:24  22  -- step by 2
18:28:24  23  ,clse-lg2 d02
18:28:24  24  ,lg2-lg4 d24
18:28:24  25  ,lg4-lg6 d46
18:28:24  26  ,lg6-lg8 d68
18:28:24  27  -- step by 3
18:28:24  28  ,clse-lg3 d03
18:28:24  29  ,lg3-lg6	d36
18:28:24  30  ,lg6-lg9	d69
18:28:24  31  ,lg9-lg12 d912
18:28:24  32  -- step by 4
18:28:24  33  ,clse-lg4 d04
18:28:24  34  ,lg4-lg8	d48
18:28:24  35  ,lg8-lg12 d812
18:28:24  36  ,lg6-lg12 d612
18:28:24  37  ,lg12-lg18 d1218
18:28:24  38  --
18:28:24  39  ,ABS(clse-lg1)dc1
18:28:24  40  ,ABS(clse-lg2)dc2
18:28:24  41  ,ABS(clse-lg3)dc3
18:28:24  42  ,ABS(clse-lg4)dc4
18:28:24  43  ,ABS(clse-lg5)dc5
18:28:24  44  ,ABS(clse-lg6)dc6
18:28:24  45  ,ABS(clse-lg7)dc7
18:28:24  46  ,ABS(clse-lg8)dc8
18:28:24  47  ,ABS(clse-lg9)dc9
18:28:24  48  ,ABS(clse-lg12)dc12
18:28:24  49  ,ABS(clse-lg18)dc18
18:28:24  50  ,ABS(clse-lg24)dc24
18:28:24  51  ,ABS(clse-lg72)dc72
18:28:24  52  ,(ld4-clse) ug4
18:28:24  53  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*2  PRECEDING AND CURRENT ROW)crr2
18:28:24  54  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*3  PRECEDING AND CURRENT ROW)crr3
18:28:24  55  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*4  PRECEDING AND CURRENT ROW)crr4
18:28:24  56  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*5  PRECEDING AND CURRENT ROW)crr5
18:28:24  57  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*6  PRECEDING AND CURRENT ROW)crr6
18:28:24  58  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*7  PRECEDING AND CURRENT ROW)crr7
18:28:24  59  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*8  PRECEDING AND CURRENT ROW)crr8
18:28:24  60  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*9  PRECEDING AND CURRENT ROW)crr9
18:28:24  61  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*12 PRECEDING AND CURRENT ROW)crr12
18:28:24  62  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*24 PRECEDING AND CURRENT ROW)crr24
18:28:24  63  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*72 PRECEDING AND CURRENT ROW)crr72
18:28:24  64  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
18:28:24  65  ,0+TO_CHAR(ydate,'D')d
18:28:24  66  ,0+TO_CHAR(ydate,'W')w
18:28:24  67  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
18:28:24  68  FROM q11
18:28:24  69  -- I dont want any NULL values from the LAG() functions:
18:28:24  70  WHERE lg72 > 0
18:28:24  71  ORDER BY pair,ydate
18:28:24  72  /

Table created.

Elapsed: 00:00:01.49
18:28:26 SQL> 
18:28:26 SQL> -- rpt
18:28:26 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    8169
	-1	   10042

Elapsed: 00:00:00.02
18:28:26 SQL> 
18:28:26 SQL> -- Calc gains and ntiles
18:28:26 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.15
18:28:26 SQL> CREATE TABLE q15 COMPRESS AS
18:28:26   2  SELECT
18:28:26   3  pair
18:28:26   4  ,ydate
18:28:26   5  ,prdate -- Should be unique
18:28:26   6  ,trend -- +1 or -1
18:28:26   7  ,dc12 -- next statement needs this
18:28:26   8  -- Use NTILE() to derive some attributes
18:28:26   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d12))		 att00
18:28:26  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d23))		 att01
18:28:26  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d34))		 att02
18:28:26  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d45))		 att03
18:28:26  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d56))		 att04
18:28:26  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d67))		 att05
18:28:26  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d78))		 att06
18:28:26  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d89))		 att07
18:28:26  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d912)) 	 att08
18:28:26  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc2)		 att09
18:28:26  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc3)		 att10
18:28:26  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc4)		 att11
18:28:26  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc5)		 att12
18:28:26  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6)		 att13
18:28:26  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc7)		 att14
18:28:26  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8)		 att15
18:28:26  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc9)		 att16
18:28:26  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att17
18:28:26  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc24)		 att18
18:28:26  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc72)		 att19
18:28:26  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr2,7))) att20
18:28:26  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr3,7))) att21
18:28:26  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr4,7))) att22
18:28:26  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr5,7))) att23
18:28:26  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6,7))) att24
18:28:26  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att25
18:28:26  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att26
18:28:26  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr72,7)))att27
18:28:26  37  -- date related integers: hour of day, day of week, week of month:
18:28:26  38  ,hh    att28
18:28:26  39  ,d     att29
18:28:26  40  ,w     att30
18:28:26  41  ,mpm   att31
18:28:26  42  ,trend att32
18:28:26  43  ,ug4 g4
18:28:26  44  ,CASE WHEN ug4 IS NULL THEN NULL WHEN ug4 > 0.0006 THEN 'up' ELSE 'nup' END gatt
18:28:26  45  ,CASE WHEN ug4 IS NULL THEN NULL WHEN ug4< -0.0006 THEN 'up' ELSE 'nup' END gattn
18:28:26  46  FROM q13
18:28:26  47  ORDER BY pair,ydate
18:28:26  48  /

Table created.

Elapsed: 00:00:03.65
18:28:30 SQL> 
18:28:30 SQL> -- rpt
18:28:30 SQL> SELECT pair,trend,gatt,gattn,AVG(g4),COUNT(g4),CORR(dc12,g4)FROM q15
18:28:30   2  GROUP BY pair,trend,gatt,gattn
18:28:30   3  ORDER BY pair,trend,gatt,gattn
18:28:30   4  /

PAIR	     TREND GAT GAT    AVG(G4)  COUNT(G4) CORR(DC12,G4)
------- ---------- --- --- ---------- ---------- -------------
usd_jpy 	-1 nup nup	    0	     245
usd_jpy 	-1 nup up  -.15316902	    4884     .02799037
usd_jpy 	-1 up  nup .147564677	    4909    .047200742
usd_jpy 	-1			       0
usd_jpy 	 1 nup nup	    0	     177
usd_jpy 	 1 nup up  -.15578498	    4360    -.04788732
usd_jpy 	 1 up  nup .157261213	    3612    .140265852
usd_jpy 	 1			       0

8 rows selected.

Elapsed: 00:00:00.04
18:28:30 SQL> 
18:28:30 SQL> -- rpt
18:28:30 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
usd_jpy 2010-12-16 18:20:00

Elapsed: 00:00:00.01
18:28:30 SQL> 
18:28:30 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.19
18:28:30 SQL> CREATE TABLE modsrc COMPRESS AS
18:28:30   2  SELECT
18:28:30   3  pair
18:28:30   4  ,ydate
18:28:30   5  ,prdate
18:28:30   6  ,trend
18:28:30   7  ,g4
18:28:30   8  ,gatt
18:28:30   9  ,gattn
18:28:30  10  ,dc12
18:28:30  11  FROM q15
18:28:30  12  /

Table created.

Elapsed: 00:00:00.13
18:28:30 SQL> 
18:28:30 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.24
18:28:30 SQL> 
18:28:30 SQL> -- rpt
18:28:30 SQL> 
18:28:30 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      18643

Elapsed: 00:00:00.31
18:28:31 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      18211

Elapsed: 00:00:00.00
18:28:31 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      18211

Elapsed: 00:00:00.00
18:28:31 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      18211

Elapsed: 00:00:00.00
18:28:31 SQL> 
18:28:31 SQL> SELECT pair,trend,gatt,gattn,AVG(g4),COUNT(g4),CORR(dc12,g4)FROM modsrc
18:28:31   2  GROUP BY pair,trend,gatt,gattn
18:28:31   3  ORDER BY pair,trend,gatt,gattn
18:28:31   4  /

PAIR	     TREND GAT GAT    AVG(G4)  COUNT(G4) CORR(DC12,G4)
------- ---------- --- --- ---------- ---------- -------------
usd_jpy 	-1 nup nup	    0	     245
usd_jpy 	-1 nup up  -.15316902	    4884     .02799037
usd_jpy 	-1 up  nup .147564677	    4909    .047200742
usd_jpy 	-1			       0
usd_jpy 	 1 nup nup	    0	     177
usd_jpy 	 1 nup up  -.15578498	    4360    -.04788732
usd_jpy 	 1 up  nup .157261213	    3612    .140265852
usd_jpy 	 1			       0

8 rows selected.

Elapsed: 00:00:00.03
18:28:31 SQL> 
18:28:31 SQL> DROP   TABLE jpy_ms10 ;

Table dropped.

Elapsed: 00:00:00.09
18:28:31 SQL> CREATE TABLE jpy_ms10 COMPRESS AS
18:28:31   2  SELECT
18:28:31   3  ydate
18:28:31   4  ,trend jpy_trend
18:28:31   5  ,g4    jpy_g4
18:28:31   6  ,gatt  jpy_gatt
18:28:31   7  ,gattn	jpy_gattn
18:28:31   8  FROM modsrc
18:28:31   9  /

Table created.

Elapsed: 00:00:00.07
18:28:31 SQL> 
18:28:31 SQL> ANALYZE TABLE jpy_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
18:28:31 SQL> 
18:28:31 SQL> -- rpt
18:28:31 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g4),MIN(g4),MAX(g4)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G4)	 MIN(G4)    MAX(G4)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-06-24 20:40:01 2010-12-16 17:40:00	 8149	   -1.07       1.04
	-1 2010-06-23 17:00:01 2010-12-16 18:20:00	10038	   -1.18       1.99

Elapsed: 00:00:00.02
18:28:31 SQL> SELECT jpy_trend,MIN(ydate),MAX(ydate),COUNT(jpy_trend),MIN(jpy_g4),MAX(jpy_g4)FROM jpy_ms10 GROUP BY jpy_trend;

 JPY_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(JPY_TREND) MIN(JPY_G4) MAX(JPY_G4)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-06-24 20:40:01 2010-12-16 17:40:00	       8169	  -1.07        1.04
	-1 2010-06-23 17:00:01 2010-12-16 18:20:00	      10042	  -1.18        1.99

Elapsed: 00:00:00.02
18:28:31 SQL> 
18:28:31 SQL> -- I need a copy of q15 attributes
18:28:31 SQL> 
18:28:31 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.15
18:28:31 SQL> CREATE TABLE jpy_att COMPRESS AS
18:28:31   2  SELECT
18:28:31   3  ydate
18:28:31   4  ,att00 jpy_att00
18:28:31   5  ,att01 jpy_att01
18:28:31   6  ,att02 jpy_att02
18:28:31   7  ,att03 jpy_att03
18:28:31   8  ,att04 jpy_att04
18:28:31   9  ,att05 jpy_att05
18:28:31  10  ,att06 jpy_att06
18:28:31  11  ,att07 jpy_att07
18:28:31  12  ,att08 jpy_att08
18:28:31  13  ,att09 jpy_att09
18:28:31  14  ,att10 jpy_att10
18:28:31  15  ,att11 jpy_att11
18:28:31  16  ,att12 jpy_att12
18:28:31  17  ,att13 jpy_att13
18:28:31  18  ,att14 jpy_att14
18:28:31  19  ,att15 jpy_att15
18:28:31  20  ,att16 jpy_att16
18:28:31  21  ,att17 jpy_att17
18:28:31  22  ,att18 jpy_att18
18:28:31  23  ,att19 jpy_att19
18:28:31  24  ,att20 jpy_att20
18:28:31  25  ,att21 jpy_att21
18:28:31  26  ,att22 jpy_att22
18:28:31  27  ,att23 jpy_att23
18:28:31  28  ,att24 jpy_att24
18:28:31  29  ,att25 jpy_att25
18:28:31  30  ,att26 jpy_att26
18:28:31  31  ,att27 jpy_att27
18:28:31  32  ,att28 jpy_att28
18:28:31  33  ,att29 jpy_att29
18:28:31  34  ,att30 jpy_att30
18:28:31  35  ,att31 jpy_att31
18:28:31  36  ,att32 jpy_att32
18:28:31  37  FROM q15
18:28:31  38  /

Table created.

Elapsed: 00:00:00.13
18:28:31 SQL> 
18:28:31 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.38
18:28:32 SQL> 
18:28:32 SQL> -- rpt
18:28:32 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     18211

Elapsed: 00:00:00.01
18:28:32 SQL> 
18:28:32 SQL> --
18:28:32 SQL> -- cad10.sql
18:28:32 SQL> --
18:28:32 SQL> 
18:28:32 SQL> -- Creates views and tables for backtesting a forex SVM strategy
18:28:32 SQL> 
18:28:32 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.39
18:28:32 SQL> 
18:28:32 SQL> -- I created di5min here:
18:28:32 SQL> -- /pt/s/rlk/svm4hp/update_di5min.sql
18:28:32 SQL> 
18:28:32 SQL> CREATE OR REPLACE VIEW q11 AS
18:28:32   2  SELECT
18:28:32   3  pair
18:28:32   4  ,ydate
18:28:32   5  ,prdate
18:28:32   6  ,rownum rnum -- acts as t in my time-series
18:28:32   7  ,clse
18:28:32   8  ,LAG(clse,6*1,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg1
18:28:32   9  ,LAG(clse,6*2,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg2
18:28:32  10  ,LAG(clse,6*3,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg3
18:28:32  11  ,LAG(clse,6*4,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg4
18:28:32  12  ,LAG(clse,6*5,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg5
18:28:32  13  ,LAG(clse,6*6,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg6
18:28:32  14  ,LAG(clse,6*7,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg7
18:28:32  15  ,LAG(clse,6*8,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg8
18:28:32  16  ,LAG(clse,6*9,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg9
18:28:32  17  ,LAG(clse,6*12,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg12
18:28:32  18  ,LAG(clse,6*18,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg18
18:28:32  19  ,LAG(clse,6*24,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg24
18:28:32  20  ,LAG(clse,6*72,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg72
18:28:32  21  ,LEAD(clse,6*4,NULL)OVER(PARTITION BY pair ORDER BY ydate) ld4
18:28:32  22  FROM di5min WHERE pair LIKE'%cad%'
18:28:32  23  ORDER BY ydate
18:28:32  24  /

View created.

Elapsed: 00:00:00.04
18:28:32 SQL> 
18:28:32 SQL> -- rpt
18:28:32 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
usd_cad        18641

Elapsed: 00:00:00.31
18:28:33 SQL> 
18:28:33 SQL> -- Calc deltas and gains
18:28:33 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.21
18:28:33 SQL> 
18:28:33 SQL> CREATE TABLE q13 COMPRESS AS
18:28:33   2  SELECT
18:28:33   3  pair
18:28:33   4  ,ydate
18:28:33   5  ,prdate
18:28:33   6  ,rnum
18:28:33   7  ,lg4
18:28:33   8  ,lg8
18:28:33   9  ,lg12
18:28:33  10  ,ld4
18:28:33  11  ,CASE WHEN(clse-lg12)>0 then 1 ELSE -1 END trend
18:28:33  12  -- step by 1
18:28:33  13  ,clse-lg1 d01
18:28:33  14  ,lg1-lg2	d12
18:28:33  15  ,lg2-lg3	d23
18:28:33  16  ,lg3-lg4	d34
18:28:33  17  ,lg4-lg5	d45
18:28:33  18  ,lg5-lg6	d56
18:28:33  19  ,lg6-lg7	d67
18:28:33  20  ,lg7-lg8	d78
18:28:33  21  ,lg8-lg9	d89
18:28:33  22  -- step by 2
18:28:33  23  ,clse-lg2 d02
18:28:33  24  ,lg2-lg4 d24
18:28:33  25  ,lg4-lg6 d46
18:28:33  26  ,lg6-lg8 d68
18:28:33  27  -- step by 3
18:28:33  28  ,clse-lg3 d03
18:28:33  29  ,lg3-lg6	d36
18:28:33  30  ,lg6-lg9	d69
18:28:33  31  ,lg9-lg12 d912
18:28:33  32  -- step by 4
18:28:33  33  ,clse-lg4 d04
18:28:33  34  ,lg4-lg8	d48
18:28:33  35  ,lg8-lg12 d812
18:28:33  36  ,lg6-lg12 d612
18:28:33  37  ,lg12-lg18 d1218
18:28:33  38  --
18:28:33  39  ,ABS(clse-lg1)dc1
18:28:33  40  ,ABS(clse-lg2)dc2
18:28:33  41  ,ABS(clse-lg3)dc3
18:28:33  42  ,ABS(clse-lg4)dc4
18:28:33  43  ,ABS(clse-lg5)dc5
18:28:33  44  ,ABS(clse-lg6)dc6
18:28:33  45  ,ABS(clse-lg7)dc7
18:28:33  46  ,ABS(clse-lg8)dc8
18:28:33  47  ,ABS(clse-lg9)dc9
18:28:33  48  ,ABS(clse-lg12)dc12
18:28:33  49  ,ABS(clse-lg18)dc18
18:28:33  50  ,ABS(clse-lg24)dc24
18:28:33  51  ,ABS(clse-lg72)dc72
18:28:33  52  ,(ld4-clse) ug4
18:28:33  53  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*2  PRECEDING AND CURRENT ROW)crr2
18:28:33  54  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*3  PRECEDING AND CURRENT ROW)crr3
18:28:33  55  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*4  PRECEDING AND CURRENT ROW)crr4
18:28:33  56  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*5  PRECEDING AND CURRENT ROW)crr5
18:28:33  57  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*6  PRECEDING AND CURRENT ROW)crr6
18:28:33  58  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*7  PRECEDING AND CURRENT ROW)crr7
18:28:33  59  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*8  PRECEDING AND CURRENT ROW)crr8
18:28:33  60  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*9  PRECEDING AND CURRENT ROW)crr9
18:28:33  61  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*12 PRECEDING AND CURRENT ROW)crr12
18:28:33  62  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*24 PRECEDING AND CURRENT ROW)crr24
18:28:33  63  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*72 PRECEDING AND CURRENT ROW)crr72
18:28:33  64  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
18:28:33  65  ,0+TO_CHAR(ydate,'D')d
18:28:33  66  ,0+TO_CHAR(ydate,'W')w
18:28:33  67  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
18:28:33  68  FROM q11
18:28:33  69  -- I dont want any NULL values from the LAG() functions:
18:28:33  70  WHERE lg72 > 0
18:28:33  71  ORDER BY pair,ydate
18:28:33  72  /

Table created.

Elapsed: 00:00:01.57
18:28:34 SQL> 
18:28:34 SQL> -- rpt
18:28:34 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    8424
	-1	    9785

Elapsed: 00:00:00.03
18:28:34 SQL> 
18:28:34 SQL> -- Calc gains and ntiles
18:28:34 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.15
18:28:34 SQL> CREATE TABLE q15 COMPRESS AS
18:28:34   2  SELECT
18:28:34   3  pair
18:28:34   4  ,ydate
18:28:34   5  ,prdate -- Should be unique
18:28:34   6  ,trend -- +1 or -1
18:28:34   7  ,dc12 -- next statement needs this
18:28:34   8  -- Use NTILE() to derive some attributes
18:28:34   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d12))		 att00
18:28:34  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d23))		 att01
18:28:34  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d34))		 att02
18:28:34  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d45))		 att03
18:28:34  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d56))		 att04
18:28:34  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d67))		 att05
18:28:34  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d78))		 att06
18:28:34  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d89))		 att07
18:28:34  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d912)) 	 att08
18:28:34  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc2)		 att09
18:28:34  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc3)		 att10
18:28:34  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc4)		 att11
18:28:34  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc5)		 att12
18:28:34  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6)		 att13
18:28:34  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc7)		 att14
18:28:34  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8)		 att15
18:28:34  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc9)		 att16
18:28:34  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att17
18:28:34  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc24)		 att18
18:28:34  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc72)		 att19
18:28:34  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr2,7))) att20
18:28:34  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr3,7))) att21
18:28:34  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr4,7))) att22
18:28:34  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr5,7))) att23
18:28:34  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6,7))) att24
18:28:34  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att25
18:28:34  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att26
18:28:34  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr72,7)))att27
18:28:34  37  -- date related integers: hour of day, day of week, week of month:
18:28:34  38  ,hh    att28
18:28:34  39  ,d     att29
18:28:34  40  ,w     att30
18:28:34  41  ,mpm   att31
18:28:34  42  ,trend att32
18:28:34  43  ,ug4 g4
18:28:34  44  ,CASE WHEN ug4 IS NULL THEN NULL WHEN ug4 > 0.0006 THEN 'up' ELSE 'nup' END gatt
18:28:34  45  ,CASE WHEN ug4 IS NULL THEN NULL WHEN ug4< -0.0006 THEN 'up' ELSE 'nup' END gattn
18:28:34  46  FROM q13
18:28:34  47  ORDER BY pair,ydate
18:28:34  48  /
