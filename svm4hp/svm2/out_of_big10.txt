
SQL*Plus: Release 11.2.0.1.0 Production on Thu Dec 16 06:17:51 2010

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

06:17:51 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
06:17:51 SQL> 06:17:51 SQL> --
06:17:51 SQL> -- eur10.sql
06:17:51 SQL> --
06:17:51 SQL> 
06:17:51 SQL> -- Creates views and tables for backtesting a forex SVM strategy
06:17:51 SQL> 
06:17:51 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.01
06:17:51 SQL> 
06:17:51 SQL> -- I created di5min here:
06:17:51 SQL> -- /pt/s/rlk/svm4hp/update_di5min.sql
06:17:51 SQL> 
06:17:51 SQL> CREATE OR REPLACE VIEW q11 AS
06:17:51   2  SELECT
06:17:51   3  pair
06:17:51   4  ,ydate
06:17:51   5  ,prdate
06:17:51   6  ,rownum rnum -- acts as t in my time-series
06:17:51   7  ,clse
06:17:51   8  ,LAG(clse,6*1,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg1
06:17:51   9  ,LAG(clse,6*2,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg2
06:17:51  10  ,LAG(clse,6*3,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg3
06:17:51  11  ,LAG(clse,6*4,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg4
06:17:51  12  ,LAG(clse,6*5,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg5
06:17:51  13  ,LAG(clse,6*6,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg6
06:17:51  14  ,LAG(clse,6*7,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg7
06:17:51  15  ,LAG(clse,6*8,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg8
06:17:51  16  ,LAG(clse,6*9,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg9
06:17:51  17  ,LAG(clse,6*12,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg12
06:17:51  18  ,LAG(clse,6*18,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg18
06:17:51  19  ,LAG(clse,6*24,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg24
06:17:51  20  ,LAG(clse,6*72,NULL)OVER(PARTITION BY pair ORDER BY ydate) lg72
06:17:51  21  ,LEAD(clse,6*4,NULL)OVER(PARTITION BY pair ORDER BY ydate) ld4
06:17:51  22  FROM di5min WHERE pair LIKE'%eur%'
06:17:51  23  ORDER BY ydate
06:17:51  24  /

View created.

Elapsed: 00:00:00.05
06:17:51 SQL> 
06:17:51 SQL> -- rpt
06:17:51 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
eur_usd        18643

Elapsed: 00:00:00.34
06:17:51 SQL> 
06:17:51 SQL> -- Calc deltas and gains
06:17:51 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.17
06:17:51 SQL> 
06:17:51 SQL> CREATE TABLE q13 COMPRESS AS
06:17:51   2  SELECT
06:17:51   3  pair
06:17:51   4  ,ydate
06:17:51   5  ,prdate
06:17:51   6  ,rnum
06:17:51   7  ,lg4
06:17:51   8  ,lg8
06:17:51   9  ,lg12
06:17:51  10  ,ld4
06:17:51  11  ,CASE WHEN(clse-lg12)>0 then 1 ELSE -1 END trend
06:17:51  12  -- step by 1
06:17:51  13  ,clse-lg1 d01
06:17:51  14  ,lg1-lg2	d12
06:17:51  15  ,lg2-lg3	d23
06:17:51  16  ,lg3-lg4	d34
06:17:51  17  ,lg4-lg5	d45
06:17:51  18  ,lg5-lg6	d56
06:17:51  19  ,lg6-lg7	d67
06:17:51  20  ,lg7-lg8	d78
06:17:51  21  ,lg8-lg9	d89
06:17:51  22  -- step by 2
06:17:51  23  ,clse-lg2 d02
06:17:51  24  ,lg2-lg4 d24
06:17:51  25  ,lg4-lg6 d46
06:17:51  26  ,lg6-lg8 d68
06:17:51  27  -- step by 3
06:17:51  28  ,clse-lg3 d03
06:17:51  29  ,lg3-lg6	d36
06:17:51  30  ,lg6-lg9	d69
06:17:51  31  ,lg9-lg12 d912
06:17:51  32  -- step by 4
06:17:51  33  ,clse-lg4 d04
06:17:51  34  ,lg4-lg8	d48
06:17:51  35  ,lg8-lg12 d812
06:17:51  36  ,lg6-lg12 d612
06:17:51  37  ,lg12-lg18 d1218
06:17:51  38  --
06:17:51  39  ,ABS(clse-lg1)dc1
06:17:51  40  ,ABS(clse-lg2)dc2
06:17:51  41  ,ABS(clse-lg3)dc3
06:17:51  42  ,ABS(clse-lg4)dc4
06:17:51  43  ,ABS(clse-lg5)dc5
06:17:51  44  ,ABS(clse-lg6)dc6
06:17:51  45  ,ABS(clse-lg7)dc7
06:17:51  46  ,ABS(clse-lg8)dc8
06:17:51  47  ,ABS(clse-lg9)dc9
06:17:51  48  ,ABS(clse-lg12)dc12
06:17:51  49  ,ABS(clse-lg18)dc18
06:17:51  50  ,ABS(clse-lg24)dc24
06:17:51  51  ,ABS(clse-lg72)dc72
06:17:51  52  ,(ld4-clse) ug4
06:17:51  53  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*2  PRECEDING AND CURRENT ROW)crr2
06:17:51  54  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*3  PRECEDING AND CURRENT ROW)crr3
06:17:51  55  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*4  PRECEDING AND CURRENT ROW)crr4
06:17:51  56  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*5  PRECEDING AND CURRENT ROW)crr5
06:17:51  57  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*6  PRECEDING AND CURRENT ROW)crr6
06:17:51  58  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*7  PRECEDING AND CURRENT ROW)crr7
06:17:51  59  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*8  PRECEDING AND CURRENT ROW)crr8
06:17:51  60  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*9  PRECEDING AND CURRENT ROW)crr9
06:17:51  61  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*12 PRECEDING AND CURRENT ROW)crr12
06:17:51  62  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*24 PRECEDING AND CURRENT ROW)crr24
06:17:51  63  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6*72 PRECEDING AND CURRENT ROW)crr72
06:17:51  64  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
06:17:51  65  ,0+TO_CHAR(ydate,'D')d
06:17:51  66  ,0+TO_CHAR(ydate,'W')w
06:17:51  67  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
06:17:51  68  FROM q11
06:17:51  69  -- I dont want any NULL values from the LAG() functions:
06:17:51  70  WHERE lg72 > 0
06:17:51  71  ORDER BY pair,ydate
06:17:51  72  /

Table created.

Elapsed: 00:00:01.76
06:17:53 SQL> 
06:17:53 SQL> -- rpt
06:17:53 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    9392
	-1	    8819

Elapsed: 00:00:00.03
06:17:53 SQL> 
06:17:53 SQL> -- Calc gains and ntiles
06:17:53 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.13
06:17:53 SQL> CREATE TABLE q15 COMPRESS AS
06:17:53   2  SELECT
06:17:53   3  pair
06:17:53   4  ,ydate
06:17:53   5  ,prdate -- Should be unique
06:17:53   6  ,trend -- +1 or -1
06:17:53   7  ,dc12 -- next statement needs this
06:17:53   8  -- Use NTILE() to derive some attributes
06:17:53   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d12))		 att00
06:17:53  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d23))		 att01
06:17:53  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d34))		 att02
06:17:53  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d45))		 att03
06:17:53  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d56))		 att04
06:17:53  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d67))		 att05
06:17:53  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d78))		 att06
06:17:53  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d89))		 att07
06:17:53  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d912)) 	 att08
06:17:53  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc2)		 att09
06:17:53  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc3)		 att10
06:17:53  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc4)		 att11
06:17:53  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc5)		 att12
06:17:53  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6)		 att13
06:17:53  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc7)		 att14
06:17:53  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8)		 att15
06:17:53  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc9)		 att16
06:17:53  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att17
06:17:53  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc24)		 att18
06:17:53  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc72)		 att19
06:17:53  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr2,7))) att20
06:17:53  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr3,7))) att21
06:17:53  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr4,7))) att22
06:17:53  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr5,7))) att23
06:17:53  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6,7))) att24
06:17:53  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att25
06:17:53  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att26
06:17:53  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr72,7)))att27
06:17:53  37  -- date related integers: hour of day, day of week, week of month:
06:17:53  38  ,hh    att28
06:17:53  39  ,d     att29
06:17:53  40  ,w     att30
06:17:53  41  ,mpm   att31
06:17:53  42  ,trend att32
06:17:53  43  ,ug4 g4
06:17:53  44  ,CASE WHEN ug4 IS NULL THEN NULL WHEN ug4 > 0.0006 THEN 'up' ELSE 'nup' END gatt
06:17:53  45  ,CASE WHEN ug4 IS NULL THEN NULL WHEN ug4< -0.0006 THEN 'up' ELSE 'nup' END gattn
06:17:53  46  FROM q13
06:17:53  47  ORDER BY pair,ydate
06:17:53  48  /

Table created.

Elapsed: 00:00:03.59
06:17:57 SQL> 
06:17:57 SQL> -- rpt
06:17:57 SQL> SELECT pair,trend,gatt,gattn,AVG(g4),COUNT(g4),CORR(dc12,g4)FROM q15
06:17:57   2  GROUP BY pair,trend,gatt,gattn
06:17:57   3  ORDER BY pair,trend,gatt,gattn
06:17:57   4  /

PAIR	     TREND GAT GAT    AVG(G4)  COUNT(G4) CORR(DC12,G4)
------- ---------- --- --- ---------- ---------- -------------
eur_usd 	-1 nup nup -9.762E-06	    1552    .012841288
eur_usd 	-1 nup up  -.00336345	    3556    .028819658
eur_usd 	-1 up  nup  .00359406	    3687    -.16621277
eur_usd 	-1			       0
eur_usd 	 1 nup nup -3.539E-06	    1787    .027043047
eur_usd 	 1 nup up  -.00312663	    3855    .082037728
eur_usd 	 1 up  nup .003475607	    3750    -.03599509

7 rows selected.

Elapsed: 00:00:00.04
06:17:57 SQL> 
06:17:57 SQL> -- rpt
06:17:57 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
eur_usd 2010-12-16 06:10:00

Elapsed: 00:00:00.02
06:17:57 SQL> 
06:17:57 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.10
06:17:57 SQL> CREATE TABLE modsrc COMPRESS AS
06:17:57   2  SELECT
06:17:57   3  pair
06:17:57   4  ,ydate
06:17:57   5  ,prdate
06:17:57   6  ,trend
06:17:57   7  ,g4
06:17:57   8  ,gatt
06:17:57   9  ,gattn
06:17:57  10  ,dc12
06:17:57  11  FROM q15
06:17:57  12  /

Table created.

Elapsed: 00:00:00.08
06:17:57 SQL> 
06:17:57 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
06:17:57 SQL> 
06:17:57 SQL> -- rpt
06:17:57 SQL> 
06:17:57 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      18643

Elapsed: 00:00:00.31
06:17:58 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      18211

Elapsed: 00:00:00.00
06:17:58 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      18211

Elapsed: 00:00:00.01
06:17:58 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      18211

Elapsed: 00:00:00.00
06:17:58 SQL> 
06:17:58 SQL> SELECT pair,trend,gatt,gattn,AVG(g4),COUNT(g4),CORR(dc12,g4)FROM modsrc
06:17:58   2  GROUP BY pair,trend,gatt,gattn
06:17:58   3  ORDER BY pair,trend,gatt,gattn
06:17:58   4  /

PAIR	     TREND GAT GAT    AVG(G4)  COUNT(G4) CORR(DC12,G4)
------- ---------- --- --- ---------- ---------- -------------
eur_usd 	-1 nup nup -9.762E-06	    1552    .012841288
eur_usd 	-1 nup up  -.00336345	    3556    .028819658
eur_usd 	-1 up  nup  .00359406	    3687    -.16621277
eur_usd 	-1			       0
eur_usd 	 1 nup nup -3.539E-06	    1787    .027043047
eur_usd 	 1 nup up  -.00312663	    3855    .082037728
eur_usd 	 1 up  nup .003475607	    3750    -.03599509

7 rows selected.

Elapsed: 00:00:00.02
06:17:58 SQL> 
06:17:58 SQL> DROP   TABLE eur_ms10 ;

Table dropped.

Elapsed: 00:00:00.08
06:17:58 SQL> CREATE TABLE eur_ms10 COMPRESS AS
06:17:58   2  SELECT
06:17:58   3  ydate
06:17:58   4  ,trend eur_trend
06:17:58   5  ,g4    eur_g4
06:17:58   6  ,gatt  eur_gatt
06:17:58   7  ,gattn	eur_gattn
06:17:58   8  FROM modsrc
06:17:58   9  /

Table created.

Elapsed: 00:00:00.06
06:17:58 SQL> 
06:17:58 SQL> ANALYZE TABLE eur_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
06:17:58 SQL> 
06:17:58 SQL> -- rpt
06:17:58 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g4),MIN(g4),MAX(g4)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G4)	 MIN(G4)    MAX(G4)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-06-23 10:50:01 2010-12-15 15:20:00	 9392	  -.0153      .0165
	-1 2010-06-22 16:00:01 2010-12-16 06:10:00	 8795	  -.0164      .0167

Elapsed: 00:00:00.02
06:17:58 SQL> SELECT eur_trend,MIN(ydate),MAX(ydate),COUNT(eur_trend),MIN(eur_g4),MAX(eur_g4)FROM eur_ms10 GROUP BY eur_trend;

 EUR_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(EUR_TREND) MIN(EUR_G4) MAX(EUR_G4)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-06-23 10:50:01 2010-12-15 15:20:00	       9392	 -.0153       .0165
	-1 2010-06-22 16:00:01 2010-12-16 06:10:00	       8819	 -.0164       .0167

Elapsed: 00:00:00.01
06:17:58 SQL> 
06:17:58 SQL> -- I need a copy of q15 attributes
06:17:58 SQL> 
06:17:58 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.14
06:17:58 SQL> CREATE TABLE eur_att COMPRESS AS
06:17:58   2  SELECT
06:17:58   3  ydate
06:17:58   4  ,att00 eur_att00
06:17:58   5  ,att01 eur_att01
06:17:58   6  ,att02 eur_att02
06:17:58   7  ,att03 eur_att03
06:17:58   8  ,att04 eur_att04
06:17:58   9  ,att05 eur_att05
06:17:58  10  ,att06 eur_att06
06:17:58  11  ,att07 eur_att07
06:17:58  12  ,att08 eur_att08
06:17:58  13  ,att09 eur_att09
06:17:58  14  ,att10 eur_att10
06:17:58  15  ,att11 eur_att11
06:17:58  16  ,att12 eur_att12
06:17:58  17  ,att13 eur_att13
06:17:58  18  ,att14 eur_att14
06:17:58  19  ,att15 eur_att15
06:17:58  20  ,att16 eur_att16
06:17:58  21  ,att17 eur_att17
06:17:58  22  ,att18 eur_att18
06:17:58  23  ,att19 eur_att19
06:17:58  24  ,att20 eur_att20
06:17:58  25  ,att21 eur_att21
06:17:58  26  ,att22 eur_att22
06:17:58  27  ,att23 eur_att23
06:17:58  28  ,att24 eur_att24
06:17:58  29  ,att25 eur_att25
06:17:58  30  ,att26 eur_att26
06:17:58  31  ,att27 eur_att27
06:17:58  32  ,att28 eur_att28
06:17:58  33  ,att29 eur_att29
06:17:58  34  ,att30 eur_att30
06:17:58  35  ,att31 eur_att31
06:17:58  36  ,att32 eur_att32
06:17:58  37  FROM q15
06:17:58  38  /

Table created.

Elapsed: 00:00:00.15
06:17:58 SQL> 
06:17:58 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.36
06:17:59 SQL> 
06:17:59 SQL> -- rpt
06:17:59 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     18211

Elapsed: 00:00:00.00
06:17:59 SQL> 
06:17:59 SQL> --
06:17:59 SQL> -- aud10.sql
06:17:59 SQL> --
06:17:59 SQL> 
06:17:59 SQL> -- Creates views and tables for backtesting a forex SVM strategy
06:17:59 SQL> 
06:17:59 SQL> PURGE RECYCLEBIN;
