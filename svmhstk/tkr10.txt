
SQL*Plus: Release 11.2.0.1.0 Production on Wed Jan 5 00:49:56 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

00:49:56 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
00:49:56 SQL> 00:49:56 SQL> --
00:49:56 SQL> -- stk10.sql
00:49:56 SQL> --
00:49:56 SQL> 
00:49:56 SQL> -- Creates views and tables for demonstrating SVM.
00:49:56 SQL> -- This script is called from svmtkr.bash
00:49:56 SQL> 
00:49:56 SQL> CREATE OR REPLACE VIEW stk10 AS
00:49:56   2  SELECT
00:49:56   3  tkr
00:49:56   4  ,ydate
00:49:56   5  ,tkr||ydate tkrdate
00:49:56   6  ,clse
00:49:56   7  ,rownum rnum -- acts as t in my time-series
00:49:56   8  -- Derive some attributes from clse.
00:49:56   9  -- Each row is separated by 1hr:
00:49:56  10  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*2 PRECEDING AND CURRENT ROW)min2
00:49:56  11  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*3 PRECEDING AND CURRENT ROW)min3
00:49:56  12  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*4 PRECEDING AND CURRENT ROW)min4
00:49:56  13  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*5 PRECEDING AND CURRENT ROW)min5
00:49:56  14  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*6 PRECEDING AND CURRENT ROW)min6
00:49:56  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*7 PRECEDING AND CURRENT ROW)min7
00:49:56  16  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*8 PRECEDING AND CURRENT ROW)min8
00:49:56  17  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*2 PRECEDING AND CURRENT ROW)avg2
00:49:56  18  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*3 PRECEDING AND CURRENT ROW)avg3
00:49:56  19  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*4 PRECEDING AND CURRENT ROW)avg4
00:49:56  20  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*5 PRECEDING AND CURRENT ROW)avg5
00:49:56  21  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*6 PRECEDING AND CURRENT ROW)avg6
00:49:56  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*7 PRECEDING AND CURRENT ROW)avg7
00:49:56  23  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*8 PRECEDING AND CURRENT ROW)avg8
00:49:56  24  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*2 PRECEDING AND CURRENT ROW)max2
00:49:56  25  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*3 PRECEDING AND CURRENT ROW)max3
00:49:56  26  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*4 PRECEDING AND CURRENT ROW)max4
00:49:56  27  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*5 PRECEDING AND CURRENT ROW)max5
00:49:56  28  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*6 PRECEDING AND CURRENT ROW)max6
00:49:56  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*7 PRECEDING AND CURRENT ROW)max7
00:49:56  30  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*8 PRECEDING AND CURRENT ROW)max8
00:49:56  31  ,LEAD(clse,4*3,NULL)OVER(PARTITION BY tkr ORDER BY ydate)ld4
00:49:56  32  FROM di1hr_stk WHERE UPPER(tkr)='&1'
00:49:56  33  ORDER BY ydate
00:49:56  34  /
old  32: FROM di1hr_stk WHERE UPPER(tkr)='&1'
new  32: FROM di1hr_stk WHERE UPPER(tkr)='GOOG'

View created.

Elapsed: 00:00:00.06
00:49:56 SQL> 
00:49:56 SQL> -- rpt
00:49:56 SQL> 
00:49:56 SQL> SELECT
00:49:56   2  tkr
00:49:56   3  ,COUNT(tkr)
00:49:56   4  ,MIN(clse),MAX(clse)
00:49:56   5  ,MIN(avg4),MAX(avg4)
00:49:56   6  ,MIN(ydate),MAX(ydate)
00:49:56   7  FROM stk10
00:49:56   8  GROUP BY tkr
00:49:56   9  /

TKR	COUNT(TKR)  MIN(CLSE)  MAX(CLSE)  MIN(AVG4)  MAX(AVG4) MIN(YDATE)	   MAX(YDATE)
------- ---------- ---------- ---------- ---------- ---------- ------------------- -------------------
GOOG	      8106     247.98	  744.87 255.312308 738.325385 2006-08-08 16:00:01 2011-01-01 00:00:00

Elapsed: 00:00:00.36
00:49:56 SQL> 
00:49:56 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
00:49:56 SQL> DROP TABLE stk12;

Table dropped.

Elapsed: 00:00:00.19
00:49:56 SQL> CREATE TABLE stk12 COMPRESS AS
00:49:56   2  SELECT
00:49:56   3  tkr
00:49:56   4  ,ydate
00:49:56   5  ,tkrdate
00:49:56   6  ,clse
00:49:56   7  ,rnum
00:49:56   8  -- g4 is important. I want to predict g4:
00:49:56   9  ,ld4 - clse g4
00:49:56  10  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
00:49:56  11  -- I want more attributes from the ones I derived above:
00:49:56  12  -- clse relation to moving-min
00:49:56  13  ,clse-min2  cm2
00:49:56  14  ,clse-min3  cm3
00:49:56  15  ,clse-min4  cm4
00:49:56  16  ,clse-min5  cm5
00:49:56  17  ,clse-min6  cm6
00:49:56  18  ,clse-min7  cm7
00:49:56  19  ,clse-min8  cm8
00:49:56  20  -- clse relation to moving-avg
00:49:56  21  ,clse-avg2  ca2
00:49:56  22  ,clse-avg3  ca3
00:49:56  23  ,clse-avg4  ca4
00:49:56  24  ,clse-avg5  ca5
00:49:56  25  ,clse-avg6  ca6
00:49:56  26  ,clse-avg7  ca7
00:49:56  27  ,clse-avg8  ca8
00:49:56  28  -- clse relation to moving-max
00:49:56  29  ,clse-max2  cx2
00:49:56  30  ,clse-max3  cx3
00:49:56  31  ,clse-max4  cx4
00:49:56  32  ,clse-max5  cx5
00:49:56  33  ,clse-max6  cx6
00:49:56  34  ,clse-max7  cx7
00:49:56  35  ,clse-max8  cx8
00:49:56  36  -- Derive date related attributes:
00:49:56  37  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
00:49:56  38  ,0+TO_CHAR(ydate,'D')d
00:49:56  39  ,0+TO_CHAR(ydate,'W')w
00:49:56  40  -- mpm stands for minutes-past-midnight:
00:49:56  41  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
00:49:56  42  -- mph stands for minutes-past-hour:
00:49:56  43  ,0+TO_CHAR(ydate,'MI')mph
00:49:56  44  FROM stk10
00:49:56  45  ORDER BY ydate
00:49:56  46  /

Table created.

Elapsed: 00:00:01.14
00:49:58 SQL> 
00:49:58 SQL> -- rpt
00:49:58 SQL> 
00:49:58 SQL> SELECT
00:49:58   2  tkr
00:49:58   3  ,COUNT(tkr)
00:49:58   4  ,MIN(clse),MAX(clse)
00:49:58   5  ,MIN(ydate),MAX(ydate)
00:49:58   6  FROM stk12
00:49:58   7  GROUP BY tkr
00:49:58   8  /

TKR	COUNT(TKR)  MIN(CLSE)  MAX(CLSE) MIN(YDATE)	     MAX(YDATE)
------- ---------- ---------- ---------- ------------------- -------------------
GOOG	      8106     247.98	  744.87 2006-08-08 16:00:01 2011-01-01 00:00:00

Elapsed: 00:00:00.03
00:49:58 SQL> 
00:49:58 SQL> -- Prepare for derivation of NTILE based parameters.
00:49:58 SQL> -- Also derive the "trend" parameter:
00:49:58 SQL> 
00:49:58 SQL> DROP TABLE stk14;

Table dropped.

Elapsed: 00:00:00.16
00:49:58 SQL> CREATE TABLE stk14 COMPRESS AS
00:49:58   2  SELECT
00:49:58   3  tkr
00:49:58   4  ,ydate
00:49:58   5  ,tkrdate
00:49:58   6  ,clse
00:49:58   7  ,g4
00:49:58   8  ,CASE WHEN g4 IS NULL THEN NULL WHEN g4/clse >	0.30/120 THEN 'up' ELSE 'nup' END gatt
00:49:58   9  ,CASE WHEN g4 IS NULL THEN NULL WHEN g4/clse < -0.30/120 THEN 'up' ELSE 'nup' END gattn
00:49:58  10  ,CASE WHEN trend IS NULL THEN 1
00:49:58  11  	    WHEN trend =0      THEN 1
00:49:58  12  	    ELSE trend END trend
00:49:58  13  ,cm2
00:49:58  14  ,cm3
00:49:58  15  ,cm4
00:49:58  16  ,cm5
00:49:58  17  ,cm6
00:49:58  18  ,cm7
00:49:58  19  ,cm8
00:49:58  20  ,ca2
00:49:58  21  ,ca3
00:49:58  22  ,ca4
00:49:58  23  ,ca5
00:49:58  24  ,ca6
00:49:58  25  ,ca7
00:49:58  26  ,ca8
00:49:58  27  ,cx2
00:49:58  28  ,cx3
00:49:58  29  ,cx4
00:49:58  30  ,cx5
00:49:58  31  ,cx6
00:49:58  32  ,cx7
00:49:58  33  ,cx8
00:49:58  34  ,hh
00:49:58  35  ,d
00:49:58  36  ,w
00:49:58  37  ,mpm
00:49:58  38  ,mph
00:49:58  39  FROM stk12
00:49:58  40  -- Guard against divide by 0:
00:49:58  41  WHERE clse > 0
00:49:58  42  ORDER BY ydate
00:49:58  43  /

Table created.

Elapsed: 00:00:00.33
00:49:58 SQL> 
00:49:58 SQL> -- rpt
00:49:58 SQL> 
00:49:58 SQL> SELECT
00:49:58   2  tkr
00:49:58   3  ,trend
00:49:58   4  ,gatt
00:49:58   5  ,COUNT(tkr)
00:49:58   6  ,AVG(g4)
00:49:58   7  FROM stk14
00:49:58   8  GROUP BY tkr,trend,gatt
00:49:58   9  ORDER BY tkr,trend,gatt
00:49:58  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G4)
------- ---------- --- ---------- ----------
GOOG		-1 nup	     2205 -8.2362222
GOOG		-1 up	     1616  11.165133
GOOG		-1	       12
GOOG		 1 nup	     2281 -6.8714467
GOOG		 1 up	     1992 9.21809739

Elapsed: 00:00:00.03
00:49:58 SQL> 
00:49:58 SQL> -- Derive NTILE based params:
00:49:58 SQL> 
00:49:58 SQL> DROP TABLE stk16;

Table dropped.

Elapsed: 00:00:00.15
00:49:58 SQL> CREATE TABLE stk16 COMPRESS AS
00:49:58   2  SELECT
00:49:58   3  tkr
00:49:58   4  ,ydate
00:49:58   5  ,tkrdate
00:49:58   6  ,clse
00:49:58   7  ,g4
00:49:58   8  ,gatt
00:49:58   9  ,gattn
00:49:58  10  ,trend
00:49:58  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm2)att00
00:49:58  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att01
00:49:58  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att02
00:49:58  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att03
00:49:58  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att04
00:49:58  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att05
00:49:58  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att06
00:49:58  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca2)att07
00:49:58  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att08
00:49:58  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att09
00:49:58  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att10
00:49:58  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att11
00:49:58  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att12
00:49:58  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att13
00:49:58  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx2)att14
00:49:58  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att15
00:49:58  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att16
00:49:58  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att17
00:49:58  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att18
00:49:58  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att19
00:49:58  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att20
00:49:58  32  ,hh  att21
00:49:58  33  ,d   att22
00:49:58  34  ,w   att23
00:49:58  35  ,mpm att24
00:49:58  36  ,mph att25
00:49:58  37  ,trend att26
00:49:58  38  FROM stk14
00:49:58  39  ORDER BY ydate
00:49:58  40  /

Table created.

Elapsed: 00:00:01.83
00:50:00 SQL> 
00:50:00 SQL> -- rpt
00:50:00 SQL> 
00:50:00 SQL> SELECT
00:50:00   2  tkr
00:50:00   3  ,trend
00:50:00   4  ,gatt
00:50:00   5  ,COUNT(tkr)
00:50:00   6  ,AVG(g4)
00:50:00   7  FROM stk16
00:50:00   8  GROUP BY tkr,trend,gatt
00:50:00   9  ORDER BY tkr,trend,gatt
00:50:00  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G4)
------- ---------- --- ---------- ----------
GOOG		-1 nup	     2205 -8.2362222
GOOG		-1 up	     1616  11.165133
GOOG		-1	       12
GOOG		 1 nup	     2281 -6.8714467
GOOG		 1 up	     1992 9.21809739

Elapsed: 00:00:00.03
00:50:00 SQL> 
00:50:00 SQL> -- Now I derive goodness attributes:
00:50:00 SQL> 
00:50:00 SQL> DROP TABLE stk_ms;

Table dropped.

Elapsed: 00:00:00.14
00:50:00 SQL> CREATE TABLE stk_ms COMPRESS AS
00:50:00   2  SELECT
00:50:00   3  tkr
00:50:00   4  ,ydate
00:50:00   5  ,tkrdate
00:50:00   6  ,trend
00:50:00   7  ,g4
00:50:00   8  ,gatt
00:50:00   9  ,gattn
00:50:00  10  -- I want to SUM() over 4 years worth of data:
00:50:00  11  ,SUM(g4)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 24*365*4 PRECEDING AND CURRENT ROW)g00
00:50:00  12  ,SUM(g4)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 24*365*4 PRECEDING AND CURRENT ROW)g01
00:50:00  13  ,SUM(g4)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 24*365*4 PRECEDING AND CURRENT ROW)g02
00:50:00  14  ,SUM(g4)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 24*365*4 PRECEDING AND CURRENT ROW)g03
00:50:00  15  ,SUM(g4)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 24*365*4 PRECEDING AND CURRENT ROW)g04
00:50:00  16  ,SUM(g4)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 24*365*4 PRECEDING AND CURRENT ROW)g05
00:50:00  17  ,SUM(g4)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 24*365*4 PRECEDING AND CURRENT ROW)g06
00:50:00  18  ,SUM(g4)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 24*365*4 PRECEDING AND CURRENT ROW)g07
00:50:00  19  ,SUM(g4)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 24*365*4 PRECEDING AND CURRENT ROW)g08
00:50:00  20  ,SUM(g4)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 24*365*4 PRECEDING AND CURRENT ROW)g09
00:50:00  21  ,SUM(g4)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 24*365*4 PRECEDING AND CURRENT ROW)g10
00:50:00  22  ,SUM(g4)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 24*365*4 PRECEDING AND CURRENT ROW)g11
00:50:00  23  ,SUM(g4)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 24*365*4 PRECEDING AND CURRENT ROW)g12
00:50:00  24  ,SUM(g4)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 24*365*4 PRECEDING AND CURRENT ROW)g13
00:50:00  25  ,SUM(g4)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 24*365*4 PRECEDING AND CURRENT ROW)g14
00:50:00  26  ,SUM(g4)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 24*365*4 PRECEDING AND CURRENT ROW)g15
00:50:00  27  ,SUM(g4)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 24*365*4 PRECEDING AND CURRENT ROW)g16
00:50:00  28  ,SUM(g4)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 24*365*4 PRECEDING AND CURRENT ROW)g17
00:50:00  29  ,SUM(g4)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 24*365*4 PRECEDING AND CURRENT ROW)g18
00:50:00  30  ,SUM(g4)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 24*365*4 PRECEDING AND CURRENT ROW)g19
00:50:00  31  ,SUM(g4)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 24*365*4 PRECEDING AND CURRENT ROW)g20
00:50:00  32  ,SUM(g4)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 24*365*4 PRECEDING AND CURRENT ROW)g21
00:50:00  33  ,SUM(g4)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 24*365*4 PRECEDING AND CURRENT ROW)g22
00:50:00  34  ,SUM(g4)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 24*365*4 PRECEDING AND CURRENT ROW)g23
00:50:00  35  ,SUM(g4)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 24*365*4 PRECEDING AND CURRENT ROW)g24
00:50:00  36  ,SUM(g4)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 24*365*4 PRECEDING AND CURRENT ROW)g25
00:50:00  37  ,SUM(g4)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 24*365*4 PRECEDING AND CURRENT ROW)g26
00:50:00  38  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
00:50:00  39  ,SUM(g4)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 24*365/1 PRECEDING AND CURRENT ROW)g27
00:50:00  40  ,SUM(g4)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 24*365/2 PRECEDING AND CURRENT ROW)g28
00:50:00  41  ,SUM(g4)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 24*365/4 PRECEDING AND CURRENT ROW)g29
00:50:00  42  FROM stk16
00:50:00  43  /

Table created.

Elapsed: 00:00:02.60
00:50:03 SQL> 
00:50:03 SQL> -- rpt
00:50:03 SQL> 
00:50:03 SQL> SELECT
00:50:03   2  tkr
00:50:03   3  ,trend
00:50:03   4  ,gatt
00:50:03   5  ,COUNT(tkr)
00:50:03   6  ,AVG(g4)
00:50:03   7  FROM stk_ms
00:50:03   8  GROUP BY tkr,trend,gatt
00:50:03   9  ORDER BY tkr,trend,gatt
00:50:03  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G4)
------- ---------- --- ---------- ----------
GOOG		-1 nup	     2205 -8.2362222
GOOG		-1 up	     1616  11.165133
GOOG		-1	       12
GOOG		 1 nup	     2281 -6.8714467
GOOG		 1 up	     1992 9.21809739

Elapsed: 00:00:00.03
00:50:03 SQL> 
00:50:03 SQL> SELECT
00:50:03   2  tkr
00:50:03   3  ,COUNT(tkr)
00:50:03   4  ,MIN(ydate),MAX(ydate)
00:50:03   5  FROM stk_ms
00:50:03   6  GROUP BY tkr
00:50:03   7  /

TKR	COUNT(TKR) MIN(YDATE)	       MAX(YDATE)
------- ---------- ------------------- -------------------
GOOG	      8106 2006-08-08 16:00:01 2011-01-01 00:00:00

Elapsed: 00:00:00.01
00:50:03 SQL> 
00:50:03 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
