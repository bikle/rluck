
SQL*Plus: Release 11.2.0.1.0 Production on Wed Jan 5 04:07:26 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

04:07:26 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
04:07:26 SQL> 04:07:26 SQL> --
04:07:26 SQL> -- stk10.sql
04:07:26 SQL> --
04:07:26 SQL> 
04:07:26 SQL> -- Creates views and tables for demonstrating SVM.
04:07:26 SQL> -- This script is called from svmtkr.bash
04:07:26 SQL> 
04:07:26 SQL> CREATE OR REPLACE VIEW stk10 AS
04:07:26   2  SELECT
04:07:26   3  tkr
04:07:26   4  ,ydate
04:07:26   5  ,tkr||ydate tkrdate
04:07:26   6  ,clse
04:07:26   7  ,rownum rnum -- acts as t in my time-series
04:07:26   8  -- Derive some attributes from clse.
04:07:26   9  -- Each row is separated by 1hr:
04:07:26  10  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*2 PRECEDING AND CURRENT ROW)min2
04:07:26  11  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*3 PRECEDING AND CURRENT ROW)min3
04:07:26  12  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*4 PRECEDING AND CURRENT ROW)min4
04:07:26  13  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*5 PRECEDING AND CURRENT ROW)min5
04:07:26  14  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*6 PRECEDING AND CURRENT ROW)min6
04:07:26  15  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*7 PRECEDING AND CURRENT ROW)min7
04:07:26  16  ,MIN(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*8 PRECEDING AND CURRENT ROW)min8
04:07:26  17  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*2 PRECEDING AND CURRENT ROW)avg2
04:07:26  18  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*3 PRECEDING AND CURRENT ROW)avg3
04:07:26  19  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*4 PRECEDING AND CURRENT ROW)avg4
04:07:26  20  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*5 PRECEDING AND CURRENT ROW)avg5
04:07:26  21  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*6 PRECEDING AND CURRENT ROW)avg6
04:07:26  22  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*7 PRECEDING AND CURRENT ROW)avg7
04:07:26  23  ,AVG(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*8 PRECEDING AND CURRENT ROW)avg8
04:07:26  24  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*2 PRECEDING AND CURRENT ROW)max2
04:07:26  25  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*3 PRECEDING AND CURRENT ROW)max3
04:07:26  26  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*4 PRECEDING AND CURRENT ROW)max4
04:07:26  27  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*5 PRECEDING AND CURRENT ROW)max5
04:07:26  28  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*6 PRECEDING AND CURRENT ROW)max6
04:07:26  29  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*7 PRECEDING AND CURRENT ROW)max7
04:07:26  30  ,MAX(clse)OVER(PARTITION BY tkr ORDER BY ydate ROWS BETWEEN 3*8 PRECEDING AND CURRENT ROW)max8
04:07:26  31  ,LEAD(clse,4*3,NULL)OVER(PARTITION BY tkr ORDER BY ydate)ld4
04:07:26  32  FROM di1hr_stk WHERE UPPER(tkr)='&1'
04:07:26  33  ORDER BY ydate
04:07:26  34  /
old  32: FROM di1hr_stk WHERE UPPER(tkr)='&1'
new  32: FROM di1hr_stk WHERE UPPER(tkr)='SPY'

View created.

Elapsed: 00:00:00.06
04:07:26 SQL> 
04:07:26 SQL> -- rpt
04:07:26 SQL> 
04:07:26 SQL> SELECT
04:07:26   2  tkr
04:07:26   3  ,COUNT(tkr)
04:07:26   4  ,MIN(clse),MAX(clse)
04:07:26   5  ,MIN(avg4),MAX(avg4)
04:07:26   6  ,MIN(ydate),MAX(ydate)
04:07:26   7  FROM stk10
04:07:26   8  GROUP BY tkr
04:07:26   9  /

TKR	COUNT(TKR)  MIN(CLSE)  MAX(CLSE)  MIN(AVG4)  MAX(AVG4) MIN(YDATE)	   MAX(YDATE)
------- ---------- ---------- ---------- ---------- ---------- ------------------- -------------------
SPY	      8136	67.28	  157.34 68.3161538 156.362308 2006-08-09 16:00:01 2011-01-05 00:00:00

Elapsed: 00:00:00.37
04:07:27 SQL> 
04:07:27 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
04:07:27 SQL> DROP TABLE stk12;

Table dropped.

Elapsed: 00:00:00.09
04:07:27 SQL> CREATE TABLE stk12 COMPRESS AS
04:07:27   2  SELECT
04:07:27   3  tkr
04:07:27   4  ,ydate
04:07:27   5  ,tkrdate
04:07:27   6  ,clse
04:07:27   7  ,rnum
04:07:27   8  -- g4 is important. I want to predict g4:
04:07:27   9  ,ld4 - clse g4
04:07:27  10  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY tkr ORDER BY ydate))trend
04:07:27  11  -- I want more attributes from the ones I derived above:
04:07:27  12  -- clse relation to moving-min
04:07:27  13  ,clse-min2  cm2
04:07:27  14  ,clse-min3  cm3
04:07:27  15  ,clse-min4  cm4
04:07:27  16  ,clse-min5  cm5
04:07:27  17  ,clse-min6  cm6
04:07:27  18  ,clse-min7  cm7
04:07:27  19  ,clse-min8  cm8
04:07:27  20  -- clse relation to moving-avg
04:07:27  21  ,clse-avg2  ca2
04:07:27  22  ,clse-avg3  ca3
04:07:27  23  ,clse-avg4  ca4
04:07:27  24  ,clse-avg5  ca5
04:07:27  25  ,clse-avg6  ca6
04:07:27  26  ,clse-avg7  ca7
04:07:27  27  ,clse-avg8  ca8
04:07:27  28  -- clse relation to moving-max
04:07:27  29  ,clse-max2  cx2
04:07:27  30  ,clse-max3  cx3
04:07:27  31  ,clse-max4  cx4
04:07:27  32  ,clse-max5  cx5
04:07:27  33  ,clse-max6  cx6
04:07:27  34  ,clse-max7  cx7
04:07:27  35  ,clse-max8  cx8
04:07:27  36  -- Derive date related attributes:
04:07:27  37  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
04:07:27  38  ,0+TO_CHAR(ydate,'D')d
04:07:27  39  ,0+TO_CHAR(ydate,'W')w
04:07:27  40  -- mpm stands for minutes-past-midnight:
04:07:27  41  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
04:07:27  42  -- mph stands for minutes-past-hour:
04:07:27  43  ,0+TO_CHAR(ydate,'MI')mph
04:07:27  44  FROM stk10
04:07:27  45  ORDER BY ydate
04:07:27  46  /

Table created.

Elapsed: 00:00:01.19
04:07:28 SQL> 
04:07:28 SQL> -- rpt
04:07:28 SQL> 
04:07:28 SQL> SELECT
04:07:28   2  tkr
04:07:28   3  ,COUNT(tkr)
04:07:28   4  ,MIN(clse),MAX(clse)
04:07:28   5  ,MIN(ydate),MAX(ydate)
04:07:28   6  FROM stk12
04:07:28   7  GROUP BY tkr
04:07:28   8  /

TKR	COUNT(TKR)  MIN(CLSE)  MAX(CLSE) MIN(YDATE)	     MAX(YDATE)
------- ---------- ---------- ---------- ------------------- -------------------
SPY	      8136	67.28	  157.34 2006-08-09 16:00:01 2011-01-05 00:00:00

Elapsed: 00:00:00.03
04:07:28 SQL> 
04:07:28 SQL> -- Prepare for derivation of NTILE based parameters.
04:07:28 SQL> -- Also derive the "trend" parameter:
04:07:28 SQL> 
04:07:28 SQL> DROP TABLE stk14;

Table dropped.

Elapsed: 00:00:00.06
04:07:28 SQL> CREATE TABLE stk14 COMPRESS AS
04:07:28   2  SELECT
04:07:28   3  tkr
04:07:28   4  ,ydate
04:07:28   5  ,tkrdate
04:07:28   6  ,clse
04:07:28   7  ,g4
04:07:28   8  ,CASE WHEN g4 IS NULL THEN NULL WHEN g4/clse >	0.30/120 THEN 'up' ELSE 'nup' END gatt
04:07:28   9  ,CASE WHEN g4 IS NULL THEN NULL WHEN g4/clse < -0.30/120 THEN 'up' ELSE 'nup' END gattn
04:07:28  10  ,CASE WHEN trend IS NULL THEN 1
04:07:28  11  	    WHEN trend =0      THEN 1
04:07:28  12  	    ELSE trend END trend
04:07:28  13  ,cm2
04:07:28  14  ,cm3
04:07:28  15  ,cm4
04:07:28  16  ,cm5
04:07:28  17  ,cm6
04:07:28  18  ,cm7
04:07:28  19  ,cm8
04:07:28  20  ,ca2
04:07:28  21  ,ca3
04:07:28  22  ,ca4
04:07:28  23  ,ca5
04:07:28  24  ,ca6
04:07:28  25  ,ca7
04:07:28  26  ,ca8
04:07:28  27  ,cx2
04:07:28  28  ,cx3
04:07:28  29  ,cx4
04:07:28  30  ,cx5
04:07:28  31  ,cx6
04:07:28  32  ,cx7
04:07:28  33  ,cx8
04:07:28  34  ,hh
04:07:28  35  ,d
04:07:28  36  ,w
04:07:28  37  ,mpm
04:07:28  38  ,mph
04:07:28  39  FROM stk12
04:07:28  40  -- Guard against divide by 0:
04:07:28  41  WHERE clse > 0
04:07:28  42  ORDER BY ydate
04:07:28  43  /

Table created.

Elapsed: 00:00:00.33
04:07:28 SQL> 
04:07:28 SQL> -- rpt
04:07:28 SQL> 
04:07:28 SQL> SELECT
04:07:28   2  tkr
04:07:28   3  ,trend
04:07:28   4  ,gatt
04:07:28   5  ,COUNT(tkr)
04:07:28   6  ,AVG(g4)
04:07:28   7  FROM stk14
04:07:28   8  GROUP BY tkr,trend,gatt
04:07:28   9  ORDER BY tkr,trend,gatt
04:07:28  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G4)
------- ---------- --- ---------- ----------
SPY		-1 nup	     1962 -1.3954969
SPY		-1 up	     1727 1.86850898
SPY		-1	       12
SPY		 1 nup	     2544 -1.1593966
SPY		 1 up	     1891 1.29922263

Elapsed: 00:00:00.02
04:07:28 SQL> 
04:07:28 SQL> -- Derive NTILE based params:
04:07:28 SQL> 
04:07:28 SQL> DROP TABLE stk16;

Table dropped.

Elapsed: 00:00:00.08
04:07:29 SQL> CREATE TABLE stk16 COMPRESS AS
04:07:29   2  SELECT
04:07:29   3  tkr
04:07:29   4  ,ydate
04:07:29   5  ,tkrdate
04:07:29   6  ,clse
04:07:29   7  ,g4
04:07:29   8  ,gatt
04:07:29   9  ,gattn
04:07:29  10  ,trend
04:07:29  11  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm2)att00
04:07:29  12  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm3)att01
04:07:29  13  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm4)att02
04:07:29  14  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm5)att03
04:07:29  15  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm6)att04
04:07:29  16  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm7)att05
04:07:29  17  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cm8)att06
04:07:29  18  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca2)att07
04:07:29  19  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca3)att08
04:07:29  20  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca4)att09
04:07:29  21  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca5)att10
04:07:29  22  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca6)att11
04:07:29  23  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca7)att12
04:07:29  24  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY ca8)att13
04:07:29  25  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx2)att14
04:07:29  26  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx3)att15
04:07:29  27  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx4)att16
04:07:29  28  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx5)att17
04:07:29  29  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx6)att18
04:07:29  30  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx7)att19
04:07:29  31  ,NTILE(9)OVER(PARTITION BY trend,tkr ORDER BY cx8)att20
04:07:29  32  ,hh  att21
04:07:29  33  ,d   att22
04:07:29  34  ,w   att23
04:07:29  35  ,mpm att24
04:07:29  36  ,mph att25
04:07:29  37  ,trend att26
04:07:29  38  FROM stk14
04:07:29  39  ORDER BY ydate
04:07:29  40  /

Table created.

Elapsed: 00:00:01.96
04:07:30 SQL> 
04:07:30 SQL> -- rpt
04:07:30 SQL> 
04:07:30 SQL> SELECT
04:07:30   2  tkr
04:07:30   3  ,trend
04:07:30   4  ,gatt
04:07:30   5  ,COUNT(tkr)
04:07:30   6  ,AVG(g4)
04:07:30   7  FROM stk16
04:07:30   8  GROUP BY tkr,trend,gatt
04:07:30   9  ORDER BY tkr,trend,gatt
04:07:30  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G4)
------- ---------- --- ---------- ----------
SPY		-1 nup	     1962 -1.3954969
SPY		-1 up	     1727 1.86850898
SPY		-1	       12
SPY		 1 nup	     2544 -1.1593966
SPY		 1 up	     1891 1.29922263

Elapsed: 00:00:00.02
04:07:30 SQL> 
04:07:30 SQL> -- Now I derive goodness attributes:
04:07:30 SQL> 
04:07:30 SQL> DROP TABLE stk_ms;

Table dropped.

Elapsed: 00:00:00.13
04:07:31 SQL> CREATE TABLE stk_ms COMPRESS AS
04:07:31   2  SELECT
04:07:31   3  tkr
04:07:31   4  ,ydate
04:07:31   5  ,tkrdate
04:07:31   6  ,trend
04:07:31   7  ,g4
04:07:31   8  ,gatt
04:07:31   9  ,gattn
04:07:31  10  -- I want to SUM() over 4 years worth of data:
04:07:31  11  ,SUM(g4)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 24*365*4 PRECEDING AND CURRENT ROW)g00
04:07:31  12  ,SUM(g4)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 24*365*4 PRECEDING AND CURRENT ROW)g01
04:07:31  13  ,SUM(g4)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 24*365*4 PRECEDING AND CURRENT ROW)g02
04:07:31  14  ,SUM(g4)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 24*365*4 PRECEDING AND CURRENT ROW)g03
04:07:31  15  ,SUM(g4)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 24*365*4 PRECEDING AND CURRENT ROW)g04
04:07:31  16  ,SUM(g4)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 24*365*4 PRECEDING AND CURRENT ROW)g05
04:07:31  17  ,SUM(g4)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 24*365*4 PRECEDING AND CURRENT ROW)g06
04:07:31  18  ,SUM(g4)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 24*365*4 PRECEDING AND CURRENT ROW)g07
04:07:31  19  ,SUM(g4)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 24*365*4 PRECEDING AND CURRENT ROW)g08
04:07:31  20  ,SUM(g4)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 24*365*4 PRECEDING AND CURRENT ROW)g09
04:07:31  21  ,SUM(g4)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 24*365*4 PRECEDING AND CURRENT ROW)g10
04:07:31  22  ,SUM(g4)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 24*365*4 PRECEDING AND CURRENT ROW)g11
04:07:31  23  ,SUM(g4)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 24*365*4 PRECEDING AND CURRENT ROW)g12
04:07:31  24  ,SUM(g4)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 24*365*4 PRECEDING AND CURRENT ROW)g13
04:07:31  25  ,SUM(g4)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 24*365*4 PRECEDING AND CURRENT ROW)g14
04:07:31  26  ,SUM(g4)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 24*365*4 PRECEDING AND CURRENT ROW)g15
04:07:31  27  ,SUM(g4)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 24*365*4 PRECEDING AND CURRENT ROW)g16
04:07:31  28  ,SUM(g4)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 24*365*4 PRECEDING AND CURRENT ROW)g17
04:07:31  29  ,SUM(g4)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 24*365*4 PRECEDING AND CURRENT ROW)g18
04:07:31  30  ,SUM(g4)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 24*365*4 PRECEDING AND CURRENT ROW)g19
04:07:31  31  ,SUM(g4)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 24*365*4 PRECEDING AND CURRENT ROW)g20
04:07:31  32  ,SUM(g4)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 24*365*4 PRECEDING AND CURRENT ROW)g21
04:07:31  33  ,SUM(g4)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 24*365*4 PRECEDING AND CURRENT ROW)g22
04:07:31  34  ,SUM(g4)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 24*365*4 PRECEDING AND CURRENT ROW)g23
04:07:31  35  ,SUM(g4)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 24*365*4 PRECEDING AND CURRENT ROW)g24
04:07:31  36  ,SUM(g4)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 24*365*4 PRECEDING AND CURRENT ROW)g25
04:07:31  37  ,SUM(g4)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 24*365*4 PRECEDING AND CURRENT ROW)g26
04:07:31  38  -- att26 is trend which is a powerful attribute so I derive 3 more goodness attributes from trend:
04:07:31  39  ,SUM(g4)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 24*365/1 PRECEDING AND CURRENT ROW)g27
04:07:31  40  ,SUM(g4)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 24*365/2 PRECEDING AND CURRENT ROW)g28
04:07:31  41  ,SUM(g4)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 24*365/4 PRECEDING AND CURRENT ROW)g29
04:07:31  42  FROM stk16
04:07:31  43  /

Table created.

Elapsed: 00:00:02.76
04:07:33 SQL> 
04:07:33 SQL> -- rpt
04:07:33 SQL> 
04:07:33 SQL> SELECT
04:07:33   2  tkr
04:07:33   3  ,trend
04:07:33   4  ,gatt
04:07:33   5  ,COUNT(tkr)
04:07:33   6  ,AVG(g4)
04:07:33   7  FROM stk_ms
04:07:33   8  GROUP BY tkr,trend,gatt
04:07:33   9  ORDER BY tkr,trend,gatt
04:07:33  10  /

TKR	     TREND GAT COUNT(TKR)    AVG(G4)
------- ---------- --- ---------- ----------
SPY		-1 nup	     1962 -1.3954969
SPY		-1 up	     1727 1.86850898
SPY		-1	       12
SPY		 1 nup	     2544 -1.1593966
SPY		 1 up	     1891 1.29922263

Elapsed: 00:00:00.03
04:07:33 SQL> 
04:07:33 SQL> SELECT
04:07:33   2  tkr
04:07:33   3  ,COUNT(tkr)
04:07:33   4  ,MIN(ydate),MAX(ydate)
04:07:33   5  FROM stk_ms
04:07:33   6  GROUP BY tkr
04:07:33   7  /

TKR	COUNT(TKR) MIN(YDATE)	       MAX(YDATE)
------- ---------- ------------------- -------------------
SPY	      8136 2006-08-09 16:00:01 2011-01-05 00:00:00

Elapsed: 00:00:00.01
04:07:33 SQL> 
04:07:33 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
