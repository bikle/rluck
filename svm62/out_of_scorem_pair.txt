
SQL*Plus: Release 11.2.0.1.0 Production on Sat Jan 8 20:11:58 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

20:11:59 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
20:11:59 SQL> 20:11:59 SQL> @score1_5min.sql	      2010-10-21 09:10:01 aud_usd
20:11:59 SQL> --
20:11:59 SQL> -- score1_5min.sql
20:11:59 SQL> --
20:11:59 SQL> 
20:11:59 SQL> -- Demo:
20:11:59 SQL> -- @score1_5min.sql 2010-12-31 20:45:01 aud_usd
20:11:59 SQL> 
20:11:59 SQL> CREATE OR REPLACE VIEW sme AS
20:11:59   2  SELECT
20:11:59   3  prdate
20:11:59   4  ,NULL gatt
20:11:59   5  ,g00
20:11:59   6  ,g01
20:11:59   7  ,g02
20:11:59   8  ,g03
20:11:59   9  ,g04
20:11:59  10  ,g05
20:11:59  11  ,g06
20:11:59  12  ,g07
20:11:59  13  ,g08
20:11:59  14  ,g09
20:11:59  15  ,g10
20:11:59  16  ,g11
20:11:59  17  ,g12
20:11:59  18  ,g13
20:11:59  19  ,g14
20:11:59  20  ,g15
20:11:59  21  ,g16
20:11:59  22  ,g17
20:11:59  23  ,g18
20:11:59  24  ,g19
20:11:59  25  ,g20
20:11:59  26  ,g21
20:11:59  27  ,g22
20:11:59  28  ,g23
20:11:59  29  ,g24
20:11:59  30  ,g25
20:11:59  31  ,g26
20:11:59  32  ,g27
20:11:59  33  ,g28
20:11:59  34  ,g29
20:11:59  35  ,g30
20:11:59  36  ,g31
20:11:59  37  ,g32
20:11:59  38  ,g33
20:11:59  39  ,g34
20:11:59  40  ,g35
20:11:59  41  ,g36
20:11:59  42  ,g37
20:11:59  43  ,g38
20:11:59  44  ,g39
20:11:59  45  ,g40
20:11:59  46  ,g41
20:11:59  47  FROM modsrc
20:11:59  48  WHERE ydate = '&1'||' '||'&2'
20:11:59  49  AND pair = '&3'
20:11:59  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-10-21'||' '||'09:10:01'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.05
20:11:59 SQL> 
20:11:59 SQL> -- rpt
20:11:59 SQL> -- We should see just 1 row:
20:11:59 SQL> 
20:11:59 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.02
20:11:59 SQL> 
20:11:59 SQL> -- Build the model:
20:11:59 SQL> CREATE OR REPLACE VIEW bme AS
20:11:59   2  SELECT
20:11:59   3  prdate
20:11:59   4  ,gatt
20:11:59   5  ,g00
20:11:59   6  ,g01
20:11:59   7  ,g02
20:11:59   8  ,g03
20:11:59   9  ,g04
20:11:59  10  ,g05
20:11:59  11  ,g06
20:11:59  12  ,g07
20:11:59  13  ,g08
20:11:59  14  ,g09
20:11:59  15  ,g10
20:11:59  16  ,g11
20:11:59  17  ,g12
20:11:59  18  ,g13
20:11:59  19  ,g14
20:11:59  20  ,g15
20:11:59  21  ,g16
20:11:59  22  ,g17
20:11:59  23  ,g18
20:11:59  24  ,g19
20:11:59  25  ,g20
20:11:59  26  ,g21
20:11:59  27  ,g22
20:11:59  28  ,g23
20:11:59  29  ,g24
20:11:59  30  ,g25
20:11:59  31  ,g26
20:11:59  32  ,g27
20:11:59  33  ,g28
20:11:59  34  ,g29
20:11:59  35  ,g30
20:11:59  36  ,g31
20:11:59  37  ,g32
20:11:59  38  ,g33
20:11:59  39  ,g34
20:11:59  40  ,g35
20:11:59  41  ,g36
20:11:59  42  ,g37
20:11:59  43  ,g38
20:11:59  44  ,g39
20:11:59  45  ,g40
20:11:59  46  ,g41
20:11:59  47  FROM modsrc
20:11:59  48  WHERE gatt IN('nup','up')
20:11:59  49  -- Use only rows which are older than 1 day:
20:11:59  50  AND 1+ydate < '&1'||' '||'&2'
20:11:59  51  AND pair = '&3'
20:11:59  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-10-21'||' '||'09:10:01'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:11:59 SQL> 
20:11:59 SQL> -- rpt
20:11:59 SQL> 
20:11:59 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt;

GAT COUNT(PRDATE)
--- -------------
nup	     1766
up	     1293

Elapsed: 00:00:00.02
20:11:59 SQL> 
20:11:59 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-10-20 09:05:01

Elapsed: 00:00:00.01
20:11:59 SQL> 
20:11:59 SQL> -- Now build model from bme and score sme
20:11:59 SQL> @score1.sql gatt
20:11:59 SQL> --
20:11:59 SQL> -- score1.sql
20:11:59 SQL> --
20:11:59 SQL> 
20:11:59 SQL> -- I use this script to send 5 params to score.sql
20:11:59 SQL> -- which does the heavy lifting of creating an SVM model.
20:11:59 SQL> -- Then at the very end of this script I use the model
20:11:59 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:11:59 SQL> 
20:11:59 SQL> -- I call this script from 2 other scripts:
20:11:59 SQL> -- score1_5min.sql
20:11:59 SQL> -- score1_5min_gattn.sql
20:11:59 SQL> 
20:11:59 SQL> -- The 1st param is the name of the target attribute.
20:11:59 SQL> -- I like to call my target attributes either gatt or gattn.
20:11:59 SQL> 
20:11:59 SQL> -- Demo:
20:11:59 SQL> -- @score1.sql 'gatt'
20:11:59 SQL> -- @score1.sql 'gattn'
20:11:59 SQL> 
20:11:59 SQL> -- Now, I fill up svmc_apply_prep.
20:11:59 SQL> -- I use same model_name used in score.sql
20:11:59 SQL> DEFINE model_name = 'svmfx101'
20:11:59 SQL> DEFINE bldtable	= 'bme'
20:11:59 SQL> DEFINE scoretable = 'sme'
20:11:59 SQL> DEFINE case_id	= 'prdate'
20:11:59 SQL> -- Demo:
20:11:59 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:11:59 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:11:59 SQL> --
20:11:59 SQL> -- score.sql
20:11:59 SQL> --
20:11:59 SQL> 
20:11:59 SQL> -- usage: score.sql
20:11:59 SQL> 
20:11:59 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:11:59 SQL> 
20:11:59 SQL> -- DEFINE target	   = 'gatt'
20:11:59 SQL> -- DEFINE model_name = 'svmfx101'
20:11:59 SQL> -- DEFINE bldtable   = 'bme'
20:11:59 SQL> -- DEFINE scoretable = 'sme'
20:11:59 SQL> -- DEFINE case_id    = 'prdate'
20:11:59 SQL> 
20:11:59 SQL> DEFINE target	= '&1'
20:11:59 SQL> DEFINE model_name = '&2'
20:11:59 SQL> DEFINE bldtable	= '&3'
20:11:59 SQL> DEFINE scoretable = '&4'
20:11:59 SQL> DEFINE case_id	= '&5'
20:11:59 SQL> 
20:11:59 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:11:59 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:11:59 SQL> 
20:11:59 SQL> -- Builds an SVM model using pl/sql.
20:11:59 SQL> 
20:11:59 SQL> -----------------------------------------------------------------------
20:11:59 SQL> --			    BUILD THE MODEL
20:11:59 SQL> -----------------------------------------------------------------------
20:11:59 SQL> 
20:11:59 SQL> -- Cleanup old build data preparation objects for repeat runs
20:11:59 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.00
20:11:59 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:11:59 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:11:59 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.01
20:11:59 SQL> 
20:11:59 SQL> 
20:11:59 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:11:59 SQL> --
20:11:59 SQL> -- DROP	TABLE svmc_settings ;
20:11:59 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:11:59 SQL> -- DELETE svmc_settings;
20:11:59 SQL> 
20:11:59 SQL> -- The default classification algorithm is Naive Bayes. So override
20:11:59 SQL> -- this choice to SVM using a settings table.
20:11:59 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:11:59 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:11:59 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:11:59 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:11:59 SQL> -- models.
20:11:59 SQL> --
20:11:59 SQL> 
20:11:59 SQL> -- Do this once and then comment it out.
20:11:59 SQL> -- That makes script go faster.
20:11:59 SQL> -- BEGIN
20:11:59 SQL> -- -- Populate settings table
20:11:59 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:11:59 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:11:59 SQL> --
20:11:59 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:11:59 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:11:59 SQL> --
20:11:59 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:11:59 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:11:59 SQL> --   COMMIT;
20:11:59 SQL> -- END;
20:11:59 SQL> -- /
20:11:59 SQL> 
20:11:59 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:11:59 SQL> 
20:11:59 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:11:59   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:11:59   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:11:59 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:11:59   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:11:59   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:11:59 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:11:59   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:11:59   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:11:59 SQL> 
20:11:59 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:11:59   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:11:59   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:11:59 SQL> 
20:11:59 SQL> --------------------------------
20:11:59 SQL> -- PREPARE BUILD (TRAINING) DATA
20:11:59 SQL> --
20:11:59 SQL> 
20:11:59 SQL> -- 1. Missing Value treatment for all Predictors and
20:11:59 SQL> -- 2. Outlier Treatment and
20:11:59 SQL> -- 3. Normalization are performed below.
20:11:59 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:11:59 SQL> --    normalized here.
20:11:59 SQL> 
20:11:59 SQL> BEGIN
20:11:59   2  	-- Perform missing value treatment for all predictors
20:11:59   3  	-- create miss tables
20:11:59   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:11:59   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:11:59   6  
20:11:59   7  	-- populate miss tables
20:11:59   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:11:59   9  	  miss_table_name => 'svmc_miss_num',
20:11:59  10  	  data_table_name => '&bldtable',
20:11:59  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:11:59  12  
20:11:59  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:11:59  14  	  miss_table_name => 'svmc_miss_cat',
20:11:59  15  	  data_table_name => '&bldtable',
20:11:59  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:11:59  17  
20:11:59  18  	-- xform input data to replace missing values
20:11:59  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:11:59  20  	  miss_table_name => 'svmc_miss_num',
20:11:59  21  	  data_table_name => '&bldtable',
20:11:59  22  	  xform_view_name => 'xformed_build_miss_num');
20:11:59  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:11:59  24  	  miss_table_name => 'svmc_miss_cat',
20:11:59  25  	  data_table_name => '&bldtable',
20:11:59  26  	  xform_view_name => 'xformed_build_miss_cat');
20:11:59  27  
20:11:59  28  	-- Perform outlier treatment.
20:11:59  29  	-- create clip table
20:11:59  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:11:59  31  
20:11:59  32  	-- populate clip table
20:11:59  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:11:59  34  	  clip_table_name => 'svmc_clip',
20:11:59  35  	  data_table_name => '&bldtable',
20:11:59  36  	  tail_frac	  => 0.025,
20:11:59  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:11:59  38  
20:11:59  39  	-- xform input data to winsorized data
20:11:59  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:11:59  41  	  clip_table_name => 'svmc_clip',
20:11:59  42  	  data_table_name => '&bldtable',
20:11:59  43  	  xform_view_name => 'svmc_winsor');
20:11:59  44  
20:11:59  45  	-- create normalization table
20:11:59  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:11:59  47  
20:11:59  48  	-- populate normalization table based on winsorized data
20:11:59  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:11:59  50  	  norm_table_name => 'svmc_norm',
20:11:59  51  	  data_table_name => 'svmc_winsor',
20:11:59  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:11:59  53  
20:11:59  54  	-- normalize the original data
20:11:59  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:11:59  56  	  norm_table_name => 'svmc_norm',
20:11:59  57  	  data_table_name => '&bldtable',
20:11:59  58  	  xform_view_name => 'svmc_build_prep');
20:11:59  59  END;
20:11:59  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.13
20:12:00 SQL> 
20:12:00 SQL> ---------------------
20:12:00 SQL> -- CREATE A NEW MODEL
20:12:00 SQL> --
20:12:00 SQL> -- Cleanup old model with the same name for repeat runs
20:12:00 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:12:00   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:12:00   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.22
20:12:01 SQL> 
20:12:01 SQL> -- Build a new SVM Model
20:12:01 SQL> BEGIN
20:12:01   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:12:01   3  	  model_name	      => '&model_name',
20:12:01   4  	  mining_function     => dbms_data_mining.classification,
20:12:01   5  	  data_table_name     => 'svmc_build_prep',
20:12:01   6  	  case_id_column_name => '&case_id',
20:12:01   7  	  target_column_name  => '&target',
20:12:01   8  	  settings_table_name => 'svmc_settings');
20:12:01   9  END;
20:12:01  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:02.81
20:12:04 SQL> 
20:12:04 SQL> -----------------------------------------------------------------------
20:12:04 SQL> --			       APPLY/score THE MODEL
20:12:04 SQL> -----------------------------------------------------------------------
20:12:04 SQL> 
20:12:04 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:12:04 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:12:04   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:12:04   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:12:04 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:12:04   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:12:04   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:12:04 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:12:04   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:12:04   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:12:04 SQL> -----------------------
20:12:04 SQL> -- PREPARE SCORING DATA
20:12:04 SQL> --
20:12:04 SQL> -- If the data for model creation has been prepared, then the data
20:12:04 SQL> -- to be scored using the model must be prepared in the same manner
20:12:04 SQL> -- in order to obtain meaningful results.
20:12:04 SQL> --
20:12:04 SQL> -- 1. Missing Value treatment for all Predictors and
20:12:04 SQL> -- 2. Normalization
20:12:04 SQL> -- No outlier treatment will be performed during test and apply. The
20:12:04 SQL> -- normalization step is sufficient, since the normalization parameters
20:12:04 SQL> -- already capture the effects of outlier treatment done with build data.
20:12:04 SQL> --
20:12:04 SQL> BEGIN
20:12:04   2  	-- Xform Test data to replace missing values
20:12:04   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:12:04   4  	  miss_table_name => 'svmc_miss_num',
20:12:04   5  	  data_table_name => '&scoretable',
20:12:04   6  	  xform_view_name => 'xformed_apply_miss_num');
20:12:04   7  
20:12:04   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:12:04   9  	  miss_table_name => 'svmc_miss_cat',
20:12:04  10  	  data_table_name => '&scoretable',
20:12:04  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:12:04  12  
20:12:04  13  	-- Normalize the data to be scored
20:12:04  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:12:04  15  	  norm_table_name => 'svmc_norm',
20:12:04  16  	  data_table_name => '&scoretable',
20:12:04  17  	  xform_view_name => 'svmc_apply_prep');
20:12:04  18  END;
20:12:04  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.17
20:12:04 SQL> 
20:12:04 SQL> -- Maybe I already collected a score for this prdate.
20:12:04 SQL> -- DELETE it if I did:
20:12:04 SQL> DELETE svm62scores
20:12:04   2  WHERE score > 0
20:12:04   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:12:04   4  -- I need to supply the target attribute name:
20:12:04   5  AND targ = '&1'
20:12:04   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gatt'

0 rows deleted.

Elapsed: 00:00:00.02
20:12:04 SQL> 
20:12:04 SQL> -- We do a drumroll here:
20:12:04 SQL> 
20:12:04 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:12:04   2  SELECT
20:12:04   3  prdate
20:12:04   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:12:04   5  ,sysdate
20:12:04   6  ,SUBSTR(prdate,1,7)pair
20:12:04   7  ,SUBSTR(prdate,-19)ydate
20:12:04   8  ,'&1'
20:12:04   9  FROM svmc_apply_prep
20:12:04  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gatt'

1 row created.

Elapsed: 00:00:00.04
20:12:04 SQL> @score1_5min.sql	      2010-11-16 10:15:01 aud_usd
20:12:04 SQL> --
20:12:04 SQL> -- score1_5min.sql
20:12:04 SQL> --
20:12:04 SQL> 
20:12:04 SQL> -- Demo:
20:12:04 SQL> -- @score1_5min.sql 2010-12-31 20:45:01 aud_usd
20:12:04 SQL> 
20:12:04 SQL> CREATE OR REPLACE VIEW sme AS
20:12:04   2  SELECT
20:12:04   3  prdate
20:12:04   4  ,NULL gatt
20:12:04   5  ,g00
20:12:04   6  ,g01
20:12:04   7  ,g02
20:12:04   8  ,g03
20:12:04   9  ,g04
20:12:04  10  ,g05
20:12:04  11  ,g06
20:12:04  12  ,g07
20:12:04  13  ,g08
20:12:04  14  ,g09
20:12:04  15  ,g10
20:12:04  16  ,g11
20:12:04  17  ,g12
20:12:04  18  ,g13
20:12:04  19  ,g14
20:12:04  20  ,g15
20:12:04  21  ,g16
20:12:04  22  ,g17
20:12:04  23  ,g18
20:12:04  24  ,g19
20:12:04  25  ,g20
20:12:04  26  ,g21
20:12:04  27  ,g22
20:12:04  28  ,g23
20:12:04  29  ,g24
20:12:04  30  ,g25
20:12:04  31  ,g26
20:12:04  32  ,g27
20:12:04  33  ,g28
20:12:04  34  ,g29
20:12:04  35  ,g30
20:12:04  36  ,g31
20:12:04  37  ,g32
20:12:04  38  ,g33
20:12:04  39  ,g34
20:12:04  40  ,g35
20:12:04  41  ,g36
20:12:04  42  ,g37
20:12:04  43  ,g38
20:12:04  44  ,g39
20:12:04  45  ,g40
20:12:04  46  ,g41
20:12:04  47  FROM modsrc
20:12:04  48  WHERE ydate = '&1'||' '||'&2'
20:12:04  49  AND pair = '&3'
20:12:04  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-11-16'||' '||'10:15:01'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:12:04 SQL> 
20:12:04 SQL> -- rpt
20:12:04 SQL> -- We should see just 1 row:
20:12:04 SQL> 
20:12:04 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.02
20:12:04 SQL> 
20:12:04 SQL> -- Build the model:
20:12:04 SQL> CREATE OR REPLACE VIEW bme AS
20:12:04   2  SELECT
20:12:04   3  prdate
20:12:04   4  ,gatt
20:12:04   5  ,g00
20:12:04   6  ,g01
20:12:04   7  ,g02
20:12:04   8  ,g03
20:12:04   9  ,g04
20:12:04  10  ,g05
20:12:04  11  ,g06
20:12:04  12  ,g07
20:12:04  13  ,g08
20:12:04  14  ,g09
20:12:04  15  ,g10
20:12:04  16  ,g11
20:12:04  17  ,g12
20:12:04  18  ,g13
20:12:04  19  ,g14
20:12:04  20  ,g15
20:12:04  21  ,g16
20:12:04  22  ,g17
20:12:04  23  ,g18
20:12:04  24  ,g19
20:12:04  25  ,g20
20:12:04  26  ,g21
20:12:04  27  ,g22
20:12:04  28  ,g23
20:12:04  29  ,g24
20:12:04  30  ,g25
20:12:04  31  ,g26
20:12:04  32  ,g27
20:12:04  33  ,g28
20:12:04  34  ,g29
20:12:04  35  ,g30
20:12:04  36  ,g31
20:12:04  37  ,g32
20:12:04  38  ,g33
20:12:04  39  ,g34
20:12:04  40  ,g35
20:12:04  41  ,g36
20:12:04  42  ,g37
20:12:04  43  ,g38
20:12:04  44  ,g39
20:12:04  45  ,g40
20:12:04  46  ,g41
20:12:04  47  FROM modsrc
20:12:04  48  WHERE gatt IN('nup','up')
20:12:04  49  -- Use only rows which are older than 1 day:
20:12:04  50  AND 1+ydate < '&1'||' '||'&2'
20:12:04  51  AND pair = '&3'
20:12:04  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-11-16'||' '||'10:15:01'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.05
20:12:04 SQL> 
20:12:04 SQL> -- rpt
20:12:04 SQL> 
20:12:04 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt;

GAT COUNT(PRDATE)
--- -------------
nup	     5070
up	     3234

Elapsed: 00:00:00.02
20:12:04 SQL> 
20:12:04 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-11-15 10:10:01

Elapsed: 00:00:00.02
20:12:04 SQL> 
20:12:04 SQL> -- Now build model from bme and score sme
20:12:04 SQL> @score1.sql gatt
20:12:04 SQL> --
20:12:04 SQL> -- score1.sql
20:12:04 SQL> --
20:12:04 SQL> 
20:12:04 SQL> -- I use this script to send 5 params to score.sql
20:12:04 SQL> -- which does the heavy lifting of creating an SVM model.
20:12:04 SQL> -- Then at the very end of this script I use the model
20:12:04 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:12:04 SQL> 
20:12:04 SQL> -- I call this script from 2 other scripts:
20:12:04 SQL> -- score1_5min.sql
20:12:04 SQL> -- score1_5min_gattn.sql
20:12:04 SQL> 
20:12:04 SQL> -- The 1st param is the name of the target attribute.
20:12:04 SQL> -- I like to call my target attributes either gatt or gattn.
20:12:04 SQL> 
20:12:04 SQL> -- Demo:
20:12:04 SQL> -- @score1.sql 'gatt'
20:12:04 SQL> -- @score1.sql 'gattn'
20:12:04 SQL> 
20:12:04 SQL> -- Now, I fill up svmc_apply_prep.
20:12:04 SQL> -- I use same model_name used in score.sql
20:12:04 SQL> DEFINE model_name = 'svmfx101'
20:12:04 SQL> DEFINE bldtable	= 'bme'
20:12:04 SQL> DEFINE scoretable = 'sme'
20:12:04 SQL> DEFINE case_id	= 'prdate'
20:12:04 SQL> -- Demo:
20:12:04 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:12:04 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:12:04 SQL> --
20:12:04 SQL> -- score.sql
20:12:04 SQL> --
20:12:04 SQL> 
20:12:04 SQL> -- usage: score.sql
20:12:04 SQL> 
20:12:04 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:12:04 SQL> 
20:12:04 SQL> -- DEFINE target	   = 'gatt'
20:12:04 SQL> -- DEFINE model_name = 'svmfx101'
20:12:04 SQL> -- DEFINE bldtable   = 'bme'
20:12:04 SQL> -- DEFINE scoretable = 'sme'
20:12:04 SQL> -- DEFINE case_id    = 'prdate'
20:12:04 SQL> 
20:12:04 SQL> DEFINE target	= '&1'
20:12:04 SQL> DEFINE model_name = '&2'
20:12:04 SQL> DEFINE bldtable	= '&3'
20:12:04 SQL> DEFINE scoretable = '&4'
20:12:04 SQL> DEFINE case_id	= '&5'
20:12:04 SQL> 
20:12:04 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:12:04 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:12:04 SQL> 
20:12:04 SQL> -- Builds an SVM model using pl/sql.
20:12:04 SQL> 
20:12:04 SQL> -----------------------------------------------------------------------
20:12:04 SQL> --			    BUILD THE MODEL
20:12:04 SQL> -----------------------------------------------------------------------
20:12:04 SQL> 
20:12:04 SQL> -- Cleanup old build data preparation objects for repeat runs
20:12:04 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.01
20:12:04 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:12:04 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:12:04 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.00
20:12:04 SQL> 
20:12:04 SQL> 
20:12:04 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:12:04 SQL> --
20:12:04 SQL> -- DROP	TABLE svmc_settings ;
20:12:04 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:12:04 SQL> -- DELETE svmc_settings;
20:12:04 SQL> 
20:12:04 SQL> -- The default classification algorithm is Naive Bayes. So override
20:12:04 SQL> -- this choice to SVM using a settings table.
20:12:04 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:12:04 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:12:04 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:12:04 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:12:04 SQL> -- models.
20:12:04 SQL> --
20:12:04 SQL> 
20:12:04 SQL> -- Do this once and then comment it out.
20:12:04 SQL> -- That makes script go faster.
20:12:04 SQL> -- BEGIN
20:12:04 SQL> -- -- Populate settings table
20:12:04 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:12:04 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:12:04 SQL> --
20:12:04 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:12:04 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:12:04 SQL> --
20:12:04 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:12:04 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:12:04 SQL> --   COMMIT;
20:12:04 SQL> -- END;
20:12:04 SQL> -- /
20:12:04 SQL> 
20:12:04 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:12:04 SQL> 
20:12:04 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:12:04   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:12:04   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
20:12:05 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:12:05   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:12:05   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:12:05 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:12:05   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:12:05   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:12:05 SQL> 
20:12:05 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:12:05   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:12:05   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:12:05 SQL> 
20:12:05 SQL> --------------------------------
20:12:05 SQL> -- PREPARE BUILD (TRAINING) DATA
20:12:05 SQL> --
20:12:05 SQL> 
20:12:05 SQL> -- 1. Missing Value treatment for all Predictors and
20:12:05 SQL> -- 2. Outlier Treatment and
20:12:05 SQL> -- 3. Normalization are performed below.
20:12:05 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:12:05 SQL> --    normalized here.
20:12:05 SQL> 
20:12:05 SQL> BEGIN
20:12:05   2  	-- Perform missing value treatment for all predictors
20:12:05   3  	-- create miss tables
20:12:05   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:12:05   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:12:05   6  
20:12:05   7  	-- populate miss tables
20:12:05   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:12:05   9  	  miss_table_name => 'svmc_miss_num',
20:12:05  10  	  data_table_name => '&bldtable',
20:12:05  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:12:05  12  
20:12:05  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:12:05  14  	  miss_table_name => 'svmc_miss_cat',
20:12:05  15  	  data_table_name => '&bldtable',
20:12:05  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:12:05  17  
20:12:05  18  	-- xform input data to replace missing values
20:12:05  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:12:05  20  	  miss_table_name => 'svmc_miss_num',
20:12:05  21  	  data_table_name => '&bldtable',
20:12:05  22  	  xform_view_name => 'xformed_build_miss_num');
20:12:05  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:12:05  24  	  miss_table_name => 'svmc_miss_cat',
20:12:05  25  	  data_table_name => '&bldtable',
20:12:05  26  	  xform_view_name => 'xformed_build_miss_cat');
20:12:05  27  
20:12:05  28  	-- Perform outlier treatment.
20:12:05  29  	-- create clip table
20:12:05  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:12:05  31  
20:12:05  32  	-- populate clip table
20:12:05  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:12:05  34  	  clip_table_name => 'svmc_clip',
20:12:05  35  	  data_table_name => '&bldtable',
20:12:05  36  	  tail_frac	  => 0.025,
20:12:05  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:12:05  38  
20:12:05  39  	-- xform input data to winsorized data
20:12:05  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:12:05  41  	  clip_table_name => 'svmc_clip',
20:12:05  42  	  data_table_name => '&bldtable',
20:12:05  43  	  xform_view_name => 'svmc_winsor');
20:12:05  44  
20:12:05  45  	-- create normalization table
20:12:05  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:12:05  47  
20:12:05  48  	-- populate normalization table based on winsorized data
20:12:05  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:12:05  50  	  norm_table_name => 'svmc_norm',
20:12:05  51  	  data_table_name => 'svmc_winsor',
20:12:05  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:12:05  53  
20:12:05  54  	-- normalize the original data
20:12:05  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:12:05  56  	  norm_table_name => 'svmc_norm',
20:12:05  57  	  data_table_name => '&bldtable',
20:12:05  58  	  xform_view_name => 'svmc_build_prep');
20:12:05  59  END;
20:12:05  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.55
20:12:06 SQL> 
20:12:06 SQL> ---------------------
20:12:06 SQL> -- CREATE A NEW MODEL
20:12:06 SQL> --
20:12:06 SQL> -- Cleanup old model with the same name for repeat runs
20:12:06 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:12:06   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:12:06   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.99
20:12:07 SQL> 
20:12:07 SQL> -- Build a new SVM Model
20:12:07 SQL> BEGIN
20:12:07   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:12:07   3  	  model_name	      => '&model_name',
20:12:07   4  	  mining_function     => dbms_data_mining.classification,
20:12:07   5  	  data_table_name     => 'svmc_build_prep',
20:12:07   6  	  case_id_column_name => '&case_id',
20:12:07   7  	  target_column_name  => '&target',
20:12:07   8  	  settings_table_name => 'svmc_settings');
20:12:07   9  END;
20:12:07  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:04.08
20:12:11 SQL> 
20:12:11 SQL> -----------------------------------------------------------------------
20:12:11 SQL> --			       APPLY/score THE MODEL
20:12:11 SQL> -----------------------------------------------------------------------
20:12:11 SQL> 
20:12:11 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:12:11 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:12:11   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:12:11   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:12:11 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:12:11   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:12:11   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:12:11 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:12:11   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:12:11   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:12:11 SQL> -----------------------
20:12:11 SQL> -- PREPARE SCORING DATA
20:12:11 SQL> --
20:12:11 SQL> -- If the data for model creation has been prepared, then the data
20:12:11 SQL> -- to be scored using the model must be prepared in the same manner
20:12:11 SQL> -- in order to obtain meaningful results.
20:12:11 SQL> --
20:12:11 SQL> -- 1. Missing Value treatment for all Predictors and
20:12:11 SQL> -- 2. Normalization
20:12:11 SQL> -- No outlier treatment will be performed during test and apply. The
20:12:11 SQL> -- normalization step is sufficient, since the normalization parameters
20:12:11 SQL> -- already capture the effects of outlier treatment done with build data.
20:12:11 SQL> --
20:12:11 SQL> BEGIN
20:12:11   2  	-- Xform Test data to replace missing values
20:12:11   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:12:11   4  	  miss_table_name => 'svmc_miss_num',
20:12:11   5  	  data_table_name => '&scoretable',
20:12:11   6  	  xform_view_name => 'xformed_apply_miss_num');
20:12:11   7  
20:12:11   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:12:11   9  	  miss_table_name => 'svmc_miss_cat',
20:12:11  10  	  data_table_name => '&scoretable',
20:12:11  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:12:11  12  
20:12:11  13  	-- Normalize the data to be scored
20:12:11  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:12:11  15  	  norm_table_name => 'svmc_norm',
20:12:11  16  	  data_table_name => '&scoretable',
20:12:11  17  	  xform_view_name => 'svmc_apply_prep');
20:12:11  18  END;
20:12:11  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.21
20:12:12 SQL> 
20:12:12 SQL> -- Maybe I already collected a score for this prdate.
20:12:12 SQL> -- DELETE it if I did:
20:12:12 SQL> DELETE svm62scores
20:12:12   2  WHERE score > 0
20:12:12   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:12:12   4  -- I need to supply the target attribute name:
20:12:12   5  AND targ = '&1'
20:12:12   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gatt'

0 rows deleted.

Elapsed: 00:00:00.02
20:12:12 SQL> 
20:12:12 SQL> -- We do a drumroll here:
20:12:12 SQL> 
20:12:12 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:12:12   2  SELECT
20:12:12   3  prdate
20:12:12   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:12:12   5  ,sysdate
20:12:12   6  ,SUBSTR(prdate,1,7)pair
20:12:12   7  ,SUBSTR(prdate,-19)ydate
20:12:12   8  ,'&1'
20:12:12   9  FROM svmc_apply_prep
20:12:12  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gatt'

1 row created.

Elapsed: 00:00:00.05
20:12:12 SQL> @score1_5min_gattn.sql	2010-12-28 08:45:00 aud_usd
20:12:12 SQL> --
20:12:12 SQL> -- score1_5min_gattn.sql
20:12:12 SQL> --
20:12:12 SQL> 
20:12:12 SQL> -- Demo:
20:12:12 SQL> -- @score1_5min_gattn.sql 2010-12-31 20:45:01 aud_usd
20:12:12 SQL> 
20:12:12 SQL> CREATE OR REPLACE VIEW sme AS
20:12:12   2  SELECT
20:12:12   3  prdate
20:12:12   4  ,NULL gattn
20:12:12   5  ,g00
20:12:12   6  ,g01
20:12:12   7  ,g02
20:12:12   8  ,g03
20:12:12   9  ,g04
20:12:12  10  ,g05
20:12:12  11  ,g06
20:12:12  12  ,g07
20:12:12  13  ,g08
20:12:12  14  ,g09
20:12:12  15  ,g10
20:12:12  16  ,g11
20:12:12  17  ,g12
20:12:12  18  ,g13
20:12:12  19  ,g14
20:12:12  20  ,g15
20:12:12  21  ,g16
20:12:12  22  ,g17
20:12:12  23  ,g18
20:12:12  24  ,g19
20:12:12  25  ,g20
20:12:12  26  ,g21
20:12:12  27  ,g22
20:12:12  28  ,g23
20:12:12  29  ,g24
20:12:12  30  ,g25
20:12:12  31  ,g26
20:12:12  32  ,g27
20:12:12  33  ,g28
20:12:12  34  ,g29
20:12:12  35  ,g30
20:12:12  36  ,g31
20:12:12  37  ,g32
20:12:12  38  ,g33
20:12:12  39  ,g34
20:12:12  40  ,g35
20:12:12  41  ,g36
20:12:12  42  ,g37
20:12:12  43  ,g38
20:12:12  44  ,g39
20:12:12  45  ,g40
20:12:12  46  ,g41
20:12:12  47  FROM modsrc
20:12:12  48  WHERE ydate = '&1'||' '||'&2'
20:12:12  49  AND pair = '&3'
20:12:12  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-12-28'||' '||'08:45:00'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.05
20:12:12 SQL> 
20:12:12 SQL> -- rpt
20:12:12 SQL> -- We should see just 1 row:
20:12:12 SQL> 
20:12:12 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.02
20:12:12 SQL> 
20:12:12 SQL> -- Build the model:
20:12:12 SQL> CREATE OR REPLACE VIEW bme AS
20:12:12   2  SELECT
20:12:12   3  prdate
20:12:12   4  ,gattn
20:12:12   5  ,g00
20:12:12   6  ,g01
20:12:12   7  ,g02
20:12:12   8  ,g03
20:12:12   9  ,g04
20:12:12  10  ,g05
20:12:12  11  ,g06
20:12:12  12  ,g07
20:12:12  13  ,g08
20:12:12  14  ,g09
20:12:12  15  ,g10
20:12:12  16  ,g11
20:12:12  17  ,g12
20:12:12  18  ,g13
20:12:12  19  ,g14
20:12:12  20  ,g15
20:12:12  21  ,g16
20:12:12  22  ,g17
20:12:12  23  ,g18
20:12:12  24  ,g19
20:12:12  25  ,g20
20:12:12  26  ,g21
20:12:12  27  ,g22
20:12:12  28  ,g23
20:12:12  29  ,g24
20:12:12  30  ,g25
20:12:12  31  ,g26
20:12:12  32  ,g27
20:12:12  33  ,g28
20:12:12  34  ,g29
20:12:12  35  ,g30
20:12:12  36  ,g31
20:12:12  37  ,g32
20:12:12  38  ,g33
20:12:12  39  ,g34
20:12:12  40  ,g35
20:12:12  41  ,g36
20:12:12  42  ,g37
20:12:12  43  ,g38
20:12:12  44  ,g39
20:12:12  45  ,g40
20:12:12  46  ,g41
20:12:12  47  FROM modsrc
20:12:12  48  WHERE gattn IN('nup','up')
20:12:12  49  -- Use only rows which are older than 1 day:
20:12:12  50  AND 1+ydate < '&1'||' '||'&2'
20:12:12  51  AND pair = '&3'
20:12:12  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-12-28'||' '||'08:45:00'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.05
20:12:12 SQL> 
20:12:12 SQL> -- rpt
20:12:12 SQL> 
20:12:12 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	    11107
up	     5712

Elapsed: 00:00:00.02
20:12:12 SQL> 
20:12:12 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-12-27 08:40:00

Elapsed: 00:00:00.01
20:12:12 SQL> 
20:12:12 SQL> -- Now build model from bme and score sme
20:12:12 SQL> @score1.sql gattn
20:12:12 SQL> --
20:12:12 SQL> -- score1.sql
20:12:12 SQL> --
20:12:12 SQL> 
20:12:12 SQL> -- I use this script to send 5 params to score.sql
20:12:12 SQL> -- which does the heavy lifting of creating an SVM model.
20:12:12 SQL> -- Then at the very end of this script I use the model
20:12:12 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:12:12 SQL> 
20:12:12 SQL> -- I call this script from 2 other scripts:
20:12:12 SQL> -- score1_5min.sql
20:12:12 SQL> -- score1_5min_gattn.sql
20:12:12 SQL> 
20:12:12 SQL> -- The 1st param is the name of the target attribute.
20:12:12 SQL> -- I like to call my target attributes either gatt or gattn.
20:12:12 SQL> 
20:12:12 SQL> -- Demo:
20:12:12 SQL> -- @score1.sql 'gatt'
20:12:12 SQL> -- @score1.sql 'gattn'
20:12:12 SQL> 
20:12:12 SQL> -- Now, I fill up svmc_apply_prep.
20:12:12 SQL> -- I use same model_name used in score.sql
20:12:12 SQL> DEFINE model_name = 'svmfx101'
20:12:12 SQL> DEFINE bldtable	= 'bme'
20:12:12 SQL> DEFINE scoretable = 'sme'
20:12:12 SQL> DEFINE case_id	= 'prdate'
20:12:12 SQL> -- Demo:
20:12:12 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:12:12 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:12:12 SQL> --
20:12:12 SQL> -- score.sql
20:12:12 SQL> --
20:12:12 SQL> 
20:12:12 SQL> -- usage: score.sql
20:12:12 SQL> 
20:12:12 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:12:12 SQL> 
20:12:12 SQL> -- DEFINE target	   = 'gatt'
20:12:12 SQL> -- DEFINE model_name = 'svmfx101'
20:12:12 SQL> -- DEFINE bldtable   = 'bme'
20:12:12 SQL> -- DEFINE scoretable = 'sme'
20:12:12 SQL> -- DEFINE case_id    = 'prdate'
20:12:12 SQL> 
20:12:12 SQL> DEFINE target	= '&1'
20:12:12 SQL> DEFINE model_name = '&2'
20:12:12 SQL> DEFINE bldtable	= '&3'
20:12:12 SQL> DEFINE scoretable = '&4'
20:12:12 SQL> DEFINE case_id	= '&5'
20:12:12 SQL> 
20:12:12 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:12:12 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:12:12 SQL> 
20:12:12 SQL> -- Builds an SVM model using pl/sql.
20:12:12 SQL> 
20:12:12 SQL> -----------------------------------------------------------------------
20:12:12 SQL> --			    BUILD THE MODEL
20:12:12 SQL> -----------------------------------------------------------------------
20:12:12 SQL> 
20:12:12 SQL> -- Cleanup old build data preparation objects for repeat runs
20:12:12 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.00
20:12:12 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:12:12 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:12:12 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.00
20:12:12 SQL> 
20:12:12 SQL> 
20:12:12 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:12:12 SQL> --
20:12:12 SQL> -- DROP	TABLE svmc_settings ;
20:12:12 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:12:12 SQL> -- DELETE svmc_settings;
20:12:12 SQL> 
20:12:12 SQL> -- The default classification algorithm is Naive Bayes. So override
20:12:12 SQL> -- this choice to SVM using a settings table.
20:12:12 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:12:12 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:12:12 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:12:12 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:12:12 SQL> -- models.
20:12:12 SQL> --
20:12:12 SQL> 
20:12:12 SQL> -- Do this once and then comment it out.
20:12:12 SQL> -- That makes script go faster.
20:12:12 SQL> -- BEGIN
20:12:12 SQL> -- -- Populate settings table
20:12:12 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:12:12 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:12:12 SQL> --
20:12:12 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:12:12 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:12:12 SQL> --
20:12:12 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:12:12 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:12:12 SQL> --   COMMIT;
20:12:12 SQL> -- END;
20:12:12 SQL> -- /
20:12:12 SQL> 
20:12:12 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:12:12 SQL> 
20:12:12 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:12:12   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:12:12   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:12:12 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:12:12   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:12:12   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:12:12 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:12:12   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:12:12   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:12:12 SQL> 
20:12:12 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:12:12   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:12:12   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:12:12 SQL> 
20:12:12 SQL> --------------------------------
20:12:12 SQL> -- PREPARE BUILD (TRAINING) DATA
20:12:12 SQL> --
20:12:12 SQL> 
20:12:12 SQL> -- 1. Missing Value treatment for all Predictors and
20:12:12 SQL> -- 2. Outlier Treatment and
20:12:12 SQL> -- 3. Normalization are performed below.
20:12:12 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:12:12 SQL> --    normalized here.
20:12:12 SQL> 
20:12:12 SQL> BEGIN
20:12:12   2  	-- Perform missing value treatment for all predictors
20:12:12   3  	-- create miss tables
20:12:12   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:12:12   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:12:12   6  
20:12:12   7  	-- populate miss tables
20:12:12   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:12:12   9  	  miss_table_name => 'svmc_miss_num',
20:12:12  10  	  data_table_name => '&bldtable',
20:12:12  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:12:12  12  
20:12:12  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:12:12  14  	  miss_table_name => 'svmc_miss_cat',
20:12:12  15  	  data_table_name => '&bldtable',
20:12:12  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:12:12  17  
20:12:12  18  	-- xform input data to replace missing values
20:12:12  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:12:12  20  	  miss_table_name => 'svmc_miss_num',
20:12:12  21  	  data_table_name => '&bldtable',
20:12:12  22  	  xform_view_name => 'xformed_build_miss_num');
20:12:12  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:12:12  24  	  miss_table_name => 'svmc_miss_cat',
20:12:12  25  	  data_table_name => '&bldtable',
20:12:12  26  	  xform_view_name => 'xformed_build_miss_cat');
20:12:12  27  
20:12:12  28  	-- Perform outlier treatment.
20:12:12  29  	-- create clip table
20:12:12  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:12:12  31  
20:12:12  32  	-- populate clip table
20:12:12  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:12:12  34  	  clip_table_name => 'svmc_clip',
20:12:12  35  	  data_table_name => '&bldtable',
20:12:12  36  	  tail_frac	  => 0.025,
20:12:12  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:12:12  38  
20:12:12  39  	-- xform input data to winsorized data
20:12:12  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:12:12  41  	  clip_table_name => 'svmc_clip',
20:12:12  42  	  data_table_name => '&bldtable',
20:12:12  43  	  xform_view_name => 'svmc_winsor');
20:12:12  44  
20:12:12  45  	-- create normalization table
20:12:12  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:12:12  47  
20:12:12  48  	-- populate normalization table based on winsorized data
20:12:12  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:12:12  50  	  norm_table_name => 'svmc_norm',
20:12:12  51  	  data_table_name => 'svmc_winsor',
20:12:12  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:12:12  53  
20:12:12  54  	-- normalize the original data
20:12:12  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:12:12  56  	  norm_table_name => 'svmc_norm',
20:12:12  57  	  data_table_name => '&bldtable',
20:12:12  58  	  xform_view_name => 'svmc_build_prep');
20:12:12  59  END;
20:12:12  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:02.19
20:12:14 SQL> 
20:12:14 SQL> ---------------------
20:12:14 SQL> -- CREATE A NEW MODEL
20:12:14 SQL> --
20:12:14 SQL> -- Cleanup old model with the same name for repeat runs
20:12:14 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:12:14   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:12:14   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.91
20:12:15 SQL> 
20:12:15 SQL> -- Build a new SVM Model
20:12:15 SQL> BEGIN
20:12:15   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:12:15   3  	  model_name	      => '&model_name',
20:12:15   4  	  mining_function     => dbms_data_mining.classification,
20:12:15   5  	  data_table_name     => 'svmc_build_prep',
20:12:15   6  	  case_id_column_name => '&case_id',
20:12:15   7  	  target_column_name  => '&target',
20:12:15   8  	  settings_table_name => 'svmc_settings');
20:12:15   9  END;
20:12:15  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:04.58
20:12:20 SQL> 
20:12:20 SQL> -----------------------------------------------------------------------
20:12:20 SQL> --			       APPLY/score THE MODEL
20:12:20 SQL> -----------------------------------------------------------------------
20:12:20 SQL> 
20:12:20 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:12:20 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:12:20   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:12:20   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.07
20:12:20 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:12:20   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:12:20   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.08
20:12:20 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:12:20   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:12:20   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
20:12:20 SQL> -----------------------
20:12:20 SQL> -- PREPARE SCORING DATA
20:12:20 SQL> --
20:12:20 SQL> -- If the data for model creation has been prepared, then the data
20:12:20 SQL> -- to be scored using the model must be prepared in the same manner
20:12:20 SQL> -- in order to obtain meaningful results.
20:12:20 SQL> --
20:12:20 SQL> -- 1. Missing Value treatment for all Predictors and
20:12:20 SQL> -- 2. Normalization
20:12:20 SQL> -- No outlier treatment will be performed during test and apply. The
20:12:20 SQL> -- normalization step is sufficient, since the normalization parameters
20:12:20 SQL> -- already capture the effects of outlier treatment done with build data.
20:12:20 SQL> --
20:12:20 SQL> BEGIN
20:12:20   2  	-- Xform Test data to replace missing values
20:12:20   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:12:20   4  	  miss_table_name => 'svmc_miss_num',
20:12:20   5  	  data_table_name => '&scoretable',
20:12:20   6  	  xform_view_name => 'xformed_apply_miss_num');
20:12:20   7  
20:12:20   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:12:20   9  	  miss_table_name => 'svmc_miss_cat',
20:12:20  10  	  data_table_name => '&scoretable',
20:12:20  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:12:20  12  
20:12:20  13  	-- Normalize the data to be scored
20:12:20  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:12:20  15  	  norm_table_name => 'svmc_norm',
20:12:20  16  	  data_table_name => '&scoretable',
20:12:20  17  	  xform_view_name => 'svmc_apply_prep');
20:12:20  18  END;
20:12:20  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.28
20:12:20 SQL> 
20:12:20 SQL> -- Maybe I already collected a score for this prdate.
20:12:20 SQL> -- DELETE it if I did:
20:12:20 SQL> DELETE svm62scores
20:12:20   2  WHERE score > 0
20:12:20   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:12:20   4  -- I need to supply the target attribute name:
20:12:20   5  AND targ = '&1'
20:12:20   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gattn'

0 rows deleted.

Elapsed: 00:00:00.00
20:12:20 SQL> 
20:12:20 SQL> -- We do a drumroll here:
20:12:20 SQL> 
20:12:20 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:12:20   2  SELECT
20:12:20   3  prdate
20:12:20   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:12:20   5  ,sysdate
20:12:20   6  ,SUBSTR(prdate,1,7)pair
20:12:20   7  ,SUBSTR(prdate,-19)ydate
20:12:20   8  ,'&1'
20:12:20   9  FROM svmc_apply_prep
20:12:20  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gattn'

1 row created.

Elapsed: 00:00:00.05
20:12:20 SQL> @score1_5min.sql	      2010-11-29 16:35:01 aud_usd
20:12:20 SQL> --
20:12:20 SQL> -- score1_5min.sql
20:12:20 SQL> --
20:12:20 SQL> 
20:12:20 SQL> -- Demo:
20:12:20 SQL> -- @score1_5min.sql 2010-12-31 20:45:01 aud_usd
20:12:20 SQL> 
20:12:20 SQL> CREATE OR REPLACE VIEW sme AS
20:12:20   2  SELECT
20:12:20   3  prdate
20:12:20   4  ,NULL gatt
20:12:20   5  ,g00
20:12:20   6  ,g01
20:12:20   7  ,g02
20:12:20   8  ,g03
20:12:20   9  ,g04
20:12:20  10  ,g05
20:12:20  11  ,g06
20:12:20  12  ,g07
20:12:20  13  ,g08
20:12:20  14  ,g09
20:12:20  15  ,g10
20:12:20  16  ,g11
20:12:20  17  ,g12
20:12:20  18  ,g13
20:12:20  19  ,g14
20:12:20  20  ,g15
20:12:20  21  ,g16
20:12:20  22  ,g17
20:12:20  23  ,g18
20:12:20  24  ,g19
20:12:20  25  ,g20
20:12:20  26  ,g21
20:12:20  27  ,g22
20:12:20  28  ,g23
20:12:20  29  ,g24
20:12:20  30  ,g25
20:12:20  31  ,g26
20:12:20  32  ,g27
20:12:20  33  ,g28
20:12:20  34  ,g29
20:12:20  35  ,g30
20:12:20  36  ,g31
20:12:20  37  ,g32
20:12:20  38  ,g33
20:12:20  39  ,g34
20:12:20  40  ,g35
20:12:20  41  ,g36
20:12:20  42  ,g37
20:12:20  43  ,g38
20:12:20  44  ,g39
20:12:20  45  ,g40
20:12:20  46  ,g41
20:12:20  47  FROM modsrc
20:12:20  48  WHERE ydate = '&1'||' '||'&2'
20:12:20  49  AND pair = '&3'
20:12:20  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-11-29'||' '||'16:35:01'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.15
20:12:20 SQL> 
20:12:20 SQL> -- rpt
20:12:20 SQL> -- We should see just 1 row:
20:12:20 SQL> 
20:12:20 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.02
20:12:20 SQL> 
20:12:20 SQL> -- Build the model:
20:12:20 SQL> CREATE OR REPLACE VIEW bme AS
20:12:20   2  SELECT
20:12:20   3  prdate
20:12:20   4  ,gatt
20:12:20   5  ,g00
20:12:20   6  ,g01
20:12:20   7  ,g02
20:12:20   8  ,g03
20:12:20   9  ,g04
20:12:20  10  ,g05
20:12:20  11  ,g06
20:12:20  12  ,g07
20:12:20  13  ,g08
20:12:20  14  ,g09
20:12:20  15  ,g10
20:12:20  16  ,g11
20:12:20  17  ,g12
20:12:20  18  ,g13
20:12:20  19  ,g14
20:12:20  20  ,g15
20:12:20  21  ,g16
20:12:20  22  ,g17
20:12:20  23  ,g18
20:12:20  24  ,g19
20:12:20  25  ,g20
20:12:20  26  ,g21
20:12:20  27  ,g22
20:12:20  28  ,g23
20:12:20  29  ,g24
20:12:20  30  ,g25
20:12:20  31  ,g26
20:12:20  32  ,g27
20:12:20  33  ,g28
20:12:20  34  ,g29
20:12:20  35  ,g30
20:12:20  36  ,g31
20:12:20  37  ,g32
20:12:20  38  ,g33
20:12:20  39  ,g34
20:12:20  40  ,g35
20:12:20  41  ,g36
20:12:20  42  ,g37
20:12:20  43  ,g38
20:12:20  44  ,g39
20:12:20  45  ,g40
20:12:20  46  ,g41
20:12:20  47  FROM modsrc
20:12:20  48  WHERE gatt IN('nup','up')
20:12:20  49  -- Use only rows which are older than 1 day:
20:12:20  50  AND 1+ydate < '&1'||' '||'&2'
20:12:20  51  AND pair = '&3'
20:12:20  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-11-29'||' '||'16:35:01'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.10
20:12:20 SQL> 
20:12:20 SQL> -- rpt
20:12:20 SQL> 
20:12:20 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt;

GAT COUNT(PRDATE)
--- -------------
nup	     6875
up	     4163

Elapsed: 00:00:00.02
20:12:20 SQL> 
20:12:20 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-11-26 21:50:01

Elapsed: 00:00:00.01
20:12:20 SQL> 
20:12:20 SQL> -- Now build model from bme and score sme
20:12:20 SQL> @score1.sql gatt
20:12:20 SQL> --
20:12:20 SQL> -- score1.sql
20:12:20 SQL> --
20:12:20 SQL> 
20:12:20 SQL> -- I use this script to send 5 params to score.sql
20:12:20 SQL> -- which does the heavy lifting of creating an SVM model.
20:12:20 SQL> -- Then at the very end of this script I use the model
20:12:20 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:12:20 SQL> 
20:12:20 SQL> -- I call this script from 2 other scripts:
20:12:20 SQL> -- score1_5min.sql
20:12:20 SQL> -- score1_5min_gattn.sql
20:12:20 SQL> 
20:12:20 SQL> -- The 1st param is the name of the target attribute.
20:12:20 SQL> -- I like to call my target attributes either gatt or gattn.
20:12:20 SQL> 
20:12:20 SQL> -- Demo:
20:12:20 SQL> -- @score1.sql 'gatt'
20:12:20 SQL> -- @score1.sql 'gattn'
20:12:20 SQL> 
20:12:20 SQL> -- Now, I fill up svmc_apply_prep.
20:12:20 SQL> -- I use same model_name used in score.sql
20:12:20 SQL> DEFINE model_name = 'svmfx101'
20:12:20 SQL> DEFINE bldtable	= 'bme'
20:12:20 SQL> DEFINE scoretable = 'sme'
20:12:20 SQL> DEFINE case_id	= 'prdate'
20:12:20 SQL> -- Demo:
20:12:20 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:12:20 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:12:20 SQL> --
20:12:20 SQL> -- score.sql
20:12:20 SQL> --
20:12:20 SQL> 
20:12:20 SQL> -- usage: score.sql
20:12:20 SQL> 
20:12:20 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:12:20 SQL> 
20:12:20 SQL> -- DEFINE target	   = 'gatt'
20:12:20 SQL> -- DEFINE model_name = 'svmfx101'
20:12:20 SQL> -- DEFINE bldtable   = 'bme'
20:12:20 SQL> -- DEFINE scoretable = 'sme'
20:12:20 SQL> -- DEFINE case_id    = 'prdate'
20:12:20 SQL> 
20:12:20 SQL> DEFINE target	= '&1'
20:12:20 SQL> DEFINE model_name = '&2'
20:12:20 SQL> DEFINE bldtable	= '&3'
20:12:20 SQL> DEFINE scoretable = '&4'
20:12:20 SQL> DEFINE case_id	= '&5'
20:12:20 SQL> 
20:12:20 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:12:20 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:12:20 SQL> 
20:12:20 SQL> -- Builds an SVM model using pl/sql.
20:12:20 SQL> 
20:12:20 SQL> -----------------------------------------------------------------------
20:12:20 SQL> --			    BUILD THE MODEL
20:12:20 SQL> -----------------------------------------------------------------------
20:12:20 SQL> 
20:12:20 SQL> -- Cleanup old build data preparation objects for repeat runs
20:12:20 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.00
20:12:20 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:12:20 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:12:20 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.00
20:12:20 SQL> 
20:12:20 SQL> 
20:12:20 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:12:20 SQL> --
20:12:20 SQL> -- DROP	TABLE svmc_settings ;
20:12:20 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:12:20 SQL> -- DELETE svmc_settings;
20:12:20 SQL> 
20:12:20 SQL> -- The default classification algorithm is Naive Bayes. So override
20:12:20 SQL> -- this choice to SVM using a settings table.
20:12:20 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:12:20 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:12:20 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:12:20 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:12:20 SQL> -- models.
20:12:20 SQL> --
20:12:20 SQL> 
20:12:20 SQL> -- Do this once and then comment it out.
20:12:20 SQL> -- That makes script go faster.
20:12:20 SQL> -- BEGIN
20:12:20 SQL> -- -- Populate settings table
20:12:20 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:12:20 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:12:20 SQL> --
20:12:20 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:12:20 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:12:20 SQL> --
20:12:20 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:12:20 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:12:20 SQL> --   COMMIT;
20:12:20 SQL> -- END;
20:12:20 SQL> -- /
20:12:20 SQL> 
20:12:20 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:12:20 SQL> 
20:12:20 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:12:20   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:12:20   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.07
20:12:21 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:12:21   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:12:21   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:12:21 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:12:21   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:12:21   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:12:21 SQL> 
20:12:21 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:12:21   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:12:21   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:12:21 SQL> 
20:12:21 SQL> --------------------------------
20:12:21 SQL> -- PREPARE BUILD (TRAINING) DATA
20:12:21 SQL> --
20:12:21 SQL> 
20:12:21 SQL> -- 1. Missing Value treatment for all Predictors and
20:12:21 SQL> -- 2. Outlier Treatment and
20:12:21 SQL> -- 3. Normalization are performed below.
20:12:21 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:12:21 SQL> --    normalized here.
20:12:21 SQL> 
20:12:21 SQL> BEGIN
20:12:21   2  	-- Perform missing value treatment for all predictors
20:12:21   3  	-- create miss tables
20:12:21   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:12:21   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:12:21   6  
20:12:21   7  	-- populate miss tables
20:12:21   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:12:21   9  	  miss_table_name => 'svmc_miss_num',
20:12:21  10  	  data_table_name => '&bldtable',
20:12:21  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:12:21  12  
20:12:21  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:12:21  14  	  miss_table_name => 'svmc_miss_cat',
20:12:21  15  	  data_table_name => '&bldtable',
20:12:21  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:12:21  17  
20:12:21  18  	-- xform input data to replace missing values
20:12:21  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:12:21  20  	  miss_table_name => 'svmc_miss_num',
20:12:21  21  	  data_table_name => '&bldtable',
20:12:21  22  	  xform_view_name => 'xformed_build_miss_num');
20:12:21  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:12:21  24  	  miss_table_name => 'svmc_miss_cat',
20:12:21  25  	  data_table_name => '&bldtable',
20:12:21  26  	  xform_view_name => 'xformed_build_miss_cat');
20:12:21  27  
20:12:21  28  	-- Perform outlier treatment.
20:12:21  29  	-- create clip table
20:12:21  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:12:21  31  
20:12:21  32  	-- populate clip table
20:12:21  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:12:21  34  	  clip_table_name => 'svmc_clip',
20:12:21  35  	  data_table_name => '&bldtable',
20:12:21  36  	  tail_frac	  => 0.025,
20:12:21  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:12:21  38  
20:12:21  39  	-- xform input data to winsorized data
20:12:21  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:12:21  41  	  clip_table_name => 'svmc_clip',
20:12:21  42  	  data_table_name => '&bldtable',
20:12:21  43  	  xform_view_name => 'svmc_winsor');
20:12:21  44  
20:12:21  45  	-- create normalization table
20:12:21  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:12:21  47  
20:12:21  48  	-- populate normalization table based on winsorized data
20:12:21  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:12:21  50  	  norm_table_name => 'svmc_norm',
20:12:21  51  	  data_table_name => 'svmc_winsor',
20:12:21  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:12:21  53  
20:12:21  54  	-- normalize the original data
20:12:21  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:12:21  56  	  norm_table_name => 'svmc_norm',
20:12:21  57  	  data_table_name => '&bldtable',
20:12:21  58  	  xform_view_name => 'svmc_build_prep');
20:12:21  59  END;
20:12:21  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.74
20:12:22 SQL> 
20:12:22 SQL> ---------------------
20:12:22 SQL> -- CREATE A NEW MODEL
20:12:22 SQL> --
20:12:22 SQL> -- Cleanup old model with the same name for repeat runs
20:12:22 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:12:22   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:12:22   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.41
20:12:24 SQL> 
20:12:24 SQL> -- Build a new SVM Model
20:12:24 SQL> BEGIN
20:12:24   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:12:24   3  	  model_name	      => '&model_name',
20:12:24   4  	  mining_function     => dbms_data_mining.classification,
20:12:24   5  	  data_table_name     => 'svmc_build_prep',
20:12:24   6  	  case_id_column_name => '&case_id',
20:12:24   7  	  target_column_name  => '&target',
20:12:24   8  	  settings_table_name => 'svmc_settings');
20:12:24   9  END;
20:12:24  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:04.94
20:12:29 SQL> 
20:12:29 SQL> -----------------------------------------------------------------------
20:12:29 SQL> --			       APPLY/score THE MODEL
20:12:29 SQL> -----------------------------------------------------------------------
20:12:29 SQL> 
20:12:29 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:12:29 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:12:29   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:12:29   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
20:12:29 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:12:29   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:12:29   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
20:12:29 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:12:29   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:12:29   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.07
20:12:29 SQL> -----------------------
20:12:29 SQL> -- PREPARE SCORING DATA
20:12:29 SQL> --
20:12:29 SQL> -- If the data for model creation has been prepared, then the data
20:12:29 SQL> -- to be scored using the model must be prepared in the same manner
20:12:29 SQL> -- in order to obtain meaningful results.
20:12:29 SQL> --
20:12:29 SQL> -- 1. Missing Value treatment for all Predictors and
20:12:29 SQL> -- 2. Normalization
20:12:29 SQL> -- No outlier treatment will be performed during test and apply. The
20:12:29 SQL> -- normalization step is sufficient, since the normalization parameters
20:12:29 SQL> -- already capture the effects of outlier treatment done with build data.
20:12:29 SQL> --
20:12:29 SQL> BEGIN
20:12:29   2  	-- Xform Test data to replace missing values
20:12:29   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:12:29   4  	  miss_table_name => 'svmc_miss_num',
20:12:29   5  	  data_table_name => '&scoretable',
20:12:29   6  	  xform_view_name => 'xformed_apply_miss_num');
20:12:29   7  
20:12:29   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:12:29   9  	  miss_table_name => 'svmc_miss_cat',
20:12:29  10  	  data_table_name => '&scoretable',
20:12:29  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:12:29  12  
20:12:29  13  	-- Normalize the data to be scored
20:12:29  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:12:29  15  	  norm_table_name => 'svmc_norm',
20:12:29  16  	  data_table_name => '&scoretable',
20:12:29  17  	  xform_view_name => 'svmc_apply_prep');
20:12:29  18  END;
20:12:29  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.19
20:12:29 SQL> 
20:12:29 SQL> -- Maybe I already collected a score for this prdate.
20:12:29 SQL> -- DELETE it if I did:
20:12:29 SQL> DELETE svm62scores
20:12:29   2  WHERE score > 0
20:12:29   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:12:29   4  -- I need to supply the target attribute name:
20:12:29   5  AND targ = '&1'
20:12:29   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gatt'

0 rows deleted.

Elapsed: 00:00:00.02
20:12:29 SQL> 
20:12:29 SQL> -- We do a drumroll here:
20:12:29 SQL> 
20:12:29 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:12:29   2  SELECT
20:12:29   3  prdate
20:12:29   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:12:29   5  ,sysdate
20:12:29   6  ,SUBSTR(prdate,1,7)pair
20:12:29   7  ,SUBSTR(prdate,-19)ydate
20:12:29   8  ,'&1'
20:12:29   9  FROM svmc_apply_prep
20:12:29  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gatt'

1 row created.

Elapsed: 00:00:00.05
20:12:29 SQL> @score1_5min_gattn.sql	2010-10-13 17:05:01 aud_usd
20:12:29 SQL> --
20:12:29 SQL> -- score1_5min_gattn.sql
20:12:29 SQL> --
20:12:29 SQL> 
20:12:29 SQL> -- Demo:
20:12:29 SQL> -- @score1_5min_gattn.sql 2010-12-31 20:45:01 aud_usd
20:12:29 SQL> 
20:12:29 SQL> CREATE OR REPLACE VIEW sme AS
20:12:29   2  SELECT
20:12:29   3  prdate
20:12:29   4  ,NULL gattn
20:12:29   5  ,g00
20:12:29   6  ,g01
20:12:29   7  ,g02
20:12:29   8  ,g03
20:12:29   9  ,g04
20:12:29  10  ,g05
20:12:29  11  ,g06
20:12:29  12  ,g07
20:12:29  13  ,g08
20:12:29  14  ,g09
20:12:29  15  ,g10
20:12:29  16  ,g11
20:12:29  17  ,g12
20:12:29  18  ,g13
20:12:29  19  ,g14
20:12:29  20  ,g15
20:12:29  21  ,g16
20:12:29  22  ,g17
20:12:29  23  ,g18
20:12:29  24  ,g19
20:12:29  25  ,g20
20:12:29  26  ,g21
20:12:29  27  ,g22
20:12:29  28  ,g23
20:12:29  29  ,g24
20:12:29  30  ,g25
20:12:29  31  ,g26
20:12:29  32  ,g27
20:12:29  33  ,g28
20:12:29  34  ,g29
20:12:29  35  ,g30
20:12:29  36  ,g31
20:12:29  37  ,g32
20:12:29  38  ,g33
20:12:29  39  ,g34
20:12:29  40  ,g35
20:12:29  41  ,g36
20:12:29  42  ,g37
20:12:29  43  ,g38
20:12:29  44  ,g39
20:12:29  45  ,g40
20:12:29  46  ,g41
20:12:29  47  FROM modsrc
20:12:29  48  WHERE ydate = '&1'||' '||'&2'
20:12:29  49  AND pair = '&3'
20:12:29  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-10-13'||' '||'17:05:01'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:12:29 SQL> 
20:12:29 SQL> -- rpt
20:12:29 SQL> -- We should see just 1 row:
20:12:29 SQL> 
20:12:29 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.02
20:12:29 SQL> 
20:12:29 SQL> -- Build the model:
20:12:29 SQL> CREATE OR REPLACE VIEW bme AS
20:12:29   2  SELECT
20:12:29   3  prdate
20:12:29   4  ,gattn
20:12:29   5  ,g00
20:12:29   6  ,g01
20:12:29   7  ,g02
20:12:29   8  ,g03
20:12:29   9  ,g04
20:12:29  10  ,g05
20:12:29  11  ,g06
20:12:29  12  ,g07
20:12:29  13  ,g08
20:12:29  14  ,g09
20:12:29  15  ,g10
20:12:29  16  ,g11
20:12:29  17  ,g12
20:12:29  18  ,g13
20:12:29  19  ,g14
20:12:29  20  ,g15
20:12:29  21  ,g16
20:12:29  22  ,g17
20:12:29  23  ,g18
20:12:29  24  ,g19
20:12:29  25  ,g20
20:12:29  26  ,g21
20:12:29  27  ,g22
20:12:29  28  ,g23
20:12:29  29  ,g24
20:12:29  30  ,g25
20:12:29  31  ,g26
20:12:29  32  ,g27
20:12:29  33  ,g28
20:12:29  34  ,g29
20:12:29  35  ,g30
20:12:29  36  ,g31
20:12:29  37  ,g32
20:12:29  38  ,g33
20:12:29  39  ,g34
20:12:29  40  ,g35
20:12:29  41  ,g36
20:12:29  42  ,g37
20:12:29  43  ,g38
20:12:29  44  ,g39
20:12:29  45  ,g40
20:12:29  46  ,g41
20:12:29  47  FROM modsrc
20:12:29  48  WHERE gattn IN('nup','up')
20:12:29  49  -- Use only rows which are older than 1 day:
20:12:29  50  AND 1+ydate < '&1'||' '||'&2'
20:12:29  51  AND pair = '&3'
20:12:29  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-10-13'||' '||'17:05:01'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:12:29 SQL> 
20:12:29 SQL> -- rpt
20:12:29 SQL> 
20:12:29 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	      977
up	      437

Elapsed: 00:00:00.02
20:12:29 SQL> 
20:12:29 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-10-12 17:00:01

Elapsed: 00:00:00.01
20:12:29 SQL> 
20:12:29 SQL> -- Now build model from bme and score sme
20:12:29 SQL> @score1.sql gattn
20:12:29 SQL> --
20:12:29 SQL> -- score1.sql
20:12:29 SQL> --
20:12:29 SQL> 
20:12:29 SQL> -- I use this script to send 5 params to score.sql
20:12:29 SQL> -- which does the heavy lifting of creating an SVM model.
20:12:29 SQL> -- Then at the very end of this script I use the model
20:12:29 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:12:29 SQL> 
20:12:29 SQL> -- I call this script from 2 other scripts:
20:12:29 SQL> -- score1_5min.sql
20:12:29 SQL> -- score1_5min_gattn.sql
20:12:29 SQL> 
20:12:29 SQL> -- The 1st param is the name of the target attribute.
20:12:29 SQL> -- I like to call my target attributes either gatt or gattn.
20:12:29 SQL> 
20:12:29 SQL> -- Demo:
20:12:29 SQL> -- @score1.sql 'gatt'
20:12:29 SQL> -- @score1.sql 'gattn'
20:12:29 SQL> 
20:12:29 SQL> -- Now, I fill up svmc_apply_prep.
20:12:29 SQL> -- I use same model_name used in score.sql
20:12:29 SQL> DEFINE model_name = 'svmfx101'
20:12:29 SQL> DEFINE bldtable	= 'bme'
20:12:29 SQL> DEFINE scoretable = 'sme'
20:12:29 SQL> DEFINE case_id	= 'prdate'
20:12:29 SQL> -- Demo:
20:12:29 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:12:29 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:12:29 SQL> --
20:12:29 SQL> -- score.sql
20:12:29 SQL> --
20:12:29 SQL> 
20:12:29 SQL> -- usage: score.sql
20:12:29 SQL> 
20:12:29 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:12:29 SQL> 
20:12:29 SQL> -- DEFINE target	   = 'gatt'
20:12:29 SQL> -- DEFINE model_name = 'svmfx101'
20:12:29 SQL> -- DEFINE bldtable   = 'bme'
20:12:29 SQL> -- DEFINE scoretable = 'sme'
20:12:29 SQL> -- DEFINE case_id    = 'prdate'
20:12:29 SQL> 
20:12:29 SQL> DEFINE target	= '&1'
20:12:29 SQL> DEFINE model_name = '&2'
20:12:29 SQL> DEFINE bldtable	= '&3'
20:12:29 SQL> DEFINE scoretable = '&4'
20:12:29 SQL> DEFINE case_id	= '&5'
20:12:29 SQL> 
20:12:29 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:12:29 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:12:29 SQL> 
20:12:29 SQL> -- Builds an SVM model using pl/sql.
20:12:29 SQL> 
20:12:29 SQL> -----------------------------------------------------------------------
20:12:29 SQL> --			    BUILD THE MODEL
20:12:29 SQL> -----------------------------------------------------------------------
20:12:29 SQL> 
20:12:29 SQL> -- Cleanup old build data preparation objects for repeat runs
20:12:29 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.01
20:12:29 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:12:29 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:12:29 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.00
20:12:29 SQL> 
20:12:29 SQL> 
20:12:29 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:12:29 SQL> --
20:12:29 SQL> -- DROP	TABLE svmc_settings ;
20:12:29 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:12:29 SQL> -- DELETE svmc_settings;
20:12:29 SQL> 
20:12:29 SQL> -- The default classification algorithm is Naive Bayes. So override
20:12:29 SQL> -- this choice to SVM using a settings table.
20:12:29 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:12:29 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:12:29 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:12:29 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:12:29 SQL> -- models.
20:12:29 SQL> --
20:12:29 SQL> 
20:12:29 SQL> -- Do this once and then comment it out.
20:12:29 SQL> -- That makes script go faster.
20:12:29 SQL> -- BEGIN
20:12:29 SQL> -- -- Populate settings table
20:12:29 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:12:29 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:12:29 SQL> --
20:12:29 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:12:29 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:12:29 SQL> --
20:12:29 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:12:29 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:12:29 SQL> --   COMMIT;
20:12:29 SQL> -- END;
20:12:29 SQL> -- /
20:12:29 SQL> 
20:12:29 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:12:29 SQL> 
20:12:29 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:12:29   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:12:29   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:12:29 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:12:29   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:12:29   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:12:29 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:12:29   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:12:29   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:12:29 SQL> 
20:12:29 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:12:29   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:12:29   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:12:29 SQL> 
20:12:29 SQL> --------------------------------
20:12:29 SQL> -- PREPARE BUILD (TRAINING) DATA
20:12:29 SQL> --
20:12:29 SQL> 
20:12:29 SQL> -- 1. Missing Value treatment for all Predictors and
20:12:29 SQL> -- 2. Outlier Treatment and
20:12:29 SQL> -- 3. Normalization are performed below.
20:12:29 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:12:29 SQL> --    normalized here.
20:12:29 SQL> 
20:12:29 SQL> BEGIN
20:12:29   2  	-- Perform missing value treatment for all predictors
20:12:29   3  	-- create miss tables
20:12:29   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:12:29   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:12:29   6  
20:12:29   7  	-- populate miss tables
20:12:29   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:12:29   9  	  miss_table_name => 'svmc_miss_num',
20:12:29  10  	  data_table_name => '&bldtable',
20:12:29  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:12:29  12  
20:12:29  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:12:29  14  	  miss_table_name => 'svmc_miss_cat',
20:12:29  15  	  data_table_name => '&bldtable',
20:12:29  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:12:29  17  
20:12:29  18  	-- xform input data to replace missing values
20:12:29  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:12:29  20  	  miss_table_name => 'svmc_miss_num',
20:12:29  21  	  data_table_name => '&bldtable',
20:12:29  22  	  xform_view_name => 'xformed_build_miss_num');
20:12:29  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:12:29  24  	  miss_table_name => 'svmc_miss_cat',
20:12:29  25  	  data_table_name => '&bldtable',
20:12:29  26  	  xform_view_name => 'xformed_build_miss_cat');
20:12:29  27  
20:12:29  28  	-- Perform outlier treatment.
20:12:29  29  	-- create clip table
20:12:29  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:12:29  31  
20:12:29  32  	-- populate clip table
20:12:29  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:12:29  34  	  clip_table_name => 'svmc_clip',
20:12:29  35  	  data_table_name => '&bldtable',
20:12:29  36  	  tail_frac	  => 0.025,
20:12:29  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:12:29  38  
20:12:29  39  	-- xform input data to winsorized data
20:12:29  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:12:29  41  	  clip_table_name => 'svmc_clip',
20:12:29  42  	  data_table_name => '&bldtable',
20:12:29  43  	  xform_view_name => 'svmc_winsor');
20:12:29  44  
20:12:29  45  	-- create normalization table
20:12:29  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:12:29  47  
20:12:29  48  	-- populate normalization table based on winsorized data
20:12:29  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:12:29  50  	  norm_table_name => 'svmc_norm',
20:12:29  51  	  data_table_name => 'svmc_winsor',
20:12:29  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:12:29  53  
20:12:29  54  	-- normalize the original data
20:12:29  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:12:29  56  	  norm_table_name => 'svmc_norm',
20:12:29  57  	  data_table_name => '&bldtable',
20:12:29  58  	  xform_view_name => 'svmc_build_prep');
20:12:29  59  END;
20:12:29  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.00
20:12:30 SQL> 
20:12:30 SQL> ---------------------
20:12:30 SQL> -- CREATE A NEW MODEL
20:12:30 SQL> --
20:12:30 SQL> -- Cleanup old model with the same name for repeat runs
20:12:30 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:12:30   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:12:30   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.99
20:12:31 SQL> 
20:12:31 SQL> -- Build a new SVM Model
20:12:31 SQL> BEGIN
20:12:31   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:12:31   3  	  model_name	      => '&model_name',
20:12:31   4  	  mining_function     => dbms_data_mining.classification,
20:12:31   5  	  data_table_name     => 'svmc_build_prep',
20:12:31   6  	  case_id_column_name => '&case_id',
20:12:31   7  	  target_column_name  => '&target',
20:12:31   8  	  settings_table_name => 'svmc_settings');
20:12:31   9  END;
20:12:31  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:02.13
20:12:34 SQL> 
20:12:34 SQL> -----------------------------------------------------------------------
20:12:34 SQL> --			       APPLY/score THE MODEL
20:12:34 SQL> -----------------------------------------------------------------------
20:12:34 SQL> 
20:12:34 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:12:34 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:12:34   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:12:34   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:12:34 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:12:34   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:12:34   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:12:34 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:12:34   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:12:34   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:12:34 SQL> -----------------------
20:12:34 SQL> -- PREPARE SCORING DATA
20:12:34 SQL> --
20:12:34 SQL> -- If the data for model creation has been prepared, then the data
20:12:34 SQL> -- to be scored using the model must be prepared in the same manner
20:12:34 SQL> -- in order to obtain meaningful results.
20:12:34 SQL> --
20:12:34 SQL> -- 1. Missing Value treatment for all Predictors and
20:12:34 SQL> -- 2. Normalization
20:12:34 SQL> -- No outlier treatment will be performed during test and apply. The
20:12:34 SQL> -- normalization step is sufficient, since the normalization parameters
20:12:34 SQL> -- already capture the effects of outlier treatment done with build data.
20:12:34 SQL> --
20:12:34 SQL> BEGIN
20:12:34   2  	-- Xform Test data to replace missing values
20:12:34   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:12:34   4  	  miss_table_name => 'svmc_miss_num',
20:12:34   5  	  data_table_name => '&scoretable',
20:12:34   6  	  xform_view_name => 'xformed_apply_miss_num');
20:12:34   7  
20:12:34   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:12:34   9  	  miss_table_name => 'svmc_miss_cat',
20:12:34  10  	  data_table_name => '&scoretable',
20:12:34  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:12:34  12  
20:12:34  13  	-- Normalize the data to be scored
20:12:34  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:12:34  15  	  norm_table_name => 'svmc_norm',
20:12:34  16  	  data_table_name => '&scoretable',
20:12:34  17  	  xform_view_name => 'svmc_apply_prep');
20:12:34  18  END;
20:12:34  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.18
20:12:34 SQL> 
20:12:34 SQL> -- Maybe I already collected a score for this prdate.
20:12:34 SQL> -- DELETE it if I did:
20:12:34 SQL> DELETE svm62scores
20:12:34   2  WHERE score > 0
20:12:34   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:12:34   4  -- I need to supply the target attribute name:
20:12:34   5  AND targ = '&1'
20:12:34   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gattn'

0 rows deleted.

Elapsed: 00:00:00.01
20:12:34 SQL> 
20:12:34 SQL> -- We do a drumroll here:
20:12:34 SQL> 
20:12:34 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:12:34   2  SELECT
20:12:34   3  prdate
20:12:34   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:12:34   5  ,sysdate
20:12:34   6  ,SUBSTR(prdate,1,7)pair
20:12:34   7  ,SUBSTR(prdate,-19)ydate
20:12:34   8  ,'&1'
20:12:34   9  FROM svmc_apply_prep
20:12:34  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gattn'

1 row created.

Elapsed: 00:00:00.05
20:12:34 SQL> @score1_5min.sql	      2010-10-07 04:15:01 aud_usd
20:12:34 SQL> --
20:12:34 SQL> -- score1_5min.sql
20:12:34 SQL> --
20:12:34 SQL> 
20:12:34 SQL> -- Demo:
20:12:34 SQL> -- @score1_5min.sql 2010-12-31 20:45:01 aud_usd
20:12:34 SQL> 
20:12:34 SQL> CREATE OR REPLACE VIEW sme AS
20:12:34   2  SELECT
20:12:34   3  prdate
20:12:34   4  ,NULL gatt
20:12:34   5  ,g00
20:12:34   6  ,g01
20:12:34   7  ,g02
20:12:34   8  ,g03
20:12:34   9  ,g04
20:12:34  10  ,g05
20:12:34  11  ,g06
20:12:34  12  ,g07
20:12:34  13  ,g08
20:12:34  14  ,g09
20:12:34  15  ,g10
20:12:34  16  ,g11
20:12:34  17  ,g12
20:12:34  18  ,g13
20:12:34  19  ,g14
20:12:34  20  ,g15
20:12:34  21  ,g16
20:12:34  22  ,g17
20:12:34  23  ,g18
20:12:34  24  ,g19
20:12:34  25  ,g20
20:12:34  26  ,g21
20:12:34  27  ,g22
20:12:34  28  ,g23
20:12:34  29  ,g24
20:12:34  30  ,g25
20:12:34  31  ,g26
20:12:34  32  ,g27
20:12:34  33  ,g28
20:12:34  34  ,g29
20:12:34  35  ,g30
20:12:34  36  ,g31
20:12:34  37  ,g32
20:12:34  38  ,g33
20:12:34  39  ,g34
20:12:34  40  ,g35
20:12:34  41  ,g36
20:12:34  42  ,g37
20:12:34  43  ,g38
20:12:34  44  ,g39
20:12:34  45  ,g40
20:12:34  46  ,g41
20:12:34  47  FROM modsrc
20:12:34  48  WHERE ydate = '&1'||' '||'&2'
20:12:34  49  AND pair = '&3'
20:12:34  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-10-07'||' '||'04:15:01'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:12:34 SQL> 
20:12:34 SQL> -- rpt
20:12:34 SQL> -- We should see just 1 row:
20:12:34 SQL> 
20:12:34 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.02
20:12:34 SQL> 
20:12:34 SQL> -- Build the model:
20:12:34 SQL> CREATE OR REPLACE VIEW bme AS
20:12:34   2  SELECT
20:12:34   3  prdate
20:12:34   4  ,gatt
20:12:34   5  ,g00
20:12:34   6  ,g01
20:12:34   7  ,g02
20:12:34   8  ,g03
20:12:34   9  ,g04
20:12:34  10  ,g05
20:12:34  11  ,g06
20:12:34  12  ,g07
20:12:34  13  ,g08
20:12:34  14  ,g09
20:12:34  15  ,g10
20:12:34  16  ,g11
20:12:34  17  ,g12
20:12:34  18  ,g13
20:12:34  19  ,g14
20:12:34  20  ,g15
20:12:34  21  ,g16
20:12:34  22  ,g17
20:12:34  23  ,g18
20:12:34  24  ,g19
20:12:34  25  ,g20
20:12:34  26  ,g21
20:12:34  27  ,g22
20:12:34  28  ,g23
20:12:34  29  ,g24
20:12:34  30  ,g25
20:12:34  31  ,g26
20:12:34  32  ,g27
20:12:34  33  ,g28
20:12:34  34  ,g29
20:12:34  35  ,g30
20:12:34  36  ,g31
20:12:34  37  ,g32
20:12:34  38  ,g33
20:12:34  39  ,g34
20:12:34  40  ,g35
20:12:34  41  ,g36
20:12:34  42  ,g37
20:12:34  43  ,g38
20:12:34  44  ,g39
20:12:34  45  ,g40
20:12:34  46  ,g41
20:12:34  47  FROM modsrc
20:12:34  48  WHERE gatt IN('nup','up')
20:12:34  49  -- Use only rows which are older than 1 day:
20:12:34  50  AND 1+ydate < '&1'||' '||'&2'
20:12:34  51  AND pair = '&3'
20:12:34  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-10-07'||' '||'04:15:01'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.05
20:12:34 SQL> 
20:12:34 SQL> -- rpt
20:12:34 SQL> 
20:12:34 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt;

GAT COUNT(PRDATE)
--- -------------
nup	       52
up	       44

Elapsed: 00:00:00.01
20:12:34 SQL> 
20:12:34 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-10-06 04:10:01

Elapsed: 00:00:00.02
20:12:34 SQL> 
20:12:34 SQL> -- Now build model from bme and score sme
20:12:34 SQL> @score1.sql gatt
20:12:34 SQL> --
20:12:34 SQL> -- score1.sql
20:12:34 SQL> --
20:12:34 SQL> 
20:12:34 SQL> -- I use this script to send 5 params to score.sql
20:12:34 SQL> -- which does the heavy lifting of creating an SVM model.
20:12:34 SQL> -- Then at the very end of this script I use the model
20:12:34 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:12:34 SQL> 
20:12:34 SQL> -- I call this script from 2 other scripts:
20:12:34 SQL> -- score1_5min.sql
20:12:34 SQL> -- score1_5min_gattn.sql
20:12:34 SQL> 
20:12:34 SQL> -- The 1st param is the name of the target attribute.
20:12:34 SQL> -- I like to call my target attributes either gatt or gattn.
20:12:34 SQL> 
20:12:34 SQL> -- Demo:
20:12:34 SQL> -- @score1.sql 'gatt'
20:12:34 SQL> -- @score1.sql 'gattn'
20:12:34 SQL> 
20:12:34 SQL> -- Now, I fill up svmc_apply_prep.
20:12:34 SQL> -- I use same model_name used in score.sql
20:12:34 SQL> DEFINE model_name = 'svmfx101'
20:12:34 SQL> DEFINE bldtable	= 'bme'
20:12:34 SQL> DEFINE scoretable = 'sme'
20:12:34 SQL> DEFINE case_id	= 'prdate'
20:12:34 SQL> -- Demo:
20:12:34 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:12:34 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:12:34 SQL> --
20:12:34 SQL> -- score.sql
20:12:34 SQL> --
20:12:34 SQL> 
20:12:34 SQL> -- usage: score.sql
20:12:34 SQL> 
20:12:34 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:12:34 SQL> 
20:12:34 SQL> -- DEFINE target	   = 'gatt'
20:12:34 SQL> -- DEFINE model_name = 'svmfx101'
20:12:34 SQL> -- DEFINE bldtable   = 'bme'
20:12:34 SQL> -- DEFINE scoretable = 'sme'
20:12:34 SQL> -- DEFINE case_id    = 'prdate'
20:12:34 SQL> 
20:12:34 SQL> DEFINE target	= '&1'
20:12:34 SQL> DEFINE model_name = '&2'
20:12:34 SQL> DEFINE bldtable	= '&3'
20:12:34 SQL> DEFINE scoretable = '&4'
20:12:34 SQL> DEFINE case_id	= '&5'
20:12:34 SQL> 
20:12:34 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:12:34 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:12:34 SQL> 
20:12:34 SQL> -- Builds an SVM model using pl/sql.
20:12:34 SQL> 
20:12:34 SQL> -----------------------------------------------------------------------
20:12:34 SQL> --			    BUILD THE MODEL
20:12:34 SQL> -----------------------------------------------------------------------
20:12:34 SQL> 
20:12:34 SQL> -- Cleanup old build data preparation objects for repeat runs
20:12:34 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.01
20:12:34 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:12:34 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:12:34 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.00
20:12:34 SQL> 
20:12:34 SQL> 
20:12:34 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:12:34 SQL> --
20:12:34 SQL> -- DROP	TABLE svmc_settings ;
20:12:34 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:12:34 SQL> -- DELETE svmc_settings;
20:12:34 SQL> 
20:12:34 SQL> -- The default classification algorithm is Naive Bayes. So override
20:12:34 SQL> -- this choice to SVM using a settings table.
20:12:34 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:12:34 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:12:34 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:12:34 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:12:34 SQL> -- models.
20:12:34 SQL> --
20:12:34 SQL> 
20:12:34 SQL> -- Do this once and then comment it out.
20:12:34 SQL> -- That makes script go faster.
20:12:34 SQL> -- BEGIN
20:12:34 SQL> -- -- Populate settings table
20:12:34 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:12:34 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:12:34 SQL> --
20:12:34 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:12:34 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:12:34 SQL> --
20:12:34 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:12:34 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:12:34 SQL> --   COMMIT;
20:12:34 SQL> -- END;
20:12:34 SQL> -- /
20:12:34 SQL> 
20:12:34 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:12:34 SQL> 
20:12:34 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:12:34   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:12:34   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:12:34 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:12:34   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:12:34   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:12:34 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:12:34   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:12:34   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:12:34 SQL> 
20:12:34 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:12:34   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:12:34   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:12:34 SQL> 
20:12:34 SQL> --------------------------------
20:12:34 SQL> -- PREPARE BUILD (TRAINING) DATA
20:12:34 SQL> --
20:12:34 SQL> 
20:12:34 SQL> -- 1. Missing Value treatment for all Predictors and
20:12:34 SQL> -- 2. Outlier Treatment and
20:12:34 SQL> -- 3. Normalization are performed below.
20:12:34 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:12:34 SQL> --    normalized here.
20:12:34 SQL> 
20:12:34 SQL> BEGIN
20:12:34   2  	-- Perform missing value treatment for all predictors
20:12:34   3  	-- create miss tables
20:12:34   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:12:34   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:12:34   6  
20:12:34   7  	-- populate miss tables
20:12:34   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:12:34   9  	  miss_table_name => 'svmc_miss_num',
20:12:34  10  	  data_table_name => '&bldtable',
20:12:34  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:12:34  12  
20:12:34  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:12:34  14  	  miss_table_name => 'svmc_miss_cat',
20:12:34  15  	  data_table_name => '&bldtable',
20:12:34  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:12:34  17  
20:12:34  18  	-- xform input data to replace missing values
20:12:34  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:12:34  20  	  miss_table_name => 'svmc_miss_num',
20:12:34  21  	  data_table_name => '&bldtable',
20:12:34  22  	  xform_view_name => 'xformed_build_miss_num');
20:12:34  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:12:34  24  	  miss_table_name => 'svmc_miss_cat',
20:12:34  25  	  data_table_name => '&bldtable',
20:12:34  26  	  xform_view_name => 'xformed_build_miss_cat');
20:12:34  27  
20:12:34  28  	-- Perform outlier treatment.
20:12:34  29  	-- create clip table
20:12:34  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:12:34  31  
20:12:34  32  	-- populate clip table
20:12:34  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:12:34  34  	  clip_table_name => 'svmc_clip',
20:12:34  35  	  data_table_name => '&bldtable',
20:12:34  36  	  tail_frac	  => 0.025,
20:12:34  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:12:34  38  
20:12:34  39  	-- xform input data to winsorized data
20:12:34  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:12:34  41  	  clip_table_name => 'svmc_clip',
20:12:34  42  	  data_table_name => '&bldtable',
20:12:34  43  	  xform_view_name => 'svmc_winsor');
20:12:34  44  
20:12:34  45  	-- create normalization table
20:12:34  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:12:34  47  
20:12:34  48  	-- populate normalization table based on winsorized data
20:12:34  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:12:34  50  	  norm_table_name => 'svmc_norm',
20:12:34  51  	  data_table_name => 'svmc_winsor',
20:12:34  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:12:34  53  
20:12:34  54  	-- normalize the original data
20:12:34  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:12:34  56  	  norm_table_name => 'svmc_norm',
20:12:34  57  	  data_table_name => '&bldtable',
20:12:34  58  	  xform_view_name => 'svmc_build_prep');
20:12:34  59  END;
20:12:34  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.93
20:12:35 SQL> 
20:12:35 SQL> ---------------------
20:12:35 SQL> -- CREATE A NEW MODEL
20:12:35 SQL> --
20:12:35 SQL> -- Cleanup old model with the same name for repeat runs
20:12:35 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:12:35   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:12:35   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.00
20:12:36 SQL> 
20:12:36 SQL> -- Build a new SVM Model
20:12:36 SQL> BEGIN
20:12:36   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:12:36   3  	  model_name	      => '&model_name',
20:12:36   4  	  mining_function     => dbms_data_mining.classification,
20:12:36   5  	  data_table_name     => 'svmc_build_prep',
20:12:36   6  	  case_id_column_name => '&case_id',
20:12:36   7  	  target_column_name  => '&target',
20:12:36   8  	  settings_table_name => 'svmc_settings');
20:12:36   9  END;
20:12:36  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.35
20:12:37 SQL> 
20:12:37 SQL> -----------------------------------------------------------------------
20:12:37 SQL> --			       APPLY/score THE MODEL
20:12:37 SQL> -----------------------------------------------------------------------
20:12:37 SQL> 
20:12:37 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:12:37 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:12:37   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:12:37   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:12:38 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:12:38   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:12:38   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:12:38 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:12:38   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:12:38   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
20:12:38 SQL> -----------------------
20:12:38 SQL> -- PREPARE SCORING DATA
20:12:38 SQL> --
20:12:38 SQL> -- If the data for model creation has been prepared, then the data
20:12:38 SQL> -- to be scored using the model must be prepared in the same manner
20:12:38 SQL> -- in order to obtain meaningful results.
20:12:38 SQL> --
20:12:38 SQL> -- 1. Missing Value treatment for all Predictors and
20:12:38 SQL> -- 2. Normalization
20:12:38 SQL> -- No outlier treatment will be performed during test and apply. The
20:12:38 SQL> -- normalization step is sufficient, since the normalization parameters
20:12:38 SQL> -- already capture the effects of outlier treatment done with build data.
20:12:38 SQL> --
20:12:38 SQL> BEGIN
20:12:38   2  	-- Xform Test data to replace missing values
20:12:38   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:12:38   4  	  miss_table_name => 'svmc_miss_num',
20:12:38   5  	  data_table_name => '&scoretable',
20:12:38   6  	  xform_view_name => 'xformed_apply_miss_num');
20:12:38   7  
20:12:38   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:12:38   9  	  miss_table_name => 'svmc_miss_cat',
20:12:38  10  	  data_table_name => '&scoretable',
20:12:38  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:12:38  12  
20:12:38  13  	-- Normalize the data to be scored
20:12:38  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:12:38  15  	  norm_table_name => 'svmc_norm',
20:12:38  16  	  data_table_name => '&scoretable',
20:12:38  17  	  xform_view_name => 'svmc_apply_prep');
20:12:38  18  END;
20:12:38  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.18
20:12:38 SQL> 
20:12:38 SQL> -- Maybe I already collected a score for this prdate.
20:12:38 SQL> -- DELETE it if I did:
20:12:38 SQL> DELETE svm62scores
20:12:38   2  WHERE score > 0
20:12:38   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:12:38   4  -- I need to supply the target attribute name:
20:12:38   5  AND targ = '&1'
20:12:38   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gatt'

0 rows deleted.

Elapsed: 00:00:00.01
20:12:38 SQL> 
20:12:38 SQL> -- We do a drumroll here:
20:12:38 SQL> 
20:12:38 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:12:38   2  SELECT
20:12:38   3  prdate
20:12:38   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:12:38   5  ,sysdate
20:12:38   6  ,SUBSTR(prdate,1,7)pair
20:12:38   7  ,SUBSTR(prdate,-19)ydate
20:12:38   8  ,'&1'
20:12:38   9  FROM svmc_apply_prep
20:12:38  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gatt'

1 row created.

Elapsed: 00:00:00.03
20:12:38 SQL> @score1_5min_gattn.sql	2010-11-22 12:20:01 aud_usd
20:12:38 SQL> --
20:12:38 SQL> -- score1_5min_gattn.sql
20:12:38 SQL> --
20:12:38 SQL> 
20:12:38 SQL> -- Demo:
20:12:38 SQL> -- @score1_5min_gattn.sql 2010-12-31 20:45:01 aud_usd
20:12:38 SQL> 
20:12:38 SQL> CREATE OR REPLACE VIEW sme AS
20:12:38   2  SELECT
20:12:38   3  prdate
20:12:38   4  ,NULL gattn
20:12:38   5  ,g00
20:12:38   6  ,g01
20:12:38   7  ,g02
20:12:38   8  ,g03
20:12:38   9  ,g04
20:12:38  10  ,g05
20:12:38  11  ,g06
20:12:38  12  ,g07
20:12:38  13  ,g08
20:12:38  14  ,g09
20:12:38  15  ,g10
20:12:38  16  ,g11
20:12:38  17  ,g12
20:12:38  18  ,g13
20:12:38  19  ,g14
20:12:38  20  ,g15
20:12:38  21  ,g16
20:12:38  22  ,g17
20:12:38  23  ,g18
20:12:38  24  ,g19
20:12:38  25  ,g20
20:12:38  26  ,g21
20:12:38  27  ,g22
20:12:38  28  ,g23
20:12:38  29  ,g24
20:12:38  30  ,g25
20:12:38  31  ,g26
20:12:38  32  ,g27
20:12:38  33  ,g28
20:12:38  34  ,g29
20:12:38  35  ,g30
20:12:38  36  ,g31
20:12:38  37  ,g32
20:12:38  38  ,g33
20:12:38  39  ,g34
20:12:38  40  ,g35
20:12:38  41  ,g36
20:12:38  42  ,g37
20:12:38  43  ,g38
20:12:38  44  ,g39
20:12:38  45  ,g40
20:12:38  46  ,g41
20:12:38  47  FROM modsrc
20:12:38  48  WHERE ydate = '&1'||' '||'&2'
20:12:38  49  AND pair = '&3'
20:12:38  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-11-22'||' '||'12:20:01'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.03
20:12:38 SQL> 
20:12:38 SQL> -- rpt
20:12:38 SQL> -- We should see just 1 row:
20:12:38 SQL> 
20:12:38 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.01
20:12:38 SQL> 
20:12:38 SQL> -- Build the model:
20:12:38 SQL> CREATE OR REPLACE VIEW bme AS
20:12:38   2  SELECT
20:12:38   3  prdate
20:12:38   4  ,gattn
20:12:38   5  ,g00
20:12:38   6  ,g01
20:12:38   7  ,g02
20:12:38   8  ,g03
20:12:38   9  ,g04
20:12:38  10  ,g05
20:12:38  11  ,g06
20:12:38  12  ,g07
20:12:38  13  ,g08
20:12:38  14  ,g09
20:12:38  15  ,g10
20:12:38  16  ,g11
20:12:38  17  ,g12
20:12:38  18  ,g13
20:12:38  19  ,g14
20:12:38  20  ,g15
20:12:38  21  ,g16
20:12:38  22  ,g17
20:12:38  23  ,g18
20:12:38  24  ,g19
20:12:38  25  ,g20
20:12:38  26  ,g21
20:12:38  27  ,g22
20:12:38  28  ,g23
20:12:38  29  ,g24
20:12:38  30  ,g25
20:12:38  31  ,g26
20:12:38  32  ,g27
20:12:38  33  ,g28
20:12:38  34  ,g29
20:12:38  35  ,g30
20:12:38  36  ,g31
20:12:38  37  ,g32
20:12:38  38  ,g33
20:12:38  39  ,g34
20:12:38  40  ,g35
20:12:38  41  ,g36
20:12:38  42  ,g37
20:12:38  43  ,g38
20:12:38  44  ,g39
20:12:38  45  ,g40
20:12:38  46  ,g41
20:12:38  47  FROM modsrc
20:12:38  48  WHERE gattn IN('nup','up')
20:12:38  49  -- Use only rows which are older than 1 day:
20:12:38  50  AND 1+ydate < '&1'||' '||'&2'
20:12:38  51  AND pair = '&3'
20:12:38  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-11-22'||' '||'12:20:01'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:12:38 SQL> 
20:12:38 SQL> -- rpt
20:12:38 SQL> 
20:12:38 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	     6164
up	     3422

Elapsed: 00:00:00.02
20:12:38 SQL> 
20:12:38 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-11-19 21:50:01

Elapsed: 00:00:00.01
20:12:38 SQL> 
20:12:38 SQL> -- Now build model from bme and score sme
20:12:38 SQL> @score1.sql gattn
20:12:38 SQL> --
20:12:38 SQL> -- score1.sql
20:12:38 SQL> --
20:12:38 SQL> 
20:12:38 SQL> -- I use this script to send 5 params to score.sql
20:12:38 SQL> -- which does the heavy lifting of creating an SVM model.
20:12:38 SQL> -- Then at the very end of this script I use the model
20:12:38 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:12:38 SQL> 
20:12:38 SQL> -- I call this script from 2 other scripts:
20:12:38 SQL> -- score1_5min.sql
20:12:38 SQL> -- score1_5min_gattn.sql
20:12:38 SQL> 
20:12:38 SQL> -- The 1st param is the name of the target attribute.
20:12:38 SQL> -- I like to call my target attributes either gatt or gattn.
20:12:38 SQL> 
20:12:38 SQL> -- Demo:
20:12:38 SQL> -- @score1.sql 'gatt'
20:12:38 SQL> -- @score1.sql 'gattn'
20:12:38 SQL> 
20:12:38 SQL> -- Now, I fill up svmc_apply_prep.
20:12:38 SQL> -- I use same model_name used in score.sql
20:12:38 SQL> DEFINE model_name = 'svmfx101'
20:12:38 SQL> DEFINE bldtable	= 'bme'
20:12:38 SQL> DEFINE scoretable = 'sme'
20:12:38 SQL> DEFINE case_id	= 'prdate'
20:12:38 SQL> -- Demo:
20:12:38 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:12:38 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:12:38 SQL> --
20:12:38 SQL> -- score.sql
20:12:38 SQL> --
20:12:38 SQL> 
20:12:38 SQL> -- usage: score.sql
20:12:38 SQL> 
20:12:38 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:12:38 SQL> 
20:12:38 SQL> -- DEFINE target	   = 'gatt'
20:12:38 SQL> -- DEFINE model_name = 'svmfx101'
20:12:38 SQL> -- DEFINE bldtable   = 'bme'
20:12:38 SQL> -- DEFINE scoretable = 'sme'
20:12:38 SQL> -- DEFINE case_id    = 'prdate'
20:12:38 SQL> 
20:12:38 SQL> DEFINE target	= '&1'
20:12:38 SQL> DEFINE model_name = '&2'
20:12:38 SQL> DEFINE bldtable	= '&3'
20:12:38 SQL> DEFINE scoretable = '&4'
20:12:38 SQL> DEFINE case_id	= '&5'
20:12:38 SQL> 
20:12:38 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:12:38 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:12:38 SQL> 
20:12:38 SQL> -- Builds an SVM model using pl/sql.
20:12:38 SQL> 
20:12:38 SQL> -----------------------------------------------------------------------
20:12:38 SQL> --			    BUILD THE MODEL
20:12:38 SQL> -----------------------------------------------------------------------
20:12:38 SQL> 
20:12:38 SQL> -- Cleanup old build data preparation objects for repeat runs
20:12:38 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.01
20:12:38 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:12:38 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:12:38 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.00
20:12:38 SQL> 
20:12:38 SQL> 
20:12:38 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:12:38 SQL> --
20:12:38 SQL> -- DROP	TABLE svmc_settings ;
20:12:38 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:12:38 SQL> -- DELETE svmc_settings;
20:12:38 SQL> 
20:12:38 SQL> -- The default classification algorithm is Naive Bayes. So override
20:12:38 SQL> -- this choice to SVM using a settings table.
20:12:38 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:12:38 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:12:38 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:12:38 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:12:38 SQL> -- models.
20:12:38 SQL> --
20:12:38 SQL> 
20:12:38 SQL> -- Do this once and then comment it out.
20:12:38 SQL> -- That makes script go faster.
20:12:38 SQL> -- BEGIN
20:12:38 SQL> -- -- Populate settings table
20:12:38 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:12:38 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:12:38 SQL> --
20:12:38 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:12:38 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:12:38 SQL> --
20:12:38 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:12:38 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:12:38 SQL> --   COMMIT;
20:12:38 SQL> -- END;
20:12:38 SQL> -- /
20:12:38 SQL> 
20:12:38 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:12:38 SQL> 
20:12:38 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:12:38   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:12:38   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
20:12:38 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:12:38   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:12:38   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:12:38 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:12:38   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:12:38   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:12:38 SQL> 
20:12:38 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:12:38   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:12:38   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:12:38 SQL> 
20:12:38 SQL> --------------------------------
20:12:38 SQL> -- PREPARE BUILD (TRAINING) DATA
20:12:38 SQL> --
20:12:38 SQL> 
20:12:38 SQL> -- 1. Missing Value treatment for all Predictors and
20:12:38 SQL> -- 2. Outlier Treatment and
20:12:38 SQL> -- 3. Normalization are performed below.
20:12:38 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:12:38 SQL> --    normalized here.
20:12:38 SQL> 
20:12:38 SQL> BEGIN
20:12:38   2  	-- Perform missing value treatment for all predictors
20:12:38   3  	-- create miss tables
20:12:38   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:12:38   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:12:38   6  
20:12:38   7  	-- populate miss tables
20:12:38   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:12:38   9  	  miss_table_name => 'svmc_miss_num',
20:12:38  10  	  data_table_name => '&bldtable',
20:12:38  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:12:38  12  
20:12:38  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:12:38  14  	  miss_table_name => 'svmc_miss_cat',
20:12:38  15  	  data_table_name => '&bldtable',
20:12:38  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:12:38  17  
20:12:38  18  	-- xform input data to replace missing values
20:12:38  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:12:38  20  	  miss_table_name => 'svmc_miss_num',
20:12:38  21  	  data_table_name => '&bldtable',
20:12:38  22  	  xform_view_name => 'xformed_build_miss_num');
20:12:38  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:12:38  24  	  miss_table_name => 'svmc_miss_cat',
20:12:38  25  	  data_table_name => '&bldtable',
20:12:38  26  	  xform_view_name => 'xformed_build_miss_cat');
20:12:38  27  
20:12:38  28  	-- Perform outlier treatment.
20:12:38  29  	-- create clip table
20:12:38  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:12:38  31  
20:12:38  32  	-- populate clip table
20:12:38  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:12:38  34  	  clip_table_name => 'svmc_clip',
20:12:38  35  	  data_table_name => '&bldtable',
20:12:38  36  	  tail_frac	  => 0.025,
20:12:38  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:12:38  38  
20:12:38  39  	-- xform input data to winsorized data
20:12:38  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:12:38  41  	  clip_table_name => 'svmc_clip',
20:12:38  42  	  data_table_name => '&bldtable',
20:12:38  43  	  xform_view_name => 'svmc_winsor');
20:12:38  44  
20:12:38  45  	-- create normalization table
20:12:38  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:12:38  47  
20:12:38  48  	-- populate normalization table based on winsorized data
20:12:38  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:12:38  50  	  norm_table_name => 'svmc_norm',
20:12:38  51  	  data_table_name => 'svmc_winsor',
20:12:38  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:12:38  53  
20:12:38  54  	-- normalize the original data
20:12:38  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:12:38  56  	  norm_table_name => 'svmc_norm',
20:12:38  57  	  data_table_name => '&bldtable',
20:12:38  58  	  xform_view_name => 'svmc_build_prep');
20:12:38  59  END;
20:12:38  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.60
20:12:40 SQL> 
20:12:40 SQL> ---------------------
20:12:40 SQL> -- CREATE A NEW MODEL
20:12:40 SQL> --
20:12:40 SQL> -- Cleanup old model with the same name for repeat runs
20:12:40 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:12:40   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:12:40   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.93
20:12:41 SQL> 
20:12:41 SQL> -- Build a new SVM Model
20:12:41 SQL> BEGIN
20:12:41   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:12:41   3  	  model_name	      => '&model_name',
20:12:41   4  	  mining_function     => dbms_data_mining.classification,
20:12:41   5  	  data_table_name     => 'svmc_build_prep',
20:12:41   6  	  case_id_column_name => '&case_id',
20:12:41   7  	  target_column_name  => '&target',
20:12:41   8  	  settings_table_name => 'svmc_settings');
20:12:41   9  END;
20:12:41  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:03.97
20:12:45 SQL> 
20:12:45 SQL> -----------------------------------------------------------------------
20:12:45 SQL> --			       APPLY/score THE MODEL
20:12:45 SQL> -----------------------------------------------------------------------
20:12:45 SQL> 
20:12:45 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:12:45 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:12:45   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:12:45   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:12:45 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:12:45   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:12:45   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:12:45 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:12:45   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:12:45   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:12:45 SQL> -----------------------
20:12:45 SQL> -- PREPARE SCORING DATA
20:12:45 SQL> --
20:12:45 SQL> -- If the data for model creation has been prepared, then the data
20:12:45 SQL> -- to be scored using the model must be prepared in the same manner
20:12:45 SQL> -- in order to obtain meaningful results.
20:12:45 SQL> --
20:12:45 SQL> -- 1. Missing Value treatment for all Predictors and
20:12:45 SQL> -- 2. Normalization
20:12:45 SQL> -- No outlier treatment will be performed during test and apply. The
20:12:45 SQL> -- normalization step is sufficient, since the normalization parameters
20:12:45 SQL> -- already capture the effects of outlier treatment done with build data.
20:12:45 SQL> --
20:12:45 SQL> BEGIN
20:12:45   2  	-- Xform Test data to replace missing values
20:12:45   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:12:45   4  	  miss_table_name => 'svmc_miss_num',
20:12:45   5  	  data_table_name => '&scoretable',
20:12:45   6  	  xform_view_name => 'xformed_apply_miss_num');
20:12:45   7  
20:12:45   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:12:45   9  	  miss_table_name => 'svmc_miss_cat',
20:12:45  10  	  data_table_name => '&scoretable',
20:12:45  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:12:45  12  
20:12:45  13  	-- Normalize the data to be scored
20:12:45  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:12:45  15  	  norm_table_name => 'svmc_norm',
20:12:45  16  	  data_table_name => '&scoretable',
20:12:45  17  	  xform_view_name => 'svmc_apply_prep');
20:12:45  18  END;
20:12:45  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.18
20:12:45 SQL> 
20:12:45 SQL> -- Maybe I already collected a score for this prdate.
20:12:45 SQL> -- DELETE it if I did:
20:12:45 SQL> DELETE svm62scores
20:12:45   2  WHERE score > 0
20:12:45   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:12:45   4  -- I need to supply the target attribute name:
20:12:45   5  AND targ = '&1'
20:12:45   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gattn'

0 rows deleted.

Elapsed: 00:00:00.01
20:12:45 SQL> 
20:12:45 SQL> -- We do a drumroll here:
20:12:45 SQL> 
20:12:45 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:12:45   2  SELECT
20:12:45   3  prdate
20:12:45   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:12:45   5  ,sysdate
20:12:45   6  ,SUBSTR(prdate,1,7)pair
20:12:45   7  ,SUBSTR(prdate,-19)ydate
20:12:45   8  ,'&1'
20:12:45   9  FROM svmc_apply_prep
20:12:45  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gattn'

1 row created.

Elapsed: 00:00:00.06
20:12:45 SQL> @score1_5min.sql	      2011-01-06 01:20:00 aud_usd
20:12:45 SQL> --
20:12:45 SQL> -- score1_5min.sql
20:12:45 SQL> --
20:12:45 SQL> 
20:12:45 SQL> -- Demo:
20:12:45 SQL> -- @score1_5min.sql 2010-12-31 20:45:01 aud_usd
20:12:45 SQL> 
20:12:45 SQL> CREATE OR REPLACE VIEW sme AS
20:12:45   2  SELECT
20:12:45   3  prdate
20:12:45   4  ,NULL gatt
20:12:45   5  ,g00
20:12:45   6  ,g01
20:12:45   7  ,g02
20:12:45   8  ,g03
20:12:45   9  ,g04
20:12:45  10  ,g05
20:12:45  11  ,g06
20:12:45  12  ,g07
20:12:45  13  ,g08
20:12:45  14  ,g09
20:12:45  15  ,g10
20:12:45  16  ,g11
20:12:45  17  ,g12
20:12:45  18  ,g13
20:12:45  19  ,g14
20:12:45  20  ,g15
20:12:45  21  ,g16
20:12:45  22  ,g17
20:12:45  23  ,g18
20:12:45  24  ,g19
20:12:45  25  ,g20
20:12:45  26  ,g21
20:12:45  27  ,g22
20:12:45  28  ,g23
20:12:45  29  ,g24
20:12:45  30  ,g25
20:12:45  31  ,g26
20:12:45  32  ,g27
20:12:45  33  ,g28
20:12:45  34  ,g29
20:12:45  35  ,g30
20:12:45  36  ,g31
20:12:45  37  ,g32
20:12:45  38  ,g33
20:12:45  39  ,g34
20:12:45  40  ,g35
20:12:45  41  ,g36
20:12:45  42  ,g37
20:12:45  43  ,g38
20:12:45  44  ,g39
20:12:45  45  ,g40
20:12:45  46  ,g41
20:12:45  47  FROM modsrc
20:12:45  48  WHERE ydate = '&1'||' '||'&2'
20:12:45  49  AND pair = '&3'
20:12:45  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2011-01-06'||' '||'01:20:00'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:12:45 SQL> 
20:12:45 SQL> -- rpt
20:12:45 SQL> -- We should see just 1 row:
20:12:45 SQL> 
20:12:45 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.01
20:12:45 SQL> 
20:12:45 SQL> -- Build the model:
20:12:45 SQL> CREATE OR REPLACE VIEW bme AS
20:12:45   2  SELECT
20:12:45   3  prdate
20:12:45   4  ,gatt
20:12:45   5  ,g00
20:12:45   6  ,g01
20:12:45   7  ,g02
20:12:45   8  ,g03
20:12:45   9  ,g04
20:12:45  10  ,g05
20:12:45  11  ,g06
20:12:45  12  ,g07
20:12:45  13  ,g08
20:12:45  14  ,g09
20:12:45  15  ,g10
20:12:45  16  ,g11
20:12:45  17  ,g12
20:12:45  18  ,g13
20:12:45  19  ,g14
20:12:45  20  ,g15
20:12:45  21  ,g16
20:12:45  22  ,g17
20:12:45  23  ,g18
20:12:45  24  ,g19
20:12:45  25  ,g20
20:12:45  26  ,g21
20:12:45  27  ,g22
20:12:45  28  ,g23
20:12:45  29  ,g24
20:12:45  30  ,g25
20:12:45  31  ,g26
20:12:45  32  ,g27
20:12:45  33  ,g28
20:12:45  34  ,g29
20:12:45  35  ,g30
20:12:45  36  ,g31
20:12:45  37  ,g32
20:12:45  38  ,g33
20:12:45  39  ,g34
20:12:45  40  ,g35
20:12:45  41  ,g36
20:12:45  42  ,g37
20:12:45  43  ,g38
20:12:45  44  ,g39
20:12:45  45  ,g40
20:12:45  46  ,g41
20:12:45  47  FROM modsrc
20:12:45  48  WHERE gatt IN('nup','up')
20:12:45  49  -- Use only rows which are older than 1 day:
20:12:45  50  AND 1+ydate < '&1'||' '||'&2'
20:12:45  51  AND pair = '&3'
20:12:45  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2011-01-06'||' '||'01:20:00'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.05
20:12:45 SQL> 
20:12:45 SQL> -- rpt
20:12:45 SQL> 
20:12:45 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt;

GAT COUNT(PRDATE)
--- -------------
nup	    11668
up	     7056

Elapsed: 00:00:00.02
20:12:45 SQL> 
20:12:45 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2011-01-05 01:15:00

Elapsed: 00:00:00.02
20:12:45 SQL> 
20:12:45 SQL> -- Now build model from bme and score sme
20:12:45 SQL> @score1.sql gatt
20:12:45 SQL> --
20:12:45 SQL> -- score1.sql
20:12:45 SQL> --
20:12:45 SQL> 
20:12:45 SQL> -- I use this script to send 5 params to score.sql
20:12:45 SQL> -- which does the heavy lifting of creating an SVM model.
20:12:45 SQL> -- Then at the very end of this script I use the model
20:12:45 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:12:45 SQL> 
20:12:45 SQL> -- I call this script from 2 other scripts:
20:12:45 SQL> -- score1_5min.sql
20:12:45 SQL> -- score1_5min_gattn.sql
20:12:45 SQL> 
20:12:45 SQL> -- The 1st param is the name of the target attribute.
20:12:45 SQL> -- I like to call my target attributes either gatt or gattn.
20:12:45 SQL> 
20:12:45 SQL> -- Demo:
20:12:45 SQL> -- @score1.sql 'gatt'
20:12:45 SQL> -- @score1.sql 'gattn'
20:12:45 SQL> 
20:12:45 SQL> -- Now, I fill up svmc_apply_prep.
20:12:45 SQL> -- I use same model_name used in score.sql
20:12:45 SQL> DEFINE model_name = 'svmfx101'
20:12:45 SQL> DEFINE bldtable	= 'bme'
20:12:45 SQL> DEFINE scoretable = 'sme'
20:12:45 SQL> DEFINE case_id	= 'prdate'
20:12:45 SQL> -- Demo:
20:12:45 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:12:45 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:12:45 SQL> --
20:12:45 SQL> -- score.sql
20:12:45 SQL> --
20:12:45 SQL> 
20:12:45 SQL> -- usage: score.sql
20:12:45 SQL> 
20:12:45 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:12:45 SQL> 
20:12:45 SQL> -- DEFINE target	   = 'gatt'
20:12:45 SQL> -- DEFINE model_name = 'svmfx101'
20:12:45 SQL> -- DEFINE bldtable   = 'bme'
20:12:45 SQL> -- DEFINE scoretable = 'sme'
20:12:45 SQL> -- DEFINE case_id    = 'prdate'
20:12:45 SQL> 
20:12:45 SQL> DEFINE target	= '&1'
20:12:45 SQL> DEFINE model_name = '&2'
20:12:45 SQL> DEFINE bldtable	= '&3'
20:12:45 SQL> DEFINE scoretable = '&4'
20:12:45 SQL> DEFINE case_id	= '&5'
20:12:45 SQL> 
20:12:45 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:12:45 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:12:45 SQL> 
20:12:45 SQL> -- Builds an SVM model using pl/sql.
20:12:45 SQL> 
20:12:45 SQL> -----------------------------------------------------------------------
20:12:45 SQL> --			    BUILD THE MODEL
20:12:45 SQL> -----------------------------------------------------------------------
20:12:45 SQL> 
20:12:45 SQL> -- Cleanup old build data preparation objects for repeat runs
20:12:45 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.00
20:12:45 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:12:45 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:12:45 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.01
20:12:45 SQL> 
20:12:45 SQL> 
20:12:45 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:12:45 SQL> --
20:12:45 SQL> -- DROP	TABLE svmc_settings ;
20:12:45 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:12:45 SQL> -- DELETE svmc_settings;
20:12:45 SQL> 
20:12:45 SQL> -- The default classification algorithm is Naive Bayes. So override
20:12:45 SQL> -- this choice to SVM using a settings table.
20:12:45 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:12:45 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:12:45 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:12:45 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:12:45 SQL> -- models.
20:12:45 SQL> --
20:12:45 SQL> 
20:12:45 SQL> -- Do this once and then comment it out.
20:12:45 SQL> -- That makes script go faster.
20:12:45 SQL> -- BEGIN
20:12:45 SQL> -- -- Populate settings table
20:12:45 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:12:45 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:12:45 SQL> --
20:12:45 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:12:45 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:12:45 SQL> --
20:12:45 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:12:45 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:12:45 SQL> --   COMMIT;
20:12:45 SQL> -- END;
20:12:45 SQL> -- /
20:12:45 SQL> 
20:12:45 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:12:45 SQL> 
20:12:45 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:12:45   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:12:45   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:12:45 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:12:45   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:12:45   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:12:45 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:12:45   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:12:45   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:12:45 SQL> 
20:12:45 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:12:45   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:12:45   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:12:45 SQL> 
20:12:45 SQL> --------------------------------
20:12:45 SQL> -- PREPARE BUILD (TRAINING) DATA
20:12:45 SQL> --
20:12:45 SQL> 
20:12:45 SQL> -- 1. Missing Value treatment for all Predictors and
20:12:45 SQL> -- 2. Outlier Treatment and
20:12:45 SQL> -- 3. Normalization are performed below.
20:12:45 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:12:45 SQL> --    normalized here.
20:12:45 SQL> 
20:12:45 SQL> BEGIN
20:12:45   2  	-- Perform missing value treatment for all predictors
20:12:45   3  	-- create miss tables
20:12:45   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:12:45   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:12:45   6  
20:12:45   7  	-- populate miss tables
20:12:45   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:12:45   9  	  miss_table_name => 'svmc_miss_num',
20:12:45  10  	  data_table_name => '&bldtable',
20:12:45  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:12:45  12  
20:12:45  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:12:45  14  	  miss_table_name => 'svmc_miss_cat',
20:12:45  15  	  data_table_name => '&bldtable',
20:12:45  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:12:45  17  
20:12:45  18  	-- xform input data to replace missing values
20:12:45  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:12:45  20  	  miss_table_name => 'svmc_miss_num',
20:12:45  21  	  data_table_name => '&bldtable',
20:12:45  22  	  xform_view_name => 'xformed_build_miss_num');
20:12:45  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:12:45  24  	  miss_table_name => 'svmc_miss_cat',
20:12:45  25  	  data_table_name => '&bldtable',
20:12:45  26  	  xform_view_name => 'xformed_build_miss_cat');
20:12:45  27  
20:12:45  28  	-- Perform outlier treatment.
20:12:45  29  	-- create clip table
20:12:45  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:12:45  31  
20:12:45  32  	-- populate clip table
20:12:45  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:12:45  34  	  clip_table_name => 'svmc_clip',
20:12:45  35  	  data_table_name => '&bldtable',
20:12:45  36  	  tail_frac	  => 0.025,
20:12:45  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:12:45  38  
20:12:45  39  	-- xform input data to winsorized data
20:12:45  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:12:45  41  	  clip_table_name => 'svmc_clip',
20:12:45  42  	  data_table_name => '&bldtable',
20:12:45  43  	  xform_view_name => 'svmc_winsor');
20:12:45  44  
20:12:45  45  	-- create normalization table
20:12:45  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:12:45  47  
20:12:45  48  	-- populate normalization table based on winsorized data
20:12:45  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:12:45  50  	  norm_table_name => 'svmc_norm',
20:12:45  51  	  data_table_name => 'svmc_winsor',
20:12:45  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:12:45  53  
20:12:45  54  	-- normalize the original data
20:12:45  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:12:45  56  	  norm_table_name => 'svmc_norm',
20:12:45  57  	  data_table_name => '&bldtable',
20:12:45  58  	  xform_view_name => 'svmc_build_prep');
20:12:45  59  END;
20:12:45  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:02.36
20:12:48 SQL> 
20:12:48 SQL> ---------------------
20:12:48 SQL> -- CREATE A NEW MODEL
20:12:48 SQL> --
20:12:48 SQL> -- Cleanup old model with the same name for repeat runs
20:12:48 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:12:48   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:12:48   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.10
20:12:49 SQL> 
20:12:49 SQL> -- Build a new SVM Model
20:12:49 SQL> BEGIN
20:12:49   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:12:49   3  	  model_name	      => '&model_name',
20:12:49   4  	  mining_function     => dbms_data_mining.classification,
20:12:49   5  	  data_table_name     => 'svmc_build_prep',
20:12:49   6  	  case_id_column_name => '&case_id',
20:12:49   7  	  target_column_name  => '&target',
20:12:49   8  	  settings_table_name => 'svmc_settings');
20:12:49   9  END;
20:12:49  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:03.69
20:12:52 SQL> 
20:12:52 SQL> -----------------------------------------------------------------------
20:12:52 SQL> --			       APPLY/score THE MODEL
20:12:52 SQL> -----------------------------------------------------------------------
20:12:52 SQL> 
20:12:52 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:12:52 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:12:52   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:12:52   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.12
20:12:53 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:12:53   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:12:53   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.13
20:12:53 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:12:53   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:12:53   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
20:12:53 SQL> -----------------------
20:12:53 SQL> -- PREPARE SCORING DATA
20:12:53 SQL> --
20:12:53 SQL> -- If the data for model creation has been prepared, then the data
20:12:53 SQL> -- to be scored using the model must be prepared in the same manner
20:12:53 SQL> -- in order to obtain meaningful results.
20:12:53 SQL> --
20:12:53 SQL> -- 1. Missing Value treatment for all Predictors and
20:12:53 SQL> -- 2. Normalization
20:12:53 SQL> -- No outlier treatment will be performed during test and apply. The
20:12:53 SQL> -- normalization step is sufficient, since the normalization parameters
20:12:53 SQL> -- already capture the effects of outlier treatment done with build data.
20:12:53 SQL> --
20:12:53 SQL> BEGIN
20:12:53   2  	-- Xform Test data to replace missing values
20:12:53   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:12:53   4  	  miss_table_name => 'svmc_miss_num',
20:12:53   5  	  data_table_name => '&scoretable',
20:12:53   6  	  xform_view_name => 'xformed_apply_miss_num');
20:12:53   7  
20:12:53   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:12:53   9  	  miss_table_name => 'svmc_miss_cat',
20:12:53  10  	  data_table_name => '&scoretable',
20:12:53  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:12:53  12  
20:12:53  13  	-- Normalize the data to be scored
20:12:53  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:12:53  15  	  norm_table_name => 'svmc_norm',
20:12:53  16  	  data_table_name => '&scoretable',
20:12:53  17  	  xform_view_name => 'svmc_apply_prep');
20:12:53  18  END;
20:12:53  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.18
20:12:53 SQL> 
20:12:53 SQL> -- Maybe I already collected a score for this prdate.
20:12:53 SQL> -- DELETE it if I did:
20:12:53 SQL> DELETE svm62scores
20:12:53   2  WHERE score > 0
20:12:53   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:12:53   4  -- I need to supply the target attribute name:
20:12:53   5  AND targ = '&1'
20:12:53   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gatt'

0 rows deleted.

Elapsed: 00:00:00.01
20:12:53 SQL> 
20:12:53 SQL> -- We do a drumroll here:
20:12:53 SQL> 
20:12:53 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:12:53   2  SELECT
20:12:53   3  prdate
20:12:53   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:12:53   5  ,sysdate
20:12:53   6  ,SUBSTR(prdate,1,7)pair
20:12:53   7  ,SUBSTR(prdate,-19)ydate
20:12:53   8  ,'&1'
20:12:53   9  FROM svmc_apply_prep
20:12:53  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gatt'

1 row created.

Elapsed: 00:00:00.05
20:12:53 SQL> @score1_5min_gattn.sql	2010-11-18 07:40:01 aud_usd
20:12:53 SQL> --
20:12:53 SQL> -- score1_5min_gattn.sql
20:12:53 SQL> --
20:12:53 SQL> 
20:12:53 SQL> -- Demo:
20:12:53 SQL> -- @score1_5min_gattn.sql 2010-12-31 20:45:01 aud_usd
20:12:53 SQL> 
20:12:53 SQL> CREATE OR REPLACE VIEW sme AS
20:12:53   2  SELECT
20:12:53   3  prdate
20:12:53   4  ,NULL gattn
20:12:53   5  ,g00
20:12:53   6  ,g01
20:12:53   7  ,g02
20:12:53   8  ,g03
20:12:53   9  ,g04
20:12:53  10  ,g05
20:12:53  11  ,g06
20:12:53  12  ,g07
20:12:53  13  ,g08
20:12:53  14  ,g09
20:12:53  15  ,g10
20:12:53  16  ,g11
20:12:53  17  ,g12
20:12:53  18  ,g13
20:12:53  19  ,g14
20:12:53  20  ,g15
20:12:53  21  ,g16
20:12:53  22  ,g17
20:12:53  23  ,g18
20:12:53  24  ,g19
20:12:53  25  ,g20
20:12:53  26  ,g21
20:12:53  27  ,g22
20:12:53  28  ,g23
20:12:53  29  ,g24
20:12:53  30  ,g25
20:12:53  31  ,g26
20:12:53  32  ,g27
20:12:53  33  ,g28
20:12:53  34  ,g29
20:12:53  35  ,g30
20:12:53  36  ,g31
20:12:53  37  ,g32
20:12:53  38  ,g33
20:12:53  39  ,g34
20:12:53  40  ,g35
20:12:53  41  ,g36
20:12:53  42  ,g37
20:12:53  43  ,g38
20:12:53  44  ,g39
20:12:53  45  ,g40
20:12:53  46  ,g41
20:12:53  47  FROM modsrc
20:12:53  48  WHERE ydate = '&1'||' '||'&2'
20:12:53  49  AND pair = '&3'
20:12:53  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-11-18'||' '||'07:40:01'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:12:53 SQL> 
20:12:53 SQL> -- rpt
20:12:53 SQL> -- We should see just 1 row:
20:12:53 SQL> 
20:12:53 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.01
20:12:53 SQL> 
20:12:53 SQL> -- Build the model:
20:12:53 SQL> CREATE OR REPLACE VIEW bme AS
20:12:53   2  SELECT
20:12:53   3  prdate
20:12:53   4  ,gattn
20:12:53   5  ,g00
20:12:53   6  ,g01
20:12:53   7  ,g02
20:12:53   8  ,g03
20:12:53   9  ,g04
20:12:53  10  ,g05
20:12:53  11  ,g06
20:12:53  12  ,g07
20:12:53  13  ,g08
20:12:53  14  ,g09
20:12:53  15  ,g10
20:12:53  16  ,g11
20:12:53  17  ,g12
20:12:53  18  ,g13
20:12:53  19  ,g14
20:12:53  20  ,g15
20:12:53  21  ,g16
20:12:53  22  ,g17
20:12:53  23  ,g18
20:12:53  24  ,g19
20:12:53  25  ,g20
20:12:53  26  ,g21
20:12:53  27  ,g22
20:12:53  28  ,g23
20:12:53  29  ,g24
20:12:53  30  ,g25
20:12:53  31  ,g26
20:12:53  32  ,g27
20:12:53  33  ,g28
20:12:53  34  ,g29
20:12:53  35  ,g30
20:12:53  36  ,g31
20:12:53  37  ,g32
20:12:53  38  ,g33
20:12:53  39  ,g34
20:12:53  40  ,g35
20:12:53  41  ,g36
20:12:53  42  ,g37
20:12:53  43  ,g38
20:12:53  44  ,g39
20:12:53  45  ,g40
20:12:53  46  ,g41
20:12:53  47  FROM modsrc
20:12:53  48  WHERE gattn IN('nup','up')
20:12:53  49  -- Use only rows which are older than 1 day:
20:12:53  50  AND 1+ydate < '&1'||' '||'&2'
20:12:53  51  AND pair = '&3'
20:12:53  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-11-18'||' '||'07:40:01'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.05
20:12:53 SQL> 
20:12:53 SQL> -- rpt
20:12:53 SQL> 
20:12:53 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	     5567
up	     3282

Elapsed: 00:00:00.02
20:12:53 SQL> 
20:12:53 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-11-17 07:35:01

Elapsed: 00:00:00.01
20:12:53 SQL> 
20:12:53 SQL> -- Now build model from bme and score sme
20:12:53 SQL> @score1.sql gattn
20:12:53 SQL> --
20:12:53 SQL> -- score1.sql
20:12:53 SQL> --
20:12:53 SQL> 
20:12:53 SQL> -- I use this script to send 5 params to score.sql
20:12:53 SQL> -- which does the heavy lifting of creating an SVM model.
20:12:53 SQL> -- Then at the very end of this script I use the model
20:12:53 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:12:53 SQL> 
20:12:53 SQL> -- I call this script from 2 other scripts:
20:12:53 SQL> -- score1_5min.sql
20:12:53 SQL> -- score1_5min_gattn.sql
20:12:53 SQL> 
20:12:53 SQL> -- The 1st param is the name of the target attribute.
20:12:53 SQL> -- I like to call my target attributes either gatt or gattn.
20:12:53 SQL> 
20:12:53 SQL> -- Demo:
20:12:53 SQL> -- @score1.sql 'gatt'
20:12:53 SQL> -- @score1.sql 'gattn'
20:12:53 SQL> 
20:12:53 SQL> -- Now, I fill up svmc_apply_prep.
20:12:53 SQL> -- I use same model_name used in score.sql
20:12:53 SQL> DEFINE model_name = 'svmfx101'
20:12:53 SQL> DEFINE bldtable	= 'bme'
20:12:53 SQL> DEFINE scoretable = 'sme'
20:12:53 SQL> DEFINE case_id	= 'prdate'
20:12:53 SQL> -- Demo:
20:12:53 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:12:53 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:12:53 SQL> --
20:12:53 SQL> -- score.sql
20:12:53 SQL> --
20:12:53 SQL> 
20:12:53 SQL> -- usage: score.sql
20:12:53 SQL> 
20:12:53 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:12:53 SQL> 
20:12:53 SQL> -- DEFINE target	   = 'gatt'
20:12:53 SQL> -- DEFINE model_name = 'svmfx101'
20:12:53 SQL> -- DEFINE bldtable   = 'bme'
20:12:53 SQL> -- DEFINE scoretable = 'sme'
20:12:53 SQL> -- DEFINE case_id    = 'prdate'
20:12:53 SQL> 
20:12:53 SQL> DEFINE target	= '&1'
20:12:53 SQL> DEFINE model_name = '&2'
20:12:53 SQL> DEFINE bldtable	= '&3'
20:12:53 SQL> DEFINE scoretable = '&4'
20:12:53 SQL> DEFINE case_id	= '&5'
20:12:53 SQL> 
20:12:53 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:12:53 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:12:53 SQL> 
20:12:53 SQL> -- Builds an SVM model using pl/sql.
20:12:53 SQL> 
20:12:53 SQL> -----------------------------------------------------------------------
20:12:53 SQL> --			    BUILD THE MODEL
20:12:53 SQL> -----------------------------------------------------------------------
20:12:53 SQL> 
20:12:53 SQL> -- Cleanup old build data preparation objects for repeat runs
20:12:53 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.00
20:12:53 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:12:53 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:12:53 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.00
20:12:53 SQL> 
20:12:53 SQL> 
20:12:53 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:12:53 SQL> --
20:12:53 SQL> -- DROP	TABLE svmc_settings ;
20:12:53 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:12:53 SQL> -- DELETE svmc_settings;
20:12:53 SQL> 
20:12:53 SQL> -- The default classification algorithm is Naive Bayes. So override
20:12:53 SQL> -- this choice to SVM using a settings table.
20:12:53 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:12:53 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:12:53 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:12:53 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:12:53 SQL> -- models.
20:12:53 SQL> --
20:12:53 SQL> 
20:12:53 SQL> -- Do this once and then comment it out.
20:12:53 SQL> -- That makes script go faster.
20:12:53 SQL> -- BEGIN
20:12:53 SQL> -- -- Populate settings table
20:12:53 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:12:53 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:12:53 SQL> --
20:12:53 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:12:53 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:12:53 SQL> --
20:12:53 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:12:53 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:12:53 SQL> --   COMMIT;
20:12:53 SQL> -- END;
20:12:53 SQL> -- /
20:12:53 SQL> 
20:12:53 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:12:53 SQL> 
20:12:53 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:12:53   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:12:53   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:12:53 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:12:53   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:12:53   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:12:53 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:12:53   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:12:53   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:12:53 SQL> 
20:12:53 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:12:53   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:12:53   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:12:53 SQL> 
20:12:53 SQL> --------------------------------
20:12:53 SQL> -- PREPARE BUILD (TRAINING) DATA
20:12:53 SQL> --
20:12:53 SQL> 
20:12:53 SQL> -- 1. Missing Value treatment for all Predictors and
20:12:53 SQL> -- 2. Outlier Treatment and
20:12:53 SQL> -- 3. Normalization are performed below.
20:12:53 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:12:53 SQL> --    normalized here.
20:12:53 SQL> 
20:12:53 SQL> BEGIN
20:12:53   2  	-- Perform missing value treatment for all predictors
20:12:53   3  	-- create miss tables
20:12:53   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:12:53   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:12:53   6  
20:12:53   7  	-- populate miss tables
20:12:53   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:12:53   9  	  miss_table_name => 'svmc_miss_num',
20:12:53  10  	  data_table_name => '&bldtable',
20:12:53  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:12:53  12  
20:12:53  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:12:53  14  	  miss_table_name => 'svmc_miss_cat',
20:12:53  15  	  data_table_name => '&bldtable',
20:12:53  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:12:53  17  
20:12:53  18  	-- xform input data to replace missing values
20:12:53  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:12:53  20  	  miss_table_name => 'svmc_miss_num',
20:12:53  21  	  data_table_name => '&bldtable',
20:12:53  22  	  xform_view_name => 'xformed_build_miss_num');
20:12:53  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:12:53  24  	  miss_table_name => 'svmc_miss_cat',
20:12:53  25  	  data_table_name => '&bldtable',
20:12:53  26  	  xform_view_name => 'xformed_build_miss_cat');
20:12:53  27  
20:12:53  28  	-- Perform outlier treatment.
20:12:53  29  	-- create clip table
20:12:53  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:12:53  31  
20:12:53  32  	-- populate clip table
20:12:53  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:12:53  34  	  clip_table_name => 'svmc_clip',
20:12:53  35  	  data_table_name => '&bldtable',
20:12:53  36  	  tail_frac	  => 0.025,
20:12:53  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:12:53  38  
20:12:53  39  	-- xform input data to winsorized data
20:12:53  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:12:53  41  	  clip_table_name => 'svmc_clip',
20:12:53  42  	  data_table_name => '&bldtable',
20:12:53  43  	  xform_view_name => 'svmc_winsor');
20:12:53  44  
20:12:53  45  	-- create normalization table
20:12:53  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:12:53  47  
20:12:53  48  	-- populate normalization table based on winsorized data
20:12:53  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:12:53  50  	  norm_table_name => 'svmc_norm',
20:12:53  51  	  data_table_name => 'svmc_winsor',
20:12:53  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:12:53  53  
20:12:53  54  	-- normalize the original data
20:12:53  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:12:53  56  	  norm_table_name => 'svmc_norm',
20:12:53  57  	  data_table_name => '&bldtable',
20:12:53  58  	  xform_view_name => 'svmc_build_prep');
20:12:53  59  END;
20:12:53  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:02.45
20:12:56 SQL> 
20:12:56 SQL> ---------------------
20:12:56 SQL> -- CREATE A NEW MODEL
20:12:56 SQL> --
20:12:56 SQL> -- Cleanup old model with the same name for repeat runs
20:12:56 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:12:56   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:12:56   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.94
20:12:57 SQL> 
20:12:57 SQL> -- Build a new SVM Model
20:12:57 SQL> BEGIN
20:12:57   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:12:57   3  	  model_name	      => '&model_name',
20:12:57   4  	  mining_function     => dbms_data_mining.classification,
20:12:57   5  	  data_table_name     => 'svmc_build_prep',
20:12:57   6  	  case_id_column_name => '&case_id',
20:12:57   7  	  target_column_name  => '&target',
20:12:57   8  	  settings_table_name => 'svmc_settings');
20:12:57   9  END;
20:12:57  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:04.32
20:13:01 SQL> 
20:13:01 SQL> -----------------------------------------------------------------------
20:13:01 SQL> --			       APPLY/score THE MODEL
20:13:01 SQL> -----------------------------------------------------------------------
20:13:01 SQL> 
20:13:01 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:13:01 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:13:01   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:13:01   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:13:01 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:13:01   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:13:01   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:13:01 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:13:01   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:13:01   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:13:01 SQL> -----------------------
20:13:01 SQL> -- PREPARE SCORING DATA
20:13:01 SQL> --
20:13:01 SQL> -- If the data for model creation has been prepared, then the data
20:13:01 SQL> -- to be scored using the model must be prepared in the same manner
20:13:01 SQL> -- in order to obtain meaningful results.
20:13:01 SQL> --
20:13:01 SQL> -- 1. Missing Value treatment for all Predictors and
20:13:01 SQL> -- 2. Normalization
20:13:01 SQL> -- No outlier treatment will be performed during test and apply. The
20:13:01 SQL> -- normalization step is sufficient, since the normalization parameters
20:13:01 SQL> -- already capture the effects of outlier treatment done with build data.
20:13:01 SQL> --
20:13:01 SQL> BEGIN
20:13:01   2  	-- Xform Test data to replace missing values
20:13:01   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:13:01   4  	  miss_table_name => 'svmc_miss_num',
20:13:01   5  	  data_table_name => '&scoretable',
20:13:01   6  	  xform_view_name => 'xformed_apply_miss_num');
20:13:01   7  
20:13:01   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:13:01   9  	  miss_table_name => 'svmc_miss_cat',
20:13:01  10  	  data_table_name => '&scoretable',
20:13:01  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:13:01  12  
20:13:01  13  	-- Normalize the data to be scored
20:13:01  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:13:01  15  	  norm_table_name => 'svmc_norm',
20:13:01  16  	  data_table_name => '&scoretable',
20:13:01  17  	  xform_view_name => 'svmc_apply_prep');
20:13:01  18  END;
20:13:01  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.20
20:13:01 SQL> 
20:13:01 SQL> -- Maybe I already collected a score for this prdate.
20:13:01 SQL> -- DELETE it if I did:
20:13:01 SQL> DELETE svm62scores
20:13:01   2  WHERE score > 0
20:13:01   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:13:01   4  -- I need to supply the target attribute name:
20:13:01   5  AND targ = '&1'
20:13:01   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gattn'

0 rows deleted.

Elapsed: 00:00:00.03
20:13:01 SQL> 
20:13:01 SQL> -- We do a drumroll here:
20:13:01 SQL> 
20:13:01 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:13:01   2  SELECT
20:13:01   3  prdate
20:13:01   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:13:01   5  ,sysdate
20:13:01   6  ,SUBSTR(prdate,1,7)pair
20:13:01   7  ,SUBSTR(prdate,-19)ydate
20:13:01   8  ,'&1'
20:13:01   9  FROM svmc_apply_prep
20:13:01  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gattn'

1 row created.

Elapsed: 00:00:00.05
20:13:01 SQL> @score1_5min.sql	      2010-11-26 04:35:01 aud_usd
20:13:01 SQL> --
20:13:01 SQL> -- score1_5min.sql
20:13:01 SQL> --
20:13:01 SQL> 
20:13:01 SQL> -- Demo:
20:13:01 SQL> -- @score1_5min.sql 2010-12-31 20:45:01 aud_usd
20:13:01 SQL> 
20:13:01 SQL> CREATE OR REPLACE VIEW sme AS
20:13:01   2  SELECT
20:13:01   3  prdate
20:13:01   4  ,NULL gatt
20:13:01   5  ,g00
20:13:01   6  ,g01
20:13:01   7  ,g02
20:13:01   8  ,g03
20:13:01   9  ,g04
20:13:01  10  ,g05
20:13:01  11  ,g06
20:13:01  12  ,g07
20:13:01  13  ,g08
20:13:01  14  ,g09
20:13:01  15  ,g10
20:13:01  16  ,g11
20:13:01  17  ,g12
20:13:01  18  ,g13
20:13:01  19  ,g14
20:13:01  20  ,g15
20:13:01  21  ,g16
20:13:01  22  ,g17
20:13:01  23  ,g18
20:13:01  24  ,g19
20:13:01  25  ,g20
20:13:01  26  ,g21
20:13:01  27  ,g22
20:13:01  28  ,g23
20:13:01  29  ,g24
20:13:01  30  ,g25
20:13:01  31  ,g26
20:13:01  32  ,g27
20:13:01  33  ,g28
20:13:01  34  ,g29
20:13:01  35  ,g30
20:13:01  36  ,g31
20:13:01  37  ,g32
20:13:01  38  ,g33
20:13:01  39  ,g34
20:13:01  40  ,g35
20:13:01  41  ,g36
20:13:01  42  ,g37
20:13:01  43  ,g38
20:13:01  44  ,g39
20:13:01  45  ,g40
20:13:01  46  ,g41
20:13:01  47  FROM modsrc
20:13:01  48  WHERE ydate = '&1'||' '||'&2'
20:13:01  49  AND pair = '&3'
20:13:01  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-11-26'||' '||'04:35:01'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.05
20:13:01 SQL> 
20:13:01 SQL> -- rpt
20:13:01 SQL> -- We should see just 1 row:
20:13:01 SQL> 
20:13:01 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.02
20:13:01 SQL> 
20:13:01 SQL> -- Build the model:
20:13:01 SQL> CREATE OR REPLACE VIEW bme AS
20:13:01   2  SELECT
20:13:01   3  prdate
20:13:01   4  ,gatt
20:13:01   5  ,g00
20:13:01   6  ,g01
20:13:01   7  ,g02
20:13:01   8  ,g03
20:13:01   9  ,g04
20:13:01  10  ,g05
20:13:01  11  ,g06
20:13:01  12  ,g07
20:13:01  13  ,g08
20:13:01  14  ,g09
20:13:01  15  ,g10
20:13:01  16  ,g11
20:13:01  17  ,g12
20:13:01  18  ,g13
20:13:01  19  ,g14
20:13:01  20  ,g15
20:13:01  21  ,g16
20:13:01  22  ,g17
20:13:01  23  ,g18
20:13:01  24  ,g19
20:13:01  25  ,g20
20:13:01  26  ,g21
20:13:01  27  ,g22
20:13:01  28  ,g23
20:13:01  29  ,g24
20:13:01  30  ,g25
20:13:01  31  ,g26
20:13:01  32  ,g27
20:13:01  33  ,g28
20:13:01  34  ,g29
20:13:01  35  ,g30
20:13:01  36  ,g31
20:13:01  37  ,g32
20:13:01  38  ,g33
20:13:01  39  ,g34
20:13:01  40  ,g35
20:13:01  41  ,g36
20:13:01  42  ,g37
20:13:01  43  ,g38
20:13:01  44  ,g39
20:13:01  45  ,g40
20:13:01  46  ,g41
20:13:01  47  FROM modsrc
20:13:01  48  WHERE gatt IN('nup','up')
20:13:01  49  -- Use only rows which are older than 1 day:
20:13:01  50  AND 1+ydate < '&1'||' '||'&2'
20:13:01  51  AND pair = '&3'
20:13:01  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-11-26'||' '||'04:35:01'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.05
20:13:01 SQL> 
20:13:01 SQL> -- rpt
20:13:01 SQL> 
20:13:01 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt;

GAT COUNT(PRDATE)
--- -------------
nup	     6477
up	     4065

Elapsed: 00:00:00.02
20:13:01 SQL> 
20:13:01 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-11-25 04:30:01

Elapsed: 00:00:00.01
20:13:01 SQL> 
20:13:01 SQL> -- Now build model from bme and score sme
20:13:01 SQL> @score1.sql gatt
20:13:01 SQL> --
20:13:01 SQL> -- score1.sql
20:13:01 SQL> --
20:13:01 SQL> 
20:13:01 SQL> -- I use this script to send 5 params to score.sql
20:13:01 SQL> -- which does the heavy lifting of creating an SVM model.
20:13:01 SQL> -- Then at the very end of this script I use the model
20:13:01 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:13:01 SQL> 
20:13:01 SQL> -- I call this script from 2 other scripts:
20:13:01 SQL> -- score1_5min.sql
20:13:01 SQL> -- score1_5min_gattn.sql
20:13:01 SQL> 
20:13:01 SQL> -- The 1st param is the name of the target attribute.
20:13:01 SQL> -- I like to call my target attributes either gatt or gattn.
20:13:01 SQL> 
20:13:01 SQL> -- Demo:
20:13:01 SQL> -- @score1.sql 'gatt'
20:13:01 SQL> -- @score1.sql 'gattn'
20:13:01 SQL> 
20:13:01 SQL> -- Now, I fill up svmc_apply_prep.
20:13:01 SQL> -- I use same model_name used in score.sql
20:13:01 SQL> DEFINE model_name = 'svmfx101'
20:13:01 SQL> DEFINE bldtable	= 'bme'
20:13:01 SQL> DEFINE scoretable = 'sme'
20:13:01 SQL> DEFINE case_id	= 'prdate'
20:13:01 SQL> -- Demo:
20:13:01 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:13:01 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:13:01 SQL> --
20:13:01 SQL> -- score.sql
20:13:01 SQL> --
20:13:01 SQL> 
20:13:01 SQL> -- usage: score.sql
20:13:01 SQL> 
20:13:01 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:13:01 SQL> 
20:13:01 SQL> -- DEFINE target	   = 'gatt'
20:13:01 SQL> -- DEFINE model_name = 'svmfx101'
20:13:01 SQL> -- DEFINE bldtable   = 'bme'
20:13:01 SQL> -- DEFINE scoretable = 'sme'
20:13:01 SQL> -- DEFINE case_id    = 'prdate'
20:13:01 SQL> 
20:13:01 SQL> DEFINE target	= '&1'
20:13:01 SQL> DEFINE model_name = '&2'
20:13:01 SQL> DEFINE bldtable	= '&3'
20:13:01 SQL> DEFINE scoretable = '&4'
20:13:01 SQL> DEFINE case_id	= '&5'
20:13:01 SQL> 
20:13:01 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:13:01 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:13:01 SQL> 
20:13:01 SQL> -- Builds an SVM model using pl/sql.
20:13:01 SQL> 
20:13:01 SQL> -----------------------------------------------------------------------
20:13:01 SQL> --			    BUILD THE MODEL
20:13:01 SQL> -----------------------------------------------------------------------
20:13:01 SQL> 
20:13:01 SQL> -- Cleanup old build data preparation objects for repeat runs
20:13:01 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.00
20:13:01 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:13:01 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:13:01 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.00
20:13:01 SQL> 
20:13:01 SQL> 
20:13:01 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:13:01 SQL> --
20:13:01 SQL> -- DROP	TABLE svmc_settings ;
20:13:01 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:13:01 SQL> -- DELETE svmc_settings;
20:13:01 SQL> 
20:13:01 SQL> -- The default classification algorithm is Naive Bayes. So override
20:13:01 SQL> -- this choice to SVM using a settings table.
20:13:01 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:13:01 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:13:01 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:13:01 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:13:01 SQL> -- models.
20:13:01 SQL> --
20:13:01 SQL> 
20:13:01 SQL> -- Do this once and then comment it out.
20:13:01 SQL> -- That makes script go faster.
20:13:01 SQL> -- BEGIN
20:13:01 SQL> -- -- Populate settings table
20:13:01 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:13:01 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:13:01 SQL> --
20:13:01 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:13:01 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:13:01 SQL> --
20:13:01 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:13:01 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:13:01 SQL> --   COMMIT;
20:13:01 SQL> -- END;
20:13:01 SQL> -- /
20:13:01 SQL> 
20:13:01 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:13:01 SQL> 
20:13:01 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:13:01   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:13:01   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:13:01 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:13:01   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:13:01   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:13:02 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:13:02   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:13:02   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:13:02 SQL> 
20:13:02 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:13:02   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:13:02   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:13:02 SQL> 
20:13:02 SQL> --------------------------------
20:13:02 SQL> -- PREPARE BUILD (TRAINING) DATA
20:13:02 SQL> --
20:13:02 SQL> 
20:13:02 SQL> -- 1. Missing Value treatment for all Predictors and
20:13:02 SQL> -- 2. Outlier Treatment and
20:13:02 SQL> -- 3. Normalization are performed below.
20:13:02 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:13:02 SQL> --    normalized here.
20:13:02 SQL> 
20:13:02 SQL> BEGIN
20:13:02   2  	-- Perform missing value treatment for all predictors
20:13:02   3  	-- create miss tables
20:13:02   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:13:02   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:13:02   6  
20:13:02   7  	-- populate miss tables
20:13:02   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:13:02   9  	  miss_table_name => 'svmc_miss_num',
20:13:02  10  	  data_table_name => '&bldtable',
20:13:02  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:13:02  12  
20:13:02  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:13:02  14  	  miss_table_name => 'svmc_miss_cat',
20:13:02  15  	  data_table_name => '&bldtable',
20:13:02  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:13:02  17  
20:13:02  18  	-- xform input data to replace missing values
20:13:02  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:13:02  20  	  miss_table_name => 'svmc_miss_num',
20:13:02  21  	  data_table_name => '&bldtable',
20:13:02  22  	  xform_view_name => 'xformed_build_miss_num');
20:13:02  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:13:02  24  	  miss_table_name => 'svmc_miss_cat',
20:13:02  25  	  data_table_name => '&bldtable',
20:13:02  26  	  xform_view_name => 'xformed_build_miss_cat');
20:13:02  27  
20:13:02  28  	-- Perform outlier treatment.
20:13:02  29  	-- create clip table
20:13:02  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:13:02  31  
20:13:02  32  	-- populate clip table
20:13:02  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:13:02  34  	  clip_table_name => 'svmc_clip',
20:13:02  35  	  data_table_name => '&bldtable',
20:13:02  36  	  tail_frac	  => 0.025,
20:13:02  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:13:02  38  
20:13:02  39  	-- xform input data to winsorized data
20:13:02  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:13:02  41  	  clip_table_name => 'svmc_clip',
20:13:02  42  	  data_table_name => '&bldtable',
20:13:02  43  	  xform_view_name => 'svmc_winsor');
20:13:02  44  
20:13:02  45  	-- create normalization table
20:13:02  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:13:02  47  
20:13:02  48  	-- populate normalization table based on winsorized data
20:13:02  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:13:02  50  	  norm_table_name => 'svmc_norm',
20:13:02  51  	  data_table_name => 'svmc_winsor',
20:13:02  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:13:02  53  
20:13:02  54  	-- normalize the original data
20:13:02  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:13:02  56  	  norm_table_name => 'svmc_norm',
20:13:02  57  	  data_table_name => '&bldtable',
20:13:02  58  	  xform_view_name => 'svmc_build_prep');
20:13:02  59  END;
20:13:02  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.71
20:13:03 SQL> 
20:13:03 SQL> ---------------------
20:13:03 SQL> -- CREATE A NEW MODEL
20:13:03 SQL> --
20:13:03 SQL> -- Cleanup old model with the same name for repeat runs
20:13:03 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:13:03   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:13:03   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.92
20:13:04 SQL> 
20:13:04 SQL> -- Build a new SVM Model
20:13:04 SQL> BEGIN
20:13:04   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:13:04   3  	  model_name	      => '&model_name',
20:13:04   4  	  mining_function     => dbms_data_mining.classification,
20:13:04   5  	  data_table_name     => 'svmc_build_prep',
20:13:04   6  	  case_id_column_name => '&case_id',
20:13:04   7  	  target_column_name  => '&target',
20:13:04   8  	  settings_table_name => 'svmc_settings');
20:13:04   9  END;
20:13:04  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:03.33
20:13:08 SQL> 
20:13:08 SQL> -----------------------------------------------------------------------
20:13:08 SQL> --			       APPLY/score THE MODEL
20:13:08 SQL> -----------------------------------------------------------------------
20:13:08 SQL> 
20:13:08 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:13:08 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:13:08   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:13:08   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:13:08 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:13:08   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:13:08   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:13:08 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:13:08   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:13:08   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:13:08 SQL> -----------------------
20:13:08 SQL> -- PREPARE SCORING DATA
20:13:08 SQL> --
20:13:08 SQL> -- If the data for model creation has been prepared, then the data
20:13:08 SQL> -- to be scored using the model must be prepared in the same manner
20:13:08 SQL> -- in order to obtain meaningful results.
20:13:08 SQL> --
20:13:08 SQL> -- 1. Missing Value treatment for all Predictors and
20:13:08 SQL> -- 2. Normalization
20:13:08 SQL> -- No outlier treatment will be performed during test and apply. The
20:13:08 SQL> -- normalization step is sufficient, since the normalization parameters
20:13:08 SQL> -- already capture the effects of outlier treatment done with build data.
20:13:08 SQL> --
20:13:08 SQL> BEGIN
20:13:08   2  	-- Xform Test data to replace missing values
20:13:08   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:13:08   4  	  miss_table_name => 'svmc_miss_num',
20:13:08   5  	  data_table_name => '&scoretable',
20:13:08   6  	  xform_view_name => 'xformed_apply_miss_num');
20:13:08   7  
20:13:08   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:13:08   9  	  miss_table_name => 'svmc_miss_cat',
20:13:08  10  	  data_table_name => '&scoretable',
20:13:08  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:13:08  12  
20:13:08  13  	-- Normalize the data to be scored
20:13:08  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:13:08  15  	  norm_table_name => 'svmc_norm',
20:13:08  16  	  data_table_name => '&scoretable',
20:13:08  17  	  xform_view_name => 'svmc_apply_prep');
20:13:08  18  END;
20:13:08  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.30
20:13:08 SQL> 
20:13:08 SQL> -- Maybe I already collected a score for this prdate.
20:13:08 SQL> -- DELETE it if I did:
20:13:08 SQL> DELETE svm62scores
20:13:08   2  WHERE score > 0
20:13:08   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:13:08   4  -- I need to supply the target attribute name:
20:13:08   5  AND targ = '&1'
20:13:08   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gatt'

0 rows deleted.

Elapsed: 00:00:00.01
20:13:08 SQL> 
20:13:08 SQL> -- We do a drumroll here:
20:13:08 SQL> 
20:13:08 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:13:08   2  SELECT
20:13:08   3  prdate
20:13:08   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:13:08   5  ,sysdate
20:13:08   6  ,SUBSTR(prdate,1,7)pair
20:13:08   7  ,SUBSTR(prdate,-19)ydate
20:13:08   8  ,'&1'
20:13:08   9  FROM svmc_apply_prep
20:13:08  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gatt'

1 row created.

Elapsed: 00:00:00.05
20:13:08 SQL> @score1_5min_gattn.sql	2010-11-09 08:00:01 aud_usd
20:13:08 SQL> --
20:13:08 SQL> -- score1_5min_gattn.sql
20:13:08 SQL> --
20:13:08 SQL> 
20:13:08 SQL> -- Demo:
20:13:08 SQL> -- @score1_5min_gattn.sql 2010-12-31 20:45:01 aud_usd
20:13:08 SQL> 
20:13:08 SQL> CREATE OR REPLACE VIEW sme AS
20:13:08   2  SELECT
20:13:08   3  prdate
20:13:08   4  ,NULL gattn
20:13:08   5  ,g00
20:13:08   6  ,g01
20:13:08   7  ,g02
20:13:08   8  ,g03
20:13:08   9  ,g04
20:13:08  10  ,g05
20:13:08  11  ,g06
20:13:08  12  ,g07
20:13:08  13  ,g08
20:13:08  14  ,g09
20:13:08  15  ,g10
20:13:08  16  ,g11
20:13:08  17  ,g12
20:13:08  18  ,g13
20:13:08  19  ,g14
20:13:08  20  ,g15
20:13:08  21  ,g16
20:13:08  22  ,g17
20:13:08  23  ,g18
20:13:08  24  ,g19
20:13:08  25  ,g20
20:13:08  26  ,g21
20:13:08  27  ,g22
20:13:08  28  ,g23
20:13:08  29  ,g24
20:13:08  30  ,g25
20:13:08  31  ,g26
20:13:08  32  ,g27
20:13:08  33  ,g28
20:13:08  34  ,g29
20:13:08  35  ,g30
20:13:08  36  ,g31
20:13:08  37  ,g32
20:13:08  38  ,g33
20:13:08  39  ,g34
20:13:08  40  ,g35
20:13:08  41  ,g36
20:13:08  42  ,g37
20:13:08  43  ,g38
20:13:08  44  ,g39
20:13:08  45  ,g40
20:13:08  46  ,g41
20:13:08  47  FROM modsrc
20:13:08  48  WHERE ydate = '&1'||' '||'&2'
20:13:08  49  AND pair = '&3'
20:13:08  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-11-09'||' '||'08:00:01'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.17
20:13:08 SQL> 
20:13:08 SQL> -- rpt
20:13:08 SQL> -- We should see just 1 row:
20:13:08 SQL> 
20:13:08 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.02
20:13:08 SQL> 
20:13:08 SQL> -- Build the model:
20:13:08 SQL> CREATE OR REPLACE VIEW bme AS
20:13:08   2  SELECT
20:13:08   3  prdate
20:13:08   4  ,gattn
20:13:08   5  ,g00
20:13:08   6  ,g01
20:13:08   7  ,g02
20:13:08   8  ,g03
20:13:08   9  ,g04
20:13:08  10  ,g05
20:13:08  11  ,g06
20:13:08  12  ,g07
20:13:08  13  ,g08
20:13:08  14  ,g09
20:13:08  15  ,g10
20:13:08  16  ,g11
20:13:08  17  ,g12
20:13:08  18  ,g13
20:13:08  19  ,g14
20:13:08  20  ,g15
20:13:08  21  ,g16
20:13:08  22  ,g17
20:13:08  23  ,g18
20:13:08  24  ,g19
20:13:08  25  ,g20
20:13:08  26  ,g21
20:13:08  27  ,g22
20:13:08  28  ,g23
20:13:08  29  ,g24
20:13:08  30  ,g25
20:13:08  31  ,g26
20:13:08  32  ,g27
20:13:08  33  ,g28
20:13:08  34  ,g29
20:13:08  35  ,g30
20:13:08  36  ,g31
20:13:08  37  ,g32
20:13:08  38  ,g33
20:13:08  39  ,g34
20:13:08  40  ,g35
20:13:08  41  ,g36
20:13:08  42  ,g37
20:13:08  43  ,g38
20:13:08  44  ,g39
20:13:08  45  ,g40
20:13:08  46  ,g41
20:13:08  47  FROM modsrc
20:13:08  48  WHERE gattn IN('nup','up')
20:13:08  49  -- Use only rows which are older than 1 day:
20:13:08  50  AND 1+ydate < '&1'||' '||'&2'
20:13:08  51  AND pair = '&3'
20:13:08  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-11-09'||' '||'08:00:01'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.05
20:13:08 SQL> 
20:13:08 SQL> -- rpt
20:13:08 SQL> 
20:13:08 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	     4522
up	     2303

Elapsed: 00:00:00.03
20:13:08 SQL> 
20:13:08 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-11-08 07:55:01

Elapsed: 00:00:00.02
20:13:08 SQL> 
20:13:08 SQL> -- Now build model from bme and score sme
20:13:08 SQL> @score1.sql gattn
20:13:08 SQL> --
20:13:08 SQL> -- score1.sql
20:13:08 SQL> --
20:13:08 SQL> 
20:13:08 SQL> -- I use this script to send 5 params to score.sql
20:13:08 SQL> -- which does the heavy lifting of creating an SVM model.
20:13:08 SQL> -- Then at the very end of this script I use the model
20:13:08 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:13:08 SQL> 
20:13:08 SQL> -- I call this script from 2 other scripts:
20:13:08 SQL> -- score1_5min.sql
20:13:08 SQL> -- score1_5min_gattn.sql
20:13:08 SQL> 
20:13:08 SQL> -- The 1st param is the name of the target attribute.
20:13:08 SQL> -- I like to call my target attributes either gatt or gattn.
20:13:08 SQL> 
20:13:08 SQL> -- Demo:
20:13:08 SQL> -- @score1.sql 'gatt'
20:13:08 SQL> -- @score1.sql 'gattn'
20:13:08 SQL> 
20:13:08 SQL> -- Now, I fill up svmc_apply_prep.
20:13:08 SQL> -- I use same model_name used in score.sql
20:13:08 SQL> DEFINE model_name = 'svmfx101'
20:13:08 SQL> DEFINE bldtable	= 'bme'
20:13:08 SQL> DEFINE scoretable = 'sme'
20:13:08 SQL> DEFINE case_id	= 'prdate'
20:13:08 SQL> -- Demo:
20:13:08 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:13:08 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:13:08 SQL> --
20:13:08 SQL> -- score.sql
20:13:08 SQL> --
20:13:08 SQL> 
20:13:08 SQL> -- usage: score.sql
20:13:08 SQL> 
20:13:08 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:13:08 SQL> 
20:13:08 SQL> -- DEFINE target	   = 'gatt'
20:13:08 SQL> -- DEFINE model_name = 'svmfx101'
20:13:08 SQL> -- DEFINE bldtable   = 'bme'
20:13:08 SQL> -- DEFINE scoretable = 'sme'
20:13:08 SQL> -- DEFINE case_id    = 'prdate'
20:13:08 SQL> 
20:13:08 SQL> DEFINE target	= '&1'
20:13:08 SQL> DEFINE model_name = '&2'
20:13:08 SQL> DEFINE bldtable	= '&3'
20:13:08 SQL> DEFINE scoretable = '&4'
20:13:08 SQL> DEFINE case_id	= '&5'
20:13:08 SQL> 
20:13:08 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:13:08 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:13:08 SQL> 
20:13:08 SQL> -- Builds an SVM model using pl/sql.
20:13:08 SQL> 
20:13:08 SQL> -----------------------------------------------------------------------
20:13:08 SQL> --			    BUILD THE MODEL
20:13:08 SQL> -----------------------------------------------------------------------
20:13:08 SQL> 
20:13:08 SQL> -- Cleanup old build data preparation objects for repeat runs
20:13:08 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.00
20:13:08 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:13:08 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:13:08 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.00
20:13:08 SQL> 
20:13:08 SQL> 
20:13:08 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:13:08 SQL> --
20:13:08 SQL> -- DROP	TABLE svmc_settings ;
20:13:08 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:13:08 SQL> -- DELETE svmc_settings;
20:13:08 SQL> 
20:13:08 SQL> -- The default classification algorithm is Naive Bayes. So override
20:13:08 SQL> -- this choice to SVM using a settings table.
20:13:08 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:13:08 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:13:08 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:13:08 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:13:08 SQL> -- models.
20:13:08 SQL> --
20:13:08 SQL> 
20:13:08 SQL> -- Do this once and then comment it out.
20:13:08 SQL> -- That makes script go faster.
20:13:08 SQL> -- BEGIN
20:13:08 SQL> -- -- Populate settings table
20:13:08 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:13:08 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:13:08 SQL> --
20:13:08 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:13:08 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:13:08 SQL> --
20:13:08 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:13:08 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:13:08 SQL> --   COMMIT;
20:13:08 SQL> -- END;
20:13:08 SQL> -- /
20:13:08 SQL> 
20:13:08 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:13:08 SQL> 
20:13:08 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:13:08   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:13:08   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.18
20:13:08 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:13:08   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:13:08   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.10
20:13:09 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:13:09   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:13:09   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.12
20:13:09 SQL> 
20:13:09 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:13:09   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:13:09   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.24
20:13:09 SQL> 
20:13:09 SQL> --------------------------------
20:13:09 SQL> -- PREPARE BUILD (TRAINING) DATA
20:13:09 SQL> --
20:13:09 SQL> 
20:13:09 SQL> -- 1. Missing Value treatment for all Predictors and
20:13:09 SQL> -- 2. Outlier Treatment and
20:13:09 SQL> -- 3. Normalization are performed below.
20:13:09 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:13:09 SQL> --    normalized here.
20:13:09 SQL> 
20:13:09 SQL> BEGIN
20:13:09   2  	-- Perform missing value treatment for all predictors
20:13:09   3  	-- create miss tables
20:13:09   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:13:09   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:13:09   6  
20:13:09   7  	-- populate miss tables
20:13:09   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:13:09   9  	  miss_table_name => 'svmc_miss_num',
20:13:09  10  	  data_table_name => '&bldtable',
20:13:09  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:13:09  12  
20:13:09  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:13:09  14  	  miss_table_name => 'svmc_miss_cat',
20:13:09  15  	  data_table_name => '&bldtable',
20:13:09  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:13:09  17  
20:13:09  18  	-- xform input data to replace missing values
20:13:09  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:13:09  20  	  miss_table_name => 'svmc_miss_num',
20:13:09  21  	  data_table_name => '&bldtable',
20:13:09  22  	  xform_view_name => 'xformed_build_miss_num');
20:13:09  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:13:09  24  	  miss_table_name => 'svmc_miss_cat',
20:13:09  25  	  data_table_name => '&bldtable',
20:13:09  26  	  xform_view_name => 'xformed_build_miss_cat');
20:13:09  27  
20:13:09  28  	-- Perform outlier treatment.
20:13:09  29  	-- create clip table
20:13:09  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:13:09  31  
20:13:09  32  	-- populate clip table
20:13:09  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:13:09  34  	  clip_table_name => 'svmc_clip',
20:13:09  35  	  data_table_name => '&bldtable',
20:13:09  36  	  tail_frac	  => 0.025,
20:13:09  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:13:09  38  
20:13:09  39  	-- xform input data to winsorized data
20:13:09  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:13:09  41  	  clip_table_name => 'svmc_clip',
20:13:09  42  	  data_table_name => '&bldtable',
20:13:09  43  	  xform_view_name => 'svmc_winsor');
20:13:09  44  
20:13:09  45  	-- create normalization table
20:13:09  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:13:09  47  
20:13:09  48  	-- populate normalization table based on winsorized data
20:13:09  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:13:09  50  	  norm_table_name => 'svmc_norm',
20:13:09  51  	  data_table_name => 'svmc_winsor',
20:13:09  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:13:09  53  
20:13:09  54  	-- normalize the original data
20:13:09  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:13:09  56  	  norm_table_name => 'svmc_norm',
20:13:09  57  	  data_table_name => '&bldtable',
20:13:09  58  	  xform_view_name => 'svmc_build_prep');
20:13:09  59  END;
20:13:09  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.42
20:13:10 SQL> 
20:13:10 SQL> ---------------------
20:13:10 SQL> -- CREATE A NEW MODEL
20:13:10 SQL> --
20:13:10 SQL> -- Cleanup old model with the same name for repeat runs
20:13:10 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:13:10   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:13:10   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.85
20:13:11 SQL> 
20:13:11 SQL> -- Build a new SVM Model
20:13:11 SQL> BEGIN
20:13:11   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:13:11   3  	  model_name	      => '&model_name',
20:13:11   4  	  mining_function     => dbms_data_mining.classification,
20:13:11   5  	  data_table_name     => 'svmc_build_prep',
20:13:11   6  	  case_id_column_name => '&case_id',
20:13:11   7  	  target_column_name  => '&target',
20:13:11   8  	  settings_table_name => 'svmc_settings');
20:13:11   9  END;
20:13:11  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:03.98
20:13:15 SQL> 
20:13:15 SQL> -----------------------------------------------------------------------
20:13:15 SQL> --			       APPLY/score THE MODEL
20:13:15 SQL> -----------------------------------------------------------------------
20:13:15 SQL> 
20:13:15 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:13:15 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:13:15   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:13:15   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:13:15 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:13:15   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:13:15   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:13:15 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:13:15   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:13:15   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:13:15 SQL> -----------------------
20:13:15 SQL> -- PREPARE SCORING DATA
20:13:15 SQL> --
20:13:15 SQL> -- If the data for model creation has been prepared, then the data
20:13:15 SQL> -- to be scored using the model must be prepared in the same manner
20:13:15 SQL> -- in order to obtain meaningful results.
20:13:15 SQL> --
20:13:15 SQL> -- 1. Missing Value treatment for all Predictors and
20:13:15 SQL> -- 2. Normalization
20:13:15 SQL> -- No outlier treatment will be performed during test and apply. The
20:13:15 SQL> -- normalization step is sufficient, since the normalization parameters
20:13:15 SQL> -- already capture the effects of outlier treatment done with build data.
20:13:15 SQL> --
20:13:15 SQL> BEGIN
20:13:15   2  	-- Xform Test data to replace missing values
20:13:15   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:13:15   4  	  miss_table_name => 'svmc_miss_num',
20:13:15   5  	  data_table_name => '&scoretable',
20:13:15   6  	  xform_view_name => 'xformed_apply_miss_num');
20:13:15   7  
20:13:15   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:13:15   9  	  miss_table_name => 'svmc_miss_cat',
20:13:15  10  	  data_table_name => '&scoretable',
20:13:15  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:13:15  12  
20:13:15  13  	-- Normalize the data to be scored
20:13:15  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:13:15  15  	  norm_table_name => 'svmc_norm',
20:13:15  16  	  data_table_name => '&scoretable',
20:13:15  17  	  xform_view_name => 'svmc_apply_prep');
20:13:15  18  END;
20:13:15  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.19
20:13:15 SQL> 
20:13:15 SQL> -- Maybe I already collected a score for this prdate.
20:13:15 SQL> -- DELETE it if I did:
20:13:15 SQL> DELETE svm62scores
20:13:15   2  WHERE score > 0
20:13:15   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:13:15   4  -- I need to supply the target attribute name:
20:13:15   5  AND targ = '&1'
20:13:15   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gattn'

0 rows deleted.

Elapsed: 00:00:00.02
20:13:16 SQL> 
20:13:16 SQL> -- We do a drumroll here:
20:13:16 SQL> 
20:13:16 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:13:16   2  SELECT
20:13:16   3  prdate
20:13:16   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:13:16   5  ,sysdate
20:13:16   6  ,SUBSTR(prdate,1,7)pair
20:13:16   7  ,SUBSTR(prdate,-19)ydate
20:13:16   8  ,'&1'
20:13:16   9  FROM svmc_apply_prep
20:13:16  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gattn'

1 row created.

Elapsed: 00:00:00.05
20:13:16 SQL> @score1_5min.sql	      2010-11-10 17:10:01 aud_usd
20:13:16 SQL> --
20:13:16 SQL> -- score1_5min.sql
20:13:16 SQL> --
20:13:16 SQL> 
20:13:16 SQL> -- Demo:
20:13:16 SQL> -- @score1_5min.sql 2010-12-31 20:45:01 aud_usd
20:13:16 SQL> 
20:13:16 SQL> CREATE OR REPLACE VIEW sme AS
20:13:16   2  SELECT
20:13:16   3  prdate
20:13:16   4  ,NULL gatt
20:13:16   5  ,g00
20:13:16   6  ,g01
20:13:16   7  ,g02
20:13:16   8  ,g03
20:13:16   9  ,g04
20:13:16  10  ,g05
20:13:16  11  ,g06
20:13:16  12  ,g07
20:13:16  13  ,g08
20:13:16  14  ,g09
20:13:16  15  ,g10
20:13:16  16  ,g11
20:13:16  17  ,g12
20:13:16  18  ,g13
20:13:16  19  ,g14
20:13:16  20  ,g15
20:13:16  21  ,g16
20:13:16  22  ,g17
20:13:16  23  ,g18
20:13:16  24  ,g19
20:13:16  25  ,g20
20:13:16  26  ,g21
20:13:16  27  ,g22
20:13:16  28  ,g23
20:13:16  29  ,g24
20:13:16  30  ,g25
20:13:16  31  ,g26
20:13:16  32  ,g27
20:13:16  33  ,g28
20:13:16  34  ,g29
20:13:16  35  ,g30
20:13:16  36  ,g31
20:13:16  37  ,g32
20:13:16  38  ,g33
20:13:16  39  ,g34
20:13:16  40  ,g35
20:13:16  41  ,g36
20:13:16  42  ,g37
20:13:16  43  ,g38
20:13:16  44  ,g39
20:13:16  45  ,g40
20:13:16  46  ,g41
20:13:16  47  FROM modsrc
20:13:16  48  WHERE ydate = '&1'||' '||'&2'
20:13:16  49  AND pair = '&3'
20:13:16  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-11-10'||' '||'17:10:01'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:13:16 SQL> 
20:13:16 SQL> -- rpt
20:13:16 SQL> -- We should see just 1 row:
20:13:16 SQL> 
20:13:16 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.01
20:13:16 SQL> 
20:13:16 SQL> -- Build the model:
20:13:16 SQL> CREATE OR REPLACE VIEW bme AS
20:13:16   2  SELECT
20:13:16   3  prdate
20:13:16   4  ,gatt
20:13:16   5  ,g00
20:13:16   6  ,g01
20:13:16   7  ,g02
20:13:16   8  ,g03
20:13:16   9  ,g04
20:13:16  10  ,g05
20:13:16  11  ,g06
20:13:16  12  ,g07
20:13:16  13  ,g08
20:13:16  14  ,g09
20:13:16  15  ,g10
20:13:16  16  ,g11
20:13:16  17  ,g12
20:13:16  18  ,g13
20:13:16  19  ,g14
20:13:16  20  ,g15
20:13:16  21  ,g16
20:13:16  22  ,g17
20:13:16  23  ,g18
20:13:16  24  ,g19
20:13:16  25  ,g20
20:13:16  26  ,g21
20:13:16  27  ,g22
20:13:16  28  ,g23
20:13:16  29  ,g24
20:13:16  30  ,g25
20:13:16  31  ,g26
20:13:16  32  ,g27
20:13:16  33  ,g28
20:13:16  34  ,g29
20:13:16  35  ,g30
20:13:16  36  ,g31
20:13:16  37  ,g32
20:13:16  38  ,g33
20:13:16  39  ,g34
20:13:16  40  ,g35
20:13:16  41  ,g36
20:13:16  42  ,g37
20:13:16  43  ,g38
20:13:16  44  ,g39
20:13:16  45  ,g40
20:13:16  46  ,g41
20:13:16  47  FROM modsrc
20:13:16  48  WHERE gatt IN('nup','up')
20:13:16  49  -- Use only rows which are older than 1 day:
20:13:16  50  AND 1+ydate < '&1'||' '||'&2'
20:13:16  51  AND pair = '&3'
20:13:16  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-11-10'||' '||'17:10:01'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.05
20:13:16 SQL> 
20:13:16 SQL> -- rpt
20:13:16 SQL> 
20:13:16 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt;

GAT COUNT(PRDATE)
--- -------------
nup	     4305
up	     2918

Elapsed: 00:00:00.02
20:13:16 SQL> 
20:13:16 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-11-09 17:05:01

Elapsed: 00:00:00.02
20:13:16 SQL> 
20:13:16 SQL> -- Now build model from bme and score sme
20:13:16 SQL> @score1.sql gatt
20:13:16 SQL> --
20:13:16 SQL> -- score1.sql
20:13:16 SQL> --
20:13:16 SQL> 
20:13:16 SQL> -- I use this script to send 5 params to score.sql
20:13:16 SQL> -- which does the heavy lifting of creating an SVM model.
20:13:16 SQL> -- Then at the very end of this script I use the model
20:13:16 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:13:16 SQL> 
20:13:16 SQL> -- I call this script from 2 other scripts:
20:13:16 SQL> -- score1_5min.sql
20:13:16 SQL> -- score1_5min_gattn.sql
20:13:16 SQL> 
20:13:16 SQL> -- The 1st param is the name of the target attribute.
20:13:16 SQL> -- I like to call my target attributes either gatt or gattn.
20:13:16 SQL> 
20:13:16 SQL> -- Demo:
20:13:16 SQL> -- @score1.sql 'gatt'
20:13:16 SQL> -- @score1.sql 'gattn'
20:13:16 SQL> 
20:13:16 SQL> -- Now, I fill up svmc_apply_prep.
20:13:16 SQL> -- I use same model_name used in score.sql
20:13:16 SQL> DEFINE model_name = 'svmfx101'
20:13:16 SQL> DEFINE bldtable	= 'bme'
20:13:16 SQL> DEFINE scoretable = 'sme'
20:13:16 SQL> DEFINE case_id	= 'prdate'
20:13:16 SQL> -- Demo:
20:13:16 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:13:16 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:13:16 SQL> --
20:13:16 SQL> -- score.sql
20:13:16 SQL> --
20:13:16 SQL> 
20:13:16 SQL> -- usage: score.sql
20:13:16 SQL> 
20:13:16 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:13:16 SQL> 
20:13:16 SQL> -- DEFINE target	   = 'gatt'
20:13:16 SQL> -- DEFINE model_name = 'svmfx101'
20:13:16 SQL> -- DEFINE bldtable   = 'bme'
20:13:16 SQL> -- DEFINE scoretable = 'sme'
20:13:16 SQL> -- DEFINE case_id    = 'prdate'
20:13:16 SQL> 
20:13:16 SQL> DEFINE target	= '&1'
20:13:16 SQL> DEFINE model_name = '&2'
20:13:16 SQL> DEFINE bldtable	= '&3'
20:13:16 SQL> DEFINE scoretable = '&4'
20:13:16 SQL> DEFINE case_id	= '&5'
20:13:16 SQL> 
20:13:16 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:13:16 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:13:16 SQL> 
20:13:16 SQL> -- Builds an SVM model using pl/sql.
20:13:16 SQL> 
20:13:16 SQL> -----------------------------------------------------------------------
20:13:16 SQL> --			    BUILD THE MODEL
20:13:16 SQL> -----------------------------------------------------------------------
20:13:16 SQL> 
20:13:16 SQL> -- Cleanup old build data preparation objects for repeat runs
20:13:16 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.00
20:13:16 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:13:16 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.01
20:13:16 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.00
20:13:16 SQL> 
20:13:16 SQL> 
20:13:16 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:13:16 SQL> --
20:13:16 SQL> -- DROP	TABLE svmc_settings ;
20:13:16 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:13:16 SQL> -- DELETE svmc_settings;
20:13:16 SQL> 
20:13:16 SQL> -- The default classification algorithm is Naive Bayes. So override
20:13:16 SQL> -- this choice to SVM using a settings table.
20:13:16 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:13:16 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:13:16 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:13:16 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:13:16 SQL> -- models.
20:13:16 SQL> --
20:13:16 SQL> 
20:13:16 SQL> -- Do this once and then comment it out.
20:13:16 SQL> -- That makes script go faster.
20:13:16 SQL> -- BEGIN
20:13:16 SQL> -- -- Populate settings table
20:13:16 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:13:16 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:13:16 SQL> --
20:13:16 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:13:16 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:13:16 SQL> --
20:13:16 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:13:16 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:13:16 SQL> --   COMMIT;
20:13:16 SQL> -- END;
20:13:16 SQL> -- /
20:13:16 SQL> 
20:13:16 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:13:16 SQL> 
20:13:16 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:13:16   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:13:16   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.09
20:13:16 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:13:16   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:13:16   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:13:16 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:13:16   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:13:16   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:13:16 SQL> 
20:13:16 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:13:16   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:13:16   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:13:16 SQL> 
20:13:16 SQL> --------------------------------
20:13:16 SQL> -- PREPARE BUILD (TRAINING) DATA
20:13:16 SQL> --
20:13:16 SQL> 
20:13:16 SQL> -- 1. Missing Value treatment for all Predictors and
20:13:16 SQL> -- 2. Outlier Treatment and
20:13:16 SQL> -- 3. Normalization are performed below.
20:13:16 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:13:16 SQL> --    normalized here.
20:13:16 SQL> 
20:13:16 SQL> BEGIN
20:13:16   2  	-- Perform missing value treatment for all predictors
20:13:16   3  	-- create miss tables
20:13:16   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:13:16   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:13:16   6  
20:13:16   7  	-- populate miss tables
20:13:16   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:13:16   9  	  miss_table_name => 'svmc_miss_num',
20:13:16  10  	  data_table_name => '&bldtable',
20:13:16  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:13:16  12  
20:13:16  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:13:16  14  	  miss_table_name => 'svmc_miss_cat',
20:13:16  15  	  data_table_name => '&bldtable',
20:13:16  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:13:16  17  
20:13:16  18  	-- xform input data to replace missing values
20:13:16  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:13:16  20  	  miss_table_name => 'svmc_miss_num',
20:13:16  21  	  data_table_name => '&bldtable',
20:13:16  22  	  xform_view_name => 'xformed_build_miss_num');
20:13:16  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:13:16  24  	  miss_table_name => 'svmc_miss_cat',
20:13:16  25  	  data_table_name => '&bldtable',
20:13:16  26  	  xform_view_name => 'xformed_build_miss_cat');
20:13:16  27  
20:13:16  28  	-- Perform outlier treatment.
20:13:16  29  	-- create clip table
20:13:16  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:13:16  31  
20:13:16  32  	-- populate clip table
20:13:16  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:13:16  34  	  clip_table_name => 'svmc_clip',
20:13:16  35  	  data_table_name => '&bldtable',
20:13:16  36  	  tail_frac	  => 0.025,
20:13:16  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:13:16  38  
20:13:16  39  	-- xform input data to winsorized data
20:13:16  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:13:16  41  	  clip_table_name => 'svmc_clip',
20:13:16  42  	  data_table_name => '&bldtable',
20:13:16  43  	  xform_view_name => 'svmc_winsor');
20:13:16  44  
20:13:16  45  	-- create normalization table
20:13:16  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:13:16  47  
20:13:16  48  	-- populate normalization table based on winsorized data
20:13:16  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:13:16  50  	  norm_table_name => 'svmc_norm',
20:13:16  51  	  data_table_name => 'svmc_winsor',
20:13:16  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:13:16  53  
20:13:16  54  	-- normalize the original data
20:13:16  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:13:16  56  	  norm_table_name => 'svmc_norm',
20:13:16  57  	  data_table_name => '&bldtable',
20:13:16  58  	  xform_view_name => 'svmc_build_prep');
20:13:16  59  END;
20:13:16  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.43
20:13:17 SQL> 
20:13:17 SQL> ---------------------
20:13:17 SQL> -- CREATE A NEW MODEL
20:13:17 SQL> --
20:13:17 SQL> -- Cleanup old model with the same name for repeat runs
20:13:17 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:13:17   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:13:17   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.97
20:13:18 SQL> 
20:13:18 SQL> -- Build a new SVM Model
20:13:18 SQL> BEGIN
20:13:18   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:13:18   3  	  model_name	      => '&model_name',
20:13:18   4  	  mining_function     => dbms_data_mining.classification,
20:13:18   5  	  data_table_name     => 'svmc_build_prep',
20:13:18   6  	  case_id_column_name => '&case_id',
20:13:18   7  	  target_column_name  => '&target',
20:13:18   8  	  settings_table_name => 'svmc_settings');
20:13:18   9  END;
20:13:18  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:02.87
20:13:21 SQL> 
20:13:21 SQL> -----------------------------------------------------------------------
20:13:21 SQL> --			       APPLY/score THE MODEL
20:13:21 SQL> -----------------------------------------------------------------------
20:13:21 SQL> 
20:13:21 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:13:21 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:13:21   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:13:21   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:13:21 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:13:21   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:13:21   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:13:21 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:13:21   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:13:21   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:13:21 SQL> -----------------------
20:13:21 SQL> -- PREPARE SCORING DATA
20:13:21 SQL> --
20:13:21 SQL> -- If the data for model creation has been prepared, then the data
20:13:21 SQL> -- to be scored using the model must be prepared in the same manner
20:13:21 SQL> -- in order to obtain meaningful results.
20:13:21 SQL> --
20:13:21 SQL> -- 1. Missing Value treatment for all Predictors and
20:13:21 SQL> -- 2. Normalization
20:13:21 SQL> -- No outlier treatment will be performed during test and apply. The
20:13:21 SQL> -- normalization step is sufficient, since the normalization parameters
20:13:21 SQL> -- already capture the effects of outlier treatment done with build data.
20:13:21 SQL> --
20:13:21 SQL> BEGIN
20:13:21   2  	-- Xform Test data to replace missing values
20:13:21   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:13:21   4  	  miss_table_name => 'svmc_miss_num',
20:13:21   5  	  data_table_name => '&scoretable',
20:13:21   6  	  xform_view_name => 'xformed_apply_miss_num');
20:13:21   7  
20:13:21   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:13:21   9  	  miss_table_name => 'svmc_miss_cat',
20:13:21  10  	  data_table_name => '&scoretable',
20:13:21  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:13:21  12  
20:13:21  13  	-- Normalize the data to be scored
20:13:21  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:13:21  15  	  norm_table_name => 'svmc_norm',
20:13:21  16  	  data_table_name => '&scoretable',
20:13:21  17  	  xform_view_name => 'svmc_apply_prep');
20:13:21  18  END;
20:13:21  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.15
20:13:21 SQL> 
20:13:21 SQL> -- Maybe I already collected a score for this prdate.
20:13:21 SQL> -- DELETE it if I did:
20:13:21 SQL> DELETE svm62scores
20:13:21   2  WHERE score > 0
20:13:21   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:13:21   4  -- I need to supply the target attribute name:
20:13:21   5  AND targ = '&1'
20:13:21   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gatt'

0 rows deleted.

Elapsed: 00:00:00.02
20:13:21 SQL> 
20:13:21 SQL> -- We do a drumroll here:
20:13:21 SQL> 
20:13:21 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:13:21   2  SELECT
20:13:21   3  prdate
20:13:21   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:13:21   5  ,sysdate
20:13:21   6  ,SUBSTR(prdate,1,7)pair
20:13:21   7  ,SUBSTR(prdate,-19)ydate
20:13:21   8  ,'&1'
20:13:21   9  FROM svmc_apply_prep
20:13:21  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gatt'

1 row created.

Elapsed: 00:00:00.04
20:13:21 SQL> @score1_5min.sql	      2010-10-25 12:55:01 aud_usd
20:13:21 SQL> --
20:13:21 SQL> -- score1_5min.sql
20:13:21 SQL> --
20:13:21 SQL> 
20:13:21 SQL> -- Demo:
20:13:21 SQL> -- @score1_5min.sql 2010-12-31 20:45:01 aud_usd
20:13:21 SQL> 
20:13:21 SQL> CREATE OR REPLACE VIEW sme AS
20:13:21   2  SELECT
20:13:21   3  prdate
20:13:21   4  ,NULL gatt
20:13:21   5  ,g00
20:13:21   6  ,g01
20:13:21   7  ,g02
20:13:21   8  ,g03
20:13:21   9  ,g04
20:13:21  10  ,g05
20:13:21  11  ,g06
20:13:21  12  ,g07
20:13:21  13  ,g08
20:13:21  14  ,g09
20:13:21  15  ,g10
20:13:21  16  ,g11
20:13:21  17  ,g12
20:13:21  18  ,g13
20:13:21  19  ,g14
20:13:21  20  ,g15
20:13:21  21  ,g16
20:13:21  22  ,g17
20:13:21  23  ,g18
20:13:21  24  ,g19
20:13:21  25  ,g20
20:13:21  26  ,g21
20:13:21  27  ,g22
20:13:21  28  ,g23
20:13:21  29  ,g24
20:13:21  30  ,g25
20:13:21  31  ,g26
20:13:21  32  ,g27
20:13:21  33  ,g28
20:13:21  34  ,g29
20:13:21  35  ,g30
20:13:21  36  ,g31
20:13:21  37  ,g32
20:13:21  38  ,g33
20:13:21  39  ,g34
20:13:21  40  ,g35
20:13:21  41  ,g36
20:13:21  42  ,g37
20:13:21  43  ,g38
20:13:21  44  ,g39
20:13:22  45  ,g40
20:13:22  46  ,g41
20:13:22  47  FROM modsrc
20:13:22  48  WHERE ydate = '&1'||' '||'&2'
20:13:22  49  AND pair = '&3'
20:13:22  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-10-25'||' '||'12:55:01'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:13:22 SQL> 
20:13:22 SQL> -- rpt
20:13:22 SQL> -- We should see just 1 row:
20:13:22 SQL> 
20:13:22 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.02
20:13:22 SQL> 
20:13:22 SQL> -- Build the model:
20:13:22 SQL> CREATE OR REPLACE VIEW bme AS
20:13:22   2  SELECT
20:13:22   3  prdate
20:13:22   4  ,gatt
20:13:22   5  ,g00
20:13:22   6  ,g01
20:13:22   7  ,g02
20:13:22   8  ,g03
20:13:22   9  ,g04
20:13:22  10  ,g05
20:13:22  11  ,g06
20:13:22  12  ,g07
20:13:22  13  ,g08
20:13:22  14  ,g09
20:13:22  15  ,g10
20:13:22  16  ,g11
20:13:22  17  ,g12
20:13:22  18  ,g13
20:13:22  19  ,g14
20:13:22  20  ,g15
20:13:22  21  ,g16
20:13:22  22  ,g17
20:13:22  23  ,g18
20:13:22  24  ,g19
20:13:22  25  ,g20
20:13:22  26  ,g21
20:13:22  27  ,g22
20:13:22  28  ,g23
20:13:22  29  ,g24
20:13:22  30  ,g25
20:13:22  31  ,g26
20:13:22  32  ,g27
20:13:22  33  ,g28
20:13:22  34  ,g29
20:13:22  35  ,g30
20:13:22  36  ,g31
20:13:22  37  ,g32
20:13:22  38  ,g33
20:13:22  39  ,g34
20:13:22  40  ,g35
20:13:22  41  ,g36
20:13:22  42  ,g37
20:13:22  43  ,g38
20:13:22  44  ,g39
20:13:22  45  ,g40
20:13:22  46  ,g41
20:13:22  47  FROM modsrc
20:13:22  48  WHERE gatt IN('nup','up')
20:13:22  49  -- Use only rows which are older than 1 day:
20:13:22  50  AND 1+ydate < '&1'||' '||'&2'
20:13:22  51  AND pair = '&3'
20:13:22  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-10-25'||' '||'12:55:01'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:13:22 SQL> 
20:13:22 SQL> -- rpt
20:13:22 SQL> 
20:13:22 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt;

GAT COUNT(PRDATE)
--- -------------
nup	     2154
up	     1634

Elapsed: 00:00:00.03
20:13:22 SQL> 
20:13:22 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-10-22 21:50:01

Elapsed: 00:00:00.01
20:13:22 SQL> 
20:13:22 SQL> -- Now build model from bme and score sme
20:13:22 SQL> @score1.sql gatt
20:13:22 SQL> --
20:13:22 SQL> -- score1.sql
20:13:22 SQL> --
20:13:22 SQL> 
20:13:22 SQL> -- I use this script to send 5 params to score.sql
20:13:22 SQL> -- which does the heavy lifting of creating an SVM model.
20:13:22 SQL> -- Then at the very end of this script I use the model
20:13:22 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:13:22 SQL> 
20:13:22 SQL> -- I call this script from 2 other scripts:
20:13:22 SQL> -- score1_5min.sql
20:13:22 SQL> -- score1_5min_gattn.sql
20:13:22 SQL> 
20:13:22 SQL> -- The 1st param is the name of the target attribute.
20:13:22 SQL> -- I like to call my target attributes either gatt or gattn.
20:13:22 SQL> 
20:13:22 SQL> -- Demo:
20:13:22 SQL> -- @score1.sql 'gatt'
20:13:22 SQL> -- @score1.sql 'gattn'
20:13:22 SQL> 
20:13:22 SQL> -- Now, I fill up svmc_apply_prep.
20:13:22 SQL> -- I use same model_name used in score.sql
20:13:22 SQL> DEFINE model_name = 'svmfx101'
20:13:22 SQL> DEFINE bldtable	= 'bme'
20:13:22 SQL> DEFINE scoretable = 'sme'
20:13:22 SQL> DEFINE case_id	= 'prdate'
20:13:22 SQL> -- Demo:
20:13:22 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:13:22 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:13:22 SQL> --
20:13:22 SQL> -- score.sql
20:13:22 SQL> --
20:13:22 SQL> 
20:13:22 SQL> -- usage: score.sql
20:13:22 SQL> 
20:13:22 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:13:22 SQL> 
20:13:22 SQL> -- DEFINE target	   = 'gatt'
20:13:22 SQL> -- DEFINE model_name = 'svmfx101'
20:13:22 SQL> -- DEFINE bldtable   = 'bme'
20:13:22 SQL> -- DEFINE scoretable = 'sme'
20:13:22 SQL> -- DEFINE case_id    = 'prdate'
20:13:22 SQL> 
20:13:22 SQL> DEFINE target	= '&1'
20:13:22 SQL> DEFINE model_name = '&2'
20:13:22 SQL> DEFINE bldtable	= '&3'
20:13:22 SQL> DEFINE scoretable = '&4'
20:13:22 SQL> DEFINE case_id	= '&5'
20:13:22 SQL> 
20:13:22 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:13:22 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:13:22 SQL> 
20:13:22 SQL> -- Builds an SVM model using pl/sql.
20:13:22 SQL> 
20:13:22 SQL> -----------------------------------------------------------------------
20:13:22 SQL> --			    BUILD THE MODEL
20:13:22 SQL> -----------------------------------------------------------------------
20:13:22 SQL> 
20:13:22 SQL> -- Cleanup old build data preparation objects for repeat runs
20:13:22 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.00
20:13:22 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:13:22 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:13:22 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.00
20:13:22 SQL> 
20:13:22 SQL> 
20:13:22 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:13:22 SQL> --
20:13:22 SQL> -- DROP	TABLE svmc_settings ;
20:13:22 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:13:22 SQL> -- DELETE svmc_settings;
20:13:22 SQL> 
20:13:22 SQL> -- The default classification algorithm is Naive Bayes. So override
20:13:22 SQL> -- this choice to SVM using a settings table.
20:13:22 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:13:22 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:13:22 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:13:22 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:13:22 SQL> -- models.
20:13:22 SQL> --
20:13:22 SQL> 
20:13:22 SQL> -- Do this once and then comment it out.
20:13:22 SQL> -- That makes script go faster.
20:13:22 SQL> -- BEGIN
20:13:22 SQL> -- -- Populate settings table
20:13:22 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:13:22 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:13:22 SQL> --
20:13:22 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:13:22 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:13:22 SQL> --
20:13:22 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:13:22 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:13:22 SQL> --   COMMIT;
20:13:22 SQL> -- END;
20:13:22 SQL> -- /
20:13:22 SQL> 
20:13:22 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:13:22 SQL> 
20:13:22 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:13:22   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:13:22   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:13:22 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:13:22   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:13:22   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:13:22 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:13:22   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:13:22   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:13:22 SQL> 
20:13:22 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:13:22   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:13:22   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:13:22 SQL> 
20:13:22 SQL> --------------------------------
20:13:22 SQL> -- PREPARE BUILD (TRAINING) DATA
20:13:22 SQL> --
20:13:22 SQL> 
20:13:22 SQL> -- 1. Missing Value treatment for all Predictors and
20:13:22 SQL> -- 2. Outlier Treatment and
20:13:22 SQL> -- 3. Normalization are performed below.
20:13:22 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:13:22 SQL> --    normalized here.
20:13:22 SQL> 
20:13:22 SQL> BEGIN
20:13:22   2  	-- Perform missing value treatment for all predictors
20:13:22   3  	-- create miss tables
20:13:22   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:13:22   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:13:22   6  
20:13:22   7  	-- populate miss tables
20:13:22   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:13:22   9  	  miss_table_name => 'svmc_miss_num',
20:13:22  10  	  data_table_name => '&bldtable',
20:13:22  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:13:22  12  
20:13:22  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:13:22  14  	  miss_table_name => 'svmc_miss_cat',
20:13:22  15  	  data_table_name => '&bldtable',
20:13:22  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:13:22  17  
20:13:22  18  	-- xform input data to replace missing values
20:13:22  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:13:22  20  	  miss_table_name => 'svmc_miss_num',
20:13:22  21  	  data_table_name => '&bldtable',
20:13:22  22  	  xform_view_name => 'xformed_build_miss_num');
20:13:22  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:13:22  24  	  miss_table_name => 'svmc_miss_cat',
20:13:22  25  	  data_table_name => '&bldtable',
20:13:22  26  	  xform_view_name => 'xformed_build_miss_cat');
20:13:22  27  
20:13:22  28  	-- Perform outlier treatment.
20:13:22  29  	-- create clip table
20:13:22  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:13:22  31  
20:13:22  32  	-- populate clip table
20:13:22  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:13:22  34  	  clip_table_name => 'svmc_clip',
20:13:22  35  	  data_table_name => '&bldtable',
20:13:22  36  	  tail_frac	  => 0.025,
20:13:22  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:13:22  38  
20:13:22  39  	-- xform input data to winsorized data
20:13:22  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:13:22  41  	  clip_table_name => 'svmc_clip',
20:13:22  42  	  data_table_name => '&bldtable',
20:13:22  43  	  xform_view_name => 'svmc_winsor');
20:13:22  44  
20:13:22  45  	-- create normalization table
20:13:22  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:13:22  47  
20:13:22  48  	-- populate normalization table based on winsorized data
20:13:22  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:13:22  50  	  norm_table_name => 'svmc_norm',
20:13:22  51  	  data_table_name => 'svmc_winsor',
20:13:22  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:13:22  53  
20:13:22  54  	-- normalize the original data
20:13:22  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:13:22  56  	  norm_table_name => 'svmc_norm',
20:13:22  57  	  data_table_name => '&bldtable',
20:13:22  58  	  xform_view_name => 'svmc_build_prep');
20:13:22  59  END;
20:13:22  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.17
20:13:23 SQL> 
20:13:23 SQL> ---------------------
20:13:23 SQL> -- CREATE A NEW MODEL
20:13:23 SQL> --
20:13:23 SQL> -- Cleanup old model with the same name for repeat runs
20:13:23 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:13:23   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:13:23   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.97
20:13:24 SQL> 
20:13:24 SQL> -- Build a new SVM Model
20:13:24 SQL> BEGIN
20:13:24   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:13:24   3  	  model_name	      => '&model_name',
20:13:24   4  	  mining_function     => dbms_data_mining.classification,
20:13:24   5  	  data_table_name     => 'svmc_build_prep',
20:13:24   6  	  case_id_column_name => '&case_id',
20:13:24   7  	  target_column_name  => '&target',
20:13:24   8  	  settings_table_name => 'svmc_settings');
20:13:24   9  END;
20:13:24  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:02.95
20:13:27 SQL> 
20:13:27 SQL> -----------------------------------------------------------------------
20:13:27 SQL> --			       APPLY/score THE MODEL
20:13:27 SQL> -----------------------------------------------------------------------
20:13:27 SQL> 
20:13:27 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:13:27 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:13:27   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:13:27   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:13:27 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:13:27   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:13:27   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:13:27 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:13:27   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:13:27   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:13:27 SQL> -----------------------
20:13:27 SQL> -- PREPARE SCORING DATA
20:13:27 SQL> --
20:13:27 SQL> -- If the data for model creation has been prepared, then the data
20:13:27 SQL> -- to be scored using the model must be prepared in the same manner
20:13:27 SQL> -- in order to obtain meaningful results.
20:13:27 SQL> --
20:13:27 SQL> -- 1. Missing Value treatment for all Predictors and
20:13:27 SQL> -- 2. Normalization
20:13:27 SQL> -- No outlier treatment will be performed during test and apply. The
20:13:27 SQL> -- normalization step is sufficient, since the normalization parameters
20:13:27 SQL> -- already capture the effects of outlier treatment done with build data.
20:13:27 SQL> --
20:13:27 SQL> BEGIN
20:13:27   2  	-- Xform Test data to replace missing values
20:13:27   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:13:27   4  	  miss_table_name => 'svmc_miss_num',
20:13:27   5  	  data_table_name => '&scoretable',
20:13:27   6  	  xform_view_name => 'xformed_apply_miss_num');
20:13:27   7  
20:13:27   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:13:27   9  	  miss_table_name => 'svmc_miss_cat',
20:13:27  10  	  data_table_name => '&scoretable',
20:13:27  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:13:27  12  
20:13:27  13  	-- Normalize the data to be scored
20:13:27  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:13:27  15  	  norm_table_name => 'svmc_norm',
20:13:27  16  	  data_table_name => '&scoretable',
20:13:27  17  	  xform_view_name => 'svmc_apply_prep');
20:13:27  18  END;
20:13:27  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.18
20:13:27 SQL> 
20:13:27 SQL> -- Maybe I already collected a score for this prdate.
20:13:27 SQL> -- DELETE it if I did:
20:13:27 SQL> DELETE svm62scores
20:13:27   2  WHERE score > 0
20:13:27   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:13:27   4  -- I need to supply the target attribute name:
20:13:27   5  AND targ = '&1'
20:13:27   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gatt'

0 rows deleted.

Elapsed: 00:00:00.01
20:13:27 SQL> 
20:13:27 SQL> -- We do a drumroll here:
20:13:27 SQL> 
20:13:27 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:13:27   2  SELECT
20:13:27   3  prdate
20:13:27   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:13:27   5  ,sysdate
20:13:27   6  ,SUBSTR(prdate,1,7)pair
20:13:27   7  ,SUBSTR(prdate,-19)ydate
20:13:27   8  ,'&1'
20:13:27   9  FROM svmc_apply_prep
20:13:27  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gatt'

1 row created.

Elapsed: 00:00:00.05
20:13:27 SQL> @score1_5min.sql	      2010-12-27 02:20:00 aud_usd
20:13:27 SQL> --
20:13:27 SQL> -- score1_5min.sql
20:13:27 SQL> --
20:13:27 SQL> 
20:13:27 SQL> -- Demo:
20:13:27 SQL> -- @score1_5min.sql 2010-12-31 20:45:01 aud_usd
20:13:27 SQL> 
20:13:27 SQL> CREATE OR REPLACE VIEW sme AS
20:13:27   2  SELECT
20:13:27   3  prdate
20:13:27   4  ,NULL gatt
20:13:27   5  ,g00
20:13:27   6  ,g01
20:13:27   7  ,g02
20:13:27   8  ,g03
20:13:27   9  ,g04
20:13:27  10  ,g05
20:13:27  11  ,g06
20:13:27  12  ,g07
20:13:27  13  ,g08
20:13:27  14  ,g09
20:13:27  15  ,g10
20:13:27  16  ,g11
20:13:27  17  ,g12
20:13:27  18  ,g13
20:13:27  19  ,g14
20:13:27  20  ,g15
20:13:27  21  ,g16
20:13:27  22  ,g17
20:13:27  23  ,g18
20:13:27  24  ,g19
20:13:27  25  ,g20
20:13:27  26  ,g21
20:13:27  27  ,g22
20:13:27  28  ,g23
20:13:27  29  ,g24
20:13:27  30  ,g25
20:13:27  31  ,g26
20:13:27  32  ,g27
20:13:27  33  ,g28
20:13:27  34  ,g29
20:13:27  35  ,g30
20:13:27  36  ,g31
20:13:27  37  ,g32
20:13:27  38  ,g33
20:13:27  39  ,g34
20:13:27  40  ,g35
20:13:27  41  ,g36
20:13:27  42  ,g37
20:13:27  43  ,g38
20:13:27  44  ,g39
20:13:27  45  ,g40
20:13:27  46  ,g41
20:13:27  47  FROM modsrc
20:13:27  48  WHERE ydate = '&1'||' '||'&2'
20:13:27  49  AND pair = '&3'
20:13:27  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-12-27'||' '||'02:20:00'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.05
20:13:27 SQL> 
20:13:27 SQL> -- rpt
20:13:27 SQL> -- We should see just 1 row:
20:13:27 SQL> 
20:13:27 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.02
20:13:27 SQL> 
20:13:27 SQL> -- Build the model:
20:13:27 SQL> CREATE OR REPLACE VIEW bme AS
20:13:27   2  SELECT
20:13:27   3  prdate
20:13:27   4  ,gatt
20:13:27   5  ,g00
20:13:27   6  ,g01
20:13:27   7  ,g02
20:13:27   8  ,g03
20:13:27   9  ,g04
20:13:27  10  ,g05
20:13:27  11  ,g06
20:13:27  12  ,g07
20:13:27  13  ,g08
20:13:27  14  ,g09
20:13:27  15  ,g10
20:13:27  16  ,g11
20:13:27  17  ,g12
20:13:27  18  ,g13
20:13:27  19  ,g14
20:13:27  20  ,g15
20:13:27  21  ,g16
20:13:27  22  ,g17
20:13:27  23  ,g18
20:13:27  24  ,g19
20:13:27  25  ,g20
20:13:27  26  ,g21
20:13:27  27  ,g22
20:13:27  28  ,g23
20:13:27  29  ,g24
20:13:27  30  ,g25
20:13:27  31  ,g26
20:13:27  32  ,g27
20:13:27  33  ,g28
20:13:27  34  ,g29
20:13:27  35  ,g30
20:13:27  36  ,g31
20:13:27  37  ,g32
20:13:27  38  ,g33
20:13:27  39  ,g34
20:13:27  40  ,g35
20:13:27  41  ,g36
20:13:27  42  ,g37
20:13:27  43  ,g38
20:13:27  44  ,g39
20:13:27  45  ,g40
20:13:27  46  ,g41
20:13:27  47  FROM modsrc
20:13:27  48  WHERE gatt IN('nup','up')
20:13:27  49  -- Use only rows which are older than 1 day:
20:13:27  50  AND 1+ydate < '&1'||' '||'&2'
20:13:27  51  AND pair = '&3'
20:13:27  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-12-27'||' '||'02:20:00'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:13:27 SQL> 
20:13:27 SQL> -- rpt
20:13:27 SQL> 
20:13:27 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt;

GAT COUNT(PRDATE)
--- -------------
nup	    10337
up	     6356

Elapsed: 00:00:00.02
20:13:27 SQL> 
20:13:27 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-12-24 21:55:00

Elapsed: 00:00:00.02
20:13:27 SQL> 
20:13:27 SQL> -- Now build model from bme and score sme
20:13:27 SQL> @score1.sql gatt
20:13:27 SQL> --
20:13:27 SQL> -- score1.sql
20:13:27 SQL> --
20:13:27 SQL> 
20:13:27 SQL> -- I use this script to send 5 params to score.sql
20:13:27 SQL> -- which does the heavy lifting of creating an SVM model.
20:13:27 SQL> -- Then at the very end of this script I use the model
20:13:27 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:13:27 SQL> 
20:13:27 SQL> -- I call this script from 2 other scripts:
20:13:27 SQL> -- score1_5min.sql
20:13:27 SQL> -- score1_5min_gattn.sql
20:13:27 SQL> 
20:13:27 SQL> -- The 1st param is the name of the target attribute.
20:13:27 SQL> -- I like to call my target attributes either gatt or gattn.
20:13:27 SQL> 
20:13:27 SQL> -- Demo:
20:13:27 SQL> -- @score1.sql 'gatt'
20:13:27 SQL> -- @score1.sql 'gattn'
20:13:27 SQL> 
20:13:27 SQL> -- Now, I fill up svmc_apply_prep.
20:13:27 SQL> -- I use same model_name used in score.sql
20:13:27 SQL> DEFINE model_name = 'svmfx101'
20:13:27 SQL> DEFINE bldtable	= 'bme'
20:13:27 SQL> DEFINE scoretable = 'sme'
20:13:27 SQL> DEFINE case_id	= 'prdate'
20:13:27 SQL> -- Demo:
20:13:27 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:13:27 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:13:27 SQL> --
20:13:27 SQL> -- score.sql
20:13:27 SQL> --
20:13:27 SQL> 
20:13:27 SQL> -- usage: score.sql
20:13:27 SQL> 
20:13:27 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:13:27 SQL> 
20:13:27 SQL> -- DEFINE target	   = 'gatt'
20:13:27 SQL> -- DEFINE model_name = 'svmfx101'
20:13:27 SQL> -- DEFINE bldtable   = 'bme'
20:13:27 SQL> -- DEFINE scoretable = 'sme'
20:13:27 SQL> -- DEFINE case_id    = 'prdate'
20:13:27 SQL> 
20:13:27 SQL> DEFINE target	= '&1'
20:13:27 SQL> DEFINE model_name = '&2'
20:13:27 SQL> DEFINE bldtable	= '&3'
20:13:27 SQL> DEFINE scoretable = '&4'
20:13:27 SQL> DEFINE case_id	= '&5'
20:13:27 SQL> 
20:13:27 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:13:27 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:13:27 SQL> 
20:13:27 SQL> -- Builds an SVM model using pl/sql.
20:13:27 SQL> 
20:13:27 SQL> -----------------------------------------------------------------------
20:13:27 SQL> --			    BUILD THE MODEL
20:13:27 SQL> -----------------------------------------------------------------------
20:13:27 SQL> 
20:13:27 SQL> -- Cleanup old build data preparation objects for repeat runs
20:13:27 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.00
20:13:27 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.01
20:13:27 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:13:27 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.00
20:13:27 SQL> 
20:13:27 SQL> 
20:13:27 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:13:27 SQL> --
20:13:27 SQL> -- DROP	TABLE svmc_settings ;
20:13:27 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:13:27 SQL> -- DELETE svmc_settings;
20:13:27 SQL> 
20:13:27 SQL> -- The default classification algorithm is Naive Bayes. So override
20:13:27 SQL> -- this choice to SVM using a settings table.
20:13:27 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:13:27 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:13:27 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:13:27 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:13:27 SQL> -- models.
20:13:27 SQL> --
20:13:27 SQL> 
20:13:27 SQL> -- Do this once and then comment it out.
20:13:27 SQL> -- That makes script go faster.
20:13:27 SQL> -- BEGIN
20:13:27 SQL> -- -- Populate settings table
20:13:27 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:13:27 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:13:27 SQL> --
20:13:27 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:13:27 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:13:27 SQL> --
20:13:27 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:13:27 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:13:27 SQL> --   COMMIT;
20:13:27 SQL> -- END;
20:13:27 SQL> -- /
20:13:27 SQL> 
20:13:27 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:13:27 SQL> 
20:13:27 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:13:27   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:13:27   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:13:27 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:13:27   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:13:27   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:13:27 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:13:27   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:13:27   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:13:27 SQL> 
20:13:27 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:13:27   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:13:27   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:13:27 SQL> 
20:13:27 SQL> --------------------------------
20:13:27 SQL> -- PREPARE BUILD (TRAINING) DATA
20:13:27 SQL> --
20:13:27 SQL> 
20:13:27 SQL> -- 1. Missing Value treatment for all Predictors and
20:13:27 SQL> -- 2. Outlier Treatment and
20:13:27 SQL> -- 3. Normalization are performed below.
20:13:27 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:13:27 SQL> --    normalized here.
20:13:27 SQL> 
20:13:27 SQL> BEGIN
20:13:27   2  	-- Perform missing value treatment for all predictors
20:13:27   3  	-- create miss tables
20:13:27   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:13:27   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:13:27   6  
20:13:27   7  	-- populate miss tables
20:13:27   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:13:27   9  	  miss_table_name => 'svmc_miss_num',
20:13:27  10  	  data_table_name => '&bldtable',
20:13:27  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:13:27  12  
20:13:27  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:13:27  14  	  miss_table_name => 'svmc_miss_cat',
20:13:27  15  	  data_table_name => '&bldtable',
20:13:27  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:13:27  17  
20:13:27  18  	-- xform input data to replace missing values
20:13:27  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:13:27  20  	  miss_table_name => 'svmc_miss_num',
20:13:27  21  	  data_table_name => '&bldtable',
20:13:27  22  	  xform_view_name => 'xformed_build_miss_num');
20:13:27  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:13:27  24  	  miss_table_name => 'svmc_miss_cat',
20:13:27  25  	  data_table_name => '&bldtable',
20:13:27  26  	  xform_view_name => 'xformed_build_miss_cat');
20:13:27  27  
20:13:27  28  	-- Perform outlier treatment.
20:13:27  29  	-- create clip table
20:13:27  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:13:27  31  
20:13:27  32  	-- populate clip table
20:13:27  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:13:27  34  	  clip_table_name => 'svmc_clip',
20:13:27  35  	  data_table_name => '&bldtable',
20:13:27  36  	  tail_frac	  => 0.025,
20:13:27  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:13:27  38  
20:13:27  39  	-- xform input data to winsorized data
20:13:27  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:13:27  41  	  clip_table_name => 'svmc_clip',
20:13:27  42  	  data_table_name => '&bldtable',
20:13:27  43  	  xform_view_name => 'svmc_winsor');
20:13:27  44  
20:13:27  45  	-- create normalization table
20:13:27  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:13:27  47  
20:13:27  48  	-- populate normalization table based on winsorized data
20:13:27  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:13:27  50  	  norm_table_name => 'svmc_norm',
20:13:27  51  	  data_table_name => 'svmc_winsor',
20:13:27  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:13:27  53  
20:13:27  54  	-- normalize the original data
20:13:27  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:13:27  56  	  norm_table_name => 'svmc_norm',
20:13:27  57  	  data_table_name => '&bldtable',
20:13:27  58  	  xform_view_name => 'svmc_build_prep');
20:13:27  59  END;
20:13:27  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:02.19
20:13:30 SQL> 
20:13:30 SQL> ---------------------
20:13:30 SQL> -- CREATE A NEW MODEL
20:13:30 SQL> --
20:13:30 SQL> -- Cleanup old model with the same name for repeat runs
20:13:30 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:13:30   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:13:30   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.91
20:13:31 SQL> 
20:13:31 SQL> -- Build a new SVM Model
20:13:31 SQL> BEGIN
20:13:31   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:13:31   3  	  model_name	      => '&model_name',
20:13:31   4  	  mining_function     => dbms_data_mining.classification,
20:13:31   5  	  data_table_name     => 'svmc_build_prep',
20:13:31   6  	  case_id_column_name => '&case_id',
20:13:31   7  	  target_column_name  => '&target',
20:13:31   8  	  settings_table_name => 'svmc_settings');
20:13:31   9  END;
20:13:31  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:05.14
20:13:36 SQL> 
20:13:36 SQL> -----------------------------------------------------------------------
20:13:36 SQL> --			       APPLY/score THE MODEL
20:13:36 SQL> -----------------------------------------------------------------------
20:13:36 SQL> 
20:13:36 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:13:36 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:13:36   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:13:36   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:13:36 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:13:36   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:13:36   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:13:36 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:13:36   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:13:36   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:13:36 SQL> -----------------------
20:13:36 SQL> -- PREPARE SCORING DATA
20:13:36 SQL> --
20:13:36 SQL> -- If the data for model creation has been prepared, then the data
20:13:36 SQL> -- to be scored using the model must be prepared in the same manner
20:13:36 SQL> -- in order to obtain meaningful results.
20:13:36 SQL> --
20:13:36 SQL> -- 1. Missing Value treatment for all Predictors and
20:13:36 SQL> -- 2. Normalization
20:13:36 SQL> -- No outlier treatment will be performed during test and apply. The
20:13:36 SQL> -- normalization step is sufficient, since the normalization parameters
20:13:36 SQL> -- already capture the effects of outlier treatment done with build data.
20:13:36 SQL> --
20:13:36 SQL> BEGIN
20:13:36   2  	-- Xform Test data to replace missing values
20:13:36   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:13:36   4  	  miss_table_name => 'svmc_miss_num',
20:13:36   5  	  data_table_name => '&scoretable',
20:13:36   6  	  xform_view_name => 'xformed_apply_miss_num');
20:13:36   7  
20:13:36   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:13:36   9  	  miss_table_name => 'svmc_miss_cat',
20:13:36  10  	  data_table_name => '&scoretable',
20:13:36  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:13:36  12  
20:13:36  13  	-- Normalize the data to be scored
20:13:36  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:13:36  15  	  norm_table_name => 'svmc_norm',
20:13:36  16  	  data_table_name => '&scoretable',
20:13:36  17  	  xform_view_name => 'svmc_apply_prep');
20:13:36  18  END;
20:13:36  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.21
20:13:36 SQL> 
20:13:36 SQL> -- Maybe I already collected a score for this prdate.
20:13:36 SQL> -- DELETE it if I did:
20:13:36 SQL> DELETE svm62scores
20:13:36   2  WHERE score > 0
20:13:36   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:13:36   4  -- I need to supply the target attribute name:
20:13:36   5  AND targ = '&1'
20:13:36   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gatt'

0 rows deleted.

Elapsed: 00:00:00.02
20:13:36 SQL> 
20:13:36 SQL> -- We do a drumroll here:
20:13:36 SQL> 
20:13:36 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:13:36   2  SELECT
20:13:36   3  prdate
20:13:36   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:13:36   5  ,sysdate
20:13:36   6  ,SUBSTR(prdate,1,7)pair
20:13:36   7  ,SUBSTR(prdate,-19)ydate
20:13:36   8  ,'&1'
20:13:36   9  FROM svmc_apply_prep
20:13:36  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gatt'

1 row created.

Elapsed: 00:00:00.05
20:13:36 SQL> @score1_5min_gattn.sql	2010-11-26 09:35:01 aud_usd
20:13:36 SQL> --
20:13:36 SQL> -- score1_5min_gattn.sql
20:13:36 SQL> --
20:13:36 SQL> 
20:13:36 SQL> -- Demo:
20:13:36 SQL> -- @score1_5min_gattn.sql 2010-12-31 20:45:01 aud_usd
20:13:36 SQL> 
20:13:36 SQL> CREATE OR REPLACE VIEW sme AS
20:13:36   2  SELECT
20:13:36   3  prdate
20:13:36   4  ,NULL gattn
20:13:36   5  ,g00
20:13:36   6  ,g01
20:13:36   7  ,g02
20:13:36   8  ,g03
20:13:36   9  ,g04
20:13:36  10  ,g05
20:13:36  11  ,g06
20:13:36  12  ,g07
20:13:36  13  ,g08
20:13:36  14  ,g09
20:13:36  15  ,g10
20:13:36  16  ,g11
20:13:36  17  ,g12
20:13:36  18  ,g13
20:13:36  19  ,g14
20:13:36  20  ,g15
20:13:36  21  ,g16
20:13:36  22  ,g17
20:13:36  23  ,g18
20:13:36  24  ,g19
20:13:36  25  ,g20
20:13:36  26  ,g21
20:13:36  27  ,g22
20:13:36  28  ,g23
20:13:36  29  ,g24
20:13:36  30  ,g25
20:13:36  31  ,g26
20:13:36  32  ,g27
20:13:36  33  ,g28
20:13:36  34  ,g29
20:13:36  35  ,g30
20:13:36  36  ,g31
20:13:36  37  ,g32
20:13:36  38  ,g33
20:13:36  39  ,g34
20:13:36  40  ,g35
20:13:36  41  ,g36
20:13:36  42  ,g37
20:13:36  43  ,g38
20:13:36  44  ,g39
20:13:36  45  ,g40
20:13:36  46  ,g41
20:13:36  47  FROM modsrc
20:13:36  48  WHERE ydate = '&1'||' '||'&2'
20:13:36  49  AND pair = '&3'
20:13:36  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-11-26'||' '||'09:35:01'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:13:36 SQL> 
20:13:36 SQL> -- rpt
20:13:36 SQL> -- We should see just 1 row:
20:13:36 SQL> 
20:13:36 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.02
20:13:36 SQL> 
20:13:36 SQL> -- Build the model:
20:13:36 SQL> CREATE OR REPLACE VIEW bme AS
20:13:36   2  SELECT
20:13:36   3  prdate
20:13:36   4  ,gattn
20:13:36   5  ,g00
20:13:36   6  ,g01
20:13:36   7  ,g02
20:13:36   8  ,g03
20:13:36   9  ,g04
20:13:36  10  ,g05
20:13:36  11  ,g06
20:13:36  12  ,g07
20:13:36  13  ,g08
20:13:36  14  ,g09
20:13:36  15  ,g10
20:13:36  16  ,g11
20:13:36  17  ,g12
20:13:36  18  ,g13
20:13:36  19  ,g14
20:13:36  20  ,g15
20:13:36  21  ,g16
20:13:36  22  ,g17
20:13:36  23  ,g18
20:13:36  24  ,g19
20:13:36  25  ,g20
20:13:36  26  ,g21
20:13:36  27  ,g22
20:13:36  28  ,g23
20:13:36  29  ,g24
20:13:36  30  ,g25
20:13:36  31  ,g26
20:13:36  32  ,g27
20:13:36  33  ,g28
20:13:36  34  ,g29
20:13:36  35  ,g30
20:13:36  36  ,g31
20:13:36  37  ,g32
20:13:36  38  ,g33
20:13:36  39  ,g34
20:13:36  40  ,g35
20:13:36  41  ,g36
20:13:36  42  ,g37
20:13:36  43  ,g38
20:13:36  44  ,g39
20:13:36  45  ,g40
20:13:36  46  ,g41
20:13:36  47  FROM modsrc
20:13:36  48  WHERE gattn IN('nup','up')
20:13:36  49  -- Use only rows which are older than 1 day:
20:13:36  50  AND 1+ydate < '&1'||' '||'&2'
20:13:36  51  AND pair = '&3'
20:13:36  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-11-26'||' '||'09:35:01'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:13:36 SQL> 
20:13:36 SQL> -- rpt
20:13:36 SQL> 
20:13:36 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	     6722
up	     3880

Elapsed: 00:00:00.03
20:13:36 SQL> 
20:13:36 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-11-25 09:30:01

Elapsed: 00:00:00.01
20:13:36 SQL> 
20:13:36 SQL> -- Now build model from bme and score sme
20:13:36 SQL> @score1.sql gattn
20:13:36 SQL> --
20:13:36 SQL> -- score1.sql
20:13:36 SQL> --
20:13:36 SQL> 
20:13:36 SQL> -- I use this script to send 5 params to score.sql
20:13:36 SQL> -- which does the heavy lifting of creating an SVM model.
20:13:36 SQL> -- Then at the very end of this script I use the model
20:13:36 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:13:36 SQL> 
20:13:36 SQL> -- I call this script from 2 other scripts:
20:13:36 SQL> -- score1_5min.sql
20:13:36 SQL> -- score1_5min_gattn.sql
20:13:36 SQL> 
20:13:36 SQL> -- The 1st param is the name of the target attribute.
20:13:36 SQL> -- I like to call my target attributes either gatt or gattn.
20:13:36 SQL> 
20:13:36 SQL> -- Demo:
20:13:36 SQL> -- @score1.sql 'gatt'
20:13:36 SQL> -- @score1.sql 'gattn'
20:13:36 SQL> 
20:13:36 SQL> -- Now, I fill up svmc_apply_prep.
20:13:36 SQL> -- I use same model_name used in score.sql
20:13:36 SQL> DEFINE model_name = 'svmfx101'
20:13:36 SQL> DEFINE bldtable	= 'bme'
20:13:36 SQL> DEFINE scoretable = 'sme'
20:13:36 SQL> DEFINE case_id	= 'prdate'
20:13:36 SQL> -- Demo:
20:13:36 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:13:36 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:13:36 SQL> --
20:13:36 SQL> -- score.sql
20:13:36 SQL> --
20:13:36 SQL> 
20:13:36 SQL> -- usage: score.sql
20:13:36 SQL> 
20:13:36 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:13:36 SQL> 
20:13:36 SQL> -- DEFINE target	   = 'gatt'
20:13:36 SQL> -- DEFINE model_name = 'svmfx101'
20:13:36 SQL> -- DEFINE bldtable   = 'bme'
20:13:36 SQL> -- DEFINE scoretable = 'sme'
20:13:36 SQL> -- DEFINE case_id    = 'prdate'
20:13:36 SQL> 
20:13:36 SQL> DEFINE target	= '&1'
20:13:36 SQL> DEFINE model_name = '&2'
20:13:36 SQL> DEFINE bldtable	= '&3'
20:13:36 SQL> DEFINE scoretable = '&4'
20:13:36 SQL> DEFINE case_id	= '&5'
20:13:36 SQL> 
20:13:36 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:13:36 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:13:36 SQL> 
20:13:36 SQL> -- Builds an SVM model using pl/sql.
20:13:36 SQL> 
20:13:36 SQL> -----------------------------------------------------------------------
20:13:36 SQL> --			    BUILD THE MODEL
20:13:36 SQL> -----------------------------------------------------------------------
20:13:36 SQL> 
20:13:36 SQL> -- Cleanup old build data preparation objects for repeat runs
20:13:36 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.00
20:13:36 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:13:36 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:13:36 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.01
20:13:36 SQL> 
20:13:36 SQL> 
20:13:36 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:13:36 SQL> --
20:13:36 SQL> -- DROP	TABLE svmc_settings ;
20:13:36 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:13:36 SQL> -- DELETE svmc_settings;
20:13:36 SQL> 
20:13:36 SQL> -- The default classification algorithm is Naive Bayes. So override
20:13:36 SQL> -- this choice to SVM using a settings table.
20:13:36 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:13:36 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:13:36 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:13:36 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:13:36 SQL> -- models.
20:13:36 SQL> --
20:13:36 SQL> 
20:13:36 SQL> -- Do this once and then comment it out.
20:13:36 SQL> -- That makes script go faster.
20:13:36 SQL> -- BEGIN
20:13:36 SQL> -- -- Populate settings table
20:13:36 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:13:36 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:13:36 SQL> --
20:13:36 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:13:36 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:13:36 SQL> --
20:13:36 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:13:36 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:13:36 SQL> --   COMMIT;
20:13:36 SQL> -- END;
20:13:36 SQL> -- /
20:13:36 SQL> 
20:13:36 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:13:36 SQL> 
20:13:36 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:13:36   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:13:36   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:13:36 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:13:36   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:13:36   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:13:36 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:13:36   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:13:36   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:13:36 SQL> 
20:13:36 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:13:36   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:13:36   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:13:36 SQL> 
20:13:36 SQL> --------------------------------
20:13:36 SQL> -- PREPARE BUILD (TRAINING) DATA
20:13:36 SQL> --
20:13:36 SQL> 
20:13:36 SQL> -- 1. Missing Value treatment for all Predictors and
20:13:36 SQL> -- 2. Outlier Treatment and
20:13:36 SQL> -- 3. Normalization are performed below.
20:13:36 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:13:36 SQL> --    normalized here.
20:13:36 SQL> 
20:13:36 SQL> BEGIN
20:13:36   2  	-- Perform missing value treatment for all predictors
20:13:36   3  	-- create miss tables
20:13:36   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:13:36   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:13:36   6  
20:13:36   7  	-- populate miss tables
20:13:36   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:13:36   9  	  miss_table_name => 'svmc_miss_num',
20:13:36  10  	  data_table_name => '&bldtable',
20:13:36  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:13:36  12  
20:13:36  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:13:36  14  	  miss_table_name => 'svmc_miss_cat',
20:13:36  15  	  data_table_name => '&bldtable',
20:13:36  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:13:36  17  
20:13:36  18  	-- xform input data to replace missing values
20:13:36  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:13:36  20  	  miss_table_name => 'svmc_miss_num',
20:13:36  21  	  data_table_name => '&bldtable',
20:13:36  22  	  xform_view_name => 'xformed_build_miss_num');
20:13:36  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:13:36  24  	  miss_table_name => 'svmc_miss_cat',
20:13:36  25  	  data_table_name => '&bldtable',
20:13:36  26  	  xform_view_name => 'xformed_build_miss_cat');
20:13:36  27  
20:13:36  28  	-- Perform outlier treatment.
20:13:36  29  	-- create clip table
20:13:36  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:13:36  31  
20:13:36  32  	-- populate clip table
20:13:36  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:13:36  34  	  clip_table_name => 'svmc_clip',
20:13:36  35  	  data_table_name => '&bldtable',
20:13:36  36  	  tail_frac	  => 0.025,
20:13:36  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:13:36  38  
20:13:36  39  	-- xform input data to winsorized data
20:13:36  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:13:36  41  	  clip_table_name => 'svmc_clip',
20:13:36  42  	  data_table_name => '&bldtable',
20:13:36  43  	  xform_view_name => 'svmc_winsor');
20:13:36  44  
20:13:36  45  	-- create normalization table
20:13:36  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:13:36  47  
20:13:36  48  	-- populate normalization table based on winsorized data
20:13:36  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:13:36  50  	  norm_table_name => 'svmc_norm',
20:13:36  51  	  data_table_name => 'svmc_winsor',
20:13:36  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:13:36  53  
20:13:36  54  	-- normalize the original data
20:13:36  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:13:36  56  	  norm_table_name => 'svmc_norm',
20:13:36  57  	  data_table_name => '&bldtable',
20:13:36  58  	  xform_view_name => 'svmc_build_prep');
20:13:36  59  END;
20:13:36  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.79
20:13:38 SQL> 
20:13:38 SQL> ---------------------
20:13:38 SQL> -- CREATE A NEW MODEL
20:13:38 SQL> --
20:13:38 SQL> -- Cleanup old model with the same name for repeat runs
20:13:38 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:13:38   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:13:38   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.91
20:13:39 SQL> 
20:13:39 SQL> -- Build a new SVM Model
20:13:39 SQL> BEGIN
20:13:39   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:13:39   3  	  model_name	      => '&model_name',
20:13:39   4  	  mining_function     => dbms_data_mining.classification,
20:13:39   5  	  data_table_name     => 'svmc_build_prep',
20:13:39   6  	  case_id_column_name => '&case_id',
20:13:39   7  	  target_column_name  => '&target',
20:13:39   8  	  settings_table_name => 'svmc_settings');
20:13:39   9  END;
20:13:39  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:04.28
20:13:43 SQL> 
20:13:43 SQL> -----------------------------------------------------------------------
20:13:43 SQL> --			       APPLY/score THE MODEL
20:13:43 SQL> -----------------------------------------------------------------------
20:13:43 SQL> 
20:13:43 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:13:43 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:13:43   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:13:43   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:13:43 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:13:43   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:13:43   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:13:43 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:13:43   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:13:43   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:13:43 SQL> -----------------------
20:13:43 SQL> -- PREPARE SCORING DATA
20:13:43 SQL> --
20:13:43 SQL> -- If the data for model creation has been prepared, then the data
20:13:43 SQL> -- to be scored using the model must be prepared in the same manner
20:13:43 SQL> -- in order to obtain meaningful results.
20:13:43 SQL> --
20:13:43 SQL> -- 1. Missing Value treatment for all Predictors and
20:13:43 SQL> -- 2. Normalization
20:13:43 SQL> -- No outlier treatment will be performed during test and apply. The
20:13:43 SQL> -- normalization step is sufficient, since the normalization parameters
20:13:43 SQL> -- already capture the effects of outlier treatment done with build data.
20:13:43 SQL> --
20:13:43 SQL> BEGIN
20:13:43   2  	-- Xform Test data to replace missing values
20:13:43   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:13:43   4  	  miss_table_name => 'svmc_miss_num',
20:13:43   5  	  data_table_name => '&scoretable',
20:13:43   6  	  xform_view_name => 'xformed_apply_miss_num');
20:13:43   7  
20:13:43   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:13:43   9  	  miss_table_name => 'svmc_miss_cat',
20:13:43  10  	  data_table_name => '&scoretable',
20:13:43  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:13:43  12  
20:13:43  13  	-- Normalize the data to be scored
20:13:43  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:13:43  15  	  norm_table_name => 'svmc_norm',
20:13:43  16  	  data_table_name => '&scoretable',
20:13:43  17  	  xform_view_name => 'svmc_apply_prep');
20:13:43  18  END;
20:13:43  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.17
20:13:44 SQL> 
20:13:44 SQL> -- Maybe I already collected a score for this prdate.
20:13:44 SQL> -- DELETE it if I did:
20:13:44 SQL> DELETE svm62scores
20:13:44   2  WHERE score > 0
20:13:44   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:13:44   4  -- I need to supply the target attribute name:
20:13:44   5  AND targ = '&1'
20:13:44   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gattn'

0 rows deleted.

Elapsed: 00:00:00.02
20:13:44 SQL> 
20:13:44 SQL> -- We do a drumroll here:
20:13:44 SQL> 
20:13:44 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:13:44   2  SELECT
20:13:44   3  prdate
20:13:44   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:13:44   5  ,sysdate
20:13:44   6  ,SUBSTR(prdate,1,7)pair
20:13:44   7  ,SUBSTR(prdate,-19)ydate
20:13:44   8  ,'&1'
20:13:44   9  FROM svmc_apply_prep
20:13:44  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gattn'

1 row created.

Elapsed: 00:00:00.05
20:13:44 SQL> @score1_5min.sql	      2010-11-18 07:10:01 aud_usd
20:13:44 SQL> --
20:13:44 SQL> -- score1_5min.sql
20:13:44 SQL> --
20:13:44 SQL> 
20:13:44 SQL> -- Demo:
20:13:44 SQL> -- @score1_5min.sql 2010-12-31 20:45:01 aud_usd
20:13:44 SQL> 
20:13:44 SQL> CREATE OR REPLACE VIEW sme AS
20:13:44   2  SELECT
20:13:44   3  prdate
20:13:44   4  ,NULL gatt
20:13:44   5  ,g00
20:13:44   6  ,g01
20:13:44   7  ,g02
20:13:44   8  ,g03
20:13:44   9  ,g04
20:13:44  10  ,g05
20:13:44  11  ,g06
20:13:44  12  ,g07
20:13:44  13  ,g08
20:13:44  14  ,g09
20:13:44  15  ,g10
20:13:44  16  ,g11
20:13:44  17  ,g12
20:13:44  18  ,g13
20:13:44  19  ,g14
20:13:44  20  ,g15
20:13:44  21  ,g16
20:13:44  22  ,g17
20:13:44  23  ,g18
20:13:44  24  ,g19
20:13:44  25  ,g20
20:13:44  26  ,g21
20:13:44  27  ,g22
20:13:44  28  ,g23
20:13:44  29  ,g24
20:13:44  30  ,g25
20:13:44  31  ,g26
20:13:44  32  ,g27
20:13:44  33  ,g28
20:13:44  34  ,g29
20:13:44  35  ,g30
20:13:44  36  ,g31
20:13:44  37  ,g32
20:13:44  38  ,g33
20:13:44  39  ,g34
20:13:44  40  ,g35
20:13:44  41  ,g36
20:13:44  42  ,g37
20:13:44  43  ,g38
20:13:44  44  ,g39
20:13:44  45  ,g40
20:13:44  46  ,g41
20:13:44  47  FROM modsrc
20:13:44  48  WHERE ydate = '&1'||' '||'&2'
20:13:44  49  AND pair = '&3'
20:13:44  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-11-18'||' '||'07:10:01'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:13:44 SQL> 
20:13:44 SQL> -- rpt
20:13:44 SQL> -- We should see just 1 row:
20:13:44 SQL> 
20:13:44 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.02
20:13:44 SQL> 
20:13:44 SQL> -- Build the model:
20:13:44 SQL> CREATE OR REPLACE VIEW bme AS
20:13:44   2  SELECT
20:13:44   3  prdate
20:13:44   4  ,gatt
20:13:44   5  ,g00
20:13:44   6  ,g01
20:13:44   7  ,g02
20:13:44   8  ,g03
20:13:44   9  ,g04
20:13:44  10  ,g05
20:13:44  11  ,g06
20:13:44  12  ,g07
20:13:44  13  ,g08
20:13:44  14  ,g09
20:13:44  15  ,g10
20:13:44  16  ,g11
20:13:44  17  ,g12
20:13:44  18  ,g13
20:13:44  19  ,g14
20:13:44  20  ,g15
20:13:44  21  ,g16
20:13:44  22  ,g17
20:13:44  23  ,g18
20:13:44  24  ,g19
20:13:44  25  ,g20
20:13:44  26  ,g21
20:13:44  27  ,g22
20:13:44  28  ,g23
20:13:44  29  ,g24
20:13:44  30  ,g25
20:13:44  31  ,g26
20:13:44  32  ,g27
20:13:44  33  ,g28
20:13:44  34  ,g29
20:13:44  35  ,g30
20:13:44  36  ,g31
20:13:44  37  ,g32
20:13:44  38  ,g33
20:13:44  39  ,g34
20:13:44  40  ,g35
20:13:44  41  ,g36
20:13:44  42  ,g37
20:13:44  43  ,g38
20:13:44  44  ,g39
20:13:44  45  ,g40
20:13:44  46  ,g41
20:13:44  47  FROM modsrc
20:13:44  48  WHERE gatt IN('nup','up')
20:13:44  49  -- Use only rows which are older than 1 day:
20:13:44  50  AND 1+ydate < '&1'||' '||'&2'
20:13:44  51  AND pair = '&3'
20:13:44  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-11-18'||' '||'07:10:01'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.06
20:13:44 SQL> 
20:13:44 SQL> -- rpt
20:13:44 SQL> 
20:13:44 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt;

GAT COUNT(PRDATE)
--- -------------
nup	     5497
up	     3346

Elapsed: 00:00:00.02
20:13:44 SQL> 
20:13:44 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-11-17 07:05:01

Elapsed: 00:00:00.01
20:13:44 SQL> 
20:13:44 SQL> -- Now build model from bme and score sme
20:13:44 SQL> @score1.sql gatt
20:13:44 SQL> --
20:13:44 SQL> -- score1.sql
20:13:44 SQL> --
20:13:44 SQL> 
20:13:44 SQL> -- I use this script to send 5 params to score.sql
20:13:44 SQL> -- which does the heavy lifting of creating an SVM model.
20:13:44 SQL> -- Then at the very end of this script I use the model
20:13:44 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:13:44 SQL> 
20:13:44 SQL> -- I call this script from 2 other scripts:
20:13:44 SQL> -- score1_5min.sql
20:13:44 SQL> -- score1_5min_gattn.sql
20:13:44 SQL> 
20:13:44 SQL> -- The 1st param is the name of the target attribute.
20:13:44 SQL> -- I like to call my target attributes either gatt or gattn.
20:13:44 SQL> 
20:13:44 SQL> -- Demo:
20:13:44 SQL> -- @score1.sql 'gatt'
20:13:44 SQL> -- @score1.sql 'gattn'
20:13:44 SQL> 
20:13:44 SQL> -- Now, I fill up svmc_apply_prep.
20:13:44 SQL> -- I use same model_name used in score.sql
20:13:44 SQL> DEFINE model_name = 'svmfx101'
20:13:44 SQL> DEFINE bldtable	= 'bme'
20:13:44 SQL> DEFINE scoretable = 'sme'
20:13:44 SQL> DEFINE case_id	= 'prdate'
20:13:44 SQL> -- Demo:
20:13:44 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:13:44 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:13:44 SQL> --
20:13:44 SQL> -- score.sql
20:13:44 SQL> --
20:13:44 SQL> 
20:13:44 SQL> -- usage: score.sql
20:13:44 SQL> 
20:13:44 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:13:44 SQL> 
20:13:44 SQL> -- DEFINE target	   = 'gatt'
20:13:44 SQL> -- DEFINE model_name = 'svmfx101'
20:13:44 SQL> -- DEFINE bldtable   = 'bme'
20:13:44 SQL> -- DEFINE scoretable = 'sme'
20:13:44 SQL> -- DEFINE case_id    = 'prdate'
20:13:44 SQL> 
20:13:44 SQL> DEFINE target	= '&1'
20:13:44 SQL> DEFINE model_name = '&2'
20:13:44 SQL> DEFINE bldtable	= '&3'
20:13:44 SQL> DEFINE scoretable = '&4'
20:13:44 SQL> DEFINE case_id	= '&5'
20:13:44 SQL> 
20:13:44 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:13:44 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:13:44 SQL> 
20:13:44 SQL> -- Builds an SVM model using pl/sql.
20:13:44 SQL> 
20:13:44 SQL> -----------------------------------------------------------------------
20:13:44 SQL> --			    BUILD THE MODEL
20:13:44 SQL> -----------------------------------------------------------------------
20:13:44 SQL> 
20:13:44 SQL> -- Cleanup old build data preparation objects for repeat runs
20:13:44 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.00
20:13:44 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:13:44 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:13:44 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.00
20:13:44 SQL> 
20:13:44 SQL> 
20:13:44 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:13:44 SQL> --
20:13:44 SQL> -- DROP	TABLE svmc_settings ;
20:13:44 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:13:44 SQL> -- DELETE svmc_settings;
20:13:44 SQL> 
20:13:44 SQL> -- The default classification algorithm is Naive Bayes. So override
20:13:44 SQL> -- this choice to SVM using a settings table.
20:13:44 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:13:44 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:13:44 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:13:44 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:13:44 SQL> -- models.
20:13:44 SQL> --
20:13:44 SQL> 
20:13:44 SQL> -- Do this once and then comment it out.
20:13:44 SQL> -- That makes script go faster.
20:13:44 SQL> -- BEGIN
20:13:44 SQL> -- -- Populate settings table
20:13:44 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:13:44 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:13:44 SQL> --
20:13:44 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:13:44 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:13:44 SQL> --
20:13:44 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:13:44 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:13:44 SQL> --   COMMIT;
20:13:44 SQL> -- END;
20:13:44 SQL> -- /
20:13:44 SQL> 
20:13:44 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:13:44 SQL> 
20:13:44 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:13:44   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:13:44   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:13:44 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:13:44   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:13:44   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:13:44 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:13:44   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:13:44   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:13:44 SQL> 
20:13:44 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:13:44   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:13:44   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
20:13:44 SQL> 
20:13:44 SQL> --------------------------------
20:13:44 SQL> -- PREPARE BUILD (TRAINING) DATA
20:13:44 SQL> --
20:13:44 SQL> 
20:13:44 SQL> -- 1. Missing Value treatment for all Predictors and
20:13:44 SQL> -- 2. Outlier Treatment and
20:13:44 SQL> -- 3. Normalization are performed below.
20:13:44 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:13:44 SQL> --    normalized here.
20:13:44 SQL> 
20:13:44 SQL> BEGIN
20:13:44   2  	-- Perform missing value treatment for all predictors
20:13:44   3  	-- create miss tables
20:13:44   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:13:44   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:13:44   6  
20:13:44   7  	-- populate miss tables
20:13:44   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:13:44   9  	  miss_table_name => 'svmc_miss_num',
20:13:44  10  	  data_table_name => '&bldtable',
20:13:44  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:13:44  12  
20:13:44  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:13:44  14  	  miss_table_name => 'svmc_miss_cat',
20:13:44  15  	  data_table_name => '&bldtable',
20:13:44  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:13:44  17  
20:13:44  18  	-- xform input data to replace missing values
20:13:44  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:13:44  20  	  miss_table_name => 'svmc_miss_num',
20:13:44  21  	  data_table_name => '&bldtable',
20:13:44  22  	  xform_view_name => 'xformed_build_miss_num');
20:13:44  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:13:44  24  	  miss_table_name => 'svmc_miss_cat',
20:13:44  25  	  data_table_name => '&bldtable',
20:13:44  26  	  xform_view_name => 'xformed_build_miss_cat');
20:13:44  27  
20:13:44  28  	-- Perform outlier treatment.
20:13:44  29  	-- create clip table
20:13:44  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:13:44  31  
20:13:44  32  	-- populate clip table
20:13:44  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:13:44  34  	  clip_table_name => 'svmc_clip',
20:13:44  35  	  data_table_name => '&bldtable',
20:13:44  36  	  tail_frac	  => 0.025,
20:13:44  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:13:44  38  
20:13:44  39  	-- xform input data to winsorized data
20:13:44  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:13:44  41  	  clip_table_name => 'svmc_clip',
20:13:44  42  	  data_table_name => '&bldtable',
20:13:44  43  	  xform_view_name => 'svmc_winsor');
20:13:44  44  
20:13:44  45  	-- create normalization table
20:13:44  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:13:44  47  
20:13:44  48  	-- populate normalization table based on winsorized data
20:13:44  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:13:44  50  	  norm_table_name => 'svmc_norm',
20:13:44  51  	  data_table_name => 'svmc_winsor',
20:13:44  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:13:44  53  
20:13:44  54  	-- normalize the original data
20:13:44  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:13:44  56  	  norm_table_name => 'svmc_norm',
20:13:44  57  	  data_table_name => '&bldtable',
20:13:44  58  	  xform_view_name => 'svmc_build_prep');
20:13:44  59  END;
20:13:44  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.55
20:13:46 SQL> 
20:13:46 SQL> ---------------------
20:13:46 SQL> -- CREATE A NEW MODEL
20:13:46 SQL> --
20:13:46 SQL> -- Cleanup old model with the same name for repeat runs
20:13:46 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:13:46   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:13:46   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.71
20:13:47 SQL> 
20:13:47 SQL> -- Build a new SVM Model
20:13:47 SQL> BEGIN
20:13:47   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:13:47   3  	  model_name	      => '&model_name',
20:13:47   4  	  mining_function     => dbms_data_mining.classification,
20:13:47   5  	  data_table_name     => 'svmc_build_prep',
20:13:47   6  	  case_id_column_name => '&case_id',
20:13:47   7  	  target_column_name  => '&target',
20:13:47   8  	  settings_table_name => 'svmc_settings');
20:13:47   9  END;
20:13:47  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:03.55
20:13:51 SQL> 
20:13:51 SQL> -----------------------------------------------------------------------
20:13:51 SQL> --			       APPLY/score THE MODEL
20:13:51 SQL> -----------------------------------------------------------------------
20:13:51 SQL> 
20:13:51 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:13:51 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:13:51   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:13:51   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:13:51 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:13:51   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:13:51   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:13:51 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:13:51   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:13:51   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:13:51 SQL> -----------------------
20:13:51 SQL> -- PREPARE SCORING DATA
20:13:51 SQL> --
20:13:51 SQL> -- If the data for model creation has been prepared, then the data
20:13:51 SQL> -- to be scored using the model must be prepared in the same manner
20:13:51 SQL> -- in order to obtain meaningful results.
20:13:51 SQL> --
20:13:51 SQL> -- 1. Missing Value treatment for all Predictors and
20:13:51 SQL> -- 2. Normalization
20:13:51 SQL> -- No outlier treatment will be performed during test and apply. The
20:13:51 SQL> -- normalization step is sufficient, since the normalization parameters
20:13:51 SQL> -- already capture the effects of outlier treatment done with build data.
20:13:51 SQL> --
20:13:51 SQL> BEGIN
20:13:51   2  	-- Xform Test data to replace missing values
20:13:51   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:13:51   4  	  miss_table_name => 'svmc_miss_num',
20:13:51   5  	  data_table_name => '&scoretable',
20:13:51   6  	  xform_view_name => 'xformed_apply_miss_num');
20:13:51   7  
20:13:51   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:13:51   9  	  miss_table_name => 'svmc_miss_cat',
20:13:51  10  	  data_table_name => '&scoretable',
20:13:51  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:13:51  12  
20:13:51  13  	-- Normalize the data to be scored
20:13:51  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:13:51  15  	  norm_table_name => 'svmc_norm',
20:13:51  16  	  data_table_name => '&scoretable',
20:13:51  17  	  xform_view_name => 'svmc_apply_prep');
20:13:51  18  END;
20:13:51  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.18
20:13:51 SQL> 
20:13:51 SQL> -- Maybe I already collected a score for this prdate.
20:13:51 SQL> -- DELETE it if I did:
20:13:51 SQL> DELETE svm62scores
20:13:51   2  WHERE score > 0
20:13:51   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:13:51   4  -- I need to supply the target attribute name:
20:13:51   5  AND targ = '&1'
20:13:51   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gatt'

0 rows deleted.

Elapsed: 00:00:00.01
20:13:51 SQL> 
20:13:51 SQL> -- We do a drumroll here:
20:13:51 SQL> 
20:13:51 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:13:51   2  SELECT
20:13:51   3  prdate
20:13:51   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:13:51   5  ,sysdate
20:13:51   6  ,SUBSTR(prdate,1,7)pair
20:13:51   7  ,SUBSTR(prdate,-19)ydate
20:13:51   8  ,'&1'
20:13:51   9  FROM svmc_apply_prep
20:13:51  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gatt'

1 row created.

Elapsed: 00:00:00.05
20:13:51 SQL> @score1_5min_gattn.sql	2010-12-23 13:10:00 aud_usd
20:13:51 SQL> --
20:13:51 SQL> -- score1_5min_gattn.sql
20:13:51 SQL> --
20:13:51 SQL> 
20:13:51 SQL> -- Demo:
20:13:51 SQL> -- @score1_5min_gattn.sql 2010-12-31 20:45:01 aud_usd
20:13:51 SQL> 
20:13:51 SQL> CREATE OR REPLACE VIEW sme AS
20:13:51   2  SELECT
20:13:51   3  prdate
20:13:51   4  ,NULL gattn
20:13:51   5  ,g00
20:13:51   6  ,g01
20:13:51   7  ,g02
20:13:51   8  ,g03
20:13:51   9  ,g04
20:13:51  10  ,g05
20:13:51  11  ,g06
20:13:51  12  ,g07
20:13:51  13  ,g08
20:13:51  14  ,g09
20:13:51  15  ,g10
20:13:51  16  ,g11
20:13:51  17  ,g12
20:13:51  18  ,g13
20:13:51  19  ,g14
20:13:51  20  ,g15
20:13:51  21  ,g16
20:13:51  22  ,g17
20:13:51  23  ,g18
20:13:51  24  ,g19
20:13:51  25  ,g20
20:13:51  26  ,g21
20:13:51  27  ,g22
20:13:51  28  ,g23
20:13:51  29  ,g24
20:13:51  30  ,g25
20:13:51  31  ,g26
20:13:51  32  ,g27
20:13:51  33  ,g28
20:13:51  34  ,g29
20:13:51  35  ,g30
20:13:51  36  ,g31
20:13:51  37  ,g32
20:13:51  38  ,g33
20:13:51  39  ,g34
20:13:51  40  ,g35
20:13:51  41  ,g36
20:13:51  42  ,g37
20:13:51  43  ,g38
20:13:51  44  ,g39
20:13:51  45  ,g40
20:13:51  46  ,g41
20:13:51  47  FROM modsrc
20:13:51  48  WHERE ydate = '&1'||' '||'&2'
20:13:51  49  AND pair = '&3'
20:13:51  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-12-23'||' '||'13:10:00'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:13:51 SQL> 
20:13:51 SQL> -- rpt
20:13:51 SQL> -- We should see just 1 row:
20:13:51 SQL> 
20:13:51 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.02
20:13:51 SQL> 
20:13:51 SQL> -- Build the model:
20:13:51 SQL> CREATE OR REPLACE VIEW bme AS
20:13:51   2  SELECT
20:13:51   3  prdate
20:13:51   4  ,gattn
20:13:51   5  ,g00
20:13:51   6  ,g01
20:13:51   7  ,g02
20:13:51   8  ,g03
20:13:51   9  ,g04
20:13:51  10  ,g05
20:13:51  11  ,g06
20:13:51  12  ,g07
20:13:51  13  ,g08
20:13:51  14  ,g09
20:13:51  15  ,g10
20:13:51  16  ,g11
20:13:51  17  ,g12
20:13:51  18  ,g13
20:13:51  19  ,g14
20:13:51  20  ,g15
20:13:51  21  ,g16
20:13:51  22  ,g17
20:13:51  23  ,g18
20:13:51  24  ,g19
20:13:51  25  ,g20
20:13:51  26  ,g21
20:13:51  27  ,g22
20:13:51  28  ,g23
20:13:51  29  ,g24
20:13:51  30  ,g25
20:13:51  31  ,g26
20:13:51  32  ,g27
20:13:51  33  ,g28
20:13:51  34  ,g29
20:13:51  35  ,g30
20:13:51  36  ,g31
20:13:51  37  ,g32
20:13:51  38  ,g33
20:13:51  39  ,g34
20:13:51  40  ,g35
20:13:51  41  ,g36
20:13:51  42  ,g37
20:13:51  43  ,g38
20:13:51  44  ,g39
20:13:51  45  ,g40
20:13:51  46  ,g41
20:13:51  47  FROM modsrc
20:13:51  48  WHERE gattn IN('nup','up')
20:13:51  49  -- Use only rows which are older than 1 day:
20:13:51  50  AND 1+ydate < '&1'||' '||'&2'
20:13:51  51  AND pair = '&3'
20:13:51  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-12-23'||' '||'13:10:00'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:13:51 SQL> 
20:13:51 SQL> -- rpt
20:13:51 SQL> 
20:13:51 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	    10496
up	     5546

Elapsed: 00:00:00.03
20:13:51 SQL> 
20:13:51 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-12-22 13:05:00

Elapsed: 00:00:00.01
20:13:51 SQL> 
20:13:51 SQL> -- Now build model from bme and score sme
20:13:51 SQL> @score1.sql gattn
20:13:51 SQL> --
20:13:51 SQL> -- score1.sql
20:13:51 SQL> --
20:13:51 SQL> 
20:13:51 SQL> -- I use this script to send 5 params to score.sql
20:13:51 SQL> -- which does the heavy lifting of creating an SVM model.
20:13:51 SQL> -- Then at the very end of this script I use the model
20:13:51 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:13:51 SQL> 
20:13:51 SQL> -- I call this script from 2 other scripts:
20:13:51 SQL> -- score1_5min.sql
20:13:51 SQL> -- score1_5min_gattn.sql
20:13:51 SQL> 
20:13:51 SQL> -- The 1st param is the name of the target attribute.
20:13:51 SQL> -- I like to call my target attributes either gatt or gattn.
20:13:51 SQL> 
20:13:51 SQL> -- Demo:
20:13:51 SQL> -- @score1.sql 'gatt'
20:13:51 SQL> -- @score1.sql 'gattn'
20:13:51 SQL> 
20:13:51 SQL> -- Now, I fill up svmc_apply_prep.
20:13:51 SQL> -- I use same model_name used in score.sql
20:13:51 SQL> DEFINE model_name = 'svmfx101'
20:13:51 SQL> DEFINE bldtable	= 'bme'
20:13:51 SQL> DEFINE scoretable = 'sme'
20:13:51 SQL> DEFINE case_id	= 'prdate'
20:13:51 SQL> -- Demo:
20:13:51 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:13:51 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:13:51 SQL> --
20:13:51 SQL> -- score.sql
20:13:51 SQL> --
20:13:51 SQL> 
20:13:51 SQL> -- usage: score.sql
20:13:51 SQL> 
20:13:51 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:13:51 SQL> 
20:13:51 SQL> -- DEFINE target	   = 'gatt'
20:13:51 SQL> -- DEFINE model_name = 'svmfx101'
20:13:51 SQL> -- DEFINE bldtable   = 'bme'
20:13:51 SQL> -- DEFINE scoretable = 'sme'
20:13:51 SQL> -- DEFINE case_id    = 'prdate'
20:13:51 SQL> 
20:13:51 SQL> DEFINE target	= '&1'
20:13:51 SQL> DEFINE model_name = '&2'
20:13:51 SQL> DEFINE bldtable	= '&3'
20:13:51 SQL> DEFINE scoretable = '&4'
20:13:51 SQL> DEFINE case_id	= '&5'
20:13:51 SQL> 
20:13:51 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:13:51 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:13:51 SQL> 
20:13:51 SQL> -- Builds an SVM model using pl/sql.
20:13:51 SQL> 
20:13:51 SQL> -----------------------------------------------------------------------
20:13:51 SQL> --			    BUILD THE MODEL
20:13:51 SQL> -----------------------------------------------------------------------
20:13:51 SQL> 
20:13:51 SQL> -- Cleanup old build data preparation objects for repeat runs
20:13:51 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.00
20:13:51 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:13:51 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:13:51 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.00
20:13:51 SQL> 
20:13:51 SQL> 
20:13:51 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:13:51 SQL> --
20:13:51 SQL> -- DROP	TABLE svmc_settings ;
20:13:51 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:13:51 SQL> -- DELETE svmc_settings;
20:13:51 SQL> 
20:13:51 SQL> -- The default classification algorithm is Naive Bayes. So override
20:13:51 SQL> -- this choice to SVM using a settings table.
20:13:51 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:13:51 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:13:51 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:13:51 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:13:51 SQL> -- models.
20:13:51 SQL> --
20:13:51 SQL> 
20:13:51 SQL> -- Do this once and then comment it out.
20:13:51 SQL> -- That makes script go faster.
20:13:51 SQL> -- BEGIN
20:13:51 SQL> -- -- Populate settings table
20:13:51 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:13:51 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:13:51 SQL> --
20:13:51 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:13:51 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:13:51 SQL> --
20:13:51 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:13:51 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:13:51 SQL> --   COMMIT;
20:13:51 SQL> -- END;
20:13:51 SQL> -- /
20:13:51 SQL> 
20:13:51 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:13:51 SQL> 
20:13:51 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:13:51   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:13:51   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
20:13:51 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:13:51   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:13:51   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:13:51 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:13:51   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:13:51   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:13:51 SQL> 
20:13:51 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:13:51   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:13:51   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:13:51 SQL> 
20:13:51 SQL> --------------------------------
20:13:51 SQL> -- PREPARE BUILD (TRAINING) DATA
20:13:51 SQL> --
20:13:51 SQL> 
20:13:51 SQL> -- 1. Missing Value treatment for all Predictors and
20:13:51 SQL> -- 2. Outlier Treatment and
20:13:51 SQL> -- 3. Normalization are performed below.
20:13:51 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:13:51 SQL> --    normalized here.
20:13:51 SQL> 
20:13:51 SQL> BEGIN
20:13:51   2  	-- Perform missing value treatment for all predictors
20:13:51   3  	-- create miss tables
20:13:51   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:13:51   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:13:51   6  
20:13:51   7  	-- populate miss tables
20:13:51   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:13:51   9  	  miss_table_name => 'svmc_miss_num',
20:13:51  10  	  data_table_name => '&bldtable',
20:13:51  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:13:51  12  
20:13:51  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:13:51  14  	  miss_table_name => 'svmc_miss_cat',
20:13:51  15  	  data_table_name => '&bldtable',
20:13:51  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:13:51  17  
20:13:51  18  	-- xform input data to replace missing values
20:13:51  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:13:51  20  	  miss_table_name => 'svmc_miss_num',
20:13:51  21  	  data_table_name => '&bldtable',
20:13:51  22  	  xform_view_name => 'xformed_build_miss_num');
20:13:51  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:13:51  24  	  miss_table_name => 'svmc_miss_cat',
20:13:51  25  	  data_table_name => '&bldtable',
20:13:51  26  	  xform_view_name => 'xformed_build_miss_cat');
20:13:51  27  
20:13:51  28  	-- Perform outlier treatment.
20:13:51  29  	-- create clip table
20:13:51  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:13:51  31  
20:13:51  32  	-- populate clip table
20:13:51  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:13:51  34  	  clip_table_name => 'svmc_clip',
20:13:51  35  	  data_table_name => '&bldtable',
20:13:51  36  	  tail_frac	  => 0.025,
20:13:51  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:13:51  38  
20:13:51  39  	-- xform input data to winsorized data
20:13:51  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:13:51  41  	  clip_table_name => 'svmc_clip',
20:13:51  42  	  data_table_name => '&bldtable',
20:13:51  43  	  xform_view_name => 'svmc_winsor');
20:13:51  44  
20:13:51  45  	-- create normalization table
20:13:51  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:13:51  47  
20:13:51  48  	-- populate normalization table based on winsorized data
20:13:51  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:13:51  50  	  norm_table_name => 'svmc_norm',
20:13:51  51  	  data_table_name => 'svmc_winsor',
20:13:51  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:13:51  53  
20:13:51  54  	-- normalize the original data
20:13:51  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:13:51  56  	  norm_table_name => 'svmc_norm',
20:13:51  57  	  data_table_name => '&bldtable',
20:13:51  58  	  xform_view_name => 'svmc_build_prep');
20:13:51  59  END;
20:13:51  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:02.23
20:13:54 SQL> 
20:13:54 SQL> ---------------------
20:13:54 SQL> -- CREATE A NEW MODEL
20:13:54 SQL> --
20:13:54 SQL> -- Cleanup old model with the same name for repeat runs
20:13:54 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:13:54   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:13:54   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.98
20:13:55 SQL> 
20:13:55 SQL> -- Build a new SVM Model
20:13:55 SQL> BEGIN
20:13:55   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:13:55   3  	  model_name	      => '&model_name',
20:13:55   4  	  mining_function     => dbms_data_mining.classification,
20:13:55   5  	  data_table_name     => 'svmc_build_prep',
20:13:55   6  	  case_id_column_name => '&case_id',
20:13:55   7  	  target_column_name  => '&target',
20:13:55   8  	  settings_table_name => 'svmc_settings');
20:13:55   9  END;
20:13:55  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:04.68
20:13:59 SQL> 
20:13:59 SQL> -----------------------------------------------------------------------
20:13:59 SQL> --			       APPLY/score THE MODEL
20:13:59 SQL> -----------------------------------------------------------------------
20:13:59 SQL> 
20:13:59 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:13:59 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:13:59   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:13:59   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:13:59 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:13:59   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:13:59   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:13:59 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:13:59   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:13:59   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:13:59 SQL> -----------------------
20:13:59 SQL> -- PREPARE SCORING DATA
20:13:59 SQL> --
20:13:59 SQL> -- If the data for model creation has been prepared, then the data
20:13:59 SQL> -- to be scored using the model must be prepared in the same manner
20:13:59 SQL> -- in order to obtain meaningful results.
20:13:59 SQL> --
20:13:59 SQL> -- 1. Missing Value treatment for all Predictors and
20:13:59 SQL> -- 2. Normalization
20:13:59 SQL> -- No outlier treatment will be performed during test and apply. The
20:13:59 SQL> -- normalization step is sufficient, since the normalization parameters
20:13:59 SQL> -- already capture the effects of outlier treatment done with build data.
20:13:59 SQL> --
20:13:59 SQL> BEGIN
20:13:59   2  	-- Xform Test data to replace missing values
20:13:59   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:13:59   4  	  miss_table_name => 'svmc_miss_num',
20:13:59   5  	  data_table_name => '&scoretable',
20:13:59   6  	  xform_view_name => 'xformed_apply_miss_num');
20:13:59   7  
20:13:59   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:13:59   9  	  miss_table_name => 'svmc_miss_cat',
20:13:59  10  	  data_table_name => '&scoretable',
20:13:59  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:13:59  12  
20:13:59  13  	-- Normalize the data to be scored
20:13:59  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:13:59  15  	  norm_table_name => 'svmc_norm',
20:13:59  16  	  data_table_name => '&scoretable',
20:13:59  17  	  xform_view_name => 'svmc_apply_prep');
20:13:59  18  END;
20:13:59  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.21
20:14:00 SQL> 
20:14:00 SQL> -- Maybe I already collected a score for this prdate.
20:14:00 SQL> -- DELETE it if I did:
20:14:00 SQL> DELETE svm62scores
20:14:00   2  WHERE score > 0
20:14:00   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:14:00   4  -- I need to supply the target attribute name:
20:14:00   5  AND targ = '&1'
20:14:00   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gattn'

0 rows deleted.

Elapsed: 00:00:00.02
20:14:00 SQL> 
20:14:00 SQL> -- We do a drumroll here:
20:14:00 SQL> 
20:14:00 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:14:00   2  SELECT
20:14:00   3  prdate
20:14:00   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:14:00   5  ,sysdate
20:14:00   6  ,SUBSTR(prdate,1,7)pair
20:14:00   7  ,SUBSTR(prdate,-19)ydate
20:14:00   8  ,'&1'
20:14:00   9  FROM svmc_apply_prep
20:14:00  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gattn'

1 row created.

Elapsed: 00:00:00.05
20:14:00 SQL> @score1_5min_gattn.sql	2010-11-29 11:20:01 aud_usd
20:14:00 SQL> --
20:14:00 SQL> -- score1_5min_gattn.sql
20:14:00 SQL> --
20:14:00 SQL> 
20:14:00 SQL> -- Demo:
20:14:00 SQL> -- @score1_5min_gattn.sql 2010-12-31 20:45:01 aud_usd
20:14:00 SQL> 
20:14:00 SQL> CREATE OR REPLACE VIEW sme AS
20:14:00   2  SELECT
20:14:00   3  prdate
20:14:00   4  ,NULL gattn
20:14:00   5  ,g00
20:14:00   6  ,g01
20:14:00   7  ,g02
20:14:00   8  ,g03
20:14:00   9  ,g04
20:14:00  10  ,g05
20:14:00  11  ,g06
20:14:00  12  ,g07
20:14:00  13  ,g08
20:14:00  14  ,g09
20:14:00  15  ,g10
20:14:00  16  ,g11
20:14:00  17  ,g12
20:14:00  18  ,g13
20:14:00  19  ,g14
20:14:00  20  ,g15
20:14:00  21  ,g16
20:14:00  22  ,g17
20:14:00  23  ,g18
20:14:00  24  ,g19
20:14:00  25  ,g20
20:14:00  26  ,g21
20:14:00  27  ,g22
20:14:00  28  ,g23
20:14:00  29  ,g24
20:14:00  30  ,g25
20:14:00  31  ,g26
20:14:00  32  ,g27
20:14:00  33  ,g28
20:14:00  34  ,g29
20:14:00  35  ,g30
20:14:00  36  ,g31
20:14:00  37  ,g32
20:14:00  38  ,g33
20:14:00  39  ,g34
20:14:00  40  ,g35
20:14:00  41  ,g36
20:14:00  42  ,g37
20:14:00  43  ,g38
20:14:00  44  ,g39
20:14:00  45  ,g40
20:14:00  46  ,g41
20:14:00  47  FROM modsrc
20:14:00  48  WHERE ydate = '&1'||' '||'&2'
20:14:00  49  AND pair = '&3'
20:14:00  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-11-29'||' '||'11:20:01'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:14:00 SQL> 
20:14:00 SQL> -- rpt
20:14:00 SQL> -- We should see just 1 row:
20:14:00 SQL> 
20:14:00 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.02
20:14:00 SQL> 
20:14:00 SQL> -- Build the model:
20:14:00 SQL> CREATE OR REPLACE VIEW bme AS
20:14:00   2  SELECT
20:14:00   3  prdate
20:14:00   4  ,gattn
20:14:00   5  ,g00
20:14:00   6  ,g01
20:14:00   7  ,g02
20:14:00   8  ,g03
20:14:00   9  ,g04
20:14:00  10  ,g05
20:14:00  11  ,g06
20:14:00  12  ,g07
20:14:00  13  ,g08
20:14:00  14  ,g09
20:14:00  15  ,g10
20:14:00  16  ,g11
20:14:00  17  ,g12
20:14:00  18  ,g13
20:14:00  19  ,g14
20:14:00  20  ,g15
20:14:00  21  ,g16
20:14:00  22  ,g17
20:14:00  23  ,g18
20:14:00  24  ,g19
20:14:00  25  ,g20
20:14:00  26  ,g21
20:14:00  27  ,g22
20:14:00  28  ,g23
20:14:00  29  ,g24
20:14:00  30  ,g25
20:14:00  31  ,g26
20:14:00  32  ,g27
20:14:00  33  ,g28
20:14:00  34  ,g29
20:14:00  35  ,g30
20:14:00  36  ,g31
20:14:00  37  ,g32
20:14:00  38  ,g33
20:14:00  39  ,g34
20:14:00  40  ,g35
20:14:00  41  ,g36
20:14:00  42  ,g37
20:14:00  43  ,g38
20:14:00  44  ,g39
20:14:00  45  ,g40
20:14:00  46  ,g41
20:14:00  47  FROM modsrc
20:14:00  48  WHERE gattn IN('nup','up')
20:14:00  49  -- Use only rows which are older than 1 day:
20:14:00  50  AND 1+ydate < '&1'||' '||'&2'
20:14:00  51  AND pair = '&3'
20:14:00  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-11-29'||' '||'11:20:01'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.03
20:14:00 SQL> 
20:14:00 SQL> -- rpt
20:14:00 SQL> 
20:14:00 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	     6910
up	     4128

Elapsed: 00:00:00.02
20:14:00 SQL> 
20:14:00 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-11-26 21:50:01

Elapsed: 00:00:00.01
20:14:00 SQL> 
20:14:00 SQL> -- Now build model from bme and score sme
20:14:00 SQL> @score1.sql gattn
20:14:00 SQL> --
20:14:00 SQL> -- score1.sql
20:14:00 SQL> --
20:14:00 SQL> 
20:14:00 SQL> -- I use this script to send 5 params to score.sql
20:14:00 SQL> -- which does the heavy lifting of creating an SVM model.
20:14:00 SQL> -- Then at the very end of this script I use the model
20:14:00 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:14:00 SQL> 
20:14:00 SQL> -- I call this script from 2 other scripts:
20:14:00 SQL> -- score1_5min.sql
20:14:00 SQL> -- score1_5min_gattn.sql
20:14:00 SQL> 
20:14:00 SQL> -- The 1st param is the name of the target attribute.
20:14:00 SQL> -- I like to call my target attributes either gatt or gattn.
20:14:00 SQL> 
20:14:00 SQL> -- Demo:
20:14:00 SQL> -- @score1.sql 'gatt'
20:14:00 SQL> -- @score1.sql 'gattn'
20:14:00 SQL> 
20:14:00 SQL> -- Now, I fill up svmc_apply_prep.
20:14:00 SQL> -- I use same model_name used in score.sql
20:14:00 SQL> DEFINE model_name = 'svmfx101'
20:14:00 SQL> DEFINE bldtable	= 'bme'
20:14:00 SQL> DEFINE scoretable = 'sme'
20:14:00 SQL> DEFINE case_id	= 'prdate'
20:14:00 SQL> -- Demo:
20:14:00 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:14:00 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:14:00 SQL> --
20:14:00 SQL> -- score.sql
20:14:00 SQL> --
20:14:00 SQL> 
20:14:00 SQL> -- usage: score.sql
20:14:00 SQL> 
20:14:00 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:14:00 SQL> 
20:14:00 SQL> -- DEFINE target	   = 'gatt'
20:14:00 SQL> -- DEFINE model_name = 'svmfx101'
20:14:00 SQL> -- DEFINE bldtable   = 'bme'
20:14:00 SQL> -- DEFINE scoretable = 'sme'
20:14:00 SQL> -- DEFINE case_id    = 'prdate'
20:14:00 SQL> 
20:14:00 SQL> DEFINE target	= '&1'
20:14:00 SQL> DEFINE model_name = '&2'
20:14:00 SQL> DEFINE bldtable	= '&3'
20:14:00 SQL> DEFINE scoretable = '&4'
20:14:00 SQL> DEFINE case_id	= '&5'
20:14:00 SQL> 
20:14:00 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:14:00 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:14:00 SQL> 
20:14:00 SQL> -- Builds an SVM model using pl/sql.
20:14:00 SQL> 
20:14:00 SQL> -----------------------------------------------------------------------
20:14:00 SQL> --			    BUILD THE MODEL
20:14:00 SQL> -----------------------------------------------------------------------
20:14:00 SQL> 
20:14:00 SQL> -- Cleanup old build data preparation objects for repeat runs
20:14:00 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.00
20:14:00 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:14:00 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:14:00 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.00
20:14:00 SQL> 
20:14:00 SQL> 
20:14:00 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:14:00 SQL> --
20:14:00 SQL> -- DROP	TABLE svmc_settings ;
20:14:00 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:14:00 SQL> -- DELETE svmc_settings;
20:14:00 SQL> 
20:14:00 SQL> -- The default classification algorithm is Naive Bayes. So override
20:14:00 SQL> -- this choice to SVM using a settings table.
20:14:00 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:14:00 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:14:00 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:14:00 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:14:00 SQL> -- models.
20:14:00 SQL> --
20:14:00 SQL> 
20:14:00 SQL> -- Do this once and then comment it out.
20:14:00 SQL> -- That makes script go faster.
20:14:00 SQL> -- BEGIN
20:14:00 SQL> -- -- Populate settings table
20:14:00 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:14:00 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:14:00 SQL> --
20:14:00 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:14:00 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:14:00 SQL> --
20:14:00 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:14:00 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:14:00 SQL> --   COMMIT;
20:14:00 SQL> -- END;
20:14:00 SQL> -- /
20:14:00 SQL> 
20:14:00 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:14:00 SQL> 
20:14:00 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:14:00   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:14:00   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:14:00 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:14:00   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:14:00   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:14:00 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:14:00   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:14:00   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:14:00 SQL> 
20:14:00 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:14:00   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:14:00   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:14:00 SQL> 
20:14:00 SQL> --------------------------------
20:14:00 SQL> -- PREPARE BUILD (TRAINING) DATA
20:14:00 SQL> --
20:14:00 SQL> 
20:14:00 SQL> -- 1. Missing Value treatment for all Predictors and
20:14:00 SQL> -- 2. Outlier Treatment and
20:14:00 SQL> -- 3. Normalization are performed below.
20:14:00 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:14:00 SQL> --    normalized here.
20:14:00 SQL> 
20:14:00 SQL> BEGIN
20:14:00   2  	-- Perform missing value treatment for all predictors
20:14:00   3  	-- create miss tables
20:14:00   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:14:00   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:14:00   6  
20:14:00   7  	-- populate miss tables
20:14:00   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:14:00   9  	  miss_table_name => 'svmc_miss_num',
20:14:00  10  	  data_table_name => '&bldtable',
20:14:00  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:14:00  12  
20:14:00  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:14:00  14  	  miss_table_name => 'svmc_miss_cat',
20:14:00  15  	  data_table_name => '&bldtable',
20:14:00  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:14:00  17  
20:14:00  18  	-- xform input data to replace missing values
20:14:00  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:14:00  20  	  miss_table_name => 'svmc_miss_num',
20:14:00  21  	  data_table_name => '&bldtable',
20:14:00  22  	  xform_view_name => 'xformed_build_miss_num');
20:14:00  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:14:00  24  	  miss_table_name => 'svmc_miss_cat',
20:14:00  25  	  data_table_name => '&bldtable',
20:14:00  26  	  xform_view_name => 'xformed_build_miss_cat');
20:14:00  27  
20:14:00  28  	-- Perform outlier treatment.
20:14:00  29  	-- create clip table
20:14:00  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:14:00  31  
20:14:00  32  	-- populate clip table
20:14:00  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:14:00  34  	  clip_table_name => 'svmc_clip',
20:14:00  35  	  data_table_name => '&bldtable',
20:14:00  36  	  tail_frac	  => 0.025,
20:14:00  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:14:00  38  
20:14:00  39  	-- xform input data to winsorized data
20:14:00  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:14:00  41  	  clip_table_name => 'svmc_clip',
20:14:00  42  	  data_table_name => '&bldtable',
20:14:00  43  	  xform_view_name => 'svmc_winsor');
20:14:00  44  
20:14:00  45  	-- create normalization table
20:14:00  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:14:00  47  
20:14:00  48  	-- populate normalization table based on winsorized data
20:14:00  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:14:00  50  	  norm_table_name => 'svmc_norm',
20:14:00  51  	  data_table_name => 'svmc_winsor',
20:14:00  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:14:00  53  
20:14:00  54  	-- normalize the original data
20:14:00  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:14:00  56  	  norm_table_name => 'svmc_norm',
20:14:00  57  	  data_table_name => '&bldtable',
20:14:00  58  	  xform_view_name => 'svmc_build_prep');
20:14:00  59  END;
20:14:00  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.74
20:14:02 SQL> 
20:14:02 SQL> ---------------------
20:14:02 SQL> -- CREATE A NEW MODEL
20:14:02 SQL> --
20:14:02 SQL> -- Cleanup old model with the same name for repeat runs
20:14:02 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:14:02   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:14:02   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.92
20:14:03 SQL> 
20:14:03 SQL> -- Build a new SVM Model
20:14:03 SQL> BEGIN
20:14:03   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:14:03   3  	  model_name	      => '&model_name',
20:14:03   4  	  mining_function     => dbms_data_mining.classification,
20:14:03   5  	  data_table_name     => 'svmc_build_prep',
20:14:03   6  	  case_id_column_name => '&case_id',
20:14:03   7  	  target_column_name  => '&target',
20:14:03   8  	  settings_table_name => 'svmc_settings');
20:14:03   9  END;
20:14:03  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:03.92
20:14:07 SQL> 
20:14:07 SQL> -----------------------------------------------------------------------
20:14:07 SQL> --			       APPLY/score THE MODEL
20:14:07 SQL> -----------------------------------------------------------------------
20:14:07 SQL> 
20:14:07 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:14:07 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:14:07   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:14:07   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:14:07 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:14:07   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:14:07   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:14:07 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:14:07   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:14:07   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:14:07 SQL> -----------------------
20:14:07 SQL> -- PREPARE SCORING DATA
20:14:07 SQL> --
20:14:07 SQL> -- If the data for model creation has been prepared, then the data
20:14:07 SQL> -- to be scored using the model must be prepared in the same manner
20:14:07 SQL> -- in order to obtain meaningful results.
20:14:07 SQL> --
20:14:07 SQL> -- 1. Missing Value treatment for all Predictors and
20:14:07 SQL> -- 2. Normalization
20:14:07 SQL> -- No outlier treatment will be performed during test and apply. The
20:14:07 SQL> -- normalization step is sufficient, since the normalization parameters
20:14:07 SQL> -- already capture the effects of outlier treatment done with build data.
20:14:07 SQL> --
20:14:07 SQL> BEGIN
20:14:07   2  	-- Xform Test data to replace missing values
20:14:07   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:14:07   4  	  miss_table_name => 'svmc_miss_num',
20:14:07   5  	  data_table_name => '&scoretable',
20:14:07   6  	  xform_view_name => 'xformed_apply_miss_num');
20:14:07   7  
20:14:07   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:14:07   9  	  miss_table_name => 'svmc_miss_cat',
20:14:07  10  	  data_table_name => '&scoretable',
20:14:07  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:14:07  12  
20:14:07  13  	-- Normalize the data to be scored
20:14:07  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:14:07  15  	  norm_table_name => 'svmc_norm',
20:14:07  16  	  data_table_name => '&scoretable',
20:14:07  17  	  xform_view_name => 'svmc_apply_prep');
20:14:07  18  END;
20:14:07  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.17
20:14:07 SQL> 
20:14:07 SQL> -- Maybe I already collected a score for this prdate.
20:14:07 SQL> -- DELETE it if I did:
20:14:07 SQL> DELETE svm62scores
20:14:07   2  WHERE score > 0
20:14:07   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:14:07   4  -- I need to supply the target attribute name:
20:14:07   5  AND targ = '&1'
20:14:07   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gattn'

0 rows deleted.

Elapsed: 00:00:00.01
20:14:07 SQL> 
20:14:07 SQL> -- We do a drumroll here:
20:14:07 SQL> 
20:14:07 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:14:07   2  SELECT
20:14:07   3  prdate
20:14:07   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:14:07   5  ,sysdate
20:14:07   6  ,SUBSTR(prdate,1,7)pair
20:14:07   7  ,SUBSTR(prdate,-19)ydate
20:14:07   8  ,'&1'
20:14:07   9  FROM svmc_apply_prep
20:14:07  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gattn'

1 row created.

Elapsed: 00:00:00.05
20:14:07 SQL> @score1_5min_gattn.sql	2010-10-20 23:25:01 aud_usd
20:14:07 SQL> --
20:14:07 SQL> -- score1_5min_gattn.sql
20:14:07 SQL> --
20:14:07 SQL> 
20:14:07 SQL> -- Demo:
20:14:07 SQL> -- @score1_5min_gattn.sql 2010-12-31 20:45:01 aud_usd
20:14:07 SQL> 
20:14:07 SQL> CREATE OR REPLACE VIEW sme AS
20:14:07   2  SELECT
20:14:07   3  prdate
20:14:07   4  ,NULL gattn
20:14:07   5  ,g00
20:14:07   6  ,g01
20:14:07   7  ,g02
20:14:07   8  ,g03
20:14:07   9  ,g04
20:14:07  10  ,g05
20:14:07  11  ,g06
20:14:07  12  ,g07
20:14:07  13  ,g08
20:14:07  14  ,g09
20:14:07  15  ,g10
20:14:07  16  ,g11
20:14:07  17  ,g12
20:14:07  18  ,g13
20:14:07  19  ,g14
20:14:07  20  ,g15
20:14:07  21  ,g16
20:14:07  22  ,g17
20:14:07  23  ,g18
20:14:07  24  ,g19
20:14:07  25  ,g20
20:14:07  26  ,g21
20:14:07  27  ,g22
20:14:07  28  ,g23
20:14:07  29  ,g24
20:14:07  30  ,g25
20:14:07  31  ,g26
20:14:07  32  ,g27
20:14:07  33  ,g28
20:14:07  34  ,g29
20:14:07  35  ,g30
20:14:07  36  ,g31
20:14:07  37  ,g32
20:14:07  38  ,g33
20:14:07  39  ,g34
20:14:07  40  ,g35
20:14:07  41  ,g36
20:14:07  42  ,g37
20:14:07  43  ,g38
20:14:07  44  ,g39
20:14:07  45  ,g40
20:14:07  46  ,g41
20:14:07  47  FROM modsrc
20:14:07  48  WHERE ydate = '&1'||' '||'&2'
20:14:07  49  AND pair = '&3'
20:14:07  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-10-20'||' '||'23:25:01'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:14:07 SQL> 
20:14:07 SQL> -- rpt
20:14:07 SQL> -- We should see just 1 row:
20:14:07 SQL> 
20:14:07 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.01
20:14:07 SQL> 
20:14:07 SQL> -- Build the model:
20:14:07 SQL> CREATE OR REPLACE VIEW bme AS
20:14:07   2  SELECT
20:14:07   3  prdate
20:14:07   4  ,gattn
20:14:07   5  ,g00
20:14:07   6  ,g01
20:14:07   7  ,g02
20:14:07   8  ,g03
20:14:07   9  ,g04
20:14:07  10  ,g05
20:14:07  11  ,g06
20:14:07  12  ,g07
20:14:07  13  ,g08
20:14:07  14  ,g09
20:14:07  15  ,g10
20:14:07  16  ,g11
20:14:07  17  ,g12
20:14:07  18  ,g13
20:14:07  19  ,g14
20:14:07  20  ,g15
20:14:07  21  ,g16
20:14:07  22  ,g17
20:14:07  23  ,g18
20:14:07  24  ,g19
20:14:07  25  ,g20
20:14:07  26  ,g21
20:14:07  27  ,g22
20:14:07  28  ,g23
20:14:07  29  ,g24
20:14:07  30  ,g25
20:14:07  31  ,g26
20:14:07  32  ,g27
20:14:07  33  ,g28
20:14:07  34  ,g29
20:14:07  35  ,g30
20:14:07  36  ,g31
20:14:07  37  ,g32
20:14:07  38  ,g33
20:14:07  39  ,g34
20:14:07  40  ,g35
20:14:07  41  ,g36
20:14:07  42  ,g37
20:14:07  43  ,g38
20:14:07  44  ,g39
20:14:07  45  ,g40
20:14:07  46  ,g41
20:14:07  47  FROM modsrc
20:14:07  48  WHERE gattn IN('nup','up')
20:14:07  49  -- Use only rows which are older than 1 day:
20:14:07  50  AND 1+ydate < '&1'||' '||'&2'
20:14:07  51  AND pair = '&3'
20:14:07  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-10-20'||' '||'23:25:01'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.09
20:14:07 SQL> 
20:14:07 SQL> -- rpt
20:14:07 SQL> 
20:14:07 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	     1875
up	     1067

Elapsed: 00:00:00.03
20:14:07 SQL> 
20:14:07 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-10-19 23:20:01

Elapsed: 00:00:00.01
20:14:07 SQL> 
20:14:07 SQL> -- Now build model from bme and score sme
20:14:07 SQL> @score1.sql gattn
20:14:07 SQL> --
20:14:07 SQL> -- score1.sql
20:14:07 SQL> --
20:14:07 SQL> 
20:14:07 SQL> -- I use this script to send 5 params to score.sql
20:14:07 SQL> -- which does the heavy lifting of creating an SVM model.
20:14:07 SQL> -- Then at the very end of this script I use the model
20:14:07 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:14:07 SQL> 
20:14:07 SQL> -- I call this script from 2 other scripts:
20:14:07 SQL> -- score1_5min.sql
20:14:07 SQL> -- score1_5min_gattn.sql
20:14:07 SQL> 
20:14:07 SQL> -- The 1st param is the name of the target attribute.
20:14:07 SQL> -- I like to call my target attributes either gatt or gattn.
20:14:07 SQL> 
20:14:07 SQL> -- Demo:
20:14:07 SQL> -- @score1.sql 'gatt'
20:14:07 SQL> -- @score1.sql 'gattn'
20:14:07 SQL> 
20:14:07 SQL> -- Now, I fill up svmc_apply_prep.
20:14:07 SQL> -- I use same model_name used in score.sql
20:14:07 SQL> DEFINE model_name = 'svmfx101'
20:14:07 SQL> DEFINE bldtable	= 'bme'
20:14:07 SQL> DEFINE scoretable = 'sme'
20:14:07 SQL> DEFINE case_id	= 'prdate'
20:14:07 SQL> -- Demo:
20:14:07 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:14:07 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:14:07 SQL> --
20:14:07 SQL> -- score.sql
20:14:07 SQL> --
20:14:07 SQL> 
20:14:07 SQL> -- usage: score.sql
20:14:07 SQL> 
20:14:07 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:14:07 SQL> 
20:14:07 SQL> -- DEFINE target	   = 'gatt'
20:14:07 SQL> -- DEFINE model_name = 'svmfx101'
20:14:07 SQL> -- DEFINE bldtable   = 'bme'
20:14:07 SQL> -- DEFINE scoretable = 'sme'
20:14:07 SQL> -- DEFINE case_id    = 'prdate'
20:14:07 SQL> 
20:14:07 SQL> DEFINE target	= '&1'
20:14:07 SQL> DEFINE model_name = '&2'
20:14:07 SQL> DEFINE bldtable	= '&3'
20:14:07 SQL> DEFINE scoretable = '&4'
20:14:07 SQL> DEFINE case_id	= '&5'
20:14:07 SQL> 
20:14:07 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:14:07 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:14:07 SQL> 
20:14:07 SQL> -- Builds an SVM model using pl/sql.
20:14:07 SQL> 
20:14:07 SQL> -----------------------------------------------------------------------
20:14:07 SQL> --			    BUILD THE MODEL
20:14:07 SQL> -----------------------------------------------------------------------
20:14:07 SQL> 
20:14:07 SQL> -- Cleanup old build data preparation objects for repeat runs
20:14:07 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.00
20:14:07 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:14:07 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.01
20:14:07 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.00
20:14:07 SQL> 
20:14:07 SQL> 
20:14:07 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:14:07 SQL> --
20:14:07 SQL> -- DROP	TABLE svmc_settings ;
20:14:07 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:14:07 SQL> -- DELETE svmc_settings;
20:14:07 SQL> 
20:14:07 SQL> -- The default classification algorithm is Naive Bayes. So override
20:14:07 SQL> -- this choice to SVM using a settings table.
20:14:07 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:14:07 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:14:07 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:14:07 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:14:07 SQL> -- models.
20:14:07 SQL> --
20:14:07 SQL> 
20:14:07 SQL> -- Do this once and then comment it out.
20:14:07 SQL> -- That makes script go faster.
20:14:07 SQL> -- BEGIN
20:14:07 SQL> -- -- Populate settings table
20:14:07 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:14:07 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:14:07 SQL> --
20:14:07 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:14:07 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:14:07 SQL> --
20:14:07 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:14:07 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:14:07 SQL> --   COMMIT;
20:14:07 SQL> -- END;
20:14:07 SQL> -- /
20:14:07 SQL> 
20:14:07 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:14:07 SQL> 
20:14:07 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:14:07   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:14:07   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:14:07 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:14:07   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:14:07   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:14:07 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:14:07   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:14:07   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:14:07 SQL> 
20:14:07 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:14:07   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:14:07   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:14:07 SQL> 
20:14:07 SQL> --------------------------------
20:14:07 SQL> -- PREPARE BUILD (TRAINING) DATA
20:14:07 SQL> --
20:14:07 SQL> 
20:14:07 SQL> -- 1. Missing Value treatment for all Predictors and
20:14:07 SQL> -- 2. Outlier Treatment and
20:14:07 SQL> -- 3. Normalization are performed below.
20:14:07 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:14:07 SQL> --    normalized here.
20:14:07 SQL> 
20:14:07 SQL> BEGIN
20:14:07   2  	-- Perform missing value treatment for all predictors
20:14:07   3  	-- create miss tables
20:14:07   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:14:07   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:14:07   6  
20:14:07   7  	-- populate miss tables
20:14:07   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:14:07   9  	  miss_table_name => 'svmc_miss_num',
20:14:07  10  	  data_table_name => '&bldtable',
20:14:07  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:14:07  12  
20:14:07  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:14:07  14  	  miss_table_name => 'svmc_miss_cat',
20:14:07  15  	  data_table_name => '&bldtable',
20:14:07  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:14:07  17  
20:14:07  18  	-- xform input data to replace missing values
20:14:07  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:14:07  20  	  miss_table_name => 'svmc_miss_num',
20:14:07  21  	  data_table_name => '&bldtable',
20:14:07  22  	  xform_view_name => 'xformed_build_miss_num');
20:14:07  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:14:07  24  	  miss_table_name => 'svmc_miss_cat',
20:14:07  25  	  data_table_name => '&bldtable',
20:14:07  26  	  xform_view_name => 'xformed_build_miss_cat');
20:14:07  27  
20:14:07  28  	-- Perform outlier treatment.
20:14:07  29  	-- create clip table
20:14:07  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:14:07  31  
20:14:07  32  	-- populate clip table
20:14:07  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:14:07  34  	  clip_table_name => 'svmc_clip',
20:14:07  35  	  data_table_name => '&bldtable',
20:14:07  36  	  tail_frac	  => 0.025,
20:14:07  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:14:07  38  
20:14:07  39  	-- xform input data to winsorized data
20:14:07  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:14:07  41  	  clip_table_name => 'svmc_clip',
20:14:07  42  	  data_table_name => '&bldtable',
20:14:07  43  	  xform_view_name => 'svmc_winsor');
20:14:07  44  
20:14:07  45  	-- create normalization table
20:14:07  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:14:07  47  
20:14:07  48  	-- populate normalization table based on winsorized data
20:14:07  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:14:07  50  	  norm_table_name => 'svmc_norm',
20:14:07  51  	  data_table_name => 'svmc_winsor',
20:14:07  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:14:07  53  
20:14:07  54  	-- normalize the original data
20:14:07  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:14:07  56  	  norm_table_name => 'svmc_norm',
20:14:07  57  	  data_table_name => '&bldtable',
20:14:07  58  	  xform_view_name => 'svmc_build_prep');
20:14:07  59  END;
20:14:07  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.15
20:14:08 SQL> 
20:14:08 SQL> ---------------------
20:14:08 SQL> -- CREATE A NEW MODEL
20:14:08 SQL> --
20:14:08 SQL> -- Cleanup old model with the same name for repeat runs
20:14:08 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:14:08   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:14:08   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.97
20:14:09 SQL> 
20:14:09 SQL> -- Build a new SVM Model
20:14:09 SQL> BEGIN
20:14:09   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:14:09   3  	  model_name	      => '&model_name',
20:14:09   4  	  mining_function     => dbms_data_mining.classification,
20:14:09   5  	  data_table_name     => 'svmc_build_prep',
20:14:09   6  	  case_id_column_name => '&case_id',
20:14:09   7  	  target_column_name  => '&target',
20:14:09   8  	  settings_table_name => 'svmc_settings');
20:14:09   9  END;
20:14:09  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:02.53
20:14:12 SQL> 
20:14:12 SQL> -----------------------------------------------------------------------
20:14:12 SQL> --			       APPLY/score THE MODEL
20:14:12 SQL> -----------------------------------------------------------------------
20:14:12 SQL> 
20:14:12 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:14:12 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:14:12   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:14:12   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:14:12 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:14:12   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:14:12   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:14:12 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:14:12   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:14:12   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:14:12 SQL> -----------------------
20:14:12 SQL> -- PREPARE SCORING DATA
20:14:12 SQL> --
20:14:12 SQL> -- If the data for model creation has been prepared, then the data
20:14:12 SQL> -- to be scored using the model must be prepared in the same manner
20:14:12 SQL> -- in order to obtain meaningful results.
20:14:12 SQL> --
20:14:12 SQL> -- 1. Missing Value treatment for all Predictors and
20:14:12 SQL> -- 2. Normalization
20:14:12 SQL> -- No outlier treatment will be performed during test and apply. The
20:14:12 SQL> -- normalization step is sufficient, since the normalization parameters
20:14:12 SQL> -- already capture the effects of outlier treatment done with build data.
20:14:12 SQL> --
20:14:12 SQL> BEGIN
20:14:12   2  	-- Xform Test data to replace missing values
20:14:12   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:14:12   4  	  miss_table_name => 'svmc_miss_num',
20:14:12   5  	  data_table_name => '&scoretable',
20:14:12   6  	  xform_view_name => 'xformed_apply_miss_num');
20:14:12   7  
20:14:12   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:14:12   9  	  miss_table_name => 'svmc_miss_cat',
20:14:12  10  	  data_table_name => '&scoretable',
20:14:12  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:14:12  12  
20:14:12  13  	-- Normalize the data to be scored
20:14:12  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:14:12  15  	  norm_table_name => 'svmc_norm',
20:14:12  16  	  data_table_name => '&scoretable',
20:14:12  17  	  xform_view_name => 'svmc_apply_prep');
20:14:12  18  END;
20:14:12  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.18
20:14:12 SQL> 
20:14:12 SQL> -- Maybe I already collected a score for this prdate.
20:14:12 SQL> -- DELETE it if I did:
20:14:12 SQL> DELETE svm62scores
20:14:12   2  WHERE score > 0
20:14:12   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:14:12   4  -- I need to supply the target attribute name:
20:14:12   5  AND targ = '&1'
20:14:12   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gattn'

0 rows deleted.

Elapsed: 00:00:00.01
20:14:12 SQL> 
20:14:12 SQL> -- We do a drumroll here:
20:14:12 SQL> 
20:14:12 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:14:12   2  SELECT
20:14:12   3  prdate
20:14:12   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:14:12   5  ,sysdate
20:14:12   6  ,SUBSTR(prdate,1,7)pair
20:14:12   7  ,SUBSTR(prdate,-19)ydate
20:14:12   8  ,'&1'
20:14:12   9  FROM svmc_apply_prep
20:14:12  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gattn'

1 row created.

Elapsed: 00:00:00.05
20:14:12 SQL> @score1_5min_gattn.sql	2010-10-18 03:45:01 aud_usd
20:14:12 SQL> --
20:14:12 SQL> -- score1_5min_gattn.sql
20:14:12 SQL> --
20:14:12 SQL> 
20:14:12 SQL> -- Demo:
20:14:12 SQL> -- @score1_5min_gattn.sql 2010-12-31 20:45:01 aud_usd
20:14:12 SQL> 
20:14:12 SQL> CREATE OR REPLACE VIEW sme AS
20:14:12   2  SELECT
20:14:12   3  prdate
20:14:12   4  ,NULL gattn
20:14:12   5  ,g00
20:14:12   6  ,g01
20:14:12   7  ,g02
20:14:12   8  ,g03
20:14:12   9  ,g04
20:14:12  10  ,g05
20:14:12  11  ,g06
20:14:12  12  ,g07
20:14:12  13  ,g08
20:14:12  14  ,g09
20:14:12  15  ,g10
20:14:12  16  ,g11
20:14:12  17  ,g12
20:14:12  18  ,g13
20:14:12  19  ,g14
20:14:12  20  ,g15
20:14:12  21  ,g16
20:14:12  22  ,g17
20:14:12  23  ,g18
20:14:12  24  ,g19
20:14:12  25  ,g20
20:14:12  26  ,g21
20:14:12  27  ,g22
20:14:12  28  ,g23
20:14:12  29  ,g24
20:14:12  30  ,g25
20:14:12  31  ,g26
20:14:12  32  ,g27
20:14:12  33  ,g28
20:14:12  34  ,g29
20:14:12  35  ,g30
20:14:12  36  ,g31
20:14:12  37  ,g32
20:14:12  38  ,g33
20:14:12  39  ,g34
20:14:12  40  ,g35
20:14:12  41  ,g36
20:14:12  42  ,g37
20:14:12  43  ,g38
20:14:12  44  ,g39
20:14:12  45  ,g40
20:14:12  46  ,g41
20:14:12  47  FROM modsrc
20:14:12  48  WHERE ydate = '&1'||' '||'&2'
20:14:12  49  AND pair = '&3'
20:14:12  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-10-18'||' '||'03:45:01'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:14:12 SQL> 
20:14:12 SQL> -- rpt
20:14:12 SQL> -- We should see just 1 row:
20:14:12 SQL> 
20:14:12 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.02
20:14:12 SQL> 
20:14:12 SQL> -- Build the model:
20:14:12 SQL> CREATE OR REPLACE VIEW bme AS
20:14:12   2  SELECT
20:14:12   3  prdate
20:14:12   4  ,gattn
20:14:12   5  ,g00
20:14:12   6  ,g01
20:14:12   7  ,g02
20:14:12   8  ,g03
20:14:12   9  ,g04
20:14:12  10  ,g05
20:14:12  11  ,g06
20:14:12  12  ,g07
20:14:12  13  ,g08
20:14:12  14  ,g09
20:14:12  15  ,g10
20:14:12  16  ,g11
20:14:12  17  ,g12
20:14:12  18  ,g13
20:14:12  19  ,g14
20:14:12  20  ,g15
20:14:12  21  ,g16
20:14:12  22  ,g17
20:14:12  23  ,g18
20:14:12  24  ,g19
20:14:12  25  ,g20
20:14:12  26  ,g21
20:14:12  27  ,g22
20:14:12  28  ,g23
20:14:12  29  ,g24
20:14:12  30  ,g25
20:14:12  31  ,g26
20:14:12  32  ,g27
20:14:12  33  ,g28
20:14:12  34  ,g29
20:14:12  35  ,g30
20:14:12  36  ,g31
20:14:12  37  ,g32
20:14:12  38  ,g33
20:14:12  39  ,g34
20:14:12  40  ,g35
20:14:12  41  ,g36
20:14:12  42  ,g37
20:14:12  43  ,g38
20:14:12  44  ,g39
20:14:12  45  ,g40
20:14:12  46  ,g41
20:14:12  47  FROM modsrc
20:14:12  48  WHERE gattn IN('nup','up')
20:14:12  49  -- Use only rows which are older than 1 day:
20:14:12  50  AND 1+ydate < '&1'||' '||'&2'
20:14:12  51  AND pair = '&3'
20:14:12  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-10-18'||' '||'03:45:01'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.05
20:14:12 SQL> 
20:14:12 SQL> -- rpt
20:14:12 SQL> 
20:14:12 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	     1585
up	      751

Elapsed: 00:00:00.01
20:14:12 SQL> 
20:14:12 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-10-15 21:50:01

Elapsed: 00:00:00.02
20:14:12 SQL> 
20:14:12 SQL> -- Now build model from bme and score sme
20:14:12 SQL> @score1.sql gattn
20:14:12 SQL> --
20:14:12 SQL> -- score1.sql
20:14:12 SQL> --
20:14:12 SQL> 
20:14:12 SQL> -- I use this script to send 5 params to score.sql
20:14:12 SQL> -- which does the heavy lifting of creating an SVM model.
20:14:12 SQL> -- Then at the very end of this script I use the model
20:14:12 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:14:12 SQL> 
20:14:12 SQL> -- I call this script from 2 other scripts:
20:14:12 SQL> -- score1_5min.sql
20:14:12 SQL> -- score1_5min_gattn.sql
20:14:12 SQL> 
20:14:12 SQL> -- The 1st param is the name of the target attribute.
20:14:12 SQL> -- I like to call my target attributes either gatt or gattn.
20:14:12 SQL> 
20:14:12 SQL> -- Demo:
20:14:12 SQL> -- @score1.sql 'gatt'
20:14:12 SQL> -- @score1.sql 'gattn'
20:14:12 SQL> 
20:14:12 SQL> -- Now, I fill up svmc_apply_prep.
20:14:12 SQL> -- I use same model_name used in score.sql
20:14:12 SQL> DEFINE model_name = 'svmfx101'
20:14:12 SQL> DEFINE bldtable	= 'bme'
20:14:12 SQL> DEFINE scoretable = 'sme'
20:14:12 SQL> DEFINE case_id	= 'prdate'
20:14:12 SQL> -- Demo:
20:14:12 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:14:12 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:14:12 SQL> --
20:14:12 SQL> -- score.sql
20:14:12 SQL> --
20:14:12 SQL> 
20:14:12 SQL> -- usage: score.sql
20:14:12 SQL> 
20:14:12 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:14:12 SQL> 
20:14:12 SQL> -- DEFINE target	   = 'gatt'
20:14:12 SQL> -- DEFINE model_name = 'svmfx101'
20:14:12 SQL> -- DEFINE bldtable   = 'bme'
20:14:12 SQL> -- DEFINE scoretable = 'sme'
20:14:12 SQL> -- DEFINE case_id    = 'prdate'
20:14:12 SQL> 
20:14:12 SQL> DEFINE target	= '&1'
20:14:12 SQL> DEFINE model_name = '&2'
20:14:12 SQL> DEFINE bldtable	= '&3'
20:14:12 SQL> DEFINE scoretable = '&4'
20:14:12 SQL> DEFINE case_id	= '&5'
20:14:12 SQL> 
20:14:12 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:14:12 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:14:12 SQL> 
20:14:12 SQL> -- Builds an SVM model using pl/sql.
20:14:12 SQL> 
20:14:12 SQL> -----------------------------------------------------------------------
20:14:12 SQL> --			    BUILD THE MODEL
20:14:12 SQL> -----------------------------------------------------------------------
20:14:12 SQL> 
20:14:12 SQL> -- Cleanup old build data preparation objects for repeat runs
20:14:12 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.00
20:14:12 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:14:12 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.01
20:14:12 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.00
20:14:12 SQL> 
20:14:12 SQL> 
20:14:12 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:14:12 SQL> --
20:14:12 SQL> -- DROP	TABLE svmc_settings ;
20:14:12 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:14:12 SQL> -- DELETE svmc_settings;
20:14:12 SQL> 
20:14:12 SQL> -- The default classification algorithm is Naive Bayes. So override
20:14:12 SQL> -- this choice to SVM using a settings table.
20:14:12 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:14:12 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:14:12 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:14:12 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:14:12 SQL> -- models.
20:14:12 SQL> --
20:14:12 SQL> 
20:14:12 SQL> -- Do this once and then comment it out.
20:14:12 SQL> -- That makes script go faster.
20:14:12 SQL> -- BEGIN
20:14:12 SQL> -- -- Populate settings table
20:14:12 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:14:12 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:14:12 SQL> --
20:14:12 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:14:12 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:14:12 SQL> --
20:14:12 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:14:12 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:14:12 SQL> --   COMMIT;
20:14:12 SQL> -- END;
20:14:12 SQL> -- /
20:14:12 SQL> 
20:14:12 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:14:12 SQL> 
20:14:12 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:14:12   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:14:12   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
20:14:12 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:14:12   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:14:12   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:14:12 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:14:12   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:14:12   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:14:12 SQL> 
20:14:12 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:14:12   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:14:12   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:14:12 SQL> 
20:14:12 SQL> --------------------------------
20:14:12 SQL> -- PREPARE BUILD (TRAINING) DATA
20:14:12 SQL> --
20:14:12 SQL> 
20:14:12 SQL> -- 1. Missing Value treatment for all Predictors and
20:14:12 SQL> -- 2. Outlier Treatment and
20:14:12 SQL> -- 3. Normalization are performed below.
20:14:12 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:14:12 SQL> --    normalized here.
20:14:12 SQL> 
20:14:12 SQL> BEGIN
20:14:12   2  	-- Perform missing value treatment for all predictors
20:14:12   3  	-- create miss tables
20:14:12   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:14:12   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:14:12   6  
20:14:12   7  	-- populate miss tables
20:14:12   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:14:12   9  	  miss_table_name => 'svmc_miss_num',
20:14:12  10  	  data_table_name => '&bldtable',
20:14:12  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:14:12  12  
20:14:12  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:14:12  14  	  miss_table_name => 'svmc_miss_cat',
20:14:12  15  	  data_table_name => '&bldtable',
20:14:12  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:14:12  17  
20:14:12  18  	-- xform input data to replace missing values
20:14:12  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:14:12  20  	  miss_table_name => 'svmc_miss_num',
20:14:12  21  	  data_table_name => '&bldtable',
20:14:12  22  	  xform_view_name => 'xformed_build_miss_num');
20:14:12  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:14:12  24  	  miss_table_name => 'svmc_miss_cat',
20:14:12  25  	  data_table_name => '&bldtable',
20:14:12  26  	  xform_view_name => 'xformed_build_miss_cat');
20:14:12  27  
20:14:12  28  	-- Perform outlier treatment.
20:14:12  29  	-- create clip table
20:14:12  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:14:12  31  
20:14:12  32  	-- populate clip table
20:14:12  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:14:12  34  	  clip_table_name => 'svmc_clip',
20:14:12  35  	  data_table_name => '&bldtable',
20:14:12  36  	  tail_frac	  => 0.025,
20:14:12  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:14:12  38  
20:14:12  39  	-- xform input data to winsorized data
20:14:12  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:14:12  41  	  clip_table_name => 'svmc_clip',
20:14:12  42  	  data_table_name => '&bldtable',
20:14:12  43  	  xform_view_name => 'svmc_winsor');
20:14:12  44  
20:14:12  45  	-- create normalization table
20:14:12  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:14:12  47  
20:14:12  48  	-- populate normalization table based on winsorized data
20:14:12  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:14:12  50  	  norm_table_name => 'svmc_norm',
20:14:12  51  	  data_table_name => 'svmc_winsor',
20:14:12  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:14:12  53  
20:14:13  54  	-- normalize the original data
20:14:13  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:14:13  56  	  norm_table_name => 'svmc_norm',
20:14:13  57  	  data_table_name => '&bldtable',
20:14:13  58  	  xform_view_name => 'svmc_build_prep');
20:14:13  59  END;
20:14:13  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.11
20:14:14 SQL> 
20:14:14 SQL> ---------------------
20:14:14 SQL> -- CREATE A NEW MODEL
20:14:14 SQL> --
20:14:14 SQL> -- Cleanup old model with the same name for repeat runs
20:14:14 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:14:14   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:14:14   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.89
20:14:15 SQL> 
20:14:15 SQL> -- Build a new SVM Model
20:14:15 SQL> BEGIN
20:14:15   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:14:15   3  	  model_name	      => '&model_name',
20:14:15   4  	  mining_function     => dbms_data_mining.classification,
20:14:15   5  	  data_table_name     => 'svmc_build_prep',
20:14:15   6  	  case_id_column_name => '&case_id',
20:14:15   7  	  target_column_name  => '&target',
20:14:15   8  	  settings_table_name => 'svmc_settings');
20:14:15   9  END;
20:14:15  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:02.54
20:14:17 SQL> 
20:14:17 SQL> -----------------------------------------------------------------------
20:14:17 SQL> --			       APPLY/score THE MODEL
20:14:17 SQL> -----------------------------------------------------------------------
20:14:17 SQL> 
20:14:17 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:14:17 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:14:17   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:14:17   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.07
20:14:17 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:14:17   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:14:17   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
20:14:17 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:14:17   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:14:17   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.10
20:14:17 SQL> -----------------------
20:14:17 SQL> -- PREPARE SCORING DATA
20:14:17 SQL> --
20:14:17 SQL> -- If the data for model creation has been prepared, then the data
20:14:17 SQL> -- to be scored using the model must be prepared in the same manner
20:14:17 SQL> -- in order to obtain meaningful results.
20:14:17 SQL> --
20:14:17 SQL> -- 1. Missing Value treatment for all Predictors and
20:14:17 SQL> -- 2. Normalization
20:14:17 SQL> -- No outlier treatment will be performed during test and apply. The
20:14:17 SQL> -- normalization step is sufficient, since the normalization parameters
20:14:17 SQL> -- already capture the effects of outlier treatment done with build data.
20:14:17 SQL> --
20:14:17 SQL> BEGIN
20:14:17   2  	-- Xform Test data to replace missing values
20:14:17   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:14:17   4  	  miss_table_name => 'svmc_miss_num',
20:14:17   5  	  data_table_name => '&scoretable',
20:14:17   6  	  xform_view_name => 'xformed_apply_miss_num');
20:14:17   7  
20:14:17   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:14:17   9  	  miss_table_name => 'svmc_miss_cat',
20:14:17  10  	  data_table_name => '&scoretable',
20:14:17  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:14:17  12  
20:14:17  13  	-- Normalize the data to be scored
20:14:17  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:14:17  15  	  norm_table_name => 'svmc_norm',
20:14:17  16  	  data_table_name => '&scoretable',
20:14:17  17  	  xform_view_name => 'svmc_apply_prep');
20:14:17  18  END;
20:14:17  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.19
20:14:17 SQL> 
20:14:17 SQL> -- Maybe I already collected a score for this prdate.
20:14:17 SQL> -- DELETE it if I did:
20:14:17 SQL> DELETE svm62scores
20:14:17   2  WHERE score > 0
20:14:17   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:14:17   4  -- I need to supply the target attribute name:
20:14:17   5  AND targ = '&1'
20:14:17   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gattn'

0 rows deleted.

Elapsed: 00:00:00.02
20:14:17 SQL> 
20:14:17 SQL> -- We do a drumroll here:
20:14:17 SQL> 
20:14:17 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:14:17   2  SELECT
20:14:17   3  prdate
20:14:17   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:14:17   5  ,sysdate
20:14:17   6  ,SUBSTR(prdate,1,7)pair
20:14:17   7  ,SUBSTR(prdate,-19)ydate
20:14:17   8  ,'&1'
20:14:17   9  FROM svmc_apply_prep
20:14:17  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gattn'

1 row created.

Elapsed: 00:00:00.05
20:14:18 SQL> @score1_5min_gattn.sql	2010-11-26 10:00:01 aud_usd
20:14:18 SQL> --
20:14:18 SQL> -- score1_5min_gattn.sql
20:14:18 SQL> --
20:14:18 SQL> 
20:14:18 SQL> -- Demo:
20:14:18 SQL> -- @score1_5min_gattn.sql 2010-12-31 20:45:01 aud_usd
20:14:18 SQL> 
20:14:18 SQL> CREATE OR REPLACE VIEW sme AS
20:14:18   2  SELECT
20:14:18   3  prdate
20:14:18   4  ,NULL gattn
20:14:18   5  ,g00
20:14:18   6  ,g01
20:14:18   7  ,g02
20:14:18   8  ,g03
20:14:18   9  ,g04
20:14:18  10  ,g05
20:14:18  11  ,g06
20:14:18  12  ,g07
20:14:18  13  ,g08
20:14:18  14  ,g09
20:14:18  15  ,g10
20:14:18  16  ,g11
20:14:18  17  ,g12
20:14:18  18  ,g13
20:14:18  19  ,g14
20:14:18  20  ,g15
20:14:18  21  ,g16
20:14:18  22  ,g17
20:14:18  23  ,g18
20:14:18  24  ,g19
20:14:18  25  ,g20
20:14:18  26  ,g21
20:14:18  27  ,g22
20:14:18  28  ,g23
20:14:18  29  ,g24
20:14:18  30  ,g25
20:14:18  31  ,g26
20:14:18  32  ,g27
20:14:18  33  ,g28
20:14:18  34  ,g29
20:14:18  35  ,g30
20:14:18  36  ,g31
20:14:18  37  ,g32
20:14:18  38  ,g33
20:14:18  39  ,g34
20:14:18  40  ,g35
20:14:18  41  ,g36
20:14:18  42  ,g37
20:14:18  43  ,g38
20:14:18  44  ,g39
20:14:18  45  ,g40
20:14:18  46  ,g41
20:14:18  47  FROM modsrc
20:14:18  48  WHERE ydate = '&1'||' '||'&2'
20:14:18  49  AND pair = '&3'
20:14:18  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-11-26'||' '||'10:00:01'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.05
20:14:18 SQL> 
20:14:18 SQL> -- rpt
20:14:18 SQL> -- We should see just 1 row:
20:14:18 SQL> 
20:14:18 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.01
20:14:18 SQL> 
20:14:18 SQL> -- Build the model:
20:14:18 SQL> CREATE OR REPLACE VIEW bme AS
20:14:18   2  SELECT
20:14:18   3  prdate
20:14:18   4  ,gattn
20:14:18   5  ,g00
20:14:18   6  ,g01
20:14:18   7  ,g02
20:14:18   8  ,g03
20:14:18   9  ,g04
20:14:18  10  ,g05
20:14:18  11  ,g06
20:14:18  12  ,g07
20:14:18  13  ,g08
20:14:18  14  ,g09
20:14:18  15  ,g10
20:14:18  16  ,g11
20:14:18  17  ,g12
20:14:18  18  ,g13
20:14:18  19  ,g14
20:14:18  20  ,g15
20:14:18  21  ,g16
20:14:18  22  ,g17
20:14:18  23  ,g18
20:14:18  24  ,g19
20:14:18  25  ,g20
20:14:18  26  ,g21
20:14:18  27  ,g22
20:14:18  28  ,g23
20:14:18  29  ,g24
20:14:18  30  ,g25
20:14:18  31  ,g26
20:14:18  32  ,g27
20:14:18  33  ,g28
20:14:18  34  ,g29
20:14:18  35  ,g30
20:14:18  36  ,g31
20:14:18  37  ,g32
20:14:18  38  ,g33
20:14:18  39  ,g34
20:14:18  40  ,g35
20:14:18  41  ,g36
20:14:18  42  ,g37
20:14:18  43  ,g38
20:14:18  44  ,g39
20:14:18  45  ,g40
20:14:18  46  ,g41
20:14:18  47  FROM modsrc
20:14:18  48  WHERE gattn IN('nup','up')
20:14:18  49  -- Use only rows which are older than 1 day:
20:14:18  50  AND 1+ydate < '&1'||' '||'&2'
20:14:18  51  AND pair = '&3'
20:14:18  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-11-26'||' '||'10:00:01'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:14:18 SQL> 
20:14:18 SQL> -- rpt
20:14:18 SQL> 
20:14:18 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	     6727
up	     3880

Elapsed: 00:00:00.03
20:14:18 SQL> 
20:14:18 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-11-25 09:55:01

Elapsed: 00:00:00.01
20:14:18 SQL> 
20:14:18 SQL> -- Now build model from bme and score sme
20:14:18 SQL> @score1.sql gattn
20:14:18 SQL> --
20:14:18 SQL> -- score1.sql
20:14:18 SQL> --
20:14:18 SQL> 
20:14:18 SQL> -- I use this script to send 5 params to score.sql
20:14:18 SQL> -- which does the heavy lifting of creating an SVM model.
20:14:18 SQL> -- Then at the very end of this script I use the model
20:14:18 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:14:18 SQL> 
20:14:18 SQL> -- I call this script from 2 other scripts:
20:14:18 SQL> -- score1_5min.sql
20:14:18 SQL> -- score1_5min_gattn.sql
20:14:18 SQL> 
20:14:18 SQL> -- The 1st param is the name of the target attribute.
20:14:18 SQL> -- I like to call my target attributes either gatt or gattn.
20:14:18 SQL> 
20:14:18 SQL> -- Demo:
20:14:18 SQL> -- @score1.sql 'gatt'
20:14:18 SQL> -- @score1.sql 'gattn'
20:14:18 SQL> 
20:14:18 SQL> -- Now, I fill up svmc_apply_prep.
20:14:18 SQL> -- I use same model_name used in score.sql
20:14:18 SQL> DEFINE model_name = 'svmfx101'
20:14:18 SQL> DEFINE bldtable	= 'bme'
20:14:18 SQL> DEFINE scoretable = 'sme'
20:14:18 SQL> DEFINE case_id	= 'prdate'
20:14:18 SQL> -- Demo:
20:14:18 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:14:18 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:14:18 SQL> --
20:14:18 SQL> -- score.sql
20:14:18 SQL> --
20:14:18 SQL> 
20:14:18 SQL> -- usage: score.sql
20:14:18 SQL> 
20:14:18 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:14:18 SQL> 
20:14:18 SQL> -- DEFINE target	   = 'gatt'
20:14:18 SQL> -- DEFINE model_name = 'svmfx101'
20:14:18 SQL> -- DEFINE bldtable   = 'bme'
20:14:18 SQL> -- DEFINE scoretable = 'sme'
20:14:18 SQL> -- DEFINE case_id    = 'prdate'
20:14:18 SQL> 
20:14:18 SQL> DEFINE target	= '&1'
20:14:18 SQL> DEFINE model_name = '&2'
20:14:18 SQL> DEFINE bldtable	= '&3'
20:14:18 SQL> DEFINE scoretable = '&4'
20:14:18 SQL> DEFINE case_id	= '&5'
20:14:18 SQL> 
20:14:18 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:14:18 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:14:18 SQL> 
20:14:18 SQL> -- Builds an SVM model using pl/sql.
20:14:18 SQL> 
20:14:18 SQL> -----------------------------------------------------------------------
20:14:18 SQL> --			    BUILD THE MODEL
20:14:18 SQL> -----------------------------------------------------------------------
20:14:18 SQL> 
20:14:18 SQL> -- Cleanup old build data preparation objects for repeat runs
20:14:18 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.00
20:14:18 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:14:18 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:14:18 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.00
20:14:18 SQL> 
20:14:18 SQL> 
20:14:18 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:14:18 SQL> --
20:14:18 SQL> -- DROP	TABLE svmc_settings ;
20:14:18 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:14:18 SQL> -- DELETE svmc_settings;
20:14:18 SQL> 
20:14:18 SQL> -- The default classification algorithm is Naive Bayes. So override
20:14:18 SQL> -- this choice to SVM using a settings table.
20:14:18 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:14:18 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:14:18 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:14:18 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:14:18 SQL> -- models.
20:14:18 SQL> --
20:14:18 SQL> 
20:14:18 SQL> -- Do this once and then comment it out.
20:14:18 SQL> -- That makes script go faster.
20:14:18 SQL> -- BEGIN
20:14:18 SQL> -- -- Populate settings table
20:14:18 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:14:18 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:14:18 SQL> --
20:14:18 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:14:18 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:14:18 SQL> --
20:14:18 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:14:18 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:14:18 SQL> --   COMMIT;
20:14:18 SQL> -- END;
20:14:18 SQL> -- /
20:14:18 SQL> 
20:14:18 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:14:18 SQL> 
20:14:18 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:14:18   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:14:18   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:14:18 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:14:18   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:14:18   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:14:18 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:14:18   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:14:18   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:14:18 SQL> 
20:14:18 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:14:18   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:14:18   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:14:18 SQL> 
20:14:18 SQL> --------------------------------
20:14:18 SQL> -- PREPARE BUILD (TRAINING) DATA
20:14:18 SQL> --
20:14:18 SQL> 
20:14:18 SQL> -- 1. Missing Value treatment for all Predictors and
20:14:18 SQL> -- 2. Outlier Treatment and
20:14:18 SQL> -- 3. Normalization are performed below.
20:14:18 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:14:18 SQL> --    normalized here.
20:14:18 SQL> 
20:14:18 SQL> BEGIN
20:14:18   2  	-- Perform missing value treatment for all predictors
20:14:18   3  	-- create miss tables
20:14:18   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:14:18   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:14:18   6  
20:14:18   7  	-- populate miss tables
20:14:18   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:14:18   9  	  miss_table_name => 'svmc_miss_num',
20:14:18  10  	  data_table_name => '&bldtable',
20:14:18  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:14:18  12  
20:14:18  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:14:18  14  	  miss_table_name => 'svmc_miss_cat',
20:14:18  15  	  data_table_name => '&bldtable',
20:14:18  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:14:18  17  
20:14:18  18  	-- xform input data to replace missing values
20:14:18  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:14:18  20  	  miss_table_name => 'svmc_miss_num',
20:14:18  21  	  data_table_name => '&bldtable',
20:14:18  22  	  xform_view_name => 'xformed_build_miss_num');
20:14:18  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:14:18  24  	  miss_table_name => 'svmc_miss_cat',
20:14:18  25  	  data_table_name => '&bldtable',
20:14:18  26  	  xform_view_name => 'xformed_build_miss_cat');
20:14:18  27  
20:14:18  28  	-- Perform outlier treatment.
20:14:18  29  	-- create clip table
20:14:18  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:14:18  31  
20:14:18  32  	-- populate clip table
20:14:18  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:14:18  34  	  clip_table_name => 'svmc_clip',
20:14:18  35  	  data_table_name => '&bldtable',
20:14:18  36  	  tail_frac	  => 0.025,
20:14:18  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:14:18  38  
20:14:18  39  	-- xform input data to winsorized data
20:14:18  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:14:18  41  	  clip_table_name => 'svmc_clip',
20:14:18  42  	  data_table_name => '&bldtable',
20:14:18  43  	  xform_view_name => 'svmc_winsor');
20:14:18  44  
20:14:18  45  	-- create normalization table
20:14:18  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:14:18  47  
20:14:18  48  	-- populate normalization table based on winsorized data
20:14:18  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:14:18  50  	  norm_table_name => 'svmc_norm',
20:14:18  51  	  data_table_name => 'svmc_winsor',
20:14:18  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:14:18  53  
20:14:18  54  	-- normalize the original data
20:14:18  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:14:18  56  	  norm_table_name => 'svmc_norm',
20:14:18  57  	  data_table_name => '&bldtable',
20:14:18  58  	  xform_view_name => 'svmc_build_prep');
20:14:18  59  END;
20:14:18  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.74
20:14:20 SQL> 
20:14:20 SQL> ---------------------
20:14:20 SQL> -- CREATE A NEW MODEL
20:14:20 SQL> --
20:14:20 SQL> -- Cleanup old model with the same name for repeat runs
20:14:20 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:14:20   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:14:20   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.00
20:14:21 SQL> 
20:14:21 SQL> -- Build a new SVM Model
20:14:21 SQL> BEGIN
20:14:21   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:14:21   3  	  model_name	      => '&model_name',
20:14:21   4  	  mining_function     => dbms_data_mining.classification,
20:14:21   5  	  data_table_name     => 'svmc_build_prep',
20:14:21   6  	  case_id_column_name => '&case_id',
20:14:21   7  	  target_column_name  => '&target',
20:14:21   8  	  settings_table_name => 'svmc_settings');
20:14:21   9  END;
20:14:21  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:03.88
20:14:24 SQL> 
20:14:24 SQL> -----------------------------------------------------------------------
20:14:24 SQL> --			       APPLY/score THE MODEL
20:14:24 SQL> -----------------------------------------------------------------------
20:14:24 SQL> 
20:14:24 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:14:24 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:14:24   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:14:24   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:14:24 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:14:24   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:14:24   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:14:25 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:14:25   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:14:25   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:14:25 SQL> -----------------------
20:14:25 SQL> -- PREPARE SCORING DATA
20:14:25 SQL> --
20:14:25 SQL> -- If the data for model creation has been prepared, then the data
20:14:25 SQL> -- to be scored using the model must be prepared in the same manner
20:14:25 SQL> -- in order to obtain meaningful results.
20:14:25 SQL> --
20:14:25 SQL> -- 1. Missing Value treatment for all Predictors and
20:14:25 SQL> -- 2. Normalization
20:14:25 SQL> -- No outlier treatment will be performed during test and apply. The
20:14:25 SQL> -- normalization step is sufficient, since the normalization parameters
20:14:25 SQL> -- already capture the effects of outlier treatment done with build data.
20:14:25 SQL> --
20:14:25 SQL> BEGIN
20:14:25   2  	-- Xform Test data to replace missing values
20:14:25   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:14:25   4  	  miss_table_name => 'svmc_miss_num',
20:14:25   5  	  data_table_name => '&scoretable',
20:14:25   6  	  xform_view_name => 'xformed_apply_miss_num');
20:14:25   7  
20:14:25   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:14:25   9  	  miss_table_name => 'svmc_miss_cat',
20:14:25  10  	  data_table_name => '&scoretable',
20:14:25  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:14:25  12  
20:14:25  13  	-- Normalize the data to be scored
20:14:25  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:14:25  15  	  norm_table_name => 'svmc_norm',
20:14:25  16  	  data_table_name => '&scoretable',
20:14:25  17  	  xform_view_name => 'svmc_apply_prep');
20:14:25  18  END;
20:14:25  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.15
20:14:25 SQL> 
20:14:25 SQL> -- Maybe I already collected a score for this prdate.
20:14:25 SQL> -- DELETE it if I did:
20:14:25 SQL> DELETE svm62scores
20:14:25   2  WHERE score > 0
20:14:25   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:14:25   4  -- I need to supply the target attribute name:
20:14:25   5  AND targ = '&1'
20:14:25   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gattn'

0 rows deleted.

Elapsed: 00:00:00.01
20:14:25 SQL> 
20:14:25 SQL> -- We do a drumroll here:
20:14:25 SQL> 
20:14:25 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:14:25   2  SELECT
20:14:25   3  prdate
20:14:25   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:14:25   5  ,sysdate
20:14:25   6  ,SUBSTR(prdate,1,7)pair
20:14:25   7  ,SUBSTR(prdate,-19)ydate
20:14:25   8  ,'&1'
20:14:25   9  FROM svmc_apply_prep
20:14:25  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gattn'

1 row created.

Elapsed: 00:00:00.04
20:14:25 SQL> @score1_5min_gattn.sql	2010-10-28 14:25:01 aud_usd
20:14:25 SQL> --
20:14:25 SQL> -- score1_5min_gattn.sql
20:14:25 SQL> --
20:14:25 SQL> 
20:14:25 SQL> -- Demo:
20:14:25 SQL> -- @score1_5min_gattn.sql 2010-12-31 20:45:01 aud_usd
20:14:25 SQL> 
20:14:25 SQL> CREATE OR REPLACE VIEW sme AS
20:14:25   2  SELECT
20:14:25   3  prdate
20:14:25   4  ,NULL gattn
20:14:25   5  ,g00
20:14:25   6  ,g01
20:14:25   7  ,g02
20:14:25   8  ,g03
20:14:25   9  ,g04
20:14:25  10  ,g05
20:14:25  11  ,g06
20:14:25  12  ,g07
20:14:25  13  ,g08
20:14:25  14  ,g09
20:14:25  15  ,g10
20:14:25  16  ,g11
20:14:25  17  ,g12
20:14:25  18  ,g13
20:14:25  19  ,g14
20:14:25  20  ,g15
20:14:25  21  ,g16
20:14:25  22  ,g17
20:14:25  23  ,g18
20:14:25  24  ,g19
20:14:25  25  ,g20
20:14:25  26  ,g21
20:14:25  27  ,g22
20:14:25  28  ,g23
20:14:25  29  ,g24
20:14:25  30  ,g25
20:14:25  31  ,g26
20:14:25  32  ,g27
20:14:25  33  ,g28
20:14:25  34  ,g29
20:14:25  35  ,g30
20:14:25  36  ,g31
20:14:25  37  ,g32
20:14:25  38  ,g33
20:14:25  39  ,g34
20:14:25  40  ,g35
20:14:25  41  ,g36
20:14:25  42  ,g37
20:14:25  43  ,g38
20:14:25  44  ,g39
20:14:25  45  ,g40
20:14:25  46  ,g41
20:14:25  47  FROM modsrc
20:14:25  48  WHERE ydate = '&1'||' '||'&2'
20:14:25  49  AND pair = '&3'
20:14:25  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-10-28'||' '||'14:25:01'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:14:25 SQL> 
20:14:25 SQL> -- rpt
20:14:25 SQL> -- We should see just 1 row:
20:14:25 SQL> 
20:14:25 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.01
20:14:25 SQL> 
20:14:25 SQL> -- Build the model:
20:14:25 SQL> CREATE OR REPLACE VIEW bme AS
20:14:25   2  SELECT
20:14:25   3  prdate
20:14:25   4  ,gattn
20:14:25   5  ,g00
20:14:25   6  ,g01
20:14:25   7  ,g02
20:14:25   8  ,g03
20:14:25   9  ,g04
20:14:25  10  ,g05
20:14:25  11  ,g06
20:14:25  12  ,g07
20:14:25  13  ,g08
20:14:25  14  ,g09
20:14:25  15  ,g10
20:14:25  16  ,g11
20:14:25  17  ,g12
20:14:25  18  ,g13
20:14:25  19  ,g14
20:14:25  20  ,g15
20:14:25  21  ,g16
20:14:25  22  ,g17
20:14:25  23  ,g18
20:14:25  24  ,g19
20:14:25  25  ,g20
20:14:25  26  ,g21
20:14:25  27  ,g22
20:14:25  28  ,g23
20:14:25  29  ,g24
20:14:25  30  ,g25
20:14:25  31  ,g26
20:14:25  32  ,g27
20:14:25  33  ,g28
20:14:25  34  ,g29
20:14:25  35  ,g30
20:14:25  36  ,g31
20:14:25  37  ,g32
20:14:25  38  ,g33
20:14:25  39  ,g34
20:14:25  40  ,g35
20:14:25  41  ,g36
20:14:25  42  ,g37
20:14:25  43  ,g38
20:14:25  44  ,g39
20:14:25  45  ,g40
20:14:25  46  ,g41
20:14:25  47  FROM modsrc
20:14:25  48  WHERE gattn IN('nup','up')
20:14:25  49  -- Use only rows which are older than 1 day:
20:14:25  50  AND 1+ydate < '&1'||' '||'&2'
20:14:25  51  AND pair = '&3'
20:14:25  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-10-28'||' '||'14:25:01'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.05
20:14:25 SQL> 
20:14:25 SQL> -- rpt
20:14:25 SQL> 
20:14:25 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	     2814
up	     1760

Elapsed: 00:00:00.02
20:14:25 SQL> 
20:14:25 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-10-27 14:20:01

Elapsed: 00:00:00.01
20:14:25 SQL> 
20:14:25 SQL> -- Now build model from bme and score sme
20:14:25 SQL> @score1.sql gattn
20:14:25 SQL> --
20:14:25 SQL> -- score1.sql
20:14:25 SQL> --
20:14:25 SQL> 
20:14:25 SQL> -- I use this script to send 5 params to score.sql
20:14:25 SQL> -- which does the heavy lifting of creating an SVM model.
20:14:25 SQL> -- Then at the very end of this script I use the model
20:14:25 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:14:25 SQL> 
20:14:25 SQL> -- I call this script from 2 other scripts:
20:14:25 SQL> -- score1_5min.sql
20:14:25 SQL> -- score1_5min_gattn.sql
20:14:25 SQL> 
20:14:25 SQL> -- The 1st param is the name of the target attribute.
20:14:25 SQL> -- I like to call my target attributes either gatt or gattn.
20:14:25 SQL> 
20:14:25 SQL> -- Demo:
20:14:25 SQL> -- @score1.sql 'gatt'
20:14:25 SQL> -- @score1.sql 'gattn'
20:14:25 SQL> 
20:14:25 SQL> -- Now, I fill up svmc_apply_prep.
20:14:25 SQL> -- I use same model_name used in score.sql
20:14:25 SQL> DEFINE model_name = 'svmfx101'
20:14:25 SQL> DEFINE bldtable	= 'bme'
20:14:25 SQL> DEFINE scoretable = 'sme'
20:14:25 SQL> DEFINE case_id	= 'prdate'
20:14:25 SQL> -- Demo:
20:14:25 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:14:25 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:14:25 SQL> --
20:14:25 SQL> -- score.sql
20:14:25 SQL> --
20:14:25 SQL> 
20:14:25 SQL> -- usage: score.sql
20:14:25 SQL> 
20:14:25 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:14:25 SQL> 
20:14:25 SQL> -- DEFINE target	   = 'gatt'
20:14:25 SQL> -- DEFINE model_name = 'svmfx101'
20:14:25 SQL> -- DEFINE bldtable   = 'bme'
20:14:25 SQL> -- DEFINE scoretable = 'sme'
20:14:25 SQL> -- DEFINE case_id    = 'prdate'
20:14:25 SQL> 
20:14:25 SQL> DEFINE target	= '&1'
20:14:25 SQL> DEFINE model_name = '&2'
20:14:25 SQL> DEFINE bldtable	= '&3'
20:14:25 SQL> DEFINE scoretable = '&4'
20:14:25 SQL> DEFINE case_id	= '&5'
20:14:25 SQL> 
20:14:25 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:14:25 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:14:25 SQL> 
20:14:25 SQL> -- Builds an SVM model using pl/sql.
20:14:25 SQL> 
20:14:25 SQL> -----------------------------------------------------------------------
20:14:25 SQL> --			    BUILD THE MODEL
20:14:25 SQL> -----------------------------------------------------------------------
20:14:25 SQL> 
20:14:25 SQL> -- Cleanup old build data preparation objects for repeat runs
20:14:25 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.01
20:14:25 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:14:25 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:14:25 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.00
20:14:25 SQL> 
20:14:25 SQL> 
20:14:25 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:14:25 SQL> --
20:14:25 SQL> -- DROP	TABLE svmc_settings ;
20:14:25 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:14:25 SQL> -- DELETE svmc_settings;
20:14:25 SQL> 
20:14:25 SQL> -- The default classification algorithm is Naive Bayes. So override
20:14:25 SQL> -- this choice to SVM using a settings table.
20:14:25 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:14:25 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:14:25 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:14:25 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:14:25 SQL> -- models.
20:14:25 SQL> --
20:14:25 SQL> 
20:14:25 SQL> -- Do this once and then comment it out.
20:14:25 SQL> -- That makes script go faster.
20:14:25 SQL> -- BEGIN
20:14:25 SQL> -- -- Populate settings table
20:14:25 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:14:25 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:14:25 SQL> --
20:14:25 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:14:25 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:14:25 SQL> --
20:14:25 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:14:25 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:14:25 SQL> --   COMMIT;
20:14:25 SQL> -- END;
20:14:25 SQL> -- /
20:14:25 SQL> 
20:14:25 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:14:25 SQL> 
20:14:25 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:14:25   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:14:25   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:14:25 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:14:25   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:14:25   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:14:25 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:14:25   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:14:25   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:14:25 SQL> 
20:14:25 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:14:25   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:14:25   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:14:25 SQL> 
20:14:25 SQL> --------------------------------
20:14:25 SQL> -- PREPARE BUILD (TRAINING) DATA
20:14:25 SQL> --
20:14:25 SQL> 
20:14:25 SQL> -- 1. Missing Value treatment for all Predictors and
20:14:25 SQL> -- 2. Outlier Treatment and
20:14:25 SQL> -- 3. Normalization are performed below.
20:14:25 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:14:25 SQL> --    normalized here.
20:14:25 SQL> 
20:14:25 SQL> BEGIN
20:14:25   2  	-- Perform missing value treatment for all predictors
20:14:25   3  	-- create miss tables
20:14:25   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:14:25   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:14:25   6  
20:14:25   7  	-- populate miss tables
20:14:25   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:14:25   9  	  miss_table_name => 'svmc_miss_num',
20:14:25  10  	  data_table_name => '&bldtable',
20:14:25  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:14:25  12  
20:14:25  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:14:25  14  	  miss_table_name => 'svmc_miss_cat',
20:14:25  15  	  data_table_name => '&bldtable',
20:14:25  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:14:25  17  
20:14:25  18  	-- xform input data to replace missing values
20:14:25  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:14:25  20  	  miss_table_name => 'svmc_miss_num',
20:14:25  21  	  data_table_name => '&bldtable',
20:14:25  22  	  xform_view_name => 'xformed_build_miss_num');
20:14:25  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:14:25  24  	  miss_table_name => 'svmc_miss_cat',
20:14:25  25  	  data_table_name => '&bldtable',
20:14:25  26  	  xform_view_name => 'xformed_build_miss_cat');
20:14:25  27  
20:14:25  28  	-- Perform outlier treatment.
20:14:25  29  	-- create clip table
20:14:25  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:14:25  31  
20:14:25  32  	-- populate clip table
20:14:25  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:14:25  34  	  clip_table_name => 'svmc_clip',
20:14:25  35  	  data_table_name => '&bldtable',
20:14:25  36  	  tail_frac	  => 0.025,
20:14:25  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:14:25  38  
20:14:25  39  	-- xform input data to winsorized data
20:14:25  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:14:25  41  	  clip_table_name => 'svmc_clip',
20:14:25  42  	  data_table_name => '&bldtable',
20:14:25  43  	  xform_view_name => 'svmc_winsor');
20:14:25  44  
20:14:25  45  	-- create normalization table
20:14:25  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:14:25  47  
20:14:25  48  	-- populate normalization table based on winsorized data
20:14:25  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:14:25  50  	  norm_table_name => 'svmc_norm',
20:14:25  51  	  data_table_name => 'svmc_winsor',
20:14:25  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:14:25  53  
20:14:25  54  	-- normalize the original data
20:14:25  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:14:25  56  	  norm_table_name => 'svmc_norm',
20:14:25  57  	  data_table_name => '&bldtable',
20:14:25  58  	  xform_view_name => 'svmc_build_prep');
20:14:25  59  END;
20:14:25  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.25
20:14:26 SQL> 
20:14:26 SQL> ---------------------
20:14:26 SQL> -- CREATE A NEW MODEL
20:14:26 SQL> --
20:14:26 SQL> -- Cleanup old model with the same name for repeat runs
20:14:26 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:14:26   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:14:26   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.97
20:14:27 SQL> 
20:14:27 SQL> -- Build a new SVM Model
20:14:27 SQL> BEGIN
20:14:27   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:14:27   3  	  model_name	      => '&model_name',
20:14:27   4  	  mining_function     => dbms_data_mining.classification,
20:14:27   5  	  data_table_name     => 'svmc_build_prep',
20:14:27   6  	  case_id_column_name => '&case_id',
20:14:27   7  	  target_column_name  => '&target',
20:14:27   8  	  settings_table_name => 'svmc_settings');
20:14:27   9  END;
20:14:27  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:02.68
20:14:30 SQL> 
20:14:30 SQL> -----------------------------------------------------------------------
20:14:30 SQL> --			       APPLY/score THE MODEL
20:14:30 SQL> -----------------------------------------------------------------------
20:14:30 SQL> 
20:14:30 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:14:30 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:14:30   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:14:30   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:14:30 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:14:30   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:14:30   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:14:30 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:14:30   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:14:30   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:14:30 SQL> -----------------------
20:14:30 SQL> -- PREPARE SCORING DATA
20:14:30 SQL> --
20:14:30 SQL> -- If the data for model creation has been prepared, then the data
20:14:30 SQL> -- to be scored using the model must be prepared in the same manner
20:14:30 SQL> -- in order to obtain meaningful results.
20:14:30 SQL> --
20:14:30 SQL> -- 1. Missing Value treatment for all Predictors and
20:14:30 SQL> -- 2. Normalization
20:14:30 SQL> -- No outlier treatment will be performed during test and apply. The
20:14:30 SQL> -- normalization step is sufficient, since the normalization parameters
20:14:30 SQL> -- already capture the effects of outlier treatment done with build data.
20:14:30 SQL> --
20:14:30 SQL> BEGIN
20:14:30   2  	-- Xform Test data to replace missing values
20:14:30   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:14:30   4  	  miss_table_name => 'svmc_miss_num',
20:14:30   5  	  data_table_name => '&scoretable',
20:14:30   6  	  xform_view_name => 'xformed_apply_miss_num');
20:14:30   7  
20:14:30   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:14:30   9  	  miss_table_name => 'svmc_miss_cat',
20:14:30  10  	  data_table_name => '&scoretable',
20:14:30  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:14:30  12  
20:14:30  13  	-- Normalize the data to be scored
20:14:30  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:14:30  15  	  norm_table_name => 'svmc_norm',
20:14:30  16  	  data_table_name => '&scoretable',
20:14:30  17  	  xform_view_name => 'svmc_apply_prep');
20:14:30  18  END;
20:14:30  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.19
20:14:30 SQL> 
20:14:30 SQL> -- Maybe I already collected a score for this prdate.
20:14:30 SQL> -- DELETE it if I did:
20:14:30 SQL> DELETE svm62scores
20:14:30   2  WHERE score > 0
20:14:30   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:14:30   4  -- I need to supply the target attribute name:
20:14:30   5  AND targ = '&1'
20:14:30   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gattn'

0 rows deleted.

Elapsed: 00:00:00.02
20:14:30 SQL> 
20:14:30 SQL> -- We do a drumroll here:
20:14:30 SQL> 
20:14:30 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:14:30   2  SELECT
20:14:30   3  prdate
20:14:30   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:14:30   5  ,sysdate
20:14:30   6  ,SUBSTR(prdate,1,7)pair
20:14:30   7  ,SUBSTR(prdate,-19)ydate
20:14:30   8  ,'&1'
20:14:30   9  FROM svmc_apply_prep
20:14:30  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gattn'

1 row created.

Elapsed: 00:00:00.05
20:14:30 SQL> @score1_5min_gattn.sql	2010-11-25 09:05:01 aud_usd
20:14:30 SQL> --
20:14:30 SQL> -- score1_5min_gattn.sql
20:14:30 SQL> --
20:14:30 SQL> 
20:14:30 SQL> -- Demo:
20:14:30 SQL> -- @score1_5min_gattn.sql 2010-12-31 20:45:01 aud_usd
20:14:30 SQL> 
20:14:30 SQL> CREATE OR REPLACE VIEW sme AS
20:14:30   2  SELECT
20:14:30   3  prdate
20:14:30   4  ,NULL gattn
20:14:30   5  ,g00
20:14:30   6  ,g01
20:14:30   7  ,g02
20:14:30   8  ,g03
20:14:30   9  ,g04
20:14:30  10  ,g05
20:14:30  11  ,g06
20:14:30  12  ,g07
20:14:30  13  ,g08
20:14:30  14  ,g09
20:14:30  15  ,g10
20:14:30  16  ,g11
20:14:30  17  ,g12
20:14:30  18  ,g13
20:14:30  19  ,g14
20:14:30  20  ,g15
20:14:30  21  ,g16
20:14:30  22  ,g17
20:14:30  23  ,g18
20:14:30  24  ,g19
20:14:30  25  ,g20
20:14:30  26  ,g21
20:14:30  27  ,g22
20:14:30  28  ,g23
20:14:30  29  ,g24
20:14:30  30  ,g25
20:14:30  31  ,g26
20:14:30  32  ,g27
20:14:30  33  ,g28
20:14:30  34  ,g29
20:14:30  35  ,g30
20:14:30  36  ,g31
20:14:30  37  ,g32
20:14:30  38  ,g33
20:14:30  39  ,g34
20:14:30  40  ,g35
20:14:30  41  ,g36
20:14:30  42  ,g37
20:14:30  43  ,g38
20:14:30  44  ,g39
20:14:30  45  ,g40
20:14:30  46  ,g41
20:14:30  47  FROM modsrc
20:14:30  48  WHERE ydate = '&1'||' '||'&2'
20:14:30  49  AND pair = '&3'
20:14:30  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-11-25'||' '||'09:05:01'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.05
20:14:30 SQL> 
20:14:30 SQL> -- rpt
20:14:30 SQL> -- We should see just 1 row:
20:14:30 SQL> 
20:14:30 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.02
20:14:30 SQL> 
20:14:30 SQL> -- Build the model:
20:14:30 SQL> CREATE OR REPLACE VIEW bme AS
20:14:30   2  SELECT
20:14:30   3  prdate
20:14:30   4  ,gattn
20:14:30   5  ,g00
20:14:30   6  ,g01
20:14:30   7  ,g02
20:14:30   8  ,g03
20:14:30   9  ,g04
20:14:30  10  ,g05
20:14:30  11  ,g06
20:14:30  12  ,g07
20:14:30  13  ,g08
20:14:30  14  ,g09
20:14:30  15  ,g10
20:14:30  16  ,g11
20:14:30  17  ,g12
20:14:30  18  ,g13
20:14:30  19  ,g14
20:14:30  20  ,g15
20:14:30  21  ,g16
20:14:30  22  ,g17
20:14:30  23  ,g18
20:14:30  24  ,g19
20:14:30  25  ,g20
20:14:30  26  ,g21
20:14:30  27  ,g22
20:14:30  28  ,g23
20:14:30  29  ,g24
20:14:30  30  ,g25
20:14:30  31  ,g26
20:14:30  32  ,g27
20:14:30  33  ,g28
20:14:30  34  ,g29
20:14:30  35  ,g30
20:14:30  36  ,g31
20:14:30  37  ,g32
20:14:30  38  ,g33
20:14:30  39  ,g34
20:14:30  40  ,g35
20:14:30  41  ,g36
20:14:30  42  ,g37
20:14:30  43  ,g38
20:14:30  44  ,g39
20:14:30  45  ,g40
20:14:30  46  ,g41
20:14:30  47  FROM modsrc
20:14:30  48  WHERE gattn IN('nup','up')
20:14:30  49  -- Use only rows which are older than 1 day:
20:14:30  50  AND 1+ydate < '&1'||' '||'&2'
20:14:30  51  AND pair = '&3'
20:14:30  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-11-25'||' '||'09:05:01'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.03
20:14:30 SQL> 
20:14:30 SQL> -- rpt
20:14:30 SQL> 
20:14:30 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	     6530
up	     3778

Elapsed: 00:00:00.02
20:14:30 SQL> 
20:14:30 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-11-24 09:00:01

Elapsed: 00:00:00.01
20:14:30 SQL> 
20:14:30 SQL> -- Now build model from bme and score sme
20:14:30 SQL> @score1.sql gattn
20:14:30 SQL> --
20:14:30 SQL> -- score1.sql
20:14:30 SQL> --
20:14:30 SQL> 
20:14:30 SQL> -- I use this script to send 5 params to score.sql
20:14:30 SQL> -- which does the heavy lifting of creating an SVM model.
20:14:30 SQL> -- Then at the very end of this script I use the model
20:14:30 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:14:30 SQL> 
20:14:30 SQL> -- I call this script from 2 other scripts:
20:14:30 SQL> -- score1_5min.sql
20:14:30 SQL> -- score1_5min_gattn.sql
20:14:30 SQL> 
20:14:30 SQL> -- The 1st param is the name of the target attribute.
20:14:30 SQL> -- I like to call my target attributes either gatt or gattn.
20:14:30 SQL> 
20:14:30 SQL> -- Demo:
20:14:30 SQL> -- @score1.sql 'gatt'
20:14:30 SQL> -- @score1.sql 'gattn'
20:14:30 SQL> 
20:14:30 SQL> -- Now, I fill up svmc_apply_prep.
20:14:30 SQL> -- I use same model_name used in score.sql
20:14:30 SQL> DEFINE model_name = 'svmfx101'
20:14:30 SQL> DEFINE bldtable	= 'bme'
20:14:30 SQL> DEFINE scoretable = 'sme'
20:14:30 SQL> DEFINE case_id	= 'prdate'
20:14:30 SQL> -- Demo:
20:14:30 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:14:30 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:14:30 SQL> --
20:14:30 SQL> -- score.sql
20:14:30 SQL> --
20:14:30 SQL> 
20:14:30 SQL> -- usage: score.sql
20:14:30 SQL> 
20:14:30 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:14:30 SQL> 
20:14:30 SQL> -- DEFINE target	   = 'gatt'
20:14:30 SQL> -- DEFINE model_name = 'svmfx101'
20:14:30 SQL> -- DEFINE bldtable   = 'bme'
20:14:30 SQL> -- DEFINE scoretable = 'sme'
20:14:30 SQL> -- DEFINE case_id    = 'prdate'
20:14:30 SQL> 
20:14:30 SQL> DEFINE target	= '&1'
20:14:30 SQL> DEFINE model_name = '&2'
20:14:30 SQL> DEFINE bldtable	= '&3'
20:14:30 SQL> DEFINE scoretable = '&4'
20:14:30 SQL> DEFINE case_id	= '&5'
20:14:30 SQL> 
20:14:30 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:14:30 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:14:30 SQL> 
20:14:30 SQL> -- Builds an SVM model using pl/sql.
20:14:30 SQL> 
20:14:30 SQL> -----------------------------------------------------------------------
20:14:30 SQL> --			    BUILD THE MODEL
20:14:30 SQL> -----------------------------------------------------------------------
20:14:30 SQL> 
20:14:30 SQL> -- Cleanup old build data preparation objects for repeat runs
20:14:30 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.00
20:14:30 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:14:30 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:14:30 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.00
20:14:30 SQL> 
20:14:30 SQL> 
20:14:30 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:14:30 SQL> --
20:14:30 SQL> -- DROP	TABLE svmc_settings ;
20:14:30 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:14:30 SQL> -- DELETE svmc_settings;
20:14:30 SQL> 
20:14:30 SQL> -- The default classification algorithm is Naive Bayes. So override
20:14:30 SQL> -- this choice to SVM using a settings table.
20:14:30 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:14:30 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:14:30 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:14:30 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:14:30 SQL> -- models.
20:14:30 SQL> --
20:14:30 SQL> 
20:14:30 SQL> -- Do this once and then comment it out.
20:14:30 SQL> -- That makes script go faster.
20:14:30 SQL> -- BEGIN
20:14:30 SQL> -- -- Populate settings table
20:14:30 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:14:30 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:14:30 SQL> --
20:14:30 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:14:30 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:14:30 SQL> --
20:14:30 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:14:30 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:14:30 SQL> --   COMMIT;
20:14:30 SQL> -- END;
20:14:30 SQL> -- /
20:14:30 SQL> 
20:14:30 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:14:30 SQL> 
20:14:30 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:14:30   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:14:30   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:14:30 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:14:30   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:14:30   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:14:30 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:14:30   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:14:30   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:14:31 SQL> 
20:14:31 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:14:31   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:14:31   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:14:31 SQL> 
20:14:31 SQL> --------------------------------
20:14:31 SQL> -- PREPARE BUILD (TRAINING) DATA
20:14:31 SQL> --
20:14:31 SQL> 
20:14:31 SQL> -- 1. Missing Value treatment for all Predictors and
20:14:31 SQL> -- 2. Outlier Treatment and
20:14:31 SQL> -- 3. Normalization are performed below.
20:14:31 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:14:31 SQL> --    normalized here.
20:14:31 SQL> 
20:14:31 SQL> BEGIN
20:14:31   2  	-- Perform missing value treatment for all predictors
20:14:31   3  	-- create miss tables
20:14:31   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:14:31   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:14:31   6  
20:14:31   7  	-- populate miss tables
20:14:31   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:14:31   9  	  miss_table_name => 'svmc_miss_num',
20:14:31  10  	  data_table_name => '&bldtable',
20:14:31  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:14:31  12  
20:14:31  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:14:31  14  	  miss_table_name => 'svmc_miss_cat',
20:14:31  15  	  data_table_name => '&bldtable',
20:14:31  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:14:31  17  
20:14:31  18  	-- xform input data to replace missing values
20:14:31  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:14:31  20  	  miss_table_name => 'svmc_miss_num',
20:14:31  21  	  data_table_name => '&bldtable',
20:14:31  22  	  xform_view_name => 'xformed_build_miss_num');
20:14:31  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:14:31  24  	  miss_table_name => 'svmc_miss_cat',
20:14:31  25  	  data_table_name => '&bldtable',
20:14:31  26  	  xform_view_name => 'xformed_build_miss_cat');
20:14:31  27  
20:14:31  28  	-- Perform outlier treatment.
20:14:31  29  	-- create clip table
20:14:31  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:14:31  31  
20:14:31  32  	-- populate clip table
20:14:31  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:14:31  34  	  clip_table_name => 'svmc_clip',
20:14:31  35  	  data_table_name => '&bldtable',
20:14:31  36  	  tail_frac	  => 0.025,
20:14:31  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:14:31  38  
20:14:31  39  	-- xform input data to winsorized data
20:14:31  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:14:31  41  	  clip_table_name => 'svmc_clip',
20:14:31  42  	  data_table_name => '&bldtable',
20:14:31  43  	  xform_view_name => 'svmc_winsor');
20:14:31  44  
20:14:31  45  	-- create normalization table
20:14:31  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:14:31  47  
20:14:31  48  	-- populate normalization table based on winsorized data
20:14:31  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:14:31  50  	  norm_table_name => 'svmc_norm',
20:14:31  51  	  data_table_name => 'svmc_winsor',
20:14:31  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:14:31  53  
20:14:31  54  	-- normalize the original data
20:14:31  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:14:31  56  	  norm_table_name => 'svmc_norm',
20:14:31  57  	  data_table_name => '&bldtable',
20:14:31  58  	  xform_view_name => 'svmc_build_prep');
20:14:31  59  END;
20:14:31  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.74
20:14:32 SQL> 
20:14:32 SQL> ---------------------
20:14:32 SQL> -- CREATE A NEW MODEL
20:14:32 SQL> --
20:14:32 SQL> -- Cleanup old model with the same name for repeat runs
20:14:32 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:14:32   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:14:32   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.98
20:14:33 SQL> 
20:14:33 SQL> -- Build a new SVM Model
20:14:33 SQL> BEGIN
20:14:33   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:14:33   3  	  model_name	      => '&model_name',
20:14:33   4  	  mining_function     => dbms_data_mining.classification,
20:14:33   5  	  data_table_name     => 'svmc_build_prep',
20:14:33   6  	  case_id_column_name => '&case_id',
20:14:33   7  	  target_column_name  => '&target',
20:14:33   8  	  settings_table_name => 'svmc_settings');
20:14:33   9  END;
20:14:33  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:03.72
20:14:37 SQL> 
20:14:37 SQL> -----------------------------------------------------------------------
20:14:37 SQL> --			       APPLY/score THE MODEL
20:14:37 SQL> -----------------------------------------------------------------------
20:14:37 SQL> 
20:14:37 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:14:37 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:14:37   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:14:37   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.11
20:14:37 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:14:37   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:14:37   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:14:37 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:14:37   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:14:37   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:14:37 SQL> -----------------------
20:14:37 SQL> -- PREPARE SCORING DATA
20:14:37 SQL> --
20:14:37 SQL> -- If the data for model creation has been prepared, then the data
20:14:37 SQL> -- to be scored using the model must be prepared in the same manner
20:14:37 SQL> -- in order to obtain meaningful results.
20:14:37 SQL> --
20:14:37 SQL> -- 1. Missing Value treatment for all Predictors and
20:14:37 SQL> -- 2. Normalization
20:14:37 SQL> -- No outlier treatment will be performed during test and apply. The
20:14:37 SQL> -- normalization step is sufficient, since the normalization parameters
20:14:37 SQL> -- already capture the effects of outlier treatment done with build data.
20:14:37 SQL> --
20:14:37 SQL> BEGIN
20:14:37   2  	-- Xform Test data to replace missing values
20:14:37   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:14:37   4  	  miss_table_name => 'svmc_miss_num',
20:14:37   5  	  data_table_name => '&scoretable',
20:14:37   6  	  xform_view_name => 'xformed_apply_miss_num');
20:14:37   7  
20:14:37   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:14:37   9  	  miss_table_name => 'svmc_miss_cat',
20:14:37  10  	  data_table_name => '&scoretable',
20:14:37  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:14:37  12  
20:14:37  13  	-- Normalize the data to be scored
20:14:37  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:14:37  15  	  norm_table_name => 'svmc_norm',
20:14:37  16  	  data_table_name => '&scoretable',
20:14:37  17  	  xform_view_name => 'svmc_apply_prep');
20:14:37  18  END;
20:14:37  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.18
20:14:37 SQL> 
20:14:37 SQL> -- Maybe I already collected a score for this prdate.
20:14:37 SQL> -- DELETE it if I did:
20:14:37 SQL> DELETE svm62scores
20:14:37   2  WHERE score > 0
20:14:37   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:14:37   4  -- I need to supply the target attribute name:
20:14:37   5  AND targ = '&1'
20:14:37   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gattn'

0 rows deleted.

Elapsed: 00:00:00.02
20:14:37 SQL> 
20:14:37 SQL> -- We do a drumroll here:
20:14:37 SQL> 
20:14:37 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:14:37   2  SELECT
20:14:37   3  prdate
20:14:37   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:14:37   5  ,sysdate
20:14:37   6  ,SUBSTR(prdate,1,7)pair
20:14:37   7  ,SUBSTR(prdate,-19)ydate
20:14:37   8  ,'&1'
20:14:37   9  FROM svmc_apply_prep
20:14:37  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gattn'

1 row created.

Elapsed: 00:00:00.05
20:14:37 SQL> @score1_5min_gattn.sql	2011-01-05 02:25:00 aud_usd
20:14:37 SQL> --
20:14:37 SQL> -- score1_5min_gattn.sql
20:14:37 SQL> --
20:14:37 SQL> 
20:14:37 SQL> -- Demo:
20:14:37 SQL> -- @score1_5min_gattn.sql 2010-12-31 20:45:01 aud_usd
20:14:37 SQL> 
20:14:37 SQL> CREATE OR REPLACE VIEW sme AS
20:14:37   2  SELECT
20:14:37   3  prdate
20:14:37   4  ,NULL gattn
20:14:37   5  ,g00
20:14:37   6  ,g01
20:14:37   7  ,g02
20:14:37   8  ,g03
20:14:37   9  ,g04
20:14:37  10  ,g05
20:14:37  11  ,g06
20:14:37  12  ,g07
20:14:37  13  ,g08
20:14:37  14  ,g09
20:14:37  15  ,g10
20:14:37  16  ,g11
20:14:37  17  ,g12
20:14:37  18  ,g13
20:14:37  19  ,g14
20:14:37  20  ,g15
20:14:37  21  ,g16
20:14:37  22  ,g17
20:14:37  23  ,g18
20:14:37  24  ,g19
20:14:37  25  ,g20
20:14:37  26  ,g21
20:14:37  27  ,g22
20:14:37  28  ,g23
20:14:37  29  ,g24
20:14:37  30  ,g25
20:14:37  31  ,g26
20:14:37  32  ,g27
20:14:37  33  ,g28
20:14:37  34  ,g29
20:14:37  35  ,g30
20:14:37  36  ,g31
20:14:37  37  ,g32
20:14:37  38  ,g33
20:14:37  39  ,g34
20:14:37  40  ,g35
20:14:37  41  ,g36
20:14:37  42  ,g37
20:14:37  43  ,g38
20:14:37  44  ,g39
20:14:37  45  ,g40
20:14:37  46  ,g41
20:14:37  47  FROM modsrc
20:14:37  48  WHERE ydate = '&1'||' '||'&2'
20:14:37  49  AND pair = '&3'
20:14:37  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2011-01-05'||' '||'02:25:00'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.05
20:14:37 SQL> 
20:14:37 SQL> -- rpt
20:14:37 SQL> -- We should see just 1 row:
20:14:37 SQL> 
20:14:37 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.01
20:14:37 SQL> 
20:14:37 SQL> -- Build the model:
20:14:37 SQL> CREATE OR REPLACE VIEW bme AS
20:14:37   2  SELECT
20:14:37   3  prdate
20:14:37   4  ,gattn
20:14:37   5  ,g00
20:14:37   6  ,g01
20:14:37   7  ,g02
20:14:37   8  ,g03
20:14:37   9  ,g04
20:14:37  10  ,g05
20:14:37  11  ,g06
20:14:37  12  ,g07
20:14:37  13  ,g08
20:14:37  14  ,g09
20:14:37  15  ,g10
20:14:37  16  ,g11
20:14:37  17  ,g12
20:14:37  18  ,g13
20:14:37  19  ,g14
20:14:37  20  ,g15
20:14:37  21  ,g16
20:14:37  22  ,g17
20:14:37  23  ,g18
20:14:37  24  ,g19
20:14:37  25  ,g20
20:14:37  26  ,g21
20:14:37  27  ,g22
20:14:37  28  ,g23
20:14:37  29  ,g24
20:14:37  30  ,g25
20:14:37  31  ,g26
20:14:37  32  ,g27
20:14:37  33  ,g28
20:14:37  34  ,g29
20:14:37  35  ,g30
20:14:37  36  ,g31
20:14:37  37  ,g32
20:14:37  38  ,g33
20:14:37  39  ,g34
20:14:37  40  ,g35
20:14:37  41  ,g36
20:14:37  42  ,g37
20:14:37  43  ,g38
20:14:37  44  ,g39
20:14:37  45  ,g40
20:14:37  46  ,g41
20:14:37  47  FROM modsrc
20:14:37  48  WHERE gattn IN('nup','up')
20:14:37  49  -- Use only rows which are older than 1 day:
20:14:37  50  AND 1+ydate < '&1'||' '||'&2'
20:14:37  51  AND pair = '&3'
20:14:37  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2011-01-05'||' '||'02:25:00'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:14:38 SQL> 
20:14:38 SQL> -- rpt
20:14:38 SQL> 
20:14:38 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	    12310
up	     6142

Elapsed: 00:00:00.02
20:14:38 SQL> 
20:14:38 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2011-01-04 02:20:00

Elapsed: 00:00:00.02
20:14:38 SQL> 
20:14:38 SQL> -- Now build model from bme and score sme
20:14:38 SQL> @score1.sql gattn
20:14:38 SQL> --
20:14:38 SQL> -- score1.sql
20:14:38 SQL> --
20:14:38 SQL> 
20:14:38 SQL> -- I use this script to send 5 params to score.sql
20:14:38 SQL> -- which does the heavy lifting of creating an SVM model.
20:14:38 SQL> -- Then at the very end of this script I use the model
20:14:38 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:14:38 SQL> 
20:14:38 SQL> -- I call this script from 2 other scripts:
20:14:38 SQL> -- score1_5min.sql
20:14:38 SQL> -- score1_5min_gattn.sql
20:14:38 SQL> 
20:14:38 SQL> -- The 1st param is the name of the target attribute.
20:14:38 SQL> -- I like to call my target attributes either gatt or gattn.
20:14:38 SQL> 
20:14:38 SQL> -- Demo:
20:14:38 SQL> -- @score1.sql 'gatt'
20:14:38 SQL> -- @score1.sql 'gattn'
20:14:38 SQL> 
20:14:38 SQL> -- Now, I fill up svmc_apply_prep.
20:14:38 SQL> -- I use same model_name used in score.sql
20:14:38 SQL> DEFINE model_name = 'svmfx101'
20:14:38 SQL> DEFINE bldtable	= 'bme'
20:14:38 SQL> DEFINE scoretable = 'sme'
20:14:38 SQL> DEFINE case_id	= 'prdate'
20:14:38 SQL> -- Demo:
20:14:38 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:14:38 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:14:38 SQL> --
20:14:38 SQL> -- score.sql
20:14:38 SQL> --
20:14:38 SQL> 
20:14:38 SQL> -- usage: score.sql
20:14:38 SQL> 
20:14:38 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:14:38 SQL> 
20:14:38 SQL> -- DEFINE target	   = 'gatt'
20:14:38 SQL> -- DEFINE model_name = 'svmfx101'
20:14:38 SQL> -- DEFINE bldtable   = 'bme'
20:14:38 SQL> -- DEFINE scoretable = 'sme'
20:14:38 SQL> -- DEFINE case_id    = 'prdate'
20:14:38 SQL> 
20:14:38 SQL> DEFINE target	= '&1'
20:14:38 SQL> DEFINE model_name = '&2'
20:14:38 SQL> DEFINE bldtable	= '&3'
20:14:38 SQL> DEFINE scoretable = '&4'
20:14:38 SQL> DEFINE case_id	= '&5'
20:14:38 SQL> 
20:14:38 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:14:38 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:14:38 SQL> 
20:14:38 SQL> -- Builds an SVM model using pl/sql.
20:14:38 SQL> 
20:14:38 SQL> -----------------------------------------------------------------------
20:14:38 SQL> --			    BUILD THE MODEL
20:14:38 SQL> -----------------------------------------------------------------------
20:14:38 SQL> 
20:14:38 SQL> -- Cleanup old build data preparation objects for repeat runs
20:14:38 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.00
20:14:38 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:14:38 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:14:38 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.01
20:14:38 SQL> 
20:14:38 SQL> 
20:14:38 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:14:38 SQL> --
20:14:38 SQL> -- DROP	TABLE svmc_settings ;
20:14:38 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:14:38 SQL> -- DELETE svmc_settings;
20:14:38 SQL> 
20:14:38 SQL> -- The default classification algorithm is Naive Bayes. So override
20:14:38 SQL> -- this choice to SVM using a settings table.
20:14:38 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:14:38 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:14:38 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:14:38 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:14:38 SQL> -- models.
20:14:38 SQL> --
20:14:38 SQL> 
20:14:38 SQL> -- Do this once and then comment it out.
20:14:38 SQL> -- That makes script go faster.
20:14:38 SQL> -- BEGIN
20:14:38 SQL> -- -- Populate settings table
20:14:38 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:14:38 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:14:38 SQL> --
20:14:38 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:14:38 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:14:38 SQL> --
20:14:38 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:14:38 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:14:38 SQL> --   COMMIT;
20:14:38 SQL> -- END;
20:14:38 SQL> -- /
20:14:38 SQL> 
20:14:38 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:14:38 SQL> 
20:14:38 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:14:38   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:14:38   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:14:38 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:14:38   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:14:38   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:14:38 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:14:38   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:14:38   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:14:38 SQL> 
20:14:38 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:14:38   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:14:38   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:14:38 SQL> 
20:14:38 SQL> --------------------------------
20:14:38 SQL> -- PREPARE BUILD (TRAINING) DATA
20:14:38 SQL> --
20:14:38 SQL> 
20:14:38 SQL> -- 1. Missing Value treatment for all Predictors and
20:14:38 SQL> -- 2. Outlier Treatment and
20:14:38 SQL> -- 3. Normalization are performed below.
20:14:38 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:14:38 SQL> --    normalized here.
20:14:38 SQL> 
20:14:38 SQL> BEGIN
20:14:38   2  	-- Perform missing value treatment for all predictors
20:14:38   3  	-- create miss tables
20:14:38   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:14:38   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:14:38   6  
20:14:38   7  	-- populate miss tables
20:14:38   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:14:38   9  	  miss_table_name => 'svmc_miss_num',
20:14:38  10  	  data_table_name => '&bldtable',
20:14:38  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:14:38  12  
20:14:38  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:14:38  14  	  miss_table_name => 'svmc_miss_cat',
20:14:38  15  	  data_table_name => '&bldtable',
20:14:38  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:14:38  17  
20:14:38  18  	-- xform input data to replace missing values
20:14:38  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:14:38  20  	  miss_table_name => 'svmc_miss_num',
20:14:38  21  	  data_table_name => '&bldtable',
20:14:38  22  	  xform_view_name => 'xformed_build_miss_num');
20:14:38  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:14:38  24  	  miss_table_name => 'svmc_miss_cat',
20:14:38  25  	  data_table_name => '&bldtable',
20:14:38  26  	  xform_view_name => 'xformed_build_miss_cat');
20:14:38  27  
20:14:38  28  	-- Perform outlier treatment.
20:14:38  29  	-- create clip table
20:14:38  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:14:38  31  
20:14:38  32  	-- populate clip table
20:14:38  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:14:38  34  	  clip_table_name => 'svmc_clip',
20:14:38  35  	  data_table_name => '&bldtable',
20:14:38  36  	  tail_frac	  => 0.025,
20:14:38  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:14:38  38  
20:14:38  39  	-- xform input data to winsorized data
20:14:38  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:14:38  41  	  clip_table_name => 'svmc_clip',
20:14:38  42  	  data_table_name => '&bldtable',
20:14:38  43  	  xform_view_name => 'svmc_winsor');
20:14:38  44  
20:14:38  45  	-- create normalization table
20:14:38  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:14:38  47  
20:14:38  48  	-- populate normalization table based on winsorized data
20:14:38  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:14:38  50  	  norm_table_name => 'svmc_norm',
20:14:38  51  	  data_table_name => 'svmc_winsor',
20:14:38  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:14:38  53  
20:14:38  54  	-- normalize the original data
20:14:38  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:14:38  56  	  norm_table_name => 'svmc_norm',
20:14:38  57  	  data_table_name => '&bldtable',
20:14:38  58  	  xform_view_name => 'svmc_build_prep');
20:14:38  59  END;
20:14:38  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:02.34
20:14:40 SQL> 
20:14:40 SQL> ---------------------
20:14:40 SQL> -- CREATE A NEW MODEL
20:14:40 SQL> --
20:14:40 SQL> -- Cleanup old model with the same name for repeat runs
20:14:40 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:14:40   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:14:40   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.96
20:14:41 SQL> 
20:14:41 SQL> -- Build a new SVM Model
20:14:41 SQL> BEGIN
20:14:41   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:14:41   3  	  model_name	      => '&model_name',
20:14:41   4  	  mining_function     => dbms_data_mining.classification,
20:14:41   5  	  data_table_name     => 'svmc_build_prep',
20:14:41   6  	  case_id_column_name => '&case_id',
20:14:41   7  	  target_column_name  => '&target',
20:14:41   8  	  settings_table_name => 'svmc_settings');
20:14:41   9  END;
20:14:41  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:04.55
20:14:46 SQL> 
20:14:46 SQL> -----------------------------------------------------------------------
20:14:46 SQL> --			       APPLY/score THE MODEL
20:14:46 SQL> -----------------------------------------------------------------------
20:14:46 SQL> 
20:14:46 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:14:46 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:14:46   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:14:46   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:14:46 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:14:46   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:14:46   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:14:46 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:14:46   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:14:46   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:14:46 SQL> -----------------------
20:14:46 SQL> -- PREPARE SCORING DATA
20:14:46 SQL> --
20:14:46 SQL> -- If the data for model creation has been prepared, then the data
20:14:46 SQL> -- to be scored using the model must be prepared in the same manner
20:14:46 SQL> -- in order to obtain meaningful results.
20:14:46 SQL> --
20:14:46 SQL> -- 1. Missing Value treatment for all Predictors and
20:14:46 SQL> -- 2. Normalization
20:14:46 SQL> -- No outlier treatment will be performed during test and apply. The
20:14:46 SQL> -- normalization step is sufficient, since the normalization parameters
20:14:46 SQL> -- already capture the effects of outlier treatment done with build data.
20:14:46 SQL> --
20:14:46 SQL> BEGIN
20:14:46   2  	-- Xform Test data to replace missing values
20:14:46   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:14:46   4  	  miss_table_name => 'svmc_miss_num',
20:14:46   5  	  data_table_name => '&scoretable',
20:14:46   6  	  xform_view_name => 'xformed_apply_miss_num');
20:14:46   7  
20:14:46   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:14:46   9  	  miss_table_name => 'svmc_miss_cat',
20:14:46  10  	  data_table_name => '&scoretable',
20:14:46  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:14:46  12  
20:14:46  13  	-- Normalize the data to be scored
20:14:46  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:14:46  15  	  norm_table_name => 'svmc_norm',
20:14:46  16  	  data_table_name => '&scoretable',
20:14:46  17  	  xform_view_name => 'svmc_apply_prep');
20:14:46  18  END;
20:14:46  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.21
20:14:46 SQL> 
20:14:46 SQL> -- Maybe I already collected a score for this prdate.
20:14:46 SQL> -- DELETE it if I did:
20:14:46 SQL> DELETE svm62scores
20:14:46   2  WHERE score > 0
20:14:46   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:14:46   4  -- I need to supply the target attribute name:
20:14:46   5  AND targ = '&1'
20:14:46   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gattn'

0 rows deleted.

Elapsed: 00:00:00.01
20:14:46 SQL> 
20:14:46 SQL> -- We do a drumroll here:
20:14:46 SQL> 
20:14:46 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:14:46   2  SELECT
20:14:46   3  prdate
20:14:46   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:14:46   5  ,sysdate
20:14:46   6  ,SUBSTR(prdate,1,7)pair
20:14:46   7  ,SUBSTR(prdate,-19)ydate
20:14:46   8  ,'&1'
20:14:46   9  FROM svmc_apply_prep
20:14:46  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gattn'

1 row created.

Elapsed: 00:00:00.04
20:14:46 SQL> @score1_5min_gattn.sql	2010-12-14 09:45:00 aud_usd
20:14:46 SQL> --
20:14:46 SQL> -- score1_5min_gattn.sql
20:14:46 SQL> --
20:14:46 SQL> 
20:14:46 SQL> -- Demo:
20:14:46 SQL> -- @score1_5min_gattn.sql 2010-12-31 20:45:01 aud_usd
20:14:46 SQL> 
20:14:46 SQL> CREATE OR REPLACE VIEW sme AS
20:14:46   2  SELECT
20:14:46   3  prdate
20:14:46   4  ,NULL gattn
20:14:46   5  ,g00
20:14:46   6  ,g01
20:14:46   7  ,g02
20:14:46   8  ,g03
20:14:46   9  ,g04
20:14:46  10  ,g05
20:14:46  11  ,g06
20:14:46  12  ,g07
20:14:46  13  ,g08
20:14:46  14  ,g09
20:14:46  15  ,g10
20:14:46  16  ,g11
20:14:46  17  ,g12
20:14:46  18  ,g13
20:14:46  19  ,g14
20:14:46  20  ,g15
20:14:46  21  ,g16
20:14:46  22  ,g17
20:14:46  23  ,g18
20:14:46  24  ,g19
20:14:46  25  ,g20
20:14:46  26  ,g21
20:14:46  27  ,g22
20:14:46  28  ,g23
20:14:46  29  ,g24
20:14:46  30  ,g25
20:14:46  31  ,g26
20:14:46  32  ,g27
20:14:46  33  ,g28
20:14:46  34  ,g29
20:14:46  35  ,g30
20:14:46  36  ,g31
20:14:46  37  ,g32
20:14:46  38  ,g33
20:14:46  39  ,g34
20:14:46  40  ,g35
20:14:46  41  ,g36
20:14:46  42  ,g37
20:14:46  43  ,g38
20:14:46  44  ,g39
20:14:46  45  ,g40
20:14:46  46  ,g41
20:14:46  47  FROM modsrc
20:14:46  48  WHERE ydate = '&1'||' '||'&2'
20:14:46  49  AND pair = '&3'
20:14:46  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-12-14'||' '||'09:45:00'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.12
20:14:46 SQL> 
20:14:46 SQL> -- rpt
20:14:46 SQL> -- We should see just 1 row:
20:14:46 SQL> 
20:14:46 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.01
20:14:46 SQL> 
20:14:46 SQL> -- Build the model:
20:14:46 SQL> CREATE OR REPLACE VIEW bme AS
20:14:46   2  SELECT
20:14:46   3  prdate
20:14:46   4  ,gattn
20:14:46   5  ,g00
20:14:46   6  ,g01
20:14:46   7  ,g02
20:14:46   8  ,g03
20:14:46   9  ,g04
20:14:46  10  ,g05
20:14:46  11  ,g06
20:14:46  12  ,g07
20:14:46  13  ,g08
20:14:46  14  ,g09
20:14:46  15  ,g10
20:14:46  16  ,g11
20:14:46  17  ,g12
20:14:46  18  ,g13
20:14:46  19  ,g14
20:14:46  20  ,g15
20:14:46  21  ,g16
20:14:46  22  ,g17
20:14:46  23  ,g18
20:14:46  24  ,g19
20:14:46  25  ,g20
20:14:46  26  ,g21
20:14:46  27  ,g22
20:14:46  28  ,g23
20:14:46  29  ,g24
20:14:46  30  ,g25
20:14:46  31  ,g26
20:14:46  32  ,g27
20:14:46  33  ,g28
20:14:46  34  ,g29
20:14:46  35  ,g30
20:14:46  36  ,g31
20:14:46  37  ,g32
20:14:46  38  ,g33
20:14:46  39  ,g34
20:14:46  40  ,g35
20:14:46  41  ,g36
20:14:46  42  ,g37
20:14:46  43  ,g38
20:14:46  44  ,g39
20:14:46  45  ,g40
20:14:46  46  ,g41
20:14:46  47  FROM modsrc
20:14:46  48  WHERE gattn IN('nup','up')
20:14:46  49  -- Use only rows which are older than 1 day:
20:14:46  50  AND 1+ydate < '&1'||' '||'&2'
20:14:46  51  AND pair = '&3'
20:14:46  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-12-14'||' '||'09:45:00'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:14:46 SQL> 
20:14:46 SQL> -- rpt
20:14:46 SQL> 
20:14:46 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	     8957
up	     5078

Elapsed: 00:00:00.03
20:14:46 SQL> 
20:14:46 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-12-13 09:40:00

Elapsed: 00:00:00.01
20:14:46 SQL> 
20:14:46 SQL> -- Now build model from bme and score sme
20:14:46 SQL> @score1.sql gattn
20:14:46 SQL> --
20:14:46 SQL> -- score1.sql
20:14:46 SQL> --
20:14:46 SQL> 
20:14:46 SQL> -- I use this script to send 5 params to score.sql
20:14:46 SQL> -- which does the heavy lifting of creating an SVM model.
20:14:46 SQL> -- Then at the very end of this script I use the model
20:14:46 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:14:46 SQL> 
20:14:46 SQL> -- I call this script from 2 other scripts:
20:14:46 SQL> -- score1_5min.sql
20:14:46 SQL> -- score1_5min_gattn.sql
20:14:46 SQL> 
20:14:46 SQL> -- The 1st param is the name of the target attribute.
20:14:46 SQL> -- I like to call my target attributes either gatt or gattn.
20:14:46 SQL> 
20:14:46 SQL> -- Demo:
20:14:46 SQL> -- @score1.sql 'gatt'
20:14:46 SQL> -- @score1.sql 'gattn'
20:14:46 SQL> 
20:14:46 SQL> -- Now, I fill up svmc_apply_prep.
20:14:46 SQL> -- I use same model_name used in score.sql
20:14:46 SQL> DEFINE model_name = 'svmfx101'
20:14:46 SQL> DEFINE bldtable	= 'bme'
20:14:46 SQL> DEFINE scoretable = 'sme'
20:14:46 SQL> DEFINE case_id	= 'prdate'
20:14:46 SQL> -- Demo:
20:14:46 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:14:46 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:14:46 SQL> --
20:14:46 SQL> -- score.sql
20:14:46 SQL> --
20:14:46 SQL> 
20:14:46 SQL> -- usage: score.sql
20:14:46 SQL> 
20:14:46 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:14:46 SQL> 
20:14:46 SQL> -- DEFINE target	   = 'gatt'
20:14:46 SQL> -- DEFINE model_name = 'svmfx101'
20:14:46 SQL> -- DEFINE bldtable   = 'bme'
20:14:46 SQL> -- DEFINE scoretable = 'sme'
20:14:46 SQL> -- DEFINE case_id    = 'prdate'
20:14:46 SQL> 
20:14:46 SQL> DEFINE target	= '&1'
20:14:46 SQL> DEFINE model_name = '&2'
20:14:46 SQL> DEFINE bldtable	= '&3'
20:14:46 SQL> DEFINE scoretable = '&4'
20:14:46 SQL> DEFINE case_id	= '&5'
20:14:46 SQL> 
20:14:46 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:14:46 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:14:46 SQL> 
20:14:46 SQL> -- Builds an SVM model using pl/sql.
20:14:46 SQL> 
20:14:46 SQL> -----------------------------------------------------------------------
20:14:46 SQL> --			    BUILD THE MODEL
20:14:46 SQL> -----------------------------------------------------------------------
20:14:46 SQL> 
20:14:46 SQL> -- Cleanup old build data preparation objects for repeat runs
20:14:46 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.00
20:14:46 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:14:46 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:14:46 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.00
20:14:46 SQL> 
20:14:46 SQL> 
20:14:46 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:14:46 SQL> --
20:14:46 SQL> -- DROP	TABLE svmc_settings ;
20:14:46 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:14:46 SQL> -- DELETE svmc_settings;
20:14:46 SQL> 
20:14:46 SQL> -- The default classification algorithm is Naive Bayes. So override
20:14:46 SQL> -- this choice to SVM using a settings table.
20:14:46 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:14:46 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:14:46 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:14:46 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:14:46 SQL> -- models.
20:14:46 SQL> --
20:14:46 SQL> 
20:14:46 SQL> -- Do this once and then comment it out.
20:14:46 SQL> -- That makes script go faster.
20:14:46 SQL> -- BEGIN
20:14:46 SQL> -- -- Populate settings table
20:14:46 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:14:46 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:14:46 SQL> --
20:14:46 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:14:46 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:14:46 SQL> --
20:14:46 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:14:46 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:14:46 SQL> --   COMMIT;
20:14:46 SQL> -- END;
20:14:46 SQL> -- /
20:14:46 SQL> 
20:14:46 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.01
20:14:46 SQL> 
20:14:46 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:14:46   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:14:46   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:14:46 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:14:46   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:14:46   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:14:46 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:14:46   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:14:46   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:14:46 SQL> 
20:14:46 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:14:46   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:14:46   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:14:46 SQL> 
20:14:46 SQL> --------------------------------
20:14:46 SQL> -- PREPARE BUILD (TRAINING) DATA
20:14:46 SQL> --
20:14:46 SQL> 
20:14:46 SQL> -- 1. Missing Value treatment for all Predictors and
20:14:46 SQL> -- 2. Outlier Treatment and
20:14:46 SQL> -- 3. Normalization are performed below.
20:14:46 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:14:46 SQL> --    normalized here.
20:14:46 SQL> 
20:14:46 SQL> BEGIN
20:14:46   2  	-- Perform missing value treatment for all predictors
20:14:46   3  	-- create miss tables
20:14:46   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:14:46   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:14:46   6  
20:14:46   7  	-- populate miss tables
20:14:46   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:14:46   9  	  miss_table_name => 'svmc_miss_num',
20:14:46  10  	  data_table_name => '&bldtable',
20:14:46  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:14:46  12  
20:14:46  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:14:46  14  	  miss_table_name => 'svmc_miss_cat',
20:14:46  15  	  data_table_name => '&bldtable',
20:14:46  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:14:46  17  
20:14:46  18  	-- xform input data to replace missing values
20:14:46  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:14:46  20  	  miss_table_name => 'svmc_miss_num',
20:14:46  21  	  data_table_name => '&bldtable',
20:14:46  22  	  xform_view_name => 'xformed_build_miss_num');
20:14:46  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:14:46  24  	  miss_table_name => 'svmc_miss_cat',
20:14:46  25  	  data_table_name => '&bldtable',
20:14:46  26  	  xform_view_name => 'xformed_build_miss_cat');
20:14:46  27  
20:14:46  28  	-- Perform outlier treatment.
20:14:46  29  	-- create clip table
20:14:46  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:14:46  31  
20:14:46  32  	-- populate clip table
20:14:46  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:14:46  34  	  clip_table_name => 'svmc_clip',
20:14:46  35  	  data_table_name => '&bldtable',
20:14:46  36  	  tail_frac	  => 0.025,
20:14:46  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:14:46  38  
20:14:46  39  	-- xform input data to winsorized data
20:14:46  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:14:46  41  	  clip_table_name => 'svmc_clip',
20:14:46  42  	  data_table_name => '&bldtable',
20:14:46  43  	  xform_view_name => 'svmc_winsor');
20:14:46  44  
20:14:46  45  	-- create normalization table
20:14:46  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:14:46  47  
20:14:46  48  	-- populate normalization table based on winsorized data
20:14:46  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:14:46  50  	  norm_table_name => 'svmc_norm',
20:14:46  51  	  data_table_name => 'svmc_winsor',
20:14:46  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:14:46  53  
20:14:46  54  	-- normalize the original data
20:14:46  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:14:46  56  	  norm_table_name => 'svmc_norm',
20:14:46  57  	  data_table_name => '&bldtable',
20:14:46  58  	  xform_view_name => 'svmc_build_prep');
20:14:46  59  END;
20:14:46  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.98
20:14:48 SQL> 
20:14:48 SQL> ---------------------
20:14:48 SQL> -- CREATE A NEW MODEL
20:14:48 SQL> --
20:14:48 SQL> -- Cleanup old model with the same name for repeat runs
20:14:48 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:14:48   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:14:48   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.94
20:14:49 SQL> 
20:14:49 SQL> -- Build a new SVM Model
20:14:49 SQL> BEGIN
20:14:49   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:14:49   3  	  model_name	      => '&model_name',
20:14:49   4  	  mining_function     => dbms_data_mining.classification,
20:14:49   5  	  data_table_name     => 'svmc_build_prep',
20:14:49   6  	  case_id_column_name => '&case_id',
20:14:49   7  	  target_column_name  => '&target',
20:14:49   8  	  settings_table_name => 'svmc_settings');
20:14:49   9  END;
20:14:49  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:04.58
20:14:54 SQL> 
20:14:54 SQL> -----------------------------------------------------------------------
20:14:54 SQL> --			       APPLY/score THE MODEL
20:14:54 SQL> -----------------------------------------------------------------------
20:14:54 SQL> 
20:14:54 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:14:54 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:14:54   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:14:54   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:14:54 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:14:54   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:14:54   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:14:54 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:14:54   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:14:54   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:14:54 SQL> -----------------------
20:14:54 SQL> -- PREPARE SCORING DATA
20:14:54 SQL> --
20:14:54 SQL> -- If the data for model creation has been prepared, then the data
20:14:54 SQL> -- to be scored using the model must be prepared in the same manner
20:14:54 SQL> -- in order to obtain meaningful results.
20:14:54 SQL> --
20:14:54 SQL> -- 1. Missing Value treatment for all Predictors and
20:14:54 SQL> -- 2. Normalization
20:14:54 SQL> -- No outlier treatment will be performed during test and apply. The
20:14:54 SQL> -- normalization step is sufficient, since the normalization parameters
20:14:54 SQL> -- already capture the effects of outlier treatment done with build data.
20:14:54 SQL> --
20:14:54 SQL> BEGIN
20:14:54   2  	-- Xform Test data to replace missing values
20:14:54   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:14:54   4  	  miss_table_name => 'svmc_miss_num',
20:14:54   5  	  data_table_name => '&scoretable',
20:14:54   6  	  xform_view_name => 'xformed_apply_miss_num');
20:14:54   7  
20:14:54   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:14:54   9  	  miss_table_name => 'svmc_miss_cat',
20:14:54  10  	  data_table_name => '&scoretable',
20:14:54  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:14:54  12  
20:14:54  13  	-- Normalize the data to be scored
20:14:54  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:14:54  15  	  norm_table_name => 'svmc_norm',
20:14:54  16  	  data_table_name => '&scoretable',
20:14:54  17  	  xform_view_name => 'svmc_apply_prep');
20:14:54  18  END;
20:14:54  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.20
20:14:54 SQL> 
20:14:54 SQL> -- Maybe I already collected a score for this prdate.
20:14:54 SQL> -- DELETE it if I did:
20:14:54 SQL> DELETE svm62scores
20:14:54   2  WHERE score > 0
20:14:54   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:14:54   4  -- I need to supply the target attribute name:
20:14:54   5  AND targ = '&1'
20:14:54   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gattn'

0 rows deleted.

Elapsed: 00:00:00.02
20:14:54 SQL> 
20:14:54 SQL> -- We do a drumroll here:
20:14:54 SQL> 
20:14:54 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:14:54   2  SELECT
20:14:54   3  prdate
20:14:54   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:14:54   5  ,sysdate
20:14:54   6  ,SUBSTR(prdate,1,7)pair
20:14:54   7  ,SUBSTR(prdate,-19)ydate
20:14:54   8  ,'&1'
20:14:54   9  FROM svmc_apply_prep
20:14:54  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gattn'

1 row created.

Elapsed: 00:00:00.05
20:14:54 SQL> @score1_5min.sql	      2010-11-08 23:25:01 aud_usd
20:14:54 SQL> --
20:14:54 SQL> -- score1_5min.sql
20:14:54 SQL> --
20:14:54 SQL> 
20:14:54 SQL> -- Demo:
20:14:54 SQL> -- @score1_5min.sql 2010-12-31 20:45:01 aud_usd
20:14:54 SQL> 
20:14:54 SQL> CREATE OR REPLACE VIEW sme AS
20:14:54   2  SELECT
20:14:54   3  prdate
20:14:54   4  ,NULL gatt
20:14:54   5  ,g00
20:14:54   6  ,g01
20:14:54   7  ,g02
20:14:54   8  ,g03
20:14:54   9  ,g04
20:14:54  10  ,g05
20:14:54  11  ,g06
20:14:54  12  ,g07
20:14:54  13  ,g08
20:14:54  14  ,g09
20:14:54  15  ,g10
20:14:54  16  ,g11
20:14:54  17  ,g12
20:14:54  18  ,g13
20:14:54  19  ,g14
20:14:54  20  ,g15
20:14:54  21  ,g16
20:14:54  22  ,g17
20:14:54  23  ,g18
20:14:54  24  ,g19
20:14:54  25  ,g20
20:14:54  26  ,g21
20:14:54  27  ,g22
20:14:54  28  ,g23
20:14:54  29  ,g24
20:14:54  30  ,g25
20:14:54  31  ,g26
20:14:54  32  ,g27
20:14:54  33  ,g28
20:14:54  34  ,g29
20:14:54  35  ,g30
20:14:54  36  ,g31
20:14:54  37  ,g32
20:14:54  38  ,g33
20:14:54  39  ,g34
20:14:54  40  ,g35
20:14:54  41  ,g36
20:14:54  42  ,g37
20:14:54  43  ,g38
20:14:54  44  ,g39
20:14:54  45  ,g40
20:14:54  46  ,g41
20:14:54  47  FROM modsrc
20:14:54  48  WHERE ydate = '&1'||' '||'&2'
20:14:54  49  AND pair = '&3'
20:14:54  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-11-08'||' '||'23:25:01'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:14:54 SQL> 
20:14:54 SQL> -- rpt
20:14:54 SQL> -- We should see just 1 row:
20:14:54 SQL> 
20:14:54 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.02
20:14:54 SQL> 
20:14:54 SQL> -- Build the model:
20:14:54 SQL> CREATE OR REPLACE VIEW bme AS
20:14:54   2  SELECT
20:14:54   3  prdate
20:14:54   4  ,gatt
20:14:54   5  ,g00
20:14:54   6  ,g01
20:14:54   7  ,g02
20:14:54   8  ,g03
20:14:54   9  ,g04
20:14:54  10  ,g05
20:14:54  11  ,g06
20:14:54  12  ,g07
20:14:54  13  ,g08
20:14:54  14  ,g09
20:14:54  15  ,g10
20:14:54  16  ,g11
20:14:54  17  ,g12
20:14:54  18  ,g13
20:14:54  19  ,g14
20:14:54  20  ,g15
20:14:54  21  ,g16
20:14:54  22  ,g17
20:14:54  23  ,g18
20:14:54  24  ,g19
20:14:54  25  ,g20
20:14:54  26  ,g21
20:14:54  27  ,g22
20:14:54  28  ,g23
20:14:54  29  ,g24
20:14:54  30  ,g25
20:14:54  31  ,g26
20:14:54  32  ,g27
20:14:54  33  ,g28
20:14:54  34  ,g29
20:14:54  35  ,g30
20:14:54  36  ,g31
20:14:54  37  ,g32
20:14:54  38  ,g33
20:14:54  39  ,g34
20:14:54  40  ,g35
20:14:54  41  ,g36
20:14:54  42  ,g37
20:14:54  43  ,g38
20:14:54  44  ,g39
20:14:54  45  ,g40
20:14:54  46  ,g41
20:14:54  47  FROM modsrc
20:14:54  48  WHERE gatt IN('nup','up')
20:14:54  49  -- Use only rows which are older than 1 day:
20:14:54  50  AND 1+ydate < '&1'||' '||'&2'
20:14:54  51  AND pair = '&3'
20:14:54  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-11-08'||' '||'23:25:01'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.05
20:14:54 SQL> 
20:14:54 SQL> -- rpt
20:14:54 SQL> 
20:14:54 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt;

GAT COUNT(PRDATE)
--- -------------
nup	     3959
up	     2763

Elapsed: 00:00:00.03
20:14:54 SQL> 
20:14:54 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-11-07 23:20:01

Elapsed: 00:00:00.01
20:14:54 SQL> 
20:14:54 SQL> -- Now build model from bme and score sme
20:14:54 SQL> @score1.sql gatt
20:14:54 SQL> --
20:14:54 SQL> -- score1.sql
20:14:54 SQL> --
20:14:54 SQL> 
20:14:54 SQL> -- I use this script to send 5 params to score.sql
20:14:54 SQL> -- which does the heavy lifting of creating an SVM model.
20:14:54 SQL> -- Then at the very end of this script I use the model
20:14:54 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:14:54 SQL> 
20:14:54 SQL> -- I call this script from 2 other scripts:
20:14:54 SQL> -- score1_5min.sql
20:14:54 SQL> -- score1_5min_gattn.sql
20:14:54 SQL> 
20:14:54 SQL> -- The 1st param is the name of the target attribute.
20:14:54 SQL> -- I like to call my target attributes either gatt or gattn.
20:14:54 SQL> 
20:14:54 SQL> -- Demo:
20:14:54 SQL> -- @score1.sql 'gatt'
20:14:54 SQL> -- @score1.sql 'gattn'
20:14:54 SQL> 
20:14:54 SQL> -- Now, I fill up svmc_apply_prep.
20:14:54 SQL> -- I use same model_name used in score.sql
20:14:54 SQL> DEFINE model_name = 'svmfx101'
20:14:54 SQL> DEFINE bldtable	= 'bme'
20:14:54 SQL> DEFINE scoretable = 'sme'
20:14:54 SQL> DEFINE case_id	= 'prdate'
20:14:54 SQL> -- Demo:
20:14:54 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:14:54 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:14:54 SQL> --
20:14:54 SQL> -- score.sql
20:14:54 SQL> --
20:14:54 SQL> 
20:14:54 SQL> -- usage: score.sql
20:14:54 SQL> 
20:14:54 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:14:54 SQL> 
20:14:54 SQL> -- DEFINE target	   = 'gatt'
20:14:54 SQL> -- DEFINE model_name = 'svmfx101'
20:14:54 SQL> -- DEFINE bldtable   = 'bme'
20:14:54 SQL> -- DEFINE scoretable = 'sme'
20:14:54 SQL> -- DEFINE case_id    = 'prdate'
20:14:54 SQL> 
20:14:54 SQL> DEFINE target	= '&1'
20:14:54 SQL> DEFINE model_name = '&2'
20:14:54 SQL> DEFINE bldtable	= '&3'
20:14:54 SQL> DEFINE scoretable = '&4'
20:14:54 SQL> DEFINE case_id	= '&5'
20:14:54 SQL> 
20:14:54 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:14:54 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:14:54 SQL> 
20:14:54 SQL> -- Builds an SVM model using pl/sql.
20:14:54 SQL> 
20:14:54 SQL> -----------------------------------------------------------------------
20:14:54 SQL> --			    BUILD THE MODEL
20:14:54 SQL> -----------------------------------------------------------------------
20:14:54 SQL> 
20:14:54 SQL> -- Cleanup old build data preparation objects for repeat runs
20:14:54 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.00
20:14:54 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:14:54 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.01
20:14:54 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.00
20:14:54 SQL> 
20:14:54 SQL> 
20:14:54 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:14:54 SQL> --
20:14:54 SQL> -- DROP	TABLE svmc_settings ;
20:14:54 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:14:54 SQL> -- DELETE svmc_settings;
20:14:54 SQL> 
20:14:54 SQL> -- The default classification algorithm is Naive Bayes. So override
20:14:54 SQL> -- this choice to SVM using a settings table.
20:14:54 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:14:54 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:14:54 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:14:54 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:14:54 SQL> -- models.
20:14:54 SQL> --
20:14:54 SQL> 
20:14:54 SQL> -- Do this once and then comment it out.
20:14:54 SQL> -- That makes script go faster.
20:14:54 SQL> -- BEGIN
20:14:54 SQL> -- -- Populate settings table
20:14:54 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:14:54 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:14:54 SQL> --
20:14:54 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:14:54 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:14:54 SQL> --
20:14:54 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:14:54 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:14:54 SQL> --   COMMIT;
20:14:54 SQL> -- END;
20:14:54 SQL> -- /
20:14:54 SQL> 
20:14:54 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:14:54 SQL> 
20:14:54 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:14:54   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:14:54   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
20:14:54 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:14:54   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:14:54   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.01
20:14:54 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:14:54   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:14:54   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:14:54 SQL> 
20:14:54 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:14:54   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:14:54   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:14:54 SQL> 
20:14:54 SQL> --------------------------------
20:14:54 SQL> -- PREPARE BUILD (TRAINING) DATA
20:14:54 SQL> --
20:14:54 SQL> 
20:14:54 SQL> -- 1. Missing Value treatment for all Predictors and
20:14:54 SQL> -- 2. Outlier Treatment and
20:14:54 SQL> -- 3. Normalization are performed below.
20:14:54 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:14:54 SQL> --    normalized here.
20:14:54 SQL> 
20:14:54 SQL> BEGIN
20:14:54   2  	-- Perform missing value treatment for all predictors
20:14:54   3  	-- create miss tables
20:14:54   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:14:54   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:14:54   6  
20:14:54   7  	-- populate miss tables
20:14:54   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:14:54   9  	  miss_table_name => 'svmc_miss_num',
20:14:54  10  	  data_table_name => '&bldtable',
20:14:54  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:14:54  12  
20:14:54  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:14:54  14  	  miss_table_name => 'svmc_miss_cat',
20:14:54  15  	  data_table_name => '&bldtable',
20:14:54  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:14:54  17  
20:14:54  18  	-- xform input data to replace missing values
20:14:54  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:14:54  20  	  miss_table_name => 'svmc_miss_num',
20:14:54  21  	  data_table_name => '&bldtable',
20:14:54  22  	  xform_view_name => 'xformed_build_miss_num');
20:14:54  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:14:54  24  	  miss_table_name => 'svmc_miss_cat',
20:14:54  25  	  data_table_name => '&bldtable',
20:14:54  26  	  xform_view_name => 'xformed_build_miss_cat');
20:14:54  27  
20:14:54  28  	-- Perform outlier treatment.
20:14:54  29  	-- create clip table
20:14:54  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:14:54  31  
20:14:54  32  	-- populate clip table
20:14:54  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:14:54  34  	  clip_table_name => 'svmc_clip',
20:14:54  35  	  data_table_name => '&bldtable',
20:14:54  36  	  tail_frac	  => 0.025,
20:14:54  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:14:54  38  
20:14:54  39  	-- xform input data to winsorized data
20:14:54  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:14:54  41  	  clip_table_name => 'svmc_clip',
20:14:54  42  	  data_table_name => '&bldtable',
20:14:54  43  	  xform_view_name => 'svmc_winsor');
20:14:54  44  
20:14:54  45  	-- create normalization table
20:14:54  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:14:54  47  
20:14:54  48  	-- populate normalization table based on winsorized data
20:14:54  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:14:54  50  	  norm_table_name => 'svmc_norm',
20:14:54  51  	  data_table_name => 'svmc_winsor',
20:14:54  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:14:54  53  
20:14:54  54  	-- normalize the original data
20:14:54  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:14:54  56  	  norm_table_name => 'svmc_norm',
20:14:54  57  	  data_table_name => '&bldtable',
20:14:54  58  	  xform_view_name => 'svmc_build_prep');
20:14:54  59  END;
20:14:54  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.41
20:14:56 SQL> 
20:14:56 SQL> ---------------------
20:14:56 SQL> -- CREATE A NEW MODEL
20:14:56 SQL> --
20:14:56 SQL> -- Cleanup old model with the same name for repeat runs
20:14:56 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:14:56   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:14:56   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.98
20:14:57 SQL> 
20:14:57 SQL> -- Build a new SVM Model
20:14:57 SQL> BEGIN
20:14:57   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:14:57   3  	  model_name	      => '&model_name',
20:14:57   4  	  mining_function     => dbms_data_mining.classification,
20:14:57   5  	  data_table_name     => 'svmc_build_prep',
20:14:57   6  	  case_id_column_name => '&case_id',
20:14:57   7  	  target_column_name  => '&target',
20:14:57   8  	  settings_table_name => 'svmc_settings');
20:14:57   9  END;
20:14:57  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:02.71
20:15:00 SQL> 
20:15:00 SQL> -----------------------------------------------------------------------
20:15:00 SQL> --			       APPLY/score THE MODEL
20:15:00 SQL> -----------------------------------------------------------------------
20:15:00 SQL> 
20:15:00 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:15:00 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:15:00   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:15:00   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:15:00 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:15:00   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:15:00   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:15:00 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:15:00   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:15:00   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:15:00 SQL> -----------------------
20:15:00 SQL> -- PREPARE SCORING DATA
20:15:00 SQL> --
20:15:00 SQL> -- If the data for model creation has been prepared, then the data
20:15:00 SQL> -- to be scored using the model must be prepared in the same manner
20:15:00 SQL> -- in order to obtain meaningful results.
20:15:00 SQL> --
20:15:00 SQL> -- 1. Missing Value treatment for all Predictors and
20:15:00 SQL> -- 2. Normalization
20:15:00 SQL> -- No outlier treatment will be performed during test and apply. The
20:15:00 SQL> -- normalization step is sufficient, since the normalization parameters
20:15:00 SQL> -- already capture the effects of outlier treatment done with build data.
20:15:00 SQL> --
20:15:00 SQL> BEGIN
20:15:00   2  	-- Xform Test data to replace missing values
20:15:00   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:15:00   4  	  miss_table_name => 'svmc_miss_num',
20:15:00   5  	  data_table_name => '&scoretable',
20:15:00   6  	  xform_view_name => 'xformed_apply_miss_num');
20:15:00   7  
20:15:00   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:15:00   9  	  miss_table_name => 'svmc_miss_cat',
20:15:00  10  	  data_table_name => '&scoretable',
20:15:00  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:15:00  12  
20:15:00  13  	-- Normalize the data to be scored
20:15:00  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:15:00  15  	  norm_table_name => 'svmc_norm',
20:15:00  16  	  data_table_name => '&scoretable',
20:15:00  17  	  xform_view_name => 'svmc_apply_prep');
20:15:00  18  END;
20:15:00  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.18
20:15:00 SQL> 
20:15:00 SQL> -- Maybe I already collected a score for this prdate.
20:15:00 SQL> -- DELETE it if I did:
20:15:00 SQL> DELETE svm62scores
20:15:00   2  WHERE score > 0
20:15:00   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:15:00   4  -- I need to supply the target attribute name:
20:15:00   5  AND targ = '&1'
20:15:00   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gatt'

0 rows deleted.

Elapsed: 00:00:00.01
20:15:00 SQL> 
20:15:00 SQL> -- We do a drumroll here:
20:15:00 SQL> 
20:15:00 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:15:00   2  SELECT
20:15:00   3  prdate
20:15:00   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:15:00   5  ,sysdate
20:15:00   6  ,SUBSTR(prdate,1,7)pair
20:15:00   7  ,SUBSTR(prdate,-19)ydate
20:15:00   8  ,'&1'
20:15:00   9  FROM svmc_apply_prep
20:15:00  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gatt'

1 row created.

Elapsed: 00:00:00.05
20:15:00 SQL> @score1_5min.sql	      2010-11-12 05:10:01 aud_usd
20:15:00 SQL> --
20:15:00 SQL> -- score1_5min.sql
20:15:00 SQL> --
20:15:00 SQL> 
20:15:00 SQL> -- Demo:
20:15:00 SQL> -- @score1_5min.sql 2010-12-31 20:45:01 aud_usd
20:15:00 SQL> 
20:15:00 SQL> CREATE OR REPLACE VIEW sme AS
20:15:00   2  SELECT
20:15:00   3  prdate
20:15:00   4  ,NULL gatt
20:15:00   5  ,g00
20:15:00   6  ,g01
20:15:00   7  ,g02
20:15:00   8  ,g03
20:15:00   9  ,g04
20:15:00  10  ,g05
20:15:00  11  ,g06
20:15:00  12  ,g07
20:15:00  13  ,g08
20:15:00  14  ,g09
20:15:00  15  ,g10
20:15:00  16  ,g11
20:15:00  17  ,g12
20:15:00  18  ,g13
20:15:00  19  ,g14
20:15:00  20  ,g15
20:15:00  21  ,g16
20:15:00  22  ,g17
20:15:00  23  ,g18
20:15:00  24  ,g19
20:15:00  25  ,g20
20:15:00  26  ,g21
20:15:00  27  ,g22
20:15:00  28  ,g23
20:15:00  29  ,g24
20:15:00  30  ,g25
20:15:00  31  ,g26
20:15:00  32  ,g27
20:15:00  33  ,g28
20:15:00  34  ,g29
20:15:00  35  ,g30
20:15:00  36  ,g31
20:15:00  37  ,g32
20:15:00  38  ,g33
20:15:00  39  ,g34
20:15:00  40  ,g35
20:15:00  41  ,g36
20:15:00  42  ,g37
20:15:00  43  ,g38
20:15:00  44  ,g39
20:15:00  45  ,g40
20:15:00  46  ,g41
20:15:00  47  FROM modsrc
20:15:00  48  WHERE ydate = '&1'||' '||'&2'
20:15:00  49  AND pair = '&3'
20:15:00  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-11-12'||' '||'05:10:01'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:15:00 SQL> 
20:15:00 SQL> -- rpt
20:15:00 SQL> -- We should see just 1 row:
20:15:00 SQL> 
20:15:00 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.01
20:15:00 SQL> 
20:15:00 SQL> -- Build the model:
20:15:00 SQL> CREATE OR REPLACE VIEW bme AS
20:15:00   2  SELECT
20:15:00   3  prdate
20:15:00   4  ,gatt
20:15:00   5  ,g00
20:15:00   6  ,g01
20:15:00   7  ,g02
20:15:00   8  ,g03
20:15:00   9  ,g04
20:15:00  10  ,g05
20:15:00  11  ,g06
20:15:00  12  ,g07
20:15:00  13  ,g08
20:15:00  14  ,g09
20:15:00  15  ,g10
20:15:00  16  ,g11
20:15:00  17  ,g12
20:15:00  18  ,g13
20:15:00  19  ,g14
20:15:00  20  ,g15
20:15:00  21  ,g16
20:15:00  22  ,g17
20:15:00  23  ,g18
20:15:00  24  ,g19
20:15:00  25  ,g20
20:15:00  26  ,g21
20:15:00  27  ,g22
20:15:00  28  ,g23
20:15:00  29  ,g24
20:15:00  30  ,g25
20:15:00  31  ,g26
20:15:00  32  ,g27
20:15:00  33  ,g28
20:15:00  34  ,g29
20:15:00  35  ,g30
20:15:00  36  ,g31
20:15:00  37  ,g32
20:15:00  38  ,g33
20:15:00  39  ,g34
20:15:00  40  ,g35
20:15:00  41  ,g36
20:15:00  42  ,g37
20:15:00  43  ,g38
20:15:00  44  ,g39
20:15:00  45  ,g40
20:15:00  46  ,g41
20:15:00  47  FROM modsrc
20:15:00  48  WHERE gatt IN('nup','up')
20:15:00  49  -- Use only rows which are older than 1 day:
20:15:00  50  AND 1+ydate < '&1'||' '||'&2'
20:15:00  51  AND pair = '&3'
20:15:00  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-11-12'||' '||'05:10:01'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:15:00 SQL> 
20:15:00 SQL> -- rpt
20:15:00 SQL> 
20:15:00 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt;

GAT COUNT(PRDATE)
--- -------------
nup	     4604
up	     3051

Elapsed: 00:00:00.03
20:15:00 SQL> 
20:15:00 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-11-11 05:05:01

Elapsed: 00:00:00.01
20:15:00 SQL> 
20:15:00 SQL> -- Now build model from bme and score sme
20:15:00 SQL> @score1.sql gatt
20:15:00 SQL> --
20:15:00 SQL> -- score1.sql
20:15:00 SQL> --
20:15:00 SQL> 
20:15:00 SQL> -- I use this script to send 5 params to score.sql
20:15:00 SQL> -- which does the heavy lifting of creating an SVM model.
20:15:00 SQL> -- Then at the very end of this script I use the model
20:15:00 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:15:00 SQL> 
20:15:00 SQL> -- I call this script from 2 other scripts:
20:15:00 SQL> -- score1_5min.sql
20:15:00 SQL> -- score1_5min_gattn.sql
20:15:00 SQL> 
20:15:00 SQL> -- The 1st param is the name of the target attribute.
20:15:00 SQL> -- I like to call my target attributes either gatt or gattn.
20:15:00 SQL> 
20:15:00 SQL> -- Demo:
20:15:00 SQL> -- @score1.sql 'gatt'
20:15:00 SQL> -- @score1.sql 'gattn'
20:15:00 SQL> 
20:15:00 SQL> -- Now, I fill up svmc_apply_prep.
20:15:00 SQL> -- I use same model_name used in score.sql
20:15:00 SQL> DEFINE model_name = 'svmfx101'
20:15:00 SQL> DEFINE bldtable	= 'bme'
20:15:00 SQL> DEFINE scoretable = 'sme'
20:15:00 SQL> DEFINE case_id	= 'prdate'
20:15:00 SQL> -- Demo:
20:15:00 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:15:00 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:15:00 SQL> --
20:15:00 SQL> -- score.sql
20:15:00 SQL> --
20:15:00 SQL> 
20:15:00 SQL> -- usage: score.sql
20:15:00 SQL> 
20:15:00 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:15:00 SQL> 
20:15:00 SQL> -- DEFINE target	   = 'gatt'
20:15:00 SQL> -- DEFINE model_name = 'svmfx101'
20:15:00 SQL> -- DEFINE bldtable   = 'bme'
20:15:00 SQL> -- DEFINE scoretable = 'sme'
20:15:00 SQL> -- DEFINE case_id    = 'prdate'
20:15:00 SQL> 
20:15:00 SQL> DEFINE target	= '&1'
20:15:00 SQL> DEFINE model_name = '&2'
20:15:00 SQL> DEFINE bldtable	= '&3'
20:15:00 SQL> DEFINE scoretable = '&4'
20:15:00 SQL> DEFINE case_id	= '&5'
20:15:00 SQL> 
20:15:00 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:15:00 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:15:00 SQL> 
20:15:00 SQL> -- Builds an SVM model using pl/sql.
20:15:00 SQL> 
20:15:00 SQL> -----------------------------------------------------------------------
20:15:00 SQL> --			    BUILD THE MODEL
20:15:00 SQL> -----------------------------------------------------------------------
20:15:00 SQL> 
20:15:00 SQL> -- Cleanup old build data preparation objects for repeat runs
20:15:00 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.00
20:15:00 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:15:00 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:15:00 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.00
20:15:00 SQL> 
20:15:00 SQL> 
20:15:00 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:15:00 SQL> --
20:15:00 SQL> -- DROP	TABLE svmc_settings ;
20:15:00 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:15:00 SQL> -- DELETE svmc_settings;
20:15:00 SQL> 
20:15:00 SQL> -- The default classification algorithm is Naive Bayes. So override
20:15:00 SQL> -- this choice to SVM using a settings table.
20:15:00 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:15:00 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:15:00 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:15:00 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:15:00 SQL> -- models.
20:15:00 SQL> --
20:15:00 SQL> 
20:15:00 SQL> -- Do this once and then comment it out.
20:15:00 SQL> -- That makes script go faster.
20:15:00 SQL> -- BEGIN
20:15:00 SQL> -- -- Populate settings table
20:15:00 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:15:00 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:15:00 SQL> --
20:15:00 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:15:00 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:15:00 SQL> --
20:15:00 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:15:00 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:15:00 SQL> --   COMMIT;
20:15:00 SQL> -- END;
20:15:00 SQL> -- /
20:15:00 SQL> 
20:15:00 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:15:00 SQL> 
20:15:00 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:15:00   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:15:00   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
20:15:00 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:15:00   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:15:00   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.12
20:15:00 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:15:00   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:15:00   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:15:00 SQL> 
20:15:00 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:15:00   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:15:00   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:15:00 SQL> 
20:15:00 SQL> --------------------------------
20:15:00 SQL> -- PREPARE BUILD (TRAINING) DATA
20:15:00 SQL> --
20:15:00 SQL> 
20:15:00 SQL> -- 1. Missing Value treatment for all Predictors and
20:15:00 SQL> -- 2. Outlier Treatment and
20:15:00 SQL> -- 3. Normalization are performed below.
20:15:00 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:15:00 SQL> --    normalized here.
20:15:00 SQL> 
20:15:00 SQL> BEGIN
20:15:00   2  	-- Perform missing value treatment for all predictors
20:15:00   3  	-- create miss tables
20:15:00   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:15:00   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:15:00   6  
20:15:00   7  	-- populate miss tables
20:15:00   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:15:00   9  	  miss_table_name => 'svmc_miss_num',
20:15:00  10  	  data_table_name => '&bldtable',
20:15:00  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:15:00  12  
20:15:00  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:15:00  14  	  miss_table_name => 'svmc_miss_cat',
20:15:00  15  	  data_table_name => '&bldtable',
20:15:00  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:15:00  17  
20:15:00  18  	-- xform input data to replace missing values
20:15:00  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:15:00  20  	  miss_table_name => 'svmc_miss_num',
20:15:00  21  	  data_table_name => '&bldtable',
20:15:00  22  	  xform_view_name => 'xformed_build_miss_num');
20:15:00  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:15:00  24  	  miss_table_name => 'svmc_miss_cat',
20:15:00  25  	  data_table_name => '&bldtable',
20:15:00  26  	  xform_view_name => 'xformed_build_miss_cat');
20:15:00  27  
20:15:00  28  	-- Perform outlier treatment.
20:15:00  29  	-- create clip table
20:15:00  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:15:00  31  
20:15:00  32  	-- populate clip table
20:15:00  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:15:00  34  	  clip_table_name => 'svmc_clip',
20:15:00  35  	  data_table_name => '&bldtable',
20:15:00  36  	  tail_frac	  => 0.025,
20:15:00  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:15:00  38  
20:15:00  39  	-- xform input data to winsorized data
20:15:00  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:15:00  41  	  clip_table_name => 'svmc_clip',
20:15:00  42  	  data_table_name => '&bldtable',
20:15:00  43  	  xform_view_name => 'svmc_winsor');
20:15:00  44  
20:15:00  45  	-- create normalization table
20:15:00  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:15:00  47  
20:15:00  48  	-- populate normalization table based on winsorized data
20:15:00  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:15:00  50  	  norm_table_name => 'svmc_norm',
20:15:00  51  	  data_table_name => 'svmc_winsor',
20:15:00  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:15:00  53  
20:15:00  54  	-- normalize the original data
20:15:00  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:15:00  56  	  norm_table_name => 'svmc_norm',
20:15:00  57  	  data_table_name => '&bldtable',
20:15:00  58  	  xform_view_name => 'svmc_build_prep');
20:15:00  59  END;
20:15:00  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.43
20:15:02 SQL> 
20:15:02 SQL> ---------------------
20:15:02 SQL> -- CREATE A NEW MODEL
20:15:02 SQL> --
20:15:02 SQL> -- Cleanup old model with the same name for repeat runs
20:15:02 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:15:02   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:15:02   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.91
20:15:03 SQL> 
20:15:03 SQL> -- Build a new SVM Model
20:15:03 SQL> BEGIN
20:15:03   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:15:03   3  	  model_name	      => '&model_name',
20:15:03   4  	  mining_function     => dbms_data_mining.classification,
20:15:03   5  	  data_table_name     => 'svmc_build_prep',
20:15:03   6  	  case_id_column_name => '&case_id',
20:15:03   7  	  target_column_name  => '&target',
20:15:03   8  	  settings_table_name => 'svmc_settings');
20:15:03   9  END;
20:15:03  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:02.95
20:15:06 SQL> 
20:15:06 SQL> -----------------------------------------------------------------------
20:15:06 SQL> --			       APPLY/score THE MODEL
20:15:06 SQL> -----------------------------------------------------------------------
20:15:06 SQL> 
20:15:06 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:15:06 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:15:06   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:15:06   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:15:06 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:15:06   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:15:06   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:15:06 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:15:06   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:15:06   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:15:06 SQL> -----------------------
20:15:06 SQL> -- PREPARE SCORING DATA
20:15:06 SQL> --
20:15:06 SQL> -- If the data for model creation has been prepared, then the data
20:15:06 SQL> -- to be scored using the model must be prepared in the same manner
20:15:06 SQL> -- in order to obtain meaningful results.
20:15:06 SQL> --
20:15:06 SQL> -- 1. Missing Value treatment for all Predictors and
20:15:06 SQL> -- 2. Normalization
20:15:06 SQL> -- No outlier treatment will be performed during test and apply. The
20:15:06 SQL> -- normalization step is sufficient, since the normalization parameters
20:15:06 SQL> -- already capture the effects of outlier treatment done with build data.
20:15:06 SQL> --
20:15:06 SQL> BEGIN
20:15:06   2  	-- Xform Test data to replace missing values
20:15:06   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:15:06   4  	  miss_table_name => 'svmc_miss_num',
20:15:06   5  	  data_table_name => '&scoretable',
20:15:06   6  	  xform_view_name => 'xformed_apply_miss_num');
20:15:06   7  
20:15:06   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:15:06   9  	  miss_table_name => 'svmc_miss_cat',
20:15:06  10  	  data_table_name => '&scoretable',
20:15:06  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:15:06  12  
20:15:06  13  	-- Normalize the data to be scored
20:15:06  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:15:06  15  	  norm_table_name => 'svmc_norm',
20:15:06  16  	  data_table_name => '&scoretable',
20:15:06  17  	  xform_view_name => 'svmc_apply_prep');
20:15:06  18  END;
20:15:06  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.19
20:15:06 SQL> 
20:15:06 SQL> -- Maybe I already collected a score for this prdate.
20:15:06 SQL> -- DELETE it if I did:
20:15:06 SQL> DELETE svm62scores
20:15:06   2  WHERE score > 0
20:15:06   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:15:06   4  -- I need to supply the target attribute name:
20:15:06   5  AND targ = '&1'
20:15:06   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gatt'

0 rows deleted.

Elapsed: 00:00:00.01
20:15:06 SQL> 
20:15:06 SQL> -- We do a drumroll here:
20:15:06 SQL> 
20:15:06 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:15:06   2  SELECT
20:15:06   3  prdate
20:15:06   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:15:06   5  ,sysdate
20:15:06   6  ,SUBSTR(prdate,1,7)pair
20:15:06   7  ,SUBSTR(prdate,-19)ydate
20:15:06   8  ,'&1'
20:15:06   9  FROM svmc_apply_prep
20:15:06  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gatt'

1 row created.

Elapsed: 00:00:00.05
20:15:06 SQL> @score1_5min_gattn.sql	2010-12-05 23:20:00 aud_usd
20:15:06 SQL> --
20:15:06 SQL> -- score1_5min_gattn.sql
20:15:06 SQL> --
20:15:06 SQL> 
20:15:06 SQL> -- Demo:
20:15:06 SQL> -- @score1_5min_gattn.sql 2010-12-31 20:45:01 aud_usd
20:15:06 SQL> 
20:15:06 SQL> CREATE OR REPLACE VIEW sme AS
20:15:06   2  SELECT
20:15:06   3  prdate
20:15:06   4  ,NULL gattn
20:15:06   5  ,g00
20:15:06   6  ,g01
20:15:06   7  ,g02
20:15:06   8  ,g03
20:15:06   9  ,g04
20:15:06  10  ,g05
20:15:06  11  ,g06
20:15:06  12  ,g07
20:15:06  13  ,g08
20:15:06  14  ,g09
20:15:06  15  ,g10
20:15:06  16  ,g11
20:15:06  17  ,g12
20:15:06  18  ,g13
20:15:06  19  ,g14
20:15:06  20  ,g15
20:15:06  21  ,g16
20:15:06  22  ,g17
20:15:06  23  ,g18
20:15:06  24  ,g19
20:15:06  25  ,g20
20:15:06  26  ,g21
20:15:06  27  ,g22
20:15:06  28  ,g23
20:15:06  29  ,g24
20:15:06  30  ,g25
20:15:06  31  ,g26
20:15:06  32  ,g27
20:15:06  33  ,g28
20:15:06  34  ,g29
20:15:06  35  ,g30
20:15:06  36  ,g31
20:15:06  37  ,g32
20:15:06  38  ,g33
20:15:06  39  ,g34
20:15:06  40  ,g35
20:15:06  41  ,g36
20:15:06  42  ,g37
20:15:06  43  ,g38
20:15:06  44  ,g39
20:15:06  45  ,g40
20:15:06  46  ,g41
20:15:06  47  FROM modsrc
20:15:06  48  WHERE ydate = '&1'||' '||'&2'
20:15:06  49  AND pair = '&3'
20:15:06  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-12-05'||' '||'23:20:00'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:15:06 SQL> 
20:15:06 SQL> -- rpt
20:15:06 SQL> -- We should see just 1 row:
20:15:06 SQL> 
20:15:06 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.01
20:15:06 SQL> 
20:15:06 SQL> -- Build the model:
20:15:06 SQL> CREATE OR REPLACE VIEW bme AS
20:15:06   2  SELECT
20:15:06   3  prdate
20:15:06   4  ,gattn
20:15:06   5  ,g00
20:15:06   6  ,g01
20:15:06   7  ,g02
20:15:06   8  ,g03
20:15:06   9  ,g04
20:15:06  10  ,g05
20:15:06  11  ,g06
20:15:06  12  ,g07
20:15:06  13  ,g08
20:15:06  14  ,g09
20:15:06  15  ,g10
20:15:06  16  ,g11
20:15:06  17  ,g12
20:15:06  18  ,g13
20:15:06  19  ,g14
20:15:06  20  ,g15
20:15:06  21  ,g16
20:15:06  22  ,g17
20:15:06  23  ,g18
20:15:06  24  ,g19
20:15:06  25  ,g20
20:15:06  26  ,g21
20:15:06  27  ,g22
20:15:06  28  ,g23
20:15:06  29  ,g24
20:15:06  30  ,g25
20:15:06  31  ,g26
20:15:06  32  ,g27
20:15:06  33  ,g28
20:15:06  34  ,g29
20:15:06  35  ,g30
20:15:06  36  ,g31
20:15:06  37  ,g32
20:15:06  38  ,g33
20:15:06  39  ,g34
20:15:06  40  ,g35
20:15:06  41  ,g36
20:15:06  42  ,g37
20:15:06  43  ,g38
20:15:06  44  ,g39
20:15:06  45  ,g40
20:15:06  46  ,g41
20:15:06  47  FROM modsrc
20:15:06  48  WHERE gattn IN('nup','up')
20:15:06  49  -- Use only rows which are older than 1 day:
20:15:06  50  AND 1+ydate < '&1'||' '||'&2'
20:15:06  51  AND pair = '&3'
20:15:06  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-12-05'||' '||'23:20:00'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.05
20:15:06 SQL> 
20:15:06 SQL> -- rpt
20:15:06 SQL> 
20:15:06 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	     7929
up	     4545

Elapsed: 00:00:00.02
20:15:06 SQL> 
20:15:06 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-12-03 21:55:00

Elapsed: 00:00:00.01
20:15:06 SQL> 
20:15:06 SQL> -- Now build model from bme and score sme
20:15:06 SQL> @score1.sql gattn
20:15:06 SQL> --
20:15:06 SQL> -- score1.sql
20:15:06 SQL> --
20:15:06 SQL> 
20:15:06 SQL> -- I use this script to send 5 params to score.sql
20:15:06 SQL> -- which does the heavy lifting of creating an SVM model.
20:15:06 SQL> -- Then at the very end of this script I use the model
20:15:06 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:15:06 SQL> 
20:15:06 SQL> -- I call this script from 2 other scripts:
20:15:06 SQL> -- score1_5min.sql
20:15:06 SQL> -- score1_5min_gattn.sql
20:15:06 SQL> 
20:15:06 SQL> -- The 1st param is the name of the target attribute.
20:15:06 SQL> -- I like to call my target attributes either gatt or gattn.
20:15:06 SQL> 
20:15:06 SQL> -- Demo:
20:15:06 SQL> -- @score1.sql 'gatt'
20:15:06 SQL> -- @score1.sql 'gattn'
20:15:06 SQL> 
20:15:06 SQL> -- Now, I fill up svmc_apply_prep.
20:15:06 SQL> -- I use same model_name used in score.sql
20:15:06 SQL> DEFINE model_name = 'svmfx101'
20:15:06 SQL> DEFINE bldtable	= 'bme'
20:15:06 SQL> DEFINE scoretable = 'sme'
20:15:06 SQL> DEFINE case_id	= 'prdate'
20:15:06 SQL> -- Demo:
20:15:06 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:15:06 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:15:06 SQL> --
20:15:06 SQL> -- score.sql
20:15:06 SQL> --
20:15:06 SQL> 
20:15:06 SQL> -- usage: score.sql
20:15:06 SQL> 
20:15:06 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:15:06 SQL> 
20:15:06 SQL> -- DEFINE target	   = 'gatt'
20:15:06 SQL> -- DEFINE model_name = 'svmfx101'
20:15:06 SQL> -- DEFINE bldtable   = 'bme'
20:15:06 SQL> -- DEFINE scoretable = 'sme'
20:15:06 SQL> -- DEFINE case_id    = 'prdate'
20:15:06 SQL> 
20:15:06 SQL> DEFINE target	= '&1'
20:15:06 SQL> DEFINE model_name = '&2'
20:15:06 SQL> DEFINE bldtable	= '&3'
20:15:06 SQL> DEFINE scoretable = '&4'
20:15:06 SQL> DEFINE case_id	= '&5'
20:15:06 SQL> 
20:15:06 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:15:06 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:15:06 SQL> 
20:15:06 SQL> -- Builds an SVM model using pl/sql.
20:15:06 SQL> 
20:15:06 SQL> -----------------------------------------------------------------------
20:15:06 SQL> --			    BUILD THE MODEL
20:15:06 SQL> -----------------------------------------------------------------------
20:15:06 SQL> 
20:15:06 SQL> -- Cleanup old build data preparation objects for repeat runs
20:15:06 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.00
20:15:06 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:15:06 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:15:06 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.00
20:15:06 SQL> 
20:15:06 SQL> 
20:15:06 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:15:06 SQL> --
20:15:06 SQL> -- DROP	TABLE svmc_settings ;
20:15:06 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:15:06 SQL> -- DELETE svmc_settings;
20:15:06 SQL> 
20:15:06 SQL> -- The default classification algorithm is Naive Bayes. So override
20:15:06 SQL> -- this choice to SVM using a settings table.
20:15:06 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:15:06 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:15:06 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:15:06 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:15:06 SQL> -- models.
20:15:06 SQL> --
20:15:06 SQL> 
20:15:06 SQL> -- Do this once and then comment it out.
20:15:06 SQL> -- That makes script go faster.
20:15:06 SQL> -- BEGIN
20:15:06 SQL> -- -- Populate settings table
20:15:06 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:15:06 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:15:06 SQL> --
20:15:06 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:15:06 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:15:06 SQL> --
20:15:06 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:15:06 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:15:06 SQL> --   COMMIT;
20:15:06 SQL> -- END;
20:15:06 SQL> -- /
20:15:06 SQL> 
20:15:06 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:15:06 SQL> 
20:15:06 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:15:06   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:15:06   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
20:15:06 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:15:06   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:15:06   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:15:06 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:15:06   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:15:06   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:15:06 SQL> 
20:15:06 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:15:06   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:15:06   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:15:06 SQL> 
20:15:06 SQL> --------------------------------
20:15:06 SQL> -- PREPARE BUILD (TRAINING) DATA
20:15:06 SQL> --
20:15:06 SQL> 
20:15:06 SQL> -- 1. Missing Value treatment for all Predictors and
20:15:06 SQL> -- 2. Outlier Treatment and
20:15:06 SQL> -- 3. Normalization are performed below.
20:15:06 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:15:06 SQL> --    normalized here.
20:15:06 SQL> 
20:15:06 SQL> BEGIN
20:15:06   2  	-- Perform missing value treatment for all predictors
20:15:06   3  	-- create miss tables
20:15:06   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:15:06   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:15:06   6  
20:15:06   7  	-- populate miss tables
20:15:06   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:15:06   9  	  miss_table_name => 'svmc_miss_num',
20:15:06  10  	  data_table_name => '&bldtable',
20:15:06  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:15:06  12  
20:15:06  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:15:06  14  	  miss_table_name => 'svmc_miss_cat',
20:15:06  15  	  data_table_name => '&bldtable',
20:15:06  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:15:06  17  
20:15:06  18  	-- xform input data to replace missing values
20:15:06  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:15:06  20  	  miss_table_name => 'svmc_miss_num',
20:15:06  21  	  data_table_name => '&bldtable',
20:15:06  22  	  xform_view_name => 'xformed_build_miss_num');
20:15:06  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:15:06  24  	  miss_table_name => 'svmc_miss_cat',
20:15:06  25  	  data_table_name => '&bldtable',
20:15:06  26  	  xform_view_name => 'xformed_build_miss_cat');
20:15:06  27  
20:15:06  28  	-- Perform outlier treatment.
20:15:06  29  	-- create clip table
20:15:06  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:15:06  31  
20:15:06  32  	-- populate clip table
20:15:06  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:15:06  34  	  clip_table_name => 'svmc_clip',
20:15:06  35  	  data_table_name => '&bldtable',
20:15:06  36  	  tail_frac	  => 0.025,
20:15:06  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:15:06  38  
20:15:06  39  	-- xform input data to winsorized data
20:15:06  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:15:06  41  	  clip_table_name => 'svmc_clip',
20:15:06  42  	  data_table_name => '&bldtable',
20:15:06  43  	  xform_view_name => 'svmc_winsor');
20:15:06  44  
20:15:06  45  	-- create normalization table
20:15:06  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:15:06  47  
20:15:06  48  	-- populate normalization table based on winsorized data
20:15:06  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:15:06  50  	  norm_table_name => 'svmc_norm',
20:15:06  51  	  data_table_name => 'svmc_winsor',
20:15:06  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:15:06  53  
20:15:06  54  	-- normalize the original data
20:15:06  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:15:06  56  	  norm_table_name => 'svmc_norm',
20:15:06  57  	  data_table_name => '&bldtable',
20:15:06  58  	  xform_view_name => 'svmc_build_prep');
20:15:06  59  END;
20:15:06  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.84
20:15:08 SQL> 
20:15:08 SQL> ---------------------
20:15:08 SQL> -- CREATE A NEW MODEL
20:15:08 SQL> --
20:15:08 SQL> -- Cleanup old model with the same name for repeat runs
20:15:08 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:15:08   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:15:08   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.91
20:15:09 SQL> 
20:15:09 SQL> -- Build a new SVM Model
20:15:09 SQL> BEGIN
20:15:09   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:15:09   3  	  model_name	      => '&model_name',
20:15:09   4  	  mining_function     => dbms_data_mining.classification,
20:15:09   5  	  data_table_name     => 'svmc_build_prep',
20:15:09   6  	  case_id_column_name => '&case_id',
20:15:09   7  	  target_column_name  => '&target',
20:15:09   8  	  settings_table_name => 'svmc_settings');
20:15:09   9  END;
20:15:09  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:04.36
20:15:13 SQL> 
20:15:13 SQL> -----------------------------------------------------------------------
20:15:13 SQL> --			       APPLY/score THE MODEL
20:15:13 SQL> -----------------------------------------------------------------------
20:15:13 SQL> 
20:15:13 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:15:13 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:15:13   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:15:13   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:15:13 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:15:13   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:15:13   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:15:13 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:15:13   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:15:13   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:15:13 SQL> -----------------------
20:15:13 SQL> -- PREPARE SCORING DATA
20:15:13 SQL> --
20:15:13 SQL> -- If the data for model creation has been prepared, then the data
20:15:13 SQL> -- to be scored using the model must be prepared in the same manner
20:15:13 SQL> -- in order to obtain meaningful results.
20:15:13 SQL> --
20:15:13 SQL> -- 1. Missing Value treatment for all Predictors and
20:15:13 SQL> -- 2. Normalization
20:15:13 SQL> -- No outlier treatment will be performed during test and apply. The
20:15:13 SQL> -- normalization step is sufficient, since the normalization parameters
20:15:13 SQL> -- already capture the effects of outlier treatment done with build data.
20:15:13 SQL> --
20:15:13 SQL> BEGIN
20:15:13   2  	-- Xform Test data to replace missing values
20:15:13   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:15:13   4  	  miss_table_name => 'svmc_miss_num',
20:15:13   5  	  data_table_name => '&scoretable',
20:15:13   6  	  xform_view_name => 'xformed_apply_miss_num');
20:15:13   7  
20:15:13   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:15:13   9  	  miss_table_name => 'svmc_miss_cat',
20:15:13  10  	  data_table_name => '&scoretable',
20:15:13  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:15:13  12  
20:15:13  13  	-- Normalize the data to be scored
20:15:13  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:15:13  15  	  norm_table_name => 'svmc_norm',
20:15:13  16  	  data_table_name => '&scoretable',
20:15:13  17  	  xform_view_name => 'svmc_apply_prep');
20:15:13  18  END;
20:15:13  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.17
20:15:14 SQL> 
20:15:14 SQL> -- Maybe I already collected a score for this prdate.
20:15:14 SQL> -- DELETE it if I did:
20:15:14 SQL> DELETE svm62scores
20:15:14   2  WHERE score > 0
20:15:14   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:15:14   4  -- I need to supply the target attribute name:
20:15:14   5  AND targ = '&1'
20:15:14   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gattn'

0 rows deleted.

Elapsed: 00:00:00.02
20:15:14 SQL> 
20:15:14 SQL> -- We do a drumroll here:
20:15:14 SQL> 
20:15:14 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:15:14   2  SELECT
20:15:14   3  prdate
20:15:14   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:15:14   5  ,sysdate
20:15:14   6  ,SUBSTR(prdate,1,7)pair
20:15:14   7  ,SUBSTR(prdate,-19)ydate
20:15:14   8  ,'&1'
20:15:14   9  FROM svmc_apply_prep
20:15:14  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gattn'

1 row created.

Elapsed: 00:00:00.05
20:15:14 SQL> @score1_5min_gattn.sql	2010-11-09 18:20:01 aud_usd
20:15:14 SQL> --
20:15:14 SQL> -- score1_5min_gattn.sql
20:15:14 SQL> --
20:15:14 SQL> 
20:15:14 SQL> -- Demo:
20:15:14 SQL> -- @score1_5min_gattn.sql 2010-12-31 20:45:01 aud_usd
20:15:14 SQL> 
20:15:14 SQL> CREATE OR REPLACE VIEW sme AS
20:15:14   2  SELECT
20:15:14   3  prdate
20:15:14   4  ,NULL gattn
20:15:14   5  ,g00
20:15:14   6  ,g01
20:15:14   7  ,g02
20:15:14   8  ,g03
20:15:14   9  ,g04
20:15:14  10  ,g05
20:15:14  11  ,g06
20:15:14  12  ,g07
20:15:14  13  ,g08
20:15:14  14  ,g09
20:15:14  15  ,g10
20:15:14  16  ,g11
20:15:14  17  ,g12
20:15:14  18  ,g13
20:15:14  19  ,g14
20:15:14  20  ,g15
20:15:14  21  ,g16
20:15:14  22  ,g17
20:15:14  23  ,g18
20:15:14  24  ,g19
20:15:14  25  ,g20
20:15:14  26  ,g21
20:15:14  27  ,g22
20:15:14  28  ,g23
20:15:14  29  ,g24
20:15:14  30  ,g25
20:15:14  31  ,g26
20:15:14  32  ,g27
20:15:14  33  ,g28
20:15:14  34  ,g29
20:15:14  35  ,g30
20:15:14  36  ,g31
20:15:14  37  ,g32
20:15:14  38  ,g33
20:15:14  39  ,g34
20:15:14  40  ,g35
20:15:14  41  ,g36
20:15:14  42  ,g37
20:15:14  43  ,g38
20:15:14  44  ,g39
20:15:14  45  ,g40
20:15:14  46  ,g41
20:15:14  47  FROM modsrc
20:15:14  48  WHERE ydate = '&1'||' '||'&2'
20:15:14  49  AND pair = '&3'
20:15:14  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-11-09'||' '||'18:20:01'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:15:14 SQL> 
20:15:14 SQL> -- rpt
20:15:14 SQL> -- We should see just 1 row:
20:15:14 SQL> 
20:15:14 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.02
20:15:14 SQL> 
20:15:14 SQL> -- Build the model:
20:15:14 SQL> CREATE OR REPLACE VIEW bme AS
20:15:14   2  SELECT
20:15:14   3  prdate
20:15:14   4  ,gattn
20:15:14   5  ,g00
20:15:14   6  ,g01
20:15:14   7  ,g02
20:15:14   8  ,g03
20:15:14   9  ,g04
20:15:14  10  ,g05
20:15:14  11  ,g06
20:15:14  12  ,g07
20:15:14  13  ,g08
20:15:14  14  ,g09
20:15:14  15  ,g10
20:15:14  16  ,g11
20:15:14  17  ,g12
20:15:14  18  ,g13
20:15:14  19  ,g14
20:15:14  20  ,g15
20:15:14  21  ,g16
20:15:14  22  ,g17
20:15:14  23  ,g18
20:15:14  24  ,g19
20:15:14  25  ,g20
20:15:14  26  ,g21
20:15:14  27  ,g22
20:15:14  28  ,g23
20:15:14  29  ,g24
20:15:14  30  ,g25
20:15:14  31  ,g26
20:15:14  32  ,g27
20:15:14  33  ,g28
20:15:14  34  ,g29
20:15:14  35  ,g30
20:15:14  36  ,g31
20:15:14  37  ,g32
20:15:14  38  ,g33
20:15:14  39  ,g34
20:15:14  40  ,g35
20:15:14  41  ,g36
20:15:14  42  ,g37
20:15:14  43  ,g38
20:15:14  44  ,g39
20:15:14  45  ,g40
20:15:14  46  ,g41
20:15:14  47  FROM modsrc
20:15:14  48  WHERE gattn IN('nup','up')
20:15:14  49  -- Use only rows which are older than 1 day:
20:15:14  50  AND 1+ydate < '&1'||' '||'&2'
20:15:14  51  AND pair = '&3'
20:15:14  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-11-09'||' '||'18:20:01'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.03
20:15:14 SQL> 
20:15:14 SQL> -- rpt
20:15:14 SQL> 
20:15:14 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	     4622
up	     2327

Elapsed: 00:00:00.02
20:15:14 SQL> 
20:15:14 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-11-08 18:15:01

Elapsed: 00:00:00.01
20:15:14 SQL> 
20:15:14 SQL> -- Now build model from bme and score sme
20:15:14 SQL> @score1.sql gattn
20:15:14 SQL> --
20:15:14 SQL> -- score1.sql
20:15:14 SQL> --
20:15:14 SQL> 
20:15:14 SQL> -- I use this script to send 5 params to score.sql
20:15:14 SQL> -- which does the heavy lifting of creating an SVM model.
20:15:14 SQL> -- Then at the very end of this script I use the model
20:15:14 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:15:14 SQL> 
20:15:14 SQL> -- I call this script from 2 other scripts:
20:15:14 SQL> -- score1_5min.sql
20:15:14 SQL> -- score1_5min_gattn.sql
20:15:14 SQL> 
20:15:14 SQL> -- The 1st param is the name of the target attribute.
20:15:14 SQL> -- I like to call my target attributes either gatt or gattn.
20:15:14 SQL> 
20:15:14 SQL> -- Demo:
20:15:14 SQL> -- @score1.sql 'gatt'
20:15:14 SQL> -- @score1.sql 'gattn'
20:15:14 SQL> 
20:15:14 SQL> -- Now, I fill up svmc_apply_prep.
20:15:14 SQL> -- I use same model_name used in score.sql
20:15:14 SQL> DEFINE model_name = 'svmfx101'
20:15:14 SQL> DEFINE bldtable	= 'bme'
20:15:14 SQL> DEFINE scoretable = 'sme'
20:15:14 SQL> DEFINE case_id	= 'prdate'
20:15:14 SQL> -- Demo:
20:15:14 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:15:14 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:15:14 SQL> --
20:15:14 SQL> -- score.sql
20:15:14 SQL> --
20:15:14 SQL> 
20:15:14 SQL> -- usage: score.sql
20:15:14 SQL> 
20:15:14 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:15:14 SQL> 
20:15:14 SQL> -- DEFINE target	   = 'gatt'
20:15:14 SQL> -- DEFINE model_name = 'svmfx101'
20:15:14 SQL> -- DEFINE bldtable   = 'bme'
20:15:14 SQL> -- DEFINE scoretable = 'sme'
20:15:14 SQL> -- DEFINE case_id    = 'prdate'
20:15:14 SQL> 
20:15:14 SQL> DEFINE target	= '&1'
20:15:14 SQL> DEFINE model_name = '&2'
20:15:14 SQL> DEFINE bldtable	= '&3'
20:15:14 SQL> DEFINE scoretable = '&4'
20:15:14 SQL> DEFINE case_id	= '&5'
20:15:14 SQL> 
20:15:14 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:15:14 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:15:14 SQL> 
20:15:14 SQL> -- Builds an SVM model using pl/sql.
20:15:14 SQL> 
20:15:14 SQL> -----------------------------------------------------------------------
20:15:14 SQL> --			    BUILD THE MODEL
20:15:14 SQL> -----------------------------------------------------------------------
20:15:14 SQL> 
20:15:14 SQL> -- Cleanup old build data preparation objects for repeat runs
20:15:14 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.00
20:15:14 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:15:14 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:15:14 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.00
20:15:14 SQL> 
20:15:14 SQL> 
20:15:14 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:15:14 SQL> --
20:15:14 SQL> -- DROP	TABLE svmc_settings ;
20:15:14 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:15:14 SQL> -- DELETE svmc_settings;
20:15:14 SQL> 
20:15:14 SQL> -- The default classification algorithm is Naive Bayes. So override
20:15:14 SQL> -- this choice to SVM using a settings table.
20:15:14 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:15:14 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:15:14 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:15:14 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:15:14 SQL> -- models.
20:15:14 SQL> --
20:15:14 SQL> 
20:15:14 SQL> -- Do this once and then comment it out.
20:15:14 SQL> -- That makes script go faster.
20:15:14 SQL> -- BEGIN
20:15:14 SQL> -- -- Populate settings table
20:15:14 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:15:14 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:15:14 SQL> --
20:15:14 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:15:14 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:15:14 SQL> --
20:15:14 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:15:14 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:15:14 SQL> --   COMMIT;
20:15:14 SQL> -- END;
20:15:14 SQL> -- /
20:15:14 SQL> 
20:15:14 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:15:14 SQL> 
20:15:14 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:15:14   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:15:14   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:15:14 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:15:14   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:15:14   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:15:14 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:15:14   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:15:14   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:15:14 SQL> 
20:15:14 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:15:14   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:15:14   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:15:14 SQL> 
20:15:14 SQL> --------------------------------
20:15:14 SQL> -- PREPARE BUILD (TRAINING) DATA
20:15:14 SQL> --
20:15:14 SQL> 
20:15:14 SQL> -- 1. Missing Value treatment for all Predictors and
20:15:14 SQL> -- 2. Outlier Treatment and
20:15:14 SQL> -- 3. Normalization are performed below.
20:15:14 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:15:14 SQL> --    normalized here.
20:15:14 SQL> 
20:15:14 SQL> BEGIN
20:15:14   2  	-- Perform missing value treatment for all predictors
20:15:14   3  	-- create miss tables
20:15:14   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:15:14   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:15:14   6  
20:15:14   7  	-- populate miss tables
20:15:14   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:15:14   9  	  miss_table_name => 'svmc_miss_num',
20:15:14  10  	  data_table_name => '&bldtable',
20:15:14  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:15:14  12  
20:15:14  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:15:14  14  	  miss_table_name => 'svmc_miss_cat',
20:15:14  15  	  data_table_name => '&bldtable',
20:15:14  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:15:14  17  
20:15:14  18  	-- xform input data to replace missing values
20:15:14  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:15:14  20  	  miss_table_name => 'svmc_miss_num',
20:15:14  21  	  data_table_name => '&bldtable',
20:15:14  22  	  xform_view_name => 'xformed_build_miss_num');
20:15:14  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:15:14  24  	  miss_table_name => 'svmc_miss_cat',
20:15:14  25  	  data_table_name => '&bldtable',
20:15:14  26  	  xform_view_name => 'xformed_build_miss_cat');
20:15:14  27  
20:15:14  28  	-- Perform outlier treatment.
20:15:14  29  	-- create clip table
20:15:14  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:15:14  31  
20:15:14  32  	-- populate clip table
20:15:14  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:15:14  34  	  clip_table_name => 'svmc_clip',
20:15:14  35  	  data_table_name => '&bldtable',
20:15:14  36  	  tail_frac	  => 0.025,
20:15:14  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:15:14  38  
20:15:14  39  	-- xform input data to winsorized data
20:15:14  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:15:14  41  	  clip_table_name => 'svmc_clip',
20:15:14  42  	  data_table_name => '&bldtable',
20:15:14  43  	  xform_view_name => 'svmc_winsor');
20:15:14  44  
20:15:14  45  	-- create normalization table
20:15:14  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:15:14  47  
20:15:14  48  	-- populate normalization table based on winsorized data
20:15:14  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:15:14  50  	  norm_table_name => 'svmc_norm',
20:15:14  51  	  data_table_name => 'svmc_winsor',
20:15:14  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:15:14  53  
20:15:14  54  	-- normalize the original data
20:15:14  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:15:14  56  	  norm_table_name => 'svmc_norm',
20:15:14  57  	  data_table_name => '&bldtable',
20:15:14  58  	  xform_view_name => 'svmc_build_prep');
20:15:14  59  END;
20:15:14  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.44
20:15:15 SQL> 
20:15:15 SQL> ---------------------
20:15:15 SQL> -- CREATE A NEW MODEL
20:15:15 SQL> --
20:15:15 SQL> -- Cleanup old model with the same name for repeat runs
20:15:15 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:15:15   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:15:15   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.11
20:15:16 SQL> 
20:15:16 SQL> -- Build a new SVM Model
20:15:16 SQL> BEGIN
20:15:16   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:15:16   3  	  model_name	      => '&model_name',
20:15:16   4  	  mining_function     => dbms_data_mining.classification,
20:15:16   5  	  data_table_name     => 'svmc_build_prep',
20:15:16   6  	  case_id_column_name => '&case_id',
20:15:16   7  	  target_column_name  => '&target',
20:15:16   8  	  settings_table_name => 'svmc_settings');
20:15:16   9  END;
20:15:16  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:03.86
20:15:20 SQL> 
20:15:20 SQL> -----------------------------------------------------------------------
20:15:20 SQL> --			       APPLY/score THE MODEL
20:15:20 SQL> -----------------------------------------------------------------------
20:15:20 SQL> 
20:15:20 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:15:20 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:15:20   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:15:20   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:15:20 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:15:20   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:15:20   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:15:20 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:15:20   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:15:20   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:15:20 SQL> -----------------------
20:15:20 SQL> -- PREPARE SCORING DATA
20:15:20 SQL> --
20:15:20 SQL> -- If the data for model creation has been prepared, then the data
20:15:20 SQL> -- to be scored using the model must be prepared in the same manner
20:15:20 SQL> -- in order to obtain meaningful results.
20:15:20 SQL> --
20:15:20 SQL> -- 1. Missing Value treatment for all Predictors and
20:15:20 SQL> -- 2. Normalization
20:15:20 SQL> -- No outlier treatment will be performed during test and apply. The
20:15:20 SQL> -- normalization step is sufficient, since the normalization parameters
20:15:20 SQL> -- already capture the effects of outlier treatment done with build data.
20:15:20 SQL> --
20:15:20 SQL> BEGIN
20:15:20   2  	-- Xform Test data to replace missing values
20:15:20   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:15:20   4  	  miss_table_name => 'svmc_miss_num',
20:15:20   5  	  data_table_name => '&scoretable',
20:15:20   6  	  xform_view_name => 'xformed_apply_miss_num');
20:15:20   7  
20:15:20   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:15:20   9  	  miss_table_name => 'svmc_miss_cat',
20:15:20  10  	  data_table_name => '&scoretable',
20:15:20  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:15:20  12  
20:15:20  13  	-- Normalize the data to be scored
20:15:20  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:15:20  15  	  norm_table_name => 'svmc_norm',
20:15:20  16  	  data_table_name => '&scoretable',
20:15:20  17  	  xform_view_name => 'svmc_apply_prep');
20:15:20  18  END;
20:15:20  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.20
20:15:21 SQL> 
20:15:21 SQL> -- Maybe I already collected a score for this prdate.
20:15:21 SQL> -- DELETE it if I did:
20:15:21 SQL> DELETE svm62scores
20:15:21   2  WHERE score > 0
20:15:21   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:15:21   4  -- I need to supply the target attribute name:
20:15:21   5  AND targ = '&1'
20:15:21   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gattn'

0 rows deleted.

Elapsed: 00:00:00.02
20:15:21 SQL> 
20:15:21 SQL> -- We do a drumroll here:
20:15:21 SQL> 
20:15:21 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:15:21   2  SELECT
20:15:21   3  prdate
20:15:21   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:15:21   5  ,sysdate
20:15:21   6  ,SUBSTR(prdate,1,7)pair
20:15:21   7  ,SUBSTR(prdate,-19)ydate
20:15:21   8  ,'&1'
20:15:21   9  FROM svmc_apply_prep
20:15:21  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gattn'

1 row created.

Elapsed: 00:00:00.04
20:15:21 SQL> @score1_5min.sql	      2010-11-30 04:05:00 aud_usd
20:15:21 SQL> --
20:15:21 SQL> -- score1_5min.sql
20:15:21 SQL> --
20:15:21 SQL> 
20:15:21 SQL> -- Demo:
20:15:21 SQL> -- @score1_5min.sql 2010-12-31 20:45:01 aud_usd
20:15:21 SQL> 
20:15:21 SQL> CREATE OR REPLACE VIEW sme AS
20:15:21   2  SELECT
20:15:21   3  prdate
20:15:21   4  ,NULL gatt
20:15:21   5  ,g00
20:15:21   6  ,g01
20:15:21   7  ,g02
20:15:21   8  ,g03
20:15:21   9  ,g04
20:15:21  10  ,g05
20:15:21  11  ,g06
20:15:21  12  ,g07
20:15:21  13  ,g08
20:15:21  14  ,g09
20:15:21  15  ,g10
20:15:21  16  ,g11
20:15:21  17  ,g12
20:15:21  18  ,g13
20:15:21  19  ,g14
20:15:21  20  ,g15
20:15:21  21  ,g16
20:15:21  22  ,g17
20:15:21  23  ,g18
20:15:21  24  ,g19
20:15:21  25  ,g20
20:15:21  26  ,g21
20:15:21  27  ,g22
20:15:21  28  ,g23
20:15:21  29  ,g24
20:15:21  30  ,g25
20:15:21  31  ,g26
20:15:21  32  ,g27
20:15:21  33  ,g28
20:15:21  34  ,g29
20:15:21  35  ,g30
20:15:21  36  ,g31
20:15:21  37  ,g32
20:15:21  38  ,g33
20:15:21  39  ,g34
20:15:21  40  ,g35
20:15:21  41  ,g36
20:15:21  42  ,g37
20:15:21  43  ,g38
20:15:21  44  ,g39
20:15:21  45  ,g40
20:15:21  46  ,g41
20:15:21  47  FROM modsrc
20:15:21  48  WHERE ydate = '&1'||' '||'&2'
20:15:21  49  AND pair = '&3'
20:15:21  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-11-30'||' '||'04:05:00'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:15:21 SQL> 
20:15:21 SQL> -- rpt
20:15:21 SQL> -- We should see just 1 row:
20:15:21 SQL> 
20:15:21 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.02
20:15:21 SQL> 
20:15:21 SQL> -- Build the model:
20:15:21 SQL> CREATE OR REPLACE VIEW bme AS
20:15:21   2  SELECT
20:15:21   3  prdate
20:15:21   4  ,gatt
20:15:21   5  ,g00
20:15:21   6  ,g01
20:15:21   7  ,g02
20:15:21   8  ,g03
20:15:21   9  ,g04
20:15:21  10  ,g05
20:15:21  11  ,g06
20:15:21  12  ,g07
20:15:21  13  ,g08
20:15:21  14  ,g09
20:15:21  15  ,g10
20:15:21  16  ,g11
20:15:21  17  ,g12
20:15:21  18  ,g13
20:15:21  19  ,g14
20:15:21  20  ,g15
20:15:21  21  ,g16
20:15:21  22  ,g17
20:15:21  23  ,g18
20:15:21  24  ,g19
20:15:21  25  ,g20
20:15:21  26  ,g21
20:15:21  27  ,g22
20:15:21  28  ,g23
20:15:21  29  ,g24
20:15:21  30  ,g25
20:15:21  31  ,g26
20:15:21  32  ,g27
20:15:21  33  ,g28
20:15:21  34  ,g29
20:15:21  35  ,g30
20:15:21  36  ,g31
20:15:21  37  ,g32
20:15:21  38  ,g33
20:15:21  39  ,g34
20:15:21  40  ,g35
20:15:21  41  ,g36
20:15:21  42  ,g37
20:15:21  43  ,g38
20:15:21  44  ,g39
20:15:21  45  ,g40
20:15:21  46  ,g41
20:15:21  47  FROM modsrc
20:15:21  48  WHERE gatt IN('nup','up')
20:15:21  49  -- Use only rows which are older than 1 day:
20:15:21  50  AND 1+ydate < '&1'||' '||'&2'
20:15:21  51  AND pair = '&3'
20:15:21  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-11-30'||' '||'04:05:00'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.05
20:15:21 SQL> 
20:15:21 SQL> -- rpt
20:15:21 SQL> 
20:15:21 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt;

GAT COUNT(PRDATE)
--- -------------
nup	     6923
up	     4201

Elapsed: 00:00:00.03
20:15:21 SQL> 
20:15:21 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-11-29 04:00:01

Elapsed: 00:00:00.01
20:15:21 SQL> 
20:15:21 SQL> -- Now build model from bme and score sme
20:15:21 SQL> @score1.sql gatt
20:15:21 SQL> --
20:15:21 SQL> -- score1.sql
20:15:21 SQL> --
20:15:21 SQL> 
20:15:21 SQL> -- I use this script to send 5 params to score.sql
20:15:21 SQL> -- which does the heavy lifting of creating an SVM model.
20:15:21 SQL> -- Then at the very end of this script I use the model
20:15:21 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:15:21 SQL> 
20:15:21 SQL> -- I call this script from 2 other scripts:
20:15:21 SQL> -- score1_5min.sql
20:15:21 SQL> -- score1_5min_gattn.sql
20:15:21 SQL> 
20:15:21 SQL> -- The 1st param is the name of the target attribute.
20:15:21 SQL> -- I like to call my target attributes either gatt or gattn.
20:15:21 SQL> 
20:15:21 SQL> -- Demo:
20:15:21 SQL> -- @score1.sql 'gatt'
20:15:21 SQL> -- @score1.sql 'gattn'
20:15:21 SQL> 
20:15:21 SQL> -- Now, I fill up svmc_apply_prep.
20:15:21 SQL> -- I use same model_name used in score.sql
20:15:21 SQL> DEFINE model_name = 'svmfx101'
20:15:21 SQL> DEFINE bldtable	= 'bme'
20:15:21 SQL> DEFINE scoretable = 'sme'
20:15:21 SQL> DEFINE case_id	= 'prdate'
20:15:21 SQL> -- Demo:
20:15:21 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:15:21 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:15:21 SQL> --
20:15:21 SQL> -- score.sql
20:15:21 SQL> --
20:15:21 SQL> 
20:15:21 SQL> -- usage: score.sql
20:15:21 SQL> 
20:15:21 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:15:21 SQL> 
20:15:21 SQL> -- DEFINE target	   = 'gatt'
20:15:21 SQL> -- DEFINE model_name = 'svmfx101'
20:15:21 SQL> -- DEFINE bldtable   = 'bme'
20:15:21 SQL> -- DEFINE scoretable = 'sme'
20:15:21 SQL> -- DEFINE case_id    = 'prdate'
20:15:21 SQL> 
20:15:21 SQL> DEFINE target	= '&1'
20:15:21 SQL> DEFINE model_name = '&2'
20:15:21 SQL> DEFINE bldtable	= '&3'
20:15:21 SQL> DEFINE scoretable = '&4'
20:15:21 SQL> DEFINE case_id	= '&5'
20:15:21 SQL> 
20:15:21 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:15:21 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:15:21 SQL> 
20:15:21 SQL> -- Builds an SVM model using pl/sql.
20:15:21 SQL> 
20:15:21 SQL> -----------------------------------------------------------------------
20:15:21 SQL> --			    BUILD THE MODEL
20:15:21 SQL> -----------------------------------------------------------------------
20:15:21 SQL> 
20:15:21 SQL> -- Cleanup old build data preparation objects for repeat runs
20:15:21 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.00
20:15:21 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:15:21 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:15:21 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.01
20:15:21 SQL> 
20:15:21 SQL> 
20:15:21 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:15:21 SQL> --
20:15:21 SQL> -- DROP	TABLE svmc_settings ;
20:15:21 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:15:21 SQL> -- DELETE svmc_settings;
20:15:21 SQL> 
20:15:21 SQL> -- The default classification algorithm is Naive Bayes. So override
20:15:21 SQL> -- this choice to SVM using a settings table.
20:15:21 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:15:21 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:15:21 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:15:21 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:15:21 SQL> -- models.
20:15:21 SQL> --
20:15:21 SQL> 
20:15:21 SQL> -- Do this once and then comment it out.
20:15:21 SQL> -- That makes script go faster.
20:15:21 SQL> -- BEGIN
20:15:21 SQL> -- -- Populate settings table
20:15:21 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:15:21 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:15:21 SQL> --
20:15:21 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:15:21 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:15:21 SQL> --
20:15:21 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:15:21 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:15:21 SQL> --   COMMIT;
20:15:21 SQL> -- END;
20:15:21 SQL> -- /
20:15:21 SQL> 
20:15:21 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:15:21 SQL> 
20:15:21 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:15:21   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:15:21   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.15
20:15:21 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:15:21   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:15:21   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:15:21 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:15:21   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:15:21   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:15:21 SQL> 
20:15:21 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:15:21   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:15:21   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:15:21 SQL> 
20:15:21 SQL> --------------------------------
20:15:21 SQL> -- PREPARE BUILD (TRAINING) DATA
20:15:21 SQL> --
20:15:21 SQL> 
20:15:21 SQL> -- 1. Missing Value treatment for all Predictors and
20:15:21 SQL> -- 2. Outlier Treatment and
20:15:21 SQL> -- 3. Normalization are performed below.
20:15:21 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:15:21 SQL> --    normalized here.
20:15:21 SQL> 
20:15:21 SQL> BEGIN
20:15:21   2  	-- Perform missing value treatment for all predictors
20:15:21   3  	-- create miss tables
20:15:21   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:15:21   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:15:21   6  
20:15:21   7  	-- populate miss tables
20:15:21   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:15:21   9  	  miss_table_name => 'svmc_miss_num',
20:15:21  10  	  data_table_name => '&bldtable',
20:15:21  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:15:21  12  
20:15:21  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:15:21  14  	  miss_table_name => 'svmc_miss_cat',
20:15:21  15  	  data_table_name => '&bldtable',
20:15:21  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:15:21  17  
20:15:21  18  	-- xform input data to replace missing values
20:15:21  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:15:21  20  	  miss_table_name => 'svmc_miss_num',
20:15:21  21  	  data_table_name => '&bldtable',
20:15:21  22  	  xform_view_name => 'xformed_build_miss_num');
20:15:21  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:15:21  24  	  miss_table_name => 'svmc_miss_cat',
20:15:21  25  	  data_table_name => '&bldtable',
20:15:21  26  	  xform_view_name => 'xformed_build_miss_cat');
20:15:21  27  
20:15:21  28  	-- Perform outlier treatment.
20:15:21  29  	-- create clip table
20:15:21  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:15:21  31  
20:15:21  32  	-- populate clip table
20:15:21  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:15:21  34  	  clip_table_name => 'svmc_clip',
20:15:21  35  	  data_table_name => '&bldtable',
20:15:21  36  	  tail_frac	  => 0.025,
20:15:21  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:15:21  38  
20:15:21  39  	-- xform input data to winsorized data
20:15:21  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:15:21  41  	  clip_table_name => 'svmc_clip',
20:15:21  42  	  data_table_name => '&bldtable',
20:15:21  43  	  xform_view_name => 'svmc_winsor');
20:15:21  44  
20:15:21  45  	-- create normalization table
20:15:21  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:15:21  47  
20:15:21  48  	-- populate normalization table based on winsorized data
20:15:21  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:15:21  50  	  norm_table_name => 'svmc_norm',
20:15:21  51  	  data_table_name => 'svmc_winsor',
20:15:21  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:15:21  53  
20:15:21  54  	-- normalize the original data
20:15:21  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:15:21  56  	  norm_table_name => 'svmc_norm',
20:15:21  57  	  data_table_name => '&bldtable',
20:15:21  58  	  xform_view_name => 'svmc_build_prep');
20:15:21  59  END;
20:15:21  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.73
20:15:23 SQL> 
20:15:23 SQL> ---------------------
20:15:23 SQL> -- CREATE A NEW MODEL
20:15:23 SQL> --
20:15:23 SQL> -- Cleanup old model with the same name for repeat runs
20:15:23 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:15:23   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:15:23   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.99
20:15:24 SQL> 
20:15:24 SQL> -- Build a new SVM Model
20:15:24 SQL> BEGIN
20:15:24   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:15:24   3  	  model_name	      => '&model_name',
20:15:24   4  	  mining_function     => dbms_data_mining.classification,
20:15:24   5  	  data_table_name     => 'svmc_build_prep',
20:15:24   6  	  case_id_column_name => '&case_id',
20:15:24   7  	  target_column_name  => '&target',
20:15:24   8  	  settings_table_name => 'svmc_settings');
20:15:24   9  END;
20:15:24  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:03.79
20:15:28 SQL> 
20:15:28 SQL> -----------------------------------------------------------------------
20:15:28 SQL> --			       APPLY/score THE MODEL
20:15:28 SQL> -----------------------------------------------------------------------
20:15:28 SQL> 
20:15:28 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:15:28 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:15:28   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:15:28   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:15:28 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:15:28   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:15:28   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:15:28 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:15:28   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:15:28   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:15:28 SQL> -----------------------
20:15:28 SQL> -- PREPARE SCORING DATA
20:15:28 SQL> --
20:15:28 SQL> -- If the data for model creation has been prepared, then the data
20:15:28 SQL> -- to be scored using the model must be prepared in the same manner
20:15:28 SQL> -- in order to obtain meaningful results.
20:15:28 SQL> --
20:15:28 SQL> -- 1. Missing Value treatment for all Predictors and
20:15:28 SQL> -- 2. Normalization
20:15:28 SQL> -- No outlier treatment will be performed during test and apply. The
20:15:28 SQL> -- normalization step is sufficient, since the normalization parameters
20:15:28 SQL> -- already capture the effects of outlier treatment done with build data.
20:15:28 SQL> --
20:15:28 SQL> BEGIN
20:15:28   2  	-- Xform Test data to replace missing values
20:15:28   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:15:28   4  	  miss_table_name => 'svmc_miss_num',
20:15:28   5  	  data_table_name => '&scoretable',
20:15:28   6  	  xform_view_name => 'xformed_apply_miss_num');
20:15:28   7  
20:15:28   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:15:28   9  	  miss_table_name => 'svmc_miss_cat',
20:15:28  10  	  data_table_name => '&scoretable',
20:15:28  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:15:28  12  
20:15:28  13  	-- Normalize the data to be scored
20:15:28  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:15:28  15  	  norm_table_name => 'svmc_norm',
20:15:28  16  	  data_table_name => '&scoretable',
20:15:28  17  	  xform_view_name => 'svmc_apply_prep');
20:15:28  18  END;
20:15:28  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.15
20:15:28 SQL> 
20:15:28 SQL> -- Maybe I already collected a score for this prdate.
20:15:28 SQL> -- DELETE it if I did:
20:15:28 SQL> DELETE svm62scores
20:15:28   2  WHERE score > 0
20:15:28   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:15:28   4  -- I need to supply the target attribute name:
20:15:28   5  AND targ = '&1'
20:15:28   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gatt'

0 rows deleted.

Elapsed: 00:00:00.01
20:15:28 SQL> 
20:15:28 SQL> -- We do a drumroll here:
20:15:28 SQL> 
20:15:28 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:15:28   2  SELECT
20:15:28   3  prdate
20:15:28   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:15:28   5  ,sysdate
20:15:28   6  ,SUBSTR(prdate,1,7)pair
20:15:28   7  ,SUBSTR(prdate,-19)ydate
20:15:28   8  ,'&1'
20:15:28   9  FROM svmc_apply_prep
20:15:28  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gatt'

1 row created.

Elapsed: 00:00:00.05
20:15:28 SQL> @score1_5min_gattn.sql	2010-12-28 09:00:00 aud_usd
20:15:28 SQL> --
20:15:28 SQL> -- score1_5min_gattn.sql
20:15:28 SQL> --
20:15:28 SQL> 
20:15:28 SQL> -- Demo:
20:15:28 SQL> -- @score1_5min_gattn.sql 2010-12-31 20:45:01 aud_usd
20:15:28 SQL> 
20:15:28 SQL> CREATE OR REPLACE VIEW sme AS
20:15:28   2  SELECT
20:15:28   3  prdate
20:15:28   4  ,NULL gattn
20:15:28   5  ,g00
20:15:28   6  ,g01
20:15:28   7  ,g02
20:15:28   8  ,g03
20:15:28   9  ,g04
20:15:28  10  ,g05
20:15:28  11  ,g06
20:15:28  12  ,g07
20:15:28  13  ,g08
20:15:28  14  ,g09
20:15:28  15  ,g10
20:15:28  16  ,g11
20:15:28  17  ,g12
20:15:28  18  ,g13
20:15:28  19  ,g14
20:15:28  20  ,g15
20:15:28  21  ,g16
20:15:28  22  ,g17
20:15:28  23  ,g18
20:15:28  24  ,g19
20:15:28  25  ,g20
20:15:28  26  ,g21
20:15:28  27  ,g22
20:15:28  28  ,g23
20:15:28  29  ,g24
20:15:28  30  ,g25
20:15:28  31  ,g26
20:15:28  32  ,g27
20:15:28  33  ,g28
20:15:28  34  ,g29
20:15:28  35  ,g30
20:15:28  36  ,g31
20:15:28  37  ,g32
20:15:28  38  ,g33
20:15:28  39  ,g34
20:15:28  40  ,g35
20:15:28  41  ,g36
20:15:28  42  ,g37
20:15:28  43  ,g38
20:15:28  44  ,g39
20:15:28  45  ,g40
20:15:28  46  ,g41
20:15:28  47  FROM modsrc
20:15:28  48  WHERE ydate = '&1'||' '||'&2'
20:15:28  49  AND pair = '&3'
20:15:28  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-12-28'||' '||'09:00:00'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.05
20:15:28 SQL> 
20:15:28 SQL> -- rpt
20:15:28 SQL> -- We should see just 1 row:
20:15:28 SQL> 
20:15:28 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.02
20:15:28 SQL> 
20:15:28 SQL> -- Build the model:
20:15:28 SQL> CREATE OR REPLACE VIEW bme AS
20:15:28   2  SELECT
20:15:28   3  prdate
20:15:28   4  ,gattn
20:15:28   5  ,g00
20:15:28   6  ,g01
20:15:28   7  ,g02
20:15:28   8  ,g03
20:15:28   9  ,g04
20:15:28  10  ,g05
20:15:28  11  ,g06
20:15:28  12  ,g07
20:15:28  13  ,g08
20:15:28  14  ,g09
20:15:28  15  ,g10
20:15:28  16  ,g11
20:15:28  17  ,g12
20:15:28  18  ,g13
20:15:28  19  ,g14
20:15:28  20  ,g15
20:15:28  21  ,g16
20:15:28  22  ,g17
20:15:28  23  ,g18
20:15:28  24  ,g19
20:15:28  25  ,g20
20:15:28  26  ,g21
20:15:28  27  ,g22
20:15:28  28  ,g23
20:15:28  29  ,g24
20:15:28  30  ,g25
20:15:28  31  ,g26
20:15:28  32  ,g27
20:15:28  33  ,g28
20:15:28  34  ,g29
20:15:28  35  ,g30
20:15:28  36  ,g31
20:15:28  37  ,g32
20:15:28  38  ,g33
20:15:28  39  ,g34
20:15:28  40  ,g35
20:15:28  41  ,g36
20:15:28  42  ,g37
20:15:28  43  ,g38
20:15:28  44  ,g39
20:15:28  45  ,g40
20:15:28  46  ,g41
20:15:28  47  FROM modsrc
20:15:28  48  WHERE gattn IN('nup','up')
20:15:28  49  -- Use only rows which are older than 1 day:
20:15:28  50  AND 1+ydate < '&1'||' '||'&2'
20:15:28  51  AND pair = '&3'
20:15:28  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-12-28'||' '||'09:00:00'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:15:28 SQL> 
20:15:28 SQL> -- rpt
20:15:28 SQL> 
20:15:28 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	    11108
up	     5714

Elapsed: 00:00:00.02
20:15:28 SQL> 
20:15:28 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-12-27 08:55:00

Elapsed: 00:00:00.01
20:15:28 SQL> 
20:15:28 SQL> -- Now build model from bme and score sme
20:15:28 SQL> @score1.sql gattn
20:15:28 SQL> --
20:15:28 SQL> -- score1.sql
20:15:28 SQL> --
20:15:28 SQL> 
20:15:28 SQL> -- I use this script to send 5 params to score.sql
20:15:28 SQL> -- which does the heavy lifting of creating an SVM model.
20:15:28 SQL> -- Then at the very end of this script I use the model
20:15:28 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:15:28 SQL> 
20:15:28 SQL> -- I call this script from 2 other scripts:
20:15:28 SQL> -- score1_5min.sql
20:15:28 SQL> -- score1_5min_gattn.sql
20:15:28 SQL> 
20:15:28 SQL> -- The 1st param is the name of the target attribute.
20:15:28 SQL> -- I like to call my target attributes either gatt or gattn.
20:15:28 SQL> 
20:15:28 SQL> -- Demo:
20:15:28 SQL> -- @score1.sql 'gatt'
20:15:28 SQL> -- @score1.sql 'gattn'
20:15:28 SQL> 
20:15:28 SQL> -- Now, I fill up svmc_apply_prep.
20:15:28 SQL> -- I use same model_name used in score.sql
20:15:28 SQL> DEFINE model_name = 'svmfx101'
20:15:28 SQL> DEFINE bldtable	= 'bme'
20:15:28 SQL> DEFINE scoretable = 'sme'
20:15:28 SQL> DEFINE case_id	= 'prdate'
20:15:28 SQL> -- Demo:
20:15:28 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:15:28 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:15:28 SQL> --
20:15:28 SQL> -- score.sql
20:15:28 SQL> --
20:15:28 SQL> 
20:15:28 SQL> -- usage: score.sql
20:15:28 SQL> 
20:15:28 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:15:28 SQL> 
20:15:28 SQL> -- DEFINE target	   = 'gatt'
20:15:28 SQL> -- DEFINE model_name = 'svmfx101'
20:15:28 SQL> -- DEFINE bldtable   = 'bme'
20:15:28 SQL> -- DEFINE scoretable = 'sme'
20:15:28 SQL> -- DEFINE case_id    = 'prdate'
20:15:28 SQL> 
20:15:28 SQL> DEFINE target	= '&1'
20:15:28 SQL> DEFINE model_name = '&2'
20:15:28 SQL> DEFINE bldtable	= '&3'
20:15:28 SQL> DEFINE scoretable = '&4'
20:15:28 SQL> DEFINE case_id	= '&5'
20:15:28 SQL> 
20:15:28 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:15:28 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:15:28 SQL> 
20:15:28 SQL> -- Builds an SVM model using pl/sql.
20:15:28 SQL> 
20:15:28 SQL> -----------------------------------------------------------------------
20:15:28 SQL> --			    BUILD THE MODEL
20:15:28 SQL> -----------------------------------------------------------------------
20:15:28 SQL> 
20:15:28 SQL> -- Cleanup old build data preparation objects for repeat runs
20:15:28 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.00
20:15:28 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:15:28 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:15:28 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.00
20:15:28 SQL> 
20:15:28 SQL> 
20:15:28 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:15:28 SQL> --
20:15:28 SQL> -- DROP	TABLE svmc_settings ;
20:15:28 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:15:28 SQL> -- DELETE svmc_settings;
20:15:28 SQL> 
20:15:28 SQL> -- The default classification algorithm is Naive Bayes. So override
20:15:28 SQL> -- this choice to SVM using a settings table.
20:15:28 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:15:28 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:15:28 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:15:28 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:15:28 SQL> -- models.
20:15:28 SQL> --
20:15:28 SQL> 
20:15:28 SQL> -- Do this once and then comment it out.
20:15:28 SQL> -- That makes script go faster.
20:15:28 SQL> -- BEGIN
20:15:28 SQL> -- -- Populate settings table
20:15:28 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:15:28 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:15:28 SQL> --
20:15:28 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:15:28 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:15:28 SQL> --
20:15:28 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:15:28 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:15:28 SQL> --   COMMIT;
20:15:28 SQL> -- END;
20:15:28 SQL> -- /
20:15:28 SQL> 
20:15:28 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:15:28 SQL> 
20:15:28 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:15:28   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:15:28   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
20:15:28 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:15:28   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:15:28   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:15:28 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:15:28   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:15:28   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:15:28 SQL> 
20:15:28 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:15:28   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:15:28   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:15:28 SQL> 
20:15:28 SQL> --------------------------------
20:15:28 SQL> -- PREPARE BUILD (TRAINING) DATA
20:15:28 SQL> --
20:15:28 SQL> 
20:15:28 SQL> -- 1. Missing Value treatment for all Predictors and
20:15:28 SQL> -- 2. Outlier Treatment and
20:15:28 SQL> -- 3. Normalization are performed below.
20:15:28 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:15:28 SQL> --    normalized here.
20:15:28 SQL> 
20:15:28 SQL> BEGIN
20:15:28   2  	-- Perform missing value treatment for all predictors
20:15:28   3  	-- create miss tables
20:15:28   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:15:28   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:15:28   6  
20:15:28   7  	-- populate miss tables
20:15:28   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:15:28   9  	  miss_table_name => 'svmc_miss_num',
20:15:28  10  	  data_table_name => '&bldtable',
20:15:28  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:15:28  12  
20:15:28  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:15:28  14  	  miss_table_name => 'svmc_miss_cat',
20:15:28  15  	  data_table_name => '&bldtable',
20:15:28  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:15:28  17  
20:15:28  18  	-- xform input data to replace missing values
20:15:28  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:15:28  20  	  miss_table_name => 'svmc_miss_num',
20:15:28  21  	  data_table_name => '&bldtable',
20:15:28  22  	  xform_view_name => 'xformed_build_miss_num');
20:15:28  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:15:28  24  	  miss_table_name => 'svmc_miss_cat',
20:15:28  25  	  data_table_name => '&bldtable',
20:15:28  26  	  xform_view_name => 'xformed_build_miss_cat');
20:15:28  27  
20:15:28  28  	-- Perform outlier treatment.
20:15:28  29  	-- create clip table
20:15:28  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:15:28  31  
20:15:28  32  	-- populate clip table
20:15:28  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:15:28  34  	  clip_table_name => 'svmc_clip',
20:15:28  35  	  data_table_name => '&bldtable',
20:15:28  36  	  tail_frac	  => 0.025,
20:15:28  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:15:28  38  
20:15:28  39  	-- xform input data to winsorized data
20:15:28  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:15:28  41  	  clip_table_name => 'svmc_clip',
20:15:28  42  	  data_table_name => '&bldtable',
20:15:28  43  	  xform_view_name => 'svmc_winsor');
20:15:28  44  
20:15:28  45  	-- create normalization table
20:15:28  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:15:28  47  
20:15:28  48  	-- populate normalization table based on winsorized data
20:15:28  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:15:28  50  	  norm_table_name => 'svmc_norm',
20:15:28  51  	  data_table_name => 'svmc_winsor',
20:15:28  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:15:28  53  
20:15:28  54  	-- normalize the original data
20:15:28  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:15:28  56  	  norm_table_name => 'svmc_norm',
20:15:28  57  	  data_table_name => '&bldtable',
20:15:28  58  	  xform_view_name => 'svmc_build_prep');
20:15:28  59  END;
20:15:28  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:02.25
20:15:30 SQL> 
20:15:30 SQL> ---------------------
20:15:30 SQL> -- CREATE A NEW MODEL
20:15:30 SQL> --
20:15:30 SQL> -- Cleanup old model with the same name for repeat runs
20:15:30 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:15:30   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:15:30   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.23
20:15:32 SQL> 
20:15:32 SQL> -- Build a new SVM Model
20:15:32 SQL> BEGIN
20:15:32   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:15:32   3  	  model_name	      => '&model_name',
20:15:32   4  	  mining_function     => dbms_data_mining.classification,
20:15:32   5  	  data_table_name     => 'svmc_build_prep',
20:15:32   6  	  case_id_column_name => '&case_id',
20:15:32   7  	  target_column_name  => '&target',
20:15:32   8  	  settings_table_name => 'svmc_settings');
20:15:32   9  END;
20:15:32  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:04.45
20:15:36 SQL> 
20:15:36 SQL> -----------------------------------------------------------------------
20:15:36 SQL> --			       APPLY/score THE MODEL
20:15:36 SQL> -----------------------------------------------------------------------
20:15:36 SQL> 
20:15:36 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:15:36 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:15:36   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:15:36   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:15:36 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:15:36   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:15:36   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:15:36 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:15:36   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:15:36   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:15:36 SQL> -----------------------
20:15:36 SQL> -- PREPARE SCORING DATA
20:15:36 SQL> --
20:15:36 SQL> -- If the data for model creation has been prepared, then the data
20:15:36 SQL> -- to be scored using the model must be prepared in the same manner
20:15:36 SQL> -- in order to obtain meaningful results.
20:15:36 SQL> --
20:15:36 SQL> -- 1. Missing Value treatment for all Predictors and
20:15:36 SQL> -- 2. Normalization
20:15:36 SQL> -- No outlier treatment will be performed during test and apply. The
20:15:36 SQL> -- normalization step is sufficient, since the normalization parameters
20:15:36 SQL> -- already capture the effects of outlier treatment done with build data.
20:15:36 SQL> --
20:15:36 SQL> BEGIN
20:15:36   2  	-- Xform Test data to replace missing values
20:15:36   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:15:36   4  	  miss_table_name => 'svmc_miss_num',
20:15:36   5  	  data_table_name => '&scoretable',
20:15:36   6  	  xform_view_name => 'xformed_apply_miss_num');
20:15:36   7  
20:15:36   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:15:36   9  	  miss_table_name => 'svmc_miss_cat',
20:15:36  10  	  data_table_name => '&scoretable',
20:15:36  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:15:36  12  
20:15:36  13  	-- Normalize the data to be scored
20:15:36  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:15:36  15  	  norm_table_name => 'svmc_norm',
20:15:36  16  	  data_table_name => '&scoretable',
20:15:36  17  	  xform_view_name => 'svmc_apply_prep');
20:15:36  18  END;
20:15:36  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.17
20:15:36 SQL> 
20:15:36 SQL> -- Maybe I already collected a score for this prdate.
20:15:36 SQL> -- DELETE it if I did:
20:15:36 SQL> DELETE svm62scores
20:15:36   2  WHERE score > 0
20:15:36   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:15:36   4  -- I need to supply the target attribute name:
20:15:36   5  AND targ = '&1'
20:15:36   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gattn'

0 rows deleted.

Elapsed: 00:00:00.02
20:15:36 SQL> 
20:15:36 SQL> -- We do a drumroll here:
20:15:36 SQL> 
20:15:36 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:15:36   2  SELECT
20:15:36   3  prdate
20:15:36   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:15:36   5  ,sysdate
20:15:36   6  ,SUBSTR(prdate,1,7)pair
20:15:36   7  ,SUBSTR(prdate,-19)ydate
20:15:36   8  ,'&1'
20:15:36   9  FROM svmc_apply_prep
20:15:36  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gattn'

1 row created.

Elapsed: 00:00:00.05
20:15:37 SQL> @score1_5min.sql	      2010-11-16 01:40:01 aud_usd
20:15:37 SQL> --
20:15:37 SQL> -- score1_5min.sql
20:15:37 SQL> --
20:15:37 SQL> 
20:15:37 SQL> -- Demo:
20:15:37 SQL> -- @score1_5min.sql 2010-12-31 20:45:01 aud_usd
20:15:37 SQL> 
20:15:37 SQL> CREATE OR REPLACE VIEW sme AS
20:15:37   2  SELECT
20:15:37   3  prdate
20:15:37   4  ,NULL gatt
20:15:37   5  ,g00
20:15:37   6  ,g01
20:15:37   7  ,g02
20:15:37   8  ,g03
20:15:37   9  ,g04
20:15:37  10  ,g05
20:15:37  11  ,g06
20:15:37  12  ,g07
20:15:37  13  ,g08
20:15:37  14  ,g09
20:15:37  15  ,g10
20:15:37  16  ,g11
20:15:37  17  ,g12
20:15:37  18  ,g13
20:15:37  19  ,g14
20:15:37  20  ,g15
20:15:37  21  ,g16
20:15:37  22  ,g17
20:15:37  23  ,g18
20:15:37  24  ,g19
20:15:37  25  ,g20
20:15:37  26  ,g21
20:15:37  27  ,g22
20:15:37  28  ,g23
20:15:37  29  ,g24
20:15:37  30  ,g25
20:15:37  31  ,g26
20:15:37  32  ,g27
20:15:37  33  ,g28
20:15:37  34  ,g29
20:15:37  35  ,g30
20:15:37  36  ,g31
20:15:37  37  ,g32
20:15:37  38  ,g33
20:15:37  39  ,g34
20:15:37  40  ,g35
20:15:37  41  ,g36
20:15:37  42  ,g37
20:15:37  43  ,g38
20:15:37  44  ,g39
20:15:37  45  ,g40
20:15:37  46  ,g41
20:15:37  47  FROM modsrc
20:15:37  48  WHERE ydate = '&1'||' '||'&2'
20:15:37  49  AND pair = '&3'
20:15:37  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-11-16'||' '||'01:40:01'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:15:37 SQL> 
20:15:37 SQL> -- rpt
20:15:37 SQL> -- We should see just 1 row:
20:15:37 SQL> 
20:15:37 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.02
20:15:37 SQL> 
20:15:37 SQL> -- Build the model:
20:15:37 SQL> CREATE OR REPLACE VIEW bme AS
20:15:37   2  SELECT
20:15:37   3  prdate
20:15:37   4  ,gatt
20:15:37   5  ,g00
20:15:37   6  ,g01
20:15:37   7  ,g02
20:15:37   8  ,g03
20:15:37   9  ,g04
20:15:37  10  ,g05
20:15:37  11  ,g06
20:15:37  12  ,g07
20:15:37  13  ,g08
20:15:37  14  ,g09
20:15:37  15  ,g10
20:15:37  16  ,g11
20:15:37  17  ,g12
20:15:37  18  ,g13
20:15:37  19  ,g14
20:15:37  20  ,g15
20:15:37  21  ,g16
20:15:37  22  ,g17
20:15:37  23  ,g18
20:15:37  24  ,g19
20:15:37  25  ,g20
20:15:37  26  ,g21
20:15:37  27  ,g22
20:15:37  28  ,g23
20:15:37  29  ,g24
20:15:37  30  ,g25
20:15:37  31  ,g26
20:15:37  32  ,g27
20:15:37  33  ,g28
20:15:37  34  ,g29
20:15:37  35  ,g30
20:15:37  36  ,g31
20:15:37  37  ,g32
20:15:37  38  ,g33
20:15:37  39  ,g34
20:15:37  40  ,g35
20:15:37  41  ,g36
20:15:37  42  ,g37
20:15:37  43  ,g38
20:15:37  44  ,g39
20:15:37  45  ,g40
20:15:37  46  ,g41
20:15:37  47  FROM modsrc
20:15:37  48  WHERE gatt IN('nup','up')
20:15:37  49  -- Use only rows which are older than 1 day:
20:15:37  50  AND 1+ydate < '&1'||' '||'&2'
20:15:37  51  AND pair = '&3'
20:15:37  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-11-16'||' '||'01:40:01'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:15:37 SQL> 
20:15:37 SQL> -- rpt
20:15:37 SQL> 
20:15:37 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt;

GAT COUNT(PRDATE)
--- -------------
nup	     5037
up	     3164

Elapsed: 00:00:00.03
20:15:37 SQL> 
20:15:37 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-11-15 01:35:01

Elapsed: 00:00:00.01
20:15:37 SQL> 
20:15:37 SQL> -- Now build model from bme and score sme
20:15:37 SQL> @score1.sql gatt
20:15:37 SQL> --
20:15:37 SQL> -- score1.sql
20:15:37 SQL> --
20:15:37 SQL> 
20:15:37 SQL> -- I use this script to send 5 params to score.sql
20:15:37 SQL> -- which does the heavy lifting of creating an SVM model.
20:15:37 SQL> -- Then at the very end of this script I use the model
20:15:37 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:15:37 SQL> 
20:15:37 SQL> -- I call this script from 2 other scripts:
20:15:37 SQL> -- score1_5min.sql
20:15:37 SQL> -- score1_5min_gattn.sql
20:15:37 SQL> 
20:15:37 SQL> -- The 1st param is the name of the target attribute.
20:15:37 SQL> -- I like to call my target attributes either gatt or gattn.
20:15:37 SQL> 
20:15:37 SQL> -- Demo:
20:15:37 SQL> -- @score1.sql 'gatt'
20:15:37 SQL> -- @score1.sql 'gattn'
20:15:37 SQL> 
20:15:37 SQL> -- Now, I fill up svmc_apply_prep.
20:15:37 SQL> -- I use same model_name used in score.sql
20:15:37 SQL> DEFINE model_name = 'svmfx101'
20:15:37 SQL> DEFINE bldtable	= 'bme'
20:15:37 SQL> DEFINE scoretable = 'sme'
20:15:37 SQL> DEFINE case_id	= 'prdate'
20:15:37 SQL> -- Demo:
20:15:37 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:15:37 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:15:37 SQL> --
20:15:37 SQL> -- score.sql
20:15:37 SQL> --
20:15:37 SQL> 
20:15:37 SQL> -- usage: score.sql
20:15:37 SQL> 
20:15:37 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:15:37 SQL> 
20:15:37 SQL> -- DEFINE target	   = 'gatt'
20:15:37 SQL> -- DEFINE model_name = 'svmfx101'
20:15:37 SQL> -- DEFINE bldtable   = 'bme'
20:15:37 SQL> -- DEFINE scoretable = 'sme'
20:15:37 SQL> -- DEFINE case_id    = 'prdate'
20:15:37 SQL> 
20:15:37 SQL> DEFINE target	= '&1'
20:15:37 SQL> DEFINE model_name = '&2'
20:15:37 SQL> DEFINE bldtable	= '&3'
20:15:37 SQL> DEFINE scoretable = '&4'
20:15:37 SQL> DEFINE case_id	= '&5'
20:15:37 SQL> 
20:15:37 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:15:37 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:15:37 SQL> 
20:15:37 SQL> -- Builds an SVM model using pl/sql.
20:15:37 SQL> 
20:15:37 SQL> -----------------------------------------------------------------------
20:15:37 SQL> --			    BUILD THE MODEL
20:15:37 SQL> -----------------------------------------------------------------------
20:15:37 SQL> 
20:15:37 SQL> -- Cleanup old build data preparation objects for repeat runs
20:15:37 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.00
20:15:37 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:15:37 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:15:37 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.00
20:15:37 SQL> 
20:15:37 SQL> 
20:15:37 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:15:37 SQL> --
20:15:37 SQL> -- DROP	TABLE svmc_settings ;
20:15:37 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:15:37 SQL> -- DELETE svmc_settings;
20:15:37 SQL> 
20:15:37 SQL> -- The default classification algorithm is Naive Bayes. So override
20:15:37 SQL> -- this choice to SVM using a settings table.
20:15:37 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:15:37 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:15:37 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:15:37 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:15:37 SQL> -- models.
20:15:37 SQL> --
20:15:37 SQL> 
20:15:37 SQL> -- Do this once and then comment it out.
20:15:37 SQL> -- That makes script go faster.
20:15:37 SQL> -- BEGIN
20:15:37 SQL> -- -- Populate settings table
20:15:37 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:15:37 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:15:37 SQL> --
20:15:37 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:15:37 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:15:37 SQL> --
20:15:37 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:15:37 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:15:37 SQL> --   COMMIT;
20:15:37 SQL> -- END;
20:15:37 SQL> -- /
20:15:37 SQL> 
20:15:37 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.01
20:15:37 SQL> 
20:15:37 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:15:37   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:15:37   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:15:37 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:15:37   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:15:37   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:15:37 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:15:37   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:15:37   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:15:37 SQL> 
20:15:37 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:15:37   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:15:37   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:15:37 SQL> 
20:15:37 SQL> --------------------------------
20:15:37 SQL> -- PREPARE BUILD (TRAINING) DATA
20:15:37 SQL> --
20:15:37 SQL> 
20:15:37 SQL> -- 1. Missing Value treatment for all Predictors and
20:15:37 SQL> -- 2. Outlier Treatment and
20:15:37 SQL> -- 3. Normalization are performed below.
20:15:37 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:15:37 SQL> --    normalized here.
20:15:37 SQL> 
20:15:37 SQL> BEGIN
20:15:37   2  	-- Perform missing value treatment for all predictors
20:15:37   3  	-- create miss tables
20:15:37   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:15:37   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:15:37   6  
20:15:37   7  	-- populate miss tables
20:15:37   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:15:37   9  	  miss_table_name => 'svmc_miss_num',
20:15:37  10  	  data_table_name => '&bldtable',
20:15:37  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:15:37  12  
20:15:37  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:15:37  14  	  miss_table_name => 'svmc_miss_cat',
20:15:37  15  	  data_table_name => '&bldtable',
20:15:37  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:15:37  17  
20:15:37  18  	-- xform input data to replace missing values
20:15:37  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:15:37  20  	  miss_table_name => 'svmc_miss_num',
20:15:37  21  	  data_table_name => '&bldtable',
20:15:37  22  	  xform_view_name => 'xformed_build_miss_num');
20:15:37  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:15:37  24  	  miss_table_name => 'svmc_miss_cat',
20:15:37  25  	  data_table_name => '&bldtable',
20:15:37  26  	  xform_view_name => 'xformed_build_miss_cat');
20:15:37  27  
20:15:37  28  	-- Perform outlier treatment.
20:15:37  29  	-- create clip table
20:15:37  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:15:37  31  
20:15:37  32  	-- populate clip table
20:15:37  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:15:37  34  	  clip_table_name => 'svmc_clip',
20:15:37  35  	  data_table_name => '&bldtable',
20:15:37  36  	  tail_frac	  => 0.025,
20:15:37  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:15:37  38  
20:15:37  39  	-- xform input data to winsorized data
20:15:37  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:15:37  41  	  clip_table_name => 'svmc_clip',
20:15:37  42  	  data_table_name => '&bldtable',
20:15:37  43  	  xform_view_name => 'svmc_winsor');
20:15:37  44  
20:15:37  45  	-- create normalization table
20:15:37  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:15:37  47  
20:15:37  48  	-- populate normalization table based on winsorized data
20:15:37  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:15:37  50  	  norm_table_name => 'svmc_norm',
20:15:37  51  	  data_table_name => 'svmc_winsor',
20:15:37  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:15:37  53  
20:15:37  54  	-- normalize the original data
20:15:37  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:15:37  56  	  norm_table_name => 'svmc_norm',
20:15:37  57  	  data_table_name => '&bldtable',
20:15:37  58  	  xform_view_name => 'svmc_build_prep');
20:15:37  59  END;
20:15:37  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.59
20:15:38 SQL> 
20:15:38 SQL> ---------------------
20:15:38 SQL> -- CREATE A NEW MODEL
20:15:38 SQL> --
20:15:38 SQL> -- Cleanup old model with the same name for repeat runs
20:15:38 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:15:38   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:15:38   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.26
20:15:40 SQL> 
20:15:40 SQL> -- Build a new SVM Model
20:15:40 SQL> BEGIN
20:15:40   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:15:40   3  	  model_name	      => '&model_name',
20:15:40   4  	  mining_function     => dbms_data_mining.classification,
20:15:40   5  	  data_table_name     => 'svmc_build_prep',
20:15:40   6  	  case_id_column_name => '&case_id',
20:15:40   7  	  target_column_name  => '&target',
20:15:40   8  	  settings_table_name => 'svmc_settings');
20:15:40   9  END;
20:15:40  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:04.02
20:15:44 SQL> 
20:15:44 SQL> -----------------------------------------------------------------------
20:15:44 SQL> --			       APPLY/score THE MODEL
20:15:44 SQL> -----------------------------------------------------------------------
20:15:44 SQL> 
20:15:44 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:15:44 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:15:44   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:15:44   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:15:44 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:15:44   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:15:44   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:15:44 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:15:44   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:15:44   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:15:44 SQL> -----------------------
20:15:44 SQL> -- PREPARE SCORING DATA
20:15:44 SQL> --
20:15:44 SQL> -- If the data for model creation has been prepared, then the data
20:15:44 SQL> -- to be scored using the model must be prepared in the same manner
20:15:44 SQL> -- in order to obtain meaningful results.
20:15:44 SQL> --
20:15:44 SQL> -- 1. Missing Value treatment for all Predictors and
20:15:44 SQL> -- 2. Normalization
20:15:44 SQL> -- No outlier treatment will be performed during test and apply. The
20:15:44 SQL> -- normalization step is sufficient, since the normalization parameters
20:15:44 SQL> -- already capture the effects of outlier treatment done with build data.
20:15:44 SQL> --
20:15:44 SQL> BEGIN
20:15:44   2  	-- Xform Test data to replace missing values
20:15:44   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:15:44   4  	  miss_table_name => 'svmc_miss_num',
20:15:44   5  	  data_table_name => '&scoretable',
20:15:44   6  	  xform_view_name => 'xformed_apply_miss_num');
20:15:44   7  
20:15:44   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:15:44   9  	  miss_table_name => 'svmc_miss_cat',
20:15:44  10  	  data_table_name => '&scoretable',
20:15:44  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:15:44  12  
20:15:44  13  	-- Normalize the data to be scored
20:15:44  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:15:44  15  	  norm_table_name => 'svmc_norm',
20:15:44  16  	  data_table_name => '&scoretable',
20:15:44  17  	  xform_view_name => 'svmc_apply_prep');
20:15:44  18  END;
20:15:44  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.18
20:15:44 SQL> 
20:15:44 SQL> -- Maybe I already collected a score for this prdate.
20:15:44 SQL> -- DELETE it if I did:
20:15:44 SQL> DELETE svm62scores
20:15:44   2  WHERE score > 0
20:15:44   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:15:44   4  -- I need to supply the target attribute name:
20:15:44   5  AND targ = '&1'
20:15:44   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gatt'

0 rows deleted.

Elapsed: 00:00:00.02
20:15:44 SQL> 
20:15:44 SQL> -- We do a drumroll here:
20:15:44 SQL> 
20:15:44 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:15:44   2  SELECT
20:15:44   3  prdate
20:15:44   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:15:44   5  ,sysdate
20:15:44   6  ,SUBSTR(prdate,1,7)pair
20:15:44   7  ,SUBSTR(prdate,-19)ydate
20:15:44   8  ,'&1'
20:15:44   9  FROM svmc_apply_prep
20:15:44  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gatt'

1 row created.

Elapsed: 00:00:00.05
20:15:44 SQL> @score1_5min.sql	      2010-11-23 11:55:01 aud_usd
20:15:44 SQL> --
20:15:44 SQL> -- score1_5min.sql
20:15:44 SQL> --
20:15:44 SQL> 
20:15:44 SQL> -- Demo:
20:15:44 SQL> -- @score1_5min.sql 2010-12-31 20:45:01 aud_usd
20:15:44 SQL> 
20:15:44 SQL> CREATE OR REPLACE VIEW sme AS
20:15:44   2  SELECT
20:15:44   3  prdate
20:15:44   4  ,NULL gatt
20:15:44   5  ,g00
20:15:44   6  ,g01
20:15:44   7  ,g02
20:15:44   8  ,g03
20:15:44   9  ,g04
20:15:44  10  ,g05
20:15:44  11  ,g06
20:15:44  12  ,g07
20:15:44  13  ,g08
20:15:44  14  ,g09
20:15:44  15  ,g10
20:15:44  16  ,g11
20:15:44  17  ,g12
20:15:44  18  ,g13
20:15:44  19  ,g14
20:15:44  20  ,g15
20:15:44  21  ,g16
20:15:44  22  ,g17
20:15:44  23  ,g18
20:15:44  24  ,g19
20:15:44  25  ,g20
20:15:44  26  ,g21
20:15:44  27  ,g22
20:15:44  28  ,g23
20:15:44  29  ,g24
20:15:44  30  ,g25
20:15:44  31  ,g26
20:15:44  32  ,g27
20:15:44  33  ,g28
20:15:44  34  ,g29
20:15:44  35  ,g30
20:15:44  36  ,g31
20:15:44  37  ,g32
20:15:44  38  ,g33
20:15:44  39  ,g34
20:15:44  40  ,g35
20:15:44  41  ,g36
20:15:44  42  ,g37
20:15:44  43  ,g38
20:15:44  44  ,g39
20:15:44  45  ,g40
20:15:44  46  ,g41
20:15:44  47  FROM modsrc
20:15:44  48  WHERE ydate = '&1'||' '||'&2'
20:15:44  49  AND pair = '&3'
20:15:44  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-11-23'||' '||'11:55:01'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:15:44 SQL> 
20:15:44 SQL> -- rpt
20:15:44 SQL> -- We should see just 1 row:
20:15:44 SQL> 
20:15:44 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.01
20:15:44 SQL> 
20:15:44 SQL> -- Build the model:
20:15:44 SQL> CREATE OR REPLACE VIEW bme AS
20:15:44   2  SELECT
20:15:44   3  prdate
20:15:44   4  ,gatt
20:15:44   5  ,g00
20:15:44   6  ,g01
20:15:44   7  ,g02
20:15:44   8  ,g03
20:15:44   9  ,g04
20:15:44  10  ,g05
20:15:44  11  ,g06
20:15:44  12  ,g07
20:15:44  13  ,g08
20:15:44  14  ,g09
20:15:44  15  ,g10
20:15:44  16  ,g11
20:15:44  17  ,g12
20:15:44  18  ,g13
20:15:44  19  ,g14
20:15:44  20  ,g15
20:15:44  21  ,g16
20:15:44  22  ,g17
20:15:44  23  ,g18
20:15:44  24  ,g19
20:15:44  25  ,g20
20:15:44  26  ,g21
20:15:44  27  ,g22
20:15:44  28  ,g23
20:15:44  29  ,g24
20:15:44  30  ,g25
20:15:44  31  ,g26
20:15:44  32  ,g27
20:15:44  33  ,g28
20:15:44  34  ,g29
20:15:44  35  ,g30
20:15:44  36  ,g31
20:15:44  37  ,g32
20:15:44  38  ,g33
20:15:44  39  ,g34
20:15:44  40  ,g35
20:15:44  41  ,g36
20:15:44  42  ,g37
20:15:44  43  ,g38
20:15:44  44  ,g39
20:15:44  45  ,g40
20:15:44  46  ,g41
20:15:44  47  FROM modsrc
20:15:44  48  WHERE gatt IN('nup','up')
20:15:44  49  -- Use only rows which are older than 1 day:
20:15:44  50  AND 1+ydate < '&1'||' '||'&2'
20:15:44  51  AND pair = '&3'
20:15:44  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-11-23'||' '||'11:55:01'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.05
20:15:44 SQL> 
20:15:44 SQL> -- rpt
20:15:44 SQL> 
20:15:44 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt;

GAT COUNT(PRDATE)
--- -------------
nup	     5934
up	     3832

Elapsed: 00:00:00.03
20:15:44 SQL> 
20:15:44 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-11-22 11:50:01

Elapsed: 00:00:00.01
20:15:44 SQL> 
20:15:44 SQL> -- Now build model from bme and score sme
20:15:44 SQL> @score1.sql gatt
20:15:44 SQL> --
20:15:44 SQL> -- score1.sql
20:15:44 SQL> --
20:15:44 SQL> 
20:15:44 SQL> -- I use this script to send 5 params to score.sql
20:15:44 SQL> -- which does the heavy lifting of creating an SVM model.
20:15:44 SQL> -- Then at the very end of this script I use the model
20:15:44 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:15:44 SQL> 
20:15:44 SQL> -- I call this script from 2 other scripts:
20:15:44 SQL> -- score1_5min.sql
20:15:44 SQL> -- score1_5min_gattn.sql
20:15:44 SQL> 
20:15:44 SQL> -- The 1st param is the name of the target attribute.
20:15:44 SQL> -- I like to call my target attributes either gatt or gattn.
20:15:44 SQL> 
20:15:44 SQL> -- Demo:
20:15:44 SQL> -- @score1.sql 'gatt'
20:15:44 SQL> -- @score1.sql 'gattn'
20:15:44 SQL> 
20:15:44 SQL> -- Now, I fill up svmc_apply_prep.
20:15:44 SQL> -- I use same model_name used in score.sql
20:15:44 SQL> DEFINE model_name = 'svmfx101'
20:15:44 SQL> DEFINE bldtable	= 'bme'
20:15:44 SQL> DEFINE scoretable = 'sme'
20:15:44 SQL> DEFINE case_id	= 'prdate'
20:15:44 SQL> -- Demo:
20:15:44 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:15:44 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:15:44 SQL> --
20:15:44 SQL> -- score.sql
20:15:44 SQL> --
20:15:44 SQL> 
20:15:44 SQL> -- usage: score.sql
20:15:44 SQL> 
20:15:44 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:15:44 SQL> 
20:15:44 SQL> -- DEFINE target	   = 'gatt'
20:15:44 SQL> -- DEFINE model_name = 'svmfx101'
20:15:44 SQL> -- DEFINE bldtable   = 'bme'
20:15:44 SQL> -- DEFINE scoretable = 'sme'
20:15:44 SQL> -- DEFINE case_id    = 'prdate'
20:15:44 SQL> 
20:15:44 SQL> DEFINE target	= '&1'
20:15:44 SQL> DEFINE model_name = '&2'
20:15:44 SQL> DEFINE bldtable	= '&3'
20:15:44 SQL> DEFINE scoretable = '&4'
20:15:44 SQL> DEFINE case_id	= '&5'
20:15:44 SQL> 
20:15:44 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:15:44 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:15:44 SQL> 
20:15:44 SQL> -- Builds an SVM model using pl/sql.
20:15:44 SQL> 
20:15:44 SQL> -----------------------------------------------------------------------
20:15:44 SQL> --			    BUILD THE MODEL
20:15:44 SQL> -----------------------------------------------------------------------
20:15:44 SQL> 
20:15:44 SQL> -- Cleanup old build data preparation objects for repeat runs
20:15:44 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.01
20:15:44 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:15:44 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:15:44 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.00
20:15:44 SQL> 
20:15:44 SQL> 
20:15:44 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:15:44 SQL> --
20:15:44 SQL> -- DROP	TABLE svmc_settings ;
20:15:44 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:15:44 SQL> -- DELETE svmc_settings;
20:15:44 SQL> 
20:15:44 SQL> -- The default classification algorithm is Naive Bayes. So override
20:15:44 SQL> -- this choice to SVM using a settings table.
20:15:44 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:15:44 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:15:44 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:15:44 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:15:44 SQL> -- models.
20:15:44 SQL> --
20:15:44 SQL> 
20:15:44 SQL> -- Do this once and then comment it out.
20:15:44 SQL> -- That makes script go faster.
20:15:44 SQL> -- BEGIN
20:15:44 SQL> -- -- Populate settings table
20:15:44 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:15:44 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:15:44 SQL> --
20:15:44 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:15:44 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:15:44 SQL> --
20:15:44 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:15:44 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:15:44 SQL> --   COMMIT;
20:15:44 SQL> -- END;
20:15:44 SQL> -- /
20:15:44 SQL> 
20:15:44 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:15:44 SQL> 
20:15:44 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:15:44   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:15:44   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
20:15:44 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:15:44   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:15:44   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
20:15:44 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:15:44   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:15:44   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:15:44 SQL> 
20:15:44 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:15:44   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:15:44   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:15:44 SQL> 
20:15:44 SQL> --------------------------------
20:15:44 SQL> -- PREPARE BUILD (TRAINING) DATA
20:15:44 SQL> --
20:15:44 SQL> 
20:15:44 SQL> -- 1. Missing Value treatment for all Predictors and
20:15:44 SQL> -- 2. Outlier Treatment and
20:15:44 SQL> -- 3. Normalization are performed below.
20:15:44 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:15:44 SQL> --    normalized here.
20:15:44 SQL> 
20:15:44 SQL> BEGIN
20:15:44   2  	-- Perform missing value treatment for all predictors
20:15:44   3  	-- create miss tables
20:15:44   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:15:44   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:15:44   6  
20:15:44   7  	-- populate miss tables
20:15:44   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:15:44   9  	  miss_table_name => 'svmc_miss_num',
20:15:44  10  	  data_table_name => '&bldtable',
20:15:44  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:15:44  12  
20:15:44  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:15:44  14  	  miss_table_name => 'svmc_miss_cat',
20:15:44  15  	  data_table_name => '&bldtable',
20:15:44  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:15:44  17  
20:15:44  18  	-- xform input data to replace missing values
20:15:44  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:15:44  20  	  miss_table_name => 'svmc_miss_num',
20:15:44  21  	  data_table_name => '&bldtable',
20:15:44  22  	  xform_view_name => 'xformed_build_miss_num');
20:15:44  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:15:44  24  	  miss_table_name => 'svmc_miss_cat',
20:15:44  25  	  data_table_name => '&bldtable',
20:15:44  26  	  xform_view_name => 'xformed_build_miss_cat');
20:15:44  27  
20:15:44  28  	-- Perform outlier treatment.
20:15:44  29  	-- create clip table
20:15:44  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:15:44  31  
20:15:44  32  	-- populate clip table
20:15:44  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:15:44  34  	  clip_table_name => 'svmc_clip',
20:15:44  35  	  data_table_name => '&bldtable',
20:15:44  36  	  tail_frac	  => 0.025,
20:15:44  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:15:44  38  
20:15:44  39  	-- xform input data to winsorized data
20:15:44  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:15:44  41  	  clip_table_name => 'svmc_clip',
20:15:44  42  	  data_table_name => '&bldtable',
20:15:44  43  	  xform_view_name => 'svmc_winsor');
20:15:44  44  
20:15:44  45  	-- create normalization table
20:15:44  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:15:44  47  
20:15:44  48  	-- populate normalization table based on winsorized data
20:15:44  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:15:44  50  	  norm_table_name => 'svmc_norm',
20:15:44  51  	  data_table_name => 'svmc_winsor',
20:15:44  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:15:44  53  
20:15:44  54  	-- normalize the original data
20:15:44  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:15:44  56  	  norm_table_name => 'svmc_norm',
20:15:44  57  	  data_table_name => '&bldtable',
20:15:44  58  	  xform_view_name => 'svmc_build_prep');
20:15:44  59  END;
20:15:44  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.68
20:15:46 SQL> 
20:15:46 SQL> ---------------------
20:15:46 SQL> -- CREATE A NEW MODEL
20:15:46 SQL> --
20:15:46 SQL> -- Cleanup old model with the same name for repeat runs
20:15:46 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:15:46   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:15:46   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.22
20:15:47 SQL> 
20:15:47 SQL> -- Build a new SVM Model
20:15:47 SQL> BEGIN
20:15:47   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:15:47   3  	  model_name	      => '&model_name',
20:15:47   4  	  mining_function     => dbms_data_mining.classification,
20:15:47   5  	  data_table_name     => 'svmc_build_prep',
20:15:47   6  	  case_id_column_name => '&case_id',
20:15:47   7  	  target_column_name  => '&target',
20:15:47   8  	  settings_table_name => 'svmc_settings');
20:15:47   9  END;
20:15:47  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:03.75
20:15:51 SQL> 
20:15:51 SQL> -----------------------------------------------------------------------
20:15:51 SQL> --			       APPLY/score THE MODEL
20:15:51 SQL> -----------------------------------------------------------------------
20:15:51 SQL> 
20:15:51 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:15:51 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:15:51   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:15:51   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:15:51 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:15:51   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:15:51   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:15:51 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:15:51   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:15:51   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:15:51 SQL> -----------------------
20:15:51 SQL> -- PREPARE SCORING DATA
20:15:51 SQL> --
20:15:51 SQL> -- If the data for model creation has been prepared, then the data
20:15:51 SQL> -- to be scored using the model must be prepared in the same manner
20:15:51 SQL> -- in order to obtain meaningful results.
20:15:51 SQL> --
20:15:51 SQL> -- 1. Missing Value treatment for all Predictors and
20:15:51 SQL> -- 2. Normalization
20:15:51 SQL> -- No outlier treatment will be performed during test and apply. The
20:15:51 SQL> -- normalization step is sufficient, since the normalization parameters
20:15:51 SQL> -- already capture the effects of outlier treatment done with build data.
20:15:51 SQL> --
20:15:51 SQL> BEGIN
20:15:51   2  	-- Xform Test data to replace missing values
20:15:51   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:15:51   4  	  miss_table_name => 'svmc_miss_num',
20:15:51   5  	  data_table_name => '&scoretable',
20:15:51   6  	  xform_view_name => 'xformed_apply_miss_num');
20:15:51   7  
20:15:51   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:15:51   9  	  miss_table_name => 'svmc_miss_cat',
20:15:51  10  	  data_table_name => '&scoretable',
20:15:51  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:15:51  12  
20:15:51  13  	-- Normalize the data to be scored
20:15:51  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:15:51  15  	  norm_table_name => 'svmc_norm',
20:15:51  16  	  data_table_name => '&scoretable',
20:15:51  17  	  xform_view_name => 'svmc_apply_prep');
20:15:51  18  END;
20:15:51  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.18
20:15:51 SQL> 
20:15:51 SQL> -- Maybe I already collected a score for this prdate.
20:15:51 SQL> -- DELETE it if I did:
20:15:51 SQL> DELETE svm62scores
20:15:51   2  WHERE score > 0
20:15:51   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:15:51   4  -- I need to supply the target attribute name:
20:15:51   5  AND targ = '&1'
20:15:51   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gatt'

0 rows deleted.

Elapsed: 00:00:00.02
20:15:51 SQL> 
20:15:51 SQL> -- We do a drumroll here:
20:15:51 SQL> 
20:15:51 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:15:51   2  SELECT
20:15:51   3  prdate
20:15:51   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:15:51   5  ,sysdate
20:15:51   6  ,SUBSTR(prdate,1,7)pair
20:15:51   7  ,SUBSTR(prdate,-19)ydate
20:15:51   8  ,'&1'
20:15:51   9  FROM svmc_apply_prep
20:15:51  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gatt'

1 row created.

Elapsed: 00:00:00.05
20:15:51 SQL> @score1_5min_gattn.sql	2010-10-26 05:15:01 aud_usd
20:15:51 SQL> --
20:15:51 SQL> -- score1_5min_gattn.sql
20:15:51 SQL> --
20:15:51 SQL> 
20:15:51 SQL> -- Demo:
20:15:51 SQL> -- @score1_5min_gattn.sql 2010-12-31 20:45:01 aud_usd
20:15:51 SQL> 
20:15:51 SQL> CREATE OR REPLACE VIEW sme AS
20:15:51   2  SELECT
20:15:51   3  prdate
20:15:51   4  ,NULL gattn
20:15:51   5  ,g00
20:15:51   6  ,g01
20:15:51   7  ,g02
20:15:51   8  ,g03
20:15:51   9  ,g04
20:15:51  10  ,g05
20:15:51  11  ,g06
20:15:51  12  ,g07
20:15:51  13  ,g08
20:15:51  14  ,g09
20:15:51  15  ,g10
20:15:51  16  ,g11
20:15:51  17  ,g12
20:15:51  18  ,g13
20:15:51  19  ,g14
20:15:51  20  ,g15
20:15:51  21  ,g16
20:15:51  22  ,g17
20:15:51  23  ,g18
20:15:51  24  ,g19
20:15:51  25  ,g20
20:15:51  26  ,g21
20:15:51  27  ,g22
20:15:51  28  ,g23
20:15:51  29  ,g24
20:15:51  30  ,g25
20:15:51  31  ,g26
20:15:51  32  ,g27
20:15:51  33  ,g28
20:15:51  34  ,g29
20:15:51  35  ,g30
20:15:51  36  ,g31
20:15:51  37  ,g32
20:15:51  38  ,g33
20:15:51  39  ,g34
20:15:51  40  ,g35
20:15:51  41  ,g36
20:15:51  42  ,g37
20:15:51  43  ,g38
20:15:51  44  ,g39
20:15:51  45  ,g40
20:15:51  46  ,g41
20:15:51  47  FROM modsrc
20:15:51  48  WHERE ydate = '&1'||' '||'&2'
20:15:51  49  AND pair = '&3'
20:15:51  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-10-26'||' '||'05:15:01'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.05
20:15:51 SQL> 
20:15:51 SQL> -- rpt
20:15:51 SQL> -- We should see just 1 row:
20:15:51 SQL> 
20:15:51 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.01
20:15:51 SQL> 
20:15:51 SQL> -- Build the model:
20:15:51 SQL> CREATE OR REPLACE VIEW bme AS
20:15:51   2  SELECT
20:15:51   3  prdate
20:15:51   4  ,gattn
20:15:51   5  ,g00
20:15:51   6  ,g01
20:15:51   7  ,g02
20:15:51   8  ,g03
20:15:51   9  ,g04
20:15:51  10  ,g05
20:15:51  11  ,g06
20:15:51  12  ,g07
20:15:51  13  ,g08
20:15:51  14  ,g09
20:15:51  15  ,g10
20:15:51  16  ,g11
20:15:51  17  ,g12
20:15:51  18  ,g13
20:15:51  19  ,g14
20:15:51  20  ,g15
20:15:51  21  ,g16
20:15:51  22  ,g17
20:15:51  23  ,g18
20:15:51  24  ,g19
20:15:51  25  ,g20
20:15:51  26  ,g21
20:15:51  27  ,g22
20:15:51  28  ,g23
20:15:51  29  ,g24
20:15:51  30  ,g25
20:15:51  31  ,g26
20:15:51  32  ,g27
20:15:51  33  ,g28
20:15:51  34  ,g29
20:15:51  35  ,g30
20:15:51  36  ,g31
20:15:51  37  ,g32
20:15:51  38  ,g33
20:15:51  39  ,g34
20:15:51  40  ,g35
20:15:51  41  ,g36
20:15:51  42  ,g37
20:15:51  43  ,g38
20:15:51  44  ,g39
20:15:51  45  ,g40
20:15:51  46  ,g41
20:15:51  47  FROM modsrc
20:15:51  48  WHERE gattn IN('nup','up')
20:15:51  49  -- Use only rows which are older than 1 day:
20:15:51  50  AND 1+ydate < '&1'||' '||'&2'
20:15:51  51  AND pair = '&3'
20:15:51  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-10-26'||' '||'05:15:01'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:15:51 SQL> 
20:15:51 SQL> -- rpt
20:15:51 SQL> 
20:15:51 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	     2576
up	     1312

Elapsed: 00:00:00.02
20:15:51 SQL> 
20:15:51 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-10-25 05:10:01

Elapsed: 00:00:00.01
20:15:51 SQL> 
20:15:51 SQL> -- Now build model from bme and score sme
20:15:51 SQL> @score1.sql gattn
20:15:51 SQL> --
20:15:51 SQL> -- score1.sql
20:15:51 SQL> --
20:15:51 SQL> 
20:15:51 SQL> -- I use this script to send 5 params to score.sql
20:15:51 SQL> -- which does the heavy lifting of creating an SVM model.
20:15:51 SQL> -- Then at the very end of this script I use the model
20:15:51 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:15:51 SQL> 
20:15:51 SQL> -- I call this script from 2 other scripts:
20:15:51 SQL> -- score1_5min.sql
20:15:51 SQL> -- score1_5min_gattn.sql
20:15:51 SQL> 
20:15:51 SQL> -- The 1st param is the name of the target attribute.
20:15:51 SQL> -- I like to call my target attributes either gatt or gattn.
20:15:51 SQL> 
20:15:51 SQL> -- Demo:
20:15:51 SQL> -- @score1.sql 'gatt'
20:15:51 SQL> -- @score1.sql 'gattn'
20:15:51 SQL> 
20:15:51 SQL> -- Now, I fill up svmc_apply_prep.
20:15:51 SQL> -- I use same model_name used in score.sql
20:15:51 SQL> DEFINE model_name = 'svmfx101'
20:15:51 SQL> DEFINE bldtable	= 'bme'
20:15:51 SQL> DEFINE scoretable = 'sme'
20:15:51 SQL> DEFINE case_id	= 'prdate'
20:15:51 SQL> -- Demo:
20:15:51 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:15:51 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:15:51 SQL> --
20:15:51 SQL> -- score.sql
20:15:51 SQL> --
20:15:51 SQL> 
20:15:51 SQL> -- usage: score.sql
20:15:51 SQL> 
20:15:51 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:15:51 SQL> 
20:15:51 SQL> -- DEFINE target	   = 'gatt'
20:15:51 SQL> -- DEFINE model_name = 'svmfx101'
20:15:51 SQL> -- DEFINE bldtable   = 'bme'
20:15:51 SQL> -- DEFINE scoretable = 'sme'
20:15:51 SQL> -- DEFINE case_id    = 'prdate'
20:15:51 SQL> 
20:15:51 SQL> DEFINE target	= '&1'
20:15:51 SQL> DEFINE model_name = '&2'
20:15:51 SQL> DEFINE bldtable	= '&3'
20:15:51 SQL> DEFINE scoretable = '&4'
20:15:51 SQL> DEFINE case_id	= '&5'
20:15:51 SQL> 
20:15:51 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:15:51 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:15:51 SQL> 
20:15:51 SQL> -- Builds an SVM model using pl/sql.
20:15:51 SQL> 
20:15:51 SQL> -----------------------------------------------------------------------
20:15:51 SQL> --			    BUILD THE MODEL
20:15:51 SQL> -----------------------------------------------------------------------
20:15:51 SQL> 
20:15:51 SQL> -- Cleanup old build data preparation objects for repeat runs
20:15:51 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.00
20:15:51 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:15:51 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:15:51 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.00
20:15:51 SQL> 
20:15:51 SQL> 
20:15:51 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:15:51 SQL> --
20:15:51 SQL> -- DROP	TABLE svmc_settings ;
20:15:51 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:15:51 SQL> -- DELETE svmc_settings;
20:15:51 SQL> 
20:15:51 SQL> -- The default classification algorithm is Naive Bayes. So override
20:15:51 SQL> -- this choice to SVM using a settings table.
20:15:51 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:15:51 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:15:51 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:15:51 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:15:51 SQL> -- models.
20:15:51 SQL> --
20:15:51 SQL> 
20:15:51 SQL> -- Do this once and then comment it out.
20:15:51 SQL> -- That makes script go faster.
20:15:51 SQL> -- BEGIN
20:15:51 SQL> -- -- Populate settings table
20:15:51 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:15:51 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:15:51 SQL> --
20:15:51 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:15:51 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:15:51 SQL> --
20:15:51 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:15:51 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:15:51 SQL> --   COMMIT;
20:15:51 SQL> -- END;
20:15:51 SQL> -- /
20:15:51 SQL> 
20:15:51 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:15:51 SQL> 
20:15:51 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:15:51   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:15:51   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:15:52 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:15:52   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:15:52   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:15:52 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:15:52   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:15:52   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:15:52 SQL> 
20:15:52 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:15:52   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:15:52   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:15:52 SQL> 
20:15:52 SQL> --------------------------------
20:15:52 SQL> -- PREPARE BUILD (TRAINING) DATA
20:15:52 SQL> --
20:15:52 SQL> 
20:15:52 SQL> -- 1. Missing Value treatment for all Predictors and
20:15:52 SQL> -- 2. Outlier Treatment and
20:15:52 SQL> -- 3. Normalization are performed below.
20:15:52 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:15:52 SQL> --    normalized here.
20:15:52 SQL> 
20:15:52 SQL> BEGIN
20:15:52   2  	-- Perform missing value treatment for all predictors
20:15:52   3  	-- create miss tables
20:15:52   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:15:52   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:15:52   6  
20:15:52   7  	-- populate miss tables
20:15:52   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:15:52   9  	  miss_table_name => 'svmc_miss_num',
20:15:52  10  	  data_table_name => '&bldtable',
20:15:52  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:15:52  12  
20:15:52  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:15:52  14  	  miss_table_name => 'svmc_miss_cat',
20:15:52  15  	  data_table_name => '&bldtable',
20:15:52  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:15:52  17  
20:15:52  18  	-- xform input data to replace missing values
20:15:52  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:15:52  20  	  miss_table_name => 'svmc_miss_num',
20:15:52  21  	  data_table_name => '&bldtable',
20:15:52  22  	  xform_view_name => 'xformed_build_miss_num');
20:15:52  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:15:52  24  	  miss_table_name => 'svmc_miss_cat',
20:15:52  25  	  data_table_name => '&bldtable',
20:15:52  26  	  xform_view_name => 'xformed_build_miss_cat');
20:15:52  27  
20:15:52  28  	-- Perform outlier treatment.
20:15:52  29  	-- create clip table
20:15:52  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:15:52  31  
20:15:52  32  	-- populate clip table
20:15:52  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:15:52  34  	  clip_table_name => 'svmc_clip',
20:15:52  35  	  data_table_name => '&bldtable',
20:15:52  36  	  tail_frac	  => 0.025,
20:15:52  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:15:52  38  
20:15:52  39  	-- xform input data to winsorized data
20:15:52  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:15:52  41  	  clip_table_name => 'svmc_clip',
20:15:52  42  	  data_table_name => '&bldtable',
20:15:52  43  	  xform_view_name => 'svmc_winsor');
20:15:52  44  
20:15:52  45  	-- create normalization table
20:15:52  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:15:52  47  
20:15:52  48  	-- populate normalization table based on winsorized data
20:15:52  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:15:52  50  	  norm_table_name => 'svmc_norm',
20:15:52  51  	  data_table_name => 'svmc_winsor',
20:15:52  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:15:52  53  
20:15:52  54  	-- normalize the original data
20:15:52  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:15:52  56  	  norm_table_name => 'svmc_norm',
20:15:52  57  	  data_table_name => '&bldtable',
20:15:52  58  	  xform_view_name => 'svmc_build_prep');
20:15:52  59  END;
20:15:52  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.19
20:15:53 SQL> 
20:15:53 SQL> ---------------------
20:15:53 SQL> -- CREATE A NEW MODEL
20:15:53 SQL> --
20:15:53 SQL> -- Cleanup old model with the same name for repeat runs
20:15:53 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:15:53   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:15:53   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.00
20:15:54 SQL> 
20:15:54 SQL> -- Build a new SVM Model
20:15:54 SQL> BEGIN
20:15:54   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:15:54   3  	  model_name	      => '&model_name',
20:15:54   4  	  mining_function     => dbms_data_mining.classification,
20:15:54   5  	  data_table_name     => 'svmc_build_prep',
20:15:54   6  	  case_id_column_name => '&case_id',
20:15:54   7  	  target_column_name  => '&target',
20:15:54   8  	  settings_table_name => 'svmc_settings');
20:15:54   9  END;
20:15:54  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:02.84
20:15:57 SQL> 
20:15:57 SQL> -----------------------------------------------------------------------
20:15:57 SQL> --			       APPLY/score THE MODEL
20:15:57 SQL> -----------------------------------------------------------------------
20:15:57 SQL> 
20:15:57 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:15:57 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:15:57   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:15:57   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:15:57 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:15:57   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:15:57   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:15:57 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:15:57   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:15:57   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:15:57 SQL> -----------------------
20:15:57 SQL> -- PREPARE SCORING DATA
20:15:57 SQL> --
20:15:57 SQL> -- If the data for model creation has been prepared, then the data
20:15:57 SQL> -- to be scored using the model must be prepared in the same manner
20:15:57 SQL> -- in order to obtain meaningful results.
20:15:57 SQL> --
20:15:57 SQL> -- 1. Missing Value treatment for all Predictors and
20:15:57 SQL> -- 2. Normalization
20:15:57 SQL> -- No outlier treatment will be performed during test and apply. The
20:15:57 SQL> -- normalization step is sufficient, since the normalization parameters
20:15:57 SQL> -- already capture the effects of outlier treatment done with build data.
20:15:57 SQL> --
20:15:57 SQL> BEGIN
20:15:57   2  	-- Xform Test data to replace missing values
20:15:57   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:15:57   4  	  miss_table_name => 'svmc_miss_num',
20:15:57   5  	  data_table_name => '&scoretable',
20:15:57   6  	  xform_view_name => 'xformed_apply_miss_num');
20:15:57   7  
20:15:57   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:15:57   9  	  miss_table_name => 'svmc_miss_cat',
20:15:57  10  	  data_table_name => '&scoretable',
20:15:57  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:15:57  12  
20:15:57  13  	-- Normalize the data to be scored
20:15:57  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:15:57  15  	  norm_table_name => 'svmc_norm',
20:15:57  16  	  data_table_name => '&scoretable',
20:15:57  17  	  xform_view_name => 'svmc_apply_prep');
20:15:57  18  END;
20:15:57  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.16
20:15:57 SQL> 
20:15:57 SQL> -- Maybe I already collected a score for this prdate.
20:15:57 SQL> -- DELETE it if I did:
20:15:57 SQL> DELETE svm62scores
20:15:57   2  WHERE score > 0
20:15:57   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:15:57   4  -- I need to supply the target attribute name:
20:15:57   5  AND targ = '&1'
20:15:57   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gattn'

0 rows deleted.

Elapsed: 00:00:00.02
20:15:57 SQL> 
20:15:57 SQL> -- We do a drumroll here:
20:15:57 SQL> 
20:15:57 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:15:57   2  SELECT
20:15:57   3  prdate
20:15:57   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:15:57   5  ,sysdate
20:15:57   6  ,SUBSTR(prdate,1,7)pair
20:15:57   7  ,SUBSTR(prdate,-19)ydate
20:15:57   8  ,'&1'
20:15:57   9  FROM svmc_apply_prep
20:15:57  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gattn'

1 row created.

Elapsed: 00:00:00.05
20:15:57 SQL> @score1_5min_gattn.sql	2010-12-13 08:00:00 aud_usd
20:15:57 SQL> --
20:15:57 SQL> -- score1_5min_gattn.sql
20:15:57 SQL> --
20:15:57 SQL> 
20:15:57 SQL> -- Demo:
20:15:57 SQL> -- @score1_5min_gattn.sql 2010-12-31 20:45:01 aud_usd
20:15:57 SQL> 
20:15:57 SQL> CREATE OR REPLACE VIEW sme AS
20:15:57   2  SELECT
20:15:57   3  prdate
20:15:57   4  ,NULL gattn
20:15:57   5  ,g00
20:15:57   6  ,g01
20:15:57   7  ,g02
20:15:57   8  ,g03
20:15:57   9  ,g04
20:15:57  10  ,g05
20:15:57  11  ,g06
20:15:57  12  ,g07
20:15:57  13  ,g08
20:15:57  14  ,g09
20:15:57  15  ,g10
20:15:57  16  ,g11
20:15:57  17  ,g12
20:15:57  18  ,g13
20:15:57  19  ,g14
20:15:57  20  ,g15
20:15:57  21  ,g16
20:15:57  22  ,g17
20:15:57  23  ,g18
20:15:57  24  ,g19
20:15:57  25  ,g20
20:15:57  26  ,g21
20:15:57  27  ,g22
20:15:57  28  ,g23
20:15:57  29  ,g24
20:15:57  30  ,g25
20:15:57  31  ,g26
20:15:57  32  ,g27
20:15:57  33  ,g28
20:15:57  34  ,g29
20:15:57  35  ,g30
20:15:57  36  ,g31
20:15:57  37  ,g32
20:15:57  38  ,g33
20:15:57  39  ,g34
20:15:57  40  ,g35
20:15:57  41  ,g36
20:15:57  42  ,g37
20:15:57  43  ,g38
20:15:57  44  ,g39
20:15:57  45  ,g40
20:15:57  46  ,g41
20:15:57  47  FROM modsrc
20:15:57  48  WHERE ydate = '&1'||' '||'&2'
20:15:57  49  AND pair = '&3'
20:15:57  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-12-13'||' '||'08:00:00'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.05
20:15:57 SQL> 
20:15:57 SQL> -- rpt
20:15:57 SQL> -- We should see just 1 row:
20:15:57 SQL> 
20:15:57 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.02
20:15:57 SQL> 
20:15:57 SQL> -- Build the model:
20:15:57 SQL> CREATE OR REPLACE VIEW bme AS
20:15:57   2  SELECT
20:15:57   3  prdate
20:15:57   4  ,gattn
20:15:57   5  ,g00
20:15:57   6  ,g01
20:15:57   7  ,g02
20:15:57   8  ,g03
20:15:57   9  ,g04
20:15:57  10  ,g05
20:15:57  11  ,g06
20:15:57  12  ,g07
20:15:57  13  ,g08
20:15:57  14  ,g09
20:15:57  15  ,g10
20:15:57  16  ,g11
20:15:57  17  ,g12
20:15:57  18  ,g13
20:15:57  19  ,g14
20:15:57  20  ,g15
20:15:57  21  ,g16
20:15:57  22  ,g17
20:15:57  23  ,g18
20:15:57  24  ,g19
20:15:57  25  ,g20
20:15:57  26  ,g21
20:15:57  27  ,g22
20:15:57  28  ,g23
20:15:57  29  ,g24
20:15:57  30  ,g25
20:15:57  31  ,g26
20:15:57  32  ,g27
20:15:57  33  ,g28
20:15:57  34  ,g29
20:15:57  35  ,g30
20:15:57  36  ,g31
20:15:57  37  ,g32
20:15:57  38  ,g33
20:15:57  39  ,g34
20:15:57  40  ,g35
20:15:57  41  ,g36
20:15:57  42  ,g37
20:15:57  43  ,g38
20:15:57  44  ,g39
20:15:57  45  ,g40
20:15:57  46  ,g41
20:15:57  47  FROM modsrc
20:15:57  48  WHERE gattn IN('nup','up')
20:15:57  49  -- Use only rows which are older than 1 day:
20:15:57  50  AND 1+ydate < '&1'||' '||'&2'
20:15:57  51  AND pair = '&3'
20:15:57  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-12-13'||' '||'08:00:00'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:15:57 SQL> 
20:15:57 SQL> -- rpt
20:15:57 SQL> 
20:15:57 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	     8819
up	     5078

Elapsed: 00:00:00.02
20:15:57 SQL> 
20:15:57 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-12-10 21:45:00

Elapsed: 00:00:00.01
20:15:57 SQL> 
20:15:57 SQL> -- Now build model from bme and score sme
20:15:57 SQL> @score1.sql gattn
20:15:57 SQL> --
20:15:57 SQL> -- score1.sql
20:15:57 SQL> --
20:15:57 SQL> 
20:15:57 SQL> -- I use this script to send 5 params to score.sql
20:15:57 SQL> -- which does the heavy lifting of creating an SVM model.
20:15:57 SQL> -- Then at the very end of this script I use the model
20:15:57 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:15:57 SQL> 
20:15:57 SQL> -- I call this script from 2 other scripts:
20:15:57 SQL> -- score1_5min.sql
20:15:57 SQL> -- score1_5min_gattn.sql
20:15:57 SQL> 
20:15:57 SQL> -- The 1st param is the name of the target attribute.
20:15:57 SQL> -- I like to call my target attributes either gatt or gattn.
20:15:57 SQL> 
20:15:57 SQL> -- Demo:
20:15:57 SQL> -- @score1.sql 'gatt'
20:15:57 SQL> -- @score1.sql 'gattn'
20:15:57 SQL> 
20:15:57 SQL> -- Now, I fill up svmc_apply_prep.
20:15:57 SQL> -- I use same model_name used in score.sql
20:15:57 SQL> DEFINE model_name = 'svmfx101'
20:15:57 SQL> DEFINE bldtable	= 'bme'
20:15:57 SQL> DEFINE scoretable = 'sme'
20:15:57 SQL> DEFINE case_id	= 'prdate'
20:15:57 SQL> -- Demo:
20:15:57 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:15:57 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:15:57 SQL> --
20:15:57 SQL> -- score.sql
20:15:57 SQL> --
20:15:57 SQL> 
20:15:57 SQL> -- usage: score.sql
20:15:57 SQL> 
20:15:57 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:15:57 SQL> 
20:15:57 SQL> -- DEFINE target	   = 'gatt'
20:15:57 SQL> -- DEFINE model_name = 'svmfx101'
20:15:57 SQL> -- DEFINE bldtable   = 'bme'
20:15:57 SQL> -- DEFINE scoretable = 'sme'
20:15:57 SQL> -- DEFINE case_id    = 'prdate'
20:15:57 SQL> 
20:15:57 SQL> DEFINE target	= '&1'
20:15:57 SQL> DEFINE model_name = '&2'
20:15:57 SQL> DEFINE bldtable	= '&3'
20:15:57 SQL> DEFINE scoretable = '&4'
20:15:57 SQL> DEFINE case_id	= '&5'
20:15:57 SQL> 
20:15:57 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:15:57 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:15:57 SQL> 
20:15:57 SQL> -- Builds an SVM model using pl/sql.
20:15:57 SQL> 
20:15:57 SQL> -----------------------------------------------------------------------
20:15:57 SQL> --			    BUILD THE MODEL
20:15:57 SQL> -----------------------------------------------------------------------
20:15:57 SQL> 
20:15:57 SQL> -- Cleanup old build data preparation objects for repeat runs
20:15:57 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.00
20:15:57 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:15:57 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:15:57 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.00
20:15:57 SQL> 
20:15:57 SQL> 
20:15:57 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:15:57 SQL> --
20:15:57 SQL> -- DROP	TABLE svmc_settings ;
20:15:57 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:15:57 SQL> -- DELETE svmc_settings;
20:15:57 SQL> 
20:15:57 SQL> -- The default classification algorithm is Naive Bayes. So override
20:15:57 SQL> -- this choice to SVM using a settings table.
20:15:57 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:15:57 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:15:57 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:15:57 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:15:57 SQL> -- models.
20:15:57 SQL> --
20:15:57 SQL> 
20:15:57 SQL> -- Do this once and then comment it out.
20:15:57 SQL> -- That makes script go faster.
20:15:57 SQL> -- BEGIN
20:15:57 SQL> -- -- Populate settings table
20:15:57 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:15:57 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:15:57 SQL> --
20:15:57 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:15:57 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:15:57 SQL> --
20:15:57 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:15:57 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:15:57 SQL> --   COMMIT;
20:15:57 SQL> -- END;
20:15:57 SQL> -- /
20:15:57 SQL> 
20:15:57 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:15:57 SQL> 
20:15:57 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:15:57   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:15:57   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:15:57 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:15:57   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:15:57   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:15:57 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:15:57   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:15:57   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:15:57 SQL> 
20:15:57 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:15:57   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:15:57   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:15:57 SQL> 
20:15:57 SQL> --------------------------------
20:15:57 SQL> -- PREPARE BUILD (TRAINING) DATA
20:15:57 SQL> --
20:15:57 SQL> 
20:15:57 SQL> -- 1. Missing Value treatment for all Predictors and
20:15:57 SQL> -- 2. Outlier Treatment and
20:15:57 SQL> -- 3. Normalization are performed below.
20:15:57 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:15:57 SQL> --    normalized here.
20:15:57 SQL> 
20:15:57 SQL> BEGIN
20:15:57   2  	-- Perform missing value treatment for all predictors
20:15:57   3  	-- create miss tables
20:15:57   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:15:57   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:15:57   6  
20:15:57   7  	-- populate miss tables
20:15:57   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:15:57   9  	  miss_table_name => 'svmc_miss_num',
20:15:57  10  	  data_table_name => '&bldtable',
20:15:57  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:15:57  12  
20:15:57  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:15:57  14  	  miss_table_name => 'svmc_miss_cat',
20:15:57  15  	  data_table_name => '&bldtable',
20:15:57  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:15:57  17  
20:15:57  18  	-- xform input data to replace missing values
20:15:57  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:15:57  20  	  miss_table_name => 'svmc_miss_num',
20:15:57  21  	  data_table_name => '&bldtable',
20:15:57  22  	  xform_view_name => 'xformed_build_miss_num');
20:15:57  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:15:57  24  	  miss_table_name => 'svmc_miss_cat',
20:15:57  25  	  data_table_name => '&bldtable',
20:15:57  26  	  xform_view_name => 'xformed_build_miss_cat');
20:15:57  27  
20:15:57  28  	-- Perform outlier treatment.
20:15:57  29  	-- create clip table
20:15:57  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:15:57  31  
20:15:57  32  	-- populate clip table
20:15:57  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:15:57  34  	  clip_table_name => 'svmc_clip',
20:15:57  35  	  data_table_name => '&bldtable',
20:15:57  36  	  tail_frac	  => 0.025,
20:15:57  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:15:57  38  
20:15:57  39  	-- xform input data to winsorized data
20:15:57  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:15:57  41  	  clip_table_name => 'svmc_clip',
20:15:57  42  	  data_table_name => '&bldtable',
20:15:57  43  	  xform_view_name => 'svmc_winsor');
20:15:57  44  
20:15:57  45  	-- create normalization table
20:15:57  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:15:57  47  
20:15:57  48  	-- populate normalization table based on winsorized data
20:15:57  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:15:57  50  	  norm_table_name => 'svmc_norm',
20:15:57  51  	  data_table_name => 'svmc_winsor',
20:15:57  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:15:57  53  
20:15:57  54  	-- normalize the original data
20:15:57  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:15:57  56  	  norm_table_name => 'svmc_norm',
20:15:57  57  	  data_table_name => '&bldtable',
20:15:57  58  	  xform_view_name => 'svmc_build_prep');
20:15:57  59  END;
20:15:57  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.95
20:15:59 SQL> 
20:15:59 SQL> ---------------------
20:15:59 SQL> -- CREATE A NEW MODEL
20:15:59 SQL> --
20:15:59 SQL> -- Cleanup old model with the same name for repeat runs
20:15:59 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:15:59   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:15:59   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.15
20:16:00 SQL> 
20:16:00 SQL> -- Build a new SVM Model
20:16:00 SQL> BEGIN
20:16:00   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:16:00   3  	  model_name	      => '&model_name',
20:16:00   4  	  mining_function     => dbms_data_mining.classification,
20:16:00   5  	  data_table_name     => 'svmc_build_prep',
20:16:00   6  	  case_id_column_name => '&case_id',
20:16:00   7  	  target_column_name  => '&target',
20:16:00   8  	  settings_table_name => 'svmc_settings');
20:16:00   9  END;
20:16:00  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:04.32
20:16:05 SQL> 
20:16:05 SQL> -----------------------------------------------------------------------
20:16:05 SQL> --			       APPLY/score THE MODEL
20:16:05 SQL> -----------------------------------------------------------------------
20:16:05 SQL> 
20:16:05 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:16:05 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:16:05   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:16:05   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:16:05 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:16:05   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:16:05   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:16:05 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:16:05   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:16:05   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:16:05 SQL> -----------------------
20:16:05 SQL> -- PREPARE SCORING DATA
20:16:05 SQL> --
20:16:05 SQL> -- If the data for model creation has been prepared, then the data
20:16:05 SQL> -- to be scored using the model must be prepared in the same manner
20:16:05 SQL> -- in order to obtain meaningful results.
20:16:05 SQL> --
20:16:05 SQL> -- 1. Missing Value treatment for all Predictors and
20:16:05 SQL> -- 2. Normalization
20:16:05 SQL> -- No outlier treatment will be performed during test and apply. The
20:16:05 SQL> -- normalization step is sufficient, since the normalization parameters
20:16:05 SQL> -- already capture the effects of outlier treatment done with build data.
20:16:05 SQL> --
20:16:05 SQL> BEGIN
20:16:05   2  	-- Xform Test data to replace missing values
20:16:05   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:16:05   4  	  miss_table_name => 'svmc_miss_num',
20:16:05   5  	  data_table_name => '&scoretable',
20:16:05   6  	  xform_view_name => 'xformed_apply_miss_num');
20:16:05   7  
20:16:05   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:16:05   9  	  miss_table_name => 'svmc_miss_cat',
20:16:05  10  	  data_table_name => '&scoretable',
20:16:05  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:16:05  12  
20:16:05  13  	-- Normalize the data to be scored
20:16:05  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:16:05  15  	  norm_table_name => 'svmc_norm',
20:16:05  16  	  data_table_name => '&scoretable',
20:16:05  17  	  xform_view_name => 'svmc_apply_prep');
20:16:05  18  END;
20:16:05  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.18
20:16:05 SQL> 
20:16:05 SQL> -- Maybe I already collected a score for this prdate.
20:16:05 SQL> -- DELETE it if I did:
20:16:05 SQL> DELETE svm62scores
20:16:05   2  WHERE score > 0
20:16:05   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:16:05   4  -- I need to supply the target attribute name:
20:16:05   5  AND targ = '&1'
20:16:05   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gattn'

0 rows deleted.

Elapsed: 00:00:00.01
20:16:05 SQL> 
20:16:05 SQL> -- We do a drumroll here:
20:16:05 SQL> 
20:16:05 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:16:05   2  SELECT
20:16:05   3  prdate
20:16:05   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:16:05   5  ,sysdate
20:16:05   6  ,SUBSTR(prdate,1,7)pair
20:16:05   7  ,SUBSTR(prdate,-19)ydate
20:16:05   8  ,'&1'
20:16:05   9  FROM svmc_apply_prep
20:16:05  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gattn'

1 row created.

Elapsed: 00:00:00.05
20:16:05 SQL> @score1_5min_gattn.sql	2010-12-06 12:15:00 aud_usd
20:16:05 SQL> --
20:16:05 SQL> -- score1_5min_gattn.sql
20:16:05 SQL> --
20:16:05 SQL> 
20:16:05 SQL> -- Demo:
20:16:05 SQL> -- @score1_5min_gattn.sql 2010-12-31 20:45:01 aud_usd
20:16:05 SQL> 
20:16:05 SQL> CREATE OR REPLACE VIEW sme AS
20:16:05   2  SELECT
20:16:05   3  prdate
20:16:05   4  ,NULL gattn
20:16:05   5  ,g00
20:16:05   6  ,g01
20:16:05   7  ,g02
20:16:05   8  ,g03
20:16:05   9  ,g04
20:16:05  10  ,g05
20:16:05  11  ,g06
20:16:05  12  ,g07
20:16:05  13  ,g08
20:16:05  14  ,g09
20:16:05  15  ,g10
20:16:05  16  ,g11
20:16:05  17  ,g12
20:16:05  18  ,g13
20:16:05  19  ,g14
20:16:05  20  ,g15
20:16:05  21  ,g16
20:16:05  22  ,g17
20:16:05  23  ,g18
20:16:05  24  ,g19
20:16:05  25  ,g20
20:16:05  26  ,g21
20:16:05  27  ,g22
20:16:05  28  ,g23
20:16:05  29  ,g24
20:16:05  30  ,g25
20:16:05  31  ,g26
20:16:05  32  ,g27
20:16:05  33  ,g28
20:16:05  34  ,g29
20:16:05  35  ,g30
20:16:05  36  ,g31
20:16:05  37  ,g32
20:16:05  38  ,g33
20:16:05  39  ,g34
20:16:05  40  ,g35
20:16:05  41  ,g36
20:16:05  42  ,g37
20:16:05  43  ,g38
20:16:05  44  ,g39
20:16:05  45  ,g40
20:16:05  46  ,g41
20:16:05  47  FROM modsrc
20:16:05  48  WHERE ydate = '&1'||' '||'&2'
20:16:05  49  AND pair = '&3'
20:16:05  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-12-06'||' '||'12:15:00'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.06
20:16:05 SQL> 
20:16:05 SQL> -- rpt
20:16:05 SQL> -- We should see just 1 row:
20:16:05 SQL> 
20:16:05 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.01
20:16:05 SQL> 
20:16:05 SQL> -- Build the model:
20:16:05 SQL> CREATE OR REPLACE VIEW bme AS
20:16:05   2  SELECT
20:16:05   3  prdate
20:16:05   4  ,gattn
20:16:05   5  ,g00
20:16:05   6  ,g01
20:16:05   7  ,g02
20:16:05   8  ,g03
20:16:05   9  ,g04
20:16:05  10  ,g05
20:16:05  11  ,g06
20:16:05  12  ,g07
20:16:05  13  ,g08
20:16:05  14  ,g09
20:16:05  15  ,g10
20:16:05  16  ,g11
20:16:05  17  ,g12
20:16:05  18  ,g13
20:16:05  19  ,g14
20:16:05  20  ,g15
20:16:05  21  ,g16
20:16:05  22  ,g17
20:16:05  23  ,g18
20:16:05  24  ,g19
20:16:05  25  ,g20
20:16:05  26  ,g21
20:16:05  27  ,g22
20:16:05  28  ,g23
20:16:05  29  ,g24
20:16:05  30  ,g25
20:16:05  31  ,g26
20:16:05  32  ,g27
20:16:05  33  ,g28
20:16:05  34  ,g29
20:16:05  35  ,g30
20:16:05  36  ,g31
20:16:05  37  ,g32
20:16:05  38  ,g33
20:16:05  39  ,g34
20:16:05  40  ,g35
20:16:05  41  ,g36
20:16:05  42  ,g37
20:16:05  43  ,g38
20:16:05  44  ,g39
20:16:05  45  ,g40
20:16:05  46  ,g41
20:16:05  47  FROM modsrc
20:16:05  48  WHERE gattn IN('nup','up')
20:16:05  49  -- Use only rows which are older than 1 day:
20:16:05  50  AND 1+ydate < '&1'||' '||'&2'
20:16:05  51  AND pair = '&3'
20:16:05  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-12-06'||' '||'12:15:00'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:16:05 SQL> 
20:16:05 SQL> -- rpt
20:16:05 SQL> 
20:16:05 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	     7929
up	     4545

Elapsed: 00:00:00.03
20:16:05 SQL> 
20:16:05 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-12-03 21:55:00

Elapsed: 00:00:00.02
20:16:05 SQL> 
20:16:05 SQL> -- Now build model from bme and score sme
20:16:05 SQL> @score1.sql gattn
20:16:05 SQL> --
20:16:05 SQL> -- score1.sql
20:16:05 SQL> --
20:16:05 SQL> 
20:16:05 SQL> -- I use this script to send 5 params to score.sql
20:16:05 SQL> -- which does the heavy lifting of creating an SVM model.
20:16:05 SQL> -- Then at the very end of this script I use the model
20:16:05 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:16:05 SQL> 
20:16:05 SQL> -- I call this script from 2 other scripts:
20:16:05 SQL> -- score1_5min.sql
20:16:05 SQL> -- score1_5min_gattn.sql
20:16:05 SQL> 
20:16:05 SQL> -- The 1st param is the name of the target attribute.
20:16:05 SQL> -- I like to call my target attributes either gatt or gattn.
20:16:05 SQL> 
20:16:05 SQL> -- Demo:
20:16:05 SQL> -- @score1.sql 'gatt'
20:16:05 SQL> -- @score1.sql 'gattn'
20:16:05 SQL> 
20:16:05 SQL> -- Now, I fill up svmc_apply_prep.
20:16:05 SQL> -- I use same model_name used in score.sql
20:16:05 SQL> DEFINE model_name = 'svmfx101'
20:16:05 SQL> DEFINE bldtable	= 'bme'
20:16:05 SQL> DEFINE scoretable = 'sme'
20:16:05 SQL> DEFINE case_id	= 'prdate'
20:16:05 SQL> -- Demo:
20:16:05 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:16:05 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:16:05 SQL> --
20:16:05 SQL> -- score.sql
20:16:05 SQL> --
20:16:05 SQL> 
20:16:05 SQL> -- usage: score.sql
20:16:05 SQL> 
20:16:05 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:16:05 SQL> 
20:16:05 SQL> -- DEFINE target	   = 'gatt'
20:16:05 SQL> -- DEFINE model_name = 'svmfx101'
20:16:05 SQL> -- DEFINE bldtable   = 'bme'
20:16:05 SQL> -- DEFINE scoretable = 'sme'
20:16:05 SQL> -- DEFINE case_id    = 'prdate'
20:16:05 SQL> 
20:16:05 SQL> DEFINE target	= '&1'
20:16:05 SQL> DEFINE model_name = '&2'
20:16:05 SQL> DEFINE bldtable	= '&3'
20:16:05 SQL> DEFINE scoretable = '&4'
20:16:05 SQL> DEFINE case_id	= '&5'
20:16:05 SQL> 
20:16:05 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:16:05 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:16:05 SQL> 
20:16:05 SQL> -- Builds an SVM model using pl/sql.
20:16:05 SQL> 
20:16:05 SQL> -----------------------------------------------------------------------
20:16:05 SQL> --			    BUILD THE MODEL
20:16:05 SQL> -----------------------------------------------------------------------
20:16:05 SQL> 
20:16:05 SQL> -- Cleanup old build data preparation objects for repeat runs
20:16:05 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.00
20:16:05 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.01
20:16:05 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:16:05 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.00
20:16:05 SQL> 
20:16:05 SQL> 
20:16:05 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:16:05 SQL> --
20:16:05 SQL> -- DROP	TABLE svmc_settings ;
20:16:05 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:16:05 SQL> -- DELETE svmc_settings;
20:16:05 SQL> 
20:16:05 SQL> -- The default classification algorithm is Naive Bayes. So override
20:16:05 SQL> -- this choice to SVM using a settings table.
20:16:05 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:16:05 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:16:05 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:16:05 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:16:05 SQL> -- models.
20:16:05 SQL> --
20:16:05 SQL> 
20:16:05 SQL> -- Do this once and then comment it out.
20:16:05 SQL> -- That makes script go faster.
20:16:05 SQL> -- BEGIN
20:16:05 SQL> -- -- Populate settings table
20:16:05 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:16:05 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:16:05 SQL> --
20:16:05 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:16:05 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:16:05 SQL> --
20:16:05 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:16:05 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:16:05 SQL> --   COMMIT;
20:16:05 SQL> -- END;
20:16:05 SQL> -- /
20:16:05 SQL> 
20:16:05 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:16:05 SQL> 
20:16:05 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:16:05   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:16:05   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
20:16:05 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:16:05   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:16:05   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:16:05 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:16:05   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:16:05   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:16:05 SQL> 
20:16:05 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:16:05   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:16:05   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:16:05 SQL> 
20:16:05 SQL> --------------------------------
20:16:05 SQL> -- PREPARE BUILD (TRAINING) DATA
20:16:05 SQL> --
20:16:05 SQL> 
20:16:05 SQL> -- 1. Missing Value treatment for all Predictors and
20:16:05 SQL> -- 2. Outlier Treatment and
20:16:05 SQL> -- 3. Normalization are performed below.
20:16:05 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:16:05 SQL> --    normalized here.
20:16:05 SQL> 
20:16:05 SQL> BEGIN
20:16:05   2  	-- Perform missing value treatment for all predictors
20:16:05   3  	-- create miss tables
20:16:05   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:16:05   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:16:05   6  
20:16:05   7  	-- populate miss tables
20:16:05   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:16:05   9  	  miss_table_name => 'svmc_miss_num',
20:16:05  10  	  data_table_name => '&bldtable',
20:16:05  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:16:05  12  
20:16:05  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:16:05  14  	  miss_table_name => 'svmc_miss_cat',
20:16:05  15  	  data_table_name => '&bldtable',
20:16:05  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:16:05  17  
20:16:05  18  	-- xform input data to replace missing values
20:16:05  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:16:05  20  	  miss_table_name => 'svmc_miss_num',
20:16:05  21  	  data_table_name => '&bldtable',
20:16:05  22  	  xform_view_name => 'xformed_build_miss_num');
20:16:05  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:16:05  24  	  miss_table_name => 'svmc_miss_cat',
20:16:05  25  	  data_table_name => '&bldtable',
20:16:05  26  	  xform_view_name => 'xformed_build_miss_cat');
20:16:05  27  
20:16:05  28  	-- Perform outlier treatment.
20:16:05  29  	-- create clip table
20:16:05  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:16:05  31  
20:16:05  32  	-- populate clip table
20:16:05  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:16:05  34  	  clip_table_name => 'svmc_clip',
20:16:05  35  	  data_table_name => '&bldtable',
20:16:05  36  	  tail_frac	  => 0.025,
20:16:05  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:16:05  38  
20:16:05  39  	-- xform input data to winsorized data
20:16:05  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:16:05  41  	  clip_table_name => 'svmc_clip',
20:16:05  42  	  data_table_name => '&bldtable',
20:16:05  43  	  xform_view_name => 'svmc_winsor');
20:16:05  44  
20:16:05  45  	-- create normalization table
20:16:05  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:16:05  47  
20:16:05  48  	-- populate normalization table based on winsorized data
20:16:05  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:16:05  50  	  norm_table_name => 'svmc_norm',
20:16:05  51  	  data_table_name => 'svmc_winsor',
20:16:05  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:16:05  53  
20:16:05  54  	-- normalize the original data
20:16:05  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:16:05  56  	  norm_table_name => 'svmc_norm',
20:16:05  57  	  data_table_name => '&bldtable',
20:16:05  58  	  xform_view_name => 'svmc_build_prep');
20:16:05  59  END;
20:16:05  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.82
20:16:07 SQL> 
20:16:07 SQL> ---------------------
20:16:07 SQL> -- CREATE A NEW MODEL
20:16:07 SQL> --
20:16:07 SQL> -- Cleanup old model with the same name for repeat runs
20:16:07 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:16:07   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:16:07   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.08
20:16:08 SQL> 
20:16:08 SQL> -- Build a new SVM Model
20:16:08 SQL> BEGIN
20:16:08   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:16:08   3  	  model_name	      => '&model_name',
20:16:08   4  	  mining_function     => dbms_data_mining.classification,
20:16:08   5  	  data_table_name     => 'svmc_build_prep',
20:16:08   6  	  case_id_column_name => '&case_id',
20:16:08   7  	  target_column_name  => '&target',
20:16:08   8  	  settings_table_name => 'svmc_settings');
20:16:08   9  END;
20:16:08  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:04.29
20:16:13 SQL> 
20:16:13 SQL> -----------------------------------------------------------------------
20:16:13 SQL> --			       APPLY/score THE MODEL
20:16:13 SQL> -----------------------------------------------------------------------
20:16:13 SQL> 
20:16:13 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:16:13 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:16:13   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:16:13   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:16:13 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:16:13   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:16:13   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:16:13 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:16:13   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:16:13   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:16:13 SQL> -----------------------
20:16:13 SQL> -- PREPARE SCORING DATA
20:16:13 SQL> --
20:16:13 SQL> -- If the data for model creation has been prepared, then the data
20:16:13 SQL> -- to be scored using the model must be prepared in the same manner
20:16:13 SQL> -- in order to obtain meaningful results.
20:16:13 SQL> --
20:16:13 SQL> -- 1. Missing Value treatment for all Predictors and
20:16:13 SQL> -- 2. Normalization
20:16:13 SQL> -- No outlier treatment will be performed during test and apply. The
20:16:13 SQL> -- normalization step is sufficient, since the normalization parameters
20:16:13 SQL> -- already capture the effects of outlier treatment done with build data.
20:16:13 SQL> --
20:16:13 SQL> BEGIN
20:16:13   2  	-- Xform Test data to replace missing values
20:16:13   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:16:13   4  	  miss_table_name => 'svmc_miss_num',
20:16:13   5  	  data_table_name => '&scoretable',
20:16:13   6  	  xform_view_name => 'xformed_apply_miss_num');
20:16:13   7  
20:16:13   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:16:13   9  	  miss_table_name => 'svmc_miss_cat',
20:16:13  10  	  data_table_name => '&scoretable',
20:16:13  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:16:13  12  
20:16:13  13  	-- Normalize the data to be scored
20:16:13  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:16:13  15  	  norm_table_name => 'svmc_norm',
20:16:13  16  	  data_table_name => '&scoretable',
20:16:13  17  	  xform_view_name => 'svmc_apply_prep');
20:16:13  18  END;
20:16:13  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.17
20:16:13 SQL> 
20:16:13 SQL> -- Maybe I already collected a score for this prdate.
20:16:13 SQL> -- DELETE it if I did:
20:16:13 SQL> DELETE svm62scores
20:16:13   2  WHERE score > 0
20:16:13   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:16:13   4  -- I need to supply the target attribute name:
20:16:13   5  AND targ = '&1'
20:16:13   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gattn'

0 rows deleted.

Elapsed: 00:00:00.01
20:16:13 SQL> 
20:16:13 SQL> -- We do a drumroll here:
20:16:13 SQL> 
20:16:13 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:16:13   2  SELECT
20:16:13   3  prdate
20:16:13   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:16:13   5  ,sysdate
20:16:13   6  ,SUBSTR(prdate,1,7)pair
20:16:13   7  ,SUBSTR(prdate,-19)ydate
20:16:13   8  ,'&1'
20:16:13   9  FROM svmc_apply_prep
20:16:13  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gattn'

1 row created.

Elapsed: 00:00:00.05
20:16:13 SQL> @score1_5min.sql	      2011-01-07 00:30:00 aud_usd
20:16:13 SQL> --
20:16:13 SQL> -- score1_5min.sql
20:16:13 SQL> --
20:16:13 SQL> 
20:16:13 SQL> -- Demo:
20:16:13 SQL> -- @score1_5min.sql 2010-12-31 20:45:01 aud_usd
20:16:13 SQL> 
20:16:13 SQL> CREATE OR REPLACE VIEW sme AS
20:16:13   2  SELECT
20:16:13   3  prdate
20:16:13   4  ,NULL gatt
20:16:13   5  ,g00
20:16:13   6  ,g01
20:16:13   7  ,g02
20:16:13   8  ,g03
20:16:13   9  ,g04
20:16:13  10  ,g05
20:16:13  11  ,g06
20:16:13  12  ,g07
20:16:13  13  ,g08
20:16:13  14  ,g09
20:16:13  15  ,g10
20:16:13  16  ,g11
20:16:13  17  ,g12
20:16:13  18  ,g13
20:16:13  19  ,g14
20:16:13  20  ,g15
20:16:13  21  ,g16
20:16:13  22  ,g17
20:16:13  23  ,g18
20:16:13  24  ,g19
20:16:13  25  ,g20
20:16:13  26  ,g21
20:16:13  27  ,g22
20:16:13  28  ,g23
20:16:13  29  ,g24
20:16:13  30  ,g25
20:16:13  31  ,g26
20:16:13  32  ,g27
20:16:13  33  ,g28
20:16:13  34  ,g29
20:16:13  35  ,g30
20:16:13  36  ,g31
20:16:13  37  ,g32
20:16:13  38  ,g33
20:16:13  39  ,g34
20:16:13  40  ,g35
20:16:13  41  ,g36
20:16:13  42  ,g37
20:16:13  43  ,g38
20:16:13  44  ,g39
20:16:13  45  ,g40
20:16:13  46  ,g41
20:16:13  47  FROM modsrc
20:16:13  48  WHERE ydate = '&1'||' '||'&2'
20:16:13  49  AND pair = '&3'
20:16:13  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2011-01-07'||' '||'00:30:00'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:16:13 SQL> 
20:16:13 SQL> -- rpt
20:16:13 SQL> -- We should see just 1 row:
20:16:13 SQL> 
20:16:13 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.02
20:16:13 SQL> 
20:16:13 SQL> -- Build the model:
20:16:13 SQL> CREATE OR REPLACE VIEW bme AS
20:16:13   2  SELECT
20:16:13   3  prdate
20:16:13   4  ,gatt
20:16:13   5  ,g00
20:16:13   6  ,g01
20:16:13   7  ,g02
20:16:13   8  ,g03
20:16:13   9  ,g04
20:16:13  10  ,g05
20:16:13  11  ,g06
20:16:13  12  ,g07
20:16:13  13  ,g08
20:16:13  14  ,g09
20:16:13  15  ,g10
20:16:13  16  ,g11
20:16:13  17  ,g12
20:16:13  18  ,g13
20:16:13  19  ,g14
20:16:13  20  ,g15
20:16:13  21  ,g16
20:16:13  22  ,g17
20:16:13  23  ,g18
20:16:13  24  ,g19
20:16:13  25  ,g20
20:16:13  26  ,g21
20:16:13  27  ,g22
20:16:13  28  ,g23
20:16:13  29  ,g24
20:16:13  30  ,g25
20:16:13  31  ,g26
20:16:13  32  ,g27
20:16:13  33  ,g28
20:16:13  34  ,g29
20:16:13  35  ,g30
20:16:13  36  ,g31
20:16:13  37  ,g32
20:16:13  38  ,g33
20:16:13  39  ,g34
20:16:13  40  ,g35
20:16:13  41  ,g36
20:16:13  42  ,g37
20:16:13  43  ,g38
20:16:13  44  ,g39
20:16:13  45  ,g40
20:16:13  46  ,g41
20:16:13  47  FROM modsrc
20:16:13  48  WHERE gatt IN('nup','up')
20:16:13  49  -- Use only rows which are older than 1 day:
20:16:13  50  AND 1+ydate < '&1'||' '||'&2'
20:16:13  51  AND pair = '&3'
20:16:13  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2011-01-07'||' '||'00:30:00'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.03
20:16:13 SQL> 
20:16:13 SQL> -- rpt
20:16:13 SQL> 
20:16:13 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt;

GAT COUNT(PRDATE)
--- -------------
nup	    11910
up	     7088

Elapsed: 00:00:00.02
20:16:13 SQL> 
20:16:13 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2011-01-06 00:25:00

Elapsed: 00:00:00.02
20:16:13 SQL> 
20:16:13 SQL> -- Now build model from bme and score sme
20:16:13 SQL> @score1.sql gatt
20:16:13 SQL> --
20:16:13 SQL> -- score1.sql
20:16:13 SQL> --
20:16:13 SQL> 
20:16:13 SQL> -- I use this script to send 5 params to score.sql
20:16:13 SQL> -- which does the heavy lifting of creating an SVM model.
20:16:13 SQL> -- Then at the very end of this script I use the model
20:16:13 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:16:13 SQL> 
20:16:13 SQL> -- I call this script from 2 other scripts:
20:16:13 SQL> -- score1_5min.sql
20:16:13 SQL> -- score1_5min_gattn.sql
20:16:13 SQL> 
20:16:13 SQL> -- The 1st param is the name of the target attribute.
20:16:13 SQL> -- I like to call my target attributes either gatt or gattn.
20:16:13 SQL> 
20:16:13 SQL> -- Demo:
20:16:13 SQL> -- @score1.sql 'gatt'
20:16:13 SQL> -- @score1.sql 'gattn'
20:16:13 SQL> 
20:16:13 SQL> -- Now, I fill up svmc_apply_prep.
20:16:13 SQL> -- I use same model_name used in score.sql
20:16:13 SQL> DEFINE model_name = 'svmfx101'
20:16:13 SQL> DEFINE bldtable	= 'bme'
20:16:13 SQL> DEFINE scoretable = 'sme'
20:16:13 SQL> DEFINE case_id	= 'prdate'
20:16:13 SQL> -- Demo:
20:16:13 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:16:13 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:16:13 SQL> --
20:16:13 SQL> -- score.sql
20:16:13 SQL> --
20:16:13 SQL> 
20:16:13 SQL> -- usage: score.sql
20:16:13 SQL> 
20:16:13 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:16:13 SQL> 
20:16:13 SQL> -- DEFINE target	   = 'gatt'
20:16:13 SQL> -- DEFINE model_name = 'svmfx101'
20:16:13 SQL> -- DEFINE bldtable   = 'bme'
20:16:13 SQL> -- DEFINE scoretable = 'sme'
20:16:13 SQL> -- DEFINE case_id    = 'prdate'
20:16:13 SQL> 
20:16:13 SQL> DEFINE target	= '&1'
20:16:13 SQL> DEFINE model_name = '&2'
20:16:13 SQL> DEFINE bldtable	= '&3'
20:16:13 SQL> DEFINE scoretable = '&4'
20:16:13 SQL> DEFINE case_id	= '&5'
20:16:13 SQL> 
20:16:13 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:16:13 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:16:13 SQL> 
20:16:13 SQL> -- Builds an SVM model using pl/sql.
20:16:13 SQL> 
20:16:13 SQL> -----------------------------------------------------------------------
20:16:13 SQL> --			    BUILD THE MODEL
20:16:13 SQL> -----------------------------------------------------------------------
20:16:13 SQL> 
20:16:13 SQL> -- Cleanup old build data preparation objects for repeat runs
20:16:13 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.00
20:16:13 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:16:13 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:16:13 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.01
20:16:13 SQL> 
20:16:13 SQL> 
20:16:13 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:16:13 SQL> --
20:16:13 SQL> -- DROP	TABLE svmc_settings ;
20:16:13 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:16:13 SQL> -- DELETE svmc_settings;
20:16:13 SQL> 
20:16:13 SQL> -- The default classification algorithm is Naive Bayes. So override
20:16:13 SQL> -- this choice to SVM using a settings table.
20:16:13 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:16:13 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:16:13 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:16:13 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:16:13 SQL> -- models.
20:16:13 SQL> --
20:16:13 SQL> 
20:16:13 SQL> -- Do this once and then comment it out.
20:16:13 SQL> -- That makes script go faster.
20:16:13 SQL> -- BEGIN
20:16:13 SQL> -- -- Populate settings table
20:16:13 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:16:13 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:16:13 SQL> --
20:16:13 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:16:13 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:16:13 SQL> --
20:16:13 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:16:13 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:16:13 SQL> --   COMMIT;
20:16:13 SQL> -- END;
20:16:13 SQL> -- /
20:16:13 SQL> 
20:16:13 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:16:13 SQL> 
20:16:13 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:16:13   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:16:13   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:16:13 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:16:13   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:16:13   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:16:13 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:16:13   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:16:13   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:16:13 SQL> 
20:16:13 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:16:13   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:16:13   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
20:16:13 SQL> 
20:16:13 SQL> --------------------------------
20:16:13 SQL> -- PREPARE BUILD (TRAINING) DATA
20:16:13 SQL> --
20:16:13 SQL> 
20:16:13 SQL> -- 1. Missing Value treatment for all Predictors and
20:16:13 SQL> -- 2. Outlier Treatment and
20:16:13 SQL> -- 3. Normalization are performed below.
20:16:13 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:16:13 SQL> --    normalized here.
20:16:13 SQL> 
20:16:13 SQL> BEGIN
20:16:13   2  	-- Perform missing value treatment for all predictors
20:16:13   3  	-- create miss tables
20:16:13   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:16:13   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:16:13   6  
20:16:13   7  	-- populate miss tables
20:16:13   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:16:13   9  	  miss_table_name => 'svmc_miss_num',
20:16:13  10  	  data_table_name => '&bldtable',
20:16:13  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:16:13  12  
20:16:13  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:16:13  14  	  miss_table_name => 'svmc_miss_cat',
20:16:13  15  	  data_table_name => '&bldtable',
20:16:13  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:16:13  17  
20:16:13  18  	-- xform input data to replace missing values
20:16:13  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:16:13  20  	  miss_table_name => 'svmc_miss_num',
20:16:13  21  	  data_table_name => '&bldtable',
20:16:13  22  	  xform_view_name => 'xformed_build_miss_num');
20:16:13  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:16:13  24  	  miss_table_name => 'svmc_miss_cat',
20:16:13  25  	  data_table_name => '&bldtable',
20:16:13  26  	  xform_view_name => 'xformed_build_miss_cat');
20:16:13  27  
20:16:13  28  	-- Perform outlier treatment.
20:16:13  29  	-- create clip table
20:16:13  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:16:13  31  
20:16:13  32  	-- populate clip table
20:16:13  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:16:13  34  	  clip_table_name => 'svmc_clip',
20:16:13  35  	  data_table_name => '&bldtable',
20:16:13  36  	  tail_frac	  => 0.025,
20:16:13  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:16:13  38  
20:16:13  39  	-- xform input data to winsorized data
20:16:13  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:16:13  41  	  clip_table_name => 'svmc_clip',
20:16:13  42  	  data_table_name => '&bldtable',
20:16:13  43  	  xform_view_name => 'svmc_winsor');
20:16:13  44  
20:16:13  45  	-- create normalization table
20:16:13  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:16:13  47  
20:16:13  48  	-- populate normalization table based on winsorized data
20:16:13  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:16:13  50  	  norm_table_name => 'svmc_norm',
20:16:13  51  	  data_table_name => 'svmc_winsor',
20:16:13  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:16:13  53  
20:16:13  54  	-- normalize the original data
20:16:13  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:16:13  56  	  norm_table_name => 'svmc_norm',
20:16:13  57  	  data_table_name => '&bldtable',
20:16:13  58  	  xform_view_name => 'svmc_build_prep');
20:16:13  59  END;
20:16:13  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:02.41
20:16:16 SQL> 
20:16:16 SQL> ---------------------
20:16:16 SQL> -- CREATE A NEW MODEL
20:16:16 SQL> --
20:16:16 SQL> -- Cleanup old model with the same name for repeat runs
20:16:16 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:16:16   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:16:16   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.91
20:16:16 SQL> 
20:16:16 SQL> -- Build a new SVM Model
20:16:16 SQL> BEGIN
20:16:16   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:16:16   3  	  model_name	      => '&model_name',
20:16:16   4  	  mining_function     => dbms_data_mining.classification,
20:16:16   5  	  data_table_name     => 'svmc_build_prep',
20:16:16   6  	  case_id_column_name => '&case_id',
20:16:16   7  	  target_column_name  => '&target',
20:16:16   8  	  settings_table_name => 'svmc_settings');
20:16:16   9  END;
20:16:16  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:05.41
20:16:22 SQL> 
20:16:22 SQL> -----------------------------------------------------------------------
20:16:22 SQL> --			       APPLY/score THE MODEL
20:16:22 SQL> -----------------------------------------------------------------------
20:16:22 SQL> 
20:16:22 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:16:22 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:16:22   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:16:22   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:16:22 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:16:22   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:16:22   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:16:22 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:16:22   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:16:22   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:16:22 SQL> -----------------------
20:16:22 SQL> -- PREPARE SCORING DATA
20:16:22 SQL> --
20:16:22 SQL> -- If the data for model creation has been prepared, then the data
20:16:22 SQL> -- to be scored using the model must be prepared in the same manner
20:16:22 SQL> -- in order to obtain meaningful results.
20:16:22 SQL> --
20:16:22 SQL> -- 1. Missing Value treatment for all Predictors and
20:16:22 SQL> -- 2. Normalization
20:16:22 SQL> -- No outlier treatment will be performed during test and apply. The
20:16:22 SQL> -- normalization step is sufficient, since the normalization parameters
20:16:22 SQL> -- already capture the effects of outlier treatment done with build data.
20:16:22 SQL> --
20:16:22 SQL> BEGIN
20:16:22   2  	-- Xform Test data to replace missing values
20:16:22   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:16:22   4  	  miss_table_name => 'svmc_miss_num',
20:16:22   5  	  data_table_name => '&scoretable',
20:16:22   6  	  xform_view_name => 'xformed_apply_miss_num');
20:16:22   7  
20:16:22   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:16:22   9  	  miss_table_name => 'svmc_miss_cat',
20:16:22  10  	  data_table_name => '&scoretable',
20:16:22  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:16:22  12  
20:16:22  13  	-- Normalize the data to be scored
20:16:22  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:16:22  15  	  norm_table_name => 'svmc_norm',
20:16:22  16  	  data_table_name => '&scoretable',
20:16:22  17  	  xform_view_name => 'svmc_apply_prep');
20:16:22  18  END;
20:16:22  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.17
20:16:22 SQL> 
20:16:22 SQL> -- Maybe I already collected a score for this prdate.
20:16:22 SQL> -- DELETE it if I did:
20:16:22 SQL> DELETE svm62scores
20:16:22   2  WHERE score > 0
20:16:22   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:16:22   4  -- I need to supply the target attribute name:
20:16:22   5  AND targ = '&1'
20:16:22   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gatt'

0 rows deleted.

Elapsed: 00:00:00.01
20:16:22 SQL> 
20:16:22 SQL> -- We do a drumroll here:
20:16:22 SQL> 
20:16:22 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:16:22   2  SELECT
20:16:22   3  prdate
20:16:22   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:16:22   5  ,sysdate
20:16:22   6  ,SUBSTR(prdate,1,7)pair
20:16:22   7  ,SUBSTR(prdate,-19)ydate
20:16:22   8  ,'&1'
20:16:22   9  FROM svmc_apply_prep
20:16:22  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gatt'

1 row created.

Elapsed: 00:00:00.05
20:16:22 SQL> @score1_5min.sql	      2010-12-20 07:50:00 aud_usd
20:16:22 SQL> --
20:16:22 SQL> -- score1_5min.sql
20:16:22 SQL> --
20:16:22 SQL> 
20:16:22 SQL> -- Demo:
20:16:22 SQL> -- @score1_5min.sql 2010-12-31 20:45:01 aud_usd
20:16:22 SQL> 
20:16:22 SQL> CREATE OR REPLACE VIEW sme AS
20:16:22   2  SELECT
20:16:22   3  prdate
20:16:22   4  ,NULL gatt
20:16:22   5  ,g00
20:16:22   6  ,g01
20:16:22   7  ,g02
20:16:22   8  ,g03
20:16:22   9  ,g04
20:16:22  10  ,g05
20:16:22  11  ,g06
20:16:22  12  ,g07
20:16:22  13  ,g08
20:16:22  14  ,g09
20:16:22  15  ,g10
20:16:22  16  ,g11
20:16:22  17  ,g12
20:16:22  18  ,g13
20:16:22  19  ,g14
20:16:22  20  ,g15
20:16:22  21  ,g16
20:16:22  22  ,g17
20:16:22  23  ,g18
20:16:22  24  ,g19
20:16:22  25  ,g20
20:16:22  26  ,g21
20:16:22  27  ,g22
20:16:22  28  ,g23
20:16:22  29  ,g24
20:16:22  30  ,g25
20:16:22  31  ,g26
20:16:22  32  ,g27
20:16:22  33  ,g28
20:16:22  34  ,g29
20:16:22  35  ,g30
20:16:22  36  ,g31
20:16:22  37  ,g32
20:16:22  38  ,g33
20:16:22  39  ,g34
20:16:22  40  ,g35
20:16:22  41  ,g36
20:16:22  42  ,g37
20:16:22  43  ,g38
20:16:22  44  ,g39
20:16:22  45  ,g40
20:16:22  46  ,g41
20:16:22  47  FROM modsrc
20:16:22  48  WHERE ydate = '&1'||' '||'&2'
20:16:22  49  AND pair = '&3'
20:16:22  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-12-20'||' '||'07:50:00'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.05
20:16:22 SQL> 
20:16:22 SQL> -- rpt
20:16:22 SQL> -- We should see just 1 row:
20:16:22 SQL> 
20:16:22 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.02
20:16:22 SQL> 
20:16:22 SQL> -- Build the model:
20:16:22 SQL> CREATE OR REPLACE VIEW bme AS
20:16:22   2  SELECT
20:16:22   3  prdate
20:16:22   4  ,gatt
20:16:22   5  ,g00
20:16:22   6  ,g01
20:16:22   7  ,g02
20:16:22   8  ,g03
20:16:22   9  ,g04
20:16:22  10  ,g05
20:16:22  11  ,g06
20:16:22  12  ,g07
20:16:22  13  ,g08
20:16:22  14  ,g09
20:16:22  15  ,g10
20:16:22  16  ,g11
20:16:22  17  ,g12
20:16:22  18  ,g13
20:16:22  19  ,g14
20:16:22  20  ,g15
20:16:22  21  ,g16
20:16:22  22  ,g17
20:16:22  23  ,g18
20:16:22  24  ,g19
20:16:22  25  ,g20
20:16:22  26  ,g21
20:16:22  27  ,g22
20:16:22  28  ,g23
20:16:22  29  ,g24
20:16:22  30  ,g25
20:16:22  31  ,g26
20:16:22  32  ,g27
20:16:22  33  ,g28
20:16:22  34  ,g29
20:16:22  35  ,g30
20:16:22  36  ,g31
20:16:22  37  ,g32
20:16:22  38  ,g33
20:16:22  39  ,g34
20:16:22  40  ,g35
20:16:22  41  ,g36
20:16:22  42  ,g37
20:16:22  43  ,g38
20:16:22  44  ,g39
20:16:22  45  ,g40
20:16:22  46  ,g41
20:16:22  47  FROM modsrc
20:16:22  48  WHERE gatt IN('nup','up')
20:16:22  49  -- Use only rows which are older than 1 day:
20:16:22  50  AND 1+ydate < '&1'||' '||'&2'
20:16:22  51  AND pair = '&3'
20:16:22  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-12-20'||' '||'07:50:00'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.05
20:16:22 SQL> 
20:16:22 SQL> -- rpt
20:16:22 SQL> 
20:16:22 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt;

GAT COUNT(PRDATE)
--- -------------
nup	     9469
up	     5852

Elapsed: 00:00:00.03
20:16:22 SQL> 
20:16:22 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-12-17 21:55:00

Elapsed: 00:00:00.01
20:16:22 SQL> 
20:16:22 SQL> -- Now build model from bme and score sme
20:16:22 SQL> @score1.sql gatt
20:16:22 SQL> --
20:16:22 SQL> -- score1.sql
20:16:22 SQL> --
20:16:22 SQL> 
20:16:22 SQL> -- I use this script to send 5 params to score.sql
20:16:22 SQL> -- which does the heavy lifting of creating an SVM model.
20:16:22 SQL> -- Then at the very end of this script I use the model
20:16:22 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:16:22 SQL> 
20:16:22 SQL> -- I call this script from 2 other scripts:
20:16:22 SQL> -- score1_5min.sql
20:16:22 SQL> -- score1_5min_gattn.sql
20:16:22 SQL> 
20:16:22 SQL> -- The 1st param is the name of the target attribute.
20:16:22 SQL> -- I like to call my target attributes either gatt or gattn.
20:16:22 SQL> 
20:16:22 SQL> -- Demo:
20:16:22 SQL> -- @score1.sql 'gatt'
20:16:22 SQL> -- @score1.sql 'gattn'
20:16:22 SQL> 
20:16:22 SQL> -- Now, I fill up svmc_apply_prep.
20:16:22 SQL> -- I use same model_name used in score.sql
20:16:22 SQL> DEFINE model_name = 'svmfx101'
20:16:22 SQL> DEFINE bldtable	= 'bme'
20:16:22 SQL> DEFINE scoretable = 'sme'
20:16:22 SQL> DEFINE case_id	= 'prdate'
20:16:22 SQL> -- Demo:
20:16:22 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:16:22 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:16:22 SQL> --
20:16:22 SQL> -- score.sql
20:16:22 SQL> --
20:16:22 SQL> 
20:16:22 SQL> -- usage: score.sql
20:16:22 SQL> 
20:16:22 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:16:22 SQL> 
20:16:22 SQL> -- DEFINE target	   = 'gatt'
20:16:22 SQL> -- DEFINE model_name = 'svmfx101'
20:16:22 SQL> -- DEFINE bldtable   = 'bme'
20:16:22 SQL> -- DEFINE scoretable = 'sme'
20:16:22 SQL> -- DEFINE case_id    = 'prdate'
20:16:22 SQL> 
20:16:22 SQL> DEFINE target	= '&1'
20:16:22 SQL> DEFINE model_name = '&2'
20:16:22 SQL> DEFINE bldtable	= '&3'
20:16:22 SQL> DEFINE scoretable = '&4'
20:16:22 SQL> DEFINE case_id	= '&5'
20:16:22 SQL> 
20:16:22 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:16:22 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:16:22 SQL> 
20:16:22 SQL> -- Builds an SVM model using pl/sql.
20:16:22 SQL> 
20:16:22 SQL> -----------------------------------------------------------------------
20:16:22 SQL> --			    BUILD THE MODEL
20:16:22 SQL> -----------------------------------------------------------------------
20:16:22 SQL> 
20:16:22 SQL> -- Cleanup old build data preparation objects for repeat runs
20:16:22 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.00
20:16:22 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:16:22 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:16:22 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.00
20:16:22 SQL> 
20:16:22 SQL> 
20:16:22 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:16:22 SQL> --
20:16:22 SQL> -- DROP	TABLE svmc_settings ;
20:16:22 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:16:22 SQL> -- DELETE svmc_settings;
20:16:22 SQL> 
20:16:22 SQL> -- The default classification algorithm is Naive Bayes. So override
20:16:22 SQL> -- this choice to SVM using a settings table.
20:16:22 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:16:22 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:16:22 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:16:22 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:16:22 SQL> -- models.
20:16:22 SQL> --
20:16:22 SQL> 
20:16:22 SQL> -- Do this once and then comment it out.
20:16:22 SQL> -- That makes script go faster.
20:16:22 SQL> -- BEGIN
20:16:22 SQL> -- -- Populate settings table
20:16:22 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:16:22 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:16:22 SQL> --
20:16:22 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:16:22 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:16:22 SQL> --
20:16:22 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:16:22 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:16:22 SQL> --   COMMIT;
20:16:22 SQL> -- END;
20:16:22 SQL> -- /
20:16:22 SQL> 
20:16:22 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.01
20:16:22 SQL> 
20:16:22 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:16:22   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:16:22   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:16:22 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:16:22   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:16:22   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:16:22 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:16:22   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:16:22   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:16:22 SQL> 
20:16:22 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:16:22   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:16:22   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:16:23 SQL> 
20:16:23 SQL> --------------------------------
20:16:23 SQL> -- PREPARE BUILD (TRAINING) DATA
20:16:23 SQL> --
20:16:23 SQL> 
20:16:23 SQL> -- 1. Missing Value treatment for all Predictors and
20:16:23 SQL> -- 2. Outlier Treatment and
20:16:23 SQL> -- 3. Normalization are performed below.
20:16:23 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:16:23 SQL> --    normalized here.
20:16:23 SQL> 
20:16:23 SQL> BEGIN
20:16:23   2  	-- Perform missing value treatment for all predictors
20:16:23   3  	-- create miss tables
20:16:23   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:16:23   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:16:23   6  
20:16:23   7  	-- populate miss tables
20:16:23   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:16:23   9  	  miss_table_name => 'svmc_miss_num',
20:16:23  10  	  data_table_name => '&bldtable',
20:16:23  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:16:23  12  
20:16:23  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:16:23  14  	  miss_table_name => 'svmc_miss_cat',
20:16:23  15  	  data_table_name => '&bldtable',
20:16:23  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:16:23  17  
20:16:23  18  	-- xform input data to replace missing values
20:16:23  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:16:23  20  	  miss_table_name => 'svmc_miss_num',
20:16:23  21  	  data_table_name => '&bldtable',
20:16:23  22  	  xform_view_name => 'xformed_build_miss_num');
20:16:23  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:16:23  24  	  miss_table_name => 'svmc_miss_cat',
20:16:23  25  	  data_table_name => '&bldtable',
20:16:23  26  	  xform_view_name => 'xformed_build_miss_cat');
20:16:23  27  
20:16:23  28  	-- Perform outlier treatment.
20:16:23  29  	-- create clip table
20:16:23  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:16:23  31  
20:16:23  32  	-- populate clip table
20:16:23  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:16:23  34  	  clip_table_name => 'svmc_clip',
20:16:23  35  	  data_table_name => '&bldtable',
20:16:23  36  	  tail_frac	  => 0.025,
20:16:23  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:16:23  38  
20:16:23  39  	-- xform input data to winsorized data
20:16:23  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:16:23  41  	  clip_table_name => 'svmc_clip',
20:16:23  42  	  data_table_name => '&bldtable',
20:16:23  43  	  xform_view_name => 'svmc_winsor');
20:16:23  44  
20:16:23  45  	-- create normalization table
20:16:23  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:16:23  47  
20:16:23  48  	-- populate normalization table based on winsorized data
20:16:23  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:16:23  50  	  norm_table_name => 'svmc_norm',
20:16:23  51  	  data_table_name => 'svmc_winsor',
20:16:23  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:16:23  53  
20:16:23  54  	-- normalize the original data
20:16:23  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:16:23  56  	  norm_table_name => 'svmc_norm',
20:16:23  57  	  data_table_name => '&bldtable',
20:16:23  58  	  xform_view_name => 'svmc_build_prep');
20:16:23  59  END;
20:16:23  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:02.09
20:16:25 SQL> 
20:16:25 SQL> ---------------------
20:16:25 SQL> -- CREATE A NEW MODEL
20:16:25 SQL> --
20:16:25 SQL> -- Cleanup old model with the same name for repeat runs
20:16:25 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:16:25   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:16:25   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.97
20:16:26 SQL> 
20:16:26 SQL> -- Build a new SVM Model
20:16:26 SQL> BEGIN
20:16:26   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:16:26   3  	  model_name	      => '&model_name',
20:16:26   4  	  mining_function     => dbms_data_mining.classification,
20:16:26   5  	  data_table_name     => 'svmc_build_prep',
20:16:26   6  	  case_id_column_name => '&case_id',
20:16:26   7  	  target_column_name  => '&target',
20:16:26   8  	  settings_table_name => 'svmc_settings');
20:16:26   9  END;
20:16:26  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:05.49
20:16:31 SQL> 
20:16:31 SQL> -----------------------------------------------------------------------
20:16:31 SQL> --			       APPLY/score THE MODEL
20:16:31 SQL> -----------------------------------------------------------------------
20:16:31 SQL> 
20:16:31 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:16:31 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:16:31   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:16:31   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:16:31 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:16:31   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:16:31   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:16:31 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:16:31   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:16:31   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:16:31 SQL> -----------------------
20:16:31 SQL> -- PREPARE SCORING DATA
20:16:31 SQL> --
20:16:31 SQL> -- If the data for model creation has been prepared, then the data
20:16:31 SQL> -- to be scored using the model must be prepared in the same manner
20:16:31 SQL> -- in order to obtain meaningful results.
20:16:31 SQL> --
20:16:31 SQL> -- 1. Missing Value treatment for all Predictors and
20:16:31 SQL> -- 2. Normalization
20:16:31 SQL> -- No outlier treatment will be performed during test and apply. The
20:16:31 SQL> -- normalization step is sufficient, since the normalization parameters
20:16:31 SQL> -- already capture the effects of outlier treatment done with build data.
20:16:31 SQL> --
20:16:31 SQL> BEGIN
20:16:31   2  	-- Xform Test data to replace missing values
20:16:31   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:16:31   4  	  miss_table_name => 'svmc_miss_num',
20:16:31   5  	  data_table_name => '&scoretable',
20:16:31   6  	  xform_view_name => 'xformed_apply_miss_num');
20:16:31   7  
20:16:31   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:16:31   9  	  miss_table_name => 'svmc_miss_cat',
20:16:31  10  	  data_table_name => '&scoretable',
20:16:31  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:16:31  12  
20:16:31  13  	-- Normalize the data to be scored
20:16:31  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:16:31  15  	  norm_table_name => 'svmc_norm',
20:16:31  16  	  data_table_name => '&scoretable',
20:16:31  17  	  xform_view_name => 'svmc_apply_prep');
20:16:31  18  END;
20:16:31  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.18
20:16:31 SQL> 
20:16:31 SQL> -- Maybe I already collected a score for this prdate.
20:16:31 SQL> -- DELETE it if I did:
20:16:31 SQL> DELETE svm62scores
20:16:31   2  WHERE score > 0
20:16:31   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:16:31   4  -- I need to supply the target attribute name:
20:16:31   5  AND targ = '&1'
20:16:31   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gatt'

0 rows deleted.

Elapsed: 00:00:00.02
20:16:31 SQL> 
20:16:31 SQL> -- We do a drumroll here:
20:16:31 SQL> 
20:16:31 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:16:31   2  SELECT
20:16:31   3  prdate
20:16:31   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:16:31   5  ,sysdate
20:16:31   6  ,SUBSTR(prdate,1,7)pair
20:16:31   7  ,SUBSTR(prdate,-19)ydate
20:16:31   8  ,'&1'
20:16:31   9  FROM svmc_apply_prep
20:16:31  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gatt'

1 row created.

Elapsed: 00:00:00.05
20:16:31 SQL> @score1_5min.sql	      2010-11-16 07:10:01 aud_usd
20:16:31 SQL> --
20:16:31 SQL> -- score1_5min.sql
20:16:31 SQL> --
20:16:31 SQL> 
20:16:31 SQL> -- Demo:
20:16:31 SQL> -- @score1_5min.sql 2010-12-31 20:45:01 aud_usd
20:16:31 SQL> 
20:16:31 SQL> CREATE OR REPLACE VIEW sme AS
20:16:31   2  SELECT
20:16:31   3  prdate
20:16:31   4  ,NULL gatt
20:16:31   5  ,g00
20:16:31   6  ,g01
20:16:31   7  ,g02
20:16:31   8  ,g03
20:16:31   9  ,g04
20:16:31  10  ,g05
20:16:31  11  ,g06
20:16:31  12  ,g07
20:16:31  13  ,g08
20:16:31  14  ,g09
20:16:31  15  ,g10
20:16:31  16  ,g11
20:16:31  17  ,g12
20:16:31  18  ,g13
20:16:31  19  ,g14
20:16:31  20  ,g15
20:16:31  21  ,g16
20:16:31  22  ,g17
20:16:31  23  ,g18
20:16:31  24  ,g19
20:16:31  25  ,g20
20:16:31  26  ,g21
20:16:31  27  ,g22
20:16:31  28  ,g23
20:16:31  29  ,g24
20:16:31  30  ,g25
20:16:31  31  ,g26
20:16:31  32  ,g27
20:16:31  33  ,g28
20:16:31  34  ,g29
20:16:31  35  ,g30
20:16:31  36  ,g31
20:16:31  37  ,g32
20:16:31  38  ,g33
20:16:31  39  ,g34
20:16:31  40  ,g35
20:16:31  41  ,g36
20:16:31  42  ,g37
20:16:31  43  ,g38
20:16:31  44  ,g39
20:16:31  45  ,g40
20:16:31  46  ,g41
20:16:31  47  FROM modsrc
20:16:31  48  WHERE ydate = '&1'||' '||'&2'
20:16:31  49  AND pair = '&3'
20:16:31  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-11-16'||' '||'07:10:01'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:16:31 SQL> 
20:16:31 SQL> -- rpt
20:16:31 SQL> -- We should see just 1 row:
20:16:31 SQL> 
20:16:31 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.02
20:16:31 SQL> 
20:16:31 SQL> -- Build the model:
20:16:31 SQL> CREATE OR REPLACE VIEW bme AS
20:16:31   2  SELECT
20:16:31   3  prdate
20:16:31   4  ,gatt
20:16:31   5  ,g00
20:16:31   6  ,g01
20:16:31   7  ,g02
20:16:31   8  ,g03
20:16:31   9  ,g04
20:16:31  10  ,g05
20:16:31  11  ,g06
20:16:31  12  ,g07
20:16:31  13  ,g08
20:16:31  14  ,g09
20:16:31  15  ,g10
20:16:31  16  ,g11
20:16:31  17  ,g12
20:16:31  18  ,g13
20:16:31  19  ,g14
20:16:31  20  ,g15
20:16:31  21  ,g16
20:16:31  22  ,g17
20:16:31  23  ,g18
20:16:31  24  ,g19
20:16:31  25  ,g20
20:16:31  26  ,g21
20:16:31  27  ,g22
20:16:31  28  ,g23
20:16:31  29  ,g24
20:16:31  30  ,g25
20:16:31  31  ,g26
20:16:31  32  ,g27
20:16:31  33  ,g28
20:16:31  34  ,g29
20:16:31  35  ,g30
20:16:31  36  ,g31
20:16:31  37  ,g32
20:16:31  38  ,g33
20:16:31  39  ,g34
20:16:31  40  ,g35
20:16:31  41  ,g36
20:16:31  42  ,g37
20:16:31  43  ,g38
20:16:31  44  ,g39
20:16:31  45  ,g40
20:16:31  46  ,g41
20:16:31  47  FROM modsrc
20:16:31  48  WHERE gatt IN('nup','up')
20:16:31  49  -- Use only rows which are older than 1 day:
20:16:31  50  AND 1+ydate < '&1'||' '||'&2'
20:16:31  51  AND pair = '&3'
20:16:31  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-11-16'||' '||'07:10:01'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:16:32 SQL> 
20:16:32 SQL> -- rpt
20:16:32 SQL> 
20:16:32 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt;

GAT COUNT(PRDATE)
--- -------------
nup	     5069
up	     3198

Elapsed: 00:00:00.02
20:16:32 SQL> 
20:16:32 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-11-15 07:05:01

Elapsed: 00:00:00.01
20:16:32 SQL> 
20:16:32 SQL> -- Now build model from bme and score sme
20:16:32 SQL> @score1.sql gatt
20:16:32 SQL> --
20:16:32 SQL> -- score1.sql
20:16:32 SQL> --
20:16:32 SQL> 
20:16:32 SQL> -- I use this script to send 5 params to score.sql
20:16:32 SQL> -- which does the heavy lifting of creating an SVM model.
20:16:32 SQL> -- Then at the very end of this script I use the model
20:16:32 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:16:32 SQL> 
20:16:32 SQL> -- I call this script from 2 other scripts:
20:16:32 SQL> -- score1_5min.sql
20:16:32 SQL> -- score1_5min_gattn.sql
20:16:32 SQL> 
20:16:32 SQL> -- The 1st param is the name of the target attribute.
20:16:32 SQL> -- I like to call my target attributes either gatt or gattn.
20:16:32 SQL> 
20:16:32 SQL> -- Demo:
20:16:32 SQL> -- @score1.sql 'gatt'
20:16:32 SQL> -- @score1.sql 'gattn'
20:16:32 SQL> 
20:16:32 SQL> -- Now, I fill up svmc_apply_prep.
20:16:32 SQL> -- I use same model_name used in score.sql
20:16:32 SQL> DEFINE model_name = 'svmfx101'
20:16:32 SQL> DEFINE bldtable	= 'bme'
20:16:32 SQL> DEFINE scoretable = 'sme'
20:16:32 SQL> DEFINE case_id	= 'prdate'
20:16:32 SQL> -- Demo:
20:16:32 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:16:32 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:16:32 SQL> --
20:16:32 SQL> -- score.sql
20:16:32 SQL> --
20:16:32 SQL> 
20:16:32 SQL> -- usage: score.sql
20:16:32 SQL> 
20:16:32 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:16:32 SQL> 
20:16:32 SQL> -- DEFINE target	   = 'gatt'
20:16:32 SQL> -- DEFINE model_name = 'svmfx101'
20:16:32 SQL> -- DEFINE bldtable   = 'bme'
20:16:32 SQL> -- DEFINE scoretable = 'sme'
20:16:32 SQL> -- DEFINE case_id    = 'prdate'
20:16:32 SQL> 
20:16:32 SQL> DEFINE target	= '&1'
20:16:32 SQL> DEFINE model_name = '&2'
20:16:32 SQL> DEFINE bldtable	= '&3'
20:16:32 SQL> DEFINE scoretable = '&4'
20:16:32 SQL> DEFINE case_id	= '&5'
20:16:32 SQL> 
20:16:32 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:16:32 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:16:32 SQL> 
20:16:32 SQL> -- Builds an SVM model using pl/sql.
20:16:32 SQL> 
20:16:32 SQL> -----------------------------------------------------------------------
20:16:32 SQL> --			    BUILD THE MODEL
20:16:32 SQL> -----------------------------------------------------------------------
20:16:32 SQL> 
20:16:32 SQL> -- Cleanup old build data preparation objects for repeat runs
20:16:32 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.00
20:16:32 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:16:32 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:16:32 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.01
20:16:32 SQL> 
20:16:32 SQL> 
20:16:32 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:16:32 SQL> --
20:16:32 SQL> -- DROP	TABLE svmc_settings ;
20:16:32 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:16:32 SQL> -- DELETE svmc_settings;
20:16:32 SQL> 
20:16:32 SQL> -- The default classification algorithm is Naive Bayes. So override
20:16:32 SQL> -- this choice to SVM using a settings table.
20:16:32 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:16:32 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:16:32 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:16:32 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:16:32 SQL> -- models.
20:16:32 SQL> --
20:16:32 SQL> 
20:16:32 SQL> -- Do this once and then comment it out.
20:16:32 SQL> -- That makes script go faster.
20:16:32 SQL> -- BEGIN
20:16:32 SQL> -- -- Populate settings table
20:16:32 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:16:32 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:16:32 SQL> --
20:16:32 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:16:32 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:16:32 SQL> --
20:16:32 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:16:32 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:16:32 SQL> --   COMMIT;
20:16:32 SQL> -- END;
20:16:32 SQL> -- /
20:16:32 SQL> 
20:16:32 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:16:32 SQL> 
20:16:32 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:16:32   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:16:32   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:16:32 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:16:32   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:16:32   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:16:32 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:16:32   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:16:32   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:16:32 SQL> 
20:16:32 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:16:32   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:16:32   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:16:32 SQL> 
20:16:32 SQL> --------------------------------
20:16:32 SQL> -- PREPARE BUILD (TRAINING) DATA
20:16:32 SQL> --
20:16:32 SQL> 
20:16:32 SQL> -- 1. Missing Value treatment for all Predictors and
20:16:32 SQL> -- 2. Outlier Treatment and
20:16:32 SQL> -- 3. Normalization are performed below.
20:16:32 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:16:32 SQL> --    normalized here.
20:16:32 SQL> 
20:16:32 SQL> BEGIN
20:16:32   2  	-- Perform missing value treatment for all predictors
20:16:32   3  	-- create miss tables
20:16:32   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:16:32   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:16:32   6  
20:16:32   7  	-- populate miss tables
20:16:32   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:16:32   9  	  miss_table_name => 'svmc_miss_num',
20:16:32  10  	  data_table_name => '&bldtable',
20:16:32  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:16:32  12  
20:16:32  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:16:32  14  	  miss_table_name => 'svmc_miss_cat',
20:16:32  15  	  data_table_name => '&bldtable',
20:16:32  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:16:32  17  
20:16:32  18  	-- xform input data to replace missing values
20:16:32  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:16:32  20  	  miss_table_name => 'svmc_miss_num',
20:16:32  21  	  data_table_name => '&bldtable',
20:16:32  22  	  xform_view_name => 'xformed_build_miss_num');
20:16:32  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:16:32  24  	  miss_table_name => 'svmc_miss_cat',
20:16:32  25  	  data_table_name => '&bldtable',
20:16:32  26  	  xform_view_name => 'xformed_build_miss_cat');
20:16:32  27  
20:16:32  28  	-- Perform outlier treatment.
20:16:32  29  	-- create clip table
20:16:32  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:16:32  31  
20:16:32  32  	-- populate clip table
20:16:32  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:16:32  34  	  clip_table_name => 'svmc_clip',
20:16:32  35  	  data_table_name => '&bldtable',
20:16:32  36  	  tail_frac	  => 0.025,
20:16:32  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:16:32  38  
20:16:32  39  	-- xform input data to winsorized data
20:16:32  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:16:32  41  	  clip_table_name => 'svmc_clip',
20:16:32  42  	  data_table_name => '&bldtable',
20:16:32  43  	  xform_view_name => 'svmc_winsor');
20:16:32  44  
20:16:32  45  	-- create normalization table
20:16:32  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:16:32  47  
20:16:32  48  	-- populate normalization table based on winsorized data
20:16:32  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:16:32  50  	  norm_table_name => 'svmc_norm',
20:16:32  51  	  data_table_name => 'svmc_winsor',
20:16:32  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:16:32  53  
20:16:32  54  	-- normalize the original data
20:16:32  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:16:32  56  	  norm_table_name => 'svmc_norm',
20:16:32  57  	  data_table_name => '&bldtable',
20:16:32  58  	  xform_view_name => 'svmc_build_prep');
20:16:32  59  END;
20:16:32  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.50
20:16:33 SQL> 
20:16:33 SQL> ---------------------
20:16:33 SQL> -- CREATE A NEW MODEL
20:16:33 SQL> --
20:16:33 SQL> -- Cleanup old model with the same name for repeat runs
20:16:33 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:16:33   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:16:33   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.93
20:16:34 SQL> 
20:16:34 SQL> -- Build a new SVM Model
20:16:34 SQL> BEGIN
20:16:34   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:16:34   3  	  model_name	      => '&model_name',
20:16:34   4  	  mining_function     => dbms_data_mining.classification,
20:16:34   5  	  data_table_name     => 'svmc_build_prep',
20:16:34   6  	  case_id_column_name => '&case_id',
20:16:34   7  	  target_column_name  => '&target',
20:16:34   8  	  settings_table_name => 'svmc_settings');
20:16:34   9  END;
20:16:34  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:03.57
20:16:38 SQL> 
20:16:38 SQL> -----------------------------------------------------------------------
20:16:38 SQL> --			       APPLY/score THE MODEL
20:16:38 SQL> -----------------------------------------------------------------------
20:16:38 SQL> 
20:16:38 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:16:38 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:16:38   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:16:38   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:16:38 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:16:38   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:16:38   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:16:38 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:16:38   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:16:38   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:16:38 SQL> -----------------------
20:16:38 SQL> -- PREPARE SCORING DATA
20:16:38 SQL> --
20:16:38 SQL> -- If the data for model creation has been prepared, then the data
20:16:38 SQL> -- to be scored using the model must be prepared in the same manner
20:16:38 SQL> -- in order to obtain meaningful results.
20:16:38 SQL> --
20:16:38 SQL> -- 1. Missing Value treatment for all Predictors and
20:16:38 SQL> -- 2. Normalization
20:16:38 SQL> -- No outlier treatment will be performed during test and apply. The
20:16:38 SQL> -- normalization step is sufficient, since the normalization parameters
20:16:38 SQL> -- already capture the effects of outlier treatment done with build data.
20:16:38 SQL> --
20:16:38 SQL> BEGIN
20:16:38   2  	-- Xform Test data to replace missing values
20:16:38   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:16:38   4  	  miss_table_name => 'svmc_miss_num',
20:16:38   5  	  data_table_name => '&scoretable',
20:16:38   6  	  xform_view_name => 'xformed_apply_miss_num');
20:16:38   7  
20:16:38   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:16:38   9  	  miss_table_name => 'svmc_miss_cat',
20:16:38  10  	  data_table_name => '&scoretable',
20:16:38  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:16:38  12  
20:16:38  13  	-- Normalize the data to be scored
20:16:38  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:16:38  15  	  norm_table_name => 'svmc_norm',
20:16:38  16  	  data_table_name => '&scoretable',
20:16:38  17  	  xform_view_name => 'svmc_apply_prep');
20:16:38  18  END;
20:16:38  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.17
20:16:38 SQL> 
20:16:38 SQL> -- Maybe I already collected a score for this prdate.
20:16:38 SQL> -- DELETE it if I did:
20:16:38 SQL> DELETE svm62scores
20:16:38   2  WHERE score > 0
20:16:38   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:16:38   4  -- I need to supply the target attribute name:
20:16:38   5  AND targ = '&1'
20:16:38   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gatt'

0 rows deleted.

Elapsed: 00:00:00.02
20:16:38 SQL> 
20:16:38 SQL> -- We do a drumroll here:
20:16:38 SQL> 
20:16:38 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:16:38   2  SELECT
20:16:38   3  prdate
20:16:38   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:16:38   5  ,sysdate
20:16:38   6  ,SUBSTR(prdate,1,7)pair
20:16:38   7  ,SUBSTR(prdate,-19)ydate
20:16:38   8  ,'&1'
20:16:38   9  FROM svmc_apply_prep
20:16:38  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gatt'

1 row created.

Elapsed: 00:00:00.05
20:16:38 SQL> @score1_5min_gattn.sql	2010-11-02 20:10:01 aud_usd
20:16:38 SQL> --
20:16:38 SQL> -- score1_5min_gattn.sql
20:16:38 SQL> --
20:16:38 SQL> 
20:16:38 SQL> -- Demo:
20:16:38 SQL> -- @score1_5min_gattn.sql 2010-12-31 20:45:01 aud_usd
20:16:38 SQL> 
20:16:38 SQL> CREATE OR REPLACE VIEW sme AS
20:16:38   2  SELECT
20:16:38   3  prdate
20:16:38   4  ,NULL gattn
20:16:38   5  ,g00
20:16:38   6  ,g01
20:16:38   7  ,g02
20:16:38   8  ,g03
20:16:38   9  ,g04
20:16:38  10  ,g05
20:16:38  11  ,g06
20:16:38  12  ,g07
20:16:38  13  ,g08
20:16:38  14  ,g09
20:16:38  15  ,g10
20:16:38  16  ,g11
20:16:38  17  ,g12
20:16:38  18  ,g13
20:16:38  19  ,g14
20:16:38  20  ,g15
20:16:38  21  ,g16
20:16:38  22  ,g17
20:16:38  23  ,g18
20:16:38  24  ,g19
20:16:38  25  ,g20
20:16:38  26  ,g21
20:16:38  27  ,g22
20:16:38  28  ,g23
20:16:38  29  ,g24
20:16:38  30  ,g25
20:16:38  31  ,g26
20:16:38  32  ,g27
20:16:38  33  ,g28
20:16:38  34  ,g29
20:16:38  35  ,g30
20:16:38  36  ,g31
20:16:38  37  ,g32
20:16:38  38  ,g33
20:16:38  39  ,g34
20:16:38  40  ,g35
20:16:38  41  ,g36
20:16:38  42  ,g37
20:16:38  43  ,g38
20:16:38  44  ,g39
20:16:38  45  ,g40
20:16:38  46  ,g41
20:16:38  47  FROM modsrc
20:16:38  48  WHERE ydate = '&1'||' '||'&2'
20:16:38  49  AND pair = '&3'
20:16:38  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-11-02'||' '||'20:10:01'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:16:38 SQL> 
20:16:38 SQL> -- rpt
20:16:38 SQL> -- We should see just 1 row:
20:16:38 SQL> 
20:16:38 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.02
20:16:38 SQL> 
20:16:38 SQL> -- Build the model:
20:16:38 SQL> CREATE OR REPLACE VIEW bme AS
20:16:38   2  SELECT
20:16:38   3  prdate
20:16:38   4  ,gattn
20:16:38   5  ,g00
20:16:38   6  ,g01
20:16:38   7  ,g02
20:16:38   8  ,g03
20:16:38   9  ,g04
20:16:38  10  ,g05
20:16:38  11  ,g06
20:16:38  12  ,g07
20:16:38  13  ,g08
20:16:38  14  ,g09
20:16:38  15  ,g10
20:16:38  16  ,g11
20:16:38  17  ,g12
20:16:38  18  ,g13
20:16:38  19  ,g14
20:16:38  20  ,g15
20:16:38  21  ,g16
20:16:38  22  ,g17
20:16:38  23  ,g18
20:16:38  24  ,g19
20:16:38  25  ,g20
20:16:38  26  ,g21
20:16:38  27  ,g22
20:16:38  28  ,g23
20:16:38  29  ,g24
20:16:38  30  ,g25
20:16:38  31  ,g26
20:16:38  32  ,g27
20:16:38  33  ,g28
20:16:38  34  ,g29
20:16:38  35  ,g30
20:16:38  36  ,g31
20:16:38  37  ,g32
20:16:38  38  ,g33
20:16:38  39  ,g34
20:16:38  40  ,g35
20:16:38  41  ,g36
20:16:38  42  ,g37
20:16:38  43  ,g38
20:16:38  44  ,g39
20:16:38  45  ,g40
20:16:38  46  ,g41
20:16:38  47  FROM modsrc
20:16:38  48  WHERE gattn IN('nup','up')
20:16:38  49  -- Use only rows which are older than 1 day:
20:16:38  50  AND 1+ydate < '&1'||' '||'&2'
20:16:38  51  AND pair = '&3'
20:16:38  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-11-02'||' '||'20:10:01'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.06
20:16:38 SQL> 
20:16:38 SQL> -- rpt
20:16:38 SQL> 
20:16:38 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	     3541
up	     1978

Elapsed: 00:00:00.02
20:16:38 SQL> 
20:16:38 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-11-01 20:05:01

Elapsed: 00:00:00.02
20:16:38 SQL> 
20:16:38 SQL> -- Now build model from bme and score sme
20:16:38 SQL> @score1.sql gattn
20:16:38 SQL> --
20:16:38 SQL> -- score1.sql
20:16:38 SQL> --
20:16:38 SQL> 
20:16:38 SQL> -- I use this script to send 5 params to score.sql
20:16:38 SQL> -- which does the heavy lifting of creating an SVM model.
20:16:38 SQL> -- Then at the very end of this script I use the model
20:16:38 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:16:38 SQL> 
20:16:38 SQL> -- I call this script from 2 other scripts:
20:16:38 SQL> -- score1_5min.sql
20:16:38 SQL> -- score1_5min_gattn.sql
20:16:38 SQL> 
20:16:38 SQL> -- The 1st param is the name of the target attribute.
20:16:38 SQL> -- I like to call my target attributes either gatt or gattn.
20:16:38 SQL> 
20:16:38 SQL> -- Demo:
20:16:38 SQL> -- @score1.sql 'gatt'
20:16:38 SQL> -- @score1.sql 'gattn'
20:16:38 SQL> 
20:16:38 SQL> -- Now, I fill up svmc_apply_prep.
20:16:38 SQL> -- I use same model_name used in score.sql
20:16:38 SQL> DEFINE model_name = 'svmfx101'
20:16:38 SQL> DEFINE bldtable	= 'bme'
20:16:38 SQL> DEFINE scoretable = 'sme'
20:16:38 SQL> DEFINE case_id	= 'prdate'
20:16:38 SQL> -- Demo:
20:16:38 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:16:38 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:16:38 SQL> --
20:16:38 SQL> -- score.sql
20:16:38 SQL> --
20:16:38 SQL> 
20:16:38 SQL> -- usage: score.sql
20:16:38 SQL> 
20:16:38 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:16:38 SQL> 
20:16:38 SQL> -- DEFINE target	   = 'gatt'
20:16:38 SQL> -- DEFINE model_name = 'svmfx101'
20:16:38 SQL> -- DEFINE bldtable   = 'bme'
20:16:38 SQL> -- DEFINE scoretable = 'sme'
20:16:38 SQL> -- DEFINE case_id    = 'prdate'
20:16:38 SQL> 
20:16:38 SQL> DEFINE target	= '&1'
20:16:38 SQL> DEFINE model_name = '&2'
20:16:38 SQL> DEFINE bldtable	= '&3'
20:16:38 SQL> DEFINE scoretable = '&4'
20:16:38 SQL> DEFINE case_id	= '&5'
20:16:38 SQL> 
20:16:38 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:16:38 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:16:38 SQL> 
20:16:38 SQL> -- Builds an SVM model using pl/sql.
20:16:38 SQL> 
20:16:38 SQL> -----------------------------------------------------------------------
20:16:38 SQL> --			    BUILD THE MODEL
20:16:38 SQL> -----------------------------------------------------------------------
20:16:38 SQL> 
20:16:38 SQL> -- Cleanup old build data preparation objects for repeat runs
20:16:38 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.00
20:16:38 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:16:38 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:16:38 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.00
20:16:38 SQL> 
20:16:38 SQL> 
20:16:38 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:16:38 SQL> --
20:16:38 SQL> -- DROP	TABLE svmc_settings ;
20:16:38 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:16:38 SQL> -- DELETE svmc_settings;
20:16:38 SQL> 
20:16:38 SQL> -- The default classification algorithm is Naive Bayes. So override
20:16:38 SQL> -- this choice to SVM using a settings table.
20:16:38 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:16:38 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:16:38 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:16:38 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:16:38 SQL> -- models.
20:16:38 SQL> --
20:16:38 SQL> 
20:16:38 SQL> -- Do this once and then comment it out.
20:16:38 SQL> -- That makes script go faster.
20:16:38 SQL> -- BEGIN
20:16:38 SQL> -- -- Populate settings table
20:16:38 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:16:38 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:16:38 SQL> --
20:16:38 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:16:38 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:16:38 SQL> --
20:16:38 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:16:38 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:16:38 SQL> --   COMMIT;
20:16:38 SQL> -- END;
20:16:38 SQL> -- /
20:16:38 SQL> 
20:16:38 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:16:38 SQL> 
20:16:38 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:16:38   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:16:38   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:16:38 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:16:38   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:16:38   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:16:38 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:16:38   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:16:38   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:16:38 SQL> 
20:16:38 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:16:38   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:16:38   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:16:38 SQL> 
20:16:38 SQL> --------------------------------
20:16:38 SQL> -- PREPARE BUILD (TRAINING) DATA
20:16:38 SQL> --
20:16:38 SQL> 
20:16:38 SQL> -- 1. Missing Value treatment for all Predictors and
20:16:38 SQL> -- 2. Outlier Treatment and
20:16:38 SQL> -- 3. Normalization are performed below.
20:16:38 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:16:38 SQL> --    normalized here.
20:16:38 SQL> 
20:16:38 SQL> BEGIN
20:16:38   2  	-- Perform missing value treatment for all predictors
20:16:38   3  	-- create miss tables
20:16:38   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:16:38   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:16:38   6  
20:16:38   7  	-- populate miss tables
20:16:38   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:16:38   9  	  miss_table_name => 'svmc_miss_num',
20:16:38  10  	  data_table_name => '&bldtable',
20:16:38  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:16:38  12  
20:16:38  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:16:38  14  	  miss_table_name => 'svmc_miss_cat',
20:16:38  15  	  data_table_name => '&bldtable',
20:16:38  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:16:38  17  
20:16:38  18  	-- xform input data to replace missing values
20:16:38  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:16:38  20  	  miss_table_name => 'svmc_miss_num',
20:16:38  21  	  data_table_name => '&bldtable',
20:16:38  22  	  xform_view_name => 'xformed_build_miss_num');
20:16:38  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:16:38  24  	  miss_table_name => 'svmc_miss_cat',
20:16:38  25  	  data_table_name => '&bldtable',
20:16:38  26  	  xform_view_name => 'xformed_build_miss_cat');
20:16:38  27  
20:16:38  28  	-- Perform outlier treatment.
20:16:38  29  	-- create clip table
20:16:38  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:16:38  31  
20:16:38  32  	-- populate clip table
20:16:38  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:16:38  34  	  clip_table_name => 'svmc_clip',
20:16:38  35  	  data_table_name => '&bldtable',
20:16:38  36  	  tail_frac	  => 0.025,
20:16:38  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:16:38  38  
20:16:38  39  	-- xform input data to winsorized data
20:16:38  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:16:38  41  	  clip_table_name => 'svmc_clip',
20:16:38  42  	  data_table_name => '&bldtable',
20:16:38  43  	  xform_view_name => 'svmc_winsor');
20:16:38  44  
20:16:38  45  	-- create normalization table
20:16:38  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:16:38  47  
20:16:38  48  	-- populate normalization table based on winsorized data
20:16:38  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:16:38  50  	  norm_table_name => 'svmc_norm',
20:16:38  51  	  data_table_name => 'svmc_winsor',
20:16:38  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:16:38  53  
20:16:38  54  	-- normalize the original data
20:16:38  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:16:38  56  	  norm_table_name => 'svmc_norm',
20:16:38  57  	  data_table_name => '&bldtable',
20:16:38  58  	  xform_view_name => 'svmc_build_prep');
20:16:38  59  END;
20:16:38  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.34
20:16:40 SQL> 
20:16:40 SQL> ---------------------
20:16:40 SQL> -- CREATE A NEW MODEL
20:16:40 SQL> --
20:16:40 SQL> -- Cleanup old model with the same name for repeat runs
20:16:40 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:16:40   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:16:40   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.99
20:16:41 SQL> 
20:16:41 SQL> -- Build a new SVM Model
20:16:41 SQL> BEGIN
20:16:41   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:16:41   3  	  model_name	      => '&model_name',
20:16:41   4  	  mining_function     => dbms_data_mining.classification,
20:16:41   5  	  data_table_name     => 'svmc_build_prep',
20:16:41   6  	  case_id_column_name => '&case_id',
20:16:41   7  	  target_column_name  => '&target',
20:16:41   8  	  settings_table_name => 'svmc_settings');
20:16:41   9  END;
20:16:41  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:03.60
20:16:44 SQL> 
20:16:44 SQL> -----------------------------------------------------------------------
20:16:44 SQL> --			       APPLY/score THE MODEL
20:16:44 SQL> -----------------------------------------------------------------------
20:16:44 SQL> 
20:16:44 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:16:44 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:16:44   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:16:44   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:16:44 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:16:44   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:16:44   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:16:44 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:16:44   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:16:44   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:16:44 SQL> -----------------------
20:16:44 SQL> -- PREPARE SCORING DATA
20:16:44 SQL> --
20:16:44 SQL> -- If the data for model creation has been prepared, then the data
20:16:44 SQL> -- to be scored using the model must be prepared in the same manner
20:16:44 SQL> -- in order to obtain meaningful results.
20:16:44 SQL> --
20:16:44 SQL> -- 1. Missing Value treatment for all Predictors and
20:16:44 SQL> -- 2. Normalization
20:16:44 SQL> -- No outlier treatment will be performed during test and apply. The
20:16:44 SQL> -- normalization step is sufficient, since the normalization parameters
20:16:44 SQL> -- already capture the effects of outlier treatment done with build data.
20:16:44 SQL> --
20:16:44 SQL> BEGIN
20:16:44   2  	-- Xform Test data to replace missing values
20:16:44   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:16:44   4  	  miss_table_name => 'svmc_miss_num',
20:16:44   5  	  data_table_name => '&scoretable',
20:16:44   6  	  xform_view_name => 'xformed_apply_miss_num');
20:16:44   7  
20:16:44   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:16:44   9  	  miss_table_name => 'svmc_miss_cat',
20:16:44  10  	  data_table_name => '&scoretable',
20:16:44  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:16:44  12  
20:16:44  13  	-- Normalize the data to be scored
20:16:44  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:16:44  15  	  norm_table_name => 'svmc_norm',
20:16:44  16  	  data_table_name => '&scoretable',
20:16:44  17  	  xform_view_name => 'svmc_apply_prep');
20:16:44  18  END;
20:16:44  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.18
20:16:45 SQL> 
20:16:45 SQL> -- Maybe I already collected a score for this prdate.
20:16:45 SQL> -- DELETE it if I did:
20:16:45 SQL> DELETE svm62scores
20:16:45   2  WHERE score > 0
20:16:45   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:16:45   4  -- I need to supply the target attribute name:
20:16:45   5  AND targ = '&1'
20:16:45   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gattn'

0 rows deleted.

Elapsed: 00:00:00.02
20:16:45 SQL> 
20:16:45 SQL> -- We do a drumroll here:
20:16:45 SQL> 
20:16:45 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:16:45   2  SELECT
20:16:45   3  prdate
20:16:45   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:16:45   5  ,sysdate
20:16:45   6  ,SUBSTR(prdate,1,7)pair
20:16:45   7  ,SUBSTR(prdate,-19)ydate
20:16:45   8  ,'&1'
20:16:45   9  FROM svmc_apply_prep
20:16:45  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gattn'

1 row created.

Elapsed: 00:00:00.05
20:16:45 SQL> @score1_5min.sql	      2010-10-19 14:50:01 aud_usd
20:16:45 SQL> --
20:16:45 SQL> -- score1_5min.sql
20:16:45 SQL> --
20:16:45 SQL> 
20:16:45 SQL> -- Demo:
20:16:45 SQL> -- @score1_5min.sql 2010-12-31 20:45:01 aud_usd
20:16:45 SQL> 
20:16:45 SQL> CREATE OR REPLACE VIEW sme AS
20:16:45   2  SELECT
20:16:45   3  prdate
20:16:45   4  ,NULL gatt
20:16:45   5  ,g00
20:16:45   6  ,g01
20:16:45   7  ,g02
20:16:45   8  ,g03
20:16:45   9  ,g04
20:16:45  10  ,g05
20:16:45  11  ,g06
20:16:45  12  ,g07
20:16:45  13  ,g08
20:16:45  14  ,g09
20:16:45  15  ,g10
20:16:45  16  ,g11
20:16:45  17  ,g12
20:16:45  18  ,g13
20:16:45  19  ,g14
20:16:45  20  ,g15
20:16:45  21  ,g16
20:16:45  22  ,g17
20:16:45  23  ,g18
20:16:45  24  ,g19
20:16:45  25  ,g20
20:16:45  26  ,g21
20:16:45  27  ,g22
20:16:45  28  ,g23
20:16:45  29  ,g24
20:16:45  30  ,g25
20:16:45  31  ,g26
20:16:45  32  ,g27
20:16:45  33  ,g28
20:16:45  34  ,g29
20:16:45  35  ,g30
20:16:45  36  ,g31
20:16:45  37  ,g32
20:16:45  38  ,g33
20:16:45  39  ,g34
20:16:45  40  ,g35
20:16:45  41  ,g36
20:16:45  42  ,g37
20:16:45  43  ,g38
20:16:45  44  ,g39
20:16:45  45  ,g40
20:16:45  46  ,g41
20:16:45  47  FROM modsrc
20:16:45  48  WHERE ydate = '&1'||' '||'&2'
20:16:45  49  AND pair = '&3'
20:16:45  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-10-19'||' '||'14:50:01'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.05
20:16:45 SQL> 
20:16:45 SQL> -- rpt
20:16:45 SQL> -- We should see just 1 row:
20:16:45 SQL> 
20:16:45 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.01
20:16:45 SQL> 
20:16:45 SQL> -- Build the model:
20:16:45 SQL> CREATE OR REPLACE VIEW bme AS
20:16:45   2  SELECT
20:16:45   3  prdate
20:16:45   4  ,gatt
20:16:45   5  ,g00
20:16:45   6  ,g01
20:16:45   7  ,g02
20:16:45   8  ,g03
20:16:45   9  ,g04
20:16:45  10  ,g05
20:16:45  11  ,g06
20:16:45  12  ,g07
20:16:45  13  ,g08
20:16:45  14  ,g09
20:16:45  15  ,g10
20:16:45  16  ,g11
20:16:45  17  ,g12
20:16:45  18  ,g13
20:16:45  19  ,g14
20:16:45  20  ,g15
20:16:45  21  ,g16
20:16:45  22  ,g17
20:16:45  23  ,g18
20:16:45  24  ,g19
20:16:45  25  ,g20
20:16:45  26  ,g21
20:16:45  27  ,g22
20:16:45  28  ,g23
20:16:45  29  ,g24
20:16:45  30  ,g25
20:16:45  31  ,g26
20:16:45  32  ,g27
20:16:45  33  ,g28
20:16:45  34  ,g29
20:16:45  35  ,g30
20:16:45  36  ,g31
20:16:45  37  ,g32
20:16:45  38  ,g33
20:16:45  39  ,g34
20:16:45  40  ,g35
20:16:45  41  ,g36
20:16:45  42  ,g37
20:16:45  43  ,g38
20:16:45  44  ,g39
20:16:45  45  ,g40
20:16:45  46  ,g41
20:16:45  47  FROM modsrc
20:16:45  48  WHERE gatt IN('nup','up')
20:16:45  49  -- Use only rows which are older than 1 day:
20:16:45  50  AND 1+ydate < '&1'||' '||'&2'
20:16:45  51  AND pair = '&3'
20:16:45  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-10-19'||' '||'14:50:01'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.05
20:16:45 SQL> 
20:16:45 SQL> -- rpt
20:16:45 SQL> 
20:16:45 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt;

GAT COUNT(PRDATE)
--- -------------
nup	     1431
up	     1120

Elapsed: 00:00:00.03
20:16:45 SQL> 
20:16:45 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-10-18 14:45:01

Elapsed: 00:00:00.01
20:16:45 SQL> 
20:16:45 SQL> -- Now build model from bme and score sme
20:16:45 SQL> @score1.sql gatt
20:16:45 SQL> --
20:16:45 SQL> -- score1.sql
20:16:45 SQL> --
20:16:45 SQL> 
20:16:45 SQL> -- I use this script to send 5 params to score.sql
20:16:45 SQL> -- which does the heavy lifting of creating an SVM model.
20:16:45 SQL> -- Then at the very end of this script I use the model
20:16:45 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:16:45 SQL> 
20:16:45 SQL> -- I call this script from 2 other scripts:
20:16:45 SQL> -- score1_5min.sql
20:16:45 SQL> -- score1_5min_gattn.sql
20:16:45 SQL> 
20:16:45 SQL> -- The 1st param is the name of the target attribute.
20:16:45 SQL> -- I like to call my target attributes either gatt or gattn.
20:16:45 SQL> 
20:16:45 SQL> -- Demo:
20:16:45 SQL> -- @score1.sql 'gatt'
20:16:45 SQL> -- @score1.sql 'gattn'
20:16:45 SQL> 
20:16:45 SQL> -- Now, I fill up svmc_apply_prep.
20:16:45 SQL> -- I use same model_name used in score.sql
20:16:45 SQL> DEFINE model_name = 'svmfx101'
20:16:45 SQL> DEFINE bldtable	= 'bme'
20:16:45 SQL> DEFINE scoretable = 'sme'
20:16:45 SQL> DEFINE case_id	= 'prdate'
20:16:45 SQL> -- Demo:
20:16:45 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:16:45 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:16:45 SQL> --
20:16:45 SQL> -- score.sql
20:16:45 SQL> --
20:16:45 SQL> 
20:16:45 SQL> -- usage: score.sql
20:16:45 SQL> 
20:16:45 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:16:45 SQL> 
20:16:45 SQL> -- DEFINE target	   = 'gatt'
20:16:45 SQL> -- DEFINE model_name = 'svmfx101'
20:16:45 SQL> -- DEFINE bldtable   = 'bme'
20:16:45 SQL> -- DEFINE scoretable = 'sme'
20:16:45 SQL> -- DEFINE case_id    = 'prdate'
20:16:45 SQL> 
20:16:45 SQL> DEFINE target	= '&1'
20:16:45 SQL> DEFINE model_name = '&2'
20:16:45 SQL> DEFINE bldtable	= '&3'
20:16:45 SQL> DEFINE scoretable = '&4'
20:16:45 SQL> DEFINE case_id	= '&5'
20:16:45 SQL> 
20:16:45 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:16:45 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:16:45 SQL> 
20:16:45 SQL> -- Builds an SVM model using pl/sql.
20:16:45 SQL> 
20:16:45 SQL> -----------------------------------------------------------------------
20:16:45 SQL> --			    BUILD THE MODEL
20:16:45 SQL> -----------------------------------------------------------------------
20:16:45 SQL> 
20:16:45 SQL> -- Cleanup old build data preparation objects for repeat runs
20:16:45 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.00
20:16:45 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.01
20:16:45 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:16:45 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.00
20:16:45 SQL> 
20:16:45 SQL> 
20:16:45 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:16:45 SQL> --
20:16:45 SQL> -- DROP	TABLE svmc_settings ;
20:16:45 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:16:45 SQL> -- DELETE svmc_settings;
20:16:45 SQL> 
20:16:45 SQL> -- The default classification algorithm is Naive Bayes. So override
20:16:45 SQL> -- this choice to SVM using a settings table.
20:16:45 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:16:45 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:16:45 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:16:45 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:16:45 SQL> -- models.
20:16:45 SQL> --
20:16:45 SQL> 
20:16:45 SQL> -- Do this once and then comment it out.
20:16:45 SQL> -- That makes script go faster.
20:16:45 SQL> -- BEGIN
20:16:45 SQL> -- -- Populate settings table
20:16:45 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:16:45 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:16:45 SQL> --
20:16:45 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:16:45 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:16:45 SQL> --
20:16:45 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:16:45 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:16:45 SQL> --   COMMIT;
20:16:45 SQL> -- END;
20:16:45 SQL> -- /
20:16:45 SQL> 
20:16:45 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:16:45 SQL> 
20:16:45 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:16:45   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:16:45   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:16:45 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:16:45   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:16:45   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:16:45 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:16:45   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:16:45   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:16:45 SQL> 
20:16:45 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:16:45   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:16:45   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:16:45 SQL> 
20:16:45 SQL> --------------------------------
20:16:45 SQL> -- PREPARE BUILD (TRAINING) DATA
20:16:45 SQL> --
20:16:45 SQL> 
20:16:45 SQL> -- 1. Missing Value treatment for all Predictors and
20:16:45 SQL> -- 2. Outlier Treatment and
20:16:45 SQL> -- 3. Normalization are performed below.
20:16:45 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:16:45 SQL> --    normalized here.
20:16:45 SQL> 
20:16:45 SQL> BEGIN
20:16:45   2  	-- Perform missing value treatment for all predictors
20:16:45   3  	-- create miss tables
20:16:45   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:16:45   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:16:45   6  
20:16:45   7  	-- populate miss tables
20:16:45   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:16:45   9  	  miss_table_name => 'svmc_miss_num',
20:16:45  10  	  data_table_name => '&bldtable',
20:16:45  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:16:45  12  
20:16:45  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:16:45  14  	  miss_table_name => 'svmc_miss_cat',
20:16:45  15  	  data_table_name => '&bldtable',
20:16:45  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:16:45  17  
20:16:45  18  	-- xform input data to replace missing values
20:16:45  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:16:45  20  	  miss_table_name => 'svmc_miss_num',
20:16:45  21  	  data_table_name => '&bldtable',
20:16:45  22  	  xform_view_name => 'xformed_build_miss_num');
20:16:45  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:16:45  24  	  miss_table_name => 'svmc_miss_cat',
20:16:45  25  	  data_table_name => '&bldtable',
20:16:45  26  	  xform_view_name => 'xformed_build_miss_cat');
20:16:45  27  
20:16:45  28  	-- Perform outlier treatment.
20:16:45  29  	-- create clip table
20:16:45  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:16:45  31  
20:16:45  32  	-- populate clip table
20:16:45  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:16:45  34  	  clip_table_name => 'svmc_clip',
20:16:45  35  	  data_table_name => '&bldtable',
20:16:45  36  	  tail_frac	  => 0.025,
20:16:45  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:16:45  38  
20:16:45  39  	-- xform input data to winsorized data
20:16:45  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:16:45  41  	  clip_table_name => 'svmc_clip',
20:16:45  42  	  data_table_name => '&bldtable',
20:16:45  43  	  xform_view_name => 'svmc_winsor');
20:16:45  44  
20:16:45  45  	-- create normalization table
20:16:45  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:16:45  47  
20:16:45  48  	-- populate normalization table based on winsorized data
20:16:45  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:16:45  50  	  norm_table_name => 'svmc_norm',
20:16:45  51  	  data_table_name => 'svmc_winsor',
20:16:45  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:16:45  53  
20:16:45  54  	-- normalize the original data
20:16:45  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:16:45  56  	  norm_table_name => 'svmc_norm',
20:16:45  57  	  data_table_name => '&bldtable',
20:16:45  58  	  xform_view_name => 'svmc_build_prep');
20:16:45  59  END;
20:16:45  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.24
20:16:46 SQL> 
20:16:46 SQL> ---------------------
20:16:46 SQL> -- CREATE A NEW MODEL
20:16:46 SQL> --
20:16:46 SQL> -- Cleanup old model with the same name for repeat runs
20:16:46 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:16:46   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:16:46   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.89
20:16:47 SQL> 
20:16:47 SQL> -- Build a new SVM Model
20:16:47 SQL> BEGIN
20:16:47   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:16:47   3  	  model_name	      => '&model_name',
20:16:47   4  	  mining_function     => dbms_data_mining.classification,
20:16:47   5  	  data_table_name     => 'svmc_build_prep',
20:16:47   6  	  case_id_column_name => '&case_id',
20:16:47   7  	  target_column_name  => '&target',
20:16:47   8  	  settings_table_name => 'svmc_settings');
20:16:47   9  END;
20:16:47  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:02.50
20:16:50 SQL> 
20:16:50 SQL> -----------------------------------------------------------------------
20:16:50 SQL> --			       APPLY/score THE MODEL
20:16:50 SQL> -----------------------------------------------------------------------
20:16:50 SQL> 
20:16:50 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:16:50 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:16:50   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:16:50   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.07
20:16:50 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:16:50   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:16:50   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.15
20:16:50 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:16:50   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:16:50   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.20
20:16:50 SQL> -----------------------
20:16:50 SQL> -- PREPARE SCORING DATA
20:16:50 SQL> --
20:16:50 SQL> -- If the data for model creation has been prepared, then the data
20:16:50 SQL> -- to be scored using the model must be prepared in the same manner
20:16:50 SQL> -- in order to obtain meaningful results.
20:16:50 SQL> --
20:16:50 SQL> -- 1. Missing Value treatment for all Predictors and
20:16:50 SQL> -- 2. Normalization
20:16:50 SQL> -- No outlier treatment will be performed during test and apply. The
20:16:50 SQL> -- normalization step is sufficient, since the normalization parameters
20:16:50 SQL> -- already capture the effects of outlier treatment done with build data.
20:16:50 SQL> --
20:16:50 SQL> BEGIN
20:16:50   2  	-- Xform Test data to replace missing values
20:16:50   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:16:50   4  	  miss_table_name => 'svmc_miss_num',
20:16:50   5  	  data_table_name => '&scoretable',
20:16:50   6  	  xform_view_name => 'xformed_apply_miss_num');
20:16:50   7  
20:16:50   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:16:50   9  	  miss_table_name => 'svmc_miss_cat',
20:16:50  10  	  data_table_name => '&scoretable',
20:16:50  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:16:50  12  
20:16:50  13  	-- Normalize the data to be scored
20:16:50  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:16:50  15  	  norm_table_name => 'svmc_norm',
20:16:50  16  	  data_table_name => '&scoretable',
20:16:50  17  	  xform_view_name => 'svmc_apply_prep');
20:16:50  18  END;
20:16:50  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.20
20:16:50 SQL> 
20:16:50 SQL> -- Maybe I already collected a score for this prdate.
20:16:50 SQL> -- DELETE it if I did:
20:16:50 SQL> DELETE svm62scores
20:16:50   2  WHERE score > 0
20:16:50   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:16:50   4  -- I need to supply the target attribute name:
20:16:50   5  AND targ = '&1'
20:16:50   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gatt'

0 rows deleted.

Elapsed: 00:00:00.01
20:16:50 SQL> 
20:16:50 SQL> -- We do a drumroll here:
20:16:50 SQL> 
20:16:50 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:16:50   2  SELECT
20:16:50   3  prdate
20:16:50   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:16:50   5  ,sysdate
20:16:50   6  ,SUBSTR(prdate,1,7)pair
20:16:50   7  ,SUBSTR(prdate,-19)ydate
20:16:50   8  ,'&1'
20:16:50   9  FROM svmc_apply_prep
20:16:50  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gatt'

1 row created.

Elapsed: 00:00:00.05
20:16:50 SQL> @score1_5min.sql	      2010-12-16 13:15:00 aud_usd
20:16:50 SQL> --
20:16:50 SQL> -- score1_5min.sql
20:16:50 SQL> --
20:16:50 SQL> 
20:16:50 SQL> -- Demo:
20:16:50 SQL> -- @score1_5min.sql 2010-12-31 20:45:01 aud_usd
20:16:50 SQL> 
20:16:50 SQL> CREATE OR REPLACE VIEW sme AS
20:16:50   2  SELECT
20:16:50   3  prdate
20:16:50   4  ,NULL gatt
20:16:50   5  ,g00
20:16:50   6  ,g01
20:16:50   7  ,g02
20:16:50   8  ,g03
20:16:50   9  ,g04
20:16:50  10  ,g05
20:16:50  11  ,g06
20:16:50  12  ,g07
20:16:50  13  ,g08
20:16:50  14  ,g09
20:16:50  15  ,g10
20:16:50  16  ,g11
20:16:50  17  ,g12
20:16:50  18  ,g13
20:16:50  19  ,g14
20:16:50  20  ,g15
20:16:50  21  ,g16
20:16:50  22  ,g17
20:16:50  23  ,g18
20:16:50  24  ,g19
20:16:50  25  ,g20
20:16:50  26  ,g21
20:16:50  27  ,g22
20:16:50  28  ,g23
20:16:50  29  ,g24
20:16:50  30  ,g25
20:16:50  31  ,g26
20:16:50  32  ,g27
20:16:50  33  ,g28
20:16:50  34  ,g29
20:16:50  35  ,g30
20:16:50  36  ,g31
20:16:50  37  ,g32
20:16:50  38  ,g33
20:16:50  39  ,g34
20:16:50  40  ,g35
20:16:50  41  ,g36
20:16:50  42  ,g37
20:16:50  43  ,g38
20:16:50  44  ,g39
20:16:50  45  ,g40
20:16:50  46  ,g41
20:16:50  47  FROM modsrc
20:16:50  48  WHERE ydate = '&1'||' '||'&2'
20:16:50  49  AND pair = '&3'
20:16:50  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-12-16'||' '||'13:15:00'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.05
20:16:50 SQL> 
20:16:50 SQL> -- rpt
20:16:50 SQL> -- We should see just 1 row:
20:16:50 SQL> 
20:16:50 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.01
20:16:50 SQL> 
20:16:50 SQL> -- Build the model:
20:16:50 SQL> CREATE OR REPLACE VIEW bme AS
20:16:50   2  SELECT
20:16:50   3  prdate
20:16:50   4  ,gatt
20:16:50   5  ,g00
20:16:50   6  ,g01
20:16:50   7  ,g02
20:16:50   8  ,g03
20:16:50   9  ,g04
20:16:50  10  ,g05
20:16:50  11  ,g06
20:16:50  12  ,g07
20:16:50  13  ,g08
20:16:50  14  ,g09
20:16:50  15  ,g10
20:16:50  16  ,g11
20:16:50  17  ,g12
20:16:50  18  ,g13
20:16:50  19  ,g14
20:16:50  20  ,g15
20:16:50  21  ,g16
20:16:50  22  ,g17
20:16:50  23  ,g18
20:16:50  24  ,g19
20:16:50  25  ,g20
20:16:50  26  ,g21
20:16:50  27  ,g22
20:16:50  28  ,g23
20:16:50  29  ,g24
20:16:50  30  ,g25
20:16:50  31  ,g26
20:16:50  32  ,g27
20:16:50  33  ,g28
20:16:50  34  ,g29
20:16:50  35  ,g30
20:16:50  36  ,g31
20:16:50  37  ,g32
20:16:50  38  ,g33
20:16:50  39  ,g34
20:16:50  40  ,g35
20:16:50  41  ,g36
20:16:50  42  ,g37
20:16:50  43  ,g38
20:16:50  44  ,g39
20:16:50  45  ,g40
20:16:50  46  ,g41
20:16:50  47  FROM modsrc
20:16:50  48  WHERE gatt IN('nup','up')
20:16:50  49  -- Use only rows which are older than 1 day:
20:16:50  50  AND 1+ydate < '&1'||' '||'&2'
20:16:50  51  AND pair = '&3'
20:16:50  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-12-16'||' '||'13:15:00'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:16:50 SQL> 
20:16:50 SQL> -- rpt
20:16:50 SQL> 
20:16:50 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt;

GAT COUNT(PRDATE)
--- -------------
nup	     9021
up	     5626

Elapsed: 00:00:00.02
20:16:50 SQL> 
20:16:50 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-12-15 13:10:00

Elapsed: 00:00:00.01
20:16:50 SQL> 
20:16:50 SQL> -- Now build model from bme and score sme
20:16:50 SQL> @score1.sql gatt
20:16:50 SQL> --
20:16:50 SQL> -- score1.sql
20:16:50 SQL> --
20:16:50 SQL> 
20:16:50 SQL> -- I use this script to send 5 params to score.sql
20:16:50 SQL> -- which does the heavy lifting of creating an SVM model.
20:16:50 SQL> -- Then at the very end of this script I use the model
20:16:50 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:16:50 SQL> 
20:16:50 SQL> -- I call this script from 2 other scripts:
20:16:50 SQL> -- score1_5min.sql
20:16:50 SQL> -- score1_5min_gattn.sql
20:16:50 SQL> 
20:16:50 SQL> -- The 1st param is the name of the target attribute.
20:16:50 SQL> -- I like to call my target attributes either gatt or gattn.
20:16:50 SQL> 
20:16:50 SQL> -- Demo:
20:16:50 SQL> -- @score1.sql 'gatt'
20:16:50 SQL> -- @score1.sql 'gattn'
20:16:50 SQL> 
20:16:50 SQL> -- Now, I fill up svmc_apply_prep.
20:16:50 SQL> -- I use same model_name used in score.sql
20:16:50 SQL> DEFINE model_name = 'svmfx101'
20:16:50 SQL> DEFINE bldtable	= 'bme'
20:16:50 SQL> DEFINE scoretable = 'sme'
20:16:50 SQL> DEFINE case_id	= 'prdate'
20:16:50 SQL> -- Demo:
20:16:50 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:16:50 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:16:50 SQL> --
20:16:50 SQL> -- score.sql
20:16:50 SQL> --
20:16:50 SQL> 
20:16:50 SQL> -- usage: score.sql
20:16:50 SQL> 
20:16:50 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:16:50 SQL> 
20:16:50 SQL> -- DEFINE target	   = 'gatt'
20:16:50 SQL> -- DEFINE model_name = 'svmfx101'
20:16:50 SQL> -- DEFINE bldtable   = 'bme'
20:16:50 SQL> -- DEFINE scoretable = 'sme'
20:16:50 SQL> -- DEFINE case_id    = 'prdate'
20:16:50 SQL> 
20:16:50 SQL> DEFINE target	= '&1'
20:16:50 SQL> DEFINE model_name = '&2'
20:16:50 SQL> DEFINE bldtable	= '&3'
20:16:50 SQL> DEFINE scoretable = '&4'
20:16:50 SQL> DEFINE case_id	= '&5'
20:16:50 SQL> 
20:16:50 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:16:50 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:16:50 SQL> 
20:16:50 SQL> -- Builds an SVM model using pl/sql.
20:16:50 SQL> 
20:16:50 SQL> -----------------------------------------------------------------------
20:16:50 SQL> --			    BUILD THE MODEL
20:16:50 SQL> -----------------------------------------------------------------------
20:16:50 SQL> 
20:16:50 SQL> -- Cleanup old build data preparation objects for repeat runs
20:16:50 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.00
20:16:50 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:16:50 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:16:50 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.00
20:16:50 SQL> 
20:16:50 SQL> 
20:16:50 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:16:50 SQL> --
20:16:50 SQL> -- DROP	TABLE svmc_settings ;
20:16:50 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:16:50 SQL> -- DELETE svmc_settings;
20:16:50 SQL> 
20:16:50 SQL> -- The default classification algorithm is Naive Bayes. So override
20:16:50 SQL> -- this choice to SVM using a settings table.
20:16:50 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:16:50 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:16:50 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:16:50 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:16:50 SQL> -- models.
20:16:50 SQL> --
20:16:50 SQL> 
20:16:50 SQL> -- Do this once and then comment it out.
20:16:50 SQL> -- That makes script go faster.
20:16:50 SQL> -- BEGIN
20:16:50 SQL> -- -- Populate settings table
20:16:50 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:16:50 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:16:50 SQL> --
20:16:50 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:16:50 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:16:50 SQL> --
20:16:50 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:16:50 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:16:50 SQL> --   COMMIT;
20:16:50 SQL> -- END;
20:16:50 SQL> -- /
20:16:50 SQL> 
20:16:50 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:16:50 SQL> 
20:16:50 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:16:50   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:16:50   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:16:50 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:16:50   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:16:50   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:16:50 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:16:50   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:16:50   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:16:50 SQL> 
20:16:50 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:16:50   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:16:50   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:16:50 SQL> 
20:16:50 SQL> --------------------------------
20:16:50 SQL> -- PREPARE BUILD (TRAINING) DATA
20:16:50 SQL> --
20:16:50 SQL> 
20:16:50 SQL> -- 1. Missing Value treatment for all Predictors and
20:16:50 SQL> -- 2. Outlier Treatment and
20:16:50 SQL> -- 3. Normalization are performed below.
20:16:50 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:16:50 SQL> --    normalized here.
20:16:50 SQL> 
20:16:50 SQL> BEGIN
20:16:50   2  	-- Perform missing value treatment for all predictors
20:16:50   3  	-- create miss tables
20:16:50   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:16:50   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:16:50   6  
20:16:50   7  	-- populate miss tables
20:16:50   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:16:50   9  	  miss_table_name => 'svmc_miss_num',
20:16:50  10  	  data_table_name => '&bldtable',
20:16:50  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:16:50  12  
20:16:50  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:16:50  14  	  miss_table_name => 'svmc_miss_cat',
20:16:50  15  	  data_table_name => '&bldtable',
20:16:50  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:16:50  17  
20:16:50  18  	-- xform input data to replace missing values
20:16:50  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:16:50  20  	  miss_table_name => 'svmc_miss_num',
20:16:50  21  	  data_table_name => '&bldtable',
20:16:50  22  	  xform_view_name => 'xformed_build_miss_num');
20:16:50  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:16:50  24  	  miss_table_name => 'svmc_miss_cat',
20:16:50  25  	  data_table_name => '&bldtable',
20:16:50  26  	  xform_view_name => 'xformed_build_miss_cat');
20:16:50  27  
20:16:50  28  	-- Perform outlier treatment.
20:16:50  29  	-- create clip table
20:16:50  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:16:50  31  
20:16:50  32  	-- populate clip table
20:16:50  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:16:50  34  	  clip_table_name => 'svmc_clip',
20:16:50  35  	  data_table_name => '&bldtable',
20:16:50  36  	  tail_frac	  => 0.025,
20:16:50  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:16:50  38  
20:16:50  39  	-- xform input data to winsorized data
20:16:50  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:16:50  41  	  clip_table_name => 'svmc_clip',
20:16:50  42  	  data_table_name => '&bldtable',
20:16:50  43  	  xform_view_name => 'svmc_winsor');
20:16:50  44  
20:16:50  45  	-- create normalization table
20:16:50  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:16:50  47  
20:16:50  48  	-- populate normalization table based on winsorized data
20:16:50  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:16:50  50  	  norm_table_name => 'svmc_norm',
20:16:50  51  	  data_table_name => 'svmc_winsor',
20:16:50  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:16:50  53  
20:16:50  54  	-- normalize the original data
20:16:50  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:16:50  56  	  norm_table_name => 'svmc_norm',
20:16:50  57  	  data_table_name => '&bldtable',
20:16:50  58  	  xform_view_name => 'svmc_build_prep');
20:16:50  59  END;
20:16:50  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:02.00
20:16:52 SQL> 
20:16:52 SQL> ---------------------
20:16:52 SQL> -- CREATE A NEW MODEL
20:16:52 SQL> --
20:16:52 SQL> -- Cleanup old model with the same name for repeat runs
20:16:52 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:16:52   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:16:52   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.04
20:16:54 SQL> 
20:16:54 SQL> -- Build a new SVM Model
20:16:54 SQL> BEGIN
20:16:54   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:16:54   3  	  model_name	      => '&model_name',
20:16:54   4  	  mining_function     => dbms_data_mining.classification,
20:16:54   5  	  data_table_name     => 'svmc_build_prep',
20:16:54   6  	  case_id_column_name => '&case_id',
20:16:54   7  	  target_column_name  => '&target',
20:16:54   8  	  settings_table_name => 'svmc_settings');
20:16:54   9  END;
20:16:54  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:04.25
20:16:58 SQL> 
20:16:58 SQL> -----------------------------------------------------------------------
20:16:58 SQL> --			       APPLY/score THE MODEL
20:16:58 SQL> -----------------------------------------------------------------------
20:16:58 SQL> 
20:16:58 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:16:58 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:16:58   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:16:58   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:16:58 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:16:58   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:16:58   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:16:58 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:16:58   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:16:58   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:16:58 SQL> -----------------------
20:16:58 SQL> -- PREPARE SCORING DATA
20:16:58 SQL> --
20:16:58 SQL> -- If the data for model creation has been prepared, then the data
20:16:58 SQL> -- to be scored using the model must be prepared in the same manner
20:16:58 SQL> -- in order to obtain meaningful results.
20:16:58 SQL> --
20:16:58 SQL> -- 1. Missing Value treatment for all Predictors and
20:16:58 SQL> -- 2. Normalization
20:16:58 SQL> -- No outlier treatment will be performed during test and apply. The
20:16:58 SQL> -- normalization step is sufficient, since the normalization parameters
20:16:58 SQL> -- already capture the effects of outlier treatment done with build data.
20:16:58 SQL> --
20:16:58 SQL> BEGIN
20:16:58   2  	-- Xform Test data to replace missing values
20:16:58   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:16:58   4  	  miss_table_name => 'svmc_miss_num',
20:16:58   5  	  data_table_name => '&scoretable',
20:16:58   6  	  xform_view_name => 'xformed_apply_miss_num');
20:16:58   7  
20:16:58   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:16:58   9  	  miss_table_name => 'svmc_miss_cat',
20:16:58  10  	  data_table_name => '&scoretable',
20:16:58  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:16:58  12  
20:16:58  13  	-- Normalize the data to be scored
20:16:58  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:16:58  15  	  norm_table_name => 'svmc_norm',
20:16:58  16  	  data_table_name => '&scoretable',
20:16:58  17  	  xform_view_name => 'svmc_apply_prep');
20:16:58  18  END;
20:16:58  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.16
20:16:58 SQL> 
20:16:58 SQL> -- Maybe I already collected a score for this prdate.
20:16:58 SQL> -- DELETE it if I did:
20:16:58 SQL> DELETE svm62scores
20:16:58   2  WHERE score > 0
20:16:58   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:16:58   4  -- I need to supply the target attribute name:
20:16:58   5  AND targ = '&1'
20:16:58   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gatt'

0 rows deleted.

Elapsed: 00:00:00.02
20:16:58 SQL> 
20:16:58 SQL> -- We do a drumroll here:
20:16:58 SQL> 
20:16:58 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:16:58   2  SELECT
20:16:58   3  prdate
20:16:58   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:16:58   5  ,sysdate
20:16:58   6  ,SUBSTR(prdate,1,7)pair
20:16:58   7  ,SUBSTR(prdate,-19)ydate
20:16:58   8  ,'&1'
20:16:58   9  FROM svmc_apply_prep
20:16:58  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gatt'

1 row created.

Elapsed: 00:00:00.05
20:16:58 SQL> @score1_5min.sql	      2010-12-30 02:40:00 aud_usd
20:16:58 SQL> --
20:16:58 SQL> -- score1_5min.sql
20:16:58 SQL> --
20:16:58 SQL> 
20:16:58 SQL> -- Demo:
20:16:58 SQL> -- @score1_5min.sql 2010-12-31 20:45:01 aud_usd
20:16:58 SQL> 
20:16:58 SQL> CREATE OR REPLACE VIEW sme AS
20:16:58   2  SELECT
20:16:58   3  prdate
20:16:58   4  ,NULL gatt
20:16:58   5  ,g00
20:16:58   6  ,g01
20:16:58   7  ,g02
20:16:58   8  ,g03
20:16:58   9  ,g04
20:16:58  10  ,g05
20:16:58  11  ,g06
20:16:58  12  ,g07
20:16:58  13  ,g08
20:16:58  14  ,g09
20:16:58  15  ,g10
20:16:58  16  ,g11
20:16:58  17  ,g12
20:16:58  18  ,g13
20:16:58  19  ,g14
20:16:58  20  ,g15
20:16:58  21  ,g16
20:16:58  22  ,g17
20:16:58  23  ,g18
20:16:58  24  ,g19
20:16:58  25  ,g20
20:16:58  26  ,g21
20:16:58  27  ,g22
20:16:58  28  ,g23
20:16:58  29  ,g24
20:16:58  30  ,g25
20:16:58  31  ,g26
20:16:58  32  ,g27
20:16:58  33  ,g28
20:16:58  34  ,g29
20:16:58  35  ,g30
20:16:58  36  ,g31
20:16:58  37  ,g32
20:16:58  38  ,g33
20:16:58  39  ,g34
20:16:58  40  ,g35
20:16:58  41  ,g36
20:16:58  42  ,g37
20:16:58  43  ,g38
20:16:58  44  ,g39
20:16:58  45  ,g40
20:16:58  46  ,g41
20:16:58  47  FROM modsrc
20:16:58  48  WHERE ydate = '&1'||' '||'&2'
20:16:58  49  AND pair = '&3'
20:16:58  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-12-30'||' '||'02:40:00'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:16:58 SQL> 
20:16:58 SQL> -- rpt
20:16:58 SQL> -- We should see just 1 row:
20:16:58 SQL> 
20:16:58 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.01
20:16:58 SQL> 
20:16:58 SQL> -- Build the model:
20:16:58 SQL> CREATE OR REPLACE VIEW bme AS
20:16:58   2  SELECT
20:16:58   3  prdate
20:16:58   4  ,gatt
20:16:58   5  ,g00
20:16:58   6  ,g01
20:16:58   7  ,g02
20:16:58   8  ,g03
20:16:58   9  ,g04
20:16:58  10  ,g05
20:16:58  11  ,g06
20:16:58  12  ,g07
20:16:58  13  ,g08
20:16:58  14  ,g09
20:16:58  15  ,g10
20:16:58  16  ,g11
20:16:58  17  ,g12
20:16:58  18  ,g13
20:16:58  19  ,g14
20:16:58  20  ,g15
20:16:58  21  ,g16
20:16:58  22  ,g17
20:16:58  23  ,g18
20:16:58  24  ,g19
20:16:58  25  ,g20
20:16:58  26  ,g21
20:16:58  27  ,g22
20:16:58  28  ,g23
20:16:58  29  ,g24
20:16:58  30  ,g25
20:16:58  31  ,g26
20:16:58  32  ,g27
20:16:58  33  ,g28
20:16:58  34  ,g29
20:16:58  35  ,g30
20:16:58  36  ,g31
20:16:58  37  ,g32
20:16:58  38  ,g33
20:16:58  39  ,g34
20:16:58  40  ,g35
20:16:58  41  ,g36
20:16:58  42  ,g37
20:16:58  43  ,g38
20:16:58  44  ,g39
20:16:58  45  ,g40
20:16:58  46  ,g41
20:16:58  47  FROM modsrc
20:16:58  48  WHERE gatt IN('nup','up')
20:16:58  49  -- Use only rows which are older than 1 day:
20:16:58  50  AND 1+ydate < '&1'||' '||'&2'
20:16:58  51  AND pair = '&3'
20:16:58  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-12-30'||' '||'02:40:00'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.05
20:16:58 SQL> 
20:16:58 SQL> -- rpt
20:16:58 SQL> 
20:16:58 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt;

GAT COUNT(PRDATE)
--- -------------
nup	    10630
up	     6686

Elapsed: 00:00:00.03
20:16:58 SQL> 
20:16:58 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-12-29 02:35:00

Elapsed: 00:00:00.02
20:16:58 SQL> 
20:16:58 SQL> -- Now build model from bme and score sme
20:16:58 SQL> @score1.sql gatt
20:16:58 SQL> --
20:16:58 SQL> -- score1.sql
20:16:58 SQL> --
20:16:58 SQL> 
20:16:58 SQL> -- I use this script to send 5 params to score.sql
20:16:58 SQL> -- which does the heavy lifting of creating an SVM model.
20:16:58 SQL> -- Then at the very end of this script I use the model
20:16:58 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:16:58 SQL> 
20:16:58 SQL> -- I call this script from 2 other scripts:
20:16:58 SQL> -- score1_5min.sql
20:16:58 SQL> -- score1_5min_gattn.sql
20:16:58 SQL> 
20:16:58 SQL> -- The 1st param is the name of the target attribute.
20:16:58 SQL> -- I like to call my target attributes either gatt or gattn.
20:16:58 SQL> 
20:16:58 SQL> -- Demo:
20:16:58 SQL> -- @score1.sql 'gatt'
20:16:58 SQL> -- @score1.sql 'gattn'
20:16:58 SQL> 
20:16:58 SQL> -- Now, I fill up svmc_apply_prep.
20:16:58 SQL> -- I use same model_name used in score.sql
20:16:58 SQL> DEFINE model_name = 'svmfx101'
20:16:58 SQL> DEFINE bldtable	= 'bme'
20:16:58 SQL> DEFINE scoretable = 'sme'
20:16:58 SQL> DEFINE case_id	= 'prdate'
20:16:58 SQL> -- Demo:
20:16:58 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:16:58 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:16:58 SQL> --
20:16:58 SQL> -- score.sql
20:16:58 SQL> --
20:16:58 SQL> 
20:16:58 SQL> -- usage: score.sql
20:16:58 SQL> 
20:16:58 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:16:58 SQL> 
20:16:58 SQL> -- DEFINE target	   = 'gatt'
20:16:58 SQL> -- DEFINE model_name = 'svmfx101'
20:16:58 SQL> -- DEFINE bldtable   = 'bme'
20:16:58 SQL> -- DEFINE scoretable = 'sme'
20:16:58 SQL> -- DEFINE case_id    = 'prdate'
20:16:58 SQL> 
20:16:58 SQL> DEFINE target	= '&1'
20:16:58 SQL> DEFINE model_name = '&2'
20:16:58 SQL> DEFINE bldtable	= '&3'
20:16:58 SQL> DEFINE scoretable = '&4'
20:16:58 SQL> DEFINE case_id	= '&5'
20:16:58 SQL> 
20:16:58 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:16:58 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:16:58 SQL> 
20:16:58 SQL> -- Builds an SVM model using pl/sql.
20:16:58 SQL> 
20:16:58 SQL> -----------------------------------------------------------------------
20:16:58 SQL> --			    BUILD THE MODEL
20:16:58 SQL> -----------------------------------------------------------------------
20:16:58 SQL> 
20:16:58 SQL> -- Cleanup old build data preparation objects for repeat runs
20:16:58 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.00
20:16:58 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:16:58 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:16:58 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.01
20:16:58 SQL> 
20:16:58 SQL> 
20:16:58 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:16:58 SQL> --
20:16:58 SQL> -- DROP	TABLE svmc_settings ;
20:16:58 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:16:58 SQL> -- DELETE svmc_settings;
20:16:58 SQL> 
20:16:58 SQL> -- The default classification algorithm is Naive Bayes. So override
20:16:58 SQL> -- this choice to SVM using a settings table.
20:16:58 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:16:58 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:16:58 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:16:58 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:16:58 SQL> -- models.
20:16:58 SQL> --
20:16:58 SQL> 
20:16:58 SQL> -- Do this once and then comment it out.
20:16:58 SQL> -- That makes script go faster.
20:16:58 SQL> -- BEGIN
20:16:58 SQL> -- -- Populate settings table
20:16:58 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:16:58 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:16:58 SQL> --
20:16:58 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:16:58 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:16:58 SQL> --
20:16:58 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:16:58 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:16:58 SQL> --   COMMIT;
20:16:58 SQL> -- END;
20:16:58 SQL> -- /
20:16:58 SQL> 
20:16:58 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:16:58 SQL> 
20:16:58 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:16:58   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:16:58   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:16:58 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:16:58   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:16:58   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:16:58 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:16:58   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:16:58   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:16:58 SQL> 
20:16:58 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:16:58   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:16:58   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:16:58 SQL> 
20:16:58 SQL> --------------------------------
20:16:58 SQL> -- PREPARE BUILD (TRAINING) DATA
20:16:58 SQL> --
20:16:58 SQL> 
20:16:58 SQL> -- 1. Missing Value treatment for all Predictors and
20:16:58 SQL> -- 2. Outlier Treatment and
20:16:58 SQL> -- 3. Normalization are performed below.
20:16:58 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:16:58 SQL> --    normalized here.
20:16:58 SQL> 
20:16:58 SQL> BEGIN
20:16:58   2  	-- Perform missing value treatment for all predictors
20:16:58   3  	-- create miss tables
20:16:58   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:16:58   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:16:58   6  
20:16:58   7  	-- populate miss tables
20:16:58   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:16:58   9  	  miss_table_name => 'svmc_miss_num',
20:16:58  10  	  data_table_name => '&bldtable',
20:16:58  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:16:58  12  
20:16:58  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:16:58  14  	  miss_table_name => 'svmc_miss_cat',
20:16:58  15  	  data_table_name => '&bldtable',
20:16:58  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:16:58  17  
20:16:58  18  	-- xform input data to replace missing values
20:16:58  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:16:58  20  	  miss_table_name => 'svmc_miss_num',
20:16:58  21  	  data_table_name => '&bldtable',
20:16:58  22  	  xform_view_name => 'xformed_build_miss_num');
20:16:58  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:16:58  24  	  miss_table_name => 'svmc_miss_cat',
20:16:58  25  	  data_table_name => '&bldtable',
20:16:58  26  	  xform_view_name => 'xformed_build_miss_cat');
20:16:58  27  
20:16:58  28  	-- Perform outlier treatment.
20:16:58  29  	-- create clip table
20:16:58  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:16:58  31  
20:16:58  32  	-- populate clip table
20:16:58  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:16:58  34  	  clip_table_name => 'svmc_clip',
20:16:58  35  	  data_table_name => '&bldtable',
20:16:58  36  	  tail_frac	  => 0.025,
20:16:58  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:16:58  38  
20:16:58  39  	-- xform input data to winsorized data
20:16:58  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:16:58  41  	  clip_table_name => 'svmc_clip',
20:16:58  42  	  data_table_name => '&bldtable',
20:16:58  43  	  xform_view_name => 'svmc_winsor');
20:16:58  44  
20:16:58  45  	-- create normalization table
20:16:58  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:16:58  47  
20:16:58  48  	-- populate normalization table based on winsorized data
20:16:58  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:16:58  50  	  norm_table_name => 'svmc_norm',
20:16:58  51  	  data_table_name => 'svmc_winsor',
20:16:58  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:16:58  53  
20:16:58  54  	-- normalize the original data
20:16:58  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:16:58  56  	  norm_table_name => 'svmc_norm',
20:16:58  57  	  data_table_name => '&bldtable',
20:16:58  58  	  xform_view_name => 'svmc_build_prep');
20:16:58  59  END;
20:16:58  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:02.23
20:17:01 SQL> 
20:17:01 SQL> ---------------------
20:17:01 SQL> -- CREATE A NEW MODEL
20:17:01 SQL> --
20:17:01 SQL> -- Cleanup old model with the same name for repeat runs
20:17:01 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:17:01   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:17:01   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.16
20:17:02 SQL> 
20:17:02 SQL> -- Build a new SVM Model
20:17:02 SQL> BEGIN
20:17:02   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:17:02   3  	  model_name	      => '&model_name',
20:17:02   4  	  mining_function     => dbms_data_mining.classification,
20:17:02   5  	  data_table_name     => 'svmc_build_prep',
20:17:02   6  	  case_id_column_name => '&case_id',
20:17:02   7  	  target_column_name  => '&target',
20:17:02   8  	  settings_table_name => 'svmc_settings');
20:17:02   9  END;
20:17:02  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:04.41
20:17:06 SQL> 
20:17:06 SQL> -----------------------------------------------------------------------
20:17:06 SQL> --			       APPLY/score THE MODEL
20:17:06 SQL> -----------------------------------------------------------------------
20:17:06 SQL> 
20:17:06 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:17:06 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:17:06   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:17:06   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:17:06 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:17:06   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:17:06   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:17:06 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:17:06   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:17:06   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:17:06 SQL> -----------------------
20:17:06 SQL> -- PREPARE SCORING DATA
20:17:06 SQL> --
20:17:06 SQL> -- If the data for model creation has been prepared, then the data
20:17:06 SQL> -- to be scored using the model must be prepared in the same manner
20:17:06 SQL> -- in order to obtain meaningful results.
20:17:06 SQL> --
20:17:06 SQL> -- 1. Missing Value treatment for all Predictors and
20:17:06 SQL> -- 2. Normalization
20:17:06 SQL> -- No outlier treatment will be performed during test and apply. The
20:17:06 SQL> -- normalization step is sufficient, since the normalization parameters
20:17:06 SQL> -- already capture the effects of outlier treatment done with build data.
20:17:06 SQL> --
20:17:06 SQL> BEGIN
20:17:06   2  	-- Xform Test data to replace missing values
20:17:06   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:17:06   4  	  miss_table_name => 'svmc_miss_num',
20:17:06   5  	  data_table_name => '&scoretable',
20:17:06   6  	  xform_view_name => 'xformed_apply_miss_num');
20:17:06   7  
20:17:06   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:17:06   9  	  miss_table_name => 'svmc_miss_cat',
20:17:06  10  	  data_table_name => '&scoretable',
20:17:06  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:17:06  12  
20:17:06  13  	-- Normalize the data to be scored
20:17:06  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:17:06  15  	  norm_table_name => 'svmc_norm',
20:17:06  16  	  data_table_name => '&scoretable',
20:17:06  17  	  xform_view_name => 'svmc_apply_prep');
20:17:06  18  END;
20:17:06  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.17
20:17:06 SQL> 
20:17:06 SQL> -- Maybe I already collected a score for this prdate.
20:17:06 SQL> -- DELETE it if I did:
20:17:06 SQL> DELETE svm62scores
20:17:06   2  WHERE score > 0
20:17:06   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:17:06   4  -- I need to supply the target attribute name:
20:17:06   5  AND targ = '&1'
20:17:06   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gatt'

0 rows deleted.

Elapsed: 00:00:00.01
20:17:06 SQL> 
20:17:06 SQL> -- We do a drumroll here:
20:17:06 SQL> 
20:17:06 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:17:06   2  SELECT
20:17:06   3  prdate
20:17:06   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:17:06   5  ,sysdate
20:17:06   6  ,SUBSTR(prdate,1,7)pair
20:17:06   7  ,SUBSTR(prdate,-19)ydate
20:17:06   8  ,'&1'
20:17:06   9  FROM svmc_apply_prep
20:17:06  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gatt'

1 row created.

Elapsed: 00:00:00.05
20:17:07 SQL> @score1_5min.sql	      2010-11-22 14:55:01 aud_usd
20:17:07 SQL> --
20:17:07 SQL> -- score1_5min.sql
20:17:07 SQL> --
20:17:07 SQL> 
20:17:07 SQL> -- Demo:
20:17:07 SQL> -- @score1_5min.sql 2010-12-31 20:45:01 aud_usd
20:17:07 SQL> 
20:17:07 SQL> CREATE OR REPLACE VIEW sme AS
20:17:07   2  SELECT
20:17:07   3  prdate
20:17:07   4  ,NULL gatt
20:17:07   5  ,g00
20:17:07   6  ,g01
20:17:07   7  ,g02
20:17:07   8  ,g03
20:17:07   9  ,g04
20:17:07  10  ,g05
20:17:07  11  ,g06
20:17:07  12  ,g07
20:17:07  13  ,g08
20:17:07  14  ,g09
20:17:07  15  ,g10
20:17:07  16  ,g11
20:17:07  17  ,g12
20:17:07  18  ,g13
20:17:07  19  ,g14
20:17:07  20  ,g15
20:17:07  21  ,g16
20:17:07  22  ,g17
20:17:07  23  ,g18
20:17:07  24  ,g19
20:17:07  25  ,g20
20:17:07  26  ,g21
20:17:07  27  ,g22
20:17:07  28  ,g23
20:17:07  29  ,g24
20:17:07  30  ,g25
20:17:07  31  ,g26
20:17:07  32  ,g27
20:17:07  33  ,g28
20:17:07  34  ,g29
20:17:07  35  ,g30
20:17:07  36  ,g31
20:17:07  37  ,g32
20:17:07  38  ,g33
20:17:07  39  ,g34
20:17:07  40  ,g35
20:17:07  41  ,g36
20:17:07  42  ,g37
20:17:07  43  ,g38
20:17:07  44  ,g39
20:17:07  45  ,g40
20:17:07  46  ,g41
20:17:07  47  FROM modsrc
20:17:07  48  WHERE ydate = '&1'||' '||'&2'
20:17:07  49  AND pair = '&3'
20:17:07  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-11-22'||' '||'14:55:01'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.06
20:17:07 SQL> 
20:17:07 SQL> -- rpt
20:17:07 SQL> -- We should see just 1 row:
20:17:07 SQL> 
20:17:07 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.01
20:17:07 SQL> 
20:17:07 SQL> -- Build the model:
20:17:07 SQL> CREATE OR REPLACE VIEW bme AS
20:17:07   2  SELECT
20:17:07   3  prdate
20:17:07   4  ,gatt
20:17:07   5  ,g00
20:17:07   6  ,g01
20:17:07   7  ,g02
20:17:07   8  ,g03
20:17:07   9  ,g04
20:17:07  10  ,g05
20:17:07  11  ,g06
20:17:07  12  ,g07
20:17:07  13  ,g08
20:17:07  14  ,g09
20:17:07  15  ,g10
20:17:07  16  ,g11
20:17:07  17  ,g12
20:17:07  18  ,g13
20:17:07  19  ,g14
20:17:07  20  ,g15
20:17:07  21  ,g16
20:17:07  22  ,g17
20:17:07  23  ,g18
20:17:07  24  ,g19
20:17:07  25  ,g20
20:17:07  26  ,g21
20:17:07  27  ,g22
20:17:07  28  ,g23
20:17:07  29  ,g24
20:17:07  30  ,g25
20:17:07  31  ,g26
20:17:07  32  ,g27
20:17:07  33  ,g28
20:17:07  34  ,g29
20:17:07  35  ,g30
20:17:07  36  ,g31
20:17:07  37  ,g32
20:17:07  38  ,g33
20:17:07  39  ,g34
20:17:07  40  ,g35
20:17:07  41  ,g36
20:17:07  42  ,g37
20:17:07  43  ,g38
20:17:07  44  ,g39
20:17:07  45  ,g40
20:17:07  46  ,g41
20:17:07  47  FROM modsrc
20:17:07  48  WHERE gatt IN('nup','up')
20:17:07  49  -- Use only rows which are older than 1 day:
20:17:07  50  AND 1+ydate < '&1'||' '||'&2'
20:17:07  51  AND pair = '&3'
20:17:07  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-11-22'||' '||'14:55:01'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:17:07 SQL> 
20:17:07 SQL> -- rpt
20:17:07 SQL> 
20:17:07 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt;

GAT COUNT(PRDATE)
--- -------------
nup	     5806
up	     3780

Elapsed: 00:00:00.02
20:17:07 SQL> 
20:17:07 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-11-19 21:50:01

Elapsed: 00:00:00.01
20:17:07 SQL> 
20:17:07 SQL> -- Now build model from bme and score sme
20:17:07 SQL> @score1.sql gatt
20:17:07 SQL> --
20:17:07 SQL> -- score1.sql
20:17:07 SQL> --
20:17:07 SQL> 
20:17:07 SQL> -- I use this script to send 5 params to score.sql
20:17:07 SQL> -- which does the heavy lifting of creating an SVM model.
20:17:07 SQL> -- Then at the very end of this script I use the model
20:17:07 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:17:07 SQL> 
20:17:07 SQL> -- I call this script from 2 other scripts:
20:17:07 SQL> -- score1_5min.sql
20:17:07 SQL> -- score1_5min_gattn.sql
20:17:07 SQL> 
20:17:07 SQL> -- The 1st param is the name of the target attribute.
20:17:07 SQL> -- I like to call my target attributes either gatt or gattn.
20:17:07 SQL> 
20:17:07 SQL> -- Demo:
20:17:07 SQL> -- @score1.sql 'gatt'
20:17:07 SQL> -- @score1.sql 'gattn'
20:17:07 SQL> 
20:17:07 SQL> -- Now, I fill up svmc_apply_prep.
20:17:07 SQL> -- I use same model_name used in score.sql
20:17:07 SQL> DEFINE model_name = 'svmfx101'
20:17:07 SQL> DEFINE bldtable	= 'bme'
20:17:07 SQL> DEFINE scoretable = 'sme'
20:17:07 SQL> DEFINE case_id	= 'prdate'
20:17:07 SQL> -- Demo:
20:17:07 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:17:07 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:17:07 SQL> --
20:17:07 SQL> -- score.sql
20:17:07 SQL> --
20:17:07 SQL> 
20:17:07 SQL> -- usage: score.sql
20:17:07 SQL> 
20:17:07 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:17:07 SQL> 
20:17:07 SQL> -- DEFINE target	   = 'gatt'
20:17:07 SQL> -- DEFINE model_name = 'svmfx101'
20:17:07 SQL> -- DEFINE bldtable   = 'bme'
20:17:07 SQL> -- DEFINE scoretable = 'sme'
20:17:07 SQL> -- DEFINE case_id    = 'prdate'
20:17:07 SQL> 
20:17:07 SQL> DEFINE target	= '&1'
20:17:07 SQL> DEFINE model_name = '&2'
20:17:07 SQL> DEFINE bldtable	= '&3'
20:17:07 SQL> DEFINE scoretable = '&4'
20:17:07 SQL> DEFINE case_id	= '&5'
20:17:07 SQL> 
20:17:07 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:17:07 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:17:07 SQL> 
20:17:07 SQL> -- Builds an SVM model using pl/sql.
20:17:07 SQL> 
20:17:07 SQL> -----------------------------------------------------------------------
20:17:07 SQL> --			    BUILD THE MODEL
20:17:07 SQL> -----------------------------------------------------------------------
20:17:07 SQL> 
20:17:07 SQL> -- Cleanup old build data preparation objects for repeat runs
20:17:07 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.00
20:17:07 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:17:07 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:17:07 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.00
20:17:07 SQL> 
20:17:07 SQL> 
20:17:07 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:17:07 SQL> --
20:17:07 SQL> -- DROP	TABLE svmc_settings ;
20:17:07 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:17:07 SQL> -- DELETE svmc_settings;
20:17:07 SQL> 
20:17:07 SQL> -- The default classification algorithm is Naive Bayes. So override
20:17:07 SQL> -- this choice to SVM using a settings table.
20:17:07 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:17:07 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:17:07 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:17:07 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:17:07 SQL> -- models.
20:17:07 SQL> --
20:17:07 SQL> 
20:17:07 SQL> -- Do this once and then comment it out.
20:17:07 SQL> -- That makes script go faster.
20:17:07 SQL> -- BEGIN
20:17:07 SQL> -- -- Populate settings table
20:17:07 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:17:07 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:17:07 SQL> --
20:17:07 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:17:07 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:17:07 SQL> --
20:17:07 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:17:07 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:17:07 SQL> --   COMMIT;
20:17:07 SQL> -- END;
20:17:07 SQL> -- /
20:17:07 SQL> 
20:17:07 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:17:07 SQL> 
20:17:07 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:17:07   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:17:07   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:17:07 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:17:07   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:17:07   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:17:07 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:17:07   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:17:07   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:17:07 SQL> 
20:17:07 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:17:07   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:17:07   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:17:07 SQL> 
20:17:07 SQL> --------------------------------
20:17:07 SQL> -- PREPARE BUILD (TRAINING) DATA
20:17:07 SQL> --
20:17:07 SQL> 
20:17:07 SQL> -- 1. Missing Value treatment for all Predictors and
20:17:07 SQL> -- 2. Outlier Treatment and
20:17:07 SQL> -- 3. Normalization are performed below.
20:17:07 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:17:07 SQL> --    normalized here.
20:17:07 SQL> 
20:17:07 SQL> BEGIN
20:17:07   2  	-- Perform missing value treatment for all predictors
20:17:07   3  	-- create miss tables
20:17:07   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:17:07   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:17:07   6  
20:17:07   7  	-- populate miss tables
20:17:07   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:17:07   9  	  miss_table_name => 'svmc_miss_num',
20:17:07  10  	  data_table_name => '&bldtable',
20:17:07  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:17:07  12  
20:17:07  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:17:07  14  	  miss_table_name => 'svmc_miss_cat',
20:17:07  15  	  data_table_name => '&bldtable',
20:17:07  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:17:07  17  
20:17:07  18  	-- xform input data to replace missing values
20:17:07  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:17:07  20  	  miss_table_name => 'svmc_miss_num',
20:17:07  21  	  data_table_name => '&bldtable',
20:17:07  22  	  xform_view_name => 'xformed_build_miss_num');
20:17:07  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:17:07  24  	  miss_table_name => 'svmc_miss_cat',
20:17:07  25  	  data_table_name => '&bldtable',
20:17:07  26  	  xform_view_name => 'xformed_build_miss_cat');
20:17:07  27  
20:17:07  28  	-- Perform outlier treatment.
20:17:07  29  	-- create clip table
20:17:07  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:17:07  31  
20:17:07  32  	-- populate clip table
20:17:07  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:17:07  34  	  clip_table_name => 'svmc_clip',
20:17:07  35  	  data_table_name => '&bldtable',
20:17:07  36  	  tail_frac	  => 0.025,
20:17:07  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:17:07  38  
20:17:07  39  	-- xform input data to winsorized data
20:17:07  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:17:07  41  	  clip_table_name => 'svmc_clip',
20:17:07  42  	  data_table_name => '&bldtable',
20:17:07  43  	  xform_view_name => 'svmc_winsor');
20:17:07  44  
20:17:07  45  	-- create normalization table
20:17:07  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:17:07  47  
20:17:07  48  	-- populate normalization table based on winsorized data
20:17:07  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:17:07  50  	  norm_table_name => 'svmc_norm',
20:17:07  51  	  data_table_name => 'svmc_winsor',
20:17:07  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:17:07  53  
20:17:07  54  	-- normalize the original data
20:17:07  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:17:07  56  	  norm_table_name => 'svmc_norm',
20:17:07  57  	  data_table_name => '&bldtable',
20:17:07  58  	  xform_view_name => 'svmc_build_prep');
20:17:07  59  END;
20:17:07  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.72
20:17:09 SQL> 
20:17:09 SQL> ---------------------
20:17:09 SQL> -- CREATE A NEW MODEL
20:17:09 SQL> --
20:17:09 SQL> -- Cleanup old model with the same name for repeat runs
20:17:09 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:17:09   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:17:09   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.05
20:17:10 SQL> 
20:17:10 SQL> -- Build a new SVM Model
20:17:10 SQL> BEGIN
20:17:10   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:17:10   3  	  model_name	      => '&model_name',
20:17:10   4  	  mining_function     => dbms_data_mining.classification,
20:17:10   5  	  data_table_name     => 'svmc_build_prep',
20:17:10   6  	  case_id_column_name => '&case_id',
20:17:10   7  	  target_column_name  => '&target',
20:17:10   8  	  settings_table_name => 'svmc_settings');
20:17:10   9  END;
20:17:10  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:03.29
20:17:13 SQL> 
20:17:13 SQL> -----------------------------------------------------------------------
20:17:13 SQL> --			       APPLY/score THE MODEL
20:17:13 SQL> -----------------------------------------------------------------------
20:17:13 SQL> 
20:17:13 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:17:13 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:17:13   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:17:13   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:17:13 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:17:13   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:17:13   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:17:13 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:17:13   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:17:13   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:17:13 SQL> -----------------------
20:17:13 SQL> -- PREPARE SCORING DATA
20:17:13 SQL> --
20:17:13 SQL> -- If the data for model creation has been prepared, then the data
20:17:13 SQL> -- to be scored using the model must be prepared in the same manner
20:17:13 SQL> -- in order to obtain meaningful results.
20:17:13 SQL> --
20:17:13 SQL> -- 1. Missing Value treatment for all Predictors and
20:17:13 SQL> -- 2. Normalization
20:17:13 SQL> -- No outlier treatment will be performed during test and apply. The
20:17:13 SQL> -- normalization step is sufficient, since the normalization parameters
20:17:13 SQL> -- already capture the effects of outlier treatment done with build data.
20:17:13 SQL> --
20:17:13 SQL> BEGIN
20:17:13   2  	-- Xform Test data to replace missing values
20:17:13   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:17:13   4  	  miss_table_name => 'svmc_miss_num',
20:17:13   5  	  data_table_name => '&scoretable',
20:17:13   6  	  xform_view_name => 'xformed_apply_miss_num');
20:17:13   7  
20:17:13   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:17:13   9  	  miss_table_name => 'svmc_miss_cat',
20:17:13  10  	  data_table_name => '&scoretable',
20:17:13  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:17:13  12  
20:17:13  13  	-- Normalize the data to be scored
20:17:13  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:17:13  15  	  norm_table_name => 'svmc_norm',
20:17:13  16  	  data_table_name => '&scoretable',
20:17:13  17  	  xform_view_name => 'svmc_apply_prep');
20:17:13  18  END;
20:17:13  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.19
20:17:13 SQL> 
20:17:13 SQL> -- Maybe I already collected a score for this prdate.
20:17:13 SQL> -- DELETE it if I did:
20:17:13 SQL> DELETE svm62scores
20:17:13   2  WHERE score > 0
20:17:13   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:17:13   4  -- I need to supply the target attribute name:
20:17:13   5  AND targ = '&1'
20:17:13   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gatt'

0 rows deleted.

Elapsed: 00:00:00.02
20:17:13 SQL> 
20:17:13 SQL> -- We do a drumroll here:
20:17:13 SQL> 
20:17:13 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:17:13   2  SELECT
20:17:13   3  prdate
20:17:13   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:17:13   5  ,sysdate
20:17:13   6  ,SUBSTR(prdate,1,7)pair
20:17:13   7  ,SUBSTR(prdate,-19)ydate
20:17:13   8  ,'&1'
20:17:13   9  FROM svmc_apply_prep
20:17:13  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gatt'

1 row created.

Elapsed: 00:00:00.05
20:17:13 SQL> @score1_5min.sql	      2010-11-25 11:00:01 aud_usd
20:17:13 SQL> --
20:17:13 SQL> -- score1_5min.sql
20:17:13 SQL> --
20:17:13 SQL> 
20:17:13 SQL> -- Demo:
20:17:13 SQL> -- @score1_5min.sql 2010-12-31 20:45:01 aud_usd
20:17:13 SQL> 
20:17:13 SQL> CREATE OR REPLACE VIEW sme AS
20:17:13   2  SELECT
20:17:13   3  prdate
20:17:13   4  ,NULL gatt
20:17:13   5  ,g00
20:17:13   6  ,g01
20:17:13   7  ,g02
20:17:13   8  ,g03
20:17:13   9  ,g04
20:17:13  10  ,g05
20:17:13  11  ,g06
20:17:13  12  ,g07
20:17:13  13  ,g08
20:17:13  14  ,g09
20:17:13  15  ,g10
20:17:13  16  ,g11
20:17:13  17  ,g12
20:17:13  18  ,g13
20:17:13  19  ,g14
20:17:13  20  ,g15
20:17:13  21  ,g16
20:17:13  22  ,g17
20:17:13  23  ,g18
20:17:13  24  ,g19
20:17:13  25  ,g20
20:17:13  26  ,g21
20:17:13  27  ,g22
20:17:13  28  ,g23
20:17:13  29  ,g24
20:17:13  30  ,g25
20:17:13  31  ,g26
20:17:13  32  ,g27
20:17:13  33  ,g28
20:17:13  34  ,g29
20:17:13  35  ,g30
20:17:13  36  ,g31
20:17:13  37  ,g32
20:17:13  38  ,g33
20:17:13  39  ,g34
20:17:13  40  ,g35
20:17:13  41  ,g36
20:17:13  42  ,g37
20:17:13  43  ,g38
20:17:13  44  ,g39
20:17:13  45  ,g40
20:17:13  46  ,g41
20:17:13  47  FROM modsrc
20:17:13  48  WHERE ydate = '&1'||' '||'&2'
20:17:13  49  AND pair = '&3'
20:17:13  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-11-25'||' '||'11:00:01'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:17:13 SQL> 
20:17:13 SQL> -- rpt
20:17:13 SQL> -- We should see just 1 row:
20:17:13 SQL> 
20:17:13 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.02
20:17:13 SQL> 
20:17:13 SQL> -- Build the model:
20:17:13 SQL> CREATE OR REPLACE VIEW bme AS
20:17:13   2  SELECT
20:17:13   3  prdate
20:17:13   4  ,gatt
20:17:13   5  ,g00
20:17:13   6  ,g01
20:17:13   7  ,g02
20:17:13   8  ,g03
20:17:13   9  ,g04
20:17:13  10  ,g05
20:17:13  11  ,g06
20:17:13  12  ,g07
20:17:13  13  ,g08
20:17:13  14  ,g09
20:17:13  15  ,g10
20:17:13  16  ,g11
20:17:13  17  ,g12
20:17:13  18  ,g13
20:17:13  19  ,g14
20:17:13  20  ,g15
20:17:13  21  ,g16
20:17:13  22  ,g17
20:17:13  23  ,g18
20:17:13  24  ,g19
20:17:13  25  ,g20
20:17:13  26  ,g21
20:17:13  27  ,g22
20:17:13  28  ,g23
20:17:13  29  ,g24
20:17:13  30  ,g25
20:17:13  31  ,g26
20:17:13  32  ,g27
20:17:13  33  ,g28
20:17:13  34  ,g29
20:17:13  35  ,g30
20:17:13  36  ,g31
20:17:13  37  ,g32
20:17:13  38  ,g33
20:17:13  39  ,g34
20:17:13  40  ,g35
20:17:13  41  ,g36
20:17:13  42  ,g37
20:17:13  43  ,g38
20:17:13  44  ,g39
20:17:13  45  ,g40
20:17:13  46  ,g41
20:17:13  47  FROM modsrc
20:17:13  48  WHERE gatt IN('nup','up')
20:17:13  49  -- Use only rows which are older than 1 day:
20:17:13  50  AND 1+ydate < '&1'||' '||'&2'
20:17:13  51  AND pair = '&3'
20:17:13  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-11-25'||' '||'11:00:01'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:17:13 SQL> 
20:17:13 SQL> -- rpt
20:17:13 SQL> 
20:17:13 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt;

GAT COUNT(PRDATE)
--- -------------
nup	     6327
up	     4004

Elapsed: 00:00:00.04
20:17:13 SQL> 
20:17:13 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-11-24 10:55:01

Elapsed: 00:00:00.01
20:17:13 SQL> 
20:17:13 SQL> -- Now build model from bme and score sme
20:17:13 SQL> @score1.sql gatt
20:17:13 SQL> --
20:17:13 SQL> -- score1.sql
20:17:13 SQL> --
20:17:13 SQL> 
20:17:13 SQL> -- I use this script to send 5 params to score.sql
20:17:13 SQL> -- which does the heavy lifting of creating an SVM model.
20:17:13 SQL> -- Then at the very end of this script I use the model
20:17:13 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:17:13 SQL> 
20:17:13 SQL> -- I call this script from 2 other scripts:
20:17:13 SQL> -- score1_5min.sql
20:17:13 SQL> -- score1_5min_gattn.sql
20:17:13 SQL> 
20:17:13 SQL> -- The 1st param is the name of the target attribute.
20:17:13 SQL> -- I like to call my target attributes either gatt or gattn.
20:17:13 SQL> 
20:17:13 SQL> -- Demo:
20:17:13 SQL> -- @score1.sql 'gatt'
20:17:13 SQL> -- @score1.sql 'gattn'
20:17:13 SQL> 
20:17:13 SQL> -- Now, I fill up svmc_apply_prep.
20:17:13 SQL> -- I use same model_name used in score.sql
20:17:13 SQL> DEFINE model_name = 'svmfx101'
20:17:13 SQL> DEFINE bldtable	= 'bme'
20:17:13 SQL> DEFINE scoretable = 'sme'
20:17:13 SQL> DEFINE case_id	= 'prdate'
20:17:13 SQL> -- Demo:
20:17:13 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:17:13 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:17:13 SQL> --
20:17:13 SQL> -- score.sql
20:17:13 SQL> --
20:17:13 SQL> 
20:17:13 SQL> -- usage: score.sql
20:17:13 SQL> 
20:17:13 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:17:13 SQL> 
20:17:13 SQL> -- DEFINE target	   = 'gatt'
20:17:13 SQL> -- DEFINE model_name = 'svmfx101'
20:17:13 SQL> -- DEFINE bldtable   = 'bme'
20:17:13 SQL> -- DEFINE scoretable = 'sme'
20:17:13 SQL> -- DEFINE case_id    = 'prdate'
20:17:13 SQL> 
20:17:13 SQL> DEFINE target	= '&1'
20:17:13 SQL> DEFINE model_name = '&2'
20:17:13 SQL> DEFINE bldtable	= '&3'
20:17:13 SQL> DEFINE scoretable = '&4'
20:17:13 SQL> DEFINE case_id	= '&5'
20:17:13 SQL> 
20:17:13 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:17:13 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:17:13 SQL> 
20:17:13 SQL> -- Builds an SVM model using pl/sql.
20:17:13 SQL> 
20:17:13 SQL> -----------------------------------------------------------------------
20:17:13 SQL> --			    BUILD THE MODEL
20:17:13 SQL> -----------------------------------------------------------------------
20:17:13 SQL> 
20:17:13 SQL> -- Cleanup old build data preparation objects for repeat runs
20:17:13 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.01
20:17:13 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:17:13 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:17:13 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.00
20:17:13 SQL> 
20:17:13 SQL> 
20:17:13 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:17:13 SQL> --
20:17:13 SQL> -- DROP	TABLE svmc_settings ;
20:17:13 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:17:13 SQL> -- DELETE svmc_settings;
20:17:13 SQL> 
20:17:13 SQL> -- The default classification algorithm is Naive Bayes. So override
20:17:13 SQL> -- this choice to SVM using a settings table.
20:17:13 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:17:13 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:17:13 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:17:13 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:17:13 SQL> -- models.
20:17:13 SQL> --
20:17:13 SQL> 
20:17:13 SQL> -- Do this once and then comment it out.
20:17:13 SQL> -- That makes script go faster.
20:17:13 SQL> -- BEGIN
20:17:13 SQL> -- -- Populate settings table
20:17:13 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:17:13 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:17:13 SQL> --
20:17:13 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:17:13 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:17:13 SQL> --
20:17:13 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:17:13 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:17:13 SQL> --   COMMIT;
20:17:13 SQL> -- END;
20:17:13 SQL> -- /
20:17:13 SQL> 
20:17:13 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:17:13 SQL> 
20:17:13 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:17:13   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:17:13   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
20:17:13 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:17:13   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:17:13   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
20:17:14 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:17:14   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:17:14   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
20:17:14 SQL> 
20:17:14 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:17:14   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:17:14   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
20:17:14 SQL> 
20:17:14 SQL> --------------------------------
20:17:14 SQL> -- PREPARE BUILD (TRAINING) DATA
20:17:14 SQL> --
20:17:14 SQL> 
20:17:14 SQL> -- 1. Missing Value treatment for all Predictors and
20:17:14 SQL> -- 2. Outlier Treatment and
20:17:14 SQL> -- 3. Normalization are performed below.
20:17:14 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:17:14 SQL> --    normalized here.
20:17:14 SQL> 
20:17:14 SQL> BEGIN
20:17:14   2  	-- Perform missing value treatment for all predictors
20:17:14   3  	-- create miss tables
20:17:14   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:17:14   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:17:14   6  
20:17:14   7  	-- populate miss tables
20:17:14   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:17:14   9  	  miss_table_name => 'svmc_miss_num',
20:17:14  10  	  data_table_name => '&bldtable',
20:17:14  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:17:14  12  
20:17:14  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:17:14  14  	  miss_table_name => 'svmc_miss_cat',
20:17:14  15  	  data_table_name => '&bldtable',
20:17:14  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:17:14  17  
20:17:14  18  	-- xform input data to replace missing values
20:17:14  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:17:14  20  	  miss_table_name => 'svmc_miss_num',
20:17:14  21  	  data_table_name => '&bldtable',
20:17:14  22  	  xform_view_name => 'xformed_build_miss_num');
20:17:14  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:17:14  24  	  miss_table_name => 'svmc_miss_cat',
20:17:14  25  	  data_table_name => '&bldtable',
20:17:14  26  	  xform_view_name => 'xformed_build_miss_cat');
20:17:14  27  
20:17:14  28  	-- Perform outlier treatment.
20:17:14  29  	-- create clip table
20:17:14  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:17:14  31  
20:17:14  32  	-- populate clip table
20:17:14  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:17:14  34  	  clip_table_name => 'svmc_clip',
20:17:14  35  	  data_table_name => '&bldtable',
20:17:14  36  	  tail_frac	  => 0.025,
20:17:14  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:17:14  38  
20:17:14  39  	-- xform input data to winsorized data
20:17:14  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:17:14  41  	  clip_table_name => 'svmc_clip',
20:17:14  42  	  data_table_name => '&bldtable',
20:17:14  43  	  xform_view_name => 'svmc_winsor');
20:17:14  44  
20:17:14  45  	-- create normalization table
20:17:14  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:17:14  47  
20:17:14  48  	-- populate normalization table based on winsorized data
20:17:14  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:17:14  50  	  norm_table_name => 'svmc_norm',
20:17:14  51  	  data_table_name => 'svmc_winsor',
20:17:14  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:17:14  53  
20:17:14  54  	-- normalize the original data
20:17:14  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:17:14  56  	  norm_table_name => 'svmc_norm',
20:17:14  57  	  data_table_name => '&bldtable',
20:17:14  58  	  xform_view_name => 'svmc_build_prep');
20:17:14  59  END;
20:17:14  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.66
20:17:15 SQL> 
20:17:15 SQL> ---------------------
20:17:15 SQL> -- CREATE A NEW MODEL
20:17:15 SQL> --
20:17:15 SQL> -- Cleanup old model with the same name for repeat runs
20:17:15 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:17:15   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:17:15   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.99
20:17:16 SQL> 
20:17:16 SQL> -- Build a new SVM Model
20:17:16 SQL> BEGIN
20:17:16   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:17:16   3  	  model_name	      => '&model_name',
20:17:16   4  	  mining_function     => dbms_data_mining.classification,
20:17:16   5  	  data_table_name     => 'svmc_build_prep',
20:17:16   6  	  case_id_column_name => '&case_id',
20:17:16   7  	  target_column_name  => '&target',
20:17:16   8  	  settings_table_name => 'svmc_settings');
20:17:16   9  END;
20:17:16  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:03.72
20:17:20 SQL> 
20:17:20 SQL> -----------------------------------------------------------------------
20:17:20 SQL> --			       APPLY/score THE MODEL
20:17:20 SQL> -----------------------------------------------------------------------
20:17:20 SQL> 
20:17:20 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:17:20 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:17:20   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:17:20   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:17:20 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:17:20   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:17:20   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:17:20 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:17:20   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:17:20   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:17:20 SQL> -----------------------
20:17:20 SQL> -- PREPARE SCORING DATA
20:17:20 SQL> --
20:17:20 SQL> -- If the data for model creation has been prepared, then the data
20:17:20 SQL> -- to be scored using the model must be prepared in the same manner
20:17:20 SQL> -- in order to obtain meaningful results.
20:17:20 SQL> --
20:17:20 SQL> -- 1. Missing Value treatment for all Predictors and
20:17:20 SQL> -- 2. Normalization
20:17:20 SQL> -- No outlier treatment will be performed during test and apply. The
20:17:20 SQL> -- normalization step is sufficient, since the normalization parameters
20:17:20 SQL> -- already capture the effects of outlier treatment done with build data.
20:17:20 SQL> --
20:17:20 SQL> BEGIN
20:17:20   2  	-- Xform Test data to replace missing values
20:17:20   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:17:20   4  	  miss_table_name => 'svmc_miss_num',
20:17:20   5  	  data_table_name => '&scoretable',
20:17:20   6  	  xform_view_name => 'xformed_apply_miss_num');
20:17:20   7  
20:17:20   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:17:20   9  	  miss_table_name => 'svmc_miss_cat',
20:17:20  10  	  data_table_name => '&scoretable',
20:17:20  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:17:20  12  
20:17:20  13  	-- Normalize the data to be scored
20:17:20  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:17:20  15  	  norm_table_name => 'svmc_norm',
20:17:20  16  	  data_table_name => '&scoretable',
20:17:20  17  	  xform_view_name => 'svmc_apply_prep');
20:17:20  18  END;
20:17:20  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.18
20:17:20 SQL> 
20:17:20 SQL> -- Maybe I already collected a score for this prdate.
20:17:20 SQL> -- DELETE it if I did:
20:17:20 SQL> DELETE svm62scores
20:17:20   2  WHERE score > 0
20:17:20   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:17:20   4  -- I need to supply the target attribute name:
20:17:20   5  AND targ = '&1'
20:17:20   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gatt'

0 rows deleted.

Elapsed: 00:00:00.01
20:17:20 SQL> 
20:17:20 SQL> -- We do a drumroll here:
20:17:20 SQL> 
20:17:20 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:17:20   2  SELECT
20:17:20   3  prdate
20:17:20   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:17:20   5  ,sysdate
20:17:20   6  ,SUBSTR(prdate,1,7)pair
20:17:20   7  ,SUBSTR(prdate,-19)ydate
20:17:20   8  ,'&1'
20:17:20   9  FROM svmc_apply_prep
20:17:20  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gatt'

1 row created.

Elapsed: 00:00:00.05
20:17:20 SQL> @score1_5min_gattn.sql	2010-10-19 22:15:01 aud_usd
20:17:20 SQL> --
20:17:20 SQL> -- score1_5min_gattn.sql
20:17:20 SQL> --
20:17:20 SQL> 
20:17:20 SQL> -- Demo:
20:17:20 SQL> -- @score1_5min_gattn.sql 2010-12-31 20:45:01 aud_usd
20:17:20 SQL> 
20:17:20 SQL> CREATE OR REPLACE VIEW sme AS
20:17:20   2  SELECT
20:17:20   3  prdate
20:17:20   4  ,NULL gattn
20:17:20   5  ,g00
20:17:20   6  ,g01
20:17:20   7  ,g02
20:17:20   8  ,g03
20:17:20   9  ,g04
20:17:20  10  ,g05
20:17:20  11  ,g06
20:17:20  12  ,g07
20:17:20  13  ,g08
20:17:20  14  ,g09
20:17:20  15  ,g10
20:17:20  16  ,g11
20:17:20  17  ,g12
20:17:20  18  ,g13
20:17:20  19  ,g14
20:17:20  20  ,g15
20:17:20  21  ,g16
20:17:20  22  ,g17
20:17:20  23  ,g18
20:17:20  24  ,g19
20:17:20  25  ,g20
20:17:20  26  ,g21
20:17:20  27  ,g22
20:17:20  28  ,g23
20:17:20  29  ,g24
20:17:20  30  ,g25
20:17:20  31  ,g26
20:17:20  32  ,g27
20:17:20  33  ,g28
20:17:20  34  ,g29
20:17:20  35  ,g30
20:17:20  36  ,g31
20:17:20  37  ,g32
20:17:20  38  ,g33
20:17:20  39  ,g34
20:17:20  40  ,g35
20:17:20  41  ,g36
20:17:20  42  ,g37
20:17:20  43  ,g38
20:17:20  44  ,g39
20:17:20  45  ,g40
20:17:20  46  ,g41
20:17:20  47  FROM modsrc
20:17:20  48  WHERE ydate = '&1'||' '||'&2'
20:17:20  49  AND pair = '&3'
20:17:20  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-10-19'||' '||'22:15:01'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:17:20 SQL> 
20:17:20 SQL> -- rpt
20:17:20 SQL> -- We should see just 1 row:
20:17:20 SQL> 
20:17:20 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.01
20:17:20 SQL> 
20:17:20 SQL> -- Build the model:
20:17:20 SQL> CREATE OR REPLACE VIEW bme AS
20:17:20   2  SELECT
20:17:20   3  prdate
20:17:20   4  ,gattn
20:17:20   5  ,g00
20:17:20   6  ,g01
20:17:20   7  ,g02
20:17:20   8  ,g03
20:17:20   9  ,g04
20:17:20  10  ,g05
20:17:20  11  ,g06
20:17:20  12  ,g07
20:17:20  13  ,g08
20:17:20  14  ,g09
20:17:20  15  ,g10
20:17:20  16  ,g11
20:17:20  17  ,g12
20:17:20  18  ,g13
20:17:20  19  ,g14
20:17:20  20  ,g15
20:17:20  21  ,g16
20:17:20  22  ,g17
20:17:20  23  ,g18
20:17:20  24  ,g19
20:17:20  25  ,g20
20:17:20  26  ,g21
20:17:20  27  ,g22
20:17:20  28  ,g23
20:17:20  29  ,g24
20:17:20  30  ,g25
20:17:20  31  ,g26
20:17:20  32  ,g27
20:17:20  33  ,g28
20:17:20  34  ,g29
20:17:20  35  ,g30
20:17:20  36  ,g31
20:17:20  37  ,g32
20:17:20  38  ,g33
20:17:20  39  ,g34
20:17:20  40  ,g35
20:17:20  41  ,g36
20:17:20  42  ,g37
20:17:20  43  ,g38
20:17:20  44  ,g39
20:17:20  45  ,g40
20:17:20  46  ,g41
20:17:20  47  FROM modsrc
20:17:20  48  WHERE gattn IN('nup','up')
20:17:20  49  -- Use only rows which are older than 1 day:
20:17:20  50  AND 1+ydate < '&1'||' '||'&2'
20:17:20  51  AND pair = '&3'
20:17:20  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-10-19'||' '||'22:15:01'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.05
20:17:20 SQL> 
20:17:20 SQL> -- rpt
20:17:20 SQL> 
20:17:20 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	     1771
up	      869

Elapsed: 00:00:00.02
20:17:20 SQL> 
20:17:20 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-10-18 22:10:01

Elapsed: 00:00:00.01
20:17:20 SQL> 
20:17:20 SQL> -- Now build model from bme and score sme
20:17:20 SQL> @score1.sql gattn
20:17:20 SQL> --
20:17:20 SQL> -- score1.sql
20:17:20 SQL> --
20:17:20 SQL> 
20:17:20 SQL> -- I use this script to send 5 params to score.sql
20:17:20 SQL> -- which does the heavy lifting of creating an SVM model.
20:17:20 SQL> -- Then at the very end of this script I use the model
20:17:20 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:17:20 SQL> 
20:17:20 SQL> -- I call this script from 2 other scripts:
20:17:20 SQL> -- score1_5min.sql
20:17:20 SQL> -- score1_5min_gattn.sql
20:17:20 SQL> 
20:17:20 SQL> -- The 1st param is the name of the target attribute.
20:17:20 SQL> -- I like to call my target attributes either gatt or gattn.
20:17:20 SQL> 
20:17:20 SQL> -- Demo:
20:17:20 SQL> -- @score1.sql 'gatt'
20:17:20 SQL> -- @score1.sql 'gattn'
20:17:20 SQL> 
20:17:20 SQL> -- Now, I fill up svmc_apply_prep.
20:17:20 SQL> -- I use same model_name used in score.sql
20:17:20 SQL> DEFINE model_name = 'svmfx101'
20:17:20 SQL> DEFINE bldtable	= 'bme'
20:17:20 SQL> DEFINE scoretable = 'sme'
20:17:20 SQL> DEFINE case_id	= 'prdate'
20:17:20 SQL> -- Demo:
20:17:20 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:17:20 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:17:20 SQL> --
20:17:20 SQL> -- score.sql
20:17:20 SQL> --
20:17:20 SQL> 
20:17:20 SQL> -- usage: score.sql
20:17:20 SQL> 
20:17:20 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:17:20 SQL> 
20:17:20 SQL> -- DEFINE target	   = 'gatt'
20:17:20 SQL> -- DEFINE model_name = 'svmfx101'
20:17:20 SQL> -- DEFINE bldtable   = 'bme'
20:17:20 SQL> -- DEFINE scoretable = 'sme'
20:17:20 SQL> -- DEFINE case_id    = 'prdate'
20:17:20 SQL> 
20:17:20 SQL> DEFINE target	= '&1'
20:17:20 SQL> DEFINE model_name = '&2'
20:17:20 SQL> DEFINE bldtable	= '&3'
20:17:20 SQL> DEFINE scoretable = '&4'
20:17:20 SQL> DEFINE case_id	= '&5'
20:17:20 SQL> 
20:17:20 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:17:20 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:17:20 SQL> 
20:17:20 SQL> -- Builds an SVM model using pl/sql.
20:17:20 SQL> 
20:17:20 SQL> -----------------------------------------------------------------------
20:17:20 SQL> --			    BUILD THE MODEL
20:17:20 SQL> -----------------------------------------------------------------------
20:17:20 SQL> 
20:17:20 SQL> -- Cleanup old build data preparation objects for repeat runs
20:17:20 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.01
20:17:20 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:17:20 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:17:20 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.00
20:17:20 SQL> 
20:17:20 SQL> 
20:17:20 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:17:20 SQL> --
20:17:20 SQL> -- DROP	TABLE svmc_settings ;
20:17:20 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:17:20 SQL> -- DELETE svmc_settings;
20:17:20 SQL> 
20:17:20 SQL> -- The default classification algorithm is Naive Bayes. So override
20:17:20 SQL> -- this choice to SVM using a settings table.
20:17:20 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:17:20 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:17:20 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:17:20 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:17:20 SQL> -- models.
20:17:20 SQL> --
20:17:20 SQL> 
20:17:20 SQL> -- Do this once and then comment it out.
20:17:20 SQL> -- That makes script go faster.
20:17:20 SQL> -- BEGIN
20:17:20 SQL> -- -- Populate settings table
20:17:20 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:17:20 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:17:20 SQL> --
20:17:20 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:17:20 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:17:20 SQL> --
20:17:20 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:17:20 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:17:20 SQL> --   COMMIT;
20:17:20 SQL> -- END;
20:17:20 SQL> -- /
20:17:20 SQL> 
20:17:20 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:17:20 SQL> 
20:17:20 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:17:20   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:17:20   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:17:21 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:17:21   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:17:21   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:17:21 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:17:21   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:17:21   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:17:21 SQL> 
20:17:21 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:17:21   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:17:21   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:17:21 SQL> 
20:17:21 SQL> --------------------------------
20:17:21 SQL> -- PREPARE BUILD (TRAINING) DATA
20:17:21 SQL> --
20:17:21 SQL> 
20:17:21 SQL> -- 1. Missing Value treatment for all Predictors and
20:17:21 SQL> -- 2. Outlier Treatment and
20:17:21 SQL> -- 3. Normalization are performed below.
20:17:21 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:17:21 SQL> --    normalized here.
20:17:21 SQL> 
20:17:21 SQL> BEGIN
20:17:21   2  	-- Perform missing value treatment for all predictors
20:17:21   3  	-- create miss tables
20:17:21   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:17:21   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:17:21   6  
20:17:21   7  	-- populate miss tables
20:17:21   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:17:21   9  	  miss_table_name => 'svmc_miss_num',
20:17:21  10  	  data_table_name => '&bldtable',
20:17:21  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:17:21  12  
20:17:21  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:17:21  14  	  miss_table_name => 'svmc_miss_cat',
20:17:21  15  	  data_table_name => '&bldtable',
20:17:21  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:17:21  17  
20:17:21  18  	-- xform input data to replace missing values
20:17:21  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:17:21  20  	  miss_table_name => 'svmc_miss_num',
20:17:21  21  	  data_table_name => '&bldtable',
20:17:21  22  	  xform_view_name => 'xformed_build_miss_num');
20:17:21  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:17:21  24  	  miss_table_name => 'svmc_miss_cat',
20:17:21  25  	  data_table_name => '&bldtable',
20:17:21  26  	  xform_view_name => 'xformed_build_miss_cat');
20:17:21  27  
20:17:21  28  	-- Perform outlier treatment.
20:17:21  29  	-- create clip table
20:17:21  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:17:21  31  
20:17:21  32  	-- populate clip table
20:17:21  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:17:21  34  	  clip_table_name => 'svmc_clip',
20:17:21  35  	  data_table_name => '&bldtable',
20:17:21  36  	  tail_frac	  => 0.025,
20:17:21  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:17:21  38  
20:17:21  39  	-- xform input data to winsorized data
20:17:21  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:17:21  41  	  clip_table_name => 'svmc_clip',
20:17:21  42  	  data_table_name => '&bldtable',
20:17:21  43  	  xform_view_name => 'svmc_winsor');
20:17:21  44  
20:17:21  45  	-- create normalization table
20:17:21  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:17:21  47  
20:17:21  48  	-- populate normalization table based on winsorized data
20:17:21  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:17:21  50  	  norm_table_name => 'svmc_norm',
20:17:21  51  	  data_table_name => 'svmc_winsor',
20:17:21  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:17:21  53  
20:17:21  54  	-- normalize the original data
20:17:21  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:17:21  56  	  norm_table_name => 'svmc_norm',
20:17:21  57  	  data_table_name => '&bldtable',
20:17:21  58  	  xform_view_name => 'svmc_build_prep');
20:17:21  59  END;
20:17:21  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.10
20:17:22 SQL> 
20:17:22 SQL> ---------------------
20:17:22 SQL> -- CREATE A NEW MODEL
20:17:22 SQL> --
20:17:22 SQL> -- Cleanup old model with the same name for repeat runs
20:17:22 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:17:22   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:17:22   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.86
20:17:23 SQL> 
20:17:23 SQL> -- Build a new SVM Model
20:17:23 SQL> BEGIN
20:17:23   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:17:23   3  	  model_name	      => '&model_name',
20:17:23   4  	  mining_function     => dbms_data_mining.classification,
20:17:23   5  	  data_table_name     => 'svmc_build_prep',
20:17:23   6  	  case_id_column_name => '&case_id',
20:17:23   7  	  target_column_name  => '&target',
20:17:23   8  	  settings_table_name => 'svmc_settings');
20:17:23   9  END;
20:17:23  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:02.55
20:17:25 SQL> 
20:17:25 SQL> -----------------------------------------------------------------------
20:17:25 SQL> --			       APPLY/score THE MODEL
20:17:25 SQL> -----------------------------------------------------------------------
20:17:25 SQL> 
20:17:25 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:17:25 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:17:25   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:17:25   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:17:25 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:17:25   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:17:25   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:17:25 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:17:25   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:17:25   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:17:25 SQL> -----------------------
20:17:25 SQL> -- PREPARE SCORING DATA
20:17:25 SQL> --
20:17:25 SQL> -- If the data for model creation has been prepared, then the data
20:17:25 SQL> -- to be scored using the model must be prepared in the same manner
20:17:25 SQL> -- in order to obtain meaningful results.
20:17:25 SQL> --
20:17:25 SQL> -- 1. Missing Value treatment for all Predictors and
20:17:25 SQL> -- 2. Normalization
20:17:25 SQL> -- No outlier treatment will be performed during test and apply. The
20:17:25 SQL> -- normalization step is sufficient, since the normalization parameters
20:17:25 SQL> -- already capture the effects of outlier treatment done with build data.
20:17:25 SQL> --
20:17:25 SQL> BEGIN
20:17:25   2  	-- Xform Test data to replace missing values
20:17:25   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:17:25   4  	  miss_table_name => 'svmc_miss_num',
20:17:25   5  	  data_table_name => '&scoretable',
20:17:25   6  	  xform_view_name => 'xformed_apply_miss_num');
20:17:25   7  
20:17:25   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:17:25   9  	  miss_table_name => 'svmc_miss_cat',
20:17:25  10  	  data_table_name => '&scoretable',
20:17:25  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:17:25  12  
20:17:25  13  	-- Normalize the data to be scored
20:17:25  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:17:25  15  	  norm_table_name => 'svmc_norm',
20:17:25  16  	  data_table_name => '&scoretable',
20:17:25  17  	  xform_view_name => 'svmc_apply_prep');
20:17:25  18  END;
20:17:25  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.18
20:17:25 SQL> 
20:17:25 SQL> -- Maybe I already collected a score for this prdate.
20:17:25 SQL> -- DELETE it if I did:
20:17:25 SQL> DELETE svm62scores
20:17:25   2  WHERE score > 0
20:17:25   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:17:25   4  -- I need to supply the target attribute name:
20:17:25   5  AND targ = '&1'
20:17:25   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gattn'

0 rows deleted.

Elapsed: 00:00:00.01
20:17:25 SQL> 
20:17:25 SQL> -- We do a drumroll here:
20:17:25 SQL> 
20:17:25 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:17:25   2  SELECT
20:17:25   3  prdate
20:17:25   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:17:25   5  ,sysdate
20:17:25   6  ,SUBSTR(prdate,1,7)pair
20:17:25   7  ,SUBSTR(prdate,-19)ydate
20:17:25   8  ,'&1'
20:17:25   9  FROM svmc_apply_prep
20:17:25  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gattn'

1 row created.

Elapsed: 00:00:00.05
20:17:25 SQL> @score1_5min_gattn.sql	2010-12-28 12:35:00 aud_usd
20:17:25 SQL> --
20:17:25 SQL> -- score1_5min_gattn.sql
20:17:25 SQL> --
20:17:25 SQL> 
20:17:25 SQL> -- Demo:
20:17:25 SQL> -- @score1_5min_gattn.sql 2010-12-31 20:45:01 aud_usd
20:17:25 SQL> 
20:17:25 SQL> CREATE OR REPLACE VIEW sme AS
20:17:25   2  SELECT
20:17:25   3  prdate
20:17:25   4  ,NULL gattn
20:17:25   5  ,g00
20:17:25   6  ,g01
20:17:25   7  ,g02
20:17:25   8  ,g03
20:17:25   9  ,g04
20:17:25  10  ,g05
20:17:25  11  ,g06
20:17:25  12  ,g07
20:17:25  13  ,g08
20:17:25  14  ,g09
20:17:25  15  ,g10
20:17:25  16  ,g11
20:17:25  17  ,g12
20:17:25  18  ,g13
20:17:25  19  ,g14
20:17:25  20  ,g15
20:17:25  21  ,g16
20:17:25  22  ,g17
20:17:25  23  ,g18
20:17:25  24  ,g19
20:17:25  25  ,g20
20:17:25  26  ,g21
20:17:25  27  ,g22
20:17:25  28  ,g23
20:17:25  29  ,g24
20:17:25  30  ,g25
20:17:25  31  ,g26
20:17:25  32  ,g27
20:17:25  33  ,g28
20:17:25  34  ,g29
20:17:25  35  ,g30
20:17:25  36  ,g31
20:17:25  37  ,g32
20:17:25  38  ,g33
20:17:25  39  ,g34
20:17:25  40  ,g35
20:17:25  41  ,g36
20:17:25  42  ,g37
20:17:25  43  ,g38
20:17:25  44  ,g39
20:17:25  45  ,g40
20:17:25  46  ,g41
20:17:25  47  FROM modsrc
20:17:25  48  WHERE ydate = '&1'||' '||'&2'
20:17:25  49  AND pair = '&3'
20:17:25  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-12-28'||' '||'12:35:00'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.05
20:17:26 SQL> 
20:17:26 SQL> -- rpt
20:17:26 SQL> -- We should see just 1 row:
20:17:26 SQL> 
20:17:26 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.02
20:17:26 SQL> 
20:17:26 SQL> -- Build the model:
20:17:26 SQL> CREATE OR REPLACE VIEW bme AS
20:17:26   2  SELECT
20:17:26   3  prdate
20:17:26   4  ,gattn
20:17:26   5  ,g00
20:17:26   6  ,g01
20:17:26   7  ,g02
20:17:26   8  ,g03
20:17:26   9  ,g04
20:17:26  10  ,g05
20:17:26  11  ,g06
20:17:26  12  ,g07
20:17:26  13  ,g08
20:17:26  14  ,g09
20:17:26  15  ,g10
20:17:26  16  ,g11
20:17:26  17  ,g12
20:17:26  18  ,g13
20:17:26  19  ,g14
20:17:26  20  ,g15
20:17:26  21  ,g16
20:17:26  22  ,g17
20:17:26  23  ,g18
20:17:26  24  ,g19
20:17:26  25  ,g20
20:17:26  26  ,g21
20:17:26  27  ,g22
20:17:26  28  ,g23
20:17:26  29  ,g24
20:17:26  30  ,g25
20:17:26  31  ,g26
20:17:26  32  ,g27
20:17:26  33  ,g28
20:17:26  34  ,g29
20:17:26  35  ,g30
20:17:26  36  ,g31
20:17:26  37  ,g32
20:17:26  38  ,g33
20:17:26  39  ,g34
20:17:26  40  ,g35
20:17:26  41  ,g36
20:17:26  42  ,g37
20:17:26  43  ,g38
20:17:26  44  ,g39
20:17:26  45  ,g40
20:17:26  46  ,g41
20:17:26  47  FROM modsrc
20:17:26  48  WHERE gattn IN('nup','up')
20:17:26  49  -- Use only rows which are older than 1 day:
20:17:26  50  AND 1+ydate < '&1'||' '||'&2'
20:17:26  51  AND pair = '&3'
20:17:26  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-12-28'||' '||'12:35:00'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.03
20:17:26 SQL> 
20:17:26 SQL> -- rpt
20:17:26 SQL> 
20:17:26 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	    11137
up	     5728

Elapsed: 00:00:00.02
20:17:26 SQL> 
20:17:26 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-12-27 12:30:00

Elapsed: 00:00:00.02
20:17:26 SQL> 
20:17:26 SQL> -- Now build model from bme and score sme
20:17:26 SQL> @score1.sql gattn
20:17:26 SQL> --
20:17:26 SQL> -- score1.sql
20:17:26 SQL> --
20:17:26 SQL> 
20:17:26 SQL> -- I use this script to send 5 params to score.sql
20:17:26 SQL> -- which does the heavy lifting of creating an SVM model.
20:17:26 SQL> -- Then at the very end of this script I use the model
20:17:26 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:17:26 SQL> 
20:17:26 SQL> -- I call this script from 2 other scripts:
20:17:26 SQL> -- score1_5min.sql
20:17:26 SQL> -- score1_5min_gattn.sql
20:17:26 SQL> 
20:17:26 SQL> -- The 1st param is the name of the target attribute.
20:17:26 SQL> -- I like to call my target attributes either gatt or gattn.
20:17:26 SQL> 
20:17:26 SQL> -- Demo:
20:17:26 SQL> -- @score1.sql 'gatt'
20:17:26 SQL> -- @score1.sql 'gattn'
20:17:26 SQL> 
20:17:26 SQL> -- Now, I fill up svmc_apply_prep.
20:17:26 SQL> -- I use same model_name used in score.sql
20:17:26 SQL> DEFINE model_name = 'svmfx101'
20:17:26 SQL> DEFINE bldtable	= 'bme'
20:17:26 SQL> DEFINE scoretable = 'sme'
20:17:26 SQL> DEFINE case_id	= 'prdate'
20:17:26 SQL> -- Demo:
20:17:26 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:17:26 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:17:26 SQL> --
20:17:26 SQL> -- score.sql
20:17:26 SQL> --
20:17:26 SQL> 
20:17:26 SQL> -- usage: score.sql
20:17:26 SQL> 
20:17:26 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:17:26 SQL> 
20:17:26 SQL> -- DEFINE target	   = 'gatt'
20:17:26 SQL> -- DEFINE model_name = 'svmfx101'
20:17:26 SQL> -- DEFINE bldtable   = 'bme'
20:17:26 SQL> -- DEFINE scoretable = 'sme'
20:17:26 SQL> -- DEFINE case_id    = 'prdate'
20:17:26 SQL> 
20:17:26 SQL> DEFINE target	= '&1'
20:17:26 SQL> DEFINE model_name = '&2'
20:17:26 SQL> DEFINE bldtable	= '&3'
20:17:26 SQL> DEFINE scoretable = '&4'
20:17:26 SQL> DEFINE case_id	= '&5'
20:17:26 SQL> 
20:17:26 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:17:26 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:17:26 SQL> 
20:17:26 SQL> -- Builds an SVM model using pl/sql.
20:17:26 SQL> 
20:17:26 SQL> -----------------------------------------------------------------------
20:17:26 SQL> --			    BUILD THE MODEL
20:17:26 SQL> -----------------------------------------------------------------------
20:17:26 SQL> 
20:17:26 SQL> -- Cleanup old build data preparation objects for repeat runs
20:17:26 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.01
20:17:26 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:17:26 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:17:26 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.00
20:17:26 SQL> 
20:17:26 SQL> 
20:17:26 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:17:26 SQL> --
20:17:26 SQL> -- DROP	TABLE svmc_settings ;
20:17:26 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:17:26 SQL> -- DELETE svmc_settings;
20:17:26 SQL> 
20:17:26 SQL> -- The default classification algorithm is Naive Bayes. So override
20:17:26 SQL> -- this choice to SVM using a settings table.
20:17:26 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:17:26 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:17:26 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:17:26 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:17:26 SQL> -- models.
20:17:26 SQL> --
20:17:26 SQL> 
20:17:26 SQL> -- Do this once and then comment it out.
20:17:26 SQL> -- That makes script go faster.
20:17:26 SQL> -- BEGIN
20:17:26 SQL> -- -- Populate settings table
20:17:26 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:17:26 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:17:26 SQL> --
20:17:26 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:17:26 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:17:26 SQL> --
20:17:26 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:17:26 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:17:26 SQL> --   COMMIT;
20:17:26 SQL> -- END;
20:17:26 SQL> -- /
20:17:26 SQL> 
20:17:26 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:17:26 SQL> 
20:17:26 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:17:26   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:17:26   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:17:26 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:17:26   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:17:26   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:17:26 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:17:26   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:17:26   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:17:26 SQL> 
20:17:26 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:17:26   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:17:26   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:17:26 SQL> 
20:17:26 SQL> --------------------------------
20:17:26 SQL> -- PREPARE BUILD (TRAINING) DATA
20:17:26 SQL> --
20:17:26 SQL> 
20:17:26 SQL> -- 1. Missing Value treatment for all Predictors and
20:17:26 SQL> -- 2. Outlier Treatment and
20:17:26 SQL> -- 3. Normalization are performed below.
20:17:26 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:17:26 SQL> --    normalized here.
20:17:26 SQL> 
20:17:26 SQL> BEGIN
20:17:26   2  	-- Perform missing value treatment for all predictors
20:17:26   3  	-- create miss tables
20:17:26   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:17:26   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:17:26   6  
20:17:26   7  	-- populate miss tables
20:17:26   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:17:26   9  	  miss_table_name => 'svmc_miss_num',
20:17:26  10  	  data_table_name => '&bldtable',
20:17:26  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:17:26  12  
20:17:26  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:17:26  14  	  miss_table_name => 'svmc_miss_cat',
20:17:26  15  	  data_table_name => '&bldtable',
20:17:26  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:17:26  17  
20:17:26  18  	-- xform input data to replace missing values
20:17:26  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:17:26  20  	  miss_table_name => 'svmc_miss_num',
20:17:26  21  	  data_table_name => '&bldtable',
20:17:26  22  	  xform_view_name => 'xformed_build_miss_num');
20:17:26  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:17:26  24  	  miss_table_name => 'svmc_miss_cat',
20:17:26  25  	  data_table_name => '&bldtable',
20:17:26  26  	  xform_view_name => 'xformed_build_miss_cat');
20:17:26  27  
20:17:26  28  	-- Perform outlier treatment.
20:17:26  29  	-- create clip table
20:17:26  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:17:26  31  
20:17:26  32  	-- populate clip table
20:17:26  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:17:26  34  	  clip_table_name => 'svmc_clip',
20:17:26  35  	  data_table_name => '&bldtable',
20:17:26  36  	  tail_frac	  => 0.025,
20:17:26  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:17:26  38  
20:17:26  39  	-- xform input data to winsorized data
20:17:26  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:17:26  41  	  clip_table_name => 'svmc_clip',
20:17:26  42  	  data_table_name => '&bldtable',
20:17:26  43  	  xform_view_name => 'svmc_winsor');
20:17:26  44  
20:17:26  45  	-- create normalization table
20:17:26  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:17:26  47  
20:17:26  48  	-- populate normalization table based on winsorized data
20:17:26  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:17:26  50  	  norm_table_name => 'svmc_norm',
20:17:26  51  	  data_table_name => 'svmc_winsor',
20:17:26  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:17:26  53  
20:17:26  54  	-- normalize the original data
20:17:26  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:17:26  56  	  norm_table_name => 'svmc_norm',
20:17:26  57  	  data_table_name => '&bldtable',
20:17:26  58  	  xform_view_name => 'svmc_build_prep');
20:17:26  59  END;
20:17:26  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:02.27
20:17:28 SQL> 
20:17:28 SQL> ---------------------
20:17:28 SQL> -- CREATE A NEW MODEL
20:17:28 SQL> --
20:17:28 SQL> -- Cleanup old model with the same name for repeat runs
20:17:28 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:17:28   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:17:28   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.01
20:17:29 SQL> 
20:17:29 SQL> -- Build a new SVM Model
20:17:29 SQL> BEGIN
20:17:29   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:17:29   3  	  model_name	      => '&model_name',
20:17:29   4  	  mining_function     => dbms_data_mining.classification,
20:17:29   5  	  data_table_name     => 'svmc_build_prep',
20:17:29   6  	  case_id_column_name => '&case_id',
20:17:29   7  	  target_column_name  => '&target',
20:17:29   8  	  settings_table_name => 'svmc_settings');
20:17:29   9  END;
20:17:29  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:04.22
20:17:33 SQL> 
20:17:33 SQL> -----------------------------------------------------------------------
20:17:33 SQL> --			       APPLY/score THE MODEL
20:17:33 SQL> -----------------------------------------------------------------------
20:17:33 SQL> 
20:17:33 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:17:33 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:17:33   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:17:33   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.13
20:17:33 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:17:33   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:17:33   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.08
20:17:33 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:17:33   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:17:33   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.11
20:17:34 SQL> -----------------------
20:17:34 SQL> -- PREPARE SCORING DATA
20:17:34 SQL> --
20:17:34 SQL> -- If the data for model creation has been prepared, then the data
20:17:34 SQL> -- to be scored using the model must be prepared in the same manner
20:17:34 SQL> -- in order to obtain meaningful results.
20:17:34 SQL> --
20:17:34 SQL> -- 1. Missing Value treatment for all Predictors and
20:17:34 SQL> -- 2. Normalization
20:17:34 SQL> -- No outlier treatment will be performed during test and apply. The
20:17:34 SQL> -- normalization step is sufficient, since the normalization parameters
20:17:34 SQL> -- already capture the effects of outlier treatment done with build data.
20:17:34 SQL> --
20:17:34 SQL> BEGIN
20:17:34   2  	-- Xform Test data to replace missing values
20:17:34   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:17:34   4  	  miss_table_name => 'svmc_miss_num',
20:17:34   5  	  data_table_name => '&scoretable',
20:17:34   6  	  xform_view_name => 'xformed_apply_miss_num');
20:17:34   7  
20:17:34   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:17:34   9  	  miss_table_name => 'svmc_miss_cat',
20:17:34  10  	  data_table_name => '&scoretable',
20:17:34  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:17:34  12  
20:17:34  13  	-- Normalize the data to be scored
20:17:34  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:17:34  15  	  norm_table_name => 'svmc_norm',
20:17:34  16  	  data_table_name => '&scoretable',
20:17:34  17  	  xform_view_name => 'svmc_apply_prep');
20:17:34  18  END;
20:17:34  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.18
20:17:34 SQL> 
20:17:34 SQL> -- Maybe I already collected a score for this prdate.
20:17:34 SQL> -- DELETE it if I did:
20:17:34 SQL> DELETE svm62scores
20:17:34   2  WHERE score > 0
20:17:34   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:17:34   4  -- I need to supply the target attribute name:
20:17:34   5  AND targ = '&1'
20:17:34   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gattn'

0 rows deleted.

Elapsed: 00:00:00.02
20:17:34 SQL> 
20:17:34 SQL> -- We do a drumroll here:
20:17:34 SQL> 
20:17:34 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:17:34   2  SELECT
20:17:34   3  prdate
20:17:34   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:17:34   5  ,sysdate
20:17:34   6  ,SUBSTR(prdate,1,7)pair
20:17:34   7  ,SUBSTR(prdate,-19)ydate
20:17:34   8  ,'&1'
20:17:34   9  FROM svmc_apply_prep
20:17:34  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gattn'

1 row created.

Elapsed: 00:00:00.05
20:17:34 SQL> @score1_5min_gattn.sql	2010-12-09 13:20:00 aud_usd
20:17:34 SQL> --
20:17:34 SQL> -- score1_5min_gattn.sql
20:17:34 SQL> --
20:17:34 SQL> 
20:17:34 SQL> -- Demo:
20:17:34 SQL> -- @score1_5min_gattn.sql 2010-12-31 20:45:01 aud_usd
20:17:34 SQL> 
20:17:34 SQL> CREATE OR REPLACE VIEW sme AS
20:17:34   2  SELECT
20:17:34   3  prdate
20:17:34   4  ,NULL gattn
20:17:34   5  ,g00
20:17:34   6  ,g01
20:17:34   7  ,g02
20:17:34   8  ,g03
20:17:34   9  ,g04
20:17:34  10  ,g05
20:17:34  11  ,g06
20:17:34  12  ,g07
20:17:34  13  ,g08
20:17:34  14  ,g09
20:17:34  15  ,g10
20:17:34  16  ,g11
20:17:34  17  ,g12
20:17:34  18  ,g13
20:17:34  19  ,g14
20:17:34  20  ,g15
20:17:34  21  ,g16
20:17:34  22  ,g17
20:17:34  23  ,g18
20:17:34  24  ,g19
20:17:34  25  ,g20
20:17:34  26  ,g21
20:17:34  27  ,g22
20:17:34  28  ,g23
20:17:34  29  ,g24
20:17:34  30  ,g25
20:17:34  31  ,g26
20:17:34  32  ,g27
20:17:34  33  ,g28
20:17:34  34  ,g29
20:17:34  35  ,g30
20:17:34  36  ,g31
20:17:34  37  ,g32
20:17:34  38  ,g33
20:17:34  39  ,g34
20:17:34  40  ,g35
20:17:34  41  ,g36
20:17:34  42  ,g37
20:17:34  43  ,g38
20:17:34  44  ,g39
20:17:34  45  ,g40
20:17:34  46  ,g41
20:17:34  47  FROM modsrc
20:17:34  48  WHERE ydate = '&1'||' '||'&2'
20:17:34  49  AND pair = '&3'
20:17:34  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-12-09'||' '||'13:20:00'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.05
20:17:34 SQL> 
20:17:34 SQL> -- rpt
20:17:34 SQL> -- We should see just 1 row:
20:17:34 SQL> 
20:17:34 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.01
20:17:34 SQL> 
20:17:34 SQL> -- Build the model:
20:17:34 SQL> CREATE OR REPLACE VIEW bme AS
20:17:34   2  SELECT
20:17:34   3  prdate
20:17:34   4  ,gattn
20:17:34   5  ,g00
20:17:34   6  ,g01
20:17:34   7  ,g02
20:17:34   8  ,g03
20:17:34   9  ,g04
20:17:34  10  ,g05
20:17:34  11  ,g06
20:17:34  12  ,g07
20:17:34  13  ,g08
20:17:34  14  ,g09
20:17:34  15  ,g10
20:17:34  16  ,g11
20:17:34  17  ,g12
20:17:34  18  ,g13
20:17:34  19  ,g14
20:17:34  20  ,g15
20:17:34  21  ,g16
20:17:34  22  ,g17
20:17:34  23  ,g18
20:17:34  24  ,g19
20:17:34  25  ,g20
20:17:34  26  ,g21
20:17:34  27  ,g22
20:17:34  28  ,g23
20:17:34  29  ,g24
20:17:34  30  ,g25
20:17:34  31  ,g26
20:17:34  32  ,g27
20:17:34  33  ,g28
20:17:34  34  ,g29
20:17:34  35  ,g30
20:17:34  36  ,g31
20:17:34  37  ,g32
20:17:34  38  ,g33
20:17:34  39  ,g34
20:17:34  40  ,g35
20:17:34  41  ,g36
20:17:34  42  ,g37
20:17:34  43  ,g38
20:17:34  44  ,g39
20:17:34  45  ,g40
20:17:34  46  ,g41
20:17:34  47  FROM modsrc
20:17:34  48  WHERE gattn IN('nup','up')
20:17:34  49  -- Use only rows which are older than 1 day:
20:17:34  50  AND 1+ydate < '&1'||' '||'&2'
20:17:34  51  AND pair = '&3'
20:17:34  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-12-09'||' '||'13:20:00'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:17:34 SQL> 
20:17:34 SQL> -- rpt
20:17:34 SQL> 
20:17:34 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	     8327
up	     4898

Elapsed: 00:00:00.02
20:17:34 SQL> 
20:17:34 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-12-08 13:15:00

Elapsed: 00:00:00.01
20:17:34 SQL> 
20:17:34 SQL> -- Now build model from bme and score sme
20:17:34 SQL> @score1.sql gattn
20:17:34 SQL> --
20:17:34 SQL> -- score1.sql
20:17:34 SQL> --
20:17:34 SQL> 
20:17:34 SQL> -- I use this script to send 5 params to score.sql
20:17:34 SQL> -- which does the heavy lifting of creating an SVM model.
20:17:34 SQL> -- Then at the very end of this script I use the model
20:17:34 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:17:34 SQL> 
20:17:34 SQL> -- I call this script from 2 other scripts:
20:17:34 SQL> -- score1_5min.sql
20:17:34 SQL> -- score1_5min_gattn.sql
20:17:34 SQL> 
20:17:34 SQL> -- The 1st param is the name of the target attribute.
20:17:34 SQL> -- I like to call my target attributes either gatt or gattn.
20:17:34 SQL> 
20:17:34 SQL> -- Demo:
20:17:34 SQL> -- @score1.sql 'gatt'
20:17:34 SQL> -- @score1.sql 'gattn'
20:17:34 SQL> 
20:17:34 SQL> -- Now, I fill up svmc_apply_prep.
20:17:34 SQL> -- I use same model_name used in score.sql
20:17:34 SQL> DEFINE model_name = 'svmfx101'
20:17:34 SQL> DEFINE bldtable	= 'bme'
20:17:34 SQL> DEFINE scoretable = 'sme'
20:17:34 SQL> DEFINE case_id	= 'prdate'
20:17:34 SQL> -- Demo:
20:17:34 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:17:34 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:17:34 SQL> --
20:17:34 SQL> -- score.sql
20:17:34 SQL> --
20:17:34 SQL> 
20:17:34 SQL> -- usage: score.sql
20:17:34 SQL> 
20:17:34 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:17:34 SQL> 
20:17:34 SQL> -- DEFINE target	   = 'gatt'
20:17:34 SQL> -- DEFINE model_name = 'svmfx101'
20:17:34 SQL> -- DEFINE bldtable   = 'bme'
20:17:34 SQL> -- DEFINE scoretable = 'sme'
20:17:34 SQL> -- DEFINE case_id    = 'prdate'
20:17:34 SQL> 
20:17:34 SQL> DEFINE target	= '&1'
20:17:34 SQL> DEFINE model_name = '&2'
20:17:34 SQL> DEFINE bldtable	= '&3'
20:17:34 SQL> DEFINE scoretable = '&4'
20:17:34 SQL> DEFINE case_id	= '&5'
20:17:34 SQL> 
20:17:34 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:17:34 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:17:34 SQL> 
20:17:34 SQL> -- Builds an SVM model using pl/sql.
20:17:34 SQL> 
20:17:34 SQL> -----------------------------------------------------------------------
20:17:34 SQL> --			    BUILD THE MODEL
20:17:34 SQL> -----------------------------------------------------------------------
20:17:34 SQL> 
20:17:34 SQL> -- Cleanup old build data preparation objects for repeat runs
20:17:34 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.00
20:17:34 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:17:34 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:17:34 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.01
20:17:34 SQL> 
20:17:34 SQL> 
20:17:34 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:17:34 SQL> --
20:17:34 SQL> -- DROP	TABLE svmc_settings ;
20:17:34 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:17:34 SQL> -- DELETE svmc_settings;
20:17:34 SQL> 
20:17:34 SQL> -- The default classification algorithm is Naive Bayes. So override
20:17:34 SQL> -- this choice to SVM using a settings table.
20:17:34 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:17:34 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:17:34 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:17:34 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:17:34 SQL> -- models.
20:17:34 SQL> --
20:17:34 SQL> 
20:17:34 SQL> -- Do this once and then comment it out.
20:17:34 SQL> -- That makes script go faster.
20:17:34 SQL> -- BEGIN
20:17:34 SQL> -- -- Populate settings table
20:17:34 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:17:34 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:17:34 SQL> --
20:17:34 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:17:34 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:17:34 SQL> --
20:17:34 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:17:34 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:17:34 SQL> --   COMMIT;
20:17:34 SQL> -- END;
20:17:34 SQL> -- /
20:17:34 SQL> 
20:17:34 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:17:34 SQL> 
20:17:34 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:17:34   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:17:34   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
20:17:34 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:17:34   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:17:34   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:17:34 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:17:34   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:17:34   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:17:34 SQL> 
20:17:34 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:17:34   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:17:34   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:17:34 SQL> 
20:17:34 SQL> --------------------------------
20:17:34 SQL> -- PREPARE BUILD (TRAINING) DATA
20:17:34 SQL> --
20:17:34 SQL> 
20:17:34 SQL> -- 1. Missing Value treatment for all Predictors and
20:17:34 SQL> -- 2. Outlier Treatment and
20:17:34 SQL> -- 3. Normalization are performed below.
20:17:34 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:17:34 SQL> --    normalized here.
20:17:34 SQL> 
20:17:34 SQL> BEGIN
20:17:34   2  	-- Perform missing value treatment for all predictors
20:17:34   3  	-- create miss tables
20:17:34   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:17:34   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:17:34   6  
20:17:34   7  	-- populate miss tables
20:17:34   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:17:34   9  	  miss_table_name => 'svmc_miss_num',
20:17:34  10  	  data_table_name => '&bldtable',
20:17:34  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:17:34  12  
20:17:34  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:17:34  14  	  miss_table_name => 'svmc_miss_cat',
20:17:34  15  	  data_table_name => '&bldtable',
20:17:34  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:17:34  17  
20:17:34  18  	-- xform input data to replace missing values
20:17:34  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:17:34  20  	  miss_table_name => 'svmc_miss_num',
20:17:34  21  	  data_table_name => '&bldtable',
20:17:34  22  	  xform_view_name => 'xformed_build_miss_num');
20:17:34  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:17:34  24  	  miss_table_name => 'svmc_miss_cat',
20:17:34  25  	  data_table_name => '&bldtable',
20:17:34  26  	  xform_view_name => 'xformed_build_miss_cat');
20:17:34  27  
20:17:34  28  	-- Perform outlier treatment.
20:17:34  29  	-- create clip table
20:17:34  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:17:34  31  
20:17:34  32  	-- populate clip table
20:17:34  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:17:34  34  	  clip_table_name => 'svmc_clip',
20:17:34  35  	  data_table_name => '&bldtable',
20:17:34  36  	  tail_frac	  => 0.025,
20:17:34  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:17:34  38  
20:17:34  39  	-- xform input data to winsorized data
20:17:34  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:17:34  41  	  clip_table_name => 'svmc_clip',
20:17:34  42  	  data_table_name => '&bldtable',
20:17:34  43  	  xform_view_name => 'svmc_winsor');
20:17:34  44  
20:17:34  45  	-- create normalization table
20:17:34  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:17:34  47  
20:17:34  48  	-- populate normalization table based on winsorized data
20:17:34  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:17:34  50  	  norm_table_name => 'svmc_norm',
20:17:34  51  	  data_table_name => 'svmc_winsor',
20:17:34  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:17:34  53  
20:17:34  54  	-- normalize the original data
20:17:34  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:17:34  56  	  norm_table_name => 'svmc_norm',
20:17:34  57  	  data_table_name => '&bldtable',
20:17:34  58  	  xform_view_name => 'svmc_build_prep');
20:17:34  59  END;
20:17:34  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.92
20:17:36 SQL> 
20:17:36 SQL> ---------------------
20:17:36 SQL> -- CREATE A NEW MODEL
20:17:36 SQL> --
20:17:36 SQL> -- Cleanup old model with the same name for repeat runs
20:17:36 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:17:36   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:17:36   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.41
20:17:37 SQL> 
20:17:37 SQL> -- Build a new SVM Model
20:17:37 SQL> BEGIN
20:17:37   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:17:37   3  	  model_name	      => '&model_name',
20:17:37   4  	  mining_function     => dbms_data_mining.classification,
20:17:37   5  	  data_table_name     => 'svmc_build_prep',
20:17:37   6  	  case_id_column_name => '&case_id',
20:17:37   7  	  target_column_name  => '&target',
20:17:37   8  	  settings_table_name => 'svmc_settings');
20:17:37   9  END;
20:17:37  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:03.96
20:17:41 SQL> 
20:17:41 SQL> -----------------------------------------------------------------------
20:17:41 SQL> --			       APPLY/score THE MODEL
20:17:41 SQL> -----------------------------------------------------------------------
20:17:41 SQL> 
20:17:41 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:17:41 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:17:41   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:17:41   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:17:41 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:17:41   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:17:41   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:17:41 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:17:41   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:17:41   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:17:42 SQL> -----------------------
20:17:42 SQL> -- PREPARE SCORING DATA
20:17:42 SQL> --
20:17:42 SQL> -- If the data for model creation has been prepared, then the data
20:17:42 SQL> -- to be scored using the model must be prepared in the same manner
20:17:42 SQL> -- in order to obtain meaningful results.
20:17:42 SQL> --
20:17:42 SQL> -- 1. Missing Value treatment for all Predictors and
20:17:42 SQL> -- 2. Normalization
20:17:42 SQL> -- No outlier treatment will be performed during test and apply. The
20:17:42 SQL> -- normalization step is sufficient, since the normalization parameters
20:17:42 SQL> -- already capture the effects of outlier treatment done with build data.
20:17:42 SQL> --
20:17:42 SQL> BEGIN
20:17:42   2  	-- Xform Test data to replace missing values
20:17:42   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:17:42   4  	  miss_table_name => 'svmc_miss_num',
20:17:42   5  	  data_table_name => '&scoretable',
20:17:42   6  	  xform_view_name => 'xformed_apply_miss_num');
20:17:42   7  
20:17:42   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:17:42   9  	  miss_table_name => 'svmc_miss_cat',
20:17:42  10  	  data_table_name => '&scoretable',
20:17:42  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:17:42  12  
20:17:42  13  	-- Normalize the data to be scored
20:17:42  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:17:42  15  	  norm_table_name => 'svmc_norm',
20:17:42  16  	  data_table_name => '&scoretable',
20:17:42  17  	  xform_view_name => 'svmc_apply_prep');
20:17:42  18  END;
20:17:42  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.19
20:17:42 SQL> 
20:17:42 SQL> -- Maybe I already collected a score for this prdate.
20:17:42 SQL> -- DELETE it if I did:
20:17:42 SQL> DELETE svm62scores
20:17:42   2  WHERE score > 0
20:17:42   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:17:42   4  -- I need to supply the target attribute name:
20:17:42   5  AND targ = '&1'
20:17:42   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gattn'

0 rows deleted.

Elapsed: 00:00:00.02
20:17:42 SQL> 
20:17:42 SQL> -- We do a drumroll here:
20:17:42 SQL> 
20:17:42 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:17:42   2  SELECT
20:17:42   3  prdate
20:17:42   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:17:42   5  ,sysdate
20:17:42   6  ,SUBSTR(prdate,1,7)pair
20:17:42   7  ,SUBSTR(prdate,-19)ydate
20:17:42   8  ,'&1'
20:17:42   9  FROM svmc_apply_prep
20:17:42  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gattn'

1 row created.

Elapsed: 00:00:00.05
20:17:42 SQL> @score1_5min.sql	      2010-10-20 22:40:01 aud_usd
20:17:42 SQL> --
20:17:42 SQL> -- score1_5min.sql
20:17:42 SQL> --
20:17:42 SQL> 
20:17:42 SQL> -- Demo:
20:17:42 SQL> -- @score1_5min.sql 2010-12-31 20:45:01 aud_usd
20:17:42 SQL> 
20:17:42 SQL> CREATE OR REPLACE VIEW sme AS
20:17:42   2  SELECT
20:17:42   3  prdate
20:17:42   4  ,NULL gatt
20:17:42   5  ,g00
20:17:42   6  ,g01
20:17:42   7  ,g02
20:17:42   8  ,g03
20:17:42   9  ,g04
20:17:42  10  ,g05
20:17:42  11  ,g06
20:17:42  12  ,g07
20:17:42  13  ,g08
20:17:42  14  ,g09
20:17:42  15  ,g10
20:17:42  16  ,g11
20:17:42  17  ,g12
20:17:42  18  ,g13
20:17:42  19  ,g14
20:17:42  20  ,g15
20:17:42  21  ,g16
20:17:42  22  ,g17
20:17:42  23  ,g18
20:17:42  24  ,g19
20:17:42  25  ,g20
20:17:42  26  ,g21
20:17:42  27  ,g22
20:17:42  28  ,g23
20:17:42  29  ,g24
20:17:42  30  ,g25
20:17:42  31  ,g26
20:17:42  32  ,g27
20:17:42  33  ,g28
20:17:42  34  ,g29
20:17:42  35  ,g30
20:17:42  36  ,g31
20:17:42  37  ,g32
20:17:42  38  ,g33
20:17:42  39  ,g34
20:17:42  40  ,g35
20:17:42  41  ,g36
20:17:42  42  ,g37
20:17:42  43  ,g38
20:17:42  44  ,g39
20:17:42  45  ,g40
20:17:42  46  ,g41
20:17:42  47  FROM modsrc
20:17:42  48  WHERE ydate = '&1'||' '||'&2'
20:17:42  49  AND pair = '&3'
20:17:42  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-10-20'||' '||'22:40:01'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.05
20:17:42 SQL> 
20:17:42 SQL> -- rpt
20:17:42 SQL> -- We should see just 1 row:
20:17:42 SQL> 
20:17:42 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.02
20:17:42 SQL> 
20:17:42 SQL> -- Build the model:
20:17:42 SQL> CREATE OR REPLACE VIEW bme AS
20:17:42   2  SELECT
20:17:42   3  prdate
20:17:42   4  ,gatt
20:17:42   5  ,g00
20:17:42   6  ,g01
20:17:42   7  ,g02
20:17:42   8  ,g03
20:17:42   9  ,g04
20:17:42  10  ,g05
20:17:42  11  ,g06
20:17:42  12  ,g07
20:17:42  13  ,g08
20:17:42  14  ,g09
20:17:42  15  ,g10
20:17:42  16  ,g11
20:17:42  17  ,g12
20:17:42  18  ,g13
20:17:42  19  ,g14
20:17:42  20  ,g15
20:17:42  21  ,g16
20:17:42  22  ,g17
20:17:42  23  ,g18
20:17:42  24  ,g19
20:17:42  25  ,g20
20:17:42  26  ,g21
20:17:42  27  ,g22
20:17:42  28  ,g23
20:17:42  29  ,g24
20:17:42  30  ,g25
20:17:42  31  ,g26
20:17:42  32  ,g27
20:17:42  33  ,g28
20:17:42  34  ,g29
20:17:42  35  ,g30
20:17:42  36  ,g31
20:17:42  37  ,g32
20:17:42  38  ,g33
20:17:42  39  ,g34
20:17:42  40  ,g35
20:17:42  41  ,g36
20:17:42  42  ,g37
20:17:42  43  ,g38
20:17:42  44  ,g39
20:17:42  45  ,g40
20:17:42  46  ,g41
20:17:42  47  FROM modsrc
20:17:42  48  WHERE gatt IN('nup','up')
20:17:42  49  -- Use only rows which are older than 1 day:
20:17:42  50  AND 1+ydate < '&1'||' '||'&2'
20:17:42  51  AND pair = '&3'
20:17:42  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-10-20'||' '||'22:40:01'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.06
20:17:42 SQL> 
20:17:42 SQL> -- rpt
20:17:42 SQL> 
20:17:42 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt;

GAT COUNT(PRDATE)
--- -------------
nup	     1753
up	     1180

Elapsed: 00:00:00.03
20:17:42 SQL> 
20:17:42 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-10-19 22:35:01

Elapsed: 00:00:00.01
20:17:42 SQL> 
20:17:42 SQL> -- Now build model from bme and score sme
20:17:42 SQL> @score1.sql gatt
20:17:42 SQL> --
20:17:42 SQL> -- score1.sql
20:17:42 SQL> --
20:17:42 SQL> 
20:17:42 SQL> -- I use this script to send 5 params to score.sql
20:17:42 SQL> -- which does the heavy lifting of creating an SVM model.
20:17:42 SQL> -- Then at the very end of this script I use the model
20:17:42 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:17:42 SQL> 
20:17:42 SQL> -- I call this script from 2 other scripts:
20:17:42 SQL> -- score1_5min.sql
20:17:42 SQL> -- score1_5min_gattn.sql
20:17:42 SQL> 
20:17:42 SQL> -- The 1st param is the name of the target attribute.
20:17:42 SQL> -- I like to call my target attributes either gatt or gattn.
20:17:42 SQL> 
20:17:42 SQL> -- Demo:
20:17:42 SQL> -- @score1.sql 'gatt'
20:17:42 SQL> -- @score1.sql 'gattn'
20:17:42 SQL> 
20:17:42 SQL> -- Now, I fill up svmc_apply_prep.
20:17:42 SQL> -- I use same model_name used in score.sql
20:17:42 SQL> DEFINE model_name = 'svmfx101'
20:17:42 SQL> DEFINE bldtable	= 'bme'
20:17:42 SQL> DEFINE scoretable = 'sme'
20:17:42 SQL> DEFINE case_id	= 'prdate'
20:17:42 SQL> -- Demo:
20:17:42 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:17:42 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:17:42 SQL> --
20:17:42 SQL> -- score.sql
20:17:42 SQL> --
20:17:42 SQL> 
20:17:42 SQL> -- usage: score.sql
20:17:42 SQL> 
20:17:42 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:17:42 SQL> 
20:17:42 SQL> -- DEFINE target	   = 'gatt'
20:17:42 SQL> -- DEFINE model_name = 'svmfx101'
20:17:42 SQL> -- DEFINE bldtable   = 'bme'
20:17:42 SQL> -- DEFINE scoretable = 'sme'
20:17:42 SQL> -- DEFINE case_id    = 'prdate'
20:17:42 SQL> 
20:17:42 SQL> DEFINE target	= '&1'
20:17:42 SQL> DEFINE model_name = '&2'
20:17:42 SQL> DEFINE bldtable	= '&3'
20:17:42 SQL> DEFINE scoretable = '&4'
20:17:42 SQL> DEFINE case_id	= '&5'
20:17:42 SQL> 
20:17:42 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:17:42 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:17:42 SQL> 
20:17:42 SQL> -- Builds an SVM model using pl/sql.
20:17:42 SQL> 
20:17:42 SQL> -----------------------------------------------------------------------
20:17:42 SQL> --			    BUILD THE MODEL
20:17:42 SQL> -----------------------------------------------------------------------
20:17:42 SQL> 
20:17:42 SQL> -- Cleanup old build data preparation objects for repeat runs
20:17:42 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.00
20:17:42 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.01
20:17:42 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:17:42 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.00
20:17:42 SQL> 
20:17:42 SQL> 
20:17:42 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:17:42 SQL> --
20:17:42 SQL> -- DROP	TABLE svmc_settings ;
20:17:42 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:17:42 SQL> -- DELETE svmc_settings;
20:17:42 SQL> 
20:17:42 SQL> -- The default classification algorithm is Naive Bayes. So override
20:17:42 SQL> -- this choice to SVM using a settings table.
20:17:42 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:17:42 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:17:42 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:17:42 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:17:42 SQL> -- models.
20:17:42 SQL> --
20:17:42 SQL> 
20:17:42 SQL> -- Do this once and then comment it out.
20:17:42 SQL> -- That makes script go faster.
20:17:42 SQL> -- BEGIN
20:17:42 SQL> -- -- Populate settings table
20:17:42 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:17:42 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:17:42 SQL> --
20:17:42 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:17:42 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:17:42 SQL> --
20:17:42 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:17:42 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:17:42 SQL> --   COMMIT;
20:17:42 SQL> -- END;
20:17:42 SQL> -- /
20:17:42 SQL> 
20:17:42 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:17:42 SQL> 
20:17:42 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:17:42   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:17:42   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
20:17:42 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:17:42   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:17:42   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:17:42 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:17:42   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:17:42   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:17:42 SQL> 
20:17:42 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:17:42   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:17:42   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:17:42 SQL> 
20:17:42 SQL> --------------------------------
20:17:42 SQL> -- PREPARE BUILD (TRAINING) DATA
20:17:42 SQL> --
20:17:42 SQL> 
20:17:42 SQL> -- 1. Missing Value treatment for all Predictors and
20:17:42 SQL> -- 2. Outlier Treatment and
20:17:42 SQL> -- 3. Normalization are performed below.
20:17:42 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:17:42 SQL> --    normalized here.
20:17:42 SQL> 
20:17:42 SQL> BEGIN
20:17:42   2  	-- Perform missing value treatment for all predictors
20:17:42   3  	-- create miss tables
20:17:42   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:17:42   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:17:42   6  
20:17:42   7  	-- populate miss tables
20:17:42   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:17:42   9  	  miss_table_name => 'svmc_miss_num',
20:17:42  10  	  data_table_name => '&bldtable',
20:17:42  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:17:42  12  
20:17:42  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:17:42  14  	  miss_table_name => 'svmc_miss_cat',
20:17:42  15  	  data_table_name => '&bldtable',
20:17:42  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:17:42  17  
20:17:42  18  	-- xform input data to replace missing values
20:17:42  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:17:42  20  	  miss_table_name => 'svmc_miss_num',
20:17:42  21  	  data_table_name => '&bldtable',
20:17:42  22  	  xform_view_name => 'xformed_build_miss_num');
20:17:42  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:17:42  24  	  miss_table_name => 'svmc_miss_cat',
20:17:42  25  	  data_table_name => '&bldtable',
20:17:42  26  	  xform_view_name => 'xformed_build_miss_cat');
20:17:42  27  
20:17:42  28  	-- Perform outlier treatment.
20:17:42  29  	-- create clip table
20:17:42  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:17:42  31  
20:17:42  32  	-- populate clip table
20:17:42  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:17:42  34  	  clip_table_name => 'svmc_clip',
20:17:42  35  	  data_table_name => '&bldtable',
20:17:42  36  	  tail_frac	  => 0.025,
20:17:42  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:17:42  38  
20:17:42  39  	-- xform input data to winsorized data
20:17:42  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:17:42  41  	  clip_table_name => 'svmc_clip',
20:17:42  42  	  data_table_name => '&bldtable',
20:17:42  43  	  xform_view_name => 'svmc_winsor');
20:17:42  44  
20:17:42  45  	-- create normalization table
20:17:42  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:17:42  47  
20:17:42  48  	-- populate normalization table based on winsorized data
20:17:42  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:17:42  50  	  norm_table_name => 'svmc_norm',
20:17:42  51  	  data_table_name => 'svmc_winsor',
20:17:42  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:17:42  53  
20:17:42  54  	-- normalize the original data
20:17:42  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:17:42  56  	  norm_table_name => 'svmc_norm',
20:17:42  57  	  data_table_name => '&bldtable',
20:17:42  58  	  xform_view_name => 'svmc_build_prep');
20:17:42  59  END;
20:17:42  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.12
20:17:43 SQL> 
20:17:43 SQL> ---------------------
20:17:43 SQL> -- CREATE A NEW MODEL
20:17:43 SQL> --
20:17:43 SQL> -- Cleanup old model with the same name for repeat runs
20:17:43 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:17:43   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:17:43   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.01
20:17:44 SQL> 
20:17:44 SQL> -- Build a new SVM Model
20:17:44 SQL> BEGIN
20:17:44   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:17:44   3  	  model_name	      => '&model_name',
20:17:44   4  	  mining_function     => dbms_data_mining.classification,
20:17:44   5  	  data_table_name     => 'svmc_build_prep',
20:17:44   6  	  case_id_column_name => '&case_id',
20:17:44   7  	  target_column_name  => '&target',
20:17:44   8  	  settings_table_name => 'svmc_settings');
20:17:44   9  END;
20:17:44  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:02.52
20:17:47 SQL> 
20:17:47 SQL> -----------------------------------------------------------------------
20:17:47 SQL> --			       APPLY/score THE MODEL
20:17:47 SQL> -----------------------------------------------------------------------
20:17:47 SQL> 
20:17:47 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:17:47 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:17:47   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:17:47   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:17:47 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:17:47   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:17:47   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:17:47 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:17:47   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:17:47   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:17:47 SQL> -----------------------
20:17:47 SQL> -- PREPARE SCORING DATA
20:17:47 SQL> --
20:17:47 SQL> -- If the data for model creation has been prepared, then the data
20:17:47 SQL> -- to be scored using the model must be prepared in the same manner
20:17:47 SQL> -- in order to obtain meaningful results.
20:17:47 SQL> --
20:17:47 SQL> -- 1. Missing Value treatment for all Predictors and
20:17:47 SQL> -- 2. Normalization
20:17:47 SQL> -- No outlier treatment will be performed during test and apply. The
20:17:47 SQL> -- normalization step is sufficient, since the normalization parameters
20:17:47 SQL> -- already capture the effects of outlier treatment done with build data.
20:17:47 SQL> --
20:17:47 SQL> BEGIN
20:17:47   2  	-- Xform Test data to replace missing values
20:17:47   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:17:47   4  	  miss_table_name => 'svmc_miss_num',
20:17:47   5  	  data_table_name => '&scoretable',
20:17:47   6  	  xform_view_name => 'xformed_apply_miss_num');
20:17:47   7  
20:17:47   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:17:47   9  	  miss_table_name => 'svmc_miss_cat',
20:17:47  10  	  data_table_name => '&scoretable',
20:17:47  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:17:47  12  
20:17:47  13  	-- Normalize the data to be scored
20:17:47  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:17:47  15  	  norm_table_name => 'svmc_norm',
20:17:47  16  	  data_table_name => '&scoretable',
20:17:47  17  	  xform_view_name => 'svmc_apply_prep');
20:17:47  18  END;
20:17:47  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.14
20:17:47 SQL> 
20:17:47 SQL> -- Maybe I already collected a score for this prdate.
20:17:47 SQL> -- DELETE it if I did:
20:17:47 SQL> DELETE svm62scores
20:17:47   2  WHERE score > 0
20:17:47   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:17:47   4  -- I need to supply the target attribute name:
20:17:47   5  AND targ = '&1'
20:17:47   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gatt'

0 rows deleted.

Elapsed: 00:00:00.01
20:17:47 SQL> 
20:17:47 SQL> -- We do a drumroll here:
20:17:47 SQL> 
20:17:47 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:17:47   2  SELECT
20:17:47   3  prdate
20:17:47   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:17:47   5  ,sysdate
20:17:47   6  ,SUBSTR(prdate,1,7)pair
20:17:47   7  ,SUBSTR(prdate,-19)ydate
20:17:47   8  ,'&1'
20:17:47   9  FROM svmc_apply_prep
20:17:47  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gatt'

1 row created.

Elapsed: 00:00:00.04
20:17:47 SQL> @score1_5min_gattn.sql	2010-11-15 06:15:01 aud_usd
20:17:47 SQL> --
20:17:47 SQL> -- score1_5min_gattn.sql
20:17:47 SQL> --
20:17:47 SQL> 
20:17:47 SQL> -- Demo:
20:17:47 SQL> -- @score1_5min_gattn.sql 2010-12-31 20:45:01 aud_usd
20:17:47 SQL> 
20:17:47 SQL> CREATE OR REPLACE VIEW sme AS
20:17:47   2  SELECT
20:17:47   3  prdate
20:17:47   4  ,NULL gattn
20:17:47   5  ,g00
20:17:47   6  ,g01
20:17:47   7  ,g02
20:17:47   8  ,g03
20:17:47   9  ,g04
20:17:47  10  ,g05
20:17:47  11  ,g06
20:17:47  12  ,g07
20:17:47  13  ,g08
20:17:47  14  ,g09
20:17:47  15  ,g10
20:17:47  16  ,g11
20:17:47  17  ,g12
20:17:47  18  ,g13
20:17:47  19  ,g14
20:17:47  20  ,g15
20:17:47  21  ,g16
20:17:47  22  ,g17
20:17:47  23  ,g18
20:17:47  24  ,g19
20:17:47  25  ,g20
20:17:47  26  ,g21
20:17:47  27  ,g22
20:17:47  28  ,g23
20:17:47  29  ,g24
20:17:47  30  ,g25
20:17:47  31  ,g26
20:17:47  32  ,g27
20:17:47  33  ,g28
20:17:47  34  ,g29
20:17:47  35  ,g30
20:17:47  36  ,g31
20:17:47  37  ,g32
20:17:47  38  ,g33
20:17:47  39  ,g34
20:17:47  40  ,g35
20:17:47  41  ,g36
20:17:47  42  ,g37
20:17:47  43  ,g38
20:17:47  44  ,g39
20:17:47  45  ,g40
20:17:47  46  ,g41
20:17:47  47  FROM modsrc
20:17:47  48  WHERE ydate = '&1'||' '||'&2'
20:17:47  49  AND pair = '&3'
20:17:47  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-11-15'||' '||'06:15:01'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:17:47 SQL> 
20:17:47 SQL> -- rpt
20:17:47 SQL> -- We should see just 1 row:
20:17:47 SQL> 
20:17:47 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.01
20:17:47 SQL> 
20:17:47 SQL> -- Build the model:
20:17:47 SQL> CREATE OR REPLACE VIEW bme AS
20:17:47   2  SELECT
20:17:47   3  prdate
20:17:47   4  ,gattn
20:17:47   5  ,g00
20:17:47   6  ,g01
20:17:47   7  ,g02
20:17:47   8  ,g03
20:17:47   9  ,g04
20:17:47  10  ,g05
20:17:47  11  ,g06
20:17:47  12  ,g07
20:17:47  13  ,g08
20:17:47  14  ,g09
20:17:47  15  ,g10
20:17:47  16  ,g11
20:17:47  17  ,g12
20:17:47  18  ,g13
20:17:47  19  ,g14
20:17:47  20  ,g15
20:17:47  21  ,g16
20:17:47  22  ,g17
20:17:47  23  ,g18
20:17:47  24  ,g19
20:17:47  25  ,g20
20:17:47  26  ,g21
20:17:47  27  ,g22
20:17:47  28  ,g23
20:17:47  29  ,g24
20:17:47  30  ,g25
20:17:47  31  ,g26
20:17:47  32  ,g27
20:17:47  33  ,g28
20:17:47  34  ,g29
20:17:47  35  ,g30
20:17:47  36  ,g31
20:17:47  37  ,g32
20:17:47  38  ,g33
20:17:47  39  ,g34
20:17:47  40  ,g35
20:17:47  41  ,g36
20:17:47  42  ,g37
20:17:47  43  ,g38
20:17:47  44  ,g39
20:17:47  45  ,g40
20:17:47  46  ,g41
20:17:47  47  FROM modsrc
20:17:47  48  WHERE gattn IN('nup','up')
20:17:47  49  -- Use only rows which are older than 1 day:
20:17:47  50  AND 1+ydate < '&1'||' '||'&2'
20:17:47  51  AND pair = '&3'
20:17:47  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-11-15'||' '||'06:15:01'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:17:47 SQL> 
20:17:47 SQL> -- rpt
20:17:47 SQL> 
20:17:47 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	     5188
up	     2956

Elapsed: 00:00:00.02
20:17:47 SQL> 
20:17:47 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-11-12 21:50:01

Elapsed: 00:00:00.01
20:17:47 SQL> 
20:17:47 SQL> -- Now build model from bme and score sme
20:17:47 SQL> @score1.sql gattn
20:17:47 SQL> --
20:17:47 SQL> -- score1.sql
20:17:47 SQL> --
20:17:47 SQL> 
20:17:47 SQL> -- I use this script to send 5 params to score.sql
20:17:47 SQL> -- which does the heavy lifting of creating an SVM model.
20:17:47 SQL> -- Then at the very end of this script I use the model
20:17:47 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:17:47 SQL> 
20:17:47 SQL> -- I call this script from 2 other scripts:
20:17:47 SQL> -- score1_5min.sql
20:17:47 SQL> -- score1_5min_gattn.sql
20:17:47 SQL> 
20:17:47 SQL> -- The 1st param is the name of the target attribute.
20:17:47 SQL> -- I like to call my target attributes either gatt or gattn.
20:17:47 SQL> 
20:17:47 SQL> -- Demo:
20:17:47 SQL> -- @score1.sql 'gatt'
20:17:47 SQL> -- @score1.sql 'gattn'
20:17:47 SQL> 
20:17:47 SQL> -- Now, I fill up svmc_apply_prep.
20:17:47 SQL> -- I use same model_name used in score.sql
20:17:47 SQL> DEFINE model_name = 'svmfx101'
20:17:47 SQL> DEFINE bldtable	= 'bme'
20:17:47 SQL> DEFINE scoretable = 'sme'
20:17:47 SQL> DEFINE case_id	= 'prdate'
20:17:47 SQL> -- Demo:
20:17:47 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:17:47 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:17:47 SQL> --
20:17:47 SQL> -- score.sql
20:17:47 SQL> --
20:17:47 SQL> 
20:17:47 SQL> -- usage: score.sql
20:17:47 SQL> 
20:17:47 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:17:47 SQL> 
20:17:47 SQL> -- DEFINE target	   = 'gatt'
20:17:47 SQL> -- DEFINE model_name = 'svmfx101'
20:17:47 SQL> -- DEFINE bldtable   = 'bme'
20:17:47 SQL> -- DEFINE scoretable = 'sme'
20:17:47 SQL> -- DEFINE case_id    = 'prdate'
20:17:47 SQL> 
20:17:47 SQL> DEFINE target	= '&1'
20:17:47 SQL> DEFINE model_name = '&2'
20:17:47 SQL> DEFINE bldtable	= '&3'
20:17:47 SQL> DEFINE scoretable = '&4'
20:17:47 SQL> DEFINE case_id	= '&5'
20:17:47 SQL> 
20:17:47 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:17:47 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:17:47 SQL> 
20:17:47 SQL> -- Builds an SVM model using pl/sql.
20:17:47 SQL> 
20:17:47 SQL> -----------------------------------------------------------------------
20:17:47 SQL> --			    BUILD THE MODEL
20:17:47 SQL> -----------------------------------------------------------------------
20:17:47 SQL> 
20:17:47 SQL> -- Cleanup old build data preparation objects for repeat runs
20:17:47 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.00
20:17:47 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:17:47 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:17:47 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.00
20:17:47 SQL> 
20:17:47 SQL> 
20:17:47 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:17:47 SQL> --
20:17:47 SQL> -- DROP	TABLE svmc_settings ;
20:17:47 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:17:47 SQL> -- DELETE svmc_settings;
20:17:47 SQL> 
20:17:47 SQL> -- The default classification algorithm is Naive Bayes. So override
20:17:47 SQL> -- this choice to SVM using a settings table.
20:17:47 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:17:47 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:17:47 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:17:47 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:17:47 SQL> -- models.
20:17:47 SQL> --
20:17:47 SQL> 
20:17:47 SQL> -- Do this once and then comment it out.
20:17:47 SQL> -- That makes script go faster.
20:17:47 SQL> -- BEGIN
20:17:47 SQL> -- -- Populate settings table
20:17:47 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:17:47 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:17:47 SQL> --
20:17:47 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:17:47 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:17:47 SQL> --
20:17:47 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:17:47 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:17:47 SQL> --   COMMIT;
20:17:47 SQL> -- END;
20:17:47 SQL> -- /
20:17:47 SQL> 
20:17:47 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:17:47 SQL> 
20:17:47 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:17:47   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:17:47   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:17:47 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:17:47   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:17:47   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:17:47 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:17:47   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:17:47   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:17:47 SQL> 
20:17:47 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:17:47   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:17:47   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:17:47 SQL> 
20:17:47 SQL> --------------------------------
20:17:47 SQL> -- PREPARE BUILD (TRAINING) DATA
20:17:47 SQL> --
20:17:47 SQL> 
20:17:47 SQL> -- 1. Missing Value treatment for all Predictors and
20:17:47 SQL> -- 2. Outlier Treatment and
20:17:47 SQL> -- 3. Normalization are performed below.
20:17:47 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:17:47 SQL> --    normalized here.
20:17:47 SQL> 
20:17:47 SQL> BEGIN
20:17:47   2  	-- Perform missing value treatment for all predictors
20:17:47   3  	-- create miss tables
20:17:47   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:17:47   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:17:47   6  
20:17:47   7  	-- populate miss tables
20:17:47   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:17:47   9  	  miss_table_name => 'svmc_miss_num',
20:17:47  10  	  data_table_name => '&bldtable',
20:17:47  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:17:47  12  
20:17:47  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:17:47  14  	  miss_table_name => 'svmc_miss_cat',
20:17:47  15  	  data_table_name => '&bldtable',
20:17:47  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:17:47  17  
20:17:47  18  	-- xform input data to replace missing values
20:17:47  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:17:47  20  	  miss_table_name => 'svmc_miss_num',
20:17:47  21  	  data_table_name => '&bldtable',
20:17:47  22  	  xform_view_name => 'xformed_build_miss_num');
20:17:47  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:17:47  24  	  miss_table_name => 'svmc_miss_cat',
20:17:47  25  	  data_table_name => '&bldtable',
20:17:47  26  	  xform_view_name => 'xformed_build_miss_cat');
20:17:47  27  
20:17:47  28  	-- Perform outlier treatment.
20:17:47  29  	-- create clip table
20:17:47  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:17:47  31  
20:17:47  32  	-- populate clip table
20:17:47  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:17:47  34  	  clip_table_name => 'svmc_clip',
20:17:47  35  	  data_table_name => '&bldtable',
20:17:47  36  	  tail_frac	  => 0.025,
20:17:47  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:17:47  38  
20:17:47  39  	-- xform input data to winsorized data
20:17:47  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:17:47  41  	  clip_table_name => 'svmc_clip',
20:17:47  42  	  data_table_name => '&bldtable',
20:17:47  43  	  xform_view_name => 'svmc_winsor');
20:17:47  44  
20:17:47  45  	-- create normalization table
20:17:47  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:17:47  47  
20:17:47  48  	-- populate normalization table based on winsorized data
20:17:47  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:17:47  50  	  norm_table_name => 'svmc_norm',
20:17:47  51  	  data_table_name => 'svmc_winsor',
20:17:47  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:17:47  53  
20:17:47  54  	-- normalize the original data
20:17:47  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:17:47  56  	  norm_table_name => 'svmc_norm',
20:17:47  57  	  data_table_name => '&bldtable',
20:17:47  58  	  xform_view_name => 'svmc_build_prep');
20:17:47  59  END;
20:17:47  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.51
20:17:49 SQL> 
20:17:49 SQL> ---------------------
20:17:49 SQL> -- CREATE A NEW MODEL
20:17:49 SQL> --
20:17:49 SQL> -- Cleanup old model with the same name for repeat runs
20:17:49 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:17:49   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:17:49   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.96
20:17:50 SQL> 
20:17:50 SQL> -- Build a new SVM Model
20:17:50 SQL> BEGIN
20:17:50   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:17:50   3  	  model_name	      => '&model_name',
20:17:50   4  	  mining_function     => dbms_data_mining.classification,
20:17:50   5  	  data_table_name     => 'svmc_build_prep',
20:17:50   6  	  case_id_column_name => '&case_id',
20:17:50   7  	  target_column_name  => '&target',
20:17:50   8  	  settings_table_name => 'svmc_settings');
20:17:50   9  END;
20:17:50  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:03.80
20:17:54 SQL> 
20:17:54 SQL> -----------------------------------------------------------------------
20:17:54 SQL> --			       APPLY/score THE MODEL
20:17:54 SQL> -----------------------------------------------------------------------
20:17:54 SQL> 
20:17:54 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:17:54 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:17:54   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:17:54   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:17:54 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:17:54   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:17:54   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:17:54 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:17:54   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:17:54   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:17:54 SQL> -----------------------
20:17:54 SQL> -- PREPARE SCORING DATA
20:17:54 SQL> --
20:17:54 SQL> -- If the data for model creation has been prepared, then the data
20:17:54 SQL> -- to be scored using the model must be prepared in the same manner
20:17:54 SQL> -- in order to obtain meaningful results.
20:17:54 SQL> --
20:17:54 SQL> -- 1. Missing Value treatment for all Predictors and
20:17:54 SQL> -- 2. Normalization
20:17:54 SQL> -- No outlier treatment will be performed during test and apply. The
20:17:54 SQL> -- normalization step is sufficient, since the normalization parameters
20:17:54 SQL> -- already capture the effects of outlier treatment done with build data.
20:17:54 SQL> --
20:17:54 SQL> BEGIN
20:17:54   2  	-- Xform Test data to replace missing values
20:17:54   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:17:54   4  	  miss_table_name => 'svmc_miss_num',
20:17:54   5  	  data_table_name => '&scoretable',
20:17:54   6  	  xform_view_name => 'xformed_apply_miss_num');
20:17:54   7  
20:17:54   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:17:54   9  	  miss_table_name => 'svmc_miss_cat',
20:17:54  10  	  data_table_name => '&scoretable',
20:17:54  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:17:54  12  
20:17:54  13  	-- Normalize the data to be scored
20:17:54  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:17:54  15  	  norm_table_name => 'svmc_norm',
20:17:54  16  	  data_table_name => '&scoretable',
20:17:54  17  	  xform_view_name => 'svmc_apply_prep');
20:17:54  18  END;
20:17:54  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.18
20:17:54 SQL> 
20:17:54 SQL> -- Maybe I already collected a score for this prdate.
20:17:54 SQL> -- DELETE it if I did:
20:17:54 SQL> DELETE svm62scores
20:17:54   2  WHERE score > 0
20:17:54   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:17:54   4  -- I need to supply the target attribute name:
20:17:54   5  AND targ = '&1'
20:17:54   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gattn'

0 rows deleted.

Elapsed: 00:00:00.02
20:17:54 SQL> 
20:17:54 SQL> -- We do a drumroll here:
20:17:54 SQL> 
20:17:54 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:17:54   2  SELECT
20:17:54   3  prdate
20:17:54   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:17:54   5  ,sysdate
20:17:54   6  ,SUBSTR(prdate,1,7)pair
20:17:54   7  ,SUBSTR(prdate,-19)ydate
20:17:54   8  ,'&1'
20:17:54   9  FROM svmc_apply_prep
20:17:54  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gattn'

1 row created.

Elapsed: 00:00:00.05
20:17:54 SQL> @score1_5min.sql	      2010-12-10 16:25:00 aud_usd
20:17:54 SQL> --
20:17:54 SQL> -- score1_5min.sql
20:17:54 SQL> --
20:17:54 SQL> 
20:17:54 SQL> -- Demo:
20:17:54 SQL> -- @score1_5min.sql 2010-12-31 20:45:01 aud_usd
20:17:54 SQL> 
20:17:54 SQL> CREATE OR REPLACE VIEW sme AS
20:17:54   2  SELECT
20:17:54   3  prdate
20:17:54   4  ,NULL gatt
20:17:54   5  ,g00
20:17:54   6  ,g01
20:17:54   7  ,g02
20:17:54   8  ,g03
20:17:54   9  ,g04
20:17:54  10  ,g05
20:17:54  11  ,g06
20:17:54  12  ,g07
20:17:54  13  ,g08
20:17:54  14  ,g09
20:17:54  15  ,g10
20:17:54  16  ,g11
20:17:54  17  ,g12
20:17:54  18  ,g13
20:17:54  19  ,g14
20:17:54  20  ,g15
20:17:54  21  ,g16
20:17:54  22  ,g17
20:17:54  23  ,g18
20:17:54  24  ,g19
20:17:54  25  ,g20
20:17:54  26  ,g21
20:17:54  27  ,g22
20:17:54  28  ,g23
20:17:54  29  ,g24
20:17:54  30  ,g25
20:17:54  31  ,g26
20:17:54  32  ,g27
20:17:54  33  ,g28
20:17:54  34  ,g29
20:17:54  35  ,g30
20:17:54  36  ,g31
20:17:54  37  ,g32
20:17:54  38  ,g33
20:17:54  39  ,g34
20:17:54  40  ,g35
20:17:54  41  ,g36
20:17:54  42  ,g37
20:17:54  43  ,g38
20:17:54  44  ,g39
20:17:54  45  ,g40
20:17:54  46  ,g41
20:17:54  47  FROM modsrc
20:17:54  48  WHERE ydate = '&1'||' '||'&2'
20:17:54  49  AND pair = '&3'
20:17:54  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-12-10'||' '||'16:25:00'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:17:54 SQL> 
20:17:54 SQL> -- rpt
20:17:54 SQL> -- We should see just 1 row:
20:17:54 SQL> 
20:17:54 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.02
20:17:54 SQL> 
20:17:54 SQL> -- Build the model:
20:17:54 SQL> CREATE OR REPLACE VIEW bme AS
20:17:54   2  SELECT
20:17:54   3  prdate
20:17:54   4  ,gatt
20:17:54   5  ,g00
20:17:54   6  ,g01
20:17:54   7  ,g02
20:17:54   8  ,g03
20:17:54   9  ,g04
20:17:54  10  ,g05
20:17:54  11  ,g06
20:17:54  12  ,g07
20:17:54  13  ,g08
20:17:54  14  ,g09
20:17:54  15  ,g10
20:17:54  16  ,g11
20:17:54  17  ,g12
20:17:54  18  ,g13
20:17:54  19  ,g14
20:17:54  20  ,g15
20:17:54  21  ,g16
20:17:54  22  ,g17
20:17:54  23  ,g18
20:17:54  24  ,g19
20:17:54  25  ,g20
20:17:54  26  ,g21
20:17:54  27  ,g22
20:17:54  28  ,g23
20:17:54  29  ,g24
20:17:54  30  ,g25
20:17:54  31  ,g26
20:17:54  32  ,g27
20:17:54  33  ,g28
20:17:54  34  ,g29
20:17:54  35  ,g30
20:17:54  36  ,g31
20:17:54  37  ,g32
20:17:54  38  ,g33
20:17:54  39  ,g34
20:17:54  40  ,g35
20:17:54  41  ,g36
20:17:54  42  ,g37
20:17:54  43  ,g38
20:17:54  44  ,g39
20:17:54  45  ,g40
20:17:54  46  ,g41
20:17:54  47  FROM modsrc
20:17:54  48  WHERE gatt IN('nup','up')
20:17:54  49  -- Use only rows which are older than 1 day:
20:17:54  50  AND 1+ydate < '&1'||' '||'&2'
20:17:54  51  AND pair = '&3'
20:17:54  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-12-10'||' '||'16:25:00'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.05
20:17:54 SQL> 
20:17:54 SQL> -- rpt
20:17:54 SQL> 
20:17:54 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt;

GAT COUNT(PRDATE)
--- -------------
nup	     8318
up	     5229

Elapsed: 00:00:00.03
20:17:54 SQL> 
20:17:54 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-12-09 16:20:00

Elapsed: 00:00:00.01
20:17:54 SQL> 
20:17:54 SQL> -- Now build model from bme and score sme
20:17:54 SQL> @score1.sql gatt
20:17:54 SQL> --
20:17:54 SQL> -- score1.sql
20:17:54 SQL> --
20:17:54 SQL> 
20:17:54 SQL> -- I use this script to send 5 params to score.sql
20:17:54 SQL> -- which does the heavy lifting of creating an SVM model.
20:17:54 SQL> -- Then at the very end of this script I use the model
20:17:54 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:17:54 SQL> 
20:17:54 SQL> -- I call this script from 2 other scripts:
20:17:54 SQL> -- score1_5min.sql
20:17:54 SQL> -- score1_5min_gattn.sql
20:17:54 SQL> 
20:17:54 SQL> -- The 1st param is the name of the target attribute.
20:17:54 SQL> -- I like to call my target attributes either gatt or gattn.
20:17:54 SQL> 
20:17:54 SQL> -- Demo:
20:17:54 SQL> -- @score1.sql 'gatt'
20:17:54 SQL> -- @score1.sql 'gattn'
20:17:54 SQL> 
20:17:54 SQL> -- Now, I fill up svmc_apply_prep.
20:17:54 SQL> -- I use same model_name used in score.sql
20:17:54 SQL> DEFINE model_name = 'svmfx101'
20:17:54 SQL> DEFINE bldtable	= 'bme'
20:17:54 SQL> DEFINE scoretable = 'sme'
20:17:54 SQL> DEFINE case_id	= 'prdate'
20:17:54 SQL> -- Demo:
20:17:54 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:17:54 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:17:54 SQL> --
20:17:54 SQL> -- score.sql
20:17:54 SQL> --
20:17:54 SQL> 
20:17:54 SQL> -- usage: score.sql
20:17:54 SQL> 
20:17:54 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:17:54 SQL> 
20:17:54 SQL> -- DEFINE target	   = 'gatt'
20:17:54 SQL> -- DEFINE model_name = 'svmfx101'
20:17:54 SQL> -- DEFINE bldtable   = 'bme'
20:17:54 SQL> -- DEFINE scoretable = 'sme'
20:17:54 SQL> -- DEFINE case_id    = 'prdate'
20:17:54 SQL> 
20:17:54 SQL> DEFINE target	= '&1'
20:17:54 SQL> DEFINE model_name = '&2'
20:17:54 SQL> DEFINE bldtable	= '&3'
20:17:54 SQL> DEFINE scoretable = '&4'
20:17:54 SQL> DEFINE case_id	= '&5'
20:17:54 SQL> 
20:17:54 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:17:54 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:17:54 SQL> 
20:17:54 SQL> -- Builds an SVM model using pl/sql.
20:17:54 SQL> 
20:17:54 SQL> -----------------------------------------------------------------------
20:17:54 SQL> --			    BUILD THE MODEL
20:17:54 SQL> -----------------------------------------------------------------------
20:17:54 SQL> 
20:17:54 SQL> -- Cleanup old build data preparation objects for repeat runs
20:17:54 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.00
20:17:54 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:17:54 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:17:54 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.00
20:17:54 SQL> 
20:17:54 SQL> 
20:17:54 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:17:54 SQL> --
20:17:54 SQL> -- DROP	TABLE svmc_settings ;
20:17:54 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:17:54 SQL> -- DELETE svmc_settings;
20:17:54 SQL> 
20:17:54 SQL> -- The default classification algorithm is Naive Bayes. So override
20:17:54 SQL> -- this choice to SVM using a settings table.
20:17:54 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:17:54 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:17:54 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:17:54 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:17:54 SQL> -- models.
20:17:54 SQL> --
20:17:54 SQL> 
20:17:54 SQL> -- Do this once and then comment it out.
20:17:54 SQL> -- That makes script go faster.
20:17:54 SQL> -- BEGIN
20:17:54 SQL> -- -- Populate settings table
20:17:54 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:17:54 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:17:54 SQL> --
20:17:54 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:17:54 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:17:54 SQL> --
20:17:54 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:17:54 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:17:54 SQL> --   COMMIT;
20:17:54 SQL> -- END;
20:17:54 SQL> -- /
20:17:54 SQL> 
20:17:54 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:17:54 SQL> 
20:17:54 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:17:54   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:17:54   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:17:54 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:17:54   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:17:54   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:17:54 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:17:54   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:17:54   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:17:54 SQL> 
20:17:54 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:17:54   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:17:54   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:17:54 SQL> 
20:17:54 SQL> --------------------------------
20:17:54 SQL> -- PREPARE BUILD (TRAINING) DATA
20:17:54 SQL> --
20:17:54 SQL> 
20:17:54 SQL> -- 1. Missing Value treatment for all Predictors and
20:17:54 SQL> -- 2. Outlier Treatment and
20:17:54 SQL> -- 3. Normalization are performed below.
20:17:54 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:17:54 SQL> --    normalized here.
20:17:54 SQL> 
20:17:54 SQL> BEGIN
20:17:54   2  	-- Perform missing value treatment for all predictors
20:17:54   3  	-- create miss tables
20:17:54   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:17:54   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:17:54   6  
20:17:54   7  	-- populate miss tables
20:17:54   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:17:54   9  	  miss_table_name => 'svmc_miss_num',
20:17:54  10  	  data_table_name => '&bldtable',
20:17:54  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:17:54  12  
20:17:54  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:17:54  14  	  miss_table_name => 'svmc_miss_cat',
20:17:54  15  	  data_table_name => '&bldtable',
20:17:54  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:17:54  17  
20:17:54  18  	-- xform input data to replace missing values
20:17:54  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:17:54  20  	  miss_table_name => 'svmc_miss_num',
20:17:54  21  	  data_table_name => '&bldtable',
20:17:54  22  	  xform_view_name => 'xformed_build_miss_num');
20:17:54  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:17:54  24  	  miss_table_name => 'svmc_miss_cat',
20:17:54  25  	  data_table_name => '&bldtable',
20:17:54  26  	  xform_view_name => 'xformed_build_miss_cat');
20:17:54  27  
20:17:54  28  	-- Perform outlier treatment.
20:17:54  29  	-- create clip table
20:17:54  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:17:54  31  
20:17:54  32  	-- populate clip table
20:17:54  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:17:54  34  	  clip_table_name => 'svmc_clip',
20:17:54  35  	  data_table_name => '&bldtable',
20:17:54  36  	  tail_frac	  => 0.025,
20:17:54  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:17:54  38  
20:17:54  39  	-- xform input data to winsorized data
20:17:54  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:17:54  41  	  clip_table_name => 'svmc_clip',
20:17:54  42  	  data_table_name => '&bldtable',
20:17:54  43  	  xform_view_name => 'svmc_winsor');
20:17:54  44  
20:17:54  45  	-- create normalization table
20:17:54  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:17:54  47  
20:17:54  48  	-- populate normalization table based on winsorized data
20:17:54  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:17:54  50  	  norm_table_name => 'svmc_norm',
20:17:54  51  	  data_table_name => 'svmc_winsor',
20:17:54  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:17:54  53  
20:17:54  54  	-- normalize the original data
20:17:54  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:17:54  56  	  norm_table_name => 'svmc_norm',
20:17:54  57  	  data_table_name => '&bldtable',
20:17:54  58  	  xform_view_name => 'svmc_build_prep');
20:17:54  59  END;
20:17:54  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.98
20:17:56 SQL> 
20:17:56 SQL> ---------------------
20:17:56 SQL> -- CREATE A NEW MODEL
20:17:56 SQL> --
20:17:56 SQL> -- Cleanup old model with the same name for repeat runs
20:17:56 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:17:56   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:17:56   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.90
20:17:57 SQL> 
20:17:57 SQL> -- Build a new SVM Model
20:17:57 SQL> BEGIN
20:17:57   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:17:57   3  	  model_name	      => '&model_name',
20:17:57   4  	  mining_function     => dbms_data_mining.classification,
20:17:57   5  	  data_table_name     => 'svmc_build_prep',
20:17:57   6  	  case_id_column_name => '&case_id',
20:17:57   7  	  target_column_name  => '&target',
20:17:57   8  	  settings_table_name => 'svmc_settings');
20:17:57   9  END;
20:17:57  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:03.86
20:18:01 SQL> 
20:18:01 SQL> -----------------------------------------------------------------------
20:18:01 SQL> --			       APPLY/score THE MODEL
20:18:01 SQL> -----------------------------------------------------------------------
20:18:01 SQL> 
20:18:01 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:18:01 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:18:01   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:18:01   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.09
20:18:01 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:18:01   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:18:01   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.09
20:18:01 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:18:01   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:18:01   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.18
20:18:01 SQL> -----------------------
20:18:01 SQL> -- PREPARE SCORING DATA
20:18:01 SQL> --
20:18:01 SQL> -- If the data for model creation has been prepared, then the data
20:18:01 SQL> -- to be scored using the model must be prepared in the same manner
20:18:01 SQL> -- in order to obtain meaningful results.
20:18:01 SQL> --
20:18:01 SQL> -- 1. Missing Value treatment for all Predictors and
20:18:01 SQL> -- 2. Normalization
20:18:01 SQL> -- No outlier treatment will be performed during test and apply. The
20:18:01 SQL> -- normalization step is sufficient, since the normalization parameters
20:18:01 SQL> -- already capture the effects of outlier treatment done with build data.
20:18:01 SQL> --
20:18:01 SQL> BEGIN
20:18:01   2  	-- Xform Test data to replace missing values
20:18:01   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:18:01   4  	  miss_table_name => 'svmc_miss_num',
20:18:01   5  	  data_table_name => '&scoretable',
20:18:01   6  	  xform_view_name => 'xformed_apply_miss_num');
20:18:01   7  
20:18:01   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:18:01   9  	  miss_table_name => 'svmc_miss_cat',
20:18:01  10  	  data_table_name => '&scoretable',
20:18:01  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:18:01  12  
20:18:01  13  	-- Normalize the data to be scored
20:18:01  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:18:01  15  	  norm_table_name => 'svmc_norm',
20:18:01  16  	  data_table_name => '&scoretable',
20:18:01  17  	  xform_view_name => 'svmc_apply_prep');
20:18:01  18  END;
20:18:01  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.18
20:18:02 SQL> 
20:18:02 SQL> -- Maybe I already collected a score for this prdate.
20:18:02 SQL> -- DELETE it if I did:
20:18:02 SQL> DELETE svm62scores
20:18:02   2  WHERE score > 0
20:18:02   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:18:02   4  -- I need to supply the target attribute name:
20:18:02   5  AND targ = '&1'
20:18:02   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gatt'

0 rows deleted.

Elapsed: 00:00:00.01
20:18:02 SQL> 
20:18:02 SQL> -- We do a drumroll here:
20:18:02 SQL> 
20:18:02 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:18:02   2  SELECT
20:18:02   3  prdate
20:18:02   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:18:02   5  ,sysdate
20:18:02   6  ,SUBSTR(prdate,1,7)pair
20:18:02   7  ,SUBSTR(prdate,-19)ydate
20:18:02   8  ,'&1'
20:18:02   9  FROM svmc_apply_prep
20:18:02  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gatt'

1 row created.

Elapsed: 00:00:00.05
20:18:02 SQL> @score1_5min.sql	      2010-11-04 09:55:01 aud_usd
20:18:02 SQL> --
20:18:02 SQL> -- score1_5min.sql
20:18:02 SQL> --
20:18:02 SQL> 
20:18:02 SQL> -- Demo:
20:18:02 SQL> -- @score1_5min.sql 2010-12-31 20:45:01 aud_usd
20:18:02 SQL> 
20:18:02 SQL> CREATE OR REPLACE VIEW sme AS
20:18:02   2  SELECT
20:18:02   3  prdate
20:18:02   4  ,NULL gatt
20:18:02   5  ,g00
20:18:02   6  ,g01
20:18:02   7  ,g02
20:18:02   8  ,g03
20:18:02   9  ,g04
20:18:02  10  ,g05
20:18:02  11  ,g06
20:18:02  12  ,g07
20:18:02  13  ,g08
20:18:02  14  ,g09
20:18:02  15  ,g10
20:18:02  16  ,g11
20:18:02  17  ,g12
20:18:02  18  ,g13
20:18:02  19  ,g14
20:18:02  20  ,g15
20:18:02  21  ,g16
20:18:02  22  ,g17
20:18:02  23  ,g18
20:18:02  24  ,g19
20:18:02  25  ,g20
20:18:02  26  ,g21
20:18:02  27  ,g22
20:18:02  28  ,g23
20:18:02  29  ,g24
20:18:02  30  ,g25
20:18:02  31  ,g26
20:18:02  32  ,g27
20:18:02  33  ,g28
20:18:02  34  ,g29
20:18:02  35  ,g30
20:18:02  36  ,g31
20:18:02  37  ,g32
20:18:02  38  ,g33
20:18:02  39  ,g34
20:18:02  40  ,g35
20:18:02  41  ,g36
20:18:02  42  ,g37
20:18:02  43  ,g38
20:18:02  44  ,g39
20:18:02  45  ,g40
20:18:02  46  ,g41
20:18:02  47  FROM modsrc
20:18:02  48  WHERE ydate = '&1'||' '||'&2'
20:18:02  49  AND pair = '&3'
20:18:02  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-11-04'||' '||'09:55:01'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:18:02 SQL> 
20:18:02 SQL> -- rpt
20:18:02 SQL> -- We should see just 1 row:
20:18:02 SQL> 
20:18:02 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.01
20:18:02 SQL> 
20:18:02 SQL> -- Build the model:
20:18:02 SQL> CREATE OR REPLACE VIEW bme AS
20:18:02   2  SELECT
20:18:02   3  prdate
20:18:02   4  ,gatt
20:18:02   5  ,g00
20:18:02   6  ,g01
20:18:02   7  ,g02
20:18:02   8  ,g03
20:18:02   9  ,g04
20:18:02  10  ,g05
20:18:02  11  ,g06
20:18:02  12  ,g07
20:18:02  13  ,g08
20:18:02  14  ,g09
20:18:02  15  ,g10
20:18:02  16  ,g11
20:18:02  17  ,g12
20:18:02  18  ,g13
20:18:02  19  ,g14
20:18:02  20  ,g15
20:18:02  21  ,g16
20:18:02  22  ,g17
20:18:02  23  ,g18
20:18:02  24  ,g19
20:18:02  25  ,g20
20:18:02  26  ,g21
20:18:02  27  ,g22
20:18:02  28  ,g23
20:18:02  29  ,g24
20:18:02  30  ,g25
20:18:02  31  ,g26
20:18:02  32  ,g27
20:18:02  33  ,g28
20:18:02  34  ,g29
20:18:02  35  ,g30
20:18:02  36  ,g31
20:18:02  37  ,g32
20:18:02  38  ,g33
20:18:02  39  ,g34
20:18:02  40  ,g35
20:18:02  41  ,g36
20:18:02  42  ,g37
20:18:02  43  ,g38
20:18:02  44  ,g39
20:18:02  45  ,g40
20:18:02  46  ,g41
20:18:02  47  FROM modsrc
20:18:02  48  WHERE gatt IN('nup','up')
20:18:02  49  -- Use only rows which are older than 1 day:
20:18:02  50  AND 1+ydate < '&1'||' '||'&2'
20:18:02  51  AND pair = '&3'
20:18:02  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-11-04'||' '||'09:55:01'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:18:02 SQL> 
20:18:02 SQL> -- rpt
20:18:02 SQL> 
20:18:02 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt;

GAT COUNT(PRDATE)
--- -------------
nup	     3526
up	     2446

Elapsed: 00:00:00.02
20:18:02 SQL> 
20:18:02 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-11-03 09:50:01

Elapsed: 00:00:00.01
20:18:02 SQL> 
20:18:02 SQL> -- Now build model from bme and score sme
20:18:02 SQL> @score1.sql gatt
20:18:02 SQL> --
20:18:02 SQL> -- score1.sql
20:18:02 SQL> --
20:18:02 SQL> 
20:18:02 SQL> -- I use this script to send 5 params to score.sql
20:18:02 SQL> -- which does the heavy lifting of creating an SVM model.
20:18:02 SQL> -- Then at the very end of this script I use the model
20:18:02 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:18:02 SQL> 
20:18:02 SQL> -- I call this script from 2 other scripts:
20:18:02 SQL> -- score1_5min.sql
20:18:02 SQL> -- score1_5min_gattn.sql
20:18:02 SQL> 
20:18:02 SQL> -- The 1st param is the name of the target attribute.
20:18:02 SQL> -- I like to call my target attributes either gatt or gattn.
20:18:02 SQL> 
20:18:02 SQL> -- Demo:
20:18:02 SQL> -- @score1.sql 'gatt'
20:18:02 SQL> -- @score1.sql 'gattn'
20:18:02 SQL> 
20:18:02 SQL> -- Now, I fill up svmc_apply_prep.
20:18:02 SQL> -- I use same model_name used in score.sql
20:18:02 SQL> DEFINE model_name = 'svmfx101'
20:18:02 SQL> DEFINE bldtable	= 'bme'
20:18:02 SQL> DEFINE scoretable = 'sme'
20:18:02 SQL> DEFINE case_id	= 'prdate'
20:18:02 SQL> -- Demo:
20:18:02 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:18:02 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:18:02 SQL> --
20:18:02 SQL> -- score.sql
20:18:02 SQL> --
20:18:02 SQL> 
20:18:02 SQL> -- usage: score.sql
20:18:02 SQL> 
20:18:02 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:18:02 SQL> 
20:18:02 SQL> -- DEFINE target	   = 'gatt'
20:18:02 SQL> -- DEFINE model_name = 'svmfx101'
20:18:02 SQL> -- DEFINE bldtable   = 'bme'
20:18:02 SQL> -- DEFINE scoretable = 'sme'
20:18:02 SQL> -- DEFINE case_id    = 'prdate'
20:18:02 SQL> 
20:18:02 SQL> DEFINE target	= '&1'
20:18:02 SQL> DEFINE model_name = '&2'
20:18:02 SQL> DEFINE bldtable	= '&3'
20:18:02 SQL> DEFINE scoretable = '&4'
20:18:02 SQL> DEFINE case_id	= '&5'
20:18:02 SQL> 
20:18:02 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:18:02 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:18:02 SQL> 
20:18:02 SQL> -- Builds an SVM model using pl/sql.
20:18:02 SQL> 
20:18:02 SQL> -----------------------------------------------------------------------
20:18:02 SQL> --			    BUILD THE MODEL
20:18:02 SQL> -----------------------------------------------------------------------
20:18:02 SQL> 
20:18:02 SQL> -- Cleanup old build data preparation objects for repeat runs
20:18:02 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.00
20:18:02 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:18:02 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:18:02 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.00
20:18:02 SQL> 
20:18:02 SQL> 
20:18:02 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:18:02 SQL> --
20:18:02 SQL> -- DROP	TABLE svmc_settings ;
20:18:02 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:18:02 SQL> -- DELETE svmc_settings;
20:18:02 SQL> 
20:18:02 SQL> -- The default classification algorithm is Naive Bayes. So override
20:18:02 SQL> -- this choice to SVM using a settings table.
20:18:02 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:18:02 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:18:02 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:18:02 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:18:02 SQL> -- models.
20:18:02 SQL> --
20:18:02 SQL> 
20:18:02 SQL> -- Do this once and then comment it out.
20:18:02 SQL> -- That makes script go faster.
20:18:02 SQL> -- BEGIN
20:18:02 SQL> -- -- Populate settings table
20:18:02 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:18:02 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:18:02 SQL> --
20:18:02 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:18:02 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:18:02 SQL> --
20:18:02 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:18:02 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:18:02 SQL> --   COMMIT;
20:18:02 SQL> -- END;
20:18:02 SQL> -- /
20:18:02 SQL> 
20:18:02 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:18:02 SQL> 
20:18:02 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:18:02   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:18:02   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:18:02 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:18:02   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:18:02   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:18:02 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:18:02   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:18:02   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:18:02 SQL> 
20:18:02 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:18:02   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:18:02   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:18:02 SQL> 
20:18:02 SQL> --------------------------------
20:18:02 SQL> -- PREPARE BUILD (TRAINING) DATA
20:18:02 SQL> --
20:18:02 SQL> 
20:18:02 SQL> -- 1. Missing Value treatment for all Predictors and
20:18:02 SQL> -- 2. Outlier Treatment and
20:18:02 SQL> -- 3. Normalization are performed below.
20:18:02 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:18:02 SQL> --    normalized here.
20:18:02 SQL> 
20:18:02 SQL> BEGIN
20:18:02   2  	-- Perform missing value treatment for all predictors
20:18:02   3  	-- create miss tables
20:18:02   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:18:02   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:18:02   6  
20:18:02   7  	-- populate miss tables
20:18:02   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:18:02   9  	  miss_table_name => 'svmc_miss_num',
20:18:02  10  	  data_table_name => '&bldtable',
20:18:02  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:18:02  12  
20:18:02  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:18:02  14  	  miss_table_name => 'svmc_miss_cat',
20:18:02  15  	  data_table_name => '&bldtable',
20:18:02  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:18:02  17  
20:18:02  18  	-- xform input data to replace missing values
20:18:02  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:18:02  20  	  miss_table_name => 'svmc_miss_num',
20:18:02  21  	  data_table_name => '&bldtable',
20:18:02  22  	  xform_view_name => 'xformed_build_miss_num');
20:18:02  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:18:02  24  	  miss_table_name => 'svmc_miss_cat',
20:18:02  25  	  data_table_name => '&bldtable',
20:18:02  26  	  xform_view_name => 'xformed_build_miss_cat');
20:18:02  27  
20:18:02  28  	-- Perform outlier treatment.
20:18:02  29  	-- create clip table
20:18:02  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:18:02  31  
20:18:02  32  	-- populate clip table
20:18:02  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:18:02  34  	  clip_table_name => 'svmc_clip',
20:18:02  35  	  data_table_name => '&bldtable',
20:18:02  36  	  tail_frac	  => 0.025,
20:18:02  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:18:02  38  
20:18:02  39  	-- xform input data to winsorized data
20:18:02  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:18:02  41  	  clip_table_name => 'svmc_clip',
20:18:02  42  	  data_table_name => '&bldtable',
20:18:02  43  	  xform_view_name => 'svmc_winsor');
20:18:02  44  
20:18:02  45  	-- create normalization table
20:18:02  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:18:02  47  
20:18:02  48  	-- populate normalization table based on winsorized data
20:18:02  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:18:02  50  	  norm_table_name => 'svmc_norm',
20:18:02  51  	  data_table_name => 'svmc_winsor',
20:18:02  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:18:02  53  
20:18:02  54  	-- normalize the original data
20:18:02  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:18:02  56  	  norm_table_name => 'svmc_norm',
20:18:02  57  	  data_table_name => '&bldtable',
20:18:02  58  	  xform_view_name => 'svmc_build_prep');
20:18:02  59  END;
20:18:02  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.35
20:18:03 SQL> 
20:18:03 SQL> ---------------------
20:18:03 SQL> -- CREATE A NEW MODEL
20:18:03 SQL> --
20:18:03 SQL> -- Cleanup old model with the same name for repeat runs
20:18:03 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:18:03   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:18:03   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.07
20:18:04 SQL> 
20:18:04 SQL> -- Build a new SVM Model
20:18:04 SQL> BEGIN
20:18:04   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:18:04   3  	  model_name	      => '&model_name',
20:18:04   4  	  mining_function     => dbms_data_mining.classification,
20:18:04   5  	  data_table_name     => 'svmc_build_prep',
20:18:04   6  	  case_id_column_name => '&case_id',
20:18:04   7  	  target_column_name  => '&target',
20:18:04   8  	  settings_table_name => 'svmc_settings');
20:18:04   9  END;
20:18:04  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:03.61
20:18:08 SQL> 
20:18:08 SQL> -----------------------------------------------------------------------
20:18:08 SQL> --			       APPLY/score THE MODEL
20:18:08 SQL> -----------------------------------------------------------------------
20:18:08 SQL> 
20:18:08 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:18:08 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:18:08   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:18:08   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.11
20:18:08 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:18:08   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:18:08   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:18:08 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:18:08   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:18:08   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:18:08 SQL> -----------------------
20:18:08 SQL> -- PREPARE SCORING DATA
20:18:08 SQL> --
20:18:08 SQL> -- If the data for model creation has been prepared, then the data
20:18:08 SQL> -- to be scored using the model must be prepared in the same manner
20:18:08 SQL> -- in order to obtain meaningful results.
20:18:08 SQL> --
20:18:08 SQL> -- 1. Missing Value treatment for all Predictors and
20:18:08 SQL> -- 2. Normalization
20:18:08 SQL> -- No outlier treatment will be performed during test and apply. The
20:18:08 SQL> -- normalization step is sufficient, since the normalization parameters
20:18:08 SQL> -- already capture the effects of outlier treatment done with build data.
20:18:08 SQL> --
20:18:08 SQL> BEGIN
20:18:08   2  	-- Xform Test data to replace missing values
20:18:08   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:18:08   4  	  miss_table_name => 'svmc_miss_num',
20:18:08   5  	  data_table_name => '&scoretable',
20:18:08   6  	  xform_view_name => 'xformed_apply_miss_num');
20:18:08   7  
20:18:08   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:18:08   9  	  miss_table_name => 'svmc_miss_cat',
20:18:08  10  	  data_table_name => '&scoretable',
20:18:08  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:18:08  12  
20:18:08  13  	-- Normalize the data to be scored
20:18:08  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:18:08  15  	  norm_table_name => 'svmc_norm',
20:18:08  16  	  data_table_name => '&scoretable',
20:18:08  17  	  xform_view_name => 'svmc_apply_prep');
20:18:08  18  END;
20:18:08  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.18
20:18:08 SQL> 
20:18:08 SQL> -- Maybe I already collected a score for this prdate.
20:18:08 SQL> -- DELETE it if I did:
20:18:08 SQL> DELETE svm62scores
20:18:08   2  WHERE score > 0
20:18:08   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:18:08   4  -- I need to supply the target attribute name:
20:18:08   5  AND targ = '&1'
20:18:08   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gatt'

0 rows deleted.

Elapsed: 00:00:00.02
20:18:08 SQL> 
20:18:08 SQL> -- We do a drumroll here:
20:18:08 SQL> 
20:18:08 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:18:08   2  SELECT
20:18:08   3  prdate
20:18:08   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:18:08   5  ,sysdate
20:18:08   6  ,SUBSTR(prdate,1,7)pair
20:18:08   7  ,SUBSTR(prdate,-19)ydate
20:18:08   8  ,'&1'
20:18:08   9  FROM svmc_apply_prep
20:18:08  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gatt'

1 row created.

Elapsed: 00:00:00.05
20:18:08 SQL> @score1_5min.sql	      2010-11-01 14:25:01 aud_usd
20:18:08 SQL> --
20:18:08 SQL> -- score1_5min.sql
20:18:08 SQL> --
20:18:08 SQL> 
20:18:08 SQL> -- Demo:
20:18:08 SQL> -- @score1_5min.sql 2010-12-31 20:45:01 aud_usd
20:18:08 SQL> 
20:18:08 SQL> CREATE OR REPLACE VIEW sme AS
20:18:08   2  SELECT
20:18:08   3  prdate
20:18:08   4  ,NULL gatt
20:18:08   5  ,g00
20:18:08   6  ,g01
20:18:08   7  ,g02
20:18:08   8  ,g03
20:18:08   9  ,g04
20:18:08  10  ,g05
20:18:08  11  ,g06
20:18:08  12  ,g07
20:18:08  13  ,g08
20:18:08  14  ,g09
20:18:08  15  ,g10
20:18:08  16  ,g11
20:18:08  17  ,g12
20:18:08  18  ,g13
20:18:08  19  ,g14
20:18:08  20  ,g15
20:18:08  21  ,g16
20:18:08  22  ,g17
20:18:08  23  ,g18
20:18:08  24  ,g19
20:18:08  25  ,g20
20:18:08  26  ,g21
20:18:08  27  ,g22
20:18:08  28  ,g23
20:18:08  29  ,g24
20:18:08  30  ,g25
20:18:08  31  ,g26
20:18:08  32  ,g27
20:18:08  33  ,g28
20:18:08  34  ,g29
20:18:08  35  ,g30
20:18:08  36  ,g31
20:18:08  37  ,g32
20:18:08  38  ,g33
20:18:08  39  ,g34
20:18:08  40  ,g35
20:18:08  41  ,g36
20:18:08  42  ,g37
20:18:08  43  ,g38
20:18:08  44  ,g39
20:18:08  45  ,g40
20:18:08  46  ,g41
20:18:08  47  FROM modsrc
20:18:08  48  WHERE ydate = '&1'||' '||'&2'
20:18:08  49  AND pair = '&3'
20:18:08  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-11-01'||' '||'14:25:01'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:18:08 SQL> 
20:18:08 SQL> -- rpt
20:18:08 SQL> -- We should see just 1 row:
20:18:08 SQL> 
20:18:08 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.02
20:18:08 SQL> 
20:18:08 SQL> -- Build the model:
20:18:08 SQL> CREATE OR REPLACE VIEW bme AS
20:18:08   2  SELECT
20:18:08   3  prdate
20:18:08   4  ,gatt
20:18:08   5  ,g00
20:18:08   6  ,g01
20:18:08   7  ,g02
20:18:08   8  ,g03
20:18:08   9  ,g04
20:18:08  10  ,g05
20:18:08  11  ,g06
20:18:08  12  ,g07
20:18:08  13  ,g08
20:18:08  14  ,g09
20:18:08  15  ,g10
20:18:08  16  ,g11
20:18:08  17  ,g12
20:18:08  18  ,g13
20:18:08  19  ,g14
20:18:08  20  ,g15
20:18:08  21  ,g16
20:18:08  22  ,g17
20:18:08  23  ,g18
20:18:08  24  ,g19
20:18:08  25  ,g20
20:18:08  26  ,g21
20:18:08  27  ,g22
20:18:08  28  ,g23
20:18:08  29  ,g24
20:18:08  30  ,g25
20:18:08  31  ,g26
20:18:08  32  ,g27
20:18:08  33  ,g28
20:18:08  34  ,g29
20:18:08  35  ,g30
20:18:08  36  ,g31
20:18:08  37  ,g32
20:18:08  38  ,g33
20:18:08  39  ,g34
20:18:08  40  ,g35
20:18:08  41  ,g36
20:18:08  42  ,g37
20:18:08  43  ,g38
20:18:08  44  ,g39
20:18:08  45  ,g40
20:18:08  46  ,g41
20:18:08  47  FROM modsrc
20:18:08  48  WHERE gatt IN('nup','up')
20:18:08  49  -- Use only rows which are older than 1 day:
20:18:08  50  AND 1+ydate < '&1'||' '||'&2'
20:18:08  51  AND pair = '&3'
20:18:08  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-11-01'||' '||'14:25:01'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.05
20:18:08 SQL> 
20:18:08 SQL> -- rpt
20:18:08 SQL> 
20:18:08 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt;

GAT COUNT(PRDATE)
--- -------------
nup	     3057
up	     2183

Elapsed: 00:00:00.02
20:18:08 SQL> 
20:18:08 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-10-29 21:50:01

Elapsed: 00:00:00.01
20:18:08 SQL> 
20:18:08 SQL> -- Now build model from bme and score sme
20:18:08 SQL> @score1.sql gatt
20:18:08 SQL> --
20:18:08 SQL> -- score1.sql
20:18:08 SQL> --
20:18:08 SQL> 
20:18:08 SQL> -- I use this script to send 5 params to score.sql
20:18:08 SQL> -- which does the heavy lifting of creating an SVM model.
20:18:08 SQL> -- Then at the very end of this script I use the model
20:18:08 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:18:08 SQL> 
20:18:08 SQL> -- I call this script from 2 other scripts:
20:18:08 SQL> -- score1_5min.sql
20:18:08 SQL> -- score1_5min_gattn.sql
20:18:08 SQL> 
20:18:08 SQL> -- The 1st param is the name of the target attribute.
20:18:08 SQL> -- I like to call my target attributes either gatt or gattn.
20:18:08 SQL> 
20:18:08 SQL> -- Demo:
20:18:08 SQL> -- @score1.sql 'gatt'
20:18:08 SQL> -- @score1.sql 'gattn'
20:18:08 SQL> 
20:18:08 SQL> -- Now, I fill up svmc_apply_prep.
20:18:08 SQL> -- I use same model_name used in score.sql
20:18:08 SQL> DEFINE model_name = 'svmfx101'
20:18:08 SQL> DEFINE bldtable	= 'bme'
20:18:08 SQL> DEFINE scoretable = 'sme'
20:18:08 SQL> DEFINE case_id	= 'prdate'
20:18:08 SQL> -- Demo:
20:18:08 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:18:08 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:18:08 SQL> --
20:18:08 SQL> -- score.sql
20:18:08 SQL> --
20:18:08 SQL> 
20:18:08 SQL> -- usage: score.sql
20:18:08 SQL> 
20:18:08 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:18:08 SQL> 
20:18:08 SQL> -- DEFINE target	   = 'gatt'
20:18:08 SQL> -- DEFINE model_name = 'svmfx101'
20:18:08 SQL> -- DEFINE bldtable   = 'bme'
20:18:08 SQL> -- DEFINE scoretable = 'sme'
20:18:08 SQL> -- DEFINE case_id    = 'prdate'
20:18:08 SQL> 
20:18:08 SQL> DEFINE target	= '&1'
20:18:08 SQL> DEFINE model_name = '&2'
20:18:08 SQL> DEFINE bldtable	= '&3'
20:18:08 SQL> DEFINE scoretable = '&4'
20:18:08 SQL> DEFINE case_id	= '&5'
20:18:08 SQL> 
20:18:08 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:18:08 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:18:08 SQL> 
20:18:08 SQL> -- Builds an SVM model using pl/sql.
20:18:08 SQL> 
20:18:08 SQL> -----------------------------------------------------------------------
20:18:08 SQL> --			    BUILD THE MODEL
20:18:08 SQL> -----------------------------------------------------------------------
20:18:08 SQL> 
20:18:08 SQL> -- Cleanup old build data preparation objects for repeat runs
20:18:08 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.00
20:18:08 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:18:08 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:18:08 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.00
20:18:08 SQL> 
20:18:08 SQL> 
20:18:08 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:18:08 SQL> --
20:18:08 SQL> -- DROP	TABLE svmc_settings ;
20:18:08 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:18:08 SQL> -- DELETE svmc_settings;
20:18:08 SQL> 
20:18:08 SQL> -- The default classification algorithm is Naive Bayes. So override
20:18:08 SQL> -- this choice to SVM using a settings table.
20:18:08 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:18:08 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:18:08 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:18:08 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:18:08 SQL> -- models.
20:18:08 SQL> --
20:18:08 SQL> 
20:18:08 SQL> -- Do this once and then comment it out.
20:18:08 SQL> -- That makes script go faster.
20:18:08 SQL> -- BEGIN
20:18:08 SQL> -- -- Populate settings table
20:18:08 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:18:08 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:18:08 SQL> --
20:18:08 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:18:08 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:18:08 SQL> --
20:18:08 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:18:08 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:18:08 SQL> --   COMMIT;
20:18:08 SQL> -- END;
20:18:08 SQL> -- /
20:18:08 SQL> 
20:18:08 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.01
20:18:08 SQL> 
20:18:08 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:18:08   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:18:08   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:18:09 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:18:09   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:18:09   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:18:09 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:18:09   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:18:09   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:18:09 SQL> 
20:18:09 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:18:09   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:18:09   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:18:09 SQL> 
20:18:09 SQL> --------------------------------
20:18:09 SQL> -- PREPARE BUILD (TRAINING) DATA
20:18:09 SQL> --
20:18:09 SQL> 
20:18:09 SQL> -- 1. Missing Value treatment for all Predictors and
20:18:09 SQL> -- 2. Outlier Treatment and
20:18:09 SQL> -- 3. Normalization are performed below.
20:18:09 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:18:09 SQL> --    normalized here.
20:18:09 SQL> 
20:18:09 SQL> BEGIN
20:18:09   2  	-- Perform missing value treatment for all predictors
20:18:09   3  	-- create miss tables
20:18:09   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:18:09   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:18:09   6  
20:18:09   7  	-- populate miss tables
20:18:09   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:18:09   9  	  miss_table_name => 'svmc_miss_num',
20:18:09  10  	  data_table_name => '&bldtable',
20:18:09  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:18:09  12  
20:18:09  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:18:09  14  	  miss_table_name => 'svmc_miss_cat',
20:18:09  15  	  data_table_name => '&bldtable',
20:18:09  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:18:09  17  
20:18:09  18  	-- xform input data to replace missing values
20:18:09  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:18:09  20  	  miss_table_name => 'svmc_miss_num',
20:18:09  21  	  data_table_name => '&bldtable',
20:18:09  22  	  xform_view_name => 'xformed_build_miss_num');
20:18:09  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:18:09  24  	  miss_table_name => 'svmc_miss_cat',
20:18:09  25  	  data_table_name => '&bldtable',
20:18:09  26  	  xform_view_name => 'xformed_build_miss_cat');
20:18:09  27  
20:18:09  28  	-- Perform outlier treatment.
20:18:09  29  	-- create clip table
20:18:09  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:18:09  31  
20:18:09  32  	-- populate clip table
20:18:09  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:18:09  34  	  clip_table_name => 'svmc_clip',
20:18:09  35  	  data_table_name => '&bldtable',
20:18:09  36  	  tail_frac	  => 0.025,
20:18:09  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:18:09  38  
20:18:09  39  	-- xform input data to winsorized data
20:18:09  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:18:09  41  	  clip_table_name => 'svmc_clip',
20:18:09  42  	  data_table_name => '&bldtable',
20:18:09  43  	  xform_view_name => 'svmc_winsor');
20:18:09  44  
20:18:09  45  	-- create normalization table
20:18:09  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:18:09  47  
20:18:09  48  	-- populate normalization table based on winsorized data
20:18:09  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:18:09  50  	  norm_table_name => 'svmc_norm',
20:18:09  51  	  data_table_name => 'svmc_winsor',
20:18:09  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:18:09  53  
20:18:09  54  	-- normalize the original data
20:18:09  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:18:09  56  	  norm_table_name => 'svmc_norm',
20:18:09  57  	  data_table_name => '&bldtable',
20:18:09  58  	  xform_view_name => 'svmc_build_prep');
20:18:09  59  END;
20:18:09  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.29
20:18:10 SQL> 
20:18:10 SQL> ---------------------
20:18:10 SQL> -- CREATE A NEW MODEL
20:18:10 SQL> --
20:18:10 SQL> -- Cleanup old model with the same name for repeat runs
20:18:10 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:18:10   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:18:10   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.91
20:18:11 SQL> 
20:18:11 SQL> -- Build a new SVM Model
20:18:11 SQL> BEGIN
20:18:11   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:18:11   3  	  model_name	      => '&model_name',
20:18:11   4  	  mining_function     => dbms_data_mining.classification,
20:18:11   5  	  data_table_name     => 'svmc_build_prep',
20:18:11   6  	  case_id_column_name => '&case_id',
20:18:11   7  	  target_column_name  => '&target',
20:18:11   8  	  settings_table_name => 'svmc_settings');
20:18:11   9  END;
20:18:11  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:03.12
20:18:14 SQL> 
20:18:14 SQL> -----------------------------------------------------------------------
20:18:14 SQL> --			       APPLY/score THE MODEL
20:18:14 SQL> -----------------------------------------------------------------------
20:18:14 SQL> 
20:18:14 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:18:14 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:18:14   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:18:14   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:18:14 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:18:14   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:18:14   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:18:14 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:18:14   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:18:14   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:18:14 SQL> -----------------------
20:18:14 SQL> -- PREPARE SCORING DATA
20:18:14 SQL> --
20:18:14 SQL> -- If the data for model creation has been prepared, then the data
20:18:14 SQL> -- to be scored using the model must be prepared in the same manner
20:18:14 SQL> -- in order to obtain meaningful results.
20:18:14 SQL> --
20:18:14 SQL> -- 1. Missing Value treatment for all Predictors and
20:18:14 SQL> -- 2. Normalization
20:18:14 SQL> -- No outlier treatment will be performed during test and apply. The
20:18:14 SQL> -- normalization step is sufficient, since the normalization parameters
20:18:14 SQL> -- already capture the effects of outlier treatment done with build data.
20:18:14 SQL> --
20:18:14 SQL> BEGIN
20:18:14   2  	-- Xform Test data to replace missing values
20:18:14   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:18:14   4  	  miss_table_name => 'svmc_miss_num',
20:18:14   5  	  data_table_name => '&scoretable',
20:18:14   6  	  xform_view_name => 'xformed_apply_miss_num');
20:18:14   7  
20:18:14   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:18:14   9  	  miss_table_name => 'svmc_miss_cat',
20:18:14  10  	  data_table_name => '&scoretable',
20:18:14  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:18:14  12  
20:18:14  13  	-- Normalize the data to be scored
20:18:14  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:18:14  15  	  norm_table_name => 'svmc_norm',
20:18:14  16  	  data_table_name => '&scoretable',
20:18:14  17  	  xform_view_name => 'svmc_apply_prep');
20:18:14  18  END;
20:18:14  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.18
20:18:14 SQL> 
20:18:14 SQL> -- Maybe I already collected a score for this prdate.
20:18:14 SQL> -- DELETE it if I did:
20:18:14 SQL> DELETE svm62scores
20:18:14   2  WHERE score > 0
20:18:14   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:18:14   4  -- I need to supply the target attribute name:
20:18:14   5  AND targ = '&1'
20:18:14   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gatt'

0 rows deleted.

Elapsed: 00:00:00.02
20:18:14 SQL> 
20:18:14 SQL> -- We do a drumroll here:
20:18:14 SQL> 
20:18:14 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:18:14   2  SELECT
20:18:14   3  prdate
20:18:14   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:18:14   5  ,sysdate
20:18:14   6  ,SUBSTR(prdate,1,7)pair
20:18:14   7  ,SUBSTR(prdate,-19)ydate
20:18:14   8  ,'&1'
20:18:14   9  FROM svmc_apply_prep
20:18:14  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gatt'

1 row created.

Elapsed: 00:00:00.04
20:18:14 SQL> @score1_5min.sql	      2010-11-04 20:55:01 aud_usd
20:18:14 SQL> --
20:18:14 SQL> -- score1_5min.sql
20:18:14 SQL> --
20:18:14 SQL> 
20:18:14 SQL> -- Demo:
20:18:14 SQL> -- @score1_5min.sql 2010-12-31 20:45:01 aud_usd
20:18:14 SQL> 
20:18:14 SQL> CREATE OR REPLACE VIEW sme AS
20:18:14   2  SELECT
20:18:14   3  prdate
20:18:14   4  ,NULL gatt
20:18:14   5  ,g00
20:18:14   6  ,g01
20:18:14   7  ,g02
20:18:14   8  ,g03
20:18:14   9  ,g04
20:18:14  10  ,g05
20:18:14  11  ,g06
20:18:14  12  ,g07
20:18:14  13  ,g08
20:18:14  14  ,g09
20:18:14  15  ,g10
20:18:14  16  ,g11
20:18:14  17  ,g12
20:18:14  18  ,g13
20:18:14  19  ,g14
20:18:14  20  ,g15
20:18:14  21  ,g16
20:18:14  22  ,g17
20:18:14  23  ,g18
20:18:14  24  ,g19
20:18:14  25  ,g20
20:18:14  26  ,g21
20:18:14  27  ,g22
20:18:14  28  ,g23
20:18:14  29  ,g24
20:18:14  30  ,g25
20:18:14  31  ,g26
20:18:14  32  ,g27
20:18:14  33  ,g28
20:18:14  34  ,g29
20:18:14  35  ,g30
20:18:14  36  ,g31
20:18:14  37  ,g32
20:18:14  38  ,g33
20:18:14  39  ,g34
20:18:14  40  ,g35
20:18:14  41  ,g36
20:18:14  42  ,g37
20:18:14  43  ,g38
20:18:14  44  ,g39
20:18:14  45  ,g40
20:18:14  46  ,g41
20:18:14  47  FROM modsrc
20:18:14  48  WHERE ydate = '&1'||' '||'&2'
20:18:14  49  AND pair = '&3'
20:18:14  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-11-04'||' '||'20:55:01'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:18:14 SQL> 
20:18:14 SQL> -- rpt
20:18:14 SQL> -- We should see just 1 row:
20:18:14 SQL> 
20:18:14 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.02
20:18:14 SQL> 
20:18:14 SQL> -- Build the model:
20:18:14 SQL> CREATE OR REPLACE VIEW bme AS
20:18:14   2  SELECT
20:18:14   3  prdate
20:18:14   4  ,gatt
20:18:14   5  ,g00
20:18:14   6  ,g01
20:18:14   7  ,g02
20:18:14   8  ,g03
20:18:14   9  ,g04
20:18:14  10  ,g05
20:18:14  11  ,g06
20:18:14  12  ,g07
20:18:14  13  ,g08
20:18:14  14  ,g09
20:18:14  15  ,g10
20:18:14  16  ,g11
20:18:14  17  ,g12
20:18:14  18  ,g13
20:18:14  19  ,g14
20:18:14  20  ,g15
20:18:14  21  ,g16
20:18:14  22  ,g17
20:18:14  23  ,g18
20:18:14  24  ,g19
20:18:14  25  ,g20
20:18:14  26  ,g21
20:18:14  27  ,g22
20:18:14  28  ,g23
20:18:14  29  ,g24
20:18:14  30  ,g25
20:18:14  31  ,g26
20:18:14  32  ,g27
20:18:14  33  ,g28
20:18:14  34  ,g29
20:18:14  35  ,g30
20:18:14  36  ,g31
20:18:14  37  ,g32
20:18:14  38  ,g33
20:18:14  39  ,g34
20:18:14  40  ,g35
20:18:14  41  ,g36
20:18:14  42  ,g37
20:18:14  43  ,g38
20:18:14  44  ,g39
20:18:14  45  ,g40
20:18:14  46  ,g41
20:18:14  47  FROM modsrc
20:18:14  48  WHERE gatt IN('nup','up')
20:18:14  49  -- Use only rows which are older than 1 day:
20:18:14  50  AND 1+ydate < '&1'||' '||'&2'
20:18:14  51  AND pair = '&3'
20:18:14  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-11-04'||' '||'20:55:01'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:18:14 SQL> 
20:18:14 SQL> -- rpt
20:18:14 SQL> 
20:18:14 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt;

GAT COUNT(PRDATE)
--- -------------
nup	     3580
up	     2524

Elapsed: 00:00:00.03
20:18:14 SQL> 
20:18:14 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-11-03 20:50:01

Elapsed: 00:00:00.01
20:18:14 SQL> 
20:18:14 SQL> -- Now build model from bme and score sme
20:18:14 SQL> @score1.sql gatt
20:18:14 SQL> --
20:18:14 SQL> -- score1.sql
20:18:14 SQL> --
20:18:14 SQL> 
20:18:14 SQL> -- I use this script to send 5 params to score.sql
20:18:14 SQL> -- which does the heavy lifting of creating an SVM model.
20:18:14 SQL> -- Then at the very end of this script I use the model
20:18:14 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:18:14 SQL> 
20:18:14 SQL> -- I call this script from 2 other scripts:
20:18:14 SQL> -- score1_5min.sql
20:18:14 SQL> -- score1_5min_gattn.sql
20:18:14 SQL> 
20:18:14 SQL> -- The 1st param is the name of the target attribute.
20:18:14 SQL> -- I like to call my target attributes either gatt or gattn.
20:18:14 SQL> 
20:18:14 SQL> -- Demo:
20:18:14 SQL> -- @score1.sql 'gatt'
20:18:14 SQL> -- @score1.sql 'gattn'
20:18:14 SQL> 
20:18:14 SQL> -- Now, I fill up svmc_apply_prep.
20:18:14 SQL> -- I use same model_name used in score.sql
20:18:14 SQL> DEFINE model_name = 'svmfx101'
20:18:14 SQL> DEFINE bldtable	= 'bme'
20:18:14 SQL> DEFINE scoretable = 'sme'
20:18:14 SQL> DEFINE case_id	= 'prdate'
20:18:14 SQL> -- Demo:
20:18:14 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:18:14 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:18:14 SQL> --
20:18:14 SQL> -- score.sql
20:18:14 SQL> --
20:18:14 SQL> 
20:18:14 SQL> -- usage: score.sql
20:18:14 SQL> 
20:18:14 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:18:14 SQL> 
20:18:14 SQL> -- DEFINE target	   = 'gatt'
20:18:14 SQL> -- DEFINE model_name = 'svmfx101'
20:18:14 SQL> -- DEFINE bldtable   = 'bme'
20:18:14 SQL> -- DEFINE scoretable = 'sme'
20:18:14 SQL> -- DEFINE case_id    = 'prdate'
20:18:14 SQL> 
20:18:14 SQL> DEFINE target	= '&1'
20:18:14 SQL> DEFINE model_name = '&2'
20:18:14 SQL> DEFINE bldtable	= '&3'
20:18:14 SQL> DEFINE scoretable = '&4'
20:18:14 SQL> DEFINE case_id	= '&5'
20:18:14 SQL> 
20:18:14 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:18:14 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:18:14 SQL> 
20:18:14 SQL> -- Builds an SVM model using pl/sql.
20:18:14 SQL> 
20:18:14 SQL> -----------------------------------------------------------------------
20:18:14 SQL> --			    BUILD THE MODEL
20:18:14 SQL> -----------------------------------------------------------------------
20:18:14 SQL> 
20:18:14 SQL> -- Cleanup old build data preparation objects for repeat runs
20:18:14 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.01
20:18:14 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:18:14 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:18:14 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.00
20:18:14 SQL> 
20:18:14 SQL> 
20:18:14 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:18:14 SQL> --
20:18:14 SQL> -- DROP	TABLE svmc_settings ;
20:18:14 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:18:14 SQL> -- DELETE svmc_settings;
20:18:14 SQL> 
20:18:14 SQL> -- The default classification algorithm is Naive Bayes. So override
20:18:14 SQL> -- this choice to SVM using a settings table.
20:18:14 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:18:14 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:18:14 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:18:14 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:18:14 SQL> -- models.
20:18:14 SQL> --
20:18:14 SQL> 
20:18:14 SQL> -- Do this once and then comment it out.
20:18:14 SQL> -- That makes script go faster.
20:18:14 SQL> -- BEGIN
20:18:14 SQL> -- -- Populate settings table
20:18:14 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:18:14 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:18:14 SQL> --
20:18:14 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:18:14 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:18:14 SQL> --
20:18:14 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:18:14 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:18:14 SQL> --   COMMIT;
20:18:14 SQL> -- END;
20:18:14 SQL> -- /
20:18:14 SQL> 
20:18:14 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:18:14 SQL> 
20:18:14 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:18:14   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:18:14   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:18:14 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:18:14   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:18:14   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:18:15 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:18:15   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:18:15   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:18:15 SQL> 
20:18:15 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:18:15   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:18:15   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:18:15 SQL> 
20:18:15 SQL> --------------------------------
20:18:15 SQL> -- PREPARE BUILD (TRAINING) DATA
20:18:15 SQL> --
20:18:15 SQL> 
20:18:15 SQL> -- 1. Missing Value treatment for all Predictors and
20:18:15 SQL> -- 2. Outlier Treatment and
20:18:15 SQL> -- 3. Normalization are performed below.
20:18:15 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:18:15 SQL> --    normalized here.
20:18:15 SQL> 
20:18:15 SQL> BEGIN
20:18:15   2  	-- Perform missing value treatment for all predictors
20:18:15   3  	-- create miss tables
20:18:15   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:18:15   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:18:15   6  
20:18:15   7  	-- populate miss tables
20:18:15   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:18:15   9  	  miss_table_name => 'svmc_miss_num',
20:18:15  10  	  data_table_name => '&bldtable',
20:18:15  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:18:15  12  
20:18:15  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:18:15  14  	  miss_table_name => 'svmc_miss_cat',
20:18:15  15  	  data_table_name => '&bldtable',
20:18:15  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:18:15  17  
20:18:15  18  	-- xform input data to replace missing values
20:18:15  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:18:15  20  	  miss_table_name => 'svmc_miss_num',
20:18:15  21  	  data_table_name => '&bldtable',
20:18:15  22  	  xform_view_name => 'xformed_build_miss_num');
20:18:15  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:18:15  24  	  miss_table_name => 'svmc_miss_cat',
20:18:15  25  	  data_table_name => '&bldtable',
20:18:15  26  	  xform_view_name => 'xformed_build_miss_cat');
20:18:15  27  
20:18:15  28  	-- Perform outlier treatment.
20:18:15  29  	-- create clip table
20:18:15  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:18:15  31  
20:18:15  32  	-- populate clip table
20:18:15  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:18:15  34  	  clip_table_name => 'svmc_clip',
20:18:15  35  	  data_table_name => '&bldtable',
20:18:15  36  	  tail_frac	  => 0.025,
20:18:15  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:18:15  38  
20:18:15  39  	-- xform input data to winsorized data
20:18:15  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:18:15  41  	  clip_table_name => 'svmc_clip',
20:18:15  42  	  data_table_name => '&bldtable',
20:18:15  43  	  xform_view_name => 'svmc_winsor');
20:18:15  44  
20:18:15  45  	-- create normalization table
20:18:15  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:18:15  47  
20:18:15  48  	-- populate normalization table based on winsorized data
20:18:15  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:18:15  50  	  norm_table_name => 'svmc_norm',
20:18:15  51  	  data_table_name => 'svmc_winsor',
20:18:15  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:18:15  53  
20:18:15  54  	-- normalize the original data
20:18:15  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:18:15  56  	  norm_table_name => 'svmc_norm',
20:18:15  57  	  data_table_name => '&bldtable',
20:18:15  58  	  xform_view_name => 'svmc_build_prep');
20:18:15  59  END;
20:18:15  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.35
20:18:16 SQL> 
20:18:16 SQL> ---------------------
20:18:16 SQL> -- CREATE A NEW MODEL
20:18:16 SQL> --
20:18:16 SQL> -- Cleanup old model with the same name for repeat runs
20:18:16 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:18:16   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:18:16   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.17
20:18:17 SQL> 
20:18:17 SQL> -- Build a new SVM Model
20:18:17 SQL> BEGIN
20:18:17   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:18:17   3  	  model_name	      => '&model_name',
20:18:17   4  	  mining_function     => dbms_data_mining.classification,
20:18:17   5  	  data_table_name     => 'svmc_build_prep',
20:18:17   6  	  case_id_column_name => '&case_id',
20:18:17   7  	  target_column_name  => '&target',
20:18:17   8  	  settings_table_name => 'svmc_settings');
20:18:17   9  END;
20:18:17  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:03.84
20:18:21 SQL> 
20:18:21 SQL> -----------------------------------------------------------------------
20:18:21 SQL> --			       APPLY/score THE MODEL
20:18:21 SQL> -----------------------------------------------------------------------
20:18:21 SQL> 
20:18:21 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:18:21 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:18:21   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:18:21   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:18:21 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:18:21   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:18:21   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:18:21 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:18:21   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:18:21   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:18:21 SQL> -----------------------
20:18:21 SQL> -- PREPARE SCORING DATA
20:18:21 SQL> --
20:18:21 SQL> -- If the data for model creation has been prepared, then the data
20:18:21 SQL> -- to be scored using the model must be prepared in the same manner
20:18:21 SQL> -- in order to obtain meaningful results.
20:18:21 SQL> --
20:18:21 SQL> -- 1. Missing Value treatment for all Predictors and
20:18:21 SQL> -- 2. Normalization
20:18:21 SQL> -- No outlier treatment will be performed during test and apply. The
20:18:21 SQL> -- normalization step is sufficient, since the normalization parameters
20:18:21 SQL> -- already capture the effects of outlier treatment done with build data.
20:18:21 SQL> --
20:18:21 SQL> BEGIN
20:18:21   2  	-- Xform Test data to replace missing values
20:18:21   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:18:21   4  	  miss_table_name => 'svmc_miss_num',
20:18:21   5  	  data_table_name => '&scoretable',
20:18:21   6  	  xform_view_name => 'xformed_apply_miss_num');
20:18:21   7  
20:18:21   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:18:21   9  	  miss_table_name => 'svmc_miss_cat',
20:18:21  10  	  data_table_name => '&scoretable',
20:18:21  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:18:21  12  
20:18:21  13  	-- Normalize the data to be scored
20:18:21  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:18:21  15  	  norm_table_name => 'svmc_norm',
20:18:21  16  	  data_table_name => '&scoretable',
20:18:21  17  	  xform_view_name => 'svmc_apply_prep');
20:18:21  18  END;
20:18:21  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.17
20:18:21 SQL> 
20:18:21 SQL> -- Maybe I already collected a score for this prdate.
20:18:21 SQL> -- DELETE it if I did:
20:18:21 SQL> DELETE svm62scores
20:18:21   2  WHERE score > 0
20:18:21   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:18:21   4  -- I need to supply the target attribute name:
20:18:21   5  AND targ = '&1'
20:18:21   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gatt'

0 rows deleted.

Elapsed: 00:00:00.01
20:18:21 SQL> 
20:18:21 SQL> -- We do a drumroll here:
20:18:21 SQL> 
20:18:21 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:18:21   2  SELECT
20:18:21   3  prdate
20:18:21   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:18:21   5  ,sysdate
20:18:21   6  ,SUBSTR(prdate,1,7)pair
20:18:21   7  ,SUBSTR(prdate,-19)ydate
20:18:21   8  ,'&1'
20:18:21   9  FROM svmc_apply_prep
20:18:21  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gatt'

1 row created.

Elapsed: 00:00:00.05
20:18:21 SQL> @score1_5min.sql	      2011-01-07 13:20:00 aud_usd
20:18:21 SQL> --
20:18:21 SQL> -- score1_5min.sql
20:18:21 SQL> --
20:18:21 SQL> 
20:18:21 SQL> -- Demo:
20:18:21 SQL> -- @score1_5min.sql 2010-12-31 20:45:01 aud_usd
20:18:21 SQL> 
20:18:21 SQL> CREATE OR REPLACE VIEW sme AS
20:18:21   2  SELECT
20:18:21   3  prdate
20:18:21   4  ,NULL gatt
20:18:21   5  ,g00
20:18:21   6  ,g01
20:18:21   7  ,g02
20:18:21   8  ,g03
20:18:21   9  ,g04
20:18:21  10  ,g05
20:18:21  11  ,g06
20:18:21  12  ,g07
20:18:21  13  ,g08
20:18:21  14  ,g09
20:18:21  15  ,g10
20:18:21  16  ,g11
20:18:21  17  ,g12
20:18:21  18  ,g13
20:18:21  19  ,g14
20:18:21  20  ,g15
20:18:21  21  ,g16
20:18:21  22  ,g17
20:18:21  23  ,g18
20:18:21  24  ,g19
20:18:21  25  ,g20
20:18:21  26  ,g21
20:18:21  27  ,g22
20:18:21  28  ,g23
20:18:21  29  ,g24
20:18:21  30  ,g25
20:18:21  31  ,g26
20:18:21  32  ,g27
20:18:21  33  ,g28
20:18:21  34  ,g29
20:18:21  35  ,g30
20:18:21  36  ,g31
20:18:21  37  ,g32
20:18:21  38  ,g33
20:18:21  39  ,g34
20:18:21  40  ,g35
20:18:21  41  ,g36
20:18:21  42  ,g37
20:18:21  43  ,g38
20:18:21  44  ,g39
20:18:21  45  ,g40
20:18:21  46  ,g41
20:18:21  47  FROM modsrc
20:18:21  48  WHERE ydate = '&1'||' '||'&2'
20:18:21  49  AND pair = '&3'
20:18:21  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2011-01-07'||' '||'13:20:00'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:18:21 SQL> 
20:18:21 SQL> -- rpt
20:18:21 SQL> -- We should see just 1 row:
20:18:21 SQL> 
20:18:21 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.02
20:18:21 SQL> 
20:18:21 SQL> -- Build the model:
20:18:21 SQL> CREATE OR REPLACE VIEW bme AS
20:18:21   2  SELECT
20:18:21   3  prdate
20:18:21   4  ,gatt
20:18:21   5  ,g00
20:18:21   6  ,g01
20:18:21   7  ,g02
20:18:21   8  ,g03
20:18:21   9  ,g04
20:18:21  10  ,g05
20:18:21  11  ,g06
20:18:21  12  ,g07
20:18:21  13  ,g08
20:18:21  14  ,g09
20:18:21  15  ,g10
20:18:21  16  ,g11
20:18:21  17  ,g12
20:18:21  18  ,g13
20:18:21  19  ,g14
20:18:21  20  ,g15
20:18:21  21  ,g16
20:18:21  22  ,g17
20:18:21  23  ,g18
20:18:21  24  ,g19
20:18:21  25  ,g20
20:18:21  26  ,g21
20:18:21  27  ,g22
20:18:21  28  ,g23
20:18:21  29  ,g24
20:18:21  30  ,g25
20:18:21  31  ,g26
20:18:21  32  ,g27
20:18:21  33  ,g28
20:18:21  34  ,g29
20:18:21  35  ,g30
20:18:21  36  ,g31
20:18:21  37  ,g32
20:18:21  38  ,g33
20:18:21  39  ,g34
20:18:21  40  ,g35
20:18:21  41  ,g36
20:18:21  42  ,g37
20:18:21  43  ,g38
20:18:21  44  ,g39
20:18:21  45  ,g40
20:18:21  46  ,g41
20:18:21  47  FROM modsrc
20:18:21  48  WHERE gatt IN('nup','up')
20:18:21  49  -- Use only rows which are older than 1 day:
20:18:21  50  AND 1+ydate < '&1'||' '||'&2'
20:18:21  51  AND pair = '&3'
20:18:21  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2011-01-07'||' '||'13:20:00'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.05
20:18:21 SQL> 
20:18:21 SQL> -- rpt
20:18:21 SQL> 
20:18:21 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt;

GAT COUNT(PRDATE)
--- -------------
nup	    12041
up	     7111

Elapsed: 00:00:00.03
20:18:21 SQL> 
20:18:21 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2011-01-06 13:15:00

Elapsed: 00:00:00.02
20:18:21 SQL> 
20:18:21 SQL> -- Now build model from bme and score sme
20:18:21 SQL> @score1.sql gatt
20:18:21 SQL> --
20:18:21 SQL> -- score1.sql
20:18:21 SQL> --
20:18:21 SQL> 
20:18:21 SQL> -- I use this script to send 5 params to score.sql
20:18:21 SQL> -- which does the heavy lifting of creating an SVM model.
20:18:21 SQL> -- Then at the very end of this script I use the model
20:18:21 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:18:21 SQL> 
20:18:21 SQL> -- I call this script from 2 other scripts:
20:18:21 SQL> -- score1_5min.sql
20:18:21 SQL> -- score1_5min_gattn.sql
20:18:21 SQL> 
20:18:21 SQL> -- The 1st param is the name of the target attribute.
20:18:21 SQL> -- I like to call my target attributes either gatt or gattn.
20:18:21 SQL> 
20:18:21 SQL> -- Demo:
20:18:21 SQL> -- @score1.sql 'gatt'
20:18:21 SQL> -- @score1.sql 'gattn'
20:18:21 SQL> 
20:18:21 SQL> -- Now, I fill up svmc_apply_prep.
20:18:21 SQL> -- I use same model_name used in score.sql
20:18:21 SQL> DEFINE model_name = 'svmfx101'
20:18:21 SQL> DEFINE bldtable	= 'bme'
20:18:21 SQL> DEFINE scoretable = 'sme'
20:18:21 SQL> DEFINE case_id	= 'prdate'
20:18:21 SQL> -- Demo:
20:18:21 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:18:21 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:18:21 SQL> --
20:18:21 SQL> -- score.sql
20:18:21 SQL> --
20:18:21 SQL> 
20:18:21 SQL> -- usage: score.sql
20:18:21 SQL> 
20:18:21 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:18:21 SQL> 
20:18:21 SQL> -- DEFINE target	   = 'gatt'
20:18:21 SQL> -- DEFINE model_name = 'svmfx101'
20:18:21 SQL> -- DEFINE bldtable   = 'bme'
20:18:21 SQL> -- DEFINE scoretable = 'sme'
20:18:21 SQL> -- DEFINE case_id    = 'prdate'
20:18:21 SQL> 
20:18:21 SQL> DEFINE target	= '&1'
20:18:21 SQL> DEFINE model_name = '&2'
20:18:21 SQL> DEFINE bldtable	= '&3'
20:18:21 SQL> DEFINE scoretable = '&4'
20:18:21 SQL> DEFINE case_id	= '&5'
20:18:21 SQL> 
20:18:21 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:18:21 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:18:21 SQL> 
20:18:21 SQL> -- Builds an SVM model using pl/sql.
20:18:21 SQL> 
20:18:21 SQL> -----------------------------------------------------------------------
20:18:21 SQL> --			    BUILD THE MODEL
20:18:21 SQL> -----------------------------------------------------------------------
20:18:21 SQL> 
20:18:21 SQL> -- Cleanup old build data preparation objects for repeat runs
20:18:21 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.00
20:18:21 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:18:21 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:18:21 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.00
20:18:21 SQL> 
20:18:21 SQL> 
20:18:21 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:18:21 SQL> --
20:18:21 SQL> -- DROP	TABLE svmc_settings ;
20:18:21 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:18:21 SQL> -- DELETE svmc_settings;
20:18:21 SQL> 
20:18:21 SQL> -- The default classification algorithm is Naive Bayes. So override
20:18:21 SQL> -- this choice to SVM using a settings table.
20:18:21 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:18:21 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:18:21 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:18:21 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:18:21 SQL> -- models.
20:18:21 SQL> --
20:18:21 SQL> 
20:18:21 SQL> -- Do this once and then comment it out.
20:18:21 SQL> -- That makes script go faster.
20:18:21 SQL> -- BEGIN
20:18:21 SQL> -- -- Populate settings table
20:18:21 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:18:21 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:18:21 SQL> --
20:18:21 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:18:21 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:18:21 SQL> --
20:18:21 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:18:21 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:18:21 SQL> --   COMMIT;
20:18:21 SQL> -- END;
20:18:21 SQL> -- /
20:18:21 SQL> 
20:18:21 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:18:21 SQL> 
20:18:21 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:18:21   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:18:21   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:18:21 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:18:21   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:18:21   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:18:21 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:18:21   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:18:21   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:18:22 SQL> 
20:18:22 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:18:22   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:18:22   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:18:22 SQL> 
20:18:22 SQL> --------------------------------
20:18:22 SQL> -- PREPARE BUILD (TRAINING) DATA
20:18:22 SQL> --
20:18:22 SQL> 
20:18:22 SQL> -- 1. Missing Value treatment for all Predictors and
20:18:22 SQL> -- 2. Outlier Treatment and
20:18:22 SQL> -- 3. Normalization are performed below.
20:18:22 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:18:22 SQL> --    normalized here.
20:18:22 SQL> 
20:18:22 SQL> BEGIN
20:18:22   2  	-- Perform missing value treatment for all predictors
20:18:22   3  	-- create miss tables
20:18:22   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:18:22   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:18:22   6  
20:18:22   7  	-- populate miss tables
20:18:22   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:18:22   9  	  miss_table_name => 'svmc_miss_num',
20:18:22  10  	  data_table_name => '&bldtable',
20:18:22  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:18:22  12  
20:18:22  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:18:22  14  	  miss_table_name => 'svmc_miss_cat',
20:18:22  15  	  data_table_name => '&bldtable',
20:18:22  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:18:22  17  
20:18:22  18  	-- xform input data to replace missing values
20:18:22  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:18:22  20  	  miss_table_name => 'svmc_miss_num',
20:18:22  21  	  data_table_name => '&bldtable',
20:18:22  22  	  xform_view_name => 'xformed_build_miss_num');
20:18:22  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:18:22  24  	  miss_table_name => 'svmc_miss_cat',
20:18:22  25  	  data_table_name => '&bldtable',
20:18:22  26  	  xform_view_name => 'xformed_build_miss_cat');
20:18:22  27  
20:18:22  28  	-- Perform outlier treatment.
20:18:22  29  	-- create clip table
20:18:22  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:18:22  31  
20:18:22  32  	-- populate clip table
20:18:22  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:18:22  34  	  clip_table_name => 'svmc_clip',
20:18:22  35  	  data_table_name => '&bldtable',
20:18:22  36  	  tail_frac	  => 0.025,
20:18:22  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:18:22  38  
20:18:22  39  	-- xform input data to winsorized data
20:18:22  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:18:22  41  	  clip_table_name => 'svmc_clip',
20:18:22  42  	  data_table_name => '&bldtable',
20:18:22  43  	  xform_view_name => 'svmc_winsor');
20:18:22  44  
20:18:22  45  	-- create normalization table
20:18:22  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:18:22  47  
20:18:22  48  	-- populate normalization table based on winsorized data
20:18:22  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:18:22  50  	  norm_table_name => 'svmc_norm',
20:18:22  51  	  data_table_name => 'svmc_winsor',
20:18:22  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:18:22  53  
20:18:22  54  	-- normalize the original data
20:18:22  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:18:22  56  	  norm_table_name => 'svmc_norm',
20:18:22  57  	  data_table_name => '&bldtable',
20:18:22  58  	  xform_view_name => 'svmc_build_prep');
20:18:22  59  END;
20:18:22  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:02.42
20:18:24 SQL> 
20:18:24 SQL> ---------------------
20:18:24 SQL> -- CREATE A NEW MODEL
20:18:24 SQL> --
20:18:24 SQL> -- Cleanup old model with the same name for repeat runs
20:18:24 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:18:24   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:18:24   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.05
20:18:25 SQL> 
20:18:25 SQL> -- Build a new SVM Model
20:18:25 SQL> BEGIN
20:18:25   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:18:25   3  	  model_name	      => '&model_name',
20:18:25   4  	  mining_function     => dbms_data_mining.classification,
20:18:25   5  	  data_table_name     => 'svmc_build_prep',
20:18:25   6  	  case_id_column_name => '&case_id',
20:18:25   7  	  target_column_name  => '&target',
20:18:25   8  	  settings_table_name => 'svmc_settings');
20:18:25   9  END;
20:18:25  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:05.21
20:18:30 SQL> 
20:18:30 SQL> -----------------------------------------------------------------------
20:18:30 SQL> --			       APPLY/score THE MODEL
20:18:30 SQL> -----------------------------------------------------------------------
20:18:30 SQL> 
20:18:30 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:18:30 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:18:30   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:18:30   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:18:30 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:18:30   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:18:30   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:18:30 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:18:30   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:18:30   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:18:30 SQL> -----------------------
20:18:30 SQL> -- PREPARE SCORING DATA
20:18:30 SQL> --
20:18:30 SQL> -- If the data for model creation has been prepared, then the data
20:18:30 SQL> -- to be scored using the model must be prepared in the same manner
20:18:30 SQL> -- in order to obtain meaningful results.
20:18:30 SQL> --
20:18:30 SQL> -- 1. Missing Value treatment for all Predictors and
20:18:30 SQL> -- 2. Normalization
20:18:30 SQL> -- No outlier treatment will be performed during test and apply. The
20:18:30 SQL> -- normalization step is sufficient, since the normalization parameters
20:18:30 SQL> -- already capture the effects of outlier treatment done with build data.
20:18:30 SQL> --
20:18:30 SQL> BEGIN
20:18:30   2  	-- Xform Test data to replace missing values
20:18:30   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:18:30   4  	  miss_table_name => 'svmc_miss_num',
20:18:30   5  	  data_table_name => '&scoretable',
20:18:30   6  	  xform_view_name => 'xformed_apply_miss_num');
20:18:30   7  
20:18:30   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:18:30   9  	  miss_table_name => 'svmc_miss_cat',
20:18:30  10  	  data_table_name => '&scoretable',
20:18:30  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:18:30  12  
20:18:30  13  	-- Normalize the data to be scored
20:18:30  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:18:30  15  	  norm_table_name => 'svmc_norm',
20:18:30  16  	  data_table_name => '&scoretable',
20:18:30  17  	  xform_view_name => 'svmc_apply_prep');
20:18:30  18  END;
20:18:30  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.18
20:18:31 SQL> 
20:18:31 SQL> -- Maybe I already collected a score for this prdate.
20:18:31 SQL> -- DELETE it if I did:
20:18:31 SQL> DELETE svm62scores
20:18:31   2  WHERE score > 0
20:18:31   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:18:31   4  -- I need to supply the target attribute name:
20:18:31   5  AND targ = '&1'
20:18:31   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gatt'

0 rows deleted.

Elapsed: 00:00:00.02
20:18:31 SQL> 
20:18:31 SQL> -- We do a drumroll here:
20:18:31 SQL> 
20:18:31 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:18:31   2  SELECT
20:18:31   3  prdate
20:18:31   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:18:31   5  ,sysdate
20:18:31   6  ,SUBSTR(prdate,1,7)pair
20:18:31   7  ,SUBSTR(prdate,-19)ydate
20:18:31   8  ,'&1'
20:18:31   9  FROM svmc_apply_prep
20:18:31  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gatt'

1 row created.

Elapsed: 00:00:00.05
20:18:31 SQL> @score1_5min.sql	      2011-01-04 07:25:00 aud_usd
20:18:31 SQL> --
20:18:31 SQL> -- score1_5min.sql
20:18:31 SQL> --
20:18:31 SQL> 
20:18:31 SQL> -- Demo:
20:18:31 SQL> -- @score1_5min.sql 2010-12-31 20:45:01 aud_usd
20:18:31 SQL> 
20:18:31 SQL> CREATE OR REPLACE VIEW sme AS
20:18:31   2  SELECT
20:18:31   3  prdate
20:18:31   4  ,NULL gatt
20:18:31   5  ,g00
20:18:31   6  ,g01
20:18:31   7  ,g02
20:18:31   8  ,g03
20:18:31   9  ,g04
20:18:31  10  ,g05
20:18:31  11  ,g06
20:18:31  12  ,g07
20:18:31  13  ,g08
20:18:31  14  ,g09
20:18:31  15  ,g10
20:18:31  16  ,g11
20:18:31  17  ,g12
20:18:31  18  ,g13
20:18:31  19  ,g14
20:18:31  20  ,g15
20:18:31  21  ,g16
20:18:31  22  ,g17
20:18:31  23  ,g18
20:18:31  24  ,g19
20:18:31  25  ,g20
20:18:31  26  ,g21
20:18:31  27  ,g22
20:18:31  28  ,g23
20:18:31  29  ,g24
20:18:31  30  ,g25
20:18:31  31  ,g26
20:18:31  32  ,g27
20:18:31  33  ,g28
20:18:31  34  ,g29
20:18:31  35  ,g30
20:18:31  36  ,g31
20:18:31  37  ,g32
20:18:31  38  ,g33
20:18:31  39  ,g34
20:18:31  40  ,g35
20:18:31  41  ,g36
20:18:31  42  ,g37
20:18:31  43  ,g38
20:18:31  44  ,g39
20:18:31  45  ,g40
20:18:31  46  ,g41
20:18:31  47  FROM modsrc
20:18:31  48  WHERE ydate = '&1'||' '||'&2'
20:18:31  49  AND pair = '&3'
20:18:31  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2011-01-04'||' '||'07:25:00'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:18:31 SQL> 
20:18:31 SQL> -- rpt
20:18:31 SQL> -- We should see just 1 row:
20:18:31 SQL> 
20:18:31 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.02
20:18:31 SQL> 
20:18:31 SQL> -- Build the model:
20:18:31 SQL> CREATE OR REPLACE VIEW bme AS
20:18:31   2  SELECT
20:18:31   3  prdate
20:18:31   4  ,gatt
20:18:31   5  ,g00
20:18:31   6  ,g01
20:18:31   7  ,g02
20:18:31   8  ,g03
20:18:31   9  ,g04
20:18:31  10  ,g05
20:18:31  11  ,g06
20:18:31  12  ,g07
20:18:31  13  ,g08
20:18:31  14  ,g09
20:18:31  15  ,g10
20:18:31  16  ,g11
20:18:31  17  ,g12
20:18:31  18  ,g13
20:18:31  19  ,g14
20:18:31  20  ,g15
20:18:31  21  ,g16
20:18:31  22  ,g17
20:18:31  23  ,g18
20:18:31  24  ,g19
20:18:31  25  ,g20
20:18:31  26  ,g21
20:18:31  27  ,g22
20:18:31  28  ,g23
20:18:31  29  ,g24
20:18:31  30  ,g25
20:18:31  31  ,g26
20:18:31  32  ,g27
20:18:31  33  ,g28
20:18:31  34  ,g29
20:18:31  35  ,g30
20:18:31  36  ,g31
20:18:31  37  ,g32
20:18:31  38  ,g33
20:18:31  39  ,g34
20:18:31  40  ,g35
20:18:31  41  ,g36
20:18:31  42  ,g37
20:18:31  43  ,g38
20:18:31  44  ,g39
20:18:31  45  ,g40
20:18:31  46  ,g41
20:18:31  47  FROM modsrc
20:18:31  48  WHERE gatt IN('nup','up')
20:18:31  49  -- Use only rows which are older than 1 day:
20:18:31  50  AND 1+ydate < '&1'||' '||'&2'
20:18:31  51  AND pair = '&3'
20:18:31  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2011-01-04'||' '||'07:25:00'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.06
20:18:31 SQL> 
20:18:31 SQL> -- rpt
20:18:31 SQL> 
20:18:31 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt;

GAT COUNT(PRDATE)
--- -------------
nup	    11187
up	     7040

Elapsed: 00:00:00.02
20:18:31 SQL> 
20:18:31 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2011-01-03 07:20:00

Elapsed: 00:00:00.02
20:18:31 SQL> 
20:18:31 SQL> -- Now build model from bme and score sme
20:18:31 SQL> @score1.sql gatt
20:18:31 SQL> --
20:18:31 SQL> -- score1.sql
20:18:31 SQL> --
20:18:31 SQL> 
20:18:31 SQL> -- I use this script to send 5 params to score.sql
20:18:31 SQL> -- which does the heavy lifting of creating an SVM model.
20:18:31 SQL> -- Then at the very end of this script I use the model
20:18:31 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:18:31 SQL> 
20:18:31 SQL> -- I call this script from 2 other scripts:
20:18:31 SQL> -- score1_5min.sql
20:18:31 SQL> -- score1_5min_gattn.sql
20:18:31 SQL> 
20:18:31 SQL> -- The 1st param is the name of the target attribute.
20:18:31 SQL> -- I like to call my target attributes either gatt or gattn.
20:18:31 SQL> 
20:18:31 SQL> -- Demo:
20:18:31 SQL> -- @score1.sql 'gatt'
20:18:31 SQL> -- @score1.sql 'gattn'
20:18:31 SQL> 
20:18:31 SQL> -- Now, I fill up svmc_apply_prep.
20:18:31 SQL> -- I use same model_name used in score.sql
20:18:31 SQL> DEFINE model_name = 'svmfx101'
20:18:31 SQL> DEFINE bldtable	= 'bme'
20:18:31 SQL> DEFINE scoretable = 'sme'
20:18:31 SQL> DEFINE case_id	= 'prdate'
20:18:31 SQL> -- Demo:
20:18:31 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:18:31 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:18:31 SQL> --
20:18:31 SQL> -- score.sql
20:18:31 SQL> --
20:18:31 SQL> 
20:18:31 SQL> -- usage: score.sql
20:18:31 SQL> 
20:18:31 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:18:31 SQL> 
20:18:31 SQL> -- DEFINE target	   = 'gatt'
20:18:31 SQL> -- DEFINE model_name = 'svmfx101'
20:18:31 SQL> -- DEFINE bldtable   = 'bme'
20:18:31 SQL> -- DEFINE scoretable = 'sme'
20:18:31 SQL> -- DEFINE case_id    = 'prdate'
20:18:31 SQL> 
20:18:31 SQL> DEFINE target	= '&1'
20:18:31 SQL> DEFINE model_name = '&2'
20:18:31 SQL> DEFINE bldtable	= '&3'
20:18:31 SQL> DEFINE scoretable = '&4'
20:18:31 SQL> DEFINE case_id	= '&5'
20:18:31 SQL> 
20:18:31 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:18:31 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:18:31 SQL> 
20:18:31 SQL> -- Builds an SVM model using pl/sql.
20:18:31 SQL> 
20:18:31 SQL> -----------------------------------------------------------------------
20:18:31 SQL> --			    BUILD THE MODEL
20:18:31 SQL> -----------------------------------------------------------------------
20:18:31 SQL> 
20:18:31 SQL> -- Cleanup old build data preparation objects for repeat runs
20:18:31 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.00
20:18:31 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:18:31 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:18:31 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.00
20:18:31 SQL> 
20:18:31 SQL> 
20:18:31 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:18:31 SQL> --
20:18:31 SQL> -- DROP	TABLE svmc_settings ;
20:18:31 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:18:31 SQL> -- DELETE svmc_settings;
20:18:31 SQL> 
20:18:31 SQL> -- The default classification algorithm is Naive Bayes. So override
20:18:31 SQL> -- this choice to SVM using a settings table.
20:18:31 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:18:31 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:18:31 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:18:31 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:18:31 SQL> -- models.
20:18:31 SQL> --
20:18:31 SQL> 
20:18:31 SQL> -- Do this once and then comment it out.
20:18:31 SQL> -- That makes script go faster.
20:18:31 SQL> -- BEGIN
20:18:31 SQL> -- -- Populate settings table
20:18:31 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:18:31 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:18:31 SQL> --
20:18:31 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:18:31 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:18:31 SQL> --
20:18:31 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:18:31 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:18:31 SQL> --   COMMIT;
20:18:31 SQL> -- END;
20:18:31 SQL> -- /
20:18:31 SQL> 
20:18:31 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:18:31 SQL> 
20:18:31 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:18:31   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:18:31   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:18:31 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:18:31   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:18:31   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
20:18:31 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:18:31   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:18:31   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:18:31 SQL> 
20:18:31 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:18:31   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:18:31   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:18:31 SQL> 
20:18:31 SQL> --------------------------------
20:18:31 SQL> -- PREPARE BUILD (TRAINING) DATA
20:18:31 SQL> --
20:18:31 SQL> 
20:18:31 SQL> -- 1. Missing Value treatment for all Predictors and
20:18:31 SQL> -- 2. Outlier Treatment and
20:18:31 SQL> -- 3. Normalization are performed below.
20:18:31 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:18:31 SQL> --    normalized here.
20:18:31 SQL> 
20:18:31 SQL> BEGIN
20:18:31   2  	-- Perform missing value treatment for all predictors
20:18:31   3  	-- create miss tables
20:18:31   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:18:31   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:18:31   6  
20:18:31   7  	-- populate miss tables
20:18:31   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:18:31   9  	  miss_table_name => 'svmc_miss_num',
20:18:31  10  	  data_table_name => '&bldtable',
20:18:31  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:18:31  12  
20:18:31  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:18:31  14  	  miss_table_name => 'svmc_miss_cat',
20:18:31  15  	  data_table_name => '&bldtable',
20:18:31  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:18:31  17  
20:18:31  18  	-- xform input data to replace missing values
20:18:31  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:18:31  20  	  miss_table_name => 'svmc_miss_num',
20:18:31  21  	  data_table_name => '&bldtable',
20:18:31  22  	  xform_view_name => 'xformed_build_miss_num');
20:18:31  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:18:31  24  	  miss_table_name => 'svmc_miss_cat',
20:18:31  25  	  data_table_name => '&bldtable',
20:18:31  26  	  xform_view_name => 'xformed_build_miss_cat');
20:18:31  27  
20:18:31  28  	-- Perform outlier treatment.
20:18:31  29  	-- create clip table
20:18:31  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:18:31  31  
20:18:31  32  	-- populate clip table
20:18:31  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:18:31  34  	  clip_table_name => 'svmc_clip',
20:18:31  35  	  data_table_name => '&bldtable',
20:18:31  36  	  tail_frac	  => 0.025,
20:18:31  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:18:31  38  
20:18:31  39  	-- xform input data to winsorized data
20:18:31  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:18:31  41  	  clip_table_name => 'svmc_clip',
20:18:31  42  	  data_table_name => '&bldtable',
20:18:31  43  	  xform_view_name => 'svmc_winsor');
20:18:31  44  
20:18:31  45  	-- create normalization table
20:18:31  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:18:31  47  
20:18:31  48  	-- populate normalization table based on winsorized data
20:18:31  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:18:31  50  	  norm_table_name => 'svmc_norm',
20:18:31  51  	  data_table_name => 'svmc_winsor',
20:18:31  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:18:31  53  
20:18:31  54  	-- normalize the original data
20:18:31  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:18:31  56  	  norm_table_name => 'svmc_norm',
20:18:31  57  	  data_table_name => '&bldtable',
20:18:31  58  	  xform_view_name => 'svmc_build_prep');
20:18:31  59  END;
20:18:31  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:02.32
20:18:33 SQL> 
20:18:33 SQL> ---------------------
20:18:33 SQL> -- CREATE A NEW MODEL
20:18:33 SQL> --
20:18:33 SQL> -- Cleanup old model with the same name for repeat runs
20:18:33 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:18:33   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:18:33   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.13
20:18:34 SQL> 
20:18:34 SQL> -- Build a new SVM Model
20:18:34 SQL> BEGIN
20:18:34   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:18:34   3  	  model_name	      => '&model_name',
20:18:34   4  	  mining_function     => dbms_data_mining.classification,
20:18:34   5  	  data_table_name     => 'svmc_build_prep',
20:18:34   6  	  case_id_column_name => '&case_id',
20:18:34   7  	  target_column_name  => '&target',
20:18:34   8  	  settings_table_name => 'svmc_settings');
20:18:34   9  END;
20:18:34  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:05.07
20:18:39 SQL> 
20:18:39 SQL> -----------------------------------------------------------------------
20:18:39 SQL> --			       APPLY/score THE MODEL
20:18:39 SQL> -----------------------------------------------------------------------
20:18:39 SQL> 
20:18:39 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:18:39 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:18:39   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:18:39   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:18:39 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:18:39   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:18:39   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:18:39 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:18:39   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:18:39   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:18:40 SQL> -----------------------
20:18:40 SQL> -- PREPARE SCORING DATA
20:18:40 SQL> --
20:18:40 SQL> -- If the data for model creation has been prepared, then the data
20:18:40 SQL> -- to be scored using the model must be prepared in the same manner
20:18:40 SQL> -- in order to obtain meaningful results.
20:18:40 SQL> --
20:18:40 SQL> -- 1. Missing Value treatment for all Predictors and
20:18:40 SQL> -- 2. Normalization
20:18:40 SQL> -- No outlier treatment will be performed during test and apply. The
20:18:40 SQL> -- normalization step is sufficient, since the normalization parameters
20:18:40 SQL> -- already capture the effects of outlier treatment done with build data.
20:18:40 SQL> --
20:18:40 SQL> BEGIN
20:18:40   2  	-- Xform Test data to replace missing values
20:18:40   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:18:40   4  	  miss_table_name => 'svmc_miss_num',
20:18:40   5  	  data_table_name => '&scoretable',
20:18:40   6  	  xform_view_name => 'xformed_apply_miss_num');
20:18:40   7  
20:18:40   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:18:40   9  	  miss_table_name => 'svmc_miss_cat',
20:18:40  10  	  data_table_name => '&scoretable',
20:18:40  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:18:40  12  
20:18:40  13  	-- Normalize the data to be scored
20:18:40  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:18:40  15  	  norm_table_name => 'svmc_norm',
20:18:40  16  	  data_table_name => '&scoretable',
20:18:40  17  	  xform_view_name => 'svmc_apply_prep');
20:18:40  18  END;
20:18:40  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.16
20:18:40 SQL> 
20:18:40 SQL> -- Maybe I already collected a score for this prdate.
20:18:40 SQL> -- DELETE it if I did:
20:18:40 SQL> DELETE svm62scores
20:18:40   2  WHERE score > 0
20:18:40   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:18:40   4  -- I need to supply the target attribute name:
20:18:40   5  AND targ = '&1'
20:18:40   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gatt'

0 rows deleted.

Elapsed: 00:00:00.01
20:18:40 SQL> 
20:18:40 SQL> -- We do a drumroll here:
20:18:40 SQL> 
20:18:40 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:18:40   2  SELECT
20:18:40   3  prdate
20:18:40   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:18:40   5  ,sysdate
20:18:40   6  ,SUBSTR(prdate,1,7)pair
20:18:40   7  ,SUBSTR(prdate,-19)ydate
20:18:40   8  ,'&1'
20:18:40   9  FROM svmc_apply_prep
20:18:40  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gatt'

1 row created.

Elapsed: 00:00:00.05
20:18:40 SQL> @score1_5min_gattn.sql	2011-01-04 02:50:00 aud_usd
20:18:40 SQL> --
20:18:40 SQL> -- score1_5min_gattn.sql
20:18:40 SQL> --
20:18:40 SQL> 
20:18:40 SQL> -- Demo:
20:18:40 SQL> -- @score1_5min_gattn.sql 2010-12-31 20:45:01 aud_usd
20:18:40 SQL> 
20:18:40 SQL> CREATE OR REPLACE VIEW sme AS
20:18:40   2  SELECT
20:18:40   3  prdate
20:18:40   4  ,NULL gattn
20:18:40   5  ,g00
20:18:40   6  ,g01
20:18:40   7  ,g02
20:18:40   8  ,g03
20:18:40   9  ,g04
20:18:40  10  ,g05
20:18:40  11  ,g06
20:18:40  12  ,g07
20:18:40  13  ,g08
20:18:40  14  ,g09
20:18:40  15  ,g10
20:18:40  16  ,g11
20:18:40  17  ,g12
20:18:40  18  ,g13
20:18:40  19  ,g14
20:18:40  20  ,g15
20:18:40  21  ,g16
20:18:40  22  ,g17
20:18:40  23  ,g18
20:18:40  24  ,g19
20:18:40  25  ,g20
20:18:40  26  ,g21
20:18:40  27  ,g22
20:18:40  28  ,g23
20:18:40  29  ,g24
20:18:40  30  ,g25
20:18:40  31  ,g26
20:18:40  32  ,g27
20:18:40  33  ,g28
20:18:40  34  ,g29
20:18:40  35  ,g30
20:18:40  36  ,g31
20:18:40  37  ,g32
20:18:40  38  ,g33
20:18:40  39  ,g34
20:18:40  40  ,g35
20:18:40  41  ,g36
20:18:40  42  ,g37
20:18:40  43  ,g38
20:18:40  44  ,g39
20:18:40  45  ,g40
20:18:40  46  ,g41
20:18:40  47  FROM modsrc
20:18:40  48  WHERE ydate = '&1'||' '||'&2'
20:18:40  49  AND pair = '&3'
20:18:40  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2011-01-04'||' '||'02:50:00'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.05
20:18:40 SQL> 
20:18:40 SQL> -- rpt
20:18:40 SQL> -- We should see just 1 row:
20:18:40 SQL> 
20:18:40 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.01
20:18:40 SQL> 
20:18:40 SQL> -- Build the model:
20:18:40 SQL> CREATE OR REPLACE VIEW bme AS
20:18:40   2  SELECT
20:18:40   3  prdate
20:18:40   4  ,gattn
20:18:40   5  ,g00
20:18:40   6  ,g01
20:18:40   7  ,g02
20:18:40   8  ,g03
20:18:40   9  ,g04
20:18:40  10  ,g05
20:18:40  11  ,g06
20:18:40  12  ,g07
20:18:40  13  ,g08
20:18:40  14  ,g09
20:18:40  15  ,g10
20:18:40  16  ,g11
20:18:40  17  ,g12
20:18:40  18  ,g13
20:18:40  19  ,g14
20:18:40  20  ,g15
20:18:40  21  ,g16
20:18:40  22  ,g17
20:18:40  23  ,g18
20:18:40  24  ,g19
20:18:40  25  ,g20
20:18:40  26  ,g21
20:18:40  27  ,g22
20:18:40  28  ,g23
20:18:40  29  ,g24
20:18:40  30  ,g25
20:18:40  31  ,g26
20:18:40  32  ,g27
20:18:40  33  ,g28
20:18:40  34  ,g29
20:18:40  35  ,g30
20:18:40  36  ,g31
20:18:40  37  ,g32
20:18:40  38  ,g33
20:18:40  39  ,g34
20:18:40  40  ,g35
20:18:40  41  ,g36
20:18:40  42  ,g37
20:18:40  43  ,g38
20:18:40  44  ,g39
20:18:40  45  ,g40
20:18:40  46  ,g41
20:18:40  47  FROM modsrc
20:18:40  48  WHERE gattn IN('nup','up')
20:18:40  49  -- Use only rows which are older than 1 day:
20:18:40  50  AND 1+ydate < '&1'||' '||'&2'
20:18:40  51  AND pair = '&3'
20:18:40  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2011-01-04'||' '||'02:50:00'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:18:40 SQL> 
20:18:40 SQL> -- rpt
20:18:40 SQL> 
20:18:40 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	    12178
up	     5994

Elapsed: 00:00:00.03
20:18:40 SQL> 
20:18:40 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2011-01-03 02:45:00

Elapsed: 00:00:00.02
20:18:40 SQL> 
20:18:40 SQL> -- Now build model from bme and score sme
20:18:40 SQL> @score1.sql gattn
20:18:40 SQL> --
20:18:40 SQL> -- score1.sql
20:18:40 SQL> --
20:18:40 SQL> 
20:18:40 SQL> -- I use this script to send 5 params to score.sql
20:18:40 SQL> -- which does the heavy lifting of creating an SVM model.
20:18:40 SQL> -- Then at the very end of this script I use the model
20:18:40 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:18:40 SQL> 
20:18:40 SQL> -- I call this script from 2 other scripts:
20:18:40 SQL> -- score1_5min.sql
20:18:40 SQL> -- score1_5min_gattn.sql
20:18:40 SQL> 
20:18:40 SQL> -- The 1st param is the name of the target attribute.
20:18:40 SQL> -- I like to call my target attributes either gatt or gattn.
20:18:40 SQL> 
20:18:40 SQL> -- Demo:
20:18:40 SQL> -- @score1.sql 'gatt'
20:18:40 SQL> -- @score1.sql 'gattn'
20:18:40 SQL> 
20:18:40 SQL> -- Now, I fill up svmc_apply_prep.
20:18:40 SQL> -- I use same model_name used in score.sql
20:18:40 SQL> DEFINE model_name = 'svmfx101'
20:18:40 SQL> DEFINE bldtable	= 'bme'
20:18:40 SQL> DEFINE scoretable = 'sme'
20:18:40 SQL> DEFINE case_id	= 'prdate'
20:18:40 SQL> -- Demo:
20:18:40 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:18:40 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:18:40 SQL> --
20:18:40 SQL> -- score.sql
20:18:40 SQL> --
20:18:40 SQL> 
20:18:40 SQL> -- usage: score.sql
20:18:40 SQL> 
20:18:40 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:18:40 SQL> 
20:18:40 SQL> -- DEFINE target	   = 'gatt'
20:18:40 SQL> -- DEFINE model_name = 'svmfx101'
20:18:40 SQL> -- DEFINE bldtable   = 'bme'
20:18:40 SQL> -- DEFINE scoretable = 'sme'
20:18:40 SQL> -- DEFINE case_id    = 'prdate'
20:18:40 SQL> 
20:18:40 SQL> DEFINE target	= '&1'
20:18:40 SQL> DEFINE model_name = '&2'
20:18:40 SQL> DEFINE bldtable	= '&3'
20:18:40 SQL> DEFINE scoretable = '&4'
20:18:40 SQL> DEFINE case_id	= '&5'
20:18:40 SQL> 
20:18:40 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:18:40 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:18:40 SQL> 
20:18:40 SQL> -- Builds an SVM model using pl/sql.
20:18:40 SQL> 
20:18:40 SQL> -----------------------------------------------------------------------
20:18:40 SQL> --			    BUILD THE MODEL
20:18:40 SQL> -----------------------------------------------------------------------
20:18:40 SQL> 
20:18:40 SQL> -- Cleanup old build data preparation objects for repeat runs
20:18:40 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.00
20:18:40 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:18:40 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.01
20:18:40 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.00
20:18:40 SQL> 
20:18:40 SQL> 
20:18:40 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:18:40 SQL> --
20:18:40 SQL> -- DROP	TABLE svmc_settings ;
20:18:40 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:18:40 SQL> -- DELETE svmc_settings;
20:18:40 SQL> 
20:18:40 SQL> -- The default classification algorithm is Naive Bayes. So override
20:18:40 SQL> -- this choice to SVM using a settings table.
20:18:40 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:18:40 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:18:40 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:18:40 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:18:40 SQL> -- models.
20:18:40 SQL> --
20:18:40 SQL> 
20:18:40 SQL> -- Do this once and then comment it out.
20:18:40 SQL> -- That makes script go faster.
20:18:40 SQL> -- BEGIN
20:18:40 SQL> -- -- Populate settings table
20:18:40 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:18:40 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:18:40 SQL> --
20:18:40 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:18:40 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:18:40 SQL> --
20:18:40 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:18:40 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:18:40 SQL> --   COMMIT;
20:18:40 SQL> -- END;
20:18:40 SQL> -- /
20:18:40 SQL> 
20:18:40 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:18:40 SQL> 
20:18:40 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:18:40   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:18:40   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:18:40 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:18:40   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:18:40   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:18:40 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:18:40   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:18:40   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
20:18:40 SQL> 
20:18:40 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:18:40   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:18:40   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:18:40 SQL> 
20:18:40 SQL> --------------------------------
20:18:40 SQL> -- PREPARE BUILD (TRAINING) DATA
20:18:40 SQL> --
20:18:40 SQL> 
20:18:40 SQL> -- 1. Missing Value treatment for all Predictors and
20:18:40 SQL> -- 2. Outlier Treatment and
20:18:40 SQL> -- 3. Normalization are performed below.
20:18:40 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:18:40 SQL> --    normalized here.
20:18:40 SQL> 
20:18:40 SQL> BEGIN
20:18:40   2  	-- Perform missing value treatment for all predictors
20:18:40   3  	-- create miss tables
20:18:40   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:18:40   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:18:40   6  
20:18:40   7  	-- populate miss tables
20:18:40   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:18:40   9  	  miss_table_name => 'svmc_miss_num',
20:18:40  10  	  data_table_name => '&bldtable',
20:18:40  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:18:40  12  
20:18:40  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:18:40  14  	  miss_table_name => 'svmc_miss_cat',
20:18:40  15  	  data_table_name => '&bldtable',
20:18:40  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:18:40  17  
20:18:40  18  	-- xform input data to replace missing values
20:18:40  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:18:40  20  	  miss_table_name => 'svmc_miss_num',
20:18:40  21  	  data_table_name => '&bldtable',
20:18:40  22  	  xform_view_name => 'xformed_build_miss_num');
20:18:40  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:18:40  24  	  miss_table_name => 'svmc_miss_cat',
20:18:40  25  	  data_table_name => '&bldtable',
20:18:40  26  	  xform_view_name => 'xformed_build_miss_cat');
20:18:40  27  
20:18:40  28  	-- Perform outlier treatment.
20:18:40  29  	-- create clip table
20:18:40  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:18:40  31  
20:18:40  32  	-- populate clip table
20:18:40  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:18:40  34  	  clip_table_name => 'svmc_clip',
20:18:40  35  	  data_table_name => '&bldtable',
20:18:40  36  	  tail_frac	  => 0.025,
20:18:40  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:18:40  38  
20:18:40  39  	-- xform input data to winsorized data
20:18:40  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:18:40  41  	  clip_table_name => 'svmc_clip',
20:18:40  42  	  data_table_name => '&bldtable',
20:18:40  43  	  xform_view_name => 'svmc_winsor');
20:18:40  44  
20:18:40  45  	-- create normalization table
20:18:40  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:18:40  47  
20:18:40  48  	-- populate normalization table based on winsorized data
20:18:40  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:18:40  50  	  norm_table_name => 'svmc_norm',
20:18:40  51  	  data_table_name => 'svmc_winsor',
20:18:40  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:18:40  53  
20:18:40  54  	-- normalize the original data
20:18:40  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:18:40  56  	  norm_table_name => 'svmc_norm',
20:18:40  57  	  data_table_name => '&bldtable',
20:18:40  58  	  xform_view_name => 'svmc_build_prep');
20:18:40  59  END;
20:18:40  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:02.32
20:18:42 SQL> 
20:18:42 SQL> ---------------------
20:18:42 SQL> -- CREATE A NEW MODEL
20:18:42 SQL> --
20:18:42 SQL> -- Cleanup old model with the same name for repeat runs
20:18:42 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:18:42   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:18:42   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.13
20:18:44 SQL> 
20:18:44 SQL> -- Build a new SVM Model
20:18:44 SQL> BEGIN
20:18:44   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:18:44   3  	  model_name	      => '&model_name',
20:18:44   4  	  mining_function     => dbms_data_mining.classification,
20:18:44   5  	  data_table_name     => 'svmc_build_prep',
20:18:44   6  	  case_id_column_name => '&case_id',
20:18:44   7  	  target_column_name  => '&target',
20:18:44   8  	  settings_table_name => 'svmc_settings');
20:18:44   9  END;
20:18:44  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:04.19
20:18:48 SQL> 
20:18:48 SQL> -----------------------------------------------------------------------
20:18:48 SQL> --			       APPLY/score THE MODEL
20:18:48 SQL> -----------------------------------------------------------------------
20:18:48 SQL> 
20:18:48 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:18:48 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:18:48   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:18:48   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:18:48 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:18:48   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:18:48   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:18:48 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:18:48   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:18:48   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:18:48 SQL> -----------------------
20:18:48 SQL> -- PREPARE SCORING DATA
20:18:48 SQL> --
20:18:48 SQL> -- If the data for model creation has been prepared, then the data
20:18:48 SQL> -- to be scored using the model must be prepared in the same manner
20:18:48 SQL> -- in order to obtain meaningful results.
20:18:48 SQL> --
20:18:48 SQL> -- 1. Missing Value treatment for all Predictors and
20:18:48 SQL> -- 2. Normalization
20:18:48 SQL> -- No outlier treatment will be performed during test and apply. The
20:18:48 SQL> -- normalization step is sufficient, since the normalization parameters
20:18:48 SQL> -- already capture the effects of outlier treatment done with build data.
20:18:48 SQL> --
20:18:48 SQL> BEGIN
20:18:48   2  	-- Xform Test data to replace missing values
20:18:48   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:18:48   4  	  miss_table_name => 'svmc_miss_num',
20:18:48   5  	  data_table_name => '&scoretable',
20:18:48   6  	  xform_view_name => 'xformed_apply_miss_num');
20:18:48   7  
20:18:48   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:18:48   9  	  miss_table_name => 'svmc_miss_cat',
20:18:48  10  	  data_table_name => '&scoretable',
20:18:48  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:18:48  12  
20:18:48  13  	-- Normalize the data to be scored
20:18:48  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:18:48  15  	  norm_table_name => 'svmc_norm',
20:18:48  16  	  data_table_name => '&scoretable',
20:18:48  17  	  xform_view_name => 'svmc_apply_prep');
20:18:48  18  END;
20:18:48  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.17
20:18:48 SQL> 
20:18:48 SQL> -- Maybe I already collected a score for this prdate.
20:18:48 SQL> -- DELETE it if I did:
20:18:48 SQL> DELETE svm62scores
20:18:48   2  WHERE score > 0
20:18:48   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:18:48   4  -- I need to supply the target attribute name:
20:18:48   5  AND targ = '&1'
20:18:48   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gattn'

0 rows deleted.

Elapsed: 00:00:00.01
20:18:48 SQL> 
20:18:48 SQL> -- We do a drumroll here:
20:18:48 SQL> 
20:18:48 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:18:48   2  SELECT
20:18:48   3  prdate
20:18:48   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:18:48   5  ,sysdate
20:18:48   6  ,SUBSTR(prdate,1,7)pair
20:18:48   7  ,SUBSTR(prdate,-19)ydate
20:18:48   8  ,'&1'
20:18:48   9  FROM svmc_apply_prep
20:18:48  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gattn'

1 row created.

Elapsed: 00:00:00.05
20:18:48 SQL> @score1_5min_gattn.sql	2010-11-12 15:45:01 aud_usd
20:18:48 SQL> --
20:18:48 SQL> -- score1_5min_gattn.sql
20:18:48 SQL> --
20:18:48 SQL> 
20:18:48 SQL> -- Demo:
20:18:48 SQL> -- @score1_5min_gattn.sql 2010-12-31 20:45:01 aud_usd
20:18:48 SQL> 
20:18:48 SQL> CREATE OR REPLACE VIEW sme AS
20:18:48   2  SELECT
20:18:48   3  prdate
20:18:48   4  ,NULL gattn
20:18:48   5  ,g00
20:18:48   6  ,g01
20:18:48   7  ,g02
20:18:48   8  ,g03
20:18:48   9  ,g04
20:18:48  10  ,g05
20:18:48  11  ,g06
20:18:48  12  ,g07
20:18:48  13  ,g08
20:18:48  14  ,g09
20:18:48  15  ,g10
20:18:48  16  ,g11
20:18:48  17  ,g12
20:18:48  18  ,g13
20:18:48  19  ,g14
20:18:48  20  ,g15
20:18:48  21  ,g16
20:18:48  22  ,g17
20:18:48  23  ,g18
20:18:48  24  ,g19
20:18:48  25  ,g20
20:18:48  26  ,g21
20:18:48  27  ,g22
20:18:48  28  ,g23
20:18:48  29  ,g24
20:18:48  30  ,g25
20:18:48  31  ,g26
20:18:48  32  ,g27
20:18:48  33  ,g28
20:18:48  34  ,g29
20:18:48  35  ,g30
20:18:48  36  ,g31
20:18:48  37  ,g32
20:18:48  38  ,g33
20:18:48  39  ,g34
20:18:48  40  ,g35
20:18:48  41  ,g36
20:18:48  42  ,g37
20:18:48  43  ,g38
20:18:48  44  ,g39
20:18:48  45  ,g40
20:18:48  46  ,g41
20:18:48  47  FROM modsrc
20:18:48  48  WHERE ydate = '&1'||' '||'&2'
20:18:48  49  AND pair = '&3'
20:18:48  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-11-12'||' '||'15:45:01'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.05
20:18:48 SQL> 
20:18:48 SQL> -- rpt
20:18:48 SQL> -- We should see just 1 row:
20:18:48 SQL> 
20:18:48 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.01
20:18:48 SQL> 
20:18:48 SQL> -- Build the model:
20:18:48 SQL> CREATE OR REPLACE VIEW bme AS
20:18:48   2  SELECT
20:18:48   3  prdate
20:18:48   4  ,gattn
20:18:48   5  ,g00
20:18:48   6  ,g01
20:18:48   7  ,g02
20:18:48   8  ,g03
20:18:48   9  ,g04
20:18:48  10  ,g05
20:18:48  11  ,g06
20:18:48  12  ,g07
20:18:48  13  ,g08
20:18:48  14  ,g09
20:18:48  15  ,g10
20:18:48  16  ,g11
20:18:48  17  ,g12
20:18:48  18  ,g13
20:18:48  19  ,g14
20:18:48  20  ,g15
20:18:48  21  ,g16
20:18:48  22  ,g17
20:18:48  23  ,g18
20:18:48  24  ,g19
20:18:48  25  ,g20
20:18:48  26  ,g21
20:18:48  27  ,g22
20:18:48  28  ,g23
20:18:48  29  ,g24
20:18:48  30  ,g25
20:18:48  31  ,g26
20:18:48  32  ,g27
20:18:48  33  ,g28
20:18:48  34  ,g29
20:18:48  35  ,g30
20:18:48  36  ,g31
20:18:48  37  ,g32
20:18:48  38  ,g33
20:18:48  39  ,g34
20:18:48  40  ,g35
20:18:48  41  ,g36
20:18:48  42  ,g37
20:18:48  43  ,g38
20:18:48  44  ,g39
20:18:48  45  ,g40
20:18:48  46  ,g41
20:18:48  47  FROM modsrc
20:18:48  48  WHERE gattn IN('nup','up')
20:18:48  49  -- Use only rows which are older than 1 day:
20:18:48  50  AND 1+ydate < '&1'||' '||'&2'
20:18:48  51  AND pair = '&3'
20:18:48  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-11-12'||' '||'15:45:01'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:18:48 SQL> 
20:18:48 SQL> -- rpt
20:18:48 SQL> 
20:18:48 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	     5023
up	     2759

Elapsed: 00:00:00.02
20:18:48 SQL> 
20:18:48 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-11-11 15:40:01

Elapsed: 00:00:00.01
20:18:48 SQL> 
20:18:48 SQL> -- Now build model from bme and score sme
20:18:48 SQL> @score1.sql gattn
20:18:48 SQL> --
20:18:48 SQL> -- score1.sql
20:18:48 SQL> --
20:18:48 SQL> 
20:18:48 SQL> -- I use this script to send 5 params to score.sql
20:18:48 SQL> -- which does the heavy lifting of creating an SVM model.
20:18:48 SQL> -- Then at the very end of this script I use the model
20:18:48 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:18:48 SQL> 
20:18:48 SQL> -- I call this script from 2 other scripts:
20:18:48 SQL> -- score1_5min.sql
20:18:48 SQL> -- score1_5min_gattn.sql
20:18:48 SQL> 
20:18:48 SQL> -- The 1st param is the name of the target attribute.
20:18:48 SQL> -- I like to call my target attributes either gatt or gattn.
20:18:48 SQL> 
20:18:48 SQL> -- Demo:
20:18:48 SQL> -- @score1.sql 'gatt'
20:18:48 SQL> -- @score1.sql 'gattn'
20:18:48 SQL> 
20:18:48 SQL> -- Now, I fill up svmc_apply_prep.
20:18:48 SQL> -- I use same model_name used in score.sql
20:18:48 SQL> DEFINE model_name = 'svmfx101'
20:18:48 SQL> DEFINE bldtable	= 'bme'
20:18:48 SQL> DEFINE scoretable = 'sme'
20:18:48 SQL> DEFINE case_id	= 'prdate'
20:18:48 SQL> -- Demo:
20:18:48 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:18:48 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:18:48 SQL> --
20:18:48 SQL> -- score.sql
20:18:48 SQL> --
20:18:48 SQL> 
20:18:48 SQL> -- usage: score.sql
20:18:48 SQL> 
20:18:48 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:18:48 SQL> 
20:18:48 SQL> -- DEFINE target	   = 'gatt'
20:18:48 SQL> -- DEFINE model_name = 'svmfx101'
20:18:48 SQL> -- DEFINE bldtable   = 'bme'
20:18:48 SQL> -- DEFINE scoretable = 'sme'
20:18:48 SQL> -- DEFINE case_id    = 'prdate'
20:18:48 SQL> 
20:18:48 SQL> DEFINE target	= '&1'
20:18:48 SQL> DEFINE model_name = '&2'
20:18:48 SQL> DEFINE bldtable	= '&3'
20:18:48 SQL> DEFINE scoretable = '&4'
20:18:48 SQL> DEFINE case_id	= '&5'
20:18:48 SQL> 
20:18:48 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:18:48 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:18:48 SQL> 
20:18:48 SQL> -- Builds an SVM model using pl/sql.
20:18:48 SQL> 
20:18:48 SQL> -----------------------------------------------------------------------
20:18:48 SQL> --			    BUILD THE MODEL
20:18:48 SQL> -----------------------------------------------------------------------
20:18:48 SQL> 
20:18:48 SQL> -- Cleanup old build data preparation objects for repeat runs
20:18:48 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.01
20:18:48 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:18:48 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:18:48 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.00
20:18:48 SQL> 
20:18:48 SQL> 
20:18:48 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:18:48 SQL> --
20:18:48 SQL> -- DROP	TABLE svmc_settings ;
20:18:48 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:18:48 SQL> -- DELETE svmc_settings;
20:18:48 SQL> 
20:18:48 SQL> -- The default classification algorithm is Naive Bayes. So override
20:18:48 SQL> -- this choice to SVM using a settings table.
20:18:48 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:18:48 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:18:48 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:18:48 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:18:48 SQL> -- models.
20:18:48 SQL> --
20:18:48 SQL> 
20:18:48 SQL> -- Do this once and then comment it out.
20:18:48 SQL> -- That makes script go faster.
20:18:48 SQL> -- BEGIN
20:18:48 SQL> -- -- Populate settings table
20:18:48 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:18:48 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:18:48 SQL> --
20:18:48 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:18:48 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:18:48 SQL> --
20:18:48 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:18:48 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:18:48 SQL> --   COMMIT;
20:18:48 SQL> -- END;
20:18:48 SQL> -- /
20:18:48 SQL> 
20:18:48 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:18:48 SQL> 
20:18:48 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:18:48   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:18:48   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:18:48 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:18:48   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:18:48   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:18:48 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:18:48   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:18:48   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:18:48 SQL> 
20:18:48 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:18:48   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:18:48   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:18:48 SQL> 
20:18:48 SQL> --------------------------------
20:18:48 SQL> -- PREPARE BUILD (TRAINING) DATA
20:18:48 SQL> --
20:18:48 SQL> 
20:18:48 SQL> -- 1. Missing Value treatment for all Predictors and
20:18:48 SQL> -- 2. Outlier Treatment and
20:18:48 SQL> -- 3. Normalization are performed below.
20:18:48 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:18:48 SQL> --    normalized here.
20:18:48 SQL> 
20:18:48 SQL> BEGIN
20:18:48   2  	-- Perform missing value treatment for all predictors
20:18:48   3  	-- create miss tables
20:18:48   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:18:48   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:18:48   6  
20:18:48   7  	-- populate miss tables
20:18:48   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:18:48   9  	  miss_table_name => 'svmc_miss_num',
20:18:48  10  	  data_table_name => '&bldtable',
20:18:48  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:18:48  12  
20:18:48  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:18:48  14  	  miss_table_name => 'svmc_miss_cat',
20:18:48  15  	  data_table_name => '&bldtable',
20:18:48  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:18:48  17  
20:18:48  18  	-- xform input data to replace missing values
20:18:48  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:18:48  20  	  miss_table_name => 'svmc_miss_num',
20:18:48  21  	  data_table_name => '&bldtable',
20:18:48  22  	  xform_view_name => 'xformed_build_miss_num');
20:18:48  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:18:48  24  	  miss_table_name => 'svmc_miss_cat',
20:18:48  25  	  data_table_name => '&bldtable',
20:18:48  26  	  xform_view_name => 'xformed_build_miss_cat');
20:18:48  27  
20:18:48  28  	-- Perform outlier treatment.
20:18:48  29  	-- create clip table
20:18:48  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:18:48  31  
20:18:48  32  	-- populate clip table
20:18:48  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:18:48  34  	  clip_table_name => 'svmc_clip',
20:18:48  35  	  data_table_name => '&bldtable',
20:18:48  36  	  tail_frac	  => 0.025,
20:18:48  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:18:48  38  
20:18:48  39  	-- xform input data to winsorized data
20:18:48  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:18:48  41  	  clip_table_name => 'svmc_clip',
20:18:48  42  	  data_table_name => '&bldtable',
20:18:48  43  	  xform_view_name => 'svmc_winsor');
20:18:48  44  
20:18:48  45  	-- create normalization table
20:18:48  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:18:48  47  
20:18:48  48  	-- populate normalization table based on winsorized data
20:18:48  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:18:48  50  	  norm_table_name => 'svmc_norm',
20:18:48  51  	  data_table_name => 'svmc_winsor',
20:18:48  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:18:48  53  
20:18:48  54  	-- normalize the original data
20:18:48  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:18:48  56  	  norm_table_name => 'svmc_norm',
20:18:48  57  	  data_table_name => '&bldtable',
20:18:48  58  	  xform_view_name => 'svmc_build_prep');
20:18:48  59  END;
20:18:48  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.48
20:18:50 SQL> 
20:18:50 SQL> ---------------------
20:18:50 SQL> -- CREATE A NEW MODEL
20:18:50 SQL> --
20:18:50 SQL> -- Cleanup old model with the same name for repeat runs
20:18:50 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:18:50   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:18:50   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.95
20:18:51 SQL> 
20:18:51 SQL> -- Build a new SVM Model
20:18:51 SQL> BEGIN
20:18:51   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:18:51   3  	  model_name	      => '&model_name',
20:18:51   4  	  mining_function     => dbms_data_mining.classification,
20:18:51   5  	  data_table_name     => 'svmc_build_prep',
20:18:51   6  	  case_id_column_name => '&case_id',
20:18:51   7  	  target_column_name  => '&target',
20:18:51   8  	  settings_table_name => 'svmc_settings');
20:18:51   9  END;
20:18:51  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:03.89
20:18:55 SQL> 
20:18:55 SQL> -----------------------------------------------------------------------
20:18:55 SQL> --			       APPLY/score THE MODEL
20:18:55 SQL> -----------------------------------------------------------------------
20:18:55 SQL> 
20:18:55 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:18:55 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:18:55   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:18:55   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:18:55 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:18:55   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:18:55   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:18:55 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:18:55   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:18:55   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:18:55 SQL> -----------------------
20:18:55 SQL> -- PREPARE SCORING DATA
20:18:55 SQL> --
20:18:55 SQL> -- If the data for model creation has been prepared, then the data
20:18:55 SQL> -- to be scored using the model must be prepared in the same manner
20:18:55 SQL> -- in order to obtain meaningful results.
20:18:55 SQL> --
20:18:55 SQL> -- 1. Missing Value treatment for all Predictors and
20:18:55 SQL> -- 2. Normalization
20:18:55 SQL> -- No outlier treatment will be performed during test and apply. The
20:18:55 SQL> -- normalization step is sufficient, since the normalization parameters
20:18:55 SQL> -- already capture the effects of outlier treatment done with build data.
20:18:55 SQL> --
20:18:55 SQL> BEGIN
20:18:55   2  	-- Xform Test data to replace missing values
20:18:55   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:18:55   4  	  miss_table_name => 'svmc_miss_num',
20:18:55   5  	  data_table_name => '&scoretable',
20:18:55   6  	  xform_view_name => 'xformed_apply_miss_num');
20:18:55   7  
20:18:55   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:18:55   9  	  miss_table_name => 'svmc_miss_cat',
20:18:55  10  	  data_table_name => '&scoretable',
20:18:55  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:18:55  12  
20:18:55  13  	-- Normalize the data to be scored
20:18:55  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:18:55  15  	  norm_table_name => 'svmc_norm',
20:18:55  16  	  data_table_name => '&scoretable',
20:18:55  17  	  xform_view_name => 'svmc_apply_prep');
20:18:55  18  END;
20:18:55  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.18
20:18:55 SQL> 
20:18:55 SQL> -- Maybe I already collected a score for this prdate.
20:18:55 SQL> -- DELETE it if I did:
20:18:55 SQL> DELETE svm62scores
20:18:55   2  WHERE score > 0
20:18:55   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:18:55   4  -- I need to supply the target attribute name:
20:18:55   5  AND targ = '&1'
20:18:55   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gattn'

0 rows deleted.

Elapsed: 00:00:00.02
20:18:55 SQL> 
20:18:55 SQL> -- We do a drumroll here:
20:18:55 SQL> 
20:18:55 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:18:55   2  SELECT
20:18:55   3  prdate
20:18:55   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:18:55   5  ,sysdate
20:18:55   6  ,SUBSTR(prdate,1,7)pair
20:18:55   7  ,SUBSTR(prdate,-19)ydate
20:18:55   8  ,'&1'
20:18:55   9  FROM svmc_apply_prep
20:18:55  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gattn'

1 row created.

Elapsed: 00:00:00.05
20:18:55 SQL> @score1_5min.sql	      2010-10-21 09:00:01 aud_usd
20:18:55 SQL> --
20:18:55 SQL> -- score1_5min.sql
20:18:55 SQL> --
20:18:55 SQL> 
20:18:55 SQL> -- Demo:
20:18:55 SQL> -- @score1_5min.sql 2010-12-31 20:45:01 aud_usd
20:18:55 SQL> 
20:18:55 SQL> CREATE OR REPLACE VIEW sme AS
20:18:55   2  SELECT
20:18:55   3  prdate
20:18:55   4  ,NULL gatt
20:18:55   5  ,g00
20:18:55   6  ,g01
20:18:55   7  ,g02
20:18:55   8  ,g03
20:18:55   9  ,g04
20:18:55  10  ,g05
20:18:55  11  ,g06
20:18:55  12  ,g07
20:18:55  13  ,g08
20:18:55  14  ,g09
20:18:55  15  ,g10
20:18:55  16  ,g11
20:18:55  17  ,g12
20:18:55  18  ,g13
20:18:55  19  ,g14
20:18:55  20  ,g15
20:18:55  21  ,g16
20:18:55  22  ,g17
20:18:55  23  ,g18
20:18:55  24  ,g19
20:18:55  25  ,g20
20:18:55  26  ,g21
20:18:55  27  ,g22
20:18:55  28  ,g23
20:18:55  29  ,g24
20:18:55  30  ,g25
20:18:55  31  ,g26
20:18:55  32  ,g27
20:18:55  33  ,g28
20:18:55  34  ,g29
20:18:55  35  ,g30
20:18:55  36  ,g31
20:18:55  37  ,g32
20:18:55  38  ,g33
20:18:55  39  ,g34
20:18:55  40  ,g35
20:18:55  41  ,g36
20:18:55  42  ,g37
20:18:55  43  ,g38
20:18:55  44  ,g39
20:18:55  45  ,g40
20:18:55  46  ,g41
20:18:55  47  FROM modsrc
20:18:55  48  WHERE ydate = '&1'||' '||'&2'
20:18:55  49  AND pair = '&3'
20:18:55  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-10-21'||' '||'09:00:01'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.03
20:18:55 SQL> 
20:18:55 SQL> -- rpt
20:18:55 SQL> -- We should see just 1 row:
20:18:55 SQL> 
20:18:55 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.02
20:18:55 SQL> 
20:18:55 SQL> -- Build the model:
20:18:55 SQL> CREATE OR REPLACE VIEW bme AS
20:18:55   2  SELECT
20:18:55   3  prdate
20:18:55   4  ,gatt
20:18:55   5  ,g00
20:18:55   6  ,g01
20:18:55   7  ,g02
20:18:55   8  ,g03
20:18:55   9  ,g04
20:18:55  10  ,g05
20:18:55  11  ,g06
20:18:55  12  ,g07
20:18:55  13  ,g08
20:18:55  14  ,g09
20:18:55  15  ,g10
20:18:55  16  ,g11
20:18:55  17  ,g12
20:18:55  18  ,g13
20:18:55  19  ,g14
20:18:55  20  ,g15
20:18:55  21  ,g16
20:18:55  22  ,g17
20:18:55  23  ,g18
20:18:55  24  ,g19
20:18:55  25  ,g20
20:18:55  26  ,g21
20:18:55  27  ,g22
20:18:55  28  ,g23
20:18:55  29  ,g24
20:18:55  30  ,g25
20:18:55  31  ,g26
20:18:55  32  ,g27
20:18:55  33  ,g28
20:18:55  34  ,g29
20:18:55  35  ,g30
20:18:55  36  ,g31
20:18:55  37  ,g32
20:18:55  38  ,g33
20:18:55  39  ,g34
20:18:55  40  ,g35
20:18:55  41  ,g36
20:18:55  42  ,g37
20:18:55  43  ,g38
20:18:55  44  ,g39
20:18:55  45  ,g40
20:18:55  46  ,g41
20:18:55  47  FROM modsrc
20:18:55  48  WHERE gatt IN('nup','up')
20:18:55  49  -- Use only rows which are older than 1 day:
20:18:55  50  AND 1+ydate < '&1'||' '||'&2'
20:18:55  51  AND pair = '&3'
20:18:55  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-10-21'||' '||'09:00:01'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:18:55 SQL> 
20:18:55 SQL> -- rpt
20:18:55 SQL> 
20:18:55 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt;

GAT COUNT(PRDATE)
--- -------------
nup	     1766
up	     1291

Elapsed: 00:00:00.02
20:18:55 SQL> 
20:18:55 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-10-20 08:55:01

Elapsed: 00:00:00.01
20:18:55 SQL> 
20:18:55 SQL> -- Now build model from bme and score sme
20:18:55 SQL> @score1.sql gatt
20:18:55 SQL> --
20:18:55 SQL> -- score1.sql
20:18:55 SQL> --
20:18:55 SQL> 
20:18:55 SQL> -- I use this script to send 5 params to score.sql
20:18:55 SQL> -- which does the heavy lifting of creating an SVM model.
20:18:55 SQL> -- Then at the very end of this script I use the model
20:18:55 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:18:55 SQL> 
20:18:55 SQL> -- I call this script from 2 other scripts:
20:18:55 SQL> -- score1_5min.sql
20:18:55 SQL> -- score1_5min_gattn.sql
20:18:55 SQL> 
20:18:55 SQL> -- The 1st param is the name of the target attribute.
20:18:55 SQL> -- I like to call my target attributes either gatt or gattn.
20:18:55 SQL> 
20:18:55 SQL> -- Demo:
20:18:55 SQL> -- @score1.sql 'gatt'
20:18:55 SQL> -- @score1.sql 'gattn'
20:18:55 SQL> 
20:18:55 SQL> -- Now, I fill up svmc_apply_prep.
20:18:55 SQL> -- I use same model_name used in score.sql
20:18:55 SQL> DEFINE model_name = 'svmfx101'
20:18:55 SQL> DEFINE bldtable	= 'bme'
20:18:55 SQL> DEFINE scoretable = 'sme'
20:18:55 SQL> DEFINE case_id	= 'prdate'
20:18:55 SQL> -- Demo:
20:18:55 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:18:55 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:18:55 SQL> --
20:18:55 SQL> -- score.sql
20:18:55 SQL> --
20:18:55 SQL> 
20:18:55 SQL> -- usage: score.sql
20:18:55 SQL> 
20:18:55 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:18:55 SQL> 
20:18:55 SQL> -- DEFINE target	   = 'gatt'
20:18:55 SQL> -- DEFINE model_name = 'svmfx101'
20:18:55 SQL> -- DEFINE bldtable   = 'bme'
20:18:55 SQL> -- DEFINE scoretable = 'sme'
20:18:55 SQL> -- DEFINE case_id    = 'prdate'
20:18:55 SQL> 
20:18:55 SQL> DEFINE target	= '&1'
20:18:55 SQL> DEFINE model_name = '&2'
20:18:55 SQL> DEFINE bldtable	= '&3'
20:18:55 SQL> DEFINE scoretable = '&4'
20:18:55 SQL> DEFINE case_id	= '&5'
20:18:55 SQL> 
20:18:55 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:18:55 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:18:55 SQL> 
20:18:55 SQL> -- Builds an SVM model using pl/sql.
20:18:55 SQL> 
20:18:55 SQL> -----------------------------------------------------------------------
20:18:55 SQL> --			    BUILD THE MODEL
20:18:55 SQL> -----------------------------------------------------------------------
20:18:55 SQL> 
20:18:55 SQL> -- Cleanup old build data preparation objects for repeat runs
20:18:55 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.00
20:18:55 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:18:55 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:18:55 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.01
20:18:55 SQL> 
20:18:55 SQL> 
20:18:55 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:18:55 SQL> --
20:18:55 SQL> -- DROP	TABLE svmc_settings ;
20:18:55 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:18:55 SQL> -- DELETE svmc_settings;
20:18:55 SQL> 
20:18:55 SQL> -- The default classification algorithm is Naive Bayes. So override
20:18:55 SQL> -- this choice to SVM using a settings table.
20:18:55 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:18:55 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:18:55 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:18:55 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:18:55 SQL> -- models.
20:18:55 SQL> --
20:18:55 SQL> 
20:18:55 SQL> -- Do this once and then comment it out.
20:18:55 SQL> -- That makes script go faster.
20:18:55 SQL> -- BEGIN
20:18:55 SQL> -- -- Populate settings table
20:18:55 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:18:55 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:18:55 SQL> --
20:18:55 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:18:55 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:18:55 SQL> --
20:18:55 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:18:55 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:18:55 SQL> --   COMMIT;
20:18:55 SQL> -- END;
20:18:55 SQL> -- /
20:18:55 SQL> 
20:18:55 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:18:55 SQL> 
20:18:55 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:18:55   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:18:55   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:18:55 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:18:55   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:18:55   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:18:55 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:18:55   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:18:55   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:18:55 SQL> 
20:18:55 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:18:55   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:18:55   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:18:55 SQL> 
20:18:55 SQL> --------------------------------
20:18:55 SQL> -- PREPARE BUILD (TRAINING) DATA
20:18:55 SQL> --
20:18:55 SQL> 
20:18:55 SQL> -- 1. Missing Value treatment for all Predictors and
20:18:55 SQL> -- 2. Outlier Treatment and
20:18:55 SQL> -- 3. Normalization are performed below.
20:18:55 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:18:55 SQL> --    normalized here.
20:18:55 SQL> 
20:18:55 SQL> BEGIN
20:18:55   2  	-- Perform missing value treatment for all predictors
20:18:55   3  	-- create miss tables
20:18:55   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:18:55   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:18:55   6  
20:18:55   7  	-- populate miss tables
20:18:55   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:18:55   9  	  miss_table_name => 'svmc_miss_num',
20:18:55  10  	  data_table_name => '&bldtable',
20:18:55  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:18:55  12  
20:18:55  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:18:55  14  	  miss_table_name => 'svmc_miss_cat',
20:18:55  15  	  data_table_name => '&bldtable',
20:18:55  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:18:55  17  
20:18:55  18  	-- xform input data to replace missing values
20:18:55  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:18:55  20  	  miss_table_name => 'svmc_miss_num',
20:18:55  21  	  data_table_name => '&bldtable',
20:18:55  22  	  xform_view_name => 'xformed_build_miss_num');
20:18:55  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:18:55  24  	  miss_table_name => 'svmc_miss_cat',
20:18:55  25  	  data_table_name => '&bldtable',
20:18:55  26  	  xform_view_name => 'xformed_build_miss_cat');
20:18:55  27  
20:18:55  28  	-- Perform outlier treatment.
20:18:55  29  	-- create clip table
20:18:55  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:18:55  31  
20:18:55  32  	-- populate clip table
20:18:55  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:18:55  34  	  clip_table_name => 'svmc_clip',
20:18:55  35  	  data_table_name => '&bldtable',
20:18:55  36  	  tail_frac	  => 0.025,
20:18:55  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:18:55  38  
20:18:55  39  	-- xform input data to winsorized data
20:18:55  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:18:55  41  	  clip_table_name => 'svmc_clip',
20:18:55  42  	  data_table_name => '&bldtable',
20:18:55  43  	  xform_view_name => 'svmc_winsor');
20:18:55  44  
20:18:55  45  	-- create normalization table
20:18:55  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:18:55  47  
20:18:55  48  	-- populate normalization table based on winsorized data
20:18:55  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:18:55  50  	  norm_table_name => 'svmc_norm',
20:18:55  51  	  data_table_name => 'svmc_winsor',
20:18:55  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:18:55  53  
20:18:55  54  	-- normalize the original data
20:18:55  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:18:55  56  	  norm_table_name => 'svmc_norm',
20:18:55  57  	  data_table_name => '&bldtable',
20:18:55  58  	  xform_view_name => 'svmc_build_prep');
20:18:55  59  END;
20:18:55  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.13
20:18:56 SQL> 
20:18:56 SQL> ---------------------
20:18:56 SQL> -- CREATE A NEW MODEL
20:18:56 SQL> --
20:18:56 SQL> -- Cleanup old model with the same name for repeat runs
20:18:56 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:18:56   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:18:56   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.93
20:18:57 SQL> 
20:18:57 SQL> -- Build a new SVM Model
20:18:57 SQL> BEGIN
20:18:57   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:18:57   3  	  model_name	      => '&model_name',
20:18:57   4  	  mining_function     => dbms_data_mining.classification,
20:18:57   5  	  data_table_name     => 'svmc_build_prep',
20:18:57   6  	  case_id_column_name => '&case_id',
20:18:57   7  	  target_column_name  => '&target',
20:18:57   8  	  settings_table_name => 'svmc_settings');
20:18:57   9  END;
20:18:57  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:02.62
20:19:00 SQL> 
20:19:00 SQL> -----------------------------------------------------------------------
20:19:00 SQL> --			       APPLY/score THE MODEL
20:19:00 SQL> -----------------------------------------------------------------------
20:19:00 SQL> 
20:19:00 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:19:00 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:19:00   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:19:00   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:19:00 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:19:00   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:19:00   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:19:00 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:19:00   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:19:00   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:19:00 SQL> -----------------------
20:19:00 SQL> -- PREPARE SCORING DATA
20:19:00 SQL> --
20:19:00 SQL> -- If the data for model creation has been prepared, then the data
20:19:00 SQL> -- to be scored using the model must be prepared in the same manner
20:19:00 SQL> -- in order to obtain meaningful results.
20:19:00 SQL> --
20:19:00 SQL> -- 1. Missing Value treatment for all Predictors and
20:19:00 SQL> -- 2. Normalization
20:19:00 SQL> -- No outlier treatment will be performed during test and apply. The
20:19:00 SQL> -- normalization step is sufficient, since the normalization parameters
20:19:00 SQL> -- already capture the effects of outlier treatment done with build data.
20:19:00 SQL> --
20:19:00 SQL> BEGIN
20:19:00   2  	-- Xform Test data to replace missing values
20:19:00   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:19:00   4  	  miss_table_name => 'svmc_miss_num',
20:19:00   5  	  data_table_name => '&scoretable',
20:19:00   6  	  xform_view_name => 'xformed_apply_miss_num');
20:19:00   7  
20:19:00   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:19:00   9  	  miss_table_name => 'svmc_miss_cat',
20:19:00  10  	  data_table_name => '&scoretable',
20:19:00  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:19:00  12  
20:19:00  13  	-- Normalize the data to be scored
20:19:00  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:19:00  15  	  norm_table_name => 'svmc_norm',
20:19:00  16  	  data_table_name => '&scoretable',
20:19:00  17  	  xform_view_name => 'svmc_apply_prep');
20:19:00  18  END;
20:19:00  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.21
20:19:00 SQL> 
20:19:00 SQL> -- Maybe I already collected a score for this prdate.
20:19:00 SQL> -- DELETE it if I did:
20:19:00 SQL> DELETE svm62scores
20:19:00   2  WHERE score > 0
20:19:00   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:19:00   4  -- I need to supply the target attribute name:
20:19:00   5  AND targ = '&1'
20:19:00   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gatt'

0 rows deleted.

Elapsed: 00:00:00.01
20:19:00 SQL> 
20:19:00 SQL> -- We do a drumroll here:
20:19:00 SQL> 
20:19:00 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:19:00   2  SELECT
20:19:00   3  prdate
20:19:00   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:19:00   5  ,sysdate
20:19:00   6  ,SUBSTR(prdate,1,7)pair
20:19:00   7  ,SUBSTR(prdate,-19)ydate
20:19:00   8  ,'&1'
20:19:00   9  FROM svmc_apply_prep
20:19:00  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gatt'

1 row created.

Elapsed: 00:00:00.05
20:19:00 SQL> @score1_5min.sql	      2010-11-02 17:45:01 aud_usd
20:19:00 SQL> --
20:19:00 SQL> -- score1_5min.sql
20:19:00 SQL> --
20:19:00 SQL> 
20:19:00 SQL> -- Demo:
20:19:00 SQL> -- @score1_5min.sql 2010-12-31 20:45:01 aud_usd
20:19:00 SQL> 
20:19:00 SQL> CREATE OR REPLACE VIEW sme AS
20:19:00   2  SELECT
20:19:00   3  prdate
20:19:00   4  ,NULL gatt
20:19:00   5  ,g00
20:19:00   6  ,g01
20:19:00   7  ,g02
20:19:00   8  ,g03
20:19:00   9  ,g04
20:19:00  10  ,g05
20:19:00  11  ,g06
20:19:00  12  ,g07
20:19:00  13  ,g08
20:19:00  14  ,g09
20:19:00  15  ,g10
20:19:00  16  ,g11
20:19:00  17  ,g12
20:19:00  18  ,g13
20:19:00  19  ,g14
20:19:00  20  ,g15
20:19:00  21  ,g16
20:19:00  22  ,g17
20:19:00  23  ,g18
20:19:00  24  ,g19
20:19:00  25  ,g20
20:19:00  26  ,g21
20:19:00  27  ,g22
20:19:00  28  ,g23
20:19:00  29  ,g24
20:19:00  30  ,g25
20:19:00  31  ,g26
20:19:00  32  ,g27
20:19:00  33  ,g28
20:19:00  34  ,g29
20:19:00  35  ,g30
20:19:00  36  ,g31
20:19:00  37  ,g32
20:19:00  38  ,g33
20:19:00  39  ,g34
20:19:00  40  ,g35
20:19:00  41  ,g36
20:19:00  42  ,g37
20:19:00  43  ,g38
20:19:00  44  ,g39
20:19:00  45  ,g40
20:19:00  46  ,g41
20:19:00  47  FROM modsrc
20:19:00  48  WHERE ydate = '&1'||' '||'&2'
20:19:00  49  AND pair = '&3'
20:19:00  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-11-02'||' '||'17:45:01'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:19:00 SQL> 
20:19:00 SQL> -- rpt
20:19:00 SQL> -- We should see just 1 row:
20:19:00 SQL> 
20:19:00 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.01
20:19:00 SQL> 
20:19:00 SQL> -- Build the model:
20:19:00 SQL> CREATE OR REPLACE VIEW bme AS
20:19:00   2  SELECT
20:19:00   3  prdate
20:19:00   4  ,gatt
20:19:00   5  ,g00
20:19:00   6  ,g01
20:19:00   7  ,g02
20:19:00   8  ,g03
20:19:00   9  ,g04
20:19:00  10  ,g05
20:19:00  11  ,g06
20:19:00  12  ,g07
20:19:00  13  ,g08
20:19:00  14  ,g09
20:19:00  15  ,g10
20:19:00  16  ,g11
20:19:00  17  ,g12
20:19:00  18  ,g13
20:19:00  19  ,g14
20:19:00  20  ,g15
20:19:00  21  ,g16
20:19:00  22  ,g17
20:19:00  23  ,g18
20:19:00  24  ,g19
20:19:00  25  ,g20
20:19:00  26  ,g21
20:19:00  27  ,g22
20:19:00  28  ,g23
20:19:00  29  ,g24
20:19:00  30  ,g25
20:19:00  31  ,g26
20:19:00  32  ,g27
20:19:00  33  ,g28
20:19:00  34  ,g29
20:19:00  35  ,g30
20:19:00  36  ,g31
20:19:00  37  ,g32
20:19:00  38  ,g33
20:19:00  39  ,g34
20:19:00  40  ,g35
20:19:00  41  ,g36
20:19:00  42  ,g37
20:19:00  43  ,g38
20:19:00  44  ,g39
20:19:00  45  ,g40
20:19:00  46  ,g41
20:19:00  47  FROM modsrc
20:19:00  48  WHERE gatt IN('nup','up')
20:19:00  49  -- Use only rows which are older than 1 day:
20:19:00  50  AND 1+ydate < '&1'||' '||'&2'
20:19:00  51  AND pair = '&3'
20:19:00  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-11-02'||' '||'17:45:01'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.05
20:19:00 SQL> 
20:19:00 SQL> -- rpt
20:19:00 SQL> 
20:19:00 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt;

GAT COUNT(PRDATE)
--- -------------
nup	     3223
up	     2267

Elapsed: 00:00:00.02
20:19:00 SQL> 
20:19:00 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-11-01 17:40:01

Elapsed: 00:00:00.02
20:19:00 SQL> 
20:19:00 SQL> -- Now build model from bme and score sme
20:19:00 SQL> @score1.sql gatt
20:19:00 SQL> --
20:19:00 SQL> -- score1.sql
20:19:00 SQL> --
20:19:00 SQL> 
20:19:00 SQL> -- I use this script to send 5 params to score.sql
20:19:00 SQL> -- which does the heavy lifting of creating an SVM model.
20:19:00 SQL> -- Then at the very end of this script I use the model
20:19:00 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:19:00 SQL> 
20:19:00 SQL> -- I call this script from 2 other scripts:
20:19:00 SQL> -- score1_5min.sql
20:19:00 SQL> -- score1_5min_gattn.sql
20:19:00 SQL> 
20:19:00 SQL> -- The 1st param is the name of the target attribute.
20:19:00 SQL> -- I like to call my target attributes either gatt or gattn.
20:19:00 SQL> 
20:19:00 SQL> -- Demo:
20:19:00 SQL> -- @score1.sql 'gatt'
20:19:00 SQL> -- @score1.sql 'gattn'
20:19:00 SQL> 
20:19:00 SQL> -- Now, I fill up svmc_apply_prep.
20:19:00 SQL> -- I use same model_name used in score.sql
20:19:00 SQL> DEFINE model_name = 'svmfx101'
20:19:00 SQL> DEFINE bldtable	= 'bme'
20:19:00 SQL> DEFINE scoretable = 'sme'
20:19:00 SQL> DEFINE case_id	= 'prdate'
20:19:00 SQL> -- Demo:
20:19:00 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:19:00 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:19:00 SQL> --
20:19:00 SQL> -- score.sql
20:19:00 SQL> --
20:19:00 SQL> 
20:19:00 SQL> -- usage: score.sql
20:19:00 SQL> 
20:19:00 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:19:00 SQL> 
20:19:00 SQL> -- DEFINE target	   = 'gatt'
20:19:00 SQL> -- DEFINE model_name = 'svmfx101'
20:19:00 SQL> -- DEFINE bldtable   = 'bme'
20:19:00 SQL> -- DEFINE scoretable = 'sme'
20:19:00 SQL> -- DEFINE case_id    = 'prdate'
20:19:00 SQL> 
20:19:00 SQL> DEFINE target	= '&1'
20:19:00 SQL> DEFINE model_name = '&2'
20:19:00 SQL> DEFINE bldtable	= '&3'
20:19:00 SQL> DEFINE scoretable = '&4'
20:19:00 SQL> DEFINE case_id	= '&5'
20:19:00 SQL> 
20:19:00 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:19:00 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:19:00 SQL> 
20:19:00 SQL> -- Builds an SVM model using pl/sql.
20:19:00 SQL> 
20:19:00 SQL> -----------------------------------------------------------------------
20:19:00 SQL> --			    BUILD THE MODEL
20:19:00 SQL> -----------------------------------------------------------------------
20:19:00 SQL> 
20:19:00 SQL> -- Cleanup old build data preparation objects for repeat runs
20:19:00 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.00
20:19:00 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:19:00 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.01
20:19:00 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.00
20:19:00 SQL> 
20:19:00 SQL> 
20:19:00 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:19:00 SQL> --
20:19:00 SQL> -- DROP	TABLE svmc_settings ;
20:19:00 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:19:00 SQL> -- DELETE svmc_settings;
20:19:00 SQL> 
20:19:00 SQL> -- The default classification algorithm is Naive Bayes. So override
20:19:00 SQL> -- this choice to SVM using a settings table.
20:19:00 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:19:00 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:19:00 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:19:00 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:19:00 SQL> -- models.
20:19:00 SQL> --
20:19:00 SQL> 
20:19:00 SQL> -- Do this once and then comment it out.
20:19:00 SQL> -- That makes script go faster.
20:19:00 SQL> -- BEGIN
20:19:00 SQL> -- -- Populate settings table
20:19:00 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:19:00 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:19:00 SQL> --
20:19:00 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:19:00 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:19:00 SQL> --
20:19:00 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:19:00 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:19:00 SQL> --   COMMIT;
20:19:00 SQL> -- END;
20:19:00 SQL> -- /
20:19:00 SQL> 
20:19:00 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:19:00 SQL> 
20:19:00 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:19:00   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:19:00   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:19:00 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:19:00   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:19:00   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:19:01 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:19:01   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:19:01   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:19:01 SQL> 
20:19:01 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:19:01   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:19:01   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:19:01 SQL> 
20:19:01 SQL> --------------------------------
20:19:01 SQL> -- PREPARE BUILD (TRAINING) DATA
20:19:01 SQL> --
20:19:01 SQL> 
20:19:01 SQL> -- 1. Missing Value treatment for all Predictors and
20:19:01 SQL> -- 2. Outlier Treatment and
20:19:01 SQL> -- 3. Normalization are performed below.
20:19:01 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:19:01 SQL> --    normalized here.
20:19:01 SQL> 
20:19:01 SQL> BEGIN
20:19:01   2  	-- Perform missing value treatment for all predictors
20:19:01   3  	-- create miss tables
20:19:01   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:19:01   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:19:01   6  
20:19:01   7  	-- populate miss tables
20:19:01   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:19:01   9  	  miss_table_name => 'svmc_miss_num',
20:19:01  10  	  data_table_name => '&bldtable',
20:19:01  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:19:01  12  
20:19:01  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:19:01  14  	  miss_table_name => 'svmc_miss_cat',
20:19:01  15  	  data_table_name => '&bldtable',
20:19:01  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:19:01  17  
20:19:01  18  	-- xform input data to replace missing values
20:19:01  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:19:01  20  	  miss_table_name => 'svmc_miss_num',
20:19:01  21  	  data_table_name => '&bldtable',
20:19:01  22  	  xform_view_name => 'xformed_build_miss_num');
20:19:01  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:19:01  24  	  miss_table_name => 'svmc_miss_cat',
20:19:01  25  	  data_table_name => '&bldtable',
20:19:01  26  	  xform_view_name => 'xformed_build_miss_cat');
20:19:01  27  
20:19:01  28  	-- Perform outlier treatment.
20:19:01  29  	-- create clip table
20:19:01  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:19:01  31  
20:19:01  32  	-- populate clip table
20:19:01  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:19:01  34  	  clip_table_name => 'svmc_clip',
20:19:01  35  	  data_table_name => '&bldtable',
20:19:01  36  	  tail_frac	  => 0.025,
20:19:01  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:19:01  38  
20:19:01  39  	-- xform input data to winsorized data
20:19:01  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:19:01  41  	  clip_table_name => 'svmc_clip',
20:19:01  42  	  data_table_name => '&bldtable',
20:19:01  43  	  xform_view_name => 'svmc_winsor');
20:19:01  44  
20:19:01  45  	-- create normalization table
20:19:01  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:19:01  47  
20:19:01  48  	-- populate normalization table based on winsorized data
20:19:01  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:19:01  50  	  norm_table_name => 'svmc_norm',
20:19:01  51  	  data_table_name => 'svmc_winsor',
20:19:01  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:19:01  53  
20:19:01  54  	-- normalize the original data
20:19:01  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:19:01  56  	  norm_table_name => 'svmc_norm',
20:19:01  57  	  data_table_name => '&bldtable',
20:19:01  58  	  xform_view_name => 'svmc_build_prep');
20:19:01  59  END;
20:19:01  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.31
20:19:02 SQL> 
20:19:02 SQL> ---------------------
20:19:02 SQL> -- CREATE A NEW MODEL
20:19:02 SQL> --
20:19:02 SQL> -- Cleanup old model with the same name for repeat runs
20:19:02 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:19:02   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:19:02   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.95
20:19:03 SQL> 
20:19:03 SQL> -- Build a new SVM Model
20:19:03 SQL> BEGIN
20:19:03   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:19:03   3  	  model_name	      => '&model_name',
20:19:03   4  	  mining_function     => dbms_data_mining.classification,
20:19:03   5  	  data_table_name     => 'svmc_build_prep',
20:19:03   6  	  case_id_column_name => '&case_id',
20:19:03   7  	  target_column_name  => '&target',
20:19:03   8  	  settings_table_name => 'svmc_settings');
20:19:03   9  END;
20:19:03  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:03.18
20:19:06 SQL> 
20:19:06 SQL> -----------------------------------------------------------------------
20:19:06 SQL> --			       APPLY/score THE MODEL
20:19:06 SQL> -----------------------------------------------------------------------
20:19:06 SQL> 
20:19:06 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:19:06 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:19:06   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:19:06   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:19:06 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:19:06   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:19:06   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:19:06 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:19:06   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:19:06   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:19:06 SQL> -----------------------
20:19:06 SQL> -- PREPARE SCORING DATA
20:19:06 SQL> --
20:19:06 SQL> -- If the data for model creation has been prepared, then the data
20:19:06 SQL> -- to be scored using the model must be prepared in the same manner
20:19:06 SQL> -- in order to obtain meaningful results.
20:19:06 SQL> --
20:19:06 SQL> -- 1. Missing Value treatment for all Predictors and
20:19:06 SQL> -- 2. Normalization
20:19:06 SQL> -- No outlier treatment will be performed during test and apply. The
20:19:06 SQL> -- normalization step is sufficient, since the normalization parameters
20:19:06 SQL> -- already capture the effects of outlier treatment done with build data.
20:19:06 SQL> --
20:19:06 SQL> BEGIN
20:19:06   2  	-- Xform Test data to replace missing values
20:19:06   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:19:06   4  	  miss_table_name => 'svmc_miss_num',
20:19:06   5  	  data_table_name => '&scoretable',
20:19:06   6  	  xform_view_name => 'xformed_apply_miss_num');
20:19:06   7  
20:19:06   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:19:06   9  	  miss_table_name => 'svmc_miss_cat',
20:19:06  10  	  data_table_name => '&scoretable',
20:19:06  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:19:06  12  
20:19:06  13  	-- Normalize the data to be scored
20:19:06  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:19:06  15  	  norm_table_name => 'svmc_norm',
20:19:06  16  	  data_table_name => '&scoretable',
20:19:06  17  	  xform_view_name => 'svmc_apply_prep');
20:19:06  18  END;
20:19:06  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.17
20:19:06 SQL> 
20:19:06 SQL> -- Maybe I already collected a score for this prdate.
20:19:06 SQL> -- DELETE it if I did:
20:19:06 SQL> DELETE svm62scores
20:19:06   2  WHERE score > 0
20:19:06   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:19:06   4  -- I need to supply the target attribute name:
20:19:06   5  AND targ = '&1'
20:19:06   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gatt'

0 rows deleted.

Elapsed: 00:00:00.02
20:19:06 SQL> 
20:19:06 SQL> -- We do a drumroll here:
20:19:06 SQL> 
20:19:06 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:19:06   2  SELECT
20:19:06   3  prdate
20:19:06   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:19:06   5  ,sysdate
20:19:06   6  ,SUBSTR(prdate,1,7)pair
20:19:06   7  ,SUBSTR(prdate,-19)ydate
20:19:06   8  ,'&1'
20:19:06   9  FROM svmc_apply_prep
20:19:06  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gatt'

1 row created.

Elapsed: 00:00:00.05
20:19:06 SQL> @score1_5min_gattn.sql	2011-01-04 00:05:00 aud_usd
20:19:06 SQL> --
20:19:06 SQL> -- score1_5min_gattn.sql
20:19:06 SQL> --
20:19:06 SQL> 
20:19:06 SQL> -- Demo:
20:19:06 SQL> -- @score1_5min_gattn.sql 2010-12-31 20:45:01 aud_usd
20:19:06 SQL> 
20:19:06 SQL> CREATE OR REPLACE VIEW sme AS
20:19:06   2  SELECT
20:19:06   3  prdate
20:19:06   4  ,NULL gattn
20:19:06   5  ,g00
20:19:06   6  ,g01
20:19:06   7  ,g02
20:19:06   8  ,g03
20:19:06   9  ,g04
20:19:06  10  ,g05
20:19:06  11  ,g06
20:19:06  12  ,g07
20:19:06  13  ,g08
20:19:06  14  ,g09
20:19:06  15  ,g10
20:19:06  16  ,g11
20:19:06  17  ,g12
20:19:06  18  ,g13
20:19:06  19  ,g14
20:19:06  20  ,g15
20:19:06  21  ,g16
20:19:06  22  ,g17
20:19:06  23  ,g18
20:19:06  24  ,g19
20:19:06  25  ,g20
20:19:06  26  ,g21
20:19:06  27  ,g22
20:19:06  28  ,g23
20:19:06  29  ,g24
20:19:06  30  ,g25
20:19:06  31  ,g26
20:19:06  32  ,g27
20:19:06  33  ,g28
20:19:06  34  ,g29
20:19:06  35  ,g30
20:19:06  36  ,g31
20:19:06  37  ,g32
20:19:06  38  ,g33
20:19:06  39  ,g34
20:19:06  40  ,g35
20:19:06  41  ,g36
20:19:06  42  ,g37
20:19:06  43  ,g38
20:19:06  44  ,g39
20:19:06  45  ,g40
20:19:06  46  ,g41
20:19:06  47  FROM modsrc
20:19:06  48  WHERE ydate = '&1'||' '||'&2'
20:19:06  49  AND pair = '&3'
20:19:06  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2011-01-04'||' '||'00:05:00'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:19:06 SQL> 
20:19:06 SQL> -- rpt
20:19:06 SQL> -- We should see just 1 row:
20:19:06 SQL> 
20:19:06 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.01
20:19:06 SQL> 
20:19:06 SQL> -- Build the model:
20:19:06 SQL> CREATE OR REPLACE VIEW bme AS
20:19:06   2  SELECT
20:19:06   3  prdate
20:19:06   4  ,gattn
20:19:06   5  ,g00
20:19:06   6  ,g01
20:19:06   7  ,g02
20:19:06   8  ,g03
20:19:06   9  ,g04
20:19:06  10  ,g05
20:19:06  11  ,g06
20:19:06  12  ,g07
20:19:06  13  ,g08
20:19:06  14  ,g09
20:19:06  15  ,g10
20:19:06  16  ,g11
20:19:06  17  ,g12
20:19:06  18  ,g13
20:19:06  19  ,g14
20:19:06  20  ,g15
20:19:06  21  ,g16
20:19:06  22  ,g17
20:19:06  23  ,g18
20:19:06  24  ,g19
20:19:06  25  ,g20
20:19:06  26  ,g21
20:19:06  27  ,g22
20:19:06  28  ,g23
20:19:06  29  ,g24
20:19:06  30  ,g25
20:19:06  31  ,g26
20:19:06  32  ,g27
20:19:06  33  ,g28
20:19:06  34  ,g29
20:19:06  35  ,g30
20:19:06  36  ,g31
20:19:06  37  ,g32
20:19:06  38  ,g33
20:19:06  39  ,g34
20:19:06  40  ,g35
20:19:06  41  ,g36
20:19:06  42  ,g37
20:19:06  43  ,g38
20:19:06  44  ,g39
20:19:06  45  ,g40
20:19:06  46  ,g41
20:19:06  47  FROM modsrc
20:19:06  48  WHERE gattn IN('nup','up')
20:19:06  49  -- Use only rows which are older than 1 day:
20:19:06  50  AND 1+ydate < '&1'||' '||'&2'
20:19:06  51  AND pair = '&3'
20:19:06  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2011-01-04'||' '||'00:05:00'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.05
20:19:06 SQL> 
20:19:06 SQL> -- rpt
20:19:06 SQL> 
20:19:06 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	    12145
up	     5994

Elapsed: 00:00:00.03
20:19:06 SQL> 
20:19:06 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2011-01-03 00:00:00

Elapsed: 00:00:00.01
20:19:06 SQL> 
20:19:06 SQL> -- Now build model from bme and score sme
20:19:06 SQL> @score1.sql gattn
20:19:07 SQL> --
20:19:07 SQL> -- score1.sql
20:19:07 SQL> --
20:19:07 SQL> 
20:19:07 SQL> -- I use this script to send 5 params to score.sql
20:19:07 SQL> -- which does the heavy lifting of creating an SVM model.
20:19:07 SQL> -- Then at the very end of this script I use the model
20:19:07 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:19:07 SQL> 
20:19:07 SQL> -- I call this script from 2 other scripts:
20:19:07 SQL> -- score1_5min.sql
20:19:07 SQL> -- score1_5min_gattn.sql
20:19:07 SQL> 
20:19:07 SQL> -- The 1st param is the name of the target attribute.
20:19:07 SQL> -- I like to call my target attributes either gatt or gattn.
20:19:07 SQL> 
20:19:07 SQL> -- Demo:
20:19:07 SQL> -- @score1.sql 'gatt'
20:19:07 SQL> -- @score1.sql 'gattn'
20:19:07 SQL> 
20:19:07 SQL> -- Now, I fill up svmc_apply_prep.
20:19:07 SQL> -- I use same model_name used in score.sql
20:19:07 SQL> DEFINE model_name = 'svmfx101'
20:19:07 SQL> DEFINE bldtable	= 'bme'
20:19:07 SQL> DEFINE scoretable = 'sme'
20:19:07 SQL> DEFINE case_id	= 'prdate'
20:19:07 SQL> -- Demo:
20:19:07 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:19:07 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:19:07 SQL> --
20:19:07 SQL> -- score.sql
20:19:07 SQL> --
20:19:07 SQL> 
20:19:07 SQL> -- usage: score.sql
20:19:07 SQL> 
20:19:07 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:19:07 SQL> 
20:19:07 SQL> -- DEFINE target	   = 'gatt'
20:19:07 SQL> -- DEFINE model_name = 'svmfx101'
20:19:07 SQL> -- DEFINE bldtable   = 'bme'
20:19:07 SQL> -- DEFINE scoretable = 'sme'
20:19:07 SQL> -- DEFINE case_id    = 'prdate'
20:19:07 SQL> 
20:19:07 SQL> DEFINE target	= '&1'
20:19:07 SQL> DEFINE model_name = '&2'
20:19:07 SQL> DEFINE bldtable	= '&3'
20:19:07 SQL> DEFINE scoretable = '&4'
20:19:07 SQL> DEFINE case_id	= '&5'
20:19:07 SQL> 
20:19:07 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:19:07 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:19:07 SQL> 
20:19:07 SQL> -- Builds an SVM model using pl/sql.
20:19:07 SQL> 
20:19:07 SQL> -----------------------------------------------------------------------
20:19:07 SQL> --			    BUILD THE MODEL
20:19:07 SQL> -----------------------------------------------------------------------
20:19:07 SQL> 
20:19:07 SQL> -- Cleanup old build data preparation objects for repeat runs
20:19:07 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.00
20:19:07 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:19:07 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:19:07 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.00
20:19:07 SQL> 
20:19:07 SQL> 
20:19:07 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:19:07 SQL> --
20:19:07 SQL> -- DROP	TABLE svmc_settings ;
20:19:07 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:19:07 SQL> -- DELETE svmc_settings;
20:19:07 SQL> 
20:19:07 SQL> -- The default classification algorithm is Naive Bayes. So override
20:19:07 SQL> -- this choice to SVM using a settings table.
20:19:07 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:19:07 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:19:07 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:19:07 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:19:07 SQL> -- models.
20:19:07 SQL> --
20:19:07 SQL> 
20:19:07 SQL> -- Do this once and then comment it out.
20:19:07 SQL> -- That makes script go faster.
20:19:07 SQL> -- BEGIN
20:19:07 SQL> -- -- Populate settings table
20:19:07 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:19:07 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:19:07 SQL> --
20:19:07 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:19:07 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:19:07 SQL> --
20:19:07 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:19:07 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:19:07 SQL> --   COMMIT;
20:19:07 SQL> -- END;
20:19:07 SQL> -- /
20:19:07 SQL> 
20:19:07 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:19:07 SQL> 
20:19:07 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:19:07   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:19:07   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:19:07 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:19:07   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:19:07   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:19:07 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:19:07   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:19:07   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:19:07 SQL> 
20:19:07 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:19:07   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:19:07   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:19:07 SQL> 
20:19:07 SQL> --------------------------------
20:19:07 SQL> -- PREPARE BUILD (TRAINING) DATA
20:19:07 SQL> --
20:19:07 SQL> 
20:19:07 SQL> -- 1. Missing Value treatment for all Predictors and
20:19:07 SQL> -- 2. Outlier Treatment and
20:19:07 SQL> -- 3. Normalization are performed below.
20:19:07 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:19:07 SQL> --    normalized here.
20:19:07 SQL> 
20:19:07 SQL> BEGIN
20:19:07   2  	-- Perform missing value treatment for all predictors
20:19:07   3  	-- create miss tables
20:19:07   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:19:07   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:19:07   6  
20:19:07   7  	-- populate miss tables
20:19:07   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:19:07   9  	  miss_table_name => 'svmc_miss_num',
20:19:07  10  	  data_table_name => '&bldtable',
20:19:07  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:19:07  12  
20:19:07  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:19:07  14  	  miss_table_name => 'svmc_miss_cat',
20:19:07  15  	  data_table_name => '&bldtable',
20:19:07  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:19:07  17  
20:19:07  18  	-- xform input data to replace missing values
20:19:07  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:19:07  20  	  miss_table_name => 'svmc_miss_num',
20:19:07  21  	  data_table_name => '&bldtable',
20:19:07  22  	  xform_view_name => 'xformed_build_miss_num');
20:19:07  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:19:07  24  	  miss_table_name => 'svmc_miss_cat',
20:19:07  25  	  data_table_name => '&bldtable',
20:19:07  26  	  xform_view_name => 'xformed_build_miss_cat');
20:19:07  27  
20:19:07  28  	-- Perform outlier treatment.
20:19:07  29  	-- create clip table
20:19:07  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:19:07  31  
20:19:07  32  	-- populate clip table
20:19:07  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:19:07  34  	  clip_table_name => 'svmc_clip',
20:19:07  35  	  data_table_name => '&bldtable',
20:19:07  36  	  tail_frac	  => 0.025,
20:19:07  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:19:07  38  
20:19:07  39  	-- xform input data to winsorized data
20:19:07  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:19:07  41  	  clip_table_name => 'svmc_clip',
20:19:07  42  	  data_table_name => '&bldtable',
20:19:07  43  	  xform_view_name => 'svmc_winsor');
20:19:07  44  
20:19:07  45  	-- create normalization table
20:19:07  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:19:07  47  
20:19:07  48  	-- populate normalization table based on winsorized data
20:19:07  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:19:07  50  	  norm_table_name => 'svmc_norm',
20:19:07  51  	  data_table_name => 'svmc_winsor',
20:19:07  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:19:07  53  
20:19:07  54  	-- normalize the original data
20:19:07  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:19:07  56  	  norm_table_name => 'svmc_norm',
20:19:07  57  	  data_table_name => '&bldtable',
20:19:07  58  	  xform_view_name => 'svmc_build_prep');
20:19:07  59  END;
20:19:07  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:02.29
20:19:09 SQL> 
20:19:09 SQL> ---------------------
20:19:09 SQL> -- CREATE A NEW MODEL
20:19:09 SQL> --
20:19:09 SQL> -- Cleanup old model with the same name for repeat runs
20:19:09 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:19:09   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:19:09   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.97
20:19:10 SQL> 
20:19:10 SQL> -- Build a new SVM Model
20:19:10 SQL> BEGIN
20:19:10   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:19:10   3  	  model_name	      => '&model_name',
20:19:10   4  	  mining_function     => dbms_data_mining.classification,
20:19:10   5  	  data_table_name     => 'svmc_build_prep',
20:19:10   6  	  case_id_column_name => '&case_id',
20:19:10   7  	  target_column_name  => '&target',
20:19:10   8  	  settings_table_name => 'svmc_settings');
20:19:10   9  END;
20:19:10  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:04.94
20:19:15 SQL> 
20:19:15 SQL> -----------------------------------------------------------------------
20:19:15 SQL> --			       APPLY/score THE MODEL
20:19:15 SQL> -----------------------------------------------------------------------
20:19:15 SQL> 
20:19:15 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:19:15 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:19:15   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:19:15   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:19:15 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:19:15   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:19:15   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:19:15 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:19:15   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:19:15   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:19:15 SQL> -----------------------
20:19:15 SQL> -- PREPARE SCORING DATA
20:19:15 SQL> --
20:19:15 SQL> -- If the data for model creation has been prepared, then the data
20:19:15 SQL> -- to be scored using the model must be prepared in the same manner
20:19:15 SQL> -- in order to obtain meaningful results.
20:19:15 SQL> --
20:19:15 SQL> -- 1. Missing Value treatment for all Predictors and
20:19:15 SQL> -- 2. Normalization
20:19:15 SQL> -- No outlier treatment will be performed during test and apply. The
20:19:15 SQL> -- normalization step is sufficient, since the normalization parameters
20:19:15 SQL> -- already capture the effects of outlier treatment done with build data.
20:19:15 SQL> --
20:19:15 SQL> BEGIN
20:19:15   2  	-- Xform Test data to replace missing values
20:19:15   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:19:15   4  	  miss_table_name => 'svmc_miss_num',
20:19:15   5  	  data_table_name => '&scoretable',
20:19:15   6  	  xform_view_name => 'xformed_apply_miss_num');
20:19:15   7  
20:19:15   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:19:15   9  	  miss_table_name => 'svmc_miss_cat',
20:19:15  10  	  data_table_name => '&scoretable',
20:19:15  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:19:15  12  
20:19:15  13  	-- Normalize the data to be scored
20:19:15  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:19:15  15  	  norm_table_name => 'svmc_norm',
20:19:15  16  	  data_table_name => '&scoretable',
20:19:15  17  	  xform_view_name => 'svmc_apply_prep');
20:19:15  18  END;
20:19:15  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.19
20:19:15 SQL> 
20:19:15 SQL> -- Maybe I already collected a score for this prdate.
20:19:15 SQL> -- DELETE it if I did:
20:19:15 SQL> DELETE svm62scores
20:19:15   2  WHERE score > 0
20:19:15   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:19:15   4  -- I need to supply the target attribute name:
20:19:15   5  AND targ = '&1'
20:19:15   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gattn'

0 rows deleted.

Elapsed: 00:00:00.01
20:19:15 SQL> 
20:19:15 SQL> -- We do a drumroll here:
20:19:15 SQL> 
20:19:15 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:19:15   2  SELECT
20:19:15   3  prdate
20:19:15   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:19:15   5  ,sysdate
20:19:15   6  ,SUBSTR(prdate,1,7)pair
20:19:15   7  ,SUBSTR(prdate,-19)ydate
20:19:15   8  ,'&1'
20:19:15   9  FROM svmc_apply_prep
20:19:15  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gattn'

1 row created.

Elapsed: 00:00:00.05
20:19:15 SQL> @score1_5min_gattn.sql	2010-11-16 04:00:01 aud_usd
20:19:15 SQL> --
20:19:15 SQL> -- score1_5min_gattn.sql
20:19:15 SQL> --
20:19:15 SQL> 
20:19:15 SQL> -- Demo:
20:19:15 SQL> -- @score1_5min_gattn.sql 2010-12-31 20:45:01 aud_usd
20:19:15 SQL> 
20:19:15 SQL> CREATE OR REPLACE VIEW sme AS
20:19:15   2  SELECT
20:19:15   3  prdate
20:19:15   4  ,NULL gattn
20:19:15   5  ,g00
20:19:15   6  ,g01
20:19:15   7  ,g02
20:19:15   8  ,g03
20:19:15   9  ,g04
20:19:15  10  ,g05
20:19:15  11  ,g06
20:19:15  12  ,g07
20:19:15  13  ,g08
20:19:15  14  ,g09
20:19:15  15  ,g10
20:19:15  16  ,g11
20:19:15  17  ,g12
20:19:15  18  ,g13
20:19:15  19  ,g14
20:19:15  20  ,g15
20:19:15  21  ,g16
20:19:15  22  ,g17
20:19:15  23  ,g18
20:19:15  24  ,g19
20:19:15  25  ,g20
20:19:15  26  ,g21
20:19:15  27  ,g22
20:19:15  28  ,g23
20:19:15  29  ,g24
20:19:15  30  ,g25
20:19:15  31  ,g26
20:19:15  32  ,g27
20:19:15  33  ,g28
20:19:15  34  ,g29
20:19:15  35  ,g30
20:19:15  36  ,g31
20:19:15  37  ,g32
20:19:15  38  ,g33
20:19:15  39  ,g34
20:19:15  40  ,g35
20:19:15  41  ,g36
20:19:15  42  ,g37
20:19:15  43  ,g38
20:19:15  44  ,g39
20:19:15  45  ,g40
20:19:15  46  ,g41
20:19:15  47  FROM modsrc
20:19:15  48  WHERE ydate = '&1'||' '||'&2'
20:19:15  49  AND pair = '&3'
20:19:15  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-11-16'||' '||'04:00:01'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:19:15 SQL> 
20:19:15 SQL> -- rpt
20:19:15 SQL> -- We should see just 1 row:
20:19:15 SQL> 
20:19:15 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.02
20:19:15 SQL> 
20:19:15 SQL> -- Build the model:
20:19:15 SQL> CREATE OR REPLACE VIEW bme AS
20:19:15   2  SELECT
20:19:15   3  prdate
20:19:15   4  ,gattn
20:19:15   5  ,g00
20:19:15   6  ,g01
20:19:15   7  ,g02
20:19:15   8  ,g03
20:19:15   9  ,g04
20:19:15  10  ,g05
20:19:15  11  ,g06
20:19:15  12  ,g07
20:19:15  13  ,g08
20:19:15  14  ,g09
20:19:15  15  ,g10
20:19:15  16  ,g11
20:19:15  17  ,g12
20:19:15  18  ,g13
20:19:15  19  ,g14
20:19:15  20  ,g15
20:19:15  21  ,g16
20:19:15  22  ,g17
20:19:15  23  ,g18
20:19:15  24  ,g19
20:19:15  25  ,g20
20:19:15  26  ,g21
20:19:15  27  ,g22
20:19:15  28  ,g23
20:19:15  29  ,g24
20:19:15  30  ,g25
20:19:15  31  ,g26
20:19:15  32  ,g27
20:19:15  33  ,g28
20:19:15  34  ,g29
20:19:15  35  ,g30
20:19:15  36  ,g31
20:19:15  37  ,g32
20:19:15  38  ,g33
20:19:15  39  ,g34
20:19:15  40  ,g35
20:19:15  41  ,g36
20:19:15  42  ,g37
20:19:15  43  ,g38
20:19:15  44  ,g39
20:19:15  45  ,g40
20:19:15  46  ,g41
20:19:15  47  FROM modsrc
20:19:15  48  WHERE gattn IN('nup','up')
20:19:15  49  -- Use only rows which are older than 1 day:
20:19:15  50  AND 1+ydate < '&1'||' '||'&2'
20:19:15  51  AND pair = '&3'
20:19:15  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-11-16'||' '||'04:00:01'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.08
20:19:15 SQL> 
20:19:15 SQL> -- rpt
20:19:15 SQL> 
20:19:15 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	     5201
up	     3028

Elapsed: 00:00:00.03
20:19:15 SQL> 
20:19:15 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-11-15 03:55:01

Elapsed: 00:00:00.01
20:19:15 SQL> 
20:19:15 SQL> -- Now build model from bme and score sme
20:19:15 SQL> @score1.sql gattn
20:19:15 SQL> --
20:19:15 SQL> -- score1.sql
20:19:15 SQL> --
20:19:15 SQL> 
20:19:15 SQL> -- I use this script to send 5 params to score.sql
20:19:15 SQL> -- which does the heavy lifting of creating an SVM model.
20:19:15 SQL> -- Then at the very end of this script I use the model
20:19:15 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:19:15 SQL> 
20:19:15 SQL> -- I call this script from 2 other scripts:
20:19:15 SQL> -- score1_5min.sql
20:19:15 SQL> -- score1_5min_gattn.sql
20:19:15 SQL> 
20:19:15 SQL> -- The 1st param is the name of the target attribute.
20:19:15 SQL> -- I like to call my target attributes either gatt or gattn.
20:19:15 SQL> 
20:19:15 SQL> -- Demo:
20:19:15 SQL> -- @score1.sql 'gatt'
20:19:15 SQL> -- @score1.sql 'gattn'
20:19:15 SQL> 
20:19:15 SQL> -- Now, I fill up svmc_apply_prep.
20:19:15 SQL> -- I use same model_name used in score.sql
20:19:15 SQL> DEFINE model_name = 'svmfx101'
20:19:15 SQL> DEFINE bldtable	= 'bme'
20:19:15 SQL> DEFINE scoretable = 'sme'
20:19:15 SQL> DEFINE case_id	= 'prdate'
20:19:15 SQL> -- Demo:
20:19:15 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:19:15 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:19:15 SQL> --
20:19:15 SQL> -- score.sql
20:19:15 SQL> --
20:19:15 SQL> 
20:19:15 SQL> -- usage: score.sql
20:19:15 SQL> 
20:19:15 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:19:15 SQL> 
20:19:15 SQL> -- DEFINE target	   = 'gatt'
20:19:15 SQL> -- DEFINE model_name = 'svmfx101'
20:19:15 SQL> -- DEFINE bldtable   = 'bme'
20:19:15 SQL> -- DEFINE scoretable = 'sme'
20:19:15 SQL> -- DEFINE case_id    = 'prdate'
20:19:15 SQL> 
20:19:15 SQL> DEFINE target	= '&1'
20:19:15 SQL> DEFINE model_name = '&2'
20:19:15 SQL> DEFINE bldtable	= '&3'
20:19:15 SQL> DEFINE scoretable = '&4'
20:19:15 SQL> DEFINE case_id	= '&5'
20:19:15 SQL> 
20:19:15 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:19:15 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:19:15 SQL> 
20:19:15 SQL> -- Builds an SVM model using pl/sql.
20:19:15 SQL> 
20:19:15 SQL> -----------------------------------------------------------------------
20:19:15 SQL> --			    BUILD THE MODEL
20:19:15 SQL> -----------------------------------------------------------------------
20:19:15 SQL> 
20:19:15 SQL> -- Cleanup old build data preparation objects for repeat runs
20:19:15 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.01
20:19:15 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:19:15 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:19:15 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.00
20:19:15 SQL> 
20:19:15 SQL> 
20:19:15 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:19:15 SQL> --
20:19:15 SQL> -- DROP	TABLE svmc_settings ;
20:19:15 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:19:15 SQL> -- DELETE svmc_settings;
20:19:15 SQL> 
20:19:15 SQL> -- The default classification algorithm is Naive Bayes. So override
20:19:15 SQL> -- this choice to SVM using a settings table.
20:19:15 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:19:15 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:19:15 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:19:15 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:19:15 SQL> -- models.
20:19:15 SQL> --
20:19:15 SQL> 
20:19:15 SQL> -- Do this once and then comment it out.
20:19:15 SQL> -- That makes script go faster.
20:19:15 SQL> -- BEGIN
20:19:15 SQL> -- -- Populate settings table
20:19:15 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:19:15 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:19:15 SQL> --
20:19:15 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:19:15 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:19:15 SQL> --
20:19:15 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:19:15 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:19:15 SQL> --   COMMIT;
20:19:15 SQL> -- END;
20:19:15 SQL> -- /
20:19:15 SQL> 
20:19:15 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.01
20:19:15 SQL> 
20:19:15 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:19:15   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:19:15   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:19:15 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:19:15   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:19:15   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:19:15 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:19:15   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:19:15   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:19:16 SQL> 
20:19:16 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:19:16   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:19:16   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:19:16 SQL> 
20:19:16 SQL> --------------------------------
20:19:16 SQL> -- PREPARE BUILD (TRAINING) DATA
20:19:16 SQL> --
20:19:16 SQL> 
20:19:16 SQL> -- 1. Missing Value treatment for all Predictors and
20:19:16 SQL> -- 2. Outlier Treatment and
20:19:16 SQL> -- 3. Normalization are performed below.
20:19:16 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:19:16 SQL> --    normalized here.
20:19:16 SQL> 
20:19:16 SQL> BEGIN
20:19:16   2  	-- Perform missing value treatment for all predictors
20:19:16   3  	-- create miss tables
20:19:16   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:19:16   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:19:16   6  
20:19:16   7  	-- populate miss tables
20:19:16   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:19:16   9  	  miss_table_name => 'svmc_miss_num',
20:19:16  10  	  data_table_name => '&bldtable',
20:19:16  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:19:16  12  
20:19:16  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:19:16  14  	  miss_table_name => 'svmc_miss_cat',
20:19:16  15  	  data_table_name => '&bldtable',
20:19:16  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:19:16  17  
20:19:16  18  	-- xform input data to replace missing values
20:19:16  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:19:16  20  	  miss_table_name => 'svmc_miss_num',
20:19:16  21  	  data_table_name => '&bldtable',
20:19:16  22  	  xform_view_name => 'xformed_build_miss_num');
20:19:16  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:19:16  24  	  miss_table_name => 'svmc_miss_cat',
20:19:16  25  	  data_table_name => '&bldtable',
20:19:16  26  	  xform_view_name => 'xformed_build_miss_cat');
20:19:16  27  
20:19:16  28  	-- Perform outlier treatment.
20:19:16  29  	-- create clip table
20:19:16  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:19:16  31  
20:19:16  32  	-- populate clip table
20:19:16  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:19:16  34  	  clip_table_name => 'svmc_clip',
20:19:16  35  	  data_table_name => '&bldtable',
20:19:16  36  	  tail_frac	  => 0.025,
20:19:16  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:19:16  38  
20:19:16  39  	-- xform input data to winsorized data
20:19:16  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:19:16  41  	  clip_table_name => 'svmc_clip',
20:19:16  42  	  data_table_name => '&bldtable',
20:19:16  43  	  xform_view_name => 'svmc_winsor');
20:19:16  44  
20:19:16  45  	-- create normalization table
20:19:16  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:19:16  47  
20:19:16  48  	-- populate normalization table based on winsorized data
20:19:16  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:19:16  50  	  norm_table_name => 'svmc_norm',
20:19:16  51  	  data_table_name => 'svmc_winsor',
20:19:16  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:19:16  53  
20:19:16  54  	-- normalize the original data
20:19:16  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:19:16  56  	  norm_table_name => 'svmc_norm',
20:19:16  57  	  data_table_name => '&bldtable',
20:19:16  58  	  xform_view_name => 'svmc_build_prep');
20:19:16  59  END;
20:19:16  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.49
20:19:17 SQL> 
20:19:17 SQL> ---------------------
20:19:17 SQL> -- CREATE A NEW MODEL
20:19:17 SQL> --
20:19:17 SQL> -- Cleanup old model with the same name for repeat runs
20:19:17 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:19:17   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:19:17   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.95
20:19:18 SQL> 
20:19:18 SQL> -- Build a new SVM Model
20:19:18 SQL> BEGIN
20:19:18   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:19:18   3  	  model_name	      => '&model_name',
20:19:18   4  	  mining_function     => dbms_data_mining.classification,
20:19:18   5  	  data_table_name     => 'svmc_build_prep',
20:19:18   6  	  case_id_column_name => '&case_id',
20:19:18   7  	  target_column_name  => '&target',
20:19:18   8  	  settings_table_name => 'svmc_settings');
20:19:18   9  END;
20:19:18  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:03.30
20:19:21 SQL> 
20:19:21 SQL> -----------------------------------------------------------------------
20:19:21 SQL> --			       APPLY/score THE MODEL
20:19:21 SQL> -----------------------------------------------------------------------
20:19:21 SQL> 
20:19:21 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:19:21 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:19:21   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:19:21   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:19:21 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:19:21   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:19:21   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:19:21 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:19:21   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:19:21   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:19:21 SQL> -----------------------
20:19:21 SQL> -- PREPARE SCORING DATA
20:19:21 SQL> --
20:19:21 SQL> -- If the data for model creation has been prepared, then the data
20:19:21 SQL> -- to be scored using the model must be prepared in the same manner
20:19:21 SQL> -- in order to obtain meaningful results.
20:19:21 SQL> --
20:19:21 SQL> -- 1. Missing Value treatment for all Predictors and
20:19:21 SQL> -- 2. Normalization
20:19:21 SQL> -- No outlier treatment will be performed during test and apply. The
20:19:21 SQL> -- normalization step is sufficient, since the normalization parameters
20:19:21 SQL> -- already capture the effects of outlier treatment done with build data.
20:19:21 SQL> --
20:19:21 SQL> BEGIN
20:19:21   2  	-- Xform Test data to replace missing values
20:19:21   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:19:21   4  	  miss_table_name => 'svmc_miss_num',
20:19:21   5  	  data_table_name => '&scoretable',
20:19:21   6  	  xform_view_name => 'xformed_apply_miss_num');
20:19:21   7  
20:19:21   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:19:21   9  	  miss_table_name => 'svmc_miss_cat',
20:19:21  10  	  data_table_name => '&scoretable',
20:19:21  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:19:21  12  
20:19:21  13  	-- Normalize the data to be scored
20:19:21  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:19:21  15  	  norm_table_name => 'svmc_norm',
20:19:21  16  	  data_table_name => '&scoretable',
20:19:21  17  	  xform_view_name => 'svmc_apply_prep');
20:19:21  18  END;
20:19:21  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.17
20:19:22 SQL> 
20:19:22 SQL> -- Maybe I already collected a score for this prdate.
20:19:22 SQL> -- DELETE it if I did:
20:19:22 SQL> DELETE svm62scores
20:19:22   2  WHERE score > 0
20:19:22   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:19:22   4  -- I need to supply the target attribute name:
20:19:22   5  AND targ = '&1'
20:19:22   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gattn'

0 rows deleted.

Elapsed: 00:00:00.02
20:19:22 SQL> 
20:19:22 SQL> -- We do a drumroll here:
20:19:22 SQL> 
20:19:22 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:19:22   2  SELECT
20:19:22   3  prdate
20:19:22   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:19:22   5  ,sysdate
20:19:22   6  ,SUBSTR(prdate,1,7)pair
20:19:22   7  ,SUBSTR(prdate,-19)ydate
20:19:22   8  ,'&1'
20:19:22   9  FROM svmc_apply_prep
20:19:22  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gattn'

1 row created.

Elapsed: 00:00:00.04
20:19:22 SQL> @score1_5min_gattn.sql	2010-12-23 11:15:00 aud_usd
20:19:22 SQL> --
20:19:22 SQL> -- score1_5min_gattn.sql
20:19:22 SQL> --
20:19:22 SQL> 
20:19:22 SQL> -- Demo:
20:19:22 SQL> -- @score1_5min_gattn.sql 2010-12-31 20:45:01 aud_usd
20:19:22 SQL> 
20:19:22 SQL> CREATE OR REPLACE VIEW sme AS
20:19:22   2  SELECT
20:19:22   3  prdate
20:19:22   4  ,NULL gattn
20:19:22   5  ,g00
20:19:22   6  ,g01
20:19:22   7  ,g02
20:19:22   8  ,g03
20:19:22   9  ,g04
20:19:22  10  ,g05
20:19:22  11  ,g06
20:19:22  12  ,g07
20:19:22  13  ,g08
20:19:22  14  ,g09
20:19:22  15  ,g10
20:19:22  16  ,g11
20:19:22  17  ,g12
20:19:22  18  ,g13
20:19:22  19  ,g14
20:19:22  20  ,g15
20:19:22  21  ,g16
20:19:22  22  ,g17
20:19:22  23  ,g18
20:19:22  24  ,g19
20:19:22  25  ,g20
20:19:22  26  ,g21
20:19:22  27  ,g22
20:19:22  28  ,g23
20:19:22  29  ,g24
20:19:22  30  ,g25
20:19:22  31  ,g26
20:19:22  32  ,g27
20:19:22  33  ,g28
20:19:22  34  ,g29
20:19:22  35  ,g30
20:19:22  36  ,g31
20:19:22  37  ,g32
20:19:22  38  ,g33
20:19:22  39  ,g34
20:19:22  40  ,g35
20:19:22  41  ,g36
20:19:22  42  ,g37
20:19:22  43  ,g38
20:19:22  44  ,g39
20:19:22  45  ,g40
20:19:22  46  ,g41
20:19:22  47  FROM modsrc
20:19:22  48  WHERE ydate = '&1'||' '||'&2'
20:19:22  49  AND pair = '&3'
20:19:22  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-12-23'||' '||'11:15:00'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:19:22 SQL> 
20:19:22 SQL> -- rpt
20:19:22 SQL> -- We should see just 1 row:
20:19:22 SQL> 
20:19:22 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.02
20:19:22 SQL> 
20:19:22 SQL> -- Build the model:
20:19:22 SQL> CREATE OR REPLACE VIEW bme AS
20:19:22   2  SELECT
20:19:22   3  prdate
20:19:22   4  ,gattn
20:19:22   5  ,g00
20:19:22   6  ,g01
20:19:22   7  ,g02
20:19:22   8  ,g03
20:19:22   9  ,g04
20:19:22  10  ,g05
20:19:22  11  ,g06
20:19:22  12  ,g07
20:19:22  13  ,g08
20:19:22  14  ,g09
20:19:22  15  ,g10
20:19:22  16  ,g11
20:19:22  17  ,g12
20:19:22  18  ,g13
20:19:22  19  ,g14
20:19:22  20  ,g15
20:19:22  21  ,g16
20:19:22  22  ,g17
20:19:22  23  ,g18
20:19:22  24  ,g19
20:19:22  25  ,g20
20:19:22  26  ,g21
20:19:22  27  ,g22
20:19:22  28  ,g23
20:19:22  29  ,g24
20:19:22  30  ,g25
20:19:22  31  ,g26
20:19:22  32  ,g27
20:19:22  33  ,g28
20:19:22  34  ,g29
20:19:22  35  ,g30
20:19:22  36  ,g31
20:19:22  37  ,g32
20:19:22  38  ,g33
20:19:22  39  ,g34
20:19:22  40  ,g35
20:19:22  41  ,g36
20:19:22  42  ,g37
20:19:22  43  ,g38
20:19:22  44  ,g39
20:19:22  45  ,g40
20:19:22  46  ,g41
20:19:22  47  FROM modsrc
20:19:22  48  WHERE gattn IN('nup','up')
20:19:22  49  -- Use only rows which are older than 1 day:
20:19:22  50  AND 1+ydate < '&1'||' '||'&2'
20:19:22  51  AND pair = '&3'
20:19:22  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-12-23'||' '||'11:15:00'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.05
20:19:22 SQL> 
20:19:22 SQL> -- rpt
20:19:22 SQL> 
20:19:22 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	    10473
up	     5546

Elapsed: 00:00:00.03
20:19:22 SQL> 
20:19:22 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-12-22 11:10:00

Elapsed: 00:00:00.03
20:19:22 SQL> 
20:19:22 SQL> -- Now build model from bme and score sme
20:19:22 SQL> @score1.sql gattn
20:19:22 SQL> --
20:19:22 SQL> -- score1.sql
20:19:22 SQL> --
20:19:22 SQL> 
20:19:22 SQL> -- I use this script to send 5 params to score.sql
20:19:22 SQL> -- which does the heavy lifting of creating an SVM model.
20:19:22 SQL> -- Then at the very end of this script I use the model
20:19:22 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:19:22 SQL> 
20:19:22 SQL> -- I call this script from 2 other scripts:
20:19:22 SQL> -- score1_5min.sql
20:19:22 SQL> -- score1_5min_gattn.sql
20:19:22 SQL> 
20:19:22 SQL> -- The 1st param is the name of the target attribute.
20:19:22 SQL> -- I like to call my target attributes either gatt or gattn.
20:19:22 SQL> 
20:19:22 SQL> -- Demo:
20:19:22 SQL> -- @score1.sql 'gatt'
20:19:22 SQL> -- @score1.sql 'gattn'
20:19:22 SQL> 
20:19:22 SQL> -- Now, I fill up svmc_apply_prep.
20:19:22 SQL> -- I use same model_name used in score.sql
20:19:22 SQL> DEFINE model_name = 'svmfx101'
20:19:22 SQL> DEFINE bldtable	= 'bme'
20:19:22 SQL> DEFINE scoretable = 'sme'
20:19:22 SQL> DEFINE case_id	= 'prdate'
20:19:22 SQL> -- Demo:
20:19:22 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:19:22 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:19:22 SQL> --
20:19:22 SQL> -- score.sql
20:19:22 SQL> --
20:19:22 SQL> 
20:19:22 SQL> -- usage: score.sql
20:19:22 SQL> 
20:19:22 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:19:22 SQL> 
20:19:22 SQL> -- DEFINE target	   = 'gatt'
20:19:22 SQL> -- DEFINE model_name = 'svmfx101'
20:19:22 SQL> -- DEFINE bldtable   = 'bme'
20:19:22 SQL> -- DEFINE scoretable = 'sme'
20:19:22 SQL> -- DEFINE case_id    = 'prdate'
20:19:22 SQL> 
20:19:22 SQL> DEFINE target	= '&1'
20:19:22 SQL> DEFINE model_name = '&2'
20:19:22 SQL> DEFINE bldtable	= '&3'
20:19:22 SQL> DEFINE scoretable = '&4'
20:19:22 SQL> DEFINE case_id	= '&5'
20:19:22 SQL> 
20:19:22 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:19:22 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:19:22 SQL> 
20:19:22 SQL> -- Builds an SVM model using pl/sql.
20:19:22 SQL> 
20:19:22 SQL> -----------------------------------------------------------------------
20:19:22 SQL> --			    BUILD THE MODEL
20:19:22 SQL> -----------------------------------------------------------------------
20:19:22 SQL> 
20:19:22 SQL> -- Cleanup old build data preparation objects for repeat runs
20:19:22 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.00
20:19:22 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:19:22 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.01
20:19:22 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.00
20:19:22 SQL> 
20:19:22 SQL> 
20:19:22 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:19:22 SQL> --
20:19:22 SQL> -- DROP	TABLE svmc_settings ;
20:19:22 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:19:22 SQL> -- DELETE svmc_settings;
20:19:22 SQL> 
20:19:22 SQL> -- The default classification algorithm is Naive Bayes. So override
20:19:22 SQL> -- this choice to SVM using a settings table.
20:19:22 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:19:22 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:19:22 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:19:22 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:19:22 SQL> -- models.
20:19:22 SQL> --
20:19:22 SQL> 
20:19:22 SQL> -- Do this once and then comment it out.
20:19:22 SQL> -- That makes script go faster.
20:19:22 SQL> -- BEGIN
20:19:22 SQL> -- -- Populate settings table
20:19:22 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:19:22 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:19:22 SQL> --
20:19:22 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:19:22 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:19:22 SQL> --
20:19:22 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:19:22 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:19:22 SQL> --   COMMIT;
20:19:22 SQL> -- END;
20:19:22 SQL> -- /
20:19:22 SQL> 
20:19:22 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:19:22 SQL> 
20:19:22 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:19:22   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:19:22   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:19:22 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:19:22   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:19:22   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:19:22 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:19:22   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:19:22   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:19:22 SQL> 
20:19:22 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:19:22   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:19:22   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:19:22 SQL> 
20:19:22 SQL> --------------------------------
20:19:22 SQL> -- PREPARE BUILD (TRAINING) DATA
20:19:22 SQL> --
20:19:22 SQL> 
20:19:22 SQL> -- 1. Missing Value treatment for all Predictors and
20:19:22 SQL> -- 2. Outlier Treatment and
20:19:22 SQL> -- 3. Normalization are performed below.
20:19:22 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:19:22 SQL> --    normalized here.
20:19:22 SQL> 
20:19:22 SQL> BEGIN
20:19:22   2  	-- Perform missing value treatment for all predictors
20:19:22   3  	-- create miss tables
20:19:22   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:19:22   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:19:22   6  
20:19:22   7  	-- populate miss tables
20:19:22   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:19:22   9  	  miss_table_name => 'svmc_miss_num',
20:19:22  10  	  data_table_name => '&bldtable',
20:19:22  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:19:22  12  
20:19:22  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:19:22  14  	  miss_table_name => 'svmc_miss_cat',
20:19:22  15  	  data_table_name => '&bldtable',
20:19:22  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:19:22  17  
20:19:22  18  	-- xform input data to replace missing values
20:19:22  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:19:22  20  	  miss_table_name => 'svmc_miss_num',
20:19:22  21  	  data_table_name => '&bldtable',
20:19:22  22  	  xform_view_name => 'xformed_build_miss_num');
20:19:22  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:19:22  24  	  miss_table_name => 'svmc_miss_cat',
20:19:22  25  	  data_table_name => '&bldtable',
20:19:22  26  	  xform_view_name => 'xformed_build_miss_cat');
20:19:22  27  
20:19:22  28  	-- Perform outlier treatment.
20:19:22  29  	-- create clip table
20:19:22  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:19:22  31  
20:19:22  32  	-- populate clip table
20:19:22  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:19:22  34  	  clip_table_name => 'svmc_clip',
20:19:22  35  	  data_table_name => '&bldtable',
20:19:22  36  	  tail_frac	  => 0.025,
20:19:22  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:19:22  38  
20:19:22  39  	-- xform input data to winsorized data
20:19:22  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:19:22  41  	  clip_table_name => 'svmc_clip',
20:19:22  42  	  data_table_name => '&bldtable',
20:19:22  43  	  xform_view_name => 'svmc_winsor');
20:19:22  44  
20:19:22  45  	-- create normalization table
20:19:22  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:19:22  47  
20:19:22  48  	-- populate normalization table based on winsorized data
20:19:22  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:19:22  50  	  norm_table_name => 'svmc_norm',
20:19:22  51  	  data_table_name => 'svmc_winsor',
20:19:22  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:19:22  53  
20:19:22  54  	-- normalize the original data
20:19:22  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:19:22  56  	  norm_table_name => 'svmc_norm',
20:19:22  57  	  data_table_name => '&bldtable',
20:19:22  58  	  xform_view_name => 'svmc_build_prep');
20:19:22  59  END;
20:19:22  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:02.11
20:19:24 SQL> 
20:19:24 SQL> ---------------------
20:19:24 SQL> -- CREATE A NEW MODEL
20:19:24 SQL> --
20:19:24 SQL> -- Cleanup old model with the same name for repeat runs
20:19:24 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:19:24   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:19:24   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.94
20:19:25 SQL> 
20:19:25 SQL> -- Build a new SVM Model
20:19:25 SQL> BEGIN
20:19:25   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:19:25   3  	  model_name	      => '&model_name',
20:19:25   4  	  mining_function     => dbms_data_mining.classification,
20:19:25   5  	  data_table_name     => 'svmc_build_prep',
20:19:25   6  	  case_id_column_name => '&case_id',
20:19:25   7  	  target_column_name  => '&target',
20:19:25   8  	  settings_table_name => 'svmc_settings');
20:19:25   9  END;
20:19:25  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:05.03
20:19:30 SQL> 
20:19:30 SQL> -----------------------------------------------------------------------
20:19:30 SQL> --			       APPLY/score THE MODEL
20:19:30 SQL> -----------------------------------------------------------------------
20:19:30 SQL> 
20:19:30 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:19:30 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:19:30   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:19:30   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:19:30 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:19:30   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:19:30   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:19:30 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:19:30   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:19:30   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:19:30 SQL> -----------------------
20:19:30 SQL> -- PREPARE SCORING DATA
20:19:30 SQL> --
20:19:30 SQL> -- If the data for model creation has been prepared, then the data
20:19:30 SQL> -- to be scored using the model must be prepared in the same manner
20:19:30 SQL> -- in order to obtain meaningful results.
20:19:30 SQL> --
20:19:30 SQL> -- 1. Missing Value treatment for all Predictors and
20:19:30 SQL> -- 2. Normalization
20:19:30 SQL> -- No outlier treatment will be performed during test and apply. The
20:19:30 SQL> -- normalization step is sufficient, since the normalization parameters
20:19:30 SQL> -- already capture the effects of outlier treatment done with build data.
20:19:30 SQL> --
20:19:30 SQL> BEGIN
20:19:30   2  	-- Xform Test data to replace missing values
20:19:30   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:19:30   4  	  miss_table_name => 'svmc_miss_num',
20:19:30   5  	  data_table_name => '&scoretable',
20:19:30   6  	  xform_view_name => 'xformed_apply_miss_num');
20:19:30   7  
20:19:30   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:19:30   9  	  miss_table_name => 'svmc_miss_cat',
20:19:30  10  	  data_table_name => '&scoretable',
20:19:30  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:19:30  12  
20:19:30  13  	-- Normalize the data to be scored
20:19:30  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:19:30  15  	  norm_table_name => 'svmc_norm',
20:19:30  16  	  data_table_name => '&scoretable',
20:19:30  17  	  xform_view_name => 'svmc_apply_prep');
20:19:30  18  END;
20:19:30  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.18
20:19:30 SQL> 
20:19:30 SQL> -- Maybe I already collected a score for this prdate.
20:19:30 SQL> -- DELETE it if I did:
20:19:30 SQL> DELETE svm62scores
20:19:30   2  WHERE score > 0
20:19:30   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:19:30   4  -- I need to supply the target attribute name:
20:19:30   5  AND targ = '&1'
20:19:30   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gattn'

0 rows deleted.

Elapsed: 00:00:00.01
20:19:30 SQL> 
20:19:30 SQL> -- We do a drumroll here:
20:19:30 SQL> 
20:19:30 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:19:30   2  SELECT
20:19:30   3  prdate
20:19:30   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:19:30   5  ,sysdate
20:19:30   6  ,SUBSTR(prdate,1,7)pair
20:19:30   7  ,SUBSTR(prdate,-19)ydate
20:19:30   8  ,'&1'
20:19:30   9  FROM svmc_apply_prep
20:19:30  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gattn'

1 row created.

Elapsed: 00:00:00.05
20:19:30 SQL> @score1_5min.sql	      2010-11-18 13:50:01 aud_usd
20:19:30 SQL> --
20:19:30 SQL> -- score1_5min.sql
20:19:30 SQL> --
20:19:30 SQL> 
20:19:30 SQL> -- Demo:
20:19:30 SQL> -- @score1_5min.sql 2010-12-31 20:45:01 aud_usd
20:19:30 SQL> 
20:19:30 SQL> CREATE OR REPLACE VIEW sme AS
20:19:30   2  SELECT
20:19:30   3  prdate
20:19:30   4  ,NULL gatt
20:19:30   5  ,g00
20:19:30   6  ,g01
20:19:30   7  ,g02
20:19:30   8  ,g03
20:19:30   9  ,g04
20:19:30  10  ,g05
20:19:30  11  ,g06
20:19:30  12  ,g07
20:19:30  13  ,g08
20:19:30  14  ,g09
20:19:30  15  ,g10
20:19:30  16  ,g11
20:19:30  17  ,g12
20:19:30  18  ,g13
20:19:30  19  ,g14
20:19:30  20  ,g15
20:19:30  21  ,g16
20:19:30  22  ,g17
20:19:30  23  ,g18
20:19:30  24  ,g19
20:19:30  25  ,g20
20:19:30  26  ,g21
20:19:30  27  ,g22
20:19:30  28  ,g23
20:19:30  29  ,g24
20:19:30  30  ,g25
20:19:30  31  ,g26
20:19:30  32  ,g27
20:19:30  33  ,g28
20:19:30  34  ,g29
20:19:30  35  ,g30
20:19:30  36  ,g31
20:19:30  37  ,g32
20:19:30  38  ,g33
20:19:30  39  ,g34
20:19:30  40  ,g35
20:19:30  41  ,g36
20:19:30  42  ,g37
20:19:30  43  ,g38
20:19:30  44  ,g39
20:19:30  45  ,g40
20:19:30  46  ,g41
20:19:30  47  FROM modsrc
20:19:30  48  WHERE ydate = '&1'||' '||'&2'
20:19:30  49  AND pair = '&3'
20:19:30  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-11-18'||' '||'13:50:01'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.05
20:19:30 SQL> 
20:19:30 SQL> -- rpt
20:19:30 SQL> -- We should see just 1 row:
20:19:30 SQL> 
20:19:30 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.01
20:19:30 SQL> 
20:19:30 SQL> -- Build the model:
20:19:30 SQL> CREATE OR REPLACE VIEW bme AS
20:19:30   2  SELECT
20:19:30   3  prdate
20:19:30   4  ,gatt
20:19:30   5  ,g00
20:19:30   6  ,g01
20:19:30   7  ,g02
20:19:30   8  ,g03
20:19:30   9  ,g04
20:19:30  10  ,g05
20:19:30  11  ,g06
20:19:30  12  ,g07
20:19:30  13  ,g08
20:19:30  14  ,g09
20:19:30  15  ,g10
20:19:30  16  ,g11
20:19:30  17  ,g12
20:19:30  18  ,g13
20:19:30  19  ,g14
20:19:30  20  ,g15
20:19:30  21  ,g16
20:19:30  22  ,g17
20:19:30  23  ,g18
20:19:30  24  ,g19
20:19:30  25  ,g20
20:19:30  26  ,g21
20:19:30  27  ,g22
20:19:30  28  ,g23
20:19:30  29  ,g24
20:19:30  30  ,g25
20:19:30  31  ,g26
20:19:30  32  ,g27
20:19:30  33  ,g28
20:19:30  34  ,g29
20:19:30  35  ,g30
20:19:30  36  ,g31
20:19:30  37  ,g32
20:19:30  38  ,g33
20:19:30  39  ,g34
20:19:30  40  ,g35
20:19:30  41  ,g36
20:19:30  42  ,g37
20:19:30  43  ,g38
20:19:30  44  ,g39
20:19:30  45  ,g40
20:19:30  46  ,g41
20:19:30  47  FROM modsrc
20:19:30  48  WHERE gatt IN('nup','up')
20:19:30  49  -- Use only rows which are older than 1 day:
20:19:30  50  AND 1+ydate < '&1'||' '||'&2'
20:19:30  51  AND pair = '&3'
20:19:30  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-11-18'||' '||'13:50:01'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:19:30 SQL> 
20:19:30 SQL> -- rpt
20:19:30 SQL> 
20:19:30 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt;

GAT COUNT(PRDATE)
--- -------------
nup	     5497
up	     3426

Elapsed: 00:00:00.02
20:19:30 SQL> 
20:19:30 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-11-17 13:45:01

Elapsed: 00:00:00.01
20:19:30 SQL> 
20:19:30 SQL> -- Now build model from bme and score sme
20:19:30 SQL> @score1.sql gatt
20:19:30 SQL> --
20:19:30 SQL> -- score1.sql
20:19:30 SQL> --
20:19:30 SQL> 
20:19:30 SQL> -- I use this script to send 5 params to score.sql
20:19:30 SQL> -- which does the heavy lifting of creating an SVM model.
20:19:30 SQL> -- Then at the very end of this script I use the model
20:19:30 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:19:30 SQL> 
20:19:30 SQL> -- I call this script from 2 other scripts:
20:19:30 SQL> -- score1_5min.sql
20:19:30 SQL> -- score1_5min_gattn.sql
20:19:30 SQL> 
20:19:30 SQL> -- The 1st param is the name of the target attribute.
20:19:30 SQL> -- I like to call my target attributes either gatt or gattn.
20:19:30 SQL> 
20:19:30 SQL> -- Demo:
20:19:30 SQL> -- @score1.sql 'gatt'
20:19:30 SQL> -- @score1.sql 'gattn'
20:19:30 SQL> 
20:19:30 SQL> -- Now, I fill up svmc_apply_prep.
20:19:30 SQL> -- I use same model_name used in score.sql
20:19:30 SQL> DEFINE model_name = 'svmfx101'
20:19:30 SQL> DEFINE bldtable	= 'bme'
20:19:30 SQL> DEFINE scoretable = 'sme'
20:19:30 SQL> DEFINE case_id	= 'prdate'
20:19:30 SQL> -- Demo:
20:19:30 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:19:30 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:19:30 SQL> --
20:19:30 SQL> -- score.sql
20:19:30 SQL> --
20:19:30 SQL> 
20:19:30 SQL> -- usage: score.sql
20:19:30 SQL> 
20:19:30 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:19:30 SQL> 
20:19:30 SQL> -- DEFINE target	   = 'gatt'
20:19:30 SQL> -- DEFINE model_name = 'svmfx101'
20:19:30 SQL> -- DEFINE bldtable   = 'bme'
20:19:30 SQL> -- DEFINE scoretable = 'sme'
20:19:30 SQL> -- DEFINE case_id    = 'prdate'
20:19:30 SQL> 
20:19:30 SQL> DEFINE target	= '&1'
20:19:30 SQL> DEFINE model_name = '&2'
20:19:30 SQL> DEFINE bldtable	= '&3'
20:19:30 SQL> DEFINE scoretable = '&4'
20:19:30 SQL> DEFINE case_id	= '&5'
20:19:30 SQL> 
20:19:30 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:19:30 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:19:30 SQL> 
20:19:30 SQL> -- Builds an SVM model using pl/sql.
20:19:30 SQL> 
20:19:30 SQL> -----------------------------------------------------------------------
20:19:30 SQL> --			    BUILD THE MODEL
20:19:30 SQL> -----------------------------------------------------------------------
20:19:30 SQL> 
20:19:30 SQL> -- Cleanup old build data preparation objects for repeat runs
20:19:30 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.01
20:19:30 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:19:30 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:19:30 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.00
20:19:30 SQL> 
20:19:30 SQL> 
20:19:30 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:19:30 SQL> --
20:19:30 SQL> -- DROP	TABLE svmc_settings ;
20:19:30 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:19:30 SQL> -- DELETE svmc_settings;
20:19:30 SQL> 
20:19:30 SQL> -- The default classification algorithm is Naive Bayes. So override
20:19:30 SQL> -- this choice to SVM using a settings table.
20:19:30 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:19:30 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:19:30 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:19:30 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:19:30 SQL> -- models.
20:19:30 SQL> --
20:19:30 SQL> 
20:19:30 SQL> -- Do this once and then comment it out.
20:19:30 SQL> -- That makes script go faster.
20:19:30 SQL> -- BEGIN
20:19:30 SQL> -- -- Populate settings table
20:19:30 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:19:30 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:19:30 SQL> --
20:19:30 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:19:30 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:19:30 SQL> --
20:19:30 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:19:30 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:19:30 SQL> --   COMMIT;
20:19:30 SQL> -- END;
20:19:30 SQL> -- /
20:19:30 SQL> 
20:19:30 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.01
20:19:30 SQL> 
20:19:30 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:19:30   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:19:30   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:19:31 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:19:31   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:19:31   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:19:31 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:19:31   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:19:31   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:19:31 SQL> 
20:19:31 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:19:31   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:19:31   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:19:31 SQL> 
20:19:31 SQL> --------------------------------
20:19:31 SQL> -- PREPARE BUILD (TRAINING) DATA
20:19:31 SQL> --
20:19:31 SQL> 
20:19:31 SQL> -- 1. Missing Value treatment for all Predictors and
20:19:31 SQL> -- 2. Outlier Treatment and
20:19:31 SQL> -- 3. Normalization are performed below.
20:19:31 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:19:31 SQL> --    normalized here.
20:19:31 SQL> 
20:19:31 SQL> BEGIN
20:19:31   2  	-- Perform missing value treatment for all predictors
20:19:31   3  	-- create miss tables
20:19:31   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:19:31   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:19:31   6  
20:19:31   7  	-- populate miss tables
20:19:31   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:19:31   9  	  miss_table_name => 'svmc_miss_num',
20:19:31  10  	  data_table_name => '&bldtable',
20:19:31  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:19:31  12  
20:19:31  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:19:31  14  	  miss_table_name => 'svmc_miss_cat',
20:19:31  15  	  data_table_name => '&bldtable',
20:19:31  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:19:31  17  
20:19:31  18  	-- xform input data to replace missing values
20:19:31  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:19:31  20  	  miss_table_name => 'svmc_miss_num',
20:19:31  21  	  data_table_name => '&bldtable',
20:19:31  22  	  xform_view_name => 'xformed_build_miss_num');
20:19:31  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:19:31  24  	  miss_table_name => 'svmc_miss_cat',
20:19:31  25  	  data_table_name => '&bldtable',
20:19:31  26  	  xform_view_name => 'xformed_build_miss_cat');
20:19:31  27  
20:19:31  28  	-- Perform outlier treatment.
20:19:31  29  	-- create clip table
20:19:31  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:19:31  31  
20:19:31  32  	-- populate clip table
20:19:31  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:19:31  34  	  clip_table_name => 'svmc_clip',
20:19:31  35  	  data_table_name => '&bldtable',
20:19:31  36  	  tail_frac	  => 0.025,
20:19:31  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:19:31  38  
20:19:31  39  	-- xform input data to winsorized data
20:19:31  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:19:31  41  	  clip_table_name => 'svmc_clip',
20:19:31  42  	  data_table_name => '&bldtable',
20:19:31  43  	  xform_view_name => 'svmc_winsor');
20:19:31  44  
20:19:31  45  	-- create normalization table
20:19:31  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:19:31  47  
20:19:31  48  	-- populate normalization table based on winsorized data
20:19:31  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:19:31  50  	  norm_table_name => 'svmc_norm',
20:19:31  51  	  data_table_name => 'svmc_winsor',
20:19:31  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:19:31  53  
20:19:31  54  	-- normalize the original data
20:19:31  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:19:31  56  	  norm_table_name => 'svmc_norm',
20:19:31  57  	  data_table_name => '&bldtable',
20:19:31  58  	  xform_view_name => 'svmc_build_prep');
20:19:31  59  END;
20:19:31  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.56
20:19:32 SQL> 
20:19:32 SQL> ---------------------
20:19:32 SQL> -- CREATE A NEW MODEL
20:19:32 SQL> --
20:19:32 SQL> -- Cleanup old model with the same name for repeat runs
20:19:32 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:19:32   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:19:32   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.02
20:19:33 SQL> 
20:19:33 SQL> -- Build a new SVM Model
20:19:33 SQL> BEGIN
20:19:33   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:19:33   3  	  model_name	      => '&model_name',
20:19:33   4  	  mining_function     => dbms_data_mining.classification,
20:19:33   5  	  data_table_name     => 'svmc_build_prep',
20:19:33   6  	  case_id_column_name => '&case_id',
20:19:33   7  	  target_column_name  => '&target',
20:19:33   8  	  settings_table_name => 'svmc_settings');
20:19:33   9  END;
20:19:33  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:03.82
20:19:37 SQL> 
20:19:37 SQL> -----------------------------------------------------------------------
20:19:37 SQL> --			       APPLY/score THE MODEL
20:19:37 SQL> -----------------------------------------------------------------------
20:19:37 SQL> 
20:19:37 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:19:37 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:19:37   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:19:37   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:19:37 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:19:37   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:19:37   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:19:37 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:19:37   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:19:37   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:19:37 SQL> -----------------------
20:19:37 SQL> -- PREPARE SCORING DATA
20:19:37 SQL> --
20:19:37 SQL> -- If the data for model creation has been prepared, then the data
20:19:37 SQL> -- to be scored using the model must be prepared in the same manner
20:19:37 SQL> -- in order to obtain meaningful results.
20:19:37 SQL> --
20:19:37 SQL> -- 1. Missing Value treatment for all Predictors and
20:19:37 SQL> -- 2. Normalization
20:19:37 SQL> -- No outlier treatment will be performed during test and apply. The
20:19:37 SQL> -- normalization step is sufficient, since the normalization parameters
20:19:37 SQL> -- already capture the effects of outlier treatment done with build data.
20:19:37 SQL> --
20:19:37 SQL> BEGIN
20:19:37   2  	-- Xform Test data to replace missing values
20:19:37   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:19:37   4  	  miss_table_name => 'svmc_miss_num',
20:19:37   5  	  data_table_name => '&scoretable',
20:19:37   6  	  xform_view_name => 'xformed_apply_miss_num');
20:19:37   7  
20:19:37   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:19:37   9  	  miss_table_name => 'svmc_miss_cat',
20:19:37  10  	  data_table_name => '&scoretable',
20:19:37  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:19:37  12  
20:19:37  13  	-- Normalize the data to be scored
20:19:37  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:19:37  15  	  norm_table_name => 'svmc_norm',
20:19:37  16  	  data_table_name => '&scoretable',
20:19:37  17  	  xform_view_name => 'svmc_apply_prep');
20:19:37  18  END;
20:19:37  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.18
20:19:37 SQL> 
20:19:37 SQL> -- Maybe I already collected a score for this prdate.
20:19:37 SQL> -- DELETE it if I did:
20:19:37 SQL> DELETE svm62scores
20:19:37   2  WHERE score > 0
20:19:37   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:19:37   4  -- I need to supply the target attribute name:
20:19:37   5  AND targ = '&1'
20:19:37   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gatt'

0 rows deleted.

Elapsed: 00:00:00.02
20:19:37 SQL> 
20:19:37 SQL> -- We do a drumroll here:
20:19:37 SQL> 
20:19:37 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:19:37   2  SELECT
20:19:37   3  prdate
20:19:37   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:19:37   5  ,sysdate
20:19:37   6  ,SUBSTR(prdate,1,7)pair
20:19:37   7  ,SUBSTR(prdate,-19)ydate
20:19:37   8  ,'&1'
20:19:37   9  FROM svmc_apply_prep
20:19:37  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gatt'

1 row created.

Elapsed: 00:00:00.04
20:19:37 SQL> @score1_5min.sql	      2010-11-12 10:25:01 aud_usd
20:19:37 SQL> --
20:19:37 SQL> -- score1_5min.sql
20:19:37 SQL> --
20:19:37 SQL> 
20:19:37 SQL> -- Demo:
20:19:37 SQL> -- @score1_5min.sql 2010-12-31 20:45:01 aud_usd
20:19:37 SQL> 
20:19:37 SQL> CREATE OR REPLACE VIEW sme AS
20:19:37   2  SELECT
20:19:37   3  prdate
20:19:37   4  ,NULL gatt
20:19:37   5  ,g00
20:19:37   6  ,g01
20:19:37   7  ,g02
20:19:37   8  ,g03
20:19:37   9  ,g04
20:19:37  10  ,g05
20:19:37  11  ,g06
20:19:37  12  ,g07
20:19:37  13  ,g08
20:19:37  14  ,g09
20:19:37  15  ,g10
20:19:37  16  ,g11
20:19:37  17  ,g12
20:19:37  18  ,g13
20:19:37  19  ,g14
20:19:37  20  ,g15
20:19:37  21  ,g16
20:19:37  22  ,g17
20:19:37  23  ,g18
20:19:37  24  ,g19
20:19:37  25  ,g20
20:19:37  26  ,g21
20:19:37  27  ,g22
20:19:37  28  ,g23
20:19:37  29  ,g24
20:19:37  30  ,g25
20:19:37  31  ,g26
20:19:37  32  ,g27
20:19:37  33  ,g28
20:19:37  34  ,g29
20:19:37  35  ,g30
20:19:37  36  ,g31
20:19:37  37  ,g32
20:19:37  38  ,g33
20:19:37  39  ,g34
20:19:37  40  ,g35
20:19:37  41  ,g36
20:19:37  42  ,g37
20:19:37  43  ,g38
20:19:37  44  ,g39
20:19:37  45  ,g40
20:19:37  46  ,g41
20:19:37  47  FROM modsrc
20:19:37  48  WHERE ydate = '&1'||' '||'&2'
20:19:37  49  AND pair = '&3'
20:19:37  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-11-12'||' '||'10:25:01'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:19:37 SQL> 
20:19:37 SQL> -- rpt
20:19:37 SQL> -- We should see just 1 row:
20:19:37 SQL> 
20:19:37 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.02
20:19:37 SQL> 
20:19:37 SQL> -- Build the model:
20:19:37 SQL> CREATE OR REPLACE VIEW bme AS
20:19:37   2  SELECT
20:19:37   3  prdate
20:19:37   4  ,gatt
20:19:37   5  ,g00
20:19:37   6  ,g01
20:19:37   7  ,g02
20:19:37   8  ,g03
20:19:37   9  ,g04
20:19:37  10  ,g05
20:19:37  11  ,g06
20:19:37  12  ,g07
20:19:37  13  ,g08
20:19:37  14  ,g09
20:19:37  15  ,g10
20:19:37  16  ,g11
20:19:37  17  ,g12
20:19:37  18  ,g13
20:19:37  19  ,g14
20:19:37  20  ,g15
20:19:37  21  ,g16
20:19:37  22  ,g17
20:19:37  23  ,g18
20:19:37  24  ,g19
20:19:37  25  ,g20
20:19:37  26  ,g21
20:19:37  27  ,g22
20:19:37  28  ,g23
20:19:37  29  ,g24
20:19:37  30  ,g25
20:19:37  31  ,g26
20:19:37  32  ,g27
20:19:37  33  ,g28
20:19:37  34  ,g29
20:19:37  35  ,g30
20:19:37  36  ,g31
20:19:37  37  ,g32
20:19:37  38  ,g33
20:19:37  39  ,g34
20:19:37  40  ,g35
20:19:37  41  ,g36
20:19:37  42  ,g37
20:19:37  43  ,g38
20:19:37  44  ,g39
20:19:37  45  ,g40
20:19:37  46  ,g41
20:19:37  47  FROM modsrc
20:19:37  48  WHERE gatt IN('nup','up')
20:19:37  49  -- Use only rows which are older than 1 day:
20:19:37  50  AND 1+ydate < '&1'||' '||'&2'
20:19:37  51  AND pair = '&3'
20:19:37  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-11-12'||' '||'10:25:01'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.05
20:19:37 SQL> 
20:19:37 SQL> -- rpt
20:19:37 SQL> 
20:19:37 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt;

GAT COUNT(PRDATE)
--- -------------
nup	     4667
up	     3051

Elapsed: 00:00:00.03
20:19:37 SQL> 
20:19:37 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-11-11 10:20:01

Elapsed: 00:00:00.01
20:19:37 SQL> 
20:19:37 SQL> -- Now build model from bme and score sme
20:19:37 SQL> @score1.sql gatt
20:19:37 SQL> --
20:19:37 SQL> -- score1.sql
20:19:37 SQL> --
20:19:37 SQL> 
20:19:37 SQL> -- I use this script to send 5 params to score.sql
20:19:37 SQL> -- which does the heavy lifting of creating an SVM model.
20:19:37 SQL> -- Then at the very end of this script I use the model
20:19:37 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:19:37 SQL> 
20:19:37 SQL> -- I call this script from 2 other scripts:
20:19:37 SQL> -- score1_5min.sql
20:19:37 SQL> -- score1_5min_gattn.sql
20:19:37 SQL> 
20:19:37 SQL> -- The 1st param is the name of the target attribute.
20:19:37 SQL> -- I like to call my target attributes either gatt or gattn.
20:19:37 SQL> 
20:19:37 SQL> -- Demo:
20:19:37 SQL> -- @score1.sql 'gatt'
20:19:37 SQL> -- @score1.sql 'gattn'
20:19:37 SQL> 
20:19:37 SQL> -- Now, I fill up svmc_apply_prep.
20:19:37 SQL> -- I use same model_name used in score.sql
20:19:37 SQL> DEFINE model_name = 'svmfx101'
20:19:37 SQL> DEFINE bldtable	= 'bme'
20:19:37 SQL> DEFINE scoretable = 'sme'
20:19:37 SQL> DEFINE case_id	= 'prdate'
20:19:37 SQL> -- Demo:
20:19:37 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:19:37 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:19:37 SQL> --
20:19:38 SQL> -- score.sql
20:19:38 SQL> --
20:19:38 SQL> 
20:19:38 SQL> -- usage: score.sql
20:19:38 SQL> 
20:19:38 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:19:38 SQL> 
20:19:38 SQL> -- DEFINE target	   = 'gatt'
20:19:38 SQL> -- DEFINE model_name = 'svmfx101'
20:19:38 SQL> -- DEFINE bldtable   = 'bme'
20:19:38 SQL> -- DEFINE scoretable = 'sme'
20:19:38 SQL> -- DEFINE case_id    = 'prdate'
20:19:38 SQL> 
20:19:38 SQL> DEFINE target	= '&1'
20:19:38 SQL> DEFINE model_name = '&2'
20:19:38 SQL> DEFINE bldtable	= '&3'
20:19:38 SQL> DEFINE scoretable = '&4'
20:19:38 SQL> DEFINE case_id	= '&5'
20:19:38 SQL> 
20:19:38 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:19:38 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:19:38 SQL> 
20:19:38 SQL> -- Builds an SVM model using pl/sql.
20:19:38 SQL> 
20:19:38 SQL> -----------------------------------------------------------------------
20:19:38 SQL> --			    BUILD THE MODEL
20:19:38 SQL> -----------------------------------------------------------------------
20:19:38 SQL> 
20:19:38 SQL> -- Cleanup old build data preparation objects for repeat runs
20:19:38 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.00
20:19:38 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:19:38 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:19:38 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.00
20:19:38 SQL> 
20:19:38 SQL> 
20:19:38 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:19:38 SQL> --
20:19:38 SQL> -- DROP	TABLE svmc_settings ;
20:19:38 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:19:38 SQL> -- DELETE svmc_settings;
20:19:38 SQL> 
20:19:38 SQL> -- The default classification algorithm is Naive Bayes. So override
20:19:38 SQL> -- this choice to SVM using a settings table.
20:19:38 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:19:38 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:19:38 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:19:38 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:19:38 SQL> -- models.
20:19:38 SQL> --
20:19:38 SQL> 
20:19:38 SQL> -- Do this once and then comment it out.
20:19:38 SQL> -- That makes script go faster.
20:19:38 SQL> -- BEGIN
20:19:38 SQL> -- -- Populate settings table
20:19:38 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:19:38 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:19:38 SQL> --
20:19:38 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:19:38 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:19:38 SQL> --
20:19:38 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:19:38 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:19:38 SQL> --   COMMIT;
20:19:38 SQL> -- END;
20:19:38 SQL> -- /
20:19:38 SQL> 
20:19:38 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:19:38 SQL> 
20:19:38 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:19:38   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:19:38   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
20:19:38 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:19:38   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:19:38   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:19:38 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:19:38   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:19:38   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:19:38 SQL> 
20:19:38 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:19:38   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:19:38   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:19:38 SQL> 
20:19:38 SQL> --------------------------------
20:19:38 SQL> -- PREPARE BUILD (TRAINING) DATA
20:19:38 SQL> --
20:19:38 SQL> 
20:19:38 SQL> -- 1. Missing Value treatment for all Predictors and
20:19:38 SQL> -- 2. Outlier Treatment and
20:19:38 SQL> -- 3. Normalization are performed below.
20:19:38 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:19:38 SQL> --    normalized here.
20:19:38 SQL> 
20:19:38 SQL> BEGIN
20:19:38   2  	-- Perform missing value treatment for all predictors
20:19:38   3  	-- create miss tables
20:19:38   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:19:38   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:19:38   6  
20:19:38   7  	-- populate miss tables
20:19:38   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:19:38   9  	  miss_table_name => 'svmc_miss_num',
20:19:38  10  	  data_table_name => '&bldtable',
20:19:38  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:19:38  12  
20:19:38  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:19:38  14  	  miss_table_name => 'svmc_miss_cat',
20:19:38  15  	  data_table_name => '&bldtable',
20:19:38  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:19:38  17  
20:19:38  18  	-- xform input data to replace missing values
20:19:38  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:19:38  20  	  miss_table_name => 'svmc_miss_num',
20:19:38  21  	  data_table_name => '&bldtable',
20:19:38  22  	  xform_view_name => 'xformed_build_miss_num');
20:19:38  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:19:38  24  	  miss_table_name => 'svmc_miss_cat',
20:19:38  25  	  data_table_name => '&bldtable',
20:19:38  26  	  xform_view_name => 'xformed_build_miss_cat');
20:19:38  27  
20:19:38  28  	-- Perform outlier treatment.
20:19:38  29  	-- create clip table
20:19:38  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:19:38  31  
20:19:38  32  	-- populate clip table
20:19:38  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:19:38  34  	  clip_table_name => 'svmc_clip',
20:19:38  35  	  data_table_name => '&bldtable',
20:19:38  36  	  tail_frac	  => 0.025,
20:19:38  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:19:38  38  
20:19:38  39  	-- xform input data to winsorized data
20:19:38  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:19:38  41  	  clip_table_name => 'svmc_clip',
20:19:38  42  	  data_table_name => '&bldtable',
20:19:38  43  	  xform_view_name => 'svmc_winsor');
20:19:38  44  
20:19:38  45  	-- create normalization table
20:19:38  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:19:38  47  
20:19:38  48  	-- populate normalization table based on winsorized data
20:19:38  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:19:38  50  	  norm_table_name => 'svmc_norm',
20:19:38  51  	  data_table_name => 'svmc_winsor',
20:19:38  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:19:38  53  
20:19:38  54  	-- normalize the original data
20:19:38  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:19:38  56  	  norm_table_name => 'svmc_norm',
20:19:38  57  	  data_table_name => '&bldtable',
20:19:38  58  	  xform_view_name => 'svmc_build_prep');
20:19:38  59  END;
20:19:38  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.47
20:19:39 SQL> 
20:19:39 SQL> ---------------------
20:19:39 SQL> -- CREATE A NEW MODEL
20:19:39 SQL> --
20:19:39 SQL> -- Cleanup old model with the same name for repeat runs
20:19:39 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:19:39   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:19:39   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.95
20:19:40 SQL> 
20:19:40 SQL> -- Build a new SVM Model
20:19:40 SQL> BEGIN
20:19:40   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:19:40   3  	  model_name	      => '&model_name',
20:19:40   4  	  mining_function     => dbms_data_mining.classification,
20:19:40   5  	  data_table_name     => 'svmc_build_prep',
20:19:40   6  	  case_id_column_name => '&case_id',
20:19:40   7  	  target_column_name  => '&target',
20:19:40   8  	  settings_table_name => 'svmc_settings');
20:19:40   9  END;
20:19:40  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:02.98
20:19:43 SQL> 
20:19:43 SQL> -----------------------------------------------------------------------
20:19:43 SQL> --			       APPLY/score THE MODEL
20:19:43 SQL> -----------------------------------------------------------------------
20:19:43 SQL> 
20:19:43 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:19:43 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:19:43   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:19:43   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:19:43 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:19:43   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:19:43   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:19:43 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:19:43   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:19:43   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:19:43 SQL> -----------------------
20:19:43 SQL> -- PREPARE SCORING DATA
20:19:43 SQL> --
20:19:43 SQL> -- If the data for model creation has been prepared, then the data
20:19:43 SQL> -- to be scored using the model must be prepared in the same manner
20:19:43 SQL> -- in order to obtain meaningful results.
20:19:43 SQL> --
20:19:43 SQL> -- 1. Missing Value treatment for all Predictors and
20:19:43 SQL> -- 2. Normalization
20:19:43 SQL> -- No outlier treatment will be performed during test and apply. The
20:19:43 SQL> -- normalization step is sufficient, since the normalization parameters
20:19:43 SQL> -- already capture the effects of outlier treatment done with build data.
20:19:43 SQL> --
20:19:43 SQL> BEGIN
20:19:43   2  	-- Xform Test data to replace missing values
20:19:43   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:19:43   4  	  miss_table_name => 'svmc_miss_num',
20:19:43   5  	  data_table_name => '&scoretable',
20:19:43   6  	  xform_view_name => 'xformed_apply_miss_num');
20:19:43   7  
20:19:43   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:19:43   9  	  miss_table_name => 'svmc_miss_cat',
20:19:43  10  	  data_table_name => '&scoretable',
20:19:43  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:19:43  12  
20:19:43  13  	-- Normalize the data to be scored
20:19:43  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:19:43  15  	  norm_table_name => 'svmc_norm',
20:19:43  16  	  data_table_name => '&scoretable',
20:19:43  17  	  xform_view_name => 'svmc_apply_prep');
20:19:43  18  END;
20:19:43  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.17
20:19:43 SQL> 
20:19:43 SQL> -- Maybe I already collected a score for this prdate.
20:19:43 SQL> -- DELETE it if I did:
20:19:43 SQL> DELETE svm62scores
20:19:43   2  WHERE score > 0
20:19:43   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:19:43   4  -- I need to supply the target attribute name:
20:19:43   5  AND targ = '&1'
20:19:43   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gatt'

0 rows deleted.

Elapsed: 00:00:00.01
20:19:43 SQL> 
20:19:43 SQL> -- We do a drumroll here:
20:19:43 SQL> 
20:19:43 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:19:43   2  SELECT
20:19:43   3  prdate
20:19:43   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:19:43   5  ,sysdate
20:19:43   6  ,SUBSTR(prdate,1,7)pair
20:19:43   7  ,SUBSTR(prdate,-19)ydate
20:19:43   8  ,'&1'
20:19:43   9  FROM svmc_apply_prep
20:19:43  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gatt'

1 row created.

Elapsed: 00:00:00.05
20:19:43 SQL> @score1_5min.sql	      2010-12-03 15:25:00 aud_usd
20:19:43 SQL> --
20:19:43 SQL> -- score1_5min.sql
20:19:43 SQL> --
20:19:43 SQL> 
20:19:43 SQL> -- Demo:
20:19:43 SQL> -- @score1_5min.sql 2010-12-31 20:45:01 aud_usd
20:19:43 SQL> 
20:19:43 SQL> CREATE OR REPLACE VIEW sme AS
20:19:43   2  SELECT
20:19:43   3  prdate
20:19:43   4  ,NULL gatt
20:19:43   5  ,g00
20:19:43   6  ,g01
20:19:43   7  ,g02
20:19:43   8  ,g03
20:19:43   9  ,g04
20:19:43  10  ,g05
20:19:43  11  ,g06
20:19:43  12  ,g07
20:19:43  13  ,g08
20:19:43  14  ,g09
20:19:43  15  ,g10
20:19:43  16  ,g11
20:19:43  17  ,g12
20:19:43  18  ,g13
20:19:43  19  ,g14
20:19:43  20  ,g15
20:19:43  21  ,g16
20:19:43  22  ,g17
20:19:43  23  ,g18
20:19:43  24  ,g19
20:19:43  25  ,g20
20:19:43  26  ,g21
20:19:43  27  ,g22
20:19:43  28  ,g23
20:19:43  29  ,g24
20:19:43  30  ,g25
20:19:43  31  ,g26
20:19:43  32  ,g27
20:19:43  33  ,g28
20:19:43  34  ,g29
20:19:43  35  ,g30
20:19:43  36  ,g31
20:19:43  37  ,g32
20:19:43  38  ,g33
20:19:43  39  ,g34
20:19:43  40  ,g35
20:19:43  41  ,g36
20:19:43  42  ,g37
20:19:43  43  ,g38
20:19:43  44  ,g39
20:19:43  45  ,g40
20:19:43  46  ,g41
20:19:43  47  FROM modsrc
20:19:43  48  WHERE ydate = '&1'||' '||'&2'
20:19:43  49  AND pair = '&3'
20:19:43  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-12-03'||' '||'15:25:00'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.05
20:19:43 SQL> 
20:19:43 SQL> -- rpt
20:19:43 SQL> -- We should see just 1 row:
20:19:43 SQL> 
20:19:43 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.02
20:19:43 SQL> 
20:19:43 SQL> -- Build the model:
20:19:43 SQL> CREATE OR REPLACE VIEW bme AS
20:19:43   2  SELECT
20:19:43   3  prdate
20:19:43   4  ,gatt
20:19:43   5  ,g00
20:19:43   6  ,g01
20:19:43   7  ,g02
20:19:43   8  ,g03
20:19:43   9  ,g04
20:19:43  10  ,g05
20:19:43  11  ,g06
20:19:43  12  ,g07
20:19:43  13  ,g08
20:19:43  14  ,g09
20:19:43  15  ,g10
20:19:43  16  ,g11
20:19:43  17  ,g12
20:19:43  18  ,g13
20:19:43  19  ,g14
20:19:43  20  ,g15
20:19:43  21  ,g16
20:19:43  22  ,g17
20:19:43  23  ,g18
20:19:43  24  ,g19
20:19:43  25  ,g20
20:19:43  26  ,g21
20:19:43  27  ,g22
20:19:43  28  ,g23
20:19:43  29  ,g24
20:19:43  30  ,g25
20:19:43  31  ,g26
20:19:43  32  ,g27
20:19:43  33  ,g28
20:19:43  34  ,g29
20:19:43  35  ,g30
20:19:43  36  ,g31
20:19:43  37  ,g32
20:19:43  38  ,g33
20:19:43  39  ,g34
20:19:43  40  ,g35
20:19:43  41  ,g36
20:19:43  42  ,g37
20:19:43  43  ,g38
20:19:43  44  ,g39
20:19:43  45  ,g40
20:19:43  46  ,g41
20:19:43  47  FROM modsrc
20:19:43  48  WHERE gatt IN('nup','up')
20:19:43  49  -- Use only rows which are older than 1 day:
20:19:43  50  AND 1+ydate < '&1'||' '||'&2'
20:19:43  51  AND pair = '&3'
20:19:43  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-12-03'||' '||'15:25:00'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.05
20:19:43 SQL> 
20:19:43 SQL> -- rpt
20:19:43 SQL> 
20:19:43 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt;

GAT COUNT(PRDATE)
--- -------------
nup	     7467
up	     4643

Elapsed: 00:00:00.03
20:19:44 SQL> 
20:19:44 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-12-02 15:20:00

Elapsed: 00:00:00.01
20:19:44 SQL> 
20:19:44 SQL> -- Now build model from bme and score sme
20:19:44 SQL> @score1.sql gatt
20:19:44 SQL> --
20:19:44 SQL> -- score1.sql
20:19:44 SQL> --
20:19:44 SQL> 
20:19:44 SQL> -- I use this script to send 5 params to score.sql
20:19:44 SQL> -- which does the heavy lifting of creating an SVM model.
20:19:44 SQL> -- Then at the very end of this script I use the model
20:19:44 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:19:44 SQL> 
20:19:44 SQL> -- I call this script from 2 other scripts:
20:19:44 SQL> -- score1_5min.sql
20:19:44 SQL> -- score1_5min_gattn.sql
20:19:44 SQL> 
20:19:44 SQL> -- The 1st param is the name of the target attribute.
20:19:44 SQL> -- I like to call my target attributes either gatt or gattn.
20:19:44 SQL> 
20:19:44 SQL> -- Demo:
20:19:44 SQL> -- @score1.sql 'gatt'
20:19:44 SQL> -- @score1.sql 'gattn'
20:19:44 SQL> 
20:19:44 SQL> -- Now, I fill up svmc_apply_prep.
20:19:44 SQL> -- I use same model_name used in score.sql
20:19:44 SQL> DEFINE model_name = 'svmfx101'
20:19:44 SQL> DEFINE bldtable	= 'bme'
20:19:44 SQL> DEFINE scoretable = 'sme'
20:19:44 SQL> DEFINE case_id	= 'prdate'
20:19:44 SQL> -- Demo:
20:19:44 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:19:44 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:19:44 SQL> --
20:19:44 SQL> -- score.sql
20:19:44 SQL> --
20:19:44 SQL> 
20:19:44 SQL> -- usage: score.sql
20:19:44 SQL> 
20:19:44 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:19:44 SQL> 
20:19:44 SQL> -- DEFINE target	   = 'gatt'
20:19:44 SQL> -- DEFINE model_name = 'svmfx101'
20:19:44 SQL> -- DEFINE bldtable   = 'bme'
20:19:44 SQL> -- DEFINE scoretable = 'sme'
20:19:44 SQL> -- DEFINE case_id    = 'prdate'
20:19:44 SQL> 
20:19:44 SQL> DEFINE target	= '&1'
20:19:44 SQL> DEFINE model_name = '&2'
20:19:44 SQL> DEFINE bldtable	= '&3'
20:19:44 SQL> DEFINE scoretable = '&4'
20:19:44 SQL> DEFINE case_id	= '&5'
20:19:44 SQL> 
20:19:44 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:19:44 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:19:44 SQL> 
20:19:44 SQL> -- Builds an SVM model using pl/sql.
20:19:44 SQL> 
20:19:44 SQL> -----------------------------------------------------------------------
20:19:44 SQL> --			    BUILD THE MODEL
20:19:44 SQL> -----------------------------------------------------------------------
20:19:44 SQL> 
20:19:44 SQL> -- Cleanup old build data preparation objects for repeat runs
20:19:44 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.00
20:19:44 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:19:44 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:19:44 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.01
20:19:44 SQL> 
20:19:44 SQL> 
20:19:44 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:19:44 SQL> --
20:19:44 SQL> -- DROP	TABLE svmc_settings ;
20:19:44 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:19:44 SQL> -- DELETE svmc_settings;
20:19:44 SQL> 
20:19:44 SQL> -- The default classification algorithm is Naive Bayes. So override
20:19:44 SQL> -- this choice to SVM using a settings table.
20:19:44 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:19:44 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:19:44 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:19:44 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:19:44 SQL> -- models.
20:19:44 SQL> --
20:19:44 SQL> 
20:19:44 SQL> -- Do this once and then comment it out.
20:19:44 SQL> -- That makes script go faster.
20:19:44 SQL> -- BEGIN
20:19:44 SQL> -- -- Populate settings table
20:19:44 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:19:44 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:19:44 SQL> --
20:19:44 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:19:44 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:19:44 SQL> --
20:19:44 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:19:44 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:19:44 SQL> --   COMMIT;
20:19:44 SQL> -- END;
20:19:44 SQL> -- /
20:19:44 SQL> 
20:19:44 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:19:44 SQL> 
20:19:44 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:19:44   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:19:44   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:19:44 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:19:44   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:19:44   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
20:19:44 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:19:44   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:19:44   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:19:44 SQL> 
20:19:44 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:19:44   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:19:44   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:19:44 SQL> 
20:19:44 SQL> --------------------------------
20:19:44 SQL> -- PREPARE BUILD (TRAINING) DATA
20:19:44 SQL> --
20:19:44 SQL> 
20:19:44 SQL> -- 1. Missing Value treatment for all Predictors and
20:19:44 SQL> -- 2. Outlier Treatment and
20:19:44 SQL> -- 3. Normalization are performed below.
20:19:44 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:19:44 SQL> --    normalized here.
20:19:44 SQL> 
20:19:44 SQL> BEGIN
20:19:44   2  	-- Perform missing value treatment for all predictors
20:19:44   3  	-- create miss tables
20:19:44   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:19:44   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:19:44   6  
20:19:44   7  	-- populate miss tables
20:19:44   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:19:44   9  	  miss_table_name => 'svmc_miss_num',
20:19:44  10  	  data_table_name => '&bldtable',
20:19:44  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:19:44  12  
20:19:44  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:19:44  14  	  miss_table_name => 'svmc_miss_cat',
20:19:44  15  	  data_table_name => '&bldtable',
20:19:44  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:19:44  17  
20:19:44  18  	-- xform input data to replace missing values
20:19:44  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:19:44  20  	  miss_table_name => 'svmc_miss_num',
20:19:44  21  	  data_table_name => '&bldtable',
20:19:44  22  	  xform_view_name => 'xformed_build_miss_num');
20:19:44  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:19:44  24  	  miss_table_name => 'svmc_miss_cat',
20:19:44  25  	  data_table_name => '&bldtable',
20:19:44  26  	  xform_view_name => 'xformed_build_miss_cat');
20:19:44  27  
20:19:44  28  	-- Perform outlier treatment.
20:19:44  29  	-- create clip table
20:19:44  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:19:44  31  
20:19:44  32  	-- populate clip table
20:19:44  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:19:44  34  	  clip_table_name => 'svmc_clip',
20:19:44  35  	  data_table_name => '&bldtable',
20:19:44  36  	  tail_frac	  => 0.025,
20:19:44  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:19:44  38  
20:19:44  39  	-- xform input data to winsorized data
20:19:44  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:19:44  41  	  clip_table_name => 'svmc_clip',
20:19:44  42  	  data_table_name => '&bldtable',
20:19:44  43  	  xform_view_name => 'svmc_winsor');
20:19:44  44  
20:19:44  45  	-- create normalization table
20:19:44  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:19:44  47  
20:19:44  48  	-- populate normalization table based on winsorized data
20:19:44  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:19:44  50  	  norm_table_name => 'svmc_norm',
20:19:44  51  	  data_table_name => 'svmc_winsor',
20:19:44  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:19:44  53  
20:19:44  54  	-- normalize the original data
20:19:44  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:19:44  56  	  norm_table_name => 'svmc_norm',
20:19:44  57  	  data_table_name => '&bldtable',
20:19:44  58  	  xform_view_name => 'svmc_build_prep');
20:19:44  59  END;
20:19:44  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.81
20:19:45 SQL> 
20:19:45 SQL> ---------------------
20:19:45 SQL> -- CREATE A NEW MODEL
20:19:45 SQL> --
20:19:45 SQL> -- Cleanup old model with the same name for repeat runs
20:19:45 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:19:45   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:19:45   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.22
20:19:47 SQL> 
20:19:47 SQL> -- Build a new SVM Model
20:19:47 SQL> BEGIN
20:19:47   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:19:47   3  	  model_name	      => '&model_name',
20:19:47   4  	  mining_function     => dbms_data_mining.classification,
20:19:47   5  	  data_table_name     => 'svmc_build_prep',
20:19:47   6  	  case_id_column_name => '&case_id',
20:19:47   7  	  target_column_name  => '&target',
20:19:47   8  	  settings_table_name => 'svmc_settings');
20:19:47   9  END;
20:19:47  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:05.09
20:19:52 SQL> 
20:19:52 SQL> -----------------------------------------------------------------------
20:19:52 SQL> --			       APPLY/score THE MODEL
20:19:52 SQL> -----------------------------------------------------------------------
20:19:52 SQL> 
20:19:52 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:19:52 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:19:52   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:19:52   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:19:52 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:19:52   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:19:52   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:19:52 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:19:52   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:19:52   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:19:52 SQL> -----------------------
20:19:52 SQL> -- PREPARE SCORING DATA
20:19:52 SQL> --
20:19:52 SQL> -- If the data for model creation has been prepared, then the data
20:19:52 SQL> -- to be scored using the model must be prepared in the same manner
20:19:52 SQL> -- in order to obtain meaningful results.
20:19:52 SQL> --
20:19:52 SQL> -- 1. Missing Value treatment for all Predictors and
20:19:52 SQL> -- 2. Normalization
20:19:52 SQL> -- No outlier treatment will be performed during test and apply. The
20:19:52 SQL> -- normalization step is sufficient, since the normalization parameters
20:19:52 SQL> -- already capture the effects of outlier treatment done with build data.
20:19:52 SQL> --
20:19:52 SQL> BEGIN
20:19:52   2  	-- Xform Test data to replace missing values
20:19:52   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:19:52   4  	  miss_table_name => 'svmc_miss_num',
20:19:52   5  	  data_table_name => '&scoretable',
20:19:52   6  	  xform_view_name => 'xformed_apply_miss_num');
20:19:52   7  
20:19:52   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:19:52   9  	  miss_table_name => 'svmc_miss_cat',
20:19:52  10  	  data_table_name => '&scoretable',
20:19:52  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:19:52  12  
20:19:52  13  	-- Normalize the data to be scored
20:19:52  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:19:52  15  	  norm_table_name => 'svmc_norm',
20:19:52  16  	  data_table_name => '&scoretable',
20:19:52  17  	  xform_view_name => 'svmc_apply_prep');
20:19:52  18  END;
20:19:52  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.18
20:19:52 SQL> 
20:19:52 SQL> -- Maybe I already collected a score for this prdate.
20:19:52 SQL> -- DELETE it if I did:
20:19:52 SQL> DELETE svm62scores
20:19:52   2  WHERE score > 0
20:19:52   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:19:52   4  -- I need to supply the target attribute name:
20:19:52   5  AND targ = '&1'
20:19:52   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gatt'

0 rows deleted.

Elapsed: 00:00:00.02
20:19:52 SQL> 
20:19:52 SQL> -- We do a drumroll here:
20:19:52 SQL> 
20:19:52 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:19:52   2  SELECT
20:19:52   3  prdate
20:19:52   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:19:52   5  ,sysdate
20:19:52   6  ,SUBSTR(prdate,1,7)pair
20:19:52   7  ,SUBSTR(prdate,-19)ydate
20:19:52   8  ,'&1'
20:19:52   9  FROM svmc_apply_prep
20:19:52  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gatt'

1 row created.

Elapsed: 00:00:00.05
20:19:52 SQL> @score1_5min_gattn.sql	2010-11-10 01:40:01 aud_usd
20:19:52 SQL> --
20:19:52 SQL> -- score1_5min_gattn.sql
20:19:52 SQL> --
20:19:52 SQL> 
20:19:52 SQL> -- Demo:
20:19:52 SQL> -- @score1_5min_gattn.sql 2010-12-31 20:45:01 aud_usd
20:19:52 SQL> 
20:19:52 SQL> CREATE OR REPLACE VIEW sme AS
20:19:52   2  SELECT
20:19:52   3  prdate
20:19:52   4  ,NULL gattn
20:19:52   5  ,g00
20:19:52   6  ,g01
20:19:52   7  ,g02
20:19:52   8  ,g03
20:19:52   9  ,g04
20:19:52  10  ,g05
20:19:52  11  ,g06
20:19:52  12  ,g07
20:19:52  13  ,g08
20:19:52  14  ,g09
20:19:52  15  ,g10
20:19:52  16  ,g11
20:19:52  17  ,g12
20:19:52  18  ,g13
20:19:52  19  ,g14
20:19:52  20  ,g15
20:19:52  21  ,g16
20:19:52  22  ,g17
20:19:52  23  ,g18
20:19:52  24  ,g19
20:19:52  25  ,g20
20:19:52  26  ,g21
20:19:52  27  ,g22
20:19:52  28  ,g23
20:19:52  29  ,g24
20:19:52  30  ,g25
20:19:52  31  ,g26
20:19:52  32  ,g27
20:19:52  33  ,g28
20:19:52  34  ,g29
20:19:52  35  ,g30
20:19:52  36  ,g31
20:19:52  37  ,g32
20:19:52  38  ,g33
20:19:52  39  ,g34
20:19:52  40  ,g35
20:19:52  41  ,g36
20:19:52  42  ,g37
20:19:52  43  ,g38
20:19:52  44  ,g39
20:19:52  45  ,g40
20:19:52  46  ,g41
20:19:52  47  FROM modsrc
20:19:52  48  WHERE ydate = '&1'||' '||'&2'
20:19:52  49  AND pair = '&3'
20:19:52  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-11-10'||' '||'01:40:01'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:19:52 SQL> 
20:19:52 SQL> -- rpt
20:19:52 SQL> -- We should see just 1 row:
20:19:52 SQL> 
20:19:52 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.01
20:19:52 SQL> 
20:19:52 SQL> -- Build the model:
20:19:52 SQL> CREATE OR REPLACE VIEW bme AS
20:19:52   2  SELECT
20:19:52   3  prdate
20:19:52   4  ,gattn
20:19:52   5  ,g00
20:19:52   6  ,g01
20:19:52   7  ,g02
20:19:52   8  ,g03
20:19:52   9  ,g04
20:19:52  10  ,g05
20:19:52  11  ,g06
20:19:52  12  ,g07
20:19:52  13  ,g08
20:19:52  14  ,g09
20:19:52  15  ,g10
20:19:52  16  ,g11
20:19:52  17  ,g12
20:19:52  18  ,g13
20:19:52  19  ,g14
20:19:52  20  ,g15
20:19:52  21  ,g16
20:19:52  22  ,g17
20:19:52  23  ,g18
20:19:52  24  ,g19
20:19:52  25  ,g20
20:19:52  26  ,g21
20:19:52  27  ,g22
20:19:52  28  ,g23
20:19:52  29  ,g24
20:19:52  30  ,g25
20:19:52  31  ,g26
20:19:52  32  ,g27
20:19:52  33  ,g28
20:19:52  34  ,g29
20:19:52  35  ,g30
20:19:52  36  ,g31
20:19:52  37  ,g32
20:19:52  38  ,g33
20:19:52  39  ,g34
20:19:52  40  ,g35
20:19:52  41  ,g36
20:19:52  42  ,g37
20:19:52  43  ,g38
20:19:52  44  ,g39
20:19:52  45  ,g40
20:19:52  46  ,g41
20:19:52  47  FROM modsrc
20:19:52  48  WHERE gattn IN('nup','up')
20:19:52  49  -- Use only rows which are older than 1 day:
20:19:52  50  AND 1+ydate < '&1'||' '||'&2'
20:19:52  51  AND pair = '&3'
20:19:52  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-11-10'||' '||'01:40:01'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:19:52 SQL> 
20:19:52 SQL> -- rpt
20:19:52 SQL> 
20:19:52 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	     4668
up	     2369

Elapsed: 00:00:00.02
20:19:52 SQL> 
20:19:52 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-11-09 01:35:01

Elapsed: 00:00:00.02
20:19:52 SQL> 
20:19:52 SQL> -- Now build model from bme and score sme
20:19:52 SQL> @score1.sql gattn
20:19:52 SQL> --
20:19:52 SQL> -- score1.sql
20:19:52 SQL> --
20:19:52 SQL> 
20:19:52 SQL> -- I use this script to send 5 params to score.sql
20:19:52 SQL> -- which does the heavy lifting of creating an SVM model.
20:19:52 SQL> -- Then at the very end of this script I use the model
20:19:52 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:19:52 SQL> 
20:19:52 SQL> -- I call this script from 2 other scripts:
20:19:52 SQL> -- score1_5min.sql
20:19:52 SQL> -- score1_5min_gattn.sql
20:19:52 SQL> 
20:19:52 SQL> -- The 1st param is the name of the target attribute.
20:19:52 SQL> -- I like to call my target attributes either gatt or gattn.
20:19:52 SQL> 
20:19:52 SQL> -- Demo:
20:19:52 SQL> -- @score1.sql 'gatt'
20:19:52 SQL> -- @score1.sql 'gattn'
20:19:52 SQL> 
20:19:52 SQL> -- Now, I fill up svmc_apply_prep.
20:19:52 SQL> -- I use same model_name used in score.sql
20:19:52 SQL> DEFINE model_name = 'svmfx101'
20:19:52 SQL> DEFINE bldtable	= 'bme'
20:19:52 SQL> DEFINE scoretable = 'sme'
20:19:52 SQL> DEFINE case_id	= 'prdate'
20:19:52 SQL> -- Demo:
20:19:52 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:19:52 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:19:52 SQL> --
20:19:52 SQL> -- score.sql
20:19:52 SQL> --
20:19:52 SQL> 
20:19:52 SQL> -- usage: score.sql
20:19:52 SQL> 
20:19:52 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:19:52 SQL> 
20:19:52 SQL> -- DEFINE target	   = 'gatt'
20:19:52 SQL> -- DEFINE model_name = 'svmfx101'
20:19:52 SQL> -- DEFINE bldtable   = 'bme'
20:19:52 SQL> -- DEFINE scoretable = 'sme'
20:19:52 SQL> -- DEFINE case_id    = 'prdate'
20:19:52 SQL> 
20:19:52 SQL> DEFINE target	= '&1'
20:19:52 SQL> DEFINE model_name = '&2'
20:19:52 SQL> DEFINE bldtable	= '&3'
20:19:52 SQL> DEFINE scoretable = '&4'
20:19:52 SQL> DEFINE case_id	= '&5'
20:19:52 SQL> 
20:19:52 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:19:52 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:19:52 SQL> 
20:19:52 SQL> -- Builds an SVM model using pl/sql.
20:19:52 SQL> 
20:19:52 SQL> -----------------------------------------------------------------------
20:19:52 SQL> --			    BUILD THE MODEL
20:19:52 SQL> -----------------------------------------------------------------------
20:19:52 SQL> 
20:19:52 SQL> -- Cleanup old build data preparation objects for repeat runs
20:19:52 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.00
20:19:52 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:19:52 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.01
20:19:52 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.00
20:19:52 SQL> 
20:19:52 SQL> 
20:19:52 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:19:52 SQL> --
20:19:52 SQL> -- DROP	TABLE svmc_settings ;
20:19:52 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:19:52 SQL> -- DELETE svmc_settings;
20:19:52 SQL> 
20:19:52 SQL> -- The default classification algorithm is Naive Bayes. So override
20:19:52 SQL> -- this choice to SVM using a settings table.
20:19:52 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:19:52 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:19:52 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:19:52 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:19:52 SQL> -- models.
20:19:52 SQL> --
20:19:52 SQL> 
20:19:52 SQL> -- Do this once and then comment it out.
20:19:52 SQL> -- That makes script go faster.
20:19:52 SQL> -- BEGIN
20:19:52 SQL> -- -- Populate settings table
20:19:52 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:19:52 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:19:52 SQL> --
20:19:52 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:19:52 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:19:52 SQL> --
20:19:52 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:19:52 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:19:52 SQL> --   COMMIT;
20:19:52 SQL> -- END;
20:19:52 SQL> -- /
20:19:52 SQL> 
20:19:52 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:19:52 SQL> 
20:19:52 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:19:52   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:19:52   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:19:52 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:19:52   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:19:52   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:19:52 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:19:52   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:19:52   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:19:52 SQL> 
20:19:52 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:19:52   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:19:52   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:19:52 SQL> 
20:19:52 SQL> --------------------------------
20:19:52 SQL> -- PREPARE BUILD (TRAINING) DATA
20:19:52 SQL> --
20:19:52 SQL> 
20:19:52 SQL> -- 1. Missing Value treatment for all Predictors and
20:19:52 SQL> -- 2. Outlier Treatment and
20:19:52 SQL> -- 3. Normalization are performed below.
20:19:52 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:19:52 SQL> --    normalized here.
20:19:52 SQL> 
20:19:52 SQL> BEGIN
20:19:52   2  	-- Perform missing value treatment for all predictors
20:19:52   3  	-- create miss tables
20:19:52   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:19:52   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:19:52   6  
20:19:52   7  	-- populate miss tables
20:19:52   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:19:52   9  	  miss_table_name => 'svmc_miss_num',
20:19:52  10  	  data_table_name => '&bldtable',
20:19:52  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:19:52  12  
20:19:52  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:19:52  14  	  miss_table_name => 'svmc_miss_cat',
20:19:52  15  	  data_table_name => '&bldtable',
20:19:52  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:19:52  17  
20:19:52  18  	-- xform input data to replace missing values
20:19:52  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:19:52  20  	  miss_table_name => 'svmc_miss_num',
20:19:52  21  	  data_table_name => '&bldtable',
20:19:52  22  	  xform_view_name => 'xformed_build_miss_num');
20:19:52  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:19:52  24  	  miss_table_name => 'svmc_miss_cat',
20:19:52  25  	  data_table_name => '&bldtable',
20:19:52  26  	  xform_view_name => 'xformed_build_miss_cat');
20:19:52  27  
20:19:52  28  	-- Perform outlier treatment.
20:19:52  29  	-- create clip table
20:19:52  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:19:52  31  
20:19:52  32  	-- populate clip table
20:19:52  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:19:52  34  	  clip_table_name => 'svmc_clip',
20:19:52  35  	  data_table_name => '&bldtable',
20:19:52  36  	  tail_frac	  => 0.025,
20:19:52  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:19:52  38  
20:19:52  39  	-- xform input data to winsorized data
20:19:52  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:19:52  41  	  clip_table_name => 'svmc_clip',
20:19:52  42  	  data_table_name => '&bldtable',
20:19:52  43  	  xform_view_name => 'svmc_winsor');
20:19:52  44  
20:19:52  45  	-- create normalization table
20:19:52  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:19:52  47  
20:19:52  48  	-- populate normalization table based on winsorized data
20:19:52  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:19:52  50  	  norm_table_name => 'svmc_norm',
20:19:52  51  	  data_table_name => 'svmc_winsor',
20:19:52  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:19:52  53  
20:19:52  54  	-- normalize the original data
20:19:52  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:19:52  56  	  norm_table_name => 'svmc_norm',
20:19:52  57  	  data_table_name => '&bldtable',
20:19:52  58  	  xform_view_name => 'svmc_build_prep');
20:19:52  59  END;
20:19:52  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.42
20:19:54 SQL> 
20:19:54 SQL> ---------------------
20:19:54 SQL> -- CREATE A NEW MODEL
20:19:54 SQL> --
20:19:54 SQL> -- Cleanup old model with the same name for repeat runs
20:19:54 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:19:54   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:19:54   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.93
20:19:55 SQL> 
20:19:55 SQL> -- Build a new SVM Model
20:19:55 SQL> BEGIN
20:19:55   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:19:55   3  	  model_name	      => '&model_name',
20:19:55   4  	  mining_function     => dbms_data_mining.classification,
20:19:55   5  	  data_table_name     => 'svmc_build_prep',
20:19:55   6  	  case_id_column_name => '&case_id',
20:19:55   7  	  target_column_name  => '&target',
20:19:55   8  	  settings_table_name => 'svmc_settings');
20:19:55   9  END;
20:19:55  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:03.98
20:19:59 SQL> 
20:19:59 SQL> -----------------------------------------------------------------------
20:19:59 SQL> --			       APPLY/score THE MODEL
20:19:59 SQL> -----------------------------------------------------------------------
20:19:59 SQL> 
20:19:59 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:19:59 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:19:59   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:19:59   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:19:59 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:19:59   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:19:59   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:19:59 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:19:59   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:19:59   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:19:59 SQL> -----------------------
20:19:59 SQL> -- PREPARE SCORING DATA
20:19:59 SQL> --
20:19:59 SQL> -- If the data for model creation has been prepared, then the data
20:19:59 SQL> -- to be scored using the model must be prepared in the same manner
20:19:59 SQL> -- in order to obtain meaningful results.
20:19:59 SQL> --
20:19:59 SQL> -- 1. Missing Value treatment for all Predictors and
20:19:59 SQL> -- 2. Normalization
20:19:59 SQL> -- No outlier treatment will be performed during test and apply. The
20:19:59 SQL> -- normalization step is sufficient, since the normalization parameters
20:19:59 SQL> -- already capture the effects of outlier treatment done with build data.
20:19:59 SQL> --
20:19:59 SQL> BEGIN
20:19:59   2  	-- Xform Test data to replace missing values
20:19:59   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:19:59   4  	  miss_table_name => 'svmc_miss_num',
20:19:59   5  	  data_table_name => '&scoretable',
20:19:59   6  	  xform_view_name => 'xformed_apply_miss_num');
20:19:59   7  
20:19:59   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:19:59   9  	  miss_table_name => 'svmc_miss_cat',
20:19:59  10  	  data_table_name => '&scoretable',
20:19:59  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:19:59  12  
20:19:59  13  	-- Normalize the data to be scored
20:19:59  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:19:59  15  	  norm_table_name => 'svmc_norm',
20:19:59  16  	  data_table_name => '&scoretable',
20:19:59  17  	  xform_view_name => 'svmc_apply_prep');
20:19:59  18  END;
20:19:59  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.18
20:19:59 SQL> 
20:19:59 SQL> -- Maybe I already collected a score for this prdate.
20:19:59 SQL> -- DELETE it if I did:
20:19:59 SQL> DELETE svm62scores
20:19:59   2  WHERE score > 0
20:19:59   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:19:59   4  -- I need to supply the target attribute name:
20:19:59   5  AND targ = '&1'
20:19:59   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gattn'

0 rows deleted.

Elapsed: 00:00:00.02
20:19:59 SQL> 
20:19:59 SQL> -- We do a drumroll here:
20:19:59 SQL> 
20:19:59 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:19:59   2  SELECT
20:19:59   3  prdate
20:19:59   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:19:59   5  ,sysdate
20:19:59   6  ,SUBSTR(prdate,1,7)pair
20:19:59   7  ,SUBSTR(prdate,-19)ydate
20:19:59   8  ,'&1'
20:19:59   9  FROM svmc_apply_prep
20:19:59  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gattn'

1 row created.

Elapsed: 00:00:00.05
20:19:59 SQL> @score1_5min.sql	      2010-10-25 02:10:01 aud_usd
20:19:59 SQL> --
20:19:59 SQL> -- score1_5min.sql
20:19:59 SQL> --
20:19:59 SQL> 
20:19:59 SQL> -- Demo:
20:19:59 SQL> -- @score1_5min.sql 2010-12-31 20:45:01 aud_usd
20:19:59 SQL> 
20:19:59 SQL> CREATE OR REPLACE VIEW sme AS
20:19:59   2  SELECT
20:19:59   3  prdate
20:19:59   4  ,NULL gatt
20:19:59   5  ,g00
20:19:59   6  ,g01
20:19:59   7  ,g02
20:19:59   8  ,g03
20:19:59   9  ,g04
20:19:59  10  ,g05
20:19:59  11  ,g06
20:19:59  12  ,g07
20:19:59  13  ,g08
20:19:59  14  ,g09
20:19:59  15  ,g10
20:19:59  16  ,g11
20:19:59  17  ,g12
20:19:59  18  ,g13
20:19:59  19  ,g14
20:19:59  20  ,g15
20:19:59  21  ,g16
20:19:59  22  ,g17
20:19:59  23  ,g18
20:19:59  24  ,g19
20:19:59  25  ,g20
20:19:59  26  ,g21
20:19:59  27  ,g22
20:19:59  28  ,g23
20:19:59  29  ,g24
20:19:59  30  ,g25
20:19:59  31  ,g26
20:19:59  32  ,g27
20:19:59  33  ,g28
20:19:59  34  ,g29
20:19:59  35  ,g30
20:19:59  36  ,g31
20:19:59  37  ,g32
20:19:59  38  ,g33
20:19:59  39  ,g34
20:19:59  40  ,g35
20:19:59  41  ,g36
20:19:59  42  ,g37
20:19:59  43  ,g38
20:19:59  44  ,g39
20:19:59  45  ,g40
20:19:59  46  ,g41
20:19:59  47  FROM modsrc
20:19:59  48  WHERE ydate = '&1'||' '||'&2'
20:19:59  49  AND pair = '&3'
20:19:59  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-10-25'||' '||'02:10:01'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.12
20:19:59 SQL> 
20:19:59 SQL> -- rpt
20:19:59 SQL> -- We should see just 1 row:
20:19:59 SQL> 
20:19:59 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.02
20:19:59 SQL> 
20:19:59 SQL> -- Build the model:
20:19:59 SQL> CREATE OR REPLACE VIEW bme AS
20:19:59   2  SELECT
20:19:59   3  prdate
20:19:59   4  ,gatt
20:19:59   5  ,g00
20:19:59   6  ,g01
20:19:59   7  ,g02
20:19:59   8  ,g03
20:19:59   9  ,g04
20:19:59  10  ,g05
20:19:59  11  ,g06
20:19:59  12  ,g07
20:19:59  13  ,g08
20:19:59  14  ,g09
20:19:59  15  ,g10
20:19:59  16  ,g11
20:19:59  17  ,g12
20:19:59  18  ,g13
20:19:59  19  ,g14
20:19:59  20  ,g15
20:19:59  21  ,g16
20:19:59  22  ,g17
20:19:59  23  ,g18
20:19:59  24  ,g19
20:19:59  25  ,g20
20:19:59  26  ,g21
20:19:59  27  ,g22
20:19:59  28  ,g23
20:19:59  29  ,g24
20:19:59  30  ,g25
20:19:59  31  ,g26
20:19:59  32  ,g27
20:19:59  33  ,g28
20:19:59  34  ,g29
20:19:59  35  ,g30
20:19:59  36  ,g31
20:19:59  37  ,g32
20:19:59  38  ,g33
20:19:59  39  ,g34
20:19:59  40  ,g35
20:19:59  41  ,g36
20:19:59  42  ,g37
20:19:59  43  ,g38
20:19:59  44  ,g39
20:19:59  45  ,g40
20:19:59  46  ,g41
20:19:59  47  FROM modsrc
20:19:59  48  WHERE gatt IN('nup','up')
20:19:59  49  -- Use only rows which are older than 1 day:
20:19:59  50  AND 1+ydate < '&1'||' '||'&2'
20:19:59  51  AND pair = '&3'
20:19:59  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-10-25'||' '||'02:10:01'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.05
20:19:59 SQL> 
20:19:59 SQL> -- rpt
20:19:59 SQL> 
20:19:59 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt;

GAT COUNT(PRDATE)
--- -------------
nup	     2154
up	     1634

Elapsed: 00:00:00.03
20:19:59 SQL> 
20:19:59 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-10-22 21:50:01

Elapsed: 00:00:00.01
20:19:59 SQL> 
20:19:59 SQL> -- Now build model from bme and score sme
20:19:59 SQL> @score1.sql gatt
20:19:59 SQL> --
20:19:59 SQL> -- score1.sql
20:19:59 SQL> --
20:19:59 SQL> 
20:19:59 SQL> -- I use this script to send 5 params to score.sql
20:19:59 SQL> -- which does the heavy lifting of creating an SVM model.
20:19:59 SQL> -- Then at the very end of this script I use the model
20:19:59 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:19:59 SQL> 
20:19:59 SQL> -- I call this script from 2 other scripts:
20:19:59 SQL> -- score1_5min.sql
20:19:59 SQL> -- score1_5min_gattn.sql
20:19:59 SQL> 
20:19:59 SQL> -- The 1st param is the name of the target attribute.
20:19:59 SQL> -- I like to call my target attributes either gatt or gattn.
20:19:59 SQL> 
20:19:59 SQL> -- Demo:
20:19:59 SQL> -- @score1.sql 'gatt'
20:19:59 SQL> -- @score1.sql 'gattn'
20:19:59 SQL> 
20:19:59 SQL> -- Now, I fill up svmc_apply_prep.
20:19:59 SQL> -- I use same model_name used in score.sql
20:19:59 SQL> DEFINE model_name = 'svmfx101'
20:19:59 SQL> DEFINE bldtable	= 'bme'
20:19:59 SQL> DEFINE scoretable = 'sme'
20:19:59 SQL> DEFINE case_id	= 'prdate'
20:19:59 SQL> -- Demo:
20:19:59 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:19:59 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:19:59 SQL> --
20:19:59 SQL> -- score.sql
20:19:59 SQL> --
20:19:59 SQL> 
20:19:59 SQL> -- usage: score.sql
20:19:59 SQL> 
20:19:59 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:19:59 SQL> 
20:19:59 SQL> -- DEFINE target	   = 'gatt'
20:19:59 SQL> -- DEFINE model_name = 'svmfx101'
20:19:59 SQL> -- DEFINE bldtable   = 'bme'
20:19:59 SQL> -- DEFINE scoretable = 'sme'
20:19:59 SQL> -- DEFINE case_id    = 'prdate'
20:19:59 SQL> 
20:19:59 SQL> DEFINE target	= '&1'
20:19:59 SQL> DEFINE model_name = '&2'
20:19:59 SQL> DEFINE bldtable	= '&3'
20:19:59 SQL> DEFINE scoretable = '&4'
20:19:59 SQL> DEFINE case_id	= '&5'
20:19:59 SQL> 
20:19:59 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:19:59 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:19:59 SQL> 
20:19:59 SQL> -- Builds an SVM model using pl/sql.
20:19:59 SQL> 
20:19:59 SQL> -----------------------------------------------------------------------
20:19:59 SQL> --			    BUILD THE MODEL
20:19:59 SQL> -----------------------------------------------------------------------
20:19:59 SQL> 
20:19:59 SQL> -- Cleanup old build data preparation objects for repeat runs
20:19:59 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.01
20:19:59 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:19:59 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:19:59 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.00
20:19:59 SQL> 
20:19:59 SQL> 
20:19:59 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:19:59 SQL> --
20:19:59 SQL> -- DROP	TABLE svmc_settings ;
20:19:59 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:19:59 SQL> -- DELETE svmc_settings;
20:19:59 SQL> 
20:19:59 SQL> -- The default classification algorithm is Naive Bayes. So override
20:19:59 SQL> -- this choice to SVM using a settings table.
20:19:59 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:19:59 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:19:59 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:19:59 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:19:59 SQL> -- models.
20:19:59 SQL> --
20:19:59 SQL> 
20:19:59 SQL> -- Do this once and then comment it out.
20:19:59 SQL> -- That makes script go faster.
20:19:59 SQL> -- BEGIN
20:19:59 SQL> -- -- Populate settings table
20:19:59 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:19:59 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:19:59 SQL> --
20:19:59 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:19:59 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:19:59 SQL> --
20:19:59 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:19:59 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:19:59 SQL> --   COMMIT;
20:19:59 SQL> -- END;
20:19:59 SQL> -- /
20:19:59 SQL> 
20:19:59 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.01
20:19:59 SQL> 
20:19:59 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:19:59   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:19:59   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:19:59 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:19:59   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:19:59   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:19:59 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:19:59   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:19:59   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:19:59 SQL> 
20:19:59 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:19:59   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:19:59   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:20:00 SQL> 
20:20:00 SQL> --------------------------------
20:20:00 SQL> -- PREPARE BUILD (TRAINING) DATA
20:20:00 SQL> --
20:20:00 SQL> 
20:20:00 SQL> -- 1. Missing Value treatment for all Predictors and
20:20:00 SQL> -- 2. Outlier Treatment and
20:20:00 SQL> -- 3. Normalization are performed below.
20:20:00 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:20:00 SQL> --    normalized here.
20:20:00 SQL> 
20:20:00 SQL> BEGIN
20:20:00   2  	-- Perform missing value treatment for all predictors
20:20:00   3  	-- create miss tables
20:20:00   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:20:00   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:20:00   6  
20:20:00   7  	-- populate miss tables
20:20:00   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:20:00   9  	  miss_table_name => 'svmc_miss_num',
20:20:00  10  	  data_table_name => '&bldtable',
20:20:00  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:20:00  12  
20:20:00  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:20:00  14  	  miss_table_name => 'svmc_miss_cat',
20:20:00  15  	  data_table_name => '&bldtable',
20:20:00  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:20:00  17  
20:20:00  18  	-- xform input data to replace missing values
20:20:00  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:20:00  20  	  miss_table_name => 'svmc_miss_num',
20:20:00  21  	  data_table_name => '&bldtable',
20:20:00  22  	  xform_view_name => 'xformed_build_miss_num');
20:20:00  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:20:00  24  	  miss_table_name => 'svmc_miss_cat',
20:20:00  25  	  data_table_name => '&bldtable',
20:20:00  26  	  xform_view_name => 'xformed_build_miss_cat');
20:20:00  27  
20:20:00  28  	-- Perform outlier treatment.
20:20:00  29  	-- create clip table
20:20:00  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:20:00  31  
20:20:00  32  	-- populate clip table
20:20:00  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:20:00  34  	  clip_table_name => 'svmc_clip',
20:20:00  35  	  data_table_name => '&bldtable',
20:20:00  36  	  tail_frac	  => 0.025,
20:20:00  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:20:00  38  
20:20:00  39  	-- xform input data to winsorized data
20:20:00  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:20:00  41  	  clip_table_name => 'svmc_clip',
20:20:00  42  	  data_table_name => '&bldtable',
20:20:00  43  	  xform_view_name => 'svmc_winsor');
20:20:00  44  
20:20:00  45  	-- create normalization table
20:20:00  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:20:00  47  
20:20:00  48  	-- populate normalization table based on winsorized data
20:20:00  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:20:00  50  	  norm_table_name => 'svmc_norm',
20:20:00  51  	  data_table_name => 'svmc_winsor',
20:20:00  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:20:00  53  
20:20:00  54  	-- normalize the original data
20:20:00  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:20:00  56  	  norm_table_name => 'svmc_norm',
20:20:00  57  	  data_table_name => '&bldtable',
20:20:00  58  	  xform_view_name => 'svmc_build_prep');
20:20:00  59  END;
20:20:00  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.18
20:20:01 SQL> 
20:20:01 SQL> ---------------------
20:20:01 SQL> -- CREATE A NEW MODEL
20:20:01 SQL> --
20:20:01 SQL> -- Cleanup old model with the same name for repeat runs
20:20:01 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:20:01   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:20:01   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.22
20:20:02 SQL> 
20:20:02 SQL> -- Build a new SVM Model
20:20:02 SQL> BEGIN
20:20:02   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:20:02   3  	  model_name	      => '&model_name',
20:20:02   4  	  mining_function     => dbms_data_mining.classification,
20:20:02   5  	  data_table_name     => 'svmc_build_prep',
20:20:02   6  	  case_id_column_name => '&case_id',
20:20:02   7  	  target_column_name  => '&target',
20:20:02   8  	  settings_table_name => 'svmc_settings');
20:20:02   9  END;
20:20:02  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:02.89
20:20:05 SQL> 
20:20:05 SQL> -----------------------------------------------------------------------
20:20:05 SQL> --			       APPLY/score THE MODEL
20:20:05 SQL> -----------------------------------------------------------------------
20:20:05 SQL> 
20:20:05 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:20:05 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:20:05   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:20:05   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:20:05 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:20:05   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:20:05   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:20:05 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:20:05   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:20:05   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:20:05 SQL> -----------------------
20:20:05 SQL> -- PREPARE SCORING DATA
20:20:05 SQL> --
20:20:05 SQL> -- If the data for model creation has been prepared, then the data
20:20:05 SQL> -- to be scored using the model must be prepared in the same manner
20:20:05 SQL> -- in order to obtain meaningful results.
20:20:05 SQL> --
20:20:05 SQL> -- 1. Missing Value treatment for all Predictors and
20:20:05 SQL> -- 2. Normalization
20:20:05 SQL> -- No outlier treatment will be performed during test and apply. The
20:20:05 SQL> -- normalization step is sufficient, since the normalization parameters
20:20:05 SQL> -- already capture the effects of outlier treatment done with build data.
20:20:05 SQL> --
20:20:05 SQL> BEGIN
20:20:05   2  	-- Xform Test data to replace missing values
20:20:05   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:20:05   4  	  miss_table_name => 'svmc_miss_num',
20:20:05   5  	  data_table_name => '&scoretable',
20:20:05   6  	  xform_view_name => 'xformed_apply_miss_num');
20:20:05   7  
20:20:05   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:20:05   9  	  miss_table_name => 'svmc_miss_cat',
20:20:05  10  	  data_table_name => '&scoretable',
20:20:05  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:20:05  12  
20:20:05  13  	-- Normalize the data to be scored
20:20:05  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:20:05  15  	  norm_table_name => 'svmc_norm',
20:20:05  16  	  data_table_name => '&scoretable',
20:20:05  17  	  xform_view_name => 'svmc_apply_prep');
20:20:05  18  END;
20:20:05  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.18
20:20:05 SQL> 
20:20:05 SQL> -- Maybe I already collected a score for this prdate.
20:20:05 SQL> -- DELETE it if I did:
20:20:05 SQL> DELETE svm62scores
20:20:05   2  WHERE score > 0
20:20:05   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:20:05   4  -- I need to supply the target attribute name:
20:20:05   5  AND targ = '&1'
20:20:05   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gatt'

0 rows deleted.

Elapsed: 00:00:00.02
20:20:05 SQL> 
20:20:05 SQL> -- We do a drumroll here:
20:20:05 SQL> 
20:20:05 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:20:05   2  SELECT
20:20:05   3  prdate
20:20:05   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:20:05   5  ,sysdate
20:20:05   6  ,SUBSTR(prdate,1,7)pair
20:20:05   7  ,SUBSTR(prdate,-19)ydate
20:20:05   8  ,'&1'
20:20:05   9  FROM svmc_apply_prep
20:20:05  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gatt'

1 row created.

Elapsed: 00:00:00.05
20:20:05 SQL> @score1_5min_gattn.sql	2011-01-05 13:20:00 aud_usd
20:20:05 SQL> --
20:20:05 SQL> -- score1_5min_gattn.sql
20:20:05 SQL> --
20:20:05 SQL> 
20:20:05 SQL> -- Demo:
20:20:05 SQL> -- @score1_5min_gattn.sql 2010-12-31 20:45:01 aud_usd
20:20:05 SQL> 
20:20:05 SQL> CREATE OR REPLACE VIEW sme AS
20:20:05   2  SELECT
20:20:05   3  prdate
20:20:05   4  ,NULL gattn
20:20:05   5  ,g00
20:20:05   6  ,g01
20:20:05   7  ,g02
20:20:05   8  ,g03
20:20:05   9  ,g04
20:20:05  10  ,g05
20:20:05  11  ,g06
20:20:05  12  ,g07
20:20:05  13  ,g08
20:20:05  14  ,g09
20:20:05  15  ,g10
20:20:05  16  ,g11
20:20:05  17  ,g12
20:20:05  18  ,g13
20:20:05  19  ,g14
20:20:05  20  ,g15
20:20:05  21  ,g16
20:20:05  22  ,g17
20:20:05  23  ,g18
20:20:05  24  ,g19
20:20:05  25  ,g20
20:20:05  26  ,g21
20:20:05  27  ,g22
20:20:05  28  ,g23
20:20:05  29  ,g24
20:20:05  30  ,g25
20:20:05  31  ,g26
20:20:05  32  ,g27
20:20:05  33  ,g28
20:20:05  34  ,g29
20:20:05  35  ,g30
20:20:05  36  ,g31
20:20:05  37  ,g32
20:20:05  38  ,g33
20:20:05  39  ,g34
20:20:05  40  ,g35
20:20:05  41  ,g36
20:20:05  42  ,g37
20:20:05  43  ,g38
20:20:05  44  ,g39
20:20:05  45  ,g40
20:20:05  46  ,g41
20:20:05  47  FROM modsrc
20:20:05  48  WHERE ydate = '&1'||' '||'&2'
20:20:05  49  AND pair = '&3'
20:20:05  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2011-01-05'||' '||'13:20:00'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.05
20:20:05 SQL> 
20:20:05 SQL> -- rpt
20:20:05 SQL> -- We should see just 1 row:
20:20:05 SQL> 
20:20:05 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.02
20:20:05 SQL> 
20:20:05 SQL> -- Build the model:
20:20:05 SQL> CREATE OR REPLACE VIEW bme AS
20:20:05   2  SELECT
20:20:05   3  prdate
20:20:05   4  ,gattn
20:20:05   5  ,g00
20:20:05   6  ,g01
20:20:05   7  ,g02
20:20:05   8  ,g03
20:20:05   9  ,g04
20:20:05  10  ,g05
20:20:05  11  ,g06
20:20:05  12  ,g07
20:20:05  13  ,g08
20:20:05  14  ,g09
20:20:05  15  ,g10
20:20:05  16  ,g11
20:20:05  17  ,g12
20:20:05  18  ,g13
20:20:05  19  ,g14
20:20:05  20  ,g15
20:20:05  21  ,g16
20:20:05  22  ,g17
20:20:05  23  ,g18
20:20:05  24  ,g19
20:20:05  25  ,g20
20:20:05  26  ,g21
20:20:05  27  ,g22
20:20:05  28  ,g23
20:20:05  29  ,g24
20:20:05  30  ,g25
20:20:05  31  ,g26
20:20:05  32  ,g27
20:20:05  33  ,g28
20:20:05  34  ,g29
20:20:05  35  ,g30
20:20:05  36  ,g31
20:20:05  37  ,g32
20:20:05  38  ,g33
20:20:05  39  ,g34
20:20:05  40  ,g35
20:20:05  41  ,g36
20:20:05  42  ,g37
20:20:05  43  ,g38
20:20:05  44  ,g39
20:20:05  45  ,g40
20:20:05  46  ,g41
20:20:05  47  FROM modsrc
20:20:05  48  WHERE gattn IN('nup','up')
20:20:05  49  -- Use only rows which are older than 1 day:
20:20:05  50  AND 1+ydate < '&1'||' '||'&2'
20:20:05  51  AND pair = '&3'
20:20:05  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2011-01-05'||' '||'13:20:00'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.05
20:20:05 SQL> 
20:20:05 SQL> -- rpt
20:20:05 SQL> 
20:20:05 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	    12361
up	     6222

Elapsed: 00:00:00.02
20:20:05 SQL> 
20:20:05 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2011-01-04 13:15:00

Elapsed: 00:00:00.02
20:20:05 SQL> 
20:20:05 SQL> -- Now build model from bme and score sme
20:20:05 SQL> @score1.sql gattn
20:20:05 SQL> --
20:20:05 SQL> -- score1.sql
20:20:05 SQL> --
20:20:05 SQL> 
20:20:05 SQL> -- I use this script to send 5 params to score.sql
20:20:05 SQL> -- which does the heavy lifting of creating an SVM model.
20:20:05 SQL> -- Then at the very end of this script I use the model
20:20:05 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:20:05 SQL> 
20:20:05 SQL> -- I call this script from 2 other scripts:
20:20:05 SQL> -- score1_5min.sql
20:20:05 SQL> -- score1_5min_gattn.sql
20:20:05 SQL> 
20:20:05 SQL> -- The 1st param is the name of the target attribute.
20:20:05 SQL> -- I like to call my target attributes either gatt or gattn.
20:20:05 SQL> 
20:20:05 SQL> -- Demo:
20:20:05 SQL> -- @score1.sql 'gatt'
20:20:05 SQL> -- @score1.sql 'gattn'
20:20:05 SQL> 
20:20:05 SQL> -- Now, I fill up svmc_apply_prep.
20:20:05 SQL> -- I use same model_name used in score.sql
20:20:05 SQL> DEFINE model_name = 'svmfx101'
20:20:05 SQL> DEFINE bldtable	= 'bme'
20:20:05 SQL> DEFINE scoretable = 'sme'
20:20:05 SQL> DEFINE case_id	= 'prdate'
20:20:05 SQL> -- Demo:
20:20:05 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:20:05 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:20:05 SQL> --
20:20:05 SQL> -- score.sql
20:20:05 SQL> --
20:20:05 SQL> 
20:20:05 SQL> -- usage: score.sql
20:20:05 SQL> 
20:20:05 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:20:05 SQL> 
20:20:05 SQL> -- DEFINE target	   = 'gatt'
20:20:05 SQL> -- DEFINE model_name = 'svmfx101'
20:20:05 SQL> -- DEFINE bldtable   = 'bme'
20:20:05 SQL> -- DEFINE scoretable = 'sme'
20:20:05 SQL> -- DEFINE case_id    = 'prdate'
20:20:05 SQL> 
20:20:05 SQL> DEFINE target	= '&1'
20:20:05 SQL> DEFINE model_name = '&2'
20:20:05 SQL> DEFINE bldtable	= '&3'
20:20:05 SQL> DEFINE scoretable = '&4'
20:20:05 SQL> DEFINE case_id	= '&5'
20:20:05 SQL> 
20:20:05 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:20:05 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:20:05 SQL> 
20:20:05 SQL> -- Builds an SVM model using pl/sql.
20:20:05 SQL> 
20:20:05 SQL> -----------------------------------------------------------------------
20:20:05 SQL> --			    BUILD THE MODEL
20:20:05 SQL> -----------------------------------------------------------------------
20:20:05 SQL> 
20:20:05 SQL> -- Cleanup old build data preparation objects for repeat runs
20:20:05 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.00
20:20:05 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.01
20:20:05 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:20:05 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.00
20:20:05 SQL> 
20:20:05 SQL> 
20:20:05 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:20:05 SQL> --
20:20:05 SQL> -- DROP	TABLE svmc_settings ;
20:20:05 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:20:05 SQL> -- DELETE svmc_settings;
20:20:05 SQL> 
20:20:05 SQL> -- The default classification algorithm is Naive Bayes. So override
20:20:05 SQL> -- this choice to SVM using a settings table.
20:20:05 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:20:05 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:20:05 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:20:05 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:20:05 SQL> -- models.
20:20:05 SQL> --
20:20:05 SQL> 
20:20:05 SQL> -- Do this once and then comment it out.
20:20:05 SQL> -- That makes script go faster.
20:20:05 SQL> -- BEGIN
20:20:05 SQL> -- -- Populate settings table
20:20:05 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:20:05 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:20:05 SQL> --
20:20:05 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:20:05 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:20:05 SQL> --
20:20:05 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:20:05 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:20:05 SQL> --   COMMIT;
20:20:05 SQL> -- END;
20:20:05 SQL> -- /
20:20:05 SQL> 
20:20:05 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:20:05 SQL> 
20:20:05 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:20:05   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:20:05   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
20:20:05 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:20:05   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:20:05   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:20:05 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:20:05   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:20:05   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:20:05 SQL> 
20:20:05 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:20:05   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:20:05   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:20:05 SQL> 
20:20:05 SQL> --------------------------------
20:20:05 SQL> -- PREPARE BUILD (TRAINING) DATA
20:20:05 SQL> --
20:20:05 SQL> 
20:20:05 SQL> -- 1. Missing Value treatment for all Predictors and
20:20:05 SQL> -- 2. Outlier Treatment and
20:20:05 SQL> -- 3. Normalization are performed below.
20:20:05 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:20:05 SQL> --    normalized here.
20:20:05 SQL> 
20:20:05 SQL> BEGIN
20:20:05   2  	-- Perform missing value treatment for all predictors
20:20:05   3  	-- create miss tables
20:20:05   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:20:05   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:20:05   6  
20:20:05   7  	-- populate miss tables
20:20:05   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:20:05   9  	  miss_table_name => 'svmc_miss_num',
20:20:05  10  	  data_table_name => '&bldtable',
20:20:05  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:20:05  12  
20:20:05  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:20:05  14  	  miss_table_name => 'svmc_miss_cat',
20:20:05  15  	  data_table_name => '&bldtable',
20:20:05  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:20:05  17  
20:20:05  18  	-- xform input data to replace missing values
20:20:05  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:20:05  20  	  miss_table_name => 'svmc_miss_num',
20:20:05  21  	  data_table_name => '&bldtable',
20:20:05  22  	  xform_view_name => 'xformed_build_miss_num');
20:20:05  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:20:05  24  	  miss_table_name => 'svmc_miss_cat',
20:20:05  25  	  data_table_name => '&bldtable',
20:20:05  26  	  xform_view_name => 'xformed_build_miss_cat');
20:20:05  27  
20:20:05  28  	-- Perform outlier treatment.
20:20:05  29  	-- create clip table
20:20:05  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:20:05  31  
20:20:05  32  	-- populate clip table
20:20:05  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:20:05  34  	  clip_table_name => 'svmc_clip',
20:20:05  35  	  data_table_name => '&bldtable',
20:20:05  36  	  tail_frac	  => 0.025,
20:20:05  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:20:05  38  
20:20:05  39  	-- xform input data to winsorized data
20:20:05  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:20:05  41  	  clip_table_name => 'svmc_clip',
20:20:05  42  	  data_table_name => '&bldtable',
20:20:05  43  	  xform_view_name => 'svmc_winsor');
20:20:05  44  
20:20:05  45  	-- create normalization table
20:20:05  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:20:05  47  
20:20:05  48  	-- populate normalization table based on winsorized data
20:20:05  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:20:05  50  	  norm_table_name => 'svmc_norm',
20:20:05  51  	  data_table_name => 'svmc_winsor',
20:20:05  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:20:05  53  
20:20:05  54  	-- normalize the original data
20:20:05  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:20:05  56  	  norm_table_name => 'svmc_norm',
20:20:05  57  	  data_table_name => '&bldtable',
20:20:05  58  	  xform_view_name => 'svmc_build_prep');
20:20:05  59  END;
20:20:05  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:02.33
20:20:08 SQL> 
20:20:08 SQL> ---------------------
20:20:08 SQL> -- CREATE A NEW MODEL
20:20:08 SQL> --
20:20:08 SQL> -- Cleanup old model with the same name for repeat runs
20:20:08 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:20:08   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:20:08   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.06
20:20:09 SQL> 
20:20:09 SQL> -- Build a new SVM Model
20:20:09 SQL> BEGIN
20:20:09   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:20:09   3  	  model_name	      => '&model_name',
20:20:09   4  	  mining_function     => dbms_data_mining.classification,
20:20:09   5  	  data_table_name     => 'svmc_build_prep',
20:20:09   6  	  case_id_column_name => '&case_id',
20:20:09   7  	  target_column_name  => '&target',
20:20:09   8  	  settings_table_name => 'svmc_settings');
20:20:09   9  END;
20:20:09  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:05.08
20:20:14 SQL> 
20:20:14 SQL> -----------------------------------------------------------------------
20:20:14 SQL> --			       APPLY/score THE MODEL
20:20:14 SQL> -----------------------------------------------------------------------
20:20:14 SQL> 
20:20:14 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:20:14 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:20:14   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:20:14   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:20:14 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:20:14   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:20:14   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:20:14 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:20:14   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:20:14   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:20:14 SQL> -----------------------
20:20:14 SQL> -- PREPARE SCORING DATA
20:20:14 SQL> --
20:20:14 SQL> -- If the data for model creation has been prepared, then the data
20:20:14 SQL> -- to be scored using the model must be prepared in the same manner
20:20:14 SQL> -- in order to obtain meaningful results.
20:20:14 SQL> --
20:20:14 SQL> -- 1. Missing Value treatment for all Predictors and
20:20:14 SQL> -- 2. Normalization
20:20:14 SQL> -- No outlier treatment will be performed during test and apply. The
20:20:14 SQL> -- normalization step is sufficient, since the normalization parameters
20:20:14 SQL> -- already capture the effects of outlier treatment done with build data.
20:20:14 SQL> --
20:20:14 SQL> BEGIN
20:20:14   2  	-- Xform Test data to replace missing values
20:20:14   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:20:14   4  	  miss_table_name => 'svmc_miss_num',
20:20:14   5  	  data_table_name => '&scoretable',
20:20:14   6  	  xform_view_name => 'xformed_apply_miss_num');
20:20:14   7  
20:20:14   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:20:14   9  	  miss_table_name => 'svmc_miss_cat',
20:20:14  10  	  data_table_name => '&scoretable',
20:20:14  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:20:14  12  
20:20:14  13  	-- Normalize the data to be scored
20:20:14  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:20:14  15  	  norm_table_name => 'svmc_norm',
20:20:14  16  	  data_table_name => '&scoretable',
20:20:14  17  	  xform_view_name => 'svmc_apply_prep');
20:20:14  18  END;
20:20:14  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.18
20:20:14 SQL> 
20:20:14 SQL> -- Maybe I already collected a score for this prdate.
20:20:14 SQL> -- DELETE it if I did:
20:20:14 SQL> DELETE svm62scores
20:20:14   2  WHERE score > 0
20:20:14   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:20:14   4  -- I need to supply the target attribute name:
20:20:14   5  AND targ = '&1'
20:20:14   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gattn'

0 rows deleted.

Elapsed: 00:00:00.02
20:20:14 SQL> 
20:20:14 SQL> -- We do a drumroll here:
20:20:14 SQL> 
20:20:14 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:20:14   2  SELECT
20:20:14   3  prdate
20:20:14   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:20:14   5  ,sysdate
20:20:14   6  ,SUBSTR(prdate,1,7)pair
20:20:14   7  ,SUBSTR(prdate,-19)ydate
20:20:14   8  ,'&1'
20:20:14   9  FROM svmc_apply_prep
20:20:14  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gattn'

1 row created.

Elapsed: 00:00:00.05
20:20:14 SQL> @score1_5min_gattn.sql	2011-01-03 02:40:00 aud_usd
20:20:14 SQL> --
20:20:14 SQL> -- score1_5min_gattn.sql
20:20:14 SQL> --
20:20:14 SQL> 
20:20:14 SQL> -- Demo:
20:20:14 SQL> -- @score1_5min_gattn.sql 2010-12-31 20:45:01 aud_usd
20:20:14 SQL> 
20:20:14 SQL> CREATE OR REPLACE VIEW sme AS
20:20:14   2  SELECT
20:20:14   3  prdate
20:20:14   4  ,NULL gattn
20:20:14   5  ,g00
20:20:14   6  ,g01
20:20:14   7  ,g02
20:20:14   8  ,g03
20:20:14   9  ,g04
20:20:14  10  ,g05
20:20:14  11  ,g06
20:20:14  12  ,g07
20:20:14  13  ,g08
20:20:14  14  ,g09
20:20:14  15  ,g10
20:20:14  16  ,g11
20:20:14  17  ,g12
20:20:14  18  ,g13
20:20:14  19  ,g14
20:20:14  20  ,g15
20:20:14  21  ,g16
20:20:14  22  ,g17
20:20:14  23  ,g18
20:20:14  24  ,g19
20:20:14  25  ,g20
20:20:14  26  ,g21
20:20:14  27  ,g22
20:20:14  28  ,g23
20:20:14  29  ,g24
20:20:14  30  ,g25
20:20:14  31  ,g26
20:20:14  32  ,g27
20:20:14  33  ,g28
20:20:14  34  ,g29
20:20:14  35  ,g30
20:20:14  36  ,g31
20:20:14  37  ,g32
20:20:14  38  ,g33
20:20:14  39  ,g34
20:20:14  40  ,g35
20:20:14  41  ,g36
20:20:14  42  ,g37
20:20:14  43  ,g38
20:20:14  44  ,g39
20:20:14  45  ,g40
20:20:14  46  ,g41
20:20:14  47  FROM modsrc
20:20:14  48  WHERE ydate = '&1'||' '||'&2'
20:20:14  49  AND pair = '&3'
20:20:14  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2011-01-03'||' '||'02:40:00'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:20:14 SQL> 
20:20:14 SQL> -- rpt
20:20:14 SQL> -- We should see just 1 row:
20:20:14 SQL> 
20:20:14 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.01
20:20:14 SQL> 
20:20:14 SQL> -- Build the model:
20:20:14 SQL> CREATE OR REPLACE VIEW bme AS
20:20:14   2  SELECT
20:20:14   3  prdate
20:20:14   4  ,gattn
20:20:14   5  ,g00
20:20:14   6  ,g01
20:20:14   7  ,g02
20:20:14   8  ,g03
20:20:14   9  ,g04
20:20:14  10  ,g05
20:20:14  11  ,g06
20:20:14  12  ,g07
20:20:14  13  ,g08
20:20:14  14  ,g09
20:20:14  15  ,g10
20:20:14  16  ,g11
20:20:14  17  ,g12
20:20:14  18  ,g13
20:20:14  19  ,g14
20:20:14  20  ,g15
20:20:14  21  ,g16
20:20:14  22  ,g17
20:20:14  23  ,g18
20:20:14  24  ,g19
20:20:14  25  ,g20
20:20:14  26  ,g21
20:20:14  27  ,g22
20:20:14  28  ,g23
20:20:14  29  ,g24
20:20:14  30  ,g25
20:20:14  31  ,g26
20:20:14  32  ,g27
20:20:14  33  ,g28
20:20:14  34  ,g29
20:20:14  35  ,g30
20:20:14  36  ,g31
20:20:14  37  ,g32
20:20:14  38  ,g33
20:20:14  39  ,g34
20:20:14  40  ,g35
20:20:14  41  ,g36
20:20:14  42  ,g37
20:20:14  43  ,g38
20:20:14  44  ,g39
20:20:14  45  ,g40
20:20:14  46  ,g41
20:20:14  47  FROM modsrc
20:20:14  48  WHERE gattn IN('nup','up')
20:20:14  49  -- Use only rows which are older than 1 day:
20:20:14  50  AND 1+ydate < '&1'||' '||'&2'
20:20:14  51  AND pair = '&3'
20:20:14  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2011-01-03'||' '||'02:40:00'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.05
20:20:14 SQL> 
20:20:14 SQL> -- rpt
20:20:14 SQL> 
20:20:14 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	    12128
up	     5989

Elapsed: 00:00:00.03
20:20:14 SQL> 
20:20:14 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-12-31 21:55:00

Elapsed: 00:00:00.02
20:20:14 SQL> 
20:20:14 SQL> -- Now build model from bme and score sme
20:20:14 SQL> @score1.sql gattn
20:20:14 SQL> --
20:20:14 SQL> -- score1.sql
20:20:14 SQL> --
20:20:14 SQL> 
20:20:14 SQL> -- I use this script to send 5 params to score.sql
20:20:14 SQL> -- which does the heavy lifting of creating an SVM model.
20:20:14 SQL> -- Then at the very end of this script I use the model
20:20:14 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:20:14 SQL> 
20:20:14 SQL> -- I call this script from 2 other scripts:
20:20:14 SQL> -- score1_5min.sql
20:20:14 SQL> -- score1_5min_gattn.sql
20:20:14 SQL> 
20:20:14 SQL> -- The 1st param is the name of the target attribute.
20:20:14 SQL> -- I like to call my target attributes either gatt or gattn.
20:20:14 SQL> 
20:20:14 SQL> -- Demo:
20:20:14 SQL> -- @score1.sql 'gatt'
20:20:14 SQL> -- @score1.sql 'gattn'
20:20:14 SQL> 
20:20:14 SQL> -- Now, I fill up svmc_apply_prep.
20:20:14 SQL> -- I use same model_name used in score.sql
20:20:14 SQL> DEFINE model_name = 'svmfx101'
20:20:14 SQL> DEFINE bldtable	= 'bme'
20:20:14 SQL> DEFINE scoretable = 'sme'
20:20:14 SQL> DEFINE case_id	= 'prdate'
20:20:14 SQL> -- Demo:
20:20:14 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:20:14 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:20:14 SQL> --
20:20:14 SQL> -- score.sql
20:20:14 SQL> --
20:20:14 SQL> 
20:20:14 SQL> -- usage: score.sql
20:20:14 SQL> 
20:20:14 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:20:14 SQL> 
20:20:14 SQL> -- DEFINE target	   = 'gatt'
20:20:14 SQL> -- DEFINE model_name = 'svmfx101'
20:20:14 SQL> -- DEFINE bldtable   = 'bme'
20:20:14 SQL> -- DEFINE scoretable = 'sme'
20:20:14 SQL> -- DEFINE case_id    = 'prdate'
20:20:14 SQL> 
20:20:14 SQL> DEFINE target	= '&1'
20:20:14 SQL> DEFINE model_name = '&2'
20:20:14 SQL> DEFINE bldtable	= '&3'
20:20:14 SQL> DEFINE scoretable = '&4'
20:20:14 SQL> DEFINE case_id	= '&5'
20:20:14 SQL> 
20:20:14 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:20:14 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:20:14 SQL> 
20:20:14 SQL> -- Builds an SVM model using pl/sql.
20:20:14 SQL> 
20:20:14 SQL> -----------------------------------------------------------------------
20:20:14 SQL> --			    BUILD THE MODEL
20:20:14 SQL> -----------------------------------------------------------------------
20:20:14 SQL> 
20:20:14 SQL> -- Cleanup old build data preparation objects for repeat runs
20:20:14 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.00
20:20:14 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:20:14 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.01
20:20:14 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.00
20:20:14 SQL> 
20:20:14 SQL> 
20:20:14 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:20:14 SQL> --
20:20:14 SQL> -- DROP	TABLE svmc_settings ;
20:20:14 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:20:14 SQL> -- DELETE svmc_settings;
20:20:14 SQL> 
20:20:14 SQL> -- The default classification algorithm is Naive Bayes. So override
20:20:14 SQL> -- this choice to SVM using a settings table.
20:20:14 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:20:14 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:20:14 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:20:14 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:20:14 SQL> -- models.
20:20:14 SQL> --
20:20:14 SQL> 
20:20:14 SQL> -- Do this once and then comment it out.
20:20:14 SQL> -- That makes script go faster.
20:20:14 SQL> -- BEGIN
20:20:14 SQL> -- -- Populate settings table
20:20:14 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:20:14 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:20:14 SQL> --
20:20:14 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:20:14 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:20:14 SQL> --
20:20:14 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:20:14 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:20:14 SQL> --   COMMIT;
20:20:14 SQL> -- END;
20:20:14 SQL> -- /
20:20:14 SQL> 
20:20:14 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:20:14 SQL> 
20:20:14 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:20:14   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:20:14   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:20:14 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:20:14   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:20:14   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:20:15 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:20:15   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:20:15   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:20:15 SQL> 
20:20:15 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:20:15   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:20:15   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:20:15 SQL> 
20:20:15 SQL> --------------------------------
20:20:15 SQL> -- PREPARE BUILD (TRAINING) DATA
20:20:15 SQL> --
20:20:15 SQL> 
20:20:15 SQL> -- 1. Missing Value treatment for all Predictors and
20:20:15 SQL> -- 2. Outlier Treatment and
20:20:15 SQL> -- 3. Normalization are performed below.
20:20:15 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:20:15 SQL> --    normalized here.
20:20:15 SQL> 
20:20:15 SQL> BEGIN
20:20:15   2  	-- Perform missing value treatment for all predictors
20:20:15   3  	-- create miss tables
20:20:15   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:20:15   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:20:15   6  
20:20:15   7  	-- populate miss tables
20:20:15   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:20:15   9  	  miss_table_name => 'svmc_miss_num',
20:20:15  10  	  data_table_name => '&bldtable',
20:20:15  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:20:15  12  
20:20:15  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:20:15  14  	  miss_table_name => 'svmc_miss_cat',
20:20:15  15  	  data_table_name => '&bldtable',
20:20:15  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:20:15  17  
20:20:15  18  	-- xform input data to replace missing values
20:20:15  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:20:15  20  	  miss_table_name => 'svmc_miss_num',
20:20:15  21  	  data_table_name => '&bldtable',
20:20:15  22  	  xform_view_name => 'xformed_build_miss_num');
20:20:15  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:20:15  24  	  miss_table_name => 'svmc_miss_cat',
20:20:15  25  	  data_table_name => '&bldtable',
20:20:15  26  	  xform_view_name => 'xformed_build_miss_cat');
20:20:15  27  
20:20:15  28  	-- Perform outlier treatment.
20:20:15  29  	-- create clip table
20:20:15  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:20:15  31  
20:20:15  32  	-- populate clip table
20:20:15  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:20:15  34  	  clip_table_name => 'svmc_clip',
20:20:15  35  	  data_table_name => '&bldtable',
20:20:15  36  	  tail_frac	  => 0.025,
20:20:15  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:20:15  38  
20:20:15  39  	-- xform input data to winsorized data
20:20:15  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:20:15  41  	  clip_table_name => 'svmc_clip',
20:20:15  42  	  data_table_name => '&bldtable',
20:20:15  43  	  xform_view_name => 'svmc_winsor');
20:20:15  44  
20:20:15  45  	-- create normalization table
20:20:15  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:20:15  47  
20:20:15  48  	-- populate normalization table based on winsorized data
20:20:15  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:20:15  50  	  norm_table_name => 'svmc_norm',
20:20:15  51  	  data_table_name => 'svmc_winsor',
20:20:15  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:20:15  53  
20:20:15  54  	-- normalize the original data
20:20:15  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:20:15  56  	  norm_table_name => 'svmc_norm',
20:20:15  57  	  data_table_name => '&bldtable',
20:20:15  58  	  xform_view_name => 'svmc_build_prep');
20:20:15  59  END;
20:20:15  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:02.40
20:20:17 SQL> 
20:20:17 SQL> ---------------------
20:20:17 SQL> -- CREATE A NEW MODEL
20:20:17 SQL> --
20:20:17 SQL> -- Cleanup old model with the same name for repeat runs
20:20:17 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:20:17   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:20:17   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.99
20:20:18 SQL> 
20:20:18 SQL> -- Build a new SVM Model
20:20:18 SQL> BEGIN
20:20:18   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:20:18   3  	  model_name	      => '&model_name',
20:20:18   4  	  mining_function     => dbms_data_mining.classification,
20:20:18   5  	  data_table_name     => 'svmc_build_prep',
20:20:18   6  	  case_id_column_name => '&case_id',
20:20:18   7  	  target_column_name  => '&target',
20:20:18   8  	  settings_table_name => 'svmc_settings');
20:20:18   9  END;
20:20:18  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:04.97
20:20:23 SQL> 
20:20:23 SQL> -----------------------------------------------------------------------
20:20:23 SQL> --			       APPLY/score THE MODEL
20:20:23 SQL> -----------------------------------------------------------------------
20:20:23 SQL> 
20:20:23 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:20:23 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:20:23   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:20:23   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:20:23 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:20:23   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:20:23   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:20:23 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:20:23   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:20:23   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:20:23 SQL> -----------------------
20:20:23 SQL> -- PREPARE SCORING DATA
20:20:23 SQL> --
20:20:23 SQL> -- If the data for model creation has been prepared, then the data
20:20:23 SQL> -- to be scored using the model must be prepared in the same manner
20:20:23 SQL> -- in order to obtain meaningful results.
20:20:23 SQL> --
20:20:23 SQL> -- 1. Missing Value treatment for all Predictors and
20:20:23 SQL> -- 2. Normalization
20:20:23 SQL> -- No outlier treatment will be performed during test and apply. The
20:20:23 SQL> -- normalization step is sufficient, since the normalization parameters
20:20:23 SQL> -- already capture the effects of outlier treatment done with build data.
20:20:23 SQL> --
20:20:23 SQL> BEGIN
20:20:23   2  	-- Xform Test data to replace missing values
20:20:23   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:20:23   4  	  miss_table_name => 'svmc_miss_num',
20:20:23   5  	  data_table_name => '&scoretable',
20:20:23   6  	  xform_view_name => 'xformed_apply_miss_num');
20:20:23   7  
20:20:23   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:20:23   9  	  miss_table_name => 'svmc_miss_cat',
20:20:23  10  	  data_table_name => '&scoretable',
20:20:23  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:20:23  12  
20:20:23  13  	-- Normalize the data to be scored
20:20:23  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:20:23  15  	  norm_table_name => 'svmc_norm',
20:20:23  16  	  data_table_name => '&scoretable',
20:20:23  17  	  xform_view_name => 'svmc_apply_prep');
20:20:23  18  END;
20:20:23  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.18
20:20:23 SQL> 
20:20:23 SQL> -- Maybe I already collected a score for this prdate.
20:20:23 SQL> -- DELETE it if I did:
20:20:23 SQL> DELETE svm62scores
20:20:23   2  WHERE score > 0
20:20:23   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:20:23   4  -- I need to supply the target attribute name:
20:20:23   5  AND targ = '&1'
20:20:23   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gattn'

0 rows deleted.

Elapsed: 00:00:00.01
20:20:23 SQL> 
20:20:23 SQL> -- We do a drumroll here:
20:20:23 SQL> 
20:20:23 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:20:23   2  SELECT
20:20:23   3  prdate
20:20:23   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:20:23   5  ,sysdate
20:20:23   6  ,SUBSTR(prdate,1,7)pair
20:20:23   7  ,SUBSTR(prdate,-19)ydate
20:20:23   8  ,'&1'
20:20:23   9  FROM svmc_apply_prep
20:20:23  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gattn'

1 row created.

Elapsed: 00:00:00.05
20:20:23 SQL> @score1_5min_gattn.sql	2010-11-30 11:00:00 aud_usd
20:20:23 SQL> --
20:20:23 SQL> -- score1_5min_gattn.sql
20:20:23 SQL> --
20:20:23 SQL> 
20:20:23 SQL> -- Demo:
20:20:23 SQL> -- @score1_5min_gattn.sql 2010-12-31 20:45:01 aud_usd
20:20:23 SQL> 
20:20:23 SQL> CREATE OR REPLACE VIEW sme AS
20:20:23   2  SELECT
20:20:23   3  prdate
20:20:23   4  ,NULL gattn
20:20:23   5  ,g00
20:20:23   6  ,g01
20:20:23   7  ,g02
20:20:23   8  ,g03
20:20:23   9  ,g04
20:20:23  10  ,g05
20:20:23  11  ,g06
20:20:23  12  ,g07
20:20:23  13  ,g08
20:20:23  14  ,g09
20:20:23  15  ,g10
20:20:23  16  ,g11
20:20:23  17  ,g12
20:20:23  18  ,g13
20:20:23  19  ,g14
20:20:23  20  ,g15
20:20:23  21  ,g16
20:20:23  22  ,g17
20:20:23  23  ,g18
20:20:23  24  ,g19
20:20:23  25  ,g20
20:20:23  26  ,g21
20:20:23  27  ,g22
20:20:23  28  ,g23
20:20:23  29  ,g24
20:20:23  30  ,g25
20:20:23  31  ,g26
20:20:23  32  ,g27
20:20:23  33  ,g28
20:20:23  34  ,g29
20:20:23  35  ,g30
20:20:23  36  ,g31
20:20:23  37  ,g32
20:20:23  38  ,g33
20:20:23  39  ,g34
20:20:23  40  ,g35
20:20:23  41  ,g36
20:20:23  42  ,g37
20:20:23  43  ,g38
20:20:23  44  ,g39
20:20:23  45  ,g40
20:20:23  46  ,g41
20:20:23  47  FROM modsrc
20:20:23  48  WHERE ydate = '&1'||' '||'&2'
20:20:23  49  AND pair = '&3'
20:20:23  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-11-30'||' '||'11:00:00'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.06
20:20:23 SQL> 
20:20:23 SQL> -- rpt
20:20:23 SQL> -- We should see just 1 row:
20:20:23 SQL> 
20:20:23 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.01
20:20:23 SQL> 
20:20:23 SQL> -- Build the model:
20:20:23 SQL> CREATE OR REPLACE VIEW bme AS
20:20:23   2  SELECT
20:20:23   3  prdate
20:20:23   4  ,gattn
20:20:23   5  ,g00
20:20:23   6  ,g01
20:20:23   7  ,g02
20:20:23   8  ,g03
20:20:23   9  ,g04
20:20:23  10  ,g05
20:20:23  11  ,g06
20:20:23  12  ,g07
20:20:23  13  ,g08
20:20:23  14  ,g09
20:20:23  15  ,g10
20:20:23  16  ,g11
20:20:23  17  ,g12
20:20:23  18  ,g13
20:20:23  19  ,g14
20:20:23  20  ,g15
20:20:23  21  ,g16
20:20:23  22  ,g17
20:20:23  23  ,g18
20:20:23  24  ,g19
20:20:23  25  ,g20
20:20:23  26  ,g21
20:20:23  27  ,g22
20:20:23  28  ,g23
20:20:23  29  ,g24
20:20:23  30  ,g25
20:20:23  31  ,g26
20:20:23  32  ,g27
20:20:23  33  ,g28
20:20:23  34  ,g29
20:20:23  35  ,g30
20:20:23  36  ,g31
20:20:23  37  ,g32
20:20:23  38  ,g33
20:20:23  39  ,g34
20:20:23  40  ,g35
20:20:23  41  ,g36
20:20:23  42  ,g37
20:20:23  43  ,g38
20:20:23  44  ,g39
20:20:23  45  ,g40
20:20:23  46  ,g41
20:20:23  47  FROM modsrc
20:20:23  48  WHERE gattn IN('nup','up')
20:20:23  49  -- Use only rows which are older than 1 day:
20:20:23  50  AND 1+ydate < '&1'||' '||'&2'
20:20:23  51  AND pair = '&3'
20:20:23  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-11-30'||' '||'11:00:00'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:20:23 SQL> 
20:20:23 SQL> -- rpt
20:20:23 SQL> 
20:20:23 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	     6976
up	     4231

Elapsed: 00:00:00.02
20:20:23 SQL> 
20:20:23 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-11-29 10:55:01

Elapsed: 00:00:00.02
20:20:23 SQL> 
20:20:23 SQL> -- Now build model from bme and score sme
20:20:23 SQL> @score1.sql gattn
20:20:23 SQL> --
20:20:23 SQL> -- score1.sql
20:20:23 SQL> --
20:20:23 SQL> 
20:20:23 SQL> -- I use this script to send 5 params to score.sql
20:20:23 SQL> -- which does the heavy lifting of creating an SVM model.
20:20:23 SQL> -- Then at the very end of this script I use the model
20:20:23 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:20:23 SQL> 
20:20:23 SQL> -- I call this script from 2 other scripts:
20:20:23 SQL> -- score1_5min.sql
20:20:23 SQL> -- score1_5min_gattn.sql
20:20:23 SQL> 
20:20:23 SQL> -- The 1st param is the name of the target attribute.
20:20:23 SQL> -- I like to call my target attributes either gatt or gattn.
20:20:23 SQL> 
20:20:23 SQL> -- Demo:
20:20:23 SQL> -- @score1.sql 'gatt'
20:20:23 SQL> -- @score1.sql 'gattn'
20:20:23 SQL> 
20:20:23 SQL> -- Now, I fill up svmc_apply_prep.
20:20:23 SQL> -- I use same model_name used in score.sql
20:20:23 SQL> DEFINE model_name = 'svmfx101'
20:20:23 SQL> DEFINE bldtable	= 'bme'
20:20:23 SQL> DEFINE scoretable = 'sme'
20:20:23 SQL> DEFINE case_id	= 'prdate'
20:20:23 SQL> -- Demo:
20:20:23 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:20:23 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:20:23 SQL> --
20:20:23 SQL> -- score.sql
20:20:23 SQL> --
20:20:23 SQL> 
20:20:23 SQL> -- usage: score.sql
20:20:23 SQL> 
20:20:23 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:20:23 SQL> 
20:20:23 SQL> -- DEFINE target	   = 'gatt'
20:20:23 SQL> -- DEFINE model_name = 'svmfx101'
20:20:23 SQL> -- DEFINE bldtable   = 'bme'
20:20:23 SQL> -- DEFINE scoretable = 'sme'
20:20:23 SQL> -- DEFINE case_id    = 'prdate'
20:20:23 SQL> 
20:20:23 SQL> DEFINE target	= '&1'
20:20:23 SQL> DEFINE model_name = '&2'
20:20:23 SQL> DEFINE bldtable	= '&3'
20:20:23 SQL> DEFINE scoretable = '&4'
20:20:23 SQL> DEFINE case_id	= '&5'
20:20:23 SQL> 
20:20:23 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:20:23 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:20:23 SQL> 
20:20:23 SQL> -- Builds an SVM model using pl/sql.
20:20:23 SQL> 
20:20:23 SQL> -----------------------------------------------------------------------
20:20:23 SQL> --			    BUILD THE MODEL
20:20:23 SQL> -----------------------------------------------------------------------
20:20:23 SQL> 
20:20:23 SQL> -- Cleanup old build data preparation objects for repeat runs
20:20:23 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.00
20:20:23 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.01
20:20:23 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:20:23 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.00
20:20:23 SQL> 
20:20:23 SQL> 
20:20:23 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:20:23 SQL> --
20:20:23 SQL> -- DROP	TABLE svmc_settings ;
20:20:23 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:20:23 SQL> -- DELETE svmc_settings;
20:20:23 SQL> 
20:20:23 SQL> -- The default classification algorithm is Naive Bayes. So override
20:20:23 SQL> -- this choice to SVM using a settings table.
20:20:23 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:20:23 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:20:23 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:20:23 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:20:23 SQL> -- models.
20:20:23 SQL> --
20:20:23 SQL> 
20:20:23 SQL> -- Do this once and then comment it out.
20:20:23 SQL> -- That makes script go faster.
20:20:23 SQL> -- BEGIN
20:20:23 SQL> -- -- Populate settings table
20:20:23 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:20:23 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:20:23 SQL> --
20:20:23 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:20:23 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:20:23 SQL> --
20:20:23 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:20:23 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:20:23 SQL> --   COMMIT;
20:20:23 SQL> -- END;
20:20:23 SQL> -- /
20:20:23 SQL> 
20:20:23 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.01
20:20:23 SQL> 
20:20:23 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:20:23   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:20:23   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:20:23 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:20:23   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:20:23   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:20:24 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:20:24   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:20:24   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:20:24 SQL> 
20:20:24 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:20:24   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:20:24   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:20:24 SQL> 
20:20:24 SQL> --------------------------------
20:20:24 SQL> -- PREPARE BUILD (TRAINING) DATA
20:20:24 SQL> --
20:20:24 SQL> 
20:20:24 SQL> -- 1. Missing Value treatment for all Predictors and
20:20:24 SQL> -- 2. Outlier Treatment and
20:20:24 SQL> -- 3. Normalization are performed below.
20:20:24 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:20:24 SQL> --    normalized here.
20:20:24 SQL> 
20:20:24 SQL> BEGIN
20:20:24   2  	-- Perform missing value treatment for all predictors
20:20:24   3  	-- create miss tables
20:20:24   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:20:24   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:20:24   6  
20:20:24   7  	-- populate miss tables
20:20:24   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:20:24   9  	  miss_table_name => 'svmc_miss_num',
20:20:24  10  	  data_table_name => '&bldtable',
20:20:24  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:20:24  12  
20:20:24  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:20:24  14  	  miss_table_name => 'svmc_miss_cat',
20:20:24  15  	  data_table_name => '&bldtable',
20:20:24  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:20:24  17  
20:20:24  18  	-- xform input data to replace missing values
20:20:24  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:20:24  20  	  miss_table_name => 'svmc_miss_num',
20:20:24  21  	  data_table_name => '&bldtable',
20:20:24  22  	  xform_view_name => 'xformed_build_miss_num');
20:20:24  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:20:24  24  	  miss_table_name => 'svmc_miss_cat',
20:20:24  25  	  data_table_name => '&bldtable',
20:20:24  26  	  xform_view_name => 'xformed_build_miss_cat');
20:20:24  27  
20:20:24  28  	-- Perform outlier treatment.
20:20:24  29  	-- create clip table
20:20:24  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:20:24  31  
20:20:24  32  	-- populate clip table
20:20:24  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:20:24  34  	  clip_table_name => 'svmc_clip',
20:20:24  35  	  data_table_name => '&bldtable',
20:20:24  36  	  tail_frac	  => 0.025,
20:20:24  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:20:24  38  
20:20:24  39  	-- xform input data to winsorized data
20:20:24  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:20:24  41  	  clip_table_name => 'svmc_clip',
20:20:24  42  	  data_table_name => '&bldtable',
20:20:24  43  	  xform_view_name => 'svmc_winsor');
20:20:24  44  
20:20:24  45  	-- create normalization table
20:20:24  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:20:24  47  
20:20:24  48  	-- populate normalization table based on winsorized data
20:20:24  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:20:24  50  	  norm_table_name => 'svmc_norm',
20:20:24  51  	  data_table_name => 'svmc_winsor',
20:20:24  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:20:24  53  
20:20:24  54  	-- normalize the original data
20:20:24  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:20:24  56  	  norm_table_name => 'svmc_norm',
20:20:24  57  	  data_table_name => '&bldtable',
20:20:24  58  	  xform_view_name => 'svmc_build_prep');
20:20:24  59  END;
20:20:24  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.73
20:20:25 SQL> 
20:20:25 SQL> ---------------------
20:20:25 SQL> -- CREATE A NEW MODEL
20:20:25 SQL> --
20:20:25 SQL> -- Cleanup old model with the same name for repeat runs
20:20:25 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:20:25   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:20:25   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.89
20:20:26 SQL> 
20:20:26 SQL> -- Build a new SVM Model
20:20:26 SQL> BEGIN
20:20:26   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:20:26   3  	  model_name	      => '&model_name',
20:20:26   4  	  mining_function     => dbms_data_mining.classification,
20:20:26   5  	  data_table_name     => 'svmc_build_prep',
20:20:26   6  	  case_id_column_name => '&case_id',
20:20:26   7  	  target_column_name  => '&target',
20:20:26   8  	  settings_table_name => 'svmc_settings');
20:20:26   9  END;
20:20:26  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:04.60
20:20:31 SQL> 
20:20:31 SQL> -----------------------------------------------------------------------
20:20:31 SQL> --			       APPLY/score THE MODEL
20:20:31 SQL> -----------------------------------------------------------------------
20:20:31 SQL> 
20:20:31 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:20:31 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:20:31   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:20:31   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:20:31 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:20:31   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:20:31   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:20:31 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:20:31   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:20:31   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:20:31 SQL> -----------------------
20:20:31 SQL> -- PREPARE SCORING DATA
20:20:31 SQL> --
20:20:31 SQL> -- If the data for model creation has been prepared, then the data
20:20:31 SQL> -- to be scored using the model must be prepared in the same manner
20:20:31 SQL> -- in order to obtain meaningful results.
20:20:31 SQL> --
20:20:31 SQL> -- 1. Missing Value treatment for all Predictors and
20:20:31 SQL> -- 2. Normalization
20:20:31 SQL> -- No outlier treatment will be performed during test and apply. The
20:20:31 SQL> -- normalization step is sufficient, since the normalization parameters
20:20:31 SQL> -- already capture the effects of outlier treatment done with build data.
20:20:31 SQL> --
20:20:31 SQL> BEGIN
20:20:31   2  	-- Xform Test data to replace missing values
20:20:31   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:20:31   4  	  miss_table_name => 'svmc_miss_num',
20:20:31   5  	  data_table_name => '&scoretable',
20:20:31   6  	  xform_view_name => 'xformed_apply_miss_num');
20:20:31   7  
20:20:31   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:20:31   9  	  miss_table_name => 'svmc_miss_cat',
20:20:31  10  	  data_table_name => '&scoretable',
20:20:31  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:20:31  12  
20:20:31  13  	-- Normalize the data to be scored
20:20:31  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:20:31  15  	  norm_table_name => 'svmc_norm',
20:20:31  16  	  data_table_name => '&scoretable',
20:20:31  17  	  xform_view_name => 'svmc_apply_prep');
20:20:31  18  END;
20:20:31  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.19
20:20:31 SQL> 
20:20:31 SQL> -- Maybe I already collected a score for this prdate.
20:20:31 SQL> -- DELETE it if I did:
20:20:31 SQL> DELETE svm62scores
20:20:31   2  WHERE score > 0
20:20:31   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:20:31   4  -- I need to supply the target attribute name:
20:20:31   5  AND targ = '&1'
20:20:31   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gattn'

0 rows deleted.

Elapsed: 00:00:00.01
20:20:31 SQL> 
20:20:31 SQL> -- We do a drumroll here:
20:20:31 SQL> 
20:20:31 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:20:31   2  SELECT
20:20:31   3  prdate
20:20:31   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:20:31   5  ,sysdate
20:20:31   6  ,SUBSTR(prdate,1,7)pair
20:20:31   7  ,SUBSTR(prdate,-19)ydate
20:20:31   8  ,'&1'
20:20:31   9  FROM svmc_apply_prep
20:20:31  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gattn'

1 row created.

Elapsed: 00:00:00.04
20:20:31 SQL> @score1_5min_gattn.sql	2010-10-31 22:00:01 aud_usd
20:20:31 SQL> --
20:20:31 SQL> -- score1_5min_gattn.sql
20:20:31 SQL> --
20:20:31 SQL> 
20:20:31 SQL> -- Demo:
20:20:31 SQL> -- @score1_5min_gattn.sql 2010-12-31 20:45:01 aud_usd
20:20:31 SQL> 
20:20:31 SQL> CREATE OR REPLACE VIEW sme AS
20:20:31   2  SELECT
20:20:31   3  prdate
20:20:31   4  ,NULL gattn
20:20:31   5  ,g00
20:20:31   6  ,g01
20:20:31   7  ,g02
20:20:31   8  ,g03
20:20:31   9  ,g04
20:20:31  10  ,g05
20:20:31  11  ,g06
20:20:31  12  ,g07
20:20:31  13  ,g08
20:20:31  14  ,g09
20:20:31  15  ,g10
20:20:31  16  ,g11
20:20:31  17  ,g12
20:20:31  18  ,g13
20:20:31  19  ,g14
20:20:31  20  ,g15
20:20:31  21  ,g16
20:20:31  22  ,g17
20:20:31  23  ,g18
20:20:31  24  ,g19
20:20:31  25  ,g20
20:20:31  26  ,g21
20:20:31  27  ,g22
20:20:31  28  ,g23
20:20:31  29  ,g24
20:20:31  30  ,g25
20:20:31  31  ,g26
20:20:31  32  ,g27
20:20:31  33  ,g28
20:20:31  34  ,g29
20:20:31  35  ,g30
20:20:31  36  ,g31
20:20:31  37  ,g32
20:20:31  38  ,g33
20:20:31  39  ,g34
20:20:31  40  ,g35
20:20:31  41  ,g36
20:20:31  42  ,g37
20:20:31  43  ,g38
20:20:31  44  ,g39
20:20:31  45  ,g40
20:20:31  46  ,g41
20:20:31  47  FROM modsrc
20:20:31  48  WHERE ydate = '&1'||' '||'&2'
20:20:31  49  AND pair = '&3'
20:20:31  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-10-31'||' '||'22:00:01'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.06
20:20:31 SQL> 
20:20:31 SQL> -- rpt
20:20:31 SQL> -- We should see just 1 row:
20:20:31 SQL> 
20:20:31 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.02
20:20:31 SQL> 
20:20:31 SQL> -- Build the model:
20:20:31 SQL> CREATE OR REPLACE VIEW bme AS
20:20:31   2  SELECT
20:20:31   3  prdate
20:20:31   4  ,gattn
20:20:31   5  ,g00
20:20:31   6  ,g01
20:20:31   7  ,g02
20:20:31   8  ,g03
20:20:31   9  ,g04
20:20:31  10  ,g05
20:20:31  11  ,g06
20:20:31  12  ,g07
20:20:31  13  ,g08
20:20:31  14  ,g09
20:20:31  15  ,g10
20:20:31  16  ,g11
20:20:31  17  ,g12
20:20:31  18  ,g13
20:20:31  19  ,g14
20:20:31  20  ,g15
20:20:31  21  ,g16
20:20:31  22  ,g17
20:20:31  23  ,g18
20:20:31  24  ,g19
20:20:31  25  ,g20
20:20:31  26  ,g21
20:20:31  27  ,g22
20:20:31  28  ,g23
20:20:31  29  ,g24
20:20:31  30  ,g25
20:20:31  31  ,g26
20:20:31  32  ,g27
20:20:31  33  ,g28
20:20:31  34  ,g29
20:20:31  35  ,g30
20:20:31  36  ,g31
20:20:31  37  ,g32
20:20:31  38  ,g33
20:20:31  39  ,g34
20:20:31  40  ,g35
20:20:31  41  ,g36
20:20:31  42  ,g37
20:20:31  43  ,g38
20:20:31  44  ,g39
20:20:31  45  ,g40
20:20:31  46  ,g41
20:20:31  47  FROM modsrc
20:20:31  48  WHERE gattn IN('nup','up')
20:20:31  49  -- Use only rows which are older than 1 day:
20:20:31  50  AND 1+ydate < '&1'||' '||'&2'
20:20:31  51  AND pair = '&3'
20:20:31  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-10-31'||' '||'22:00:01'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:20:31 SQL> 
20:20:31 SQL> -- rpt
20:20:31 SQL> 
20:20:31 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	     3341
up	     1899

Elapsed: 00:00:00.02
20:20:31 SQL> 
20:20:31 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-10-29 21:50:01

Elapsed: 00:00:00.02
20:20:31 SQL> 
20:20:31 SQL> -- Now build model from bme and score sme
20:20:31 SQL> @score1.sql gattn
20:20:31 SQL> --
20:20:31 SQL> -- score1.sql
20:20:31 SQL> --
20:20:31 SQL> 
20:20:31 SQL> -- I use this script to send 5 params to score.sql
20:20:31 SQL> -- which does the heavy lifting of creating an SVM model.
20:20:31 SQL> -- Then at the very end of this script I use the model
20:20:31 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:20:31 SQL> 
20:20:31 SQL> -- I call this script from 2 other scripts:
20:20:31 SQL> -- score1_5min.sql
20:20:31 SQL> -- score1_5min_gattn.sql
20:20:31 SQL> 
20:20:31 SQL> -- The 1st param is the name of the target attribute.
20:20:31 SQL> -- I like to call my target attributes either gatt or gattn.
20:20:31 SQL> 
20:20:31 SQL> -- Demo:
20:20:31 SQL> -- @score1.sql 'gatt'
20:20:31 SQL> -- @score1.sql 'gattn'
20:20:31 SQL> 
20:20:31 SQL> -- Now, I fill up svmc_apply_prep.
20:20:31 SQL> -- I use same model_name used in score.sql
20:20:31 SQL> DEFINE model_name = 'svmfx101'
20:20:31 SQL> DEFINE bldtable	= 'bme'
20:20:31 SQL> DEFINE scoretable = 'sme'
20:20:31 SQL> DEFINE case_id	= 'prdate'
20:20:31 SQL> -- Demo:
20:20:31 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:20:31 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:20:31 SQL> --
20:20:31 SQL> -- score.sql
20:20:31 SQL> --
20:20:31 SQL> 
20:20:31 SQL> -- usage: score.sql
20:20:31 SQL> 
20:20:31 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:20:31 SQL> 
20:20:31 SQL> -- DEFINE target	   = 'gatt'
20:20:31 SQL> -- DEFINE model_name = 'svmfx101'
20:20:31 SQL> -- DEFINE bldtable   = 'bme'
20:20:31 SQL> -- DEFINE scoretable = 'sme'
20:20:31 SQL> -- DEFINE case_id    = 'prdate'
20:20:31 SQL> 
20:20:31 SQL> DEFINE target	= '&1'
20:20:31 SQL> DEFINE model_name = '&2'
20:20:31 SQL> DEFINE bldtable	= '&3'
20:20:31 SQL> DEFINE scoretable = '&4'
20:20:31 SQL> DEFINE case_id	= '&5'
20:20:31 SQL> 
20:20:31 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:20:31 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:20:31 SQL> 
20:20:31 SQL> -- Builds an SVM model using pl/sql.
20:20:31 SQL> 
20:20:31 SQL> -----------------------------------------------------------------------
20:20:31 SQL> --			    BUILD THE MODEL
20:20:31 SQL> -----------------------------------------------------------------------
20:20:31 SQL> 
20:20:31 SQL> -- Cleanup old build data preparation objects for repeat runs
20:20:31 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.00
20:20:31 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:20:31 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.01
20:20:31 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.00
20:20:31 SQL> 
20:20:31 SQL> 
20:20:31 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:20:31 SQL> --
20:20:31 SQL> -- DROP	TABLE svmc_settings ;
20:20:31 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:20:31 SQL> -- DELETE svmc_settings;
20:20:31 SQL> 
20:20:31 SQL> -- The default classification algorithm is Naive Bayes. So override
20:20:31 SQL> -- this choice to SVM using a settings table.
20:20:31 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:20:31 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:20:31 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:20:31 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:20:31 SQL> -- models.
20:20:31 SQL> --
20:20:31 SQL> 
20:20:31 SQL> -- Do this once and then comment it out.
20:20:31 SQL> -- That makes script go faster.
20:20:31 SQL> -- BEGIN
20:20:31 SQL> -- -- Populate settings table
20:20:31 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:20:31 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:20:31 SQL> --
20:20:31 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:20:31 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:20:31 SQL> --
20:20:31 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:20:31 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:20:31 SQL> --   COMMIT;
20:20:31 SQL> -- END;
20:20:31 SQL> -- /
20:20:31 SQL> 
20:20:31 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:20:31 SQL> 
20:20:31 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:20:31   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:20:31   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:20:31 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:20:31   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:20:31   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:20:31 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:20:31   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:20:31   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:20:31 SQL> 
20:20:31 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:20:31   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:20:31   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:20:31 SQL> 
20:20:31 SQL> --------------------------------
20:20:31 SQL> -- PREPARE BUILD (TRAINING) DATA
20:20:31 SQL> --
20:20:31 SQL> 
20:20:31 SQL> -- 1. Missing Value treatment for all Predictors and
20:20:31 SQL> -- 2. Outlier Treatment and
20:20:31 SQL> -- 3. Normalization are performed below.
20:20:31 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:20:31 SQL> --    normalized here.
20:20:31 SQL> 
20:20:31 SQL> BEGIN
20:20:31   2  	-- Perform missing value treatment for all predictors
20:20:31   3  	-- create miss tables
20:20:31   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:20:31   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:20:31   6  
20:20:31   7  	-- populate miss tables
20:20:31   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:20:31   9  	  miss_table_name => 'svmc_miss_num',
20:20:31  10  	  data_table_name => '&bldtable',
20:20:31  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:20:31  12  
20:20:31  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:20:31  14  	  miss_table_name => 'svmc_miss_cat',
20:20:31  15  	  data_table_name => '&bldtable',
20:20:31  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:20:31  17  
20:20:31  18  	-- xform input data to replace missing values
20:20:31  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:20:31  20  	  miss_table_name => 'svmc_miss_num',
20:20:31  21  	  data_table_name => '&bldtable',
20:20:31  22  	  xform_view_name => 'xformed_build_miss_num');
20:20:31  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:20:31  24  	  miss_table_name => 'svmc_miss_cat',
20:20:31  25  	  data_table_name => '&bldtable',
20:20:31  26  	  xform_view_name => 'xformed_build_miss_cat');
20:20:31  27  
20:20:31  28  	-- Perform outlier treatment.
20:20:31  29  	-- create clip table
20:20:31  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:20:31  31  
20:20:31  32  	-- populate clip table
20:20:31  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:20:31  34  	  clip_table_name => 'svmc_clip',
20:20:31  35  	  data_table_name => '&bldtable',
20:20:31  36  	  tail_frac	  => 0.025,
20:20:31  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:20:31  38  
20:20:31  39  	-- xform input data to winsorized data
20:20:31  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:20:31  41  	  clip_table_name => 'svmc_clip',
20:20:31  42  	  data_table_name => '&bldtable',
20:20:31  43  	  xform_view_name => 'svmc_winsor');
20:20:31  44  
20:20:31  45  	-- create normalization table
20:20:31  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:20:31  47  
20:20:31  48  	-- populate normalization table based on winsorized data
20:20:31  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:20:31  50  	  norm_table_name => 'svmc_norm',
20:20:31  51  	  data_table_name => 'svmc_winsor',
20:20:31  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:20:31  53  
20:20:31  54  	-- normalize the original data
20:20:31  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:20:31  56  	  norm_table_name => 'svmc_norm',
20:20:31  57  	  data_table_name => '&bldtable',
20:20:31  58  	  xform_view_name => 'svmc_build_prep');
20:20:31  59  END;
20:20:31  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.29
20:20:33 SQL> 
20:20:33 SQL> ---------------------
20:20:33 SQL> -- CREATE A NEW MODEL
20:20:33 SQL> --
20:20:33 SQL> -- Cleanup old model with the same name for repeat runs
20:20:33 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:20:33   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:20:33   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.05
20:20:34 SQL> 
20:20:34 SQL> -- Build a new SVM Model
20:20:34 SQL> BEGIN
20:20:34   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:20:34   3  	  model_name	      => '&model_name',
20:20:34   4  	  mining_function     => dbms_data_mining.classification,
20:20:34   5  	  data_table_name     => 'svmc_build_prep',
20:20:34   6  	  case_id_column_name => '&case_id',
20:20:34   7  	  target_column_name  => '&target',
20:20:34   8  	  settings_table_name => 'svmc_settings');
20:20:34   9  END;
20:20:34  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:03.32
20:20:37 SQL> 
20:20:37 SQL> -----------------------------------------------------------------------
20:20:37 SQL> --			       APPLY/score THE MODEL
20:20:37 SQL> -----------------------------------------------------------------------
20:20:37 SQL> 
20:20:37 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:20:37 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:20:37   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:20:37   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:20:37 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:20:37   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:20:37   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:20:37 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:20:37   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:20:37   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:20:37 SQL> -----------------------
20:20:37 SQL> -- PREPARE SCORING DATA
20:20:37 SQL> --
20:20:37 SQL> -- If the data for model creation has been prepared, then the data
20:20:37 SQL> -- to be scored using the model must be prepared in the same manner
20:20:37 SQL> -- in order to obtain meaningful results.
20:20:37 SQL> --
20:20:37 SQL> -- 1. Missing Value treatment for all Predictors and
20:20:37 SQL> -- 2. Normalization
20:20:37 SQL> -- No outlier treatment will be performed during test and apply. The
20:20:37 SQL> -- normalization step is sufficient, since the normalization parameters
20:20:37 SQL> -- already capture the effects of outlier treatment done with build data.
20:20:37 SQL> --
20:20:37 SQL> BEGIN
20:20:37   2  	-- Xform Test data to replace missing values
20:20:37   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:20:37   4  	  miss_table_name => 'svmc_miss_num',
20:20:37   5  	  data_table_name => '&scoretable',
20:20:37   6  	  xform_view_name => 'xformed_apply_miss_num');
20:20:37   7  
20:20:37   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:20:37   9  	  miss_table_name => 'svmc_miss_cat',
20:20:37  10  	  data_table_name => '&scoretable',
20:20:37  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:20:37  12  
20:20:37  13  	-- Normalize the data to be scored
20:20:37  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:20:37  15  	  norm_table_name => 'svmc_norm',
20:20:37  16  	  data_table_name => '&scoretable',
20:20:37  17  	  xform_view_name => 'svmc_apply_prep');
20:20:37  18  END;
20:20:37  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.19
20:20:37 SQL> 
20:20:37 SQL> -- Maybe I already collected a score for this prdate.
20:20:37 SQL> -- DELETE it if I did:
20:20:37 SQL> DELETE svm62scores
20:20:37   2  WHERE score > 0
20:20:37   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:20:37   4  -- I need to supply the target attribute name:
20:20:37   5  AND targ = '&1'
20:20:37   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gattn'

0 rows deleted.

Elapsed: 00:00:00.02
20:20:37 SQL> 
20:20:37 SQL> -- We do a drumroll here:
20:20:37 SQL> 
20:20:37 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:20:37   2  SELECT
20:20:37   3  prdate
20:20:37   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:20:37   5  ,sysdate
20:20:37   6  ,SUBSTR(prdate,1,7)pair
20:20:37   7  ,SUBSTR(prdate,-19)ydate
20:20:37   8  ,'&1'
20:20:37   9  FROM svmc_apply_prep
20:20:37  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gattn'

1 row created.

Elapsed: 00:00:00.05
20:20:37 SQL> @score1_5min_gattn.sql	2010-10-18 01:40:01 aud_usd
20:20:37 SQL> --
20:20:37 SQL> -- score1_5min_gattn.sql
20:20:37 SQL> --
20:20:37 SQL> 
20:20:37 SQL> -- Demo:
20:20:37 SQL> -- @score1_5min_gattn.sql 2010-12-31 20:45:01 aud_usd
20:20:37 SQL> 
20:20:37 SQL> CREATE OR REPLACE VIEW sme AS
20:20:37   2  SELECT
20:20:37   3  prdate
20:20:37   4  ,NULL gattn
20:20:37   5  ,g00
20:20:37   6  ,g01
20:20:37   7  ,g02
20:20:37   8  ,g03
20:20:37   9  ,g04
20:20:37  10  ,g05
20:20:37  11  ,g06
20:20:37  12  ,g07
20:20:37  13  ,g08
20:20:37  14  ,g09
20:20:37  15  ,g10
20:20:37  16  ,g11
20:20:37  17  ,g12
20:20:37  18  ,g13
20:20:37  19  ,g14
20:20:37  20  ,g15
20:20:37  21  ,g16
20:20:37  22  ,g17
20:20:37  23  ,g18
20:20:37  24  ,g19
20:20:37  25  ,g20
20:20:37  26  ,g21
20:20:37  27  ,g22
20:20:37  28  ,g23
20:20:37  29  ,g24
20:20:37  30  ,g25
20:20:37  31  ,g26
20:20:37  32  ,g27
20:20:37  33  ,g28
20:20:37  34  ,g29
20:20:37  35  ,g30
20:20:37  36  ,g31
20:20:37  37  ,g32
20:20:37  38  ,g33
20:20:37  39  ,g34
20:20:37  40  ,g35
20:20:37  41  ,g36
20:20:37  42  ,g37
20:20:37  43  ,g38
20:20:37  44  ,g39
20:20:37  45  ,g40
20:20:37  46  ,g41
20:20:37  47  FROM modsrc
20:20:37  48  WHERE ydate = '&1'||' '||'&2'
20:20:37  49  AND pair = '&3'
20:20:37  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-10-18'||' '||'01:40:01'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:20:38 SQL> 
20:20:38 SQL> -- rpt
20:20:38 SQL> -- We should see just 1 row:
20:20:38 SQL> 
20:20:38 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.02
20:20:38 SQL> 
20:20:38 SQL> -- Build the model:
20:20:38 SQL> CREATE OR REPLACE VIEW bme AS
20:20:38   2  SELECT
20:20:38   3  prdate
20:20:38   4  ,gattn
20:20:38   5  ,g00
20:20:38   6  ,g01
20:20:38   7  ,g02
20:20:38   8  ,g03
20:20:38   9  ,g04
20:20:38  10  ,g05
20:20:38  11  ,g06
20:20:38  12  ,g07
20:20:38  13  ,g08
20:20:38  14  ,g09
20:20:38  15  ,g10
20:20:38  16  ,g11
20:20:38  17  ,g12
20:20:38  18  ,g13
20:20:38  19  ,g14
20:20:38  20  ,g15
20:20:38  21  ,g16
20:20:38  22  ,g17
20:20:38  23  ,g18
20:20:38  24  ,g19
20:20:38  25  ,g20
20:20:38  26  ,g21
20:20:38  27  ,g22
20:20:38  28  ,g23
20:20:38  29  ,g24
20:20:38  30  ,g25
20:20:38  31  ,g26
20:20:38  32  ,g27
20:20:38  33  ,g28
20:20:38  34  ,g29
20:20:38  35  ,g30
20:20:38  36  ,g31
20:20:38  37  ,g32
20:20:38  38  ,g33
20:20:38  39  ,g34
20:20:38  40  ,g35
20:20:38  41  ,g36
20:20:38  42  ,g37
20:20:38  43  ,g38
20:20:38  44  ,g39
20:20:38  45  ,g40
20:20:38  46  ,g41
20:20:38  47  FROM modsrc
20:20:38  48  WHERE gattn IN('nup','up')
20:20:38  49  -- Use only rows which are older than 1 day:
20:20:38  50  AND 1+ydate < '&1'||' '||'&2'
20:20:38  51  AND pair = '&3'
20:20:38  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-10-18'||' '||'01:40:01'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:20:38 SQL> 
20:20:38 SQL> -- rpt
20:20:38 SQL> 
20:20:38 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	     1585
up	      751

Elapsed: 00:00:00.02
20:20:38 SQL> 
20:20:38 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-10-15 21:50:01

Elapsed: 00:00:00.01
20:20:38 SQL> 
20:20:38 SQL> -- Now build model from bme and score sme
20:20:38 SQL> @score1.sql gattn
20:20:38 SQL> --
20:20:38 SQL> -- score1.sql
20:20:38 SQL> --
20:20:38 SQL> 
20:20:38 SQL> -- I use this script to send 5 params to score.sql
20:20:38 SQL> -- which does the heavy lifting of creating an SVM model.
20:20:38 SQL> -- Then at the very end of this script I use the model
20:20:38 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:20:38 SQL> 
20:20:38 SQL> -- I call this script from 2 other scripts:
20:20:38 SQL> -- score1_5min.sql
20:20:38 SQL> -- score1_5min_gattn.sql
20:20:38 SQL> 
20:20:38 SQL> -- The 1st param is the name of the target attribute.
20:20:38 SQL> -- I like to call my target attributes either gatt or gattn.
20:20:38 SQL> 
20:20:38 SQL> -- Demo:
20:20:38 SQL> -- @score1.sql 'gatt'
20:20:38 SQL> -- @score1.sql 'gattn'
20:20:38 SQL> 
20:20:38 SQL> -- Now, I fill up svmc_apply_prep.
20:20:38 SQL> -- I use same model_name used in score.sql
20:20:38 SQL> DEFINE model_name = 'svmfx101'
20:20:38 SQL> DEFINE bldtable	= 'bme'
20:20:38 SQL> DEFINE scoretable = 'sme'
20:20:38 SQL> DEFINE case_id	= 'prdate'
20:20:38 SQL> -- Demo:
20:20:38 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:20:38 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:20:38 SQL> --
20:20:38 SQL> -- score.sql
20:20:38 SQL> --
20:20:38 SQL> 
20:20:38 SQL> -- usage: score.sql
20:20:38 SQL> 
20:20:38 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:20:38 SQL> 
20:20:38 SQL> -- DEFINE target	   = 'gatt'
20:20:38 SQL> -- DEFINE model_name = 'svmfx101'
20:20:38 SQL> -- DEFINE bldtable   = 'bme'
20:20:38 SQL> -- DEFINE scoretable = 'sme'
20:20:38 SQL> -- DEFINE case_id    = 'prdate'
20:20:38 SQL> 
20:20:38 SQL> DEFINE target	= '&1'
20:20:38 SQL> DEFINE model_name = '&2'
20:20:38 SQL> DEFINE bldtable	= '&3'
20:20:38 SQL> DEFINE scoretable = '&4'
20:20:38 SQL> DEFINE case_id	= '&5'
20:20:38 SQL> 
20:20:38 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:20:38 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:20:38 SQL> 
20:20:38 SQL> -- Builds an SVM model using pl/sql.
20:20:38 SQL> 
20:20:38 SQL> -----------------------------------------------------------------------
20:20:38 SQL> --			    BUILD THE MODEL
20:20:38 SQL> -----------------------------------------------------------------------
20:20:38 SQL> 
20:20:38 SQL> -- Cleanup old build data preparation objects for repeat runs
20:20:38 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.01
20:20:38 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:20:38 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:20:38 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.00
20:20:38 SQL> 
20:20:38 SQL> 
20:20:38 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:20:38 SQL> --
20:20:38 SQL> -- DROP	TABLE svmc_settings ;
20:20:38 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:20:38 SQL> -- DELETE svmc_settings;
20:20:38 SQL> 
20:20:38 SQL> -- The default classification algorithm is Naive Bayes. So override
20:20:38 SQL> -- this choice to SVM using a settings table.
20:20:38 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:20:38 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:20:38 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:20:38 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:20:38 SQL> -- models.
20:20:38 SQL> --
20:20:38 SQL> 
20:20:38 SQL> -- Do this once and then comment it out.
20:20:38 SQL> -- That makes script go faster.
20:20:38 SQL> -- BEGIN
20:20:38 SQL> -- -- Populate settings table
20:20:38 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:20:38 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:20:38 SQL> --
20:20:38 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:20:38 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:20:38 SQL> --
20:20:38 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:20:38 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:20:38 SQL> --   COMMIT;
20:20:38 SQL> -- END;
20:20:38 SQL> -- /
20:20:38 SQL> 
20:20:38 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.01
20:20:38 SQL> 
20:20:38 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:20:38   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:20:38   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:20:38 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:20:38   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:20:38   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:20:38 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:20:38   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:20:38   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
20:20:38 SQL> 
20:20:38 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:20:38   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:20:38   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:20:38 SQL> 
20:20:38 SQL> --------------------------------
20:20:38 SQL> -- PREPARE BUILD (TRAINING) DATA
20:20:38 SQL> --
20:20:38 SQL> 
20:20:38 SQL> -- 1. Missing Value treatment for all Predictors and
20:20:38 SQL> -- 2. Outlier Treatment and
20:20:38 SQL> -- 3. Normalization are performed below.
20:20:38 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:20:38 SQL> --    normalized here.
20:20:38 SQL> 
20:20:38 SQL> BEGIN
20:20:38   2  	-- Perform missing value treatment for all predictors
20:20:38   3  	-- create miss tables
20:20:38   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:20:38   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:20:38   6  
20:20:38   7  	-- populate miss tables
20:20:38   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:20:38   9  	  miss_table_name => 'svmc_miss_num',
20:20:38  10  	  data_table_name => '&bldtable',
20:20:38  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:20:38  12  
20:20:38  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:20:38  14  	  miss_table_name => 'svmc_miss_cat',
20:20:38  15  	  data_table_name => '&bldtable',
20:20:38  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:20:38  17  
20:20:38  18  	-- xform input data to replace missing values
20:20:38  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:20:38  20  	  miss_table_name => 'svmc_miss_num',
20:20:38  21  	  data_table_name => '&bldtable',
20:20:38  22  	  xform_view_name => 'xformed_build_miss_num');
20:20:38  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:20:38  24  	  miss_table_name => 'svmc_miss_cat',
20:20:38  25  	  data_table_name => '&bldtable',
20:20:38  26  	  xform_view_name => 'xformed_build_miss_cat');
20:20:38  27  
20:20:38  28  	-- Perform outlier treatment.
20:20:38  29  	-- create clip table
20:20:38  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:20:38  31  
20:20:38  32  	-- populate clip table
20:20:38  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:20:38  34  	  clip_table_name => 'svmc_clip',
20:20:38  35  	  data_table_name => '&bldtable',
20:20:38  36  	  tail_frac	  => 0.025,
20:20:38  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:20:38  38  
20:20:38  39  	-- xform input data to winsorized data
20:20:38  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:20:38  41  	  clip_table_name => 'svmc_clip',
20:20:38  42  	  data_table_name => '&bldtable',
20:20:38  43  	  xform_view_name => 'svmc_winsor');
20:20:38  44  
20:20:38  45  	-- create normalization table
20:20:38  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:20:38  47  
20:20:38  48  	-- populate normalization table based on winsorized data
20:20:38  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:20:38  50  	  norm_table_name => 'svmc_norm',
20:20:38  51  	  data_table_name => 'svmc_winsor',
20:20:38  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:20:38  53  
20:20:38  54  	-- normalize the original data
20:20:38  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:20:38  56  	  norm_table_name => 'svmc_norm',
20:20:38  57  	  data_table_name => '&bldtable',
20:20:38  58  	  xform_view_name => 'svmc_build_prep');
20:20:38  59  END;
20:20:38  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.08
20:20:39 SQL> 
20:20:39 SQL> ---------------------
20:20:39 SQL> -- CREATE A NEW MODEL
20:20:39 SQL> --
20:20:39 SQL> -- Cleanup old model with the same name for repeat runs
20:20:39 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:20:39   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:20:39   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.03
20:20:40 SQL> 
20:20:40 SQL> -- Build a new SVM Model
20:20:40 SQL> BEGIN
20:20:40   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:20:40   3  	  model_name	      => '&model_name',
20:20:40   4  	  mining_function     => dbms_data_mining.classification,
20:20:40   5  	  data_table_name     => 'svmc_build_prep',
20:20:40   6  	  case_id_column_name => '&case_id',
20:20:40   7  	  target_column_name  => '&target',
20:20:40   8  	  settings_table_name => 'svmc_settings');
20:20:40   9  END;
20:20:40  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:02.55
20:20:42 SQL> 
20:20:42 SQL> -----------------------------------------------------------------------
20:20:42 SQL> --			       APPLY/score THE MODEL
20:20:42 SQL> -----------------------------------------------------------------------
20:20:42 SQL> 
20:20:42 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:20:42 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:20:42   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:20:42   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:20:42 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:20:42   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:20:42   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:20:43 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:20:43   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:20:43   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:20:43 SQL> -----------------------
20:20:43 SQL> -- PREPARE SCORING DATA
20:20:43 SQL> --
20:20:43 SQL> -- If the data for model creation has been prepared, then the data
20:20:43 SQL> -- to be scored using the model must be prepared in the same manner
20:20:43 SQL> -- in order to obtain meaningful results.
20:20:43 SQL> --
20:20:43 SQL> -- 1. Missing Value treatment for all Predictors and
20:20:43 SQL> -- 2. Normalization
20:20:43 SQL> -- No outlier treatment will be performed during test and apply. The
20:20:43 SQL> -- normalization step is sufficient, since the normalization parameters
20:20:43 SQL> -- already capture the effects of outlier treatment done with build data.
20:20:43 SQL> --
20:20:43 SQL> BEGIN
20:20:43   2  	-- Xform Test data to replace missing values
20:20:43   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:20:43   4  	  miss_table_name => 'svmc_miss_num',
20:20:43   5  	  data_table_name => '&scoretable',
20:20:43   6  	  xform_view_name => 'xformed_apply_miss_num');
20:20:43   7  
20:20:43   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:20:43   9  	  miss_table_name => 'svmc_miss_cat',
20:20:43  10  	  data_table_name => '&scoretable',
20:20:43  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:20:43  12  
20:20:43  13  	-- Normalize the data to be scored
20:20:43  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:20:43  15  	  norm_table_name => 'svmc_norm',
20:20:43  16  	  data_table_name => '&scoretable',
20:20:43  17  	  xform_view_name => 'svmc_apply_prep');
20:20:43  18  END;
20:20:43  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.18
20:20:43 SQL> 
20:20:43 SQL> -- Maybe I already collected a score for this prdate.
20:20:43 SQL> -- DELETE it if I did:
20:20:43 SQL> DELETE svm62scores
20:20:43   2  WHERE score > 0
20:20:43   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:20:43   4  -- I need to supply the target attribute name:
20:20:43   5  AND targ = '&1'
20:20:43   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gattn'

0 rows deleted.

Elapsed: 00:00:00.02
20:20:43 SQL> 
20:20:43 SQL> -- We do a drumroll here:
20:20:43 SQL> 
20:20:43 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:20:43   2  SELECT
20:20:43   3  prdate
20:20:43   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:20:43   5  ,sysdate
20:20:43   6  ,SUBSTR(prdate,1,7)pair
20:20:43   7  ,SUBSTR(prdate,-19)ydate
20:20:43   8  ,'&1'
20:20:43   9  FROM svmc_apply_prep
20:20:43  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gattn'

1 row created.

Elapsed: 00:00:00.05
20:20:43 SQL> @score1_5min_gattn.sql	2010-11-15 16:50:01 aud_usd
20:20:43 SQL> --
20:20:43 SQL> -- score1_5min_gattn.sql
20:20:43 SQL> --
20:20:43 SQL> 
20:20:43 SQL> -- Demo:
20:20:43 SQL> -- @score1_5min_gattn.sql 2010-12-31 20:45:01 aud_usd
20:20:43 SQL> 
20:20:43 SQL> CREATE OR REPLACE VIEW sme AS
20:20:43   2  SELECT
20:20:43   3  prdate
20:20:43   4  ,NULL gattn
20:20:43   5  ,g00
20:20:43   6  ,g01
20:20:43   7  ,g02
20:20:43   8  ,g03
20:20:43   9  ,g04
20:20:43  10  ,g05
20:20:43  11  ,g06
20:20:43  12  ,g07
20:20:43  13  ,g08
20:20:43  14  ,g09
20:20:43  15  ,g10
20:20:43  16  ,g11
20:20:43  17  ,g12
20:20:43  18  ,g13
20:20:43  19  ,g14
20:20:43  20  ,g15
20:20:43  21  ,g16
20:20:43  22  ,g17
20:20:43  23  ,g18
20:20:43  24  ,g19
20:20:43  25  ,g20
20:20:43  26  ,g21
20:20:43  27  ,g22
20:20:43  28  ,g23
20:20:43  29  ,g24
20:20:43  30  ,g25
20:20:43  31  ,g26
20:20:43  32  ,g27
20:20:43  33  ,g28
20:20:43  34  ,g29
20:20:43  35  ,g30
20:20:43  36  ,g31
20:20:43  37  ,g32
20:20:43  38  ,g33
20:20:43  39  ,g34
20:20:43  40  ,g35
20:20:43  41  ,g36
20:20:43  42  ,g37
20:20:43  43  ,g38
20:20:43  44  ,g39
20:20:43  45  ,g40
20:20:43  46  ,g41
20:20:43  47  FROM modsrc
20:20:43  48  WHERE ydate = '&1'||' '||'&2'
20:20:43  49  AND pair = '&3'
20:20:43  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-11-15'||' '||'16:50:01'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:20:43 SQL> 
20:20:43 SQL> -- rpt
20:20:43 SQL> -- We should see just 1 row:
20:20:43 SQL> 
20:20:43 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.01
20:20:43 SQL> 
20:20:43 SQL> -- Build the model:
20:20:43 SQL> CREATE OR REPLACE VIEW bme AS
20:20:43   2  SELECT
20:20:43   3  prdate
20:20:43   4  ,gattn
20:20:43   5  ,g00
20:20:43   6  ,g01
20:20:43   7  ,g02
20:20:43   8  ,g03
20:20:43   9  ,g04
20:20:43  10  ,g05
20:20:43  11  ,g06
20:20:43  12  ,g07
20:20:43  13  ,g08
20:20:43  14  ,g09
20:20:43  15  ,g10
20:20:43  16  ,g11
20:20:43  17  ,g12
20:20:43  18  ,g13
20:20:43  19  ,g14
20:20:43  20  ,g15
20:20:43  21  ,g16
20:20:43  22  ,g17
20:20:43  23  ,g18
20:20:43  24  ,g19
20:20:43  25  ,g20
20:20:43  26  ,g21
20:20:43  27  ,g22
20:20:43  28  ,g23
20:20:43  29  ,g24
20:20:43  30  ,g25
20:20:43  31  ,g26
20:20:43  32  ,g27
20:20:43  33  ,g28
20:20:43  34  ,g29
20:20:43  35  ,g30
20:20:43  36  ,g31
20:20:43  37  ,g32
20:20:43  38  ,g33
20:20:43  39  ,g34
20:20:43  40  ,g35
20:20:43  41  ,g36
20:20:43  42  ,g37
20:20:43  43  ,g38
20:20:43  44  ,g39
20:20:43  45  ,g40
20:20:43  46  ,g41
20:20:43  47  FROM modsrc
20:20:43  48  WHERE gattn IN('nup','up')
20:20:43  49  -- Use only rows which are older than 1 day:
20:20:43  50  AND 1+ydate < '&1'||' '||'&2'
20:20:43  51  AND pair = '&3'
20:20:43  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-11-15'||' '||'16:50:01'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.06
20:20:43 SQL> 
20:20:43 SQL> -- rpt
20:20:43 SQL> 
20:20:43 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	     5188
up	     2956

Elapsed: 00:00:00.03
20:20:43 SQL> 
20:20:43 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-11-12 21:50:01

Elapsed: 00:00:00.01
20:20:43 SQL> 
20:20:43 SQL> -- Now build model from bme and score sme
20:20:43 SQL> @score1.sql gattn
20:20:43 SQL> --
20:20:43 SQL> -- score1.sql
20:20:43 SQL> --
20:20:43 SQL> 
20:20:43 SQL> -- I use this script to send 5 params to score.sql
20:20:43 SQL> -- which does the heavy lifting of creating an SVM model.
20:20:43 SQL> -- Then at the very end of this script I use the model
20:20:43 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:20:43 SQL> 
20:20:43 SQL> -- I call this script from 2 other scripts:
20:20:43 SQL> -- score1_5min.sql
20:20:43 SQL> -- score1_5min_gattn.sql
20:20:43 SQL> 
20:20:43 SQL> -- The 1st param is the name of the target attribute.
20:20:43 SQL> -- I like to call my target attributes either gatt or gattn.
20:20:43 SQL> 
20:20:43 SQL> -- Demo:
20:20:43 SQL> -- @score1.sql 'gatt'
20:20:43 SQL> -- @score1.sql 'gattn'
20:20:43 SQL> 
20:20:43 SQL> -- Now, I fill up svmc_apply_prep.
20:20:43 SQL> -- I use same model_name used in score.sql
20:20:43 SQL> DEFINE model_name = 'svmfx101'
20:20:43 SQL> DEFINE bldtable	= 'bme'
20:20:43 SQL> DEFINE scoretable = 'sme'
20:20:43 SQL> DEFINE case_id	= 'prdate'
20:20:43 SQL> -- Demo:
20:20:43 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:20:43 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:20:43 SQL> --
20:20:43 SQL> -- score.sql
20:20:43 SQL> --
20:20:43 SQL> 
20:20:43 SQL> -- usage: score.sql
20:20:43 SQL> 
20:20:43 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:20:43 SQL> 
20:20:43 SQL> -- DEFINE target	   = 'gatt'
20:20:43 SQL> -- DEFINE model_name = 'svmfx101'
20:20:43 SQL> -- DEFINE bldtable   = 'bme'
20:20:43 SQL> -- DEFINE scoretable = 'sme'
20:20:43 SQL> -- DEFINE case_id    = 'prdate'
20:20:43 SQL> 
20:20:43 SQL> DEFINE target	= '&1'
20:20:43 SQL> DEFINE model_name = '&2'
20:20:43 SQL> DEFINE bldtable	= '&3'
20:20:43 SQL> DEFINE scoretable = '&4'
20:20:43 SQL> DEFINE case_id	= '&5'
20:20:43 SQL> 
20:20:43 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:20:43 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:20:43 SQL> 
20:20:43 SQL> -- Builds an SVM model using pl/sql.
20:20:43 SQL> 
20:20:43 SQL> -----------------------------------------------------------------------
20:20:43 SQL> --			    BUILD THE MODEL
20:20:43 SQL> -----------------------------------------------------------------------
20:20:43 SQL> 
20:20:43 SQL> -- Cleanup old build data preparation objects for repeat runs
20:20:43 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.00
20:20:43 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:20:43 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:20:43 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.00
20:20:43 SQL> 
20:20:43 SQL> 
20:20:43 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:20:43 SQL> --
20:20:43 SQL> -- DROP	TABLE svmc_settings ;
20:20:43 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:20:43 SQL> -- DELETE svmc_settings;
20:20:43 SQL> 
20:20:43 SQL> -- The default classification algorithm is Naive Bayes. So override
20:20:43 SQL> -- this choice to SVM using a settings table.
20:20:43 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:20:43 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:20:43 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:20:43 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:20:43 SQL> -- models.
20:20:43 SQL> --
20:20:43 SQL> 
20:20:43 SQL> -- Do this once and then comment it out.
20:20:43 SQL> -- That makes script go faster.
20:20:43 SQL> -- BEGIN
20:20:43 SQL> -- -- Populate settings table
20:20:43 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:20:43 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:20:43 SQL> --
20:20:43 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:20:43 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:20:43 SQL> --
20:20:43 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:20:43 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:20:43 SQL> --   COMMIT;
20:20:43 SQL> -- END;
20:20:43 SQL> -- /
20:20:43 SQL> 
20:20:43 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:20:43 SQL> 
20:20:43 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:20:43   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:20:43   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
20:20:43 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:20:43   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:20:43   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:20:43 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:20:43   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:20:43   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:20:43 SQL> 
20:20:43 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:20:43   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:20:43   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:20:43 SQL> 
20:20:43 SQL> --------------------------------
20:20:43 SQL> -- PREPARE BUILD (TRAINING) DATA
20:20:43 SQL> --
20:20:43 SQL> 
20:20:43 SQL> -- 1. Missing Value treatment for all Predictors and
20:20:43 SQL> -- 2. Outlier Treatment and
20:20:43 SQL> -- 3. Normalization are performed below.
20:20:43 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:20:43 SQL> --    normalized here.
20:20:43 SQL> 
20:20:43 SQL> BEGIN
20:20:43   2  	-- Perform missing value treatment for all predictors
20:20:43   3  	-- create miss tables
20:20:43   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:20:43   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:20:43   6  
20:20:43   7  	-- populate miss tables
20:20:43   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:20:43   9  	  miss_table_name => 'svmc_miss_num',
20:20:43  10  	  data_table_name => '&bldtable',
20:20:43  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:20:43  12  
20:20:43  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:20:43  14  	  miss_table_name => 'svmc_miss_cat',
20:20:43  15  	  data_table_name => '&bldtable',
20:20:43  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:20:43  17  
20:20:43  18  	-- xform input data to replace missing values
20:20:43  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:20:43  20  	  miss_table_name => 'svmc_miss_num',
20:20:43  21  	  data_table_name => '&bldtable',
20:20:43  22  	  xform_view_name => 'xformed_build_miss_num');
20:20:43  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:20:43  24  	  miss_table_name => 'svmc_miss_cat',
20:20:43  25  	  data_table_name => '&bldtable',
20:20:43  26  	  xform_view_name => 'xformed_build_miss_cat');
20:20:43  27  
20:20:43  28  	-- Perform outlier treatment.
20:20:43  29  	-- create clip table
20:20:43  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:20:43  31  
20:20:43  32  	-- populate clip table
20:20:43  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:20:43  34  	  clip_table_name => 'svmc_clip',
20:20:43  35  	  data_table_name => '&bldtable',
20:20:43  36  	  tail_frac	  => 0.025,
20:20:43  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:20:43  38  
20:20:43  39  	-- xform input data to winsorized data
20:20:43  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:20:43  41  	  clip_table_name => 'svmc_clip',
20:20:43  42  	  data_table_name => '&bldtable',
20:20:43  43  	  xform_view_name => 'svmc_winsor');
20:20:43  44  
20:20:43  45  	-- create normalization table
20:20:43  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:20:43  47  
20:20:43  48  	-- populate normalization table based on winsorized data
20:20:43  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:20:43  50  	  norm_table_name => 'svmc_norm',
20:20:43  51  	  data_table_name => 'svmc_winsor',
20:20:43  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:20:43  53  
20:20:43  54  	-- normalize the original data
20:20:43  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:20:43  56  	  norm_table_name => 'svmc_norm',
20:20:43  57  	  data_table_name => '&bldtable',
20:20:43  58  	  xform_view_name => 'svmc_build_prep');
20:20:43  59  END;
20:20:43  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.60
20:20:45 SQL> 
20:20:45 SQL> ---------------------
20:20:45 SQL> -- CREATE A NEW MODEL
20:20:45 SQL> --
20:20:45 SQL> -- Cleanup old model with the same name for repeat runs
20:20:45 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:20:45   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:20:45   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.03
20:20:46 SQL> 
20:20:46 SQL> -- Build a new SVM Model
20:20:46 SQL> BEGIN
20:20:46   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:20:46   3  	  model_name	      => '&model_name',
20:20:46   4  	  mining_function     => dbms_data_mining.classification,
20:20:46   5  	  data_table_name     => 'svmc_build_prep',
20:20:46   6  	  case_id_column_name => '&case_id',
20:20:46   7  	  target_column_name  => '&target',
20:20:46   8  	  settings_table_name => 'svmc_settings');
20:20:46   9  END;
20:20:46  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:04.26
20:20:50 SQL> 
20:20:50 SQL> -----------------------------------------------------------------------
20:20:50 SQL> --			       APPLY/score THE MODEL
20:20:50 SQL> -----------------------------------------------------------------------
20:20:50 SQL> 
20:20:50 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:20:50 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:20:50   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:20:50   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:20:50 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:20:50   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:20:50   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:20:50 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:20:50   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:20:50   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:20:50 SQL> -----------------------
20:20:50 SQL> -- PREPARE SCORING DATA
20:20:50 SQL> --
20:20:50 SQL> -- If the data for model creation has been prepared, then the data
20:20:50 SQL> -- to be scored using the model must be prepared in the same manner
20:20:50 SQL> -- in order to obtain meaningful results.
20:20:50 SQL> --
20:20:50 SQL> -- 1. Missing Value treatment for all Predictors and
20:20:50 SQL> -- 2. Normalization
20:20:50 SQL> -- No outlier treatment will be performed during test and apply. The
20:20:50 SQL> -- normalization step is sufficient, since the normalization parameters
20:20:50 SQL> -- already capture the effects of outlier treatment done with build data.
20:20:50 SQL> --
20:20:50 SQL> BEGIN
20:20:50   2  	-- Xform Test data to replace missing values
20:20:50   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:20:50   4  	  miss_table_name => 'svmc_miss_num',
20:20:50   5  	  data_table_name => '&scoretable',
20:20:50   6  	  xform_view_name => 'xformed_apply_miss_num');
20:20:50   7  
20:20:50   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:20:50   9  	  miss_table_name => 'svmc_miss_cat',
20:20:50  10  	  data_table_name => '&scoretable',
20:20:50  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:20:50  12  
20:20:50  13  	-- Normalize the data to be scored
20:20:50  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:20:50  15  	  norm_table_name => 'svmc_norm',
20:20:50  16  	  data_table_name => '&scoretable',
20:20:50  17  	  xform_view_name => 'svmc_apply_prep');
20:20:50  18  END;
20:20:50  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.24
20:20:50 SQL> 
20:20:50 SQL> -- Maybe I already collected a score for this prdate.
20:20:50 SQL> -- DELETE it if I did:
20:20:50 SQL> DELETE svm62scores
20:20:50   2  WHERE score > 0
20:20:50   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:20:50   4  -- I need to supply the target attribute name:
20:20:50   5  AND targ = '&1'
20:20:50   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gattn'

0 rows deleted.

Elapsed: 00:00:00.03
20:20:50 SQL> 
20:20:50 SQL> -- We do a drumroll here:
20:20:50 SQL> 
20:20:50 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:20:50   2  SELECT
20:20:50   3  prdate
20:20:50   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:20:50   5  ,sysdate
20:20:50   6  ,SUBSTR(prdate,1,7)pair
20:20:50   7  ,SUBSTR(prdate,-19)ydate
20:20:50   8  ,'&1'
20:20:50   9  FROM svmc_apply_prep
20:20:50  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gattn'

1 row created.

Elapsed: 00:00:00.06
20:20:50 SQL> @score1_5min.sql	      2010-12-03 18:40:00 aud_usd
20:20:50 SQL> --
20:20:50 SQL> -- score1_5min.sql
20:20:50 SQL> --
20:20:50 SQL> 
20:20:50 SQL> -- Demo:
20:20:50 SQL> -- @score1_5min.sql 2010-12-31 20:45:01 aud_usd
20:20:50 SQL> 
20:20:50 SQL> CREATE OR REPLACE VIEW sme AS
20:20:50   2  SELECT
20:20:50   3  prdate
20:20:50   4  ,NULL gatt
20:20:50   5  ,g00
20:20:50   6  ,g01
20:20:50   7  ,g02
20:20:50   8  ,g03
20:20:50   9  ,g04
20:20:50  10  ,g05
20:20:50  11  ,g06
20:20:50  12  ,g07
20:20:50  13  ,g08
20:20:50  14  ,g09
20:20:50  15  ,g10
20:20:50  16  ,g11
20:20:50  17  ,g12
20:20:50  18  ,g13
20:20:50  19  ,g14
20:20:50  20  ,g15
20:20:50  21  ,g16
20:20:50  22  ,g17
20:20:50  23  ,g18
20:20:50  24  ,g19
20:20:50  25  ,g20
20:20:50  26  ,g21
20:20:50  27  ,g22
20:20:50  28  ,g23
20:20:50  29  ,g24
20:20:50  30  ,g25
20:20:50  31  ,g26
20:20:50  32  ,g27
20:20:50  33  ,g28
20:20:50  34  ,g29
20:20:50  35  ,g30
20:20:50  36  ,g31
20:20:50  37  ,g32
20:20:50  38  ,g33
20:20:50  39  ,g34
20:20:50  40  ,g35
20:20:50  41  ,g36
20:20:50  42  ,g37
20:20:50  43  ,g38
20:20:50  44  ,g39
20:20:50  45  ,g40
20:20:50  46  ,g41
20:20:50  47  FROM modsrc
20:20:50  48  WHERE ydate = '&1'||' '||'&2'
20:20:50  49  AND pair = '&3'
20:20:50  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-12-03'||' '||'18:40:00'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:20:50 SQL> 
20:20:50 SQL> -- rpt
20:20:50 SQL> -- We should see just 1 row:
20:20:50 SQL> 
20:20:50 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.01
20:20:50 SQL> 
20:20:50 SQL> -- Build the model:
20:20:50 SQL> CREATE OR REPLACE VIEW bme AS
20:20:50   2  SELECT
20:20:50   3  prdate
20:20:50   4  ,gatt
20:20:50   5  ,g00
20:20:50   6  ,g01
20:20:50   7  ,g02
20:20:50   8  ,g03
20:20:50   9  ,g04
20:20:50  10  ,g05
20:20:50  11  ,g06
20:20:50  12  ,g07
20:20:50  13  ,g08
20:20:50  14  ,g09
20:20:50  15  ,g10
20:20:50  16  ,g11
20:20:50  17  ,g12
20:20:50  18  ,g13
20:20:50  19  ,g14
20:20:50  20  ,g15
20:20:50  21  ,g16
20:20:50  22  ,g17
20:20:50  23  ,g18
20:20:50  24  ,g19
20:20:50  25  ,g20
20:20:50  26  ,g21
20:20:50  27  ,g22
20:20:50  28  ,g23
20:20:50  29  ,g24
20:20:50  30  ,g25
20:20:50  31  ,g26
20:20:50  32  ,g27
20:20:50  33  ,g28
20:20:50  34  ,g29
20:20:50  35  ,g30
20:20:50  36  ,g31
20:20:50  37  ,g32
20:20:50  38  ,g33
20:20:50  39  ,g34
20:20:50  40  ,g35
20:20:50  41  ,g36
20:20:50  42  ,g37
20:20:50  43  ,g38
20:20:50  44  ,g39
20:20:50  45  ,g40
20:20:50  46  ,g41
20:20:50  47  FROM modsrc
20:20:50  48  WHERE gatt IN('nup','up')
20:20:50  49  -- Use only rows which are older than 1 day:
20:20:50  50  AND 1+ydate < '&1'||' '||'&2'
20:20:50  51  AND pair = '&3'
20:20:50  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-12-03'||' '||'18:40:00'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.05
20:20:51 SQL> 
20:20:51 SQL> -- rpt
20:20:51 SQL> 
20:20:51 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt;

GAT COUNT(PRDATE)
--- -------------
nup	     7495
up	     4654

Elapsed: 00:00:00.02
20:20:51 SQL> 
20:20:51 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-12-02 18:35:00

Elapsed: 00:00:00.03
20:20:51 SQL> 
20:20:51 SQL> -- Now build model from bme and score sme
20:20:51 SQL> @score1.sql gatt
20:20:51 SQL> --
20:20:51 SQL> -- score1.sql
20:20:51 SQL> --
20:20:51 SQL> 
20:20:51 SQL> -- I use this script to send 5 params to score.sql
20:20:51 SQL> -- which does the heavy lifting of creating an SVM model.
20:20:51 SQL> -- Then at the very end of this script I use the model
20:20:51 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:20:51 SQL> 
20:20:51 SQL> -- I call this script from 2 other scripts:
20:20:51 SQL> -- score1_5min.sql
20:20:51 SQL> -- score1_5min_gattn.sql
20:20:51 SQL> 
20:20:51 SQL> -- The 1st param is the name of the target attribute.
20:20:51 SQL> -- I like to call my target attributes either gatt or gattn.
20:20:51 SQL> 
20:20:51 SQL> -- Demo:
20:20:51 SQL> -- @score1.sql 'gatt'
20:20:51 SQL> -- @score1.sql 'gattn'
20:20:51 SQL> 
20:20:51 SQL> -- Now, I fill up svmc_apply_prep.
20:20:51 SQL> -- I use same model_name used in score.sql
20:20:51 SQL> DEFINE model_name = 'svmfx101'
20:20:51 SQL> DEFINE bldtable	= 'bme'
20:20:51 SQL> DEFINE scoretable = 'sme'
20:20:51 SQL> DEFINE case_id	= 'prdate'
20:20:51 SQL> -- Demo:
20:20:51 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:20:51 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:20:51 SQL> --
20:20:51 SQL> -- score.sql
20:20:51 SQL> --
20:20:51 SQL> 
20:20:51 SQL> -- usage: score.sql
20:20:51 SQL> 
20:20:51 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:20:51 SQL> 
20:20:51 SQL> -- DEFINE target	   = 'gatt'
20:20:51 SQL> -- DEFINE model_name = 'svmfx101'
20:20:51 SQL> -- DEFINE bldtable   = 'bme'
20:20:51 SQL> -- DEFINE scoretable = 'sme'
20:20:51 SQL> -- DEFINE case_id    = 'prdate'
20:20:51 SQL> 
20:20:51 SQL> DEFINE target	= '&1'
20:20:51 SQL> DEFINE model_name = '&2'
20:20:51 SQL> DEFINE bldtable	= '&3'
20:20:51 SQL> DEFINE scoretable = '&4'
20:20:51 SQL> DEFINE case_id	= '&5'
20:20:51 SQL> 
20:20:51 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:20:51 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:20:51 SQL> 
20:20:51 SQL> -- Builds an SVM model using pl/sql.
20:20:51 SQL> 
20:20:51 SQL> -----------------------------------------------------------------------
20:20:51 SQL> --			    BUILD THE MODEL
20:20:51 SQL> -----------------------------------------------------------------------
20:20:51 SQL> 
20:20:51 SQL> -- Cleanup old build data preparation objects for repeat runs
20:20:51 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.00
20:20:51 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:20:51 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:20:51 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.01
20:20:51 SQL> 
20:20:51 SQL> 
20:20:51 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:20:51 SQL> --
20:20:51 SQL> -- DROP	TABLE svmc_settings ;
20:20:51 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:20:51 SQL> -- DELETE svmc_settings;
20:20:51 SQL> 
20:20:51 SQL> -- The default classification algorithm is Naive Bayes. So override
20:20:51 SQL> -- this choice to SVM using a settings table.
20:20:51 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:20:51 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:20:51 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:20:51 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:20:51 SQL> -- models.
20:20:51 SQL> --
20:20:51 SQL> 
20:20:51 SQL> -- Do this once and then comment it out.
20:20:51 SQL> -- That makes script go faster.
20:20:51 SQL> -- BEGIN
20:20:51 SQL> -- -- Populate settings table
20:20:51 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:20:51 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:20:51 SQL> --
20:20:51 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:20:51 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:20:51 SQL> --
20:20:51 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:20:51 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:20:51 SQL> --   COMMIT;
20:20:51 SQL> -- END;
20:20:51 SQL> -- /
20:20:51 SQL> 
20:20:51 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:20:51 SQL> 
20:20:51 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:20:51   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:20:51   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:20:51 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:20:51   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:20:51   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:20:51 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:20:51   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:20:51   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:20:51 SQL> 
20:20:51 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:20:51   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:20:51   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:20:51 SQL> 
20:20:51 SQL> --------------------------------
20:20:51 SQL> -- PREPARE BUILD (TRAINING) DATA
20:20:51 SQL> --
20:20:51 SQL> 
20:20:51 SQL> -- 1. Missing Value treatment for all Predictors and
20:20:51 SQL> -- 2. Outlier Treatment and
20:20:51 SQL> -- 3. Normalization are performed below.
20:20:51 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:20:51 SQL> --    normalized here.
20:20:51 SQL> 
20:20:51 SQL> BEGIN
20:20:51   2  	-- Perform missing value treatment for all predictors
20:20:51   3  	-- create miss tables
20:20:51   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:20:51   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:20:51   6  
20:20:51   7  	-- populate miss tables
20:20:51   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:20:51   9  	  miss_table_name => 'svmc_miss_num',
20:20:51  10  	  data_table_name => '&bldtable',
20:20:51  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:20:51  12  
20:20:51  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:20:51  14  	  miss_table_name => 'svmc_miss_cat',
20:20:51  15  	  data_table_name => '&bldtable',
20:20:51  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:20:51  17  
20:20:51  18  	-- xform input data to replace missing values
20:20:51  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:20:51  20  	  miss_table_name => 'svmc_miss_num',
20:20:51  21  	  data_table_name => '&bldtable',
20:20:51  22  	  xform_view_name => 'xformed_build_miss_num');
20:20:51  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:20:51  24  	  miss_table_name => 'svmc_miss_cat',
20:20:51  25  	  data_table_name => '&bldtable',
20:20:51  26  	  xform_view_name => 'xformed_build_miss_cat');
20:20:51  27  
20:20:51  28  	-- Perform outlier treatment.
20:20:51  29  	-- create clip table
20:20:51  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:20:51  31  
20:20:51  32  	-- populate clip table
20:20:51  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:20:51  34  	  clip_table_name => 'svmc_clip',
20:20:51  35  	  data_table_name => '&bldtable',
20:20:51  36  	  tail_frac	  => 0.025,
20:20:51  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:20:51  38  
20:20:51  39  	-- xform input data to winsorized data
20:20:51  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:20:51  41  	  clip_table_name => 'svmc_clip',
20:20:51  42  	  data_table_name => '&bldtable',
20:20:51  43  	  xform_view_name => 'svmc_winsor');
20:20:51  44  
20:20:51  45  	-- create normalization table
20:20:51  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:20:51  47  
20:20:51  48  	-- populate normalization table based on winsorized data
20:20:51  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:20:51  50  	  norm_table_name => 'svmc_norm',
20:20:51  51  	  data_table_name => 'svmc_winsor',
20:20:51  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:20:51  53  
20:20:51  54  	-- normalize the original data
20:20:51  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:20:51  56  	  norm_table_name => 'svmc_norm',
20:20:51  57  	  data_table_name => '&bldtable',
20:20:51  58  	  xform_view_name => 'svmc_build_prep');
20:20:51  59  END;
20:20:51  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:02.10
20:20:53 SQL> 
20:20:53 SQL> ---------------------
20:20:53 SQL> -- CREATE A NEW MODEL
20:20:53 SQL> --
20:20:53 SQL> -- Cleanup old model with the same name for repeat runs
20:20:53 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:20:53   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:20:53   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.91
20:20:54 SQL> 
20:20:54 SQL> -- Build a new SVM Model
20:20:54 SQL> BEGIN
20:20:54   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:20:54   3  	  model_name	      => '&model_name',
20:20:54   4  	  mining_function     => dbms_data_mining.classification,
20:20:54   5  	  data_table_name     => 'svmc_build_prep',
20:20:54   6  	  case_id_column_name => '&case_id',
20:20:54   7  	  target_column_name  => '&target',
20:20:54   8  	  settings_table_name => 'svmc_settings');
20:20:54   9  END;
20:20:54  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:04.96
20:20:59 SQL> 
20:20:59 SQL> -----------------------------------------------------------------------
20:20:59 SQL> --			       APPLY/score THE MODEL
20:20:59 SQL> -----------------------------------------------------------------------
20:20:59 SQL> 
20:20:59 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:20:59 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:20:59   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:20:59   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:20:59 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:20:59   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:20:59   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:20:59 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:20:59   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:20:59   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:20:59 SQL> -----------------------
20:20:59 SQL> -- PREPARE SCORING DATA
20:20:59 SQL> --
20:20:59 SQL> -- If the data for model creation has been prepared, then the data
20:20:59 SQL> -- to be scored using the model must be prepared in the same manner
20:20:59 SQL> -- in order to obtain meaningful results.
20:20:59 SQL> --
20:20:59 SQL> -- 1. Missing Value treatment for all Predictors and
20:20:59 SQL> -- 2. Normalization
20:20:59 SQL> -- No outlier treatment will be performed during test and apply. The
20:20:59 SQL> -- normalization step is sufficient, since the normalization parameters
20:20:59 SQL> -- already capture the effects of outlier treatment done with build data.
20:20:59 SQL> --
20:20:59 SQL> BEGIN
20:20:59   2  	-- Xform Test data to replace missing values
20:20:59   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:20:59   4  	  miss_table_name => 'svmc_miss_num',
20:20:59   5  	  data_table_name => '&scoretable',
20:20:59   6  	  xform_view_name => 'xformed_apply_miss_num');
20:20:59   7  
20:20:59   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:20:59   9  	  miss_table_name => 'svmc_miss_cat',
20:20:59  10  	  data_table_name => '&scoretable',
20:20:59  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:20:59  12  
20:20:59  13  	-- Normalize the data to be scored
20:20:59  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:20:59  15  	  norm_table_name => 'svmc_norm',
20:20:59  16  	  data_table_name => '&scoretable',
20:20:59  17  	  xform_view_name => 'svmc_apply_prep');
20:20:59  18  END;
20:20:59  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.17
20:20:59 SQL> 
20:20:59 SQL> -- Maybe I already collected a score for this prdate.
20:20:59 SQL> -- DELETE it if I did:
20:20:59 SQL> DELETE svm62scores
20:20:59   2  WHERE score > 0
20:20:59   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:20:59   4  -- I need to supply the target attribute name:
20:20:59   5  AND targ = '&1'
20:20:59   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gatt'

0 rows deleted.

Elapsed: 00:00:00.01
20:20:59 SQL> 
20:20:59 SQL> -- We do a drumroll here:
20:20:59 SQL> 
20:20:59 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:20:59   2  SELECT
20:20:59   3  prdate
20:20:59   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:20:59   5  ,sysdate
20:20:59   6  ,SUBSTR(prdate,1,7)pair
20:20:59   7  ,SUBSTR(prdate,-19)ydate
20:20:59   8  ,'&1'
20:20:59   9  FROM svmc_apply_prep
20:20:59  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gatt'

1 row created.

Elapsed: 00:00:00.05
20:20:59 SQL> @score1_5min_gattn.sql	2010-11-18 05:15:01 aud_usd
20:20:59 SQL> --
20:20:59 SQL> -- score1_5min_gattn.sql
20:20:59 SQL> --
20:20:59 SQL> 
20:20:59 SQL> -- Demo:
20:20:59 SQL> -- @score1_5min_gattn.sql 2010-12-31 20:45:01 aud_usd
20:20:59 SQL> 
20:20:59 SQL> CREATE OR REPLACE VIEW sme AS
20:20:59   2  SELECT
20:20:59   3  prdate
20:20:59   4  ,NULL gattn
20:20:59   5  ,g00
20:20:59   6  ,g01
20:20:59   7  ,g02
20:20:59   8  ,g03
20:20:59   9  ,g04
20:20:59  10  ,g05
20:20:59  11  ,g06
20:20:59  12  ,g07
20:20:59  13  ,g08
20:20:59  14  ,g09
20:20:59  15  ,g10
20:20:59  16  ,g11
20:20:59  17  ,g12
20:20:59  18  ,g13
20:20:59  19  ,g14
20:20:59  20  ,g15
20:20:59  21  ,g16
20:20:59  22  ,g17
20:20:59  23  ,g18
20:20:59  24  ,g19
20:20:59  25  ,g20
20:20:59  26  ,g21
20:20:59  27  ,g22
20:20:59  28  ,g23
20:20:59  29  ,g24
20:20:59  30  ,g25
20:20:59  31  ,g26
20:20:59  32  ,g27
20:20:59  33  ,g28
20:20:59  34  ,g29
20:20:59  35  ,g30
20:20:59  36  ,g31
20:20:59  37  ,g32
20:20:59  38  ,g33
20:20:59  39  ,g34
20:20:59  40  ,g35
20:20:59  41  ,g36
20:20:59  42  ,g37
20:20:59  43  ,g38
20:20:59  44  ,g39
20:20:59  45  ,g40
20:20:59  46  ,g41
20:20:59  47  FROM modsrc
20:20:59  48  WHERE ydate = '&1'||' '||'&2'
20:20:59  49  AND pair = '&3'
20:20:59  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-11-18'||' '||'05:15:01'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:20:59 SQL> 
20:20:59 SQL> -- rpt
20:20:59 SQL> -- We should see just 1 row:
20:20:59 SQL> 
20:20:59 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.02
20:20:59 SQL> 
20:20:59 SQL> -- Build the model:
20:20:59 SQL> CREATE OR REPLACE VIEW bme AS
20:20:59   2  SELECT
20:20:59   3  prdate
20:20:59   4  ,gattn
20:20:59   5  ,g00
20:20:59   6  ,g01
20:20:59   7  ,g02
20:20:59   8  ,g03
20:20:59   9  ,g04
20:20:59  10  ,g05
20:20:59  11  ,g06
20:20:59  12  ,g07
20:20:59  13  ,g08
20:20:59  14  ,g09
20:20:59  15  ,g10
20:20:59  16  ,g11
20:20:59  17  ,g12
20:20:59  18  ,g13
20:20:59  19  ,g14
20:20:59  20  ,g15
20:20:59  21  ,g16
20:20:59  22  ,g17
20:20:59  23  ,g18
20:20:59  24  ,g19
20:20:59  25  ,g20
20:20:59  26  ,g21
20:20:59  27  ,g22
20:20:59  28  ,g23
20:20:59  29  ,g24
20:20:59  30  ,g25
20:20:59  31  ,g26
20:20:59  32  ,g27
20:20:59  33  ,g28
20:20:59  34  ,g29
20:20:59  35  ,g30
20:20:59  36  ,g31
20:20:59  37  ,g32
20:20:59  38  ,g33
20:20:59  39  ,g34
20:20:59  40  ,g35
20:20:59  41  ,g36
20:20:59  42  ,g37
20:20:59  43  ,g38
20:20:59  44  ,g39
20:20:59  45  ,g40
20:20:59  46  ,g41
20:20:59  47  FROM modsrc
20:20:59  48  WHERE gattn IN('nup','up')
20:20:59  49  -- Use only rows which are older than 1 day:
20:20:59  50  AND 1+ydate < '&1'||' '||'&2'
20:20:59  51  AND pair = '&3'
20:20:59  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-11-18'||' '||'05:15:01'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:20:59 SQL> 
20:20:59 SQL> -- rpt
20:20:59 SQL> 
20:20:59 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	     5538
up	     3282

Elapsed: 00:00:00.03
20:20:59 SQL> 
20:20:59 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-11-17 05:10:01

Elapsed: 00:00:00.02
20:20:59 SQL> 
20:20:59 SQL> -- Now build model from bme and score sme
20:20:59 SQL> @score1.sql gattn
20:20:59 SQL> --
20:20:59 SQL> -- score1.sql
20:20:59 SQL> --
20:20:59 SQL> 
20:20:59 SQL> -- I use this script to send 5 params to score.sql
20:20:59 SQL> -- which does the heavy lifting of creating an SVM model.
20:20:59 SQL> -- Then at the very end of this script I use the model
20:20:59 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:20:59 SQL> 
20:20:59 SQL> -- I call this script from 2 other scripts:
20:20:59 SQL> -- score1_5min.sql
20:20:59 SQL> -- score1_5min_gattn.sql
20:20:59 SQL> 
20:20:59 SQL> -- The 1st param is the name of the target attribute.
20:20:59 SQL> -- I like to call my target attributes either gatt or gattn.
20:20:59 SQL> 
20:20:59 SQL> -- Demo:
20:20:59 SQL> -- @score1.sql 'gatt'
20:20:59 SQL> -- @score1.sql 'gattn'
20:20:59 SQL> 
20:20:59 SQL> -- Now, I fill up svmc_apply_prep.
20:20:59 SQL> -- I use same model_name used in score.sql
20:20:59 SQL> DEFINE model_name = 'svmfx101'
20:20:59 SQL> DEFINE bldtable	= 'bme'
20:20:59 SQL> DEFINE scoretable = 'sme'
20:20:59 SQL> DEFINE case_id	= 'prdate'
20:20:59 SQL> -- Demo:
20:20:59 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:20:59 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:20:59 SQL> --
20:20:59 SQL> -- score.sql
20:20:59 SQL> --
20:20:59 SQL> 
20:20:59 SQL> -- usage: score.sql
20:20:59 SQL> 
20:20:59 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:20:59 SQL> 
20:20:59 SQL> -- DEFINE target	   = 'gatt'
20:20:59 SQL> -- DEFINE model_name = 'svmfx101'
20:20:59 SQL> -- DEFINE bldtable   = 'bme'
20:20:59 SQL> -- DEFINE scoretable = 'sme'
20:20:59 SQL> -- DEFINE case_id    = 'prdate'
20:20:59 SQL> 
20:20:59 SQL> DEFINE target	= '&1'
20:20:59 SQL> DEFINE model_name = '&2'
20:20:59 SQL> DEFINE bldtable	= '&3'
20:20:59 SQL> DEFINE scoretable = '&4'
20:20:59 SQL> DEFINE case_id	= '&5'
20:20:59 SQL> 
20:20:59 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:20:59 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:20:59 SQL> 
20:20:59 SQL> -- Builds an SVM model using pl/sql.
20:20:59 SQL> 
20:20:59 SQL> -----------------------------------------------------------------------
20:20:59 SQL> --			    BUILD THE MODEL
20:20:59 SQL> -----------------------------------------------------------------------
20:20:59 SQL> 
20:20:59 SQL> -- Cleanup old build data preparation objects for repeat runs
20:20:59 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.00
20:20:59 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:20:59 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:20:59 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.01
20:20:59 SQL> 
20:20:59 SQL> 
20:20:59 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:20:59 SQL> --
20:20:59 SQL> -- DROP	TABLE svmc_settings ;
20:20:59 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:20:59 SQL> -- DELETE svmc_settings;
20:20:59 SQL> 
20:20:59 SQL> -- The default classification algorithm is Naive Bayes. So override
20:20:59 SQL> -- this choice to SVM using a settings table.
20:20:59 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:20:59 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:20:59 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:20:59 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:20:59 SQL> -- models.
20:20:59 SQL> --
20:20:59 SQL> 
20:20:59 SQL> -- Do this once and then comment it out.
20:20:59 SQL> -- That makes script go faster.
20:20:59 SQL> -- BEGIN
20:20:59 SQL> -- -- Populate settings table
20:20:59 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:20:59 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:20:59 SQL> --
20:20:59 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:20:59 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:20:59 SQL> --
20:20:59 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:20:59 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:20:59 SQL> --   COMMIT;
20:20:59 SQL> -- END;
20:20:59 SQL> -- /
20:20:59 SQL> 
20:20:59 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:20:59 SQL> 
20:20:59 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:20:59   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:20:59   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:20:59 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:20:59   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:20:59   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:20:59 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:20:59   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:20:59   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:20:59 SQL> 
20:20:59 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:20:59   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:20:59   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:20:59 SQL> 
20:20:59 SQL> --------------------------------
20:20:59 SQL> -- PREPARE BUILD (TRAINING) DATA
20:20:59 SQL> --
20:20:59 SQL> 
20:20:59 SQL> -- 1. Missing Value treatment for all Predictors and
20:20:59 SQL> -- 2. Outlier Treatment and
20:20:59 SQL> -- 3. Normalization are performed below.
20:20:59 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:20:59 SQL> --    normalized here.
20:20:59 SQL> 
20:20:59 SQL> BEGIN
20:20:59   2  	-- Perform missing value treatment for all predictors
20:20:59   3  	-- create miss tables
20:20:59   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:20:59   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:20:59   6  
20:20:59   7  	-- populate miss tables
20:20:59   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:20:59   9  	  miss_table_name => 'svmc_miss_num',
20:20:59  10  	  data_table_name => '&bldtable',
20:20:59  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:20:59  12  
20:20:59  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:20:59  14  	  miss_table_name => 'svmc_miss_cat',
20:20:59  15  	  data_table_name => '&bldtable',
20:20:59  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:20:59  17  
20:20:59  18  	-- xform input data to replace missing values
20:20:59  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:20:59  20  	  miss_table_name => 'svmc_miss_num',
20:20:59  21  	  data_table_name => '&bldtable',
20:20:59  22  	  xform_view_name => 'xformed_build_miss_num');
20:20:59  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:20:59  24  	  miss_table_name => 'svmc_miss_cat',
20:20:59  25  	  data_table_name => '&bldtable',
20:20:59  26  	  xform_view_name => 'xformed_build_miss_cat');
20:20:59  27  
20:20:59  28  	-- Perform outlier treatment.
20:20:59  29  	-- create clip table
20:20:59  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:20:59  31  
20:20:59  32  	-- populate clip table
20:20:59  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:20:59  34  	  clip_table_name => 'svmc_clip',
20:20:59  35  	  data_table_name => '&bldtable',
20:20:59  36  	  tail_frac	  => 0.025,
20:20:59  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:20:59  38  
20:20:59  39  	-- xform input data to winsorized data
20:20:59  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:20:59  41  	  clip_table_name => 'svmc_clip',
20:20:59  42  	  data_table_name => '&bldtable',
20:20:59  43  	  xform_view_name => 'svmc_winsor');
20:20:59  44  
20:20:59  45  	-- create normalization table
20:20:59  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:20:59  47  
20:20:59  48  	-- populate normalization table based on winsorized data
20:20:59  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:20:59  50  	  norm_table_name => 'svmc_norm',
20:20:59  51  	  data_table_name => 'svmc_winsor',
20:20:59  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:20:59  53  
20:20:59  54  	-- normalize the original data
20:20:59  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:20:59  56  	  norm_table_name => 'svmc_norm',
20:20:59  57  	  data_table_name => '&bldtable',
20:20:59  58  	  xform_view_name => 'svmc_build_prep');
20:20:59  59  END;
20:20:59  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.60
20:21:01 SQL> 
20:21:01 SQL> ---------------------
20:21:01 SQL> -- CREATE A NEW MODEL
20:21:01 SQL> --
20:21:01 SQL> -- Cleanup old model with the same name for repeat runs
20:21:01 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:21:01   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:21:01   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.98
20:21:02 SQL> 
20:21:02 SQL> -- Build a new SVM Model
20:21:02 SQL> BEGIN
20:21:02   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:21:02   3  	  model_name	      => '&model_name',
20:21:02   4  	  mining_function     => dbms_data_mining.classification,
20:21:02   5  	  data_table_name     => 'svmc_build_prep',
20:21:02   6  	  case_id_column_name => '&case_id',
20:21:02   7  	  target_column_name  => '&target',
20:21:02   8  	  settings_table_name => 'svmc_settings');
20:21:02   9  END;
20:21:02  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:04.43
20:21:06 SQL> 
20:21:06 SQL> -----------------------------------------------------------------------
20:21:06 SQL> --			       APPLY/score THE MODEL
20:21:06 SQL> -----------------------------------------------------------------------
20:21:06 SQL> 
20:21:06 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:21:06 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:21:06   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:21:06   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:21:06 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:21:06   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:21:06   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:21:06 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:21:06   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:21:06   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:21:06 SQL> -----------------------
20:21:06 SQL> -- PREPARE SCORING DATA
20:21:06 SQL> --
20:21:06 SQL> -- If the data for model creation has been prepared, then the data
20:21:06 SQL> -- to be scored using the model must be prepared in the same manner
20:21:06 SQL> -- in order to obtain meaningful results.
20:21:06 SQL> --
20:21:06 SQL> -- 1. Missing Value treatment for all Predictors and
20:21:06 SQL> -- 2. Normalization
20:21:06 SQL> -- No outlier treatment will be performed during test and apply. The
20:21:06 SQL> -- normalization step is sufficient, since the normalization parameters
20:21:06 SQL> -- already capture the effects of outlier treatment done with build data.
20:21:06 SQL> --
20:21:06 SQL> BEGIN
20:21:06   2  	-- Xform Test data to replace missing values
20:21:06   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:21:06   4  	  miss_table_name => 'svmc_miss_num',
20:21:06   5  	  data_table_name => '&scoretable',
20:21:06   6  	  xform_view_name => 'xformed_apply_miss_num');
20:21:06   7  
20:21:06   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:21:06   9  	  miss_table_name => 'svmc_miss_cat',
20:21:06  10  	  data_table_name => '&scoretable',
20:21:06  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:21:06  12  
20:21:06  13  	-- Normalize the data to be scored
20:21:06  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:21:06  15  	  norm_table_name => 'svmc_norm',
20:21:06  16  	  data_table_name => '&scoretable',
20:21:06  17  	  xform_view_name => 'svmc_apply_prep');
20:21:06  18  END;
20:21:06  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.19
20:21:07 SQL> 
20:21:07 SQL> -- Maybe I already collected a score for this prdate.
20:21:07 SQL> -- DELETE it if I did:
20:21:07 SQL> DELETE svm62scores
20:21:07   2  WHERE score > 0
20:21:07   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:21:07   4  -- I need to supply the target attribute name:
20:21:07   5  AND targ = '&1'
20:21:07   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gattn'

0 rows deleted.

Elapsed: 00:00:00.01
20:21:07 SQL> 
20:21:07 SQL> -- We do a drumroll here:
20:21:07 SQL> 
20:21:07 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:21:07   2  SELECT
20:21:07   3  prdate
20:21:07   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:21:07   5  ,sysdate
20:21:07   6  ,SUBSTR(prdate,1,7)pair
20:21:07   7  ,SUBSTR(prdate,-19)ydate
20:21:07   8  ,'&1'
20:21:07   9  FROM svmc_apply_prep
20:21:07  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gattn'

1 row created.

Elapsed: 00:00:00.05
20:21:07 SQL> @score1_5min.sql	      2010-11-04 12:50:01 aud_usd
20:21:07 SQL> --
20:21:07 SQL> -- score1_5min.sql
20:21:07 SQL> --
20:21:07 SQL> 
20:21:07 SQL> -- Demo:
20:21:07 SQL> -- @score1_5min.sql 2010-12-31 20:45:01 aud_usd
20:21:07 SQL> 
20:21:07 SQL> CREATE OR REPLACE VIEW sme AS
20:21:07   2  SELECT
20:21:07   3  prdate
20:21:07   4  ,NULL gatt
20:21:07   5  ,g00
20:21:07   6  ,g01
20:21:07   7  ,g02
20:21:07   8  ,g03
20:21:07   9  ,g04
20:21:07  10  ,g05
20:21:07  11  ,g06
20:21:07  12  ,g07
20:21:07  13  ,g08
20:21:07  14  ,g09
20:21:07  15  ,g10
20:21:07  16  ,g11
20:21:07  17  ,g12
20:21:07  18  ,g13
20:21:07  19  ,g14
20:21:07  20  ,g15
20:21:07  21  ,g16
20:21:07  22  ,g17
20:21:07  23  ,g18
20:21:07  24  ,g19
20:21:07  25  ,g20
20:21:07  26  ,g21
20:21:07  27  ,g22
20:21:07  28  ,g23
20:21:07  29  ,g24
20:21:07  30  ,g25
20:21:07  31  ,g26
20:21:07  32  ,g27
20:21:07  33  ,g28
20:21:07  34  ,g29
20:21:07  35  ,g30
20:21:07  36  ,g31
20:21:07  37  ,g32
20:21:07  38  ,g33
20:21:07  39  ,g34
20:21:07  40  ,g35
20:21:07  41  ,g36
20:21:07  42  ,g37
20:21:07  43  ,g38
20:21:07  44  ,g39
20:21:07  45  ,g40
20:21:07  46  ,g41
20:21:07  47  FROM modsrc
20:21:07  48  WHERE ydate = '&1'||' '||'&2'
20:21:07  49  AND pair = '&3'
20:21:07  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-11-04'||' '||'12:50:01'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.05
20:21:07 SQL> 
20:21:07 SQL> -- rpt
20:21:07 SQL> -- We should see just 1 row:
20:21:07 SQL> 
20:21:07 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.01
20:21:07 SQL> 
20:21:07 SQL> -- Build the model:
20:21:07 SQL> CREATE OR REPLACE VIEW bme AS
20:21:07   2  SELECT
20:21:07   3  prdate
20:21:07   4  ,gatt
20:21:07   5  ,g00
20:21:07   6  ,g01
20:21:07   7  ,g02
20:21:07   8  ,g03
20:21:07   9  ,g04
20:21:07  10  ,g05
20:21:07  11  ,g06
20:21:07  12  ,g07
20:21:07  13  ,g08
20:21:07  14  ,g09
20:21:07  15  ,g10
20:21:07  16  ,g11
20:21:07  17  ,g12
20:21:07  18  ,g13
20:21:07  19  ,g14
20:21:07  20  ,g15
20:21:07  21  ,g16
20:21:07  22  ,g17
20:21:07  23  ,g18
20:21:07  24  ,g19
20:21:07  25  ,g20
20:21:07  26  ,g21
20:21:07  27  ,g22
20:21:07  28  ,g23
20:21:07  29  ,g24
20:21:07  30  ,g25
20:21:07  31  ,g26
20:21:07  32  ,g27
20:21:07  33  ,g28
20:21:07  34  ,g29
20:21:07  35  ,g30
20:21:07  36  ,g31
20:21:07  37  ,g32
20:21:07  38  ,g33
20:21:07  39  ,g34
20:21:07  40  ,g35
20:21:07  41  ,g36
20:21:07  42  ,g37
20:21:07  43  ,g38
20:21:07  44  ,g39
20:21:07  45  ,g40
20:21:07  46  ,g41
20:21:07  47  FROM modsrc
20:21:07  48  WHERE gatt IN('nup','up')
20:21:07  49  -- Use only rows which are older than 1 day:
20:21:07  50  AND 1+ydate < '&1'||' '||'&2'
20:21:07  51  AND pair = '&3'
20:21:07  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-11-04'||' '||'12:50:01'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:21:07 SQL> 
20:21:07 SQL> -- rpt
20:21:07 SQL> 
20:21:07 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt;

GAT COUNT(PRDATE)
--- -------------
nup	     3561
up	     2446

Elapsed: 00:00:00.02
20:21:07 SQL> 
20:21:07 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-11-03 12:45:01

Elapsed: 00:00:00.01
20:21:07 SQL> 
20:21:07 SQL> -- Now build model from bme and score sme
20:21:07 SQL> @score1.sql gatt
20:21:07 SQL> --
20:21:07 SQL> -- score1.sql
20:21:07 SQL> --
20:21:07 SQL> 
20:21:07 SQL> -- I use this script to send 5 params to score.sql
20:21:07 SQL> -- which does the heavy lifting of creating an SVM model.
20:21:07 SQL> -- Then at the very end of this script I use the model
20:21:07 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:21:07 SQL> 
20:21:07 SQL> -- I call this script from 2 other scripts:
20:21:07 SQL> -- score1_5min.sql
20:21:07 SQL> -- score1_5min_gattn.sql
20:21:07 SQL> 
20:21:07 SQL> -- The 1st param is the name of the target attribute.
20:21:07 SQL> -- I like to call my target attributes either gatt or gattn.
20:21:07 SQL> 
20:21:07 SQL> -- Demo:
20:21:07 SQL> -- @score1.sql 'gatt'
20:21:07 SQL> -- @score1.sql 'gattn'
20:21:07 SQL> 
20:21:07 SQL> -- Now, I fill up svmc_apply_prep.
20:21:07 SQL> -- I use same model_name used in score.sql
20:21:07 SQL> DEFINE model_name = 'svmfx101'
20:21:07 SQL> DEFINE bldtable	= 'bme'
20:21:07 SQL> DEFINE scoretable = 'sme'
20:21:07 SQL> DEFINE case_id	= 'prdate'
20:21:07 SQL> -- Demo:
20:21:07 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:21:07 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:21:07 SQL> --
20:21:07 SQL> -- score.sql
20:21:07 SQL> --
20:21:07 SQL> 
20:21:07 SQL> -- usage: score.sql
20:21:07 SQL> 
20:21:07 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:21:07 SQL> 
20:21:07 SQL> -- DEFINE target	   = 'gatt'
20:21:07 SQL> -- DEFINE model_name = 'svmfx101'
20:21:07 SQL> -- DEFINE bldtable   = 'bme'
20:21:07 SQL> -- DEFINE scoretable = 'sme'
20:21:07 SQL> -- DEFINE case_id    = 'prdate'
20:21:07 SQL> 
20:21:07 SQL> DEFINE target	= '&1'
20:21:07 SQL> DEFINE model_name = '&2'
20:21:07 SQL> DEFINE bldtable	= '&3'
20:21:07 SQL> DEFINE scoretable = '&4'
20:21:07 SQL> DEFINE case_id	= '&5'
20:21:07 SQL> 
20:21:07 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:21:07 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:21:07 SQL> 
20:21:07 SQL> -- Builds an SVM model using pl/sql.
20:21:07 SQL> 
20:21:07 SQL> -----------------------------------------------------------------------
20:21:07 SQL> --			    BUILD THE MODEL
20:21:07 SQL> -----------------------------------------------------------------------
20:21:07 SQL> 
20:21:07 SQL> -- Cleanup old build data preparation objects for repeat runs
20:21:07 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.00
20:21:07 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.01
20:21:07 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:21:07 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.00
20:21:07 SQL> 
20:21:07 SQL> 
20:21:07 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:21:07 SQL> --
20:21:07 SQL> -- DROP	TABLE svmc_settings ;
20:21:07 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:21:07 SQL> -- DELETE svmc_settings;
20:21:07 SQL> 
20:21:07 SQL> -- The default classification algorithm is Naive Bayes. So override
20:21:07 SQL> -- this choice to SVM using a settings table.
20:21:07 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:21:07 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:21:07 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:21:07 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:21:07 SQL> -- models.
20:21:07 SQL> --
20:21:07 SQL> 
20:21:07 SQL> -- Do this once and then comment it out.
20:21:07 SQL> -- That makes script go faster.
20:21:07 SQL> -- BEGIN
20:21:07 SQL> -- -- Populate settings table
20:21:07 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:21:07 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:21:07 SQL> --
20:21:07 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:21:07 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:21:07 SQL> --
20:21:07 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:21:07 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:21:07 SQL> --   COMMIT;
20:21:07 SQL> -- END;
20:21:07 SQL> -- /
20:21:07 SQL> 
20:21:07 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:21:07 SQL> 
20:21:07 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:21:07   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:21:07   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:21:07 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:21:07   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:21:07   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:21:07 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:21:07   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:21:07   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:21:07 SQL> 
20:21:07 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:21:07   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:21:07   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
20:21:07 SQL> 
20:21:07 SQL> --------------------------------
20:21:07 SQL> -- PREPARE BUILD (TRAINING) DATA
20:21:07 SQL> --
20:21:07 SQL> 
20:21:07 SQL> -- 1. Missing Value treatment for all Predictors and
20:21:07 SQL> -- 2. Outlier Treatment and
20:21:07 SQL> -- 3. Normalization are performed below.
20:21:07 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:21:07 SQL> --    normalized here.
20:21:07 SQL> 
20:21:07 SQL> BEGIN
20:21:07   2  	-- Perform missing value treatment for all predictors
20:21:07   3  	-- create miss tables
20:21:07   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:21:07   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:21:07   6  
20:21:07   7  	-- populate miss tables
20:21:07   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:21:07   9  	  miss_table_name => 'svmc_miss_num',
20:21:07  10  	  data_table_name => '&bldtable',
20:21:07  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:21:07  12  
20:21:07  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:21:07  14  	  miss_table_name => 'svmc_miss_cat',
20:21:07  15  	  data_table_name => '&bldtable',
20:21:07  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:21:07  17  
20:21:07  18  	-- xform input data to replace missing values
20:21:07  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:21:07  20  	  miss_table_name => 'svmc_miss_num',
20:21:07  21  	  data_table_name => '&bldtable',
20:21:07  22  	  xform_view_name => 'xformed_build_miss_num');
20:21:07  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:21:07  24  	  miss_table_name => 'svmc_miss_cat',
20:21:07  25  	  data_table_name => '&bldtable',
20:21:07  26  	  xform_view_name => 'xformed_build_miss_cat');
20:21:07  27  
20:21:07  28  	-- Perform outlier treatment.
20:21:07  29  	-- create clip table
20:21:07  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:21:07  31  
20:21:07  32  	-- populate clip table
20:21:07  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:21:07  34  	  clip_table_name => 'svmc_clip',
20:21:07  35  	  data_table_name => '&bldtable',
20:21:07  36  	  tail_frac	  => 0.025,
20:21:07  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:21:07  38  
20:21:07  39  	-- xform input data to winsorized data
20:21:07  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:21:07  41  	  clip_table_name => 'svmc_clip',
20:21:07  42  	  data_table_name => '&bldtable',
20:21:07  43  	  xform_view_name => 'svmc_winsor');
20:21:07  44  
20:21:07  45  	-- create normalization table
20:21:07  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:21:07  47  
20:21:07  48  	-- populate normalization table based on winsorized data
20:21:07  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:21:07  50  	  norm_table_name => 'svmc_norm',
20:21:07  51  	  data_table_name => 'svmc_winsor',
20:21:07  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:21:07  53  
20:21:07  54  	-- normalize the original data
20:21:07  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:21:07  56  	  norm_table_name => 'svmc_norm',
20:21:07  57  	  data_table_name => '&bldtable',
20:21:07  58  	  xform_view_name => 'svmc_build_prep');
20:21:07  59  END;
20:21:07  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.39
20:21:08 SQL> 
20:21:08 SQL> ---------------------
20:21:08 SQL> -- CREATE A NEW MODEL
20:21:08 SQL> --
20:21:08 SQL> -- Cleanup old model with the same name for repeat runs
20:21:08 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:21:08   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:21:08   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.91
20:21:09 SQL> 
20:21:09 SQL> -- Build a new SVM Model
20:21:09 SQL> BEGIN
20:21:09   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:21:09   3  	  model_name	      => '&model_name',
20:21:09   4  	  mining_function     => dbms_data_mining.classification,
20:21:09   5  	  data_table_name     => 'svmc_build_prep',
20:21:09   6  	  case_id_column_name => '&case_id',
20:21:09   7  	  target_column_name  => '&target',
20:21:09   8  	  settings_table_name => 'svmc_settings');
20:21:09   9  END;
20:21:09  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:04.78
20:21:14 SQL> 
20:21:14 SQL> -----------------------------------------------------------------------
20:21:14 SQL> --			       APPLY/score THE MODEL
20:21:14 SQL> -----------------------------------------------------------------------
20:21:14 SQL> 
20:21:14 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:21:14 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:21:14   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:21:14   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:21:14 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:21:14   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:21:14   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:21:14 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:21:14   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:21:14   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:21:14 SQL> -----------------------
20:21:14 SQL> -- PREPARE SCORING DATA
20:21:14 SQL> --
20:21:14 SQL> -- If the data for model creation has been prepared, then the data
20:21:14 SQL> -- to be scored using the model must be prepared in the same manner
20:21:14 SQL> -- in order to obtain meaningful results.
20:21:14 SQL> --
20:21:14 SQL> -- 1. Missing Value treatment for all Predictors and
20:21:14 SQL> -- 2. Normalization
20:21:14 SQL> -- No outlier treatment will be performed during test and apply. The
20:21:14 SQL> -- normalization step is sufficient, since the normalization parameters
20:21:14 SQL> -- already capture the effects of outlier treatment done with build data.
20:21:14 SQL> --
20:21:14 SQL> BEGIN
20:21:14   2  	-- Xform Test data to replace missing values
20:21:14   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:21:14   4  	  miss_table_name => 'svmc_miss_num',
20:21:14   5  	  data_table_name => '&scoretable',
20:21:14   6  	  xform_view_name => 'xformed_apply_miss_num');
20:21:14   7  
20:21:14   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:21:14   9  	  miss_table_name => 'svmc_miss_cat',
20:21:14  10  	  data_table_name => '&scoretable',
20:21:14  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:21:14  12  
20:21:14  13  	-- Normalize the data to be scored
20:21:14  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:21:14  15  	  norm_table_name => 'svmc_norm',
20:21:14  16  	  data_table_name => '&scoretable',
20:21:14  17  	  xform_view_name => 'svmc_apply_prep');
20:21:14  18  END;
20:21:14  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.23
20:21:14 SQL> 
20:21:14 SQL> -- Maybe I already collected a score for this prdate.
20:21:14 SQL> -- DELETE it if I did:
20:21:14 SQL> DELETE svm62scores
20:21:14   2  WHERE score > 0
20:21:14   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:21:14   4  -- I need to supply the target attribute name:
20:21:14   5  AND targ = '&1'
20:21:14   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gatt'

0 rows deleted.

Elapsed: 00:00:00.02
20:21:14 SQL> 
20:21:14 SQL> -- We do a drumroll here:
20:21:14 SQL> 
20:21:14 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:21:14   2  SELECT
20:21:14   3  prdate
20:21:14   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:21:14   5  ,sysdate
20:21:14   6  ,SUBSTR(prdate,1,7)pair
20:21:14   7  ,SUBSTR(prdate,-19)ydate
20:21:14   8  ,'&1'
20:21:14   9  FROM svmc_apply_prep
20:21:14  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gatt'

1 row created.

Elapsed: 00:00:00.06
20:21:14 SQL> @score1_5min_gattn.sql	2010-11-25 21:55:01 aud_usd
20:21:14 SQL> --
20:21:14 SQL> -- score1_5min_gattn.sql
20:21:14 SQL> --
20:21:14 SQL> 
20:21:14 SQL> -- Demo:
20:21:14 SQL> -- @score1_5min_gattn.sql 2010-12-31 20:45:01 aud_usd
20:21:14 SQL> 
20:21:14 SQL> CREATE OR REPLACE VIEW sme AS
20:21:14   2  SELECT
20:21:14   3  prdate
20:21:14   4  ,NULL gattn
20:21:14   5  ,g00
20:21:14   6  ,g01
20:21:14   7  ,g02
20:21:14   8  ,g03
20:21:14   9  ,g04
20:21:14  10  ,g05
20:21:14  11  ,g06
20:21:14  12  ,g07
20:21:14  13  ,g08
20:21:14  14  ,g09
20:21:14  15  ,g10
20:21:14  16  ,g11
20:21:14  17  ,g12
20:21:14  18  ,g13
20:21:14  19  ,g14
20:21:14  20  ,g15
20:21:14  21  ,g16
20:21:14  22  ,g17
20:21:14  23  ,g18
20:21:14  24  ,g19
20:21:14  25  ,g20
20:21:14  26  ,g21
20:21:14  27  ,g22
20:21:14  28  ,g23
20:21:14  29  ,g24
20:21:14  30  ,g25
20:21:14  31  ,g26
20:21:14  32  ,g27
20:21:14  33  ,g28
20:21:14  34  ,g29
20:21:14  35  ,g30
20:21:14  36  ,g31
20:21:14  37  ,g32
20:21:14  38  ,g33
20:21:14  39  ,g34
20:21:14  40  ,g35
20:21:14  41  ,g36
20:21:14  42  ,g37
20:21:14  43  ,g38
20:21:14  44  ,g39
20:21:14  45  ,g40
20:21:14  46  ,g41
20:21:14  47  FROM modsrc
20:21:14  48  WHERE ydate = '&1'||' '||'&2'
20:21:14  49  AND pair = '&3'
20:21:14  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-11-25'||' '||'21:55:01'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.03
20:21:14 SQL> 
20:21:14 SQL> -- rpt
20:21:14 SQL> -- We should see just 1 row:
20:21:14 SQL> 
20:21:14 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.02
20:21:15 SQL> 
20:21:15 SQL> -- Build the model:
20:21:15 SQL> CREATE OR REPLACE VIEW bme AS
20:21:15   2  SELECT
20:21:15   3  prdate
20:21:15   4  ,gattn
20:21:15   5  ,g00
20:21:15   6  ,g01
20:21:15   7  ,g02
20:21:15   8  ,g03
20:21:15   9  ,g04
20:21:15  10  ,g05
20:21:15  11  ,g06
20:21:15  12  ,g07
20:21:15  13  ,g08
20:21:15  14  ,g09
20:21:15  15  ,g10
20:21:15  16  ,g11
20:21:15  17  ,g12
20:21:15  18  ,g13
20:21:15  19  ,g14
20:21:15  20  ,g15
20:21:15  21  ,g16
20:21:15  22  ,g17
20:21:15  23  ,g18
20:21:15  24  ,g19
20:21:15  25  ,g20
20:21:15  26  ,g21
20:21:15  27  ,g22
20:21:15  28  ,g23
20:21:15  29  ,g24
20:21:15  30  ,g25
20:21:15  31  ,g26
20:21:15  32  ,g27
20:21:15  33  ,g28
20:21:15  34  ,g29
20:21:15  35  ,g30
20:21:15  36  ,g31
20:21:15  37  ,g32
20:21:15  38  ,g33
20:21:15  39  ,g34
20:21:15  40  ,g35
20:21:15  41  ,g36
20:21:15  42  ,g37
20:21:15  43  ,g38
20:21:15  44  ,g39
20:21:15  45  ,g40
20:21:15  46  ,g41
20:21:15  47  FROM modsrc
20:21:15  48  WHERE gattn IN('nup','up')
20:21:15  49  -- Use only rows which are older than 1 day:
20:21:15  50  AND 1+ydate < '&1'||' '||'&2'
20:21:15  51  AND pair = '&3'
20:21:15  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-11-25'||' '||'21:55:01'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:21:15 SQL> 
20:21:15 SQL> -- rpt
20:21:15 SQL> 
20:21:15 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	     6633
up	     3829

Elapsed: 00:00:00.02
20:21:15 SQL> 
20:21:15 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-11-24 21:50:01

Elapsed: 00:00:00.02
20:21:15 SQL> 
20:21:15 SQL> -- Now build model from bme and score sme
20:21:15 SQL> @score1.sql gattn
20:21:15 SQL> --
20:21:15 SQL> -- score1.sql
20:21:15 SQL> --
20:21:15 SQL> 
20:21:15 SQL> -- I use this script to send 5 params to score.sql
20:21:15 SQL> -- which does the heavy lifting of creating an SVM model.
20:21:15 SQL> -- Then at the very end of this script I use the model
20:21:15 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:21:15 SQL> 
20:21:15 SQL> -- I call this script from 2 other scripts:
20:21:15 SQL> -- score1_5min.sql
20:21:15 SQL> -- score1_5min_gattn.sql
20:21:15 SQL> 
20:21:15 SQL> -- The 1st param is the name of the target attribute.
20:21:15 SQL> -- I like to call my target attributes either gatt or gattn.
20:21:15 SQL> 
20:21:15 SQL> -- Demo:
20:21:15 SQL> -- @score1.sql 'gatt'
20:21:15 SQL> -- @score1.sql 'gattn'
20:21:15 SQL> 
20:21:15 SQL> -- Now, I fill up svmc_apply_prep.
20:21:15 SQL> -- I use same model_name used in score.sql
20:21:15 SQL> DEFINE model_name = 'svmfx101'
20:21:15 SQL> DEFINE bldtable	= 'bme'
20:21:15 SQL> DEFINE scoretable = 'sme'
20:21:15 SQL> DEFINE case_id	= 'prdate'
20:21:15 SQL> -- Demo:
20:21:15 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:21:15 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:21:15 SQL> --
20:21:15 SQL> -- score.sql
20:21:15 SQL> --
20:21:15 SQL> 
20:21:15 SQL> -- usage: score.sql
20:21:15 SQL> 
20:21:15 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:21:15 SQL> 
20:21:15 SQL> -- DEFINE target	   = 'gatt'
20:21:15 SQL> -- DEFINE model_name = 'svmfx101'
20:21:15 SQL> -- DEFINE bldtable   = 'bme'
20:21:15 SQL> -- DEFINE scoretable = 'sme'
20:21:15 SQL> -- DEFINE case_id    = 'prdate'
20:21:15 SQL> 
20:21:15 SQL> DEFINE target	= '&1'
20:21:15 SQL> DEFINE model_name = '&2'
20:21:15 SQL> DEFINE bldtable	= '&3'
20:21:15 SQL> DEFINE scoretable = '&4'
20:21:15 SQL> DEFINE case_id	= '&5'
20:21:15 SQL> 
20:21:15 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:21:15 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:21:15 SQL> 
20:21:15 SQL> -- Builds an SVM model using pl/sql.
20:21:15 SQL> 
20:21:15 SQL> -----------------------------------------------------------------------
20:21:15 SQL> --			    BUILD THE MODEL
20:21:15 SQL> -----------------------------------------------------------------------
20:21:15 SQL> 
20:21:15 SQL> -- Cleanup old build data preparation objects for repeat runs
20:21:15 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.01
20:21:15 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:21:15 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:21:15 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.00
20:21:15 SQL> 
20:21:15 SQL> 
20:21:15 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:21:15 SQL> --
20:21:15 SQL> -- DROP	TABLE svmc_settings ;
20:21:15 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:21:15 SQL> -- DELETE svmc_settings;
20:21:15 SQL> 
20:21:15 SQL> -- The default classification algorithm is Naive Bayes. So override
20:21:15 SQL> -- this choice to SVM using a settings table.
20:21:15 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:21:15 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:21:15 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:21:15 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:21:15 SQL> -- models.
20:21:15 SQL> --
20:21:15 SQL> 
20:21:15 SQL> -- Do this once and then comment it out.
20:21:15 SQL> -- That makes script go faster.
20:21:15 SQL> -- BEGIN
20:21:15 SQL> -- -- Populate settings table
20:21:15 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:21:15 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:21:15 SQL> --
20:21:15 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:21:15 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:21:15 SQL> --
20:21:15 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:21:15 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:21:15 SQL> --   COMMIT;
20:21:15 SQL> -- END;
20:21:15 SQL> -- /
20:21:15 SQL> 
20:21:15 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.01
20:21:15 SQL> 
20:21:15 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:21:15   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:21:15   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:21:15 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:21:15   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:21:15   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
20:21:15 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:21:15   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:21:15   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:21:15 SQL> 
20:21:15 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:21:15   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:21:15   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:21:15 SQL> 
20:21:15 SQL> --------------------------------
20:21:15 SQL> -- PREPARE BUILD (TRAINING) DATA
20:21:15 SQL> --
20:21:15 SQL> 
20:21:15 SQL> -- 1. Missing Value treatment for all Predictors and
20:21:15 SQL> -- 2. Outlier Treatment and
20:21:15 SQL> -- 3. Normalization are performed below.
20:21:15 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:21:15 SQL> --    normalized here.
20:21:15 SQL> 
20:21:15 SQL> BEGIN
20:21:15   2  	-- Perform missing value treatment for all predictors
20:21:15   3  	-- create miss tables
20:21:15   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:21:15   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:21:15   6  
20:21:15   7  	-- populate miss tables
20:21:15   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:21:15   9  	  miss_table_name => 'svmc_miss_num',
20:21:15  10  	  data_table_name => '&bldtable',
20:21:15  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:21:15  12  
20:21:15  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:21:15  14  	  miss_table_name => 'svmc_miss_cat',
20:21:15  15  	  data_table_name => '&bldtable',
20:21:15  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:21:15  17  
20:21:15  18  	-- xform input data to replace missing values
20:21:15  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:21:15  20  	  miss_table_name => 'svmc_miss_num',
20:21:15  21  	  data_table_name => '&bldtable',
20:21:15  22  	  xform_view_name => 'xformed_build_miss_num');
20:21:15  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:21:15  24  	  miss_table_name => 'svmc_miss_cat',
20:21:15  25  	  data_table_name => '&bldtable',
20:21:15  26  	  xform_view_name => 'xformed_build_miss_cat');
20:21:15  27  
20:21:15  28  	-- Perform outlier treatment.
20:21:15  29  	-- create clip table
20:21:15  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:21:15  31  
20:21:15  32  	-- populate clip table
20:21:15  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:21:15  34  	  clip_table_name => 'svmc_clip',
20:21:15  35  	  data_table_name => '&bldtable',
20:21:15  36  	  tail_frac	  => 0.025,
20:21:15  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:21:15  38  
20:21:15  39  	-- xform input data to winsorized data
20:21:15  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:21:15  41  	  clip_table_name => 'svmc_clip',
20:21:15  42  	  data_table_name => '&bldtable',
20:21:15  43  	  xform_view_name => 'svmc_winsor');
20:21:15  44  
20:21:15  45  	-- create normalization table
20:21:15  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:21:15  47  
20:21:15  48  	-- populate normalization table based on winsorized data
20:21:15  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:21:15  50  	  norm_table_name => 'svmc_norm',
20:21:15  51  	  data_table_name => 'svmc_winsor',
20:21:15  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:21:15  53  
20:21:15  54  	-- normalize the original data
20:21:15  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:21:15  56  	  norm_table_name => 'svmc_norm',
20:21:15  57  	  data_table_name => '&bldtable',
20:21:15  58  	  xform_view_name => 'svmc_build_prep');
20:21:15  59  END;
20:21:15  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.93
20:21:17 SQL> 
20:21:17 SQL> ---------------------
20:21:17 SQL> -- CREATE A NEW MODEL
20:21:17 SQL> --
20:21:17 SQL> -- Cleanup old model with the same name for repeat runs
20:21:17 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:21:17   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:21:17   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.99
20:21:18 SQL> 
20:21:18 SQL> -- Build a new SVM Model
20:21:18 SQL> BEGIN
20:21:18   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:21:18   3  	  model_name	      => '&model_name',
20:21:18   4  	  mining_function     => dbms_data_mining.classification,
20:21:18   5  	  data_table_name     => 'svmc_build_prep',
20:21:18   6  	  case_id_column_name => '&case_id',
20:21:18   7  	  target_column_name  => '&target',
20:21:18   8  	  settings_table_name => 'svmc_settings');
20:21:18   9  END;
20:21:18  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:05.83
20:21:24 SQL> 
20:21:24 SQL> -----------------------------------------------------------------------
20:21:24 SQL> --			       APPLY/score THE MODEL
20:21:24 SQL> -----------------------------------------------------------------------
20:21:24 SQL> 
20:21:24 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:21:24 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:21:24   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:21:24   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:21:24 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:21:24   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:21:24   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:21:24 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:21:24   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:21:24   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:21:24 SQL> -----------------------
20:21:24 SQL> -- PREPARE SCORING DATA
20:21:24 SQL> --
20:21:24 SQL> -- If the data for model creation has been prepared, then the data
20:21:24 SQL> -- to be scored using the model must be prepared in the same manner
20:21:24 SQL> -- in order to obtain meaningful results.
20:21:24 SQL> --
20:21:24 SQL> -- 1. Missing Value treatment for all Predictors and
20:21:24 SQL> -- 2. Normalization
20:21:24 SQL> -- No outlier treatment will be performed during test and apply. The
20:21:24 SQL> -- normalization step is sufficient, since the normalization parameters
20:21:24 SQL> -- already capture the effects of outlier treatment done with build data.
20:21:24 SQL> --
20:21:24 SQL> BEGIN
20:21:24   2  	-- Xform Test data to replace missing values
20:21:24   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:21:24   4  	  miss_table_name => 'svmc_miss_num',
20:21:24   5  	  data_table_name => '&scoretable',
20:21:24   6  	  xform_view_name => 'xformed_apply_miss_num');
20:21:24   7  
20:21:24   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:21:24   9  	  miss_table_name => 'svmc_miss_cat',
20:21:24  10  	  data_table_name => '&scoretable',
20:21:24  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:21:24  12  
20:21:24  13  	-- Normalize the data to be scored
20:21:24  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:21:24  15  	  norm_table_name => 'svmc_norm',
20:21:24  16  	  data_table_name => '&scoretable',
20:21:24  17  	  xform_view_name => 'svmc_apply_prep');
20:21:24  18  END;
20:21:24  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.19
20:21:24 SQL> 
20:21:24 SQL> -- Maybe I already collected a score for this prdate.
20:21:24 SQL> -- DELETE it if I did:
20:21:24 SQL> DELETE svm62scores
20:21:24   2  WHERE score > 0
20:21:24   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:21:24   4  -- I need to supply the target attribute name:
20:21:24   5  AND targ = '&1'
20:21:24   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gattn'

0 rows deleted.

Elapsed: 00:00:00.02
20:21:24 SQL> 
20:21:24 SQL> -- We do a drumroll here:
20:21:24 SQL> 
20:21:24 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:21:24   2  SELECT
20:21:24   3  prdate
20:21:24   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:21:24   5  ,sysdate
20:21:24   6  ,SUBSTR(prdate,1,7)pair
20:21:24   7  ,SUBSTR(prdate,-19)ydate
20:21:24   8  ,'&1'
20:21:24   9  FROM svmc_apply_prep
20:21:24  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gattn'

1 row created.

Elapsed: 00:00:00.04
20:21:24 SQL> @score1_5min.sql	      2010-11-01 03:40:01 aud_usd
20:21:24 SQL> --
20:21:24 SQL> -- score1_5min.sql
20:21:24 SQL> --
20:21:24 SQL> 
20:21:24 SQL> -- Demo:
20:21:24 SQL> -- @score1_5min.sql 2010-12-31 20:45:01 aud_usd
20:21:24 SQL> 
20:21:24 SQL> CREATE OR REPLACE VIEW sme AS
20:21:24   2  SELECT
20:21:24   3  prdate
20:21:24   4  ,NULL gatt
20:21:24   5  ,g00
20:21:24   6  ,g01
20:21:24   7  ,g02
20:21:24   8  ,g03
20:21:24   9  ,g04
20:21:24  10  ,g05
20:21:24  11  ,g06
20:21:24  12  ,g07
20:21:24  13  ,g08
20:21:24  14  ,g09
20:21:24  15  ,g10
20:21:24  16  ,g11
20:21:24  17  ,g12
20:21:24  18  ,g13
20:21:24  19  ,g14
20:21:24  20  ,g15
20:21:24  21  ,g16
20:21:24  22  ,g17
20:21:24  23  ,g18
20:21:24  24  ,g19
20:21:24  25  ,g20
20:21:24  26  ,g21
20:21:24  27  ,g22
20:21:24  28  ,g23
20:21:24  29  ,g24
20:21:24  30  ,g25
20:21:24  31  ,g26
20:21:24  32  ,g27
20:21:24  33  ,g28
20:21:24  34  ,g29
20:21:24  35  ,g30
20:21:24  36  ,g31
20:21:24  37  ,g32
20:21:24  38  ,g33
20:21:24  39  ,g34
20:21:24  40  ,g35
20:21:24  41  ,g36
20:21:24  42  ,g37
20:21:24  43  ,g38
20:21:24  44  ,g39
20:21:24  45  ,g40
20:21:24  46  ,g41
20:21:24  47  FROM modsrc
20:21:24  48  WHERE ydate = '&1'||' '||'&2'
20:21:24  49  AND pair = '&3'
20:21:24  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-11-01'||' '||'03:40:01'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:21:24 SQL> 
20:21:24 SQL> -- rpt
20:21:24 SQL> -- We should see just 1 row:
20:21:24 SQL> 
20:21:24 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.01
20:21:24 SQL> 
20:21:24 SQL> -- Build the model:
20:21:24 SQL> CREATE OR REPLACE VIEW bme AS
20:21:24   2  SELECT
20:21:24   3  prdate
20:21:24   4  ,gatt
20:21:24   5  ,g00
20:21:24   6  ,g01
20:21:24   7  ,g02
20:21:24   8  ,g03
20:21:24   9  ,g04
20:21:24  10  ,g05
20:21:24  11  ,g06
20:21:24  12  ,g07
20:21:24  13  ,g08
20:21:24  14  ,g09
20:21:24  15  ,g10
20:21:24  16  ,g11
20:21:24  17  ,g12
20:21:24  18  ,g13
20:21:24  19  ,g14
20:21:24  20  ,g15
20:21:24  21  ,g16
20:21:24  22  ,g17
20:21:24  23  ,g18
20:21:24  24  ,g19
20:21:24  25  ,g20
20:21:24  26  ,g21
20:21:24  27  ,g22
20:21:24  28  ,g23
20:21:24  29  ,g24
20:21:24  30  ,g25
20:21:24  31  ,g26
20:21:24  32  ,g27
20:21:24  33  ,g28
20:21:24  34  ,g29
20:21:24  35  ,g30
20:21:24  36  ,g31
20:21:24  37  ,g32
20:21:24  38  ,g33
20:21:24  39  ,g34
20:21:24  40  ,g35
20:21:24  41  ,g36
20:21:24  42  ,g37
20:21:24  43  ,g38
20:21:24  44  ,g39
20:21:24  45  ,g40
20:21:24  46  ,g41
20:21:24  47  FROM modsrc
20:21:24  48  WHERE gatt IN('nup','up')
20:21:24  49  -- Use only rows which are older than 1 day:
20:21:24  50  AND 1+ydate < '&1'||' '||'&2'
20:21:24  51  AND pair = '&3'
20:21:24  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-11-01'||' '||'03:40:01'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.05
20:21:24 SQL> 
20:21:24 SQL> -- rpt
20:21:24 SQL> 
20:21:24 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt;

GAT COUNT(PRDATE)
--- -------------
nup	     3057
up	     2183

Elapsed: 00:00:00.02
20:21:24 SQL> 
20:21:24 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-10-29 21:50:01

Elapsed: 00:00:00.01
20:21:24 SQL> 
20:21:24 SQL> -- Now build model from bme and score sme
20:21:24 SQL> @score1.sql gatt
20:21:24 SQL> --
20:21:24 SQL> -- score1.sql
20:21:24 SQL> --
20:21:24 SQL> 
20:21:24 SQL> -- I use this script to send 5 params to score.sql
20:21:24 SQL> -- which does the heavy lifting of creating an SVM model.
20:21:24 SQL> -- Then at the very end of this script I use the model
20:21:24 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:21:24 SQL> 
20:21:24 SQL> -- I call this script from 2 other scripts:
20:21:24 SQL> -- score1_5min.sql
20:21:24 SQL> -- score1_5min_gattn.sql
20:21:24 SQL> 
20:21:24 SQL> -- The 1st param is the name of the target attribute.
20:21:24 SQL> -- I like to call my target attributes either gatt or gattn.
20:21:24 SQL> 
20:21:24 SQL> -- Demo:
20:21:24 SQL> -- @score1.sql 'gatt'
20:21:24 SQL> -- @score1.sql 'gattn'
20:21:24 SQL> 
20:21:24 SQL> -- Now, I fill up svmc_apply_prep.
20:21:24 SQL> -- I use same model_name used in score.sql
20:21:24 SQL> DEFINE model_name = 'svmfx101'
20:21:24 SQL> DEFINE bldtable	= 'bme'
20:21:24 SQL> DEFINE scoretable = 'sme'
20:21:24 SQL> DEFINE case_id	= 'prdate'
20:21:24 SQL> -- Demo:
20:21:24 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:21:24 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:21:24 SQL> --
20:21:24 SQL> -- score.sql
20:21:24 SQL> --
20:21:24 SQL> 
20:21:24 SQL> -- usage: score.sql
20:21:24 SQL> 
20:21:24 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:21:24 SQL> 
20:21:24 SQL> -- DEFINE target	   = 'gatt'
20:21:24 SQL> -- DEFINE model_name = 'svmfx101'
20:21:24 SQL> -- DEFINE bldtable   = 'bme'
20:21:24 SQL> -- DEFINE scoretable = 'sme'
20:21:24 SQL> -- DEFINE case_id    = 'prdate'
20:21:24 SQL> 
20:21:24 SQL> DEFINE target	= '&1'
20:21:24 SQL> DEFINE model_name = '&2'
20:21:24 SQL> DEFINE bldtable	= '&3'
20:21:24 SQL> DEFINE scoretable = '&4'
20:21:24 SQL> DEFINE case_id	= '&5'
20:21:24 SQL> 
20:21:24 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:21:24 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:21:24 SQL> 
20:21:24 SQL> -- Builds an SVM model using pl/sql.
20:21:24 SQL> 
20:21:24 SQL> -----------------------------------------------------------------------
20:21:24 SQL> --			    BUILD THE MODEL
20:21:24 SQL> -----------------------------------------------------------------------
20:21:24 SQL> 
20:21:24 SQL> -- Cleanup old build data preparation objects for repeat runs
20:21:24 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.01
20:21:24 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:21:24 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:21:24 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.00
20:21:24 SQL> 
20:21:24 SQL> 
20:21:24 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:21:24 SQL> --
20:21:24 SQL> -- DROP	TABLE svmc_settings ;
20:21:24 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:21:24 SQL> -- DELETE svmc_settings;
20:21:24 SQL> 
20:21:24 SQL> -- The default classification algorithm is Naive Bayes. So override
20:21:24 SQL> -- this choice to SVM using a settings table.
20:21:24 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:21:24 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:21:24 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:21:24 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:21:24 SQL> -- models.
20:21:24 SQL> --
20:21:24 SQL> 
20:21:24 SQL> -- Do this once and then comment it out.
20:21:24 SQL> -- That makes script go faster.
20:21:24 SQL> -- BEGIN
20:21:24 SQL> -- -- Populate settings table
20:21:24 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:21:24 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:21:24 SQL> --
20:21:24 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:21:24 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:21:24 SQL> --
20:21:24 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:21:24 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:21:24 SQL> --   COMMIT;
20:21:24 SQL> -- END;
20:21:24 SQL> -- /
20:21:24 SQL> 
20:21:24 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:21:24 SQL> 
20:21:24 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:21:24   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:21:24   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:21:24 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:21:24   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:21:24   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:21:24 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:21:24   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:21:24   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:21:24 SQL> 
20:21:24 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:21:24   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:21:24   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:21:24 SQL> 
20:21:24 SQL> --------------------------------
20:21:24 SQL> -- PREPARE BUILD (TRAINING) DATA
20:21:24 SQL> --
20:21:24 SQL> 
20:21:24 SQL> -- 1. Missing Value treatment for all Predictors and
20:21:24 SQL> -- 2. Outlier Treatment and
20:21:24 SQL> -- 3. Normalization are performed below.
20:21:24 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:21:24 SQL> --    normalized here.
20:21:24 SQL> 
20:21:24 SQL> BEGIN
20:21:24   2  	-- Perform missing value treatment for all predictors
20:21:24   3  	-- create miss tables
20:21:24   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:21:24   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:21:24   6  
20:21:24   7  	-- populate miss tables
20:21:24   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:21:24   9  	  miss_table_name => 'svmc_miss_num',
20:21:24  10  	  data_table_name => '&bldtable',
20:21:24  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:21:24  12  
20:21:24  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:21:24  14  	  miss_table_name => 'svmc_miss_cat',
20:21:24  15  	  data_table_name => '&bldtable',
20:21:24  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:21:24  17  
20:21:24  18  	-- xform input data to replace missing values
20:21:24  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:21:24  20  	  miss_table_name => 'svmc_miss_num',
20:21:24  21  	  data_table_name => '&bldtable',
20:21:24  22  	  xform_view_name => 'xformed_build_miss_num');
20:21:24  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:21:24  24  	  miss_table_name => 'svmc_miss_cat',
20:21:24  25  	  data_table_name => '&bldtable',
20:21:24  26  	  xform_view_name => 'xformed_build_miss_cat');
20:21:24  27  
20:21:24  28  	-- Perform outlier treatment.
20:21:24  29  	-- create clip table
20:21:24  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:21:24  31  
20:21:24  32  	-- populate clip table
20:21:24  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:21:24  34  	  clip_table_name => 'svmc_clip',
20:21:24  35  	  data_table_name => '&bldtable',
20:21:24  36  	  tail_frac	  => 0.025,
20:21:24  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:21:24  38  
20:21:24  39  	-- xform input data to winsorized data
20:21:24  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:21:24  41  	  clip_table_name => 'svmc_clip',
20:21:24  42  	  data_table_name => '&bldtable',
20:21:24  43  	  xform_view_name => 'svmc_winsor');
20:21:24  44  
20:21:24  45  	-- create normalization table
20:21:24  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:21:24  47  
20:21:24  48  	-- populate normalization table based on winsorized data
20:21:24  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:21:24  50  	  norm_table_name => 'svmc_norm',
20:21:24  51  	  data_table_name => 'svmc_winsor',
20:21:24  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:21:24  53  
20:21:24  54  	-- normalize the original data
20:21:24  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:21:24  56  	  norm_table_name => 'svmc_norm',
20:21:24  57  	  data_table_name => '&bldtable',
20:21:24  58  	  xform_view_name => 'svmc_build_prep');
20:21:24  59  END;
20:21:24  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.30
20:21:25 SQL> 
20:21:25 SQL> ---------------------
20:21:25 SQL> -- CREATE A NEW MODEL
20:21:25 SQL> --
20:21:25 SQL> -- Cleanup old model with the same name for repeat runs
20:21:25 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:21:25   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:21:25   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.96
20:21:26 SQL> 
20:21:26 SQL> -- Build a new SVM Model
20:21:26 SQL> BEGIN
20:21:26   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:21:26   3  	  model_name	      => '&model_name',
20:21:26   4  	  mining_function     => dbms_data_mining.classification,
20:21:26   5  	  data_table_name     => 'svmc_build_prep',
20:21:26   6  	  case_id_column_name => '&case_id',
20:21:26   7  	  target_column_name  => '&target',
20:21:26   8  	  settings_table_name => 'svmc_settings');
20:21:26   9  END;
20:21:26  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:03.20
20:21:30 SQL> 
20:21:30 SQL> -----------------------------------------------------------------------
20:21:30 SQL> --			       APPLY/score THE MODEL
20:21:30 SQL> -----------------------------------------------------------------------
20:21:30 SQL> 
20:21:30 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:21:30 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:21:30   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:21:30   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:21:30 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:21:30   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:21:30   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:21:30 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:21:30   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:21:30   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:21:30 SQL> -----------------------
20:21:30 SQL> -- PREPARE SCORING DATA
20:21:30 SQL> --
20:21:30 SQL> -- If the data for model creation has been prepared, then the data
20:21:30 SQL> -- to be scored using the model must be prepared in the same manner
20:21:30 SQL> -- in order to obtain meaningful results.
20:21:30 SQL> --
20:21:30 SQL> -- 1. Missing Value treatment for all Predictors and
20:21:30 SQL> -- 2. Normalization
20:21:30 SQL> -- No outlier treatment will be performed during test and apply. The
20:21:30 SQL> -- normalization step is sufficient, since the normalization parameters
20:21:30 SQL> -- already capture the effects of outlier treatment done with build data.
20:21:30 SQL> --
20:21:30 SQL> BEGIN
20:21:30   2  	-- Xform Test data to replace missing values
20:21:30   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:21:30   4  	  miss_table_name => 'svmc_miss_num',
20:21:30   5  	  data_table_name => '&scoretable',
20:21:30   6  	  xform_view_name => 'xformed_apply_miss_num');
20:21:30   7  
20:21:30   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:21:30   9  	  miss_table_name => 'svmc_miss_cat',
20:21:30  10  	  data_table_name => '&scoretable',
20:21:30  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:21:30  12  
20:21:30  13  	-- Normalize the data to be scored
20:21:30  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:21:30  15  	  norm_table_name => 'svmc_norm',
20:21:30  16  	  data_table_name => '&scoretable',
20:21:30  17  	  xform_view_name => 'svmc_apply_prep');
20:21:30  18  END;
20:21:30  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.18
20:21:30 SQL> 
20:21:30 SQL> -- Maybe I already collected a score for this prdate.
20:21:30 SQL> -- DELETE it if I did:
20:21:30 SQL> DELETE svm62scores
20:21:30   2  WHERE score > 0
20:21:30   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:21:30   4  -- I need to supply the target attribute name:
20:21:30   5  AND targ = '&1'
20:21:30   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gatt'

0 rows deleted.

Elapsed: 00:00:00.02
20:21:30 SQL> 
20:21:30 SQL> -- We do a drumroll here:
20:21:30 SQL> 
20:21:30 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:21:30   2  SELECT
20:21:30   3  prdate
20:21:30   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:21:30   5  ,sysdate
20:21:30   6  ,SUBSTR(prdate,1,7)pair
20:21:30   7  ,SUBSTR(prdate,-19)ydate
20:21:30   8  ,'&1'
20:21:30   9  FROM svmc_apply_prep
20:21:30  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gatt'

1 row created.

Elapsed: 00:00:00.05
20:21:30 SQL> @score1_5min_gattn.sql	2010-10-25 22:40:01 aud_usd
20:21:30 SQL> --
20:21:30 SQL> -- score1_5min_gattn.sql
20:21:30 SQL> --
20:21:30 SQL> 
20:21:30 SQL> -- Demo:
20:21:30 SQL> -- @score1_5min_gattn.sql 2010-12-31 20:45:01 aud_usd
20:21:30 SQL> 
20:21:30 SQL> CREATE OR REPLACE VIEW sme AS
20:21:30   2  SELECT
20:21:30   3  prdate
20:21:30   4  ,NULL gattn
20:21:30   5  ,g00
20:21:30   6  ,g01
20:21:30   7  ,g02
20:21:30   8  ,g03
20:21:30   9  ,g04
20:21:30  10  ,g05
20:21:30  11  ,g06
20:21:30  12  ,g07
20:21:30  13  ,g08
20:21:30  14  ,g09
20:21:30  15  ,g10
20:21:30  16  ,g11
20:21:30  17  ,g12
20:21:30  18  ,g13
20:21:30  19  ,g14
20:21:30  20  ,g15
20:21:30  21  ,g16
20:21:30  22  ,g17
20:21:30  23  ,g18
20:21:30  24  ,g19
20:21:30  25  ,g20
20:21:30  26  ,g21
20:21:30  27  ,g22
20:21:30  28  ,g23
20:21:30  29  ,g24
20:21:30  30  ,g25
20:21:30  31  ,g26
20:21:30  32  ,g27
20:21:30  33  ,g28
20:21:30  34  ,g29
20:21:30  35  ,g30
20:21:30  36  ,g31
20:21:30  37  ,g32
20:21:30  38  ,g33
20:21:30  39  ,g34
20:21:30  40  ,g35
20:21:30  41  ,g36
20:21:30  42  ,g37
20:21:30  43  ,g38
20:21:30  44  ,g39
20:21:30  45  ,g40
20:21:30  46  ,g41
20:21:30  47  FROM modsrc
20:21:30  48  WHERE ydate = '&1'||' '||'&2'
20:21:30  49  AND pair = '&3'
20:21:30  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-10-25'||' '||'22:40:01'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:21:30 SQL> 
20:21:30 SQL> -- rpt
20:21:30 SQL> -- We should see just 1 row:
20:21:30 SQL> 
20:21:30 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.02
20:21:30 SQL> 
20:21:30 SQL> -- Build the model:
20:21:30 SQL> CREATE OR REPLACE VIEW bme AS
20:21:30   2  SELECT
20:21:30   3  prdate
20:21:30   4  ,gattn
20:21:30   5  ,g00
20:21:30   6  ,g01
20:21:30   7  ,g02
20:21:30   8  ,g03
20:21:30   9  ,g04
20:21:30  10  ,g05
20:21:30  11  ,g06
20:21:30  12  ,g07
20:21:30  13  ,g08
20:21:30  14  ,g09
20:21:30  15  ,g10
20:21:30  16  ,g11
20:21:30  17  ,g12
20:21:30  18  ,g13
20:21:30  19  ,g14
20:21:30  20  ,g15
20:21:30  21  ,g16
20:21:30  22  ,g17
20:21:30  23  ,g18
20:21:30  24  ,g19
20:21:30  25  ,g20
20:21:30  26  ,g21
20:21:30  27  ,g22
20:21:30  28  ,g23
20:21:30  29  ,g24
20:21:30  30  ,g25
20:21:30  31  ,g26
20:21:30  32  ,g27
20:21:30  33  ,g28
20:21:30  34  ,g29
20:21:30  35  ,g30
20:21:30  36  ,g31
20:21:30  37  ,g32
20:21:30  38  ,g33
20:21:30  39  ,g34
20:21:30  40  ,g35
20:21:30  41  ,g36
20:21:30  42  ,g37
20:21:30  43  ,g38
20:21:30  44  ,g39
20:21:30  45  ,g40
20:21:30  46  ,g41
20:21:30  47  FROM modsrc
20:21:30  48  WHERE gattn IN('nup','up')
20:21:30  49  -- Use only rows which are older than 1 day:
20:21:30  50  AND 1+ydate < '&1'||' '||'&2'
20:21:30  51  AND pair = '&3'
20:21:30  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-10-25'||' '||'22:40:01'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:21:30 SQL> 
20:21:30 SQL> -- rpt
20:21:30 SQL> 
20:21:30 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	     2497
up	     1312

Elapsed: 00:00:00.02
20:21:30 SQL> 
20:21:30 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-10-24 22:35:01

Elapsed: 00:00:00.01
20:21:30 SQL> 
20:21:30 SQL> -- Now build model from bme and score sme
20:21:30 SQL> @score1.sql gattn
20:21:30 SQL> --
20:21:30 SQL> -- score1.sql
20:21:30 SQL> --
20:21:30 SQL> 
20:21:30 SQL> -- I use this script to send 5 params to score.sql
20:21:30 SQL> -- which does the heavy lifting of creating an SVM model.
20:21:30 SQL> -- Then at the very end of this script I use the model
20:21:30 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:21:30 SQL> 
20:21:30 SQL> -- I call this script from 2 other scripts:
20:21:30 SQL> -- score1_5min.sql
20:21:30 SQL> -- score1_5min_gattn.sql
20:21:30 SQL> 
20:21:30 SQL> -- The 1st param is the name of the target attribute.
20:21:30 SQL> -- I like to call my target attributes either gatt or gattn.
20:21:30 SQL> 
20:21:30 SQL> -- Demo:
20:21:30 SQL> -- @score1.sql 'gatt'
20:21:30 SQL> -- @score1.sql 'gattn'
20:21:30 SQL> 
20:21:30 SQL> -- Now, I fill up svmc_apply_prep.
20:21:30 SQL> -- I use same model_name used in score.sql
20:21:30 SQL> DEFINE model_name = 'svmfx101'
20:21:30 SQL> DEFINE bldtable	= 'bme'
20:21:30 SQL> DEFINE scoretable = 'sme'
20:21:30 SQL> DEFINE case_id	= 'prdate'
20:21:30 SQL> -- Demo:
20:21:30 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:21:30 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:21:30 SQL> --
20:21:30 SQL> -- score.sql
20:21:30 SQL> --
20:21:30 SQL> 
20:21:30 SQL> -- usage: score.sql
20:21:30 SQL> 
20:21:30 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:21:30 SQL> 
20:21:30 SQL> -- DEFINE target	   = 'gatt'
20:21:30 SQL> -- DEFINE model_name = 'svmfx101'
20:21:30 SQL> -- DEFINE bldtable   = 'bme'
20:21:30 SQL> -- DEFINE scoretable = 'sme'
20:21:30 SQL> -- DEFINE case_id    = 'prdate'
20:21:30 SQL> 
20:21:30 SQL> DEFINE target	= '&1'
20:21:30 SQL> DEFINE model_name = '&2'
20:21:30 SQL> DEFINE bldtable	= '&3'
20:21:30 SQL> DEFINE scoretable = '&4'
20:21:30 SQL> DEFINE case_id	= '&5'
20:21:30 SQL> 
20:21:30 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:21:30 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:21:30 SQL> 
20:21:30 SQL> -- Builds an SVM model using pl/sql.
20:21:30 SQL> 
20:21:30 SQL> -----------------------------------------------------------------------
20:21:30 SQL> --			    BUILD THE MODEL
20:21:30 SQL> -----------------------------------------------------------------------
20:21:30 SQL> 
20:21:30 SQL> -- Cleanup old build data preparation objects for repeat runs
20:21:30 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.00
20:21:30 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.01
20:21:30 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:21:30 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.00
20:21:30 SQL> 
20:21:30 SQL> 
20:21:30 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:21:30 SQL> --
20:21:30 SQL> -- DROP	TABLE svmc_settings ;
20:21:30 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:21:30 SQL> -- DELETE svmc_settings;
20:21:30 SQL> 
20:21:30 SQL> -- The default classification algorithm is Naive Bayes. So override
20:21:30 SQL> -- this choice to SVM using a settings table.
20:21:30 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:21:30 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:21:30 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:21:30 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:21:30 SQL> -- models.
20:21:30 SQL> --
20:21:30 SQL> 
20:21:30 SQL> -- Do this once and then comment it out.
20:21:30 SQL> -- That makes script go faster.
20:21:30 SQL> -- BEGIN
20:21:30 SQL> -- -- Populate settings table
20:21:30 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:21:30 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:21:30 SQL> --
20:21:30 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:21:30 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:21:30 SQL> --
20:21:30 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:21:30 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:21:30 SQL> --   COMMIT;
20:21:30 SQL> -- END;
20:21:30 SQL> -- /
20:21:30 SQL> 
20:21:30 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:21:30 SQL> 
20:21:30 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:21:30   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:21:30   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:21:30 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:21:30   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:21:30   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:21:30 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:21:30   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:21:30   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:21:30 SQL> 
20:21:30 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:21:30   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:21:30   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:21:30 SQL> 
20:21:30 SQL> --------------------------------
20:21:30 SQL> -- PREPARE BUILD (TRAINING) DATA
20:21:30 SQL> --
20:21:30 SQL> 
20:21:30 SQL> -- 1. Missing Value treatment for all Predictors and
20:21:30 SQL> -- 2. Outlier Treatment and
20:21:30 SQL> -- 3. Normalization are performed below.
20:21:30 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:21:30 SQL> --    normalized here.
20:21:30 SQL> 
20:21:30 SQL> BEGIN
20:21:30   2  	-- Perform missing value treatment for all predictors
20:21:30   3  	-- create miss tables
20:21:30   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:21:30   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:21:30   6  
20:21:30   7  	-- populate miss tables
20:21:30   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:21:30   9  	  miss_table_name => 'svmc_miss_num',
20:21:30  10  	  data_table_name => '&bldtable',
20:21:30  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:21:30  12  
20:21:30  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:21:30  14  	  miss_table_name => 'svmc_miss_cat',
20:21:30  15  	  data_table_name => '&bldtable',
20:21:30  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:21:30  17  
20:21:30  18  	-- xform input data to replace missing values
20:21:30  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:21:30  20  	  miss_table_name => 'svmc_miss_num',
20:21:30  21  	  data_table_name => '&bldtable',
20:21:30  22  	  xform_view_name => 'xformed_build_miss_num');
20:21:30  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:21:30  24  	  miss_table_name => 'svmc_miss_cat',
20:21:30  25  	  data_table_name => '&bldtable',
20:21:30  26  	  xform_view_name => 'xformed_build_miss_cat');
20:21:30  27  
20:21:30  28  	-- Perform outlier treatment.
20:21:30  29  	-- create clip table
20:21:30  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:21:30  31  
20:21:30  32  	-- populate clip table
20:21:30  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:21:30  34  	  clip_table_name => 'svmc_clip',
20:21:30  35  	  data_table_name => '&bldtable',
20:21:30  36  	  tail_frac	  => 0.025,
20:21:30  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:21:30  38  
20:21:30  39  	-- xform input data to winsorized data
20:21:30  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:21:30  41  	  clip_table_name => 'svmc_clip',
20:21:30  42  	  data_table_name => '&bldtable',
20:21:30  43  	  xform_view_name => 'svmc_winsor');
20:21:30  44  
20:21:30  45  	-- create normalization table
20:21:30  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:21:30  47  
20:21:30  48  	-- populate normalization table based on winsorized data
20:21:30  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:21:30  50  	  norm_table_name => 'svmc_norm',
20:21:30  51  	  data_table_name => 'svmc_winsor',
20:21:30  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:21:30  53  
20:21:30  54  	-- normalize the original data
20:21:30  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:21:30  56  	  norm_table_name => 'svmc_norm',
20:21:30  57  	  data_table_name => '&bldtable',
20:21:30  58  	  xform_view_name => 'svmc_build_prep');
20:21:30  59  END;
20:21:30  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.21
20:21:31 SQL> 
20:21:31 SQL> ---------------------
20:21:31 SQL> -- CREATE A NEW MODEL
20:21:31 SQL> --
20:21:31 SQL> -- Cleanup old model with the same name for repeat runs
20:21:31 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:21:31   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:21:31   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.02
20:21:32 SQL> 
20:21:32 SQL> -- Build a new SVM Model
20:21:32 SQL> BEGIN
20:21:32   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:21:32   3  	  model_name	      => '&model_name',
20:21:32   4  	  mining_function     => dbms_data_mining.classification,
20:21:32   5  	  data_table_name     => 'svmc_build_prep',
20:21:32   6  	  case_id_column_name => '&case_id',
20:21:32   7  	  target_column_name  => '&target',
20:21:32   8  	  settings_table_name => 'svmc_settings');
20:21:32   9  END;
20:21:32  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:02.67
20:21:35 SQL> 
20:21:35 SQL> -----------------------------------------------------------------------
20:21:35 SQL> --			       APPLY/score THE MODEL
20:21:35 SQL> -----------------------------------------------------------------------
20:21:35 SQL> 
20:21:35 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:21:35 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:21:35   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:21:35   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:21:35 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:21:35   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:21:35   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:21:35 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:21:35   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:21:35   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:21:35 SQL> -----------------------
20:21:35 SQL> -- PREPARE SCORING DATA
20:21:35 SQL> --
20:21:35 SQL> -- If the data for model creation has been prepared, then the data
20:21:35 SQL> -- to be scored using the model must be prepared in the same manner
20:21:35 SQL> -- in order to obtain meaningful results.
20:21:35 SQL> --
20:21:35 SQL> -- 1. Missing Value treatment for all Predictors and
20:21:35 SQL> -- 2. Normalization
20:21:35 SQL> -- No outlier treatment will be performed during test and apply. The
20:21:35 SQL> -- normalization step is sufficient, since the normalization parameters
20:21:35 SQL> -- already capture the effects of outlier treatment done with build data.
20:21:35 SQL> --
20:21:35 SQL> BEGIN
20:21:35   2  	-- Xform Test data to replace missing values
20:21:35   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:21:35   4  	  miss_table_name => 'svmc_miss_num',
20:21:35   5  	  data_table_name => '&scoretable',
20:21:35   6  	  xform_view_name => 'xformed_apply_miss_num');
20:21:35   7  
20:21:35   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:21:35   9  	  miss_table_name => 'svmc_miss_cat',
20:21:35  10  	  data_table_name => '&scoretable',
20:21:35  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:21:35  12  
20:21:35  13  	-- Normalize the data to be scored
20:21:35  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:21:35  15  	  norm_table_name => 'svmc_norm',
20:21:35  16  	  data_table_name => '&scoretable',
20:21:35  17  	  xform_view_name => 'svmc_apply_prep');
20:21:35  18  END;
20:21:35  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.18
20:21:35 SQL> 
20:21:35 SQL> -- Maybe I already collected a score for this prdate.
20:21:35 SQL> -- DELETE it if I did:
20:21:35 SQL> DELETE svm62scores
20:21:35   2  WHERE score > 0
20:21:35   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:21:35   4  -- I need to supply the target attribute name:
20:21:35   5  AND targ = '&1'
20:21:35   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gattn'

0 rows deleted.

Elapsed: 00:00:00.01
20:21:35 SQL> 
20:21:35 SQL> -- We do a drumroll here:
20:21:35 SQL> 
20:21:35 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:21:35   2  SELECT
20:21:35   3  prdate
20:21:35   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:21:35   5  ,sysdate
20:21:35   6  ,SUBSTR(prdate,1,7)pair
20:21:35   7  ,SUBSTR(prdate,-19)ydate
20:21:35   8  ,'&1'
20:21:35   9  FROM svmc_apply_prep
20:21:35  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gattn'

1 row created.

Elapsed: 00:00:00.04
20:21:35 SQL> @score1_5min.sql	      2010-10-11 16:45:01 aud_usd
20:21:35 SQL> --
20:21:35 SQL> -- score1_5min.sql
20:21:35 SQL> --
20:21:35 SQL> 
20:21:35 SQL> -- Demo:
20:21:35 SQL> -- @score1_5min.sql 2010-12-31 20:45:01 aud_usd
20:21:35 SQL> 
20:21:35 SQL> CREATE OR REPLACE VIEW sme AS
20:21:35   2  SELECT
20:21:35   3  prdate
20:21:35   4  ,NULL gatt
20:21:35   5  ,g00
20:21:35   6  ,g01
20:21:35   7  ,g02
20:21:35   8  ,g03
20:21:35   9  ,g04
20:21:35  10  ,g05
20:21:35  11  ,g06
20:21:35  12  ,g07
20:21:35  13  ,g08
20:21:35  14  ,g09
20:21:35  15  ,g10
20:21:35  16  ,g11
20:21:35  17  ,g12
20:21:35  18  ,g13
20:21:35  19  ,g14
20:21:35  20  ,g15
20:21:35  21  ,g16
20:21:35  22  ,g17
20:21:35  23  ,g18
20:21:35  24  ,g19
20:21:35  25  ,g20
20:21:35  26  ,g21
20:21:35  27  ,g22
20:21:35  28  ,g23
20:21:35  29  ,g24
20:21:35  30  ,g25
20:21:35  31  ,g26
20:21:35  32  ,g27
20:21:35  33  ,g28
20:21:35  34  ,g29
20:21:35  35  ,g30
20:21:35  36  ,g31
20:21:35  37  ,g32
20:21:35  38  ,g33
20:21:35  39  ,g34
20:21:35  40  ,g35
20:21:35  41  ,g36
20:21:35  42  ,g37
20:21:35  43  ,g38
20:21:35  44  ,g39
20:21:35  45  ,g40
20:21:35  46  ,g41
20:21:35  47  FROM modsrc
20:21:35  48  WHERE ydate = '&1'||' '||'&2'
20:21:35  49  AND pair = '&3'
20:21:35  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-10-11'||' '||'16:45:01'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.05
20:21:36 SQL> 
20:21:36 SQL> -- rpt
20:21:36 SQL> -- We should see just 1 row:
20:21:36 SQL> 
20:21:36 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.01
20:21:36 SQL> 
20:21:36 SQL> -- Build the model:
20:21:36 SQL> CREATE OR REPLACE VIEW bme AS
20:21:36   2  SELECT
20:21:36   3  prdate
20:21:36   4  ,gatt
20:21:36   5  ,g00
20:21:36   6  ,g01
20:21:36   7  ,g02
20:21:36   8  ,g03
20:21:36   9  ,g04
20:21:36  10  ,g05
20:21:36  11  ,g06
20:21:36  12  ,g07
20:21:36  13  ,g08
20:21:36  14  ,g09
20:21:36  15  ,g10
20:21:36  16  ,g11
20:21:36  17  ,g12
20:21:36  18  ,g13
20:21:36  19  ,g14
20:21:36  20  ,g15
20:21:36  21  ,g16
20:21:36  22  ,g17
20:21:36  23  ,g18
20:21:36  24  ,g19
20:21:36  25  ,g20
20:21:36  26  ,g21
20:21:36  27  ,g22
20:21:36  28  ,g23
20:21:36  29  ,g24
20:21:36  30  ,g25
20:21:36  31  ,g26
20:21:36  32  ,g27
20:21:36  33  ,g28
20:21:36  34  ,g29
20:21:36  35  ,g30
20:21:36  36  ,g31
20:21:36  37  ,g32
20:21:36  38  ,g33
20:21:36  39  ,g34
20:21:36  40  ,g35
20:21:36  41  ,g36
20:21:36  42  ,g37
20:21:36  43  ,g38
20:21:36  44  ,g39
20:21:36  45  ,g40
20:21:36  46  ,g41
20:21:36  47  FROM modsrc
20:21:36  48  WHERE gatt IN('nup','up')
20:21:36  49  -- Use only rows which are older than 1 day:
20:21:36  50  AND 1+ydate < '&1'||' '||'&2'
20:21:36  51  AND pair = '&3'
20:21:36  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-10-11'||' '||'16:45:01'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:21:36 SQL> 
20:21:36 SQL> -- rpt
20:21:36 SQL> 
20:21:36 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt;

GAT COUNT(PRDATE)
--- -------------
nup	      410
up	      474

Elapsed: 00:00:00.02
20:21:36 SQL> 
20:21:36 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-10-08 21:50:01

Elapsed: 00:00:00.01
20:21:36 SQL> 
20:21:36 SQL> -- Now build model from bme and score sme
20:21:36 SQL> @score1.sql gatt
20:21:36 SQL> --
20:21:36 SQL> -- score1.sql
20:21:36 SQL> --
20:21:36 SQL> 
20:21:36 SQL> -- I use this script to send 5 params to score.sql
20:21:36 SQL> -- which does the heavy lifting of creating an SVM model.
20:21:36 SQL> -- Then at the very end of this script I use the model
20:21:36 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:21:36 SQL> 
20:21:36 SQL> -- I call this script from 2 other scripts:
20:21:36 SQL> -- score1_5min.sql
20:21:36 SQL> -- score1_5min_gattn.sql
20:21:36 SQL> 
20:21:36 SQL> -- The 1st param is the name of the target attribute.
20:21:36 SQL> -- I like to call my target attributes either gatt or gattn.
20:21:36 SQL> 
20:21:36 SQL> -- Demo:
20:21:36 SQL> -- @score1.sql 'gatt'
20:21:36 SQL> -- @score1.sql 'gattn'
20:21:36 SQL> 
20:21:36 SQL> -- Now, I fill up svmc_apply_prep.
20:21:36 SQL> -- I use same model_name used in score.sql
20:21:36 SQL> DEFINE model_name = 'svmfx101'
20:21:36 SQL> DEFINE bldtable	= 'bme'
20:21:36 SQL> DEFINE scoretable = 'sme'
20:21:36 SQL> DEFINE case_id	= 'prdate'
20:21:36 SQL> -- Demo:
20:21:36 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:21:36 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:21:36 SQL> --
20:21:36 SQL> -- score.sql
20:21:36 SQL> --
20:21:36 SQL> 
20:21:36 SQL> -- usage: score.sql
20:21:36 SQL> 
20:21:36 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:21:36 SQL> 
20:21:36 SQL> -- DEFINE target	   = 'gatt'
20:21:36 SQL> -- DEFINE model_name = 'svmfx101'
20:21:36 SQL> -- DEFINE bldtable   = 'bme'
20:21:36 SQL> -- DEFINE scoretable = 'sme'
20:21:36 SQL> -- DEFINE case_id    = 'prdate'
20:21:36 SQL> 
20:21:36 SQL> DEFINE target	= '&1'
20:21:36 SQL> DEFINE model_name = '&2'
20:21:36 SQL> DEFINE bldtable	= '&3'
20:21:36 SQL> DEFINE scoretable = '&4'
20:21:36 SQL> DEFINE case_id	= '&5'
20:21:36 SQL> 
20:21:36 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:21:36 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:21:36 SQL> 
20:21:36 SQL> -- Builds an SVM model using pl/sql.
20:21:36 SQL> 
20:21:36 SQL> -----------------------------------------------------------------------
20:21:36 SQL> --			    BUILD THE MODEL
20:21:36 SQL> -----------------------------------------------------------------------
20:21:36 SQL> 
20:21:36 SQL> -- Cleanup old build data preparation objects for repeat runs
20:21:36 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.00
20:21:36 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.01
20:21:36 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:21:36 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.00
20:21:36 SQL> 
20:21:36 SQL> 
20:21:36 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:21:36 SQL> --
20:21:36 SQL> -- DROP	TABLE svmc_settings ;
20:21:36 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:21:36 SQL> -- DELETE svmc_settings;
20:21:36 SQL> 
20:21:36 SQL> -- The default classification algorithm is Naive Bayes. So override
20:21:36 SQL> -- this choice to SVM using a settings table.
20:21:36 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:21:36 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:21:36 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:21:36 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:21:36 SQL> -- models.
20:21:36 SQL> --
20:21:36 SQL> 
20:21:36 SQL> -- Do this once and then comment it out.
20:21:36 SQL> -- That makes script go faster.
20:21:36 SQL> -- BEGIN
20:21:36 SQL> -- -- Populate settings table
20:21:36 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:21:36 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:21:36 SQL> --
20:21:36 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:21:36 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:21:36 SQL> --
20:21:36 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:21:36 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:21:36 SQL> --   COMMIT;
20:21:36 SQL> -- END;
20:21:36 SQL> -- /
20:21:36 SQL> 
20:21:36 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:21:36 SQL> 
20:21:36 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:21:36   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:21:36   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:21:36 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:21:36   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:21:36   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:21:36 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:21:36   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:21:36   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:21:36 SQL> 
20:21:36 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:21:36   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:21:36   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:21:36 SQL> 
20:21:36 SQL> --------------------------------
20:21:36 SQL> -- PREPARE BUILD (TRAINING) DATA
20:21:36 SQL> --
20:21:36 SQL> 
20:21:36 SQL> -- 1. Missing Value treatment for all Predictors and
20:21:36 SQL> -- 2. Outlier Treatment and
20:21:36 SQL> -- 3. Normalization are performed below.
20:21:36 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:21:36 SQL> --    normalized here.
20:21:36 SQL> 
20:21:36 SQL> BEGIN
20:21:36   2  	-- Perform missing value treatment for all predictors
20:21:36   3  	-- create miss tables
20:21:36   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:21:36   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:21:36   6  
20:21:36   7  	-- populate miss tables
20:21:36   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:21:36   9  	  miss_table_name => 'svmc_miss_num',
20:21:36  10  	  data_table_name => '&bldtable',
20:21:36  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:21:36  12  
20:21:36  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:21:36  14  	  miss_table_name => 'svmc_miss_cat',
20:21:36  15  	  data_table_name => '&bldtable',
20:21:36  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:21:36  17  
20:21:36  18  	-- xform input data to replace missing values
20:21:36  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:21:36  20  	  miss_table_name => 'svmc_miss_num',
20:21:36  21  	  data_table_name => '&bldtable',
20:21:36  22  	  xform_view_name => 'xformed_build_miss_num');
20:21:36  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:21:36  24  	  miss_table_name => 'svmc_miss_cat',
20:21:36  25  	  data_table_name => '&bldtable',
20:21:36  26  	  xform_view_name => 'xformed_build_miss_cat');
20:21:36  27  
20:21:36  28  	-- Perform outlier treatment.
20:21:36  29  	-- create clip table
20:21:36  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:21:36  31  
20:21:36  32  	-- populate clip table
20:21:36  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:21:36  34  	  clip_table_name => 'svmc_clip',
20:21:36  35  	  data_table_name => '&bldtable',
20:21:36  36  	  tail_frac	  => 0.025,
20:21:36  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:21:36  38  
20:21:36  39  	-- xform input data to winsorized data
20:21:36  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:21:36  41  	  clip_table_name => 'svmc_clip',
20:21:36  42  	  data_table_name => '&bldtable',
20:21:36  43  	  xform_view_name => 'svmc_winsor');
20:21:36  44  
20:21:36  45  	-- create normalization table
20:21:36  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:21:36  47  
20:21:36  48  	-- populate normalization table based on winsorized data
20:21:36  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:21:36  50  	  norm_table_name => 'svmc_norm',
20:21:36  51  	  data_table_name => 'svmc_winsor',
20:21:36  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:21:36  53  
20:21:36  54  	-- normalize the original data
20:21:36  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:21:36  56  	  norm_table_name => 'svmc_norm',
20:21:36  57  	  data_table_name => '&bldtable',
20:21:36  58  	  xform_view_name => 'svmc_build_prep');
20:21:36  59  END;
20:21:36  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.96
20:21:37 SQL> 
20:21:37 SQL> ---------------------
20:21:37 SQL> -- CREATE A NEW MODEL
20:21:37 SQL> --
20:21:37 SQL> -- Cleanup old model with the same name for repeat runs
20:21:37 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:21:37   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:21:37   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.37
20:21:38 SQL> 
20:21:38 SQL> -- Build a new SVM Model
20:21:38 SQL> BEGIN
20:21:38   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:21:38   3  	  model_name	      => '&model_name',
20:21:38   4  	  mining_function     => dbms_data_mining.classification,
20:21:38   5  	  data_table_name     => 'svmc_build_prep',
20:21:38   6  	  case_id_column_name => '&case_id',
20:21:38   7  	  target_column_name  => '&target',
20:21:38   8  	  settings_table_name => 'svmc_settings');
20:21:38   9  END;
20:21:38  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:02.82
20:21:41 SQL> 
20:21:41 SQL> -----------------------------------------------------------------------
20:21:41 SQL> --			       APPLY/score THE MODEL
20:21:41 SQL> -----------------------------------------------------------------------
20:21:41 SQL> 
20:21:41 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:21:41 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:21:41   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:21:41   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.34
20:21:41 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:21:41   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:21:41   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.32
20:21:42 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:21:42   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:21:42   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.35
20:21:42 SQL> -----------------------
20:21:42 SQL> -- PREPARE SCORING DATA
20:21:42 SQL> --
20:21:42 SQL> -- If the data for model creation has been prepared, then the data
20:21:42 SQL> -- to be scored using the model must be prepared in the same manner
20:21:42 SQL> -- in order to obtain meaningful results.
20:21:42 SQL> --
20:21:42 SQL> -- 1. Missing Value treatment for all Predictors and
20:21:42 SQL> -- 2. Normalization
20:21:42 SQL> -- No outlier treatment will be performed during test and apply. The
20:21:42 SQL> -- normalization step is sufficient, since the normalization parameters
20:21:42 SQL> -- already capture the effects of outlier treatment done with build data.
20:21:42 SQL> --
20:21:42 SQL> BEGIN
20:21:42   2  	-- Xform Test data to replace missing values
20:21:42   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:21:42   4  	  miss_table_name => 'svmc_miss_num',
20:21:42   5  	  data_table_name => '&scoretable',
20:21:42   6  	  xform_view_name => 'xformed_apply_miss_num');
20:21:42   7  
20:21:42   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:21:42   9  	  miss_table_name => 'svmc_miss_cat',
20:21:42  10  	  data_table_name => '&scoretable',
20:21:42  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:21:42  12  
20:21:42  13  	-- Normalize the data to be scored
20:21:42  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:21:42  15  	  norm_table_name => 'svmc_norm',
20:21:42  16  	  data_table_name => '&scoretable',
20:21:42  17  	  xform_view_name => 'svmc_apply_prep');
20:21:42  18  END;
20:21:42  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.18
20:21:42 SQL> 
20:21:42 SQL> -- Maybe I already collected a score for this prdate.
20:21:42 SQL> -- DELETE it if I did:
20:21:42 SQL> DELETE svm62scores
20:21:42   2  WHERE score > 0
20:21:42   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:21:42   4  -- I need to supply the target attribute name:
20:21:42   5  AND targ = '&1'
20:21:42   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gatt'

0 rows deleted.

Elapsed: 00:00:00.01
20:21:42 SQL> 
20:21:42 SQL> -- We do a drumroll here:
20:21:42 SQL> 
20:21:42 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:21:42   2  SELECT
20:21:42   3  prdate
20:21:42   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:21:42   5  ,sysdate
20:21:42   6  ,SUBSTR(prdate,1,7)pair
20:21:42   7  ,SUBSTR(prdate,-19)ydate
20:21:42   8  ,'&1'
20:21:42   9  FROM svmc_apply_prep
20:21:42  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gatt'

1 row created.

Elapsed: 00:00:00.05
20:21:42 SQL> @score1_5min.sql	      2010-10-18 07:40:01 aud_usd
20:21:42 SQL> --
20:21:42 SQL> -- score1_5min.sql
20:21:42 SQL> --
20:21:42 SQL> 
20:21:42 SQL> -- Demo:
20:21:42 SQL> -- @score1_5min.sql 2010-12-31 20:45:01 aud_usd
20:21:42 SQL> 
20:21:42 SQL> CREATE OR REPLACE VIEW sme AS
20:21:42   2  SELECT
20:21:42   3  prdate
20:21:42   4  ,NULL gatt
20:21:42   5  ,g00
20:21:42   6  ,g01
20:21:42   7  ,g02
20:21:42   8  ,g03
20:21:42   9  ,g04
20:21:42  10  ,g05
20:21:42  11  ,g06
20:21:42  12  ,g07
20:21:42  13  ,g08
20:21:42  14  ,g09
20:21:42  15  ,g10
20:21:42  16  ,g11
20:21:42  17  ,g12
20:21:42  18  ,g13
20:21:42  19  ,g14
20:21:42  20  ,g15
20:21:42  21  ,g16
20:21:42  22  ,g17
20:21:42  23  ,g18
20:21:42  24  ,g19
20:21:42  25  ,g20
20:21:42  26  ,g21
20:21:42  27  ,g22
20:21:42  28  ,g23
20:21:42  29  ,g24
20:21:42  30  ,g25
20:21:42  31  ,g26
20:21:42  32  ,g27
20:21:42  33  ,g28
20:21:42  34  ,g29
20:21:42  35  ,g30
20:21:42  36  ,g31
20:21:42  37  ,g32
20:21:42  38  ,g33
20:21:42  39  ,g34
20:21:42  40  ,g35
20:21:42  41  ,g36
20:21:42  42  ,g37
20:21:42  43  ,g38
20:21:42  44  ,g39
20:21:42  45  ,g40
20:21:42  46  ,g41
20:21:42  47  FROM modsrc
20:21:42  48  WHERE ydate = '&1'||' '||'&2'
20:21:42  49  AND pair = '&3'
20:21:42  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-10-18'||' '||'07:40:01'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.11
20:21:42 SQL> 
20:21:42 SQL> -- rpt
20:21:42 SQL> -- We should see just 1 row:
20:21:42 SQL> 
20:21:42 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.02
20:21:42 SQL> 
20:21:42 SQL> -- Build the model:
20:21:42 SQL> CREATE OR REPLACE VIEW bme AS
20:21:42   2  SELECT
20:21:42   3  prdate
20:21:42   4  ,gatt
20:21:42   5  ,g00
20:21:42   6  ,g01
20:21:42   7  ,g02
20:21:42   8  ,g03
20:21:42   9  ,g04
20:21:42  10  ,g05
20:21:42  11  ,g06
20:21:42  12  ,g07
20:21:42  13  ,g08
20:21:42  14  ,g09
20:21:42  15  ,g10
20:21:42  16  ,g11
20:21:42  17  ,g12
20:21:42  18  ,g13
20:21:42  19  ,g14
20:21:42  20  ,g15
20:21:42  21  ,g16
20:21:42  22  ,g17
20:21:42  23  ,g18
20:21:42  24  ,g19
20:21:42  25  ,g20
20:21:42  26  ,g21
20:21:42  27  ,g22
20:21:42  28  ,g23
20:21:42  29  ,g24
20:21:42  30  ,g25
20:21:42  31  ,g26
20:21:42  32  ,g27
20:21:42  33  ,g28
20:21:42  34  ,g29
20:21:42  35  ,g30
20:21:42  36  ,g31
20:21:42  37  ,g32
20:21:42  38  ,g33
20:21:42  39  ,g34
20:21:42  40  ,g35
20:21:42  41  ,g36
20:21:42  42  ,g37
20:21:42  43  ,g38
20:21:42  44  ,g39
20:21:42  45  ,g40
20:21:42  46  ,g41
20:21:42  47  FROM modsrc
20:21:42  48  WHERE gatt IN('nup','up')
20:21:42  49  -- Use only rows which are older than 1 day:
20:21:42  50  AND 1+ydate < '&1'||' '||'&2'
20:21:42  51  AND pair = '&3'
20:21:42  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-10-18'||' '||'07:40:01'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.10
20:21:42 SQL> 
20:21:42 SQL> -- rpt
20:21:42 SQL> 
20:21:42 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt;

GAT COUNT(PRDATE)
--- -------------
nup	     1334
up	     1002

Elapsed: 00:00:00.03
20:21:42 SQL> 
20:21:42 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-10-15 21:50:01

Elapsed: 00:00:00.01
20:21:42 SQL> 
20:21:42 SQL> -- Now build model from bme and score sme
20:21:42 SQL> @score1.sql gatt
20:21:42 SQL> --
20:21:42 SQL> -- score1.sql
20:21:42 SQL> --
20:21:42 SQL> 
20:21:42 SQL> -- I use this script to send 5 params to score.sql
20:21:42 SQL> -- which does the heavy lifting of creating an SVM model.
20:21:42 SQL> -- Then at the very end of this script I use the model
20:21:42 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:21:42 SQL> 
20:21:42 SQL> -- I call this script from 2 other scripts:
20:21:42 SQL> -- score1_5min.sql
20:21:42 SQL> -- score1_5min_gattn.sql
20:21:42 SQL> 
20:21:42 SQL> -- The 1st param is the name of the target attribute.
20:21:42 SQL> -- I like to call my target attributes either gatt or gattn.
20:21:42 SQL> 
20:21:42 SQL> -- Demo:
20:21:42 SQL> -- @score1.sql 'gatt'
20:21:42 SQL> -- @score1.sql 'gattn'
20:21:42 SQL> 
20:21:42 SQL> -- Now, I fill up svmc_apply_prep.
20:21:42 SQL> -- I use same model_name used in score.sql
20:21:42 SQL> DEFINE model_name = 'svmfx101'
20:21:42 SQL> DEFINE bldtable	= 'bme'
20:21:42 SQL> DEFINE scoretable = 'sme'
20:21:42 SQL> DEFINE case_id	= 'prdate'
20:21:42 SQL> -- Demo:
20:21:42 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:21:42 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:21:42 SQL> --
20:21:42 SQL> -- score.sql
20:21:42 SQL> --
20:21:42 SQL> 
20:21:42 SQL> -- usage: score.sql
20:21:42 SQL> 
20:21:42 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:21:42 SQL> 
20:21:42 SQL> -- DEFINE target	   = 'gatt'
20:21:42 SQL> -- DEFINE model_name = 'svmfx101'
20:21:42 SQL> -- DEFINE bldtable   = 'bme'
20:21:42 SQL> -- DEFINE scoretable = 'sme'
20:21:42 SQL> -- DEFINE case_id    = 'prdate'
20:21:42 SQL> 
20:21:42 SQL> DEFINE target	= '&1'
20:21:42 SQL> DEFINE model_name = '&2'
20:21:42 SQL> DEFINE bldtable	= '&3'
20:21:42 SQL> DEFINE scoretable = '&4'
20:21:42 SQL> DEFINE case_id	= '&5'
20:21:42 SQL> 
20:21:42 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:21:42 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:21:42 SQL> 
20:21:42 SQL> -- Builds an SVM model using pl/sql.
20:21:42 SQL> 
20:21:42 SQL> -----------------------------------------------------------------------
20:21:42 SQL> --			    BUILD THE MODEL
20:21:42 SQL> -----------------------------------------------------------------------
20:21:42 SQL> 
20:21:42 SQL> -- Cleanup old build data preparation objects for repeat runs
20:21:42 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.01
20:21:42 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:21:42 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:21:42 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.00
20:21:42 SQL> 
20:21:42 SQL> 
20:21:42 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:21:42 SQL> --
20:21:42 SQL> -- DROP	TABLE svmc_settings ;
20:21:42 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:21:42 SQL> -- DELETE svmc_settings;
20:21:42 SQL> 
20:21:42 SQL> -- The default classification algorithm is Naive Bayes. So override
20:21:42 SQL> -- this choice to SVM using a settings table.
20:21:42 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:21:42 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:21:42 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:21:42 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:21:42 SQL> -- models.
20:21:42 SQL> --
20:21:42 SQL> 
20:21:42 SQL> -- Do this once and then comment it out.
20:21:42 SQL> -- That makes script go faster.
20:21:42 SQL> -- BEGIN
20:21:42 SQL> -- -- Populate settings table
20:21:42 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:21:42 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:21:42 SQL> --
20:21:42 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:21:42 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:21:42 SQL> --
20:21:42 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:21:42 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:21:42 SQL> --   COMMIT;
20:21:42 SQL> -- END;
20:21:42 SQL> -- /
20:21:42 SQL> 
20:21:42 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:21:42 SQL> 
20:21:42 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:21:42   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:21:42   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.12
20:21:43 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:21:43   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:21:43   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
20:21:43 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:21:43   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:21:43   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.07
20:21:43 SQL> 
20:21:43 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:21:43   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:21:43   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
20:21:43 SQL> 
20:21:43 SQL> --------------------------------
20:21:43 SQL> -- PREPARE BUILD (TRAINING) DATA
20:21:43 SQL> --
20:21:43 SQL> 
20:21:43 SQL> -- 1. Missing Value treatment for all Predictors and
20:21:43 SQL> -- 2. Outlier Treatment and
20:21:43 SQL> -- 3. Normalization are performed below.
20:21:43 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:21:43 SQL> --    normalized here.
20:21:43 SQL> 
20:21:43 SQL> BEGIN
20:21:43   2  	-- Perform missing value treatment for all predictors
20:21:43   3  	-- create miss tables
20:21:43   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:21:43   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:21:43   6  
20:21:43   7  	-- populate miss tables
20:21:43   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:21:43   9  	  miss_table_name => 'svmc_miss_num',
20:21:43  10  	  data_table_name => '&bldtable',
20:21:43  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:21:43  12  
20:21:43  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:21:43  14  	  miss_table_name => 'svmc_miss_cat',
20:21:43  15  	  data_table_name => '&bldtable',
20:21:43  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:21:43  17  
20:21:43  18  	-- xform input data to replace missing values
20:21:43  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:21:43  20  	  miss_table_name => 'svmc_miss_num',
20:21:43  21  	  data_table_name => '&bldtable',
20:21:43  22  	  xform_view_name => 'xformed_build_miss_num');
20:21:43  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:21:43  24  	  miss_table_name => 'svmc_miss_cat',
20:21:43  25  	  data_table_name => '&bldtable',
20:21:43  26  	  xform_view_name => 'xformed_build_miss_cat');
20:21:43  27  
20:21:43  28  	-- Perform outlier treatment.
20:21:43  29  	-- create clip table
20:21:43  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:21:43  31  
20:21:43  32  	-- populate clip table
20:21:43  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:21:43  34  	  clip_table_name => 'svmc_clip',
20:21:43  35  	  data_table_name => '&bldtable',
20:21:43  36  	  tail_frac	  => 0.025,
20:21:43  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:21:43  38  
20:21:43  39  	-- xform input data to winsorized data
20:21:43  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:21:43  41  	  clip_table_name => 'svmc_clip',
20:21:43  42  	  data_table_name => '&bldtable',
20:21:43  43  	  xform_view_name => 'svmc_winsor');
20:21:43  44  
20:21:43  45  	-- create normalization table
20:21:43  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:21:43  47  
20:21:43  48  	-- populate normalization table based on winsorized data
20:21:43  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:21:43  50  	  norm_table_name => 'svmc_norm',
20:21:43  51  	  data_table_name => 'svmc_winsor',
20:21:43  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:21:43  53  
20:21:43  54  	-- normalize the original data
20:21:43  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:21:43  56  	  norm_table_name => 'svmc_norm',
20:21:43  57  	  data_table_name => '&bldtable',
20:21:43  58  	  xform_view_name => 'svmc_build_prep');
20:21:43  59  END;
20:21:43  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.19
20:21:44 SQL> 
20:21:44 SQL> ---------------------
20:21:44 SQL> -- CREATE A NEW MODEL
20:21:44 SQL> --
20:21:44 SQL> -- Cleanup old model with the same name for repeat runs
20:21:44 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:21:44   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:21:44   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:02.51
20:21:46 SQL> 
20:21:46 SQL> -- Build a new SVM Model
20:21:46 SQL> BEGIN
20:21:46   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:21:46   3  	  model_name	      => '&model_name',
20:21:46   4  	  mining_function     => dbms_data_mining.classification,
20:21:46   5  	  data_table_name     => 'svmc_build_prep',
20:21:46   6  	  case_id_column_name => '&case_id',
20:21:46   7  	  target_column_name  => '&target',
20:21:46   8  	  settings_table_name => 'svmc_settings');
20:21:46   9  END;
20:21:46  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:03.52
20:21:50 SQL> 
20:21:50 SQL> -----------------------------------------------------------------------
20:21:50 SQL> --			       APPLY/score THE MODEL
20:21:50 SQL> -----------------------------------------------------------------------
20:21:50 SQL> 
20:21:50 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:21:50 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:21:50   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:21:50   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.07
20:21:50 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:21:50   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:21:50   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:21:50 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:21:50   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:21:50   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:21:50 SQL> -----------------------
20:21:50 SQL> -- PREPARE SCORING DATA
20:21:50 SQL> --
20:21:50 SQL> -- If the data for model creation has been prepared, then the data
20:21:50 SQL> -- to be scored using the model must be prepared in the same manner
20:21:50 SQL> -- in order to obtain meaningful results.
20:21:50 SQL> --
20:21:50 SQL> -- 1. Missing Value treatment for all Predictors and
20:21:50 SQL> -- 2. Normalization
20:21:50 SQL> -- No outlier treatment will be performed during test and apply. The
20:21:50 SQL> -- normalization step is sufficient, since the normalization parameters
20:21:50 SQL> -- already capture the effects of outlier treatment done with build data.
20:21:50 SQL> --
20:21:50 SQL> BEGIN
20:21:50   2  	-- Xform Test data to replace missing values
20:21:50   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:21:50   4  	  miss_table_name => 'svmc_miss_num',
20:21:50   5  	  data_table_name => '&scoretable',
20:21:50   6  	  xform_view_name => 'xformed_apply_miss_num');
20:21:50   7  
20:21:50   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:21:50   9  	  miss_table_name => 'svmc_miss_cat',
20:21:50  10  	  data_table_name => '&scoretable',
20:21:50  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:21:50  12  
20:21:50  13  	-- Normalize the data to be scored
20:21:50  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:21:50  15  	  norm_table_name => 'svmc_norm',
20:21:50  16  	  data_table_name => '&scoretable',
20:21:50  17  	  xform_view_name => 'svmc_apply_prep');
20:21:50  18  END;
20:21:50  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.17
20:21:50 SQL> 
20:21:50 SQL> -- Maybe I already collected a score for this prdate.
20:21:50 SQL> -- DELETE it if I did:
20:21:50 SQL> DELETE svm62scores
20:21:50   2  WHERE score > 0
20:21:50   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:21:50   4  -- I need to supply the target attribute name:
20:21:50   5  AND targ = '&1'
20:21:50   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gatt'

0 rows deleted.

Elapsed: 00:00:00.02
20:21:50 SQL> 
20:21:50 SQL> -- We do a drumroll here:
20:21:50 SQL> 
20:21:50 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:21:50   2  SELECT
20:21:50   3  prdate
20:21:50   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:21:50   5  ,sysdate
20:21:50   6  ,SUBSTR(prdate,1,7)pair
20:21:50   7  ,SUBSTR(prdate,-19)ydate
20:21:50   8  ,'&1'
20:21:50   9  FROM svmc_apply_prep
20:21:50  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gatt'

1 row created.

Elapsed: 00:00:00.05
20:21:50 SQL> @score1_5min_gattn.sql	2010-11-01 16:45:01 aud_usd
20:21:50 SQL> --
20:21:50 SQL> -- score1_5min_gattn.sql
20:21:50 SQL> --
20:21:50 SQL> 
20:21:50 SQL> -- Demo:
20:21:50 SQL> -- @score1_5min_gattn.sql 2010-12-31 20:45:01 aud_usd
20:21:50 SQL> 
20:21:50 SQL> CREATE OR REPLACE VIEW sme AS
20:21:50   2  SELECT
20:21:50   3  prdate
20:21:50   4  ,NULL gattn
20:21:50   5  ,g00
20:21:50   6  ,g01
20:21:50   7  ,g02
20:21:50   8  ,g03
20:21:50   9  ,g04
20:21:50  10  ,g05
20:21:50  11  ,g06
20:21:50  12  ,g07
20:21:50  13  ,g08
20:21:50  14  ,g09
20:21:50  15  ,g10
20:21:50  16  ,g11
20:21:50  17  ,g12
20:21:50  18  ,g13
20:21:50  19  ,g14
20:21:50  20  ,g15
20:21:50  21  ,g16
20:21:50  22  ,g17
20:21:50  23  ,g18
20:21:50  24  ,g19
20:21:50  25  ,g20
20:21:50  26  ,g21
20:21:50  27  ,g22
20:21:50  28  ,g23
20:21:50  29  ,g24
20:21:50  30  ,g25
20:21:50  31  ,g26
20:21:50  32  ,g27
20:21:50  33  ,g28
20:21:50  34  ,g29
20:21:50  35  ,g30
20:21:50  36  ,g31
20:21:50  37  ,g32
20:21:50  38  ,g33
20:21:50  39  ,g34
20:21:50  40  ,g35
20:21:50  41  ,g36
20:21:50  42  ,g37
20:21:50  43  ,g38
20:21:50  44  ,g39
20:21:50  45  ,g40
20:21:50  46  ,g41
20:21:50  47  FROM modsrc
20:21:50  48  WHERE ydate = '&1'||' '||'&2'
20:21:50  49  AND pair = '&3'
20:21:50  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-11-01'||' '||'16:45:01'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.39
20:21:51 SQL> 
20:21:51 SQL> -- rpt
20:21:51 SQL> -- We should see just 1 row:
20:21:51 SQL> 
20:21:51 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.02
20:21:51 SQL> 
20:21:51 SQL> -- Build the model:
20:21:51 SQL> CREATE OR REPLACE VIEW bme AS
20:21:51   2  SELECT
20:21:51   3  prdate
20:21:51   4  ,gattn
20:21:51   5  ,g00
20:21:51   6  ,g01
20:21:51   7  ,g02
20:21:51   8  ,g03
20:21:51   9  ,g04
20:21:51  10  ,g05
20:21:51  11  ,g06
20:21:51  12  ,g07
20:21:51  13  ,g08
20:21:51  14  ,g09
20:21:51  15  ,g10
20:21:51  16  ,g11
20:21:51  17  ,g12
20:21:51  18  ,g13
20:21:51  19  ,g14
20:21:51  20  ,g15
20:21:51  21  ,g16
20:21:51  22  ,g17
20:21:51  23  ,g18
20:21:51  24  ,g19
20:21:51  25  ,g20
20:21:51  26  ,g21
20:21:51  27  ,g22
20:21:51  28  ,g23
20:21:51  29  ,g24
20:21:51  30  ,g25
20:21:51  31  ,g26
20:21:51  32  ,g27
20:21:51  33  ,g28
20:21:51  34  ,g29
20:21:51  35  ,g30
20:21:51  36  ,g31
20:21:51  37  ,g32
20:21:51  38  ,g33
20:21:51  39  ,g34
20:21:51  40  ,g35
20:21:51  41  ,g36
20:21:51  42  ,g37
20:21:51  43  ,g38
20:21:51  44  ,g39
20:21:51  45  ,g40
20:21:51  46  ,g41
20:21:51  47  FROM modsrc
20:21:51  48  WHERE gattn IN('nup','up')
20:21:51  49  -- Use only rows which are older than 1 day:
20:21:51  50  AND 1+ydate < '&1'||' '||'&2'
20:21:51  51  AND pair = '&3'
20:21:51  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-11-01'||' '||'16:45:01'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.12
20:21:51 SQL> 
20:21:51 SQL> -- rpt
20:21:51 SQL> 
20:21:51 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	     3341
up	     1899

Elapsed: 00:00:00.03
20:21:51 SQL> 
20:21:51 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-10-29 21:50:01

Elapsed: 00:00:00.01
20:21:51 SQL> 
20:21:51 SQL> -- Now build model from bme and score sme
20:21:51 SQL> @score1.sql gattn
20:21:51 SQL> --
20:21:51 SQL> -- score1.sql
20:21:51 SQL> --
20:21:51 SQL> 
20:21:51 SQL> -- I use this script to send 5 params to score.sql
20:21:51 SQL> -- which does the heavy lifting of creating an SVM model.
20:21:51 SQL> -- Then at the very end of this script I use the model
20:21:51 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:21:51 SQL> 
20:21:51 SQL> -- I call this script from 2 other scripts:
20:21:51 SQL> -- score1_5min.sql
20:21:51 SQL> -- score1_5min_gattn.sql
20:21:51 SQL> 
20:21:51 SQL> -- The 1st param is the name of the target attribute.
20:21:51 SQL> -- I like to call my target attributes either gatt or gattn.
20:21:51 SQL> 
20:21:51 SQL> -- Demo:
20:21:51 SQL> -- @score1.sql 'gatt'
20:21:51 SQL> -- @score1.sql 'gattn'
20:21:51 SQL> 
20:21:51 SQL> -- Now, I fill up svmc_apply_prep.
20:21:51 SQL> -- I use same model_name used in score.sql
20:21:51 SQL> DEFINE model_name = 'svmfx101'
20:21:51 SQL> DEFINE bldtable	= 'bme'
20:21:51 SQL> DEFINE scoretable = 'sme'
20:21:51 SQL> DEFINE case_id	= 'prdate'
20:21:51 SQL> -- Demo:
20:21:51 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:21:51 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:21:51 SQL> --
20:21:51 SQL> -- score.sql
20:21:51 SQL> --
20:21:51 SQL> 
20:21:51 SQL> -- usage: score.sql
20:21:51 SQL> 
20:21:51 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:21:51 SQL> 
20:21:51 SQL> -- DEFINE target	   = 'gatt'
20:21:51 SQL> -- DEFINE model_name = 'svmfx101'
20:21:51 SQL> -- DEFINE bldtable   = 'bme'
20:21:51 SQL> -- DEFINE scoretable = 'sme'
20:21:51 SQL> -- DEFINE case_id    = 'prdate'
20:21:51 SQL> 
20:21:51 SQL> DEFINE target	= '&1'
20:21:51 SQL> DEFINE model_name = '&2'
20:21:51 SQL> DEFINE bldtable	= '&3'
20:21:51 SQL> DEFINE scoretable = '&4'
20:21:51 SQL> DEFINE case_id	= '&5'
20:21:51 SQL> 
20:21:51 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:21:51 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:21:51 SQL> 
20:21:51 SQL> -- Builds an SVM model using pl/sql.
20:21:51 SQL> 
20:21:51 SQL> -----------------------------------------------------------------------
20:21:51 SQL> --			    BUILD THE MODEL
20:21:51 SQL> -----------------------------------------------------------------------
20:21:51 SQL> 
20:21:51 SQL> -- Cleanup old build data preparation objects for repeat runs
20:21:51 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.00
20:21:51 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:21:51 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:21:51 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.00
20:21:51 SQL> 
20:21:51 SQL> 
20:21:51 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:21:51 SQL> --
20:21:51 SQL> -- DROP	TABLE svmc_settings ;
20:21:51 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:21:51 SQL> -- DELETE svmc_settings;
20:21:51 SQL> 
20:21:51 SQL> -- The default classification algorithm is Naive Bayes. So override
20:21:51 SQL> -- this choice to SVM using a settings table.
20:21:51 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:21:51 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:21:51 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:21:51 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:21:51 SQL> -- models.
20:21:51 SQL> --
20:21:51 SQL> 
20:21:51 SQL> -- Do this once and then comment it out.
20:21:51 SQL> -- That makes script go faster.
20:21:51 SQL> -- BEGIN
20:21:51 SQL> -- -- Populate settings table
20:21:51 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:21:51 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:21:51 SQL> --
20:21:51 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:21:51 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:21:51 SQL> --
20:21:51 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:21:51 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:21:51 SQL> --   COMMIT;
20:21:51 SQL> -- END;
20:21:51 SQL> -- /
20:21:51 SQL> 
20:21:51 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:21:51 SQL> 
20:21:51 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:21:51   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:21:51   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:21:51 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:21:51   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:21:51   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:21:51 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:21:51   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:21:51   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:21:51 SQL> 
20:21:51 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:21:51   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:21:51   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:21:51 SQL> 
20:21:51 SQL> --------------------------------
20:21:51 SQL> -- PREPARE BUILD (TRAINING) DATA
20:21:51 SQL> --
20:21:51 SQL> 
20:21:51 SQL> -- 1. Missing Value treatment for all Predictors and
20:21:51 SQL> -- 2. Outlier Treatment and
20:21:51 SQL> -- 3. Normalization are performed below.
20:21:51 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:21:51 SQL> --    normalized here.
20:21:51 SQL> 
20:21:51 SQL> BEGIN
20:21:51   2  	-- Perform missing value treatment for all predictors
20:21:51   3  	-- create miss tables
20:21:51   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:21:51   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:21:51   6  
20:21:51   7  	-- populate miss tables
20:21:51   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:21:51   9  	  miss_table_name => 'svmc_miss_num',
20:21:51  10  	  data_table_name => '&bldtable',
20:21:51  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:21:51  12  
20:21:51  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:21:51  14  	  miss_table_name => 'svmc_miss_cat',
20:21:51  15  	  data_table_name => '&bldtable',
20:21:51  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:21:51  17  
20:21:51  18  	-- xform input data to replace missing values
20:21:51  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:21:51  20  	  miss_table_name => 'svmc_miss_num',
20:21:51  21  	  data_table_name => '&bldtable',
20:21:51  22  	  xform_view_name => 'xformed_build_miss_num');
20:21:51  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:21:51  24  	  miss_table_name => 'svmc_miss_cat',
20:21:51  25  	  data_table_name => '&bldtable',
20:21:51  26  	  xform_view_name => 'xformed_build_miss_cat');
20:21:51  27  
20:21:51  28  	-- Perform outlier treatment.
20:21:51  29  	-- create clip table
20:21:51  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:21:51  31  
20:21:51  32  	-- populate clip table
20:21:51  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:21:51  34  	  clip_table_name => 'svmc_clip',
20:21:51  35  	  data_table_name => '&bldtable',
20:21:51  36  	  tail_frac	  => 0.025,
20:21:51  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:21:51  38  
20:21:51  39  	-- xform input data to winsorized data
20:21:51  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:21:51  41  	  clip_table_name => 'svmc_clip',
20:21:51  42  	  data_table_name => '&bldtable',
20:21:51  43  	  xform_view_name => 'svmc_winsor');
20:21:51  44  
20:21:51  45  	-- create normalization table
20:21:51  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:21:51  47  
20:21:51  48  	-- populate normalization table based on winsorized data
20:21:51  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:21:51  50  	  norm_table_name => 'svmc_norm',
20:21:51  51  	  data_table_name => 'svmc_winsor',
20:21:51  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:21:51  53  
20:21:51  54  	-- normalize the original data
20:21:51  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:21:51  56  	  norm_table_name => 'svmc_norm',
20:21:51  57  	  data_table_name => '&bldtable',
20:21:51  58  	  xform_view_name => 'svmc_build_prep');
20:21:51  59  END;
20:21:51  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.32
20:21:52 SQL> 
20:21:52 SQL> ---------------------
20:21:52 SQL> -- CREATE A NEW MODEL
20:21:52 SQL> --
20:21:52 SQL> -- Cleanup old model with the same name for repeat runs
20:21:52 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:21:52   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:21:52   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.03
20:21:53 SQL> 
20:21:53 SQL> -- Build a new SVM Model
20:21:53 SQL> BEGIN
20:21:53   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:21:53   3  	  model_name	      => '&model_name',
20:21:53   4  	  mining_function     => dbms_data_mining.classification,
20:21:53   5  	  data_table_name     => 'svmc_build_prep',
20:21:53   6  	  case_id_column_name => '&case_id',
20:21:53   7  	  target_column_name  => '&target',
20:21:53   8  	  settings_table_name => 'svmc_settings');
20:21:53   9  END;
20:21:53  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:03.46
20:21:57 SQL> 
20:21:57 SQL> -----------------------------------------------------------------------
20:21:57 SQL> --			       APPLY/score THE MODEL
20:21:57 SQL> -----------------------------------------------------------------------
20:21:57 SQL> 
20:21:57 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:21:57 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:21:57   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:21:57   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:21:57 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:21:57   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:21:57   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:21:57 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:21:57   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:21:57   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:21:57 SQL> -----------------------
20:21:57 SQL> -- PREPARE SCORING DATA
20:21:57 SQL> --
20:21:57 SQL> -- If the data for model creation has been prepared, then the data
20:21:57 SQL> -- to be scored using the model must be prepared in the same manner
20:21:57 SQL> -- in order to obtain meaningful results.
20:21:57 SQL> --
20:21:57 SQL> -- 1. Missing Value treatment for all Predictors and
20:21:57 SQL> -- 2. Normalization
20:21:57 SQL> -- No outlier treatment will be performed during test and apply. The
20:21:57 SQL> -- normalization step is sufficient, since the normalization parameters
20:21:57 SQL> -- already capture the effects of outlier treatment done with build data.
20:21:57 SQL> --
20:21:57 SQL> BEGIN
20:21:57   2  	-- Xform Test data to replace missing values
20:21:57   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:21:57   4  	  miss_table_name => 'svmc_miss_num',
20:21:57   5  	  data_table_name => '&scoretable',
20:21:57   6  	  xform_view_name => 'xformed_apply_miss_num');
20:21:57   7  
20:21:57   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:21:57   9  	  miss_table_name => 'svmc_miss_cat',
20:21:57  10  	  data_table_name => '&scoretable',
20:21:57  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:21:57  12  
20:21:57  13  	-- Normalize the data to be scored
20:21:57  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:21:57  15  	  norm_table_name => 'svmc_norm',
20:21:57  16  	  data_table_name => '&scoretable',
20:21:57  17  	  xform_view_name => 'svmc_apply_prep');
20:21:57  18  END;
20:21:57  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.17
20:21:57 SQL> 
20:21:57 SQL> -- Maybe I already collected a score for this prdate.
20:21:57 SQL> -- DELETE it if I did:
20:21:57 SQL> DELETE svm62scores
20:21:57   2  WHERE score > 0
20:21:57   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:21:57   4  -- I need to supply the target attribute name:
20:21:57   5  AND targ = '&1'
20:21:57   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gattn'

0 rows deleted.

Elapsed: 00:00:00.02
20:21:57 SQL> 
20:21:57 SQL> -- We do a drumroll here:
20:21:57 SQL> 
20:21:57 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:21:57   2  SELECT
20:21:57   3  prdate
20:21:57   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:21:57   5  ,sysdate
20:21:57   6  ,SUBSTR(prdate,1,7)pair
20:21:57   7  ,SUBSTR(prdate,-19)ydate
20:21:57   8  ,'&1'
20:21:57   9  FROM svmc_apply_prep
20:21:57  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gattn'

1 row created.

Elapsed: 00:00:00.05
20:21:57 SQL> @score1_5min.sql	      2010-11-09 16:25:01 aud_usd
20:21:57 SQL> --
20:21:57 SQL> -- score1_5min.sql
20:21:57 SQL> --
20:21:57 SQL> 
20:21:57 SQL> -- Demo:
20:21:57 SQL> -- @score1_5min.sql 2010-12-31 20:45:01 aud_usd
20:21:57 SQL> 
20:21:57 SQL> CREATE OR REPLACE VIEW sme AS
20:21:57   2  SELECT
20:21:57   3  prdate
20:21:57   4  ,NULL gatt
20:21:57   5  ,g00
20:21:57   6  ,g01
20:21:57   7  ,g02
20:21:57   8  ,g03
20:21:57   9  ,g04
20:21:57  10  ,g05
20:21:57  11  ,g06
20:21:57  12  ,g07
20:21:57  13  ,g08
20:21:57  14  ,g09
20:21:57  15  ,g10
20:21:57  16  ,g11
20:21:57  17  ,g12
20:21:57  18  ,g13
20:21:57  19  ,g14
20:21:57  20  ,g15
20:21:57  21  ,g16
20:21:57  22  ,g17
20:21:57  23  ,g18
20:21:57  24  ,g19
20:21:57  25  ,g20
20:21:57  26  ,g21
20:21:57  27  ,g22
20:21:57  28  ,g23
20:21:57  29  ,g24
20:21:57  30  ,g25
20:21:57  31  ,g26
20:21:57  32  ,g27
20:21:57  33  ,g28
20:21:57  34  ,g29
20:21:57  35  ,g30
20:21:57  36  ,g31
20:21:57  37  ,g32
20:21:57  38  ,g33
20:21:57  39  ,g34
20:21:57  40  ,g35
20:21:57  41  ,g36
20:21:57  42  ,g37
20:21:57  43  ,g38
20:21:57  44  ,g39
20:21:57  45  ,g40
20:21:57  46  ,g41
20:21:57  47  FROM modsrc
20:21:57  48  WHERE ydate = '&1'||' '||'&2'
20:21:57  49  AND pair = '&3'
20:21:57  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-11-09'||' '||'16:25:01'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.05
20:21:57 SQL> 
20:21:57 SQL> -- rpt
20:21:57 SQL> -- We should see just 1 row:
20:21:57 SQL> 
20:21:57 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.02
20:21:57 SQL> 
20:21:57 SQL> -- Build the model:
20:21:57 SQL> CREATE OR REPLACE VIEW bme AS
20:21:57   2  SELECT
20:21:57   3  prdate
20:21:57   4  ,gatt
20:21:57   5  ,g00
20:21:57   6  ,g01
20:21:57   7  ,g02
20:21:57   8  ,g03
20:21:57   9  ,g04
20:21:57  10  ,g05
20:21:57  11  ,g06
20:21:57  12  ,g07
20:21:57  13  ,g08
20:21:57  14  ,g09
20:21:57  15  ,g10
20:21:57  16  ,g11
20:21:57  17  ,g12
20:21:57  18  ,g13
20:21:57  19  ,g14
20:21:57  20  ,g15
20:21:57  21  ,g16
20:21:57  22  ,g17
20:21:57  23  ,g18
20:21:57  24  ,g19
20:21:57  25  ,g20
20:21:57  26  ,g21
20:21:57  27  ,g22
20:21:57  28  ,g23
20:21:57  29  ,g24
20:21:57  30  ,g25
20:21:57  31  ,g26
20:21:57  32  ,g27
20:21:57  33  ,g28
20:21:57  34  ,g29
20:21:57  35  ,g30
20:21:57  36  ,g31
20:21:57  37  ,g32
20:21:57  38  ,g33
20:21:57  39  ,g34
20:21:57  40  ,g35
20:21:57  41  ,g36
20:21:57  42  ,g37
20:21:57  43  ,g38
20:21:57  44  ,g39
20:21:57  45  ,g40
20:21:57  46  ,g41
20:21:57  47  FROM modsrc
20:21:57  48  WHERE gatt IN('nup','up')
20:21:57  49  -- Use only rows which are older than 1 day:
20:21:57  50  AND 1+ydate < '&1'||' '||'&2'
20:21:57  51  AND pair = '&3'
20:21:57  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-11-09'||' '||'16:25:01'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.05
20:21:57 SQL> 
20:21:57 SQL> -- rpt
20:21:57 SQL> 
20:21:57 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt;

GAT COUNT(PRDATE)
--- -------------
nup	     4082
up	     2844

Elapsed: 00:00:00.02
20:21:57 SQL> 
20:21:57 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-11-08 16:20:01

Elapsed: 00:00:00.01
20:21:57 SQL> 
20:21:57 SQL> -- Now build model from bme and score sme
20:21:57 SQL> @score1.sql gatt
20:21:57 SQL> --
20:21:57 SQL> -- score1.sql
20:21:57 SQL> --
20:21:57 SQL> 
20:21:57 SQL> -- I use this script to send 5 params to score.sql
20:21:57 SQL> -- which does the heavy lifting of creating an SVM model.
20:21:57 SQL> -- Then at the very end of this script I use the model
20:21:57 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:21:57 SQL> 
20:21:57 SQL> -- I call this script from 2 other scripts:
20:21:57 SQL> -- score1_5min.sql
20:21:57 SQL> -- score1_5min_gattn.sql
20:21:57 SQL> 
20:21:57 SQL> -- The 1st param is the name of the target attribute.
20:21:57 SQL> -- I like to call my target attributes either gatt or gattn.
20:21:57 SQL> 
20:21:57 SQL> -- Demo:
20:21:57 SQL> -- @score1.sql 'gatt'
20:21:57 SQL> -- @score1.sql 'gattn'
20:21:57 SQL> 
20:21:57 SQL> -- Now, I fill up svmc_apply_prep.
20:21:57 SQL> -- I use same model_name used in score.sql
20:21:57 SQL> DEFINE model_name = 'svmfx101'
20:21:57 SQL> DEFINE bldtable	= 'bme'
20:21:57 SQL> DEFINE scoretable = 'sme'
20:21:57 SQL> DEFINE case_id	= 'prdate'
20:21:57 SQL> -- Demo:
20:21:57 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:21:57 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:21:57 SQL> --
20:21:57 SQL> -- score.sql
20:21:57 SQL> --
20:21:57 SQL> 
20:21:57 SQL> -- usage: score.sql
20:21:57 SQL> 
20:21:57 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:21:57 SQL> 
20:21:57 SQL> -- DEFINE target	   = 'gatt'
20:21:57 SQL> -- DEFINE model_name = 'svmfx101'
20:21:57 SQL> -- DEFINE bldtable   = 'bme'
20:21:57 SQL> -- DEFINE scoretable = 'sme'
20:21:57 SQL> -- DEFINE case_id    = 'prdate'
20:21:57 SQL> 
20:21:57 SQL> DEFINE target	= '&1'
20:21:57 SQL> DEFINE model_name = '&2'
20:21:57 SQL> DEFINE bldtable	= '&3'
20:21:57 SQL> DEFINE scoretable = '&4'
20:21:57 SQL> DEFINE case_id	= '&5'
20:21:57 SQL> 
20:21:57 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:21:57 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:21:57 SQL> 
20:21:57 SQL> -- Builds an SVM model using pl/sql.
20:21:57 SQL> 
20:21:57 SQL> -----------------------------------------------------------------------
20:21:57 SQL> --			    BUILD THE MODEL
20:21:57 SQL> -----------------------------------------------------------------------
20:21:57 SQL> 
20:21:57 SQL> -- Cleanup old build data preparation objects for repeat runs
20:21:57 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.00
20:21:57 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:21:57 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:21:57 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.00
20:21:57 SQL> 
20:21:57 SQL> 
20:21:57 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:21:57 SQL> --
20:21:57 SQL> -- DROP	TABLE svmc_settings ;
20:21:57 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:21:57 SQL> -- DELETE svmc_settings;
20:21:57 SQL> 
20:21:57 SQL> -- The default classification algorithm is Naive Bayes. So override
20:21:57 SQL> -- this choice to SVM using a settings table.
20:21:57 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:21:57 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:21:57 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:21:57 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:21:57 SQL> -- models.
20:21:57 SQL> --
20:21:57 SQL> 
20:21:57 SQL> -- Do this once and then comment it out.
20:21:57 SQL> -- That makes script go faster.
20:21:57 SQL> -- BEGIN
20:21:57 SQL> -- -- Populate settings table
20:21:57 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:21:57 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:21:57 SQL> --
20:21:57 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:21:57 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:21:57 SQL> --
20:21:57 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:21:57 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:21:57 SQL> --   COMMIT;
20:21:57 SQL> -- END;
20:21:57 SQL> -- /
20:21:57 SQL> 
20:21:57 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:21:57 SQL> 
20:21:57 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:21:57   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:21:57   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:21:57 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:21:57   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:21:57   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:21:57 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:21:57   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:21:57   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:21:58 SQL> 
20:21:58 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:21:58   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:21:58   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:21:58 SQL> 
20:21:58 SQL> --------------------------------
20:21:58 SQL> -- PREPARE BUILD (TRAINING) DATA
20:21:58 SQL> --
20:21:58 SQL> 
20:21:58 SQL> -- 1. Missing Value treatment for all Predictors and
20:21:58 SQL> -- 2. Outlier Treatment and
20:21:58 SQL> -- 3. Normalization are performed below.
20:21:58 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:21:58 SQL> --    normalized here.
20:21:58 SQL> 
20:21:58 SQL> BEGIN
20:21:58   2  	-- Perform missing value treatment for all predictors
20:21:58   3  	-- create miss tables
20:21:58   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:21:58   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:21:58   6  
20:21:58   7  	-- populate miss tables
20:21:58   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:21:58   9  	  miss_table_name => 'svmc_miss_num',
20:21:58  10  	  data_table_name => '&bldtable',
20:21:58  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:21:58  12  
20:21:58  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:21:58  14  	  miss_table_name => 'svmc_miss_cat',
20:21:58  15  	  data_table_name => '&bldtable',
20:21:58  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:21:58  17  
20:21:58  18  	-- xform input data to replace missing values
20:21:58  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:21:58  20  	  miss_table_name => 'svmc_miss_num',
20:21:58  21  	  data_table_name => '&bldtable',
20:21:58  22  	  xform_view_name => 'xformed_build_miss_num');
20:21:58  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:21:58  24  	  miss_table_name => 'svmc_miss_cat',
20:21:58  25  	  data_table_name => '&bldtable',
20:21:58  26  	  xform_view_name => 'xformed_build_miss_cat');
20:21:58  27  
20:21:58  28  	-- Perform outlier treatment.
20:21:58  29  	-- create clip table
20:21:58  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:21:58  31  
20:21:58  32  	-- populate clip table
20:21:58  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:21:58  34  	  clip_table_name => 'svmc_clip',
20:21:58  35  	  data_table_name => '&bldtable',
20:21:58  36  	  tail_frac	  => 0.025,
20:21:58  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:21:58  38  
20:21:58  39  	-- xform input data to winsorized data
20:21:58  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:21:58  41  	  clip_table_name => 'svmc_clip',
20:21:58  42  	  data_table_name => '&bldtable',
20:21:58  43  	  xform_view_name => 'svmc_winsor');
20:21:58  44  
20:21:58  45  	-- create normalization table
20:21:58  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:21:58  47  
20:21:58  48  	-- populate normalization table based on winsorized data
20:21:58  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:21:58  50  	  norm_table_name => 'svmc_norm',
20:21:58  51  	  data_table_name => 'svmc_winsor',
20:21:58  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:21:58  53  
20:21:58  54  	-- normalize the original data
20:21:58  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:21:58  56  	  norm_table_name => 'svmc_norm',
20:21:58  57  	  data_table_name => '&bldtable',
20:21:58  58  	  xform_view_name => 'svmc_build_prep');
20:21:58  59  END;
20:21:58  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.40
20:21:59 SQL> 
20:21:59 SQL> ---------------------
20:21:59 SQL> -- CREATE A NEW MODEL
20:21:59 SQL> --
20:21:59 SQL> -- Cleanup old model with the same name for repeat runs
20:21:59 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:21:59   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:21:59   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.98
20:22:00 SQL> 
20:22:00 SQL> -- Build a new SVM Model
20:22:00 SQL> BEGIN
20:22:00   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:22:00   3  	  model_name	      => '&model_name',
20:22:00   4  	  mining_function     => dbms_data_mining.classification,
20:22:00   5  	  data_table_name     => 'svmc_build_prep',
20:22:00   6  	  case_id_column_name => '&case_id',
20:22:00   7  	  target_column_name  => '&target',
20:22:00   8  	  settings_table_name => 'svmc_settings');
20:22:00   9  END;
20:22:00  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:02.93
20:22:03 SQL> 
20:22:03 SQL> -----------------------------------------------------------------------
20:22:03 SQL> --			       APPLY/score THE MODEL
20:22:03 SQL> -----------------------------------------------------------------------
20:22:03 SQL> 
20:22:03 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:22:03 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:22:03   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:22:03   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:22:03 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:22:03   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:22:03   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:22:03 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:22:03   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:22:03   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:22:03 SQL> -----------------------
20:22:03 SQL> -- PREPARE SCORING DATA
20:22:03 SQL> --
20:22:03 SQL> -- If the data for model creation has been prepared, then the data
20:22:03 SQL> -- to be scored using the model must be prepared in the same manner
20:22:03 SQL> -- in order to obtain meaningful results.
20:22:03 SQL> --
20:22:03 SQL> -- 1. Missing Value treatment for all Predictors and
20:22:03 SQL> -- 2. Normalization
20:22:03 SQL> -- No outlier treatment will be performed during test and apply. The
20:22:03 SQL> -- normalization step is sufficient, since the normalization parameters
20:22:03 SQL> -- already capture the effects of outlier treatment done with build data.
20:22:03 SQL> --
20:22:03 SQL> BEGIN
20:22:03   2  	-- Xform Test data to replace missing values
20:22:03   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:22:03   4  	  miss_table_name => 'svmc_miss_num',
20:22:03   5  	  data_table_name => '&scoretable',
20:22:03   6  	  xform_view_name => 'xformed_apply_miss_num');
20:22:03   7  
20:22:03   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:22:03   9  	  miss_table_name => 'svmc_miss_cat',
20:22:03  10  	  data_table_name => '&scoretable',
20:22:03  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:22:03  12  
20:22:03  13  	-- Normalize the data to be scored
20:22:03  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:22:03  15  	  norm_table_name => 'svmc_norm',
20:22:03  16  	  data_table_name => '&scoretable',
20:22:03  17  	  xform_view_name => 'svmc_apply_prep');
20:22:03  18  END;
20:22:03  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.18
20:22:03 SQL> 
20:22:03 SQL> -- Maybe I already collected a score for this prdate.
20:22:03 SQL> -- DELETE it if I did:
20:22:03 SQL> DELETE svm62scores
20:22:03   2  WHERE score > 0
20:22:03   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:22:03   4  -- I need to supply the target attribute name:
20:22:03   5  AND targ = '&1'
20:22:03   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gatt'

0 rows deleted.

Elapsed: 00:00:00.02
20:22:03 SQL> 
20:22:03 SQL> -- We do a drumroll here:
20:22:03 SQL> 
20:22:03 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:22:03   2  SELECT
20:22:03   3  prdate
20:22:03   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:22:03   5  ,sysdate
20:22:03   6  ,SUBSTR(prdate,1,7)pair
20:22:03   7  ,SUBSTR(prdate,-19)ydate
20:22:03   8  ,'&1'
20:22:03   9  FROM svmc_apply_prep
20:22:03  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gatt'

1 row created.

Elapsed: 00:00:00.05
20:22:03 SQL> @score1_5min.sql	      2010-11-01 11:05:01 aud_usd
20:22:03 SQL> --
20:22:03 SQL> -- score1_5min.sql
20:22:03 SQL> --
20:22:03 SQL> 
20:22:03 SQL> -- Demo:
20:22:03 SQL> -- @score1_5min.sql 2010-12-31 20:45:01 aud_usd
20:22:03 SQL> 
20:22:03 SQL> CREATE OR REPLACE VIEW sme AS
20:22:03   2  SELECT
20:22:03   3  prdate
20:22:03   4  ,NULL gatt
20:22:03   5  ,g00
20:22:03   6  ,g01
20:22:03   7  ,g02
20:22:03   8  ,g03
20:22:03   9  ,g04
20:22:03  10  ,g05
20:22:03  11  ,g06
20:22:03  12  ,g07
20:22:03  13  ,g08
20:22:03  14  ,g09
20:22:03  15  ,g10
20:22:03  16  ,g11
20:22:03  17  ,g12
20:22:03  18  ,g13
20:22:03  19  ,g14
20:22:03  20  ,g15
20:22:03  21  ,g16
20:22:03  22  ,g17
20:22:03  23  ,g18
20:22:03  24  ,g19
20:22:03  25  ,g20
20:22:03  26  ,g21
20:22:03  27  ,g22
20:22:03  28  ,g23
20:22:03  29  ,g24
20:22:03  30  ,g25
20:22:03  31  ,g26
20:22:03  32  ,g27
20:22:03  33  ,g28
20:22:03  34  ,g29
20:22:03  35  ,g30
20:22:03  36  ,g31
20:22:03  37  ,g32
20:22:03  38  ,g33
20:22:03  39  ,g34
20:22:03  40  ,g35
20:22:03  41  ,g36
20:22:03  42  ,g37
20:22:03  43  ,g38
20:22:03  44  ,g39
20:22:03  45  ,g40
20:22:03  46  ,g41
20:22:03  47  FROM modsrc
20:22:03  48  WHERE ydate = '&1'||' '||'&2'
20:22:03  49  AND pair = '&3'
20:22:03  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-11-01'||' '||'11:05:01'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:22:03 SQL> 
20:22:03 SQL> -- rpt
20:22:03 SQL> -- We should see just 1 row:
20:22:03 SQL> 
20:22:03 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.02
20:22:03 SQL> 
20:22:03 SQL> -- Build the model:
20:22:03 SQL> CREATE OR REPLACE VIEW bme AS
20:22:03   2  SELECT
20:22:03   3  prdate
20:22:03   4  ,gatt
20:22:03   5  ,g00
20:22:03   6  ,g01
20:22:03   7  ,g02
20:22:03   8  ,g03
20:22:03   9  ,g04
20:22:03  10  ,g05
20:22:03  11  ,g06
20:22:03  12  ,g07
20:22:03  13  ,g08
20:22:03  14  ,g09
20:22:03  15  ,g10
20:22:03  16  ,g11
20:22:03  17  ,g12
20:22:03  18  ,g13
20:22:03  19  ,g14
20:22:03  20  ,g15
20:22:03  21  ,g16
20:22:03  22  ,g17
20:22:03  23  ,g18
20:22:03  24  ,g19
20:22:03  25  ,g20
20:22:03  26  ,g21
20:22:03  27  ,g22
20:22:03  28  ,g23
20:22:03  29  ,g24
20:22:03  30  ,g25
20:22:03  31  ,g26
20:22:03  32  ,g27
20:22:03  33  ,g28
20:22:03  34  ,g29
20:22:03  35  ,g30
20:22:03  36  ,g31
20:22:03  37  ,g32
20:22:03  38  ,g33
20:22:03  39  ,g34
20:22:03  40  ,g35
20:22:03  41  ,g36
20:22:03  42  ,g37
20:22:03  43  ,g38
20:22:03  44  ,g39
20:22:03  45  ,g40
20:22:03  46  ,g41
20:22:03  47  FROM modsrc
20:22:03  48  WHERE gatt IN('nup','up')
20:22:03  49  -- Use only rows which are older than 1 day:
20:22:03  50  AND 1+ydate < '&1'||' '||'&2'
20:22:03  51  AND pair = '&3'
20:22:03  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-11-01'||' '||'11:05:01'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:22:03 SQL> 
20:22:03 SQL> -- rpt
20:22:03 SQL> 
20:22:03 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt;

GAT COUNT(PRDATE)
--- -------------
nup	     3057
up	     2183

Elapsed: 00:00:00.03
20:22:03 SQL> 
20:22:03 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-10-29 21:50:01

Elapsed: 00:00:00.01
20:22:03 SQL> 
20:22:03 SQL> -- Now build model from bme and score sme
20:22:03 SQL> @score1.sql gatt
20:22:03 SQL> --
20:22:03 SQL> -- score1.sql
20:22:03 SQL> --
20:22:03 SQL> 
20:22:03 SQL> -- I use this script to send 5 params to score.sql
20:22:03 SQL> -- which does the heavy lifting of creating an SVM model.
20:22:03 SQL> -- Then at the very end of this script I use the model
20:22:03 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:22:03 SQL> 
20:22:03 SQL> -- I call this script from 2 other scripts:
20:22:03 SQL> -- score1_5min.sql
20:22:03 SQL> -- score1_5min_gattn.sql
20:22:03 SQL> 
20:22:03 SQL> -- The 1st param is the name of the target attribute.
20:22:03 SQL> -- I like to call my target attributes either gatt or gattn.
20:22:03 SQL> 
20:22:03 SQL> -- Demo:
20:22:03 SQL> -- @score1.sql 'gatt'
20:22:03 SQL> -- @score1.sql 'gattn'
20:22:03 SQL> 
20:22:03 SQL> -- Now, I fill up svmc_apply_prep.
20:22:03 SQL> -- I use same model_name used in score.sql
20:22:03 SQL> DEFINE model_name = 'svmfx101'
20:22:03 SQL> DEFINE bldtable	= 'bme'
20:22:03 SQL> DEFINE scoretable = 'sme'
20:22:03 SQL> DEFINE case_id	= 'prdate'
20:22:03 SQL> -- Demo:
20:22:03 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:22:03 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:22:03 SQL> --
20:22:03 SQL> -- score.sql
20:22:03 SQL> --
20:22:03 SQL> 
20:22:03 SQL> -- usage: score.sql
20:22:03 SQL> 
20:22:03 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:22:03 SQL> 
20:22:03 SQL> -- DEFINE target	   = 'gatt'
20:22:03 SQL> -- DEFINE model_name = 'svmfx101'
20:22:03 SQL> -- DEFINE bldtable   = 'bme'
20:22:03 SQL> -- DEFINE scoretable = 'sme'
20:22:03 SQL> -- DEFINE case_id    = 'prdate'
20:22:03 SQL> 
20:22:03 SQL> DEFINE target	= '&1'
20:22:03 SQL> DEFINE model_name = '&2'
20:22:03 SQL> DEFINE bldtable	= '&3'
20:22:03 SQL> DEFINE scoretable = '&4'
20:22:03 SQL> DEFINE case_id	= '&5'
20:22:03 SQL> 
20:22:03 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:22:03 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:22:03 SQL> 
20:22:03 SQL> -- Builds an SVM model using pl/sql.
20:22:03 SQL> 
20:22:03 SQL> -----------------------------------------------------------------------
20:22:03 SQL> --			    BUILD THE MODEL
20:22:03 SQL> -----------------------------------------------------------------------
20:22:03 SQL> 
20:22:03 SQL> -- Cleanup old build data preparation objects for repeat runs
20:22:03 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.00
20:22:03 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:22:03 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:22:03 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.00
20:22:03 SQL> 
20:22:03 SQL> 
20:22:03 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:22:03 SQL> --
20:22:03 SQL> -- DROP	TABLE svmc_settings ;
20:22:03 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:22:03 SQL> -- DELETE svmc_settings;
20:22:03 SQL> 
20:22:03 SQL> -- The default classification algorithm is Naive Bayes. So override
20:22:03 SQL> -- this choice to SVM using a settings table.
20:22:03 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:22:03 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:22:03 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:22:03 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:22:03 SQL> -- models.
20:22:03 SQL> --
20:22:03 SQL> 
20:22:03 SQL> -- Do this once and then comment it out.
20:22:03 SQL> -- That makes script go faster.
20:22:03 SQL> -- BEGIN
20:22:03 SQL> -- -- Populate settings table
20:22:03 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:22:03 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:22:03 SQL> --
20:22:03 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:22:03 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:22:03 SQL> --
20:22:03 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:22:03 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:22:03 SQL> --   COMMIT;
20:22:03 SQL> -- END;
20:22:03 SQL> -- /
20:22:03 SQL> 
20:22:03 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:22:03 SQL> 
20:22:03 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:22:03   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:22:03   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:22:03 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:22:03   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:22:03   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:22:03 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:22:03   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:22:03   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:22:03 SQL> 
20:22:03 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:22:03   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:22:03   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:22:03 SQL> 
20:22:03 SQL> --------------------------------
20:22:03 SQL> -- PREPARE BUILD (TRAINING) DATA
20:22:03 SQL> --
20:22:03 SQL> 
20:22:03 SQL> -- 1. Missing Value treatment for all Predictors and
20:22:03 SQL> -- 2. Outlier Treatment and
20:22:03 SQL> -- 3. Normalization are performed below.
20:22:03 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:22:03 SQL> --    normalized here.
20:22:03 SQL> 
20:22:03 SQL> BEGIN
20:22:03   2  	-- Perform missing value treatment for all predictors
20:22:03   3  	-- create miss tables
20:22:03   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:22:03   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:22:03   6  
20:22:03   7  	-- populate miss tables
20:22:04   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:22:04   9  	  miss_table_name => 'svmc_miss_num',
20:22:04  10  	  data_table_name => '&bldtable',
20:22:04  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:22:04  12  
20:22:04  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:22:04  14  	  miss_table_name => 'svmc_miss_cat',
20:22:04  15  	  data_table_name => '&bldtable',
20:22:04  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:22:04  17  
20:22:04  18  	-- xform input data to replace missing values
20:22:04  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:22:04  20  	  miss_table_name => 'svmc_miss_num',
20:22:04  21  	  data_table_name => '&bldtable',
20:22:04  22  	  xform_view_name => 'xformed_build_miss_num');
20:22:04  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:22:04  24  	  miss_table_name => 'svmc_miss_cat',
20:22:04  25  	  data_table_name => '&bldtable',
20:22:04  26  	  xform_view_name => 'xformed_build_miss_cat');
20:22:04  27  
20:22:04  28  	-- Perform outlier treatment.
20:22:04  29  	-- create clip table
20:22:04  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:22:04  31  
20:22:04  32  	-- populate clip table
20:22:04  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:22:04  34  	  clip_table_name => 'svmc_clip',
20:22:04  35  	  data_table_name => '&bldtable',
20:22:04  36  	  tail_frac	  => 0.025,
20:22:04  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:22:04  38  
20:22:04  39  	-- xform input data to winsorized data
20:22:04  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:22:04  41  	  clip_table_name => 'svmc_clip',
20:22:04  42  	  data_table_name => '&bldtable',
20:22:04  43  	  xform_view_name => 'svmc_winsor');
20:22:04  44  
20:22:04  45  	-- create normalization table
20:22:04  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:22:04  47  
20:22:04  48  	-- populate normalization table based on winsorized data
20:22:04  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:22:04  50  	  norm_table_name => 'svmc_norm',
20:22:04  51  	  data_table_name => 'svmc_winsor',
20:22:04  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:22:04  53  
20:22:04  54  	-- normalize the original data
20:22:04  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:22:04  56  	  norm_table_name => 'svmc_norm',
20:22:04  57  	  data_table_name => '&bldtable',
20:22:04  58  	  xform_view_name => 'svmc_build_prep');
20:22:04  59  END;
20:22:04  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.30
20:22:05 SQL> 
20:22:05 SQL> ---------------------
20:22:05 SQL> -- CREATE A NEW MODEL
20:22:05 SQL> --
20:22:05 SQL> -- Cleanup old model with the same name for repeat runs
20:22:05 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:22:05   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:22:05   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.13
20:22:06 SQL> 
20:22:06 SQL> -- Build a new SVM Model
20:22:06 SQL> BEGIN
20:22:06   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:22:06   3  	  model_name	      => '&model_name',
20:22:06   4  	  mining_function     => dbms_data_mining.classification,
20:22:06   5  	  data_table_name     => 'svmc_build_prep',
20:22:06   6  	  case_id_column_name => '&case_id',
20:22:06   7  	  target_column_name  => '&target',
20:22:06   8  	  settings_table_name => 'svmc_settings');
20:22:06   9  END;
20:22:06  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:03.03
20:22:09 SQL> 
20:22:09 SQL> -----------------------------------------------------------------------
20:22:09 SQL> --			       APPLY/score THE MODEL
20:22:09 SQL> -----------------------------------------------------------------------
20:22:09 SQL> 
20:22:09 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:22:09 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:22:09   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:22:09   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:22:09 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:22:09   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:22:09   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:22:09 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:22:09   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:22:09   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:22:09 SQL> -----------------------
20:22:09 SQL> -- PREPARE SCORING DATA
20:22:09 SQL> --
20:22:09 SQL> -- If the data for model creation has been prepared, then the data
20:22:09 SQL> -- to be scored using the model must be prepared in the same manner
20:22:09 SQL> -- in order to obtain meaningful results.
20:22:09 SQL> --
20:22:09 SQL> -- 1. Missing Value treatment for all Predictors and
20:22:09 SQL> -- 2. Normalization
20:22:09 SQL> -- No outlier treatment will be performed during test and apply. The
20:22:09 SQL> -- normalization step is sufficient, since the normalization parameters
20:22:09 SQL> -- already capture the effects of outlier treatment done with build data.
20:22:09 SQL> --
20:22:09 SQL> BEGIN
20:22:09   2  	-- Xform Test data to replace missing values
20:22:09   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:22:09   4  	  miss_table_name => 'svmc_miss_num',
20:22:09   5  	  data_table_name => '&scoretable',
20:22:09   6  	  xform_view_name => 'xformed_apply_miss_num');
20:22:09   7  
20:22:09   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:22:09   9  	  miss_table_name => 'svmc_miss_cat',
20:22:09  10  	  data_table_name => '&scoretable',
20:22:09  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:22:09  12  
20:22:09  13  	-- Normalize the data to be scored
20:22:09  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:22:09  15  	  norm_table_name => 'svmc_norm',
20:22:09  16  	  data_table_name => '&scoretable',
20:22:09  17  	  xform_view_name => 'svmc_apply_prep');
20:22:09  18  END;
20:22:09  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.19
20:22:09 SQL> 
20:22:09 SQL> -- Maybe I already collected a score for this prdate.
20:22:09 SQL> -- DELETE it if I did:
20:22:09 SQL> DELETE svm62scores
20:22:09   2  WHERE score > 0
20:22:09   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:22:09   4  -- I need to supply the target attribute name:
20:22:09   5  AND targ = '&1'
20:22:09   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gatt'

0 rows deleted.

Elapsed: 00:00:00.02
20:22:09 SQL> 
20:22:09 SQL> -- We do a drumroll here:
20:22:09 SQL> 
20:22:09 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:22:09   2  SELECT
20:22:09   3  prdate
20:22:09   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:22:09   5  ,sysdate
20:22:09   6  ,SUBSTR(prdate,1,7)pair
20:22:09   7  ,SUBSTR(prdate,-19)ydate
20:22:09   8  ,'&1'
20:22:09   9  FROM svmc_apply_prep
20:22:09  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gatt'

1 row created.

Elapsed: 00:00:00.05
20:22:09 SQL> @score1_5min.sql	      2010-10-05 22:55:01 aud_usd
20:22:09 SQL> --
20:22:09 SQL> -- score1_5min.sql
20:22:09 SQL> --
20:22:09 SQL> 
20:22:09 SQL> -- Demo:
20:22:09 SQL> -- @score1_5min.sql 2010-12-31 20:45:01 aud_usd
20:22:09 SQL> 
20:22:09 SQL> CREATE OR REPLACE VIEW sme AS
20:22:09   2  SELECT
20:22:09   3  prdate
20:22:09   4  ,NULL gatt
20:22:09   5  ,g00
20:22:09   6  ,g01
20:22:09   7  ,g02
20:22:09   8  ,g03
20:22:09   9  ,g04
20:22:09  10  ,g05
20:22:09  11  ,g06
20:22:09  12  ,g07
20:22:09  13  ,g08
20:22:09  14  ,g09
20:22:09  15  ,g10
20:22:09  16  ,g11
20:22:09  17  ,g12
20:22:09  18  ,g13
20:22:09  19  ,g14
20:22:09  20  ,g15
20:22:09  21  ,g16
20:22:09  22  ,g17
20:22:09  23  ,g18
20:22:09  24  ,g19
20:22:09  25  ,g20
20:22:09  26  ,g21
20:22:09  27  ,g22
20:22:09  28  ,g23
20:22:09  29  ,g24
20:22:09  30  ,g25
20:22:09  31  ,g26
20:22:09  32  ,g27
20:22:09  33  ,g28
20:22:09  34  ,g29
20:22:09  35  ,g30
20:22:09  36  ,g31
20:22:09  37  ,g32
20:22:09  38  ,g33
20:22:09  39  ,g34
20:22:09  40  ,g35
20:22:09  41  ,g36
20:22:09  42  ,g37
20:22:09  43  ,g38
20:22:09  44  ,g39
20:22:09  45  ,g40
20:22:09  46  ,g41
20:22:09  47  FROM modsrc
20:22:09  48  WHERE ydate = '&1'||' '||'&2'
20:22:09  49  AND pair = '&3'
20:22:09  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-10-05'||' '||'22:55:01'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:22:09 SQL> 
20:22:09 SQL> -- rpt
20:22:09 SQL> -- We should see just 1 row:
20:22:09 SQL> 
20:22:09 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.01
20:22:09 SQL> 
20:22:09 SQL> -- Build the model:
20:22:09 SQL> CREATE OR REPLACE VIEW bme AS
20:22:09   2  SELECT
20:22:09   3  prdate
20:22:09   4  ,gatt
20:22:09   5  ,g00
20:22:09   6  ,g01
20:22:09   7  ,g02
20:22:09   8  ,g03
20:22:09   9  ,g04
20:22:09  10  ,g05
20:22:09  11  ,g06
20:22:09  12  ,g07
20:22:09  13  ,g08
20:22:09  14  ,g09
20:22:09  15  ,g10
20:22:09  16  ,g11
20:22:09  17  ,g12
20:22:09  18  ,g13
20:22:09  19  ,g14
20:22:09  20  ,g15
20:22:09  21  ,g16
20:22:09  22  ,g17
20:22:09  23  ,g18
20:22:09  24  ,g19
20:22:09  25  ,g20
20:22:09  26  ,g21
20:22:09  27  ,g22
20:22:09  28  ,g23
20:22:09  29  ,g24
20:22:09  30  ,g25
20:22:09  31  ,g26
20:22:09  32  ,g27
20:22:09  33  ,g28
20:22:09  34  ,g29
20:22:09  35  ,g30
20:22:09  36  ,g31
20:22:09  37  ,g32
20:22:09  38  ,g33
20:22:09  39  ,g34
20:22:09  40  ,g35
20:22:09  41  ,g36
20:22:09  42  ,g37
20:22:09  43  ,g38
20:22:09  44  ,g39
20:22:09  45  ,g40
20:22:09  46  ,g41
20:22:09  47  FROM modsrc
20:22:09  48  WHERE gatt IN('nup','up')
20:22:09  49  -- Use only rows which are older than 1 day:
20:22:09  50  AND 1+ydate < '&1'||' '||'&2'
20:22:09  51  AND pair = '&3'
20:22:09  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-10-05'||' '||'22:55:01'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:22:09 SQL> 
20:22:09 SQL> -- rpt
20:22:09 SQL> 
20:22:09 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt;

no rows selected

Elapsed: 00:00:00.02
20:22:09 SQL> 
20:22:09 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------


Elapsed: 00:00:00.01
20:22:09 SQL> 
20:22:09 SQL> -- Now build model from bme and score sme
20:22:09 SQL> @score1.sql gatt
20:22:09 SQL> --
20:22:09 SQL> -- score1.sql
20:22:09 SQL> --
20:22:09 SQL> 
20:22:09 SQL> -- I use this script to send 5 params to score.sql
20:22:09 SQL> -- which does the heavy lifting of creating an SVM model.
20:22:09 SQL> -- Then at the very end of this script I use the model
20:22:09 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:22:09 SQL> 
20:22:09 SQL> -- I call this script from 2 other scripts:
20:22:09 SQL> -- score1_5min.sql
20:22:09 SQL> -- score1_5min_gattn.sql
20:22:09 SQL> 
20:22:09 SQL> -- The 1st param is the name of the target attribute.
20:22:09 SQL> -- I like to call my target attributes either gatt or gattn.
20:22:09 SQL> 
20:22:09 SQL> -- Demo:
20:22:09 SQL> -- @score1.sql 'gatt'
20:22:09 SQL> -- @score1.sql 'gattn'
20:22:09 SQL> 
20:22:09 SQL> -- Now, I fill up svmc_apply_prep.
20:22:09 SQL> -- I use same model_name used in score.sql
20:22:09 SQL> DEFINE model_name = 'svmfx101'
20:22:09 SQL> DEFINE bldtable	= 'bme'
20:22:09 SQL> DEFINE scoretable = 'sme'
20:22:09 SQL> DEFINE case_id	= 'prdate'
20:22:09 SQL> -- Demo:
20:22:09 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:22:09 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:22:09 SQL> --
20:22:09 SQL> -- score.sql
20:22:09 SQL> --
20:22:09 SQL> 
20:22:09 SQL> -- usage: score.sql
20:22:09 SQL> 
20:22:09 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:22:09 SQL> 
20:22:09 SQL> -- DEFINE target	   = 'gatt'
20:22:09 SQL> -- DEFINE model_name = 'svmfx101'
20:22:09 SQL> -- DEFINE bldtable   = 'bme'
20:22:09 SQL> -- DEFINE scoretable = 'sme'
20:22:09 SQL> -- DEFINE case_id    = 'prdate'
20:22:09 SQL> 
20:22:09 SQL> DEFINE target	= '&1'
20:22:09 SQL> DEFINE model_name = '&2'
20:22:09 SQL> DEFINE bldtable	= '&3'
20:22:09 SQL> DEFINE scoretable = '&4'
20:22:09 SQL> DEFINE case_id	= '&5'
20:22:09 SQL> 
20:22:09 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:22:09 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:22:09 SQL> 
20:22:09 SQL> -- Builds an SVM model using pl/sql.
20:22:09 SQL> 
20:22:09 SQL> -----------------------------------------------------------------------
20:22:09 SQL> --			    BUILD THE MODEL
20:22:09 SQL> -----------------------------------------------------------------------
20:22:09 SQL> 
20:22:09 SQL> -- Cleanup old build data preparation objects for repeat runs
20:22:09 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.00
20:22:09 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:22:09 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:22:09 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.01
20:22:09 SQL> 
20:22:09 SQL> 
20:22:09 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:22:09 SQL> --
20:22:09 SQL> -- DROP	TABLE svmc_settings ;
20:22:09 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:22:09 SQL> -- DELETE svmc_settings;
20:22:09 SQL> 
20:22:09 SQL> -- The default classification algorithm is Naive Bayes. So override
20:22:09 SQL> -- this choice to SVM using a settings table.
20:22:09 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:22:09 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:22:09 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:22:09 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:22:09 SQL> -- models.
20:22:09 SQL> --
20:22:09 SQL> 
20:22:09 SQL> -- Do this once and then comment it out.
20:22:09 SQL> -- That makes script go faster.
20:22:09 SQL> -- BEGIN
20:22:09 SQL> -- -- Populate settings table
20:22:09 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:22:09 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:22:09 SQL> --
20:22:09 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:22:09 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:22:09 SQL> --
20:22:09 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:22:09 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:22:09 SQL> --   COMMIT;
20:22:09 SQL> -- END;
20:22:09 SQL> -- /
20:22:09 SQL> 
20:22:09 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:22:09 SQL> 
20:22:09 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:22:09   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:22:09   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
20:22:10 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:22:10   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:22:10   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:22:10 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:22:10   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:22:10   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:22:10 SQL> 
20:22:10 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:22:10   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:22:10   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:22:10 SQL> 
20:22:10 SQL> --------------------------------
20:22:10 SQL> -- PREPARE BUILD (TRAINING) DATA
20:22:10 SQL> --
20:22:10 SQL> 
20:22:10 SQL> -- 1. Missing Value treatment for all Predictors and
20:22:10 SQL> -- 2. Outlier Treatment and
20:22:10 SQL> -- 3. Normalization are performed below.
20:22:10 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:22:10 SQL> --    normalized here.
20:22:10 SQL> 
20:22:10 SQL> BEGIN
20:22:10   2  	-- Perform missing value treatment for all predictors
20:22:10   3  	-- create miss tables
20:22:10   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:22:10   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:22:10   6  
20:22:10   7  	-- populate miss tables
20:22:10   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:22:10   9  	  miss_table_name => 'svmc_miss_num',
20:22:10  10  	  data_table_name => '&bldtable',
20:22:10  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:22:10  12  
20:22:10  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:22:10  14  	  miss_table_name => 'svmc_miss_cat',
20:22:10  15  	  data_table_name => '&bldtable',
20:22:10  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:22:10  17  
20:22:10  18  	-- xform input data to replace missing values
20:22:10  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:22:10  20  	  miss_table_name => 'svmc_miss_num',
20:22:10  21  	  data_table_name => '&bldtable',
20:22:10  22  	  xform_view_name => 'xformed_build_miss_num');
20:22:10  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:22:10  24  	  miss_table_name => 'svmc_miss_cat',
20:22:10  25  	  data_table_name => '&bldtable',
20:22:10  26  	  xform_view_name => 'xformed_build_miss_cat');
20:22:10  27  
20:22:10  28  	-- Perform outlier treatment.
20:22:10  29  	-- create clip table
20:22:10  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:22:10  31  
20:22:10  32  	-- populate clip table
20:22:10  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:22:10  34  	  clip_table_name => 'svmc_clip',
20:22:10  35  	  data_table_name => '&bldtable',
20:22:10  36  	  tail_frac	  => 0.025,
20:22:10  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:22:10  38  
20:22:10  39  	-- xform input data to winsorized data
20:22:10  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:22:10  41  	  clip_table_name => 'svmc_clip',
20:22:10  42  	  data_table_name => '&bldtable',
20:22:10  43  	  xform_view_name => 'svmc_winsor');
20:22:10  44  
20:22:10  45  	-- create normalization table
20:22:10  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:22:10  47  
20:22:10  48  	-- populate normalization table based on winsorized data
20:22:10  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:22:10  50  	  norm_table_name => 'svmc_norm',
20:22:10  51  	  data_table_name => 'svmc_winsor',
20:22:10  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:22:10  53  
20:22:10  54  	-- normalize the original data
20:22:10  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:22:10  56  	  norm_table_name => 'svmc_norm',
20:22:10  57  	  data_table_name => '&bldtable',
20:22:10  58  	  xform_view_name => 'svmc_build_prep');
20:22:10  59  END;
20:22:10  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.71
20:22:10 SQL> 
20:22:10 SQL> ---------------------
20:22:10 SQL> -- CREATE A NEW MODEL
20:22:10 SQL> --
20:22:10 SQL> -- Cleanup old model with the same name for repeat runs
20:22:10 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:22:10   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:22:10   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.93
20:22:11 SQL> 
20:22:11 SQL> -- Build a new SVM Model
20:22:11 SQL> BEGIN
20:22:11   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:22:11   3  	  model_name	      => '&model_name',
20:22:11   4  	  mining_function     => dbms_data_mining.classification,
20:22:11   5  	  data_table_name     => 'svmc_build_prep',
20:22:11   6  	  case_id_column_name => '&case_id',
20:22:11   7  	  target_column_name  => '&target',
20:22:11   8  	  settings_table_name => 'svmc_settings');
20:22:11   9  END;
20:22:11  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',
BEGIN
*
ERROR at line 1:
ORA-40112: insufficient number of valid data rows
ORA-06512: at "SYS.DBMS_DATA_MINING", line 1779
ORA-06512: at line 2


Elapsed: 00:00:00.77
20:22:12 SQL> 
20:22:12 SQL> -----------------------------------------------------------------------
20:22:12 SQL> --			       APPLY/score THE MODEL
20:22:12 SQL> -----------------------------------------------------------------------
20:22:12 SQL> 
20:22:12 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:22:12 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:22:12   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:22:12   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:22:12 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:22:12   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:22:12   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
20:22:12 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:22:12   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:22:12   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:22:12 SQL> -----------------------
20:22:12 SQL> -- PREPARE SCORING DATA
20:22:12 SQL> --
20:22:12 SQL> -- If the data for model creation has been prepared, then the data
20:22:12 SQL> -- to be scored using the model must be prepared in the same manner
20:22:12 SQL> -- in order to obtain meaningful results.
20:22:12 SQL> --
20:22:12 SQL> -- 1. Missing Value treatment for all Predictors and
20:22:12 SQL> -- 2. Normalization
20:22:12 SQL> -- No outlier treatment will be performed during test and apply. The
20:22:12 SQL> -- normalization step is sufficient, since the normalization parameters
20:22:12 SQL> -- already capture the effects of outlier treatment done with build data.
20:22:12 SQL> --
20:22:12 SQL> BEGIN
20:22:12   2  	-- Xform Test data to replace missing values
20:22:12   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:22:12   4  	  miss_table_name => 'svmc_miss_num',
20:22:12   5  	  data_table_name => '&scoretable',
20:22:12   6  	  xform_view_name => 'xformed_apply_miss_num');
20:22:12   7  
20:22:12   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:22:12   9  	  miss_table_name => 'svmc_miss_cat',
20:22:12  10  	  data_table_name => '&scoretable',
20:22:12  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:22:12  12  
20:22:12  13  	-- Normalize the data to be scored
20:22:12  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:22:12  15  	  norm_table_name => 'svmc_norm',
20:22:12  16  	  data_table_name => '&scoretable',
20:22:12  17  	  xform_view_name => 'svmc_apply_prep');
20:22:12  18  END;
20:22:12  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
20:22:12 SQL> 
20:22:12 SQL> -- Maybe I already collected a score for this prdate.
20:22:12 SQL> -- DELETE it if I did:
20:22:12 SQL> DELETE svm62scores
20:22:12   2  WHERE score > 0
20:22:12   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:22:12   4  -- I need to supply the target attribute name:
20:22:12   5  AND targ = '&1'
20:22:12   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gatt'

0 rows deleted.

Elapsed: 00:00:00.02
20:22:12 SQL> 
20:22:12 SQL> -- We do a drumroll here:
20:22:12 SQL> 
20:22:12 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:22:12   2  SELECT
20:22:12   3  prdate
20:22:12   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:22:12   5  ,sysdate
20:22:12   6  ,SUBSTR(prdate,1,7)pair
20:22:12   7  ,SUBSTR(prdate,-19)ydate
20:22:12   8  ,'&1'
20:22:12   9  FROM svmc_apply_prep
20:22:12  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gatt'
FROM svmc_apply_prep
                   *
ERROR at line 9:
ORA-40284: model does not exist


Elapsed: 00:00:00.02
20:22:12 SQL> @score1_5min_gattn.sql	2010-11-03 11:20:01 aud_usd
20:22:12 SQL> --
20:22:12 SQL> -- score1_5min_gattn.sql
20:22:12 SQL> --
20:22:12 SQL> 
20:22:12 SQL> -- Demo:
20:22:12 SQL> -- @score1_5min_gattn.sql 2010-12-31 20:45:01 aud_usd
20:22:12 SQL> 
20:22:12 SQL> CREATE OR REPLACE VIEW sme AS
20:22:12   2  SELECT
20:22:12   3  prdate
20:22:12   4  ,NULL gattn
20:22:12   5  ,g00
20:22:12   6  ,g01
20:22:12   7  ,g02
20:22:12   8  ,g03
20:22:12   9  ,g04
20:22:12  10  ,g05
20:22:12  11  ,g06
20:22:12  12  ,g07
20:22:12  13  ,g08
20:22:12  14  ,g09
20:22:12  15  ,g10
20:22:12  16  ,g11
20:22:12  17  ,g12
20:22:12  18  ,g13
20:22:12  19  ,g14
20:22:12  20  ,g15
20:22:12  21  ,g16
20:22:12  22  ,g17
20:22:12  23  ,g18
20:22:12  24  ,g19
20:22:12  25  ,g20
20:22:12  26  ,g21
20:22:12  27  ,g22
20:22:12  28  ,g23
20:22:12  29  ,g24
20:22:12  30  ,g25
20:22:12  31  ,g26
20:22:12  32  ,g27
20:22:12  33  ,g28
20:22:12  34  ,g29
20:22:12  35  ,g30
20:22:12  36  ,g31
20:22:12  37  ,g32
20:22:12  38  ,g33
20:22:12  39  ,g34
20:22:12  40  ,g35
20:22:12  41  ,g36
20:22:12  42  ,g37
20:22:12  43  ,g38
20:22:12  44  ,g39
20:22:12  45  ,g40
20:22:12  46  ,g41
20:22:12  47  FROM modsrc
20:22:12  48  WHERE ydate = '&1'||' '||'&2'
20:22:12  49  AND pair = '&3'
20:22:12  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-11-03'||' '||'11:20:01'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.06
20:22:12 SQL> 
20:22:12 SQL> -- rpt
20:22:12 SQL> -- We should see just 1 row:
20:22:12 SQL> 
20:22:12 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.01
20:22:12 SQL> 
20:22:12 SQL> -- Build the model:
20:22:12 SQL> CREATE OR REPLACE VIEW bme AS
20:22:12   2  SELECT
20:22:12   3  prdate
20:22:12   4  ,gattn
20:22:12   5  ,g00
20:22:12   6  ,g01
20:22:12   7  ,g02
20:22:12   8  ,g03
20:22:12   9  ,g04
20:22:12  10  ,g05
20:22:12  11  ,g06
20:22:12  12  ,g07
20:22:12  13  ,g08
20:22:12  14  ,g09
20:22:12  15  ,g10
20:22:12  16  ,g11
20:22:12  17  ,g12
20:22:12  18  ,g13
20:22:12  19  ,g14
20:22:12  20  ,g15
20:22:12  21  ,g16
20:22:12  22  ,g17
20:22:12  23  ,g18
20:22:12  24  ,g19
20:22:12  25  ,g20
20:22:12  26  ,g21
20:22:12  27  ,g22
20:22:12  28  ,g23
20:22:12  29  ,g24
20:22:12  30  ,g25
20:22:12  31  ,g26
20:22:12  32  ,g27
20:22:12  33  ,g28
20:22:12  34  ,g29
20:22:12  35  ,g30
20:22:12  36  ,g31
20:22:12  37  ,g32
20:22:12  38  ,g33
20:22:12  39  ,g34
20:22:12  40  ,g35
20:22:12  41  ,g36
20:22:12  42  ,g37
20:22:12  43  ,g38
20:22:12  44  ,g39
20:22:12  45  ,g40
20:22:12  46  ,g41
20:22:12  47  FROM modsrc
20:22:12  48  WHERE gattn IN('nup','up')
20:22:12  49  -- Use only rows which are older than 1 day:
20:22:12  50  AND 1+ydate < '&1'||' '||'&2'
20:22:12  51  AND pair = '&3'
20:22:12  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-11-03'||' '||'11:20:01'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.03
20:22:12 SQL> 
20:22:12 SQL> -- rpt
20:22:12 SQL> 
20:22:12 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	     3721
up	     1980

Elapsed: 00:00:00.02
20:22:12 SQL> 
20:22:12 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-11-02 11:15:01

Elapsed: 00:00:00.02
20:22:12 SQL> 
20:22:12 SQL> -- Now build model from bme and score sme
20:22:12 SQL> @score1.sql gattn
20:22:12 SQL> --
20:22:12 SQL> -- score1.sql
20:22:12 SQL> --
20:22:12 SQL> 
20:22:12 SQL> -- I use this script to send 5 params to score.sql
20:22:12 SQL> -- which does the heavy lifting of creating an SVM model.
20:22:12 SQL> -- Then at the very end of this script I use the model
20:22:12 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:22:12 SQL> 
20:22:12 SQL> -- I call this script from 2 other scripts:
20:22:12 SQL> -- score1_5min.sql
20:22:12 SQL> -- score1_5min_gattn.sql
20:22:12 SQL> 
20:22:12 SQL> -- The 1st param is the name of the target attribute.
20:22:12 SQL> -- I like to call my target attributes either gatt or gattn.
20:22:12 SQL> 
20:22:12 SQL> -- Demo:
20:22:12 SQL> -- @score1.sql 'gatt'
20:22:12 SQL> -- @score1.sql 'gattn'
20:22:12 SQL> 
20:22:12 SQL> -- Now, I fill up svmc_apply_prep.
20:22:12 SQL> -- I use same model_name used in score.sql
20:22:12 SQL> DEFINE model_name = 'svmfx101'
20:22:12 SQL> DEFINE bldtable	= 'bme'
20:22:12 SQL> DEFINE scoretable = 'sme'
20:22:12 SQL> DEFINE case_id	= 'prdate'
20:22:12 SQL> -- Demo:
20:22:12 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:22:12 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:22:12 SQL> --
20:22:12 SQL> -- score.sql
20:22:12 SQL> --
20:22:12 SQL> 
20:22:12 SQL> -- usage: score.sql
20:22:12 SQL> 
20:22:12 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:22:12 SQL> 
20:22:12 SQL> -- DEFINE target	   = 'gatt'
20:22:12 SQL> -- DEFINE model_name = 'svmfx101'
20:22:12 SQL> -- DEFINE bldtable   = 'bme'
20:22:12 SQL> -- DEFINE scoretable = 'sme'
20:22:12 SQL> -- DEFINE case_id    = 'prdate'
20:22:12 SQL> 
20:22:12 SQL> DEFINE target	= '&1'
20:22:12 SQL> DEFINE model_name = '&2'
20:22:12 SQL> DEFINE bldtable	= '&3'
20:22:12 SQL> DEFINE scoretable = '&4'
20:22:12 SQL> DEFINE case_id	= '&5'
20:22:12 SQL> 
20:22:12 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:22:12 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:22:12 SQL> 
20:22:12 SQL> -- Builds an SVM model using pl/sql.
20:22:12 SQL> 
20:22:12 SQL> -----------------------------------------------------------------------
20:22:12 SQL> --			    BUILD THE MODEL
20:22:12 SQL> -----------------------------------------------------------------------
20:22:12 SQL> 
20:22:12 SQL> -- Cleanup old build data preparation objects for repeat runs
20:22:12 SQL> DELETE svmc_miss_num;

0 rows deleted.

Elapsed: 00:00:00.00
20:22:12 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:22:12 SQL> DELETE svmc_clip;

0 rows deleted.

Elapsed: 00:00:00.01
20:22:12 SQL> DELETE svmc_norm;

0 rows deleted.

Elapsed: 00:00:00.00
20:22:12 SQL> 
20:22:12 SQL> 
20:22:12 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:22:12 SQL> --
20:22:12 SQL> -- DROP	TABLE svmc_settings ;
20:22:12 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:22:12 SQL> -- DELETE svmc_settings;
20:22:12 SQL> 
20:22:12 SQL> -- The default classification algorithm is Naive Bayes. So override
20:22:12 SQL> -- this choice to SVM using a settings table.
20:22:12 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:22:12 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:22:12 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:22:12 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:22:12 SQL> -- models.
20:22:12 SQL> --
20:22:12 SQL> 
20:22:12 SQL> -- Do this once and then comment it out.
20:22:12 SQL> -- That makes script go faster.
20:22:12 SQL> -- BEGIN
20:22:12 SQL> -- -- Populate settings table
20:22:12 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:22:12 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:22:12 SQL> --
20:22:12 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:22:12 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:22:12 SQL> --
20:22:12 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:22:12 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:22:12 SQL> --   COMMIT;
20:22:12 SQL> -- END;
20:22:12 SQL> -- /
20:22:12 SQL> 
20:22:12 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:22:12 SQL> 
20:22:12 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:22:12   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:22:12   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:22:12 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:22:12   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:22:12   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:22:12 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:22:12   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:22:12   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
20:22:13 SQL> 
20:22:13 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:22:13   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:22:13   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
20:22:13 SQL> 
20:22:13 SQL> --------------------------------
20:22:13 SQL> -- PREPARE BUILD (TRAINING) DATA
20:22:13 SQL> --
20:22:13 SQL> 
20:22:13 SQL> -- 1. Missing Value treatment for all Predictors and
20:22:13 SQL> -- 2. Outlier Treatment and
20:22:13 SQL> -- 3. Normalization are performed below.
20:22:13 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:22:13 SQL> --    normalized here.
20:22:13 SQL> 
20:22:13 SQL> BEGIN
20:22:13   2  	-- Perform missing value treatment for all predictors
20:22:13   3  	-- create miss tables
20:22:13   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:22:13   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:22:13   6  
20:22:13   7  	-- populate miss tables
20:22:13   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:22:13   9  	  miss_table_name => 'svmc_miss_num',
20:22:13  10  	  data_table_name => '&bldtable',
20:22:13  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:22:13  12  
20:22:13  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:22:13  14  	  miss_table_name => 'svmc_miss_cat',
20:22:13  15  	  data_table_name => '&bldtable',
20:22:13  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:22:13  17  
20:22:13  18  	-- xform input data to replace missing values
20:22:13  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:22:13  20  	  miss_table_name => 'svmc_miss_num',
20:22:13  21  	  data_table_name => '&bldtable',
20:22:13  22  	  xform_view_name => 'xformed_build_miss_num');
20:22:13  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:22:13  24  	  miss_table_name => 'svmc_miss_cat',
20:22:13  25  	  data_table_name => '&bldtable',
20:22:13  26  	  xform_view_name => 'xformed_build_miss_cat');
20:22:13  27  
20:22:13  28  	-- Perform outlier treatment.
20:22:13  29  	-- create clip table
20:22:13  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:22:13  31  
20:22:13  32  	-- populate clip table
20:22:13  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:22:13  34  	  clip_table_name => 'svmc_clip',
20:22:13  35  	  data_table_name => '&bldtable',
20:22:13  36  	  tail_frac	  => 0.025,
20:22:13  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:22:13  38  
20:22:13  39  	-- xform input data to winsorized data
20:22:13  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:22:13  41  	  clip_table_name => 'svmc_clip',
20:22:13  42  	  data_table_name => '&bldtable',
20:22:13  43  	  xform_view_name => 'svmc_winsor');
20:22:13  44  
20:22:13  45  	-- create normalization table
20:22:13  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:22:13  47  
20:22:13  48  	-- populate normalization table based on winsorized data
20:22:13  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:22:13  50  	  norm_table_name => 'svmc_norm',
20:22:13  51  	  data_table_name => 'svmc_winsor',
20:22:13  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:22:13  53  
20:22:13  54  	-- normalize the original data
20:22:13  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:22:13  56  	  norm_table_name => 'svmc_norm',
20:22:13  57  	  data_table_name => '&bldtable',
20:22:13  58  	  xform_view_name => 'svmc_build_prep');
20:22:13  59  END;
20:22:13  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.38
20:22:14 SQL> 
20:22:14 SQL> ---------------------
20:22:14 SQL> -- CREATE A NEW MODEL
20:22:14 SQL> --
20:22:14 SQL> -- Cleanup old model with the same name for repeat runs
20:22:14 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:22:14   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:22:14   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:22:14 SQL> 
20:22:14 SQL> -- Build a new SVM Model
20:22:14 SQL> BEGIN
20:22:14   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:22:14   3  	  model_name	      => '&model_name',
20:22:14   4  	  mining_function     => dbms_data_mining.classification,
20:22:14   5  	  data_table_name     => 'svmc_build_prep',
20:22:14   6  	  case_id_column_name => '&case_id',
20:22:14   7  	  target_column_name  => '&target',
20:22:14   8  	  settings_table_name => 'svmc_settings');
20:22:14   9  END;
20:22:14  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:03.46
20:22:17 SQL> 
20:22:17 SQL> -----------------------------------------------------------------------
20:22:17 SQL> --			       APPLY/score THE MODEL
20:22:17 SQL> -----------------------------------------------------------------------
20:22:17 SQL> 
20:22:17 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:22:17 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:22:17   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:22:17   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:22:18 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:22:18   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:22:18   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.12
20:22:18 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:22:18   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:22:18   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:22:18 SQL> -----------------------
20:22:18 SQL> -- PREPARE SCORING DATA
20:22:18 SQL> --
20:22:18 SQL> -- If the data for model creation has been prepared, then the data
20:22:18 SQL> -- to be scored using the model must be prepared in the same manner
20:22:18 SQL> -- in order to obtain meaningful results.
20:22:18 SQL> --
20:22:18 SQL> -- 1. Missing Value treatment for all Predictors and
20:22:18 SQL> -- 2. Normalization
20:22:18 SQL> -- No outlier treatment will be performed during test and apply. The
20:22:18 SQL> -- normalization step is sufficient, since the normalization parameters
20:22:18 SQL> -- already capture the effects of outlier treatment done with build data.
20:22:18 SQL> --
20:22:18 SQL> BEGIN
20:22:18   2  	-- Xform Test data to replace missing values
20:22:18   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:22:18   4  	  miss_table_name => 'svmc_miss_num',
20:22:18   5  	  data_table_name => '&scoretable',
20:22:18   6  	  xform_view_name => 'xformed_apply_miss_num');
20:22:18   7  
20:22:18   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:22:18   9  	  miss_table_name => 'svmc_miss_cat',
20:22:18  10  	  data_table_name => '&scoretable',
20:22:18  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:22:18  12  
20:22:18  13  	-- Normalize the data to be scored
20:22:18  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:22:18  15  	  norm_table_name => 'svmc_norm',
20:22:18  16  	  data_table_name => '&scoretable',
20:22:18  17  	  xform_view_name => 'svmc_apply_prep');
20:22:18  18  END;
20:22:18  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.18
20:22:18 SQL> 
20:22:18 SQL> -- Maybe I already collected a score for this prdate.
20:22:18 SQL> -- DELETE it if I did:
20:22:18 SQL> DELETE svm62scores
20:22:18   2  WHERE score > 0
20:22:18   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:22:18   4  -- I need to supply the target attribute name:
20:22:18   5  AND targ = '&1'
20:22:18   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gattn'

0 rows deleted.

Elapsed: 00:00:00.02
20:22:18 SQL> 
20:22:18 SQL> -- We do a drumroll here:
20:22:18 SQL> 
20:22:18 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:22:18   2  SELECT
20:22:18   3  prdate
20:22:18   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:22:18   5  ,sysdate
20:22:18   6  ,SUBSTR(prdate,1,7)pair
20:22:18   7  ,SUBSTR(prdate,-19)ydate
20:22:18   8  ,'&1'
20:22:18   9  FROM svmc_apply_prep
20:22:18  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gattn'

1 row created.

Elapsed: 00:00:00.05
20:22:18 SQL> @score1_5min_gattn.sql	2010-10-26 08:25:01 aud_usd
20:22:18 SQL> --
20:22:18 SQL> -- score1_5min_gattn.sql
20:22:18 SQL> --
20:22:18 SQL> 
20:22:18 SQL> -- Demo:
20:22:18 SQL> -- @score1_5min_gattn.sql 2010-12-31 20:45:01 aud_usd
20:22:18 SQL> 
20:22:18 SQL> CREATE OR REPLACE VIEW sme AS
20:22:18   2  SELECT
20:22:18   3  prdate
20:22:18   4  ,NULL gattn
20:22:18   5  ,g00
20:22:18   6  ,g01
20:22:18   7  ,g02
20:22:18   8  ,g03
20:22:18   9  ,g04
20:22:18  10  ,g05
20:22:18  11  ,g06
20:22:18  12  ,g07
20:22:18  13  ,g08
20:22:18  14  ,g09
20:22:18  15  ,g10
20:22:18  16  ,g11
20:22:18  17  ,g12
20:22:18  18  ,g13
20:22:18  19  ,g14
20:22:18  20  ,g15
20:22:18  21  ,g16
20:22:18  22  ,g17
20:22:18  23  ,g18
20:22:18  24  ,g19
20:22:18  25  ,g20
20:22:18  26  ,g21
20:22:18  27  ,g22
20:22:18  28  ,g23
20:22:18  29  ,g24
20:22:18  30  ,g25
20:22:18  31  ,g26
20:22:18  32  ,g27
20:22:18  33  ,g28
20:22:18  34  ,g29
20:22:18  35  ,g30
20:22:18  36  ,g31
20:22:18  37  ,g32
20:22:18  38  ,g33
20:22:18  39  ,g34
20:22:18  40  ,g35
20:22:18  41  ,g36
20:22:18  42  ,g37
20:22:18  43  ,g38
20:22:18  44  ,g39
20:22:18  45  ,g40
20:22:18  46  ,g41
20:22:18  47  FROM modsrc
20:22:18  48  WHERE ydate = '&1'||' '||'&2'
20:22:18  49  AND pair = '&3'
20:22:18  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-10-26'||' '||'08:25:01'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:22:18 SQL> 
20:22:18 SQL> -- rpt
20:22:18 SQL> -- We should see just 1 row:
20:22:18 SQL> 
20:22:18 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.01
20:22:18 SQL> 
20:22:18 SQL> -- Build the model:
20:22:18 SQL> CREATE OR REPLACE VIEW bme AS
20:22:18   2  SELECT
20:22:18   3  prdate
20:22:18   4  ,gattn
20:22:18   5  ,g00
20:22:18   6  ,g01
20:22:18   7  ,g02
20:22:18   8  ,g03
20:22:18   9  ,g04
20:22:18  10  ,g05
20:22:18  11  ,g06
20:22:18  12  ,g07
20:22:18  13  ,g08
20:22:18  14  ,g09
20:22:18  15  ,g10
20:22:18  16  ,g11
20:22:18  17  ,g12
20:22:18  18  ,g13
20:22:18  19  ,g14
20:22:18  20  ,g15
20:22:18  21  ,g16
20:22:18  22  ,g17
20:22:18  23  ,g18
20:22:18  24  ,g19
20:22:18  25  ,g20
20:22:18  26  ,g21
20:22:18  27  ,g22
20:22:18  28  ,g23
20:22:18  29  ,g24
20:22:18  30  ,g25
20:22:18  31  ,g26
20:22:18  32  ,g27
20:22:18  33  ,g28
20:22:18  34  ,g29
20:22:18  35  ,g30
20:22:18  36  ,g31
20:22:18  37  ,g32
20:22:18  38  ,g33
20:22:18  39  ,g34
20:22:18  40  ,g35
20:22:18  41  ,g36
20:22:18  42  ,g37
20:22:18  43  ,g38
20:22:18  44  ,g39
20:22:18  45  ,g40
20:22:18  46  ,g41
20:22:18  47  FROM modsrc
20:22:18  48  WHERE gattn IN('nup','up')
20:22:18  49  -- Use only rows which are older than 1 day:
20:22:18  50  AND 1+ydate < '&1'||' '||'&2'
20:22:18  51  AND pair = '&3'
20:22:18  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-10-26'||' '||'08:25:01'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:22:18 SQL> 
20:22:18 SQL> -- rpt
20:22:18 SQL> 
20:22:18 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	     2609
up	     1317

Elapsed: 00:00:00.02
20:22:18 SQL> 
20:22:18 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-10-25 08:20:01

Elapsed: 00:00:00.01
20:22:18 SQL> 
20:22:18 SQL> -- Now build model from bme and score sme
20:22:18 SQL> @score1.sql gattn
20:22:18 SQL> --
20:22:18 SQL> -- score1.sql
20:22:18 SQL> --
20:22:18 SQL> 
20:22:18 SQL> -- I use this script to send 5 params to score.sql
20:22:18 SQL> -- which does the heavy lifting of creating an SVM model.
20:22:18 SQL> -- Then at the very end of this script I use the model
20:22:18 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:22:18 SQL> 
20:22:18 SQL> -- I call this script from 2 other scripts:
20:22:18 SQL> -- score1_5min.sql
20:22:18 SQL> -- score1_5min_gattn.sql
20:22:18 SQL> 
20:22:18 SQL> -- The 1st param is the name of the target attribute.
20:22:18 SQL> -- I like to call my target attributes either gatt or gattn.
20:22:18 SQL> 
20:22:18 SQL> -- Demo:
20:22:18 SQL> -- @score1.sql 'gatt'
20:22:18 SQL> -- @score1.sql 'gattn'
20:22:18 SQL> 
20:22:18 SQL> -- Now, I fill up svmc_apply_prep.
20:22:18 SQL> -- I use same model_name used in score.sql
20:22:18 SQL> DEFINE model_name = 'svmfx101'
20:22:18 SQL> DEFINE bldtable	= 'bme'
20:22:18 SQL> DEFINE scoretable = 'sme'
20:22:18 SQL> DEFINE case_id	= 'prdate'
20:22:18 SQL> -- Demo:
20:22:18 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:22:18 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:22:18 SQL> --
20:22:18 SQL> -- score.sql
20:22:18 SQL> --
20:22:18 SQL> 
20:22:18 SQL> -- usage: score.sql
20:22:18 SQL> 
20:22:18 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:22:18 SQL> 
20:22:18 SQL> -- DEFINE target	   = 'gatt'
20:22:18 SQL> -- DEFINE model_name = 'svmfx101'
20:22:18 SQL> -- DEFINE bldtable   = 'bme'
20:22:18 SQL> -- DEFINE scoretable = 'sme'
20:22:18 SQL> -- DEFINE case_id    = 'prdate'
20:22:18 SQL> 
20:22:18 SQL> DEFINE target	= '&1'
20:22:18 SQL> DEFINE model_name = '&2'
20:22:18 SQL> DEFINE bldtable	= '&3'
20:22:18 SQL> DEFINE scoretable = '&4'
20:22:18 SQL> DEFINE case_id	= '&5'
20:22:18 SQL> 
20:22:18 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:22:18 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:22:18 SQL> 
20:22:18 SQL> -- Builds an SVM model using pl/sql.
20:22:18 SQL> 
20:22:18 SQL> -----------------------------------------------------------------------
20:22:18 SQL> --			    BUILD THE MODEL
20:22:18 SQL> -----------------------------------------------------------------------
20:22:18 SQL> 
20:22:18 SQL> -- Cleanup old build data preparation objects for repeat runs
20:22:18 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.01
20:22:18 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:22:18 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:22:18 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.00
20:22:18 SQL> 
20:22:18 SQL> 
20:22:18 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:22:18 SQL> --
20:22:18 SQL> -- DROP	TABLE svmc_settings ;
20:22:18 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:22:18 SQL> -- DELETE svmc_settings;
20:22:18 SQL> 
20:22:18 SQL> -- The default classification algorithm is Naive Bayes. So override
20:22:18 SQL> -- this choice to SVM using a settings table.
20:22:18 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:22:18 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:22:18 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:22:18 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:22:18 SQL> -- models.
20:22:18 SQL> --
20:22:18 SQL> 
20:22:18 SQL> -- Do this once and then comment it out.
20:22:18 SQL> -- That makes script go faster.
20:22:18 SQL> -- BEGIN
20:22:18 SQL> -- -- Populate settings table
20:22:18 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:22:18 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:22:18 SQL> --
20:22:18 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:22:18 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:22:18 SQL> --
20:22:18 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:22:18 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:22:18 SQL> --   COMMIT;
20:22:18 SQL> -- END;
20:22:18 SQL> -- /
20:22:18 SQL> 
20:22:18 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.01
20:22:18 SQL> 
20:22:18 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:22:18   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:22:18   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:22:18 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:22:18   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:22:18   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:22:18 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:22:18   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:22:18   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:22:18 SQL> 
20:22:18 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:22:18   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:22:18   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:22:18 SQL> 
20:22:18 SQL> --------------------------------
20:22:18 SQL> -- PREPARE BUILD (TRAINING) DATA
20:22:18 SQL> --
20:22:18 SQL> 
20:22:18 SQL> -- 1. Missing Value treatment for all Predictors and
20:22:18 SQL> -- 2. Outlier Treatment and
20:22:18 SQL> -- 3. Normalization are performed below.
20:22:18 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:22:18 SQL> --    normalized here.
20:22:18 SQL> 
20:22:18 SQL> BEGIN
20:22:18   2  	-- Perform missing value treatment for all predictors
20:22:18   3  	-- create miss tables
20:22:18   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:22:18   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:22:18   6  
20:22:18   7  	-- populate miss tables
20:22:18   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:22:18   9  	  miss_table_name => 'svmc_miss_num',
20:22:18  10  	  data_table_name => '&bldtable',
20:22:18  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:22:18  12  
20:22:18  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:22:18  14  	  miss_table_name => 'svmc_miss_cat',
20:22:18  15  	  data_table_name => '&bldtable',
20:22:18  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:22:18  17  
20:22:18  18  	-- xform input data to replace missing values
20:22:18  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:22:18  20  	  miss_table_name => 'svmc_miss_num',
20:22:18  21  	  data_table_name => '&bldtable',
20:22:18  22  	  xform_view_name => 'xformed_build_miss_num');
20:22:18  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:22:18  24  	  miss_table_name => 'svmc_miss_cat',
20:22:18  25  	  data_table_name => '&bldtable',
20:22:18  26  	  xform_view_name => 'xformed_build_miss_cat');
20:22:18  27  
20:22:18  28  	-- Perform outlier treatment.
20:22:18  29  	-- create clip table
20:22:18  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:22:18  31  
20:22:18  32  	-- populate clip table
20:22:18  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:22:18  34  	  clip_table_name => 'svmc_clip',
20:22:18  35  	  data_table_name => '&bldtable',
20:22:18  36  	  tail_frac	  => 0.025,
20:22:18  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:22:18  38  
20:22:18  39  	-- xform input data to winsorized data
20:22:18  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:22:18  41  	  clip_table_name => 'svmc_clip',
20:22:18  42  	  data_table_name => '&bldtable',
20:22:18  43  	  xform_view_name => 'svmc_winsor');
20:22:18  44  
20:22:18  45  	-- create normalization table
20:22:18  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:22:18  47  
20:22:18  48  	-- populate normalization table based on winsorized data
20:22:18  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:22:18  50  	  norm_table_name => 'svmc_norm',
20:22:18  51  	  data_table_name => 'svmc_winsor',
20:22:18  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:22:18  53  
20:22:18  54  	-- normalize the original data
20:22:18  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:22:18  56  	  norm_table_name => 'svmc_norm',
20:22:18  57  	  data_table_name => '&bldtable',
20:22:18  58  	  xform_view_name => 'svmc_build_prep');
20:22:18  59  END;
20:22:18  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.19
20:22:19 SQL> 
20:22:19 SQL> ---------------------
20:22:19 SQL> -- CREATE A NEW MODEL
20:22:19 SQL> --
20:22:19 SQL> -- Cleanup old model with the same name for repeat runs
20:22:19 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:22:19   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:22:19   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.96
20:22:20 SQL> 
20:22:20 SQL> -- Build a new SVM Model
20:22:20 SQL> BEGIN
20:22:20   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:22:20   3  	  model_name	      => '&model_name',
20:22:20   4  	  mining_function     => dbms_data_mining.classification,
20:22:20   5  	  data_table_name     => 'svmc_build_prep',
20:22:20   6  	  case_id_column_name => '&case_id',
20:22:20   7  	  target_column_name  => '&target',
20:22:20   8  	  settings_table_name => 'svmc_settings');
20:22:20   9  END;
20:22:20  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:03.07
20:22:23 SQL> 
20:22:23 SQL> -----------------------------------------------------------------------
20:22:23 SQL> --			       APPLY/score THE MODEL
20:22:23 SQL> -----------------------------------------------------------------------
20:22:23 SQL> 
20:22:23 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:22:23 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:22:23   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:22:23   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:22:23 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:22:23   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:22:23   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:22:23 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:22:23   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:22:23   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:22:23 SQL> -----------------------
20:22:23 SQL> -- PREPARE SCORING DATA
20:22:23 SQL> --
20:22:23 SQL> -- If the data for model creation has been prepared, then the data
20:22:23 SQL> -- to be scored using the model must be prepared in the same manner
20:22:23 SQL> -- in order to obtain meaningful results.
20:22:23 SQL> --
20:22:23 SQL> -- 1. Missing Value treatment for all Predictors and
20:22:23 SQL> -- 2. Normalization
20:22:23 SQL> -- No outlier treatment will be performed during test and apply. The
20:22:23 SQL> -- normalization step is sufficient, since the normalization parameters
20:22:23 SQL> -- already capture the effects of outlier treatment done with build data.
20:22:23 SQL> --
20:22:23 SQL> BEGIN
20:22:23   2  	-- Xform Test data to replace missing values
20:22:23   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:22:23   4  	  miss_table_name => 'svmc_miss_num',
20:22:23   5  	  data_table_name => '&scoretable',
20:22:23   6  	  xform_view_name => 'xformed_apply_miss_num');
20:22:23   7  
20:22:23   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:22:23   9  	  miss_table_name => 'svmc_miss_cat',
20:22:23  10  	  data_table_name => '&scoretable',
20:22:23  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:22:23  12  
20:22:23  13  	-- Normalize the data to be scored
20:22:23  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:22:23  15  	  norm_table_name => 'svmc_norm',
20:22:23  16  	  data_table_name => '&scoretable',
20:22:23  17  	  xform_view_name => 'svmc_apply_prep');
20:22:23  18  END;
20:22:23  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.17
20:22:24 SQL> 
20:22:24 SQL> -- Maybe I already collected a score for this prdate.
20:22:24 SQL> -- DELETE it if I did:
20:22:24 SQL> DELETE svm62scores
20:22:24   2  WHERE score > 0
20:22:24   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:22:24   4  -- I need to supply the target attribute name:
20:22:24   5  AND targ = '&1'
20:22:24   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gattn'

0 rows deleted.

Elapsed: 00:00:00.02
20:22:24 SQL> 
20:22:24 SQL> -- We do a drumroll here:
20:22:24 SQL> 
20:22:24 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:22:24   2  SELECT
20:22:24   3  prdate
20:22:24   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:22:24   5  ,sysdate
20:22:24   6  ,SUBSTR(prdate,1,7)pair
20:22:24   7  ,SUBSTR(prdate,-19)ydate
20:22:24   8  ,'&1'
20:22:24   9  FROM svmc_apply_prep
20:22:24  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gattn'

1 row created.

Elapsed: 00:00:00.05
20:22:24 SQL> @score1_5min.sql	      2010-10-24 21:05:01 aud_usd
20:22:24 SQL> --
20:22:24 SQL> -- score1_5min.sql
20:22:24 SQL> --
20:22:24 SQL> 
20:22:24 SQL> -- Demo:
20:22:24 SQL> -- @score1_5min.sql 2010-12-31 20:45:01 aud_usd
20:22:24 SQL> 
20:22:24 SQL> CREATE OR REPLACE VIEW sme AS
20:22:24   2  SELECT
20:22:24   3  prdate
20:22:24   4  ,NULL gatt
20:22:24   5  ,g00
20:22:24   6  ,g01
20:22:24   7  ,g02
20:22:24   8  ,g03
20:22:24   9  ,g04
20:22:24  10  ,g05
20:22:24  11  ,g06
20:22:24  12  ,g07
20:22:24  13  ,g08
20:22:24  14  ,g09
20:22:24  15  ,g10
20:22:24  16  ,g11
20:22:24  17  ,g12
20:22:24  18  ,g13
20:22:24  19  ,g14
20:22:24  20  ,g15
20:22:24  21  ,g16
20:22:24  22  ,g17
20:22:24  23  ,g18
20:22:24  24  ,g19
20:22:24  25  ,g20
20:22:24  26  ,g21
20:22:24  27  ,g22
20:22:24  28  ,g23
20:22:24  29  ,g24
20:22:24  30  ,g25
20:22:24  31  ,g26
20:22:24  32  ,g27
20:22:24  33  ,g28
20:22:24  34  ,g29
20:22:24  35  ,g30
20:22:24  36  ,g31
20:22:24  37  ,g32
20:22:24  38  ,g33
20:22:24  39  ,g34
20:22:24  40  ,g35
20:22:24  41  ,g36
20:22:24  42  ,g37
20:22:24  43  ,g38
20:22:24  44  ,g39
20:22:24  45  ,g40
20:22:24  46  ,g41
20:22:24  47  FROM modsrc
20:22:24  48  WHERE ydate = '&1'||' '||'&2'
20:22:24  49  AND pair = '&3'
20:22:24  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-10-24'||' '||'21:05:01'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.05
20:22:24 SQL> 
20:22:24 SQL> -- rpt
20:22:24 SQL> -- We should see just 1 row:
20:22:24 SQL> 
20:22:24 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.01
20:22:24 SQL> 
20:22:24 SQL> -- Build the model:
20:22:24 SQL> CREATE OR REPLACE VIEW bme AS
20:22:24   2  SELECT
20:22:24   3  prdate
20:22:24   4  ,gatt
20:22:24   5  ,g00
20:22:24   6  ,g01
20:22:24   7  ,g02
20:22:24   8  ,g03
20:22:24   9  ,g04
20:22:24  10  ,g05
20:22:24  11  ,g06
20:22:24  12  ,g07
20:22:24  13  ,g08
20:22:24  14  ,g09
20:22:24  15  ,g10
20:22:24  16  ,g11
20:22:24  17  ,g12
20:22:24  18  ,g13
20:22:24  19  ,g14
20:22:24  20  ,g15
20:22:24  21  ,g16
20:22:24  22  ,g17
20:22:24  23  ,g18
20:22:24  24  ,g19
20:22:24  25  ,g20
20:22:24  26  ,g21
20:22:24  27  ,g22
20:22:24  28  ,g23
20:22:24  29  ,g24
20:22:24  30  ,g25
20:22:24  31  ,g26
20:22:24  32  ,g27
20:22:24  33  ,g28
20:22:24  34  ,g29
20:22:24  35  ,g30
20:22:24  36  ,g31
20:22:24  37  ,g32
20:22:24  38  ,g33
20:22:24  39  ,g34
20:22:24  40  ,g35
20:22:24  41  ,g36
20:22:24  42  ,g37
20:22:24  43  ,g38
20:22:24  44  ,g39
20:22:24  45  ,g40
20:22:24  46  ,g41
20:22:24  47  FROM modsrc
20:22:24  48  WHERE gatt IN('nup','up')
20:22:24  49  -- Use only rows which are older than 1 day:
20:22:24  50  AND 1+ydate < '&1'||' '||'&2'
20:22:24  51  AND pair = '&3'
20:22:24  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-10-24'||' '||'21:05:01'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.05
20:22:24 SQL> 
20:22:24 SQL> -- rpt
20:22:24 SQL> 
20:22:24 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt;

GAT COUNT(PRDATE)
--- -------------
nup	     2154
up	     1634

Elapsed: 00:00:00.02
20:22:24 SQL> 
20:22:24 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-10-22 21:50:01

Elapsed: 00:00:00.01
20:22:24 SQL> 
20:22:24 SQL> -- Now build model from bme and score sme
20:22:24 SQL> @score1.sql gatt
20:22:24 SQL> --
20:22:24 SQL> -- score1.sql
20:22:24 SQL> --
20:22:24 SQL> 
20:22:24 SQL> -- I use this script to send 5 params to score.sql
20:22:24 SQL> -- which does the heavy lifting of creating an SVM model.
20:22:24 SQL> -- Then at the very end of this script I use the model
20:22:24 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:22:24 SQL> 
20:22:24 SQL> -- I call this script from 2 other scripts:
20:22:24 SQL> -- score1_5min.sql
20:22:24 SQL> -- score1_5min_gattn.sql
20:22:24 SQL> 
20:22:24 SQL> -- The 1st param is the name of the target attribute.
20:22:24 SQL> -- I like to call my target attributes either gatt or gattn.
20:22:24 SQL> 
20:22:24 SQL> -- Demo:
20:22:24 SQL> -- @score1.sql 'gatt'
20:22:24 SQL> -- @score1.sql 'gattn'
20:22:24 SQL> 
20:22:24 SQL> -- Now, I fill up svmc_apply_prep.
20:22:24 SQL> -- I use same model_name used in score.sql
20:22:24 SQL> DEFINE model_name = 'svmfx101'
20:22:24 SQL> DEFINE bldtable	= 'bme'
20:22:24 SQL> DEFINE scoretable = 'sme'
20:22:24 SQL> DEFINE case_id	= 'prdate'
20:22:24 SQL> -- Demo:
20:22:24 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:22:24 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:22:24 SQL> --
20:22:24 SQL> -- score.sql
20:22:24 SQL> --
20:22:24 SQL> 
20:22:24 SQL> -- usage: score.sql
20:22:24 SQL> 
20:22:24 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:22:24 SQL> 
20:22:24 SQL> -- DEFINE target	   = 'gatt'
20:22:24 SQL> -- DEFINE model_name = 'svmfx101'
20:22:24 SQL> -- DEFINE bldtable   = 'bme'
20:22:24 SQL> -- DEFINE scoretable = 'sme'
20:22:24 SQL> -- DEFINE case_id    = 'prdate'
20:22:24 SQL> 
20:22:24 SQL> DEFINE target	= '&1'
20:22:24 SQL> DEFINE model_name = '&2'
20:22:24 SQL> DEFINE bldtable	= '&3'
20:22:24 SQL> DEFINE scoretable = '&4'
20:22:24 SQL> DEFINE case_id	= '&5'
20:22:24 SQL> 
20:22:24 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:22:24 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:22:24 SQL> 
20:22:24 SQL> -- Builds an SVM model using pl/sql.
20:22:24 SQL> 
20:22:24 SQL> -----------------------------------------------------------------------
20:22:24 SQL> --			    BUILD THE MODEL
20:22:24 SQL> -----------------------------------------------------------------------
20:22:24 SQL> 
20:22:24 SQL> -- Cleanup old build data preparation objects for repeat runs
20:22:24 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.00
20:22:24 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:22:24 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:22:24 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.01
20:22:24 SQL> 
20:22:24 SQL> 
20:22:24 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:22:24 SQL> --
20:22:24 SQL> -- DROP	TABLE svmc_settings ;
20:22:24 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:22:24 SQL> -- DELETE svmc_settings;
20:22:24 SQL> 
20:22:24 SQL> -- The default classification algorithm is Naive Bayes. So override
20:22:24 SQL> -- this choice to SVM using a settings table.
20:22:24 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:22:24 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:22:24 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:22:24 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:22:24 SQL> -- models.
20:22:24 SQL> --
20:22:24 SQL> 
20:22:24 SQL> -- Do this once and then comment it out.
20:22:24 SQL> -- That makes script go faster.
20:22:24 SQL> -- BEGIN
20:22:24 SQL> -- -- Populate settings table
20:22:24 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:22:24 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:22:24 SQL> --
20:22:24 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:22:24 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:22:24 SQL> --
20:22:24 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:22:24 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:22:24 SQL> --   COMMIT;
20:22:24 SQL> -- END;
20:22:24 SQL> -- /
20:22:24 SQL> 
20:22:24 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:22:24 SQL> 
20:22:24 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:22:24   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:22:24   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:22:24 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:22:24   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:22:24   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:22:24 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:22:24   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:22:24   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.16
20:22:24 SQL> 
20:22:24 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:22:24   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:22:24   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.23
20:22:24 SQL> 
20:22:24 SQL> --------------------------------
20:22:24 SQL> -- PREPARE BUILD (TRAINING) DATA
20:22:24 SQL> --
20:22:24 SQL> 
20:22:24 SQL> -- 1. Missing Value treatment for all Predictors and
20:22:24 SQL> -- 2. Outlier Treatment and
20:22:24 SQL> -- 3. Normalization are performed below.
20:22:24 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:22:24 SQL> --    normalized here.
20:22:24 SQL> 
20:22:24 SQL> BEGIN
20:22:24   2  	-- Perform missing value treatment for all predictors
20:22:24   3  	-- create miss tables
20:22:24   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:22:24   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:22:24   6  
20:22:24   7  	-- populate miss tables
20:22:24   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:22:24   9  	  miss_table_name => 'svmc_miss_num',
20:22:24  10  	  data_table_name => '&bldtable',
20:22:24  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:22:24  12  
20:22:24  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:22:24  14  	  miss_table_name => 'svmc_miss_cat',
20:22:24  15  	  data_table_name => '&bldtable',
20:22:24  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:22:24  17  
20:22:24  18  	-- xform input data to replace missing values
20:22:24  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:22:24  20  	  miss_table_name => 'svmc_miss_num',
20:22:24  21  	  data_table_name => '&bldtable',
20:22:24  22  	  xform_view_name => 'xformed_build_miss_num');
20:22:24  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:22:24  24  	  miss_table_name => 'svmc_miss_cat',
20:22:24  25  	  data_table_name => '&bldtable',
20:22:24  26  	  xform_view_name => 'xformed_build_miss_cat');
20:22:24  27  
20:22:24  28  	-- Perform outlier treatment.
20:22:24  29  	-- create clip table
20:22:24  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:22:24  31  
20:22:24  32  	-- populate clip table
20:22:24  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:22:24  34  	  clip_table_name => 'svmc_clip',
20:22:24  35  	  data_table_name => '&bldtable',
20:22:24  36  	  tail_frac	  => 0.025,
20:22:24  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:22:24  38  
20:22:24  39  	-- xform input data to winsorized data
20:22:24  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:22:24  41  	  clip_table_name => 'svmc_clip',
20:22:24  42  	  data_table_name => '&bldtable',
20:22:24  43  	  xform_view_name => 'svmc_winsor');
20:22:24  44  
20:22:24  45  	-- create normalization table
20:22:24  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:22:24  47  
20:22:24  48  	-- populate normalization table based on winsorized data
20:22:24  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:22:24  50  	  norm_table_name => 'svmc_norm',
20:22:24  51  	  data_table_name => 'svmc_winsor',
20:22:24  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:22:24  53  
20:22:24  54  	-- normalize the original data
20:22:24  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:22:24  56  	  norm_table_name => 'svmc_norm',
20:22:24  57  	  data_table_name => '&bldtable',
20:22:24  58  	  xform_view_name => 'svmc_build_prep');
20:22:24  59  END;
20:22:24  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.22
20:22:26 SQL> 
20:22:26 SQL> ---------------------
20:22:26 SQL> -- CREATE A NEW MODEL
20:22:26 SQL> --
20:22:26 SQL> -- Cleanup old model with the same name for repeat runs
20:22:26 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:22:26   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:22:26   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.01
20:22:27 SQL> 
20:22:27 SQL> -- Build a new SVM Model
20:22:27 SQL> BEGIN
20:22:27   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:22:27   3  	  model_name	      => '&model_name',
20:22:27   4  	  mining_function     => dbms_data_mining.classification,
20:22:27   5  	  data_table_name     => 'svmc_build_prep',
20:22:27   6  	  case_id_column_name => '&case_id',
20:22:27   7  	  target_column_name  => '&target',
20:22:27   8  	  settings_table_name => 'svmc_settings');
20:22:27   9  END;
20:22:27  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:02.79
20:22:29 SQL> 
20:22:29 SQL> -----------------------------------------------------------------------
20:22:29 SQL> --			       APPLY/score THE MODEL
20:22:29 SQL> -----------------------------------------------------------------------
20:22:29 SQL> 
20:22:29 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:22:29 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:22:29   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:22:29   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:22:29 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:22:29   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:22:29   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:22:29 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:22:29   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:22:29   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:22:29 SQL> -----------------------
20:22:29 SQL> -- PREPARE SCORING DATA
20:22:29 SQL> --
20:22:29 SQL> -- If the data for model creation has been prepared, then the data
20:22:29 SQL> -- to be scored using the model must be prepared in the same manner
20:22:29 SQL> -- in order to obtain meaningful results.
20:22:29 SQL> --
20:22:29 SQL> -- 1. Missing Value treatment for all Predictors and
20:22:29 SQL> -- 2. Normalization
20:22:29 SQL> -- No outlier treatment will be performed during test and apply. The
20:22:29 SQL> -- normalization step is sufficient, since the normalization parameters
20:22:29 SQL> -- already capture the effects of outlier treatment done with build data.
20:22:29 SQL> --
20:22:29 SQL> BEGIN
20:22:29   2  	-- Xform Test data to replace missing values
20:22:29   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:22:29   4  	  miss_table_name => 'svmc_miss_num',
20:22:29   5  	  data_table_name => '&scoretable',
20:22:29   6  	  xform_view_name => 'xformed_apply_miss_num');
20:22:29   7  
20:22:29   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:22:29   9  	  miss_table_name => 'svmc_miss_cat',
20:22:29  10  	  data_table_name => '&scoretable',
20:22:29  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:22:29  12  
20:22:29  13  	-- Normalize the data to be scored
20:22:29  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:22:29  15  	  norm_table_name => 'svmc_norm',
20:22:29  16  	  data_table_name => '&scoretable',
20:22:29  17  	  xform_view_name => 'svmc_apply_prep');
20:22:29  18  END;
20:22:29  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.18
20:22:30 SQL> 
20:22:30 SQL> -- Maybe I already collected a score for this prdate.
20:22:30 SQL> -- DELETE it if I did:
20:22:30 SQL> DELETE svm62scores
20:22:30   2  WHERE score > 0
20:22:30   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:22:30   4  -- I need to supply the target attribute name:
20:22:30   5  AND targ = '&1'
20:22:30   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gatt'

0 rows deleted.

Elapsed: 00:00:00.01
20:22:30 SQL> 
20:22:30 SQL> -- We do a drumroll here:
20:22:30 SQL> 
20:22:30 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:22:30   2  SELECT
20:22:30   3  prdate
20:22:30   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:22:30   5  ,sysdate
20:22:30   6  ,SUBSTR(prdate,1,7)pair
20:22:30   7  ,SUBSTR(prdate,-19)ydate
20:22:30   8  ,'&1'
20:22:30   9  FROM svmc_apply_prep
20:22:30  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gatt'

1 row created.

Elapsed: 00:00:00.04
20:22:30 SQL> @score1_5min.sql	      2010-10-18 09:35:01 aud_usd
20:22:30 SQL> --
20:22:30 SQL> -- score1_5min.sql
20:22:30 SQL> --
20:22:30 SQL> 
20:22:30 SQL> -- Demo:
20:22:30 SQL> -- @score1_5min.sql 2010-12-31 20:45:01 aud_usd
20:22:30 SQL> 
20:22:30 SQL> CREATE OR REPLACE VIEW sme AS
20:22:30   2  SELECT
20:22:30   3  prdate
20:22:30   4  ,NULL gatt
20:22:30   5  ,g00
20:22:30   6  ,g01
20:22:30   7  ,g02
20:22:30   8  ,g03
20:22:30   9  ,g04
20:22:30  10  ,g05
20:22:30  11  ,g06
20:22:30  12  ,g07
20:22:30  13  ,g08
20:22:30  14  ,g09
20:22:30  15  ,g10
20:22:30  16  ,g11
20:22:30  17  ,g12
20:22:30  18  ,g13
20:22:30  19  ,g14
20:22:30  20  ,g15
20:22:30  21  ,g16
20:22:30  22  ,g17
20:22:30  23  ,g18
20:22:30  24  ,g19
20:22:30  25  ,g20
20:22:30  26  ,g21
20:22:30  27  ,g22
20:22:30  28  ,g23
20:22:30  29  ,g24
20:22:30  30  ,g25
20:22:30  31  ,g26
20:22:30  32  ,g27
20:22:30  33  ,g28
20:22:30  34  ,g29
20:22:30  35  ,g30
20:22:30  36  ,g31
20:22:30  37  ,g32
20:22:30  38  ,g33
20:22:30  39  ,g34
20:22:30  40  ,g35
20:22:30  41  ,g36
20:22:30  42  ,g37
20:22:30  43  ,g38
20:22:30  44  ,g39
20:22:30  45  ,g40
20:22:30  46  ,g41
20:22:30  47  FROM modsrc
20:22:30  48  WHERE ydate = '&1'||' '||'&2'
20:22:30  49  AND pair = '&3'
20:22:30  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-10-18'||' '||'09:35:01'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:22:30 SQL> 
20:22:30 SQL> -- rpt
20:22:30 SQL> -- We should see just 1 row:
20:22:30 SQL> 
20:22:30 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.02
20:22:30 SQL> 
20:22:30 SQL> -- Build the model:
20:22:30 SQL> CREATE OR REPLACE VIEW bme AS
20:22:30   2  SELECT
20:22:30   3  prdate
20:22:30   4  ,gatt
20:22:30   5  ,g00
20:22:30   6  ,g01
20:22:30   7  ,g02
20:22:30   8  ,g03
20:22:30   9  ,g04
20:22:30  10  ,g05
20:22:30  11  ,g06
20:22:30  12  ,g07
20:22:30  13  ,g08
20:22:30  14  ,g09
20:22:30  15  ,g10
20:22:30  16  ,g11
20:22:30  17  ,g12
20:22:30  18  ,g13
20:22:30  19  ,g14
20:22:30  20  ,g15
20:22:30  21  ,g16
20:22:30  22  ,g17
20:22:30  23  ,g18
20:22:30  24  ,g19
20:22:30  25  ,g20
20:22:30  26  ,g21
20:22:30  27  ,g22
20:22:30  28  ,g23
20:22:30  29  ,g24
20:22:30  30  ,g25
20:22:30  31  ,g26
20:22:30  32  ,g27
20:22:30  33  ,g28
20:22:30  34  ,g29
20:22:30  35  ,g30
20:22:30  36  ,g31
20:22:30  37  ,g32
20:22:30  38  ,g33
20:22:30  39  ,g34
20:22:30  40  ,g35
20:22:30  41  ,g36
20:22:30  42  ,g37
20:22:30  43  ,g38
20:22:30  44  ,g39
20:22:30  45  ,g40
20:22:30  46  ,g41
20:22:30  47  FROM modsrc
20:22:30  48  WHERE gatt IN('nup','up')
20:22:30  49  -- Use only rows which are older than 1 day:
20:22:30  50  AND 1+ydate < '&1'||' '||'&2'
20:22:30  51  AND pair = '&3'
20:22:30  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-10-18'||' '||'09:35:01'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:22:30 SQL> 
20:22:30 SQL> -- rpt
20:22:30 SQL> 
20:22:30 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt;

GAT COUNT(PRDATE)
--- -------------
nup	     1334
up	     1002

Elapsed: 00:00:00.03
20:22:30 SQL> 
20:22:30 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-10-15 21:50:01

Elapsed: 00:00:00.01
20:22:30 SQL> 
20:22:30 SQL> -- Now build model from bme and score sme
20:22:30 SQL> @score1.sql gatt
20:22:30 SQL> --
20:22:30 SQL> -- score1.sql
20:22:30 SQL> --
20:22:30 SQL> 
20:22:30 SQL> -- I use this script to send 5 params to score.sql
20:22:30 SQL> -- which does the heavy lifting of creating an SVM model.
20:22:30 SQL> -- Then at the very end of this script I use the model
20:22:30 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:22:30 SQL> 
20:22:30 SQL> -- I call this script from 2 other scripts:
20:22:30 SQL> -- score1_5min.sql
20:22:30 SQL> -- score1_5min_gattn.sql
20:22:30 SQL> 
20:22:30 SQL> -- The 1st param is the name of the target attribute.
20:22:30 SQL> -- I like to call my target attributes either gatt or gattn.
20:22:30 SQL> 
20:22:30 SQL> -- Demo:
20:22:30 SQL> -- @score1.sql 'gatt'
20:22:30 SQL> -- @score1.sql 'gattn'
20:22:30 SQL> 
20:22:30 SQL> -- Now, I fill up svmc_apply_prep.
20:22:30 SQL> -- I use same model_name used in score.sql
20:22:30 SQL> DEFINE model_name = 'svmfx101'
20:22:30 SQL> DEFINE bldtable	= 'bme'
20:22:30 SQL> DEFINE scoretable = 'sme'
20:22:30 SQL> DEFINE case_id	= 'prdate'
20:22:30 SQL> -- Demo:
20:22:30 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:22:30 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:22:30 SQL> --
20:22:30 SQL> -- score.sql
20:22:30 SQL> --
20:22:30 SQL> 
20:22:30 SQL> -- usage: score.sql
20:22:30 SQL> 
20:22:30 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:22:30 SQL> 
20:22:30 SQL> -- DEFINE target	   = 'gatt'
20:22:30 SQL> -- DEFINE model_name = 'svmfx101'
20:22:30 SQL> -- DEFINE bldtable   = 'bme'
20:22:30 SQL> -- DEFINE scoretable = 'sme'
20:22:30 SQL> -- DEFINE case_id    = 'prdate'
20:22:30 SQL> 
20:22:30 SQL> DEFINE target	= '&1'
20:22:30 SQL> DEFINE model_name = '&2'
20:22:30 SQL> DEFINE bldtable	= '&3'
20:22:30 SQL> DEFINE scoretable = '&4'
20:22:30 SQL> DEFINE case_id	= '&5'
20:22:30 SQL> 
20:22:30 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:22:30 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:22:30 SQL> 
20:22:30 SQL> -- Builds an SVM model using pl/sql.
20:22:30 SQL> 
20:22:30 SQL> -----------------------------------------------------------------------
20:22:30 SQL> --			    BUILD THE MODEL
20:22:30 SQL> -----------------------------------------------------------------------
20:22:30 SQL> 
20:22:30 SQL> -- Cleanup old build data preparation objects for repeat runs
20:22:30 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.01
20:22:30 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:22:30 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:22:30 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.00
20:22:30 SQL> 
20:22:30 SQL> 
20:22:30 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:22:30 SQL> --
20:22:30 SQL> -- DROP	TABLE svmc_settings ;
20:22:30 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:22:30 SQL> -- DELETE svmc_settings;
20:22:30 SQL> 
20:22:30 SQL> -- The default classification algorithm is Naive Bayes. So override
20:22:30 SQL> -- this choice to SVM using a settings table.
20:22:30 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:22:30 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:22:30 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:22:30 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:22:30 SQL> -- models.
20:22:30 SQL> --
20:22:30 SQL> 
20:22:30 SQL> -- Do this once and then comment it out.
20:22:30 SQL> -- That makes script go faster.
20:22:30 SQL> -- BEGIN
20:22:30 SQL> -- -- Populate settings table
20:22:30 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:22:30 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:22:30 SQL> --
20:22:30 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:22:30 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:22:30 SQL> --
20:22:30 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:22:30 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:22:30 SQL> --   COMMIT;
20:22:30 SQL> -- END;
20:22:30 SQL> -- /
20:22:30 SQL> 
20:22:30 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:22:30 SQL> 
20:22:30 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:22:30   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:22:30   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:22:30 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:22:30   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:22:30   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:22:30 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:22:30   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:22:30   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:22:30 SQL> 
20:22:30 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:22:30   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:22:30   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:22:30 SQL> 
20:22:30 SQL> --------------------------------
20:22:30 SQL> -- PREPARE BUILD (TRAINING) DATA
20:22:30 SQL> --
20:22:30 SQL> 
20:22:30 SQL> -- 1. Missing Value treatment for all Predictors and
20:22:30 SQL> -- 2. Outlier Treatment and
20:22:30 SQL> -- 3. Normalization are performed below.
20:22:30 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:22:30 SQL> --    normalized here.
20:22:30 SQL> 
20:22:30 SQL> BEGIN
20:22:30   2  	-- Perform missing value treatment for all predictors
20:22:30   3  	-- create miss tables
20:22:30   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:22:30   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:22:30   6  
20:22:30   7  	-- populate miss tables
20:22:30   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:22:30   9  	  miss_table_name => 'svmc_miss_num',
20:22:30  10  	  data_table_name => '&bldtable',
20:22:30  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:22:30  12  
20:22:30  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:22:30  14  	  miss_table_name => 'svmc_miss_cat',
20:22:30  15  	  data_table_name => '&bldtable',
20:22:30  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:22:30  17  
20:22:30  18  	-- xform input data to replace missing values
20:22:30  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:22:30  20  	  miss_table_name => 'svmc_miss_num',
20:22:30  21  	  data_table_name => '&bldtable',
20:22:30  22  	  xform_view_name => 'xformed_build_miss_num');
20:22:30  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:22:30  24  	  miss_table_name => 'svmc_miss_cat',
20:22:30  25  	  data_table_name => '&bldtable',
20:22:30  26  	  xform_view_name => 'xformed_build_miss_cat');
20:22:30  27  
20:22:30  28  	-- Perform outlier treatment.
20:22:30  29  	-- create clip table
20:22:30  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:22:30  31  
20:22:30  32  	-- populate clip table
20:22:30  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:22:30  34  	  clip_table_name => 'svmc_clip',
20:22:30  35  	  data_table_name => '&bldtable',
20:22:30  36  	  tail_frac	  => 0.025,
20:22:30  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:22:30  38  
20:22:30  39  	-- xform input data to winsorized data
20:22:30  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:22:30  41  	  clip_table_name => 'svmc_clip',
20:22:30  42  	  data_table_name => '&bldtable',
20:22:30  43  	  xform_view_name => 'svmc_winsor');
20:22:30  44  
20:22:30  45  	-- create normalization table
20:22:30  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:22:30  47  
20:22:30  48  	-- populate normalization table based on winsorized data
20:22:30  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:22:30  50  	  norm_table_name => 'svmc_norm',
20:22:30  51  	  data_table_name => 'svmc_winsor',
20:22:30  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:22:30  53  
20:22:30  54  	-- normalize the original data
20:22:30  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:22:30  56  	  norm_table_name => 'svmc_norm',
20:22:30  57  	  data_table_name => '&bldtable',
20:22:30  58  	  xform_view_name => 'svmc_build_prep');
20:22:30  59  END;
20:22:30  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.10
20:22:31 SQL> 
20:22:31 SQL> ---------------------
20:22:31 SQL> -- CREATE A NEW MODEL
20:22:31 SQL> --
20:22:31 SQL> -- Cleanup old model with the same name for repeat runs
20:22:31 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:22:31   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:22:31   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.87
20:22:32 SQL> 
20:22:32 SQL> -- Build a new SVM Model
20:22:32 SQL> BEGIN
20:22:32   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:22:32   3  	  model_name	      => '&model_name',
20:22:32   4  	  mining_function     => dbms_data_mining.classification,
20:22:32   5  	  data_table_name     => 'svmc_build_prep',
20:22:32   6  	  case_id_column_name => '&case_id',
20:22:32   7  	  target_column_name  => '&target',
20:22:32   8  	  settings_table_name => 'svmc_settings');
20:22:32   9  END;
20:22:32  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:02.81
20:22:35 SQL> 
20:22:35 SQL> -----------------------------------------------------------------------
20:22:35 SQL> --			       APPLY/score THE MODEL
20:22:35 SQL> -----------------------------------------------------------------------
20:22:35 SQL> 
20:22:35 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:22:35 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:22:35   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:22:35   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:22:35 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:22:35   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:22:35   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:22:35 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:22:35   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:22:35   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:22:35 SQL> -----------------------
20:22:35 SQL> -- PREPARE SCORING DATA
20:22:35 SQL> --
20:22:35 SQL> -- If the data for model creation has been prepared, then the data
20:22:35 SQL> -- to be scored using the model must be prepared in the same manner
20:22:35 SQL> -- in order to obtain meaningful results.
20:22:35 SQL> --
20:22:35 SQL> -- 1. Missing Value treatment for all Predictors and
20:22:35 SQL> -- 2. Normalization
20:22:35 SQL> -- No outlier treatment will be performed during test and apply. The
20:22:35 SQL> -- normalization step is sufficient, since the normalization parameters
20:22:35 SQL> -- already capture the effects of outlier treatment done with build data.
20:22:35 SQL> --
20:22:35 SQL> BEGIN
20:22:35   2  	-- Xform Test data to replace missing values
20:22:35   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:22:35   4  	  miss_table_name => 'svmc_miss_num',
20:22:35   5  	  data_table_name => '&scoretable',
20:22:35   6  	  xform_view_name => 'xformed_apply_miss_num');
20:22:35   7  
20:22:35   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:22:35   9  	  miss_table_name => 'svmc_miss_cat',
20:22:35  10  	  data_table_name => '&scoretable',
20:22:35  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:22:35  12  
20:22:35  13  	-- Normalize the data to be scored
20:22:35  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:22:35  15  	  norm_table_name => 'svmc_norm',
20:22:35  16  	  data_table_name => '&scoretable',
20:22:35  17  	  xform_view_name => 'svmc_apply_prep');
20:22:35  18  END;
20:22:35  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.17
20:22:35 SQL> 
20:22:35 SQL> -- Maybe I already collected a score for this prdate.
20:22:35 SQL> -- DELETE it if I did:
20:22:35 SQL> DELETE svm62scores
20:22:35   2  WHERE score > 0
20:22:35   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:22:35   4  -- I need to supply the target attribute name:
20:22:35   5  AND targ = '&1'
20:22:35   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gatt'

0 rows deleted.

Elapsed: 00:00:00.01
20:22:35 SQL> 
20:22:35 SQL> -- We do a drumroll here:
20:22:35 SQL> 
20:22:35 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:22:35   2  SELECT
20:22:35   3  prdate
20:22:35   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:22:35   5  ,sysdate
20:22:35   6  ,SUBSTR(prdate,1,7)pair
20:22:35   7  ,SUBSTR(prdate,-19)ydate
20:22:35   8  ,'&1'
20:22:35   9  FROM svmc_apply_prep
20:22:35  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gatt'

1 row created.

Elapsed: 00:00:00.05
20:22:35 SQL> @score1_5min.sql	      2010-11-22 00:35:01 aud_usd
20:22:35 SQL> --
20:22:35 SQL> -- score1_5min.sql
20:22:35 SQL> --
20:22:35 SQL> 
20:22:35 SQL> -- Demo:
20:22:35 SQL> -- @score1_5min.sql 2010-12-31 20:45:01 aud_usd
20:22:35 SQL> 
20:22:35 SQL> CREATE OR REPLACE VIEW sme AS
20:22:35   2  SELECT
20:22:35   3  prdate
20:22:35   4  ,NULL gatt
20:22:35   5  ,g00
20:22:35   6  ,g01
20:22:35   7  ,g02
20:22:35   8  ,g03
20:22:35   9  ,g04
20:22:35  10  ,g05
20:22:35  11  ,g06
20:22:35  12  ,g07
20:22:35  13  ,g08
20:22:35  14  ,g09
20:22:35  15  ,g10
20:22:35  16  ,g11
20:22:35  17  ,g12
20:22:35  18  ,g13
20:22:35  19  ,g14
20:22:35  20  ,g15
20:22:35  21  ,g16
20:22:35  22  ,g17
20:22:35  23  ,g18
20:22:35  24  ,g19
20:22:35  25  ,g20
20:22:35  26  ,g21
20:22:35  27  ,g22
20:22:35  28  ,g23
20:22:35  29  ,g24
20:22:35  30  ,g25
20:22:35  31  ,g26
20:22:35  32  ,g27
20:22:35  33  ,g28
20:22:35  34  ,g29
20:22:35  35  ,g30
20:22:35  36  ,g31
20:22:35  37  ,g32
20:22:35  38  ,g33
20:22:35  39  ,g34
20:22:35  40  ,g35
20:22:35  41  ,g36
20:22:35  42  ,g37
20:22:35  43  ,g38
20:22:35  44  ,g39
20:22:35  45  ,g40
20:22:35  46  ,g41
20:22:35  47  FROM modsrc
20:22:35  48  WHERE ydate = '&1'||' '||'&2'
20:22:35  49  AND pair = '&3'
20:22:35  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-11-22'||' '||'00:35:01'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.03
20:22:35 SQL> 
20:22:35 SQL> -- rpt
20:22:35 SQL> -- We should see just 1 row:
20:22:35 SQL> 
20:22:35 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.01
20:22:35 SQL> 
20:22:35 SQL> -- Build the model:
20:22:35 SQL> CREATE OR REPLACE VIEW bme AS
20:22:35   2  SELECT
20:22:35   3  prdate
20:22:35   4  ,gatt
20:22:35   5  ,g00
20:22:35   6  ,g01
20:22:35   7  ,g02
20:22:35   8  ,g03
20:22:35   9  ,g04
20:22:35  10  ,g05
20:22:35  11  ,g06
20:22:35  12  ,g07
20:22:35  13  ,g08
20:22:35  14  ,g09
20:22:35  15  ,g10
20:22:35  16  ,g11
20:22:35  17  ,g12
20:22:35  18  ,g13
20:22:35  19  ,g14
20:22:35  20  ,g15
20:22:35  21  ,g16
20:22:35  22  ,g17
20:22:35  23  ,g18
20:22:35  24  ,g19
20:22:35  25  ,g20
20:22:35  26  ,g21
20:22:35  27  ,g22
20:22:35  28  ,g23
20:22:35  29  ,g24
20:22:35  30  ,g25
20:22:35  31  ,g26
20:22:35  32  ,g27
20:22:35  33  ,g28
20:22:35  34  ,g29
20:22:35  35  ,g30
20:22:35  36  ,g31
20:22:35  37  ,g32
20:22:35  38  ,g33
20:22:35  39  ,g34
20:22:35  40  ,g35
20:22:35  41  ,g36
20:22:35  42  ,g37
20:22:35  43  ,g38
20:22:35  44  ,g39
20:22:35  45  ,g40
20:22:35  46  ,g41
20:22:35  47  FROM modsrc
20:22:35  48  WHERE gatt IN('nup','up')
20:22:35  49  -- Use only rows which are older than 1 day:
20:22:35  50  AND 1+ydate < '&1'||' '||'&2'
20:22:35  51  AND pair = '&3'
20:22:35  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-11-22'||' '||'00:35:01'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:22:35 SQL> 
20:22:35 SQL> -- rpt
20:22:35 SQL> 
20:22:35 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt;

GAT COUNT(PRDATE)
--- -------------
nup	     5806
up	     3780

Elapsed: 00:00:00.03
20:22:35 SQL> 
20:22:35 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-11-19 21:50:01

Elapsed: 00:00:00.01
20:22:35 SQL> 
20:22:35 SQL> -- Now build model from bme and score sme
20:22:35 SQL> @score1.sql gatt
20:22:35 SQL> --
20:22:35 SQL> -- score1.sql
20:22:35 SQL> --
20:22:35 SQL> 
20:22:35 SQL> -- I use this script to send 5 params to score.sql
20:22:35 SQL> -- which does the heavy lifting of creating an SVM model.
20:22:35 SQL> -- Then at the very end of this script I use the model
20:22:35 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:22:35 SQL> 
20:22:35 SQL> -- I call this script from 2 other scripts:
20:22:35 SQL> -- score1_5min.sql
20:22:35 SQL> -- score1_5min_gattn.sql
20:22:35 SQL> 
20:22:35 SQL> -- The 1st param is the name of the target attribute.
20:22:35 SQL> -- I like to call my target attributes either gatt or gattn.
20:22:35 SQL> 
20:22:35 SQL> -- Demo:
20:22:35 SQL> -- @score1.sql 'gatt'
20:22:35 SQL> -- @score1.sql 'gattn'
20:22:35 SQL> 
20:22:35 SQL> -- Now, I fill up svmc_apply_prep.
20:22:35 SQL> -- I use same model_name used in score.sql
20:22:35 SQL> DEFINE model_name = 'svmfx101'
20:22:35 SQL> DEFINE bldtable	= 'bme'
20:22:35 SQL> DEFINE scoretable = 'sme'
20:22:35 SQL> DEFINE case_id	= 'prdate'
20:22:35 SQL> -- Demo:
20:22:35 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:22:35 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:22:35 SQL> --
20:22:35 SQL> -- score.sql
20:22:35 SQL> --
20:22:35 SQL> 
20:22:35 SQL> -- usage: score.sql
20:22:35 SQL> 
20:22:35 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:22:35 SQL> 
20:22:35 SQL> -- DEFINE target	   = 'gatt'
20:22:35 SQL> -- DEFINE model_name = 'svmfx101'
20:22:35 SQL> -- DEFINE bldtable   = 'bme'
20:22:35 SQL> -- DEFINE scoretable = 'sme'
20:22:35 SQL> -- DEFINE case_id    = 'prdate'
20:22:35 SQL> 
20:22:35 SQL> DEFINE target	= '&1'
20:22:35 SQL> DEFINE model_name = '&2'
20:22:35 SQL> DEFINE bldtable	= '&3'
20:22:35 SQL> DEFINE scoretable = '&4'
20:22:35 SQL> DEFINE case_id	= '&5'
20:22:35 SQL> 
20:22:35 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:22:35 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:22:35 SQL> 
20:22:35 SQL> -- Builds an SVM model using pl/sql.
20:22:35 SQL> 
20:22:35 SQL> -----------------------------------------------------------------------
20:22:35 SQL> --			    BUILD THE MODEL
20:22:35 SQL> -----------------------------------------------------------------------
20:22:35 SQL> 
20:22:35 SQL> -- Cleanup old build data preparation objects for repeat runs
20:22:35 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.00
20:22:35 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:22:35 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:22:35 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.01
20:22:35 SQL> 
20:22:35 SQL> 
20:22:35 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:22:35 SQL> --
20:22:35 SQL> -- DROP	TABLE svmc_settings ;
20:22:35 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:22:35 SQL> -- DELETE svmc_settings;
20:22:35 SQL> 
20:22:35 SQL> -- The default classification algorithm is Naive Bayes. So override
20:22:35 SQL> -- this choice to SVM using a settings table.
20:22:35 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:22:35 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:22:35 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:22:35 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:22:35 SQL> -- models.
20:22:35 SQL> --
20:22:35 SQL> 
20:22:35 SQL> -- Do this once and then comment it out.
20:22:35 SQL> -- That makes script go faster.
20:22:35 SQL> -- BEGIN
20:22:35 SQL> -- -- Populate settings table
20:22:35 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:22:35 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:22:35 SQL> --
20:22:35 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:22:35 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:22:35 SQL> --
20:22:35 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:22:35 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:22:35 SQL> --   COMMIT;
20:22:35 SQL> -- END;
20:22:35 SQL> -- /
20:22:35 SQL> 
20:22:35 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:22:35 SQL> 
20:22:35 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:22:35   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:22:35   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
20:22:35 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:22:35   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:22:35   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:22:35 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:22:35   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:22:35   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:22:35 SQL> 
20:22:35 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:22:35   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:22:35   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:22:35 SQL> 
20:22:35 SQL> --------------------------------
20:22:35 SQL> -- PREPARE BUILD (TRAINING) DATA
20:22:35 SQL> --
20:22:35 SQL> 
20:22:35 SQL> -- 1. Missing Value treatment for all Predictors and
20:22:35 SQL> -- 2. Outlier Treatment and
20:22:35 SQL> -- 3. Normalization are performed below.
20:22:35 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:22:35 SQL> --    normalized here.
20:22:35 SQL> 
20:22:35 SQL> BEGIN
20:22:35   2  	-- Perform missing value treatment for all predictors
20:22:35   3  	-- create miss tables
20:22:35   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:22:35   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:22:35   6  
20:22:35   7  	-- populate miss tables
20:22:35   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:22:35   9  	  miss_table_name => 'svmc_miss_num',
20:22:35  10  	  data_table_name => '&bldtable',
20:22:35  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:22:35  12  
20:22:35  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:22:35  14  	  miss_table_name => 'svmc_miss_cat',
20:22:35  15  	  data_table_name => '&bldtable',
20:22:35  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:22:35  17  
20:22:35  18  	-- xform input data to replace missing values
20:22:35  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:22:35  20  	  miss_table_name => 'svmc_miss_num',
20:22:35  21  	  data_table_name => '&bldtable',
20:22:35  22  	  xform_view_name => 'xformed_build_miss_num');
20:22:35  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:22:35  24  	  miss_table_name => 'svmc_miss_cat',
20:22:35  25  	  data_table_name => '&bldtable',
20:22:35  26  	  xform_view_name => 'xformed_build_miss_cat');
20:22:35  27  
20:22:35  28  	-- Perform outlier treatment.
20:22:35  29  	-- create clip table
20:22:35  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:22:35  31  
20:22:35  32  	-- populate clip table
20:22:35  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:22:35  34  	  clip_table_name => 'svmc_clip',
20:22:35  35  	  data_table_name => '&bldtable',
20:22:35  36  	  tail_frac	  => 0.025,
20:22:35  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:22:35  38  
20:22:35  39  	-- xform input data to winsorized data
20:22:35  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:22:35  41  	  clip_table_name => 'svmc_clip',
20:22:35  42  	  data_table_name => '&bldtable',
20:22:35  43  	  xform_view_name => 'svmc_winsor');
20:22:35  44  
20:22:35  45  	-- create normalization table
20:22:35  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:22:35  47  
20:22:35  48  	-- populate normalization table based on winsorized data
20:22:35  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:22:35  50  	  norm_table_name => 'svmc_norm',
20:22:35  51  	  data_table_name => 'svmc_winsor',
20:22:35  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:22:35  53  
20:22:35  54  	-- normalize the original data
20:22:35  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:22:35  56  	  norm_table_name => 'svmc_norm',
20:22:35  57  	  data_table_name => '&bldtable',
20:22:35  58  	  xform_view_name => 'svmc_build_prep');
20:22:35  59  END;
20:22:35  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.62
20:22:37 SQL> 
20:22:37 SQL> ---------------------
20:22:37 SQL> -- CREATE A NEW MODEL
20:22:37 SQL> --
20:22:37 SQL> -- Cleanup old model with the same name for repeat runs
20:22:37 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:22:37   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:22:37   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.00
20:22:38 SQL> 
20:22:38 SQL> -- Build a new SVM Model
20:22:38 SQL> BEGIN
20:22:38   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:22:38   3  	  model_name	      => '&model_name',
20:22:38   4  	  mining_function     => dbms_data_mining.classification,
20:22:38   5  	  data_table_name     => 'svmc_build_prep',
20:22:38   6  	  case_id_column_name => '&case_id',
20:22:38   7  	  target_column_name  => '&target',
20:22:38   8  	  settings_table_name => 'svmc_settings');
20:22:38   9  END;
20:22:38  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:03.52
20:22:42 SQL> 
20:22:42 SQL> -----------------------------------------------------------------------
20:22:42 SQL> --			       APPLY/score THE MODEL
20:22:42 SQL> -----------------------------------------------------------------------
20:22:42 SQL> 
20:22:42 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:22:42 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:22:42   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:22:42   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.08
20:22:42 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:22:42   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:22:42   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
20:22:42 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:22:42   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:22:42   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:22:42 SQL> -----------------------
20:22:42 SQL> -- PREPARE SCORING DATA
20:22:42 SQL> --
20:22:42 SQL> -- If the data for model creation has been prepared, then the data
20:22:42 SQL> -- to be scored using the model must be prepared in the same manner
20:22:42 SQL> -- in order to obtain meaningful results.
20:22:42 SQL> --
20:22:42 SQL> -- 1. Missing Value treatment for all Predictors and
20:22:42 SQL> -- 2. Normalization
20:22:42 SQL> -- No outlier treatment will be performed during test and apply. The
20:22:42 SQL> -- normalization step is sufficient, since the normalization parameters
20:22:42 SQL> -- already capture the effects of outlier treatment done with build data.
20:22:42 SQL> --
20:22:42 SQL> BEGIN
20:22:42   2  	-- Xform Test data to replace missing values
20:22:42   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:22:42   4  	  miss_table_name => 'svmc_miss_num',
20:22:42   5  	  data_table_name => '&scoretable',
20:22:42   6  	  xform_view_name => 'xformed_apply_miss_num');
20:22:42   7  
20:22:42   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:22:42   9  	  miss_table_name => 'svmc_miss_cat',
20:22:42  10  	  data_table_name => '&scoretable',
20:22:42  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:22:42  12  
20:22:42  13  	-- Normalize the data to be scored
20:22:42  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:22:42  15  	  norm_table_name => 'svmc_norm',
20:22:42  16  	  data_table_name => '&scoretable',
20:22:42  17  	  xform_view_name => 'svmc_apply_prep');
20:22:42  18  END;
20:22:42  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.17
20:22:42 SQL> 
20:22:42 SQL> -- Maybe I already collected a score for this prdate.
20:22:42 SQL> -- DELETE it if I did:
20:22:42 SQL> DELETE svm62scores
20:22:42   2  WHERE score > 0
20:22:42   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:22:42   4  -- I need to supply the target attribute name:
20:22:42   5  AND targ = '&1'
20:22:42   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gatt'

0 rows deleted.

Elapsed: 00:00:00.02
20:22:42 SQL> 
20:22:42 SQL> -- We do a drumroll here:
20:22:42 SQL> 
20:22:42 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:22:42   2  SELECT
20:22:42   3  prdate
20:22:42   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:22:42   5  ,sysdate
20:22:42   6  ,SUBSTR(prdate,1,7)pair
20:22:42   7  ,SUBSTR(prdate,-19)ydate
20:22:42   8  ,'&1'
20:22:42   9  FROM svmc_apply_prep
20:22:42  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gatt'

1 row created.

Elapsed: 00:00:00.05
20:22:42 SQL> @score1_5min.sql	      2010-11-04 14:35:01 aud_usd
20:22:42 SQL> --
20:22:42 SQL> -- score1_5min.sql
20:22:42 SQL> --
20:22:42 SQL> 
20:22:42 SQL> -- Demo:
20:22:42 SQL> -- @score1_5min.sql 2010-12-31 20:45:01 aud_usd
20:22:42 SQL> 
20:22:42 SQL> CREATE OR REPLACE VIEW sme AS
20:22:42   2  SELECT
20:22:42   3  prdate
20:22:42   4  ,NULL gatt
20:22:42   5  ,g00
20:22:42   6  ,g01
20:22:42   7  ,g02
20:22:42   8  ,g03
20:22:42   9  ,g04
20:22:42  10  ,g05
20:22:42  11  ,g06
20:22:42  12  ,g07
20:22:42  13  ,g08
20:22:42  14  ,g09
20:22:42  15  ,g10
20:22:42  16  ,g11
20:22:42  17  ,g12
20:22:42  18  ,g13
20:22:42  19  ,g14
20:22:42  20  ,g15
20:22:42  21  ,g16
20:22:42  22  ,g17
20:22:42  23  ,g18
20:22:42  24  ,g19
20:22:42  25  ,g20
20:22:42  26  ,g21
20:22:42  27  ,g22
20:22:42  28  ,g23
20:22:42  29  ,g24
20:22:42  30  ,g25
20:22:42  31  ,g26
20:22:42  32  ,g27
20:22:42  33  ,g28
20:22:42  34  ,g29
20:22:42  35  ,g30
20:22:42  36  ,g31
20:22:42  37  ,g32
20:22:42  38  ,g33
20:22:42  39  ,g34
20:22:42  40  ,g35
20:22:42  41  ,g36
20:22:42  42  ,g37
20:22:42  43  ,g38
20:22:42  44  ,g39
20:22:42  45  ,g40
20:22:42  46  ,g41
20:22:42  47  FROM modsrc
20:22:42  48  WHERE ydate = '&1'||' '||'&2'
20:22:42  49  AND pair = '&3'
20:22:42  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-11-04'||' '||'14:35:01'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:22:42 SQL> 
20:22:42 SQL> -- rpt
20:22:42 SQL> -- We should see just 1 row:
20:22:42 SQL> 
20:22:42 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.02
20:22:42 SQL> 
20:22:42 SQL> -- Build the model:
20:22:42 SQL> CREATE OR REPLACE VIEW bme AS
20:22:42   2  SELECT
20:22:42   3  prdate
20:22:42   4  ,gatt
20:22:42   5  ,g00
20:22:42   6  ,g01
20:22:42   7  ,g02
20:22:42   8  ,g03
20:22:42   9  ,g04
20:22:42  10  ,g05
20:22:42  11  ,g06
20:22:42  12  ,g07
20:22:42  13  ,g08
20:22:42  14  ,g09
20:22:42  15  ,g10
20:22:42  16  ,g11
20:22:42  17  ,g12
20:22:42  18  ,g13
20:22:42  19  ,g14
20:22:42  20  ,g15
20:22:42  21  ,g16
20:22:42  22  ,g17
20:22:42  23  ,g18
20:22:42  24  ,g19
20:22:42  25  ,g20
20:22:42  26  ,g21
20:22:42  27  ,g22
20:22:42  28  ,g23
20:22:42  29  ,g24
20:22:42  30  ,g25
20:22:42  31  ,g26
20:22:42  32  ,g27
20:22:42  33  ,g28
20:22:42  34  ,g29
20:22:42  35  ,g30
20:22:42  36  ,g31
20:22:42  37  ,g32
20:22:42  38  ,g33
20:22:42  39  ,g34
20:22:42  40  ,g35
20:22:42  41  ,g36
20:22:42  42  ,g37
20:22:42  43  ,g38
20:22:42  44  ,g39
20:22:42  45  ,g40
20:22:42  46  ,g41
20:22:42  47  FROM modsrc
20:22:42  48  WHERE gatt IN('nup','up')
20:22:42  49  -- Use only rows which are older than 1 day:
20:22:42  50  AND 1+ydate < '&1'||' '||'&2'
20:22:42  51  AND pair = '&3'
20:22:42  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-11-04'||' '||'14:35:01'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:22:42 SQL> 
20:22:42 SQL> -- rpt
20:22:42 SQL> 
20:22:42 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt;

GAT COUNT(PRDATE)
--- -------------
nup	     3561
up	     2467

Elapsed: 00:00:00.02
20:22:42 SQL> 
20:22:42 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-11-03 14:30:01

Elapsed: 00:00:00.02
20:22:42 SQL> 
20:22:42 SQL> -- Now build model from bme and score sme
20:22:42 SQL> @score1.sql gatt
20:22:42 SQL> --
20:22:42 SQL> -- score1.sql
20:22:42 SQL> --
20:22:42 SQL> 
20:22:42 SQL> -- I use this script to send 5 params to score.sql
20:22:42 SQL> -- which does the heavy lifting of creating an SVM model.
20:22:42 SQL> -- Then at the very end of this script I use the model
20:22:42 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:22:42 SQL> 
20:22:42 SQL> -- I call this script from 2 other scripts:
20:22:42 SQL> -- score1_5min.sql
20:22:42 SQL> -- score1_5min_gattn.sql
20:22:42 SQL> 
20:22:42 SQL> -- The 1st param is the name of the target attribute.
20:22:42 SQL> -- I like to call my target attributes either gatt or gattn.
20:22:42 SQL> 
20:22:42 SQL> -- Demo:
20:22:42 SQL> -- @score1.sql 'gatt'
20:22:42 SQL> -- @score1.sql 'gattn'
20:22:42 SQL> 
20:22:42 SQL> -- Now, I fill up svmc_apply_prep.
20:22:42 SQL> -- I use same model_name used in score.sql
20:22:42 SQL> DEFINE model_name = 'svmfx101'
20:22:42 SQL> DEFINE bldtable	= 'bme'
20:22:42 SQL> DEFINE scoretable = 'sme'
20:22:42 SQL> DEFINE case_id	= 'prdate'
20:22:42 SQL> -- Demo:
20:22:42 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:22:42 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:22:42 SQL> --
20:22:42 SQL> -- score.sql
20:22:42 SQL> --
20:22:42 SQL> 
20:22:42 SQL> -- usage: score.sql
20:22:42 SQL> 
20:22:42 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:22:42 SQL> 
20:22:42 SQL> -- DEFINE target	   = 'gatt'
20:22:42 SQL> -- DEFINE model_name = 'svmfx101'
20:22:42 SQL> -- DEFINE bldtable   = 'bme'
20:22:42 SQL> -- DEFINE scoretable = 'sme'
20:22:42 SQL> -- DEFINE case_id    = 'prdate'
20:22:42 SQL> 
20:22:42 SQL> DEFINE target	= '&1'
20:22:42 SQL> DEFINE model_name = '&2'
20:22:42 SQL> DEFINE bldtable	= '&3'
20:22:42 SQL> DEFINE scoretable = '&4'
20:22:42 SQL> DEFINE case_id	= '&5'
20:22:42 SQL> 
20:22:42 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:22:42 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:22:42 SQL> 
20:22:42 SQL> -- Builds an SVM model using pl/sql.
20:22:42 SQL> 
20:22:42 SQL> -----------------------------------------------------------------------
20:22:42 SQL> --			    BUILD THE MODEL
20:22:42 SQL> -----------------------------------------------------------------------
20:22:42 SQL> 
20:22:42 SQL> -- Cleanup old build data preparation objects for repeat runs
20:22:42 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.00
20:22:42 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.01
20:22:42 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:22:42 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.00
20:22:42 SQL> 
20:22:42 SQL> 
20:22:42 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:22:42 SQL> --
20:22:42 SQL> -- DROP	TABLE svmc_settings ;
20:22:42 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:22:42 SQL> -- DELETE svmc_settings;
20:22:42 SQL> 
20:22:42 SQL> -- The default classification algorithm is Naive Bayes. So override
20:22:42 SQL> -- this choice to SVM using a settings table.
20:22:42 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:22:42 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:22:42 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:22:42 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:22:42 SQL> -- models.
20:22:42 SQL> --
20:22:42 SQL> 
20:22:42 SQL> -- Do this once and then comment it out.
20:22:42 SQL> -- That makes script go faster.
20:22:42 SQL> -- BEGIN
20:22:42 SQL> -- -- Populate settings table
20:22:42 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:22:42 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:22:42 SQL> --
20:22:42 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:22:42 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:22:42 SQL> --
20:22:42 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:22:42 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:22:42 SQL> --   COMMIT;
20:22:42 SQL> -- END;
20:22:42 SQL> -- /
20:22:42 SQL> 
20:22:42 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.01
20:22:42 SQL> 
20:22:42 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:22:42   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:22:42   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:22:42 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:22:42   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:22:42   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:22:42 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:22:42   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:22:42   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:22:42 SQL> 
20:22:42 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:22:42   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:22:42   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:22:42 SQL> 
20:22:42 SQL> --------------------------------
20:22:42 SQL> -- PREPARE BUILD (TRAINING) DATA
20:22:42 SQL> --
20:22:42 SQL> 
20:22:42 SQL> -- 1. Missing Value treatment for all Predictors and
20:22:42 SQL> -- 2. Outlier Treatment and
20:22:42 SQL> -- 3. Normalization are performed below.
20:22:42 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:22:42 SQL> --    normalized here.
20:22:42 SQL> 
20:22:42 SQL> BEGIN
20:22:42   2  	-- Perform missing value treatment for all predictors
20:22:42   3  	-- create miss tables
20:22:42   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:22:42   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:22:42   6  
20:22:42   7  	-- populate miss tables
20:22:42   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:22:42   9  	  miss_table_name => 'svmc_miss_num',
20:22:42  10  	  data_table_name => '&bldtable',
20:22:42  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:22:42  12  
20:22:42  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:22:42  14  	  miss_table_name => 'svmc_miss_cat',
20:22:42  15  	  data_table_name => '&bldtable',
20:22:42  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:22:42  17  
20:22:42  18  	-- xform input data to replace missing values
20:22:42  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:22:42  20  	  miss_table_name => 'svmc_miss_num',
20:22:42  21  	  data_table_name => '&bldtable',
20:22:42  22  	  xform_view_name => 'xformed_build_miss_num');
20:22:42  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:22:42  24  	  miss_table_name => 'svmc_miss_cat',
20:22:42  25  	  data_table_name => '&bldtable',
20:22:42  26  	  xform_view_name => 'xformed_build_miss_cat');
20:22:42  27  
20:22:42  28  	-- Perform outlier treatment.
20:22:42  29  	-- create clip table
20:22:42  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:22:42  31  
20:22:42  32  	-- populate clip table
20:22:42  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:22:42  34  	  clip_table_name => 'svmc_clip',
20:22:42  35  	  data_table_name => '&bldtable',
20:22:42  36  	  tail_frac	  => 0.025,
20:22:42  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:22:42  38  
20:22:42  39  	-- xform input data to winsorized data
20:22:42  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:22:42  41  	  clip_table_name => 'svmc_clip',
20:22:42  42  	  data_table_name => '&bldtable',
20:22:42  43  	  xform_view_name => 'svmc_winsor');
20:22:42  44  
20:22:42  45  	-- create normalization table
20:22:42  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:22:42  47  
20:22:42  48  	-- populate normalization table based on winsorized data
20:22:42  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:22:42  50  	  norm_table_name => 'svmc_norm',
20:22:42  51  	  data_table_name => 'svmc_winsor',
20:22:42  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:22:42  53  
20:22:42  54  	-- normalize the original data
20:22:42  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:22:42  56  	  norm_table_name => 'svmc_norm',
20:22:42  57  	  data_table_name => '&bldtable',
20:22:42  58  	  xform_view_name => 'svmc_build_prep');
20:22:42  59  END;
20:22:42  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.35
20:22:44 SQL> 
20:22:44 SQL> ---------------------
20:22:44 SQL> -- CREATE A NEW MODEL
20:22:44 SQL> --
20:22:44 SQL> -- Cleanup old model with the same name for repeat runs
20:22:44 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:22:44   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:22:44   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.16
20:22:45 SQL> 
20:22:45 SQL> -- Build a new SVM Model
20:22:45 SQL> BEGIN
20:22:45   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:22:45   3  	  model_name	      => '&model_name',
20:22:45   4  	  mining_function     => dbms_data_mining.classification,
20:22:45   5  	  data_table_name     => 'svmc_build_prep',
20:22:45   6  	  case_id_column_name => '&case_id',
20:22:45   7  	  target_column_name  => '&target',
20:22:45   8  	  settings_table_name => 'svmc_settings');
20:22:45   9  END;
20:22:45  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:03.78
20:22:49 SQL> 
20:22:49 SQL> -----------------------------------------------------------------------
20:22:49 SQL> --			       APPLY/score THE MODEL
20:22:49 SQL> -----------------------------------------------------------------------
20:22:49 SQL> 
20:22:49 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:22:49 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:22:49   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:22:49   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.11
20:22:49 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:22:49   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:22:49   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:22:49 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:22:49   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:22:49   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:22:49 SQL> -----------------------
20:22:49 SQL> -- PREPARE SCORING DATA
20:22:49 SQL> --
20:22:49 SQL> -- If the data for model creation has been prepared, then the data
20:22:49 SQL> -- to be scored using the model must be prepared in the same manner
20:22:49 SQL> -- in order to obtain meaningful results.
20:22:49 SQL> --
20:22:49 SQL> -- 1. Missing Value treatment for all Predictors and
20:22:49 SQL> -- 2. Normalization
20:22:49 SQL> -- No outlier treatment will be performed during test and apply. The
20:22:49 SQL> -- normalization step is sufficient, since the normalization parameters
20:22:49 SQL> -- already capture the effects of outlier treatment done with build data.
20:22:49 SQL> --
20:22:49 SQL> BEGIN
20:22:49   2  	-- Xform Test data to replace missing values
20:22:49   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:22:49   4  	  miss_table_name => 'svmc_miss_num',
20:22:49   5  	  data_table_name => '&scoretable',
20:22:49   6  	  xform_view_name => 'xformed_apply_miss_num');
20:22:49   7  
20:22:49   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:22:49   9  	  miss_table_name => 'svmc_miss_cat',
20:22:49  10  	  data_table_name => '&scoretable',
20:22:49  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:22:49  12  
20:22:49  13  	-- Normalize the data to be scored
20:22:49  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:22:49  15  	  norm_table_name => 'svmc_norm',
20:22:49  16  	  data_table_name => '&scoretable',
20:22:49  17  	  xform_view_name => 'svmc_apply_prep');
20:22:49  18  END;
20:22:49  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.18
20:22:49 SQL> 
20:22:49 SQL> -- Maybe I already collected a score for this prdate.
20:22:49 SQL> -- DELETE it if I did:
20:22:49 SQL> DELETE svm62scores
20:22:49   2  WHERE score > 0
20:22:49   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:22:49   4  -- I need to supply the target attribute name:
20:22:49   5  AND targ = '&1'
20:22:49   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gatt'

0 rows deleted.

Elapsed: 00:00:00.02
20:22:49 SQL> 
20:22:49 SQL> -- We do a drumroll here:
20:22:49 SQL> 
20:22:49 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:22:49   2  SELECT
20:22:49   3  prdate
20:22:49   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:22:49   5  ,sysdate
20:22:49   6  ,SUBSTR(prdate,1,7)pair
20:22:49   7  ,SUBSTR(prdate,-19)ydate
20:22:49   8  ,'&1'
20:22:49   9  FROM svmc_apply_prep
20:22:49  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gatt'

1 row created.

Elapsed: 00:00:00.05
20:22:49 SQL> @score1_5min.sql	      2010-11-01 09:15:01 aud_usd
20:22:49 SQL> --
20:22:49 SQL> -- score1_5min.sql
20:22:49 SQL> --
20:22:49 SQL> 
20:22:49 SQL> -- Demo:
20:22:49 SQL> -- @score1_5min.sql 2010-12-31 20:45:01 aud_usd
20:22:49 SQL> 
20:22:49 SQL> CREATE OR REPLACE VIEW sme AS
20:22:49   2  SELECT
20:22:49   3  prdate
20:22:49   4  ,NULL gatt
20:22:49   5  ,g00
20:22:49   6  ,g01
20:22:49   7  ,g02
20:22:49   8  ,g03
20:22:49   9  ,g04
20:22:49  10  ,g05
20:22:49  11  ,g06
20:22:49  12  ,g07
20:22:49  13  ,g08
20:22:49  14  ,g09
20:22:49  15  ,g10
20:22:49  16  ,g11
20:22:49  17  ,g12
20:22:49  18  ,g13
20:22:49  19  ,g14
20:22:49  20  ,g15
20:22:49  21  ,g16
20:22:49  22  ,g17
20:22:49  23  ,g18
20:22:49  24  ,g19
20:22:49  25  ,g20
20:22:49  26  ,g21
20:22:49  27  ,g22
20:22:49  28  ,g23
20:22:49  29  ,g24
20:22:49  30  ,g25
20:22:49  31  ,g26
20:22:49  32  ,g27
20:22:49  33  ,g28
20:22:49  34  ,g29
20:22:49  35  ,g30
20:22:49  36  ,g31
20:22:49  37  ,g32
20:22:49  38  ,g33
20:22:49  39  ,g34
20:22:49  40  ,g35
20:22:49  41  ,g36
20:22:49  42  ,g37
20:22:49  43  ,g38
20:22:49  44  ,g39
20:22:49  45  ,g40
20:22:49  46  ,g41
20:22:49  47  FROM modsrc
20:22:49  48  WHERE ydate = '&1'||' '||'&2'
20:22:49  49  AND pair = '&3'
20:22:49  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-11-01'||' '||'09:15:01'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.05
20:22:49 SQL> 
20:22:49 SQL> -- rpt
20:22:49 SQL> -- We should see just 1 row:
20:22:49 SQL> 
20:22:49 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.02
20:22:49 SQL> 
20:22:49 SQL> -- Build the model:
20:22:49 SQL> CREATE OR REPLACE VIEW bme AS
20:22:49   2  SELECT
20:22:49   3  prdate
20:22:49   4  ,gatt
20:22:49   5  ,g00
20:22:49   6  ,g01
20:22:49   7  ,g02
20:22:49   8  ,g03
20:22:49   9  ,g04
20:22:49  10  ,g05
20:22:49  11  ,g06
20:22:49  12  ,g07
20:22:49  13  ,g08
20:22:49  14  ,g09
20:22:49  15  ,g10
20:22:49  16  ,g11
20:22:49  17  ,g12
20:22:49  18  ,g13
20:22:49  19  ,g14
20:22:49  20  ,g15
20:22:49  21  ,g16
20:22:49  22  ,g17
20:22:49  23  ,g18
20:22:49  24  ,g19
20:22:49  25  ,g20
20:22:49  26  ,g21
20:22:49  27  ,g22
20:22:49  28  ,g23
20:22:49  29  ,g24
20:22:49  30  ,g25
20:22:49  31  ,g26
20:22:49  32  ,g27
20:22:49  33  ,g28
20:22:49  34  ,g29
20:22:49  35  ,g30
20:22:49  36  ,g31
20:22:49  37  ,g32
20:22:49  38  ,g33
20:22:49  39  ,g34
20:22:49  40  ,g35
20:22:49  41  ,g36
20:22:49  42  ,g37
20:22:49  43  ,g38
20:22:49  44  ,g39
20:22:49  45  ,g40
20:22:49  46  ,g41
20:22:49  47  FROM modsrc
20:22:49  48  WHERE gatt IN('nup','up')
20:22:49  49  -- Use only rows which are older than 1 day:
20:22:49  50  AND 1+ydate < '&1'||' '||'&2'
20:22:49  51  AND pair = '&3'
20:22:49  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-11-01'||' '||'09:15:01'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.08
20:22:49 SQL> 
20:22:49 SQL> -- rpt
20:22:49 SQL> 
20:22:49 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt;

GAT COUNT(PRDATE)
--- -------------
nup	     3057
up	     2183

Elapsed: 00:00:00.03
20:22:49 SQL> 
20:22:49 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-10-29 21:50:01

Elapsed: 00:00:00.01
20:22:49 SQL> 
20:22:49 SQL> -- Now build model from bme and score sme
20:22:49 SQL> @score1.sql gatt
20:22:49 SQL> --
20:22:49 SQL> -- score1.sql
20:22:49 SQL> --
20:22:49 SQL> 
20:22:49 SQL> -- I use this script to send 5 params to score.sql
20:22:49 SQL> -- which does the heavy lifting of creating an SVM model.
20:22:49 SQL> -- Then at the very end of this script I use the model
20:22:49 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:22:49 SQL> 
20:22:49 SQL> -- I call this script from 2 other scripts:
20:22:49 SQL> -- score1_5min.sql
20:22:49 SQL> -- score1_5min_gattn.sql
20:22:49 SQL> 
20:22:49 SQL> -- The 1st param is the name of the target attribute.
20:22:49 SQL> -- I like to call my target attributes either gatt or gattn.
20:22:49 SQL> 
20:22:49 SQL> -- Demo:
20:22:49 SQL> -- @score1.sql 'gatt'
20:22:49 SQL> -- @score1.sql 'gattn'
20:22:49 SQL> 
20:22:49 SQL> -- Now, I fill up svmc_apply_prep.
20:22:49 SQL> -- I use same model_name used in score.sql
20:22:49 SQL> DEFINE model_name = 'svmfx101'
20:22:49 SQL> DEFINE bldtable	= 'bme'
20:22:49 SQL> DEFINE scoretable = 'sme'
20:22:49 SQL> DEFINE case_id	= 'prdate'
20:22:49 SQL> -- Demo:
20:22:49 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:22:49 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:22:49 SQL> --
20:22:49 SQL> -- score.sql
20:22:49 SQL> --
20:22:49 SQL> 
20:22:49 SQL> -- usage: score.sql
20:22:49 SQL> 
20:22:49 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:22:49 SQL> 
20:22:49 SQL> -- DEFINE target	   = 'gatt'
20:22:49 SQL> -- DEFINE model_name = 'svmfx101'
20:22:49 SQL> -- DEFINE bldtable   = 'bme'
20:22:49 SQL> -- DEFINE scoretable = 'sme'
20:22:49 SQL> -- DEFINE case_id    = 'prdate'
20:22:49 SQL> 
20:22:49 SQL> DEFINE target	= '&1'
20:22:49 SQL> DEFINE model_name = '&2'
20:22:49 SQL> DEFINE bldtable	= '&3'
20:22:49 SQL> DEFINE scoretable = '&4'
20:22:49 SQL> DEFINE case_id	= '&5'
20:22:49 SQL> 
20:22:49 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:22:49 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:22:49 SQL> 
20:22:49 SQL> -- Builds an SVM model using pl/sql.
20:22:49 SQL> 
20:22:49 SQL> -----------------------------------------------------------------------
20:22:49 SQL> --			    BUILD THE MODEL
20:22:49 SQL> -----------------------------------------------------------------------
20:22:49 SQL> 
20:22:49 SQL> -- Cleanup old build data preparation objects for repeat runs
20:22:49 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.00
20:22:49 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:22:49 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.01
20:22:49 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.00
20:22:49 SQL> 
20:22:49 SQL> 
20:22:49 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:22:49 SQL> --
20:22:49 SQL> -- DROP	TABLE svmc_settings ;
20:22:49 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:22:49 SQL> -- DELETE svmc_settings;
20:22:49 SQL> 
20:22:49 SQL> -- The default classification algorithm is Naive Bayes. So override
20:22:49 SQL> -- this choice to SVM using a settings table.
20:22:49 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:22:49 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:22:49 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:22:49 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:22:49 SQL> -- models.
20:22:49 SQL> --
20:22:49 SQL> 
20:22:49 SQL> -- Do this once and then comment it out.
20:22:49 SQL> -- That makes script go faster.
20:22:49 SQL> -- BEGIN
20:22:49 SQL> -- -- Populate settings table
20:22:49 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:22:49 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:22:49 SQL> --
20:22:49 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:22:49 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:22:49 SQL> --
20:22:49 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:22:49 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:22:49 SQL> --   COMMIT;
20:22:49 SQL> -- END;
20:22:49 SQL> -- /
20:22:49 SQL> 
20:22:49 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:22:49 SQL> 
20:22:49 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:22:49   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:22:49   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:22:49 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:22:49   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:22:49   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:22:49 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:22:49   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:22:49   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:22:49 SQL> 
20:22:49 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:22:49   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:22:49   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:22:49 SQL> 
20:22:49 SQL> --------------------------------
20:22:49 SQL> -- PREPARE BUILD (TRAINING) DATA
20:22:49 SQL> --
20:22:49 SQL> 
20:22:49 SQL> -- 1. Missing Value treatment for all Predictors and
20:22:49 SQL> -- 2. Outlier Treatment and
20:22:49 SQL> -- 3. Normalization are performed below.
20:22:49 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:22:49 SQL> --    normalized here.
20:22:49 SQL> 
20:22:49 SQL> BEGIN
20:22:49   2  	-- Perform missing value treatment for all predictors
20:22:49   3  	-- create miss tables
20:22:49   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:22:49   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:22:49   6  
20:22:49   7  	-- populate miss tables
20:22:49   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:22:49   9  	  miss_table_name => 'svmc_miss_num',
20:22:49  10  	  data_table_name => '&bldtable',
20:22:49  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:22:49  12  
20:22:49  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:22:49  14  	  miss_table_name => 'svmc_miss_cat',
20:22:49  15  	  data_table_name => '&bldtable',
20:22:49  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:22:49  17  
20:22:49  18  	-- xform input data to replace missing values
20:22:49  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:22:49  20  	  miss_table_name => 'svmc_miss_num',
20:22:49  21  	  data_table_name => '&bldtable',
20:22:49  22  	  xform_view_name => 'xformed_build_miss_num');
20:22:49  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:22:49  24  	  miss_table_name => 'svmc_miss_cat',
20:22:49  25  	  data_table_name => '&bldtable',
20:22:49  26  	  xform_view_name => 'xformed_build_miss_cat');
20:22:49  27  
20:22:49  28  	-- Perform outlier treatment.
20:22:49  29  	-- create clip table
20:22:49  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:22:49  31  
20:22:49  32  	-- populate clip table
20:22:49  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:22:49  34  	  clip_table_name => 'svmc_clip',
20:22:49  35  	  data_table_name => '&bldtable',
20:22:49  36  	  tail_frac	  => 0.025,
20:22:49  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:22:49  38  
20:22:49  39  	-- xform input data to winsorized data
20:22:49  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:22:49  41  	  clip_table_name => 'svmc_clip',
20:22:49  42  	  data_table_name => '&bldtable',
20:22:49  43  	  xform_view_name => 'svmc_winsor');
20:22:49  44  
20:22:49  45  	-- create normalization table
20:22:49  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:22:49  47  
20:22:49  48  	-- populate normalization table based on winsorized data
20:22:49  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:22:49  50  	  norm_table_name => 'svmc_norm',
20:22:49  51  	  data_table_name => 'svmc_winsor',
20:22:49  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:22:49  53  
20:22:49  54  	-- normalize the original data
20:22:49  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:22:49  56  	  norm_table_name => 'svmc_norm',
20:22:49  57  	  data_table_name => '&bldtable',
20:22:49  58  	  xform_view_name => 'svmc_build_prep');
20:22:49  59  END;
20:22:49  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.29
20:22:51 SQL> 
20:22:51 SQL> ---------------------
20:22:51 SQL> -- CREATE A NEW MODEL
20:22:51 SQL> --
20:22:51 SQL> -- Cleanup old model with the same name for repeat runs
20:22:51 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:22:51   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:22:51   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.99
20:22:52 SQL> 
20:22:52 SQL> -- Build a new SVM Model
20:22:52 SQL> BEGIN
20:22:52   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:22:52   3  	  model_name	      => '&model_name',
20:22:52   4  	  mining_function     => dbms_data_mining.classification,
20:22:52   5  	  data_table_name     => 'svmc_build_prep',
20:22:52   6  	  case_id_column_name => '&case_id',
20:22:52   7  	  target_column_name  => '&target',
20:22:52   8  	  settings_table_name => 'svmc_settings');
20:22:52   9  END;
20:22:52  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:03.06
20:22:55 SQL> 
20:22:55 SQL> -----------------------------------------------------------------------
20:22:55 SQL> --			       APPLY/score THE MODEL
20:22:55 SQL> -----------------------------------------------------------------------
20:22:55 SQL> 
20:22:55 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:22:55 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:22:55   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:22:55   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:22:55 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:22:55   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:22:55   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:22:55 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:22:55   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:22:55   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:22:55 SQL> -----------------------
20:22:55 SQL> -- PREPARE SCORING DATA
20:22:55 SQL> --
20:22:55 SQL> -- If the data for model creation has been prepared, then the data
20:22:55 SQL> -- to be scored using the model must be prepared in the same manner
20:22:55 SQL> -- in order to obtain meaningful results.
20:22:55 SQL> --
20:22:55 SQL> -- 1. Missing Value treatment for all Predictors and
20:22:55 SQL> -- 2. Normalization
20:22:55 SQL> -- No outlier treatment will be performed during test and apply. The
20:22:55 SQL> -- normalization step is sufficient, since the normalization parameters
20:22:55 SQL> -- already capture the effects of outlier treatment done with build data.
20:22:55 SQL> --
20:22:55 SQL> BEGIN
20:22:55   2  	-- Xform Test data to replace missing values
20:22:55   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:22:55   4  	  miss_table_name => 'svmc_miss_num',
20:22:55   5  	  data_table_name => '&scoretable',
20:22:55   6  	  xform_view_name => 'xformed_apply_miss_num');
20:22:55   7  
20:22:55   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:22:55   9  	  miss_table_name => 'svmc_miss_cat',
20:22:55  10  	  data_table_name => '&scoretable',
20:22:55  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:22:55  12  
20:22:55  13  	-- Normalize the data to be scored
20:22:55  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:22:55  15  	  norm_table_name => 'svmc_norm',
20:22:55  16  	  data_table_name => '&scoretable',
20:22:55  17  	  xform_view_name => 'svmc_apply_prep');
20:22:55  18  END;
20:22:55  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.18
20:22:55 SQL> 
20:22:55 SQL> -- Maybe I already collected a score for this prdate.
20:22:55 SQL> -- DELETE it if I did:
20:22:55 SQL> DELETE svm62scores
20:22:55   2  WHERE score > 0
20:22:55   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:22:55   4  -- I need to supply the target attribute name:
20:22:55   5  AND targ = '&1'
20:22:55   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gatt'

0 rows deleted.

Elapsed: 00:00:00.02
20:22:55 SQL> 
20:22:55 SQL> -- We do a drumroll here:
20:22:55 SQL> 
20:22:55 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:22:55   2  SELECT
20:22:55   3  prdate
20:22:55   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:22:55   5  ,sysdate
20:22:55   6  ,SUBSTR(prdate,1,7)pair
20:22:55   7  ,SUBSTR(prdate,-19)ydate
20:22:55   8  ,'&1'
20:22:55   9  FROM svmc_apply_prep
20:22:55  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gatt'

1 row created.

Elapsed: 00:00:00.05
20:22:55 SQL> @score1_5min_gattn.sql	2011-01-06 21:45:00 aud_usd
20:22:55 SQL> --
20:22:55 SQL> -- score1_5min_gattn.sql
20:22:55 SQL> --
20:22:55 SQL> 
20:22:55 SQL> -- Demo:
20:22:55 SQL> -- @score1_5min_gattn.sql 2010-12-31 20:45:01 aud_usd
20:22:55 SQL> 
20:22:55 SQL> CREATE OR REPLACE VIEW sme AS
20:22:55   2  SELECT
20:22:55   3  prdate
20:22:55   4  ,NULL gattn
20:22:55   5  ,g00
20:22:55   6  ,g01
20:22:55   7  ,g02
20:22:55   8  ,g03
20:22:55   9  ,g04
20:22:55  10  ,g05
20:22:55  11  ,g06
20:22:55  12  ,g07
20:22:55  13  ,g08
20:22:55  14  ,g09
20:22:55  15  ,g10
20:22:55  16  ,g11
20:22:55  17  ,g12
20:22:55  18  ,g13
20:22:55  19  ,g14
20:22:55  20  ,g15
20:22:55  21  ,g16
20:22:55  22  ,g17
20:22:55  23  ,g18
20:22:55  24  ,g19
20:22:55  25  ,g20
20:22:55  26  ,g21
20:22:55  27  ,g22
20:22:55  28  ,g23
20:22:55  29  ,g24
20:22:55  30  ,g25
20:22:55  31  ,g26
20:22:55  32  ,g27
20:22:55  33  ,g28
20:22:55  34  ,g29
20:22:55  35  ,g30
20:22:55  36  ,g31
20:22:55  37  ,g32
20:22:55  38  ,g33
20:22:55  39  ,g34
20:22:55  40  ,g35
20:22:55  41  ,g36
20:22:55  42  ,g37
20:22:55  43  ,g38
20:22:55  44  ,g39
20:22:55  45  ,g40
20:22:55  46  ,g41
20:22:55  47  FROM modsrc
20:22:55  48  WHERE ydate = '&1'||' '||'&2'
20:22:55  49  AND pair = '&3'
20:22:55  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2011-01-06'||' '||'21:45:00'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.05
20:22:55 SQL> 
20:22:55 SQL> -- rpt
20:22:55 SQL> -- We should see just 1 row:
20:22:55 SQL> 
20:22:55 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.02
20:22:55 SQL> 
20:22:55 SQL> -- Build the model:
20:22:55 SQL> CREATE OR REPLACE VIEW bme AS
20:22:55   2  SELECT
20:22:55   3  prdate
20:22:55   4  ,gattn
20:22:55   5  ,g00
20:22:55   6  ,g01
20:22:55   7  ,g02
20:22:55   8  ,g03
20:22:55   9  ,g04
20:22:55  10  ,g05
20:22:55  11  ,g06
20:22:55  12  ,g07
20:22:55  13  ,g08
20:22:55  14  ,g09
20:22:55  15  ,g10
20:22:55  16  ,g11
20:22:55  17  ,g12
20:22:55  18  ,g13
20:22:55  19  ,g14
20:22:55  20  ,g15
20:22:55  21  ,g16
20:22:55  22  ,g17
20:22:55  23  ,g18
20:22:55  24  ,g19
20:22:55  25  ,g20
20:22:55  26  ,g21
20:22:55  27  ,g22
20:22:55  28  ,g23
20:22:55  29  ,g24
20:22:55  30  ,g25
20:22:55  31  ,g26
20:22:55  32  ,g27
20:22:55  33  ,g28
20:22:55  34  ,g29
20:22:55  35  ,g30
20:22:55  36  ,g31
20:22:55  37  ,g32
20:22:55  38  ,g33
20:22:55  39  ,g34
20:22:55  40  ,g35
20:22:55  41  ,g36
20:22:55  42  ,g37
20:22:55  43  ,g38
20:22:55  44  ,g39
20:22:55  45  ,g40
20:22:55  46  ,g41
20:22:55  47  FROM modsrc
20:22:55  48  WHERE gattn IN('nup','up')
20:22:55  49  -- Use only rows which are older than 1 day:
20:22:55  50  AND 1+ydate < '&1'||' '||'&2'
20:22:55  51  AND pair = '&3'
20:22:55  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2011-01-06'||' '||'21:45:00'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.05
20:22:55 SQL> 
20:22:55 SQL> -- rpt
20:22:55 SQL> 
20:22:55 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	    12529
up	     6440

Elapsed: 00:00:00.02
20:22:55 SQL> 
20:22:55 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2011-01-05 21:40:00

Elapsed: 00:00:00.02
20:22:55 SQL> 
20:22:55 SQL> -- Now build model from bme and score sme
20:22:55 SQL> @score1.sql gattn
20:22:55 SQL> --
20:22:55 SQL> -- score1.sql
20:22:55 SQL> --
20:22:55 SQL> 
20:22:55 SQL> -- I use this script to send 5 params to score.sql
20:22:55 SQL> -- which does the heavy lifting of creating an SVM model.
20:22:55 SQL> -- Then at the very end of this script I use the model
20:22:55 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:22:55 SQL> 
20:22:55 SQL> -- I call this script from 2 other scripts:
20:22:55 SQL> -- score1_5min.sql
20:22:55 SQL> -- score1_5min_gattn.sql
20:22:55 SQL> 
20:22:55 SQL> -- The 1st param is the name of the target attribute.
20:22:55 SQL> -- I like to call my target attributes either gatt or gattn.
20:22:55 SQL> 
20:22:55 SQL> -- Demo:
20:22:55 SQL> -- @score1.sql 'gatt'
20:22:55 SQL> -- @score1.sql 'gattn'
20:22:55 SQL> 
20:22:55 SQL> -- Now, I fill up svmc_apply_prep.
20:22:55 SQL> -- I use same model_name used in score.sql
20:22:55 SQL> DEFINE model_name = 'svmfx101'
20:22:55 SQL> DEFINE bldtable	= 'bme'
20:22:55 SQL> DEFINE scoretable = 'sme'
20:22:55 SQL> DEFINE case_id	= 'prdate'
20:22:55 SQL> -- Demo:
20:22:55 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:22:55 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:22:55 SQL> --
20:22:55 SQL> -- score.sql
20:22:55 SQL> --
20:22:55 SQL> 
20:22:55 SQL> -- usage: score.sql
20:22:55 SQL> 
20:22:55 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:22:55 SQL> 
20:22:55 SQL> -- DEFINE target	   = 'gatt'
20:22:55 SQL> -- DEFINE model_name = 'svmfx101'
20:22:55 SQL> -- DEFINE bldtable   = 'bme'
20:22:55 SQL> -- DEFINE scoretable = 'sme'
20:22:55 SQL> -- DEFINE case_id    = 'prdate'
20:22:55 SQL> 
20:22:55 SQL> DEFINE target	= '&1'
20:22:55 SQL> DEFINE model_name = '&2'
20:22:55 SQL> DEFINE bldtable	= '&3'
20:22:55 SQL> DEFINE scoretable = '&4'
20:22:55 SQL> DEFINE case_id	= '&5'
20:22:55 SQL> 
20:22:55 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:22:55 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:22:55 SQL> 
20:22:55 SQL> -- Builds an SVM model using pl/sql.
20:22:55 SQL> 
20:22:55 SQL> -----------------------------------------------------------------------
20:22:55 SQL> --			    BUILD THE MODEL
20:22:55 SQL> -----------------------------------------------------------------------
20:22:55 SQL> 
20:22:55 SQL> -- Cleanup old build data preparation objects for repeat runs
20:22:55 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.01
20:22:55 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:22:55 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:22:55 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.00
20:22:55 SQL> 
20:22:55 SQL> 
20:22:55 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:22:55 SQL> --
20:22:55 SQL> -- DROP	TABLE svmc_settings ;
20:22:55 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:22:55 SQL> -- DELETE svmc_settings;
20:22:55 SQL> 
20:22:55 SQL> -- The default classification algorithm is Naive Bayes. So override
20:22:55 SQL> -- this choice to SVM using a settings table.
20:22:55 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:22:55 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:22:55 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:22:55 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:22:55 SQL> -- models.
20:22:55 SQL> --
20:22:55 SQL> 
20:22:55 SQL> -- Do this once and then comment it out.
20:22:55 SQL> -- That makes script go faster.
20:22:55 SQL> -- BEGIN
20:22:55 SQL> -- -- Populate settings table
20:22:55 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:22:55 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:22:55 SQL> --
20:22:55 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:22:55 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:22:55 SQL> --
20:22:55 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:22:55 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:22:55 SQL> --   COMMIT;
20:22:55 SQL> -- END;
20:22:55 SQL> -- /
20:22:55 SQL> 
20:22:55 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.01
20:22:55 SQL> 
20:22:55 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:22:55   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:22:55   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:22:55 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:22:55   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:22:55   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:22:55 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:22:55   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:22:55   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:22:55 SQL> 
20:22:55 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:22:55   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:22:55   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:22:55 SQL> 
20:22:55 SQL> --------------------------------
20:22:55 SQL> -- PREPARE BUILD (TRAINING) DATA
20:22:55 SQL> --
20:22:55 SQL> 
20:22:55 SQL> -- 1. Missing Value treatment for all Predictors and
20:22:55 SQL> -- 2. Outlier Treatment and
20:22:55 SQL> -- 3. Normalization are performed below.
20:22:55 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:22:55 SQL> --    normalized here.
20:22:55 SQL> 
20:22:55 SQL> BEGIN
20:22:55   2  	-- Perform missing value treatment for all predictors
20:22:55   3  	-- create miss tables
20:22:55   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:22:55   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:22:55   6  
20:22:55   7  	-- populate miss tables
20:22:55   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:22:55   9  	  miss_table_name => 'svmc_miss_num',
20:22:55  10  	  data_table_name => '&bldtable',
20:22:55  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:22:55  12  
20:22:55  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:22:55  14  	  miss_table_name => 'svmc_miss_cat',
20:22:55  15  	  data_table_name => '&bldtable',
20:22:55  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:22:55  17  
20:22:55  18  	-- xform input data to replace missing values
20:22:55  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:22:55  20  	  miss_table_name => 'svmc_miss_num',
20:22:55  21  	  data_table_name => '&bldtable',
20:22:55  22  	  xform_view_name => 'xformed_build_miss_num');
20:22:55  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:22:55  24  	  miss_table_name => 'svmc_miss_cat',
20:22:55  25  	  data_table_name => '&bldtable',
20:22:55  26  	  xform_view_name => 'xformed_build_miss_cat');
20:22:55  27  
20:22:55  28  	-- Perform outlier treatment.
20:22:55  29  	-- create clip table
20:22:55  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:22:55  31  
20:22:55  32  	-- populate clip table
20:22:55  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:22:55  34  	  clip_table_name => 'svmc_clip',
20:22:55  35  	  data_table_name => '&bldtable',
20:22:55  36  	  tail_frac	  => 0.025,
20:22:55  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:22:55  38  
20:22:55  39  	-- xform input data to winsorized data
20:22:55  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:22:55  41  	  clip_table_name => 'svmc_clip',
20:22:55  42  	  data_table_name => '&bldtable',
20:22:55  43  	  xform_view_name => 'svmc_winsor');
20:22:55  44  
20:22:55  45  	-- create normalization table
20:22:55  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:22:55  47  
20:22:55  48  	-- populate normalization table based on winsorized data
20:22:55  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:22:55  50  	  norm_table_name => 'svmc_norm',
20:22:55  51  	  data_table_name => 'svmc_winsor',
20:22:55  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:22:55  53  
20:22:55  54  	-- normalize the original data
20:22:55  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:22:55  56  	  norm_table_name => 'svmc_norm',
20:22:55  57  	  data_table_name => '&bldtable',
20:22:55  58  	  xform_view_name => 'svmc_build_prep');
20:22:55  59  END;
20:22:55  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:02.34
20:22:58 SQL> 
20:22:58 SQL> ---------------------
20:22:58 SQL> -- CREATE A NEW MODEL
20:22:58 SQL> --
20:22:58 SQL> -- Cleanup old model with the same name for repeat runs
20:22:58 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:22:58   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:22:58   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.06
20:22:59 SQL> 
20:22:59 SQL> -- Build a new SVM Model
20:22:59 SQL> BEGIN
20:22:59   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:22:59   3  	  model_name	      => '&model_name',
20:22:59   4  	  mining_function     => dbms_data_mining.classification,
20:22:59   5  	  data_table_name     => 'svmc_build_prep',
20:22:59   6  	  case_id_column_name => '&case_id',
20:22:59   7  	  target_column_name  => '&target',
20:22:59   8  	  settings_table_name => 'svmc_settings');
20:22:59   9  END;
20:22:59  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:05.58
20:23:04 SQL> 
20:23:04 SQL> -----------------------------------------------------------------------
20:23:04 SQL> --			       APPLY/score THE MODEL
20:23:04 SQL> -----------------------------------------------------------------------
20:23:04 SQL> 
20:23:04 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:23:04 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:23:04   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:23:04   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:23:04 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:23:04   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:23:04   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:23:04 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:23:04   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:23:04   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:23:04 SQL> -----------------------
20:23:04 SQL> -- PREPARE SCORING DATA
20:23:04 SQL> --
20:23:04 SQL> -- If the data for model creation has been prepared, then the data
20:23:04 SQL> -- to be scored using the model must be prepared in the same manner
20:23:04 SQL> -- in order to obtain meaningful results.
20:23:04 SQL> --
20:23:04 SQL> -- 1. Missing Value treatment for all Predictors and
20:23:04 SQL> -- 2. Normalization
20:23:04 SQL> -- No outlier treatment will be performed during test and apply. The
20:23:04 SQL> -- normalization step is sufficient, since the normalization parameters
20:23:04 SQL> -- already capture the effects of outlier treatment done with build data.
20:23:04 SQL> --
20:23:04 SQL> BEGIN
20:23:04   2  	-- Xform Test data to replace missing values
20:23:04   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:23:04   4  	  miss_table_name => 'svmc_miss_num',
20:23:04   5  	  data_table_name => '&scoretable',
20:23:04   6  	  xform_view_name => 'xformed_apply_miss_num');
20:23:04   7  
20:23:04   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:23:04   9  	  miss_table_name => 'svmc_miss_cat',
20:23:04  10  	  data_table_name => '&scoretable',
20:23:04  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:23:04  12  
20:23:04  13  	-- Normalize the data to be scored
20:23:04  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:23:04  15  	  norm_table_name => 'svmc_norm',
20:23:04  16  	  data_table_name => '&scoretable',
20:23:04  17  	  xform_view_name => 'svmc_apply_prep');
20:23:04  18  END;
20:23:04  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.19
20:23:05 SQL> 
20:23:05 SQL> -- Maybe I already collected a score for this prdate.
20:23:05 SQL> -- DELETE it if I did:
20:23:05 SQL> DELETE svm62scores
20:23:05   2  WHERE score > 0
20:23:05   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:23:05   4  -- I need to supply the target attribute name:
20:23:05   5  AND targ = '&1'
20:23:05   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gattn'

0 rows deleted.

Elapsed: 00:00:00.02
20:23:05 SQL> 
20:23:05 SQL> -- We do a drumroll here:
20:23:05 SQL> 
20:23:05 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:23:05   2  SELECT
20:23:05   3  prdate
20:23:05   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:23:05   5  ,sysdate
20:23:05   6  ,SUBSTR(prdate,1,7)pair
20:23:05   7  ,SUBSTR(prdate,-19)ydate
20:23:05   8  ,'&1'
20:23:05   9  FROM svmc_apply_prep
20:23:05  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gattn'

1 row created.

Elapsed: 00:00:00.05
20:23:05 SQL> @score1_5min_gattn.sql	2011-01-04 00:40:00 aud_usd
20:23:05 SQL> --
20:23:05 SQL> -- score1_5min_gattn.sql
20:23:05 SQL> --
20:23:05 SQL> 
20:23:05 SQL> -- Demo:
20:23:05 SQL> -- @score1_5min_gattn.sql 2010-12-31 20:45:01 aud_usd
20:23:05 SQL> 
20:23:05 SQL> CREATE OR REPLACE VIEW sme AS
20:23:05   2  SELECT
20:23:05   3  prdate
20:23:05   4  ,NULL gattn
20:23:05   5  ,g00
20:23:05   6  ,g01
20:23:05   7  ,g02
20:23:05   8  ,g03
20:23:05   9  ,g04
20:23:05  10  ,g05
20:23:05  11  ,g06
20:23:05  12  ,g07
20:23:05  13  ,g08
20:23:05  14  ,g09
20:23:05  15  ,g10
20:23:05  16  ,g11
20:23:05  17  ,g12
20:23:05  18  ,g13
20:23:05  19  ,g14
20:23:05  20  ,g15
20:23:05  21  ,g16
20:23:05  22  ,g17
20:23:05  23  ,g18
20:23:05  24  ,g19
20:23:05  25  ,g20
20:23:05  26  ,g21
20:23:05  27  ,g22
20:23:05  28  ,g23
20:23:05  29  ,g24
20:23:05  30  ,g25
20:23:05  31  ,g26
20:23:05  32  ,g27
20:23:05  33  ,g28
20:23:05  34  ,g29
20:23:05  35  ,g30
20:23:05  36  ,g31
20:23:05  37  ,g32
20:23:05  38  ,g33
20:23:05  39  ,g34
20:23:05  40  ,g35
20:23:05  41  ,g36
20:23:05  42  ,g37
20:23:05  43  ,g38
20:23:05  44  ,g39
20:23:05  45  ,g40
20:23:05  46  ,g41
20:23:05  47  FROM modsrc
20:23:05  48  WHERE ydate = '&1'||' '||'&2'
20:23:05  49  AND pair = '&3'
20:23:05  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2011-01-04'||' '||'00:40:00'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.05
20:23:05 SQL> 
20:23:05 SQL> -- rpt
20:23:05 SQL> -- We should see just 1 row:
20:23:05 SQL> 
20:23:05 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.02
20:23:05 SQL> 
20:23:05 SQL> -- Build the model:
20:23:05 SQL> CREATE OR REPLACE VIEW bme AS
20:23:05   2  SELECT
20:23:05   3  prdate
20:23:05   4  ,gattn
20:23:05   5  ,g00
20:23:05   6  ,g01
20:23:05   7  ,g02
20:23:05   8  ,g03
20:23:05   9  ,g04
20:23:05  10  ,g05
20:23:05  11  ,g06
20:23:05  12  ,g07
20:23:05  13  ,g08
20:23:05  14  ,g09
20:23:05  15  ,g10
20:23:05  16  ,g11
20:23:05  17  ,g12
20:23:05  18  ,g13
20:23:05  19  ,g14
20:23:05  20  ,g15
20:23:05  21  ,g16
20:23:05  22  ,g17
20:23:05  23  ,g18
20:23:05  24  ,g19
20:23:05  25  ,g20
20:23:05  26  ,g21
20:23:05  27  ,g22
20:23:05  28  ,g23
20:23:05  29  ,g24
20:23:05  30  ,g25
20:23:05  31  ,g26
20:23:05  32  ,g27
20:23:05  33  ,g28
20:23:05  34  ,g29
20:23:05  35  ,g30
20:23:05  36  ,g31
20:23:05  37  ,g32
20:23:05  38  ,g33
20:23:05  39  ,g34
20:23:05  40  ,g35
20:23:05  41  ,g36
20:23:05  42  ,g37
20:23:05  43  ,g38
20:23:05  44  ,g39
20:23:05  45  ,g40
20:23:05  46  ,g41
20:23:05  47  FROM modsrc
20:23:05  48  WHERE gattn IN('nup','up')
20:23:05  49  -- Use only rows which are older than 1 day:
20:23:05  50  AND 1+ydate < '&1'||' '||'&2'
20:23:05  51  AND pair = '&3'
20:23:05  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2011-01-04'||' '||'00:40:00'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.05
20:23:05 SQL> 
20:23:05 SQL> -- rpt
20:23:05 SQL> 
20:23:05 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	    12152
up	     5994

Elapsed: 00:00:00.02
20:23:05 SQL> 
20:23:05 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2011-01-03 00:35:00

Elapsed: 00:00:00.02
20:23:05 SQL> 
20:23:05 SQL> -- Now build model from bme and score sme
20:23:05 SQL> @score1.sql gattn
20:23:05 SQL> --
20:23:05 SQL> -- score1.sql
20:23:05 SQL> --
20:23:05 SQL> 
20:23:05 SQL> -- I use this script to send 5 params to score.sql
20:23:05 SQL> -- which does the heavy lifting of creating an SVM model.
20:23:05 SQL> -- Then at the very end of this script I use the model
20:23:05 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:23:05 SQL> 
20:23:05 SQL> -- I call this script from 2 other scripts:
20:23:05 SQL> -- score1_5min.sql
20:23:05 SQL> -- score1_5min_gattn.sql
20:23:05 SQL> 
20:23:05 SQL> -- The 1st param is the name of the target attribute.
20:23:05 SQL> -- I like to call my target attributes either gatt or gattn.
20:23:05 SQL> 
20:23:05 SQL> -- Demo:
20:23:05 SQL> -- @score1.sql 'gatt'
20:23:05 SQL> -- @score1.sql 'gattn'
20:23:05 SQL> 
20:23:05 SQL> -- Now, I fill up svmc_apply_prep.
20:23:05 SQL> -- I use same model_name used in score.sql
20:23:05 SQL> DEFINE model_name = 'svmfx101'
20:23:05 SQL> DEFINE bldtable	= 'bme'
20:23:05 SQL> DEFINE scoretable = 'sme'
20:23:05 SQL> DEFINE case_id	= 'prdate'
20:23:05 SQL> -- Demo:
20:23:05 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:23:05 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:23:05 SQL> --
20:23:05 SQL> -- score.sql
20:23:05 SQL> --
20:23:05 SQL> 
20:23:05 SQL> -- usage: score.sql
20:23:05 SQL> 
20:23:05 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:23:05 SQL> 
20:23:05 SQL> -- DEFINE target	   = 'gatt'
20:23:05 SQL> -- DEFINE model_name = 'svmfx101'
20:23:05 SQL> -- DEFINE bldtable   = 'bme'
20:23:05 SQL> -- DEFINE scoretable = 'sme'
20:23:05 SQL> -- DEFINE case_id    = 'prdate'
20:23:05 SQL> 
20:23:05 SQL> DEFINE target	= '&1'
20:23:05 SQL> DEFINE model_name = '&2'
20:23:05 SQL> DEFINE bldtable	= '&3'
20:23:05 SQL> DEFINE scoretable = '&4'
20:23:05 SQL> DEFINE case_id	= '&5'
20:23:05 SQL> 
20:23:05 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:23:05 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:23:05 SQL> 
20:23:05 SQL> -- Builds an SVM model using pl/sql.
20:23:05 SQL> 
20:23:05 SQL> -----------------------------------------------------------------------
20:23:05 SQL> --			    BUILD THE MODEL
20:23:05 SQL> -----------------------------------------------------------------------
20:23:05 SQL> 
20:23:05 SQL> -- Cleanup old build data preparation objects for repeat runs
20:23:05 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.01
20:23:05 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:23:05 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:23:05 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.00
20:23:05 SQL> 
20:23:05 SQL> 
20:23:05 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:23:05 SQL> --
20:23:05 SQL> -- DROP	TABLE svmc_settings ;
20:23:05 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:23:05 SQL> -- DELETE svmc_settings;
20:23:05 SQL> 
20:23:05 SQL> -- The default classification algorithm is Naive Bayes. So override
20:23:05 SQL> -- this choice to SVM using a settings table.
20:23:05 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:23:05 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:23:05 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:23:05 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:23:05 SQL> -- models.
20:23:05 SQL> --
20:23:05 SQL> 
20:23:05 SQL> -- Do this once and then comment it out.
20:23:05 SQL> -- That makes script go faster.
20:23:05 SQL> -- BEGIN
20:23:05 SQL> -- -- Populate settings table
20:23:05 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:23:05 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:23:05 SQL> --
20:23:05 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:23:05 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:23:05 SQL> --
20:23:05 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:23:05 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:23:05 SQL> --   COMMIT;
20:23:05 SQL> -- END;
20:23:05 SQL> -- /
20:23:05 SQL> 
20:23:05 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:23:05 SQL> 
20:23:05 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:23:05   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:23:05   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:23:05 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:23:05   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:23:05   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:23:05 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:23:05   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:23:05   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:23:05 SQL> 
20:23:05 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:23:05   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:23:05   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:23:05 SQL> 
20:23:05 SQL> --------------------------------
20:23:05 SQL> -- PREPARE BUILD (TRAINING) DATA
20:23:05 SQL> --
20:23:05 SQL> 
20:23:05 SQL> -- 1. Missing Value treatment for all Predictors and
20:23:05 SQL> -- 2. Outlier Treatment and
20:23:05 SQL> -- 3. Normalization are performed below.
20:23:05 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:23:05 SQL> --    normalized here.
20:23:05 SQL> 
20:23:05 SQL> BEGIN
20:23:05   2  	-- Perform missing value treatment for all predictors
20:23:05   3  	-- create miss tables
20:23:05   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:23:05   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:23:05   6  
20:23:05   7  	-- populate miss tables
20:23:05   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:23:05   9  	  miss_table_name => 'svmc_miss_num',
20:23:05  10  	  data_table_name => '&bldtable',
20:23:05  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:23:05  12  
20:23:05  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:23:05  14  	  miss_table_name => 'svmc_miss_cat',
20:23:05  15  	  data_table_name => '&bldtable',
20:23:05  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:23:05  17  
20:23:05  18  	-- xform input data to replace missing values
20:23:05  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:23:05  20  	  miss_table_name => 'svmc_miss_num',
20:23:05  21  	  data_table_name => '&bldtable',
20:23:05  22  	  xform_view_name => 'xformed_build_miss_num');
20:23:05  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:23:05  24  	  miss_table_name => 'svmc_miss_cat',
20:23:05  25  	  data_table_name => '&bldtable',
20:23:05  26  	  xform_view_name => 'xformed_build_miss_cat');
20:23:05  27  
20:23:05  28  	-- Perform outlier treatment.
20:23:05  29  	-- create clip table
20:23:05  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:23:05  31  
20:23:05  32  	-- populate clip table
20:23:05  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:23:05  34  	  clip_table_name => 'svmc_clip',
20:23:05  35  	  data_table_name => '&bldtable',
20:23:05  36  	  tail_frac	  => 0.025,
20:23:05  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:23:05  38  
20:23:05  39  	-- xform input data to winsorized data
20:23:05  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:23:05  41  	  clip_table_name => 'svmc_clip',
20:23:05  42  	  data_table_name => '&bldtable',
20:23:05  43  	  xform_view_name => 'svmc_winsor');
20:23:05  44  
20:23:05  45  	-- create normalization table
20:23:05  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:23:05  47  
20:23:05  48  	-- populate normalization table based on winsorized data
20:23:05  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:23:05  50  	  norm_table_name => 'svmc_norm',
20:23:05  51  	  data_table_name => 'svmc_winsor',
20:23:05  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:23:05  53  
20:23:05  54  	-- normalize the original data
20:23:05  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:23:05  56  	  norm_table_name => 'svmc_norm',
20:23:05  57  	  data_table_name => '&bldtable',
20:23:05  58  	  xform_view_name => 'svmc_build_prep');
20:23:05  59  END;
20:23:05  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:02.29
20:23:07 SQL> 
20:23:07 SQL> ---------------------
20:23:07 SQL> -- CREATE A NEW MODEL
20:23:07 SQL> --
20:23:07 SQL> -- Cleanup old model with the same name for repeat runs
20:23:07 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:23:07   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:23:07   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.87
20:23:08 SQL> 
20:23:08 SQL> -- Build a new SVM Model
20:23:08 SQL> BEGIN
20:23:08   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:23:08   3  	  model_name	      => '&model_name',
20:23:08   4  	  mining_function     => dbms_data_mining.classification,
20:23:08   5  	  data_table_name     => 'svmc_build_prep',
20:23:08   6  	  case_id_column_name => '&case_id',
20:23:08   7  	  target_column_name  => '&target',
20:23:08   8  	  settings_table_name => 'svmc_settings');
20:23:08   9  END;
20:23:08  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:04.43
20:23:13 SQL> 
20:23:13 SQL> -----------------------------------------------------------------------
20:23:13 SQL> --			       APPLY/score THE MODEL
20:23:13 SQL> -----------------------------------------------------------------------
20:23:13 SQL> 
20:23:13 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:23:13 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:23:13   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:23:13   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:23:13 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:23:13   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:23:13   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:23:13 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:23:13   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:23:13   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:23:13 SQL> -----------------------
20:23:13 SQL> -- PREPARE SCORING DATA
20:23:13 SQL> --
20:23:13 SQL> -- If the data for model creation has been prepared, then the data
20:23:13 SQL> -- to be scored using the model must be prepared in the same manner
20:23:13 SQL> -- in order to obtain meaningful results.
20:23:13 SQL> --
20:23:13 SQL> -- 1. Missing Value treatment for all Predictors and
20:23:13 SQL> -- 2. Normalization
20:23:13 SQL> -- No outlier treatment will be performed during test and apply. The
20:23:13 SQL> -- normalization step is sufficient, since the normalization parameters
20:23:13 SQL> -- already capture the effects of outlier treatment done with build data.
20:23:13 SQL> --
20:23:13 SQL> BEGIN
20:23:13   2  	-- Xform Test data to replace missing values
20:23:13   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:23:13   4  	  miss_table_name => 'svmc_miss_num',
20:23:13   5  	  data_table_name => '&scoretable',
20:23:13   6  	  xform_view_name => 'xformed_apply_miss_num');
20:23:13   7  
20:23:13   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:23:13   9  	  miss_table_name => 'svmc_miss_cat',
20:23:13  10  	  data_table_name => '&scoretable',
20:23:13  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:23:13  12  
20:23:13  13  	-- Normalize the data to be scored
20:23:13  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:23:13  15  	  norm_table_name => 'svmc_norm',
20:23:13  16  	  data_table_name => '&scoretable',
20:23:13  17  	  xform_view_name => 'svmc_apply_prep');
20:23:13  18  END;
20:23:13  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.18
20:23:13 SQL> 
20:23:13 SQL> -- Maybe I already collected a score for this prdate.
20:23:13 SQL> -- DELETE it if I did:
20:23:13 SQL> DELETE svm62scores
20:23:13   2  WHERE score > 0
20:23:13   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:23:13   4  -- I need to supply the target attribute name:
20:23:13   5  AND targ = '&1'
20:23:13   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gattn'

0 rows deleted.

Elapsed: 00:00:00.01
20:23:13 SQL> 
20:23:13 SQL> -- We do a drumroll here:
20:23:13 SQL> 
20:23:13 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:23:13   2  SELECT
20:23:13   3  prdate
20:23:13   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:23:13   5  ,sysdate
20:23:13   6  ,SUBSTR(prdate,1,7)pair
20:23:13   7  ,SUBSTR(prdate,-19)ydate
20:23:13   8  ,'&1'
20:23:13   9  FROM svmc_apply_prep
20:23:13  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gattn'

1 row created.

Elapsed: 00:00:00.05
20:23:13 SQL> @score1_5min_gattn.sql	2010-11-26 04:25:01 aud_usd
20:23:13 SQL> --
20:23:13 SQL> -- score1_5min_gattn.sql
20:23:13 SQL> --
20:23:13 SQL> 
20:23:13 SQL> -- Demo:
20:23:13 SQL> -- @score1_5min_gattn.sql 2010-12-31 20:45:01 aud_usd
20:23:13 SQL> 
20:23:13 SQL> CREATE OR REPLACE VIEW sme AS
20:23:13   2  SELECT
20:23:13   3  prdate
20:23:13   4  ,NULL gattn
20:23:13   5  ,g00
20:23:13   6  ,g01
20:23:13   7  ,g02
20:23:13   8  ,g03
20:23:13   9  ,g04
20:23:13  10  ,g05
20:23:13  11  ,g06
20:23:13  12  ,g07
20:23:13  13  ,g08
20:23:13  14  ,g09
20:23:13  15  ,g10
20:23:13  16  ,g11
20:23:13  17  ,g12
20:23:13  18  ,g13
20:23:13  19  ,g14
20:23:13  20  ,g15
20:23:13  21  ,g16
20:23:13  22  ,g17
20:23:13  23  ,g18
20:23:13  24  ,g19
20:23:13  25  ,g20
20:23:13  26  ,g21
20:23:13  27  ,g22
20:23:13  28  ,g23
20:23:13  29  ,g24
20:23:13  30  ,g25
20:23:13  31  ,g26
20:23:13  32  ,g27
20:23:13  33  ,g28
20:23:13  34  ,g29
20:23:13  35  ,g30
20:23:13  36  ,g31
20:23:13  37  ,g32
20:23:13  38  ,g33
20:23:13  39  ,g34
20:23:13  40  ,g35
20:23:13  41  ,g36
20:23:13  42  ,g37
20:23:13  43  ,g38
20:23:13  44  ,g39
20:23:13  45  ,g40
20:23:13  46  ,g41
20:23:13  47  FROM modsrc
20:23:13  48  WHERE ydate = '&1'||' '||'&2'
20:23:13  49  AND pair = '&3'
20:23:13  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-11-26'||' '||'04:25:01'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:23:13 SQL> 
20:23:13 SQL> -- rpt
20:23:13 SQL> -- We should see just 1 row:
20:23:13 SQL> 
20:23:13 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.01
20:23:13 SQL> 
20:23:13 SQL> -- Build the model:
20:23:13 SQL> CREATE OR REPLACE VIEW bme AS
20:23:13   2  SELECT
20:23:13   3  prdate
20:23:13   4  ,gattn
20:23:13   5  ,g00
20:23:13   6  ,g01
20:23:13   7  ,g02
20:23:13   8  ,g03
20:23:13   9  ,g04
20:23:13  10  ,g05
20:23:13  11  ,g06
20:23:13  12  ,g07
20:23:13  13  ,g08
20:23:13  14  ,g09
20:23:13  15  ,g10
20:23:13  16  ,g11
20:23:13  17  ,g12
20:23:13  18  ,g13
20:23:13  19  ,g14
20:23:13  20  ,g15
20:23:13  21  ,g16
20:23:13  22  ,g17
20:23:13  23  ,g18
20:23:13  24  ,g19
20:23:13  25  ,g20
20:23:13  26  ,g21
20:23:13  27  ,g22
20:23:13  28  ,g23
20:23:13  29  ,g24
20:23:13  30  ,g25
20:23:13  31  ,g26
20:23:13  32  ,g27
20:23:13  33  ,g28
20:23:13  34  ,g29
20:23:13  35  ,g30
20:23:13  36  ,g31
20:23:13  37  ,g32
20:23:13  38  ,g33
20:23:13  39  ,g34
20:23:13  40  ,g35
20:23:13  41  ,g36
20:23:13  42  ,g37
20:23:13  43  ,g38
20:23:13  44  ,g39
20:23:13  45  ,g40
20:23:13  46  ,g41
20:23:13  47  FROM modsrc
20:23:13  48  WHERE gattn IN('nup','up')
20:23:13  49  -- Use only rows which are older than 1 day:
20:23:13  50  AND 1+ydate < '&1'||' '||'&2'
20:23:13  51  AND pair = '&3'
20:23:13  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-11-26'||' '||'04:25:01'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:23:13 SQL> 
20:23:13 SQL> -- rpt
20:23:13 SQL> 
20:23:13 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	     6672
up	     3868

Elapsed: 00:00:00.03
20:23:13 SQL> 
20:23:13 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-11-25 04:20:01

Elapsed: 00:00:00.01
20:23:13 SQL> 
20:23:13 SQL> -- Now build model from bme and score sme
20:23:13 SQL> @score1.sql gattn
20:23:13 SQL> --
20:23:13 SQL> -- score1.sql
20:23:13 SQL> --
20:23:13 SQL> 
20:23:13 SQL> -- I use this script to send 5 params to score.sql
20:23:13 SQL> -- which does the heavy lifting of creating an SVM model.
20:23:13 SQL> -- Then at the very end of this script I use the model
20:23:13 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:23:13 SQL> 
20:23:13 SQL> -- I call this script from 2 other scripts:
20:23:13 SQL> -- score1_5min.sql
20:23:13 SQL> -- score1_5min_gattn.sql
20:23:13 SQL> 
20:23:13 SQL> -- The 1st param is the name of the target attribute.
20:23:13 SQL> -- I like to call my target attributes either gatt or gattn.
20:23:13 SQL> 
20:23:13 SQL> -- Demo:
20:23:13 SQL> -- @score1.sql 'gatt'
20:23:13 SQL> -- @score1.sql 'gattn'
20:23:13 SQL> 
20:23:13 SQL> -- Now, I fill up svmc_apply_prep.
20:23:13 SQL> -- I use same model_name used in score.sql
20:23:13 SQL> DEFINE model_name = 'svmfx101'
20:23:13 SQL> DEFINE bldtable	= 'bme'
20:23:13 SQL> DEFINE scoretable = 'sme'
20:23:13 SQL> DEFINE case_id	= 'prdate'
20:23:13 SQL> -- Demo:
20:23:13 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:23:13 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:23:13 SQL> --
20:23:13 SQL> -- score.sql
20:23:13 SQL> --
20:23:13 SQL> 
20:23:13 SQL> -- usage: score.sql
20:23:13 SQL> 
20:23:13 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:23:13 SQL> 
20:23:13 SQL> -- DEFINE target	   = 'gatt'
20:23:13 SQL> -- DEFINE model_name = 'svmfx101'
20:23:13 SQL> -- DEFINE bldtable   = 'bme'
20:23:13 SQL> -- DEFINE scoretable = 'sme'
20:23:13 SQL> -- DEFINE case_id    = 'prdate'
20:23:13 SQL> 
20:23:13 SQL> DEFINE target	= '&1'
20:23:13 SQL> DEFINE model_name = '&2'
20:23:13 SQL> DEFINE bldtable	= '&3'
20:23:13 SQL> DEFINE scoretable = '&4'
20:23:13 SQL> DEFINE case_id	= '&5'
20:23:13 SQL> 
20:23:13 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:23:13 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:23:13 SQL> 
20:23:13 SQL> -- Builds an SVM model using pl/sql.
20:23:13 SQL> 
20:23:13 SQL> -----------------------------------------------------------------------
20:23:13 SQL> --			    BUILD THE MODEL
20:23:13 SQL> -----------------------------------------------------------------------
20:23:13 SQL> 
20:23:13 SQL> -- Cleanup old build data preparation objects for repeat runs
20:23:13 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.01
20:23:13 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:23:13 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:23:13 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.00
20:23:13 SQL> 
20:23:13 SQL> 
20:23:13 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:23:13 SQL> --
20:23:13 SQL> -- DROP	TABLE svmc_settings ;
20:23:13 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:23:13 SQL> -- DELETE svmc_settings;
20:23:13 SQL> 
20:23:13 SQL> -- The default classification algorithm is Naive Bayes. So override
20:23:13 SQL> -- this choice to SVM using a settings table.
20:23:13 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:23:13 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:23:13 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:23:13 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:23:13 SQL> -- models.
20:23:13 SQL> --
20:23:13 SQL> 
20:23:13 SQL> -- Do this once and then comment it out.
20:23:13 SQL> -- That makes script go faster.
20:23:13 SQL> -- BEGIN
20:23:13 SQL> -- -- Populate settings table
20:23:13 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:23:13 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:23:13 SQL> --
20:23:13 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:23:13 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:23:13 SQL> --
20:23:13 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:23:13 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:23:13 SQL> --   COMMIT;
20:23:13 SQL> -- END;
20:23:13 SQL> -- /
20:23:13 SQL> 
20:23:13 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:23:13 SQL> 
20:23:13 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:23:13   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:23:13   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:23:13 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:23:13   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:23:13   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:23:13 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:23:13   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:23:13   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:23:13 SQL> 
20:23:13 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:23:13   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:23:13   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:23:13 SQL> 
20:23:13 SQL> --------------------------------
20:23:13 SQL> -- PREPARE BUILD (TRAINING) DATA
20:23:13 SQL> --
20:23:13 SQL> 
20:23:13 SQL> -- 1. Missing Value treatment for all Predictors and
20:23:13 SQL> -- 2. Outlier Treatment and
20:23:13 SQL> -- 3. Normalization are performed below.
20:23:13 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:23:13 SQL> --    normalized here.
20:23:13 SQL> 
20:23:13 SQL> BEGIN
20:23:13   2  	-- Perform missing value treatment for all predictors
20:23:13   3  	-- create miss tables
20:23:13   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:23:13   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:23:13   6  
20:23:13   7  	-- populate miss tables
20:23:13   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:23:13   9  	  miss_table_name => 'svmc_miss_num',
20:23:13  10  	  data_table_name => '&bldtable',
20:23:13  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:23:13  12  
20:23:13  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:23:13  14  	  miss_table_name => 'svmc_miss_cat',
20:23:13  15  	  data_table_name => '&bldtable',
20:23:13  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:23:13  17  
20:23:13  18  	-- xform input data to replace missing values
20:23:13  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:23:13  20  	  miss_table_name => 'svmc_miss_num',
20:23:13  21  	  data_table_name => '&bldtable',
20:23:13  22  	  xform_view_name => 'xformed_build_miss_num');
20:23:13  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:23:13  24  	  miss_table_name => 'svmc_miss_cat',
20:23:13  25  	  data_table_name => '&bldtable',
20:23:13  26  	  xform_view_name => 'xformed_build_miss_cat');
20:23:13  27  
20:23:13  28  	-- Perform outlier treatment.
20:23:13  29  	-- create clip table
20:23:13  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:23:13  31  
20:23:13  32  	-- populate clip table
20:23:13  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:23:13  34  	  clip_table_name => 'svmc_clip',
20:23:13  35  	  data_table_name => '&bldtable',
20:23:13  36  	  tail_frac	  => 0.025,
20:23:13  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:23:13  38  
20:23:13  39  	-- xform input data to winsorized data
20:23:13  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:23:13  41  	  clip_table_name => 'svmc_clip',
20:23:13  42  	  data_table_name => '&bldtable',
20:23:13  43  	  xform_view_name => 'svmc_winsor');
20:23:13  44  
20:23:13  45  	-- create normalization table
20:23:13  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:23:13  47  
20:23:13  48  	-- populate normalization table based on winsorized data
20:23:13  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:23:13  50  	  norm_table_name => 'svmc_norm',
20:23:13  51  	  data_table_name => 'svmc_winsor',
20:23:13  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:23:13  53  
20:23:13  54  	-- normalize the original data
20:23:13  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:23:13  56  	  norm_table_name => 'svmc_norm',
20:23:13  57  	  data_table_name => '&bldtable',
20:23:13  58  	  xform_view_name => 'svmc_build_prep');
20:23:13  59  END;
20:23:13  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.69
20:23:15 SQL> 
20:23:15 SQL> ---------------------
20:23:15 SQL> -- CREATE A NEW MODEL
20:23:15 SQL> --
20:23:15 SQL> -- Cleanup old model with the same name for repeat runs
20:23:15 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:23:15   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:23:15   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.69
20:23:17 SQL> 
20:23:17 SQL> -- Build a new SVM Model
20:23:17 SQL> BEGIN
20:23:17   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:23:17   3  	  model_name	      => '&model_name',
20:23:17   4  	  mining_function     => dbms_data_mining.classification,
20:23:17   5  	  data_table_name     => 'svmc_build_prep',
20:23:17   6  	  case_id_column_name => '&case_id',
20:23:17   7  	  target_column_name  => '&target',
20:23:17   8  	  settings_table_name => 'svmc_settings');
20:23:17   9  END;
20:23:17  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:03.96
20:23:21 SQL> 
20:23:21 SQL> -----------------------------------------------------------------------
20:23:21 SQL> --			       APPLY/score THE MODEL
20:23:21 SQL> -----------------------------------------------------------------------
20:23:21 SQL> 
20:23:21 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:23:21 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:23:21   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:23:21   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:23:21 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:23:21   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:23:21   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:23:21 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:23:21   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:23:21   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:23:21 SQL> -----------------------
20:23:21 SQL> -- PREPARE SCORING DATA
20:23:21 SQL> --
20:23:21 SQL> -- If the data for model creation has been prepared, then the data
20:23:21 SQL> -- to be scored using the model must be prepared in the same manner
20:23:21 SQL> -- in order to obtain meaningful results.
20:23:21 SQL> --
20:23:21 SQL> -- 1. Missing Value treatment for all Predictors and
20:23:21 SQL> -- 2. Normalization
20:23:21 SQL> -- No outlier treatment will be performed during test and apply. The
20:23:21 SQL> -- normalization step is sufficient, since the normalization parameters
20:23:21 SQL> -- already capture the effects of outlier treatment done with build data.
20:23:21 SQL> --
20:23:21 SQL> BEGIN
20:23:21   2  	-- Xform Test data to replace missing values
20:23:21   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:23:21   4  	  miss_table_name => 'svmc_miss_num',
20:23:21   5  	  data_table_name => '&scoretable',
20:23:21   6  	  xform_view_name => 'xformed_apply_miss_num');
20:23:21   7  
20:23:21   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:23:21   9  	  miss_table_name => 'svmc_miss_cat',
20:23:21  10  	  data_table_name => '&scoretable',
20:23:21  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:23:21  12  
20:23:21  13  	-- Normalize the data to be scored
20:23:21  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:23:21  15  	  norm_table_name => 'svmc_norm',
20:23:21  16  	  data_table_name => '&scoretable',
20:23:21  17  	  xform_view_name => 'svmc_apply_prep');
20:23:21  18  END;
20:23:21  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.18
20:23:21 SQL> 
20:23:21 SQL> -- Maybe I already collected a score for this prdate.
20:23:21 SQL> -- DELETE it if I did:
20:23:21 SQL> DELETE svm62scores
20:23:21   2  WHERE score > 0
20:23:21   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:23:21   4  -- I need to supply the target attribute name:
20:23:21   5  AND targ = '&1'
20:23:21   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gattn'

0 rows deleted.

Elapsed: 00:00:00.02
20:23:21 SQL> 
20:23:21 SQL> -- We do a drumroll here:
20:23:21 SQL> 
20:23:21 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:23:21   2  SELECT
20:23:21   3  prdate
20:23:21   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:23:21   5  ,sysdate
20:23:21   6  ,SUBSTR(prdate,1,7)pair
20:23:21   7  ,SUBSTR(prdate,-19)ydate
20:23:21   8  ,'&1'
20:23:21   9  FROM svmc_apply_prep
20:23:21  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gattn'

1 row created.

Elapsed: 00:00:00.05
20:23:21 SQL> @score1_5min_gattn.sql	2010-12-16 14:45:00 aud_usd
20:23:21 SQL> --
20:23:21 SQL> -- score1_5min_gattn.sql
20:23:21 SQL> --
20:23:21 SQL> 
20:23:21 SQL> -- Demo:
20:23:21 SQL> -- @score1_5min_gattn.sql 2010-12-31 20:45:01 aud_usd
20:23:21 SQL> 
20:23:21 SQL> CREATE OR REPLACE VIEW sme AS
20:23:21   2  SELECT
20:23:21   3  prdate
20:23:21   4  ,NULL gattn
20:23:21   5  ,g00
20:23:21   6  ,g01
20:23:21   7  ,g02
20:23:21   8  ,g03
20:23:21   9  ,g04
20:23:21  10  ,g05
20:23:21  11  ,g06
20:23:21  12  ,g07
20:23:21  13  ,g08
20:23:21  14  ,g09
20:23:21  15  ,g10
20:23:21  16  ,g11
20:23:21  17  ,g12
20:23:21  18  ,g13
20:23:21  19  ,g14
20:23:21  20  ,g15
20:23:21  21  ,g16
20:23:21  22  ,g17
20:23:21  23  ,g18
20:23:21  24  ,g19
20:23:21  25  ,g20
20:23:21  26  ,g21
20:23:21  27  ,g22
20:23:21  28  ,g23
20:23:21  29  ,g24
20:23:21  30  ,g25
20:23:21  31  ,g26
20:23:21  32  ,g27
20:23:21  33  ,g28
20:23:21  34  ,g29
20:23:21  35  ,g30
20:23:21  36  ,g31
20:23:21  37  ,g32
20:23:21  38  ,g33
20:23:21  39  ,g34
20:23:21  40  ,g35
20:23:21  41  ,g36
20:23:21  42  ,g37
20:23:21  43  ,g38
20:23:21  44  ,g39
20:23:21  45  ,g40
20:23:21  46  ,g41
20:23:21  47  FROM modsrc
20:23:21  48  WHERE ydate = '&1'||' '||'&2'
20:23:21  49  AND pair = '&3'
20:23:21  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-12-16'||' '||'14:45:00'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.05
20:23:21 SQL> 
20:23:21 SQL> -- rpt
20:23:21 SQL> -- We should see just 1 row:
20:23:21 SQL> 
20:23:21 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.02
20:23:21 SQL> 
20:23:21 SQL> -- Build the model:
20:23:21 SQL> CREATE OR REPLACE VIEW bme AS
20:23:21   2  SELECT
20:23:21   3  prdate
20:23:21   4  ,gattn
20:23:21   5  ,g00
20:23:21   6  ,g01
20:23:21   7  ,g02
20:23:21   8  ,g03
20:23:21   9  ,g04
20:23:21  10  ,g05
20:23:21  11  ,g06
20:23:21  12  ,g07
20:23:21  13  ,g08
20:23:21  14  ,g09
20:23:21  15  ,g10
20:23:21  16  ,g11
20:23:21  17  ,g12
20:23:21  18  ,g13
20:23:21  19  ,g14
20:23:21  20  ,g15
20:23:21  21  ,g16
20:23:21  22  ,g17
20:23:21  23  ,g18
20:23:21  24  ,g19
20:23:21  25  ,g20
20:23:21  26  ,g21
20:23:21  27  ,g22
20:23:21  28  ,g23
20:23:21  29  ,g24
20:23:21  30  ,g25
20:23:21  31  ,g26
20:23:21  32  ,g27
20:23:21  33  ,g28
20:23:21  34  ,g29
20:23:21  35  ,g30
20:23:21  36  ,g31
20:23:21  37  ,g32
20:23:21  38  ,g33
20:23:21  39  ,g34
20:23:21  40  ,g35
20:23:21  41  ,g36
20:23:21  42  ,g37
20:23:21  43  ,g38
20:23:21  44  ,g39
20:23:21  45  ,g40
20:23:21  46  ,g41
20:23:21  47  FROM modsrc
20:23:21  48  WHERE gattn IN('nup','up')
20:23:21  49  -- Use only rows which are older than 1 day:
20:23:21  50  AND 1+ydate < '&1'||' '||'&2'
20:23:21  51  AND pair = '&3'
20:23:21  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-12-16'||' '||'14:45:00'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.06
20:23:21 SQL> 
20:23:21 SQL> -- rpt
20:23:21 SQL> 
20:23:21 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	     9377
up	     5288

Elapsed: 00:00:00.02
20:23:21 SQL> 
20:23:21 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-12-15 14:40:00

Elapsed: 00:00:00.01
20:23:21 SQL> 
20:23:21 SQL> -- Now build model from bme and score sme
20:23:21 SQL> @score1.sql gattn
20:23:21 SQL> --
20:23:21 SQL> -- score1.sql
20:23:21 SQL> --
20:23:21 SQL> 
20:23:21 SQL> -- I use this script to send 5 params to score.sql
20:23:21 SQL> -- which does the heavy lifting of creating an SVM model.
20:23:21 SQL> -- Then at the very end of this script I use the model
20:23:21 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:23:21 SQL> 
20:23:21 SQL> -- I call this script from 2 other scripts:
20:23:21 SQL> -- score1_5min.sql
20:23:21 SQL> -- score1_5min_gattn.sql
20:23:21 SQL> 
20:23:21 SQL> -- The 1st param is the name of the target attribute.
20:23:21 SQL> -- I like to call my target attributes either gatt or gattn.
20:23:21 SQL> 
20:23:21 SQL> -- Demo:
20:23:21 SQL> -- @score1.sql 'gatt'
20:23:21 SQL> -- @score1.sql 'gattn'
20:23:21 SQL> 
20:23:21 SQL> -- Now, I fill up svmc_apply_prep.
20:23:21 SQL> -- I use same model_name used in score.sql
20:23:21 SQL> DEFINE model_name = 'svmfx101'
20:23:21 SQL> DEFINE bldtable	= 'bme'
20:23:21 SQL> DEFINE scoretable = 'sme'
20:23:21 SQL> DEFINE case_id	= 'prdate'
20:23:21 SQL> -- Demo:
20:23:21 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:23:21 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:23:21 SQL> --
20:23:21 SQL> -- score.sql
20:23:21 SQL> --
20:23:21 SQL> 
20:23:21 SQL> -- usage: score.sql
20:23:21 SQL> 
20:23:21 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:23:21 SQL> 
20:23:21 SQL> -- DEFINE target	   = 'gatt'
20:23:21 SQL> -- DEFINE model_name = 'svmfx101'
20:23:21 SQL> -- DEFINE bldtable   = 'bme'
20:23:21 SQL> -- DEFINE scoretable = 'sme'
20:23:21 SQL> -- DEFINE case_id    = 'prdate'
20:23:21 SQL> 
20:23:21 SQL> DEFINE target	= '&1'
20:23:21 SQL> DEFINE model_name = '&2'
20:23:21 SQL> DEFINE bldtable	= '&3'
20:23:21 SQL> DEFINE scoretable = '&4'
20:23:21 SQL> DEFINE case_id	= '&5'
20:23:21 SQL> 
20:23:21 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:23:21 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:23:21 SQL> 
20:23:21 SQL> -- Builds an SVM model using pl/sql.
20:23:21 SQL> 
20:23:21 SQL> -----------------------------------------------------------------------
20:23:21 SQL> --			    BUILD THE MODEL
20:23:21 SQL> -----------------------------------------------------------------------
20:23:21 SQL> 
20:23:21 SQL> -- Cleanup old build data preparation objects for repeat runs
20:23:21 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.00
20:23:21 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:23:21 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:23:21 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.01
20:23:21 SQL> 
20:23:21 SQL> 
20:23:21 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:23:21 SQL> --
20:23:21 SQL> -- DROP	TABLE svmc_settings ;
20:23:21 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:23:21 SQL> -- DELETE svmc_settings;
20:23:21 SQL> 
20:23:21 SQL> -- The default classification algorithm is Naive Bayes. So override
20:23:21 SQL> -- this choice to SVM using a settings table.
20:23:21 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:23:21 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:23:21 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:23:21 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:23:21 SQL> -- models.
20:23:21 SQL> --
20:23:21 SQL> 
20:23:21 SQL> -- Do this once and then comment it out.
20:23:21 SQL> -- That makes script go faster.
20:23:21 SQL> -- BEGIN
20:23:21 SQL> -- -- Populate settings table
20:23:21 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:23:21 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:23:21 SQL> --
20:23:21 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:23:21 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:23:21 SQL> --
20:23:21 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:23:21 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:23:21 SQL> --   COMMIT;
20:23:21 SQL> -- END;
20:23:21 SQL> -- /
20:23:21 SQL> 
20:23:21 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:23:21 SQL> 
20:23:21 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:23:21   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:23:21   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
20:23:21 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:23:21   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:23:21   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:23:21 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:23:21   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:23:21   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:23:21 SQL> 
20:23:21 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:23:21   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:23:21   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:23:21 SQL> 
20:23:21 SQL> --------------------------------
20:23:21 SQL> -- PREPARE BUILD (TRAINING) DATA
20:23:21 SQL> --
20:23:21 SQL> 
20:23:21 SQL> -- 1. Missing Value treatment for all Predictors and
20:23:21 SQL> -- 2. Outlier Treatment and
20:23:21 SQL> -- 3. Normalization are performed below.
20:23:21 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:23:21 SQL> --    normalized here.
20:23:21 SQL> 
20:23:21 SQL> BEGIN
20:23:21   2  	-- Perform missing value treatment for all predictors
20:23:21   3  	-- create miss tables
20:23:21   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:23:21   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:23:21   6  
20:23:21   7  	-- populate miss tables
20:23:21   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:23:21   9  	  miss_table_name => 'svmc_miss_num',
20:23:21  10  	  data_table_name => '&bldtable',
20:23:21  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:23:21  12  
20:23:21  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:23:21  14  	  miss_table_name => 'svmc_miss_cat',
20:23:21  15  	  data_table_name => '&bldtable',
20:23:21  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:23:21  17  
20:23:21  18  	-- xform input data to replace missing values
20:23:21  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:23:21  20  	  miss_table_name => 'svmc_miss_num',
20:23:21  21  	  data_table_name => '&bldtable',
20:23:21  22  	  xform_view_name => 'xformed_build_miss_num');
20:23:21  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:23:21  24  	  miss_table_name => 'svmc_miss_cat',
20:23:21  25  	  data_table_name => '&bldtable',
20:23:21  26  	  xform_view_name => 'xformed_build_miss_cat');
20:23:21  27  
20:23:21  28  	-- Perform outlier treatment.
20:23:21  29  	-- create clip table
20:23:21  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:23:21  31  
20:23:21  32  	-- populate clip table
20:23:21  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:23:21  34  	  clip_table_name => 'svmc_clip',
20:23:21  35  	  data_table_name => '&bldtable',
20:23:21  36  	  tail_frac	  => 0.025,
20:23:21  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:23:21  38  
20:23:21  39  	-- xform input data to winsorized data
20:23:21  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:23:21  41  	  clip_table_name => 'svmc_clip',
20:23:21  42  	  data_table_name => '&bldtable',
20:23:21  43  	  xform_view_name => 'svmc_winsor');
20:23:21  44  
20:23:21  45  	-- create normalization table
20:23:21  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:23:21  47  
20:23:21  48  	-- populate normalization table based on winsorized data
20:23:21  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:23:21  50  	  norm_table_name => 'svmc_norm',
20:23:21  51  	  data_table_name => 'svmc_winsor',
20:23:21  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:23:21  53  
20:23:21  54  	-- normalize the original data
20:23:21  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:23:21  56  	  norm_table_name => 'svmc_norm',
20:23:21  57  	  data_table_name => '&bldtable',
20:23:21  58  	  xform_view_name => 'svmc_build_prep');
20:23:21  59  END;
20:23:21  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:02.04
20:23:23 SQL> 
20:23:23 SQL> ---------------------
20:23:23 SQL> -- CREATE A NEW MODEL
20:23:23 SQL> --
20:23:23 SQL> -- Cleanup old model with the same name for repeat runs
20:23:23 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:23:23   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:23:23   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.05
20:23:24 SQL> 
20:23:24 SQL> -- Build a new SVM Model
20:23:24 SQL> BEGIN
20:23:24   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:23:24   3  	  model_name	      => '&model_name',
20:23:24   4  	  mining_function     => dbms_data_mining.classification,
20:23:24   5  	  data_table_name     => 'svmc_build_prep',
20:23:24   6  	  case_id_column_name => '&case_id',
20:23:24   7  	  target_column_name  => '&target',
20:23:24   8  	  settings_table_name => 'svmc_settings');
20:23:24   9  END;
20:23:24  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:04.70
20:23:29 SQL> 
20:23:29 SQL> -----------------------------------------------------------------------
20:23:29 SQL> --			       APPLY/score THE MODEL
20:23:29 SQL> -----------------------------------------------------------------------
20:23:29 SQL> 
20:23:29 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:23:29 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:23:29   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:23:29   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:23:29 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:23:29   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:23:29   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:23:29 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:23:29   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:23:29   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:23:29 SQL> -----------------------
20:23:29 SQL> -- PREPARE SCORING DATA
20:23:29 SQL> --
20:23:29 SQL> -- If the data for model creation has been prepared, then the data
20:23:29 SQL> -- to be scored using the model must be prepared in the same manner
20:23:29 SQL> -- in order to obtain meaningful results.
20:23:29 SQL> --
20:23:29 SQL> -- 1. Missing Value treatment for all Predictors and
20:23:29 SQL> -- 2. Normalization
20:23:29 SQL> -- No outlier treatment will be performed during test and apply. The
20:23:29 SQL> -- normalization step is sufficient, since the normalization parameters
20:23:29 SQL> -- already capture the effects of outlier treatment done with build data.
20:23:29 SQL> --
20:23:29 SQL> BEGIN
20:23:29   2  	-- Xform Test data to replace missing values
20:23:29   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:23:29   4  	  miss_table_name => 'svmc_miss_num',
20:23:29   5  	  data_table_name => '&scoretable',
20:23:29   6  	  xform_view_name => 'xformed_apply_miss_num');
20:23:29   7  
20:23:29   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:23:29   9  	  miss_table_name => 'svmc_miss_cat',
20:23:29  10  	  data_table_name => '&scoretable',
20:23:29  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:23:29  12  
20:23:29  13  	-- Normalize the data to be scored
20:23:29  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:23:29  15  	  norm_table_name => 'svmc_norm',
20:23:29  16  	  data_table_name => '&scoretable',
20:23:29  17  	  xform_view_name => 'svmc_apply_prep');
20:23:29  18  END;
20:23:29  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.18
20:23:29 SQL> 
20:23:29 SQL> -- Maybe I already collected a score for this prdate.
20:23:29 SQL> -- DELETE it if I did:
20:23:29 SQL> DELETE svm62scores
20:23:29   2  WHERE score > 0
20:23:29   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:23:29   4  -- I need to supply the target attribute name:
20:23:29   5  AND targ = '&1'
20:23:29   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gattn'

0 rows deleted.

Elapsed: 00:00:00.02
20:23:29 SQL> 
20:23:29 SQL> -- We do a drumroll here:
20:23:29 SQL> 
20:23:29 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:23:29   2  SELECT
20:23:29   3  prdate
20:23:29   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:23:29   5  ,sysdate
20:23:29   6  ,SUBSTR(prdate,1,7)pair
20:23:29   7  ,SUBSTR(prdate,-19)ydate
20:23:29   8  ,'&1'
20:23:29   9  FROM svmc_apply_prep
20:23:29  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gattn'

1 row created.

Elapsed: 00:00:00.05
20:23:29 SQL> @score1_5min_gattn.sql	2010-10-13 09:20:01 aud_usd
20:23:29 SQL> --
20:23:29 SQL> -- score1_5min_gattn.sql
20:23:29 SQL> --
20:23:29 SQL> 
20:23:29 SQL> -- Demo:
20:23:29 SQL> -- @score1_5min_gattn.sql 2010-12-31 20:45:01 aud_usd
20:23:29 SQL> 
20:23:29 SQL> CREATE OR REPLACE VIEW sme AS
20:23:29   2  SELECT
20:23:29   3  prdate
20:23:29   4  ,NULL gattn
20:23:29   5  ,g00
20:23:29   6  ,g01
20:23:29   7  ,g02
20:23:29   8  ,g03
20:23:29   9  ,g04
20:23:29  10  ,g05
20:23:29  11  ,g06
20:23:29  12  ,g07
20:23:29  13  ,g08
20:23:29  14  ,g09
20:23:29  15  ,g10
20:23:29  16  ,g11
20:23:29  17  ,g12
20:23:29  18  ,g13
20:23:29  19  ,g14
20:23:29  20  ,g15
20:23:29  21  ,g16
20:23:29  22  ,g17
20:23:29  23  ,g18
20:23:29  24  ,g19
20:23:29  25  ,g20
20:23:29  26  ,g21
20:23:29  27  ,g22
20:23:29  28  ,g23
20:23:29  29  ,g24
20:23:29  30  ,g25
20:23:29  31  ,g26
20:23:29  32  ,g27
20:23:29  33  ,g28
20:23:29  34  ,g29
20:23:29  35  ,g30
20:23:29  36  ,g31
20:23:29  37  ,g32
20:23:29  38  ,g33
20:23:29  39  ,g34
20:23:29  40  ,g35
20:23:29  41  ,g36
20:23:29  42  ,g37
20:23:29  43  ,g38
20:23:29  44  ,g39
20:23:29  45  ,g40
20:23:29  46  ,g41
20:23:29  47  FROM modsrc
20:23:29  48  WHERE ydate = '&1'||' '||'&2'
20:23:29  49  AND pair = '&3'
20:23:29  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-10-13'||' '||'09:20:01'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:23:29 SQL> 
20:23:29 SQL> -- rpt
20:23:29 SQL> -- We should see just 1 row:
20:23:29 SQL> 
20:23:29 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.01
20:23:29 SQL> 
20:23:29 SQL> -- Build the model:
20:23:29 SQL> CREATE OR REPLACE VIEW bme AS
20:23:29   2  SELECT
20:23:29   3  prdate
20:23:29   4  ,gattn
20:23:29   5  ,g00
20:23:29   6  ,g01
20:23:29   7  ,g02
20:23:29   8  ,g03
20:23:29   9  ,g04
20:23:29  10  ,g05
20:23:29  11  ,g06
20:23:29  12  ,g07
20:23:29  13  ,g08
20:23:29  14  ,g09
20:23:29  15  ,g10
20:23:29  16  ,g11
20:23:29  17  ,g12
20:23:29  18  ,g13
20:23:29  19  ,g14
20:23:29  20  ,g15
20:23:29  21  ,g16
20:23:29  22  ,g17
20:23:29  23  ,g18
20:23:29  24  ,g19
20:23:29  25  ,g20
20:23:29  26  ,g21
20:23:29  27  ,g22
20:23:29  28  ,g23
20:23:29  29  ,g24
20:23:29  30  ,g25
20:23:29  31  ,g26
20:23:29  32  ,g27
20:23:29  33  ,g28
20:23:29  34  ,g29
20:23:29  35  ,g30
20:23:29  36  ,g31
20:23:29  37  ,g32
20:23:29  38  ,g33
20:23:29  39  ,g34
20:23:29  40  ,g35
20:23:29  41  ,g36
20:23:29  42  ,g37
20:23:29  43  ,g38
20:23:29  44  ,g39
20:23:29  45  ,g40
20:23:29  46  ,g41
20:23:29  47  FROM modsrc
20:23:29  48  WHERE gattn IN('nup','up')
20:23:29  49  -- Use only rows which are older than 1 day:
20:23:29  50  AND 1+ydate < '&1'||' '||'&2'
20:23:29  51  AND pair = '&3'
20:23:29  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-10-13'||' '||'09:20:01'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.05
20:23:29 SQL> 
20:23:29 SQL> -- rpt
20:23:29 SQL> 
20:23:29 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	      884
up	      437

Elapsed: 00:00:00.02
20:23:29 SQL> 
20:23:29 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-10-12 09:15:01

Elapsed: 00:00:00.02
20:23:29 SQL> 
20:23:29 SQL> -- Now build model from bme and score sme
20:23:29 SQL> @score1.sql gattn
20:23:29 SQL> --
20:23:29 SQL> -- score1.sql
20:23:29 SQL> --
20:23:29 SQL> 
20:23:29 SQL> -- I use this script to send 5 params to score.sql
20:23:29 SQL> -- which does the heavy lifting of creating an SVM model.
20:23:29 SQL> -- Then at the very end of this script I use the model
20:23:29 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:23:29 SQL> 
20:23:29 SQL> -- I call this script from 2 other scripts:
20:23:29 SQL> -- score1_5min.sql
20:23:29 SQL> -- score1_5min_gattn.sql
20:23:29 SQL> 
20:23:29 SQL> -- The 1st param is the name of the target attribute.
20:23:29 SQL> -- I like to call my target attributes either gatt or gattn.
20:23:29 SQL> 
20:23:29 SQL> -- Demo:
20:23:29 SQL> -- @score1.sql 'gatt'
20:23:29 SQL> -- @score1.sql 'gattn'
20:23:29 SQL> 
20:23:29 SQL> -- Now, I fill up svmc_apply_prep.
20:23:29 SQL> -- I use same model_name used in score.sql
20:23:29 SQL> DEFINE model_name = 'svmfx101'
20:23:29 SQL> DEFINE bldtable	= 'bme'
20:23:29 SQL> DEFINE scoretable = 'sme'
20:23:29 SQL> DEFINE case_id	= 'prdate'
20:23:29 SQL> -- Demo:
20:23:29 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:23:29 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:23:29 SQL> --
20:23:29 SQL> -- score.sql
20:23:29 SQL> --
20:23:29 SQL> 
20:23:29 SQL> -- usage: score.sql
20:23:29 SQL> 
20:23:29 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:23:29 SQL> 
20:23:29 SQL> -- DEFINE target	   = 'gatt'
20:23:29 SQL> -- DEFINE model_name = 'svmfx101'
20:23:29 SQL> -- DEFINE bldtable   = 'bme'
20:23:29 SQL> -- DEFINE scoretable = 'sme'
20:23:29 SQL> -- DEFINE case_id    = 'prdate'
20:23:29 SQL> 
20:23:29 SQL> DEFINE target	= '&1'
20:23:29 SQL> DEFINE model_name = '&2'
20:23:29 SQL> DEFINE bldtable	= '&3'
20:23:29 SQL> DEFINE scoretable = '&4'
20:23:29 SQL> DEFINE case_id	= '&5'
20:23:29 SQL> 
20:23:29 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:23:29 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:23:29 SQL> 
20:23:29 SQL> -- Builds an SVM model using pl/sql.
20:23:29 SQL> 
20:23:29 SQL> -----------------------------------------------------------------------
20:23:29 SQL> --			    BUILD THE MODEL
20:23:29 SQL> -----------------------------------------------------------------------
20:23:29 SQL> 
20:23:29 SQL> -- Cleanup old build data preparation objects for repeat runs
20:23:29 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.01
20:23:29 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:23:29 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:23:29 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.00
20:23:29 SQL> 
20:23:29 SQL> 
20:23:29 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:23:29 SQL> --
20:23:29 SQL> -- DROP	TABLE svmc_settings ;
20:23:29 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:23:29 SQL> -- DELETE svmc_settings;
20:23:29 SQL> 
20:23:29 SQL> -- The default classification algorithm is Naive Bayes. So override
20:23:29 SQL> -- this choice to SVM using a settings table.
20:23:29 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:23:29 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:23:29 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:23:29 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:23:29 SQL> -- models.
20:23:29 SQL> --
20:23:29 SQL> 
20:23:29 SQL> -- Do this once and then comment it out.
20:23:29 SQL> -- That makes script go faster.
20:23:29 SQL> -- BEGIN
20:23:29 SQL> -- -- Populate settings table
20:23:29 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:23:29 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:23:29 SQL> --
20:23:29 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:23:29 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:23:29 SQL> --
20:23:29 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:23:29 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:23:29 SQL> --   COMMIT;
20:23:29 SQL> -- END;
20:23:30 SQL> -- /
20:23:30 SQL> 
20:23:30 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:23:30 SQL> 
20:23:30 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:23:30   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:23:30   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:23:30 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:23:30   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:23:30   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:23:30 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:23:30   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:23:30   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:23:30 SQL> 
20:23:30 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:23:30   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:23:30   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:23:30 SQL> 
20:23:30 SQL> --------------------------------
20:23:30 SQL> -- PREPARE BUILD (TRAINING) DATA
20:23:30 SQL> --
20:23:30 SQL> 
20:23:30 SQL> -- 1. Missing Value treatment for all Predictors and
20:23:30 SQL> -- 2. Outlier Treatment and
20:23:30 SQL> -- 3. Normalization are performed below.
20:23:30 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:23:30 SQL> --    normalized here.
20:23:30 SQL> 
20:23:30 SQL> BEGIN
20:23:30   2  	-- Perform missing value treatment for all predictors
20:23:30   3  	-- create miss tables
20:23:30   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:23:30   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:23:30   6  
20:23:30   7  	-- populate miss tables
20:23:30   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:23:30   9  	  miss_table_name => 'svmc_miss_num',
20:23:30  10  	  data_table_name => '&bldtable',
20:23:30  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:23:30  12  
20:23:30  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:23:30  14  	  miss_table_name => 'svmc_miss_cat',
20:23:30  15  	  data_table_name => '&bldtable',
20:23:30  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:23:30  17  
20:23:30  18  	-- xform input data to replace missing values
20:23:30  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:23:30  20  	  miss_table_name => 'svmc_miss_num',
20:23:30  21  	  data_table_name => '&bldtable',
20:23:30  22  	  xform_view_name => 'xformed_build_miss_num');
20:23:30  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:23:30  24  	  miss_table_name => 'svmc_miss_cat',
20:23:30  25  	  data_table_name => '&bldtable',
20:23:30  26  	  xform_view_name => 'xformed_build_miss_cat');
20:23:30  27  
20:23:30  28  	-- Perform outlier treatment.
20:23:30  29  	-- create clip table
20:23:30  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:23:30  31  
20:23:30  32  	-- populate clip table
20:23:30  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:23:30  34  	  clip_table_name => 'svmc_clip',
20:23:30  35  	  data_table_name => '&bldtable',
20:23:30  36  	  tail_frac	  => 0.025,
20:23:30  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:23:30  38  
20:23:30  39  	-- xform input data to winsorized data
20:23:30  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:23:30  41  	  clip_table_name => 'svmc_clip',
20:23:30  42  	  data_table_name => '&bldtable',
20:23:30  43  	  xform_view_name => 'svmc_winsor');
20:23:30  44  
20:23:30  45  	-- create normalization table
20:23:30  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:23:30  47  
20:23:30  48  	-- populate normalization table based on winsorized data
20:23:30  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:23:30  50  	  norm_table_name => 'svmc_norm',
20:23:30  51  	  data_table_name => 'svmc_winsor',
20:23:30  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:23:30  53  
20:23:30  54  	-- normalize the original data
20:23:30  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:23:30  56  	  norm_table_name => 'svmc_norm',
20:23:30  57  	  data_table_name => '&bldtable',
20:23:30  58  	  xform_view_name => 'svmc_build_prep');
20:23:30  59  END;
20:23:30  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.01
20:23:31 SQL> 
20:23:31 SQL> ---------------------
20:23:31 SQL> -- CREATE A NEW MODEL
20:23:31 SQL> --
20:23:31 SQL> -- Cleanup old model with the same name for repeat runs
20:23:31 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:23:31   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:23:31   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.07
20:23:32 SQL> 
20:23:32 SQL> -- Build a new SVM Model
20:23:32 SQL> BEGIN
20:23:32   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:23:32   3  	  model_name	      => '&model_name',
20:23:32   4  	  mining_function     => dbms_data_mining.classification,
20:23:32   5  	  data_table_name     => 'svmc_build_prep',
20:23:32   6  	  case_id_column_name => '&case_id',
20:23:32   7  	  target_column_name  => '&target',
20:23:32   8  	  settings_table_name => 'svmc_settings');
20:23:32   9  END;
20:23:32  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.95
20:23:34 SQL> 
20:23:34 SQL> -----------------------------------------------------------------------
20:23:34 SQL> --			       APPLY/score THE MODEL
20:23:34 SQL> -----------------------------------------------------------------------
20:23:34 SQL> 
20:23:34 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:23:34 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:23:34   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:23:34   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:23:34 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:23:34   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:23:34   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:23:34 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:23:34   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:23:34   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:23:34 SQL> -----------------------
20:23:34 SQL> -- PREPARE SCORING DATA
20:23:34 SQL> --
20:23:34 SQL> -- If the data for model creation has been prepared, then the data
20:23:34 SQL> -- to be scored using the model must be prepared in the same manner
20:23:34 SQL> -- in order to obtain meaningful results.
20:23:34 SQL> --
20:23:34 SQL> -- 1. Missing Value treatment for all Predictors and
20:23:34 SQL> -- 2. Normalization
20:23:34 SQL> -- No outlier treatment will be performed during test and apply. The
20:23:34 SQL> -- normalization step is sufficient, since the normalization parameters
20:23:34 SQL> -- already capture the effects of outlier treatment done with build data.
20:23:34 SQL> --
20:23:34 SQL> BEGIN
20:23:34   2  	-- Xform Test data to replace missing values
20:23:34   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:23:34   4  	  miss_table_name => 'svmc_miss_num',
20:23:34   5  	  data_table_name => '&scoretable',
20:23:34   6  	  xform_view_name => 'xformed_apply_miss_num');
20:23:34   7  
20:23:34   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:23:34   9  	  miss_table_name => 'svmc_miss_cat',
20:23:34  10  	  data_table_name => '&scoretable',
20:23:34  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:23:34  12  
20:23:34  13  	-- Normalize the data to be scored
20:23:34  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:23:34  15  	  norm_table_name => 'svmc_norm',
20:23:34  16  	  data_table_name => '&scoretable',
20:23:34  17  	  xform_view_name => 'svmc_apply_prep');
20:23:34  18  END;
20:23:34  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.17
20:23:34 SQL> 
20:23:34 SQL> -- Maybe I already collected a score for this prdate.
20:23:34 SQL> -- DELETE it if I did:
20:23:34 SQL> DELETE svm62scores
20:23:34   2  WHERE score > 0
20:23:34   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:23:34   4  -- I need to supply the target attribute name:
20:23:34   5  AND targ = '&1'
20:23:34   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gattn'

0 rows deleted.

Elapsed: 00:00:00.02
20:23:34 SQL> 
20:23:34 SQL> -- We do a drumroll here:
20:23:34 SQL> 
20:23:34 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:23:34   2  SELECT
20:23:34   3  prdate
20:23:34   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:23:34   5  ,sysdate
20:23:34   6  ,SUBSTR(prdate,1,7)pair
20:23:34   7  ,SUBSTR(prdate,-19)ydate
20:23:34   8  ,'&1'
20:23:34   9  FROM svmc_apply_prep
20:23:34  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gattn'

1 row created.

Elapsed: 00:00:00.05
20:23:34 SQL> @score1_5min.sql	      2010-12-22 06:40:00 aud_usd
20:23:34 SQL> --
20:23:34 SQL> -- score1_5min.sql
20:23:34 SQL> --
20:23:34 SQL> 
20:23:34 SQL> -- Demo:
20:23:34 SQL> -- @score1_5min.sql 2010-12-31 20:45:01 aud_usd
20:23:34 SQL> 
20:23:34 SQL> CREATE OR REPLACE VIEW sme AS
20:23:34   2  SELECT
20:23:34   3  prdate
20:23:34   4  ,NULL gatt
20:23:34   5  ,g00
20:23:34   6  ,g01
20:23:34   7  ,g02
20:23:34   8  ,g03
20:23:34   9  ,g04
20:23:34  10  ,g05
20:23:34  11  ,g06
20:23:34  12  ,g07
20:23:34  13  ,g08
20:23:34  14  ,g09
20:23:34  15  ,g10
20:23:34  16  ,g11
20:23:34  17  ,g12
20:23:34  18  ,g13
20:23:34  19  ,g14
20:23:34  20  ,g15
20:23:34  21  ,g16
20:23:34  22  ,g17
20:23:34  23  ,g18
20:23:34  24  ,g19
20:23:34  25  ,g20
20:23:34  26  ,g21
20:23:34  27  ,g22
20:23:34  28  ,g23
20:23:34  29  ,g24
20:23:34  30  ,g25
20:23:34  31  ,g26
20:23:34  32  ,g27
20:23:34  33  ,g28
20:23:34  34  ,g29
20:23:34  35  ,g30
20:23:34  36  ,g31
20:23:34  37  ,g32
20:23:34  38  ,g33
20:23:34  39  ,g34
20:23:34  40  ,g35
20:23:34  41  ,g36
20:23:34  42  ,g37
20:23:34  43  ,g38
20:23:34  44  ,g39
20:23:34  45  ,g40
20:23:34  46  ,g41
20:23:34  47  FROM modsrc
20:23:34  48  WHERE ydate = '&1'||' '||'&2'
20:23:34  49  AND pair = '&3'
20:23:34  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-12-22'||' '||'06:40:00'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:23:34 SQL> 
20:23:34 SQL> -- rpt
20:23:34 SQL> -- We should see just 1 row:
20:23:34 SQL> 
20:23:34 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.02
20:23:34 SQL> 
20:23:34 SQL> -- Build the model:
20:23:34 SQL> CREATE OR REPLACE VIEW bme AS
20:23:34   2  SELECT
20:23:34   3  prdate
20:23:34   4  ,gatt
20:23:34   5  ,g00
20:23:34   6  ,g01
20:23:34   7  ,g02
20:23:34   8  ,g03
20:23:34   9  ,g04
20:23:34  10  ,g05
20:23:34  11  ,g06
20:23:34  12  ,g07
20:23:34  13  ,g08
20:23:34  14  ,g09
20:23:34  15  ,g10
20:23:34  16  ,g11
20:23:34  17  ,g12
20:23:34  18  ,g13
20:23:34  19  ,g14
20:23:34  20  ,g15
20:23:34  21  ,g16
20:23:34  22  ,g17
20:23:34  23  ,g18
20:23:34  24  ,g19
20:23:34  25  ,g20
20:23:34  26  ,g21
20:23:34  27  ,g22
20:23:34  28  ,g23
20:23:34  29  ,g24
20:23:34  30  ,g25
20:23:34  31  ,g26
20:23:34  32  ,g27
20:23:34  33  ,g28
20:23:34  34  ,g29
20:23:34  35  ,g30
20:23:34  36  ,g31
20:23:34  37  ,g32
20:23:34  38  ,g33
20:23:34  39  ,g34
20:23:34  40  ,g35
20:23:34  41  ,g36
20:23:34  42  ,g37
20:23:34  43  ,g38
20:23:34  44  ,g39
20:23:34  45  ,g40
20:23:34  46  ,g41
20:23:34  47  FROM modsrc
20:23:34  48  WHERE gatt IN('nup','up')
20:23:34  49  -- Use only rows which are older than 1 day:
20:23:34  50  AND 1+ydate < '&1'||' '||'&2'
20:23:34  51  AND pair = '&3'
20:23:34  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-12-22'||' '||'06:40:00'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.12
20:23:34 SQL> 
20:23:34 SQL> -- rpt
20:23:34 SQL> 
20:23:34 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt;

GAT COUNT(PRDATE)
--- -------------
nup	     9661
up	     6046

Elapsed: 00:00:00.03
20:23:34 SQL> 
20:23:34 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-12-21 06:35:00

Elapsed: 00:00:00.02
20:23:34 SQL> 
20:23:34 SQL> -- Now build model from bme and score sme
20:23:34 SQL> @score1.sql gatt
20:23:34 SQL> --
20:23:34 SQL> -- score1.sql
20:23:34 SQL> --
20:23:34 SQL> 
20:23:34 SQL> -- I use this script to send 5 params to score.sql
20:23:34 SQL> -- which does the heavy lifting of creating an SVM model.
20:23:34 SQL> -- Then at the very end of this script I use the model
20:23:34 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:23:34 SQL> 
20:23:34 SQL> -- I call this script from 2 other scripts:
20:23:34 SQL> -- score1_5min.sql
20:23:34 SQL> -- score1_5min_gattn.sql
20:23:34 SQL> 
20:23:34 SQL> -- The 1st param is the name of the target attribute.
20:23:34 SQL> -- I like to call my target attributes either gatt or gattn.
20:23:34 SQL> 
20:23:34 SQL> -- Demo:
20:23:34 SQL> -- @score1.sql 'gatt'
20:23:34 SQL> -- @score1.sql 'gattn'
20:23:34 SQL> 
20:23:34 SQL> -- Now, I fill up svmc_apply_prep.
20:23:34 SQL> -- I use same model_name used in score.sql
20:23:34 SQL> DEFINE model_name = 'svmfx101'
20:23:34 SQL> DEFINE bldtable	= 'bme'
20:23:34 SQL> DEFINE scoretable = 'sme'
20:23:34 SQL> DEFINE case_id	= 'prdate'
20:23:34 SQL> -- Demo:
20:23:34 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:23:34 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:23:34 SQL> --
20:23:34 SQL> -- score.sql
20:23:34 SQL> --
20:23:34 SQL> 
20:23:34 SQL> -- usage: score.sql
20:23:34 SQL> 
20:23:34 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:23:34 SQL> 
20:23:34 SQL> -- DEFINE target	   = 'gatt'
20:23:34 SQL> -- DEFINE model_name = 'svmfx101'
20:23:34 SQL> -- DEFINE bldtable   = 'bme'
20:23:34 SQL> -- DEFINE scoretable = 'sme'
20:23:34 SQL> -- DEFINE case_id    = 'prdate'
20:23:34 SQL> 
20:23:34 SQL> DEFINE target	= '&1'
20:23:34 SQL> DEFINE model_name = '&2'
20:23:34 SQL> DEFINE bldtable	= '&3'
20:23:34 SQL> DEFINE scoretable = '&4'
20:23:34 SQL> DEFINE case_id	= '&5'
20:23:34 SQL> 
20:23:34 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:23:34 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:23:34 SQL> 
20:23:34 SQL> -- Builds an SVM model using pl/sql.
20:23:34 SQL> 
20:23:34 SQL> -----------------------------------------------------------------------
20:23:34 SQL> --			    BUILD THE MODEL
20:23:34 SQL> -----------------------------------------------------------------------
20:23:34 SQL> 
20:23:34 SQL> -- Cleanup old build data preparation objects for repeat runs
20:23:34 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.00
20:23:34 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.01
20:23:34 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:23:34 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.00
20:23:34 SQL> 
20:23:34 SQL> 
20:23:34 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:23:34 SQL> --
20:23:34 SQL> -- DROP	TABLE svmc_settings ;
20:23:34 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:23:34 SQL> -- DELETE svmc_settings;
20:23:34 SQL> 
20:23:34 SQL> -- The default classification algorithm is Naive Bayes. So override
20:23:34 SQL> -- this choice to SVM using a settings table.
20:23:34 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:23:34 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:23:34 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:23:34 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:23:34 SQL> -- models.
20:23:34 SQL> --
20:23:34 SQL> 
20:23:34 SQL> -- Do this once and then comment it out.
20:23:34 SQL> -- That makes script go faster.
20:23:34 SQL> -- BEGIN
20:23:34 SQL> -- -- Populate settings table
20:23:34 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:23:34 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:23:34 SQL> --
20:23:34 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:23:34 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:23:34 SQL> --
20:23:34 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:23:34 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:23:34 SQL> --   COMMIT;
20:23:34 SQL> -- END;
20:23:34 SQL> -- /
20:23:34 SQL> 
20:23:34 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.01
20:23:34 SQL> 
20:23:34 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:23:34   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:23:34   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.08
20:23:34 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:23:34   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:23:34   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:23:34 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:23:34   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:23:34   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:23:34 SQL> 
20:23:34 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:23:34   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:23:34   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:23:34 SQL> 
20:23:34 SQL> --------------------------------
20:23:34 SQL> -- PREPARE BUILD (TRAINING) DATA
20:23:34 SQL> --
20:23:34 SQL> 
20:23:34 SQL> -- 1. Missing Value treatment for all Predictors and
20:23:34 SQL> -- 2. Outlier Treatment and
20:23:34 SQL> -- 3. Normalization are performed below.
20:23:34 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:23:34 SQL> --    normalized here.
20:23:34 SQL> 
20:23:34 SQL> BEGIN
20:23:34   2  	-- Perform missing value treatment for all predictors
20:23:34   3  	-- create miss tables
20:23:34   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:23:34   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:23:34   6  
20:23:34   7  	-- populate miss tables
20:23:34   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:23:34   9  	  miss_table_name => 'svmc_miss_num',
20:23:34  10  	  data_table_name => '&bldtable',
20:23:34  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:23:34  12  
20:23:34  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:23:34  14  	  miss_table_name => 'svmc_miss_cat',
20:23:34  15  	  data_table_name => '&bldtable',
20:23:34  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:23:34  17  
20:23:34  18  	-- xform input data to replace missing values
20:23:34  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:23:34  20  	  miss_table_name => 'svmc_miss_num',
20:23:34  21  	  data_table_name => '&bldtable',
20:23:34  22  	  xform_view_name => 'xformed_build_miss_num');
20:23:34  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:23:34  24  	  miss_table_name => 'svmc_miss_cat',
20:23:34  25  	  data_table_name => '&bldtable',
20:23:34  26  	  xform_view_name => 'xformed_build_miss_cat');
20:23:34  27  
20:23:34  28  	-- Perform outlier treatment.
20:23:34  29  	-- create clip table
20:23:34  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:23:34  31  
20:23:34  32  	-- populate clip table
20:23:34  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:23:34  34  	  clip_table_name => 'svmc_clip',
20:23:34  35  	  data_table_name => '&bldtable',
20:23:34  36  	  tail_frac	  => 0.025,
20:23:34  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:23:34  38  
20:23:34  39  	-- xform input data to winsorized data
20:23:34  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:23:34  41  	  clip_table_name => 'svmc_clip',
20:23:34  42  	  data_table_name => '&bldtable',
20:23:34  43  	  xform_view_name => 'svmc_winsor');
20:23:34  44  
20:23:34  45  	-- create normalization table
20:23:34  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:23:34  47  
20:23:34  48  	-- populate normalization table based on winsorized data
20:23:34  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:23:34  50  	  norm_table_name => 'svmc_norm',
20:23:34  51  	  data_table_name => 'svmc_winsor',
20:23:34  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:23:34  53  
20:23:34  54  	-- normalize the original data
20:23:34  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:23:34  56  	  norm_table_name => 'svmc_norm',
20:23:34  57  	  data_table_name => '&bldtable',
20:23:34  58  	  xform_view_name => 'svmc_build_prep');
20:23:34  59  END;
20:23:34  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:02.09
20:23:37 SQL> 
20:23:37 SQL> ---------------------
20:23:37 SQL> -- CREATE A NEW MODEL
20:23:37 SQL> --
20:23:37 SQL> -- Cleanup old model with the same name for repeat runs
20:23:37 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:23:37   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:23:37   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.10
20:23:38 SQL> 
20:23:38 SQL> -- Build a new SVM Model
20:23:38 SQL> BEGIN
20:23:38   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:23:38   3  	  model_name	      => '&model_name',
20:23:38   4  	  mining_function     => dbms_data_mining.classification,
20:23:38   5  	  data_table_name     => 'svmc_build_prep',
20:23:38   6  	  case_id_column_name => '&case_id',
20:23:38   7  	  target_column_name  => '&target',
20:23:38   8  	  settings_table_name => 'svmc_settings');
20:23:38   9  END;
20:23:38  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:05.58
20:23:43 SQL> 
20:23:43 SQL> -----------------------------------------------------------------------
20:23:43 SQL> --			       APPLY/score THE MODEL
20:23:43 SQL> -----------------------------------------------------------------------
20:23:43 SQL> 
20:23:43 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:23:43 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:23:43   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:23:43   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:23:43 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:23:43   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:23:43   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:23:43 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:23:43   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:23:43   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:23:43 SQL> -----------------------
20:23:43 SQL> -- PREPARE SCORING DATA
20:23:43 SQL> --
20:23:43 SQL> -- If the data for model creation has been prepared, then the data
20:23:43 SQL> -- to be scored using the model must be prepared in the same manner
20:23:43 SQL> -- in order to obtain meaningful results.
20:23:43 SQL> --
20:23:43 SQL> -- 1. Missing Value treatment for all Predictors and
20:23:43 SQL> -- 2. Normalization
20:23:43 SQL> -- No outlier treatment will be performed during test and apply. The
20:23:43 SQL> -- normalization step is sufficient, since the normalization parameters
20:23:43 SQL> -- already capture the effects of outlier treatment done with build data.
20:23:43 SQL> --
20:23:43 SQL> BEGIN
20:23:43   2  	-- Xform Test data to replace missing values
20:23:43   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:23:43   4  	  miss_table_name => 'svmc_miss_num',
20:23:43   5  	  data_table_name => '&scoretable',
20:23:43   6  	  xform_view_name => 'xformed_apply_miss_num');
20:23:43   7  
20:23:43   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:23:43   9  	  miss_table_name => 'svmc_miss_cat',
20:23:43  10  	  data_table_name => '&scoretable',
20:23:43  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:23:43  12  
20:23:43  13  	-- Normalize the data to be scored
20:23:43  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:23:43  15  	  norm_table_name => 'svmc_norm',
20:23:43  16  	  data_table_name => '&scoretable',
20:23:43  17  	  xform_view_name => 'svmc_apply_prep');
20:23:43  18  END;
20:23:43  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.17
20:23:43 SQL> 
20:23:43 SQL> -- Maybe I already collected a score for this prdate.
20:23:43 SQL> -- DELETE it if I did:
20:23:43 SQL> DELETE svm62scores
20:23:43   2  WHERE score > 0
20:23:43   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:23:43   4  -- I need to supply the target attribute name:
20:23:43   5  AND targ = '&1'
20:23:43   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gatt'

0 rows deleted.

Elapsed: 00:00:00.01
20:23:43 SQL> 
20:23:43 SQL> -- We do a drumroll here:
20:23:43 SQL> 
20:23:43 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:23:43   2  SELECT
20:23:43   3  prdate
20:23:43   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:23:43   5  ,sysdate
20:23:43   6  ,SUBSTR(prdate,1,7)pair
20:23:43   7  ,SUBSTR(prdate,-19)ydate
20:23:43   8  ,'&1'
20:23:43   9  FROM svmc_apply_prep
20:23:43  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gatt'

1 row created.

Elapsed: 00:00:00.06
20:23:44 SQL> @score1_5min_gattn.sql	2010-12-30 14:00:00 aud_usd
20:23:44 SQL> --
20:23:44 SQL> -- score1_5min_gattn.sql
20:23:44 SQL> --
20:23:44 SQL> 
20:23:44 SQL> -- Demo:
20:23:44 SQL> -- @score1_5min_gattn.sql 2010-12-31 20:45:01 aud_usd
20:23:44 SQL> 
20:23:44 SQL> CREATE OR REPLACE VIEW sme AS
20:23:44   2  SELECT
20:23:44   3  prdate
20:23:44   4  ,NULL gattn
20:23:44   5  ,g00
20:23:44   6  ,g01
20:23:44   7  ,g02
20:23:44   8  ,g03
20:23:44   9  ,g04
20:23:44  10  ,g05
20:23:44  11  ,g06
20:23:44  12  ,g07
20:23:44  13  ,g08
20:23:44  14  ,g09
20:23:44  15  ,g10
20:23:44  16  ,g11
20:23:44  17  ,g12
20:23:44  18  ,g13
20:23:44  19  ,g14
20:23:44  20  ,g15
20:23:44  21  ,g16
20:23:44  22  ,g17
20:23:44  23  ,g18
20:23:44  24  ,g19
20:23:44  25  ,g20
20:23:44  26  ,g21
20:23:44  27  ,g22
20:23:44  28  ,g23
20:23:44  29  ,g24
20:23:44  30  ,g25
20:23:44  31  ,g26
20:23:44  32  ,g27
20:23:44  33  ,g28
20:23:44  34  ,g29
20:23:44  35  ,g30
20:23:44  36  ,g31
20:23:44  37  ,g32
20:23:44  38  ,g33
20:23:44  39  ,g34
20:23:44  40  ,g35
20:23:44  41  ,g36
20:23:44  42  ,g37
20:23:44  43  ,g38
20:23:44  44  ,g39
20:23:44  45  ,g40
20:23:44  46  ,g41
20:23:44  47  FROM modsrc
20:23:44  48  WHERE ydate = '&1'||' '||'&2'
20:23:44  49  AND pair = '&3'
20:23:44  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-12-30'||' '||'14:00:00'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:23:44 SQL> 
20:23:44 SQL> -- rpt
20:23:44 SQL> -- We should see just 1 row:
20:23:44 SQL> 
20:23:44 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.02
20:23:44 SQL> 
20:23:44 SQL> -- Build the model:
20:23:44 SQL> CREATE OR REPLACE VIEW bme AS
20:23:44   2  SELECT
20:23:44   3  prdate
20:23:44   4  ,gattn
20:23:44   5  ,g00
20:23:44   6  ,g01
20:23:44   7  ,g02
20:23:44   8  ,g03
20:23:44   9  ,g04
20:23:44  10  ,g05
20:23:44  11  ,g06
20:23:44  12  ,g07
20:23:44  13  ,g08
20:23:44  14  ,g09
20:23:44  15  ,g10
20:23:44  16  ,g11
20:23:44  17  ,g12
20:23:44  18  ,g13
20:23:44  19  ,g14
20:23:44  20  ,g15
20:23:44  21  ,g16
20:23:44  22  ,g17
20:23:44  23  ,g18
20:23:44  24  ,g19
20:23:44  25  ,g20
20:23:44  26  ,g21
20:23:44  27  ,g22
20:23:44  28  ,g23
20:23:44  29  ,g24
20:23:44  30  ,g25
20:23:44  31  ,g26
20:23:44  32  ,g27
20:23:44  33  ,g28
20:23:44  34  ,g29
20:23:44  35  ,g30
20:23:44  36  ,g31
20:23:44  37  ,g32
20:23:44  38  ,g33
20:23:44  39  ,g34
20:23:44  40  ,g35
20:23:44  41  ,g36
20:23:44  42  ,g37
20:23:44  43  ,g38
20:23:44  44  ,g39
20:23:44  45  ,g40
20:23:44  46  ,g41
20:23:44  47  FROM modsrc
20:23:44  48  WHERE gattn IN('nup','up')
20:23:44  49  -- Use only rows which are older than 1 day:
20:23:44  50  AND 1+ydate < '&1'||' '||'&2'
20:23:44  51  AND pair = '&3'
20:23:44  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-12-30'||' '||'14:00:00'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.05
20:23:44 SQL> 
20:23:44 SQL> -- rpt
20:23:44 SQL> 
20:23:44 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	    11649
up	     5803

Elapsed: 00:00:00.02
20:23:44 SQL> 
20:23:44 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-12-29 13:55:00

Elapsed: 00:00:00.02
20:23:44 SQL> 
20:23:44 SQL> -- Now build model from bme and score sme
20:23:44 SQL> @score1.sql gattn
20:23:44 SQL> --
20:23:44 SQL> -- score1.sql
20:23:44 SQL> --
20:23:44 SQL> 
20:23:44 SQL> -- I use this script to send 5 params to score.sql
20:23:44 SQL> -- which does the heavy lifting of creating an SVM model.
20:23:44 SQL> -- Then at the very end of this script I use the model
20:23:44 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:23:44 SQL> 
20:23:44 SQL> -- I call this script from 2 other scripts:
20:23:44 SQL> -- score1_5min.sql
20:23:44 SQL> -- score1_5min_gattn.sql
20:23:44 SQL> 
20:23:44 SQL> -- The 1st param is the name of the target attribute.
20:23:44 SQL> -- I like to call my target attributes either gatt or gattn.
20:23:44 SQL> 
20:23:44 SQL> -- Demo:
20:23:44 SQL> -- @score1.sql 'gatt'
20:23:44 SQL> -- @score1.sql 'gattn'
20:23:44 SQL> 
20:23:44 SQL> -- Now, I fill up svmc_apply_prep.
20:23:44 SQL> -- I use same model_name used in score.sql
20:23:44 SQL> DEFINE model_name = 'svmfx101'
20:23:44 SQL> DEFINE bldtable	= 'bme'
20:23:44 SQL> DEFINE scoretable = 'sme'
20:23:44 SQL> DEFINE case_id	= 'prdate'
20:23:44 SQL> -- Demo:
20:23:44 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:23:44 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:23:44 SQL> --
20:23:44 SQL> -- score.sql
20:23:44 SQL> --
20:23:44 SQL> 
20:23:44 SQL> -- usage: score.sql
20:23:44 SQL> 
20:23:44 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:23:44 SQL> 
20:23:44 SQL> -- DEFINE target	   = 'gatt'
20:23:44 SQL> -- DEFINE model_name = 'svmfx101'
20:23:44 SQL> -- DEFINE bldtable   = 'bme'
20:23:44 SQL> -- DEFINE scoretable = 'sme'
20:23:44 SQL> -- DEFINE case_id    = 'prdate'
20:23:44 SQL> 
20:23:44 SQL> DEFINE target	= '&1'
20:23:44 SQL> DEFINE model_name = '&2'
20:23:44 SQL> DEFINE bldtable	= '&3'
20:23:44 SQL> DEFINE scoretable = '&4'
20:23:44 SQL> DEFINE case_id	= '&5'
20:23:44 SQL> 
20:23:44 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:23:44 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:23:44 SQL> 
20:23:44 SQL> -- Builds an SVM model using pl/sql.
20:23:44 SQL> 
20:23:44 SQL> -----------------------------------------------------------------------
20:23:44 SQL> --			    BUILD THE MODEL
20:23:44 SQL> -----------------------------------------------------------------------
20:23:44 SQL> 
20:23:44 SQL> -- Cleanup old build data preparation objects for repeat runs
20:23:44 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.01
20:23:44 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:23:44 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:23:44 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.00
20:23:44 SQL> 
20:23:44 SQL> 
20:23:44 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:23:44 SQL> --
20:23:44 SQL> -- DROP	TABLE svmc_settings ;
20:23:44 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:23:44 SQL> -- DELETE svmc_settings;
20:23:44 SQL> 
20:23:44 SQL> -- The default classification algorithm is Naive Bayes. So override
20:23:44 SQL> -- this choice to SVM using a settings table.
20:23:44 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:23:44 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:23:44 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:23:44 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:23:44 SQL> -- models.
20:23:44 SQL> --
20:23:44 SQL> 
20:23:44 SQL> -- Do this once and then comment it out.
20:23:44 SQL> -- That makes script go faster.
20:23:44 SQL> -- BEGIN
20:23:44 SQL> -- -- Populate settings table
20:23:44 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:23:44 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:23:44 SQL> --
20:23:44 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:23:44 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:23:44 SQL> --
20:23:44 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:23:44 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:23:44 SQL> --   COMMIT;
20:23:44 SQL> -- END;
20:23:44 SQL> -- /
20:23:44 SQL> 
20:23:44 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.01
20:23:44 SQL> 
20:23:44 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:23:44   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:23:44   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:23:44 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:23:44   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:23:44   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:23:44 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:23:44   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:23:44   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:23:44 SQL> 
20:23:44 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:23:44   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:23:44   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:23:44 SQL> 
20:23:44 SQL> --------------------------------
20:23:44 SQL> -- PREPARE BUILD (TRAINING) DATA
20:23:44 SQL> --
20:23:44 SQL> 
20:23:44 SQL> -- 1. Missing Value treatment for all Predictors and
20:23:44 SQL> -- 2. Outlier Treatment and
20:23:44 SQL> -- 3. Normalization are performed below.
20:23:44 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:23:44 SQL> --    normalized here.
20:23:44 SQL> 
20:23:44 SQL> BEGIN
20:23:44   2  	-- Perform missing value treatment for all predictors
20:23:44   3  	-- create miss tables
20:23:44   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:23:44   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:23:44   6  
20:23:44   7  	-- populate miss tables
20:23:44   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:23:44   9  	  miss_table_name => 'svmc_miss_num',
20:23:44  10  	  data_table_name => '&bldtable',
20:23:44  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:23:44  12  
20:23:44  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:23:44  14  	  miss_table_name => 'svmc_miss_cat',
20:23:44  15  	  data_table_name => '&bldtable',
20:23:44  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:23:44  17  
20:23:44  18  	-- xform input data to replace missing values
20:23:44  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:23:44  20  	  miss_table_name => 'svmc_miss_num',
20:23:44  21  	  data_table_name => '&bldtable',
20:23:44  22  	  xform_view_name => 'xformed_build_miss_num');
20:23:44  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:23:44  24  	  miss_table_name => 'svmc_miss_cat',
20:23:44  25  	  data_table_name => '&bldtable',
20:23:44  26  	  xform_view_name => 'xformed_build_miss_cat');
20:23:44  27  
20:23:44  28  	-- Perform outlier treatment.
20:23:44  29  	-- create clip table
20:23:44  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:23:44  31  
20:23:44  32  	-- populate clip table
20:23:44  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:23:44  34  	  clip_table_name => 'svmc_clip',
20:23:44  35  	  data_table_name => '&bldtable',
20:23:44  36  	  tail_frac	  => 0.025,
20:23:44  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:23:44  38  
20:23:44  39  	-- xform input data to winsorized data
20:23:44  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:23:44  41  	  clip_table_name => 'svmc_clip',
20:23:44  42  	  data_table_name => '&bldtable',
20:23:44  43  	  xform_view_name => 'svmc_winsor');
20:23:44  44  
20:23:44  45  	-- create normalization table
20:23:44  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:23:44  47  
20:23:44  48  	-- populate normalization table based on winsorized data
20:23:44  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:23:44  50  	  norm_table_name => 'svmc_norm',
20:23:44  51  	  data_table_name => 'svmc_winsor',
20:23:44  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:23:44  53  
20:23:44  54  	-- normalize the original data
20:23:44  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:23:44  56  	  norm_table_name => 'svmc_norm',
20:23:44  57  	  data_table_name => '&bldtable',
20:23:44  58  	  xform_view_name => 'svmc_build_prep');
20:23:44  59  END;
20:23:44  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:02.27
20:23:46 SQL> 
20:23:46 SQL> ---------------------
20:23:46 SQL> -- CREATE A NEW MODEL
20:23:46 SQL> --
20:23:46 SQL> -- Cleanup old model with the same name for repeat runs
20:23:46 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:23:46   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:23:46   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.97
20:23:47 SQL> 
20:23:47 SQL> -- Build a new SVM Model
20:23:47 SQL> BEGIN
20:23:47   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:23:47   3  	  model_name	      => '&model_name',
20:23:47   4  	  mining_function     => dbms_data_mining.classification,
20:23:47   5  	  data_table_name     => 'svmc_build_prep',
20:23:47   6  	  case_id_column_name => '&case_id',
20:23:47   7  	  target_column_name  => '&target',
20:23:47   8  	  settings_table_name => 'svmc_settings');
20:23:47   9  END;
20:23:47  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:04.56
20:23:52 SQL> 
20:23:52 SQL> -----------------------------------------------------------------------
20:23:52 SQL> --			       APPLY/score THE MODEL
20:23:52 SQL> -----------------------------------------------------------------------
20:23:52 SQL> 
20:23:52 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:23:52 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:23:52   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:23:52   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:23:52 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:23:52   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:23:52   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:23:52 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:23:52   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:23:52   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:23:52 SQL> -----------------------
20:23:52 SQL> -- PREPARE SCORING DATA
20:23:52 SQL> --
20:23:52 SQL> -- If the data for model creation has been prepared, then the data
20:23:52 SQL> -- to be scored using the model must be prepared in the same manner
20:23:52 SQL> -- in order to obtain meaningful results.
20:23:52 SQL> --
20:23:52 SQL> -- 1. Missing Value treatment for all Predictors and
20:23:52 SQL> -- 2. Normalization
20:23:52 SQL> -- No outlier treatment will be performed during test and apply. The
20:23:52 SQL> -- normalization step is sufficient, since the normalization parameters
20:23:52 SQL> -- already capture the effects of outlier treatment done with build data.
20:23:52 SQL> --
20:23:52 SQL> BEGIN
20:23:52   2  	-- Xform Test data to replace missing values
20:23:52   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:23:52   4  	  miss_table_name => 'svmc_miss_num',
20:23:52   5  	  data_table_name => '&scoretable',
20:23:52   6  	  xform_view_name => 'xformed_apply_miss_num');
20:23:52   7  
20:23:52   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:23:52   9  	  miss_table_name => 'svmc_miss_cat',
20:23:52  10  	  data_table_name => '&scoretable',
20:23:52  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:23:52  12  
20:23:52  13  	-- Normalize the data to be scored
20:23:52  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:23:52  15  	  norm_table_name => 'svmc_norm',
20:23:52  16  	  data_table_name => '&scoretable',
20:23:52  17  	  xform_view_name => 'svmc_apply_prep');
20:23:52  18  END;
20:23:52  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.17
20:23:52 SQL> 
20:23:52 SQL> -- Maybe I already collected a score for this prdate.
20:23:52 SQL> -- DELETE it if I did:
20:23:52 SQL> DELETE svm62scores
20:23:52   2  WHERE score > 0
20:23:52   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:23:52   4  -- I need to supply the target attribute name:
20:23:52   5  AND targ = '&1'
20:23:52   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gattn'

0 rows deleted.

Elapsed: 00:00:00.02
20:23:52 SQL> 
20:23:52 SQL> -- We do a drumroll here:
20:23:52 SQL> 
20:23:52 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:23:52   2  SELECT
20:23:52   3  prdate
20:23:52   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:23:52   5  ,sysdate
20:23:52   6  ,SUBSTR(prdate,1,7)pair
20:23:52   7  ,SUBSTR(prdate,-19)ydate
20:23:52   8  ,'&1'
20:23:52   9  FROM svmc_apply_prep
20:23:52  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gattn'

1 row created.

Elapsed: 00:00:00.05
20:23:52 SQL> @score1_5min.sql	      2010-12-15 08:55:00 aud_usd
20:23:52 SQL> --
20:23:52 SQL> -- score1_5min.sql
20:23:52 SQL> --
20:23:52 SQL> 
20:23:52 SQL> -- Demo:
20:23:52 SQL> -- @score1_5min.sql 2010-12-31 20:45:01 aud_usd
20:23:52 SQL> 
20:23:52 SQL> CREATE OR REPLACE VIEW sme AS
20:23:52   2  SELECT
20:23:52   3  prdate
20:23:52   4  ,NULL gatt
20:23:52   5  ,g00
20:23:52   6  ,g01
20:23:52   7  ,g02
20:23:52   8  ,g03
20:23:52   9  ,g04
20:23:52  10  ,g05
20:23:52  11  ,g06
20:23:52  12  ,g07
20:23:52  13  ,g08
20:23:52  14  ,g09
20:23:52  15  ,g10
20:23:52  16  ,g11
20:23:52  17  ,g12
20:23:52  18  ,g13
20:23:52  19  ,g14
20:23:52  20  ,g15
20:23:52  21  ,g16
20:23:52  22  ,g17
20:23:52  23  ,g18
20:23:52  24  ,g19
20:23:52  25  ,g20
20:23:52  26  ,g21
20:23:52  27  ,g22
20:23:52  28  ,g23
20:23:52  29  ,g24
20:23:52  30  ,g25
20:23:52  31  ,g26
20:23:52  32  ,g27
20:23:52  33  ,g28
20:23:52  34  ,g29
20:23:52  35  ,g30
20:23:52  36  ,g31
20:23:52  37  ,g32
20:23:52  38  ,g33
20:23:52  39  ,g34
20:23:52  40  ,g35
20:23:52  41  ,g36
20:23:52  42  ,g37
20:23:52  43  ,g38
20:23:52  44  ,g39
20:23:52  45  ,g40
20:23:52  46  ,g41
20:23:52  47  FROM modsrc
20:23:52  48  WHERE ydate = '&1'||' '||'&2'
20:23:52  49  AND pair = '&3'
20:23:52  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-12-15'||' '||'08:55:00'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.05
20:23:52 SQL> 
20:23:52 SQL> -- rpt
20:23:52 SQL> -- We should see just 1 row:
20:23:52 SQL> 
20:23:52 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.01
20:23:52 SQL> 
20:23:52 SQL> -- Build the model:
20:23:52 SQL> CREATE OR REPLACE VIEW bme AS
20:23:52   2  SELECT
20:23:52   3  prdate
20:23:52   4  ,gatt
20:23:52   5  ,g00
20:23:52   6  ,g01
20:23:52   7  ,g02
20:23:52   8  ,g03
20:23:52   9  ,g04
20:23:52  10  ,g05
20:23:52  11  ,g06
20:23:52  12  ,g07
20:23:52  13  ,g08
20:23:52  14  ,g09
20:23:52  15  ,g10
20:23:52  16  ,g11
20:23:52  17  ,g12
20:23:52  18  ,g13
20:23:52  19  ,g14
20:23:52  20  ,g15
20:23:52  21  ,g16
20:23:52  22  ,g17
20:23:52  23  ,g18
20:23:52  24  ,g19
20:23:52  25  ,g20
20:23:52  26  ,g21
20:23:52  27  ,g22
20:23:52  28  ,g23
20:23:52  29  ,g24
20:23:52  30  ,g25
20:23:52  31  ,g26
20:23:52  32  ,g27
20:23:52  33  ,g28
20:23:52  34  ,g29
20:23:52  35  ,g30
20:23:52  36  ,g31
20:23:52  37  ,g32
20:23:52  38  ,g33
20:23:52  39  ,g34
20:23:52  40  ,g35
20:23:52  41  ,g36
20:23:52  42  ,g37
20:23:52  43  ,g38
20:23:52  44  ,g39
20:23:52  45  ,g40
20:23:52  46  ,g41
20:23:52  47  FROM modsrc
20:23:52  48  WHERE gatt IN('nup','up')
20:23:52  49  -- Use only rows which are older than 1 day:
20:23:52  50  AND 1+ydate < '&1'||' '||'&2'
20:23:52  51  AND pair = '&3'
20:23:52  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-12-15'||' '||'08:55:00'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.05
20:23:52 SQL> 
20:23:52 SQL> -- rpt
20:23:52 SQL> 
20:23:52 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt;

GAT COUNT(PRDATE)
--- -------------
nup	     8724
up	     5586

Elapsed: 00:00:00.02
20:23:52 SQL> 
20:23:52 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-12-14 08:50:00

Elapsed: 00:00:00.02
20:23:52 SQL> 
20:23:52 SQL> -- Now build model from bme and score sme
20:23:52 SQL> @score1.sql gatt
20:23:52 SQL> --
20:23:52 SQL> -- score1.sql
20:23:52 SQL> --
20:23:52 SQL> 
20:23:52 SQL> -- I use this script to send 5 params to score.sql
20:23:52 SQL> -- which does the heavy lifting of creating an SVM model.
20:23:52 SQL> -- Then at the very end of this script I use the model
20:23:52 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:23:52 SQL> 
20:23:52 SQL> -- I call this script from 2 other scripts:
20:23:52 SQL> -- score1_5min.sql
20:23:52 SQL> -- score1_5min_gattn.sql
20:23:52 SQL> 
20:23:52 SQL> -- The 1st param is the name of the target attribute.
20:23:52 SQL> -- I like to call my target attributes either gatt or gattn.
20:23:52 SQL> 
20:23:52 SQL> -- Demo:
20:23:52 SQL> -- @score1.sql 'gatt'
20:23:52 SQL> -- @score1.sql 'gattn'
20:23:52 SQL> 
20:23:52 SQL> -- Now, I fill up svmc_apply_prep.
20:23:52 SQL> -- I use same model_name used in score.sql
20:23:52 SQL> DEFINE model_name = 'svmfx101'
20:23:52 SQL> DEFINE bldtable	= 'bme'
20:23:52 SQL> DEFINE scoretable = 'sme'
20:23:52 SQL> DEFINE case_id	= 'prdate'
20:23:52 SQL> -- Demo:
20:23:52 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:23:52 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:23:52 SQL> --
20:23:52 SQL> -- score.sql
20:23:52 SQL> --
20:23:52 SQL> 
20:23:52 SQL> -- usage: score.sql
20:23:52 SQL> 
20:23:52 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:23:52 SQL> 
20:23:52 SQL> -- DEFINE target	   = 'gatt'
20:23:52 SQL> -- DEFINE model_name = 'svmfx101'
20:23:52 SQL> -- DEFINE bldtable   = 'bme'
20:23:52 SQL> -- DEFINE scoretable = 'sme'
20:23:52 SQL> -- DEFINE case_id    = 'prdate'
20:23:52 SQL> 
20:23:52 SQL> DEFINE target	= '&1'
20:23:52 SQL> DEFINE model_name = '&2'
20:23:52 SQL> DEFINE bldtable	= '&3'
20:23:52 SQL> DEFINE scoretable = '&4'
20:23:52 SQL> DEFINE case_id	= '&5'
20:23:52 SQL> 
20:23:52 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:23:52 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:23:52 SQL> 
20:23:52 SQL> -- Builds an SVM model using pl/sql.
20:23:52 SQL> 
20:23:52 SQL> -----------------------------------------------------------------------
20:23:52 SQL> --			    BUILD THE MODEL
20:23:52 SQL> -----------------------------------------------------------------------
20:23:52 SQL> 
20:23:52 SQL> -- Cleanup old build data preparation objects for repeat runs
20:23:52 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.00
20:23:52 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.01
20:23:52 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:23:52 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.00
20:23:52 SQL> 
20:23:52 SQL> 
20:23:52 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:23:52 SQL> --
20:23:52 SQL> -- DROP	TABLE svmc_settings ;
20:23:52 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:23:52 SQL> -- DELETE svmc_settings;
20:23:52 SQL> 
20:23:52 SQL> -- The default classification algorithm is Naive Bayes. So override
20:23:52 SQL> -- this choice to SVM using a settings table.
20:23:52 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:23:52 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:23:52 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:23:52 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:23:52 SQL> -- models.
20:23:52 SQL> --
20:23:52 SQL> 
20:23:52 SQL> -- Do this once and then comment it out.
20:23:52 SQL> -- That makes script go faster.
20:23:52 SQL> -- BEGIN
20:23:52 SQL> -- -- Populate settings table
20:23:52 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:23:52 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:23:52 SQL> --
20:23:52 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:23:52 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:23:52 SQL> --
20:23:52 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:23:52 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:23:52 SQL> --   COMMIT;
20:23:52 SQL> -- END;
20:23:52 SQL> -- /
20:23:52 SQL> 
20:23:52 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.01
20:23:52 SQL> 
20:23:52 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:23:52   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:23:52   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:23:52 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:23:52   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:23:52   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:23:52 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:23:52   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:23:52   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:23:52 SQL> 
20:23:52 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:23:52   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:23:52   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:23:52 SQL> 
20:23:52 SQL> --------------------------------
20:23:52 SQL> -- PREPARE BUILD (TRAINING) DATA
20:23:52 SQL> --
20:23:52 SQL> 
20:23:52 SQL> -- 1. Missing Value treatment for all Predictors and
20:23:52 SQL> -- 2. Outlier Treatment and
20:23:52 SQL> -- 3. Normalization are performed below.
20:23:52 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:23:52 SQL> --    normalized here.
20:23:52 SQL> 
20:23:52 SQL> BEGIN
20:23:52   2  	-- Perform missing value treatment for all predictors
20:23:52   3  	-- create miss tables
20:23:52   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:23:52   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:23:52   6  
20:23:52   7  	-- populate miss tables
20:23:52   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:23:52   9  	  miss_table_name => 'svmc_miss_num',
20:23:52  10  	  data_table_name => '&bldtable',
20:23:52  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:23:52  12  
20:23:52  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:23:52  14  	  miss_table_name => 'svmc_miss_cat',
20:23:52  15  	  data_table_name => '&bldtable',
20:23:52  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:23:52  17  
20:23:52  18  	-- xform input data to replace missing values
20:23:52  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:23:52  20  	  miss_table_name => 'svmc_miss_num',
20:23:52  21  	  data_table_name => '&bldtable',
20:23:52  22  	  xform_view_name => 'xformed_build_miss_num');
20:23:52  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:23:52  24  	  miss_table_name => 'svmc_miss_cat',
20:23:52  25  	  data_table_name => '&bldtable',
20:23:52  26  	  xform_view_name => 'xformed_build_miss_cat');
20:23:52  27  
20:23:52  28  	-- Perform outlier treatment.
20:23:52  29  	-- create clip table
20:23:52  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:23:52  31  
20:23:52  32  	-- populate clip table
20:23:52  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:23:52  34  	  clip_table_name => 'svmc_clip',
20:23:52  35  	  data_table_name => '&bldtable',
20:23:52  36  	  tail_frac	  => 0.025,
20:23:52  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:23:52  38  
20:23:52  39  	-- xform input data to winsorized data
20:23:52  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:23:52  41  	  clip_table_name => 'svmc_clip',
20:23:52  42  	  data_table_name => '&bldtable',
20:23:52  43  	  xform_view_name => 'svmc_winsor');
20:23:52  44  
20:23:52  45  	-- create normalization table
20:23:52  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:23:52  47  
20:23:52  48  	-- populate normalization table based on winsorized data
20:23:52  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:23:52  50  	  norm_table_name => 'svmc_norm',
20:23:52  51  	  data_table_name => 'svmc_winsor',
20:23:52  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:23:52  53  
20:23:52  54  	-- normalize the original data
20:23:52  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:23:52  56  	  norm_table_name => 'svmc_norm',
20:23:52  57  	  data_table_name => '&bldtable',
20:23:52  58  	  xform_view_name => 'svmc_build_prep');
20:23:52  59  END;
20:23:52  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.99
20:23:54 SQL> 
20:23:54 SQL> ---------------------
20:23:54 SQL> -- CREATE A NEW MODEL
20:23:54 SQL> --
20:23:54 SQL> -- Cleanup old model with the same name for repeat runs
20:23:54 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:23:54   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:23:54   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.25
20:23:56 SQL> 
20:23:56 SQL> -- Build a new SVM Model
20:23:56 SQL> BEGIN
20:23:56   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:23:56   3  	  model_name	      => '&model_name',
20:23:56   4  	  mining_function     => dbms_data_mining.classification,
20:23:56   5  	  data_table_name     => 'svmc_build_prep',
20:23:56   6  	  case_id_column_name => '&case_id',
20:23:56   7  	  target_column_name  => '&target',
20:23:56   8  	  settings_table_name => 'svmc_settings');
20:23:56   9  END;
20:23:56  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:03.80
20:23:59 SQL> 
20:23:59 SQL> -----------------------------------------------------------------------
20:23:59 SQL> --			       APPLY/score THE MODEL
20:23:59 SQL> -----------------------------------------------------------------------
20:23:59 SQL> 
20:23:59 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:23:59 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:23:59   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:23:59   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:23:59 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:23:59   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:23:59   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:23:59 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:23:59   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:23:59   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:23:59 SQL> -----------------------
20:23:59 SQL> -- PREPARE SCORING DATA
20:23:59 SQL> --
20:23:59 SQL> -- If the data for model creation has been prepared, then the data
20:23:59 SQL> -- to be scored using the model must be prepared in the same manner
20:23:59 SQL> -- in order to obtain meaningful results.
20:23:59 SQL> --
20:23:59 SQL> -- 1. Missing Value treatment for all Predictors and
20:23:59 SQL> -- 2. Normalization
20:23:59 SQL> -- No outlier treatment will be performed during test and apply. The
20:23:59 SQL> -- normalization step is sufficient, since the normalization parameters
20:23:59 SQL> -- already capture the effects of outlier treatment done with build data.
20:23:59 SQL> --
20:23:59 SQL> BEGIN
20:23:59   2  	-- Xform Test data to replace missing values
20:23:59   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:23:59   4  	  miss_table_name => 'svmc_miss_num',
20:23:59   5  	  data_table_name => '&scoretable',
20:23:59   6  	  xform_view_name => 'xformed_apply_miss_num');
20:23:59   7  
20:23:59   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:23:59   9  	  miss_table_name => 'svmc_miss_cat',
20:23:59  10  	  data_table_name => '&scoretable',
20:23:59  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:23:59  12  
20:23:59  13  	-- Normalize the data to be scored
20:23:59  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:23:59  15  	  norm_table_name => 'svmc_norm',
20:23:59  16  	  data_table_name => '&scoretable',
20:23:59  17  	  xform_view_name => 'svmc_apply_prep');
20:23:59  18  END;
20:23:59  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.19
20:24:00 SQL> 
20:24:00 SQL> -- Maybe I already collected a score for this prdate.
20:24:00 SQL> -- DELETE it if I did:
20:24:00 SQL> DELETE svm62scores
20:24:00   2  WHERE score > 0
20:24:00   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:24:00   4  -- I need to supply the target attribute name:
20:24:00   5  AND targ = '&1'
20:24:00   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gatt'

0 rows deleted.

Elapsed: 00:00:00.02
20:24:00 SQL> 
20:24:00 SQL> -- We do a drumroll here:
20:24:00 SQL> 
20:24:00 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:24:00   2  SELECT
20:24:00   3  prdate
20:24:00   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:24:00   5  ,sysdate
20:24:00   6  ,SUBSTR(prdate,1,7)pair
20:24:00   7  ,SUBSTR(prdate,-19)ydate
20:24:00   8  ,'&1'
20:24:00   9  FROM svmc_apply_prep
20:24:00  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gatt'

1 row created.

Elapsed: 00:00:00.05
20:24:00 SQL> @score1_5min.sql	      2011-01-07 18:25:00 aud_usd
20:24:00 SQL> --
20:24:00 SQL> -- score1_5min.sql
20:24:00 SQL> --
20:24:00 SQL> 
20:24:00 SQL> -- Demo:
20:24:00 SQL> -- @score1_5min.sql 2010-12-31 20:45:01 aud_usd
20:24:00 SQL> 
20:24:00 SQL> CREATE OR REPLACE VIEW sme AS
20:24:00   2  SELECT
20:24:00   3  prdate
20:24:00   4  ,NULL gatt
20:24:00   5  ,g00
20:24:00   6  ,g01
20:24:00   7  ,g02
20:24:00   8  ,g03
20:24:00   9  ,g04
20:24:00  10  ,g05
20:24:00  11  ,g06
20:24:00  12  ,g07
20:24:00  13  ,g08
20:24:00  14  ,g09
20:24:00  15  ,g10
20:24:00  16  ,g11
20:24:00  17  ,g12
20:24:00  18  ,g13
20:24:00  19  ,g14
20:24:00  20  ,g15
20:24:00  21  ,g16
20:24:00  22  ,g17
20:24:00  23  ,g18
20:24:00  24  ,g19
20:24:00  25  ,g20
20:24:00  26  ,g21
20:24:00  27  ,g22
20:24:00  28  ,g23
20:24:00  29  ,g24
20:24:00  30  ,g25
20:24:00  31  ,g26
20:24:00  32  ,g27
20:24:00  33  ,g28
20:24:00  34  ,g29
20:24:00  35  ,g30
20:24:00  36  ,g31
20:24:00  37  ,g32
20:24:00  38  ,g33
20:24:00  39  ,g34
20:24:00  40  ,g35
20:24:00  41  ,g36
20:24:00  42  ,g37
20:24:00  43  ,g38
20:24:00  44  ,g39
20:24:00  45  ,g40
20:24:00  46  ,g41
20:24:00  47  FROM modsrc
20:24:00  48  WHERE ydate = '&1'||' '||'&2'
20:24:00  49  AND pair = '&3'
20:24:00  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2011-01-07'||' '||'18:25:00'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.06
20:24:00 SQL> 
20:24:00 SQL> -- rpt
20:24:00 SQL> -- We should see just 1 row:
20:24:00 SQL> 
20:24:00 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.02
20:24:00 SQL> 
20:24:00 SQL> -- Build the model:
20:24:00 SQL> CREATE OR REPLACE VIEW bme AS
20:24:00   2  SELECT
20:24:00   3  prdate
20:24:00   4  ,gatt
20:24:00   5  ,g00
20:24:00   6  ,g01
20:24:00   7  ,g02
20:24:00   8  ,g03
20:24:00   9  ,g04
20:24:00  10  ,g05
20:24:00  11  ,g06
20:24:00  12  ,g07
20:24:00  13  ,g08
20:24:00  14  ,g09
20:24:00  15  ,g10
20:24:00  16  ,g11
20:24:00  17  ,g12
20:24:00  18  ,g13
20:24:00  19  ,g14
20:24:00  20  ,g15
20:24:00  21  ,g16
20:24:00  22  ,g17
20:24:00  23  ,g18
20:24:00  24  ,g19
20:24:00  25  ,g20
20:24:00  26  ,g21
20:24:00  27  ,g22
20:24:00  28  ,g23
20:24:00  29  ,g24
20:24:00  30  ,g25
20:24:00  31  ,g26
20:24:00  32  ,g27
20:24:00  33  ,g28
20:24:00  34  ,g29
20:24:00  35  ,g30
20:24:00  36  ,g31
20:24:00  37  ,g32
20:24:00  38  ,g33
20:24:00  39  ,g34
20:24:00  40  ,g35
20:24:00  41  ,g36
20:24:00  42  ,g37
20:24:00  43  ,g38
20:24:00  44  ,g39
20:24:00  45  ,g40
20:24:00  46  ,g41
20:24:00  47  FROM modsrc
20:24:00  48  WHERE gatt IN('nup','up')
20:24:00  49  -- Use only rows which are older than 1 day:
20:24:00  50  AND 1+ydate < '&1'||' '||'&2'
20:24:00  51  AND pair = '&3'
20:24:00  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2011-01-07'||' '||'18:25:00'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.05
20:24:00 SQL> 
20:24:00 SQL> -- rpt
20:24:00 SQL> 
20:24:00 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt;

GAT COUNT(PRDATE)
--- -------------
nup	    12102
up	     7111

Elapsed: 00:00:00.03
20:24:00 SQL> 
20:24:00 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2011-01-06 18:20:00

Elapsed: 00:00:00.02
20:24:00 SQL> 
20:24:00 SQL> -- Now build model from bme and score sme
20:24:00 SQL> @score1.sql gatt
20:24:00 SQL> --
20:24:00 SQL> -- score1.sql
20:24:00 SQL> --
20:24:00 SQL> 
20:24:00 SQL> -- I use this script to send 5 params to score.sql
20:24:00 SQL> -- which does the heavy lifting of creating an SVM model.
20:24:00 SQL> -- Then at the very end of this script I use the model
20:24:00 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:24:00 SQL> 
20:24:00 SQL> -- I call this script from 2 other scripts:
20:24:00 SQL> -- score1_5min.sql
20:24:00 SQL> -- score1_5min_gattn.sql
20:24:00 SQL> 
20:24:00 SQL> -- The 1st param is the name of the target attribute.
20:24:00 SQL> -- I like to call my target attributes either gatt or gattn.
20:24:00 SQL> 
20:24:00 SQL> -- Demo:
20:24:00 SQL> -- @score1.sql 'gatt'
20:24:00 SQL> -- @score1.sql 'gattn'
20:24:00 SQL> 
20:24:00 SQL> -- Now, I fill up svmc_apply_prep.
20:24:00 SQL> -- I use same model_name used in score.sql
20:24:00 SQL> DEFINE model_name = 'svmfx101'
20:24:00 SQL> DEFINE bldtable	= 'bme'
20:24:00 SQL> DEFINE scoretable = 'sme'
20:24:00 SQL> DEFINE case_id	= 'prdate'
20:24:00 SQL> -- Demo:
20:24:00 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:24:00 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:24:00 SQL> --
20:24:00 SQL> -- score.sql
20:24:00 SQL> --
20:24:00 SQL> 
20:24:00 SQL> -- usage: score.sql
20:24:00 SQL> 
20:24:00 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:24:00 SQL> 
20:24:00 SQL> -- DEFINE target	   = 'gatt'
20:24:00 SQL> -- DEFINE model_name = 'svmfx101'
20:24:00 SQL> -- DEFINE bldtable   = 'bme'
20:24:00 SQL> -- DEFINE scoretable = 'sme'
20:24:00 SQL> -- DEFINE case_id    = 'prdate'
20:24:00 SQL> 
20:24:00 SQL> DEFINE target	= '&1'
20:24:00 SQL> DEFINE model_name = '&2'
20:24:00 SQL> DEFINE bldtable	= '&3'
20:24:00 SQL> DEFINE scoretable = '&4'
20:24:00 SQL> DEFINE case_id	= '&5'
20:24:00 SQL> 
20:24:00 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:24:00 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:24:00 SQL> 
20:24:00 SQL> -- Builds an SVM model using pl/sql.
20:24:00 SQL> 
20:24:00 SQL> -----------------------------------------------------------------------
20:24:00 SQL> --			    BUILD THE MODEL
20:24:00 SQL> -----------------------------------------------------------------------
20:24:00 SQL> 
20:24:00 SQL> -- Cleanup old build data preparation objects for repeat runs
20:24:00 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.00
20:24:00 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.01
20:24:00 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:24:00 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.00
20:24:00 SQL> 
20:24:00 SQL> 
20:24:00 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:24:00 SQL> --
20:24:00 SQL> -- DROP	TABLE svmc_settings ;
20:24:00 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:24:00 SQL> -- DELETE svmc_settings;
20:24:00 SQL> 
20:24:00 SQL> -- The default classification algorithm is Naive Bayes. So override
20:24:00 SQL> -- this choice to SVM using a settings table.
20:24:00 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:24:00 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:24:00 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:24:00 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:24:00 SQL> -- models.
20:24:00 SQL> --
20:24:00 SQL> 
20:24:00 SQL> -- Do this once and then comment it out.
20:24:00 SQL> -- That makes script go faster.
20:24:00 SQL> -- BEGIN
20:24:00 SQL> -- -- Populate settings table
20:24:00 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:24:00 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:24:00 SQL> --
20:24:00 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:24:00 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:24:00 SQL> --
20:24:00 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:24:00 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:24:00 SQL> --   COMMIT;
20:24:00 SQL> -- END;
20:24:00 SQL> -- /
20:24:00 SQL> 
20:24:00 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:24:00 SQL> 
20:24:00 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:24:00   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:24:00   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
20:24:00 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:24:00   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:24:00   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
20:24:00 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:24:00   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:24:00   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:24:00 SQL> 
20:24:00 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:24:00   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:24:00   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:24:00 SQL> 
20:24:00 SQL> --------------------------------
20:24:00 SQL> -- PREPARE BUILD (TRAINING) DATA
20:24:00 SQL> --
20:24:00 SQL> 
20:24:00 SQL> -- 1. Missing Value treatment for all Predictors and
20:24:00 SQL> -- 2. Outlier Treatment and
20:24:00 SQL> -- 3. Normalization are performed below.
20:24:00 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:24:00 SQL> --    normalized here.
20:24:00 SQL> 
20:24:00 SQL> BEGIN
20:24:00   2  	-- Perform missing value treatment for all predictors
20:24:00   3  	-- create miss tables
20:24:00   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:24:00   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:24:00   6  
20:24:00   7  	-- populate miss tables
20:24:00   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:24:00   9  	  miss_table_name => 'svmc_miss_num',
20:24:00  10  	  data_table_name => '&bldtable',
20:24:00  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:24:00  12  
20:24:00  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:24:00  14  	  miss_table_name => 'svmc_miss_cat',
20:24:00  15  	  data_table_name => '&bldtable',
20:24:00  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:24:00  17  
20:24:00  18  	-- xform input data to replace missing values
20:24:00  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:24:00  20  	  miss_table_name => 'svmc_miss_num',
20:24:00  21  	  data_table_name => '&bldtable',
20:24:00  22  	  xform_view_name => 'xformed_build_miss_num');
20:24:00  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:24:00  24  	  miss_table_name => 'svmc_miss_cat',
20:24:00  25  	  data_table_name => '&bldtable',
20:24:00  26  	  xform_view_name => 'xformed_build_miss_cat');
20:24:00  27  
20:24:00  28  	-- Perform outlier treatment.
20:24:00  29  	-- create clip table
20:24:00  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:24:00  31  
20:24:00  32  	-- populate clip table
20:24:00  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:24:00  34  	  clip_table_name => 'svmc_clip',
20:24:00  35  	  data_table_name => '&bldtable',
20:24:00  36  	  tail_frac	  => 0.025,
20:24:00  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:24:00  38  
20:24:00  39  	-- xform input data to winsorized data
20:24:00  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:24:00  41  	  clip_table_name => 'svmc_clip',
20:24:00  42  	  data_table_name => '&bldtable',
20:24:00  43  	  xform_view_name => 'svmc_winsor');
20:24:00  44  
20:24:00  45  	-- create normalization table
20:24:00  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:24:00  47  
20:24:00  48  	-- populate normalization table based on winsorized data
20:24:00  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:24:00  50  	  norm_table_name => 'svmc_norm',
20:24:00  51  	  data_table_name => 'svmc_winsor',
20:24:00  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:24:00  53  
20:24:00  54  	-- normalize the original data
20:24:00  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:24:00  56  	  norm_table_name => 'svmc_norm',
20:24:00  57  	  data_table_name => '&bldtable',
20:24:00  58  	  xform_view_name => 'svmc_build_prep');
20:24:00  59  END;
20:24:00  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:02.41
20:24:02 SQL> 
20:24:02 SQL> ---------------------
20:24:02 SQL> -- CREATE A NEW MODEL
20:24:02 SQL> --
20:24:02 SQL> -- Cleanup old model with the same name for repeat runs
20:24:02 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:24:02   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:24:02   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.94
20:24:03 SQL> 
20:24:03 SQL> -- Build a new SVM Model
20:24:03 SQL> BEGIN
20:24:03   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:24:03   3  	  model_name	      => '&model_name',
20:24:03   4  	  mining_function     => dbms_data_mining.classification,
20:24:03   5  	  data_table_name     => 'svmc_build_prep',
20:24:03   6  	  case_id_column_name => '&case_id',
20:24:03   7  	  target_column_name  => '&target',
20:24:03   8  	  settings_table_name => 'svmc_settings');
20:24:03   9  END;
20:24:03  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:05.07
20:24:08 SQL> 
20:24:08 SQL> -----------------------------------------------------------------------
20:24:08 SQL> --			       APPLY/score THE MODEL
20:24:08 SQL> -----------------------------------------------------------------------
20:24:08 SQL> 
20:24:08 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:24:08 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:24:08   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:24:08   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:24:09 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:24:09   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:24:09   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:24:09 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:24:09   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:24:09   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:24:09 SQL> -----------------------
20:24:09 SQL> -- PREPARE SCORING DATA
20:24:09 SQL> --
20:24:09 SQL> -- If the data for model creation has been prepared, then the data
20:24:09 SQL> -- to be scored using the model must be prepared in the same manner
20:24:09 SQL> -- in order to obtain meaningful results.
20:24:09 SQL> --
20:24:09 SQL> -- 1. Missing Value treatment for all Predictors and
20:24:09 SQL> -- 2. Normalization
20:24:09 SQL> -- No outlier treatment will be performed during test and apply. The
20:24:09 SQL> -- normalization step is sufficient, since the normalization parameters
20:24:09 SQL> -- already capture the effects of outlier treatment done with build data.
20:24:09 SQL> --
20:24:09 SQL> BEGIN
20:24:09   2  	-- Xform Test data to replace missing values
20:24:09   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:24:09   4  	  miss_table_name => 'svmc_miss_num',
20:24:09   5  	  data_table_name => '&scoretable',
20:24:09   6  	  xform_view_name => 'xformed_apply_miss_num');
20:24:09   7  
20:24:09   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:24:09   9  	  miss_table_name => 'svmc_miss_cat',
20:24:09  10  	  data_table_name => '&scoretable',
20:24:09  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:24:09  12  
20:24:09  13  	-- Normalize the data to be scored
20:24:09  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:24:09  15  	  norm_table_name => 'svmc_norm',
20:24:09  16  	  data_table_name => '&scoretable',
20:24:09  17  	  xform_view_name => 'svmc_apply_prep');
20:24:09  18  END;
20:24:09  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.17
20:24:09 SQL> 
20:24:09 SQL> -- Maybe I already collected a score for this prdate.
20:24:09 SQL> -- DELETE it if I did:
20:24:09 SQL> DELETE svm62scores
20:24:09   2  WHERE score > 0
20:24:09   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:24:09   4  -- I need to supply the target attribute name:
20:24:09   5  AND targ = '&1'
20:24:09   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gatt'

0 rows deleted.

Elapsed: 00:00:00.02
20:24:09 SQL> 
20:24:09 SQL> -- We do a drumroll here:
20:24:09 SQL> 
20:24:09 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:24:09   2  SELECT
20:24:09   3  prdate
20:24:09   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:24:09   5  ,sysdate
20:24:09   6  ,SUBSTR(prdate,1,7)pair
20:24:09   7  ,SUBSTR(prdate,-19)ydate
20:24:09   8  ,'&1'
20:24:09   9  FROM svmc_apply_prep
20:24:09  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gatt'

1 row created.

Elapsed: 00:00:00.05
20:24:09 SQL> @score1_5min_gattn.sql	2010-12-07 18:45:00 aud_usd
20:24:09 SQL> --
20:24:09 SQL> -- score1_5min_gattn.sql
20:24:09 SQL> --
20:24:09 SQL> 
20:24:09 SQL> -- Demo:
20:24:09 SQL> -- @score1_5min_gattn.sql 2010-12-31 20:45:01 aud_usd
20:24:09 SQL> 
20:24:09 SQL> CREATE OR REPLACE VIEW sme AS
20:24:09   2  SELECT
20:24:09   3  prdate
20:24:09   4  ,NULL gattn
20:24:09   5  ,g00
20:24:09   6  ,g01
20:24:09   7  ,g02
20:24:09   8  ,g03
20:24:09   9  ,g04
20:24:09  10  ,g05
20:24:09  11  ,g06
20:24:09  12  ,g07
20:24:09  13  ,g08
20:24:09  14  ,g09
20:24:09  15  ,g10
20:24:09  16  ,g11
20:24:09  17  ,g12
20:24:09  18  ,g13
20:24:09  19  ,g14
20:24:09  20  ,g15
20:24:09  21  ,g16
20:24:09  22  ,g17
20:24:09  23  ,g18
20:24:09  24  ,g19
20:24:09  25  ,g20
20:24:09  26  ,g21
20:24:09  27  ,g22
20:24:09  28  ,g23
20:24:09  29  ,g24
20:24:09  30  ,g25
20:24:09  31  ,g26
20:24:09  32  ,g27
20:24:09  33  ,g28
20:24:09  34  ,g29
20:24:09  35  ,g30
20:24:09  36  ,g31
20:24:09  37  ,g32
20:24:09  38  ,g33
20:24:09  39  ,g34
20:24:09  40  ,g35
20:24:09  41  ,g36
20:24:09  42  ,g37
20:24:09  43  ,g38
20:24:09  44  ,g39
20:24:09  45  ,g40
20:24:09  46  ,g41
20:24:09  47  FROM modsrc
20:24:09  48  WHERE ydate = '&1'||' '||'&2'
20:24:09  49  AND pair = '&3'
20:24:09  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-12-07'||' '||'18:45:00'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.05
20:24:09 SQL> 
20:24:09 SQL> -- rpt
20:24:09 SQL> -- We should see just 1 row:
20:24:09 SQL> 
20:24:09 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.02
20:24:09 SQL> 
20:24:09 SQL> -- Build the model:
20:24:09 SQL> CREATE OR REPLACE VIEW bme AS
20:24:09   2  SELECT
20:24:09   3  prdate
20:24:09   4  ,gattn
20:24:09   5  ,g00
20:24:09   6  ,g01
20:24:09   7  ,g02
20:24:09   8  ,g03
20:24:09   9  ,g04
20:24:09  10  ,g05
20:24:09  11  ,g06
20:24:09  12  ,g07
20:24:09  13  ,g08
20:24:09  14  ,g09
20:24:09  15  ,g10
20:24:09  16  ,g11
20:24:09  17  ,g12
20:24:09  18  ,g13
20:24:09  19  ,g14
20:24:09  20  ,g15
20:24:09  21  ,g16
20:24:09  22  ,g17
20:24:09  23  ,g18
20:24:09  24  ,g19
20:24:09  25  ,g20
20:24:09  26  ,g21
20:24:09  27  ,g22
20:24:09  28  ,g23
20:24:09  29  ,g24
20:24:09  30  ,g25
20:24:09  31  ,g26
20:24:09  32  ,g27
20:24:09  33  ,g28
20:24:09  34  ,g29
20:24:09  35  ,g30
20:24:09  36  ,g31
20:24:09  37  ,g32
20:24:09  38  ,g33
20:24:09  39  ,g34
20:24:09  40  ,g35
20:24:09  41  ,g36
20:24:09  42  ,g37
20:24:09  43  ,g38
20:24:09  44  ,g39
20:24:09  45  ,g40
20:24:09  46  ,g41
20:24:09  47  FROM modsrc
20:24:09  48  WHERE gattn IN('nup','up')
20:24:09  49  -- Use only rows which are older than 1 day:
20:24:09  50  AND 1+ydate < '&1'||' '||'&2'
20:24:09  51  AND pair = '&3'
20:24:09  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-12-07'||' '||'18:45:00'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.05
20:24:09 SQL> 
20:24:09 SQL> -- rpt
20:24:09 SQL> 
20:24:09 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	     8094
up	     4626

Elapsed: 00:00:00.03
20:24:09 SQL> 
20:24:09 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-12-06 18:40:00

Elapsed: 00:00:00.01
20:24:09 SQL> 
20:24:09 SQL> -- Now build model from bme and score sme
20:24:09 SQL> @score1.sql gattn
20:24:09 SQL> --
20:24:09 SQL> -- score1.sql
20:24:09 SQL> --
20:24:09 SQL> 
20:24:09 SQL> -- I use this script to send 5 params to score.sql
20:24:09 SQL> -- which does the heavy lifting of creating an SVM model.
20:24:09 SQL> -- Then at the very end of this script I use the model
20:24:09 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:24:09 SQL> 
20:24:09 SQL> -- I call this script from 2 other scripts:
20:24:09 SQL> -- score1_5min.sql
20:24:09 SQL> -- score1_5min_gattn.sql
20:24:09 SQL> 
20:24:09 SQL> -- The 1st param is the name of the target attribute.
20:24:09 SQL> -- I like to call my target attributes either gatt or gattn.
20:24:09 SQL> 
20:24:09 SQL> -- Demo:
20:24:09 SQL> -- @score1.sql 'gatt'
20:24:09 SQL> -- @score1.sql 'gattn'
20:24:09 SQL> 
20:24:09 SQL> -- Now, I fill up svmc_apply_prep.
20:24:09 SQL> -- I use same model_name used in score.sql
20:24:09 SQL> DEFINE model_name = 'svmfx101'
20:24:09 SQL> DEFINE bldtable	= 'bme'
20:24:09 SQL> DEFINE scoretable = 'sme'
20:24:09 SQL> DEFINE case_id	= 'prdate'
20:24:09 SQL> -- Demo:
20:24:09 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:24:09 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:24:09 SQL> --
20:24:09 SQL> -- score.sql
20:24:09 SQL> --
20:24:09 SQL> 
20:24:09 SQL> -- usage: score.sql
20:24:09 SQL> 
20:24:09 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:24:09 SQL> 
20:24:09 SQL> -- DEFINE target	   = 'gatt'
20:24:09 SQL> -- DEFINE model_name = 'svmfx101'
20:24:09 SQL> -- DEFINE bldtable   = 'bme'
20:24:09 SQL> -- DEFINE scoretable = 'sme'
20:24:09 SQL> -- DEFINE case_id    = 'prdate'
20:24:09 SQL> 
20:24:09 SQL> DEFINE target	= '&1'
20:24:09 SQL> DEFINE model_name = '&2'
20:24:09 SQL> DEFINE bldtable	= '&3'
20:24:09 SQL> DEFINE scoretable = '&4'
20:24:09 SQL> DEFINE case_id	= '&5'
20:24:09 SQL> 
20:24:09 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:24:09 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:24:09 SQL> 
20:24:09 SQL> -- Builds an SVM model using pl/sql.
20:24:09 SQL> 
20:24:09 SQL> -----------------------------------------------------------------------
20:24:09 SQL> --			    BUILD THE MODEL
20:24:09 SQL> -----------------------------------------------------------------------
20:24:09 SQL> 
20:24:09 SQL> -- Cleanup old build data preparation objects for repeat runs
20:24:09 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.00
20:24:09 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:24:09 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.01
20:24:09 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.00
20:24:09 SQL> 
20:24:09 SQL> 
20:24:09 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:24:09 SQL> --
20:24:09 SQL> -- DROP	TABLE svmc_settings ;
20:24:09 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:24:09 SQL> -- DELETE svmc_settings;
20:24:09 SQL> 
20:24:09 SQL> -- The default classification algorithm is Naive Bayes. So override
20:24:09 SQL> -- this choice to SVM using a settings table.
20:24:09 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:24:09 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:24:09 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:24:09 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:24:09 SQL> -- models.
20:24:09 SQL> --
20:24:09 SQL> 
20:24:09 SQL> -- Do this once and then comment it out.
20:24:09 SQL> -- That makes script go faster.
20:24:09 SQL> -- BEGIN
20:24:09 SQL> -- -- Populate settings table
20:24:09 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:24:09 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:24:09 SQL> --
20:24:09 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:24:09 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:24:09 SQL> --
20:24:09 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:24:09 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:24:09 SQL> --   COMMIT;
20:24:09 SQL> -- END;
20:24:09 SQL> -- /
20:24:09 SQL> 
20:24:09 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:24:09 SQL> 
20:24:09 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:24:09   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:24:09   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:24:09 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:24:09   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:24:09   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:24:09 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:24:09   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:24:09   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:24:09 SQL> 
20:24:09 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:24:09   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:24:09   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:24:09 SQL> 
20:24:09 SQL> --------------------------------
20:24:09 SQL> -- PREPARE BUILD (TRAINING) DATA
20:24:09 SQL> --
20:24:09 SQL> 
20:24:09 SQL> -- 1. Missing Value treatment for all Predictors and
20:24:09 SQL> -- 2. Outlier Treatment and
20:24:09 SQL> -- 3. Normalization are performed below.
20:24:09 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:24:09 SQL> --    normalized here.
20:24:09 SQL> 
20:24:09 SQL> BEGIN
20:24:09   2  	-- Perform missing value treatment for all predictors
20:24:09   3  	-- create miss tables
20:24:09   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:24:09   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:24:09   6  
20:24:09   7  	-- populate miss tables
20:24:09   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:24:09   9  	  miss_table_name => 'svmc_miss_num',
20:24:09  10  	  data_table_name => '&bldtable',
20:24:09  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:24:09  12  
20:24:09  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:24:09  14  	  miss_table_name => 'svmc_miss_cat',
20:24:09  15  	  data_table_name => '&bldtable',
20:24:09  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:24:09  17  
20:24:09  18  	-- xform input data to replace missing values
20:24:09  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:24:09  20  	  miss_table_name => 'svmc_miss_num',
20:24:09  21  	  data_table_name => '&bldtable',
20:24:09  22  	  xform_view_name => 'xformed_build_miss_num');
20:24:09  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:24:09  24  	  miss_table_name => 'svmc_miss_cat',
20:24:09  25  	  data_table_name => '&bldtable',
20:24:09  26  	  xform_view_name => 'xformed_build_miss_cat');
20:24:09  27  
20:24:09  28  	-- Perform outlier treatment.
20:24:09  29  	-- create clip table
20:24:09  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:24:09  31  
20:24:09  32  	-- populate clip table
20:24:09  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:24:09  34  	  clip_table_name => 'svmc_clip',
20:24:09  35  	  data_table_name => '&bldtable',
20:24:09  36  	  tail_frac	  => 0.025,
20:24:09  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:24:09  38  
20:24:09  39  	-- xform input data to winsorized data
20:24:09  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:24:09  41  	  clip_table_name => 'svmc_clip',
20:24:09  42  	  data_table_name => '&bldtable',
20:24:09  43  	  xform_view_name => 'svmc_winsor');
20:24:09  44  
20:24:09  45  	-- create normalization table
20:24:09  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:24:09  47  
20:24:09  48  	-- populate normalization table based on winsorized data
20:24:09  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:24:09  50  	  norm_table_name => 'svmc_norm',
20:24:09  51  	  data_table_name => 'svmc_winsor',
20:24:09  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:24:09  53  
20:24:09  54  	-- normalize the original data
20:24:09  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:24:09  56  	  norm_table_name => 'svmc_norm',
20:24:09  57  	  data_table_name => '&bldtable',
20:24:09  58  	  xform_view_name => 'svmc_build_prep');
20:24:09  59  END;
20:24:09  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.86
20:24:11 SQL> 
20:24:11 SQL> ---------------------
20:24:11 SQL> -- CREATE A NEW MODEL
20:24:11 SQL> --
20:24:11 SQL> -- Cleanup old model with the same name for repeat runs
20:24:11 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:24:11   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:24:11   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.92
20:24:12 SQL> 
20:24:12 SQL> -- Build a new SVM Model
20:24:12 SQL> BEGIN
20:24:12   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:24:12   3  	  model_name	      => '&model_name',
20:24:12   4  	  mining_function     => dbms_data_mining.classification,
20:24:12   5  	  data_table_name     => 'svmc_build_prep',
20:24:12   6  	  case_id_column_name => '&case_id',
20:24:12   7  	  target_column_name  => '&target',
20:24:12   8  	  settings_table_name => 'svmc_settings');
20:24:12   9  END;
20:24:12  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:04.45
20:24:16 SQL> 
20:24:16 SQL> -----------------------------------------------------------------------
20:24:16 SQL> --			       APPLY/score THE MODEL
20:24:16 SQL> -----------------------------------------------------------------------
20:24:16 SQL> 
20:24:16 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:24:16 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:24:16   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:24:16   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:24:16 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:24:16   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:24:16   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:24:16 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:24:16   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:24:16   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:24:16 SQL> -----------------------
20:24:16 SQL> -- PREPARE SCORING DATA
20:24:16 SQL> --
20:24:16 SQL> -- If the data for model creation has been prepared, then the data
20:24:16 SQL> -- to be scored using the model must be prepared in the same manner
20:24:16 SQL> -- in order to obtain meaningful results.
20:24:16 SQL> --
20:24:16 SQL> -- 1. Missing Value treatment for all Predictors and
20:24:16 SQL> -- 2. Normalization
20:24:16 SQL> -- No outlier treatment will be performed during test and apply. The
20:24:16 SQL> -- normalization step is sufficient, since the normalization parameters
20:24:16 SQL> -- already capture the effects of outlier treatment done with build data.
20:24:16 SQL> --
20:24:16 SQL> BEGIN
20:24:16   2  	-- Xform Test data to replace missing values
20:24:16   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:24:16   4  	  miss_table_name => 'svmc_miss_num',
20:24:16   5  	  data_table_name => '&scoretable',
20:24:16   6  	  xform_view_name => 'xformed_apply_miss_num');
20:24:16   7  
20:24:16   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:24:16   9  	  miss_table_name => 'svmc_miss_cat',
20:24:16  10  	  data_table_name => '&scoretable',
20:24:16  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:24:16  12  
20:24:16  13  	-- Normalize the data to be scored
20:24:16  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:24:16  15  	  norm_table_name => 'svmc_norm',
20:24:16  16  	  data_table_name => '&scoretable',
20:24:16  17  	  xform_view_name => 'svmc_apply_prep');
20:24:16  18  END;
20:24:16  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.18
20:24:17 SQL> 
20:24:17 SQL> -- Maybe I already collected a score for this prdate.
20:24:17 SQL> -- DELETE it if I did:
20:24:17 SQL> DELETE svm62scores
20:24:17   2  WHERE score > 0
20:24:17   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:24:17   4  -- I need to supply the target attribute name:
20:24:17   5  AND targ = '&1'
20:24:17   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gattn'

0 rows deleted.

Elapsed: 00:00:00.02
20:24:17 SQL> 
20:24:17 SQL> -- We do a drumroll here:
20:24:17 SQL> 
20:24:17 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:24:17   2  SELECT
20:24:17   3  prdate
20:24:17   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:24:17   5  ,sysdate
20:24:17   6  ,SUBSTR(prdate,1,7)pair
20:24:17   7  ,SUBSTR(prdate,-19)ydate
20:24:17   8  ,'&1'
20:24:17   9  FROM svmc_apply_prep
20:24:17  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gattn'

1 row created.

Elapsed: 00:00:00.05
20:24:17 SQL> @score1_5min.sql	      2010-11-26 16:10:01 aud_usd
20:24:17 SQL> --
20:24:17 SQL> -- score1_5min.sql
20:24:17 SQL> --
20:24:17 SQL> 
20:24:17 SQL> -- Demo:
20:24:17 SQL> -- @score1_5min.sql 2010-12-31 20:45:01 aud_usd
20:24:17 SQL> 
20:24:17 SQL> CREATE OR REPLACE VIEW sme AS
20:24:17   2  SELECT
20:24:17   3  prdate
20:24:17   4  ,NULL gatt
20:24:17   5  ,g00
20:24:17   6  ,g01
20:24:17   7  ,g02
20:24:17   8  ,g03
20:24:17   9  ,g04
20:24:17  10  ,g05
20:24:17  11  ,g06
20:24:17  12  ,g07
20:24:17  13  ,g08
20:24:17  14  ,g09
20:24:17  15  ,g10
20:24:17  16  ,g11
20:24:17  17  ,g12
20:24:17  18  ,g13
20:24:17  19  ,g14
20:24:17  20  ,g15
20:24:17  21  ,g16
20:24:17  22  ,g17
20:24:17  23  ,g18
20:24:17  24  ,g19
20:24:17  25  ,g20
20:24:17  26  ,g21
20:24:17  27  ,g22
20:24:17  28  ,g23
20:24:17  29  ,g24
20:24:17  30  ,g25
20:24:17  31  ,g26
20:24:17  32  ,g27
20:24:17  33  ,g28
20:24:17  34  ,g29
20:24:17  35  ,g30
20:24:17  36  ,g31
20:24:17  37  ,g32
20:24:17  38  ,g33
20:24:17  39  ,g34
20:24:17  40  ,g35
20:24:17  41  ,g36
20:24:17  42  ,g37
20:24:17  43  ,g38
20:24:17  44  ,g39
20:24:17  45  ,g40
20:24:17  46  ,g41
20:24:17  47  FROM modsrc
20:24:17  48  WHERE ydate = '&1'||' '||'&2'
20:24:17  49  AND pair = '&3'
20:24:17  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-11-26'||' '||'16:10:01'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:24:17 SQL> 
20:24:17 SQL> -- rpt
20:24:17 SQL> -- We should see just 1 row:
20:24:17 SQL> 
20:24:17 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.02
20:24:17 SQL> 
20:24:17 SQL> -- Build the model:
20:24:17 SQL> CREATE OR REPLACE VIEW bme AS
20:24:17   2  SELECT
20:24:17   3  prdate
20:24:17   4  ,gatt
20:24:17   5  ,g00
20:24:17   6  ,g01
20:24:17   7  ,g02
20:24:17   8  ,g03
20:24:17   9  ,g04
20:24:17  10  ,g05
20:24:17  11  ,g06
20:24:17  12  ,g07
20:24:17  13  ,g08
20:24:17  14  ,g09
20:24:17  15  ,g10
20:24:17  16  ,g11
20:24:17  17  ,g12
20:24:17  18  ,g13
20:24:17  19  ,g14
20:24:17  20  ,g15
20:24:17  21  ,g16
20:24:17  22  ,g17
20:24:17  23  ,g18
20:24:17  24  ,g19
20:24:17  25  ,g20
20:24:17  26  ,g21
20:24:17  27  ,g22
20:24:17  28  ,g23
20:24:17  29  ,g24
20:24:17  30  ,g25
20:24:17  31  ,g26
20:24:17  32  ,g27
20:24:17  33  ,g28
20:24:17  34  ,g29
20:24:17  35  ,g30
20:24:17  36  ,g31
20:24:17  37  ,g32
20:24:17  38  ,g33
20:24:17  39  ,g34
20:24:17  40  ,g35
20:24:17  41  ,g36
20:24:17  42  ,g37
20:24:17  43  ,g38
20:24:17  44  ,g39
20:24:17  45  ,g40
20:24:17  46  ,g41
20:24:17  47  FROM modsrc
20:24:17  48  WHERE gatt IN('nup','up')
20:24:17  49  -- Use only rows which are older than 1 day:
20:24:17  50  AND 1+ydate < '&1'||' '||'&2'
20:24:17  51  AND pair = '&3'
20:24:17  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-11-26'||' '||'16:10:01'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.05
20:24:17 SQL> 
20:24:17 SQL> -- rpt
20:24:17 SQL> 
20:24:17 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt;

GAT COUNT(PRDATE)
--- -------------
nup	     6571
up	     4110

Elapsed: 00:00:00.02
20:24:17 SQL> 
20:24:17 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-11-25 16:05:01

Elapsed: 00:00:00.02
20:24:17 SQL> 
20:24:17 SQL> -- Now build model from bme and score sme
20:24:17 SQL> @score1.sql gatt
20:24:17 SQL> --
20:24:17 SQL> -- score1.sql
20:24:17 SQL> --
20:24:17 SQL> 
20:24:17 SQL> -- I use this script to send 5 params to score.sql
20:24:17 SQL> -- which does the heavy lifting of creating an SVM model.
20:24:17 SQL> -- Then at the very end of this script I use the model
20:24:17 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:24:17 SQL> 
20:24:17 SQL> -- I call this script from 2 other scripts:
20:24:17 SQL> -- score1_5min.sql
20:24:17 SQL> -- score1_5min_gattn.sql
20:24:17 SQL> 
20:24:17 SQL> -- The 1st param is the name of the target attribute.
20:24:17 SQL> -- I like to call my target attributes either gatt or gattn.
20:24:17 SQL> 
20:24:17 SQL> -- Demo:
20:24:17 SQL> -- @score1.sql 'gatt'
20:24:17 SQL> -- @score1.sql 'gattn'
20:24:17 SQL> 
20:24:17 SQL> -- Now, I fill up svmc_apply_prep.
20:24:17 SQL> -- I use same model_name used in score.sql
20:24:17 SQL> DEFINE model_name = 'svmfx101'
20:24:17 SQL> DEFINE bldtable	= 'bme'
20:24:17 SQL> DEFINE scoretable = 'sme'
20:24:17 SQL> DEFINE case_id	= 'prdate'
20:24:17 SQL> -- Demo:
20:24:17 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:24:17 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:24:17 SQL> --
20:24:17 SQL> -- score.sql
20:24:17 SQL> --
20:24:17 SQL> 
20:24:17 SQL> -- usage: score.sql
20:24:17 SQL> 
20:24:17 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:24:17 SQL> 
20:24:17 SQL> -- DEFINE target	   = 'gatt'
20:24:17 SQL> -- DEFINE model_name = 'svmfx101'
20:24:17 SQL> -- DEFINE bldtable   = 'bme'
20:24:17 SQL> -- DEFINE scoretable = 'sme'
20:24:17 SQL> -- DEFINE case_id    = 'prdate'
20:24:17 SQL> 
20:24:17 SQL> DEFINE target	= '&1'
20:24:17 SQL> DEFINE model_name = '&2'
20:24:17 SQL> DEFINE bldtable	= '&3'
20:24:17 SQL> DEFINE scoretable = '&4'
20:24:17 SQL> DEFINE case_id	= '&5'
20:24:17 SQL> 
20:24:17 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:24:17 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:24:17 SQL> 
20:24:17 SQL> -- Builds an SVM model using pl/sql.
20:24:17 SQL> 
20:24:17 SQL> -----------------------------------------------------------------------
20:24:17 SQL> --			    BUILD THE MODEL
20:24:17 SQL> -----------------------------------------------------------------------
20:24:17 SQL> 
20:24:17 SQL> -- Cleanup old build data preparation objects for repeat runs
20:24:17 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.00
20:24:17 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:24:17 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:24:17 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.01
20:24:17 SQL> 
20:24:17 SQL> 
20:24:17 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:24:17 SQL> --
20:24:17 SQL> -- DROP	TABLE svmc_settings ;
20:24:17 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:24:17 SQL> -- DELETE svmc_settings;
20:24:17 SQL> 
20:24:17 SQL> -- The default classification algorithm is Naive Bayes. So override
20:24:17 SQL> -- this choice to SVM using a settings table.
20:24:17 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:24:17 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:24:17 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:24:17 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:24:17 SQL> -- models.
20:24:17 SQL> --
20:24:17 SQL> 
20:24:17 SQL> -- Do this once and then comment it out.
20:24:17 SQL> -- That makes script go faster.
20:24:17 SQL> -- BEGIN
20:24:17 SQL> -- -- Populate settings table
20:24:17 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:24:17 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:24:17 SQL> --
20:24:17 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:24:17 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:24:17 SQL> --
20:24:17 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:24:17 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:24:17 SQL> --   COMMIT;
20:24:17 SQL> -- END;
20:24:17 SQL> -- /
20:24:17 SQL> 
20:24:17 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:24:17 SQL> 
20:24:17 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:24:17   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:24:17   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
20:24:17 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:24:17   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:24:17   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:24:17 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:24:17   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:24:17   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:24:17 SQL> 
20:24:17 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:24:17   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:24:17   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:24:17 SQL> 
20:24:17 SQL> --------------------------------
20:24:17 SQL> -- PREPARE BUILD (TRAINING) DATA
20:24:17 SQL> --
20:24:17 SQL> 
20:24:17 SQL> -- 1. Missing Value treatment for all Predictors and
20:24:17 SQL> -- 2. Outlier Treatment and
20:24:17 SQL> -- 3. Normalization are performed below.
20:24:17 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:24:17 SQL> --    normalized here.
20:24:17 SQL> 
20:24:17 SQL> BEGIN
20:24:17   2  	-- Perform missing value treatment for all predictors
20:24:17   3  	-- create miss tables
20:24:17   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:24:17   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:24:17   6  
20:24:17   7  	-- populate miss tables
20:24:17   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:24:17   9  	  miss_table_name => 'svmc_miss_num',
20:24:17  10  	  data_table_name => '&bldtable',
20:24:17  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:24:17  12  
20:24:17  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:24:17  14  	  miss_table_name => 'svmc_miss_cat',
20:24:17  15  	  data_table_name => '&bldtable',
20:24:17  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:24:17  17  
20:24:17  18  	-- xform input data to replace missing values
20:24:17  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:24:17  20  	  miss_table_name => 'svmc_miss_num',
20:24:17  21  	  data_table_name => '&bldtable',
20:24:17  22  	  xform_view_name => 'xformed_build_miss_num');
20:24:17  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:24:17  24  	  miss_table_name => 'svmc_miss_cat',
20:24:17  25  	  data_table_name => '&bldtable',
20:24:17  26  	  xform_view_name => 'xformed_build_miss_cat');
20:24:17  27  
20:24:17  28  	-- Perform outlier treatment.
20:24:17  29  	-- create clip table
20:24:17  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:24:17  31  
20:24:17  32  	-- populate clip table
20:24:17  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:24:17  34  	  clip_table_name => 'svmc_clip',
20:24:17  35  	  data_table_name => '&bldtable',
20:24:17  36  	  tail_frac	  => 0.025,
20:24:17  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:24:17  38  
20:24:17  39  	-- xform input data to winsorized data
20:24:17  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:24:17  41  	  clip_table_name => 'svmc_clip',
20:24:17  42  	  data_table_name => '&bldtable',
20:24:17  43  	  xform_view_name => 'svmc_winsor');
20:24:17  44  
20:24:17  45  	-- create normalization table
20:24:17  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:24:17  47  
20:24:17  48  	-- populate normalization table based on winsorized data
20:24:17  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:24:17  50  	  norm_table_name => 'svmc_norm',
20:24:17  51  	  data_table_name => 'svmc_winsor',
20:24:17  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:24:17  53  
20:24:17  54  	-- normalize the original data
20:24:17  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:24:17  56  	  norm_table_name => 'svmc_norm',
20:24:17  57  	  data_table_name => '&bldtable',
20:24:17  58  	  xform_view_name => 'svmc_build_prep');
20:24:17  59  END;
20:24:17  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.71
20:24:19 SQL> 
20:24:19 SQL> ---------------------
20:24:19 SQL> -- CREATE A NEW MODEL
20:24:19 SQL> --
20:24:19 SQL> -- Cleanup old model with the same name for repeat runs
20:24:19 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:24:19   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:24:19   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.92
20:24:20 SQL> 
20:24:20 SQL> -- Build a new SVM Model
20:24:20 SQL> BEGIN
20:24:20   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:24:20   3  	  model_name	      => '&model_name',
20:24:20   4  	  mining_function     => dbms_data_mining.classification,
20:24:20   5  	  data_table_name     => 'svmc_build_prep',
20:24:20   6  	  case_id_column_name => '&case_id',
20:24:20   7  	  target_column_name  => '&target',
20:24:20   8  	  settings_table_name => 'svmc_settings');
20:24:20   9  END;
20:24:20  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:04.78
20:24:24 SQL> 
20:24:24 SQL> -----------------------------------------------------------------------
20:24:24 SQL> --			       APPLY/score THE MODEL
20:24:24 SQL> -----------------------------------------------------------------------
20:24:24 SQL> 
20:24:24 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:24:24 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:24:24   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:24:24   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:24:25 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:24:25   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:24:25   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:24:25 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:24:25   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:24:25   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:24:25 SQL> -----------------------
20:24:25 SQL> -- PREPARE SCORING DATA
20:24:25 SQL> --
20:24:25 SQL> -- If the data for model creation has been prepared, then the data
20:24:25 SQL> -- to be scored using the model must be prepared in the same manner
20:24:25 SQL> -- in order to obtain meaningful results.
20:24:25 SQL> --
20:24:25 SQL> -- 1. Missing Value treatment for all Predictors and
20:24:25 SQL> -- 2. Normalization
20:24:25 SQL> -- No outlier treatment will be performed during test and apply. The
20:24:25 SQL> -- normalization step is sufficient, since the normalization parameters
20:24:25 SQL> -- already capture the effects of outlier treatment done with build data.
20:24:25 SQL> --
20:24:25 SQL> BEGIN
20:24:25   2  	-- Xform Test data to replace missing values
20:24:25   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:24:25   4  	  miss_table_name => 'svmc_miss_num',
20:24:25   5  	  data_table_name => '&scoretable',
20:24:25   6  	  xform_view_name => 'xformed_apply_miss_num');
20:24:25   7  
20:24:25   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:24:25   9  	  miss_table_name => 'svmc_miss_cat',
20:24:25  10  	  data_table_name => '&scoretable',
20:24:25  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:24:25  12  
20:24:25  13  	-- Normalize the data to be scored
20:24:25  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:24:25  15  	  norm_table_name => 'svmc_norm',
20:24:25  16  	  data_table_name => '&scoretable',
20:24:25  17  	  xform_view_name => 'svmc_apply_prep');
20:24:25  18  END;
20:24:25  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.18
20:24:25 SQL> 
20:24:25 SQL> -- Maybe I already collected a score for this prdate.
20:24:25 SQL> -- DELETE it if I did:
20:24:25 SQL> DELETE svm62scores
20:24:25   2  WHERE score > 0
20:24:25   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:24:25   4  -- I need to supply the target attribute name:
20:24:25   5  AND targ = '&1'
20:24:25   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gatt'

0 rows deleted.

Elapsed: 00:00:00.02
20:24:25 SQL> 
20:24:25 SQL> -- We do a drumroll here:
20:24:25 SQL> 
20:24:25 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:24:25   2  SELECT
20:24:25   3  prdate
20:24:25   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:24:25   5  ,sysdate
20:24:25   6  ,SUBSTR(prdate,1,7)pair
20:24:25   7  ,SUBSTR(prdate,-19)ydate
20:24:25   8  ,'&1'
20:24:25   9  FROM svmc_apply_prep
20:24:25  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gatt'

1 row created.

Elapsed: 00:00:00.05
20:24:25 SQL> @score1_5min_gattn.sql	2010-11-02 07:15:01 aud_usd
20:24:25 SQL> --
20:24:25 SQL> -- score1_5min_gattn.sql
20:24:25 SQL> --
20:24:25 SQL> 
20:24:25 SQL> -- Demo:
20:24:25 SQL> -- @score1_5min_gattn.sql 2010-12-31 20:45:01 aud_usd
20:24:25 SQL> 
20:24:25 SQL> CREATE OR REPLACE VIEW sme AS
20:24:25   2  SELECT
20:24:25   3  prdate
20:24:25   4  ,NULL gattn
20:24:25   5  ,g00
20:24:25   6  ,g01
20:24:25   7  ,g02
20:24:25   8  ,g03
20:24:25   9  ,g04
20:24:25  10  ,g05
20:24:25  11  ,g06
20:24:25  12  ,g07
20:24:25  13  ,g08
20:24:25  14  ,g09
20:24:25  15  ,g10
20:24:25  16  ,g11
20:24:25  17  ,g12
20:24:25  18  ,g13
20:24:25  19  ,g14
20:24:25  20  ,g15
20:24:25  21  ,g16
20:24:25  22  ,g17
20:24:25  23  ,g18
20:24:25  24  ,g19
20:24:25  25  ,g20
20:24:25  26  ,g21
20:24:25  27  ,g22
20:24:25  28  ,g23
20:24:25  29  ,g24
20:24:25  30  ,g25
20:24:25  31  ,g26
20:24:25  32  ,g27
20:24:25  33  ,g28
20:24:25  34  ,g29
20:24:25  35  ,g30
20:24:25  36  ,g31
20:24:25  37  ,g32
20:24:25  38  ,g33
20:24:25  39  ,g34
20:24:25  40  ,g35
20:24:25  41  ,g36
20:24:25  42  ,g37
20:24:25  43  ,g38
20:24:25  44  ,g39
20:24:25  45  ,g40
20:24:25  46  ,g41
20:24:25  47  FROM modsrc
20:24:25  48  WHERE ydate = '&1'||' '||'&2'
20:24:25  49  AND pair = '&3'
20:24:25  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-11-02'||' '||'07:15:01'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.05
20:24:25 SQL> 
20:24:25 SQL> -- rpt
20:24:25 SQL> -- We should see just 1 row:
20:24:25 SQL> 
20:24:25 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.02
20:24:25 SQL> 
20:24:25 SQL> -- Build the model:
20:24:25 SQL> CREATE OR REPLACE VIEW bme AS
20:24:25   2  SELECT
20:24:25   3  prdate
20:24:25   4  ,gattn
20:24:25   5  ,g00
20:24:25   6  ,g01
20:24:25   7  ,g02
20:24:25   8  ,g03
20:24:25   9  ,g04
20:24:25  10  ,g05
20:24:25  11  ,g06
20:24:25  12  ,g07
20:24:25  13  ,g08
20:24:25  14  ,g09
20:24:25  15  ,g10
20:24:25  16  ,g11
20:24:25  17  ,g12
20:24:25  18  ,g13
20:24:25  19  ,g14
20:24:25  20  ,g15
20:24:25  21  ,g16
20:24:25  22  ,g17
20:24:25  23  ,g18
20:24:25  24  ,g19
20:24:25  25  ,g20
20:24:25  26  ,g21
20:24:25  27  ,g22
20:24:25  28  ,g23
20:24:25  29  ,g24
20:24:25  30  ,g25
20:24:25  31  ,g26
20:24:25  32  ,g27
20:24:25  33  ,g28
20:24:25  34  ,g29
20:24:25  35  ,g30
20:24:25  36  ,g31
20:24:25  37  ,g32
20:24:25  38  ,g33
20:24:25  39  ,g34
20:24:25  40  ,g35
20:24:25  41  ,g36
20:24:25  42  ,g37
20:24:25  43  ,g38
20:24:25  44  ,g39
20:24:25  45  ,g40
20:24:25  46  ,g41
20:24:25  47  FROM modsrc
20:24:25  48  WHERE gattn IN('nup','up')
20:24:25  49  -- Use only rows which are older than 1 day:
20:24:25  50  AND 1+ydate < '&1'||' '||'&2'
20:24:25  51  AND pair = '&3'
20:24:25  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-11-02'||' '||'07:15:01'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.05
20:24:25 SQL> 
20:24:25 SQL> -- rpt
20:24:25 SQL> 
20:24:25 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	     3456
up	     1908

Elapsed: 00:00:00.02
20:24:25 SQL> 
20:24:25 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-11-01 07:10:01

Elapsed: 00:00:00.01
20:24:25 SQL> 
20:24:25 SQL> -- Now build model from bme and score sme
20:24:25 SQL> @score1.sql gattn
20:24:25 SQL> --
20:24:25 SQL> -- score1.sql
20:24:25 SQL> --
20:24:25 SQL> 
20:24:25 SQL> -- I use this script to send 5 params to score.sql
20:24:25 SQL> -- which does the heavy lifting of creating an SVM model.
20:24:25 SQL> -- Then at the very end of this script I use the model
20:24:25 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:24:25 SQL> 
20:24:25 SQL> -- I call this script from 2 other scripts:
20:24:25 SQL> -- score1_5min.sql
20:24:25 SQL> -- score1_5min_gattn.sql
20:24:25 SQL> 
20:24:25 SQL> -- The 1st param is the name of the target attribute.
20:24:25 SQL> -- I like to call my target attributes either gatt or gattn.
20:24:25 SQL> 
20:24:25 SQL> -- Demo:
20:24:25 SQL> -- @score1.sql 'gatt'
20:24:25 SQL> -- @score1.sql 'gattn'
20:24:25 SQL> 
20:24:25 SQL> -- Now, I fill up svmc_apply_prep.
20:24:25 SQL> -- I use same model_name used in score.sql
20:24:25 SQL> DEFINE model_name = 'svmfx101'
20:24:25 SQL> DEFINE bldtable	= 'bme'
20:24:25 SQL> DEFINE scoretable = 'sme'
20:24:25 SQL> DEFINE case_id	= 'prdate'
20:24:25 SQL> -- Demo:
20:24:25 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:24:25 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:24:25 SQL> --
20:24:25 SQL> -- score.sql
20:24:25 SQL> --
20:24:25 SQL> 
20:24:25 SQL> -- usage: score.sql
20:24:25 SQL> 
20:24:25 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:24:25 SQL> 
20:24:25 SQL> -- DEFINE target	   = 'gatt'
20:24:25 SQL> -- DEFINE model_name = 'svmfx101'
20:24:25 SQL> -- DEFINE bldtable   = 'bme'
20:24:25 SQL> -- DEFINE scoretable = 'sme'
20:24:25 SQL> -- DEFINE case_id    = 'prdate'
20:24:25 SQL> 
20:24:25 SQL> DEFINE target	= '&1'
20:24:25 SQL> DEFINE model_name = '&2'
20:24:25 SQL> DEFINE bldtable	= '&3'
20:24:25 SQL> DEFINE scoretable = '&4'
20:24:25 SQL> DEFINE case_id	= '&5'
20:24:25 SQL> 
20:24:25 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:24:25 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:24:25 SQL> 
20:24:25 SQL> -- Builds an SVM model using pl/sql.
20:24:25 SQL> 
20:24:25 SQL> -----------------------------------------------------------------------
20:24:25 SQL> --			    BUILD THE MODEL
20:24:25 SQL> -----------------------------------------------------------------------
20:24:25 SQL> 
20:24:25 SQL> -- Cleanup old build data preparation objects for repeat runs
20:24:25 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.00
20:24:25 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:24:25 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:24:25 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.00
20:24:25 SQL> 
20:24:25 SQL> 
20:24:25 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:24:25 SQL> --
20:24:25 SQL> -- DROP	TABLE svmc_settings ;
20:24:25 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:24:25 SQL> -- DELETE svmc_settings;
20:24:25 SQL> 
20:24:25 SQL> -- The default classification algorithm is Naive Bayes. So override
20:24:25 SQL> -- this choice to SVM using a settings table.
20:24:25 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:24:25 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:24:25 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:24:25 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:24:25 SQL> -- models.
20:24:25 SQL> --
20:24:25 SQL> 
20:24:25 SQL> -- Do this once and then comment it out.
20:24:25 SQL> -- That makes script go faster.
20:24:25 SQL> -- BEGIN
20:24:25 SQL> -- -- Populate settings table
20:24:25 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:24:25 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:24:25 SQL> --
20:24:25 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:24:25 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:24:25 SQL> --
20:24:25 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:24:25 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:24:25 SQL> --   COMMIT;
20:24:25 SQL> -- END;
20:24:25 SQL> -- /
20:24:25 SQL> 
20:24:25 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:24:25 SQL> 
20:24:25 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:24:25   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:24:25   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
20:24:25 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:24:25   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:24:25   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:24:25 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:24:25   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:24:25   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:24:25 SQL> 
20:24:25 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:24:25   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:24:25   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:24:25 SQL> 
20:24:25 SQL> --------------------------------
20:24:25 SQL> -- PREPARE BUILD (TRAINING) DATA
20:24:25 SQL> --
20:24:25 SQL> 
20:24:25 SQL> -- 1. Missing Value treatment for all Predictors and
20:24:25 SQL> -- 2. Outlier Treatment and
20:24:25 SQL> -- 3. Normalization are performed below.
20:24:25 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:24:25 SQL> --    normalized here.
20:24:25 SQL> 
20:24:25 SQL> BEGIN
20:24:25   2  	-- Perform missing value treatment for all predictors
20:24:25   3  	-- create miss tables
20:24:25   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:24:25   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:24:25   6  
20:24:25   7  	-- populate miss tables
20:24:25   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:24:25   9  	  miss_table_name => 'svmc_miss_num',
20:24:25  10  	  data_table_name => '&bldtable',
20:24:25  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:24:25  12  
20:24:25  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:24:25  14  	  miss_table_name => 'svmc_miss_cat',
20:24:25  15  	  data_table_name => '&bldtable',
20:24:25  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:24:25  17  
20:24:25  18  	-- xform input data to replace missing values
20:24:25  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:24:25  20  	  miss_table_name => 'svmc_miss_num',
20:24:25  21  	  data_table_name => '&bldtable',
20:24:25  22  	  xform_view_name => 'xformed_build_miss_num');
20:24:25  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:24:25  24  	  miss_table_name => 'svmc_miss_cat',
20:24:25  25  	  data_table_name => '&bldtable',
20:24:25  26  	  xform_view_name => 'xformed_build_miss_cat');
20:24:25  27  
20:24:25  28  	-- Perform outlier treatment.
20:24:25  29  	-- create clip table
20:24:25  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:24:25  31  
20:24:25  32  	-- populate clip table
20:24:25  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:24:25  34  	  clip_table_name => 'svmc_clip',
20:24:25  35  	  data_table_name => '&bldtable',
20:24:25  36  	  tail_frac	  => 0.025,
20:24:25  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:24:25  38  
20:24:25  39  	-- xform input data to winsorized data
20:24:25  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:24:25  41  	  clip_table_name => 'svmc_clip',
20:24:25  42  	  data_table_name => '&bldtable',
20:24:25  43  	  xform_view_name => 'svmc_winsor');
20:24:25  44  
20:24:25  45  	-- create normalization table
20:24:25  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:24:25  47  
20:24:25  48  	-- populate normalization table based on winsorized data
20:24:25  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:24:25  50  	  norm_table_name => 'svmc_norm',
20:24:25  51  	  data_table_name => 'svmc_winsor',
20:24:25  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:24:25  53  
20:24:25  54  	-- normalize the original data
20:24:25  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:24:25  56  	  norm_table_name => 'svmc_norm',
20:24:25  57  	  data_table_name => '&bldtable',
20:24:25  58  	  xform_view_name => 'svmc_build_prep');
20:24:25  59  END;
20:24:25  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.31
20:24:26 SQL> 
20:24:26 SQL> ---------------------
20:24:26 SQL> -- CREATE A NEW MODEL
20:24:26 SQL> --
20:24:26 SQL> -- Cleanup old model with the same name for repeat runs
20:24:26 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:24:26   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:24:26   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.96
20:24:27 SQL> 
20:24:27 SQL> -- Build a new SVM Model
20:24:27 SQL> BEGIN
20:24:27   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:24:27   3  	  model_name	      => '&model_name',
20:24:27   4  	  mining_function     => dbms_data_mining.classification,
20:24:27   5  	  data_table_name     => 'svmc_build_prep',
20:24:27   6  	  case_id_column_name => '&case_id',
20:24:27   7  	  target_column_name  => '&target',
20:24:27   8  	  settings_table_name => 'svmc_settings');
20:24:27   9  END;
20:24:27  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:03.38
20:24:31 SQL> 
20:24:31 SQL> -----------------------------------------------------------------------
20:24:31 SQL> --			       APPLY/score THE MODEL
20:24:31 SQL> -----------------------------------------------------------------------
20:24:31 SQL> 
20:24:31 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:24:31 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:24:31   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:24:31   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
20:24:31 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:24:31   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:24:31   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:24:31 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:24:31   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:24:31   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:24:31 SQL> -----------------------
20:24:31 SQL> -- PREPARE SCORING DATA
20:24:31 SQL> --
20:24:31 SQL> -- If the data for model creation has been prepared, then the data
20:24:31 SQL> -- to be scored using the model must be prepared in the same manner
20:24:31 SQL> -- in order to obtain meaningful results.
20:24:31 SQL> --
20:24:31 SQL> -- 1. Missing Value treatment for all Predictors and
20:24:31 SQL> -- 2. Normalization
20:24:31 SQL> -- No outlier treatment will be performed during test and apply. The
20:24:31 SQL> -- normalization step is sufficient, since the normalization parameters
20:24:31 SQL> -- already capture the effects of outlier treatment done with build data.
20:24:31 SQL> --
20:24:31 SQL> BEGIN
20:24:31   2  	-- Xform Test data to replace missing values
20:24:31   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:24:31   4  	  miss_table_name => 'svmc_miss_num',
20:24:31   5  	  data_table_name => '&scoretable',
20:24:31   6  	  xform_view_name => 'xformed_apply_miss_num');
20:24:31   7  
20:24:31   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:24:31   9  	  miss_table_name => 'svmc_miss_cat',
20:24:31  10  	  data_table_name => '&scoretable',
20:24:31  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:24:31  12  
20:24:31  13  	-- Normalize the data to be scored
20:24:31  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:24:31  15  	  norm_table_name => 'svmc_norm',
20:24:31  16  	  data_table_name => '&scoretable',
20:24:31  17  	  xform_view_name => 'svmc_apply_prep');
20:24:31  18  END;
20:24:31  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.18
20:24:31 SQL> 
20:24:31 SQL> -- Maybe I already collected a score for this prdate.
20:24:31 SQL> -- DELETE it if I did:
20:24:31 SQL> DELETE svm62scores
20:24:31   2  WHERE score > 0
20:24:31   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:24:31   4  -- I need to supply the target attribute name:
20:24:31   5  AND targ = '&1'
20:24:31   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gattn'

0 rows deleted.

Elapsed: 00:00:00.02
20:24:31 SQL> 
20:24:31 SQL> -- We do a drumroll here:
20:24:31 SQL> 
20:24:31 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:24:31   2  SELECT
20:24:31   3  prdate
20:24:31   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:24:31   5  ,sysdate
20:24:31   6  ,SUBSTR(prdate,1,7)pair
20:24:31   7  ,SUBSTR(prdate,-19)ydate
20:24:31   8  ,'&1'
20:24:31   9  FROM svmc_apply_prep
20:24:31  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gattn'

1 row created.

Elapsed: 00:00:00.05
20:24:31 SQL> @score1_5min.sql	      2010-11-14 22:15:01 aud_usd
20:24:31 SQL> --
20:24:31 SQL> -- score1_5min.sql
20:24:31 SQL> --
20:24:31 SQL> 
20:24:31 SQL> -- Demo:
20:24:31 SQL> -- @score1_5min.sql 2010-12-31 20:45:01 aud_usd
20:24:31 SQL> 
20:24:31 SQL> CREATE OR REPLACE VIEW sme AS
20:24:31   2  SELECT
20:24:31   3  prdate
20:24:31   4  ,NULL gatt
20:24:31   5  ,g00
20:24:31   6  ,g01
20:24:31   7  ,g02
20:24:31   8  ,g03
20:24:31   9  ,g04
20:24:31  10  ,g05
20:24:31  11  ,g06
20:24:31  12  ,g07
20:24:31  13  ,g08
20:24:31  14  ,g09
20:24:31  15  ,g10
20:24:31  16  ,g11
20:24:31  17  ,g12
20:24:31  18  ,g13
20:24:31  19  ,g14
20:24:31  20  ,g15
20:24:31  21  ,g16
20:24:31  22  ,g17
20:24:31  23  ,g18
20:24:31  24  ,g19
20:24:31  25  ,g20
20:24:31  26  ,g21
20:24:31  27  ,g22
20:24:31  28  ,g23
20:24:31  29  ,g24
20:24:31  30  ,g25
20:24:31  31  ,g26
20:24:31  32  ,g27
20:24:31  33  ,g28
20:24:31  34  ,g29
20:24:31  35  ,g30
20:24:31  36  ,g31
20:24:31  37  ,g32
20:24:31  38  ,g33
20:24:31  39  ,g34
20:24:31  40  ,g35
20:24:31  41  ,g36
20:24:31  42  ,g37
20:24:31  43  ,g38
20:24:31  44  ,g39
20:24:31  45  ,g40
20:24:31  46  ,g41
20:24:31  47  FROM modsrc
20:24:31  48  WHERE ydate = '&1'||' '||'&2'
20:24:31  49  AND pair = '&3'
20:24:31  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-11-14'||' '||'22:15:01'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.05
20:24:31 SQL> 
20:24:31 SQL> -- rpt
20:24:31 SQL> -- We should see just 1 row:
20:24:31 SQL> 
20:24:31 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.01
20:24:31 SQL> 
20:24:31 SQL> -- Build the model:
20:24:31 SQL> CREATE OR REPLACE VIEW bme AS
20:24:31   2  SELECT
20:24:31   3  prdate
20:24:31   4  ,gatt
20:24:31   5  ,g00
20:24:31   6  ,g01
20:24:31   7  ,g02
20:24:31   8  ,g03
20:24:31   9  ,g04
20:24:31  10  ,g05
20:24:31  11  ,g06
20:24:31  12  ,g07
20:24:31  13  ,g08
20:24:31  14  ,g09
20:24:31  15  ,g10
20:24:31  16  ,g11
20:24:31  17  ,g12
20:24:31  18  ,g13
20:24:31  19  ,g14
20:24:31  20  ,g15
20:24:31  21  ,g16
20:24:31  22  ,g17
20:24:31  23  ,g18
20:24:31  24  ,g19
20:24:31  25  ,g20
20:24:31  26  ,g21
20:24:31  27  ,g22
20:24:31  28  ,g23
20:24:31  29  ,g24
20:24:31  30  ,g25
20:24:31  31  ,g26
20:24:31  32  ,g27
20:24:31  33  ,g28
20:24:31  34  ,g29
20:24:31  35  ,g30
20:24:31  36  ,g31
20:24:31  37  ,g32
20:24:31  38  ,g33
20:24:31  39  ,g34
20:24:31  40  ,g35
20:24:31  41  ,g36
20:24:31  42  ,g37
20:24:31  43  ,g38
20:24:31  44  ,g39
20:24:31  45  ,g40
20:24:31  46  ,g41
20:24:31  47  FROM modsrc
20:24:31  48  WHERE gatt IN('nup','up')
20:24:31  49  -- Use only rows which are older than 1 day:
20:24:31  50  AND 1+ydate < '&1'||' '||'&2'
20:24:31  51  AND pair = '&3'
20:24:31  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-11-14'||' '||'22:15:01'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:24:31 SQL> 
20:24:31 SQL> -- rpt
20:24:31 SQL> 
20:24:31 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt;

GAT COUNT(PRDATE)
--- -------------
nup	     4981
up	     3163

Elapsed: 00:00:00.03
20:24:31 SQL> 
20:24:31 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-11-12 21:50:01

Elapsed: 00:00:00.01
20:24:31 SQL> 
20:24:31 SQL> -- Now build model from bme and score sme
20:24:31 SQL> @score1.sql gatt
20:24:31 SQL> --
20:24:31 SQL> -- score1.sql
20:24:31 SQL> --
20:24:31 SQL> 
20:24:31 SQL> -- I use this script to send 5 params to score.sql
20:24:31 SQL> -- which does the heavy lifting of creating an SVM model.
20:24:31 SQL> -- Then at the very end of this script I use the model
20:24:31 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:24:31 SQL> 
20:24:31 SQL> -- I call this script from 2 other scripts:
20:24:31 SQL> -- score1_5min.sql
20:24:31 SQL> -- score1_5min_gattn.sql
20:24:31 SQL> 
20:24:31 SQL> -- The 1st param is the name of the target attribute.
20:24:31 SQL> -- I like to call my target attributes either gatt or gattn.
20:24:31 SQL> 
20:24:31 SQL> -- Demo:
20:24:31 SQL> -- @score1.sql 'gatt'
20:24:31 SQL> -- @score1.sql 'gattn'
20:24:31 SQL> 
20:24:31 SQL> -- Now, I fill up svmc_apply_prep.
20:24:31 SQL> -- I use same model_name used in score.sql
20:24:31 SQL> DEFINE model_name = 'svmfx101'
20:24:31 SQL> DEFINE bldtable	= 'bme'
20:24:31 SQL> DEFINE scoretable = 'sme'
20:24:31 SQL> DEFINE case_id	= 'prdate'
20:24:31 SQL> -- Demo:
20:24:31 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:24:31 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:24:31 SQL> --
20:24:31 SQL> -- score.sql
20:24:31 SQL> --
20:24:31 SQL> 
20:24:31 SQL> -- usage: score.sql
20:24:31 SQL> 
20:24:31 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:24:31 SQL> 
20:24:31 SQL> -- DEFINE target	   = 'gatt'
20:24:31 SQL> -- DEFINE model_name = 'svmfx101'
20:24:31 SQL> -- DEFINE bldtable   = 'bme'
20:24:31 SQL> -- DEFINE scoretable = 'sme'
20:24:31 SQL> -- DEFINE case_id    = 'prdate'
20:24:31 SQL> 
20:24:31 SQL> DEFINE target	= '&1'
20:24:31 SQL> DEFINE model_name = '&2'
20:24:31 SQL> DEFINE bldtable	= '&3'
20:24:31 SQL> DEFINE scoretable = '&4'
20:24:31 SQL> DEFINE case_id	= '&5'
20:24:31 SQL> 
20:24:31 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:24:31 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:24:31 SQL> 
20:24:31 SQL> -- Builds an SVM model using pl/sql.
20:24:31 SQL> 
20:24:31 SQL> -----------------------------------------------------------------------
20:24:31 SQL> --			    BUILD THE MODEL
20:24:31 SQL> -----------------------------------------------------------------------
20:24:31 SQL> 
20:24:31 SQL> -- Cleanup old build data preparation objects for repeat runs
20:24:31 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.01
20:24:31 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:24:31 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:24:31 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.00
20:24:31 SQL> 
20:24:31 SQL> 
20:24:31 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:24:31 SQL> --
20:24:31 SQL> -- DROP	TABLE svmc_settings ;
20:24:31 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:24:31 SQL> -- DELETE svmc_settings;
20:24:31 SQL> 
20:24:31 SQL> -- The default classification algorithm is Naive Bayes. So override
20:24:31 SQL> -- this choice to SVM using a settings table.
20:24:31 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:24:31 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:24:31 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:24:31 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:24:31 SQL> -- models.
20:24:31 SQL> --
20:24:31 SQL> 
20:24:31 SQL> -- Do this once and then comment it out.
20:24:31 SQL> -- That makes script go faster.
20:24:31 SQL> -- BEGIN
20:24:31 SQL> -- -- Populate settings table
20:24:31 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:24:31 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:24:31 SQL> --
20:24:31 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:24:31 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:24:31 SQL> --
20:24:31 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:24:31 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:24:31 SQL> --   COMMIT;
20:24:31 SQL> -- END;
20:24:31 SQL> -- /
20:24:31 SQL> 
20:24:31 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:24:31 SQL> 
20:24:31 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:24:31   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:24:31   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:24:31 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:24:31   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:24:31   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:24:31 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:24:31   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:24:31   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:24:31 SQL> 
20:24:31 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:24:31   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:24:31   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:24:31 SQL> 
20:24:31 SQL> --------------------------------
20:24:31 SQL> -- PREPARE BUILD (TRAINING) DATA
20:24:31 SQL> --
20:24:31 SQL> 
20:24:31 SQL> -- 1. Missing Value treatment for all Predictors and
20:24:31 SQL> -- 2. Outlier Treatment and
20:24:31 SQL> -- 3. Normalization are performed below.
20:24:31 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:24:31 SQL> --    normalized here.
20:24:31 SQL> 
20:24:31 SQL> BEGIN
20:24:31   2  	-- Perform missing value treatment for all predictors
20:24:31   3  	-- create miss tables
20:24:31   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:24:31   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:24:31   6  
20:24:31   7  	-- populate miss tables
20:24:31   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:24:31   9  	  miss_table_name => 'svmc_miss_num',
20:24:31  10  	  data_table_name => '&bldtable',
20:24:31  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:24:31  12  
20:24:31  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:24:31  14  	  miss_table_name => 'svmc_miss_cat',
20:24:31  15  	  data_table_name => '&bldtable',
20:24:31  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:24:31  17  
20:24:31  18  	-- xform input data to replace missing values
20:24:31  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:24:31  20  	  miss_table_name => 'svmc_miss_num',
20:24:31  21  	  data_table_name => '&bldtable',
20:24:31  22  	  xform_view_name => 'xformed_build_miss_num');
20:24:31  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:24:31  24  	  miss_table_name => 'svmc_miss_cat',
20:24:31  25  	  data_table_name => '&bldtable',
20:24:31  26  	  xform_view_name => 'xformed_build_miss_cat');
20:24:31  27  
20:24:31  28  	-- Perform outlier treatment.
20:24:31  29  	-- create clip table
20:24:31  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:24:31  31  
20:24:31  32  	-- populate clip table
20:24:31  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:24:31  34  	  clip_table_name => 'svmc_clip',
20:24:31  35  	  data_table_name => '&bldtable',
20:24:31  36  	  tail_frac	  => 0.025,
20:24:31  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:24:31  38  
20:24:31  39  	-- xform input data to winsorized data
20:24:31  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:24:31  41  	  clip_table_name => 'svmc_clip',
20:24:31  42  	  data_table_name => '&bldtable',
20:24:31  43  	  xform_view_name => 'svmc_winsor');
20:24:31  44  
20:24:31  45  	-- create normalization table
20:24:31  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:24:31  47  
20:24:31  48  	-- populate normalization table based on winsorized data
20:24:31  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:24:31  50  	  norm_table_name => 'svmc_norm',
20:24:31  51  	  data_table_name => 'svmc_winsor',
20:24:31  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:24:31  53  
20:24:31  54  	-- normalize the original data
20:24:31  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:24:31  56  	  norm_table_name => 'svmc_norm',
20:24:31  57  	  data_table_name => '&bldtable',
20:24:31  58  	  xform_view_name => 'svmc_build_prep');
20:24:31  59  END;
20:24:31  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.58
20:24:33 SQL> 
20:24:33 SQL> ---------------------
20:24:33 SQL> -- CREATE A NEW MODEL
20:24:33 SQL> --
20:24:33 SQL> -- Cleanup old model with the same name for repeat runs
20:24:33 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:24:33   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:24:33   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.88
20:24:34 SQL> 
20:24:34 SQL> -- Build a new SVM Model
20:24:34 SQL> BEGIN
20:24:34   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:24:34   3  	  model_name	      => '&model_name',
20:24:34   4  	  mining_function     => dbms_data_mining.classification,
20:24:34   5  	  data_table_name     => 'svmc_build_prep',
20:24:34   6  	  case_id_column_name => '&case_id',
20:24:34   7  	  target_column_name  => '&target',
20:24:34   8  	  settings_table_name => 'svmc_settings');
20:24:34   9  END;
20:24:34  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:04.41
20:24:38 SQL> 
20:24:38 SQL> -----------------------------------------------------------------------
20:24:38 SQL> --			       APPLY/score THE MODEL
20:24:38 SQL> -----------------------------------------------------------------------
20:24:38 SQL> 
20:24:38 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:24:38 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:24:38   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:24:38   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:24:38 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:24:38   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:24:38   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:24:38 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:24:38   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:24:38   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:24:38 SQL> -----------------------
20:24:38 SQL> -- PREPARE SCORING DATA
20:24:38 SQL> --
20:24:38 SQL> -- If the data for model creation has been prepared, then the data
20:24:38 SQL> -- to be scored using the model must be prepared in the same manner
20:24:38 SQL> -- in order to obtain meaningful results.
20:24:38 SQL> --
20:24:38 SQL> -- 1. Missing Value treatment for all Predictors and
20:24:38 SQL> -- 2. Normalization
20:24:38 SQL> -- No outlier treatment will be performed during test and apply. The
20:24:38 SQL> -- normalization step is sufficient, since the normalization parameters
20:24:38 SQL> -- already capture the effects of outlier treatment done with build data.
20:24:38 SQL> --
20:24:38 SQL> BEGIN
20:24:38   2  	-- Xform Test data to replace missing values
20:24:38   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:24:38   4  	  miss_table_name => 'svmc_miss_num',
20:24:38   5  	  data_table_name => '&scoretable',
20:24:38   6  	  xform_view_name => 'xformed_apply_miss_num');
20:24:38   7  
20:24:38   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:24:38   9  	  miss_table_name => 'svmc_miss_cat',
20:24:38  10  	  data_table_name => '&scoretable',
20:24:38  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:24:38  12  
20:24:38  13  	-- Normalize the data to be scored
20:24:38  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:24:38  15  	  norm_table_name => 'svmc_norm',
20:24:38  16  	  data_table_name => '&scoretable',
20:24:38  17  	  xform_view_name => 'svmc_apply_prep');
20:24:38  18  END;
20:24:38  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.18
20:24:39 SQL> 
20:24:39 SQL> -- Maybe I already collected a score for this prdate.
20:24:39 SQL> -- DELETE it if I did:
20:24:39 SQL> DELETE svm62scores
20:24:39   2  WHERE score > 0
20:24:39   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:24:39   4  -- I need to supply the target attribute name:
20:24:39   5  AND targ = '&1'
20:24:39   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gatt'

0 rows deleted.

Elapsed: 00:00:00.02
20:24:39 SQL> 
20:24:39 SQL> -- We do a drumroll here:
20:24:39 SQL> 
20:24:39 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:24:39   2  SELECT
20:24:39   3  prdate
20:24:39   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:24:39   5  ,sysdate
20:24:39   6  ,SUBSTR(prdate,1,7)pair
20:24:39   7  ,SUBSTR(prdate,-19)ydate
20:24:39   8  ,'&1'
20:24:39   9  FROM svmc_apply_prep
20:24:39  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gatt'

1 row created.

Elapsed: 00:00:00.05
20:24:39 SQL> @score1_5min_gattn.sql	2010-12-30 01:50:00 aud_usd
20:24:39 SQL> --
20:24:39 SQL> -- score1_5min_gattn.sql
20:24:39 SQL> --
20:24:39 SQL> 
20:24:39 SQL> -- Demo:
20:24:39 SQL> -- @score1_5min_gattn.sql 2010-12-31 20:45:01 aud_usd
20:24:39 SQL> 
20:24:39 SQL> CREATE OR REPLACE VIEW sme AS
20:24:39   2  SELECT
20:24:39   3  prdate
20:24:39   4  ,NULL gattn
20:24:39   5  ,g00
20:24:39   6  ,g01
20:24:39   7  ,g02
20:24:39   8  ,g03
20:24:39   9  ,g04
20:24:39  10  ,g05
20:24:39  11  ,g06
20:24:39  12  ,g07
20:24:39  13  ,g08
20:24:39  14  ,g09
20:24:39  15  ,g10
20:24:39  16  ,g11
20:24:39  17  ,g12
20:24:39  18  ,g13
20:24:39  19  ,g14
20:24:39  20  ,g15
20:24:39  21  ,g16
20:24:39  22  ,g17
20:24:39  23  ,g18
20:24:39  24  ,g19
20:24:39  25  ,g20
20:24:39  26  ,g21
20:24:39  27  ,g22
20:24:39  28  ,g23
20:24:39  29  ,g24
20:24:39  30  ,g25
20:24:39  31  ,g26
20:24:39  32  ,g27
20:24:39  33  ,g28
20:24:39  34  ,g29
20:24:39  35  ,g30
20:24:39  36  ,g31
20:24:39  37  ,g32
20:24:39  38  ,g33
20:24:39  39  ,g34
20:24:39  40  ,g35
20:24:39  41  ,g36
20:24:39  42  ,g37
20:24:39  43  ,g38
20:24:39  44  ,g39
20:24:39  45  ,g40
20:24:39  46  ,g41
20:24:39  47  FROM modsrc
20:24:39  48  WHERE ydate = '&1'||' '||'&2'
20:24:39  49  AND pair = '&3'
20:24:39  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-12-30'||' '||'01:50:00'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.05
20:24:39 SQL> 
20:24:39 SQL> -- rpt
20:24:39 SQL> -- We should see just 1 row:
20:24:39 SQL> 
20:24:39 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.01
20:24:39 SQL> 
20:24:39 SQL> -- Build the model:
20:24:39 SQL> CREATE OR REPLACE VIEW bme AS
20:24:39   2  SELECT
20:24:39   3  prdate
20:24:39   4  ,gattn
20:24:39   5  ,g00
20:24:39   6  ,g01
20:24:39   7  ,g02
20:24:39   8  ,g03
20:24:39   9  ,g04
20:24:39  10  ,g05
20:24:39  11  ,g06
20:24:39  12  ,g07
20:24:39  13  ,g08
20:24:39  14  ,g09
20:24:39  15  ,g10
20:24:39  16  ,g11
20:24:39  17  ,g12
20:24:39  18  ,g13
20:24:39  19  ,g14
20:24:39  20  ,g15
20:24:39  21  ,g16
20:24:39  22  ,g17
20:24:39  23  ,g18
20:24:39  24  ,g19
20:24:39  25  ,g20
20:24:39  26  ,g21
20:24:39  27  ,g22
20:24:39  28  ,g23
20:24:39  29  ,g24
20:24:39  30  ,g25
20:24:39  31  ,g26
20:24:39  32  ,g27
20:24:39  33  ,g28
20:24:39  34  ,g29
20:24:39  35  ,g30
20:24:39  36  ,g31
20:24:39  37  ,g32
20:24:39  38  ,g33
20:24:39  39  ,g34
20:24:39  40  ,g35
20:24:39  41  ,g36
20:24:39  42  ,g37
20:24:39  43  ,g38
20:24:39  44  ,g39
20:24:39  45  ,g40
20:24:39  46  ,g41
20:24:39  47  FROM modsrc
20:24:39  48  WHERE gattn IN('nup','up')
20:24:39  49  -- Use only rows which are older than 1 day:
20:24:39  50  AND 1+ydate < '&1'||' '||'&2'
20:24:39  51  AND pair = '&3'
20:24:39  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-12-30'||' '||'01:50:00'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:24:39 SQL> 
20:24:39 SQL> -- rpt
20:24:39 SQL> 
20:24:39 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	    11503
up	     5803

Elapsed: 00:00:00.02
20:24:39 SQL> 
20:24:39 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-12-29 01:45:00

Elapsed: 00:00:00.01
20:24:39 SQL> 
20:24:39 SQL> -- Now build model from bme and score sme
20:24:39 SQL> @score1.sql gattn
20:24:39 SQL> --
20:24:39 SQL> -- score1.sql
20:24:39 SQL> --
20:24:39 SQL> 
20:24:39 SQL> -- I use this script to send 5 params to score.sql
20:24:39 SQL> -- which does the heavy lifting of creating an SVM model.
20:24:39 SQL> -- Then at the very end of this script I use the model
20:24:39 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:24:39 SQL> 
20:24:39 SQL> -- I call this script from 2 other scripts:
20:24:39 SQL> -- score1_5min.sql
20:24:39 SQL> -- score1_5min_gattn.sql
20:24:39 SQL> 
20:24:39 SQL> -- The 1st param is the name of the target attribute.
20:24:39 SQL> -- I like to call my target attributes either gatt or gattn.
20:24:39 SQL> 
20:24:39 SQL> -- Demo:
20:24:39 SQL> -- @score1.sql 'gatt'
20:24:39 SQL> -- @score1.sql 'gattn'
20:24:39 SQL> 
20:24:39 SQL> -- Now, I fill up svmc_apply_prep.
20:24:39 SQL> -- I use same model_name used in score.sql
20:24:39 SQL> DEFINE model_name = 'svmfx101'
20:24:39 SQL> DEFINE bldtable	= 'bme'
20:24:39 SQL> DEFINE scoretable = 'sme'
20:24:39 SQL> DEFINE case_id	= 'prdate'
20:24:39 SQL> -- Demo:
20:24:39 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:24:39 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:24:39 SQL> --
20:24:39 SQL> -- score.sql
20:24:39 SQL> --
20:24:39 SQL> 
20:24:39 SQL> -- usage: score.sql
20:24:39 SQL> 
20:24:39 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:24:39 SQL> 
20:24:39 SQL> -- DEFINE target	   = 'gatt'
20:24:39 SQL> -- DEFINE model_name = 'svmfx101'
20:24:39 SQL> -- DEFINE bldtable   = 'bme'
20:24:39 SQL> -- DEFINE scoretable = 'sme'
20:24:39 SQL> -- DEFINE case_id    = 'prdate'
20:24:39 SQL> 
20:24:39 SQL> DEFINE target	= '&1'
20:24:39 SQL> DEFINE model_name = '&2'
20:24:39 SQL> DEFINE bldtable	= '&3'
20:24:39 SQL> DEFINE scoretable = '&4'
20:24:39 SQL> DEFINE case_id	= '&5'
20:24:39 SQL> 
20:24:39 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:24:39 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:24:39 SQL> 
20:24:39 SQL> -- Builds an SVM model using pl/sql.
20:24:39 SQL> 
20:24:39 SQL> -----------------------------------------------------------------------
20:24:39 SQL> --			    BUILD THE MODEL
20:24:39 SQL> -----------------------------------------------------------------------
20:24:39 SQL> 
20:24:39 SQL> -- Cleanup old build data preparation objects for repeat runs
20:24:39 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.00
20:24:39 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:24:39 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.01
20:24:39 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.00
20:24:39 SQL> 
20:24:39 SQL> 
20:24:39 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:24:39 SQL> --
20:24:39 SQL> -- DROP	TABLE svmc_settings ;
20:24:39 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:24:39 SQL> -- DELETE svmc_settings;
20:24:39 SQL> 
20:24:39 SQL> -- The default classification algorithm is Naive Bayes. So override
20:24:39 SQL> -- this choice to SVM using a settings table.
20:24:39 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:24:39 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:24:39 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:24:39 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:24:39 SQL> -- models.
20:24:39 SQL> --
20:24:39 SQL> 
20:24:39 SQL> -- Do this once and then comment it out.
20:24:39 SQL> -- That makes script go faster.
20:24:39 SQL> -- BEGIN
20:24:39 SQL> -- -- Populate settings table
20:24:39 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:24:39 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:24:39 SQL> --
20:24:39 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:24:39 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:24:39 SQL> --
20:24:39 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:24:39 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:24:39 SQL> --   COMMIT;
20:24:39 SQL> -- END;
20:24:39 SQL> -- /
20:24:39 SQL> 
20:24:39 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:24:39 SQL> 
20:24:39 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:24:39   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:24:39   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:24:39 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:24:39   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:24:39   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:24:39 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:24:39   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:24:39   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:24:39 SQL> 
20:24:39 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:24:39   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:24:39   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:24:39 SQL> 
20:24:39 SQL> --------------------------------
20:24:39 SQL> -- PREPARE BUILD (TRAINING) DATA
20:24:39 SQL> --
20:24:39 SQL> 
20:24:39 SQL> -- 1. Missing Value treatment for all Predictors and
20:24:39 SQL> -- 2. Outlier Treatment and
20:24:39 SQL> -- 3. Normalization are performed below.
20:24:39 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:24:39 SQL> --    normalized here.
20:24:39 SQL> 
20:24:39 SQL> BEGIN
20:24:39   2  	-- Perform missing value treatment for all predictors
20:24:39   3  	-- create miss tables
20:24:39   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:24:39   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:24:39   6  
20:24:39   7  	-- populate miss tables
20:24:39   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:24:39   9  	  miss_table_name => 'svmc_miss_num',
20:24:39  10  	  data_table_name => '&bldtable',
20:24:39  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:24:39  12  
20:24:39  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:24:39  14  	  miss_table_name => 'svmc_miss_cat',
20:24:39  15  	  data_table_name => '&bldtable',
20:24:39  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:24:39  17  
20:24:39  18  	-- xform input data to replace missing values
20:24:39  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:24:39  20  	  miss_table_name => 'svmc_miss_num',
20:24:39  21  	  data_table_name => '&bldtable',
20:24:39  22  	  xform_view_name => 'xformed_build_miss_num');
20:24:39  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:24:39  24  	  miss_table_name => 'svmc_miss_cat',
20:24:39  25  	  data_table_name => '&bldtable',
20:24:39  26  	  xform_view_name => 'xformed_build_miss_cat');
20:24:39  27  
20:24:39  28  	-- Perform outlier treatment.
20:24:39  29  	-- create clip table
20:24:39  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:24:39  31  
20:24:39  32  	-- populate clip table
20:24:39  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:24:39  34  	  clip_table_name => 'svmc_clip',
20:24:39  35  	  data_table_name => '&bldtable',
20:24:39  36  	  tail_frac	  => 0.025,
20:24:39  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:24:39  38  
20:24:39  39  	-- xform input data to winsorized data
20:24:39  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:24:39  41  	  clip_table_name => 'svmc_clip',
20:24:39  42  	  data_table_name => '&bldtable',
20:24:39  43  	  xform_view_name => 'svmc_winsor');
20:24:39  44  
20:24:39  45  	-- create normalization table
20:24:39  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:24:39  47  
20:24:39  48  	-- populate normalization table based on winsorized data
20:24:39  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:24:39  50  	  norm_table_name => 'svmc_norm',
20:24:39  51  	  data_table_name => 'svmc_winsor',
20:24:39  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:24:39  53  
20:24:39  54  	-- normalize the original data
20:24:39  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:24:39  56  	  norm_table_name => 'svmc_norm',
20:24:39  57  	  data_table_name => '&bldtable',
20:24:39  58  	  xform_view_name => 'svmc_build_prep');
20:24:39  59  END;
20:24:39  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:02.23
20:24:41 SQL> 
20:24:41 SQL> ---------------------
20:24:41 SQL> -- CREATE A NEW MODEL
20:24:41 SQL> --
20:24:41 SQL> -- Cleanup old model with the same name for repeat runs
20:24:41 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:24:41   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:24:41   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.12
20:24:42 SQL> 
20:24:42 SQL> -- Build a new SVM Model
20:24:42 SQL> BEGIN
20:24:42   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:24:42   3  	  model_name	      => '&model_name',
20:24:42   4  	  mining_function     => dbms_data_mining.classification,
20:24:42   5  	  data_table_name     => 'svmc_build_prep',
20:24:42   6  	  case_id_column_name => '&case_id',
20:24:42   7  	  target_column_name  => '&target',
20:24:42   8  	  settings_table_name => 'svmc_settings');
20:24:42   9  END;
20:24:42  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:04.23
20:24:47 SQL> 
20:24:47 SQL> -----------------------------------------------------------------------
20:24:47 SQL> --			       APPLY/score THE MODEL
20:24:47 SQL> -----------------------------------------------------------------------
20:24:47 SQL> 
20:24:47 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:24:47 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:24:47   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:24:47   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:24:47 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:24:47   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:24:47   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:24:47 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:24:47   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:24:47   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:24:47 SQL> -----------------------
20:24:47 SQL> -- PREPARE SCORING DATA
20:24:47 SQL> --
20:24:47 SQL> -- If the data for model creation has been prepared, then the data
20:24:47 SQL> -- to be scored using the model must be prepared in the same manner
20:24:47 SQL> -- in order to obtain meaningful results.
20:24:47 SQL> --
20:24:47 SQL> -- 1. Missing Value treatment for all Predictors and
20:24:47 SQL> -- 2. Normalization
20:24:47 SQL> -- No outlier treatment will be performed during test and apply. The
20:24:47 SQL> -- normalization step is sufficient, since the normalization parameters
20:24:47 SQL> -- already capture the effects of outlier treatment done with build data.
20:24:47 SQL> --
20:24:47 SQL> BEGIN
20:24:47   2  	-- Xform Test data to replace missing values
20:24:47   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:24:47   4  	  miss_table_name => 'svmc_miss_num',
20:24:47   5  	  data_table_name => '&scoretable',
20:24:47   6  	  xform_view_name => 'xformed_apply_miss_num');
20:24:47   7  
20:24:47   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:24:47   9  	  miss_table_name => 'svmc_miss_cat',
20:24:47  10  	  data_table_name => '&scoretable',
20:24:47  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:24:47  12  
20:24:47  13  	-- Normalize the data to be scored
20:24:47  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:24:47  15  	  norm_table_name => 'svmc_norm',
20:24:47  16  	  data_table_name => '&scoretable',
20:24:47  17  	  xform_view_name => 'svmc_apply_prep');
20:24:47  18  END;
20:24:47  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.18
20:24:47 SQL> 
20:24:47 SQL> -- Maybe I already collected a score for this prdate.
20:24:47 SQL> -- DELETE it if I did:
20:24:47 SQL> DELETE svm62scores
20:24:47   2  WHERE score > 0
20:24:47   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:24:47   4  -- I need to supply the target attribute name:
20:24:47   5  AND targ = '&1'
20:24:47   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gattn'

0 rows deleted.

Elapsed: 00:00:00.02
20:24:47 SQL> 
20:24:47 SQL> -- We do a drumroll here:
20:24:47 SQL> 
20:24:47 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:24:47   2  SELECT
20:24:47   3  prdate
20:24:47   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:24:47   5  ,sysdate
20:24:47   6  ,SUBSTR(prdate,1,7)pair
20:24:47   7  ,SUBSTR(prdate,-19)ydate
20:24:47   8  ,'&1'
20:24:47   9  FROM svmc_apply_prep
20:24:47  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gattn'

1 row created.

Elapsed: 00:00:00.05
20:24:47 SQL> @score1_5min_gattn.sql	2010-12-27 02:10:00 aud_usd
20:24:47 SQL> --
20:24:47 SQL> -- score1_5min_gattn.sql
20:24:47 SQL> --
20:24:47 SQL> 
20:24:47 SQL> -- Demo:
20:24:47 SQL> -- @score1_5min_gattn.sql 2010-12-31 20:45:01 aud_usd
20:24:47 SQL> 
20:24:47 SQL> CREATE OR REPLACE VIEW sme AS
20:24:47   2  SELECT
20:24:47   3  prdate
20:24:47   4  ,NULL gattn
20:24:47   5  ,g00
20:24:47   6  ,g01
20:24:47   7  ,g02
20:24:47   8  ,g03
20:24:47   9  ,g04
20:24:47  10  ,g05
20:24:47  11  ,g06
20:24:47  12  ,g07
20:24:47  13  ,g08
20:24:47  14  ,g09
20:24:47  15  ,g10
20:24:47  16  ,g11
20:24:47  17  ,g12
20:24:47  18  ,g13
20:24:47  19  ,g14
20:24:47  20  ,g15
20:24:47  21  ,g16
20:24:47  22  ,g17
20:24:47  23  ,g18
20:24:47  24  ,g19
20:24:47  25  ,g20
20:24:47  26  ,g21
20:24:47  27  ,g22
20:24:47  28  ,g23
20:24:47  29  ,g24
20:24:47  30  ,g25
20:24:47  31  ,g26
20:24:47  32  ,g27
20:24:47  33  ,g28
20:24:47  34  ,g29
20:24:47  35  ,g30
20:24:47  36  ,g31
20:24:47  37  ,g32
20:24:47  38  ,g33
20:24:47  39  ,g34
20:24:47  40  ,g35
20:24:47  41  ,g36
20:24:47  42  ,g37
20:24:47  43  ,g38
20:24:47  44  ,g39
20:24:47  45  ,g40
20:24:47  46  ,g41
20:24:47  47  FROM modsrc
20:24:47  48  WHERE ydate = '&1'||' '||'&2'
20:24:47  49  AND pair = '&3'
20:24:47  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-12-27'||' '||'02:10:00'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:24:47 SQL> 
20:24:47 SQL> -- rpt
20:24:47 SQL> -- We should see just 1 row:
20:24:47 SQL> 
20:24:47 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.01
20:24:47 SQL> 
20:24:47 SQL> -- Build the model:
20:24:47 SQL> CREATE OR REPLACE VIEW bme AS
20:24:47   2  SELECT
20:24:47   3  prdate
20:24:47   4  ,gattn
20:24:47   5  ,g00
20:24:47   6  ,g01
20:24:47   7  ,g02
20:24:47   8  ,g03
20:24:47   9  ,g04
20:24:47  10  ,g05
20:24:47  11  ,g06
20:24:47  12  ,g07
20:24:47  13  ,g08
20:24:47  14  ,g09
20:24:47  15  ,g10
20:24:47  16  ,g11
20:24:47  17  ,g12
20:24:47  18  ,g13
20:24:47  19  ,g14
20:24:47  20  ,g15
20:24:47  21  ,g16
20:24:47  22  ,g17
20:24:47  23  ,g18
20:24:47  24  ,g19
20:24:47  25  ,g20
20:24:47  26  ,g21
20:24:47  27  ,g22
20:24:47  28  ,g23
20:24:47  29  ,g24
20:24:47  30  ,g25
20:24:47  31  ,g26
20:24:47  32  ,g27
20:24:47  33  ,g28
20:24:47  34  ,g29
20:24:47  35  ,g30
20:24:47  36  ,g31
20:24:47  37  ,g32
20:24:47  38  ,g33
20:24:47  39  ,g34
20:24:47  40  ,g35
20:24:47  41  ,g36
20:24:47  42  ,g37
20:24:47  43  ,g38
20:24:47  44  ,g39
20:24:47  45  ,g40
20:24:47  46  ,g41
20:24:47  47  FROM modsrc
20:24:47  48  WHERE gattn IN('nup','up')
20:24:47  49  -- Use only rows which are older than 1 day:
20:24:47  50  AND 1+ydate < '&1'||' '||'&2'
20:24:47  51  AND pair = '&3'
20:24:47  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-12-27'||' '||'02:10:00'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:24:47 SQL> 
20:24:47 SQL> -- rpt
20:24:47 SQL> 
20:24:47 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	    11001
up	     5692

Elapsed: 00:00:00.02
20:24:47 SQL> 
20:24:47 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-12-24 21:55:00

Elapsed: 00:00:00.02
20:24:47 SQL> 
20:24:47 SQL> -- Now build model from bme and score sme
20:24:47 SQL> @score1.sql gattn
20:24:47 SQL> --
20:24:47 SQL> -- score1.sql
20:24:47 SQL> --
20:24:47 SQL> 
20:24:47 SQL> -- I use this script to send 5 params to score.sql
20:24:47 SQL> -- which does the heavy lifting of creating an SVM model.
20:24:47 SQL> -- Then at the very end of this script I use the model
20:24:47 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:24:47 SQL> 
20:24:47 SQL> -- I call this script from 2 other scripts:
20:24:47 SQL> -- score1_5min.sql
20:24:47 SQL> -- score1_5min_gattn.sql
20:24:47 SQL> 
20:24:47 SQL> -- The 1st param is the name of the target attribute.
20:24:47 SQL> -- I like to call my target attributes either gatt or gattn.
20:24:47 SQL> 
20:24:47 SQL> -- Demo:
20:24:47 SQL> -- @score1.sql 'gatt'
20:24:47 SQL> -- @score1.sql 'gattn'
20:24:47 SQL> 
20:24:47 SQL> -- Now, I fill up svmc_apply_prep.
20:24:47 SQL> -- I use same model_name used in score.sql
20:24:47 SQL> DEFINE model_name = 'svmfx101'
20:24:47 SQL> DEFINE bldtable	= 'bme'
20:24:47 SQL> DEFINE scoretable = 'sme'
20:24:47 SQL> DEFINE case_id	= 'prdate'
20:24:47 SQL> -- Demo:
20:24:47 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:24:47 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:24:47 SQL> --
20:24:47 SQL> -- score.sql
20:24:47 SQL> --
20:24:47 SQL> 
20:24:47 SQL> -- usage: score.sql
20:24:47 SQL> 
20:24:47 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:24:47 SQL> 
20:24:47 SQL> -- DEFINE target	   = 'gatt'
20:24:47 SQL> -- DEFINE model_name = 'svmfx101'
20:24:47 SQL> -- DEFINE bldtable   = 'bme'
20:24:47 SQL> -- DEFINE scoretable = 'sme'
20:24:47 SQL> -- DEFINE case_id    = 'prdate'
20:24:47 SQL> 
20:24:47 SQL> DEFINE target	= '&1'
20:24:47 SQL> DEFINE model_name = '&2'
20:24:47 SQL> DEFINE bldtable	= '&3'
20:24:47 SQL> DEFINE scoretable = '&4'
20:24:47 SQL> DEFINE case_id	= '&5'
20:24:47 SQL> 
20:24:47 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:24:47 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:24:47 SQL> 
20:24:47 SQL> -- Builds an SVM model using pl/sql.
20:24:47 SQL> 
20:24:47 SQL> -----------------------------------------------------------------------
20:24:47 SQL> --			    BUILD THE MODEL
20:24:47 SQL> -----------------------------------------------------------------------
20:24:47 SQL> 
20:24:47 SQL> -- Cleanup old build data preparation objects for repeat runs
20:24:47 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.00
20:24:47 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.01
20:24:47 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:24:47 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.00
20:24:47 SQL> 
20:24:47 SQL> 
20:24:47 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:24:47 SQL> --
20:24:47 SQL> -- DROP	TABLE svmc_settings ;
20:24:47 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:24:47 SQL> -- DELETE svmc_settings;
20:24:47 SQL> 
20:24:47 SQL> -- The default classification algorithm is Naive Bayes. So override
20:24:47 SQL> -- this choice to SVM using a settings table.
20:24:47 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:24:47 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:24:47 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:24:47 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:24:47 SQL> -- models.
20:24:47 SQL> --
20:24:47 SQL> 
20:24:47 SQL> -- Do this once and then comment it out.
20:24:47 SQL> -- That makes script go faster.
20:24:47 SQL> -- BEGIN
20:24:47 SQL> -- -- Populate settings table
20:24:47 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:24:47 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:24:47 SQL> --
20:24:47 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:24:47 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:24:47 SQL> --
20:24:47 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:24:47 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:24:47 SQL> --   COMMIT;
20:24:47 SQL> -- END;
20:24:47 SQL> -- /
20:24:47 SQL> 
20:24:47 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.01
20:24:47 SQL> 
20:24:47 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:24:47   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:24:47   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:24:47 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:24:47   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:24:47   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
20:24:47 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:24:47   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:24:47   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:24:47 SQL> 
20:24:47 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:24:47   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:24:47   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:24:47 SQL> 
20:24:47 SQL> --------------------------------
20:24:47 SQL> -- PREPARE BUILD (TRAINING) DATA
20:24:47 SQL> --
20:24:47 SQL> 
20:24:47 SQL> -- 1. Missing Value treatment for all Predictors and
20:24:47 SQL> -- 2. Outlier Treatment and
20:24:47 SQL> -- 3. Normalization are performed below.
20:24:47 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:24:47 SQL> --    normalized here.
20:24:47 SQL> 
20:24:47 SQL> BEGIN
20:24:47   2  	-- Perform missing value treatment for all predictors
20:24:47   3  	-- create miss tables
20:24:47   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:24:47   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:24:47   6  
20:24:47   7  	-- populate miss tables
20:24:47   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:24:47   9  	  miss_table_name => 'svmc_miss_num',
20:24:47  10  	  data_table_name => '&bldtable',
20:24:47  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:24:47  12  
20:24:47  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:24:47  14  	  miss_table_name => 'svmc_miss_cat',
20:24:47  15  	  data_table_name => '&bldtable',
20:24:47  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:24:47  17  
20:24:47  18  	-- xform input data to replace missing values
20:24:47  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:24:47  20  	  miss_table_name => 'svmc_miss_num',
20:24:47  21  	  data_table_name => '&bldtable',
20:24:47  22  	  xform_view_name => 'xformed_build_miss_num');
20:24:47  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:24:47  24  	  miss_table_name => 'svmc_miss_cat',
20:24:47  25  	  data_table_name => '&bldtable',
20:24:47  26  	  xform_view_name => 'xformed_build_miss_cat');
20:24:47  27  
20:24:47  28  	-- Perform outlier treatment.
20:24:47  29  	-- create clip table
20:24:47  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:24:47  31  
20:24:47  32  	-- populate clip table
20:24:47  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:24:47  34  	  clip_table_name => 'svmc_clip',
20:24:47  35  	  data_table_name => '&bldtable',
20:24:47  36  	  tail_frac	  => 0.025,
20:24:47  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:24:47  38  
20:24:47  39  	-- xform input data to winsorized data
20:24:47  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:24:47  41  	  clip_table_name => 'svmc_clip',
20:24:47  42  	  data_table_name => '&bldtable',
20:24:47  43  	  xform_view_name => 'svmc_winsor');
20:24:47  44  
20:24:47  45  	-- create normalization table
20:24:47  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:24:47  47  
20:24:47  48  	-- populate normalization table based on winsorized data
20:24:47  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:24:47  50  	  norm_table_name => 'svmc_norm',
20:24:47  51  	  data_table_name => 'svmc_winsor',
20:24:47  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:24:47  53  
20:24:47  54  	-- normalize the original data
20:24:47  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:24:47  56  	  norm_table_name => 'svmc_norm',
20:24:47  57  	  data_table_name => '&bldtable',
20:24:47  58  	  xform_view_name => 'svmc_build_prep');
20:24:47  59  END;
20:24:47  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:02.17
20:24:49 SQL> 
20:24:49 SQL> ---------------------
20:24:49 SQL> -- CREATE A NEW MODEL
20:24:49 SQL> --
20:24:49 SQL> -- Cleanup old model with the same name for repeat runs
20:24:49 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:24:49   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:24:49   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.22
20:24:51 SQL> 
20:24:51 SQL> -- Build a new SVM Model
20:24:51 SQL> BEGIN
20:24:51   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:24:51   3  	  model_name	      => '&model_name',
20:24:51   4  	  mining_function     => dbms_data_mining.classification,
20:24:51   5  	  data_table_name     => 'svmc_build_prep',
20:24:51   6  	  case_id_column_name => '&case_id',
20:24:51   7  	  target_column_name  => '&target',
20:24:51   8  	  settings_table_name => 'svmc_settings');
20:24:51   9  END;
20:24:51  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:05.52
20:24:56 SQL> 
20:24:56 SQL> -----------------------------------------------------------------------
20:24:56 SQL> --			       APPLY/score THE MODEL
20:24:56 SQL> -----------------------------------------------------------------------
20:24:56 SQL> 
20:24:56 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:24:56 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:24:56   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:24:56   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
20:24:56 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:24:56   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:24:56   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:24:56 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:24:56   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:24:56   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:24:56 SQL> -----------------------
20:24:56 SQL> -- PREPARE SCORING DATA
20:24:56 SQL> --
20:24:56 SQL> -- If the data for model creation has been prepared, then the data
20:24:56 SQL> -- to be scored using the model must be prepared in the same manner
20:24:56 SQL> -- in order to obtain meaningful results.
20:24:56 SQL> --
20:24:56 SQL> -- 1. Missing Value treatment for all Predictors and
20:24:56 SQL> -- 2. Normalization
20:24:56 SQL> -- No outlier treatment will be performed during test and apply. The
20:24:56 SQL> -- normalization step is sufficient, since the normalization parameters
20:24:56 SQL> -- already capture the effects of outlier treatment done with build data.
20:24:56 SQL> --
20:24:56 SQL> BEGIN
20:24:56   2  	-- Xform Test data to replace missing values
20:24:56   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:24:56   4  	  miss_table_name => 'svmc_miss_num',
20:24:56   5  	  data_table_name => '&scoretable',
20:24:56   6  	  xform_view_name => 'xformed_apply_miss_num');
20:24:56   7  
20:24:56   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:24:56   9  	  miss_table_name => 'svmc_miss_cat',
20:24:56  10  	  data_table_name => '&scoretable',
20:24:56  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:24:56  12  
20:24:56  13  	-- Normalize the data to be scored
20:24:56  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:24:56  15  	  norm_table_name => 'svmc_norm',
20:24:56  16  	  data_table_name => '&scoretable',
20:24:56  17  	  xform_view_name => 'svmc_apply_prep');
20:24:56  18  END;
20:24:56  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.17
20:24:56 SQL> 
20:24:56 SQL> -- Maybe I already collected a score for this prdate.
20:24:56 SQL> -- DELETE it if I did:
20:24:56 SQL> DELETE svm62scores
20:24:56   2  WHERE score > 0
20:24:56   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:24:56   4  -- I need to supply the target attribute name:
20:24:56   5  AND targ = '&1'
20:24:56   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gattn'

0 rows deleted.

Elapsed: 00:00:00.02
20:24:56 SQL> 
20:24:56 SQL> -- We do a drumroll here:
20:24:56 SQL> 
20:24:56 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:24:56   2  SELECT
20:24:56   3  prdate
20:24:56   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:24:56   5  ,sysdate
20:24:56   6  ,SUBSTR(prdate,1,7)pair
20:24:56   7  ,SUBSTR(prdate,-19)ydate
20:24:56   8  ,'&1'
20:24:56   9  FROM svmc_apply_prep
20:24:56  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gattn'

1 row created.

Elapsed: 00:00:00.05
20:24:56 SQL> @score1_5min.sql	      2010-10-08 02:35:01 aud_usd
20:24:56 SQL> --
20:24:56 SQL> -- score1_5min.sql
20:24:56 SQL> --
20:24:56 SQL> 
20:24:56 SQL> -- Demo:
20:24:56 SQL> -- @score1_5min.sql 2010-12-31 20:45:01 aud_usd
20:24:56 SQL> 
20:24:56 SQL> CREATE OR REPLACE VIEW sme AS
20:24:56   2  SELECT
20:24:56   3  prdate
20:24:56   4  ,NULL gatt
20:24:56   5  ,g00
20:24:56   6  ,g01
20:24:56   7  ,g02
20:24:56   8  ,g03
20:24:56   9  ,g04
20:24:56  10  ,g05
20:24:56  11  ,g06
20:24:56  12  ,g07
20:24:56  13  ,g08
20:24:56  14  ,g09
20:24:56  15  ,g10
20:24:56  16  ,g11
20:24:56  17  ,g12
20:24:56  18  ,g13
20:24:56  19  ,g14
20:24:56  20  ,g15
20:24:56  21  ,g16
20:24:56  22  ,g17
20:24:56  23  ,g18
20:24:56  24  ,g19
20:24:56  25  ,g20
20:24:56  26  ,g21
20:24:56  27  ,g22
20:24:56  28  ,g23
20:24:56  29  ,g24
20:24:56  30  ,g25
20:24:56  31  ,g26
20:24:56  32  ,g27
20:24:56  33  ,g28
20:24:56  34  ,g29
20:24:56  35  ,g30
20:24:56  36  ,g31
20:24:56  37  ,g32
20:24:56  38  ,g33
20:24:56  39  ,g34
20:24:56  40  ,g35
20:24:56  41  ,g36
20:24:56  42  ,g37
20:24:56  43  ,g38
20:24:56  44  ,g39
20:24:56  45  ,g40
20:24:56  46  ,g41
20:24:56  47  FROM modsrc
20:24:56  48  WHERE ydate = '&1'||' '||'&2'
20:24:56  49  AND pair = '&3'
20:24:56  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-10-08'||' '||'02:35:01'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.05
20:24:57 SQL> 
20:24:57 SQL> -- rpt
20:24:57 SQL> -- We should see just 1 row:
20:24:57 SQL> 
20:24:57 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.02
20:24:57 SQL> 
20:24:57 SQL> -- Build the model:
20:24:57 SQL> CREATE OR REPLACE VIEW bme AS
20:24:57   2  SELECT
20:24:57   3  prdate
20:24:57   4  ,gatt
20:24:57   5  ,g00
20:24:57   6  ,g01
20:24:57   7  ,g02
20:24:57   8  ,g03
20:24:57   9  ,g04
20:24:57  10  ,g05
20:24:57  11  ,g06
20:24:57  12  ,g07
20:24:57  13  ,g08
20:24:57  14  ,g09
20:24:57  15  ,g10
20:24:57  16  ,g11
20:24:57  17  ,g12
20:24:57  18  ,g13
20:24:57  19  ,g14
20:24:57  20  ,g15
20:24:57  21  ,g16
20:24:57  22  ,g17
20:24:57  23  ,g18
20:24:57  24  ,g19
20:24:57  25  ,g20
20:24:57  26  ,g21
20:24:57  27  ,g22
20:24:57  28  ,g23
20:24:57  29  ,g24
20:24:57  30  ,g25
20:24:57  31  ,g26
20:24:57  32  ,g27
20:24:57  33  ,g28
20:24:57  34  ,g29
20:24:57  35  ,g30
20:24:57  36  ,g31
20:24:57  37  ,g32
20:24:57  38  ,g33
20:24:57  39  ,g34
20:24:57  40  ,g35
20:24:57  41  ,g36
20:24:57  42  ,g37
20:24:57  43  ,g38
20:24:57  44  ,g39
20:24:57  45  ,g40
20:24:57  46  ,g41
20:24:57  47  FROM modsrc
20:24:57  48  WHERE gatt IN('nup','up')
20:24:57  49  -- Use only rows which are older than 1 day:
20:24:57  50  AND 1+ydate < '&1'||' '||'&2'
20:24:57  51  AND pair = '&3'
20:24:57  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-10-08'||' '||'02:35:01'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.05
20:24:57 SQL> 
20:24:57 SQL> -- rpt
20:24:57 SQL> 
20:24:57 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt;

GAT COUNT(PRDATE)
--- -------------
nup	      140
up	      224

Elapsed: 00:00:00.03
20:24:57 SQL> 
20:24:57 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-10-07 02:30:01

Elapsed: 00:00:00.01
20:24:57 SQL> 
20:24:57 SQL> -- Now build model from bme and score sme
20:24:57 SQL> @score1.sql gatt
20:24:57 SQL> --
20:24:57 SQL> -- score1.sql
20:24:57 SQL> --
20:24:57 SQL> 
20:24:57 SQL> -- I use this script to send 5 params to score.sql
20:24:57 SQL> -- which does the heavy lifting of creating an SVM model.
20:24:57 SQL> -- Then at the very end of this script I use the model
20:24:57 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:24:57 SQL> 
20:24:57 SQL> -- I call this script from 2 other scripts:
20:24:57 SQL> -- score1_5min.sql
20:24:57 SQL> -- score1_5min_gattn.sql
20:24:57 SQL> 
20:24:57 SQL> -- The 1st param is the name of the target attribute.
20:24:57 SQL> -- I like to call my target attributes either gatt or gattn.
20:24:57 SQL> 
20:24:57 SQL> -- Demo:
20:24:57 SQL> -- @score1.sql 'gatt'
20:24:57 SQL> -- @score1.sql 'gattn'
20:24:57 SQL> 
20:24:57 SQL> -- Now, I fill up svmc_apply_prep.
20:24:57 SQL> -- I use same model_name used in score.sql
20:24:57 SQL> DEFINE model_name = 'svmfx101'
20:24:57 SQL> DEFINE bldtable	= 'bme'
20:24:57 SQL> DEFINE scoretable = 'sme'
20:24:57 SQL> DEFINE case_id	= 'prdate'
20:24:57 SQL> -- Demo:
20:24:57 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:24:57 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:24:57 SQL> --
20:24:57 SQL> -- score.sql
20:24:57 SQL> --
20:24:57 SQL> 
20:24:57 SQL> -- usage: score.sql
20:24:57 SQL> 
20:24:57 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:24:57 SQL> 
20:24:57 SQL> -- DEFINE target	   = 'gatt'
20:24:57 SQL> -- DEFINE model_name = 'svmfx101'
20:24:57 SQL> -- DEFINE bldtable   = 'bme'
20:24:57 SQL> -- DEFINE scoretable = 'sme'
20:24:57 SQL> -- DEFINE case_id    = 'prdate'
20:24:57 SQL> 
20:24:57 SQL> DEFINE target	= '&1'
20:24:57 SQL> DEFINE model_name = '&2'
20:24:57 SQL> DEFINE bldtable	= '&3'
20:24:57 SQL> DEFINE scoretable = '&4'
20:24:57 SQL> DEFINE case_id	= '&5'
20:24:57 SQL> 
20:24:57 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:24:57 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:24:57 SQL> 
20:24:57 SQL> -- Builds an SVM model using pl/sql.
20:24:57 SQL> 
20:24:57 SQL> -----------------------------------------------------------------------
20:24:57 SQL> --			    BUILD THE MODEL
20:24:57 SQL> -----------------------------------------------------------------------
20:24:57 SQL> 
20:24:57 SQL> -- Cleanup old build data preparation objects for repeat runs
20:24:57 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.00
20:24:57 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:24:57 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:24:57 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.00
20:24:57 SQL> 
20:24:57 SQL> 
20:24:57 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:24:57 SQL> --
20:24:57 SQL> -- DROP	TABLE svmc_settings ;
20:24:57 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:24:57 SQL> -- DELETE svmc_settings;
20:24:57 SQL> 
20:24:57 SQL> -- The default classification algorithm is Naive Bayes. So override
20:24:57 SQL> -- this choice to SVM using a settings table.
20:24:57 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:24:57 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:24:57 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:24:57 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:24:57 SQL> -- models.
20:24:57 SQL> --
20:24:57 SQL> 
20:24:57 SQL> -- Do this once and then comment it out.
20:24:57 SQL> -- That makes script go faster.
20:24:57 SQL> -- BEGIN
20:24:57 SQL> -- -- Populate settings table
20:24:57 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:24:57 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:24:57 SQL> --
20:24:57 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:24:57 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:24:57 SQL> --
20:24:57 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:24:57 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:24:57 SQL> --   COMMIT;
20:24:57 SQL> -- END;
20:24:57 SQL> -- /
20:24:57 SQL> 
20:24:57 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:24:57 SQL> 
20:24:57 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:24:57   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:24:57   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:24:57 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:24:57   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:24:57   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:24:57 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:24:57   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:24:57   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:24:57 SQL> 
20:24:57 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:24:57   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:24:57   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:24:57 SQL> 
20:24:57 SQL> --------------------------------
20:24:57 SQL> -- PREPARE BUILD (TRAINING) DATA
20:24:57 SQL> --
20:24:57 SQL> 
20:24:57 SQL> -- 1. Missing Value treatment for all Predictors and
20:24:57 SQL> -- 2. Outlier Treatment and
20:24:57 SQL> -- 3. Normalization are performed below.
20:24:57 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:24:57 SQL> --    normalized here.
20:24:57 SQL> 
20:24:57 SQL> BEGIN
20:24:57   2  	-- Perform missing value treatment for all predictors
20:24:57   3  	-- create miss tables
20:24:57   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:24:57   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:24:57   6  
20:24:57   7  	-- populate miss tables
20:24:57   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:24:57   9  	  miss_table_name => 'svmc_miss_num',
20:24:57  10  	  data_table_name => '&bldtable',
20:24:57  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:24:57  12  
20:24:57  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:24:57  14  	  miss_table_name => 'svmc_miss_cat',
20:24:57  15  	  data_table_name => '&bldtable',
20:24:57  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:24:57  17  
20:24:57  18  	-- xform input data to replace missing values
20:24:57  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:24:57  20  	  miss_table_name => 'svmc_miss_num',
20:24:57  21  	  data_table_name => '&bldtable',
20:24:57  22  	  xform_view_name => 'xformed_build_miss_num');
20:24:57  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:24:57  24  	  miss_table_name => 'svmc_miss_cat',
20:24:57  25  	  data_table_name => '&bldtable',
20:24:57  26  	  xform_view_name => 'xformed_build_miss_cat');
20:24:57  27  
20:24:57  28  	-- Perform outlier treatment.
20:24:57  29  	-- create clip table
20:24:57  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:24:57  31  
20:24:57  32  	-- populate clip table
20:24:57  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:24:57  34  	  clip_table_name => 'svmc_clip',
20:24:57  35  	  data_table_name => '&bldtable',
20:24:57  36  	  tail_frac	  => 0.025,
20:24:57  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:24:57  38  
20:24:57  39  	-- xform input data to winsorized data
20:24:57  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:24:57  41  	  clip_table_name => 'svmc_clip',
20:24:57  42  	  data_table_name => '&bldtable',
20:24:57  43  	  xform_view_name => 'svmc_winsor');
20:24:57  44  
20:24:57  45  	-- create normalization table
20:24:57  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:24:57  47  
20:24:57  48  	-- populate normalization table based on winsorized data
20:24:57  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:24:57  50  	  norm_table_name => 'svmc_norm',
20:24:57  51  	  data_table_name => 'svmc_winsor',
20:24:57  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:24:57  53  
20:24:57  54  	-- normalize the original data
20:24:57  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:24:57  56  	  norm_table_name => 'svmc_norm',
20:24:57  57  	  data_table_name => '&bldtable',
20:24:57  58  	  xform_view_name => 'svmc_build_prep');
20:24:57  59  END;
20:24:57  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.93
20:24:58 SQL> 
20:24:58 SQL> ---------------------
20:24:58 SQL> -- CREATE A NEW MODEL
20:24:58 SQL> --
20:24:58 SQL> -- Cleanup old model with the same name for repeat runs
20:24:58 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:24:58   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:24:58   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.94
20:24:59 SQL> 
20:24:59 SQL> -- Build a new SVM Model
20:24:59 SQL> BEGIN
20:24:59   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:24:59   3  	  model_name	      => '&model_name',
20:24:59   4  	  mining_function     => dbms_data_mining.classification,
20:24:59   5  	  data_table_name     => 'svmc_build_prep',
20:24:59   6  	  case_id_column_name => '&case_id',
20:24:59   7  	  target_column_name  => '&target',
20:24:59   8  	  settings_table_name => 'svmc_settings');
20:24:59   9  END;
20:24:59  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:02.06
20:25:01 SQL> 
20:25:01 SQL> -----------------------------------------------------------------------
20:25:01 SQL> --			       APPLY/score THE MODEL
20:25:01 SQL> -----------------------------------------------------------------------
20:25:01 SQL> 
20:25:01 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:25:01 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:25:01   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:25:01   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.34
20:25:01 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:25:01   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:25:01   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:25:01 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:25:01   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:25:01   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:25:01 SQL> -----------------------
20:25:01 SQL> -- PREPARE SCORING DATA
20:25:01 SQL> --
20:25:01 SQL> -- If the data for model creation has been prepared, then the data
20:25:01 SQL> -- to be scored using the model must be prepared in the same manner
20:25:01 SQL> -- in order to obtain meaningful results.
20:25:01 SQL> --
20:25:01 SQL> -- 1. Missing Value treatment for all Predictors and
20:25:01 SQL> -- 2. Normalization
20:25:01 SQL> -- No outlier treatment will be performed during test and apply. The
20:25:01 SQL> -- normalization step is sufficient, since the normalization parameters
20:25:01 SQL> -- already capture the effects of outlier treatment done with build data.
20:25:01 SQL> --
20:25:01 SQL> BEGIN
20:25:01   2  	-- Xform Test data to replace missing values
20:25:01   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:25:01   4  	  miss_table_name => 'svmc_miss_num',
20:25:01   5  	  data_table_name => '&scoretable',
20:25:01   6  	  xform_view_name => 'xformed_apply_miss_num');
20:25:01   7  
20:25:01   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:25:01   9  	  miss_table_name => 'svmc_miss_cat',
20:25:01  10  	  data_table_name => '&scoretable',
20:25:01  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:25:01  12  
20:25:01  13  	-- Normalize the data to be scored
20:25:01  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:25:01  15  	  norm_table_name => 'svmc_norm',
20:25:01  16  	  data_table_name => '&scoretable',
20:25:01  17  	  xform_view_name => 'svmc_apply_prep');
20:25:01  18  END;
20:25:01  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.17
20:25:01 SQL> 
20:25:01 SQL> -- Maybe I already collected a score for this prdate.
20:25:01 SQL> -- DELETE it if I did:
20:25:01 SQL> DELETE svm62scores
20:25:01   2  WHERE score > 0
20:25:01   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:25:01   4  -- I need to supply the target attribute name:
20:25:01   5  AND targ = '&1'
20:25:01   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gatt'

0 rows deleted.

Elapsed: 00:00:00.02
20:25:01 SQL> 
20:25:01 SQL> -- We do a drumroll here:
20:25:01 SQL> 
20:25:01 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:25:01   2  SELECT
20:25:01   3  prdate
20:25:01   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:25:01   5  ,sysdate
20:25:01   6  ,SUBSTR(prdate,1,7)pair
20:25:01   7  ,SUBSTR(prdate,-19)ydate
20:25:01   8  ,'&1'
20:25:01   9  FROM svmc_apply_prep
20:25:01  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gatt'

1 row created.

Elapsed: 00:00:00.03
20:25:01 SQL> @score1_5min_gattn.sql	2010-10-06 17:10:01 aud_usd
20:25:01 SQL> --
20:25:01 SQL> -- score1_5min_gattn.sql
20:25:01 SQL> --
20:25:01 SQL> 
20:25:01 SQL> -- Demo:
20:25:01 SQL> -- @score1_5min_gattn.sql 2010-12-31 20:45:01 aud_usd
20:25:01 SQL> 
20:25:01 SQL> CREATE OR REPLACE VIEW sme AS
20:25:01   2  SELECT
20:25:01   3  prdate
20:25:01   4  ,NULL gattn
20:25:01   5  ,g00
20:25:01   6  ,g01
20:25:01   7  ,g02
20:25:01   8  ,g03
20:25:01   9  ,g04
20:25:01  10  ,g05
20:25:01  11  ,g06
20:25:01  12  ,g07
20:25:01  13  ,g08
20:25:01  14  ,g09
20:25:01  15  ,g10
20:25:01  16  ,g11
20:25:01  17  ,g12
20:25:01  18  ,g13
20:25:01  19  ,g14
20:25:01  20  ,g15
20:25:01  21  ,g16
20:25:01  22  ,g17
20:25:01  23  ,g18
20:25:01  24  ,g19
20:25:01  25  ,g20
20:25:01  26  ,g21
20:25:01  27  ,g22
20:25:01  28  ,g23
20:25:01  29  ,g24
20:25:01  30  ,g25
20:25:01  31  ,g26
20:25:01  32  ,g27
20:25:01  33  ,g28
20:25:01  34  ,g29
20:25:01  35  ,g30
20:25:01  36  ,g31
20:25:01  37  ,g32
20:25:01  38  ,g33
20:25:01  39  ,g34
20:25:01  40  ,g35
20:25:01  41  ,g36
20:25:01  42  ,g37
20:25:01  43  ,g38
20:25:01  44  ,g39
20:25:01  45  ,g40
20:25:01  46  ,g41
20:25:01  47  FROM modsrc
20:25:01  48  WHERE ydate = '&1'||' '||'&2'
20:25:01  49  AND pair = '&3'
20:25:01  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-10-06'||' '||'17:10:01'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.05
20:25:01 SQL> 
20:25:01 SQL> -- rpt
20:25:01 SQL> -- We should see just 1 row:
20:25:01 SQL> 
20:25:01 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.02
20:25:01 SQL> 
20:25:01 SQL> -- Build the model:
20:25:01 SQL> CREATE OR REPLACE VIEW bme AS
20:25:01   2  SELECT
20:25:01   3  prdate
20:25:01   4  ,gattn
20:25:01   5  ,g00
20:25:01   6  ,g01
20:25:01   7  ,g02
20:25:01   8  ,g03
20:25:01   9  ,g04
20:25:01  10  ,g05
20:25:01  11  ,g06
20:25:01  12  ,g07
20:25:01  13  ,g08
20:25:01  14  ,g09
20:25:01  15  ,g10
20:25:01  16  ,g11
20:25:01  17  ,g12
20:25:01  18  ,g13
20:25:01  19  ,g14
20:25:01  20  ,g15
20:25:01  21  ,g16
20:25:01  22  ,g17
20:25:01  23  ,g18
20:25:01  24  ,g19
20:25:01  25  ,g20
20:25:01  26  ,g21
20:25:01  27  ,g22
20:25:01  28  ,g23
20:25:01  29  ,g24
20:25:01  30  ,g25
20:25:01  31  ,g26
20:25:01  32  ,g27
20:25:01  33  ,g28
20:25:01  34  ,g29
20:25:01  35  ,g30
20:25:01  36  ,g31
20:25:01  37  ,g32
20:25:01  38  ,g33
20:25:01  39  ,g34
20:25:01  40  ,g35
20:25:01  41  ,g36
20:25:01  42  ,g37
20:25:01  43  ,g38
20:25:01  44  ,g39
20:25:01  45  ,g40
20:25:01  46  ,g41
20:25:01  47  FROM modsrc
20:25:01  48  WHERE gattn IN('nup','up')
20:25:01  49  -- Use only rows which are older than 1 day:
20:25:01  50  AND 1+ydate < '&1'||' '||'&2'
20:25:01  51  AND pair = '&3'
20:25:01  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-10-06'||' '||'17:10:01'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.03
20:25:01 SQL> 
20:25:01 SQL> -- rpt
20:25:01 SQL> 
20:25:01 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

no rows selected

Elapsed: 00:00:00.03
20:25:01 SQL> 
20:25:01 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------


Elapsed: 00:00:00.01
20:25:01 SQL> 
20:25:01 SQL> -- Now build model from bme and score sme
20:25:01 SQL> @score1.sql gattn
20:25:01 SQL> --
20:25:01 SQL> -- score1.sql
20:25:01 SQL> --
20:25:01 SQL> 
20:25:01 SQL> -- I use this script to send 5 params to score.sql
20:25:01 SQL> -- which does the heavy lifting of creating an SVM model.
20:25:01 SQL> -- Then at the very end of this script I use the model
20:25:01 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:25:01 SQL> 
20:25:01 SQL> -- I call this script from 2 other scripts:
20:25:01 SQL> -- score1_5min.sql
20:25:01 SQL> -- score1_5min_gattn.sql
20:25:01 SQL> 
20:25:01 SQL> -- The 1st param is the name of the target attribute.
20:25:01 SQL> -- I like to call my target attributes either gatt or gattn.
20:25:01 SQL> 
20:25:01 SQL> -- Demo:
20:25:01 SQL> -- @score1.sql 'gatt'
20:25:01 SQL> -- @score1.sql 'gattn'
20:25:01 SQL> 
20:25:01 SQL> -- Now, I fill up svmc_apply_prep.
20:25:01 SQL> -- I use same model_name used in score.sql
20:25:01 SQL> DEFINE model_name = 'svmfx101'
20:25:01 SQL> DEFINE bldtable	= 'bme'
20:25:01 SQL> DEFINE scoretable = 'sme'
20:25:01 SQL> DEFINE case_id	= 'prdate'
20:25:01 SQL> -- Demo:
20:25:01 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:25:01 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:25:01 SQL> --
20:25:01 SQL> -- score.sql
20:25:01 SQL> --
20:25:01 SQL> 
20:25:01 SQL> -- usage: score.sql
20:25:01 SQL> 
20:25:01 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:25:01 SQL> 
20:25:01 SQL> -- DEFINE target	   = 'gatt'
20:25:01 SQL> -- DEFINE model_name = 'svmfx101'
20:25:01 SQL> -- DEFINE bldtable   = 'bme'
20:25:01 SQL> -- DEFINE scoretable = 'sme'
20:25:01 SQL> -- DEFINE case_id    = 'prdate'
20:25:01 SQL> 
20:25:01 SQL> DEFINE target	= '&1'
20:25:01 SQL> DEFINE model_name = '&2'
20:25:01 SQL> DEFINE bldtable	= '&3'
20:25:01 SQL> DEFINE scoretable = '&4'
20:25:01 SQL> DEFINE case_id	= '&5'
20:25:01 SQL> 
20:25:01 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:25:01 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:25:01 SQL> 
20:25:01 SQL> -- Builds an SVM model using pl/sql.
20:25:01 SQL> 
20:25:01 SQL> -----------------------------------------------------------------------
20:25:01 SQL> --			    BUILD THE MODEL
20:25:01 SQL> -----------------------------------------------------------------------
20:25:01 SQL> 
20:25:01 SQL> -- Cleanup old build data preparation objects for repeat runs
20:25:01 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.01
20:25:02 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:25:02 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:25:02 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.00
20:25:02 SQL> 
20:25:02 SQL> 
20:25:02 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:25:02 SQL> --
20:25:02 SQL> -- DROP	TABLE svmc_settings ;
20:25:02 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:25:02 SQL> -- DELETE svmc_settings;
20:25:02 SQL> 
20:25:02 SQL> -- The default classification algorithm is Naive Bayes. So override
20:25:02 SQL> -- this choice to SVM using a settings table.
20:25:02 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:25:02 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:25:02 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:25:02 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:25:02 SQL> -- models.
20:25:02 SQL> --
20:25:02 SQL> 
20:25:02 SQL> -- Do this once and then comment it out.
20:25:02 SQL> -- That makes script go faster.
20:25:02 SQL> -- BEGIN
20:25:02 SQL> -- -- Populate settings table
20:25:02 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:25:02 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:25:02 SQL> --
20:25:02 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:25:02 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:25:02 SQL> --
20:25:02 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:25:02 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:25:02 SQL> --   COMMIT;
20:25:02 SQL> -- END;
20:25:02 SQL> -- /
20:25:02 SQL> 
20:25:02 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:25:02 SQL> 
20:25:02 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:25:02   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:25:02   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:25:02 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:25:02   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:25:02   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:25:02 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:25:02   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:25:02   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:25:02 SQL> 
20:25:02 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:25:02   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:25:02   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:25:02 SQL> 
20:25:02 SQL> --------------------------------
20:25:02 SQL> -- PREPARE BUILD (TRAINING) DATA
20:25:02 SQL> --
20:25:02 SQL> 
20:25:02 SQL> -- 1. Missing Value treatment for all Predictors and
20:25:02 SQL> -- 2. Outlier Treatment and
20:25:02 SQL> -- 3. Normalization are performed below.
20:25:02 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:25:02 SQL> --    normalized here.
20:25:02 SQL> 
20:25:02 SQL> BEGIN
20:25:02   2  	-- Perform missing value treatment for all predictors
20:25:02   3  	-- create miss tables
20:25:02   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:25:02   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:25:02   6  
20:25:02   7  	-- populate miss tables
20:25:02   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:25:02   9  	  miss_table_name => 'svmc_miss_num',
20:25:02  10  	  data_table_name => '&bldtable',
20:25:02  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:25:02  12  
20:25:02  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:25:02  14  	  miss_table_name => 'svmc_miss_cat',
20:25:02  15  	  data_table_name => '&bldtable',
20:25:02  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:25:02  17  
20:25:02  18  	-- xform input data to replace missing values
20:25:02  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:25:02  20  	  miss_table_name => 'svmc_miss_num',
20:25:02  21  	  data_table_name => '&bldtable',
20:25:02  22  	  xform_view_name => 'xformed_build_miss_num');
20:25:02  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:25:02  24  	  miss_table_name => 'svmc_miss_cat',
20:25:02  25  	  data_table_name => '&bldtable',
20:25:02  26  	  xform_view_name => 'xformed_build_miss_cat');
20:25:02  27  
20:25:02  28  	-- Perform outlier treatment.
20:25:02  29  	-- create clip table
20:25:02  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:25:02  31  
20:25:02  32  	-- populate clip table
20:25:02  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:25:02  34  	  clip_table_name => 'svmc_clip',
20:25:02  35  	  data_table_name => '&bldtable',
20:25:02  36  	  tail_frac	  => 0.025,
20:25:02  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:25:02  38  
20:25:02  39  	-- xform input data to winsorized data
20:25:02  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:25:02  41  	  clip_table_name => 'svmc_clip',
20:25:02  42  	  data_table_name => '&bldtable',
20:25:02  43  	  xform_view_name => 'svmc_winsor');
20:25:02  44  
20:25:02  45  	-- create normalization table
20:25:02  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:25:02  47  
20:25:02  48  	-- populate normalization table based on winsorized data
20:25:02  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:25:02  50  	  norm_table_name => 'svmc_norm',
20:25:02  51  	  data_table_name => 'svmc_winsor',
20:25:02  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:25:02  53  
20:25:02  54  	-- normalize the original data
20:25:02  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:25:02  56  	  norm_table_name => 'svmc_norm',
20:25:02  57  	  data_table_name => '&bldtable',
20:25:02  58  	  xform_view_name => 'svmc_build_prep');
20:25:02  59  END;
20:25:02  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.72
20:25:02 SQL> 
20:25:02 SQL> ---------------------
20:25:02 SQL> -- CREATE A NEW MODEL
20:25:02 SQL> --
20:25:02 SQL> -- Cleanup old model with the same name for repeat runs
20:25:02 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:25:02   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:25:02   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.02
20:25:03 SQL> 
20:25:03 SQL> -- Build a new SVM Model
20:25:03 SQL> BEGIN
20:25:03   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:25:03   3  	  model_name	      => '&model_name',
20:25:03   4  	  mining_function     => dbms_data_mining.classification,
20:25:03   5  	  data_table_name     => 'svmc_build_prep',
20:25:03   6  	  case_id_column_name => '&case_id',
20:25:03   7  	  target_column_name  => '&target',
20:25:03   8  	  settings_table_name => 'svmc_settings');
20:25:03   9  END;
20:25:03  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',
BEGIN
*
ERROR at line 1:
ORA-40112: insufficient number of valid data rows
ORA-06512: at "SYS.DBMS_DATA_MINING", line 1779
ORA-06512: at line 2


Elapsed: 00:00:00.58
20:25:04 SQL> 
20:25:04 SQL> -----------------------------------------------------------------------
20:25:04 SQL> --			       APPLY/score THE MODEL
20:25:04 SQL> -----------------------------------------------------------------------
20:25:04 SQL> 
20:25:04 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:25:04 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:25:04   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:25:04   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:25:04 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:25:04   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:25:04   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:25:04 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:25:04   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:25:04   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:25:04 SQL> -----------------------
20:25:04 SQL> -- PREPARE SCORING DATA
20:25:04 SQL> --
20:25:04 SQL> -- If the data for model creation has been prepared, then the data
20:25:04 SQL> -- to be scored using the model must be prepared in the same manner
20:25:04 SQL> -- in order to obtain meaningful results.
20:25:04 SQL> --
20:25:04 SQL> -- 1. Missing Value treatment for all Predictors and
20:25:04 SQL> -- 2. Normalization
20:25:04 SQL> -- No outlier treatment will be performed during test and apply. The
20:25:04 SQL> -- normalization step is sufficient, since the normalization parameters
20:25:04 SQL> -- already capture the effects of outlier treatment done with build data.
20:25:04 SQL> --
20:25:04 SQL> BEGIN
20:25:04   2  	-- Xform Test data to replace missing values
20:25:04   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:25:04   4  	  miss_table_name => 'svmc_miss_num',
20:25:04   5  	  data_table_name => '&scoretable',
20:25:04   6  	  xform_view_name => 'xformed_apply_miss_num');
20:25:04   7  
20:25:04   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:25:04   9  	  miss_table_name => 'svmc_miss_cat',
20:25:04  10  	  data_table_name => '&scoretable',
20:25:04  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:25:04  12  
20:25:04  13  	-- Normalize the data to be scored
20:25:04  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:25:04  15  	  norm_table_name => 'svmc_norm',
20:25:04  16  	  data_table_name => '&scoretable',
20:25:04  17  	  xform_view_name => 'svmc_apply_prep');
20:25:04  18  END;
20:25:04  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.12
20:25:04 SQL> 
20:25:04 SQL> -- Maybe I already collected a score for this prdate.
20:25:04 SQL> -- DELETE it if I did:
20:25:04 SQL> DELETE svm62scores
20:25:04   2  WHERE score > 0
20:25:04   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:25:04   4  -- I need to supply the target attribute name:
20:25:04   5  AND targ = '&1'
20:25:04   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gattn'

0 rows deleted.

Elapsed: 00:00:00.02
20:25:04 SQL> 
20:25:04 SQL> -- We do a drumroll here:
20:25:04 SQL> 
20:25:04 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:25:04   2  SELECT
20:25:04   3  prdate
20:25:04   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:25:04   5  ,sysdate
20:25:04   6  ,SUBSTR(prdate,1,7)pair
20:25:04   7  ,SUBSTR(prdate,-19)ydate
20:25:04   8  ,'&1'
20:25:04   9  FROM svmc_apply_prep
20:25:04  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gattn'
FROM svmc_apply_prep
                   *
ERROR at line 9:
ORA-40284: model does not exist


Elapsed: 00:00:00.03
20:25:04 SQL> @score1_5min_gattn.sql	2010-12-07 03:35:00 aud_usd
20:25:04 SQL> --
20:25:04 SQL> -- score1_5min_gattn.sql
20:25:04 SQL> --
20:25:04 SQL> 
20:25:04 SQL> -- Demo:
20:25:04 SQL> -- @score1_5min_gattn.sql 2010-12-31 20:45:01 aud_usd
20:25:04 SQL> 
20:25:04 SQL> CREATE OR REPLACE VIEW sme AS
20:25:04   2  SELECT
20:25:04   3  prdate
20:25:04   4  ,NULL gattn
20:25:04   5  ,g00
20:25:04   6  ,g01
20:25:04   7  ,g02
20:25:04   8  ,g03
20:25:04   9  ,g04
20:25:04  10  ,g05
20:25:04  11  ,g06
20:25:04  12  ,g07
20:25:04  13  ,g08
20:25:04  14  ,g09
20:25:04  15  ,g10
20:25:04  16  ,g11
20:25:04  17  ,g12
20:25:04  18  ,g13
20:25:04  19  ,g14
20:25:04  20  ,g15
20:25:04  21  ,g16
20:25:04  22  ,g17
20:25:04  23  ,g18
20:25:04  24  ,g19
20:25:04  25  ,g20
20:25:04  26  ,g21
20:25:04  27  ,g22
20:25:04  28  ,g23
20:25:04  29  ,g24
20:25:04  30  ,g25
20:25:04  31  ,g26
20:25:04  32  ,g27
20:25:04  33  ,g28
20:25:04  34  ,g29
20:25:04  35  ,g30
20:25:04  36  ,g31
20:25:04  37  ,g32
20:25:04  38  ,g33
20:25:04  39  ,g34
20:25:04  40  ,g35
20:25:04  41  ,g36
20:25:04  42  ,g37
20:25:04  43  ,g38
20:25:04  44  ,g39
20:25:04  45  ,g40
20:25:04  46  ,g41
20:25:04  47  FROM modsrc
20:25:04  48  WHERE ydate = '&1'||' '||'&2'
20:25:04  49  AND pair = '&3'
20:25:04  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-12-07'||' '||'03:35:00'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.05
20:25:04 SQL> 
20:25:04 SQL> -- rpt
20:25:04 SQL> -- We should see just 1 row:
20:25:04 SQL> 
20:25:04 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.02
20:25:04 SQL> 
20:25:04 SQL> -- Build the model:
20:25:04 SQL> CREATE OR REPLACE VIEW bme AS
20:25:04   2  SELECT
20:25:04   3  prdate
20:25:04   4  ,gattn
20:25:04   5  ,g00
20:25:04   6  ,g01
20:25:04   7  ,g02
20:25:04   8  ,g03
20:25:04   9  ,g04
20:25:04  10  ,g05
20:25:04  11  ,g06
20:25:04  12  ,g07
20:25:04  13  ,g08
20:25:04  14  ,g09
20:25:04  15  ,g10
20:25:04  16  ,g11
20:25:04  17  ,g12
20:25:04  18  ,g13
20:25:04  19  ,g14
20:25:04  20  ,g15
20:25:04  21  ,g16
20:25:04  22  ,g17
20:25:04  23  ,g18
20:25:04  24  ,g19
20:25:04  25  ,g20
20:25:04  26  ,g21
20:25:04  27  ,g22
20:25:04  28  ,g23
20:25:04  29  ,g24
20:25:04  30  ,g25
20:25:04  31  ,g26
20:25:04  32  ,g27
20:25:04  33  ,g28
20:25:04  34  ,g29
20:25:04  35  ,g30
20:25:04  36  ,g31
20:25:04  37  ,g32
20:25:04  38  ,g33
20:25:04  39  ,g34
20:25:04  40  ,g35
20:25:04  41  ,g36
20:25:04  42  ,g37
20:25:04  43  ,g38
20:25:04  44  ,g39
20:25:04  45  ,g40
20:25:04  46  ,g41
20:25:04  47  FROM modsrc
20:25:04  48  WHERE gattn IN('nup','up')
20:25:04  49  -- Use only rows which are older than 1 day:
20:25:04  50  AND 1+ydate < '&1'||' '||'&2'
20:25:04  51  AND pair = '&3'
20:25:04  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-12-07'||' '||'03:35:00'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.05
20:25:04 SQL> 
20:25:04 SQL> -- rpt
20:25:04 SQL> 
20:25:04 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	     7957
up	     4581

Elapsed: 00:00:00.03
20:25:04 SQL> 
20:25:04 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-12-06 03:30:00

Elapsed: 00:00:00.02
20:25:04 SQL> 
20:25:04 SQL> -- Now build model from bme and score sme
20:25:04 SQL> @score1.sql gattn
20:25:04 SQL> --
20:25:04 SQL> -- score1.sql
20:25:04 SQL> --
20:25:04 SQL> 
20:25:04 SQL> -- I use this script to send 5 params to score.sql
20:25:04 SQL> -- which does the heavy lifting of creating an SVM model.
20:25:04 SQL> -- Then at the very end of this script I use the model
20:25:04 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:25:04 SQL> 
20:25:04 SQL> -- I call this script from 2 other scripts:
20:25:04 SQL> -- score1_5min.sql
20:25:04 SQL> -- score1_5min_gattn.sql
20:25:04 SQL> 
20:25:04 SQL> -- The 1st param is the name of the target attribute.
20:25:04 SQL> -- I like to call my target attributes either gatt or gattn.
20:25:04 SQL> 
20:25:04 SQL> -- Demo:
20:25:04 SQL> -- @score1.sql 'gatt'
20:25:04 SQL> -- @score1.sql 'gattn'
20:25:04 SQL> 
20:25:04 SQL> -- Now, I fill up svmc_apply_prep.
20:25:04 SQL> -- I use same model_name used in score.sql
20:25:04 SQL> DEFINE model_name = 'svmfx101'
20:25:04 SQL> DEFINE bldtable	= 'bme'
20:25:04 SQL> DEFINE scoretable = 'sme'
20:25:04 SQL> DEFINE case_id	= 'prdate'
20:25:04 SQL> -- Demo:
20:25:04 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:25:04 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:25:04 SQL> --
20:25:04 SQL> -- score.sql
20:25:04 SQL> --
20:25:04 SQL> 
20:25:04 SQL> -- usage: score.sql
20:25:04 SQL> 
20:25:04 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:25:04 SQL> 
20:25:04 SQL> -- DEFINE target	   = 'gatt'
20:25:04 SQL> -- DEFINE model_name = 'svmfx101'
20:25:04 SQL> -- DEFINE bldtable   = 'bme'
20:25:04 SQL> -- DEFINE scoretable = 'sme'
20:25:04 SQL> -- DEFINE case_id    = 'prdate'
20:25:04 SQL> 
20:25:04 SQL> DEFINE target	= '&1'
20:25:04 SQL> DEFINE model_name = '&2'
20:25:04 SQL> DEFINE bldtable	= '&3'
20:25:04 SQL> DEFINE scoretable = '&4'
20:25:04 SQL> DEFINE case_id	= '&5'
20:25:04 SQL> 
20:25:04 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:25:04 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:25:04 SQL> 
20:25:04 SQL> -- Builds an SVM model using pl/sql.
20:25:04 SQL> 
20:25:04 SQL> -----------------------------------------------------------------------
20:25:04 SQL> --			    BUILD THE MODEL
20:25:04 SQL> -----------------------------------------------------------------------
20:25:04 SQL> 
20:25:04 SQL> -- Cleanup old build data preparation objects for repeat runs
20:25:04 SQL> DELETE svmc_miss_num;

0 rows deleted.

Elapsed: 00:00:00.00
20:25:04 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:25:04 SQL> DELETE svmc_clip;

0 rows deleted.

Elapsed: 00:00:00.01
20:25:04 SQL> DELETE svmc_norm;

0 rows deleted.

Elapsed: 00:00:00.00
20:25:04 SQL> 
20:25:04 SQL> 
20:25:04 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:25:04 SQL> --
20:25:04 SQL> -- DROP	TABLE svmc_settings ;
20:25:04 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:25:04 SQL> -- DELETE svmc_settings;
20:25:04 SQL> 
20:25:04 SQL> -- The default classification algorithm is Naive Bayes. So override
20:25:04 SQL> -- this choice to SVM using a settings table.
20:25:04 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:25:04 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:25:04 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:25:04 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:25:04 SQL> -- models.
20:25:04 SQL> --
20:25:04 SQL> 
20:25:04 SQL> -- Do this once and then comment it out.
20:25:04 SQL> -- That makes script go faster.
20:25:04 SQL> -- BEGIN
20:25:04 SQL> -- -- Populate settings table
20:25:04 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:25:04 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:25:04 SQL> --
20:25:04 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:25:04 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:25:04 SQL> --
20:25:04 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:25:04 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:25:04 SQL> --   COMMIT;
20:25:04 SQL> -- END;
20:25:04 SQL> -- /
20:25:04 SQL> 
20:25:04 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:25:04 SQL> 
20:25:04 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:25:04   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:25:04   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:25:04 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:25:04   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:25:04   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:25:04 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:25:04   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:25:04   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:25:05 SQL> 
20:25:05 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:25:05   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:25:05   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:25:05 SQL> 
20:25:05 SQL> --------------------------------
20:25:05 SQL> -- PREPARE BUILD (TRAINING) DATA
20:25:05 SQL> --
20:25:05 SQL> 
20:25:05 SQL> -- 1. Missing Value treatment for all Predictors and
20:25:05 SQL> -- 2. Outlier Treatment and
20:25:05 SQL> -- 3. Normalization are performed below.
20:25:05 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:25:05 SQL> --    normalized here.
20:25:05 SQL> 
20:25:05 SQL> BEGIN
20:25:05   2  	-- Perform missing value treatment for all predictors
20:25:05   3  	-- create miss tables
20:25:05   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:25:05   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:25:05   6  
20:25:05   7  	-- populate miss tables
20:25:05   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:25:05   9  	  miss_table_name => 'svmc_miss_num',
20:25:05  10  	  data_table_name => '&bldtable',
20:25:05  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:25:05  12  
20:25:05  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:25:05  14  	  miss_table_name => 'svmc_miss_cat',
20:25:05  15  	  data_table_name => '&bldtable',
20:25:05  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:25:05  17  
20:25:05  18  	-- xform input data to replace missing values
20:25:05  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:25:05  20  	  miss_table_name => 'svmc_miss_num',
20:25:05  21  	  data_table_name => '&bldtable',
20:25:05  22  	  xform_view_name => 'xformed_build_miss_num');
20:25:05  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:25:05  24  	  miss_table_name => 'svmc_miss_cat',
20:25:05  25  	  data_table_name => '&bldtable',
20:25:05  26  	  xform_view_name => 'xformed_build_miss_cat');
20:25:05  27  
20:25:05  28  	-- Perform outlier treatment.
20:25:05  29  	-- create clip table
20:25:05  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:25:05  31  
20:25:05  32  	-- populate clip table
20:25:05  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:25:05  34  	  clip_table_name => 'svmc_clip',
20:25:05  35  	  data_table_name => '&bldtable',
20:25:05  36  	  tail_frac	  => 0.025,
20:25:05  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:25:05  38  
20:25:05  39  	-- xform input data to winsorized data
20:25:05  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:25:05  41  	  clip_table_name => 'svmc_clip',
20:25:05  42  	  data_table_name => '&bldtable',
20:25:05  43  	  xform_view_name => 'svmc_winsor');
20:25:05  44  
20:25:05  45  	-- create normalization table
20:25:05  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:25:05  47  
20:25:05  48  	-- populate normalization table based on winsorized data
20:25:05  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:25:05  50  	  norm_table_name => 'svmc_norm',
20:25:05  51  	  data_table_name => 'svmc_winsor',
20:25:05  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:25:05  53  
20:25:05  54  	-- normalize the original data
20:25:05  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:25:05  56  	  norm_table_name => 'svmc_norm',
20:25:05  57  	  data_table_name => '&bldtable',
20:25:05  58  	  xform_view_name => 'svmc_build_prep');
20:25:05  59  END;
20:25:05  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.82
20:25:06 SQL> 
20:25:06 SQL> ---------------------
20:25:06 SQL> -- CREATE A NEW MODEL
20:25:06 SQL> --
20:25:06 SQL> -- Cleanup old model with the same name for repeat runs
20:25:06 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:25:06   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:25:06   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.01
20:25:06 SQL> 
20:25:06 SQL> -- Build a new SVM Model
20:25:06 SQL> BEGIN
20:25:06   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:25:06   3  	  model_name	      => '&model_name',
20:25:06   4  	  mining_function     => dbms_data_mining.classification,
20:25:06   5  	  data_table_name     => 'svmc_build_prep',
20:25:06   6  	  case_id_column_name => '&case_id',
20:25:06   7  	  target_column_name  => '&target',
20:25:06   8  	  settings_table_name => 'svmc_settings');
20:25:06   9  END;
20:25:06  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:04.57
20:25:11 SQL> 
20:25:11 SQL> -----------------------------------------------------------------------
20:25:11 SQL> --			       APPLY/score THE MODEL
20:25:11 SQL> -----------------------------------------------------------------------
20:25:11 SQL> 
20:25:11 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:25:11 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:25:11   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:25:11   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:25:11 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:25:11   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:25:11   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:25:11 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:25:11   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:25:11   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:25:11 SQL> -----------------------
20:25:11 SQL> -- PREPARE SCORING DATA
20:25:11 SQL> --
20:25:11 SQL> -- If the data for model creation has been prepared, then the data
20:25:11 SQL> -- to be scored using the model must be prepared in the same manner
20:25:11 SQL> -- in order to obtain meaningful results.
20:25:11 SQL> --
20:25:11 SQL> -- 1. Missing Value treatment for all Predictors and
20:25:11 SQL> -- 2. Normalization
20:25:11 SQL> -- No outlier treatment will be performed during test and apply. The
20:25:11 SQL> -- normalization step is sufficient, since the normalization parameters
20:25:11 SQL> -- already capture the effects of outlier treatment done with build data.
20:25:11 SQL> --
20:25:11 SQL> BEGIN
20:25:11   2  	-- Xform Test data to replace missing values
20:25:11   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:25:11   4  	  miss_table_name => 'svmc_miss_num',
20:25:11   5  	  data_table_name => '&scoretable',
20:25:11   6  	  xform_view_name => 'xformed_apply_miss_num');
20:25:11   7  
20:25:11   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:25:11   9  	  miss_table_name => 'svmc_miss_cat',
20:25:11  10  	  data_table_name => '&scoretable',
20:25:11  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:25:11  12  
20:25:11  13  	-- Normalize the data to be scored
20:25:11  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:25:11  15  	  norm_table_name => 'svmc_norm',
20:25:11  16  	  data_table_name => '&scoretable',
20:25:11  17  	  xform_view_name => 'svmc_apply_prep');
20:25:11  18  END;
20:25:11  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.18
20:25:11 SQL> 
20:25:11 SQL> -- Maybe I already collected a score for this prdate.
20:25:11 SQL> -- DELETE it if I did:
20:25:11 SQL> DELETE svm62scores
20:25:11   2  WHERE score > 0
20:25:11   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:25:11   4  -- I need to supply the target attribute name:
20:25:11   5  AND targ = '&1'
20:25:11   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gattn'

0 rows deleted.

Elapsed: 00:00:00.02
20:25:11 SQL> 
20:25:11 SQL> -- We do a drumroll here:
20:25:11 SQL> 
20:25:11 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:25:11   2  SELECT
20:25:11   3  prdate
20:25:11   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:25:11   5  ,sysdate
20:25:11   6  ,SUBSTR(prdate,1,7)pair
20:25:11   7  ,SUBSTR(prdate,-19)ydate
20:25:11   8  ,'&1'
20:25:11   9  FROM svmc_apply_prep
20:25:11  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gattn'

1 row created.

Elapsed: 00:00:00.05
20:25:11 SQL> @score1_5min.sql	      2010-10-25 12:40:01 aud_usd
20:25:11 SQL> --
20:25:11 SQL> -- score1_5min.sql
20:25:11 SQL> --
20:25:11 SQL> 
20:25:11 SQL> -- Demo:
20:25:11 SQL> -- @score1_5min.sql 2010-12-31 20:45:01 aud_usd
20:25:11 SQL> 
20:25:11 SQL> CREATE OR REPLACE VIEW sme AS
20:25:11   2  SELECT
20:25:11   3  prdate
20:25:11   4  ,NULL gatt
20:25:11   5  ,g00
20:25:11   6  ,g01
20:25:11   7  ,g02
20:25:11   8  ,g03
20:25:11   9  ,g04
20:25:11  10  ,g05
20:25:11  11  ,g06
20:25:11  12  ,g07
20:25:11  13  ,g08
20:25:11  14  ,g09
20:25:11  15  ,g10
20:25:11  16  ,g11
20:25:11  17  ,g12
20:25:11  18  ,g13
20:25:11  19  ,g14
20:25:11  20  ,g15
20:25:11  21  ,g16
20:25:11  22  ,g17
20:25:11  23  ,g18
20:25:11  24  ,g19
20:25:11  25  ,g20
20:25:11  26  ,g21
20:25:11  27  ,g22
20:25:11  28  ,g23
20:25:11  29  ,g24
20:25:11  30  ,g25
20:25:11  31  ,g26
20:25:11  32  ,g27
20:25:11  33  ,g28
20:25:11  34  ,g29
20:25:11  35  ,g30
20:25:11  36  ,g31
20:25:11  37  ,g32
20:25:11  38  ,g33
20:25:11  39  ,g34
20:25:11  40  ,g35
20:25:11  41  ,g36
20:25:11  42  ,g37
20:25:11  43  ,g38
20:25:11  44  ,g39
20:25:11  45  ,g40
20:25:11  46  ,g41
20:25:11  47  FROM modsrc
20:25:11  48  WHERE ydate = '&1'||' '||'&2'
20:25:11  49  AND pair = '&3'
20:25:11  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-10-25'||' '||'12:40:01'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:25:11 SQL> 
20:25:11 SQL> -- rpt
20:25:11 SQL> -- We should see just 1 row:
20:25:11 SQL> 
20:25:11 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.02
20:25:11 SQL> 
20:25:11 SQL> -- Build the model:
20:25:11 SQL> CREATE OR REPLACE VIEW bme AS
20:25:11   2  SELECT
20:25:11   3  prdate
20:25:11   4  ,gatt
20:25:11   5  ,g00
20:25:11   6  ,g01
20:25:11   7  ,g02
20:25:11   8  ,g03
20:25:11   9  ,g04
20:25:11  10  ,g05
20:25:11  11  ,g06
20:25:11  12  ,g07
20:25:11  13  ,g08
20:25:11  14  ,g09
20:25:11  15  ,g10
20:25:11  16  ,g11
20:25:11  17  ,g12
20:25:11  18  ,g13
20:25:11  19  ,g14
20:25:11  20  ,g15
20:25:11  21  ,g16
20:25:11  22  ,g17
20:25:11  23  ,g18
20:25:11  24  ,g19
20:25:11  25  ,g20
20:25:11  26  ,g21
20:25:11  27  ,g22
20:25:11  28  ,g23
20:25:11  29  ,g24
20:25:11  30  ,g25
20:25:11  31  ,g26
20:25:11  32  ,g27
20:25:11  33  ,g28
20:25:11  34  ,g29
20:25:11  35  ,g30
20:25:11  36  ,g31
20:25:11  37  ,g32
20:25:11  38  ,g33
20:25:11  39  ,g34
20:25:11  40  ,g35
20:25:11  41  ,g36
20:25:11  42  ,g37
20:25:11  43  ,g38
20:25:11  44  ,g39
20:25:11  45  ,g40
20:25:11  46  ,g41
20:25:11  47  FROM modsrc
20:25:11  48  WHERE gatt IN('nup','up')
20:25:11  49  -- Use only rows which are older than 1 day:
20:25:11  50  AND 1+ydate < '&1'||' '||'&2'
20:25:11  51  AND pair = '&3'
20:25:11  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-10-25'||' '||'12:40:01'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.06
20:25:11 SQL> 
20:25:11 SQL> -- rpt
20:25:11 SQL> 
20:25:11 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt;

GAT COUNT(PRDATE)
--- -------------
nup	     2154
up	     1634

Elapsed: 00:00:00.03
20:25:11 SQL> 
20:25:11 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-10-22 21:50:01

Elapsed: 00:00:00.01
20:25:11 SQL> 
20:25:11 SQL> -- Now build model from bme and score sme
20:25:11 SQL> @score1.sql gatt
20:25:11 SQL> --
20:25:11 SQL> -- score1.sql
20:25:11 SQL> --
20:25:11 SQL> 
20:25:11 SQL> -- I use this script to send 5 params to score.sql
20:25:11 SQL> -- which does the heavy lifting of creating an SVM model.
20:25:11 SQL> -- Then at the very end of this script I use the model
20:25:11 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:25:11 SQL> 
20:25:11 SQL> -- I call this script from 2 other scripts:
20:25:11 SQL> -- score1_5min.sql
20:25:11 SQL> -- score1_5min_gattn.sql
20:25:11 SQL> 
20:25:11 SQL> -- The 1st param is the name of the target attribute.
20:25:11 SQL> -- I like to call my target attributes either gatt or gattn.
20:25:11 SQL> 
20:25:11 SQL> -- Demo:
20:25:11 SQL> -- @score1.sql 'gatt'
20:25:11 SQL> -- @score1.sql 'gattn'
20:25:11 SQL> 
20:25:11 SQL> -- Now, I fill up svmc_apply_prep.
20:25:11 SQL> -- I use same model_name used in score.sql
20:25:11 SQL> DEFINE model_name = 'svmfx101'
20:25:11 SQL> DEFINE bldtable	= 'bme'
20:25:11 SQL> DEFINE scoretable = 'sme'
20:25:11 SQL> DEFINE case_id	= 'prdate'
20:25:11 SQL> -- Demo:
20:25:11 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:25:11 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:25:11 SQL> --
20:25:11 SQL> -- score.sql
20:25:11 SQL> --
20:25:11 SQL> 
20:25:11 SQL> -- usage: score.sql
20:25:11 SQL> 
20:25:11 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:25:11 SQL> 
20:25:11 SQL> -- DEFINE target	   = 'gatt'
20:25:11 SQL> -- DEFINE model_name = 'svmfx101'
20:25:11 SQL> -- DEFINE bldtable   = 'bme'
20:25:11 SQL> -- DEFINE scoretable = 'sme'
20:25:11 SQL> -- DEFINE case_id    = 'prdate'
20:25:11 SQL> 
20:25:11 SQL> DEFINE target	= '&1'
20:25:11 SQL> DEFINE model_name = '&2'
20:25:11 SQL> DEFINE bldtable	= '&3'
20:25:11 SQL> DEFINE scoretable = '&4'
20:25:11 SQL> DEFINE case_id	= '&5'
20:25:11 SQL> 
20:25:11 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:25:11 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:25:11 SQL> 
20:25:11 SQL> -- Builds an SVM model using pl/sql.
20:25:11 SQL> 
20:25:11 SQL> -----------------------------------------------------------------------
20:25:11 SQL> --			    BUILD THE MODEL
20:25:11 SQL> -----------------------------------------------------------------------
20:25:11 SQL> 
20:25:11 SQL> -- Cleanup old build data preparation objects for repeat runs
20:25:11 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.00
20:25:11 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:25:11 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:25:11 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.01
20:25:11 SQL> 
20:25:11 SQL> 
20:25:11 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:25:11 SQL> --
20:25:11 SQL> -- DROP	TABLE svmc_settings ;
20:25:11 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:25:11 SQL> -- DELETE svmc_settings;
20:25:11 SQL> 
20:25:11 SQL> -- The default classification algorithm is Naive Bayes. So override
20:25:11 SQL> -- this choice to SVM using a settings table.
20:25:11 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:25:11 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:25:11 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:25:11 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:25:11 SQL> -- models.
20:25:11 SQL> --
20:25:11 SQL> 
20:25:11 SQL> -- Do this once and then comment it out.
20:25:11 SQL> -- That makes script go faster.
20:25:11 SQL> -- BEGIN
20:25:11 SQL> -- -- Populate settings table
20:25:11 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:25:11 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:25:11 SQL> --
20:25:11 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:25:11 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:25:11 SQL> --
20:25:11 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:25:11 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:25:11 SQL> --   COMMIT;
20:25:11 SQL> -- END;
20:25:11 SQL> -- /
20:25:11 SQL> 
20:25:11 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:25:11 SQL> 
20:25:11 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:25:11   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:25:11   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:25:12 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:25:12   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:25:12   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:25:12 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:25:12   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:25:12   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:25:12 SQL> 
20:25:12 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:25:12   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:25:12   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:25:12 SQL> 
20:25:12 SQL> --------------------------------
20:25:12 SQL> -- PREPARE BUILD (TRAINING) DATA
20:25:12 SQL> --
20:25:12 SQL> 
20:25:12 SQL> -- 1. Missing Value treatment for all Predictors and
20:25:12 SQL> -- 2. Outlier Treatment and
20:25:12 SQL> -- 3. Normalization are performed below.
20:25:12 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:25:12 SQL> --    normalized here.
20:25:12 SQL> 
20:25:12 SQL> BEGIN
20:25:12   2  	-- Perform missing value treatment for all predictors
20:25:12   3  	-- create miss tables
20:25:12   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:25:12   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:25:12   6  
20:25:12   7  	-- populate miss tables
20:25:12   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:25:12   9  	  miss_table_name => 'svmc_miss_num',
20:25:12  10  	  data_table_name => '&bldtable',
20:25:12  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:25:12  12  
20:25:12  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:25:12  14  	  miss_table_name => 'svmc_miss_cat',
20:25:12  15  	  data_table_name => '&bldtable',
20:25:12  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:25:12  17  
20:25:12  18  	-- xform input data to replace missing values
20:25:12  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:25:12  20  	  miss_table_name => 'svmc_miss_num',
20:25:12  21  	  data_table_name => '&bldtable',
20:25:12  22  	  xform_view_name => 'xformed_build_miss_num');
20:25:12  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:25:12  24  	  miss_table_name => 'svmc_miss_cat',
20:25:12  25  	  data_table_name => '&bldtable',
20:25:12  26  	  xform_view_name => 'xformed_build_miss_cat');
20:25:12  27  
20:25:12  28  	-- Perform outlier treatment.
20:25:12  29  	-- create clip table
20:25:12  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:25:12  31  
20:25:12  32  	-- populate clip table
20:25:12  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:25:12  34  	  clip_table_name => 'svmc_clip',
20:25:12  35  	  data_table_name => '&bldtable',
20:25:12  36  	  tail_frac	  => 0.025,
20:25:12  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:25:12  38  
20:25:12  39  	-- xform input data to winsorized data
20:25:12  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:25:12  41  	  clip_table_name => 'svmc_clip',
20:25:12  42  	  data_table_name => '&bldtable',
20:25:12  43  	  xform_view_name => 'svmc_winsor');
20:25:12  44  
20:25:12  45  	-- create normalization table
20:25:12  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:25:12  47  
20:25:12  48  	-- populate normalization table based on winsorized data
20:25:12  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:25:12  50  	  norm_table_name => 'svmc_norm',
20:25:12  51  	  data_table_name => 'svmc_winsor',
20:25:12  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:25:12  53  
20:25:12  54  	-- normalize the original data
20:25:12  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:25:12  56  	  norm_table_name => 'svmc_norm',
20:25:12  57  	  data_table_name => '&bldtable',
20:25:12  58  	  xform_view_name => 'svmc_build_prep');
20:25:12  59  END;
20:25:12  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.20
20:25:13 SQL> 
20:25:13 SQL> ---------------------
20:25:13 SQL> -- CREATE A NEW MODEL
20:25:13 SQL> --
20:25:13 SQL> -- Cleanup old model with the same name for repeat runs
20:25:13 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:25:13   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:25:13   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.99
20:25:14 SQL> 
20:25:14 SQL> -- Build a new SVM Model
20:25:14 SQL> BEGIN
20:25:14   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:25:14   3  	  model_name	      => '&model_name',
20:25:14   4  	  mining_function     => dbms_data_mining.classification,
20:25:14   5  	  data_table_name     => 'svmc_build_prep',
20:25:14   6  	  case_id_column_name => '&case_id',
20:25:14   7  	  target_column_name  => '&target',
20:25:14   8  	  settings_table_name => 'svmc_settings');
20:25:14   9  END;
20:25:14  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:02.71
20:25:17 SQL> 
20:25:17 SQL> -----------------------------------------------------------------------
20:25:17 SQL> --			       APPLY/score THE MODEL
20:25:17 SQL> -----------------------------------------------------------------------
20:25:17 SQL> 
20:25:17 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:25:17 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:25:17   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:25:17   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:25:17 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:25:17   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:25:17   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:25:17 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:25:17   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:25:17   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:25:17 SQL> -----------------------
20:25:17 SQL> -- PREPARE SCORING DATA
20:25:17 SQL> --
20:25:17 SQL> -- If the data for model creation has been prepared, then the data
20:25:17 SQL> -- to be scored using the model must be prepared in the same manner
20:25:17 SQL> -- in order to obtain meaningful results.
20:25:17 SQL> --
20:25:17 SQL> -- 1. Missing Value treatment for all Predictors and
20:25:17 SQL> -- 2. Normalization
20:25:17 SQL> -- No outlier treatment will be performed during test and apply. The
20:25:17 SQL> -- normalization step is sufficient, since the normalization parameters
20:25:17 SQL> -- already capture the effects of outlier treatment done with build data.
20:25:17 SQL> --
20:25:17 SQL> BEGIN
20:25:17   2  	-- Xform Test data to replace missing values
20:25:17   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:25:17   4  	  miss_table_name => 'svmc_miss_num',
20:25:17   5  	  data_table_name => '&scoretable',
20:25:17   6  	  xform_view_name => 'xformed_apply_miss_num');
20:25:17   7  
20:25:17   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:25:17   9  	  miss_table_name => 'svmc_miss_cat',
20:25:17  10  	  data_table_name => '&scoretable',
20:25:17  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:25:17  12  
20:25:17  13  	-- Normalize the data to be scored
20:25:17  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:25:17  15  	  norm_table_name => 'svmc_norm',
20:25:17  16  	  data_table_name => '&scoretable',
20:25:17  17  	  xform_view_name => 'svmc_apply_prep');
20:25:17  18  END;
20:25:17  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.18
20:25:17 SQL> 
20:25:17 SQL> -- Maybe I already collected a score for this prdate.
20:25:17 SQL> -- DELETE it if I did:
20:25:17 SQL> DELETE svm62scores
20:25:17   2  WHERE score > 0
20:25:17   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:25:17   4  -- I need to supply the target attribute name:
20:25:17   5  AND targ = '&1'
20:25:17   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gatt'

0 rows deleted.

Elapsed: 00:00:00.02
20:25:17 SQL> 
20:25:17 SQL> -- We do a drumroll here:
20:25:17 SQL> 
20:25:17 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:25:17   2  SELECT
20:25:17   3  prdate
20:25:17   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:25:17   5  ,sysdate
20:25:17   6  ,SUBSTR(prdate,1,7)pair
20:25:17   7  ,SUBSTR(prdate,-19)ydate
20:25:17   8  ,'&1'
20:25:17   9  FROM svmc_apply_prep
20:25:17  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gatt'

1 row created.

Elapsed: 00:00:00.05
20:25:17 SQL> @score1_5min_gattn.sql	2010-10-06 10:10:01 aud_usd
20:25:17 SQL> --
20:25:17 SQL> -- score1_5min_gattn.sql
20:25:17 SQL> --
20:25:17 SQL> 
20:25:17 SQL> -- Demo:
20:25:17 SQL> -- @score1_5min_gattn.sql 2010-12-31 20:45:01 aud_usd
20:25:17 SQL> 
20:25:17 SQL> CREATE OR REPLACE VIEW sme AS
20:25:17   2  SELECT
20:25:17   3  prdate
20:25:17   4  ,NULL gattn
20:25:17   5  ,g00
20:25:17   6  ,g01
20:25:17   7  ,g02
20:25:17   8  ,g03
20:25:17   9  ,g04
20:25:17  10  ,g05
20:25:17  11  ,g06
20:25:17  12  ,g07
20:25:17  13  ,g08
20:25:17  14  ,g09
20:25:17  15  ,g10
20:25:17  16  ,g11
20:25:17  17  ,g12
20:25:17  18  ,g13
20:25:17  19  ,g14
20:25:17  20  ,g15
20:25:17  21  ,g16
20:25:17  22  ,g17
20:25:17  23  ,g18
20:25:17  24  ,g19
20:25:17  25  ,g20
20:25:17  26  ,g21
20:25:17  27  ,g22
20:25:17  28  ,g23
20:25:17  29  ,g24
20:25:17  30  ,g25
20:25:17  31  ,g26
20:25:17  32  ,g27
20:25:17  33  ,g28
20:25:17  34  ,g29
20:25:17  35  ,g30
20:25:17  36  ,g31
20:25:17  37  ,g32
20:25:17  38  ,g33
20:25:17  39  ,g34
20:25:17  40  ,g35
20:25:17  41  ,g36
20:25:17  42  ,g37
20:25:17  43  ,g38
20:25:17  44  ,g39
20:25:17  45  ,g40
20:25:17  46  ,g41
20:25:17  47  FROM modsrc
20:25:17  48  WHERE ydate = '&1'||' '||'&2'
20:25:17  49  AND pair = '&3'
20:25:17  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-10-06'||' '||'10:10:01'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:25:17 SQL> 
20:25:17 SQL> -- rpt
20:25:17 SQL> -- We should see just 1 row:
20:25:17 SQL> 
20:25:17 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.01
20:25:17 SQL> 
20:25:17 SQL> -- Build the model:
20:25:17 SQL> CREATE OR REPLACE VIEW bme AS
20:25:17   2  SELECT
20:25:17   3  prdate
20:25:17   4  ,gattn
20:25:17   5  ,g00
20:25:17   6  ,g01
20:25:17   7  ,g02
20:25:17   8  ,g03
20:25:17   9  ,g04
20:25:17  10  ,g05
20:25:17  11  ,g06
20:25:17  12  ,g07
20:25:17  13  ,g08
20:25:17  14  ,g09
20:25:17  15  ,g10
20:25:17  16  ,g11
20:25:17  17  ,g12
20:25:17  18  ,g13
20:25:17  19  ,g14
20:25:17  20  ,g15
20:25:17  21  ,g16
20:25:17  22  ,g17
20:25:17  23  ,g18
20:25:17  24  ,g19
20:25:17  25  ,g20
20:25:17  26  ,g21
20:25:17  27  ,g22
20:25:17  28  ,g23
20:25:17  29  ,g24
20:25:17  30  ,g25
20:25:17  31  ,g26
20:25:17  32  ,g27
20:25:17  33  ,g28
20:25:17  34  ,g29
20:25:17  35  ,g30
20:25:17  36  ,g31
20:25:17  37  ,g32
20:25:17  38  ,g33
20:25:17  39  ,g34
20:25:17  40  ,g35
20:25:17  41  ,g36
20:25:17  42  ,g37
20:25:17  43  ,g38
20:25:17  44  ,g39
20:25:17  45  ,g40
20:25:17  46  ,g41
20:25:17  47  FROM modsrc
20:25:17  48  WHERE gattn IN('nup','up')
20:25:17  49  -- Use only rows which are older than 1 day:
20:25:17  50  AND 1+ydate < '&1'||' '||'&2'
20:25:17  51  AND pair = '&3'
20:25:17  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-10-06'||' '||'10:10:01'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.05
20:25:17 SQL> 
20:25:17 SQL> -- rpt
20:25:17 SQL> 
20:25:17 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

no rows selected

Elapsed: 00:00:00.02
20:25:17 SQL> 
20:25:17 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------


Elapsed: 00:00:00.01
20:25:17 SQL> 
20:25:17 SQL> -- Now build model from bme and score sme
20:25:17 SQL> @score1.sql gattn
20:25:17 SQL> --
20:25:17 SQL> -- score1.sql
20:25:17 SQL> --
20:25:17 SQL> 
20:25:17 SQL> -- I use this script to send 5 params to score.sql
20:25:17 SQL> -- which does the heavy lifting of creating an SVM model.
20:25:17 SQL> -- Then at the very end of this script I use the model
20:25:17 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:25:17 SQL> 
20:25:17 SQL> -- I call this script from 2 other scripts:
20:25:17 SQL> -- score1_5min.sql
20:25:17 SQL> -- score1_5min_gattn.sql
20:25:17 SQL> 
20:25:17 SQL> -- The 1st param is the name of the target attribute.
20:25:17 SQL> -- I like to call my target attributes either gatt or gattn.
20:25:17 SQL> 
20:25:17 SQL> -- Demo:
20:25:17 SQL> -- @score1.sql 'gatt'
20:25:17 SQL> -- @score1.sql 'gattn'
20:25:17 SQL> 
20:25:17 SQL> -- Now, I fill up svmc_apply_prep.
20:25:17 SQL> -- I use same model_name used in score.sql
20:25:17 SQL> DEFINE model_name = 'svmfx101'
20:25:17 SQL> DEFINE bldtable	= 'bme'
20:25:17 SQL> DEFINE scoretable = 'sme'
20:25:17 SQL> DEFINE case_id	= 'prdate'
20:25:17 SQL> -- Demo:
20:25:17 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:25:17 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:25:17 SQL> --
20:25:17 SQL> -- score.sql
20:25:17 SQL> --
20:25:17 SQL> 
20:25:17 SQL> -- usage: score.sql
20:25:17 SQL> 
20:25:17 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:25:17 SQL> 
20:25:17 SQL> -- DEFINE target	   = 'gatt'
20:25:17 SQL> -- DEFINE model_name = 'svmfx101'
20:25:17 SQL> -- DEFINE bldtable   = 'bme'
20:25:17 SQL> -- DEFINE scoretable = 'sme'
20:25:17 SQL> -- DEFINE case_id    = 'prdate'
20:25:17 SQL> 
20:25:17 SQL> DEFINE target	= '&1'
20:25:17 SQL> DEFINE model_name = '&2'
20:25:17 SQL> DEFINE bldtable	= '&3'
20:25:17 SQL> DEFINE scoretable = '&4'
20:25:17 SQL> DEFINE case_id	= '&5'
20:25:17 SQL> 
20:25:17 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:25:17 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:25:17 SQL> 
20:25:17 SQL> -- Builds an SVM model using pl/sql.
20:25:17 SQL> 
20:25:17 SQL> -----------------------------------------------------------------------
20:25:17 SQL> --			    BUILD THE MODEL
20:25:17 SQL> -----------------------------------------------------------------------
20:25:17 SQL> 
20:25:17 SQL> -- Cleanup old build data preparation objects for repeat runs
20:25:17 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.00
20:25:17 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:25:17 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:25:17 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.01
20:25:17 SQL> 
20:25:17 SQL> 
20:25:17 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:25:17 SQL> --
20:25:17 SQL> -- DROP	TABLE svmc_settings ;
20:25:17 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:25:17 SQL> -- DELETE svmc_settings;
20:25:17 SQL> 
20:25:17 SQL> -- The default classification algorithm is Naive Bayes. So override
20:25:17 SQL> -- this choice to SVM using a settings table.
20:25:17 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:25:17 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:25:17 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:25:17 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:25:17 SQL> -- models.
20:25:17 SQL> --
20:25:17 SQL> 
20:25:17 SQL> -- Do this once and then comment it out.
20:25:17 SQL> -- That makes script go faster.
20:25:17 SQL> -- BEGIN
20:25:17 SQL> -- -- Populate settings table
20:25:17 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:25:17 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:25:17 SQL> --
20:25:17 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:25:17 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:25:17 SQL> --
20:25:17 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:25:17 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:25:17 SQL> --   COMMIT;
20:25:17 SQL> -- END;
20:25:17 SQL> -- /
20:25:17 SQL> 
20:25:17 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:25:17 SQL> 
20:25:17 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:25:17   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:25:17   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:25:17 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:25:17   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:25:17   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:25:17 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:25:17   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:25:17   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:25:17 SQL> 
20:25:17 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:25:17   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:25:17   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:25:17 SQL> 
20:25:17 SQL> --------------------------------
20:25:17 SQL> -- PREPARE BUILD (TRAINING) DATA
20:25:17 SQL> --
20:25:17 SQL> 
20:25:17 SQL> -- 1. Missing Value treatment for all Predictors and
20:25:17 SQL> -- 2. Outlier Treatment and
20:25:17 SQL> -- 3. Normalization are performed below.
20:25:17 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:25:17 SQL> --    normalized here.
20:25:17 SQL> 
20:25:17 SQL> BEGIN
20:25:17   2  	-- Perform missing value treatment for all predictors
20:25:17   3  	-- create miss tables
20:25:17   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:25:17   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:25:17   6  
20:25:17   7  	-- populate miss tables
20:25:17   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:25:17   9  	  miss_table_name => 'svmc_miss_num',
20:25:17  10  	  data_table_name => '&bldtable',
20:25:17  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:25:17  12  
20:25:17  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:25:17  14  	  miss_table_name => 'svmc_miss_cat',
20:25:17  15  	  data_table_name => '&bldtable',
20:25:17  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:25:17  17  
20:25:17  18  	-- xform input data to replace missing values
20:25:17  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:25:17  20  	  miss_table_name => 'svmc_miss_num',
20:25:17  21  	  data_table_name => '&bldtable',
20:25:17  22  	  xform_view_name => 'xformed_build_miss_num');
20:25:17  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:25:17  24  	  miss_table_name => 'svmc_miss_cat',
20:25:17  25  	  data_table_name => '&bldtable',
20:25:17  26  	  xform_view_name => 'xformed_build_miss_cat');
20:25:17  27  
20:25:17  28  	-- Perform outlier treatment.
20:25:17  29  	-- create clip table
20:25:17  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:25:17  31  
20:25:17  32  	-- populate clip table
20:25:17  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:25:17  34  	  clip_table_name => 'svmc_clip',
20:25:17  35  	  data_table_name => '&bldtable',
20:25:17  36  	  tail_frac	  => 0.025,
20:25:17  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:25:17  38  
20:25:17  39  	-- xform input data to winsorized data
20:25:17  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:25:17  41  	  clip_table_name => 'svmc_clip',
20:25:17  42  	  data_table_name => '&bldtable',
20:25:17  43  	  xform_view_name => 'svmc_winsor');
20:25:17  44  
20:25:17  45  	-- create normalization table
20:25:17  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:25:17  47  
20:25:17  48  	-- populate normalization table based on winsorized data
20:25:17  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:25:17  50  	  norm_table_name => 'svmc_norm',
20:25:17  51  	  data_table_name => 'svmc_winsor',
20:25:17  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:25:17  53  
20:25:17  54  	-- normalize the original data
20:25:17  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:25:17  56  	  norm_table_name => 'svmc_norm',
20:25:17  57  	  data_table_name => '&bldtable',
20:25:17  58  	  xform_view_name => 'svmc_build_prep');
20:25:17  59  END;
20:25:17  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.70
20:25:18 SQL> 
20:25:18 SQL> ---------------------
20:25:18 SQL> -- CREATE A NEW MODEL
20:25:18 SQL> --
20:25:18 SQL> -- Cleanup old model with the same name for repeat runs
20:25:18 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:25:18   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:25:18   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.98
20:25:19 SQL> 
20:25:19 SQL> -- Build a new SVM Model
20:25:19 SQL> BEGIN
20:25:19   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:25:19   3  	  model_name	      => '&model_name',
20:25:19   4  	  mining_function     => dbms_data_mining.classification,
20:25:19   5  	  data_table_name     => 'svmc_build_prep',
20:25:19   6  	  case_id_column_name => '&case_id',
20:25:19   7  	  target_column_name  => '&target',
20:25:19   8  	  settings_table_name => 'svmc_settings');
20:25:19   9  END;
20:25:19  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',
BEGIN
*
ERROR at line 1:
ORA-40112: insufficient number of valid data rows
ORA-06512: at "SYS.DBMS_DATA_MINING", line 1779
ORA-06512: at line 2


Elapsed: 00:00:00.46
20:25:19 SQL> 
20:25:19 SQL> -----------------------------------------------------------------------
20:25:19 SQL> --			       APPLY/score THE MODEL
20:25:19 SQL> -----------------------------------------------------------------------
20:25:19 SQL> 
20:25:19 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:25:19 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:25:19   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:25:19   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:25:19 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:25:19   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:25:19   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:25:19 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:25:19   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:25:19   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:25:19 SQL> -----------------------
20:25:19 SQL> -- PREPARE SCORING DATA
20:25:19 SQL> --
20:25:19 SQL> -- If the data for model creation has been prepared, then the data
20:25:19 SQL> -- to be scored using the model must be prepared in the same manner
20:25:19 SQL> -- in order to obtain meaningful results.
20:25:19 SQL> --
20:25:19 SQL> -- 1. Missing Value treatment for all Predictors and
20:25:19 SQL> -- 2. Normalization
20:25:19 SQL> -- No outlier treatment will be performed during test and apply. The
20:25:19 SQL> -- normalization step is sufficient, since the normalization parameters
20:25:19 SQL> -- already capture the effects of outlier treatment done with build data.
20:25:19 SQL> --
20:25:19 SQL> BEGIN
20:25:19   2  	-- Xform Test data to replace missing values
20:25:19   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:25:19   4  	  miss_table_name => 'svmc_miss_num',
20:25:19   5  	  data_table_name => '&scoretable',
20:25:19   6  	  xform_view_name => 'xformed_apply_miss_num');
20:25:19   7  
20:25:19   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:25:19   9  	  miss_table_name => 'svmc_miss_cat',
20:25:19  10  	  data_table_name => '&scoretable',
20:25:19  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:25:19  12  
20:25:19  13  	-- Normalize the data to be scored
20:25:19  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:25:19  15  	  norm_table_name => 'svmc_norm',
20:25:19  16  	  data_table_name => '&scoretable',
20:25:19  17  	  xform_view_name => 'svmc_apply_prep');
20:25:19  18  END;
20:25:19  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.09
20:25:20 SQL> 
20:25:20 SQL> -- Maybe I already collected a score for this prdate.
20:25:20 SQL> -- DELETE it if I did:
20:25:20 SQL> DELETE svm62scores
20:25:20   2  WHERE score > 0
20:25:20   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:25:20   4  -- I need to supply the target attribute name:
20:25:20   5  AND targ = '&1'
20:25:20   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gattn'

0 rows deleted.

Elapsed: 00:00:00.02
20:25:20 SQL> 
20:25:20 SQL> -- We do a drumroll here:
20:25:20 SQL> 
20:25:20 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:25:20   2  SELECT
20:25:20   3  prdate
20:25:20   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:25:20   5  ,sysdate
20:25:20   6  ,SUBSTR(prdate,1,7)pair
20:25:20   7  ,SUBSTR(prdate,-19)ydate
20:25:20   8  ,'&1'
20:25:20   9  FROM svmc_apply_prep
20:25:20  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gattn'
FROM svmc_apply_prep
                   *
ERROR at line 9:
ORA-40284: model does not exist


Elapsed: 00:00:00.01
20:25:20 SQL> @score1_5min.sql	      2010-10-29 00:10:01 aud_usd
20:25:20 SQL> --
20:25:20 SQL> -- score1_5min.sql
20:25:20 SQL> --
20:25:20 SQL> 
20:25:20 SQL> -- Demo:
20:25:20 SQL> -- @score1_5min.sql 2010-12-31 20:45:01 aud_usd
20:25:20 SQL> 
20:25:20 SQL> CREATE OR REPLACE VIEW sme AS
20:25:20   2  SELECT
20:25:20   3  prdate
20:25:20   4  ,NULL gatt
20:25:20   5  ,g00
20:25:20   6  ,g01
20:25:20   7  ,g02
20:25:20   8  ,g03
20:25:20   9  ,g04
20:25:20  10  ,g05
20:25:20  11  ,g06
20:25:20  12  ,g07
20:25:20  13  ,g08
20:25:20  14  ,g09
20:25:20  15  ,g10
20:25:20  16  ,g11
20:25:20  17  ,g12
20:25:20  18  ,g13
20:25:20  19  ,g14
20:25:20  20  ,g15
20:25:20  21  ,g16
20:25:20  22  ,g17
20:25:20  23  ,g18
20:25:20  24  ,g19
20:25:20  25  ,g20
20:25:20  26  ,g21
20:25:20  27  ,g22
20:25:20  28  ,g23
20:25:20  29  ,g24
20:25:20  30  ,g25
20:25:20  31  ,g26
20:25:20  32  ,g27
20:25:20  33  ,g28
20:25:20  34  ,g29
20:25:20  35  ,g30
20:25:20  36  ,g31
20:25:20  37  ,g32
20:25:20  38  ,g33
20:25:20  39  ,g34
20:25:20  40  ,g35
20:25:20  41  ,g36
20:25:20  42  ,g37
20:25:20  43  ,g38
20:25:20  44  ,g39
20:25:20  45  ,g40
20:25:20  46  ,g41
20:25:20  47  FROM modsrc
20:25:20  48  WHERE ydate = '&1'||' '||'&2'
20:25:20  49  AND pair = '&3'
20:25:20  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-10-29'||' '||'00:10:01'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:25:20 SQL> 
20:25:20 SQL> -- rpt
20:25:20 SQL> -- We should see just 1 row:
20:25:20 SQL> 
20:25:20 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.02
20:25:20 SQL> 
20:25:20 SQL> -- Build the model:
20:25:20 SQL> CREATE OR REPLACE VIEW bme AS
20:25:20   2  SELECT
20:25:20   3  prdate
20:25:20   4  ,gatt
20:25:20   5  ,g00
20:25:20   6  ,g01
20:25:20   7  ,g02
20:25:20   8  ,g03
20:25:20   9  ,g04
20:25:20  10  ,g05
20:25:20  11  ,g06
20:25:20  12  ,g07
20:25:20  13  ,g08
20:25:20  14  ,g09
20:25:20  15  ,g10
20:25:20  16  ,g11
20:25:20  17  ,g12
20:25:20  18  ,g13
20:25:20  19  ,g14
20:25:20  20  ,g15
20:25:20  21  ,g16
20:25:20  22  ,g17
20:25:20  23  ,g18
20:25:20  24  ,g19
20:25:20  25  ,g20
20:25:20  26  ,g21
20:25:20  27  ,g22
20:25:20  28  ,g23
20:25:20  29  ,g24
20:25:20  30  ,g25
20:25:20  31  ,g26
20:25:20  32  ,g27
20:25:20  33  ,g28
20:25:20  34  ,g29
20:25:20  35  ,g30
20:25:20  36  ,g31
20:25:20  37  ,g32
20:25:20  38  ,g33
20:25:20  39  ,g34
20:25:20  40  ,g35
20:25:20  41  ,g36
20:25:20  42  ,g37
20:25:20  43  ,g38
20:25:20  44  ,g39
20:25:20  45  ,g40
20:25:20  46  ,g41
20:25:20  47  FROM modsrc
20:25:20  48  WHERE gatt IN('nup','up')
20:25:20  49  -- Use only rows which are older than 1 day:
20:25:20  50  AND 1+ydate < '&1'||' '||'&2'
20:25:20  51  AND pair = '&3'
20:25:20  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-10-29'||' '||'00:10:01'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:25:20 SQL> 
20:25:20 SQL> -- rpt
20:25:20 SQL> 
20:25:20 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt;

GAT COUNT(PRDATE)
--- -------------
nup	     2795
up	     1896

Elapsed: 00:00:00.03
20:25:20 SQL> 
20:25:20 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-10-28 00:05:01

Elapsed: 00:00:00.01
20:25:20 SQL> 
20:25:20 SQL> -- Now build model from bme and score sme
20:25:20 SQL> @score1.sql gatt
20:25:20 SQL> --
20:25:20 SQL> -- score1.sql
20:25:20 SQL> --
20:25:20 SQL> 
20:25:20 SQL> -- I use this script to send 5 params to score.sql
20:25:20 SQL> -- which does the heavy lifting of creating an SVM model.
20:25:20 SQL> -- Then at the very end of this script I use the model
20:25:20 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:25:20 SQL> 
20:25:20 SQL> -- I call this script from 2 other scripts:
20:25:20 SQL> -- score1_5min.sql
20:25:20 SQL> -- score1_5min_gattn.sql
20:25:20 SQL> 
20:25:20 SQL> -- The 1st param is the name of the target attribute.
20:25:20 SQL> -- I like to call my target attributes either gatt or gattn.
20:25:20 SQL> 
20:25:20 SQL> -- Demo:
20:25:20 SQL> -- @score1.sql 'gatt'
20:25:20 SQL> -- @score1.sql 'gattn'
20:25:20 SQL> 
20:25:20 SQL> -- Now, I fill up svmc_apply_prep.
20:25:20 SQL> -- I use same model_name used in score.sql
20:25:20 SQL> DEFINE model_name = 'svmfx101'
20:25:20 SQL> DEFINE bldtable	= 'bme'
20:25:20 SQL> DEFINE scoretable = 'sme'
20:25:20 SQL> DEFINE case_id	= 'prdate'
20:25:20 SQL> -- Demo:
20:25:20 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:25:20 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:25:20 SQL> --
20:25:20 SQL> -- score.sql
20:25:20 SQL> --
20:25:20 SQL> 
20:25:20 SQL> -- usage: score.sql
20:25:20 SQL> 
20:25:20 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:25:20 SQL> 
20:25:20 SQL> -- DEFINE target	   = 'gatt'
20:25:20 SQL> -- DEFINE model_name = 'svmfx101'
20:25:20 SQL> -- DEFINE bldtable   = 'bme'
20:25:20 SQL> -- DEFINE scoretable = 'sme'
20:25:20 SQL> -- DEFINE case_id    = 'prdate'
20:25:20 SQL> 
20:25:20 SQL> DEFINE target	= '&1'
20:25:20 SQL> DEFINE model_name = '&2'
20:25:20 SQL> DEFINE bldtable	= '&3'
20:25:20 SQL> DEFINE scoretable = '&4'
20:25:20 SQL> DEFINE case_id	= '&5'
20:25:20 SQL> 
20:25:20 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:25:20 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:25:20 SQL> 
20:25:20 SQL> -- Builds an SVM model using pl/sql.
20:25:20 SQL> 
20:25:20 SQL> -----------------------------------------------------------------------
20:25:20 SQL> --			    BUILD THE MODEL
20:25:20 SQL> -----------------------------------------------------------------------
20:25:20 SQL> 
20:25:20 SQL> -- Cleanup old build data preparation objects for repeat runs
20:25:20 SQL> DELETE svmc_miss_num;

0 rows deleted.

Elapsed: 00:00:00.00
20:25:20 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:25:20 SQL> DELETE svmc_clip;

0 rows deleted.

Elapsed: 00:00:00.00
20:25:20 SQL> DELETE svmc_norm;

0 rows deleted.

Elapsed: 00:00:00.01
20:25:20 SQL> 
20:25:20 SQL> 
20:25:20 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:25:20 SQL> --
20:25:20 SQL> -- DROP	TABLE svmc_settings ;
20:25:20 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:25:20 SQL> -- DELETE svmc_settings;
20:25:20 SQL> 
20:25:20 SQL> -- The default classification algorithm is Naive Bayes. So override
20:25:20 SQL> -- this choice to SVM using a settings table.
20:25:20 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:25:20 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:25:20 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:25:20 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:25:20 SQL> -- models.
20:25:20 SQL> --
20:25:20 SQL> 
20:25:20 SQL> -- Do this once and then comment it out.
20:25:20 SQL> -- That makes script go faster.
20:25:20 SQL> -- BEGIN
20:25:20 SQL> -- -- Populate settings table
20:25:20 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:25:20 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:25:20 SQL> --
20:25:20 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:25:20 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:25:20 SQL> --
20:25:20 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:25:20 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:25:20 SQL> --   COMMIT;
20:25:20 SQL> -- END;
20:25:20 SQL> -- /
20:25:20 SQL> 
20:25:20 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:25:20 SQL> 
20:25:20 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:25:20   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:25:20   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:25:20 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:25:20   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:25:20   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:25:20 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:25:20   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:25:20   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:25:20 SQL> 
20:25:20 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:25:20   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:25:20   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:25:20 SQL> 
20:25:20 SQL> --------------------------------
20:25:20 SQL> -- PREPARE BUILD (TRAINING) DATA
20:25:20 SQL> --
20:25:20 SQL> 
20:25:20 SQL> -- 1. Missing Value treatment for all Predictors and
20:25:20 SQL> -- 2. Outlier Treatment and
20:25:20 SQL> -- 3. Normalization are performed below.
20:25:20 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:25:20 SQL> --    normalized here.
20:25:20 SQL> 
20:25:20 SQL> BEGIN
20:25:20   2  	-- Perform missing value treatment for all predictors
20:25:20   3  	-- create miss tables
20:25:20   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:25:20   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:25:20   6  
20:25:20   7  	-- populate miss tables
20:25:20   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:25:20   9  	  miss_table_name => 'svmc_miss_num',
20:25:20  10  	  data_table_name => '&bldtable',
20:25:20  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:25:20  12  
20:25:20  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:25:20  14  	  miss_table_name => 'svmc_miss_cat',
20:25:20  15  	  data_table_name => '&bldtable',
20:25:20  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:25:20  17  
20:25:20  18  	-- xform input data to replace missing values
20:25:20  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:25:20  20  	  miss_table_name => 'svmc_miss_num',
20:25:20  21  	  data_table_name => '&bldtable',
20:25:20  22  	  xform_view_name => 'xformed_build_miss_num');
20:25:20  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:25:20  24  	  miss_table_name => 'svmc_miss_cat',
20:25:20  25  	  data_table_name => '&bldtable',
20:25:20  26  	  xform_view_name => 'xformed_build_miss_cat');
20:25:20  27  
20:25:20  28  	-- Perform outlier treatment.
20:25:20  29  	-- create clip table
20:25:20  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:25:20  31  
20:25:20  32  	-- populate clip table
20:25:20  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:25:20  34  	  clip_table_name => 'svmc_clip',
20:25:20  35  	  data_table_name => '&bldtable',
20:25:20  36  	  tail_frac	  => 0.025,
20:25:20  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:25:20  38  
20:25:20  39  	-- xform input data to winsorized data
20:25:20  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:25:20  41  	  clip_table_name => 'svmc_clip',
20:25:20  42  	  data_table_name => '&bldtable',
20:25:20  43  	  xform_view_name => 'svmc_winsor');
20:25:20  44  
20:25:20  45  	-- create normalization table
20:25:20  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:25:20  47  
20:25:20  48  	-- populate normalization table based on winsorized data
20:25:20  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:25:20  50  	  norm_table_name => 'svmc_norm',
20:25:20  51  	  data_table_name => 'svmc_winsor',
20:25:20  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:25:20  53  
20:25:20  54  	-- normalize the original data
20:25:20  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:25:20  56  	  norm_table_name => 'svmc_norm',
20:25:20  57  	  data_table_name => '&bldtable',
20:25:20  58  	  xform_view_name => 'svmc_build_prep');
20:25:20  59  END;
20:25:20  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.25
20:25:21 SQL> 
20:25:21 SQL> ---------------------
20:25:21 SQL> -- CREATE A NEW MODEL
20:25:21 SQL> --
20:25:21 SQL> -- Cleanup old model with the same name for repeat runs
20:25:21 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:25:21   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:25:21   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:25:21 SQL> 
20:25:21 SQL> -- Build a new SVM Model
20:25:21 SQL> BEGIN
20:25:21   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:25:21   3  	  model_name	      => '&model_name',
20:25:21   4  	  mining_function     => dbms_data_mining.classification,
20:25:21   5  	  data_table_name     => 'svmc_build_prep',
20:25:21   6  	  case_id_column_name => '&case_id',
20:25:21   7  	  target_column_name  => '&target',
20:25:21   8  	  settings_table_name => 'svmc_settings');
20:25:21   9  END;
20:25:21  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:03.20
20:25:24 SQL> 
20:25:24 SQL> -----------------------------------------------------------------------
20:25:24 SQL> --			       APPLY/score THE MODEL
20:25:24 SQL> -----------------------------------------------------------------------
20:25:24 SQL> 
20:25:24 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:25:24 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:25:24   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:25:24   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:25:24 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:25:24   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:25:24   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:25:24 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:25:24   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:25:24   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:25:24 SQL> -----------------------
20:25:24 SQL> -- PREPARE SCORING DATA
20:25:24 SQL> --
20:25:24 SQL> -- If the data for model creation has been prepared, then the data
20:25:24 SQL> -- to be scored using the model must be prepared in the same manner
20:25:24 SQL> -- in order to obtain meaningful results.
20:25:24 SQL> --
20:25:24 SQL> -- 1. Missing Value treatment for all Predictors and
20:25:24 SQL> -- 2. Normalization
20:25:24 SQL> -- No outlier treatment will be performed during test and apply. The
20:25:24 SQL> -- normalization step is sufficient, since the normalization parameters
20:25:24 SQL> -- already capture the effects of outlier treatment done with build data.
20:25:24 SQL> --
20:25:24 SQL> BEGIN
20:25:24   2  	-- Xform Test data to replace missing values
20:25:24   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:25:24   4  	  miss_table_name => 'svmc_miss_num',
20:25:24   5  	  data_table_name => '&scoretable',
20:25:24   6  	  xform_view_name => 'xformed_apply_miss_num');
20:25:24   7  
20:25:24   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:25:24   9  	  miss_table_name => 'svmc_miss_cat',
20:25:24  10  	  data_table_name => '&scoretable',
20:25:24  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:25:24  12  
20:25:24  13  	-- Normalize the data to be scored
20:25:24  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:25:24  15  	  norm_table_name => 'svmc_norm',
20:25:24  16  	  data_table_name => '&scoretable',
20:25:24  17  	  xform_view_name => 'svmc_apply_prep');
20:25:24  18  END;
20:25:24  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.17
20:25:25 SQL> 
20:25:25 SQL> -- Maybe I already collected a score for this prdate.
20:25:25 SQL> -- DELETE it if I did:
20:25:25 SQL> DELETE svm62scores
20:25:25   2  WHERE score > 0
20:25:25   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:25:25   4  -- I need to supply the target attribute name:
20:25:25   5  AND targ = '&1'
20:25:25   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gatt'

0 rows deleted.

Elapsed: 00:00:00.02
20:25:25 SQL> 
20:25:25 SQL> -- We do a drumroll here:
20:25:25 SQL> 
20:25:25 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:25:25   2  SELECT
20:25:25   3  prdate
20:25:25   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:25:25   5  ,sysdate
20:25:25   6  ,SUBSTR(prdate,1,7)pair
20:25:25   7  ,SUBSTR(prdate,-19)ydate
20:25:25   8  ,'&1'
20:25:25   9  FROM svmc_apply_prep
20:25:25  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gatt'

1 row created.

Elapsed: 00:00:00.05
20:25:25 SQL> @score1_5min.sql	      2010-10-14 23:10:01 aud_usd
20:25:25 SQL> --
20:25:25 SQL> -- score1_5min.sql
20:25:25 SQL> --
20:25:25 SQL> 
20:25:25 SQL> -- Demo:
20:25:25 SQL> -- @score1_5min.sql 2010-12-31 20:45:01 aud_usd
20:25:25 SQL> 
20:25:25 SQL> CREATE OR REPLACE VIEW sme AS
20:25:25   2  SELECT
20:25:25   3  prdate
20:25:25   4  ,NULL gatt
20:25:25   5  ,g00
20:25:25   6  ,g01
20:25:25   7  ,g02
20:25:25   8  ,g03
20:25:25   9  ,g04
20:25:25  10  ,g05
20:25:25  11  ,g06
20:25:25  12  ,g07
20:25:25  13  ,g08
20:25:25  14  ,g09
20:25:25  15  ,g10
20:25:25  16  ,g11
20:25:25  17  ,g12
20:25:25  18  ,g13
20:25:25  19  ,g14
20:25:25  20  ,g15
20:25:25  21  ,g16
20:25:25  22  ,g17
20:25:25  23  ,g18
20:25:25  24  ,g19
20:25:25  25  ,g20
20:25:25  26  ,g21
20:25:25  27  ,g22
20:25:25  28  ,g23
20:25:25  29  ,g24
20:25:25  30  ,g25
20:25:25  31  ,g26
20:25:25  32  ,g27
20:25:25  33  ,g28
20:25:25  34  ,g29
20:25:25  35  ,g30
20:25:25  36  ,g31
20:25:25  37  ,g32
20:25:25  38  ,g33
20:25:25  39  ,g34
20:25:25  40  ,g35
20:25:25  41  ,g36
20:25:25  42  ,g37
20:25:25  43  ,g38
20:25:25  44  ,g39
20:25:25  45  ,g40
20:25:25  46  ,g41
20:25:25  47  FROM modsrc
20:25:25  48  WHERE ydate = '&1'||' '||'&2'
20:25:25  49  AND pair = '&3'
20:25:25  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-10-14'||' '||'23:10:01'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:25:25 SQL> 
20:25:25 SQL> -- rpt
20:25:25 SQL> -- We should see just 1 row:
20:25:25 SQL> 
20:25:25 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.02
20:25:25 SQL> 
20:25:25 SQL> -- Build the model:
20:25:25 SQL> CREATE OR REPLACE VIEW bme AS
20:25:25   2  SELECT
20:25:25   3  prdate
20:25:25   4  ,gatt
20:25:25   5  ,g00
20:25:25   6  ,g01
20:25:25   7  ,g02
20:25:25   8  ,g03
20:25:25   9  ,g04
20:25:25  10  ,g05
20:25:25  11  ,g06
20:25:25  12  ,g07
20:25:25  13  ,g08
20:25:25  14  ,g09
20:25:25  15  ,g10
20:25:25  16  ,g11
20:25:25  17  ,g12
20:25:25  18  ,g13
20:25:25  19  ,g14
20:25:25  20  ,g15
20:25:25  21  ,g16
20:25:25  22  ,g17
20:25:25  23  ,g18
20:25:25  24  ,g19
20:25:25  25  ,g20
20:25:25  26  ,g21
20:25:25  27  ,g22
20:25:25  28  ,g23
20:25:25  29  ,g24
20:25:25  30  ,g25
20:25:25  31  ,g26
20:25:25  32  ,g27
20:25:25  33  ,g28
20:25:25  34  ,g29
20:25:25  35  ,g30
20:25:25  36  ,g31
20:25:25  37  ,g32
20:25:25  38  ,g33
20:25:25  39  ,g34
20:25:25  40  ,g35
20:25:25  41  ,g36
20:25:25  42  ,g37
20:25:25  43  ,g38
20:25:25  44  ,g39
20:25:25  45  ,g40
20:25:25  46  ,g41
20:25:25  47  FROM modsrc
20:25:25  48  WHERE gatt IN('nup','up')
20:25:25  49  -- Use only rows which are older than 1 day:
20:25:25  50  AND 1+ydate < '&1'||' '||'&2'
20:25:25  51  AND pair = '&3'
20:25:25  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-10-14'||' '||'23:10:01'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:25:25 SQL> 
20:25:25 SQL> -- rpt
20:25:25 SQL> 
20:25:25 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt;

GAT COUNT(PRDATE)
--- -------------
nup	      905
up	      870

Elapsed: 00:00:00.03
20:25:25 SQL> 
20:25:25 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-10-13 23:05:01

Elapsed: 00:00:00.01
20:25:25 SQL> 
20:25:25 SQL> -- Now build model from bme and score sme
20:25:25 SQL> @score1.sql gatt
20:25:25 SQL> --
20:25:25 SQL> -- score1.sql
20:25:25 SQL> --
20:25:25 SQL> 
20:25:25 SQL> -- I use this script to send 5 params to score.sql
20:25:25 SQL> -- which does the heavy lifting of creating an SVM model.
20:25:25 SQL> -- Then at the very end of this script I use the model
20:25:25 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:25:25 SQL> 
20:25:25 SQL> -- I call this script from 2 other scripts:
20:25:25 SQL> -- score1_5min.sql
20:25:25 SQL> -- score1_5min_gattn.sql
20:25:25 SQL> 
20:25:25 SQL> -- The 1st param is the name of the target attribute.
20:25:25 SQL> -- I like to call my target attributes either gatt or gattn.
20:25:25 SQL> 
20:25:25 SQL> -- Demo:
20:25:25 SQL> -- @score1.sql 'gatt'
20:25:25 SQL> -- @score1.sql 'gattn'
20:25:25 SQL> 
20:25:25 SQL> -- Now, I fill up svmc_apply_prep.
20:25:25 SQL> -- I use same model_name used in score.sql
20:25:25 SQL> DEFINE model_name = 'svmfx101'
20:25:25 SQL> DEFINE bldtable	= 'bme'
20:25:25 SQL> DEFINE scoretable = 'sme'
20:25:25 SQL> DEFINE case_id	= 'prdate'
20:25:25 SQL> -- Demo:
20:25:25 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:25:25 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:25:25 SQL> --
20:25:25 SQL> -- score.sql
20:25:25 SQL> --
20:25:25 SQL> 
20:25:25 SQL> -- usage: score.sql
20:25:25 SQL> 
20:25:25 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:25:25 SQL> 
20:25:25 SQL> -- DEFINE target	   = 'gatt'
20:25:25 SQL> -- DEFINE model_name = 'svmfx101'
20:25:25 SQL> -- DEFINE bldtable   = 'bme'
20:25:25 SQL> -- DEFINE scoretable = 'sme'
20:25:25 SQL> -- DEFINE case_id    = 'prdate'
20:25:25 SQL> 
20:25:25 SQL> DEFINE target	= '&1'
20:25:25 SQL> DEFINE model_name = '&2'
20:25:25 SQL> DEFINE bldtable	= '&3'
20:25:25 SQL> DEFINE scoretable = '&4'
20:25:25 SQL> DEFINE case_id	= '&5'
20:25:25 SQL> 
20:25:25 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:25:25 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:25:25 SQL> 
20:25:25 SQL> -- Builds an SVM model using pl/sql.
20:25:25 SQL> 
20:25:25 SQL> -----------------------------------------------------------------------
20:25:25 SQL> --			    BUILD THE MODEL
20:25:25 SQL> -----------------------------------------------------------------------
20:25:25 SQL> 
20:25:25 SQL> -- Cleanup old build data preparation objects for repeat runs
20:25:25 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.00
20:25:25 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.01
20:25:25 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:25:25 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.00
20:25:25 SQL> 
20:25:25 SQL> 
20:25:25 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:25:25 SQL> --
20:25:25 SQL> -- DROP	TABLE svmc_settings ;
20:25:25 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:25:25 SQL> -- DELETE svmc_settings;
20:25:25 SQL> 
20:25:25 SQL> -- The default classification algorithm is Naive Bayes. So override
20:25:25 SQL> -- this choice to SVM using a settings table.
20:25:25 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:25:25 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:25:25 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:25:25 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:25:25 SQL> -- models.
20:25:25 SQL> --
20:25:25 SQL> 
20:25:25 SQL> -- Do this once and then comment it out.
20:25:25 SQL> -- That makes script go faster.
20:25:25 SQL> -- BEGIN
20:25:25 SQL> -- -- Populate settings table
20:25:25 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:25:25 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:25:25 SQL> --
20:25:25 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:25:25 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:25:25 SQL> --
20:25:25 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:25:25 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:25:25 SQL> --   COMMIT;
20:25:25 SQL> -- END;
20:25:25 SQL> -- /
20:25:25 SQL> 
20:25:25 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.01
20:25:25 SQL> 
20:25:25 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:25:25   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:25:25   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:25:25 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:25:25   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:25:25   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:25:25 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:25:25   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:25:25   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:25:25 SQL> 
20:25:25 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:25:25   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:25:25   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:25:25 SQL> 
20:25:25 SQL> --------------------------------
20:25:25 SQL> -- PREPARE BUILD (TRAINING) DATA
20:25:25 SQL> --
20:25:25 SQL> 
20:25:25 SQL> -- 1. Missing Value treatment for all Predictors and
20:25:25 SQL> -- 2. Outlier Treatment and
20:25:25 SQL> -- 3. Normalization are performed below.
20:25:25 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:25:25 SQL> --    normalized here.
20:25:25 SQL> 
20:25:25 SQL> BEGIN
20:25:25   2  	-- Perform missing value treatment for all predictors
20:25:25   3  	-- create miss tables
20:25:25   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:25:25   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:25:25   6  
20:25:25   7  	-- populate miss tables
20:25:25   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:25:25   9  	  miss_table_name => 'svmc_miss_num',
20:25:25  10  	  data_table_name => '&bldtable',
20:25:25  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:25:25  12  
20:25:25  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:25:25  14  	  miss_table_name => 'svmc_miss_cat',
20:25:25  15  	  data_table_name => '&bldtable',
20:25:25  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:25:25  17  
20:25:25  18  	-- xform input data to replace missing values
20:25:25  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:25:25  20  	  miss_table_name => 'svmc_miss_num',
20:25:25  21  	  data_table_name => '&bldtable',
20:25:25  22  	  xform_view_name => 'xformed_build_miss_num');
20:25:25  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:25:25  24  	  miss_table_name => 'svmc_miss_cat',
20:25:25  25  	  data_table_name => '&bldtable',
20:25:25  26  	  xform_view_name => 'xformed_build_miss_cat');
20:25:25  27  
20:25:25  28  	-- Perform outlier treatment.
20:25:25  29  	-- create clip table
20:25:25  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:25:25  31  
20:25:25  32  	-- populate clip table
20:25:25  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:25:25  34  	  clip_table_name => 'svmc_clip',
20:25:25  35  	  data_table_name => '&bldtable',
20:25:25  36  	  tail_frac	  => 0.025,
20:25:25  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:25:25  38  
20:25:25  39  	-- xform input data to winsorized data
20:25:25  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:25:25  41  	  clip_table_name => 'svmc_clip',
20:25:25  42  	  data_table_name => '&bldtable',
20:25:25  43  	  xform_view_name => 'svmc_winsor');
20:25:25  44  
20:25:25  45  	-- create normalization table
20:25:25  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:25:25  47  
20:25:25  48  	-- populate normalization table based on winsorized data
20:25:25  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:25:25  50  	  norm_table_name => 'svmc_norm',
20:25:25  51  	  data_table_name => 'svmc_winsor',
20:25:25  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:25:25  53  
20:25:25  54  	-- normalize the original data
20:25:25  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:25:25  56  	  norm_table_name => 'svmc_norm',
20:25:25  57  	  data_table_name => '&bldtable',
20:25:25  58  	  xform_view_name => 'svmc_build_prep');
20:25:25  59  END;
20:25:25  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.03
20:25:26 SQL> 
20:25:26 SQL> ---------------------
20:25:26 SQL> -- CREATE A NEW MODEL
20:25:26 SQL> --
20:25:26 SQL> -- Cleanup old model with the same name for repeat runs
20:25:26 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:25:26   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:25:26   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.95
20:25:27 SQL> 
20:25:27 SQL> -- Build a new SVM Model
20:25:27 SQL> BEGIN
20:25:27   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:25:27   3  	  model_name	      => '&model_name',
20:25:27   4  	  mining_function     => dbms_data_mining.classification,
20:25:27   5  	  data_table_name     => 'svmc_build_prep',
20:25:27   6  	  case_id_column_name => '&case_id',
20:25:27   7  	  target_column_name  => '&target',
20:25:27   8  	  settings_table_name => 'svmc_settings');
20:25:27   9  END;
20:25:27  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:02.38
20:25:29 SQL> 
20:25:29 SQL> -----------------------------------------------------------------------
20:25:29 SQL> --			       APPLY/score THE MODEL
20:25:29 SQL> -----------------------------------------------------------------------
20:25:29 SQL> 
20:25:29 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:25:29 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:25:29   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:25:29   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:25:29 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:25:29   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:25:29   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.50
20:25:30 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:25:30   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:25:30   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
20:25:30 SQL> -----------------------
20:25:30 SQL> -- PREPARE SCORING DATA
20:25:30 SQL> --
20:25:30 SQL> -- If the data for model creation has been prepared, then the data
20:25:30 SQL> -- to be scored using the model must be prepared in the same manner
20:25:30 SQL> -- in order to obtain meaningful results.
20:25:30 SQL> --
20:25:30 SQL> -- 1. Missing Value treatment for all Predictors and
20:25:30 SQL> -- 2. Normalization
20:25:30 SQL> -- No outlier treatment will be performed during test and apply. The
20:25:30 SQL> -- normalization step is sufficient, since the normalization parameters
20:25:30 SQL> -- already capture the effects of outlier treatment done with build data.
20:25:30 SQL> --
20:25:30 SQL> BEGIN
20:25:30   2  	-- Xform Test data to replace missing values
20:25:30   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:25:30   4  	  miss_table_name => 'svmc_miss_num',
20:25:30   5  	  data_table_name => '&scoretable',
20:25:30   6  	  xform_view_name => 'xformed_apply_miss_num');
20:25:30   7  
20:25:30   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:25:30   9  	  miss_table_name => 'svmc_miss_cat',
20:25:30  10  	  data_table_name => '&scoretable',
20:25:30  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:25:30  12  
20:25:30  13  	-- Normalize the data to be scored
20:25:30  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:25:30  15  	  norm_table_name => 'svmc_norm',
20:25:30  16  	  data_table_name => '&scoretable',
20:25:30  17  	  xform_view_name => 'svmc_apply_prep');
20:25:30  18  END;
20:25:30  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.19
20:25:30 SQL> 
20:25:30 SQL> -- Maybe I already collected a score for this prdate.
20:25:30 SQL> -- DELETE it if I did:
20:25:30 SQL> DELETE svm62scores
20:25:30   2  WHERE score > 0
20:25:30   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:25:30   4  -- I need to supply the target attribute name:
20:25:30   5  AND targ = '&1'
20:25:30   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gatt'

0 rows deleted.

Elapsed: 00:00:00.01
20:25:30 SQL> 
20:25:30 SQL> -- We do a drumroll here:
20:25:30 SQL> 
20:25:30 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:25:30   2  SELECT
20:25:30   3  prdate
20:25:30   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:25:30   5  ,sysdate
20:25:30   6  ,SUBSTR(prdate,1,7)pair
20:25:30   7  ,SUBSTR(prdate,-19)ydate
20:25:30   8  ,'&1'
20:25:30   9  FROM svmc_apply_prep
20:25:30  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gatt'

1 row created.

Elapsed: 00:00:00.06
20:25:30 SQL> @score1_5min_gattn.sql	2011-01-06 13:25:00 aud_usd
20:25:30 SQL> --
20:25:30 SQL> -- score1_5min_gattn.sql
20:25:30 SQL> --
20:25:30 SQL> 
20:25:30 SQL> -- Demo:
20:25:30 SQL> -- @score1_5min_gattn.sql 2010-12-31 20:45:01 aud_usd
20:25:30 SQL> 
20:25:30 SQL> CREATE OR REPLACE VIEW sme AS
20:25:30   2  SELECT
20:25:30   3  prdate
20:25:30   4  ,NULL gattn
20:25:30   5  ,g00
20:25:30   6  ,g01
20:25:30   7  ,g02
20:25:30   8  ,g03
20:25:30   9  ,g04
20:25:30  10  ,g05
20:25:30  11  ,g06
20:25:30  12  ,g07
20:25:30  13  ,g08
20:25:30  14  ,g09
20:25:30  15  ,g10
20:25:30  16  ,g11
20:25:30  17  ,g12
20:25:30  18  ,g13
20:25:30  19  ,g14
20:25:30  20  ,g15
20:25:30  21  ,g16
20:25:30  22  ,g17
20:25:30  23  ,g18
20:25:30  24  ,g19
20:25:30  25  ,g20
20:25:30  26  ,g21
20:25:30  27  ,g22
20:25:30  28  ,g23
20:25:30  29  ,g24
20:25:30  30  ,g25
20:25:30  31  ,g26
20:25:30  32  ,g27
20:25:30  33  ,g28
20:25:30  34  ,g29
20:25:30  35  ,g30
20:25:30  36  ,g31
20:25:30  37  ,g32
20:25:30  38  ,g33
20:25:30  39  ,g34
20:25:30  40  ,g35
20:25:30  41  ,g36
20:25:30  42  ,g37
20:25:30  43  ,g38
20:25:30  44  ,g39
20:25:30  45  ,g40
20:25:30  46  ,g41
20:25:30  47  FROM modsrc
20:25:30  48  WHERE ydate = '&1'||' '||'&2'
20:25:30  49  AND pair = '&3'
20:25:30  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2011-01-06'||' '||'13:25:00'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:25:30 SQL> 
20:25:30 SQL> -- rpt
20:25:30 SQL> -- We should see just 1 row:
20:25:30 SQL> 
20:25:30 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.02
20:25:30 SQL> 
20:25:30 SQL> -- Build the model:
20:25:30 SQL> CREATE OR REPLACE VIEW bme AS
20:25:30   2  SELECT
20:25:30   3  prdate
20:25:30   4  ,gattn
20:25:30   5  ,g00
20:25:30   6  ,g01
20:25:30   7  ,g02
20:25:30   8  ,g03
20:25:30   9  ,g04
20:25:30  10  ,g05
20:25:30  11  ,g06
20:25:30  12  ,g07
20:25:30  13  ,g08
20:25:30  14  ,g09
20:25:30  15  ,g10
20:25:30  16  ,g11
20:25:30  17  ,g12
20:25:30  18  ,g13
20:25:30  19  ,g14
20:25:30  20  ,g15
20:25:30  21  ,g16
20:25:30  22  ,g17
20:25:30  23  ,g18
20:25:30  24  ,g19
20:25:30  25  ,g20
20:25:30  26  ,g21
20:25:30  27  ,g22
20:25:30  28  ,g23
20:25:30  29  ,g24
20:25:30  30  ,g25
20:25:30  31  ,g26
20:25:30  32  ,g27
20:25:30  33  ,g28
20:25:30  34  ,g29
20:25:30  35  ,g30
20:25:30  36  ,g31
20:25:30  37  ,g32
20:25:30  38  ,g33
20:25:30  39  ,g34
20:25:30  40  ,g35
20:25:30  41  ,g36
20:25:30  42  ,g37
20:25:30  43  ,g38
20:25:30  44  ,g39
20:25:30  45  ,g40
20:25:30  46  ,g41
20:25:30  47  FROM modsrc
20:25:30  48  WHERE gattn IN('nup','up')
20:25:30  49  -- Use only rows which are older than 1 day:
20:25:30  50  AND 1+ydate < '&1'||' '||'&2'
20:25:30  51  AND pair = '&3'
20:25:30  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2011-01-06'||' '||'13:25:00'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.05
20:25:30 SQL> 
20:25:30 SQL> -- rpt
20:25:30 SQL> 
20:25:30 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	    12465
up	     6404

Elapsed: 00:00:00.03
20:25:30 SQL> 
20:25:30 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2011-01-05 13:20:00

Elapsed: 00:00:00.02
20:25:30 SQL> 
20:25:30 SQL> -- Now build model from bme and score sme
20:25:30 SQL> @score1.sql gattn
20:25:30 SQL> --
20:25:30 SQL> -- score1.sql
20:25:30 SQL> --
20:25:30 SQL> 
20:25:30 SQL> -- I use this script to send 5 params to score.sql
20:25:30 SQL> -- which does the heavy lifting of creating an SVM model.
20:25:30 SQL> -- Then at the very end of this script I use the model
20:25:30 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:25:30 SQL> 
20:25:30 SQL> -- I call this script from 2 other scripts:
20:25:30 SQL> -- score1_5min.sql
20:25:30 SQL> -- score1_5min_gattn.sql
20:25:30 SQL> 
20:25:30 SQL> -- The 1st param is the name of the target attribute.
20:25:30 SQL> -- I like to call my target attributes either gatt or gattn.
20:25:30 SQL> 
20:25:30 SQL> -- Demo:
20:25:30 SQL> -- @score1.sql 'gatt'
20:25:30 SQL> -- @score1.sql 'gattn'
20:25:30 SQL> 
20:25:30 SQL> -- Now, I fill up svmc_apply_prep.
20:25:30 SQL> -- I use same model_name used in score.sql
20:25:30 SQL> DEFINE model_name = 'svmfx101'
20:25:30 SQL> DEFINE bldtable	= 'bme'
20:25:30 SQL> DEFINE scoretable = 'sme'
20:25:30 SQL> DEFINE case_id	= 'prdate'
20:25:30 SQL> -- Demo:
20:25:30 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:25:30 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:25:30 SQL> --
20:25:30 SQL> -- score.sql
20:25:30 SQL> --
20:25:30 SQL> 
20:25:30 SQL> -- usage: score.sql
20:25:30 SQL> 
20:25:30 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:25:30 SQL> 
20:25:30 SQL> -- DEFINE target	   = 'gatt'
20:25:30 SQL> -- DEFINE model_name = 'svmfx101'
20:25:30 SQL> -- DEFINE bldtable   = 'bme'
20:25:30 SQL> -- DEFINE scoretable = 'sme'
20:25:30 SQL> -- DEFINE case_id    = 'prdate'
20:25:30 SQL> 
20:25:30 SQL> DEFINE target	= '&1'
20:25:30 SQL> DEFINE model_name = '&2'
20:25:30 SQL> DEFINE bldtable	= '&3'
20:25:30 SQL> DEFINE scoretable = '&4'
20:25:30 SQL> DEFINE case_id	= '&5'
20:25:30 SQL> 
20:25:30 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:25:30 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:25:30 SQL> 
20:25:30 SQL> -- Builds an SVM model using pl/sql.
20:25:30 SQL> 
20:25:30 SQL> -----------------------------------------------------------------------
20:25:30 SQL> --			    BUILD THE MODEL
20:25:30 SQL> -----------------------------------------------------------------------
20:25:30 SQL> 
20:25:30 SQL> -- Cleanup old build data preparation objects for repeat runs
20:25:30 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.00
20:25:30 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.01
20:25:30 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:25:30 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.00
20:25:30 SQL> 
20:25:30 SQL> 
20:25:30 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:25:30 SQL> --
20:25:30 SQL> -- DROP	TABLE svmc_settings ;
20:25:30 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:25:30 SQL> -- DELETE svmc_settings;
20:25:30 SQL> 
20:25:30 SQL> -- The default classification algorithm is Naive Bayes. So override
20:25:30 SQL> -- this choice to SVM using a settings table.
20:25:30 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:25:30 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:25:30 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:25:30 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:25:30 SQL> -- models.
20:25:30 SQL> --
20:25:30 SQL> 
20:25:30 SQL> -- Do this once and then comment it out.
20:25:30 SQL> -- That makes script go faster.
20:25:30 SQL> -- BEGIN
20:25:30 SQL> -- -- Populate settings table
20:25:30 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:25:30 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:25:30 SQL> --
20:25:30 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:25:30 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:25:30 SQL> --
20:25:30 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:25:30 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:25:30 SQL> --   COMMIT;
20:25:30 SQL> -- END;
20:25:30 SQL> -- /
20:25:30 SQL> 
20:25:30 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.01
20:25:30 SQL> 
20:25:30 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:25:30   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:25:30   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:25:30 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:25:30   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:25:30   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:25:30 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:25:30   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:25:30   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:25:30 SQL> 
20:25:30 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:25:30   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:25:30   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:25:30 SQL> 
20:25:30 SQL> --------------------------------
20:25:30 SQL> -- PREPARE BUILD (TRAINING) DATA
20:25:30 SQL> --
20:25:30 SQL> 
20:25:30 SQL> -- 1. Missing Value treatment for all Predictors and
20:25:30 SQL> -- 2. Outlier Treatment and
20:25:30 SQL> -- 3. Normalization are performed below.
20:25:30 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:25:30 SQL> --    normalized here.
20:25:30 SQL> 
20:25:30 SQL> BEGIN
20:25:30   2  	-- Perform missing value treatment for all predictors
20:25:30   3  	-- create miss tables
20:25:30   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:25:30   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:25:30   6  
20:25:30   7  	-- populate miss tables
20:25:30   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:25:30   9  	  miss_table_name => 'svmc_miss_num',
20:25:30  10  	  data_table_name => '&bldtable',
20:25:30  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:25:30  12  
20:25:30  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:25:30  14  	  miss_table_name => 'svmc_miss_cat',
20:25:30  15  	  data_table_name => '&bldtable',
20:25:30  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:25:30  17  
20:25:30  18  	-- xform input data to replace missing values
20:25:30  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:25:30  20  	  miss_table_name => 'svmc_miss_num',
20:25:30  21  	  data_table_name => '&bldtable',
20:25:30  22  	  xform_view_name => 'xformed_build_miss_num');
20:25:30  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:25:30  24  	  miss_table_name => 'svmc_miss_cat',
20:25:30  25  	  data_table_name => '&bldtable',
20:25:30  26  	  xform_view_name => 'xformed_build_miss_cat');
20:25:30  27  
20:25:30  28  	-- Perform outlier treatment.
20:25:30  29  	-- create clip table
20:25:30  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:25:30  31  
20:25:30  32  	-- populate clip table
20:25:30  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:25:30  34  	  clip_table_name => 'svmc_clip',
20:25:30  35  	  data_table_name => '&bldtable',
20:25:30  36  	  tail_frac	  => 0.025,
20:25:30  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:25:30  38  
20:25:30  39  	-- xform input data to winsorized data
20:25:30  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:25:30  41  	  clip_table_name => 'svmc_clip',
20:25:30  42  	  data_table_name => '&bldtable',
20:25:30  43  	  xform_view_name => 'svmc_winsor');
20:25:30  44  
20:25:30  45  	-- create normalization table
20:25:30  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:25:30  47  
20:25:30  48  	-- populate normalization table based on winsorized data
20:25:30  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:25:30  50  	  norm_table_name => 'svmc_norm',
20:25:30  51  	  data_table_name => 'svmc_winsor',
20:25:30  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:25:30  53  
20:25:30  54  	-- normalize the original data
20:25:30  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:25:30  56  	  norm_table_name => 'svmc_norm',
20:25:30  57  	  data_table_name => '&bldtable',
20:25:30  58  	  xform_view_name => 'svmc_build_prep');
20:25:30  59  END;
20:25:30  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:02.35
20:25:33 SQL> 
20:25:33 SQL> ---------------------
20:25:33 SQL> -- CREATE A NEW MODEL
20:25:33 SQL> --
20:25:33 SQL> -- Cleanup old model with the same name for repeat runs
20:25:33 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:25:33   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:25:33   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.95
20:25:34 SQL> 
20:25:34 SQL> -- Build a new SVM Model
20:25:34 SQL> BEGIN
20:25:34   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:25:34   3  	  model_name	      => '&model_name',
20:25:34   4  	  mining_function     => dbms_data_mining.classification,
20:25:34   5  	  data_table_name     => 'svmc_build_prep',
20:25:34   6  	  case_id_column_name => '&case_id',
20:25:34   7  	  target_column_name  => '&target',
20:25:34   8  	  settings_table_name => 'svmc_settings');
20:25:34   9  END;
20:25:34  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:03.99
20:25:38 SQL> 
20:25:38 SQL> -----------------------------------------------------------------------
20:25:38 SQL> --			       APPLY/score THE MODEL
20:25:38 SQL> -----------------------------------------------------------------------
20:25:38 SQL> 
20:25:38 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:25:38 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:25:38   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:25:38   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:25:38 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:25:38   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:25:38   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:25:38 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:25:38   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:25:38   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:25:38 SQL> -----------------------
20:25:38 SQL> -- PREPARE SCORING DATA
20:25:38 SQL> --
20:25:38 SQL> -- If the data for model creation has been prepared, then the data
20:25:38 SQL> -- to be scored using the model must be prepared in the same manner
20:25:38 SQL> -- in order to obtain meaningful results.
20:25:38 SQL> --
20:25:38 SQL> -- 1. Missing Value treatment for all Predictors and
20:25:38 SQL> -- 2. Normalization
20:25:38 SQL> -- No outlier treatment will be performed during test and apply. The
20:25:38 SQL> -- normalization step is sufficient, since the normalization parameters
20:25:38 SQL> -- already capture the effects of outlier treatment done with build data.
20:25:38 SQL> --
20:25:38 SQL> BEGIN
20:25:38   2  	-- Xform Test data to replace missing values
20:25:38   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:25:38   4  	  miss_table_name => 'svmc_miss_num',
20:25:38   5  	  data_table_name => '&scoretable',
20:25:38   6  	  xform_view_name => 'xformed_apply_miss_num');
20:25:38   7  
20:25:38   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:25:38   9  	  miss_table_name => 'svmc_miss_cat',
20:25:38  10  	  data_table_name => '&scoretable',
20:25:38  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:25:38  12  
20:25:38  13  	-- Normalize the data to be scored
20:25:38  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:25:38  15  	  norm_table_name => 'svmc_norm',
20:25:38  16  	  data_table_name => '&scoretable',
20:25:38  17  	  xform_view_name => 'svmc_apply_prep');
20:25:38  18  END;
20:25:38  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.15
20:25:38 SQL> 
20:25:38 SQL> -- Maybe I already collected a score for this prdate.
20:25:38 SQL> -- DELETE it if I did:
20:25:38 SQL> DELETE svm62scores
20:25:38   2  WHERE score > 0
20:25:38   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:25:38   4  -- I need to supply the target attribute name:
20:25:38   5  AND targ = '&1'
20:25:38   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gattn'

0 rows deleted.

Elapsed: 00:00:00.02
20:25:38 SQL> 
20:25:38 SQL> -- We do a drumroll here:
20:25:38 SQL> 
20:25:38 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:25:38   2  SELECT
20:25:38   3  prdate
20:25:38   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:25:38   5  ,sysdate
20:25:38   6  ,SUBSTR(prdate,1,7)pair
20:25:38   7  ,SUBSTR(prdate,-19)ydate
20:25:38   8  ,'&1'
20:25:38   9  FROM svmc_apply_prep
20:25:38  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gattn'

1 row created.

Elapsed: 00:00:00.05
20:25:38 SQL> @score1_5min_gattn.sql	2010-12-23 07:20:00 aud_usd
20:25:38 SQL> --
20:25:38 SQL> -- score1_5min_gattn.sql
20:25:38 SQL> --
20:25:38 SQL> 
20:25:38 SQL> -- Demo:
20:25:38 SQL> -- @score1_5min_gattn.sql 2010-12-31 20:45:01 aud_usd
20:25:38 SQL> 
20:25:38 SQL> CREATE OR REPLACE VIEW sme AS
20:25:38   2  SELECT
20:25:38   3  prdate
20:25:38   4  ,NULL gattn
20:25:38   5  ,g00
20:25:38   6  ,g01
20:25:38   7  ,g02
20:25:38   8  ,g03
20:25:38   9  ,g04
20:25:38  10  ,g05
20:25:38  11  ,g06
20:25:38  12  ,g07
20:25:38  13  ,g08
20:25:38  14  ,g09
20:25:38  15  ,g10
20:25:38  16  ,g11
20:25:38  17  ,g12
20:25:38  18  ,g13
20:25:38  19  ,g14
20:25:38  20  ,g15
20:25:38  21  ,g16
20:25:38  22  ,g17
20:25:38  23  ,g18
20:25:38  24  ,g19
20:25:38  25  ,g20
20:25:38  26  ,g21
20:25:38  27  ,g22
20:25:38  28  ,g23
20:25:38  29  ,g24
20:25:38  30  ,g25
20:25:38  31  ,g26
20:25:38  32  ,g27
20:25:38  33  ,g28
20:25:38  34  ,g29
20:25:38  35  ,g30
20:25:38  36  ,g31
20:25:38  37  ,g32
20:25:38  38  ,g33
20:25:38  39  ,g34
20:25:38  40  ,g35
20:25:38  41  ,g36
20:25:38  42  ,g37
20:25:38  43  ,g38
20:25:38  44  ,g39
20:25:38  45  ,g40
20:25:38  46  ,g41
20:25:38  47  FROM modsrc
20:25:38  48  WHERE ydate = '&1'||' '||'&2'
20:25:38  49  AND pair = '&3'
20:25:38  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-12-23'||' '||'07:20:00'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.03
20:25:38 SQL> 
20:25:38 SQL> -- rpt
20:25:38 SQL> -- We should see just 1 row:
20:25:38 SQL> 
20:25:38 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.01
20:25:38 SQL> 
20:25:38 SQL> -- Build the model:
20:25:38 SQL> CREATE OR REPLACE VIEW bme AS
20:25:38   2  SELECT
20:25:38   3  prdate
20:25:38   4  ,gattn
20:25:38   5  ,g00
20:25:38   6  ,g01
20:25:38   7  ,g02
20:25:38   8  ,g03
20:25:38   9  ,g04
20:25:38  10  ,g05
20:25:38  11  ,g06
20:25:38  12  ,g07
20:25:38  13  ,g08
20:25:38  14  ,g09
20:25:38  15  ,g10
20:25:38  16  ,g11
20:25:38  17  ,g12
20:25:38  18  ,g13
20:25:38  19  ,g14
20:25:38  20  ,g15
20:25:38  21  ,g16
20:25:38  22  ,g17
20:25:38  23  ,g18
20:25:38  24  ,g19
20:25:38  25  ,g20
20:25:38  26  ,g21
20:25:38  27  ,g22
20:25:38  28  ,g23
20:25:38  29  ,g24
20:25:38  30  ,g25
20:25:38  31  ,g26
20:25:38  32  ,g27
20:25:38  33  ,g28
20:25:38  34  ,g29
20:25:38  35  ,g30
20:25:38  36  ,g31
20:25:38  37  ,g32
20:25:38  38  ,g33
20:25:38  39  ,g34
20:25:38  40  ,g35
20:25:38  41  ,g36
20:25:38  42  ,g37
20:25:38  43  ,g38
20:25:38  44  ,g39
20:25:38  45  ,g40
20:25:38  46  ,g41
20:25:38  47  FROM modsrc
20:25:38  48  WHERE gattn IN('nup','up')
20:25:38  49  -- Use only rows which are older than 1 day:
20:25:38  50  AND 1+ydate < '&1'||' '||'&2'
20:25:38  51  AND pair = '&3'
20:25:38  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-12-23'||' '||'07:20:00'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.05
20:25:38 SQL> 
20:25:38 SQL> -- rpt
20:25:38 SQL> 
20:25:38 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	    10426
up	     5546

Elapsed: 00:00:00.03
20:25:38 SQL> 
20:25:38 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-12-22 07:15:00

Elapsed: 00:00:00.02
20:25:38 SQL> 
20:25:38 SQL> -- Now build model from bme and score sme
20:25:38 SQL> @score1.sql gattn
20:25:38 SQL> --
20:25:38 SQL> -- score1.sql
20:25:38 SQL> --
20:25:38 SQL> 
20:25:38 SQL> -- I use this script to send 5 params to score.sql
20:25:38 SQL> -- which does the heavy lifting of creating an SVM model.
20:25:38 SQL> -- Then at the very end of this script I use the model
20:25:38 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:25:38 SQL> 
20:25:38 SQL> -- I call this script from 2 other scripts:
20:25:38 SQL> -- score1_5min.sql
20:25:38 SQL> -- score1_5min_gattn.sql
20:25:38 SQL> 
20:25:38 SQL> -- The 1st param is the name of the target attribute.
20:25:38 SQL> -- I like to call my target attributes either gatt or gattn.
20:25:38 SQL> 
20:25:38 SQL> -- Demo:
20:25:38 SQL> -- @score1.sql 'gatt'
20:25:38 SQL> -- @score1.sql 'gattn'
20:25:38 SQL> 
20:25:38 SQL> -- Now, I fill up svmc_apply_prep.
20:25:38 SQL> -- I use same model_name used in score.sql
20:25:38 SQL> DEFINE model_name = 'svmfx101'
20:25:38 SQL> DEFINE bldtable	= 'bme'
20:25:38 SQL> DEFINE scoretable = 'sme'
20:25:38 SQL> DEFINE case_id	= 'prdate'
20:25:38 SQL> -- Demo:
20:25:38 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:25:38 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:25:38 SQL> --
20:25:38 SQL> -- score.sql
20:25:38 SQL> --
20:25:38 SQL> 
20:25:38 SQL> -- usage: score.sql
20:25:38 SQL> 
20:25:38 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:25:38 SQL> 
20:25:38 SQL> -- DEFINE target	   = 'gatt'
20:25:38 SQL> -- DEFINE model_name = 'svmfx101'
20:25:38 SQL> -- DEFINE bldtable   = 'bme'
20:25:38 SQL> -- DEFINE scoretable = 'sme'
20:25:38 SQL> -- DEFINE case_id    = 'prdate'
20:25:38 SQL> 
20:25:38 SQL> DEFINE target	= '&1'
20:25:38 SQL> DEFINE model_name = '&2'
20:25:38 SQL> DEFINE bldtable	= '&3'
20:25:38 SQL> DEFINE scoretable = '&4'
20:25:38 SQL> DEFINE case_id	= '&5'
20:25:38 SQL> 
20:25:38 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:25:38 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:25:38 SQL> 
20:25:38 SQL> -- Builds an SVM model using pl/sql.
20:25:38 SQL> 
20:25:38 SQL> -----------------------------------------------------------------------
20:25:38 SQL> --			    BUILD THE MODEL
20:25:38 SQL> -----------------------------------------------------------------------
20:25:38 SQL> 
20:25:38 SQL> -- Cleanup old build data preparation objects for repeat runs
20:25:38 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.00
20:25:38 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.01
20:25:38 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:25:38 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.00
20:25:38 SQL> 
20:25:38 SQL> 
20:25:38 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:25:38 SQL> --
20:25:38 SQL> -- DROP	TABLE svmc_settings ;
20:25:38 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:25:38 SQL> -- DELETE svmc_settings;
20:25:38 SQL> 
20:25:38 SQL> -- The default classification algorithm is Naive Bayes. So override
20:25:38 SQL> -- this choice to SVM using a settings table.
20:25:38 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:25:38 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:25:38 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:25:38 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:25:38 SQL> -- models.
20:25:38 SQL> --
20:25:38 SQL> 
20:25:38 SQL> -- Do this once and then comment it out.
20:25:38 SQL> -- That makes script go faster.
20:25:38 SQL> -- BEGIN
20:25:38 SQL> -- -- Populate settings table
20:25:38 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:25:38 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:25:38 SQL> --
20:25:38 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:25:38 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:25:38 SQL> --
20:25:38 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:25:38 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:25:38 SQL> --   COMMIT;
20:25:38 SQL> -- END;
20:25:38 SQL> -- /
20:25:38 SQL> 
20:25:38 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.01
20:25:38 SQL> 
20:25:38 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:25:38   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:25:38   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:25:38 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:25:38   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:25:38   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:25:38 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:25:38   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:25:38   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:25:38 SQL> 
20:25:38 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:25:38   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:25:38   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:25:38 SQL> 
20:25:38 SQL> --------------------------------
20:25:38 SQL> -- PREPARE BUILD (TRAINING) DATA
20:25:38 SQL> --
20:25:38 SQL> 
20:25:38 SQL> -- 1. Missing Value treatment for all Predictors and
20:25:38 SQL> -- 2. Outlier Treatment and
20:25:38 SQL> -- 3. Normalization are performed below.
20:25:38 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:25:38 SQL> --    normalized here.
20:25:38 SQL> 
20:25:38 SQL> BEGIN
20:25:38   2  	-- Perform missing value treatment for all predictors
20:25:38   3  	-- create miss tables
20:25:38   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:25:38   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:25:38   6  
20:25:38   7  	-- populate miss tables
20:25:38   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:25:38   9  	  miss_table_name => 'svmc_miss_num',
20:25:38  10  	  data_table_name => '&bldtable',
20:25:38  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:25:38  12  
20:25:38  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:25:38  14  	  miss_table_name => 'svmc_miss_cat',
20:25:38  15  	  data_table_name => '&bldtable',
20:25:38  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:25:38  17  
20:25:38  18  	-- xform input data to replace missing values
20:25:38  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:25:38  20  	  miss_table_name => 'svmc_miss_num',
20:25:38  21  	  data_table_name => '&bldtable',
20:25:38  22  	  xform_view_name => 'xformed_build_miss_num');
20:25:38  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:25:38  24  	  miss_table_name => 'svmc_miss_cat',
20:25:38  25  	  data_table_name => '&bldtable',
20:25:38  26  	  xform_view_name => 'xformed_build_miss_cat');
20:25:38  27  
20:25:38  28  	-- Perform outlier treatment.
20:25:38  29  	-- create clip table
20:25:38  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:25:38  31  
20:25:38  32  	-- populate clip table
20:25:38  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:25:38  34  	  clip_table_name => 'svmc_clip',
20:25:38  35  	  data_table_name => '&bldtable',
20:25:38  36  	  tail_frac	  => 0.025,
20:25:38  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:25:38  38  
20:25:38  39  	-- xform input data to winsorized data
20:25:38  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:25:38  41  	  clip_table_name => 'svmc_clip',
20:25:38  42  	  data_table_name => '&bldtable',
20:25:38  43  	  xform_view_name => 'svmc_winsor');
20:25:38  44  
20:25:38  45  	-- create normalization table
20:25:38  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:25:38  47  
20:25:38  48  	-- populate normalization table based on winsorized data
20:25:38  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:25:38  50  	  norm_table_name => 'svmc_norm',
20:25:38  51  	  data_table_name => 'svmc_winsor',
20:25:38  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:25:38  53  
20:25:38  54  	-- normalize the original data
20:25:38  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:25:38  56  	  norm_table_name => 'svmc_norm',
20:25:38  57  	  data_table_name => '&bldtable',
20:25:38  58  	  xform_view_name => 'svmc_build_prep');
20:25:38  59  END;
20:25:38  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:02.18
20:25:41 SQL> 
20:25:41 SQL> ---------------------
20:25:41 SQL> -- CREATE A NEW MODEL
20:25:41 SQL> --
20:25:41 SQL> -- Cleanup old model with the same name for repeat runs
20:25:41 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:25:41   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:25:41   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.11
20:25:42 SQL> 
20:25:42 SQL> -- Build a new SVM Model
20:25:42 SQL> BEGIN
20:25:42   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:25:42   3  	  model_name	      => '&model_name',
20:25:42   4  	  mining_function     => dbms_data_mining.classification,
20:25:42   5  	  data_table_name     => 'svmc_build_prep',
20:25:42   6  	  case_id_column_name => '&case_id',
20:25:42   7  	  target_column_name  => '&target',
20:25:42   8  	  settings_table_name => 'svmc_settings');
20:25:42   9  END;
20:25:42  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:05.01
20:25:47 SQL> 
20:25:47 SQL> -----------------------------------------------------------------------
20:25:47 SQL> --			       APPLY/score THE MODEL
20:25:47 SQL> -----------------------------------------------------------------------
20:25:47 SQL> 
20:25:47 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:25:47 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:25:47   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:25:47   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:25:47 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:25:47   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:25:47   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:25:47 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:25:47   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:25:47   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:25:47 SQL> -----------------------
20:25:47 SQL> -- PREPARE SCORING DATA
20:25:47 SQL> --
20:25:47 SQL> -- If the data for model creation has been prepared, then the data
20:25:47 SQL> -- to be scored using the model must be prepared in the same manner
20:25:47 SQL> -- in order to obtain meaningful results.
20:25:47 SQL> --
20:25:47 SQL> -- 1. Missing Value treatment for all Predictors and
20:25:47 SQL> -- 2. Normalization
20:25:47 SQL> -- No outlier treatment will be performed during test and apply. The
20:25:47 SQL> -- normalization step is sufficient, since the normalization parameters
20:25:47 SQL> -- already capture the effects of outlier treatment done with build data.
20:25:47 SQL> --
20:25:47 SQL> BEGIN
20:25:47   2  	-- Xform Test data to replace missing values
20:25:47   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:25:47   4  	  miss_table_name => 'svmc_miss_num',
20:25:47   5  	  data_table_name => '&scoretable',
20:25:47   6  	  xform_view_name => 'xformed_apply_miss_num');
20:25:47   7  
20:25:47   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:25:47   9  	  miss_table_name => 'svmc_miss_cat',
20:25:47  10  	  data_table_name => '&scoretable',
20:25:47  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:25:47  12  
20:25:47  13  	-- Normalize the data to be scored
20:25:47  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:25:47  15  	  norm_table_name => 'svmc_norm',
20:25:47  16  	  data_table_name => '&scoretable',
20:25:47  17  	  xform_view_name => 'svmc_apply_prep');
20:25:47  18  END;
20:25:47  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.18
20:25:47 SQL> 
20:25:47 SQL> -- Maybe I already collected a score for this prdate.
20:25:47 SQL> -- DELETE it if I did:
20:25:47 SQL> DELETE svm62scores
20:25:47   2  WHERE score > 0
20:25:47   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:25:47   4  -- I need to supply the target attribute name:
20:25:47   5  AND targ = '&1'
20:25:47   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gattn'

0 rows deleted.

Elapsed: 00:00:00.02
20:25:47 SQL> 
20:25:47 SQL> -- We do a drumroll here:
20:25:47 SQL> 
20:25:47 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:25:47   2  SELECT
20:25:47   3  prdate
20:25:47   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:25:47   5  ,sysdate
20:25:47   6  ,SUBSTR(prdate,1,7)pair
20:25:47   7  ,SUBSTR(prdate,-19)ydate
20:25:47   8  ,'&1'
20:25:47   9  FROM svmc_apply_prep
20:25:47  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gattn'

1 row created.

Elapsed: 00:00:00.06
20:25:47 SQL> @score1_5min.sql	      2010-10-26 03:20:01 aud_usd
20:25:47 SQL> --
20:25:47 SQL> -- score1_5min.sql
20:25:47 SQL> --
20:25:47 SQL> 
20:25:47 SQL> -- Demo:
20:25:47 SQL> -- @score1_5min.sql 2010-12-31 20:45:01 aud_usd
20:25:47 SQL> 
20:25:47 SQL> CREATE OR REPLACE VIEW sme AS
20:25:47   2  SELECT
20:25:47   3  prdate
20:25:47   4  ,NULL gatt
20:25:47   5  ,g00
20:25:47   6  ,g01
20:25:47   7  ,g02
20:25:47   8  ,g03
20:25:47   9  ,g04
20:25:47  10  ,g05
20:25:47  11  ,g06
20:25:47  12  ,g07
20:25:47  13  ,g08
20:25:47  14  ,g09
20:25:47  15  ,g10
20:25:47  16  ,g11
20:25:47  17  ,g12
20:25:47  18  ,g13
20:25:47  19  ,g14
20:25:47  20  ,g15
20:25:47  21  ,g16
20:25:47  22  ,g17
20:25:47  23  ,g18
20:25:47  24  ,g19
20:25:47  25  ,g20
20:25:47  26  ,g21
20:25:47  27  ,g22
20:25:47  28  ,g23
20:25:47  29  ,g24
20:25:47  30  ,g25
20:25:47  31  ,g26
20:25:47  32  ,g27
20:25:47  33  ,g28
20:25:47  34  ,g29
20:25:47  35  ,g30
20:25:47  36  ,g31
20:25:47  37  ,g32
20:25:47  38  ,g33
20:25:47  39  ,g34
20:25:47  40  ,g35
20:25:47  41  ,g36
20:25:47  42  ,g37
20:25:47  43  ,g38
20:25:47  44  ,g39
20:25:47  45  ,g40
20:25:47  46  ,g41
20:25:47  47  FROM modsrc
20:25:47  48  WHERE ydate = '&1'||' '||'&2'
20:25:47  49  AND pair = '&3'
20:25:47  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-10-26'||' '||'03:20:01'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.03
20:25:47 SQL> 
20:25:47 SQL> -- rpt
20:25:47 SQL> -- We should see just 1 row:
20:25:47 SQL> 
20:25:47 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.02
20:25:47 SQL> 
20:25:47 SQL> -- Build the model:
20:25:47 SQL> CREATE OR REPLACE VIEW bme AS
20:25:47   2  SELECT
20:25:47   3  prdate
20:25:47   4  ,gatt
20:25:47   5  ,g00
20:25:47   6  ,g01
20:25:47   7  ,g02
20:25:47   8  ,g03
20:25:47   9  ,g04
20:25:47  10  ,g05
20:25:47  11  ,g06
20:25:47  12  ,g07
20:25:47  13  ,g08
20:25:47  14  ,g09
20:25:47  15  ,g10
20:25:47  16  ,g11
20:25:47  17  ,g12
20:25:47  18  ,g13
20:25:47  19  ,g14
20:25:47  20  ,g15
20:25:47  21  ,g16
20:25:47  22  ,g17
20:25:47  23  ,g18
20:25:47  24  ,g19
20:25:47  25  ,g20
20:25:47  26  ,g21
20:25:47  27  ,g22
20:25:47  28  ,g23
20:25:47  29  ,g24
20:25:47  30  ,g25
20:25:47  31  ,g26
20:25:47  32  ,g27
20:25:47  33  ,g28
20:25:47  34  ,g29
20:25:47  35  ,g30
20:25:47  36  ,g31
20:25:47  37  ,g32
20:25:47  38  ,g33
20:25:47  39  ,g34
20:25:47  40  ,g35
20:25:47  41  ,g36
20:25:47  42  ,g37
20:25:47  43  ,g38
20:25:47  44  ,g39
20:25:47  45  ,g40
20:25:47  46  ,g41
20:25:47  47  FROM modsrc
20:25:47  48  WHERE gatt IN('nup','up')
20:25:47  49  -- Use only rows which are older than 1 day:
20:25:47  50  AND 1+ydate < '&1'||' '||'&2'
20:25:47  51  AND pair = '&3'
20:25:47  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-10-26'||' '||'03:20:01'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:25:47 SQL> 
20:25:47 SQL> -- rpt
20:25:47 SQL> 
20:25:47 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt;

GAT COUNT(PRDATE)
--- -------------
nup	     2154
up	     1711

Elapsed: 00:00:00.03
20:25:47 SQL> 
20:25:47 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-10-25 03:15:01

Elapsed: 00:00:00.01
20:25:47 SQL> 
20:25:47 SQL> -- Now build model from bme and score sme
20:25:47 SQL> @score1.sql gatt
20:25:47 SQL> --
20:25:47 SQL> -- score1.sql
20:25:47 SQL> --
20:25:47 SQL> 
20:25:47 SQL> -- I use this script to send 5 params to score.sql
20:25:47 SQL> -- which does the heavy lifting of creating an SVM model.
20:25:47 SQL> -- Then at the very end of this script I use the model
20:25:47 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:25:47 SQL> 
20:25:47 SQL> -- I call this script from 2 other scripts:
20:25:47 SQL> -- score1_5min.sql
20:25:47 SQL> -- score1_5min_gattn.sql
20:25:47 SQL> 
20:25:47 SQL> -- The 1st param is the name of the target attribute.
20:25:47 SQL> -- I like to call my target attributes either gatt or gattn.
20:25:47 SQL> 
20:25:47 SQL> -- Demo:
20:25:47 SQL> -- @score1.sql 'gatt'
20:25:47 SQL> -- @score1.sql 'gattn'
20:25:47 SQL> 
20:25:47 SQL> -- Now, I fill up svmc_apply_prep.
20:25:47 SQL> -- I use same model_name used in score.sql
20:25:47 SQL> DEFINE model_name = 'svmfx101'
20:25:47 SQL> DEFINE bldtable	= 'bme'
20:25:47 SQL> DEFINE scoretable = 'sme'
20:25:47 SQL> DEFINE case_id	= 'prdate'
20:25:47 SQL> -- Demo:
20:25:47 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:25:47 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:25:47 SQL> --
20:25:47 SQL> -- score.sql
20:25:47 SQL> --
20:25:47 SQL> 
20:25:47 SQL> -- usage: score.sql
20:25:47 SQL> 
20:25:47 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:25:47 SQL> 
20:25:47 SQL> -- DEFINE target	   = 'gatt'
20:25:47 SQL> -- DEFINE model_name = 'svmfx101'
20:25:47 SQL> -- DEFINE bldtable   = 'bme'
20:25:47 SQL> -- DEFINE scoretable = 'sme'
20:25:47 SQL> -- DEFINE case_id    = 'prdate'
20:25:47 SQL> 
20:25:47 SQL> DEFINE target	= '&1'
20:25:47 SQL> DEFINE model_name = '&2'
20:25:47 SQL> DEFINE bldtable	= '&3'
20:25:47 SQL> DEFINE scoretable = '&4'
20:25:47 SQL> DEFINE case_id	= '&5'
20:25:47 SQL> 
20:25:47 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:25:47 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:25:47 SQL> 
20:25:47 SQL> -- Builds an SVM model using pl/sql.
20:25:47 SQL> 
20:25:47 SQL> -----------------------------------------------------------------------
20:25:47 SQL> --			    BUILD THE MODEL
20:25:47 SQL> -----------------------------------------------------------------------
20:25:47 SQL> 
20:25:47 SQL> -- Cleanup old build data preparation objects for repeat runs
20:25:47 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.00
20:25:47 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:25:47 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:25:47 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.01
20:25:47 SQL> 
20:25:47 SQL> 
20:25:47 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:25:47 SQL> --
20:25:47 SQL> -- DROP	TABLE svmc_settings ;
20:25:47 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:25:47 SQL> -- DELETE svmc_settings;
20:25:47 SQL> 
20:25:47 SQL> -- The default classification algorithm is Naive Bayes. So override
20:25:47 SQL> -- this choice to SVM using a settings table.
20:25:47 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:25:47 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:25:47 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:25:47 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:25:47 SQL> -- models.
20:25:47 SQL> --
20:25:47 SQL> 
20:25:47 SQL> -- Do this once and then comment it out.
20:25:47 SQL> -- That makes script go faster.
20:25:47 SQL> -- BEGIN
20:25:47 SQL> -- -- Populate settings table
20:25:47 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:25:47 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:25:47 SQL> --
20:25:47 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:25:47 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:25:47 SQL> --
20:25:47 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:25:47 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:25:47 SQL> --   COMMIT;
20:25:47 SQL> -- END;
20:25:47 SQL> -- /
20:25:47 SQL> 
20:25:47 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:25:47 SQL> 
20:25:47 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:25:47   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:25:47   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:25:47 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:25:47   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:25:47   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:25:47 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:25:47   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:25:47   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:25:47 SQL> 
20:25:47 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:25:47   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:25:47   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:25:47 SQL> 
20:25:47 SQL> --------------------------------
20:25:47 SQL> -- PREPARE BUILD (TRAINING) DATA
20:25:47 SQL> --
20:25:47 SQL> 
20:25:47 SQL> -- 1. Missing Value treatment for all Predictors and
20:25:47 SQL> -- 2. Outlier Treatment and
20:25:47 SQL> -- 3. Normalization are performed below.
20:25:47 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:25:47 SQL> --    normalized here.
20:25:47 SQL> 
20:25:47 SQL> BEGIN
20:25:47   2  	-- Perform missing value treatment for all predictors
20:25:47   3  	-- create miss tables
20:25:47   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:25:47   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:25:47   6  
20:25:47   7  	-- populate miss tables
20:25:47   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:25:47   9  	  miss_table_name => 'svmc_miss_num',
20:25:47  10  	  data_table_name => '&bldtable',
20:25:47  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:25:47  12  
20:25:47  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:25:47  14  	  miss_table_name => 'svmc_miss_cat',
20:25:47  15  	  data_table_name => '&bldtable',
20:25:47  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:25:47  17  
20:25:47  18  	-- xform input data to replace missing values
20:25:47  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:25:47  20  	  miss_table_name => 'svmc_miss_num',
20:25:47  21  	  data_table_name => '&bldtable',
20:25:47  22  	  xform_view_name => 'xformed_build_miss_num');
20:25:47  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:25:47  24  	  miss_table_name => 'svmc_miss_cat',
20:25:47  25  	  data_table_name => '&bldtable',
20:25:47  26  	  xform_view_name => 'xformed_build_miss_cat');
20:25:47  27  
20:25:47  28  	-- Perform outlier treatment.
20:25:47  29  	-- create clip table
20:25:47  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:25:47  31  
20:25:47  32  	-- populate clip table
20:25:47  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:25:47  34  	  clip_table_name => 'svmc_clip',
20:25:47  35  	  data_table_name => '&bldtable',
20:25:47  36  	  tail_frac	  => 0.025,
20:25:47  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:25:47  38  
20:25:47  39  	-- xform input data to winsorized data
20:25:47  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:25:47  41  	  clip_table_name => 'svmc_clip',
20:25:47  42  	  data_table_name => '&bldtable',
20:25:47  43  	  xform_view_name => 'svmc_winsor');
20:25:47  44  
20:25:47  45  	-- create normalization table
20:25:47  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:25:47  47  
20:25:47  48  	-- populate normalization table based on winsorized data
20:25:47  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:25:47  50  	  norm_table_name => 'svmc_norm',
20:25:47  51  	  data_table_name => 'svmc_winsor',
20:25:47  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:25:47  53  
20:25:47  54  	-- normalize the original data
20:25:47  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:25:47  56  	  norm_table_name => 'svmc_norm',
20:25:47  57  	  data_table_name => '&bldtable',
20:25:47  58  	  xform_view_name => 'svmc_build_prep');
20:25:47  59  END;
20:25:47  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.20
20:25:49 SQL> 
20:25:49 SQL> ---------------------
20:25:49 SQL> -- CREATE A NEW MODEL
20:25:49 SQL> --
20:25:49 SQL> -- Cleanup old model with the same name for repeat runs
20:25:49 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:25:49   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:25:49   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.18
20:25:50 SQL> 
20:25:50 SQL> -- Build a new SVM Model
20:25:50 SQL> BEGIN
20:25:50   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:25:50   3  	  model_name	      => '&model_name',
20:25:50   4  	  mining_function     => dbms_data_mining.classification,
20:25:50   5  	  data_table_name     => 'svmc_build_prep',
20:25:50   6  	  case_id_column_name => '&case_id',
20:25:50   7  	  target_column_name  => '&target',
20:25:50   8  	  settings_table_name => 'svmc_settings');
20:25:50   9  END;
20:25:50  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:02.75
20:25:52 SQL> 
20:25:52 SQL> -----------------------------------------------------------------------
20:25:52 SQL> --			       APPLY/score THE MODEL
20:25:52 SQL> -----------------------------------------------------------------------
20:25:52 SQL> 
20:25:52 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:25:52 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:25:52   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:25:52   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:25:52 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:25:52   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:25:52   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:25:53 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:25:53   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:25:53   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:25:53 SQL> -----------------------
20:25:53 SQL> -- PREPARE SCORING DATA
20:25:53 SQL> --
20:25:53 SQL> -- If the data for model creation has been prepared, then the data
20:25:53 SQL> -- to be scored using the model must be prepared in the same manner
20:25:53 SQL> -- in order to obtain meaningful results.
20:25:53 SQL> --
20:25:53 SQL> -- 1. Missing Value treatment for all Predictors and
20:25:53 SQL> -- 2. Normalization
20:25:53 SQL> -- No outlier treatment will be performed during test and apply. The
20:25:53 SQL> -- normalization step is sufficient, since the normalization parameters
20:25:53 SQL> -- already capture the effects of outlier treatment done with build data.
20:25:53 SQL> --
20:25:53 SQL> BEGIN
20:25:53   2  	-- Xform Test data to replace missing values
20:25:53   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:25:53   4  	  miss_table_name => 'svmc_miss_num',
20:25:53   5  	  data_table_name => '&scoretable',
20:25:53   6  	  xform_view_name => 'xformed_apply_miss_num');
20:25:53   7  
20:25:53   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:25:53   9  	  miss_table_name => 'svmc_miss_cat',
20:25:53  10  	  data_table_name => '&scoretable',
20:25:53  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:25:53  12  
20:25:53  13  	-- Normalize the data to be scored
20:25:53  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:25:53  15  	  norm_table_name => 'svmc_norm',
20:25:53  16  	  data_table_name => '&scoretable',
20:25:53  17  	  xform_view_name => 'svmc_apply_prep');
20:25:53  18  END;
20:25:53  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.18
20:25:53 SQL> 
20:25:53 SQL> -- Maybe I already collected a score for this prdate.
20:25:53 SQL> -- DELETE it if I did:
20:25:53 SQL> DELETE svm62scores
20:25:53   2  WHERE score > 0
20:25:53   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:25:53   4  -- I need to supply the target attribute name:
20:25:53   5  AND targ = '&1'
20:25:53   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gatt'

0 rows deleted.

Elapsed: 00:00:00.01
20:25:53 SQL> 
20:25:53 SQL> -- We do a drumroll here:
20:25:53 SQL> 
20:25:53 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:25:53   2  SELECT
20:25:53   3  prdate
20:25:53   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:25:53   5  ,sysdate
20:25:53   6  ,SUBSTR(prdate,1,7)pair
20:25:53   7  ,SUBSTR(prdate,-19)ydate
20:25:53   8  ,'&1'
20:25:53   9  FROM svmc_apply_prep
20:25:53  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gatt'

1 row created.

Elapsed: 00:00:00.04
20:25:53 SQL> @score1_5min_gattn.sql	2010-12-01 06:45:00 aud_usd
20:25:53 SQL> --
20:25:53 SQL> -- score1_5min_gattn.sql
20:25:53 SQL> --
20:25:53 SQL> 
20:25:53 SQL> -- Demo:
20:25:53 SQL> -- @score1_5min_gattn.sql 2010-12-31 20:45:01 aud_usd
20:25:53 SQL> 
20:25:53 SQL> CREATE OR REPLACE VIEW sme AS
20:25:53   2  SELECT
20:25:53   3  prdate
20:25:53   4  ,NULL gattn
20:25:53   5  ,g00
20:25:53   6  ,g01
20:25:53   7  ,g02
20:25:53   8  ,g03
20:25:53   9  ,g04
20:25:53  10  ,g05
20:25:53  11  ,g06
20:25:53  12  ,g07
20:25:53  13  ,g08
20:25:53  14  ,g09
20:25:53  15  ,g10
20:25:53  16  ,g11
20:25:53  17  ,g12
20:25:53  18  ,g13
20:25:53  19  ,g14
20:25:53  20  ,g15
20:25:53  21  ,g16
20:25:53  22  ,g17
20:25:53  23  ,g18
20:25:53  24  ,g19
20:25:53  25  ,g20
20:25:53  26  ,g21
20:25:53  27  ,g22
20:25:53  28  ,g23
20:25:53  29  ,g24
20:25:53  30  ,g25
20:25:53  31  ,g26
20:25:53  32  ,g27
20:25:53  33  ,g28
20:25:53  34  ,g29
20:25:53  35  ,g30
20:25:53  36  ,g31
20:25:53  37  ,g32
20:25:53  38  ,g33
20:25:53  39  ,g34
20:25:53  40  ,g35
20:25:53  41  ,g36
20:25:53  42  ,g37
20:25:53  43  ,g38
20:25:53  44  ,g39
20:25:53  45  ,g40
20:25:53  46  ,g41
20:25:53  47  FROM modsrc
20:25:53  48  WHERE ydate = '&1'||' '||'&2'
20:25:53  49  AND pair = '&3'
20:25:53  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-12-01'||' '||'06:45:00'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.03
20:25:53 SQL> 
20:25:53 SQL> -- rpt
20:25:53 SQL> -- We should see just 1 row:
20:25:53 SQL> 
20:25:53 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.01
20:25:53 SQL> 
20:25:53 SQL> -- Build the model:
20:25:53 SQL> CREATE OR REPLACE VIEW bme AS
20:25:53   2  SELECT
20:25:53   3  prdate
20:25:53   4  ,gattn
20:25:53   5  ,g00
20:25:53   6  ,g01
20:25:53   7  ,g02
20:25:53   8  ,g03
20:25:53   9  ,g04
20:25:53  10  ,g05
20:25:53  11  ,g06
20:25:53  12  ,g07
20:25:53  13  ,g08
20:25:53  14  ,g09
20:25:53  15  ,g10
20:25:53  16  ,g11
20:25:53  17  ,g12
20:25:53  18  ,g13
20:25:53  19  ,g14
20:25:53  20  ,g15
20:25:53  21  ,g16
20:25:53  22  ,g17
20:25:53  23  ,g18
20:25:53  24  ,g19
20:25:53  25  ,g20
20:25:53  26  ,g21
20:25:53  27  ,g22
20:25:53  28  ,g23
20:25:53  29  ,g24
20:25:53  30  ,g25
20:25:53  31  ,g26
20:25:53  32  ,g27
20:25:53  33  ,g28
20:25:53  34  ,g29
20:25:53  35  ,g30
20:25:53  36  ,g31
20:25:53  37  ,g32
20:25:53  38  ,g33
20:25:53  39  ,g34
20:25:53  40  ,g35
20:25:53  41  ,g36
20:25:53  42  ,g37
20:25:53  43  ,g38
20:25:53  44  ,g39
20:25:53  45  ,g40
20:25:53  46  ,g41
20:25:53  47  FROM modsrc
20:25:53  48  WHERE gattn IN('nup','up')
20:25:53  49  -- Use only rows which are older than 1 day:
20:25:53  50  AND 1+ydate < '&1'||' '||'&2'
20:25:53  51  AND pair = '&3'
20:25:53  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-12-01'||' '||'06:45:00'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.05
20:25:53 SQL> 
20:25:53 SQL> -- rpt
20:25:53 SQL> 
20:25:53 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	     7118
up	     4326

Elapsed: 00:00:00.02
20:25:53 SQL> 
20:25:53 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-11-30 06:40:00

Elapsed: 00:00:00.02
20:25:53 SQL> 
20:25:53 SQL> -- Now build model from bme and score sme
20:25:53 SQL> @score1.sql gattn
20:25:53 SQL> --
20:25:53 SQL> -- score1.sql
20:25:53 SQL> --
20:25:53 SQL> 
20:25:53 SQL> -- I use this script to send 5 params to score.sql
20:25:53 SQL> -- which does the heavy lifting of creating an SVM model.
20:25:53 SQL> -- Then at the very end of this script I use the model
20:25:53 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:25:53 SQL> 
20:25:53 SQL> -- I call this script from 2 other scripts:
20:25:53 SQL> -- score1_5min.sql
20:25:53 SQL> -- score1_5min_gattn.sql
20:25:53 SQL> 
20:25:53 SQL> -- The 1st param is the name of the target attribute.
20:25:53 SQL> -- I like to call my target attributes either gatt or gattn.
20:25:53 SQL> 
20:25:53 SQL> -- Demo:
20:25:53 SQL> -- @score1.sql 'gatt'
20:25:53 SQL> -- @score1.sql 'gattn'
20:25:53 SQL> 
20:25:53 SQL> -- Now, I fill up svmc_apply_prep.
20:25:53 SQL> -- I use same model_name used in score.sql
20:25:53 SQL> DEFINE model_name = 'svmfx101'
20:25:53 SQL> DEFINE bldtable	= 'bme'
20:25:53 SQL> DEFINE scoretable = 'sme'
20:25:53 SQL> DEFINE case_id	= 'prdate'
20:25:53 SQL> -- Demo:
20:25:53 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:25:53 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:25:53 SQL> --
20:25:53 SQL> -- score.sql
20:25:53 SQL> --
20:25:53 SQL> 
20:25:53 SQL> -- usage: score.sql
20:25:53 SQL> 
20:25:53 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:25:53 SQL> 
20:25:53 SQL> -- DEFINE target	   = 'gatt'
20:25:53 SQL> -- DEFINE model_name = 'svmfx101'
20:25:53 SQL> -- DEFINE bldtable   = 'bme'
20:25:53 SQL> -- DEFINE scoretable = 'sme'
20:25:53 SQL> -- DEFINE case_id    = 'prdate'
20:25:53 SQL> 
20:25:53 SQL> DEFINE target	= '&1'
20:25:53 SQL> DEFINE model_name = '&2'
20:25:53 SQL> DEFINE bldtable	= '&3'
20:25:53 SQL> DEFINE scoretable = '&4'
20:25:53 SQL> DEFINE case_id	= '&5'
20:25:53 SQL> 
20:25:53 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:25:53 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:25:53 SQL> 
20:25:53 SQL> -- Builds an SVM model using pl/sql.
20:25:53 SQL> 
20:25:53 SQL> -----------------------------------------------------------------------
20:25:53 SQL> --			    BUILD THE MODEL
20:25:53 SQL> -----------------------------------------------------------------------
20:25:53 SQL> 
20:25:53 SQL> -- Cleanup old build data preparation objects for repeat runs
20:25:53 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.00
20:25:53 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.01
20:25:53 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:25:53 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.00
20:25:53 SQL> 
20:25:53 SQL> 
20:25:53 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:25:53 SQL> --
20:25:53 SQL> -- DROP	TABLE svmc_settings ;
20:25:53 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:25:53 SQL> -- DELETE svmc_settings;
20:25:53 SQL> 
20:25:53 SQL> -- The default classification algorithm is Naive Bayes. So override
20:25:53 SQL> -- this choice to SVM using a settings table.
20:25:53 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:25:53 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:25:53 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:25:53 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:25:53 SQL> -- models.
20:25:53 SQL> --
20:25:53 SQL> 
20:25:53 SQL> -- Do this once and then comment it out.
20:25:53 SQL> -- That makes script go faster.
20:25:53 SQL> -- BEGIN
20:25:53 SQL> -- -- Populate settings table
20:25:53 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:25:53 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:25:53 SQL> --
20:25:53 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:25:53 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:25:53 SQL> --
20:25:53 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:25:53 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:25:53 SQL> --   COMMIT;
20:25:53 SQL> -- END;
20:25:53 SQL> -- /
20:25:53 SQL> 
20:25:53 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:25:53 SQL> 
20:25:53 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:25:53   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:25:53   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
20:25:53 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:25:53   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:25:53   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:25:53 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:25:53   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:25:53   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:25:53 SQL> 
20:25:53 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:25:53   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:25:53   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:25:53 SQL> 
20:25:53 SQL> --------------------------------
20:25:53 SQL> -- PREPARE BUILD (TRAINING) DATA
20:25:53 SQL> --
20:25:53 SQL> 
20:25:53 SQL> -- 1. Missing Value treatment for all Predictors and
20:25:53 SQL> -- 2. Outlier Treatment and
20:25:53 SQL> -- 3. Normalization are performed below.
20:25:53 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:25:53 SQL> --    normalized here.
20:25:53 SQL> 
20:25:53 SQL> BEGIN
20:25:53   2  	-- Perform missing value treatment for all predictors
20:25:53   3  	-- create miss tables
20:25:53   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:25:53   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:25:53   6  
20:25:53   7  	-- populate miss tables
20:25:53   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:25:53   9  	  miss_table_name => 'svmc_miss_num',
20:25:53  10  	  data_table_name => '&bldtable',
20:25:53  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:25:53  12  
20:25:53  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:25:53  14  	  miss_table_name => 'svmc_miss_cat',
20:25:53  15  	  data_table_name => '&bldtable',
20:25:53  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:25:53  17  
20:25:53  18  	-- xform input data to replace missing values
20:25:53  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:25:53  20  	  miss_table_name => 'svmc_miss_num',
20:25:53  21  	  data_table_name => '&bldtable',
20:25:53  22  	  xform_view_name => 'xformed_build_miss_num');
20:25:53  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:25:53  24  	  miss_table_name => 'svmc_miss_cat',
20:25:53  25  	  data_table_name => '&bldtable',
20:25:53  26  	  xform_view_name => 'xformed_build_miss_cat');
20:25:53  27  
20:25:53  28  	-- Perform outlier treatment.
20:25:53  29  	-- create clip table
20:25:53  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:25:53  31  
20:25:53  32  	-- populate clip table
20:25:53  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:25:53  34  	  clip_table_name => 'svmc_clip',
20:25:53  35  	  data_table_name => '&bldtable',
20:25:53  36  	  tail_frac	  => 0.025,
20:25:53  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:25:53  38  
20:25:53  39  	-- xform input data to winsorized data
20:25:53  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:25:53  41  	  clip_table_name => 'svmc_clip',
20:25:53  42  	  data_table_name => '&bldtable',
20:25:53  43  	  xform_view_name => 'svmc_winsor');
20:25:53  44  
20:25:53  45  	-- create normalization table
20:25:53  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:25:53  47  
20:25:53  48  	-- populate normalization table based on winsorized data
20:25:53  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:25:53  50  	  norm_table_name => 'svmc_norm',
20:25:53  51  	  data_table_name => 'svmc_winsor',
20:25:53  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:25:53  53  
20:25:53  54  	-- normalize the original data
20:25:53  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:25:53  56  	  norm_table_name => 'svmc_norm',
20:25:53  57  	  data_table_name => '&bldtable',
20:25:53  58  	  xform_view_name => 'svmc_build_prep');
20:25:53  59  END;
20:25:53  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.77
20:25:55 SQL> 
20:25:55 SQL> ---------------------
20:25:55 SQL> -- CREATE A NEW MODEL
20:25:55 SQL> --
20:25:55 SQL> -- Cleanup old model with the same name for repeat runs
20:25:55 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:25:55   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:25:55   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.02
20:25:56 SQL> 
20:25:56 SQL> -- Build a new SVM Model
20:25:56 SQL> BEGIN
20:25:56   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:25:56   3  	  model_name	      => '&model_name',
20:25:56   4  	  mining_function     => dbms_data_mining.classification,
20:25:56   5  	  data_table_name     => 'svmc_build_prep',
20:25:56   6  	  case_id_column_name => '&case_id',
20:25:56   7  	  target_column_name  => '&target',
20:25:56   8  	  settings_table_name => 'svmc_settings');
20:25:56   9  END;
20:25:56  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:05.49
20:26:01 SQL> 
20:26:01 SQL> -----------------------------------------------------------------------
20:26:01 SQL> --			       APPLY/score THE MODEL
20:26:01 SQL> -----------------------------------------------------------------------
20:26:01 SQL> 
20:26:01 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:26:01 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:26:01   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:26:01   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:26:01 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:26:01   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:26:01   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:26:01 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:26:01   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:26:01   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
20:26:01 SQL> -----------------------
20:26:01 SQL> -- PREPARE SCORING DATA
20:26:01 SQL> --
20:26:01 SQL> -- If the data for model creation has been prepared, then the data
20:26:01 SQL> -- to be scored using the model must be prepared in the same manner
20:26:01 SQL> -- in order to obtain meaningful results.
20:26:01 SQL> --
20:26:01 SQL> -- 1. Missing Value treatment for all Predictors and
20:26:01 SQL> -- 2. Normalization
20:26:01 SQL> -- No outlier treatment will be performed during test and apply. The
20:26:01 SQL> -- normalization step is sufficient, since the normalization parameters
20:26:01 SQL> -- already capture the effects of outlier treatment done with build data.
20:26:01 SQL> --
20:26:01 SQL> BEGIN
20:26:01   2  	-- Xform Test data to replace missing values
20:26:01   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:26:01   4  	  miss_table_name => 'svmc_miss_num',
20:26:01   5  	  data_table_name => '&scoretable',
20:26:01   6  	  xform_view_name => 'xformed_apply_miss_num');
20:26:01   7  
20:26:01   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:26:01   9  	  miss_table_name => 'svmc_miss_cat',
20:26:01  10  	  data_table_name => '&scoretable',
20:26:01  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:26:01  12  
20:26:01  13  	-- Normalize the data to be scored
20:26:01  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:26:01  15  	  norm_table_name => 'svmc_norm',
20:26:01  16  	  data_table_name => '&scoretable',
20:26:01  17  	  xform_view_name => 'svmc_apply_prep');
20:26:01  18  END;
20:26:01  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.17
20:26:02 SQL> 
20:26:02 SQL> -- Maybe I already collected a score for this prdate.
20:26:02 SQL> -- DELETE it if I did:
20:26:02 SQL> DELETE svm62scores
20:26:02   2  WHERE score > 0
20:26:02   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:26:02   4  -- I need to supply the target attribute name:
20:26:02   5  AND targ = '&1'
20:26:02   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gattn'

0 rows deleted.

Elapsed: 00:00:00.01
20:26:02 SQL> 
20:26:02 SQL> -- We do a drumroll here:
20:26:02 SQL> 
20:26:02 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:26:02   2  SELECT
20:26:02   3  prdate
20:26:02   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:26:02   5  ,sysdate
20:26:02   6  ,SUBSTR(prdate,1,7)pair
20:26:02   7  ,SUBSTR(prdate,-19)ydate
20:26:02   8  ,'&1'
20:26:02   9  FROM svmc_apply_prep
20:26:02  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gattn'

1 row created.

Elapsed: 00:00:00.05
20:26:02 SQL> @score1_5min_gattn.sql	2010-11-01 04:40:01 aud_usd
20:26:02 SQL> --
20:26:02 SQL> -- score1_5min_gattn.sql
20:26:02 SQL> --
20:26:02 SQL> 
20:26:02 SQL> -- Demo:
20:26:02 SQL> -- @score1_5min_gattn.sql 2010-12-31 20:45:01 aud_usd
20:26:02 SQL> 
20:26:02 SQL> CREATE OR REPLACE VIEW sme AS
20:26:02   2  SELECT
20:26:02   3  prdate
20:26:02   4  ,NULL gattn
20:26:02   5  ,g00
20:26:02   6  ,g01
20:26:02   7  ,g02
20:26:02   8  ,g03
20:26:02   9  ,g04
20:26:02  10  ,g05
20:26:02  11  ,g06
20:26:02  12  ,g07
20:26:02  13  ,g08
20:26:02  14  ,g09
20:26:02  15  ,g10
20:26:02  16  ,g11
20:26:02  17  ,g12
20:26:02  18  ,g13
20:26:02  19  ,g14
20:26:02  20  ,g15
20:26:02  21  ,g16
20:26:02  22  ,g17
20:26:02  23  ,g18
20:26:02  24  ,g19
20:26:02  25  ,g20
20:26:02  26  ,g21
20:26:02  27  ,g22
20:26:02  28  ,g23
20:26:02  29  ,g24
20:26:02  30  ,g25
20:26:02  31  ,g26
20:26:02  32  ,g27
20:26:02  33  ,g28
20:26:02  34  ,g29
20:26:02  35  ,g30
20:26:02  36  ,g31
20:26:02  37  ,g32
20:26:02  38  ,g33
20:26:02  39  ,g34
20:26:02  40  ,g35
20:26:02  41  ,g36
20:26:02  42  ,g37
20:26:02  43  ,g38
20:26:02  44  ,g39
20:26:02  45  ,g40
20:26:02  46  ,g41
20:26:02  47  FROM modsrc
20:26:02  48  WHERE ydate = '&1'||' '||'&2'
20:26:02  49  AND pair = '&3'
20:26:02  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-11-01'||' '||'04:40:01'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.05
20:26:02 SQL> 
20:26:02 SQL> -- rpt
20:26:02 SQL> -- We should see just 1 row:
20:26:02 SQL> 
20:26:02 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.01
20:26:02 SQL> 
20:26:02 SQL> -- Build the model:
20:26:02 SQL> CREATE OR REPLACE VIEW bme AS
20:26:02   2  SELECT
20:26:02   3  prdate
20:26:02   4  ,gattn
20:26:02   5  ,g00
20:26:02   6  ,g01
20:26:02   7  ,g02
20:26:02   8  ,g03
20:26:02   9  ,g04
20:26:02  10  ,g05
20:26:02  11  ,g06
20:26:02  12  ,g07
20:26:02  13  ,g08
20:26:02  14  ,g09
20:26:02  15  ,g10
20:26:02  16  ,g11
20:26:02  17  ,g12
20:26:02  18  ,g13
20:26:02  19  ,g14
20:26:02  20  ,g15
20:26:02  21  ,g16
20:26:02  22  ,g17
20:26:02  23  ,g18
20:26:02  24  ,g19
20:26:02  25  ,g20
20:26:02  26  ,g21
20:26:02  27  ,g22
20:26:02  28  ,g23
20:26:02  29  ,g24
20:26:02  30  ,g25
20:26:02  31  ,g26
20:26:02  32  ,g27
20:26:02  33  ,g28
20:26:02  34  ,g29
20:26:02  35  ,g30
20:26:02  36  ,g31
20:26:02  37  ,g32
20:26:02  38  ,g33
20:26:02  39  ,g34
20:26:02  40  ,g35
20:26:02  41  ,g36
20:26:02  42  ,g37
20:26:02  43  ,g38
20:26:02  44  ,g39
20:26:02  45  ,g40
20:26:02  46  ,g41
20:26:02  47  FROM modsrc
20:26:02  48  WHERE gattn IN('nup','up')
20:26:02  49  -- Use only rows which are older than 1 day:
20:26:02  50  AND 1+ydate < '&1'||' '||'&2'
20:26:02  51  AND pair = '&3'
20:26:02  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-11-01'||' '||'04:40:01'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:26:02 SQL> 
20:26:02 SQL> -- rpt
20:26:02 SQL> 
20:26:02 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	     3341
up	     1899

Elapsed: 00:00:00.02
20:26:02 SQL> 
20:26:02 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-10-29 21:50:01

Elapsed: 00:00:00.01
20:26:02 SQL> 
20:26:02 SQL> -- Now build model from bme and score sme
20:26:02 SQL> @score1.sql gattn
20:26:02 SQL> --
20:26:02 SQL> -- score1.sql
20:26:02 SQL> --
20:26:02 SQL> 
20:26:02 SQL> -- I use this script to send 5 params to score.sql
20:26:02 SQL> -- which does the heavy lifting of creating an SVM model.
20:26:02 SQL> -- Then at the very end of this script I use the model
20:26:02 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:26:02 SQL> 
20:26:02 SQL> -- I call this script from 2 other scripts:
20:26:02 SQL> -- score1_5min.sql
20:26:02 SQL> -- score1_5min_gattn.sql
20:26:02 SQL> 
20:26:02 SQL> -- The 1st param is the name of the target attribute.
20:26:02 SQL> -- I like to call my target attributes either gatt or gattn.
20:26:02 SQL> 
20:26:02 SQL> -- Demo:
20:26:02 SQL> -- @score1.sql 'gatt'
20:26:02 SQL> -- @score1.sql 'gattn'
20:26:02 SQL> 
20:26:02 SQL> -- Now, I fill up svmc_apply_prep.
20:26:02 SQL> -- I use same model_name used in score.sql
20:26:02 SQL> DEFINE model_name = 'svmfx101'
20:26:02 SQL> DEFINE bldtable	= 'bme'
20:26:02 SQL> DEFINE scoretable = 'sme'
20:26:02 SQL> DEFINE case_id	= 'prdate'
20:26:02 SQL> -- Demo:
20:26:02 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:26:02 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:26:02 SQL> --
20:26:02 SQL> -- score.sql
20:26:02 SQL> --
20:26:02 SQL> 
20:26:02 SQL> -- usage: score.sql
20:26:02 SQL> 
20:26:02 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:26:02 SQL> 
20:26:02 SQL> -- DEFINE target	   = 'gatt'
20:26:02 SQL> -- DEFINE model_name = 'svmfx101'
20:26:02 SQL> -- DEFINE bldtable   = 'bme'
20:26:02 SQL> -- DEFINE scoretable = 'sme'
20:26:02 SQL> -- DEFINE case_id    = 'prdate'
20:26:02 SQL> 
20:26:02 SQL> DEFINE target	= '&1'
20:26:02 SQL> DEFINE model_name = '&2'
20:26:02 SQL> DEFINE bldtable	= '&3'
20:26:02 SQL> DEFINE scoretable = '&4'
20:26:02 SQL> DEFINE case_id	= '&5'
20:26:02 SQL> 
20:26:02 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:26:02 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:26:02 SQL> 
20:26:02 SQL> -- Builds an SVM model using pl/sql.
20:26:02 SQL> 
20:26:02 SQL> -----------------------------------------------------------------------
20:26:02 SQL> --			    BUILD THE MODEL
20:26:02 SQL> -----------------------------------------------------------------------
20:26:02 SQL> 
20:26:02 SQL> -- Cleanup old build data preparation objects for repeat runs
20:26:02 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.01
20:26:02 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:26:02 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:26:02 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.00
20:26:02 SQL> 
20:26:02 SQL> 
20:26:02 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:26:02 SQL> --
20:26:02 SQL> -- DROP	TABLE svmc_settings ;
20:26:02 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:26:02 SQL> -- DELETE svmc_settings;
20:26:02 SQL> 
20:26:02 SQL> -- The default classification algorithm is Naive Bayes. So override
20:26:02 SQL> -- this choice to SVM using a settings table.
20:26:02 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:26:02 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:26:02 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:26:02 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:26:02 SQL> -- models.
20:26:02 SQL> --
20:26:02 SQL> 
20:26:02 SQL> -- Do this once and then comment it out.
20:26:02 SQL> -- That makes script go faster.
20:26:02 SQL> -- BEGIN
20:26:02 SQL> -- -- Populate settings table
20:26:02 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:26:02 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:26:02 SQL> --
20:26:02 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:26:02 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:26:02 SQL> --
20:26:02 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:26:02 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:26:02 SQL> --   COMMIT;
20:26:02 SQL> -- END;
20:26:02 SQL> -- /
20:26:02 SQL> 
20:26:02 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.01
20:26:02 SQL> 
20:26:02 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:26:02   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:26:02   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:26:02 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:26:02   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:26:02   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:26:02 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:26:02   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:26:02   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:26:02 SQL> 
20:26:02 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:26:02   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:26:02   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:26:02 SQL> 
20:26:02 SQL> --------------------------------
20:26:02 SQL> -- PREPARE BUILD (TRAINING) DATA
20:26:02 SQL> --
20:26:02 SQL> 
20:26:02 SQL> -- 1. Missing Value treatment for all Predictors and
20:26:02 SQL> -- 2. Outlier Treatment and
20:26:02 SQL> -- 3. Normalization are performed below.
20:26:02 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:26:02 SQL> --    normalized here.
20:26:02 SQL> 
20:26:02 SQL> BEGIN
20:26:02   2  	-- Perform missing value treatment for all predictors
20:26:02   3  	-- create miss tables
20:26:02   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:26:02   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:26:02   6  
20:26:02   7  	-- populate miss tables
20:26:02   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:26:02   9  	  miss_table_name => 'svmc_miss_num',
20:26:02  10  	  data_table_name => '&bldtable',
20:26:02  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:26:02  12  
20:26:02  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:26:02  14  	  miss_table_name => 'svmc_miss_cat',
20:26:02  15  	  data_table_name => '&bldtable',
20:26:02  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:26:02  17  
20:26:02  18  	-- xform input data to replace missing values
20:26:02  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:26:02  20  	  miss_table_name => 'svmc_miss_num',
20:26:02  21  	  data_table_name => '&bldtable',
20:26:02  22  	  xform_view_name => 'xformed_build_miss_num');
20:26:02  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:26:02  24  	  miss_table_name => 'svmc_miss_cat',
20:26:02  25  	  data_table_name => '&bldtable',
20:26:02  26  	  xform_view_name => 'xformed_build_miss_cat');
20:26:02  27  
20:26:02  28  	-- Perform outlier treatment.
20:26:02  29  	-- create clip table
20:26:02  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:26:02  31  
20:26:02  32  	-- populate clip table
20:26:02  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:26:02  34  	  clip_table_name => 'svmc_clip',
20:26:02  35  	  data_table_name => '&bldtable',
20:26:02  36  	  tail_frac	  => 0.025,
20:26:02  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:26:02  38  
20:26:02  39  	-- xform input data to winsorized data
20:26:02  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:26:02  41  	  clip_table_name => 'svmc_clip',
20:26:02  42  	  data_table_name => '&bldtable',
20:26:02  43  	  xform_view_name => 'svmc_winsor');
20:26:02  44  
20:26:02  45  	-- create normalization table
20:26:02  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:26:02  47  
20:26:02  48  	-- populate normalization table based on winsorized data
20:26:02  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:26:02  50  	  norm_table_name => 'svmc_norm',
20:26:02  51  	  data_table_name => 'svmc_winsor',
20:26:02  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:26:02  53  
20:26:02  54  	-- normalize the original data
20:26:02  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:26:02  56  	  norm_table_name => 'svmc_norm',
20:26:02  57  	  data_table_name => '&bldtable',
20:26:02  58  	  xform_view_name => 'svmc_build_prep');
20:26:02  59  END;
20:26:02  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.26
20:26:03 SQL> 
20:26:03 SQL> ---------------------
20:26:03 SQL> -- CREATE A NEW MODEL
20:26:03 SQL> --
20:26:03 SQL> -- Cleanup old model with the same name for repeat runs
20:26:03 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:26:03   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:26:03   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.01
20:26:04 SQL> 
20:26:04 SQL> -- Build a new SVM Model
20:26:04 SQL> BEGIN
20:26:04   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:26:04   3  	  model_name	      => '&model_name',
20:26:04   4  	  mining_function     => dbms_data_mining.classification,
20:26:04   5  	  data_table_name     => 'svmc_build_prep',
20:26:04   6  	  case_id_column_name => '&case_id',
20:26:04   7  	  target_column_name  => '&target',
20:26:04   8  	  settings_table_name => 'svmc_settings');
20:26:04   9  END;
20:26:04  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:03.48
20:26:08 SQL> 
20:26:08 SQL> -----------------------------------------------------------------------
20:26:08 SQL> --			       APPLY/score THE MODEL
20:26:08 SQL> -----------------------------------------------------------------------
20:26:08 SQL> 
20:26:08 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:26:08 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:26:08   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:26:08   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:26:08 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:26:08   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:26:08   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:26:08 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:26:08   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:26:08   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:26:08 SQL> -----------------------
20:26:08 SQL> -- PREPARE SCORING DATA
20:26:08 SQL> --
20:26:08 SQL> -- If the data for model creation has been prepared, then the data
20:26:08 SQL> -- to be scored using the model must be prepared in the same manner
20:26:08 SQL> -- in order to obtain meaningful results.
20:26:08 SQL> --
20:26:08 SQL> -- 1. Missing Value treatment for all Predictors and
20:26:08 SQL> -- 2. Normalization
20:26:08 SQL> -- No outlier treatment will be performed during test and apply. The
20:26:08 SQL> -- normalization step is sufficient, since the normalization parameters
20:26:08 SQL> -- already capture the effects of outlier treatment done with build data.
20:26:08 SQL> --
20:26:08 SQL> BEGIN
20:26:08   2  	-- Xform Test data to replace missing values
20:26:08   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:26:08   4  	  miss_table_name => 'svmc_miss_num',
20:26:08   5  	  data_table_name => '&scoretable',
20:26:08   6  	  xform_view_name => 'xformed_apply_miss_num');
20:26:08   7  
20:26:08   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:26:08   9  	  miss_table_name => 'svmc_miss_cat',
20:26:08  10  	  data_table_name => '&scoretable',
20:26:08  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:26:08  12  
20:26:08  13  	-- Normalize the data to be scored
20:26:08  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:26:08  15  	  norm_table_name => 'svmc_norm',
20:26:08  16  	  data_table_name => '&scoretable',
20:26:08  17  	  xform_view_name => 'svmc_apply_prep');
20:26:08  18  END;
20:26:08  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.18
20:26:08 SQL> 
20:26:08 SQL> -- Maybe I already collected a score for this prdate.
20:26:08 SQL> -- DELETE it if I did:
20:26:08 SQL> DELETE svm62scores
20:26:08   2  WHERE score > 0
20:26:08   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:26:08   4  -- I need to supply the target attribute name:
20:26:08   5  AND targ = '&1'
20:26:08   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gattn'

0 rows deleted.

Elapsed: 00:00:00.02
20:26:08 SQL> 
20:26:08 SQL> -- We do a drumroll here:
20:26:08 SQL> 
20:26:08 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:26:08   2  SELECT
20:26:08   3  prdate
20:26:08   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:26:08   5  ,sysdate
20:26:08   6  ,SUBSTR(prdate,1,7)pair
20:26:08   7  ,SUBSTR(prdate,-19)ydate
20:26:08   8  ,'&1'
20:26:08   9  FROM svmc_apply_prep
20:26:08  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gattn'

1 row created.

Elapsed: 00:00:00.05
20:26:08 SQL> @score1_5min_gattn.sql	2010-12-09 21:50:00 aud_usd
20:26:08 SQL> --
20:26:08 SQL> -- score1_5min_gattn.sql
20:26:08 SQL> --
20:26:08 SQL> 
20:26:08 SQL> -- Demo:
20:26:08 SQL> -- @score1_5min_gattn.sql 2010-12-31 20:45:01 aud_usd
20:26:08 SQL> 
20:26:08 SQL> CREATE OR REPLACE VIEW sme AS
20:26:08   2  SELECT
20:26:08   3  prdate
20:26:08   4  ,NULL gattn
20:26:08   5  ,g00
20:26:08   6  ,g01
20:26:08   7  ,g02
20:26:08   8  ,g03
20:26:08   9  ,g04
20:26:08  10  ,g05
20:26:08  11  ,g06
20:26:08  12  ,g07
20:26:08  13  ,g08
20:26:08  14  ,g09
20:26:08  15  ,g10
20:26:08  16  ,g11
20:26:08  17  ,g12
20:26:08  18  ,g13
20:26:08  19  ,g14
20:26:08  20  ,g15
20:26:08  21  ,g16
20:26:08  22  ,g17
20:26:08  23  ,g18
20:26:08  24  ,g19
20:26:08  25  ,g20
20:26:08  26  ,g21
20:26:08  27  ,g22
20:26:08  28  ,g23
20:26:08  29  ,g24
20:26:08  30  ,g25
20:26:08  31  ,g26
20:26:08  32  ,g27
20:26:08  33  ,g28
20:26:08  34  ,g29
20:26:08  35  ,g30
20:26:08  36  ,g31
20:26:08  37  ,g32
20:26:08  38  ,g33
20:26:08  39  ,g34
20:26:08  40  ,g35
20:26:08  41  ,g36
20:26:08  42  ,g37
20:26:08  43  ,g38
20:26:08  44  ,g39
20:26:08  45  ,g40
20:26:08  46  ,g41
20:26:08  47  FROM modsrc
20:26:08  48  WHERE ydate = '&1'||' '||'&2'
20:26:08  49  AND pair = '&3'
20:26:08  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-12-09'||' '||'21:50:00'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:26:08 SQL> 
20:26:08 SQL> -- rpt
20:26:08 SQL> -- We should see just 1 row:
20:26:08 SQL> 
20:26:08 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.01
20:26:08 SQL> 
20:26:08 SQL> -- Build the model:
20:26:08 SQL> CREATE OR REPLACE VIEW bme AS
20:26:08   2  SELECT
20:26:08   3  prdate
20:26:08   4  ,gattn
20:26:08   5  ,g00
20:26:08   6  ,g01
20:26:08   7  ,g02
20:26:08   8  ,g03
20:26:08   9  ,g04
20:26:08  10  ,g05
20:26:08  11  ,g06
20:26:08  12  ,g07
20:26:08  13  ,g08
20:26:08  14  ,g09
20:26:08  15  ,g10
20:26:08  16  ,g11
20:26:08  17  ,g12
20:26:08  18  ,g13
20:26:08  19  ,g14
20:26:08  20  ,g15
20:26:08  21  ,g16
20:26:08  22  ,g17
20:26:08  23  ,g18
20:26:08  24  ,g19
20:26:08  25  ,g20
20:26:08  26  ,g21
20:26:08  27  ,g22
20:26:08  28  ,g23
20:26:08  29  ,g24
20:26:08  30  ,g25
20:26:08  31  ,g26
20:26:08  32  ,g27
20:26:08  33  ,g28
20:26:08  34  ,g29
20:26:08  35  ,g30
20:26:08  36  ,g31
20:26:08  37  ,g32
20:26:08  38  ,g33
20:26:08  39  ,g34
20:26:08  40  ,g35
20:26:08  41  ,g36
20:26:08  42  ,g37
20:26:08  43  ,g38
20:26:08  44  ,g39
20:26:08  45  ,g40
20:26:08  46  ,g41
20:26:08  47  FROM modsrc
20:26:08  48  WHERE gattn IN('nup','up')
20:26:08  49  -- Use only rows which are older than 1 day:
20:26:08  50  AND 1+ydate < '&1'||' '||'&2'
20:26:08  51  AND pair = '&3'
20:26:08  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-12-09'||' '||'21:50:00'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.03
20:26:08 SQL> 
20:26:08 SQL> -- rpt
20:26:08 SQL> 
20:26:08 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	     8411
up	     4916

Elapsed: 00:00:00.03
20:26:08 SQL> 
20:26:08 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-12-08 21:45:00

Elapsed: 00:00:00.01
20:26:08 SQL> 
20:26:08 SQL> -- Now build model from bme and score sme
20:26:08 SQL> @score1.sql gattn
20:26:08 SQL> --
20:26:08 SQL> -- score1.sql
20:26:08 SQL> --
20:26:08 SQL> 
20:26:08 SQL> -- I use this script to send 5 params to score.sql
20:26:08 SQL> -- which does the heavy lifting of creating an SVM model.
20:26:08 SQL> -- Then at the very end of this script I use the model
20:26:08 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:26:08 SQL> 
20:26:08 SQL> -- I call this script from 2 other scripts:
20:26:08 SQL> -- score1_5min.sql
20:26:08 SQL> -- score1_5min_gattn.sql
20:26:08 SQL> 
20:26:08 SQL> -- The 1st param is the name of the target attribute.
20:26:08 SQL> -- I like to call my target attributes either gatt or gattn.
20:26:08 SQL> 
20:26:08 SQL> -- Demo:
20:26:08 SQL> -- @score1.sql 'gatt'
20:26:08 SQL> -- @score1.sql 'gattn'
20:26:08 SQL> 
20:26:08 SQL> -- Now, I fill up svmc_apply_prep.
20:26:08 SQL> -- I use same model_name used in score.sql
20:26:08 SQL> DEFINE model_name = 'svmfx101'
20:26:08 SQL> DEFINE bldtable	= 'bme'
20:26:08 SQL> DEFINE scoretable = 'sme'
20:26:08 SQL> DEFINE case_id	= 'prdate'
20:26:08 SQL> -- Demo:
20:26:08 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:26:08 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:26:08 SQL> --
20:26:08 SQL> -- score.sql
20:26:08 SQL> --
20:26:08 SQL> 
20:26:08 SQL> -- usage: score.sql
20:26:08 SQL> 
20:26:08 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:26:08 SQL> 
20:26:08 SQL> -- DEFINE target	   = 'gatt'
20:26:08 SQL> -- DEFINE model_name = 'svmfx101'
20:26:08 SQL> -- DEFINE bldtable   = 'bme'
20:26:08 SQL> -- DEFINE scoretable = 'sme'
20:26:08 SQL> -- DEFINE case_id    = 'prdate'
20:26:08 SQL> 
20:26:08 SQL> DEFINE target	= '&1'
20:26:08 SQL> DEFINE model_name = '&2'
20:26:08 SQL> DEFINE bldtable	= '&3'
20:26:08 SQL> DEFINE scoretable = '&4'
20:26:08 SQL> DEFINE case_id	= '&5'
20:26:08 SQL> 
20:26:08 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:26:08 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:26:08 SQL> 
20:26:08 SQL> -- Builds an SVM model using pl/sql.
20:26:08 SQL> 
20:26:08 SQL> -----------------------------------------------------------------------
20:26:08 SQL> --			    BUILD THE MODEL
20:26:08 SQL> -----------------------------------------------------------------------
20:26:08 SQL> 
20:26:08 SQL> -- Cleanup old build data preparation objects for repeat runs
20:26:08 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.01
20:26:08 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:26:08 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:26:08 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.01
20:26:08 SQL> 
20:26:08 SQL> 
20:26:08 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:26:08 SQL> --
20:26:08 SQL> -- DROP	TABLE svmc_settings ;
20:26:08 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:26:08 SQL> -- DELETE svmc_settings;
20:26:08 SQL> 
20:26:08 SQL> -- The default classification algorithm is Naive Bayes. So override
20:26:08 SQL> -- this choice to SVM using a settings table.
20:26:08 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:26:08 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:26:08 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:26:08 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:26:08 SQL> -- models.
20:26:08 SQL> --
20:26:08 SQL> 
20:26:08 SQL> -- Do this once and then comment it out.
20:26:08 SQL> -- That makes script go faster.
20:26:08 SQL> -- BEGIN
20:26:08 SQL> -- -- Populate settings table
20:26:08 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:26:08 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:26:08 SQL> --
20:26:08 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:26:08 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:26:08 SQL> --
20:26:08 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:26:08 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:26:08 SQL> --   COMMIT;
20:26:08 SQL> -- END;
20:26:08 SQL> -- /
20:26:08 SQL> 
20:26:08 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:26:08 SQL> 
20:26:08 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:26:08   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:26:08   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
20:26:08 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:26:08   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:26:08   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:26:08 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:26:08   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:26:08   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:26:08 SQL> 
20:26:08 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:26:08   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:26:08   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:26:08 SQL> 
20:26:08 SQL> --------------------------------
20:26:08 SQL> -- PREPARE BUILD (TRAINING) DATA
20:26:08 SQL> --
20:26:08 SQL> 
20:26:08 SQL> -- 1. Missing Value treatment for all Predictors and
20:26:08 SQL> -- 2. Outlier Treatment and
20:26:08 SQL> -- 3. Normalization are performed below.
20:26:08 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:26:08 SQL> --    normalized here.
20:26:08 SQL> 
20:26:08 SQL> BEGIN
20:26:08   2  	-- Perform missing value treatment for all predictors
20:26:08   3  	-- create miss tables
20:26:08   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:26:08   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:26:08   6  
20:26:08   7  	-- populate miss tables
20:26:08   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:26:08   9  	  miss_table_name => 'svmc_miss_num',
20:26:08  10  	  data_table_name => '&bldtable',
20:26:08  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:26:08  12  
20:26:08  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:26:08  14  	  miss_table_name => 'svmc_miss_cat',
20:26:08  15  	  data_table_name => '&bldtable',
20:26:08  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:26:08  17  
20:26:08  18  	-- xform input data to replace missing values
20:26:08  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:26:08  20  	  miss_table_name => 'svmc_miss_num',
20:26:08  21  	  data_table_name => '&bldtable',
20:26:08  22  	  xform_view_name => 'xformed_build_miss_num');
20:26:08  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:26:08  24  	  miss_table_name => 'svmc_miss_cat',
20:26:08  25  	  data_table_name => '&bldtable',
20:26:08  26  	  xform_view_name => 'xformed_build_miss_cat');
20:26:08  27  
20:26:08  28  	-- Perform outlier treatment.
20:26:08  29  	-- create clip table
20:26:08  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:26:08  31  
20:26:08  32  	-- populate clip table
20:26:08  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:26:08  34  	  clip_table_name => 'svmc_clip',
20:26:08  35  	  data_table_name => '&bldtable',
20:26:08  36  	  tail_frac	  => 0.025,
20:26:08  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:26:08  38  
20:26:08  39  	-- xform input data to winsorized data
20:26:08  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:26:08  41  	  clip_table_name => 'svmc_clip',
20:26:08  42  	  data_table_name => '&bldtable',
20:26:08  43  	  xform_view_name => 'svmc_winsor');
20:26:08  44  
20:26:08  45  	-- create normalization table
20:26:08  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:26:08  47  
20:26:08  48  	-- populate normalization table based on winsorized data
20:26:08  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:26:08  50  	  norm_table_name => 'svmc_norm',
20:26:08  51  	  data_table_name => 'svmc_winsor',
20:26:08  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:26:08  53  
20:26:08  54  	-- normalize the original data
20:26:08  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:26:08  56  	  norm_table_name => 'svmc_norm',
20:26:08  57  	  data_table_name => '&bldtable',
20:26:08  58  	  xform_view_name => 'svmc_build_prep');
20:26:08  59  END;
20:26:08  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.94
20:26:10 SQL> 
20:26:10 SQL> ---------------------
20:26:10 SQL> -- CREATE A NEW MODEL
20:26:10 SQL> --
20:26:10 SQL> -- Cleanup old model with the same name for repeat runs
20:26:10 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:26:10   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:26:10   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.99
20:26:11 SQL> 
20:26:11 SQL> -- Build a new SVM Model
20:26:11 SQL> BEGIN
20:26:11   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:26:11   3  	  model_name	      => '&model_name',
20:26:11   4  	  mining_function     => dbms_data_mining.classification,
20:26:11   5  	  data_table_name     => 'svmc_build_prep',
20:26:11   6  	  case_id_column_name => '&case_id',
20:26:11   7  	  target_column_name  => '&target',
20:26:11   8  	  settings_table_name => 'svmc_settings');
20:26:11   9  END;
20:26:11  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:04.52
20:26:16 SQL> 
20:26:16 SQL> -----------------------------------------------------------------------
20:26:16 SQL> --			       APPLY/score THE MODEL
20:26:16 SQL> -----------------------------------------------------------------------
20:26:16 SQL> 
20:26:16 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:26:16 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:26:16   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:26:16   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:26:16 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:26:16   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:26:16   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:26:16 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:26:16   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:26:16   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:26:16 SQL> -----------------------
20:26:16 SQL> -- PREPARE SCORING DATA
20:26:16 SQL> --
20:26:16 SQL> -- If the data for model creation has been prepared, then the data
20:26:16 SQL> -- to be scored using the model must be prepared in the same manner
20:26:16 SQL> -- in order to obtain meaningful results.
20:26:16 SQL> --
20:26:16 SQL> -- 1. Missing Value treatment for all Predictors and
20:26:16 SQL> -- 2. Normalization
20:26:16 SQL> -- No outlier treatment will be performed during test and apply. The
20:26:16 SQL> -- normalization step is sufficient, since the normalization parameters
20:26:16 SQL> -- already capture the effects of outlier treatment done with build data.
20:26:16 SQL> --
20:26:16 SQL> BEGIN
20:26:16   2  	-- Xform Test data to replace missing values
20:26:16   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:26:16   4  	  miss_table_name => 'svmc_miss_num',
20:26:16   5  	  data_table_name => '&scoretable',
20:26:16   6  	  xform_view_name => 'xformed_apply_miss_num');
20:26:16   7  
20:26:16   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:26:16   9  	  miss_table_name => 'svmc_miss_cat',
20:26:16  10  	  data_table_name => '&scoretable',
20:26:16  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:26:16  12  
20:26:16  13  	-- Normalize the data to be scored
20:26:16  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:26:16  15  	  norm_table_name => 'svmc_norm',
20:26:16  16  	  data_table_name => '&scoretable',
20:26:16  17  	  xform_view_name => 'svmc_apply_prep');
20:26:16  18  END;
20:26:16  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.15
20:26:16 SQL> 
20:26:16 SQL> -- Maybe I already collected a score for this prdate.
20:26:16 SQL> -- DELETE it if I did:
20:26:16 SQL> DELETE svm62scores
20:26:16   2  WHERE score > 0
20:26:16   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:26:16   4  -- I need to supply the target attribute name:
20:26:16   5  AND targ = '&1'
20:26:16   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gattn'

0 rows deleted.

Elapsed: 00:00:00.01
20:26:16 SQL> 
20:26:16 SQL> -- We do a drumroll here:
20:26:16 SQL> 
20:26:16 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:26:16   2  SELECT
20:26:16   3  prdate
20:26:16   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:26:16   5  ,sysdate
20:26:16   6  ,SUBSTR(prdate,1,7)pair
20:26:16   7  ,SUBSTR(prdate,-19)ydate
20:26:16   8  ,'&1'
20:26:16   9  FROM svmc_apply_prep
20:26:16  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gattn'

1 row created.

Elapsed: 00:00:00.05
20:26:16 SQL> @score1_5min_gattn.sql	2010-12-09 14:10:00 aud_usd
20:26:16 SQL> --
20:26:16 SQL> -- score1_5min_gattn.sql
20:26:16 SQL> --
20:26:16 SQL> 
20:26:16 SQL> -- Demo:
20:26:16 SQL> -- @score1_5min_gattn.sql 2010-12-31 20:45:01 aud_usd
20:26:16 SQL> 
20:26:16 SQL> CREATE OR REPLACE VIEW sme AS
20:26:16   2  SELECT
20:26:16   3  prdate
20:26:16   4  ,NULL gattn
20:26:16   5  ,g00
20:26:16   6  ,g01
20:26:16   7  ,g02
20:26:16   8  ,g03
20:26:16   9  ,g04
20:26:16  10  ,g05
20:26:16  11  ,g06
20:26:16  12  ,g07
20:26:16  13  ,g08
20:26:16  14  ,g09
20:26:16  15  ,g10
20:26:16  16  ,g11
20:26:16  17  ,g12
20:26:16  18  ,g13
20:26:16  19  ,g14
20:26:16  20  ,g15
20:26:16  21  ,g16
20:26:16  22  ,g17
20:26:16  23  ,g18
20:26:16  24  ,g19
20:26:16  25  ,g20
20:26:16  26  ,g21
20:26:16  27  ,g22
20:26:16  28  ,g23
20:26:16  29  ,g24
20:26:16  30  ,g25
20:26:16  31  ,g26
20:26:16  32  ,g27
20:26:16  33  ,g28
20:26:16  34  ,g29
20:26:16  35  ,g30
20:26:16  36  ,g31
20:26:16  37  ,g32
20:26:16  38  ,g33
20:26:16  39  ,g34
20:26:16  40  ,g35
20:26:16  41  ,g36
20:26:16  42  ,g37
20:26:16  43  ,g38
20:26:16  44  ,g39
20:26:16  45  ,g40
20:26:16  46  ,g41
20:26:16  47  FROM modsrc
20:26:16  48  WHERE ydate = '&1'||' '||'&2'
20:26:16  49  AND pair = '&3'
20:26:16  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-12-09'||' '||'14:10:00'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:26:16 SQL> 
20:26:16 SQL> -- rpt
20:26:16 SQL> -- We should see just 1 row:
20:26:16 SQL> 
20:26:16 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.01
20:26:16 SQL> 
20:26:16 SQL> -- Build the model:
20:26:16 SQL> CREATE OR REPLACE VIEW bme AS
20:26:16   2  SELECT
20:26:16   3  prdate
20:26:16   4  ,gattn
20:26:16   5  ,g00
20:26:16   6  ,g01
20:26:16   7  ,g02
20:26:16   8  ,g03
20:26:16   9  ,g04
20:26:16  10  ,g05
20:26:16  11  ,g06
20:26:16  12  ,g07
20:26:16  13  ,g08
20:26:16  14  ,g09
20:26:16  15  ,g10
20:26:16  16  ,g11
20:26:16  17  ,g12
20:26:16  18  ,g13
20:26:16  19  ,g14
20:26:16  20  ,g15
20:26:16  21  ,g16
20:26:16  22  ,g17
20:26:16  23  ,g18
20:26:16  24  ,g19
20:26:16  25  ,g20
20:26:16  26  ,g21
20:26:16  27  ,g22
20:26:16  28  ,g23
20:26:16  29  ,g24
20:26:16  30  ,g25
20:26:16  31  ,g26
20:26:16  32  ,g27
20:26:16  33  ,g28
20:26:16  34  ,g29
20:26:16  35  ,g30
20:26:16  36  ,g31
20:26:16  37  ,g32
20:26:16  38  ,g33
20:26:16  39  ,g34
20:26:16  40  ,g35
20:26:16  41  ,g36
20:26:16  42  ,g37
20:26:16  43  ,g38
20:26:16  44  ,g39
20:26:16  45  ,g40
20:26:16  46  ,g41
20:26:16  47  FROM modsrc
20:26:16  48  WHERE gattn IN('nup','up')
20:26:16  49  -- Use only rows which are older than 1 day:
20:26:16  50  AND 1+ydate < '&1'||' '||'&2'
20:26:16  51  AND pair = '&3'
20:26:16  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-12-09'||' '||'14:10:00'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.05
20:26:16 SQL> 
20:26:16 SQL> -- rpt
20:26:16 SQL> 
20:26:16 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	     8332
up	     4903

Elapsed: 00:00:00.02
20:26:16 SQL> 
20:26:16 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
--------------------------
aud_usd2010-12-08 14:05:00

Elapsed: 00:00:00.02
20:26:16 SQL> 
20:26:16 SQL> -- Now build model from bme and score sme
20:26:16 SQL> @score1.sql gattn
20:26:16 SQL> --
20:26:16 SQL> -- score1.sql
20:26:16 SQL> --
20:26:16 SQL> 
20:26:16 SQL> -- I use this script to send 5 params to score.sql
20:26:16 SQL> -- which does the heavy lifting of creating an SVM model.
20:26:16 SQL> -- Then at the very end of this script I use the model
20:26:16 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:26:16 SQL> 
20:26:16 SQL> -- I call this script from 2 other scripts:
20:26:16 SQL> -- score1_5min.sql
20:26:16 SQL> -- score1_5min_gattn.sql
20:26:16 SQL> 
20:26:16 SQL> -- The 1st param is the name of the target attribute.
20:26:16 SQL> -- I like to call my target attributes either gatt or gattn.
20:26:16 SQL> 
20:26:16 SQL> -- Demo:
20:26:16 SQL> -- @score1.sql 'gatt'
20:26:16 SQL> -- @score1.sql 'gattn'
20:26:16 SQL> 
20:26:16 SQL> -- Now, I fill up svmc_apply_prep.
20:26:16 SQL> -- I use same model_name used in score.sql
20:26:16 SQL> DEFINE model_name = 'svmfx101'
20:26:16 SQL> DEFINE bldtable	= 'bme'
20:26:16 SQL> DEFINE scoretable = 'sme'
20:26:16 SQL> DEFINE case_id	= 'prdate'
20:26:16 SQL> -- Demo:
20:26:16 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:26:16 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:26:16 SQL> --
20:26:16 SQL> -- score.sql
20:26:16 SQL> --
20:26:16 SQL> 
20:26:16 SQL> -- usage: score.sql
20:26:16 SQL> 
20:26:16 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:26:16 SQL> 
20:26:16 SQL> -- DEFINE target	   = 'gatt'
20:26:16 SQL> -- DEFINE model_name = 'svmfx101'
20:26:16 SQL> -- DEFINE bldtable   = 'bme'
20:26:16 SQL> -- DEFINE scoretable = 'sme'
20:26:16 SQL> -- DEFINE case_id    = 'prdate'
20:26:16 SQL> 
20:26:16 SQL> DEFINE target	= '&1'
20:26:16 SQL> DEFINE model_name = '&2'
20:26:16 SQL> DEFINE bldtable	= '&3'
20:26:16 SQL> DEFINE scoretable = '&4'
20:26:16 SQL> DEFINE case_id	= '&5'
20:26:16 SQL> 
20:26:16 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:26:16 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:26:16 SQL> 
20:26:16 SQL> -- Builds an SVM model using pl/sql.
20:26:16 SQL> 
20:26:16 SQL> -----------------------------------------------------------------------
20:26:16 SQL> --			    BUILD THE MODEL
20:26:16 SQL> -----------------------------------------------------------------------
20:26:16 SQL> 
20:26:16 SQL> -- Cleanup old build data preparation objects for repeat runs
20:26:16 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.00
20:26:16 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.01
20:26:16 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:26:16 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.00
20:26:16 SQL> 
20:26:16 SQL> 
20:26:16 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:26:16 SQL> --
20:26:16 SQL> -- DROP	TABLE svmc_settings ;
20:26:16 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:26:16 SQL> -- DELETE svmc_settings;
20:26:16 SQL> 
20:26:16 SQL> -- The default classification algorithm is Naive Bayes. So override
20:26:16 SQL> -- this choice to SVM using a settings table.
20:26:16 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:26:16 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:26:16 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:26:16 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:26:16 SQL> -- models.
20:26:16 SQL> --
20:26:16 SQL> 
20:26:16 SQL> -- Do this once and then comment it out.
20:26:16 SQL> -- That makes script go faster.
20:26:16 SQL> -- BEGIN
20:26:16 SQL> -- -- Populate settings table
20:26:16 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:26:16 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:26:16 SQL> --
20:26:16 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:26:16 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:26:16 SQL> --
20:26:16 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:26:16 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:26:16 SQL> --   COMMIT;
20:26:16 SQL> -- END;
20:26:16 SQL> -- /
20:26:16 SQL> 
20:26:16 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.01
20:26:16 SQL> 
20:26:16 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:26:16   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:26:16   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:26:16 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:26:16   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:26:16   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:26:16 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:26:16   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:26:16   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:26:16 SQL> 
20:26:16 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:26:16   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:26:16   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.08
20:26:17 SQL> 
20:26:17 SQL> --------------------------------
20:26:17 SQL> -- PREPARE BUILD (TRAINING) DATA
20:26:17 SQL> --
20:26:17 SQL> 
20:26:17 SQL> -- 1. Missing Value treatment for all Predictors and
20:26:17 SQL> -- 2. Outlier Treatment and
20:26:17 SQL> -- 3. Normalization are performed below.
20:26:17 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:26:17 SQL> --    normalized here.
20:26:17 SQL> 
20:26:17 SQL> BEGIN
20:26:17   2  	-- Perform missing value treatment for all predictors
20:26:17   3  	-- create miss tables
20:26:17   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:26:17   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:26:17   6  
20:26:17   7  	-- populate miss tables
20:26:17   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:26:17   9  	  miss_table_name => 'svmc_miss_num',
20:26:17  10  	  data_table_name => '&bldtable',
20:26:17  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:26:17  12  
20:26:17  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:26:17  14  	  miss_table_name => 'svmc_miss_cat',
20:26:17  15  	  data_table_name => '&bldtable',
20:26:17  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:26:17  17  
20:26:17  18  	-- xform input data to replace missing values
20:26:17  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:26:17  20  	  miss_table_name => 'svmc_miss_num',
20:26:17  21  	  data_table_name => '&bldtable',
20:26:17  22  	  xform_view_name => 'xformed_build_miss_num');
20:26:17  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:26:17  24  	  miss_table_name => 'svmc_miss_cat',
20:26:17  25  	  data_table_name => '&bldtable',
20:26:17  26  	  xform_view_name => 'xformed_build_miss_cat');
20:26:17  27  
20:26:17  28  	-- Perform outlier treatment.
20:26:17  29  	-- create clip table
20:26:17  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:26:17  31  
20:26:17  32  	-- populate clip table
20:26:17  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:26:17  34  	  clip_table_name => 'svmc_clip',
20:26:17  35  	  data_table_name => '&bldtable',
20:26:17  36  	  tail_frac	  => 0.025,
20:26:17  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:26:17  38  
20:26:17  39  	-- xform input data to winsorized data
20:26:17  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:26:17  41  	  clip_table_name => 'svmc_clip',
20:26:17  42  	  data_table_name => '&bldtable',
20:26:17  43  	  xform_view_name => 'svmc_winsor');
20:26:17  44  
20:26:17  45  	-- create normalization table
20:26:17  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:26:17  47  
20:26:17  48  	-- populate normalization table based on winsorized data
20:26:17  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:26:17  50  	  norm_table_name => 'svmc_norm',
20:26:17  51  	  data_table_name => 'svmc_winsor',
20:26:17  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:26:17  53  
20:26:17  54  	-- normalize the original data
20:26:17  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:26:17  56  	  norm_table_name => 'svmc_norm',
20:26:17  57  	  data_table_name => '&bldtable',
20:26:17  58  	  xform_view_name => 'svmc_build_prep');
20:26:17  59  END;
20:26:17  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.92
20:26:18 SQL> 
20:26:18 SQL> ---------------------
20:26:18 SQL> -- CREATE A NEW MODEL
20:26:18 SQL> --
20:26:18 SQL> -- Cleanup old model with the same name for repeat runs
20:26:18 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:26:18   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:26:18   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.97
20:26:19 SQL> 
20:26:19 SQL> -- Build a new SVM Model
20:26:19 SQL> BEGIN
20:26:19   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:26:19   3  	  model_name	      => '&model_name',
20:26:19   4  	  mining_function     => dbms_data_mining.classification,
20:26:19   5  	  data_table_name     => 'svmc_build_prep',
20:26:19   6  	  case_id_column_name => '&case_id',
20:26:19   7  	  target_column_name  => '&target',
20:26:19   8  	  settings_table_name => 'svmc_settings');
20:26:19   9  END;
20:26:19  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:03.99
20:26:23 SQL> 
20:26:23 SQL> -----------------------------------------------------------------------
20:26:23 SQL> --			       APPLY/score THE MODEL
20:26:23 SQL> -----------------------------------------------------------------------
20:26:23 SQL> 
20:26:23 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:26:23 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:26:23   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:26:23   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:26:23 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:26:23   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:26:23   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:26:23 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:26:23   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:26:23   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:26:23 SQL> -----------------------
20:26:23 SQL> -- PREPARE SCORING DATA
20:26:23 SQL> --
20:26:23 SQL> -- If the data for model creation has been prepared, then the data
20:26:23 SQL> -- to be scored using the model must be prepared in the same manner
20:26:23 SQL> -- in order to obtain meaningful results.
20:26:23 SQL> --
20:26:23 SQL> -- 1. Missing Value treatment for all Predictors and
20:26:23 SQL> -- 2. Normalization
20:26:23 SQL> -- No outlier treatment will be performed during test and apply. The
20:26:23 SQL> -- normalization step is sufficient, since the normalization parameters
20:26:23 SQL> -- already capture the effects of outlier treatment done with build data.
20:26:23 SQL> --
20:26:23 SQL> BEGIN
20:26:23   2  	-- Xform Test data to replace missing values
20:26:23   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:26:23   4  	  miss_table_name => 'svmc_miss_num',
20:26:23   5  	  data_table_name => '&scoretable',
20:26:23   6  	  xform_view_name => 'xformed_apply_miss_num');
20:26:23   7  
20:26:23   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:26:23   9  	  miss_table_name => 'svmc_miss_cat',
20:26:23  10  	  data_table_name => '&scoretable',
20:26:23  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:26:23  12  
20:26:23  13  	-- Normalize the data to be scored
20:26:23  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:26:23  15  	  norm_table_name => 'svmc_norm',
20:26:23  16  	  data_table_name => '&scoretable',
20:26:23  17  	  xform_view_name => 'svmc_apply_prep');
20:26:23  18  END;
20:26:23  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.18
20:26:24 SQL> 
20:26:24 SQL> -- Maybe I already collected a score for this prdate.
20:26:24 SQL> -- DELETE it if I did:
20:26:24 SQL> DELETE svm62scores
20:26:24   2  WHERE score > 0
20:26:24   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:26:24   4  -- I need to supply the target attribute name:
20:26:24   5  AND targ = '&1'
20:26:24   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gattn'

0 rows deleted.

Elapsed: 00:00:00.02
20:26:24 SQL> 
20:26:24 SQL> -- We do a drumroll here:
20:26:24 SQL> 
20:26:24 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:26:24   2  SELECT
20:26:24   3  prdate
20:26:24   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:26:24   5  ,sysdate
20:26:24   6  ,SUBSTR(prdate,1,7)pair
20:26:24   7  ,SUBSTR(prdate,-19)ydate
20:26:24   8  ,'&1'
20:26:24   9  FROM svmc_apply_prep
20:26:24  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gattn'

1 row created.

Elapsed: 00:00:00.05
20:26:24 SQL> @score1_5min_gattn.sql	2010-11-25 10:25:01 aud_usd
20:26:24 SQL> --
20:26:24 SQL> -- score1_5min_gattn.sql
20:26:24 SQL> --
20:26:24 SQL> 
20:26:24 SQL> -- Demo:
20:26:24 SQL> -- @score1_5min_gattn.sql 2010-12-31 20:45:01 aud_usd
20:26:24 SQL> 
20:26:24 SQL> CREATE OR REPLACE VIEW sme AS
20:26:24   2  SELECT
20:26:24   3  prdate
20:26:24   4  ,NULL gattn
20:26:24   5  ,g00
20:26:24   6  ,g01
20:26:24   7  ,g02
20:26:24   8  ,g03
20:26:24   9  ,g04
20:26:24  10  ,g05
20:26:24  11  ,g06
20:26:24  12  ,g07
20:26:24  13  ,g08
20:26:24  14  ,g09
20:26:24  15  ,g10
20:26:24  16  ,g11
20:26:24  17  ,g12
20:26:24  18  ,g13
20:26:24  19  ,g14
20:26:24  20  ,g15
20:26:24  21  ,g16
20:26:24  22  ,g17
20:26:24  23  ,g18
20:26:24  24  ,g19
20:26:24  25  ,g20
20:26:24  26  ,g21
20:26:24  27  ,g22
20:26:24  28  ,g23
20:26:24  29  ,g24
20:26:24  30  ,g25
20:26:24  31  ,g26
20:26:24  32  ,g27
20:26:24  33  ,g28
20:26:24  34  ,g29
20:26:24  35  ,g30
20:26:24  36  ,g31
20:26:24  37  ,g32
20:26:24  38  ,g33
20:26:24  39  ,g34
20:26:24  40  ,g35
20:26:24  41  ,g36
20:26:24  42  ,g37
20:26:24  43  ,g38
20:26:24  44  ,g39
20:26:24  45  ,g40
20:26:24  46  ,g41
20:26:24  47  FROM modsrc
20:26:24  48  WHERE ydate = '&1'||' '||'&2'
20:26:24  49  AND pair = '&3'
20:26:24  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-11-25'||' '||'10:25:01'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.05
20:26:24 SQL> 
20:26:24 SQL> -- rpt
20:26:24 SQL> -- We should see just 1 row:
20:26:24 SQL> 
20:26:24 SQL> SELECT COUNT(prdate) FROM sme
20:26:24   2  
20:26:24 SQL> -- Build the model:
20:26:24 SQL> CREATE OR REPLACE VIEW bme AS
20:26:24   2  SELECT
20:26:24   3  prdate
20:26:24   4  ,gattn
20:26:24   5  ,g00
20:26:24   6  ,g01
20:26:24   7  ,g02
20:26:24   8  ,g03
20:26:24   9  ,g04
20:26:24  10  ,g05
20:26:24  11  ,g06
20:26:24  12  ,g07
20:26:24  13  ,g08
20:26:24  14  ,g09
20:26:24  15  ,g10
20:26:24  16  ,g11
20:26:24  17  ,g12
20:26:24  18  ,g13
20:26:24  19  ,g14
20:26:24  20  ,g15
20:26:24  21  ,g16
20:26:24  22  ,g17
20:26:24  23  ,g18
20:26:24  24  ,g19
20:26:24  25  ,g20
20:26:24  26  ,g21
20:26:24  27  ,g22
20:26:24  28  ,g23
20:26:24  29  ,g24
20:26:24  30  ,g25
20:26:24  31  ,g26
20:26:24  32  ,g27
20:26:24  33  ,g28
20:26:24  34  ,g29
20:26:24  35  ,g30
20:26:24  36  ,g31
20:26:24  37  ,g32
20:26:24  38  ,g33
20:26:24  39  ,g34
20:26:24  40  ,g35
20:26:24  41  ,g36
20:26:24  42  ,g37
20:26:24  43  ,g38
20:26:24  44  ,g39
20:26:24  45  ,g40
20:26:24  46  ,g41
20:26:24  47  FROM modsrc
20:26:24  48  WHERE gattn IN('nup','up')
20:26:24  49  -- Use only rows which are older than 1 day:
20:26:24  50  AND 1+ydate < '&1'||' '||'&2'
20:26:24  51  AND pair = '&3'
20:26:24  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-11-25'||' '||'10:25:01'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.05
20:26:24 SQL> 
20:26:24 SQL> -- rpt
20:26:24 SQL> 
20:26:24 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn
20:26:24   2  
20:26:24 SQL> SELECT MAX(prdate) FROM bme
20:26:24   2  
20:26:24 SQL> -- Now build model from bme and score sme
20:26:24 SQL> @score1.sql gattn
20:26:24 SQL> --
20:26:24 SQL> -- score1.sql
20:26:24 SQL> --
20:26:24 SQL> 
20:26:24 SQL> -- I use this script to send 5 params to score.sql
20:26:24 SQL> -- which does the heavy lifting of creating an SVM model.
20:26:24 SQL> -- Then at the very end of this script I use the model
20:26:24 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:26:24 SQL> 
20:26:24 SQL> -- I call this script from 2 other scripts:
20:26:24 SQL> -- score1_5min.sql
20:26:24 SQL> -- score1_5min_gattn.sql
20:26:24 SQL> 
20:26:24 SQL> -- The 1st param is the name of the target attribute.
20:26:24 SQL> -- I like to call my target attributes either gatt or gattn.
20:26:24 SQL> 
20:26:24 SQL> -- Demo:
20:26:24 SQL> -- @score1.sql 'gatt'
20:26:24 SQL> -- @score1.sql 'gattn'
20:26:24 SQL> 
20:26:24 SQL> -- Now, I fill up svmc_apply_prep.
20:26:24 SQL> -- I use same model_name used in score.sql
20:26:24 SQL> DEFINE model_name = 'svmfx101'
20:26:24 SQL> DEFINE bldtable	= 'bme'
20:26:24 SQL> DEFINE scoretable = 'sme'
20:26:24 SQL> DEFINE case_id	= 'prdate'
20:26:24 SQL> -- Demo:
20:26:24 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:26:24 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:26:24 SQL> --
20:26:24 SQL> -- score.sql
20:26:24 SQL> --
20:26:24 SQL> 
20:26:24 SQL> -- usage: score.sql
20:26:24 SQL> 
20:26:24 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:26:24 SQL> 
20:26:24 SQL> -- DEFINE target	   = 'gatt'
20:26:24 SQL> -- DEFINE model_name = 'svmfx101'
20:26:24 SQL> -- DEFINE bldtable   = 'bme'
20:26:24 SQL> -- DEFINE scoretable = 'sme'
20:26:24 SQL> -- DEFINE case_id    = 'prdate'
20:26:24 SQL> 
20:26:24 SQL> DEFINE target	= '&1'
20:26:24 SQL> DEFINE model_name = '&2'
20:26:24 SQL> DEFINE bldtable	= '&3'
20:26:24 SQL> DEFINE scoretable = '&4'
20:26:24 SQL> DEFINE case_id	= '&5'
20:26:24 SQL> 
20:26:24 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:26:24 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:26:24 SQL> 
20:26:24 SQL> -- Builds an SVM model using pl/sql.
20:26:24 SQL> 
20:26:24 SQL> -----------------------------------------------------------------------
20:26:24 SQL> --			    BUILD THE MODEL
20:26:24 SQL> -----------------------------------------------------------------------
20:26:24 SQL> 
20:26:24 SQL> -- Cleanup old build data preparation objects for repeat runs
20:26:24 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.01
20:26:24 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:26:24 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:26:24 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.00
20:26:24 SQL> 
20:26:24 SQL> 
20:26:24 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:26:24 SQL> --
20:26:24 SQL> -- DROP	TABLE svmc_settings ;
20:26:24 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:26:24 SQL> -- DELETE svmc_settings;
20:26:24 SQL> 
20:26:24 SQL> -- The default classification algorithm is Naive Bayes. So override
20:26:24 SQL> -- this choice to SVM using a settings table.
20:26:24 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:26:24 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:26:24 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:26:24 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:26:24 SQL> -- models.
20:26:24 SQL> --
20:26:24 SQL> 
20:26:24 SQL> -- Do this once and then comment it out.
20:26:24 SQL> -- That makes script go faster.
20:26:24 SQL> -- BEGIN
20:26:24 SQL> -- -- Populate settings table
20:26:24 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:26:24 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:26:24 SQL> --
20:26:24 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:26:24 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:26:24 SQL> --
20:26:24 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:26:24 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:26:24 SQL> --   COMMIT;
20:26:24 SQL> -- END;
20:26:24 SQL> -- /
20:26:24 SQL> 
20:26:24 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.01
20:26:24 SQL> 
20:26:24 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:26:24   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:26:24   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:26:24 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:26:24   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:26:24   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:26:24 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:26:24   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:26:24   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:26:24 SQL> 
20:26:24 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:26:24   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:26:24   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:26:24 SQL> 
20:26:24 SQL> --------------------------------
20:26:24 SQL> -- PREPARE BUILD (TRAINING) DATA
20:26:24 SQL> --
20:26:24 SQL> 
20:26:24 SQL> -- 1. Missing Value treatment for all Predictors and
20:26:24 SQL> -- 2. Outlier Treatment and
20:26:24 SQL> -- 3. Normalization are performed below.
20:26:24 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:26:24 SQL> --    normalized here.
20:26:24 SQL> 
20:26:24 SQL> BEGIN
20:26:24   2  	-- Perform missing value treatment for all predictors
20:26:24   3  	-- create miss tables
20:26:24   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:26:24   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:26:24   6  
20:26:24   7  	-- populate miss tables
20:26:24   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:26:24   9  	  miss_table_name => 'svmc_miss_num',
20:26:24  10  	  data_table_name => '&bldtable',
20:26:24  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:26:24  12  
20:26:24  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:26:24  14  	  miss_table_name => 'svmc_miss_cat',
20:26:24  15  	  data_table_name => '&bldtable',
20:26:24  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:26:24  17  
20:26:24  18  	-- xform input data to replace missing values
20:26:24  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:26:24  20  	  miss_table_name => 'svmc_miss_num',
20:26:24  21  	  data_table_name => '&bldtable',
20:26:24  22  	  xform_view_name => 'xformed_build_miss_num');
20:26:24  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:26:24  24  	  miss_table_name => 'svmc_miss_cat',
20:26:24  25  	  data_table_name => '&bldtable',
20:26:24  26  	  xform_view_name => 'xformed_build_miss_cat');
20:26:24  27  
20:26:24  28  	-- Perform outlier treatment.
20:26:24  29  	-- create clip table
20:26:24  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:26:24  31  
20:26:24  32  	-- populate clip table
20:26:24  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:26:24  34  	  clip_table_name => 'svmc_clip',
20:26:24  35  	  data_table_name => '&bldtable',
20:26:24  36  	  tail_frac	  => 0.025,
20:26:24  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:26:24  38  
20:26:24  39  	-- xform input data to winsorized data
20:26:24  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:26:24  41  	  clip_table_name => 'svmc_clip',
20:26:24  42  	  data_table_name => '&bldtable',
20:26:24  43  	  xform_view_name => 'svmc_winsor');
20:26:24  44  
20:26:24  45  	-- create normalization table
20:26:24  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:26:24  47  
20:26:24  48  	-- populate normalization table based on winsorized data
20:26:24  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:26:24  50  	  norm_table_name => 'svmc_norm',
20:26:24  51  	  data_table_name => 'svmc_winsor',
20:26:24  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:26:24  53  
20:26:24  54  	-- normalize the original data
20:26:24  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:26:24  56  	  norm_table_name => 'svmc_norm',
20:26:24  57  	  data_table_name => '&bldtable',
20:26:24  58  	  xform_view_name => 'svmc_build_prep');
20:26:24  59  END;
20:26:24  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.70
20:26:26 SQL> 
20:26:26 SQL> ---------------------
20:26:26 SQL> -- CREATE A NEW MODEL
20:26:26 SQL> --
20:26:26 SQL> -- Cleanup old model with the same name for repeat runs
20:26:26 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:26:26   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:26:26   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.01
20:26:27 SQL> 
20:26:27 SQL> -- Build a new SVM Model
20:26:27 SQL> BEGIN
20:26:27   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:26:27   3  	  model_name	      => '&model_name',
20:26:27   4  	  mining_function     => dbms_data_mining.classification,
20:26:27   5  	  data_table_name     => 'svmc_build_prep',
20:26:27   6  	  case_id_column_name => '&case_id',
20:26:27   7  	  target_column_name  => '&target',
20:26:27   8  	  settings_table_name => 'svmc_settings');
20:26:27   9  END;
20:26:27  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:04.62
20:26:31 SQL> 
20:26:31 SQL> -----------------------------------------------------------------------
20:26:31 SQL> --			       APPLY/score THE MODEL
20:26:31 SQL> -----------------------------------------------------------------------
20:26:31 SQL> 
20:26:31 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:26:31 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:26:31   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:26:31   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:26:31 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:26:31   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:26:31   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:26:31 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:26:31   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:26:31   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:26:31 SQL> -----------------------
20:26:31 SQL> -- PREPARE SCORING DATA
20:26:31 SQL> --
20:26:31 SQL> -- If the data for model creation has been prepared, then the data
20:26:31 SQL> -- to be scored using the model must be prepared in the same manner
20:26:31 SQL> -- in order to obtain meaningful results.
20:26:31 SQL> --
20:26:31 SQL> -- 1. Missing Value treatment for all Predictors and
20:26:31 SQL> -- 2. Normalization
20:26:31 SQL> -- No outlier treatment will be performed during test and apply. The
20:26:31 SQL> -- normalization step is sufficient, since the normalization parameters
20:26:31 SQL> -- already capture the effects of outlier treatment done with build data.
20:26:31 SQL> --
20:26:31 SQL> BEGIN
20:26:31   2  	-- Xform Test data to replace missing values
20:26:31   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:26:31   4  	  miss_table_name => 'svmc_miss_num',
20:26:31   5  	  data_table_name => '&scoretable',
20:26:31   6  	  xform_view_name => 'xformed_apply_miss_num');
20:26:31   7  
20:26:31   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:26:31   9  	  miss_table_name => 'svmc_miss_cat',
20:26:31  10  	  data_table_name => '&scoretable',
20:26:31  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:26:31  12  
20:26:31  13  	-- Normalize the data to be scored
20:26:31  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:26:31  15  	  norm_table_name => 'svmc_norm',
20:26:31  16  	  data_table_name => '&scoretable',
20:26:31  17  	  xform_view_name => 'svmc_apply_prep');
20:26:31  18  END;
20:26:31  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.18
20:26:32 SQL> 
20:26:32 SQL> -- Maybe I already collected a score for this prdate.
20:26:32 SQL> -- DELETE it if I did:
20:26:32 SQL> DELETE svm62scores
20:26:32   2  WHERE score > 0
20:26:32   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:26:32   4  -- I need to supply the target attribute name:
20:26:32   5  AND targ = '&1'
20:26:32   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gattn'

0 rows deleted.

Elapsed: 00:00:00.02
20:26:32 SQL> 
20:26:32 SQL> -- We do a drumroll here:
20:26:32 SQL> 
20:26:32 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:26:32   2  SELECT
20:26:32   3  prdate
20:26:32   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:26:32   5  ,sysdate
20:26:32   6  ,SUBSTR(prdate,1,7)pair
20:26:32   7  ,SUBSTR(prdate,-19)ydate
20:26:32   8  ,'&1'
20:26:32   9  FROM svmc_apply_prep
20:26:32  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gattn'

1 row created.

Elapsed: 00:00:00.07
20:26:32 SQL> @score1_5min_gattn.sql	2010-11-29 11:50:01 aud_usd
20:26:32 SQL> --
20:26:32 SQL> -- score1_5min_gattn.sql
20:26:32 SQL> --
20:26:32 SQL> 
20:26:32 SQL> -- Demo:
20:26:32 SQL> -- @score1_5min_gattn.sql 2010-12-31 20:45:01 aud_usd
20:26:32 SQL> 
20:26:32 SQL> CREATE OR REPLACE VIEW sme AS
20:26:32   2  SELECT
20:26:32   3  prdate
20:26:32   4  ,NULL gattn
20:26:32   5  ,g00
20:26:32   6  ,g01
20:26:32   7  ,g02
20:26:32   8  ,g03
20:26:32   9  ,g04
20:26:32  10  ,g05
20:26:32  11  ,g06
20:26:32  12  ,g07
20:26:32  13  ,g08
20:26:32  14  ,g09
20:26:32  15  ,g10
20:26:32  16  ,g11
20:26:32  17  ,g12
20:26:32  18  ,g13
20:26:32  19  ,g14
20:26:32  20  ,g15
20:26:32  21  ,g16
20:26:32  22  ,g17
20:26:32  23  ,g18
20:26:32  24  ,g19
20:26:32  25  ,g20
20:26:32  26  ,g21
20:26:32  27  ,g22
20:26:32  28  ,g23
20:26:32  29  ,g24
20:26:32  30  ,g25
20:26:32  31  ,g26
20:26:32  32  ,g27
20:26:32  33  ,g28
20:26:32  34  ,g29
20:26:32  35  ,g30
20:26:32  36  ,g31
20:26:32  37  ,g32
20:26:32  38  ,g33
20:26:32  39  ,g34
20:26:32  40  ,g35
20:26:32  41  ,g36
20:26:32  42  ,g37
20:26:32  43  ,g38
20:26:32  44  ,g39
20:26:32  45  ,g40
20:26:32  46  ,g41
20:26:32  47  FROM modsrc
20:26:32  48  WHERE ydate = '&1'||' '||'&2'
20:26:32  49  AND pair = '&3'
20:26:32  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-11-29'||' '||'11:50:01'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:26:32 SQL> 
20:26:32 SQL> -- rpt
20:26:32 SQL> -- We should see just 1 row:
20:26:32 SQL> 
20:26:32 SQL> SELECT COUNT(prdate) FROM sme
20:26:32   2  
20:26:32 SQL> -- Build the model:
20:26:32 SQL> CREATE OR REPLACE VIEW bme AS
20:26:32   2  SELECT
20:26:32   3  prdate
20:26:32   4  ,gattn
20:26:32   5  ,g00
20:26:32   6  ,g01
20:26:32   7  ,g02
20:26:32   8  ,g03
20:26:32   9  ,g04
20:26:32  10  ,g05
20:26:32  11  ,g06
20:26:32  12  ,g07
20:26:32  13  ,g08
20:26:32  14  ,g09
20:26:32  15  ,g10
20:26:32  16  ,g11
20:26:32  17  ,g12
20:26:32  18  ,g13
20:26:32  19  ,g14
20:26:32  20  ,g15
20:26:32  21  ,g16
20:26:32  22  ,g17
20:26:32  23  ,g18
20:26:32  24  ,g19
20:26:32  25  ,g20
20:26:32  26  ,g21
20:26:32  27  ,g22
20:26:32  28  ,g23
20:26:32  29  ,g24
20:26:32  30  ,g25
20:26:32  31  ,g26
20:26:32  32  ,g27
20:26:32  33  ,g28
20:26:32  34  ,g29
20:26:32  35  ,g30
20:26:32  36  ,g31
20:26:32  37  ,g32
20:26:32  38  ,g33
20:26:32  39  ,g34
20:26:32  40  ,g35
20:26:32  41  ,g36
20:26:32  42  ,g37
20:26:32  43  ,g38
20:26:32  44  ,g39
20:26:32  45  ,g40
20:26:32  46  ,g41
20:26:32  47  FROM modsrc
20:26:32  48  WHERE gattn IN('nup','up')
20:26:32  49  -- Use only rows which are older than 1 day:
20:26:32  50  AND 1+ydate < '&1'||' '||'&2'
20:26:32  51  AND pair = '&3'
20:26:32  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-11-29'||' '||'11:50:01'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.05
20:26:32 SQL> 
20:26:32 SQL> -- rpt
20:26:32 SQL> 
20:26:32 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn
20:26:32   2  
20:26:32 SQL> SELECT MAX(prdate) FROM bme
20:26:32   2  
20:26:32 SQL> -- Now build model from bme and score sme
20:26:32 SQL> @score1.sql gattn
20:26:32 SQL> --
20:26:32 SQL> -- score1.sql
20:26:32 SQL> --
20:26:32 SQL> 
20:26:32 SQL> -- I use this script to send 5 params to score.sql
20:26:32 SQL> -- which does the heavy lifting of creating an SVM model.
20:26:32 SQL> -- Then at the very end of this script I use the model
20:26:32 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:26:32 SQL> 
20:26:32 SQL> -- I call this script from 2 other scripts:
20:26:32 SQL> -- score1_5min.sql
20:26:32 SQL> -- score1_5min_gattn.sql
20:26:32 SQL> 
20:26:32 SQL> -- The 1st param is the name of the target attribute.
20:26:32 SQL> -- I like to call my target attributes either gatt or gattn.
20:26:32 SQL> 
20:26:32 SQL> -- Demo:
20:26:32 SQL> -- @score1.sql 'gatt'
20:26:32 SQL> -- @score1.sql 'gattn'
20:26:32 SQL> 
20:26:32 SQL> -- Now, I fill up svmc_apply_prep.
20:26:32 SQL> -- I use same model_name used in score.sql
20:26:32 SQL> DEFINE model_name = 'svmfx101'
20:26:32 SQL> DEFINE bldtable	= 'bme'
20:26:32 SQL> DEFINE scoretable = 'sme'
20:26:32 SQL> DEFINE case_id	= 'prdate'
20:26:32 SQL> -- Demo:
20:26:32 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:26:32 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:26:32 SQL> --
20:26:32 SQL> -- score.sql
20:26:32 SQL> --
20:26:32 SQL> 
20:26:32 SQL> -- usage: score.sql
20:26:32 SQL> 
20:26:32 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:26:32 SQL> 
20:26:32 SQL> -- DEFINE target	   = 'gatt'
20:26:32 SQL> -- DEFINE model_name = 'svmfx101'
20:26:32 SQL> -- DEFINE bldtable   = 'bme'
20:26:32 SQL> -- DEFINE scoretable = 'sme'
20:26:32 SQL> -- DEFINE case_id    = 'prdate'
20:26:32 SQL> 
20:26:32 SQL> DEFINE target	= '&1'
20:26:32 SQL> DEFINE model_name = '&2'
20:26:32 SQL> DEFINE bldtable	= '&3'
20:26:32 SQL> DEFINE scoretable = '&4'
20:26:32 SQL> DEFINE case_id	= '&5'
20:26:32 SQL> 
20:26:32 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:26:32 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:26:32 SQL> 
20:26:32 SQL> -- Builds an SVM model using pl/sql.
20:26:32 SQL> 
20:26:32 SQL> -----------------------------------------------------------------------
20:26:32 SQL> --			    BUILD THE MODEL
20:26:32 SQL> -----------------------------------------------------------------------
20:26:32 SQL> 
20:26:32 SQL> -- Cleanup old build data preparation objects for repeat runs
20:26:32 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.00
20:26:32 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.01
20:26:32 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:26:32 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.01
20:26:32 SQL> 
20:26:32 SQL> 
20:26:32 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:26:32 SQL> --
20:26:32 SQL> -- DROP	TABLE svmc_settings ;
20:26:32 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:26:32 SQL> -- DELETE svmc_settings;
20:26:32 SQL> 
20:26:32 SQL> -- The default classification algorithm is Naive Bayes. So override
20:26:32 SQL> -- this choice to SVM using a settings table.
20:26:32 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:26:32 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:26:32 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:26:32 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:26:32 SQL> -- models.
20:26:32 SQL> --
20:26:32 SQL> 
20:26:32 SQL> -- Do this once and then comment it out.
20:26:32 SQL> -- That makes script go faster.
20:26:32 SQL> -- BEGIN
20:26:32 SQL> -- -- Populate settings table
20:26:32 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:26:32 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:26:32 SQL> --
20:26:32 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:26:32 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:26:32 SQL> --
20:26:32 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:26:32 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:26:32 SQL> --   COMMIT;
20:26:32 SQL> -- END;
20:26:32 SQL> -- /
20:26:32 SQL> 
20:26:32 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:26:32 SQL> 
20:26:32 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:26:32   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:26:32   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:26:32 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:26:32   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:26:32   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:26:32 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:26:32   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:26:32   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:26:32 SQL> 
20:26:32 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:26:32   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:26:32   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:26:32 SQL> 
20:26:32 SQL> --------------------------------
20:26:32 SQL> -- PREPARE BUILD (TRAINING) DATA
20:26:32 SQL> --
20:26:32 SQL> 
20:26:32 SQL> -- 1. Missing Value treatment for all Predictors and
20:26:32 SQL> -- 2. Outlier Treatment and
20:26:32 SQL> -- 3. Normalization are performed below.
20:26:32 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:26:32 SQL> --    normalized here.
20:26:32 SQL> 
20:26:32 SQL> BEGIN
20:26:32   2  	-- Perform missing value treatment for all predictors
20:26:32   3  	-- create miss tables
20:26:32   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:26:32   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:26:32   6  
20:26:32   7  	-- populate miss tables
20:26:32   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:26:32   9  	  miss_table_name => 'svmc_miss_num',
20:26:32  10  	  data_table_name => '&bldtable',
20:26:32  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:26:32  12  
20:26:32  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:26:32  14  	  miss_table_name => 'svmc_miss_cat',
20:26:32  15  	  data_table_name => '&bldtable',
20:26:32  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:26:32  17  
20:26:32  18  	-- xform input data to replace missing values
20:26:32  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:26:32  20  	  miss_table_name => 'svmc_miss_num',
20:26:32  21  	  data_table_name => '&bldtable',
20:26:32  22  	  xform_view_name => 'xformed_build_miss_num');
20:26:32  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:26:32  24  	  miss_table_name => 'svmc_miss_cat',
20:26:32  25  	  data_table_name => '&bldtable',
20:26:32  26  	  xform_view_name => 'xformed_build_miss_cat');
20:26:32  27  
20:26:32  28  	-- Perform outlier treatment.
20:26:32  29  	-- create clip table
20:26:32  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:26:32  31  
20:26:32  32  	-- populate clip table
20:26:32  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:26:32  34  	  clip_table_name => 'svmc_clip',
20:26:32  35  	  data_table_name => '&bldtable',
20:26:32  36  	  tail_frac	  => 0.025,
20:26:32  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:26:32  38  
20:26:32  39  	-- xform input data to winsorized data
20:26:32  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:26:32  41  	  clip_table_name => 'svmc_clip',
20:26:32  42  	  data_table_name => '&bldtable',
20:26:32  43  	  xform_view_name => 'svmc_winsor');
20:26:32  44  
20:26:32  45  	-- create normalization table
20:26:32  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:26:32  47  
20:26:32  48  	-- populate normalization table based on winsorized data
20:26:32  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:26:32  50  	  norm_table_name => 'svmc_norm',
20:26:32  51  	  data_table_name => 'svmc_winsor',
20:26:32  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:26:32  53  
20:26:32  54  	-- normalize the original data
20:26:32  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:26:32  56  	  norm_table_name => 'svmc_norm',
20:26:32  57  	  data_table_name => '&bldtable',
20:26:32  58  	  xform_view_name => 'svmc_build_prep');
20:26:32  59  END;
20:26:32  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.72
20:26:34 SQL> 
20:26:34 SQL> ---------------------
20:26:34 SQL> -- CREATE A NEW MODEL
20:26:34 SQL> --
20:26:34 SQL> -- Cleanup old model with the same name for repeat runs
20:26:34 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:26:34   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:26:34   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.01
20:26:35 SQL> 
20:26:35 SQL> -- Build a new SVM Model
20:26:35 SQL> BEGIN
20:26:35   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:26:35   3  	  model_name	      => '&model_name',
20:26:35   4  	  mining_function     => dbms_data_mining.classification,
20:26:35   5  	  data_table_name     => 'svmc_build_prep',
20:26:35   6  	  case_id_column_name => '&case_id',
20:26:35   7  	  target_column_name  => '&target',
20:26:35   8  	  settings_table_name => 'svmc_settings');
20:26:35   9  END;
20:26:35  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:04.01
20:26:39 SQL> 
20:26:39 SQL> -----------------------------------------------------------------------
20:26:39 SQL> --			       APPLY/score THE MODEL
20:26:39 SQL> -----------------------------------------------------------------------
20:26:39 SQL> 
20:26:39 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:26:39 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:26:39   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:26:39   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:26:39 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:26:39   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:26:39   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:26:39 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:26:39   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:26:39   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:26:39 SQL> -----------------------
20:26:39 SQL> -- PREPARE SCORING DATA
20:26:39 SQL> --
20:26:39 SQL> -- If the data for model creation has been prepared, then the data
20:26:39 SQL> -- to be scored using the model must be prepared in the same manner
20:26:39 SQL> -- in order to obtain meaningful results.
20:26:39 SQL> --
20:26:39 SQL> -- 1. Missing Value treatment for all Predictors and
20:26:39 SQL> -- 2. Normalization
20:26:39 SQL> -- No outlier treatment will be performed during test and apply. The
20:26:39 SQL> -- normalization step is sufficient, since the normalization parameters
20:26:39 SQL> -- already capture the effects of outlier treatment done with build data.
20:26:39 SQL> --
20:26:39 SQL> BEGIN
20:26:39   2  	-- Xform Test data to replace missing values
20:26:39   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:26:39   4  	  miss_table_name => 'svmc_miss_num',
20:26:39   5  	  data_table_name => '&scoretable',
20:26:39   6  	  xform_view_name => 'xformed_apply_miss_num');
20:26:39   7  
20:26:39   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:26:39   9  	  miss_table_name => 'svmc_miss_cat',
20:26:39  10  	  data_table_name => '&scoretable',
20:26:39  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:26:39  12  
20:26:39  13  	-- Normalize the data to be scored
20:26:39  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:26:39  15  	  norm_table_name => 'svmc_norm',
20:26:39  16  	  data_table_name => '&scoretable',
20:26:39  17  	  xform_view_name => 'svmc_apply_prep');
20:26:39  18  END;
20:26:39  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.18
20:26:39 SQL> 
20:26:39 SQL> -- Maybe I already collected a score for this prdate.
20:26:39 SQL> -- DELETE it if I did:
20:26:39 SQL> DELETE svm62scores
20:26:39   2  WHERE score > 0
20:26:39   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:26:39   4  -- I need to supply the target attribute name:
20:26:39   5  AND targ = '&1'
20:26:39   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gattn'

0 rows deleted.

Elapsed: 00:00:00.02
20:26:39 SQL> 
20:26:39 SQL> -- We do a drumroll here:
20:26:39 SQL> 
20:26:39 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:26:39   2  SELECT
20:26:39   3  prdate
20:26:39   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:26:39   5  ,sysdate
20:26:39   6  ,SUBSTR(prdate,1,7)pair
20:26:39   7  ,SUBSTR(prdate,-19)ydate
20:26:39   8  ,'&1'
20:26:39   9  FROM svmc_apply_prep
20:26:39  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gattn'

1 row created.

Elapsed: 00:00:00.05
20:26:39 SQL> @score1_5min.sql	      2010-11-10 01:20:01 aud_usd
20:26:39 SQL> --
20:26:39 SQL> -- score1_5min.sql
20:26:39 SQL> --
20:26:39 SQL> 
20:26:39 SQL> -- Demo:
20:26:39 SQL> -- @score1_5min.sql 2010-12-31 20:45:01 aud_usd
20:26:39 SQL> 
20:26:39 SQL> CREATE OR REPLACE VIEW sme AS
20:26:39   2  SELECT
20:26:39   3  prdate
20:26:39   4  ,NULL gatt
20:26:39   5  ,g00
20:26:39   6  ,g01
20:26:39   7  ,g02
20:26:39   8  ,g03
20:26:39   9  ,g04
20:26:39  10  ,g05
20:26:39  11  ,g06
20:26:39  12  ,g07
20:26:39  13  ,g08
20:26:39  14  ,g09
20:26:39  15  ,g10
20:26:39  16  ,g11
20:26:39  17  ,g12
20:26:39  18  ,g13
20:26:39  19  ,g14
20:26:39  20  ,g15
20:26:39  21  ,g16
20:26:39  22  ,g17
20:26:39  23  ,g18
20:26:39  24  ,g19
20:26:39  25  ,g20
20:26:39  26  ,g21
20:26:39  27  ,g22
20:26:39  28  ,g23
20:26:39  29  ,g24
20:26:39  30  ,g25
20:26:39  31  ,g26
20:26:39  32  ,g27
20:26:39  33  ,g28
20:26:39  34  ,g29
20:26:39  35  ,g30
20:26:39  36  ,g31
20:26:39  37  ,g32
20:26:39  38  ,g33
20:26:39  39  ,g34
20:26:39  40  ,g35
20:26:39  41  ,g36
20:26:39  42  ,g37
20:26:39  43  ,g38
20:26:39  44  ,g39
20:26:39  45  ,g40
20:26:39  46  ,g41
20:26:39  47  FROM modsrc
20:26:39  48  WHERE ydate = '&1'||' '||'&2'
20:26:39  49  AND pair = '&3'
20:26:39  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-11-10'||' '||'01:20:01'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.05
20:26:39 SQL> 
20:26:39 SQL> -- rpt
20:26:39 SQL> -- We should see just 1 row:
20:26:39 SQL> 
20:26:39 SQL> SELECT COUNT(prdate) FROM sme
20:26:39   2  
20:26:39 SQL> -- Build the model:
20:26:39 SQL> CREATE OR REPLACE VIEW bme AS
20:26:39   2  SELECT
20:26:39   3  prdate
20:26:39   4  ,gatt
20:26:39   5  ,g00
20:26:39   6  ,g01
20:26:39   7  ,g02
20:26:39   8  ,g03
20:26:39   9  ,g04
20:26:39  10  ,g05
20:26:39  11  ,g06
20:26:39  12  ,g07
20:26:39  13  ,g08
20:26:39  14  ,g09
20:26:39  15  ,g10
20:26:39  16  ,g11
20:26:39  17  ,g12
20:26:39  18  ,g13
20:26:39  19  ,g14
20:26:39  20  ,g15
20:26:39  21  ,g16
20:26:39  22  ,g17
20:26:39  23  ,g18
20:26:39  24  ,g19
20:26:39  25  ,g20
20:26:39  26  ,g21
20:26:39  27  ,g22
20:26:39  28  ,g23
20:26:39  29  ,g24
20:26:39  30  ,g25
20:26:39  31  ,g26
20:26:39  32  ,g27
20:26:39  33  ,g28
20:26:39  34  ,g29
20:26:39  35  ,g30
20:26:39  36  ,g31
20:26:39  37  ,g32
20:26:39  38  ,g33
20:26:39  39  ,g34
20:26:39  40  ,g35
20:26:39  41  ,g36
20:26:39  42  ,g37
20:26:39  43  ,g38
20:26:39  44  ,g39
20:26:39  45  ,g40
20:26:39  46  ,g41
20:26:39  47  FROM modsrc
20:26:39  48  WHERE gatt IN('nup','up')
20:26:39  49  -- Use only rows which are older than 1 day:
20:26:39  50  AND 1+ydate < '&1'||' '||'&2'
20:26:39  51  AND pair = '&3'
20:26:39  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-11-10'||' '||'01:20:01'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.05
20:26:39 SQL> 
20:26:39 SQL> -- rpt
20:26:39 SQL> 
20:26:39 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt
20:26:39   2  
20:26:39 SQL> SELECT MAX(prdate) FROM bme
20:26:39   2  
20:26:39 SQL> -- Now build model from bme and score sme
20:26:39 SQL> @score1.sql gatt
20:26:39 SQL> --
20:26:39 SQL> -- score1.sql
20:26:39 SQL> --
20:26:39 SQL> 
20:26:39 SQL> -- I use this script to send 5 params to score.sql
20:26:39 SQL> -- which does the heavy lifting of creating an SVM model.
20:26:39 SQL> -- Then at the very end of this script I use the model
20:26:39 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:26:39 SQL> 
20:26:39 SQL> -- I call this script from 2 other scripts:
20:26:39 SQL> -- score1_5min.sql
20:26:39 SQL> -- score1_5min_gattn.sql
20:26:39 SQL> 
20:26:39 SQL> -- The 1st param is the name of the target attribute.
20:26:39 SQL> -- I like to call my target attributes either gatt or gattn.
20:26:39 SQL> 
20:26:39 SQL> -- Demo:
20:26:39 SQL> -- @score1.sql 'gatt'
20:26:39 SQL> -- @score1.sql 'gattn'
20:26:39 SQL> 
20:26:39 SQL> -- Now, I fill up svmc_apply_prep.
20:26:39 SQL> -- I use same model_name used in score.sql
20:26:39 SQL> DEFINE model_name = 'svmfx101'
20:26:39 SQL> DEFINE bldtable	= 'bme'
20:26:39 SQL> DEFINE scoretable = 'sme'
20:26:39 SQL> DEFINE case_id	= 'prdate'
20:26:39 SQL> -- Demo:
20:26:39 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:26:39 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:26:39 SQL> --
20:26:39 SQL> -- score.sql
20:26:39 SQL> --
20:26:39 SQL> 
20:26:39 SQL> -- usage: score.sql
20:26:39 SQL> 
20:26:39 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:26:39 SQL> 
20:26:39 SQL> -- DEFINE target	   = 'gatt'
20:26:39 SQL> -- DEFINE model_name = 'svmfx101'
20:26:39 SQL> -- DEFINE bldtable   = 'bme'
20:26:39 SQL> -- DEFINE scoretable = 'sme'
20:26:39 SQL> -- DEFINE case_id    = 'prdate'
20:26:39 SQL> 
20:26:39 SQL> DEFINE target	= '&1'
20:26:39 SQL> DEFINE model_name = '&2'
20:26:39 SQL> DEFINE bldtable	= '&3'
20:26:39 SQL> DEFINE scoretable = '&4'
20:26:39 SQL> DEFINE case_id	= '&5'
20:26:39 SQL> 
20:26:39 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:26:39 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:26:39 SQL> 
20:26:39 SQL> -- Builds an SVM model using pl/sql.
20:26:39 SQL> 
20:26:39 SQL> -----------------------------------------------------------------------
20:26:39 SQL> --			    BUILD THE MODEL
20:26:39 SQL> -----------------------------------------------------------------------
20:26:39 SQL> 
20:26:39 SQL> -- Cleanup old build data preparation objects for repeat runs
20:26:39 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.01
20:26:39 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:26:39 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:26:39 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.00
20:26:39 SQL> 
20:26:39 SQL> 
20:26:39 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:26:39 SQL> --
20:26:39 SQL> -- DROP	TABLE svmc_settings ;
20:26:39 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:26:39 SQL> -- DELETE svmc_settings;
20:26:39 SQL> 
20:26:39 SQL> -- The default classification algorithm is Naive Bayes. So override
20:26:39 SQL> -- this choice to SVM using a settings table.
20:26:39 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:26:39 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:26:39 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:26:39 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:26:39 SQL> -- models.
20:26:39 SQL> --
20:26:39 SQL> 
20:26:39 SQL> -- Do this once and then comment it out.
20:26:39 SQL> -- That makes script go faster.
20:26:39 SQL> -- BEGIN
20:26:39 SQL> -- -- Populate settings table
20:26:39 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:26:39 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:26:39 SQL> --
20:26:39 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:26:39 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:26:39 SQL> --
20:26:39 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:26:39 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:26:39 SQL> --   COMMIT;
20:26:39 SQL> -- END;
20:26:39 SQL> -- /
20:26:39 SQL> 
20:26:39 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:26:39 SQL> 
20:26:39 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:26:39   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:26:39   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:26:39 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:26:39   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:26:39   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:26:39 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:26:39   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:26:39   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:26:39 SQL> 
20:26:39 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:26:39   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:26:39   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:26:39 SQL> 
20:26:39 SQL> --------------------------------
20:26:39 SQL> -- PREPARE BUILD (TRAINING) DATA
20:26:39 SQL> --
20:26:39 SQL> 
20:26:39 SQL> -- 1. Missing Value treatment for all Predictors and
20:26:39 SQL> -- 2. Outlier Treatment and
20:26:39 SQL> -- 3. Normalization are performed below.
20:26:39 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:26:39 SQL> --    normalized here.
20:26:39 SQL> 
20:26:39 SQL> BEGIN
20:26:39   2  	-- Perform missing value treatment for all predictors
20:26:39   3  	-- create miss tables
20:26:39   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:26:39   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:26:39   6  
20:26:39   7  	-- populate miss tables
20:26:39   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:26:39   9  	  miss_table_name => 'svmc_miss_num',
20:26:39  10  	  data_table_name => '&bldtable',
20:26:39  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:26:39  12  
20:26:39  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:26:39  14  	  miss_table_name => 'svmc_miss_cat',
20:26:39  15  	  data_table_name => '&bldtable',
20:26:39  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:26:39  17  
20:26:39  18  	-- xform input data to replace missing values
20:26:39  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:26:39  20  	  miss_table_name => 'svmc_miss_num',
20:26:39  21  	  data_table_name => '&bldtable',
20:26:39  22  	  xform_view_name => 'xformed_build_miss_num');
20:26:39  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:26:39  24  	  miss_table_name => 'svmc_miss_cat',
20:26:39  25  	  data_table_name => '&bldtable',
20:26:39  26  	  xform_view_name => 'xformed_build_miss_cat');
20:26:39  27  
20:26:39  28  	-- Perform outlier treatment.
20:26:39  29  	-- create clip table
20:26:39  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:26:39  31  
20:26:39  32  	-- populate clip table
20:26:39  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:26:39  34  	  clip_table_name => 'svmc_clip',
20:26:39  35  	  data_table_name => '&bldtable',
20:26:39  36  	  tail_frac	  => 0.025,
20:26:39  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:26:39  38  
20:26:39  39  	-- xform input data to winsorized data
20:26:39  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:26:39  41  	  clip_table_name => 'svmc_clip',
20:26:39  42  	  data_table_name => '&bldtable',
20:26:39  43  	  xform_view_name => 'svmc_winsor');
20:26:39  44  
20:26:39  45  	-- create normalization table
20:26:39  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:26:39  47  
20:26:39  48  	-- populate normalization table based on winsorized data
20:26:39  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:26:39  50  	  norm_table_name => 'svmc_norm',
20:26:39  51  	  data_table_name => 'svmc_winsor',
20:26:39  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:26:39  53  
20:26:39  54  	-- normalize the original data
20:26:39  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:26:39  56  	  norm_table_name => 'svmc_norm',
20:26:39  57  	  data_table_name => '&bldtable',
20:26:39  58  	  xform_view_name => 'svmc_build_prep');
20:26:39  59  END;
20:26:39  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.46
20:26:41 SQL> 
20:26:41 SQL> ---------------------
20:26:41 SQL> -- CREATE A NEW MODEL
20:26:41 SQL> --
20:26:41 SQL> -- Cleanup old model with the same name for repeat runs
20:26:41 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:26:41   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:26:41   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.95
20:26:42 SQL> 
20:26:42 SQL> -- Build a new SVM Model
20:26:42 SQL> BEGIN
20:26:42   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:26:42   3  	  model_name	      => '&model_name',
20:26:42   4  	  mining_function     => dbms_data_mining.classification,
20:26:42   5  	  data_table_name     => 'svmc_build_prep',
20:26:42   6  	  case_id_column_name => '&case_id',
20:26:42   7  	  target_column_name  => '&target',
20:26:42   8  	  settings_table_name => 'svmc_settings');
20:26:42   9  END;
20:26:42  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:03.18
20:26:45 SQL> 
20:26:45 SQL> -----------------------------------------------------------------------
20:26:45 SQL> --			       APPLY/score THE MODEL
20:26:45 SQL> -----------------------------------------------------------------------
20:26:45 SQL> 
20:26:45 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:26:45 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:26:45   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:26:45   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:26:45 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:26:45   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:26:45   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:26:45 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:26:45   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:26:45   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:26:45 SQL> -----------------------
20:26:45 SQL> -- PREPARE SCORING DATA
20:26:45 SQL> --
20:26:45 SQL> -- If the data for model creation has been prepared, then the data
20:26:45 SQL> -- to be scored using the model must be prepared in the same manner
20:26:45 SQL> -- in order to obtain meaningful results.
20:26:45 SQL> --
20:26:45 SQL> -- 1. Missing Value treatment for all Predictors and
20:26:45 SQL> -- 2. Normalization
20:26:45 SQL> -- No outlier treatment will be performed during test and apply. The
20:26:45 SQL> -- normalization step is sufficient, since the normalization parameters
20:26:45 SQL> -- already capture the effects of outlier treatment done with build data.
20:26:45 SQL> --
20:26:45 SQL> BEGIN
20:26:45   2  	-- Xform Test data to replace missing values
20:26:45   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:26:45   4  	  miss_table_name => 'svmc_miss_num',
20:26:45   5  	  data_table_name => '&scoretable',
20:26:45   6  	  xform_view_name => 'xformed_apply_miss_num');
20:26:45   7  
20:26:45   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:26:45   9  	  miss_table_name => 'svmc_miss_cat',
20:26:45  10  	  data_table_name => '&scoretable',
20:26:45  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:26:45  12  
20:26:45  13  	-- Normalize the data to be scored
20:26:45  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:26:45  15  	  norm_table_name => 'svmc_norm',
20:26:45  16  	  data_table_name => '&scoretable',
20:26:45  17  	  xform_view_name => 'svmc_apply_prep');
20:26:45  18  END;
20:26:45  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.18
20:26:45 SQL> 
20:26:45 SQL> -- Maybe I already collected a score for this prdate.
20:26:45 SQL> -- DELETE it if I did:
20:26:45 SQL> DELETE svm62scores
20:26:45   2  WHERE score > 0
20:26:45   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:26:45   4  -- I need to supply the target attribute name:
20:26:45   5  AND targ = '&1'
20:26:45   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gatt'

0 rows deleted.

Elapsed: 00:00:00.01
20:26:45 SQL> 
20:26:45 SQL> -- We do a drumroll here:
20:26:45 SQL> 
20:26:45 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:26:45   2  SELECT
20:26:45   3  prdate
20:26:45   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:26:45   5  ,sysdate
20:26:45   6  ,SUBSTR(prdate,1,7)pair
20:26:45   7  ,SUBSTR(prdate,-19)ydate
20:26:45   8  ,'&1'
20:26:45   9  FROM svmc_apply_prep
20:26:45  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gatt'

1 row created.

Elapsed: 00:00:00.05
20:26:45 SQL> @score1_5min_gattn.sql	2010-11-29 00:00:01 aud_usd
20:26:45 SQL> --
20:26:45 SQL> -- score1_5min_gattn.sql
20:26:45 SQL> --
20:26:45 SQL> 
20:26:45 SQL> -- Demo:
20:26:45 SQL> -- @score1_5min_gattn.sql 2010-12-31 20:45:01 aud_usd
20:26:45 SQL> 
20:26:45 SQL> CREATE OR REPLACE VIEW sme AS
20:26:45   2  SELECT
20:26:45   3  prdate
20:26:45   4  ,NULL gattn
20:26:45   5  ,g00
20:26:45   6  ,g01
20:26:45   7  ,g02
20:26:45   8  ,g03
20:26:45   9  ,g04
20:26:45  10  ,g05
20:26:45  11  ,g06
20:26:45  12  ,g07
20:26:45  13  ,g08
20:26:45  14  ,g09
20:26:45  15  ,g10
20:26:45  16  ,g11
20:26:45  17  ,g12
20:26:45  18  ,g13
20:26:45  19  ,g14
20:26:45  20  ,g15
20:26:45  21  ,g16
20:26:45  22  ,g17
20:26:45  23  ,g18
20:26:45  24  ,g19
20:26:45  25  ,g20
20:26:45  26  ,g21
20:26:45  27  ,g22
20:26:45  28  ,g23
20:26:45  29  ,g24
20:26:45  30  ,g25
20:26:45  31  ,g26
20:26:45  32  ,g27
20:26:45  33  ,g28
20:26:45  34  ,g29
20:26:45  35  ,g30
20:26:45  36  ,g31
20:26:45  37  ,g32
20:26:45  38  ,g33
20:26:45  39  ,g34
20:26:45  40  ,g35
20:26:45  41  ,g36
20:26:45  42  ,g37
20:26:45  43  ,g38
20:26:45  44  ,g39
20:26:45  45  ,g40
20:26:45  46  ,g41
20:26:45  47  FROM modsrc
20:26:45  48  WHERE ydate = '&1'||' '||'&2'
20:26:45  49  AND pair = '&3'
20:26:45  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-11-29'||' '||'00:00:01'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.03
20:26:45 SQL> 
20:26:45 SQL> -- rpt
20:26:45 SQL> -- We should see just 1 row:
20:26:45 SQL> 
20:26:45 SQL> SELECT COUNT(prdate) FROM sme
20:26:45   2  
20:26:45 SQL> -- Build the model:
20:26:45 SQL> CREATE OR REPLACE VIEW bme AS
20:26:45   2  SELECT
20:26:45   3  prdate
20:26:45   4  ,gattn
20:26:45   5  ,g00
20:26:45   6  ,g01
20:26:45   7  ,g02
20:26:45   8  ,g03
20:26:45   9  ,g04
20:26:45  10  ,g05
20:26:45  11  ,g06
20:26:45  12  ,g07
20:26:45  13  ,g08
20:26:45  14  ,g09
20:26:45  15  ,g10
20:26:45  16  ,g11
20:26:45  17  ,g12
20:26:45  18  ,g13
20:26:45  19  ,g14
20:26:45  20  ,g15
20:26:45  21  ,g16
20:26:45  22  ,g17
20:26:45  23  ,g18
20:26:45  24  ,g19
20:26:45  25  ,g20
20:26:45  26  ,g21
20:26:45  27  ,g22
20:26:45  28  ,g23
20:26:45  29  ,g24
20:26:45  30  ,g25
20:26:45  31  ,g26
20:26:45  32  ,g27
20:26:45  33  ,g28
20:26:45  34  ,g29
20:26:45  35  ,g30
20:26:45  36  ,g31
20:26:45  37  ,g32
20:26:45  38  ,g33
20:26:45  39  ,g34
20:26:45  40  ,g35
20:26:45  41  ,g36
20:26:45  42  ,g37
20:26:45  43  ,g38
20:26:45  44  ,g39
20:26:45  45  ,g40
20:26:45  46  ,g41
20:26:45  47  FROM modsrc
20:26:45  48  WHERE gattn IN('nup','up')
20:26:45  49  -- Use only rows which are older than 1 day:
20:26:45  50  AND 1+ydate < '&1'||' '||'&2'
20:26:45  51  AND pair = '&3'
20:26:45  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-11-29'||' '||'00:00:01'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.06
20:26:45 SQL> 
20:26:45 SQL> -- rpt
20:26:45 SQL> 
20:26:45 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn
20:26:45   2  
20:26:45 SQL> SELECT MAX(prdate) FROM bme
20:26:45   2  
20:26:45 SQL> -- Now build model from bme and score sme
20:26:45 SQL> @score1.sql gattn
20:26:45 SQL> --
20:26:45 SQL> -- score1.sql
20:26:45 SQL> --
20:26:45 SQL> 
20:26:45 SQL> -- I use this script to send 5 params to score.sql
20:26:45 SQL> -- which does the heavy lifting of creating an SVM model.
20:26:45 SQL> -- Then at the very end of this script I use the model
20:26:45 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:26:45 SQL> 
20:26:45 SQL> -- I call this script from 2 other scripts:
20:26:45 SQL> -- score1_5min.sql
20:26:45 SQL> -- score1_5min_gattn.sql
20:26:45 SQL> 
20:26:45 SQL> -- The 1st param is the name of the target attribute.
20:26:45 SQL> -- I like to call my target attributes either gatt or gattn.
20:26:45 SQL> 
20:26:45 SQL> -- Demo:
20:26:45 SQL> -- @score1.sql 'gatt'
20:26:45 SQL> -- @score1.sql 'gattn'
20:26:45 SQL> 
20:26:45 SQL> -- Now, I fill up svmc_apply_prep.
20:26:45 SQL> -- I use same model_name used in score.sql
20:26:45 SQL> DEFINE model_name = 'svmfx101'
20:26:45 SQL> DEFINE bldtable	= 'bme'
20:26:45 SQL> DEFINE scoretable = 'sme'
20:26:45 SQL> DEFINE case_id	= 'prdate'
20:26:45 SQL> -- Demo:
20:26:45 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:26:45 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:26:45 SQL> --
20:26:45 SQL> -- score.sql
20:26:45 SQL> --
20:26:45 SQL> 
20:26:45 SQL> -- usage: score.sql
20:26:45 SQL> 
20:26:45 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:26:45 SQL> 
20:26:45 SQL> -- DEFINE target	   = 'gatt'
20:26:45 SQL> -- DEFINE model_name = 'svmfx101'
20:26:45 SQL> -- DEFINE bldtable   = 'bme'
20:26:45 SQL> -- DEFINE scoretable = 'sme'
20:26:45 SQL> -- DEFINE case_id    = 'prdate'
20:26:45 SQL> 
20:26:45 SQL> DEFINE target	= '&1'
20:26:45 SQL> DEFINE model_name = '&2'
20:26:45 SQL> DEFINE bldtable	= '&3'
20:26:45 SQL> DEFINE scoretable = '&4'
20:26:45 SQL> DEFINE case_id	= '&5'
20:26:45 SQL> 
20:26:45 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:26:45 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:26:45 SQL> 
20:26:45 SQL> -- Builds an SVM model using pl/sql.
20:26:45 SQL> 
20:26:45 SQL> -----------------------------------------------------------------------
20:26:45 SQL> --			    BUILD THE MODEL
20:26:45 SQL> -----------------------------------------------------------------------
20:26:45 SQL> 
20:26:45 SQL> -- Cleanup old build data preparation objects for repeat runs
20:26:45 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.00
20:26:45 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.01
20:26:45 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:26:45 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.01
20:26:45 SQL> 
20:26:45 SQL> 
20:26:45 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:26:45 SQL> --
20:26:45 SQL> -- DROP	TABLE svmc_settings ;
20:26:45 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:26:45 SQL> -- DELETE svmc_settings;
20:26:45 SQL> 
20:26:45 SQL> -- The default classification algorithm is Naive Bayes. So override
20:26:45 SQL> -- this choice to SVM using a settings table.
20:26:45 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:26:45 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:26:45 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:26:45 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:26:45 SQL> -- models.
20:26:45 SQL> --
20:26:45 SQL> 
20:26:45 SQL> -- Do this once and then comment it out.
20:26:45 SQL> -- That makes script go faster.
20:26:45 SQL> -- BEGIN
20:26:45 SQL> -- -- Populate settings table
20:26:45 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:26:45 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:26:45 SQL> --
20:26:45 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:26:45 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:26:45 SQL> --
20:26:45 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:26:45 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:26:45 SQL> --   COMMIT;
20:26:45 SQL> -- END;
20:26:45 SQL> -- /
20:26:45 SQL> 
20:26:45 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:26:45 SQL> 
20:26:45 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:26:45   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:26:45   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:26:45 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:26:45   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:26:45   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:26:45 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:26:45   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:26:45   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:26:45 SQL> 
20:26:45 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:26:45   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:26:45   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:26:45 SQL> 
20:26:45 SQL> --------------------------------
20:26:45 SQL> -- PREPARE BUILD (TRAINING) DATA
20:26:45 SQL> --
20:26:45 SQL> 
20:26:45 SQL> -- 1. Missing Value treatment for all Predictors and
20:26:45 SQL> -- 2. Outlier Treatment and
20:26:45 SQL> -- 3. Normalization are performed below.
20:26:45 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:26:45 SQL> --    normalized here.
20:26:45 SQL> 
20:26:45 SQL> BEGIN
20:26:45   2  	-- Perform missing value treatment for all predictors
20:26:45   3  	-- create miss tables
20:26:45   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:26:45   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:26:45   6  
20:26:45   7  	-- populate miss tables
20:26:45   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:26:45   9  	  miss_table_name => 'svmc_miss_num',
20:26:45  10  	  data_table_name => '&bldtable',
20:26:45  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:26:45  12  
20:26:45  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:26:45  14  	  miss_table_name => 'svmc_miss_cat',
20:26:45  15  	  data_table_name => '&bldtable',
20:26:45  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:26:45  17  
20:26:45  18  	-- xform input data to replace missing values
20:26:45  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:26:45  20  	  miss_table_name => 'svmc_miss_num',
20:26:45  21  	  data_table_name => '&bldtable',
20:26:45  22  	  xform_view_name => 'xformed_build_miss_num');
20:26:45  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:26:45  24  	  miss_table_name => 'svmc_miss_cat',
20:26:45  25  	  data_table_name => '&bldtable',
20:26:45  26  	  xform_view_name => 'xformed_build_miss_cat');
20:26:45  27  
20:26:45  28  	-- Perform outlier treatment.
20:26:45  29  	-- create clip table
20:26:45  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:26:45  31  
20:26:45  32  	-- populate clip table
20:26:45  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:26:45  34  	  clip_table_name => 'svmc_clip',
20:26:45  35  	  data_table_name => '&bldtable',
20:26:45  36  	  tail_frac	  => 0.025,
20:26:45  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:26:45  38  
20:26:45  39  	-- xform input data to winsorized data
20:26:45  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:26:45  41  	  clip_table_name => 'svmc_clip',
20:26:45  42  	  data_table_name => '&bldtable',
20:26:45  43  	  xform_view_name => 'svmc_winsor');
20:26:45  44  
20:26:45  45  	-- create normalization table
20:26:45  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:26:45  47  
20:26:45  48  	-- populate normalization table based on winsorized data
20:26:45  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:26:45  50  	  norm_table_name => 'svmc_norm',
20:26:45  51  	  data_table_name => 'svmc_winsor',
20:26:45  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:26:45  53  
20:26:45  54  	-- normalize the original data
20:26:45  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:26:45  56  	  norm_table_name => 'svmc_norm',
20:26:45  57  	  data_table_name => '&bldtable',
20:26:45  58  	  xform_view_name => 'svmc_build_prep');
20:26:45  59  END;
20:26:45  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.76
20:26:47 SQL> 
20:26:47 SQL> ---------------------
20:26:47 SQL> -- CREATE A NEW MODEL
20:26:47 SQL> --
20:26:47 SQL> -- Cleanup old model with the same name for repeat runs
20:26:47 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:26:47   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:26:47   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.01
20:26:48 SQL> 
20:26:48 SQL> -- Build a new SVM Model
20:26:48 SQL> BEGIN
20:26:48   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:26:48   3  	  model_name	      => '&model_name',
20:26:48   4  	  mining_function     => dbms_data_mining.classification,
20:26:48   5  	  data_table_name     => 'svmc_build_prep',
20:26:48   6  	  case_id_column_name => '&case_id',
20:26:48   7  	  target_column_name  => '&target',
20:26:48   8  	  settings_table_name => 'svmc_settings');
20:26:48   9  END;
20:26:48  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:03.96
20:26:52 SQL> 
20:26:52 SQL> -----------------------------------------------------------------------
20:26:52 SQL> --			       APPLY/score THE MODEL
20:26:52 SQL> -----------------------------------------------------------------------
20:26:52 SQL> 
20:26:52 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:26:52 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:26:52   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:26:52   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:26:52 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:26:52   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:26:52   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:26:52 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:26:52   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:26:52   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:26:52 SQL> -----------------------
20:26:52 SQL> -- PREPARE SCORING DATA
20:26:52 SQL> --
20:26:52 SQL> -- If the data for model creation has been prepared, then the data
20:26:52 SQL> -- to be scored using the model must be prepared in the same manner
20:26:52 SQL> -- in order to obtain meaningful results.
20:26:52 SQL> --
20:26:52 SQL> -- 1. Missing Value treatment for all Predictors and
20:26:52 SQL> -- 2. Normalization
20:26:52 SQL> -- No outlier treatment will be performed during test and apply. The
20:26:52 SQL> -- normalization step is sufficient, since the normalization parameters
20:26:52 SQL> -- already capture the effects of outlier treatment done with build data.
20:26:52 SQL> --
20:26:52 SQL> BEGIN
20:26:52   2  	-- Xform Test data to replace missing values
20:26:52   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:26:52   4  	  miss_table_name => 'svmc_miss_num',
20:26:52   5  	  data_table_name => '&scoretable',
20:26:52   6  	  xform_view_name => 'xformed_apply_miss_num');
20:26:52   7  
20:26:52   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:26:52   9  	  miss_table_name => 'svmc_miss_cat',
20:26:52  10  	  data_table_name => '&scoretable',
20:26:52  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:26:52  12  
20:26:52  13  	-- Normalize the data to be scored
20:26:52  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:26:52  15  	  norm_table_name => 'svmc_norm',
20:26:52  16  	  data_table_name => '&scoretable',
20:26:52  17  	  xform_view_name => 'svmc_apply_prep');
20:26:52  18  END;
20:26:52  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.18
20:26:52 SQL> 
20:26:52 SQL> -- Maybe I already collected a score for this prdate.
20:26:52 SQL> -- DELETE it if I did:
20:26:52 SQL> DELETE svm62scores
20:26:52   2  WHERE score > 0
20:26:52   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:26:52   4  -- I need to supply the target attribute name:
20:26:52   5  AND targ = '&1'
20:26:52   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gattn'

0 rows deleted.

Elapsed: 00:00:00.01
20:26:52 SQL> 
20:26:52 SQL> -- We do a drumroll here:
20:26:52 SQL> 
20:26:52 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:26:52   2  SELECT
20:26:52   3  prdate
20:26:52   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:26:52   5  ,sysdate
20:26:52   6  ,SUBSTR(prdate,1,7)pair
20:26:52   7  ,SUBSTR(prdate,-19)ydate
20:26:52   8  ,'&1'
20:26:52   9  FROM svmc_apply_prep
20:26:52  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gattn'

1 row created.

Elapsed: 00:00:00.04
20:26:53 SQL> @score1_5min_gattn.sql	2010-11-24 10:20:01 aud_usd
20:26:53 SQL> --
20:26:53 SQL> -- score1_5min_gattn.sql
20:26:53 SQL> --
20:26:53 SQL> 
20:26:53 SQL> -- Demo:
20:26:53 SQL> -- @score1_5min_gattn.sql 2010-12-31 20:45:01 aud_usd
20:26:53 SQL> 
20:26:53 SQL> CREATE OR REPLACE VIEW sme AS
20:26:53   2  SELECT
20:26:53   3  prdate
20:26:53   4  ,NULL gattn
20:26:53   5  ,g00
20:26:53   6  ,g01
20:26:53   7  ,g02
20:26:53   8  ,g03
20:26:53   9  ,g04
20:26:53  10  ,g05
20:26:53  11  ,g06
20:26:53  12  ,g07
20:26:53  13  ,g08
20:26:53  14  ,g09
20:26:53  15  ,g10
20:26:53  16  ,g11
20:26:53  17  ,g12
20:26:53  18  ,g13
20:26:53  19  ,g14
20:26:53  20  ,g15
20:26:53  21  ,g16
20:26:53  22  ,g17
20:26:53  23  ,g18
20:26:53  24  ,g19
20:26:53  25  ,g20
20:26:53  26  ,g21
20:26:53  27  ,g22
20:26:53  28  ,g23
20:26:53  29  ,g24
20:26:53  30  ,g25
20:26:53  31  ,g26
20:26:53  32  ,g27
20:26:53  33  ,g28
20:26:53  34  ,g29
20:26:53  35  ,g30
20:26:53  36  ,g31
20:26:53  37  ,g32
20:26:53  38  ,g33
20:26:53  39  ,g34
20:26:53  40  ,g35
20:26:53  41  ,g36
20:26:53  42  ,g37
20:26:53  43  ,g38
20:26:53  44  ,g39
20:26:53  45  ,g40
20:26:53  46  ,g41
20:26:53  47  FROM modsrc
20:26:53  48  WHERE ydate = '&1'||' '||'&2'
20:26:53  49  AND pair = '&3'
20:26:53  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-11-24'||' '||'10:20:01'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.03
20:26:53 SQL> 
20:26:53 SQL> -- rpt
20:26:53 SQL> -- We should see just 1 row:
20:26:53 SQL> 
20:26:53 SQL> SELECT COUNT(prdate) FROM sme
20:26:53   2  
20:26:53 SQL> -- Build the model:
20:26:53 SQL> CREATE OR REPLACE VIEW bme AS
20:26:53   2  SELECT
20:26:53   3  prdate
20:26:53   4  ,gattn
20:26:53   5  ,g00
20:26:53   6  ,g01
20:26:53   7  ,g02
20:26:53   8  ,g03
20:26:53   9  ,g04
20:26:53  10  ,g05
20:26:53  11  ,g06
20:26:53  12  ,g07
20:26:53  13  ,g08
20:26:53  14  ,g09
20:26:53  15  ,g10
20:26:53  16  ,g11
20:26:53  17  ,g12
20:26:53  18  ,g13
20:26:53  19  ,g14
20:26:53  20  ,g15
20:26:53  21  ,g16
20:26:53  22  ,g17
20:26:53  23  ,g18
20:26:53  24  ,g19
20:26:53  25  ,g20
20:26:53  26  ,g21
20:26:53  27  ,g22
20:26:53  28  ,g23
20:26:53  29  ,g24
20:26:53  30  ,g25
20:26:53  31  ,g26
20:26:53  32  ,g27
20:26:53  33  ,g28
20:26:53  34  ,g29
20:26:53  35  ,g30
20:26:53  36  ,g31
20:26:53  37  ,g32
20:26:53  38  ,g33
20:26:53  39  ,g34
20:26:53  40  ,g35
20:26:53  41  ,g36
20:26:53  42  ,g37
20:26:53  43  ,g38
20:26:53  44  ,g39
20:26:53  45  ,g40
20:26:53  46  ,g41
20:26:53  47  FROM modsrc
20:26:53  48  WHERE gattn IN('nup','up')
20:26:53  49  -- Use only rows which are older than 1 day:
20:26:53  50  AND 1+ydate < '&1'||' '||'&2'
20:26:53  51  AND pair = '&3'
20:26:53  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-11-24'||' '||'10:20:01'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.05
20:26:53 SQL> 
20:26:53 SQL> -- rpt
20:26:53 SQL> 
20:26:53 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn
20:26:53   2  
20:26:53 SQL> SELECT MAX(prdate) FROM bme
20:26:53   2  
20:26:53 SQL> -- Now build model from bme and score sme
20:26:53 SQL> @score1.sql gattn
20:26:53 SQL> --
20:26:53 SQL> -- score1.sql
20:26:53 SQL> --
20:26:53 SQL> 
20:26:53 SQL> -- I use this script to send 5 params to score.sql
20:26:53 SQL> -- which does the heavy lifting of creating an SVM model.
20:26:53 SQL> -- Then at the very end of this script I use the model
20:26:53 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:26:53 SQL> 
20:26:53 SQL> -- I call this script from 2 other scripts:
20:26:53 SQL> -- score1_5min.sql
20:26:53 SQL> -- score1_5min_gattn.sql
20:26:53 SQL> 
20:26:53 SQL> -- The 1st param is the name of the target attribute.
20:26:53 SQL> -- I like to call my target attributes either gatt or gattn.
20:26:53 SQL> 
20:26:53 SQL> -- Demo:
20:26:53 SQL> -- @score1.sql 'gatt'
20:26:53 SQL> -- @score1.sql 'gattn'
20:26:53 SQL> 
20:26:53 SQL> -- Now, I fill up svmc_apply_prep.
20:26:53 SQL> -- I use same model_name used in score.sql
20:26:53 SQL> DEFINE model_name = 'svmfx101'
20:26:53 SQL> DEFINE bldtable	= 'bme'
20:26:53 SQL> DEFINE scoretable = 'sme'
20:26:53 SQL> DEFINE case_id	= 'prdate'
20:26:53 SQL> -- Demo:
20:26:53 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:26:53 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:26:53 SQL> --
20:26:53 SQL> -- score.sql
20:26:53 SQL> --
20:26:53 SQL> 
20:26:53 SQL> -- usage: score.sql
20:26:53 SQL> 
20:26:53 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:26:53 SQL> 
20:26:53 SQL> -- DEFINE target	   = 'gatt'
20:26:53 SQL> -- DEFINE model_name = 'svmfx101'
20:26:53 SQL> -- DEFINE bldtable   = 'bme'
20:26:53 SQL> -- DEFINE scoretable = 'sme'
20:26:53 SQL> -- DEFINE case_id    = 'prdate'
20:26:53 SQL> 
20:26:53 SQL> DEFINE target	= '&1'
20:26:53 SQL> DEFINE model_name = '&2'
20:26:53 SQL> DEFINE bldtable	= '&3'
20:26:53 SQL> DEFINE scoretable = '&4'
20:26:53 SQL> DEFINE case_id	= '&5'
20:26:53 SQL> 
20:26:53 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:26:53 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:26:53 SQL> 
20:26:53 SQL> -- Builds an SVM model using pl/sql.
20:26:53 SQL> 
20:26:53 SQL> -----------------------------------------------------------------------
20:26:53 SQL> --			    BUILD THE MODEL
20:26:53 SQL> -----------------------------------------------------------------------
20:26:53 SQL> 
20:26:53 SQL> -- Cleanup old build data preparation objects for repeat runs
20:26:53 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.00
20:26:53 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.01
20:26:53 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:26:53 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.01
20:26:53 SQL> 
20:26:53 SQL> 
20:26:53 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:26:53 SQL> --
20:26:53 SQL> -- DROP	TABLE svmc_settings ;
20:26:53 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:26:53 SQL> -- DELETE svmc_settings;
20:26:53 SQL> 
20:26:53 SQL> -- The default classification algorithm is Naive Bayes. So override
20:26:53 SQL> -- this choice to SVM using a settings table.
20:26:53 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:26:53 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:26:53 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:26:53 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:26:53 SQL> -- models.
20:26:53 SQL> --
20:26:53 SQL> 
20:26:53 SQL> -- Do this once and then comment it out.
20:26:53 SQL> -- That makes script go faster.
20:26:53 SQL> -- BEGIN
20:26:53 SQL> -- -- Populate settings table
20:26:53 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:26:53 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:26:53 SQL> --
20:26:53 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:26:53 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:26:53 SQL> --
20:26:53 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:26:53 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:26:53 SQL> --   COMMIT;
20:26:53 SQL> -- END;
20:26:53 SQL> -- /
20:26:53 SQL> 
20:26:53 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:26:53 SQL> 
20:26:53 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:26:53   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:26:53   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
20:26:53 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:26:53   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:26:53   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:26:53 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:26:53   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:26:53   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:26:53 SQL> 
20:26:53 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:26:53   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:26:53   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:26:53 SQL> 
20:26:53 SQL> --------------------------------
20:26:53 SQL> -- PREPARE BUILD (TRAINING) DATA
20:26:53 SQL> --
20:26:53 SQL> 
20:26:53 SQL> -- 1. Missing Value treatment for all Predictors and
20:26:53 SQL> -- 2. Outlier Treatment and
20:26:53 SQL> -- 3. Normalization are performed below.
20:26:53 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:26:53 SQL> --    normalized here.
20:26:53 SQL> 
20:26:53 SQL> BEGIN
20:26:53   2  	-- Perform missing value treatment for all predictors
20:26:53   3  	-- create miss tables
20:26:53   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:26:53   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:26:53   6  
20:26:53   7  	-- populate miss tables
20:26:53   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:26:53   9  	  miss_table_name => 'svmc_miss_num',
20:26:53  10  	  data_table_name => '&bldtable',
20:26:53  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:26:53  12  
20:26:53  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:26:53  14  	  miss_table_name => 'svmc_miss_cat',
20:26:53  15  	  data_table_name => '&bldtable',
20:26:53  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:26:53  17  
20:26:53  18  	-- xform input data to replace missing values
20:26:53  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:26:53  20  	  miss_table_name => 'svmc_miss_num',
20:26:53  21  	  data_table_name => '&bldtable',
20:26:53  22  	  xform_view_name => 'xformed_build_miss_num');
20:26:53  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:26:53  24  	  miss_table_name => 'svmc_miss_cat',
20:26:53  25  	  data_table_name => '&bldtable',
20:26:53  26  	  xform_view_name => 'xformed_build_miss_cat');
20:26:53  27  
20:26:53  28  	-- Perform outlier treatment.
20:26:53  29  	-- create clip table
20:26:53  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:26:53  31  
20:26:53  32  	-- populate clip table
20:26:53  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:26:53  34  	  clip_table_name => 'svmc_clip',
20:26:53  35  	  data_table_name => '&bldtable',
20:26:53  36  	  tail_frac	  => 0.025,
20:26:53  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:26:53  38  
20:26:53  39  	-- xform input data to winsorized data
20:26:53  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:26:53  41  	  clip_table_name => 'svmc_clip',
20:26:53  42  	  data_table_name => '&bldtable',
20:26:53  43  	  xform_view_name => 'svmc_winsor');
20:26:53  44  
20:26:53  45  	-- create normalization table
20:26:53  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:26:53  47  
20:26:53  48  	-- populate normalization table based on winsorized data
20:26:53  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:26:53  50  	  norm_table_name => 'svmc_norm',
20:26:53  51  	  data_table_name => 'svmc_winsor',
20:26:53  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:26:53  53  
20:26:53  54  	-- normalize the original data
20:26:53  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:26:53  56  	  norm_table_name => 'svmc_norm',
20:26:53  57  	  data_table_name => '&bldtable',
20:26:53  58  	  xform_view_name => 'svmc_build_prep');
20:26:53  59  END;
20:26:53  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.65
20:26:54 SQL> 
20:26:54 SQL> ---------------------
20:26:54 SQL> -- CREATE A NEW MODEL
20:26:54 SQL> --
20:26:54 SQL> -- Cleanup old model with the same name for repeat runs
20:26:54 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:26:54   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:26:54   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.94
20:26:55 SQL> 
20:26:55 SQL> -- Build a new SVM Model
20:26:55 SQL> BEGIN
20:26:55   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:26:55   3  	  model_name	      => '&model_name',
20:26:55   4  	  mining_function     => dbms_data_mining.classification,
20:26:55   5  	  data_table_name     => 'svmc_build_prep',
20:26:55   6  	  case_id_column_name => '&case_id',
20:26:55   7  	  target_column_name  => '&target',
20:26:55   8  	  settings_table_name => 'svmc_settings');
20:26:55   9  END;
20:26:55  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:04.31
20:27:00 SQL> 
20:27:00 SQL> -----------------------------------------------------------------------
20:27:00 SQL> --			       APPLY/score THE MODEL
20:27:00 SQL> -----------------------------------------------------------------------
20:27:00 SQL> 
20:27:00 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:27:00 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:27:00   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:27:00   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:27:00 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:27:00   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:27:00   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:27:00 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:27:00   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:27:00   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:27:00 SQL> -----------------------
20:27:00 SQL> -- PREPARE SCORING DATA
20:27:00 SQL> --
20:27:00 SQL> -- If the data for model creation has been prepared, then the data
20:27:00 SQL> -- to be scored using the model must be prepared in the same manner
20:27:00 SQL> -- in order to obtain meaningful results.
20:27:00 SQL> --
20:27:00 SQL> -- 1. Missing Value treatment for all Predictors and
20:27:00 SQL> -- 2. Normalization
20:27:00 SQL> -- No outlier treatment will be performed during test and apply. The
20:27:00 SQL> -- normalization step is sufficient, since the normalization parameters
20:27:00 SQL> -- already capture the effects of outlier treatment done with build data.
20:27:00 SQL> --
20:27:00 SQL> BEGIN
20:27:00   2  	-- Xform Test data to replace missing values
20:27:00   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:27:00   4  	  miss_table_name => 'svmc_miss_num',
20:27:00   5  	  data_table_name => '&scoretable',
20:27:00   6  	  xform_view_name => 'xformed_apply_miss_num');
20:27:00   7  
20:27:00   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:27:00   9  	  miss_table_name => 'svmc_miss_cat',
20:27:00  10  	  data_table_name => '&scoretable',
20:27:00  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:27:00  12  
20:27:00  13  	-- Normalize the data to be scored
20:27:00  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:27:00  15  	  norm_table_name => 'svmc_norm',
20:27:00  16  	  data_table_name => '&scoretable',
20:27:00  17  	  xform_view_name => 'svmc_apply_prep');
20:27:00  18  END;
20:27:00  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.18
20:27:00 SQL> 
20:27:00 SQL> -- Maybe I already collected a score for this prdate.
20:27:00 SQL> -- DELETE it if I did:
20:27:00 SQL> DELETE svm62scores
20:27:00   2  WHERE score > 0
20:27:00   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:27:00   4  -- I need to supply the target attribute name:
20:27:00   5  AND targ = '&1'
20:27:00   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gattn'

0 rows deleted.

Elapsed: 00:00:00.02
20:27:00 SQL> 
20:27:00 SQL> -- We do a drumroll here:
20:27:00 SQL> 
20:27:00 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:27:00   2  SELECT
20:27:00   3  prdate
20:27:00   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:27:00   5  ,sysdate
20:27:00   6  ,SUBSTR(prdate,1,7)pair
20:27:00   7  ,SUBSTR(prdate,-19)ydate
20:27:00   8  ,'&1'
20:27:00   9  FROM svmc_apply_prep
20:27:00  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gattn'

1 row created.

Elapsed: 00:00:00.05
20:27:00 SQL> @score1_5min.sql	      2010-11-09 15:10:01 aud_usd
20:27:00 SQL> --
20:27:00 SQL> -- score1_5min.sql
20:27:00 SQL> --
20:27:00 SQL> 
20:27:00 SQL> -- Demo:
20:27:00 SQL> -- @score1_5min.sql 2010-12-31 20:45:01 aud_usd
20:27:00 SQL> 
20:27:00 SQL> CREATE OR REPLACE VIEW sme AS
20:27:00   2  SELECT
20:27:00   3  prdate
20:27:00   4  ,NULL gatt
20:27:00   5  ,g00
20:27:00   6  ,g01
20:27:00   7  ,g02
20:27:00   8  ,g03
20:27:00   9  ,g04
20:27:00  10  ,g05
20:27:00  11  ,g06
20:27:00  12  ,g07
20:27:00  13  ,g08
20:27:00  14  ,g09
20:27:00  15  ,g10
20:27:00  16  ,g11
20:27:00  17  ,g12
20:27:00  18  ,g13
20:27:00  19  ,g14
20:27:00  20  ,g15
20:27:00  21  ,g16
20:27:00  22  ,g17
20:27:00  23  ,g18
20:27:00  24  ,g19
20:27:00  25  ,g20
20:27:00  26  ,g21
20:27:00  27  ,g22
20:27:00  28  ,g23
20:27:00  29  ,g24
20:27:00  30  ,g25
20:27:00  31  ,g26
20:27:00  32  ,g27
20:27:00  33  ,g28
20:27:00  34  ,g29
20:27:00  35  ,g30
20:27:00  36  ,g31
20:27:00  37  ,g32
20:27:00  38  ,g33
20:27:00  39  ,g34
20:27:00  40  ,g35
20:27:00  41  ,g36
20:27:00  42  ,g37
20:27:00  43  ,g38
20:27:00  44  ,g39
20:27:00  45  ,g40
20:27:00  46  ,g41
20:27:00  47  FROM modsrc
20:27:00  48  WHERE ydate = '&1'||' '||'&2'
20:27:00  49  AND pair = '&3'
20:27:00  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-11-09'||' '||'15:10:01'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:27:00 SQL> 
20:27:00 SQL> -- rpt
20:27:00 SQL> -- We should see just 1 row:
20:27:00 SQL> 
20:27:00 SQL> SELECT COUNT(prdate) FROM sme
20:27:00   2  
20:27:00 SQL> -- Build the model:
20:27:00 SQL> CREATE OR REPLACE VIEW bme AS
20:27:00   2  SELECT
20:27:00   3  prdate
20:27:00   4  ,gatt
20:27:00   5  ,g00
20:27:00   6  ,g01
20:27:00   7  ,g02
20:27:00   8  ,g03
20:27:00   9  ,g04
20:27:00  10  ,g05
20:27:00  11  ,g06
20:27:00  12  ,g07
20:27:00  13  ,g08
20:27:00  14  ,g09
20:27:00  15  ,g10
20:27:00  16  ,g11
20:27:00  17  ,g12
20:27:00  18  ,g13
20:27:00  19  ,g14
20:27:00  20  ,g15
20:27:00  21  ,g16
20:27:00  22  ,g17
20:27:00  23  ,g18
20:27:00  24  ,g19
20:27:00  25  ,g20
20:27:00  26  ,g21
20:27:00  27  ,g22
20:27:00  28  ,g23
20:27:00  29  ,g24
20:27:00  30  ,g25
20:27:00  31  ,g26
20:27:00  32  ,g27
20:27:00  33  ,g28
20:27:00  34  ,g29
20:27:00  35  ,g30
20:27:00  36  ,g31
20:27:00  37  ,g32
20:27:00  38  ,g33
20:27:00  39  ,g34
20:27:00  40  ,g35
20:27:00  41  ,g36
20:27:00  42  ,g37
20:27:00  43  ,g38
20:27:00  44  ,g39
20:27:00  45  ,g40
20:27:00  46  ,g41
20:27:00  47  FROM modsrc
20:27:00  48  WHERE gatt IN('nup','up')
20:27:00  49  -- Use only rows which are older than 1 day:
20:27:00  50  AND 1+ydate < '&1'||' '||'&2'
20:27:00  51  AND pair = '&3'
20:27:00  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-11-09'||' '||'15:10:01'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.05
20:27:00 SQL> 
20:27:00 SQL> -- rpt
20:27:00 SQL> 
20:27:00 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt
20:27:00   2  
20:27:00 SQL> SELECT MAX(prdate) FROM bme
20:27:00   2  
20:27:00 SQL> -- Now build model from bme and score sme
20:27:00 SQL> @score1.sql gatt
20:27:00 SQL> --
20:27:00 SQL> -- score1.sql
20:27:00 SQL> --
20:27:00 SQL> 
20:27:00 SQL> -- I use this script to send 5 params to score.sql
20:27:00 SQL> -- which does the heavy lifting of creating an SVM model.
20:27:00 SQL> -- Then at the very end of this script I use the model
20:27:00 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:27:00 SQL> 
20:27:00 SQL> -- I call this script from 2 other scripts:
20:27:00 SQL> -- score1_5min.sql
20:27:00 SQL> -- score1_5min_gattn.sql
20:27:00 SQL> 
20:27:00 SQL> -- The 1st param is the name of the target attribute.
20:27:00 SQL> -- I like to call my target attributes either gatt or gattn.
20:27:00 SQL> 
20:27:00 SQL> -- Demo:
20:27:00 SQL> -- @score1.sql 'gatt'
20:27:00 SQL> -- @score1.sql 'gattn'
20:27:00 SQL> 
20:27:00 SQL> -- Now, I fill up svmc_apply_prep.
20:27:00 SQL> -- I use same model_name used in score.sql
20:27:00 SQL> DEFINE model_name = 'svmfx101'
20:27:00 SQL> DEFINE bldtable	= 'bme'
20:27:00 SQL> DEFINE scoretable = 'sme'
20:27:00 SQL> DEFINE case_id	= 'prdate'
20:27:00 SQL> -- Demo:
20:27:00 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:27:00 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:27:00 SQL> --
20:27:00 SQL> -- score.sql
20:27:00 SQL> --
20:27:00 SQL> 
20:27:00 SQL> -- usage: score.sql
20:27:00 SQL> 
20:27:00 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:27:00 SQL> 
20:27:00 SQL> -- DEFINE target	   = 'gatt'
20:27:00 SQL> -- DEFINE model_name = 'svmfx101'
20:27:00 SQL> -- DEFINE bldtable   = 'bme'
20:27:00 SQL> -- DEFINE scoretable = 'sme'
20:27:00 SQL> -- DEFINE case_id    = 'prdate'
20:27:00 SQL> 
20:27:00 SQL> DEFINE target	= '&1'
20:27:00 SQL> DEFINE model_name = '&2'
20:27:00 SQL> DEFINE bldtable	= '&3'
20:27:00 SQL> DEFINE scoretable = '&4'
20:27:00 SQL> DEFINE case_id	= '&5'
20:27:00 SQL> 
20:27:00 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:27:00 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:27:00 SQL> 
20:27:00 SQL> -- Builds an SVM model using pl/sql.
20:27:00 SQL> 
20:27:00 SQL> -----------------------------------------------------------------------
20:27:00 SQL> --			    BUILD THE MODEL
20:27:00 SQL> -----------------------------------------------------------------------
20:27:00 SQL> 
20:27:00 SQL> -- Cleanup old build data preparation objects for repeat runs
20:27:00 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.00
20:27:00 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.01
20:27:00 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:27:00 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.00
20:27:00 SQL> 
20:27:00 SQL> 
20:27:00 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:27:00 SQL> --
20:27:00 SQL> -- DROP	TABLE svmc_settings ;
20:27:00 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:27:00 SQL> -- DELETE svmc_settings;
20:27:00 SQL> 
20:27:00 SQL> -- The default classification algorithm is Naive Bayes. So override
20:27:00 SQL> -- this choice to SVM using a settings table.
20:27:00 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:27:00 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:27:00 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:27:00 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:27:00 SQL> -- models.
20:27:00 SQL> --
20:27:00 SQL> 
20:27:00 SQL> -- Do this once and then comment it out.
20:27:00 SQL> -- That makes script go faster.
20:27:00 SQL> -- BEGIN
20:27:00 SQL> -- -- Populate settings table
20:27:00 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:27:00 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:27:00 SQL> --
20:27:00 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:27:00 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:27:00 SQL> --
20:27:00 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:27:00 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:27:00 SQL> --   COMMIT;
20:27:00 SQL> -- END;
20:27:00 SQL> -- /
20:27:00 SQL> 
20:27:00 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:27:00 SQL> 
20:27:00 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:27:00   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:27:00   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
20:27:00 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:27:00   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:27:00   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:27:00 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:27:00   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:27:00   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:27:00 SQL> 
20:27:00 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:27:00   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:27:00   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:27:00 SQL> 
20:27:00 SQL> --------------------------------
20:27:00 SQL> -- PREPARE BUILD (TRAINING) DATA
20:27:00 SQL> --
20:27:00 SQL> 
20:27:00 SQL> -- 1. Missing Value treatment for all Predictors and
20:27:00 SQL> -- 2. Outlier Treatment and
20:27:00 SQL> -- 3. Normalization are performed below.
20:27:00 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:27:00 SQL> --    normalized here.
20:27:00 SQL> 
20:27:00 SQL> BEGIN
20:27:00   2  	-- Perform missing value treatment for all predictors
20:27:00   3  	-- create miss tables
20:27:00   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:27:00   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:27:00   6  
20:27:00   7  	-- populate miss tables
20:27:00   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:27:00   9  	  miss_table_name => 'svmc_miss_num',
20:27:00  10  	  data_table_name => '&bldtable',
20:27:00  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:27:00  12  
20:27:00  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:27:00  14  	  miss_table_name => 'svmc_miss_cat',
20:27:00  15  	  data_table_name => '&bldtable',
20:27:00  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:27:00  17  
20:27:00  18  	-- xform input data to replace missing values
20:27:00  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:27:00  20  	  miss_table_name => 'svmc_miss_num',
20:27:00  21  	  data_table_name => '&bldtable',
20:27:00  22  	  xform_view_name => 'xformed_build_miss_num');
20:27:00  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:27:00  24  	  miss_table_name => 'svmc_miss_cat',
20:27:00  25  	  data_table_name => '&bldtable',
20:27:00  26  	  xform_view_name => 'xformed_build_miss_cat');
20:27:00  27  
20:27:00  28  	-- Perform outlier treatment.
20:27:00  29  	-- create clip table
20:27:00  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:27:00  31  
20:27:00  32  	-- populate clip table
20:27:00  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:27:00  34  	  clip_table_name => 'svmc_clip',
20:27:00  35  	  data_table_name => '&bldtable',
20:27:00  36  	  tail_frac	  => 0.025,
20:27:00  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:27:00  38  
20:27:00  39  	-- xform input data to winsorized data
20:27:00  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:27:00  41  	  clip_table_name => 'svmc_clip',
20:27:00  42  	  data_table_name => '&bldtable',
20:27:00  43  	  xform_view_name => 'svmc_winsor');
20:27:00  44  
20:27:00  45  	-- create normalization table
20:27:00  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:27:00  47  
20:27:00  48  	-- populate normalization table based on winsorized data
20:27:00  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:27:00  50  	  norm_table_name => 'svmc_norm',
20:27:00  51  	  data_table_name => 'svmc_winsor',
20:27:00  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:27:00  53  
20:27:00  54  	-- normalize the original data
20:27:00  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:27:00  56  	  norm_table_name => 'svmc_norm',
20:27:00  57  	  data_table_name => '&bldtable',
20:27:00  58  	  xform_view_name => 'svmc_build_prep');
20:27:00  59  END;
20:27:00  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.52
20:27:02 SQL> 
20:27:02 SQL> ---------------------
20:27:02 SQL> -- CREATE A NEW MODEL
20:27:02 SQL> --
20:27:02 SQL> -- Cleanup old model with the same name for repeat runs
20:27:02 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:27:02   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:27:02   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.92
20:27:03 SQL> 
20:27:03 SQL> -- Build a new SVM Model
20:27:03 SQL> BEGIN
20:27:03   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:27:03   3  	  model_name	      => '&model_name',
20:27:03   4  	  mining_function     => dbms_data_mining.classification,
20:27:03   5  	  data_table_name     => 'svmc_build_prep',
20:27:03   6  	  case_id_column_name => '&case_id',
20:27:03   7  	  target_column_name  => '&target',
20:27:03   8  	  settings_table_name => 'svmc_settings');
20:27:03   9  END;
20:27:03  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:03.16
20:27:06 SQL> 
20:27:06 SQL> -----------------------------------------------------------------------
20:27:06 SQL> --			       APPLY/score THE MODEL
20:27:06 SQL> -----------------------------------------------------------------------
20:27:06 SQL> 
20:27:06 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:27:06 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:27:06   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:27:06   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:27:06 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:27:06   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:27:06   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:27:06 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:27:06   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:27:06   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:27:06 SQL> -----------------------
20:27:06 SQL> -- PREPARE SCORING DATA
20:27:06 SQL> --
20:27:06 SQL> -- If the data for model creation has been prepared, then the data
20:27:06 SQL> -- to be scored using the model must be prepared in the same manner
20:27:06 SQL> -- in order to obtain meaningful results.
20:27:06 SQL> --
20:27:06 SQL> -- 1. Missing Value treatment for all Predictors and
20:27:06 SQL> -- 2. Normalization
20:27:06 SQL> -- No outlier treatment will be performed during test and apply. The
20:27:06 SQL> -- normalization step is sufficient, since the normalization parameters
20:27:06 SQL> -- already capture the effects of outlier treatment done with build data.
20:27:06 SQL> --
20:27:06 SQL> BEGIN
20:27:06   2  	-- Xform Test data to replace missing values
20:27:06   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:27:06   4  	  miss_table_name => 'svmc_miss_num',
20:27:06   5  	  data_table_name => '&scoretable',
20:27:06   6  	  xform_view_name => 'xformed_apply_miss_num');
20:27:06   7  
20:27:06   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:27:06   9  	  miss_table_name => 'svmc_miss_cat',
20:27:06  10  	  data_table_name => '&scoretable',
20:27:06  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:27:06  12  
20:27:06  13  	-- Normalize the data to be scored
20:27:06  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:27:06  15  	  norm_table_name => 'svmc_norm',
20:27:06  16  	  data_table_name => '&scoretable',
20:27:06  17  	  xform_view_name => 'svmc_apply_prep');
20:27:06  18  END;
20:27:06  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.18
20:27:06 SQL> 
20:27:06 SQL> -- Maybe I already collected a score for this prdate.
20:27:06 SQL> -- DELETE it if I did:
20:27:06 SQL> DELETE svm62scores
20:27:06   2  WHERE score > 0
20:27:06   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:27:06   4  -- I need to supply the target attribute name:
20:27:06   5  AND targ = '&1'
20:27:06   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gatt'

0 rows deleted.

Elapsed: 00:00:00.01
20:27:06 SQL> 
20:27:06 SQL> -- We do a drumroll here:
20:27:06 SQL> 
20:27:06 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:27:06   2  SELECT
20:27:06   3  prdate
20:27:06   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:27:06   5  ,sysdate
20:27:06   6  ,SUBSTR(prdate,1,7)pair
20:27:06   7  ,SUBSTR(prdate,-19)ydate
20:27:06   8  ,'&1'
20:27:06   9  FROM svmc_apply_prep
20:27:06  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gatt'

1 row created.

Elapsed: 00:00:00.04
20:27:06 SQL> @score1_5min_gattn.sql	2010-12-07 12:15:00 aud_usd
20:27:06 SQL> --
20:27:06 SQL> -- score1_5min_gattn.sql
20:27:06 SQL> --
20:27:06 SQL> 
20:27:06 SQL> -- Demo:
20:27:06 SQL> -- @score1_5min_gattn.sql 2010-12-31 20:45:01 aud_usd
20:27:06 SQL> 
20:27:06 SQL> CREATE OR REPLACE VIEW sme AS
20:27:06   2  SELECT
20:27:06   3  prdate
20:27:06   4  ,NULL gattn
20:27:06   5  ,g00
20:27:06   6  ,g01
20:27:06   7  ,g02
20:27:06   8  ,g03
20:27:06   9  ,g04
20:27:06  10  ,g05
20:27:06  11  ,g06
20:27:06  12  ,g07
20:27:06  13  ,g08
20:27:06  14  ,g09
20:27:06  15  ,g10
20:27:06  16  ,g11
20:27:06  17  ,g12
20:27:06  18  ,g13
20:27:06  19  ,g14
20:27:06  20  ,g15
20:27:06  21  ,g16
20:27:06  22  ,g17
20:27:06  23  ,g18
20:27:06  24  ,g19
20:27:06  25  ,g20
20:27:06  26  ,g21
20:27:06  27  ,g22
20:27:06  28  ,g23
20:27:06  29  ,g24
20:27:06  30  ,g25
20:27:06  31  ,g26
20:27:06  32  ,g27
20:27:06  33  ,g28
20:27:06  34  ,g29
20:27:06  35  ,g30
20:27:06  36  ,g31
20:27:06  37  ,g32
20:27:06  38  ,g33
20:27:06  39  ,g34
20:27:06  40  ,g35
20:27:06  41  ,g36
20:27:06  42  ,g37
20:27:06  43  ,g38
20:27:06  44  ,g39
20:27:06  45  ,g40
20:27:06  46  ,g41
20:27:06  47  FROM modsrc
20:27:06  48  WHERE ydate = '&1'||' '||'&2'
20:27:06  49  AND pair = '&3'
20:27:06  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-12-07'||' '||'12:15:00'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:27:06 SQL> 
20:27:06 SQL> -- rpt
20:27:06 SQL> -- We should see just 1 row:
20:27:06 SQL> 
20:27:06 SQL> SELECT COUNT(prdate) FROM sme
20:27:06   2  
20:27:06 SQL> -- Build the model:
20:27:06 SQL> CREATE OR REPLACE VIEW bme AS
20:27:06   2  SELECT
20:27:06   3  prdate
20:27:06   4  ,gattn
20:27:06   5  ,g00
20:27:06   6  ,g01
20:27:06   7  ,g02
20:27:06   8  ,g03
20:27:06   9  ,g04
20:27:06  10  ,g05
20:27:06  11  ,g06
20:27:06  12  ,g07
20:27:06  13  ,g08
20:27:06  14  ,g09
20:27:06  15  ,g10
20:27:06  16  ,g11
20:27:06  17  ,g12
20:27:06  18  ,g13
20:27:06  19  ,g14
20:27:06  20  ,g15
20:27:06  21  ,g16
20:27:06  22  ,g17
20:27:06  23  ,g18
20:27:06  24  ,g19
20:27:06  25  ,g20
20:27:06  26  ,g21
20:27:06  27  ,g22
20:27:06  28  ,g23
20:27:06  29  ,g24
20:27:06  30  ,g25
20:27:06  31  ,g26
20:27:06  32  ,g27
20:27:06  33  ,g28
20:27:06  34  ,g29
20:27:06  35  ,g30
20:27:06  36  ,g31
20:27:06  37  ,g32
20:27:06  38  ,g33
20:27:06  39  ,g34
20:27:06  40  ,g35
20:27:06  41  ,g36
20:27:06  42  ,g37
20:27:06  43  ,g38
20:27:06  44  ,g39
20:27:06  45  ,g40
20:27:06  46  ,g41
20:27:06  47  FROM modsrc
20:27:06  48  WHERE gattn IN('nup','up')
20:27:06  49  -- Use only rows which are older than 1 day:
20:27:06  50  AND 1+ydate < '&1'||' '||'&2'
20:27:06  51  AND pair = '&3'
20:27:06  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-12-07'||' '||'12:15:00'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.05
20:27:06 SQL> 
20:27:06 SQL> -- rpt
20:27:06 SQL> 
20:27:06 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn
20:27:06   2  
20:27:06 SQL> SELECT MAX(prdate) FROM bme
20:27:06   2  
20:27:06 SQL> -- Now build model from bme and score sme
20:27:06 SQL> @score1.sql gattn
20:27:06 SQL> --
20:27:06 SQL> -- score1.sql
20:27:06 SQL> --
20:27:06 SQL> 
20:27:06 SQL> -- I use this script to send 5 params to score.sql
20:27:06 SQL> -- which does the heavy lifting of creating an SVM model.
20:27:06 SQL> -- Then at the very end of this script I use the model
20:27:06 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:27:06 SQL> 
20:27:06 SQL> -- I call this script from 2 other scripts:
20:27:06 SQL> -- score1_5min.sql
20:27:06 SQL> -- score1_5min_gattn.sql
20:27:06 SQL> 
20:27:06 SQL> -- The 1st param is the name of the target attribute.
20:27:06 SQL> -- I like to call my target attributes either gatt or gattn.
20:27:06 SQL> 
20:27:06 SQL> -- Demo:
20:27:06 SQL> -- @score1.sql 'gatt'
20:27:06 SQL> -- @score1.sql 'gattn'
20:27:06 SQL> 
20:27:06 SQL> -- Now, I fill up svmc_apply_prep.
20:27:06 SQL> -- I use same model_name used in score.sql
20:27:06 SQL> DEFINE model_name = 'svmfx101'
20:27:06 SQL> DEFINE bldtable	= 'bme'
20:27:06 SQL> DEFINE scoretable = 'sme'
20:27:06 SQL> DEFINE case_id	= 'prdate'
20:27:06 SQL> -- Demo:
20:27:06 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:27:06 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:27:06 SQL> --
20:27:06 SQL> -- score.sql
20:27:06 SQL> --
20:27:06 SQL> 
20:27:06 SQL> -- usage: score.sql
20:27:06 SQL> 
20:27:06 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:27:06 SQL> 
20:27:06 SQL> -- DEFINE target	   = 'gatt'
20:27:06 SQL> -- DEFINE model_name = 'svmfx101'
20:27:06 SQL> -- DEFINE bldtable   = 'bme'
20:27:06 SQL> -- DEFINE scoretable = 'sme'
20:27:06 SQL> -- DEFINE case_id    = 'prdate'
20:27:06 SQL> 
20:27:06 SQL> DEFINE target	= '&1'
20:27:06 SQL> DEFINE model_name = '&2'
20:27:06 SQL> DEFINE bldtable	= '&3'
20:27:06 SQL> DEFINE scoretable = '&4'
20:27:06 SQL> DEFINE case_id	= '&5'
20:27:06 SQL> 
20:27:06 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:27:06 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:27:06 SQL> 
20:27:06 SQL> -- Builds an SVM model using pl/sql.
20:27:06 SQL> 
20:27:06 SQL> -----------------------------------------------------------------------
20:27:06 SQL> --			    BUILD THE MODEL
20:27:06 SQL> -----------------------------------------------------------------------
20:27:06 SQL> 
20:27:06 SQL> -- Cleanup old build data preparation objects for repeat runs
20:27:06 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.01
20:27:06 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:27:06 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.01
20:27:06 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.00
20:27:06 SQL> 
20:27:06 SQL> 
20:27:06 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:27:06 SQL> --
20:27:06 SQL> -- DROP	TABLE svmc_settings ;
20:27:06 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:27:06 SQL> -- DELETE svmc_settings;
20:27:06 SQL> 
20:27:06 SQL> -- The default classification algorithm is Naive Bayes. So override
20:27:06 SQL> -- this choice to SVM using a settings table.
20:27:06 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:27:06 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:27:06 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:27:06 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:27:06 SQL> -- models.
20:27:06 SQL> --
20:27:06 SQL> 
20:27:06 SQL> -- Do this once and then comment it out.
20:27:06 SQL> -- That makes script go faster.
20:27:06 SQL> -- BEGIN
20:27:06 SQL> -- -- Populate settings table
20:27:06 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:27:06 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:27:06 SQL> --
20:27:06 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:27:06 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:27:06 SQL> --
20:27:06 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:27:06 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:27:06 SQL> --   COMMIT;
20:27:06 SQL> -- END;
20:27:06 SQL> -- /
20:27:06 SQL> 
20:27:06 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.01
20:27:06 SQL> 
20:27:06 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:27:06   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:27:06   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
20:27:06 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:27:06   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:27:06   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:27:06 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:27:06   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:27:06   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:27:07 SQL> 
20:27:07 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:27:07   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:27:07   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:27:07 SQL> 
20:27:07 SQL> --------------------------------
20:27:07 SQL> -- PREPARE BUILD (TRAINING) DATA
20:27:07 SQL> --
20:27:07 SQL> 
20:27:07 SQL> -- 1. Missing Value treatment for all Predictors and
20:27:07 SQL> -- 2. Outlier Treatment and
20:27:07 SQL> -- 3. Normalization are performed below.
20:27:07 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:27:07 SQL> --    normalized here.
20:27:07 SQL> 
20:27:07 SQL> BEGIN
20:27:07   2  	-- Perform missing value treatment for all predictors
20:27:07   3  	-- create miss tables
20:27:07   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:27:07   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:27:07   6  
20:27:07   7  	-- populate miss tables
20:27:07   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:27:07   9  	  miss_table_name => 'svmc_miss_num',
20:27:07  10  	  data_table_name => '&bldtable',
20:27:07  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:27:07  12  
20:27:07  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:27:07  14  	  miss_table_name => 'svmc_miss_cat',
20:27:07  15  	  data_table_name => '&bldtable',
20:27:07  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:27:07  17  
20:27:07  18  	-- xform input data to replace missing values
20:27:07  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:27:07  20  	  miss_table_name => 'svmc_miss_num',
20:27:07  21  	  data_table_name => '&bldtable',
20:27:07  22  	  xform_view_name => 'xformed_build_miss_num');
20:27:07  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:27:07  24  	  miss_table_name => 'svmc_miss_cat',
20:27:07  25  	  data_table_name => '&bldtable',
20:27:07  26  	  xform_view_name => 'xformed_build_miss_cat');
20:27:07  27  
20:27:07  28  	-- Perform outlier treatment.
20:27:07  29  	-- create clip table
20:27:07  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:27:07  31  
20:27:07  32  	-- populate clip table
20:27:07  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:27:07  34  	  clip_table_name => 'svmc_clip',
20:27:07  35  	  data_table_name => '&bldtable',
20:27:07  36  	  tail_frac	  => 0.025,
20:27:07  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:27:07  38  
20:27:07  39  	-- xform input data to winsorized data
20:27:07  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:27:07  41  	  clip_table_name => 'svmc_clip',
20:27:07  42  	  data_table_name => '&bldtable',
20:27:07  43  	  xform_view_name => 'svmc_winsor');
20:27:07  44  
20:27:07  45  	-- create normalization table
20:27:07  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:27:07  47  
20:27:07  48  	-- populate normalization table based on winsorized data
20:27:07  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:27:07  50  	  norm_table_name => 'svmc_norm',
20:27:07  51  	  data_table_name => 'svmc_winsor',
20:27:07  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:27:07  53  
20:27:07  54  	-- normalize the original data
20:27:07  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:27:07  56  	  norm_table_name => 'svmc_norm',
20:27:07  57  	  data_table_name => '&bldtable',
20:27:07  58  	  xform_view_name => 'svmc_build_prep');
20:27:07  59  END;
20:27:07  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.86
20:27:08 SQL> 
20:27:08 SQL> ---------------------
20:27:08 SQL> -- CREATE A NEW MODEL
20:27:08 SQL> --
20:27:08 SQL> -- Cleanup old model with the same name for repeat runs
20:27:08 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:27:08   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:27:08   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.91
20:27:09 SQL> 
20:27:09 SQL> -- Build a new SVM Model
20:27:09 SQL> BEGIN
20:27:09   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:27:09   3  	  model_name	      => '&model_name',
20:27:09   4  	  mining_function     => dbms_data_mining.classification,
20:27:09   5  	  data_table_name     => 'svmc_build_prep',
20:27:09   6  	  case_id_column_name => '&case_id',
20:27:09   7  	  target_column_name  => '&target',
20:27:09   8  	  settings_table_name => 'svmc_settings');
20:27:09   9  END;
20:27:09  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:03.76
20:27:13 SQL> 
20:27:13 SQL> -----------------------------------------------------------------------
20:27:13 SQL> --			       APPLY/score THE MODEL
20:27:13 SQL> -----------------------------------------------------------------------
20:27:13 SQL> 
20:27:13 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:27:13 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:27:13   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:27:13   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:27:13 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:27:13   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:27:13   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:27:13 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:27:13   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:27:13   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:27:13 SQL> -----------------------
20:27:13 SQL> -- PREPARE SCORING DATA
20:27:13 SQL> --
20:27:13 SQL> -- If the data for model creation has been prepared, then the data
20:27:13 SQL> -- to be scored using the model must be prepared in the same manner
20:27:13 SQL> -- in order to obtain meaningful results.
20:27:13 SQL> --
20:27:13 SQL> -- 1. Missing Value treatment for all Predictors and
20:27:13 SQL> -- 2. Normalization
20:27:13 SQL> -- No outlier treatment will be performed during test and apply. The
20:27:13 SQL> -- normalization step is sufficient, since the normalization parameters
20:27:13 SQL> -- already capture the effects of outlier treatment done with build data.
20:27:13 SQL> --
20:27:13 SQL> BEGIN
20:27:13   2  	-- Xform Test data to replace missing values
20:27:13   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:27:13   4  	  miss_table_name => 'svmc_miss_num',
20:27:13   5  	  data_table_name => '&scoretable',
20:27:13   6  	  xform_view_name => 'xformed_apply_miss_num');
20:27:13   7  
20:27:13   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:27:13   9  	  miss_table_name => 'svmc_miss_cat',
20:27:13  10  	  data_table_name => '&scoretable',
20:27:13  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:27:13  12  
20:27:13  13  	-- Normalize the data to be scored
20:27:13  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:27:13  15  	  norm_table_name => 'svmc_norm',
20:27:13  16  	  data_table_name => '&scoretable',
20:27:13  17  	  xform_view_name => 'svmc_apply_prep');
20:27:13  18  END;
20:27:13  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.18
20:27:13 SQL> 
20:27:13 SQL> -- Maybe I already collected a score for this prdate.
20:27:13 SQL> -- DELETE it if I did:
20:27:13 SQL> DELETE svm62scores
20:27:13   2  WHERE score > 0
20:27:13   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:27:13   4  -- I need to supply the target attribute name:
20:27:13   5  AND targ = '&1'
20:27:13   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gattn'

0 rows deleted.

Elapsed: 00:00:00.02
20:27:13 SQL> 
20:27:13 SQL> -- We do a drumroll here:
20:27:13 SQL> 
20:27:13 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:27:13   2  SELECT
20:27:13   3  prdate
20:27:13   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:27:13   5  ,sysdate
20:27:13   6  ,SUBSTR(prdate,1,7)pair
20:27:13   7  ,SUBSTR(prdate,-19)ydate
20:27:13   8  ,'&1'
20:27:13   9  FROM svmc_apply_prep
20:27:13  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gattn'

1 row created.

Elapsed: 00:00:00.05
20:27:13 SQL> @score1_5min_gattn.sql	2010-12-23 01:00:00 aud_usd
20:27:13 SQL> --
20:27:13 SQL> -- score1_5min_gattn.sql
20:27:13 SQL> --
20:27:13 SQL> 
20:27:13 SQL> -- Demo:
20:27:13 SQL> -- @score1_5min_gattn.sql 2010-12-31 20:45:01 aud_usd
20:27:13 SQL> 
20:27:13 SQL> CREATE OR REPLACE VIEW sme AS
20:27:13   2  SELECT
20:27:13   3  prdate
20:27:13   4  ,NULL gattn
20:27:13   5  ,g00
20:27:13   6  ,g01
20:27:13   7  ,g02
20:27:13   8  ,g03
20:27:13   9  ,g04
20:27:13  10  ,g05
20:27:13  11  ,g06
20:27:13  12  ,g07
20:27:13  13  ,g08
20:27:13  14  ,g09
20:27:13  15  ,g10
20:27:13  16  ,g11
20:27:13  17  ,g12
20:27:13  18  ,g13
20:27:13  19  ,g14
20:27:13  20  ,g15
20:27:13  21  ,g16
20:27:13  22  ,g17
20:27:13  23  ,g18
20:27:13  24  ,g19
20:27:13  25  ,g20
20:27:13  26  ,g21
20:27:13  27  ,g22
20:27:13  28  ,g23
20:27:13  29  ,g24
20:27:13  30  ,g25
20:27:13  31  ,g26
20:27:13  32  ,g27
20:27:13  33  ,g28
20:27:13  34  ,g29
20:27:13  35  ,g30
20:27:13  36  ,g31
20:27:13  37  ,g32
20:27:13  38  ,g33
20:27:13  39  ,g34
20:27:13  40  ,g35
20:27:13  41  ,g36
20:27:13  42  ,g37
20:27:13  43  ,g38
20:27:13  44  ,g39
20:27:13  45  ,g40
20:27:13  46  ,g41
20:27:13  47  FROM modsrc
20:27:13  48  WHERE ydate = '&1'||' '||'&2'
20:27:13  49  AND pair = '&3'
20:27:13  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-12-23'||' '||'01:00:00'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.05
20:27:13 SQL> 
20:27:13 SQL> -- rpt
20:27:13 SQL> -- We should see just 1 row:
20:27:13 SQL> 
20:27:13 SQL> SELECT COUNT(prdate) FROM sme
20:27:13   2  
20:27:13 SQL> -- Build the model:
20:27:13 SQL> CREATE OR REPLACE VIEW bme AS
20:27:13   2  SELECT
20:27:13   3  prdate
20:27:13   4  ,gattn
20:27:13   5  ,g00
20:27:13   6  ,g01
20:27:13   7  ,g02
20:27:13   8  ,g03
20:27:13   9  ,g04
20:27:13  10  ,g05
20:27:13  11  ,g06
20:27:13  12  ,g07
20:27:13  13  ,g08
20:27:13  14  ,g09
20:27:13  15  ,g10
20:27:13  16  ,g11
20:27:13  17  ,g12
20:27:13  18  ,g13
20:27:13  19  ,g14
20:27:13  20  ,g15
20:27:13  21  ,g16
20:27:13  22  ,g17
20:27:13  23  ,g18
20:27:13  24  ,g19
20:27:13  25  ,g20
20:27:13  26  ,g21
20:27:13  27  ,g22
20:27:13  28  ,g23
20:27:13  29  ,g24
20:27:13  30  ,g25
20:27:13  31  ,g26
20:27:13  32  ,g27
20:27:13  33  ,g28
20:27:13  34  ,g29
20:27:13  35  ,g30
20:27:13  36  ,g31
20:27:13  37  ,g32
20:27:13  38  ,g33
20:27:13  39  ,g34
20:27:13  40  ,g35
20:27:13  41  ,g36
20:27:13  42  ,g37
20:27:13  43  ,g38
20:27:13  44  ,g39
20:27:13  45  ,g40
20:27:13  46  ,g41
20:27:13  47  FROM modsrc
20:27:13  48  WHERE gattn IN('nup','up')
20:27:13  49  -- Use only rows which are older than 1 day:
20:27:13  50  AND 1+ydate < '&1'||' '||'&2'
20:27:13  51  AND pair = '&3'
20:27:13  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-12-23'||' '||'01:00:00'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.06
20:27:14 SQL> 
20:27:14 SQL> -- rpt
20:27:14 SQL> 
20:27:14 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn
20:27:14   2  
20:27:14 SQL> SELECT MAX(prdate) FROM bme
20:27:14   2  
20:27:14 SQL> -- Now build model from bme and score sme
20:27:14 SQL> @score1.sql gattn
20:27:14 SQL> --
20:27:14 SQL> -- score1.sql
20:27:14 SQL> --
20:27:14 SQL> 
20:27:14 SQL> -- I use this script to send 5 params to score.sql
20:27:14 SQL> -- which does the heavy lifting of creating an SVM model.
20:27:14 SQL> -- Then at the very end of this script I use the model
20:27:14 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:27:14 SQL> 
20:27:14 SQL> -- I call this script from 2 other scripts:
20:27:14 SQL> -- score1_5min.sql
20:27:14 SQL> -- score1_5min_gattn.sql
20:27:14 SQL> 
20:27:14 SQL> -- The 1st param is the name of the target attribute.
20:27:14 SQL> -- I like to call my target attributes either gatt or gattn.
20:27:14 SQL> 
20:27:14 SQL> -- Demo:
20:27:14 SQL> -- @score1.sql 'gatt'
20:27:14 SQL> -- @score1.sql 'gattn'
20:27:14 SQL> 
20:27:14 SQL> -- Now, I fill up svmc_apply_prep.
20:27:14 SQL> -- I use same model_name used in score.sql
20:27:14 SQL> DEFINE model_name = 'svmfx101'
20:27:14 SQL> DEFINE bldtable	= 'bme'
20:27:14 SQL> DEFINE scoretable = 'sme'
20:27:14 SQL> DEFINE case_id	= 'prdate'
20:27:14 SQL> -- Demo:
20:27:14 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:27:14 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:27:14 SQL> --
20:27:14 SQL> -- score.sql
20:27:14 SQL> --
20:27:14 SQL> 
20:27:14 SQL> -- usage: score.sql
20:27:14 SQL> 
20:27:14 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:27:14 SQL> 
20:27:14 SQL> -- DEFINE target	   = 'gatt'
20:27:14 SQL> -- DEFINE model_name = 'svmfx101'
20:27:14 SQL> -- DEFINE bldtable   = 'bme'
20:27:14 SQL> -- DEFINE scoretable = 'sme'
20:27:14 SQL> -- DEFINE case_id    = 'prdate'
20:27:14 SQL> 
20:27:14 SQL> DEFINE target	= '&1'
20:27:14 SQL> DEFINE model_name = '&2'
20:27:14 SQL> DEFINE bldtable	= '&3'
20:27:14 SQL> DEFINE scoretable = '&4'
20:27:14 SQL> DEFINE case_id	= '&5'
20:27:14 SQL> 
20:27:14 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:27:14 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:27:14 SQL> 
20:27:14 SQL> -- Builds an SVM model using pl/sql.
20:27:14 SQL> 
20:27:14 SQL> -----------------------------------------------------------------------
20:27:14 SQL> --			    BUILD THE MODEL
20:27:14 SQL> -----------------------------------------------------------------------
20:27:14 SQL> 
20:27:14 SQL> -- Cleanup old build data preparation objects for repeat runs
20:27:14 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.00
20:27:14 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.01
20:27:14 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:27:14 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.01
20:27:14 SQL> 
20:27:14 SQL> 
20:27:14 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:27:14 SQL> --
20:27:14 SQL> -- DROP	TABLE svmc_settings ;
20:27:14 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:27:14 SQL> -- DELETE svmc_settings;
20:27:14 SQL> 
20:27:14 SQL> -- The default classification algorithm is Naive Bayes. So override
20:27:14 SQL> -- this choice to SVM using a settings table.
20:27:14 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:27:14 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:27:14 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:27:14 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:27:14 SQL> -- models.
20:27:14 SQL> --
20:27:14 SQL> 
20:27:14 SQL> -- Do this once and then comment it out.
20:27:14 SQL> -- That makes script go faster.
20:27:14 SQL> -- BEGIN
20:27:14 SQL> -- -- Populate settings table
20:27:14 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:27:14 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:27:14 SQL> --
20:27:14 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:27:14 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:27:14 SQL> --
20:27:14 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:27:14 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:27:14 SQL> --   COMMIT;
20:27:14 SQL> -- END;
20:27:14 SQL> -- /
20:27:14 SQL> 
20:27:14 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:27:14 SQL> 
20:27:14 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:27:14   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:27:14   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
20:27:14 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:27:14   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:27:14   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:27:14 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:27:14   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:27:14   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:27:14 SQL> 
20:27:14 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:27:14   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:27:14   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:27:14 SQL> 
20:27:14 SQL> --------------------------------
20:27:14 SQL> -- PREPARE BUILD (TRAINING) DATA
20:27:14 SQL> --
20:27:14 SQL> 
20:27:14 SQL> -- 1. Missing Value treatment for all Predictors and
20:27:14 SQL> -- 2. Outlier Treatment and
20:27:14 SQL> -- 3. Normalization are performed below.
20:27:14 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:27:14 SQL> --    normalized here.
20:27:14 SQL> 
20:27:14 SQL> BEGIN
20:27:14   2  	-- Perform missing value treatment for all predictors
20:27:14   3  	-- create miss tables
20:27:14   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:27:14   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:27:14   6  
20:27:14   7  	-- populate miss tables
20:27:14   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:27:14   9  	  miss_table_name => 'svmc_miss_num',
20:27:14  10  	  data_table_name => '&bldtable',
20:27:14  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:27:14  12  
20:27:14  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:27:14  14  	  miss_table_name => 'svmc_miss_cat',
20:27:14  15  	  data_table_name => '&bldtable',
20:27:14  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:27:14  17  
20:27:14  18  	-- xform input data to replace missing values
20:27:14  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:27:14  20  	  miss_table_name => 'svmc_miss_num',
20:27:14  21  	  data_table_name => '&bldtable',
20:27:14  22  	  xform_view_name => 'xformed_build_miss_num');
20:27:14  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:27:14  24  	  miss_table_name => 'svmc_miss_cat',
20:27:14  25  	  data_table_name => '&bldtable',
20:27:14  26  	  xform_view_name => 'xformed_build_miss_cat');
20:27:14  27  
20:27:14  28  	-- Perform outlier treatment.
20:27:14  29  	-- create clip table
20:27:14  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:27:14  31  
20:27:14  32  	-- populate clip table
20:27:14  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:27:14  34  	  clip_table_name => 'svmc_clip',
20:27:14  35  	  data_table_name => '&bldtable',
20:27:14  36  	  tail_frac	  => 0.025,
20:27:14  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:27:14  38  
20:27:14  39  	-- xform input data to winsorized data
20:27:14  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:27:14  41  	  clip_table_name => 'svmc_clip',
20:27:14  42  	  data_table_name => '&bldtable',
20:27:14  43  	  xform_view_name => 'svmc_winsor');
20:27:14  44  
20:27:14  45  	-- create normalization table
20:27:14  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:27:14  47  
20:27:14  48  	-- populate normalization table based on winsorized data
20:27:14  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:27:14  50  	  norm_table_name => 'svmc_norm',
20:27:14  51  	  data_table_name => 'svmc_winsor',
20:27:14  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:27:14  53  
20:27:14  54  	-- normalize the original data
20:27:14  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:27:14  56  	  norm_table_name => 'svmc_norm',
20:27:14  57  	  data_table_name => '&bldtable',
20:27:14  58  	  xform_view_name => 'svmc_build_prep');
20:27:14  59  END;
20:27:14  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:02.13
20:27:16 SQL> 
20:27:16 SQL> ---------------------
20:27:16 SQL> -- CREATE A NEW MODEL
20:27:16 SQL> --
20:27:16 SQL> -- Cleanup old model with the same name for repeat runs
20:27:16 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:27:16   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:27:16   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.18
20:27:17 SQL> 
20:27:17 SQL> -- Build a new SVM Model
20:27:17 SQL> BEGIN
20:27:17   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:27:17   3  	  model_name	      => '&model_name',
20:27:17   4  	  mining_function     => dbms_data_mining.classification,
20:27:17   5  	  data_table_name     => 'svmc_build_prep',
20:27:17   6  	  case_id_column_name => '&case_id',
20:27:17   7  	  target_column_name  => '&target',
20:27:17   8  	  settings_table_name => 'svmc_settings');
20:27:17   9  END;
20:27:17  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:04.58
20:27:22 SQL> 
20:27:22 SQL> -----------------------------------------------------------------------
20:27:22 SQL> --			       APPLY/score THE MODEL
20:27:22 SQL> -----------------------------------------------------------------------
20:27:22 SQL> 
20:27:22 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:27:22 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:27:22   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:27:22   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:27:22 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:27:22   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:27:22   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:27:22 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:27:22   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:27:22   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:27:22 SQL> -----------------------
20:27:22 SQL> -- PREPARE SCORING DATA
20:27:22 SQL> --
20:27:22 SQL> -- If the data for model creation has been prepared, then the data
20:27:22 SQL> -- to be scored using the model must be prepared in the same manner
20:27:22 SQL> -- in order to obtain meaningful results.
20:27:22 SQL> --
20:27:22 SQL> -- 1. Missing Value treatment for all Predictors and
20:27:22 SQL> -- 2. Normalization
20:27:22 SQL> -- No outlier treatment will be performed during test and apply. The
20:27:22 SQL> -- normalization step is sufficient, since the normalization parameters
20:27:22 SQL> -- already capture the effects of outlier treatment done with build data.
20:27:22 SQL> --
20:27:22 SQL> BEGIN
20:27:22   2  	-- Xform Test data to replace missing values
20:27:22   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:27:22   4  	  miss_table_name => 'svmc_miss_num',
20:27:22   5  	  data_table_name => '&scoretable',
20:27:22   6  	  xform_view_name => 'xformed_apply_miss_num');
20:27:22   7  
20:27:22   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:27:22   9  	  miss_table_name => 'svmc_miss_cat',
20:27:22  10  	  data_table_name => '&scoretable',
20:27:22  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:27:22  12  
20:27:22  13  	-- Normalize the data to be scored
20:27:22  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:27:22  15  	  norm_table_name => 'svmc_norm',
20:27:22  16  	  data_table_name => '&scoretable',
20:27:22  17  	  xform_view_name => 'svmc_apply_prep');
20:27:22  18  END;
20:27:22  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.18
20:27:22 SQL> 
20:27:22 SQL> -- Maybe I already collected a score for this prdate.
20:27:22 SQL> -- DELETE it if I did:
20:27:22 SQL> DELETE svm62scores
20:27:22   2  WHERE score > 0
20:27:22   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:27:22   4  -- I need to supply the target attribute name:
20:27:22   5  AND targ = '&1'
20:27:22   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gattn'

0 rows deleted.

Elapsed: 00:00:00.01
20:27:22 SQL> 
20:27:22 SQL> -- We do a drumroll here:
20:27:22 SQL> 
20:27:22 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:27:22   2  SELECT
20:27:22   3  prdate
20:27:22   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:27:22   5  ,sysdate
20:27:22   6  ,SUBSTR(prdate,1,7)pair
20:27:22   7  ,SUBSTR(prdate,-19)ydate
20:27:22   8  ,'&1'
20:27:22   9  FROM svmc_apply_prep
20:27:22  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gattn'

1 row created.

Elapsed: 00:00:00.05
20:27:22 SQL> @score1_5min.sql	      2010-12-14 16:50:00 aud_usd
20:27:22 SQL> --
20:27:22 SQL> -- score1_5min.sql
20:27:22 SQL> --
20:27:22 SQL> 
20:27:22 SQL> -- Demo:
20:27:22 SQL> -- @score1_5min.sql 2010-12-31 20:45:01 aud_usd
20:27:22 SQL> 
20:27:22 SQL> CREATE OR REPLACE VIEW sme AS
20:27:22   2  SELECT
20:27:22   3  prdate
20:27:22   4  ,NULL gatt
20:27:22   5  ,g00
20:27:22   6  ,g01
20:27:22   7  ,g02
20:27:22   8  ,g03
20:27:22   9  ,g04
20:27:22  10  ,g05
20:27:22  11  ,g06
20:27:22  12  ,g07
20:27:22  13  ,g08
20:27:22  14  ,g09
20:27:22  15  ,g10
20:27:22  16  ,g11
20:27:22  17  ,g12
20:27:22  18  ,g13
20:27:22  19  ,g14
20:27:22  20  ,g15
20:27:22  21  ,g16
20:27:22  22  ,g17
20:27:22  23  ,g18
20:27:22  24  ,g19
20:27:22  25  ,g20
20:27:22  26  ,g21
20:27:22  27  ,g22
20:27:22  28  ,g23
20:27:22  29  ,g24
20:27:22  30  ,g25
20:27:22  31  ,g26
20:27:22  32  ,g27
20:27:22  33  ,g28
20:27:22  34  ,g29
20:27:22  35  ,g30
20:27:22  36  ,g31
20:27:22  37  ,g32
20:27:22  38  ,g33
20:27:22  39  ,g34
20:27:22  40  ,g35
20:27:22  41  ,g36
20:27:22  42  ,g37
20:27:22  43  ,g38
20:27:22  44  ,g39
20:27:22  45  ,g40
20:27:22  46  ,g41
20:27:22  47  FROM modsrc
20:27:22  48  WHERE ydate = '&1'||' '||'&2'
20:27:22  49  AND pair = '&3'
20:27:22  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-12-14'||' '||'16:50:00'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.05
20:27:22 SQL> 
20:27:22 SQL> -- rpt
20:27:22 SQL> -- We should see just 1 row:
20:27:22 SQL> 
20:27:22 SQL> SELECT COUNT(prdate) FROM sme
20:27:22   2  
20:27:22 SQL> -- Build the model:
20:27:22 SQL> CREATE OR REPLACE VIEW bme AS
20:27:22   2  SELECT
20:27:22   3  prdate
20:27:22   4  ,gatt
20:27:22   5  ,g00
20:27:22   6  ,g01
20:27:22   7  ,g02
20:27:22   8  ,g03
20:27:22   9  ,g04
20:27:22  10  ,g05
20:27:22  11  ,g06
20:27:22  12  ,g07
20:27:22  13  ,g08
20:27:22  14  ,g09
20:27:22  15  ,g10
20:27:22  16  ,g11
20:27:22  17  ,g12
20:27:22  18  ,g13
20:27:22  19  ,g14
20:27:22  20  ,g15
20:27:22  21  ,g16
20:27:22  22  ,g17
20:27:22  23  ,g18
20:27:22  24  ,g19
20:27:22  25  ,g20
20:27:22  26  ,g21
20:27:22  27  ,g22
20:27:22  28  ,g23
20:27:22  29  ,g24
20:27:22  30  ,g25
20:27:22  31  ,g26
20:27:22  32  ,g27
20:27:22  33  ,g28
20:27:22  34  ,g29
20:27:22  35  ,g30
20:27:22  36  ,g31
20:27:22  37  ,g32
20:27:22  38  ,g33
20:27:22  39  ,g34
20:27:22  40  ,g35
20:27:22  41  ,g36
20:27:22  42  ,g37
20:27:22  43  ,g38
20:27:22  44  ,g39
20:27:22  45  ,g40
20:27:22  46  ,g41
20:27:22  47  FROM modsrc
20:27:22  48  WHERE gatt IN('nup','up')
20:27:22  49  -- Use only rows which are older than 1 day:
20:27:22  50  AND 1+ydate < '&1'||' '||'&2'
20:27:22  51  AND pair = '&3'
20:27:22  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-12-14'||' '||'16:50:00'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:27:22 SQL> 
20:27:22 SQL> -- rpt
20:27:22 SQL> 
20:27:22 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt
20:27:22   2  
20:27:22 SQL> SELECT MAX(prdate) FROM bme
20:27:22   2  
20:27:22 SQL> -- Now build model from bme and score sme
20:27:22 SQL> @score1.sql gatt
20:27:22 SQL> --
20:27:22 SQL> -- score1.sql
20:27:22 SQL> --
20:27:22 SQL> 
20:27:22 SQL> -- I use this script to send 5 params to score.sql
20:27:22 SQL> -- which does the heavy lifting of creating an SVM model.
20:27:22 SQL> -- Then at the very end of this script I use the model
20:27:22 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:27:22 SQL> 
20:27:22 SQL> -- I call this script from 2 other scripts:
20:27:22 SQL> -- score1_5min.sql
20:27:22 SQL> -- score1_5min_gattn.sql
20:27:22 SQL> 
20:27:22 SQL> -- The 1st param is the name of the target attribute.
20:27:22 SQL> -- I like to call my target attributes either gatt or gattn.
20:27:22 SQL> 
20:27:22 SQL> -- Demo:
20:27:22 SQL> -- @score1.sql 'gatt'
20:27:22 SQL> -- @score1.sql 'gattn'
20:27:22 SQL> 
20:27:22 SQL> -- Now, I fill up svmc_apply_prep.
20:27:22 SQL> -- I use same model_name used in score.sql
20:27:22 SQL> DEFINE model_name = 'svmfx101'
20:27:22 SQL> DEFINE bldtable	= 'bme'
20:27:22 SQL> DEFINE scoretable = 'sme'
20:27:22 SQL> DEFINE case_id	= 'prdate'
20:27:22 SQL> -- Demo:
20:27:22 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:27:22 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:27:22 SQL> --
20:27:22 SQL> -- score.sql
20:27:22 SQL> --
20:27:22 SQL> 
20:27:22 SQL> -- usage: score.sql
20:27:22 SQL> 
20:27:22 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:27:22 SQL> 
20:27:22 SQL> -- DEFINE target	   = 'gatt'
20:27:22 SQL> -- DEFINE model_name = 'svmfx101'
20:27:22 SQL> -- DEFINE bldtable   = 'bme'
20:27:22 SQL> -- DEFINE scoretable = 'sme'
20:27:22 SQL> -- DEFINE case_id    = 'prdate'
20:27:22 SQL> 
20:27:22 SQL> DEFINE target	= '&1'
20:27:22 SQL> DEFINE model_name = '&2'
20:27:22 SQL> DEFINE bldtable	= '&3'
20:27:22 SQL> DEFINE scoretable = '&4'
20:27:22 SQL> DEFINE case_id	= '&5'
20:27:22 SQL> 
20:27:22 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:27:22 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:27:22 SQL> 
20:27:22 SQL> -- Builds an SVM model using pl/sql.
20:27:22 SQL> 
20:27:22 SQL> -----------------------------------------------------------------------
20:27:22 SQL> --			    BUILD THE MODEL
20:27:22 SQL> -----------------------------------------------------------------------
20:27:22 SQL> 
20:27:22 SQL> -- Cleanup old build data preparation objects for repeat runs
20:27:22 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.00
20:27:22 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:27:22 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.01
20:27:22 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.00
20:27:22 SQL> 
20:27:22 SQL> 
20:27:22 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:27:22 SQL> --
20:27:22 SQL> -- DROP	TABLE svmc_settings ;
20:27:22 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:27:22 SQL> -- DELETE svmc_settings;
20:27:22 SQL> 
20:27:22 SQL> -- The default classification algorithm is Naive Bayes. So override
20:27:22 SQL> -- this choice to SVM using a settings table.
20:27:22 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:27:22 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:27:22 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:27:22 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:27:22 SQL> -- models.
20:27:22 SQL> --
20:27:22 SQL> 
20:27:22 SQL> -- Do this once and then comment it out.
20:27:22 SQL> -- That makes script go faster.
20:27:22 SQL> -- BEGIN
20:27:22 SQL> -- -- Populate settings table
20:27:22 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:27:22 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:27:22 SQL> --
20:27:22 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:27:22 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:27:22 SQL> --
20:27:22 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:27:22 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:27:22 SQL> --   COMMIT;
20:27:22 SQL> -- END;
20:27:22 SQL> -- /
20:27:22 SQL> 
20:27:22 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:27:22 SQL> 
20:27:22 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:27:22   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:27:22   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:27:22 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:27:22   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:27:22   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:27:22 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:27:22   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:27:22   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:27:22 SQL> 
20:27:22 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:27:22   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:27:22   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
20:27:22 SQL> 
20:27:22 SQL> --------------------------------
20:27:22 SQL> -- PREPARE BUILD (TRAINING) DATA
20:27:22 SQL> --
20:27:22 SQL> 
20:27:22 SQL> -- 1. Missing Value treatment for all Predictors and
20:27:22 SQL> -- 2. Outlier Treatment and
20:27:22 SQL> -- 3. Normalization are performed below.
20:27:22 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:27:22 SQL> --    normalized here.
20:27:22 SQL> 
20:27:22 SQL> BEGIN
20:27:22   2  	-- Perform missing value treatment for all predictors
20:27:22   3  	-- create miss tables
20:27:22   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:27:22   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:27:22   6  
20:27:22   7  	-- populate miss tables
20:27:22   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:27:22   9  	  miss_table_name => 'svmc_miss_num',
20:27:22  10  	  data_table_name => '&bldtable',
20:27:22  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:27:22  12  
20:27:22  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:27:22  14  	  miss_table_name => 'svmc_miss_cat',
20:27:22  15  	  data_table_name => '&bldtable',
20:27:22  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:27:22  17  
20:27:22  18  	-- xform input data to replace missing values
20:27:22  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:27:22  20  	  miss_table_name => 'svmc_miss_num',
20:27:22  21  	  data_table_name => '&bldtable',
20:27:22  22  	  xform_view_name => 'xformed_build_miss_num');
20:27:22  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:27:22  24  	  miss_table_name => 'svmc_miss_cat',
20:27:22  25  	  data_table_name => '&bldtable',
20:27:22  26  	  xform_view_name => 'xformed_build_miss_cat');
20:27:22  27  
20:27:22  28  	-- Perform outlier treatment.
20:27:22  29  	-- create clip table
20:27:22  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:27:22  31  
20:27:22  32  	-- populate clip table
20:27:22  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:27:22  34  	  clip_table_name => 'svmc_clip',
20:27:22  35  	  data_table_name => '&bldtable',
20:27:22  36  	  tail_frac	  => 0.025,
20:27:22  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:27:22  38  
20:27:22  39  	-- xform input data to winsorized data
20:27:22  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:27:22  41  	  clip_table_name => 'svmc_clip',
20:27:22  42  	  data_table_name => '&bldtable',
20:27:22  43  	  xform_view_name => 'svmc_winsor');
20:27:22  44  
20:27:22  45  	-- create normalization table
20:27:22  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:27:22  47  
20:27:22  48  	-- populate normalization table based on winsorized data
20:27:22  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:27:22  50  	  norm_table_name => 'svmc_norm',
20:27:22  51  	  data_table_name => 'svmc_winsor',
20:27:22  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:27:22  53  
20:27:22  54  	-- normalize the original data
20:27:22  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:27:22  56  	  norm_table_name => 'svmc_norm',
20:27:22  57  	  data_table_name => '&bldtable',
20:27:22  58  	  xform_view_name => 'svmc_build_prep');
20:27:22  59  END;
20:27:22  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.96
20:27:24 SQL> 
20:27:24 SQL> ---------------------
20:27:24 SQL> -- CREATE A NEW MODEL
20:27:24 SQL> --
20:27:24 SQL> -- Cleanup old model with the same name for repeat runs
20:27:24 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:27:24   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:27:24   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.82
20:27:25 SQL> 
20:27:25 SQL> -- Build a new SVM Model
20:27:25 SQL> BEGIN
20:27:25   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:27:25   3  	  model_name	      => '&model_name',
20:27:25   4  	  mining_function     => dbms_data_mining.classification,
20:27:25   5  	  data_table_name     => 'svmc_build_prep',
20:27:25   6  	  case_id_column_name => '&case_id',
20:27:25   7  	  target_column_name  => '&target',
20:27:25   8  	  settings_table_name => 'svmc_settings');
20:27:25   9  END;
20:27:25  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:04.46
20:27:29 SQL> 
20:27:29 SQL> -----------------------------------------------------------------------
20:27:29 SQL> --			       APPLY/score THE MODEL
20:27:29 SQL> -----------------------------------------------------------------------
20:27:29 SQL> 
20:27:29 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:27:29 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:27:29   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:27:29   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.08
20:27:30 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:27:30   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:27:30   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.16
20:27:30 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:27:30   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:27:30   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.07
20:27:30 SQL> -----------------------
20:27:30 SQL> -- PREPARE SCORING DATA
20:27:30 SQL> --
20:27:30 SQL> -- If the data for model creation has been prepared, then the data
20:27:30 SQL> -- to be scored using the model must be prepared in the same manner
20:27:30 SQL> -- in order to obtain meaningful results.
20:27:30 SQL> --
20:27:30 SQL> -- 1. Missing Value treatment for all Predictors and
20:27:30 SQL> -- 2. Normalization
20:27:30 SQL> -- No outlier treatment will be performed during test and apply. The
20:27:30 SQL> -- normalization step is sufficient, since the normalization parameters
20:27:30 SQL> -- already capture the effects of outlier treatment done with build data.
20:27:30 SQL> --
20:27:30 SQL> BEGIN
20:27:30   2  	-- Xform Test data to replace missing values
20:27:30   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:27:30   4  	  miss_table_name => 'svmc_miss_num',
20:27:30   5  	  data_table_name => '&scoretable',
20:27:30   6  	  xform_view_name => 'xformed_apply_miss_num');
20:27:30   7  
20:27:30   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:27:30   9  	  miss_table_name => 'svmc_miss_cat',
20:27:30  10  	  data_table_name => '&scoretable',
20:27:30  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:27:30  12  
20:27:30  13  	-- Normalize the data to be scored
20:27:30  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:27:30  15  	  norm_table_name => 'svmc_norm',
20:27:30  16  	  data_table_name => '&scoretable',
20:27:30  17  	  xform_view_name => 'svmc_apply_prep');
20:27:30  18  END;
20:27:30  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.19
20:27:30 SQL> 
20:27:30 SQL> -- Maybe I already collected a score for this prdate.
20:27:30 SQL> -- DELETE it if I did:
20:27:30 SQL> DELETE svm62scores
20:27:30   2  WHERE score > 0
20:27:30   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:27:30   4  -- I need to supply the target attribute name:
20:27:30   5  AND targ = '&1'
20:27:30   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gatt'

0 rows deleted.

Elapsed: 00:00:00.02
20:27:30 SQL> 
20:27:30 SQL> -- We do a drumroll here:
20:27:30 SQL> 
20:27:30 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:27:30   2  SELECT
20:27:30   3  prdate
20:27:30   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:27:30   5  ,sysdate
20:27:30   6  ,SUBSTR(prdate,1,7)pair
20:27:30   7  ,SUBSTR(prdate,-19)ydate
20:27:30   8  ,'&1'
20:27:30   9  FROM svmc_apply_prep
20:27:30  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gatt'

1 row created.

Elapsed: 00:00:00.05
20:27:30 SQL> @score1_5min_gattn.sql	2010-12-03 13:25:00 aud_usd
20:27:30 SQL> --
20:27:30 SQL> -- score1_5min_gattn.sql
20:27:30 SQL> --
20:27:30 SQL> 
20:27:30 SQL> -- Demo:
20:27:30 SQL> -- @score1_5min_gattn.sql 2010-12-31 20:45:01 aud_usd
20:27:30 SQL> 
20:27:30 SQL> CREATE OR REPLACE VIEW sme AS
20:27:30   2  SELECT
20:27:30   3  prdate
20:27:30   4  ,NULL gattn
20:27:30   5  ,g00
20:27:30   6  ,g01
20:27:30   7  ,g02
20:27:30   8  ,g03
20:27:30   9  ,g04
20:27:30  10  ,g05
20:27:30  11  ,g06
20:27:30  12  ,g07
20:27:30  13  ,g08
20:27:30  14  ,g09
20:27:30  15  ,g10
20:27:30  16  ,g11
20:27:30  17  ,g12
20:27:30  18  ,g13
20:27:30  19  ,g14
20:27:30  20  ,g15
20:27:30  21  ,g16
20:27:30  22  ,g17
20:27:30  23  ,g18
20:27:30  24  ,g19
20:27:30  25  ,g20
20:27:30  26  ,g21
20:27:30  27  ,g22
20:27:30  28  ,g23
20:27:30  29  ,g24
20:27:30  30  ,g25
20:27:30  31  ,g26
20:27:30  32  ,g27
20:27:30  33  ,g28
20:27:30  34  ,g29
20:27:30  35  ,g30
20:27:30  36  ,g31
20:27:30  37  ,g32
20:27:30  38  ,g33
20:27:30  39  ,g34
20:27:30  40  ,g35
20:27:30  41  ,g36
20:27:30  42  ,g37
20:27:30  43  ,g38
20:27:30  44  ,g39
20:27:30  45  ,g40
20:27:30  46  ,g41
20:27:30  47  FROM modsrc
20:27:30  48  WHERE ydate = '&1'||' '||'&2'
20:27:30  49  AND pair = '&3'
20:27:30  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-12-03'||' '||'13:25:00'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.05
20:27:30 SQL> 
20:27:30 SQL> -- rpt
20:27:30 SQL> -- We should see just 1 row:
20:27:30 SQL> 
20:27:30 SQL> SELECT COUNT(prdate) FROM sme
20:27:30   2  
20:27:30 SQL> -- Build the model:
20:27:30 SQL> CREATE OR REPLACE VIEW bme AS
20:27:30   2  SELECT
20:27:30   3  prdate
20:27:30   4  ,gattn
20:27:30   5  ,g00
20:27:30   6  ,g01
20:27:30   7  ,g02
20:27:30   8  ,g03
20:27:30   9  ,g04
20:27:30  10  ,g05
20:27:30  11  ,g06
20:27:30  12  ,g07
20:27:30  13  ,g08
20:27:30  14  ,g09
20:27:30  15  ,g10
20:27:30  16  ,g11
20:27:30  17  ,g12
20:27:30  18  ,g13
20:27:30  19  ,g14
20:27:30  20  ,g15
20:27:30  21  ,g16
20:27:30  22  ,g17
20:27:30  23  ,g18
20:27:30  24  ,g19
20:27:30  25  ,g20
20:27:30  26  ,g21
20:27:30  27  ,g22
20:27:30  28  ,g23
20:27:30  29  ,g24
20:27:30  30  ,g25
20:27:30  31  ,g26
20:27:30  32  ,g27
20:27:30  33  ,g28
20:27:30  34  ,g29
20:27:30  35  ,g30
20:27:30  36  ,g31
20:27:30  37  ,g32
20:27:30  38  ,g33
20:27:30  39  ,g34
20:27:30  40  ,g35
20:27:30  41  ,g36
20:27:30  42  ,g37
20:27:30  43  ,g38
20:27:30  44  ,g39
20:27:30  45  ,g40
20:27:30  46  ,g41
20:27:30  47  FROM modsrc
20:27:30  48  WHERE gattn IN('nup','up')
20:27:30  49  -- Use only rows which are older than 1 day:
20:27:30  50  AND 1+ydate < '&1'||' '||'&2'
20:27:30  51  AND pair = '&3'
20:27:30  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-12-03'||' '||'13:25:00'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:27:30 SQL> 
20:27:30 SQL> -- rpt
20:27:30 SQL> 
20:27:30 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn
20:27:30   2  
20:27:30 SQL> SELECT MAX(prdate) FROM bme
20:27:30   2  
20:27:30 SQL> -- Now build model from bme and score sme
20:27:30 SQL> @score1.sql gattn
20:27:30 SQL> --
20:27:30 SQL> -- score1.sql
20:27:30 SQL> --
20:27:30 SQL> 
20:27:30 SQL> -- I use this script to send 5 params to score.sql
20:27:30 SQL> -- which does the heavy lifting of creating an SVM model.
20:27:30 SQL> -- Then at the very end of this script I use the model
20:27:30 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:27:30 SQL> 
20:27:30 SQL> -- I call this script from 2 other scripts:
20:27:30 SQL> -- score1_5min.sql
20:27:30 SQL> -- score1_5min_gattn.sql
20:27:30 SQL> 
20:27:30 SQL> -- The 1st param is the name of the target attribute.
20:27:30 SQL> -- I like to call my target attributes either gatt or gattn.
20:27:30 SQL> 
20:27:30 SQL> -- Demo:
20:27:30 SQL> -- @score1.sql 'gatt'
20:27:30 SQL> -- @score1.sql 'gattn'
20:27:30 SQL> 
20:27:30 SQL> -- Now, I fill up svmc_apply_prep.
20:27:30 SQL> -- I use same model_name used in score.sql
20:27:30 SQL> DEFINE model_name = 'svmfx101'
20:27:30 SQL> DEFINE bldtable	= 'bme'
20:27:30 SQL> DEFINE scoretable = 'sme'
20:27:30 SQL> DEFINE case_id	= 'prdate'
20:27:30 SQL> -- Demo:
20:27:30 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:27:30 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:27:30 SQL> --
20:27:30 SQL> -- score.sql
20:27:30 SQL> --
20:27:30 SQL> 
20:27:30 SQL> -- usage: score.sql
20:27:30 SQL> 
20:27:30 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:27:30 SQL> 
20:27:30 SQL> -- DEFINE target	   = 'gatt'
20:27:30 SQL> -- DEFINE model_name = 'svmfx101'
20:27:30 SQL> -- DEFINE bldtable   = 'bme'
20:27:30 SQL> -- DEFINE scoretable = 'sme'
20:27:30 SQL> -- DEFINE case_id    = 'prdate'
20:27:30 SQL> 
20:27:30 SQL> DEFINE target	= '&1'
20:27:30 SQL> DEFINE model_name = '&2'
20:27:30 SQL> DEFINE bldtable	= '&3'
20:27:30 SQL> DEFINE scoretable = '&4'
20:27:30 SQL> DEFINE case_id	= '&5'
20:27:30 SQL> 
20:27:30 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:27:30 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:27:30 SQL> 
20:27:30 SQL> -- Builds an SVM model using pl/sql.
20:27:30 SQL> 
20:27:30 SQL> -----------------------------------------------------------------------
20:27:30 SQL> --			    BUILD THE MODEL
20:27:30 SQL> -----------------------------------------------------------------------
20:27:30 SQL> 
20:27:30 SQL> -- Cleanup old build data preparation objects for repeat runs
20:27:30 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.00
20:27:30 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:27:30 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.01
20:27:30 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.00
20:27:30 SQL> 
20:27:30 SQL> 
20:27:30 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:27:30 SQL> --
20:27:30 SQL> -- DROP	TABLE svmc_settings ;
20:27:30 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:27:30 SQL> -- DELETE svmc_settings;
20:27:30 SQL> 
20:27:30 SQL> -- The default classification algorithm is Naive Bayes. So override
20:27:30 SQL> -- this choice to SVM using a settings table.
20:27:30 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:27:30 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:27:30 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:27:30 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:27:30 SQL> -- models.
20:27:30 SQL> --
20:27:30 SQL> 
20:27:30 SQL> -- Do this once and then comment it out.
20:27:30 SQL> -- That makes script go faster.
20:27:30 SQL> -- BEGIN
20:27:30 SQL> -- -- Populate settings table
20:27:30 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:27:30 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:27:30 SQL> --
20:27:30 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:27:30 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:27:30 SQL> --
20:27:30 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:27:30 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:27:30 SQL> --   COMMIT;
20:27:30 SQL> -- END;
20:27:30 SQL> -- /
20:27:30 SQL> 
20:27:30 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:27:30 SQL> 
20:27:30 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:27:30   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:27:30   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:27:30 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:27:30   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:27:30   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:27:30 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:27:30   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:27:30   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:27:30 SQL> 
20:27:30 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:27:30   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:27:30   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
20:27:30 SQL> 
20:27:30 SQL> --------------------------------
20:27:30 SQL> -- PREPARE BUILD (TRAINING) DATA
20:27:30 SQL> --
20:27:30 SQL> 
20:27:30 SQL> -- 1. Missing Value treatment for all Predictors and
20:27:30 SQL> -- 2. Outlier Treatment and
20:27:30 SQL> -- 3. Normalization are performed below.
20:27:30 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:27:30 SQL> --    normalized here.
20:27:30 SQL> 
20:27:30 SQL> BEGIN
20:27:30   2  	-- Perform missing value treatment for all predictors
20:27:30   3  	-- create miss tables
20:27:30   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:27:30   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:27:30   6  
20:27:30   7  	-- populate miss tables
20:27:30   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:27:30   9  	  miss_table_name => 'svmc_miss_num',
20:27:30  10  	  data_table_name => '&bldtable',
20:27:30  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:27:30  12  
20:27:30  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:27:30  14  	  miss_table_name => 'svmc_miss_cat',
20:27:30  15  	  data_table_name => '&bldtable',
20:27:30  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:27:30  17  
20:27:30  18  	-- xform input data to replace missing values
20:27:30  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:27:30  20  	  miss_table_name => 'svmc_miss_num',
20:27:30  21  	  data_table_name => '&bldtable',
20:27:30  22  	  xform_view_name => 'xformed_build_miss_num');
20:27:30  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:27:30  24  	  miss_table_name => 'svmc_miss_cat',
20:27:30  25  	  data_table_name => '&bldtable',
20:27:30  26  	  xform_view_name => 'xformed_build_miss_cat');
20:27:30  27  
20:27:30  28  	-- Perform outlier treatment.
20:27:30  29  	-- create clip table
20:27:30  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:27:30  31  
20:27:30  32  	-- populate clip table
20:27:30  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:27:30  34  	  clip_table_name => 'svmc_clip',
20:27:30  35  	  data_table_name => '&bldtable',
20:27:30  36  	  tail_frac	  => 0.025,
20:27:30  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:27:30  38  
20:27:30  39  	-- xform input data to winsorized data
20:27:30  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:27:30  41  	  clip_table_name => 'svmc_clip',
20:27:30  42  	  data_table_name => '&bldtable',
20:27:30  43  	  xform_view_name => 'svmc_winsor');
20:27:30  44  
20:27:30  45  	-- create normalization table
20:27:30  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:27:30  47  
20:27:30  48  	-- populate normalization table based on winsorized data
20:27:30  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:27:30  50  	  norm_table_name => 'svmc_norm',
20:27:30  51  	  data_table_name => 'svmc_winsor',
20:27:30  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:27:30  53  
20:27:30  54  	-- normalize the original data
20:27:30  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:27:30  56  	  norm_table_name => 'svmc_norm',
20:27:30  57  	  data_table_name => '&bldtable',
20:27:30  58  	  xform_view_name => 'svmc_build_prep');
20:27:30  59  END;
20:27:30  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.82
20:27:32 SQL> 
20:27:32 SQL> ---------------------
20:27:32 SQL> -- CREATE A NEW MODEL
20:27:32 SQL> --
20:27:32 SQL> -- Cleanup old model with the same name for repeat runs
20:27:32 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:27:32   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:27:32   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.07
20:27:33 SQL> 
20:27:33 SQL> -- Build a new SVM Model
20:27:33 SQL> BEGIN
20:27:33   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:27:33   3  	  model_name	      => '&model_name',
20:27:33   4  	  mining_function     => dbms_data_mining.classification,
20:27:33   5  	  data_table_name     => 'svmc_build_prep',
20:27:33   6  	  case_id_column_name => '&case_id',
20:27:33   7  	  target_column_name  => '&target',
20:27:33   8  	  settings_table_name => 'svmc_settings');
20:27:33   9  END;
20:27:33  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:04.41
20:27:38 SQL> 
20:27:38 SQL> -----------------------------------------------------------------------
20:27:38 SQL> --			       APPLY/score THE MODEL
20:27:38 SQL> -----------------------------------------------------------------------
20:27:38 SQL> 
20:27:38 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:27:38 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:27:38   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:27:38   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:27:38 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:27:38   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:27:38   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:27:38 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:27:38   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:27:38   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:27:38 SQL> -----------------------
20:27:38 SQL> -- PREPARE SCORING DATA
20:27:38 SQL> --
20:27:38 SQL> -- If the data for model creation has been prepared, then the data
20:27:38 SQL> -- to be scored using the model must be prepared in the same manner
20:27:38 SQL> -- in order to obtain meaningful results.
20:27:38 SQL> --
20:27:38 SQL> -- 1. Missing Value treatment for all Predictors and
20:27:38 SQL> -- 2. Normalization
20:27:38 SQL> -- No outlier treatment will be performed during test and apply. The
20:27:38 SQL> -- normalization step is sufficient, since the normalization parameters
20:27:38 SQL> -- already capture the effects of outlier treatment done with build data.
20:27:38 SQL> --
20:27:38 SQL> BEGIN
20:27:38   2  	-- Xform Test data to replace missing values
20:27:38   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:27:38   4  	  miss_table_name => 'svmc_miss_num',
20:27:38   5  	  data_table_name => '&scoretable',
20:27:38   6  	  xform_view_name => 'xformed_apply_miss_num');
20:27:38   7  
20:27:38   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:27:38   9  	  miss_table_name => 'svmc_miss_cat',
20:27:38  10  	  data_table_name => '&scoretable',
20:27:38  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:27:38  12  
20:27:38  13  	-- Normalize the data to be scored
20:27:38  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:27:38  15  	  norm_table_name => 'svmc_norm',
20:27:38  16  	  data_table_name => '&scoretable',
20:27:38  17  	  xform_view_name => 'svmc_apply_prep');
20:27:38  18  END;
20:27:38  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.17
20:27:38 SQL> 
20:27:38 SQL> -- Maybe I already collected a score for this prdate.
20:27:38 SQL> -- DELETE it if I did:
20:27:38 SQL> DELETE svm62scores
20:27:38   2  WHERE score > 0
20:27:38   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:27:38   4  -- I need to supply the target attribute name:
20:27:38   5  AND targ = '&1'
20:27:38   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gattn'

0 rows deleted.

Elapsed: 00:00:00.02
20:27:38 SQL> 
20:27:38 SQL> -- We do a drumroll here:
20:27:38 SQL> 
20:27:38 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:27:38   2  SELECT
20:27:38   3  prdate
20:27:38   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:27:38   5  ,sysdate
20:27:38   6  ,SUBSTR(prdate,1,7)pair
20:27:38   7  ,SUBSTR(prdate,-19)ydate
20:27:38   8  ,'&1'
20:27:38   9  FROM svmc_apply_prep
20:27:38  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gattn'

1 row created.

Elapsed: 00:00:00.05
20:27:38 SQL> @score1_5min_gattn.sql	2010-12-08 02:00:00 aud_usd
20:27:38 SQL> --
20:27:38 SQL> -- score1_5min_gattn.sql
20:27:38 SQL> --
20:27:38 SQL> 
20:27:38 SQL> -- Demo:
20:27:38 SQL> -- @score1_5min_gattn.sql 2010-12-31 20:45:01 aud_usd
20:27:38 SQL> 
20:27:38 SQL> CREATE OR REPLACE VIEW sme AS
20:27:38   2  SELECT
20:27:38   3  prdate
20:27:38   4  ,NULL gattn
20:27:38   5  ,g00
20:27:38   6  ,g01
20:27:38   7  ,g02
20:27:38   8  ,g03
20:27:38   9  ,g04
20:27:38  10  ,g05
20:27:38  11  ,g06
20:27:38  12  ,g07
20:27:38  13  ,g08
20:27:38  14  ,g09
20:27:38  15  ,g10
20:27:38  16  ,g11
20:27:38  17  ,g12
20:27:38  18  ,g13
20:27:38  19  ,g14
20:27:38  20  ,g15
20:27:38  21  ,g16
20:27:38  22  ,g17
20:27:38  23  ,g18
20:27:38  24  ,g19
20:27:38  25  ,g20
20:27:38  26  ,g21
20:27:38  27  ,g22
20:27:38  28  ,g23
20:27:38  29  ,g24
20:27:38  30  ,g25
20:27:38  31  ,g26
20:27:38  32  ,g27
20:27:38  33  ,g28
20:27:38  34  ,g29
20:27:38  35  ,g30
20:27:38  36  ,g31
20:27:38  37  ,g32
20:27:38  38  ,g33
20:27:38  39  ,g34
20:27:38  40  ,g35
20:27:38  41  ,g36
20:27:38  42  ,g37
20:27:38  43  ,g38
20:27:38  44  ,g39
20:27:38  45  ,g40
20:27:38  46  ,g41
20:27:38  47  FROM modsrc
20:27:38  48  WHERE ydate = '&1'||' '||'&2'
20:27:38  49  AND pair = '&3'
20:27:38  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-12-08'||' '||'02:00:00'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.12
20:27:38 SQL> 
20:27:38 SQL> -- rpt
20:27:38 SQL> -- We should see just 1 row:
20:27:38 SQL> 
20:27:38 SQL> SELECT COUNT(prdate) FROM sme
20:27:38   2  
20:27:38 SQL> -- Build the model:
20:27:38 SQL> CREATE OR REPLACE VIEW bme AS
20:27:38   2  SELECT
20:27:38   3  prdate
20:27:38   4  ,gattn
20:27:38   5  ,g00
20:27:38   6  ,g01
20:27:38   7  ,g02
20:27:38   8  ,g03
20:27:38   9  ,g04
20:27:38  10  ,g05
20:27:38  11  ,g06
20:27:38  12  ,g07
20:27:38  13  ,g08
20:27:38  14  ,g09
20:27:38  15  ,g10
20:27:38  16  ,g11
20:27:38  17  ,g12
20:27:38  18  ,g13
20:27:38  19  ,g14
20:27:38  20  ,g15
20:27:38  21  ,g16
20:27:38  22  ,g17
20:27:38  23  ,g18
20:27:38  24  ,g19
20:27:38  25  ,g20
20:27:38  26  ,g21
20:27:38  27  ,g22
20:27:38  28  ,g23
20:27:38  29  ,g24
20:27:38  30  ,g25
20:27:38  31  ,g26
20:27:38  32  ,g27
20:27:38  33  ,g28
20:27:38  34  ,g29
20:27:38  35  ,g30
20:27:38  36  ,g31
20:27:38  37  ,g32
20:27:38  38  ,g33
20:27:38  39  ,g34
20:27:38  40  ,g35
20:27:38  41  ,g36
20:27:38  42  ,g37
20:27:38  43  ,g38
20:27:38  44  ,g39
20:27:38  45  ,g40
20:27:38  46  ,g41
20:27:38  47  FROM modsrc
20:27:38  48  WHERE gattn IN('nup','up')
20:27:38  49  -- Use only rows which are older than 1 day:
20:27:38  50  AND 1+ydate < '&1'||' '||'&2'
20:27:38  51  AND pair = '&3'
20:27:38  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-12-08'||' '||'02:00:00'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:27:38 SQL> 
20:27:38 SQL> -- rpt
20:27:38 SQL> 
20:27:38 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn
20:27:38   2  
20:27:38 SQL> SELECT MAX(prdate) FROM bme
20:27:38   2  
20:27:38 SQL> -- Now build model from bme and score sme
20:27:38 SQL> @score1.sql gattn
20:27:38 SQL> --
20:27:38 SQL> -- score1.sql
20:27:38 SQL> --
20:27:38 SQL> 
20:27:38 SQL> -- I use this script to send 5 params to score.sql
20:27:38 SQL> -- which does the heavy lifting of creating an SVM model.
20:27:38 SQL> -- Then at the very end of this script I use the model
20:27:38 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:27:38 SQL> 
20:27:38 SQL> -- I call this script from 2 other scripts:
20:27:38 SQL> -- score1_5min.sql
20:27:38 SQL> -- score1_5min_gattn.sql
20:27:38 SQL> 
20:27:38 SQL> -- The 1st param is the name of the target attribute.
20:27:38 SQL> -- I like to call my target attributes either gatt or gattn.
20:27:38 SQL> 
20:27:38 SQL> -- Demo:
20:27:38 SQL> -- @score1.sql 'gatt'
20:27:38 SQL> -- @score1.sql 'gattn'
20:27:38 SQL> 
20:27:38 SQL> -- Now, I fill up svmc_apply_prep.
20:27:38 SQL> -- I use same model_name used in score.sql
20:27:38 SQL> DEFINE model_name = 'svmfx101'
20:27:38 SQL> DEFINE bldtable	= 'bme'
20:27:38 SQL> DEFINE scoretable = 'sme'
20:27:38 SQL> DEFINE case_id	= 'prdate'
20:27:38 SQL> -- Demo:
20:27:38 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:27:38 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:27:38 SQL> --
20:27:38 SQL> -- score.sql
20:27:38 SQL> --
20:27:38 SQL> 
20:27:38 SQL> -- usage: score.sql
20:27:38 SQL> 
20:27:38 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:27:38 SQL> 
20:27:38 SQL> -- DEFINE target	   = 'gatt'
20:27:38 SQL> -- DEFINE model_name = 'svmfx101'
20:27:38 SQL> -- DEFINE bldtable   = 'bme'
20:27:38 SQL> -- DEFINE scoretable = 'sme'
20:27:38 SQL> -- DEFINE case_id    = 'prdate'
20:27:38 SQL> 
20:27:38 SQL> DEFINE target	= '&1'
20:27:38 SQL> DEFINE model_name = '&2'
20:27:38 SQL> DEFINE bldtable	= '&3'
20:27:38 SQL> DEFINE scoretable = '&4'
20:27:38 SQL> DEFINE case_id	= '&5'
20:27:38 SQL> 
20:27:38 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:27:38 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:27:38 SQL> 
20:27:38 SQL> -- Builds an SVM model using pl/sql.
20:27:38 SQL> 
20:27:38 SQL> -----------------------------------------------------------------------
20:27:38 SQL> --			    BUILD THE MODEL
20:27:38 SQL> -----------------------------------------------------------------------
20:27:38 SQL> 
20:27:38 SQL> -- Cleanup old build data preparation objects for repeat runs
20:27:38 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.00
20:27:38 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.01
20:27:38 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:27:38 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.01
20:27:38 SQL> 
20:27:38 SQL> 
20:27:38 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:27:38 SQL> --
20:27:38 SQL> -- DROP	TABLE svmc_settings ;
20:27:38 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:27:38 SQL> -- DELETE svmc_settings;
20:27:38 SQL> 
20:27:38 SQL> -- The default classification algorithm is Naive Bayes. So override
20:27:38 SQL> -- this choice to SVM using a settings table.
20:27:38 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:27:38 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:27:38 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:27:38 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:27:38 SQL> -- models.
20:27:38 SQL> --
20:27:38 SQL> 
20:27:38 SQL> -- Do this once and then comment it out.
20:27:38 SQL> -- That makes script go faster.
20:27:38 SQL> -- BEGIN
20:27:38 SQL> -- -- Populate settings table
20:27:38 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:27:38 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:27:38 SQL> --
20:27:38 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:27:38 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:27:38 SQL> --
20:27:38 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:27:38 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:27:38 SQL> --   COMMIT;
20:27:38 SQL> -- END;
20:27:38 SQL> -- /
20:27:38 SQL> 
20:27:38 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:27:38 SQL> 
20:27:38 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:27:38   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:27:38   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
20:27:38 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:27:38   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:27:38   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:27:38 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:27:38   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:27:38   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:27:38 SQL> 
20:27:38 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:27:38   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:27:38   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:27:38 SQL> 
20:27:38 SQL> --------------------------------
20:27:38 SQL> -- PREPARE BUILD (TRAINING) DATA
20:27:38 SQL> --
20:27:38 SQL> 
20:27:38 SQL> -- 1. Missing Value treatment for all Predictors and
20:27:38 SQL> -- 2. Outlier Treatment and
20:27:38 SQL> -- 3. Normalization are performed below.
20:27:38 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:27:38 SQL> --    normalized here.
20:27:38 SQL> 
20:27:38 SQL> BEGIN
20:27:38   2  	-- Perform missing value treatment for all predictors
20:27:38   3  	-- create miss tables
20:27:38   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:27:38   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:27:38   6  
20:27:38   7  	-- populate miss tables
20:27:38   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:27:38   9  	  miss_table_name => 'svmc_miss_num',
20:27:38  10  	  data_table_name => '&bldtable',
20:27:38  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:27:38  12  
20:27:38  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:27:38  14  	  miss_table_name => 'svmc_miss_cat',
20:27:38  15  	  data_table_name => '&bldtable',
20:27:38  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:27:38  17  
20:27:38  18  	-- xform input data to replace missing values
20:27:38  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:27:38  20  	  miss_table_name => 'svmc_miss_num',
20:27:38  21  	  data_table_name => '&bldtable',
20:27:38  22  	  xform_view_name => 'xformed_build_miss_num');
20:27:38  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:27:38  24  	  miss_table_name => 'svmc_miss_cat',
20:27:38  25  	  data_table_name => '&bldtable',
20:27:38  26  	  xform_view_name => 'xformed_build_miss_cat');
20:27:38  27  
20:27:38  28  	-- Perform outlier treatment.
20:27:38  29  	-- create clip table
20:27:38  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:27:38  31  
20:27:38  32  	-- populate clip table
20:27:38  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:27:38  34  	  clip_table_name => 'svmc_clip',
20:27:38  35  	  data_table_name => '&bldtable',
20:27:38  36  	  tail_frac	  => 0.025,
20:27:38  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:27:38  38  
20:27:38  39  	-- xform input data to winsorized data
20:27:38  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:27:38  41  	  clip_table_name => 'svmc_clip',
20:27:38  42  	  data_table_name => '&bldtable',
20:27:38  43  	  xform_view_name => 'svmc_winsor');
20:27:38  44  
20:27:38  45  	-- create normalization table
20:27:38  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:27:38  47  
20:27:38  48  	-- populate normalization table based on winsorized data
20:27:38  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:27:38  50  	  norm_table_name => 'svmc_norm',
20:27:38  51  	  data_table_name => 'svmc_winsor',
20:27:38  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:27:38  53  
20:27:38  54  	-- normalize the original data
20:27:38  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:27:38  56  	  norm_table_name => 'svmc_norm',
20:27:38  57  	  data_table_name => '&bldtable',
20:27:38  58  	  xform_view_name => 'svmc_build_prep');
20:27:38  59  END;
20:27:38  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.91
20:27:40 SQL> 
20:27:40 SQL> ---------------------
20:27:40 SQL> -- CREATE A NEW MODEL
20:27:40 SQL> --
20:27:40 SQL> -- Cleanup old model with the same name for repeat runs
20:27:40 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:27:40   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:27:40   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.15
20:27:41 SQL> 
20:27:41 SQL> -- Build a new SVM Model
20:27:41 SQL> BEGIN
20:27:41   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:27:41   3  	  model_name	      => '&model_name',
20:27:41   4  	  mining_function     => dbms_data_mining.classification,
20:27:41   5  	  data_table_name     => 'svmc_build_prep',
20:27:41   6  	  case_id_column_name => '&case_id',
20:27:41   7  	  target_column_name  => '&target',
20:27:41   8  	  settings_table_name => 'svmc_settings');
20:27:41   9  END;
20:27:41  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:04.71
20:27:46 SQL> 
20:27:46 SQL> -----------------------------------------------------------------------
20:27:46 SQL> --			       APPLY/score THE MODEL
20:27:46 SQL> -----------------------------------------------------------------------
20:27:46 SQL> 
20:27:46 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:27:46 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:27:46   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:27:46   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:27:46 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:27:46   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:27:46   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
20:27:46 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:27:46   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:27:46   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:27:46 SQL> -----------------------
20:27:46 SQL> -- PREPARE SCORING DATA
20:27:46 SQL> --
20:27:46 SQL> -- If the data for model creation has been prepared, then the data
20:27:46 SQL> -- to be scored using the model must be prepared in the same manner
20:27:46 SQL> -- in order to obtain meaningful results.
20:27:46 SQL> --
20:27:46 SQL> -- 1. Missing Value treatment for all Predictors and
20:27:46 SQL> -- 2. Normalization
20:27:46 SQL> -- No outlier treatment will be performed during test and apply. The
20:27:46 SQL> -- normalization step is sufficient, since the normalization parameters
20:27:46 SQL> -- already capture the effects of outlier treatment done with build data.
20:27:46 SQL> --
20:27:46 SQL> BEGIN
20:27:46   2  	-- Xform Test data to replace missing values
20:27:46   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:27:46   4  	  miss_table_name => 'svmc_miss_num',
20:27:46   5  	  data_table_name => '&scoretable',
20:27:46   6  	  xform_view_name => 'xformed_apply_miss_num');
20:27:46   7  
20:27:46   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:27:46   9  	  miss_table_name => 'svmc_miss_cat',
20:27:46  10  	  data_table_name => '&scoretable',
20:27:46  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:27:46  12  
20:27:46  13  	-- Normalize the data to be scored
20:27:46  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:27:46  15  	  norm_table_name => 'svmc_norm',
20:27:46  16  	  data_table_name => '&scoretable',
20:27:46  17  	  xform_view_name => 'svmc_apply_prep');
20:27:46  18  END;
20:27:46  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.19
20:27:46 SQL> 
20:27:46 SQL> -- Maybe I already collected a score for this prdate.
20:27:46 SQL> -- DELETE it if I did:
20:27:46 SQL> DELETE svm62scores
20:27:46   2  WHERE score > 0
20:27:46   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:27:46   4  -- I need to supply the target attribute name:
20:27:46   5  AND targ = '&1'
20:27:46   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gattn'

0 rows deleted.

Elapsed: 00:00:00.02
20:27:46 SQL> 
20:27:46 SQL> -- We do a drumroll here:
20:27:46 SQL> 
20:27:46 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:27:46   2  SELECT
20:27:46   3  prdate
20:27:46   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:27:46   5  ,sysdate
20:27:46   6  ,SUBSTR(prdate,1,7)pair
20:27:46   7  ,SUBSTR(prdate,-19)ydate
20:27:46   8  ,'&1'
20:27:46   9  FROM svmc_apply_prep
20:27:46  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gattn'

1 row created.

Elapsed: 00:00:00.05
20:27:46 SQL> @score1_5min_gattn.sql	2010-11-17 02:05:01 aud_usd
20:27:46 SQL> --
20:27:46 SQL> -- score1_5min_gattn.sql
20:27:46 SQL> --
20:27:46 SQL> 
20:27:46 SQL> -- Demo:
20:27:46 SQL> -- @score1_5min_gattn.sql 2010-12-31 20:45:01 aud_usd
20:27:46 SQL> 
20:27:46 SQL> CREATE OR REPLACE VIEW sme AS
20:27:46   2  SELECT
20:27:46   3  prdate
20:27:46   4  ,NULL gattn
20:27:46   5  ,g00
20:27:46   6  ,g01
20:27:46   7  ,g02
20:27:46   8  ,g03
20:27:46   9  ,g04
20:27:46  10  ,g05
20:27:46  11  ,g06
20:27:46  12  ,g07
20:27:46  13  ,g08
20:27:46  14  ,g09
20:27:46  15  ,g10
20:27:46  16  ,g11
20:27:46  17  ,g12
20:27:46  18  ,g13
20:27:46  19  ,g14
20:27:46  20  ,g15
20:27:46  21  ,g16
20:27:46  22  ,g17
20:27:46  23  ,g18
20:27:46  24  ,g19
20:27:46  25  ,g20
20:27:46  26  ,g21
20:27:46  27  ,g22
20:27:46  28  ,g23
20:27:46  29  ,g24
20:27:46  30  ,g25
20:27:46  31  ,g26
20:27:46  32  ,g27
20:27:46  33  ,g28
20:27:46  34  ,g29
20:27:46  35  ,g30
20:27:46  36  ,g31
20:27:46  37  ,g32
20:27:46  38  ,g33
20:27:46  39  ,g34
20:27:46  40  ,g35
20:27:46  41  ,g36
20:27:46  42  ,g37
20:27:46  43  ,g38
20:27:46  44  ,g39
20:27:46  45  ,g40
20:27:46  46  ,g41
20:27:46  47  FROM modsrc
20:27:46  48  WHERE ydate = '&1'||' '||'&2'
20:27:46  49  AND pair = '&3'
20:27:46  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-11-17'||' '||'02:05:01'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:27:46 SQL> 
20:27:46 SQL> -- rpt
20:27:46 SQL> -- We should see just 1 row:
20:27:46 SQL> 
20:27:46 SQL> SELECT COUNT(prdate) FROM sme
20:27:46   2  
20:27:46 SQL> -- Build the model:
20:27:46 SQL> CREATE OR REPLACE VIEW bme AS
20:27:46   2  SELECT
20:27:46   3  prdate
20:27:46   4  ,gattn
20:27:46   5  ,g00
20:27:46   6  ,g01
20:27:46   7  ,g02
20:27:46   8  ,g03
20:27:46   9  ,g04
20:27:46  10  ,g05
20:27:46  11  ,g06
20:27:46  12  ,g07
20:27:46  13  ,g08
20:27:46  14  ,g09
20:27:46  15  ,g10
20:27:46  16  ,g11
20:27:46  17  ,g12
20:27:46  18  ,g13
20:27:46  19  ,g14
20:27:46  20  ,g15
20:27:46  21  ,g16
20:27:46  22  ,g17
20:27:46  23  ,g18
20:27:46  24  ,g19
20:27:46  25  ,g20
20:27:46  26  ,g21
20:27:46  27  ,g22
20:27:46  28  ,g23
20:27:46  29  ,g24
20:27:46  30  ,g25
20:27:46  31  ,g26
20:27:46  32  ,g27
20:27:46  33  ,g28
20:27:46  34  ,g29
20:27:46  35  ,g30
20:27:46  36  ,g31
20:27:46  37  ,g32
20:27:46  38  ,g33
20:27:46  39  ,g34
20:27:46  40  ,g35
20:27:46  41  ,g36
20:27:46  42  ,g37
20:27:46  43  ,g38
20:27:46  44  ,g39
20:27:46  45  ,g40
20:27:46  46  ,g41
20:27:46  47  FROM modsrc
20:27:46  48  WHERE gattn IN('nup','up')
20:27:46  49  -- Use only rows which are older than 1 day:
20:27:46  50  AND 1+ydate < '&1'||' '||'&2'
20:27:46  51  AND pair = '&3'
20:27:46  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-11-17'||' '||'02:05:01'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:27:46 SQL> 
20:27:46 SQL> -- rpt
20:27:46 SQL> 
20:27:46 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn
20:27:46   2  
20:27:46 SQL> SELECT MAX(prdate) FROM bme
20:27:46   2  
20:27:46 SQL> -- Now build model from bme and score sme
20:27:46 SQL> @score1.sql gattn
20:27:46 SQL> --
20:27:46 SQL> -- score1.sql
20:27:46 SQL> --
20:27:46 SQL> 
20:27:46 SQL> -- I use this script to send 5 params to score.sql
20:27:46 SQL> -- which does the heavy lifting of creating an SVM model.
20:27:46 SQL> -- Then at the very end of this script I use the model
20:27:46 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:27:46 SQL> 
20:27:46 SQL> -- I call this script from 2 other scripts:
20:27:46 SQL> -- score1_5min.sql
20:27:46 SQL> -- score1_5min_gattn.sql
20:27:46 SQL> 
20:27:46 SQL> -- The 1st param is the name of the target attribute.
20:27:46 SQL> -- I like to call my target attributes either gatt or gattn.
20:27:46 SQL> 
20:27:46 SQL> -- Demo:
20:27:46 SQL> -- @score1.sql 'gatt'
20:27:46 SQL> -- @score1.sql 'gattn'
20:27:46 SQL> 
20:27:46 SQL> -- Now, I fill up svmc_apply_prep.
20:27:46 SQL> -- I use same model_name used in score.sql
20:27:47 SQL> DEFINE model_name = 'svmfx101'
20:27:47 SQL> DEFINE bldtable	= 'bme'
20:27:47 SQL> DEFINE scoretable = 'sme'
20:27:47 SQL> DEFINE case_id	= 'prdate'
20:27:47 SQL> -- Demo:
20:27:47 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:27:47 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:27:47 SQL> --
20:27:47 SQL> -- score.sql
20:27:47 SQL> --
20:27:47 SQL> 
20:27:47 SQL> -- usage: score.sql
20:27:47 SQL> 
20:27:47 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:27:47 SQL> 
20:27:47 SQL> -- DEFINE target	   = 'gatt'
20:27:47 SQL> -- DEFINE model_name = 'svmfx101'
20:27:47 SQL> -- DEFINE bldtable   = 'bme'
20:27:47 SQL> -- DEFINE scoretable = 'sme'
20:27:47 SQL> -- DEFINE case_id    = 'prdate'
20:27:47 SQL> 
20:27:47 SQL> DEFINE target	= '&1'
20:27:47 SQL> DEFINE model_name = '&2'
20:27:47 SQL> DEFINE bldtable	= '&3'
20:27:47 SQL> DEFINE scoretable = '&4'
20:27:47 SQL> DEFINE case_id	= '&5'
20:27:47 SQL> 
20:27:47 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:27:47 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:27:47 SQL> 
20:27:47 SQL> -- Builds an SVM model using pl/sql.
20:27:47 SQL> 
20:27:47 SQL> -----------------------------------------------------------------------
20:27:47 SQL> --			    BUILD THE MODEL
20:27:47 SQL> -----------------------------------------------------------------------
20:27:47 SQL> 
20:27:47 SQL> -- Cleanup old build data preparation objects for repeat runs
20:27:47 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.00
20:27:47 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.01
20:27:47 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.00
20:27:47 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.01
20:27:47 SQL> 
20:27:47 SQL> 
20:27:47 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:27:47 SQL> --
20:27:47 SQL> -- DROP	TABLE svmc_settings ;
20:27:47 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:27:47 SQL> -- DELETE svmc_settings;
20:27:47 SQL> 
20:27:47 SQL> -- The default classification algorithm is Naive Bayes. So override
20:27:47 SQL> -- this choice to SVM using a settings table.
20:27:47 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:27:47 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:27:47 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:27:47 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:27:47 SQL> -- models.
20:27:47 SQL> --
20:27:47 SQL> 
20:27:47 SQL> -- Do this once and then comment it out.
20:27:47 SQL> -- That makes script go faster.
20:27:47 SQL> -- BEGIN
20:27:47 SQL> -- -- Populate settings table
20:27:47 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:27:47 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:27:47 SQL> --
20:27:47 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:27:47 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:27:47 SQL> --
20:27:47 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:27:47 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:27:47 SQL> --   COMMIT;
20:27:47 SQL> -- END;
20:27:47 SQL> -- /
20:27:47 SQL> 
20:27:47 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
20:27:47 SQL> 
20:27:47 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:27:47   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:27:47   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
20:27:47 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:27:47   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:27:47   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:27:47 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:27:47   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:27:47   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:27:47 SQL> 
20:27:47 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:27:47   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:27:47   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:27:47 SQL> 
20:27:47 SQL> --------------------------------
20:27:47 SQL> -- PREPARE BUILD (TRAINING) DATA
20:27:47 SQL> --
20:27:47 SQL> 
20:27:47 SQL> -- 1. Missing Value treatment for all Predictors and
20:27:47 SQL> -- 2. Outlier Treatment and
20:27:47 SQL> -- 3. Normalization are performed below.
20:27:47 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:27:47 SQL> --    normalized here.
20:27:47 SQL> 
20:27:47 SQL> BEGIN
20:27:47   2  	-- Perform missing value treatment for all predictors
20:27:47   3  	-- create miss tables
20:27:47   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:27:47   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:27:47   6  
20:27:47   7  	-- populate miss tables
20:27:47   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:27:47   9  	  miss_table_name => 'svmc_miss_num',
20:27:47  10  	  data_table_name => '&bldtable',
20:27:47  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:27:47  12  
20:27:47  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:27:47  14  	  miss_table_name => 'svmc_miss_cat',
20:27:47  15  	  data_table_name => '&bldtable',
20:27:47  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:27:47  17  
20:27:47  18  	-- xform input data to replace missing values
20:27:47  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:27:47  20  	  miss_table_name => 'svmc_miss_num',
20:27:47  21  	  data_table_name => '&bldtable',
20:27:47  22  	  xform_view_name => 'xformed_build_miss_num');
20:27:47  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:27:47  24  	  miss_table_name => 'svmc_miss_cat',
20:27:47  25  	  data_table_name => '&bldtable',
20:27:47  26  	  xform_view_name => 'xformed_build_miss_cat');
20:27:47  27  
20:27:47  28  	-- Perform outlier treatment.
20:27:47  29  	-- create clip table
20:27:47  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:27:47  31  
20:27:47  32  	-- populate clip table
20:27:47  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:27:47  34  	  clip_table_name => 'svmc_clip',
20:27:47  35  	  data_table_name => '&bldtable',
20:27:47  36  	  tail_frac	  => 0.025,
20:27:47  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:27:47  38  
20:27:47  39  	-- xform input data to winsorized data
20:27:47  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:27:47  41  	  clip_table_name => 'svmc_clip',
20:27:47  42  	  data_table_name => '&bldtable',
20:27:47  43  	  xform_view_name => 'svmc_winsor');
20:27:47  44  
20:27:47  45  	-- create normalization table
20:27:47  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:27:47  47  
20:27:47  48  	-- populate normalization table based on winsorized data
20:27:47  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:27:47  50  	  norm_table_name => 'svmc_norm',
20:27:47  51  	  data_table_name => 'svmc_winsor',
20:27:47  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:27:47  53  
20:27:47  54  	-- normalize the original data
20:27:47  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:27:47  56  	  norm_table_name => 'svmc_norm',
20:27:47  57  	  data_table_name => '&bldtable',
20:27:47  58  	  xform_view_name => 'svmc_build_prep');
20:27:47  59  END;
20:27:47  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.59
20:27:48 SQL> 
20:27:48 SQL> ---------------------
20:27:48 SQL> -- CREATE A NEW MODEL
20:27:48 SQL> --
20:27:48 SQL> -- Cleanup old model with the same name for repeat runs
20:27:48 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
20:27:48   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:27:48   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svmfx101');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.95
20:27:49 SQL> 
20:27:49 SQL> -- Build a new SVM Model
20:27:49 SQL> BEGIN
20:27:49   2  	DBMS_DATA_MINING.CREATE_MODEL(
20:27:49   3  	  model_name	      => '&model_name',
20:27:49   4  	  mining_function     => dbms_data_mining.classification,
20:27:49   5  	  data_table_name     => 'svmc_build_prep',
20:27:49   6  	  case_id_column_name => '&case_id',
20:27:49   7  	  target_column_name  => '&target',
20:27:49   8  	  settings_table_name => 'svmc_settings');
20:27:49   9  END;
20:27:49  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'svmfx101',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:04.21
20:27:53 SQL> 
20:27:53 SQL> -----------------------------------------------------------------------
20:27:53 SQL> --			       APPLY/score THE MODEL
20:27:53 SQL> -----------------------------------------------------------------------
20:27:53 SQL> 
20:27:53 SQL> -- Cleanup old scoring data preparation objects for repeat runs
20:27:53 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
20:27:53   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:27:53   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:27:53 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
20:27:53   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:27:53   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:27:54 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
20:27:54   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:27:54   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:27:54 SQL> -----------------------
20:27:54 SQL> -- PREPARE SCORING DATA
20:27:54 SQL> --
20:27:54 SQL> -- If the data for model creation has been prepared, then the data
20:27:54 SQL> -- to be scored using the model must be prepared in the same manner
20:27:54 SQL> -- in order to obtain meaningful results.
20:27:54 SQL> --
20:27:54 SQL> -- 1. Missing Value treatment for all Predictors and
20:27:54 SQL> -- 2. Normalization
20:27:54 SQL> -- No outlier treatment will be performed during test and apply. The
20:27:54 SQL> -- normalization step is sufficient, since the normalization parameters
20:27:54 SQL> -- already capture the effects of outlier treatment done with build data.
20:27:54 SQL> --
20:27:54 SQL> BEGIN
20:27:54   2  	-- Xform Test data to replace missing values
20:27:54   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:27:54   4  	  miss_table_name => 'svmc_miss_num',
20:27:54   5  	  data_table_name => '&scoretable',
20:27:54   6  	  xform_view_name => 'xformed_apply_miss_num');
20:27:54   7  
20:27:54   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:27:54   9  	  miss_table_name => 'svmc_miss_cat',
20:27:54  10  	  data_table_name => '&scoretable',
20:27:54  11  	  xform_view_name => 'xformed_apply_miss_cat');
20:27:54  12  
20:27:54  13  	-- Normalize the data to be scored
20:27:54  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:27:54  15  	  norm_table_name => 'svmc_norm',
20:27:54  16  	  data_table_name => '&scoretable',
20:27:54  17  	  xform_view_name => 'svmc_apply_prep');
20:27:54  18  END;
20:27:54  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.18
20:27:54 SQL> 
20:27:54 SQL> -- Maybe I already collected a score for this prdate.
20:27:54 SQL> -- DELETE it if I did:
20:27:54 SQL> DELETE svm62scores
20:27:54   2  WHERE score > 0
20:27:54   3  AND prdate IN(SELECT prdate FROM svmc_apply_prep)
20:27:54   4  -- I need to supply the target attribute name:
20:27:54   5  AND targ = '&1'
20:27:54   6  /
old   5: AND targ = '&1'
new   5: AND targ = 'gattn'

0 rows deleted.

Elapsed: 00:00:00.01
20:27:54 SQL> 
20:27:54 SQL> -- We do a drumroll here:
20:27:54 SQL> 
20:27:54 SQL> INSERT INTO svm62scores (prdate,score,rundate,pair,ydate,targ)
20:27:54   2  SELECT
20:27:54   3  prdate
20:27:54   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
20:27:54   5  ,sysdate
20:27:54   6  ,SUBSTR(prdate,1,7)pair
20:27:54   7  ,SUBSTR(prdate,-19)ydate
20:27:54   8  ,'&1'
20:27:54   9  FROM svmc_apply_prep
20:27:54  10  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svmfx101,'up' USING *)score
old   8: ,'&1'
new   8: ,'gattn'

1 row created.

Elapsed: 00:00:00.05
20:27:54 SQL> @score1_5min.sql	      2010-12-13 17:20:00 aud_usd
20:27:54 SQL> --
20:27:54 SQL> -- score1_5min.sql
20:27:54 SQL> --
20:27:54 SQL> 
20:27:54 SQL> -- Demo:
20:27:54 SQL> -- @score1_5min.sql 2010-12-31 20:45:01 aud_usd
20:27:54 SQL> 
20:27:54 SQL> CREATE OR REPLACE VIEW sme AS
20:27:54   2  SELECT
20:27:54   3  prdate
20:27:54   4  ,NULL gatt
20:27:54   5  ,g00
20:27:54   6  ,g01
20:27:54   7  ,g02
20:27:54   8  ,g03
20:27:54   9  ,g04
20:27:54  10  ,g05
20:27:54  11  ,g06
20:27:54  12  ,g07
20:27:54  13  ,g08
20:27:54  14  ,g09
20:27:54  15  ,g10
20:27:54  16  ,g11
20:27:54  17  ,g12
20:27:54  18  ,g13
20:27:54  19  ,g14
20:27:54  20  ,g15
20:27:54  21  ,g16
20:27:54  22  ,g17
20:27:54  23  ,g18
20:27:54  24  ,g19
20:27:54  25  ,g20
20:27:54  26  ,g21
20:27:54  27  ,g22
20:27:54  28  ,g23
20:27:54  29  ,g24
20:27:54  30  ,g25
20:27:54  31  ,g26
20:27:54  32  ,g27
20:27:54  33  ,g28
20:27:54  34  ,g29
20:27:54  35  ,g30
20:27:54  36  ,g31
20:27:54  37  ,g32
20:27:54  38  ,g33
20:27:54  39  ,g34
20:27:54  40  ,g35
20:27:54  41  ,g36
20:27:54  42  ,g37
20:27:54  43  ,g38
20:27:54  44  ,g39
20:27:54  45  ,g40
20:27:54  46  ,g41
20:27:54  47  FROM modsrc
20:27:54  48  WHERE ydate = '&1'||' '||'&2'
20:27:54  49  AND pair = '&3'
20:27:54  50  /
old  48: WHERE ydate = '&1'||' '||'&2'
new  48: WHERE ydate = '2010-12-13'||' '||'17:20:00'
old  49: AND pair = '&3'
new  49: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
20:27:54 SQL> 
20:27:54 SQL> -- rpt
20:27:54 SQL> -- We should see just 1 row:
20:27:54 SQL> 
20:27:54 SQL> SELECT COUNT(prdate) FROM sme
20:27:54   2  
20:27:54 SQL> -- Build the model:
20:27:54 SQL> CREATE OR REPLACE VIEW bme AS
20:27:54   2  SELECT
20:27:54   3  prdate
20:27:54   4  ,gatt
20:27:54   5  ,g00
20:27:54   6  ,g01
20:27:54   7  ,g02
20:27:54   8  ,g03
20:27:54   9  ,g04
20:27:54  10  ,g05
20:27:54  11  ,g06
20:27:54  12  ,g07
20:27:54  13  ,g08
20:27:54  14  ,g09
20:27:54  15  ,g10
20:27:54  16  ,g11
20:27:54  17  ,g12
20:27:54  18  ,g13
20:27:54  19  ,g14
20:27:54  20  ,g15
20:27:54  21  ,g16
20:27:54  22  ,g17
20:27:54  23  ,g18
20:27:54  24  ,g19
20:27:54  25  ,g20
20:27:54  26  ,g21
20:27:54  27  ,g22
20:27:54  28  ,g23
20:27:54  29  ,g24
20:27:54  30  ,g25
20:27:54  31  ,g26
20:27:54  32  ,g27
20:27:54  33  ,g28
20:27:54  34  ,g29
20:27:54  35  ,g30
20:27:54  36  ,g31
20:27:54  37  ,g32
20:27:54  38  ,g33
20:27:54  39  ,g34
20:27:54  40  ,g35
20:27:54  41  ,g36
20:27:54  42  ,g37
20:27:54  43  ,g38
20:27:54  44  ,g39
20:27:54  45  ,g40
20:27:54  46  ,g41
20:27:54  47  FROM modsrc
20:27:54  48  WHERE gatt IN('nup','up')
20:27:54  49  -- Use only rows which are older than 1 day:
20:27:54  50  AND 1+ydate < '&1'||' '||'&2'
20:27:54  51  AND pair = '&3'
20:27:54  52  /
old  50: AND 1+ydate < '&1'||' '||'&2'
new  50: AND 1+ydate < '2010-12-13'||' '||'17:20:00'
old  51: AND pair = '&3'
new  51: AND pair = 'aud_usd'

View created.

Elapsed: 00:00:00.06
20:27:54 SQL> 
20:27:54 SQL> -- rpt
20:27:54 SQL> 
20:27:54 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt
20:27:54   2  
20:27:54 SQL> SELECT MAX(prdate) FROM bme
20:27:54   2  
20:27:54 SQL> -- Now build model from bme and score sme
20:27:54 SQL> @score1.sql gatt
20:27:54 SQL> --
20:27:54 SQL> -- score1.sql
20:27:54 SQL> --
20:27:54 SQL> 
20:27:54 SQL> -- I use this script to send 5 params to score.sql
20:27:54 SQL> -- which does the heavy lifting of creating an SVM model.
20:27:54 SQL> -- Then at the very end of this script I use the model
20:27:54 SQL> -- inside an INSERT via a call to: PREDICTION_PROBABILITY()
20:27:54 SQL> 
20:27:54 SQL> -- I call this script from 2 other scripts:
20:27:54 SQL> -- score1_5min.sql
20:27:54 SQL> -- score1_5min_gattn.sql
20:27:54 SQL> 
20:27:54 SQL> -- The 1st param is the name of the target attribute.
20:27:54 SQL> -- I like to call my target attributes either gatt or gattn.
20:27:54 SQL> 
20:27:54 SQL> -- Demo:
20:27:54 SQL> -- @score1.sql 'gatt'
20:27:54 SQL> -- @score1.sql 'gattn'
20:27:54 SQL> 
20:27:54 SQL> -- Now, I fill up svmc_apply_prep.
20:27:54 SQL> -- I use same model_name used in score.sql
20:27:54 SQL> DEFINE model_name = 'svmfx101'
20:27:54 SQL> DEFINE bldtable	= 'bme'
20:27:54 SQL> DEFINE scoretable = 'sme'
20:27:54 SQL> DEFINE case_id	= 'prdate'
20:27:54 SQL> -- Demo:
20:27:54 SQL> -- @score.sql gatt mymodel   bme	       sme	     prdate
20:27:54 SQL> @score.sql '&1' '&model_name' '&bldtable' '&scoretable' '&case_id'
20:27:54 SQL> --
20:27:54 SQL> -- score.sql
20:27:54 SQL> --
20:27:54 SQL> 
20:27:54 SQL> -- usage: score.sql
20:27:54 SQL> 
20:27:54 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
20:27:54 SQL> 
20:27:54 SQL> -- DEFINE target	   = 'gatt'
20:27:54 SQL> -- DEFINE model_name = 'svmfx101'
20:27:54 SQL> -- DEFINE bldtable   = 'bme'
20:27:54 SQL> -- DEFINE scoretable = 'sme'
20:27:54 SQL> -- DEFINE case_id    = 'prdate'
20:27:54 SQL> 
20:27:54 SQL> DEFINE target	= '&1'
20:27:54 SQL> DEFINE model_name = '&2'
20:27:54 SQL> DEFINE bldtable	= '&3'
20:27:54 SQL> DEFINE scoretable = '&4'
20:27:54 SQL> DEFINE case_id	= '&5'
20:27:54 SQL> 
20:27:54 SQL> -- Define a variable to help me exclude some columns from some data mining calls
20:27:54 SQL> DEFINE exclude1 = "'&target','&case_id'"
20:27:54 SQL> 
20:27:54 SQL> -- Builds an SVM model using pl/sql.
20:27:54 SQL> 
20:27:54 SQL> -----------------------------------------------------------------------
20:27:54 SQL> --			    BUILD THE MODEL
20:27:54 SQL> -----------------------------------------------------------------------
20:27:54 SQL> 
20:27:54 SQL> -- Cleanup old build data preparation objects for repeat runs
20:27:54 SQL> DELETE svmc_miss_num;

42 rows deleted.

Elapsed: 00:00:00.01
20:27:54 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
20:27:54 SQL> DELETE svmc_clip;

42 rows deleted.

Elapsed: 00:00:00.01
20:27:54 SQL> DELETE svmc_norm;

42 rows deleted.

Elapsed: 00:00:00.00
20:27:54 SQL> 
20:27:54 SQL> 
20:27:54 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
20:27:54 SQL> --
20:27:54 SQL> -- DROP	TABLE svmc_settings ;
20:27:54 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
20:27:54 SQL> -- DELETE svmc_settings;
20:27:54 SQL> 
20:27:54 SQL> -- The default classification algorithm is Naive Bayes. So override
20:27:54 SQL> -- this choice to SVM using a settings table.
20:27:54 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
20:27:54 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
20:27:54 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
20:27:54 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
20:27:54 SQL> -- models.
20:27:54 SQL> --
20:27:54 SQL> 
20:27:54 SQL> -- Do this once and then comment it out.
20:27:54 SQL> -- That makes script go faster.
20:27:54 SQL> -- BEGIN
20:27:54 SQL> -- -- Populate settings table
20:27:54 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:27:54 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
20:27:54 SQL> --
20:27:54 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:27:54 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
20:27:54 SQL> --
20:27:54 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
20:27:54 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
20:27:54 SQL> --   COMMIT;
20:27:54 SQL> -- END;
20:27:54 SQL> -- /
20:27:54 SQL> 
20:27:54 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.01
20:27:54 SQL> 
20:27:54 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
20:27:54   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:27:54   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
20:27:54 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
20:27:54   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:27:54   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:27:54 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
20:27:54   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:27:54   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.03
20:27:54 SQL> 
20:27:54 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
20:27:54   2  EXCEPTION WHEN OTHERS THEN NULL; END;
20:27:54   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
20:27:54 SQL> 
20:27:54 SQL> --------------------------------
20:27:54 SQL> -- PREPARE BUILD (TRAINING) DATA
20:27:54 SQL> --
20:27:54 SQL> 
20:27:54 SQL> -- 1. Missing Value treatment for all Predictors and
20:27:54 SQL> -- 2. Outlier Treatment and
20:27:54 SQL> -- 3. Normalization are performed below.
20:27:54 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
20:27:54 SQL> --    normalized here.
20:27:54 SQL> 
20:27:54 SQL> BEGIN
20:27:54   2  	-- Perform missing value treatment for all predictors
20:27:54   3  	-- create miss tables
20:27:54   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
20:27:54   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
20:27:54   6  
20:27:54   7  	-- populate miss tables
20:27:54   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
20:27:54   9  	  miss_table_name => 'svmc_miss_num',
20:27:54  10  	  data_table_name => '&bldtable',
20:27:54  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:27:54  12  
20:27:54  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
20:27:54  14  	  miss_table_name => 'svmc_miss_cat',
20:27:54  15  	  data_table_name => '&bldtable',
20:27:54  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:27:54  17  
20:27:54  18  	-- xform input data to replace missing values
20:27:54  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
20:27:54  20  	  miss_table_name => 'svmc_miss_num',
20:27:54  21  	  data_table_name => '&bldtable',
20:27:54  22  	  xform_view_name => 'xformed_build_miss_num');
20:27:54  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
20:27:54  24  	  miss_table_name => 'svmc_miss_cat',
20:27:54  25  	  data_table_name => '&bldtable',
20:27:54  26  	  xform_view_name => 'xformed_build_miss_cat');
20:27:54  27  
20:27:54  28  	-- Perform outlier treatment.
20:27:54  29  	-- create clip table
20:27:54  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
20:27:54  31  
20:27:54  32  	-- populate clip table
20:27:54  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
20:27:54  34  	  clip_table_name => 'svmc_clip',
20:27:54  35  	  data_table_name => '&bldtable',
20:27:54  36  	  tail_frac	  => 0.025,
20:27:54  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:27:54  38  
20:27:54  39  	-- xform input data to winsorized data
20:27:54  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
20:27:54  41  	  clip_table_name => 'svmc_clip',
20:27:54  42  	  data_table_name => '&bldtable',
20:27:54  43  	  xform_view_name => 'svmc_winsor');
20:27:54  44  
20:27:54  45  	-- create normalization table
20:27:54  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
20:27:54  47  
20:27:54  48  	-- populate normalization table based on winsorized data
20:27:54  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
20:27:54  50  	  norm_table_name => 'svmc_norm',
20:27:54  51  	  data_table_name => 'svmc_winsor',
20:27:54  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
20:27:54  53  
20:27:54  54  	-- normalize the original data
20:27:54  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
20:27:54  56  	  norm_table_name => 'svmc_norm',
20:27:54  57  	  data_table_name => '&bldtable',
20:27:54  58  	  xform_view_name => 'svmc_build_prep');
20:27:54  59  END;
20:27:54  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',
