
SQL*Plus: Release 11.2.0.1.0 Production on Fri May 13 05:16:05 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

05:16:05 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
05:16:05 SQL> 05:16:05 SQL> --
05:16:05 SQL> -- qry_ibf5min.sql
05:16:05 SQL> --
05:16:05 SQL> 
05:16:05 SQL> -- I use this script to look for dups and bad data in ibf5min
05:16:05 SQL> 
05:16:05 SQL> SET LINES 66
05:16:05 SQL> DESC ibf5min
 Name				  Null?    Type
 -------------------------------- -------- -----------------------
 PAIR					   VARCHAR2(8)
 YDATE					   DATE
 CLSE					   NUMBER

05:16:05 SQL> SET LINES 166
05:16:05 SQL> 
05:16:05 SQL> SELECT
05:16:05   2  pair
05:16:05   3  ,COUNT(pair)
05:16:05   4  FROM ibf5min
05:16:05   5  GROUP BY pair
05:16:05   6  ORDER BY pair
05:16:05   7  /

PAIR	 COUNT(PAIR)
-------- -----------
aud_usd        33613
eur_usd        33619
gbp_usd        33618
usd_cad        33616
usd_chf        33623
usd_jpy        33617

6 rows selected.

Elapsed: 00:00:00.06
05:16:05 SQL> 
05:16:05 SQL> SELECT
05:16:05   2  TO_CHAR(ydate,'YYYY_MM')mnth,TO_CHAR(ydate,'W')wweek
05:16:05   3  ,COUNT(pair)
05:16:05   4  FROM ibf5min
05:16:05   5  GROUP BY TO_CHAR(ydate,'YYYY_MM'),TO_CHAR(ydate,'W')
05:16:05   6  ORDER BY TO_CHAR(ydate,'YYYY_MM'),TO_CHAR(ydate,'W')
05:16:05   7  /

MNTH	W COUNT(PAIR)
------- - -----------
2010_11 5	 1676
2010_12 1	 8550
2010_12 2	 8537
2010_12 3	 8370
2010_12 4	 8398
2010_12 5	 5001
2011_01 1	 8544
2011_01 2	 8548
2011_01 3	 8550
2011_01 4	 8550
2011_01 5	 1836
2011_02 1	 8547
2011_02 2	 8538
2011_02 3	 8545
2011_02 4	 8550
2011_03 1	 8539
2011_03 2	 8621
2011_03 3	 8549
2011_03 4	 8550
2011_03 5	 5130
2011_04 1	 8550
2011_04 2	 8549
2011_04 3	 8549
2011_04 4	 8550
2011_04 5	 1512
2011_05 1	 8548
2011_05 2	 7313
		    6

28 rows selected.

Elapsed: 00:00:00.25
05:16:05 SQL> 
05:16:05 SQL> -- Look for dups
05:16:05 SQL> SELECT COUNT(pair)FROM
05:16:05   2  (
05:16:05   3  SELECT
05:16:05   4  pair
05:16:05   5  ,ydate
05:16:05   6  ,COUNT(pair)
05:16:05   7  FROM ibf5min
05:16:05   8  GROUP BY pair,ydate
05:16:05   9  HAVING COUNT(pair)>1
05:16:05  10  )
05:16:05  11  /

COUNT(PAIR)
-----------
	  0

Elapsed: 00:00:00.14
05:16:05 SQL> 
05:16:05 SQL> -- Use LAG() to look for big jumps.
05:16:05 SQL> 
05:16:05 SQL> CREATE OR REPLACE VIEW ibf5min10 AS
05:16:05   2  SELECT
05:16:05   3  pair
05:16:05   4  -- ydate is granular down to 5 min:
05:16:05   5  ,ydate
05:16:05   6  ,clse
05:16:05   7  -- Use analytic function to get LAG()
05:16:05   8  ,LAG(ydate,1,NULL)OVER(PARTITION BY pair ORDER BY ydate)		    lag_ydate
05:16:05   9  ,(ydate - LAG(ydate,1,NULL)OVER(PARTITION BY pair ORDER BY ydate))*24*60 minutes_diff
05:16:05  10  ,LAG(clse,1,NULL)OVER(PARTITION BY pair ORDER BY ydate)		    lag_clse
05:16:05  11  ,(clse - LAG(clse,1,NULL)OVER(PARTITION BY pair ORDER BY ydate))/clse lag_diff
05:16:05  12  FROM ibf5min
05:16:05  13  WHERE clse>0
05:16:05  14  ORDER BY pair, ydate
05:16:05  15  /

View created.

Elapsed: 00:00:00.02
05:16:05 SQL> 
05:16:05 SQL> CREATE OR REPLACE VIEW ibf5min_ld AS
05:16:05   2  SELECT
05:16:05   3  pair
05:16:05   4  ,MIN(lag_diff)	min_lag_diff
05:16:05   5  ,AVG(lag_diff)	avg_lag_diff
05:16:05   6  ,STDDEV(lag_diff) stddev_lag_diff
05:16:05   7  ,MAX(lag_diff)	max_lag_diff
05:16:05   8  ,COUNT(lag_diff)	cnt_lag_diff
05:16:05   9  FROM ibf5min10
05:16:05  10  GROUP BY pair
05:16:05  11  /

View created.

Elapsed: 00:00:00.02
05:16:05 SQL> 
05:16:05 SQL> SELECT * FROM ibf5min_ld;

PAIR	 MIN_LAG_DIFF AVG_LAG_DIFF STDDEV_LAG_DIFF MAX_LAG_DIFF CNT_LAG_DIFF
-------- ------------ ------------ --------------- ------------ ------------
aud_usd    -.00875518	2.8978E-06	.000421135   .005697287        33611
eur_usd    -.00670708	2.3097E-06	.000392027   .005109004        33617
gbp_usd    -.00596104	1.2309E-06	.000340637   .004765507        33616
usd_cad    -.00367767	-1.675E-06	.000329476   .004222134        33614
usd_chf    -.00761532	-3.677E-06	.000437959   .005681657        33621
usd_jpy    -.03034585	-1.312E-06	.000420394   .012754865        33615

6 rows selected.

Elapsed: 00:00:00.98
05:16:06 SQL> 
05:16:06 SQL> SELECT * FROM ibf5min10 WHERE lag_diff = (SELECT MIN(min_lag_diff)FROM ibf5min_ld);

PAIR	 YDATE			   CLSE LAG_YDATE	    MINUTES_DIFF   LAG_CLSE   LAG_DIFF
-------- ------------------- ---------- ------------------- ------------ ---------- ----------
usd_jpy  2011-03-16 21:15:00 77.2483333 2011-03-16 20:55:00	      20    79.5925 -.03034585

Elapsed: 00:00:01.69
05:16:08 SQL> 
05:16:08 SQL> SELECT * FROM ibf5min10 WHERE lag_diff = (SELECT MAX(max_lag_diff)FROM ibf5min_ld);

PAIR	 YDATE			   CLSE LAG_YDATE	    MINUTES_DIFF   LAG_CLSE   LAG_DIFF
-------- ------------------- ---------- ------------------- ------------ ---------- ----------
usd_jpy  2011-03-18 00:00:00	80.5575 2011-03-17 23:55:00	       5      79.53 .012754865

Elapsed: 00:00:01.65
05:16:10 SQL> 
05:16:10 SQL> -- SELECT COUNT(*)FROM ibf5min10 WHERE lag_diff IN(SELECT max_lag_diff FROM ibf5min_ld);
05:16:10 SQL> 
05:16:10 SQL> -- Get a closer look at the smallest lag_diffs:
05:16:10 SQL> 
05:16:10 SQL> -- SELECT COUNT(l.pair)
05:16:10 SQL> SELECT
05:16:10   2  l.pair
05:16:10   3  ,TO_CHAR(i.ydate,'Day')dday
05:16:10   4  ,i.ydate
05:16:10   5  ,i.lag_clse
05:16:10   6  ,i.clse
05:16:10   7  ,i.lag_diff
05:16:10   8  ,i.lag_diff/stddev_lag_diff ld_st_ratio
05:16:10   9  ,i.minutes_diff
05:16:10  10  FROM ibf5min_ld l, ibf5min10 i
05:16:10  11  WHERE l.min_lag_diff = i.lag_diff
05:16:10  12  ORDER BY i.ydate,l.pair
05:16:10  13  /

PAIR	 DDAY	   YDATE		 LAG_CLSE	CLSE   LAG_DIFF LD_ST_RATIO MINUTES_DIFF
-------- --------- ------------------- ---------- ---------- ---------- ----------- ------------
usd_cad  Sunday    2011-01-02 22:15:00	.99783125    .994175 -.00367767    -11.1622	    2900
gbp_usd  Tuesday   2011-01-25 09:30:00	 1.590525     1.5811 -.00596104  -17.499676	       5
aud_usd  Wednesday 2011-03-16 21:15:00	  .983675   .9751375 -.00875518  -20.789453	      20
usd_jpy  Wednesday 2011-03-16 21:15:00	  79.5925 77.2483333 -.03034585  -72.184269	      20
usd_chf  Wednesday 2011-03-16 21:20:00 .901941667    .895125 -.00761532  -17.388203	       5
eur_usd  Thursday  2011-05-05 12:30:00	   1.4822   1.472325 -.00670708  -17.108731	       5

6 rows selected.

Elapsed: 00:00:01.82
05:16:12 SQL> 
05:16:12 SQL> -- Get a closer look at the largest lag_diffs:
05:16:12 SQL> 
05:16:12 SQL> -- SELECT COUNT(l.pair)
05:16:12 SQL> SELECT
05:16:12   2  l.pair
05:16:12   3  ,TO_CHAR(i.ydate,'Day')dday
05:16:12   4  ,i.ydate
05:16:12   5  ,i.lag_clse
05:16:12   6  ,i.clse
05:16:12   7  ,i.lag_diff
05:16:12   8  ,i.lag_diff/stddev_lag_diff ld_st_ratio
05:16:12   9  ,i.minutes_diff
05:16:12  10  FROM ibf5min_ld l, ibf5min10 i
05:16:12  11  WHERE l.max_lag_diff = i.lag_diff
05:16:12  12  ORDER BY i.ydate,l.pair
05:16:12  13  /

PAIR	 DDAY	   YDATE		 LAG_CLSE	CLSE   LAG_DIFF LD_ST_RATIO MINUTES_DIFF
-------- --------- ------------------- ---------- ---------- ---------- ----------- ------------
usd_cad  Friday    2010-12-03 13:30:00	  1.00235     1.0066 .004222134  12.8147092	       5
eur_usd  Thursday  2011-03-03 13:30:00	1.3850375    1.39215 .005109004  13.0322869	       5
usd_jpy  Friday    2011-03-18 00:00:00	    79.53    80.5575 .012754865  30.3402425	       5
aud_usd  Friday    2011-03-18 00:20:00	   .98605      .9917 .005697287  13.5283972	       5
gbp_usd  Wednesday 2011-04-27 08:30:00	 1.644625     1.6525 .004765507  13.9899797	       5
usd_chf  Tuesday   2011-05-10 07:15:00	  .875025    .880025 .005681657  12.9730274	       5

6 rows selected.

Elapsed: 00:00:01.79
05:16:13 SQL> 
05:16:13 SQL> -- I want to see rows around the rows which are connected to the max/min clse values
05:16:13 SQL> 
05:16:13 SQL> CREATE OR REPLACE VIEW ibf5min12 AS
05:16:13   2  SELECT
05:16:13   3  pair
05:16:13   4  -- ydate is granular down to 5 min:
05:16:13   5  ,ydate
05:16:13   6  ,LAG(clse,3,NULL)OVER(PARTITION BY pair ORDER BY ydate) lag_clse3
05:16:13   7  ,LAG(clse,2,NULL)OVER(PARTITION BY pair ORDER BY ydate) lag_clse2
05:16:13   8  ,LAG(clse,1,NULL)OVER(PARTITION BY pair ORDER BY ydate) lag_clse1
05:16:13   9  ,clse
05:16:13  10  ,LEAD(clse,1,NULL)OVER(PARTITION BY pair ORDER BY ydate) lead_clse1
05:16:13  11  ,LEAD(clse,2,NULL)OVER(PARTITION BY pair ORDER BY ydate) lead_clse2
05:16:13  12  ,LEAD(clse,3,NULL)OVER(PARTITION BY pair ORDER BY ydate) lead_clse3
05:16:13  13  ,(clse - LAG(clse,1,NULL)OVER(PARTITION BY pair ORDER BY ydate))/clse lag_diff
05:16:13  14  FROM ibf5min
05:16:13  15  WHERE clse>0
05:16:13  16  ORDER BY pair, ydate
05:16:13  17  /

View created.

Elapsed: 00:00:00.04
05:16:13 SQL> 
05:16:13 SQL> -- Now join ibf5min12 with ibf5min_ld
05:16:13 SQL> 
05:16:13 SQL> SELECT
05:16:13   2  l.pair
05:16:13   3  ,i.ydate
05:16:13   4  ,lag_clse3
05:16:13   5  ,lag_clse2
05:16:13   6  ,lag_clse1
05:16:13   7  ,lag_diff
05:16:13   8  ,i.clse
05:16:13   9  ,lead_clse1
05:16:13  10  ,lead_clse2
05:16:13  11  ,lead_clse3
05:16:13  12  FROM ibf5min_ld l, ibf5min12 i
05:16:13  13  WHERE l.max_lag_diff = i.lag_diff
05:16:13  14  OR    l.min_lag_diff = i.lag_diff
05:16:13  15  ORDER BY i.ydate,l.pair
05:16:13  16  /

PAIR	 YDATE		      LAG_CLSE3  LAG_CLSE2  LAG_CLSE1	LAG_DIFF       CLSE LEAD_CLSE1 LEAD_CLSE2 LEAD_CLSE3
-------- ------------------- ---------- ---------- ---------- ---------- ---------- ---------- ---------- ----------
usd_cad  2010-12-03 13:30:00   1.002175   1.002525    1.00235 .004222134     1.0066	1.0042	 1.005775     1.0071
usd_cad  2011-01-02 22:15:00	 .99785    .997825  .99783125 -.00367767    .994175	.99475	   .99475     .99475
gbp_usd  2011-01-25 09:30:00   1.590875    1.59065   1.590525 -.00596104     1.5811    1.58245	   1.5802    1.57875
eur_usd  2011-03-03 13:30:00   1.385075      1.385  1.3850375 .005109004    1.39215  1.3931125	 1.394075    1.39625
aud_usd  2011-03-16 21:15:00	  .9842   .9839875    .983675 -.00875518   .9751375   .9766125	  .975825   .9774875
usd_jpy  2011-03-16 21:15:00   79.82375   79.78625    79.5925 -.03034585 77.2483333    77.5075	 77.45625    77.3175
usd_chf  2011-03-16 21:20:00   .9081625      .9082 .901941667 -.00761532    .895125   .8974125	  .898975    .899325
usd_jpy  2011-03-18 00:00:00	79.3525    79.4225	79.53 .012754865    80.5575	80.815	   80.825     80.895
aud_usd  2011-03-18 00:20:00	  .9846      .9846     .98605 .005697287      .9917	 .9894	    .9886    .988075
gbp_usd  2011-04-27 08:30:00	 1.6459   1.644325   1.644625 .004765507     1.6525   1.654075	 1.653575     1.6557
eur_usd  2011-05-05 12:30:00   1.481075     1.4812     1.4822 -.00670708   1.472325    1.47215	   1.4715     1.4711
usd_chf  2011-05-10 07:15:00	  .8743   .8746875    .875025 .005681657    .880025	.87985	   .87825    .878375

12 rows selected.

Elapsed: 00:00:05.31
05:16:19 SQL> 
05:16:19 SQL> -- Look at what is recent
05:16:19 SQL> 
05:16:19 SQL> SELECT
05:16:19   2  pair
05:16:19   3  ,ydate
05:16:19   4  ,clse
05:16:19   5  FROM ibf5min
05:16:19   6  WHERE ydate > sysdate - 1.5/24
05:16:19   7  ORDER BY pair,ydate
05:16:19   8  /

no rows selected

Elapsed: 00:00:00.02
05:16:19 SQL> 
05:16:19 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
