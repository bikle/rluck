
SQL*Plus: Release 11.2.0.1.0 Production on Sat Feb 26 00:08:08 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

00:08:08 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
00:08:08 SQL> 00:08:08 SQL> --
00:08:08 SQL> -- qry_ibf5min.sql
00:08:08 SQL> --
00:08:08 SQL> 
00:08:08 SQL> -- I use this script to look for dups and bad data in ibf5min
00:08:08 SQL> 
00:08:08 SQL> SET LINES 66
00:08:08 SQL> DESC ibf5min
 Name				  Null?    Type
 -------------------------------- -------- -----------------------
 PAIR					   VARCHAR2(8)
 YDATE					   DATE
 CLSE					   NUMBER

00:08:08 SQL> SET LINES 166
00:08:08 SQL> 
00:08:08 SQL> SELECT
00:08:08   2  pair
00:08:08   3  ,COUNT(pair)
00:08:08   4  FROM ibf5min
00:08:08   5  GROUP BY pair
00:08:08   6  ORDER BY pair
00:08:08   7  /

PAIR	 COUNT(PAIR)
-------- -----------
aud_usd        18147
eur_usd        18152
gbp_usd        18152
usd_cad        18152
usd_chf        18156
usd_jpy        18151

6 rows selected.

Elapsed: 00:00:00.03
00:08:08 SQL> 
00:08:08 SQL> SELECT
00:08:08   2  TO_CHAR(ydate,'YYYY_MM')mnth,TO_CHAR(ydate,'W')wweek
00:08:08   3  ,COUNT(pair)
00:08:08   4  FROM ibf5min
00:08:08   5  GROUP BY TO_CHAR(ydate,'YYYY_MM'),TO_CHAR(ydate,'W')
00:08:08   6  ORDER BY TO_CHAR(ydate,'YYYY_MM'),TO_CHAR(ydate,'W')
00:08:08   7  /

MNTH	W COUNT(PAIR)
------- - -----------
2010_11 5	 1676
2010_12 1	 8550
2010_12 2	 8537
2010_12 3	 8370
2010_12 4	 8398
2010_12 5	 5001
2011_01 1	 8544
2011_01 2	 8548
2011_01 3	 8550
2011_01 4	 8550
2011_01 5	 1836
2011_02 1	 8547
2011_02 2	 8538
2011_02 3	 8545
2011_02 4	 6714
		    6

16 rows selected.

Elapsed: 00:00:00.08
00:08:08 SQL> 
00:08:08 SQL> -- Look for dups
00:08:08 SQL> SELECT COUNT(pair)FROM
00:08:08   2  (
00:08:08   3  SELECT
00:08:08   4  pair
00:08:08   5  ,ydate
00:08:08   6  ,COUNT(pair)
00:08:08   7  FROM ibf5min
00:08:08   8  GROUP BY pair,ydate
00:08:08   9  HAVING COUNT(pair)>1
00:08:08  10  )
00:08:08  11  /

COUNT(PAIR)
-----------
	  0

Elapsed: 00:00:00.06
00:08:08 SQL> 
00:08:08 SQL> -- Use LAG() to look for big jumps.
00:08:08 SQL> 
00:08:08 SQL> CREATE OR REPLACE VIEW ibf5min10 AS
00:08:08   2  SELECT
00:08:08   3  pair
00:08:08   4  -- ydate is granular down to 5 min:
00:08:08   5  ,ydate
00:08:08   6  ,clse
00:08:08   7  -- Use analytic function to get LAG()
00:08:08   8  ,LAG(ydate,1,NULL)OVER(PARTITION BY pair ORDER BY ydate)		    lag_ydate
00:08:08   9  ,(ydate - LAG(ydate,1,NULL)OVER(PARTITION BY pair ORDER BY ydate))*24*60 minutes_diff
00:08:08  10  ,LAG(clse,1,NULL)OVER(PARTITION BY pair ORDER BY ydate)		    lag_clse
00:08:08  11  ,(clse - LAG(clse,1,NULL)OVER(PARTITION BY pair ORDER BY ydate))/clse lag_diff
00:08:08  12  FROM ibf5min
00:08:08  13  WHERE clse>0
00:08:08  14  ORDER BY pair, ydate
00:08:08  15  /

View created.

Elapsed: 00:00:00.12
00:08:08 SQL> 
00:08:08 SQL> CREATE OR REPLACE VIEW ibf5min_ld AS
00:08:08   2  SELECT
00:08:08   3  pair
00:08:08   4  ,MIN(lag_diff)	min_lag_diff
00:08:08   5  ,AVG(lag_diff)	avg_lag_diff
00:08:08   6  ,STDDEV(lag_diff) stddev_lag_diff
00:08:08   7  ,MAX(lag_diff)	max_lag_diff
00:08:08   8  ,COUNT(lag_diff)	cnt_lag_diff
00:08:08   9  FROM ibf5min10
00:08:08  10  GROUP BY pair
00:08:08  11  /

View created.

Elapsed: 00:00:00.10
00:08:09 SQL> 
00:08:09 SQL> SELECT * FROM ibf5min_ld;

PAIR	 MIN_LAG_DIFF AVG_LAG_DIFF STDDEV_LAG_DIFF MAX_LAG_DIFF CNT_LAG_DIFF
-------- ------------ ------------ --------------- ------------ ------------
aud_usd    -.00412953	.000003073	.000405311   .004498551        18145
eur_usd    -.00340562	2.5873E-06	.000408262   .004815837        18150
gbp_usd    -.00596104	1.8941E-06	.000348204   .004037224        18150
usd_cad    -.00367767	-2.354E-06	.000321035   .004222134        18150
usd_chf    -.00675762	-4.226E-06	.000448423    .00538548        18154
usd_jpy    -.00797352	-1.734E-06	.000331161   .005252714        18149

6 rows selected.

Elapsed: 00:00:00.41
00:08:09 SQL> 
00:08:09 SQL> SELECT * FROM ibf5min10 WHERE lag_diff = (SELECT MIN(min_lag_diff)FROM ibf5min_ld);

PAIR	 YDATE			   CLSE LAG_YDATE	    MINUTES_DIFF   LAG_CLSE   LAG_DIFF
-------- ------------------- ---------- ------------------- ------------ ---------- ----------
usd_jpy  2010-12-03 13:30:00	83.0875 2010-12-03 13:25:00	       5      83.75 -.00797352

Elapsed: 00:00:00.73
00:08:10 SQL> 
00:08:10 SQL> SELECT * FROM ibf5min10 WHERE lag_diff = (SELECT MAX(max_lag_diff)FROM ibf5min_ld);

PAIR	 YDATE			   CLSE LAG_YDATE	    MINUTES_DIFF   LAG_CLSE   LAG_DIFF
-------- ------------------- ---------- ------------------- ------------ ---------- ----------
usd_chf  2011-02-04 13:35:00	.956275 2011-02-04 13:30:00	       5    .951125  .00538548

Elapsed: 00:00:00.72
00:08:10 SQL> 
00:08:10 SQL> -- SELECT COUNT(*)FROM ibf5min10 WHERE lag_diff IN(SELECT max_lag_diff FROM ibf5min_ld);
00:08:10 SQL> 
00:08:10 SQL> -- Get a closer look at the smallest lag_diffs:
00:08:10 SQL> 
00:08:10 SQL> -- SELECT COUNT(l.pair)
00:08:10 SQL> SELECT
00:08:10   2  l.pair
00:08:10   3  ,TO_CHAR(i.ydate,'Day')dday
00:08:10   4  ,i.ydate
00:08:10   5  ,i.lag_clse
00:08:10   6  ,i.clse
00:08:10   7  ,i.lag_diff
00:08:10   8  ,i.lag_diff/stddev_lag_diff ld_st_ratio
00:08:10   9  ,i.minutes_diff
00:08:10  10  FROM ibf5min_ld l, ibf5min10 i
00:08:10  11  WHERE l.min_lag_diff = i.lag_diff
00:08:10  12  ORDER BY i.ydate,l.pair
00:08:10  13  /

PAIR	 DDAY	   YDATE		 LAG_CLSE	CLSE   LAG_DIFF LD_ST_RATIO MINUTES_DIFF
-------- --------- ------------------- ---------- ---------- ---------- ----------- ------------
usd_jpy  Friday    2010-12-03 13:30:00	    83.75    83.0875 -.00797352  -24.077474	       5
usd_chf  Friday    2010-12-03 13:35:00	  .990725    .984075 -.00675762  -15.069747	       5
usd_cad  Sunday    2011-01-02 22:15:00	.99783125    .994175 -.00367767  -11.455662	    2900
aud_usd  Tuesday   2011-01-25 00:30:00	   .99695     .99285 -.00412953  -10.188528	       5
gbp_usd  Tuesday   2011-01-25 09:30:00	 1.590525     1.5811 -.00596104  -17.119365	       5
eur_usd  Friday    2011-02-04 13:35:00	 1.362675    1.35805 -.00340562  -8.3417394	       5

6 rows selected.

Elapsed: 00:00:00.78
00:08:11 SQL> 
00:08:11 SQL> -- Get a closer look at the largest lag_diffs:
00:08:11 SQL> 
00:08:11 SQL> -- SELECT COUNT(l.pair)
00:08:11 SQL> SELECT
00:08:11   2  l.pair
00:08:11   3  ,TO_CHAR(i.ydate,'Day')dday
00:08:11   4  ,i.ydate
00:08:11   5  ,i.lag_clse
00:08:11   6  ,i.clse
00:08:11   7  ,i.lag_diff
00:08:11   8  ,i.lag_diff/stddev_lag_diff ld_st_ratio
00:08:11   9  ,i.minutes_diff
00:08:11  10  FROM ibf5min_ld l, ibf5min10 i
00:08:11  11  WHERE l.max_lag_diff = i.lag_diff
00:08:11  12  ORDER BY i.ydate,l.pair
00:08:11  13  /

PAIR	 DDAY	   YDATE		 LAG_CLSE	CLSE   LAG_DIFF LD_ST_RATIO MINUTES_DIFF
-------- --------- ------------------- ---------- ---------- ---------- ----------- ------------
usd_cad  Friday    2010-12-03 13:30:00	  1.00235     1.0066 .004222134  13.1516175	       5
aud_usd  Thursday  2010-12-09 00:30:00	  .979225     .98365 .004498551  11.0990009	       5
eur_usd  Thursday  2010-12-23 16:15:00	  1.30705   1.313375 .004815837  11.7959365	       5
usd_jpy  Wednesday 2011-01-05 13:15:00 82.3004167     82.735 .005252714  15.8615097	       5
gbp_usd  Tuesday   2011-01-18 09:30:00	  1.59735   1.603825 .004037224  11.5944041	       5
usd_chf  Friday    2011-02-04 13:35:00	  .951125    .956275  .00538548  12.0098325	       5

6 rows selected.

Elapsed: 00:00:00.79
00:08:12 SQL> 
00:08:12 SQL> -- I want to see rows around the rows which are connected to the max/min clse values
00:08:12 SQL> 
00:08:12 SQL> CREATE OR REPLACE VIEW ibf5min12 AS
00:08:12   2  SELECT
00:08:12   3  pair
00:08:12   4  -- ydate is granular down to 5 min:
00:08:12   5  ,ydate
00:08:12   6  ,LAG(clse,3,NULL)OVER(PARTITION BY pair ORDER BY ydate) lag_clse3
00:08:12   7  ,LAG(clse,2,NULL)OVER(PARTITION BY pair ORDER BY ydate) lag_clse2
00:08:12   8  ,LAG(clse,1,NULL)OVER(PARTITION BY pair ORDER BY ydate) lag_clse1
00:08:12   9  ,clse
00:08:12  10  ,LEAD(clse,1,NULL)OVER(PARTITION BY pair ORDER BY ydate) lead_clse1
00:08:12  11  ,LEAD(clse,2,NULL)OVER(PARTITION BY pair ORDER BY ydate) lead_clse2
00:08:12  12  ,LEAD(clse,3,NULL)OVER(PARTITION BY pair ORDER BY ydate) lead_clse3
00:08:12  13  ,(clse - LAG(clse,1,NULL)OVER(PARTITION BY pair ORDER BY ydate))/clse lag_diff
00:08:12  14  FROM ibf5min
00:08:12  15  WHERE clse>0
00:08:12  16  ORDER BY pair, ydate
00:08:12  17  /

View created.

Elapsed: 00:00:00.04
00:08:12 SQL> 
00:08:12 SQL> -- Now join ibf5min12 with ibf5min_ld
00:08:12 SQL> 
00:08:12 SQL> SELECT
00:08:12   2  l.pair
00:08:12   3  ,i.ydate
00:08:12   4  ,lag_clse3
00:08:12   5  ,lag_clse2
00:08:12   6  ,lag_clse1
00:08:12   7  ,lag_diff
00:08:12   8  ,i.clse
00:08:12   9  ,lead_clse1
00:08:12  10  ,lead_clse2
00:08:12  11  ,lead_clse3
00:08:12  12  FROM ibf5min_ld l, ibf5min12 i
00:08:12  13  WHERE l.max_lag_diff = i.lag_diff
00:08:12  14  OR    l.min_lag_diff = i.lag_diff
00:08:12  15  ORDER BY i.ydate,l.pair
00:08:12  16  /

PAIR	 YDATE		      LAG_CLSE3  LAG_CLSE2  LAG_CLSE1	LAG_DIFF       CLSE LEAD_CLSE1 LEAD_CLSE2 LEAD_CLSE3
-------- ------------------- ---------- ---------- ---------- ---------- ---------- ---------- ---------- ----------
usd_cad  2010-12-03 13:30:00   1.002175   1.002525    1.00235 .004222134     1.0066	1.0042	 1.005775     1.0071
usd_jpy  2010-12-03 13:30:00	 83.745     83.785	83.75 -.00797352    83.0875    82.8875	  82.8825     82.705
usd_chf  2010-12-03 13:35:00	.992425     .99135    .990725 -.00675762    .984075	 .9829	  .981675     .98125
aud_usd  2010-12-09 00:30:00	.978775     .97935    .979225 .004498551     .98365    .983675	  .984925      .9849
eur_usd  2010-12-23 16:15:00	1.30685     1.3071    1.30705 .004815837   1.313375	1.3115	  1.31175    1.31125
usd_cad  2011-01-02 22:15:00	 .99785    .997825  .99783125 -.00367767    .994175	.99475	   .99475     .99475
usd_jpy  2011-01-05 13:15:00	  82.24     82.225 82.3004167 .005252714     82.735   82.79375	  83.0475     82.875
gbp_usd  2011-01-18 09:30:00   1.598025    1.59815    1.59735 .004037224   1.603825    1.60465	 1.603175     1.6045
aud_usd  2011-01-25 00:30:00	.997525    .997475     .99695 -.00412953     .99285	.99325	    .9932     .99355
gbp_usd  2011-01-25 09:30:00   1.590875    1.59065   1.590525 -.00596104     1.5811    1.58245	   1.5802    1.57875
eur_usd  2011-02-04 13:35:00   1.364425   1.364725   1.362675 -.00340562    1.35805    1.35925	  1.35875    1.35875
usd_chf  2011-02-04 13:35:00	  .9494    .949075    .951125  .00538548    .956275	 .9541	   .95475      .9549

12 rows selected.

Elapsed: 00:00:02.28
00:08:14 SQL> 
00:08:14 SQL> -- Look at what is recent
00:08:14 SQL> 
00:08:14 SQL> SELECT
00:08:14   2  pair
00:08:14   3  ,ydate
00:08:14   4  ,clse
00:08:14   5  FROM ibf5min
00:08:14   6  WHERE ydate > sysdate - 1.5/24
00:08:14   7  ORDER BY pair,ydate
00:08:14   8  /

no rows selected

Elapsed: 00:00:00.01
00:08:14 SQL> 
00:08:14 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
