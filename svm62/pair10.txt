
SQL*Plus: Release 11.2.0.1.0 Production on Thu Feb 24 15:50:10 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

15:50:11 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
15:50:11 SQL> 15:50:11 SQL> --
15:50:11 SQL> -- pair10.sql
15:50:11 SQL> --
15:50:11 SQL> 
15:50:11 SQL> -- Creates views and tables needed by SVM.
15:50:11 SQL> 
15:50:11 SQL> 
15:50:11 SQL> CREATE OR REPLACE VIEW svm6102 AS
15:50:11   2  SELECT
15:50:11   3  pair
15:50:11   4  ,ydate
15:50:11   5  ,prdate
15:50:11   6  ,rownum rnum -- acts as t in my time-series
15:50:11   7  ,clse
15:50:11   8  -- Derive a bunch of attributes from clse, the latest price:
15:50:11   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
15:50:11  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
15:50:11  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
15:50:11  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
15:50:11  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
15:50:11  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
15:50:11  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
15:50:11  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
15:50:11  17  --
15:50:11  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
15:50:11  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
15:50:11  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
15:50:11  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
15:50:11  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
15:50:11  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
15:50:11  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
15:50:11  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
15:50:11  26  --
15:50:11  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
15:50:11  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
15:50:11  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
15:50:11  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
15:50:11  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
15:50:11  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
15:50:11  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
15:50:11  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
15:50:11  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
15:50:11  36  FROM di5min WHERE pair = '&1'
15:50:11  37  AND ydate > sysdate - 95
15:50:11  38  ORDER BY ydate
15:50:11  39  /
old  36: FROM di5min WHERE pair = '&1'
new  36: FROM di5min WHERE pair = 'aud_usd'

View created.

Elapsed: 00:00:00.11
15:50:11 SQL> 
15:50:11 SQL> -- rpt
15:50:11 SQL> 
15:50:11 SQL> SELECT
15:50:11   2  pair
15:50:11   3  ,COUNT(pair)
15:50:11   4  ,MIN(clse),MAX(clse)
15:50:11   5  ,MIN(avg6),MAX(avg6)
15:50:11   6  ,MIN(ydate),MAX(ydate)
15:50:11   7  FROM svm6102
15:50:11   8  GROUP BY pair
15:50:11   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
aud_usd       19562	.95405	   1.0246 .957141438 1.02282723 2010-11-21 20:55:00 2011-02-24 15:35:00

Elapsed: 00:00:00.86
15:50:12 SQL> 
15:50:12 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
15:50:12 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:02.16
15:50:14 SQL> CREATE TABLE svm6122 COMPRESS AS
15:50:14   2  SELECT
15:50:14   3  pair
15:50:14   4  ,ydate
15:50:14   5  ,prdate
15:50:14   6  ,clse
15:50:14   7  -- g6 is important. I want to predict g6:
15:50:14   8  ,(ld6 - clse)/clse g6
15:50:14   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
15:50:14  10  -- I want more attributes from the ones I derived above:
15:50:14  11  -- clse relation to moving-min
15:50:14  12  ,clse-min4  cm4
15:50:14  13  ,clse-min6  cm6
15:50:14  14  ,clse-min8  cm8
15:50:14  15  ,clse-min10 cm10
15:50:14  16  ,clse-min12 cm12
15:50:14  17  ,clse-min14 cm14
15:50:14  18  ,clse-min16 cm16
15:50:14  19  ,clse-min18 cm18
15:50:14  20  -- clse relation to moving-avg
15:50:14  21  ,clse-avg4  ca4
15:50:14  22  ,clse-avg6  ca6
15:50:14  23  ,clse-avg8  ca8
15:50:14  24  ,clse-avg10 ca10
15:50:14  25  ,clse-avg12 ca12
15:50:14  26  ,clse-avg14 ca14
15:50:14  27  ,clse-avg16 ca16
15:50:14  28  ,clse-avg18 ca18
15:50:14  29  -- clse relation to moving-max
15:50:14  30  ,clse-max4  cx4
15:50:14  31  ,clse-max6  cx6
15:50:14  32  ,clse-max8  cx8
15:50:14  33  ,clse-max10 cx10
15:50:14  34  ,clse-max12 cx12
15:50:14  35  ,clse-max14 cx14
15:50:14  36  ,clse-max16 cx16
15:50:14  37  ,clse-max18 cx18
15:50:14  38  -- Derive more attributes.
15:50:14  39  -- I want to use CORR() here to help SVM see the shape of the series.
15:50:14  40  -- But COVAR_POP is more stable:
15:50:14  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
15:50:14  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
15:50:14  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
15:50:14  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
15:50:14  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
15:50:14  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
15:50:14  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
15:50:14  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
15:50:14  49  -- Derive date related attributes:
15:50:14  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
15:50:14  51  ,0+TO_CHAR(ydate,'D')d
15:50:14  52  ,0+TO_CHAR(ydate,'W')w
15:50:14  53  -- mpm stands for minutes-past-midnight:
15:50:14  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
15:50:14  55  -- mph stands for minutes-past-hour:
15:50:14  56  ,0+TO_CHAR(ydate,'MI')mph
15:50:14  57  FROM svm6102
15:50:14  58  WHERE clse > 0
15:50:14  59  ORDER BY ydate
15:50:14  60  /

Table created.

Elapsed: 00:00:02.21
15:50:16 SQL> 
15:50:16 SQL> -- rpt
15:50:16 SQL> 
15:50:16 SQL> SELECT
15:50:16   2  pair
15:50:16   3  ,COUNT(pair)
15:50:16   4  ,MIN(clse),MAX(clse)
15:50:16   5  ,MIN(ydate),MAX(ydate)
15:50:16   6  FROM svm6122
15:50:16   7  GROUP BY pair
15:50:16   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
aud_usd       19562	.95405	   1.0246 2010-11-21 20:55:00 2011-02-24 15:35:00

Elapsed: 00:00:00.04
15:50:16 SQL> 
15:50:16 SQL> -- Prepare for derivation of NTILE based params:
15:50:16 SQL> 
15:50:16 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.25
15:50:16 SQL> CREATE TABLE svm6142 COMPRESS AS
15:50:16   2  SELECT
15:50:16   3  pair
15:50:16   4  ,ydate
15:50:16   5  ,prdate
15:50:16   6  ,clse
15:50:16   7  ,g6
15:50:16   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
15:50:16   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
15:50:16  10  ,CASE WHEN trend IS NULL THEN 1
15:50:16  11  	    WHEN trend =0      THEN 1
15:50:16  12  	    ELSE trend END trend
15:50:16  13  ,cm4
15:50:16  14  ,cm6
15:50:16  15  ,cm8
15:50:16  16  ,cm10
15:50:16  17  ,cm12
15:50:16  18  ,cm14
15:50:16  19  ,cm16
15:50:16  20  ,cm18
15:50:16  21  --
15:50:16  22  ,ca4
15:50:16  23  ,ca6
15:50:16  24  ,ca8
15:50:16  25  ,ca10
15:50:16  26  ,ca12
15:50:16  27  ,ca14
15:50:16  28  ,ca16
15:50:16  29  ,ca18
15:50:16  30  --
15:50:16  31  ,cx4
15:50:16  32  ,cx6
15:50:16  33  ,cx8
15:50:16  34  ,cx10
15:50:16  35  ,cx12
15:50:16  36  ,cx14
15:50:16  37  ,cx16
15:50:16  38  ,cx18
15:50:16  39  --
15:50:16  40  ,crr4
15:50:16  41  ,crr6
15:50:16  42  ,crr8
15:50:16  43  ,crr10
15:50:16  44  ,crr12
15:50:16  45  ,crr14
15:50:16  46  ,crr16
15:50:16  47  ,crr18
15:50:16  48  --
15:50:16  49  ,hh
15:50:16  50  ,d
15:50:16  51  ,w
15:50:16  52  ,mpm
15:50:16  53  ,mph
15:50:16  54  FROM svm6122
15:50:16  55  ORDER BY ydate
15:50:16  56  /

Table created.

Elapsed: 00:00:00.41
15:50:17 SQL> 
15:50:17 SQL> -- rpt
15:50:17 SQL> 
15:50:17 SQL> SELECT
15:50:17   2  pair
15:50:17   3  ,trend
15:50:17   4  ,gatt
15:50:17   5  ,COUNT(pair)
15:50:17   6  ,AVG(g6)
15:50:17   7  FROM svm6142
15:50:17   8  GROUP BY pair,trend,gatt
15:50:17   9  ORDER BY pair,trend,gatt
15:50:17  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5982 -.00188634
aud_usd 	-1 up	      3650 .003520369
aud_usd 	-1		29
aud_usd 	 1 nup	      6729   -.001746
aud_usd 	 1 up	      3129 .003679383
aud_usd 	 1		43

6 rows selected.

Elapsed: 00:00:00.04
15:50:17 SQL> 
15:50:17 SQL> 
15:50:17 SQL> -- Derive NTILE based params:
15:50:17 SQL> 
15:50:17 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.22
15:50:17 SQL> CREATE TABLE svm6162 COMPRESS AS
15:50:17   2  SELECT
15:50:17   3  pair
15:50:17   4  ,ydate
15:50:17   5  ,prdate
15:50:17   6  ,clse
15:50:17   7  ,g6
15:50:17   8  ,gatt
15:50:17   9  ,gattn
15:50:17  10  ,trend
15:50:17  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
15:50:17  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
15:50:17  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
15:50:17  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
15:50:17  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
15:50:17  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
15:50:17  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
15:50:17  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
15:50:17  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
15:50:17  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
15:50:17  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
15:50:17  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
15:50:17  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
15:50:17  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
15:50:17  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
15:50:17  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
15:50:17  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
15:50:17  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
15:50:17  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
15:50:17  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
15:50:17  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
15:50:17  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
15:50:17  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
15:50:17  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
15:50:17  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
15:50:17  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
15:50:17  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
15:50:17  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
15:50:17  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
15:50:17  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
15:50:17  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
15:50:17  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
15:50:17  43  ,hh  att32
15:50:17  44  ,d   att33
15:50:17  45  ,w   att34
15:50:17  46  ,mpm att35
15:50:17  47  ,mph att36
15:50:17  48  ,trend att37
15:50:17  49  FROM svm6142
15:50:17  50  ORDER BY ydate
15:50:17  51  /
