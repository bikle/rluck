
SQL*Plus: Release 11.2.0.1.0 Production on Mon Mar 7 03:04:51 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

03:04:51 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
03:04:51 SQL> 03:04:51 SQL> --
03:04:51 SQL> -- pair10.sql
03:04:51 SQL> --
03:04:51 SQL> 
03:04:51 SQL> -- Creates views and tables needed by SVM.
03:04:51 SQL> 
03:04:51 SQL> 
03:04:51 SQL> CREATE OR REPLACE VIEW svm6102 AS
03:04:51   2  SELECT
03:04:51   3  pair
03:04:51   4  ,ydate
03:04:51   5  ,prdate
03:04:51   6  ,rownum rnum -- acts as t in my time-series
03:04:51   7  ,clse
03:04:51   8  -- Derive a bunch of attributes from clse, the latest price:
03:04:51   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
03:04:51  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
03:04:51  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
03:04:51  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
03:04:51  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
03:04:51  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
03:04:51  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
03:04:51  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
03:04:51  17  --
03:04:51  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
03:04:51  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
03:04:51  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
03:04:51  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
03:04:51  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
03:04:51  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
03:04:51  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
03:04:51  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
03:04:51  26  --
03:04:51  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
03:04:51  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
03:04:51  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
03:04:51  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
03:04:51  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
03:04:51  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
03:04:51  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
03:04:51  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
03:04:51  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
03:04:51  36  FROM di5min WHERE pair = '&1'
03:04:51  37  AND ydate > sysdate - 95
03:04:51  38  ORDER BY ydate
03:04:51  39  /
old  36: FROM di5min WHERE pair = '&1'
new  36: FROM di5min WHERE pair = 'aud_jpy'

View created.

Elapsed: 00:00:00.09
03:04:51 SQL> 
03:04:51 SQL> -- rpt
03:04:51 SQL> 
03:04:51 SQL> SELECT
03:04:51   2  pair
03:04:51   3  ,COUNT(pair)
03:04:51   4  ,MIN(clse),MAX(clse)
03:04:51   5  ,MIN(avg6),MAX(avg6)
03:04:51   6  ,MIN(ydate),MAX(ydate)
03:04:51   7  FROM svm6102
03:04:51   8  GROUP BY pair
03:04:51   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
aud_jpy       19020 81.0119538 84.4451413 81.0479799 84.3457231 2010-12-02 03:05:00 2011-03-07 02:50:00

Elapsed: 00:00:00.69
03:04:51 SQL> 
03:04:51 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
03:04:51 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.11
03:04:52 SQL> CREATE TABLE svm6122 COMPRESS AS
03:04:52   2  SELECT
03:04:52   3  pair
03:04:52   4  ,ydate
03:04:52   5  ,prdate
03:04:52   6  ,clse
03:04:52   7  -- g6 is important. I want to predict g6:
03:04:52   8  ,(ld6 - clse)/clse g6
03:04:52   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
03:04:52  10  -- I want more attributes from the ones I derived above:
03:04:52  11  -- clse relation to moving-min
03:04:52  12  ,clse-min4  cm4
03:04:52  13  ,clse-min6  cm6
03:04:52  14  ,clse-min8  cm8
03:04:52  15  ,clse-min10 cm10
03:04:52  16  ,clse-min12 cm12
03:04:52  17  ,clse-min14 cm14
03:04:52  18  ,clse-min16 cm16
03:04:52  19  ,clse-min18 cm18
03:04:52  20  -- clse relation to moving-avg
03:04:52  21  ,clse-avg4  ca4
03:04:52  22  ,clse-avg6  ca6
03:04:52  23  ,clse-avg8  ca8
03:04:52  24  ,clse-avg10 ca10
03:04:52  25  ,clse-avg12 ca12
03:04:52  26  ,clse-avg14 ca14
03:04:52  27  ,clse-avg16 ca16
03:04:52  28  ,clse-avg18 ca18
03:04:52  29  -- clse relation to moving-max
03:04:52  30  ,clse-max4  cx4
03:04:52  31  ,clse-max6  cx6
03:04:52  32  ,clse-max8  cx8
03:04:52  33  ,clse-max10 cx10
03:04:52  34  ,clse-max12 cx12
03:04:52  35  ,clse-max14 cx14
03:04:52  36  ,clse-max16 cx16
03:04:52  37  ,clse-max18 cx18
03:04:52  38  -- Derive more attributes.
03:04:52  39  -- I want to use CORR() here to help SVM see the shape of the series.
03:04:52  40  -- But COVAR_POP is more stable:
03:04:52  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
03:04:52  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
03:04:52  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
03:04:52  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
03:04:52  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
03:04:52  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
03:04:52  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
03:04:52  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
03:04:52  49  -- Derive date related attributes:
03:04:52  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
03:04:52  51  ,0+TO_CHAR(ydate,'D')d
03:04:52  52  ,0+TO_CHAR(ydate,'W')w
03:04:52  53  -- mpm stands for minutes-past-midnight:
03:04:52  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
03:04:52  55  -- mph stands for minutes-past-hour:
03:04:52  56  ,0+TO_CHAR(ydate,'MI')mph
03:04:52  57  FROM svm6102
03:04:52  58  WHERE clse > 0
03:04:52  59  ORDER BY ydate
03:04:52  60  /

Table created.

Elapsed: 00:00:02.28
03:04:54 SQL> 
03:04:54 SQL> -- rpt
03:04:54 SQL> 
03:04:54 SQL> SELECT
03:04:54   2  pair
03:04:54   3  ,COUNT(pair)
03:04:54   4  ,MIN(clse),MAX(clse)
03:04:54   5  ,MIN(ydate),MAX(ydate)
03:04:54   6  FROM svm6122
03:04:54   7  GROUP BY pair
03:04:54   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
aud_jpy       19020 81.0119538 84.4451413 2010-12-02 03:05:00 2011-03-07 02:50:00

Elapsed: 00:00:00.04
03:04:54 SQL> 
03:04:54 SQL> -- Prepare for derivation of NTILE based params:
03:04:54 SQL> 
03:04:54 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:01.47
03:04:55 SQL> CREATE TABLE svm6142 COMPRESS AS
03:04:55   2  SELECT
03:04:55   3  pair
03:04:55   4  ,ydate
03:04:55   5  ,prdate
03:04:55   6  ,clse
03:04:55   7  ,g6
03:04:55   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
03:04:55   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
03:04:55  10  ,CASE WHEN trend IS NULL THEN 1
03:04:55  11  	    WHEN trend =0      THEN 1
03:04:55  12  	    ELSE trend END trend
03:04:55  13  ,cm4
03:04:55  14  ,cm6
03:04:55  15  ,cm8
03:04:55  16  ,cm10
03:04:55  17  ,cm12
03:04:55  18  ,cm14
03:04:55  19  ,cm16
03:04:55  20  ,cm18
03:04:55  21  --
03:04:55  22  ,ca4
03:04:55  23  ,ca6
03:04:55  24  ,ca8
03:04:55  25  ,ca10
03:04:55  26  ,ca12
03:04:55  27  ,ca14
03:04:55  28  ,ca16
03:04:55  29  ,ca18
03:04:55  30  --
03:04:55  31  ,cx4
03:04:55  32  ,cx6
03:04:55  33  ,cx8
03:04:55  34  ,cx10
03:04:55  35  ,cx12
03:04:55  36  ,cx14
03:04:55  37  ,cx16
03:04:55  38  ,cx18
03:04:55  39  --
03:04:55  40  ,crr4
03:04:55  41  ,crr6
03:04:55  42  ,crr8
03:04:55  43  ,crr10
03:04:55  44  ,crr12
03:04:55  45  ,crr14
03:04:55  46  ,crr16
03:04:55  47  ,crr18
03:04:55  48  --
03:04:55  49  ,hh
03:04:55  50  ,d
03:04:55  51  ,w
03:04:55  52  ,mpm
03:04:55  53  ,mph
03:04:55  54  FROM svm6122
03:04:55  55  ORDER BY ydate
03:04:55  56  /

Table created.

Elapsed: 00:00:00.43
03:04:56 SQL> 
03:04:56 SQL> -- rpt
03:04:56 SQL> 
03:04:56 SQL> SELECT
03:04:56   2  pair
03:04:56   3  ,trend
03:04:56   4  ,gatt
03:04:56   5  ,COUNT(pair)
03:04:56   6  ,AVG(g6)
03:04:56   7  FROM svm6142
03:04:56   8  GROUP BY pair,trend,gatt
03:04:56   9  ORDER BY pair,trend,gatt
03:04:56  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_jpy 	-1 nup	      5751 -.00111843
aud_jpy 	-1 up	      3365 .003084819
aud_jpy 	-1		 1
aud_jpy 	 1 nup	      7244 -.00128286
aud_jpy 	 1 up	      2588 .002859326
aud_jpy 	 1		71

6 rows selected.

Elapsed: 00:00:00.04
03:04:56 SQL> 
03:04:56 SQL> 
03:04:56 SQL> -- Derive NTILE based params:
03:04:56 SQL> 
03:04:56 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:01.39
03:04:57 SQL> CREATE TABLE svm6162 COMPRESS AS
03:04:57   2  SELECT
03:04:57   3  pair
03:04:57   4  ,ydate
03:04:57   5  ,prdate
03:04:57   6  ,clse
03:04:57   7  ,g6
03:04:57   8  ,gatt
03:04:57   9  ,gattn
03:04:57  10  ,trend
03:04:57  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
03:04:57  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
03:04:57  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
03:04:57  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
03:04:57  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
03:04:57  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
03:04:57  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
03:04:57  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
03:04:57  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
03:04:57  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
03:04:57  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
03:04:57  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
03:04:57  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
03:04:57  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
03:04:57  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
03:04:57  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
03:04:57  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
03:04:57  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
03:04:57  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
03:04:57  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
03:04:57  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
03:04:57  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
03:04:57  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
03:04:57  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
03:04:57  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
03:04:57  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
03:04:57  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
03:04:57  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
03:04:57  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
03:04:57  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
03:04:57  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
03:04:57  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
03:04:57  43  ,hh  att32
03:04:57  44  ,d   att33
03:04:57  45  ,w   att34
03:04:57  46  ,mpm att35
03:04:57  47  ,mph att36
03:04:57  48  ,trend att37
03:04:57  49  FROM svm6142
03:04:57  50  ORDER BY ydate
03:04:57  51  /

Table created.

Elapsed: 00:00:05.09
03:05:02 SQL> 
03:05:02 SQL> -- rpt
03:05:02 SQL> 
03:05:02 SQL> SELECT
03:05:02   2  pair
03:05:02   3  ,trend
03:05:02   4  ,gatt
03:05:02   5  ,COUNT(pair)
03:05:02   6  ,AVG(g6)
03:05:02   7  FROM svm6162
03:05:02   8  GROUP BY pair,trend,gatt
03:05:02   9  ORDER BY pair,trend,gatt
03:05:02  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_jpy 	-1 nup	      5751 -.00111843
aud_jpy 	-1 up	      3365 .003084819
aud_jpy 	-1		 1
aud_jpy 	 1 nup	      7244 -.00128286
aud_jpy 	 1 up	      2588 .002859326
aud_jpy 	 1		71

6 rows selected.

Elapsed: 00:00:00.03
03:05:02 SQL> 
03:05:02 SQL> -- I comment out sections related to score-feedback.
03:05:02 SQL> -- I tested score-feeback and it hurts results:
03:05:02 SQL> 
03:05:02 SQL> -- CREATE OR REPLACE VIEW sc12 AS
03:05:02 SQL> -- SELECT
03:05:02 SQL> -- m.pair
03:05:02 SQL> -- ,m.ydate
03:05:02 SQL> -- ,m.prdate
03:05:02 SQL> -- ,l.score score_long
03:05:02 SQL> -- ,s.score score_short
03:05:02 SQL> -- ,m.g6
03:05:02 SQL> -- FROM svm62scores l,svm62scores s,svm6162 m
03:05:02 SQL> -- WHERE l.targ='gatt'
03:05:02 SQL> -- AND	 s.targ='gattn'
03:05:02 SQL> -- AND l.prdate = s.prdate
03:05:02 SQL> -- AND l.prdate = m.prdate
03:05:02 SQL> -- -- Speed things up:
03:05:02 SQL> -- AND l.pair = '&1'
03:05:02 SQL> -- AND s.pair = '&1'
03:05:02 SQL> -- /
03:05:02 SQL> --
03:05:02 SQL> -- DROP TABLE score_corr;
03:05:02 SQL> --
03:05:02 SQL> -- CREATE TABLE score_corr COMPRESS AS
03:05:02 SQL> -- SELECT
03:05:02 SQL> -- pair
03:05:02 SQL> -- -- ,ydate
03:05:02 SQL> -- ,prdate
03:05:02 SQL> -- -- Find corr() tween score and g6 over 2 day period:
03:05:02 SQL> -- ,CORR((score_long - score_short),g6)
03:05:02 SQL> --   OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 2*24*60/5 PRECEDING AND CURRENT ROW)sc_corr
03:05:02 SQL> -- FROM sc12
03:05:02 SQL> -- /
03:05:02 SQL> 
03:05:02 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.30
03:05:03 SQL> 
03:05:03 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.34
03:05:03 SQL> 
03:05:03 SQL> CREATE TABLE modsrc COMPRESS AS
03:05:03   2  SELECT
03:05:03   3  pair
03:05:03   4  ,ydate
03:05:03   5  ,prdate
03:05:03   6  ,trend
03:05:03   7  ,g6
03:05:03   8  ,gatt
03:05:03   9  ,gattn
03:05:03  10  ,SUM(g6)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g00
03:05:03  11  ,SUM(g6)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g01
03:05:03  12  ,SUM(g6)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g02
03:05:03  13  ,SUM(g6)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g03
03:05:03  14  ,SUM(g6)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g04
03:05:03  15  ,SUM(g6)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g05
03:05:03  16  ,SUM(g6)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g06
03:05:03  17  ,SUM(g6)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g07
03:05:03  18  ,SUM(g6)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g08
03:05:03  19  ,SUM(g6)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g09
03:05:03  20  ,SUM(g6)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g10
03:05:03  21  ,SUM(g6)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g11
03:05:03  22  ,SUM(g6)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g12
03:05:03  23  ,SUM(g6)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g13
03:05:03  24  ,SUM(g6)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g14
03:05:03  25  ,SUM(g6)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g15
03:05:03  26  ,SUM(g6)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g16
03:05:03  27  ,SUM(g6)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g17
03:05:03  28  ,SUM(g6)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g18
03:05:03  29  ,SUM(g6)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g19
03:05:03  30  ,SUM(g6)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g20
03:05:03  31  ,SUM(g6)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g21
03:05:03  32  ,SUM(g6)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g22
03:05:03  33  ,SUM(g6)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g23
03:05:03  34  ,SUM(g6)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g24
03:05:03  35  ,SUM(g6)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g25
03:05:03  36  ,SUM(g6)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g26
03:05:03  37  ,SUM(g6)OVER(PARTITION BY trend,att27 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g27
03:05:03  38  ,SUM(g6)OVER(PARTITION BY trend,att28 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g28
03:05:03  39  ,SUM(g6)OVER(PARTITION BY trend,att29 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g29
03:05:03  40  ,SUM(g6)OVER(PARTITION BY trend,att30 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g30
03:05:03  41  ,SUM(g6)OVER(PARTITION BY trend,att31 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g31
03:05:03  42  ,SUM(g6)OVER(PARTITION BY trend,att32 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g32
03:05:03  43  ,SUM(g6)OVER(PARTITION BY trend,att33 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g33
03:05:03  44  ,SUM(g6)OVER(PARTITION BY trend,att34 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g34
03:05:03  45  ,SUM(g6)OVER(PARTITION BY trend,att35 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g35
03:05:03  46  ,SUM(g6)OVER(PARTITION BY trend,att36 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g36
03:05:03  47  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g37
03:05:03  48  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*40 PRECEDING AND CURRENT ROW)g38
03:05:03  49  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*30 PRECEDING AND CURRENT ROW)g39
03:05:03  50  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)g40
03:05:03  51  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)g41
03:05:03  52  FROM svm6162
03:05:03  53  /

Table created.

Elapsed: 00:00:06.57
03:05:10 SQL> 
03:05:10 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:02.57
03:05:12 SQL> 
03:05:12 SQL> -- rpt
03:05:12 SQL> 
03:05:12 SQL> SELECT
03:05:12   2  pair
03:05:12   3  ,trend
03:05:12   4  ,gatt
03:05:12   5  ,COUNT(pair)
03:05:12   6  ,AVG(g6)
03:05:12   7  FROM modsrc
03:05:12   8  GROUP BY pair,trend,gatt
03:05:12   9  ORDER BY pair,trend,gatt
03:05:12  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_jpy 	-1 nup	      5751 -.00111843
aud_jpy 	-1 up	      3365 .003084819
aud_jpy 	-1		 1
aud_jpy 	 1 nup	      7244 -.00128286
aud_jpy 	 1 up	      2588 .002859326
aud_jpy 	 1		71

6 rows selected.

Elapsed: 00:00:00.02
03:05:12 SQL> 
03:05:12 SQL> 
03:05:12 SQL> SELECT pair,COUNT(pair)FROM svm6102 GROUP BY pair;

PAIR	COUNT(PAIR)
------- -----------
aud_jpy       19019

Elapsed: 00:00:00.67
03:05:13 SQL> 
03:05:13 SQL> SELECT pair,COUNT(pair)FROM modsrc GROUP BY pair;

PAIR	COUNT(PAIR)
------- -----------
aud_jpy       19020

Elapsed: 00:00:00.01
03:05:13 SQL> 
03:05:13 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
