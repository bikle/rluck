
SQL*Plus: Release 11.2.0.1.0 Production on Tue Mar 8 21:37:13 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

21:37:13 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
21:37:13 SQL> 21:37:13 SQL> --
21:37:13 SQL> -- pair10.sql
21:37:13 SQL> --
21:37:13 SQL> 
21:37:13 SQL> -- Creates views and tables needed by SVM.
21:37:13 SQL> 
21:37:13 SQL> 
21:37:13 SQL> CREATE OR REPLACE VIEW svm6102 AS
21:37:13   2  SELECT
21:37:13   3  pair
21:37:13   4  ,ydate
21:37:13   5  ,prdate
21:37:13   6  ,rownum rnum -- acts as t in my time-series
21:37:13   7  ,clse
21:37:13   8  -- Derive a bunch of attributes from clse, the latest price:
21:37:13   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
21:37:13  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
21:37:13  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
21:37:13  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
21:37:13  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
21:37:13  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
21:37:13  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
21:37:13  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
21:37:13  17  --
21:37:13  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
21:37:13  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
21:37:13  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
21:37:13  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
21:37:13  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
21:37:13  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
21:37:13  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
21:37:13  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
21:37:13  26  --
21:37:13  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
21:37:13  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
21:37:13  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
21:37:13  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
21:37:13  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
21:37:13  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
21:37:13  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
21:37:13  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
21:37:13  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
21:37:13  36  FROM di5min WHERE pair = '&1'
21:37:13  37  AND ydate > sysdate - 95
21:37:13  38  ORDER BY ydate
21:37:13  39  /
old  36: FROM di5min WHERE pair = '&1'
new  36: FROM di5min WHERE pair = 'usd_jpy'

View created.

Elapsed: 00:00:00.06
21:37:13 SQL> 
21:37:13 SQL> -- rpt
21:37:13 SQL> 
21:37:13 SQL> SELECT
21:37:13   2  pair
21:37:13   3  ,COUNT(pair)
21:37:13   4  ,MIN(clse),MAX(clse)
21:37:13   5  ,MIN(avg6),MAX(avg6)
21:37:13   6  ,MIN(ydate),MAX(ydate)
21:37:13   7  FROM svm6102
21:37:13   8  GROUP BY pair
21:37:13   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_jpy       19026    81.0225	   84.485 81.1881201 84.2846918 2010-12-03 21:40:00 2011-03-08 21:15:00

Elapsed: 00:00:00.88
21:37:14 SQL> 
21:37:14 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
21:37:14 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.35
21:37:14 SQL> CREATE TABLE svm6122 COMPRESS AS
21:37:14   2  SELECT
21:37:14   3  pair
21:37:14   4  ,ydate
21:37:14   5  ,prdate
21:37:14   6  ,clse
21:37:14   7  -- g6 is important. I want to predict g6:
21:37:14   8  ,(ld6 - clse)/clse g6
21:37:14   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
21:37:14  10  -- I want more attributes from the ones I derived above:
21:37:14  11  -- clse relation to moving-min
21:37:14  12  ,clse-min4  cm4
21:37:14  13  ,clse-min6  cm6
21:37:14  14  ,clse-min8  cm8
21:37:14  15  ,clse-min10 cm10
21:37:14  16  ,clse-min12 cm12
21:37:14  17  ,clse-min14 cm14
21:37:14  18  ,clse-min16 cm16
21:37:14  19  ,clse-min18 cm18
21:37:14  20  -- clse relation to moving-avg
21:37:14  21  ,clse-avg4  ca4
21:37:14  22  ,clse-avg6  ca6
21:37:14  23  ,clse-avg8  ca8
21:37:14  24  ,clse-avg10 ca10
21:37:14  25  ,clse-avg12 ca12
21:37:14  26  ,clse-avg14 ca14
21:37:14  27  ,clse-avg16 ca16
21:37:14  28  ,clse-avg18 ca18
21:37:14  29  -- clse relation to moving-max
21:37:14  30  ,clse-max4  cx4
21:37:14  31  ,clse-max6  cx6
21:37:14  32  ,clse-max8  cx8
21:37:14  33  ,clse-max10 cx10
21:37:14  34  ,clse-max12 cx12
21:37:14  35  ,clse-max14 cx14
21:37:14  36  ,clse-max16 cx16
21:37:14  37  ,clse-max18 cx18
21:37:14  38  -- Derive more attributes.
21:37:14  39  -- I want to use CORR() here to help SVM see the shape of the series.
21:37:14  40  -- But COVAR_POP is more stable:
21:37:14  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
21:37:14  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
21:37:14  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
21:37:14  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
21:37:14  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
21:37:14  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
21:37:14  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
21:37:14  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
21:37:14  49  -- Derive date related attributes:
21:37:14  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
21:37:14  51  ,0+TO_CHAR(ydate,'D')d
21:37:14  52  ,0+TO_CHAR(ydate,'W')w
21:37:14  53  -- mpm stands for minutes-past-midnight:
21:37:14  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
21:37:14  55  -- mph stands for minutes-past-hour:
21:37:14  56  ,0+TO_CHAR(ydate,'MI')mph
21:37:14  57  FROM svm6102
21:37:14  58  WHERE clse > 0
21:37:14  59  ORDER BY ydate
21:37:14  60  /

Table created.

Elapsed: 00:00:02.19
21:37:17 SQL> 
21:37:17 SQL> -- rpt
21:37:17 SQL> 
21:37:17 SQL> SELECT
21:37:17   2  pair
21:37:17   3  ,COUNT(pair)
21:37:17   4  ,MIN(clse),MAX(clse)
21:37:17   5  ,MIN(ydate),MAX(ydate)
21:37:17   6  FROM svm6122
21:37:17   7  GROUP BY pair
21:37:17   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_jpy       19026    81.0225	   84.485 2010-12-03 21:40:00 2011-03-08 21:15:00

Elapsed: 00:00:00.05
21:37:17 SQL> 
21:37:17 SQL> -- Prepare for derivation of NTILE based params:
21:37:17 SQL> 
21:37:17 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.25
21:37:17 SQL> CREATE TABLE svm6142 COMPRESS AS
21:37:17   2  SELECT
21:37:17   3  pair
21:37:17   4  ,ydate
21:37:17   5  ,prdate
21:37:17   6  ,clse
21:37:17   7  ,g6
21:37:17   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
21:37:17   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
21:37:17  10  ,CASE WHEN trend IS NULL THEN 1
21:37:17  11  	    WHEN trend =0      THEN 1
21:37:17  12  	    ELSE trend END trend
21:37:17  13  ,cm4
21:37:17  14  ,cm6
21:37:17  15  ,cm8
21:37:17  16  ,cm10
21:37:17  17  ,cm12
21:37:17  18  ,cm14
21:37:17  19  ,cm16
21:37:17  20  ,cm18
21:37:17  21  --
21:37:17  22  ,ca4
21:37:17  23  ,ca6
21:37:17  24  ,ca8
21:37:17  25  ,ca10
21:37:17  26  ,ca12
21:37:17  27  ,ca14
21:37:17  28  ,ca16
21:37:17  29  ,ca18
21:37:17  30  --
21:37:17  31  ,cx4
21:37:17  32  ,cx6
21:37:17  33  ,cx8
21:37:17  34  ,cx10
21:37:17  35  ,cx12
21:37:17  36  ,cx14
21:37:17  37  ,cx16
21:37:17  38  ,cx18
21:37:17  39  --
21:37:17  40  ,crr4
21:37:17  41  ,crr6
21:37:17  42  ,crr8
21:37:17  43  ,crr10
21:37:17  44  ,crr12
21:37:17  45  ,crr14
21:37:17  46  ,crr16
21:37:17  47  ,crr18
21:37:17  48  --
21:37:17  49  ,hh
21:37:17  50  ,d
21:37:17  51  ,w
21:37:17  52  ,mpm
21:37:17  53  ,mph
21:37:17  54  FROM svm6122
21:37:17  55  ORDER BY ydate
21:37:17  56  /

Table created.

Elapsed: 00:00:00.71
21:37:18 SQL> 
21:37:18 SQL> -- rpt
21:37:18 SQL> 
21:37:18 SQL> SELECT
21:37:18   2  pair
21:37:18   3  ,trend
21:37:18   4  ,gatt
21:37:18   5  ,COUNT(pair)
21:37:18   6  ,AVG(g6)
21:37:18   7  FROM svm6142
21:37:18   8  GROUP BY pair,trend,gatt
21:37:18   9  ORDER BY pair,trend,gatt
21:37:18  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      7307 -.00104718
usd_jpy 	-1 up	      2560 .003009587
usd_jpy 	-1		14
usd_jpy 	 1 nup	      6654 -.00117567
usd_jpy 	 1 up	      2433 .003177174
usd_jpy 	 1		58

6 rows selected.

Elapsed: 00:00:00.05
21:37:18 SQL> 
21:37:18 SQL> 
21:37:18 SQL> -- Derive NTILE based params:
21:37:18 SQL> 
21:37:18 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.19
21:37:18 SQL> CREATE TABLE svm6162 COMPRESS AS
21:37:18   2  SELECT
21:37:18   3  pair
21:37:18   4  ,ydate
21:37:18   5  ,prdate
21:37:18   6  ,clse
21:37:18   7  ,g6
21:37:18   8  ,gatt
21:37:18   9  ,gattn
21:37:18  10  ,trend
21:37:18  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
21:37:18  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
21:37:18  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
21:37:18  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
21:37:18  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
21:37:18  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
21:37:18  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
21:37:18  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
21:37:18  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
21:37:18  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
21:37:18  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
21:37:18  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
21:37:18  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
21:37:18  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
21:37:18  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
21:37:18  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
21:37:18  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
21:37:18  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
21:37:18  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
21:37:18  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
21:37:18  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
21:37:18  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
21:37:18  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
21:37:18  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
21:37:18  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
21:37:18  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
21:37:18  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
21:37:18  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
21:37:18  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
21:37:18  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
21:37:18  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
21:37:18  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
21:37:18  43  ,hh  att32
21:37:18  44  ,d   att33
21:37:18  45  ,w   att34
21:37:18  46  ,mpm att35
21:37:18  47  ,mph att36
21:37:18  48  ,trend att37
21:37:18  49  FROM svm6142
21:37:18  50  ORDER BY ydate
21:37:18  51  /

Table created.

Elapsed: 00:00:04.86
21:37:23 SQL> 
21:37:23 SQL> -- rpt
21:37:23 SQL> 
21:37:23 SQL> SELECT
21:37:23   2  pair
21:37:23   3  ,trend
21:37:23   4  ,gatt
21:37:23   5  ,COUNT(pair)
21:37:23   6  ,AVG(g6)
21:37:23   7  FROM svm6162
21:37:23   8  GROUP BY pair,trend,gatt
21:37:23   9  ORDER BY pair,trend,gatt
21:37:23  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      7307 -.00104718
usd_jpy 	-1 up	      2560 .003009587
usd_jpy 	-1		14
usd_jpy 	 1 nup	      6654 -.00117567
usd_jpy 	 1 up	      2433 .003177174
usd_jpy 	 1		58

6 rows selected.

Elapsed: 00:00:00.02
21:37:23 SQL> 
21:37:23 SQL> -- I comment out sections related to score-feedback.
21:37:23 SQL> -- I tested score-feeback and it hurts results:
21:37:23 SQL> 
21:37:23 SQL> -- CREATE OR REPLACE VIEW sc12 AS
21:37:23 SQL> -- SELECT
21:37:23 SQL> -- m.pair
21:37:23 SQL> -- ,m.ydate
21:37:23 SQL> -- ,m.prdate
21:37:23 SQL> -- ,l.score score_long
21:37:23 SQL> -- ,s.score score_short
21:37:23 SQL> -- ,m.g6
21:37:23 SQL> -- FROM svm62scores l,svm62scores s,svm6162 m
21:37:23 SQL> -- WHERE l.targ='gatt'
21:37:23 SQL> -- AND	 s.targ='gattn'
21:37:23 SQL> -- AND l.prdate = s.prdate
21:37:23 SQL> -- AND l.prdate = m.prdate
21:37:23 SQL> -- -- Speed things up:
21:37:23 SQL> -- AND l.pair = '&1'
21:37:23 SQL> -- AND s.pair = '&1'
21:37:23 SQL> -- /
21:37:23 SQL> --
21:37:23 SQL> -- DROP TABLE score_corr;
21:37:23 SQL> --
21:37:23 SQL> -- CREATE TABLE score_corr COMPRESS AS
21:37:23 SQL> -- SELECT
21:37:23 SQL> -- pair
21:37:23 SQL> -- -- ,ydate
21:37:23 SQL> -- ,prdate
21:37:23 SQL> -- -- Find corr() tween score and g6 over 2 day period:
21:37:23 SQL> -- ,CORR((score_long - score_short),g6)
21:37:23 SQL> --   OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 2*24*60/5 PRECEDING AND CURRENT ROW)sc_corr
21:37:23 SQL> -- FROM sc12
21:37:23 SQL> -- /
21:37:23 SQL> 
21:37:23 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.28
21:37:23 SQL> 
21:37:23 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.29
21:37:23 SQL> 
21:37:23 SQL> CREATE TABLE modsrc COMPRESS AS
21:37:23   2  SELECT
21:37:23   3  pair
21:37:23   4  ,ydate
21:37:23   5  ,prdate
21:37:23   6  ,trend
21:37:23   7  ,g6
21:37:23   8  ,gatt
21:37:23   9  ,gattn
21:37:23  10  ,SUM(g6)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g00
21:37:23  11  ,SUM(g6)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g01
21:37:23  12  ,SUM(g6)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g02
21:37:23  13  ,SUM(g6)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g03
21:37:23  14  ,SUM(g6)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g04
21:37:23  15  ,SUM(g6)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g05
21:37:23  16  ,SUM(g6)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g06
21:37:23  17  ,SUM(g6)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g07
21:37:23  18  ,SUM(g6)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g08
21:37:23  19  ,SUM(g6)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g09
21:37:23  20  ,SUM(g6)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g10
21:37:23  21  ,SUM(g6)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g11
21:37:23  22  ,SUM(g6)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g12
21:37:23  23  ,SUM(g6)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g13
21:37:23  24  ,SUM(g6)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g14
21:37:23  25  ,SUM(g6)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g15
21:37:23  26  ,SUM(g6)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g16
21:37:23  27  ,SUM(g6)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g17
21:37:23  28  ,SUM(g6)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g18
21:37:23  29  ,SUM(g6)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g19
21:37:23  30  ,SUM(g6)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g20
21:37:23  31  ,SUM(g6)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g21
21:37:23  32  ,SUM(g6)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g22
21:37:23  33  ,SUM(g6)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g23
21:37:23  34  ,SUM(g6)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g24
21:37:23  35  ,SUM(g6)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g25
21:37:23  36  ,SUM(g6)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g26
21:37:23  37  ,SUM(g6)OVER(PARTITION BY trend,att27 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g27
21:37:23  38  ,SUM(g6)OVER(PARTITION BY trend,att28 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g28
21:37:23  39  ,SUM(g6)OVER(PARTITION BY trend,att29 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g29
21:37:23  40  ,SUM(g6)OVER(PARTITION BY trend,att30 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g30
21:37:23  41  ,SUM(g6)OVER(PARTITION BY trend,att31 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g31
21:37:23  42  ,SUM(g6)OVER(PARTITION BY trend,att32 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g32
21:37:23  43  ,SUM(g6)OVER(PARTITION BY trend,att33 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g33
21:37:23  44  ,SUM(g6)OVER(PARTITION BY trend,att34 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g34
21:37:23  45  ,SUM(g6)OVER(PARTITION BY trend,att35 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g35
21:37:23  46  ,SUM(g6)OVER(PARTITION BY trend,att36 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g36
21:37:23  47  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g37
21:37:23  48  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*40 PRECEDING AND CURRENT ROW)g38
21:37:23  49  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*30 PRECEDING AND CURRENT ROW)g39
21:37:23  50  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)g40
21:37:23  51  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)g41
21:37:23  52  FROM svm6162
21:37:23  53  /

Table created.

Elapsed: 00:00:06.46
21:37:30 SQL> 
21:37:30 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:02.67
21:37:32 SQL> 
21:37:32 SQL> -- rpt
21:37:32 SQL> 
21:37:32 SQL> SELECT
21:37:32   2  pair
21:37:32   3  ,trend
21:37:32   4  ,gatt
21:37:32   5  ,COUNT(pair)
21:37:32   6  ,AVG(g6)
21:37:32   7  FROM modsrc
21:37:32   8  GROUP BY pair,trend,gatt
21:37:32   9  ORDER BY pair,trend,gatt
21:37:32  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      7307 -.00104718
usd_jpy 	-1 up	      2560 .003009587
usd_jpy 	-1		14
usd_jpy 	 1 nup	      6654 -.00117567
usd_jpy 	 1 up	      2433 .003177174
usd_jpy 	 1		58

6 rows selected.

Elapsed: 00:00:00.02
21:37:32 SQL> 
21:37:32 SQL> 
21:37:32 SQL> SELECT pair,COUNT(pair)FROM svm6102 GROUP BY pair;

PAIR	COUNT(PAIR)
------- -----------
usd_jpy       19026

Elapsed: 00:00:00.82
21:37:33 SQL> 
21:37:33 SQL> SELECT pair,COUNT(pair)FROM modsrc GROUP BY pair;

PAIR	COUNT(PAIR)
------- -----------
usd_jpy       19026

Elapsed: 00:00:00.01
21:37:33 SQL> 
21:37:33 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
