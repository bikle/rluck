
SQL*Plus: Release 11.2.0.1.0 Production on Sat Jan 8 07:49:27 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

07:49:27 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
07:49:27 SQL> 07:49:27 SQL> --
07:49:27 SQL> -- pair10.sql
07:49:27 SQL> --
07:49:27 SQL> 
07:49:27 SQL> -- Creates views and tables needed by SVM.
07:49:27 SQL> 
07:49:27 SQL> 
07:49:27 SQL> CREATE OR REPLACE VIEW svm6102 AS
07:49:27   2  SELECT
07:49:27   3  pair
07:49:27   4  ,ydate
07:49:27   5  ,prdate
07:49:27   6  ,rownum rnum -- acts as t in my time-series
07:49:27   7  ,clse
07:49:27   8  -- Derive a bunch of attributes from clse, the latest price:
07:49:27   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
07:49:27  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
07:49:27  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
07:49:27  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
07:49:27  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
07:49:27  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
07:49:27  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
07:49:27  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
07:49:27  17  --
07:49:27  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
07:49:27  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
07:49:27  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
07:49:27  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
07:49:27  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
07:49:27  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
07:49:27  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
07:49:27  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
07:49:27  26  --
07:49:27  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
07:49:27  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
07:49:27  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
07:49:27  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
07:49:27  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
07:49:27  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
07:49:27  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
07:49:27  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
07:49:27  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
07:49:27  36  FROM di5min WHERE pair = '&1'
07:49:27  37  AND ydate > sysdate - 95
07:49:27  38  ORDER BY ydate
07:49:27  39  /
old  36: FROM di5min WHERE pair = '&1'
new  36: FROM di5min WHERE pair = 'aud_usd'

View created.

Elapsed: 00:00:00.04
07:49:27 SQL> 
07:49:27 SQL> -- rpt
07:49:27 SQL> 
07:49:27 SQL> SELECT
07:49:27   2  pair
07:49:27   3  ,COUNT(pair)
07:49:27   4  ,MIN(clse),MAX(clse)
07:49:27   5  ,MIN(avg6),MAX(avg6)
07:49:27   6  ,MIN(ydate),MAX(ydate)
07:49:27   7  FROM svm6102
07:49:27   8  GROUP BY pair
07:49:27   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
aud_usd       19690	.95405	  1.02495 .957141438 1.02284247 2010-10-05 07:50:01 2011-01-07 21:55:00

Elapsed: 00:00:00.87
07:49:28 SQL> 
07:49:28 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
07:49:28 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.28
07:49:28 SQL> CREATE TABLE svm6122 COMPRESS AS
07:49:28   2  SELECT
07:49:28   3  pair
07:49:28   4  ,ydate
07:49:28   5  ,prdate
07:49:28   6  ,clse
07:49:28   7  -- g6 is important. I want to predict g6:
07:49:28   8  ,ld6 - clse g6
07:49:28   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
07:49:28  10  -- I want more attributes from the ones I derived above:
07:49:28  11  -- clse relation to moving-min
07:49:28  12  ,clse-min4  cm4
07:49:28  13  ,clse-min6  cm6
07:49:28  14  ,clse-min8  cm8
07:49:28  15  ,clse-min10 cm10
07:49:28  16  ,clse-min12 cm12
07:49:28  17  ,clse-min14 cm14
07:49:28  18  ,clse-min16 cm16
07:49:28  19  ,clse-min18 cm18
07:49:28  20  -- clse relation to moving-avg
07:49:28  21  ,clse-avg4  ca4
07:49:28  22  ,clse-avg6  ca6
07:49:28  23  ,clse-avg8  ca8
07:49:28  24  ,clse-avg10 ca10
07:49:28  25  ,clse-avg12 ca12
07:49:28  26  ,clse-avg14 ca14
07:49:28  27  ,clse-avg16 ca16
07:49:28  28  ,clse-avg18 ca18
07:49:28  29  -- clse relation to moving-max
07:49:28  30  ,clse-max4  cx4
07:49:28  31  ,clse-max6  cx6
07:49:28  32  ,clse-max8  cx8
07:49:28  33  ,clse-max10 cx10
07:49:28  34  ,clse-max12 cx12
07:49:28  35  ,clse-max14 cx14
07:49:28  36  ,clse-max16 cx16
07:49:28  37  ,clse-max18 cx18
07:49:28  38  -- Derive more attributes.
07:49:28  39  -- I want to use CORR() here to help SVM see the shape of the series.
07:49:28  40  -- But COVAR_POP is more stable:
07:49:28  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
07:49:28  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
07:49:28  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
07:49:28  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
07:49:28  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
07:49:28  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
07:49:28  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
07:49:28  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
07:49:28  49  -- Derive date related attributes:
07:49:28  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
07:49:28  51  ,0+TO_CHAR(ydate,'D')d
07:49:28  52  ,0+TO_CHAR(ydate,'W')w
07:49:28  53  -- mpm stands for minutes-past-midnight:
07:49:28  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
07:49:28  55  -- mph stands for minutes-past-hour:
07:49:28  56  ,0+TO_CHAR(ydate,'MI')mph
07:49:28  57  FROM svm6102
07:49:28  58  ORDER BY ydate
07:49:28  59  /

Table created.

Elapsed: 00:00:02.35
07:49:31 SQL> 
07:49:31 SQL> -- rpt
07:49:31 SQL> 
07:49:31 SQL> SELECT
07:49:31   2  pair
07:49:31   3  ,COUNT(pair)
07:49:31   4  ,MIN(clse),MAX(clse)
07:49:31   5  ,MIN(ydate),MAX(ydate)
07:49:31   6  FROM svm6122
07:49:31   7  GROUP BY pair
07:49:31   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
aud_usd       19690	.95405	  1.02495 2010-10-05 07:50:01 2011-01-07 21:55:00

Elapsed: 00:00:00.04
07:49:31 SQL> 
07:49:31 SQL> -- Prepare for derivation of NTILE based params:
07:49:31 SQL> 
07:49:31 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.28
07:49:31 SQL> CREATE TABLE svm6142 COMPRESS AS
07:49:31   2  SELECT
07:49:31   3  pair
07:49:31   4  ,ydate
07:49:31   5  ,prdate
07:49:31   6  ,clse
07:49:31   7  ,g6
07:49:31   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
07:49:31   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
07:49:31  10  ,CASE WHEN trend IS NULL THEN 1
07:49:31  11  	    WHEN trend =0      THEN 1
07:49:31  12  	    ELSE trend END trend
07:49:31  13  ,cm4
07:49:31  14  ,cm6
07:49:31  15  ,cm8
07:49:31  16  ,cm10
07:49:31  17  ,cm12
07:49:31  18  ,cm14
07:49:31  19  ,cm16
07:49:31  20  ,cm18
07:49:31  21  --
07:49:31  22  ,ca4
07:49:31  23  ,ca6
07:49:31  24  ,ca8
07:49:31  25  ,ca10
07:49:31  26  ,ca12
07:49:31  27  ,ca14
07:49:31  28  ,ca16
07:49:31  29  ,ca18
07:49:31  30  --
07:49:31  31  ,cx4
07:49:31  32  ,cx6
07:49:31  33  ,cx8
07:49:31  34  ,cx10
07:49:31  35  ,cx12
07:49:31  36  ,cx14
07:49:31  37  ,cx16
07:49:31  38  ,cx18
07:49:31  39  --
07:49:31  40  ,crr4
07:49:31  41  ,crr6
07:49:31  42  ,crr8
07:49:31  43  ,crr10
07:49:31  44  ,crr12
07:49:31  45  ,crr14
07:49:31  46  ,crr16
07:49:31  47  ,crr18
07:49:31  48  --
07:49:31  49  ,hh
07:49:31  50  ,d
07:49:31  51  ,w
07:49:31  52  ,mpm
07:49:31  53  ,mph
07:49:31  54  FROM svm6122
07:49:31  55  ORDER BY ydate
07:49:31  56  /

Table created.

Elapsed: 00:00:00.39
07:49:31 SQL> 
07:49:31 SQL> -- rpt
07:49:31 SQL> 
07:49:31 SQL> SELECT
07:49:31   2  pair
07:49:31   3  ,trend
07:49:31   4  ,gatt
07:49:31   5  ,COUNT(pair)
07:49:31   6  ,AVG(g6)
07:49:31   7  FROM svm6142
07:49:31   8  GROUP BY pair,trend,gatt
07:49:31   9  ORDER BY pair,trend,gatt
07:49:31  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5645 -.00211518
aud_usd 	-1 up	      3688 .003755559
aud_usd 	-1		29
aud_usd 	 1 nup	      6683 -.00210065
aud_usd 	 1 up	      3602 .004055035
aud_usd 	 1		43

6 rows selected.

Elapsed: 00:00:00.04
07:49:31 SQL> 
07:49:31 SQL> 
07:49:31 SQL> -- Derive NTILE based params:
07:49:31 SQL> 
07:49:31 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.15
07:49:32 SQL> CREATE TABLE svm6162 COMPRESS AS
07:49:32   2  SELECT
07:49:32   3  pair
07:49:32   4  ,ydate
07:49:32   5  ,prdate
07:49:32   6  ,clse
07:49:32   7  ,g6
07:49:32   8  ,gatt
07:49:32   9  ,gattn
07:49:32  10  ,trend
07:49:32  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
07:49:32  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
07:49:32  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
07:49:32  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
07:49:32  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
07:49:32  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
07:49:32  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
07:49:32  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
07:49:32  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
07:49:32  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
07:49:32  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
07:49:32  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
07:49:32  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
07:49:32  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
07:49:32  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
07:49:32  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
07:49:32  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
07:49:32  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
07:49:32  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
07:49:32  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
07:49:32  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
07:49:32  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
07:49:32  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
07:49:32  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
07:49:32  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
07:49:32  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
07:49:32  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
07:49:32  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
07:49:32  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
07:49:32  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
07:49:32  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
07:49:32  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
07:49:32  43  ,hh  att32
07:49:32  44  ,d   att33
07:49:32  45  ,w   att34
07:49:32  46  ,mpm att35
07:49:32  47  ,mph att36
07:49:32  48  ,trend att37
07:49:32  49  FROM svm6142
07:49:32  50  ORDER BY ydate
07:49:32  51  /

Table created.

Elapsed: 00:00:04.89
07:49:37 SQL> 
07:49:37 SQL> -- rpt
07:49:37 SQL> 
07:49:37 SQL> SELECT
07:49:37   2  pair
07:49:37   3  ,trend
07:49:37   4  ,gatt
07:49:37   5  ,COUNT(pair)
07:49:37   6  ,AVG(g6)
07:49:37   7  FROM svm6162
07:49:37   8  GROUP BY pair,trend,gatt
07:49:37   9  ORDER BY pair,trend,gatt
07:49:37  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5645 -.00211518
aud_usd 	-1 up	      3688 .003755559
aud_usd 	-1		29
aud_usd 	 1 nup	      6683 -.00210065
aud_usd 	 1 up	      3602 .004055035
aud_usd 	 1		43

6 rows selected.

Elapsed: 00:00:00.02
07:49:37 SQL> 
07:49:37 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.22
07:49:37 SQL> 
07:49:37 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.37
07:49:37 SQL> 
07:49:37 SQL> CREATE TABLE modsrc COMPRESS AS
07:49:37   2  SELECT
07:49:37   3  pair
07:49:37   4  ,ydate
07:49:37   5  ,prdate
07:49:37   6  ,trend
07:49:37   7  ,g6
07:49:37   8  ,gatt
07:49:37   9  ,gattn
07:49:37  10  ,SUM(g6)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g00
07:49:37  11  ,SUM(g6)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g01
07:49:37  12  ,SUM(g6)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g02
07:49:37  13  ,SUM(g6)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g03
07:49:37  14  ,SUM(g6)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g04
07:49:37  15  ,SUM(g6)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g05
07:49:37  16  ,SUM(g6)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g06
07:49:37  17  ,SUM(g6)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g07
07:49:37  18  ,SUM(g6)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g08
07:49:37  19  ,SUM(g6)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g09
07:49:37  20  ,SUM(g6)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g10
07:49:37  21  ,SUM(g6)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g11
07:49:37  22  ,SUM(g6)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g12
07:49:37  23  ,SUM(g6)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g13
07:49:37  24  ,SUM(g6)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g14
07:49:37  25  ,SUM(g6)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g15
07:49:37  26  ,SUM(g6)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g16
07:49:37  27  ,SUM(g6)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g17
07:49:37  28  ,SUM(g6)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g18
07:49:37  29  ,SUM(g6)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g19
07:49:37  30  ,SUM(g6)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g20
07:49:37  31  ,SUM(g6)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g21
07:49:37  32  ,SUM(g6)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g22
07:49:37  33  ,SUM(g6)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g23
07:49:37  34  ,SUM(g6)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g24
07:49:37  35  ,SUM(g6)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g25
07:49:37  36  ,SUM(g6)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g26
07:49:37  37  ,SUM(g6)OVER(PARTITION BY trend,att27 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g27
07:49:37  38  ,SUM(g6)OVER(PARTITION BY trend,att28 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g28
07:49:37  39  ,SUM(g6)OVER(PARTITION BY trend,att29 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g29
07:49:37  40  ,SUM(g6)OVER(PARTITION BY trend,att30 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g30
07:49:37  41  ,SUM(g6)OVER(PARTITION BY trend,att31 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g31
07:49:37  42  ,SUM(g6)OVER(PARTITION BY trend,att32 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g32
07:49:37  43  ,SUM(g6)OVER(PARTITION BY trend,att33 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g33
07:49:37  44  ,SUM(g6)OVER(PARTITION BY trend,att34 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g34
07:49:37  45  ,SUM(g6)OVER(PARTITION BY trend,att35 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g35
07:49:37  46  ,SUM(g6)OVER(PARTITION BY trend,att36 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g36
07:49:37  47  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g37
07:49:37  48  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*40 PRECEDING AND CURRENT ROW)g38
07:49:37  49  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*30 PRECEDING AND CURRENT ROW)g39
07:49:37  50  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)g40
07:49:37  51  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)g41
07:49:37  52  FROM svm6162
07:49:37  53  /

Table created.

Elapsed: 00:00:05.60
07:49:43 SQL> 
07:49:43 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:01.90
07:49:45 SQL> 
07:49:45 SQL> -- rpt
07:49:45 SQL> 
07:49:45 SQL> SELECT
07:49:45   2  pair
07:49:45   3  ,trend
07:49:45   4  ,gatt
07:49:45   5  ,COUNT(pair)
07:49:45   6  ,AVG(g6)
07:49:45   7  FROM modsrc
07:49:45   8  GROUP BY pair,trend,gatt
07:49:45   9  ORDER BY pair,trend,gatt
07:49:45  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5645 -.00211518
aud_usd 	-1 up	      3688 .003755559
aud_usd 	-1		29
aud_usd 	 1 nup	      6683 -.00210065
aud_usd 	 1 up	      3602 .004055035
aud_usd 	 1		43

6 rows selected.

Elapsed: 00:00:00.02
07:49:45 SQL> 
07:49:45 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
