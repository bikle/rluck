
SQL*Plus: Release 11.2.0.1.0 Production on Thu Feb 3 19:45:51 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

19:45:52 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
19:45:52 SQL> 19:45:52 SQL> --
19:45:52 SQL> -- pair10.sql
19:45:52 SQL> --
19:45:52 SQL> 
19:45:52 SQL> -- Creates views and tables needed by SVM.
19:45:52 SQL> 
19:45:52 SQL> 
19:45:52 SQL> CREATE OR REPLACE VIEW svm6102 AS
19:45:52   2  SELECT
19:45:52   3  pair
19:45:52   4  ,ydate
19:45:52   5  ,prdate
19:45:52   6  ,rownum rnum -- acts as t in my time-series
19:45:52   7  ,clse
19:45:52   8  -- Derive a bunch of attributes from clse, the latest price:
19:45:52   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
19:45:52  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
19:45:52  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
19:45:52  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
19:45:52  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
19:45:52  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
19:45:52  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
19:45:52  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
19:45:52  17  --
19:45:52  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
19:45:52  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
19:45:52  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
19:45:52  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
19:45:52  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
19:45:52  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
19:45:52  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
19:45:52  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
19:45:52  26  --
19:45:52  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
19:45:52  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
19:45:52  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
19:45:52  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
19:45:52  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
19:45:52  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
19:45:52  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
19:45:52  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
19:45:52  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
19:45:52  36  FROM di5min WHERE pair = '&1'
19:45:52  37  AND ydate > sysdate - 95
19:45:52  38  ORDER BY ydate
19:45:52  39  /
old  36: FROM di5min WHERE pair = '&1'
new  36: FROM di5min WHERE pair = 'eur_gbp'

View created.

Elapsed: 00:00:00.09
19:45:52 SQL> 
19:45:52 SQL> -- rpt
19:45:52 SQL> 
19:45:52 SQL> SELECT
19:45:52   2  pair
19:45:52   3  ,COUNT(pair)
19:45:52   4  ,MIN(clse),MAX(clse)
19:45:52   5  ,MIN(avg6),MAX(avg6)
19:45:52   6  ,MIN(ydate),MAX(ydate)
19:45:52   7  FROM svm6102
19:45:52   8  GROUP BY pair
19:45:52   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_gbp       19682 .829062716 .881241482 .830048836 .878376317 2010-10-31 20:55:00 2011-02-03 19:05:00

Elapsed: 00:00:00.98
19:45:53 SQL> 
19:45:53 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
19:45:53 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.30
19:45:53 SQL> CREATE TABLE svm6122 COMPRESS AS
19:45:53   2  SELECT
19:45:53   3  pair
19:45:53   4  ,ydate
19:45:53   5  ,prdate
19:45:53   6  ,clse
19:45:53   7  -- g6 is important. I want to predict g6:
19:45:53   8  ,ld6 - clse g6
19:45:53   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
19:45:53  10  -- I want more attributes from the ones I derived above:
19:45:53  11  -- clse relation to moving-min
19:45:53  12  ,clse-min4  cm4
19:45:53  13  ,clse-min6  cm6
19:45:53  14  ,clse-min8  cm8
19:45:53  15  ,clse-min10 cm10
19:45:53  16  ,clse-min12 cm12
19:45:53  17  ,clse-min14 cm14
19:45:53  18  ,clse-min16 cm16
19:45:53  19  ,clse-min18 cm18
19:45:53  20  -- clse relation to moving-avg
19:45:53  21  ,clse-avg4  ca4
19:45:53  22  ,clse-avg6  ca6
19:45:53  23  ,clse-avg8  ca8
19:45:53  24  ,clse-avg10 ca10
19:45:53  25  ,clse-avg12 ca12
19:45:53  26  ,clse-avg14 ca14
19:45:53  27  ,clse-avg16 ca16
19:45:53  28  ,clse-avg18 ca18
19:45:53  29  -- clse relation to moving-max
19:45:53  30  ,clse-max4  cx4
19:45:53  31  ,clse-max6  cx6
19:45:53  32  ,clse-max8  cx8
19:45:53  33  ,clse-max10 cx10
19:45:53  34  ,clse-max12 cx12
19:45:53  35  ,clse-max14 cx14
19:45:53  36  ,clse-max16 cx16
19:45:53  37  ,clse-max18 cx18
19:45:53  38  -- Derive more attributes.
19:45:53  39  -- I want to use CORR() here to help SVM see the shape of the series.
19:45:53  40  -- But COVAR_POP is more stable:
19:45:53  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
19:45:53  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
19:45:53  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
19:45:53  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
19:45:53  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
19:45:53  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
19:45:53  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
19:45:53  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
19:45:53  49  -- Derive date related attributes:
19:45:53  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
19:45:53  51  ,0+TO_CHAR(ydate,'D')d
19:45:53  52  ,0+TO_CHAR(ydate,'W')w
19:45:53  53  -- mpm stands for minutes-past-midnight:
19:45:53  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
19:45:53  55  -- mph stands for minutes-past-hour:
19:45:53  56  ,0+TO_CHAR(ydate,'MI')mph
19:45:53  57  FROM svm6102
19:45:53  58  ORDER BY ydate
19:45:53  59  /

Table created.

Elapsed: 00:00:02.58
19:45:56 SQL> 
19:45:56 SQL> -- rpt
19:45:56 SQL> 
19:45:56 SQL> SELECT
19:45:56   2  pair
19:45:56   3  ,COUNT(pair)
19:45:56   4  ,MIN(clse),MAX(clse)
19:45:56   5  ,MIN(ydate),MAX(ydate)
19:45:56   6  FROM svm6122
19:45:56   7  GROUP BY pair
19:45:56   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_gbp       19682 .829062716 .881241482 2010-10-31 20:55:00 2011-02-03 19:05:00

Elapsed: 00:00:00.06
19:45:56 SQL> 
19:45:56 SQL> -- Prepare for derivation of NTILE based params:
19:45:56 SQL> 
19:45:56 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.28
19:45:56 SQL> CREATE TABLE svm6142 COMPRESS AS
19:45:56   2  SELECT
19:45:56   3  pair
19:45:56   4  ,ydate
19:45:56   5  ,prdate
19:45:56   6  ,clse
19:45:56   7  ,g6
19:45:56   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
19:45:56   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
19:45:56  10  ,CASE WHEN trend IS NULL THEN 1
19:45:56  11  	    WHEN trend =0      THEN 1
19:45:56  12  	    ELSE trend END trend
19:45:56  13  ,cm4
19:45:56  14  ,cm6
19:45:56  15  ,cm8
19:45:56  16  ,cm10
19:45:56  17  ,cm12
19:45:56  18  ,cm14
19:45:56  19  ,cm16
19:45:56  20  ,cm18
19:45:56  21  --
19:45:56  22  ,ca4
19:45:56  23  ,ca6
19:45:56  24  ,ca8
19:45:56  25  ,ca10
19:45:56  26  ,ca12
19:45:56  27  ,ca14
19:45:56  28  ,ca16
19:45:56  29  ,ca18
19:45:56  30  --
19:45:56  31  ,cx4
19:45:56  32  ,cx6
19:45:56  33  ,cx8
19:45:56  34  ,cx10
19:45:56  35  ,cx12
19:45:56  36  ,cx14
19:45:56  37  ,cx16
19:45:56  38  ,cx18
19:45:56  39  --
19:45:56  40  ,crr4
19:45:56  41  ,crr6
19:45:56  42  ,crr8
19:45:56  43  ,crr10
19:45:56  44  ,crr12
19:45:56  45  ,crr14
19:45:56  46  ,crr16
19:45:56  47  ,crr18
19:45:56  48  --
19:45:56  49  ,hh
19:45:56  50  ,d
19:45:56  51  ,w
19:45:56  52  ,mpm
19:45:56  53  ,mph
19:45:56  54  FROM svm6122
19:45:56  55  ORDER BY ydate
19:45:56  56  /

Table created.

Elapsed: 00:00:00.45
19:45:57 SQL> 
19:45:57 SQL> -- rpt
19:45:57 SQL> 
19:45:57 SQL> SELECT
19:45:57   2  pair
19:45:57   3  ,trend
19:45:57   4  ,gatt
19:45:57   5  ,COUNT(pair)
19:45:57   6  ,AVG(g6)
19:45:57   7  FROM svm6142
19:45:57   8  GROUP BY pair,trend,gatt
19:45:57   9  ORDER BY pair,trend,gatt
19:45:57  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_gbp 	-1 nup	      7686 -.00101948
eur_gbp 	-1 up	      2482 .002755832
eur_gbp 	-1		72
eur_gbp 	 1 nup	      6915 -.00122817
eur_gbp 	 1 up	      2527 .003028552

Elapsed: 00:00:00.05
19:45:57 SQL> 
19:45:57 SQL> 
19:45:57 SQL> -- Derive NTILE based params:
19:45:57 SQL> 
19:45:57 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:01.42
19:45:58 SQL> CREATE TABLE svm6162 COMPRESS AS
19:45:58   2  SELECT
19:45:58   3  pair
19:45:58   4  ,ydate
19:45:58   5  ,prdate
19:45:58   6  ,clse
19:45:58   7  ,g6
19:45:58   8  ,gatt
19:45:58   9  ,gattn
19:45:58  10  ,trend
19:45:58  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
19:45:58  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
19:45:58  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
19:45:58  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
19:45:58  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
19:45:58  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
19:45:58  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
19:45:58  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
19:45:58  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
19:45:58  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
19:45:58  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
19:45:58  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
19:45:58  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
19:45:58  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
19:45:58  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
19:45:58  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
19:45:58  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
19:45:58  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
19:45:58  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
19:45:58  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
19:45:58  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
19:45:58  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
19:45:58  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
19:45:58  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
19:45:58  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
19:45:58  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
19:45:58  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
19:45:58  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
19:45:58  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
19:45:58  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
19:45:58  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
19:45:58  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
19:45:58  43  ,hh  att32
19:45:58  44  ,d   att33
19:45:58  45  ,w   att34
19:45:58  46  ,mpm att35
19:45:58  47  ,mph att36
19:45:58  48  ,trend att37
19:45:58  49  FROM svm6142
19:45:58  50  ORDER BY ydate
19:45:58  51  /

Table created.

Elapsed: 00:00:05.71
19:46:04 SQL> 
19:46:04 SQL> -- rpt
19:46:04 SQL> 
19:46:04 SQL> SELECT
19:46:04   2  pair
19:46:04   3  ,trend
19:46:04   4  ,gatt
19:46:04   5  ,COUNT(pair)
19:46:04   6  ,AVG(g6)
19:46:04   7  FROM svm6162
19:46:04   8  GROUP BY pair,trend,gatt
19:46:04   9  ORDER BY pair,trend,gatt
19:46:04  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_gbp 	-1 nup	      7686 -.00101948
eur_gbp 	-1 up	      2482 .002755832
eur_gbp 	-1		72
eur_gbp 	 1 nup	      6915 -.00122817
eur_gbp 	 1 up	      2527 .003028552

Elapsed: 00:00:00.04
19:46:04 SQL> 
19:46:04 SQL> 
19:46:04 SQL> CREATE OR REPLACE VIEW sc12 AS
19:46:04   2  SELECT
19:46:04   3  m.pair
19:46:04   4  ,m.ydate
19:46:04   5  ,m.prdate
19:46:04   6  ,l.score score_long
19:46:04   7  ,s.score score_short
19:46:04   8  ,m.g6
19:46:04   9  FROM svm62scores l,svm62scores s,svm6162 m
19:46:04  10  WHERE l.targ='gatt'
19:46:04  11  AND   s.targ='gattn'
19:46:04  12  AND l.prdate = s.prdate
19:46:04  13  AND l.prdate = m.prdate
19:46:04  14  -- Speed things up:
19:46:04  15  AND l.pair = '&1'
19:46:04  16  AND s.pair = '&1'
19:46:04  17  /
old  15: AND l.pair = '&1'
new  15: AND l.pair = 'eur_gbp'
old  16: AND s.pair = '&1'
new  16: AND s.pair = 'eur_gbp'

View created.

Elapsed: 00:00:00.06
19:46:04 SQL> 
19:46:04 SQL> DROP TABLE score_corr;

Table dropped.

Elapsed: 00:00:00.34
19:46:04 SQL> 
19:46:04 SQL> CREATE TABLE score_corr COMPRESS AS
19:46:04   2  SELECT
19:46:04   3  pair
19:46:04   4  -- ,ydate
19:46:04   5  ,prdate
19:46:04   6  -- Find corr() tween score and g6 over 2 day period:
19:46:04   7  ,CORR((score_long - score_short),g6)
19:46:04   8  	OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 2*24*60/5 PRECEDING AND CURRENT ROW)sc_corr
19:46:04   9  FROM sc12
19:46:04  10  /

Table created.

Elapsed: 00:00:00.22
19:46:04 SQL> 
19:46:04 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.05
19:46:04 SQL> 
19:46:04 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.37
19:46:05 SQL> 
19:46:05 SQL> CREATE TABLE modsrc COMPRESS AS
19:46:05   2  SELECT
19:46:05   3  s.pair
19:46:05   4  ,ydate
19:46:05   5  ,s.prdate
19:46:05   6  ,trend
19:46:05   7  ,g6
19:46:05   8  ,gatt
19:46:05   9  ,gattn
19:46:05  10  ,SUM(g6)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g00
19:46:05  11  ,SUM(g6)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g01
19:46:05  12  ,SUM(g6)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g02
19:46:05  13  ,SUM(g6)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g03
19:46:05  14  ,SUM(g6)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g04
19:46:05  15  ,SUM(g6)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g05
19:46:05  16  ,SUM(g6)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g06
19:46:05  17  ,SUM(g6)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g07
19:46:05  18  ,SUM(g6)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g08
19:46:05  19  ,SUM(g6)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g09
19:46:05  20  ,SUM(g6)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g10
19:46:05  21  ,SUM(g6)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g11
19:46:05  22  ,SUM(g6)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g12
19:46:05  23  ,SUM(g6)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g13
19:46:05  24  ,SUM(g6)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g14
19:46:05  25  ,SUM(g6)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g15
19:46:05  26  ,SUM(g6)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g16
19:46:05  27  ,SUM(g6)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g17
19:46:05  28  ,SUM(g6)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g18
19:46:05  29  ,SUM(g6)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g19
19:46:05  30  ,SUM(g6)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g20
19:46:05  31  ,SUM(g6)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g21
19:46:05  32  ,SUM(g6)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g22
19:46:05  33  ,SUM(g6)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g23
19:46:05  34  ,SUM(g6)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g24
19:46:05  35  ,SUM(g6)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g25
19:46:05  36  ,SUM(g6)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g26
19:46:05  37  ,SUM(g6)OVER(PARTITION BY trend,att27 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g27
19:46:05  38  ,SUM(g6)OVER(PARTITION BY trend,att28 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g28
19:46:05  39  ,SUM(g6)OVER(PARTITION BY trend,att29 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g29
19:46:05  40  ,SUM(g6)OVER(PARTITION BY trend,att30 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g30
19:46:05  41  ,SUM(g6)OVER(PARTITION BY trend,att31 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g31
19:46:05  42  ,SUM(g6)OVER(PARTITION BY trend,att32 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g32
19:46:05  43  ,SUM(g6)OVER(PARTITION BY trend,att33 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g33
19:46:05  44  ,SUM(g6)OVER(PARTITION BY trend,att34 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g34
19:46:05  45  ,SUM(g6)OVER(PARTITION BY trend,att35 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g35
19:46:05  46  ,SUM(g6)OVER(PARTITION BY trend,att36 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g36
19:46:05  47  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g37
19:46:05  48  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*40 PRECEDING AND CURRENT ROW)g38
19:46:05  49  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*30 PRECEDING AND CURRENT ROW)g39
19:46:05  50  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)g40
19:46:05  51  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)g41
19:46:05  52  -- Recent CORR()tween scores and gains:
19:46:05  53  ,NVL(sc_corr,0)sc_corr
19:46:05  54  FROM svm6162 s,score_corr c
19:46:05  55  WHERE s.prdate = c.prdate(+)
19:46:05  56  /

Table created.

Elapsed: 00:00:06.92
19:46:12 SQL> 
19:46:12 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:03.97
19:46:16 SQL> 
19:46:16 SQL> -- rpt
19:46:16 SQL> 
19:46:16 SQL> SELECT
19:46:16   2  pair
19:46:16   3  ,trend
19:46:16   4  ,gatt
19:46:16   5  ,COUNT(pair)
19:46:16   6  ,AVG(g6)
19:46:16   7  FROM modsrc
19:46:16   8  GROUP BY pair,trend,gatt
19:46:16   9  ORDER BY pair,trend,gatt
19:46:16  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_gbp 	-1 nup	      7686 -.00101948
eur_gbp 	-1 up	      2482 .002755832
eur_gbp 	-1		72
eur_gbp 	 1 nup	      6915 -.00122817
eur_gbp 	 1 up	      2527 .003028552

Elapsed: 00:00:00.03
19:46:16 SQL> 
19:46:16 SQL> 
19:46:16 SQL> SELECT pair,COUNT(pair)FROM svm6102 GROUP BY pair;

PAIR	COUNT(PAIR)
------- -----------
eur_gbp       19682

Elapsed: 00:00:00.87
19:46:17 SQL> 
19:46:17 SQL> SELECT pair,COUNT(pair)FROM modsrc GROUP BY pair;

PAIR	COUNT(PAIR)
------- -----------
eur_gbp       19682

Elapsed: 00:00:00.01
19:46:17 SQL> 
19:46:17 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
