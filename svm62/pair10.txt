
SQL*Plus: Release 11.2.0.1.0 Production on Fri Feb 11 15:26:33 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

15:26:33 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
15:26:33 SQL> 15:26:33 SQL> --
15:26:33 SQL> -- pair10.sql
15:26:33 SQL> --
15:26:33 SQL> 
15:26:33 SQL> -- Creates views and tables needed by SVM.
15:26:33 SQL> 
15:26:33 SQL> 
15:26:33 SQL> CREATE OR REPLACE VIEW svm6102 AS
15:26:33   2  SELECT
15:26:33   3  pair
15:26:33   4  ,ydate
15:26:33   5  ,prdate
15:26:33   6  ,rownum rnum -- acts as t in my time-series
15:26:33   7  ,clse
15:26:33   8  -- Derive a bunch of attributes from clse, the latest price:
15:26:33   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
15:26:33  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
15:26:33  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
15:26:33  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
15:26:33  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
15:26:33  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
15:26:33  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
15:26:33  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
15:26:33  17  --
15:26:33  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
15:26:33  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
15:26:33  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
15:26:33  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
15:26:33  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
15:26:33  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
15:26:33  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
15:26:33  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
15:26:33  26  --
15:26:33  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
15:26:33  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
15:26:33  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
15:26:33  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
15:26:33  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
15:26:33  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
15:26:33  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
15:26:33  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
15:26:33  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
15:26:33  36  FROM di5min WHERE pair = '&1'
15:26:33  37  AND ydate > sysdate - 95
15:26:33  38  ORDER BY ydate
15:26:33  39  /
old  36: FROM di5min WHERE pair = '&1'
new  36: FROM di5min WHERE pair = 'eur_jpy'

View created.

Elapsed: 00:00:00.04
15:26:33 SQL> 
15:26:33 SQL> -- rpt
15:26:33 SQL> 
15:26:33 SQL> SELECT
15:26:33   2  pair
15:26:33   3  ,COUNT(pair)
15:26:33   4  ,MIN(clse),MAX(clse)
15:26:33   5  ,MIN(avg6),MAX(avg6)
15:26:33   6  ,MIN(ydate),MAX(ydate)
15:26:33   7  FROM svm6102
15:26:33   8  GROUP BY pair
15:26:33   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_jpy       19661 106.906797 114.875523 107.120556   114.7435 2010-11-08 15:30:00 2011-02-11 15:00:00

Elapsed: 00:00:00.83
15:26:34 SQL> 
15:26:34 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
15:26:34 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.25
15:26:34 SQL> CREATE TABLE svm6122 COMPRESS AS
15:26:34   2  SELECT
15:26:34   3  pair
15:26:34   4  ,ydate
15:26:34   5  ,prdate
15:26:34   6  ,clse
15:26:34   7  -- g6 is important. I want to predict g6:
15:26:34   8  ,ld6 - clse g6
15:26:34   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
15:26:34  10  -- I want more attributes from the ones I derived above:
15:26:34  11  -- clse relation to moving-min
15:26:34  12  ,clse-min4  cm4
15:26:34  13  ,clse-min6  cm6
15:26:34  14  ,clse-min8  cm8
15:26:34  15  ,clse-min10 cm10
15:26:34  16  ,clse-min12 cm12
15:26:34  17  ,clse-min14 cm14
15:26:34  18  ,clse-min16 cm16
15:26:34  19  ,clse-min18 cm18
15:26:34  20  -- clse relation to moving-avg
15:26:34  21  ,clse-avg4  ca4
15:26:34  22  ,clse-avg6  ca6
15:26:34  23  ,clse-avg8  ca8
15:26:34  24  ,clse-avg10 ca10
15:26:34  25  ,clse-avg12 ca12
15:26:34  26  ,clse-avg14 ca14
15:26:34  27  ,clse-avg16 ca16
15:26:34  28  ,clse-avg18 ca18
15:26:34  29  -- clse relation to moving-max
15:26:34  30  ,clse-max4  cx4
15:26:34  31  ,clse-max6  cx6
15:26:34  32  ,clse-max8  cx8
15:26:34  33  ,clse-max10 cx10
15:26:34  34  ,clse-max12 cx12
15:26:34  35  ,clse-max14 cx14
15:26:34  36  ,clse-max16 cx16
15:26:34  37  ,clse-max18 cx18
15:26:34  38  -- Derive more attributes.
15:26:34  39  -- I want to use CORR() here to help SVM see the shape of the series.
15:26:34  40  -- But COVAR_POP is more stable:
15:26:34  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
15:26:34  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
15:26:34  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
15:26:34  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
15:26:34  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
15:26:34  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
15:26:34  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
15:26:34  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
15:26:34  49  -- Derive date related attributes:
15:26:34  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
15:26:34  51  ,0+TO_CHAR(ydate,'D')d
15:26:34  52  ,0+TO_CHAR(ydate,'W')w
15:26:34  53  -- mpm stands for minutes-past-midnight:
15:26:34  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
15:26:34  55  -- mph stands for minutes-past-hour:
15:26:34  56  ,0+TO_CHAR(ydate,'MI')mph
15:26:34  57  FROM svm6102
15:26:34  58  ORDER BY ydate
15:26:34  59  /

Table created.

Elapsed: 00:00:02.30
15:26:36 SQL> 
15:26:36 SQL> -- rpt
15:26:36 SQL> 
15:26:36 SQL> SELECT
15:26:36   2  pair
15:26:36   3  ,COUNT(pair)
15:26:36   4  ,MIN(clse),MAX(clse)
15:26:36   5  ,MIN(ydate),MAX(ydate)
15:26:36   6  FROM svm6122
15:26:36   7  GROUP BY pair
15:26:36   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_jpy       19661 106.906797 114.875523 2010-11-08 15:30:00 2011-02-11 15:00:00

Elapsed: 00:00:00.04
15:26:36 SQL> 
15:26:36 SQL> -- Prepare for derivation of NTILE based params:
15:26:36 SQL> 
15:26:36 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.04
15:26:36 SQL> CREATE TABLE svm6142 COMPRESS AS
15:26:36   2  SELECT
15:26:36   3  pair
15:26:36   4  ,ydate
15:26:36   5  ,prdate
15:26:36   6  ,clse
15:26:36   7  ,g6
15:26:36   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
15:26:36   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
15:26:36  10  ,CASE WHEN trend IS NULL THEN 1
15:26:36  11  	    WHEN trend =0      THEN 1
15:26:36  12  	    ELSE trend END trend
15:26:36  13  ,cm4
15:26:36  14  ,cm6
15:26:36  15  ,cm8
15:26:36  16  ,cm10
15:26:36  17  ,cm12
15:26:36  18  ,cm14
15:26:36  19  ,cm16
15:26:36  20  ,cm18
15:26:36  21  --
15:26:36  22  ,ca4
15:26:36  23  ,ca6
15:26:36  24  ,ca8
15:26:36  25  ,ca10
15:26:36  26  ,ca12
15:26:36  27  ,ca14
15:26:36  28  ,ca16
15:26:36  29  ,ca18
15:26:36  30  --
15:26:36  31  ,cx4
15:26:36  32  ,cx6
15:26:36  33  ,cx8
15:26:36  34  ,cx10
15:26:36  35  ,cx12
15:26:36  36  ,cx14
15:26:36  37  ,cx16
15:26:36  38  ,cx18
15:26:36  39  --
15:26:36  40  ,crr4
15:26:36  41  ,crr6
15:26:36  42  ,crr8
15:26:36  43  ,crr10
15:26:36  44  ,crr12
15:26:36  45  ,crr14
15:26:36  46  ,crr16
15:26:36  47  ,crr18
15:26:36  48  --
15:26:36  49  ,hh
15:26:36  50  ,d
15:26:36  51  ,w
15:26:36  52  ,mpm
15:26:36  53  ,mph
15:26:36  54  FROM svm6122
15:26:36  55  ORDER BY ydate
15:26:36  56  /

Table created.

Elapsed: 00:00:00.41
15:26:37 SQL> 
15:26:37 SQL> -- rpt
15:26:37 SQL> 
15:26:37 SQL> SELECT
15:26:37   2  pair
15:26:37   3  ,trend
15:26:37   4  ,gatt
15:26:37   5  ,COUNT(pair)
15:26:37   6  ,AVG(g6)
15:26:37   7  FROM svm6142
15:26:37   8  GROUP BY pair,trend,gatt
15:26:37   9  ORDER BY pair,trend,gatt
15:26:37  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_jpy 	-1 nup	      4302 -.33169335
eur_jpy 	-1 up	      4905 .269421446
eur_jpy 	-1		72
eur_jpy 	 1 nup	      5017 -.27034767
eur_jpy 	 1 up	      5365 .271819814

Elapsed: 00:00:00.04
15:26:37 SQL> 
15:26:37 SQL> 
15:26:37 SQL> -- Derive NTILE based params:
15:26:37 SQL> 
15:26:37 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.15
15:26:37 SQL> CREATE TABLE svm6162 COMPRESS AS
15:26:37   2  SELECT
15:26:37   3  pair
15:26:37   4  ,ydate
15:26:37   5  ,prdate
15:26:37   6  ,clse
15:26:37   7  ,g6
15:26:37   8  ,gatt
15:26:37   9  ,gattn
15:26:37  10  ,trend
15:26:37  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
15:26:37  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
15:26:37  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
15:26:37  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
15:26:37  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
15:26:37  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
15:26:37  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
15:26:37  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
15:26:37  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
15:26:37  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
15:26:37  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
15:26:37  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
15:26:37  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
15:26:37  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
15:26:37  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
15:26:37  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
15:26:37  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
15:26:37  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
15:26:37  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
15:26:37  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
15:26:37  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
15:26:37  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
15:26:37  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
15:26:37  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
15:26:37  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
15:26:37  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
15:26:37  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
15:26:37  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
15:26:37  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
15:26:37  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
15:26:37  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
15:26:37  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
15:26:37  43  ,hh  att32
15:26:37  44  ,d   att33
15:26:37  45  ,w   att34
15:26:37  46  ,mpm att35
15:26:37  47  ,mph att36
15:26:37  48  ,trend att37
15:26:37  49  FROM svm6142
15:26:37  50  ORDER BY ydate
15:26:37  51  /

Table created.

Elapsed: 00:00:05.01
15:26:42 SQL> 
15:26:42 SQL> -- rpt
15:26:42 SQL> 
15:26:42 SQL> SELECT
15:26:42   2  pair
15:26:42   3  ,trend
15:26:42   4  ,gatt
15:26:42   5  ,COUNT(pair)
15:26:42   6  ,AVG(g6)
15:26:42   7  FROM svm6162
15:26:42   8  GROUP BY pair,trend,gatt
15:26:42   9  ORDER BY pair,trend,gatt
15:26:42  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_jpy 	-1 nup	      4302 -.33169335
eur_jpy 	-1 up	      4905 .269421446
eur_jpy 	-1		72
eur_jpy 	 1 nup	      5017 -.27034767
eur_jpy 	 1 up	      5365 .271819814

Elapsed: 00:00:00.04
15:26:42 SQL> 
15:26:42 SQL> -- I comment out sections related to score-feedback.
15:26:42 SQL> -- I tested score-feeback and it hurts results:
15:26:42 SQL> 
15:26:42 SQL> -- CREATE OR REPLACE VIEW sc12 AS
15:26:42 SQL> -- SELECT
15:26:42 SQL> -- m.pair
15:26:42 SQL> -- ,m.ydate
15:26:42 SQL> -- ,m.prdate
15:26:42 SQL> -- ,l.score score_long
15:26:42 SQL> -- ,s.score score_short
15:26:42 SQL> -- ,m.g6
15:26:42 SQL> -- FROM svm62scores l,svm62scores s,svm6162 m
15:26:42 SQL> -- WHERE l.targ='gatt'
15:26:42 SQL> -- AND	 s.targ='gattn'
15:26:42 SQL> -- AND l.prdate = s.prdate
15:26:42 SQL> -- AND l.prdate = m.prdate
15:26:42 SQL> -- -- Speed things up:
15:26:42 SQL> -- AND l.pair = '&1'
15:26:42 SQL> -- AND s.pair = '&1'
15:26:42 SQL> -- /
15:26:42 SQL> --
15:26:42 SQL> -- DROP TABLE score_corr;
15:26:42 SQL> --
15:26:42 SQL> -- CREATE TABLE score_corr COMPRESS AS
15:26:42 SQL> -- SELECT
15:26:42 SQL> -- pair
15:26:42 SQL> -- -- ,ydate
15:26:42 SQL> -- ,prdate
15:26:42 SQL> -- -- Find corr() tween score and g6 over 2 day period:
15:26:42 SQL> -- ,CORR((score_long - score_short),g6)
15:26:42 SQL> --   OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 2*24*60/5 PRECEDING AND CURRENT ROW)sc_corr
15:26:42 SQL> -- FROM sc12
15:26:42 SQL> -- /
15:26:42 SQL> 
15:26:42 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.30
15:26:42 SQL> 
15:26:42 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.29
15:26:42 SQL> 
15:26:42 SQL> CREATE TABLE modsrc COMPRESS AS
15:26:42   2  SELECT
15:26:42   3  pair
15:26:42   4  ,ydate
15:26:42   5  ,prdate
15:26:42   6  ,trend
15:26:42   7  ,g6
15:26:42   8  ,gatt
15:26:42   9  ,gattn
15:26:42  10  ,SUM(g6)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g00
15:26:42  11  ,SUM(g6)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g01
15:26:42  12  ,SUM(g6)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g02
15:26:42  13  ,SUM(g6)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g03
15:26:42  14  ,SUM(g6)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g04
15:26:42  15  ,SUM(g6)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g05
15:26:42  16  ,SUM(g6)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g06
15:26:42  17  ,SUM(g6)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g07
15:26:42  18  ,SUM(g6)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g08
15:26:42  19  ,SUM(g6)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g09
15:26:42  20  ,SUM(g6)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g10
15:26:42  21  ,SUM(g6)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g11
15:26:42  22  ,SUM(g6)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g12
15:26:42  23  ,SUM(g6)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g13
15:26:42  24  ,SUM(g6)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g14
15:26:42  25  ,SUM(g6)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g15
15:26:42  26  ,SUM(g6)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g16
15:26:42  27  ,SUM(g6)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g17
15:26:42  28  ,SUM(g6)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g18
15:26:42  29  ,SUM(g6)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g19
15:26:42  30  ,SUM(g6)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g20
15:26:42  31  ,SUM(g6)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g21
15:26:42  32  ,SUM(g6)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g22
15:26:42  33  ,SUM(g6)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g23
15:26:42  34  ,SUM(g6)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g24
15:26:42  35  ,SUM(g6)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g25
15:26:42  36  ,SUM(g6)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g26
15:26:42  37  ,SUM(g6)OVER(PARTITION BY trend,att27 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g27
15:26:42  38  ,SUM(g6)OVER(PARTITION BY trend,att28 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g28
15:26:42  39  ,SUM(g6)OVER(PARTITION BY trend,att29 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g29
15:26:42  40  ,SUM(g6)OVER(PARTITION BY trend,att30 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g30
15:26:42  41  ,SUM(g6)OVER(PARTITION BY trend,att31 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g31
15:26:43  42  ,SUM(g6)OVER(PARTITION BY trend,att32 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g32
15:26:43  43  ,SUM(g6)OVER(PARTITION BY trend,att33 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g33
15:26:43  44  ,SUM(g6)OVER(PARTITION BY trend,att34 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g34
15:26:43  45  ,SUM(g6)OVER(PARTITION BY trend,att35 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g35
15:26:43  46  ,SUM(g6)OVER(PARTITION BY trend,att36 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g36
15:26:43  47  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g37
15:26:43  48  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*40 PRECEDING AND CURRENT ROW)g38
15:26:43  49  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*30 PRECEDING AND CURRENT ROW)g39
15:26:43  50  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)g40
15:26:43  51  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)g41
15:26:43  52  FROM svm6162
15:26:43  53  /

Table created.

Elapsed: 00:00:06.25
15:26:49 SQL> 
15:26:49 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;
