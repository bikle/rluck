
SQL*Plus: Release 11.2.0.1.0 Production on Sun Jan 30 23:09:17 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

23:09:17 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
23:09:17 SQL> 23:09:17 SQL> --
23:09:17 SQL> -- pair10.sql
23:09:17 SQL> --
23:09:17 SQL> 
23:09:17 SQL> -- Creates views and tables needed by SVM.
23:09:17 SQL> 
23:09:17 SQL> 
23:09:17 SQL> CREATE OR REPLACE VIEW svm6102 AS
23:09:17   2  SELECT
23:09:17   3  pair
23:09:17   4  ,ydate
23:09:17   5  ,prdate
23:09:17   6  ,rownum rnum -- acts as t in my time-series
23:09:17   7  ,clse
23:09:17   8  -- Derive a bunch of attributes from clse, the latest price:
23:09:17   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
23:09:17  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
23:09:17  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
23:09:17  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
23:09:17  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
23:09:17  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
23:09:17  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
23:09:17  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
23:09:17  17  --
23:09:17  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
23:09:17  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
23:09:17  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
23:09:17  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
23:09:17  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
23:09:17  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
23:09:17  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
23:09:17  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
23:09:17  26  --
23:09:17  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
23:09:17  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
23:09:17  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
23:09:17  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
23:09:17  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
23:09:17  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
23:09:17  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
23:09:17  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
23:09:17  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
23:09:17  36  FROM di5min WHERE pair = '&1'
23:09:17  37  AND ydate > sysdate - 95
23:09:17  38  ORDER BY ydate
23:09:17  39  /
old  36: FROM di5min WHERE pair = '&1'
new  36: FROM di5min WHERE pair = 'aud_jpy'

View created.

Elapsed: 00:00:00.04
23:09:17 SQL> 
23:09:17 SQL> -- rpt
23:09:17 SQL> 
23:09:17 SQL> SELECT
23:09:17   2  pair
23:09:17   3  ,COUNT(pair)
23:09:17   4  ,MIN(clse),MAX(clse)
23:09:17   5  ,MIN(avg6),MAX(avg6)
23:09:17   6  ,MIN(ydate),MAX(ydate)
23:09:17   7  FROM svm6102
23:09:17   8  GROUP BY pair
23:09:17   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
aud_jpy       19142  78.249976 83.6669853 78.5106193  83.546306 2010-10-27 23:10:00 2011-01-30 23:05:00

Elapsed: 00:00:00.76
23:09:18 SQL> 
23:09:18 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
23:09:18 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:02.53
23:09:21 SQL> CREATE TABLE svm6122 COMPRESS AS
23:09:21   2  SELECT
23:09:21   3  pair
23:09:21   4  ,ydate
23:09:21   5  ,prdate
23:09:21   6  ,clse
23:09:21   7  -- g6 is important. I want to predict g6:
23:09:21   8  ,ld6 - clse g6
23:09:21   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
23:09:21  10  -- I want more attributes from the ones I derived above:
23:09:21  11  -- clse relation to moving-min
23:09:21  12  ,clse-min4  cm4
23:09:21  13  ,clse-min6  cm6
23:09:21  14  ,clse-min8  cm8
23:09:21  15  ,clse-min10 cm10
23:09:21  16  ,clse-min12 cm12
23:09:21  17  ,clse-min14 cm14
23:09:21  18  ,clse-min16 cm16
23:09:21  19  ,clse-min18 cm18
23:09:21  20  -- clse relation to moving-avg
23:09:21  21  ,clse-avg4  ca4
23:09:21  22  ,clse-avg6  ca6
23:09:21  23  ,clse-avg8  ca8
23:09:21  24  ,clse-avg10 ca10
23:09:21  25  ,clse-avg12 ca12
23:09:21  26  ,clse-avg14 ca14
23:09:21  27  ,clse-avg16 ca16
23:09:21  28  ,clse-avg18 ca18
23:09:21  29  -- clse relation to moving-max
23:09:21  30  ,clse-max4  cx4
23:09:21  31  ,clse-max6  cx6
23:09:21  32  ,clse-max8  cx8
23:09:21  33  ,clse-max10 cx10
23:09:21  34  ,clse-max12 cx12
23:09:21  35  ,clse-max14 cx14
23:09:21  36  ,clse-max16 cx16
23:09:21  37  ,clse-max18 cx18
23:09:21  38  -- Derive more attributes.
23:09:21  39  -- I want to use CORR() here to help SVM see the shape of the series.
23:09:21  40  -- But COVAR_POP is more stable:
23:09:21  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
23:09:21  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
23:09:21  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
23:09:21  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
23:09:21  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
23:09:21  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
23:09:21  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
23:09:21  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
23:09:21  49  -- Derive date related attributes:
23:09:21  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
23:09:21  51  ,0+TO_CHAR(ydate,'D')d
23:09:21  52  ,0+TO_CHAR(ydate,'W')w
23:09:21  53  -- mpm stands for minutes-past-midnight:
23:09:21  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
23:09:21  55  -- mph stands for minutes-past-hour:
23:09:21  56  ,0+TO_CHAR(ydate,'MI')mph
23:09:21  57  FROM svm6102
23:09:21  58  ORDER BY ydate
23:09:21  59  /

Table created.

Elapsed: 00:00:02.83
23:09:24 SQL> 
23:09:24 SQL> -- rpt
23:09:24 SQL> 
23:09:24 SQL> SELECT
23:09:24   2  pair
23:09:24   3  ,COUNT(pair)
23:09:24   4  ,MIN(clse),MAX(clse)
23:09:24   5  ,MIN(ydate),MAX(ydate)
23:09:24   6  FROM svm6122
23:09:24   7  GROUP BY pair
23:09:24   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
aud_jpy       19142  78.249976 83.6669853 2010-10-27 23:10:00 2011-01-30 23:05:00

Elapsed: 00:00:00.05
23:09:24 SQL> 
23:09:24 SQL> -- Prepare for derivation of NTILE based params:
23:09:24 SQL> 
23:09:24 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.84
23:09:24 SQL> CREATE TABLE svm6142 COMPRESS AS
23:09:24   2  SELECT
23:09:24   3  pair
23:09:24   4  ,ydate
23:09:24   5  ,prdate
23:09:24   6  ,clse
23:09:24   7  ,g6
23:09:24   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
23:09:24   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
23:09:24  10  ,CASE WHEN trend IS NULL THEN 1
23:09:24  11  	    WHEN trend =0      THEN 1
23:09:24  12  	    ELSE trend END trend
23:09:24  13  ,cm4
23:09:24  14  ,cm6
23:09:24  15  ,cm8
23:09:24  16  ,cm10
23:09:24  17  ,cm12
23:09:24  18  ,cm14
23:09:24  19  ,cm16
23:09:24  20  ,cm18
23:09:24  21  --
23:09:24  22  ,ca4
23:09:24  23  ,ca6
23:09:24  24  ,ca8
23:09:24  25  ,ca10
23:09:24  26  ,ca12
23:09:24  27  ,ca14
23:09:24  28  ,ca16
23:09:24  29  ,ca18
23:09:24  30  --
23:09:24  31  ,cx4
23:09:24  32  ,cx6
23:09:24  33  ,cx8
23:09:24  34  ,cx10
23:09:24  35  ,cx12
23:09:24  36  ,cx14
23:09:24  37  ,cx16
23:09:24  38  ,cx18
23:09:24  39  --
23:09:24  40  ,crr4
23:09:24  41  ,crr6
23:09:24  42  ,crr8
23:09:24  43  ,crr10
23:09:24  44  ,crr12
23:09:24  45  ,crr14
23:09:24  46  ,crr16
23:09:24  47  ,crr18
23:09:24  48  --
23:09:24  49  ,hh
23:09:24  50  ,d
23:09:24  51  ,w
23:09:24  52  ,mpm
23:09:24  53  ,mph
23:09:24  54  FROM svm6122
23:09:24  55  ORDER BY ydate
23:09:24  56  /

Table created.

Elapsed: 00:00:00.39
23:09:25 SQL> 
23:09:25 SQL> -- rpt
23:09:25 SQL> 
23:09:25 SQL> SELECT
23:09:25   2  pair
23:09:25   3  ,trend
23:09:25   4  ,gatt
23:09:25   5  ,COUNT(pair)
23:09:25   6  ,AVG(g6)
23:09:25   7  FROM svm6142
23:09:25   8  GROUP BY pair,trend,gatt
23:09:25   9  ORDER BY pair,trend,gatt
23:09:25  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_jpy 	-1 nup	      4282 -.21315825
aud_jpy 	-1 up	      5139 .218025042
aud_jpy 	-1		72
aud_jpy 	 1 nup	      5252 -.18313278
aud_jpy 	 1 up	      4397 .203687149

Elapsed: 00:00:00.06
23:09:25 SQL> 
23:09:25 SQL> 
23:09:25 SQL> -- Derive NTILE based params:
23:09:25 SQL> 
23:09:25 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.19
23:09:25 SQL> CREATE TABLE svm6162 COMPRESS AS
23:09:25   2  SELECT
23:09:25   3  pair
23:09:25   4  ,ydate
23:09:25   5  ,prdate
23:09:25   6  ,clse
23:09:25   7  ,g6
23:09:25   8  ,gatt
23:09:25   9  ,gattn
23:09:25  10  ,trend
23:09:25  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
23:09:25  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
23:09:25  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
23:09:25  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
23:09:25  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
23:09:25  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
23:09:25  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
23:09:25  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
23:09:25  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
23:09:25  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
23:09:25  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
23:09:25  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
23:09:25  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
23:09:25  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
23:09:25  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
23:09:25  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
23:09:25  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
23:09:25  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
23:09:25  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
23:09:25  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
23:09:25  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
23:09:25  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
23:09:25  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
23:09:25  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
23:09:25  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
23:09:25  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
23:09:25  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
23:09:25  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
23:09:25  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
23:09:25  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
23:09:25  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
23:09:25  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
23:09:25  43  ,hh  att32
23:09:25  44  ,d   att33
23:09:25  45  ,w   att34
23:09:25  46  ,mpm att35
23:09:25  47  ,mph att36
23:09:25  48  ,trend att37
23:09:25  49  FROM svm6142
23:09:25  50  ORDER BY ydate
23:09:25  51  /

Table created.

Elapsed: 00:00:04.89
23:09:30 SQL> 
23:09:30 SQL> -- rpt
23:09:30 SQL> 
23:09:30 SQL> SELECT
23:09:30   2  pair
23:09:30   3  ,trend
23:09:30   4  ,gatt
23:09:30   5  ,COUNT(pair)
23:09:30   6  ,AVG(g6)
23:09:30   7  FROM svm6162
23:09:30   8  GROUP BY pair,trend,gatt
23:09:30   9  ORDER BY pair,trend,gatt
23:09:30  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_jpy 	-1 nup	      4282 -.21315825
aud_jpy 	-1 up	      5139 .218025042
aud_jpy 	-1		72
aud_jpy 	 1 nup	      5252 -.18313278
aud_jpy 	 1 up	      4397 .203687149

Elapsed: 00:00:00.02
23:09:30 SQL> 
23:09:30 SQL> 
23:09:30 SQL> CREATE OR REPLACE VIEW sc12 AS
23:09:30   2  SELECT
23:09:30   3  m.pair
23:09:30   4  ,m.ydate
23:09:30   5  ,m.prdate
23:09:30   6  ,l.score score_long
23:09:30   7  ,s.score score_short
23:09:30   8  ,m.g6
23:09:30   9  FROM svm62scores l,svm62scores s,svm6162 m
23:09:30  10  WHERE l.targ='gatt'
23:09:30  11  AND   s.targ='gattn'
23:09:30  12  AND l.prdate = s.prdate
23:09:30  13  AND l.prdate = m.prdate
23:09:30  14  -- Speed things up:
23:09:30  15  AND l.pair = '&1'
23:09:30  16  AND s.pair = '&1'
23:09:30  17  /
old  15: AND l.pair = '&1'
new  15: AND l.pair = 'aud_jpy'
old  16: AND s.pair = '&1'
new  16: AND s.pair = 'aud_jpy'

View created.

Elapsed: 00:00:00.07
23:09:30 SQL> 
23:09:30 SQL> DROP TABLE score_corr;

Table dropped.

Elapsed: 00:00:00.32
23:09:30 SQL> 
23:09:30 SQL> CREATE TABLE score_corr COMPRESS AS
23:09:30   2  SELECT
23:09:30   3  pair
23:09:30   4  -- ,ydate
23:09:30   5  ,prdate
23:09:30   6  -- Find corr() tween score and g6 over 2 day period:
23:09:30   7  ,CORR((score_long - score_short),g6)
23:09:30   8  	OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 2*24*60/5 PRECEDING AND CURRENT ROW)sc_corr
23:09:30   9  FROM sc12
23:09:30  10  /

Table created.

Elapsed: 00:00:00.34
23:09:31 SQL> 
23:09:31 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.28
23:09:31 SQL> 
23:09:31 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.47
23:09:31 SQL> 
23:09:31 SQL> CREATE TABLE modsrc COMPRESS AS
23:09:31   2  SELECT
23:09:31   3  s.pair
23:09:31   4  ,ydate
23:09:31   5  ,s.prdate
23:09:31   6  ,trend
23:09:31   7  ,g6
23:09:31   8  ,gatt
23:09:31   9  ,gattn
23:09:31  10  ,SUM(g6)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g00
23:09:31  11  ,SUM(g6)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g01
23:09:31  12  ,SUM(g6)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g02
23:09:31  13  ,SUM(g6)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g03
23:09:31  14  ,SUM(g6)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g04
23:09:31  15  ,SUM(g6)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g05
23:09:31  16  ,SUM(g6)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g06
23:09:31  17  ,SUM(g6)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g07
23:09:31  18  ,SUM(g6)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g08
23:09:31  19  ,SUM(g6)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g09
23:09:31  20  ,SUM(g6)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g10
23:09:31  21  ,SUM(g6)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g11
23:09:31  22  ,SUM(g6)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g12
23:09:31  23  ,SUM(g6)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g13
23:09:31  24  ,SUM(g6)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g14
23:09:31  25  ,SUM(g6)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g15
23:09:31  26  ,SUM(g6)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g16
23:09:31  27  ,SUM(g6)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g17
23:09:31  28  ,SUM(g6)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g18
23:09:31  29  ,SUM(g6)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g19
23:09:31  30  ,SUM(g6)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g20
23:09:31  31  ,SUM(g6)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g21
23:09:31  32  ,SUM(g6)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g22
23:09:31  33  ,SUM(g6)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g23
23:09:31  34  ,SUM(g6)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g24
23:09:31  35  ,SUM(g6)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g25
23:09:31  36  ,SUM(g6)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g26
23:09:31  37  ,SUM(g6)OVER(PARTITION BY trend,att27 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g27
23:09:31  38  ,SUM(g6)OVER(PARTITION BY trend,att28 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g28
23:09:31  39  ,SUM(g6)OVER(PARTITION BY trend,att29 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g29
23:09:31  40  ,SUM(g6)OVER(PARTITION BY trend,att30 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g30
23:09:31  41  ,SUM(g6)OVER(PARTITION BY trend,att31 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g31
23:09:31  42  ,SUM(g6)OVER(PARTITION BY trend,att32 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g32
23:09:31  43  ,SUM(g6)OVER(PARTITION BY trend,att33 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g33
23:09:31  44  ,SUM(g6)OVER(PARTITION BY trend,att34 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g34
23:09:31  45  ,SUM(g6)OVER(PARTITION BY trend,att35 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g35
23:09:31  46  ,SUM(g6)OVER(PARTITION BY trend,att36 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g36
23:09:31  47  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g37
23:09:31  48  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*40 PRECEDING AND CURRENT ROW)g38
23:09:31  49  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*30 PRECEDING AND CURRENT ROW)g39
23:09:31  50  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)g40
23:09:31  51  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)g41
23:09:31  52  -- Recent CORR()tween scores and gains:
23:09:31  53  ,NVL(sc_corr,0)sc_corr
23:09:31  54  FROM svm6162 s,score_corr c
23:09:31  55  WHERE s.prdate = c.prdate(+)
23:09:31  56  /

Table created.

Elapsed: 00:00:06.03
23:09:38 SQL> 
23:09:38 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:02.70
23:09:40 SQL> 
23:09:40 SQL> -- rpt
23:09:40 SQL> 
23:09:40 SQL> SELECT
23:09:40   2  pair
23:09:40   3  ,trend
23:09:40   4  ,gatt
23:09:40   5  ,COUNT(pair)
23:09:40   6  ,AVG(g6)
23:09:40   7  FROM modsrc
23:09:40   8  GROUP BY pair,trend,gatt
23:09:40   9  ORDER BY pair,trend,gatt
23:09:40  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_jpy 	-1 nup	      4282 -.21315825
aud_jpy 	-1 up	      5139 .218025042
aud_jpy 	-1		72
aud_jpy 	 1 nup	      5252 -.18313278
aud_jpy 	 1 up	      4397 .203687149

Elapsed: 00:00:00.02
23:09:40 SQL> 
23:09:40 SQL> 
23:09:40 SQL> SELECT pair,COUNT(pair)FROM svm6102 GROUP BY pair;

PAIR	COUNT(PAIR)
------- -----------
aud_jpy       19142

Elapsed: 00:00:00.72
23:09:41 SQL> 
23:09:41 SQL> SELECT pair,COUNT(pair)FROM modsrc GROUP BY pair;

PAIR	COUNT(PAIR)
------- -----------
aud_jpy       19142

Elapsed: 00:00:00.01
23:09:41 SQL> 
23:09:41 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
