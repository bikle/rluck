
SQL*Plus: Release 11.2.0.1.0 Production on Wed Feb 23 17:25:24 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

17:25:24 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
17:25:24 SQL> 17:25:24 SQL> --
17:25:24 SQL> -- pair10.sql
17:25:24 SQL> --
17:25:24 SQL> 
17:25:24 SQL> -- Creates views and tables needed by SVM.
17:25:24 SQL> 
17:25:24 SQL> 
17:25:24 SQL> CREATE OR REPLACE VIEW svm6102 AS
17:25:24   2  SELECT
17:25:24   3  pair
17:25:24   4  ,ydate
17:25:24   5  ,prdate
17:25:24   6  ,rownum rnum -- acts as t in my time-series
17:25:24   7  ,clse
17:25:24   8  -- Derive a bunch of attributes from clse, the latest price:
17:25:24   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
17:25:24  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
17:25:24  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
17:25:24  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
17:25:24  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
17:25:24  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
17:25:24  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
17:25:24  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
17:25:24  17  --
17:25:24  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
17:25:24  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
17:25:24  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
17:25:24  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
17:25:24  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
17:25:24  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
17:25:24  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
17:25:24  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
17:25:24  26  --
17:25:24  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
17:25:24  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
17:25:24  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
17:25:24  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
17:25:24  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
17:25:24  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
17:25:24  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
17:25:24  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
17:25:24  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
17:25:24  36  FROM di5min WHERE pair = '&1'
17:25:24  37  AND ydate > sysdate - 95
17:25:24  38  ORDER BY ydate
17:25:24  39  /
old  36: FROM di5min WHERE pair = '&1'
new  36: FROM di5min WHERE pair = 'eur_jpy'

View created.

Elapsed: 00:00:00.05
17:25:24 SQL> 
17:25:24 SQL> -- rpt
17:25:24 SQL> 
17:25:24 SQL> SELECT
17:25:24   2  pair
17:25:24   3  ,COUNT(pair)
17:25:24   4  ,MIN(clse),MAX(clse)
17:25:24   5  ,MIN(avg6),MAX(avg6)
17:25:24   6  ,MIN(ydate),MAX(ydate)
17:25:24   7  FROM svm6102
17:25:24   8  GROUP BY pair
17:25:24   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_jpy       19295 106.906797 114.875523 107.120556   114.7435 2010-11-21 20:55:00 2011-02-23 17:10:00

Elapsed: 00:00:00.82
17:25:25 SQL> 
17:25:25 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
17:25:25 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.36
17:25:26 SQL> CREATE TABLE svm6122 COMPRESS AS
17:25:26   2  SELECT
17:25:26   3  pair
17:25:26   4  ,ydate
17:25:26   5  ,prdate
17:25:26   6  ,clse
17:25:26   7  -- g6 is important. I want to predict g6:
17:25:26   8  ,(ld6 - clse)/clse g6
17:25:26   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
17:25:26  10  -- I want more attributes from the ones I derived above:
17:25:26  11  -- clse relation to moving-min
17:25:26  12  ,clse-min4  cm4
17:25:26  13  ,clse-min6  cm6
17:25:26  14  ,clse-min8  cm8
17:25:26  15  ,clse-min10 cm10
17:25:26  16  ,clse-min12 cm12
17:25:26  17  ,clse-min14 cm14
17:25:26  18  ,clse-min16 cm16
17:25:26  19  ,clse-min18 cm18
17:25:26  20  -- clse relation to moving-avg
17:25:26  21  ,clse-avg4  ca4
17:25:26  22  ,clse-avg6  ca6
17:25:26  23  ,clse-avg8  ca8
17:25:26  24  ,clse-avg10 ca10
17:25:26  25  ,clse-avg12 ca12
17:25:26  26  ,clse-avg14 ca14
17:25:26  27  ,clse-avg16 ca16
17:25:26  28  ,clse-avg18 ca18
17:25:26  29  -- clse relation to moving-max
17:25:26  30  ,clse-max4  cx4
17:25:26  31  ,clse-max6  cx6
17:25:26  32  ,clse-max8  cx8
17:25:26  33  ,clse-max10 cx10
17:25:26  34  ,clse-max12 cx12
17:25:26  35  ,clse-max14 cx14
17:25:26  36  ,clse-max16 cx16
17:25:26  37  ,clse-max18 cx18
17:25:26  38  -- Derive more attributes.
17:25:26  39  -- I want to use CORR() here to help SVM see the shape of the series.
17:25:26  40  -- But COVAR_POP is more stable:
17:25:26  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
17:25:26  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
17:25:26  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
17:25:26  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
17:25:26  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
17:25:26  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
17:25:26  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
17:25:26  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
17:25:26  49  -- Derive date related attributes:
17:25:26  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
17:25:26  51  ,0+TO_CHAR(ydate,'D')d
17:25:26  52  ,0+TO_CHAR(ydate,'W')w
17:25:26  53  -- mpm stands for minutes-past-midnight:
17:25:26  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
17:25:26  55  -- mph stands for minutes-past-hour:
17:25:26  56  ,0+TO_CHAR(ydate,'MI')mph
17:25:26  57  FROM svm6102
17:25:26  58  WHERE clse > 0
17:25:26  59  ORDER BY ydate
17:25:26  60  /

Table created.

Elapsed: 00:00:02.31
17:25:28 SQL> 
17:25:28 SQL> -- rpt
17:25:28 SQL> 
17:25:28 SQL> SELECT
17:25:28   2  pair
17:25:28   3  ,COUNT(pair)
17:25:28   4  ,MIN(clse),MAX(clse)
17:25:28   5  ,MIN(ydate),MAX(ydate)
17:25:28   6  FROM svm6122
17:25:28   7  GROUP BY pair
17:25:28   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_jpy       19295 106.906797 114.875523 2010-11-21 20:55:00 2011-02-23 17:10:00

Elapsed: 00:00:00.05
17:25:28 SQL> 
17:25:28 SQL> -- Prepare for derivation of NTILE based params:
17:25:28 SQL> 
17:25:28 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.30
17:25:28 SQL> CREATE TABLE svm6142 COMPRESS AS
17:25:28   2  SELECT
17:25:28   3  pair
17:25:28   4  ,ydate
17:25:28   5  ,prdate
17:25:28   6  ,clse
17:25:28   7  ,g6
17:25:28   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
17:25:28   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
17:25:28  10  ,CASE WHEN trend IS NULL THEN 1
17:25:28  11  	    WHEN trend =0      THEN 1
17:25:28  12  	    ELSE trend END trend
17:25:28  13  ,cm4
17:25:28  14  ,cm6
17:25:28  15  ,cm8
17:25:28  16  ,cm10
17:25:28  17  ,cm12
17:25:28  18  ,cm14
17:25:28  19  ,cm16
17:25:28  20  ,cm18
17:25:28  21  --
17:25:28  22  ,ca4
17:25:28  23  ,ca6
17:25:28  24  ,ca8
17:25:28  25  ,ca10
17:25:28  26  ,ca12
17:25:28  27  ,ca14
17:25:28  28  ,ca16
17:25:28  29  ,ca18
17:25:28  30  --
17:25:28  31  ,cx4
17:25:28  32  ,cx6
17:25:28  33  ,cx8
17:25:28  34  ,cx10
17:25:28  35  ,cx12
17:25:28  36  ,cx14
17:25:28  37  ,cx16
17:25:28  38  ,cx18
17:25:28  39  --
17:25:28  40  ,crr4
17:25:28  41  ,crr6
17:25:28  42  ,crr8
17:25:28  43  ,crr10
17:25:28  44  ,crr12
17:25:28  45  ,crr14
17:25:28  46  ,crr16
17:25:28  47  ,crr18
17:25:28  48  --
17:25:28  49  ,hh
17:25:28  50  ,d
17:25:28  51  ,w
17:25:28  52  ,mpm
17:25:28  53  ,mph
17:25:28  54  FROM svm6122
17:25:28  55  ORDER BY ydate
17:25:28  56  /

Table created.

Elapsed: 00:00:00.39
17:25:29 SQL> 
17:25:29 SQL> -- rpt
17:25:29 SQL> 
17:25:29 SQL> SELECT
17:25:29   2  pair
17:25:29   3  ,trend
17:25:29   4  ,gatt
17:25:29   5  ,COUNT(pair)
17:25:29   6  ,AVG(g6)
17:25:29   7  FROM svm6142
17:25:29   8  GROUP BY pair,trend,gatt
17:25:29   9  ORDER BY pair,trend,gatt
17:25:29  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_jpy 	-1 nup	      5954 -.00188273
eur_jpy 	-1 up	      3219  .00328434
eur_jpy 	-1		 6
eur_jpy 	 1 nup	      6857  -.0016045
eur_jpy 	 1 up	      3193  .00347963
eur_jpy 	 1		66

6 rows selected.

Elapsed: 00:00:00.04
17:25:29 SQL> 
17:25:29 SQL> 
17:25:29 SQL> -- Derive NTILE based params:
17:25:29 SQL> 
17:25:29 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.14
17:25:29 SQL> CREATE TABLE svm6162 COMPRESS AS
17:25:29   2  SELECT
17:25:29   3  pair
17:25:29   4  ,ydate
17:25:29   5  ,prdate
17:25:29   6  ,clse
17:25:29   7  ,g6
17:25:29   8  ,gatt
17:25:29   9  ,gattn
17:25:29  10  ,trend
17:25:29  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
17:25:29  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
17:25:29  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
17:25:29  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
17:25:29  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
17:25:29  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
17:25:29  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
17:25:29  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
17:25:29  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
17:25:29  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
17:25:29  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
17:25:29  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
17:25:29  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
17:25:29  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
17:25:29  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
17:25:29  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
17:25:29  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
17:25:29  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
17:25:29  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
17:25:29  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
17:25:29  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
17:25:29  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
17:25:29  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
17:25:29  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
17:25:29  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
17:25:29  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
17:25:29  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
17:25:29  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
17:25:29  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
17:25:29  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
17:25:29  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
17:25:29  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
17:25:29  43  ,hh  att32
17:25:29  44  ,d   att33
17:25:29  45  ,w   att34
17:25:29  46  ,mpm att35
17:25:29  47  ,mph att36
17:25:29  48  ,trend att37
17:25:29  49  FROM svm6142
17:25:29  50  ORDER BY ydate
17:25:29  51  /

Table created.

Elapsed: 00:00:04.92
17:25:34 SQL> 
17:25:34 SQL> -- rpt
17:25:34 SQL> 
17:25:34 SQL> SELECT
17:25:34   2  pair
17:25:34   3  ,trend
17:25:34   4  ,gatt
17:25:34   5  ,COUNT(pair)
17:25:34   6  ,AVG(g6)
17:25:34   7  FROM svm6162
17:25:34   8  GROUP BY pair,trend,gatt
17:25:34   9  ORDER BY pair,trend,gatt
17:25:34  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_jpy 	-1 nup	      5954 -.00188273
eur_jpy 	-1 up	      3219  .00328434
eur_jpy 	-1		 6
eur_jpy 	 1 nup	      6857  -.0016045
eur_jpy 	 1 up	      3193  .00347963
eur_jpy 	 1		66

6 rows selected.

Elapsed: 00:00:00.03
17:25:34 SQL> 
17:25:34 SQL> -- I comment out sections related to score-feedback.
17:25:34 SQL> -- I tested score-feeback and it hurts results:
17:25:34 SQL> 
17:25:34 SQL> -- CREATE OR REPLACE VIEW sc12 AS
17:25:34 SQL> -- SELECT
17:25:34 SQL> -- m.pair
17:25:34 SQL> -- ,m.ydate
17:25:34 SQL> -- ,m.prdate
17:25:34 SQL> -- ,l.score score_long
17:25:34 SQL> -- ,s.score score_short
17:25:34 SQL> -- ,m.g6
17:25:34 SQL> -- FROM svm62scores l,svm62scores s,svm6162 m
17:25:34 SQL> -- WHERE l.targ='gatt'
17:25:34 SQL> -- AND	 s.targ='gattn'
17:25:34 SQL> -- AND l.prdate = s.prdate
17:25:34 SQL> -- AND l.prdate = m.prdate
17:25:34 SQL> -- -- Speed things up:
17:25:34 SQL> -- AND l.pair = '&1'
17:25:34 SQL> -- AND s.pair = '&1'
17:25:34 SQL> -- /
17:25:34 SQL> --
17:25:34 SQL> -- DROP TABLE score_corr;
17:25:34 SQL> --
17:25:34 SQL> -- CREATE TABLE score_corr COMPRESS AS
17:25:34 SQL> -- SELECT
17:25:34 SQL> -- pair
17:25:34 SQL> -- -- ,ydate
17:25:34 SQL> -- ,prdate
17:25:34 SQL> -- -- Find corr() tween score and g6 over 2 day period:
17:25:34 SQL> -- ,CORR((score_long - score_short),g6)
17:25:34 SQL> --   OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 2*24*60/5 PRECEDING AND CURRENT ROW)sc_corr
17:25:34 SQL> -- FROM sc12
17:25:34 SQL> -- /
17:25:34 SQL> 
17:25:34 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.29
17:25:34 SQL> 
17:25:34 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.30
17:25:34 SQL> 
17:25:34 SQL> CREATE TABLE modsrc COMPRESS AS
17:25:34   2  SELECT
17:25:34   3  pair
17:25:34   4  ,ydate
17:25:34   5  ,prdate
17:25:34   6  ,trend
17:25:34   7  ,g6
17:25:34   8  ,gatt
17:25:34   9  ,gattn
17:25:34  10  ,SUM(g6)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g00
17:25:34  11  ,SUM(g6)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g01
17:25:34  12  ,SUM(g6)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g02
17:25:34  13  ,SUM(g6)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g03
17:25:34  14  ,SUM(g6)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g04
17:25:34  15  ,SUM(g6)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g05
17:25:34  16  ,SUM(g6)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g06
17:25:34  17  ,SUM(g6)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g07
17:25:34  18  ,SUM(g6)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g08
17:25:34  19  ,SUM(g6)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g09
17:25:34  20  ,SUM(g6)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g10
17:25:34  21  ,SUM(g6)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g11
17:25:34  22  ,SUM(g6)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g12
17:25:34  23  ,SUM(g6)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g13
17:25:34  24  ,SUM(g6)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g14
17:25:34  25  ,SUM(g6)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g15
17:25:34  26  ,SUM(g6)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g16
17:25:34  27  ,SUM(g6)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g17
17:25:34  28  ,SUM(g6)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g18
17:25:34  29  ,SUM(g6)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g19
17:25:34  30  ,SUM(g6)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g20
17:25:34  31  ,SUM(g6)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g21
17:25:34  32  ,SUM(g6)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g22
17:25:34  33  ,SUM(g6)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g23
17:25:34  34  ,SUM(g6)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g24
17:25:34  35  ,SUM(g6)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g25
17:25:34  36  ,SUM(g6)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g26
17:25:34  37  ,SUM(g6)OVER(PARTITION BY trend,att27 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g27
17:25:34  38  ,SUM(g6)OVER(PARTITION BY trend,att28 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g28
17:25:34  39  ,SUM(g6)OVER(PARTITION BY trend,att29 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g29
17:25:34  40  ,SUM(g6)OVER(PARTITION BY trend,att30 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g30
17:25:34  41  ,SUM(g6)OVER(PARTITION BY trend,att31 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g31
17:25:34  42  ,SUM(g6)OVER(PARTITION BY trend,att32 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g32
17:25:34  43  ,SUM(g6)OVER(PARTITION BY trend,att33 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g33
17:25:34  44  ,SUM(g6)OVER(PARTITION BY trend,att34 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g34
17:25:34  45  ,SUM(g6)OVER(PARTITION BY trend,att35 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g35
17:25:34  46  ,SUM(g6)OVER(PARTITION BY trend,att36 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g36
17:25:34  47  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g37
17:25:34  48  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*40 PRECEDING AND CURRENT ROW)g38
17:25:34  49  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*30 PRECEDING AND CURRENT ROW)g39
17:25:34  50  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)g40
17:25:34  51  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)g41
17:25:34  52  FROM svm6162
17:25:34  53  /

Table created.

Elapsed: 00:00:06.58
17:25:41 SQL> 
17:25:41 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:05.06
17:25:46 SQL> 
17:25:46 SQL> -- rpt
17:25:46 SQL> 
17:25:46 SQL> SELECT
17:25:46   2  pair
17:25:46   3  ,trend
17:25:46   4  ,gatt
17:25:46   5  ,COUNT(pair)
17:25:46   6  ,AVG(g6)
17:25:46   7  FROM modsrc
17:25:46   8  GROUP BY pair,trend,gatt
17:25:46   9  ORDER BY pair,trend,gatt
17:25:46  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_jpy 	-1 nup	      5954 -.00188273
eur_jpy 	-1 up	      3219  .00328434
eur_jpy 	-1		 6
eur_jpy 	 1 nup	      6857  -.0016045
eur_jpy 	 1 up	      3193  .00347963
eur_jpy 	 1		66

6 rows selected.

Elapsed: 00:00:00.02
17:25:46 SQL> 
17:25:46 SQL> 
17:25:46 SQL> SELECT pair,COUNT(pair)FROM svm6102 GROUP BY pair;

PAIR	COUNT(PAIR)
------- -----------
eur_jpy       19295

Elapsed: 00:00:00.75
17:25:47 SQL> 
17:25:47 SQL> SELECT pair,COUNT(pair)FROM modsrc GROUP BY pair;

PAIR	COUNT(PAIR)
------- -----------
eur_jpy       19295

Elapsed: 00:00:00.01
17:25:47 SQL> 
17:25:47 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
