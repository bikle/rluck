
SQL*Plus: Release 11.2.0.1.0 Production on Fri Feb 18 10:43:51 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

10:43:51 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
10:43:51 SQL> 10:43:51 SQL> --
10:43:51 SQL> -- pair10.sql
10:43:51 SQL> --
10:43:51 SQL> 
10:43:51 SQL> -- Creates views and tables needed by SVM.
10:43:51 SQL> 
10:43:51 SQL> 
10:43:51 SQL> CREATE OR REPLACE VIEW svm6102 AS
10:43:51   2  SELECT
10:43:51   3  pair
10:43:51   4  ,ydate
10:43:51   5  ,prdate
10:43:51   6  ,rownum rnum -- acts as t in my time-series
10:43:51   7  ,clse
10:43:51   8  -- Derive a bunch of attributes from clse, the latest price:
10:43:51   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
10:43:51  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
10:43:51  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
10:43:51  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
10:43:51  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
10:43:51  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
10:43:51  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
10:43:51  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
10:43:51  17  --
10:43:51  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
10:43:51  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
10:43:51  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
10:43:51  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
10:43:51  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
10:43:51  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
10:43:51  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
10:43:51  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
10:43:51  26  --
10:43:51  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
10:43:51  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
10:43:51  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
10:43:51  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
10:43:51  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
10:43:51  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
10:43:51  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
10:43:51  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
10:43:51  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
10:43:51  36  FROM di5min WHERE pair = '&1'
10:43:51  37  AND ydate > sysdate - 95
10:43:51  38  ORDER BY ydate
10:43:51  39  /
old  36: FROM di5min WHERE pair = '&1'
new  36: FROM di5min WHERE pair = 'eur_usd'

View created.

Elapsed: 00:00:00.05
10:43:51 SQL> 
10:43:51 SQL> -- rpt
10:43:51 SQL> 
10:43:51 SQL> SELECT
10:43:51   2  pair
10:43:51   3  ,COUNT(pair)
10:43:51   4  ,MIN(clse),MAX(clse)
10:43:51   5  ,MIN(avg6),MAX(avg6)
10:43:51   6  ,MIN(ydate),MAX(ydate)
10:43:51   7  FROM svm6102
10:43:51   8  GROUP BY pair
10:43:51   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_usd       19642    1.28795	    1.386 1.29022637 1.38452337 2010-11-15 10:45:00 2011-02-18 10:30:00

Elapsed: 00:00:00.83
10:43:52 SQL> 
10:43:52 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
10:43:52 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.21
10:43:52 SQL> CREATE TABLE svm6122 COMPRESS AS
10:43:52   2  SELECT
10:43:52   3  pair
10:43:52   4  ,ydate
10:43:52   5  ,prdate
10:43:52   6  ,clse
10:43:52   7  -- g6 is important. I want to predict g6:
10:43:52   8  ,ld6 - clse g6
10:43:52   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
10:43:52  10  -- I want more attributes from the ones I derived above:
10:43:52  11  -- clse relation to moving-min
10:43:52  12  ,clse-min4  cm4
10:43:52  13  ,clse-min6  cm6
10:43:52  14  ,clse-min8  cm8
10:43:52  15  ,clse-min10 cm10
10:43:52  16  ,clse-min12 cm12
10:43:52  17  ,clse-min14 cm14
10:43:52  18  ,clse-min16 cm16
10:43:52  19  ,clse-min18 cm18
10:43:52  20  -- clse relation to moving-avg
10:43:52  21  ,clse-avg4  ca4
10:43:52  22  ,clse-avg6  ca6
10:43:52  23  ,clse-avg8  ca8
10:43:52  24  ,clse-avg10 ca10
10:43:52  25  ,clse-avg12 ca12
10:43:52  26  ,clse-avg14 ca14
10:43:52  27  ,clse-avg16 ca16
10:43:52  28  ,clse-avg18 ca18
10:43:52  29  -- clse relation to moving-max
10:43:52  30  ,clse-max4  cx4
10:43:52  31  ,clse-max6  cx6
10:43:52  32  ,clse-max8  cx8
10:43:52  33  ,clse-max10 cx10
10:43:52  34  ,clse-max12 cx12
10:43:52  35  ,clse-max14 cx14
10:43:52  36  ,clse-max16 cx16
10:43:52  37  ,clse-max18 cx18
10:43:52  38  -- Derive more attributes.
10:43:52  39  -- I want to use CORR() here to help SVM see the shape of the series.
10:43:52  40  -- But COVAR_POP is more stable:
10:43:52  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
10:43:52  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
10:43:52  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
10:43:52  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
10:43:52  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
10:43:52  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
10:43:52  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
10:43:52  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
10:43:52  49  -- Derive date related attributes:
10:43:52  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
10:43:52  51  ,0+TO_CHAR(ydate,'D')d
10:43:52  52  ,0+TO_CHAR(ydate,'W')w
10:43:52  53  -- mpm stands for minutes-past-midnight:
10:43:52  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
10:43:52  55  -- mph stands for minutes-past-hour:
10:43:52  56  ,0+TO_CHAR(ydate,'MI')mph
10:43:52  57  FROM svm6102
10:43:52  58  ORDER BY ydate
10:43:52  59  /

Table created.

Elapsed: 00:00:02.20
10:43:54 SQL> 
10:43:54 SQL> -- rpt
10:43:54 SQL> 
10:43:54 SQL> SELECT
10:43:54   2  pair
10:43:54   3  ,COUNT(pair)
10:43:54   4  ,MIN(clse),MAX(clse)
10:43:54   5  ,MIN(ydate),MAX(ydate)
10:43:54   6  FROM svm6122
10:43:54   7  GROUP BY pair
10:43:54   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_usd       19642    1.28795	    1.386 2010-11-15 10:45:00 2011-02-18 10:30:00

Elapsed: 00:00:00.04
10:43:54 SQL> 
10:43:54 SQL> -- Prepare for derivation of NTILE based params:
10:43:54 SQL> 
10:43:54 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.24
10:43:54 SQL> CREATE TABLE svm6142 COMPRESS AS
10:43:54   2  SELECT
10:43:54   3  pair
10:43:54   4  ,ydate
10:43:54   5  ,prdate
10:43:54   6  ,clse
10:43:54   7  ,g6
10:43:54   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
10:43:54   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
10:43:54  10  ,CASE WHEN trend IS NULL THEN 1
10:43:54  11  	    WHEN trend =0      THEN 1
10:43:54  12  	    ELSE trend END trend
10:43:54  13  ,cm4
10:43:54  14  ,cm6
10:43:54  15  ,cm8
10:43:54  16  ,cm10
10:43:54  17  ,cm12
10:43:54  18  ,cm14
10:43:54  19  ,cm16
10:43:54  20  ,cm18
10:43:54  21  --
10:43:54  22  ,ca4
10:43:54  23  ,ca6
10:43:54  24  ,ca8
10:43:54  25  ,ca10
10:43:54  26  ,ca12
10:43:54  27  ,ca14
10:43:54  28  ,ca16
10:43:54  29  ,ca18
10:43:54  30  --
10:43:54  31  ,cx4
10:43:54  32  ,cx6
10:43:54  33  ,cx8
10:43:54  34  ,cx10
10:43:54  35  ,cx12
10:43:54  36  ,cx14
10:43:54  37  ,cx16
10:43:54  38  ,cx18
10:43:54  39  --
10:43:54  40  ,crr4
10:43:54  41  ,crr6
10:43:54  42  ,crr8
10:43:54  43  ,crr10
10:43:54  44  ,crr12
10:43:54  45  ,crr14
10:43:54  46  ,crr16
10:43:54  47  ,crr18
10:43:54  48  --
10:43:54  49  ,hh
10:43:54  50  ,d
10:43:54  51  ,w
10:43:54  52  ,mpm
10:43:54  53  ,mph
10:43:54  54  FROM svm6122
10:43:54  55  ORDER BY ydate
10:43:54  56  /

Table created.

Elapsed: 00:00:00.47
10:43:55 SQL> 
10:43:55 SQL> -- rpt
10:43:55 SQL> 
10:43:55 SQL> SELECT
10:43:55   2  pair
10:43:55   3  ,trend
10:43:55   4  ,gatt
10:43:55   5  ,COUNT(pair)
10:43:55   6  ,AVG(g6)
10:43:55   7  FROM svm6142
10:43:55   8  GROUP BY pair,trend,gatt
10:43:55   9  ORDER BY pair,trend,gatt
10:43:55  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      5692 -.00282462
eur_usd 	-1 up	      3762 .004082373
eur_usd 	-1		63
eur_usd 	 1 nup	      6335 -.00260247
eur_usd 	 1 up	      3781 .004489548
eur_usd 	 1		 9

6 rows selected.

Elapsed: 00:00:00.04
10:43:55 SQL> 
10:43:55 SQL> 
10:43:55 SQL> -- Derive NTILE based params:
10:43:55 SQL> 
10:43:55 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.12
10:43:55 SQL> CREATE TABLE svm6162 COMPRESS AS
10:43:55   2  SELECT
10:43:55   3  pair
10:43:55   4  ,ydate
10:43:55   5  ,prdate
10:43:55   6  ,clse
10:43:55   7  ,g6
10:43:55   8  ,gatt
10:43:55   9  ,gattn
10:43:55  10  ,trend
10:43:55  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
10:43:55  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
10:43:55  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
10:43:55  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
10:43:55  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
10:43:55  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
10:43:55  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
10:43:55  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
10:43:55  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
10:43:55  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
10:43:55  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
10:43:55  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
10:43:55  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
10:43:55  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
10:43:55  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
10:43:55  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
10:43:55  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
10:43:55  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
10:43:55  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
10:43:55  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
10:43:55  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
10:43:55  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
10:43:55  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
10:43:55  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
10:43:55  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
10:43:55  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
10:43:55  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
10:43:55  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
10:43:55  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
10:43:55  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
10:43:55  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
10:43:55  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
10:43:55  43  ,hh  att32
10:43:55  44  ,d   att33
10:43:55  45  ,w   att34
10:43:55  46  ,mpm att35
10:43:55  47  ,mph att36
10:43:55  48  ,trend att37
10:43:55  49  FROM svm6142
10:43:55  50  ORDER BY ydate
10:43:55  51  /

Table created.

Elapsed: 00:00:05.01
10:44:00 SQL> 
10:44:00 SQL> -- rpt
10:44:00 SQL> 
10:44:00 SQL> SELECT
10:44:00   2  pair
10:44:00   3  ,trend
10:44:00   4  ,gatt
10:44:00   5  ,COUNT(pair)
10:44:00   6  ,AVG(g6)
10:44:00   7  FROM svm6162
10:44:00   8  GROUP BY pair,trend,gatt
10:44:00   9  ORDER BY pair,trend,gatt
10:44:00  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      5692 -.00282462
eur_usd 	-1 up	      3762 .004082373
eur_usd 	-1		63
eur_usd 	 1 nup	      6335 -.00260247
eur_usd 	 1 up	      3781 .004489548
eur_usd 	 1		 9

6 rows selected.

Elapsed: 00:00:00.03
10:44:00 SQL> 
10:44:00 SQL> -- I comment out sections related to score-feedback.
10:44:00 SQL> -- I tested score-feeback and it hurts results:
10:44:00 SQL> 
10:44:00 SQL> -- CREATE OR REPLACE VIEW sc12 AS
10:44:00 SQL> -- SELECT
10:44:00 SQL> -- m.pair
10:44:00 SQL> -- ,m.ydate
10:44:00 SQL> -- ,m.prdate
10:44:00 SQL> -- ,l.score score_long
10:44:00 SQL> -- ,s.score score_short
10:44:00 SQL> -- ,m.g6
10:44:00 SQL> -- FROM svm62scores l,svm62scores s,svm6162 m
10:44:00 SQL> -- WHERE l.targ='gatt'
10:44:00 SQL> -- AND	 s.targ='gattn'
10:44:00 SQL> -- AND l.prdate = s.prdate
10:44:00 SQL> -- AND l.prdate = m.prdate
10:44:00 SQL> -- -- Speed things up:
10:44:00 SQL> -- AND l.pair = '&1'
10:44:00 SQL> -- AND s.pair = '&1'
10:44:00 SQL> -- /
10:44:00 SQL> --
10:44:00 SQL> -- DROP TABLE score_corr;
10:44:00 SQL> --
10:44:00 SQL> -- CREATE TABLE score_corr COMPRESS AS
10:44:00 SQL> -- SELECT
10:44:00 SQL> -- pair
10:44:00 SQL> -- -- ,ydate
10:44:00 SQL> -- ,prdate
10:44:00 SQL> -- -- Find corr() tween score and g6 over 2 day period:
10:44:00 SQL> -- ,CORR((score_long - score_short),g6)
10:44:00 SQL> --   OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 2*24*60/5 PRECEDING AND CURRENT ROW)sc_corr
10:44:00 SQL> -- FROM sc12
10:44:00 SQL> -- /
10:44:00 SQL> 
10:44:00 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.27
10:44:00 SQL> 
10:44:00 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.29
10:44:01 SQL> 
10:44:01 SQL> CREATE TABLE modsrc COMPRESS AS
10:44:01   2  SELECT
10:44:01   3  pair
10:44:01   4  ,ydate
10:44:01   5  ,prdate
10:44:01   6  ,trend
10:44:01   7  ,g6
10:44:01   8  ,gatt
10:44:01   9  ,gattn
10:44:01  10  ,SUM(g6)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g00
10:44:01  11  ,SUM(g6)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g01
10:44:01  12  ,SUM(g6)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g02
10:44:01  13  ,SUM(g6)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g03
10:44:01  14  ,SUM(g6)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g04
10:44:01  15  ,SUM(g6)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g05
10:44:01  16  ,SUM(g6)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g06
10:44:01  17  ,SUM(g6)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g07
10:44:01  18  ,SUM(g6)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g08
10:44:01  19  ,SUM(g6)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g09
10:44:01  20  ,SUM(g6)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g10
10:44:01  21  ,SUM(g6)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g11
10:44:01  22  ,SUM(g6)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g12
10:44:01  23  ,SUM(g6)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g13
10:44:01  24  ,SUM(g6)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g14
10:44:01  25  ,SUM(g6)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g15
10:44:01  26  ,SUM(g6)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g16
10:44:01  27  ,SUM(g6)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g17
10:44:01  28  ,SUM(g6)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g18
10:44:01  29  ,SUM(g6)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g19
10:44:01  30  ,SUM(g6)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g20
10:44:01  31  ,SUM(g6)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g21
10:44:01  32  ,SUM(g6)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g22
10:44:01  33  ,SUM(g6)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g23
10:44:01  34  ,SUM(g6)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g24
10:44:01  35  ,SUM(g6)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g25
10:44:01  36  ,SUM(g6)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g26
10:44:01  37  ,SUM(g6)OVER(PARTITION BY trend,att27 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g27
10:44:01  38  ,SUM(g6)OVER(PARTITION BY trend,att28 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g28
10:44:01  39  ,SUM(g6)OVER(PARTITION BY trend,att29 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g29
10:44:01  40  ,SUM(g6)OVER(PARTITION BY trend,att30 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g30
10:44:01  41  ,SUM(g6)OVER(PARTITION BY trend,att31 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g31
10:44:01  42  ,SUM(g6)OVER(PARTITION BY trend,att32 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g32
10:44:01  43  ,SUM(g6)OVER(PARTITION BY trend,att33 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g33
10:44:01  44  ,SUM(g6)OVER(PARTITION BY trend,att34 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g34
10:44:01  45  ,SUM(g6)OVER(PARTITION BY trend,att35 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g35
10:44:01  46  ,SUM(g6)OVER(PARTITION BY trend,att36 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g36
10:44:01  47  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g37
10:44:01  48  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*40 PRECEDING AND CURRENT ROW)g38
10:44:01  49  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*30 PRECEDING AND CURRENT ROW)g39
10:44:01  50  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)g40
10:44:01  51  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)g41
10:44:01  52  FROM svm6162
10:44:01  53  /
