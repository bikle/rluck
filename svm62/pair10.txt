
SQL*Plus: Release 11.2.0.1.0 Production on Sun Jan 30 19:55:29 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

19:55:29 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.01
19:55:29 SQL> 19:55:29 SQL> --
19:55:29 SQL> -- pair10.sql
19:55:29 SQL> --
19:55:29 SQL> 
19:55:29 SQL> -- Creates views and tables needed by SVM.
19:55:29 SQL> 
19:55:29 SQL> 
19:55:29 SQL> CREATE OR REPLACE VIEW svm6102 AS
19:55:29   2  SELECT
19:55:29   3  pair
19:55:29   4  ,ydate
19:55:29   5  ,prdate
19:55:29   6  ,rownum rnum -- acts as t in my time-series
19:55:29   7  ,clse
19:55:29   8  -- Derive a bunch of attributes from clse, the latest price:
19:55:29   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
19:55:29  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
19:55:29  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
19:55:29  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
19:55:29  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
19:55:29  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
19:55:29  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
19:55:29  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
19:55:29  17  --
19:55:29  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
19:55:29  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
19:55:29  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
19:55:29  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
19:55:29  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
19:55:29  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
19:55:29  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
19:55:29  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
19:55:29  26  --
19:55:29  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
19:55:29  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
19:55:29  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
19:55:29  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
19:55:29  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
19:55:29  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
19:55:29  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
19:55:29  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
19:55:29  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
19:55:29  36  FROM di5min WHERE pair = '&1'
19:55:29  37  AND ydate > sysdate - 95
19:55:29  38  ORDER BY ydate
19:55:29  39  /
old  36: FROM di5min WHERE pair = '&1'
new  36: FROM di5min WHERE pair = 'aud_usd'

View created.

Elapsed: 00:00:00.15
19:55:29 SQL> 
19:55:29 SQL> -- rpt
19:55:29 SQL> 
19:55:29 SQL> SELECT
19:55:29   2  pair
19:55:29   3  ,COUNT(pair)
19:55:29   4  ,MIN(clse),MAX(clse)
19:55:29   5  ,MIN(avg6),MAX(avg6)
19:55:29   6  ,MIN(ydate),MAX(ydate)
19:55:29   7  FROM svm6102
19:55:29   8  GROUP BY pair
19:55:29   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
aud_usd       19175	.95405	   1.0246 .957141438 1.02282723 2010-10-27 20:00:00 2011-01-28 21:55:00

Elapsed: 00:00:00.81
19:55:30 SQL> 
19:55:30 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
19:55:30 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.11
19:55:30 SQL> CREATE TABLE svm6122 COMPRESS AS
19:55:30   2  SELECT
19:55:30   3  pair
19:55:30   4  ,ydate
19:55:30   5  ,prdate
19:55:30   6  ,clse
19:55:30   7  -- g6 is important. I want to predict g6:
19:55:30   8  ,ld6 - clse g6
19:55:30   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
19:55:30  10  -- I want more attributes from the ones I derived above:
19:55:30  11  -- clse relation to moving-min
19:55:30  12  ,clse-min4  cm4
19:55:30  13  ,clse-min6  cm6
19:55:30  14  ,clse-min8  cm8
19:55:30  15  ,clse-min10 cm10
19:55:30  16  ,clse-min12 cm12
19:55:30  17  ,clse-min14 cm14
19:55:30  18  ,clse-min16 cm16
19:55:30  19  ,clse-min18 cm18
19:55:30  20  -- clse relation to moving-avg
19:55:30  21  ,clse-avg4  ca4
19:55:30  22  ,clse-avg6  ca6
19:55:30  23  ,clse-avg8  ca8
19:55:30  24  ,clse-avg10 ca10
19:55:30  25  ,clse-avg12 ca12
19:55:30  26  ,clse-avg14 ca14
19:55:30  27  ,clse-avg16 ca16
19:55:30  28  ,clse-avg18 ca18
19:55:30  29  -- clse relation to moving-max
19:55:30  30  ,clse-max4  cx4
19:55:30  31  ,clse-max6  cx6
19:55:30  32  ,clse-max8  cx8
19:55:30  33  ,clse-max10 cx10
19:55:30  34  ,clse-max12 cx12
19:55:30  35  ,clse-max14 cx14
19:55:30  36  ,clse-max16 cx16
19:55:30  37  ,clse-max18 cx18
19:55:30  38  -- Derive more attributes.
19:55:30  39  -- I want to use CORR() here to help SVM see the shape of the series.
19:55:30  40  -- But COVAR_POP is more stable:
19:55:30  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
19:55:30  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
19:55:30  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
19:55:30  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
19:55:30  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
19:55:30  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
19:55:30  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
19:55:30  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
19:55:30  49  -- Derive date related attributes:
19:55:30  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
19:55:30  51  ,0+TO_CHAR(ydate,'D')d
19:55:30  52  ,0+TO_CHAR(ydate,'W')w
19:55:30  53  -- mpm stands for minutes-past-midnight:
19:55:30  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
19:55:30  55  -- mph stands for minutes-past-hour:
19:55:30  56  ,0+TO_CHAR(ydate,'MI')mph
19:55:30  57  FROM svm6102
19:55:30  58  ORDER BY ydate
19:55:30  59  /

Table created.

Elapsed: 00:00:02.12
19:55:32 SQL> 
19:55:32 SQL> -- rpt
19:55:32 SQL> 
19:55:32 SQL> SELECT
19:55:32   2  pair
19:55:32   3  ,COUNT(pair)
19:55:32   4  ,MIN(clse),MAX(clse)
19:55:32   5  ,MIN(ydate),MAX(ydate)
19:55:32   6  FROM svm6122
19:55:32   7  GROUP BY pair
19:55:32   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
aud_usd       19175	.95405	   1.0246 2010-10-27 20:00:00 2011-01-28 21:55:00

Elapsed: 00:00:00.04
19:55:32 SQL> 
19:55:32 SQL> -- Prepare for derivation of NTILE based params:
19:55:32 SQL> 
19:55:32 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.06
19:55:32 SQL> CREATE TABLE svm6142 COMPRESS AS
19:55:32   2  SELECT
19:55:32   3  pair
19:55:32   4  ,ydate
19:55:32   5  ,prdate
19:55:32   6  ,clse
19:55:32   7  ,g6
19:55:32   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
19:55:32   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
19:55:32  10  ,CASE WHEN trend IS NULL THEN 1
19:55:32  11  	    WHEN trend =0      THEN 1
19:55:32  12  	    ELSE trend END trend
19:55:32  13  ,cm4
19:55:32  14  ,cm6
19:55:32  15  ,cm8
19:55:32  16  ,cm10
19:55:32  17  ,cm12
19:55:32  18  ,cm14
19:55:32  19  ,cm16
19:55:32  20  ,cm18
19:55:32  21  --
19:55:32  22  ,ca4
19:55:32  23  ,ca6
19:55:32  24  ,ca8
19:55:32  25  ,ca10
19:55:32  26  ,ca12
19:55:32  27  ,ca14
19:55:32  28  ,ca16
19:55:32  29  ,ca18
19:55:32  30  --
19:55:32  31  ,cx4
19:55:32  32  ,cx6
19:55:32  33  ,cx8
19:55:32  34  ,cx10
19:55:32  35  ,cx12
19:55:32  36  ,cx14
19:55:32  37  ,cx16
19:55:32  38  ,cx18
19:55:32  39  --
19:55:32  40  ,crr4
19:55:32  41  ,crr6
19:55:32  42  ,crr8
19:55:32  43  ,crr10
19:55:32  44  ,crr12
19:55:32  45  ,crr14
19:55:32  46  ,crr16
19:55:32  47  ,crr18
19:55:32  48  --
19:55:32  49  ,hh
19:55:32  50  ,d
19:55:32  51  ,w
19:55:32  52  ,mpm
19:55:32  53  ,mph
19:55:32  54  FROM svm6122
19:55:32  55  ORDER BY ydate
19:55:32  56  /

Table created.

Elapsed: 00:00:00.41
19:55:33 SQL> 
19:55:33 SQL> -- rpt
19:55:33 SQL> 
19:55:33 SQL> SELECT
19:55:33   2  pair
19:55:33   3  ,trend
19:55:33   4  ,gatt
19:55:33   5  ,COUNT(pair)
19:55:33   6  ,AVG(g6)
19:55:33   7  FROM svm6142
19:55:33   8  GROUP BY pair,trend,gatt
19:55:33   9  ORDER BY pair,trend,gatt
19:55:33  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5586 -.00201337
aud_usd 	-1 up	      3655 .003587282
aud_usd 	-1		62
aud_usd 	 1 nup	      6663 -.00191662
aud_usd 	 1 up	      3199 .003859512
aud_usd 	 1		10

6 rows selected.

Elapsed: 00:00:00.04
19:55:33 SQL> 
19:55:33 SQL> 
19:55:33 SQL> -- Derive NTILE based params:
19:55:33 SQL> 
19:55:33 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.06
19:55:33 SQL> CREATE TABLE svm6162 COMPRESS AS
19:55:33   2  SELECT
19:55:33   3  pair
19:55:33   4  ,ydate
19:55:33   5  ,prdate
19:55:33   6  ,clse
19:55:33   7  ,g6
19:55:33   8  ,gatt
19:55:33   9  ,gattn
19:55:33  10  ,trend
19:55:33  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
19:55:33  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
19:55:33  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
19:55:33  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
19:55:33  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
19:55:33  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
19:55:33  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
19:55:33  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
19:55:33  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
19:55:33  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
19:55:33  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
19:55:33  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
19:55:33  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
19:55:33  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
19:55:33  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
19:55:33  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
19:55:33  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
19:55:33  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
19:55:33  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
19:55:33  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
19:55:33  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
19:55:33  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
19:55:33  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
19:55:33  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
19:55:33  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
19:55:33  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
19:55:33  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
19:55:33  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
19:55:33  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
19:55:33  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
19:55:33  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
19:55:33  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
19:55:33  43  ,hh  att32
19:55:33  44  ,d   att33
19:55:33  45  ,w   att34
19:55:33  46  ,mpm att35
19:55:33  47  ,mph att36
19:55:33  48  ,trend att37
19:55:33  49  FROM svm6142
19:55:33  50  ORDER BY ydate
19:55:33  51  /

Table created.

Elapsed: 00:00:04.81
19:55:38 SQL> 
19:55:38 SQL> -- rpt
19:55:38 SQL> 
19:55:38 SQL> SELECT
19:55:38   2  pair
19:55:38   3  ,trend
19:55:38   4  ,gatt
19:55:38   5  ,COUNT(pair)
19:55:38   6  ,AVG(g6)
19:55:38   7  FROM svm6162
19:55:38   8  GROUP BY pair,trend,gatt
19:55:38   9  ORDER BY pair,trend,gatt
19:55:38  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5586 -.00201337
aud_usd 	-1 up	      3655 .003587282
aud_usd 	-1		62
aud_usd 	 1 nup	      6663 -.00191662
aud_usd 	 1 up	      3199 .003859512
aud_usd 	 1		10

6 rows selected.

Elapsed: 00:00:00.03
19:55:38 SQL> 
19:55:38 SQL> 
19:55:38 SQL> CREATE OR REPLACE VIEW sc12 AS
19:55:38   2  SELECT
19:55:38   3  m.pair
19:55:38   4  ,m.ydate
19:55:38   5  ,m.prdate
19:55:38   6  ,l.score score_long
19:55:38   7  ,s.score score_short
19:55:38   8  ,m.g6
19:55:38   9  FROM svm62scores l,svm62scores s,svm6162 m
19:55:38  10  WHERE l.targ='gatt'
19:55:38  11  AND   s.targ='gattn'
19:55:38  12  AND l.prdate = s.prdate
19:55:38  13  AND l.prdate = m.prdate
19:55:38  14  -- Speed things up:
19:55:38  15  AND l.pair = '&1'
19:55:38  16  AND s.pair = '&1'
19:55:38  17  /
old  15: AND l.pair = '&1'
new  15: AND l.pair = 'aud_usd'
old  16: AND s.pair = '&1'
new  16: AND s.pair = 'aud_usd'

View created.

Elapsed: 00:00:00.13
19:55:38 SQL> 
19:55:38 SQL> DROP TABLE score_corr;

Table dropped.

Elapsed: 00:00:00.07
19:55:38 SQL> 
19:55:38 SQL> CREATE TABLE score_corr COMPRESS AS
19:55:38   2  SELECT
19:55:38   3  pair
19:55:38   4  -- ,ydate
19:55:38   5  ,prdate
19:55:38   6  -- Find corr() tween score and g6 over 2 day period:
19:55:38   7  ,CORR((score_long - score_short),g6)
19:55:38   8  	OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 2*24*60/5 PRECEDING AND CURRENT ROW)sc_corr
19:55:38   9  FROM sc12
19:55:38  10  /

Table created.

Elapsed: 00:00:00.33
19:55:38 SQL> 
19:55:38 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.07
19:55:38 SQL> 
19:55:38 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.47
19:55:39 SQL> 
19:55:39 SQL> CREATE TABLE modsrc COMPRESS AS
19:55:39   2  SELECT
19:55:39   3  s.pair
19:55:39   4  ,ydate
19:55:39   5  ,s.prdate
19:55:39   6  ,trend
19:55:39   7  ,g6
19:55:39   8  ,gatt
19:55:39   9  ,gattn
19:55:39  10  ,SUM(g6)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g00
19:55:39  11  ,SUM(g6)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g01
19:55:39  12  ,SUM(g6)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g02
19:55:39  13  ,SUM(g6)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g03
19:55:39  14  ,SUM(g6)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g04
19:55:39  15  ,SUM(g6)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g05
19:55:39  16  ,SUM(g6)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g06
19:55:39  17  ,SUM(g6)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g07
19:55:39  18  ,SUM(g6)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g08
19:55:39  19  ,SUM(g6)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g09
19:55:39  20  ,SUM(g6)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g10
19:55:39  21  ,SUM(g6)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g11
19:55:39  22  ,SUM(g6)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g12
19:55:39  23  ,SUM(g6)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g13
19:55:39  24  ,SUM(g6)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g14
19:55:39  25  ,SUM(g6)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g15
19:55:39  26  ,SUM(g6)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g16
19:55:39  27  ,SUM(g6)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g17
19:55:39  28  ,SUM(g6)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g18
19:55:39  29  ,SUM(g6)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g19
19:55:39  30  ,SUM(g6)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g20
19:55:39  31  ,SUM(g6)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g21
19:55:39  32  ,SUM(g6)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g22
19:55:39  33  ,SUM(g6)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g23
19:55:39  34  ,SUM(g6)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g24
19:55:39  35  ,SUM(g6)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g25
19:55:39  36  ,SUM(g6)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g26
19:55:39  37  ,SUM(g6)OVER(PARTITION BY trend,att27 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g27
19:55:39  38  ,SUM(g6)OVER(PARTITION BY trend,att28 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g28
19:55:39  39  ,SUM(g6)OVER(PARTITION BY trend,att29 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g29
19:55:39  40  ,SUM(g6)OVER(PARTITION BY trend,att30 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g30
19:55:39  41  ,SUM(g6)OVER(PARTITION BY trend,att31 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g31
19:55:39  42  ,SUM(g6)OVER(PARTITION BY trend,att32 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g32
19:55:39  43  ,SUM(g6)OVER(PARTITION BY trend,att33 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g33
19:55:39  44  ,SUM(g6)OVER(PARTITION BY trend,att34 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g34
19:55:39  45  ,SUM(g6)OVER(PARTITION BY trend,att35 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g35
19:55:39  46  ,SUM(g6)OVER(PARTITION BY trend,att36 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g36
19:55:39  47  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g37
19:55:39  48  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*40 PRECEDING AND CURRENT ROW)g38
19:55:39  49  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*30 PRECEDING AND CURRENT ROW)g39
19:55:39  50  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)g40
19:55:39  51  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)g41
19:55:39  52  -- Recent CORR()tween scores and gains:
19:55:39  53  ,NVL(sc_corr,0)sc_corr
19:55:39  54  FROM svm6162 s,score_corr c
19:55:39  55  WHERE s.prdate = c.prdate(+)
19:55:39  56  /

Table created.

Elapsed: 00:00:06.21
19:55:45 SQL> 
19:55:45 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:02.05
19:55:47 SQL> 
19:55:47 SQL> -- rpt
19:55:47 SQL> 
19:55:47 SQL> SELECT
19:55:47   2  pair
19:55:47   3  ,trend
19:55:47   4  ,gatt
19:55:47   5  ,COUNT(pair)
19:55:47   6  ,AVG(g6)
19:55:47   7  FROM modsrc
19:55:47   8  GROUP BY pair,trend,gatt
19:55:47   9  ORDER BY pair,trend,gatt
19:55:47  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5586 -.00201337
aud_usd 	-1 up	      3655 .003587282
aud_usd 	-1		62
aud_usd 	 1 nup	      6663 -.00191662
aud_usd 	 1 up	      3199 .003859512
aud_usd 	 1		10

6 rows selected.

Elapsed: 00:00:00.03
19:55:47 SQL> 
19:55:47 SQL> 
19:55:47 SQL> SELECT pair,COUNT(pair)FROM svm6102 GROUP BY pair;

PAIR	COUNT(PAIR)
------- -----------
aud_usd       19175

Elapsed: 00:00:00.80
19:55:48 SQL> 
19:55:48 SQL> SELECT pair,COUNT(pair)FROM modsrc GROUP BY pair;

PAIR	COUNT(PAIR)
------- -----------
aud_usd       19175

Elapsed: 00:00:00.01
19:55:48 SQL> 
19:55:48 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
