
SQL*Plus: Release 11.2.0.1.0 Production on Thu Feb 3 22:46:19 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

22:46:20 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
22:46:20 SQL> 22:46:20 SQL> --
22:46:20 SQL> -- pair10.sql
22:46:20 SQL> --
22:46:20 SQL> 
22:46:20 SQL> -- Creates views and tables needed by SVM.
22:46:20 SQL> 
22:46:20 SQL> 
22:46:20 SQL> CREATE OR REPLACE VIEW svm6102 AS
22:46:20   2  SELECT
22:46:20   3  pair
22:46:20   4  ,ydate
22:46:20   5  ,prdate
22:46:20   6  ,rownum rnum -- acts as t in my time-series
22:46:20   7  ,clse
22:46:20   8  -- Derive a bunch of attributes from clse, the latest price:
22:46:20   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
22:46:20  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
22:46:20  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
22:46:20  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
22:46:20  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
22:46:20  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
22:46:20  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
22:46:20  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
22:46:20  17  --
22:46:20  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
22:46:20  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
22:46:20  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
22:46:20  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
22:46:20  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
22:46:20  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
22:46:20  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
22:46:20  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
22:46:20  26  --
22:46:20  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
22:46:20  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
22:46:20  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
22:46:20  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
22:46:20  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
22:46:20  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
22:46:20  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
22:46:20  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
22:46:20  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
22:46:20  36  FROM di5min WHERE pair = '&1'
22:46:20  37  AND ydate > sysdate - 95
22:46:20  38  ORDER BY ydate
22:46:20  39  /
old  36: FROM di5min WHERE pair = '&1'
new  36: FROM di5min WHERE pair = 'eur_jpy'

View created.

Elapsed: 00:00:00.09
22:46:20 SQL> 
22:46:20 SQL> -- rpt
22:46:20 SQL> 
22:46:20 SQL> SELECT
22:46:20   2  pair
22:46:20   3  ,COUNT(pair)
22:46:20   4  ,MIN(clse),MAX(clse)
22:46:20   5  ,MIN(avg6),MAX(avg6)
22:46:20   6  ,MIN(ydate),MAX(ydate)
22:46:20   7  FROM svm6102
22:46:20   8  GROUP BY pair
22:46:20   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_jpy       19689 106.906797	115.36994 107.120556 115.110615 2010-10-31 22:50:00 2011-02-03 21:55:00

Elapsed: 00:00:00.82
22:46:21 SQL> 
22:46:21 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
22:46:21 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.45
22:46:21 SQL> CREATE TABLE svm6122 COMPRESS AS
22:46:21   2  SELECT
22:46:21   3  pair
22:46:21   4  ,ydate
22:46:21   5  ,prdate
22:46:21   6  ,clse
22:46:21   7  -- g6 is important. I want to predict g6:
22:46:21   8  ,ld6 - clse g6
22:46:21   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
22:46:21  10  -- I want more attributes from the ones I derived above:
22:46:21  11  -- clse relation to moving-min
22:46:21  12  ,clse-min4  cm4
22:46:21  13  ,clse-min6  cm6
22:46:21  14  ,clse-min8  cm8
22:46:21  15  ,clse-min10 cm10
22:46:21  16  ,clse-min12 cm12
22:46:21  17  ,clse-min14 cm14
22:46:21  18  ,clse-min16 cm16
22:46:21  19  ,clse-min18 cm18
22:46:21  20  -- clse relation to moving-avg
22:46:21  21  ,clse-avg4  ca4
22:46:21  22  ,clse-avg6  ca6
22:46:21  23  ,clse-avg8  ca8
22:46:21  24  ,clse-avg10 ca10
22:46:21  25  ,clse-avg12 ca12
22:46:21  26  ,clse-avg14 ca14
22:46:21  27  ,clse-avg16 ca16
22:46:21  28  ,clse-avg18 ca18
22:46:21  29  -- clse relation to moving-max
22:46:21  30  ,clse-max4  cx4
22:46:21  31  ,clse-max6  cx6
22:46:21  32  ,clse-max8  cx8
22:46:21  33  ,clse-max10 cx10
22:46:21  34  ,clse-max12 cx12
22:46:21  35  ,clse-max14 cx14
22:46:21  36  ,clse-max16 cx16
22:46:21  37  ,clse-max18 cx18
22:46:21  38  -- Derive more attributes.
22:46:21  39  -- I want to use CORR() here to help SVM see the shape of the series.
22:46:21  40  -- But COVAR_POP is more stable:
22:46:21  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
22:46:21  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
22:46:21  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
22:46:21  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
22:46:21  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
22:46:21  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
22:46:21  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
22:46:21  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
22:46:21  49  -- Derive date related attributes:
22:46:21  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:46:21  51  ,0+TO_CHAR(ydate,'D')d
22:46:21  52  ,0+TO_CHAR(ydate,'W')w
22:46:21  53  -- mpm stands for minutes-past-midnight:
22:46:21  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:46:21  55  -- mph stands for minutes-past-hour:
22:46:21  56  ,0+TO_CHAR(ydate,'MI')mph
22:46:21  57  FROM svm6102
22:46:21  58  ORDER BY ydate
22:46:21  59  /

Table created.

Elapsed: 00:00:02.20
22:46:23 SQL> 
22:46:23 SQL> -- rpt
22:46:23 SQL> 
22:46:23 SQL> SELECT
22:46:23   2  pair
22:46:23   3  ,COUNT(pair)
22:46:23   4  ,MIN(clse),MAX(clse)
22:46:23   5  ,MIN(ydate),MAX(ydate)
22:46:23   6  FROM svm6122
22:46:23   7  GROUP BY pair
22:46:23   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_jpy       19689 106.906797	115.36994 2010-10-31 22:50:00 2011-02-03 21:55:00

Elapsed: 00:00:00.04
22:46:23 SQL> 
22:46:23 SQL> -- Prepare for derivation of NTILE based params:
22:46:23 SQL> 
22:46:23 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.13
22:46:23 SQL> CREATE TABLE svm6142 COMPRESS AS
22:46:23   2  SELECT
22:46:23   3  pair
22:46:23   4  ,ydate
22:46:23   5  ,prdate
22:46:23   6  ,clse
22:46:23   7  ,g6
22:46:23   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
22:46:23   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
22:46:23  10  ,CASE WHEN trend IS NULL THEN 1
22:46:23  11  	    WHEN trend =0      THEN 1
22:46:23  12  	    ELSE trend END trend
22:46:23  13  ,cm4
22:46:23  14  ,cm6
22:46:23  15  ,cm8
22:46:23  16  ,cm10
22:46:23  17  ,cm12
22:46:23  18  ,cm14
22:46:23  19  ,cm16
22:46:23  20  ,cm18
22:46:23  21  --
22:46:23  22  ,ca4
22:46:23  23  ,ca6
22:46:23  24  ,ca8
22:46:23  25  ,ca10
22:46:23  26  ,ca12
22:46:23  27  ,ca14
22:46:23  28  ,ca16
22:46:23  29  ,ca18
22:46:23  30  --
22:46:23  31  ,cx4
22:46:23  32  ,cx6
22:46:23  33  ,cx8
22:46:23  34  ,cx10
22:46:23  35  ,cx12
22:46:23  36  ,cx14
22:46:23  37  ,cx16
22:46:23  38  ,cx18
22:46:23  39  --
22:46:23  40  ,crr4
22:46:23  41  ,crr6
22:46:23  42  ,crr8
22:46:23  43  ,crr10
22:46:23  44  ,crr12
22:46:23  45  ,crr14
22:46:23  46  ,crr16
22:46:23  47  ,crr18
22:46:23  48  --
22:46:23  49  ,hh
22:46:23  50  ,d
22:46:23  51  ,w
22:46:23  52  ,mpm
22:46:23  53  ,mph
22:46:23  54  FROM svm6122
22:46:23  55  ORDER BY ydate
22:46:23  56  /

Table created.

Elapsed: 00:00:00.41
22:46:24 SQL> 
22:46:24 SQL> -- rpt
22:46:24 SQL> 
22:46:24 SQL> SELECT
22:46:24   2  pair
22:46:24   3  ,trend
22:46:24   4  ,gatt
22:46:24   5  ,COUNT(pair)
22:46:24   6  ,AVG(g6)
22:46:24   7  FROM svm6142
22:46:24   8  GROUP BY pair,trend,gatt
22:46:24   9  ORDER BY pair,trend,gatt
22:46:24  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_jpy 	-1 nup	      4628 -.33625665
eur_jpy 	-1 up	      4924 .274643538
eur_jpy 	-1		72
eur_jpy 	 1 nup	      5052 -.27738911
eur_jpy 	 1 up	      5013  .30039242

Elapsed: 00:00:00.04
22:46:24 SQL> 
22:46:24 SQL> 
22:46:24 SQL> -- Derive NTILE based params:
22:46:24 SQL> 
22:46:24 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.04
22:46:24 SQL> CREATE TABLE svm6162 COMPRESS AS
22:46:24   2  SELECT
22:46:24   3  pair
22:46:24   4  ,ydate
22:46:24   5  ,prdate
22:46:24   6  ,clse
22:46:24   7  ,g6
22:46:24   8  ,gatt
22:46:24   9  ,gattn
22:46:24  10  ,trend
22:46:24  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
22:46:24  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
22:46:24  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
22:46:24  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
22:46:24  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
22:46:24  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
22:46:24  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
22:46:24  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
22:46:24  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
22:46:24  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
22:46:24  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
22:46:24  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
22:46:24  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
22:46:24  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
22:46:24  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
22:46:24  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
22:46:24  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
22:46:24  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
22:46:24  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
22:46:24  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
22:46:24  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
22:46:24  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
22:46:24  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
22:46:24  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
22:46:24  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
22:46:24  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
22:46:24  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
22:46:24  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
22:46:24  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
22:46:24  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
22:46:24  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
22:46:24  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
22:46:24  43  ,hh  att32
22:46:24  44  ,d   att33
22:46:24  45  ,w   att34
22:46:24  46  ,mpm att35
22:46:24  47  ,mph att36
22:46:24  48  ,trend att37
22:46:24  49  FROM svm6142
22:46:24  50  ORDER BY ydate
22:46:24  51  /

Table created.

Elapsed: 00:00:05.16
22:46:29 SQL> 
22:46:29 SQL> -- rpt
22:46:29 SQL> 
22:46:29 SQL> SELECT
22:46:29   2  pair
22:46:29   3  ,trend
22:46:29   4  ,gatt
22:46:29   5  ,COUNT(pair)
22:46:29   6  ,AVG(g6)
22:46:29   7  FROM svm6162
22:46:29   8  GROUP BY pair,trend,gatt
22:46:29   9  ORDER BY pair,trend,gatt
22:46:29  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_jpy 	-1 nup	      4628 -.33625665
eur_jpy 	-1 up	      4924 .274643538
eur_jpy 	-1		72
eur_jpy 	 1 nup	      5052 -.27738911
eur_jpy 	 1 up	      5013  .30039242

Elapsed: 00:00:00.03
22:46:29 SQL> 
22:46:29 SQL> 
22:46:29 SQL> CREATE OR REPLACE VIEW sc12 AS
22:46:29   2  SELECT
22:46:29   3  m.pair
22:46:29   4  ,m.ydate
22:46:29   5  ,m.prdate
22:46:29   6  ,l.score score_long
22:46:29   7  ,s.score score_short
22:46:29   8  ,m.g6
22:46:29   9  FROM svm62scores l,svm62scores s,svm6162 m
22:46:29  10  WHERE l.targ='gatt'
22:46:29  11  AND   s.targ='gattn'
22:46:29  12  AND l.prdate = s.prdate
22:46:29  13  AND l.prdate = m.prdate
22:46:29  14  -- Speed things up:
22:46:29  15  AND l.pair = '&1'
22:46:29  16  AND s.pair = '&1'
22:46:29  17  /
old  15: AND l.pair = '&1'
new  15: AND l.pair = 'eur_jpy'
old  16: AND s.pair = '&1'
new  16: AND s.pair = 'eur_jpy'

View created.

Elapsed: 00:00:00.11
22:46:29 SQL> 
22:46:29 SQL> DROP TABLE score_corr;

Table dropped.

Elapsed: 00:00:00.05
22:46:29 SQL> 
22:46:29 SQL> CREATE TABLE score_corr COMPRESS AS
22:46:29   2  SELECT
22:46:29   3  pair
22:46:29   4  -- ,ydate
22:46:29   5  ,prdate
22:46:29   6  -- Find corr() tween score and g6 over 2 day period:
22:46:29   7  ,CORR((score_long - score_short),g6)
22:46:29   8  	OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 2*24*60/5 PRECEDING AND CURRENT ROW)sc_corr
22:46:29   9  FROM sc12
22:46:29  10  /

Table created.

Elapsed: 00:00:00.22
22:46:29 SQL> 
22:46:29 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.05
22:46:30 SQL> 
22:46:30 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.41
22:46:30 SQL> 
22:46:30 SQL> CREATE TABLE modsrc COMPRESS AS
22:46:30   2  SELECT
22:46:30   3  s.pair
22:46:30   4  ,ydate
22:46:30   5  ,s.prdate
22:46:30   6  ,trend
22:46:30   7  ,g6
22:46:30   8  ,gatt
22:46:30   9  ,gattn
22:46:30  10  ,SUM(g6)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g00
22:46:30  11  ,SUM(g6)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g01
22:46:30  12  ,SUM(g6)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g02
22:46:30  13  ,SUM(g6)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g03
22:46:30  14  ,SUM(g6)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g04
22:46:30  15  ,SUM(g6)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g05
22:46:30  16  ,SUM(g6)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g06
22:46:30  17  ,SUM(g6)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g07
22:46:30  18  ,SUM(g6)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g08
22:46:30  19  ,SUM(g6)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g09
22:46:30  20  ,SUM(g6)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g10
22:46:30  21  ,SUM(g6)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g11
22:46:30  22  ,SUM(g6)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g12
22:46:30  23  ,SUM(g6)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g13
22:46:30  24  ,SUM(g6)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g14
22:46:30  25  ,SUM(g6)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g15
22:46:30  26  ,SUM(g6)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g16
22:46:30  27  ,SUM(g6)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g17
22:46:30  28  ,SUM(g6)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g18
22:46:30  29  ,SUM(g6)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g19
22:46:30  30  ,SUM(g6)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g20
22:46:30  31  ,SUM(g6)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g21
22:46:30  32  ,SUM(g6)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g22
22:46:30  33  ,SUM(g6)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g23
22:46:30  34  ,SUM(g6)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g24
22:46:30  35  ,SUM(g6)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g25
22:46:30  36  ,SUM(g6)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g26
22:46:30  37  ,SUM(g6)OVER(PARTITION BY trend,att27 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g27
22:46:30  38  ,SUM(g6)OVER(PARTITION BY trend,att28 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g28
22:46:30  39  ,SUM(g6)OVER(PARTITION BY trend,att29 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g29
22:46:30  40  ,SUM(g6)OVER(PARTITION BY trend,att30 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g30
22:46:30  41  ,SUM(g6)OVER(PARTITION BY trend,att31 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g31
22:46:30  42  ,SUM(g6)OVER(PARTITION BY trend,att32 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g32
22:46:30  43  ,SUM(g6)OVER(PARTITION BY trend,att33 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g33
22:46:30  44  ,SUM(g6)OVER(PARTITION BY trend,att34 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g34
22:46:30  45  ,SUM(g6)OVER(PARTITION BY trend,att35 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g35
22:46:30  46  ,SUM(g6)OVER(PARTITION BY trend,att36 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g36
22:46:30  47  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g37
22:46:30  48  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*40 PRECEDING AND CURRENT ROW)g38
22:46:30  49  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*30 PRECEDING AND CURRENT ROW)g39
22:46:30  50  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)g40
22:46:30  51  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)g41
22:46:30  52  -- Recent CORR()tween scores and gains:
22:46:30  53  ,NVL(sc_corr,0)sc_corr
22:46:30  54  FROM svm6162 s,score_corr c
22:46:30  55  WHERE s.prdate = c.prdate(+)
22:46:30  56  /

Table created.

Elapsed: 00:00:06.67
22:46:37 SQL> 
22:46:37 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:02.54
22:46:39 SQL> 
22:46:39 SQL> -- rpt
22:46:39 SQL> 
22:46:39 SQL> SELECT
22:46:39   2  pair
22:46:39   3  ,trend
22:46:39   4  ,gatt
22:46:39   5  ,COUNT(pair)
22:46:39   6  ,AVG(g6)
22:46:39   7  FROM modsrc
22:46:39   8  GROUP BY pair,trend,gatt
22:46:39   9  ORDER BY pair,trend,gatt
22:46:39  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_jpy 	-1 nup	      4628 -.33625665
eur_jpy 	-1 up	      4924 .274643538
eur_jpy 	-1		72
eur_jpy 	 1 nup	      5052 -.27738911
eur_jpy 	 1 up	      5013  .30039242

Elapsed: 00:00:00.03
22:46:39 SQL> 
22:46:39 SQL> 
22:46:39 SQL> SELECT pair,COUNT(pair)FROM svm6102 GROUP BY pair;

PAIR	COUNT(PAIR)
------- -----------
eur_jpy       19689

Elapsed: 00:00:00.80
22:46:40 SQL> 
22:46:40 SQL> SELECT pair,COUNT(pair)FROM modsrc GROUP BY pair;

PAIR	COUNT(PAIR)
------- -----------
eur_jpy       19689

Elapsed: 00:00:00.01
22:46:40 SQL> 
22:46:40 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
