
SQL*Plus: Release 11.2.0.1.0 Production on Wed Feb 16 06:12:47 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

06:12:47 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
06:12:47 SQL> 06:12:47 SQL> --
06:12:47 SQL> -- pair10.sql
06:12:47 SQL> --
06:12:47 SQL> 
06:12:47 SQL> -- Creates views and tables needed by SVM.
06:12:47 SQL> 
06:12:47 SQL> 
06:12:47 SQL> CREATE OR REPLACE VIEW svm6102 AS
06:12:47   2  SELECT
06:12:47   3  pair
06:12:47   4  ,ydate
06:12:47   5  ,prdate
06:12:47   6  ,rownum rnum -- acts as t in my time-series
06:12:47   7  ,clse
06:12:47   8  -- Derive a bunch of attributes from clse, the latest price:
06:12:47   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
06:12:47  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
06:12:47  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
06:12:47  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
06:12:47  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
06:12:47  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
06:12:47  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
06:12:47  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
06:12:47  17  --
06:12:47  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
06:12:47  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
06:12:47  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
06:12:47  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
06:12:47  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
06:12:47  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
06:12:47  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
06:12:47  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
06:12:47  26  --
06:12:47  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
06:12:47  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
06:12:47  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
06:12:47  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
06:12:47  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
06:12:47  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
06:12:47  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
06:12:47  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
06:12:47  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
06:12:47  36  FROM di5min WHERE pair = '&1'
06:12:47  37  AND ydate > sysdate - 95
06:12:47  38  ORDER BY ydate
06:12:47  39  /
old  36: FROM di5min WHERE pair = '&1'
new  36: FROM di5min WHERE pair = 'eur_jpy'

View created.

Elapsed: 00:00:00.04
06:12:47 SQL> 
06:12:47 SQL> -- rpt
06:12:47 SQL> 
06:12:47 SQL> SELECT
06:12:47   2  pair
06:12:47   3  ,COUNT(pair)
06:12:47   4  ,MIN(clse),MAX(clse)
06:12:47   5  ,MIN(avg6),MAX(avg6)
06:12:47   6  ,MIN(ydate),MAX(ydate)
06:12:47   7  FROM svm6102
06:12:47   8  GROUP BY pair
06:12:47   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_jpy       19177 106.906797 114.875523 107.120556   114.7435 2010-11-14 20:55:00 2011-02-16 05:55:00

Elapsed: 00:00:00.82
06:12:48 SQL> 
06:12:48 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
06:12:48 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.36
06:12:48 SQL> CREATE TABLE svm6122 COMPRESS AS
06:12:48   2  SELECT
06:12:48   3  pair
06:12:48   4  ,ydate
06:12:48   5  ,prdate
06:12:48   6  ,clse
06:12:48   7  -- g6 is important. I want to predict g6:
06:12:48   8  ,ld6 - clse g6
06:12:48   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
06:12:48  10  -- I want more attributes from the ones I derived above:
06:12:48  11  -- clse relation to moving-min
06:12:48  12  ,clse-min4  cm4
06:12:48  13  ,clse-min6  cm6
06:12:48  14  ,clse-min8  cm8
06:12:48  15  ,clse-min10 cm10
06:12:48  16  ,clse-min12 cm12
06:12:48  17  ,clse-min14 cm14
06:12:48  18  ,clse-min16 cm16
06:12:48  19  ,clse-min18 cm18
06:12:48  20  -- clse relation to moving-avg
06:12:48  21  ,clse-avg4  ca4
06:12:48  22  ,clse-avg6  ca6
06:12:48  23  ,clse-avg8  ca8
06:12:48  24  ,clse-avg10 ca10
06:12:48  25  ,clse-avg12 ca12
06:12:48  26  ,clse-avg14 ca14
06:12:48  27  ,clse-avg16 ca16
06:12:48  28  ,clse-avg18 ca18
06:12:48  29  -- clse relation to moving-max
06:12:48  30  ,clse-max4  cx4
06:12:48  31  ,clse-max6  cx6
06:12:48  32  ,clse-max8  cx8
06:12:48  33  ,clse-max10 cx10
06:12:48  34  ,clse-max12 cx12
06:12:48  35  ,clse-max14 cx14
06:12:48  36  ,clse-max16 cx16
06:12:48  37  ,clse-max18 cx18
06:12:48  38  -- Derive more attributes.
06:12:48  39  -- I want to use CORR() here to help SVM see the shape of the series.
06:12:48  40  -- But COVAR_POP is more stable:
06:12:48  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
06:12:48  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
06:12:48  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
06:12:48  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
06:12:48  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
06:12:48  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
06:12:48  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
06:12:48  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
06:12:48  49  -- Derive date related attributes:
06:12:48  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
06:12:48  51  ,0+TO_CHAR(ydate,'D')d
06:12:48  52  ,0+TO_CHAR(ydate,'W')w
06:12:48  53  -- mpm stands for minutes-past-midnight:
06:12:48  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
06:12:48  55  -- mph stands for minutes-past-hour:
06:12:48  56  ,0+TO_CHAR(ydate,'MI')mph
06:12:48  57  FROM svm6102
06:12:48  58  ORDER BY ydate
06:12:48  59  /

Table created.

Elapsed: 00:00:02.21
06:12:50 SQL> 
06:12:50 SQL> -- rpt
06:12:50 SQL> 
06:12:50 SQL> SELECT
06:12:50   2  pair
06:12:50   3  ,COUNT(pair)
06:12:50   4  ,MIN(clse),MAX(clse)
06:12:50   5  ,MIN(ydate),MAX(ydate)
06:12:50   6  FROM svm6122
06:12:50   7  GROUP BY pair
06:12:50   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_jpy       19177 106.906797 114.875523 2010-11-14 20:55:00 2011-02-16 05:55:00

Elapsed: 00:00:00.04
06:12:50 SQL> 
06:12:50 SQL> -- Prepare for derivation of NTILE based params:
06:12:50 SQL> 
06:12:50 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.21
06:12:51 SQL> CREATE TABLE svm6142 COMPRESS AS
06:12:51   2  SELECT
06:12:51   3  pair
06:12:51   4  ,ydate
06:12:51   5  ,prdate
06:12:51   6  ,clse
06:12:51   7  ,g6
06:12:51   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
06:12:51   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
06:12:51  10  ,CASE WHEN trend IS NULL THEN 1
06:12:51  11  	    WHEN trend =0      THEN 1
06:12:51  12  	    ELSE trend END trend
06:12:51  13  ,cm4
06:12:51  14  ,cm6
06:12:51  15  ,cm8
06:12:51  16  ,cm10
06:12:51  17  ,cm12
06:12:51  18  ,cm14
06:12:51  19  ,cm16
06:12:51  20  ,cm18
06:12:51  21  --
06:12:51  22  ,ca4
06:12:51  23  ,ca6
06:12:51  24  ,ca8
06:12:51  25  ,ca10
06:12:51  26  ,ca12
06:12:51  27  ,ca14
06:12:51  28  ,ca16
06:12:51  29  ,ca18
06:12:51  30  --
06:12:51  31  ,cx4
06:12:51  32  ,cx6
06:12:51  33  ,cx8
06:12:51  34  ,cx10
06:12:51  35  ,cx12
06:12:51  36  ,cx14
06:12:51  37  ,cx16
06:12:51  38  ,cx18
06:12:51  39  --
06:12:51  40  ,crr4
06:12:51  41  ,crr6
06:12:51  42  ,crr8
06:12:51  43  ,crr10
06:12:51  44  ,crr12
06:12:51  45  ,crr14
06:12:51  46  ,crr16
06:12:51  47  ,crr18
06:12:51  48  --
06:12:51  49  ,hh
06:12:51  50  ,d
06:12:51  51  ,w
06:12:51  52  ,mpm
06:12:51  53  ,mph
06:12:51  54  FROM svm6122
06:12:51  55  ORDER BY ydate
06:12:51  56  /

Table created.

Elapsed: 00:00:00.40
06:12:51 SQL> 
06:12:51 SQL> -- rpt
06:12:51 SQL> 
06:12:51 SQL> SELECT
06:12:51   2  pair
06:12:51   3  ,trend
06:12:51   4  ,gatt
06:12:51   5  ,COUNT(pair)
06:12:51   6  ,AVG(g6)
06:12:51   7  FROM svm6142
06:12:51   8  GROUP BY pair,trend,gatt
06:12:51   9  ORDER BY pair,trend,gatt
06:12:51  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_jpy 	-1 nup	      4148 -.32466104
eur_jpy 	-1 up	      4795 .255701443
eur_jpy 	-1		17
eur_jpy 	 1 nup	      4848 -.26830335
eur_jpy 	 1 up	      5314 .269952513
eur_jpy 	 1		55

6 rows selected.

Elapsed: 00:00:00.05
06:12:51 SQL> 
06:12:51 SQL> 
06:12:51 SQL> -- Derive NTILE based params:
06:12:51 SQL> 
06:12:51 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.24
06:12:51 SQL> CREATE TABLE svm6162 COMPRESS AS
06:12:51   2  SELECT
06:12:51   3  pair
06:12:51   4  ,ydate
06:12:51   5  ,prdate
06:12:51   6  ,clse
06:12:51   7  ,g6
06:12:51   8  ,gatt
06:12:51   9  ,gattn
06:12:51  10  ,trend
06:12:51  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
06:12:51  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
06:12:51  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
06:12:51  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
06:12:51  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
06:12:51  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
06:12:51  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
06:12:51  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
06:12:51  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
06:12:51  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
06:12:51  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
06:12:51  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
06:12:51  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
06:12:51  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
06:12:51  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
06:12:51  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
06:12:51  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
06:12:51  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
06:12:51  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
06:12:51  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
06:12:51  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
06:12:51  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
06:12:51  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
06:12:51  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
06:12:51  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
06:12:51  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
06:12:51  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
06:12:51  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
06:12:51  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
06:12:51  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
06:12:51  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
06:12:51  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
06:12:51  43  ,hh  att32
06:12:51  44  ,d   att33
06:12:51  45  ,w   att34
06:12:51  46  ,mpm att35
06:12:51  47  ,mph att36
06:12:51  48  ,trend att37
06:12:51  49  FROM svm6142
06:12:51  50  ORDER BY ydate
06:12:51  51  /

Table created.

Elapsed: 00:00:04.88
06:12:56 SQL> 
06:12:56 SQL> -- rpt
06:12:56 SQL> 
06:12:56 SQL> SELECT
06:12:56   2  pair
06:12:56   3  ,trend
06:12:56   4  ,gatt
06:12:56   5  ,COUNT(pair)
06:12:56   6  ,AVG(g6)
06:12:56   7  FROM svm6162
06:12:56   8  GROUP BY pair,trend,gatt
06:12:56   9  ORDER BY pair,trend,gatt
06:12:56  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_jpy 	-1 nup	      4148 -.32466104
eur_jpy 	-1 up	      4795 .255701443
eur_jpy 	-1		17
eur_jpy 	 1 nup	      4848 -.26830335
eur_jpy 	 1 up	      5314 .269952513
eur_jpy 	 1		55

6 rows selected.

Elapsed: 00:00:00.03
06:12:56 SQL> 
06:12:56 SQL> -- I comment out sections related to score-feedback.
06:12:56 SQL> -- I tested score-feeback and it hurts results:
06:12:56 SQL> 
06:12:56 SQL> -- CREATE OR REPLACE VIEW sc12 AS
06:12:56 SQL> -- SELECT
06:12:56 SQL> -- m.pair
06:12:56 SQL> -- ,m.ydate
06:12:56 SQL> -- ,m.prdate
06:12:56 SQL> -- ,l.score score_long
06:12:56 SQL> -- ,s.score score_short
06:12:56 SQL> -- ,m.g6
06:12:56 SQL> -- FROM svm62scores l,svm62scores s,svm6162 m
06:12:56 SQL> -- WHERE l.targ='gatt'
06:12:56 SQL> -- AND	 s.targ='gattn'
06:12:56 SQL> -- AND l.prdate = s.prdate
06:12:56 SQL> -- AND l.prdate = m.prdate
06:12:56 SQL> -- -- Speed things up:
06:12:56 SQL> -- AND l.pair = '&1'
06:12:56 SQL> -- AND s.pair = '&1'
06:12:56 SQL> -- /
06:12:56 SQL> --
06:12:56 SQL> -- DROP TABLE score_corr;
06:12:56 SQL> --
06:12:56 SQL> -- CREATE TABLE score_corr COMPRESS AS
06:12:56 SQL> -- SELECT
06:12:56 SQL> -- pair
06:12:56 SQL> -- -- ,ydate
06:12:56 SQL> -- ,prdate
06:12:56 SQL> -- -- Find corr() tween score and g6 over 2 day period:
06:12:56 SQL> -- ,CORR((score_long - score_short),g6)
06:12:56 SQL> --   OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 2*24*60/5 PRECEDING AND CURRENT ROW)sc_corr
06:12:56 SQL> -- FROM sc12
06:12:56 SQL> -- /
06:12:56 SQL> 
06:12:56 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.31
06:12:56 SQL> 
06:12:56 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.27
06:12:57 SQL> 
06:12:57 SQL> CREATE TABLE modsrc COMPRESS AS
06:12:57   2  SELECT
06:12:57   3  pair
06:12:57   4  ,ydate
06:12:57   5  ,prdate
06:12:57   6  ,trend
06:12:57   7  ,g6
06:12:57   8  ,gatt
06:12:57   9  ,gattn
06:12:57  10  ,SUM(g6)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g00
06:12:57  11  ,SUM(g6)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g01
06:12:57  12  ,SUM(g6)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g02
06:12:57  13  ,SUM(g6)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g03
06:12:57  14  ,SUM(g6)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g04
06:12:57  15  ,SUM(g6)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g05
06:12:57  16  ,SUM(g6)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g06
06:12:57  17  ,SUM(g6)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g07
06:12:57  18  ,SUM(g6)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g08
06:12:57  19  ,SUM(g6)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g09
06:12:57  20  ,SUM(g6)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g10
06:12:57  21  ,SUM(g6)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g11
06:12:57  22  ,SUM(g6)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g12
06:12:57  23  ,SUM(g6)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g13
06:12:57  24  ,SUM(g6)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g14
06:12:57  25  ,SUM(g6)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g15
06:12:57  26  ,SUM(g6)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g16
06:12:57  27  ,SUM(g6)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g17
06:12:57  28  ,SUM(g6)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g18
06:12:57  29  ,SUM(g6)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g19
06:12:57  30  ,SUM(g6)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g20
06:12:57  31  ,SUM(g6)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g21
06:12:57  32  ,SUM(g6)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g22
06:12:57  33  ,SUM(g6)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g23
06:12:57  34  ,SUM(g6)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g24
06:12:57  35  ,SUM(g6)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g25
06:12:57  36  ,SUM(g6)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g26
06:12:57  37  ,SUM(g6)OVER(PARTITION BY trend,att27 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g27
06:12:57  38  ,SUM(g6)OVER(PARTITION BY trend,att28 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g28
06:12:57  39  ,SUM(g6)OVER(PARTITION BY trend,att29 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g29
06:12:57  40  ,SUM(g6)OVER(PARTITION BY trend,att30 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g30
06:12:57  41  ,SUM(g6)OVER(PARTITION BY trend,att31 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g31
06:12:57  42  ,SUM(g6)OVER(PARTITION BY trend,att32 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g32
06:12:57  43  ,SUM(g6)OVER(PARTITION BY trend,att33 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g33
06:12:57  44  ,SUM(g6)OVER(PARTITION BY trend,att34 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g34
06:12:57  45  ,SUM(g6)OVER(PARTITION BY trend,att35 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g35
06:12:57  46  ,SUM(g6)OVER(PARTITION BY trend,att36 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g36
06:12:57  47  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g37
06:12:57  48  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*40 PRECEDING AND CURRENT ROW)g38
06:12:57  49  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*30 PRECEDING AND CURRENT ROW)g39
06:12:57  50  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)g40
06:12:57  51  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)g41
06:12:57  52  FROM svm6162
06:12:57  53  /

Table created.

Elapsed: 00:00:06.37
06:13:03 SQL> 
06:13:03 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:02.46
06:13:06 SQL> 
06:13:06 SQL> -- rpt
06:13:06 SQL> 
06:13:06 SQL> SELECT
06:13:06   2  pair
06:13:06   3  ,trend
06:13:06   4  ,gatt
06:13:06   5  ,COUNT(pair)
06:13:06   6  ,AVG(g6)
06:13:06   7  FROM modsrc
06:13:06   8  GROUP BY pair,trend,gatt
06:13:06   9  ORDER BY pair,trend,gatt
06:13:06  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_jpy 	-1 nup	      4148 -.32466104
eur_jpy 	-1 up	      4795 .255701443
eur_jpy 	-1		17
eur_jpy 	 1 nup	      4848 -.26830335
eur_jpy 	 1 up	      5314 .269952513
eur_jpy 	 1		55

6 rows selected.

Elapsed: 00:00:00.03
06:13:06 SQL> 
06:13:06 SQL> 
06:13:06 SQL> SELECT pair,COUNT(pair)FROM svm6102 GROUP BY pair;

PAIR	COUNT(PAIR)
------- -----------
eur_jpy       19177

Elapsed: 00:00:00.77
06:13:06 SQL> 
06:13:06 SQL> SELECT pair,COUNT(pair)FROM modsrc GROUP BY pair;

PAIR	COUNT(PAIR)
------- -----------
eur_jpy       19177

Elapsed: 00:00:00.00
06:13:06 SQL> 
06:13:06 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
