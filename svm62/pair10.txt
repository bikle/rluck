
SQL*Plus: Release 11.2.0.1.0 Production on Wed Feb 23 06:08:59 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

06:08:59 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
06:08:59 SQL> 06:08:59 SQL> --
06:08:59 SQL> -- pair10.sql
06:08:59 SQL> --
06:08:59 SQL> 
06:08:59 SQL> -- Creates views and tables needed by SVM.
06:08:59 SQL> 
06:08:59 SQL> 
06:08:59 SQL> CREATE OR REPLACE VIEW svm6102 AS
06:08:59   2  SELECT
06:08:59   3  pair
06:08:59   4  ,ydate
06:08:59   5  ,prdate
06:08:59   6  ,rownum rnum -- acts as t in my time-series
06:08:59   7  ,clse
06:08:59   8  -- Derive a bunch of attributes from clse, the latest price:
06:08:59   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
06:08:59  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
06:08:59  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
06:08:59  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
06:08:59  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
06:08:59  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
06:08:59  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
06:08:59  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
06:08:59  17  --
06:08:59  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
06:08:59  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
06:08:59  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
06:08:59  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
06:08:59  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
06:08:59  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
06:08:59  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
06:08:59  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
06:08:59  26  --
06:08:59  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
06:08:59  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
06:08:59  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
06:08:59  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
06:08:59  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
06:08:59  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
06:08:59  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
06:08:59  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
06:08:59  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
06:08:59  36  FROM di5min WHERE pair = '&1'
06:08:59  37  AND ydate > sysdate - 95
06:08:59  38  ORDER BY ydate
06:08:59  39  /
old  36: FROM di5min WHERE pair = '&1'
new  36: FROM di5min WHERE pair = 'usd_jpy'

View created.

Elapsed: 00:00:00.04
06:08:59 SQL> 
06:08:59 SQL> -- rpt
06:08:59 SQL> 
06:08:59 SQL> SELECT
06:08:59   2  pair
06:08:59   3  ,COUNT(pair)
06:08:59   4  ,MIN(clse),MAX(clse)
06:08:59   5  ,MIN(avg6),MAX(avg6)
06:08:59   6  ,MIN(ydate),MAX(ydate)
06:08:59   7  FROM svm6102
06:08:59   8  GROUP BY pair
06:08:59   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_jpy       19164    81.0225	   84.485 81.1881201 84.3105479 2010-11-21 20:55:00 2011-02-23 05:50:00

Elapsed: 00:00:00.85
06:09:00 SQL> 
06:09:00 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
06:09:00 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.31
06:09:01 SQL> CREATE TABLE svm6122 COMPRESS AS
06:09:01   2  SELECT
06:09:01   3  pair
06:09:01   4  ,ydate
06:09:01   5  ,prdate
06:09:01   6  ,clse
06:09:01   7  -- g6 is important. I want to predict g6:
06:09:01   8  ,(ld6 - clse)/clse g6
06:09:01   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
06:09:01  10  -- I want more attributes from the ones I derived above:
06:09:01  11  -- clse relation to moving-min
06:09:01  12  ,clse-min4  cm4
06:09:01  13  ,clse-min6  cm6
06:09:01  14  ,clse-min8  cm8
06:09:01  15  ,clse-min10 cm10
06:09:01  16  ,clse-min12 cm12
06:09:01  17  ,clse-min14 cm14
06:09:01  18  ,clse-min16 cm16
06:09:01  19  ,clse-min18 cm18
06:09:01  20  -- clse relation to moving-avg
06:09:01  21  ,clse-avg4  ca4
06:09:01  22  ,clse-avg6  ca6
06:09:01  23  ,clse-avg8  ca8
06:09:01  24  ,clse-avg10 ca10
06:09:01  25  ,clse-avg12 ca12
06:09:01  26  ,clse-avg14 ca14
06:09:01  27  ,clse-avg16 ca16
06:09:01  28  ,clse-avg18 ca18
06:09:01  29  -- clse relation to moving-max
06:09:01  30  ,clse-max4  cx4
06:09:01  31  ,clse-max6  cx6
06:09:01  32  ,clse-max8  cx8
06:09:01  33  ,clse-max10 cx10
06:09:01  34  ,clse-max12 cx12
06:09:01  35  ,clse-max14 cx14
06:09:01  36  ,clse-max16 cx16
06:09:01  37  ,clse-max18 cx18
06:09:01  38  -- Derive more attributes.
06:09:01  39  -- I want to use CORR() here to help SVM see the shape of the series.
06:09:01  40  -- But COVAR_POP is more stable:
06:09:01  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
06:09:01  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
06:09:01  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
06:09:01  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
06:09:01  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
06:09:01  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
06:09:01  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
06:09:01  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
06:09:01  49  -- Derive date related attributes:
06:09:01  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
06:09:01  51  ,0+TO_CHAR(ydate,'D')d
06:09:01  52  ,0+TO_CHAR(ydate,'W')w
06:09:01  53  -- mpm stands for minutes-past-midnight:
06:09:01  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
06:09:01  55  -- mph stands for minutes-past-hour:
06:09:01  56  ,0+TO_CHAR(ydate,'MI')mph
06:09:01  57  FROM svm6102
06:09:01  58  WHERE clse > 0
06:09:01  59  ORDER BY ydate
06:09:01  60  /

Table created.

Elapsed: 00:00:02.33
06:09:03 SQL> 
06:09:03 SQL> -- rpt
06:09:03 SQL> 
06:09:03 SQL> SELECT
06:09:03   2  pair
06:09:03   3  ,COUNT(pair)
06:09:03   4  ,MIN(clse),MAX(clse)
06:09:03   5  ,MIN(ydate),MAX(ydate)
06:09:03   6  FROM svm6122
06:09:03   7  GROUP BY pair
06:09:03   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_jpy       19164    81.0225	   84.485 2010-11-21 20:55:00 2011-02-23 05:50:00

Elapsed: 00:00:00.05
06:09:03 SQL> 
06:09:03 SQL> -- Prepare for derivation of NTILE based params:
06:09:03 SQL> 
06:09:03 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.21
06:09:03 SQL> CREATE TABLE svm6142 COMPRESS AS
06:09:03   2  SELECT
06:09:03   3  pair
06:09:03   4  ,ydate
06:09:03   5  ,prdate
06:09:03   6  ,clse
06:09:03   7  ,g6
06:09:03   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
06:09:03   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
06:09:03  10  ,CASE WHEN trend IS NULL THEN 1
06:09:03  11  	    WHEN trend =0      THEN 1
06:09:03  12  	    ELSE trend END trend
06:09:03  13  ,cm4
06:09:03  14  ,cm6
06:09:03  15  ,cm8
06:09:03  16  ,cm10
06:09:03  17  ,cm12
06:09:03  18  ,cm14
06:09:03  19  ,cm16
06:09:03  20  ,cm18
06:09:03  21  --
06:09:03  22  ,ca4
06:09:03  23  ,ca6
06:09:03  24  ,ca8
06:09:03  25  ,ca10
06:09:03  26  ,ca12
06:09:03  27  ,ca14
06:09:03  28  ,ca16
06:09:03  29  ,ca18
06:09:03  30  --
06:09:03  31  ,cx4
06:09:03  32  ,cx6
06:09:03  33  ,cx8
06:09:03  34  ,cx10
06:09:03  35  ,cx12
06:09:03  36  ,cx14
06:09:03  37  ,cx16
06:09:03  38  ,cx18
06:09:03  39  --
06:09:03  40  ,crr4
06:09:03  41  ,crr6
06:09:03  42  ,crr8
06:09:03  43  ,crr10
06:09:03  44  ,crr12
06:09:03  45  ,crr14
06:09:03  46  ,crr16
06:09:03  47  ,crr18
06:09:03  48  --
06:09:03  49  ,hh
06:09:03  50  ,d
06:09:03  51  ,w
06:09:03  52  ,mpm
06:09:03  53  ,mph
06:09:03  54  FROM svm6122
06:09:03  55  ORDER BY ydate
06:09:03  56  /

Table created.

Elapsed: 00:00:00.39
06:09:04 SQL> 
06:09:04 SQL> -- rpt
06:09:04 SQL> 
06:09:04 SQL> SELECT
06:09:04   2  pair
06:09:04   3  ,trend
06:09:04   4  ,gatt
06:09:04   5  ,COUNT(pair)
06:09:04   6  ,AVG(g6)
06:09:04   7  FROM svm6142
06:09:04   8  GROUP BY pair,trend,gatt
06:09:04   9  ORDER BY pair,trend,gatt
06:09:04  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      7281  -.0010978
usd_jpy 	-1 up	      2579 .002982606
usd_jpy 	-1		46
usd_jpy 	 1 nup	      6739 -.00121644
usd_jpy 	 1 up	      2493 .003169926
usd_jpy 	 1		26

6 rows selected.

Elapsed: 00:00:00.05
06:09:04 SQL> 
06:09:04 SQL> 
06:09:04 SQL> -- Derive NTILE based params:
06:09:04 SQL> 
06:09:04 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.14
06:09:04 SQL> CREATE TABLE svm6162 COMPRESS AS
06:09:04   2  SELECT
06:09:04   3  pair
06:09:04   4  ,ydate
06:09:04   5  ,prdate
06:09:04   6  ,clse
06:09:04   7  ,g6
06:09:04   8  ,gatt
06:09:04   9  ,gattn
06:09:04  10  ,trend
06:09:04  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
06:09:04  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
06:09:04  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
06:09:04  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
06:09:04  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
06:09:04  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
06:09:04  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
06:09:04  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
06:09:04  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
06:09:04  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
06:09:04  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
06:09:04  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
06:09:04  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
06:09:04  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
06:09:04  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
06:09:04  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
06:09:04  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
06:09:04  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
06:09:04  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
06:09:04  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
06:09:04  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
06:09:04  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
06:09:04  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
06:09:04  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
06:09:04  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
06:09:04  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
06:09:04  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
06:09:04  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
06:09:04  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
06:09:04  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
06:09:04  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
06:09:04  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
06:09:04  43  ,hh  att32
06:09:04  44  ,d   att33
06:09:04  45  ,w   att34
06:09:04  46  ,mpm att35
06:09:04  47  ,mph att36
06:09:04  48  ,trend att37
06:09:04  49  FROM svm6142
06:09:04  50  ORDER BY ydate
06:09:04  51  /

Table created.

Elapsed: 00:00:04.81
06:09:09 SQL> 
06:09:09 SQL> -- rpt
06:09:09 SQL> 
06:09:09 SQL> SELECT
06:09:09   2  pair
06:09:09   3  ,trend
06:09:09   4  ,gatt
06:09:09   5  ,COUNT(pair)
06:09:09   6  ,AVG(g6)
06:09:09   7  FROM svm6162
06:09:09   8  GROUP BY pair,trend,gatt
06:09:09   9  ORDER BY pair,trend,gatt
06:09:09  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      7281  -.0010978
usd_jpy 	-1 up	      2579 .002982606
usd_jpy 	-1		46
usd_jpy 	 1 nup	      6739 -.00121644
usd_jpy 	 1 up	      2493 .003169926
usd_jpy 	 1		26

6 rows selected.

Elapsed: 00:00:00.04
06:09:09 SQL> 
06:09:09 SQL> -- I comment out sections related to score-feedback.
06:09:09 SQL> -- I tested score-feeback and it hurts results:
06:09:09 SQL> 
06:09:09 SQL> -- CREATE OR REPLACE VIEW sc12 AS
06:09:09 SQL> -- SELECT
06:09:09 SQL> -- m.pair
06:09:09 SQL> -- ,m.ydate
06:09:09 SQL> -- ,m.prdate
06:09:09 SQL> -- ,l.score score_long
06:09:09 SQL> -- ,s.score score_short
06:09:09 SQL> -- ,m.g6
06:09:09 SQL> -- FROM svm62scores l,svm62scores s,svm6162 m
06:09:09 SQL> -- WHERE l.targ='gatt'
06:09:09 SQL> -- AND	 s.targ='gattn'
06:09:09 SQL> -- AND l.prdate = s.prdate
06:09:09 SQL> -- AND l.prdate = m.prdate
06:09:09 SQL> -- -- Speed things up:
06:09:09 SQL> -- AND l.pair = '&1'
06:09:09 SQL> -- AND s.pair = '&1'
06:09:09 SQL> -- /
06:09:09 SQL> --
06:09:09 SQL> -- DROP TABLE score_corr;
06:09:09 SQL> --
06:09:09 SQL> -- CREATE TABLE score_corr COMPRESS AS
06:09:09 SQL> -- SELECT
06:09:09 SQL> -- pair
06:09:09 SQL> -- -- ,ydate
06:09:09 SQL> -- ,prdate
06:09:09 SQL> -- -- Find corr() tween score and g6 over 2 day period:
06:09:09 SQL> -- ,CORR((score_long - score_short),g6)
06:09:09 SQL> --   OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 2*24*60/5 PRECEDING AND CURRENT ROW)sc_corr
06:09:09 SQL> -- FROM sc12
06:09:09 SQL> -- /
06:09:09 SQL> 
06:09:09 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.31
06:09:09 SQL> 
06:09:09 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.36
06:09:09 SQL> 
06:09:09 SQL> CREATE TABLE modsrc COMPRESS AS
06:09:09   2  SELECT
06:09:09   3  pair
06:09:09   4  ,ydate
06:09:09   5  ,prdate
06:09:09   6  ,trend
06:09:09   7  ,g6
06:09:09   8  ,gatt
06:09:09   9  ,gattn
06:09:09  10  ,SUM(g6)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g00
06:09:09  11  ,SUM(g6)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g01
06:09:09  12  ,SUM(g6)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g02
06:09:09  13  ,SUM(g6)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g03
06:09:09  14  ,SUM(g6)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g04
06:09:09  15  ,SUM(g6)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g05
06:09:09  16  ,SUM(g6)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g06
06:09:09  17  ,SUM(g6)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g07
06:09:09  18  ,SUM(g6)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g08
06:09:09  19  ,SUM(g6)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g09
06:09:09  20  ,SUM(g6)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g10
06:09:09  21  ,SUM(g6)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g11
06:09:09  22  ,SUM(g6)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g12
06:09:09  23  ,SUM(g6)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g13
06:09:09  24  ,SUM(g6)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g14
06:09:09  25  ,SUM(g6)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g15
06:09:09  26  ,SUM(g6)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g16
06:09:09  27  ,SUM(g6)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g17
06:09:09  28  ,SUM(g6)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g18
06:09:09  29  ,SUM(g6)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g19
06:09:09  30  ,SUM(g6)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g20
06:09:09  31  ,SUM(g6)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g21
06:09:09  32  ,SUM(g6)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g22
06:09:09  33  ,SUM(g6)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g23
06:09:09  34  ,SUM(g6)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g24
06:09:09  35  ,SUM(g6)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g25
06:09:09  36  ,SUM(g6)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g26
06:09:09  37  ,SUM(g6)OVER(PARTITION BY trend,att27 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g27
06:09:09  38  ,SUM(g6)OVER(PARTITION BY trend,att28 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g28
06:09:09  39  ,SUM(g6)OVER(PARTITION BY trend,att29 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g29
06:09:09  40  ,SUM(g6)OVER(PARTITION BY trend,att30 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g30
06:09:09  41  ,SUM(g6)OVER(PARTITION BY trend,att31 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g31
06:09:09  42  ,SUM(g6)OVER(PARTITION BY trend,att32 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g32
06:09:09  43  ,SUM(g6)OVER(PARTITION BY trend,att33 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g33
06:09:09  44  ,SUM(g6)OVER(PARTITION BY trend,att34 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g34
06:09:09  45  ,SUM(g6)OVER(PARTITION BY trend,att35 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g35
06:09:09  46  ,SUM(g6)OVER(PARTITION BY trend,att36 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g36
06:09:09  47  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g37
06:09:09  48  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*40 PRECEDING AND CURRENT ROW)g38
06:09:09  49  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*30 PRECEDING AND CURRENT ROW)g39
06:09:09  50  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)g40
06:09:09  51  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)g41
06:09:09  52  FROM svm6162
06:09:09  53  /

Table created.

Elapsed: 00:00:06.60
06:09:16 SQL> 
06:09:16 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:03.21
06:09:19 SQL> 
06:09:19 SQL> -- rpt
06:09:19 SQL> 
06:09:19 SQL> SELECT
06:09:19   2  pair
06:09:19   3  ,trend
06:09:19   4  ,gatt
06:09:19   5  ,COUNT(pair)
06:09:19   6  ,AVG(g6)
06:09:19   7  FROM modsrc
06:09:19   8  GROUP BY pair,trend,gatt
06:09:19   9  ORDER BY pair,trend,gatt
06:09:19  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      7281  -.0010978
usd_jpy 	-1 up	      2579 .002982606
usd_jpy 	-1		46
usd_jpy 	 1 nup	      6739 -.00121644
usd_jpy 	 1 up	      2493 .003169926
usd_jpy 	 1		26

6 rows selected.

Elapsed: 00:00:00.03
06:09:19 SQL> 
06:09:19 SQL> 
06:09:19 SQL> SELECT pair,COUNT(pair)FROM svm6102 GROUP BY pair;

PAIR	COUNT(PAIR)
------- -----------
usd_jpy       19164

Elapsed: 00:00:00.80
06:09:20 SQL> 
06:09:20 SQL> SELECT pair,COUNT(pair)FROM modsrc GROUP BY pair;

PAIR	COUNT(PAIR)
------- -----------
usd_jpy       19164

Elapsed: 00:00:00.01
06:09:20 SQL> 
06:09:20 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
