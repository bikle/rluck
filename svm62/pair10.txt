
SQL*Plus: Release 11.2.0.1.0 Production on Sun Feb 6 22:54:51 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

22:54:51 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
22:54:51 SQL> 22:54:51 SQL> --
22:54:51 SQL> -- pair10.sql
22:54:51 SQL> --
22:54:51 SQL> 
22:54:51 SQL> -- Creates views and tables needed by SVM.
22:54:51 SQL> 
22:54:51 SQL> 
22:54:51 SQL> CREATE OR REPLACE VIEW svm6102 AS
22:54:51   2  SELECT
22:54:51   3  pair
22:54:51   4  ,ydate
22:54:51   5  ,prdate
22:54:51   6  ,rownum rnum -- acts as t in my time-series
22:54:51   7  ,clse
22:54:51   8  -- Derive a bunch of attributes from clse, the latest price:
22:54:51   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
22:54:51  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
22:54:51  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
22:54:51  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
22:54:51  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
22:54:51  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
22:54:51  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
22:54:51  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
22:54:51  17  --
22:54:51  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
22:54:51  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
22:54:51  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
22:54:51  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
22:54:51  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
22:54:51  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
22:54:51  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
22:54:51  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
22:54:51  26  --
22:54:51  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
22:54:51  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
22:54:51  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
22:54:51  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
22:54:51  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
22:54:51  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
22:54:51  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
22:54:51  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
22:54:51  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
22:54:51  36  FROM di5min WHERE pair = '&1'
22:54:51  37  AND ydate > sysdate - 95
22:54:51  38  ORDER BY ydate
22:54:51  39  /
old  36: FROM di5min WHERE pair = '&1'
new  36: FROM di5min WHERE pair = 'eur_jpy'

View created.

Elapsed: 00:00:00.06
22:54:51 SQL> 
22:54:51 SQL> -- rpt
22:54:51 SQL> 
22:54:51 SQL> SELECT
22:54:51   2  pair
22:54:51   3  ,COUNT(pair)
22:54:51   4  ,MIN(clse),MAX(clse)
22:54:51   5  ,MIN(avg6),MAX(avg6)
22:54:51   6  ,MIN(ydate),MAX(ydate)
22:54:51   7  FROM svm6102
22:54:51   8  GROUP BY pair
22:54:51   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_jpy       19113 106.906797	115.36994 107.120556 115.110615 2010-11-03 22:55:00 2011-02-06 22:30:00

Elapsed: 00:00:00.79
22:54:52 SQL> 
22:54:52 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
22:54:52 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.07
22:54:52 SQL> CREATE TABLE svm6122 COMPRESS AS
22:54:52   2  SELECT
22:54:52   3  pair
22:54:52   4  ,ydate
22:54:52   5  ,prdate
22:54:52   6  ,clse
22:54:52   7  -- g6 is important. I want to predict g6:
22:54:52   8  ,ld6 - clse g6
22:54:52   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
22:54:52  10  -- I want more attributes from the ones I derived above:
22:54:52  11  -- clse relation to moving-min
22:54:52  12  ,clse-min4  cm4
22:54:52  13  ,clse-min6  cm6
22:54:52  14  ,clse-min8  cm8
22:54:52  15  ,clse-min10 cm10
22:54:52  16  ,clse-min12 cm12
22:54:52  17  ,clse-min14 cm14
22:54:52  18  ,clse-min16 cm16
22:54:52  19  ,clse-min18 cm18
22:54:52  20  -- clse relation to moving-avg
22:54:52  21  ,clse-avg4  ca4
22:54:52  22  ,clse-avg6  ca6
22:54:52  23  ,clse-avg8  ca8
22:54:52  24  ,clse-avg10 ca10
22:54:52  25  ,clse-avg12 ca12
22:54:52  26  ,clse-avg14 ca14
22:54:52  27  ,clse-avg16 ca16
22:54:52  28  ,clse-avg18 ca18
22:54:52  29  -- clse relation to moving-max
22:54:52  30  ,clse-max4  cx4
22:54:52  31  ,clse-max6  cx6
22:54:52  32  ,clse-max8  cx8
22:54:52  33  ,clse-max10 cx10
22:54:52  34  ,clse-max12 cx12
22:54:52  35  ,clse-max14 cx14
22:54:52  36  ,clse-max16 cx16
22:54:52  37  ,clse-max18 cx18
22:54:52  38  -- Derive more attributes.
22:54:52  39  -- I want to use CORR() here to help SVM see the shape of the series.
22:54:52  40  -- But COVAR_POP is more stable:
22:54:52  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
22:54:52  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
22:54:52  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
22:54:52  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
22:54:52  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
22:54:52  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
22:54:52  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
22:54:52  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
22:54:52  49  -- Derive date related attributes:
22:54:52  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:54:52  51  ,0+TO_CHAR(ydate,'D')d
22:54:52  52  ,0+TO_CHAR(ydate,'W')w
22:54:52  53  -- mpm stands for minutes-past-midnight:
22:54:52  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:54:52  55  -- mph stands for minutes-past-hour:
22:54:52  56  ,0+TO_CHAR(ydate,'MI')mph
22:54:52  57  FROM svm6102
22:54:52  58  ORDER BY ydate
22:54:52  59  /

Table created.

Elapsed: 00:00:02.16
22:54:54 SQL> 
22:54:54 SQL> -- rpt
22:54:54 SQL> 
22:54:54 SQL> SELECT
22:54:54   2  pair
22:54:54   3  ,COUNT(pair)
22:54:54   4  ,MIN(clse),MAX(clse)
22:54:54   5  ,MIN(ydate),MAX(ydate)
22:54:54   6  FROM svm6122
22:54:54   7  GROUP BY pair
22:54:54   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_jpy       19113 106.906797	115.36994 2010-11-03 22:55:00 2011-02-06 22:30:00

Elapsed: 00:00:00.04
22:54:54 SQL> 
22:54:54 SQL> -- Prepare for derivation of NTILE based params:
22:54:54 SQL> 
22:54:54 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.04
22:54:55 SQL> CREATE TABLE svm6142 COMPRESS AS
22:54:55   2  SELECT
22:54:55   3  pair
22:54:55   4  ,ydate
22:54:55   5  ,prdate
22:54:55   6  ,clse
22:54:55   7  ,g6
22:54:55   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
22:54:55   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
22:54:55  10  ,CASE WHEN trend IS NULL THEN 1
22:54:55  11  	    WHEN trend =0      THEN 1
22:54:55  12  	    ELSE trend END trend
22:54:55  13  ,cm4
22:54:55  14  ,cm6
22:54:55  15  ,cm8
22:54:55  16  ,cm10
22:54:55  17  ,cm12
22:54:55  18  ,cm14
22:54:55  19  ,cm16
22:54:55  20  ,cm18
22:54:55  21  --
22:54:55  22  ,ca4
22:54:55  23  ,ca6
22:54:55  24  ,ca8
22:54:55  25  ,ca10
22:54:55  26  ,ca12
22:54:55  27  ,ca14
22:54:55  28  ,ca16
22:54:55  29  ,ca18
22:54:55  30  --
22:54:55  31  ,cx4
22:54:55  32  ,cx6
22:54:55  33  ,cx8
22:54:55  34  ,cx10
22:54:55  35  ,cx12
22:54:55  36  ,cx14
22:54:55  37  ,cx16
22:54:55  38  ,cx18
22:54:55  39  --
22:54:55  40  ,crr4
22:54:55  41  ,crr6
22:54:55  42  ,crr8
22:54:55  43  ,crr10
22:54:55  44  ,crr12
22:54:55  45  ,crr14
22:54:55  46  ,crr16
22:54:55  47  ,crr18
22:54:55  48  --
22:54:55  49  ,hh
22:54:55  50  ,d
22:54:55  51  ,w
22:54:55  52  ,mpm
22:54:55  53  ,mph
22:54:55  54  FROM svm6122
22:54:55  55  ORDER BY ydate
22:54:55  56  /

Table created.

Elapsed: 00:00:00.41
22:54:55 SQL> 
22:54:55 SQL> -- rpt
22:54:55 SQL> 
22:54:55 SQL> SELECT
22:54:55   2  pair
22:54:55   3  ,trend
22:54:55   4  ,gatt
22:54:55   5  ,COUNT(pair)
22:54:55   6  ,AVG(g6)
22:54:55   7  FROM svm6142
22:54:55   8  GROUP BY pair,trend,gatt
22:54:55   9  ORDER BY pair,trend,gatt
22:54:55  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_jpy 	-1 nup	      4513 -.33723933
eur_jpy 	-1 up	      4873 .274625976
eur_jpy 	-1		 2
eur_jpy 	 1 nup	      4892 -.27718723
eur_jpy 	 1 up	      4763 .282475634
eur_jpy 	 1		70

6 rows selected.

Elapsed: 00:00:00.04
22:54:55 SQL> 
22:54:55 SQL> 
22:54:55 SQL> -- Derive NTILE based params:
22:54:55 SQL> 
22:54:55 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.05
22:54:55 SQL> CREATE TABLE svm6162 COMPRESS AS
22:54:55   2  SELECT
22:54:55   3  pair
22:54:55   4  ,ydate
22:54:55   5  ,prdate
22:54:55   6  ,clse
22:54:55   7  ,g6
22:54:55   8  ,gatt
22:54:55   9  ,gattn
22:54:55  10  ,trend
22:54:55  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
22:54:55  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
22:54:55  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
22:54:55  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
22:54:55  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
22:54:55  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
22:54:55  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
22:54:55  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
22:54:55  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
22:54:55  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
22:54:55  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
22:54:55  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
22:54:55  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
22:54:55  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
22:54:55  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
22:54:55  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
22:54:55  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
22:54:55  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
22:54:55  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
22:54:55  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
22:54:55  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
22:54:55  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
22:54:55  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
22:54:55  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
22:54:55  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
22:54:55  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
22:54:55  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
22:54:55  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
22:54:55  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
22:54:55  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
22:54:55  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
22:54:55  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
22:54:55  43  ,hh  att32
22:54:55  44  ,d   att33
22:54:55  45  ,w   att34
22:54:55  46  ,mpm att35
22:54:55  47  ,mph att36
22:54:55  48  ,trend att37
22:54:55  49  FROM svm6142
22:54:55  50  ORDER BY ydate
22:54:55  51  /

Table created.

Elapsed: 00:00:04.87
22:55:00 SQL> 
22:55:00 SQL> -- rpt
22:55:00 SQL> 
22:55:00 SQL> SELECT
22:55:00   2  pair
22:55:00   3  ,trend
22:55:00   4  ,gatt
22:55:00   5  ,COUNT(pair)
22:55:00   6  ,AVG(g6)
22:55:00   7  FROM svm6162
22:55:00   8  GROUP BY pair,trend,gatt
22:55:00   9  ORDER BY pair,trend,gatt
22:55:00  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_jpy 	-1 nup	      4513 -.33723933
eur_jpy 	-1 up	      4873 .274625976
eur_jpy 	-1		 2
eur_jpy 	 1 nup	      4892 -.27718723
eur_jpy 	 1 up	      4763 .282475634
eur_jpy 	 1		70

6 rows selected.

Elapsed: 00:00:00.03
22:55:00 SQL> 
22:55:00 SQL> -- I comment out sections related to score-feedback.
22:55:00 SQL> -- I tested score-feeback and it hurts results:
22:55:00 SQL> 
22:55:00 SQL> -- CREATE OR REPLACE VIEW sc12 AS
22:55:00 SQL> -- SELECT
22:55:00 SQL> -- m.pair
22:55:00 SQL> -- ,m.ydate
22:55:00 SQL> -- ,m.prdate
22:55:00 SQL> -- ,l.score score_long
22:55:00 SQL> -- ,s.score score_short
22:55:00 SQL> -- ,m.g6
22:55:00 SQL> -- FROM svm62scores l,svm62scores s,svm6162 m
22:55:00 SQL> -- WHERE l.targ='gatt'
22:55:00 SQL> -- AND	 s.targ='gattn'
22:55:00 SQL> -- AND l.prdate = s.prdate
22:55:00 SQL> -- AND l.prdate = m.prdate
22:55:00 SQL> -- -- Speed things up:
22:55:00 SQL> -- AND l.pair = '&1'
22:55:00 SQL> -- AND s.pair = '&1'
22:55:00 SQL> -- /
22:55:00 SQL> --
22:55:00 SQL> -- DROP TABLE score_corr;
22:55:00 SQL> --
22:55:00 SQL> -- CREATE TABLE score_corr COMPRESS AS
22:55:00 SQL> -- SELECT
22:55:00 SQL> -- pair
22:55:00 SQL> -- -- ,ydate
22:55:00 SQL> -- ,prdate
22:55:00 SQL> -- -- Find corr() tween score and g6 over 2 day period:
22:55:00 SQL> -- ,CORR((score_long - score_short),g6)
22:55:00 SQL> --   OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 2*24*60/5 PRECEDING AND CURRENT ROW)sc_corr
22:55:00 SQL> -- FROM sc12
22:55:00 SQL> -- /
22:55:00 SQL> 
22:55:00 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.17
22:55:00 SQL> 
22:55:00 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.29
22:55:00 SQL> 
22:55:00 SQL> CREATE TABLE modsrc COMPRESS AS
22:55:00   2  SELECT
22:55:00   3  pair
22:55:00   4  ,ydate
22:55:00   5  ,prdate
22:55:00   6  ,trend
22:55:00   7  ,g6
22:55:00   8  ,gatt
22:55:00   9  ,gattn
22:55:00  10  ,SUM(g6)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g00
22:55:00  11  ,SUM(g6)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g01
22:55:00  12  ,SUM(g6)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g02
22:55:00  13  ,SUM(g6)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g03
22:55:00  14  ,SUM(g6)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g04
22:55:00  15  ,SUM(g6)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g05
22:55:00  16  ,SUM(g6)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g06
22:55:00  17  ,SUM(g6)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g07
22:55:00  18  ,SUM(g6)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g08
22:55:00  19  ,SUM(g6)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g09
22:55:00  20  ,SUM(g6)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g10
22:55:00  21  ,SUM(g6)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g11
22:55:00  22  ,SUM(g6)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g12
22:55:00  23  ,SUM(g6)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g13
22:55:00  24  ,SUM(g6)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g14
22:55:00  25  ,SUM(g6)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g15
22:55:00  26  ,SUM(g6)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g16
22:55:00  27  ,SUM(g6)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g17
22:55:00  28  ,SUM(g6)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g18
22:55:00  29  ,SUM(g6)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g19
22:55:00  30  ,SUM(g6)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g20
22:55:00  31  ,SUM(g6)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g21
22:55:00  32  ,SUM(g6)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g22
22:55:00  33  ,SUM(g6)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g23
22:55:00  34  ,SUM(g6)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g24
22:55:00  35  ,SUM(g6)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g25
22:55:00  36  ,SUM(g6)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g26
22:55:00  37  ,SUM(g6)OVER(PARTITION BY trend,att27 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g27
22:55:00  38  ,SUM(g6)OVER(PARTITION BY trend,att28 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g28
22:55:00  39  ,SUM(g6)OVER(PARTITION BY trend,att29 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g29
22:55:00  40  ,SUM(g6)OVER(PARTITION BY trend,att30 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g30
22:55:00  41  ,SUM(g6)OVER(PARTITION BY trend,att31 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g31
22:55:00  42  ,SUM(g6)OVER(PARTITION BY trend,att32 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g32
22:55:00  43  ,SUM(g6)OVER(PARTITION BY trend,att33 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g33
22:55:00  44  ,SUM(g6)OVER(PARTITION BY trend,att34 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g34
22:55:00  45  ,SUM(g6)OVER(PARTITION BY trend,att35 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g35
22:55:00  46  ,SUM(g6)OVER(PARTITION BY trend,att36 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g36
22:55:00  47  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g37
22:55:00  48  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*40 PRECEDING AND CURRENT ROW)g38
22:55:00  49  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*30 PRECEDING AND CURRENT ROW)g39
22:55:00  50  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)g40
22:55:00  51  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)g41
22:55:00  52  FROM svm6162
22:55:00  53  /

Table created.

Elapsed: 00:00:06.03
22:55:06 SQL> 
22:55:06 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:02.20
22:55:09 SQL> 
22:55:09 SQL> -- rpt
22:55:09 SQL> 
22:55:09 SQL> SELECT
22:55:09   2  pair
22:55:09   3  ,trend
22:55:09   4  ,gatt
22:55:09   5  ,COUNT(pair)
22:55:09   6  ,AVG(g6)
22:55:09   7  FROM modsrc
22:55:09   8  GROUP BY pair,trend,gatt
22:55:09   9  ORDER BY pair,trend,gatt
22:55:09  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_jpy 	-1 nup	      4513 -.33723933
eur_jpy 	-1 up	      4873 .274625976
eur_jpy 	-1		 2
eur_jpy 	 1 nup	      4892 -.27718723
eur_jpy 	 1 up	      4763 .282475634
eur_jpy 	 1		70

6 rows selected.

Elapsed: 00:00:00.03
22:55:09 SQL> 
22:55:09 SQL> 
22:55:09 SQL> SELECT pair,COUNT(pair)FROM svm6102 GROUP BY pair;

PAIR	COUNT(PAIR)
------- -----------
eur_jpy       19112

Elapsed: 00:00:00.75
22:55:09 SQL> 
22:55:09 SQL> SELECT pair,COUNT(pair)FROM modsrc GROUP BY pair;

PAIR	COUNT(PAIR)
------- -----------
eur_jpy       19113

Elapsed: 00:00:00.01
22:55:09 SQL> 
22:55:09 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
