
SQL*Plus: Release 11.2.0.1.0 Production on Fri Feb 18 00:00:10 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

00:00:10 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
00:00:10 SQL> 00:00:10 SQL> --
00:00:10 SQL> -- pair10.sql
00:00:10 SQL> --
00:00:10 SQL> 
00:00:10 SQL> -- Creates views and tables needed by SVM.
00:00:10 SQL> 
00:00:10 SQL> 
00:00:10 SQL> CREATE OR REPLACE VIEW svm6102 AS
00:00:10   2  SELECT
00:00:10   3  pair
00:00:10   4  ,ydate
00:00:10   5  ,prdate
00:00:10   6  ,rownum rnum -- acts as t in my time-series
00:00:10   7  ,clse
00:00:10   8  -- Derive a bunch of attributes from clse, the latest price:
00:00:10   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
00:00:10  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
00:00:10  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
00:00:10  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
00:00:10  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
00:00:10  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
00:00:10  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
00:00:10  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
00:00:10  17  --
00:00:10  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
00:00:10  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
00:00:10  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
00:00:10  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
00:00:10  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
00:00:10  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
00:00:10  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
00:00:10  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
00:00:10  26  --
00:00:10  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
00:00:10  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
00:00:10  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
00:00:10  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
00:00:10  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
00:00:10  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
00:00:10  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
00:00:10  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
00:00:10  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
00:00:10  36  FROM di5min WHERE pair = '&1'
00:00:10  37  AND ydate > sysdate - 95
00:00:10  38  ORDER BY ydate
00:00:10  39  /
old  36: FROM di5min WHERE pair = '&1'
new  36: FROM di5min WHERE pair = 'eur_jpy'

View created.

Elapsed: 00:00:00.05
00:00:10 SQL> 
00:00:10 SQL> -- rpt
00:00:10 SQL> 
00:00:10 SQL> SELECT
00:00:10   2  pair
00:00:10   3  ,COUNT(pair)
00:00:10   4  ,MIN(clse),MAX(clse)
00:00:10   5  ,MIN(avg6),MAX(avg6)
00:00:10   6  ,MIN(ydate),MAX(ydate)
00:00:10   7  FROM svm6102
00:00:10   8  GROUP BY pair
00:00:10   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_jpy       19634 106.906797 114.875523 107.120556   114.7435 2010-11-15 00:05:00 2011-02-17 23:40:00

Elapsed: 00:00:00.82
00:00:11 SQL> 
00:00:11 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
00:00:11 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.30
00:00:12 SQL> CREATE TABLE svm6122 COMPRESS AS
00:00:12   2  SELECT
00:00:12   3  pair
00:00:12   4  ,ydate
00:00:12   5  ,prdate
00:00:12   6  ,clse
00:00:12   7  -- g6 is important. I want to predict g6:
00:00:12   8  ,ld6 - clse g6
00:00:12   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
00:00:12  10  -- I want more attributes from the ones I derived above:
00:00:12  11  -- clse relation to moving-min
00:00:12  12  ,clse-min4  cm4
00:00:12  13  ,clse-min6  cm6
00:00:12  14  ,clse-min8  cm8
00:00:12  15  ,clse-min10 cm10
00:00:12  16  ,clse-min12 cm12
00:00:12  17  ,clse-min14 cm14
00:00:12  18  ,clse-min16 cm16
00:00:12  19  ,clse-min18 cm18
00:00:12  20  -- clse relation to moving-avg
00:00:12  21  ,clse-avg4  ca4
00:00:12  22  ,clse-avg6  ca6
00:00:12  23  ,clse-avg8  ca8
00:00:12  24  ,clse-avg10 ca10
00:00:12  25  ,clse-avg12 ca12
00:00:12  26  ,clse-avg14 ca14
00:00:12  27  ,clse-avg16 ca16
00:00:12  28  ,clse-avg18 ca18
00:00:12  29  -- clse relation to moving-max
00:00:12  30  ,clse-max4  cx4
00:00:12  31  ,clse-max6  cx6
00:00:12  32  ,clse-max8  cx8
00:00:12  33  ,clse-max10 cx10
00:00:12  34  ,clse-max12 cx12
00:00:12  35  ,clse-max14 cx14
00:00:12  36  ,clse-max16 cx16
00:00:12  37  ,clse-max18 cx18
00:00:12  38  -- Derive more attributes.
00:00:12  39  -- I want to use CORR() here to help SVM see the shape of the series.
00:00:12  40  -- But COVAR_POP is more stable:
00:00:12  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
00:00:12  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
00:00:12  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
00:00:12  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
00:00:12  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
00:00:12  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
00:00:12  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
00:00:12  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
00:00:12  49  -- Derive date related attributes:
00:00:12  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
00:00:12  51  ,0+TO_CHAR(ydate,'D')d
00:00:12  52  ,0+TO_CHAR(ydate,'W')w
00:00:12  53  -- mpm stands for minutes-past-midnight:
00:00:12  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
00:00:12  55  -- mph stands for minutes-past-hour:
00:00:12  56  ,0+TO_CHAR(ydate,'MI')mph
00:00:12  57  FROM svm6102
00:00:12  58  ORDER BY ydate
00:00:12  59  /

Table created.

Elapsed: 00:00:02.28
00:00:14 SQL> 
00:00:14 SQL> -- rpt
00:00:14 SQL> 
00:00:14 SQL> SELECT
00:00:14   2  pair
00:00:14   3  ,COUNT(pair)
00:00:14   4  ,MIN(clse),MAX(clse)
00:00:14   5  ,MIN(ydate),MAX(ydate)
00:00:14   6  FROM svm6122
00:00:14   7  GROUP BY pair
00:00:14   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_jpy       19634 106.906797 114.875523 2010-11-15 00:05:00 2011-02-17 23:40:00

Elapsed: 00:00:00.04
00:00:14 SQL> 
00:00:14 SQL> -- Prepare for derivation of NTILE based params:
00:00:14 SQL> 
00:00:14 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.28
00:00:14 SQL> CREATE TABLE svm6142 COMPRESS AS
00:00:14   2  SELECT
00:00:14   3  pair
00:00:14   4  ,ydate
00:00:14   5  ,prdate
00:00:14   6  ,clse
00:00:14   7  ,g6
00:00:14   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
00:00:14   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
00:00:14  10  ,CASE WHEN trend IS NULL THEN 1
00:00:14  11  	    WHEN trend =0      THEN 1
00:00:14  12  	    ELSE trend END trend
00:00:14  13  ,cm4
00:00:14  14  ,cm6
00:00:14  15  ,cm8
00:00:14  16  ,cm10
00:00:14  17  ,cm12
00:00:14  18  ,cm14
00:00:14  19  ,cm16
00:00:14  20  ,cm18
00:00:14  21  --
00:00:14  22  ,ca4
00:00:14  23  ,ca6
00:00:14  24  ,ca8
00:00:14  25  ,ca10
00:00:14  26  ,ca12
00:00:14  27  ,ca14
00:00:14  28  ,ca16
00:00:14  29  ,ca18
00:00:14  30  --
00:00:14  31  ,cx4
00:00:14  32  ,cx6
00:00:14  33  ,cx8
00:00:14  34  ,cx10
00:00:14  35  ,cx12
00:00:14  36  ,cx14
00:00:14  37  ,cx16
00:00:14  38  ,cx18
00:00:14  39  --
00:00:14  40  ,crr4
00:00:14  41  ,crr6
00:00:14  42  ,crr8
00:00:14  43  ,crr10
00:00:14  44  ,crr12
00:00:14  45  ,crr14
00:00:14  46  ,crr16
00:00:14  47  ,crr18
00:00:14  48  --
00:00:14  49  ,hh
00:00:14  50  ,d
00:00:14  51  ,w
00:00:14  52  ,mpm
00:00:14  53  ,mph
00:00:14  54  FROM svm6122
00:00:14  55  ORDER BY ydate
00:00:14  56  /

Table created.

Elapsed: 00:00:00.41
00:00:15 SQL> 
00:00:15 SQL> -- rpt
00:00:15 SQL> 
00:00:15 SQL> SELECT
00:00:15   2  pair
00:00:15   3  ,trend
00:00:15   4  ,gatt
00:00:15   5  ,COUNT(pair)
00:00:15   6  ,AVG(g6)
00:00:15   7  FROM svm6142
00:00:15   8  GROUP BY pair,trend,gatt
00:00:15   9  ORDER BY pair,trend,gatt
00:00:15  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_jpy 	-1 nup	      4261 -.31954303
eur_jpy 	-1 up	      4922 .254293834
eur_jpy 	-1		25
eur_jpy 	 1 nup	      4965 -.26605214
eur_jpy 	 1 up	      5414 .266481403
eur_jpy 	 1		47

6 rows selected.

Elapsed: 00:00:00.04
00:00:15 SQL> 
00:00:15 SQL> 
00:00:15 SQL> -- Derive NTILE based params:
00:00:15 SQL> 
00:00:15 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.13
00:00:15 SQL> CREATE TABLE svm6162 COMPRESS AS
00:00:15   2  SELECT
00:00:15   3  pair
00:00:15   4  ,ydate
00:00:15   5  ,prdate
00:00:15   6  ,clse
00:00:15   7  ,g6
00:00:15   8  ,gatt
00:00:15   9  ,gattn
00:00:15  10  ,trend
00:00:15  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
00:00:15  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
00:00:15  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
00:00:15  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
00:00:15  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
00:00:15  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
00:00:15  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
00:00:15  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
00:00:15  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
00:00:15  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
00:00:15  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
00:00:15  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
00:00:15  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
00:00:15  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
00:00:15  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
00:00:15  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
00:00:15  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
00:00:15  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
00:00:15  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
00:00:15  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
00:00:15  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
00:00:15  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
00:00:15  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
00:00:15  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
00:00:15  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
00:00:15  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
00:00:15  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
00:00:15  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
00:00:15  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
00:00:15  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
00:00:15  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
00:00:15  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
00:00:15  43  ,hh  att32
00:00:15  44  ,d   att33
00:00:15  45  ,w   att34
00:00:15  46  ,mpm att35
00:00:15  47  ,mph att36
00:00:15  48  ,trend att37
00:00:15  49  FROM svm6142
00:00:15  50  ORDER BY ydate
00:00:15  51  /

Table created.

Elapsed: 00:00:05.01
00:00:20 SQL> 
00:00:20 SQL> -- rpt
00:00:20 SQL> 
00:00:20 SQL> SELECT
00:00:20   2  pair
00:00:20   3  ,trend
00:00:20   4  ,gatt
00:00:20   5  ,COUNT(pair)
00:00:20   6  ,AVG(g6)
00:00:20   7  FROM svm6162
00:00:20   8  GROUP BY pair,trend,gatt
00:00:20   9  ORDER BY pair,trend,gatt
00:00:20  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_jpy 	-1 nup	      4261 -.31954303
eur_jpy 	-1 up	      4922 .254293834
eur_jpy 	-1		25
eur_jpy 	 1 nup	      4965 -.26605214
eur_jpy 	 1 up	      5414 .266481403
eur_jpy 	 1		47

6 rows selected.

Elapsed: 00:00:00.03
00:00:20 SQL> 
00:00:20 SQL> -- I comment out sections related to score-feedback.
00:00:20 SQL> -- I tested score-feeback and it hurts results:
00:00:20 SQL> 
00:00:20 SQL> -- CREATE OR REPLACE VIEW sc12 AS
00:00:20 SQL> -- SELECT
00:00:20 SQL> -- m.pair
00:00:20 SQL> -- ,m.ydate
00:00:20 SQL> -- ,m.prdate
00:00:20 SQL> -- ,l.score score_long
00:00:20 SQL> -- ,s.score score_short
00:00:20 SQL> -- ,m.g6
00:00:20 SQL> -- FROM svm62scores l,svm62scores s,svm6162 m
00:00:20 SQL> -- WHERE l.targ='gatt'
00:00:20 SQL> -- AND	 s.targ='gattn'
00:00:20 SQL> -- AND l.prdate = s.prdate
00:00:20 SQL> -- AND l.prdate = m.prdate
00:00:20 SQL> -- -- Speed things up:
00:00:20 SQL> -- AND l.pair = '&1'
00:00:20 SQL> -- AND s.pair = '&1'
00:00:20 SQL> -- /
00:00:20 SQL> --
00:00:20 SQL> -- DROP TABLE score_corr;
00:00:20 SQL> --
00:00:20 SQL> -- CREATE TABLE score_corr COMPRESS AS
00:00:20 SQL> -- SELECT
00:00:20 SQL> -- pair
00:00:20 SQL> -- -- ,ydate
00:00:20 SQL> -- ,prdate
00:00:20 SQL> -- -- Find corr() tween score and g6 over 2 day period:
00:00:20 SQL> -- ,CORR((score_long - score_short),g6)
00:00:20 SQL> --   OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 2*24*60/5 PRECEDING AND CURRENT ROW)sc_corr
00:00:20 SQL> -- FROM sc12
00:00:20 SQL> -- /
00:00:20 SQL> 
00:00:20 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.30
00:00:20 SQL> 
00:00:20 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.31
00:00:20 SQL> 
00:00:20 SQL> CREATE TABLE modsrc COMPRESS AS
00:00:20   2  SELECT
00:00:20   3  pair
00:00:20   4  ,ydate
00:00:20   5  ,prdate
00:00:20   6  ,trend
00:00:20   7  ,g6
00:00:20   8  ,gatt
00:00:20   9  ,gattn
00:00:20  10  ,SUM(g6)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g00
00:00:20  11  ,SUM(g6)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g01
00:00:20  12  ,SUM(g6)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g02
00:00:20  13  ,SUM(g6)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g03
00:00:20  14  ,SUM(g6)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g04
00:00:20  15  ,SUM(g6)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g05
00:00:20  16  ,SUM(g6)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g06
00:00:20  17  ,SUM(g6)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g07
00:00:20  18  ,SUM(g6)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g08
00:00:20  19  ,SUM(g6)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g09
00:00:20  20  ,SUM(g6)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g10
00:00:20  21  ,SUM(g6)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g11
00:00:20  22  ,SUM(g6)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g12
00:00:20  23  ,SUM(g6)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g13
00:00:20  24  ,SUM(g6)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g14
00:00:20  25  ,SUM(g6)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g15
00:00:20  26  ,SUM(g6)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g16
00:00:20  27  ,SUM(g6)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g17
00:00:20  28  ,SUM(g6)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g18
00:00:20  29  ,SUM(g6)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g19
00:00:20  30  ,SUM(g6)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g20
00:00:20  31  ,SUM(g6)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g21
00:00:20  32  ,SUM(g6)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g22
00:00:20  33  ,SUM(g6)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g23
00:00:20  34  ,SUM(g6)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g24
00:00:20  35  ,SUM(g6)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g25
00:00:20  36  ,SUM(g6)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g26
00:00:20  37  ,SUM(g6)OVER(PARTITION BY trend,att27 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g27
00:00:20  38  ,SUM(g6)OVER(PARTITION BY trend,att28 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g28
00:00:20  39  ,SUM(g6)OVER(PARTITION BY trend,att29 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g29
00:00:20  40  ,SUM(g6)OVER(PARTITION BY trend,att30 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g30
00:00:20  41  ,SUM(g6)OVER(PARTITION BY trend,att31 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g31
00:00:20  42  ,SUM(g6)OVER(PARTITION BY trend,att32 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g32
00:00:20  43  ,SUM(g6)OVER(PARTITION BY trend,att33 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g33
00:00:20  44  ,SUM(g6)OVER(PARTITION BY trend,att34 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g34
00:00:20  45  ,SUM(g6)OVER(PARTITION BY trend,att35 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g35
00:00:20  46  ,SUM(g6)OVER(PARTITION BY trend,att36 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g36
00:00:20  47  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g37
00:00:20  48  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*40 PRECEDING AND CURRENT ROW)g38
00:00:20  49  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*30 PRECEDING AND CURRENT ROW)g39
00:00:20  50  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)g40
00:00:20  51  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)g41
00:00:20  52  FROM svm6162
00:00:20  53  /

Table created.

Elapsed: 00:00:06.23
00:00:27 SQL> 
00:00:27 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:02.50
00:00:29 SQL> 
00:00:29 SQL> -- rpt
00:00:29 SQL> 
00:00:29 SQL> SELECT
00:00:29   2  pair
00:00:29   3  ,trend
00:00:29   4  ,gatt
00:00:29   5  ,COUNT(pair)
00:00:29   6  ,AVG(g6)
00:00:29   7  FROM modsrc
00:00:29   8  GROUP BY pair,trend,gatt
00:00:29   9  ORDER BY pair,trend,gatt
00:00:29  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_jpy 	-1 nup	      4261 -.31954303
eur_jpy 	-1 up	      4922 .254293834
eur_jpy 	-1		25
eur_jpy 	 1 nup	      4965 -.26605214
eur_jpy 	 1 up	      5414 .266481403
eur_jpy 	 1		47

6 rows selected.

Elapsed: 00:00:00.02
00:00:29 SQL> 
00:00:29 SQL> 
00:00:29 SQL> SELECT pair,COUNT(pair)FROM svm6102 GROUP BY pair;

PAIR	COUNT(PAIR)
------- -----------
eur_jpy       19634

Elapsed: 00:00:00.78
00:00:30 SQL> 
00:00:30 SQL> SELECT pair,COUNT(pair)FROM modsrc GROUP BY pair;

PAIR	COUNT(PAIR)
------- -----------
eur_jpy       19634

Elapsed: 00:00:00.01
00:00:30 SQL> 
00:00:30 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
