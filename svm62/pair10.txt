
SQL*Plus: Release 11.2.0.1.0 Production on Thu Feb 17 23:55:57 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

23:55:57 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
23:55:57 SQL> 23:55:57 SQL> --
23:55:57 SQL> -- pair10.sql
23:55:57 SQL> --
23:55:57 SQL> 
23:55:57 SQL> -- Creates views and tables needed by SVM.
23:55:57 SQL> 
23:55:57 SQL> 
23:55:57 SQL> CREATE OR REPLACE VIEW svm6102 AS
23:55:57   2  SELECT
23:55:57   3  pair
23:55:57   4  ,ydate
23:55:57   5  ,prdate
23:55:57   6  ,rownum rnum -- acts as t in my time-series
23:55:57   7  ,clse
23:55:57   8  -- Derive a bunch of attributes from clse, the latest price:
23:55:57   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
23:55:57  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
23:55:57  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
23:55:57  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
23:55:57  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
23:55:57  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
23:55:57  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
23:55:57  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
23:55:57  17  --
23:55:57  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
23:55:57  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
23:55:57  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
23:55:57  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
23:55:57  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
23:55:57  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
23:55:57  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
23:55:57  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
23:55:57  26  --
23:55:57  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
23:55:57  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
23:55:57  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
23:55:57  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
23:55:57  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
23:55:57  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
23:55:57  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
23:55:57  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
23:55:57  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
23:55:57  36  FROM di5min WHERE pair = '&1'
23:55:57  37  AND ydate > sysdate - 95
23:55:57  38  ORDER BY ydate
23:55:57  39  /
old  36: FROM di5min WHERE pair = '&1'
new  36: FROM di5min WHERE pair = 'eur_chf'

View created.

Elapsed: 00:00:00.06
23:55:57 SQL> 
23:55:57 SQL> -- rpt
23:55:57 SQL> 
23:55:57 SQL> SELECT
23:55:57   2  pair
23:55:57   3  ,COUNT(pair)
23:55:57   4  ,MIN(clse),MAX(clse)
23:55:57   5  ,MIN(avg6),MAX(avg6)
23:55:57   6  ,MIN(ydate),MAX(ydate)
23:55:57   7  FROM svm6102
23:55:57   8  GROUP BY pair
23:55:57   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_chf       19640 1.24192946 1.36639531 1.24320592 1.36388113 2010-11-15 00:00:00 2011-02-17 23:40:00

Elapsed: 00:00:00.79
23:55:57 SQL> 
23:55:57 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
23:55:57 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.26
23:55:58 SQL> CREATE TABLE svm6122 COMPRESS AS
23:55:58   2  SELECT
23:55:58   3  pair
23:55:58   4  ,ydate
23:55:58   5  ,prdate
23:55:58   6  ,clse
23:55:58   7  -- g6 is important. I want to predict g6:
23:55:58   8  ,ld6 - clse g6
23:55:58   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
23:55:58  10  -- I want more attributes from the ones I derived above:
23:55:58  11  -- clse relation to moving-min
23:55:58  12  ,clse-min4  cm4
23:55:58  13  ,clse-min6  cm6
23:55:58  14  ,clse-min8  cm8
23:55:58  15  ,clse-min10 cm10
23:55:58  16  ,clse-min12 cm12
23:55:58  17  ,clse-min14 cm14
23:55:58  18  ,clse-min16 cm16
23:55:58  19  ,clse-min18 cm18
23:55:58  20  -- clse relation to moving-avg
23:55:58  21  ,clse-avg4  ca4
23:55:58  22  ,clse-avg6  ca6
23:55:58  23  ,clse-avg8  ca8
23:55:58  24  ,clse-avg10 ca10
23:55:58  25  ,clse-avg12 ca12
23:55:58  26  ,clse-avg14 ca14
23:55:58  27  ,clse-avg16 ca16
23:55:58  28  ,clse-avg18 ca18
23:55:58  29  -- clse relation to moving-max
23:55:58  30  ,clse-max4  cx4
23:55:58  31  ,clse-max6  cx6
23:55:58  32  ,clse-max8  cx8
23:55:58  33  ,clse-max10 cx10
23:55:58  34  ,clse-max12 cx12
23:55:58  35  ,clse-max14 cx14
23:55:58  36  ,clse-max16 cx16
23:55:58  37  ,clse-max18 cx18
23:55:58  38  -- Derive more attributes.
23:55:58  39  -- I want to use CORR() here to help SVM see the shape of the series.
23:55:58  40  -- But COVAR_POP is more stable:
23:55:58  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
23:55:58  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
23:55:58  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
23:55:58  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
23:55:58  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
23:55:58  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
23:55:58  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
23:55:58  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
23:55:58  49  -- Derive date related attributes:
23:55:58  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
23:55:58  51  ,0+TO_CHAR(ydate,'D')d
23:55:58  52  ,0+TO_CHAR(ydate,'W')w
23:55:58  53  -- mpm stands for minutes-past-midnight:
23:55:58  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
23:55:58  55  -- mph stands for minutes-past-hour:
23:55:58  56  ,0+TO_CHAR(ydate,'MI')mph
23:55:58  57  FROM svm6102
23:55:58  58  ORDER BY ydate
23:55:58  59  /

Table created.

Elapsed: 00:00:02.25
23:56:00 SQL> 
23:56:00 SQL> -- rpt
23:56:00 SQL> 
23:56:00 SQL> SELECT
23:56:00   2  pair
23:56:00   3  ,COUNT(pair)
23:56:00   4  ,MIN(clse),MAX(clse)
23:56:00   5  ,MIN(ydate),MAX(ydate)
23:56:00   6  FROM svm6122
23:56:00   7  GROUP BY pair
23:56:00   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_chf       19640 1.24192946 1.36639531 2010-11-15 00:00:00 2011-02-17 23:40:00

Elapsed: 00:00:00.05
23:56:00 SQL> 
23:56:00 SQL> -- Prepare for derivation of NTILE based params:
23:56:00 SQL> 
23:56:00 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.27
23:56:00 SQL> CREATE TABLE svm6142 COMPRESS AS
23:56:00   2  SELECT
23:56:00   3  pair
23:56:00   4  ,ydate
23:56:00   5  ,prdate
23:56:00   6  ,clse
23:56:00   7  ,g6
23:56:00   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
23:56:00   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
23:56:00  10  ,CASE WHEN trend IS NULL THEN 1
23:56:00  11  	    WHEN trend =0      THEN 1
23:56:00  12  	    ELSE trend END trend
23:56:00  13  ,cm4
23:56:00  14  ,cm6
23:56:00  15  ,cm8
23:56:00  16  ,cm10
23:56:00  17  ,cm12
23:56:00  18  ,cm14
23:56:00  19  ,cm16
23:56:00  20  ,cm18
23:56:00  21  --
23:56:00  22  ,ca4
23:56:00  23  ,ca6
23:56:00  24  ,ca8
23:56:00  25  ,ca10
23:56:00  26  ,ca12
23:56:00  27  ,ca14
23:56:00  28  ,ca16
23:56:00  29  ,ca18
23:56:00  30  --
23:56:00  31  ,cx4
23:56:00  32  ,cx6
23:56:00  33  ,cx8
23:56:00  34  ,cx10
23:56:00  35  ,cx12
23:56:00  36  ,cx14
23:56:00  37  ,cx16
23:56:00  38  ,cx18
23:56:00  39  --
23:56:00  40  ,crr4
23:56:00  41  ,crr6
23:56:00  42  ,crr8
23:56:00  43  ,crr10
23:56:00  44  ,crr12
23:56:00  45  ,crr14
23:56:00  46  ,crr16
23:56:00  47  ,crr18
23:56:00  48  --
23:56:00  49  ,hh
23:56:00  50  ,d
23:56:00  51  ,w
23:56:00  52  ,mpm
23:56:00  53  ,mph
23:56:00  54  FROM svm6122
23:56:00  55  ORDER BY ydate
23:56:00  56  /

Table created.

Elapsed: 00:00:00.39
23:56:01 SQL> 
23:56:01 SQL> -- rpt
23:56:01 SQL> 
23:56:01 SQL> SELECT
23:56:01   2  pair
23:56:01   3  ,trend
23:56:01   4  ,gatt
23:56:01   5  ,COUNT(pair)
23:56:01   6  ,AVG(g6)
23:56:01   7  FROM svm6142
23:56:01   8  GROUP BY pair,trend,gatt
23:56:01   9  ORDER BY pair,trend,gatt
23:56:01  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_chf 	-1 nup	      6569 -.00221037
eur_chf 	-1 up	      3329  .00366184
eur_chf 	-1		55
eur_chf 	 1 nup	      6552 -.00224996
eur_chf 	 1 up	      3118 .004356422
eur_chf 	 1		17

6 rows selected.

Elapsed: 00:00:00.05
23:56:01 SQL> 
23:56:01 SQL> 
23:56:01 SQL> -- Derive NTILE based params:
23:56:01 SQL> 
23:56:01 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.15
23:56:01 SQL> CREATE TABLE svm6162 COMPRESS AS
23:56:01   2  SELECT
23:56:01   3  pair
23:56:01   4  ,ydate
23:56:01   5  ,prdate
23:56:01   6  ,clse
23:56:01   7  ,g6
23:56:01   8  ,gatt
23:56:01   9  ,gattn
23:56:01  10  ,trend
23:56:01  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
23:56:01  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
23:56:01  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
23:56:01  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
23:56:01  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
23:56:01  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
23:56:01  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
23:56:01  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
23:56:01  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
23:56:01  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
23:56:01  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
23:56:01  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
23:56:01  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
23:56:01  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
23:56:01  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
23:56:01  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
23:56:01  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
23:56:01  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
23:56:01  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
23:56:01  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
23:56:01  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
23:56:01  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
23:56:01  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
23:56:01  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
23:56:01  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
23:56:01  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
23:56:01  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
23:56:01  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
23:56:01  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
23:56:01  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
23:56:01  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
23:56:01  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
23:56:01  43  ,hh  att32
23:56:01  44  ,d   att33
23:56:01  45  ,w   att34
23:56:01  46  ,mpm att35
23:56:01  47  ,mph att36
23:56:01  48  ,trend att37
23:56:01  49  FROM svm6142
23:56:01  50  ORDER BY ydate
23:56:01  51  /

Table created.

Elapsed: 00:00:05.04
23:56:06 SQL> 
23:56:06 SQL> -- rpt
23:56:06 SQL> 
23:56:06 SQL> SELECT
23:56:06   2  pair
23:56:06   3  ,trend
23:56:06   4  ,gatt
23:56:06   5  ,COUNT(pair)
23:56:06   6  ,AVG(g6)
23:56:06   7  FROM svm6162
23:56:06   8  GROUP BY pair,trend,gatt
23:56:06   9  ORDER BY pair,trend,gatt
23:56:06  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_chf 	-1 nup	      6569 -.00221037
eur_chf 	-1 up	      3329  .00366184
eur_chf 	-1		55
eur_chf 	 1 nup	      6552 -.00224996
eur_chf 	 1 up	      3118 .004356422
eur_chf 	 1		17

6 rows selected.

Elapsed: 00:00:00.02
23:56:06 SQL> 
23:56:06 SQL> -- I comment out sections related to score-feedback.
23:56:06 SQL> -- I tested score-feeback and it hurts results:
23:56:06 SQL> 
23:56:06 SQL> -- CREATE OR REPLACE VIEW sc12 AS
23:56:06 SQL> -- SELECT
23:56:06 SQL> -- m.pair
23:56:06 SQL> -- ,m.ydate
23:56:06 SQL> -- ,m.prdate
23:56:06 SQL> -- ,l.score score_long
23:56:06 SQL> -- ,s.score score_short
23:56:06 SQL> -- ,m.g6
23:56:06 SQL> -- FROM svm62scores l,svm62scores s,svm6162 m
23:56:06 SQL> -- WHERE l.targ='gatt'
23:56:06 SQL> -- AND	 s.targ='gattn'
23:56:06 SQL> -- AND l.prdate = s.prdate
23:56:06 SQL> -- AND l.prdate = m.prdate
23:56:06 SQL> -- -- Speed things up:
23:56:06 SQL> -- AND l.pair = '&1'
23:56:06 SQL> -- AND s.pair = '&1'
23:56:06 SQL> -- /
23:56:06 SQL> --
23:56:06 SQL> -- DROP TABLE score_corr;
23:56:06 SQL> --
23:56:06 SQL> -- CREATE TABLE score_corr COMPRESS AS
23:56:06 SQL> -- SELECT
23:56:06 SQL> -- pair
23:56:06 SQL> -- -- ,ydate
23:56:06 SQL> -- ,prdate
23:56:06 SQL> -- -- Find corr() tween score and g6 over 2 day period:
23:56:06 SQL> -- ,CORR((score_long - score_short),g6)
23:56:06 SQL> --   OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 2*24*60/5 PRECEDING AND CURRENT ROW)sc_corr
23:56:06 SQL> -- FROM sc12
23:56:06 SQL> -- /
23:56:06 SQL> 
23:56:06 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.32
23:56:06 SQL> 
23:56:06 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.30
23:56:07 SQL> 
23:56:07 SQL> CREATE TABLE modsrc COMPRESS AS
23:56:07   2  SELECT
23:56:07   3  pair
23:56:07   4  ,ydate
23:56:07   5  ,prdate
23:56:07   6  ,trend
23:56:07   7  ,g6
23:56:07   8  ,gatt
23:56:07   9  ,gattn
23:56:07  10  ,SUM(g6)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g00
23:56:07  11  ,SUM(g6)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g01
23:56:07  12  ,SUM(g6)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g02
23:56:07  13  ,SUM(g6)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g03
23:56:07  14  ,SUM(g6)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g04
23:56:07  15  ,SUM(g6)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g05
23:56:07  16  ,SUM(g6)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g06
23:56:07  17  ,SUM(g6)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g07
23:56:07  18  ,SUM(g6)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g08
23:56:07  19  ,SUM(g6)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g09
23:56:07  20  ,SUM(g6)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g10
23:56:07  21  ,SUM(g6)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g11
23:56:07  22  ,SUM(g6)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g12
23:56:07  23  ,SUM(g6)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g13
23:56:07  24  ,SUM(g6)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g14
23:56:07  25  ,SUM(g6)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g15
23:56:07  26  ,SUM(g6)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g16
23:56:07  27  ,SUM(g6)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g17
23:56:07  28  ,SUM(g6)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g18
23:56:07  29  ,SUM(g6)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g19
23:56:07  30  ,SUM(g6)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g20
23:56:07  31  ,SUM(g6)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g21
23:56:07  32  ,SUM(g6)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g22
23:56:07  33  ,SUM(g6)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g23
23:56:07  34  ,SUM(g6)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g24
23:56:07  35  ,SUM(g6)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g25
23:56:07  36  ,SUM(g6)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g26
23:56:07  37  ,SUM(g6)OVER(PARTITION BY trend,att27 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g27
23:56:07  38  ,SUM(g6)OVER(PARTITION BY trend,att28 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g28
23:56:07  39  ,SUM(g6)OVER(PARTITION BY trend,att29 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g29
23:56:07  40  ,SUM(g6)OVER(PARTITION BY trend,att30 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g30
23:56:07  41  ,SUM(g6)OVER(PARTITION BY trend,att31 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g31
23:56:07  42  ,SUM(g6)OVER(PARTITION BY trend,att32 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g32
23:56:07  43  ,SUM(g6)OVER(PARTITION BY trend,att33 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g33
23:56:07  44  ,SUM(g6)OVER(PARTITION BY trend,att34 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g34
23:56:07  45  ,SUM(g6)OVER(PARTITION BY trend,att35 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g35
23:56:07  46  ,SUM(g6)OVER(PARTITION BY trend,att36 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g36
23:56:07  47  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g37
23:56:07  48  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*40 PRECEDING AND CURRENT ROW)g38
23:56:07  49  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*30 PRECEDING AND CURRENT ROW)g39
23:56:07  50  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)g40
23:56:07  51  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)g41
23:56:07  52  FROM svm6162
23:56:07  53  /
