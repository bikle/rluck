
SQL*Plus: Release 11.2.0.1.0 Production on Tue Mar 1 04:08:07 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

04:08:07 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
04:08:07 SQL> 04:08:07 SQL> --
04:08:07 SQL> -- pair10.sql
04:08:07 SQL> --
04:08:07 SQL> 
04:08:07 SQL> -- Creates views and tables needed by SVM.
04:08:07 SQL> 
04:08:07 SQL> 
04:08:07 SQL> CREATE OR REPLACE VIEW svm6102 AS
04:08:07   2  SELECT
04:08:07   3  pair
04:08:07   4  ,ydate
04:08:07   5  ,prdate
04:08:07   6  ,rownum rnum -- acts as t in my time-series
04:08:07   7  ,clse
04:08:07   8  -- Derive a bunch of attributes from clse, the latest price:
04:08:07   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
04:08:07  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
04:08:07  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
04:08:07  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
04:08:07  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
04:08:07  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
04:08:07  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
04:08:07  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
04:08:07  17  --
04:08:07  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
04:08:07  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
04:08:07  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
04:08:07  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
04:08:07  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
04:08:07  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
04:08:07  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
04:08:07  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
04:08:07  26  --
04:08:07  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
04:08:07  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
04:08:07  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
04:08:07  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
04:08:07  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
04:08:07  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
04:08:07  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
04:08:07  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
04:08:07  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
04:08:07  36  FROM di5min WHERE pair = '&1'
04:08:07  37  AND ydate > sysdate - 95
04:08:07  38  ORDER BY ydate
04:08:07  39  /
old  36: FROM di5min WHERE pair = '&1'
new  36: FROM di5min WHERE pair = 'aud_usd'

View created.

Elapsed: 00:00:00.07
04:08:07 SQL> 
04:08:07 SQL> -- rpt
04:08:07 SQL> 
04:08:07 SQL> SELECT
04:08:07   2  pair
04:08:07   3  ,COUNT(pair)
04:08:07   4  ,MIN(clse),MAX(clse)
04:08:07   5  ,MIN(avg6),MAX(avg6)
04:08:07   6  ,MIN(ydate),MAX(ydate)
04:08:07   7  FROM svm6102
04:08:07   8  GROUP BY pair
04:08:07   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
aud_usd       19038	.95405	   1.0246 .957141438 1.02282723 2010-11-26 04:10:00 2011-03-01 03:55:00

Elapsed: 00:00:00.81
04:08:08 SQL> 
04:08:08 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
04:08:08 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.15
04:08:08 SQL> CREATE TABLE svm6122 COMPRESS AS
04:08:08   2  SELECT
04:08:08   3  pair
04:08:08   4  ,ydate
04:08:08   5  ,prdate
04:08:08   6  ,clse
04:08:08   7  -- g6 is important. I want to predict g6:
04:08:08   8  ,(ld6 - clse)/clse g6
04:08:08   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
04:08:08  10  -- I want more attributes from the ones I derived above:
04:08:08  11  -- clse relation to moving-min
04:08:08  12  ,clse-min4  cm4
04:08:08  13  ,clse-min6  cm6
04:08:08  14  ,clse-min8  cm8
04:08:08  15  ,clse-min10 cm10
04:08:08  16  ,clse-min12 cm12
04:08:08  17  ,clse-min14 cm14
04:08:08  18  ,clse-min16 cm16
04:08:08  19  ,clse-min18 cm18
04:08:08  20  -- clse relation to moving-avg
04:08:08  21  ,clse-avg4  ca4
04:08:08  22  ,clse-avg6  ca6
04:08:08  23  ,clse-avg8  ca8
04:08:08  24  ,clse-avg10 ca10
04:08:08  25  ,clse-avg12 ca12
04:08:08  26  ,clse-avg14 ca14
04:08:08  27  ,clse-avg16 ca16
04:08:08  28  ,clse-avg18 ca18
04:08:08  29  -- clse relation to moving-max
04:08:08  30  ,clse-max4  cx4
04:08:08  31  ,clse-max6  cx6
04:08:08  32  ,clse-max8  cx8
04:08:08  33  ,clse-max10 cx10
04:08:08  34  ,clse-max12 cx12
04:08:08  35  ,clse-max14 cx14
04:08:08  36  ,clse-max16 cx16
04:08:08  37  ,clse-max18 cx18
04:08:08  38  -- Derive more attributes.
04:08:08  39  -- I want to use CORR() here to help SVM see the shape of the series.
04:08:08  40  -- But COVAR_POP is more stable:
04:08:08  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
04:08:08  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
04:08:08  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
04:08:08  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
04:08:08  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
04:08:08  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
04:08:08  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
04:08:08  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
04:08:08  49  -- Derive date related attributes:
04:08:08  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
04:08:08  51  ,0+TO_CHAR(ydate,'D')d
04:08:08  52  ,0+TO_CHAR(ydate,'W')w
04:08:08  53  -- mpm stands for minutes-past-midnight:
04:08:08  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
04:08:08  55  -- mph stands for minutes-past-hour:
04:08:08  56  ,0+TO_CHAR(ydate,'MI')mph
04:08:08  57  FROM svm6102
04:08:08  58  WHERE clse > 0
04:08:08  59  ORDER BY ydate
04:08:08  60  /

Table created.

Elapsed: 00:00:02.24
04:08:10 SQL> 
04:08:10 SQL> -- rpt
04:08:10 SQL> 
04:08:10 SQL> SELECT
04:08:10   2  pair
04:08:10   3  ,COUNT(pair)
04:08:10   4  ,MIN(clse),MAX(clse)
04:08:10   5  ,MIN(ydate),MAX(ydate)
04:08:10   6  FROM svm6122
04:08:10   7  GROUP BY pair
04:08:10   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
aud_usd       19038	.95405	   1.0246 2010-11-26 04:10:00 2011-03-01 03:55:00

Elapsed: 00:00:00.04
04:08:10 SQL> 
04:08:10 SQL> -- Prepare for derivation of NTILE based params:
04:08:10 SQL> 
04:08:10 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.10
04:08:10 SQL> CREATE TABLE svm6142 COMPRESS AS
04:08:10   2  SELECT
04:08:10   3  pair
04:08:10   4  ,ydate
04:08:10   5  ,prdate
04:08:10   6  ,clse
04:08:10   7  ,g6
04:08:10   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
04:08:10   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
04:08:10  10  ,CASE WHEN trend IS NULL THEN 1
04:08:10  11  	    WHEN trend =0      THEN 1
04:08:10  12  	    ELSE trend END trend
04:08:10  13  ,cm4
04:08:10  14  ,cm6
04:08:10  15  ,cm8
04:08:10  16  ,cm10
04:08:10  17  ,cm12
04:08:10  18  ,cm14
04:08:10  19  ,cm16
04:08:10  20  ,cm18
04:08:10  21  --
04:08:10  22  ,ca4
04:08:10  23  ,ca6
04:08:10  24  ,ca8
04:08:10  25  ,ca10
04:08:10  26  ,ca12
04:08:10  27  ,ca14
04:08:10  28  ,ca16
04:08:10  29  ,ca18
04:08:10  30  --
04:08:10  31  ,cx4
04:08:10  32  ,cx6
04:08:10  33  ,cx8
04:08:10  34  ,cx10
04:08:10  35  ,cx12
04:08:10  36  ,cx14
04:08:10  37  ,cx16
04:08:10  38  ,cx18
04:08:10  39  --
04:08:10  40  ,crr4
04:08:10  41  ,crr6
04:08:10  42  ,crr8
04:08:10  43  ,crr10
04:08:10  44  ,crr12
04:08:10  45  ,crr14
04:08:10  46  ,crr16
04:08:10  47  ,crr18
04:08:10  48  --
04:08:10  49  ,hh
04:08:10  50  ,d
04:08:10  51  ,w
04:08:10  52  ,mpm
04:08:10  53  ,mph
04:08:10  54  FROM svm6122
04:08:10  55  ORDER BY ydate
04:08:10  56  /

Table created.

Elapsed: 00:00:00.46
04:08:11 SQL> 
04:08:11 SQL> -- rpt
04:08:11 SQL> 
04:08:11 SQL> SELECT
04:08:11   2  pair
04:08:11   3  ,trend
04:08:11   4  ,gatt
04:08:11   5  ,COUNT(pair)
04:08:11   6  ,AVG(g6)
04:08:11   7  FROM svm6142
04:08:11   8  GROUP BY pair,trend,gatt
04:08:11   9  ORDER BY pair,trend,gatt
04:08:11  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5588 -.00170824
aud_usd 	-1 up	      3574 .003447898
aud_usd 	-1		13
aud_usd 	 1 nup	      6561  -.0016475
aud_usd 	 1 up	      3243 .003595592
aud_usd 	 1		59

6 rows selected.

Elapsed: 00:00:00.05
04:08:11 SQL> 
04:08:11 SQL> 
04:08:11 SQL> -- Derive NTILE based params:
04:08:11 SQL> 
04:08:11 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.15
04:08:11 SQL> CREATE TABLE svm6162 COMPRESS AS
04:08:11   2  SELECT
04:08:11   3  pair
04:08:11   4  ,ydate
04:08:11   5  ,prdate
04:08:11   6  ,clse
04:08:11   7  ,g6
04:08:11   8  ,gatt
04:08:11   9  ,gattn
04:08:11  10  ,trend
04:08:11  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
04:08:11  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
04:08:11  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
04:08:11  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
04:08:11  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
04:08:11  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
04:08:11  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
04:08:11  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
04:08:11  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
04:08:11  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
04:08:11  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
04:08:11  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
04:08:11  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
04:08:11  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
04:08:11  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
04:08:11  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
04:08:11  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
04:08:11  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
04:08:11  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
04:08:11  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
04:08:11  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
04:08:11  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
04:08:11  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
04:08:11  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
04:08:11  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
04:08:11  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
04:08:11  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
04:08:11  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
04:08:11  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
04:08:11  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
04:08:11  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
04:08:11  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
04:08:11  43  ,hh  att32
04:08:11  44  ,d   att33
04:08:11  45  ,w   att34
04:08:11  46  ,mpm att35
04:08:11  47  ,mph att36
04:08:11  48  ,trend att37
04:08:11  49  FROM svm6142
04:08:11  50  ORDER BY ydate
04:08:11  51  /

Table created.

Elapsed: 00:00:05.34
04:08:16 SQL> 
04:08:16 SQL> -- rpt
04:08:16 SQL> 
04:08:16 SQL> SELECT
04:08:16   2  pair
04:08:16   3  ,trend
04:08:16   4  ,gatt
04:08:16   5  ,COUNT(pair)
04:08:16   6  ,AVG(g6)
04:08:16   7  FROM svm6162
04:08:16   8  GROUP BY pair,trend,gatt
04:08:16   9  ORDER BY pair,trend,gatt
04:08:16  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5588 -.00170824
aud_usd 	-1 up	      3574 .003447898
aud_usd 	-1		13
aud_usd 	 1 nup	      6561  -.0016475
aud_usd 	 1 up	      3243 .003595592
aud_usd 	 1		59

6 rows selected.

Elapsed: 00:00:00.04
04:08:16 SQL> 
04:08:16 SQL> -- I comment out sections related to score-feedback.
04:08:16 SQL> -- I tested score-feeback and it hurts results:
04:08:16 SQL> 
04:08:16 SQL> -- CREATE OR REPLACE VIEW sc12 AS
04:08:16 SQL> -- SELECT
04:08:16 SQL> -- m.pair
04:08:16 SQL> -- ,m.ydate
04:08:16 SQL> -- ,m.prdate
04:08:16 SQL> -- ,l.score score_long
04:08:16 SQL> -- ,s.score score_short
04:08:16 SQL> -- ,m.g6
04:08:16 SQL> -- FROM svm62scores l,svm62scores s,svm6162 m
04:08:16 SQL> -- WHERE l.targ='gatt'
04:08:16 SQL> -- AND	 s.targ='gattn'
04:08:16 SQL> -- AND l.prdate = s.prdate
04:08:16 SQL> -- AND l.prdate = m.prdate
04:08:16 SQL> -- -- Speed things up:
04:08:16 SQL> -- AND l.pair = '&1'
04:08:16 SQL> -- AND s.pair = '&1'
04:08:16 SQL> -- /
04:08:16 SQL> --
04:08:16 SQL> -- DROP TABLE score_corr;
04:08:16 SQL> --
04:08:16 SQL> -- CREATE TABLE score_corr COMPRESS AS
04:08:16 SQL> -- SELECT
04:08:16 SQL> -- pair
04:08:16 SQL> -- -- ,ydate
04:08:16 SQL> -- ,prdate
04:08:16 SQL> -- -- Find corr() tween score and g6 over 2 day period:
04:08:16 SQL> -- ,CORR((score_long - score_short),g6)
04:08:16 SQL> --   OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 2*24*60/5 PRECEDING AND CURRENT ROW)sc_corr
04:08:16 SQL> -- FROM sc12
04:08:16 SQL> -- /
04:08:16 SQL> 
04:08:16 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.93
04:08:17 SQL> 
04:08:17 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:01.97
04:08:19 SQL> 
04:08:19 SQL> CREATE TABLE modsrc COMPRESS AS
04:08:19   2  SELECT
04:08:19   3  pair
04:08:19   4  ,ydate
04:08:19   5  ,prdate
04:08:19   6  ,trend
04:08:19   7  ,g6
04:08:19   8  ,gatt
04:08:19   9  ,gattn
04:08:19  10  ,SUM(g6)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g00
04:08:19  11  ,SUM(g6)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g01
04:08:19  12  ,SUM(g6)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g02
04:08:19  13  ,SUM(g6)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g03
04:08:19  14  ,SUM(g6)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g04
04:08:19  15  ,SUM(g6)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g05
04:08:19  16  ,SUM(g6)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g06
04:08:19  17  ,SUM(g6)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g07
04:08:19  18  ,SUM(g6)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g08
04:08:19  19  ,SUM(g6)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g09
04:08:19  20  ,SUM(g6)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g10
04:08:19  21  ,SUM(g6)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g11
04:08:19  22  ,SUM(g6)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g12
04:08:19  23  ,SUM(g6)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g13
04:08:19  24  ,SUM(g6)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g14
04:08:19  25  ,SUM(g6)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g15
04:08:19  26  ,SUM(g6)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g16
04:08:19  27  ,SUM(g6)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g17
04:08:19  28  ,SUM(g6)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g18
04:08:19  29  ,SUM(g6)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g19
04:08:19  30  ,SUM(g6)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g20
04:08:19  31  ,SUM(g6)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g21
04:08:19  32  ,SUM(g6)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g22
04:08:19  33  ,SUM(g6)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g23
04:08:19  34  ,SUM(g6)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g24
04:08:19  35  ,SUM(g6)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g25
04:08:19  36  ,SUM(g6)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g26
04:08:19  37  ,SUM(g6)OVER(PARTITION BY trend,att27 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g27
04:08:19  38  ,SUM(g6)OVER(PARTITION BY trend,att28 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g28
04:08:19  39  ,SUM(g6)OVER(PARTITION BY trend,att29 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g29
04:08:19  40  ,SUM(g6)OVER(PARTITION BY trend,att30 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g30
04:08:19  41  ,SUM(g6)OVER(PARTITION BY trend,att31 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g31
04:08:19  42  ,SUM(g6)OVER(PARTITION BY trend,att32 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g32
04:08:19  43  ,SUM(g6)OVER(PARTITION BY trend,att33 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g33
04:08:19  44  ,SUM(g6)OVER(PARTITION BY trend,att34 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g34
04:08:19  45  ,SUM(g6)OVER(PARTITION BY trend,att35 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g35
04:08:19  46  ,SUM(g6)OVER(PARTITION BY trend,att36 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g36
04:08:19  47  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g37
04:08:19  48  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*40 PRECEDING AND CURRENT ROW)g38
04:08:19  49  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*30 PRECEDING AND CURRENT ROW)g39
04:08:19  50  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)g40
04:08:19  51  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)g41
04:08:19  52  FROM svm6162
04:08:19  53  /

Table created.

Elapsed: 00:00:06.97
04:08:26 SQL> 
04:08:26 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:06.06
04:08:32 SQL> 
04:08:32 SQL> -- rpt
04:08:32 SQL> 
04:08:32 SQL> SELECT
04:08:32   2  pair
04:08:32   3  ,trend
04:08:32   4  ,gatt
04:08:32   5  ,COUNT(pair)
04:08:32   6  ,AVG(g6)
04:08:32   7  FROM modsrc
04:08:32   8  GROUP BY pair,trend,gatt
04:08:32   9  ORDER BY pair,trend,gatt
04:08:32  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5588 -.00170824
aud_usd 	-1 up	      3574 .003447898
aud_usd 	-1		13
aud_usd 	 1 nup	      6561  -.0016475
aud_usd 	 1 up	      3243 .003595592
aud_usd 	 1		59

6 rows selected.

Elapsed: 00:00:00.04
04:08:32 SQL> 
04:08:32 SQL> 
04:08:32 SQL> SELECT pair,COUNT(pair)FROM svm6102 GROUP BY pair;

PAIR	COUNT(PAIR)
------- -----------
aud_usd       19038

Elapsed: 00:00:00.79
04:08:33 SQL> 
04:08:33 SQL> SELECT pair,COUNT(pair)FROM modsrc GROUP BY pair;

PAIR	COUNT(PAIR)
------- -----------
aud_usd       19038

Elapsed: 00:00:00.01
04:08:33 SQL> 
04:08:33 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
