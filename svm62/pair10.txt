
SQL*Plus: Release 11.2.0.1.0 Production on Wed Feb 16 05:55:42 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

05:55:42 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
05:55:42 SQL> 05:55:42 SQL> --
05:55:42 SQL> -- pair10.sql
05:55:42 SQL> --
05:55:42 SQL> 
05:55:42 SQL> -- Creates views and tables needed by SVM.
05:55:42 SQL> 
05:55:42 SQL> 
05:55:42 SQL> CREATE OR REPLACE VIEW svm6102 AS
05:55:42   2  SELECT
05:55:42   3  pair
05:55:42   4  ,ydate
05:55:42   5  ,prdate
05:55:42   6  ,rownum rnum -- acts as t in my time-series
05:55:42   7  ,clse
05:55:42   8  -- Derive a bunch of attributes from clse, the latest price:
05:55:42   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
05:55:42  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
05:55:42  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
05:55:42  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
05:55:42  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
05:55:42  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
05:55:42  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
05:55:42  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
05:55:42  17  --
05:55:42  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
05:55:42  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
05:55:42  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
05:55:42  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
05:55:42  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
05:55:42  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
05:55:42  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
05:55:42  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
05:55:42  26  --
05:55:42  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
05:55:42  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
05:55:42  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
05:55:42  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
05:55:42  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
05:55:42  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
05:55:42  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
05:55:42  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
05:55:42  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
05:55:42  36  FROM di5min WHERE pair = '&1'
05:55:42  37  AND ydate > sysdate - 95
05:55:42  38  ORDER BY ydate
05:55:42  39  /
old  36: FROM di5min WHERE pair = '&1'
new  36: FROM di5min WHERE pair = 'gbp_usd'

View created.

Elapsed: 00:00:00.06
05:55:42 SQL> 
05:55:42 SQL> -- rpt
05:55:42 SQL> 
05:55:42 SQL> SELECT
05:55:42   2  pair
05:55:42   3  ,COUNT(pair)
05:55:42   4  ,MIN(clse),MAX(clse)
05:55:42   5  ,MIN(avg6),MAX(avg6)
05:55:42   6  ,MIN(ydate),MAX(ydate)
05:55:42   7  FROM svm6102
05:55:42   8  GROUP BY pair
05:55:42   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
gbp_usd       19180   1.535325	  1.62765 1.53696747 1.62234803 2010-11-14 20:55:00 2011-02-16 05:40:00

Elapsed: 00:00:00.81
05:55:43 SQL> 
05:55:43 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
05:55:43 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.26
05:55:43 SQL> CREATE TABLE svm6122 COMPRESS AS
05:55:43   2  SELECT
05:55:43   3  pair
05:55:43   4  ,ydate
05:55:43   5  ,prdate
05:55:43   6  ,clse
05:55:43   7  -- g6 is important. I want to predict g6:
05:55:43   8  ,ld6 - clse g6
05:55:43   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
05:55:43  10  -- I want more attributes from the ones I derived above:
05:55:43  11  -- clse relation to moving-min
05:55:43  12  ,clse-min4  cm4
05:55:43  13  ,clse-min6  cm6
05:55:43  14  ,clse-min8  cm8
05:55:43  15  ,clse-min10 cm10
05:55:43  16  ,clse-min12 cm12
05:55:43  17  ,clse-min14 cm14
05:55:43  18  ,clse-min16 cm16
05:55:43  19  ,clse-min18 cm18
05:55:43  20  -- clse relation to moving-avg
05:55:43  21  ,clse-avg4  ca4
05:55:43  22  ,clse-avg6  ca6
05:55:43  23  ,clse-avg8  ca8
05:55:43  24  ,clse-avg10 ca10
05:55:43  25  ,clse-avg12 ca12
05:55:43  26  ,clse-avg14 ca14
05:55:43  27  ,clse-avg16 ca16
05:55:43  28  ,clse-avg18 ca18
05:55:43  29  -- clse relation to moving-max
05:55:43  30  ,clse-max4  cx4
05:55:43  31  ,clse-max6  cx6
05:55:43  32  ,clse-max8  cx8
05:55:43  33  ,clse-max10 cx10
05:55:43  34  ,clse-max12 cx12
05:55:43  35  ,clse-max14 cx14
05:55:43  36  ,clse-max16 cx16
05:55:43  37  ,clse-max18 cx18
05:55:43  38  -- Derive more attributes.
05:55:43  39  -- I want to use CORR() here to help SVM see the shape of the series.
05:55:43  40  -- But COVAR_POP is more stable:
05:55:43  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
05:55:43  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
05:55:43  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
05:55:43  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
05:55:43  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
05:55:43  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
05:55:43  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
05:55:43  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
05:55:43  49  -- Derive date related attributes:
05:55:43  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
05:55:43  51  ,0+TO_CHAR(ydate,'D')d
05:55:43  52  ,0+TO_CHAR(ydate,'W')w
05:55:43  53  -- mpm stands for minutes-past-midnight:
05:55:43  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
05:55:43  55  -- mph stands for minutes-past-hour:
05:55:43  56  ,0+TO_CHAR(ydate,'MI')mph
05:55:43  57  FROM svm6102
05:55:43  58  ORDER BY ydate
05:55:43  59  /

Table created.

Elapsed: 00:00:02.08
05:55:46 SQL> 
05:55:46 SQL> -- rpt
05:55:46 SQL> 
05:55:46 SQL> SELECT
05:55:46   2  pair
05:55:46   3  ,COUNT(pair)
05:55:46   4  ,MIN(clse),MAX(clse)
05:55:46   5  ,MIN(ydate),MAX(ydate)
05:55:46   6  FROM svm6122
05:55:46   7  GROUP BY pair
05:55:46   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
gbp_usd       19180   1.535325	  1.62765 2010-11-14 20:55:00 2011-02-16 05:40:00

Elapsed: 00:00:00.04
05:55:46 SQL> 
05:55:46 SQL> -- Prepare for derivation of NTILE based params:
05:55:46 SQL> 
05:55:46 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.25
05:55:46 SQL> CREATE TABLE svm6142 COMPRESS AS
05:55:46   2  SELECT
05:55:46   3  pair
05:55:46   4  ,ydate
05:55:46   5  ,prdate
05:55:46   6  ,clse
05:55:46   7  ,g6
05:55:46   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
05:55:46   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
05:55:46  10  ,CASE WHEN trend IS NULL THEN 1
05:55:46  11  	    WHEN trend =0      THEN 1
05:55:46  12  	    ELSE trend END trend
05:55:46  13  ,cm4
05:55:46  14  ,cm6
05:55:46  15  ,cm8
05:55:46  16  ,cm10
05:55:46  17  ,cm12
05:55:46  18  ,cm14
05:55:46  19  ,cm16
05:55:46  20  ,cm18
05:55:46  21  --
05:55:46  22  ,ca4
05:55:46  23  ,ca6
05:55:46  24  ,ca8
05:55:46  25  ,ca10
05:55:46  26  ,ca12
05:55:46  27  ,ca14
05:55:46  28  ,ca16
05:55:46  29  ,ca18
05:55:46  30  --
05:55:46  31  ,cx4
05:55:46  32  ,cx6
05:55:46  33  ,cx8
05:55:46  34  ,cx10
05:55:46  35  ,cx12
05:55:46  36  ,cx14
05:55:46  37  ,cx16
05:55:46  38  ,cx18
05:55:46  39  --
05:55:46  40  ,crr4
05:55:46  41  ,crr6
05:55:46  42  ,crr8
05:55:46  43  ,crr10
05:55:46  44  ,crr12
05:55:46  45  ,crr14
05:55:46  46  ,crr16
05:55:46  47  ,crr18
05:55:46  48  --
05:55:46  49  ,hh
05:55:46  50  ,d
05:55:46  51  ,w
05:55:46  52  ,mpm
05:55:46  53  ,mph
05:55:46  54  FROM svm6122
05:55:46  55  ORDER BY ydate
05:55:46  56  /

Table created.

Elapsed: 00:00:00.38
05:55:46 SQL> 
05:55:46 SQL> -- rpt
05:55:46 SQL> 
05:55:46 SQL> SELECT
05:55:46   2  pair
05:55:46   3  ,trend
05:55:46   4  ,gatt
05:55:46   5  ,COUNT(pair)
05:55:46   6  ,AVG(g6)
05:55:46   7  FROM svm6142
05:55:46   8  GROUP BY pair,trend,gatt
05:55:46   9  ORDER BY pair,trend,gatt
05:55:46  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      5662 -.00246702
gbp_usd 	-1 up	      3680 .004266258
gbp_usd 	-1		19
gbp_usd 	 1 nup	      6193 -.00268672
gbp_usd 	 1 up	      3573 .004200831
gbp_usd 	 1		53

6 rows selected.

Elapsed: 00:00:00.04
05:55:46 SQL> 
05:55:46 SQL> 
05:55:46 SQL> -- Derive NTILE based params:
05:55:46 SQL> 
05:55:46 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.12
05:55:46 SQL> CREATE TABLE svm6162 COMPRESS AS
05:55:46   2  SELECT
05:55:46   3  pair
05:55:46   4  ,ydate
05:55:46   5  ,prdate
05:55:46   6  ,clse
05:55:46   7  ,g6
05:55:46   8  ,gatt
05:55:46   9  ,gattn
05:55:46  10  ,trend
05:55:46  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
05:55:46  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
05:55:46  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
05:55:46  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
05:55:46  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
05:55:46  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
05:55:46  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
05:55:46  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
05:55:46  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
05:55:46  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
05:55:46  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
05:55:46  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
05:55:46  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
05:55:46  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
05:55:46  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
05:55:46  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
05:55:46  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
05:55:46  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
05:55:46  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
05:55:46  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
05:55:46  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
05:55:46  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
05:55:46  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
05:55:46  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
05:55:46  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
05:55:46  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
05:55:46  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
05:55:46  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
05:55:46  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
05:55:46  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
05:55:46  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
05:55:46  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
05:55:46  43  ,hh  att32
05:55:46  44  ,d   att33
05:55:46  45  ,w   att34
05:55:46  46  ,mpm att35
05:55:46  47  ,mph att36
05:55:46  48  ,trend att37
05:55:46  49  FROM svm6142
05:55:46  50  ORDER BY ydate
05:55:46  51  /

Table created.

Elapsed: 00:00:04.99
05:55:51 SQL> 
05:55:51 SQL> -- rpt
05:55:51 SQL> 
05:55:51 SQL> SELECT
05:55:51   2  pair
05:55:51   3  ,trend
05:55:51   4  ,gatt
05:55:51   5  ,COUNT(pair)
05:55:51   6  ,AVG(g6)
05:55:51   7  FROM svm6162
05:55:51   8  GROUP BY pair,trend,gatt
05:55:51   9  ORDER BY pair,trend,gatt
05:55:51  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      5662 -.00246702
gbp_usd 	-1 up	      3680 .004266258
gbp_usd 	-1		19
gbp_usd 	 1 nup	      6193 -.00268672
gbp_usd 	 1 up	      3573 .004200831
gbp_usd 	 1		53

6 rows selected.

Elapsed: 00:00:00.03
05:55:51 SQL> 
05:55:51 SQL> -- I comment out sections related to score-feedback.
05:55:51 SQL> -- I tested score-feeback and it hurts results:
05:55:51 SQL> 
05:55:51 SQL> -- CREATE OR REPLACE VIEW sc12 AS
05:55:51 SQL> -- SELECT
05:55:51 SQL> -- m.pair
05:55:51 SQL> -- ,m.ydate
05:55:51 SQL> -- ,m.prdate
05:55:51 SQL> -- ,l.score score_long
05:55:51 SQL> -- ,s.score score_short
05:55:51 SQL> -- ,m.g6
05:55:51 SQL> -- FROM svm62scores l,svm62scores s,svm6162 m
05:55:51 SQL> -- WHERE l.targ='gatt'
05:55:51 SQL> -- AND	 s.targ='gattn'
05:55:51 SQL> -- AND l.prdate = s.prdate
05:55:51 SQL> -- AND l.prdate = m.prdate
05:55:51 SQL> -- -- Speed things up:
05:55:51 SQL> -- AND l.pair = '&1'
05:55:51 SQL> -- AND s.pair = '&1'
05:55:51 SQL> -- /
05:55:51 SQL> --
05:55:51 SQL> -- DROP TABLE score_corr;
05:55:51 SQL> --
05:55:51 SQL> -- CREATE TABLE score_corr COMPRESS AS
05:55:51 SQL> -- SELECT
05:55:51 SQL> -- pair
05:55:51 SQL> -- -- ,ydate
05:55:51 SQL> -- ,prdate
05:55:51 SQL> -- -- Find corr() tween score and g6 over 2 day period:
05:55:51 SQL> -- ,CORR((score_long - score_short),g6)
05:55:51 SQL> --   OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 2*24*60/5 PRECEDING AND CURRENT ROW)sc_corr
05:55:51 SQL> -- FROM sc12
05:55:51 SQL> -- /
05:55:51 SQL> 
05:55:51 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.22
05:55:52 SQL> 
05:55:52 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.29
05:55:52 SQL> 
05:55:52 SQL> CREATE TABLE modsrc COMPRESS AS
05:55:52   2  SELECT
05:55:52   3  pair
05:55:52   4  ,ydate
05:55:52   5  ,prdate
05:55:52   6  ,trend
05:55:52   7  ,g6
05:55:52   8  ,gatt
05:55:52   9  ,gattn
05:55:52  10  ,SUM(g6)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g00
05:55:52  11  ,SUM(g6)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g01
05:55:52  12  ,SUM(g6)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g02
05:55:52  13  ,SUM(g6)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g03
05:55:52  14  ,SUM(g6)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g04
05:55:52  15  ,SUM(g6)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g05
05:55:52  16  ,SUM(g6)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g06
05:55:52  17  ,SUM(g6)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g07
05:55:52  18  ,SUM(g6)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g08
05:55:52  19  ,SUM(g6)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g09
05:55:52  20  ,SUM(g6)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g10
05:55:52  21  ,SUM(g6)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g11
05:55:52  22  ,SUM(g6)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g12
05:55:52  23  ,SUM(g6)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g13
05:55:52  24  ,SUM(g6)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g14
05:55:52  25  ,SUM(g6)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g15
05:55:52  26  ,SUM(g6)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g16
05:55:52  27  ,SUM(g6)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g17
05:55:52  28  ,SUM(g6)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g18
05:55:52  29  ,SUM(g6)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g19
05:55:52  30  ,SUM(g6)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g20
05:55:52  31  ,SUM(g6)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g21
05:55:52  32  ,SUM(g6)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g22
05:55:52  33  ,SUM(g6)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g23
05:55:52  34  ,SUM(g6)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g24
05:55:52  35  ,SUM(g6)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g25
05:55:52  36  ,SUM(g6)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g26
05:55:52  37  ,SUM(g6)OVER(PARTITION BY trend,att27 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g27
05:55:52  38  ,SUM(g6)OVER(PARTITION BY trend,att28 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g28
05:55:52  39  ,SUM(g6)OVER(PARTITION BY trend,att29 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g29
05:55:52  40  ,SUM(g6)OVER(PARTITION BY trend,att30 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g30
05:55:52  41  ,SUM(g6)OVER(PARTITION BY trend,att31 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g31
05:55:52  42  ,SUM(g6)OVER(PARTITION BY trend,att32 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g32
05:55:52  43  ,SUM(g6)OVER(PARTITION BY trend,att33 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g33
05:55:52  44  ,SUM(g6)OVER(PARTITION BY trend,att34 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g34
05:55:52  45  ,SUM(g6)OVER(PARTITION BY trend,att35 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g35
05:55:52  46  ,SUM(g6)OVER(PARTITION BY trend,att36 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g36
05:55:52  47  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g37
05:55:52  48  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*40 PRECEDING AND CURRENT ROW)g38
05:55:52  49  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*30 PRECEDING AND CURRENT ROW)g39
05:55:52  50  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)g40
05:55:52  51  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)g41
05:55:52  52  FROM svm6162
05:55:52  53  /
