
SQL*Plus: Release 11.2.0.1.0 Production on Tue Mar 8 21:29:06 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

21:29:06 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
21:29:06 SQL> 21:29:06 SQL> --
21:29:06 SQL> -- pair10.sql
21:29:06 SQL> --
21:29:06 SQL> 
21:29:06 SQL> -- Creates views and tables needed by SVM.
21:29:06 SQL> 
21:29:06 SQL> 
21:29:06 SQL> CREATE OR REPLACE VIEW svm6102 AS
21:29:06   2  SELECT
21:29:06   3  pair
21:29:06   4  ,ydate
21:29:06   5  ,prdate
21:29:06   6  ,rownum rnum -- acts as t in my time-series
21:29:06   7  ,clse
21:29:06   8  -- Derive a bunch of attributes from clse, the latest price:
21:29:06   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
21:29:06  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
21:29:06  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
21:29:06  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
21:29:06  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
21:29:06  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
21:29:06  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
21:29:06  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
21:29:06  17  --
21:29:06  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
21:29:06  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
21:29:06  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
21:29:06  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
21:29:06  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
21:29:06  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
21:29:06  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
21:29:06  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
21:29:06  26  --
21:29:06  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
21:29:06  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
21:29:06  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
21:29:06  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
21:29:06  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
21:29:06  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
21:29:06  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
21:29:06  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
21:29:06  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
21:29:06  36  FROM di5min WHERE pair = '&1'
21:29:06  37  AND ydate > sysdate - 95
21:29:06  38  ORDER BY ydate
21:29:06  39  /
old  36: FROM di5min WHERE pair = '&1'
new  36: FROM di5min WHERE pair = 'eur_jpy'

View created.

Elapsed: 00:00:00.06
21:29:06 SQL> 
21:29:06 SQL> -- rpt
21:29:06 SQL> 
21:29:06 SQL> SELECT
21:29:06   2  pair
21:29:06   3  ,COUNT(pair)
21:29:06   4  ,MIN(clse),MAX(clse)
21:29:06   5  ,MIN(avg6),MAX(avg6)
21:29:06   6  ,MIN(ydate),MAX(ydate)
21:29:06   7  FROM svm6102
21:29:06   8  GROUP BY pair
21:29:06   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_jpy       19021 106.906797 115.658957 107.120556 115.394781 2010-12-03 21:30:00 2011-03-08 21:10:00

Elapsed: 00:00:00.78
21:29:07 SQL> 
21:29:07 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
21:29:07 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.26
21:29:07 SQL> CREATE TABLE svm6122 COMPRESS AS
21:29:07   2  SELECT
21:29:07   3  pair
21:29:07   4  ,ydate
21:29:07   5  ,prdate
21:29:07   6  ,clse
21:29:07   7  -- g6 is important. I want to predict g6:
21:29:07   8  ,(ld6 - clse)/clse g6
21:29:07   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
21:29:07  10  -- I want more attributes from the ones I derived above:
21:29:07  11  -- clse relation to moving-min
21:29:07  12  ,clse-min4  cm4
21:29:07  13  ,clse-min6  cm6
21:29:07  14  ,clse-min8  cm8
21:29:07  15  ,clse-min10 cm10
21:29:07  16  ,clse-min12 cm12
21:29:07  17  ,clse-min14 cm14
21:29:07  18  ,clse-min16 cm16
21:29:07  19  ,clse-min18 cm18
21:29:07  20  -- clse relation to moving-avg
21:29:07  21  ,clse-avg4  ca4
21:29:07  22  ,clse-avg6  ca6
21:29:07  23  ,clse-avg8  ca8
21:29:07  24  ,clse-avg10 ca10
21:29:07  25  ,clse-avg12 ca12
21:29:07  26  ,clse-avg14 ca14
21:29:07  27  ,clse-avg16 ca16
21:29:07  28  ,clse-avg18 ca18
21:29:07  29  -- clse relation to moving-max
21:29:07  30  ,clse-max4  cx4
21:29:07  31  ,clse-max6  cx6
21:29:07  32  ,clse-max8  cx8
21:29:07  33  ,clse-max10 cx10
21:29:07  34  ,clse-max12 cx12
21:29:07  35  ,clse-max14 cx14
21:29:07  36  ,clse-max16 cx16
21:29:07  37  ,clse-max18 cx18
21:29:07  38  -- Derive more attributes.
21:29:07  39  -- I want to use CORR() here to help SVM see the shape of the series.
21:29:07  40  -- But COVAR_POP is more stable:
21:29:07  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
21:29:07  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
21:29:07  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
21:29:07  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
21:29:07  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
21:29:07  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
21:29:07  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
21:29:07  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
21:29:07  49  -- Derive date related attributes:
21:29:07  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
21:29:07  51  ,0+TO_CHAR(ydate,'D')d
21:29:07  52  ,0+TO_CHAR(ydate,'W')w
21:29:07  53  -- mpm stands for minutes-past-midnight:
21:29:07  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
21:29:07  55  -- mph stands for minutes-past-hour:
21:29:07  56  ,0+TO_CHAR(ydate,'MI')mph
21:29:07  57  FROM svm6102
21:29:07  58  WHERE clse > 0
21:29:07  59  ORDER BY ydate
21:29:07  60  /

Table created.

Elapsed: 00:00:02.21
21:29:09 SQL> 
21:29:09 SQL> -- rpt
21:29:09 SQL> 
21:29:09 SQL> SELECT
21:29:09   2  pair
21:29:09   3  ,COUNT(pair)
21:29:09   4  ,MIN(clse),MAX(clse)
21:29:09   5  ,MIN(ydate),MAX(ydate)
21:29:09   6  FROM svm6122
21:29:09   7  GROUP BY pair
21:29:09   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_jpy       19021 106.906797 115.658957 2010-12-03 21:30:00 2011-03-08 21:10:00

Elapsed: 00:00:00.05
21:29:09 SQL> 
21:29:09 SQL> -- Prepare for derivation of NTILE based params:
21:29:09 SQL> 
21:29:09 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.28
21:29:10 SQL> CREATE TABLE svm6142 COMPRESS AS
21:29:10   2  SELECT
21:29:10   3  pair
21:29:10   4  ,ydate
21:29:10   5  ,prdate
21:29:10   6  ,clse
21:29:10   7  ,g6
21:29:10   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
21:29:10   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
21:29:10  10  ,CASE WHEN trend IS NULL THEN 1
21:29:10  11  	    WHEN trend =0      THEN 1
21:29:10  12  	    ELSE trend END trend
21:29:10  13  ,cm4
21:29:10  14  ,cm6
21:29:10  15  ,cm8
21:29:10  16  ,cm10
21:29:10  17  ,cm12
21:29:10  18  ,cm14
21:29:10  19  ,cm16
21:29:10  20  ,cm18
21:29:10  21  --
21:29:10  22  ,ca4
21:29:10  23  ,ca6
21:29:10  24  ,ca8
21:29:10  25  ,ca10
21:29:10  26  ,ca12
21:29:10  27  ,ca14
21:29:10  28  ,ca16
21:29:10  29  ,ca18
21:29:10  30  --
21:29:10  31  ,cx4
21:29:10  32  ,cx6
21:29:10  33  ,cx8
21:29:10  34  ,cx10
21:29:10  35  ,cx12
21:29:10  36  ,cx14
21:29:10  37  ,cx16
21:29:10  38  ,cx18
21:29:10  39  --
21:29:10  40  ,crr4
21:29:10  41  ,crr6
21:29:10  42  ,crr8
21:29:10  43  ,crr10
21:29:10  44  ,crr12
21:29:10  45  ,crr14
21:29:10  46  ,crr16
21:29:10  47  ,crr18
21:29:10  48  --
21:29:10  49  ,hh
21:29:10  50  ,d
21:29:10  51  ,w
21:29:10  52  ,mpm
21:29:10  53  ,mph
21:29:10  54  FROM svm6122
21:29:10  55  ORDER BY ydate
21:29:10  56  /

Table created.

Elapsed: 00:00:00.48
21:29:10 SQL> 
21:29:10 SQL> -- rpt
21:29:10 SQL> 
21:29:10 SQL> SELECT
21:29:10   2  pair
21:29:10   3  ,trend
21:29:10   4  ,gatt
21:29:10   5  ,COUNT(pair)
21:29:10   6  ,AVG(g6)
21:29:10   7  FROM svm6142
21:29:10   8  GROUP BY pair,trend,gatt
21:29:10   9  ORDER BY pair,trend,gatt
21:29:10  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_jpy 	-1 nup	      5820 -.00162144
eur_jpy 	-1 up	      3112 .003358009
eur_jpy 	-1		 9
eur_jpy 	 1 nup	      6742 -.00139946
eur_jpy 	 1 up	      3275 .003413527
eur_jpy 	 1		63

6 rows selected.

Elapsed: 00:00:00.04
21:29:10 SQL> 
21:29:10 SQL> 
21:29:10 SQL> -- Derive NTILE based params:
21:29:10 SQL> 
21:29:10 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.18
21:29:10 SQL> CREATE TABLE svm6162 COMPRESS AS
21:29:10   2  SELECT
21:29:10   3  pair
21:29:10   4  ,ydate
21:29:10   5  ,prdate
21:29:10   6  ,clse
21:29:10   7  ,g6
21:29:10   8  ,gatt
21:29:10   9  ,gattn
21:29:10  10  ,trend
21:29:10  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
21:29:10  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
21:29:10  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
21:29:10  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
21:29:10  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
21:29:10  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
21:29:10  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
21:29:10  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
21:29:10  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
21:29:10  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
21:29:10  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
21:29:10  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
21:29:10  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
21:29:10  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
21:29:10  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
21:29:10  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
21:29:10  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
21:29:10  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
21:29:10  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
21:29:10  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
21:29:10  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
21:29:10  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
21:29:10  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
21:29:10  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
21:29:10  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
21:29:10  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
21:29:10  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
21:29:10  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
21:29:10  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
21:29:10  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
21:29:10  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
21:29:10  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
21:29:10  43  ,hh  att32
21:29:10  44  ,d   att33
21:29:10  45  ,w   att34
21:29:10  46  ,mpm att35
21:29:10  47  ,mph att36
21:29:10  48  ,trend att37
21:29:10  49  FROM svm6142
21:29:10  50  ORDER BY ydate
21:29:10  51  /

Table created.

Elapsed: 00:00:04.96
21:29:15 SQL> 
21:29:15 SQL> -- rpt
21:29:15 SQL> 
21:29:15 SQL> SELECT
21:29:15   2  pair
21:29:15   3  ,trend
21:29:15   4  ,gatt
21:29:15   5  ,COUNT(pair)
21:29:15   6  ,AVG(g6)
21:29:15   7  FROM svm6162
21:29:15   8  GROUP BY pair,trend,gatt
21:29:15   9  ORDER BY pair,trend,gatt
21:29:15  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_jpy 	-1 nup	      5820 -.00162144
eur_jpy 	-1 up	      3112 .003358009
eur_jpy 	-1		 9
eur_jpy 	 1 nup	      6742 -.00139946
eur_jpy 	 1 up	      3275 .003413527
eur_jpy 	 1		63

6 rows selected.

Elapsed: 00:00:00.03
21:29:15 SQL> 
21:29:15 SQL> -- I comment out sections related to score-feedback.
21:29:15 SQL> -- I tested score-feeback and it hurts results:
21:29:15 SQL> 
21:29:15 SQL> -- CREATE OR REPLACE VIEW sc12 AS
21:29:15 SQL> -- SELECT
21:29:15 SQL> -- m.pair
21:29:15 SQL> -- ,m.ydate
21:29:15 SQL> -- ,m.prdate
21:29:15 SQL> -- ,l.score score_long
21:29:15 SQL> -- ,s.score score_short
21:29:15 SQL> -- ,m.g6
21:29:15 SQL> -- FROM svm62scores l,svm62scores s,svm6162 m
21:29:15 SQL> -- WHERE l.targ='gatt'
21:29:15 SQL> -- AND	 s.targ='gattn'
21:29:15 SQL> -- AND l.prdate = s.prdate
21:29:15 SQL> -- AND l.prdate = m.prdate
21:29:15 SQL> -- -- Speed things up:
21:29:15 SQL> -- AND l.pair = '&1'
21:29:15 SQL> -- AND s.pair = '&1'
21:29:15 SQL> -- /
21:29:15 SQL> --
21:29:15 SQL> -- DROP TABLE score_corr;
21:29:15 SQL> --
21:29:15 SQL> -- CREATE TABLE score_corr COMPRESS AS
21:29:15 SQL> -- SELECT
21:29:15 SQL> -- pair
21:29:15 SQL> -- -- ,ydate
21:29:15 SQL> -- ,prdate
21:29:15 SQL> -- -- Find corr() tween score and g6 over 2 day period:
21:29:15 SQL> -- ,CORR((score_long - score_short),g6)
21:29:15 SQL> --   OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 2*24*60/5 PRECEDING AND CURRENT ROW)sc_corr
21:29:15 SQL> -- FROM sc12
21:29:15 SQL> -- /
21:29:15 SQL> 
21:29:15 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.31
21:29:16 SQL> 
21:29:16 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.29
21:29:16 SQL> 
21:29:16 SQL> CREATE TABLE modsrc COMPRESS AS
21:29:16   2  SELECT
21:29:16   3  pair
21:29:16   4  ,ydate
21:29:16   5  ,prdate
21:29:16   6  ,trend
21:29:16   7  ,g6
21:29:16   8  ,gatt
21:29:16   9  ,gattn
21:29:16  10  ,SUM(g6)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g00
21:29:16  11  ,SUM(g6)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g01
21:29:16  12  ,SUM(g6)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g02
21:29:16  13  ,SUM(g6)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g03
21:29:16  14  ,SUM(g6)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g04
21:29:16  15  ,SUM(g6)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g05
21:29:16  16  ,SUM(g6)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g06
21:29:16  17  ,SUM(g6)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g07
21:29:16  18  ,SUM(g6)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g08
21:29:16  19  ,SUM(g6)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g09
21:29:16  20  ,SUM(g6)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g10
21:29:16  21  ,SUM(g6)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g11
21:29:16  22  ,SUM(g6)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g12
21:29:16  23  ,SUM(g6)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g13
21:29:16  24  ,SUM(g6)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g14
21:29:16  25  ,SUM(g6)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g15
21:29:16  26  ,SUM(g6)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g16
21:29:16  27  ,SUM(g6)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g17
21:29:16  28  ,SUM(g6)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g18
21:29:16  29  ,SUM(g6)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g19
21:29:16  30  ,SUM(g6)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g20
21:29:16  31  ,SUM(g6)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g21
21:29:16  32  ,SUM(g6)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g22
21:29:16  33  ,SUM(g6)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g23
21:29:16  34  ,SUM(g6)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g24
21:29:16  35  ,SUM(g6)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g25
21:29:16  36  ,SUM(g6)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g26
21:29:16  37  ,SUM(g6)OVER(PARTITION BY trend,att27 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g27
21:29:16  38  ,SUM(g6)OVER(PARTITION BY trend,att28 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g28
21:29:16  39  ,SUM(g6)OVER(PARTITION BY trend,att29 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g29
21:29:16  40  ,SUM(g6)OVER(PARTITION BY trend,att30 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g30
21:29:16  41  ,SUM(g6)OVER(PARTITION BY trend,att31 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g31
21:29:16  42  ,SUM(g6)OVER(PARTITION BY trend,att32 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g32
21:29:16  43  ,SUM(g6)OVER(PARTITION BY trend,att33 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g33
21:29:16  44  ,SUM(g6)OVER(PARTITION BY trend,att34 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g34
21:29:16  45  ,SUM(g6)OVER(PARTITION BY trend,att35 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g35
21:29:16  46  ,SUM(g6)OVER(PARTITION BY trend,att36 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g36
21:29:16  47  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g37
21:29:16  48  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*40 PRECEDING AND CURRENT ROW)g38
21:29:16  49  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*30 PRECEDING AND CURRENT ROW)g39
21:29:16  50  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)g40
21:29:16  51  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)g41
21:29:16  52  FROM svm6162
21:29:16  53  /

Table created.

Elapsed: 00:00:06.64
21:29:23 SQL> 
21:29:23 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:02.54
21:29:25 SQL> 
21:29:25 SQL> -- rpt
21:29:25 SQL> 
21:29:25 SQL> SELECT
21:29:25   2  pair
21:29:25   3  ,trend
21:29:25   4  ,gatt
21:29:25   5  ,COUNT(pair)
21:29:25   6  ,AVG(g6)
21:29:25   7  FROM modsrc
21:29:25   8  GROUP BY pair,trend,gatt
21:29:25   9  ORDER BY pair,trend,gatt
21:29:25  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_jpy 	-1 nup	      5820 -.00162144
eur_jpy 	-1 up	      3112 .003358009
eur_jpy 	-1		 9
eur_jpy 	 1 nup	      6742 -.00139946
eur_jpy 	 1 up	      3275 .003413527
eur_jpy 	 1		63

6 rows selected.

Elapsed: 00:00:00.05
21:29:25 SQL> 
21:29:25 SQL> 
21:29:25 SQL> SELECT pair,COUNT(pair)FROM svm6102 GROUP BY pair;

PAIR	COUNT(PAIR)
------- -----------
eur_jpy       19021

Elapsed: 00:00:00.76
21:29:26 SQL> 
21:29:26 SQL> SELECT pair,COUNT(pair)FROM modsrc GROUP BY pair;

PAIR	COUNT(PAIR)
------- -----------
eur_jpy       19021

Elapsed: 00:00:00.01
21:29:26 SQL> 
21:29:26 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
