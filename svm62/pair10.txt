
SQL*Plus: Release 11.2.0.1.0 Production on Fri Feb 18 09:52:16 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

09:52:16 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
09:52:16 SQL> 09:52:16 SQL> --
09:52:16 SQL> -- pair10.sql
09:52:16 SQL> --
09:52:16 SQL> 
09:52:16 SQL> -- Creates views and tables needed by SVM.
09:52:16 SQL> 
09:52:16 SQL> 
09:52:16 SQL> CREATE OR REPLACE VIEW svm6102 AS
09:52:16   2  SELECT
09:52:16   3  pair
09:52:16   4  ,ydate
09:52:16   5  ,prdate
09:52:16   6  ,rownum rnum -- acts as t in my time-series
09:52:16   7  ,clse
09:52:16   8  -- Derive a bunch of attributes from clse, the latest price:
09:52:16   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
09:52:16  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
09:52:16  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
09:52:16  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
09:52:16  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
09:52:16  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
09:52:16  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
09:52:16  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
09:52:16  17  --
09:52:16  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
09:52:16  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
09:52:16  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
09:52:16  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
09:52:16  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
09:52:16  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
09:52:16  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
09:52:16  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
09:52:16  26  --
09:52:16  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
09:52:16  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
09:52:16  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
09:52:16  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
09:52:16  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
09:52:16  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
09:52:16  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
09:52:16  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
09:52:16  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
09:52:16  36  FROM di5min WHERE pair = '&1'
09:52:16  37  AND ydate > sysdate - 95
09:52:16  38  ORDER BY ydate
09:52:16  39  /
old  36: FROM di5min WHERE pair = '&1'
new  36: FROM di5min WHERE pair = 'eur_aud'

View created.

Elapsed: 00:00:00.06
09:52:16 SQL> 
09:52:16 SQL> -- rpt
09:52:16 SQL> 
09:52:16 SQL> SELECT
09:52:16   2  pair
09:52:16   3  ,COUNT(pair)
09:52:16   4  ,MIN(clse),MAX(clse)
09:52:16   5  ,MIN(avg6),MAX(avg6)
09:52:16   6  ,MIN(ydate),MAX(ydate)
09:52:16   7  FROM svm6102
09:52:16   8  GROUP BY pair
09:52:16   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_aud       19636 1.29324263	 1.392752 1.29538723 1.39030916 2010-11-15 09:55:00 2011-02-18 09:40:00

Elapsed: 00:00:00.90
09:52:17 SQL> 
09:52:17 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
09:52:17 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.07
09:52:17 SQL> CREATE TABLE svm6122 COMPRESS AS
09:52:17   2  SELECT
09:52:17   3  pair
09:52:17   4  ,ydate
09:52:17   5  ,prdate
09:52:17   6  ,clse
09:52:17   7  -- g6 is important. I want to predict g6:
09:52:17   8  ,ld6 - clse g6
09:52:17   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
09:52:17  10  -- I want more attributes from the ones I derived above:
09:52:17  11  -- clse relation to moving-min
09:52:17  12  ,clse-min4  cm4
09:52:17  13  ,clse-min6  cm6
09:52:17  14  ,clse-min8  cm8
09:52:17  15  ,clse-min10 cm10
09:52:17  16  ,clse-min12 cm12
09:52:17  17  ,clse-min14 cm14
09:52:17  18  ,clse-min16 cm16
09:52:17  19  ,clse-min18 cm18
09:52:17  20  -- clse relation to moving-avg
09:52:17  21  ,clse-avg4  ca4
09:52:17  22  ,clse-avg6  ca6
09:52:17  23  ,clse-avg8  ca8
09:52:17  24  ,clse-avg10 ca10
09:52:17  25  ,clse-avg12 ca12
09:52:17  26  ,clse-avg14 ca14
09:52:17  27  ,clse-avg16 ca16
09:52:17  28  ,clse-avg18 ca18
09:52:17  29  -- clse relation to moving-max
09:52:17  30  ,clse-max4  cx4
09:52:17  31  ,clse-max6  cx6
09:52:17  32  ,clse-max8  cx8
09:52:17  33  ,clse-max10 cx10
09:52:17  34  ,clse-max12 cx12
09:52:17  35  ,clse-max14 cx14
09:52:17  36  ,clse-max16 cx16
09:52:17  37  ,clse-max18 cx18
09:52:17  38  -- Derive more attributes.
09:52:17  39  -- I want to use CORR() here to help SVM see the shape of the series.
09:52:17  40  -- But COVAR_POP is more stable:
09:52:17  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
09:52:17  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
09:52:17  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
09:52:17  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
09:52:17  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
09:52:17  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
09:52:17  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
09:52:17  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
09:52:17  49  -- Derive date related attributes:
09:52:17  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
09:52:17  51  ,0+TO_CHAR(ydate,'D')d
09:52:17  52  ,0+TO_CHAR(ydate,'W')w
09:52:17  53  -- mpm stands for minutes-past-midnight:
09:52:17  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
09:52:17  55  -- mph stands for minutes-past-hour:
09:52:17  56  ,0+TO_CHAR(ydate,'MI')mph
09:52:17  57  FROM svm6102
09:52:17  58  ORDER BY ydate
09:52:17  59  /

Table created.

Elapsed: 00:00:02.49
09:52:20 SQL> 
09:52:20 SQL> -- rpt
09:52:20 SQL> 
09:52:20 SQL> SELECT
09:52:20   2  pair
09:52:20   3  ,COUNT(pair)
09:52:20   4  ,MIN(clse),MAX(clse)
09:52:20   5  ,MIN(ydate),MAX(ydate)
09:52:20   6  FROM svm6122
09:52:20   7  GROUP BY pair
09:52:20   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_aud       19636 1.29324263	 1.392752 2010-11-15 09:55:00 2011-02-18 09:40:00

Elapsed: 00:00:00.11
09:52:20 SQL> 
09:52:20 SQL> -- Prepare for derivation of NTILE based params:
09:52:20 SQL> 
09:52:20 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.17
09:52:20 SQL> CREATE TABLE svm6142 COMPRESS AS
09:52:20   2  SELECT
09:52:20   3  pair
09:52:20   4  ,ydate
09:52:20   5  ,prdate
09:52:20   6  ,clse
09:52:20   7  ,g6
09:52:20   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
09:52:20   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
09:52:20  10  ,CASE WHEN trend IS NULL THEN 1
09:52:20  11  	    WHEN trend =0      THEN 1
09:52:20  12  	    ELSE trend END trend
09:52:20  13  ,cm4
09:52:20  14  ,cm6
09:52:20  15  ,cm8
09:52:20  16  ,cm10
09:52:20  17  ,cm12
09:52:20  18  ,cm14
09:52:20  19  ,cm16
09:52:20  20  ,cm18
09:52:20  21  --
09:52:20  22  ,ca4
09:52:20  23  ,ca6
09:52:20  24  ,ca8
09:52:20  25  ,ca10
09:52:20  26  ,ca12
09:52:20  27  ,ca14
09:52:20  28  ,ca16
09:52:20  29  ,ca18
09:52:20  30  --
09:52:20  31  ,cx4
09:52:20  32  ,cx6
09:52:20  33  ,cx8
09:52:20  34  ,cx10
09:52:20  35  ,cx12
09:52:20  36  ,cx14
09:52:20  37  ,cx16
09:52:20  38  ,cx18
09:52:20  39  --
09:52:20  40  ,crr4
09:52:20  41  ,crr6
09:52:20  42  ,crr8
09:52:20  43  ,crr10
09:52:20  44  ,crr12
09:52:20  45  ,crr14
09:52:20  46  ,crr16
09:52:20  47  ,crr18
09:52:20  48  --
09:52:20  49  ,hh
09:52:20  50  ,d
09:52:20  51  ,w
09:52:20  52  ,mpm
09:52:20  53  ,mph
09:52:20  54  FROM svm6122
09:52:20  55  ORDER BY ydate
09:52:20  56  /

Table created.

Elapsed: 00:00:00.45
09:52:20 SQL> 
09:52:20 SQL> -- rpt
09:52:20 SQL> 
09:52:20 SQL> SELECT
09:52:20   2  pair
09:52:20   3  ,trend
09:52:20   4  ,gatt
09:52:20   5  ,COUNT(pair)
09:52:20   6  ,AVG(g6)
09:52:20   7  FROM svm6142
09:52:20   8  GROUP BY pair,trend,gatt
09:52:20   9  ORDER BY pair,trend,gatt
09:52:20  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_aud 	-1 nup	      6448 -.00257925
eur_aud 	-1 up	      3456 .003839848
eur_aud 	-1		72
eur_aud 	 1 nup	      6033 -.00239349
eur_aud 	 1 up	      3627 .004156854

Elapsed: 00:00:00.08
09:52:21 SQL> 
09:52:21 SQL> 
09:52:21 SQL> -- Derive NTILE based params:
09:52:21 SQL> 
09:52:21 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.05
09:52:21 SQL> CREATE TABLE svm6162 COMPRESS AS
09:52:21   2  SELECT
09:52:21   3  pair
09:52:21   4  ,ydate
09:52:21   5  ,prdate
09:52:21   6  ,clse
09:52:21   7  ,g6
09:52:21   8  ,gatt
09:52:21   9  ,gattn
09:52:21  10  ,trend
09:52:21  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
09:52:21  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
09:52:21  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
09:52:21  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
09:52:21  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
09:52:21  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
09:52:21  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
09:52:21  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
09:52:21  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
09:52:21  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
09:52:21  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
09:52:21  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
09:52:21  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
09:52:21  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
09:52:21  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
09:52:21  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
09:52:21  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
09:52:21  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
09:52:21  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
09:52:21  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
09:52:21  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
09:52:21  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
09:52:21  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
09:52:21  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
09:52:21  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
09:52:21  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
09:52:21  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
09:52:21  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
09:52:21  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
09:52:21  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
09:52:21  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
09:52:21  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
09:52:21  43  ,hh  att32
09:52:21  44  ,d   att33
09:52:21  45  ,w   att34
09:52:21  46  ,mpm att35
09:52:21  47  ,mph att36
09:52:21  48  ,trend att37
09:52:21  49  FROM svm6142
09:52:21  50  ORDER BY ydate
09:52:21  51  /

Table created.

Elapsed: 00:00:05.61
09:52:26 SQL> 
09:52:26 SQL> -- rpt
09:52:26 SQL> 
09:52:26 SQL> SELECT
09:52:26   2  pair
09:52:26   3  ,trend
09:52:26   4  ,gatt
09:52:26   5  ,COUNT(pair)
09:52:26   6  ,AVG(g6)
09:52:26   7  FROM svm6162
09:52:26   8  GROUP BY pair,trend,gatt
09:52:26   9  ORDER BY pair,trend,gatt
09:52:26  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_aud 	-1 nup	      6448 -.00257925
eur_aud 	-1 up	      3456 .003839848
eur_aud 	-1		72
eur_aud 	 1 nup	      6033 -.00239349
eur_aud 	 1 up	      3627 .004156854

Elapsed: 00:00:00.04
09:52:26 SQL> 
09:52:26 SQL> -- I comment out sections related to score-feedback.
09:52:26 SQL> -- I tested score-feeback and it hurts results:
09:52:26 SQL> 
09:52:26 SQL> -- CREATE OR REPLACE VIEW sc12 AS
09:52:26 SQL> -- SELECT
09:52:26 SQL> -- m.pair
09:52:26 SQL> -- ,m.ydate
09:52:26 SQL> -- ,m.prdate
09:52:26 SQL> -- ,l.score score_long
09:52:26 SQL> -- ,s.score score_short
09:52:26 SQL> -- ,m.g6
09:52:26 SQL> -- FROM svm62scores l,svm62scores s,svm6162 m
09:52:26 SQL> -- WHERE l.targ='gatt'
09:52:26 SQL> -- AND	 s.targ='gattn'
09:52:26 SQL> -- AND l.prdate = s.prdate
09:52:26 SQL> -- AND l.prdate = m.prdate
09:52:26 SQL> -- -- Speed things up:
09:52:26 SQL> -- AND l.pair = '&1'
09:52:26 SQL> -- AND s.pair = '&1'
09:52:26 SQL> -- /
09:52:26 SQL> --
09:52:26 SQL> -- DROP TABLE score_corr;
09:52:26 SQL> --
09:52:26 SQL> -- CREATE TABLE score_corr COMPRESS AS
09:52:26 SQL> -- SELECT
09:52:26 SQL> -- pair
09:52:26 SQL> -- -- ,ydate
09:52:26 SQL> -- ,prdate
09:52:26 SQL> -- -- Find corr() tween score and g6 over 2 day period:
09:52:26 SQL> -- ,CORR((score_long - score_short),g6)
09:52:26 SQL> --   OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 2*24*60/5 PRECEDING AND CURRENT ROW)sc_corr
09:52:26 SQL> -- FROM sc12
09:52:26 SQL> -- /
09:52:26 SQL> 
09:52:26 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.17
09:52:26 SQL> 
09:52:26 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.60
09:52:27 SQL> 
09:52:27 SQL> CREATE TABLE modsrc COMPRESS AS
09:52:27   2  SELECT
09:52:27   3  pair
09:52:27   4  ,ydate
09:52:27   5  ,prdate
09:52:27   6  ,trend
09:52:27   7  ,g6
09:52:27   8  ,gatt
09:52:27   9  ,gattn
09:52:27  10  ,SUM(g6)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g00
09:52:27  11  ,SUM(g6)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g01
09:52:27  12  ,SUM(g6)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g02
09:52:27  13  ,SUM(g6)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g03
09:52:27  14  ,SUM(g6)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g04
09:52:27  15  ,SUM(g6)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g05
09:52:27  16  ,SUM(g6)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g06
09:52:27  17  ,SUM(g6)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g07
09:52:27  18  ,SUM(g6)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g08
09:52:27  19  ,SUM(g6)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g09
09:52:27  20  ,SUM(g6)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g10
09:52:27  21  ,SUM(g6)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g11
09:52:27  22  ,SUM(g6)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g12
09:52:27  23  ,SUM(g6)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g13
09:52:27  24  ,SUM(g6)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g14
09:52:27  25  ,SUM(g6)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g15
09:52:27  26  ,SUM(g6)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g16
09:52:27  27  ,SUM(g6)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g17
09:52:27  28  ,SUM(g6)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g18
09:52:27  29  ,SUM(g6)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g19
09:52:27  30  ,SUM(g6)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g20
09:52:27  31  ,SUM(g6)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g21
09:52:27  32  ,SUM(g6)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g22
09:52:27  33  ,SUM(g6)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g23
09:52:27  34  ,SUM(g6)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g24
09:52:27  35  ,SUM(g6)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g25
09:52:27  36  ,SUM(g6)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g26
09:52:27  37  ,SUM(g6)OVER(PARTITION BY trend,att27 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g27
09:52:27  38  ,SUM(g6)OVER(PARTITION BY trend,att28 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g28
09:52:27  39  ,SUM(g6)OVER(PARTITION BY trend,att29 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g29
09:52:27  40  ,SUM(g6)OVER(PARTITION BY trend,att30 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g30
09:52:27  41  ,SUM(g6)OVER(PARTITION BY trend,att31 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g31
09:52:27  42  ,SUM(g6)OVER(PARTITION BY trend,att32 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g32
09:52:27  43  ,SUM(g6)OVER(PARTITION BY trend,att33 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g33
09:52:27  44  ,SUM(g6)OVER(PARTITION BY trend,att34 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g34
09:52:27  45  ,SUM(g6)OVER(PARTITION BY trend,att35 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g35
09:52:27  46  ,SUM(g6)OVER(PARTITION BY trend,att36 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g36
09:52:27  47  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g37
09:52:27  48  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*40 PRECEDING AND CURRENT ROW)g38
09:52:27  49  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*30 PRECEDING AND CURRENT ROW)g39
09:52:27  50  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)g40
09:52:27  51  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)g41
09:52:27  52  FROM svm6162
09:52:27  53  /

Table created.

Elapsed: 00:00:06.76
09:52:34 SQL> 
09:52:34 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:02.82
09:52:37 SQL> 
09:52:37 SQL> -- rpt
09:52:37 SQL> 
09:52:37 SQL> SELECT
09:52:37   2  pair
09:52:37   3  ,trend
09:52:37   4  ,gatt
09:52:37   5  ,COUNT(pair)
09:52:37   6  ,AVG(g6)
09:52:37   7  FROM modsrc
09:52:37   8  GROUP BY pair,trend,gatt
09:52:37   9  ORDER BY pair,trend,gatt
09:52:37  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_aud 	-1 nup	      6448 -.00257925
eur_aud 	-1 up	      3456 .003839848
eur_aud 	-1		72
eur_aud 	 1 nup	      6033 -.00239349
eur_aud 	 1 up	      3627 .004156854

Elapsed: 00:00:00.03
09:52:37 SQL> 
09:52:37 SQL> 
09:52:37 SQL> SELECT pair,COUNT(pair)FROM svm6102 GROUP BY pair;

PAIR	COUNT(PAIR)
------- -----------
eur_aud       19636

Elapsed: 00:00:00.88
09:52:37 SQL> 
09:52:37 SQL> SELECT pair,COUNT(pair)FROM modsrc GROUP BY pair;

PAIR	COUNT(PAIR)
------- -----------
eur_aud       19636

Elapsed: 00:00:00.01
09:52:38 SQL> 
09:52:38 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
