
SQL*Plus: Release 11.2.0.1.0 Production on Sun Mar 27 20:35:31 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

20:35:31 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
20:35:31 SQL> 20:35:31 SQL> --
20:35:31 SQL> -- pair10.sql
20:35:31 SQL> --
20:35:31 SQL> 
20:35:31 SQL> -- Creates views and tables needed by SVM.
20:35:31 SQL> 
20:35:31 SQL> 
20:35:31 SQL> CREATE OR REPLACE VIEW svm6102 AS
20:35:31   2  SELECT
20:35:31   3  pair
20:35:31   4  ,ydate
20:35:31   5  ,prdate
20:35:31   6  ,rownum rnum -- acts as t in my time-series
20:35:31   7  ,clse
20:35:31   8  -- Derive a bunch of attributes from clse, the latest price:
20:35:31   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
20:35:31  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
20:35:32  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
20:35:32  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
20:35:32  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
20:35:32  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
20:35:32  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
20:35:32  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
20:35:32  17  --
20:35:32  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
20:35:32  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
20:35:32  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
20:35:32  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
20:35:32  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
20:35:32  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
20:35:32  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
20:35:32  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
20:35:32  26  --
20:35:32  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
20:35:32  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
20:35:32  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
20:35:32  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
20:35:32  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
20:35:32  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
20:35:32  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
20:35:32  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
20:35:32  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
20:35:32  36  FROM di5min WHERE pair = '&1'
20:35:32  37  AND ydate > sysdate - 195
20:35:32  38  ORDER BY ydate
20:35:32  39  /
old  36: FROM di5min WHERE pair = '&1'
new  36: FROM di5min WHERE pair = 'eur_aud'

View created.

Elapsed: 00:00:00.22
20:35:32 SQL> 
20:35:32 SQL> -- rpt
20:35:32 SQL> 
20:35:32 SQL> SELECT
20:35:32   2  pair
20:35:32   3  ,COUNT(pair)
20:35:32   4  ,MIN(clse),MAX(clse)
20:35:32   5  ,MIN(avg6),MAX(avg6)
20:35:32   6  ,MIN(ydate),MAX(ydate)
20:35:32   7  FROM svm6102
20:35:32   8  GROUP BY pair
20:35:32   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_aud       23842 1.29324263 1.43250287 1.29538723 1.42930827 2010-11-30 00:00:00 2011-03-25 20:55:00

Elapsed: 00:00:01.93
20:35:34 SQL> 
20:35:34 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
20:35:34 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.06
20:35:34 SQL> CREATE TABLE svm6122 COMPRESS AS
20:35:34   2  SELECT
20:35:34   3  pair
20:35:34   4  ,ydate
20:35:34   5  ,prdate
20:35:34   6  ,clse
20:35:34   7  -- g6 is important. I want to predict g6:
20:35:34   8  ,(ld6 - clse)/clse g6
20:35:34   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
20:35:34  10  -- I want more attributes from the ones I derived above:
20:35:34  11  -- clse relation to moving-min
20:35:34  12  ,clse-min4  cm4
20:35:34  13  ,clse-min6  cm6
20:35:34  14  ,clse-min8  cm8
20:35:34  15  ,clse-min10 cm10
20:35:34  16  ,clse-min12 cm12
20:35:34  17  ,clse-min14 cm14
20:35:34  18  ,clse-min16 cm16
20:35:34  19  ,clse-min18 cm18
20:35:34  20  -- clse relation to moving-avg
20:35:34  21  ,clse-avg4  ca4
20:35:34  22  ,clse-avg6  ca6
20:35:34  23  ,clse-avg8  ca8
20:35:34  24  ,clse-avg10 ca10
20:35:34  25  ,clse-avg12 ca12
20:35:34  26  ,clse-avg14 ca14
20:35:34  27  ,clse-avg16 ca16
20:35:34  28  ,clse-avg18 ca18
20:35:34  29  -- clse relation to moving-max
20:35:34  30  ,clse-max4  cx4
20:35:34  31  ,clse-max6  cx6
20:35:34  32  ,clse-max8  cx8
20:35:34  33  ,clse-max10 cx10
20:35:34  34  ,clse-max12 cx12
20:35:34  35  ,clse-max14 cx14
20:35:34  36  ,clse-max16 cx16
20:35:34  37  ,clse-max18 cx18
20:35:34  38  -- Derive more attributes.
20:35:34  39  -- I want to use CORR() here to help SVM see the shape of the series.
20:35:34  40  -- But COVAR_POP is more stable:
20:35:34  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
20:35:34  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
20:35:34  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
20:35:34  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
20:35:34  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
20:35:34  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
20:35:34  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
20:35:34  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
20:35:34  49  -- Derive date related attributes:
20:35:34  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
20:35:34  51  ,0+TO_CHAR(ydate,'D')d
20:35:34  52  ,0+TO_CHAR(ydate,'W')w
20:35:34  53  -- mpm stands for minutes-past-midnight:
20:35:34  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
20:35:34  55  -- mph stands for minutes-past-hour:
20:35:34  56  ,0+TO_CHAR(ydate,'MI')mph
20:35:34  57  FROM svm6102
20:35:34  58  WHERE clse > 0
20:35:34  59  ORDER BY ydate
20:35:34  60  /

Table created.

Elapsed: 00:00:02.92
20:35:37 SQL> 
20:35:37 SQL> -- rpt
20:35:37 SQL> 
20:35:37 SQL> SELECT
20:35:37   2  pair
20:35:37   3  ,COUNT(pair)
20:35:37   4  ,MIN(clse),MAX(clse)
20:35:37   5  ,MIN(ydate),MAX(ydate)
20:35:37   6  FROM svm6122
20:35:37   7  GROUP BY pair
20:35:37   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_aud       23842 1.29324263 1.43250287 2010-11-30 00:00:00 2011-03-25 20:55:00

Elapsed: 00:00:00.05
20:35:37 SQL> 
20:35:37 SQL> -- Prepare for derivation of NTILE based params:
20:35:37 SQL> 
20:35:37 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.08
20:35:37 SQL> CREATE TABLE svm6142 COMPRESS AS
20:35:37   2  SELECT
20:35:37   3  pair
20:35:37   4  ,ydate
20:35:37   5  ,prdate
20:35:37   6  ,clse
20:35:37   7  ,g6
20:35:37   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
20:35:37   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
20:35:37  10  ,CASE WHEN trend IS NULL THEN 1
20:35:37  11  	    WHEN trend =0      THEN 1
20:35:37  12  	    ELSE trend END trend
20:35:37  13  ,cm4
20:35:37  14  ,cm6
20:35:37  15  ,cm8
20:35:37  16  ,cm10
20:35:37  17  ,cm12
20:35:37  18  ,cm14
20:35:37  19  ,cm16
20:35:37  20  ,cm18
20:35:37  21  --
20:35:37  22  ,ca4
20:35:37  23  ,ca6
20:35:37  24  ,ca8
20:35:37  25  ,ca10
20:35:37  26  ,ca12
20:35:37  27  ,ca14
20:35:37  28  ,ca16
20:35:37  29  ,ca18
20:35:37  30  --
20:35:37  31  ,cx4
20:35:37  32  ,cx6
20:35:37  33  ,cx8
20:35:37  34  ,cx10
20:35:37  35  ,cx12
20:35:37  36  ,cx14
20:35:37  37  ,cx16
20:35:37  38  ,cx18
20:35:37  39  --
20:35:37  40  ,crr4
20:35:37  41  ,crr6
20:35:37  42  ,crr8
20:35:37  43  ,crr10
20:35:37  44  ,crr12
20:35:37  45  ,crr14
20:35:37  46  ,crr16
20:35:37  47  ,crr18
20:35:37  48  --
20:35:37  49  ,hh
20:35:37  50  ,d
20:35:37  51  ,w
20:35:37  52  ,mpm
20:35:37  53  ,mph
20:35:37  54  FROM svm6122
20:35:37  55  ORDER BY ydate
20:35:37  56  /

Table created.

Elapsed: 00:00:00.50
20:35:37 SQL> 
20:35:37 SQL> -- rpt
20:35:37 SQL> 
20:35:37 SQL> SELECT
20:35:37   2  pair
20:35:37   3  ,trend
20:35:37   4  ,gatt
20:35:37   5  ,COUNT(pair)
20:35:37   6  ,AVG(g6)
20:35:37   7  FROM svm6142
20:35:37   8  GROUP BY pair,trend,gatt
20:35:37   9  ORDER BY pair,trend,gatt
20:35:37  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_aud 	-1 nup	      7856 -.00168149
eur_aud 	-1 up	      3792 .003351432
eur_aud 	-1		72
eur_aud 	 1 nup	      8097  -.0015285
eur_aud 	 1 up	      4025 .003377231

Elapsed: 00:00:00.05
20:35:37 SQL> 
20:35:37 SQL> 
20:35:37 SQL> -- Derive NTILE based params:
20:35:37 SQL> 
20:35:37 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.07
20:35:37 SQL> CREATE TABLE svm6162 COMPRESS AS
20:35:37   2  SELECT
20:35:37   3  pair
20:35:37   4  ,ydate
20:35:37   5  ,prdate
20:35:37   6  ,clse
20:35:37   7  ,g6
20:35:37   8  ,gatt
20:35:37   9  ,gattn
20:35:37  10  ,trend
20:35:37  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
20:35:37  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
20:35:37  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
20:35:37  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
20:35:37  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
20:35:37  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
20:35:37  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
20:35:37  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
20:35:37  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
20:35:37  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
20:35:37  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
20:35:37  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
20:35:37  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
20:35:37  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
20:35:37  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
20:35:37  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
20:35:37  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
20:35:37  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
20:35:37  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
20:35:37  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
20:35:37  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
20:35:37  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
20:35:37  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
20:35:37  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
20:35:37  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
20:35:37  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
20:35:37  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
20:35:37  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
20:35:37  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
20:35:37  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
20:35:37  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
20:35:37  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
20:35:37  43  ,hh  att32
20:35:37  44  ,d   att33
20:35:37  45  ,w   att34
20:35:37  46  ,mpm att35
20:35:37  47  ,mph att36
20:35:37  48  ,trend att37
20:35:37  49  FROM svm6142
20:35:37  50  ORDER BY ydate
20:35:37  51  /

Table created.

Elapsed: 00:00:06.84
20:35:44 SQL> 
20:35:44 SQL> -- rpt
20:35:44 SQL> 
20:35:44 SQL> SELECT
20:35:44   2  pair
20:35:44   3  ,trend
20:35:44   4  ,gatt
20:35:44   5  ,COUNT(pair)
20:35:44   6  ,AVG(g6)
20:35:44   7  FROM svm6162
20:35:44   8  GROUP BY pair,trend,gatt
20:35:44   9  ORDER BY pair,trend,gatt
20:35:44  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_aud 	-1 nup	      7856 -.00168149
eur_aud 	-1 up	      3792 .003351432
eur_aud 	-1		72
eur_aud 	 1 nup	      8097  -.0015285
eur_aud 	 1 up	      4025 .003377231

Elapsed: 00:00:00.03
20:35:44 SQL> 
20:35:44 SQL> -- I comment out sections related to score-feedback.
20:35:44 SQL> -- I tested score-feeback and it hurts results:
20:35:44 SQL> 
20:35:44 SQL> -- CREATE OR REPLACE VIEW sc12 AS
20:35:44 SQL> -- SELECT
20:35:44 SQL> -- m.pair
20:35:44 SQL> -- ,m.ydate
20:35:44 SQL> -- ,m.prdate
20:35:44 SQL> -- ,l.score score_long
20:35:44 SQL> -- ,s.score score_short
20:35:44 SQL> -- ,m.g6
20:35:44 SQL> -- FROM svm62scores l,svm62scores s,svm6162 m
20:35:44 SQL> -- WHERE l.targ='gatt'
20:35:44 SQL> -- AND	 s.targ='gattn'
20:35:44 SQL> -- AND l.prdate = s.prdate
20:35:44 SQL> -- AND l.prdate = m.prdate
20:35:44 SQL> -- -- Speed things up:
20:35:44 SQL> -- AND l.pair = '&1'
20:35:44 SQL> -- AND s.pair = '&1'
20:35:44 SQL> -- /
20:35:44 SQL> --
20:35:44 SQL> -- DROP TABLE score_corr;
20:35:44 SQL> --
20:35:44 SQL> -- CREATE TABLE score_corr COMPRESS AS
20:35:44 SQL> -- SELECT
20:35:44 SQL> -- pair
20:35:44 SQL> -- -- ,ydate
20:35:44 SQL> -- ,prdate
20:35:44 SQL> -- -- Find corr() tween score and g6 over 2 day period:
20:35:44 SQL> -- ,CORR((score_long - score_short),g6)
20:35:44 SQL> --   OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 2*24*60/5 PRECEDING AND CURRENT ROW)sc_corr
20:35:44 SQL> -- FROM sc12
20:35:44 SQL> -- /
20:35:44 SQL> 
20:35:44 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
20:35:44 SQL> 
20:35:44 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.57
20:35:45 SQL> 
20:35:45 SQL> CREATE TABLE modsrc COMPRESS AS
20:35:45   2  SELECT
20:35:45   3  pair
20:35:45   4  ,ydate
20:35:45   5  ,prdate
20:35:45   6  ,trend
20:35:45   7  ,g6
20:35:45   8  ,gatt
20:35:45   9  ,gattn
20:35:45  10  ,SUM(g6)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g00
20:35:45  11  ,SUM(g6)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g01
20:35:45  12  ,SUM(g6)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g02
20:35:45  13  ,SUM(g6)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g03
20:35:45  14  ,SUM(g6)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g04
20:35:45  15  ,SUM(g6)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g05
20:35:45  16  ,SUM(g6)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g06
20:35:45  17  ,SUM(g6)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g07
20:35:45  18  ,SUM(g6)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g08
20:35:45  19  ,SUM(g6)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g09
20:35:45  20  ,SUM(g6)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g10
20:35:45  21  ,SUM(g6)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g11
20:35:45  22  ,SUM(g6)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g12
20:35:45  23  ,SUM(g6)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g13
20:35:45  24  ,SUM(g6)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g14
20:35:45  25  ,SUM(g6)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g15
20:35:45  26  ,SUM(g6)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g16
20:35:45  27  ,SUM(g6)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g17
20:35:45  28  ,SUM(g6)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g18
20:35:45  29  ,SUM(g6)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g19
20:35:45  30  ,SUM(g6)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g20
20:35:45  31  ,SUM(g6)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g21
20:35:45  32  ,SUM(g6)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g22
20:35:45  33  ,SUM(g6)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g23
20:35:45  34  ,SUM(g6)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g24
20:35:45  35  ,SUM(g6)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g25
20:35:45  36  ,SUM(g6)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g26
20:35:45  37  ,SUM(g6)OVER(PARTITION BY trend,att27 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g27
20:35:45  38  ,SUM(g6)OVER(PARTITION BY trend,att28 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g28
20:35:45  39  ,SUM(g6)OVER(PARTITION BY trend,att29 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g29
20:35:45  40  ,SUM(g6)OVER(PARTITION BY trend,att30 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g30
20:35:45  41  ,SUM(g6)OVER(PARTITION BY trend,att31 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g31
20:35:45  42  ,SUM(g6)OVER(PARTITION BY trend,att32 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g32
20:35:45  43  ,SUM(g6)OVER(PARTITION BY trend,att33 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g33
20:35:45  44  ,SUM(g6)OVER(PARTITION BY trend,att34 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g34
20:35:45  45  ,SUM(g6)OVER(PARTITION BY trend,att35 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g35
20:35:45  46  ,SUM(g6)OVER(PARTITION BY trend,att36 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g36
20:35:45  47  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g37
20:35:45  48  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*40 PRECEDING AND CURRENT ROW)g38
20:35:45  49  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*30 PRECEDING AND CURRENT ROW)g39
20:35:45  50  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)g40
20:35:45  51  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)g41
20:35:45  52  FROM svm6162
20:35:45  53  /

Table created.

Elapsed: 00:00:08.18
20:35:53 SQL> 
20:35:53 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:03.79
20:35:57 SQL> 
20:35:57 SQL> -- rpt
20:35:57 SQL> 
20:35:57 SQL> SELECT
20:35:57   2  pair
20:35:57   3  ,trend
20:35:57   4  ,gatt
20:35:57   5  ,COUNT(pair)
20:35:57   6  ,AVG(g6)
20:35:57   7  FROM modsrc
20:35:57   8  GROUP BY pair,trend,gatt
20:35:57   9  ORDER BY pair,trend,gatt
20:35:57  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_aud 	-1 nup	      7856 -.00168149
eur_aud 	-1 up	      3792 .003351432
eur_aud 	-1		72
eur_aud 	 1 nup	      8097  -.0015285
eur_aud 	 1 up	      4025 .003377231

Elapsed: 00:00:00.04
20:35:57 SQL> 
20:35:57 SQL> 
20:35:57 SQL> SELECT pair,COUNT(pair)FROM svm6102 GROUP BY pair;

PAIR	COUNT(PAIR)
------- -----------
eur_aud       23842

Elapsed: 00:00:01.02
20:35:58 SQL> 
20:35:58 SQL> SELECT pair,COUNT(pair)FROM modsrc GROUP BY pair;

PAIR	COUNT(PAIR)
------- -----------
eur_aud       23842

Elapsed: 00:00:00.02
20:35:58 SQL> 
20:35:58 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
