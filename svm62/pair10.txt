
SQL*Plus: Release 11.2.0.1.0 Production on Fri Mar 4 04:38:41 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

04:38:42 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
04:38:42 SQL> 04:38:42 SQL> --
04:38:42 SQL> -- pair10.sql
04:38:42 SQL> --
04:38:42 SQL> 
04:38:42 SQL> -- Creates views and tables needed by SVM.
04:38:42 SQL> 
04:38:42 SQL> 
04:38:42 SQL> CREATE OR REPLACE VIEW svm6102 AS
04:38:42   2  SELECT
04:38:42   3  pair
04:38:42   4  ,ydate
04:38:42   5  ,prdate
04:38:42   6  ,rownum rnum -- acts as t in my time-series
04:38:42   7  ,clse
04:38:42   8  -- Derive a bunch of attributes from clse, the latest price:
04:38:42   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
04:38:42  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
04:38:42  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
04:38:42  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
04:38:42  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
04:38:42  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
04:38:42  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
04:38:42  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
04:38:42  17  --
04:38:42  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
04:38:42  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
04:38:42  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
04:38:42  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
04:38:42  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
04:38:42  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
04:38:42  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
04:38:42  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
04:38:42  26  --
04:38:42  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
04:38:42  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
04:38:42  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
04:38:42  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
04:38:42  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
04:38:42  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
04:38:42  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
04:38:42  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
04:38:42  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
04:38:42  36  FROM di5min WHERE pair = '&1'
04:38:42  37  AND ydate > sysdate - 95
04:38:42  38  ORDER BY ydate
04:38:42  39  /
old  36: FROM di5min WHERE pair = '&1'
new  36: FROM di5min WHERE pair = 'gbp_usd'

View created.

Elapsed: 00:00:00.06
04:38:42 SQL> 
04:38:42 SQL> -- rpt
04:38:42 SQL> 
04:38:42 SQL> SELECT
04:38:42   2  pair
04:38:42   3  ,COUNT(pair)
04:38:42   4  ,MIN(clse),MAX(clse)
04:38:42   5  ,MIN(avg6),MAX(avg6)
04:38:42   6  ,MIN(ydate),MAX(ydate)
04:38:42   7  FROM svm6102
04:38:42   8  GROUP BY pair
04:38:42   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
gbp_usd       19596   1.535325	   1.6338 1.53696747 1.63253151 2010-11-29 04:40:00 2011-03-04 04:20:00

Elapsed: 00:00:00.80
04:38:42 SQL> 
04:38:42 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
04:38:42 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.05
04:38:43 SQL> CREATE TABLE svm6122 COMPRESS AS
04:38:43   2  SELECT
04:38:43   3  pair
04:38:43   4  ,ydate
04:38:43   5  ,prdate
04:38:43   6  ,clse
04:38:43   7  -- g6 is important. I want to predict g6:
04:38:43   8  ,(ld6 - clse)/clse g6
04:38:43   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
04:38:43  10  -- I want more attributes from the ones I derived above:
04:38:43  11  -- clse relation to moving-min
04:38:43  12  ,clse-min4  cm4
04:38:43  13  ,clse-min6  cm6
04:38:43  14  ,clse-min8  cm8
04:38:43  15  ,clse-min10 cm10
04:38:43  16  ,clse-min12 cm12
04:38:43  17  ,clse-min14 cm14
04:38:43  18  ,clse-min16 cm16
04:38:43  19  ,clse-min18 cm18
04:38:43  20  -- clse relation to moving-avg
04:38:43  21  ,clse-avg4  ca4
04:38:43  22  ,clse-avg6  ca6
04:38:43  23  ,clse-avg8  ca8
04:38:43  24  ,clse-avg10 ca10
04:38:43  25  ,clse-avg12 ca12
04:38:43  26  ,clse-avg14 ca14
04:38:43  27  ,clse-avg16 ca16
04:38:43  28  ,clse-avg18 ca18
04:38:43  29  -- clse relation to moving-max
04:38:43  30  ,clse-max4  cx4
04:38:43  31  ,clse-max6  cx6
04:38:43  32  ,clse-max8  cx8
04:38:43  33  ,clse-max10 cx10
04:38:43  34  ,clse-max12 cx12
04:38:43  35  ,clse-max14 cx14
04:38:43  36  ,clse-max16 cx16
04:38:43  37  ,clse-max18 cx18
04:38:43  38  -- Derive more attributes.
04:38:43  39  -- I want to use CORR() here to help SVM see the shape of the series.
04:38:43  40  -- But COVAR_POP is more stable:
04:38:43  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
04:38:43  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
04:38:43  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
04:38:43  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
04:38:43  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
04:38:43  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
04:38:43  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
04:38:43  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
04:38:43  49  -- Derive date related attributes:
04:38:43  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
04:38:43  51  ,0+TO_CHAR(ydate,'D')d
04:38:43  52  ,0+TO_CHAR(ydate,'W')w
04:38:43  53  -- mpm stands for minutes-past-midnight:
04:38:43  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
04:38:43  55  -- mph stands for minutes-past-hour:
04:38:43  56  ,0+TO_CHAR(ydate,'MI')mph
04:38:43  57  FROM svm6102
04:38:43  58  WHERE clse > 0
04:38:43  59  ORDER BY ydate
04:38:43  60  /

Table created.

Elapsed: 00:00:02.29
04:38:45 SQL> 
04:38:45 SQL> -- rpt
04:38:45 SQL> 
04:38:45 SQL> SELECT
04:38:45   2  pair
04:38:45   3  ,COUNT(pair)
04:38:45   4  ,MIN(clse),MAX(clse)
04:38:45   5  ,MIN(ydate),MAX(ydate)
04:38:45   6  FROM svm6122
04:38:45   7  GROUP BY pair
04:38:45   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
gbp_usd       19596   1.535325	   1.6338 2010-11-29 04:40:00 2011-03-04 04:20:00

Elapsed: 00:00:00.05
04:38:45 SQL> 
04:38:45 SQL> -- Prepare for derivation of NTILE based params:
04:38:45 SQL> 
04:38:45 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.16
04:38:45 SQL> CREATE TABLE svm6142 COMPRESS AS
04:38:45   2  SELECT
04:38:45   3  pair
04:38:45   4  ,ydate
04:38:45   5  ,prdate
04:38:45   6  ,clse
04:38:45   7  ,g6
04:38:45   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
04:38:45   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
04:38:45  10  ,CASE WHEN trend IS NULL THEN 1
04:38:45  11  	    WHEN trend =0      THEN 1
04:38:45  12  	    ELSE trend END trend
04:38:45  13  ,cm4
04:38:45  14  ,cm6
04:38:45  15  ,cm8
04:38:45  16  ,cm10
04:38:45  17  ,cm12
04:38:45  18  ,cm14
04:38:45  19  ,cm16
04:38:45  20  ,cm18
04:38:45  21  --
04:38:45  22  ,ca4
04:38:45  23  ,ca6
04:38:45  24  ,ca8
04:38:45  25  ,ca10
04:38:45  26  ,ca12
04:38:45  27  ,ca14
04:38:45  28  ,ca16
04:38:45  29  ,ca18
04:38:45  30  --
04:38:45  31  ,cx4
04:38:45  32  ,cx6
04:38:45  33  ,cx8
04:38:45  34  ,cx10
04:38:45  35  ,cx12
04:38:45  36  ,cx14
04:38:45  37  ,cx16
04:38:45  38  ,cx18
04:38:45  39  --
04:38:45  40  ,crr4
04:38:45  41  ,crr6
04:38:45  42  ,crr8
04:38:45  43  ,crr10
04:38:45  44  ,crr12
04:38:45  45  ,crr14
04:38:45  46  ,crr16
04:38:45  47  ,crr18
04:38:45  48  --
04:38:45  49  ,hh
04:38:45  50  ,d
04:38:45  51  ,w
04:38:45  52  ,mpm
04:38:45  53  ,mph
04:38:45  54  FROM svm6122
04:38:45  55  ORDER BY ydate
04:38:45  56  /

Table created.

Elapsed: 00:00:00.51
04:38:46 SQL> 
04:38:46 SQL> -- rpt
04:38:46 SQL> 
04:38:46 SQL> SELECT
04:38:46   2  pair
04:38:46   3  ,trend
04:38:46   4  ,gatt
04:38:46   5  ,COUNT(pair)
04:38:46   6  ,AVG(g6)
04:38:46   7  FROM svm6142
04:38:46   8  GROUP BY pair,trend,gatt
04:38:46   9  ORDER BY pair,trend,gatt
04:38:46  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      5891 -.00120219
gbp_usd 	-1 up	      3210 .003095838
gbp_usd 	-1		 1
gbp_usd 	 1 nup	      7177 -.00130861
gbp_usd 	 1 up	      3246 .002973098
gbp_usd 	 1		71

6 rows selected.

Elapsed: 00:00:00.05
04:38:46 SQL> 
04:38:46 SQL> 
04:38:46 SQL> -- Derive NTILE based params:
04:38:46 SQL> 
04:38:46 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.23
04:38:46 SQL> CREATE TABLE svm6162 COMPRESS AS
04:38:46   2  SELECT
04:38:46   3  pair
04:38:46   4  ,ydate
04:38:46   5  ,prdate
04:38:46   6  ,clse
04:38:46   7  ,g6
04:38:46   8  ,gatt
04:38:46   9  ,gattn
04:38:46  10  ,trend
04:38:46  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
04:38:46  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
04:38:46  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
04:38:46  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
04:38:46  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
04:38:46  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
04:38:46  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
04:38:46  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
04:38:46  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
04:38:46  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
04:38:46  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
04:38:46  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
04:38:46  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
04:38:46  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
04:38:46  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
04:38:46  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
04:38:46  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
04:38:46  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
04:38:46  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
04:38:46  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
04:38:46  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
04:38:46  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
04:38:46  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
04:38:46  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
04:38:46  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
04:38:46  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
04:38:46  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
04:38:46  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
04:38:46  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
04:38:46  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
04:38:46  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
04:38:46  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
04:38:46  43  ,hh  att32
04:38:46  44  ,d   att33
04:38:46  45  ,w   att34
04:38:46  46  ,mpm att35
04:38:46  47  ,mph att36
04:38:46  48  ,trend att37
04:38:46  49  FROM svm6142
04:38:46  50  ORDER BY ydate
04:38:46  51  /
