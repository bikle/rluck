
SQL*Plus: Release 11.2.0.1.0 Production on Fri Mar 4 22:30:28 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

22:30:28 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
22:30:28 SQL> 22:30:28 SQL> --
22:30:28 SQL> -- pair10.sql
22:30:28 SQL> --
22:30:28 SQL> 
22:30:28 SQL> -- Creates views and tables needed by SVM.
22:30:28 SQL> 
22:30:28 SQL> 
22:30:28 SQL> CREATE OR REPLACE VIEW svm6102 AS
22:30:28   2  SELECT
22:30:28   3  pair
22:30:28   4  ,ydate
22:30:28   5  ,prdate
22:30:28   6  ,rownum rnum -- acts as t in my time-series
22:30:28   7  ,clse
22:30:28   8  -- Derive a bunch of attributes from clse, the latest price:
22:30:28   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
22:30:28  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
22:30:28  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
22:30:28  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
22:30:28  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
22:30:28  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
22:30:28  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
22:30:28  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
22:30:28  17  --
22:30:28  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
22:30:28  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
22:30:28  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
22:30:28  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
22:30:28  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
22:30:28  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
22:30:28  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
22:30:28  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
22:30:28  26  --
22:30:28  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
22:30:28  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
22:30:28  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
22:30:28  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
22:30:28  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
22:30:28  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
22:30:28  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
22:30:28  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
22:30:28  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
22:30:28  36  FROM di5min WHERE pair = '&1'
22:30:28  37  AND ydate > sysdate - 95
22:30:28  38  ORDER BY ydate
22:30:28  39  /
old  36: FROM di5min WHERE pair = '&1'
new  36: FROM di5min WHERE pair = 'eur_jpy'

View created.

Elapsed: 00:00:00.09
22:30:28 SQL> 
22:30:28 SQL> -- rpt
22:30:28 SQL> 
22:30:28 SQL> SELECT
22:30:28   2  pair
22:30:28   3  ,COUNT(pair)
22:30:28   4  ,MIN(clse),MAX(clse)
22:30:28   5  ,MIN(avg6),MAX(avg6)
22:30:28   6  ,MIN(ydate),MAX(ydate)
22:30:28   7  FROM svm6102
22:30:28   8  GROUP BY pair
22:30:28   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_jpy       19586 106.906797 115.717206 107.120556 115.395322 2010-11-29 22:35:00 2011-03-04 21:55:00

Elapsed: 00:00:00.81
22:30:29 SQL> 
22:30:29 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
22:30:29 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.27
22:30:29 SQL> CREATE TABLE svm6122 COMPRESS AS
22:30:29   2  SELECT
22:30:29   3  pair
22:30:29   4  ,ydate
22:30:29   5  ,prdate
22:30:29   6  ,clse
22:30:29   7  -- g6 is important. I want to predict g6:
22:30:29   8  ,(ld6 - clse)/clse g6
22:30:29   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
22:30:29  10  -- I want more attributes from the ones I derived above:
22:30:29  11  -- clse relation to moving-min
22:30:29  12  ,clse-min4  cm4
22:30:29  13  ,clse-min6  cm6
22:30:29  14  ,clse-min8  cm8
22:30:29  15  ,clse-min10 cm10
22:30:29  16  ,clse-min12 cm12
22:30:29  17  ,clse-min14 cm14
22:30:29  18  ,clse-min16 cm16
22:30:29  19  ,clse-min18 cm18
22:30:29  20  -- clse relation to moving-avg
22:30:29  21  ,clse-avg4  ca4
22:30:29  22  ,clse-avg6  ca6
22:30:29  23  ,clse-avg8  ca8
22:30:29  24  ,clse-avg10 ca10
22:30:29  25  ,clse-avg12 ca12
22:30:29  26  ,clse-avg14 ca14
22:30:29  27  ,clse-avg16 ca16
22:30:29  28  ,clse-avg18 ca18
22:30:29  29  -- clse relation to moving-max
22:30:29  30  ,clse-max4  cx4
22:30:29  31  ,clse-max6  cx6
22:30:29  32  ,clse-max8  cx8
22:30:29  33  ,clse-max10 cx10
22:30:29  34  ,clse-max12 cx12
22:30:29  35  ,clse-max14 cx14
22:30:29  36  ,clse-max16 cx16
22:30:29  37  ,clse-max18 cx18
22:30:29  38  -- Derive more attributes.
22:30:29  39  -- I want to use CORR() here to help SVM see the shape of the series.
22:30:29  40  -- But COVAR_POP is more stable:
22:30:29  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
22:30:29  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
22:30:29  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
22:30:29  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
22:30:29  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
22:30:29  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
22:30:29  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
22:30:29  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
22:30:29  49  -- Derive date related attributes:
22:30:29  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:30:29  51  ,0+TO_CHAR(ydate,'D')d
22:30:29  52  ,0+TO_CHAR(ydate,'W')w
22:30:29  53  -- mpm stands for minutes-past-midnight:
22:30:29  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:30:29  55  -- mph stands for minutes-past-hour:
22:30:29  56  ,0+TO_CHAR(ydate,'MI')mph
22:30:29  57  FROM svm6102
22:30:29  58  WHERE clse > 0
22:30:29  59  ORDER BY ydate
22:30:29  60  /

Table created.

Elapsed: 00:00:02.34
22:30:32 SQL> 
22:30:32 SQL> -- rpt
22:30:32 SQL> 
22:30:32 SQL> SELECT
22:30:32   2  pair
22:30:32   3  ,COUNT(pair)
22:30:32   4  ,MIN(clse),MAX(clse)
22:30:32   5  ,MIN(ydate),MAX(ydate)
22:30:32   6  FROM svm6122
22:30:32   7  GROUP BY pair
22:30:32   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_jpy       19586 106.906797 115.717206 2010-11-29 22:35:00 2011-03-04 21:55:00

Elapsed: 00:00:00.04
22:30:32 SQL> 
22:30:32 SQL> -- Prepare for derivation of NTILE based params:
22:30:32 SQL> 
22:30:32 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.19
22:30:32 SQL> CREATE TABLE svm6142 COMPRESS AS
22:30:32   2  SELECT
22:30:32   3  pair
22:30:32   4  ,ydate
22:30:32   5  ,prdate
22:30:32   6  ,clse
22:30:32   7  ,g6
22:30:32   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
22:30:32   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
22:30:32  10  ,CASE WHEN trend IS NULL THEN 1
22:30:32  11  	    WHEN trend =0      THEN 1
22:30:32  12  	    ELSE trend END trend
22:30:32  13  ,cm4
22:30:32  14  ,cm6
22:30:32  15  ,cm8
22:30:32  16  ,cm10
22:30:32  17  ,cm12
22:30:32  18  ,cm14
22:30:32  19  ,cm16
22:30:32  20  ,cm18
22:30:32  21  --
22:30:32  22  ,ca4
22:30:32  23  ,ca6
22:30:32  24  ,ca8
22:30:32  25  ,ca10
22:30:32  26  ,ca12
22:30:32  27  ,ca14
22:30:32  28  ,ca16
22:30:32  29  ,ca18
22:30:32  30  --
22:30:32  31  ,cx4
22:30:32  32  ,cx6
22:30:32  33  ,cx8
22:30:32  34  ,cx10
22:30:32  35  ,cx12
22:30:32  36  ,cx14
22:30:32  37  ,cx16
22:30:32  38  ,cx18
22:30:32  39  --
22:30:32  40  ,crr4
22:30:32  41  ,crr6
22:30:32  42  ,crr8
22:30:32  43  ,crr10
22:30:32  44  ,crr12
22:30:32  45  ,crr14
22:30:32  46  ,crr16
22:30:32  47  ,crr18
22:30:32  48  --
22:30:32  49  ,hh
22:30:32  50  ,d
22:30:32  51  ,w
22:30:32  52  ,mpm
22:30:32  53  ,mph
22:30:32  54  FROM svm6122
22:30:32  55  ORDER BY ydate
22:30:32  56  /

Table created.

Elapsed: 00:00:00.41
22:30:32 SQL> 
22:30:32 SQL> -- rpt
22:30:32 SQL> 
22:30:32 SQL> SELECT
22:30:32   2  pair
22:30:32   3  ,trend
22:30:32   4  ,gatt
22:30:32   5  ,COUNT(pair)
22:30:32   6  ,AVG(g6)
22:30:32   7  FROM svm6142
22:30:32   8  GROUP BY pair,trend,gatt
22:30:32   9  ORDER BY pair,trend,gatt
22:30:32  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_jpy 	-1 nup	      5902 -.00176279
eur_jpy 	-1 up	      3248 .003446184
eur_jpy 	-1		70
eur_jpy 	 1 nup	      6930 -.00143555
eur_jpy 	 1 up	      3434 .003569305
eur_jpy 	 1		 2

6 rows selected.

Elapsed: 00:00:00.04
22:30:32 SQL> 
22:30:32 SQL> 
22:30:32 SQL> -- Derive NTILE based params:
22:30:32 SQL> 
22:30:32 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.28
22:30:33 SQL> CREATE TABLE svm6162 COMPRESS AS
22:30:33   2  SELECT
22:30:33   3  pair
22:30:33   4  ,ydate
22:30:33   5  ,prdate
22:30:33   6  ,clse
22:30:33   7  ,g6
22:30:33   8  ,gatt
22:30:33   9  ,gattn
22:30:33  10  ,trend
22:30:33  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
22:30:33  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
22:30:33  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
22:30:33  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
22:30:33  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
22:30:33  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
22:30:33  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
22:30:33  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
22:30:33  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
22:30:33  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
22:30:33  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
22:30:33  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
22:30:33  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
22:30:33  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
22:30:33  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
22:30:33  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
22:30:33  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
22:30:33  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
22:30:33  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
22:30:33  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
22:30:33  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
22:30:33  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
22:30:33  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
22:30:33  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
22:30:33  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
22:30:33  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
22:30:33  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
22:30:33  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
22:30:33  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
22:30:33  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
22:30:33  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
22:30:33  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
22:30:33  43  ,hh  att32
22:30:33  44  ,d   att33
22:30:33  45  ,w   att34
22:30:33  46  ,mpm att35
22:30:33  47  ,mph att36
22:30:33  48  ,trend att37
22:30:33  49  FROM svm6142
22:30:33  50  ORDER BY ydate
22:30:33  51  /

Table created.

Elapsed: 00:00:05.10
22:30:38 SQL> 
22:30:38 SQL> -- rpt
22:30:38 SQL> 
22:30:38 SQL> SELECT
22:30:38   2  pair
22:30:38   3  ,trend
22:30:38   4  ,gatt
22:30:38   5  ,COUNT(pair)
22:30:38   6  ,AVG(g6)
22:30:38   7  FROM svm6162
22:30:38   8  GROUP BY pair,trend,gatt
22:30:38   9  ORDER BY pair,trend,gatt
22:30:38  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_jpy 	-1 nup	      5902 -.00176279
eur_jpy 	-1 up	      3248 .003446184
eur_jpy 	-1		70
eur_jpy 	 1 nup	      6930 -.00143555
eur_jpy 	 1 up	      3434 .003569305
eur_jpy 	 1		 2

6 rows selected.

Elapsed: 00:00:00.02
22:30:38 SQL> 
22:30:38 SQL> -- I comment out sections related to score-feedback.
22:30:38 SQL> -- I tested score-feeback and it hurts results:
22:30:38 SQL> 
22:30:38 SQL> -- CREATE OR REPLACE VIEW sc12 AS
22:30:38 SQL> -- SELECT
22:30:38 SQL> -- m.pair
22:30:38 SQL> -- ,m.ydate
22:30:38 SQL> -- ,m.prdate
22:30:38 SQL> -- ,l.score score_long
22:30:38 SQL> -- ,s.score score_short
22:30:38 SQL> -- ,m.g6
22:30:38 SQL> -- FROM svm62scores l,svm62scores s,svm6162 m
22:30:38 SQL> -- WHERE l.targ='gatt'
22:30:38 SQL> -- AND	 s.targ='gattn'
22:30:38 SQL> -- AND l.prdate = s.prdate
22:30:38 SQL> -- AND l.prdate = m.prdate
22:30:38 SQL> -- -- Speed things up:
22:30:38 SQL> -- AND l.pair = '&1'
22:30:38 SQL> -- AND s.pair = '&1'
22:30:38 SQL> -- /
22:30:38 SQL> --
22:30:38 SQL> -- DROP TABLE score_corr;
22:30:38 SQL> --
22:30:38 SQL> -- CREATE TABLE score_corr COMPRESS AS
22:30:38 SQL> -- SELECT
22:30:38 SQL> -- pair
22:30:38 SQL> -- -- ,ydate
22:30:38 SQL> -- ,prdate
22:30:38 SQL> -- -- Find corr() tween score and g6 over 2 day period:
22:30:38 SQL> -- ,CORR((score_long - score_short),g6)
22:30:38 SQL> --   OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 2*24*60/5 PRECEDING AND CURRENT ROW)sc_corr
22:30:38 SQL> -- FROM sc12
22:30:38 SQL> -- /
22:30:38 SQL> 
22:30:38 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.35
22:30:38 SQL> 
22:30:38 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.28
22:30:38 SQL> 
22:30:38 SQL> CREATE TABLE modsrc COMPRESS AS
22:30:38   2  SELECT
22:30:38   3  pair
22:30:38   4  ,ydate
22:30:38   5  ,prdate
22:30:38   6  ,trend
22:30:38   7  ,g6
22:30:38   8  ,gatt
22:30:38   9  ,gattn
22:30:38  10  ,SUM(g6)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g00
22:30:38  11  ,SUM(g6)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g01
22:30:38  12  ,SUM(g6)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g02
22:30:38  13  ,SUM(g6)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g03
22:30:38  14  ,SUM(g6)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g04
22:30:38  15  ,SUM(g6)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g05
22:30:38  16  ,SUM(g6)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g06
22:30:38  17  ,SUM(g6)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g07
22:30:38  18  ,SUM(g6)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g08
22:30:38  19  ,SUM(g6)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g09
22:30:38  20  ,SUM(g6)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g10
22:30:38  21  ,SUM(g6)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g11
22:30:38  22  ,SUM(g6)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g12
22:30:38  23  ,SUM(g6)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g13
22:30:38  24  ,SUM(g6)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g14
22:30:38  25  ,SUM(g6)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g15
22:30:38  26  ,SUM(g6)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g16
22:30:38  27  ,SUM(g6)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g17
22:30:38  28  ,SUM(g6)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g18
22:30:38  29  ,SUM(g6)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g19
22:30:38  30  ,SUM(g6)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g20
22:30:38  31  ,SUM(g6)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g21
22:30:38  32  ,SUM(g6)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g22
22:30:38  33  ,SUM(g6)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g23
22:30:38  34  ,SUM(g6)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g24
22:30:38  35  ,SUM(g6)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g25
22:30:38  36  ,SUM(g6)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g26
22:30:38  37  ,SUM(g6)OVER(PARTITION BY trend,att27 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g27
22:30:38  38  ,SUM(g6)OVER(PARTITION BY trend,att28 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g28
22:30:38  39  ,SUM(g6)OVER(PARTITION BY trend,att29 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g29
22:30:38  40  ,SUM(g6)OVER(PARTITION BY trend,att30 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g30
22:30:38  41  ,SUM(g6)OVER(PARTITION BY trend,att31 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g31
22:30:38  42  ,SUM(g6)OVER(PARTITION BY trend,att32 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g32
22:30:38  43  ,SUM(g6)OVER(PARTITION BY trend,att33 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g33
22:30:38  44  ,SUM(g6)OVER(PARTITION BY trend,att34 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g34
22:30:38  45  ,SUM(g6)OVER(PARTITION BY trend,att35 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g35
22:30:38  46  ,SUM(g6)OVER(PARTITION BY trend,att36 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g36
22:30:38  47  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g37
22:30:38  48  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*40 PRECEDING AND CURRENT ROW)g38
22:30:38  49  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*30 PRECEDING AND CURRENT ROW)g39
22:30:38  50  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)g40
22:30:38  51  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)g41
22:30:38  52  FROM svm6162
22:30:38  53  /

Table created.

Elapsed: 00:00:06.81
22:30:45 SQL> 
22:30:45 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:02.90
22:30:48 SQL> 
22:30:48 SQL> -- rpt
22:30:48 SQL> 
22:30:48 SQL> SELECT
22:30:48   2  pair
22:30:48   3  ,trend
22:30:48   4  ,gatt
22:30:48   5  ,COUNT(pair)
22:30:48   6  ,AVG(g6)
22:30:48   7  FROM modsrc
22:30:48   8  GROUP BY pair,trend,gatt
22:30:48   9  ORDER BY pair,trend,gatt
22:30:48  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_jpy 	-1 nup	      5902 -.00176279
eur_jpy 	-1 up	      3248 .003446184
eur_jpy 	-1		70
eur_jpy 	 1 nup	      6930 -.00143555
eur_jpy 	 1 up	      3434 .003569305
eur_jpy 	 1		 2

6 rows selected.

Elapsed: 00:00:00.03
22:30:48 SQL> 
22:30:48 SQL> 
22:30:48 SQL> SELECT pair,COUNT(pair)FROM svm6102 GROUP BY pair;

PAIR	COUNT(PAIR)
------- -----------
eur_jpy       19586

Elapsed: 00:00:00.79
22:30:49 SQL> 
22:30:49 SQL> SELECT pair,COUNT(pair)FROM modsrc GROUP BY pair;

PAIR	COUNT(PAIR)
------- -----------
eur_jpy       19586

Elapsed: 00:00:00.01
22:30:49 SQL> 
22:30:49 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
