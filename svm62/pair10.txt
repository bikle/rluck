
SQL*Plus: Release 11.2.0.1.0 Production on Fri Feb 18 00:18:46 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

00:18:46 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
00:18:46 SQL> 00:18:46 SQL> --
00:18:46 SQL> -- pair10.sql
00:18:46 SQL> --
00:18:46 SQL> 
00:18:46 SQL> -- Creates views and tables needed by SVM.
00:18:46 SQL> 
00:18:46 SQL> 
00:18:46 SQL> CREATE OR REPLACE VIEW svm6102 AS
00:18:46   2  SELECT
00:18:46   3  pair
00:18:46   4  ,ydate
00:18:46   5  ,prdate
00:18:46   6  ,rownum rnum -- acts as t in my time-series
00:18:46   7  ,clse
00:18:46   8  -- Derive a bunch of attributes from clse, the latest price:
00:18:46   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
00:18:46  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
00:18:46  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
00:18:46  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
00:18:46  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
00:18:46  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
00:18:46  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
00:18:46  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
00:18:46  17  --
00:18:46  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
00:18:46  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
00:18:46  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
00:18:46  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
00:18:46  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
00:18:46  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
00:18:46  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
00:18:46  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
00:18:46  26  --
00:18:46  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
00:18:46  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
00:18:46  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
00:18:46  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
00:18:46  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
00:18:46  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
00:18:46  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
00:18:46  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
00:18:46  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
00:18:46  36  FROM di5min WHERE pair = '&1'
00:18:46  37  AND ydate > sysdate - 95
00:18:46  38  ORDER BY ydate
00:18:46  39  /
old  36: FROM di5min WHERE pair = '&1'
new  36: FROM di5min WHERE pair = 'usd_jpy'

View created.

Elapsed: 00:00:00.03
00:18:46 SQL> 
00:18:46 SQL> -- rpt
00:18:46 SQL> 
00:18:46 SQL> SELECT
00:18:46   2  pair
00:18:46   3  ,COUNT(pair)
00:18:46   4  ,MIN(clse),MAX(clse)
00:18:46   5  ,MIN(avg6),MAX(avg6)
00:18:46   6  ,MIN(ydate),MAX(ydate)
00:18:46   7  FROM svm6102
00:18:46   8  GROUP BY pair
00:18:46   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_jpy       19639    81.0225	   84.485 81.1881201 84.3105479 2010-11-15 00:20:00 2011-02-17 23:55:00

Elapsed: 00:00:00.86
00:18:47 SQL> 
00:18:47 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
00:18:47 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.24
00:18:47 SQL> CREATE TABLE svm6122 COMPRESS AS
00:18:47   2  SELECT
00:18:47   3  pair
00:18:47   4  ,ydate
00:18:47   5  ,prdate
00:18:47   6  ,clse
00:18:47   7  -- g6 is important. I want to predict g6:
00:18:47   8  ,ld6 - clse g6
00:18:47   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
00:18:47  10  -- I want more attributes from the ones I derived above:
00:18:47  11  -- clse relation to moving-min
00:18:47  12  ,clse-min4  cm4
00:18:47  13  ,clse-min6  cm6
00:18:47  14  ,clse-min8  cm8
00:18:47  15  ,clse-min10 cm10
00:18:47  16  ,clse-min12 cm12
00:18:47  17  ,clse-min14 cm14
00:18:47  18  ,clse-min16 cm16
00:18:47  19  ,clse-min18 cm18
00:18:47  20  -- clse relation to moving-avg
00:18:47  21  ,clse-avg4  ca4
00:18:47  22  ,clse-avg6  ca6
00:18:47  23  ,clse-avg8  ca8
00:18:47  24  ,clse-avg10 ca10
00:18:47  25  ,clse-avg12 ca12
00:18:47  26  ,clse-avg14 ca14
00:18:47  27  ,clse-avg16 ca16
00:18:47  28  ,clse-avg18 ca18
00:18:47  29  -- clse relation to moving-max
00:18:47  30  ,clse-max4  cx4
00:18:47  31  ,clse-max6  cx6
00:18:47  32  ,clse-max8  cx8
00:18:47  33  ,clse-max10 cx10
00:18:47  34  ,clse-max12 cx12
00:18:47  35  ,clse-max14 cx14
00:18:47  36  ,clse-max16 cx16
00:18:47  37  ,clse-max18 cx18
00:18:47  38  -- Derive more attributes.
00:18:47  39  -- I want to use CORR() here to help SVM see the shape of the series.
00:18:47  40  -- But COVAR_POP is more stable:
00:18:47  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
00:18:47  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
00:18:47  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
00:18:47  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
00:18:47  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
00:18:47  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
00:18:47  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
00:18:47  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
00:18:47  49  -- Derive date related attributes:
00:18:47  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
00:18:47  51  ,0+TO_CHAR(ydate,'D')d
00:18:47  52  ,0+TO_CHAR(ydate,'W')w
00:18:47  53  -- mpm stands for minutes-past-midnight:
00:18:47  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
00:18:47  55  -- mph stands for minutes-past-hour:
00:18:47  56  ,0+TO_CHAR(ydate,'MI')mph
00:18:47  57  FROM svm6102
00:18:47  58  ORDER BY ydate
00:18:47  59  /

Table created.

Elapsed: 00:00:02.27
00:18:50 SQL> 
00:18:50 SQL> -- rpt
00:18:50 SQL> 
00:18:50 SQL> SELECT
00:18:50   2  pair
00:18:50   3  ,COUNT(pair)
00:18:50   4  ,MIN(clse),MAX(clse)
00:18:50   5  ,MIN(ydate),MAX(ydate)
00:18:50   6  FROM svm6122
00:18:50   7  GROUP BY pair
00:18:50   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_jpy       19639    81.0225	   84.485 2010-11-15 00:20:00 2011-02-17 23:55:00

Elapsed: 00:00:00.05
00:18:50 SQL> 
00:18:50 SQL> -- Prepare for derivation of NTILE based params:
00:18:50 SQL> 
00:18:50 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.43
00:18:50 SQL> CREATE TABLE svm6142 COMPRESS AS
00:18:50   2  SELECT
00:18:50   3  pair
00:18:50   4  ,ydate
00:18:50   5  ,prdate
00:18:50   6  ,clse
00:18:50   7  ,g6
00:18:50   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
00:18:50   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
00:18:50  10  ,CASE WHEN trend IS NULL THEN 1
00:18:50  11  	    WHEN trend =0      THEN 1
00:18:50  12  	    ELSE trend END trend
00:18:50  13  ,cm4
00:18:50  14  ,cm6
00:18:50  15  ,cm8
00:18:50  16  ,cm10
00:18:50  17  ,cm12
00:18:50  18  ,cm14
00:18:50  19  ,cm16
00:18:50  20  ,cm18
00:18:50  21  --
00:18:50  22  ,ca4
00:18:50  23  ,ca6
00:18:50  24  ,ca8
00:18:50  25  ,ca10
00:18:50  26  ,ca12
00:18:50  27  ,ca14
00:18:50  28  ,ca16
00:18:50  29  ,ca18
00:18:50  30  --
00:18:50  31  ,cx4
00:18:50  32  ,cx6
00:18:50  33  ,cx8
00:18:50  34  ,cx10
00:18:50  35  ,cx12
00:18:50  36  ,cx14
00:18:50  37  ,cx16
00:18:50  38  ,cx18
00:18:50  39  --
00:18:50  40  ,crr4
00:18:50  41  ,crr6
00:18:50  42  ,crr8
00:18:50  43  ,crr10
00:18:50  44  ,crr12
00:18:50  45  ,crr14
00:18:50  46  ,crr16
00:18:50  47  ,crr18
00:18:50  48  --
00:18:50  49  ,hh
00:18:50  50  ,d
00:18:50  51  ,w
00:18:50  52  ,mpm
00:18:50  53  ,mph
00:18:50  54  FROM svm6122
00:18:50  55  ORDER BY ydate
00:18:50  56  /

Table created.

Elapsed: 00:00:00.39
00:18:51 SQL> 
00:18:51 SQL> -- rpt
00:18:51 SQL> 
00:18:51 SQL> SELECT
00:18:51   2  pair
00:18:51   3  ,trend
00:18:51   4  ,gatt
00:18:51   5  ,COUNT(pair)
00:18:51   6  ,AVG(g6)
00:18:51   7  FROM svm6142
00:18:51   8  GROUP BY pair,trend,gatt
00:18:51   9  ORDER BY pair,trend,gatt
00:18:51  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5014 -.15051965
usd_jpy 	-1 up	      4861 .160557844
usd_jpy 	-1		42
usd_jpy 	 1 nup	      5013 -.15461182
usd_jpy 	 1 up	      4679 .170744374
usd_jpy 	 1		30

6 rows selected.

Elapsed: 00:00:00.05
00:18:51 SQL> 
00:18:51 SQL> 
00:18:51 SQL> -- Derive NTILE based params:
00:18:51 SQL> 
00:18:51 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.13
00:18:51 SQL> CREATE TABLE svm6162 COMPRESS AS
00:18:51   2  SELECT
00:18:51   3  pair
00:18:51   4  ,ydate
00:18:51   5  ,prdate
00:18:51   6  ,clse
00:18:51   7  ,g6
00:18:51   8  ,gatt
00:18:51   9  ,gattn
00:18:51  10  ,trend
00:18:51  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
00:18:51  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
00:18:51  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
00:18:51  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
00:18:51  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
00:18:51  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
00:18:51  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
00:18:51  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
00:18:51  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
00:18:51  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
00:18:51  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
00:18:51  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
00:18:51  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
00:18:51  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
00:18:51  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
00:18:51  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
00:18:51  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
00:18:51  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
00:18:51  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
00:18:51  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
00:18:51  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
00:18:51  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
00:18:51  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
00:18:51  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
00:18:51  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
00:18:51  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
00:18:51  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
00:18:51  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
00:18:51  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
00:18:51  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
00:18:51  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
00:18:51  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
00:18:51  43  ,hh  att32
00:18:51  44  ,d   att33
00:18:51  45  ,w   att34
00:18:51  46  ,mpm att35
00:18:51  47  ,mph att36
00:18:51  48  ,trend att37
00:18:51  49  FROM svm6142
00:18:51  50  ORDER BY ydate
00:18:51  51  /

Table created.

Elapsed: 00:00:04.92
00:18:56 SQL> 
00:18:56 SQL> -- rpt
00:18:56 SQL> 
00:18:56 SQL> SELECT
00:18:56   2  pair
00:18:56   3  ,trend
00:18:56   4  ,gatt
00:18:56   5  ,COUNT(pair)
00:18:56   6  ,AVG(g6)
00:18:56   7  FROM svm6162
00:18:56   8  GROUP BY pair,trend,gatt
00:18:56   9  ORDER BY pair,trend,gatt
00:18:56  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5014 -.15051965
usd_jpy 	-1 up	      4861 .160557844
usd_jpy 	-1		42
usd_jpy 	 1 nup	      5013 -.15461182
usd_jpy 	 1 up	      4679 .170744374
usd_jpy 	 1		30

6 rows selected.

Elapsed: 00:00:00.03
00:18:56 SQL> 
00:18:56 SQL> -- I comment out sections related to score-feedback.
00:18:56 SQL> -- I tested score-feeback and it hurts results:
00:18:56 SQL> 
00:18:56 SQL> -- CREATE OR REPLACE VIEW sc12 AS
00:18:56 SQL> -- SELECT
00:18:56 SQL> -- m.pair
00:18:56 SQL> -- ,m.ydate
00:18:56 SQL> -- ,m.prdate
00:18:56 SQL> -- ,l.score score_long
00:18:56 SQL> -- ,s.score score_short
00:18:56 SQL> -- ,m.g6
00:18:56 SQL> -- FROM svm62scores l,svm62scores s,svm6162 m
00:18:56 SQL> -- WHERE l.targ='gatt'
00:18:56 SQL> -- AND	 s.targ='gattn'
00:18:56 SQL> -- AND l.prdate = s.prdate
00:18:56 SQL> -- AND l.prdate = m.prdate
00:18:56 SQL> -- -- Speed things up:
00:18:56 SQL> -- AND l.pair = '&1'
00:18:56 SQL> -- AND s.pair = '&1'
00:18:56 SQL> -- /
00:18:56 SQL> --
00:18:56 SQL> -- DROP TABLE score_corr;
00:18:56 SQL> --
00:18:56 SQL> -- CREATE TABLE score_corr COMPRESS AS
00:18:56 SQL> -- SELECT
00:18:56 SQL> -- pair
00:18:56 SQL> -- -- ,ydate
00:18:56 SQL> -- ,prdate
00:18:56 SQL> -- -- Find corr() tween score and g6 over 2 day period:
00:18:56 SQL> -- ,CORR((score_long - score_short),g6)
00:18:56 SQL> --   OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 2*24*60/5 PRECEDING AND CURRENT ROW)sc_corr
00:18:56 SQL> -- FROM sc12
00:18:56 SQL> -- /
00:18:56 SQL> 
00:18:56 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.27
00:18:56 SQL> 
00:18:56 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.30
00:18:56 SQL> 
00:18:56 SQL> CREATE TABLE modsrc COMPRESS AS
00:18:56   2  SELECT
00:18:56   3  pair
00:18:56   4  ,ydate
00:18:56   5  ,prdate
00:18:56   6  ,trend
00:18:56   7  ,g6
00:18:56   8  ,gatt
00:18:56   9  ,gattn
00:18:56  10  ,SUM(g6)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g00
00:18:56  11  ,SUM(g6)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g01
00:18:56  12  ,SUM(g6)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g02
00:18:56  13  ,SUM(g6)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g03
00:18:56  14  ,SUM(g6)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g04
00:18:56  15  ,SUM(g6)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g05
00:18:56  16  ,SUM(g6)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g06
00:18:56  17  ,SUM(g6)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g07
00:18:56  18  ,SUM(g6)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g08
00:18:56  19  ,SUM(g6)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g09
00:18:56  20  ,SUM(g6)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g10
00:18:56  21  ,SUM(g6)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g11
00:18:56  22  ,SUM(g6)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g12
00:18:56  23  ,SUM(g6)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g13
00:18:56  24  ,SUM(g6)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g14
00:18:56  25  ,SUM(g6)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g15
00:18:56  26  ,SUM(g6)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g16
00:18:56  27  ,SUM(g6)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g17
00:18:56  28  ,SUM(g6)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g18
00:18:56  29  ,SUM(g6)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g19
00:18:56  30  ,SUM(g6)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g20
00:18:56  31  ,SUM(g6)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g21
00:18:56  32  ,SUM(g6)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g22
00:18:56  33  ,SUM(g6)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g23
00:18:56  34  ,SUM(g6)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g24
00:18:56  35  ,SUM(g6)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g25
00:18:56  36  ,SUM(g6)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g26
00:18:56  37  ,SUM(g6)OVER(PARTITION BY trend,att27 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g27
00:18:56  38  ,SUM(g6)OVER(PARTITION BY trend,att28 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g28
00:18:56  39  ,SUM(g6)OVER(PARTITION BY trend,att29 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g29
00:18:56  40  ,SUM(g6)OVER(PARTITION BY trend,att30 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g30
00:18:56  41  ,SUM(g6)OVER(PARTITION BY trend,att31 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g31
00:18:56  42  ,SUM(g6)OVER(PARTITION BY trend,att32 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g32
00:18:56  43  ,SUM(g6)OVER(PARTITION BY trend,att33 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g33
00:18:56  44  ,SUM(g6)OVER(PARTITION BY trend,att34 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g34
00:18:56  45  ,SUM(g6)OVER(PARTITION BY trend,att35 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g35
00:18:56  46  ,SUM(g6)OVER(PARTITION BY trend,att36 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g36
00:18:56  47  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g37
00:18:56  48  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*40 PRECEDING AND CURRENT ROW)g38
00:18:56  49  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*30 PRECEDING AND CURRENT ROW)g39
00:18:56  50  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)g40
00:18:56  51  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)g41
00:18:56  52  FROM svm6162
00:18:56  53  /

Table created.

Elapsed: 00:00:06.05
00:19:02 SQL> 
00:19:02 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:02.36
00:19:05 SQL> 
00:19:05 SQL> -- rpt
00:19:05 SQL> 
00:19:05 SQL> SELECT
00:19:05   2  pair
00:19:05   3  ,trend
00:19:05   4  ,gatt
00:19:05   5  ,COUNT(pair)
00:19:05   6  ,AVG(g6)
00:19:05   7  FROM modsrc
00:19:05   8  GROUP BY pair,trend,gatt
00:19:05   9  ORDER BY pair,trend,gatt
00:19:05  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5014 -.15051965
usd_jpy 	-1 up	      4861 .160557844
usd_jpy 	-1		42
usd_jpy 	 1 nup	      5013 -.15461182
usd_jpy 	 1 up	      4679 .170744374
usd_jpy 	 1		30

6 rows selected.

Elapsed: 00:00:00.02
00:19:05 SQL> 
00:19:05 SQL> 
00:19:05 SQL> SELECT pair,COUNT(pair)FROM svm6102 GROUP BY pair;

PAIR	COUNT(PAIR)
------- -----------
usd_jpy       19639

Elapsed: 00:00:00.85
00:19:06 SQL> 
00:19:06 SQL> SELECT pair,COUNT(pair)FROM modsrc GROUP BY pair;

PAIR	COUNT(PAIR)
------- -----------
usd_jpy       19639

Elapsed: 00:00:00.01
00:19:06 SQL> 
00:19:06 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
