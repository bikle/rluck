
SQL*Plus: Release 11.2.0.1.0 Production on Thu Feb 17 00:13:43 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

00:13:43 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
00:13:43 SQL> 00:13:43 SQL> --
00:13:43 SQL> -- pair10.sql
00:13:43 SQL> --
00:13:43 SQL> 
00:13:43 SQL> -- Creates views and tables needed by SVM.
00:13:43 SQL> 
00:13:43 SQL> 
00:13:43 SQL> CREATE OR REPLACE VIEW svm6102 AS
00:13:43   2  SELECT
00:13:43   3  pair
00:13:43   4  ,ydate
00:13:43   5  ,prdate
00:13:43   6  ,rownum rnum -- acts as t in my time-series
00:13:43   7  ,clse
00:13:43   8  -- Derive a bunch of attributes from clse, the latest price:
00:13:43   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
00:13:43  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
00:13:43  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
00:13:43  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
00:13:43  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
00:13:43  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
00:13:43  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
00:13:43  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
00:13:43  17  --
00:13:43  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
00:13:43  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
00:13:43  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
00:13:43  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
00:13:43  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
00:13:43  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
00:13:43  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
00:13:43  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
00:13:43  26  --
00:13:43  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
00:13:43  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
00:13:43  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
00:13:43  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
00:13:43  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
00:13:43  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
00:13:43  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
00:13:43  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
00:13:43  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
00:13:43  36  FROM di5min WHERE pair = '&1'
00:13:43  37  AND ydate > sysdate - 95
00:13:43  38  ORDER BY ydate
00:13:43  39  /
old  36: FROM di5min WHERE pair = '&1'
new  36: FROM di5min WHERE pair = 'aud_jpy'

View created.

Elapsed: 00:00:00.56
00:13:43 SQL> 
00:13:43 SQL> -- rpt
00:13:43 SQL> 
00:13:43 SQL> SELECT
00:13:43   2  pair
00:13:43   3  ,COUNT(pair)
00:13:43   4  ,MIN(clse),MAX(clse)
00:13:43   5  ,MIN(avg6),MAX(avg6)
00:13:43   6  ,MIN(ydate),MAX(ydate)
00:13:43   7  FROM svm6102
00:13:43   8  GROUP BY pair
00:13:43   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
aud_jpy       19387 79.8015123 83.9900356 79.9857816 83.8335818 2010-11-14 20:55:00 2011-02-17 00:05:00

Elapsed: 00:00:00.80
00:13:44 SQL> 
00:13:44 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
00:13:44 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.16
00:13:44 SQL> CREATE TABLE svm6122 COMPRESS AS
00:13:44   2  SELECT
00:13:44   3  pair
00:13:44   4  ,ydate
00:13:44   5  ,prdate
00:13:44   6  ,clse
00:13:44   7  -- g6 is important. I want to predict g6:
00:13:44   8  ,ld6 - clse g6
00:13:44   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
00:13:44  10  -- I want more attributes from the ones I derived above:
00:13:44  11  -- clse relation to moving-min
00:13:44  12  ,clse-min4  cm4
00:13:44  13  ,clse-min6  cm6
00:13:44  14  ,clse-min8  cm8
00:13:44  15  ,clse-min10 cm10
00:13:44  16  ,clse-min12 cm12
00:13:44  17  ,clse-min14 cm14
00:13:44  18  ,clse-min16 cm16
00:13:44  19  ,clse-min18 cm18
00:13:44  20  -- clse relation to moving-avg
00:13:44  21  ,clse-avg4  ca4
00:13:44  22  ,clse-avg6  ca6
00:13:44  23  ,clse-avg8  ca8
00:13:44  24  ,clse-avg10 ca10
00:13:44  25  ,clse-avg12 ca12
00:13:44  26  ,clse-avg14 ca14
00:13:44  27  ,clse-avg16 ca16
00:13:44  28  ,clse-avg18 ca18
00:13:44  29  -- clse relation to moving-max
00:13:44  30  ,clse-max4  cx4
00:13:44  31  ,clse-max6  cx6
00:13:44  32  ,clse-max8  cx8
00:13:44  33  ,clse-max10 cx10
00:13:44  34  ,clse-max12 cx12
00:13:44  35  ,clse-max14 cx14
00:13:44  36  ,clse-max16 cx16
00:13:44  37  ,clse-max18 cx18
00:13:44  38  -- Derive more attributes.
00:13:44  39  -- I want to use CORR() here to help SVM see the shape of the series.
00:13:44  40  -- But COVAR_POP is more stable:
00:13:44  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
00:13:44  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
00:13:44  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
00:13:44  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
00:13:44  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
00:13:44  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
00:13:44  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
00:13:44  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
00:13:44  49  -- Derive date related attributes:
00:13:44  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
00:13:44  51  ,0+TO_CHAR(ydate,'D')d
00:13:44  52  ,0+TO_CHAR(ydate,'W')w
00:13:44  53  -- mpm stands for minutes-past-midnight:
00:13:44  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
00:13:44  55  -- mph stands for minutes-past-hour:
00:13:44  56  ,0+TO_CHAR(ydate,'MI')mph
00:13:44  57  FROM svm6102
00:13:44  58  ORDER BY ydate
00:13:44  59  /

Table created.

Elapsed: 00:00:02.11
00:13:46 SQL> 
00:13:46 SQL> -- rpt
00:13:46 SQL> 
00:13:46 SQL> SELECT
00:13:46   2  pair
00:13:46   3  ,COUNT(pair)
00:13:46   4  ,MIN(clse),MAX(clse)
00:13:46   5  ,MIN(ydate),MAX(ydate)
00:13:46   6  FROM svm6122
00:13:46   7  GROUP BY pair
00:13:46   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
aud_jpy       19387 79.8015123 83.9900356 2010-11-14 20:55:00 2011-02-17 00:05:00

Elapsed: 00:00:00.06
00:13:46 SQL> 
00:13:46 SQL> -- Prepare for derivation of NTILE based params:
00:13:46 SQL> 
00:13:46 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.27
00:13:47 SQL> CREATE TABLE svm6142 COMPRESS AS
00:13:47   2  SELECT
00:13:47   3  pair
00:13:47   4  ,ydate
00:13:47   5  ,prdate
00:13:47   6  ,clse
00:13:47   7  ,g6
00:13:47   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
00:13:47   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
00:13:47  10  ,CASE WHEN trend IS NULL THEN 1
00:13:47  11  	    WHEN trend =0      THEN 1
00:13:47  12  	    ELSE trend END trend
00:13:47  13  ,cm4
00:13:47  14  ,cm6
00:13:47  15  ,cm8
00:13:47  16  ,cm10
00:13:47  17  ,cm12
00:13:47  18  ,cm14
00:13:47  19  ,cm16
00:13:47  20  ,cm18
00:13:47  21  --
00:13:47  22  ,ca4
00:13:47  23  ,ca6
00:13:47  24  ,ca8
00:13:47  25  ,ca10
00:13:47  26  ,ca12
00:13:47  27  ,ca14
00:13:47  28  ,ca16
00:13:47  29  ,ca18
00:13:47  30  --
00:13:47  31  ,cx4
00:13:47  32  ,cx6
00:13:47  33  ,cx8
00:13:47  34  ,cx10
00:13:47  35  ,cx12
00:13:47  36  ,cx14
00:13:47  37  ,cx16
00:13:47  38  ,cx18
00:13:47  39  --
00:13:47  40  ,crr4
00:13:47  41  ,crr6
00:13:47  42  ,crr8
00:13:47  43  ,crr10
00:13:47  44  ,crr12
00:13:47  45  ,crr14
00:13:47  46  ,crr16
00:13:47  47  ,crr18
00:13:47  48  --
00:13:47  49  ,hh
00:13:47  50  ,d
00:13:47  51  ,w
00:13:47  52  ,mpm
00:13:47  53  ,mph
00:13:47  54  FROM svm6122
00:13:47  55  ORDER BY ydate
00:13:47  56  /

Table created.

Elapsed: 00:00:00.45
00:13:47 SQL> 
00:13:47 SQL> -- rpt
00:13:47 SQL> 
00:13:47 SQL> SELECT
00:13:47   2  pair
00:13:47   3  ,trend
00:13:47   4  ,gatt
00:13:47   5  ,COUNT(pair)
00:13:47   6  ,AVG(g6)
00:13:47   7  FROM svm6142
00:13:47   8  GROUP BY pair,trend,gatt
00:13:47   9  ORDER BY pair,trend,gatt
00:13:47  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_jpy 	-1 nup	      4099 -.19143542
aud_jpy 	-1 up	      5233 .200643704
aud_jpy 	-1		13
aud_jpy 	 1 nup	      5294 -.16999513
aud_jpy 	 1 up	      4689 .171029971
aud_jpy 	 1		59

6 rows selected.

Elapsed: 00:00:00.04
00:13:47 SQL> 
00:13:47 SQL> 
00:13:47 SQL> -- Derive NTILE based params:
00:13:47 SQL> 
00:13:47 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.51
00:13:48 SQL> CREATE TABLE svm6162 COMPRESS AS
00:13:48   2  SELECT
00:13:48   3  pair
00:13:48   4  ,ydate
00:13:48   5  ,prdate
00:13:48   6  ,clse
00:13:48   7  ,g6
00:13:48   8  ,gatt
00:13:48   9  ,gattn
00:13:48  10  ,trend
00:13:48  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
00:13:48  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
00:13:48  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
00:13:48  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
00:13:48  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
00:13:48  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
00:13:48  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
00:13:48  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
00:13:48  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
00:13:48  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
00:13:48  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
00:13:48  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
00:13:48  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
00:13:48  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
00:13:48  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
00:13:48  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
00:13:48  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
00:13:48  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
00:13:48  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
00:13:48  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
00:13:48  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
00:13:48  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
00:13:48  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
00:13:48  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
00:13:48  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
00:13:48  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
00:13:48  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
00:13:48  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
00:13:48  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
00:13:48  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
00:13:48  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
00:13:48  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
00:13:48  43  ,hh  att32
00:13:48  44  ,d   att33
00:13:48  45  ,w   att34
00:13:48  46  ,mpm att35
00:13:48  47  ,mph att36
00:13:48  48  ,trend att37
00:13:48  49  FROM svm6142
00:13:48  50  ORDER BY ydate
00:13:48  51  /
