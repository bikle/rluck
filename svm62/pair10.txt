
SQL*Plus: Release 11.2.0.1.0 Production on Mon Feb 28 12:35:20 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

12:35:20 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.01
12:35:20 SQL> 12:35:20 SQL> --
12:35:20 SQL> -- pair10.sql
12:35:20 SQL> --
12:35:20 SQL> 
12:35:20 SQL> -- Creates views and tables needed by SVM.
12:35:20 SQL> 
12:35:20 SQL> 
12:35:20 SQL> CREATE OR REPLACE VIEW svm6102 AS
12:35:20   2  SELECT
12:35:20   3  pair
12:35:20   4  ,ydate
12:35:20   5  ,prdate
12:35:20   6  ,rownum rnum -- acts as t in my time-series
12:35:20   7  ,clse
12:35:20   8  -- Derive a bunch of attributes from clse, the latest price:
12:35:20   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
12:35:20  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
12:35:20  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
12:35:20  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
12:35:20  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
12:35:20  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
12:35:20  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
12:35:20  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
12:35:20  17  --
12:35:20  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
12:35:20  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
12:35:20  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
12:35:20  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
12:35:20  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
12:35:20  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
12:35:20  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
12:35:20  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
12:35:20  26  --
12:35:20  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
12:35:20  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
12:35:20  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
12:35:20  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
12:35:20  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
12:35:20  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
12:35:20  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
12:35:20  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
12:35:20  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
12:35:20  36  FROM di5min WHERE pair = '&1'
12:35:20  37  AND ydate > sysdate - 95
12:35:20  38  ORDER BY ydate
12:35:20  39  /
old  36: FROM di5min WHERE pair = '&1'
new  36: FROM di5min WHERE pair = 'usd_jpy'

View created.

Elapsed: 00:00:00.05
12:35:20 SQL> 
12:35:20 SQL> -- rpt
12:35:20 SQL> 
12:35:20 SQL> SELECT
12:35:20   2  pair
12:35:20   3  ,COUNT(pair)
12:35:20   4  ,MIN(clse),MAX(clse)
12:35:20   5  ,MIN(avg6),MAX(avg6)
12:35:20   6  ,MIN(ydate),MAX(ydate)
12:35:20   7  FROM svm6102
12:35:20   8  GROUP BY pair
12:35:20   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_jpy       19043    81.0225	   84.485 81.1881201 84.3105479 2010-11-25 12:40:00 2011-02-28 12:15:00

Elapsed: 00:00:00.83
12:35:21 SQL> 
12:35:21 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
12:35:21 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.22
12:35:21 SQL> CREATE TABLE svm6122 COMPRESS AS
12:35:21   2  SELECT
12:35:21   3  pair
12:35:21   4  ,ydate
12:35:21   5  ,prdate
12:35:21   6  ,clse
12:35:21   7  -- g6 is important. I want to predict g6:
12:35:21   8  ,(ld6 - clse)/clse g6
12:35:21   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
12:35:21  10  -- I want more attributes from the ones I derived above:
12:35:21  11  -- clse relation to moving-min
12:35:21  12  ,clse-min4  cm4
12:35:21  13  ,clse-min6  cm6
12:35:21  14  ,clse-min8  cm8
12:35:21  15  ,clse-min10 cm10
12:35:21  16  ,clse-min12 cm12
12:35:21  17  ,clse-min14 cm14
12:35:21  18  ,clse-min16 cm16
12:35:21  19  ,clse-min18 cm18
12:35:21  20  -- clse relation to moving-avg
12:35:21  21  ,clse-avg4  ca4
12:35:21  22  ,clse-avg6  ca6
12:35:21  23  ,clse-avg8  ca8
12:35:21  24  ,clse-avg10 ca10
12:35:21  25  ,clse-avg12 ca12
12:35:21  26  ,clse-avg14 ca14
12:35:21  27  ,clse-avg16 ca16
12:35:21  28  ,clse-avg18 ca18
12:35:21  29  -- clse relation to moving-max
12:35:21  30  ,clse-max4  cx4
12:35:21  31  ,clse-max6  cx6
12:35:21  32  ,clse-max8  cx8
12:35:21  33  ,clse-max10 cx10
12:35:21  34  ,clse-max12 cx12
12:35:21  35  ,clse-max14 cx14
12:35:21  36  ,clse-max16 cx16
12:35:21  37  ,clse-max18 cx18
12:35:21  38  -- Derive more attributes.
12:35:21  39  -- I want to use CORR() here to help SVM see the shape of the series.
12:35:21  40  -- But COVAR_POP is more stable:
12:35:21  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
12:35:21  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
12:35:21  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
12:35:21  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
12:35:21  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
12:35:21  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
12:35:21  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
12:35:21  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
12:35:21  49  -- Derive date related attributes:
12:35:21  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
12:35:21  51  ,0+TO_CHAR(ydate,'D')d
12:35:21  52  ,0+TO_CHAR(ydate,'W')w
12:35:21  53  -- mpm stands for minutes-past-midnight:
12:35:21  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
12:35:21  55  -- mph stands for minutes-past-hour:
12:35:21  56  ,0+TO_CHAR(ydate,'MI')mph
12:35:21  57  FROM svm6102
12:35:21  58  WHERE clse > 0
12:35:21  59  ORDER BY ydate
12:35:21  60  /

Table created.

Elapsed: 00:00:02.24
12:35:23 SQL> 
12:35:23 SQL> -- rpt
12:35:23 SQL> 
12:35:23 SQL> SELECT
12:35:23   2  pair
12:35:23   3  ,COUNT(pair)
12:35:23   4  ,MIN(clse),MAX(clse)
12:35:23   5  ,MIN(ydate),MAX(ydate)
12:35:23   6  FROM svm6122
12:35:23   7  GROUP BY pair
12:35:23   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_jpy       19043    81.0225	   84.485 2010-11-25 12:40:00 2011-02-28 12:15:00

Elapsed: 00:00:00.04
12:35:23 SQL> 
12:35:23 SQL> -- Prepare for derivation of NTILE based params:
12:35:23 SQL> 
12:35:23 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.23
12:35:23 SQL> CREATE TABLE svm6142 COMPRESS AS
12:35:23   2  SELECT
12:35:23   3  pair
12:35:23   4  ,ydate
12:35:23   5  ,prdate
12:35:23   6  ,clse
12:35:23   7  ,g6
12:35:23   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
12:35:23   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
12:35:23  10  ,CASE WHEN trend IS NULL THEN 1
12:35:23  11  	    WHEN trend =0      THEN 1
12:35:23  12  	    ELSE trend END trend
12:35:23  13  ,cm4
12:35:23  14  ,cm6
12:35:23  15  ,cm8
12:35:23  16  ,cm10
12:35:23  17  ,cm12
12:35:23  18  ,cm14
12:35:23  19  ,cm16
12:35:23  20  ,cm18
12:35:23  21  --
12:35:23  22  ,ca4
12:35:23  23  ,ca6
12:35:23  24  ,ca8
12:35:23  25  ,ca10
12:35:23  26  ,ca12
12:35:23  27  ,ca14
12:35:23  28  ,ca16
12:35:23  29  ,ca18
12:35:23  30  --
12:35:23  31  ,cx4
12:35:23  32  ,cx6
12:35:23  33  ,cx8
12:35:23  34  ,cx10
12:35:23  35  ,cx12
12:35:23  36  ,cx14
12:35:23  37  ,cx16
12:35:23  38  ,cx18
12:35:23  39  --
12:35:23  40  ,crr4
12:35:23  41  ,crr6
12:35:23  42  ,crr8
12:35:23  43  ,crr10
12:35:23  44  ,crr12
12:35:23  45  ,crr14
12:35:23  46  ,crr16
12:35:23  47  ,crr18
12:35:23  48  --
12:35:23  49  ,hh
12:35:23  50  ,d
12:35:23  51  ,w
12:35:23  52  ,mpm
12:35:23  53  ,mph
12:35:23  54  FROM svm6122
12:35:23  55  ORDER BY ydate
12:35:23  56  /

Table created.

Elapsed: 00:00:00.38
12:35:24 SQL> 
12:35:24 SQL> -- rpt
12:35:24 SQL> 
12:35:24 SQL> SELECT
12:35:24   2  pair
12:35:24   3  ,trend
12:35:24   4  ,gatt
12:35:24   5  ,COUNT(pair)
12:35:24   6  ,AVG(g6)
12:35:24   7  FROM svm6142
12:35:24   8  GROUP BY pair,trend,gatt
12:35:24   9  ORDER BY pair,trend,gatt
12:35:24  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      7529 -.00114864
usd_jpy 	-1 up	      2533 .002961177
usd_jpy 	-1		18
usd_jpy 	 1 nup	      6520 -.00122839
usd_jpy 	 1 up	      2389 .003198447
usd_jpy 	 1		54

6 rows selected.

Elapsed: 00:00:00.04
12:35:24 SQL> 
12:35:24 SQL> 
12:35:24 SQL> -- Derive NTILE based params:
12:35:24 SQL> 
12:35:24 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.25
12:35:24 SQL> CREATE TABLE svm6162 COMPRESS AS
12:35:24   2  SELECT
12:35:24   3  pair
12:35:24   4  ,ydate
12:35:24   5  ,prdate
12:35:24   6  ,clse
12:35:24   7  ,g6
12:35:24   8  ,gatt
12:35:24   9  ,gattn
12:35:24  10  ,trend
12:35:24  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
12:35:24  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
12:35:24  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
12:35:24  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
12:35:24  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
12:35:24  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
12:35:24  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
12:35:24  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
12:35:24  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
12:35:24  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
12:35:24  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
12:35:24  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
12:35:24  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
12:35:24  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
12:35:24  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
12:35:24  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
12:35:24  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
12:35:24  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
12:35:24  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
12:35:24  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
12:35:24  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
12:35:24  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
12:35:24  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
12:35:24  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
12:35:24  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
12:35:24  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
12:35:24  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
12:35:24  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
12:35:24  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
12:35:24  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
12:35:24  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
12:35:24  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
12:35:24  43  ,hh  att32
12:35:24  44  ,d   att33
12:35:24  45  ,w   att34
12:35:24  46  ,mpm att35
12:35:24  47  ,mph att36
12:35:24  48  ,trend att37
12:35:24  49  FROM svm6142
12:35:24  50  ORDER BY ydate
12:35:24  51  /

Table created.

Elapsed: 00:00:05.01
12:35:29 SQL> 
12:35:29 SQL> -- rpt
12:35:29 SQL> 
12:35:29 SQL> SELECT
12:35:29   2  pair
12:35:29   3  ,trend
12:35:29   4  ,gatt
12:35:29   5  ,COUNT(pair)
12:35:29   6  ,AVG(g6)
12:35:29   7  FROM svm6162
12:35:29   8  GROUP BY pair,trend,gatt
12:35:29   9  ORDER BY pair,trend,gatt
12:35:29  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      7529 -.00114864
usd_jpy 	-1 up	      2533 .002961177
usd_jpy 	-1		18
usd_jpy 	 1 nup	      6520 -.00122839
usd_jpy 	 1 up	      2389 .003198447
usd_jpy 	 1		54

6 rows selected.

Elapsed: 00:00:00.02
12:35:29 SQL> 
12:35:29 SQL> -- I comment out sections related to score-feedback.
12:35:29 SQL> -- I tested score-feeback and it hurts results:
12:35:29 SQL> 
12:35:29 SQL> -- CREATE OR REPLACE VIEW sc12 AS
12:35:29 SQL> -- SELECT
12:35:29 SQL> -- m.pair
12:35:29 SQL> -- ,m.ydate
12:35:29 SQL> -- ,m.prdate
12:35:29 SQL> -- ,l.score score_long
12:35:29 SQL> -- ,s.score score_short
12:35:29 SQL> -- ,m.g6
12:35:29 SQL> -- FROM svm62scores l,svm62scores s,svm6162 m
12:35:29 SQL> -- WHERE l.targ='gatt'
12:35:29 SQL> -- AND	 s.targ='gattn'
12:35:29 SQL> -- AND l.prdate = s.prdate
12:35:29 SQL> -- AND l.prdate = m.prdate
12:35:29 SQL> -- -- Speed things up:
12:35:29 SQL> -- AND l.pair = '&1'
12:35:29 SQL> -- AND s.pair = '&1'
12:35:29 SQL> -- /
12:35:29 SQL> --
12:35:29 SQL> -- DROP TABLE score_corr;
12:35:29 SQL> --
12:35:29 SQL> -- CREATE TABLE score_corr COMPRESS AS
12:35:29 SQL> -- SELECT
12:35:29 SQL> -- pair
12:35:29 SQL> -- -- ,ydate
12:35:29 SQL> -- ,prdate
12:35:29 SQL> -- -- Find corr() tween score and g6 over 2 day period:
12:35:29 SQL> -- ,CORR((score_long - score_short),g6)
12:35:29 SQL> --   OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 2*24*60/5 PRECEDING AND CURRENT ROW)sc_corr
12:35:29 SQL> -- FROM sc12
12:35:29 SQL> -- /
12:35:29 SQL> 
12:35:29 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.29
12:35:29 SQL> 
12:35:29 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.31
12:35:30 SQL> 
12:35:30 SQL> CREATE TABLE modsrc COMPRESS AS
12:35:30   2  SELECT
12:35:30   3  pair
12:35:30   4  ,ydate
12:35:30   5  ,prdate
12:35:30   6  ,trend
12:35:30   7  ,g6
12:35:30   8  ,gatt
12:35:30   9  ,gattn
12:35:30  10  ,SUM(g6)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g00
12:35:30  11  ,SUM(g6)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g01
12:35:30  12  ,SUM(g6)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g02
12:35:30  13  ,SUM(g6)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g03
12:35:30  14  ,SUM(g6)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g04
12:35:30  15  ,SUM(g6)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g05
12:35:30  16  ,SUM(g6)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g06
12:35:30  17  ,SUM(g6)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g07
12:35:30  18  ,SUM(g6)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g08
12:35:30  19  ,SUM(g6)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g09
12:35:30  20  ,SUM(g6)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g10
12:35:30  21  ,SUM(g6)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g11
12:35:30  22  ,SUM(g6)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g12
12:35:30  23  ,SUM(g6)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g13
12:35:30  24  ,SUM(g6)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g14
12:35:30  25  ,SUM(g6)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g15
12:35:30  26  ,SUM(g6)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g16
12:35:30  27  ,SUM(g6)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g17
12:35:30  28  ,SUM(g6)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g18
12:35:30  29  ,SUM(g6)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g19
12:35:30  30  ,SUM(g6)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g20
12:35:30  31  ,SUM(g6)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g21
12:35:30  32  ,SUM(g6)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g22
12:35:30  33  ,SUM(g6)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g23
12:35:30  34  ,SUM(g6)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g24
12:35:30  35  ,SUM(g6)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g25
12:35:30  36  ,SUM(g6)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g26
12:35:30  37  ,SUM(g6)OVER(PARTITION BY trend,att27 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g27
12:35:30  38  ,SUM(g6)OVER(PARTITION BY trend,att28 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g28
12:35:30  39  ,SUM(g6)OVER(PARTITION BY trend,att29 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g29
12:35:30  40  ,SUM(g6)OVER(PARTITION BY trend,att30 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g30
12:35:30  41  ,SUM(g6)OVER(PARTITION BY trend,att31 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g31
12:35:30  42  ,SUM(g6)OVER(PARTITION BY trend,att32 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g32
12:35:30  43  ,SUM(g6)OVER(PARTITION BY trend,att33 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g33
12:35:30  44  ,SUM(g6)OVER(PARTITION BY trend,att34 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g34
12:35:30  45  ,SUM(g6)OVER(PARTITION BY trend,att35 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g35
12:35:30  46  ,SUM(g6)OVER(PARTITION BY trend,att36 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g36
12:35:30  47  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g37
12:35:30  48  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*40 PRECEDING AND CURRENT ROW)g38
12:35:30  49  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*30 PRECEDING AND CURRENT ROW)g39
12:35:30  50  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)g40
12:35:30  51  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)g41
12:35:30  52  FROM svm6162
12:35:30  53  /

Table created.

Elapsed: 00:00:06.46
12:35:36 SQL> 
12:35:36 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:04.02
12:35:40 SQL> 
12:35:40 SQL> -- rpt
12:35:40 SQL> 
12:35:40 SQL> SELECT
12:35:40   2  pair
12:35:40   3  ,trend
12:35:40   4  ,gatt
12:35:40   5  ,COUNT(pair)
12:35:40   6  ,AVG(g6)
12:35:40   7  FROM modsrc
12:35:40   8  GROUP BY pair,trend,gatt
12:35:40   9  ORDER BY pair,trend,gatt
12:35:40  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      7529 -.00114864
usd_jpy 	-1 up	      2533 .002961177
usd_jpy 	-1		18
usd_jpy 	 1 nup	      6520 -.00122839
usd_jpy 	 1 up	      2389 .003198447
usd_jpy 	 1		54

6 rows selected.

Elapsed: 00:00:00.02
12:35:40 SQL> 
12:35:40 SQL> 
12:35:40 SQL> SELECT pair,COUNT(pair)FROM svm6102 GROUP BY pair;

PAIR	COUNT(PAIR)
------- -----------
usd_jpy       19043

Elapsed: 00:00:00.80
12:35:41 SQL> 
12:35:41 SQL> SELECT pair,COUNT(pair)FROM modsrc GROUP BY pair;

PAIR	COUNT(PAIR)
------- -----------
usd_jpy       19043

Elapsed: 00:00:00.01
12:35:41 SQL> 
12:35:41 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
