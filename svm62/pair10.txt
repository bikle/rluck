
SQL*Plus: Release 11.2.0.1.0 Production on Thu Feb 24 01:39:27 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

01:39:27 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
01:39:27 SQL> 01:39:27 SQL> --
01:39:27 SQL> -- pair10.sql
01:39:27 SQL> --
01:39:27 SQL> 
01:39:27 SQL> -- Creates views and tables needed by SVM.
01:39:27 SQL> 
01:39:27 SQL> 
01:39:27 SQL> CREATE OR REPLACE VIEW svm6102 AS
01:39:27   2  SELECT
01:39:27   3  pair
01:39:27   4  ,ydate
01:39:27   5  ,prdate
01:39:27   6  ,rownum rnum -- acts as t in my time-series
01:39:27   7  ,clse
01:39:27   8  -- Derive a bunch of attributes from clse, the latest price:
01:39:27   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
01:39:27  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
01:39:27  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
01:39:27  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
01:39:27  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
01:39:27  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
01:39:27  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
01:39:27  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
01:39:27  17  --
01:39:27  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
01:39:27  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
01:39:27  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
01:39:27  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
01:39:27  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
01:39:27  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
01:39:27  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
01:39:27  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
01:39:27  26  --
01:39:27  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
01:39:27  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
01:39:27  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
01:39:27  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
01:39:27  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
01:39:27  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
01:39:27  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
01:39:27  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
01:39:27  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
01:39:27  36  FROM di5min WHERE pair = '&1'
01:39:27  37  AND ydate > sysdate - 95
01:39:27  38  ORDER BY ydate
01:39:27  39  /
old  36: FROM di5min WHERE pair = '&1'
new  36: FROM di5min WHERE pair = 'eur_gbp'

View created.

Elapsed: 00:00:00.06
01:39:27 SQL> 
01:39:27 SQL> -- rpt
01:39:27 SQL> 
01:39:27 SQL> SELECT
01:39:27   2  pair
01:39:27   3  ,COUNT(pair)
01:39:27   4  ,MIN(clse),MAX(clse)
01:39:27   5  ,MIN(avg6),MAX(avg6)
01:39:27   6  ,MIN(ydate),MAX(ydate)
01:39:27   7  FROM svm6102
01:39:27   8  GROUP BY pair
01:39:27   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_gbp       19395 .829062716 .867050282 .830048836 .865740025 2010-11-21 20:55:00 2011-02-24 01:25:00

Elapsed: 00:00:00.87
01:39:28 SQL> 
01:39:28 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
01:39:28 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.37
01:39:28 SQL> CREATE TABLE svm6122 COMPRESS AS
01:39:28   2  SELECT
01:39:28   3  pair
01:39:28   4  ,ydate
01:39:28   5  ,prdate
01:39:28   6  ,clse
01:39:28   7  -- g6 is important. I want to predict g6:
01:39:28   8  ,(ld6 - clse)/clse g6
01:39:28   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
01:39:28  10  -- I want more attributes from the ones I derived above:
01:39:28  11  -- clse relation to moving-min
01:39:28  12  ,clse-min4  cm4
01:39:28  13  ,clse-min6  cm6
01:39:28  14  ,clse-min8  cm8
01:39:28  15  ,clse-min10 cm10
01:39:28  16  ,clse-min12 cm12
01:39:28  17  ,clse-min14 cm14
01:39:28  18  ,clse-min16 cm16
01:39:28  19  ,clse-min18 cm18
01:39:28  20  -- clse relation to moving-avg
01:39:28  21  ,clse-avg4  ca4
01:39:28  22  ,clse-avg6  ca6
01:39:28  23  ,clse-avg8  ca8
01:39:28  24  ,clse-avg10 ca10
01:39:28  25  ,clse-avg12 ca12
01:39:28  26  ,clse-avg14 ca14
01:39:28  27  ,clse-avg16 ca16
01:39:28  28  ,clse-avg18 ca18
01:39:28  29  -- clse relation to moving-max
01:39:28  30  ,clse-max4  cx4
01:39:28  31  ,clse-max6  cx6
01:39:28  32  ,clse-max8  cx8
01:39:28  33  ,clse-max10 cx10
01:39:28  34  ,clse-max12 cx12
01:39:28  35  ,clse-max14 cx14
01:39:28  36  ,clse-max16 cx16
01:39:28  37  ,clse-max18 cx18
01:39:28  38  -- Derive more attributes.
01:39:28  39  -- I want to use CORR() here to help SVM see the shape of the series.
01:39:28  40  -- But COVAR_POP is more stable:
01:39:28  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
01:39:28  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
01:39:28  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
01:39:28  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
01:39:28  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
01:39:28  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
01:39:28  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
01:39:28  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
01:39:28  49  -- Derive date related attributes:
01:39:28  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
01:39:28  51  ,0+TO_CHAR(ydate,'D')d
01:39:28  52  ,0+TO_CHAR(ydate,'W')w
01:39:28  53  -- mpm stands for minutes-past-midnight:
01:39:28  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
01:39:28  55  -- mph stands for minutes-past-hour:
01:39:28  56  ,0+TO_CHAR(ydate,'MI')mph
01:39:28  57  FROM svm6102
01:39:28  58  WHERE clse > 0
01:39:28  59  ORDER BY ydate
01:39:28  60  /

Table created.

Elapsed: 00:00:02.46
01:39:31 SQL> 
01:39:31 SQL> -- rpt
01:39:31 SQL> 
01:39:31 SQL> SELECT
01:39:31   2  pair
01:39:31   3  ,COUNT(pair)
01:39:31   4  ,MIN(clse),MAX(clse)
01:39:31   5  ,MIN(ydate),MAX(ydate)
01:39:31   6  FROM svm6122
01:39:31   7  GROUP BY pair
01:39:31   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_gbp       19395 .829062716 .867050282 2010-11-21 20:55:00 2011-02-24 01:25:00

Elapsed: 00:00:00.06
01:39:31 SQL> 
01:39:31 SQL> -- Prepare for derivation of NTILE based params:
01:39:31 SQL> 
01:39:31 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.49
01:39:31 SQL> CREATE TABLE svm6142 COMPRESS AS
01:39:31   2  SELECT
01:39:31   3  pair
01:39:31   4  ,ydate
01:39:31   5  ,prdate
01:39:31   6  ,clse
01:39:31   7  ,g6
01:39:31   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
01:39:31   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
01:39:31  10  ,CASE WHEN trend IS NULL THEN 1
01:39:31  11  	    WHEN trend =0      THEN 1
01:39:31  12  	    ELSE trend END trend
01:39:31  13  ,cm4
01:39:31  14  ,cm6
01:39:31  15  ,cm8
01:39:31  16  ,cm10
01:39:31  17  ,cm12
01:39:31  18  ,cm14
01:39:31  19  ,cm16
01:39:31  20  ,cm18
01:39:31  21  --
01:39:31  22  ,ca4
01:39:31  23  ,ca6
01:39:31  24  ,ca8
01:39:31  25  ,ca10
01:39:31  26  ,ca12
01:39:31  27  ,ca14
01:39:31  28  ,ca16
01:39:31  29  ,ca18
01:39:31  30  --
01:39:31  31  ,cx4
01:39:31  32  ,cx6
01:39:31  33  ,cx8
01:39:31  34  ,cx10
01:39:31  35  ,cx12
01:39:31  36  ,cx14
01:39:31  37  ,cx16
01:39:31  38  ,cx18
01:39:31  39  --
01:39:31  40  ,crr4
01:39:31  41  ,crr6
01:39:31  42  ,crr8
01:39:31  43  ,crr10
01:39:31  44  ,crr12
01:39:31  45  ,crr14
01:39:31  46  ,crr16
01:39:31  47  ,crr18
01:39:31  48  --
01:39:31  49  ,hh
01:39:31  50  ,d
01:39:31  51  ,w
01:39:31  52  ,mpm
01:39:31  53  ,mph
01:39:31  54  FROM svm6122
01:39:31  55  ORDER BY ydate
01:39:31  56  /

Table created.

Elapsed: 00:00:00.42
01:39:32 SQL> 
01:39:32 SQL> -- rpt
01:39:32 SQL> 
01:39:32 SQL> SELECT
01:39:32   2  pair
01:39:32   3  ,trend
01:39:32   4  ,gatt
01:39:32   5  ,COUNT(pair)
01:39:32   6  ,AVG(g6)
01:39:32   7  FROM svm6142
01:39:32   8  GROUP BY pair,trend,gatt
01:39:32   9  ORDER BY pair,trend,gatt
01:39:32  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_gbp 	-1 nup	      7334 -.00123445
eur_gbp 	-1 up	      2635 .003160125
eur_gbp 	-1		37
eur_gbp 	 1 nup	      6659 -.00131035
eur_gbp 	 1 up	      2695 .003199377
eur_gbp 	 1		35

6 rows selected.

Elapsed: 00:00:00.04
01:39:32 SQL> 
01:39:32 SQL> 
01:39:32 SQL> -- Derive NTILE based params:
01:39:32 SQL> 
01:39:32 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.14
01:39:32 SQL> CREATE TABLE svm6162 COMPRESS AS
01:39:32   2  SELECT
01:39:32   3  pair
01:39:32   4  ,ydate
01:39:32   5  ,prdate
01:39:32   6  ,clse
01:39:32   7  ,g6
01:39:32   8  ,gatt
01:39:32   9  ,gattn
01:39:32  10  ,trend
01:39:32  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
01:39:32  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
01:39:32  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
01:39:32  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
01:39:32  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
01:39:32  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
01:39:32  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
01:39:32  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
01:39:32  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
01:39:32  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
01:39:32  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
01:39:32  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
01:39:32  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
01:39:32  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
01:39:32  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
01:39:32  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
01:39:32  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
01:39:32  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
01:39:32  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
01:39:32  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
01:39:32  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
01:39:32  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
01:39:32  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
01:39:32  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
01:39:32  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
01:39:32  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
01:39:32  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
01:39:32  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
01:39:32  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
01:39:32  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
01:39:32  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
01:39:32  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
01:39:32  43  ,hh  att32
01:39:32  44  ,d   att33
01:39:32  45  ,w   att34
01:39:32  46  ,mpm att35
01:39:32  47  ,mph att36
01:39:32  48  ,trend att37
01:39:32  49  FROM svm6142
01:39:32  50  ORDER BY ydate
01:39:32  51  /

Table created.

Elapsed: 00:00:05.61
01:39:38 SQL> 
01:39:38 SQL> -- rpt
01:39:38 SQL> 
01:39:38 SQL> SELECT
01:39:38   2  pair
01:39:38   3  ,trend
01:39:38   4  ,gatt
01:39:38   5  ,COUNT(pair)
01:39:38   6  ,AVG(g6)
01:39:38   7  FROM svm6162
01:39:38   8  GROUP BY pair,trend,gatt
01:39:38   9  ORDER BY pair,trend,gatt
01:39:38  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_gbp 	-1 nup	      7334 -.00123445
eur_gbp 	-1 up	      2635 .003160125
eur_gbp 	-1		37
eur_gbp 	 1 nup	      6659 -.00131035
eur_gbp 	 1 up	      2695 .003199377
eur_gbp 	 1		35

6 rows selected.

Elapsed: 00:00:00.04
01:39:38 SQL> 
01:39:38 SQL> -- I comment out sections related to score-feedback.
01:39:38 SQL> -- I tested score-feeback and it hurts results:
01:39:38 SQL> 
01:39:38 SQL> -- CREATE OR REPLACE VIEW sc12 AS
01:39:38 SQL> -- SELECT
01:39:38 SQL> -- m.pair
01:39:38 SQL> -- ,m.ydate
01:39:38 SQL> -- ,m.prdate
01:39:38 SQL> -- ,l.score score_long
01:39:38 SQL> -- ,s.score score_short
01:39:38 SQL> -- ,m.g6
01:39:38 SQL> -- FROM svm62scores l,svm62scores s,svm6162 m
01:39:38 SQL> -- WHERE l.targ='gatt'
01:39:38 SQL> -- AND	 s.targ='gattn'
01:39:38 SQL> -- AND l.prdate = s.prdate
01:39:38 SQL> -- AND l.prdate = m.prdate
01:39:38 SQL> -- -- Speed things up:
01:39:38 SQL> -- AND l.pair = '&1'
01:39:38 SQL> -- AND s.pair = '&1'
01:39:38 SQL> -- /
01:39:38 SQL> --
01:39:38 SQL> -- DROP TABLE score_corr;
01:39:38 SQL> --
01:39:38 SQL> -- CREATE TABLE score_corr COMPRESS AS
01:39:38 SQL> -- SELECT
01:39:38 SQL> -- pair
01:39:38 SQL> -- -- ,ydate
01:39:38 SQL> -- ,prdate
01:39:38 SQL> -- -- Find corr() tween score and g6 over 2 day period:
01:39:38 SQL> -- ,CORR((score_long - score_short),g6)
01:39:38 SQL> --   OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 2*24*60/5 PRECEDING AND CURRENT ROW)sc_corr
01:39:38 SQL> -- FROM sc12
01:39:38 SQL> -- /
01:39:38 SQL> 
01:39:38 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.34
01:39:38 SQL> 
01:39:38 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.28
01:39:38 SQL> 
01:39:38 SQL> CREATE TABLE modsrc COMPRESS AS
01:39:38   2  SELECT
01:39:38   3  pair
01:39:38   4  ,ydate
01:39:38   5  ,prdate
01:39:38   6  ,trend
01:39:38   7  ,g6
01:39:38   8  ,gatt
01:39:38   9  ,gattn
01:39:38  10  ,SUM(g6)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g00
01:39:38  11  ,SUM(g6)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g01
01:39:38  12  ,SUM(g6)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g02
01:39:38  13  ,SUM(g6)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g03
01:39:38  14  ,SUM(g6)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g04
01:39:38  15  ,SUM(g6)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g05
01:39:38  16  ,SUM(g6)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g06
01:39:38  17  ,SUM(g6)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g07
01:39:38  18  ,SUM(g6)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g08
01:39:38  19  ,SUM(g6)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g09
01:39:38  20  ,SUM(g6)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g10
01:39:38  21  ,SUM(g6)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g11
01:39:38  22  ,SUM(g6)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g12
01:39:38  23  ,SUM(g6)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g13
01:39:38  24  ,SUM(g6)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g14
01:39:38  25  ,SUM(g6)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g15
01:39:38  26  ,SUM(g6)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g16
01:39:38  27  ,SUM(g6)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g17
01:39:38  28  ,SUM(g6)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g18
01:39:38  29  ,SUM(g6)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g19
01:39:38  30  ,SUM(g6)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g20
01:39:38  31  ,SUM(g6)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g21
01:39:38  32  ,SUM(g6)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g22
01:39:38  33  ,SUM(g6)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g23
01:39:38  34  ,SUM(g6)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g24
01:39:38  35  ,SUM(g6)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g25
01:39:38  36  ,SUM(g6)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g26
01:39:38  37  ,SUM(g6)OVER(PARTITION BY trend,att27 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g27
01:39:38  38  ,SUM(g6)OVER(PARTITION BY trend,att28 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g28
01:39:38  39  ,SUM(g6)OVER(PARTITION BY trend,att29 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g29
01:39:38  40  ,SUM(g6)OVER(PARTITION BY trend,att30 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g30
01:39:38  41  ,SUM(g6)OVER(PARTITION BY trend,att31 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g31
01:39:38  42  ,SUM(g6)OVER(PARTITION BY trend,att32 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g32
01:39:38  43  ,SUM(g6)OVER(PARTITION BY trend,att33 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g33
01:39:38  44  ,SUM(g6)OVER(PARTITION BY trend,att34 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g34
01:39:38  45  ,SUM(g6)OVER(PARTITION BY trend,att35 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g35
01:39:38  46  ,SUM(g6)OVER(PARTITION BY trend,att36 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g36
01:39:38  47  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g37
01:39:38  48  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*40 PRECEDING AND CURRENT ROW)g38
01:39:38  49  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*30 PRECEDING AND CURRENT ROW)g39
01:39:38  50  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)g40
01:39:38  51  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)g41
01:39:38  52  FROM svm6162
01:39:38  53  /
