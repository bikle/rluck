
SQL*Plus: Release 11.2.0.1.0 Production on Fri Feb 4 22:58:39 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

22:58:39 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
22:58:39 SQL> 22:58:39 SQL> --
22:58:39 SQL> -- pair10.sql
22:58:39 SQL> --
22:58:39 SQL> 
22:58:39 SQL> -- Creates views and tables needed by SVM.
22:58:39 SQL> 
22:58:39 SQL> 
22:58:39 SQL> CREATE OR REPLACE VIEW svm6102 AS
22:58:39   2  SELECT
22:58:39   3  pair
22:58:39   4  ,ydate
22:58:39   5  ,prdate
22:58:39   6  ,rownum rnum -- acts as t in my time-series
22:58:39   7  ,clse
22:58:39   8  -- Derive a bunch of attributes from clse, the latest price:
22:58:39   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
22:58:39  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
22:58:39  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
22:58:39  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
22:58:39  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
22:58:39  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
22:58:39  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
22:58:39  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
22:58:39  17  --
22:58:39  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
22:58:39  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
22:58:39  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
22:58:39  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
22:58:39  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
22:58:39  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
22:58:39  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
22:58:39  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
22:58:39  26  --
22:58:39  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
22:58:39  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
22:58:39  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
22:58:39  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
22:58:39  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
22:58:39  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
22:58:39  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
22:58:39  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
22:58:39  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
22:58:39  36  FROM di5min WHERE pair = '&1'
22:58:39  37  AND ydate > sysdate - 95
22:58:39  38  ORDER BY ydate
22:58:39  39  /
old  36: FROM di5min WHERE pair = '&1'
new  36: FROM di5min WHERE pair = 'usd_jpy'

View created.

Elapsed: 00:00:00.12
22:58:39 SQL> 
22:58:39 SQL> -- rpt
22:58:39 SQL> 
22:58:39 SQL> SELECT
22:58:39   2  pair
22:58:39   3  ,COUNT(pair)
22:58:39   4  ,MIN(clse),MAX(clse)
22:58:39   5  ,MIN(avg6),MAX(avg6)
22:58:39   6  ,MIN(ydate),MAX(ydate)
22:58:39   7  FROM svm6102
22:58:39   8  GROUP BY pair
22:58:39   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_jpy       19667	  80.5	   84.485      80.51 84.3105479 2010-11-01 23:00:00 2011-02-04 20:20:00

Elapsed: 00:00:00.91
22:58:40 SQL> 
22:58:40 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
22:58:40 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.33
22:58:40 SQL> CREATE TABLE svm6122 COMPRESS AS
22:58:40   2  SELECT
22:58:40   3  pair
22:58:40   4  ,ydate
22:58:40   5  ,prdate
22:58:40   6  ,clse
22:58:40   7  -- g6 is important. I want to predict g6:
22:58:40   8  ,ld6 - clse g6
22:58:40   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
22:58:40  10  -- I want more attributes from the ones I derived above:
22:58:40  11  -- clse relation to moving-min
22:58:40  12  ,clse-min4  cm4
22:58:40  13  ,clse-min6  cm6
22:58:40  14  ,clse-min8  cm8
22:58:40  15  ,clse-min10 cm10
22:58:40  16  ,clse-min12 cm12
22:58:40  17  ,clse-min14 cm14
22:58:40  18  ,clse-min16 cm16
22:58:40  19  ,clse-min18 cm18
22:58:40  20  -- clse relation to moving-avg
22:58:40  21  ,clse-avg4  ca4
22:58:40  22  ,clse-avg6  ca6
22:58:40  23  ,clse-avg8  ca8
22:58:40  24  ,clse-avg10 ca10
22:58:40  25  ,clse-avg12 ca12
22:58:40  26  ,clse-avg14 ca14
22:58:40  27  ,clse-avg16 ca16
22:58:40  28  ,clse-avg18 ca18
22:58:40  29  -- clse relation to moving-max
22:58:40  30  ,clse-max4  cx4
22:58:40  31  ,clse-max6  cx6
22:58:40  32  ,clse-max8  cx8
22:58:40  33  ,clse-max10 cx10
22:58:40  34  ,clse-max12 cx12
22:58:40  35  ,clse-max14 cx14
22:58:40  36  ,clse-max16 cx16
22:58:40  37  ,clse-max18 cx18
22:58:40  38  -- Derive more attributes.
22:58:40  39  -- I want to use CORR() here to help SVM see the shape of the series.
22:58:40  40  -- But COVAR_POP is more stable:
22:58:40  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
22:58:40  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
22:58:40  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
22:58:40  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
22:58:40  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
22:58:40  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
22:58:40  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
22:58:40  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
22:58:40  49  -- Derive date related attributes:
22:58:40  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:58:40  51  ,0+TO_CHAR(ydate,'D')d
22:58:40  52  ,0+TO_CHAR(ydate,'W')w
22:58:40  53  -- mpm stands for minutes-past-midnight:
22:58:40  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:58:40  55  -- mph stands for minutes-past-hour:
22:58:40  56  ,0+TO_CHAR(ydate,'MI')mph
22:58:40  57  FROM svm6102
22:58:40  58  ORDER BY ydate
22:58:40  59  /

Table created.

Elapsed: 00:00:02.30
22:58:42 SQL> 
22:58:42 SQL> -- rpt
22:58:42 SQL> 
22:58:42 SQL> SELECT
22:58:42   2  pair
22:58:42   3  ,COUNT(pair)
22:58:42   4  ,MIN(clse),MAX(clse)
22:58:42   5  ,MIN(ydate),MAX(ydate)
22:58:42   6  FROM svm6122
22:58:42   7  GROUP BY pair
22:58:42   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_jpy       19667	  80.5	   84.485 2010-11-01 23:00:00 2011-02-04 20:20:00

Elapsed: 00:00:00.04
22:58:42 SQL> 
22:58:42 SQL> -- Prepare for derivation of NTILE based params:
22:58:42 SQL> 
22:58:42 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.35
22:58:43 SQL> CREATE TABLE svm6142 COMPRESS AS
22:58:43   2  SELECT
22:58:43   3  pair
22:58:43   4  ,ydate
22:58:43   5  ,prdate
22:58:43   6  ,clse
22:58:43   7  ,g6
22:58:43   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
22:58:43   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
22:58:43  10  ,CASE WHEN trend IS NULL THEN 1
22:58:43  11  	    WHEN trend =0      THEN 1
22:58:43  12  	    ELSE trend END trend
22:58:43  13  ,cm4
22:58:43  14  ,cm6
22:58:43  15  ,cm8
22:58:43  16  ,cm10
22:58:43  17  ,cm12
22:58:43  18  ,cm14
22:58:43  19  ,cm16
22:58:43  20  ,cm18
22:58:43  21  --
22:58:43  22  ,ca4
22:58:43  23  ,ca6
22:58:43  24  ,ca8
22:58:43  25  ,ca10
22:58:43  26  ,ca12
22:58:43  27  ,ca14
22:58:43  28  ,ca16
22:58:43  29  ,ca18
22:58:43  30  --
22:58:43  31  ,cx4
22:58:43  32  ,cx6
22:58:43  33  ,cx8
22:58:43  34  ,cx10
22:58:43  35  ,cx12
22:58:43  36  ,cx14
22:58:43  37  ,cx16
22:58:43  38  ,cx18
22:58:43  39  --
22:58:43  40  ,crr4
22:58:43  41  ,crr6
22:58:43  42  ,crr8
22:58:43  43  ,crr10
22:58:43  44  ,crr12
22:58:43  45  ,crr14
22:58:43  46  ,crr16
22:58:43  47  ,crr18
22:58:43  48  --
22:58:43  49  ,hh
22:58:43  50  ,d
22:58:43  51  ,w
22:58:43  52  ,mpm
22:58:43  53  ,mph
22:58:43  54  FROM svm6122
22:58:43  55  ORDER BY ydate
22:58:43  56  /

Table created.

Elapsed: 00:00:00.42
22:58:43 SQL> 
22:58:43 SQL> -- rpt
22:58:43 SQL> 
22:58:43 SQL> SELECT
22:58:43   2  pair
22:58:43   3  ,trend
22:58:43   4  ,gatt
22:58:43   5  ,COUNT(pair)
22:58:43   6  ,AVG(g6)
22:58:43   7  FROM svm6142
22:58:43   8  GROUP BY pair,trend,gatt
22:58:43   9  ORDER BY pair,trend,gatt
22:58:43  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5030 -.15711251
usd_jpy 	-1 up	      4972 .175119991
usd_jpy 	 1 nup	      5094  -.1567387
usd_jpy 	 1 up	      4499 .184154535
usd_jpy 	 1		72

Elapsed: 00:00:00.04
22:58:43 SQL> 
22:58:43 SQL> 
22:58:43 SQL> -- Derive NTILE based params:
22:58:43 SQL> 
22:58:43 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.48
22:58:44 SQL> CREATE TABLE svm6162 COMPRESS AS
22:58:44   2  SELECT
22:58:44   3  pair
22:58:44   4  ,ydate
22:58:44   5  ,prdate
22:58:44   6  ,clse
22:58:44   7  ,g6
22:58:44   8  ,gatt
22:58:44   9  ,gattn
22:58:44  10  ,trend
22:58:44  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
22:58:44  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
22:58:44  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
22:58:44  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
22:58:44  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
22:58:44  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
22:58:44  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
22:58:44  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
22:58:44  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
22:58:44  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
22:58:44  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
22:58:44  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
22:58:44  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
22:58:44  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
22:58:44  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
22:58:44  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
22:58:44  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
22:58:44  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
22:58:44  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
22:58:44  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
22:58:44  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
22:58:44  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
22:58:44  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
22:58:44  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
22:58:44  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
22:58:44  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
22:58:44  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
22:58:44  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
22:58:44  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
22:58:44  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
22:58:44  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
22:58:44  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
22:58:44  43  ,hh  att32
22:58:44  44  ,d   att33
22:58:44  45  ,w   att34
22:58:44  46  ,mpm att35
22:58:44  47  ,mph att36
22:58:44  48  ,trend att37
22:58:44  49  FROM svm6142
22:58:44  50  ORDER BY ydate
22:58:44  51  /

Table created.

Elapsed: 00:00:05.12
22:58:49 SQL> 
22:58:49 SQL> -- rpt
22:58:49 SQL> 
22:58:49 SQL> SELECT
22:58:49   2  pair
22:58:49   3  ,trend
22:58:49   4  ,gatt
22:58:49   5  ,COUNT(pair)
22:58:49   6  ,AVG(g6)
22:58:49   7  FROM svm6162
22:58:49   8  GROUP BY pair,trend,gatt
22:58:49   9  ORDER BY pair,trend,gatt
22:58:49  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5030 -.15711251
usd_jpy 	-1 up	      4972 .175119991
usd_jpy 	 1 nup	      5094  -.1567387
usd_jpy 	 1 up	      4499 .184154535
usd_jpy 	 1		72

Elapsed: 00:00:00.03
22:58:49 SQL> 
22:58:49 SQL> 
22:58:49 SQL> CREATE OR REPLACE VIEW sc12 AS
22:58:49   2  SELECT
22:58:49   3  m.pair
22:58:49   4  ,m.ydate
22:58:49   5  ,m.prdate
22:58:49   6  ,l.score score_long
22:58:49   7  ,s.score score_short
22:58:49   8  ,m.g6
22:58:49   9  FROM svm62scores l,svm62scores s,svm6162 m
22:58:49  10  WHERE l.targ='gatt'
22:58:49  11  AND   s.targ='gattn'
22:58:49  12  AND l.prdate = s.prdate
22:58:49  13  AND l.prdate = m.prdate
22:58:49  14  -- Speed things up:
22:58:49  15  AND l.pair = '&1'
22:58:49  16  AND s.pair = '&1'
22:58:49  17  /
old  15: AND l.pair = '&1'
new  15: AND l.pair = 'usd_jpy'
old  16: AND s.pair = '&1'
new  16: AND s.pair = 'usd_jpy'

View created.

Elapsed: 00:00:00.07
22:58:49 SQL> 
22:58:49 SQL> DROP TABLE score_corr;

Table dropped.

Elapsed: 00:00:00.22
22:58:49 SQL> 
22:58:49 SQL> CREATE TABLE score_corr COMPRESS AS
22:58:49   2  SELECT
22:58:49   3  pair
22:58:49   4  -- ,ydate
22:58:49   5  ,prdate
22:58:49   6  -- Find corr() tween score and g6 over 2 day period:
22:58:49   7  ,CORR((score_long - score_short),g6)
22:58:49   8  	OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 2*24*60/5 PRECEDING AND CURRENT ROW)sc_corr
22:58:49   9  FROM sc12
22:58:49  10  /

Table created.

Elapsed: 00:00:00.27
22:58:49 SQL> 
22:58:49 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.05
22:58:49 SQL> 
22:58:49 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.37
22:58:50 SQL> 
22:58:50 SQL> CREATE TABLE modsrc COMPRESS AS
22:58:50   2  SELECT
22:58:50   3  s.pair
22:58:50   4  ,ydate
22:58:50   5  ,s.prdate
22:58:50   6  ,trend
22:58:50   7  ,g6
22:58:50   8  ,gatt
22:58:50   9  ,gattn
22:58:50  10  ,SUM(g6)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g00
22:58:50  11  ,SUM(g6)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g01
22:58:50  12  ,SUM(g6)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g02
22:58:50  13  ,SUM(g6)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g03
22:58:50  14  ,SUM(g6)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g04
22:58:50  15  ,SUM(g6)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g05
22:58:50  16  ,SUM(g6)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g06
22:58:50  17  ,SUM(g6)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g07
22:58:50  18  ,SUM(g6)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g08
22:58:50  19  ,SUM(g6)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g09
22:58:50  20  ,SUM(g6)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g10
22:58:50  21  ,SUM(g6)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g11
22:58:50  22  ,SUM(g6)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g12
22:58:50  23  ,SUM(g6)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g13
22:58:50  24  ,SUM(g6)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g14
22:58:50  25  ,SUM(g6)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g15
22:58:50  26  ,SUM(g6)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g16
22:58:50  27  ,SUM(g6)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g17
22:58:50  28  ,SUM(g6)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g18
22:58:50  29  ,SUM(g6)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g19
22:58:50  30  ,SUM(g6)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g20
22:58:50  31  ,SUM(g6)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g21
22:58:50  32  ,SUM(g6)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g22
22:58:50  33  ,SUM(g6)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g23
22:58:50  34  ,SUM(g6)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g24
22:58:50  35  ,SUM(g6)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g25
22:58:50  36  ,SUM(g6)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g26
22:58:50  37  ,SUM(g6)OVER(PARTITION BY trend,att27 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g27
22:58:50  38  ,SUM(g6)OVER(PARTITION BY trend,att28 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g28
22:58:50  39  ,SUM(g6)OVER(PARTITION BY trend,att29 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g29
22:58:50  40  ,SUM(g6)OVER(PARTITION BY trend,att30 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g30
22:58:50  41  ,SUM(g6)OVER(PARTITION BY trend,att31 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g31
22:58:50  42  ,SUM(g6)OVER(PARTITION BY trend,att32 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g32
22:58:50  43  ,SUM(g6)OVER(PARTITION BY trend,att33 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g33
22:58:50  44  ,SUM(g6)OVER(PARTITION BY trend,att34 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g34
22:58:50  45  ,SUM(g6)OVER(PARTITION BY trend,att35 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g35
22:58:50  46  ,SUM(g6)OVER(PARTITION BY trend,att36 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g36
22:58:50  47  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g37
22:58:50  48  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*40 PRECEDING AND CURRENT ROW)g38
22:58:50  49  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*30 PRECEDING AND CURRENT ROW)g39
22:58:50  50  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)g40
22:58:50  51  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)g41
22:58:50  52  -- Recent CORR()tween scores and gains:
22:58:50  53  ,NVL(sc_corr,0)sc_corr
22:58:50  54  FROM svm6162 s,score_corr c
22:58:50  55  WHERE s.prdate = c.prdate(+)
22:58:50  56  /

Table created.

Elapsed: 00:00:06.32
22:58:56 SQL> 
22:58:56 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:02.36
22:58:59 SQL> 
22:58:59 SQL> -- rpt
22:58:59 SQL> 
22:58:59 SQL> SELECT
22:58:59   2  pair
22:58:59   3  ,trend
22:58:59   4  ,gatt
22:58:59   5  ,COUNT(pair)
22:58:59   6  ,AVG(g6)
22:58:59   7  FROM modsrc
22:58:59   8  GROUP BY pair,trend,gatt
22:58:59   9  ORDER BY pair,trend,gatt
22:58:59  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5030 -.15711251
usd_jpy 	-1 up	      4972 .175119991
usd_jpy 	 1 nup	      5094  -.1567387
usd_jpy 	 1 up	      4499 .184154535
usd_jpy 	 1		72

Elapsed: 00:00:00.02
22:58:59 SQL> 
22:58:59 SQL> 
22:58:59 SQL> SELECT pair,COUNT(pair)FROM svm6102 GROUP BY pair;

PAIR	COUNT(PAIR)
------- -----------
usd_jpy       19667

Elapsed: 00:00:00.84
22:58:59 SQL> 
22:58:59 SQL> SELECT pair,COUNT(pair)FROM modsrc GROUP BY pair;

PAIR	COUNT(PAIR)
------- -----------
usd_jpy       19667

Elapsed: 00:00:00.01
22:58:59 SQL> 
22:58:59 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
