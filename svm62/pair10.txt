
SQL*Plus: Release 11.2.0.1.0 Production on Mon Jan 31 23:00:39 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

23:00:39 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
23:00:39 SQL> 23:00:39 SQL> --
23:00:39 SQL> -- pair10.sql
23:00:39 SQL> --
23:00:39 SQL> 
23:00:39 SQL> -- Creates views and tables needed by SVM.
23:00:39 SQL> 
23:00:39 SQL> 
23:00:39 SQL> CREATE OR REPLACE VIEW svm6102 AS
23:00:39   2  SELECT
23:00:39   3  pair
23:00:39   4  ,ydate
23:00:39   5  ,prdate
23:00:39   6  ,rownum rnum -- acts as t in my time-series
23:00:39   7  ,clse
23:00:39   8  -- Derive a bunch of attributes from clse, the latest price:
23:00:39   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
23:00:39  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
23:00:39  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
23:00:39  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
23:00:39  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
23:00:39  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
23:00:39  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
23:00:39  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
23:00:39  17  --
23:00:39  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
23:00:39  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
23:00:39  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
23:00:39  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
23:00:39  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
23:00:39  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
23:00:39  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
23:00:39  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
23:00:39  26  --
23:00:39  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
23:00:39  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
23:00:39  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
23:00:39  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
23:00:39  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
23:00:39  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
23:00:39  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
23:00:39  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
23:00:39  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
23:00:39  36  FROM di5min WHERE pair = '&1'
23:00:39  37  AND ydate > sysdate - 95
23:00:39  38  ORDER BY ydate
23:00:39  39  /
old  36: FROM di5min WHERE pair = '&1'
new  36: FROM di5min WHERE pair = 'eur_chf'

View created.

Elapsed: 00:00:00.04
23:00:39 SQL> 
23:00:39 SQL> -- rpt
23:00:39 SQL> 
23:00:39 SQL> SELECT
23:00:39   2  pair
23:00:39   3  ,COUNT(pair)
23:00:39   4  ,MIN(clse),MAX(clse)
23:00:39   5  ,MIN(avg6),MAX(avg6)
23:00:39   6  ,MIN(ydate),MAX(ydate)
23:00:39   7  FROM svm6102
23:00:39   8  GROUP BY pair
23:00:39   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_chf       19145 1.24192946 1.38284305 1.24320592 1.37986485 2010-10-28 23:05:00 2011-01-31 22:50:00

Elapsed: 00:00:00.77
23:00:40 SQL> 
23:00:40 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
23:00:40 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.26
23:00:40 SQL> CREATE TABLE svm6122 COMPRESS AS
23:00:40   2  SELECT
23:00:40   3  pair
23:00:40   4  ,ydate
23:00:40   5  ,prdate
23:00:40   6  ,clse
23:00:40   7  -- g6 is important. I want to predict g6:
23:00:40   8  ,ld6 - clse g6
23:00:40   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
23:00:40  10  -- I want more attributes from the ones I derived above:
23:00:40  11  -- clse relation to moving-min
23:00:40  12  ,clse-min4  cm4
23:00:40  13  ,clse-min6  cm6
23:00:40  14  ,clse-min8  cm8
23:00:40  15  ,clse-min10 cm10
23:00:40  16  ,clse-min12 cm12
23:00:40  17  ,clse-min14 cm14
23:00:40  18  ,clse-min16 cm16
23:00:40  19  ,clse-min18 cm18
23:00:40  20  -- clse relation to moving-avg
23:00:40  21  ,clse-avg4  ca4
23:00:40  22  ,clse-avg6  ca6
23:00:40  23  ,clse-avg8  ca8
23:00:40  24  ,clse-avg10 ca10
23:00:40  25  ,clse-avg12 ca12
23:00:40  26  ,clse-avg14 ca14
23:00:40  27  ,clse-avg16 ca16
23:00:40  28  ,clse-avg18 ca18
23:00:40  29  -- clse relation to moving-max
23:00:40  30  ,clse-max4  cx4
23:00:40  31  ,clse-max6  cx6
23:00:40  32  ,clse-max8  cx8
23:00:40  33  ,clse-max10 cx10
23:00:40  34  ,clse-max12 cx12
23:00:40  35  ,clse-max14 cx14
23:00:40  36  ,clse-max16 cx16
23:00:40  37  ,clse-max18 cx18
23:00:40  38  -- Derive more attributes.
23:00:40  39  -- I want to use CORR() here to help SVM see the shape of the series.
23:00:40  40  -- But COVAR_POP is more stable:
23:00:40  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
23:00:40  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
23:00:40  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
23:00:40  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
23:00:40  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
23:00:40  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
23:00:40  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
23:00:40  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
23:00:40  49  -- Derive date related attributes:
23:00:40  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
23:00:40  51  ,0+TO_CHAR(ydate,'D')d
23:00:40  52  ,0+TO_CHAR(ydate,'W')w
23:00:40  53  -- mpm stands for minutes-past-midnight:
23:00:40  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
23:00:40  55  -- mph stands for minutes-past-hour:
23:00:40  56  ,0+TO_CHAR(ydate,'MI')mph
23:00:40  57  FROM svm6102
23:00:40  58  ORDER BY ydate
23:00:40  59  /

Table created.

Elapsed: 00:00:02.14
23:00:42 SQL> 
23:00:42 SQL> -- rpt
23:00:42 SQL> 
23:00:42 SQL> SELECT
23:00:42   2  pair
23:00:42   3  ,COUNT(pair)
23:00:42   4  ,MIN(clse),MAX(clse)
23:00:42   5  ,MIN(ydate),MAX(ydate)
23:00:42   6  FROM svm6122
23:00:42   7  GROUP BY pair
23:00:42   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_chf       19145 1.24192946 1.38284305 2010-10-28 23:05:00 2011-01-31 22:50:00

Elapsed: 00:00:00.04
23:00:42 SQL> 
23:00:42 SQL> -- Prepare for derivation of NTILE based params:
23:00:42 SQL> 
23:00:42 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.26
23:00:43 SQL> CREATE TABLE svm6142 COMPRESS AS
23:00:43   2  SELECT
23:00:43   3  pair
23:00:43   4  ,ydate
23:00:43   5  ,prdate
23:00:43   6  ,clse
23:00:43   7  ,g6
23:00:43   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
23:00:43   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
23:00:43  10  ,CASE WHEN trend IS NULL THEN 1
23:00:43  11  	    WHEN trend =0      THEN 1
23:00:43  12  	    ELSE trend END trend
23:00:43  13  ,cm4
23:00:43  14  ,cm6
23:00:43  15  ,cm8
23:00:43  16  ,cm10
23:00:43  17  ,cm12
23:00:43  18  ,cm14
23:00:43  19  ,cm16
23:00:43  20  ,cm18
23:00:43  21  --
23:00:43  22  ,ca4
23:00:43  23  ,ca6
23:00:43  24  ,ca8
23:00:43  25  ,ca10
23:00:43  26  ,ca12
23:00:43  27  ,ca14
23:00:43  28  ,ca16
23:00:43  29  ,ca18
23:00:43  30  --
23:00:43  31  ,cx4
23:00:43  32  ,cx6
23:00:43  33  ,cx8
23:00:43  34  ,cx10
23:00:43  35  ,cx12
23:00:43  36  ,cx14
23:00:43  37  ,cx16
23:00:43  38  ,cx18
23:00:43  39  --
23:00:43  40  ,crr4
23:00:43  41  ,crr6
23:00:43  42  ,crr8
23:00:43  43  ,crr10
23:00:43  44  ,crr12
23:00:43  45  ,crr14
23:00:43  46  ,crr16
23:00:43  47  ,crr18
23:00:43  48  --
23:00:43  49  ,hh
23:00:43  50  ,d
23:00:43  51  ,w
23:00:43  52  ,mpm
23:00:43  53  ,mph
23:00:43  54  FROM svm6122
23:00:43  55  ORDER BY ydate
23:00:43  56  /

Table created.

Elapsed: 00:00:00.39
23:00:43 SQL> 
23:00:43 SQL> -- rpt
23:00:43 SQL> 
23:00:43 SQL> SELECT
23:00:43   2  pair
23:00:43   3  ,trend
23:00:43   4  ,gatt
23:00:43   5  ,COUNT(pair)
23:00:43   6  ,AVG(g6)
23:00:43   7  FROM svm6142
23:00:43   8  GROUP BY pair,trend,gatt
23:00:43   9  ORDER BY pair,trend,gatt
23:00:43  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_chf 	-1 nup	      6786  -.0023183
eur_chf 	-1 up	      3288 .003712669
eur_chf 	-1		13
eur_chf 	 1 nup	      6196 -.00234048
eur_chf 	 1 up	      2803 .004417164
eur_chf 	 1		59

6 rows selected.

Elapsed: 00:00:00.04
23:00:43 SQL> 
23:00:43 SQL> 
23:00:43 SQL> -- Derive NTILE based params:
23:00:43 SQL> 
23:00:43 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.17
23:00:43 SQL> CREATE TABLE svm6162 COMPRESS AS
23:00:43   2  SELECT
23:00:43   3  pair
23:00:43   4  ,ydate
23:00:43   5  ,prdate
23:00:43   6  ,clse
23:00:43   7  ,g6
23:00:43   8  ,gatt
23:00:43   9  ,gattn
23:00:43  10  ,trend
23:00:43  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
23:00:43  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
23:00:43  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
23:00:43  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
23:00:43  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
23:00:43  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
23:00:43  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
23:00:43  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
23:00:43  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
23:00:43  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
23:00:43  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
23:00:43  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
23:00:43  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
23:00:43  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
23:00:43  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
23:00:43  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
23:00:43  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
23:00:43  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
23:00:43  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
23:00:43  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
23:00:43  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
23:00:43  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
23:00:43  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
23:00:43  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
23:00:43  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
23:00:43  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
23:00:43  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
23:00:43  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
23:00:43  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
23:00:43  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
23:00:43  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
23:00:43  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
23:00:43  43  ,hh  att32
23:00:43  44  ,d   att33
23:00:43  45  ,w   att34
23:00:43  46  ,mpm att35
23:00:43  47  ,mph att36
23:00:43  48  ,trend att37
23:00:43  49  FROM svm6142
23:00:43  50  ORDER BY ydate
23:00:43  51  /

Table created.

Elapsed: 00:00:04.92
23:00:48 SQL> 
23:00:48 SQL> -- rpt
23:00:48 SQL> 
23:00:48 SQL> SELECT
23:00:48   2  pair
23:00:48   3  ,trend
23:00:48   4  ,gatt
23:00:48   5  ,COUNT(pair)
23:00:48   6  ,AVG(g6)
23:00:48   7  FROM svm6162
23:00:48   8  GROUP BY pair,trend,gatt
23:00:48   9  ORDER BY pair,trend,gatt
23:00:48  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_chf 	-1 nup	      6786  -.0023183
eur_chf 	-1 up	      3288 .003712669
eur_chf 	-1		13
eur_chf 	 1 nup	      6196 -.00234048
eur_chf 	 1 up	      2803 .004417164
eur_chf 	 1		59

6 rows selected.

Elapsed: 00:00:00.03
23:00:48 SQL> 
23:00:48 SQL> 
23:00:48 SQL> CREATE OR REPLACE VIEW sc12 AS
23:00:48   2  SELECT
23:00:48   3  m.pair
23:00:48   4  ,m.ydate
23:00:48   5  ,m.prdate
23:00:48   6  ,l.score score_long
23:00:48   7  ,s.score score_short
23:00:48   8  ,m.g6
23:00:48   9  FROM svm62scores l,svm62scores s,svm6162 m
23:00:48  10  WHERE l.targ='gatt'
23:00:48  11  AND   s.targ='gattn'
23:00:48  12  AND l.prdate = s.prdate
23:00:48  13  AND l.prdate = m.prdate
23:00:48  14  -- Speed things up:
23:00:48  15  AND l.pair = '&1'
23:00:48  16  AND s.pair = '&1'
23:00:48  17  /
old  15: AND l.pair = '&1'
new  15: AND l.pair = 'eur_chf'
old  16: AND s.pair = '&1'
new  16: AND s.pair = 'eur_chf'

View created.

Elapsed: 00:00:00.03
23:00:48 SQL> 
23:00:48 SQL> DROP TABLE score_corr;

Table dropped.

Elapsed: 00:00:00.16
23:00:48 SQL> 
23:00:48 SQL> CREATE TABLE score_corr COMPRESS AS
23:00:48   2  SELECT
23:00:48   3  pair
23:00:48   4  -- ,ydate
23:00:48   5  ,prdate
23:00:48   6  -- Find corr() tween score and g6 over 2 day period:
23:00:48   7  ,CORR((score_long - score_short),g6)
23:00:48   8  	OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 2*24*60/5 PRECEDING AND CURRENT ROW)sc_corr
23:00:48   9  FROM sc12
23:00:48  10  /

Table created.

Elapsed: 00:00:00.22
23:00:49 SQL> 
23:00:49 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.28
23:00:49 SQL> 
23:00:49 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.44
23:00:49 SQL> 
23:00:49 SQL> CREATE TABLE modsrc COMPRESS AS
23:00:49   2  SELECT
23:00:49   3  s.pair
23:00:49   4  ,ydate
23:00:49   5  ,s.prdate
23:00:49   6  ,trend
23:00:49   7  ,g6
23:00:49   8  ,gatt
23:00:49   9  ,gattn
23:00:49  10  ,SUM(g6)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g00
23:00:49  11  ,SUM(g6)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g01
23:00:49  12  ,SUM(g6)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g02
23:00:49  13  ,SUM(g6)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g03
23:00:49  14  ,SUM(g6)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g04
23:00:49  15  ,SUM(g6)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g05
23:00:49  16  ,SUM(g6)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g06
23:00:49  17  ,SUM(g6)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g07
23:00:49  18  ,SUM(g6)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g08
23:00:49  19  ,SUM(g6)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g09
23:00:49  20  ,SUM(g6)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g10
23:00:49  21  ,SUM(g6)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g11
23:00:49  22  ,SUM(g6)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g12
23:00:49  23  ,SUM(g6)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g13
23:00:49  24  ,SUM(g6)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g14
23:00:49  25  ,SUM(g6)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g15
23:00:49  26  ,SUM(g6)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g16
23:00:49  27  ,SUM(g6)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g17
23:00:49  28  ,SUM(g6)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g18
23:00:49  29  ,SUM(g6)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g19
23:00:49  30  ,SUM(g6)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g20
23:00:49  31  ,SUM(g6)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g21
23:00:49  32  ,SUM(g6)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g22
23:00:49  33  ,SUM(g6)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g23
23:00:49  34  ,SUM(g6)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g24
23:00:49  35  ,SUM(g6)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g25
23:00:49  36  ,SUM(g6)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g26
23:00:49  37  ,SUM(g6)OVER(PARTITION BY trend,att27 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g27
23:00:49  38  ,SUM(g6)OVER(PARTITION BY trend,att28 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g28
23:00:49  39  ,SUM(g6)OVER(PARTITION BY trend,att29 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g29
23:00:49  40  ,SUM(g6)OVER(PARTITION BY trend,att30 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g30
23:00:49  41  ,SUM(g6)OVER(PARTITION BY trend,att31 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g31
23:00:49  42  ,SUM(g6)OVER(PARTITION BY trend,att32 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g32
23:00:49  43  ,SUM(g6)OVER(PARTITION BY trend,att33 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g33
23:00:49  44  ,SUM(g6)OVER(PARTITION BY trend,att34 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g34
23:00:49  45  ,SUM(g6)OVER(PARTITION BY trend,att35 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g35
23:00:49  46  ,SUM(g6)OVER(PARTITION BY trend,att36 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g36
23:00:49  47  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g37
23:00:49  48  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*40 PRECEDING AND CURRENT ROW)g38
23:00:49  49  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*30 PRECEDING AND CURRENT ROW)g39
23:00:49  50  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)g40
23:00:49  51  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)g41
23:00:49  52  -- Recent CORR()tween scores and gains:
23:00:49  53  ,NVL(sc_corr,0)sc_corr
23:00:49  54  FROM svm6162 s,score_corr c
23:00:49  55  WHERE s.prdate = c.prdate(+)
23:00:49  56  /

Table created.

Elapsed: 00:00:06.08
23:00:55 SQL> 
23:00:55 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:02.32
23:00:58 SQL> 
23:00:58 SQL> -- rpt
23:00:58 SQL> 
23:00:58 SQL> SELECT
23:00:58   2  pair
23:00:58   3  ,trend
23:00:58   4  ,gatt
23:00:58   5  ,COUNT(pair)
23:00:58   6  ,AVG(g6)
23:00:58   7  FROM modsrc
23:00:58   8  GROUP BY pair,trend,gatt
23:00:58   9  ORDER BY pair,trend,gatt
23:00:58  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_chf 	-1 nup	      6786  -.0023183
eur_chf 	-1 up	      3288 .003712669
eur_chf 	-1		13
eur_chf 	 1 nup	      6196 -.00234048
eur_chf 	 1 up	      2803 .004417164
eur_chf 	 1		59

6 rows selected.

Elapsed: 00:00:00.02
23:00:58 SQL> 
23:00:58 SQL> 
23:00:58 SQL> SELECT pair,COUNT(pair)FROM svm6102 GROUP BY pair;

PAIR	COUNT(PAIR)
------- -----------
eur_chf       19145

Elapsed: 00:00:00.75
23:00:58 SQL> 
23:00:58 SQL> SELECT pair,COUNT(pair)FROM modsrc GROUP BY pair;

PAIR	COUNT(PAIR)
------- -----------
eur_chf       19145

Elapsed: 00:00:00.01
23:00:58 SQL> 
23:00:58 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
