
SQL*Plus: Release 11.2.0.1.0 Production on Wed Feb 23 02:12:03 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

02:12:04 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
02:12:04 SQL> 02:12:04 SQL> --
02:12:04 SQL> -- pair10.sql
02:12:04 SQL> --
02:12:04 SQL> 
02:12:04 SQL> -- Creates views and tables needed by SVM.
02:12:04 SQL> 
02:12:04 SQL> 
02:12:04 SQL> CREATE OR REPLACE VIEW svm6102 AS
02:12:04   2  SELECT
02:12:04   3  pair
02:12:04   4  ,ydate
02:12:04   5  ,prdate
02:12:04   6  ,rownum rnum -- acts as t in my time-series
02:12:04   7  ,clse
02:12:04   8  -- Derive a bunch of attributes from clse, the latest price:
02:12:04   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
02:12:04  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
02:12:04  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
02:12:04  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
02:12:04  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
02:12:04  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
02:12:04  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
02:12:04  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
02:12:04  17  --
02:12:04  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
02:12:04  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
02:12:04  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
02:12:04  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
02:12:04  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
02:12:04  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
02:12:04  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
02:12:04  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
02:12:04  26  --
02:12:04  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
02:12:04  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
02:12:04  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
02:12:04  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
02:12:04  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
02:12:04  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
02:12:04  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
02:12:04  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
02:12:04  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
02:12:04  36  FROM di5min WHERE pair = '&1'
02:12:04  37  AND ydate > sysdate - 95
02:12:04  38  ORDER BY ydate
02:12:04  39  /
old  36: FROM di5min WHERE pair = '&1'
new  36: FROM di5min WHERE pair = 'eur_gbp'

View created.

Elapsed: 00:00:00.06
02:12:04 SQL> 
02:12:04 SQL> -- rpt
02:12:04 SQL> 
02:12:04 SQL> SELECT
02:12:04   2  pair
02:12:04   3  ,COUNT(pair)
02:12:04   4  ,MIN(clse),MAX(clse)
02:12:04   5  ,MIN(avg6),MAX(avg6)
02:12:04   6  ,MIN(ydate),MAX(ydate)
02:12:04   7  FROM svm6102
02:12:04   8  GROUP BY pair
02:12:04   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_gbp       19116 .829062716 .867050282 .830048836 .865740025 2010-11-21 20:55:00 2011-02-23 01:55:00

Elapsed: 00:00:00.86
02:12:04 SQL> 
02:12:04 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
02:12:04 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.28
02:12:05 SQL> CREATE TABLE svm6122 COMPRESS AS
02:12:05   2  SELECT
02:12:05   3  pair
02:12:05   4  ,ydate
02:12:05   5  ,prdate
02:12:05   6  ,clse
02:12:05   7  -- g6 is important. I want to predict g6:
02:12:05   8  ,(ld6 - clse)/clse g6
02:12:05   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
02:12:05  10  -- I want more attributes from the ones I derived above:
02:12:05  11  -- clse relation to moving-min
02:12:05  12  ,clse-min4  cm4
02:12:05  13  ,clse-min6  cm6
02:12:05  14  ,clse-min8  cm8
02:12:05  15  ,clse-min10 cm10
02:12:05  16  ,clse-min12 cm12
02:12:05  17  ,clse-min14 cm14
02:12:05  18  ,clse-min16 cm16
02:12:05  19  ,clse-min18 cm18
02:12:05  20  -- clse relation to moving-avg
02:12:05  21  ,clse-avg4  ca4
02:12:05  22  ,clse-avg6  ca6
02:12:05  23  ,clse-avg8  ca8
02:12:05  24  ,clse-avg10 ca10
02:12:05  25  ,clse-avg12 ca12
02:12:05  26  ,clse-avg14 ca14
02:12:05  27  ,clse-avg16 ca16
02:12:05  28  ,clse-avg18 ca18
02:12:05  29  -- clse relation to moving-max
02:12:05  30  ,clse-max4  cx4
02:12:05  31  ,clse-max6  cx6
02:12:05  32  ,clse-max8  cx8
02:12:05  33  ,clse-max10 cx10
02:12:05  34  ,clse-max12 cx12
02:12:05  35  ,clse-max14 cx14
02:12:05  36  ,clse-max16 cx16
02:12:05  37  ,clse-max18 cx18
02:12:05  38  -- Derive more attributes.
02:12:05  39  -- I want to use CORR() here to help SVM see the shape of the series.
02:12:05  40  -- But COVAR_POP is more stable:
02:12:05  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
02:12:05  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
02:12:05  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
02:12:05  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
02:12:05  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
02:12:05  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
02:12:05  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
02:12:05  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
02:12:05  49  -- Derive date related attributes:
02:12:05  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
02:12:05  51  ,0+TO_CHAR(ydate,'D')d
02:12:05  52  ,0+TO_CHAR(ydate,'W')w
02:12:05  53  -- mpm stands for minutes-past-midnight:
02:12:05  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
02:12:05  55  -- mph stands for minutes-past-hour:
02:12:05  56  ,0+TO_CHAR(ydate,'MI')mph
02:12:05  57  FROM svm6102
02:12:05  58  WHERE clse > 0
02:12:05  59  ORDER BY ydate
02:12:05  60  /

Table created.

Elapsed: 00:00:02.39
02:12:07 SQL> 
02:12:07 SQL> -- rpt
02:12:07 SQL> 
02:12:07 SQL> SELECT
02:12:07   2  pair
02:12:07   3  ,COUNT(pair)
02:12:07   4  ,MIN(clse),MAX(clse)
02:12:07   5  ,MIN(ydate),MAX(ydate)
02:12:07   6  FROM svm6122
02:12:07   7  GROUP BY pair
02:12:07   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_gbp       19116 .829062716 .867050282 2010-11-21 20:55:00 2011-02-23 01:55:00

Elapsed: 00:00:00.05
02:12:07 SQL> 
02:12:07 SQL> -- Prepare for derivation of NTILE based params:
02:12:07 SQL> 
02:12:07 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.32
02:12:08 SQL> CREATE TABLE svm6142 COMPRESS AS
02:12:08   2  SELECT
02:12:08   3  pair
02:12:08   4  ,ydate
02:12:08   5  ,prdate
02:12:08   6  ,clse
02:12:08   7  ,g6
02:12:08   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
02:12:08   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
02:12:08  10  ,CASE WHEN trend IS NULL THEN 1
02:12:08  11  	    WHEN trend =0      THEN 1
02:12:08  12  	    ELSE trend END trend
02:12:08  13  ,cm4
02:12:08  14  ,cm6
02:12:08  15  ,cm8
02:12:08  16  ,cm10
02:12:08  17  ,cm12
02:12:08  18  ,cm14
02:12:08  19  ,cm16
02:12:08  20  ,cm18
02:12:08  21  --
02:12:08  22  ,ca4
02:12:08  23  ,ca6
02:12:08  24  ,ca8
02:12:08  25  ,ca10
02:12:08  26  ,ca12
02:12:08  27  ,ca14
02:12:08  28  ,ca16
02:12:08  29  ,ca18
02:12:08  30  --
02:12:08  31  ,cx4
02:12:08  32  ,cx6
02:12:08  33  ,cx8
02:12:08  34  ,cx10
02:12:08  35  ,cx12
02:12:08  36  ,cx14
02:12:08  37  ,cx16
02:12:08  38  ,cx18
02:12:08  39  --
02:12:08  40  ,crr4
02:12:08  41  ,crr6
02:12:08  42  ,crr8
02:12:08  43  ,crr10
02:12:08  44  ,crr12
02:12:08  45  ,crr14
02:12:08  46  ,crr16
02:12:08  47  ,crr18
02:12:08  48  --
02:12:08  49  ,hh
02:12:08  50  ,d
02:12:08  51  ,w
02:12:08  52  ,mpm
02:12:08  53  ,mph
02:12:08  54  FROM svm6122
02:12:08  55  ORDER BY ydate
02:12:08  56  /

Table created.

Elapsed: 00:00:00.43
02:12:08 SQL> 
02:12:08 SQL> -- rpt
02:12:08 SQL> 
02:12:08 SQL> SELECT
02:12:08   2  pair
02:12:08   3  ,trend
02:12:08   4  ,gatt
02:12:08   5  ,COUNT(pair)
02:12:08   6  ,AVG(g6)
02:12:08   7  FROM svm6142
02:12:08   8  GROUP BY pair,trend,gatt
02:12:08   9  ORDER BY pair,trend,gatt
02:12:08  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_gbp 	-1 nup	      7248 -.00124662
eur_gbp 	-1 up	      2564 .003147636
eur_gbp 	-1		56
eur_gbp 	 1 nup	      6541 -.00131961
eur_gbp 	 1 up	      2691 .003201661
eur_gbp 	 1		16

6 rows selected.

Elapsed: 00:00:00.05
02:12:08 SQL> 
02:12:08 SQL> 
02:12:08 SQL> -- Derive NTILE based params:
02:12:08 SQL> 
02:12:08 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.16
02:12:08 SQL> CREATE TABLE svm6162 COMPRESS AS
02:12:08   2  SELECT
02:12:08   3  pair
02:12:08   4  ,ydate
02:12:08   5  ,prdate
02:12:08   6  ,clse
02:12:08   7  ,g6
02:12:08   8  ,gatt
02:12:08   9  ,gattn
02:12:08  10  ,trend
02:12:08  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
02:12:08  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
02:12:08  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
02:12:08  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
02:12:08  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
02:12:08  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
02:12:08  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
02:12:08  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
02:12:08  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
02:12:08  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
02:12:08  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
02:12:08  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
02:12:08  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
02:12:08  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
02:12:08  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
02:12:08  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
02:12:08  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
02:12:08  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
02:12:08  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
02:12:08  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
02:12:08  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
02:12:08  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
02:12:08  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
02:12:08  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
02:12:08  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
02:12:08  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
02:12:08  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
02:12:08  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
02:12:08  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
02:12:08  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
02:12:08  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
02:12:08  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
02:12:08  43  ,hh  att32
02:12:08  44  ,d   att33
02:12:08  45  ,w   att34
02:12:08  46  ,mpm att35
02:12:08  47  ,mph att36
02:12:08  48  ,trend att37
02:12:08  49  FROM svm6142
02:12:08  50  ORDER BY ydate
02:12:08  51  /
