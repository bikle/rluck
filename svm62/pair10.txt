
SQL*Plus: Release 11.2.0.1.0 Production on Sun Jan 9 02:39:03 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

02:39:04 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
02:39:04 SQL> 02:39:04 SQL> --
02:39:04 SQL> -- pair10.sql
02:39:04 SQL> --
02:39:04 SQL> 
02:39:04 SQL> -- Creates views and tables needed by SVM.
02:39:04 SQL> 
02:39:04 SQL> 
02:39:04 SQL> CREATE OR REPLACE VIEW svm6102 AS
02:39:04   2  SELECT
02:39:04   3  pair
02:39:04   4  ,ydate
02:39:04   5  ,prdate
02:39:04   6  ,rownum rnum -- acts as t in my time-series
02:39:04   7  ,clse
02:39:04   8  -- Derive a bunch of attributes from clse, the latest price:
02:39:04   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
02:39:04  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
02:39:04  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
02:39:04  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
02:39:04  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
02:39:04  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
02:39:04  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
02:39:04  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
02:39:04  17  --
02:39:04  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
02:39:04  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
02:39:04  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
02:39:04  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
02:39:04  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
02:39:04  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
02:39:04  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
02:39:04  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
02:39:04  26  --
02:39:04  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
02:39:04  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
02:39:04  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
02:39:04  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
02:39:04  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
02:39:04  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
02:39:04  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
02:39:04  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
02:39:04  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
02:39:04  36  FROM di5min WHERE pair = '&1'
02:39:04  37  AND ydate > sysdate - 95
02:39:04  38  ORDER BY ydate
02:39:04  39  /
old  36: FROM di5min WHERE pair = '&1'
new  36: FROM di5min WHERE pair = 'usd_cad'

View created.

Elapsed: 00:00:00.73
02:39:04 SQL> 
02:39:04 SQL> -- rpt
02:39:04 SQL> 
02:39:04 SQL> SELECT
02:39:04   2  pair
02:39:04   3  ,COUNT(pair)
02:39:04   4  ,MIN(clse),MAX(clse)
02:39:04   5  ,MIN(avg6),MAX(avg6)
02:39:04   6  ,MIN(ydate),MAX(ydate)
02:39:04   7  FROM svm6102
02:39:04   8  GROUP BY pair
02:39:04   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_cad       19465    .988925	   1.0355  .99060274 1.03282877 2010-10-06 02:40:01 2011-01-07 21:55:00

Elapsed: 00:00:01.61
02:39:06 SQL> 
02:39:06 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
02:39:06 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:01.11
02:39:07 SQL> CREATE TABLE svm6122 COMPRESS AS
02:39:07   2  SELECT
02:39:07   3  pair
02:39:07   4  ,ydate
02:39:07   5  ,prdate
02:39:07   6  ,clse
02:39:07   7  -- g6 is important. I want to predict g6:
02:39:07   8  ,ld6 - clse g6
02:39:07   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
02:39:07  10  -- I want more attributes from the ones I derived above:
02:39:07  11  -- clse relation to moving-min
02:39:07  12  ,clse-min4  cm4
02:39:07  13  ,clse-min6  cm6
02:39:07  14  ,clse-min8  cm8
02:39:07  15  ,clse-min10 cm10
02:39:07  16  ,clse-min12 cm12
02:39:07  17  ,clse-min14 cm14
02:39:07  18  ,clse-min16 cm16
02:39:07  19  ,clse-min18 cm18
02:39:07  20  -- clse relation to moving-avg
02:39:07  21  ,clse-avg4  ca4
02:39:07  22  ,clse-avg6  ca6
02:39:07  23  ,clse-avg8  ca8
02:39:07  24  ,clse-avg10 ca10
02:39:07  25  ,clse-avg12 ca12
02:39:07  26  ,clse-avg14 ca14
02:39:07  27  ,clse-avg16 ca16
02:39:07  28  ,clse-avg18 ca18
02:39:07  29  -- clse relation to moving-max
02:39:07  30  ,clse-max4  cx4
02:39:07  31  ,clse-max6  cx6
02:39:07  32  ,clse-max8  cx8
02:39:07  33  ,clse-max10 cx10
02:39:07  34  ,clse-max12 cx12
02:39:07  35  ,clse-max14 cx14
02:39:07  36  ,clse-max16 cx16
02:39:07  37  ,clse-max18 cx18
02:39:07  38  -- Derive more attributes.
02:39:07  39  -- I want to use CORR() here to help SVM see the shape of the series.
02:39:07  40  -- But COVAR_POP is more stable:
02:39:07  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
02:39:07  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
02:39:07  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
02:39:07  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
02:39:07  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
02:39:07  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
02:39:07  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
02:39:07  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
02:39:07  49  -- Derive date related attributes:
02:39:07  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
02:39:07  51  ,0+TO_CHAR(ydate,'D')d
02:39:07  52  ,0+TO_CHAR(ydate,'W')w
02:39:07  53  -- mpm stands for minutes-past-midnight:
02:39:07  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
02:39:07  55  -- mph stands for minutes-past-hour:
02:39:07  56  ,0+TO_CHAR(ydate,'MI')mph
02:39:07  57  FROM svm6102
02:39:07  58  ORDER BY ydate
02:39:07  59  /

Table created.

Elapsed: 00:00:02.22
02:39:09 SQL> 
02:39:09 SQL> -- rpt
02:39:09 SQL> 
02:39:09 SQL> SELECT
02:39:09   2  pair
02:39:09   3  ,COUNT(pair)
02:39:09   4  ,MIN(clse),MAX(clse)
02:39:09   5  ,MIN(ydate),MAX(ydate)
02:39:09   6  FROM svm6122
02:39:09   7  GROUP BY pair
02:39:09   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_cad       19465    .988925	   1.0355 2010-10-06 02:40:01 2011-01-07 21:55:00

Elapsed: 00:00:00.04
02:39:09 SQL> 
02:39:09 SQL> -- Prepare for derivation of NTILE based params:
02:39:09 SQL> 
02:39:09 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.07
02:39:09 SQL> CREATE TABLE svm6142 COMPRESS AS
02:39:09   2  SELECT
02:39:09   3  pair
02:39:09   4  ,ydate
02:39:09   5  ,prdate
02:39:09   6  ,clse
02:39:09   7  ,g6
02:39:09   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
02:39:09   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
02:39:09  10  ,CASE WHEN trend IS NULL THEN 1
02:39:09  11  	    WHEN trend =0      THEN 1
02:39:09  12  	    ELSE trend END trend
02:39:09  13  ,cm4
02:39:09  14  ,cm6
02:39:09  15  ,cm8
02:39:09  16  ,cm10
02:39:09  17  ,cm12
02:39:09  18  ,cm14
02:39:09  19  ,cm16
02:39:09  20  ,cm18
02:39:09  21  --
02:39:09  22  ,ca4
02:39:09  23  ,ca6
02:39:09  24  ,ca8
02:39:09  25  ,ca10
02:39:09  26  ,ca12
02:39:09  27  ,ca14
02:39:09  28  ,ca16
02:39:09  29  ,ca18
02:39:09  30  --
02:39:09  31  ,cx4
02:39:09  32  ,cx6
02:39:09  33  ,cx8
02:39:09  34  ,cx10
02:39:09  35  ,cx12
02:39:09  36  ,cx14
02:39:09  37  ,cx16
02:39:09  38  ,cx18
02:39:09  39  --
02:39:09  40  ,crr4
02:39:09  41  ,crr6
02:39:09  42  ,crr8
02:39:09  43  ,crr10
02:39:09  44  ,crr12
02:39:09  45  ,crr14
02:39:09  46  ,crr16
02:39:09  47  ,crr18
02:39:09  48  --
02:39:09  49  ,hh
02:39:09  50  ,d
02:39:09  51  ,w
02:39:09  52  ,mpm
02:39:09  53  ,mph
02:39:09  54  FROM svm6122
02:39:09  55  ORDER BY ydate
02:39:09  56  /

Table created.

Elapsed: 00:00:00.36
02:39:10 SQL> 
02:39:10 SQL> -- rpt
02:39:10 SQL> 
02:39:10 SQL> SELECT
02:39:10   2  pair
02:39:10   3  ,trend
02:39:10   4  ,gatt
02:39:10   5  ,COUNT(pair)
02:39:10   6  ,AVG(g6)
02:39:10   7  FROM svm6142
02:39:10   8  GROUP BY pair,trend,gatt
02:39:10   9  ORDER BY pair,trend,gatt
02:39:10  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7117 -.00121963
usd_cad 	-1 up	      3153 .003044163
usd_cad 	-1		25
usd_cad 	 1 nup	      6720  -.0016634
usd_cad 	 1 up	      2403 .003642778
usd_cad 	 1		47

6 rows selected.

Elapsed: 00:00:00.04
02:39:10 SQL> 
02:39:10 SQL> 
02:39:10 SQL> -- Derive NTILE based params:
02:39:10 SQL> 
02:39:10 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.05
02:39:10 SQL> CREATE TABLE svm6162 COMPRESS AS
02:39:10   2  SELECT
02:39:10   3  pair
02:39:10   4  ,ydate
02:39:10   5  ,prdate
02:39:10   6  ,clse
02:39:10   7  ,g6
02:39:10   8  ,gatt
02:39:10   9  ,gattn
02:39:10  10  ,trend
02:39:10  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
02:39:10  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
02:39:10  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
02:39:10  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
02:39:10  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
02:39:10  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
02:39:10  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
02:39:10  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
02:39:10  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
02:39:10  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
02:39:10  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
02:39:10  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
02:39:10  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
02:39:10  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
02:39:10  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
02:39:10  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
02:39:10  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
02:39:10  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
02:39:10  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
02:39:10  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
02:39:10  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
02:39:10  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
02:39:10  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
02:39:10  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
02:39:10  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
02:39:10  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
02:39:10  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
02:39:10  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
02:39:10  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
02:39:10  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
02:39:10  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
02:39:10  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
02:39:10  43  ,hh  att32
02:39:10  44  ,d   att33
02:39:10  45  ,w   att34
02:39:10  46  ,mpm att35
02:39:10  47  ,mph att36
02:39:10  48  ,trend att37
02:39:10  49  FROM svm6142
02:39:10  50  ORDER BY ydate
02:39:10  51  /

Table created.

Elapsed: 00:00:04.74
02:39:15 SQL> 
02:39:15 SQL> -- rpt
02:39:15 SQL> 
02:39:15 SQL> SELECT
02:39:15   2  pair
02:39:15   3  ,trend
02:39:15   4  ,gatt
02:39:15   5  ,COUNT(pair)
02:39:15   6  ,AVG(g6)
02:39:15   7  FROM svm6162
02:39:15   8  GROUP BY pair,trend,gatt
02:39:15   9  ORDER BY pair,trend,gatt
02:39:15  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7117 -.00121963
usd_cad 	-1 up	      3153 .003044163
usd_cad 	-1		25
usd_cad 	 1 nup	      6720  -.0016634
usd_cad 	 1 up	      2403 .003642778
usd_cad 	 1		47

6 rows selected.

Elapsed: 00:00:00.03
02:39:15 SQL> 
02:39:15 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.07
02:39:15 SQL> 
02:39:15 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.46
02:39:15 SQL> 
02:39:15 SQL> CREATE TABLE modsrc COMPRESS AS
02:39:15   2  SELECT
02:39:15   3  pair
02:39:15   4  ,ydate
02:39:15   5  ,prdate
02:39:15   6  ,trend
02:39:15   7  ,g6
02:39:15   8  ,gatt
02:39:15   9  ,gattn
02:39:15  10  ,SUM(g6)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g00
02:39:15  11  ,SUM(g6)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g01
02:39:15  12  ,SUM(g6)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g02
02:39:15  13  ,SUM(g6)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g03
02:39:15  14  ,SUM(g6)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g04
02:39:15  15  ,SUM(g6)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g05
02:39:15  16  ,SUM(g6)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g06
02:39:15  17  ,SUM(g6)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g07
02:39:15  18  ,SUM(g6)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g08
02:39:15  19  ,SUM(g6)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g09
02:39:15  20  ,SUM(g6)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g10
02:39:15  21  ,SUM(g6)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g11
02:39:15  22  ,SUM(g6)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g12
02:39:15  23  ,SUM(g6)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g13
02:39:15  24  ,SUM(g6)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g14
02:39:15  25  ,SUM(g6)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g15
02:39:15  26  ,SUM(g6)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g16
02:39:15  27  ,SUM(g6)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g17
02:39:15  28  ,SUM(g6)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g18
02:39:15  29  ,SUM(g6)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g19
02:39:15  30  ,SUM(g6)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g20
02:39:15  31  ,SUM(g6)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g21
02:39:15  32  ,SUM(g6)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g22
02:39:15  33  ,SUM(g6)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g23
02:39:15  34  ,SUM(g6)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g24
02:39:15  35  ,SUM(g6)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g25
02:39:15  36  ,SUM(g6)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g26
02:39:15  37  ,SUM(g6)OVER(PARTITION BY trend,att27 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g27
02:39:15  38  ,SUM(g6)OVER(PARTITION BY trend,att28 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g28
02:39:15  39  ,SUM(g6)OVER(PARTITION BY trend,att29 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g29
02:39:15  40  ,SUM(g6)OVER(PARTITION BY trend,att30 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g30
02:39:15  41  ,SUM(g6)OVER(PARTITION BY trend,att31 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g31
02:39:15  42  ,SUM(g6)OVER(PARTITION BY trend,att32 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g32
02:39:15  43  ,SUM(g6)OVER(PARTITION BY trend,att33 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g33
02:39:15  44  ,SUM(g6)OVER(PARTITION BY trend,att34 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g34
02:39:15  45  ,SUM(g6)OVER(PARTITION BY trend,att35 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g35
02:39:15  46  ,SUM(g6)OVER(PARTITION BY trend,att36 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g36
02:39:15  47  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g37
02:39:15  48  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*40 PRECEDING AND CURRENT ROW)g38
02:39:15  49  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*30 PRECEDING AND CURRENT ROW)g39
02:39:15  50  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)g40
02:39:15  51  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)g41
02:39:15  52  FROM svm6162
02:39:15  53  /

Table created.

Elapsed: 00:00:05.77
02:39:21 SQL> 
02:39:21 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:02.05
02:39:23 SQL> 
02:39:23 SQL> -- rpt
02:39:23 SQL> 
02:39:23 SQL> SELECT
02:39:23   2  pair
02:39:23   3  ,trend
02:39:23   4  ,gatt
02:39:23   5  ,COUNT(pair)
02:39:23   6  ,AVG(g6)
02:39:23   7  FROM modsrc
02:39:23   8  GROUP BY pair,trend,gatt
02:39:23   9  ORDER BY pair,trend,gatt
02:39:23  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7117 -.00121963
usd_cad 	-1 up	      3153 .003044163
usd_cad 	-1		25
usd_cad 	 1 nup	      6720  -.0016634
usd_cad 	 1 up	      2403 .003642778
usd_cad 	 1		47

6 rows selected.

Elapsed: 00:00:00.02
02:39:23 SQL> 
02:39:23 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
