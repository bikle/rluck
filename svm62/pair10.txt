
SQL*Plus: Release 11.2.0.1.0 Production on Tue Feb 1 18:18:25 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

18:18:25 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
18:18:25 SQL> 18:18:25 SQL> --
18:18:25 SQL> -- pair10.sql
18:18:25 SQL> --
18:18:25 SQL> 
18:18:25 SQL> -- Creates views and tables needed by SVM.
18:18:25 SQL> 
18:18:25 SQL> 
18:18:25 SQL> CREATE OR REPLACE VIEW svm6102 AS
18:18:25   2  SELECT
18:18:25   3  pair
18:18:25   4  ,ydate
18:18:25   5  ,prdate
18:18:25   6  ,rownum rnum -- acts as t in my time-series
18:18:25   7  ,clse
18:18:25   8  -- Derive a bunch of attributes from clse, the latest price:
18:18:25   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
18:18:25  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
18:18:25  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
18:18:25  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
18:18:25  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
18:18:25  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
18:18:25  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
18:18:25  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
18:18:25  17  --
18:18:25  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
18:18:25  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
18:18:25  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
18:18:25  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
18:18:25  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
18:18:25  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
18:18:25  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
18:18:25  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
18:18:25  26  --
18:18:25  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
18:18:25  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
18:18:25  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
18:18:25  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
18:18:25  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
18:18:25  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
18:18:25  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
18:18:25  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
18:18:25  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
18:18:25  36  FROM di5min WHERE pair = '&1'
18:18:25  37  AND ydate > sysdate - 95
18:18:25  38  ORDER BY ydate
18:18:25  39  /
old  36: FROM di5min WHERE pair = '&1'
new  36: FROM di5min WHERE pair = 'eur_gbp'

View created.

Elapsed: 00:00:00.06
18:18:25 SQL> 
18:18:25 SQL> -- rpt
18:18:25 SQL> 
18:18:25 SQL> SELECT
18:18:25   2  pair
18:18:25   3  ,COUNT(pair)
18:18:25   4  ,MIN(clse),MAX(clse)
18:18:25   5  ,MIN(avg6),MAX(avg6)
18:18:25   6  ,MIN(ydate),MAX(ydate)
18:18:25   7  FROM svm6102
18:18:25   8  GROUP BY pair
18:18:25   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_gbp       19144 .829062716 .881241482 .830048836 .878376317 2010-10-29 18:20:00 2011-02-01 18:05:00

Elapsed: 00:00:00.88
18:18:26 SQL> 
18:18:26 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
18:18:26 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.39
18:18:26 SQL> CREATE TABLE svm6122 COMPRESS AS
18:18:26   2  SELECT
18:18:26   3  pair
18:18:26   4  ,ydate
18:18:26   5  ,prdate
18:18:26   6  ,clse
18:18:26   7  -- g6 is important. I want to predict g6:
18:18:26   8  ,ld6 - clse g6
18:18:26   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
18:18:26  10  -- I want more attributes from the ones I derived above:
18:18:26  11  -- clse relation to moving-min
18:18:26  12  ,clse-min4  cm4
18:18:26  13  ,clse-min6  cm6
18:18:26  14  ,clse-min8  cm8
18:18:26  15  ,clse-min10 cm10
18:18:26  16  ,clse-min12 cm12
18:18:26  17  ,clse-min14 cm14
18:18:26  18  ,clse-min16 cm16
18:18:26  19  ,clse-min18 cm18
18:18:26  20  -- clse relation to moving-avg
18:18:26  21  ,clse-avg4  ca4
18:18:26  22  ,clse-avg6  ca6
18:18:26  23  ,clse-avg8  ca8
18:18:26  24  ,clse-avg10 ca10
18:18:26  25  ,clse-avg12 ca12
18:18:26  26  ,clse-avg14 ca14
18:18:26  27  ,clse-avg16 ca16
18:18:26  28  ,clse-avg18 ca18
18:18:26  29  -- clse relation to moving-max
18:18:26  30  ,clse-max4  cx4
18:18:26  31  ,clse-max6  cx6
18:18:26  32  ,clse-max8  cx8
18:18:26  33  ,clse-max10 cx10
18:18:26  34  ,clse-max12 cx12
18:18:26  35  ,clse-max14 cx14
18:18:26  36  ,clse-max16 cx16
18:18:26  37  ,clse-max18 cx18
18:18:26  38  -- Derive more attributes.
18:18:26  39  -- I want to use CORR() here to help SVM see the shape of the series.
18:18:26  40  -- But COVAR_POP is more stable:
18:18:26  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
18:18:26  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
18:18:26  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
18:18:26  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
18:18:26  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
18:18:26  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
18:18:26  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
18:18:26  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
18:18:26  49  -- Derive date related attributes:
18:18:26  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
18:18:26  51  ,0+TO_CHAR(ydate,'D')d
18:18:26  52  ,0+TO_CHAR(ydate,'W')w
18:18:26  53  -- mpm stands for minutes-past-midnight:
18:18:26  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
18:18:26  55  -- mph stands for minutes-past-hour:
18:18:26  56  ,0+TO_CHAR(ydate,'MI')mph
18:18:26  57  FROM svm6102
18:18:26  58  ORDER BY ydate
18:18:26  59  /

Table created.

Elapsed: 00:00:02.42
18:18:29 SQL> 
18:18:29 SQL> -- rpt
18:18:29 SQL> 
18:18:29 SQL> SELECT
18:18:29   2  pair
18:18:29   3  ,COUNT(pair)
18:18:29   4  ,MIN(clse),MAX(clse)
18:18:29   5  ,MIN(ydate),MAX(ydate)
18:18:29   6  FROM svm6122
18:18:29   7  GROUP BY pair
18:18:29   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_gbp       19144 .829062716 .881241482 2010-10-29 18:20:00 2011-02-01 18:05:00

Elapsed: 00:00:00.05
18:18:29 SQL> 
18:18:29 SQL> -- Prepare for derivation of NTILE based params:
18:18:29 SQL> 
18:18:29 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.33
18:18:29 SQL> CREATE TABLE svm6142 COMPRESS AS
18:18:29   2  SELECT
18:18:29   3  pair
18:18:29   4  ,ydate
18:18:29   5  ,prdate
18:18:29   6  ,clse
18:18:29   7  ,g6
18:18:29   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
18:18:29   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
18:18:29  10  ,CASE WHEN trend IS NULL THEN 1
18:18:29  11  	    WHEN trend =0      THEN 1
18:18:29  12  	    ELSE trend END trend
18:18:29  13  ,cm4
18:18:29  14  ,cm6
18:18:29  15  ,cm8
18:18:29  16  ,cm10
18:18:29  17  ,cm12
18:18:29  18  ,cm14
18:18:29  19  ,cm16
18:18:29  20  ,cm18
18:18:29  21  --
18:18:29  22  ,ca4
18:18:29  23  ,ca6
18:18:29  24  ,ca8
18:18:29  25  ,ca10
18:18:29  26  ,ca12
18:18:29  27  ,ca14
18:18:29  28  ,ca16
18:18:29  29  ,ca18
18:18:29  30  --
18:18:29  31  ,cx4
18:18:29  32  ,cx6
18:18:29  33  ,cx8
18:18:29  34  ,cx10
18:18:29  35  ,cx12
18:18:29  36  ,cx14
18:18:29  37  ,cx16
18:18:29  38  ,cx18
18:18:29  39  --
18:18:29  40  ,crr4
18:18:29  41  ,crr6
18:18:29  42  ,crr8
18:18:29  43  ,crr10
18:18:29  44  ,crr12
18:18:29  45  ,crr14
18:18:29  46  ,crr16
18:18:29  47  ,crr18
18:18:29  48  --
18:18:29  49  ,hh
18:18:29  50  ,d
18:18:29  51  ,w
18:18:29  52  ,mpm
18:18:29  53  ,mph
18:18:29  54  FROM svm6122
18:18:29  55  ORDER BY ydate
18:18:29  56  /

Table created.

Elapsed: 00:00:00.42
18:18:29 SQL> 
18:18:29 SQL> -- rpt
18:18:29 SQL> 
18:18:29 SQL> SELECT
18:18:29   2  pair
18:18:29   3  ,trend
18:18:29   4  ,gatt
18:18:29   5  ,COUNT(pair)
18:18:29   6  ,AVG(g6)
18:18:29   7  FROM svm6142
18:18:29   8  GROUP BY pair,trend,gatt
18:18:29   9  ORDER BY pair,trend,gatt
18:18:29  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_gbp 	-1 nup	      7363 -.00097098
eur_gbp 	-1 up	      2456 .002763811
eur_gbp 	-1		30
eur_gbp 	 1 nup	      6740 -.00123378
eur_gbp 	 1 up	      2513 .003032599
eur_gbp 	 1		42

6 rows selected.

Elapsed: 00:00:00.05
18:18:29 SQL> 
18:18:29 SQL> 
18:18:29 SQL> -- Derive NTILE based params:
18:18:29 SQL> 
18:18:29 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.17
18:18:30 SQL> CREATE TABLE svm6162 COMPRESS AS
18:18:30   2  SELECT
18:18:30   3  pair
18:18:30   4  ,ydate
18:18:30   5  ,prdate
18:18:30   6  ,clse
18:18:30   7  ,g6
18:18:30   8  ,gatt
18:18:30   9  ,gattn
18:18:30  10  ,trend
18:18:30  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
18:18:30  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
18:18:30  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
18:18:30  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
18:18:30  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
18:18:30  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
18:18:30  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
18:18:30  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
18:18:30  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
18:18:30  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
18:18:30  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
18:18:30  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
18:18:30  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
18:18:30  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
18:18:30  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
18:18:30  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
18:18:30  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
18:18:30  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
18:18:30  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
18:18:30  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
18:18:30  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
18:18:30  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
18:18:30  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
18:18:30  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
18:18:30  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
18:18:30  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
18:18:30  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
18:18:30  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
18:18:30  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
18:18:30  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
18:18:30  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
18:18:30  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
18:18:30  43  ,hh  att32
18:18:30  44  ,d   att33
18:18:30  45  ,w   att34
18:18:30  46  ,mpm att35
18:18:30  47  ,mph att36
18:18:30  48  ,trend att37
18:18:30  49  FROM svm6142
18:18:30  50  ORDER BY ydate
18:18:30  51  /

Table created.

Elapsed: 00:00:06.18
18:18:36 SQL> 
18:18:36 SQL> -- rpt
18:18:36 SQL> 
18:18:36 SQL> SELECT
18:18:36   2  pair
18:18:36   3  ,trend
18:18:36   4  ,gatt
18:18:36   5  ,COUNT(pair)
18:18:36   6  ,AVG(g6)
18:18:36   7  FROM svm6162
18:18:36   8  GROUP BY pair,trend,gatt
18:18:36   9  ORDER BY pair,trend,gatt
18:18:36  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_gbp 	-1 nup	      7363 -.00097098
eur_gbp 	-1 up	      2456 .002763811
eur_gbp 	-1		30
eur_gbp 	 1 nup	      6740 -.00123378
eur_gbp 	 1 up	      2513 .003032599
eur_gbp 	 1		42

6 rows selected.

Elapsed: 00:00:00.03
18:18:36 SQL> 
18:18:36 SQL> 
18:18:36 SQL> CREATE OR REPLACE VIEW sc12 AS
18:18:36   2  SELECT
18:18:36   3  m.pair
18:18:36   4  ,m.ydate
18:18:36   5  ,m.prdate
18:18:36   6  ,l.score score_long
18:18:36   7  ,s.score score_short
18:18:36   8  ,m.g6
18:18:36   9  FROM svm62scores l,svm62scores s,svm6162 m
18:18:36  10  WHERE l.targ='gatt'
18:18:36  11  AND   s.targ='gattn'
18:18:36  12  AND l.prdate = s.prdate
18:18:36  13  AND l.prdate = m.prdate
18:18:36  14  -- Speed things up:
18:18:36  15  AND l.pair = '&1'
18:18:36  16  AND s.pair = '&1'
18:18:36  17  /
old  15: AND l.pair = '&1'
new  15: AND l.pair = 'eur_gbp'
old  16: AND s.pair = '&1'
new  16: AND s.pair = 'eur_gbp'

View created.

Elapsed: 00:00:00.22
18:18:36 SQL> 
18:18:36 SQL> DROP TABLE score_corr;

Table dropped.

Elapsed: 00:00:01.35
18:18:37 SQL> 
18:18:37 SQL> CREATE TABLE score_corr COMPRESS AS
18:18:37   2  SELECT
18:18:37   3  pair
18:18:37   4  -- ,ydate
18:18:37   5  ,prdate
18:18:37   6  -- Find corr() tween score and g6 over 2 day period:
18:18:37   7  ,CORR((score_long - score_short),g6)
18:18:37   8  	OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 2*24*60/5 PRECEDING AND CURRENT ROW)sc_corr
18:18:37   9  FROM sc12
18:18:37  10  /

Table created.

Elapsed: 00:00:00.29
18:18:38 SQL> 
18:18:38 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:01.23
18:18:39 SQL> 
18:18:39 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.67
18:18:40 SQL> 
18:18:40 SQL> CREATE TABLE modsrc COMPRESS AS
18:18:40   2  SELECT
18:18:40   3  s.pair
18:18:40   4  ,ydate
18:18:40   5  ,s.prdate
18:18:40   6  ,trend
18:18:40   7  ,g6
18:18:40   8  ,gatt
18:18:40   9  ,gattn
18:18:40  10  ,SUM(g6)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g00
18:18:40  11  ,SUM(g6)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g01
18:18:40  12  ,SUM(g6)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g02
18:18:40  13  ,SUM(g6)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g03
18:18:40  14  ,SUM(g6)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g04
18:18:40  15  ,SUM(g6)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g05
18:18:40  16  ,SUM(g6)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g06
18:18:40  17  ,SUM(g6)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g07
18:18:40  18  ,SUM(g6)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g08
18:18:40  19  ,SUM(g6)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g09
18:18:40  20  ,SUM(g6)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g10
18:18:40  21  ,SUM(g6)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g11
18:18:40  22  ,SUM(g6)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g12
18:18:40  23  ,SUM(g6)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g13
18:18:40  24  ,SUM(g6)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g14
18:18:40  25  ,SUM(g6)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g15
18:18:40  26  ,SUM(g6)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g16
18:18:40  27  ,SUM(g6)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g17
18:18:40  28  ,SUM(g6)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g18
18:18:40  29  ,SUM(g6)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g19
18:18:40  30  ,SUM(g6)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g20
18:18:40  31  ,SUM(g6)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g21
18:18:40  32  ,SUM(g6)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g22
18:18:40  33  ,SUM(g6)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g23
18:18:40  34  ,SUM(g6)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g24
18:18:40  35  ,SUM(g6)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g25
18:18:40  36  ,SUM(g6)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g26
18:18:40  37  ,SUM(g6)OVER(PARTITION BY trend,att27 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g27
18:18:40  38  ,SUM(g6)OVER(PARTITION BY trend,att28 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g28
18:18:40  39  ,SUM(g6)OVER(PARTITION BY trend,att29 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g29
18:18:40  40  ,SUM(g6)OVER(PARTITION BY trend,att30 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g30
18:18:40  41  ,SUM(g6)OVER(PARTITION BY trend,att31 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g31
18:18:40  42  ,SUM(g6)OVER(PARTITION BY trend,att32 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g32
18:18:40  43  ,SUM(g6)OVER(PARTITION BY trend,att33 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g33
18:18:40  44  ,SUM(g6)OVER(PARTITION BY trend,att34 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g34
18:18:40  45  ,SUM(g6)OVER(PARTITION BY trend,att35 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g35
18:18:40  46  ,SUM(g6)OVER(PARTITION BY trend,att36 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g36
18:18:40  47  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g37
18:18:40  48  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*40 PRECEDING AND CURRENT ROW)g38
18:18:40  49  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*30 PRECEDING AND CURRENT ROW)g39
18:18:40  50  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)g40
18:18:40  51  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)g41
18:18:40  52  -- Recent CORR()tween scores and gains:
18:18:40  53  ,NVL(sc_corr,0)sc_corr
18:18:40  54  FROM svm6162 s,score_corr c
18:18:40  55  WHERE s.prdate = c.prdate(+)
18:18:40  56  /

Table created.

Elapsed: 00:00:06.81
18:18:46 SQL> 
18:18:46 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:03.14
18:18:49 SQL> 
18:18:49 SQL> -- rpt
18:18:49 SQL> 
18:18:49 SQL> SELECT
18:18:49   2  pair
18:18:49   3  ,trend
18:18:49   4  ,gatt
18:18:49   5  ,COUNT(pair)
18:18:49   6  ,AVG(g6)
18:18:49   7  FROM modsrc
18:18:49   8  GROUP BY pair,trend,gatt
18:18:49   9  ORDER BY pair,trend,gatt
18:18:49  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_gbp 	-1 nup	      7363 -.00097098
eur_gbp 	-1 up	      2456 .002763811
eur_gbp 	-1		30
eur_gbp 	 1 nup	      6740 -.00123378
eur_gbp 	 1 up	      2513 .003032599
eur_gbp 	 1		42

6 rows selected.

Elapsed: 00:00:00.02
18:18:50 SQL> 
18:18:50 SQL> 
18:18:50 SQL> SELECT pair,COUNT(pair)FROM svm6102 GROUP BY pair;

PAIR	COUNT(PAIR)
------- -----------
eur_gbp       19144

Elapsed: 00:00:00.85
18:18:50 SQL> 
18:18:50 SQL> SELECT pair,COUNT(pair)FROM modsrc GROUP BY pair;

PAIR	COUNT(PAIR)
------- -----------
eur_gbp       19144

Elapsed: 00:00:00.01
18:18:50 SQL> 
18:18:50 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
