
SQL*Plus: Release 11.2.0.1.0 Production on Wed Feb 9 02:31:33 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

02:31:33 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
02:31:33 SQL> 02:31:33 SQL> --
02:31:33 SQL> -- pair10.sql
02:31:33 SQL> --
02:31:33 SQL> 
02:31:33 SQL> -- Creates views and tables needed by SVM.
02:31:33 SQL> 
02:31:33 SQL> 
02:31:33 SQL> CREATE OR REPLACE VIEW svm6102 AS
02:31:33   2  SELECT
02:31:33   3  pair
02:31:33   4  ,ydate
02:31:33   5  ,prdate
02:31:33   6  ,rownum rnum -- acts as t in my time-series
02:31:33   7  ,clse
02:31:33   8  -- Derive a bunch of attributes from clse, the latest price:
02:31:33   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
02:31:33  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
02:31:33  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
02:31:33  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
02:31:33  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
02:31:33  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
02:31:33  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
02:31:33  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
02:31:33  17  --
02:31:33  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
02:31:33  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
02:31:33  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
02:31:33  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
02:31:33  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
02:31:33  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
02:31:33  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
02:31:33  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
02:31:33  26  --
02:31:33  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
02:31:33  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
02:31:33  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
02:31:33  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
02:31:33  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
02:31:33  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
02:31:33  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
02:31:33  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
02:31:33  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
02:31:33  36  FROM di5min WHERE pair = '&1'
02:31:33  37  AND ydate > sysdate - 95
02:31:33  38  ORDER BY ydate
02:31:33  39  /
old  36: FROM di5min WHERE pair = '&1'
new  36: FROM di5min WHERE pair = 'usd_jpy'

View created.

Elapsed: 00:00:00.04
02:31:33 SQL> 
02:31:33 SQL> -- rpt
02:31:33 SQL> 
02:31:33 SQL> SELECT
02:31:33   2  pair
02:31:33   3  ,COUNT(pair)
02:31:33   4  ,MIN(clse),MAX(clse)
02:31:33   5  ,MIN(avg6),MAX(avg6)
02:31:33   6  ,MIN(ydate),MAX(ydate)
02:31:33   7  FROM svm6102
02:31:33   8  GROUP BY pair
02:31:33   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_jpy       19166	 80.55	   84.485 80.6721918 84.3105479 2010-11-07 20:55:00 2011-02-09 02:15:00

Elapsed: 00:00:00.82
02:31:34 SQL> 
02:31:34 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
02:31:34 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.20
02:31:34 SQL> CREATE TABLE svm6122 COMPRESS AS
02:31:34   2  SELECT
02:31:34   3  pair
02:31:34   4  ,ydate
02:31:34   5  ,prdate
02:31:34   6  ,clse
02:31:34   7  -- g6 is important. I want to predict g6:
02:31:34   8  ,ld6 - clse g6
02:31:34   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
02:31:34  10  -- I want more attributes from the ones I derived above:
02:31:34  11  -- clse relation to moving-min
02:31:34  12  ,clse-min4  cm4
02:31:34  13  ,clse-min6  cm6
02:31:34  14  ,clse-min8  cm8
02:31:34  15  ,clse-min10 cm10
02:31:34  16  ,clse-min12 cm12
02:31:34  17  ,clse-min14 cm14
02:31:34  18  ,clse-min16 cm16
02:31:34  19  ,clse-min18 cm18
02:31:34  20  -- clse relation to moving-avg
02:31:34  21  ,clse-avg4  ca4
02:31:34  22  ,clse-avg6  ca6
02:31:34  23  ,clse-avg8  ca8
02:31:34  24  ,clse-avg10 ca10
02:31:34  25  ,clse-avg12 ca12
02:31:34  26  ,clse-avg14 ca14
02:31:34  27  ,clse-avg16 ca16
02:31:34  28  ,clse-avg18 ca18
02:31:34  29  -- clse relation to moving-max
02:31:34  30  ,clse-max4  cx4
02:31:34  31  ,clse-max6  cx6
02:31:34  32  ,clse-max8  cx8
02:31:34  33  ,clse-max10 cx10
02:31:34  34  ,clse-max12 cx12
02:31:34  35  ,clse-max14 cx14
02:31:34  36  ,clse-max16 cx16
02:31:34  37  ,clse-max18 cx18
02:31:34  38  -- Derive more attributes.
02:31:34  39  -- I want to use CORR() here to help SVM see the shape of the series.
02:31:34  40  -- But COVAR_POP is more stable:
02:31:34  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
02:31:34  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
02:31:34  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
02:31:34  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
02:31:34  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
02:31:34  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
02:31:34  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
02:31:34  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
02:31:34  49  -- Derive date related attributes:
02:31:34  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
02:31:34  51  ,0+TO_CHAR(ydate,'D')d
02:31:34  52  ,0+TO_CHAR(ydate,'W')w
02:31:34  53  -- mpm stands for minutes-past-midnight:
02:31:34  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
02:31:34  55  -- mph stands for minutes-past-hour:
02:31:34  56  ,0+TO_CHAR(ydate,'MI')mph
02:31:34  57  FROM svm6102
02:31:34  58  ORDER BY ydate
02:31:34  59  /

Table created.

Elapsed: 00:00:02.19
02:31:37 SQL> 
02:31:37 SQL> -- rpt
02:31:37 SQL> 
02:31:37 SQL> SELECT
02:31:37   2  pair
02:31:37   3  ,COUNT(pair)
02:31:37   4  ,MIN(clse),MAX(clse)
02:31:37   5  ,MIN(ydate),MAX(ydate)
02:31:37   6  FROM svm6122
02:31:37   7  GROUP BY pair
02:31:37   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_jpy       19166	 80.55	   84.485 2010-11-07 20:55:00 2011-02-09 02:15:00

Elapsed: 00:00:00.03
02:31:37 SQL> 
02:31:37 SQL> -- Prepare for derivation of NTILE based params:
02:31:37 SQL> 
02:31:37 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.26
02:31:37 SQL> CREATE TABLE svm6142 COMPRESS AS
02:31:37   2  SELECT
02:31:37   3  pair
02:31:37   4  ,ydate
02:31:37   5  ,prdate
02:31:37   6  ,clse
02:31:37   7  ,g6
02:31:37   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
02:31:37   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
02:31:37  10  ,CASE WHEN trend IS NULL THEN 1
02:31:37  11  	    WHEN trend =0      THEN 1
02:31:37  12  	    ELSE trend END trend
02:31:37  13  ,cm4
02:31:37  14  ,cm6
02:31:37  15  ,cm8
02:31:37  16  ,cm10
02:31:37  17  ,cm12
02:31:37  18  ,cm14
02:31:37  19  ,cm16
02:31:37  20  ,cm18
02:31:37  21  --
02:31:37  22  ,ca4
02:31:37  23  ,ca6
02:31:37  24  ,ca8
02:31:37  25  ,ca10
02:31:37  26  ,ca12
02:31:37  27  ,ca14
02:31:37  28  ,ca16
02:31:37  29  ,ca18
02:31:37  30  --
02:31:37  31  ,cx4
02:31:37  32  ,cx6
02:31:37  33  ,cx8
02:31:37  34  ,cx10
02:31:37  35  ,cx12
02:31:37  36  ,cx14
02:31:37  37  ,cx16
02:31:37  38  ,cx18
02:31:37  39  --
02:31:37  40  ,crr4
02:31:37  41  ,crr6
02:31:37  42  ,crr8
02:31:37  43  ,crr10
02:31:37  44  ,crr12
02:31:37  45  ,crr14
02:31:37  46  ,crr16
02:31:37  47  ,crr18
02:31:37  48  --
02:31:37  49  ,hh
02:31:37  50  ,d
02:31:37  51  ,w
02:31:37  52  ,mpm
02:31:37  53  ,mph
02:31:37  54  FROM svm6122
02:31:37  55  ORDER BY ydate
02:31:37  56  /

Table created.

Elapsed: 00:00:00.46
02:31:37 SQL> 
02:31:37 SQL> -- rpt
02:31:37 SQL> 
02:31:37 SQL> SELECT
02:31:37   2  pair
02:31:37   3  ,trend
02:31:37   4  ,gatt
02:31:37   5  ,COUNT(pair)
02:31:37   6  ,AVG(g6)
02:31:37   7  FROM svm6142
02:31:37   8  GROUP BY pair,trend,gatt
02:31:37   9  ORDER BY pair,trend,gatt
02:31:37  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      4971 -.15637357
usd_jpy 	-1 up	      4822 .172892396
usd_jpy 	-1		 2
usd_jpy 	 1 nup	      4922  -.1553887
usd_jpy 	 1 up	      4379 .179531644
usd_jpy 	 1		70

6 rows selected.

Elapsed: 00:00:00.05
02:31:37 SQL> 
02:31:37 SQL> 
02:31:37 SQL> -- Derive NTILE based params:
02:31:37 SQL> 
02:31:37 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.13
02:31:38 SQL> CREATE TABLE svm6162 COMPRESS AS
02:31:38   2  SELECT
02:31:38   3  pair
02:31:38   4  ,ydate
02:31:38   5  ,prdate
02:31:38   6  ,clse
02:31:38   7  ,g6
02:31:38   8  ,gatt
02:31:38   9  ,gattn
02:31:38  10  ,trend
02:31:38  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
02:31:38  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
02:31:38  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
02:31:38  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
02:31:38  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
02:31:38  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
02:31:38  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
02:31:38  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
02:31:38  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
02:31:38  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
02:31:38  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
02:31:38  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
02:31:38  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
02:31:38  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
02:31:38  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
02:31:38  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
02:31:38  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
02:31:38  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
02:31:38  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
02:31:38  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
02:31:38  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
02:31:38  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
02:31:38  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
02:31:38  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
02:31:38  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
02:31:38  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
02:31:38  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
02:31:38  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
02:31:38  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
02:31:38  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
02:31:38  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
02:31:38  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
02:31:38  43  ,hh  att32
02:31:38  44  ,d   att33
02:31:38  45  ,w   att34
02:31:38  46  ,mpm att35
02:31:38  47  ,mph att36
02:31:38  48  ,trend att37
02:31:38  49  FROM svm6142
02:31:38  50  ORDER BY ydate
02:31:38  51  /

Table created.

Elapsed: 00:00:04.72
02:31:42 SQL> 
02:31:42 SQL> -- rpt
02:31:42 SQL> 
02:31:42 SQL> SELECT
02:31:42   2  pair
02:31:42   3  ,trend
02:31:42   4  ,gatt
02:31:42   5  ,COUNT(pair)
02:31:42   6  ,AVG(g6)
02:31:42   7  FROM svm6162
02:31:42   8  GROUP BY pair,trend,gatt
02:31:42   9  ORDER BY pair,trend,gatt
02:31:42  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      4971 -.15637357
usd_jpy 	-1 up	      4822 .172892396
usd_jpy 	-1		 2
usd_jpy 	 1 nup	      4922  -.1553887
usd_jpy 	 1 up	      4379 .179531644
usd_jpy 	 1		70

6 rows selected.

Elapsed: 00:00:00.02
02:31:42 SQL> 
02:31:42 SQL> -- I comment out sections related to score-feedback.
02:31:42 SQL> -- I tested score-feeback and it hurts results:
02:31:42 SQL> 
02:31:42 SQL> -- CREATE OR REPLACE VIEW sc12 AS
02:31:42 SQL> -- SELECT
02:31:42 SQL> -- m.pair
02:31:42 SQL> -- ,m.ydate
02:31:42 SQL> -- ,m.prdate
02:31:42 SQL> -- ,l.score score_long
02:31:42 SQL> -- ,s.score score_short
02:31:42 SQL> -- ,m.g6
02:31:42 SQL> -- FROM svm62scores l,svm62scores s,svm6162 m
02:31:42 SQL> -- WHERE l.targ='gatt'
02:31:42 SQL> -- AND	 s.targ='gattn'
02:31:42 SQL> -- AND l.prdate = s.prdate
02:31:42 SQL> -- AND l.prdate = m.prdate
02:31:42 SQL> -- -- Speed things up:
02:31:42 SQL> -- AND l.pair = '&1'
02:31:42 SQL> -- AND s.pair = '&1'
02:31:42 SQL> -- /
02:31:42 SQL> --
02:31:42 SQL> -- DROP TABLE score_corr;
02:31:42 SQL> --
02:31:42 SQL> -- CREATE TABLE score_corr COMPRESS AS
02:31:42 SQL> -- SELECT
02:31:42 SQL> -- pair
02:31:42 SQL> -- -- ,ydate
02:31:42 SQL> -- ,prdate
02:31:42 SQL> -- -- Find corr() tween score and g6 over 2 day period:
02:31:42 SQL> -- ,CORR((score_long - score_short),g6)
02:31:42 SQL> --   OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 2*24*60/5 PRECEDING AND CURRENT ROW)sc_corr
02:31:42 SQL> -- FROM sc12
02:31:42 SQL> -- /
02:31:42 SQL> 
02:31:42 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.33
02:31:43 SQL> 
02:31:43 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.57
02:31:43 SQL> 
02:31:43 SQL> CREATE TABLE modsrc COMPRESS AS
02:31:43   2  SELECT
02:31:43   3  pair
02:31:43   4  ,ydate
02:31:43   5  ,prdate
02:31:43   6  ,trend
02:31:43   7  ,g6
02:31:43   8  ,gatt
02:31:43   9  ,gattn
02:31:43  10  ,SUM(g6)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g00
02:31:43  11  ,SUM(g6)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g01
02:31:43  12  ,SUM(g6)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g02
02:31:43  13  ,SUM(g6)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g03
02:31:43  14  ,SUM(g6)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g04
02:31:43  15  ,SUM(g6)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g05
02:31:43  16  ,SUM(g6)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g06
02:31:43  17  ,SUM(g6)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g07
02:31:43  18  ,SUM(g6)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g08
02:31:43  19  ,SUM(g6)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g09
02:31:43  20  ,SUM(g6)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g10
02:31:43  21  ,SUM(g6)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g11
02:31:43  22  ,SUM(g6)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g12
02:31:43  23  ,SUM(g6)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g13
02:31:43  24  ,SUM(g6)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g14
02:31:43  25  ,SUM(g6)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g15
02:31:43  26  ,SUM(g6)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g16
02:31:43  27  ,SUM(g6)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g17
02:31:43  28  ,SUM(g6)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g18
02:31:43  29  ,SUM(g6)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g19
02:31:43  30  ,SUM(g6)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g20
02:31:43  31  ,SUM(g6)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g21
02:31:43  32  ,SUM(g6)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g22
02:31:43  33  ,SUM(g6)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g23
02:31:43  34  ,SUM(g6)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g24
02:31:43  35  ,SUM(g6)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g25
02:31:43  36  ,SUM(g6)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g26
02:31:43  37  ,SUM(g6)OVER(PARTITION BY trend,att27 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g27
02:31:43  38  ,SUM(g6)OVER(PARTITION BY trend,att28 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g28
02:31:43  39  ,SUM(g6)OVER(PARTITION BY trend,att29 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g29
02:31:43  40  ,SUM(g6)OVER(PARTITION BY trend,att30 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g30
02:31:43  41  ,SUM(g6)OVER(PARTITION BY trend,att31 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g31
02:31:43  42  ,SUM(g6)OVER(PARTITION BY trend,att32 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g32
02:31:43  43  ,SUM(g6)OVER(PARTITION BY trend,att33 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g33
02:31:43  44  ,SUM(g6)OVER(PARTITION BY trend,att34 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g34
02:31:43  45  ,SUM(g6)OVER(PARTITION BY trend,att35 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g35
02:31:43  46  ,SUM(g6)OVER(PARTITION BY trend,att36 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g36
02:31:43  47  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g37
02:31:43  48  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*40 PRECEDING AND CURRENT ROW)g38
02:31:43  49  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*30 PRECEDING AND CURRENT ROW)g39
02:31:43  50  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)g40
02:31:43  51  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)g41
02:31:43  52  FROM svm6162
02:31:43  53  /

Table created.

Elapsed: 00:00:05.89
02:31:49 SQL> 
02:31:49 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:02.11
02:31:51 SQL> 
02:31:51 SQL> -- rpt
02:31:51 SQL> 
02:31:51 SQL> SELECT
02:31:51   2  pair
02:31:51   3  ,trend
02:31:51   4  ,gatt
02:31:51   5  ,COUNT(pair)
02:31:51   6  ,AVG(g6)
02:31:51   7  FROM modsrc
02:31:51   8  GROUP BY pair,trend,gatt
02:31:51   9  ORDER BY pair,trend,gatt
02:31:51  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      4971 -.15637357
usd_jpy 	-1 up	      4822 .172892396
usd_jpy 	-1		 2
usd_jpy 	 1 nup	      4922  -.1553887
usd_jpy 	 1 up	      4379 .179531644
usd_jpy 	 1		70

6 rows selected.

Elapsed: 00:00:00.02
02:31:51 SQL> 
02:31:51 SQL> 
02:31:51 SQL> SELECT pair,COUNT(pair)FROM svm6102 GROUP BY pair;

PAIR	COUNT(PAIR)
------- -----------
usd_jpy       19166

Elapsed: 00:00:00.80
02:31:52 SQL> 
02:31:52 SQL> SELECT pair,COUNT(pair)FROM modsrc GROUP BY pair;

PAIR	COUNT(PAIR)
------- -----------
usd_jpy       19166

Elapsed: 00:00:00.01
02:31:52 SQL> 
02:31:52 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
