
SQL*Plus: Release 11.2.0.1.0 Production on Fri Mar 11 06:37:39 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

06:37:39 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
06:37:39 SQL> 06:37:39 SQL> --
06:37:39 SQL> -- pair10.sql
06:37:39 SQL> --
06:37:39 SQL> 
06:37:39 SQL> -- Creates views and tables needed by SVM.
06:37:39 SQL> 
06:37:39 SQL> 
06:37:39 SQL> CREATE OR REPLACE VIEW svm6102 AS
06:37:39   2  SELECT
06:37:39   3  pair
06:37:39   4  ,ydate
06:37:39   5  ,prdate
06:37:39   6  ,rownum rnum -- acts as t in my time-series
06:37:39   7  ,clse
06:37:39   8  -- Derive a bunch of attributes from clse, the latest price:
06:37:39   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
06:37:39  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
06:37:39  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
06:37:39  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
06:37:39  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
06:37:39  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
06:37:39  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
06:37:39  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
06:37:39  17  --
06:37:39  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
06:37:39  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
06:37:39  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
06:37:39  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
06:37:39  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
06:37:39  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
06:37:39  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
06:37:39  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
06:37:39  26  --
06:37:39  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
06:37:39  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
06:37:39  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
06:37:39  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
06:37:39  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
06:37:39  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
06:37:39  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
06:37:39  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
06:37:39  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
06:37:39  36  FROM di5min WHERE pair = '&1'
06:37:39  37  AND ydate > sysdate - 95
06:37:39  38  ORDER BY ydate
06:37:39  39  /
old  36: FROM di5min WHERE pair = '&1'
new  36: FROM di5min WHERE pair = 'usd_chf'

View created.

Elapsed: 00:00:00.06
06:37:39 SQL> 
06:37:39 SQL> -- rpt
06:37:39 SQL> 
06:37:39 SQL> SELECT
06:37:39   2  pair
06:37:39   3  ,COUNT(pair)
06:37:39   4  ,MIN(clse),MAX(clse)
06:37:39   5  ,MIN(avg6),MAX(avg6)
06:37:39   6  ,MIN(ydate),MAX(ydate)
06:37:39   7  FROM svm6102
06:37:39   8  GROUP BY pair
06:37:39   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_chf       19602	.92075	  .990975 .922724829 .989293151 2010-12-06 06:40:00 2011-03-11 06:15:00

Elapsed: 00:00:00.83
06:37:40 SQL> 
06:37:40 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
06:37:40 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.32
06:37:40 SQL> CREATE TABLE svm6122 COMPRESS AS
06:37:40   2  SELECT
06:37:40   3  pair
06:37:40   4  ,ydate
06:37:40   5  ,prdate
06:37:40   6  ,clse
06:37:40   7  -- g6 is important. I want to predict g6:
06:37:40   8  ,(ld6 - clse)/clse g6
06:37:40   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
06:37:40  10  -- I want more attributes from the ones I derived above:
06:37:40  11  -- clse relation to moving-min
06:37:40  12  ,clse-min4  cm4
06:37:40  13  ,clse-min6  cm6
06:37:40  14  ,clse-min8  cm8
06:37:40  15  ,clse-min10 cm10
06:37:40  16  ,clse-min12 cm12
06:37:40  17  ,clse-min14 cm14
06:37:40  18  ,clse-min16 cm16
06:37:40  19  ,clse-min18 cm18
06:37:40  20  -- clse relation to moving-avg
06:37:40  21  ,clse-avg4  ca4
06:37:40  22  ,clse-avg6  ca6
06:37:40  23  ,clse-avg8  ca8
06:37:40  24  ,clse-avg10 ca10
06:37:40  25  ,clse-avg12 ca12
06:37:40  26  ,clse-avg14 ca14
06:37:40  27  ,clse-avg16 ca16
06:37:40  28  ,clse-avg18 ca18
06:37:40  29  -- clse relation to moving-max
06:37:40  30  ,clse-max4  cx4
06:37:40  31  ,clse-max6  cx6
06:37:40  32  ,clse-max8  cx8
06:37:40  33  ,clse-max10 cx10
06:37:40  34  ,clse-max12 cx12
06:37:40  35  ,clse-max14 cx14
06:37:40  36  ,clse-max16 cx16
06:37:40  37  ,clse-max18 cx18
06:37:40  38  -- Derive more attributes.
06:37:40  39  -- I want to use CORR() here to help SVM see the shape of the series.
06:37:40  40  -- But COVAR_POP is more stable:
06:37:40  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
06:37:40  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
06:37:40  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
06:37:40  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
06:37:40  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
06:37:40  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
06:37:40  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
06:37:40  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
06:37:40  49  -- Derive date related attributes:
06:37:40  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
06:37:40  51  ,0+TO_CHAR(ydate,'D')d
06:37:40  52  ,0+TO_CHAR(ydate,'W')w
06:37:40  53  -- mpm stands for minutes-past-midnight:
06:37:40  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
06:37:40  55  -- mph stands for minutes-past-hour:
06:37:40  56  ,0+TO_CHAR(ydate,'MI')mph
06:37:40  57  FROM svm6102
06:37:40  58  WHERE clse > 0
06:37:40  59  ORDER BY ydate
06:37:40  60  /

Table created.

Elapsed: 00:00:02.37
06:37:43 SQL> 
06:37:43 SQL> -- rpt
06:37:43 SQL> 
06:37:43 SQL> SELECT
06:37:43   2  pair
06:37:43   3  ,COUNT(pair)
06:37:43   4  ,MIN(clse),MAX(clse)
06:37:43   5  ,MIN(ydate),MAX(ydate)
06:37:43   6  FROM svm6122
06:37:43   7  GROUP BY pair
06:37:43   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_chf       19602	.92075	  .990975 2010-12-06 06:40:00 2011-03-11 06:15:00

Elapsed: 00:00:00.06
06:37:43 SQL> 
06:37:43 SQL> -- Prepare for derivation of NTILE based params:
06:37:43 SQL> 
06:37:43 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.32
06:37:43 SQL> CREATE TABLE svm6142 COMPRESS AS
06:37:43   2  SELECT
06:37:43   3  pair
06:37:43   4  ,ydate
06:37:43   5  ,prdate
06:37:43   6  ,clse
06:37:43   7  ,g6
06:37:43   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
06:37:43   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
06:37:43  10  ,CASE WHEN trend IS NULL THEN 1
06:37:43  11  	    WHEN trend =0      THEN 1
06:37:43  12  	    ELSE trend END trend
06:37:43  13  ,cm4
06:37:43  14  ,cm6
06:37:43  15  ,cm8
06:37:43  16  ,cm10
06:37:43  17  ,cm12
06:37:43  18  ,cm14
06:37:43  19  ,cm16
06:37:43  20  ,cm18
06:37:43  21  --
06:37:43  22  ,ca4
06:37:43  23  ,ca6
06:37:43  24  ,ca8
06:37:43  25  ,ca10
06:37:43  26  ,ca12
06:37:43  27  ,ca14
06:37:43  28  ,ca16
06:37:43  29  ,ca18
06:37:43  30  --
06:37:43  31  ,cx4
06:37:43  32  ,cx6
06:37:43  33  ,cx8
06:37:43  34  ,cx10
06:37:43  35  ,cx12
06:37:43  36  ,cx14
06:37:43  37  ,cx16
06:37:43  38  ,cx18
06:37:43  39  --
06:37:43  40  ,crr4
06:37:43  41  ,crr6
06:37:43  42  ,crr8
06:37:43  43  ,crr10
06:37:43  44  ,crr12
06:37:43  45  ,crr14
06:37:43  46  ,crr16
06:37:43  47  ,crr18
06:37:43  48  --
06:37:43  49  ,hh
06:37:43  50  ,d
06:37:43  51  ,w
06:37:43  52  ,mpm
06:37:43  53  ,mph
06:37:43  54  FROM svm6122
06:37:43  55  ORDER BY ydate
06:37:43  56  /

Table created.

Elapsed: 00:00:00.39
06:37:43 SQL> 
06:37:43 SQL> -- rpt
06:37:43 SQL> 
06:37:43 SQL> SELECT
06:37:43   2  pair
06:37:43   3  ,trend
06:37:43   4  ,gatt
06:37:43   5  ,COUNT(pair)
06:37:43   6  ,AVG(g6)
06:37:43   7  FROM svm6142
06:37:43   8  GROUP BY pair,trend,gatt
06:37:43   9  ORDER BY pair,trend,gatt
06:37:43  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7821 -.00166363
usd_chf 	-1 up	      2699  .00343652
usd_chf 	-1		61
usd_chf 	 1 nup	      6322 -.00169428
usd_chf 	 1 up	      2688 .004058282
usd_chf 	 1		11

6 rows selected.

Elapsed: 00:00:00.05
06:37:43 SQL> 
06:37:43 SQL> 
06:37:43 SQL> -- Derive NTILE based params:
06:37:43 SQL> 
06:37:43 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.19
06:37:44 SQL> CREATE TABLE svm6162 COMPRESS AS
06:37:44   2  SELECT
06:37:44   3  pair
06:37:44   4  ,ydate
06:37:44   5  ,prdate
06:37:44   6  ,clse
06:37:44   7  ,g6
06:37:44   8  ,gatt
06:37:44   9  ,gattn
06:37:44  10  ,trend
06:37:44  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
06:37:44  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
06:37:44  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
06:37:44  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
06:37:44  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
06:37:44  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
06:37:44  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
06:37:44  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
06:37:44  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
06:37:44  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
06:37:44  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
06:37:44  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
06:37:44  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
06:37:44  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
06:37:44  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
06:37:44  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
06:37:44  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
06:37:44  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
06:37:44  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
06:37:44  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
06:37:44  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
06:37:44  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
06:37:44  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
06:37:44  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
06:37:44  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
06:37:44  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
06:37:44  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
06:37:44  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
06:37:44  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
06:37:44  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
06:37:44  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
06:37:44  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
06:37:44  43  ,hh  att32
06:37:44  44  ,d   att33
06:37:44  45  ,w   att34
06:37:44  46  ,mpm att35
06:37:44  47  ,mph att36
06:37:44  48  ,trend att37
06:37:44  49  FROM svm6142
06:37:44  50  ORDER BY ydate
06:37:44  51  /

Table created.

Elapsed: 00:00:05.12
06:37:49 SQL> 
06:37:49 SQL> -- rpt
06:37:49 SQL> 
06:37:49 SQL> SELECT
06:37:49   2  pair
06:37:49   3  ,trend
06:37:49   4  ,gatt
06:37:49   5  ,COUNT(pair)
06:37:49   6  ,AVG(g6)
06:37:49   7  FROM svm6162
06:37:49   8  GROUP BY pair,trend,gatt
06:37:49   9  ORDER BY pair,trend,gatt
06:37:49  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7821 -.00166363
usd_chf 	-1 up	      2699  .00343652
usd_chf 	-1		61
usd_chf 	 1 nup	      6322 -.00169428
usd_chf 	 1 up	      2688 .004058282
usd_chf 	 1		11

6 rows selected.

Elapsed: 00:00:00.02
06:37:49 SQL> 
06:37:49 SQL> -- I comment out sections related to score-feedback.
06:37:49 SQL> -- I tested score-feeback and it hurts results:
06:37:49 SQL> 
06:37:49 SQL> -- CREATE OR REPLACE VIEW sc12 AS
06:37:49 SQL> -- SELECT
06:37:49 SQL> -- m.pair
06:37:49 SQL> -- ,m.ydate
06:37:49 SQL> -- ,m.prdate
06:37:49 SQL> -- ,l.score score_long
06:37:49 SQL> -- ,s.score score_short
06:37:49 SQL> -- ,m.g6
06:37:49 SQL> -- FROM svm62scores l,svm62scores s,svm6162 m
06:37:49 SQL> -- WHERE l.targ='gatt'
06:37:49 SQL> -- AND	 s.targ='gattn'
06:37:49 SQL> -- AND l.prdate = s.prdate
06:37:49 SQL> -- AND l.prdate = m.prdate
06:37:49 SQL> -- -- Speed things up:
06:37:49 SQL> -- AND l.pair = '&1'
06:37:49 SQL> -- AND s.pair = '&1'
06:37:49 SQL> -- /
06:37:49 SQL> --
06:37:49 SQL> -- DROP TABLE score_corr;
06:37:49 SQL> --
06:37:49 SQL> -- CREATE TABLE score_corr COMPRESS AS
06:37:49 SQL> -- SELECT
06:37:49 SQL> -- pair
06:37:49 SQL> -- -- ,ydate
06:37:49 SQL> -- ,prdate
06:37:49 SQL> -- -- Find corr() tween score and g6 over 2 day period:
06:37:49 SQL> -- ,CORR((score_long - score_short),g6)
06:37:49 SQL> --   OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 2*24*60/5 PRECEDING AND CURRENT ROW)sc_corr
06:37:49 SQL> -- FROM sc12
06:37:49 SQL> -- /
06:37:49 SQL> 
06:37:49 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.73
06:37:49 SQL> 
06:37:49 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.15
06:37:50 SQL> 
06:37:50 SQL> CREATE TABLE modsrc COMPRESS AS
06:37:50   2  SELECT
06:37:50   3  pair
06:37:50   4  ,ydate
06:37:50   5  ,prdate
06:37:50   6  ,trend
06:37:50   7  ,g6
06:37:50   8  ,gatt
06:37:50   9  ,gattn
06:37:50  10  ,SUM(g6)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g00
06:37:50  11  ,SUM(g6)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g01
06:37:50  12  ,SUM(g6)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g02
06:37:50  13  ,SUM(g6)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g03
06:37:50  14  ,SUM(g6)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g04
06:37:50  15  ,SUM(g6)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g05
06:37:50  16  ,SUM(g6)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g06
06:37:50  17  ,SUM(g6)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g07
06:37:50  18  ,SUM(g6)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g08
06:37:50  19  ,SUM(g6)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g09
06:37:50  20  ,SUM(g6)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g10
06:37:50  21  ,SUM(g6)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g11
06:37:50  22  ,SUM(g6)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g12
06:37:50  23  ,SUM(g6)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g13
06:37:50  24  ,SUM(g6)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g14
06:37:50  25  ,SUM(g6)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g15
06:37:50  26  ,SUM(g6)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g16
06:37:50  27  ,SUM(g6)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g17
06:37:50  28  ,SUM(g6)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g18
06:37:50  29  ,SUM(g6)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g19
06:37:50  30  ,SUM(g6)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g20
06:37:50  31  ,SUM(g6)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g21
06:37:50  32  ,SUM(g6)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g22
06:37:50  33  ,SUM(g6)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g23
06:37:50  34  ,SUM(g6)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g24
06:37:50  35  ,SUM(g6)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g25
06:37:50  36  ,SUM(g6)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g26
06:37:50  37  ,SUM(g6)OVER(PARTITION BY trend,att27 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g27
06:37:50  38  ,SUM(g6)OVER(PARTITION BY trend,att28 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g28
06:37:50  39  ,SUM(g6)OVER(PARTITION BY trend,att29 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g29
06:37:50  40  ,SUM(g6)OVER(PARTITION BY trend,att30 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g30
06:37:50  41  ,SUM(g6)OVER(PARTITION BY trend,att31 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g31
06:37:50  42  ,SUM(g6)OVER(PARTITION BY trend,att32 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g32
06:37:50  43  ,SUM(g6)OVER(PARTITION BY trend,att33 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g33
06:37:50  44  ,SUM(g6)OVER(PARTITION BY trend,att34 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g34
06:37:50  45  ,SUM(g6)OVER(PARTITION BY trend,att35 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g35
06:37:50  46  ,SUM(g6)OVER(PARTITION BY trend,att36 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g36
06:37:50  47  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g37
06:37:50  48  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*40 PRECEDING AND CURRENT ROW)g38
06:37:50  49  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*30 PRECEDING AND CURRENT ROW)g39
06:37:50  50  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)g40
06:37:50  51  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)g41
06:37:50  52  FROM svm6162
06:37:50  53  /

Table created.

Elapsed: 00:00:06.67
06:37:56 SQL> 
06:37:56 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:02.60
06:37:59 SQL> 
06:37:59 SQL> -- rpt
06:37:59 SQL> 
06:37:59 SQL> SELECT
06:37:59   2  pair
06:37:59   3  ,trend
06:37:59   4  ,gatt
06:37:59   5  ,COUNT(pair)
06:37:59   6  ,AVG(g6)
06:37:59   7  FROM modsrc
06:37:59   8  GROUP BY pair,trend,gatt
06:37:59   9  ORDER BY pair,trend,gatt
06:37:59  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7821 -.00166363
usd_chf 	-1 up	      2699  .00343652
usd_chf 	-1		61
usd_chf 	 1 nup	      6322 -.00169428
usd_chf 	 1 up	      2688 .004058282
usd_chf 	 1		11

6 rows selected.

Elapsed: 00:00:00.02
06:37:59 SQL> 
06:37:59 SQL> 
06:37:59 SQL> SELECT pair,COUNT(pair)FROM svm6102 GROUP BY pair;

PAIR	COUNT(PAIR)
------- -----------
usd_chf       19602

Elapsed: 00:00:00.80
06:38:00 SQL> 
06:38:00 SQL> SELECT pair,COUNT(pair)FROM modsrc GROUP BY pair;

PAIR	COUNT(PAIR)
------- -----------
usd_chf       19602

Elapsed: 00:00:00.01
06:38:00 SQL> 
06:38:00 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
