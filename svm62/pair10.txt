
SQL*Plus: Release 11.2.0.1.0 Production on Sun Feb 20 11:51:52 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

11:51:54 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.03
11:51:54 SQL> 11:51:54 SQL> --
11:51:54 SQL> -- pair10.sql
11:51:54 SQL> --
11:51:54 SQL> 
11:51:54 SQL> -- Creates views and tables needed by SVM.
11:51:54 SQL> 
11:51:54 SQL> 
11:51:54 SQL> CREATE OR REPLACE VIEW svm6102 AS
11:51:54   2  SELECT
11:51:54   3  pair
11:51:54   4  ,ydate
11:51:54   5  ,prdate
11:51:54   6  ,rownum rnum -- acts as t in my time-series
11:51:54   7  ,clse
11:51:54   8  -- Derive a bunch of attributes from clse, the latest price:
11:51:54   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
11:51:54  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
11:51:54  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
11:51:54  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
11:51:54  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
11:51:54  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
11:51:54  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
11:51:54  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
11:51:54  17  --
11:51:54  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
11:51:54  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
11:51:54  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
11:51:54  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
11:51:54  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
11:51:54  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
11:51:54  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
11:51:54  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
11:51:54  26  --
11:51:54  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
11:51:54  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
11:51:54  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
11:51:54  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
11:51:54  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
11:51:54  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
11:51:54  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
11:51:54  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
11:51:54  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
11:51:54  36  FROM di5min WHERE pair = '&1'
11:51:54  37  AND ydate > sysdate - 95
11:51:54  38  ORDER BY ydate
11:51:54  39  /
old  36: FROM di5min WHERE pair = '&1'
new  36: FROM di5min WHERE pair = 'eur_aud'

View created.

Elapsed: 00:00:00.32
11:51:54 SQL> 
11:51:54 SQL> -- rpt
11:51:54 SQL> 
11:51:54 SQL> SELECT
11:51:54   2  pair
11:51:54   3  ,COUNT(pair)
11:51:54   4  ,MIN(clse),MAX(clse)
11:51:54   5  ,MIN(avg6),MAX(avg6)
11:51:54   6  ,MIN(ydate),MAX(ydate)
11:51:54   7  FROM svm6102
11:51:54   8  GROUP BY pair
11:51:54   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_aud       19183 1.29324263	 1.392752 1.29538723 1.39030916 2010-11-17 11:55:00 2011-02-18 21:55:00

Elapsed: 00:00:01.65
11:51:56 SQL> 
11:51:56 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
11:51:56 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:01.05
11:51:57 SQL> CREATE TABLE svm6122 COMPRESS AS
11:51:57   2  SELECT
11:51:57   3  pair
11:51:57   4  ,ydate
11:51:57   5  ,prdate
11:51:57   6  ,clse
11:51:57   7  -- g6 is important. I want to predict g6:
11:51:57   8  ,ld6 - clse g6
11:51:57   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
11:51:57  10  -- I want more attributes from the ones I derived above:
11:51:57  11  -- clse relation to moving-min
11:51:57  12  ,clse-min4  cm4
11:51:57  13  ,clse-min6  cm6
11:51:57  14  ,clse-min8  cm8
11:51:57  15  ,clse-min10 cm10
11:51:57  16  ,clse-min12 cm12
11:51:57  17  ,clse-min14 cm14
11:51:57  18  ,clse-min16 cm16
11:51:57  19  ,clse-min18 cm18
11:51:57  20  -- clse relation to moving-avg
11:51:57  21  ,clse-avg4  ca4
11:51:57  22  ,clse-avg6  ca6
11:51:57  23  ,clse-avg8  ca8
11:51:57  24  ,clse-avg10 ca10
11:51:57  25  ,clse-avg12 ca12
11:51:57  26  ,clse-avg14 ca14
11:51:57  27  ,clse-avg16 ca16
11:51:57  28  ,clse-avg18 ca18
11:51:57  29  -- clse relation to moving-max
11:51:57  30  ,clse-max4  cx4
11:51:57  31  ,clse-max6  cx6
11:51:57  32  ,clse-max8  cx8
11:51:57  33  ,clse-max10 cx10
11:51:57  34  ,clse-max12 cx12
11:51:57  35  ,clse-max14 cx14
11:51:57  36  ,clse-max16 cx16
11:51:57  37  ,clse-max18 cx18
11:51:57  38  -- Derive more attributes.
11:51:57  39  -- I want to use CORR() here to help SVM see the shape of the series.
11:51:57  40  -- But COVAR_POP is more stable:
11:51:57  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
11:51:57  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
11:51:57  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
11:51:57  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
11:51:57  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
11:51:57  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
11:51:57  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
11:51:57  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
11:51:57  49  -- Derive date related attributes:
11:51:57  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
11:51:57  51  ,0+TO_CHAR(ydate,'D')d
11:51:57  52  ,0+TO_CHAR(ydate,'W')w
11:51:57  53  -- mpm stands for minutes-past-midnight:
11:51:57  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
11:51:57  55  -- mph stands for minutes-past-hour:
11:51:57  56  ,0+TO_CHAR(ydate,'MI')mph
11:51:57  57  FROM svm6102
11:51:57  58  ORDER BY ydate
11:51:57  59  /

Table created.

Elapsed: 00:00:02.37
11:51:59 SQL> 
11:51:59 SQL> -- rpt
11:51:59 SQL> 
11:51:59 SQL> SELECT
11:51:59   2  pair
11:51:59   3  ,COUNT(pair)
11:51:59   4  ,MIN(clse),MAX(clse)
11:51:59   5  ,MIN(ydate),MAX(ydate)
11:51:59   6  FROM svm6122
11:51:59   7  GROUP BY pair
11:51:59   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_aud       19183 1.29324263	 1.392752 2010-11-17 11:55:00 2011-02-18 21:55:00

Elapsed: 00:00:00.07
11:51:59 SQL> 
11:51:59 SQL> -- Prepare for derivation of NTILE based params:
11:51:59 SQL> 
11:51:59 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.16
11:52:00 SQL> CREATE TABLE svm6142 COMPRESS AS
11:52:00   2  SELECT
11:52:00   3  pair
11:52:00   4  ,ydate
11:52:00   5  ,prdate
11:52:00   6  ,clse
11:52:00   7  ,g6
11:52:00   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
11:52:00   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
11:52:00  10  ,CASE WHEN trend IS NULL THEN 1
11:52:00  11  	    WHEN trend =0      THEN 1
11:52:00  12  	    ELSE trend END trend
11:52:00  13  ,cm4
11:52:00  14  ,cm6
11:52:00  15  ,cm8
11:52:00  16  ,cm10
11:52:00  17  ,cm12
11:52:00  18  ,cm14
11:52:00  19  ,cm16
11:52:00  20  ,cm18
11:52:00  21  --
11:52:00  22  ,ca4
11:52:00  23  ,ca6
11:52:00  24  ,ca8
11:52:00  25  ,ca10
11:52:00  26  ,ca12
11:52:00  27  ,ca14
11:52:00  28  ,ca16
11:52:00  29  ,ca18
11:52:00  30  --
11:52:00  31  ,cx4
11:52:00  32  ,cx6
11:52:00  33  ,cx8
11:52:00  34  ,cx10
11:52:00  35  ,cx12
11:52:00  36  ,cx14
11:52:00  37  ,cx16
11:52:00  38  ,cx18
11:52:00  39  --
11:52:00  40  ,crr4
11:52:00  41  ,crr6
11:52:00  42  ,crr8
11:52:00  43  ,crr10
11:52:00  44  ,crr12
11:52:00  45  ,crr14
11:52:00  46  ,crr16
11:52:00  47  ,crr18
11:52:00  48  --
11:52:00  49  ,hh
11:52:00  50  ,d
11:52:00  51  ,w
11:52:00  52  ,mpm
11:52:00  53  ,mph
11:52:00  54  FROM svm6122
11:52:00  55  ORDER BY ydate
11:52:00  56  /

Table created.

Elapsed: 00:00:00.54
11:52:00 SQL> 
11:52:00 SQL> -- rpt
11:52:00 SQL> 
11:52:00 SQL> SELECT
11:52:00   2  pair
11:52:00   3  ,trend
11:52:00   4  ,gatt
11:52:00   5  ,COUNT(pair)
11:52:00   6  ,AVG(g6)
11:52:00   7  FROM svm6142
11:52:00   8  GROUP BY pair,trend,gatt
11:52:00   9  ORDER BY pair,trend,gatt
11:52:00  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_aud 	-1 nup	      6333 -.00258673
eur_aud 	-1 up	      3422 .003880699
eur_aud 	 1 nup	      5872 -.00234102
eur_aud 	 1 up	      3484 .004187314
eur_aud 	 1		72

Elapsed: 00:00:00.04
11:52:00 SQL> 
11:52:00 SQL> 
11:52:00 SQL> -- Derive NTILE based params:
11:52:00 SQL> 
11:52:00 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.08
11:52:00 SQL> CREATE TABLE svm6162 COMPRESS AS
11:52:00   2  SELECT
11:52:00   3  pair
11:52:00   4  ,ydate
11:52:00   5  ,prdate
11:52:00   6  ,clse
11:52:00   7  ,g6
11:52:00   8  ,gatt
11:52:00   9  ,gattn
11:52:00  10  ,trend
11:52:00  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
11:52:00  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
11:52:00  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
11:52:00  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
11:52:00  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
11:52:00  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
11:52:00  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
11:52:00  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
11:52:00  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
11:52:00  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
11:52:00  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
11:52:00  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
11:52:00  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
11:52:00  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
11:52:00  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
11:52:00  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
11:52:00  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
11:52:00  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
11:52:00  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
11:52:00  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
11:52:00  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
11:52:00  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
11:52:00  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
11:52:00  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
11:52:00  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
11:52:00  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
11:52:00  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
11:52:00  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
11:52:00  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
11:52:00  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
11:52:00  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
11:52:00  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
11:52:00  43  ,hh  att32
11:52:00  44  ,d   att33
11:52:00  45  ,w   att34
11:52:00  46  ,mpm att35
11:52:00  47  ,mph att36
11:52:00  48  ,trend att37
11:52:00  49  FROM svm6142
11:52:00  50  ORDER BY ydate
11:52:00  51  /

Table created.

Elapsed: 00:00:05.43
11:52:06 SQL> 
11:52:06 SQL> -- rpt
11:52:06 SQL> 
11:52:06 SQL> SELECT
11:52:06   2  pair
11:52:06   3  ,trend
11:52:06   4  ,gatt
11:52:06   5  ,COUNT(pair)
11:52:06   6  ,AVG(g6)
11:52:06   7  FROM svm6162
11:52:06   8  GROUP BY pair,trend,gatt
11:52:06   9  ORDER BY pair,trend,gatt
11:52:06  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_aud 	-1 nup	      6333 -.00258673
eur_aud 	-1 up	      3422 .003880699
eur_aud 	 1 nup	      5872 -.00234102
eur_aud 	 1 up	      3484 .004187314
eur_aud 	 1		72

Elapsed: 00:00:00.03
11:52:06 SQL> 
11:52:06 SQL> -- I comment out sections related to score-feedback.
11:52:06 SQL> -- I tested score-feeback and it hurts results:
11:52:06 SQL> 
11:52:06 SQL> -- CREATE OR REPLACE VIEW sc12 AS
11:52:06 SQL> -- SELECT
11:52:06 SQL> -- m.pair
11:52:06 SQL> -- ,m.ydate
11:52:06 SQL> -- ,m.prdate
11:52:06 SQL> -- ,l.score score_long
11:52:06 SQL> -- ,s.score score_short
11:52:06 SQL> -- ,m.g6
11:52:06 SQL> -- FROM svm62scores l,svm62scores s,svm6162 m
11:52:06 SQL> -- WHERE l.targ='gatt'
11:52:06 SQL> -- AND	 s.targ='gattn'
11:52:06 SQL> -- AND l.prdate = s.prdate
11:52:06 SQL> -- AND l.prdate = m.prdate
11:52:06 SQL> -- -- Speed things up:
11:52:06 SQL> -- AND l.pair = '&1'
11:52:06 SQL> -- AND s.pair = '&1'
11:52:06 SQL> -- /
11:52:06 SQL> --
11:52:06 SQL> -- DROP TABLE score_corr;
11:52:06 SQL> --
11:52:06 SQL> -- CREATE TABLE score_corr COMPRESS AS
11:52:06 SQL> -- SELECT
11:52:06 SQL> -- pair
11:52:06 SQL> -- -- ,ydate
11:52:06 SQL> -- ,prdate
11:52:06 SQL> -- -- Find corr() tween score and g6 over 2 day period:
11:52:06 SQL> -- ,CORR((score_long - score_short),g6)
11:52:06 SQL> --   OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 2*24*60/5 PRECEDING AND CURRENT ROW)sc_corr
11:52:06 SQL> -- FROM sc12
11:52:06 SQL> -- /
11:52:06 SQL> 
11:52:06 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.06
11:52:06 SQL> 
11:52:06 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.61
11:52:06 SQL> 
11:52:06 SQL> CREATE TABLE modsrc COMPRESS AS
11:52:06   2  SELECT
11:52:06   3  pair
11:52:06   4  ,ydate
11:52:06   5  ,prdate
11:52:06   6  ,trend
11:52:06   7  ,g6
11:52:06   8  ,gatt
11:52:06   9  ,gattn
11:52:06  10  ,SUM(g6)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g00
11:52:06  11  ,SUM(g6)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g01
11:52:06  12  ,SUM(g6)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g02
11:52:06  13  ,SUM(g6)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g03
11:52:06  14  ,SUM(g6)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g04
11:52:06  15  ,SUM(g6)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g05
11:52:06  16  ,SUM(g6)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g06
11:52:06  17  ,SUM(g6)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g07
11:52:06  18  ,SUM(g6)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g08
11:52:06  19  ,SUM(g6)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g09
11:52:06  20  ,SUM(g6)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g10
11:52:06  21  ,SUM(g6)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g11
11:52:06  22  ,SUM(g6)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g12
11:52:06  23  ,SUM(g6)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g13
11:52:06  24  ,SUM(g6)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g14
11:52:06  25  ,SUM(g6)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g15
11:52:06  26  ,SUM(g6)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g16
11:52:06  27  ,SUM(g6)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g17
11:52:06  28  ,SUM(g6)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g18
11:52:06  29  ,SUM(g6)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g19
11:52:06  30  ,SUM(g6)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g20
11:52:06  31  ,SUM(g6)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g21
11:52:06  32  ,SUM(g6)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g22
11:52:06  33  ,SUM(g6)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g23
11:52:06  34  ,SUM(g6)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g24
11:52:06  35  ,SUM(g6)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g25
11:52:06  36  ,SUM(g6)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g26
11:52:06  37  ,SUM(g6)OVER(PARTITION BY trend,att27 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g27
11:52:06  38  ,SUM(g6)OVER(PARTITION BY trend,att28 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g28
11:52:06  39  ,SUM(g6)OVER(PARTITION BY trend,att29 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g29
11:52:06  40  ,SUM(g6)OVER(PARTITION BY trend,att30 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g30
11:52:06  41  ,SUM(g6)OVER(PARTITION BY trend,att31 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g31
11:52:06  42  ,SUM(g6)OVER(PARTITION BY trend,att32 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g32
11:52:06  43  ,SUM(g6)OVER(PARTITION BY trend,att33 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g33
11:52:06  44  ,SUM(g6)OVER(PARTITION BY trend,att34 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g34
11:52:06  45  ,SUM(g6)OVER(PARTITION BY trend,att35 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g35
11:52:06  46  ,SUM(g6)OVER(PARTITION BY trend,att36 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g36
11:52:06  47  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g37
11:52:06  48  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*40 PRECEDING AND CURRENT ROW)g38
11:52:06  49  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*30 PRECEDING AND CURRENT ROW)g39
11:52:06  50  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)g40
11:52:06  51  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)g41
11:52:06  52  FROM svm6162
11:52:06  53  /

Table created.

Elapsed: 00:00:06.78
11:52:13 SQL> 
11:52:13 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:02.68
11:52:16 SQL> 
11:52:16 SQL> -- rpt
11:52:16 SQL> 
11:52:16 SQL> SELECT
11:52:16   2  pair
11:52:16   3  ,trend
11:52:16   4  ,gatt
11:52:16   5  ,COUNT(pair)
11:52:16   6  ,AVG(g6)
11:52:16   7  FROM modsrc
11:52:16   8  GROUP BY pair,trend,gatt
11:52:16   9  ORDER BY pair,trend,gatt
11:52:16  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_aud 	-1 nup	      6333 -.00258673
eur_aud 	-1 up	      3422 .003880699
eur_aud 	 1 nup	      5872 -.00234102
eur_aud 	 1 up	      3484 .004187314
eur_aud 	 1		72

Elapsed: 00:00:00.06
11:52:16 SQL> 
11:52:16 SQL> 
11:52:16 SQL> SELECT pair,COUNT(pair)FROM svm6102 GROUP BY pair;

PAIR	COUNT(PAIR)
------- -----------
eur_aud       19183

Elapsed: 00:00:00.86
11:52:17 SQL> 
11:52:17 SQL> SELECT pair,COUNT(pair)FROM modsrc GROUP BY pair;

PAIR	COUNT(PAIR)
------- -----------
eur_aud       19183

Elapsed: 00:00:00.01
11:52:17 SQL> 
11:52:17 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
