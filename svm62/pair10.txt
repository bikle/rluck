
SQL*Plus: Release 11.2.0.1.0 Production on Sat Feb 26 00:10:05 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

00:10:05 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
00:10:05 SQL> 00:10:05 SQL> --
00:10:05 SQL> -- pair10.sql
00:10:05 SQL> --
00:10:05 SQL> 
00:10:05 SQL> -- Creates views and tables needed by SVM.
00:10:05 SQL> 
00:10:05 SQL> 
00:10:05 SQL> CREATE OR REPLACE VIEW svm6102 AS
00:10:05   2  SELECT
00:10:05   3  pair
00:10:05   4  ,ydate
00:10:05   5  ,prdate
00:10:05   6  ,rownum rnum -- acts as t in my time-series
00:10:05   7  ,clse
00:10:05   8  -- Derive a bunch of attributes from clse, the latest price:
00:10:05   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
00:10:05  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
00:10:05  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
00:10:05  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
00:10:05  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
00:10:05  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
00:10:05  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
00:10:05  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
00:10:05  17  --
00:10:05  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
00:10:05  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
00:10:05  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
00:10:05  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
00:10:05  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
00:10:05  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
00:10:05  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
00:10:05  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
00:10:05  26  --
00:10:05  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
00:10:05  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
00:10:05  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
00:10:05  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
00:10:05  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
00:10:05  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
00:10:05  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
00:10:05  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
00:10:05  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
00:10:05  36  FROM di5min WHERE pair = '&1'
00:10:05  37  AND ydate > sysdate - 95
00:10:05  38  ORDER BY ydate
00:10:05  39  /
old  36: FROM di5min WHERE pair = '&1'
new  36: FROM di5min WHERE pair = 'eur_jpy'

View created.

Elapsed: 00:00:00.05
00:10:05 SQL> 
00:10:05 SQL> -- rpt
00:10:05 SQL> 
00:10:05 SQL> SELECT
00:10:05   2  pair
00:10:05   3  ,COUNT(pair)
00:10:05   4  ,MIN(clse),MAX(clse)
00:10:05   5  ,MIN(avg6),MAX(avg6)
00:10:05   6  ,MIN(ydate),MAX(ydate)
00:10:05   7  FROM svm6102
00:10:05   8  GROUP BY pair
00:10:05   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_jpy       19594 106.906797 113.974872 107.120556 113.820864 2010-11-23 00:15:00 2011-02-25 21:55:00

Elapsed: 00:00:00.80
00:10:06 SQL> 
00:10:06 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
00:10:06 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.14
00:10:06 SQL> CREATE TABLE svm6122 COMPRESS AS
00:10:06   2  SELECT
00:10:06   3  pair
00:10:06   4  ,ydate
00:10:06   5  ,prdate
00:10:06   6  ,clse
00:10:06   7  -- g6 is important. I want to predict g6:
00:10:06   8  ,(ld6 - clse)/clse g6
00:10:06   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
00:10:06  10  -- I want more attributes from the ones I derived above:
00:10:06  11  -- clse relation to moving-min
00:10:06  12  ,clse-min4  cm4
00:10:06  13  ,clse-min6  cm6
00:10:06  14  ,clse-min8  cm8
00:10:06  15  ,clse-min10 cm10
00:10:06  16  ,clse-min12 cm12
00:10:06  17  ,clse-min14 cm14
00:10:06  18  ,clse-min16 cm16
00:10:06  19  ,clse-min18 cm18
00:10:06  20  -- clse relation to moving-avg
00:10:06  21  ,clse-avg4  ca4
00:10:06  22  ,clse-avg6  ca6
00:10:06  23  ,clse-avg8  ca8
00:10:06  24  ,clse-avg10 ca10
00:10:06  25  ,clse-avg12 ca12
00:10:06  26  ,clse-avg14 ca14
00:10:06  27  ,clse-avg16 ca16
00:10:06  28  ,clse-avg18 ca18
00:10:06  29  -- clse relation to moving-max
00:10:06  30  ,clse-max4  cx4
00:10:06  31  ,clse-max6  cx6
00:10:06  32  ,clse-max8  cx8
00:10:06  33  ,clse-max10 cx10
00:10:06  34  ,clse-max12 cx12
00:10:06  35  ,clse-max14 cx14
00:10:06  36  ,clse-max16 cx16
00:10:06  37  ,clse-max18 cx18
00:10:06  38  -- Derive more attributes.
00:10:06  39  -- I want to use CORR() here to help SVM see the shape of the series.
00:10:06  40  -- But COVAR_POP is more stable:
00:10:06  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
00:10:06  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
00:10:06  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
00:10:06  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
00:10:06  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
00:10:06  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
00:10:06  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
00:10:06  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
00:10:06  49  -- Derive date related attributes:
00:10:06  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
00:10:06  51  ,0+TO_CHAR(ydate,'D')d
00:10:06  52  ,0+TO_CHAR(ydate,'W')w
00:10:06  53  -- mpm stands for minutes-past-midnight:
00:10:06  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
00:10:06  55  -- mph stands for minutes-past-hour:
00:10:06  56  ,0+TO_CHAR(ydate,'MI')mph
00:10:06  57  FROM svm6102
00:10:06  58  WHERE clse > 0
00:10:06  59  ORDER BY ydate
00:10:06  60  /

Table created.

Elapsed: 00:00:02.16
00:10:08 SQL> 
00:10:08 SQL> -- rpt
00:10:08 SQL> 
00:10:08 SQL> SELECT
00:10:08   2  pair
00:10:08   3  ,COUNT(pair)
00:10:08   4  ,MIN(clse),MAX(clse)
00:10:08   5  ,MIN(ydate),MAX(ydate)
00:10:08   6  FROM svm6122
00:10:08   7  GROUP BY pair
00:10:08   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_jpy       19594 106.906797 113.974872 2010-11-23 00:15:00 2011-02-25 21:55:00

Elapsed: 00:00:00.04
00:10:08 SQL> 
00:10:08 SQL> -- Prepare for derivation of NTILE based params:
00:10:08 SQL> 
00:10:08 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.27
00:10:09 SQL> CREATE TABLE svm6142 COMPRESS AS
00:10:09   2  SELECT
00:10:09   3  pair
00:10:09   4  ,ydate
00:10:09   5  ,prdate
00:10:09   6  ,clse
00:10:09   7  ,g6
00:10:09   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
00:10:09   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
00:10:09  10  ,CASE WHEN trend IS NULL THEN 1
00:10:09  11  	    WHEN trend =0      THEN 1
00:10:09  12  	    ELSE trend END trend
00:10:09  13  ,cm4
00:10:09  14  ,cm6
00:10:09  15  ,cm8
00:10:09  16  ,cm10
00:10:09  17  ,cm12
00:10:09  18  ,cm14
00:10:09  19  ,cm16
00:10:09  20  ,cm18
00:10:09  21  --
00:10:09  22  ,ca4
00:10:09  23  ,ca6
00:10:09  24  ,ca8
00:10:09  25  ,ca10
00:10:09  26  ,ca12
00:10:09  27  ,ca14
00:10:09  28  ,ca16
00:10:09  29  ,ca18
00:10:09  30  --
00:10:09  31  ,cx4
00:10:09  32  ,cx6
00:10:09  33  ,cx8
00:10:09  34  ,cx10
00:10:09  35  ,cx12
00:10:09  36  ,cx14
00:10:09  37  ,cx16
00:10:09  38  ,cx18
00:10:09  39  --
00:10:09  40  ,crr4
00:10:09  41  ,crr6
00:10:09  42  ,crr8
00:10:09  43  ,crr10
00:10:09  44  ,crr12
00:10:09  45  ,crr14
00:10:09  46  ,crr16
00:10:09  47  ,crr18
00:10:09  48  --
00:10:09  49  ,hh
00:10:09  50  ,d
00:10:09  51  ,w
00:10:09  52  ,mpm
00:10:09  53  ,mph
00:10:09  54  FROM svm6122
00:10:09  55  ORDER BY ydate
00:10:09  56  /

Table created.

Elapsed: 00:00:00.47
00:10:09 SQL> 
00:10:09 SQL> -- rpt
00:10:09 SQL> 
00:10:09 SQL> SELECT
00:10:09   2  pair
00:10:09   3  ,trend
00:10:09   4  ,gatt
00:10:09   5  ,COUNT(pair)
00:10:09   6  ,AVG(g6)
00:10:09   7  FROM svm6142
00:10:09   8  GROUP BY pair,trend,gatt
00:10:09   9  ORDER BY pair,trend,gatt
00:10:09  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_jpy 	-1 nup	      6048 -.00185117
eur_jpy 	-1 up	      3259 .003291996
eur_jpy 	-1		71
eur_jpy 	 1 nup	      6949 -.00161805
eur_jpy 	 1 up	      3266 .003463116
eur_jpy 	 1		 1

6 rows selected.

Elapsed: 00:00:00.04
00:10:09 SQL> 
00:10:09 SQL> 
00:10:09 SQL> -- Derive NTILE based params:
00:10:09 SQL> 
00:10:09 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.18
00:10:09 SQL> CREATE TABLE svm6162 COMPRESS AS
00:10:09   2  SELECT
00:10:09   3  pair
00:10:09   4  ,ydate
00:10:09   5  ,prdate
00:10:09   6  ,clse
00:10:09   7  ,g6
00:10:09   8  ,gatt
00:10:09   9  ,gattn
00:10:09  10  ,trend
00:10:09  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
00:10:09  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
00:10:09  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
00:10:09  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
00:10:09  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
00:10:09  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
00:10:09  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
00:10:09  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
00:10:09  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
00:10:09  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
00:10:09  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
00:10:09  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
00:10:09  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
00:10:09  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
00:10:09  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
00:10:09  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
00:10:09  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
00:10:09  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
00:10:09  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
00:10:09  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
00:10:09  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
00:10:09  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
00:10:09  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
00:10:09  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
00:10:09  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
00:10:09  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
00:10:09  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
00:10:09  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
00:10:09  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
00:10:09  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
00:10:09  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
00:10:09  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
00:10:09  43  ,hh  att32
00:10:09  44  ,d   att33
00:10:09  45  ,w   att34
00:10:09  46  ,mpm att35
00:10:09  47  ,mph att36
00:10:09  48  ,trend att37
00:10:09  49  FROM svm6142
00:10:09  50  ORDER BY ydate
00:10:09  51  /

Table created.

Elapsed: 00:00:05.01
00:10:14 SQL> 
00:10:14 SQL> -- rpt
00:10:14 SQL> 
00:10:14 SQL> SELECT
00:10:14   2  pair
00:10:14   3  ,trend
00:10:14   4  ,gatt
00:10:14   5  ,COUNT(pair)
00:10:14   6  ,AVG(g6)
00:10:14   7  FROM svm6162
00:10:14   8  GROUP BY pair,trend,gatt
00:10:14   9  ORDER BY pair,trend,gatt
00:10:14  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_jpy 	-1 nup	      6048 -.00185117
eur_jpy 	-1 up	      3259 .003291996
eur_jpy 	-1		71
eur_jpy 	 1 nup	      6949 -.00161805
eur_jpy 	 1 up	      3266 .003463116
eur_jpy 	 1		 1

6 rows selected.

Elapsed: 00:00:00.03
00:10:14 SQL> 
00:10:14 SQL> -- I comment out sections related to score-feedback.
00:10:14 SQL> -- I tested score-feeback and it hurts results:
00:10:14 SQL> 
00:10:14 SQL> -- CREATE OR REPLACE VIEW sc12 AS
00:10:14 SQL> -- SELECT
00:10:14 SQL> -- m.pair
00:10:14 SQL> -- ,m.ydate
00:10:14 SQL> -- ,m.prdate
00:10:14 SQL> -- ,l.score score_long
00:10:14 SQL> -- ,s.score score_short
00:10:14 SQL> -- ,m.g6
00:10:14 SQL> -- FROM svm62scores l,svm62scores s,svm6162 m
00:10:14 SQL> -- WHERE l.targ='gatt'
00:10:14 SQL> -- AND	 s.targ='gattn'
00:10:14 SQL> -- AND l.prdate = s.prdate
00:10:14 SQL> -- AND l.prdate = m.prdate
00:10:14 SQL> -- -- Speed things up:
00:10:14 SQL> -- AND l.pair = '&1'
00:10:14 SQL> -- AND s.pair = '&1'
00:10:14 SQL> -- /
00:10:14 SQL> --
00:10:14 SQL> -- DROP TABLE score_corr;
00:10:14 SQL> --
00:10:14 SQL> -- CREATE TABLE score_corr COMPRESS AS
00:10:14 SQL> -- SELECT
00:10:14 SQL> -- pair
00:10:14 SQL> -- -- ,ydate
00:10:14 SQL> -- ,prdate
00:10:14 SQL> -- -- Find corr() tween score and g6 over 2 day period:
00:10:14 SQL> -- ,CORR((score_long - score_short),g6)
00:10:14 SQL> --   OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 2*24*60/5 PRECEDING AND CURRENT ROW)sc_corr
00:10:14 SQL> -- FROM sc12
00:10:14 SQL> -- /
00:10:14 SQL> 
00:10:14 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.26
00:10:15 SQL> 
00:10:15 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.29
00:10:15 SQL> 
00:10:15 SQL> CREATE TABLE modsrc COMPRESS AS
00:10:15   2  SELECT
00:10:15   3  pair
00:10:15   4  ,ydate
00:10:15   5  ,prdate
00:10:15   6  ,trend
00:10:15   7  ,g6
00:10:15   8  ,gatt
00:10:15   9  ,gattn
00:10:15  10  ,SUM(g6)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g00
00:10:15  11  ,SUM(g6)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g01
00:10:15  12  ,SUM(g6)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g02
00:10:15  13  ,SUM(g6)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g03
00:10:15  14  ,SUM(g6)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g04
00:10:15  15  ,SUM(g6)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g05
00:10:15  16  ,SUM(g6)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g06
00:10:15  17  ,SUM(g6)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g07
00:10:15  18  ,SUM(g6)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g08
00:10:15  19  ,SUM(g6)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g09
00:10:15  20  ,SUM(g6)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g10
00:10:15  21  ,SUM(g6)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g11
00:10:15  22  ,SUM(g6)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g12
00:10:15  23  ,SUM(g6)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g13
00:10:15  24  ,SUM(g6)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g14
00:10:15  25  ,SUM(g6)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g15
00:10:15  26  ,SUM(g6)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g16
00:10:15  27  ,SUM(g6)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g17
00:10:15  28  ,SUM(g6)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g18
00:10:15  29  ,SUM(g6)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g19
00:10:15  30  ,SUM(g6)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g20
00:10:15  31  ,SUM(g6)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g21
00:10:15  32  ,SUM(g6)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g22
00:10:15  33  ,SUM(g6)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g23
00:10:15  34  ,SUM(g6)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g24
00:10:15  35  ,SUM(g6)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g25
00:10:15  36  ,SUM(g6)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g26
00:10:15  37  ,SUM(g6)OVER(PARTITION BY trend,att27 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g27
00:10:15  38  ,SUM(g6)OVER(PARTITION BY trend,att28 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g28
00:10:15  39  ,SUM(g6)OVER(PARTITION BY trend,att29 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g29
00:10:15  40  ,SUM(g6)OVER(PARTITION BY trend,att30 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g30
00:10:15  41  ,SUM(g6)OVER(PARTITION BY trend,att31 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g31
00:10:15  42  ,SUM(g6)OVER(PARTITION BY trend,att32 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g32
00:10:15  43  ,SUM(g6)OVER(PARTITION BY trend,att33 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g33
00:10:15  44  ,SUM(g6)OVER(PARTITION BY trend,att34 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g34
00:10:15  45  ,SUM(g6)OVER(PARTITION BY trend,att35 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g35
00:10:15  46  ,SUM(g6)OVER(PARTITION BY trend,att36 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g36
00:10:15  47  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g37
00:10:15  48  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*40 PRECEDING AND CURRENT ROW)g38
00:10:15  49  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*30 PRECEDING AND CURRENT ROW)g39
00:10:15  50  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)g40
00:10:15  51  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)g41
00:10:15  52  FROM svm6162
00:10:15  53  /

Table created.

Elapsed: 00:00:06.81
00:10:22 SQL> 
00:10:22 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:02.97
00:10:25 SQL> 
00:10:25 SQL> -- rpt
00:10:25 SQL> 
00:10:25 SQL> SELECT
00:10:25   2  pair
00:10:25   3  ,trend
00:10:25   4  ,gatt
00:10:25   5  ,COUNT(pair)
00:10:25   6  ,AVG(g6)
00:10:25   7  FROM modsrc
00:10:25   8  GROUP BY pair,trend,gatt
00:10:25   9  ORDER BY pair,trend,gatt
00:10:25  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_jpy 	-1 nup	      6048 -.00185117
eur_jpy 	-1 up	      3259 .003291996
eur_jpy 	-1		71
eur_jpy 	 1 nup	      6949 -.00161805
eur_jpy 	 1 up	      3266 .003463116
eur_jpy 	 1		 1

6 rows selected.

Elapsed: 00:00:00.03
00:10:25 SQL> 
00:10:25 SQL> 
00:10:25 SQL> SELECT pair,COUNT(pair)FROM svm6102 GROUP BY pair;

PAIR	COUNT(PAIR)
------- -----------
eur_jpy       19594

Elapsed: 00:00:00.78
00:10:25 SQL> 
00:10:25 SQL> SELECT pair,COUNT(pair)FROM modsrc GROUP BY pair;

PAIR	COUNT(PAIR)
------- -----------
eur_jpy       19594

Elapsed: 00:00:00.01
00:10:25 SQL> 
00:10:25 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
