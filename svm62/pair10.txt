
SQL*Plus: Release 11.2.0.1.0 Production on Sat Feb 19 00:07:50 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

00:07:51 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
00:07:51 SQL> 00:07:51 SQL> --
00:07:51 SQL> -- pair10.sql
00:07:51 SQL> --
00:07:51 SQL> 
00:07:51 SQL> -- Creates views and tables needed by SVM.
00:07:51 SQL> 
00:07:51 SQL> 
00:07:51 SQL> CREATE OR REPLACE VIEW svm6102 AS
00:07:51   2  SELECT
00:07:51   3  pair
00:07:51   4  ,ydate
00:07:51   5  ,prdate
00:07:51   6  ,rownum rnum -- acts as t in my time-series
00:07:51   7  ,clse
00:07:51   8  -- Derive a bunch of attributes from clse, the latest price:
00:07:51   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
00:07:51  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
00:07:51  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
00:07:51  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
00:07:51  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
00:07:51  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
00:07:51  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
00:07:51  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
00:07:51  17  --
00:07:51  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
00:07:51  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
00:07:51  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
00:07:51  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
00:07:51  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
00:07:51  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
00:07:51  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
00:07:51  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
00:07:51  26  --
00:07:51  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
00:07:51  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
00:07:51  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
00:07:51  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
00:07:51  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
00:07:51  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
00:07:51  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
00:07:51  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
00:07:51  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
00:07:51  36  FROM di5min WHERE pair = '&1'
00:07:51  37  AND ydate > sysdate - 95
00:07:51  38  ORDER BY ydate
00:07:51  39  /
old  36: FROM di5min WHERE pair = '&1'
new  36: FROM di5min WHERE pair = 'usd_jpy'

View created.

Elapsed: 00:00:00.04
00:07:51 SQL> 
00:07:51 SQL> -- rpt
00:07:51 SQL> 
00:07:51 SQL> SELECT
00:07:51   2  pair
00:07:51   3  ,COUNT(pair)
00:07:51   4  ,MIN(clse),MAX(clse)
00:07:51   5  ,MIN(avg6),MAX(avg6)
00:07:51   6  ,MIN(ydate),MAX(ydate)
00:07:51   7  FROM svm6102
00:07:51   8  GROUP BY pair
00:07:51   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_jpy       19617    81.0225	   84.485 81.1881201 84.3105479 2010-11-16 00:10:00 2011-02-18 21:55:00

Elapsed: 00:00:00.85
00:07:51 SQL> 
00:07:51 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
00:07:51 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.34
00:07:52 SQL> CREATE TABLE svm6122 COMPRESS AS
00:07:52   2  SELECT
00:07:52   3  pair
00:07:52   4  ,ydate
00:07:52   5  ,prdate
00:07:52   6  ,clse
00:07:52   7  -- g6 is important. I want to predict g6:
00:07:52   8  ,ld6 - clse g6
00:07:52   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
00:07:52  10  -- I want more attributes from the ones I derived above:
00:07:52  11  -- clse relation to moving-min
00:07:52  12  ,clse-min4  cm4
00:07:52  13  ,clse-min6  cm6
00:07:52  14  ,clse-min8  cm8
00:07:52  15  ,clse-min10 cm10
00:07:52  16  ,clse-min12 cm12
00:07:52  17  ,clse-min14 cm14
00:07:52  18  ,clse-min16 cm16
00:07:52  19  ,clse-min18 cm18
00:07:52  20  -- clse relation to moving-avg
00:07:52  21  ,clse-avg4  ca4
00:07:52  22  ,clse-avg6  ca6
00:07:52  23  ,clse-avg8  ca8
00:07:52  24  ,clse-avg10 ca10
00:07:52  25  ,clse-avg12 ca12
00:07:52  26  ,clse-avg14 ca14
00:07:52  27  ,clse-avg16 ca16
00:07:52  28  ,clse-avg18 ca18
00:07:52  29  -- clse relation to moving-max
00:07:52  30  ,clse-max4  cx4
00:07:52  31  ,clse-max6  cx6
00:07:52  32  ,clse-max8  cx8
00:07:52  33  ,clse-max10 cx10
00:07:52  34  ,clse-max12 cx12
00:07:52  35  ,clse-max14 cx14
00:07:52  36  ,clse-max16 cx16
00:07:52  37  ,clse-max18 cx18
00:07:52  38  -- Derive more attributes.
00:07:52  39  -- I want to use CORR() here to help SVM see the shape of the series.
00:07:52  40  -- But COVAR_POP is more stable:
00:07:52  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
00:07:52  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
00:07:52  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
00:07:52  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
00:07:52  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
00:07:52  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
00:07:52  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
00:07:52  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
00:07:52  49  -- Derive date related attributes:
00:07:52  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
00:07:52  51  ,0+TO_CHAR(ydate,'D')d
00:07:52  52  ,0+TO_CHAR(ydate,'W')w
00:07:52  53  -- mpm stands for minutes-past-midnight:
00:07:52  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
00:07:52  55  -- mph stands for minutes-past-hour:
00:07:52  56  ,0+TO_CHAR(ydate,'MI')mph
00:07:52  57  FROM svm6102
00:07:52  58  ORDER BY ydate
00:07:52  59  /

Table created.

Elapsed: 00:00:02.18
00:07:54 SQL> 
00:07:54 SQL> -- rpt
00:07:54 SQL> 
00:07:54 SQL> SELECT
00:07:54   2  pair
00:07:54   3  ,COUNT(pair)
00:07:54   4  ,MIN(clse),MAX(clse)
00:07:54   5  ,MIN(ydate),MAX(ydate)
00:07:54   6  FROM svm6122
00:07:54   7  GROUP BY pair
00:07:54   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_jpy       19617    81.0225	   84.485 2010-11-16 00:10:00 2011-02-18 21:55:00

Elapsed: 00:00:00.05
00:07:54 SQL> 
00:07:54 SQL> -- Prepare for derivation of NTILE based params:
00:07:54 SQL> 
00:07:54 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.19
00:07:54 SQL> CREATE TABLE svm6142 COMPRESS AS
00:07:54   2  SELECT
00:07:54   3  pair
00:07:54   4  ,ydate
00:07:54   5  ,prdate
00:07:54   6  ,clse
00:07:54   7  ,g6
00:07:54   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
00:07:54   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
00:07:54  10  ,CASE WHEN trend IS NULL THEN 1
00:07:54  11  	    WHEN trend =0      THEN 1
00:07:54  12  	    ELSE trend END trend
00:07:54  13  ,cm4
00:07:54  14  ,cm6
00:07:54  15  ,cm8
00:07:54  16  ,cm10
00:07:54  17  ,cm12
00:07:54  18  ,cm14
00:07:54  19  ,cm16
00:07:54  20  ,cm18
00:07:54  21  --
00:07:54  22  ,ca4
00:07:54  23  ,ca6
00:07:54  24  ,ca8
00:07:54  25  ,ca10
00:07:54  26  ,ca12
00:07:54  27  ,ca14
00:07:54  28  ,ca16
00:07:54  29  ,ca18
00:07:54  30  --
00:07:54  31  ,cx4
00:07:54  32  ,cx6
00:07:54  33  ,cx8
00:07:54  34  ,cx10
00:07:54  35  ,cx12
00:07:54  36  ,cx14
00:07:54  37  ,cx16
00:07:54  38  ,cx18
00:07:54  39  --
00:07:54  40  ,crr4
00:07:54  41  ,crr6
00:07:54  42  ,crr8
00:07:54  43  ,crr10
00:07:54  44  ,crr12
00:07:54  45  ,crr14
00:07:54  46  ,crr16
00:07:54  47  ,crr18
00:07:54  48  --
00:07:54  49  ,hh
00:07:54  50  ,d
00:07:54  51  ,w
00:07:54  52  ,mpm
00:07:54  53  ,mph
00:07:54  54  FROM svm6122
00:07:54  55  ORDER BY ydate
00:07:54  56  /

Table created.

Elapsed: 00:00:00.39
00:07:55 SQL> 
00:07:55 SQL> -- rpt
00:07:55 SQL> 
00:07:55 SQL> SELECT
00:07:55   2  pair
00:07:55   3  ,trend
00:07:55   4  ,gatt
00:07:55   5  ,COUNT(pair)
00:07:55   6  ,AVG(g6)
00:07:55   7  FROM svm6142
00:07:55   8  GROUP BY pair,trend,gatt
00:07:55   9  ORDER BY pair,trend,gatt
00:07:55  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5065 -.15022523
usd_jpy 	-1 up	      4896 .157799511
usd_jpy 	-1		72
usd_jpy 	 1 nup	      5019 -.15485656
usd_jpy 	 1 up	      4565 .169173216

Elapsed: 00:00:00.03
00:07:55 SQL> 
00:07:55 SQL> 
00:07:55 SQL> -- Derive NTILE based params:
00:07:55 SQL> 
00:07:55 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.18
00:07:55 SQL> CREATE TABLE svm6162 COMPRESS AS
00:07:55   2  SELECT
00:07:55   3  pair
00:07:55   4  ,ydate
00:07:55   5  ,prdate
00:07:55   6  ,clse
00:07:55   7  ,g6
00:07:55   8  ,gatt
00:07:55   9  ,gattn
00:07:55  10  ,trend
00:07:55  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
00:07:55  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
00:07:55  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
00:07:55  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
00:07:55  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
00:07:55  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
00:07:55  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
00:07:55  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
00:07:55  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
00:07:55  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
00:07:55  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
00:07:55  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
00:07:55  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
00:07:55  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
00:07:55  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
00:07:55  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
00:07:55  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
00:07:55  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
00:07:55  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
00:07:55  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
00:07:55  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
00:07:55  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
00:07:55  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
00:07:55  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
00:07:55  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
00:07:55  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
00:07:55  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
00:07:55  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
00:07:55  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
00:07:55  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
00:07:55  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
00:07:55  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
00:07:55  43  ,hh  att32
00:07:55  44  ,d   att33
00:07:55  45  ,w   att34
00:07:55  46  ,mpm att35
00:07:55  47  ,mph att36
00:07:55  48  ,trend att37
00:07:55  49  FROM svm6142
00:07:55  50  ORDER BY ydate
00:07:55  51  /

Table created.

Elapsed: 00:00:04.99
00:08:00 SQL> 
00:08:00 SQL> -- rpt
00:08:00 SQL> 
00:08:00 SQL> SELECT
00:08:00   2  pair
00:08:00   3  ,trend
00:08:00   4  ,gatt
00:08:00   5  ,COUNT(pair)
00:08:00   6  ,AVG(g6)
00:08:00   7  FROM svm6162
00:08:00   8  GROUP BY pair,trend,gatt
00:08:00   9  ORDER BY pair,trend,gatt
00:08:00  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5065 -.15022523
usd_jpy 	-1 up	      4896 .157799511
usd_jpy 	-1		72
usd_jpy 	 1 nup	      5019 -.15485656
usd_jpy 	 1 up	      4565 .169173216

Elapsed: 00:00:00.03
00:08:00 SQL> 
00:08:00 SQL> -- I comment out sections related to score-feedback.
00:08:00 SQL> -- I tested score-feeback and it hurts results:
00:08:00 SQL> 
00:08:00 SQL> -- CREATE OR REPLACE VIEW sc12 AS
00:08:00 SQL> -- SELECT
00:08:00 SQL> -- m.pair
00:08:00 SQL> -- ,m.ydate
00:08:00 SQL> -- ,m.prdate
00:08:00 SQL> -- ,l.score score_long
00:08:00 SQL> -- ,s.score score_short
00:08:00 SQL> -- ,m.g6
00:08:00 SQL> -- FROM svm62scores l,svm62scores s,svm6162 m
00:08:00 SQL> -- WHERE l.targ='gatt'
00:08:00 SQL> -- AND	 s.targ='gattn'
00:08:00 SQL> -- AND l.prdate = s.prdate
00:08:00 SQL> -- AND l.prdate = m.prdate
00:08:00 SQL> -- -- Speed things up:
00:08:00 SQL> -- AND l.pair = '&1'
00:08:00 SQL> -- AND s.pair = '&1'
00:08:00 SQL> -- /
00:08:00 SQL> --
00:08:00 SQL> -- DROP TABLE score_corr;
00:08:00 SQL> --
00:08:00 SQL> -- CREATE TABLE score_corr COMPRESS AS
00:08:00 SQL> -- SELECT
00:08:00 SQL> -- pair
00:08:00 SQL> -- -- ,ydate
00:08:00 SQL> -- ,prdate
00:08:00 SQL> -- -- Find corr() tween score and g6 over 2 day period:
00:08:00 SQL> -- ,CORR((score_long - score_short),g6)
00:08:00 SQL> --   OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 2*24*60/5 PRECEDING AND CURRENT ROW)sc_corr
00:08:00 SQL> -- FROM sc12
00:08:00 SQL> -- /
00:08:00 SQL> 
00:08:00 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.25
00:08:00 SQL> 
00:08:00 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.27
00:08:00 SQL> 
00:08:00 SQL> CREATE TABLE modsrc COMPRESS AS
00:08:00   2  SELECT
00:08:00   3  pair
00:08:00   4  ,ydate
00:08:00   5  ,prdate
00:08:00   6  ,trend
00:08:00   7  ,g6
00:08:00   8  ,gatt
00:08:00   9  ,gattn
00:08:00  10  ,SUM(g6)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g00
00:08:00  11  ,SUM(g6)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g01
00:08:00  12  ,SUM(g6)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g02
00:08:00  13  ,SUM(g6)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g03
00:08:00  14  ,SUM(g6)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g04
00:08:00  15  ,SUM(g6)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g05
00:08:00  16  ,SUM(g6)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g06
00:08:00  17  ,SUM(g6)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g07
00:08:00  18  ,SUM(g6)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g08
00:08:00  19  ,SUM(g6)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g09
00:08:00  20  ,SUM(g6)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g10
00:08:00  21  ,SUM(g6)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g11
00:08:00  22  ,SUM(g6)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g12
00:08:00  23  ,SUM(g6)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g13
00:08:00  24  ,SUM(g6)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g14
00:08:00  25  ,SUM(g6)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g15
00:08:00  26  ,SUM(g6)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g16
00:08:00  27  ,SUM(g6)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g17
00:08:00  28  ,SUM(g6)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g18
00:08:00  29  ,SUM(g6)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g19
00:08:00  30  ,SUM(g6)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g20
00:08:00  31  ,SUM(g6)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g21
00:08:00  32  ,SUM(g6)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g22
00:08:00  33  ,SUM(g6)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g23
00:08:00  34  ,SUM(g6)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g24
00:08:00  35  ,SUM(g6)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g25
00:08:00  36  ,SUM(g6)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g26
00:08:00  37  ,SUM(g6)OVER(PARTITION BY trend,att27 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g27
00:08:00  38  ,SUM(g6)OVER(PARTITION BY trend,att28 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g28
00:08:00  39  ,SUM(g6)OVER(PARTITION BY trend,att29 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g29
00:08:00  40  ,SUM(g6)OVER(PARTITION BY trend,att30 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g30
00:08:00  41  ,SUM(g6)OVER(PARTITION BY trend,att31 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g31
00:08:00  42  ,SUM(g6)OVER(PARTITION BY trend,att32 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g32
00:08:00  43  ,SUM(g6)OVER(PARTITION BY trend,att33 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g33
00:08:00  44  ,SUM(g6)OVER(PARTITION BY trend,att34 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g34
00:08:00  45  ,SUM(g6)OVER(PARTITION BY trend,att35 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g35
00:08:00  46  ,SUM(g6)OVER(PARTITION BY trend,att36 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g36
00:08:00  47  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g37
00:08:00  48  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*40 PRECEDING AND CURRENT ROW)g38
00:08:00  49  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*30 PRECEDING AND CURRENT ROW)g39
00:08:00  50  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)g40
00:08:00  51  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)g41
00:08:00  52  FROM svm6162
00:08:00  53  /

Table created.

Elapsed: 00:00:06.23
00:08:07 SQL> 
00:08:07 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:02.41
00:08:09 SQL> 
00:08:09 SQL> -- rpt
00:08:09 SQL> 
00:08:09 SQL> SELECT
00:08:09   2  pair
00:08:09   3  ,trend
00:08:09   4  ,gatt
00:08:09   5  ,COUNT(pair)
00:08:09   6  ,AVG(g6)
00:08:09   7  FROM modsrc
00:08:09   8  GROUP BY pair,trend,gatt
00:08:09   9  ORDER BY pair,trend,gatt
00:08:09  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5065 -.15022523
usd_jpy 	-1 up	      4896 .157799511
usd_jpy 	-1		72
usd_jpy 	 1 nup	      5019 -.15485656
usd_jpy 	 1 up	      4565 .169173216

Elapsed: 00:00:00.02
00:08:09 SQL> 
00:08:09 SQL> 
00:08:09 SQL> SELECT pair,COUNT(pair)FROM svm6102 GROUP BY pair;

PAIR	COUNT(PAIR)
------- -----------
usd_jpy       19617

Elapsed: 00:00:00.82
00:08:10 SQL> 
00:08:10 SQL> SELECT pair,COUNT(pair)FROM modsrc GROUP BY pair;

PAIR	COUNT(PAIR)
------- -----------
usd_jpy       19617

Elapsed: 00:00:00.01
00:08:10 SQL> 
00:08:10 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
