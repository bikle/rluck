
SQL*Plus: Release 11.2.0.1.0 Production on Fri Feb 25 15:18:50 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

15:18:50 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
15:18:50 SQL> 15:18:50 SQL> --
15:18:50 SQL> -- pair10.sql
15:18:50 SQL> --
15:18:50 SQL> 
15:18:50 SQL> -- Creates views and tables needed by SVM.
15:18:50 SQL> 
15:18:50 SQL> 
15:18:50 SQL> CREATE OR REPLACE VIEW svm6102 AS
15:18:50   2  SELECT
15:18:50   3  pair
15:18:50   4  ,ydate
15:18:50   5  ,prdate
15:18:50   6  ,rownum rnum -- acts as t in my time-series
15:18:50   7  ,clse
15:18:50   8  -- Derive a bunch of attributes from clse, the latest price:
15:18:50   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
15:18:50  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
15:18:50  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
15:18:50  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
15:18:50  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
15:18:50  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
15:18:50  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
15:18:50  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
15:18:50  17  --
15:18:50  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
15:18:50  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
15:18:50  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
15:18:50  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
15:18:50  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
15:18:50  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
15:18:50  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
15:18:50  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
15:18:50  26  --
15:18:50  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
15:18:50  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
15:18:50  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
15:18:50  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
15:18:50  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
15:18:50  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
15:18:50  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
15:18:50  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
15:18:50  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
15:18:50  36  FROM di5min WHERE pair = '&1'
15:18:50  37  AND ydate > sysdate - 95
15:18:50  38  ORDER BY ydate
15:18:50  39  /
old  36: FROM di5min WHERE pair = '&1'
new  36: FROM di5min WHERE pair = 'gbp_usd'

View created.

Elapsed: 00:00:00.03
15:18:50 SQL> 
15:18:50 SQL> -- rpt
15:18:50 SQL> 
15:18:50 SQL> SELECT
15:18:50   2  pair
15:18:50   3  ,COUNT(pair)
15:18:50   4  ,MIN(clse),MAX(clse)
15:18:50   5  ,MIN(avg6),MAX(avg6)
15:18:50   6  ,MIN(ydate),MAX(ydate)
15:18:50   7  FROM svm6102
15:18:50   8  GROUP BY pair
15:18:50   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
gbp_usd       19625   1.535325	  1.62765 1.53696747 1.62466781 2010-11-22 15:20:00 2011-02-25 15:05:00

Elapsed: 00:00:00.83
15:18:51 SQL> 
15:18:51 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
15:18:51 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.27
15:18:51 SQL> CREATE TABLE svm6122 COMPRESS AS
15:18:51   2  SELECT
15:18:51   3  pair
15:18:51   4  ,ydate
15:18:51   5  ,prdate
15:18:51   6  ,clse
15:18:51   7  -- g6 is important. I want to predict g6:
15:18:51   8  ,(ld6 - clse)/clse g6
15:18:51   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
15:18:51  10  -- I want more attributes from the ones I derived above:
15:18:51  11  -- clse relation to moving-min
15:18:51  12  ,clse-min4  cm4
15:18:51  13  ,clse-min6  cm6
15:18:51  14  ,clse-min8  cm8
15:18:51  15  ,clse-min10 cm10
15:18:51  16  ,clse-min12 cm12
15:18:51  17  ,clse-min14 cm14
15:18:51  18  ,clse-min16 cm16
15:18:51  19  ,clse-min18 cm18
15:18:51  20  -- clse relation to moving-avg
15:18:51  21  ,clse-avg4  ca4
15:18:51  22  ,clse-avg6  ca6
15:18:51  23  ,clse-avg8  ca8
15:18:51  24  ,clse-avg10 ca10
15:18:51  25  ,clse-avg12 ca12
15:18:51  26  ,clse-avg14 ca14
15:18:51  27  ,clse-avg16 ca16
15:18:51  28  ,clse-avg18 ca18
15:18:51  29  -- clse relation to moving-max
15:18:51  30  ,clse-max4  cx4
15:18:51  31  ,clse-max6  cx6
15:18:51  32  ,clse-max8  cx8
15:18:51  33  ,clse-max10 cx10
15:18:51  34  ,clse-max12 cx12
15:18:51  35  ,clse-max14 cx14
15:18:51  36  ,clse-max16 cx16
15:18:51  37  ,clse-max18 cx18
15:18:51  38  -- Derive more attributes.
15:18:51  39  -- I want to use CORR() here to help SVM see the shape of the series.
15:18:51  40  -- But COVAR_POP is more stable:
15:18:51  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
15:18:51  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
15:18:51  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
15:18:51  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
15:18:51  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
15:18:51  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
15:18:51  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
15:18:51  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
15:18:51  49  -- Derive date related attributes:
15:18:51  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
15:18:51  51  ,0+TO_CHAR(ydate,'D')d
15:18:51  52  ,0+TO_CHAR(ydate,'W')w
15:18:51  53  -- mpm stands for minutes-past-midnight:
15:18:51  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
15:18:51  55  -- mph stands for minutes-past-hour:
15:18:51  56  ,0+TO_CHAR(ydate,'MI')mph
15:18:51  57  FROM svm6102
15:18:51  58  WHERE clse > 0
15:18:51  59  ORDER BY ydate
15:18:51  60  /

Table created.

Elapsed: 00:00:02.29
15:18:53 SQL> 
15:18:53 SQL> -- rpt
15:18:53 SQL> 
15:18:53 SQL> SELECT
15:18:53   2  pair
15:18:53   3  ,COUNT(pair)
15:18:53   4  ,MIN(clse),MAX(clse)
15:18:53   5  ,MIN(ydate),MAX(ydate)
15:18:53   6  FROM svm6122
15:18:53   7  GROUP BY pair
15:18:53   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
gbp_usd       19625   1.535325	  1.62765 2010-11-22 15:20:00 2011-02-25 15:05:00

Elapsed: 00:00:00.04
15:18:53 SQL> 
15:18:53 SQL> -- Prepare for derivation of NTILE based params:
15:18:53 SQL> 
15:18:53 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.27
15:18:54 SQL> CREATE TABLE svm6142 COMPRESS AS
15:18:54   2  SELECT
15:18:54   3  pair
15:18:54   4  ,ydate
15:18:54   5  ,prdate
15:18:54   6  ,clse
15:18:54   7  ,g6
15:18:54   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
15:18:54   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
15:18:54  10  ,CASE WHEN trend IS NULL THEN 1
15:18:54  11  	    WHEN trend =0      THEN 1
15:18:54  12  	    ELSE trend END trend
15:18:54  13  ,cm4
15:18:54  14  ,cm6
15:18:54  15  ,cm8
15:18:54  16  ,cm10
15:18:54  17  ,cm12
15:18:54  18  ,cm14
15:18:54  19  ,cm16
15:18:54  20  ,cm18
15:18:54  21  --
15:18:54  22  ,ca4
15:18:54  23  ,ca6
15:18:54  24  ,ca8
15:18:54  25  ,ca10
15:18:54  26  ,ca12
15:18:54  27  ,ca14
15:18:54  28  ,ca16
15:18:54  29  ,ca18
15:18:54  30  --
15:18:54  31  ,cx4
15:18:54  32  ,cx6
15:18:54  33  ,cx8
15:18:54  34  ,cx10
15:18:54  35  ,cx12
15:18:54  36  ,cx14
15:18:54  37  ,cx16
15:18:54  38  ,cx18
15:18:54  39  --
15:18:54  40  ,crr4
15:18:54  41  ,crr6
15:18:54  42  ,crr8
15:18:54  43  ,crr10
15:18:54  44  ,crr12
15:18:54  45  ,crr14
15:18:54  46  ,crr16
15:18:54  47  ,crr18
15:18:54  48  --
15:18:54  49  ,hh
15:18:54  50  ,d
15:18:54  51  ,w
15:18:54  52  ,mpm
15:18:54  53  ,mph
15:18:54  54  FROM svm6122
15:18:54  55  ORDER BY ydate
15:18:54  56  /

Table created.

Elapsed: 00:00:00.39
15:18:54 SQL> 
15:18:54 SQL> -- rpt
15:18:54 SQL> 
15:18:54 SQL> SELECT
15:18:54   2  pair
15:18:54   3  ,trend
15:18:54   4  ,gatt
15:18:54   5  ,COUNT(pair)
15:18:54   6  ,AVG(g6)
15:18:54   7  FROM svm6142
15:18:54   8  GROUP BY pair,trend,gatt
15:18:54   9  ORDER BY pair,trend,gatt
15:18:54  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6201 -.00128824
gbp_usd 	-1 up	      3210 .003028167
gbp_usd 	-1		72
gbp_usd 	 1 nup	      7110 -.00138934
gbp_usd 	 1 up	      3032 .002940063

Elapsed: 00:00:00.03
15:18:54 SQL> 
15:18:54 SQL> 
15:18:54 SQL> -- Derive NTILE based params:
15:18:54 SQL> 
15:18:54 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.20
15:18:54 SQL> CREATE TABLE svm6162 COMPRESS AS
15:18:54   2  SELECT
15:18:54   3  pair
15:18:54   4  ,ydate
15:18:54   5  ,prdate
15:18:54   6  ,clse
15:18:54   7  ,g6
15:18:54   8  ,gatt
15:18:54   9  ,gattn
15:18:54  10  ,trend
15:18:54  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
15:18:54  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
15:18:54  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
15:18:54  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
15:18:54  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
15:18:54  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
15:18:54  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
15:18:54  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
15:18:54  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
15:18:54  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
15:18:54  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
15:18:54  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
15:18:54  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
15:18:54  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
15:18:54  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
15:18:54  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
15:18:54  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
15:18:54  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
15:18:54  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
15:18:54  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
15:18:54  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
15:18:54  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
15:18:54  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
15:18:54  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
15:18:54  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
15:18:54  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
15:18:54  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
15:18:54  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
15:18:54  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
15:18:54  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
15:18:54  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
15:18:54  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
15:18:54  43  ,hh  att32
15:18:54  44  ,d   att33
15:18:54  45  ,w   att34
15:18:54  46  ,mpm att35
15:18:54  47  ,mph att36
15:18:54  48  ,trend att37
15:18:54  49  FROM svm6142
15:18:54  50  ORDER BY ydate
15:18:54  51  /

Table created.

Elapsed: 00:00:04.98
15:18:59 SQL> 
15:18:59 SQL> -- rpt
15:18:59 SQL> 
15:18:59 SQL> SELECT
15:18:59   2  pair
15:18:59   3  ,trend
15:18:59   4  ,gatt
15:18:59   5  ,COUNT(pair)
15:18:59   6  ,AVG(g6)
15:18:59   7  FROM svm6162
15:18:59   8  GROUP BY pair,trend,gatt
15:18:59   9  ORDER BY pair,trend,gatt
15:18:59  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6201 -.00128824
gbp_usd 	-1 up	      3210 .003028167
gbp_usd 	-1		72
gbp_usd 	 1 nup	      7110 -.00138934
gbp_usd 	 1 up	      3032 .002940063

Elapsed: 00:00:00.03
15:18:59 SQL> 
15:18:59 SQL> -- I comment out sections related to score-feedback.
15:18:59 SQL> -- I tested score-feeback and it hurts results:
15:18:59 SQL> 
15:18:59 SQL> -- CREATE OR REPLACE VIEW sc12 AS
15:18:59 SQL> -- SELECT
15:18:59 SQL> -- m.pair
15:18:59 SQL> -- ,m.ydate
15:18:59 SQL> -- ,m.prdate
15:18:59 SQL> -- ,l.score score_long
15:18:59 SQL> -- ,s.score score_short
15:18:59 SQL> -- ,m.g6
15:18:59 SQL> -- FROM svm62scores l,svm62scores s,svm6162 m
15:18:59 SQL> -- WHERE l.targ='gatt'
15:18:59 SQL> -- AND	 s.targ='gattn'
15:18:59 SQL> -- AND l.prdate = s.prdate
15:18:59 SQL> -- AND l.prdate = m.prdate
15:18:59 SQL> -- -- Speed things up:
15:18:59 SQL> -- AND l.pair = '&1'
15:18:59 SQL> -- AND s.pair = '&1'
15:18:59 SQL> -- /
15:18:59 SQL> --
15:18:59 SQL> -- DROP TABLE score_corr;
15:18:59 SQL> --
15:18:59 SQL> -- CREATE TABLE score_corr COMPRESS AS
15:18:59 SQL> -- SELECT
15:18:59 SQL> -- pair
15:18:59 SQL> -- -- ,ydate
15:18:59 SQL> -- ,prdate
15:18:59 SQL> -- -- Find corr() tween score and g6 over 2 day period:
15:18:59 SQL> -- ,CORR((score_long - score_short),g6)
15:18:59 SQL> --   OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 2*24*60/5 PRECEDING AND CURRENT ROW)sc_corr
15:18:59 SQL> -- FROM sc12
15:18:59 SQL> -- /
15:18:59 SQL> 
15:18:59 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.26
15:19:00 SQL> 
15:19:00 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.31
15:19:00 SQL> 
15:19:00 SQL> CREATE TABLE modsrc COMPRESS AS
15:19:00   2  SELECT
15:19:00   3  pair
15:19:00   4  ,ydate
15:19:00   5  ,prdate
15:19:00   6  ,trend
15:19:00   7  ,g6
15:19:00   8  ,gatt
15:19:00   9  ,gattn
15:19:00  10  ,SUM(g6)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g00
15:19:00  11  ,SUM(g6)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g01
15:19:00  12  ,SUM(g6)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g02
15:19:00  13  ,SUM(g6)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g03
15:19:00  14  ,SUM(g6)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g04
15:19:00  15  ,SUM(g6)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g05
15:19:00  16  ,SUM(g6)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g06
15:19:00  17  ,SUM(g6)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g07
15:19:00  18  ,SUM(g6)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g08
15:19:00  19  ,SUM(g6)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g09
15:19:00  20  ,SUM(g6)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g10
15:19:00  21  ,SUM(g6)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g11
15:19:00  22  ,SUM(g6)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g12
15:19:00  23  ,SUM(g6)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g13
15:19:00  24  ,SUM(g6)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g14
15:19:00  25  ,SUM(g6)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g15
15:19:00  26  ,SUM(g6)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g16
15:19:00  27  ,SUM(g6)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g17
15:19:00  28  ,SUM(g6)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g18
15:19:00  29  ,SUM(g6)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g19
15:19:00  30  ,SUM(g6)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g20
15:19:00  31  ,SUM(g6)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g21
15:19:00  32  ,SUM(g6)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g22
15:19:00  33  ,SUM(g6)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g23
15:19:00  34  ,SUM(g6)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g24
15:19:00  35  ,SUM(g6)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g25
15:19:00  36  ,SUM(g6)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g26
15:19:00  37  ,SUM(g6)OVER(PARTITION BY trend,att27 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g27
15:19:00  38  ,SUM(g6)OVER(PARTITION BY trend,att28 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g28
15:19:00  39  ,SUM(g6)OVER(PARTITION BY trend,att29 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g29
15:19:00  40  ,SUM(g6)OVER(PARTITION BY trend,att30 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g30
15:19:00  41  ,SUM(g6)OVER(PARTITION BY trend,att31 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g31
15:19:00  42  ,SUM(g6)OVER(PARTITION BY trend,att32 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g32
15:19:00  43  ,SUM(g6)OVER(PARTITION BY trend,att33 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g33
15:19:00  44  ,SUM(g6)OVER(PARTITION BY trend,att34 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g34
15:19:00  45  ,SUM(g6)OVER(PARTITION BY trend,att35 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g35
15:19:00  46  ,SUM(g6)OVER(PARTITION BY trend,att36 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g36
15:19:00  47  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g37
15:19:00  48  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*40 PRECEDING AND CURRENT ROW)g38
15:19:00  49  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*30 PRECEDING AND CURRENT ROW)g39
15:19:00  50  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)g40
15:19:00  51  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)g41
15:19:00  52  FROM svm6162
15:19:00  53  /

Table created.

Elapsed: 00:00:06.74
15:19:07 SQL> 
15:19:07 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:02.66
15:19:09 SQL> 
15:19:09 SQL> -- rpt
15:19:09 SQL> 
15:19:09 SQL> SELECT
15:19:09   2  pair
15:19:09   3  ,trend
15:19:09   4  ,gatt
15:19:09   5  ,COUNT(pair)
15:19:09   6  ,AVG(g6)
15:19:09   7  FROM modsrc
15:19:09   8  GROUP BY pair,trend,gatt
15:19:09   9  ORDER BY pair,trend,gatt
15:19:09  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6201 -.00128824
gbp_usd 	-1 up	      3210 .003028167
gbp_usd 	-1		72
gbp_usd 	 1 nup	      7110 -.00138934
gbp_usd 	 1 up	      3032 .002940063

Elapsed: 00:00:00.02
15:19:09 SQL> 
15:19:09 SQL> 
15:19:09 SQL> SELECT pair,COUNT(pair)FROM svm6102 GROUP BY pair;

PAIR	COUNT(PAIR)
------- -----------
gbp_usd       19625

Elapsed: 00:00:00.79
15:19:10 SQL> 
15:19:10 SQL> SELECT pair,COUNT(pair)FROM modsrc GROUP BY pair;

PAIR	COUNT(PAIR)
------- -----------
gbp_usd       19625

Elapsed: 00:00:00.01
15:19:10 SQL> 
15:19:10 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
