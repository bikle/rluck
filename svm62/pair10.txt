
SQL*Plus: Release 11.2.0.1.0 Production on Tue Feb 15 20:38:41 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

20:38:41 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
20:38:41 SQL> 20:38:41 SQL> --
20:38:41 SQL> -- pair10.sql
20:38:41 SQL> --
20:38:41 SQL> 
20:38:41 SQL> -- Creates views and tables needed by SVM.
20:38:41 SQL> 
20:38:41 SQL> 
20:38:41 SQL> CREATE OR REPLACE VIEW svm6102 AS
20:38:41   2  SELECT
20:38:41   3  pair
20:38:41   4  ,ydate
20:38:41   5  ,prdate
20:38:41   6  ,rownum rnum -- acts as t in my time-series
20:38:41   7  ,clse
20:38:41   8  -- Derive a bunch of attributes from clse, the latest price:
20:38:41   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
20:38:41  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
20:38:41  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
20:38:41  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
20:38:41  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
20:38:41  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
20:38:41  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
20:38:41  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
20:38:41  17  --
20:38:41  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
20:38:41  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
20:38:41  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
20:38:41  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
20:38:41  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
20:38:41  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
20:38:41  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
20:38:41  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
20:38:41  26  --
20:38:41  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
20:38:41  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
20:38:41  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
20:38:41  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
20:38:41  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
20:38:41  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
20:38:41  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
20:38:41  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
20:38:41  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
20:38:41  36  FROM di5min WHERE pair = '&1'
20:38:41  37  AND ydate > sysdate - 95
20:38:41  38  ORDER BY ydate
20:38:41  39  /
old  36: FROM di5min WHERE pair = '&1'
new  36: FROM di5min WHERE pair = 'eur_gbp'

View created.

Elapsed: 00:00:00.18
20:38:41 SQL> 
20:38:41 SQL> -- rpt
20:38:41 SQL> 
20:38:41 SQL> SELECT
20:38:41   2  pair
20:38:41   3  ,COUNT(pair)
20:38:41   4  ,MIN(clse),MAX(clse)
20:38:41   5  ,MIN(avg6),MAX(avg6)
20:38:41   6  ,MIN(ydate),MAX(ydate)
20:38:41   7  FROM svm6102
20:38:41   8  GROUP BY pair
20:38:41   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_gbp       19086 .829062716 .867050282 .830048836 .865740025 2010-11-12 20:40:00 2011-02-15 20:25:00

Elapsed: 00:00:00.88
20:38:42 SQL> 
20:38:42 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
20:38:42 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:01.66
20:38:44 SQL> CREATE TABLE svm6122 COMPRESS AS
20:38:44   2  SELECT
20:38:44   3  pair
20:38:44   4  ,ydate
20:38:44   5  ,prdate
20:38:44   6  ,clse
20:38:44   7  -- g6 is important. I want to predict g6:
20:38:44   8  ,ld6 - clse g6
20:38:44   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
20:38:44  10  -- I want more attributes from the ones I derived above:
20:38:44  11  -- clse relation to moving-min
20:38:44  12  ,clse-min4  cm4
20:38:44  13  ,clse-min6  cm6
20:38:44  14  ,clse-min8  cm8
20:38:44  15  ,clse-min10 cm10
20:38:44  16  ,clse-min12 cm12
20:38:44  17  ,clse-min14 cm14
20:38:44  18  ,clse-min16 cm16
20:38:44  19  ,clse-min18 cm18
20:38:44  20  -- clse relation to moving-avg
20:38:44  21  ,clse-avg4  ca4
20:38:44  22  ,clse-avg6  ca6
20:38:44  23  ,clse-avg8  ca8
20:38:44  24  ,clse-avg10 ca10
20:38:44  25  ,clse-avg12 ca12
20:38:44  26  ,clse-avg14 ca14
20:38:44  27  ,clse-avg16 ca16
20:38:44  28  ,clse-avg18 ca18
20:38:44  29  -- clse relation to moving-max
20:38:44  30  ,clse-max4  cx4
20:38:44  31  ,clse-max6  cx6
20:38:44  32  ,clse-max8  cx8
20:38:44  33  ,clse-max10 cx10
20:38:44  34  ,clse-max12 cx12
20:38:44  35  ,clse-max14 cx14
20:38:44  36  ,clse-max16 cx16
20:38:44  37  ,clse-max18 cx18
20:38:44  38  -- Derive more attributes.
20:38:44  39  -- I want to use CORR() here to help SVM see the shape of the series.
20:38:44  40  -- But COVAR_POP is more stable:
20:38:44  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
20:38:44  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
20:38:44  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
20:38:44  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
20:38:44  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
20:38:44  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
20:38:44  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
20:38:44  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
20:38:44  49  -- Derive date related attributes:
20:38:44  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
20:38:44  51  ,0+TO_CHAR(ydate,'D')d
20:38:44  52  ,0+TO_CHAR(ydate,'W')w
20:38:44  53  -- mpm stands for minutes-past-midnight:
20:38:44  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
20:38:44  55  -- mph stands for minutes-past-hour:
20:38:44  56  ,0+TO_CHAR(ydate,'MI')mph
20:38:44  57  FROM svm6102
20:38:44  58  ORDER BY ydate
20:38:44  59  /

Table created.

Elapsed: 00:00:02.54
20:38:46 SQL> 
20:38:46 SQL> -- rpt
20:38:46 SQL> 
20:38:46 SQL> SELECT
20:38:46   2  pair
20:38:46   3  ,COUNT(pair)
20:38:46   4  ,MIN(clse),MAX(clse)
20:38:46   5  ,MIN(ydate),MAX(ydate)
20:38:46   6  FROM svm6122
20:38:46   7  GROUP BY pair
20:38:46   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_gbp       19086 .829062716 .867050282 2010-11-12 20:40:00 2011-02-15 20:25:00

Elapsed: 00:00:00.05
20:38:46 SQL> 
20:38:46 SQL> -- Prepare for derivation of NTILE based params:
20:38:46 SQL> 
20:38:46 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:03.22
20:38:49 SQL> CREATE TABLE svm6142 COMPRESS AS
20:38:49   2  SELECT
20:38:49   3  pair
20:38:49   4  ,ydate
20:38:49   5  ,prdate
20:38:49   6  ,clse
20:38:49   7  ,g6
20:38:49   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
20:38:49   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
20:38:49  10  ,CASE WHEN trend IS NULL THEN 1
20:38:49  11  	    WHEN trend =0      THEN 1
20:38:49  12  	    ELSE trend END trend
20:38:49  13  ,cm4
20:38:49  14  ,cm6
20:38:49  15  ,cm8
20:38:49  16  ,cm10
20:38:49  17  ,cm12
20:38:49  18  ,cm14
20:38:49  19  ,cm16
20:38:49  20  ,cm18
20:38:49  21  --
20:38:49  22  ,ca4
20:38:49  23  ,ca6
20:38:49  24  ,ca8
20:38:49  25  ,ca10
20:38:49  26  ,ca12
20:38:49  27  ,ca14
20:38:49  28  ,ca16
20:38:49  29  ,ca18
20:38:49  30  --
20:38:49  31  ,cx4
20:38:49  32  ,cx6
20:38:49  33  ,cx8
20:38:49  34  ,cx10
20:38:49  35  ,cx12
20:38:49  36  ,cx14
20:38:49  37  ,cx16
20:38:49  38  ,cx18
20:38:49  39  --
20:38:49  40  ,crr4
20:38:49  41  ,crr6
20:38:49  42  ,crr8
20:38:49  43  ,crr10
20:38:49  44  ,crr12
20:38:49  45  ,crr14
20:38:49  46  ,crr16
20:38:49  47  ,crr18
20:38:49  48  --
20:38:49  49  ,hh
20:38:49  50  ,d
20:38:49  51  ,w
20:38:49  52  ,mpm
20:38:49  53  ,mph
20:38:49  54  FROM svm6122
20:38:49  55  ORDER BY ydate
20:38:49  56  /

Table created.

Elapsed: 00:00:00.52
20:38:50 SQL> 
20:38:50 SQL> -- rpt
20:38:50 SQL> 
20:38:50 SQL> SELECT
20:38:50   2  pair
20:38:50   3  ,trend
20:38:50   4  ,gatt
20:38:50   5  ,COUNT(pair)
20:38:50   6  ,AVG(g6)
20:38:50   7  FROM svm6142
20:38:50   8  GROUP BY pair,trend,gatt
20:38:50   9  ORDER BY pair,trend,gatt
20:38:50  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_gbp 	-1 nup	      7433  -.0009793
eur_gbp 	-1 up	      2285 .002720989
eur_gbp 	-1		72
eur_gbp 	 1 nup	      6813 -.00102665
eur_gbp 	 1 up	      2483   .0028768

Elapsed: 00:00:00.05
20:38:50 SQL> 
20:38:50 SQL> 
20:38:50 SQL> -- Derive NTILE based params:
20:38:50 SQL> 
20:38:50 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:03.70
20:38:54 SQL> CREATE TABLE svm6162 COMPRESS AS
20:38:54   2  SELECT
20:38:54   3  pair
20:38:54   4  ,ydate
20:38:54   5  ,prdate
20:38:54   6  ,clse
20:38:54   7  ,g6
20:38:54   8  ,gatt
20:38:54   9  ,gattn
20:38:54  10  ,trend
20:38:54  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
20:38:54  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
20:38:54  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
20:38:54  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
20:38:54  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
20:38:54  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
20:38:54  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
20:38:54  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
20:38:54  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
20:38:54  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
20:38:54  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
20:38:54  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
20:38:54  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
20:38:54  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
20:38:54  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
20:38:54  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
20:38:54  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
20:38:54  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
20:38:54  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
20:38:54  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
20:38:54  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
20:38:54  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
20:38:54  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
20:38:54  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
20:38:54  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
20:38:54  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
20:38:54  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
20:38:54  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
20:38:54  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
20:38:54  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
20:38:54  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
20:38:54  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
20:38:54  43  ,hh  att32
20:38:54  44  ,d   att33
20:38:54  45  ,w   att34
20:38:54  46  ,mpm att35
20:38:54  47  ,mph att36
20:38:54  48  ,trend att37
20:38:54  49  FROM svm6142
20:38:54  50  ORDER BY ydate
20:38:54  51  /
