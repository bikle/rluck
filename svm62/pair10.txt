
SQL*Plus: Release 11.2.0.1.0 Production on Wed Mar 23 08:56:26 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

08:56:26 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
08:56:26 SQL> 08:56:26 SQL> --
08:56:26 SQL> -- pair10.sql
08:56:26 SQL> --
08:56:26 SQL> 
08:56:26 SQL> -- Creates views and tables needed by SVM.
08:56:26 SQL> 
08:56:26 SQL> 
08:56:26 SQL> CREATE OR REPLACE VIEW svm6102 AS
08:56:26   2  SELECT
08:56:26   3  pair
08:56:26   4  ,ydate
08:56:26   5  ,prdate
08:56:26   6  ,rownum rnum -- acts as t in my time-series
08:56:26   7  ,clse
08:56:26   8  -- Derive a bunch of attributes from clse, the latest price:
08:56:26   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
08:56:26  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
08:56:26  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
08:56:26  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
08:56:26  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
08:56:26  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
08:56:26  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
08:56:26  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
08:56:26  17  --
08:56:26  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
08:56:26  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
08:56:26  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
08:56:26  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
08:56:26  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
08:56:26  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
08:56:26  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
08:56:26  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
08:56:26  26  --
08:56:26  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
08:56:26  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
08:56:26  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
08:56:26  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
08:56:26  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
08:56:26  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
08:56:26  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
08:56:26  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
08:56:26  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
08:56:26  36  FROM di5min WHERE pair = '&1'
08:56:26  37  AND ydate > sysdate - 195
08:56:26  38  ORDER BY ydate
08:56:26  39  /
old  36: FROM di5min WHERE pair = '&1'
new  36: FROM di5min WHERE pair = 'aud_jpy'

View created.

Elapsed: 00:00:00.05
08:56:26 SQL> 
08:56:26 SQL> -- rpt
08:56:26 SQL> 
08:56:26 SQL> SELECT
08:56:26   2  pair
08:56:26   3  ,COUNT(pair)
08:56:26   4  ,MIN(clse),MAX(clse)
08:56:26   5  ,MIN(avg6),MAX(avg6)
08:56:26   6  ,MIN(ydate),MAX(ydate)
08:56:26   7  FROM svm6102
08:56:26   8  GROUP BY pair
08:56:26   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
aud_jpy       22648 75.2760531 84.4451413  77.186101 84.3455273 2010-11-30 00:00:00 2011-03-21 16:50:00

Elapsed: 00:00:00.95
08:56:27 SQL> 
08:56:27 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
08:56:27 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.35
08:56:27 SQL> CREATE TABLE svm6122 COMPRESS AS
08:56:27   2  SELECT
08:56:27   3  pair
08:56:27   4  ,ydate
08:56:27   5  ,prdate
08:56:27   6  ,clse
08:56:27   7  -- g6 is important. I want to predict g6:
08:56:27   8  ,(ld6 - clse)/clse g6
08:56:27   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
08:56:27  10  -- I want more attributes from the ones I derived above:
08:56:27  11  -- clse relation to moving-min
08:56:27  12  ,clse-min4  cm4
08:56:27  13  ,clse-min6  cm6
08:56:27  14  ,clse-min8  cm8
08:56:27  15  ,clse-min10 cm10
08:56:27  16  ,clse-min12 cm12
08:56:27  17  ,clse-min14 cm14
08:56:27  18  ,clse-min16 cm16
08:56:27  19  ,clse-min18 cm18
08:56:27  20  -- clse relation to moving-avg
08:56:27  21  ,clse-avg4  ca4
08:56:27  22  ,clse-avg6  ca6
08:56:27  23  ,clse-avg8  ca8
08:56:27  24  ,clse-avg10 ca10
08:56:27  25  ,clse-avg12 ca12
08:56:27  26  ,clse-avg14 ca14
08:56:27  27  ,clse-avg16 ca16
08:56:27  28  ,clse-avg18 ca18
08:56:27  29  -- clse relation to moving-max
08:56:27  30  ,clse-max4  cx4
08:56:27  31  ,clse-max6  cx6
08:56:27  32  ,clse-max8  cx8
08:56:27  33  ,clse-max10 cx10
08:56:27  34  ,clse-max12 cx12
08:56:27  35  ,clse-max14 cx14
08:56:27  36  ,clse-max16 cx16
08:56:27  37  ,clse-max18 cx18
08:56:27  38  -- Derive more attributes.
08:56:27  39  -- I want to use CORR() here to help SVM see the shape of the series.
08:56:27  40  -- But COVAR_POP is more stable:
08:56:27  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
08:56:27  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
08:56:27  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
08:56:27  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
08:56:27  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
08:56:27  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
08:56:27  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
08:56:27  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
08:56:27  49  -- Derive date related attributes:
08:56:27  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
08:56:27  51  ,0+TO_CHAR(ydate,'D')d
08:56:27  52  ,0+TO_CHAR(ydate,'W')w
08:56:27  53  -- mpm stands for minutes-past-midnight:
08:56:27  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
08:56:27  55  -- mph stands for minutes-past-hour:
08:56:27  56  ,0+TO_CHAR(ydate,'MI')mph
08:56:27  57  FROM svm6102
08:56:27  58  WHERE clse > 0
08:56:27  59  ORDER BY ydate
08:56:27  60  /

Table created.

Elapsed: 00:00:02.54
08:56:30 SQL> 
08:56:30 SQL> -- rpt
08:56:30 SQL> 
08:56:30 SQL> SELECT
08:56:30   2  pair
08:56:30   3  ,COUNT(pair)
08:56:30   4  ,MIN(clse),MAX(clse)
08:56:30   5  ,MIN(ydate),MAX(ydate)
08:56:30   6  FROM svm6122
08:56:30   7  GROUP BY pair
08:56:30   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
aud_jpy       22648 75.2760531 84.4451413 2010-11-30 00:00:00 2011-03-21 16:50:00

Elapsed: 00:00:00.05
08:56:30 SQL> 
08:56:30 SQL> -- Prepare for derivation of NTILE based params:
08:56:30 SQL> 
08:56:30 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.09
08:56:30 SQL> CREATE TABLE svm6142 COMPRESS AS
08:56:30   2  SELECT
08:56:30   3  pair
08:56:30   4  ,ydate
08:56:30   5  ,prdate
08:56:30   6  ,clse
08:56:30   7  ,g6
08:56:30   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
08:56:30   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
08:56:30  10  ,CASE WHEN trend IS NULL THEN 1
08:56:30  11  	    WHEN trend =0      THEN 1
08:56:30  12  	    ELSE trend END trend
08:56:30  13  ,cm4
08:56:30  14  ,cm6
08:56:30  15  ,cm8
08:56:30  16  ,cm10
08:56:30  17  ,cm12
08:56:30  18  ,cm14
08:56:30  19  ,cm16
08:56:30  20  ,cm18
08:56:30  21  --
08:56:30  22  ,ca4
08:56:30  23  ,ca6
08:56:30  24  ,ca8
08:56:30  25  ,ca10
08:56:30  26  ,ca12
08:56:30  27  ,ca14
08:56:30  28  ,ca16
08:56:30  29  ,ca18
08:56:30  30  --
08:56:30  31  ,cx4
08:56:30  32  ,cx6
08:56:30  33  ,cx8
08:56:30  34  ,cx10
08:56:30  35  ,cx12
08:56:30  36  ,cx14
08:56:30  37  ,cx16
08:56:30  38  ,cx18
08:56:30  39  --
08:56:30  40  ,crr4
08:56:30  41  ,crr6
08:56:30  42  ,crr8
08:56:30  43  ,crr10
08:56:30  44  ,crr12
08:56:30  45  ,crr14
08:56:30  46  ,crr16
08:56:30  47  ,crr18
08:56:30  48  --
08:56:30  49  ,hh
08:56:30  50  ,d
08:56:30  51  ,w
08:56:30  52  ,mpm
08:56:30  53  ,mph
08:56:30  54  FROM svm6122
08:56:30  55  ORDER BY ydate
08:56:30  56  /

Table created.

Elapsed: 00:00:00.46
08:56:30 SQL> 
08:56:30 SQL> -- rpt
08:56:30 SQL> 
08:56:30 SQL> SELECT
08:56:30   2  pair
08:56:30   3  ,trend
08:56:30   4  ,gatt
08:56:30   5  ,COUNT(pair)
08:56:30   6  ,AVG(g6)
08:56:30   7  FROM svm6142
08:56:30   8  GROUP BY pair,trend,gatt
08:56:30   9  ORDER BY pair,trend,gatt
08:56:30  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_jpy 	-1 nup	      6991 -.00175627
aud_jpy 	-1 up	      4141 .003656159
aud_jpy 	-1		18
aud_jpy 	 1 nup	      8399  -.0016073
aud_jpy 	 1 up	      3045 .003718934
aud_jpy 	 1		54

6 rows selected.

Elapsed: 00:00:00.05
08:56:31 SQL> 
08:56:31 SQL> 
08:56:31 SQL> -- Derive NTILE based params:
08:56:31 SQL> 
08:56:31 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.04
08:56:31 SQL> CREATE TABLE svm6162 COMPRESS AS
08:56:31   2  SELECT
08:56:31   3  pair
08:56:31   4  ,ydate
08:56:31   5  ,prdate
08:56:31   6  ,clse
08:56:31   7  ,g6
08:56:31   8  ,gatt
08:56:31   9  ,gattn
08:56:31  10  ,trend
08:56:31  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
08:56:31  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
08:56:31  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
08:56:31  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
08:56:31  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
08:56:31  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
08:56:31  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
08:56:31  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
08:56:31  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
08:56:31  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
08:56:31  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
08:56:31  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
08:56:31  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
08:56:31  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
08:56:31  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
08:56:31  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
08:56:31  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
08:56:31  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
08:56:31  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
08:56:31  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
08:56:31  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
08:56:31  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
08:56:31  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
08:56:31  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
08:56:31  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
08:56:31  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
08:56:31  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
08:56:31  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
08:56:31  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
08:56:31  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
08:56:31  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
08:56:31  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
08:56:31  43  ,hh  att32
08:56:31  44  ,d   att33
08:56:31  45  ,w   att34
08:56:31  46  ,mpm att35
08:56:31  47  ,mph att36
08:56:31  48  ,trend att37
08:56:31  49  FROM svm6142
08:56:31  50  ORDER BY ydate
08:56:31  51  /

Table created.

Elapsed: 00:00:06.06
08:56:37 SQL> 
08:56:37 SQL> -- rpt
08:56:37 SQL> 
08:56:37 SQL> SELECT
08:56:37   2  pair
08:56:37   3  ,trend
08:56:37   4  ,gatt
08:56:37   5  ,COUNT(pair)
08:56:37   6  ,AVG(g6)
08:56:37   7  FROM svm6162
08:56:37   8  GROUP BY pair,trend,gatt
08:56:37   9  ORDER BY pair,trend,gatt
08:56:37  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_jpy 	-1 nup	      6991 -.00175627
aud_jpy 	-1 up	      4141 .003656159
aud_jpy 	-1		18
aud_jpy 	 1 nup	      8399  -.0016073
aud_jpy 	 1 up	      3045 .003718934
aud_jpy 	 1		54

6 rows selected.

Elapsed: 00:00:00.03
08:56:37 SQL> 
08:56:37 SQL> -- I comment out sections related to score-feedback.
08:56:37 SQL> -- I tested score-feeback and it hurts results:
08:56:37 SQL> 
08:56:37 SQL> -- CREATE OR REPLACE VIEW sc12 AS
08:56:37 SQL> -- SELECT
08:56:37 SQL> -- m.pair
08:56:37 SQL> -- ,m.ydate
08:56:37 SQL> -- ,m.prdate
08:56:37 SQL> -- ,l.score score_long
08:56:37 SQL> -- ,s.score score_short
08:56:37 SQL> -- ,m.g6
08:56:37 SQL> -- FROM svm62scores l,svm62scores s,svm6162 m
08:56:37 SQL> -- WHERE l.targ='gatt'
08:56:37 SQL> -- AND	 s.targ='gattn'
08:56:37 SQL> -- AND l.prdate = s.prdate
08:56:37 SQL> -- AND l.prdate = m.prdate
08:56:37 SQL> -- -- Speed things up:
08:56:37 SQL> -- AND l.pair = '&1'
08:56:37 SQL> -- AND s.pair = '&1'
08:56:37 SQL> -- /
08:56:37 SQL> --
08:56:37 SQL> -- DROP TABLE score_corr;
08:56:37 SQL> --
08:56:37 SQL> -- CREATE TABLE score_corr COMPRESS AS
08:56:37 SQL> -- SELECT
08:56:37 SQL> -- pair
08:56:37 SQL> -- -- ,ydate
08:56:37 SQL> -- ,prdate
08:56:37 SQL> -- -- Find corr() tween score and g6 over 2 day period:
08:56:37 SQL> -- ,CORR((score_long - score_short),g6)
08:56:37 SQL> --   OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 2*24*60/5 PRECEDING AND CURRENT ROW)sc_corr
08:56:37 SQL> -- FROM sc12
08:56:37 SQL> -- /
08:56:37 SQL> 
08:56:37 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
08:56:37 SQL> 
08:56:37 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.49
08:56:37 SQL> 
08:56:37 SQL> CREATE TABLE modsrc COMPRESS AS
08:56:37   2  SELECT
08:56:37   3  pair
08:56:37   4  ,ydate
08:56:37   5  ,prdate
08:56:37   6  ,trend
08:56:37   7  ,g6
08:56:37   8  ,gatt
08:56:37   9  ,gattn
08:56:37  10  ,SUM(g6)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g00
08:56:37  11  ,SUM(g6)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g01
08:56:37  12  ,SUM(g6)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g02
08:56:37  13  ,SUM(g6)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g03
08:56:37  14  ,SUM(g6)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g04
08:56:37  15  ,SUM(g6)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g05
08:56:37  16  ,SUM(g6)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g06
08:56:37  17  ,SUM(g6)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g07
08:56:37  18  ,SUM(g6)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g08
08:56:37  19  ,SUM(g6)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g09
08:56:37  20  ,SUM(g6)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g10
08:56:37  21  ,SUM(g6)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g11
08:56:37  22  ,SUM(g6)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g12
08:56:37  23  ,SUM(g6)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g13
08:56:37  24  ,SUM(g6)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g14
08:56:37  25  ,SUM(g6)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g15
08:56:37  26  ,SUM(g6)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g16
08:56:37  27  ,SUM(g6)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g17
08:56:37  28  ,SUM(g6)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g18
08:56:37  29  ,SUM(g6)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g19
08:56:37  30  ,SUM(g6)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g20
08:56:37  31  ,SUM(g6)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g21
08:56:37  32  ,SUM(g6)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g22
08:56:37  33  ,SUM(g6)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g23
08:56:37  34  ,SUM(g6)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g24
08:56:37  35  ,SUM(g6)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g25
08:56:37  36  ,SUM(g6)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g26
08:56:37  37  ,SUM(g6)OVER(PARTITION BY trend,att27 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g27
08:56:37  38  ,SUM(g6)OVER(PARTITION BY trend,att28 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g28
08:56:37  39  ,SUM(g6)OVER(PARTITION BY trend,att29 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g29
08:56:37  40  ,SUM(g6)OVER(PARTITION BY trend,att30 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g30
08:56:37  41  ,SUM(g6)OVER(PARTITION BY trend,att31 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g31
08:56:37  42  ,SUM(g6)OVER(PARTITION BY trend,att32 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g32
08:56:37  43  ,SUM(g6)OVER(PARTITION BY trend,att33 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g33
08:56:37  44  ,SUM(g6)OVER(PARTITION BY trend,att34 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g34
08:56:37  45  ,SUM(g6)OVER(PARTITION BY trend,att35 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g35
08:56:37  46  ,SUM(g6)OVER(PARTITION BY trend,att36 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g36
08:56:37  47  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g37
08:56:37  48  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*40 PRECEDING AND CURRENT ROW)g38
08:56:37  49  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*30 PRECEDING AND CURRENT ROW)g39
08:56:37  50  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)g40
08:56:37  51  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)g41
08:56:37  52  FROM svm6162
08:56:37  53  /

Table created.

Elapsed: 00:00:08.28
08:56:46 SQL> 
08:56:46 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:02.92
08:56:48 SQL> 
08:56:48 SQL> -- rpt
08:56:48 SQL> 
08:56:48 SQL> SELECT
08:56:48   2  pair
08:56:48   3  ,trend
08:56:48   4  ,gatt
08:56:48   5  ,COUNT(pair)
08:56:48   6  ,AVG(g6)
08:56:48   7  FROM modsrc
08:56:48   8  GROUP BY pair,trend,gatt
08:56:48   9  ORDER BY pair,trend,gatt
08:56:48  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_jpy 	-1 nup	      6991 -.00175627
aud_jpy 	-1 up	      4141 .003656159
aud_jpy 	-1		18
aud_jpy 	 1 nup	      8399  -.0016073
aud_jpy 	 1 up	      3045 .003718934
aud_jpy 	 1		54

6 rows selected.

Elapsed: 00:00:00.03
08:56:48 SQL> 
08:56:48 SQL> 
08:56:48 SQL> SELECT pair,COUNT(pair)FROM svm6102 GROUP BY pair;

PAIR	COUNT(PAIR)
------- -----------
aud_jpy       22648

Elapsed: 00:00:00.81
08:56:49 SQL> 
08:56:49 SQL> SELECT pair,COUNT(pair)FROM modsrc GROUP BY pair;

PAIR	COUNT(PAIR)
------- -----------
aud_jpy       22648

Elapsed: 00:00:00.01
08:56:49 SQL> 
08:56:49 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
