
SQL*Plus: Release 11.2.0.1.0 Production on Thu Feb 3 23:37:51 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

23:37:51 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.01
23:37:51 SQL> 23:37:51 SQL> --
23:37:51 SQL> -- pair10.sql
23:37:51 SQL> --
23:37:51 SQL> 
23:37:51 SQL> -- Creates views and tables needed by SVM.
23:37:51 SQL> 
23:37:51 SQL> 
23:37:51 SQL> CREATE OR REPLACE VIEW svm6102 AS
23:37:51   2  SELECT
23:37:51   3  pair
23:37:51   4  ,ydate
23:37:51   5  ,prdate
23:37:51   6  ,rownum rnum -- acts as t in my time-series
23:37:51   7  ,clse
23:37:51   8  -- Derive a bunch of attributes from clse, the latest price:
23:37:51   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
23:37:51  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
23:37:51  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
23:37:51  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
23:37:51  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
23:37:51  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
23:37:51  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
23:37:51  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
23:37:51  17  --
23:37:51  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
23:37:51  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
23:37:51  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
23:37:51  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
23:37:51  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
23:37:51  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
23:37:51  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
23:37:51  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
23:37:51  26  --
23:37:51  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
23:37:51  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
23:37:51  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
23:37:51  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
23:37:51  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
23:37:51  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
23:37:51  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
23:37:51  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
23:37:51  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
23:37:51  36  FROM di5min WHERE pair = '&1'
23:37:51  37  AND ydate > sysdate - 95
23:37:51  38  ORDER BY ydate
23:37:51  39  /
old  36: FROM di5min WHERE pair = '&1'
new  36: FROM di5min WHERE pair = 'aud_usd'

View created.

Elapsed: 00:00:00.14
23:37:51 SQL> 
23:37:51 SQL> -- rpt
23:37:51 SQL> 
23:37:51 SQL> SELECT
23:37:51   2  pair
23:37:51   3  ,COUNT(pair)
23:37:51   4  ,MIN(clse),MAX(clse)
23:37:51   5  ,MIN(avg6),MAX(avg6)
23:37:51   6  ,MIN(ydate),MAX(ydate)
23:37:51   7  FROM svm6102
23:37:51   8  GROUP BY pair
23:37:51   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
aud_usd       19697	.95405	   1.0246 .957141438 1.02282723 2010-10-31 23:40:00 2011-02-03 23:30:00

Elapsed: 00:00:00.83
23:37:52 SQL> 
23:37:52 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
23:37:52 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.43
23:37:53 SQL> CREATE TABLE svm6122 COMPRESS AS
23:37:53   2  SELECT
23:37:53   3  pair
23:37:53   4  ,ydate
23:37:53   5  ,prdate
23:37:53   6  ,clse
23:37:53   7  -- g6 is important. I want to predict g6:
23:37:53   8  ,ld6 - clse g6
23:37:53   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
23:37:53  10  -- I want more attributes from the ones I derived above:
23:37:53  11  -- clse relation to moving-min
23:37:53  12  ,clse-min4  cm4
23:37:53  13  ,clse-min6  cm6
23:37:53  14  ,clse-min8  cm8
23:37:53  15  ,clse-min10 cm10
23:37:53  16  ,clse-min12 cm12
23:37:53  17  ,clse-min14 cm14
23:37:53  18  ,clse-min16 cm16
23:37:53  19  ,clse-min18 cm18
23:37:53  20  -- clse relation to moving-avg
23:37:53  21  ,clse-avg4  ca4
23:37:53  22  ,clse-avg6  ca6
23:37:53  23  ,clse-avg8  ca8
23:37:53  24  ,clse-avg10 ca10
23:37:53  25  ,clse-avg12 ca12
23:37:53  26  ,clse-avg14 ca14
23:37:53  27  ,clse-avg16 ca16
23:37:53  28  ,clse-avg18 ca18
23:37:53  29  -- clse relation to moving-max
23:37:53  30  ,clse-max4  cx4
23:37:53  31  ,clse-max6  cx6
23:37:53  32  ,clse-max8  cx8
23:37:53  33  ,clse-max10 cx10
23:37:53  34  ,clse-max12 cx12
23:37:53  35  ,clse-max14 cx14
23:37:53  36  ,clse-max16 cx16
23:37:53  37  ,clse-max18 cx18
23:37:53  38  -- Derive more attributes.
23:37:53  39  -- I want to use CORR() here to help SVM see the shape of the series.
23:37:53  40  -- But COVAR_POP is more stable:
23:37:53  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
23:37:53  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
23:37:53  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
23:37:53  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
23:37:53  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
23:37:53  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
23:37:53  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
23:37:53  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
23:37:53  49  -- Derive date related attributes:
23:37:53  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
23:37:53  51  ,0+TO_CHAR(ydate,'D')d
23:37:53  52  ,0+TO_CHAR(ydate,'W')w
23:37:53  53  -- mpm stands for minutes-past-midnight:
23:37:53  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
23:37:53  55  -- mph stands for minutes-past-hour:
23:37:53  56  ,0+TO_CHAR(ydate,'MI')mph
23:37:53  57  FROM svm6102
23:37:53  58  ORDER BY ydate
23:37:53  59  /

Table created.

Elapsed: 00:00:02.22
23:37:55 SQL> 
23:37:55 SQL> -- rpt
23:37:55 SQL> 
23:37:55 SQL> SELECT
23:37:55   2  pair
23:37:55   3  ,COUNT(pair)
23:37:55   4  ,MIN(clse),MAX(clse)
23:37:55   5  ,MIN(ydate),MAX(ydate)
23:37:55   6  FROM svm6122
23:37:55   7  GROUP BY pair
23:37:55   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
aud_usd       19697	.95405	   1.0246 2010-10-31 23:40:00 2011-02-03 23:30:00

Elapsed: 00:00:00.08
23:37:55 SQL> 
23:37:55 SQL> -- Prepare for derivation of NTILE based params:
23:37:55 SQL> 
23:37:55 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.38
23:37:55 SQL> CREATE TABLE svm6142 COMPRESS AS
23:37:55   2  SELECT
23:37:55   3  pair
23:37:55   4  ,ydate
23:37:55   5  ,prdate
23:37:55   6  ,clse
23:37:55   7  ,g6
23:37:55   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
23:37:55   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
23:37:55  10  ,CASE WHEN trend IS NULL THEN 1
23:37:55  11  	    WHEN trend =0      THEN 1
23:37:55  12  	    ELSE trend END trend
23:37:55  13  ,cm4
23:37:55  14  ,cm6
23:37:55  15  ,cm8
23:37:55  16  ,cm10
23:37:55  17  ,cm12
23:37:55  18  ,cm14
23:37:55  19  ,cm16
23:37:55  20  ,cm18
23:37:55  21  --
23:37:55  22  ,ca4
23:37:55  23  ,ca6
23:37:55  24  ,ca8
23:37:55  25  ,ca10
23:37:55  26  ,ca12
23:37:55  27  ,ca14
23:37:55  28  ,ca16
23:37:55  29  ,ca18
23:37:55  30  --
23:37:55  31  ,cx4
23:37:55  32  ,cx6
23:37:55  33  ,cx8
23:37:55  34  ,cx10
23:37:55  35  ,cx12
23:37:55  36  ,cx14
23:37:55  37  ,cx16
23:37:55  38  ,cx18
23:37:55  39  --
23:37:55  40  ,crr4
23:37:55  41  ,crr6
23:37:55  42  ,crr8
23:37:55  43  ,crr10
23:37:55  44  ,crr12
23:37:55  45  ,crr14
23:37:55  46  ,crr16
23:37:55  47  ,crr18
23:37:55  48  --
23:37:55  49  ,hh
23:37:55  50  ,d
23:37:55  51  ,w
23:37:55  52  ,mpm
23:37:55  53  ,mph
23:37:55  54  FROM svm6122
23:37:55  55  ORDER BY ydate
23:37:55  56  /

Table created.

Elapsed: 00:00:00.39
23:37:56 SQL> 
23:37:56 SQL> -- rpt
23:37:56 SQL> 
23:37:56 SQL> SELECT
23:37:56   2  pair
23:37:56   3  ,trend
23:37:56   4  ,gatt
23:37:56   5  ,COUNT(pair)
23:37:56   6  ,AVG(g6)
23:37:56   7  FROM svm6142
23:37:56   8  GROUP BY pair,trend,gatt
23:37:56   9  ORDER BY pair,trend,gatt
23:37:56  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5666 -.00199525
aud_usd 	-1 up	      3817 .003534718
aud_usd 	 1 nup	      6869 -.00188575
aud_usd 	 1 up	      3273   .0038961
aud_usd 	 1		72

Elapsed: 00:00:00.04
23:37:56 SQL> 
23:37:56 SQL> 
23:37:56 SQL> -- Derive NTILE based params:
23:37:56 SQL> 
23:37:56 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.70
23:37:56 SQL> CREATE TABLE svm6162 COMPRESS AS
23:37:56   2  SELECT
23:37:56   3  pair
23:37:56   4  ,ydate
23:37:56   5  ,prdate
23:37:56   6  ,clse
23:37:56   7  ,g6
23:37:56   8  ,gatt
23:37:56   9  ,gattn
23:37:56  10  ,trend
23:37:56  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
23:37:56  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
23:37:56  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
23:37:56  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
23:37:56  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
23:37:56  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
23:37:56  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
23:37:56  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
23:37:56  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
23:37:56  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
23:37:56  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
23:37:56  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
23:37:56  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
23:37:56  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
23:37:56  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
23:37:56  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
23:37:56  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
23:37:56  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
23:37:56  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
23:37:56  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
23:37:56  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
23:37:56  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
23:37:56  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
23:37:56  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
23:37:56  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
23:37:56  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
23:37:56  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
23:37:56  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
23:37:56  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
23:37:56  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
23:37:56  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
23:37:56  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
23:37:56  43  ,hh  att32
23:37:56  44  ,d   att33
23:37:56  45  ,w   att34
23:37:56  46  ,mpm att35
23:37:56  47  ,mph att36
23:37:56  48  ,trend att37
23:37:56  49  FROM svm6142
23:37:56  50  ORDER BY ydate
23:37:56  51  /

Table created.

Elapsed: 00:00:04.97
23:38:01 SQL> 
23:38:01 SQL> -- rpt
23:38:01 SQL> 
23:38:01 SQL> SELECT
23:38:01   2  pair
23:38:01   3  ,trend
23:38:01   4  ,gatt
23:38:01   5  ,COUNT(pair)
23:38:01   6  ,AVG(g6)
23:38:01   7  FROM svm6162
23:38:01   8  GROUP BY pair,trend,gatt
23:38:01   9  ORDER BY pair,trend,gatt
23:38:01  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5666 -.00199525
aud_usd 	-1 up	      3817 .003534718
aud_usd 	 1 nup	      6869 -.00188575
aud_usd 	 1 up	      3273   .0038961
aud_usd 	 1		72

Elapsed: 00:00:00.04
23:38:01 SQL> 
23:38:01 SQL> 
23:38:01 SQL> CREATE OR REPLACE VIEW sc12 AS
23:38:01   2  SELECT
23:38:01   3  m.pair
23:38:01   4  ,m.ydate
23:38:01   5  ,m.prdate
23:38:01   6  ,l.score score_long
23:38:01   7  ,s.score score_short
23:38:01   8  ,m.g6
23:38:01   9  FROM svm62scores l,svm62scores s,svm6162 m
23:38:01  10  WHERE l.targ='gatt'
23:38:01  11  AND   s.targ='gattn'
23:38:01  12  AND l.prdate = s.prdate
23:38:01  13  AND l.prdate = m.prdate
23:38:01  14  -- Speed things up:
23:38:01  15  AND l.pair = '&1'
23:38:01  16  AND s.pair = '&1'
23:38:01  17  /
old  15: AND l.pair = '&1'
new  15: AND l.pair = 'aud_usd'
old  16: AND s.pair = '&1'
new  16: AND s.pair = 'aud_usd'

View created.

Elapsed: 00:00:00.06
23:38:01 SQL> 
23:38:01 SQL> DROP TABLE score_corr;

Table dropped.

Elapsed: 00:00:00.24
23:38:02 SQL> 
23:38:02 SQL> CREATE TABLE score_corr COMPRESS AS
23:38:02   2  SELECT
23:38:02   3  pair
23:38:02   4  -- ,ydate
23:38:02   5  ,prdate
23:38:02   6  -- Find corr() tween score and g6 over 2 day period:
23:38:02   7  ,CORR((score_long - score_short),g6)
23:38:02   8  	OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 2*24*60/5 PRECEDING AND CURRENT ROW)sc_corr
23:38:02   9  FROM sc12
23:38:02  10  /

Table created.

Elapsed: 00:00:00.43
23:38:02 SQL> 
23:38:02 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.23
23:38:02 SQL> 
23:38:02 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.41
23:38:03 SQL> 
23:38:03 SQL> CREATE TABLE modsrc COMPRESS AS
23:38:03   2  SELECT
23:38:03   3  s.pair
23:38:03   4  ,ydate
23:38:03   5  ,s.prdate
23:38:03   6  ,trend
23:38:03   7  ,g6
23:38:03   8  ,gatt
23:38:03   9  ,gattn
23:38:03  10  ,SUM(g6)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g00
23:38:03  11  ,SUM(g6)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g01
23:38:03  12  ,SUM(g6)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g02
23:38:03  13  ,SUM(g6)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g03
23:38:03  14  ,SUM(g6)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g04
23:38:03  15  ,SUM(g6)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g05
23:38:03  16  ,SUM(g6)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g06
23:38:03  17  ,SUM(g6)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g07
23:38:03  18  ,SUM(g6)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g08
23:38:03  19  ,SUM(g6)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g09
23:38:03  20  ,SUM(g6)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g10
23:38:03  21  ,SUM(g6)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g11
23:38:03  22  ,SUM(g6)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g12
23:38:03  23  ,SUM(g6)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g13
23:38:03  24  ,SUM(g6)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g14
23:38:03  25  ,SUM(g6)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g15
23:38:03  26  ,SUM(g6)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g16
23:38:03  27  ,SUM(g6)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g17
23:38:03  28  ,SUM(g6)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g18
23:38:03  29  ,SUM(g6)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g19
23:38:03  30  ,SUM(g6)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g20
23:38:03  31  ,SUM(g6)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g21
23:38:03  32  ,SUM(g6)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g22
23:38:03  33  ,SUM(g6)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g23
23:38:03  34  ,SUM(g6)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g24
23:38:03  35  ,SUM(g6)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g25
23:38:03  36  ,SUM(g6)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g26
23:38:03  37  ,SUM(g6)OVER(PARTITION BY trend,att27 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g27
23:38:03  38  ,SUM(g6)OVER(PARTITION BY trend,att28 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g28
23:38:03  39  ,SUM(g6)OVER(PARTITION BY trend,att29 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g29
23:38:03  40  ,SUM(g6)OVER(PARTITION BY trend,att30 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g30
23:38:03  41  ,SUM(g6)OVER(PARTITION BY trend,att31 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g31
23:38:03  42  ,SUM(g6)OVER(PARTITION BY trend,att32 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g32
23:38:03  43  ,SUM(g6)OVER(PARTITION BY trend,att33 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g33
23:38:03  44  ,SUM(g6)OVER(PARTITION BY trend,att34 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g34
23:38:03  45  ,SUM(g6)OVER(PARTITION BY trend,att35 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g35
23:38:03  46  ,SUM(g6)OVER(PARTITION BY trend,att36 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g36
23:38:03  47  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g37
23:38:03  48  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*40 PRECEDING AND CURRENT ROW)g38
23:38:03  49  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*30 PRECEDING AND CURRENT ROW)g39
23:38:03  50  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)g40
23:38:03  51  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)g41
23:38:03  52  -- Recent CORR()tween scores and gains:
23:38:03  53  ,NVL(sc_corr,0)sc_corr
23:38:03  54  FROM svm6162 s,score_corr c
23:38:03  55  WHERE s.prdate = c.prdate(+)
23:38:03  56  /

Table created.

Elapsed: 00:00:06.35
23:38:09 SQL> 
23:38:09 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:02.84
23:38:12 SQL> 
23:38:12 SQL> -- rpt
23:38:12 SQL> 
23:38:12 SQL> SELECT
23:38:12   2  pair
23:38:12   3  ,trend
23:38:12   4  ,gatt
23:38:12   5  ,COUNT(pair)
23:38:12   6  ,AVG(g6)
23:38:12   7  FROM modsrc
23:38:12   8  GROUP BY pair,trend,gatt
23:38:12   9  ORDER BY pair,trend,gatt
23:38:12  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5666 -.00199525
aud_usd 	-1 up	      3817 .003534718
aud_usd 	 1 nup	      6869 -.00188575
aud_usd 	 1 up	      3273   .0038961
aud_usd 	 1		72

Elapsed: 00:00:00.02
23:38:12 SQL> 
23:38:12 SQL> 
23:38:12 SQL> SELECT pair,COUNT(pair)FROM svm6102 GROUP BY pair;

PAIR	COUNT(PAIR)
------- -----------
aud_usd       19697

Elapsed: 00:00:00.80
23:38:13 SQL> 
23:38:13 SQL> SELECT pair,COUNT(pair)FROM modsrc GROUP BY pair;

PAIR	COUNT(PAIR)
------- -----------
aud_usd       19697

Elapsed: 00:00:00.00
23:38:13 SQL> 
23:38:13 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
