
SQL*Plus: Release 11.2.0.1.0 Production on Wed Feb 9 21:48:47 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

21:48:47 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
21:48:47 SQL> 21:48:47 SQL> --
21:48:47 SQL> -- pair10.sql
21:48:47 SQL> --
21:48:47 SQL> 
21:48:47 SQL> -- Creates views and tables needed by SVM.
21:48:47 SQL> 
21:48:47 SQL> 
21:48:47 SQL> CREATE OR REPLACE VIEW svm6102 AS
21:48:47   2  SELECT
21:48:47   3  pair
21:48:47   4  ,ydate
21:48:47   5  ,prdate
21:48:47   6  ,rownum rnum -- acts as t in my time-series
21:48:47   7  ,clse
21:48:47   8  -- Derive a bunch of attributes from clse, the latest price:
21:48:47   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
21:48:47  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
21:48:47  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
21:48:47  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
21:48:47  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
21:48:47  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
21:48:47  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
21:48:47  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
21:48:47  17  --
21:48:47  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
21:48:47  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
21:48:47  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
21:48:47  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
21:48:47  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
21:48:47  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
21:48:47  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
21:48:47  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
21:48:47  26  --
21:48:47  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
21:48:47  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
21:48:47  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
21:48:47  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
21:48:47  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
21:48:47  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
21:48:47  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
21:48:47  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
21:48:47  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
21:48:47  36  FROM di5min WHERE pair = '&1'
21:48:47  37  AND ydate > sysdate - 95
21:48:47  38  ORDER BY ydate
21:48:47  39  /
old  36: FROM di5min WHERE pair = '&1'
new  36: FROM di5min WHERE pair = 'usd_jpy'

View created.

Elapsed: 00:00:00.05
21:48:47 SQL> 
21:48:47 SQL> -- rpt
21:48:47 SQL> 
21:48:47 SQL> SELECT
21:48:47   2  pair
21:48:47   3  ,COUNT(pair)
21:48:47   4  ,MIN(clse),MAX(clse)
21:48:47   5  ,MIN(avg6),MAX(avg6)
21:48:47   6  ,MIN(ydate),MAX(ydate)
21:48:47   7  FROM svm6102
21:48:47   8  GROUP BY pair
21:48:47   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_jpy       19397	 80.55	   84.485 80.6721918 84.3105479 2010-11-07 20:55:00 2011-02-09 21:30:00

Elapsed: 00:00:00.84
21:48:48 SQL> 
21:48:48 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
21:48:48 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.24
21:48:49 SQL> CREATE TABLE svm6122 COMPRESS AS
21:48:49   2  SELECT
21:48:49   3  pair
21:48:49   4  ,ydate
21:48:49   5  ,prdate
21:48:49   6  ,clse
21:48:49   7  -- g6 is important. I want to predict g6:
21:48:49   8  ,ld6 - clse g6
21:48:49   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
21:48:49  10  -- I want more attributes from the ones I derived above:
21:48:49  11  -- clse relation to moving-min
21:48:49  12  ,clse-min4  cm4
21:48:49  13  ,clse-min6  cm6
21:48:49  14  ,clse-min8  cm8
21:48:49  15  ,clse-min10 cm10
21:48:49  16  ,clse-min12 cm12
21:48:49  17  ,clse-min14 cm14
21:48:49  18  ,clse-min16 cm16
21:48:49  19  ,clse-min18 cm18
21:48:49  20  -- clse relation to moving-avg
21:48:49  21  ,clse-avg4  ca4
21:48:49  22  ,clse-avg6  ca6
21:48:49  23  ,clse-avg8  ca8
21:48:49  24  ,clse-avg10 ca10
21:48:49  25  ,clse-avg12 ca12
21:48:49  26  ,clse-avg14 ca14
21:48:49  27  ,clse-avg16 ca16
21:48:49  28  ,clse-avg18 ca18
21:48:49  29  -- clse relation to moving-max
21:48:49  30  ,clse-max4  cx4
21:48:49  31  ,clse-max6  cx6
21:48:49  32  ,clse-max8  cx8
21:48:49  33  ,clse-max10 cx10
21:48:49  34  ,clse-max12 cx12
21:48:49  35  ,clse-max14 cx14
21:48:49  36  ,clse-max16 cx16
21:48:49  37  ,clse-max18 cx18
21:48:49  38  -- Derive more attributes.
21:48:49  39  -- I want to use CORR() here to help SVM see the shape of the series.
21:48:49  40  -- But COVAR_POP is more stable:
21:48:49  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
21:48:49  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
21:48:49  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
21:48:49  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
21:48:49  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
21:48:49  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
21:48:49  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
21:48:49  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
21:48:49  49  -- Derive date related attributes:
21:48:49  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
21:48:49  51  ,0+TO_CHAR(ydate,'D')d
21:48:49  52  ,0+TO_CHAR(ydate,'W')w
21:48:49  53  -- mpm stands for minutes-past-midnight:
21:48:49  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
21:48:49  55  -- mph stands for minutes-past-hour:
21:48:49  56  ,0+TO_CHAR(ydate,'MI')mph
21:48:49  57  FROM svm6102
21:48:49  58  ORDER BY ydate
21:48:49  59  /

Table created.

Elapsed: 00:00:02.26
21:48:51 SQL> 
21:48:51 SQL> -- rpt
21:48:51 SQL> 
21:48:51 SQL> SELECT
21:48:51   2  pair
21:48:51   3  ,COUNT(pair)
21:48:51   4  ,MIN(clse),MAX(clse)
21:48:51   5  ,MIN(ydate),MAX(ydate)
21:48:51   6  FROM svm6122
21:48:51   7  GROUP BY pair
21:48:51   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_jpy       19397	 80.55	   84.485 2010-11-07 20:55:00 2011-02-09 21:30:00

Elapsed: 00:00:00.04
21:48:51 SQL> 
21:48:51 SQL> -- Prepare for derivation of NTILE based params:
21:48:51 SQL> 
21:48:51 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.29
21:48:51 SQL> CREATE TABLE svm6142 COMPRESS AS
21:48:51   2  SELECT
21:48:51   3  pair
21:48:51   4  ,ydate
21:48:51   5  ,prdate
21:48:51   6  ,clse
21:48:51   7  ,g6
21:48:51   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
21:48:51   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
21:48:51  10  ,CASE WHEN trend IS NULL THEN 1
21:48:51  11  	    WHEN trend =0      THEN 1
21:48:51  12  	    ELSE trend END trend
21:48:51  13  ,cm4
21:48:51  14  ,cm6
21:48:51  15  ,cm8
21:48:51  16  ,cm10
21:48:51  17  ,cm12
21:48:51  18  ,cm14
21:48:51  19  ,cm16
21:48:51  20  ,cm18
21:48:51  21  --
21:48:51  22  ,ca4
21:48:51  23  ,ca6
21:48:51  24  ,ca8
21:48:51  25  ,ca10
21:48:51  26  ,ca12
21:48:51  27  ,ca14
21:48:51  28  ,ca16
21:48:51  29  ,ca18
21:48:51  30  --
21:48:51  31  ,cx4
21:48:51  32  ,cx6
21:48:51  33  ,cx8
21:48:51  34  ,cx10
21:48:51  35  ,cx12
21:48:51  36  ,cx14
21:48:51  37  ,cx16
21:48:51  38  ,cx18
21:48:51  39  --
21:48:51  40  ,crr4
21:48:51  41  ,crr6
21:48:51  42  ,crr8
21:48:51  43  ,crr10
21:48:51  44  ,crr12
21:48:51  45  ,crr14
21:48:51  46  ,crr16
21:48:51  47  ,crr18
21:48:51  48  --
21:48:51  49  ,hh
21:48:51  50  ,d
21:48:51  51  ,w
21:48:51  52  ,mpm
21:48:51  53  ,mph
21:48:51  54  FROM svm6122
21:48:51  55  ORDER BY ydate
21:48:51  56  /

Table created.

Elapsed: 00:00:00.39
21:48:51 SQL> 
21:48:51 SQL> -- rpt
21:48:51 SQL> 
21:48:51 SQL> SELECT
21:48:51   2  pair
21:48:51   3  ,trend
21:48:51   4  ,gatt
21:48:51   5  ,COUNT(pair)
21:48:51   6  ,AVG(g6)
21:48:51   7  FROM svm6142
21:48:51   8  GROUP BY pair,trend,gatt
21:48:51   9  ORDER BY pair,trend,gatt
21:48:51  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      4978 -.15618557
usd_jpy 	-1 up	      4838 .172618517
usd_jpy 	-1		60
usd_jpy 	 1 nup	      4997 -.15513222
usd_jpy 	 1 up	      4512 .177679869
usd_jpy 	 1		12

6 rows selected.

Elapsed: 00:00:00.04
21:48:52 SQL> 
21:48:52 SQL> 
21:48:52 SQL> -- Derive NTILE based params:
21:48:52 SQL> 
21:48:52 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.17
21:48:52 SQL> CREATE TABLE svm6162 COMPRESS AS
21:48:52   2  SELECT
21:48:52   3  pair
21:48:52   4  ,ydate
21:48:52   5  ,prdate
21:48:52   6  ,clse
21:48:52   7  ,g6
21:48:52   8  ,gatt
21:48:52   9  ,gattn
21:48:52  10  ,trend
21:48:52  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
21:48:52  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
21:48:52  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
21:48:52  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
21:48:52  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
21:48:52  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
21:48:52  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
21:48:52  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
21:48:52  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
21:48:52  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
21:48:52  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
21:48:52  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
21:48:52  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
21:48:52  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
21:48:52  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
21:48:52  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
21:48:52  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
21:48:52  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
21:48:52  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
21:48:52  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
21:48:52  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
21:48:52  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
21:48:52  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
21:48:52  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
21:48:52  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
21:48:52  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
21:48:52  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
21:48:52  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
21:48:52  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
21:48:52  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
21:48:52  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
21:48:52  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
21:48:52  43  ,hh  att32
21:48:52  44  ,d   att33
21:48:52  45  ,w   att34
21:48:52  46  ,mpm att35
21:48:52  47  ,mph att36
21:48:52  48  ,trend att37
21:48:52  49  FROM svm6142
21:48:52  50  ORDER BY ydate
21:48:52  51  /

Table created.

Elapsed: 00:00:04.91
21:48:57 SQL> 
21:48:57 SQL> -- rpt
21:48:57 SQL> 
21:48:57 SQL> SELECT
21:48:57   2  pair
21:48:57   3  ,trend
21:48:57   4  ,gatt
21:48:57   5  ,COUNT(pair)
21:48:57   6  ,AVG(g6)
21:48:57   7  FROM svm6162
21:48:57   8  GROUP BY pair,trend,gatt
21:48:57   9  ORDER BY pair,trend,gatt
21:48:57  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      4978 -.15618557
usd_jpy 	-1 up	      4838 .172618517
usd_jpy 	-1		60
usd_jpy 	 1 nup	      4997 -.15513222
usd_jpy 	 1 up	      4512 .177679869
usd_jpy 	 1		12

6 rows selected.

Elapsed: 00:00:00.04
21:48:57 SQL> 
21:48:57 SQL> -- I comment out sections related to score-feedback.
21:48:57 SQL> -- I tested score-feeback and it hurts results:
21:48:57 SQL> 
21:48:57 SQL> -- CREATE OR REPLACE VIEW sc12 AS
21:48:57 SQL> -- SELECT
21:48:57 SQL> -- m.pair
21:48:57 SQL> -- ,m.ydate
21:48:57 SQL> -- ,m.prdate
21:48:57 SQL> -- ,l.score score_long
21:48:57 SQL> -- ,s.score score_short
21:48:57 SQL> -- ,m.g6
21:48:57 SQL> -- FROM svm62scores l,svm62scores s,svm6162 m
21:48:57 SQL> -- WHERE l.targ='gatt'
21:48:57 SQL> -- AND	 s.targ='gattn'
21:48:57 SQL> -- AND l.prdate = s.prdate
21:48:57 SQL> -- AND l.prdate = m.prdate
21:48:57 SQL> -- -- Speed things up:
21:48:57 SQL> -- AND l.pair = '&1'
21:48:57 SQL> -- AND s.pair = '&1'
21:48:57 SQL> -- /
21:48:57 SQL> --
21:48:57 SQL> -- DROP TABLE score_corr;
21:48:57 SQL> --
21:48:57 SQL> -- CREATE TABLE score_corr COMPRESS AS
21:48:57 SQL> -- SELECT
21:48:57 SQL> -- pair
21:48:57 SQL> -- -- ,ydate
21:48:57 SQL> -- ,prdate
21:48:57 SQL> -- -- Find corr() tween score and g6 over 2 day period:
21:48:57 SQL> -- ,CORR((score_long - score_short),g6)
21:48:57 SQL> --   OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 2*24*60/5 PRECEDING AND CURRENT ROW)sc_corr
21:48:57 SQL> -- FROM sc12
21:48:57 SQL> -- /
21:48:57 SQL> 
21:48:57 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.32
21:48:57 SQL> 
21:48:57 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.32
21:48:57 SQL> 
21:48:57 SQL> CREATE TABLE modsrc COMPRESS AS
21:48:57   2  SELECT
21:48:57   3  pair
21:48:57   4  ,ydate
21:48:57   5  ,prdate
21:48:57   6  ,trend
21:48:57   7  ,g6
21:48:57   8  ,gatt
21:48:57   9  ,gattn
21:48:57  10  ,SUM(g6)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g00
21:48:57  11  ,SUM(g6)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g01
21:48:57  12  ,SUM(g6)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g02
21:48:57  13  ,SUM(g6)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g03
21:48:57  14  ,SUM(g6)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g04
21:48:57  15  ,SUM(g6)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g05
21:48:57  16  ,SUM(g6)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g06
21:48:57  17  ,SUM(g6)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g07
21:48:57  18  ,SUM(g6)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g08
21:48:57  19  ,SUM(g6)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g09
21:48:57  20  ,SUM(g6)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g10
21:48:57  21  ,SUM(g6)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g11
21:48:57  22  ,SUM(g6)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g12
21:48:57  23  ,SUM(g6)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g13
21:48:57  24  ,SUM(g6)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g14
21:48:57  25  ,SUM(g6)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g15
21:48:57  26  ,SUM(g6)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g16
21:48:57  27  ,SUM(g6)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g17
21:48:57  28  ,SUM(g6)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g18
21:48:57  29  ,SUM(g6)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g19
21:48:57  30  ,SUM(g6)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g20
21:48:57  31  ,SUM(g6)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g21
21:48:57  32  ,SUM(g6)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g22
21:48:57  33  ,SUM(g6)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g23
21:48:57  34  ,SUM(g6)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g24
21:48:57  35  ,SUM(g6)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g25
21:48:57  36  ,SUM(g6)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g26
21:48:57  37  ,SUM(g6)OVER(PARTITION BY trend,att27 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g27
21:48:57  38  ,SUM(g6)OVER(PARTITION BY trend,att28 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g28
21:48:57  39  ,SUM(g6)OVER(PARTITION BY trend,att29 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g29
21:48:57  40  ,SUM(g6)OVER(PARTITION BY trend,att30 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g30
21:48:57  41  ,SUM(g6)OVER(PARTITION BY trend,att31 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g31
21:48:57  42  ,SUM(g6)OVER(PARTITION BY trend,att32 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g32
21:48:57  43  ,SUM(g6)OVER(PARTITION BY trend,att33 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g33
21:48:57  44  ,SUM(g6)OVER(PARTITION BY trend,att34 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g34
21:48:57  45  ,SUM(g6)OVER(PARTITION BY trend,att35 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g35
21:48:57  46  ,SUM(g6)OVER(PARTITION BY trend,att36 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g36
21:48:57  47  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g37
21:48:57  48  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*40 PRECEDING AND CURRENT ROW)g38
21:48:57  49  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*30 PRECEDING AND CURRENT ROW)g39
21:48:57  50  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)g40
21:48:57  51  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)g41
21:48:57  52  FROM svm6162
21:48:57  53  /

Table created.

Elapsed: 00:00:05.97
21:49:03 SQL> 
21:49:03 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:02.24
21:49:06 SQL> 
21:49:06 SQL> -- rpt
21:49:06 SQL> 
21:49:06 SQL> SELECT
21:49:06   2  pair
21:49:06   3  ,trend
21:49:06   4  ,gatt
21:49:06   5  ,COUNT(pair)
21:49:06   6  ,AVG(g6)
21:49:06   7  FROM modsrc
21:49:06   8  GROUP BY pair,trend,gatt
21:49:06   9  ORDER BY pair,trend,gatt
21:49:06  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      4978 -.15618557
usd_jpy 	-1 up	      4838 .172618517
usd_jpy 	-1		60
usd_jpy 	 1 nup	      4997 -.15513222
usd_jpy 	 1 up	      4512 .177679869
usd_jpy 	 1		12

6 rows selected.

Elapsed: 00:00:00.02
21:49:06 SQL> 
21:49:06 SQL> 
21:49:06 SQL> SELECT pair,COUNT(pair)FROM svm6102 GROUP BY pair;

PAIR	COUNT(PAIR)
------- -----------
usd_jpy       19397

Elapsed: 00:00:00.85
21:49:06 SQL> 
21:49:06 SQL> SELECT pair,COUNT(pair)FROM modsrc GROUP BY pair;

PAIR	COUNT(PAIR)
------- -----------
usd_jpy       19397

Elapsed: 00:00:00.01
21:49:06 SQL> 
21:49:06 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
