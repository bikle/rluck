
SQL*Plus: Release 11.2.0.1.0 Production on Fri Feb 18 08:44:51 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

08:44:51 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
08:44:51 SQL> 08:44:51 SQL> --
08:44:51 SQL> -- pair10.sql
08:44:51 SQL> --
08:44:51 SQL> 
08:44:51 SQL> -- Creates views and tables needed by SVM.
08:44:51 SQL> 
08:44:51 SQL> 
08:44:51 SQL> CREATE OR REPLACE VIEW svm6102 AS
08:44:51   2  SELECT
08:44:51   3  pair
08:44:51   4  ,ydate
08:44:51   5  ,prdate
08:44:51   6  ,rownum rnum -- acts as t in my time-series
08:44:51   7  ,clse
08:44:51   8  -- Derive a bunch of attributes from clse, the latest price:
08:44:51   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
08:44:51  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
08:44:51  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
08:44:51  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
08:44:51  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
08:44:51  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
08:44:51  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
08:44:51  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
08:44:51  17  --
08:44:51  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
08:44:51  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
08:44:51  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
08:44:51  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
08:44:51  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
08:44:51  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
08:44:51  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
08:44:51  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
08:44:51  26  --
08:44:51  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
08:44:51  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
08:44:51  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
08:44:51  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
08:44:51  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
08:44:51  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
08:44:51  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
08:44:51  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
08:44:51  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
08:44:51  36  FROM di5min WHERE pair = '&1'
08:44:51  37  AND ydate > sysdate - 95
08:44:51  38  ORDER BY ydate
08:44:51  39  /
old  36: FROM di5min WHERE pair = '&1'
new  36: FROM di5min WHERE pair = 'eur_gbp'

View created.

Elapsed: 00:00:00.07
08:44:51 SQL> 
08:44:51 SQL> -- rpt
08:44:51 SQL> 
08:44:51 SQL> SELECT
08:44:51   2  pair
08:44:51   3  ,COUNT(pair)
08:44:51   4  ,MIN(clse),MAX(clse)
08:44:51   5  ,MIN(avg6),MAX(avg6)
08:44:51   6  ,MIN(ydate),MAX(ydate)
08:44:51   7  FROM svm6102
08:44:51   8  GROUP BY pair
08:44:51   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_gbp       19639 .829062716 .867050282 .830048836 .865740025 2010-11-15 08:45:00 2011-02-18 08:25:00

Elapsed: 00:00:00.86
08:44:52 SQL> 
08:44:52 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
08:44:52 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.24
08:44:52 SQL> CREATE TABLE svm6122 COMPRESS AS
08:44:52   2  SELECT
08:44:52   3  pair
08:44:52   4  ,ydate
08:44:52   5  ,prdate
08:44:52   6  ,clse
08:44:52   7  -- g6 is important. I want to predict g6:
08:44:52   8  ,ld6 - clse g6
08:44:52   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
08:44:52  10  -- I want more attributes from the ones I derived above:
08:44:52  11  -- clse relation to moving-min
08:44:52  12  ,clse-min4  cm4
08:44:52  13  ,clse-min6  cm6
08:44:52  14  ,clse-min8  cm8
08:44:52  15  ,clse-min10 cm10
08:44:52  16  ,clse-min12 cm12
08:44:52  17  ,clse-min14 cm14
08:44:52  18  ,clse-min16 cm16
08:44:52  19  ,clse-min18 cm18
08:44:52  20  -- clse relation to moving-avg
08:44:52  21  ,clse-avg4  ca4
08:44:52  22  ,clse-avg6  ca6
08:44:52  23  ,clse-avg8  ca8
08:44:52  24  ,clse-avg10 ca10
08:44:52  25  ,clse-avg12 ca12
08:44:52  26  ,clse-avg14 ca14
08:44:52  27  ,clse-avg16 ca16
08:44:52  28  ,clse-avg18 ca18
08:44:52  29  -- clse relation to moving-max
08:44:52  30  ,clse-max4  cx4
08:44:52  31  ,clse-max6  cx6
08:44:52  32  ,clse-max8  cx8
08:44:52  33  ,clse-max10 cx10
08:44:52  34  ,clse-max12 cx12
08:44:52  35  ,clse-max14 cx14
08:44:52  36  ,clse-max16 cx16
08:44:52  37  ,clse-max18 cx18
08:44:52  38  -- Derive more attributes.
08:44:52  39  -- I want to use CORR() here to help SVM see the shape of the series.
08:44:52  40  -- But COVAR_POP is more stable:
08:44:52  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
08:44:52  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
08:44:52  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
08:44:52  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
08:44:52  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
08:44:52  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
08:44:52  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
08:44:52  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
08:44:52  49  -- Derive date related attributes:
08:44:52  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
08:44:52  51  ,0+TO_CHAR(ydate,'D')d
08:44:52  52  ,0+TO_CHAR(ydate,'W')w
08:44:52  53  -- mpm stands for minutes-past-midnight:
08:44:52  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
08:44:52  55  -- mph stands for minutes-past-hour:
08:44:52  56  ,0+TO_CHAR(ydate,'MI')mph
08:44:52  57  FROM svm6102
08:44:52  58  ORDER BY ydate
08:44:52  59  /

Table created.

Elapsed: 00:00:02.50
08:44:55 SQL> 
08:44:55 SQL> -- rpt
08:44:55 SQL> 
08:44:55 SQL> SELECT
08:44:55   2  pair
08:44:55   3  ,COUNT(pair)
08:44:55   4  ,MIN(clse),MAX(clse)
08:44:55   5  ,MIN(ydate),MAX(ydate)
08:44:55   6  FROM svm6122
08:44:55   7  GROUP BY pair
08:44:55   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_gbp       19639 .829062716 .867050282 2010-11-15 08:45:00 2011-02-18 08:25:00

Elapsed: 00:00:00.22
08:44:55 SQL> 
08:44:55 SQL> -- Prepare for derivation of NTILE based params:
08:44:55 SQL> 
08:44:55 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.25
08:44:55 SQL> CREATE TABLE svm6142 COMPRESS AS
08:44:55   2  SELECT
08:44:55   3  pair
08:44:55   4  ,ydate
08:44:55   5  ,prdate
08:44:55   6  ,clse
08:44:55   7  ,g6
08:44:55   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
08:44:55   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
08:44:55  10  ,CASE WHEN trend IS NULL THEN 1
08:44:55  11  	    WHEN trend =0      THEN 1
08:44:55  12  	    ELSE trend END trend
08:44:55  13  ,cm4
08:44:55  14  ,cm6
08:44:55  15  ,cm8
08:44:55  16  ,cm10
08:44:55  17  ,cm12
08:44:55  18  ,cm14
08:44:55  19  ,cm16
08:44:55  20  ,cm18
08:44:55  21  --
08:44:55  22  ,ca4
08:44:55  23  ,ca6
08:44:55  24  ,ca8
08:44:55  25  ,ca10
08:44:55  26  ,ca12
08:44:55  27  ,ca14
08:44:55  28  ,ca16
08:44:55  29  ,ca18
08:44:55  30  --
08:44:55  31  ,cx4
08:44:55  32  ,cx6
08:44:55  33  ,cx8
08:44:55  34  ,cx10
08:44:55  35  ,cx12
08:44:55  36  ,cx14
08:44:55  37  ,cx16
08:44:55  38  ,cx18
08:44:55  39  --
08:44:55  40  ,crr4
08:44:55  41  ,crr6
08:44:55  42  ,crr8
08:44:55  43  ,crr10
08:44:55  44  ,crr12
08:44:55  45  ,crr14
08:44:55  46  ,crr16
08:44:55  47  ,crr18
08:44:55  48  --
08:44:55  49  ,hh
08:44:55  50  ,d
08:44:55  51  ,w
08:44:55  52  ,mpm
08:44:55  53  ,mph
08:44:55  54  FROM svm6122
08:44:55  55  ORDER BY ydate
08:44:55  56  /

Table created.

Elapsed: 00:00:00.45
08:44:56 SQL> 
08:44:56 SQL> -- rpt
08:44:56 SQL> 
08:44:56 SQL> SELECT
08:44:56   2  pair
08:44:56   3  ,trend
08:44:56   4  ,gatt
08:44:56   5  ,COUNT(pair)
08:44:56   6  ,AVG(g6)
08:44:56   7  FROM svm6142
08:44:56   8  GROUP BY pair,trend,gatt
08:44:56   9  ORDER BY pair,trend,gatt
08:44:56  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_gbp 	-1 nup	      7637 -.00095284
eur_gbp 	-1 up	      2299 .002712551
eur_gbp 	-1		58
eur_gbp 	 1 nup	      7002 -.00100102
eur_gbp 	 1 up	      2629 .002869206
eur_gbp 	 1		14

6 rows selected.

Elapsed: 00:00:00.05
08:44:56 SQL> 
08:44:56 SQL> 
08:44:56 SQL> -- Derive NTILE based params:
08:44:56 SQL> 
08:44:56 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.18
08:44:56 SQL> CREATE TABLE svm6162 COMPRESS AS
08:44:56   2  SELECT
08:44:56   3  pair
08:44:56   4  ,ydate
08:44:56   5  ,prdate
08:44:56   6  ,clse
08:44:56   7  ,g6
08:44:56   8  ,gatt
08:44:56   9  ,gattn
08:44:56  10  ,trend
08:44:56  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
08:44:56  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
08:44:56  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
08:44:56  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
08:44:56  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
08:44:56  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
08:44:56  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
08:44:56  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
08:44:56  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
08:44:56  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
08:44:56  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
08:44:56  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
08:44:56  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
08:44:56  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
08:44:56  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
08:44:56  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
08:44:56  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
08:44:56  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
08:44:56  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
08:44:56  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
08:44:56  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
08:44:56  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
08:44:56  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
08:44:56  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
08:44:56  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
08:44:56  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
08:44:56  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
08:44:56  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
08:44:56  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
08:44:56  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
08:44:56  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
08:44:56  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
08:44:56  43  ,hh  att32
08:44:56  44  ,d   att33
08:44:56  45  ,w   att34
08:44:56  46  ,mpm att35
08:44:56  47  ,mph att36
08:44:56  48  ,trend att37
08:44:56  49  FROM svm6142
08:44:56  50  ORDER BY ydate
08:44:56  51  /

Table created.

Elapsed: 00:00:05.56
08:45:01 SQL> 
08:45:01 SQL> -- rpt
08:45:01 SQL> 
08:45:01 SQL> SELECT
08:45:01   2  pair
08:45:01   3  ,trend
08:45:01   4  ,gatt
08:45:01   5  ,COUNT(pair)
08:45:01   6  ,AVG(g6)
08:45:01   7  FROM svm6162
08:45:01   8  GROUP BY pair,trend,gatt
08:45:01   9  ORDER BY pair,trend,gatt
08:45:01  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_gbp 	-1 nup	      7637 -.00095284
eur_gbp 	-1 up	      2299 .002712551
eur_gbp 	-1		58
eur_gbp 	 1 nup	      7002 -.00100102
eur_gbp 	 1 up	      2629 .002869206
eur_gbp 	 1		14

6 rows selected.

Elapsed: 00:00:00.03
08:45:01 SQL> 
08:45:01 SQL> -- I comment out sections related to score-feedback.
08:45:01 SQL> -- I tested score-feeback and it hurts results:
08:45:01 SQL> 
08:45:01 SQL> -- CREATE OR REPLACE VIEW sc12 AS
08:45:01 SQL> -- SELECT
08:45:01 SQL> -- m.pair
08:45:01 SQL> -- ,m.ydate
08:45:01 SQL> -- ,m.prdate
08:45:01 SQL> -- ,l.score score_long
08:45:01 SQL> -- ,s.score score_short
08:45:01 SQL> -- ,m.g6
08:45:01 SQL> -- FROM svm62scores l,svm62scores s,svm6162 m
08:45:01 SQL> -- WHERE l.targ='gatt'
08:45:01 SQL> -- AND	 s.targ='gattn'
08:45:01 SQL> -- AND l.prdate = s.prdate
08:45:01 SQL> -- AND l.prdate = m.prdate
08:45:01 SQL> -- -- Speed things up:
08:45:01 SQL> -- AND l.pair = '&1'
08:45:01 SQL> -- AND s.pair = '&1'
08:45:01 SQL> -- /
08:45:01 SQL> --
08:45:01 SQL> -- DROP TABLE score_corr;
08:45:01 SQL> --
08:45:01 SQL> -- CREATE TABLE score_corr COMPRESS AS
08:45:01 SQL> -- SELECT
08:45:01 SQL> -- pair
08:45:01 SQL> -- -- ,ydate
08:45:01 SQL> -- ,prdate
08:45:01 SQL> -- -- Find corr() tween score and g6 over 2 day period:
08:45:01 SQL> -- ,CORR((score_long - score_short),g6)
08:45:01 SQL> --   OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 2*24*60/5 PRECEDING AND CURRENT ROW)sc_corr
08:45:01 SQL> -- FROM sc12
08:45:01 SQL> -- /
08:45:01 SQL> 
08:45:01 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.25
08:45:02 SQL> 
08:45:02 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.26
08:45:02 SQL> 
08:45:02 SQL> CREATE TABLE modsrc COMPRESS AS
08:45:02   2  SELECT
08:45:02   3  pair
08:45:02   4  ,ydate
08:45:02   5  ,prdate
08:45:02   6  ,trend
08:45:02   7  ,g6
08:45:02   8  ,gatt
08:45:02   9  ,gattn
08:45:02  10  ,SUM(g6)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g00
08:45:02  11  ,SUM(g6)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g01
08:45:02  12  ,SUM(g6)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g02
08:45:02  13  ,SUM(g6)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g03
08:45:02  14  ,SUM(g6)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g04
08:45:02  15  ,SUM(g6)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g05
08:45:02  16  ,SUM(g6)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g06
08:45:02  17  ,SUM(g6)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g07
08:45:02  18  ,SUM(g6)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g08
08:45:02  19  ,SUM(g6)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g09
08:45:02  20  ,SUM(g6)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g10
08:45:02  21  ,SUM(g6)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g11
08:45:02  22  ,SUM(g6)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g12
08:45:02  23  ,SUM(g6)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g13
08:45:02  24  ,SUM(g6)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g14
08:45:02  25  ,SUM(g6)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g15
08:45:02  26  ,SUM(g6)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g16
08:45:02  27  ,SUM(g6)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g17
08:45:02  28  ,SUM(g6)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g18
08:45:02  29  ,SUM(g6)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g19
08:45:02  30  ,SUM(g6)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g20
08:45:02  31  ,SUM(g6)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g21
08:45:02  32  ,SUM(g6)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g22
08:45:02  33  ,SUM(g6)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g23
08:45:02  34  ,SUM(g6)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g24
08:45:02  35  ,SUM(g6)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g25
08:45:02  36  ,SUM(g6)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g26
08:45:02  37  ,SUM(g6)OVER(PARTITION BY trend,att27 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g27
08:45:02  38  ,SUM(g6)OVER(PARTITION BY trend,att28 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g28
08:45:02  39  ,SUM(g6)OVER(PARTITION BY trend,att29 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g29
08:45:02  40  ,SUM(g6)OVER(PARTITION BY trend,att30 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g30
08:45:02  41  ,SUM(g6)OVER(PARTITION BY trend,att31 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g31
08:45:02  42  ,SUM(g6)OVER(PARTITION BY trend,att32 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g32
08:45:02  43  ,SUM(g6)OVER(PARTITION BY trend,att33 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g33
08:45:02  44  ,SUM(g6)OVER(PARTITION BY trend,att34 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g34
08:45:02  45  ,SUM(g6)OVER(PARTITION BY trend,att35 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g35
08:45:02  46  ,SUM(g6)OVER(PARTITION BY trend,att36 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g36
08:45:02  47  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g37
08:45:02  48  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*40 PRECEDING AND CURRENT ROW)g38
08:45:02  49  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*30 PRECEDING AND CURRENT ROW)g39
08:45:02  50  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)g40
08:45:02  51  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)g41
08:45:02  52  FROM svm6162
08:45:02  53  /

Table created.

Elapsed: 00:00:06.71
08:45:09 SQL> 
08:45:09 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:02.81
08:45:11 SQL> 
08:45:11 SQL> -- rpt
08:45:11 SQL> 
08:45:11 SQL> SELECT
08:45:11   2  pair
08:45:11   3  ,trend
08:45:11   4  ,gatt
08:45:11   5  ,COUNT(pair)
08:45:11   6  ,AVG(g6)
08:45:11   7  FROM modsrc
08:45:11   8  GROUP BY pair,trend,gatt
08:45:11   9  ORDER BY pair,trend,gatt
08:45:11  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_gbp 	-1 nup	      7637 -.00095284
eur_gbp 	-1 up	      2299 .002712551
eur_gbp 	-1		58
eur_gbp 	 1 nup	      7002 -.00100102
eur_gbp 	 1 up	      2629 .002869206
eur_gbp 	 1		14

6 rows selected.

Elapsed: 00:00:00.02
08:45:11 SQL> 
08:45:11 SQL> 
08:45:11 SQL> SELECT pair,COUNT(pair)FROM svm6102 GROUP BY pair;

PAIR	COUNT(PAIR)
------- -----------
eur_gbp       19638

Elapsed: 00:00:00.87
08:45:12 SQL> 
08:45:12 SQL> SELECT pair,COUNT(pair)FROM modsrc GROUP BY pair;

PAIR	COUNT(PAIR)
------- -----------
eur_gbp       19639

Elapsed: 00:00:00.01
08:45:12 SQL> 
08:45:12 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
