
SQL*Plus: Release 11.2.0.1.0 Production on Tue Feb 8 07:32:17 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

07:32:17 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
07:32:17 SQL> 07:32:17 SQL> --
07:32:17 SQL> -- pair10.sql
07:32:17 SQL> --
07:32:17 SQL> 
07:32:17 SQL> -- Creates views and tables needed by SVM.
07:32:17 SQL> 
07:32:17 SQL> 
07:32:17 SQL> CREATE OR REPLACE VIEW svm6102 AS
07:32:17   2  SELECT
07:32:17   3  pair
07:32:17   4  ,ydate
07:32:17   5  ,prdate
07:32:17   6  ,rownum rnum -- acts as t in my time-series
07:32:17   7  ,clse
07:32:17   8  -- Derive a bunch of attributes from clse, the latest price:
07:32:17   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
07:32:17  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
07:32:17  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
07:32:17  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
07:32:17  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
07:32:17  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
07:32:17  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
07:32:17  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
07:32:17  17  --
07:32:17  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
07:32:17  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
07:32:17  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
07:32:17  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
07:32:17  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
07:32:17  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
07:32:17  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
07:32:17  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
07:32:17  26  --
07:32:17  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
07:32:17  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
07:32:17  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
07:32:17  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
07:32:17  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
07:32:17  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
07:32:17  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
07:32:17  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
07:32:17  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
07:32:17  36  FROM di5min WHERE pair = '&1'
07:32:17  37  AND ydate > sysdate - 95
07:32:17  38  ORDER BY ydate
07:32:17  39  /
old  36: FROM di5min WHERE pair = '&1'
new  36: FROM di5min WHERE pair = 'gbp_usd'

View created.

Elapsed: 00:00:00.04
07:32:17 SQL> 
07:32:17 SQL> -- rpt
07:32:17 SQL> 
07:32:17 SQL> SELECT
07:32:17   2  pair
07:32:17   3  ,COUNT(pair)
07:32:17   4  ,MIN(clse),MAX(clse)
07:32:17   5  ,MIN(avg6),MAX(avg6)
07:32:17   6  ,MIN(ydate),MAX(ydate)
07:32:17   7  FROM svm6102
07:32:17   8  GROUP BY pair
07:32:17   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
gbp_usd       19118   1.535325	  1.62765 1.53696747 1.62269315 2010-11-05 07:35:00 2011-02-08 07:20:00

Elapsed: 00:00:00.78
07:32:18 SQL> 
07:32:18 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
07:32:18 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.18
07:32:18 SQL> CREATE TABLE svm6122 COMPRESS AS
07:32:18   2  SELECT
07:32:18   3  pair
07:32:18   4  ,ydate
07:32:18   5  ,prdate
07:32:18   6  ,clse
07:32:18   7  -- g6 is important. I want to predict g6:
07:32:18   8  ,ld6 - clse g6
07:32:18   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
07:32:18  10  -- I want more attributes from the ones I derived above:
07:32:18  11  -- clse relation to moving-min
07:32:18  12  ,clse-min4  cm4
07:32:18  13  ,clse-min6  cm6
07:32:18  14  ,clse-min8  cm8
07:32:18  15  ,clse-min10 cm10
07:32:18  16  ,clse-min12 cm12
07:32:18  17  ,clse-min14 cm14
07:32:18  18  ,clse-min16 cm16
07:32:18  19  ,clse-min18 cm18
07:32:18  20  -- clse relation to moving-avg
07:32:18  21  ,clse-avg4  ca4
07:32:18  22  ,clse-avg6  ca6
07:32:18  23  ,clse-avg8  ca8
07:32:18  24  ,clse-avg10 ca10
07:32:18  25  ,clse-avg12 ca12
07:32:18  26  ,clse-avg14 ca14
07:32:18  27  ,clse-avg16 ca16
07:32:18  28  ,clse-avg18 ca18
07:32:18  29  -- clse relation to moving-max
07:32:18  30  ,clse-max4  cx4
07:32:18  31  ,clse-max6  cx6
07:32:18  32  ,clse-max8  cx8
07:32:18  33  ,clse-max10 cx10
07:32:18  34  ,clse-max12 cx12
07:32:18  35  ,clse-max14 cx14
07:32:18  36  ,clse-max16 cx16
07:32:18  37  ,clse-max18 cx18
07:32:18  38  -- Derive more attributes.
07:32:18  39  -- I want to use CORR() here to help SVM see the shape of the series.
07:32:18  40  -- But COVAR_POP is more stable:
07:32:18  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
07:32:18  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
07:32:18  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
07:32:18  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
07:32:18  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
07:32:18  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
07:32:18  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
07:32:18  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
07:32:18  49  -- Derive date related attributes:
07:32:18  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
07:32:18  51  ,0+TO_CHAR(ydate,'D')d
07:32:18  52  ,0+TO_CHAR(ydate,'W')w
07:32:18  53  -- mpm stands for minutes-past-midnight:
07:32:18  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
07:32:18  55  -- mph stands for minutes-past-hour:
07:32:18  56  ,0+TO_CHAR(ydate,'MI')mph
07:32:18  57  FROM svm6102
07:32:18  58  ORDER BY ydate
07:32:18  59  /

Table created.

Elapsed: 00:00:02.11
07:32:20 SQL> 
07:32:20 SQL> -- rpt
07:32:20 SQL> 
07:32:20 SQL> SELECT
07:32:20   2  pair
07:32:20   3  ,COUNT(pair)
07:32:20   4  ,MIN(clse),MAX(clse)
07:32:20   5  ,MIN(ydate),MAX(ydate)
07:32:20   6  FROM svm6122
07:32:20   7  GROUP BY pair
07:32:20   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
gbp_usd       19118   1.535325	  1.62765 2010-11-05 07:35:00 2011-02-08 07:20:00

Elapsed: 00:00:00.04
07:32:20 SQL> 
07:32:20 SQL> -- Prepare for derivation of NTILE based params:
07:32:20 SQL> 
07:32:20 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.31
07:32:20 SQL> CREATE TABLE svm6142 COMPRESS AS
07:32:20   2  SELECT
07:32:20   3  pair
07:32:20   4  ,ydate
07:32:20   5  ,prdate
07:32:20   6  ,clse
07:32:20   7  ,g6
07:32:20   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
07:32:20   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
07:32:20  10  ,CASE WHEN trend IS NULL THEN 1
07:32:20  11  	    WHEN trend =0      THEN 1
07:32:20  12  	    ELSE trend END trend
07:32:20  13  ,cm4
07:32:20  14  ,cm6
07:32:20  15  ,cm8
07:32:20  16  ,cm10
07:32:20  17  ,cm12
07:32:20  18  ,cm14
07:32:20  19  ,cm16
07:32:20  20  ,cm18
07:32:20  21  --
07:32:20  22  ,ca4
07:32:20  23  ,ca6
07:32:20  24  ,ca8
07:32:20  25  ,ca10
07:32:20  26  ,ca12
07:32:20  27  ,ca14
07:32:20  28  ,ca16
07:32:20  29  ,ca18
07:32:20  30  --
07:32:20  31  ,cx4
07:32:20  32  ,cx6
07:32:20  33  ,cx8
07:32:20  34  ,cx10
07:32:20  35  ,cx12
07:32:20  36  ,cx14
07:32:20  37  ,cx16
07:32:20  38  ,cx18
07:32:20  39  --
07:32:20  40  ,crr4
07:32:20  41  ,crr6
07:32:20  42  ,crr8
07:32:20  43  ,crr10
07:32:20  44  ,crr12
07:32:20  45  ,crr14
07:32:20  46  ,crr16
07:32:20  47  ,crr18
07:32:20  48  --
07:32:20  49  ,hh
07:32:20  50  ,d
07:32:20  51  ,w
07:32:20  52  ,mpm
07:32:20  53  ,mph
07:32:20  54  FROM svm6122
07:32:20  55  ORDER BY ydate
07:32:20  56  /

Table created.

Elapsed: 00:00:00.37
07:32:21 SQL> 
07:32:21 SQL> -- rpt
07:32:21 SQL> 
07:32:21 SQL> SELECT
07:32:21   2  pair
07:32:21   3  ,trend
07:32:21   4  ,gatt
07:32:21   5  ,COUNT(pair)
07:32:21   6  ,AVG(g6)
07:32:21   7  FROM svm6142
07:32:21   8  GROUP BY pair,trend,gatt
07:32:21   9  ORDER BY pair,trend,gatt
07:32:21  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      5791 -.00245123
gbp_usd 	-1 up	      3568 .004325813
gbp_usd 	-1		12
gbp_usd 	 1 nup	      6095 -.00279176
gbp_usd 	 1 up	      3592 .004253794
gbp_usd 	 1		60

6 rows selected.

Elapsed: 00:00:00.04
07:32:21 SQL> 
07:32:21 SQL> 
07:32:21 SQL> -- Derive NTILE based params:
07:32:21 SQL> 
07:32:21 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.19
07:32:21 SQL> CREATE TABLE svm6162 COMPRESS AS
07:32:21   2  SELECT
07:32:21   3  pair
07:32:21   4  ,ydate
07:32:21   5  ,prdate
07:32:21   6  ,clse
07:32:21   7  ,g6
07:32:21   8  ,gatt
07:32:21   9  ,gattn
07:32:21  10  ,trend
07:32:21  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
07:32:21  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
07:32:21  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
07:32:21  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
07:32:21  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
07:32:21  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
07:32:21  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
07:32:21  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
07:32:21  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
07:32:21  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
07:32:21  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
07:32:21  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
07:32:21  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
07:32:21  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
07:32:21  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
07:32:21  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
07:32:21  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
07:32:21  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
07:32:21  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
07:32:21  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
07:32:21  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
07:32:21  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
07:32:21  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
07:32:21  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
07:32:21  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
07:32:21  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
07:32:21  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
07:32:21  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
07:32:21  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
07:32:21  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
07:32:21  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
07:32:21  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
07:32:21  43  ,hh  att32
07:32:21  44  ,d   att33
07:32:21  45  ,w   att34
07:32:21  46  ,mpm att35
07:32:21  47  ,mph att36
07:32:21  48  ,trend att37
07:32:21  49  FROM svm6142
07:32:21  50  ORDER BY ydate
07:32:21  51  /

Table created.

Elapsed: 00:00:04.79
07:32:26 SQL> 
07:32:26 SQL> -- rpt
07:32:26 SQL> 
07:32:26 SQL> SELECT
07:32:26   2  pair
07:32:26   3  ,trend
07:32:26   4  ,gatt
07:32:26   5  ,COUNT(pair)
07:32:26   6  ,AVG(g6)
07:32:26   7  FROM svm6162
07:32:26   8  GROUP BY pair,trend,gatt
07:32:26   9  ORDER BY pair,trend,gatt
07:32:26  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      5791 -.00245123
gbp_usd 	-1 up	      3568 .004325813
gbp_usd 	-1		12
gbp_usd 	 1 nup	      6095 -.00279176
gbp_usd 	 1 up	      3592 .004253794
gbp_usd 	 1		60

6 rows selected.

Elapsed: 00:00:00.03
07:32:26 SQL> 
07:32:26 SQL> -- I comment out sections related to score-feedback.
07:32:26 SQL> -- I tested score-feeback and it hurts results:
07:32:26 SQL> 
07:32:26 SQL> -- CREATE OR REPLACE VIEW sc12 AS
07:32:26 SQL> -- SELECT
07:32:26 SQL> -- m.pair
07:32:26 SQL> -- ,m.ydate
07:32:26 SQL> -- ,m.prdate
07:32:26 SQL> -- ,l.score score_long
07:32:26 SQL> -- ,s.score score_short
07:32:26 SQL> -- ,m.g6
07:32:26 SQL> -- FROM svm62scores l,svm62scores s,svm6162 m
07:32:26 SQL> -- WHERE l.targ='gatt'
07:32:26 SQL> -- AND	 s.targ='gattn'
07:32:26 SQL> -- AND l.prdate = s.prdate
07:32:26 SQL> -- AND l.prdate = m.prdate
07:32:26 SQL> -- -- Speed things up:
07:32:26 SQL> -- AND l.pair = '&1'
07:32:26 SQL> -- AND s.pair = '&1'
07:32:26 SQL> -- /
07:32:26 SQL> --
07:32:26 SQL> -- DROP TABLE score_corr;
07:32:26 SQL> --
07:32:26 SQL> -- CREATE TABLE score_corr COMPRESS AS
07:32:26 SQL> -- SELECT
07:32:26 SQL> -- pair
07:32:26 SQL> -- -- ,ydate
07:32:26 SQL> -- ,prdate
07:32:26 SQL> -- -- Find corr() tween score and g6 over 2 day period:
07:32:26 SQL> -- ,CORR((score_long - score_short),g6)
07:32:26 SQL> --   OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 2*24*60/5 PRECEDING AND CURRENT ROW)sc_corr
07:32:26 SQL> -- FROM sc12
07:32:26 SQL> -- /
07:32:26 SQL> 
07:32:26 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.24
07:32:26 SQL> 
07:32:26 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.29
07:32:26 SQL> 
07:32:26 SQL> CREATE TABLE modsrc COMPRESS AS
07:32:26   2  SELECT
07:32:26   3  pair
07:32:26   4  ,ydate
07:32:26   5  ,prdate
07:32:26   6  ,trend
07:32:26   7  ,g6
07:32:26   8  ,gatt
07:32:26   9  ,gattn
07:32:26  10  ,SUM(g6)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g00
07:32:26  11  ,SUM(g6)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g01
07:32:26  12  ,SUM(g6)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g02
07:32:26  13  ,SUM(g6)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g03
07:32:26  14  ,SUM(g6)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g04
07:32:26  15  ,SUM(g6)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g05
07:32:26  16  ,SUM(g6)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g06
07:32:26  17  ,SUM(g6)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g07
07:32:26  18  ,SUM(g6)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g08
07:32:26  19  ,SUM(g6)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g09
07:32:26  20  ,SUM(g6)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g10
07:32:26  21  ,SUM(g6)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g11
07:32:26  22  ,SUM(g6)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g12
07:32:26  23  ,SUM(g6)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g13
07:32:26  24  ,SUM(g6)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g14
07:32:26  25  ,SUM(g6)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g15
07:32:26  26  ,SUM(g6)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g16
07:32:26  27  ,SUM(g6)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g17
07:32:26  28  ,SUM(g6)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g18
07:32:26  29  ,SUM(g6)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g19
07:32:26  30  ,SUM(g6)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g20
07:32:26  31  ,SUM(g6)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g21
07:32:26  32  ,SUM(g6)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g22
07:32:26  33  ,SUM(g6)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g23
07:32:26  34  ,SUM(g6)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g24
07:32:26  35  ,SUM(g6)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g25
07:32:26  36  ,SUM(g6)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g26
07:32:26  37  ,SUM(g6)OVER(PARTITION BY trend,att27 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g27
07:32:26  38  ,SUM(g6)OVER(PARTITION BY trend,att28 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g28
07:32:26  39  ,SUM(g6)OVER(PARTITION BY trend,att29 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g29
07:32:26  40  ,SUM(g6)OVER(PARTITION BY trend,att30 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g30
07:32:26  41  ,SUM(g6)OVER(PARTITION BY trend,att31 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g31
07:32:26  42  ,SUM(g6)OVER(PARTITION BY trend,att32 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g32
07:32:26  43  ,SUM(g6)OVER(PARTITION BY trend,att33 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g33
07:32:26  44  ,SUM(g6)OVER(PARTITION BY trend,att34 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g34
07:32:26  45  ,SUM(g6)OVER(PARTITION BY trend,att35 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g35
07:32:26  46  ,SUM(g6)OVER(PARTITION BY trend,att36 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g36
07:32:26  47  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g37
07:32:26  48  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*40 PRECEDING AND CURRENT ROW)g38
07:32:26  49  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*30 PRECEDING AND CURRENT ROW)g39
07:32:26  50  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)g40
07:32:26  51  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)g41
07:32:26  52  FROM svm6162
07:32:26  53  /

Table created.

Elapsed: 00:00:05.78
07:32:32 SQL> 
07:32:32 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:03.51
07:32:36 SQL> 
07:32:36 SQL> -- rpt
07:32:36 SQL> 
07:32:36 SQL> SELECT
07:32:36   2  pair
07:32:36   3  ,trend
07:32:36   4  ,gatt
07:32:36   5  ,COUNT(pair)
07:32:36   6  ,AVG(g6)
07:32:36   7  FROM modsrc
07:32:36   8  GROUP BY pair,trend,gatt
07:32:36   9  ORDER BY pair,trend,gatt
07:32:36  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      5791 -.00245123
gbp_usd 	-1 up	      3568 .004325813
gbp_usd 	-1		12
gbp_usd 	 1 nup	      6095 -.00279176
gbp_usd 	 1 up	      3592 .004253794
gbp_usd 	 1		60

6 rows selected.

Elapsed: 00:00:00.02
07:32:36 SQL> 
07:32:36 SQL> 
07:32:36 SQL> SELECT pair,COUNT(pair)FROM svm6102 GROUP BY pair;

PAIR	COUNT(PAIR)
------- -----------
gbp_usd       19118

Elapsed: 00:00:00.78
07:32:36 SQL> 
07:32:36 SQL> SELECT pair,COUNT(pair)FROM modsrc GROUP BY pair;

PAIR	COUNT(PAIR)
------- -----------
gbp_usd       19118

Elapsed: 00:00:00.00
07:32:36 SQL> 
07:32:36 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
