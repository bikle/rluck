
SQL*Plus: Release 11.2.0.1.0 Production on Mon Feb 21 04:49:33 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

04:49:33 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
04:49:33 SQL> 04:49:33 SQL> --
04:49:33 SQL> -- pair10.sql
04:49:33 SQL> --
04:49:33 SQL> 
04:49:33 SQL> -- Creates views and tables needed by SVM.
04:49:33 SQL> 
04:49:33 SQL> 
04:49:33 SQL> CREATE OR REPLACE VIEW svm6102 AS
04:49:33   2  SELECT
04:49:33   3  pair
04:49:33   4  ,ydate
04:49:33   5  ,prdate
04:49:33   6  ,rownum rnum -- acts as t in my time-series
04:49:33   7  ,clse
04:49:33   8  -- Derive a bunch of attributes from clse, the latest price:
04:49:33   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
04:49:33  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
04:49:33  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
04:49:33  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
04:49:33  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
04:49:33  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
04:49:33  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
04:49:33  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
04:49:33  17  --
04:49:33  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
04:49:33  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
04:49:33  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
04:49:33  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
04:49:33  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
04:49:33  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
04:49:33  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
04:49:33  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
04:49:33  26  --
04:49:33  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
04:49:33  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
04:49:33  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
04:49:33  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
04:49:33  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
04:49:33  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
04:49:33  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
04:49:33  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
04:49:33  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
04:49:33  36  FROM di5min WHERE pair = '&1'
04:49:33  37  AND ydate > sysdate - 95
04:49:33  38  ORDER BY ydate
04:49:33  39  /
old  36: FROM di5min WHERE pair = '&1'
new  36: FROM di5min WHERE pair = 'eur_usd'

View created.

Elapsed: 00:00:00.04
04:49:33 SQL> 
04:49:33 SQL> -- rpt
04:49:33 SQL> 
04:49:33 SQL> SELECT
04:49:33   2  pair
04:49:33   3  ,COUNT(pair)
04:49:33   4  ,MIN(clse),MAX(clse)
04:49:33   5  ,MIN(avg6),MAX(avg6)
04:49:33   6  ,MIN(ydate),MAX(ydate)
04:49:33   7  FROM svm6102
04:49:33   8  GROUP BY pair
04:49:33   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_usd       19063    1.28795	    1.386 1.29022637 1.38452337 2010-11-18 04:50:00 2011-02-21 04:35:00

Elapsed: 00:00:00.81
04:49:34 SQL> 
04:49:34 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
04:49:34 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.26
04:49:34 SQL> CREATE TABLE svm6122 COMPRESS AS
04:49:34   2  SELECT
04:49:34   3  pair
04:49:34   4  ,ydate
04:49:34   5  ,prdate
04:49:34   6  ,clse
04:49:34   7  -- g6 is important. I want to predict g6:
04:49:34   8  ,ld6 - clse g6
04:49:34   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
04:49:34  10  -- I want more attributes from the ones I derived above:
04:49:34  11  -- clse relation to moving-min
04:49:34  12  ,clse-min4  cm4
04:49:34  13  ,clse-min6  cm6
04:49:34  14  ,clse-min8  cm8
04:49:34  15  ,clse-min10 cm10
04:49:34  16  ,clse-min12 cm12
04:49:34  17  ,clse-min14 cm14
04:49:34  18  ,clse-min16 cm16
04:49:34  19  ,clse-min18 cm18
04:49:34  20  -- clse relation to moving-avg
04:49:34  21  ,clse-avg4  ca4
04:49:34  22  ,clse-avg6  ca6
04:49:34  23  ,clse-avg8  ca8
04:49:34  24  ,clse-avg10 ca10
04:49:34  25  ,clse-avg12 ca12
04:49:34  26  ,clse-avg14 ca14
04:49:34  27  ,clse-avg16 ca16
04:49:34  28  ,clse-avg18 ca18
04:49:34  29  -- clse relation to moving-max
04:49:34  30  ,clse-max4  cx4
04:49:34  31  ,clse-max6  cx6
04:49:34  32  ,clse-max8  cx8
04:49:34  33  ,clse-max10 cx10
04:49:34  34  ,clse-max12 cx12
04:49:34  35  ,clse-max14 cx14
04:49:34  36  ,clse-max16 cx16
04:49:34  37  ,clse-max18 cx18
04:49:34  38  -- Derive more attributes.
04:49:34  39  -- I want to use CORR() here to help SVM see the shape of the series.
04:49:34  40  -- But COVAR_POP is more stable:
04:49:34  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
04:49:34  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
04:49:34  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
04:49:34  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
04:49:34  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
04:49:34  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
04:49:34  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
04:49:34  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
04:49:34  49  -- Derive date related attributes:
04:49:34  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
04:49:34  51  ,0+TO_CHAR(ydate,'D')d
04:49:34  52  ,0+TO_CHAR(ydate,'W')w
04:49:34  53  -- mpm stands for minutes-past-midnight:
04:49:34  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
04:49:34  55  -- mph stands for minutes-past-hour:
04:49:34  56  ,0+TO_CHAR(ydate,'MI')mph
04:49:34  57  FROM svm6102
04:49:34  58  ORDER BY ydate
04:49:34  59  /

Table created.

Elapsed: 00:00:02.34
04:49:36 SQL> 
04:49:36 SQL> -- rpt
04:49:36 SQL> 
04:49:36 SQL> SELECT
04:49:36   2  pair
04:49:36   3  ,COUNT(pair)
04:49:36   4  ,MIN(clse),MAX(clse)
04:49:36   5  ,MIN(ydate),MAX(ydate)
04:49:36   6  FROM svm6122
04:49:36   7  GROUP BY pair
04:49:36   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_usd       19063    1.28795	    1.386 2010-11-18 04:50:00 2011-02-21 04:35:00

Elapsed: 00:00:00.04
04:49:36 SQL> 
04:49:36 SQL> -- Prepare for derivation of NTILE based params:
04:49:36 SQL> 
04:49:36 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.54
04:49:37 SQL> CREATE TABLE svm6142 COMPRESS AS
04:49:37   2  SELECT
04:49:37   3  pair
04:49:37   4  ,ydate
04:49:37   5  ,prdate
04:49:37   6  ,clse
04:49:37   7  ,g6
04:49:37   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
04:49:37   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
04:49:37  10  ,CASE WHEN trend IS NULL THEN 1
04:49:37  11  	    WHEN trend =0      THEN 1
04:49:37  12  	    ELSE trend END trend
04:49:37  13  ,cm4
04:49:37  14  ,cm6
04:49:37  15  ,cm8
04:49:37  16  ,cm10
04:49:37  17  ,cm12
04:49:37  18  ,cm14
04:49:37  19  ,cm16
04:49:37  20  ,cm18
04:49:37  21  --
04:49:37  22  ,ca4
04:49:37  23  ,ca6
04:49:37  24  ,ca8
04:49:37  25  ,ca10
04:49:37  26  ,ca12
04:49:37  27  ,ca14
04:49:37  28  ,ca16
04:49:37  29  ,ca18
04:49:37  30  --
04:49:37  31  ,cx4
04:49:37  32  ,cx6
04:49:37  33  ,cx8
04:49:37  34  ,cx10
04:49:37  35  ,cx12
04:49:37  36  ,cx14
04:49:37  37  ,cx16
04:49:37  38  ,cx18
04:49:37  39  --
04:49:37  40  ,crr4
04:49:37  41  ,crr6
04:49:37  42  ,crr8
04:49:37  43  ,crr10
04:49:37  44  ,crr12
04:49:37  45  ,crr14
04:49:37  46  ,crr16
04:49:37  47  ,crr18
04:49:37  48  --
04:49:37  49  ,hh
04:49:37  50  ,d
04:49:37  51  ,w
04:49:37  52  ,mpm
04:49:37  53  ,mph
04:49:37  54  FROM svm6122
04:49:37  55  ORDER BY ydate
04:49:37  56  /

Table created.

Elapsed: 00:00:00.47
04:49:37 SQL> 
04:49:37 SQL> -- rpt
04:49:37 SQL> 
04:49:37 SQL> SELECT
04:49:37   2  pair
04:49:37   3  ,trend
04:49:37   4  ,gatt
04:49:37   5  ,COUNT(pair)
04:49:37   6  ,AVG(g6)
04:49:37   7  FROM svm6142
04:49:37   8  GROUP BY pair,trend,gatt
04:49:37   9  ORDER BY pair,trend,gatt
04:49:37  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      5504 -.00281208
eur_usd 	-1 up	      3660 .004179985
eur_usd 	-1		34
eur_usd 	 1 nup	      6148 -.00259064
eur_usd 	 1 up	      3679 .004543751
eur_usd 	 1		38

6 rows selected.

Elapsed: 00:00:00.05
04:49:38 SQL> 
04:49:38 SQL> 
04:49:38 SQL> -- Derive NTILE based params:
04:49:38 SQL> 
04:49:38 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.21
04:49:38 SQL> CREATE TABLE svm6162 COMPRESS AS
04:49:38   2  SELECT
04:49:38   3  pair
04:49:38   4  ,ydate
04:49:38   5  ,prdate
04:49:38   6  ,clse
04:49:38   7  ,g6
04:49:38   8  ,gatt
04:49:38   9  ,gattn
04:49:38  10  ,trend
04:49:38  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
04:49:38  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
04:49:38  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
04:49:38  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
04:49:38  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
04:49:38  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
04:49:38  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
04:49:38  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
04:49:38  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
04:49:38  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
04:49:38  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
04:49:38  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
04:49:38  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
04:49:38  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
04:49:38  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
04:49:38  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
04:49:38  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
04:49:38  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
04:49:38  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
04:49:38  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
04:49:38  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
04:49:38  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
04:49:38  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
04:49:38  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
04:49:38  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
04:49:38  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
04:49:38  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
04:49:38  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
04:49:38  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
04:49:38  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
04:49:38  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
04:49:38  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
04:49:38  43  ,hh  att32
04:49:38  44  ,d   att33
04:49:38  45  ,w   att34
04:49:38  46  ,mpm att35
04:49:38  47  ,mph att36
04:49:38  48  ,trend att37
04:49:38  49  FROM svm6142
04:49:38  50  ORDER BY ydate
04:49:38  51  /

Table created.

Elapsed: 00:00:05.00
04:49:43 SQL> 
04:49:43 SQL> -- rpt
04:49:43 SQL> 
04:49:43 SQL> SELECT
04:49:43   2  pair
04:49:43   3  ,trend
04:49:43   4  ,gatt
04:49:43   5  ,COUNT(pair)
04:49:43   6  ,AVG(g6)
04:49:43   7  FROM svm6162
04:49:43   8  GROUP BY pair,trend,gatt
04:49:43   9  ORDER BY pair,trend,gatt
04:49:43  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      5504 -.00281208
eur_usd 	-1 up	      3660 .004179985
eur_usd 	-1		34
eur_usd 	 1 nup	      6148 -.00259064
eur_usd 	 1 up	      3679 .004543751
eur_usd 	 1		38

6 rows selected.

Elapsed: 00:00:00.03
04:49:43 SQL> 
04:49:43 SQL> -- I comment out sections related to score-feedback.
04:49:43 SQL> -- I tested score-feeback and it hurts results:
04:49:43 SQL> 
04:49:43 SQL> -- CREATE OR REPLACE VIEW sc12 AS
04:49:43 SQL> -- SELECT
04:49:43 SQL> -- m.pair
04:49:43 SQL> -- ,m.ydate
04:49:43 SQL> -- ,m.prdate
04:49:43 SQL> -- ,l.score score_long
04:49:43 SQL> -- ,s.score score_short
04:49:43 SQL> -- ,m.g6
04:49:43 SQL> -- FROM svm62scores l,svm62scores s,svm6162 m
04:49:43 SQL> -- WHERE l.targ='gatt'
04:49:43 SQL> -- AND	 s.targ='gattn'
04:49:43 SQL> -- AND l.prdate = s.prdate
04:49:43 SQL> -- AND l.prdate = m.prdate
04:49:43 SQL> -- -- Speed things up:
04:49:43 SQL> -- AND l.pair = '&1'
04:49:43 SQL> -- AND s.pair = '&1'
04:49:43 SQL> -- /
04:49:43 SQL> --
04:49:43 SQL> -- DROP TABLE score_corr;
04:49:43 SQL> --
04:49:43 SQL> -- CREATE TABLE score_corr COMPRESS AS
04:49:43 SQL> -- SELECT
04:49:43 SQL> -- pair
04:49:43 SQL> -- -- ,ydate
04:49:43 SQL> -- ,prdate
04:49:43 SQL> -- -- Find corr() tween score and g6 over 2 day period:
04:49:43 SQL> -- ,CORR((score_long - score_short),g6)
04:49:43 SQL> --   OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 2*24*60/5 PRECEDING AND CURRENT ROW)sc_corr
04:49:43 SQL> -- FROM sc12
04:49:43 SQL> -- /
04:49:43 SQL> 
04:49:43 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.45
04:49:43 SQL> 
04:49:43 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.28
04:49:44 SQL> 
04:49:44 SQL> CREATE TABLE modsrc COMPRESS AS
04:49:44   2  SELECT
04:49:44   3  pair
04:49:44   4  ,ydate
04:49:44   5  ,prdate
04:49:44   6  ,trend
04:49:44   7  ,g6
04:49:44   8  ,gatt
04:49:44   9  ,gattn
04:49:44  10  ,SUM(g6)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g00
04:49:44  11  ,SUM(g6)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g01
04:49:44  12  ,SUM(g6)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g02
04:49:44  13  ,SUM(g6)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g03
04:49:44  14  ,SUM(g6)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g04
04:49:44  15  ,SUM(g6)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g05
04:49:44  16  ,SUM(g6)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g06
04:49:44  17  ,SUM(g6)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g07
04:49:44  18  ,SUM(g6)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g08
04:49:44  19  ,SUM(g6)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g09
04:49:44  20  ,SUM(g6)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g10
04:49:44  21  ,SUM(g6)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g11
04:49:44  22  ,SUM(g6)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g12
04:49:44  23  ,SUM(g6)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g13
04:49:44  24  ,SUM(g6)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g14
04:49:44  25  ,SUM(g6)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g15
04:49:44  26  ,SUM(g6)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g16
04:49:44  27  ,SUM(g6)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g17
04:49:44  28  ,SUM(g6)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g18
04:49:44  29  ,SUM(g6)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g19
04:49:44  30  ,SUM(g6)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g20
04:49:44  31  ,SUM(g6)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g21
04:49:44  32  ,SUM(g6)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g22
04:49:44  33  ,SUM(g6)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g23
04:49:44  34  ,SUM(g6)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g24
04:49:44  35  ,SUM(g6)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g25
04:49:44  36  ,SUM(g6)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g26
04:49:44  37  ,SUM(g6)OVER(PARTITION BY trend,att27 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g27
04:49:44  38  ,SUM(g6)OVER(PARTITION BY trend,att28 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g28
04:49:44  39  ,SUM(g6)OVER(PARTITION BY trend,att29 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g29
04:49:44  40  ,SUM(g6)OVER(PARTITION BY trend,att30 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g30
04:49:44  41  ,SUM(g6)OVER(PARTITION BY trend,att31 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g31
04:49:44  42  ,SUM(g6)OVER(PARTITION BY trend,att32 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g32
04:49:44  43  ,SUM(g6)OVER(PARTITION BY trend,att33 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g33
04:49:44  44  ,SUM(g6)OVER(PARTITION BY trend,att34 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g34
04:49:44  45  ,SUM(g6)OVER(PARTITION BY trend,att35 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g35
04:49:44  46  ,SUM(g6)OVER(PARTITION BY trend,att36 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g36
04:49:44  47  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g37
04:49:44  48  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*40 PRECEDING AND CURRENT ROW)g38
04:49:44  49  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*30 PRECEDING AND CURRENT ROW)g39
04:49:44  50  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)g40
04:49:44  51  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)g41
04:49:44  52  FROM svm6162
04:49:44  53  /

Table created.

Elapsed: 00:00:05.97
04:49:49 SQL> 
04:49:49 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:04.61
04:49:54 SQL> 
04:49:54 SQL> -- rpt
04:49:54 SQL> 
04:49:54 SQL> SELECT
04:49:54   2  pair
04:49:54   3  ,trend
04:49:54   4  ,gatt
04:49:54   5  ,COUNT(pair)
04:49:54   6  ,AVG(g6)
04:49:54   7  FROM modsrc
04:49:54   8  GROUP BY pair,trend,gatt
04:49:54   9  ORDER BY pair,trend,gatt
04:49:54  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      5504 -.00281208
eur_usd 	-1 up	      3660 .004179985
eur_usd 	-1		34
eur_usd 	 1 nup	      6148 -.00259064
eur_usd 	 1 up	      3679 .004543751
eur_usd 	 1		38

6 rows selected.

Elapsed: 00:00:00.03
04:49:54 SQL> 
04:49:54 SQL> 
04:49:54 SQL> SELECT pair,COUNT(pair)FROM svm6102 GROUP BY pair;

PAIR	COUNT(PAIR)
------- -----------
eur_usd       19063

Elapsed: 00:00:00.82
04:49:55 SQL> 
04:49:55 SQL> SELECT pair,COUNT(pair)FROM modsrc GROUP BY pair;

PAIR	COUNT(PAIR)
------- -----------
eur_usd       19063

Elapsed: 00:00:00.01
04:49:55 SQL> 
04:49:55 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
