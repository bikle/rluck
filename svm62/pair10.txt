
SQL*Plus: Release 11.2.0.1.0 Production on Thu Feb 24 11:33:24 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

11:33:24 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
11:33:24 SQL> 11:33:24 SQL> --
11:33:24 SQL> -- pair10.sql
11:33:24 SQL> --
11:33:24 SQL> 
11:33:24 SQL> -- Creates views and tables needed by SVM.
11:33:24 SQL> 
11:33:24 SQL> 
11:33:24 SQL> CREATE OR REPLACE VIEW svm6102 AS
11:33:24   2  SELECT
11:33:24   3  pair
11:33:24   4  ,ydate
11:33:24   5  ,prdate
11:33:24   6  ,rownum rnum -- acts as t in my time-series
11:33:24   7  ,clse
11:33:24   8  -- Derive a bunch of attributes from clse, the latest price:
11:33:24   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
11:33:24  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
11:33:24  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
11:33:24  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
11:33:24  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
11:33:24  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
11:33:24  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
11:33:24  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
11:33:24  17  --
11:33:24  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
11:33:24  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
11:33:24  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
11:33:24  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
11:33:24  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
11:33:24  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
11:33:24  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
11:33:24  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
11:33:24  26  --
11:33:24  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
11:33:24  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
11:33:24  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
11:33:24  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
11:33:24  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
11:33:24  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
11:33:24  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
11:33:24  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
11:33:24  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
11:33:24  36  FROM di5min WHERE pair = '&1'
11:33:24  37  AND ydate > sysdate - 95
11:33:24  38  ORDER BY ydate
11:33:24  39  /
old  36: FROM di5min WHERE pair = '&1'
new  36: FROM di5min WHERE pair = 'eur_jpy'

View created.

Elapsed: 00:00:00.07
11:33:24 SQL> 
11:33:24 SQL> -- rpt
11:33:24 SQL> 
11:33:24 SQL> SELECT
11:33:24   2  pair
11:33:24   3  ,COUNT(pair)
11:33:24   4  ,MIN(clse),MAX(clse)
11:33:24   5  ,MIN(avg6),MAX(avg6)
11:33:24   6  ,MIN(ydate),MAX(ydate)
11:33:24   7  FROM svm6102
11:33:24   8  GROUP BY pair
11:33:24   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_jpy       19509 106.906797 114.875523 107.120556   114.7435 2010-11-21 20:55:00 2011-02-24 11:15:00

Elapsed: 00:00:00.78
11:33:25 SQL> 
11:33:25 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
11:33:25 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.16
11:33:25 SQL> CREATE TABLE svm6122 COMPRESS AS
11:33:25   2  SELECT
11:33:25   3  pair
11:33:25   4  ,ydate
11:33:25   5  ,prdate
11:33:25   6  ,clse
11:33:25   7  -- g6 is important. I want to predict g6:
11:33:25   8  ,(ld6 - clse)/clse g6
11:33:25   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
11:33:25  10  -- I want more attributes from the ones I derived above:
11:33:25  11  -- clse relation to moving-min
11:33:25  12  ,clse-min4  cm4
11:33:25  13  ,clse-min6  cm6
11:33:25  14  ,clse-min8  cm8
11:33:25  15  ,clse-min10 cm10
11:33:25  16  ,clse-min12 cm12
11:33:25  17  ,clse-min14 cm14
11:33:25  18  ,clse-min16 cm16
11:33:25  19  ,clse-min18 cm18
11:33:25  20  -- clse relation to moving-avg
11:33:25  21  ,clse-avg4  ca4
11:33:25  22  ,clse-avg6  ca6
11:33:25  23  ,clse-avg8  ca8
11:33:25  24  ,clse-avg10 ca10
11:33:25  25  ,clse-avg12 ca12
11:33:25  26  ,clse-avg14 ca14
11:33:25  27  ,clse-avg16 ca16
11:33:25  28  ,clse-avg18 ca18
11:33:25  29  -- clse relation to moving-max
11:33:25  30  ,clse-max4  cx4
11:33:25  31  ,clse-max6  cx6
11:33:25  32  ,clse-max8  cx8
11:33:25  33  ,clse-max10 cx10
11:33:25  34  ,clse-max12 cx12
11:33:25  35  ,clse-max14 cx14
11:33:25  36  ,clse-max16 cx16
11:33:25  37  ,clse-max18 cx18
11:33:25  38  -- Derive more attributes.
11:33:25  39  -- I want to use CORR() here to help SVM see the shape of the series.
11:33:25  40  -- But COVAR_POP is more stable:
11:33:25  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
11:33:25  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
11:33:25  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
11:33:25  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
11:33:25  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
11:33:25  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
11:33:25  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
11:33:25  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
11:33:25  49  -- Derive date related attributes:
11:33:25  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
11:33:25  51  ,0+TO_CHAR(ydate,'D')d
11:33:25  52  ,0+TO_CHAR(ydate,'W')w
11:33:25  53  -- mpm stands for minutes-past-midnight:
11:33:25  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
11:33:25  55  -- mph stands for minutes-past-hour:
11:33:25  56  ,0+TO_CHAR(ydate,'MI')mph
11:33:25  57  FROM svm6102
11:33:25  58  WHERE clse > 0
11:33:25  59  ORDER BY ydate
11:33:25  60  /

Table created.

Elapsed: 00:00:02.30
11:33:27 SQL> 
11:33:27 SQL> -- rpt
11:33:27 SQL> 
11:33:27 SQL> SELECT
11:33:27   2  pair
11:33:27   3  ,COUNT(pair)
11:33:27   4  ,MIN(clse),MAX(clse)
11:33:27   5  ,MIN(ydate),MAX(ydate)
11:33:27   6  FROM svm6122
11:33:27   7  GROUP BY pair
11:33:27   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_jpy       19509 106.906797 114.875523 2010-11-21 20:55:00 2011-02-24 11:15:00

Elapsed: 00:00:00.04
11:33:27 SQL> 
11:33:27 SQL> -- Prepare for derivation of NTILE based params:
11:33:27 SQL> 
11:33:27 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.38
11:33:28 SQL> CREATE TABLE svm6142 COMPRESS AS
11:33:28   2  SELECT
11:33:28   3  pair
11:33:28   4  ,ydate
11:33:28   5  ,prdate
11:33:28   6  ,clse
11:33:28   7  ,g6
11:33:28   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
11:33:28   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
11:33:28  10  ,CASE WHEN trend IS NULL THEN 1
11:33:28  11  	    WHEN trend =0      THEN 1
11:33:28  12  	    ELSE trend END trend
11:33:28  13  ,cm4
11:33:28  14  ,cm6
11:33:28  15  ,cm8
11:33:28  16  ,cm10
11:33:28  17  ,cm12
11:33:28  18  ,cm14
11:33:28  19  ,cm16
11:33:28  20  ,cm18
11:33:28  21  --
11:33:28  22  ,ca4
11:33:28  23  ,ca6
11:33:28  24  ,ca8
11:33:28  25  ,ca10
11:33:28  26  ,ca12
11:33:28  27  ,ca14
11:33:28  28  ,ca16
11:33:28  29  ,ca18
11:33:28  30  --
11:33:28  31  ,cx4
11:33:28  32  ,cx6
11:33:28  33  ,cx8
11:33:28  34  ,cx10
11:33:28  35  ,cx12
11:33:28  36  ,cx14
11:33:28  37  ,cx16
11:33:28  38  ,cx18
11:33:28  39  --
11:33:28  40  ,crr4
11:33:28  41  ,crr6
11:33:28  42  ,crr8
11:33:28  43  ,crr10
11:33:28  44  ,crr12
11:33:28  45  ,crr14
11:33:28  46  ,crr16
11:33:28  47  ,crr18
11:33:28  48  --
11:33:28  49  ,hh
11:33:28  50  ,d
11:33:28  51  ,w
11:33:28  52  ,mpm
11:33:28  53  ,mph
11:33:28  54  FROM svm6122
11:33:28  55  ORDER BY ydate
11:33:28  56  /

Table created.

Elapsed: 00:00:00.41
11:33:28 SQL> 
11:33:28 SQL> -- rpt
11:33:28 SQL> 
11:33:28 SQL> SELECT
11:33:28   2  pair
11:33:28   3  ,trend
11:33:28   4  ,gatt
11:33:28   5  ,COUNT(pair)
11:33:28   6  ,AVG(g6)
11:33:28   7  FROM svm6142
11:33:28   8  GROUP BY pair,trend,gatt
11:33:28   9  ORDER BY pair,trend,gatt
11:33:28  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_jpy 	-1 nup	      6082 -.00190103
eur_jpy 	-1 up	      3224 .003281924
eur_jpy 	-1		72
eur_jpy 	 1 nup	      6937 -.00161435
eur_jpy 	 1 up	      3194 .003478871

Elapsed: 00:00:00.04
11:33:28 SQL> 
11:33:28 SQL> 
11:33:28 SQL> -- Derive NTILE based params:
11:33:28 SQL> 
11:33:28 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.16
11:33:28 SQL> CREATE TABLE svm6162 COMPRESS AS
11:33:28   2  SELECT
11:33:28   3  pair
11:33:28   4  ,ydate
11:33:28   5  ,prdate
11:33:28   6  ,clse
11:33:28   7  ,g6
11:33:28   8  ,gatt
11:33:28   9  ,gattn
11:33:28  10  ,trend
11:33:28  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
11:33:28  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
11:33:28  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
11:33:28  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
11:33:28  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
11:33:28  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
11:33:28  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
11:33:28  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
11:33:28  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
11:33:28  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
11:33:28  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
11:33:28  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
11:33:28  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
11:33:28  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
11:33:28  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
11:33:28  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
11:33:28  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
11:33:28  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
11:33:28  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
11:33:28  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
11:33:28  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
11:33:28  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
11:33:28  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
11:33:28  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
11:33:28  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
11:33:28  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
11:33:28  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
11:33:28  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
11:33:28  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
11:33:28  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
11:33:28  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
11:33:28  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
11:33:28  43  ,hh  att32
11:33:28  44  ,d   att33
11:33:28  45  ,w   att34
11:33:28  46  ,mpm att35
11:33:28  47  ,mph att36
11:33:28  48  ,trend att37
11:33:28  49  FROM svm6142
11:33:28  50  ORDER BY ydate
11:33:28  51  /

Table created.

Elapsed: 00:00:04.95
11:33:33 SQL> 
11:33:33 SQL> -- rpt
11:33:33 SQL> 
11:33:33 SQL> SELECT
11:33:33   2  pair
11:33:33   3  ,trend
11:33:33   4  ,gatt
11:33:33   5  ,COUNT(pair)
11:33:33   6  ,AVG(g6)
11:33:33   7  FROM svm6162
11:33:33   8  GROUP BY pair,trend,gatt
11:33:33   9  ORDER BY pair,trend,gatt
11:33:33  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_jpy 	-1 nup	      6082 -.00190103
eur_jpy 	-1 up	      3224 .003281924
eur_jpy 	-1		72
eur_jpy 	 1 nup	      6937 -.00161435
eur_jpy 	 1 up	      3194 .003478871

Elapsed: 00:00:00.04
11:33:33 SQL> 
11:33:33 SQL> -- I comment out sections related to score-feedback.
11:33:33 SQL> -- I tested score-feeback and it hurts results:
11:33:33 SQL> 
11:33:33 SQL> -- CREATE OR REPLACE VIEW sc12 AS
11:33:33 SQL> -- SELECT
11:33:33 SQL> -- m.pair
11:33:33 SQL> -- ,m.ydate
11:33:33 SQL> -- ,m.prdate
11:33:33 SQL> -- ,l.score score_long
11:33:33 SQL> -- ,s.score score_short
11:33:33 SQL> -- ,m.g6
11:33:33 SQL> -- FROM svm62scores l,svm62scores s,svm6162 m
11:33:33 SQL> -- WHERE l.targ='gatt'
11:33:33 SQL> -- AND	 s.targ='gattn'
11:33:33 SQL> -- AND l.prdate = s.prdate
11:33:33 SQL> -- AND l.prdate = m.prdate
11:33:33 SQL> -- -- Speed things up:
11:33:33 SQL> -- AND l.pair = '&1'
11:33:33 SQL> -- AND s.pair = '&1'
11:33:33 SQL> -- /
11:33:33 SQL> --
11:33:33 SQL> -- DROP TABLE score_corr;
11:33:33 SQL> --
11:33:33 SQL> -- CREATE TABLE score_corr COMPRESS AS
11:33:33 SQL> -- SELECT
11:33:33 SQL> -- pair
11:33:33 SQL> -- -- ,ydate
11:33:33 SQL> -- ,prdate
11:33:33 SQL> -- -- Find corr() tween score and g6 over 2 day period:
11:33:33 SQL> -- ,CORR((score_long - score_short),g6)
11:33:33 SQL> --   OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 2*24*60/5 PRECEDING AND CURRENT ROW)sc_corr
11:33:33 SQL> -- FROM sc12
11:33:33 SQL> -- /
11:33:33 SQL> 
11:33:33 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.33
11:33:34 SQL> 
11:33:34 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.30
11:33:34 SQL> 
11:33:34 SQL> CREATE TABLE modsrc COMPRESS AS
11:33:34   2  SELECT
11:33:34   3  pair
11:33:34   4  ,ydate
11:33:34   5  ,prdate
11:33:34   6  ,trend
11:33:34   7  ,g6
11:33:34   8  ,gatt
11:33:34   9  ,gattn
11:33:34  10  ,SUM(g6)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g00
11:33:34  11  ,SUM(g6)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g01
11:33:34  12  ,SUM(g6)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g02
11:33:34  13  ,SUM(g6)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g03
11:33:34  14  ,SUM(g6)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g04
11:33:34  15  ,SUM(g6)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g05
11:33:34  16  ,SUM(g6)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g06
11:33:34  17  ,SUM(g6)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g07
11:33:34  18  ,SUM(g6)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g08
11:33:34  19  ,SUM(g6)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g09
11:33:34  20  ,SUM(g6)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g10
11:33:34  21  ,SUM(g6)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g11
11:33:34  22  ,SUM(g6)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g12
11:33:34  23  ,SUM(g6)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g13
11:33:34  24  ,SUM(g6)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g14
11:33:34  25  ,SUM(g6)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g15
11:33:34  26  ,SUM(g6)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g16
11:33:34  27  ,SUM(g6)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g17
11:33:34  28  ,SUM(g6)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g18
11:33:34  29  ,SUM(g6)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g19
11:33:34  30  ,SUM(g6)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g20
11:33:34  31  ,SUM(g6)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g21
11:33:34  32  ,SUM(g6)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g22
11:33:34  33  ,SUM(g6)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g23
11:33:34  34  ,SUM(g6)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g24
11:33:34  35  ,SUM(g6)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g25
11:33:34  36  ,SUM(g6)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g26
11:33:34  37  ,SUM(g6)OVER(PARTITION BY trend,att27 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g27
11:33:34  38  ,SUM(g6)OVER(PARTITION BY trend,att28 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g28
11:33:34  39  ,SUM(g6)OVER(PARTITION BY trend,att29 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g29
11:33:34  40  ,SUM(g6)OVER(PARTITION BY trend,att30 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g30
11:33:34  41  ,SUM(g6)OVER(PARTITION BY trend,att31 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g31
11:33:34  42  ,SUM(g6)OVER(PARTITION BY trend,att32 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g32
11:33:34  43  ,SUM(g6)OVER(PARTITION BY trend,att33 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g33
11:33:34  44  ,SUM(g6)OVER(PARTITION BY trend,att34 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g34
11:33:34  45  ,SUM(g6)OVER(PARTITION BY trend,att35 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g35
11:33:34  46  ,SUM(g6)OVER(PARTITION BY trend,att36 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g36
11:33:34  47  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g37
11:33:34  48  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*40 PRECEDING AND CURRENT ROW)g38
11:33:34  49  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*30 PRECEDING AND CURRENT ROW)g39
11:33:34  50  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)g40
11:33:34  51  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)g41
11:33:34  52  FROM svm6162
11:33:34  53  /

Table created.

Elapsed: 00:00:06.69
11:33:41 SQL> 
11:33:41 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:02.98
11:33:44 SQL> 
11:33:44 SQL> -- rpt
11:33:44 SQL> 
11:33:44 SQL> SELECT
11:33:44   2  pair
11:33:44   3  ,trend
11:33:44   4  ,gatt
11:33:44   5  ,COUNT(pair)
11:33:44   6  ,AVG(g6)
11:33:44   7  FROM modsrc
11:33:44   8  GROUP BY pair,trend,gatt
11:33:44   9  ORDER BY pair,trend,gatt
11:33:44  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_jpy 	-1 nup	      6082 -.00190103
eur_jpy 	-1 up	      3224 .003281924
eur_jpy 	-1		72
eur_jpy 	 1 nup	      6937 -.00161435
eur_jpy 	 1 up	      3194 .003478871

Elapsed: 00:00:00.02
11:33:44 SQL> 
11:33:44 SQL> 
11:33:44 SQL> SELECT pair,COUNT(pair)FROM svm6102 GROUP BY pair;

PAIR	COUNT(PAIR)
------- -----------
eur_jpy       19509

Elapsed: 00:00:00.79
11:33:44 SQL> 
11:33:44 SQL> SELECT pair,COUNT(pair)FROM modsrc GROUP BY pair;

PAIR	COUNT(PAIR)
------- -----------
eur_jpy       19509

Elapsed: 00:00:00.01
11:33:44 SQL> 
11:33:44 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
