
SQL*Plus: Release 11.2.0.1.0 Production on Thu Feb 10 12:47:45 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

12:47:45 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
12:47:45 SQL> 12:47:45 SQL> --
12:47:45 SQL> -- pair10.sql
12:47:45 SQL> --
12:47:45 SQL> 
12:47:45 SQL> -- Creates views and tables needed by SVM.
12:47:45 SQL> 
12:47:45 SQL> 
12:47:45 SQL> CREATE OR REPLACE VIEW svm6102 AS
12:47:45   2  SELECT
12:47:45   3  pair
12:47:45   4  ,ydate
12:47:45   5  ,prdate
12:47:45   6  ,rownum rnum -- acts as t in my time-series
12:47:45   7  ,clse
12:47:45   8  -- Derive a bunch of attributes from clse, the latest price:
12:47:45   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
12:47:45  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
12:47:45  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
12:47:45  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
12:47:45  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
12:47:45  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
12:47:45  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
12:47:45  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
12:47:45  17  --
12:47:45  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
12:47:45  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
12:47:45  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
12:47:45  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
12:47:45  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
12:47:45  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
12:47:45  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
12:47:45  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
12:47:45  26  --
12:47:45  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
12:47:45  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
12:47:45  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
12:47:45  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
12:47:45  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
12:47:45  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
12:47:45  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
12:47:45  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
12:47:45  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
12:47:45  36  FROM di5min WHERE pair = '&1'
12:47:45  37  AND ydate > sysdate - 95
12:47:45  38  ORDER BY ydate
12:47:45  39  /
old  36: FROM di5min WHERE pair = '&1'
new  36: FROM di5min WHERE pair = 'eur_chf'

View created.

Elapsed: 00:00:00.07
12:47:45 SQL> 
12:47:45 SQL> -- rpt
12:47:45 SQL> 
12:47:45 SQL> SELECT
12:47:45   2  pair
12:47:45   3  ,COUNT(pair)
12:47:45   4  ,MIN(clse),MAX(clse)
12:47:45   5  ,MIN(avg6),MAX(avg6)
12:47:45   6  ,MIN(ydate),MAX(ydate)
12:47:45   7  FROM svm6102
12:47:45   8  GROUP BY pair
12:47:45   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_chf       19576 1.24192946 1.36639531 1.24320592 1.36388113 2010-11-07 20:55:00 2011-02-10 12:35:00

Elapsed: 00:00:00.79
12:47:46 SQL> 
12:47:46 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
12:47:46 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.07
12:47:46 SQL> CREATE TABLE svm6122 COMPRESS AS
12:47:46   2  SELECT
12:47:46   3  pair
12:47:46   4  ,ydate
12:47:46   5  ,prdate
12:47:46   6  ,clse
12:47:46   7  -- g6 is important. I want to predict g6:
12:47:46   8  ,ld6 - clse g6
12:47:46   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
12:47:46  10  -- I want more attributes from the ones I derived above:
12:47:46  11  -- clse relation to moving-min
12:47:46  12  ,clse-min4  cm4
12:47:46  13  ,clse-min6  cm6
12:47:46  14  ,clse-min8  cm8
12:47:46  15  ,clse-min10 cm10
12:47:46  16  ,clse-min12 cm12
12:47:46  17  ,clse-min14 cm14
12:47:46  18  ,clse-min16 cm16
12:47:46  19  ,clse-min18 cm18
12:47:46  20  -- clse relation to moving-avg
12:47:46  21  ,clse-avg4  ca4
12:47:46  22  ,clse-avg6  ca6
12:47:46  23  ,clse-avg8  ca8
12:47:46  24  ,clse-avg10 ca10
12:47:46  25  ,clse-avg12 ca12
12:47:46  26  ,clse-avg14 ca14
12:47:46  27  ,clse-avg16 ca16
12:47:46  28  ,clse-avg18 ca18
12:47:46  29  -- clse relation to moving-max
12:47:46  30  ,clse-max4  cx4
12:47:46  31  ,clse-max6  cx6
12:47:46  32  ,clse-max8  cx8
12:47:46  33  ,clse-max10 cx10
12:47:46  34  ,clse-max12 cx12
12:47:46  35  ,clse-max14 cx14
12:47:46  36  ,clse-max16 cx16
12:47:46  37  ,clse-max18 cx18
12:47:46  38  -- Derive more attributes.
12:47:46  39  -- I want to use CORR() here to help SVM see the shape of the series.
12:47:46  40  -- But COVAR_POP is more stable:
12:47:46  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
12:47:46  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
12:47:46  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
12:47:46  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
12:47:46  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
12:47:46  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
12:47:46  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
12:47:46  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
12:47:46  49  -- Derive date related attributes:
12:47:46  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
12:47:46  51  ,0+TO_CHAR(ydate,'D')d
12:47:46  52  ,0+TO_CHAR(ydate,'W')w
12:47:46  53  -- mpm stands for minutes-past-midnight:
12:47:46  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
12:47:46  55  -- mph stands for minutes-past-hour:
12:47:46  56  ,0+TO_CHAR(ydate,'MI')mph
12:47:46  57  FROM svm6102
12:47:46  58  ORDER BY ydate
12:47:46  59  /

Table created.

Elapsed: 00:00:02.27
12:47:48 SQL> 
12:47:48 SQL> -- rpt
12:47:48 SQL> 
12:47:48 SQL> SELECT
12:47:48   2  pair
12:47:48   3  ,COUNT(pair)
12:47:48   4  ,MIN(clse),MAX(clse)
12:47:48   5  ,MIN(ydate),MAX(ydate)
12:47:48   6  FROM svm6122
12:47:48   7  GROUP BY pair
12:47:48   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_chf       19576 1.24192946 1.36639531 2010-11-07 20:55:00 2011-02-10 12:35:00

Elapsed: 00:00:00.07
12:47:48 SQL> 
12:47:48 SQL> -- Prepare for derivation of NTILE based params:
12:47:48 SQL> 
12:47:48 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.93
12:47:49 SQL> CREATE TABLE svm6142 COMPRESS AS
12:47:49   2  SELECT
12:47:49   3  pair
12:47:49   4  ,ydate
12:47:49   5  ,prdate
12:47:49   6  ,clse
12:47:49   7  ,g6
12:47:49   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
12:47:49   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
12:47:49  10  ,CASE WHEN trend IS NULL THEN 1
12:47:49  11  	    WHEN trend =0      THEN 1
12:47:49  12  	    ELSE trend END trend
12:47:49  13  ,cm4
12:47:49  14  ,cm6
12:47:49  15  ,cm8
12:47:49  16  ,cm10
12:47:49  17  ,cm12
12:47:49  18  ,cm14
12:47:49  19  ,cm16
12:47:49  20  ,cm18
12:47:49  21  --
12:47:49  22  ,ca4
12:47:49  23  ,ca6
12:47:49  24  ,ca8
12:47:49  25  ,ca10
12:47:49  26  ,ca12
12:47:49  27  ,ca14
12:47:49  28  ,ca16
12:47:49  29  ,ca18
12:47:49  30  --
12:47:49  31  ,cx4
12:47:49  32  ,cx6
12:47:49  33  ,cx8
12:47:49  34  ,cx10
12:47:49  35  ,cx12
12:47:49  36  ,cx14
12:47:49  37  ,cx16
12:47:49  38  ,cx18
12:47:49  39  --
12:47:49  40  ,crr4
12:47:49  41  ,crr6
12:47:49  42  ,crr8
12:47:49  43  ,crr10
12:47:49  44  ,crr12
12:47:49  45  ,crr14
12:47:49  46  ,crr16
12:47:49  47  ,crr18
12:47:49  48  --
12:47:49  49  ,hh
12:47:49  50  ,d
12:47:49  51  ,w
12:47:49  52  ,mpm
12:47:49  53  ,mph
12:47:49  54  FROM svm6122
12:47:49  55  ORDER BY ydate
12:47:49  56  /

Table created.

Elapsed: 00:00:00.44
12:47:50 SQL> 
12:47:50 SQL> -- rpt
12:47:50 SQL> 
12:47:50 SQL> SELECT
12:47:50   2  pair
12:47:50   3  ,trend
12:47:50   4  ,gatt
12:47:50   5  ,COUNT(pair)
12:47:50   6  ,AVG(g6)
12:47:50   7  FROM svm6142
12:47:50   8  GROUP BY pair,trend,gatt
12:47:50   9  ORDER BY pair,trend,gatt
12:47:50  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_chf 	-1 nup	      6569 -.00223882
eur_chf 	-1 up	      3326 .003768555
eur_chf 	-1		69
eur_chf 	 1 nup	      6479  -.0021977
eur_chf 	 1 up	      3130 .004385269
eur_chf 	 1		 3

6 rows selected.

Elapsed: 00:00:00.05
12:47:50 SQL> 
12:47:50 SQL> 
12:47:50 SQL> -- Derive NTILE based params:
12:47:50 SQL> 
12:47:50 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.65
12:47:50 SQL> CREATE TABLE svm6162 COMPRESS AS
12:47:50   2  SELECT
12:47:50   3  pair
12:47:50   4  ,ydate
12:47:50   5  ,prdate
12:47:50   6  ,clse
12:47:50   7  ,g6
12:47:50   8  ,gatt
12:47:50   9  ,gattn
12:47:50  10  ,trend
12:47:50  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
12:47:50  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
12:47:50  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
12:47:50  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
12:47:50  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
12:47:50  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
12:47:50  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
12:47:50  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
12:47:50  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
12:47:50  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
12:47:50  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
12:47:50  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
12:47:50  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
12:47:50  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
12:47:50  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
12:47:50  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
12:47:50  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
12:47:50  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
12:47:50  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
12:47:50  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
12:47:50  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
12:47:50  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
12:47:50  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
12:47:50  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
12:47:50  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
12:47:50  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
12:47:50  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
12:47:50  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
12:47:50  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
12:47:50  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
12:47:50  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
12:47:50  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
12:47:50  43  ,hh  att32
12:47:50  44  ,d   att33
12:47:50  45  ,w   att34
12:47:50  46  ,mpm att35
12:47:50  47  ,mph att36
12:47:50  48  ,trend att37
12:47:50  49  FROM svm6142
12:47:50  50  ORDER BY ydate
12:47:50  51  /

Table created.

Elapsed: 00:00:05.06
12:47:56 SQL> 
12:47:56 SQL> -- rpt
12:47:56 SQL> 
12:47:56 SQL> SELECT
12:47:56   2  pair
12:47:56   3  ,trend
12:47:56   4  ,gatt
12:47:56   5  ,COUNT(pair)
12:47:56   6  ,AVG(g6)
12:47:56   7  FROM svm6162
12:47:56   8  GROUP BY pair,trend,gatt
12:47:56   9  ORDER BY pair,trend,gatt
12:47:56  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_chf 	-1 nup	      6569 -.00223882
eur_chf 	-1 up	      3326 .003768555
eur_chf 	-1		69
eur_chf 	 1 nup	      6479  -.0021977
eur_chf 	 1 up	      3130 .004385269
eur_chf 	 1		 3

6 rows selected.

Elapsed: 00:00:00.03
12:47:56 SQL> 
12:47:56 SQL> -- I comment out sections related to score-feedback.
12:47:56 SQL> -- I tested score-feeback and it hurts results:
12:47:56 SQL> 
12:47:56 SQL> -- CREATE OR REPLACE VIEW sc12 AS
12:47:56 SQL> -- SELECT
12:47:56 SQL> -- m.pair
12:47:56 SQL> -- ,m.ydate
12:47:56 SQL> -- ,m.prdate
12:47:56 SQL> -- ,l.score score_long
12:47:56 SQL> -- ,s.score score_short
12:47:56 SQL> -- ,m.g6
12:47:56 SQL> -- FROM svm62scores l,svm62scores s,svm6162 m
12:47:56 SQL> -- WHERE l.targ='gatt'
12:47:56 SQL> -- AND	 s.targ='gattn'
12:47:56 SQL> -- AND l.prdate = s.prdate
12:47:56 SQL> -- AND l.prdate = m.prdate
12:47:56 SQL> -- -- Speed things up:
12:47:56 SQL> -- AND l.pair = '&1'
12:47:56 SQL> -- AND s.pair = '&1'
12:47:56 SQL> -- /
12:47:56 SQL> --
12:47:56 SQL> -- DROP TABLE score_corr;
12:47:56 SQL> --
12:47:56 SQL> -- CREATE TABLE score_corr COMPRESS AS
12:47:56 SQL> -- SELECT
12:47:56 SQL> -- pair
12:47:56 SQL> -- -- ,ydate
12:47:56 SQL> -- ,prdate
12:47:56 SQL> -- -- Find corr() tween score and g6 over 2 day period:
12:47:56 SQL> -- ,CORR((score_long - score_short),g6)
12:47:56 SQL> --   OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 2*24*60/5 PRECEDING AND CURRENT ROW)sc_corr
12:47:56 SQL> -- FROM sc12
12:47:56 SQL> -- /
12:47:56 SQL> 
12:47:56 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.06
12:47:56 SQL> 
12:47:56 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.30
12:47:56 SQL> 
12:47:56 SQL> CREATE TABLE modsrc COMPRESS AS
12:47:56   2  SELECT
12:47:56   3  pair
12:47:56   4  ,ydate
12:47:56   5  ,prdate
12:47:56   6  ,trend
12:47:56   7  ,g6
12:47:56   8  ,gatt
12:47:56   9  ,gattn
12:47:56  10  ,SUM(g6)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g00
12:47:56  11  ,SUM(g6)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g01
12:47:56  12  ,SUM(g6)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g02
12:47:56  13  ,SUM(g6)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g03
12:47:56  14  ,SUM(g6)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g04
12:47:56  15  ,SUM(g6)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g05
12:47:56  16  ,SUM(g6)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g06
12:47:56  17  ,SUM(g6)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g07
12:47:56  18  ,SUM(g6)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g08
12:47:56  19  ,SUM(g6)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g09
12:47:56  20  ,SUM(g6)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g10
12:47:56  21  ,SUM(g6)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g11
12:47:56  22  ,SUM(g6)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g12
12:47:56  23  ,SUM(g6)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g13
12:47:56  24  ,SUM(g6)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g14
12:47:56  25  ,SUM(g6)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g15
12:47:56  26  ,SUM(g6)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g16
12:47:56  27  ,SUM(g6)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g17
12:47:56  28  ,SUM(g6)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g18
12:47:56  29  ,SUM(g6)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g19
12:47:56  30  ,SUM(g6)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g20
12:47:56  31  ,SUM(g6)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g21
12:47:56  32  ,SUM(g6)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g22
12:47:56  33  ,SUM(g6)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g23
12:47:56  34  ,SUM(g6)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g24
12:47:56  35  ,SUM(g6)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g25
12:47:56  36  ,SUM(g6)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g26
12:47:56  37  ,SUM(g6)OVER(PARTITION BY trend,att27 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g27
12:47:56  38  ,SUM(g6)OVER(PARTITION BY trend,att28 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g28
12:47:56  39  ,SUM(g6)OVER(PARTITION BY trend,att29 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g29
12:47:56  40  ,SUM(g6)OVER(PARTITION BY trend,att30 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g30
12:47:56  41  ,SUM(g6)OVER(PARTITION BY trend,att31 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g31
12:47:56  42  ,SUM(g6)OVER(PARTITION BY trend,att32 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g32
12:47:56  43  ,SUM(g6)OVER(PARTITION BY trend,att33 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g33
12:47:56  44  ,SUM(g6)OVER(PARTITION BY trend,att34 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g34
12:47:56  45  ,SUM(g6)OVER(PARTITION BY trend,att35 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g35
12:47:56  46  ,SUM(g6)OVER(PARTITION BY trend,att36 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g36
12:47:56  47  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g37
12:47:56  48  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*40 PRECEDING AND CURRENT ROW)g38
12:47:56  49  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*30 PRECEDING AND CURRENT ROW)g39
12:47:56  50  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)g40
12:47:56  51  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)g41
12:47:56  52  FROM svm6162
12:47:56  53  /

Table created.

Elapsed: 00:00:06.15
12:48:02 SQL> 
12:48:02 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:02.57
12:48:05 SQL> 
12:48:05 SQL> -- rpt
12:48:05 SQL> 
12:48:05 SQL> SELECT
12:48:05   2  pair
12:48:05   3  ,trend
12:48:05   4  ,gatt
12:48:05   5  ,COUNT(pair)
12:48:05   6  ,AVG(g6)
12:48:05   7  FROM modsrc
12:48:05   8  GROUP BY pair,trend,gatt
12:48:05   9  ORDER BY pair,trend,gatt
12:48:05  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_chf 	-1 nup	      6569 -.00223882
eur_chf 	-1 up	      3326 .003768555
eur_chf 	-1		69
eur_chf 	 1 nup	      6479  -.0021977
eur_chf 	 1 up	      3130 .004385269
eur_chf 	 1		 3

6 rows selected.

Elapsed: 00:00:00.03
12:48:05 SQL> 
12:48:05 SQL> 
12:48:05 SQL> SELECT pair,COUNT(pair)FROM svm6102 GROUP BY pair;

PAIR	COUNT(PAIR)
------- -----------
eur_chf       19576

Elapsed: 00:00:00.78
12:48:05 SQL> 
12:48:05 SQL> SELECT pair,COUNT(pair)FROM modsrc GROUP BY pair;

PAIR	COUNT(PAIR)
------- -----------
eur_chf       19576

Elapsed: 00:00:00.01
12:48:05 SQL> 
12:48:05 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
