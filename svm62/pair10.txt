
SQL*Plus: Release 11.2.0.1.0 Production on Tue Feb 22 23:31:13 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

23:31:13 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
23:31:13 SQL> 23:31:13 SQL> --
23:31:13 SQL> -- pair10.sql
23:31:13 SQL> --
23:31:13 SQL> 
23:31:13 SQL> -- Creates views and tables needed by SVM.
23:31:13 SQL> 
23:31:13 SQL> 
23:31:13 SQL> CREATE OR REPLACE VIEW svm6102 AS
23:31:13   2  SELECT
23:31:13   3  pair
23:31:13   4  ,ydate
23:31:13   5  ,prdate
23:31:13   6  ,rownum rnum -- acts as t in my time-series
23:31:13   7  ,clse
23:31:13   8  -- Derive a bunch of attributes from clse, the latest price:
23:31:13   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
23:31:13  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
23:31:13  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
23:31:13  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
23:31:13  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
23:31:13  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
23:31:13  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
23:31:13  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
23:31:13  17  --
23:31:13  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
23:31:13  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
23:31:13  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
23:31:13  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
23:31:13  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
23:31:13  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
23:31:13  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
23:31:13  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
23:31:13  26  --
23:31:13  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
23:31:13  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
23:31:13  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
23:31:13  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
23:31:13  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
23:31:13  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
23:31:13  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
23:31:13  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
23:31:13  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
23:31:13  36  FROM di5min WHERE pair = '&1'
23:31:13  37  AND ydate > sysdate - 95
23:31:13  38  ORDER BY ydate
23:31:13  39  /
old  36: FROM di5min WHERE pair = '&1'
new  36: FROM di5min WHERE pair = 'eur_chf'

View created.

Elapsed: 00:00:00.05
23:31:13 SQL> 
23:31:13 SQL> -- rpt
23:31:13 SQL> 
23:31:13 SQL> SELECT
23:31:13   2  pair
23:31:13   3  ,COUNT(pair)
23:31:13   4  ,MIN(clse),MAX(clse)
23:31:13   5  ,MIN(avg6),MAX(avg6)
23:31:13   6  ,MIN(ydate),MAX(ydate)
23:31:13   7  FROM svm6102
23:31:13   8  GROUP BY pair
23:31:13   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_chf       19085 1.24192946 1.36517976 1.24320592 1.36388113 2010-11-21 20:55:00 2011-02-22 23:15:00

Elapsed: 00:00:00.79
23:31:14 SQL> 
23:31:14 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
23:31:14 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.31
23:31:14 SQL> CREATE TABLE svm6122 COMPRESS AS
23:31:14   2  SELECT
23:31:14   3  pair
23:31:14   4  ,ydate
23:31:14   5  ,prdate
23:31:14   6  ,clse
23:31:14   7  -- g6 is important. I want to predict g6:
23:31:14   8  ,(ld6 - clse)/clse g6
23:31:14   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
23:31:14  10  -- I want more attributes from the ones I derived above:
23:31:14  11  -- clse relation to moving-min
23:31:14  12  ,clse-min4  cm4
23:31:14  13  ,clse-min6  cm6
23:31:14  14  ,clse-min8  cm8
23:31:14  15  ,clse-min10 cm10
23:31:14  16  ,clse-min12 cm12
23:31:14  17  ,clse-min14 cm14
23:31:14  18  ,clse-min16 cm16
23:31:14  19  ,clse-min18 cm18
23:31:14  20  -- clse relation to moving-avg
23:31:14  21  ,clse-avg4  ca4
23:31:14  22  ,clse-avg6  ca6
23:31:14  23  ,clse-avg8  ca8
23:31:14  24  ,clse-avg10 ca10
23:31:14  25  ,clse-avg12 ca12
23:31:14  26  ,clse-avg14 ca14
23:31:14  27  ,clse-avg16 ca16
23:31:14  28  ,clse-avg18 ca18
23:31:14  29  -- clse relation to moving-max
23:31:14  30  ,clse-max4  cx4
23:31:14  31  ,clse-max6  cx6
23:31:14  32  ,clse-max8  cx8
23:31:14  33  ,clse-max10 cx10
23:31:14  34  ,clse-max12 cx12
23:31:14  35  ,clse-max14 cx14
23:31:14  36  ,clse-max16 cx16
23:31:14  37  ,clse-max18 cx18
23:31:14  38  -- Derive more attributes.
23:31:14  39  -- I want to use CORR() here to help SVM see the shape of the series.
23:31:14  40  -- But COVAR_POP is more stable:
23:31:14  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
23:31:14  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
23:31:14  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
23:31:14  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
23:31:14  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
23:31:14  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
23:31:14  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
23:31:14  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
23:31:14  49  -- Derive date related attributes:
23:31:14  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
23:31:14  51  ,0+TO_CHAR(ydate,'D')d
23:31:14  52  ,0+TO_CHAR(ydate,'W')w
23:31:14  53  -- mpm stands for minutes-past-midnight:
23:31:14  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
23:31:14  55  -- mph stands for minutes-past-hour:
23:31:14  56  ,0+TO_CHAR(ydate,'MI')mph
23:31:14  57  FROM svm6102
23:31:14  58  WHERE clse > 0
23:31:14  59  ORDER BY ydate
23:31:14  60  /

Table created.

Elapsed: 00:00:02.18
23:31:16 SQL> 
23:31:16 SQL> -- rpt
23:31:16 SQL> 
23:31:16 SQL> SELECT
23:31:16   2  pair
23:31:16   3  ,COUNT(pair)
23:31:16   4  ,MIN(clse),MAX(clse)
23:31:16   5  ,MIN(ydate),MAX(ydate)
23:31:16   6  FROM svm6122
23:31:16   7  GROUP BY pair
23:31:16   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_chf       19085 1.24192946 1.36517976 2010-11-21 20:55:00 2011-02-22 23:15:00

Elapsed: 00:00:00.05
23:31:16 SQL> 
23:31:16 SQL> -- Prepare for derivation of NTILE based params:
23:31:16 SQL> 
23:31:16 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.23
23:31:16 SQL> CREATE TABLE svm6142 COMPRESS AS
23:31:16   2  SELECT
23:31:16   3  pair
23:31:16   4  ,ydate
23:31:16   5  ,prdate
23:31:16   6  ,clse
23:31:16   7  ,g6
23:31:16   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
23:31:16   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
23:31:16  10  ,CASE WHEN trend IS NULL THEN 1
23:31:16  11  	    WHEN trend =0      THEN 1
23:31:16  12  	    ELSE trend END trend
23:31:16  13  ,cm4
23:31:16  14  ,cm6
23:31:16  15  ,cm8
23:31:16  16  ,cm10
23:31:16  17  ,cm12
23:31:16  18  ,cm14
23:31:16  19  ,cm16
23:31:16  20  ,cm18
23:31:16  21  --
23:31:16  22  ,ca4
23:31:16  23  ,ca6
23:31:16  24  ,ca8
23:31:16  25  ,ca10
23:31:16  26  ,ca12
23:31:16  27  ,ca14
23:31:16  28  ,ca16
23:31:16  29  ,ca18
23:31:16  30  --
23:31:16  31  ,cx4
23:31:16  32  ,cx6
23:31:16  33  ,cx8
23:31:16  34  ,cx10
23:31:16  35  ,cx12
23:31:16  36  ,cx14
23:31:16  37  ,cx16
23:31:16  38  ,cx18
23:31:16  39  --
23:31:16  40  ,crr4
23:31:16  41  ,crr6
23:31:16  42  ,crr8
23:31:16  43  ,crr10
23:31:16  44  ,crr12
23:31:16  45  ,crr14
23:31:16  46  ,crr16
23:31:16  47  ,crr18
23:31:16  48  --
23:31:16  49  ,hh
23:31:16  50  ,d
23:31:16  51  ,w
23:31:16  52  ,mpm
23:31:16  53  ,mph
23:31:16  54  FROM svm6122
23:31:16  55  ORDER BY ydate
23:31:16  56  /

Table created.

Elapsed: 00:00:00.38
23:31:17 SQL> 
23:31:17 SQL> -- rpt
23:31:17 SQL> 
23:31:17 SQL> SELECT
23:31:17   2  pair
23:31:17   3  ,trend
23:31:17   4  ,gatt
23:31:17   5  ,COUNT(pair)
23:31:17   6  ,AVG(g6)
23:31:17   7  FROM svm6142
23:31:17   8  GROUP BY pair,trend,gatt
23:31:17   9  ORDER BY pair,trend,gatt
23:31:17  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_chf 	-1 nup	      7109 -.00156692
eur_chf 	-1 up	      2742  .00316791
eur_chf 	-1		72
eur_chf 	 1 nup	      6687 -.00163073
eur_chf 	 1 up	      2475  .00366365

Elapsed: 00:00:00.04
23:31:17 SQL> 
23:31:17 SQL> 
23:31:17 SQL> -- Derive NTILE based params:
23:31:17 SQL> 
23:31:17 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.18
23:31:17 SQL> CREATE TABLE svm6162 COMPRESS AS
23:31:17   2  SELECT
23:31:17   3  pair
23:31:17   4  ,ydate
23:31:17   5  ,prdate
23:31:17   6  ,clse
23:31:17   7  ,g6
23:31:17   8  ,gatt
23:31:17   9  ,gattn
23:31:17  10  ,trend
23:31:17  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
23:31:17  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
23:31:17  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
23:31:17  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
23:31:17  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
23:31:17  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
23:31:17  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
23:31:17  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
23:31:17  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
23:31:17  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
23:31:17  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
23:31:17  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
23:31:17  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
23:31:17  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
23:31:17  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
23:31:17  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
23:31:17  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
23:31:17  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
23:31:17  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
23:31:17  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
23:31:17  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
23:31:17  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
23:31:17  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
23:31:17  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
23:31:17  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
23:31:17  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
23:31:17  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
23:31:17  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
23:31:17  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
23:31:17  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
23:31:17  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
23:31:17  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
23:31:17  43  ,hh  att32
23:31:17  44  ,d   att33
23:31:17  45  ,w   att34
23:31:17  46  ,mpm att35
23:31:17  47  ,mph att36
23:31:17  48  ,trend att37
23:31:17  49  FROM svm6142
23:31:17  50  ORDER BY ydate
23:31:17  51  /

Table created.

Elapsed: 00:00:05.00
23:31:22 SQL> 
23:31:22 SQL> -- rpt
23:31:22 SQL> 
23:31:22 SQL> SELECT
23:31:22   2  pair
23:31:22   3  ,trend
23:31:22   4  ,gatt
23:31:22   5  ,COUNT(pair)
23:31:22   6  ,AVG(g6)
23:31:22   7  FROM svm6162
23:31:22   8  GROUP BY pair,trend,gatt
23:31:22   9  ORDER BY pair,trend,gatt
23:31:22  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_chf 	-1 nup	      7109 -.00156692
eur_chf 	-1 up	      2742  .00316791
eur_chf 	-1		72
eur_chf 	 1 nup	      6687 -.00163073
eur_chf 	 1 up	      2475  .00366365

Elapsed: 00:00:00.02
23:31:22 SQL> 
23:31:22 SQL> -- I comment out sections related to score-feedback.
23:31:22 SQL> -- I tested score-feeback and it hurts results:
23:31:22 SQL> 
23:31:22 SQL> -- CREATE OR REPLACE VIEW sc12 AS
23:31:22 SQL> -- SELECT
23:31:22 SQL> -- m.pair
23:31:22 SQL> -- ,m.ydate
23:31:22 SQL> -- ,m.prdate
23:31:22 SQL> -- ,l.score score_long
23:31:22 SQL> -- ,s.score score_short
23:31:22 SQL> -- ,m.g6
23:31:22 SQL> -- FROM svm62scores l,svm62scores s,svm6162 m
23:31:22 SQL> -- WHERE l.targ='gatt'
23:31:22 SQL> -- AND	 s.targ='gattn'
23:31:22 SQL> -- AND l.prdate = s.prdate
23:31:22 SQL> -- AND l.prdate = m.prdate
23:31:22 SQL> -- -- Speed things up:
23:31:22 SQL> -- AND l.pair = '&1'
23:31:22 SQL> -- AND s.pair = '&1'
23:31:22 SQL> -- /
23:31:22 SQL> --
23:31:22 SQL> -- DROP TABLE score_corr;
23:31:22 SQL> --
23:31:22 SQL> -- CREATE TABLE score_corr COMPRESS AS
23:31:22 SQL> -- SELECT
23:31:22 SQL> -- pair
23:31:22 SQL> -- -- ,ydate
23:31:22 SQL> -- ,prdate
23:31:22 SQL> -- -- Find corr() tween score and g6 over 2 day period:
23:31:22 SQL> -- ,CORR((score_long - score_short),g6)
23:31:22 SQL> --   OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 2*24*60/5 PRECEDING AND CURRENT ROW)sc_corr
23:31:22 SQL> -- FROM sc12
23:31:22 SQL> -- /
23:31:22 SQL> 
23:31:22 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.56
23:31:23 SQL> 
23:31:23 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.29
23:31:23 SQL> 
23:31:23 SQL> CREATE TABLE modsrc COMPRESS AS
23:31:23   2  SELECT
23:31:23   3  pair
23:31:23   4  ,ydate
23:31:23   5  ,prdate
23:31:23   6  ,trend
23:31:23   7  ,g6
23:31:23   8  ,gatt
23:31:23   9  ,gattn
23:31:23  10  ,SUM(g6)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g00
23:31:23  11  ,SUM(g6)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g01
23:31:23  12  ,SUM(g6)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g02
23:31:23  13  ,SUM(g6)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g03
23:31:23  14  ,SUM(g6)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g04
23:31:23  15  ,SUM(g6)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g05
23:31:23  16  ,SUM(g6)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g06
23:31:23  17  ,SUM(g6)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g07
23:31:23  18  ,SUM(g6)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g08
23:31:23  19  ,SUM(g6)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g09
23:31:23  20  ,SUM(g6)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g10
23:31:23  21  ,SUM(g6)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g11
23:31:23  22  ,SUM(g6)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g12
23:31:23  23  ,SUM(g6)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g13
23:31:23  24  ,SUM(g6)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g14
23:31:23  25  ,SUM(g6)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g15
23:31:23  26  ,SUM(g6)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g16
23:31:23  27  ,SUM(g6)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g17
23:31:23  28  ,SUM(g6)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g18
23:31:23  29  ,SUM(g6)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g19
23:31:23  30  ,SUM(g6)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g20
23:31:23  31  ,SUM(g6)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g21
23:31:23  32  ,SUM(g6)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g22
23:31:23  33  ,SUM(g6)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g23
23:31:23  34  ,SUM(g6)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g24
23:31:23  35  ,SUM(g6)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g25
23:31:23  36  ,SUM(g6)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g26
23:31:23  37  ,SUM(g6)OVER(PARTITION BY trend,att27 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g27
23:31:23  38  ,SUM(g6)OVER(PARTITION BY trend,att28 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g28
23:31:23  39  ,SUM(g6)OVER(PARTITION BY trend,att29 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g29
23:31:23  40  ,SUM(g6)OVER(PARTITION BY trend,att30 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g30
23:31:23  41  ,SUM(g6)OVER(PARTITION BY trend,att31 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g31
23:31:23  42  ,SUM(g6)OVER(PARTITION BY trend,att32 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g32
23:31:23  43  ,SUM(g6)OVER(PARTITION BY trend,att33 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g33
23:31:23  44  ,SUM(g6)OVER(PARTITION BY trend,att34 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g34
23:31:23  45  ,SUM(g6)OVER(PARTITION BY trend,att35 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g35
23:31:23  46  ,SUM(g6)OVER(PARTITION BY trend,att36 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g36
23:31:23  47  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g37
23:31:23  48  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*40 PRECEDING AND CURRENT ROW)g38
23:31:23  49  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*30 PRECEDING AND CURRENT ROW)g39
23:31:23  50  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)g40
23:31:23  51  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)g41
23:31:23  52  FROM svm6162
23:31:23  53  /

Table created.

Elapsed: 00:00:06.53
23:31:29 SQL> 
23:31:29 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:02.76
23:31:32 SQL> 
23:31:32 SQL> -- rpt
23:31:32 SQL> 
23:31:32 SQL> SELECT
23:31:32   2  pair
23:31:32   3  ,trend
23:31:32   4  ,gatt
23:31:32   5  ,COUNT(pair)
23:31:32   6  ,AVG(g6)
23:31:32   7  FROM modsrc
23:31:32   8  GROUP BY pair,trend,gatt
23:31:32   9  ORDER BY pair,trend,gatt
23:31:32  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_chf 	-1 nup	      7109 -.00156692
eur_chf 	-1 up	      2742  .00316791
eur_chf 	-1		72
eur_chf 	 1 nup	      6687 -.00163073
eur_chf 	 1 up	      2475  .00366365

Elapsed: 00:00:00.02
23:31:32 SQL> 
23:31:32 SQL> 
23:31:32 SQL> SELECT pair,COUNT(pair)FROM svm6102 GROUP BY pair;

PAIR	COUNT(PAIR)
------- -----------
eur_chf       19085

Elapsed: 00:00:00.74
23:31:33 SQL> 
23:31:33 SQL> SELECT pair,COUNT(pair)FROM modsrc GROUP BY pair;

PAIR	COUNT(PAIR)
------- -----------
eur_chf       19085

Elapsed: 00:00:00.01
23:31:33 SQL> 
23:31:33 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
