
SQL*Plus: Release 11.2.0.1.0 Production on Fri Mar 11 22:52:57 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

22:52:57 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
22:52:57 SQL> 22:52:57 SQL> --
22:52:57 SQL> -- pair10.sql
22:52:57 SQL> --
22:52:57 SQL> 
22:52:57 SQL> -- Creates views and tables needed by SVM.
22:52:57 SQL> 
22:52:57 SQL> 
22:52:57 SQL> CREATE OR REPLACE VIEW svm6102 AS
22:52:57   2  SELECT
22:52:57   3  pair
22:52:57   4  ,ydate
22:52:57   5  ,prdate
22:52:57   6  ,rownum rnum -- acts as t in my time-series
22:52:57   7  ,clse
22:52:57   8  -- Derive a bunch of attributes from clse, the latest price:
22:52:57   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
22:52:57  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
22:52:57  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
22:52:57  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
22:52:57  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
22:52:57  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
22:52:57  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
22:52:57  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
22:52:57  17  --
22:52:57  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
22:52:57  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
22:52:57  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
22:52:57  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
22:52:57  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
22:52:57  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
22:52:57  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
22:52:57  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
22:52:57  26  --
22:52:57  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
22:52:57  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
22:52:57  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
22:52:57  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
22:52:57  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
22:52:57  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
22:52:57  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
22:52:57  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
22:52:57  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
22:52:57  36  FROM di5min WHERE pair = '&1'
22:52:57  37  AND ydate > sysdate - 95
22:52:57  38  ORDER BY ydate
22:52:57  39  /
old  36: FROM di5min WHERE pair = '&1'
new  36: FROM di5min WHERE pair = 'eur_jpy'

View created.

Elapsed: 00:00:00.14
22:52:57 SQL> 
22:52:57 SQL> -- rpt
22:52:57 SQL> 
22:52:57 SQL> SELECT
22:52:57   2  pair
22:52:57   3  ,COUNT(pair)
22:52:57   4  ,MIN(clse),MAX(clse)
22:52:57   5  ,MIN(avg6),MAX(avg6)
22:52:57   6  ,MIN(ydate),MAX(ydate)
22:52:57   7  FROM svm6102
22:52:57   8  GROUP BY pair
22:52:57   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_jpy       19586 106.906797 115.658957 107.120556 115.394781 2010-12-06 22:55:00 2011-03-11 21:55:00

Elapsed: 00:00:00.80
22:52:58 SQL> 
22:52:58 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
22:52:58 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.47
22:52:58 SQL> CREATE TABLE svm6122 COMPRESS AS
22:52:58   2  SELECT
22:52:58   3  pair
22:52:58   4  ,ydate
22:52:58   5  ,prdate
22:52:58   6  ,clse
22:52:58   7  -- g6 is important. I want to predict g6:
22:52:58   8  ,(ld6 - clse)/clse g6
22:52:58   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
22:52:58  10  -- I want more attributes from the ones I derived above:
22:52:58  11  -- clse relation to moving-min
22:52:58  12  ,clse-min4  cm4
22:52:58  13  ,clse-min6  cm6
22:52:58  14  ,clse-min8  cm8
22:52:58  15  ,clse-min10 cm10
22:52:58  16  ,clse-min12 cm12
22:52:58  17  ,clse-min14 cm14
22:52:58  18  ,clse-min16 cm16
22:52:58  19  ,clse-min18 cm18
22:52:58  20  -- clse relation to moving-avg
22:52:58  21  ,clse-avg4  ca4
22:52:58  22  ,clse-avg6  ca6
22:52:58  23  ,clse-avg8  ca8
22:52:58  24  ,clse-avg10 ca10
22:52:58  25  ,clse-avg12 ca12
22:52:58  26  ,clse-avg14 ca14
22:52:58  27  ,clse-avg16 ca16
22:52:58  28  ,clse-avg18 ca18
22:52:58  29  -- clse relation to moving-max
22:52:58  30  ,clse-max4  cx4
22:52:58  31  ,clse-max6  cx6
22:52:58  32  ,clse-max8  cx8
22:52:58  33  ,clse-max10 cx10
22:52:58  34  ,clse-max12 cx12
22:52:58  35  ,clse-max14 cx14
22:52:58  36  ,clse-max16 cx16
22:52:58  37  ,clse-max18 cx18
22:52:58  38  -- Derive more attributes.
22:52:58  39  -- I want to use CORR() here to help SVM see the shape of the series.
22:52:58  40  -- But COVAR_POP is more stable:
22:52:58  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
22:52:58  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
22:52:58  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
22:52:58  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
22:52:58  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
22:52:58  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
22:52:58  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
22:52:58  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
22:52:58  49  -- Derive date related attributes:
22:52:58  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:52:58  51  ,0+TO_CHAR(ydate,'D')d
22:52:58  52  ,0+TO_CHAR(ydate,'W')w
22:52:58  53  -- mpm stands for minutes-past-midnight:
22:52:58  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:52:58  55  -- mph stands for minutes-past-hour:
22:52:58  56  ,0+TO_CHAR(ydate,'MI')mph
22:52:58  57  FROM svm6102
22:52:58  58  WHERE clse > 0
22:52:58  59  ORDER BY ydate
22:52:58  60  /

Table created.

Elapsed: 00:00:02.57
22:53:01 SQL> 
22:53:01 SQL> -- rpt
22:53:01 SQL> 
22:53:01 SQL> SELECT
22:53:01   2  pair
22:53:01   3  ,COUNT(pair)
22:53:01   4  ,MIN(clse),MAX(clse)
22:53:01   5  ,MIN(ydate),MAX(ydate)
22:53:01   6  FROM svm6122
22:53:01   7  GROUP BY pair
22:53:01   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_jpy       19586 106.906797 115.658957 2010-12-06 22:55:00 2011-03-11 21:55:00

Elapsed: 00:00:00.05
22:53:01 SQL> 
22:53:01 SQL> -- Prepare for derivation of NTILE based params:
22:53:01 SQL> 
22:53:01 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.08
22:53:01 SQL> CREATE TABLE svm6142 COMPRESS AS
22:53:01   2  SELECT
22:53:01   3  pair
22:53:01   4  ,ydate
22:53:01   5  ,prdate
22:53:01   6  ,clse
22:53:01   7  ,g6
22:53:01   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
22:53:01   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
22:53:01  10  ,CASE WHEN trend IS NULL THEN 1
22:53:01  11  	    WHEN trend =0      THEN 1
22:53:01  12  	    ELSE trend END trend
22:53:01  13  ,cm4
22:53:01  14  ,cm6
22:53:01  15  ,cm8
22:53:01  16  ,cm10
22:53:01  17  ,cm12
22:53:01  18  ,cm14
22:53:01  19  ,cm16
22:53:01  20  ,cm18
22:53:01  21  --
22:53:01  22  ,ca4
22:53:01  23  ,ca6
22:53:01  24  ,ca8
22:53:01  25  ,ca10
22:53:01  26  ,ca12
22:53:01  27  ,ca14
22:53:01  28  ,ca16
22:53:01  29  ,ca18
22:53:01  30  --
22:53:01  31  ,cx4
22:53:01  32  ,cx6
22:53:01  33  ,cx8
22:53:01  34  ,cx10
22:53:01  35  ,cx12
22:53:01  36  ,cx14
22:53:01  37  ,cx16
22:53:01  38  ,cx18
22:53:01  39  --
22:53:01  40  ,crr4
22:53:01  41  ,crr6
22:53:01  42  ,crr8
22:53:01  43  ,crr10
22:53:01  44  ,crr12
22:53:01  45  ,crr14
22:53:01  46  ,crr16
22:53:01  47  ,crr18
22:53:01  48  --
22:53:01  49  ,hh
22:53:01  50  ,d
22:53:01  51  ,w
22:53:01  52  ,mpm
22:53:01  53  ,mph
22:53:01  54  FROM svm6122
22:53:01  55  ORDER BY ydate
22:53:01  56  /

Table created.

Elapsed: 00:00:00.47
22:53:01 SQL> 
22:53:01 SQL> -- rpt
22:53:01 SQL> 
22:53:01 SQL> SELECT
22:53:01   2  pair
22:53:01   3  ,trend
22:53:01   4  ,gatt
22:53:01   5  ,COUNT(pair)
22:53:01   6  ,AVG(g6)
22:53:01   7  FROM svm6142
22:53:01   8  GROUP BY pair,trend,gatt
22:53:01   9  ORDER BY pair,trend,gatt
22:53:01  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_jpy 	-1 nup	      5923 -.00156648
eur_jpy 	-1 up	      3224 .003327775
eur_jpy 	-1		 6
eur_jpy 	 1 nup	      7054  -.0014477
eur_jpy 	 1 up	      3313 .003414493
eur_jpy 	 1		66

6 rows selected.

Elapsed: 00:00:00.04
22:53:02 SQL> 
22:53:02 SQL> 
22:53:02 SQL> -- Derive NTILE based params:
22:53:02 SQL> 
22:53:02 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.23
22:53:02 SQL> CREATE TABLE svm6162 COMPRESS AS
22:53:02   2  SELECT
22:53:02   3  pair
22:53:02   4  ,ydate
22:53:02   5  ,prdate
22:53:02   6  ,clse
22:53:02   7  ,g6
22:53:02   8  ,gatt
22:53:02   9  ,gattn
22:53:02  10  ,trend
22:53:02  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
22:53:02  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
22:53:02  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
22:53:02  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
22:53:02  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
22:53:02  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
22:53:02  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
22:53:02  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
22:53:02  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
22:53:02  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
22:53:02  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
22:53:02  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
22:53:02  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
22:53:02  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
22:53:02  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
22:53:02  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
22:53:02  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
22:53:02  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
22:53:02  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
22:53:02  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
22:53:02  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
22:53:02  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
22:53:02  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
22:53:02  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
22:53:02  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
22:53:02  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
22:53:02  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
22:53:02  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
22:53:02  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
22:53:02  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
22:53:02  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
22:53:02  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
22:53:02  43  ,hh  att32
22:53:02  44  ,d   att33
22:53:02  45  ,w   att34
22:53:02  46  ,mpm att35
22:53:02  47  ,mph att36
22:53:02  48  ,trend att37
22:53:02  49  FROM svm6142
22:53:02  50  ORDER BY ydate
22:53:02  51  /

Table created.

Elapsed: 00:00:05.13
22:53:07 SQL> 
22:53:07 SQL> -- rpt
22:53:07 SQL> 
22:53:07 SQL> SELECT
22:53:07   2  pair
22:53:07   3  ,trend
22:53:07   4  ,gatt
22:53:07   5  ,COUNT(pair)
22:53:07   6  ,AVG(g6)
22:53:07   7  FROM svm6162
22:53:07   8  GROUP BY pair,trend,gatt
22:53:07   9  ORDER BY pair,trend,gatt
22:53:07  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_jpy 	-1 nup	      5923 -.00156648
eur_jpy 	-1 up	      3224 .003327775
eur_jpy 	-1		 6
eur_jpy 	 1 nup	      7054  -.0014477
eur_jpy 	 1 up	      3313 .003414493
eur_jpy 	 1		66

6 rows selected.

Elapsed: 00:00:00.04
22:53:07 SQL> 
22:53:07 SQL> -- I comment out sections related to score-feedback.
22:53:07 SQL> -- I tested score-feeback and it hurts results:
22:53:07 SQL> 
22:53:07 SQL> -- CREATE OR REPLACE VIEW sc12 AS
22:53:07 SQL> -- SELECT
22:53:07 SQL> -- m.pair
22:53:07 SQL> -- ,m.ydate
22:53:07 SQL> -- ,m.prdate
22:53:07 SQL> -- ,l.score score_long
22:53:07 SQL> -- ,s.score score_short
22:53:07 SQL> -- ,m.g6
22:53:07 SQL> -- FROM svm62scores l,svm62scores s,svm6162 m
22:53:07 SQL> -- WHERE l.targ='gatt'
22:53:07 SQL> -- AND	 s.targ='gattn'
22:53:07 SQL> -- AND l.prdate = s.prdate
22:53:07 SQL> -- AND l.prdate = m.prdate
22:53:07 SQL> -- -- Speed things up:
22:53:07 SQL> -- AND l.pair = '&1'
22:53:07 SQL> -- AND s.pair = '&1'
22:53:07 SQL> -- /
22:53:07 SQL> --
22:53:07 SQL> -- DROP TABLE score_corr;
22:53:07 SQL> --
22:53:07 SQL> -- CREATE TABLE score_corr COMPRESS AS
22:53:07 SQL> -- SELECT
22:53:07 SQL> -- pair
22:53:07 SQL> -- -- ,ydate
22:53:07 SQL> -- ,prdate
22:53:07 SQL> -- -- Find corr() tween score and g6 over 2 day period:
22:53:07 SQL> -- ,CORR((score_long - score_short),g6)
22:53:07 SQL> --   OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 2*24*60/5 PRECEDING AND CURRENT ROW)sc_corr
22:53:07 SQL> -- FROM sc12
22:53:07 SQL> -- /
22:53:07 SQL> 
22:53:07 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.35
22:53:07 SQL> 
22:53:07 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.35
22:53:08 SQL> 
22:53:08 SQL> CREATE TABLE modsrc COMPRESS AS
22:53:08   2  SELECT
22:53:08   3  pair
22:53:08   4  ,ydate
22:53:08   5  ,prdate
22:53:08   6  ,trend
22:53:08   7  ,g6
22:53:08   8  ,gatt
22:53:08   9  ,gattn
22:53:08  10  ,SUM(g6)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g00
22:53:08  11  ,SUM(g6)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g01
22:53:08  12  ,SUM(g6)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g02
22:53:08  13  ,SUM(g6)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g03
22:53:08  14  ,SUM(g6)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g04
22:53:08  15  ,SUM(g6)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g05
22:53:08  16  ,SUM(g6)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g06
22:53:08  17  ,SUM(g6)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g07
22:53:08  18  ,SUM(g6)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g08
22:53:08  19  ,SUM(g6)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g09
22:53:08  20  ,SUM(g6)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g10
22:53:08  21  ,SUM(g6)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g11
22:53:08  22  ,SUM(g6)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g12
22:53:08  23  ,SUM(g6)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g13
22:53:08  24  ,SUM(g6)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g14
22:53:08  25  ,SUM(g6)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g15
22:53:08  26  ,SUM(g6)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g16
22:53:08  27  ,SUM(g6)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g17
22:53:08  28  ,SUM(g6)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g18
22:53:08  29  ,SUM(g6)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g19
22:53:08  30  ,SUM(g6)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g20
22:53:08  31  ,SUM(g6)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g21
22:53:08  32  ,SUM(g6)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g22
22:53:08  33  ,SUM(g6)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g23
22:53:08  34  ,SUM(g6)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g24
22:53:08  35  ,SUM(g6)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g25
22:53:08  36  ,SUM(g6)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g26
22:53:08  37  ,SUM(g6)OVER(PARTITION BY trend,att27 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g27
22:53:08  38  ,SUM(g6)OVER(PARTITION BY trend,att28 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g28
22:53:08  39  ,SUM(g6)OVER(PARTITION BY trend,att29 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g29
22:53:08  40  ,SUM(g6)OVER(PARTITION BY trend,att30 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g30
22:53:08  41  ,SUM(g6)OVER(PARTITION BY trend,att31 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g31
22:53:08  42  ,SUM(g6)OVER(PARTITION BY trend,att32 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g32
22:53:08  43  ,SUM(g6)OVER(PARTITION BY trend,att33 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g33
22:53:08  44  ,SUM(g6)OVER(PARTITION BY trend,att34 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g34
22:53:08  45  ,SUM(g6)OVER(PARTITION BY trend,att35 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g35
22:53:08  46  ,SUM(g6)OVER(PARTITION BY trend,att36 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g36
22:53:08  47  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g37
22:53:08  48  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*40 PRECEDING AND CURRENT ROW)g38
22:53:08  49  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*30 PRECEDING AND CURRENT ROW)g39
22:53:08  50  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)g40
22:53:08  51  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)g41
22:53:08  52  FROM svm6162
22:53:08  53  /

Table created.

Elapsed: 00:00:06.78
22:53:14 SQL> 
22:53:14 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:02.69
22:53:17 SQL> 
22:53:17 SQL> -- rpt
22:53:17 SQL> 
22:53:17 SQL> SELECT
22:53:17   2  pair
22:53:17   3  ,trend
22:53:17   4  ,gatt
22:53:17   5  ,COUNT(pair)
22:53:17   6  ,AVG(g6)
22:53:17   7  FROM modsrc
22:53:17   8  GROUP BY pair,trend,gatt
22:53:17   9  ORDER BY pair,trend,gatt
22:53:17  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_jpy 	-1 nup	      5923 -.00156648
eur_jpy 	-1 up	      3224 .003327775
eur_jpy 	-1		 6
eur_jpy 	 1 nup	      7054  -.0014477
eur_jpy 	 1 up	      3313 .003414493
eur_jpy 	 1		66

6 rows selected.

Elapsed: 00:00:00.03
22:53:17 SQL> 
22:53:17 SQL> 
22:53:17 SQL> SELECT pair,COUNT(pair)FROM svm6102 GROUP BY pair;

PAIR	COUNT(PAIR)
------- -----------
eur_jpy       19586

Elapsed: 00:00:00.77
22:53:18 SQL> 
22:53:18 SQL> SELECT pair,COUNT(pair)FROM modsrc GROUP BY pair;

PAIR	COUNT(PAIR)
------- -----------
eur_jpy       19586

Elapsed: 00:00:00.02
22:53:18 SQL> 
22:53:18 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
