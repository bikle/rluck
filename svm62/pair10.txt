
SQL*Plus: Release 11.2.0.1.0 Production on Mon Mar 28 10:06:34 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

10:06:34 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
10:06:34 SQL> 10:06:34 SQL> --
10:06:34 SQL> -- pair10.sql
10:06:34 SQL> --
10:06:34 SQL> 
10:06:34 SQL> -- Creates views and tables needed by SVM.
10:06:34 SQL> 
10:06:34 SQL> 
10:06:34 SQL> CREATE OR REPLACE VIEW svm6102 AS
10:06:34   2  SELECT
10:06:34   3  pair
10:06:34   4  ,ydate
10:06:34   5  ,prdate
10:06:34   6  ,rownum rnum -- acts as t in my time-series
10:06:34   7  ,clse
10:06:34   8  -- Derive a bunch of attributes from clse, the latest price:
10:06:34   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
10:06:34  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
10:06:34  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
10:06:34  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
10:06:34  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
10:06:34  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
10:06:34  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
10:06:34  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
10:06:34  17  --
10:06:34  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
10:06:34  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
10:06:34  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
10:06:34  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
10:06:34  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
10:06:34  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
10:06:34  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
10:06:34  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
10:06:34  26  --
10:06:34  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
10:06:34  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
10:06:34  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
10:06:34  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
10:06:34  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
10:06:34  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
10:06:34  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
10:06:34  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
10:06:34  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
10:06:34  36  FROM di5min WHERE pair = '&1'
10:06:34  37  AND ydate > sysdate - 195
10:06:34  38  ORDER BY ydate
10:06:34  39  /
old  36: FROM di5min WHERE pair = '&1'
new  36: FROM di5min WHERE pair = 'eur_chf'

View created.

Elapsed: 00:00:00.16
10:06:34 SQL> 
10:06:34 SQL> -- rpt
10:06:34 SQL> 
10:06:34 SQL> SELECT
10:06:34   2  pair
10:06:34   3  ,COUNT(pair)
10:06:34   4  ,MIN(clse),MAX(clse)
10:06:34   5  ,MIN(avg6),MAX(avg6)
10:06:34   6  ,MIN(ydate),MAX(ydate)
10:06:34   7  FROM svm6102
10:06:34   8  GROUP BY pair
10:06:34   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_chf       23974 1.24192946 1.32171244 1.24320592  1.3183979 2010-11-30 00:00:00 2011-03-28 07:40:00

Elapsed: 00:00:01.71
10:06:36 SQL> 
10:06:36 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
10:06:36 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.11
10:06:36 SQL> CREATE TABLE svm6122 COMPRESS AS
10:06:36   2  SELECT
10:06:36   3  pair
10:06:36   4  ,ydate
10:06:36   5  ,prdate
10:06:36   6  ,clse
10:06:36   7  -- g6 is important. I want to predict g6:
10:06:36   8  ,(ld6 - clse)/clse g6
10:06:36   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
10:06:36  10  -- I want more attributes from the ones I derived above:
10:06:36  11  -- clse relation to moving-min
10:06:36  12  ,clse-min4  cm4
10:06:36  13  ,clse-min6  cm6
10:06:36  14  ,clse-min8  cm8
10:06:36  15  ,clse-min10 cm10
10:06:36  16  ,clse-min12 cm12
10:06:36  17  ,clse-min14 cm14
10:06:36  18  ,clse-min16 cm16
10:06:36  19  ,clse-min18 cm18
10:06:36  20  -- clse relation to moving-avg
10:06:36  21  ,clse-avg4  ca4
10:06:36  22  ,clse-avg6  ca6
10:06:36  23  ,clse-avg8  ca8
10:06:36  24  ,clse-avg10 ca10
10:06:36  25  ,clse-avg12 ca12
10:06:36  26  ,clse-avg14 ca14
10:06:36  27  ,clse-avg16 ca16
10:06:36  28  ,clse-avg18 ca18
10:06:36  29  -- clse relation to moving-max
10:06:36  30  ,clse-max4  cx4
10:06:36  31  ,clse-max6  cx6
10:06:36  32  ,clse-max8  cx8
10:06:36  33  ,clse-max10 cx10
10:06:36  34  ,clse-max12 cx12
10:06:36  35  ,clse-max14 cx14
10:06:36  36  ,clse-max16 cx16
10:06:36  37  ,clse-max18 cx18
10:06:36  38  -- Derive more attributes.
10:06:36  39  -- I want to use CORR() here to help SVM see the shape of the series.
10:06:36  40  -- But COVAR_POP is more stable:
10:06:36  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
10:06:36  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
10:06:36  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
10:06:36  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
10:06:36  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
10:06:36  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
10:06:36  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
10:06:36  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
10:06:36  49  -- Derive date related attributes:
10:06:36  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
10:06:36  51  ,0+TO_CHAR(ydate,'D')d
10:06:36  52  ,0+TO_CHAR(ydate,'W')w
10:06:36  53  -- mpm stands for minutes-past-midnight:
10:06:36  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
10:06:36  55  -- mph stands for minutes-past-hour:
10:06:36  56  ,0+TO_CHAR(ydate,'MI')mph
10:06:36  57  FROM svm6102
10:06:36  58  WHERE clse > 0
10:06:36  59  ORDER BY ydate
10:06:36  60  /

Table created.

Elapsed: 00:00:02.68
10:06:39 SQL> 
10:06:39 SQL> -- rpt
10:06:39 SQL> 
10:06:39 SQL> SELECT
10:06:39   2  pair
10:06:39   3  ,COUNT(pair)
10:06:39   4  ,MIN(clse),MAX(clse)
10:06:39   5  ,MIN(ydate),MAX(ydate)
10:06:39   6  FROM svm6122
10:06:39   7  GROUP BY pair
10:06:39   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_chf       23974 1.24192946 1.32171244 2010-11-30 00:00:00 2011-03-28 07:40:00

Elapsed: 00:00:00.05
10:06:39 SQL> 
10:06:39 SQL> -- Prepare for derivation of NTILE based params:
10:06:39 SQL> 
10:06:39 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.09
10:06:39 SQL> CREATE TABLE svm6142 COMPRESS AS
10:06:39   2  SELECT
10:06:39   3  pair
10:06:39   4  ,ydate
10:06:39   5  ,prdate
10:06:39   6  ,clse
10:06:39   7  ,g6
10:06:39   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
10:06:39   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
10:06:39  10  ,CASE WHEN trend IS NULL THEN 1
10:06:39  11  	    WHEN trend =0      THEN 1
10:06:39  12  	    ELSE trend END trend
10:06:39  13  ,cm4
10:06:39  14  ,cm6
10:06:39  15  ,cm8
10:06:39  16  ,cm10
10:06:39  17  ,cm12
10:06:39  18  ,cm14
10:06:39  19  ,cm16
10:06:39  20  ,cm18
10:06:39  21  --
10:06:39  22  ,ca4
10:06:39  23  ,ca6
10:06:39  24  ,ca8
10:06:39  25  ,ca10
10:06:39  26  ,ca12
10:06:39  27  ,ca14
10:06:39  28  ,ca16
10:06:39  29  ,ca18
10:06:39  30  --
10:06:39  31  ,cx4
10:06:39  32  ,cx6
10:06:39  33  ,cx8
10:06:39  34  ,cx10
10:06:39  35  ,cx12
10:06:39  36  ,cx14
10:06:39  37  ,cx16
10:06:39  38  ,cx18
10:06:39  39  --
10:06:39  40  ,crr4
10:06:39  41  ,crr6
10:06:39  42  ,crr8
10:06:39  43  ,crr10
10:06:39  44  ,crr12
10:06:39  45  ,crr14
10:06:39  46  ,crr16
10:06:39  47  ,crr18
10:06:39  48  --
10:06:39  49  ,hh
10:06:39  50  ,d
10:06:39  51  ,w
10:06:39  52  ,mpm
10:06:39  53  ,mph
10:06:39  54  FROM svm6122
10:06:39  55  ORDER BY ydate
10:06:39  56  /

Table created.

Elapsed: 00:00:00.48
10:06:39 SQL> 
10:06:39 SQL> -- rpt
10:06:39 SQL> 
10:06:39 SQL> SELECT
10:06:39   2  pair
10:06:39   3  ,trend
10:06:39   4  ,gatt
10:06:39   5  ,COUNT(pair)
10:06:39   6  ,AVG(g6)
10:06:39   7  FROM svm6142
10:06:39   8  GROUP BY pair,trend,gatt
10:06:39   9  ORDER BY pair,trend,gatt
10:06:39  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_chf 	-1 nup	      8314 -.00156364
eur_chf 	-1 up	      3754 .003345462
eur_chf 	-1		20
eur_chf 	 1 nup	      8559 -.00143194
eur_chf 	 1 up	      3275 .003649684
eur_chf 	 1		52

6 rows selected.

Elapsed: 00:00:00.05
10:06:39 SQL> 
10:06:39 SQL> 
10:06:39 SQL> -- Derive NTILE based params:
10:06:39 SQL> 
10:06:39 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.07
10:06:40 SQL> CREATE TABLE svm6162 COMPRESS AS
10:06:40   2  SELECT
10:06:40   3  pair
10:06:40   4  ,ydate
10:06:40   5  ,prdate
10:06:40   6  ,clse
10:06:40   7  ,g6
10:06:40   8  ,gatt
10:06:40   9  ,gattn
10:06:40  10  ,trend
10:06:40  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
10:06:40  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
10:06:40  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
10:06:40  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
10:06:40  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
10:06:40  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
10:06:40  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
10:06:40  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
10:06:40  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
10:06:40  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
10:06:40  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
10:06:40  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
10:06:40  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
10:06:40  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
10:06:40  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
10:06:40  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
10:06:40  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
10:06:40  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
10:06:40  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
10:06:40  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
10:06:40  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
10:06:40  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
10:06:40  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
10:06:40  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
10:06:40  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
10:06:40  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
10:06:40  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
10:06:40  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
10:06:40  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
10:06:40  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
10:06:40  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
10:06:40  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
10:06:40  43  ,hh  att32
10:06:40  44  ,d   att33
10:06:40  45  ,w   att34
10:06:40  46  ,mpm att35
10:06:40  47  ,mph att36
10:06:40  48  ,trend att37
10:06:40  49  FROM svm6142
10:06:40  50  ORDER BY ydate
10:06:40  51  /

Table created.

Elapsed: 00:00:06.33
10:06:46 SQL> 
10:06:46 SQL> -- rpt
10:06:46 SQL> 
10:06:46 SQL> SELECT
10:06:46   2  pair
10:06:46   3  ,trend
10:06:46   4  ,gatt
10:06:46   5  ,COUNT(pair)
10:06:46   6  ,AVG(g6)
10:06:46   7  FROM svm6162
10:06:46   8  GROUP BY pair,trend,gatt
10:06:46   9  ORDER BY pair,trend,gatt
10:06:46  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_chf 	-1 nup	      8314 -.00156364
eur_chf 	-1 up	      3754 .003345462
eur_chf 	-1		20
eur_chf 	 1 nup	      8559 -.00143194
eur_chf 	 1 up	      3275 .003649684
eur_chf 	 1		52

6 rows selected.

Elapsed: 00:00:00.03
10:06:46 SQL> 
10:06:46 SQL> -- I comment out sections related to score-feedback.
10:06:46 SQL> -- I tested score-feeback and it hurts results:
10:06:46 SQL> 
10:06:46 SQL> -- CREATE OR REPLACE VIEW sc12 AS
10:06:46 SQL> -- SELECT
10:06:46 SQL> -- m.pair
10:06:46 SQL> -- ,m.ydate
10:06:46 SQL> -- ,m.prdate
10:06:46 SQL> -- ,l.score score_long
10:06:46 SQL> -- ,s.score score_short
10:06:46 SQL> -- ,m.g6
10:06:46 SQL> -- FROM svm62scores l,svm62scores s,svm6162 m
10:06:46 SQL> -- WHERE l.targ='gatt'
10:06:46 SQL> -- AND	 s.targ='gattn'
10:06:46 SQL> -- AND l.prdate = s.prdate
10:06:46 SQL> -- AND l.prdate = m.prdate
10:06:46 SQL> -- -- Speed things up:
10:06:46 SQL> -- AND l.pair = '&1'
10:06:46 SQL> -- AND s.pair = '&1'
10:06:46 SQL> -- /
10:06:46 SQL> --
10:06:46 SQL> -- DROP TABLE score_corr;
10:06:46 SQL> --
10:06:46 SQL> -- CREATE TABLE score_corr COMPRESS AS
10:06:46 SQL> -- SELECT
10:06:46 SQL> -- pair
10:06:46 SQL> -- -- ,ydate
10:06:46 SQL> -- ,prdate
10:06:46 SQL> -- -- Find corr() tween score and g6 over 2 day period:
10:06:46 SQL> -- ,CORR((score_long - score_short),g6)
10:06:46 SQL> --   OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 2*24*60/5 PRECEDING AND CURRENT ROW)sc_corr
10:06:46 SQL> -- FROM sc12
10:06:46 SQL> -- /
10:06:46 SQL> 
10:06:46 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.07
10:06:46 SQL> 
10:06:46 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.64
10:06:47 SQL> 
10:06:47 SQL> CREATE TABLE modsrc COMPRESS AS
10:06:47   2  SELECT
10:06:47   3  pair
10:06:47   4  ,ydate
10:06:47   5  ,prdate
10:06:47   6  ,trend
10:06:47   7  ,g6
10:06:47   8  ,gatt
10:06:47   9  ,gattn
10:06:47  10  ,SUM(g6)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g00
10:06:47  11  ,SUM(g6)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g01
10:06:47  12  ,SUM(g6)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g02
10:06:47  13  ,SUM(g6)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g03
10:06:47  14  ,SUM(g6)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g04
10:06:47  15  ,SUM(g6)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g05
10:06:47  16  ,SUM(g6)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g06
10:06:47  17  ,SUM(g6)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g07
10:06:47  18  ,SUM(g6)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g08
10:06:47  19  ,SUM(g6)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g09
10:06:47  20  ,SUM(g6)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g10
10:06:47  21  ,SUM(g6)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g11
10:06:47  22  ,SUM(g6)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g12
10:06:47  23  ,SUM(g6)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g13
10:06:47  24  ,SUM(g6)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g14
10:06:47  25  ,SUM(g6)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g15
10:06:47  26  ,SUM(g6)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g16
10:06:47  27  ,SUM(g6)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g17
10:06:47  28  ,SUM(g6)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g18
10:06:47  29  ,SUM(g6)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g19
10:06:47  30  ,SUM(g6)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g20
10:06:47  31  ,SUM(g6)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g21
10:06:47  32  ,SUM(g6)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g22
10:06:47  33  ,SUM(g6)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g23
10:06:47  34  ,SUM(g6)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g24
10:06:47  35  ,SUM(g6)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g25
10:06:47  36  ,SUM(g6)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g26
10:06:47  37  ,SUM(g6)OVER(PARTITION BY trend,att27 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g27
10:06:47  38  ,SUM(g6)OVER(PARTITION BY trend,att28 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g28
10:06:47  39  ,SUM(g6)OVER(PARTITION BY trend,att29 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g29
10:06:47  40  ,SUM(g6)OVER(PARTITION BY trend,att30 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g30
10:06:47  41  ,SUM(g6)OVER(PARTITION BY trend,att31 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g31
10:06:47  42  ,SUM(g6)OVER(PARTITION BY trend,att32 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g32
10:06:47  43  ,SUM(g6)OVER(PARTITION BY trend,att33 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g33
10:06:47  44  ,SUM(g6)OVER(PARTITION BY trend,att34 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g34
10:06:47  45  ,SUM(g6)OVER(PARTITION BY trend,att35 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g35
10:06:47  46  ,SUM(g6)OVER(PARTITION BY trend,att36 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g36
10:06:47  47  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g37
10:06:47  48  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*40 PRECEDING AND CURRENT ROW)g38
10:06:47  49  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*30 PRECEDING AND CURRENT ROW)g39
10:06:47  50  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)g40
10:06:47  51  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)g41
10:06:47  52  FROM svm6162
10:06:47  53  /

Table created.

Elapsed: 00:00:08.48
10:06:55 SQL> 
10:06:55 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:03.31
10:06:58 SQL> 
10:06:58 SQL> -- rpt
10:06:58 SQL> 
10:06:58 SQL> SELECT
10:06:58   2  pair
10:06:58   3  ,trend
10:06:58   4  ,gatt
10:06:58   5  ,COUNT(pair)
10:06:58   6  ,AVG(g6)
10:06:58   7  FROM modsrc
10:06:58   8  GROUP BY pair,trend,gatt
10:06:58   9  ORDER BY pair,trend,gatt
10:06:58  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_chf 	-1 nup	      8314 -.00156364
eur_chf 	-1 up	      3754 .003345462
eur_chf 	-1		20
eur_chf 	 1 nup	      8559 -.00143194
eur_chf 	 1 up	      3275 .003649684
eur_chf 	 1		52

6 rows selected.

Elapsed: 00:00:00.02
10:06:58 SQL> 
10:06:58 SQL> 
10:06:58 SQL> SELECT pair,COUNT(pair)FROM svm6102 GROUP BY pair;

PAIR	COUNT(PAIR)
------- -----------
eur_chf       23974

Elapsed: 00:00:00.92
10:06:59 SQL> 
10:06:59 SQL> SELECT pair,COUNT(pair)FROM modsrc GROUP BY pair;

PAIR	COUNT(PAIR)
------- -----------
eur_chf       23974

Elapsed: 00:00:00.01
10:06:59 SQL> 
10:06:59 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
