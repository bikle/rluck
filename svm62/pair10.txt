
SQL*Plus: Release 11.2.0.1.0 Production on Fri Feb 18 09:21:11 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

09:21:11 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
09:21:11 SQL> 09:21:11 SQL> --
09:21:11 SQL> -- pair10.sql
09:21:11 SQL> --
09:21:11 SQL> 
09:21:11 SQL> -- Creates views and tables needed by SVM.
09:21:11 SQL> 
09:21:11 SQL> 
09:21:11 SQL> CREATE OR REPLACE VIEW svm6102 AS
09:21:11   2  SELECT
09:21:11   3  pair
09:21:11   4  ,ydate
09:21:11   5  ,prdate
09:21:11   6  ,rownum rnum -- acts as t in my time-series
09:21:11   7  ,clse
09:21:11   8  -- Derive a bunch of attributes from clse, the latest price:
09:21:11   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
09:21:11  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
09:21:11  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
09:21:11  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
09:21:11  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
09:21:11  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
09:21:11  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
09:21:11  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
09:21:11  17  --
09:21:11  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
09:21:11  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
09:21:11  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
09:21:11  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
09:21:11  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
09:21:11  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
09:21:11  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
09:21:11  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
09:21:11  26  --
09:21:11  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
09:21:11  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
09:21:11  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
09:21:11  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
09:21:11  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
09:21:11  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
09:21:11  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
09:21:11  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
09:21:11  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
09:21:11  36  FROM di5min WHERE pair = '&1'
09:21:11  37  AND ydate > sysdate - 95
09:21:11  38  ORDER BY ydate
09:21:11  39  /
old  36: FROM di5min WHERE pair = '&1'
new  36: FROM di5min WHERE pair = 'eur_gbp'

View created.

Elapsed: 00:00:00.06
09:21:11 SQL> 
09:21:11 SQL> -- rpt
09:21:11 SQL> 
09:21:11 SQL> SELECT
09:21:11   2  pair
09:21:11   3  ,COUNT(pair)
09:21:11   4  ,MIN(clse),MAX(clse)
09:21:11   5  ,MIN(avg6),MAX(avg6)
09:21:11   6  ,MIN(ydate),MAX(ydate)
09:21:11   7  FROM svm6102
09:21:11   8  GROUP BY pair
09:21:11   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_gbp       19638 .829062716 .867050282 .830048836 .865740025 2010-11-15 09:25:00 2011-02-18 09:00:00

Elapsed: 00:00:00.87
09:21:12 SQL> 
09:21:12 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
09:21:12 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.22
09:21:12 SQL> CREATE TABLE svm6122 COMPRESS AS
09:21:12   2  SELECT
09:21:12   3  pair
09:21:12   4  ,ydate
09:21:12   5  ,prdate
09:21:12   6  ,clse
09:21:12   7  -- g6 is important. I want to predict g6:
09:21:12   8  ,ld6 - clse g6
09:21:12   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
09:21:12  10  -- I want more attributes from the ones I derived above:
09:21:12  11  -- clse relation to moving-min
09:21:12  12  ,clse-min4  cm4
09:21:12  13  ,clse-min6  cm6
09:21:12  14  ,clse-min8  cm8
09:21:12  15  ,clse-min10 cm10
09:21:12  16  ,clse-min12 cm12
09:21:12  17  ,clse-min14 cm14
09:21:12  18  ,clse-min16 cm16
09:21:12  19  ,clse-min18 cm18
09:21:12  20  -- clse relation to moving-avg
09:21:12  21  ,clse-avg4  ca4
09:21:12  22  ,clse-avg6  ca6
09:21:12  23  ,clse-avg8  ca8
09:21:12  24  ,clse-avg10 ca10
09:21:12  25  ,clse-avg12 ca12
09:21:12  26  ,clse-avg14 ca14
09:21:12  27  ,clse-avg16 ca16
09:21:12  28  ,clse-avg18 ca18
09:21:12  29  -- clse relation to moving-max
09:21:12  30  ,clse-max4  cx4
09:21:12  31  ,clse-max6  cx6
09:21:12  32  ,clse-max8  cx8
09:21:12  33  ,clse-max10 cx10
09:21:12  34  ,clse-max12 cx12
09:21:12  35  ,clse-max14 cx14
09:21:12  36  ,clse-max16 cx16
09:21:12  37  ,clse-max18 cx18
09:21:12  38  -- Derive more attributes.
09:21:12  39  -- I want to use CORR() here to help SVM see the shape of the series.
09:21:12  40  -- But COVAR_POP is more stable:
09:21:12  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
09:21:12  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
09:21:12  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
09:21:12  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
09:21:12  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
09:21:12  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
09:21:12  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
09:21:12  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
09:21:12  49  -- Derive date related attributes:
09:21:12  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
09:21:12  51  ,0+TO_CHAR(ydate,'D')d
09:21:12  52  ,0+TO_CHAR(ydate,'W')w
09:21:12  53  -- mpm stands for minutes-past-midnight:
09:21:12  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
09:21:12  55  -- mph stands for minutes-past-hour:
09:21:12  56  ,0+TO_CHAR(ydate,'MI')mph
09:21:12  57  FROM svm6102
09:21:12  58  ORDER BY ydate
09:21:12  59  /

Table created.

Elapsed: 00:00:02.49
09:21:14 SQL> 
09:21:14 SQL> -- rpt
09:21:14 SQL> 
09:21:14 SQL> SELECT
09:21:14   2  pair
09:21:14   3  ,COUNT(pair)
09:21:14   4  ,MIN(clse),MAX(clse)
09:21:14   5  ,MIN(ydate),MAX(ydate)
09:21:14   6  FROM svm6122
09:21:14   7  GROUP BY pair
09:21:14   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_gbp       19638 .829062716 .867050282 2010-11-15 09:25:00 2011-02-18 09:00:00

Elapsed: 00:00:00.10
09:21:14 SQL> 
09:21:14 SQL> -- Prepare for derivation of NTILE based params:
09:21:14 SQL> 
09:21:14 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.42
09:21:15 SQL> CREATE TABLE svm6142 COMPRESS AS
09:21:15   2  SELECT
09:21:15   3  pair
09:21:15   4  ,ydate
09:21:15   5  ,prdate
09:21:15   6  ,clse
09:21:15   7  ,g6
09:21:15   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
09:21:15   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
09:21:15  10  ,CASE WHEN trend IS NULL THEN 1
09:21:15  11  	    WHEN trend =0      THEN 1
09:21:15  12  	    ELSE trend END trend
09:21:15  13  ,cm4
09:21:15  14  ,cm6
09:21:15  15  ,cm8
09:21:15  16  ,cm10
09:21:15  17  ,cm12
09:21:15  18  ,cm14
09:21:15  19  ,cm16
09:21:15  20  ,cm18
09:21:15  21  --
09:21:15  22  ,ca4
09:21:15  23  ,ca6
09:21:15  24  ,ca8
09:21:15  25  ,ca10
09:21:15  26  ,ca12
09:21:15  27  ,ca14
09:21:15  28  ,ca16
09:21:15  29  ,ca18
09:21:15  30  --
09:21:15  31  ,cx4
09:21:15  32  ,cx6
09:21:15  33  ,cx8
09:21:15  34  ,cx10
09:21:15  35  ,cx12
09:21:15  36  ,cx14
09:21:15  37  ,cx16
09:21:15  38  ,cx18
09:21:15  39  --
09:21:15  40  ,crr4
09:21:15  41  ,crr6
09:21:15  42  ,crr8
09:21:15  43  ,crr10
09:21:15  44  ,crr12
09:21:15  45  ,crr14
09:21:15  46  ,crr16
09:21:15  47  ,crr18
09:21:15  48  --
09:21:15  49  ,hh
09:21:15  50  ,d
09:21:15  51  ,w
09:21:15  52  ,mpm
09:21:15  53  ,mph
09:21:15  54  FROM svm6122
09:21:15  55  ORDER BY ydate
09:21:15  56  /

Table created.

Elapsed: 00:00:00.42
09:21:15 SQL> 
09:21:15 SQL> -- rpt
09:21:15 SQL> 
09:21:15 SQL> SELECT
09:21:15   2  pair
09:21:15   3  ,trend
09:21:15   4  ,gatt
09:21:15   5  ,COUNT(pair)
09:21:15   6  ,AVG(g6)
09:21:15   7  FROM svm6142
09:21:15   8  GROUP BY pair,trend,gatt
09:21:15   9  ORDER BY pair,trend,gatt
09:21:15  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_gbp 	-1 nup	      7632 -.00095339
eur_gbp 	-1 up	      2299 .002712551
eur_gbp 	-1		60
eur_gbp 	 1 nup	      7006 -.00100078
eur_gbp 	 1 up	      2629 .002869206
eur_gbp 	 1		12

6 rows selected.

Elapsed: 00:00:00.19
09:21:15 SQL> 
09:21:15 SQL> 
09:21:15 SQL> -- Derive NTILE based params:
09:21:15 SQL> 
09:21:15 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.19
09:21:16 SQL> CREATE TABLE svm6162 COMPRESS AS
09:21:16   2  SELECT
09:21:16   3  pair
09:21:16   4  ,ydate
09:21:16   5  ,prdate
09:21:16   6  ,clse
09:21:16   7  ,g6
09:21:16   8  ,gatt
09:21:16   9  ,gattn
09:21:16  10  ,trend
09:21:16  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
09:21:16  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
09:21:16  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
09:21:16  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
09:21:16  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
09:21:16  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
09:21:16  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
09:21:16  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
09:21:16  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
09:21:16  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
09:21:16  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
09:21:16  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
09:21:16  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
09:21:16  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
09:21:16  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
09:21:16  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
09:21:16  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
09:21:16  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
09:21:16  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
09:21:16  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
09:21:16  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
09:21:16  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
09:21:16  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
09:21:16  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
09:21:16  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
09:21:16  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
09:21:16  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
09:21:16  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
09:21:16  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
09:21:16  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
09:21:16  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
09:21:16  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
09:21:16  43  ,hh  att32
09:21:16  44  ,d   att33
09:21:16  45  ,w   att34
09:21:16  46  ,mpm att35
09:21:16  47  ,mph att36
09:21:16  48  ,trend att37
09:21:16  49  FROM svm6142
09:21:16  50  ORDER BY ydate
09:21:16  51  /

Table created.

Elapsed: 00:00:05.58
09:21:21 SQL> 
09:21:21 SQL> -- rpt
09:21:21 SQL> 
09:21:21 SQL> SELECT
09:21:21   2  pair
09:21:21   3  ,trend
09:21:21   4  ,gatt
09:21:21   5  ,COUNT(pair)
09:21:21   6  ,AVG(g6)
09:21:21   7  FROM svm6162
09:21:21   8  GROUP BY pair,trend,gatt
09:21:21   9  ORDER BY pair,trend,gatt
09:21:21  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_gbp 	-1 nup	      7632 -.00095339
eur_gbp 	-1 up	      2299 .002712551
eur_gbp 	-1		60
eur_gbp 	 1 nup	      7006 -.00100078
eur_gbp 	 1 up	      2629 .002869206
eur_gbp 	 1		12

6 rows selected.

Elapsed: 00:00:00.04
09:21:21 SQL> 
09:21:21 SQL> -- I comment out sections related to score-feedback.
09:21:21 SQL> -- I tested score-feeback and it hurts results:
09:21:21 SQL> 
09:21:21 SQL> -- CREATE OR REPLACE VIEW sc12 AS
09:21:21 SQL> -- SELECT
09:21:21 SQL> -- m.pair
09:21:21 SQL> -- ,m.ydate
09:21:21 SQL> -- ,m.prdate
09:21:21 SQL> -- ,l.score score_long
09:21:21 SQL> -- ,s.score score_short
09:21:21 SQL> -- ,m.g6
09:21:21 SQL> -- FROM svm62scores l,svm62scores s,svm6162 m
09:21:21 SQL> -- WHERE l.targ='gatt'
09:21:21 SQL> -- AND	 s.targ='gattn'
09:21:21 SQL> -- AND l.prdate = s.prdate
09:21:21 SQL> -- AND l.prdate = m.prdate
09:21:21 SQL> -- -- Speed things up:
09:21:21 SQL> -- AND l.pair = '&1'
09:21:21 SQL> -- AND s.pair = '&1'
09:21:21 SQL> -- /
09:21:21 SQL> --
09:21:21 SQL> -- DROP TABLE score_corr;
09:21:21 SQL> --
09:21:21 SQL> -- CREATE TABLE score_corr COMPRESS AS
09:21:21 SQL> -- SELECT
09:21:21 SQL> -- pair
09:21:21 SQL> -- -- ,ydate
09:21:21 SQL> -- ,prdate
09:21:21 SQL> -- -- Find corr() tween score and g6 over 2 day period:
09:21:21 SQL> -- ,CORR((score_long - score_short),g6)
09:21:21 SQL> --   OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 2*24*60/5 PRECEDING AND CURRENT ROW)sc_corr
09:21:21 SQL> -- FROM sc12
09:21:21 SQL> -- /
09:21:21 SQL> 
09:21:21 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.30
09:21:22 SQL> 
09:21:22 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.35
09:21:22 SQL> 
09:21:22 SQL> CREATE TABLE modsrc COMPRESS AS
09:21:22   2  SELECT
09:21:22   3  pair
09:21:22   4  ,ydate
09:21:22   5  ,prdate
09:21:22   6  ,trend
09:21:22   7  ,g6
09:21:22   8  ,gatt
09:21:22   9  ,gattn
09:21:22  10  ,SUM(g6)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g00
09:21:22  11  ,SUM(g6)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g01
09:21:22  12  ,SUM(g6)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g02
09:21:22  13  ,SUM(g6)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g03
09:21:22  14  ,SUM(g6)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g04
09:21:22  15  ,SUM(g6)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g05
09:21:22  16  ,SUM(g6)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g06
09:21:22  17  ,SUM(g6)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g07
09:21:22  18  ,SUM(g6)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g08
09:21:22  19  ,SUM(g6)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g09
09:21:22  20  ,SUM(g6)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g10
09:21:22  21  ,SUM(g6)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g11
09:21:22  22  ,SUM(g6)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g12
09:21:22  23  ,SUM(g6)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g13
09:21:22  24  ,SUM(g6)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g14
09:21:22  25  ,SUM(g6)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g15
09:21:22  26  ,SUM(g6)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g16
09:21:22  27  ,SUM(g6)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g17
09:21:22  28  ,SUM(g6)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g18
09:21:22  29  ,SUM(g6)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g19
09:21:22  30  ,SUM(g6)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g20
09:21:22  31  ,SUM(g6)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g21
09:21:22  32  ,SUM(g6)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g22
09:21:22  33  ,SUM(g6)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g23
09:21:22  34  ,SUM(g6)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g24
09:21:22  35  ,SUM(g6)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g25
09:21:22  36  ,SUM(g6)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g26
09:21:22  37  ,SUM(g6)OVER(PARTITION BY trend,att27 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g27
09:21:22  38  ,SUM(g6)OVER(PARTITION BY trend,att28 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g28
09:21:22  39  ,SUM(g6)OVER(PARTITION BY trend,att29 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g29
09:21:22  40  ,SUM(g6)OVER(PARTITION BY trend,att30 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g30
09:21:22  41  ,SUM(g6)OVER(PARTITION BY trend,att31 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g31
09:21:22  42  ,SUM(g6)OVER(PARTITION BY trend,att32 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g32
09:21:22  43  ,SUM(g6)OVER(PARTITION BY trend,att33 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g33
09:21:22  44  ,SUM(g6)OVER(PARTITION BY trend,att34 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g34
09:21:22  45  ,SUM(g6)OVER(PARTITION BY trend,att35 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g35
09:21:22  46  ,SUM(g6)OVER(PARTITION BY trend,att36 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g36
09:21:22  47  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g37
09:21:22  48  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*40 PRECEDING AND CURRENT ROW)g38
09:21:22  49  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*30 PRECEDING AND CURRENT ROW)g39
09:21:22  50  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)g40
09:21:22  51  ,SUM(g6)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)g41
09:21:22  52  FROM svm6162
09:21:22  53  /

Table created.

Elapsed: 00:00:06.68
09:21:29 SQL> 
09:21:29 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:02.60
09:21:31 SQL> 
09:21:31 SQL> -- rpt
09:21:31 SQL> 
09:21:31 SQL> SELECT
09:21:31   2  pair
09:21:31   3  ,trend
09:21:31   4  ,gatt
09:21:31   5  ,COUNT(pair)
09:21:31   6  ,AVG(g6)
09:21:31   7  FROM modsrc
09:21:31   8  GROUP BY pair,trend,gatt
09:21:31   9  ORDER BY pair,trend,gatt
09:21:31  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_gbp 	-1 nup	      7632 -.00095339
eur_gbp 	-1 up	      2299 .002712551
eur_gbp 	-1		60
eur_gbp 	 1 nup	      7006 -.00100078
eur_gbp 	 1 up	      2629 .002869206
eur_gbp 	 1		12

6 rows selected.

Elapsed: 00:00:00.02
09:21:31 SQL> 
09:21:31 SQL> 
09:21:31 SQL> SELECT pair,COUNT(pair)FROM svm6102 GROUP BY pair;

PAIR	COUNT(PAIR)
------- -----------
eur_gbp       19638

Elapsed: 00:00:00.85
09:21:32 SQL> 
09:21:32 SQL> SELECT pair,COUNT(pair)FROM modsrc GROUP BY pair;

PAIR	COUNT(PAIR)
------- -----------
eur_gbp       19638

Elapsed: 00:00:00.01
09:21:32 SQL> 
09:21:32 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
