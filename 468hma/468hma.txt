
SQL*Plus: Release 11.2.0.1.0 Production on Sun Nov 28 22:31:13 2010

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

22:31:13 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
22:31:13 SQL> 22:31:13 SQL> --
22:31:13 SQL> -- 468hma.sql
22:31:13 SQL> --
22:31:13 SQL> 
22:31:13 SQL> -- I use this script to help me answer the question,
22:31:13 SQL> -- Is moving average slope predictive?
22:31:13 SQL> 
22:31:13 SQL> CREATE OR REPLACE VIEW v468hma10 AS
22:31:13   2  SELECT
22:31:13   3  pair
22:31:13   4  -- ydate is granular down to the hour:
22:31:13   5  ,ydate
22:31:13   6  ,clse
22:31:13   7  -- Use analytic function to get moving average1:
22:31:13   8  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND 1 PRECEDING)ma1_4
22:31:13   9  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING)ma1_6
22:31:13  10  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND 1 PRECEDING)ma1_8
22:31:13  11  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 10 PRECEDING AND 1 PRECEDING)ma1_9
22:31:13  12  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 13 PRECEDING AND 1 PRECEDING)ma1_12
22:31:13  13  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 19 PRECEDING AND 1 PRECEDING)ma1_18
22:31:13  14  -- Use analytic function to get moving average2:
22:31:13  15  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)ma2_4
22:31:13  16  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)ma2_6
22:31:13  17  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)ma2_8
22:31:13  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)ma2_9
22:31:13  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12 PRECEDING AND CURRENT ROW)ma2_12
22:31:13  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 18 PRECEDING AND CURRENT ROW)ma2_18
22:31:13  21  -- Get future ydates
22:31:13  22  ,LEAD(ydate,4,NULL)OVER(PARTITION BY pair ORDER BY ydate) ydate4
22:31:13  23  ,LEAD(ydate,6,NULL)OVER(PARTITION BY pair ORDER BY ydate) ydate6
22:31:13  24  ,LEAD(ydate,8,NULL)OVER(PARTITION BY pair ORDER BY ydate) ydate8
22:31:13  25  -- Relative to current-row, get future closing prices:
22:31:13  26  ,LEAD(clse,4,NULL)OVER(PARTITION BY pair ORDER BY ydate) clse4
22:31:13  27  ,LEAD(clse,6,NULL)OVER(PARTITION BY pair ORDER BY ydate) clse6
22:31:13  28  ,LEAD(clse,8,NULL)OVER(PARTITION BY pair ORDER BY ydate) clse8
22:31:13  29  FROM h15c
22:31:13  30  WHERE ydate >'2009-01-01'
22:31:13  31  -- Prevent divide by zero:
22:31:13  32  AND clse > 0
22:31:13  33  ORDER BY ydate
22:31:13  34  /

View created.

Elapsed: 00:00:00.05
22:31:13 SQL> 
22:31:13 SQL> -- I derive "normalized" slope of moving-averages.
22:31:13 SQL> -- I normalize them to help me compare JPY pairs to all the other pairs:
22:31:13 SQL> CREATE OR REPLACE VIEW v468hma12 AS
22:31:13   2  SELECT
22:31:13   3  pair
22:31:13   4  ,ydate
22:31:13   5  ,(ma2_4 - ma1_4)/ma1_4 ma4_slope
22:31:13   6  ,(ma2_6 - ma1_6)/ma1_6 ma6_slope
22:31:13   7  ,(ma2_8 - ma1_8)/ma1_8 ma8_slope
22:31:13   8  ,(ma2_9 - ma1_9)/ma1_9 ma9_slope
22:31:13   9  ,(ma2_12 - ma1_12)/ma1_12 ma12_slope
22:31:13  10  ,(ma2_18 - ma1_18)/ma1_18 ma18_slope
22:31:13  11  ,ydate4
22:31:13  12  ,ydate6
22:31:13  13  ,ydate8
22:31:13  14  ,clse4
22:31:13  15  ,clse6
22:31:13  16  ,clse8
22:31:13  17  -- I collect normalized gains too:
22:31:13  18  ,(clse4 - clse)/clse npg4
22:31:13  19  ,(clse6 - clse)/clse npg6
22:31:13  20  ,(clse8 - clse)/clse npg8
22:31:13  21  FROM v468hma10
22:31:13  22  ORDER BY ydate
22:31:13  23  /

View created.

Elapsed: 00:00:00.05
22:31:13 SQL> 
22:31:13 SQL> -- Now that I have ma-slopes, I calculate stddev of their distributions:
22:31:13 SQL> 
22:31:13 SQL> CREATE OR REPLACE VIEW v468hma AS
22:31:13   2  SELECT
22:31:13   3  pair
22:31:13   4  ,ydate
22:31:13   5  ,ma4_slope
22:31:13   6  ,ma6_slope
22:31:13   7  ,ma8_slope
22:31:13   8  ,ma9_slope
22:31:13   9  ,ma12_slope
22:31:13  10  ,ma18_slope
22:31:13  11  ,npg4
22:31:13  12  ,npg6
22:31:13  13  ,npg8
22:31:13  14  ,STDDEV(ma4_slope)OVER(PARTITION BY pair)stddev4
22:31:13  15  ,STDDEV(ma6_slope)OVER(PARTITION BY pair)stddev6
22:31:13  16  ,STDDEV(ma8_slope)OVER(PARTITION BY pair)stddev8
22:31:13  17  -- Sign of slope is a useful attribute:
22:31:13  18  ,SIGN(ma4_slope)sgn4
22:31:13  19  ,SIGN(ma6_slope)sgn6
22:31:13  20  ,SIGN(ma8_slope)sgn8
22:31:13  21  FROM v468hma12
22:31:13  22  ORDER BY ydate
22:31:13  23  /

View created.

Elapsed: 00:00:00.05
22:31:13 SQL> 
22:31:13 SQL> -- Now, I have all the data I need.
22:31:13 SQL> -- Start by looking at CORR() between ma-slope and gain:
22:31:13 SQL> 
22:31:13 SQL> -- Is ma_slope correlated with npg4?
22:31:13 SQL> COLUMN pair FORMAT A7
22:31:13 SQL> 
22:31:13 SQL> SELECT
22:31:13   2  pair
22:31:13   3  ,COUNT(npg4)
22:31:13   4  ,ROUND(CORR(ma4_slope,npg4),2)corr4
22:31:13   5  ,ROUND(CORR(ma6_slope,npg4),2)corr6
22:31:13   6  ,ROUND(CORR(ma8_slope,npg4),2)corr8
22:31:13   7  ,ROUND(CORR(ma9_slope,npg4),2)corr9
22:31:13   8  ,ROUND(CORR(ma12_slope,npg4),2)corr12
22:31:13   9  ,ROUND(CORR(ma18_slope,npg4),2)corr18
22:31:13  10  FROM v468hma
22:31:13  11  GROUP BY pair
22:31:13  12  ORDER BY pair
22:31:13  13  /

PAIR    COUNT(NPG4)      CORR4      CORR6      CORR8      CORR9     CORR12     CORR18
------- ----------- ---------- ---------- ---------- ---------- ---------- ----------
aud_usd       11987          0        .01        .01        .01       -.01        .01
eur_aud       11987          0        .01        .01        .01        .01        .03
eur_cad       11987        .01        .01        .01        .01        .01        .03
eur_chf       11987       -.01       -.01       -.01       -.01       -.02          0
eur_gbp       11975       -.01       -.02       -.02       -.02       -.02        .01
eur_jpy       11987       -.03       -.03       -.02       -.02       -.03       -.01
eur_usd       11987        .01        .01        .01        .01       -.01        .01
gbp_aud       11975       -.02       -.01       -.02       -.02       -.01        .01
gbp_cad       11975       -.03       -.03       -.04       -.04       -.03        .01
gbp_chf       11975       -.03       -.03       -.03       -.03       -.02          0
gbp_jpy       11975       -.03       -.03       -.02       -.02       -.02        .01
gbp_usd       11975       -.01       -.01       -.02       -.02       -.03          0
usd_cad       11987       -.01       -.01       -.01       -.02       -.02          0
usd_chf       11987       -.02       -.01       -.01       -.02       -.02       -.02
usd_jpy       11987       -.04       -.05       -.05       -.04       -.03       -.01

15 rows selected.

Elapsed: 00:00:08.90
22:31:22 SQL> 
22:31:22 SQL> -- Is ma_slope correlated with npg6?
22:31:22 SQL> SELECT
22:31:22   2  pair
22:31:22   3  ,COUNT(npg6)
22:31:22   4  ,ROUND(CORR(ma4_slope,npg6),2)corr4
22:31:22   5  ,ROUND(CORR(ma6_slope,npg6),2)corr6
22:31:22   6  ,ROUND(CORR(ma8_slope,npg6),2)corr8
22:31:22   7  ,ROUND(CORR(ma9_slope,npg6),2)corr9
22:31:22   8  ,ROUND(CORR(ma12_slope,npg6),2)corr12
22:31:22   9  ,ROUND(CORR(ma18_slope,npg6),2)corr18
22:31:22  10  FROM v468hma
22:31:22  11  GROUP BY pair
22:31:22  12  ORDER BY pair
22:31:22  13  /

PAIR    COUNT(NPG6)      CORR4      CORR6      CORR8      CORR9     CORR12     CORR18
------- ----------- ---------- ---------- ---------- ---------- ---------- ----------
aud_usd       11985        .01        .01        .01          0          0        .01
eur_aud       11985          0        .01        .01        .01        .02        .04
eur_cad       11985        .01        .01        .01        .01        .01        .05
eur_chf       11985       -.01       -.01       -.01       -.01       -.02        .01
eur_gbp       11973       -.03       -.04       -.03       -.04       -.03        .01
eur_jpy       11985       -.03       -.02       -.02       -.02       -.03       -.01
eur_usd       11985        .02        .02        .01          0       -.01        .02
gbp_aud       11973       -.02       -.02       -.02       -.02          0        .02
gbp_cad       11973       -.04       -.04       -.05       -.05       -.03        .02
gbp_chf       11973       -.04       -.04       -.03       -.03       -.02          0
gbp_jpy       11973       -.03       -.02       -.02       -.01       -.01        .02
gbp_usd       11973       -.01       -.02       -.02       -.03       -.02        .01
usd_cad       11985       -.01       -.01       -.02       -.02       -.02        .01
usd_chf       11985       -.01       -.01       -.02       -.02       -.02       -.02
usd_jpy       11985       -.05       -.05       -.05       -.05       -.03          0

15 rows selected.

Elapsed: 00:00:08.81
22:31:31 SQL> 
22:31:31 SQL> -- Is ma_slope correlated with npg8?
22:31:31 SQL> SELECT
22:31:31   2  pair
22:31:31   3  ,COUNT(npg8)
22:31:31   4  ,ROUND(CORR(ma4_slope,npg8),2)corr4
22:31:31   5  ,ROUND(CORR(ma6_slope,npg8),2)corr6
22:31:31   6  ,ROUND(CORR(ma8_slope,npg8),2)corr8
22:31:31   7  ,ROUND(CORR(ma9_slope,npg8),2)corr9
22:31:31   8  ,ROUND(CORR(ma12_slope,npg8),2)corr12
22:31:31   9  ,ROUND(CORR(ma18_slope,npg8),2)corr18
22:31:31  10  FROM v468hma
22:31:31  11  GROUP BY pair
22:31:31  12  ORDER BY pair
22:31:31  13  /

PAIR    COUNT(NPG8)      CORR4      CORR6      CORR8      CORR9     CORR12     CORR18
------- ----------- ---------- ---------- ---------- ---------- ---------- ----------
aud_usd       11983        .01        .01          0          0          0          0
eur_aud       11983          0        .01        .01        .02        .03        .04
eur_cad       11983        .01        .01        .01        .01        .02        .06
eur_chf       11983       -.01       -.01       -.01       -.01       -.01        .01
eur_gbp       11971       -.03       -.04       -.03       -.03       -.02        .02
eur_jpy       11983       -.02       -.02       -.02       -.02       -.03       -.01
eur_usd       11983        .02        .01          0          0          0        .01
gbp_aud       11971       -.02       -.02       -.01       -.01        .01        .02
gbp_cad       11971       -.04       -.05       -.05       -.04       -.02        .03
gbp_chf       11971       -.03       -.03       -.03       -.02       -.01        .01
gbp_jpy       11971       -.02       -.02       -.01       -.01          0        .03
gbp_usd       11971       -.02       -.02       -.03       -.03       -.02        .02
usd_cad       11983       -.01       -.02       -.02       -.02       -.01          0
usd_chf       11983       -.01       -.01       -.02       -.02       -.02       -.03
usd_jpy       11983       -.05       -.05       -.04       -.04       -.02        .01

15 rows selected.

Elapsed: 00:00:08.95
22:31:40 SQL> 
22:31:40 SQL> -- Now look at very steep ma-slopes and associated gains:
22:31:40 SQL> 
22:31:40 SQL> -- stddev4, npg4:
22:31:40 SQL> SELECT * FROM
22:31:40   2  (
22:31:40   3    SELECT
22:31:40   4    sgn4
22:31:40   5    ,pair
22:31:40   6    ,AVG(npg4)avg_npg4
22:31:40   7    ,CORR(ma4_slope,npg4)crr44
22:31:40   8    ,COUNT(ydate)
22:31:40   9    ,MIN(ydate)
22:31:40  10    ,MAX(ydate)
22:31:40  11    FROM v468hma
22:31:40  12    WHERE ABS(ma4_slope) > 2.1*stddev4
22:31:40  13    GROUP BY sgn4,pair
22:31:40  14    ORDER BY sgn4,pair
22:31:40  15  )
22:31:40  16  WHERE ABS(avg_npg4) > 4 * 0.0002
22:31:40  17  AND sgn4 * avg_npg4 * crr44 > 0
22:31:40  18  AND crr44 < 0
22:31:40  19  /

      SGN4 PAIR      AVG_NPG4      CRR44 COUNT(YDATE) MIN(YDATE)          MAX(YDATE)
---------- ------- ---------- ---------- ------------ ------------------- -------------------
        -1 eur_jpy  .00091481 -.26902861          293 2009-01-01 19:00:00 2010-11-23 18:00:00
        -1 gbp_jpy .001480908 -.26676187          287 2009-01-02 10:00:00 2010-11-23 18:00:00
        -1 usd_jpy  .00109627 -.39181757          232 2009-01-07 10:00:00 2010-09-24 09:00:00

Elapsed: 00:00:07.07
22:31:47 SQL> 
22:31:47 SQL> -- stddev6, npg4:
22:31:47 SQL> SELECT * FROM
22:31:47   2  (
22:31:47   3    SELECT
22:31:47   4    sgn6
22:31:47   5    ,pair
22:31:47   6    ,AVG(npg4)avg_npg4
22:31:47   7    ,CORR(ma6_slope,npg4)crr64
22:31:47   8    ,COUNT(ydate)
22:31:47   9    ,MIN(ydate)
22:31:47  10    ,MAX(ydate)
22:31:47  11    FROM v468hma
22:31:47  12    WHERE ABS(ma6_slope) > 2.1*stddev6
22:31:47  13    GROUP BY sgn6,pair
22:31:47  14    ORDER BY sgn6,pair
22:31:47  15  )
22:31:47  16  WHERE ABS(avg_npg4) > 4 * 0.0002
22:31:47  17  AND sgn6 * avg_npg4 * crr64 > 0
22:31:47  18  AND crr64 < 0
22:31:47  19  /

      SGN6 PAIR      AVG_NPG4      CRR64 COUNT(YDATE) MIN(YDATE)          MAX(YDATE)
---------- ------- ---------- ---------- ------------ ------------------- -------------------
        -1 eur_jpy  .00180601 -.23351643          277 2009-01-01 19:00:00 2010-11-23 19:00:00
        -1 gbp_jpy .001559812 -.29805206          291 2009-01-02 12:00:00 2010-11-23 18:00:00
        -1 usd_jpy .001474104 -.38114654          239 2009-01-06 21:00:00 2010-11-23 14:00:00

Elapsed: 00:00:07.09
22:31:54 SQL> 
22:31:54 SQL> -- stddev8, npg4:
22:31:54 SQL> SELECT * FROM
22:31:54   2  (
22:31:54   3    SELECT
22:31:54   4    sgn8
22:31:54   5    ,pair
22:31:54   6    ,AVG(npg4)avg_npg4
22:31:54   7    ,CORR(ma8_slope,npg4)crr84
22:31:54   8    ,COUNT(ydate)
22:31:54   9    ,MIN(ydate)
22:31:54  10    ,MAX(ydate)
22:31:54  11    FROM v468hma
22:31:54  12    WHERE ABS(ma8_slope) > 2.1*stddev8
22:31:54  13    GROUP BY sgn8,pair
22:31:54  14    ORDER BY sgn8,pair
22:31:54  15  )
22:31:54  16  WHERE ABS(avg_npg4) > 4 * 0.0002
22:31:54  17  AND sgn8 * avg_npg4 * crr84 > 0
22:31:54  18  AND crr84 < 0
22:31:54  19  /

      SGN8 PAIR      AVG_NPG4      CRR84 COUNT(YDATE) MIN(YDATE)          MAX(YDATE)
---------- ------- ---------- ---------- ------------ ------------------- -------------------
        -1 eur_jpy .001104016  -.3042367          291 2009-01-02 02:00:00 2010-11-23 21:00:00
        -1 gbp_jpy .001313614 -.33044542          274 2009-01-08 07:00:00 2010-11-23 17:00:00
        -1 usd_jpy .001616402 -.39312302          227 2009-01-06 23:00:00 2010-10-25 07:00:00

Elapsed: 00:00:07.07
22:32:01 SQL> 
22:32:01 SQL> -- stddev6, npg6:
22:32:01 SQL> SELECT * FROM
22:32:01   2  (
22:32:01   3    SELECT
22:32:01   4    sgn6
22:32:01   5    ,pair
22:32:01   6    ,AVG(npg6)avg_npg6
22:32:01   7    ,CORR(ma6_slope,npg6)crr66
22:32:01   8    ,COUNT(ydate)
22:32:01   9    ,MIN(ydate)
22:32:01  10    ,MAX(ydate)
22:32:01  11    FROM v468hma
22:32:01  12    WHERE ABS(ma6_slope) > 2.1*stddev6
22:32:01  13    GROUP BY sgn6,pair
22:32:01  14    ORDER BY sgn6,pair
22:32:01  15  )
22:32:01  16  WHERE ABS(avg_npg6) > 9 * 0.0001
22:32:01  17  AND sgn6 * avg_npg6 * crr66 > 0
22:32:01  18  /

      SGN6 PAIR      AVG_NPG6      CRR66 COUNT(YDATE) MIN(YDATE)          MAX(YDATE)
---------- ------- ---------- ---------- ------------ ------------------- -------------------
        -1 eur_jpy .001743238 -.30685224          277 2009-01-01 19:00:00 2010-11-23 19:00:00
        -1 gbp_jpy .001943078 -.35207626          291 2009-01-02 12:00:00 2010-11-23 18:00:00
        -1 usd_jpy  .00186287 -.45377992          239 2009-01-06 21:00:00 2010-11-23 14:00:00

Elapsed: 00:00:07.03
22:32:08 SQL> 
22:32:08 SQL> -- stddev8, npg6:
22:32:08 SQL> SELECT * FROM
22:32:08   2  (
22:32:08   3    SELECT
22:32:08   4    sgn8
22:32:08   5    ,pair
22:32:08   6    ,AVG(npg6)avg_npg6
22:32:08   7    ,CORR(ma8_slope,npg6)crr86
22:32:08   8    ,COUNT(ydate)
22:32:08   9    ,MIN(ydate)
22:32:08  10    ,MAX(ydate)
22:32:08  11    FROM v468hma
22:32:08  12    WHERE ABS(ma8_slope) > 2.1*stddev8
22:32:08  13    GROUP BY sgn8,pair
22:32:08  14    ORDER BY sgn8,pair
22:32:08  15  )
22:32:08  16  WHERE ABS(avg_npg6) > 9 * 0.0001
22:32:08  17  AND sgn8 * avg_npg6 * crr86 > 0
22:32:08  18  /

      SGN8 PAIR      AVG_NPG6      CRR86 COUNT(YDATE) MIN(YDATE)          MAX(YDATE)
---------- ------- ---------- ---------- ------------ ------------------- -------------------
        -1 eur_jpy .001418517 -.34814248          291 2009-01-02 02:00:00 2010-11-23 21:00:00
        -1 gbp_jpy .001722639 -.36180618          274 2009-01-08 07:00:00 2010-11-23 17:00:00
        -1 usd_jpy .002199221 -.43354535          227 2009-01-06 23:00:00 2010-10-25 07:00:00
         1 gbp_usd -.00103081 -.13761763          306 2009-01-05 17:00:00 2010-11-04 14:00:00

Elapsed: 00:00:07.11
22:32:15 SQL> 
22:32:15 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
