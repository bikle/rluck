
SQL*Plus: Release 11.2.0.1.0 Production on Sun Feb 6 23:05:33 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

23:05:33 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
23:05:33 SQL> 23:05:33 SQL> --
23:05:33 SQL> -- pair10.sql
23:05:33 SQL> --
23:05:33 SQL> 
23:05:33 SQL> -- Creates views and tables needed by SVM.
23:05:33 SQL> 
23:05:33 SQL> -- Start by sanding off some dukas data so it resembles IB data:
23:05:33 SQL> DROP TABLE di5min24;

Table dropped.

Elapsed: 00:00:01.86
23:05:34 SQL> 
23:05:34 SQL> CREATE TABLE di5min24 COMPRESS AS SELECT * FROM di5min;

Table created.

Elapsed: 00:00:00.76
23:05:35 SQL> 
23:05:35 SQL> DELETE di5min24 WHERE TO_CHAR(ydate,'HH24 MI')IN('22 00','22 05','22 10');

726 rows deleted.

Elapsed: 00:00:00.14
23:05:35 SQL> 
23:05:35 SQL> CREATE OR REPLACE VIEW svm2410 AS
23:05:35   2  SELECT
23:05:35   3  pair
23:05:35   4  ,ydate
23:05:35   5  ,prdate
23:05:35   6  ,rownum rnum -- acts as t in my time-series
23:05:35   7  ,clse
23:05:35   8  -- Derive a bunch of attributes from clse, the latest price:
23:05:35   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
23:05:35  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
23:05:35  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)min24
23:05:35  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*30 PRECEDING AND CURRENT ROW)min30
23:05:35  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*36 PRECEDING AND CURRENT ROW)min36
23:05:35  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*48 PRECEDING AND CURRENT ROW)min48
23:05:35  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*60 PRECEDING AND CURRENT ROW)min60
23:05:35  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*72 PRECEDING AND CURRENT ROW)min72
23:05:35  17  --
23:05:35  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
23:05:35  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
23:05:35  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)avg24
23:05:35  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*30 PRECEDING AND CURRENT ROW)avg30
23:05:35  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*36 PRECEDING AND CURRENT ROW)avg36
23:05:35  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*48 PRECEDING AND CURRENT ROW)avg48
23:05:35  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*60 PRECEDING AND CURRENT ROW)avg60
23:05:35  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*72 PRECEDING AND CURRENT ROW)avg72
23:05:35  26  --
23:05:35  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
23:05:35  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
23:05:35  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)max24
23:05:35  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*30 PRECEDING AND CURRENT ROW)max30
23:05:35  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*36 PRECEDING AND CURRENT ROW)max36
23:05:35  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*48 PRECEDING AND CURRENT ROW)max48
23:05:35  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*60 PRECEDING AND CURRENT ROW)max60
23:05:35  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*72 PRECEDING AND CURRENT ROW)max72
23:05:35  35  --
23:05:35  36  ,LEAD(clse,12*24-3,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld1day
23:05:35  37  ,LEAD(ydate,12*24-3,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld_ydate
23:05:35  38  FROM di5min24 WHERE pair = '&1'
23:05:35  39  AND ydate > sysdate - 200
23:05:35  40  ORDER BY ydate
23:05:35  41  /
old  38: FROM di5min24 WHERE pair = '&1'
new  38: FROM di5min24 WHERE pair = 'usd_cad'

View created.

Elapsed: 00:00:00.05
23:05:35 SQL> 
23:05:35 SQL> -- rpt
23:05:35 SQL> 
23:05:35 SQL> -- I should see that ld_ydate is exactly 1 trading day ahead of ydate:
23:05:35 SQL> 
23:05:35 SQL> SELECT
23:05:35   2  TO_CHAR(ydate,'YYYY-MM-DD HH24:MI Dy')dday
23:05:35   3  ,TO_CHAR(ld_ydate,'YYYY-MM-DD HH24:MI Dy')ldday
23:05:35   4  from svm2410
23:05:35   5  WHERE pair='&1'
23:05:35   6  AND ld_ydate > (SELECT MAX(ld_ydate)-1 from svm2410)
23:05:35   7  ORDER BY ydate
23:05:35   8  /
old   5: WHERE pair='&1'
new   5: WHERE pair='usd_cad'

DDAY		     LDDAY
-------------------- --------------------
2011-02-03 22:15 Thu 2011-02-06 22:15 Sun
2011-02-03 22:20 Thu 2011-02-06 22:20 Sun
2011-02-03 22:25 Thu 2011-02-06 22:25 Sun
2011-02-03 22:30 Thu 2011-02-06 22:30 Sun

Elapsed: 00:00:02.20
23:05:38 SQL> 
23:05:38 SQL> -- I should see that hr 22 is missing 3 rows of data: 00, 05, 10
23:05:38 SQL> SELECT
23:05:38   2  TO_CHAR(ydate,'MI')
23:05:38   3  ,COUNT(TO_CHAR(ydate,'MI'))
23:05:38   4  FROM svm2410
23:05:38   5  WHERE TO_CHAR(ydate,'HH24')='22'
23:05:38   6  AND ydate > sysdate - 30
23:05:38   7  GROUP BY TO_CHAR(ydate,'MI')
23:05:38   8  ORDER BY 0+TO_CHAR(ydate,'MI')
23:05:38   9  /

TO COUNT(TO_CHAR(YDATE,'MI'))
-- --------------------------
15			   21
20			   21
25			   21
30			   21
35			   20
40			   20
45			   20
50			   20
55			   20

9 rows selected.

Elapsed: 00:00:01.12
23:05:39 SQL> 
23:05:39 SQL> -- I should see that other hours have all 12 rows of data
23:05:39 SQL> SELECT
23:05:39   2  TO_CHAR(ydate,'MI')
23:05:39   3  ,COUNT(TO_CHAR(ydate,'MI'))
23:05:39   4  FROM svm2410
23:05:39   5  WHERE TO_CHAR(ydate,'HH24')!='22'
23:05:39   6  AND ydate > sysdate - 30
23:05:39   7  GROUP BY TO_CHAR(ydate,'MI')
23:05:39   8  ORDER BY 0+TO_CHAR(ydate,'MI')
23:05:39   9  /

TO COUNT(TO_CHAR(YDATE,'MI'))
-- --------------------------
00			  460
05			  460
10			  460
15			  460
20			  460
25			  460
30			  460
35			  460
40			  460
45			  460
50			  460
55			  460

12 rows selected.

Elapsed: 00:00:01.10
23:05:40 SQL> 
23:05:40 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
23:05:40 SQL> 
23:05:40 SQL> DROP TABLE svm2412;

Table dropped.

Elapsed: 00:00:00.37
23:05:40 SQL> CREATE TABLE svm2412 COMPRESS AS
23:05:40   2  SELECT
23:05:40   3  pair
23:05:40   4  ,ydate
23:05:40   5  ,prdate
23:05:40   6  ,clse
23:05:40   7  -- g1 is important. I want to predict g1:
23:05:40   8  ,(ld1day - clse)/clse g1
23:05:40   9  ,SIGN(avg24 - LAG(avg24,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
23:05:40  10  -- I want more attributes from the ones I derived above:
23:05:40  11  -- clse relation to moving-min
23:05:40  12  ,clse-min12 cm12
23:05:40  13  ,clse-min18 cm18
23:05:40  14  ,clse-min24 cm24
23:05:40  15  ,clse-min30 cm30
23:05:40  16  ,clse-min36 cm36
23:05:40  17  ,clse-min48 cm48
23:05:40  18  ,clse-min60 cm60
23:05:40  19  ,clse-min72 cm72
23:05:40  20  -- clse relation to moving-avg
23:05:40  21  ,clse-avg12 ca12
23:05:40  22  ,clse-avg18 ca18
23:05:40  23  ,clse-avg24 ca24
23:05:40  24  ,clse-avg30 ca30
23:05:40  25  ,clse-avg36 ca36
23:05:40  26  ,clse-avg48 ca48
23:05:40  27  ,clse-avg60 ca60
23:05:40  28  ,clse-avg72 ca72
23:05:40  29  -- clse relation to moving-max
23:05:40  30  ,clse-max12 cx12
23:05:40  31  ,clse-max18 cx18
23:05:40  32  ,clse-max24 cx24
23:05:40  33  ,clse-max30 cx30
23:05:40  34  ,clse-max36 cx36
23:05:40  35  ,clse-max48 cx48
23:05:40  36  ,clse-max60 cx60
23:05:40  37  ,clse-max72 cx72
23:05:40  38  -- Derive more attributes.
23:05:40  39  -- I want to use CORR() here to help SVM see the shape of the series.
23:05:40  40  -- But COVAR_POP is more stable:
23:05:40  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
23:05:40  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
23:05:40  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
23:05:40  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*30 PRECEDING AND CURRENT ROW)crr30
23:05:40  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*36 PRECEDING AND CURRENT ROW)crr36
23:05:40  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*48 PRECEDING AND CURRENT ROW)crr48
23:05:40  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*60 PRECEDING AND CURRENT ROW)crr60
23:05:40  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*72 PRECEDING AND CURRENT ROW)crr72
23:05:40  49  -- Derive date related attributes:
23:05:40  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
23:05:40  51  ,0+TO_CHAR(ydate,'D')d
23:05:40  52  ,0+TO_CHAR(ydate,'W')w
23:05:40  53  -- mpm stands for minutes-past-midnight:
23:05:40  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
23:05:40  55  -- mph stands for minutes-past-hour:
23:05:40  56  ,0+TO_CHAR(ydate,'MI')mph
23:05:40  57  FROM svm2410
23:05:40  58  -- Protect against divide by zero:
23:05:40  59  WHERE clse > 0
23:05:40  60  ORDER BY ydate
23:05:40  61  /

Table created.

Elapsed: 00:00:02.21
23:05:42 SQL> 
23:05:42 SQL> -- rpt
23:05:42 SQL> 
23:05:42 SQL> SELECT
23:05:42   2  pair
23:05:42   3  ,TO_CHAR(ydate,'D')dnum
23:05:42   4  ,TO_CHAR(ydate,'dy')dday
23:05:42   5  ,AVG(g1)
23:05:42   6  ,COUNT(pair)
23:05:42   7  ,MIN(clse),MAX(clse)
23:05:42   8  ,MIN(ydate),MAX(ydate)
23:05:42   9  FROM svm2412
23:05:42  10  GROUP BY pair,TO_CHAR(ydate,'D'),TO_CHAR(ydate,'dy')
23:05:42  11  ORDER BY pair,TO_CHAR(ydate,'D'),TO_CHAR(ydate,'dy')
23:05:42  12  /

PAIR	D DDA	 AVG(G1) COUNT(PAIR)  MIN(CLSE)  MAX(CLSE) MIN(YDATE)	       MAX(YDATE)
------- - --- ---------- ----------- ---------- ---------- ------------------- -------------------
usd_cad 1 sun .000079974	 363	 .98685     1.0191 2010-10-31 20:55:00 2011-02-06 22:30:00
usd_cad 2 mon .000139787	3989 .985875001     1.0249 2010-11-01 00:00:00 2011-01-31 23:55:00
usd_cad 3 tue  -.0005026	3957	.983925   1.028075 2010-11-02 00:00:00 2011-02-01 23:55:00
usd_cad 4 wed -.00189155	3960	.985175      1.027 2010-11-03 00:00:00 2011-02-02 23:55:00
usd_cad 5 thu .000323149	3980	.985775     1.0234 2010-11-04 00:00:00 2011-02-03 23:55:00
usd_cad 6 fri -.00001378	3690	 .98355      1.024 2010-11-05 00:00:00 2011-02-04 21:55:00

6 rows selected.

Elapsed: 00:00:00.06
23:05:42 SQL> 
23:05:42 SQL> -- Prepare for derivation of NTILE based params:
23:05:42 SQL> 
23:05:42 SQL> DROP TABLE svm2414;

Table dropped.

Elapsed: 00:00:00.30
23:05:43 SQL> CREATE TABLE svm2414 COMPRESS AS
23:05:43   2  SELECT
23:05:43   3  pair
23:05:43   4  ,ydate
23:05:43   5  ,prdate
23:05:43   6  ,clse
23:05:43   7  ,g1
23:05:43   8  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1>0.0020 THEN'up'ELSE'nup'END gatt
23:05:43   9  ,CASE WHEN g1 IS NULL THEN NULL WHEN g1<-0.0020 THEN'up'ELSE'nup'END gattn
23:05:43  10  ,CASE WHEN trend IS NULL THEN 1
23:05:43  11  	    WHEN trend =0      THEN 1
23:05:43  12  	    ELSE trend END trend
23:05:43  13  ,cm12
23:05:43  14  ,cm18
23:05:43  15  ,cm24
23:05:43  16  ,cm30
23:05:43  17  ,cm36
23:05:43  18  ,cm48
23:05:43  19  ,cm60
23:05:43  20  ,cm72
23:05:43  21  --
23:05:43  22  ,ca12
23:05:43  23  ,ca18
23:05:43  24  ,ca24
23:05:43  25  ,ca30
23:05:43  26  ,ca36
23:05:43  27  ,ca48
23:05:43  28  ,ca60
23:05:43  29  ,ca72
23:05:43  30  --
23:05:43  31  ,cx12
23:05:43  32  ,cx18
23:05:43  33  ,cx24
23:05:43  34  ,cx30
23:05:43  35  ,cx36
23:05:43  36  ,cx48
23:05:43  37  ,cx60
23:05:43  38  ,cx72
23:05:43  39  --
23:05:43  40  ,crr12
23:05:43  41  ,crr18
23:05:43  42  ,crr24
23:05:43  43  ,crr30
23:05:43  44  ,crr36
23:05:43  45  ,crr48
23:05:43  46  ,crr60
23:05:43  47  ,crr72
23:05:43  48  --
23:05:43  49  ,hh
23:05:43  50  ,d
23:05:43  51  ,w
23:05:43  52  ,mpm
23:05:43  53  ,mph
23:05:43  54  FROM svm2412
23:05:43  55  ORDER BY ydate
23:05:43  56  /

Table created.

Elapsed: 00:00:00.42
23:05:43 SQL> 
23:05:43 SQL> -- rpt
23:05:43 SQL> 
23:05:43 SQL> SELECT
23:05:43   2  pair
23:05:43   3  ,trend
23:05:43   4  ,gatt
23:05:43   5  ,d
23:05:43   6  ,hh
23:05:43   7  ,COUNT(pair)
23:05:43   8  ,AVG(g1)
23:05:43   9  FROM svm2414
23:05:43  10  GROUP BY pair,trend,gatt,d,hh
23:05:43  11  ORDER BY AVG(g1),pair,trend,gatt,d,hh
23:05:43  12  -- 500 rows
23:05:43  13  
23:05:43 SQL> -- Derive NTILE based params:
23:05:43 SQL> 
23:05:43 SQL> DROP TABLE svm2416;

Table dropped.

Elapsed: 00:00:00.16
23:05:43 SQL> CREATE TABLE svm2416 COMPRESS AS
23:05:43   2  SELECT
23:05:43   3  pair
23:05:43   4  ,ydate
23:05:43   5  ,prdate
23:05:43   6  ,clse
23:05:43   7  ,g1
23:05:43   8  ,gatt
23:05:43   9  ,gattn
23:05:43  10  ,trend
23:05:43  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12)att00
23:05:43  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18)att01
23:05:43  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm24)att02
23:05:43  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm30)att03
23:05:43  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm36)att04
23:05:43  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm48)att05
23:05:43  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm60)att06
23:05:43  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm72)att07
23:05:43  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12)att08
23:05:43  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18)att09
23:05:43  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca24)att10
23:05:43  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca30)att11
23:05:43  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca36)att12
23:05:43  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca48)att13
23:05:43  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca60)att14
23:05:43  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca72)att15
23:05:43  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12)att16
23:05:43  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18)att17
23:05:43  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx24)att18
23:05:43  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx30)att19
23:05:43  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx36)att20
23:05:43  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx48)att21
23:05:43  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx60)att22
23:05:43  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx72)att23
23:05:43  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att24
23:05:43  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att25
23:05:43  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr24)att26
23:05:43  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr30)att27
23:05:43  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr36)att28
23:05:43  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr48)att29
23:05:43  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr60)att30
23:05:43  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr72)att31
23:05:43  43  ,hh  att32
23:05:43  44  ,d   att33
23:05:43  45  ,w   att34
23:05:43  46  ,mpm att35
23:05:43  47  ,mph att36
23:05:43  48  ,trend att37
23:05:43  49  FROM svm2414
23:05:43  50  ORDER BY ydate
23:05:43  51  /

Table created.

Elapsed: 00:00:05.01
23:05:48 SQL> 
23:05:48 SQL> -- rpt
23:05:48 SQL> 
23:05:48 SQL> SELECT
23:05:48   2  pair
23:05:48   3  ,trend
23:05:48   4  ,gatt
23:05:48   5  ,att33 daynum
23:05:48   6  ,COUNT(pair)
23:05:48   7  ,AVG(g1)
23:05:48   8  FROM svm2416
23:05:48   9  GROUP BY pair,trend,gatt,att33
23:05:48  10  ORDER BY pair,trend,gatt,att33
23:05:48  11  /

PAIR	     TREND GAT	   DAYNUM COUNT(PAIR)	 AVG(G1)
------- ---------- --- ---------- ----------- ----------
usd_cad 	-1 nup		1	  166 -.00093853
usd_cad 	-1 nup		2	 1382 -.00244263
usd_cad 	-1 nup		3	 1426 -.00310979
usd_cad 	-1 nup		4	 1898 -.00274752
usd_cad 	-1 nup		5	 1829 -.00216943
usd_cad 	-1 nup		6	 1264 -.00158079
usd_cad 	-1 up		1	   61 .002775948
usd_cad 	-1 up		2	  851 .006168567
usd_cad 	-1 up		3	  698 .006797846
usd_cad 	-1 up		4	  305 .003098508
usd_cad 	-1 up		5	  987  .00585744
usd_cad 	-1 up		6	  365 .004556009
usd_cad 	-1		1	    4
usd_cad 	-1		6	  114
usd_cad 	 1 nup		1	  101 -.00109953
usd_cad 	 1 nup		2	 1201 -.00326566
usd_cad 	 1 nup		3	 1326 -.00355081
usd_cad 	 1 nup		4	 1484 -.00330456
usd_cad 	 1 nup		5	  846 -.00261941
usd_cad 	 1 nup		6	 1155 -.00264996
usd_cad 	 1 up		1	   31 .004071819
usd_cad 	 1 up		2	  555 .004695357
usd_cad 	 1 up		3	  507 .004751999
usd_cad 	 1 up		4	  273 .006165447
usd_cad 	 1 up		5	  301 .005592177
usd_cad 	 1 up		6	  642 .005215989
usd_cad 	 1		5	   17
usd_cad 	 1		6	  150

28 rows selected.

Elapsed: 00:00:00.03
23:05:48 SQL> 
23:05:48 SQL> -- Join scores and gains:
23:05:48 SQL> -- Comment out feedback related syntax:
23:05:48 SQL> --
23:05:48 SQL> -- CREATE OR REPLACE VIEW sc12 AS
23:05:48 SQL> -- SELECT
23:05:48 SQL> -- m.pair
23:05:48 SQL> -- ,m.ydate
23:05:48 SQL> -- ,m.prdate
23:05:48 SQL> -- ,l.score score_long
23:05:48 SQL> -- ,s.score score_short
23:05:48 SQL> -- ,ROUND(l.score,1) rscore_long
23:05:48 SQL> -- ,ROUND(s.score,1) rscore_short
23:05:48 SQL> -- ,m.g1
23:05:48 SQL> -- FROM svm24scores l,svm24scores s,svm2416 m
23:05:48 SQL> -- WHERE l.targ='gatt'
23:05:48 SQL> -- AND	 s.targ='gattn'
23:05:48 SQL> -- AND l.prdate = s.prdate
23:05:48 SQL> -- AND l.prdate = m.prdate
23:05:48 SQL> -- -- Speed things up:
23:05:48 SQL> -- AND l.pair = '&1'
23:05:48 SQL> -- AND s.pair = '&1'
23:05:48 SQL> -- /
23:05:48 SQL> --
23:05:48 SQL> -- -- rpt
23:05:48 SQL> -- SELECT pair,rscore_long,AVG(g1),MIN(ydate),COUNT(pair),MAX(ydate)FROM sc12
23:05:48 SQL> -- GROUP BY pair,rscore_long
23:05:48 SQL> -- ORDER BY pair,rscore_long
23:05:48 SQL> -- /
23:05:48 SQL> --
23:05:48 SQL> -- DROP TABLE score_corr;
23:05:48 SQL> --
23:05:48 SQL> -- CREATE TABLE score_corr COMPRESS AS
23:05:48 SQL> -- SELECT
23:05:48 SQL> -- pair
23:05:48 SQL> -- -- ,ydate
23:05:48 SQL> -- ,prdate
23:05:48 SQL> -- -- Find corr() tween score and g1 over 11 day period:
23:05:48 SQL> -- ,CORR((score_long - score_short),g1)
23:05:48 SQL> --   OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24*5 PRECEDING AND CURRENT ROW)sc_corr
23:05:48 SQL> -- FROM sc12
23:05:48 SQL> -- /
23:05:48 SQL> --
23:05:48 SQL> -- -- rpt
23:05:48 SQL> --
23:05:48 SQL> -- SELECT pair,AVG(sc_corr),COUNT(sc_corr)FROM score_corr GROUP BY pair;
23:05:48 SQL> 
23:05:48 SQL> DROP TABLE modsrc24;

Table dropped.

Elapsed: 00:00:00.41
23:05:49 SQL> 
23:05:49 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.34
23:05:49 SQL> 
23:05:49 SQL> CREATE TABLE modsrc24 COMPRESS AS
23:05:49   2  SELECT
23:05:49   3  pair
23:05:49   4  ,ydate
23:05:49   5  ,prdate
23:05:49   6  ,trend
23:05:49   7  ,g1
23:05:49   8  ,gatt
23:05:49   9  ,gattn
23:05:49  10  ,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 12*24*30 PRECEDING AND CURRENT ROW)g00
23:05:49  11  ,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 12*24*30 PRECEDING AND CURRENT ROW)g01
23:05:49  12  ,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 12*24*30 PRECEDING AND CURRENT ROW)g02
23:05:49  13  ,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 12*24*30 PRECEDING AND CURRENT ROW)g03
23:05:49  14  ,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 12*24*30 PRECEDING AND CURRENT ROW)g04
23:05:49  15  ,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 12*24*30 PRECEDING AND CURRENT ROW)g05
23:05:49  16  ,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 12*24*30 PRECEDING AND CURRENT ROW)g06
23:05:49  17  ,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 12*24*30 PRECEDING AND CURRENT ROW)g07
23:05:49  18  ,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 12*24*30 PRECEDING AND CURRENT ROW)g08
23:05:49  19  ,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 12*24*30 PRECEDING AND CURRENT ROW)g09
23:05:49  20  ,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 12*24*30 PRECEDING AND CURRENT ROW)g10
23:05:49  21  ,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 12*24*30 PRECEDING AND CURRENT ROW)g11
23:05:49  22  ,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 12*24*30 PRECEDING AND CURRENT ROW)g12
23:05:49  23  ,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 12*24*30 PRECEDING AND CURRENT ROW)g13
23:05:49  24  ,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 12*24*30 PRECEDING AND CURRENT ROW)g14
23:05:49  25  ,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 12*24*30 PRECEDING AND CURRENT ROW)g15
23:05:49  26  ,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 12*24*30 PRECEDING AND CURRENT ROW)g16
23:05:49  27  ,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 12*24*30 PRECEDING AND CURRENT ROW)g17
23:05:49  28  ,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 12*24*30 PRECEDING AND CURRENT ROW)g18
23:05:49  29  ,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 12*24*30 PRECEDING AND CURRENT ROW)g19
23:05:49  30  ,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 12*24*30 PRECEDING AND CURRENT ROW)g20
23:05:49  31  ,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 12*24*30 PRECEDING AND CURRENT ROW)g21
23:05:49  32  ,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 12*24*30 PRECEDING AND CURRENT ROW)g22
23:05:49  33  ,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 12*24*30 PRECEDING AND CURRENT ROW)g23
23:05:49  34  ,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 12*24*30 PRECEDING AND CURRENT ROW)g24
23:05:49  35  ,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 12*24*30 PRECEDING AND CURRENT ROW)g25
23:05:49  36  ,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*24*30 PRECEDING AND CURRENT ROW)g26
23:05:49  37  ,SUM(g1)OVER(PARTITION BY trend,att27 ORDER BY ydate ROWS BETWEEN 12*24*30 PRECEDING AND CURRENT ROW)g27
23:05:49  38  ,SUM(g1)OVER(PARTITION BY trend,att28 ORDER BY ydate ROWS BETWEEN 12*24*30 PRECEDING AND CURRENT ROW)g28
23:05:49  39  ,SUM(g1)OVER(PARTITION BY trend,att29 ORDER BY ydate ROWS BETWEEN 12*24*30 PRECEDING AND CURRENT ROW)g29
23:05:49  40  ,SUM(g1)OVER(PARTITION BY trend,att30 ORDER BY ydate ROWS BETWEEN 12*24*30 PRECEDING AND CURRENT ROW)g30
23:05:49  41  ,SUM(g1)OVER(PARTITION BY trend,att31 ORDER BY ydate ROWS BETWEEN 12*24*30 PRECEDING AND CURRENT ROW)g31
23:05:49  42  ,SUM(g1)OVER(PARTITION BY trend,att32 ORDER BY ydate ROWS BETWEEN 12*24*30 PRECEDING AND CURRENT ROW)g32
23:05:49  43  ,SUM(g1)OVER(PARTITION BY trend,att33 ORDER BY ydate ROWS BETWEEN 12*24*30 PRECEDING AND CURRENT ROW)g33
23:05:49  44  ,SUM(g1)OVER(PARTITION BY trend,att34 ORDER BY ydate ROWS BETWEEN 12*24*30 PRECEDING AND CURRENT ROW)g34
23:05:49  45  ,SUM(g1)OVER(PARTITION BY trend,att35 ORDER BY ydate ROWS BETWEEN 12*24*30 PRECEDING AND CURRENT ROW)g35
23:05:49  46  ,SUM(g1)OVER(PARTITION BY trend,att36 ORDER BY ydate ROWS BETWEEN 12*24*30 PRECEDING AND CURRENT ROW)g36
23:05:49  47  -- Add extra goodness attributes related to trend:
23:05:49  48  ,SUM(g1)OVER(PARTITION BY trend ORDER BY ydate ROWS BETWEEN 12*24*40 PRECEDING AND CURRENT ROW)g37
23:05:49  49  ,SUM(g1)OVER(PARTITION BY trend ORDER BY ydate ROWS BETWEEN 12*24*30 PRECEDING AND CURRENT ROW)g38
23:05:49  50  ,SUM(g1)OVER(PARTITION BY trend ORDER BY ydate ROWS BETWEEN 12*24*20 PRECEDING AND CURRENT ROW)g39
23:05:49  51  ,SUM(g1)OVER(PARTITION BY trend ORDER BY ydate ROWS BETWEEN 12*24*10 PRECEDING AND CURRENT ROW)g40
23:05:49  52  ,SUM(g1)OVER(PARTITION BY trend ORDER BY ydate ROWS BETWEEN 12*24*5  PRECEDING AND CURRENT ROW)g41
23:05:49  53  -- Recent CORR()tween scores and gains:
23:05:49  54  FROM svm2416
23:05:49  55  /
