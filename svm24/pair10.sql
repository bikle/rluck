--
-- pair10.sql
--

-- Creates views and tables needed by SVM.

CREATE OR REPLACE VIEW svm2410 AS
SELECT
pair
,ydate
,prdate
,rownum rnum -- acts as t in my time-series
,clse
-- Derive a bunch of attributes from clse, the latest price:
,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)min24
,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*30 PRECEDING AND CURRENT ROW)min30
,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*36 PRECEDING AND CURRENT ROW)min36
,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*48 PRECEDING AND CURRENT ROW)min48
,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*60 PRECEDING AND CURRENT ROW)min60
,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*72 PRECEDING AND CURRENT ROW)min72
--
,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)avg24
,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*30 PRECEDING AND CURRENT ROW)avg30
,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*36 PRECEDING AND CURRENT ROW)avg36
,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*48 PRECEDING AND CURRENT ROW)avg48
,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*60 PRECEDING AND CURRENT ROW)avg60
,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*72 PRECEDING AND CURRENT ROW)avg72
--
,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)max24
,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*30 PRECEDING AND CURRENT ROW)max30
,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*36 PRECEDING AND CURRENT ROW)max36
,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*48 PRECEDING AND CURRENT ROW)max48
,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*60 PRECEDING AND CURRENT ROW)max60
,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*72 PRECEDING AND CURRENT ROW)max72
--
,LEAD(clse,12*24-3,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld1day
,LEAD(ydate,12*24-3,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld_ydate
FROM di5min WHERE pair = '&1'
-- AND ydate > sysdate - 200
AND ydate > sysdate - 30
ORDER BY ydate
/

-- rpt

SELECT MAX(ld_ydate)from svm2410 WHERE TO_CHAR(ld_ydate,'dy HH24 MI')='thu 00 00';

SELECT ydate,ld_ydate FROM svm2410
WHERE pair='&1'
AND TRUNC(ydate)= '2011-01-19'
ORDER BY ydate
/

exit

SELECT TO_CHAR(ydate,'dy'),MIN(ld_ydate - ydate)FROM svm2410
GROUP BY TO_CHAR(ydate,'dy')
/

SELECT TO_CHAR(ydate,'dy'),(ld_ydate - ydate),COUNT(ld_ydate - ydate)
FROM svm2410
WHERE ydate > '2011-01-01'
GROUP BY TO_CHAR(ydate,'dy'),(ld_ydate - ydate)
ORDER BY TO_CHAR(ydate,'dy'),(ld_ydate - ydate)
/

SELECT
TO_CHAR(ydate,'MI')
,COUNT(TO_CHAR(ydate,'MI'))
FROM svm2410
WHERE TO_CHAR(ydate,'HH24')='22'
AND ydate > '2011-01-01'
GROUP BY TO_CHAR(ydate,'MI')
ORDER BY 0+TO_CHAR(ydate,'MI')
/

SELECT
TO_CHAR(ydate,'MI')
,COUNT(TO_CHAR(ydate,'MI'))
FROM svm2410
WHERE TO_CHAR(ydate,'HH24')='23'
AND ydate > '2011-01-01'
GROUP BY TO_CHAR(ydate,'MI')
ORDER BY 0+TO_CHAR(ydate,'MI')
/

exit

SELECT
pair
,COUNT(pair)
FROM di5min
GROUP BY pair
/

SELECT
pair
,COUNT(pair)
,MIN(clse),MAX(clse)
,MIN(avg24),MAX(avg24)
,MIN(ydate),MAX(ydate)
FROM svm2410
GROUP BY pair
/

-- Derive trend, clse-relations, moving correlation of clse, and date related params:
DROP TABLE svm2412;
CREATE TABLE svm2412 COMPRESS AS
SELECT
pair
,ydate
,prdate
,clse
-- g1 is important. I want to predict g1:
,(ld1day - clse)/clse g1
,SIGN(avg24 - LAG(avg24,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
-- I want more attributes from the ones I derived above:
-- clse relation to moving-min
,clse-min12 cm12
,clse-min18 cm18
,clse-min24 cm24
,clse-min30 cm30
,clse-min36 cm36
,clse-min48 cm48
,clse-min60 cm60
,clse-min72 cm72
-- clse relation to moving-avg
,clse-avg12 ca12
,clse-avg18 ca18
,clse-avg24 ca24
,clse-avg30 ca30
,clse-avg36 ca36
,clse-avg48 ca48
,clse-avg60 ca60
,clse-avg72 ca72
-- clse relation to moving-max
,clse-max12 cx12
,clse-max18 cx18
,clse-max24 cx24
,clse-max30 cx30
,clse-max36 cx36
,clse-max48 cx48
,clse-max60 cx60
,clse-max72 cx72
-- Derive more attributes.
-- I want to use CORR() here to help SVM see the shape of the series.
-- But COVAR_POP is more stable:
,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*30 PRECEDING AND CURRENT ROW)crr30
,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*36 PRECEDING AND CURRENT ROW)crr36
,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*48 PRECEDING AND CURRENT ROW)crr48
,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*60 PRECEDING AND CURRENT ROW)crr60
,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*72 PRECEDING AND CURRENT ROW)crr72
-- Derive date related attributes:
,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
,0+TO_CHAR(ydate,'D')d
,0+TO_CHAR(ydate,'W')w
-- mpm stands for minutes-past-midnight:
,ROUND( (ydate - trunc(ydate))*24*60 )mpm
-- mph stands for minutes-past-hour:
,0+TO_CHAR(ydate,'MI')mph
FROM svm2410
-- Protect against divide by zero:
WHERE clse > 0
ORDER BY ydate
/

-- rpt

SELECT
pair
,TO_CHAR(ydate,'D')dnum
,TO_CHAR(ydate,'dy')dday
,AVG(g1)
,COUNT(pair)
,MIN(clse),MAX(clse)
,MIN(ydate),MAX(ydate)
FROM svm2412
GROUP BY pair,TO_CHAR(ydate,'D'),TO_CHAR(ydate,'dy')
ORDER BY pair,TO_CHAR(ydate,'D'),TO_CHAR(ydate,'dy')
/

-- Prepare for derivation of NTILE based params:

DROP TABLE svm2414;
CREATE TABLE svm2414 COMPRESS AS
SELECT
pair
,ydate
,prdate
,clse
,g1
,CASE WHEN g1 IS NULL THEN NULL WHEN g1>0.0020 THEN'up'ELSE'nup'END gatt
,CASE WHEN g1 IS NULL THEN NULL WHEN g1<-0.0020 THEN'up'ELSE'nup'END gattn
,CASE WHEN trend IS NULL THEN 1
      WHEN trend =0      THEN 1
      ELSE trend END trend
,cm12
,cm18
,cm24
,cm30
,cm36
,cm48
,cm60
,cm72
-- 
,ca12
,ca18
,ca24
,ca30
,ca36
,ca48
,ca60
,ca72
--
,cx12
,cx18
,cx24
,cx30
,cx36
,cx48
,cx60
,cx72
--
,crr12
,crr18
,crr24
,crr30
,crr36
,crr48
,crr60
,crr72
--
,hh
,d
,w
,mpm
,mph
FROM svm2412
ORDER BY ydate
/

-- rpt

SELECT
pair
,trend
,gatt
,d
,hh
,COUNT(pair)
,AVG(g1)
FROM svm2414
GROUP BY pair,trend,gatt,d,hh
ORDER BY AVG(g1),pair,trend,gatt,d,hh
-- 500 rows

-- Derive NTILE based params:

DROP TABLE svm2416;
CREATE TABLE svm2416 COMPRESS AS
SELECT
pair
,ydate
,prdate
,clse
,g1
,gatt
,gattn
,trend
,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12)att00
,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18)att01
,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm24)att02
,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm30)att03
,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm36)att04
,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm48)att05
,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm60)att06
,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm72)att07
,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12)att08
,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18)att09
,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca24)att10
,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca30)att11
,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca36)att12
,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca48)att13
,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca60)att14
,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca72)att15
,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12)att16
,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18)att17
,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx24)att18
,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx30)att19
,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx36)att20
,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx48)att21
,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx60)att22
,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx72)att23
,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att24
,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att25
,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr24)att26
,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr30)att27
,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr36)att28
,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr48)att29
,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr60)att30
,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr72)att31
,hh  att32
,d   att33
,w   att34
,mpm att35
,mph att36
,trend att37
FROM svm2414
ORDER BY ydate
/

-- rpt

SELECT
pair
,trend
,gatt
,att33 daynum
,COUNT(pair)
,AVG(g1)
FROM svm2416
GROUP BY pair,trend,gatt,att33
ORDER BY pair,trend,gatt,att33
/

-- Join scores and gains:

CREATE OR REPLACE VIEW sc12 AS
SELECT
m.pair
,m.ydate
,m.prdate
,l.score score_long
,s.score score_short
,ROUND(l.score,1) rscore_long
,ROUND(s.score,1) rscore_short
,m.g1
FROM svm24scores l,svm24scores s,svm2416 m
WHERE l.targ='gatt'
AND   s.targ='gattn'
AND l.prdate = s.prdate
AND l.prdate = m.prdate
-- Speed things up:
AND l.pair = '&1'
AND s.pair = '&1'
/

-- rpt
SELECT pair,rscore_long,AVG(g1),MIN(ydate),COUNT(pair),MAX(ydate)FROM sc12
GROUP BY pair,rscore_long
ORDER BY pair,rscore_long
/

DROP TABLE score_corr;

CREATE TABLE score_corr COMPRESS AS
SELECT
pair
-- ,ydate
,prdate
-- Find corr() tween score and g1 over 11 day period:
,CORR((score_long - score_short),g1)
  OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24*11 PRECEDING AND CURRENT ROW)sc_corr
FROM sc12
/

-- rpt

SELECT pair,AVG(sc_corr),COUNT(sc_corr)FROM score_corr GROUP BY pair;

exit

DROP TABLE modsrc24;

PURGE RECYCLEBIN;

CREATE TABLE modsrc24 COMPRESS AS
SELECT
s.pair       
,ydate      
,s.prdate     
,trend      
,g1
,gatt
,gattn
,SUM(g1)OVER(PARTITION BY trend,att00 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g00
,SUM(g1)OVER(PARTITION BY trend,att01 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g01
,SUM(g1)OVER(PARTITION BY trend,att02 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g02
,SUM(g1)OVER(PARTITION BY trend,att03 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g03
,SUM(g1)OVER(PARTITION BY trend,att04 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g04
,SUM(g1)OVER(PARTITION BY trend,att05 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g05
,SUM(g1)OVER(PARTITION BY trend,att06 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g06
,SUM(g1)OVER(PARTITION BY trend,att07 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g07
,SUM(g1)OVER(PARTITION BY trend,att08 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g08
,SUM(g1)OVER(PARTITION BY trend,att09 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g09
,SUM(g1)OVER(PARTITION BY trend,att10 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g10
,SUM(g1)OVER(PARTITION BY trend,att11 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g11
,SUM(g1)OVER(PARTITION BY trend,att12 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g12
,SUM(g1)OVER(PARTITION BY trend,att13 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g13
,SUM(g1)OVER(PARTITION BY trend,att14 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g14
,SUM(g1)OVER(PARTITION BY trend,att15 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g15
,SUM(g1)OVER(PARTITION BY trend,att16 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g16
,SUM(g1)OVER(PARTITION BY trend,att17 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g17
,SUM(g1)OVER(PARTITION BY trend,att18 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g18
,SUM(g1)OVER(PARTITION BY trend,att19 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g19
,SUM(g1)OVER(PARTITION BY trend,att20 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g20
,SUM(g1)OVER(PARTITION BY trend,att21 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g21
,SUM(g1)OVER(PARTITION BY trend,att22 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g22
,SUM(g1)OVER(PARTITION BY trend,att23 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g23
,SUM(g1)OVER(PARTITION BY trend,att24 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g24
,SUM(g1)OVER(PARTITION BY trend,att25 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g25
,SUM(g1)OVER(PARTITION BY trend,att26 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g26
,SUM(g1)OVER(PARTITION BY trend,att27 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g27
,SUM(g1)OVER(PARTITION BY trend,att28 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g28
,SUM(g1)OVER(PARTITION BY trend,att29 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g29
,SUM(g1)OVER(PARTITION BY trend,att30 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g30
,SUM(g1)OVER(PARTITION BY trend,att31 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g31
,SUM(g1)OVER(PARTITION BY trend,att32 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g32
,SUM(g1)OVER(PARTITION BY trend,att33 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g33
,SUM(g1)OVER(PARTITION BY trend,att34 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g34
,SUM(g1)OVER(PARTITION BY trend,att35 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g35
,SUM(g1)OVER(PARTITION BY trend,att36 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g36
,SUM(g1)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*22*30 PRECEDING AND CURRENT ROW)g37
,SUM(g1)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*40 PRECEDING AND CURRENT ROW)g38
,SUM(g1)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*30 PRECEDING AND CURRENT ROW)g39
,SUM(g1)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)g40
,SUM(g1)OVER(PARTITION BY trend,att37 ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)g41
-- Recent CORR()tween scores and gains:
,NVL(sc_corr,0)sc_corr
FROM svm2416 s,score_corr c
WHERE s.prdate = c.prdate(+)
/

ANALYZE TABLE modsrc24 COMPUTE STATISTICS;

-- rpt

SELECT
pair
,trend
,gatt
,COUNT(pair)
,AVG(g1)
FROM modsrc24
GROUP BY pair,trend,gatt
ORDER BY pair,trend,gatt
/


SELECT pair,COUNT(pair)FROM svm2410 GROUP BY pair;

SELECT pair,COUNT(pair)FROM modsrc24 GROUP BY pair;

exit
