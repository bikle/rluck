
SQL*Plus: Release 11.2.0.1.0 Production on Wed Nov 3 01:18:58 2010

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

01:18:58 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD';

Session altered.

Elapsed: 00:00:00.00
01:18:58 SQL> 01:18:58 SQL> --
01:18:58 SQL> -- qry_wjw.sql
01:18:58 SQL> --
01:18:58 SQL> 
01:18:58 SQL> -- I use this script to look for correlation trends for a given week
01:18:58 SQL> -- in a quarter for a given currency pair.
01:18:58 SQL> 
01:18:58 SQL> -- This script depends on cr_wjw.sql to create a table named wjw which
01:18:58 SQL> -- contains weekly gains and a variety of derived data.
01:18:58 SQL> 
01:18:58 SQL> -- I can start week of quarter (woq) on any day of the week.
01:18:58 SQL> -- If I start woq on a Tues, then woq_start_day is 2.
01:18:58 SQL> 
01:18:58 SQL> -- Start by comparing gains before 2007 to gains after 2007:
01:18:58 SQL> CREATE OR REPLACE VIEW qwjw2007 AS
01:18:58   2  SELECT
01:18:58   3  a.pair
01:18:58   4  ,a.woq,b.qtr
01:18:58   5  ,a.day_of_week woq_start_day
01:18:58   6  ,AVG(a.wgain)avg_a
01:18:58   7  ,AVG(b.wgain)avg_b
01:18:58   8  ,COUNT(a.pair)row_cnt
01:18:58   9  FROM
01:18:58  10  	(SELECT pair,woq,qtr,day_of_week,wgain FROM wjw WHERE ydate1<'2007-01-01')a
01:18:58  11   ,(SELECT pair,woq,qtr,day_of_week,wgain FROM wjw WHERE ydate1>'2007-01-01')b
01:18:58  12  WHERE a.pair = b.pair AND a.woq = b.woq
01:18:58  13  GROUP BY a.pair,a.woq,b.qtr,a.day_of_week
01:18:58  14  -- If the pair count is low, it is noise:
01:18:58  15  HAVING COUNT(a.pair)> 123
01:18:58  16  ORDER BY a.pair,a.woq,b.qtr,a.day_of_week
01:18:58  17  /

View created.

Elapsed: 00:00:00.06
01:18:58 SQL> 
01:18:58 SQL> -- 2008 is next:
01:18:58 SQL> CREATE OR REPLACE VIEW qwjw2008 AS
01:18:58   2  SELECT
01:18:58   3  a.pair
01:18:58   4  ,a.woq,b.qtr
01:18:58   5  ,a.day_of_week woq_start_day
01:18:58   6  ,AVG(a.wgain)avg_a
01:18:58   7  ,AVG(b.wgain)avg_b
01:18:58   8  ,COUNT(a.pair)row_cnt
01:18:58   9  FROM
01:18:58  10  	(SELECT pair,woq,qtr,day_of_week,wgain FROM wjw WHERE ydate1<'2008-01-01')a
01:18:58  11   ,(SELECT pair,woq,qtr,day_of_week,wgain FROM wjw WHERE ydate1>'2008-01-01')b
01:18:58  12  WHERE a.pair = b.pair AND a.woq = b.woq
01:18:58  13  GROUP BY a.pair,a.woq,b.qtr,a.day_of_week
01:18:58  14  -- If the pair count is low, it is noise:
01:18:58  15  HAVING COUNT(a.pair)> 123
01:18:58  16  ORDER BY a.pair,a.woq,b.qtr,a.day_of_week
01:18:58  17  /

View created.

Elapsed: 00:00:00.07
01:18:58 SQL> 
01:18:58 SQL> -- 2009 is next
01:18:58 SQL> CREATE OR REPLACE VIEW qwjw2009 AS
01:18:58   2  SELECT
01:18:58   3  a.pair
01:18:58   4  ,a.woq,b.qtr
01:18:58   5  ,a.day_of_week woq_start_day
01:18:58   6  ,AVG(a.wgain)avg_a
01:18:58   7  ,AVG(b.wgain)avg_b
01:18:58   8  ,COUNT(a.pair)row_cnt
01:18:58   9  FROM
01:18:58  10  	(SELECT pair,woq,qtr,day_of_week,wgain FROM wjw WHERE ydate1<'2009-01-01')a
01:18:58  11   ,(SELECT pair,woq,qtr,day_of_week,wgain FROM wjw WHERE ydate1>'2009-01-01')b
01:18:58  12  WHERE a.pair = b.pair AND a.woq = b.woq
01:18:58  13  GROUP BY a.pair,a.woq,b.qtr,a.day_of_week
01:18:58  14  -- If the pair count is low, it is noise:
01:18:58  15  HAVING COUNT(a.pair)> 123
01:18:58  16  ORDER BY a.pair,a.woq,b.qtr,a.day_of_week
01:18:58  17  /

View created.

Elapsed: 00:00:00.11
01:18:58 SQL> 
01:18:58 SQL> -- 2010 is next
01:18:58 SQL> CREATE OR REPLACE VIEW qwjw2010 AS
01:18:58   2  SELECT
01:18:58   3  a.pair
01:18:58   4  ,a.woq,b.qtr
01:18:58   5  ,a.day_of_week woq_start_day
01:18:58   6  ,AVG(a.wgain)avg_a
01:18:58   7  ,AVG(b.wgain)avg_b
01:18:58   8  ,COUNT(a.pair)row_cnt
01:18:58   9  FROM
01:18:58  10  	(SELECT pair,woq,qtr,day_of_week,wgain FROM wjw WHERE ydate1<'2010-01-01')a
01:18:58  11   ,(SELECT pair,woq,qtr,day_of_week,wgain FROM wjw WHERE ydate1>'2010-01-01')b
01:18:58  12  WHERE a.pair = b.pair AND a.woq = b.woq
01:18:58  13  GROUP BY a.pair,a.woq,b.qtr,a.day_of_week
01:18:58  14  -- If the pair count is low, it is noise:
01:18:58  15  HAVING COUNT(a.pair)> 123
01:18:58  16  ORDER BY a.pair,a.woq,b.qtr,a.day_of_week
01:18:58  17  /

View created.

Elapsed: 00:00:00.10
01:18:58 SQL> 
01:18:58 SQL> -- I now look at 2007,8,9,10:
01:18:58 SQL> SELECT pair,COUNT(pair),CORR(avg_a,avg_b)
01:18:58   2  FROM qwjw2007
01:18:58   3  GROUP BY pair
01:18:58   4  HAVING CORR(avg_a,avg_b)>0
01:18:58   5  ORDER BY CORR(avg_a,avg_b)
01:18:58   6  /

PAIR	COUNT(PAIR) CORR(AVG_A,AVG_B)
------- ----------- -----------------
usd_jpy 	260	   .077890295
usd_chf 	260	   .090772839

Elapsed: 00:00:00.29
01:18:59 SQL> 
01:18:59 SQL> SELECT pair,COUNT(pair),CORR(avg_a,avg_b)
01:18:59   2  FROM qwjw2008
01:18:59   3  GROUP BY pair
01:18:59   4  HAVING CORR(avg_a,avg_b)>0
01:18:59   5  ORDER BY CORR(avg_a,avg_b)
01:18:59   6  /

PAIR	COUNT(PAIR) CORR(AVG_A,AVG_B)
------- ----------- -----------------
usd_cad 	260	   .022423519
usd_chf 	260	   .076902042
aud_usd 	260	   .084665975
gbp_usd 	260	   .088865187

Elapsed: 00:00:00.22
01:18:59 SQL> 
01:18:59 SQL> SELECT pair,COUNT(pair),CORR(avg_a,avg_b)
01:18:59   2  FROM qwjw2009
01:18:59   3  GROUP BY pair
01:18:59   4  HAVING CORR(avg_a,avg_b)>0
01:18:59   5  ORDER BY CORR(avg_a,avg_b)
01:18:59   6  /

PAIR	COUNT(PAIR) CORR(AVG_A,AVG_B)
------- ----------- -----------------
gbp_usd 	253	   .053736667
eur_usd 	253	   .090092116
aud_usd 	253	   .093125333
usd_chf 	253	   .228706773

Elapsed: 00:00:00.18
01:18:59 SQL> 
01:18:59 SQL> SELECT pair,COUNT(pair),CORR(avg_a,avg_b)
01:18:59   2  FROM qwjw2010
01:18:59   3  GROUP BY pair
01:18:59   4  HAVING CORR(avg_a,avg_b)>0
01:18:59   5  ORDER BY CORR(avg_a,avg_b)
01:18:59   6  /

PAIR	COUNT(PAIR) CORR(AVG_A,AVG_B)
------- ----------- -----------------
usd_cad 	189	   .021278571
aud_usd 	189	   .029606463
usd_jpy 	189	   .040154359
eur_usd 	189	    .12309825
gbp_usd 	189	   .201797084
usd_chf 	189	   .237863124

6 rows selected.

Elapsed: 00:00:00.09
01:18:59 SQL> 
01:18:59 SQL> 
01:18:59 SQL> -- usd_chf is the only pair to exhibit a correlation trend for all 4 years.
01:18:59 SQL> 
01:18:59 SQL> -- I look more closely at usd_chf:
01:18:59 SQL> 
01:18:59 SQL> SELECT * FROM
01:18:59   2  (
01:18:59   3  	SELECT
01:18:59   4  	woq_start_day
01:18:59   5  	,woq
01:18:59   6  	,avg_a
01:18:59   7  	,avg_b
01:18:59   8  	,row_cnt
01:18:59   9  	FROM qwjw2007
01:18:59  10  	WHERE avg_a * avg_b > 0
01:18:59  11  	AND pair = 'usd_chf'
01:18:59  12  	ORDER BY(avg_a * avg_b)DESC
01:18:59  13  )
01:18:59  14  WHERE rownum < 10
01:18:59  15  /

W	 WOQ	  AVG_A      AVG_B    ROW_CNT
- ---------- ---------- ---------- ----------
3	  12 -.00713333 -.01954167	  324
2	  11 -.00702857    -.01894	  420
2	   9   -.012975   -.009625	  320
2	  11 -.00702857   -.015155	  560
4	  13 -.00893462 -.01128667	  390
5	  13 -.00875385 -.01128667	  390
6	   8 -.00667857 -.01297368	  532
3	   9 -.00886071   -.009625	  560
2	  11 -.00702857    -.01205	  560

9 rows selected.

Elapsed: 00:00:00.07
01:18:59 SQL> 
01:18:59 SQL> SELECT * FROM
01:18:59   2  (
01:18:59   3  	SELECT
01:18:59   4  	woq_start_day
01:18:59   5  	,woq
01:18:59   6  	,avg_a
01:18:59   7  	,avg_b
01:18:59   8  	,row_cnt
01:18:59   9  	FROM qwjw2008
01:18:59  10  	WHERE avg_a * avg_b > 0
01:18:59  11  	AND pair = 'usd_chf'
01:18:59  12  	ORDER BY(avg_a * avg_b)DESC
01:18:59  13  )
01:18:59  14  WHERE rownum < 10
01:18:59  15  /

W	 WOQ	  AVG_A      AVG_B    ROW_CNT
- ---------- ---------- ---------- ----------
2	  11 -.00565625    -.03655	  320
3	  12 -.00753667   -.023575	  240
2	   9 -.00978947    -.01394	  285
2	  11 -.00565625 -.01933333	  480
3	   9   -.007075    -.01394	  480
5	  13 -.00887667 -.01091818	  330
4	  13  -.0087069 -.01091818	  319
3	  12 -.00753667 -.01119333	  450
3	  12 -.00753667 -.01059333	  450

9 rows selected.

Elapsed: 00:00:00.05
01:18:59 SQL> 
01:18:59 SQL> SELECT * FROM
01:18:59   2  (
01:18:59   3  	SELECT
01:18:59   4  	woq_start_day
01:18:59   5  	,woq
01:18:59   6  	,avg_a
01:18:59   7  	,avg_b
01:18:59   8  	,row_cnt
01:18:59   9  	FROM qwjw2009
01:18:59  10  	WHERE avg_a * avg_b > 0
01:18:59  11  	AND pair = 'usd_chf'
01:18:59  12  	ORDER BY(avg_a * avg_b)DESC
01:18:59  13  )
01:18:59  14  WHERE rownum < 10
01:18:59  15  /

W	 WOQ	  AVG_A      AVG_B    ROW_CNT
- ---------- ---------- ---------- ----------
2	  11 -.00667222     -.0267	  360
6	  11 -.00450833     -.0267	  360
3	  11	 -.0044     -.0267	  350
5	  11 -.00437222     -.0267	  360
3	  10 .006085714     .01772	  175
3	  12 -.00897647    -.01051	  340
2	  11 -.00667222    -.01396	  360
4	  13 -.00727273 -.01217143	  231
4	  11 -.00304722     -.0267	  360

9 rows selected.

Elapsed: 00:00:00.04
01:18:59 SQL> 
01:18:59 SQL> SELECT * FROM
01:18:59   2  (
01:18:59   3  	SELECT
01:18:59   4  	woq_start_day
01:18:59   5  	,woq
01:18:59   6  	,avg_a
01:18:59   7  	,avg_b
01:18:59   8  	,row_cnt
01:18:59   9  	FROM qwjw2010
01:18:59  10  	WHERE avg_a * avg_b > 0
01:18:59  11  	AND pair = 'usd_chf'
01:18:59  12  	ORDER BY(avg_a * avg_b)DESC
01:18:59  13  )
01:18:59  14  WHERE rownum < 10
01:18:59  15  /

W	 WOQ	  AVG_A      AVG_B    ROW_CNT
- ---------- ---------- ---------- ----------
2	  11	 -.0073    -.02556	  200
3	  12	-.00725    -.02558	  190
3	  11 -.00589487    -.02556	  195
6	  11  -.0055675    -.02556	  200
3	  12	-.00725    -.01826	  190
5	  11   -.005155    -.02556	  200
4	  11  -.0039925    -.02556	  200
2	  12 -.00386486    -.02558	  185
4	  13 -.00728857    -.01114	  175

9 rows selected.

Elapsed: 00:00:00.02
01:18:59 SQL> 
01:18:59 SQL> -- It was difficult to pick out a "best" woq_start_day so I would just
01:18:59 SQL> -- pick one that seemed convenient to my schedule when I trade.
01:18:59 SQL> 
01:18:59 SQL> -- How about qtr?  Is there a best qtr?
01:18:59 SQL> 
01:18:59 SQL> SELECT * FROM
01:18:59   2  (
01:18:59   3  	SELECT
01:18:59   4  	qtr
01:18:59   5  	,woq
01:18:59   6  	,avg_a
01:18:59   7  	,avg_b
01:18:59   8  	,row_cnt
01:18:59   9  	FROM qwjw2007
01:18:59  10  	WHERE avg_a * avg_b > 0
01:18:59  11  	AND pair = 'usd_chf'
01:18:59  12  	ORDER BY(avg_a * avg_b)DESC
01:18:59  13  )
01:18:59  14  WHERE rownum < 10
01:18:59  15  /

Q	 WOQ	  AVG_A      AVG_B    ROW_CNT
- ---------- ---------- ---------- ----------
4	  12 -.00713333 -.01954167	  324
4	  11 -.00702857    -.01894	  420
1	   9   -.012975   -.009625	  320
1	  11 -.00702857   -.015155	  560
2	  13 -.00893462 -.01128667	  390
2	  13 -.00875385 -.01128667	  390
1	   8 -.00667857 -.01297368	  532
1	   9 -.00886071   -.009625	  560
3	  11 -.00702857    -.01205	  560

9 rows selected.

Elapsed: 00:00:00.05
01:18:59 SQL> 
01:18:59 SQL> SELECT * FROM
01:18:59   2  (
01:18:59   3  	SELECT
01:18:59   4  	qtr
01:18:59   5  	,woq
01:18:59   6  	,avg_a
01:18:59   7  	,avg_b
01:18:59   8  	,row_cnt
01:18:59   9  	FROM qwjw2008
01:18:59  10  	WHERE avg_a * avg_b > 0
01:18:59  11  	AND pair = 'usd_chf'
01:18:59  12  	ORDER BY(avg_a * avg_b)DESC
01:18:59  13  )
01:18:59  14  WHERE rownum < 10
01:18:59  15  /

Q	 WOQ	  AVG_A      AVG_B    ROW_CNT
- ---------- ---------- ---------- ----------
4	  11 -.00565625    -.03655	  320
4	  12 -.00753667   -.023575	  240
1	   9 -.00978947    -.01394	  285
1	  11 -.00565625 -.01933333	  480
1	   9   -.007075    -.01394	  480
2	  13 -.00887667 -.01091818	  330
2	  13  -.0087069 -.01091818	  319
2	  12 -.00753667 -.01119333	  450
3	  12 -.00753667 -.01059333	  450

9 rows selected.

Elapsed: 00:00:00.05
01:18:59 SQL> 
01:18:59 SQL> SELECT * FROM
01:18:59   2  (
01:18:59   3  	SELECT
01:18:59   4  	qtr
01:18:59   5  	,woq
01:18:59   6  	,avg_a
01:18:59   7  	,avg_b
01:18:59   8  	,row_cnt
01:18:59   9  	FROM qwjw2009
01:18:59  10  	WHERE avg_a * avg_b > 0
01:18:59  11  	AND pair = 'usd_chf'
01:18:59  12  	ORDER BY(avg_a * avg_b)DESC
01:18:59  13  )
01:18:59  14  WHERE rownum < 10
01:18:59  15  /

Q	 WOQ	  AVG_A      AVG_B    ROW_CNT
- ---------- ---------- ---------- ----------
1	  11 -.00667222     -.0267	  360
1	  11 -.00450833     -.0267	  360
1	  11	 -.0044     -.0267	  350
1	  11 -.00437222     -.0267	  360
4	  10 .006085714     .01772	  175
2	  12 -.00897647    -.01051	  340
2	  11 -.00667222    -.01396	  360
2	  13 -.00727273 -.01217143	  231
1	  11 -.00304722     -.0267	  360

9 rows selected.

Elapsed: 00:00:00.03
01:18:59 SQL> 
01:18:59 SQL> SELECT * FROM
01:18:59   2  (
01:18:59   3  	SELECT
01:18:59   4  	qtr
01:18:59   5  	,woq
01:18:59   6  	,avg_a
01:18:59   7  	,avg_b
01:18:59   8  	,row_cnt
01:18:59   9  	FROM qwjw2010
01:18:59  10  	WHERE avg_a * avg_b > 0
01:18:59  11  	AND pair = 'usd_chf'
01:18:59  12  	ORDER BY(avg_a * avg_b)DESC
01:18:59  13  )
01:18:59  14  WHERE rownum < 10
01:18:59  15  /

Q	 WOQ	  AVG_A      AVG_B    ROW_CNT
- ---------- ---------- ---------- ----------
2	  11	 -.0073    -.02556	  200
2	  12	-.00725    -.02558	  190
2	  11 -.00589487    -.02556	  195
2	  11  -.0055675    -.02556	  200
3	  12	-.00725    -.01826	  190
2	  11   -.005155    -.02556	  200
2	  11  -.0039925    -.02556	  200
2	  12 -.00386486    -.02558	  185
3	  13 -.00728857    -.01114	  175

9 rows selected.

Elapsed: 00:00:00.03
01:18:59 SQL> 
01:18:59 SQL> -- Now look for a woq-correlation-trend which covers usd_chf, 2009, 2010:
01:18:59 SQL> 
01:18:59 SQL> CREATE OR REPLACE VIEW qwjw910 AS
01:18:59   2  SELECT
01:18:59   3  a.pair
01:18:59   4  ,a.woq,b.qtr
01:18:59   5  ,a.day_of_week woq_start_day
01:18:59   6  ,AVG(a.wgain)avg_a
01:18:59   7  ,AVG(b.wgain)avg_b
01:18:59   8  ,COUNT(a.pair)row_cnt
01:18:59   9  FROM
01:18:59  10  	(SELECT pair,woq,qtr,day_of_week,wgain FROM wjw WHERE ydate1 BETWEEN'2009-01-01'AND'2009-12-31')a
01:18:59  11   ,(SELECT pair,woq,qtr,day_of_week,wgain FROM wjw WHERE ydate1 BETWEEN'2010-01-01'AND'2010-12-31')b
01:18:59  12  WHERE a.pair = b.pair AND a.woq = b.woq
01:18:59  13  GROUP BY a.pair,a.woq,b.qtr,a.day_of_week
01:18:59  14  -- If the pair count is low, it is noise:
01:18:59  15  ORDER BY a.pair,a.woq,b.qtr,a.day_of_week
01:18:59  16  /

View created.

Elapsed: 00:00:00.04
01:18:59 SQL> 
01:18:59 SQL> SELECT * FROM
01:18:59   2  (
01:18:59   3  	SELECT
01:18:59   4  	qtr
01:18:59   5  	,woq
01:18:59   6  	,avg_a
01:18:59   7  	,avg_b
01:18:59   8  	,row_cnt
01:18:59   9  	FROM qwjw910
01:18:59  10  	WHERE avg_a * avg_b > 0
01:18:59  11  	AND pair = 'usd_chf'
01:18:59  12  	ORDER BY(avg_a * avg_b)DESC
01:18:59  13  )
01:18:59  14  WHERE rownum < 10
01:18:59  15  /

Q	 WOQ	  AVG_A      AVG_B    ROW_CNT
- ---------- ---------- ---------- ----------
2	  11   -.018975    -.02556	   20
2	  11	 -.0151    -.02556	   20
2	  11	-.01295    -.02556	   20
2	  11	 -.0125    -.02556	   20
2	  11	 -.0122    -.02556	   20
2	   6	  .0087     .03284	   20
2	  13	-.00755 -.02513333	    6
3	  11   -.018975    -.00958	   20
2	   0	 .00985      .0164	    2

9 rows selected.

Elapsed: 00:00:00.02
01:19:00 SQL> 
01:19:00 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
