/pt/s/rlk/trend10min/results2010_1203_t12.txt


I see very little correlation in the results below.

I had not expected to see it though since mvg-avg slope is completely unconstrained:



oracle@z2:/pt/s/rlk/trend10min$ sqt @t12

SQL*Plus: Release 11.2.0.1.0 Production on Sat Dec 4 21:47:13 2010

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

21:47:13 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
21:47:13 SQL> --
21:47:13 SQL> -- t12.sql
21:47:13 SQL> --
21:47:13 SQL> 
21:47:13 SQL> -- I use this script to look at Forex data which has a 10 minute duration between each datapoint.
21:47:13 SQL> 
21:47:13 SQL> SET LINES 66
21:47:13 SQL> DESC dukas10min
 Name				  Null?    Type
 -------------------------------- -------- -----------------------
 PAIR					   VARCHAR2(8)
 YDATE					   DATE
 VOL					   NUMBER
 OPN					   NUMBER
 CLSE					   NUMBER
 MN					   NUMBER
 MX					   NUMBER

21:47:13 SQL> SET LINES 166
21:47:13 SQL> 
21:47:13 SQL> SELECT
21:47:13   2  pair
21:47:13   3  ,MIN(ydate)
21:47:13   4  ,COUNT(*)
21:47:13   5  ,MAX(ydate)
21:47:13   6  FROM dukas10min
21:47:13   7  GROUP BY pair
21:47:13   8  ORDER BY pair
21:47:13   9  /

PAIR	 MIN(YDATE)	       COUNT(*) MAX(YDATE)
-------- ------------------- ---------- -------------------
aud_usd  2009-10-07 05:50:01	  43653 2010-12-03 17:50:01
eur_usd  2009-10-07 05:50:01	  43653 2010-12-03 17:50:01
gbp_usd  2009-10-07 05:50:01	  43653 2010-12-03 17:50:01
usd_cad  2009-10-26 04:50:01	  41769 2010-12-03 17:50:01
usd_chf  2009-10-26 04:50:01	  41769 2010-12-03 17:50:01
usd_jpy  2009-10-07 05:50:01	  43653 2010-12-03 17:50:01

6 rows selected.

Elapsed: 00:00:00.10
21:47:13 SQL> 
21:47:13 SQL> 
21:47:13 SQL> CREATE OR REPLACE VIEW tr10 AS
21:47:13   2  SELECT
21:47:13   3  pair
21:47:13   4  -- ydate is granular down to 10 min:
21:47:13   5  ,ydate
21:47:13   6  ,clse
21:47:13   7  -- Use analytic function to get moving average1:
21:47:13   8  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND 1 PRECEDING)ma1_4
21:47:13   9  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 10 PRECEDING AND 2 PRECEDING)ma1_8
21:47:13  10  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 20 PRECEDING AND 4 PRECEDING)ma1_16
21:47:13  11  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 40 PRECEDING AND 8 PRECEDING)ma1_32
21:47:13  12  -- Use analytic function to get moving average2:
21:47:13  13  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)ma2_4
21:47:13  14  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)ma2_8
21:47:13  15  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 16 PRECEDING AND CURRENT ROW)ma2_16
21:47:13  16  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 32 PRECEDING AND CURRENT ROW)ma2_32
21:47:13  17  -- Relative to current-row, get future closing prices:
21:47:13  18  ,LEAD(clse,4,NULL)OVER(PARTITION BY pair ORDER BY ydate) clse4
21:47:13  19  ,LEAD(clse,6,NULL)OVER(PARTITION BY pair ORDER BY ydate) clse6
21:47:13  20  ,LEAD(clse,8,NULL)OVER(PARTITION BY pair ORDER BY ydate) clse8
21:47:13  21  FROM dukas10min
21:47:13  22  -- Prevent divide by zero:
21:47:13  23  WHERE clse > 0
21:47:13  24  ORDER BY pair,ydate
21:47:13  25  /

View created.

Elapsed: 00:00:00.10
21:47:13 SQL> 
21:47:13 SQL> -- I derive "normalized" slope of moving-averages.
21:47:13 SQL> -- I normalize them to help me compare JPY pairs to all the other pairs.
21:47:13 SQL> -- I collect normalized gains too:
21:47:13 SQL> 
21:47:13 SQL> CREATE OR REPLACE VIEW tr12 AS
21:47:13   2  SELECT
21:47:13   3  pair
21:47:13   4  ,ydate
21:47:13   5  ,clse
21:47:13   6  -- Derive normalized mvg-avg-slope:
21:47:13   7  ,(ma2_4 - ma1_4)/ma1_4 ma4_slope
21:47:13   8  ,(ma2_8 - ma1_8)/ma1_8 ma8_slope
21:47:13   9  ,(ma2_16 - ma1_16)/ma1_16 ma16_slope
21:47:13  10  ,(ma2_32 - ma1_32)/ma1_32 ma32_slope
21:47:13  11  -- I collect normalized gains too:
21:47:13  12  ,(clse4-clse)/clse npg4
21:47:13  13  ,(clse6-clse)/clse npg6
21:47:13  14  ,(clse8-clse)/clse npg8
21:47:13  15  FROM tr10
21:47:13  16  -- prevent divide by 0:
21:47:13  17  WHERE(ma1_4*ma1_8*ma1_16*ma1_32)!=0
21:47:13  18  ORDER BY pair,ydate
21:47:13  19  /

View created.

Elapsed: 00:00:00.05
21:47:13 SQL> 
21:47:13 SQL> -- Now that I have ma-slopes, I calculate stddev of their distributions.
21:47:13 SQL> -- Also I get lagging npgs and sgn:
21:47:13 SQL> 
21:47:13 SQL> DROP TABLE tr14;

Table dropped.

Elapsed: 00:00:00.50
21:47:14 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.08
21:47:14 SQL> CREATE TABLE tr14 COMPRESS AS
21:47:14   2  -- CREATE OR REPLACE VIEW tr14 AS
21:47:14   3  SELECT
21:47:14   4  pair
21:47:14   5  ,ydate
21:47:14   6  ,clse
21:47:14   7  ,ma4_slope
21:47:14   8  ,ma8_slope
21:47:14   9  ,ma16_slope
21:47:14  10  ,ma32_slope
21:47:14  11  ,npg4
21:47:14  12  ,npg6
21:47:14  13  ,npg8
21:47:14  14  ,STDDEV(ma4_slope)OVER(PARTITION BY pair)ma_stddev4
21:47:14  15  ,STDDEV(ma8_slope)OVER(PARTITION BY pair)ma_stddev8
21:47:14  16  ,STDDEV(ma16_slope)OVER(PARTITION BY pair)ma_stddev16
21:47:14  17  ,STDDEV(ma32_slope)OVER(PARTITION BY pair)ma_stddev32
21:47:14  18  -- Sign of slope is a useful attribute:
21:47:14  19  ,SIGN(ma4_slope)sgn4
21:47:14  20  ,SIGN(ma8_slope)sgn8
21:47:14  21  ,SIGN(ma16_slope)sgn16
21:47:14  22  ,SIGN(ma32_slope)sgn32
21:47:14  23  -- Get npg from the past:
21:47:14  24  ,LAG(npg4,5,NULL)OVER(PARTITION BY pair ORDER BY ydate)npg4lg
21:47:14  25  ,LAG(npg6,7,NULL)OVER(PARTITION BY pair ORDER BY ydate)npg6lg
21:47:14  26  ,LAG(npg8,9,NULL)OVER(PARTITION BY pair ORDER BY ydate)npg8lg
21:47:14  27  FROM tr12
21:47:14  28  ORDER BY pair,ydate
21:47:14  29  /

Table created.

Elapsed: 00:00:11.17
21:47:25 SQL> 
21:47:25 SQL> -- rpt
21:47:25 SQL> SELECT
21:47:25   2  pair
21:47:25   3  ,MIN(ydate)
21:47:25   4  ,COUNT(ydate)
21:47:25   5  ,MAX(ydate)
21:47:25   6  FROM tr14
21:47:25   7  GROUP BY pair
21:47:25   8  ORDER BY pair
21:47:25   9  /

PAIR	 MIN(YDATE)	     COUNT(YDATE) MAX(YDATE)
-------- ------------------- ------------ -------------------
aud_usd  2009-10-07 07:10:01	    43645 2010-12-03 17:50:01
eur_usd  2009-10-07 07:10:01	    43645 2010-12-03 17:50:01
gbp_usd  2009-10-07 07:10:01	    43645 2010-12-03 17:50:01
usd_cad  2009-10-26 06:10:01	    41761 2010-12-03 17:50:01
usd_chf  2009-10-26 06:10:01	    41761 2010-12-03 17:50:01
usd_jpy  2009-10-07 07:10:01	    43645 2010-12-03 17:50:01

6 rows selected.

Elapsed: 00:00:00.27
21:47:25 SQL> 
21:47:25 SQL> -- Do a simple query which looks for CORR() tween npg_lg and npg where npg_lg is lucrative.
21:47:25 SQL> 
21:47:25 SQL> -- Look at npg4lg 1st:
21:47:25 SQL> COLUMN avg_npg FORMAT 9.9999
21:47:25 SQL> COLUMN sgn4 FORMAT 9999
21:47:25 SQL> COLUMN sgn8 FORMAT 9999
21:47:25 SQL> COLUMN sgn16 FORMAT 99999
21:47:25 SQL> COLUMN sgn32 FORMAT 99999
21:47:25 SQL> COLUMN cnt   FORMAT 99999
21:47:25 SQL> 
21:47:25 SQL> SELECT
21:47:25   2  COUNT(pair)cnt
21:47:25   3  ,pair
21:47:25   4  ,ROUND(AVG(-sgn4*npg4),4)avg_npg
21:47:25   5  ,sgn4
21:47:25   6  ,sgn8
21:47:25   7  ,sgn16
21:47:25   8  ,sgn32
21:47:25   9  ,ROUND(CORR(npg4lg,npg4),2)crr44
21:47:25  10  ,ROUND(CORR(npg6lg,npg6),2)crr66
21:47:25  11  ,ROUND(CORR(npg8lg,npg8),2)crr88
21:47:25  12  FROM tr14
21:47:25  13  -- Look at npg4 1st:
21:47:25  14  WHERE ABS(npg4lg) > 0.0004
21:47:25  15  AND sgn4*sgn8*sgn16*sgn32 !=0
21:47:25  16  GROUP BY
21:47:25  17  pair
21:47:25  18  ,sgn4
21:47:25  19  ,sgn8
21:47:25  20  ,sgn16
21:47:25  21  ,sgn32
21:47:25  22  HAVING COUNT(pair)>11
21:47:25  23  ORDER BY
21:47:25  24  pair
21:47:25  25  ,sgn4
21:47:25  26  ,sgn8
21:47:25  27  ,sgn16
21:47:25  28  ,sgn32
21:47:25  29  /

   CNT PAIR	AVG_NPG  SGN4  SGN8  SGN16  SGN32      CRR44	  CRR66      CRR88
------ -------- ------- ----- ----- ------ ------ ---------- ---------- ----------
  6330 aud_usd	  .0001    -1	 -1	-1     -1	   0	    .01 	 0
  2526 aud_usd	  .0001    -1	 -1	-1	1	   0	    .03        .06
   722 aud_usd	  .0000    -1	 -1	 1     -1	 .05	    .08        .13
  2214 aud_usd	  .0001    -1	 -1	 1	1	 .02	    .05        .02
   637 aud_usd	  .0001    -1	  1	-1     -1	-.02	    .02 	.1
   245 aud_usd	  .0003    -1	  1	-1	1	 .02	    .01        .15
   547 aud_usd	  .0001    -1	  1	 1     -1	 .02	   -.07        .03
  1894 aud_usd	  .0001    -1	  1	 1	1	 .08	    .05        .02
  1933 aud_usd	  .0000     1	 -1	-1     -1	 .01	    .02        .01
   526 aud_usd	  .0001     1	 -1	-1	1	-.01	   -.05 	 0
   294 aud_usd	 -.0001     1	 -1	 1     -1	-.03	   -.04       -.12
   608 aud_usd	  .0000     1	 -1	 1	1	 .04	    .04       -.01
  2193 aud_usd	  .0000     1	  1	-1     -1	 .01	   -.01 	 0
   750 aud_usd	 -.0001     1	  1	-1	1	-.03	    .04        .04
  2507 aud_usd	  .0001     1	  1	 1     -1	-.06	    -.1       -.07
  6855 aud_usd	  .0000     1	  1	 1	1	 .02	    .02 	 0
  6094 eur_usd	  .0000    -1	 -1	-1     -1	   0	    .01        .02
  2228 eur_usd	  .0000    -1	 -1	-1	1	 .02	    .04        .06
   589 eur_usd	  .0002    -1	 -1	 1     -1	   0	   -.11       -.05
  1879 eur_usd	  .0000    -1	 -1	 1	1	 .02	    .06        .04
   499 eur_usd	  .0000    -1	  1	-1     -1	 .01	      0       -.04
   223 eur_usd	  .0001    -1	  1	-1	1	-.05	    .03        .06
   397 eur_usd	  .0000    -1	  1	 1     -1	-.13	   -.08        .02
  1397 eur_usd	  .0001    -1	  1	 1	1	 .03	    .04 	 0
  1585 eur_usd	  .0000     1	 -1	-1     -1	-.01	      0 	 0
   359 eur_usd	  .0001     1	 -1	-1	1	 .02	    .04        .12
   225 eur_usd	  .0000     1	 -1	 1     -1	  .1	    .04       -.11
   425 eur_usd	  .0000     1	 -1	 1	1	-.03	    .05       -.06
  1953 eur_usd	  .0001     1	  1	-1     -1	 .02	    .04        .04
   582 eur_usd	  .0000     1	  1	-1	1	 .03	    .05        .03
  2200 eur_usd	  .0001     1	  1	 1     -1	 .02	    .01        .04
  5731 eur_usd	  .0000     1	  1	 1	1	 .01	   -.02       -.02
  5775 gbp_usd	  .0001    -1	 -1	-1     -1	-.02	   -.04       -.07
  2132 gbp_usd	  .0000    -1	 -1	-1	1	 .02	    .02        .03
   668 gbp_usd	  .0000    -1	 -1	 1     -1	 .08	    .01        .03
  1818 gbp_usd	  .0001    -1	 -1	 1	1	 .04	   -.02       -.03
   528 gbp_usd	  .0000    -1	  1	-1     -1	 .03	      0        .03
   205 gbp_usd	  .0002    -1	  1	-1	1	-.13	   -.11        .02
   412 gbp_usd	  .0000    -1	  1	 1     -1	-.06	   -.07        .03
  1503 gbp_usd	  .0000    -1	  1	 1	1	-.01	   -.01       -.01
  1576 gbp_usd	  .0000     1	 -1	-1     -1	 .03	   -.02       -.03
   382 gbp_usd	  .0000     1	 -1	-1	1	-.13	   -.11 	 0
   259 gbp_usd	  .0001     1	 -1	 1     -1	 .06	   -.05       -.04
   471 gbp_usd	  .0000     1	 -1	 1	1	-.03	    .03       -.05
  1949 gbp_usd	  .0001     1	  1	-1     -1	 .04	    .08        .04
   583 gbp_usd	  .0000     1	  1	-1	1	-.03	    .03       -.07
  2108 gbp_usd	  .0001     1	  1	 1     -1	 .04	    .03        .07
  5892 gbp_usd	  .0001     1	  1	 1	1	-.01	    .01        .01
  5868 usd_cad	  .0001    -1	 -1	-1     -1	 .01	      0        .02
  1991 usd_cad	  .0001    -1	 -1	-1	1	-.02	   -.04       -.01
   622 usd_cad	  .0001    -1	 -1	 1     -1	 .03	    .05        .07
  1797 usd_cad	  .0001    -1	 -1	 1	1	-.07	   -.01       -.01
   483 usd_cad	  .0000    -1	  1	-1     -1	 .05	    .09        .08
   240 usd_cad	  .0001    -1	  1	-1	1	 .24	    .12        .09
   386 usd_cad	  .0000    -1	  1	 1     -1	 .19	    .05        .05
  1376 usd_cad	  .0000    -1	  1	 1	1	 .07	      0        .02
  1416 usd_cad	  .0001     1	 -1	-1     -1	 .05	    .03        .03
   397 usd_cad	  .0001     1	 -1	-1	1	 .04	   -.03        .17
   218 usd_cad	  .0001     1	 -1	 1     -1	-.06	    .07        .13
   465 usd_cad	 -.0001     1	 -1	 1	1	 .05	    .03       -.08
  1777 usd_cad	  .0001     1	  1	-1     -1	 .03	    .01        .04
   594 usd_cad	  .0001     1	  1	-1	1	-.04	    .06        .03
  2105 usd_cad	  .0001     1	  1	 1     -1	 .03	   -.01       -.03
  5372 usd_cad	  .0000     1	  1	 1	1	-.05	   -.04       -.02
  5480 usd_chf	  .0001    -1	 -1	-1     -1	   0	   -.01 	 0
  2036 usd_chf	  .0000    -1	 -1	-1	1	 .04	    .04        .03
   598 usd_chf	 -.0001    -1	 -1	 1     -1	 .03	    .07 	 0
  1787 usd_chf	  .0000    -1	 -1	 1	1	 .02	    .08        .08
   484 usd_chf	  .0001    -1	  1	-1     -1	 .14	   -.02       -.05
   262 usd_chf	  .0000    -1	  1	-1	1	-.01	    .02       -.01
   381 usd_chf	  .0000    -1	  1	 1     -1	-.01	    .01        .07
  1398 usd_chf	 -.0001    -1	  1	 1	1	  .1	    .03        .04
  1422 usd_chf	 -.0001     1	 -1	-1     -1	 .02	    .01       -.01
   360 usd_chf	  .0001     1	 -1	-1	1	 .04	   -.01        .01
   227 usd_chf	 -.0001     1	 -1	 1     -1	-.06	      0        .08
   458 usd_chf	  .0001     1	 -1	 1	1	-.01	   -.03        .09
  1850 usd_chf	  .0000     1	  1	-1     -1	 .06	    .04 	 0
   595 usd_chf	  .0002     1	  1	-1	1	 .02	   -.01        .04
  2239 usd_chf	  .0000     1	  1	 1     -1	 .02	    .02        .02
  5218 usd_chf	  .0001     1	  1	 1	1	-.01	    .02        .04
  5593 usd_jpy	  .0000    -1	 -1	-1     -1	-.06	   -.08       -.07
  2138 usd_jpy	  .0001    -1	 -1	-1	1	-.04	   -.01        .01
   704 usd_jpy	 -.0001    -1	 -1	 1     -1	 .04	    .01 	 0
  1825 usd_jpy	  .0000    -1	 -1	 1	1	-.01	   -.07       -.03
   470 usd_jpy	  .0000    -1	  1	-1     -1	 .04	    .01        .03
   221 usd_jpy	 -.0001    -1	  1	-1	1	 .15	    .01       -.16
   411 usd_jpy	  .0001    -1	  1	 1     -1	 .02	    .04        -.1
  1390 usd_jpy	  .0000    -1	  1	 1	1	-.01	   -.04       -.05
  1562 usd_jpy	  .0000     1	 -1	-1     -1	 .11	    .03        .01
   422 usd_jpy	  .0000     1	 -1	-1	1	 .03	   -.02        .04
   268 usd_jpy	  .0000     1	 -1	 1     -1	 .25	    .05        .02
   490 usd_jpy	 -.0001     1	 -1	 1	1	-.05	    .05        .01
  1887 usd_jpy	  .0001     1	  1	-1     -1	-.05	   -.04 	 0
   676 usd_jpy	  .0000     1	  1	-1	1	-.05	   -.01        .05
  2195 usd_jpy	  .0001     1	  1	 1     -1	-.01	   -.02 	 0
  5472 usd_jpy	  .0000     1	  1	 1	1	-.01	    .02        .02

96 rows selected.

Elapsed: 00:00:01.25
21:47:27 SQL> 
21:47:27 SQL> 
21:47:27 SQL> EXIT
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
oracle@z2:/pt/s/rlk/trend10min$ 
