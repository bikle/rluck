/pt/s/rlk/trend10min/results2010_1205_t16.txt

The idea behind t16.sql is to look for evidence that r2m behavior is something which "trends".

The way I describe this with a simple adjective is to say that a pair
is "jumpy" for a period of time and then becomes calm.

I list below some output related to jumpy pairs:


PAIR	      SGN32 SGN32_X_NPG4 SGN32_X_NPG4_LD	CNT
-------- ---------- ------------ --------------- ----------
aud_usd 	 -1	  -.0014	  -.0008	 19
aud_usd 	  1	   -.002	  -.0005	 15
eur_usd 	 -1	  -.0013	  -.0001	 12
eur_usd 	  1	  -.0012	  -.0005	 16
usd_cad 	 -1	  -.0022	  -.0005	 17
usd_cad 	  1	  -.0016	  -.0001	 23

PAIR	      SGN32 SGN32_X_NPG6 SGN32_X_NPG6_LD	CNT
-------- ---------- ------------ --------------- ----------
aud_usd 	 -1	   -.002	  -.0002	 21
aud_usd 	  1	  -.0022	       0	 19
eur_usd 	 -1	  -.0017	  -.0004	 13
eur_usd 	  1	  -.0017	  -.0011	 12


PAIR	      SGN32 SGN32_X_NPG8 SGN32_X_NPG8_LD	CNT
-------- ---------- ------------ --------------- ----------
aud_usd 	 -1	  -.0024	  -.0006	 30
aud_usd 	  1	  -.0024	  -.0004	 25
eur_usd 	 -1	  -.0025	  -.0004	 15
eur_usd 	  1	   -.002	   -.001	 15


PAIR	      SGN16 SGN16_X_NPG4 SGN16_X_NPG4_LD	CNT
-------- ---------- ------------ --------------- ----------
eur_usd 	 -1	  -.0017	  -.0004	 30
eur_usd 	  1	  -.0012	  -.0004	 29


These pairs are jumpy but not jumpy enough to be lucrative:

PAIR	      SGN16 SGN16_X_NPG6 SGN16_X_NPG6_LD	CNT
-------- ---------- ------------ --------------- ----------
aud_usd 	 -1	  -.0021	  -.0001	 54
aud_usd 	  1	  -.0018	  -.0002	 35
eur_usd 	 -1	  -.0018	  -.0003	 37
eur_usd 	  1	  -.0015	  -.0001	 37
usd_cad 	 -1	  -.0019	  -.0002	 29
usd_cad 	  1	  -.0022	  -.0004	 44
usd_chf 	 -1	  -.0018	  -.0001	 40
usd_chf 	  1	   -.002	  -.0004	 31

PAIR	      SGN16 SGN16_X_NPG8 SGN16_X_NPG8_LD	CNT
-------- ---------- ------------ --------------- ----------
aud_usd 	 -1	  -.0025	  -.0002	 61
aud_usd 	  1	  -.0022	  -.0003	 37
usd_cad 	 -1	  -.0025	  -.0005	 26
usd_cad 	  1	  -.0022	  -.0003	 43
usd_chf 	 -1	  -.0021	  -.0002	 41
usd_chf 	  1	   -.002	  -.0003	 31

PAIR	       SGN8 SGN8_X_NPG8 SGN8_X_NPG8_LD	      CNT
-------- ---------- ----------- -------------- ----------
gbp_usd 	 -1	 -.0018 	-.0001	       71
gbp_usd 	  1	 -.0017 	-.0005	       58



A screen dump of the sql I used to find the jumpy pairs:

oracle@z2:/pt/s/rlk/trend10min$ sqt @t16

SQL*Plus: Release 11.2.0.1.0 Production on Sun Dec 5 05:28:31 2010

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

05:28:31 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.01
05:28:31 SQL> --
05:28:31 SQL> -- t16.sql
05:28:31 SQL> --
05:28:31 SQL> 
05:28:31 SQL> -- I use this script to look at Forex data which has a 10 minute duration between each datapoint.
05:28:31 SQL> 
05:28:31 SQL> SET LINES 66
05:28:31 SQL> DESC dukas10min
 Name				  Null?    Type
 -------------------------------- -------- -----------------------
 PAIR					   VARCHAR2(8)
 YDATE					   DATE
 VOL					   NUMBER
 OPN					   NUMBER
 CLSE					   NUMBER
 MN					   NUMBER
 MX					   NUMBER

05:28:31 SQL> SET LINES 166
05:28:31 SQL> 
05:28:31 SQL> SELECT
05:28:31   2  pair
05:28:31   3  ,MIN(ydate)
05:28:31   4  ,COUNT(*)
05:28:31   5  ,MAX(ydate)
05:28:31   6  FROM dukas10min
05:28:31   7  GROUP BY pair
05:28:31   8  ORDER BY pair
05:28:31   9  /

PAIR	 MIN(YDATE)	       COUNT(*) MAX(YDATE)
-------- ------------------- ---------- -------------------
aud_usd  2009-10-07 05:50:01	  43653 2010-12-03 17:50:01
eur_usd  2009-10-07 05:50:01	  43653 2010-12-03 17:50:01
gbp_usd  2009-10-07 05:50:01	  43653 2010-12-03 17:50:01
usd_cad  2009-10-26 04:50:01	  41769 2010-12-03 17:50:01
usd_chf  2009-10-26 04:50:01	  41769 2010-12-03 17:50:01
usd_jpy  2009-10-07 05:50:01	  43653 2010-12-03 17:50:01

6 rows selected.

Elapsed: 00:00:00.09
05:28:31 SQL> 
05:28:31 SQL> 
05:28:31 SQL> CREATE OR REPLACE VIEW tr10 AS
05:28:31   2  SELECT
05:28:31   3  pair
05:28:31   4  -- ydate is granular down to 10 min:
05:28:31   5  ,ydate
05:28:31   6  ,clse
05:28:31   7  -- Use analytic function to get moving average1:
05:28:31   8  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 5 PRECEDING AND 1 PRECEDING)ma1_4
05:28:31   9  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 10 PRECEDING AND 2 PRECEDING)ma1_8
05:28:31  10  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 20 PRECEDING AND 4 PRECEDING)ma1_16
05:28:31  11  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 40 PRECEDING AND 8 PRECEDING)ma1_32
05:28:31  12  -- Use analytic function to get moving average2:
05:28:31  13  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)ma2_4
05:28:31  14  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 8 PRECEDING AND CURRENT ROW)ma2_8
05:28:31  15  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 16 PRECEDING AND CURRENT ROW)ma2_16
05:28:31  16  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 32 PRECEDING AND CURRENT ROW)ma2_32
05:28:31  17  -- Relative to current-row, get future closing prices:
05:28:31  18  ,LEAD(clse,4,NULL)OVER(PARTITION BY pair ORDER BY ydate) clse4
05:28:31  19  ,LEAD(clse,6,NULL)OVER(PARTITION BY pair ORDER BY ydate) clse6
05:28:31  20  ,LEAD(clse,8,NULL)OVER(PARTITION BY pair ORDER BY ydate) clse8
05:28:31  21  FROM dukas10min
05:28:31  22  -- Prevent divide by zero:
05:28:31  23  WHERE clse > 0
05:28:31  24  ORDER BY pair,ydate
05:28:31  25  /

View created.

Elapsed: 00:00:00.03
05:28:31 SQL> 
05:28:31 SQL> -- I derive "normalized" slope of moving-averages.
05:28:31 SQL> -- I normalize them to help me compare JPY pairs to all the other pairs.
05:28:31 SQL> -- I collect normalized gains too:
05:28:31 SQL> 
05:28:31 SQL> CREATE OR REPLACE VIEW tr12 AS
05:28:31   2  SELECT
05:28:31   3  pair
05:28:31   4  ,ydate
05:28:31   5  ,clse
05:28:31   6  -- Derive normalized mvg-avg-slope:
05:28:31   7  ,(ma2_4 - ma1_4)/ma1_4 ma4_slope
05:28:31   8  ,(ma2_8 - ma1_8)/ma1_8 ma8_slope
05:28:31   9  ,(ma2_16 - ma1_16)/ma1_16 ma16_slope
05:28:31  10  ,(ma2_32 - ma1_32)/ma1_32 ma32_slope
05:28:31  11  -- I collect normalized gains too:
05:28:31  12  ,(clse4-clse)/clse npg4
05:28:31  13  ,(clse6-clse)/clse npg6
05:28:31  14  ,(clse8-clse)/clse npg8
05:28:31  15  FROM tr10
05:28:31  16  -- prevent divide by 0:
05:28:31  17  WHERE(ma1_4*ma1_8*ma1_16*ma1_32)!=0
05:28:31  18  ORDER BY pair,ydate
05:28:31  19  /

View created.

Elapsed: 00:00:00.04
05:28:32 SQL> 
05:28:32 SQL> -- Now that I have ma-slopes, I calculate stddev of their distributions.
05:28:32 SQL> -- Also I get sgn:
05:28:32 SQL> 
05:28:32 SQL> DROP TABLE tr14;

Table dropped.

Elapsed: 00:00:00.05
05:28:32 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.08
05:28:32 SQL> CREATE TABLE tr14 COMPRESS AS
05:28:32   2  -- CREATE OR REPLACE VIEW tr14 AS
05:28:32   3  SELECT
05:28:32   4  pair
05:28:32   5  ,ydate
05:28:32   6  ,clse
05:28:32   7  ,ma4_slope
05:28:32   8  ,ma8_slope
05:28:32   9  ,ma16_slope
05:28:32  10  ,ma32_slope
05:28:32  11  ,npg4
05:28:32  12  ,npg6
05:28:32  13  ,npg8
05:28:32  14  ,STDDEV(ma4_slope)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 200 PRECEDING AND CURRENT ROW)ma_stddev4
05:28:32  15  ,STDDEV(ma8_slope)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 200 PRECEDING AND CURRENT ROW)ma_stddev8
05:28:32  16  ,STDDEV(ma16_slope)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 200 PRECEDING AND CURRENT ROW)ma_stddev16
05:28:32  17  ,STDDEV(ma32_slope)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 200 PRECEDING AND CURRENT ROW)ma_stddev32
05:28:32  18  -- Sign of slope is a useful attribute:
05:28:32  19  ,SIGN(ma4_slope)sgn4
05:28:32  20  ,SIGN(ma8_slope)sgn8
05:28:32  21  ,SIGN(ma16_slope)sgn16
05:28:32  22  ,SIGN(ma32_slope)sgn32
05:28:32  23  FROM tr12
05:28:32  24  ORDER BY pair,ydate
05:28:32  25  /

Table created.

Elapsed: 00:00:11.24
05:28:43 SQL> 
05:28:43 SQL> -- Now get rows with steep slopes for ma32:
05:28:43 SQL> 
05:28:43 SQL> CREATE OR REPLACE VIEW tr16 AS
05:28:43   2  SELECT
05:28:43   3  pair
05:28:43   4  ,ydate
05:28:43   5  ,npg4
05:28:43   6  ,npg6
05:28:43   7  ,npg8
05:28:43   8  ,sgn32
05:28:43   9  FROM tr14
05:28:43  10  -- I want steep slopes:
05:28:43  11  WHERE ABS(ma32_slope) > 2*ma_stddev32
05:28:43  12  ORDER BY pair,ydate
05:28:43  13  /

View created.

Elapsed: 00:00:00.03
05:28:43 SQL> 
05:28:43 SQL> -- Now get future rows:
05:28:43 SQL> 
05:28:43 SQL> CREATE OR REPLACE VIEW tr162 AS
05:28:43   2  SELECT
05:28:43   3  pair
05:28:43   4  ,ydate
05:28:43   5  ,npg4
05:28:43   6  ,npg6
05:28:43   7  ,npg8
05:28:43   8  ,sgn32
05:28:43   9  ,LEAD(ydate,1,NULL)OVER(PARTITION BY pair ORDER BY ydate)ydate_ld
05:28:43  10  ,LEAD(npg4,1,NULL)OVER(PARTITION BY pair ORDER BY ydate)npg4_ld
05:28:43  11  ,LEAD(npg6,1,NULL)OVER(PARTITION BY pair ORDER BY ydate)npg6_ld
05:28:43  12  ,LEAD(npg8,1,NULL)OVER(PARTITION BY pair ORDER BY ydate)npg8_ld
05:28:43  13  FROM tr16
05:28:43  14  ORDER BY pair,ydate
05:28:43  15  /

View created.

Elapsed: 00:00:00.04
05:28:43 SQL> 
05:28:43 SQL> -- Look at npg4 :
05:28:43 SQL> CREATE OR REPLACE VIEW tr164 AS
05:28:43   2  SELECT
05:28:43   3  pair
05:28:43   4  ,npg4
05:28:43   5  ,sgn32
05:28:43   6  ,npg4_ld
05:28:43   7  FROM tr162
05:28:43   8  WHERE ydate_ld BETWEEN ydate + 50/60/24 AND ydate + 400/60/24
05:28:43   9  ORDER BY pair,ydate
05:28:43  10  /

View created.

Elapsed: 00:00:00.04
05:28:43 SQL> 
05:28:43 SQL> -- Look for CORR() tween large npg4 and npg4_ld
05:28:43 SQL> 
05:28:43 SQL> SELECT
05:28:43   2  pair
05:28:43   3  ,sgn32
05:28:43   4  ,ROUND(sgn32 * AVG(npg4),4)sgn32_x_npg4
05:28:43   5  ,ROUND(sgn32 * AVG(npg4_ld),4)sgn32_x_npg4_ld
05:28:43   6  ,COUNT(pair)cnt
05:28:43   7  FROM tr164
05:28:43   8  WHERE sgn32 * npg4 < -0.0004
05:28:43   9  GROUP BY pair,sgn32
05:28:43  10  ORDER BY pair,sgn32
05:28:43  11  /

PAIR	      SGN32 SGN32_X_NPG4 SGN32_X_NPG4_LD	CNT
-------- ---------- ------------ --------------- ----------
aud_usd 	 -1	  -.0014	  -.0008	 19
aud_usd 	  1	   -.002	  -.0005	 15
eur_usd 	 -1	  -.0013	  -.0001	 12
eur_usd 	  1	  -.0012	  -.0005	 16
gbp_usd 	 -1	  -.0012	   .0006	 18
gbp_usd 	  1	  -.0023	  -.0002	 18
usd_cad 	 -1	  -.0022	  -.0005	 17
usd_cad 	  1	  -.0016	  -.0001	 23
usd_chf 	 -1	  -.0013	       0	 19
usd_chf 	  1	  -.0017	   .0001	 12
usd_jpy 	 -1	  -.0012	   .0003	 19
usd_jpy 	  1	  -.0012	  -.0002	 14

12 rows selected.

Elapsed: 00:00:00.88
05:28:44 SQL> 
05:28:44 SQL> -- Look at npg6 :
05:28:44 SQL> CREATE OR REPLACE VIEW tr166 AS
05:28:44   2  SELECT
05:28:44   3  pair
05:28:44   4  ,npg6
05:28:44   5  ,sgn32
05:28:44   6  ,npg6_ld
05:28:44   7  FROM tr162
05:28:44   8  WHERE ydate_ld BETWEEN ydate + 70/60/24 AND ydate + 600/60/24
05:28:44   9  ORDER BY pair,ydate
05:28:44  10  /

View created.

Elapsed: 00:00:00.03
05:28:44 SQL> 
05:28:44 SQL> 
05:28:44 SQL> -- Look for CORR() tween large npg6 and npg6_ld
05:28:44 SQL> 
05:28:44 SQL> SELECT
05:28:44   2  pair
05:28:44   3  ,sgn32
05:28:44   4  ,ROUND(sgn32 * AVG(npg6),4)sgn32_x_npg6
05:28:44   5  ,ROUND(sgn32 * AVG(npg6_ld),4)sgn32_x_npg6_ld
05:28:44   6  ,COUNT(pair)cnt
05:28:44   7  FROM tr166
05:28:44   8  WHERE sgn32 * npg6 < -0.0006
05:28:44   9  GROUP BY pair,sgn32
05:28:44  10  ORDER BY pair,sgn32
05:28:44  11  /

PAIR	      SGN32 SGN32_X_NPG6 SGN32_X_NPG6_LD	CNT
-------- ---------- ------------ --------------- ----------
aud_usd 	 -1	   -.002	  -.0002	 21
aud_usd 	  1	  -.0022	       0	 19
eur_usd 	 -1	  -.0017	  -.0004	 13
eur_usd 	  1	  -.0017	  -.0011	 12
gbp_usd 	 -1	   -.002	   .0006	 11
gbp_usd 	  1	  -.0027	  -.0004	 17
usd_cad 	 -1	  -.0025	  -.0003	 21
usd_cad 	  1	  -.0017	       0	 16
usd_chf 	 -1	  -.0019	   .0003	 19
usd_chf 	  1	  -.0023	   .0001	 16
usd_jpy 	 -1	  -.0016	   .0004	 24
usd_jpy 	  1	  -.0014	   .0001	 15

12 rows selected.

Elapsed: 00:00:00.24
05:28:44 SQL> 
05:28:44 SQL> -- Look at npg8 :
05:28:44 SQL> CREATE OR REPLACE VIEW tr168 AS
05:28:44   2  SELECT
05:28:44   3  pair
05:28:44   4  ,npg8
05:28:44   5  ,sgn32
05:28:44   6  ,npg8_ld
05:28:44   7  FROM tr162
05:28:44   8  WHERE ydate_ld BETWEEN ydate + 90/60/24 AND ydate + 900/60/24
05:28:44   9  ORDER BY pair,ydate
05:28:44  10  /

View created.

Elapsed: 00:00:00.04
05:28:44 SQL> 
05:28:44 SQL> -- Look for CORR() tween large npg8 and npg8_ld
05:28:44 SQL> 
05:28:44 SQL> SELECT
05:28:44   2  pair
05:28:44   3  ,sgn32
05:28:44   4  ,ROUND(sgn32 * AVG(npg8),4)sgn32_x_npg8
05:28:44   5  ,ROUND(sgn32 * AVG(npg8_ld),4)sgn32_x_npg8_ld
05:28:44   6  ,COUNT(pair)cnt
05:28:44   7  FROM tr168
05:28:44   8  WHERE sgn32 * npg8 < -0.0008
05:28:44   9  GROUP BY pair,sgn32
05:28:44  10  ORDER BY pair,sgn32
05:28:44  11  /

PAIR	      SGN32 SGN32_X_NPG8 SGN32_X_NPG8_LD	CNT
-------- ---------- ------------ --------------- ----------
aud_usd 	 -1	  -.0024	  -.0006	 30
aud_usd 	  1	  -.0024	  -.0004	 25
eur_usd 	 -1	  -.0025	  -.0004	 15
eur_usd 	  1	   -.002	   -.001	 15
gbp_usd 	 -1	   -.002	   .0004	 14
gbp_usd 	  1	  -.0029	  -.0005	 19
usd_cad 	 -1	  -.0025	   .0001	 18
usd_cad 	  1	  -.0023	  -.0001	 12
usd_chf 	 -1	  -.0019	  -.0001	 19
usd_chf 	  1	  -.0024	   .0002	 16
usd_jpy 	 -1	  -.0019	   .0004	 20
usd_jpy 	  1	  -.0018	  -.0005	 21

12 rows selected.

Elapsed: 00:00:00.24
05:28:44 SQL> 
05:28:44 SQL> 
05:28:44 SQL> -- Now get rows with steep slopes for ma16:
05:28:44 SQL> 
05:28:44 SQL> CREATE OR REPLACE VIEW tr18 AS
05:28:44   2  SELECT
05:28:44   3  pair
05:28:44   4  ,ydate
05:28:44   5  ,npg4
05:28:44   6  ,npg6
05:28:44   7  ,npg8
05:28:44   8  ,sgn16
05:28:44   9  FROM tr14
05:28:44  10  -- I want steep slopes:
05:28:44  11  WHERE ABS(ma16_slope) > 2*ma_stddev16
05:28:44  12  ORDER BY pair,ydate
05:28:44  13  /

View created.

Elapsed: 00:00:00.03
05:28:44 SQL> 
05:28:44 SQL> -- Now get future rows:
05:28:44 SQL> 
05:28:44 SQL> CREATE OR REPLACE VIEW tr182 AS
05:28:44   2  SELECT
05:28:44   3  pair
05:28:44   4  ,ydate
05:28:44   5  ,npg4
05:28:44   6  ,npg6
05:28:44   7  ,npg8
05:28:44   8  ,sgn16
05:28:44   9  ,LEAD(ydate,1,NULL)OVER(PARTITION BY pair ORDER BY ydate)ydate_ld
05:28:44  10  ,LEAD(npg4,1,NULL)OVER(PARTITION BY pair ORDER BY ydate)npg4_ld
05:28:44  11  ,LEAD(npg6,1,NULL)OVER(PARTITION BY pair ORDER BY ydate)npg6_ld
05:28:44  12  ,LEAD(npg8,1,NULL)OVER(PARTITION BY pair ORDER BY ydate)npg8_ld
05:28:44  13  FROM tr18
05:28:44  14  ORDER BY pair,ydate
05:28:44  15  /

View created.

Elapsed: 00:00:00.03
05:28:45 SQL> 
05:28:45 SQL> -- Look at npg4 :
05:28:45 SQL> 
05:28:45 SQL> CREATE OR REPLACE VIEW tr184 AS
05:28:45   2  SELECT
05:28:45   3  pair
05:28:45   4  ,npg4
05:28:45   5  ,sgn16
05:28:45   6  ,npg4_ld
05:28:45   7  FROM tr182
05:28:45   8  WHERE ydate_ld BETWEEN ydate + 50/60/24 AND ydate + 400/60/24
05:28:45   9  ORDER BY pair,ydate
05:28:45  10  /

View created.

Elapsed: 00:00:00.04
05:28:45 SQL> 
05:28:45 SQL> -- Look for CORR() tween large npg4 and npg4_ld
05:28:45 SQL> 
05:28:45 SQL> SELECT
05:28:45   2  pair
05:28:45   3  ,sgn16
05:28:45   4  ,ROUND(sgn16 * AVG(npg4),4)sgn16_x_npg4
05:28:45   5  ,ROUND(sgn16 * AVG(npg4_ld),4)sgn16_x_npg4_ld
05:28:45   6  ,COUNT(pair)cnt
05:28:45   7  FROM tr184
05:28:45   8  WHERE sgn16 * npg4 < -0.0004
05:28:45   9  GROUP BY pair,sgn16
05:28:45  10  ORDER BY pair,sgn16
05:28:45  11  /

PAIR	      SGN16 SGN16_X_NPG4 SGN16_X_NPG4_LD	CNT
-------- ---------- ------------ --------------- ----------
aud_usd 	 -1	  -.0017	       0	 45
aud_usd 	  1	  -.0017	   .0002	 33
eur_usd 	 -1	  -.0017	  -.0004	 30
eur_usd 	  1	  -.0012	  -.0004	 29
gbp_usd 	 -1	  -.0013	   .0001	 49
gbp_usd 	  1	  -.0014	  -.0003	 30
usd_cad 	 -1	  -.0018	   .0002	 29
usd_cad 	  1	  -.0018	  -.0003	 46
usd_chf 	 -1	  -.0015	  -.0002	 45
usd_chf 	  1	  -.0015	   .0001	 33
usd_jpy 	 -1	  -.0014	       0	 47
usd_jpy 	  1	  -.0011	   .0002	 38

12 rows selected.

Elapsed: 00:00:00.23
05:28:45 SQL> 
05:28:45 SQL> 
05:28:45 SQL> -- Look at npg6 :
05:28:45 SQL> 
05:28:45 SQL> CREATE OR REPLACE VIEW tr186 AS
05:28:45   2  SELECT
05:28:45   3  pair
05:28:45   4  ,npg6
05:28:45   5  ,sgn16
05:28:45   6  ,npg6_ld
05:28:45   7  FROM tr182
05:28:45   8  WHERE ydate_ld BETWEEN ydate + 70/60/24 AND ydate + 600/60/24
05:28:45   9  ORDER BY pair,ydate
05:28:45  10  /

View created.

Elapsed: 00:00:00.04
05:28:45 SQL> 
05:28:45 SQL> -- Look for CORR() tween large npg6 and npg6_ld
05:28:45 SQL> 
05:28:45 SQL> SELECT
05:28:45   2  pair
05:28:45   3  ,sgn16
05:28:45   4  ,ROUND(sgn16 * AVG(npg6),4)sgn16_x_npg6
05:28:45   5  ,ROUND(sgn16 * AVG(npg6_ld),4)sgn16_x_npg6_ld
05:28:45   6  ,COUNT(pair)cnt
05:28:45   7  FROM tr186
05:28:45   8  WHERE sgn16 * npg6 < -0.0006
05:28:45   9  GROUP BY pair,sgn16
05:28:45  10  ORDER BY pair,sgn16
05:28:45  11  /

PAIR	      SGN16 SGN16_X_NPG6 SGN16_X_NPG6_LD	CNT
-------- ---------- ------------ --------------- ----------
aud_usd 	 -1	  -.0021	  -.0001	 54
aud_usd 	  1	  -.0018	  -.0002	 35
eur_usd 	 -1	  -.0018	  -.0003	 37
eur_usd 	  1	  -.0015	  -.0001	 37
gbp_usd 	 -1	  -.0019	   .0004	 43
gbp_usd 	  1	  -.0017	  -.0003	 38
usd_cad 	 -1	  -.0019	  -.0002	 29
usd_cad 	  1	  -.0022	  -.0004	 44
usd_chf 	 -1	  -.0018	  -.0001	 40
usd_chf 	  1	   -.002	  -.0004	 31
usd_jpy 	 -1	   -.002	  -.0001	 44
usd_jpy 	  1	  -.0013	   .0002	 31

12 rows selected.

Elapsed: 00:00:00.22
05:28:45 SQL> 
05:28:45 SQL> -- Look at npg8 :
05:28:45 SQL> 
05:28:45 SQL> CREATE OR REPLACE VIEW tr186 AS
05:28:45   2  SELECT
05:28:45   3  pair
05:28:45   4  ,npg8
05:28:45   5  ,sgn16
05:28:45   6  ,npg8_ld
05:28:45   7  FROM tr182
05:28:45   8  WHERE ydate_ld BETWEEN ydate + 90/60/24 AND ydate + 900/60/24
05:28:45   9  ORDER BY pair,ydate
05:28:45  10  /

View created.

Elapsed: 00:00:00.04
05:28:45 SQL> 
05:28:45 SQL> -- Look for CORR() tween large npg8 and npg8_ld
05:28:45 SQL> 
05:28:45 SQL> SELECT
05:28:45   2  pair
05:28:45   3  ,sgn16
05:28:45   4  ,ROUND(sgn16 * AVG(npg8),4)sgn16_x_npg8
05:28:45   5  ,ROUND(sgn16 * AVG(npg8_ld),4)sgn16_x_npg8_ld
05:28:45   6  ,COUNT(pair)cnt
05:28:45   7  FROM tr186
05:28:45   8  WHERE sgn16 * npg8 < -0.0008
05:28:45   9  GROUP BY pair,sgn16
05:28:45  10  ORDER BY pair,sgn16
05:28:45  11  /

PAIR	      SGN16 SGN16_X_NPG8 SGN16_X_NPG8_LD	CNT
-------- ---------- ------------ --------------- ----------
aud_usd 	 -1	  -.0025	  -.0002	 61
aud_usd 	  1	  -.0022	  -.0003	 37
eur_usd 	 -1	  -.0019	   .0002	 42
eur_usd 	  1	  -.0023	   .0005	 29
gbp_usd 	 -1	  -.0022	   .0002	 42
gbp_usd 	  1	  -.0023	  -.0005	 31
usd_cad 	 -1	  -.0025	  -.0005	 26
usd_cad 	  1	  -.0022	  -.0003	 43
usd_chf 	 -1	  -.0021	  -.0002	 41
usd_chf 	  1	   -.002	  -.0003	 31
usd_jpy 	 -1	  -.0019	   .0003	 47
usd_jpy 	  1	  -.0017	   .0002	 36

12 rows selected.

Elapsed: 00:00:00.23
05:28:45 SQL> 
05:28:45 SQL> -- Now get rows with steep slopes for ma8:
05:28:45 SQL> 
05:28:45 SQL> CREATE OR REPLACE VIEW tr20 AS
05:28:45   2  SELECT
05:28:45   3  pair
05:28:45   4  ,ydate
05:28:45   5  ,npg4
05:28:45   6  ,npg6
05:28:45   7  ,npg8
05:28:45   8  ,sgn8
05:28:45   9  FROM tr14
05:28:45  10  -- I want steep slopes:
05:28:45  11  WHERE ABS(ma8_slope) > 2*ma_stddev8
05:28:45  12  ORDER BY pair,ydate
05:28:45  13  /

View created.

Elapsed: 00:00:00.04
05:28:45 SQL> 
05:28:45 SQL> 
05:28:45 SQL> -- Now get future rows:
05:28:45 SQL> 
05:28:45 SQL> CREATE OR REPLACE VIEW tr202 AS
05:28:45   2  SELECT
05:28:45   3  pair
05:28:45   4  ,ydate
05:28:45   5  ,npg4
05:28:45   6  ,npg6
05:28:45   7  ,npg8
05:28:45   8  ,sgn8
05:28:45   9  ,LEAD(ydate,1,NULL)OVER(PARTITION BY pair ORDER BY ydate)ydate_ld
05:28:45  10  ,LEAD(npg4,1,NULL)OVER(PARTITION BY pair ORDER BY ydate)npg4_ld
05:28:45  11  ,LEAD(npg6,1,NULL)OVER(PARTITION BY pair ORDER BY ydate)npg6_ld
05:28:45  12  ,LEAD(npg8,1,NULL)OVER(PARTITION BY pair ORDER BY ydate)npg8_ld
05:28:45  13  FROM tr20
05:28:45  14  ORDER BY pair,ydate
05:28:45  15  /

View created.

Elapsed: 00:00:00.04
05:28:45 SQL> 
05:28:45 SQL> -- Look at npg4 :
05:28:45 SQL> 
05:28:45 SQL> CREATE OR REPLACE VIEW tr204 AS
05:28:45   2  SELECT
05:28:45   3  pair
05:28:45   4  ,npg4
05:28:45   5  ,sgn8
05:28:45   6  ,npg4_ld
05:28:45   7  FROM tr202
05:28:45   8  WHERE ydate_ld BETWEEN ydate + 50/60/24 AND ydate + 400/60/24
05:28:45   9  ORDER BY pair,ydate
05:28:45  10  /

View created.

Elapsed: 00:00:00.04
05:28:45 SQL> 
05:28:45 SQL> -- Look for CORR() tween large npg4 and npg4_ld
05:28:45 SQL> 
05:28:45 SQL> SELECT
05:28:45   2  pair
05:28:45   3  ,sgn8
05:28:45   4  ,ROUND(sgn8 * AVG(npg4),4)sgn8_x_npg4
05:28:45   5  ,ROUND(sgn8 * AVG(npg4_ld),4)sgn8_x_npg4_ld
05:28:45   6  ,COUNT(pair)cnt
05:28:45   7  FROM tr204
05:28:45   8  WHERE sgn8 * npg4 < -0.0004
05:28:45   9  GROUP BY pair,sgn8
05:28:45  10  ORDER BY pair,sgn8
05:28:45  11  /

PAIR	       SGN8 SGN8_X_NPG4 SGN8_X_NPG4_LD	      CNT
-------- ---------- ----------- -------------- ----------
aud_usd 	 -1	 -.0017 	 .0004	       88
aud_usd 	  1	 -.0016 	-.0001	       62
eur_usd 	 -1	 -.0013 	-.0003	       73
eur_usd 	  1	 -.0013 	 .0002	       74
gbp_usd 	 -1	 -.0014 	-.0001	      101
gbp_usd 	  1	 -.0015 	     0	       67
usd_cad 	 -1	 -.0015 	 .0002	       90
usd_cad 	  1	 -.0017 	     0	      102
usd_chf 	 -1	 -.0016 	-.0001	       76
usd_chf 	  1	 -.0014 	-.0001	       72
usd_jpy 	 -1	 -.0014 	-.0001	       82
usd_jpy 	  1	 -.0012 	     0	       66

12 rows selected.

Elapsed: 00:00:00.24
05:28:46 SQL> 
05:28:46 SQL> -- Look at npg6 :
05:28:46 SQL> 
05:28:46 SQL> CREATE OR REPLACE VIEW tr206 AS
05:28:46   2  SELECT
05:28:46   3  pair
05:28:46   4  ,npg6
05:28:46   5  ,sgn8
05:28:46   6  ,npg6_ld
05:28:46   7  FROM tr202
05:28:46   8  WHERE ydate_ld BETWEEN ydate + 70/60/24 AND ydate + 600/60/24
05:28:46   9  ORDER BY pair,ydate
05:28:46  10  /

View created.

Elapsed: 00:00:00.04
05:28:46 SQL> 
05:28:46 SQL> -- Look for CORR() tween large npg6 and npg6_ld
05:28:46 SQL> 
05:28:46 SQL> SELECT
05:28:46   2  pair
05:28:46   3  ,sgn8
05:28:46   4  ,ROUND(sgn8 * AVG(npg6),4)sgn8_x_npg6
05:28:46   5  ,ROUND(sgn8 * AVG(npg6_ld),4)sgn8_x_npg6_ld
05:28:46   6  ,COUNT(pair)cnt
05:28:46   7  FROM tr206
05:28:46   8  WHERE sgn8 * npg6 < -0.0006
05:28:46   9  GROUP BY pair,sgn8
05:28:46  10  ORDER BY pair,sgn8
05:28:46  11  /

PAIR	       SGN8 SGN8_X_NPG6 SGN8_X_NPG6_LD	      CNT
-------- ---------- ----------- -------------- ----------
aud_usd 	 -1	 -.0019 	 .0001	       95
aud_usd 	  1	  -.002 	-.0003	       64
eur_usd 	 -1	 -.0016 	-.0001	       80
eur_usd 	  1	 -.0017 	 .0001	       73
gbp_usd 	 -1	 -.0016 	     0	       80
gbp_usd 	  1	 -.0015 	-.0002	       77
usd_cad 	 -1	 -.0017 	 .0001	       73
usd_cad 	  1	  -.002 	     0	       73
usd_chf 	 -1	 -.0018 	     0	       77
usd_chf 	  1	 -.0017 	 .0001	       62
usd_jpy 	 -1	 -.0016 	-.0001	       74
usd_jpy 	  1	 -.0015 	-.0001	       64

12 rows selected.

Elapsed: 00:00:00.23
05:28:46 SQL> 
05:28:46 SQL> 
05:28:46 SQL> 
05:28:46 SQL> 
05:28:46 SQL> -- Look at npg8 :
05:28:46 SQL> 
05:28:46 SQL> CREATE OR REPLACE VIEW tr208 AS
05:28:46   2  SELECT
05:28:46   3  pair
05:28:46   4  ,npg8
05:28:46   5  ,sgn8
05:28:46   6  ,npg8_ld
05:28:46   7  FROM tr202
05:28:46   8  WHERE ydate_ld BETWEEN ydate + 90/60/24 AND ydate + 900/60/24
05:28:46   9  ORDER BY pair,ydate
05:28:46  10  /

View created.

Elapsed: 00:00:00.05
05:28:46 SQL> 
05:28:46 SQL> -- Look for CORR() tween large npg8 and npg8_ld
05:28:46 SQL> 
05:28:46 SQL> SELECT
05:28:46   2  pair
05:28:46   3  ,sgn8
05:28:46   4  ,ROUND(sgn8 * AVG(npg8),4)sgn8_x_npg8
05:28:46   5  ,ROUND(sgn8 * AVG(npg8_ld),4)sgn8_x_npg8_ld
05:28:46   6  ,COUNT(pair)cnt
05:28:46   7  FROM tr208
05:28:46   8  WHERE sgn8 * npg8 < -0.0008
05:28:46   9  GROUP BY pair,sgn8
05:28:46  10  ORDER BY pair,sgn8
05:28:46  11  /

PAIR	       SGN8 SGN8_X_NPG8 SGN8_X_NPG8_LD	      CNT
-------- ---------- ----------- -------------- ----------
aud_usd 	 -1	  -.002 	 .0001	       97
aud_usd 	  1	 -.0018 	-.0003	       61
eur_usd 	 -1	 -.0017 	     0	       79
eur_usd 	  1	 -.0017 	-.0001	       54
gbp_usd 	 -1	 -.0018 	-.0001	       71
gbp_usd 	  1	 -.0017 	-.0005	       58
usd_cad 	 -1	 -.0019 	-.0001	       57
usd_cad 	  1	 -.0022 	 .0004	       57
usd_chf 	 -1	 -.0018 	-.0002	       63
usd_chf 	  1	 -.0017 	 .0003	       59
usd_jpy 	 -1	 -.0019 	-.0001	       72
usd_jpy 	  1	 -.0016 	 .0001	       58

12 rows selected.

Elapsed: 00:00:00.22
05:28:46 SQL> 
05:28:46 SQL> 
05:28:46 SQL> 
05:28:46 SQL> 
05:28:46 SQL> EXIT
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
