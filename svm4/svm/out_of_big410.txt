
SQL*Plus: Release 11.2.0.1.0 Production on Sat Dec 25 08:39:41 2010

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

08:39:41 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
08:39:41 SQL> 08:39:41 SQL> --
08:39:41 SQL> -- eur410.sql
08:39:41 SQL> --
08:39:41 SQL> 
08:39:41 SQL> -- Creates views and tables for backtesting a forex SVM strategy
08:39:41 SQL> 
08:39:41 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.32
08:39:42 SQL> 
08:39:42 SQL> -- I created di5min here:
08:39:42 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
08:39:42 SQL> 
08:39:42 SQL> CREATE OR REPLACE VIEW svm4102 AS
08:39:42   2  SELECT
08:39:42   3  pair
08:39:42   4  ,ydate
08:39:42   5  ,prdate
08:39:42   6  ,rownum rnum -- acts as t in my time-series
08:39:42   7  ,clse
08:39:42   8  -- Derive a bunch of attributes from clse, the latest price:
08:39:42   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*2 PRECEDING AND CURRENT ROW)min2
08:39:42  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*3 PRECEDING AND CURRENT ROW)min3
08:39:42  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
08:39:42  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
08:39:42  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
08:39:42  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
08:39:42  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
08:39:42  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
08:39:42  17  --
08:39:42  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*2 PRECEDING AND CURRENT ROW)avg2
08:39:42  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*3 PRECEDING AND CURRENT ROW)avg3
08:39:42  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
08:39:42  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
08:39:42  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
08:39:42  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
08:39:42  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
08:39:42  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
08:39:42  26  --
08:39:42  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*2 PRECEDING AND CURRENT ROW)max2
08:39:42  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*3 PRECEDING AND CURRENT ROW)max3
08:39:42  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
08:39:42  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
08:39:42  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
08:39:42  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
08:39:42  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
08:39:42  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
08:39:42  35  ,LEAD(clse,12*4,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld4
08:39:42  36  FROM di5min
08:39:42  37  WHERE pair LIKE'%eur%'
08:39:42  38  AND ydate > sysdate - 190
08:39:42  39  ORDER BY ydate
08:39:42  40  /

View created.

Elapsed: 00:00:00.06
08:39:42 SQL> 
08:39:42 SQL> -- rpt
08:39:42 SQL> 
08:39:42 SQL> SELECT
08:39:42   2  pair
08:39:42   3  ,COUNT(pair)
08:39:42   4  ,MIN(clse),MAX(clse)
08:39:42   5  ,MIN(avg4),MAX(avg4)
08:39:42   6  ,MIN(ydate),MAX(ydate)
08:39:42   7  FROM svm4102
08:39:42   8  GROUP BY pair
08:39:42   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG4)  MAX(AVG4) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_usd       20738    1.29735	   1.4273  1.2987301 1.42478571 2010-09-15 22:25:01 2010-12-24 21:55:00

Elapsed: 00:00:00.82
08:39:43 SQL> 
08:39:43 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
08:39:43 SQL> DROP TABLE svm4122;

Table dropped.

Elapsed: 00:00:00.22
08:39:43 SQL> CREATE TABLE svm4122 COMPRESS AS
08:39:43   2  SELECT
08:39:43   3  pair
08:39:43   4  ,ydate
08:39:43   5  ,prdate
08:39:43   6  ,clse
08:39:43   7  -- g4 is important. I want to predict g4:
08:39:43   8  ,ld4 - clse g4
08:39:43   9  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
08:39:43  10  -- I want more attributes from the ones I derived above:
08:39:43  11  -- clse relation to moving-min
08:39:43  12  ,clse-min2  cm2
08:39:43  13  ,clse-min3  cm3
08:39:43  14  ,clse-min4  cm4
08:39:43  15  ,clse-min6  cm6
08:39:43  16  ,clse-min8  cm8
08:39:43  17  ,clse-min10 cm10
08:39:43  18  ,clse-min12 cm12
08:39:43  19  ,clse-min14 cm14
08:39:43  20  -- clse relation to moving-avg
08:39:43  21  ,clse-avg2  ca2
08:39:43  22  ,clse-avg3  ca3
08:39:43  23  ,clse-avg4  ca4
08:39:43  24  ,clse-avg6  ca6
08:39:43  25  ,clse-avg8  ca8
08:39:43  26  ,clse-avg10 ca10
08:39:43  27  ,clse-avg12 ca12
08:39:43  28  ,clse-avg14 ca14
08:39:43  29  -- clse relation to moving-max
08:39:43  30  ,clse-max2  cx2
08:39:43  31  ,clse-max3  cx3
08:39:43  32  ,clse-max4  cx4
08:39:43  33  ,clse-max6  cx6
08:39:43  34  ,clse-max8  cx8
08:39:43  35  ,clse-max10 cx10
08:39:43  36  ,clse-max12 cx12
08:39:43  37  ,clse-max14 cx14
08:39:43  38  -- Derive more attributes.
08:39:43  39  -- I want to use CORR() here to help SVM see the shape of the series.
08:39:43  40  -- But COVAR_POP is more stable:
08:39:43  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*2  PRECEDING AND CURRENT ROW)crr2
08:39:43  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*3  PRECEDING AND CURRENT ROW)crr3
08:39:43  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
08:39:43  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
08:39:43  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
08:39:43  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
08:39:43  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
08:39:43  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
08:39:43  49  -- Derive date related attributes:
08:39:43  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
08:39:43  51  ,0+TO_CHAR(ydate,'D')d
08:39:43  52  ,0+TO_CHAR(ydate,'W')w
08:39:43  53  -- mpm stands for minutes-past-midnight:
08:39:43  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
08:39:43  55  -- mph stands for minutes-past-hour:
08:39:43  56  ,0+TO_CHAR(ydate,'MI')mph
08:39:43  57  FROM svm4102
08:39:43  58  ORDER BY ydate
08:39:43  59  /

Table created.

Elapsed: 00:00:02.36
08:39:45 SQL> 
08:39:45 SQL> -- rpt
08:39:45 SQL> 
08:39:45 SQL> SELECT
08:39:45   2  pair
08:39:45   3  ,COUNT(pair)
08:39:45   4  ,MIN(clse),MAX(clse)
08:39:45   5  ,MIN(ydate),MAX(ydate)
08:39:45   6  FROM svm4122
08:39:45   7  GROUP BY pair
08:39:45   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_usd       20738    1.29735	   1.4273 2010-09-15 22:25:01 2010-12-24 21:55:00

Elapsed: 00:00:00.04
08:39:45 SQL> 
08:39:45 SQL> -- Prepare for derivation of NTILE based params:
08:39:45 SQL> 
08:39:45 SQL> DROP TABLE svm4142;

Table dropped.

Elapsed: 00:00:00.16
08:39:45 SQL> CREATE TABLE svm4142 COMPRESS AS
08:39:45   2  SELECT
08:39:45   3  pair
08:39:45   4  ,ydate
08:39:45   5  ,prdate
08:39:45   6  ,clse
08:39:45   7  ,g4
08:39:45   8  ,CASE WHEN g4 IS NULL THEN NULL WHEN g4 > 0.0010 THEN 'up' ELSE 'nup' END gatt
08:39:45   9  ,CASE WHEN g4 IS NULL THEN NULL WHEN g4< -0.0010 THEN 'up' ELSE 'nup' END gattn
08:39:45  10  ,CASE WHEN trend IS NULL THEN 1
08:39:45  11  	    WHEN trend =0      THEN 1
08:39:45  12  	    ELSE trend END trend
08:39:45  13  ,cm2
08:39:45  14  ,cm3
08:39:45  15  ,cm4
08:39:45  16  ,cm6
08:39:45  17  ,cm8
08:39:45  18  ,cm10
08:39:45  19  ,cm12
08:39:45  20  ,cm14
08:39:45  21  --
08:39:45  22  ,ca2
08:39:45  23  ,ca3
08:39:45  24  ,ca4
08:39:45  25  ,ca6
08:39:45  26  ,ca8
08:39:45  27  ,ca10
08:39:45  28  ,ca12
08:39:45  29  ,ca14
08:39:45  30  --
08:39:45  31  ,cx2
08:39:45  32  ,cx3
08:39:45  33  ,cx4
08:39:45  34  ,cx6
08:39:45  35  ,cx8
08:39:45  36  ,cx10
08:39:45  37  ,cx12
08:39:45  38  ,cx14
08:39:45  39  --
08:39:45  40  ,crr2
08:39:45  41  ,crr3
08:39:45  42  ,crr4
08:39:45  43  ,crr6
08:39:45  44  ,crr8
08:39:45  45  ,crr10
08:39:45  46  ,crr12
08:39:45  47  ,crr14
08:39:45  48  --
08:39:45  49  ,hh
08:39:45  50  ,d
08:39:45  51  ,w
08:39:45  52  ,mpm
08:39:45  53  ,mph
08:39:45  54  FROM svm4122
08:39:45  55  ORDER BY ydate
08:39:45  56  /

Table created.

Elapsed: 00:00:00.39
08:39:46 SQL> 
08:39:46 SQL> -- rpt
08:39:46 SQL> 
08:39:46 SQL> SELECT
08:39:46   2  pair
08:39:46   3  ,trend
08:39:46   4  ,gatt
08:39:46   5  ,COUNT(pair)
08:39:46   6  ,AVG(g4)
08:39:46   7  FROM svm4142
08:39:46   8  GROUP BY pair,trend,gatt
08:39:46   9  ORDER BY pair,trend,gatt
08:39:46  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G4)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6567 -.00231437
eur_usd 	-1 up	      3692 .003735655
eur_usd 	-1		25
eur_usd 	 1 nup	      6354 -.00230615
eur_usd 	 1 up	      4077 .004072422
eur_usd 	 1		23

6 rows selected.

Elapsed: 00:00:00.04
08:39:46 SQL> 
08:39:46 SQL> 
08:39:46 SQL> -- Derive NTILE based params:
08:39:46 SQL> 
08:39:46 SQL> DROP TABLE svm4162;

Table dropped.

Elapsed: 00:00:00.19
08:39:46 SQL> CREATE TABLE svm4162 COMPRESS AS
08:39:46   2  SELECT
08:39:46   3  pair
08:39:46   4  ,ydate
08:39:46   5  ,prdate
08:39:46   6  ,clse
08:39:46   7  ,g4
08:39:46   8  ,gatt
08:39:46   9  ,gattn
08:39:46  10  ,trend
08:39:46  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
08:39:46  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
08:39:46  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
08:39:46  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
08:39:46  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
08:39:46  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
08:39:46  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm2  )att06
08:39:46  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm3  )att07
08:39:46  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
08:39:46  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
08:39:46  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
08:39:46  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
08:39:46  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
08:39:46  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
08:39:46  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca2  )att14
08:39:46  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca3  )att15
08:39:46  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
08:39:46  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
08:39:46  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
08:39:46  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
08:39:46  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
08:39:46  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
08:39:46  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx2  )att22
08:39:46  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx3  )att23
08:39:46  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
08:39:46  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
08:39:46  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
08:39:46  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
08:39:46  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
08:39:46  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
08:39:46  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr2 )att30
08:39:46  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr3 )att31
08:39:46  43  ,hh  att32
08:39:46  44  ,d   att33
08:39:46  45  ,w   att34
08:39:46  46  ,mpm att35
08:39:46  47  ,mph att36
08:39:46  48  ,trend att37
08:39:46  49  FROM svm4142
08:39:46  50  ORDER BY ydate
08:39:46  51  /

Table created.

Elapsed: 00:00:04.89
08:39:51 SQL> 
08:39:51 SQL> -- rpt
08:39:51 SQL> 
08:39:51 SQL> SELECT
08:39:51   2  pair
08:39:51   3  ,trend
08:39:51   4  ,gatt
08:39:51   5  ,COUNT(pair)
08:39:51   6  ,AVG(g4)
08:39:51   7  FROM svm4162
08:39:51   8  GROUP BY pair,trend,gatt
08:39:51   9  ORDER BY pair,trend,gatt
08:39:51  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G4)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6567 -.00231437
eur_usd 	-1 up	      3692 .003735655
eur_usd 	-1		25
eur_usd 	 1 nup	      6354 -.00230615
eur_usd 	 1 up	      4077 .004072422
eur_usd 	 1		23

6 rows selected.

Elapsed: 00:00:00.03
08:39:51 SQL> 
08:39:51 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.10
08:39:51 SQL> CREATE TABLE modsrc COMPRESS AS
08:39:51   2  SELECT
08:39:51   3  pair
08:39:51   4  ,ydate
08:39:51   5  ,prdate
08:39:51   6  ,trend
08:39:51   7  ,g4
08:39:51   8  ,gatt
08:39:51   9  ,gattn
08:39:51  10  FROM svm4162
08:39:51  11  /

Table created.

Elapsed: 00:00:00.10
08:39:51 SQL> 
08:39:51 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.28
08:39:51 SQL> 
08:39:51 SQL> DROP   TABLE eur_ms410 ;

Table dropped.

Elapsed: 00:00:00.10
08:39:51 SQL> CREATE TABLE eur_ms410 COMPRESS AS
08:39:51   2  SELECT
08:39:51   3  ydate
08:39:51   4  ,trend eur_trend
08:39:51   5  ,g4    eur_g4
08:39:51   6  ,gatt  eur_gatt
08:39:51   7  ,gattn eur_gattn
08:39:51   8  FROM modsrc
08:39:51   9  /

Table created.

Elapsed: 00:00:00.07
08:39:52 SQL> 
08:39:52 SQL> ANALYZE TABLE eur_ms410 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
08:39:52 SQL> 
08:39:52 SQL> -- I need a copy of the attributes:
08:39:52 SQL> 
08:39:52 SQL> 
08:39:52 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.19
08:39:52 SQL> CREATE TABLE eur_att COMPRESS AS
08:39:52   2  SELECT
08:39:52   3  ydate
08:39:52   4  ,att00 eur_att00
08:39:52   5  ,att01 eur_att01
08:39:52   6  ,att02 eur_att02
08:39:52   7  ,att03 eur_att03
08:39:52   8  ,att04 eur_att04
08:39:52   9  ,att05 eur_att05
08:39:52  10  ,att06 eur_att06
08:39:52  11  ,att07 eur_att07
08:39:52  12  ,att08 eur_att08
08:39:52  13  ,att09 eur_att09
08:39:52  14  ,att10 eur_att10
08:39:52  15  ,att11 eur_att11
08:39:52  16  ,att12 eur_att12
08:39:52  17  ,att13 eur_att13
08:39:52  18  ,att14 eur_att14
08:39:52  19  ,att15 eur_att15
08:39:52  20  ,att16 eur_att16
08:39:52  21  ,att17 eur_att17
08:39:52  22  ,att18 eur_att18
08:39:52  23  ,att19 eur_att19
08:39:52  24  ,att20 eur_att20
08:39:52  25  ,att21 eur_att21
08:39:52  26  ,att22 eur_att22
08:39:52  27  ,att23 eur_att23
08:39:52  28  ,att24 eur_att24
08:39:52  29  ,att25 eur_att25
08:39:52  30  ,att26 eur_att26
08:39:52  31  ,att27 eur_att27
08:39:52  32  ,att28 eur_att28
08:39:52  33  ,att29 eur_att29
08:39:52  34  ,att30 eur_att30
08:39:52  35  ,att31 eur_att31
08:39:52  36  ,att32 eur_att32
08:39:52  37  ,att33 eur_att33
08:39:52  38  ,att34 eur_att34
08:39:52  39  ,att35 eur_att35
08:39:52  40  ,att36 eur_att36
08:39:52  41  ,att37 eur_att37
08:39:52  42  FROM svm4162
08:39:52  43  /

Table created.

Elapsed: 00:00:00.17
08:39:52 SQL> 
08:39:52 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.49
08:39:53 SQL> 
08:39:53 SQL> -- rpt
08:39:53 SQL> SELECT COUNT(*)FROM svm4102;

  COUNT(*)
----------
     20738

Elapsed: 00:00:00.80
08:39:53 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     20738

Elapsed: 00:00:00.00
08:39:53 SQL> 
08:39:53 SQL> --
08:39:53 SQL> -- aud410.sql
08:39:53 SQL> --
08:39:53 SQL> 
08:39:53 SQL> -- Creates views and tables for backtesting a forex SVM strategy
08:39:53 SQL> 
08:39:53 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.34
08:39:54 SQL> 
08:39:54 SQL> -- I created di5min here:
08:39:54 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
08:39:54 SQL> 
08:39:54 SQL> CREATE OR REPLACE VIEW svm4102 AS
08:39:54   2  SELECT
08:39:54   3  pair
08:39:54   4  ,ydate
08:39:54   5  ,prdate
08:39:54   6  ,rownum rnum -- acts as t in my time-series
08:39:54   7  ,clse
08:39:54   8  -- Derive a bunch of attributes from clse, the latest price:
08:39:54   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*2 PRECEDING AND CURRENT ROW)min2
08:39:54  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*3 PRECEDING AND CURRENT ROW)min3
08:39:54  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
08:39:54  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
08:39:54  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
08:39:54  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
08:39:54  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
08:39:54  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
08:39:54  17  --
08:39:54  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*2 PRECEDING AND CURRENT ROW)avg2
08:39:54  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*3 PRECEDING AND CURRENT ROW)avg3
08:39:54  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
08:39:54  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
08:39:54  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
08:39:54  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
08:39:54  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
08:39:54  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
08:39:54  26  --
08:39:54  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*2 PRECEDING AND CURRENT ROW)max2
08:39:54  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*3 PRECEDING AND CURRENT ROW)max3
08:39:54  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
08:39:54  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
08:39:54  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
08:39:54  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
08:39:54  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
08:39:54  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
08:39:54  35  ,LEAD(clse,12*4,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld4
08:39:54  36  FROM di5min
08:39:54  37  WHERE pair LIKE'%aud%'
08:39:54  38  AND ydate > sysdate - 190
08:39:54  39  ORDER BY ydate
08:39:54  40  /

View created.

Elapsed: 00:00:00.06
08:39:54 SQL> 
08:39:54 SQL> -- rpt
08:39:54 SQL> 
08:39:54 SQL> SELECT
08:39:54   2  pair
08:39:54   3  ,COUNT(pair)
08:39:54   4  ,MIN(clse),MAX(clse)
08:39:54   5  ,MIN(avg4),MAX(avg4)
08:39:54   6  ,MIN(ydate),MAX(ydate)
08:39:54   7  FROM svm4102
08:39:54   8  GROUP BY pair
08:39:54   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG4)  MAX(AVG4) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
aud_usd       20735	 .9332	   1.0181 .934822449 1.01594694 2010-09-15 22:25:01 2010-12-24 21:55:00

Elapsed: 00:00:00.78
08:39:55 SQL> 
08:39:55 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
08:39:55 SQL> DROP TABLE svm4122;

Table dropped.

Elapsed: 00:00:00.26
08:39:55 SQL> CREATE TABLE svm4122 COMPRESS AS
08:39:55   2  SELECT
08:39:55   3  pair
08:39:55   4  ,ydate
08:39:55   5  ,prdate
08:39:55   6  ,clse
08:39:55   7  -- g4 is important. I want to predict g4:
08:39:55   8  ,ld4 - clse g4
08:39:55   9  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
08:39:55  10  -- I want more attributes from the ones I derived above:
08:39:55  11  -- clse relation to moving-min
08:39:55  12  ,clse-min2  cm2
08:39:55  13  ,clse-min3  cm3
08:39:55  14  ,clse-min4  cm4
08:39:55  15  ,clse-min6  cm6
08:39:55  16  ,clse-min8  cm8
08:39:55  17  ,clse-min10 cm10
08:39:55  18  ,clse-min12 cm12
08:39:55  19  ,clse-min14 cm14
08:39:55  20  -- clse relation to moving-avg
08:39:55  21  ,clse-avg2  ca2
08:39:55  22  ,clse-avg3  ca3
08:39:55  23  ,clse-avg4  ca4
08:39:55  24  ,clse-avg6  ca6
08:39:55  25  ,clse-avg8  ca8
08:39:55  26  ,clse-avg10 ca10
08:39:55  27  ,clse-avg12 ca12
08:39:55  28  ,clse-avg14 ca14
08:39:55  29  -- clse relation to moving-max
08:39:55  30  ,clse-max2  cx2
08:39:55  31  ,clse-max3  cx3
08:39:55  32  ,clse-max4  cx4
08:39:55  33  ,clse-max6  cx6
08:39:55  34  ,clse-max8  cx8
08:39:55  35  ,clse-max10 cx10
08:39:55  36  ,clse-max12 cx12
08:39:55  37  ,clse-max14 cx14
08:39:55  38  -- Derive more attributes.
08:39:55  39  -- I want to use CORR() here to help SVM see the shape of the series.
08:39:55  40  -- But COVAR_POP is more stable:
08:39:55  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*2  PRECEDING AND CURRENT ROW)crr2
08:39:55  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*3  PRECEDING AND CURRENT ROW)crr3
08:39:55  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
08:39:55  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
08:39:55  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
08:39:55  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
08:39:55  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
08:39:55  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
08:39:55  49  -- Derive date related attributes:
08:39:55  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
08:39:55  51  ,0+TO_CHAR(ydate,'D')d
08:39:55  52  ,0+TO_CHAR(ydate,'W')w
08:39:55  53  -- mpm stands for minutes-past-midnight:
08:39:55  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
08:39:55  55  -- mph stands for minutes-past-hour:
08:39:55  56  ,0+TO_CHAR(ydate,'MI')mph
08:39:55  57  FROM svm4102
08:39:55  58  ORDER BY ydate
08:39:55  59  /

Table created.

Elapsed: 00:00:02.04
08:39:57 SQL> 
08:39:57 SQL> -- rpt
08:39:57 SQL> 
08:39:57 SQL> SELECT
08:39:57   2  pair
08:39:57   3  ,COUNT(pair)
08:39:57   4  ,MIN(clse),MAX(clse)
08:39:57   5  ,MIN(ydate),MAX(ydate)
08:39:57   6  FROM svm4122
08:39:57   7  GROUP BY pair
08:39:57   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
aud_usd       20735	 .9332	   1.0181 2010-09-15 22:25:01 2010-12-24 21:55:00

Elapsed: 00:00:00.04
08:39:57 SQL> 
08:39:57 SQL> -- Prepare for derivation of NTILE based params:
08:39:57 SQL> 
08:39:57 SQL> DROP TABLE svm4142;

Table dropped.

Elapsed: 00:00:00.22
08:39:57 SQL> CREATE TABLE svm4142 COMPRESS AS
08:39:57   2  SELECT
08:39:57   3  pair
08:39:57   4  ,ydate
08:39:57   5  ,prdate
08:39:57   6  ,clse
08:39:57   7  ,g4
08:39:57   8  ,CASE WHEN g4 IS NULL THEN NULL WHEN g4 > 0.0010 THEN 'up' ELSE 'nup' END gatt
08:39:57   9  ,CASE WHEN g4 IS NULL THEN NULL WHEN g4< -0.0010 THEN 'up' ELSE 'nup' END gattn
08:39:57  10  ,CASE WHEN trend IS NULL THEN 1
08:39:57  11  	    WHEN trend =0      THEN 1
08:39:57  12  	    ELSE trend END trend
08:39:57  13  ,cm2
08:39:57  14  ,cm3
08:39:57  15  ,cm4
08:39:57  16  ,cm6
08:39:57  17  ,cm8
08:39:57  18  ,cm10
08:39:57  19  ,cm12
08:39:57  20  ,cm14
08:39:57  21  --
08:39:57  22  ,ca2
08:39:57  23  ,ca3
08:39:57  24  ,ca4
08:39:57  25  ,ca6
08:39:57  26  ,ca8
08:39:57  27  ,ca10
08:39:57  28  ,ca12
08:39:57  29  ,ca14
08:39:57  30  --
08:39:57  31  ,cx2
08:39:57  32  ,cx3
08:39:57  33  ,cx4
08:39:57  34  ,cx6
08:39:57  35  ,cx8
08:39:57  36  ,cx10
08:39:57  37  ,cx12
08:39:57  38  ,cx14
08:39:57  39  --
08:39:57  40  ,crr2
08:39:57  41  ,crr3
08:39:57  42  ,crr4
08:39:57  43  ,crr6
08:39:57  44  ,crr8
08:39:57  45  ,crr10
08:39:57  46  ,crr12
08:39:57  47  ,crr14
08:39:57  48  --
08:39:57  49  ,hh
08:39:57  50  ,d
08:39:57  51  ,w
08:39:57  52  ,mpm
08:39:57  53  ,mph
08:39:57  54  FROM svm4122
08:39:57  55  ORDER BY ydate
08:39:57  56  /

Table created.

Elapsed: 00:00:00.39
08:39:58 SQL> 
08:39:58 SQL> -- rpt
08:39:58 SQL> 
08:39:58 SQL> SELECT
08:39:58   2  pair
08:39:58   3  ,trend
08:39:58   4  ,gatt
08:39:58   5  ,COUNT(pair)
08:39:58   6  ,AVG(g4)
08:39:58   7  FROM svm4142
08:39:58   8  GROUP BY pair,trend,gatt
08:39:58   9  ORDER BY pair,trend,gatt
08:39:58  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G4)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5702 -.00169727
aud_usd 	-1 up	      3854 .003209166
aud_usd 	 1 nup	      7076 -.00175143
aud_usd 	 1 up	      4055 .003184158
aud_usd 	 1		48

Elapsed: 00:00:00.04
08:39:58 SQL> 
08:39:58 SQL> 
08:39:58 SQL> -- Derive NTILE based params:
08:39:58 SQL> 
08:39:58 SQL> DROP TABLE svm4162;

Table dropped.

Elapsed: 00:00:00.17
08:39:58 SQL> CREATE TABLE svm4162 COMPRESS AS
08:39:58   2  SELECT
08:39:58   3  pair
08:39:58   4  ,ydate
08:39:58   5  ,prdate
08:39:58   6  ,clse
08:39:58   7  ,g4
08:39:58   8  ,gatt
08:39:58   9  ,gattn
08:39:58  10  ,trend
08:39:58  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
08:39:58  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
08:39:58  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
08:39:58  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
08:39:58  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
08:39:58  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
08:39:58  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm2  )att06
08:39:58  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm3  )att07
08:39:58  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
08:39:58  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
08:39:58  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
08:39:58  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
08:39:58  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
08:39:58  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
08:39:58  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca2  )att14
08:39:58  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca3  )att15
08:39:58  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
08:39:58  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
08:39:58  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
08:39:58  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
08:39:58  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
08:39:58  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
08:39:58  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx2  )att22
08:39:58  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx3  )att23
08:39:58  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
08:39:58  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
08:39:58  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
08:39:58  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
08:39:58  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
08:39:58  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
08:39:58  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr2 )att30
08:39:58  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr3 )att31
08:39:58  43  ,hh  att32
08:39:58  44  ,d   att33
08:39:58  45  ,w   att34
08:39:58  46  ,mpm att35
08:39:58  47  ,mph att36
08:39:58  48  ,trend att37
08:39:58  49  FROM svm4142
08:39:58  50  ORDER BY ydate
08:39:58  51  /

Table created.

Elapsed: 00:00:04.96
08:40:03 SQL> 
08:40:03 SQL> -- rpt
08:40:03 SQL> 
08:40:03 SQL> SELECT
08:40:03   2  pair
08:40:03   3  ,trend
08:40:03   4  ,gatt
08:40:03   5  ,COUNT(pair)
08:40:03   6  ,AVG(g4)
08:40:03   7  FROM svm4162
08:40:03   8  GROUP BY pair,trend,gatt
08:40:03   9  ORDER BY pair,trend,gatt
08:40:03  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G4)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5702 -.00169727
aud_usd 	-1 up	      3854 .003209166
aud_usd 	 1 nup	      7076 -.00175143
aud_usd 	 1 up	      4055 .003184158
aud_usd 	 1		48

Elapsed: 00:00:00.03
08:40:03 SQL> 
08:40:03 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.19
08:40:03 SQL> CREATE TABLE modsrc COMPRESS AS
08:40:03   2  SELECT
08:40:03   3  pair
08:40:03   4  ,ydate
08:40:03   5  ,prdate
08:40:03   6  ,trend
08:40:03   7  ,g4
08:40:03   8  ,gatt
08:40:03   9  ,gattn
08:40:03  10  FROM svm4162
08:40:03  11  /

Table created.

Elapsed: 00:00:00.08
08:40:03 SQL> 
08:40:03 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.27
08:40:03 SQL> 
08:40:03 SQL> DROP   TABLE aud_ms410 ;

Table dropped.

Elapsed: 00:00:00.10
08:40:03 SQL> CREATE TABLE aud_ms410 COMPRESS AS
08:40:03   2  SELECT
08:40:03   3  ydate
08:40:03   4  ,trend aud_trend
08:40:03   5  ,g4    aud_g4
08:40:03   6  ,gatt  aud_gatt
08:40:03   7  ,gattn aud_gattn
08:40:03   8  FROM modsrc
08:40:03   9  /

Table created.

Elapsed: 00:00:00.06
08:40:03 SQL> 
08:40:03 SQL> ANALYZE TABLE aud_ms410 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
08:40:04 SQL> 
08:40:04 SQL> -- I need a copy of the attributes:
08:40:04 SQL> 
08:40:04 SQL> 
08:40:04 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.14
08:40:04 SQL> CREATE TABLE aud_att COMPRESS AS
08:40:04   2  SELECT
08:40:04   3  ydate
08:40:04   4  ,att00 aud_att00
08:40:04   5  ,att01 aud_att01
08:40:04   6  ,att02 aud_att02
08:40:04   7  ,att03 aud_att03
08:40:04   8  ,att04 aud_att04
08:40:04   9  ,att05 aud_att05
08:40:04  10  ,att06 aud_att06
08:40:04  11  ,att07 aud_att07
08:40:04  12  ,att08 aud_att08
08:40:04  13  ,att09 aud_att09
08:40:04  14  ,att10 aud_att10
08:40:04  15  ,att11 aud_att11
08:40:04  16  ,att12 aud_att12
08:40:04  17  ,att13 aud_att13
08:40:04  18  ,att14 aud_att14
08:40:04  19  ,att15 aud_att15
08:40:04  20  ,att16 aud_att16
08:40:04  21  ,att17 aud_att17
08:40:04  22  ,att18 aud_att18
08:40:04  23  ,att19 aud_att19
08:40:04  24  ,att20 aud_att20
08:40:04  25  ,att21 aud_att21
08:40:04  26  ,att22 aud_att22
08:40:04  27  ,att23 aud_att23
08:40:04  28  ,att24 aud_att24
08:40:04  29  ,att25 aud_att25
08:40:04  30  ,att26 aud_att26
08:40:04  31  ,att27 aud_att27
08:40:04  32  ,att28 aud_att28
08:40:04  33  ,att29 aud_att29
08:40:04  34  ,att30 aud_att30
08:40:04  35  ,att31 aud_att31
08:40:04  36  ,att32 aud_att32
08:40:04  37  ,att33 aud_att33
08:40:04  38  ,att34 aud_att34
08:40:04  39  ,att35 aud_att35
08:40:04  40  ,att36 aud_att36
08:40:04  41  ,att37 aud_att37
08:40:04  42  FROM svm4162
08:40:04  43  /

Table created.

Elapsed: 00:00:00.17
08:40:04 SQL> 
08:40:04 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
08:40:04 SQL> 
08:40:04 SQL> -- rpt
08:40:04 SQL> SELECT COUNT(*)FROM svm4102;

  COUNT(*)
----------
     20735

Elapsed: 00:00:00.78
08:40:05 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     20735

Elapsed: 00:00:00.01
08:40:05 SQL> 
08:40:05 SQL> --
08:40:05 SQL> -- gbp410.sql
08:40:05 SQL> --
08:40:05 SQL> 
08:40:05 SQL> -- Creates views and tables for backtesting a forex SVM strategy
08:40:05 SQL> 
08:40:05 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.41
08:40:06 SQL> 
08:40:06 SQL> -- I created di5min here:
08:40:06 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
08:40:06 SQL> 
08:40:06 SQL> CREATE OR REPLACE VIEW svm4102 AS
08:40:06   2  SELECT
08:40:06   3  pair
08:40:06   4  ,ydate
08:40:06   5  ,prdate
08:40:06   6  ,rownum rnum -- acts as t in my time-series
08:40:06   7  ,clse
08:40:06   8  -- Derive a bunch of attributes from clse, the latest price:
08:40:06   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*2 PRECEDING AND CURRENT ROW)min2
08:40:06  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*3 PRECEDING AND CURRENT ROW)min3
08:40:06  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
08:40:06  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
08:40:06  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
08:40:06  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
08:40:06  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
08:40:06  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
08:40:06  17  --
08:40:06  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*2 PRECEDING AND CURRENT ROW)avg2
08:40:06  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*3 PRECEDING AND CURRENT ROW)avg3
08:40:06  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
08:40:06  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
08:40:06  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
08:40:06  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
08:40:06  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
08:40:06  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
08:40:06  26  --
08:40:06  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*2 PRECEDING AND CURRENT ROW)max2
08:40:06  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*3 PRECEDING AND CURRENT ROW)max3
08:40:06  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
08:40:06  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
08:40:06  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
08:40:06  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
08:40:06  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
08:40:06  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
08:40:06  35  ,LEAD(clse,12*4,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld4
08:40:06  36  FROM di5min
08:40:06  37  WHERE pair LIKE'%gbp%'
08:40:06  38  AND ydate > sysdate - 190
08:40:06  39  ORDER BY ydate
08:40:06  40  /

View created.

Elapsed: 00:00:00.06
08:40:06 SQL> 
08:40:06 SQL> -- rpt
08:40:06 SQL> 
08:40:06 SQL> SELECT
08:40:06   2  pair
08:40:06   3  ,COUNT(pair)
08:40:06   4  ,MIN(clse),MAX(clse)
08:40:06   5  ,MIN(avg4),MAX(avg4)
08:40:06   6  ,MIN(ydate),MAX(ydate)
08:40:06   7  FROM svm4102
08:40:06   8  GROUP BY pair
08:40:06   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG4)  MAX(AVG4) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
gbp_usd       20737   1.535825	   1.6295 1.53763418  1.6273602 2010-09-15 22:25:01 2010-12-24 21:55:00

Elapsed: 00:00:00.78
08:40:06 SQL> 
08:40:06 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
08:40:06 SQL> DROP TABLE svm4122;

Table dropped.

Elapsed: 00:00:00.23
08:40:07 SQL> CREATE TABLE svm4122 COMPRESS AS
08:40:07   2  SELECT
08:40:07   3  pair
08:40:07   4  ,ydate
08:40:07   5  ,prdate
08:40:07   6  ,clse
08:40:07   7  -- g4 is important. I want to predict g4:
08:40:07   8  ,ld4 - clse g4
08:40:07   9  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
08:40:07  10  -- I want more attributes from the ones I derived above:
08:40:07  11  -- clse relation to moving-min
08:40:07  12  ,clse-min2  cm2
08:40:07  13  ,clse-min3  cm3
08:40:07  14  ,clse-min4  cm4
08:40:07  15  ,clse-min6  cm6
08:40:07  16  ,clse-min8  cm8
08:40:07  17  ,clse-min10 cm10
08:40:07  18  ,clse-min12 cm12
08:40:07  19  ,clse-min14 cm14
08:40:07  20  -- clse relation to moving-avg
08:40:07  21  ,clse-avg2  ca2
08:40:07  22  ,clse-avg3  ca3
08:40:07  23  ,clse-avg4  ca4
08:40:07  24  ,clse-avg6  ca6
08:40:07  25  ,clse-avg8  ca8
08:40:07  26  ,clse-avg10 ca10
08:40:07  27  ,clse-avg12 ca12
08:40:07  28  ,clse-avg14 ca14
08:40:07  29  -- clse relation to moving-max
08:40:07  30  ,clse-max2  cx2
08:40:07  31  ,clse-max3  cx3
08:40:07  32  ,clse-max4  cx4
08:40:07  33  ,clse-max6  cx6
08:40:07  34  ,clse-max8  cx8
08:40:07  35  ,clse-max10 cx10
08:40:07  36  ,clse-max12 cx12
08:40:07  37  ,clse-max14 cx14
08:40:07  38  -- Derive more attributes.
08:40:07  39  -- I want to use CORR() here to help SVM see the shape of the series.
08:40:07  40  -- But COVAR_POP is more stable:
08:40:07  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*2  PRECEDING AND CURRENT ROW)crr2
08:40:07  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*3  PRECEDING AND CURRENT ROW)crr3
08:40:07  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
08:40:07  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
08:40:07  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
08:40:07  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
08:40:07  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
08:40:07  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
08:40:07  49  -- Derive date related attributes:
08:40:07  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
08:40:07  51  ,0+TO_CHAR(ydate,'D')d
08:40:07  52  ,0+TO_CHAR(ydate,'W')w
08:40:07  53  -- mpm stands for minutes-past-midnight:
08:40:07  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
08:40:07  55  -- mph stands for minutes-past-hour:
08:40:07  56  ,0+TO_CHAR(ydate,'MI')mph
08:40:07  57  FROM svm4102
08:40:07  58  ORDER BY ydate
08:40:07  59  /

Table created.

Elapsed: 00:00:02.03
08:40:09 SQL> 
08:40:09 SQL> -- rpt
08:40:09 SQL> 
08:40:09 SQL> SELECT
08:40:09   2  pair
08:40:09   3  ,COUNT(pair)
08:40:09   4  ,MIN(clse),MAX(clse)
08:40:09   5  ,MIN(ydate),MAX(ydate)
08:40:09   6  FROM svm4122
08:40:09   7  GROUP BY pair
08:40:09   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
gbp_usd       20737   1.535825	   1.6295 2010-09-15 22:25:01 2010-12-24 21:55:00

Elapsed: 00:00:00.03
08:40:09 SQL> 
08:40:09 SQL> -- Prepare for derivation of NTILE based params:
08:40:09 SQL> 
08:40:09 SQL> DROP TABLE svm4142;

Table dropped.

Elapsed: 00:00:00.18
08:40:09 SQL> CREATE TABLE svm4142 COMPRESS AS
08:40:09   2  SELECT
08:40:09   3  pair
08:40:09   4  ,ydate
08:40:09   5  ,prdate
08:40:09   6  ,clse
08:40:09   7  ,g4
08:40:09   8  ,CASE WHEN g4 IS NULL THEN NULL WHEN g4 > 0.0010 THEN 'up' ELSE 'nup' END gatt
08:40:09   9  ,CASE WHEN g4 IS NULL THEN NULL WHEN g4< -0.0010 THEN 'up' ELSE 'nup' END gattn
08:40:09  10  ,CASE WHEN trend IS NULL THEN 1
08:40:09  11  	    WHEN trend =0      THEN 1
08:40:09  12  	    ELSE trend END trend
08:40:09  13  ,cm2
08:40:09  14  ,cm3
08:40:09  15  ,cm4
08:40:09  16  ,cm6
08:40:09  17  ,cm8
08:40:09  18  ,cm10
08:40:09  19  ,cm12
08:40:09  20  ,cm14
08:40:09  21  --
08:40:09  22  ,ca2
08:40:09  23  ,ca3
08:40:09  24  ,ca4
08:40:09  25  ,ca6
08:40:09  26  ,ca8
08:40:09  27  ,ca10
08:40:09  28  ,ca12
08:40:09  29  ,ca14
08:40:09  30  --
08:40:09  31  ,cx2
08:40:09  32  ,cx3
08:40:09  33  ,cx4
08:40:09  34  ,cx6
08:40:09  35  ,cx8
08:40:09  36  ,cx10
08:40:09  37  ,cx12
08:40:09  38  ,cx14
08:40:09  39  --
08:40:09  40  ,crr2
08:40:09  41  ,crr3
08:40:09  42  ,crr4
08:40:09  43  ,crr6
08:40:09  44  ,crr8
08:40:09  45  ,crr10
08:40:09  46  ,crr12
08:40:09  47  ,crr14
08:40:09  48  --
08:40:09  49  ,hh
08:40:09  50  ,d
08:40:09  51  ,w
08:40:09  52  ,mpm
08:40:09  53  ,mph
08:40:09  54  FROM svm4122
08:40:09  55  ORDER BY ydate
08:40:09  56  /

Table created.

Elapsed: 00:00:00.38
08:40:09 SQL> 
08:40:09 SQL> -- rpt
08:40:09 SQL> 
08:40:09 SQL> SELECT
08:40:09   2  pair
08:40:09   3  ,trend
08:40:09   4  ,gatt
08:40:09   5  ,COUNT(pair)
08:40:09   6  ,AVG(g4)
08:40:09   7  FROM svm4142
08:40:09   8  GROUP BY pair,trend,gatt
08:40:09   9  ORDER BY pair,trend,gatt
08:40:09  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G4)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6529  -.0020575
gbp_usd 	-1 up	      3737 .003412005
gbp_usd 	-1		16
gbp_usd 	 1 nup	      6778 -.00199072
gbp_usd 	 1 up	      3645 .003641626
gbp_usd 	 1		32

6 rows selected.

Elapsed: 00:00:00.04
08:40:09 SQL> 
08:40:09 SQL> 
08:40:09 SQL> -- Derive NTILE based params:
08:40:09 SQL> 
08:40:09 SQL> DROP TABLE svm4162;

Table dropped.

Elapsed: 00:00:00.20
08:40:10 SQL> CREATE TABLE svm4162 COMPRESS AS
08:40:10   2  SELECT
08:40:10   3  pair
08:40:10   4  ,ydate
08:40:10   5  ,prdate
08:40:10   6  ,clse
08:40:10   7  ,g4
08:40:10   8  ,gatt
08:40:10   9  ,gattn
08:40:10  10  ,trend
08:40:10  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
08:40:10  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
08:40:10  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
08:40:10  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
08:40:10  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
08:40:10  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
08:40:10  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm2  )att06
08:40:10  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm3  )att07
08:40:10  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
08:40:10  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
08:40:10  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
08:40:10  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
08:40:10  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
08:40:10  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
08:40:10  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca2  )att14
08:40:10  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca3  )att15
08:40:10  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
08:40:10  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
08:40:10  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
08:40:10  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
08:40:10  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
08:40:10  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
08:40:10  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx2  )att22
08:40:10  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx3  )att23
08:40:10  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
08:40:10  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
08:40:10  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
08:40:10  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
08:40:10  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
08:40:10  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
08:40:10  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr2 )att30
08:40:10  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr3 )att31
08:40:10  43  ,hh  att32
08:40:10  44  ,d   att33
08:40:10  45  ,w   att34
08:40:10  46  ,mpm att35
08:40:10  47  ,mph att36
08:40:10  48  ,trend att37
08:40:10  49  FROM svm4142
08:40:10  50  ORDER BY ydate
08:40:10  51  /

Table created.

Elapsed: 00:00:04.94
08:40:14 SQL> 
08:40:14 SQL> -- rpt
08:40:14 SQL> 
08:40:14 SQL> SELECT
08:40:14   2  pair
08:40:14   3  ,trend
08:40:14   4  ,gatt
08:40:14   5  ,COUNT(pair)
08:40:14   6  ,AVG(g4)
08:40:14   7  FROM svm4162
08:40:14   8  GROUP BY pair,trend,gatt
08:40:14   9  ORDER BY pair,trend,gatt
08:40:14  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G4)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6529  -.0020575
gbp_usd 	-1 up	      3737 .003412005
gbp_usd 	-1		16
gbp_usd 	 1 nup	      6778 -.00199072
gbp_usd 	 1 up	      3645 .003641626
gbp_usd 	 1		32

6 rows selected.

Elapsed: 00:00:00.02
08:40:14 SQL> 
08:40:14 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.18
08:40:15 SQL> CREATE TABLE modsrc COMPRESS AS
08:40:15   2  SELECT
08:40:15   3  pair
08:40:15   4  ,ydate
08:40:15   5  ,prdate
08:40:15   6  ,trend
08:40:15   7  ,g4
08:40:15   8  ,gatt
08:40:15   9  ,gattn
08:40:15  10  FROM svm4162
08:40:15  11  /

Table created.

Elapsed: 00:00:00.07
08:40:15 SQL> 
08:40:15 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.34
08:40:15 SQL> 
08:40:15 SQL> DROP   TABLE gbp_ms410 ;

Table dropped.

Elapsed: 00:00:00.16
08:40:15 SQL> CREATE TABLE gbp_ms410 COMPRESS AS
08:40:15   2  SELECT
08:40:15   3  ydate
08:40:15   4  ,trend gbp_trend
08:40:15   5  ,g4    gbp_g4
08:40:15   6  ,gatt  gbp_gatt
08:40:15   7  ,gattn gbp_gattn
08:40:15   8  FROM modsrc
08:40:15   9  /

Table created.

Elapsed: 00:00:00.07
08:40:15 SQL> 
08:40:15 SQL> ANALYZE TABLE gbp_ms410 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
08:40:15 SQL> 
08:40:15 SQL> -- I need a copy of the attributes:
08:40:15 SQL> 
08:40:15 SQL> 
08:40:15 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.13
08:40:16 SQL> CREATE TABLE gbp_att COMPRESS AS
08:40:16   2  SELECT
08:40:16   3  ydate
08:40:16   4  ,att00 gbp_att00
08:40:16   5  ,att01 gbp_att01
08:40:16   6  ,att02 gbp_att02
08:40:16   7  ,att03 gbp_att03
08:40:16   8  ,att04 gbp_att04
08:40:16   9  ,att05 gbp_att05
08:40:16  10  ,att06 gbp_att06
08:40:16  11  ,att07 gbp_att07
08:40:16  12  ,att08 gbp_att08
08:40:16  13  ,att09 gbp_att09
08:40:16  14  ,att10 gbp_att10
08:40:16  15  ,att11 gbp_att11
08:40:16  16  ,att12 gbp_att12
08:40:16  17  ,att13 gbp_att13
08:40:16  18  ,att14 gbp_att14
08:40:16  19  ,att15 gbp_att15
08:40:16  20  ,att16 gbp_att16
08:40:16  21  ,att17 gbp_att17
08:40:16  22  ,att18 gbp_att18
08:40:16  23  ,att19 gbp_att19
08:40:16  24  ,att20 gbp_att20
08:40:16  25  ,att21 gbp_att21
08:40:16  26  ,att22 gbp_att22
08:40:16  27  ,att23 gbp_att23
08:40:16  28  ,att24 gbp_att24
08:40:16  29  ,att25 gbp_att25
08:40:16  30  ,att26 gbp_att26
08:40:16  31  ,att27 gbp_att27
08:40:16  32  ,att28 gbp_att28
08:40:16  33  ,att29 gbp_att29
08:40:16  34  ,att30 gbp_att30
08:40:16  35  ,att31 gbp_att31
08:40:16  36  ,att32 gbp_att32
08:40:16  37  ,att33 gbp_att33
08:40:16  38  ,att34 gbp_att34
08:40:16  39  ,att35 gbp_att35
08:40:16  40  ,att36 gbp_att36
08:40:16  41  ,att37 gbp_att37
08:40:16  42  FROM svm4162
08:40:16  43  /

Table created.

Elapsed: 00:00:00.17
08:40:16 SQL> 
08:40:16 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
08:40:16 SQL> 
08:40:16 SQL> -- rpt
08:40:16 SQL> SELECT COUNT(*)FROM svm4102;

  COUNT(*)
----------
     20737

Elapsed: 00:00:00.78
08:40:17 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     20737

Elapsed: 00:00:00.00
08:40:17 SQL> 
08:40:17 SQL> --
08:40:17 SQL> -- jpy410.sql
08:40:17 SQL> --
08:40:17 SQL> 
08:40:17 SQL> -- Creates views and tables for backtesting a forex SVM strategy
08:40:17 SQL> 
08:40:17 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.37
08:40:17 SQL> 
08:40:17 SQL> -- I created di5min here:
08:40:17 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
08:40:17 SQL> 
08:40:17 SQL> CREATE OR REPLACE VIEW svm4102 AS
08:40:17   2  SELECT
08:40:17   3  pair
08:40:17   4  ,ydate
08:40:17   5  ,prdate
08:40:17   6  ,rownum rnum -- acts as t in my time-series
08:40:17   7  ,clse
08:40:17   8  -- Derive a bunch of attributes from clse, the latest price:
08:40:17   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*2 PRECEDING AND CURRENT ROW)min2
08:40:17  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*3 PRECEDING AND CURRENT ROW)min3
08:40:17  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
08:40:17  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
08:40:17  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
08:40:17  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
08:40:17  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
08:40:17  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
08:40:17  17  --
08:40:17  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*2 PRECEDING AND CURRENT ROW)avg2
08:40:17  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*3 PRECEDING AND CURRENT ROW)avg3
08:40:17  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
08:40:17  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
08:40:17  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
08:40:17  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
08:40:17  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
08:40:17  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
08:40:17  26  --
08:40:17  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*2 PRECEDING AND CURRENT ROW)max2
08:40:17  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*3 PRECEDING AND CURRENT ROW)max3
08:40:17  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
08:40:17  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
08:40:17  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
08:40:17  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
08:40:17  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
08:40:17  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
08:40:17  35  ,LEAD(clse,12*4,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld4
08:40:17  36  FROM di5min
08:40:17  37  WHERE pair LIKE'%jpy%'
08:40:17  38  AND ydate > sysdate - 190
08:40:17  39  ORDER BY ydate
08:40:17  40  /

View created.

Elapsed: 00:00:00.04
08:40:17 SQL> 
08:40:17 SQL> -- rpt
08:40:17 SQL> 
08:40:17 SQL> SELECT
08:40:17   2  pair
08:40:17   3  ,COUNT(pair)
08:40:17   4  ,MIN(clse),MAX(clse)
08:40:17   5  ,MIN(avg4),MAX(avg4)
08:40:17   6  ,MIN(ydate),MAX(ydate)
08:40:17   7  FROM svm4102
08:40:17   8  GROUP BY pair
08:40:17   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG4)  MAX(AVG4) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_jpy       20736	 80.25	    85.89 80.3142857 85.8129592 2010-09-15 22:25:01 2010-12-24 21:55:00

Elapsed: 00:00:00.80
08:40:18 SQL> 
08:40:18 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
08:40:18 SQL> DROP TABLE svm4122;

Table dropped.

Elapsed: 00:00:00.16
08:40:18 SQL> CREATE TABLE svm4122 COMPRESS AS
08:40:18   2  SELECT
08:40:18   3  pair
08:40:18   4  ,ydate
08:40:18   5  ,prdate
08:40:18   6  ,clse
08:40:18   7  -- g4 is important. I want to predict g4:
08:40:18   8  ,ld4 - clse g4
08:40:18   9  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
08:40:18  10  -- I want more attributes from the ones I derived above:
08:40:18  11  -- clse relation to moving-min
08:40:18  12  ,clse-min2  cm2
08:40:18  13  ,clse-min3  cm3
08:40:18  14  ,clse-min4  cm4
08:40:18  15  ,clse-min6  cm6
08:40:18  16  ,clse-min8  cm8
08:40:18  17  ,clse-min10 cm10
08:40:18  18  ,clse-min12 cm12
08:40:18  19  ,clse-min14 cm14
08:40:18  20  -- clse relation to moving-avg
08:40:18  21  ,clse-avg2  ca2
08:40:18  22  ,clse-avg3  ca3
08:40:18  23  ,clse-avg4  ca4
08:40:18  24  ,clse-avg6  ca6
08:40:18  25  ,clse-avg8  ca8
08:40:18  26  ,clse-avg10 ca10
08:40:18  27  ,clse-avg12 ca12
08:40:18  28  ,clse-avg14 ca14
08:40:18  29  -- clse relation to moving-max
08:40:18  30  ,clse-max2  cx2
08:40:18  31  ,clse-max3  cx3
08:40:18  32  ,clse-max4  cx4
08:40:18  33  ,clse-max6  cx6
08:40:18  34  ,clse-max8  cx8
08:40:18  35  ,clse-max10 cx10
08:40:18  36  ,clse-max12 cx12
08:40:18  37  ,clse-max14 cx14
08:40:18  38  -- Derive more attributes.
08:40:18  39  -- I want to use CORR() here to help SVM see the shape of the series.
08:40:18  40  -- But COVAR_POP is more stable:
08:40:18  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*2  PRECEDING AND CURRENT ROW)crr2
08:40:18  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*3  PRECEDING AND CURRENT ROW)crr3
08:40:18  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
08:40:18  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
08:40:18  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
08:40:18  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
08:40:18  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
08:40:18  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
08:40:18  49  -- Derive date related attributes:
08:40:18  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
08:40:18  51  ,0+TO_CHAR(ydate,'D')d
08:40:18  52  ,0+TO_CHAR(ydate,'W')w
08:40:18  53  -- mpm stands for minutes-past-midnight:
08:40:18  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
08:40:18  55  -- mph stands for minutes-past-hour:
08:40:18  56  ,0+TO_CHAR(ydate,'MI')mph
08:40:18  57  FROM svm4102
08:40:18  58  ORDER BY ydate
08:40:18  59  /

Table created.

Elapsed: 00:00:02.10
08:40:21 SQL> 
08:40:21 SQL> -- rpt
08:40:21 SQL> 
08:40:21 SQL> SELECT
08:40:21   2  pair
08:40:21   3  ,COUNT(pair)
08:40:21   4  ,MIN(clse),MAX(clse)
08:40:21   5  ,MIN(ydate),MAX(ydate)
08:40:21   6  FROM svm4122
08:40:21   7  GROUP BY pair
08:40:21   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_jpy       20736	 80.25	    85.89 2010-09-15 22:25:01 2010-12-24 21:55:00

Elapsed: 00:00:00.04
08:40:21 SQL> 
08:40:21 SQL> -- Prepare for derivation of NTILE based params:
08:40:21 SQL> 
08:40:21 SQL> DROP TABLE svm4142;

Table dropped.

Elapsed: 00:00:00.17
08:40:21 SQL> CREATE TABLE svm4142 COMPRESS AS
08:40:21   2  SELECT
08:40:21   3  pair
08:40:21   4  ,ydate
08:40:21   5  ,prdate
08:40:21   6  ,clse
08:40:21   7  ,g4
08:40:21   8  ,CASE WHEN g4 IS NULL THEN NULL WHEN g4 > 0.0010 THEN 'up' ELSE 'nup' END gatt
08:40:21   9  ,CASE WHEN g4 IS NULL THEN NULL WHEN g4< -0.0010 THEN 'up' ELSE 'nup' END gattn
08:40:21  10  ,CASE WHEN trend IS NULL THEN 1
08:40:21  11  	    WHEN trend =0      THEN 1
08:40:21  12  	    ELSE trend END trend
08:40:21  13  ,cm2
08:40:21  14  ,cm3
08:40:21  15  ,cm4
08:40:21  16  ,cm6
08:40:21  17  ,cm8
08:40:21  18  ,cm10
08:40:21  19  ,cm12
08:40:21  20  ,cm14
08:40:21  21  --
08:40:21  22  ,ca2
08:40:21  23  ,ca3
08:40:21  24  ,ca4
08:40:21  25  ,ca6
08:40:21  26  ,ca8
08:40:21  27  ,ca10
08:40:21  28  ,ca12
08:40:21  29  ,ca14
08:40:21  30  --
08:40:21  31  ,cx2
08:40:21  32  ,cx3
08:40:21  33  ,cx4
08:40:21  34  ,cx6
08:40:21  35  ,cx8
08:40:21  36  ,cx10
08:40:21  37  ,cx12
08:40:21  38  ,cx14
08:40:21  39  --
08:40:21  40  ,crr2
08:40:21  41  ,crr3
08:40:21  42  ,crr4
08:40:21  43  ,crr6
08:40:21  44  ,crr8
08:40:21  45  ,crr10
08:40:21  46  ,crr12
08:40:21  47  ,crr14
08:40:21  48  --
08:40:21  49  ,hh
08:40:21  50  ,d
08:40:21  51  ,w
08:40:21  52  ,mpm
08:40:21  53  ,mph
08:40:21  54  FROM svm4122
08:40:21  55  ORDER BY ydate
08:40:21  56  /

Table created.

Elapsed: 00:00:00.39
08:40:21 SQL> 
08:40:21 SQL> -- rpt
08:40:21 SQL> 
08:40:21 SQL> SELECT
08:40:21   2  pair
08:40:21   3  ,trend
08:40:21   4  ,gatt
08:40:21   5  ,COUNT(pair)
08:40:21   6  ,AVG(g4)
08:40:21   7  FROM svm4142
08:40:21   8  GROUP BY pair,trend,gatt
08:40:21   9  ORDER BY pair,trend,gatt
08:40:21  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G4)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5625 -.13001389
usd_jpy 	-1 up	      5232 .134373209
usd_jpy 	-1		47
usd_jpy 	 1 nup	      5481 -.12513774
usd_jpy 	 1 up	      4350 .134831887
usd_jpy 	 1		 1

6 rows selected.

Elapsed: 00:00:00.04
08:40:21 SQL> 
08:40:21 SQL> 
08:40:21 SQL> -- Derive NTILE based params:
08:40:21 SQL> 
08:40:21 SQL> DROP TABLE svm4162;

Table dropped.

Elapsed: 00:00:00.12
08:40:21 SQL> CREATE TABLE svm4162 COMPRESS AS
08:40:21   2  SELECT
08:40:21   3  pair
08:40:21   4  ,ydate
08:40:21   5  ,prdate
08:40:21   6  ,clse
08:40:21   7  ,g4
08:40:21   8  ,gatt
08:40:21   9  ,gattn
08:40:21  10  ,trend
08:40:21  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
08:40:21  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
08:40:21  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
08:40:21  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
08:40:21  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
08:40:21  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
08:40:21  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm2  )att06
08:40:21  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm3  )att07
08:40:21  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
08:40:21  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
08:40:21  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
08:40:21  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
08:40:21  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
08:40:21  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
08:40:21  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca2  )att14
08:40:21  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca3  )att15
08:40:21  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
08:40:21  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
08:40:21  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
08:40:21  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
08:40:21  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
08:40:21  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
08:40:21  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx2  )att22
08:40:21  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx3  )att23
08:40:21  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
08:40:21  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
08:40:21  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
08:40:21  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
08:40:21  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
08:40:21  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
08:40:21  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr2 )att30
08:40:21  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr3 )att31
08:40:21  43  ,hh  att32
08:40:21  44  ,d   att33
08:40:21  45  ,w   att34
08:40:21  46  ,mpm att35
08:40:21  47  ,mph att36
08:40:21  48  ,trend att37
08:40:21  49  FROM svm4142
08:40:21  50  ORDER BY ydate
08:40:21  51  /

Table created.

Elapsed: 00:00:04.91
08:40:26 SQL> 
08:40:26 SQL> -- rpt
08:40:26 SQL> 
08:40:26 SQL> SELECT
08:40:26   2  pair
08:40:26   3  ,trend
08:40:26   4  ,gatt
08:40:26   5  ,COUNT(pair)
08:40:26   6  ,AVG(g4)
08:40:26   7  FROM svm4162
08:40:26   8  GROUP BY pair,trend,gatt
08:40:26   9  ORDER BY pair,trend,gatt
08:40:26  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G4)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5625 -.13001389
usd_jpy 	-1 up	      5232 .134373209
usd_jpy 	-1		47
usd_jpy 	 1 nup	      5481 -.12513774
usd_jpy 	 1 up	      4350 .134831887
usd_jpy 	 1		 1

6 rows selected.

Elapsed: 00:00:00.03
08:40:26 SQL> 
08:40:26 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.18
08:40:26 SQL> CREATE TABLE modsrc COMPRESS AS
08:40:26   2  SELECT
08:40:26   3  pair
08:40:26   4  ,ydate
08:40:26   5  ,prdate
08:40:26   6  ,trend
08:40:26   7  ,g4
08:40:26   8  ,gatt
08:40:26   9  ,gattn
08:40:26  10  FROM svm4162
08:40:26  11  /

Table created.

Elapsed: 00:00:00.07
08:40:26 SQL> 
08:40:26 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
08:40:27 SQL> 
08:40:27 SQL> DROP   TABLE jpy_ms410 ;

Table dropped.

Elapsed: 00:00:00.10
08:40:27 SQL> CREATE TABLE jpy_ms410 COMPRESS AS
08:40:27   2  SELECT
08:40:27   3  ydate
08:40:27   4  ,trend jpy_trend
08:40:27   5  ,g4    jpy_g4
08:40:27   6  ,gatt  jpy_gatt
08:40:27   7  ,gattn jpy_gattn
08:40:27   8  FROM modsrc
08:40:27   9  /

Table created.

Elapsed: 00:00:00.06
08:40:27 SQL> 
08:40:27 SQL> ANALYZE TABLE jpy_ms410 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
08:40:27 SQL> 
08:40:27 SQL> -- I need a copy of the attributes:
08:40:27 SQL> 
08:40:27 SQL> 
08:40:27 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.21
08:40:27 SQL> CREATE TABLE jpy_att COMPRESS AS
08:40:27   2  SELECT
08:40:27   3  ydate
08:40:27   4  ,att00 jpy_att00
08:40:27   5  ,att01 jpy_att01
08:40:27   6  ,att02 jpy_att02
08:40:27   7  ,att03 jpy_att03
08:40:27   8  ,att04 jpy_att04
08:40:27   9  ,att05 jpy_att05
08:40:27  10  ,att06 jpy_att06
08:40:27  11  ,att07 jpy_att07
08:40:27  12  ,att08 jpy_att08
08:40:27  13  ,att09 jpy_att09
08:40:27  14  ,att10 jpy_att10
08:40:27  15  ,att11 jpy_att11
08:40:27  16  ,att12 jpy_att12
08:40:27  17  ,att13 jpy_att13
08:40:27  18  ,att14 jpy_att14
08:40:27  19  ,att15 jpy_att15
08:40:27  20  ,att16 jpy_att16
08:40:27  21  ,att17 jpy_att17
08:40:27  22  ,att18 jpy_att18
08:40:27  23  ,att19 jpy_att19
08:40:27  24  ,att20 jpy_att20
08:40:27  25  ,att21 jpy_att21
08:40:27  26  ,att22 jpy_att22
08:40:27  27  ,att23 jpy_att23
08:40:27  28  ,att24 jpy_att24
08:40:27  29  ,att25 jpy_att25
08:40:27  30  ,att26 jpy_att26
08:40:27  31  ,att27 jpy_att27
08:40:27  32  ,att28 jpy_att28
08:40:27  33  ,att29 jpy_att29
08:40:27  34  ,att30 jpy_att30
08:40:27  35  ,att31 jpy_att31
08:40:27  36  ,att32 jpy_att32
08:40:27  37  ,att33 jpy_att33
08:40:27  38  ,att34 jpy_att34
08:40:27  39  ,att35 jpy_att35
08:40:27  40  ,att36 jpy_att36
08:40:27  41  ,att37 jpy_att37
08:40:27  42  FROM svm4162
08:40:27  43  /

Table created.

Elapsed: 00:00:00.16
08:40:27 SQL> 
08:40:27 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.48
08:40:28 SQL> 
08:40:28 SQL> -- rpt
08:40:28 SQL> SELECT COUNT(*)FROM svm4102;

  COUNT(*)
----------
     20736

Elapsed: 00:00:00.80
08:40:29 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     20736

Elapsed: 00:00:00.00
08:40:29 SQL> 
08:40:29 SQL> --
08:40:29 SQL> -- cad410.sql
08:40:29 SQL> --
08:40:29 SQL> 
08:40:29 SQL> -- Creates views and tables for backtesting a forex SVM strategy
08:40:29 SQL> 
08:40:29 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.42
08:40:29 SQL> 
08:40:29 SQL> -- I created di5min here:
08:40:29 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
08:40:29 SQL> 
08:40:29 SQL> CREATE OR REPLACE VIEW svm4102 AS
08:40:29   2  SELECT
08:40:29   3  pair
08:40:29   4  ,ydate
08:40:29   5  ,prdate
08:40:29   6  ,rownum rnum -- acts as t in my time-series
08:40:29   7  ,clse
08:40:29   8  -- Derive a bunch of attributes from clse, the latest price:
08:40:29   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*2 PRECEDING AND CURRENT ROW)min2
08:40:29  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*3 PRECEDING AND CURRENT ROW)min3
08:40:29  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
08:40:29  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
08:40:29  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
08:40:29  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
08:40:29  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
08:40:29  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
08:40:29  17  --
08:40:29  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*2 PRECEDING AND CURRENT ROW)avg2
08:40:29  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*3 PRECEDING AND CURRENT ROW)avg3
08:40:29  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
08:40:29  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
08:40:29  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
08:40:29  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
08:40:29  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
08:40:29  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
08:40:29  26  --
08:40:29  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*2 PRECEDING AND CURRENT ROW)max2
08:40:29  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*3 PRECEDING AND CURRENT ROW)max3
08:40:29  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
08:40:29  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
08:40:29  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
08:40:29  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
08:40:29  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
08:40:29  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
08:40:29  35  ,LEAD(clse,12*4,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld4
08:40:29  36  FROM di5min
08:40:29  37  WHERE pair LIKE'%cad%'
08:40:29  38  AND ydate > sysdate - 190
08:40:29  39  ORDER BY ydate
08:40:29  40  /

View created.

Elapsed: 00:00:00.04
08:40:29 SQL> 
08:40:29 SQL> -- rpt
08:40:29 SQL> 
08:40:29 SQL> SELECT
08:40:29   2  pair
08:40:29   3  ,COUNT(pair)
08:40:29   4  ,MIN(clse),MAX(clse)
08:40:29   5  ,MIN(avg4),MAX(avg4)
08:40:29   6  ,MIN(ydate),MAX(ydate)
08:40:29   7  FROM svm4102
08:40:29   8  GROUP BY pair
08:40:29   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG4)  MAX(AVG4) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_cad       20734	 .9981	   1.0371 .999068367 1.03485102 2010-09-15 22:25:01 2010-12-24 21:55:00

Elapsed: 00:00:00.78
08:40:30 SQL> 
08:40:30 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
08:40:30 SQL> DROP TABLE svm4122;

Table dropped.

Elapsed: 00:00:00.24
08:40:30 SQL> CREATE TABLE svm4122 COMPRESS AS
08:40:30   2  SELECT
08:40:30   3  pair
08:40:30   4  ,ydate
08:40:30   5  ,prdate
08:40:30   6  ,clse
08:40:30   7  -- g4 is important. I want to predict g4:
08:40:30   8  ,ld4 - clse g4
08:40:30   9  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
08:40:30  10  -- I want more attributes from the ones I derived above:
08:40:30  11  -- clse relation to moving-min
08:40:30  12  ,clse-min2  cm2
08:40:30  13  ,clse-min3  cm3
08:40:30  14  ,clse-min4  cm4
08:40:30  15  ,clse-min6  cm6
08:40:30  16  ,clse-min8  cm8
08:40:30  17  ,clse-min10 cm10
08:40:30  18  ,clse-min12 cm12
08:40:30  19  ,clse-min14 cm14
08:40:30  20  -- clse relation to moving-avg
08:40:30  21  ,clse-avg2  ca2
08:40:30  22  ,clse-avg3  ca3
08:40:30  23  ,clse-avg4  ca4
08:40:30  24  ,clse-avg6  ca6
08:40:30  25  ,clse-avg8  ca8
08:40:30  26  ,clse-avg10 ca10
08:40:30  27  ,clse-avg12 ca12
08:40:30  28  ,clse-avg14 ca14
08:40:30  29  -- clse relation to moving-max
08:40:30  30  ,clse-max2  cx2
08:40:30  31  ,clse-max3  cx3
08:40:30  32  ,clse-max4  cx4
08:40:30  33  ,clse-max6  cx6
08:40:30  34  ,clse-max8  cx8
08:40:30  35  ,clse-max10 cx10
08:40:30  36  ,clse-max12 cx12
08:40:30  37  ,clse-max14 cx14
08:40:30  38  -- Derive more attributes.
08:40:30  39  -- I want to use CORR() here to help SVM see the shape of the series.
08:40:30  40  -- But COVAR_POP is more stable:
08:40:30  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*2  PRECEDING AND CURRENT ROW)crr2
08:40:30  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*3  PRECEDING AND CURRENT ROW)crr3
08:40:30  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
08:40:30  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
08:40:30  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
08:40:30  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
08:40:30  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
08:40:30  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
08:40:30  49  -- Derive date related attributes:
08:40:30  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
08:40:30  51  ,0+TO_CHAR(ydate,'D')d
08:40:30  52  ,0+TO_CHAR(ydate,'W')w
08:40:30  53  -- mpm stands for minutes-past-midnight:
08:40:30  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
08:40:30  55  -- mph stands for minutes-past-hour:
08:40:30  56  ,0+TO_CHAR(ydate,'MI')mph
08:40:30  57  FROM svm4102
08:40:30  58  ORDER BY ydate
08:40:30  59  /

Table created.

Elapsed: 00:00:02.10
08:40:32 SQL> 
08:40:32 SQL> -- rpt
08:40:32 SQL> 
08:40:32 SQL> SELECT
08:40:32   2  pair
08:40:32   3  ,COUNT(pair)
08:40:32   4  ,MIN(clse),MAX(clse)
08:40:32   5  ,MIN(ydate),MAX(ydate)
08:40:32   6  FROM svm4122
08:40:32   7  GROUP BY pair
08:40:32   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_cad       20734	 .9981	   1.0371 2010-09-15 22:25:01 2010-12-24 21:55:00

Elapsed: 00:00:00.05
08:40:32 SQL> 
08:40:32 SQL> -- Prepare for derivation of NTILE based params:
08:40:32 SQL> 
08:40:32 SQL> DROP TABLE svm4142;

Table dropped.

Elapsed: 00:00:00.17
08:40:32 SQL> CREATE TABLE svm4142 COMPRESS AS
08:40:32   2  SELECT
08:40:32   3  pair
08:40:32   4  ,ydate
08:40:32   5  ,prdate
08:40:32   6  ,clse
08:40:32   7  ,g4
08:40:32   8  ,CASE WHEN g4 IS NULL THEN NULL WHEN g4 > 0.0010 THEN 'up' ELSE 'nup' END gatt
08:40:32   9  ,CASE WHEN g4 IS NULL THEN NULL WHEN g4< -0.0010 THEN 'up' ELSE 'nup' END gattn
08:40:32  10  ,CASE WHEN trend IS NULL THEN 1
08:40:32  11  	    WHEN trend =0      THEN 1
08:40:32  12  	    ELSE trend END trend
08:40:32  13  ,cm2
08:40:32  14  ,cm3
08:40:32  15  ,cm4
08:40:32  16  ,cm6
08:40:32  17  ,cm8
08:40:32  18  ,cm10
08:40:32  19  ,cm12
08:40:32  20  ,cm14
08:40:32  21  --
08:40:32  22  ,ca2
08:40:32  23  ,ca3
08:40:32  24  ,ca4
08:40:32  25  ,ca6
08:40:32  26  ,ca8
08:40:32  27  ,ca10
08:40:32  28  ,ca12
08:40:32  29  ,ca14
08:40:32  30  --
08:40:32  31  ,cx2
08:40:32  32  ,cx3
08:40:32  33  ,cx4
08:40:32  34  ,cx6
08:40:32  35  ,cx8
08:40:32  36  ,cx10
08:40:32  37  ,cx12
08:40:32  38  ,cx14
08:40:32  39  --
08:40:32  40  ,crr2
08:40:32  41  ,crr3
08:40:32  42  ,crr4
08:40:32  43  ,crr6
08:40:32  44  ,crr8
08:40:32  45  ,crr10
08:40:32  46  ,crr12
08:40:32  47  ,crr14
08:40:32  48  --
08:40:32  49  ,hh
08:40:32  50  ,d
08:40:32  51  ,w
08:40:32  52  ,mpm
08:40:32  53  ,mph
08:40:32  54  FROM svm4122
08:40:32  55  ORDER BY ydate
08:40:32  56  /

Table created.

Elapsed: 00:00:00.37
08:40:33 SQL> 
08:40:33 SQL> -- rpt
08:40:33 SQL> 
08:40:33 SQL> SELECT
08:40:33   2  pair
08:40:33   3  ,trend
08:40:33   4  ,gatt
08:40:33   5  ,COUNT(pair)
08:40:33   6  ,AVG(g4)
08:40:33   7  FROM svm4142
08:40:33   8  GROUP BY pair,trend,gatt
08:40:33   9  ORDER BY pair,trend,gatt
08:40:33  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G4)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7642 -.00107064
usd_cad 	-1 up	      3195 .002614732
usd_cad 	-1		 8
usd_cad 	 1 nup	      7224 -.00130296
usd_cad 	 1 up	      2625 .003180159
usd_cad 	 1		40

6 rows selected.

Elapsed: 00:00:00.04
08:40:33 SQL> 
08:40:33 SQL> 
08:40:33 SQL> -- Derive NTILE based params:
08:40:33 SQL> 
08:40:33 SQL> DROP TABLE svm4162;

Table dropped.

Elapsed: 00:00:00.12
08:40:33 SQL> CREATE TABLE svm4162 COMPRESS AS
08:40:33   2  SELECT
08:40:33   3  pair
08:40:33   4  ,ydate
08:40:33   5  ,prdate
08:40:33   6  ,clse
08:40:33   7  ,g4
08:40:33   8  ,gatt
08:40:33   9  ,gattn
08:40:33  10  ,trend
08:40:33  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
08:40:33  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
08:40:33  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
08:40:33  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
08:40:33  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
08:40:33  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
08:40:33  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm2  )att06
08:40:33  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm3  )att07
08:40:33  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
08:40:33  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
08:40:33  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
08:40:33  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
08:40:33  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
08:40:33  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
08:40:33  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca2  )att14
08:40:33  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca3  )att15
08:40:33  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
08:40:33  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
08:40:33  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
08:40:33  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
08:40:33  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
08:40:33  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
08:40:33  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx2  )att22
08:40:33  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx3  )att23
08:40:33  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
08:40:33  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
08:40:33  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
08:40:33  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
08:40:33  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
08:40:33  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
08:40:33  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr2 )att30
08:40:33  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr3 )att31
08:40:33  43  ,hh  att32
08:40:33  44  ,d   att33
08:40:33  45  ,w   att34
08:40:33  46  ,mpm att35
08:40:33  47  ,mph att36
08:40:33  48  ,trend att37
08:40:33  49  FROM svm4142
08:40:33  50  ORDER BY ydate
08:40:33  51  /

Table created.

Elapsed: 00:00:04.97
08:40:38 SQL> 
08:40:38 SQL> -- rpt
08:40:38 SQL> 
08:40:38 SQL> SELECT
08:40:38   2  pair
08:40:38   3  ,trend
08:40:38   4  ,gatt
08:40:38   5  ,COUNT(pair)
08:40:38   6  ,AVG(g4)
08:40:38   7  FROM svm4162
08:40:38   8  GROUP BY pair,trend,gatt
08:40:38   9  ORDER BY pair,trend,gatt
08:40:38  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G4)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7642 -.00107064
usd_cad 	-1 up	      3195 .002614732
usd_cad 	-1		 8
usd_cad 	 1 nup	      7224 -.00130296
usd_cad 	 1 up	      2625 .003180159
usd_cad 	 1		40

6 rows selected.

Elapsed: 00:00:00.03
08:40:38 SQL> 
08:40:38 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.17
08:40:38 SQL> CREATE TABLE modsrc COMPRESS AS
08:40:38   2  SELECT
08:40:38   3  pair
08:40:38   4  ,ydate
08:40:38   5  ,prdate
08:40:38   6  ,trend
08:40:38   7  ,g4
08:40:38   8  ,gatt
08:40:38   9  ,gattn
08:40:38  10  FROM svm4162
08:40:38  11  /

Table created.

Elapsed: 00:00:00.09
08:40:38 SQL> 
08:40:38 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.26
08:40:39 SQL> 
08:40:39 SQL> DROP   TABLE cad_ms410 ;

Table dropped.

Elapsed: 00:00:00.10
08:40:39 SQL> CREATE TABLE cad_ms410 COMPRESS AS
08:40:39   2  SELECT
08:40:39   3  ydate
08:40:39   4  ,trend cad_trend
08:40:39   5  ,g4    cad_g4
08:40:39   6  ,gatt  cad_gatt
08:40:39   7  ,gattn cad_gattn
08:40:39   8  FROM modsrc
08:40:39   9  /

Table created.

Elapsed: 00:00:00.06
08:40:39 SQL> 
08:40:39 SQL> ANALYZE TABLE cad_ms410 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
08:40:39 SQL> 
08:40:39 SQL> -- I need a copy of the attributes:
08:40:39 SQL> 
08:40:39 SQL> 
08:40:39 SQL> DROP   TABLE cad_att;

Table dropped.

Elapsed: 00:00:00.19
08:40:39 SQL> CREATE TABLE cad_att COMPRESS AS
08:40:39   2  SELECT
08:40:39   3  ydate
08:40:39   4  ,att00 cad_att00
08:40:39   5  ,att01 cad_att01
08:40:39   6  ,att02 cad_att02
08:40:39   7  ,att03 cad_att03
08:40:39   8  ,att04 cad_att04
08:40:39   9  ,att05 cad_att05
08:40:39  10  ,att06 cad_att06
08:40:39  11  ,att07 cad_att07
08:40:39  12  ,att08 cad_att08
08:40:39  13  ,att09 cad_att09
08:40:39  14  ,att10 cad_att10
08:40:39  15  ,att11 cad_att11
08:40:39  16  ,att12 cad_att12
08:40:39  17  ,att13 cad_att13
08:40:39  18  ,att14 cad_att14
08:40:39  19  ,att15 cad_att15
08:40:39  20  ,att16 cad_att16
08:40:39  21  ,att17 cad_att17
08:40:39  22  ,att18 cad_att18
08:40:39  23  ,att19 cad_att19
08:40:39  24  ,att20 cad_att20
08:40:39  25  ,att21 cad_att21
08:40:39  26  ,att22 cad_att22
08:40:39  27  ,att23 cad_att23
08:40:39  28  ,att24 cad_att24
08:40:39  29  ,att25 cad_att25
08:40:39  30  ,att26 cad_att26
08:40:39  31  ,att27 cad_att27
08:40:39  32  ,att28 cad_att28
08:40:39  33  ,att29 cad_att29
08:40:39  34  ,att30 cad_att30
08:40:39  35  ,att31 cad_att31
08:40:39  36  ,att32 cad_att32
08:40:39  37  ,att33 cad_att33
08:40:39  38  ,att34 cad_att34
08:40:39  39  ,att35 cad_att35
08:40:39  40  ,att36 cad_att36
08:40:39  41  ,att37 cad_att37
08:40:39  42  FROM svm4162
08:40:39  43  /

Table created.

Elapsed: 00:00:00.17
08:40:39 SQL> 
08:40:39 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.49
08:40:40 SQL> 
08:40:40 SQL> -- rpt
08:40:40 SQL> SELECT COUNT(*)FROM svm4102;

  COUNT(*)
----------
     20734

Elapsed: 00:00:00.75
08:40:40 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
     20734

Elapsed: 00:00:00.00
08:40:40 SQL> 
08:40:40 SQL> --
08:40:40 SQL> -- chf410.sql
08:40:40 SQL> --
08:40:40 SQL> 
08:40:40 SQL> -- Creates views and tables for backtesting a forex SVM strategy
08:40:40 SQL> 
08:40:40 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.39
08:40:41 SQL> 
08:40:41 SQL> -- I created di5min here:
08:40:41 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
08:40:41 SQL> 
08:40:41 SQL> CREATE OR REPLACE VIEW svm4102 AS
08:40:41   2  SELECT
08:40:41   3  pair
08:40:41   4  ,ydate
08:40:41   5  ,prdate
08:40:41   6  ,rownum rnum -- acts as t in my time-series
08:40:41   7  ,clse
08:40:41   8  -- Derive a bunch of attributes from clse, the latest price:
08:40:41   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*2 PRECEDING AND CURRENT ROW)min2
08:40:41  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*3 PRECEDING AND CURRENT ROW)min3
08:40:41  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
08:40:41  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
08:40:41  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
08:40:41  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
08:40:41  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
08:40:41  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
08:40:41  17  --
08:40:41  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*2 PRECEDING AND CURRENT ROW)avg2
08:40:41  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*3 PRECEDING AND CURRENT ROW)avg3
08:40:41  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
08:40:41  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
08:40:41  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
08:40:41  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
08:40:41  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
08:40:41  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
08:40:41  26  --
08:40:41  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*2 PRECEDING AND CURRENT ROW)max2
08:40:41  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*3 PRECEDING AND CURRENT ROW)max3
08:40:41  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
08:40:41  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
08:40:41  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
08:40:41  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
08:40:41  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
08:40:41  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
08:40:41  35  ,LEAD(clse,12*4,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld4
08:40:41  36  FROM di5min
08:40:41  37  WHERE pair LIKE'%chf%'
08:40:41  38  AND ydate > sysdate - 190
08:40:41  39  ORDER BY ydate
08:40:41  40  /

View created.

Elapsed: 00:00:00.04
08:40:41 SQL> 
08:40:41 SQL> -- rpt
08:40:41 SQL> 
08:40:41 SQL> SELECT
08:40:41   2  pair
08:40:41   3  ,COUNT(pair)
08:40:41   4  ,MIN(clse),MAX(clse)
08:40:41   5  ,MIN(avg4),MAX(avg4)
08:40:41   6  ,MIN(ydate),MAX(ydate)
08:40:41   7  FROM svm4102
08:40:41   8  GROUP BY pair
08:40:41   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG4)  MAX(AVG4) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_chf       20737	 .9471	   1.0177 .949713265 1.01640408 2010-09-15 22:25:01 2010-12-24 21:55:00

Elapsed: 00:00:00.76
08:40:42 SQL> 
08:40:42 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
08:40:42 SQL> DROP TABLE svm4122;

Table dropped.

Elapsed: 00:00:00.24
08:40:42 SQL> CREATE TABLE svm4122 COMPRESS AS
08:40:42   2  SELECT
08:40:42   3  pair
08:40:42   4  ,ydate
08:40:42   5  ,prdate
08:40:42   6  ,clse
08:40:42   7  -- g4 is important. I want to predict g4:
08:40:42   8  ,ld4 - clse g4
08:40:42   9  ,SIGN(avg4 - LAG(avg4,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
08:40:42  10  -- I want more attributes from the ones I derived above:
08:40:42  11  -- clse relation to moving-min
08:40:42  12  ,clse-min2  cm2
08:40:42  13  ,clse-min3  cm3
08:40:42  14  ,clse-min4  cm4
08:40:42  15  ,clse-min6  cm6
08:40:42  16  ,clse-min8  cm8
08:40:42  17  ,clse-min10 cm10
08:40:42  18  ,clse-min12 cm12
08:40:42  19  ,clse-min14 cm14
08:40:42  20  -- clse relation to moving-avg
08:40:42  21  ,clse-avg2  ca2
08:40:42  22  ,clse-avg3  ca3
08:40:42  23  ,clse-avg4  ca4
08:40:42  24  ,clse-avg6  ca6
08:40:42  25  ,clse-avg8  ca8
08:40:42  26  ,clse-avg10 ca10
08:40:42  27  ,clse-avg12 ca12
08:40:42  28  ,clse-avg14 ca14
08:40:42  29  -- clse relation to moving-max
08:40:42  30  ,clse-max2  cx2
08:40:42  31  ,clse-max3  cx3
08:40:42  32  ,clse-max4  cx4
08:40:42  33  ,clse-max6  cx6
08:40:42  34  ,clse-max8  cx8
08:40:42  35  ,clse-max10 cx10
08:40:42  36  ,clse-max12 cx12
08:40:42  37  ,clse-max14 cx14
08:40:42  38  -- Derive more attributes.
08:40:42  39  -- I want to use CORR() here to help SVM see the shape of the series.
08:40:42  40  -- But COVAR_POP is more stable:
08:40:42  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*2  PRECEDING AND CURRENT ROW)crr2
08:40:42  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*3  PRECEDING AND CURRENT ROW)crr3
08:40:42  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
08:40:42  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
08:40:42  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
08:40:42  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
08:40:42  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
08:40:42  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
08:40:42  49  -- Derive date related attributes:
08:40:42  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
08:40:42  51  ,0+TO_CHAR(ydate,'D')d
08:40:42  52  ,0+TO_CHAR(ydate,'W')w
08:40:42  53  -- mpm stands for minutes-past-midnight:
08:40:42  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
08:40:42  55  -- mph stands for minutes-past-hour:
08:40:42  56  ,0+TO_CHAR(ydate,'MI')mph
08:40:42  57  FROM svm4102
08:40:42  58  ORDER BY ydate
08:40:42  59  /

Table created.

Elapsed: 00:00:02.04
08:40:44 SQL> 
08:40:44 SQL> -- rpt
08:40:44 SQL> 
08:40:44 SQL> SELECT
08:40:44   2  pair
08:40:44   3  ,COUNT(pair)
08:40:44   4  ,MIN(clse),MAX(clse)
08:40:44   5  ,MIN(ydate),MAX(ydate)
08:40:44   6  FROM svm4122
08:40:44   7  GROUP BY pair
08:40:44   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_chf       20737	 .9471	   1.0177 2010-09-15 22:25:01 2010-12-24 21:55:00

Elapsed: 00:00:00.04
08:40:44 SQL> 
08:40:44 SQL> -- Prepare for derivation of NTILE based params:
08:40:44 SQL> 
08:40:44 SQL> DROP TABLE svm4142;

Table dropped.

Elapsed: 00:00:00.15
08:40:44 SQL> CREATE TABLE svm4142 COMPRESS AS
08:40:44   2  SELECT
08:40:44   3  pair
08:40:44   4  ,ydate
08:40:44   5  ,prdate
08:40:44   6  ,clse
08:40:44   7  ,g4
08:40:44   8  ,CASE WHEN g4 IS NULL THEN NULL WHEN g4 > 0.0010 THEN 'up' ELSE 'nup' END gatt
08:40:44   9  ,CASE WHEN g4 IS NULL THEN NULL WHEN g4< -0.0010 THEN 'up' ELSE 'nup' END gattn
08:40:44  10  ,CASE WHEN trend IS NULL THEN 1
08:40:44  11  	    WHEN trend =0      THEN 1
08:40:44  12  	    ELSE trend END trend
08:40:44  13  ,cm2
08:40:44  14  ,cm3
08:40:44  15  ,cm4
08:40:44  16  ,cm6
08:40:44  17  ,cm8
08:40:44  18  ,cm10
08:40:44  19  ,cm12
08:40:44  20  ,cm14
08:40:44  21  --
08:40:44  22  ,ca2
08:40:44  23  ,ca3
08:40:44  24  ,ca4
08:40:44  25  ,ca6
08:40:44  26  ,ca8
08:40:44  27  ,ca10
08:40:44  28  ,ca12
08:40:44  29  ,ca14
08:40:44  30  --
08:40:44  31  ,cx2
08:40:44  32  ,cx3
08:40:44  33  ,cx4
08:40:44  34  ,cx6
08:40:44  35  ,cx8
08:40:44  36  ,cx10
08:40:44  37  ,cx12
08:40:44  38  ,cx14
08:40:44  39  --
08:40:44  40  ,crr2
08:40:44  41  ,crr3
08:40:44  42  ,crr4
08:40:44  43  ,crr6
08:40:44  44  ,crr8
08:40:44  45  ,crr10
08:40:44  46  ,crr12
08:40:44  47  ,crr14
08:40:44  48  --
08:40:44  49  ,hh
08:40:44  50  ,d
08:40:44  51  ,w
08:40:44  52  ,mpm
08:40:44  53  ,mph
08:40:44  54  FROM svm4122
08:40:44  55  ORDER BY ydate
08:40:44  56  /

Table created.

Elapsed: 00:00:00.37
08:40:45 SQL> 
08:40:45 SQL> -- rpt
08:40:45 SQL> 
08:40:45 SQL> SELECT
08:40:45   2  pair
08:40:45   3  ,trend
08:40:45   4  ,gatt
08:40:45   5  ,COUNT(pair)
08:40:45   6  ,AVG(g4)
08:40:45   7  FROM svm4142
08:40:45   8  GROUP BY pair,trend,gatt
08:40:45   9  ORDER BY pair,trend,gatt
08:40:45  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G4)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7274 -.00138294
usd_chf 	-1 up	      3297 .002949763
usd_chf 	-1		 7
usd_chf 	 1 nup	      7341 -.00139696
usd_chf 	 1 up	      2777 .003135934
usd_chf 	 1		41

6 rows selected.

Elapsed: 00:00:00.03
08:40:45 SQL> 
08:40:45 SQL> 
08:40:45 SQL> -- Derive NTILE based params:
08:40:45 SQL> 
08:40:45 SQL> DROP TABLE svm4162;

Table dropped.

Elapsed: 00:00:00.17
08:40:45 SQL> CREATE TABLE svm4162 COMPRESS AS
08:40:45   2  SELECT
08:40:45   3  pair
08:40:45   4  ,ydate
08:40:45   5  ,prdate
08:40:45   6  ,clse
08:40:45   7  ,g4
08:40:45   8  ,gatt
08:40:45   9  ,gattn
08:40:45  10  ,trend
08:40:45  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
08:40:45  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
08:40:45  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
08:40:45  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
08:40:45  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
08:40:45  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
08:40:45  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm2  )att06
08:40:45  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm3  )att07
08:40:45  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
08:40:45  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
08:40:45  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
08:40:45  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
08:40:45  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
08:40:45  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
08:40:45  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca2  )att14
08:40:45  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca3  )att15
08:40:45  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
08:40:45  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
08:40:45  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
08:40:45  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
08:40:45  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
08:40:45  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
08:40:45  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx2  )att22
08:40:45  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx3  )att23
08:40:45  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
08:40:45  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
08:40:45  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
08:40:45  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
08:40:45  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
08:40:45  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
08:40:45  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr2 )att30
08:40:45  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr3 )att31
08:40:45  43  ,hh  att32
08:40:45  44  ,d   att33
08:40:45  45  ,w   att34
08:40:45  46  ,mpm att35
08:40:45  47  ,mph att36
08:40:45  48  ,trend att37
08:40:45  49  FROM svm4142
08:40:45  50  ORDER BY ydate
08:40:45  51  /

Table created.

Elapsed: 00:00:04.97
08:40:50 SQL> 
08:40:50 SQL> -- rpt
08:40:50 SQL> 
08:40:50 SQL> SELECT
08:40:50   2  pair
08:40:50   3  ,trend
08:40:50   4  ,gatt
08:40:50   5  ,COUNT(pair)
08:40:50   6  ,AVG(g4)
08:40:50   7  FROM svm4162
08:40:50   8  GROUP BY pair,trend,gatt
08:40:50   9  ORDER BY pair,trend,gatt
08:40:50  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G4)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7274 -.00138294
usd_chf 	-1 up	      3297 .002949763
usd_chf 	-1		 7
usd_chf 	 1 nup	      7341 -.00139696
usd_chf 	 1 up	      2777 .003135934
usd_chf 	 1		41

6 rows selected.

Elapsed: 00:00:00.03
08:40:50 SQL> 
08:40:50 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
08:40:50 SQL> CREATE TABLE modsrc COMPRESS AS
08:40:50   2  SELECT
08:40:50   3  pair
08:40:50   4  ,ydate
08:40:50   5  ,prdate
08:40:50   6  ,trend
08:40:50   7  ,g4
08:40:50   8  ,gatt
08:40:50   9  ,gattn
08:40:50  10  FROM svm4162
08:40:50  11  /

Table created.

Elapsed: 00:00:00.08
08:40:50 SQL> 
08:40:50 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.28
08:40:50 SQL> 
08:40:50 SQL> DROP   TABLE chf_ms410 ;

Table dropped.

Elapsed: 00:00:00.15
08:40:50 SQL> CREATE TABLE chf_ms410 COMPRESS AS
08:40:50   2  SELECT
08:40:50   3  ydate
08:40:50   4  ,trend chf_trend
08:40:50   5  ,g4    chf_g4
08:40:50   6  ,gatt  chf_gatt
08:40:50   7  ,gattn chf_gattn
08:40:50   8  FROM modsrc
08:40:50   9  /

Table created.

Elapsed: 00:00:00.07
08:40:50 SQL> 
08:40:50 SQL> ANALYZE TABLE chf_ms410 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
08:40:51 SQL> 
08:40:51 SQL> -- I need a copy of the attributes:
08:40:51 SQL> 
08:40:51 SQL> 
08:40:51 SQL> DROP   TABLE chf_att;

Table dropped.

Elapsed: 00:00:00.15
08:40:51 SQL> CREATE TABLE chf_att COMPRESS AS
08:40:51   2  SELECT
08:40:51   3  ydate
08:40:51   4  ,att00 chf_att00
08:40:51   5  ,att01 chf_att01
08:40:51   6  ,att02 chf_att02
08:40:51   7  ,att03 chf_att03
08:40:51   8  ,att04 chf_att04
08:40:51   9  ,att05 chf_att05
08:40:51  10  ,att06 chf_att06
08:40:51  11  ,att07 chf_att07
08:40:51  12  ,att08 chf_att08
08:40:51  13  ,att09 chf_att09
08:40:51  14  ,att10 chf_att10
08:40:51  15  ,att11 chf_att11
08:40:51  16  ,att12 chf_att12
08:40:51  17  ,att13 chf_att13
08:40:51  18  ,att14 chf_att14
08:40:51  19  ,att15 chf_att15
08:40:51  20  ,att16 chf_att16
08:40:51  21  ,att17 chf_att17
08:40:51  22  ,att18 chf_att18
08:40:51  23  ,att19 chf_att19
08:40:51  24  ,att20 chf_att20
08:40:51  25  ,att21 chf_att21
08:40:51  26  ,att22 chf_att22
08:40:51  27  ,att23 chf_att23
08:40:51  28  ,att24 chf_att24
08:40:51  29  ,att25 chf_att25
08:40:51  30  ,att26 chf_att26
08:40:51  31  ,att27 chf_att27
08:40:51  32  ,att28 chf_att28
08:40:51  33  ,att29 chf_att29
08:40:51  34  ,att30 chf_att30
08:40:51  35  ,att31 chf_att31
08:40:51  36  ,att32 chf_att32
08:40:51  37  ,att33 chf_att33
08:40:51  38  ,att34 chf_att34
08:40:51  39  ,att35 chf_att35
08:40:51  40  ,att36 chf_att36
08:40:51  41  ,att37 chf_att37
08:40:51  42  FROM svm4162
08:40:51  43  /

Table created.

Elapsed: 00:00:00.21
08:40:51 SQL> 
08:40:51 SQL> ANALYZE TABLE chf_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
08:40:51 SQL> 
08:40:51 SQL> -- rpt
08:40:51 SQL> SELECT COUNT(*)FROM svm4102;

  COUNT(*)
----------
     20737

Elapsed: 00:00:00.75
08:40:52 SQL> SELECT COUNT(*)FROM chf_att;

  COUNT(*)
----------
     20737

Elapsed: 00:00:00.00
08:40:52 SQL> 
08:40:52 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
