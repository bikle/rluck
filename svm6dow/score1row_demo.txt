svm6/score1row_demo.txt


01:56:06 SQL> @score1hr.sql 2010-01-01 01:00:00
01:56:33 SQL> --
01:56:33 SQL> -- score1hr.sql
01:56:33 SQL> --
01:56:33 SQL> 
01:56:33 SQL> -- I use this script to score 1 row constructed from svm6ms.
01:56:33 SQL> -- svm6ms is also the source of rows I use to build the model behind the SVM scoring algorithm.
01:56:33 SQL> 
01:56:33 SQL> -- Aside from the case_id and the target attribute, all columns in both sme and bme should be numeric.
01:56:33 SQL> 
01:56:33 SQL> -- Notice that I pass in ydate on the command line.
01:56:33 SQL> -- Demo: @score1hr.sql    2010-01-01 01:00:00
01:56:33 SQL> 
01:56:33 SQL> -- I start buy building a view which holds the 1 row I want to score:
01:56:33 SQL> CREATE OR REPLACE VIEW sme AS
01:56:33   2  SELECT
01:56:33   3  'aud_usd'||ydate prdate
01:56:33   4  ,NULL gatt
01:56:33   5  -- Numeric attributes for SVM.
01:56:33   6  -- Day-of-week:
01:56:33   7  ,dow
01:56:33   8  -- Hour-of-day:
01:56:33   9  ,hr
01:56:33  10  FROM svm6ms
01:56:33  11  WHERE ydate = '&1'||' '||'&2'
01:56:33  12  /
old  11: WHERE ydate = '&1'||' '||'&2'
new  11: WHERE ydate = '2010-01-01'||' '||'01:00:00'

View created.

Elapsed: 00:00:00.12
01:56:33 SQL> 
01:56:33 SQL> -- rpt
01:56:33 SQL> -- I should see only 1 row. This is the row I want to score:
01:56:33 SQL> SELECT COUNT(prdate)FROM sme;

COUNT(PRDATE)
-------------
            1

Elapsed: 00:00:00.08
01:56:33 SQL> 
01:56:33 SQL> -- Build a view which holds rows I use to fill the SVM model.
01:56:33 SQL> -- Notice that each row resides in sme's past.
01:56:33 SQL> -- I should not build a model which has access to data in sme's future.
01:56:33 SQL> 
01:56:33 SQL> CREATE OR REPLACE VIEW bme AS
01:56:33   2  SELECT
01:56:33   3  'aud_usd'||ydate prdate
01:56:33   4  ,gatt
01:56:33   5  -- Numeric attributes for SVM.
01:56:33   6  -- Day-of-week:
01:56:33   7  ,dow
01:56:33   8  -- Hour-of-day:
01:56:33   9  ,hr
01:56:33  10  FROM svm6ms
01:56:33  11  -- I want data from the past, not present or future.
01:56:33  12  -- ydate6 is at least 6 hours ahead of ydate.
01:56:33  13  -- So, I block all rows where ydate6 is ahead of the 1 sme row.
01:56:33  14  WHERE ydate6 <= '&1'||' '||'&2'
01:56:33  15  AND gatt IN('nup','up')
01:56:33  16  /
old  14: WHERE ydate6 <= '&1'||' '||'&2'
new  14: WHERE ydate6 <= '2010-01-01'||' '||'01:00:00'

View created.

Elapsed: 00:00:00.08
01:56:33 SQL> 
01:56:33 SQL> -- rpt
01:56:33 SQL> SELECT ydate                 FROM svm6ms WHERE ydate  ='&1'||' '||'&2';
old   1: SELECT ydate                 FROM svm6ms WHERE ydate  ='&1'||' '||'&2'
new   1: SELECT ydate                 FROM svm6ms WHERE ydate  ='2010-01-01'||' '||'01:00:00'

YDATE
-------------------
2010-01-01 01:00:00

Elapsed: 00:00:00.06
01:56:33 SQL> SELECT MAX(ydate),MAX(ydate6)FROM svm6ms WHERE ydate6<='&1'||' '||'&2';
old   1: SELECT MAX(ydate),MAX(ydate6)FROM svm6ms WHERE ydate6<='&1'||' '||'&2'
new   1: SELECT MAX(ydate),MAX(ydate6)FROM svm6ms WHERE ydate6<='2010-01-01'||' '||'01:00:00'

MAX(YDATE)          MAX(YDATE6)
------------------- -------------------
2009-12-31 19:00:00 2010-01-01 01:00:00

Elapsed: 00:00:00.05
01:56:33 SQL> 
01:56:33 SQL> SELECT gatt,MIN(prdate),COUNT(prdate),MAX(prdate)FROM bme GROUP BY gatt;

GAT MIN(PRDATE)                COUNT(PRDATE) MAX(PRDATE)
--- -------------------------- ------------- --------------------------
nup aud_usd2009-01-01 03:00:00          3502 aud_usd2009-12-31 19:00:00
up  aud_usd2009-01-01 01:00:00          2780 aud_usd2009-12-31 10:00:00

Elapsed: 00:00:00.08
01:56:33 SQL> 
01:56:33 SQL> -- Now send both sme and bme to SVM.
01:56:33 SQL> -- It scores the 1 row in sme using rows in bme as a data source for the SVM model.
01:56:33 SQL> @svm_score.sql
01:56:33 SQL> --
01:56:33 SQL> -- svm_score.sql
01:56:33 SQL> --
01:56:33 SQL> 
01:56:33 SQL> -- usage: svm_score.sql
01:56:33 SQL> 
01:56:33 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep.
01:56:33 SQL> 
01:56:33 SQL> -- Much of the syntax here was derived from a demo while I was doing a search inside of oracle.com.
01:56:33 SQL> 
01:56:33 SQL> -- Please assume that Oracle retains a copyright on this script.
01:56:33 SQL> 
01:56:33 SQL> DEFINE target     = 'gatt'
01:56:33 SQL> DEFINE model_name = 'svm6'
01:56:33 SQL> DEFINE bldtable   = 'bme'
01:56:33 SQL> DEFINE scoretable = 'sme'
01:56:33 SQL> DEFINE case_id    = 'prdate'
01:56:33 SQL> 
01:56:33 SQL> -- Define a variable to help me exclude some columns from some data mining calls
01:56:33 SQL> DEFINE exclude1 = "'&target','&case_id'"
01:56:33 SQL> 
01:56:33 SQL> -- Builds an SVM model using pl/sql.
01:56:33 SQL> 
01:56:33 SQL> -----------------------------------------------------------------------
01:56:33 SQL> --                            BUILD THE MODEL
01:56:33 SQL> -----------------------------------------------------------------------
01:56:33 SQL> 
01:56:33 SQL> -- Cleanup old build data preparation objects for repeat runs
01:56:33 SQL> DELETE svmc_miss_num;

224 rows deleted.

Elapsed: 00:00:00.01
01:56:33 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
01:56:33 SQL> DELETE svmc_clip;

224 rows deleted.

Elapsed: 00:00:00.00
01:56:33 SQL> DELETE svmc_norm;

224 rows deleted.

Elapsed: 00:00:00.00
01:56:33 SQL> 
01:56:33 SQL> 
01:56:33 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
01:56:33 SQL> --
01:56:33 SQL> -- DROP   TABLE svmc_settings ;
01:56:33 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
01:56:33 SQL> -- DELETE svmc_settings;
01:56:33 SQL> 
01:56:33 SQL> -- The default classification algorithm is Naive Bayes. So override
01:56:33 SQL> -- this choice to SVM using a settings table.
01:56:33 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
01:56:33 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
01:56:33 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
01:56:33 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
01:56:33 SQL> -- models.
01:56:33 SQL> --
01:56:33 SQL> 
01:56:33 SQL> -- Do this once and then comment it out.
01:56:33 SQL> -- That makes script go faster.
01:56:33 SQL> -- BEGIN
01:56:33 SQL> -- -- Populate settings table
01:56:33 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
01:56:33 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
01:56:33 SQL> --
01:56:33 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
01:56:33 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
01:56:33 SQL> --
01:56:33 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
01:56:33 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
01:56:33 SQL> --   COMMIT;
01:56:33 SQL> -- END;
01:56:33 SQL> -- /
01:56:33 SQL> 
01:56:33 SQL> SELECT * FROM svmc_settings;

SETTING_NAME                   SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME                      ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION           SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE         320123123

Elapsed: 00:00:00.00
01:56:33 SQL> 
01:56:33 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
01:56:33   2  EXCEPTION WHEN OTHERS THEN NULL; END;
01:56:33   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.09
01:56:33 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
01:56:33   2  EXCEPTION WHEN OTHERS THEN NULL; END;
01:56:33   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
01:56:34 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
01:56:34   2  EXCEPTION WHEN OTHERS THEN NULL; END;
01:56:34   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
01:56:34 SQL> 
01:56:34 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
01:56:34   2  EXCEPTION WHEN OTHERS THEN NULL; END;
01:56:34   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
01:56:34 SQL> 
01:56:34 SQL> --------------------------------
01:56:34 SQL> -- PREPARE BUILD (TRAINING) DATA
01:56:34 SQL> --
01:56:34 SQL> 
01:56:34 SQL> -- 1. Missing Value treatment for all Predictors and
01:56:34 SQL> -- 2. Outlier Treatment and
01:56:34 SQL> -- 3. Normalization are performed below.
01:56:34 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
01:56:34 SQL> --    normalized here.
01:56:34 SQL> 
01:56:34 SQL> BEGIN
01:56:34   2    -- Perform missing value treatment for all predictors
01:56:34   3    -- create miss tables
01:56:34   4    --  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
01:56:34   5    --  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
01:56:34   6  
01:56:34   7    -- populate miss tables
01:56:34   8    DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
01:56:34   9      miss_table_name => 'svmc_miss_num',
01:56:34  10      data_table_name => '&bldtable',
01:56:34  11      exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
01:56:34  12  
01:56:34  13    DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
01:56:34  14      miss_table_name => 'svmc_miss_cat',
01:56:34  15      data_table_name => '&bldtable',
01:56:34  16      exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
01:56:34  17  
01:56:34  18    -- xform input data to replace missing values
01:56:34  19    DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
01:56:34  20      miss_table_name => 'svmc_miss_num',
01:56:34  21      data_table_name => '&bldtable',
01:56:34  22      xform_view_name => 'xformed_build_miss_num');
01:56:34  23    DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
01:56:34  24      miss_table_name => 'svmc_miss_cat',
01:56:34  25      data_table_name => '&bldtable',
01:56:34  26      xform_view_name => 'xformed_build_miss_cat');
01:56:34  27  
01:56:34  28    -- Perform outlier treatment.
01:56:34  29    -- create clip table
01:56:34  30    -- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
01:56:34  31  
01:56:34  32    -- populate clip table
01:56:34  33    DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
01:56:34  34      clip_table_name => 'svmc_clip',
01:56:34  35      data_table_name => '&bldtable',
01:56:34  36      tail_frac       => 0.025,
01:56:34  37      exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
01:56:34  38  
01:56:34  39    -- xform input data to winsorized data
01:56:34  40    DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
01:56:34  41      clip_table_name => 'svmc_clip',
01:56:34  42      data_table_name => '&bldtable',
01:56:34  43      xform_view_name => 'svmc_winsor');
01:56:34  44  
01:56:34  45    -- create normalization table
01:56:34  46    -- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
01:56:34  47  
01:56:34  48    -- populate normalization table based on winsorized data
01:56:34  49    DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
01:56:34  50      norm_table_name => 'svmc_norm',
01:56:34  51      data_table_name => 'svmc_winsor',
01:56:34  52      exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
01:56:34  53  
01:56:34  54    -- normalize the original data
01:56:34  55    DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
01:56:34  56      norm_table_name => 'svmc_norm',
01:56:34  57      data_table_name => '&bldtable',
01:56:34  58      xform_view_name => 'svmc_build_prep');
01:56:34  59  END;
01:56:34  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.44
01:56:34 SQL> 
01:56:34 SQL> ---------------------
01:56:34 SQL> -- CREATE A NEW MODEL
01:56:34 SQL> --
01:56:34 SQL> -- Cleanup old model with the same name for repeat runs
01:56:34 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
01:56:34   2  EXCEPTION WHEN OTHERS THEN NULL; END;
01:56:34   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('svm6');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.38
01:56:34 SQL> 
01:56:34 SQL> -- Build a new SVM Model
01:56:34 SQL> BEGIN
01:56:34   2    DBMS_DATA_MINING.CREATE_MODEL(
01:56:34   3      model_name          => '&model_name',
01:56:34   4      mining_function     => dbms_data_mining.classification,
01:56:34   5      data_table_name     => 'svmc_build_prep',
01:56:34   6      case_id_column_name => '&case_id',
01:56:34   7      target_column_name  => '&target',
01:56:34   8      settings_table_name => 'svmc_settings');
01:56:34   9  END;
01:56:34  10  /
old   3:     model_name          => '&model_name',
new   3:     model_name          => 'svm6',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:02.64
01:56:37 SQL> 
01:56:37 SQL> -----------------------------------------------------------------------
01:56:37 SQL> --                               APPLY/score THE MODEL
01:56:37 SQL> -----------------------------------------------------------------------
01:56:37 SQL> 
01:56:37 SQL> -- Cleanup old scoring data preparation objects for repeat runs
01:56:37 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
01:56:37   2  EXCEPTION WHEN OTHERS THEN NULL; END;
01:56:37   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
01:56:37 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
01:56:37   2  EXCEPTION WHEN OTHERS THEN NULL; END;
01:56:37   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.08
01:56:37 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
01:56:37   2  EXCEPTION WHEN OTHERS THEN NULL; END;
01:56:37   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
01:56:37 SQL> -----------------------
01:56:37 SQL> -- PREPARE SCORING DATA
01:56:37 SQL> --
01:56:37 SQL> -- If the data for model creation has been prepared, then the data
01:56:37 SQL> -- to be scored using the model must be prepared in the same manner
01:56:37 SQL> -- in order to obtain meaningful results.
01:56:37 SQL> --
01:56:37 SQL> -- 1. Missing Value treatment for all Predictors and
01:56:37 SQL> -- 2. Normalization
01:56:37 SQL> -- No outlier treatment will be performed during test and apply. The
01:56:37 SQL> -- normalization step is sufficient, since the normalization parameters
01:56:37 SQL> -- already capture the effects of outlier treatment done with build data.
01:56:37 SQL> --
01:56:37 SQL> BEGIN
01:56:37   2    -- Xform Test data to replace missing values
01:56:37   3    DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
01:56:37   4      miss_table_name => 'svmc_miss_num',
01:56:37   5      data_table_name => '&scoretable',
01:56:37   6      xform_view_name => 'xformed_apply_miss_num');
01:56:37   7  
01:56:37   8    DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
01:56:37   9      miss_table_name => 'svmc_miss_cat',
01:56:37  10      data_table_name => '&scoretable',
01:56:37  11      xform_view_name => 'xformed_apply_miss_cat');
01:56:37  12  
01:56:37  13    -- Normalize the data to be scored
01:56:37  14    DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
01:56:37  15      norm_table_name => 'svmc_norm',
01:56:37  16      data_table_name => '&scoretable',
01:56:37  17      xform_view_name => 'svmc_apply_prep');
01:56:37  18  END;
01:56:37  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.07
01:56:37 SQL> 
01:56:37 SQL> INSERT INTO svm6scores (prdate,score,rundate)
01:56:37   2  SELECT
01:56:37   3  prdate
01:56:37   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
01:56:37   5  ,sysdate
01:56:37   6  FROM svmc_apply_prep
01:56:37   7  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(svm6,'up' USING *)score

1 row created.

Elapsed: 00:00:00.15
01:56:38 SQL> 
01:56:38 SQL> 
01:56:38 SQL> 
01:56:38 SQL> 
01:56:38 SQL> select * from svm6scores;

PRDATE                              SCORE RUNDATE
------------------------------ ---------- -------------------
aud_usd2010-01-01 01:00:00     .817491757 2010-11-12 01:56:37

Elapsed: 00:00:00.01
01:56:52 SQL> 
01:57:21 SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
oracle@z2:/pt/s/rlk/svm6$ 
