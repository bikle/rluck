
SQL*Plus: Release 11.2.0.1.0 Production on Thu Jan 6 23:42:29 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

23:42:29 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
23:42:29 SQL> 23:42:29 SQL> --
23:42:29 SQL> -- eur610.sql
23:42:29 SQL> --
23:42:29 SQL> 
23:42:29 SQL> -- Creates views and tables for backtesting a forex SVM strategy
23:42:29 SQL> 
23:42:29 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.02
23:42:29 SQL> 
23:42:29 SQL> -- I created di5min here:
23:42:29 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
23:42:29 SQL> 
23:42:29 SQL> CREATE OR REPLACE VIEW svm6102 AS
23:42:29   2  SELECT
23:42:29   3  pair
23:42:29   4  ,ydate
23:42:29   5  ,prdate
23:42:29   6  ,rownum rnum -- acts as t in my time-series
23:42:29   7  ,clse
23:42:29   8  -- Derive a bunch of attributes from clse, the latest price:
23:42:29   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
23:42:29  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
23:42:29  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
23:42:29  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
23:42:29  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
23:42:29  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
23:42:29  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
23:42:29  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
23:42:29  17  --
23:42:29  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
23:42:29  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
23:42:29  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
23:42:29  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
23:42:29  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
23:42:29  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
23:42:29  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
23:42:29  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
23:42:29  26  --
23:42:29  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
23:42:29  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
23:42:29  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
23:42:29  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
23:42:29  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
23:42:29  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
23:42:29  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
23:42:29  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
23:42:29  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
23:42:29  36  FROM di5min WHERE pair LIKE'%eur%'
23:42:29  37  AND ydate > sysdate - 95
23:42:29  38  ORDER BY ydate
23:42:29  39  /

View created.

Elapsed: 00:00:00.05
23:42:29 SQL> 
23:42:29 SQL> -- rpt
23:42:29 SQL> 
23:42:29 SQL> SELECT
23:42:29   2  pair
23:42:29   3  ,COUNT(pair)
23:42:29   4  ,MIN(clse),MAX(clse)
23:42:29   5  ,MIN(avg6),MAX(avg6)
23:42:29   6  ,MIN(ydate),MAX(ydate)
23:42:29   7  FROM svm6102
23:42:29   8  GROUP BY pair
23:42:29   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_usd       19811    1.29735	   1.4273 1.29875103 1.42436233 2010-10-03 23:45:01 2011-01-06 23:40:00

Elapsed: 00:00:00.94
23:42:30 SQL> 
23:42:30 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
23:42:30 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.10
23:42:30 SQL> CREATE TABLE svm6122 COMPRESS AS
23:42:30   2  SELECT
23:42:30   3  pair
23:42:30   4  ,ydate
23:42:30   5  ,prdate
23:42:30   6  ,clse
23:42:30   7  -- g6 is important. I want to predict g6:
23:42:30   8  ,ld6 - clse g6
23:42:30   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
23:42:30  10  -- I want more attributes from the ones I derived above:
23:42:30  11  -- clse relation to moving-min
23:42:30  12  ,clse-min4  cm4
23:42:30  13  ,clse-min6  cm6
23:42:30  14  ,clse-min8  cm8
23:42:30  15  ,clse-min10 cm10
23:42:30  16  ,clse-min12 cm12
23:42:30  17  ,clse-min14 cm14
23:42:30  18  ,clse-min16 cm16
23:42:30  19  ,clse-min18 cm18
23:42:30  20  -- clse relation to moving-avg
23:42:30  21  ,clse-avg4  ca4
23:42:30  22  ,clse-avg6  ca6
23:42:30  23  ,clse-avg8  ca8
23:42:30  24  ,clse-avg10 ca10
23:42:30  25  ,clse-avg12 ca12
23:42:30  26  ,clse-avg14 ca14
23:42:30  27  ,clse-avg16 ca16
23:42:30  28  ,clse-avg18 ca18
23:42:30  29  -- clse relation to moving-max
23:42:30  30  ,clse-max4  cx4
23:42:30  31  ,clse-max6  cx6
23:42:30  32  ,clse-max8  cx8
23:42:30  33  ,clse-max10 cx10
23:42:30  34  ,clse-max12 cx12
23:42:30  35  ,clse-max14 cx14
23:42:30  36  ,clse-max16 cx16
23:42:30  37  ,clse-max18 cx18
23:42:30  38  -- Derive more attributes.
23:42:30  39  -- I want to use CORR() here to help SVM see the shape of the series.
23:42:30  40  -- But COVAR_POP is more stable:
23:42:30  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
23:42:30  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
23:42:30  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
23:42:30  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
23:42:30  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
23:42:30  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
23:42:30  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
23:42:30  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
23:42:30  49  -- Derive date related attributes:
23:42:30  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
23:42:30  51  ,0+TO_CHAR(ydate,'D')d
23:42:30  52  ,0+TO_CHAR(ydate,'W')w
23:42:30  53  -- mpm stands for minutes-past-midnight:
23:42:30  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
23:42:30  55  -- mph stands for minutes-past-hour:
23:42:30  56  ,0+TO_CHAR(ydate,'MI')mph
23:42:30  57  FROM svm6102
23:42:30  58  ORDER BY ydate
23:42:30  59  /

Table created.

Elapsed: 00:00:02.44
23:42:33 SQL> 
23:42:33 SQL> -- rpt
23:42:33 SQL> 
23:42:33 SQL> SELECT
23:42:33   2  pair
23:42:33   3  ,COUNT(pair)
23:42:33   4  ,MIN(clse),MAX(clse)
23:42:33   5  ,MIN(ydate),MAX(ydate)
23:42:33   6  FROM svm6122
23:42:33   7  GROUP BY pair
23:42:33   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_usd       19811    1.29735	   1.4273 2010-10-03 23:45:01 2011-01-06 23:40:00

Elapsed: 00:00:00.04
23:42:33 SQL> 
23:42:33 SQL> -- Prepare for derivation of NTILE based params:
23:42:33 SQL> 
23:42:33 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.12
23:42:33 SQL> CREATE TABLE svm6142 COMPRESS AS
23:42:33   2  SELECT
23:42:33   3  pair
23:42:33   4  ,ydate
23:42:33   5  ,prdate
23:42:33   6  ,clse
23:42:33   7  ,g6
23:42:33   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
23:42:33   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
23:42:33  10  ,CASE WHEN trend IS NULL THEN 1
23:42:33  11  	    WHEN trend =0      THEN 1
23:42:33  12  	    ELSE trend END trend
23:42:33  13  ,cm4
23:42:33  14  ,cm6
23:42:33  15  ,cm8
23:42:33  16  ,cm10
23:42:33  17  ,cm12
23:42:33  18  ,cm14
23:42:33  19  ,cm16
23:42:33  20  ,cm18
23:42:33  21  --
23:42:33  22  ,ca4
23:42:33  23  ,ca6
23:42:33  24  ,ca8
23:42:33  25  ,ca10
23:42:33  26  ,ca12
23:42:33  27  ,ca14
23:42:33  28  ,ca16
23:42:33  29  ,ca18
23:42:33  30  --
23:42:33  31  ,cx4
23:42:33  32  ,cx6
23:42:33  33  ,cx8
23:42:33  34  ,cx10
23:42:33  35  ,cx12
23:42:33  36  ,cx14
23:42:33  37  ,cx16
23:42:33  38  ,cx18
23:42:33  39  --
23:42:33  40  ,crr4
23:42:33  41  ,crr6
23:42:33  42  ,crr8
23:42:33  43  ,crr10
23:42:33  44  ,crr12
23:42:33  45  ,crr14
23:42:33  46  ,crr16
23:42:33  47  ,crr18
23:42:33  48  --
23:42:33  49  ,hh
23:42:33  50  ,d
23:42:33  51  ,w
23:42:33  52  ,mpm
23:42:33  53  ,mph
23:42:33  54  FROM svm6122
23:42:33  55  ORDER BY ydate
23:42:33  56  /

Table created.

Elapsed: 00:00:00.37
23:42:33 SQL> 
23:42:33 SQL> -- rpt
23:42:33 SQL> 
23:42:33 SQL> SELECT
23:42:33   2  pair
23:42:33   3  ,trend
23:42:33   4  ,gatt
23:42:33   5  ,COUNT(pair)
23:42:33   6  ,AVG(g6)
23:42:33   7  FROM svm6142
23:42:33   8  GROUP BY pair,trend,gatt
23:42:33   9  ORDER BY pair,trend,gatt
23:42:33  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6575  -.0031683
eur_usd 	-1 up	      3570 .004447223
eur_usd 	-1		72
eur_usd 	 1 nup	      5889 -.00326642
eur_usd 	 1 up	      3705 .005071238

Elapsed: 00:00:00.05
23:42:33 SQL> 
23:42:33 SQL> 
23:42:33 SQL> -- Derive NTILE based params:
23:42:33 SQL> 
23:42:33 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.58
23:42:34 SQL> CREATE TABLE svm6162 COMPRESS AS
23:42:34   2  SELECT
23:42:34   3  pair
23:42:34   4  ,ydate
23:42:34   5  ,prdate
23:42:34   6  ,clse
23:42:34   7  ,g6
23:42:34   8  ,gatt
23:42:34   9  ,gattn
23:42:34  10  ,trend
23:42:34  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
23:42:34  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
23:42:34  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
23:42:34  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
23:42:34  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
23:42:34  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
23:42:34  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
23:42:34  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
23:42:34  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
23:42:34  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
23:42:34  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
23:42:34  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
23:42:34  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
23:42:34  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
23:42:34  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
23:42:34  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
23:42:34  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
23:42:34  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
23:42:34  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
23:42:34  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
23:42:34  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
23:42:34  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
23:42:34  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
23:42:34  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
23:42:34  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
23:42:34  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
23:42:34  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
23:42:34  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
23:42:34  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
23:42:34  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
23:42:34  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
23:42:34  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
23:42:34  43  ,hh  att32
23:42:34  44  ,d   att33
23:42:34  45  ,w   att34
23:42:34  46  ,mpm att35
23:42:34  47  ,mph att36
23:42:34  48  ,trend att37
23:42:34  49  FROM svm6142
23:42:34  50  ORDER BY ydate
23:42:34  51  /

Table created.

Elapsed: 00:00:04.79
23:42:39 SQL> 
23:42:39 SQL> -- rpt
23:42:39 SQL> 
23:42:39 SQL> SELECT
23:42:39   2  pair
23:42:39   3  ,trend
23:42:39   4  ,gatt
23:42:39   5  ,COUNT(pair)
23:42:39   6  ,AVG(g6)
23:42:39   7  FROM svm6162
23:42:39   8  GROUP BY pair,trend,gatt
23:42:39   9  ORDER BY pair,trend,gatt
23:42:39  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6575  -.0031683
eur_usd 	-1 up	      3570 .004447223
eur_usd 	-1		72
eur_usd 	 1 nup	      5889 -.00326642
eur_usd 	 1 up	      3705 .005071238

Elapsed: 00:00:00.03
23:42:39 SQL> 
23:42:39 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.19
23:42:39 SQL> CREATE TABLE modsrc COMPRESS AS
23:42:39   2  SELECT
23:42:39   3  pair
23:42:39   4  ,ydate
23:42:39   5  ,prdate
23:42:39   6  ,trend
23:42:39   7  ,g6
23:42:39   8  ,gatt
23:42:39   9  ,gattn
23:42:39  10  FROM svm6162
23:42:39  11  /

Table created.

Elapsed: 00:00:00.08
23:42:39 SQL> 
23:42:39 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.22
23:42:39 SQL> 
23:42:39 SQL> DROP   TABLE eur_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
23:42:39 SQL> CREATE TABLE eur_ms610 COMPRESS AS
23:42:39   2  SELECT
23:42:39   3  ydate
23:42:39   4  ,trend eur_trend
23:42:39   5  ,g6    eur_g6
23:42:39   6  ,gatt  eur_gatt
23:42:39   7  ,gattn eur_gattn
23:42:39   8  FROM modsrc
23:42:39   9  /

Table created.

Elapsed: 00:00:00.06
23:42:39 SQL> 
23:42:39 SQL> ANALYZE TABLE eur_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
23:42:40 SQL> 
23:42:40 SQL> -- I need a copy of the attributes:
23:42:40 SQL> 
23:42:40 SQL> 
23:42:40 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.05
23:42:40 SQL> CREATE TABLE eur_att COMPRESS AS
23:42:40   2  SELECT
23:42:40   3  ydate
23:42:40   4  ,att00 eur_att00
23:42:40   5  ,att01 eur_att01
23:42:40   6  ,att02 eur_att02
23:42:40   7  ,att03 eur_att03
23:42:40   8  ,att04 eur_att04
23:42:40   9  ,att05 eur_att05
23:42:40  10  ,att06 eur_att06
23:42:40  11  ,att07 eur_att07
23:42:40  12  ,att08 eur_att08
23:42:40  13  ,att09 eur_att09
23:42:40  14  ,att10 eur_att10
23:42:40  15  ,att11 eur_att11
23:42:40  16  ,att12 eur_att12
23:42:40  17  ,att13 eur_att13
23:42:40  18  ,att14 eur_att14
23:42:40  19  ,att15 eur_att15
23:42:40  20  ,att16 eur_att16
23:42:40  21  ,att17 eur_att17
23:42:40  22  ,att18 eur_att18
23:42:40  23  ,att19 eur_att19
23:42:40  24  ,att20 eur_att20
23:42:40  25  ,att21 eur_att21
23:42:40  26  ,att22 eur_att22
23:42:40  27  ,att23 eur_att23
23:42:40  28  ,att24 eur_att24
23:42:40  29  ,att25 eur_att25
23:42:40  30  ,att26 eur_att26
23:42:40  31  ,att27 eur_att27
23:42:40  32  ,att28 eur_att28
23:42:40  33  ,att29 eur_att29
23:42:40  34  ,att30 eur_att30
23:42:40  35  ,att31 eur_att31
23:42:40  36  ,att32 eur_att32
23:42:40  37  ,att33 eur_att33
23:42:40  38  ,att34 eur_att34
23:42:40  39  ,att35 eur_att35
23:42:40  40  ,att36 eur_att36
23:42:40  41  ,att37 eur_att37
23:42:40  42  FROM svm6162
23:42:40  43  /

Table created.

Elapsed: 00:00:00.17
23:42:40 SQL> 
23:42:40 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.48
23:42:40 SQL> 
23:42:40 SQL> -- rpt
23:42:40 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19811

Elapsed: 00:00:00.89
23:42:41 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     19811

Elapsed: 00:00:00.00
23:42:41 SQL> 
23:42:41 SQL> --
23:42:41 SQL> -- aud610.sql
23:42:41 SQL> --
23:42:41 SQL> 
23:42:41 SQL> -- Creates views and tables for backtesting a forex SVM strategy
23:42:41 SQL> 
23:42:41 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.48
23:42:42 SQL> 
23:42:42 SQL> -- I created di5min here:
23:42:42 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
23:42:42 SQL> 
23:42:42 SQL> CREATE OR REPLACE VIEW svm6102 AS
23:42:42   2  SELECT
23:42:42   3  pair
23:42:42   4  ,ydate
23:42:42   5  ,prdate
23:42:42   6  ,rownum rnum -- acts as t in my time-series
23:42:42   7  ,clse
23:42:42   8  -- Derive a bunch of attributes from clse, the latest price:
23:42:42   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
23:42:42  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
23:42:42  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
23:42:42  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
23:42:42  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
23:42:42  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
23:42:42  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
23:42:42  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
23:42:42  17  --
23:42:42  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
23:42:42  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
23:42:42  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
23:42:42  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
23:42:42  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
23:42:42  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
23:42:42  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
23:42:42  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
23:42:42  26  --
23:42:42  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
23:42:42  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
23:42:42  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
23:42:42  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
23:42:42  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
23:42:42  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
23:42:42  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
23:42:42  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
23:42:42  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
23:42:42  36  FROM di5min WHERE pair LIKE'%aud%'
23:42:42  37  AND ydate > sysdate - 95
23:42:42  38  ORDER BY ydate
23:42:42  39  /

View created.

Elapsed: 00:00:00.04
23:42:42 SQL> 
23:42:42 SQL> -- rpt
23:42:42 SQL> 
23:42:42 SQL> SELECT
23:42:42   2  pair
23:42:42   3  ,COUNT(pair)
23:42:42   4  ,MIN(clse),MAX(clse)
23:42:42   5  ,MIN(avg6),MAX(avg6)
23:42:42   6  ,MIN(ydate),MAX(ydate)
23:42:42   7  FROM svm6102
23:42:42   8  GROUP BY pair
23:42:42   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
aud_usd       19807	.95405	  1.02495 .957141438 1.02284247 2010-10-03 23:45:01 2011-01-06 23:35:00

Elapsed: 00:00:00.86
23:42:42 SQL> 
23:42:42 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
23:42:42 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.22
23:42:43 SQL> CREATE TABLE svm6122 COMPRESS AS
23:42:43   2  SELECT
23:42:43   3  pair
23:42:43   4  ,ydate
23:42:43   5  ,prdate
23:42:43   6  ,clse
23:42:43   7  -- g6 is important. I want to predict g6:
23:42:43   8  ,ld6 - clse g6
23:42:43   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
23:42:43  10  -- I want more attributes from the ones I derived above:
23:42:43  11  -- clse relation to moving-min
23:42:43  12  ,clse-min4  cm4
23:42:43  13  ,clse-min6  cm6
23:42:43  14  ,clse-min8  cm8
23:42:43  15  ,clse-min10 cm10
23:42:43  16  ,clse-min12 cm12
23:42:43  17  ,clse-min14 cm14
23:42:43  18  ,clse-min16 cm16
23:42:43  19  ,clse-min18 cm18
23:42:43  20  -- clse relation to moving-avg
23:42:43  21  ,clse-avg4  ca4
23:42:43  22  ,clse-avg6  ca6
23:42:43  23  ,clse-avg8  ca8
23:42:43  24  ,clse-avg10 ca10
23:42:43  25  ,clse-avg12 ca12
23:42:43  26  ,clse-avg14 ca14
23:42:43  27  ,clse-avg16 ca16
23:42:43  28  ,clse-avg18 ca18
23:42:43  29  -- clse relation to moving-max
23:42:43  30  ,clse-max4  cx4
23:42:43  31  ,clse-max6  cx6
23:42:43  32  ,clse-max8  cx8
23:42:43  33  ,clse-max10 cx10
23:42:43  34  ,clse-max12 cx12
23:42:43  35  ,clse-max14 cx14
23:42:43  36  ,clse-max16 cx16
23:42:43  37  ,clse-max18 cx18
23:42:43  38  -- Derive more attributes.
23:42:43  39  -- I want to use CORR() here to help SVM see the shape of the series.
23:42:43  40  -- But COVAR_POP is more stable:
23:42:43  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
23:42:43  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
23:42:43  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
23:42:43  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
23:42:43  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
23:42:43  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
23:42:43  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
23:42:43  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
23:42:43  49  -- Derive date related attributes:
23:42:43  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
23:42:43  51  ,0+TO_CHAR(ydate,'D')d
23:42:43  52  ,0+TO_CHAR(ydate,'W')w
23:42:43  53  -- mpm stands for minutes-past-midnight:
23:42:43  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
23:42:43  55  -- mph stands for minutes-past-hour:
23:42:43  56  ,0+TO_CHAR(ydate,'MI')mph
23:42:43  57  FROM svm6102
23:42:43  58  ORDER BY ydate
23:42:43  59  /

Table created.

Elapsed: 00:00:02.14
23:42:45 SQL> 
23:42:45 SQL> -- rpt
23:42:45 SQL> 
23:42:45 SQL> SELECT
23:42:45   2  pair
23:42:45   3  ,COUNT(pair)
23:42:45   4  ,MIN(clse),MAX(clse)
23:42:45   5  ,MIN(ydate),MAX(ydate)
23:42:45   6  FROM svm6122
23:42:45   7  GROUP BY pair
23:42:45   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
aud_usd       19807	.95405	  1.02495 2010-10-03 23:45:01 2011-01-06 23:35:00

Elapsed: 00:00:00.04
23:42:45 SQL> 
23:42:45 SQL> -- Prepare for derivation of NTILE based params:
23:42:45 SQL> 
23:42:45 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.22
23:42:45 SQL> CREATE TABLE svm6142 COMPRESS AS
23:42:45   2  SELECT
23:42:45   3  pair
23:42:45   4  ,ydate
23:42:45   5  ,prdate
23:42:45   6  ,clse
23:42:45   7  ,g6
23:42:45   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
23:42:45   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
23:42:45  10  ,CASE WHEN trend IS NULL THEN 1
23:42:45  11  	    WHEN trend =0      THEN 1
23:42:45  12  	    ELSE trend END trend
23:42:45  13  ,cm4
23:42:45  14  ,cm6
23:42:45  15  ,cm8
23:42:45  16  ,cm10
23:42:45  17  ,cm12
23:42:45  18  ,cm14
23:42:45  19  ,cm16
23:42:45  20  ,cm18
23:42:45  21  --
23:42:45  22  ,ca4
23:42:45  23  ,ca6
23:42:45  24  ,ca8
23:42:45  25  ,ca10
23:42:45  26  ,ca12
23:42:45  27  ,ca14
23:42:45  28  ,ca16
23:42:45  29  ,ca18
23:42:45  30  --
23:42:45  31  ,cx4
23:42:45  32  ,cx6
23:42:45  33  ,cx8
23:42:45  34  ,cx10
23:42:45  35  ,cx12
23:42:45  36  ,cx14
23:42:45  37  ,cx16
23:42:45  38  ,cx18
23:42:45  39  --
23:42:45  40  ,crr4
23:42:45  41  ,crr6
23:42:45  42  ,crr8
23:42:45  43  ,crr10
23:42:45  44  ,crr12
23:42:45  45  ,crr14
23:42:45  46  ,crr16
23:42:45  47  ,crr18
23:42:45  48  --
23:42:45  49  ,hh
23:42:45  50  ,d
23:42:45  51  ,w
23:42:45  52  ,mpm
23:42:45  53  ,mph
23:42:45  54  FROM svm6122
23:42:45  55  ORDER BY ydate
23:42:45  56  /

Table created.

Elapsed: 00:00:00.37
23:42:45 SQL> 
23:42:45 SQL> -- rpt
23:42:45 SQL> 
23:42:45 SQL> SELECT
23:42:45   2  pair
23:42:45   3  ,trend
23:42:45   4  ,gatt
23:42:45   5  ,COUNT(pair)
23:42:45   6  ,AVG(g6)
23:42:45   7  FROM svm6142
23:42:45   8  GROUP BY pair,trend,gatt
23:42:45   9  ORDER BY pair,trend,gatt
23:42:45  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5708 -.00213847
aud_usd 	-1 up	      3701 .003745866
aud_usd 	-1		71
aud_usd 	 1 nup	      6733 -.00213998
aud_usd 	 1 up	      3593 .004054752
aud_usd 	 1		 1

6 rows selected.

Elapsed: 00:00:00.03
23:42:46 SQL> 
23:42:46 SQL> 
23:42:46 SQL> -- Derive NTILE based params:
23:42:46 SQL> 
23:42:46 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.16
23:42:46 SQL> CREATE TABLE svm6162 COMPRESS AS
23:42:46   2  SELECT
23:42:46   3  pair
23:42:46   4  ,ydate
23:42:46   5  ,prdate
23:42:46   6  ,clse
23:42:46   7  ,g6
23:42:46   8  ,gatt
23:42:46   9  ,gattn
23:42:46  10  ,trend
23:42:46  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
23:42:46  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
23:42:46  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
23:42:46  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
23:42:46  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
23:42:46  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
23:42:46  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
23:42:46  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
23:42:46  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
23:42:46  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
23:42:46  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
23:42:46  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
23:42:46  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
23:42:46  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
23:42:46  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
23:42:46  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
23:42:46  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
23:42:46  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
23:42:46  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
23:42:46  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
23:42:46  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
23:42:46  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
23:42:46  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
23:42:46  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
23:42:46  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
23:42:46  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
23:42:46  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
23:42:46  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
23:42:46  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
23:42:46  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
23:42:46  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
23:42:46  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
23:42:46  43  ,hh  att32
23:42:46  44  ,d   att33
23:42:46  45  ,w   att34
23:42:46  46  ,mpm att35
23:42:46  47  ,mph att36
23:42:46  48  ,trend att37
23:42:46  49  FROM svm6142
23:42:46  50  ORDER BY ydate
23:42:46  51  /

Table created.

Elapsed: 00:00:04.83
23:42:51 SQL> 
23:42:51 SQL> -- rpt
23:42:51 SQL> 
23:42:51 SQL> SELECT
23:42:51   2  pair
23:42:51   3  ,trend
23:42:51   4  ,gatt
23:42:51   5  ,COUNT(pair)
23:42:51   6  ,AVG(g6)
23:42:51   7  FROM svm6162
23:42:51   8  GROUP BY pair,trend,gatt
23:42:51   9  ORDER BY pair,trend,gatt
23:42:51  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5708 -.00213847
aud_usd 	-1 up	      3701 .003745866
aud_usd 	-1		71
aud_usd 	 1 nup	      6733 -.00213998
aud_usd 	 1 up	      3593 .004054752
aud_usd 	 1		 1

6 rows selected.

Elapsed: 00:00:00.03
23:42:51 SQL> 
23:42:51 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.18
23:42:51 SQL> CREATE TABLE modsrc COMPRESS AS
23:42:51   2  SELECT
23:42:51   3  pair
23:42:51   4  ,ydate
23:42:51   5  ,prdate
23:42:51   6  ,trend
23:42:51   7  ,g6
23:42:51   8  ,gatt
23:42:51   9  ,gattn
23:42:51  10  FROM svm6162
23:42:51  11  /

Table created.

Elapsed: 00:00:00.08
23:42:51 SQL> 
23:42:51 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
23:42:51 SQL> 
23:42:51 SQL> DROP   TABLE aud_ms610 ;

Table dropped.

Elapsed: 00:00:00.03
23:42:51 SQL> CREATE TABLE aud_ms610 COMPRESS AS
23:42:51   2  SELECT
23:42:51   3  ydate
23:42:51   4  ,trend aud_trend
23:42:51   5  ,g6    aud_g6
23:42:51   6  ,gatt  aud_gatt
23:42:51   7  ,gattn aud_gattn
23:42:51   8  FROM modsrc
23:42:51   9  /

Table created.

Elapsed: 00:00:00.06
23:42:51 SQL> 
23:42:51 SQL> ANALYZE TABLE aud_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
23:42:51 SQL> 
23:42:51 SQL> -- I need a copy of the attributes:
23:42:51 SQL> 
23:42:51 SQL> 
23:42:51 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.04
23:42:51 SQL> CREATE TABLE aud_att COMPRESS AS
23:42:51   2  SELECT
23:42:51   3  ydate
23:42:51   4  ,att00 aud_att00
23:42:51   5  ,att01 aud_att01
23:42:51   6  ,att02 aud_att02
23:42:51   7  ,att03 aud_att03
23:42:51   8  ,att04 aud_att04
23:42:51   9  ,att05 aud_att05
23:42:51  10  ,att06 aud_att06
23:42:51  11  ,att07 aud_att07
23:42:51  12  ,att08 aud_att08
23:42:51  13  ,att09 aud_att09
23:42:51  14  ,att10 aud_att10
23:42:51  15  ,att11 aud_att11
23:42:51  16  ,att12 aud_att12
23:42:51  17  ,att13 aud_att13
23:42:51  18  ,att14 aud_att14
23:42:51  19  ,att15 aud_att15
23:42:51  20  ,att16 aud_att16
23:42:51  21  ,att17 aud_att17
23:42:51  22  ,att18 aud_att18
23:42:51  23  ,att19 aud_att19
23:42:51  24  ,att20 aud_att20
23:42:51  25  ,att21 aud_att21
23:42:51  26  ,att22 aud_att22
23:42:51  27  ,att23 aud_att23
23:42:51  28  ,att24 aud_att24
23:42:51  29  ,att25 aud_att25
23:42:51  30  ,att26 aud_att26
23:42:51  31  ,att27 aud_att27
23:42:51  32  ,att28 aud_att28
23:42:51  33  ,att29 aud_att29
23:42:51  34  ,att30 aud_att30
23:42:51  35  ,att31 aud_att31
23:42:51  36  ,att32 aud_att32
23:42:51  37  ,att33 aud_att33
23:42:51  38  ,att34 aud_att34
23:42:51  39  ,att35 aud_att35
23:42:51  40  ,att36 aud_att36
23:42:51  41  ,att37 aud_att37
23:42:51  42  FROM svm6162
23:42:51  43  /

Table created.

Elapsed: 00:00:00.16
23:42:51 SQL> 
23:42:51 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
23:42:52 SQL> 
23:42:52 SQL> -- rpt
23:42:52 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19807

Elapsed: 00:00:00.90
23:42:53 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     19807

Elapsed: 00:00:00.00
23:42:53 SQL> 
23:42:53 SQL> --
23:42:53 SQL> -- gbp610.sql
23:42:53 SQL> --
23:42:53 SQL> 
23:42:53 SQL> -- Creates views and tables for backtesting a forex SVM strategy
23:42:53 SQL> 
23:42:53 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.38
23:42:53 SQL> 
23:42:53 SQL> -- I created di5min here:
23:42:53 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
23:42:53 SQL> 
23:42:53 SQL> CREATE OR REPLACE VIEW svm6102 AS
23:42:53   2  SELECT
23:42:53   3  pair
23:42:53   4  ,ydate
23:42:53   5  ,prdate
23:42:53   6  ,rownum rnum -- acts as t in my time-series
23:42:53   7  ,clse
23:42:53   8  -- Derive a bunch of attributes from clse, the latest price:
23:42:53   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
23:42:53  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
23:42:53  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
23:42:53  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
23:42:53  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
23:42:53  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
23:42:53  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
23:42:53  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
23:42:53  17  --
23:42:53  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
23:42:53  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
23:42:53  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
23:42:53  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
23:42:53  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
23:42:53  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
23:42:53  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
23:42:53  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
23:42:53  26  --
23:42:53  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
23:42:53  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
23:42:53  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
23:42:53  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
23:42:53  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
23:42:53  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
23:42:53  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
23:42:53  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
23:42:53  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
23:42:53  36  FROM di5min WHERE pair LIKE'%gbp%'
23:42:53  37  AND ydate > sysdate - 95
23:42:53  38  ORDER BY ydate
23:42:53  39  /

View created.

Elapsed: 00:00:00.04
23:42:53 SQL> 
23:42:53 SQL> -- rpt
23:42:53 SQL> 
23:42:53 SQL> SELECT
23:42:53   2  pair
23:42:53   3  ,COUNT(pair)
23:42:53   4  ,MIN(clse),MAX(clse)
23:42:53   5  ,MIN(avg6),MAX(avg6)
23:42:53   6  ,MIN(ydate),MAX(ydate)
23:42:53   7  FROM svm6102
23:42:53   8  GROUP BY pair
23:42:53   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
gbp_usd       19810   1.535325	   1.6295 1.53696747 1.62716986 2010-10-03 23:45:01 2011-01-06 23:40:00

Elapsed: 00:00:00.87
23:42:54 SQL> 
23:42:54 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
23:42:54 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.20
23:42:54 SQL> CREATE TABLE svm6122 COMPRESS AS
23:42:54   2  SELECT
23:42:54   3  pair
23:42:54   4  ,ydate
23:42:54   5  ,prdate
23:42:54   6  ,clse
23:42:54   7  -- g6 is important. I want to predict g6:
23:42:54   8  ,ld6 - clse g6
23:42:54   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
23:42:54  10  -- I want more attributes from the ones I derived above:
23:42:54  11  -- clse relation to moving-min
23:42:54  12  ,clse-min4  cm4
23:42:54  13  ,clse-min6  cm6
23:42:54  14  ,clse-min8  cm8
23:42:54  15  ,clse-min10 cm10
23:42:54  16  ,clse-min12 cm12
23:42:54  17  ,clse-min14 cm14
23:42:54  18  ,clse-min16 cm16
23:42:54  19  ,clse-min18 cm18
23:42:54  20  -- clse relation to moving-avg
23:42:54  21  ,clse-avg4  ca4
23:42:54  22  ,clse-avg6  ca6
23:42:54  23  ,clse-avg8  ca8
23:42:54  24  ,clse-avg10 ca10
23:42:54  25  ,clse-avg12 ca12
23:42:54  26  ,clse-avg14 ca14
23:42:54  27  ,clse-avg16 ca16
23:42:54  28  ,clse-avg18 ca18
23:42:54  29  -- clse relation to moving-max
23:42:54  30  ,clse-max4  cx4
23:42:54  31  ,clse-max6  cx6
23:42:54  32  ,clse-max8  cx8
23:42:54  33  ,clse-max10 cx10
23:42:54  34  ,clse-max12 cx12
23:42:54  35  ,clse-max14 cx14
23:42:54  36  ,clse-max16 cx16
23:42:54  37  ,clse-max18 cx18
23:42:54  38  -- Derive more attributes.
23:42:54  39  -- I want to use CORR() here to help SVM see the shape of the series.
23:42:54  40  -- But COVAR_POP is more stable:
23:42:54  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
23:42:54  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
23:42:54  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
23:42:54  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
23:42:54  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
23:42:54  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
23:42:54  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
23:42:54  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
23:42:54  49  -- Derive date related attributes:
23:42:54  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
23:42:54  51  ,0+TO_CHAR(ydate,'D')d
23:42:54  52  ,0+TO_CHAR(ydate,'W')w
23:42:54  53  -- mpm stands for minutes-past-midnight:
23:42:54  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
23:42:54  55  -- mph stands for minutes-past-hour:
23:42:54  56  ,0+TO_CHAR(ydate,'MI')mph
23:42:54  57  FROM svm6102
23:42:54  58  ORDER BY ydate
23:42:54  59  /

Table created.

Elapsed: 00:00:02.09
23:42:56 SQL> 
23:42:56 SQL> -- rpt
23:42:56 SQL> 
23:42:56 SQL> SELECT
23:42:56   2  pair
23:42:56   3  ,COUNT(pair)
23:42:56   4  ,MIN(clse),MAX(clse)
23:42:56   5  ,MIN(ydate),MAX(ydate)
23:42:56   6  FROM svm6122
23:42:56   7  GROUP BY pair
23:42:56   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
gbp_usd       19810   1.535325	   1.6295 2010-10-03 23:45:01 2011-01-06 23:40:00

Elapsed: 00:00:00.05
23:42:56 SQL> 
23:42:56 SQL> -- Prepare for derivation of NTILE based params:
23:42:56 SQL> 
23:42:56 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.22
23:42:57 SQL> CREATE TABLE svm6142 COMPRESS AS
23:42:57   2  SELECT
23:42:57   3  pair
23:42:57   4  ,ydate
23:42:57   5  ,prdate
23:42:57   6  ,clse
23:42:57   7  ,g6
23:42:57   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
23:42:57   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
23:42:57  10  ,CASE WHEN trend IS NULL THEN 1
23:42:57  11  	    WHEN trend =0      THEN 1
23:42:57  12  	    ELSE trend END trend
23:42:57  13  ,cm4
23:42:57  14  ,cm6
23:42:57  15  ,cm8
23:42:57  16  ,cm10
23:42:57  17  ,cm12
23:42:57  18  ,cm14
23:42:57  19  ,cm16
23:42:57  20  ,cm18
23:42:57  21  --
23:42:57  22  ,ca4
23:42:57  23  ,ca6
23:42:57  24  ,ca8
23:42:57  25  ,ca10
23:42:57  26  ,ca12
23:42:57  27  ,ca14
23:42:57  28  ,ca16
23:42:57  29  ,ca18
23:42:57  30  --
23:42:57  31  ,cx4
23:42:57  32  ,cx6
23:42:57  33  ,cx8
23:42:57  34  ,cx10
23:42:57  35  ,cx12
23:42:57  36  ,cx14
23:42:57  37  ,cx16
23:42:57  38  ,cx18
23:42:57  39  --
23:42:57  40  ,crr4
23:42:57  41  ,crr6
23:42:57  42  ,crr8
23:42:57  43  ,crr10
23:42:57  44  ,crr12
23:42:57  45  ,crr14
23:42:57  46  ,crr16
23:42:57  47  ,crr18
23:42:57  48  --
23:42:57  49  ,hh
23:42:57  50  ,d
23:42:57  51  ,w
23:42:57  52  ,mpm
23:42:57  53  ,mph
23:42:57  54  FROM svm6122
23:42:57  55  ORDER BY ydate
23:42:57  56  /

Table created.

Elapsed: 00:00:00.37
23:42:57 SQL> 
23:42:57 SQL> -- rpt
23:42:57 SQL> 
23:42:57 SQL> SELECT
23:42:57   2  pair
23:42:57   3  ,trend
23:42:57   4  ,gatt
23:42:57   5  ,COUNT(pair)
23:42:57   6  ,AVG(g6)
23:42:57   7  FROM svm6142
23:42:57   8  GROUP BY pair,trend,gatt
23:42:57   9  ORDER BY pair,trend,gatt
23:42:57  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6414 -.00263164
gbp_usd 	-1 up	      3573 .004342559
gbp_usd 	-1		64
gbp_usd 	 1 nup	      6289 -.00265282
gbp_usd 	 1 up	      3462 .004520288
gbp_usd 	 1		 8

6 rows selected.

Elapsed: 00:00:00.04
23:42:57 SQL> 
23:42:57 SQL> 
23:42:57 SQL> -- Derive NTILE based params:
23:42:57 SQL> 
23:42:57 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.17
23:42:57 SQL> CREATE TABLE svm6162 COMPRESS AS
23:42:57   2  SELECT
23:42:57   3  pair
23:42:57   4  ,ydate
23:42:57   5  ,prdate
23:42:57   6  ,clse
23:42:57   7  ,g6
23:42:57   8  ,gatt
23:42:57   9  ,gattn
23:42:57  10  ,trend
23:42:57  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
23:42:57  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
23:42:57  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
23:42:57  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
23:42:57  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
23:42:57  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
23:42:57  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
23:42:57  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
23:42:57  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
23:42:57  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
23:42:57  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
23:42:57  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
23:42:57  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
23:42:57  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
23:42:57  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
23:42:57  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
23:42:57  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
23:42:57  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
23:42:57  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
23:42:57  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
23:42:57  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
23:42:57  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
23:42:57  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
23:42:57  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
23:42:57  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
23:42:57  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
23:42:57  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
23:42:57  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
23:42:57  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
23:42:57  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
23:42:57  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
23:42:57  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
23:42:57  43  ,hh  att32
23:42:57  44  ,d   att33
23:42:57  45  ,w   att34
23:42:57  46  ,mpm att35
23:42:57  47  ,mph att36
23:42:57  48  ,trend att37
23:42:57  49  FROM svm6142
23:42:57  50  ORDER BY ydate
23:42:57  51  /

Table created.

Elapsed: 00:00:04.86
23:43:02 SQL> 
23:43:02 SQL> -- rpt
23:43:02 SQL> 
23:43:02 SQL> SELECT
23:43:02   2  pair
23:43:02   3  ,trend
23:43:02   4  ,gatt
23:43:02   5  ,COUNT(pair)
23:43:02   6  ,AVG(g6)
23:43:02   7  FROM svm6162
23:43:02   8  GROUP BY pair,trend,gatt
23:43:02   9  ORDER BY pair,trend,gatt
23:43:02  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6414 -.00263164
gbp_usd 	-1 up	      3573 .004342559
gbp_usd 	-1		64
gbp_usd 	 1 nup	      6289 -.00265282
gbp_usd 	 1 up	      3462 .004520288
gbp_usd 	 1		 8

6 rows selected.

Elapsed: 00:00:00.03
23:43:02 SQL> 
23:43:02 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.18
23:43:02 SQL> CREATE TABLE modsrc COMPRESS AS
23:43:02   2  SELECT
23:43:02   3  pair
23:43:02   4  ,ydate
23:43:02   5  ,prdate
23:43:02   6  ,trend
23:43:02   7  ,g6
23:43:02   8  ,gatt
23:43:02   9  ,gattn
23:43:02  10  FROM svm6162
23:43:02  11  /

Table created.

Elapsed: 00:00:00.09
23:43:02 SQL> 
23:43:02 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.25
23:43:03 SQL> 
23:43:03 SQL> DROP   TABLE gbp_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
23:43:03 SQL> CREATE TABLE gbp_ms610 COMPRESS AS
23:43:03   2  SELECT
23:43:03   3  ydate
23:43:03   4  ,trend gbp_trend
23:43:03   5  ,g6    gbp_g6
23:43:03   6  ,gatt  gbp_gatt
23:43:03   7  ,gattn gbp_gattn
23:43:03   8  FROM modsrc
23:43:03   9  /

Table created.

Elapsed: 00:00:00.06
23:43:03 SQL> 
23:43:03 SQL> ANALYZE TABLE gbp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
23:43:03 SQL> 
23:43:03 SQL> -- I need a copy of the attributes:
23:43:03 SQL> 
23:43:03 SQL> 
23:43:03 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.05
23:43:03 SQL> CREATE TABLE gbp_att COMPRESS AS
23:43:03   2  SELECT
23:43:03   3  ydate
23:43:03   4  ,att00 gbp_att00
23:43:03   5  ,att01 gbp_att01
23:43:03   6  ,att02 gbp_att02
23:43:03   7  ,att03 gbp_att03
23:43:03   8  ,att04 gbp_att04
23:43:03   9  ,att05 gbp_att05
23:43:03  10  ,att06 gbp_att06
23:43:03  11  ,att07 gbp_att07
23:43:03  12  ,att08 gbp_att08
23:43:03  13  ,att09 gbp_att09
23:43:03  14  ,att10 gbp_att10
23:43:03  15  ,att11 gbp_att11
23:43:03  16  ,att12 gbp_att12
23:43:03  17  ,att13 gbp_att13
23:43:03  18  ,att14 gbp_att14
23:43:03  19  ,att15 gbp_att15
23:43:03  20  ,att16 gbp_att16
23:43:03  21  ,att17 gbp_att17
23:43:03  22  ,att18 gbp_att18
23:43:03  23  ,att19 gbp_att19
23:43:03  24  ,att20 gbp_att20
23:43:03  25  ,att21 gbp_att21
23:43:03  26  ,att22 gbp_att22
23:43:03  27  ,att23 gbp_att23
23:43:03  28  ,att24 gbp_att24
23:43:03  29  ,att25 gbp_att25
23:43:03  30  ,att26 gbp_att26
23:43:03  31  ,att27 gbp_att27
23:43:03  32  ,att28 gbp_att28
23:43:03  33  ,att29 gbp_att29
23:43:03  34  ,att30 gbp_att30
23:43:03  35  ,att31 gbp_att31
23:43:03  36  ,att32 gbp_att32
23:43:03  37  ,att33 gbp_att33
23:43:03  38  ,att34 gbp_att34
23:43:03  39  ,att35 gbp_att35
23:43:03  40  ,att36 gbp_att36
23:43:03  41  ,att37 gbp_att37
23:43:03  42  FROM svm6162
23:43:03  43  /

Table created.

Elapsed: 00:00:00.19
23:43:03 SQL> 
23:43:03 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.44
23:43:04 SQL> 
23:43:04 SQL> -- rpt
23:43:04 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19810

Elapsed: 00:00:00.88
23:43:05 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     19810

Elapsed: 00:00:00.00
23:43:05 SQL> 
23:43:05 SQL> --
23:43:05 SQL> -- jpy610.sql
23:43:05 SQL> --
23:43:05 SQL> 
23:43:05 SQL> -- Creates views and tables for backtesting a forex SVM strategy
23:43:05 SQL> 
23:43:05 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.36
23:43:05 SQL> 
23:43:05 SQL> -- I created di5min here:
23:43:05 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
23:43:05 SQL> 
23:43:05 SQL> CREATE OR REPLACE VIEW svm6102 AS
23:43:05   2  SELECT
23:43:05   3  pair
23:43:05   4  ,ydate
23:43:05   5  ,prdate
23:43:05   6  ,rownum rnum -- acts as t in my time-series
23:43:05   7  ,clse
23:43:05   8  -- Derive a bunch of attributes from clse, the latest price:
23:43:05   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
23:43:05  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
23:43:05  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
23:43:05  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
23:43:05  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
23:43:05  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
23:43:05  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
23:43:05  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
23:43:05  17  --
23:43:05  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
23:43:05  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
23:43:05  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
23:43:05  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
23:43:05  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
23:43:05  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
23:43:05  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
23:43:05  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
23:43:05  26  --
23:43:05  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
23:43:05  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
23:43:05  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
23:43:05  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
23:43:05  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
23:43:05  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
23:43:05  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
23:43:05  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
23:43:05  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
23:43:05  36  FROM di5min WHERE pair LIKE'%jpy%'
23:43:05  37  AND ydate > sysdate - 95
23:43:05  38  ORDER BY ydate
23:43:05  39  /

View created.

Elapsed: 00:00:00.04
23:43:05 SQL> 
23:43:05 SQL> -- rpt
23:43:05 SQL> 
23:43:05 SQL> SELECT
23:43:05   2  pair
23:43:05   3  ,COUNT(pair)
23:43:05   4  ,MIN(clse),MAX(clse)
23:43:05   5  ,MIN(avg6),MAX(avg6)
23:43:05   6  ,MIN(ydate),MAX(ydate)
23:43:05   7  FROM svm6102
23:43:05   8  GROUP BY pair
23:43:05   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_jpy       19809	 80.25	   84.485 80.3595205 84.3105479 2010-10-03 23:45:01 2011-01-06 23:40:00

Elapsed: 00:00:00.90
23:43:06 SQL> 
23:43:06 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
23:43:06 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.22
23:43:06 SQL> CREATE TABLE svm6122 COMPRESS AS
23:43:06   2  SELECT
23:43:06   3  pair
23:43:06   4  ,ydate
23:43:06   5  ,prdate
23:43:06   6  ,clse
23:43:06   7  -- g6 is important. I want to predict g6:
23:43:06   8  ,ld6 - clse g6
23:43:06   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
23:43:06  10  -- I want more attributes from the ones I derived above:
23:43:06  11  -- clse relation to moving-min
23:43:06  12  ,clse-min4  cm4
23:43:06  13  ,clse-min6  cm6
23:43:06  14  ,clse-min8  cm8
23:43:06  15  ,clse-min10 cm10
23:43:06  16  ,clse-min12 cm12
23:43:06  17  ,clse-min14 cm14
23:43:06  18  ,clse-min16 cm16
23:43:06  19  ,clse-min18 cm18
23:43:06  20  -- clse relation to moving-avg
23:43:06  21  ,clse-avg4  ca4
23:43:06  22  ,clse-avg6  ca6
23:43:06  23  ,clse-avg8  ca8
23:43:06  24  ,clse-avg10 ca10
23:43:06  25  ,clse-avg12 ca12
23:43:06  26  ,clse-avg14 ca14
23:43:06  27  ,clse-avg16 ca16
23:43:06  28  ,clse-avg18 ca18
23:43:06  29  -- clse relation to moving-max
23:43:06  30  ,clse-max4  cx4
23:43:06  31  ,clse-max6  cx6
23:43:06  32  ,clse-max8  cx8
23:43:06  33  ,clse-max10 cx10
23:43:06  34  ,clse-max12 cx12
23:43:06  35  ,clse-max14 cx14
23:43:06  36  ,clse-max16 cx16
23:43:06  37  ,clse-max18 cx18
23:43:06  38  -- Derive more attributes.
23:43:06  39  -- I want to use CORR() here to help SVM see the shape of the series.
23:43:06  40  -- But COVAR_POP is more stable:
23:43:06  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
23:43:06  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
23:43:06  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
23:43:06  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
23:43:06  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
23:43:06  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
23:43:06  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
23:43:06  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
23:43:06  49  -- Derive date related attributes:
23:43:06  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
23:43:06  51  ,0+TO_CHAR(ydate,'D')d
23:43:06  52  ,0+TO_CHAR(ydate,'W')w
23:43:06  53  -- mpm stands for minutes-past-midnight:
23:43:06  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
23:43:06  55  -- mph stands for minutes-past-hour:
23:43:06  56  ,0+TO_CHAR(ydate,'MI')mph
23:43:06  57  FROM svm6102
23:43:06  58  ORDER BY ydate
23:43:06  59  /

Table created.

Elapsed: 00:00:02.16
23:43:08 SQL> 
23:43:08 SQL> -- rpt
23:43:08 SQL> 
23:43:08 SQL> SELECT
23:43:08   2  pair
23:43:08   3  ,COUNT(pair)
23:43:08   4  ,MIN(clse),MAX(clse)
23:43:08   5  ,MIN(ydate),MAX(ydate)
23:43:08   6  FROM svm6122
23:43:08   7  GROUP BY pair
23:43:08   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_jpy       19809	 80.25	   84.485 2010-10-03 23:45:01 2011-01-06 23:40:00

Elapsed: 00:00:00.05
23:43:08 SQL> 
23:43:08 SQL> -- Prepare for derivation of NTILE based params:
23:43:08 SQL> 
23:43:08 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.23
23:43:08 SQL> CREATE TABLE svm6142 COMPRESS AS
23:43:08   2  SELECT
23:43:08   3  pair
23:43:08   4  ,ydate
23:43:08   5  ,prdate
23:43:08   6  ,clse
23:43:08   7  ,g6
23:43:08   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
23:43:08   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
23:43:08  10  ,CASE WHEN trend IS NULL THEN 1
23:43:08  11  	    WHEN trend =0      THEN 1
23:43:08  12  	    ELSE trend END trend
23:43:08  13  ,cm4
23:43:08  14  ,cm6
23:43:08  15  ,cm8
23:43:08  16  ,cm10
23:43:08  17  ,cm12
23:43:08  18  ,cm14
23:43:08  19  ,cm16
23:43:08  20  ,cm18
23:43:08  21  --
23:43:08  22  ,ca4
23:43:08  23  ,ca6
23:43:08  24  ,ca8
23:43:08  25  ,ca10
23:43:08  26  ,ca12
23:43:08  27  ,ca14
23:43:08  28  ,ca16
23:43:08  29  ,ca18
23:43:08  30  --
23:43:08  31  ,cx4
23:43:08  32  ,cx6
23:43:08  33  ,cx8
23:43:08  34  ,cx10
23:43:08  35  ,cx12
23:43:08  36  ,cx14
23:43:08  37  ,cx16
23:43:08  38  ,cx18
23:43:08  39  --
23:43:08  40  ,crr4
23:43:08  41  ,crr6
23:43:08  42  ,crr8
23:43:08  43  ,crr10
23:43:08  44  ,crr12
23:43:08  45  ,crr14
23:43:08  46  ,crr16
23:43:08  47  ,crr18
23:43:08  48  --
23:43:08  49  ,hh
23:43:08  50  ,d
23:43:08  51  ,w
23:43:08  52  ,mpm
23:43:08  53  ,mph
23:43:08  54  FROM svm6122
23:43:08  55  ORDER BY ydate
23:43:08  56  /

Table created.

Elapsed: 00:00:00.37
23:43:09 SQL> 
23:43:09 SQL> -- rpt
23:43:09 SQL> 
23:43:09 SQL> SELECT
23:43:09   2  pair
23:43:09   3  ,trend
23:43:09   4  ,gatt
23:43:09   5  ,COUNT(pair)
23:43:09   6  ,AVG(g6)
23:43:09   7  FROM svm6142
23:43:09   8  GROUP BY pair,trend,gatt
23:43:09   9  ORDER BY pair,trend,gatt
23:43:09  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5202 -.16562862
usd_jpy 	-1 up	      4908 .169387004
usd_jpy 	-1		 2
usd_jpy 	 1 nup	      5059 -.15485615
usd_jpy 	 1 up	      4568 .173647588
usd_jpy 	 1		70

6 rows selected.

Elapsed: 00:00:00.04
23:43:09 SQL> 
23:43:09 SQL> 
23:43:09 SQL> -- Derive NTILE based params:
23:43:09 SQL> 
23:43:09 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.16
23:43:09 SQL> CREATE TABLE svm6162 COMPRESS AS
23:43:09   2  SELECT
23:43:09   3  pair
23:43:09   4  ,ydate
23:43:09   5  ,prdate
23:43:09   6  ,clse
23:43:09   7  ,g6
23:43:09   8  ,gatt
23:43:09   9  ,gattn
23:43:09  10  ,trend
23:43:09  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
23:43:09  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
23:43:09  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
23:43:09  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
23:43:09  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
23:43:09  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
23:43:09  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
23:43:09  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
23:43:09  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
23:43:09  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
23:43:09  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
23:43:09  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
23:43:09  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
23:43:09  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
23:43:09  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
23:43:09  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
23:43:09  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
23:43:09  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
23:43:09  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
23:43:09  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
23:43:09  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
23:43:09  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
23:43:09  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
23:43:09  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
23:43:09  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
23:43:09  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
23:43:09  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
23:43:09  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
23:43:09  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
23:43:09  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
23:43:09  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
23:43:09  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
23:43:09  43  ,hh  att32
23:43:09  44  ,d   att33
23:43:09  45  ,w   att34
23:43:09  46  ,mpm att35
23:43:09  47  ,mph att36
23:43:09  48  ,trend att37
23:43:09  49  FROM svm6142
23:43:09  50  ORDER BY ydate
23:43:09  51  /

Table created.

Elapsed: 00:00:04.81
23:43:14 SQL> 
23:43:14 SQL> -- rpt
23:43:14 SQL> 
23:43:14 SQL> SELECT
23:43:14   2  pair
23:43:14   3  ,trend
23:43:14   4  ,gatt
23:43:14   5  ,COUNT(pair)
23:43:14   6  ,AVG(g6)
23:43:14   7  FROM svm6162
23:43:14   8  GROUP BY pair,trend,gatt
23:43:14   9  ORDER BY pair,trend,gatt
23:43:14  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5202 -.16562862
usd_jpy 	-1 up	      4908 .169387004
usd_jpy 	-1		 2
usd_jpy 	 1 nup	      5059 -.15485615
usd_jpy 	 1 up	      4568 .173647588
usd_jpy 	 1		70

6 rows selected.

Elapsed: 00:00:00.03
23:43:14 SQL> 
23:43:14 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
23:43:14 SQL> CREATE TABLE modsrc COMPRESS AS
23:43:14   2  SELECT
23:43:14   3  pair
23:43:14   4  ,ydate
23:43:14   5  ,prdate
23:43:14   6  ,trend
23:43:14   7  ,g6
23:43:14   8  ,gatt
23:43:14   9  ,gattn
23:43:14  10  FROM svm6162
23:43:14  11  /

Table created.

Elapsed: 00:00:00.08
23:43:14 SQL> 
23:43:14 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
23:43:14 SQL> 
23:43:14 SQL> DROP   TABLE jpy_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
23:43:14 SQL> CREATE TABLE jpy_ms610 COMPRESS AS
23:43:14   2  SELECT
23:43:14   3  ydate
23:43:14   4  ,trend jpy_trend
23:43:14   5  ,g6    jpy_g6
23:43:14   6  ,gatt  jpy_gatt
23:43:14   7  ,gattn jpy_gattn
23:43:14   8  FROM modsrc
23:43:14   9  /

Table created.

Elapsed: 00:00:00.06
23:43:14 SQL> 
23:43:14 SQL> ANALYZE TABLE jpy_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
23:43:15 SQL> 
23:43:15 SQL> -- I need a copy of the attributes:
23:43:15 SQL> 
23:43:15 SQL> 
23:43:15 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.04
23:43:15 SQL> CREATE TABLE jpy_att COMPRESS AS
23:43:15   2  SELECT
23:43:15   3  ydate
23:43:15   4  ,att00 jpy_att00
23:43:15   5  ,att01 jpy_att01
23:43:15   6  ,att02 jpy_att02
23:43:15   7  ,att03 jpy_att03
23:43:15   8  ,att04 jpy_att04
23:43:15   9  ,att05 jpy_att05
23:43:15  10  ,att06 jpy_att06
23:43:15  11  ,att07 jpy_att07
23:43:15  12  ,att08 jpy_att08
23:43:15  13  ,att09 jpy_att09
23:43:15  14  ,att10 jpy_att10
23:43:15  15  ,att11 jpy_att11
23:43:15  16  ,att12 jpy_att12
23:43:15  17  ,att13 jpy_att13
23:43:15  18  ,att14 jpy_att14
23:43:15  19  ,att15 jpy_att15
23:43:15  20  ,att16 jpy_att16
23:43:15  21  ,att17 jpy_att17
23:43:15  22  ,att18 jpy_att18
23:43:15  23  ,att19 jpy_att19
23:43:15  24  ,att20 jpy_att20
23:43:15  25  ,att21 jpy_att21
23:43:15  26  ,att22 jpy_att22
23:43:15  27  ,att23 jpy_att23
23:43:15  28  ,att24 jpy_att24
23:43:15  29  ,att25 jpy_att25
23:43:15  30  ,att26 jpy_att26
23:43:15  31  ,att27 jpy_att27
23:43:15  32  ,att28 jpy_att28
23:43:15  33  ,att29 jpy_att29
23:43:15  34  ,att30 jpy_att30
23:43:15  35  ,att31 jpy_att31
23:43:15  36  ,att32 jpy_att32
23:43:15  37  ,att33 jpy_att33
23:43:15  38  ,att34 jpy_att34
23:43:15  39  ,att35 jpy_att35
23:43:15  40  ,att36 jpy_att36
23:43:15  41  ,att37 jpy_att37
23:43:15  42  FROM svm6162
23:43:15  43  /

Table created.

Elapsed: 00:00:00.17
23:43:15 SQL> 
23:43:15 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.43
23:43:15 SQL> 
23:43:15 SQL> -- rpt
23:43:15 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19809

Elapsed: 00:00:00.89
23:43:16 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     19809

Elapsed: 00:00:00.00
23:43:16 SQL> 
23:43:16 SQL> --
23:43:16 SQL> -- cad610.sql
23:43:16 SQL> --
23:43:16 SQL> 
23:43:16 SQL> -- Creates views and tables for backtesting a forex SVM strategy
23:43:16 SQL> 
23:43:16 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.36
23:43:16 SQL> 
23:43:16 SQL> -- I created di5min here:
23:43:16 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
23:43:16 SQL> 
23:43:16 SQL> CREATE OR REPLACE VIEW svm6102 AS
23:43:16   2  SELECT
23:43:16   3  pair
23:43:16   4  ,ydate
23:43:16   5  ,prdate
23:43:16   6  ,rownum rnum -- acts as t in my time-series
23:43:16   7  ,clse
23:43:16   8  -- Derive a bunch of attributes from clse, the latest price:
23:43:16   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
23:43:16  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
23:43:16  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
23:43:16  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
23:43:16  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
23:43:16  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
23:43:16  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
23:43:16  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
23:43:16  17  --
23:43:16  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
23:43:16  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
23:43:16  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
23:43:16  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
23:43:16  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
23:43:16  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
23:43:16  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
23:43:16  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
23:43:16  26  --
23:43:16  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
23:43:16  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
23:43:16  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
23:43:16  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
23:43:16  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
23:43:16  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
23:43:16  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
23:43:16  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
23:43:16  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
23:43:16  36  FROM di5min WHERE pair LIKE'%cad%'
23:43:16  37  AND ydate > sysdate - 95
23:43:16  38  ORDER BY ydate
23:43:16  39  /

View created.

Elapsed: 00:00:00.04
23:43:17 SQL> 
23:43:17 SQL> -- rpt
23:43:17 SQL> 
23:43:17 SQL> SELECT
23:43:17   2  pair
23:43:17   3  ,COUNT(pair)
23:43:17   4  ,MIN(clse),MAX(clse)
23:43:17   5  ,MIN(avg6),MAX(avg6)
23:43:17   6  ,MIN(ydate),MAX(ydate)
23:43:17   7  FROM svm6102
23:43:17   8  GROUP BY pair
23:43:17   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_cad       19809    .988925	   1.0355  .99060274 1.03282877 2010-10-03 23:45:01 2011-01-06 23:40:00

Elapsed: 00:00:00.84
23:43:17 SQL> 
23:43:17 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
23:43:17 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.34
23:43:18 SQL> CREATE TABLE svm6122 COMPRESS AS
23:43:18   2  SELECT
23:43:18   3  pair
23:43:18   4  ,ydate
23:43:18   5  ,prdate
23:43:18   6  ,clse
23:43:18   7  -- g6 is important. I want to predict g6:
23:43:18   8  ,ld6 - clse g6
23:43:18   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
23:43:18  10  -- I want more attributes from the ones I derived above:
23:43:18  11  -- clse relation to moving-min
23:43:18  12  ,clse-min4  cm4
23:43:18  13  ,clse-min6  cm6
23:43:18  14  ,clse-min8  cm8
23:43:18  15  ,clse-min10 cm10
23:43:18  16  ,clse-min12 cm12
23:43:18  17  ,clse-min14 cm14
23:43:18  18  ,clse-min16 cm16
23:43:18  19  ,clse-min18 cm18
23:43:18  20  -- clse relation to moving-avg
23:43:18  21  ,clse-avg4  ca4
23:43:18  22  ,clse-avg6  ca6
23:43:18  23  ,clse-avg8  ca8
23:43:18  24  ,clse-avg10 ca10
23:43:18  25  ,clse-avg12 ca12
23:43:18  26  ,clse-avg14 ca14
23:43:18  27  ,clse-avg16 ca16
23:43:18  28  ,clse-avg18 ca18
23:43:18  29  -- clse relation to moving-max
23:43:18  30  ,clse-max4  cx4
23:43:18  31  ,clse-max6  cx6
23:43:18  32  ,clse-max8  cx8
23:43:18  33  ,clse-max10 cx10
23:43:18  34  ,clse-max12 cx12
23:43:18  35  ,clse-max14 cx14
23:43:18  36  ,clse-max16 cx16
23:43:18  37  ,clse-max18 cx18
23:43:18  38  -- Derive more attributes.
23:43:18  39  -- I want to use CORR() here to help SVM see the shape of the series.
23:43:18  40  -- But COVAR_POP is more stable:
23:43:18  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
23:43:18  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
23:43:18  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
23:43:18  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
23:43:18  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
23:43:18  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
23:43:18  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
23:43:18  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
23:43:18  49  -- Derive date related attributes:
23:43:18  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
23:43:18  51  ,0+TO_CHAR(ydate,'D')d
23:43:18  52  ,0+TO_CHAR(ydate,'W')w
23:43:18  53  -- mpm stands for minutes-past-midnight:
23:43:18  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
23:43:18  55  -- mph stands for minutes-past-hour:
23:43:18  56  ,0+TO_CHAR(ydate,'MI')mph
23:43:18  57  FROM svm6102
23:43:18  58  ORDER BY ydate
23:43:18  59  /

Table created.

Elapsed: 00:00:02.10
23:43:20 SQL> 
23:43:20 SQL> -- rpt
23:43:20 SQL> 
23:43:20 SQL> SELECT
23:43:20   2  pair
23:43:20   3  ,COUNT(pair)
23:43:20   4  ,MIN(clse),MAX(clse)
23:43:20   5  ,MIN(ydate),MAX(ydate)
23:43:20   6  FROM svm6122
23:43:20   7  GROUP BY pair
23:43:20   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_cad       19809    .988925	   1.0355 2010-10-03 23:45:01 2011-01-06 23:40:00

Elapsed: 00:00:00.04
23:43:20 SQL> 
23:43:20 SQL> -- Prepare for derivation of NTILE based params:
23:43:20 SQL> 
23:43:20 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.21
23:43:20 SQL> CREATE TABLE svm6142 COMPRESS AS
23:43:20   2  SELECT
23:43:20   3  pair
23:43:20   4  ,ydate
23:43:20   5  ,prdate
23:43:20   6  ,clse
23:43:20   7  ,g6
23:43:20   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
23:43:20   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
23:43:20  10  ,CASE WHEN trend IS NULL THEN 1
23:43:20  11  	    WHEN trend =0      THEN 1
23:43:20  12  	    ELSE trend END trend
23:43:20  13  ,cm4
23:43:20  14  ,cm6
23:43:20  15  ,cm8
23:43:20  16  ,cm10
23:43:20  17  ,cm12
23:43:20  18  ,cm14
23:43:20  19  ,cm16
23:43:20  20  ,cm18
23:43:20  21  --
23:43:20  22  ,ca4
23:43:20  23  ,ca6
23:43:20  24  ,ca8
23:43:20  25  ,ca10
23:43:20  26  ,ca12
23:43:20  27  ,ca14
23:43:20  28  ,ca16
23:43:20  29  ,ca18
23:43:20  30  --
23:43:20  31  ,cx4
23:43:20  32  ,cx6
23:43:20  33  ,cx8
23:43:20  34  ,cx10
23:43:20  35  ,cx12
23:43:20  36  ,cx14
23:43:20  37  ,cx16
23:43:20  38  ,cx18
23:43:20  39  --
23:43:20  40  ,crr4
23:43:20  41  ,crr6
23:43:20  42  ,crr8
23:43:20  43  ,crr10
23:43:20  44  ,crr12
23:43:20  45  ,crr14
23:43:20  46  ,crr16
23:43:20  47  ,crr18
23:43:20  48  --
23:43:20  49  ,hh
23:43:20  50  ,d
23:43:20  51  ,w
23:43:20  52  ,mpm
23:43:20  53  ,mph
23:43:20  54  FROM svm6122
23:43:20  55  ORDER BY ydate
23:43:20  56  /

Table created.

Elapsed: 00:00:00.36
23:43:20 SQL> 
23:43:20 SQL> -- rpt
23:43:20 SQL> 
23:43:20 SQL> SELECT
23:43:20   2  pair
23:43:20   3  ,trend
23:43:20   4  ,gatt
23:43:20   5  ,COUNT(pair)
23:43:20   6  ,AVG(g6)
23:43:20   7  FROM svm6142
23:43:20   8  GROUP BY pair,trend,gatt
23:43:20   9  ORDER BY pair,trend,gatt
23:43:20  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7313 -.00124222
usd_cad 	-1 up	      3186 .003051072
usd_cad 	-1		20
usd_cad 	 1 nup	      6842 -.00160879
usd_cad 	 1 up	      2396 .003639595
usd_cad 	 1		52

6 rows selected.

Elapsed: 00:00:00.04
23:43:20 SQL> 
23:43:20 SQL> 
23:43:20 SQL> -- Derive NTILE based params:
23:43:20 SQL> 
23:43:20 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.16
23:43:21 SQL> CREATE TABLE svm6162 COMPRESS AS
23:43:21   2  SELECT
23:43:21   3  pair
23:43:21   4  ,ydate
23:43:21   5  ,prdate
23:43:21   6  ,clse
23:43:21   7  ,g6
23:43:21   8  ,gatt
23:43:21   9  ,gattn
23:43:21  10  ,trend
23:43:21  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
23:43:21  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
23:43:21  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
23:43:21  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
23:43:21  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
23:43:21  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
23:43:21  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
23:43:21  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
23:43:21  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
23:43:21  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
23:43:21  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
23:43:21  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
23:43:21  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
23:43:21  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
23:43:21  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
23:43:21  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
23:43:21  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
23:43:21  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
23:43:21  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
23:43:21  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
23:43:21  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
23:43:21  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
23:43:21  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
23:43:21  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
23:43:21  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
23:43:21  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
23:43:21  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
23:43:21  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
23:43:21  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
23:43:21  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
23:43:21  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
23:43:21  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
23:43:21  43  ,hh  att32
23:43:21  44  ,d   att33
23:43:21  45  ,w   att34
23:43:21  46  ,mpm att35
23:43:21  47  ,mph att36
23:43:21  48  ,trend att37
23:43:21  49  FROM svm6142
23:43:21  50  ORDER BY ydate
23:43:21  51  /

Table created.

Elapsed: 00:00:04.81
23:43:25 SQL> 
23:43:25 SQL> -- rpt
23:43:25 SQL> 
23:43:25 SQL> SELECT
23:43:25   2  pair
23:43:25   3  ,trend
23:43:25   4  ,gatt
23:43:25   5  ,COUNT(pair)
23:43:25   6  ,AVG(g6)
23:43:25   7  FROM svm6162
23:43:25   8  GROUP BY pair,trend,gatt
23:43:25   9  ORDER BY pair,trend,gatt
23:43:25  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7313 -.00124222
usd_cad 	-1 up	      3186 .003051072
usd_cad 	-1		20
usd_cad 	 1 nup	      6842 -.00160879
usd_cad 	 1 up	      2396 .003639595
usd_cad 	 1		52

6 rows selected.

Elapsed: 00:00:00.03
23:43:25 SQL> 
23:43:25 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.15
23:43:26 SQL> CREATE TABLE modsrc COMPRESS AS
23:43:26   2  SELECT
23:43:26   3  pair
23:43:26   4  ,ydate
23:43:26   5  ,prdate
23:43:26   6  ,trend
23:43:26   7  ,g6
23:43:26   8  ,gatt
23:43:26   9  ,gattn
23:43:26  10  FROM svm6162
23:43:26  11  /

Table created.

Elapsed: 00:00:00.09
23:43:26 SQL> 
23:43:26 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.26
23:43:26 SQL> 
23:43:26 SQL> DROP   TABLE cad_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
23:43:26 SQL> CREATE TABLE cad_ms610 COMPRESS AS
23:43:26   2  SELECT
23:43:26   3  ydate
23:43:26   4  ,trend cad_trend
23:43:26   5  ,g6    cad_g6
23:43:26   6  ,gatt  cad_gatt
23:43:26   7  ,gattn cad_gattn
23:43:26   8  FROM modsrc
23:43:26   9  /

Table created.

Elapsed: 00:00:00.08
23:43:26 SQL> 
23:43:26 SQL> ANALYZE TABLE cad_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
23:43:26 SQL> 
23:43:26 SQL> -- I need a copy of the attributes:
23:43:26 SQL> 
23:43:26 SQL> 
23:43:26 SQL> DROP   TABLE cad_att;

Table dropped.

Elapsed: 00:00:00.05
23:43:26 SQL> CREATE TABLE cad_att COMPRESS AS
23:43:26   2  SELECT
23:43:26   3  ydate
23:43:26   4  ,att00 cad_att00
23:43:26   5  ,att01 cad_att01
23:43:26   6  ,att02 cad_att02
23:43:26   7  ,att03 cad_att03
23:43:26   8  ,att04 cad_att04
23:43:26   9  ,att05 cad_att05
23:43:26  10  ,att06 cad_att06
23:43:26  11  ,att07 cad_att07
23:43:26  12  ,att08 cad_att08
23:43:26  13  ,att09 cad_att09
23:43:26  14  ,att10 cad_att10
23:43:26  15  ,att11 cad_att11
23:43:26  16  ,att12 cad_att12
23:43:26  17  ,att13 cad_att13
23:43:26  18  ,att14 cad_att14
23:43:26  19  ,att15 cad_att15
23:43:26  20  ,att16 cad_att16
23:43:26  21  ,att17 cad_att17
23:43:26  22  ,att18 cad_att18
23:43:26  23  ,att19 cad_att19
23:43:26  24  ,att20 cad_att20
23:43:26  25  ,att21 cad_att21
23:43:26  26  ,att22 cad_att22
23:43:26  27  ,att23 cad_att23
23:43:26  28  ,att24 cad_att24
23:43:26  29  ,att25 cad_att25
23:43:26  30  ,att26 cad_att26
23:43:26  31  ,att27 cad_att27
23:43:26  32  ,att28 cad_att28
23:43:26  33  ,att29 cad_att29
23:43:26  34  ,att30 cad_att30
23:43:26  35  ,att31 cad_att31
23:43:26  36  ,att32 cad_att32
23:43:26  37  ,att33 cad_att33
23:43:26  38  ,att34 cad_att34
23:43:26  39  ,att35 cad_att35
23:43:26  40  ,att36 cad_att36
23:43:26  41  ,att37 cad_att37
23:43:26  42  FROM svm6162
23:43:26  43  /

Table created.

Elapsed: 00:00:00.18
23:43:27 SQL> 
23:43:27 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
23:43:27 SQL> 
23:43:27 SQL> -- rpt
23:43:27 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19809

Elapsed: 00:00:00.82
23:43:28 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
     19809

Elapsed: 00:00:00.00
23:43:28 SQL> 
23:43:28 SQL> --
23:43:28 SQL> -- chf610.sql
23:43:28 SQL> --
23:43:28 SQL> 
23:43:28 SQL> -- Creates views and tables for backtesting a forex SVM strategy
23:43:28 SQL> 
23:43:28 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.38
23:43:28 SQL> 
23:43:28 SQL> -- I created di5min here:
23:43:28 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
23:43:28 SQL> 
23:43:28 SQL> CREATE OR REPLACE VIEW svm6102 AS
23:43:28   2  SELECT
23:43:28   3  pair
23:43:28   4  ,ydate
23:43:28   5  ,prdate
23:43:28   6  ,rownum rnum -- acts as t in my time-series
23:43:28   7  ,clse
23:43:28   8  -- Derive a bunch of attributes from clse, the latest price:
23:43:28   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
23:43:28  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
23:43:28  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
23:43:28  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
23:43:28  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
23:43:28  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
23:43:28  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
23:43:28  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
23:43:28  17  --
23:43:28  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
23:43:28  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
23:43:28  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
23:43:28  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
23:43:28  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
23:43:28  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
23:43:28  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
23:43:28  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
23:43:28  26  --
23:43:28  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
23:43:28  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
23:43:28  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
23:43:28  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
23:43:28  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
23:43:28  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
23:43:28  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
23:43:28  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
23:43:28  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
23:43:28  36  FROM di5min WHERE pair LIKE'%chf%'
23:43:28  37  AND ydate > sysdate - 95
23:43:28  38  ORDER BY ydate
23:43:28  39  /

View created.

Elapsed: 00:00:00.05
23:43:28 SQL> 
23:43:28 SQL> -- rpt
23:43:28 SQL> 
23:43:28 SQL> SELECT
23:43:28   2  pair
23:43:28   3  ,COUNT(pair)
23:43:28   4  ,MIN(clse),MAX(clse)
23:43:28   5  ,MIN(avg6),MAX(avg6)
23:43:28   6  ,MIN(ydate),MAX(ydate)
23:43:28   7  FROM svm6102
23:43:28   8  GROUP BY pair
23:43:28   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_chf       19812    .931675	  1.00635 .933257708 1.00498151 2010-10-03 23:45:01 2011-01-06 23:40:00

Elapsed: 00:00:00.86
23:43:29 SQL> 
23:43:29 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
23:43:29 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.27
23:43:29 SQL> CREATE TABLE svm6122 COMPRESS AS
23:43:29   2  SELECT
23:43:29   3  pair
23:43:29   4  ,ydate
23:43:29   5  ,prdate
23:43:29   6  ,clse
23:43:29   7  -- g6 is important. I want to predict g6:
23:43:29   8  ,ld6 - clse g6
23:43:29   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
23:43:29  10  -- I want more attributes from the ones I derived above:
23:43:29  11  -- clse relation to moving-min
23:43:29  12  ,clse-min4  cm4
23:43:29  13  ,clse-min6  cm6
23:43:29  14  ,clse-min8  cm8
23:43:29  15  ,clse-min10 cm10
23:43:29  16  ,clse-min12 cm12
23:43:29  17  ,clse-min14 cm14
23:43:29  18  ,clse-min16 cm16
23:43:29  19  ,clse-min18 cm18
23:43:29  20  -- clse relation to moving-avg
23:43:29  21  ,clse-avg4  ca4
23:43:29  22  ,clse-avg6  ca6
23:43:29  23  ,clse-avg8  ca8
23:43:29  24  ,clse-avg10 ca10
23:43:29  25  ,clse-avg12 ca12
23:43:29  26  ,clse-avg14 ca14
23:43:29  27  ,clse-avg16 ca16
23:43:29  28  ,clse-avg18 ca18
23:43:29  29  -- clse relation to moving-max
23:43:29  30  ,clse-max4  cx4
23:43:29  31  ,clse-max6  cx6
23:43:29  32  ,clse-max8  cx8
23:43:29  33  ,clse-max10 cx10
23:43:29  34  ,clse-max12 cx12
23:43:29  35  ,clse-max14 cx14
23:43:29  36  ,clse-max16 cx16
23:43:29  37  ,clse-max18 cx18
23:43:29  38  -- Derive more attributes.
23:43:29  39  -- I want to use CORR() here to help SVM see the shape of the series.
23:43:29  40  -- But COVAR_POP is more stable:
23:43:29  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
23:43:29  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
23:43:29  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
23:43:29  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
23:43:29  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
23:43:29  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
23:43:29  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
23:43:29  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
23:43:29  49  -- Derive date related attributes:
23:43:29  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
23:43:29  51  ,0+TO_CHAR(ydate,'D')d
23:43:29  52  ,0+TO_CHAR(ydate,'W')w
23:43:29  53  -- mpm stands for minutes-past-midnight:
23:43:29  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
23:43:29  55  -- mph stands for minutes-past-hour:
23:43:29  56  ,0+TO_CHAR(ydate,'MI')mph
23:43:29  57  FROM svm6102
23:43:29  58  ORDER BY ydate
23:43:29  59  /

Table created.

Elapsed: 00:00:02.07
23:43:31 SQL> 
23:43:31 SQL> -- rpt
23:43:31 SQL> 
23:43:31 SQL> SELECT
23:43:31   2  pair
23:43:31   3  ,COUNT(pair)
23:43:31   4  ,MIN(clse),MAX(clse)
23:43:31   5  ,MIN(ydate),MAX(ydate)
23:43:31   6  FROM svm6122
23:43:31   7  GROUP BY pair
23:43:31   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_chf       19812    .931675	  1.00635 2010-10-03 23:45:01 2011-01-06 23:40:00

Elapsed: 00:00:00.05
23:43:31 SQL> 
23:43:31 SQL> -- Prepare for derivation of NTILE based params:
23:43:31 SQL> 
23:43:31 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.21
23:43:32 SQL> CREATE TABLE svm6142 COMPRESS AS
23:43:32   2  SELECT
23:43:32   3  pair
23:43:32   4  ,ydate
23:43:32   5  ,prdate
23:43:32   6  ,clse
23:43:32   7  ,g6
23:43:32   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
23:43:32   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
23:43:32  10  ,CASE WHEN trend IS NULL THEN 1
23:43:32  11  	    WHEN trend =0      THEN 1
23:43:32  12  	    ELSE trend END trend
23:43:32  13  ,cm4
23:43:32  14  ,cm6
23:43:32  15  ,cm8
23:43:32  16  ,cm10
23:43:32  17  ,cm12
23:43:32  18  ,cm14
23:43:32  19  ,cm16
23:43:32  20  ,cm18
23:43:32  21  --
23:43:32  22  ,ca4
23:43:32  23  ,ca6
23:43:32  24  ,ca8
23:43:32  25  ,ca10
23:43:32  26  ,ca12
23:43:32  27  ,ca14
23:43:32  28  ,ca16
23:43:32  29  ,ca18
23:43:32  30  --
23:43:32  31  ,cx4
23:43:32  32  ,cx6
23:43:32  33  ,cx8
23:43:32  34  ,cx10
23:43:32  35  ,cx12
23:43:32  36  ,cx14
23:43:32  37  ,cx16
23:43:32  38  ,cx18
23:43:32  39  --
23:43:32  40  ,crr4
23:43:32  41  ,crr6
23:43:32  42  ,crr8
23:43:32  43  ,crr10
23:43:32  44  ,crr12
23:43:32  45  ,crr14
23:43:32  46  ,crr16
23:43:32  47  ,crr18
23:43:32  48  --
23:43:32  49  ,hh
23:43:32  50  ,d
23:43:32  51  ,w
23:43:32  52  ,mpm
23:43:32  53  ,mph
23:43:32  54  FROM svm6122
23:43:32  55  ORDER BY ydate
23:43:32  56  /

Table created.

Elapsed: 00:00:00.45
23:43:32 SQL> 
23:43:32 SQL> -- rpt
23:43:32 SQL> 
23:43:32 SQL> SELECT
23:43:32   2  pair
23:43:32   3  ,trend
23:43:32   4  ,gatt
23:43:32   5  ,COUNT(pair)
23:43:32   6  ,AVG(g6)
23:43:32   7  FROM svm6142
23:43:32   8  GROUP BY pair,trend,gatt
23:43:32   9  ORDER BY pair,trend,gatt
23:43:32  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7130 -.00198184
usd_chf 	-1 up	      3080 .003813982
usd_chf 	-1		37
usd_chf 	 1 nup	      6580 -.00154335
usd_chf 	 1 up	      2950 .003955833
usd_chf 	 1		35

6 rows selected.

Elapsed: 00:00:00.04
23:43:32 SQL> 
23:43:32 SQL> 
23:43:32 SQL> -- Derive NTILE based params:
23:43:32 SQL> 
23:43:32 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.18
23:43:32 SQL> CREATE TABLE svm6162 COMPRESS AS
23:43:32   2  SELECT
23:43:32   3  pair
23:43:32   4  ,ydate
23:43:32   5  ,prdate
23:43:32   6  ,clse
23:43:32   7  ,g6
23:43:32   8  ,gatt
23:43:32   9  ,gattn
23:43:32  10  ,trend
23:43:32  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
23:43:32  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
23:43:32  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
23:43:32  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
23:43:32  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
23:43:32  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
23:43:32  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
23:43:32  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
23:43:32  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
23:43:32  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
23:43:32  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
23:43:32  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
23:43:32  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
23:43:32  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
23:43:32  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
23:43:32  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
23:43:32  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
23:43:32  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
23:43:32  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
23:43:32  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
23:43:32  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
23:43:32  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
23:43:32  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
23:43:32  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
23:43:32  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
23:43:32  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
23:43:32  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
23:43:32  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
23:43:32  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
23:43:32  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
23:43:32  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
23:43:32  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
23:43:32  43  ,hh  att32
23:43:32  44  ,d   att33
23:43:32  45  ,w   att34
23:43:32  46  ,mpm att35
23:43:32  47  ,mph att36
23:43:32  48  ,trend att37
23:43:32  49  FROM svm6142
23:43:32  50  ORDER BY ydate
23:43:32  51  /

Table created.

Elapsed: 00:00:04.91
23:43:37 SQL> 
23:43:37 SQL> -- rpt
23:43:37 SQL> 
23:43:37 SQL> SELECT
23:43:37   2  pair
23:43:37   3  ,trend
23:43:37   4  ,gatt
23:43:37   5  ,COUNT(pair)
23:43:37   6  ,AVG(g6)
23:43:37   7  FROM svm6162
23:43:37   8  GROUP BY pair,trend,gatt
23:43:37   9  ORDER BY pair,trend,gatt
23:43:37  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7130 -.00198184
usd_chf 	-1 up	      3080 .003813982
usd_chf 	-1		37
usd_chf 	 1 nup	      6580 -.00154335
usd_chf 	 1 up	      2950 .003955833
usd_chf 	 1		35

6 rows selected.

Elapsed: 00:00:00.03
23:43:37 SQL> 
23:43:37 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
23:43:37 SQL> CREATE TABLE modsrc COMPRESS AS
23:43:37   2  SELECT
23:43:37   3  pair
23:43:37   4  ,ydate
23:43:37   5  ,prdate
23:43:37   6  ,trend
23:43:37   7  ,g6
23:43:37   8  ,gatt
23:43:37   9  ,gattn
23:43:37  10  FROM svm6162
23:43:37  11  /

Table created.

Elapsed: 00:00:00.08
23:43:38 SQL> 
23:43:38 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.29
23:43:38 SQL> 
23:43:38 SQL> DROP   TABLE chf_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
23:43:38 SQL> CREATE TABLE chf_ms610 COMPRESS AS
23:43:38   2  SELECT
23:43:38   3  ydate
23:43:38   4  ,trend chf_trend
23:43:38   5  ,g6    chf_g6
23:43:38   6  ,gatt  chf_gatt
23:43:38   7  ,gattn chf_gattn
23:43:38   8  FROM modsrc
23:43:38   9  /

Table created.

Elapsed: 00:00:00.09
23:43:38 SQL> 
23:43:38 SQL> ANALYZE TABLE chf_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
23:43:38 SQL> 
23:43:38 SQL> -- I need a copy of the attributes:
23:43:38 SQL> 
23:43:38 SQL> 
23:43:38 SQL> DROP   TABLE chf_att;

Table dropped.

Elapsed: 00:00:00.09
23:43:38 SQL> CREATE TABLE chf_att COMPRESS AS
23:43:38   2  SELECT
23:43:38   3  ydate
23:43:38   4  ,att00 chf_att00
23:43:38   5  ,att01 chf_att01
23:43:38   6  ,att02 chf_att02
23:43:38   7  ,att03 chf_att03
23:43:38   8  ,att04 chf_att04
23:43:38   9  ,att05 chf_att05
23:43:38  10  ,att06 chf_att06
23:43:38  11  ,att07 chf_att07
23:43:38  12  ,att08 chf_att08
23:43:38  13  ,att09 chf_att09
23:43:38  14  ,att10 chf_att10
23:43:38  15  ,att11 chf_att11
23:43:38  16  ,att12 chf_att12
23:43:38  17  ,att13 chf_att13
23:43:38  18  ,att14 chf_att14
23:43:38  19  ,att15 chf_att15
23:43:38  20  ,att16 chf_att16
23:43:38  21  ,att17 chf_att17
23:43:38  22  ,att18 chf_att18
23:43:38  23  ,att19 chf_att19
23:43:38  24  ,att20 chf_att20
23:43:38  25  ,att21 chf_att21
23:43:38  26  ,att22 chf_att22
23:43:38  27  ,att23 chf_att23
23:43:38  28  ,att24 chf_att24
23:43:38  29  ,att25 chf_att25
23:43:38  30  ,att26 chf_att26
23:43:38  31  ,att27 chf_att27
23:43:38  32  ,att28 chf_att28
23:43:38  33  ,att29 chf_att29
23:43:38  34  ,att30 chf_att30
23:43:38  35  ,att31 chf_att31
23:43:38  36  ,att32 chf_att32
23:43:38  37  ,att33 chf_att33
23:43:38  38  ,att34 chf_att34
23:43:38  39  ,att35 chf_att35
23:43:38  40  ,att36 chf_att36
23:43:38  41  ,att37 chf_att37
23:43:38  42  FROM svm6162
23:43:38  43  /

Table created.

Elapsed: 00:00:00.18
23:43:38 SQL> 
23:43:38 SQL> ANALYZE TABLE chf_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
23:43:39 SQL> 
23:43:39 SQL> -- rpt
23:43:39 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19812

Elapsed: 00:00:00.85
23:43:40 SQL> SELECT COUNT(*)FROM chf_att;

  COUNT(*)
----------
     19812

Elapsed: 00:00:00.00
23:43:40 SQL> 
23:43:40 SQL> --
23:43:40 SQL> -- ech610.sql
23:43:40 SQL> --
23:43:40 SQL> 
23:43:40 SQL> -- Creates views and tables for backtesting a forex SVM strategy
23:43:40 SQL> 
23:43:40 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.38
23:43:40 SQL> 
23:43:40 SQL> -- I created di5min here:
23:43:40 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
23:43:40 SQL> 
23:43:40 SQL> CREATE OR REPLACE VIEW svm6102 AS
23:43:40   2  SELECT
23:43:40   3  pair
23:43:40   4  ,ydate
23:43:40   5  ,prdate
23:43:40   6  ,rownum rnum -- acts as t in my time-series
23:43:40   7  ,clse
23:43:40   8  -- Derive a bunch of attributes from clse, the latest price:
23:43:40   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
23:43:40  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
23:43:40  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
23:43:40  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
23:43:40  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
23:43:40  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
23:43:40  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
23:43:40  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
23:43:40  17  --
23:43:40  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
23:43:40  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
23:43:40  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
23:43:40  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
23:43:40  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
23:43:40  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
23:43:40  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
23:43:40  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
23:43:40  26  --
23:43:40  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
23:43:40  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
23:43:40  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
23:43:40  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
23:43:40  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
23:43:40  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
23:43:40  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
23:43:40  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
23:43:40  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
23:43:40  36  FROM di5min WHERE pair LIKE'%ech%'
23:43:40  37  AND ydate > sysdate - 95
23:43:40  38  ORDER BY ydate
23:43:40  39  /

View created.

Elapsed: 00:00:00.05
23:43:40 SQL> 
23:43:40 SQL> -- rpt
23:43:40 SQL> 
23:43:40 SQL> SELECT
23:43:40   2  pair
23:43:40   3  ,COUNT(pair)
23:43:40   4  ,MIN(clse),MAX(clse)
23:43:40   5  ,MIN(avg6),MAX(avg6)
23:43:40   6  ,MIN(ydate),MAX(ydate)
23:43:40   7  FROM svm6102
23:43:40   8  GROUP BY pair
23:43:40   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ech_usd       19810 1.24182424 1.38284305 1.24320711 1.37986485 2010-10-03 23:45:01 2011-01-06 23:40:00

Elapsed: 00:00:00.84
23:43:41 SQL> 
23:43:41 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
23:43:41 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.31
23:43:41 SQL> CREATE TABLE svm6122 COMPRESS AS
23:43:41   2  SELECT
23:43:41   3  pair
23:43:41   4  ,ydate
23:43:41   5  ,prdate
23:43:41   6  ,clse
23:43:41   7  -- g6 is important. I want to predict g6:
23:43:41   8  ,ld6 - clse g6
23:43:41   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
23:43:41  10  -- I want more attributes from the ones I derived above:
23:43:41  11  -- clse relation to moving-min
23:43:41  12  ,clse-min4  cm4
23:43:41  13  ,clse-min6  cm6
23:43:41  14  ,clse-min8  cm8
23:43:41  15  ,clse-min10 cm10
23:43:41  16  ,clse-min12 cm12
23:43:41  17  ,clse-min14 cm14
23:43:41  18  ,clse-min16 cm16
23:43:41  19  ,clse-min18 cm18
23:43:41  20  -- clse relation to moving-avg
23:43:41  21  ,clse-avg4  ca4
23:43:41  22  ,clse-avg6  ca6
23:43:41  23  ,clse-avg8  ca8
23:43:41  24  ,clse-avg10 ca10
23:43:41  25  ,clse-avg12 ca12
23:43:41  26  ,clse-avg14 ca14
23:43:41  27  ,clse-avg16 ca16
23:43:41  28  ,clse-avg18 ca18
23:43:41  29  -- clse relation to moving-max
23:43:41  30  ,clse-max4  cx4
23:43:41  31  ,clse-max6  cx6
23:43:41  32  ,clse-max8  cx8
23:43:41  33  ,clse-max10 cx10
23:43:41  34  ,clse-max12 cx12
23:43:41  35  ,clse-max14 cx14
23:43:41  36  ,clse-max16 cx16
23:43:41  37  ,clse-max18 cx18
23:43:41  38  -- Derive more attributes.
23:43:41  39  -- I want to use CORR() here to help SVM see the shape of the series.
23:43:41  40  -- But COVAR_POP is more stable:
23:43:41  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
23:43:41  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
23:43:41  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
23:43:41  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
23:43:41  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
23:43:41  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
23:43:41  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
23:43:41  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
23:43:41  49  -- Derive date related attributes:
23:43:41  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
23:43:41  51  ,0+TO_CHAR(ydate,'D')d
23:43:41  52  ,0+TO_CHAR(ydate,'W')w
23:43:41  53  -- mpm stands for minutes-past-midnight:
23:43:41  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
23:43:41  55  -- mph stands for minutes-past-hour:
23:43:41  56  ,0+TO_CHAR(ydate,'MI')mph
23:43:41  57  FROM svm6102
23:43:41  58  ORDER BY ydate
23:43:41  59  /

Table created.

Elapsed: 00:00:02.08
23:43:43 SQL> 
23:43:43 SQL> -- rpt
23:43:43 SQL> 
23:43:43 SQL> SELECT
23:43:43   2  pair
23:43:43   3  ,COUNT(pair)
23:43:43   4  ,MIN(clse),MAX(clse)
23:43:43   5  ,MIN(ydate),MAX(ydate)
23:43:43   6  FROM svm6122
23:43:43   7  GROUP BY pair
23:43:43   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ech_usd       19810 1.24182424 1.38284305 2010-10-03 23:45:01 2011-01-06 23:40:00

Elapsed: 00:00:00.04
23:43:43 SQL> 
23:43:43 SQL> -- Prepare for derivation of NTILE based params:
23:43:43 SQL> 
23:43:43 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.50
23:43:44 SQL> CREATE TABLE svm6142 COMPRESS AS
23:43:44   2  SELECT
23:43:44   3  pair
23:43:44   4  ,ydate
23:43:44   5  ,prdate
23:43:44   6  ,clse
23:43:44   7  ,g6
23:43:44   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
23:43:44   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
23:43:44  10  ,CASE WHEN trend IS NULL THEN 1
23:43:44  11  	    WHEN trend =0      THEN 1
23:43:44  12  	    ELSE trend END trend
23:43:44  13  ,cm4
23:43:44  14  ,cm6
23:43:44  15  ,cm8
23:43:44  16  ,cm10
23:43:44  17  ,cm12
23:43:44  18  ,cm14
23:43:44  19  ,cm16
23:43:44  20  ,cm18
23:43:44  21  --
23:43:44  22  ,ca4
23:43:44  23  ,ca6
23:43:44  24  ,ca8
23:43:44  25  ,ca10
23:43:44  26  ,ca12
23:43:44  27  ,ca14
23:43:44  28  ,ca16
23:43:44  29  ,ca18
23:43:44  30  --
23:43:44  31  ,cx4
23:43:44  32  ,cx6
23:43:44  33  ,cx8
23:43:44  34  ,cx10
23:43:44  35  ,cx12
23:43:44  36  ,cx14
23:43:44  37  ,cx16
23:43:44  38  ,cx18
23:43:44  39  --
23:43:44  40  ,crr4
23:43:44  41  ,crr6
23:43:44  42  ,crr8
23:43:44  43  ,crr10
23:43:44  44  ,crr12
23:43:44  45  ,crr14
23:43:44  46  ,crr16
23:43:44  47  ,crr18
23:43:44  48  --
23:43:44  49  ,hh
23:43:44  50  ,d
23:43:44  51  ,w
23:43:44  52  ,mpm
23:43:44  53  ,mph
23:43:44  54  FROM svm6122
23:43:44  55  ORDER BY ydate
23:43:44  56  /

Table created.

Elapsed: 00:00:00.39
23:43:44 SQL> 
23:43:44 SQL> -- rpt
23:43:44 SQL> 
23:43:44 SQL> SELECT
23:43:44   2  pair
23:43:44   3  ,trend
23:43:44   4  ,gatt
23:43:44   5  ,COUNT(pair)
23:43:44   6  ,AVG(g6)
23:43:44   7  FROM svm6142
23:43:44   8  GROUP BY pair,trend,gatt
23:43:44   9  ORDER BY pair,trend,gatt
23:43:44  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6797 -.00231359
ech_usd 	-1 up	      3579 .003575741
ech_usd 	-1		63
ech_usd 	 1 nup	      6457   -.002394
ech_usd 	 1 up	      2905 .004122754
ech_usd 	 1		 9

6 rows selected.

Elapsed: 00:00:00.04
23:43:44 SQL> 
23:43:44 SQL> 
23:43:44 SQL> -- Derive NTILE based params:
23:43:44 SQL> 
23:43:44 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.15
23:43:44 SQL> CREATE TABLE svm6162 COMPRESS AS
23:43:44   2  SELECT
23:43:44   3  pair
23:43:44   4  ,ydate
23:43:44   5  ,prdate
23:43:44   6  ,clse
23:43:44   7  ,g6
23:43:44   8  ,gatt
23:43:44   9  ,gattn
23:43:44  10  ,trend
23:43:44  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
23:43:44  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
23:43:44  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
23:43:44  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
23:43:44  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
23:43:44  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
23:43:44  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
23:43:44  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
23:43:44  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
23:43:44  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
23:43:44  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
23:43:44  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
23:43:44  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
23:43:44  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
23:43:44  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
23:43:44  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
23:43:44  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
23:43:44  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
23:43:44  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
23:43:44  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
23:43:44  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
23:43:44  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
23:43:44  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
23:43:44  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
23:43:44  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
23:43:44  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
23:43:44  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
23:43:44  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
23:43:44  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
23:43:44  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
23:43:44  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
23:43:44  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
23:43:44  43  ,hh  att32
23:43:44  44  ,d   att33
23:43:44  45  ,w   att34
23:43:44  46  ,mpm att35
23:43:44  47  ,mph att36
23:43:44  48  ,trend att37
23:43:44  49  FROM svm6142
23:43:44  50  ORDER BY ydate
23:43:44  51  /

Table created.

Elapsed: 00:00:04.89
23:43:49 SQL> 
23:43:49 SQL> -- rpt
23:43:49 SQL> 
23:43:49 SQL> SELECT
23:43:49   2  pair
23:43:49   3  ,trend
23:43:49   4  ,gatt
23:43:49   5  ,COUNT(pair)
23:43:49   6  ,AVG(g6)
23:43:49   7  FROM svm6162
23:43:49   8  GROUP BY pair,trend,gatt
23:43:49   9  ORDER BY pair,trend,gatt
23:43:49  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6797 -.00231359
ech_usd 	-1 up	      3579 .003575741
ech_usd 	-1		63
ech_usd 	 1 nup	      6457   -.002394
ech_usd 	 1 up	      2905 .004122754
ech_usd 	 1		 9

6 rows selected.

Elapsed: 00:00:00.03
23:43:49 SQL> 
23:43:49 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.17
23:43:50 SQL> CREATE TABLE modsrc COMPRESS AS
23:43:50   2  SELECT
23:43:50   3  pair
23:43:50   4  ,ydate
23:43:50   5  ,prdate
23:43:50   6  ,trend
23:43:50   7  ,g6
23:43:50   8  ,gatt
23:43:50   9  ,gattn
23:43:50  10  FROM svm6162
23:43:50  11  /

Table created.

Elapsed: 00:00:00.08
23:43:50 SQL> 
23:43:50 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
23:43:50 SQL> 
23:43:50 SQL> DROP   TABLE ech_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
23:43:50 SQL> CREATE TABLE ech_ms610 COMPRESS AS
23:43:50   2  SELECT
23:43:50   3  ydate
23:43:50   4  ,trend ech_trend
23:43:50   5  ,g6    ech_g6
23:43:50   6  ,gatt  ech_gatt
23:43:50   7  ,gattn ech_gattn
23:43:50   8  FROM modsrc
23:43:50   9  /

Table created.

Elapsed: 00:00:00.09
23:43:50 SQL> 
23:43:50 SQL> ANALYZE TABLE ech_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
23:43:50 SQL> 
23:43:50 SQL> -- I need a copy of the attributes:
23:43:50 SQL> 
23:43:50 SQL> 
23:43:50 SQL> DROP   TABLE ech_att;

Table dropped.

Elapsed: 00:00:00.13
23:43:50 SQL> CREATE TABLE ech_att COMPRESS AS
23:43:50   2  SELECT
23:43:50   3  ydate
23:43:50   4  ,att00 ech_att00
23:43:50   5  ,att01 ech_att01
23:43:50   6  ,att02 ech_att02
23:43:50   7  ,att03 ech_att03
23:43:50   8  ,att04 ech_att04
23:43:50   9  ,att05 ech_att05
23:43:50  10  ,att06 ech_att06
23:43:50  11  ,att07 ech_att07
23:43:50  12  ,att08 ech_att08
23:43:50  13  ,att09 ech_att09
23:43:50  14  ,att10 ech_att10
23:43:50  15  ,att11 ech_att11
23:43:50  16  ,att12 ech_att12
23:43:50  17  ,att13 ech_att13
23:43:50  18  ,att14 ech_att14
23:43:50  19  ,att15 ech_att15
23:43:50  20  ,att16 ech_att16
23:43:50  21  ,att17 ech_att17
23:43:50  22  ,att18 ech_att18
23:43:50  23  ,att19 ech_att19
23:43:50  24  ,att20 ech_att20
23:43:50  25  ,att21 ech_att21
23:43:50  26  ,att22 ech_att22
23:43:50  27  ,att23 ech_att23
23:43:50  28  ,att24 ech_att24
23:43:50  29  ,att25 ech_att25
23:43:50  30  ,att26 ech_att26
23:43:50  31  ,att27 ech_att27
23:43:50  32  ,att28 ech_att28
23:43:50  33  ,att29 ech_att29
23:43:50  34  ,att30 ech_att30
23:43:50  35  ,att31 ech_att31
23:43:50  36  ,att32 ech_att32
23:43:50  37  ,att33 ech_att33
23:43:50  38  ,att34 ech_att34
23:43:50  39  ,att35 ech_att35
23:43:50  40  ,att36 ech_att36
23:43:50  41  ,att37 ech_att37
23:43:50  42  FROM svm6162
23:43:50  43  /

Table created.

Elapsed: 00:00:00.17
23:43:50 SQL> 
23:43:50 SQL> ANALYZE TABLE ech_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
23:43:51 SQL> 
23:43:51 SQL> -- rpt
23:43:51 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19810

Elapsed: 00:00:00.80
23:43:52 SQL> SELECT COUNT(*)FROM ech_att;

  COUNT(*)
----------
     19810

Elapsed: 00:00:00.00
23:43:52 SQL> 
23:43:52 SQL> --
23:43:52 SQL> -- egb610.sql
23:43:52 SQL> --
23:43:52 SQL> 
23:43:52 SQL> -- Creates views and tables for backtesting a forex SVM strategy
23:43:52 SQL> 
23:43:52 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.35
23:43:52 SQL> 
23:43:52 SQL> -- I created di5min here:
23:43:52 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
23:43:52 SQL> 
23:43:52 SQL> CREATE OR REPLACE VIEW svm6102 AS
23:43:52   2  SELECT
23:43:52   3  pair
23:43:52   4  ,ydate
23:43:52   5  ,prdate
23:43:52   6  ,rownum rnum -- acts as t in my time-series
23:43:52   7  ,clse
23:43:52   8  -- Derive a bunch of attributes from clse, the latest price:
23:43:52   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
23:43:52  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
23:43:52  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
23:43:52  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
23:43:52  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
23:43:52  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
23:43:52  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
23:43:52  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
23:43:52  17  --
23:43:52  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
23:43:52  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
23:43:52  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
23:43:52  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
23:43:52  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
23:43:52  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
23:43:52  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
23:43:52  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
23:43:52  26  --
23:43:52  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
23:43:52  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
23:43:52  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
23:43:52  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
23:43:52  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
23:43:52  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
23:43:52  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
23:43:52  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
23:43:52  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
23:43:52  36  FROM di5min WHERE pair LIKE'%egb%'
23:43:52  37  AND ydate > sysdate - 95
23:43:52  38  ORDER BY ydate
23:43:52  39  /

View created.

Elapsed: 00:00:00.04
23:43:52 SQL> 
23:43:52 SQL> -- rpt
23:43:52 SQL> 
23:43:52 SQL> SELECT
23:43:52   2  pair
23:43:52   3  ,COUNT(pair)
23:43:52   4  ,MIN(clse),MAX(clse)
23:43:52   5  ,MIN(avg6),MAX(avg6)
23:43:52   6  ,MIN(ydate),MAX(ydate)
23:43:52   7  FROM svm6102
23:43:52   8  GROUP BY pair
23:43:52   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
egb_usd       19809 .833520557 .893920122 .834199029 .892400287 2010-10-03 23:45:01 2011-01-06 23:40:00

Elapsed: 00:00:00.95
23:43:53 SQL> 
23:43:53 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
23:43:53 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.33
23:43:53 SQL> CREATE TABLE svm6122 COMPRESS AS
23:43:53   2  SELECT
23:43:53   3  pair
23:43:53   4  ,ydate
23:43:53   5  ,prdate
23:43:53   6  ,clse
23:43:53   7  -- g6 is important. I want to predict g6:
23:43:53   8  ,ld6 - clse g6
23:43:53   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
23:43:53  10  -- I want more attributes from the ones I derived above:
23:43:53  11  -- clse relation to moving-min
23:43:53  12  ,clse-min4  cm4
23:43:53  13  ,clse-min6  cm6
23:43:53  14  ,clse-min8  cm8
23:43:53  15  ,clse-min10 cm10
23:43:53  16  ,clse-min12 cm12
23:43:53  17  ,clse-min14 cm14
23:43:53  18  ,clse-min16 cm16
23:43:53  19  ,clse-min18 cm18
23:43:53  20  -- clse relation to moving-avg
23:43:53  21  ,clse-avg4  ca4
23:43:53  22  ,clse-avg6  ca6
23:43:53  23  ,clse-avg8  ca8
23:43:53  24  ,clse-avg10 ca10
23:43:53  25  ,clse-avg12 ca12
23:43:53  26  ,clse-avg14 ca14
23:43:53  27  ,clse-avg16 ca16
23:43:53  28  ,clse-avg18 ca18
23:43:53  29  -- clse relation to moving-max
23:43:53  30  ,clse-max4  cx4
23:43:53  31  ,clse-max6  cx6
23:43:53  32  ,clse-max8  cx8
23:43:53  33  ,clse-max10 cx10
23:43:53  34  ,clse-max12 cx12
23:43:53  35  ,clse-max14 cx14
23:43:53  36  ,clse-max16 cx16
23:43:53  37  ,clse-max18 cx18
23:43:53  38  -- Derive more attributes.
23:43:53  39  -- I want to use CORR() here to help SVM see the shape of the series.
23:43:53  40  -- But COVAR_POP is more stable:
23:43:53  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
23:43:53  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
23:43:53  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
23:43:53  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
23:43:53  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
23:43:53  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
23:43:53  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
23:43:53  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
23:43:53  49  -- Derive date related attributes:
23:43:53  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
23:43:53  51  ,0+TO_CHAR(ydate,'D')d
23:43:53  52  ,0+TO_CHAR(ydate,'W')w
23:43:53  53  -- mpm stands for minutes-past-midnight:
23:43:53  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
23:43:53  55  -- mph stands for minutes-past-hour:
23:43:53  56  ,0+TO_CHAR(ydate,'MI')mph
23:43:53  57  FROM svm6102
23:43:53  58  ORDER BY ydate
23:43:53  59  /

Table created.

Elapsed: 00:00:02.51
23:43:56 SQL> 
23:43:56 SQL> -- rpt
23:43:56 SQL> 
23:43:56 SQL> SELECT
23:43:56   2  pair
23:43:56   3  ,COUNT(pair)
23:43:56   4  ,MIN(clse),MAX(clse)
23:43:56   5  ,MIN(ydate),MAX(ydate)
23:43:56   6  FROM svm6122
23:43:56   7  GROUP BY pair
23:43:56   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
egb_usd       19809 .833520557 .893920122 2010-10-03 23:45:01 2011-01-06 23:40:00

Elapsed: 00:00:00.04
23:43:56 SQL> 
23:43:56 SQL> -- Prepare for derivation of NTILE based params:
23:43:56 SQL> 
23:43:56 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.35
23:43:56 SQL> CREATE TABLE svm6142 COMPRESS AS
23:43:56   2  SELECT
23:43:56   3  pair
23:43:56   4  ,ydate
23:43:56   5  ,prdate
23:43:56   6  ,clse
23:43:56   7  ,g6
23:43:56   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
23:43:56   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
23:43:56  10  ,CASE WHEN trend IS NULL THEN 1
23:43:56  11  	    WHEN trend =0      THEN 1
23:43:56  12  	    ELSE trend END trend
23:43:56  13  ,cm4
23:43:56  14  ,cm6
23:43:56  15  ,cm8
23:43:56  16  ,cm10
23:43:56  17  ,cm12
23:43:56  18  ,cm14
23:43:56  19  ,cm16
23:43:56  20  ,cm18
23:43:56  21  --
23:43:56  22  ,ca4
23:43:56  23  ,ca6
23:43:56  24  ,ca8
23:43:56  25  ,ca10
23:43:56  26  ,ca12
23:43:56  27  ,ca14
23:43:56  28  ,ca16
23:43:56  29  ,ca18
23:43:56  30  --
23:43:56  31  ,cx4
23:43:56  32  ,cx6
23:43:56  33  ,cx8
23:43:56  34  ,cx10
23:43:56  35  ,cx12
23:43:56  36  ,cx14
23:43:56  37  ,cx16
23:43:56  38  ,cx18
23:43:56  39  --
23:43:56  40  ,crr4
23:43:56  41  ,crr6
23:43:56  42  ,crr8
23:43:56  43  ,crr10
23:43:56  44  ,crr12
23:43:56  45  ,crr14
23:43:56  46  ,crr16
23:43:56  47  ,crr18
23:43:56  48  --
23:43:56  49  ,hh
23:43:56  50  ,d
23:43:56  51  ,w
23:43:56  52  ,mpm
23:43:56  53  ,mph
23:43:56  54  FROM svm6122
23:43:56  55  ORDER BY ydate
23:43:56  56  /

Table created.

Elapsed: 00:00:00.43
23:43:57 SQL> 
23:43:57 SQL> -- rpt
23:43:57 SQL> 
23:43:57 SQL> SELECT
23:43:57   2  pair
23:43:57   3  ,trend
23:43:57   4  ,gatt
23:43:57   5  ,COUNT(pair)
23:43:57   6  ,AVG(g6)
23:43:57   7  FROM svm6142
23:43:57   8  GROUP BY pair,trend,gatt
23:43:57   9  ORDER BY pair,trend,gatt
23:43:57  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7940 -.00106321
egb_usd 	-1 up	      2636 .002928295
egb_usd 	-1		65
egb_usd 	 1 nup	      6544 -.00138794
egb_usd 	 1 up	      2617   .0029282
egb_usd 	 1		 7

6 rows selected.

Elapsed: 00:00:00.05
23:43:57 SQL> 
23:43:57 SQL> 
23:43:57 SQL> -- Derive NTILE based params:
23:43:57 SQL> 
23:43:57 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.35
23:43:57 SQL> CREATE TABLE svm6162 COMPRESS AS
23:43:57   2  SELECT
23:43:57   3  pair
23:43:57   4  ,ydate
23:43:57   5  ,prdate
23:43:57   6  ,clse
23:43:57   7  ,g6
23:43:57   8  ,gatt
23:43:57   9  ,gattn
23:43:57  10  ,trend
23:43:57  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
23:43:57  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
23:43:57  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
23:43:57  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
23:43:57  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
23:43:57  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
23:43:57  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
23:43:57  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
23:43:57  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
23:43:57  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
23:43:57  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
23:43:57  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
23:43:57  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
23:43:57  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
23:43:57  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
23:43:57  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
23:43:57  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
23:43:57  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
23:43:57  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
23:43:57  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
23:43:57  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
23:43:57  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
23:43:57  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
23:43:57  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
23:43:57  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
23:43:57  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
23:43:57  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
23:43:57  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
23:43:57  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
23:43:57  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
23:43:57  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
23:43:57  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
23:43:57  43  ,hh  att32
23:43:57  44  ,d   att33
23:43:57  45  ,w   att34
23:43:57  46  ,mpm att35
23:43:57  47  ,mph att36
23:43:57  48  ,trend att37
23:43:57  49  FROM svm6142
23:43:57  50  ORDER BY ydate
23:43:57  51  /

Table created.

Elapsed: 00:00:05.62
23:44:03 SQL> 
23:44:03 SQL> -- rpt
23:44:03 SQL> 
23:44:03 SQL> SELECT
23:44:03   2  pair
23:44:03   3  ,trend
23:44:03   4  ,gatt
23:44:03   5  ,COUNT(pair)
23:44:03   6  ,AVG(g6)
23:44:03   7  FROM svm6162
23:44:03   8  GROUP BY pair,trend,gatt
23:44:03   9  ORDER BY pair,trend,gatt
23:44:03  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7940 -.00106321
egb_usd 	-1 up	      2636 .002928295
egb_usd 	-1		65
egb_usd 	 1 nup	      6544 -.00138794
egb_usd 	 1 up	      2617   .0029282
egb_usd 	 1		 7

6 rows selected.

Elapsed: 00:00:00.03
23:44:03 SQL> 
23:44:03 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.19
23:44:03 SQL> CREATE TABLE modsrc COMPRESS AS
23:44:03   2  SELECT
23:44:03   3  pair
23:44:03   4  ,ydate
23:44:03   5  ,prdate
23:44:03   6  ,trend
23:44:03   7  ,g6
23:44:03   8  ,gatt
23:44:03   9  ,gattn
23:44:03  10  FROM svm6162
23:44:03  11  /

Table created.

Elapsed: 00:00:00.08
23:44:03 SQL> 
23:44:03 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
23:44:03 SQL> 
23:44:03 SQL> DROP   TABLE egb_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
23:44:03 SQL> CREATE TABLE egb_ms610 COMPRESS AS
23:44:03   2  SELECT
23:44:03   3  ydate
23:44:03   4  ,trend egb_trend
23:44:03   5  ,g6    egb_g6
23:44:03   6  ,gatt  egb_gatt
23:44:03   7  ,gattn egb_gattn
23:44:03   8  FROM modsrc
23:44:03   9  /

Table created.

Elapsed: 00:00:00.07
23:44:03 SQL> 
23:44:03 SQL> ANALYZE TABLE egb_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
23:44:04 SQL> 
23:44:04 SQL> -- I need a copy of the attributes:
23:44:04 SQL> 
23:44:04 SQL> 
23:44:04 SQL> DROP   TABLE egb_att;

Table dropped.

Elapsed: 00:00:00.07
23:44:04 SQL> CREATE TABLE egb_att COMPRESS AS
23:44:04   2  SELECT
23:44:04   3  ydate
23:44:04   4  ,att00 egb_att00
23:44:04   5  ,att01 egb_att01
23:44:04   6  ,att02 egb_att02
23:44:04   7  ,att03 egb_att03
23:44:04   8  ,att04 egb_att04
23:44:04   9  ,att05 egb_att05
23:44:04  10  ,att06 egb_att06
23:44:04  11  ,att07 egb_att07
23:44:04  12  ,att08 egb_att08
23:44:04  13  ,att09 egb_att09
23:44:04  14  ,att10 egb_att10
23:44:04  15  ,att11 egb_att11
23:44:04  16  ,att12 egb_att12
23:44:04  17  ,att13 egb_att13
23:44:04  18  ,att14 egb_att14
23:44:04  19  ,att15 egb_att15
23:44:04  20  ,att16 egb_att16
23:44:04  21  ,att17 egb_att17
23:44:04  22  ,att18 egb_att18
23:44:04  23  ,att19 egb_att19
23:44:04  24  ,att20 egb_att20
23:44:04  25  ,att21 egb_att21
23:44:04  26  ,att22 egb_att22
23:44:04  27  ,att23 egb_att23
23:44:04  28  ,att24 egb_att24
23:44:04  29  ,att25 egb_att25
23:44:04  30  ,att26 egb_att26
23:44:04  31  ,att27 egb_att27
23:44:04  32  ,att28 egb_att28
23:44:04  33  ,att29 egb_att29
23:44:04  34  ,att30 egb_att30
23:44:04  35  ,att31 egb_att31
23:44:04  36  ,att32 egb_att32
23:44:04  37  ,att33 egb_att33
23:44:04  38  ,att34 egb_att34
23:44:04  39  ,att35 egb_att35
23:44:04  40  ,att36 egb_att36
23:44:04  41  ,att37 egb_att37
23:44:04  42  FROM svm6162
23:44:04  43  /

Table created.

Elapsed: 00:00:00.20
23:44:04 SQL> 
23:44:04 SQL> ANALYZE TABLE egb_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
23:44:04 SQL> 
23:44:04 SQL> -- rpt
23:44:04 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19809

Elapsed: 00:00:00.95
23:44:05 SQL> SELECT COUNT(*)FROM egb_att;

  COUNT(*)
----------
     19809

Elapsed: 00:00:00.00
23:44:05 SQL> 
23:44:05 SQL> --
23:44:05 SQL> -- ejp610.sql
23:44:05 SQL> --
23:44:05 SQL> 
23:44:05 SQL> -- Creates views and tables for backtesting a forex SVM strategy
23:44:05 SQL> 
23:44:05 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.62
23:44:06 SQL> 
23:44:06 SQL> -- I created di5min here:
23:44:06 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
23:44:06 SQL> 
23:44:06 SQL> CREATE OR REPLACE VIEW svm6102 AS
23:44:06   2  SELECT
23:44:06   3  pair
23:44:06   4  ,ydate
23:44:06   5  ,prdate
23:44:06   6  ,rownum rnum -- acts as t in my time-series
23:44:06   7  ,clse
23:44:06   8  -- Derive a bunch of attributes from clse, the latest price:
23:44:06   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
23:44:06  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
23:44:06  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
23:44:06  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
23:44:06  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
23:44:06  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
23:44:06  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
23:44:06  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
23:44:06  17  --
23:44:06  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
23:44:06  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
23:44:06  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
23:44:06  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
23:44:06  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
23:44:06  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
23:44:06  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
23:44:06  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
23:44:06  26  --
23:44:06  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
23:44:06  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
23:44:06  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
23:44:06  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
23:44:06  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
23:44:06  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
23:44:06  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
23:44:06  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
23:44:06  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
23:44:06  36  FROM di5min WHERE pair LIKE'%ejp%'
23:44:06  37  AND ydate > sysdate - 95
23:44:06  38  ORDER BY ydate
23:44:06  39  /

View created.

Elapsed: 00:00:00.05
23:44:06 SQL> 
23:44:06 SQL> -- rpt
23:44:06 SQL> 
23:44:06 SQL> SELECT
23:44:06   2  pair
23:44:06   3  ,COUNT(pair)
23:44:06   4  ,MIN(clse),MAX(clse)
23:44:06   5  ,MIN(avg6),MAX(avg6)
23:44:06   6  ,MIN(ydate),MAX(ydate)
23:44:06   7  FROM svm6102
23:44:06   8  GROUP BY pair
23:44:06   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ejp_usd       19807 107.643765	115.63485 107.776148 115.509678 2010-10-03 23:45:01 2011-01-06 23:40:00

Elapsed: 00:00:00.86
23:44:07 SQL> 
23:44:07 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
23:44:07 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.32
23:44:07 SQL> CREATE TABLE svm6122 COMPRESS AS
23:44:07   2  SELECT
23:44:07   3  pair
23:44:07   4  ,ydate
23:44:07   5  ,prdate
23:44:07   6  ,clse
23:44:07   7  -- g6 is important. I want to predict g6:
23:44:07   8  ,ld6 - clse g6
23:44:07   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
23:44:07  10  -- I want more attributes from the ones I derived above:
23:44:07  11  -- clse relation to moving-min
23:44:07  12  ,clse-min4  cm4
23:44:07  13  ,clse-min6  cm6
23:44:07  14  ,clse-min8  cm8
23:44:07  15  ,clse-min10 cm10
23:44:07  16  ,clse-min12 cm12
23:44:07  17  ,clse-min14 cm14
23:44:07  18  ,clse-min16 cm16
23:44:07  19  ,clse-min18 cm18
23:44:07  20  -- clse relation to moving-avg
23:44:07  21  ,clse-avg4  ca4
23:44:07  22  ,clse-avg6  ca6
23:44:07  23  ,clse-avg8  ca8
23:44:07  24  ,clse-avg10 ca10
23:44:07  25  ,clse-avg12 ca12
23:44:07  26  ,clse-avg14 ca14
23:44:07  27  ,clse-avg16 ca16
23:44:07  28  ,clse-avg18 ca18
23:44:07  29  -- clse relation to moving-max
23:44:07  30  ,clse-max4  cx4
23:44:07  31  ,clse-max6  cx6
23:44:07  32  ,clse-max8  cx8
23:44:07  33  ,clse-max10 cx10
23:44:07  34  ,clse-max12 cx12
23:44:07  35  ,clse-max14 cx14
23:44:07  36  ,clse-max16 cx16
23:44:07  37  ,clse-max18 cx18
23:44:07  38  -- Derive more attributes.
23:44:07  39  -- I want to use CORR() here to help SVM see the shape of the series.
23:44:07  40  -- But COVAR_POP is more stable:
23:44:07  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
23:44:07  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
23:44:07  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
23:44:07  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
23:44:07  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
23:44:07  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
23:44:07  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
23:44:07  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
23:44:07  49  -- Derive date related attributes:
23:44:07  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
23:44:07  51  ,0+TO_CHAR(ydate,'D')d
23:44:07  52  ,0+TO_CHAR(ydate,'W')w
23:44:07  53  -- mpm stands for minutes-past-midnight:
23:44:07  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
23:44:07  55  -- mph stands for minutes-past-hour:
23:44:07  56  ,0+TO_CHAR(ydate,'MI')mph
23:44:07  57  FROM svm6102
23:44:07  58  ORDER BY ydate
23:44:07  59  /

Table created.

Elapsed: 00:00:02.20
23:44:09 SQL> 
23:44:09 SQL> -- rpt
23:44:09 SQL> 
23:44:09 SQL> SELECT
23:44:09   2  pair
23:44:09   3  ,COUNT(pair)
23:44:09   4  ,MIN(clse),MAX(clse)
23:44:09   5  ,MIN(ydate),MAX(ydate)
23:44:09   6  FROM svm6122
23:44:09   7  GROUP BY pair
23:44:09   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ejp_usd       19807 107.643765	115.63485 2010-10-03 23:45:01 2011-01-06 23:40:00

Elapsed: 00:00:00.04
23:44:09 SQL> 
23:44:09 SQL> -- Prepare for derivation of NTILE based params:
23:44:09 SQL> 
23:44:09 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.30
23:44:10 SQL> CREATE TABLE svm6142 COMPRESS AS
23:44:10   2  SELECT
23:44:10   3  pair
23:44:10   4  ,ydate
23:44:10   5  ,prdate
23:44:10   6  ,clse
23:44:10   7  ,g6
23:44:10   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
23:44:10   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
23:44:10  10  ,CASE WHEN trend IS NULL THEN 1
23:44:10  11  	    WHEN trend =0      THEN 1
23:44:10  12  	    ELSE trend END trend
23:44:10  13  ,cm4
23:44:10  14  ,cm6
23:44:10  15  ,cm8
23:44:10  16  ,cm10
23:44:10  17  ,cm12
23:44:10  18  ,cm14
23:44:10  19  ,cm16
23:44:10  20  ,cm18
23:44:10  21  --
23:44:10  22  ,ca4
23:44:10  23  ,ca6
23:44:10  24  ,ca8
23:44:10  25  ,ca10
23:44:10  26  ,ca12
23:44:10  27  ,ca14
23:44:10  28  ,ca16
23:44:10  29  ,ca18
23:44:10  30  --
23:44:10  31  ,cx4
23:44:10  32  ,cx6
23:44:10  33  ,cx8
23:44:10  34  ,cx10
23:44:10  35  ,cx12
23:44:10  36  ,cx14
23:44:10  37  ,cx16
23:44:10  38  ,cx18
23:44:10  39  --
23:44:10  40  ,crr4
23:44:10  41  ,crr6
23:44:10  42  ,crr8
23:44:10  43  ,crr10
23:44:10  44  ,crr12
23:44:10  45  ,crr14
23:44:10  46  ,crr16
23:44:10  47  ,crr18
23:44:10  48  --
23:44:10  49  ,hh
23:44:10  50  ,d
23:44:10  51  ,w
23:44:10  52  ,mpm
23:44:10  53  ,mph
23:44:10  54  FROM svm6122
23:44:10  55  ORDER BY ydate
23:44:10  56  /

Table created.

Elapsed: 00:00:00.39
23:44:10 SQL> 
23:44:10 SQL> -- rpt
23:44:10 SQL> 
23:44:10 SQL> SELECT
23:44:10   2  pair
23:44:10   3  ,trend
23:44:10   4  ,gatt
23:44:10   5  ,COUNT(pair)
23:44:10   6  ,AVG(g6)
23:44:10   7  FROM svm6142
23:44:10   8  GROUP BY pair,trend,gatt
23:44:10   9  ORDER BY pair,trend,gatt
23:44:10  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      5199 -.32446152
ejp_usd 	-1 up	      4922 .277569725
ejp_usd 	-1		66
ejp_usd 	 1 nup	      5000 -.29811546
ejp_usd 	 1 up	      4614 .288966104
ejp_usd 	 1		 6

6 rows selected.

Elapsed: 00:00:00.04
23:44:10 SQL> 
23:44:10 SQL> 
23:44:10 SQL> -- Derive NTILE based params:
23:44:10 SQL> 
23:44:10 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.22
23:44:10 SQL> CREATE TABLE svm6162 COMPRESS AS
23:44:10   2  SELECT
23:44:10   3  pair
23:44:10   4  ,ydate
23:44:10   5  ,prdate
23:44:10   6  ,clse
23:44:10   7  ,g6
23:44:10   8  ,gatt
23:44:10   9  ,gattn
23:44:10  10  ,trend
23:44:10  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
23:44:10  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
23:44:10  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
23:44:10  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
23:44:10  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
23:44:10  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
23:44:10  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
23:44:10  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
23:44:10  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
23:44:10  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
23:44:10  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
23:44:10  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
23:44:10  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
23:44:10  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
23:44:10  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
23:44:10  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
23:44:10  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
23:44:10  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
23:44:10  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
23:44:10  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
23:44:10  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
23:44:10  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
23:44:10  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
23:44:10  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
23:44:10  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
23:44:10  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
23:44:10  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
23:44:10  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
23:44:10  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
23:44:10  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
23:44:10  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
23:44:10  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
23:44:10  43  ,hh  att32
23:44:10  44  ,d   att33
23:44:10  45  ,w   att34
23:44:10  46  ,mpm att35
23:44:10  47  ,mph att36
23:44:10  48  ,trend att37
23:44:10  49  FROM svm6142
23:44:10  50  ORDER BY ydate
23:44:10  51  /

Table created.

Elapsed: 00:00:04.92
23:44:15 SQL> 
23:44:15 SQL> -- rpt
23:44:15 SQL> 
23:44:15 SQL> SELECT
23:44:15   2  pair
23:44:15   3  ,trend
23:44:15   4  ,gatt
23:44:15   5  ,COUNT(pair)
23:44:15   6  ,AVG(g6)
23:44:15   7  FROM svm6162
23:44:15   8  GROUP BY pair,trend,gatt
23:44:15   9  ORDER BY pair,trend,gatt
23:44:15  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      5199 -.32446152
ejp_usd 	-1 up	      4922 .277569725
ejp_usd 	-1		66
ejp_usd 	 1 nup	      5000 -.29811546
ejp_usd 	 1 up	      4614 .288966104
ejp_usd 	 1		 6

6 rows selected.

Elapsed: 00:00:00.03
23:44:15 SQL> 
23:44:15 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.14
23:44:15 SQL> CREATE TABLE modsrc COMPRESS AS
23:44:15   2  SELECT
23:44:15   3  pair
23:44:15   4  ,ydate
23:44:15   5  ,prdate
23:44:15   6  ,trend
23:44:15   7  ,g6
23:44:15   8  ,gatt
23:44:15   9  ,gattn
23:44:15  10  FROM svm6162
23:44:15  11  /

Table created.

Elapsed: 00:00:00.09
23:44:15 SQL> 
23:44:15 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.22
23:44:16 SQL> 
23:44:16 SQL> DROP   TABLE ejp_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
23:44:16 SQL> CREATE TABLE ejp_ms610 COMPRESS AS
23:44:16   2  SELECT
23:44:16   3  ydate
23:44:16   4  ,trend ejp_trend
23:44:16   5  ,g6    ejp_g6
23:44:16   6  ,gatt  ejp_gatt
23:44:16   7  ,gattn ejp_gattn
23:44:16   8  FROM modsrc
23:44:16   9  /

Table created.

Elapsed: 00:00:00.06
23:44:16 SQL> 
23:44:16 SQL> ANALYZE TABLE ejp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
23:44:16 SQL> 
23:44:16 SQL> -- I need a copy of the attributes:
23:44:16 SQL> 
23:44:16 SQL> 
23:44:16 SQL> DROP   TABLE ejp_att;

Table dropped.

Elapsed: 00:00:00.05
23:44:16 SQL> CREATE TABLE ejp_att COMPRESS AS
23:44:16   2  SELECT
23:44:16   3  ydate
23:44:16   4  ,att00 ejp_att00
23:44:16   5  ,att01 ejp_att01
23:44:16   6  ,att02 ejp_att02
23:44:16   7  ,att03 ejp_att03
23:44:16   8  ,att04 ejp_att04
23:44:16   9  ,att05 ejp_att05
23:44:16  10  ,att06 ejp_att06
23:44:16  11  ,att07 ejp_att07
23:44:16  12  ,att08 ejp_att08
23:44:16  13  ,att09 ejp_att09
23:44:16  14  ,att10 ejp_att10
23:44:16  15  ,att11 ejp_att11
23:44:16  16  ,att12 ejp_att12
23:44:16  17  ,att13 ejp_att13
23:44:16  18  ,att14 ejp_att14
23:44:16  19  ,att15 ejp_att15
23:44:16  20  ,att16 ejp_att16
23:44:16  21  ,att17 ejp_att17
23:44:16  22  ,att18 ejp_att18
23:44:16  23  ,att19 ejp_att19
23:44:16  24  ,att20 ejp_att20
23:44:16  25  ,att21 ejp_att21
23:44:16  26  ,att22 ejp_att22
23:44:16  27  ,att23 ejp_att23
23:44:16  28  ,att24 ejp_att24
23:44:16  29  ,att25 ejp_att25
23:44:16  30  ,att26 ejp_att26
23:44:16  31  ,att27 ejp_att27
23:44:16  32  ,att28 ejp_att28
23:44:16  33  ,att29 ejp_att29
23:44:16  34  ,att30 ejp_att30
23:44:16  35  ,att31 ejp_att31
23:44:16  36  ,att32 ejp_att32
23:44:16  37  ,att33 ejp_att33
23:44:16  38  ,att34 ejp_att34
23:44:16  39  ,att35 ejp_att35
23:44:16  40  ,att36 ejp_att36
23:44:16  41  ,att37 ejp_att37
23:44:16  42  FROM svm6162
23:44:16  43  /

Table created.

Elapsed: 00:00:00.22
23:44:16 SQL> 
23:44:16 SQL> ANALYZE TABLE ejp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
23:44:17 SQL> 
23:44:17 SQL> -- rpt
23:44:17 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19807

Elapsed: 00:00:00.88
23:44:18 SQL> SELECT COUNT(*)FROM ejp_att;

  COUNT(*)
----------
     19807

Elapsed: 00:00:00.01
23:44:18 SQL> 
23:44:18 SQL> --
23:44:18 SQL> -- ajp610.sql
23:44:18 SQL> --
23:44:18 SQL> 
23:44:18 SQL> -- Creates views and tables for backtesting a forex SVM strategy
23:44:18 SQL> 
23:44:18 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.39
23:44:18 SQL> 
23:44:18 SQL> -- I created di5min here:
23:44:18 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
23:44:18 SQL> 
23:44:18 SQL> CREATE OR REPLACE VIEW svm6102 AS
23:44:18   2  SELECT
23:44:18   3  pair
23:44:18   4  ,ydate
23:44:18   5  ,prdate
23:44:18   6  ,rownum rnum -- acts as t in my time-series
23:44:18   7  ,clse
23:44:18   8  -- Derive a bunch of attributes from clse, the latest price:
23:44:18   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
23:44:18  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
23:44:18  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
23:44:18  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
23:44:18  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
23:44:18  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
23:44:18  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
23:44:18  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
23:44:18  17  --
23:44:18  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
23:44:18  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
23:44:18  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
23:44:18  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
23:44:18  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
23:44:18  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
23:44:18  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
23:44:18  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
23:44:18  26  --
23:44:18  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
23:44:18  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
23:44:18  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
23:44:18  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
23:44:18  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
23:44:18  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
23:44:18  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
23:44:18  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
23:44:18  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
23:44:18  36  FROM di5min WHERE pair LIKE'%ajp%'
23:44:18  37  AND ydate > sysdate - 95
23:44:18  38  ORDER BY ydate
23:44:18  39  /

View created.

Elapsed: 00:00:00.05
23:44:18 SQL> 
23:44:18 SQL> -- rpt
23:44:18 SQL> 
23:44:18 SQL> SELECT
23:44:18   2  pair
23:44:18   3  ,COUNT(pair)
23:44:18   4  ,MIN(clse),MAX(clse)
23:44:18   5  ,MIN(avg6),MAX(avg6)
23:44:18   6  ,MIN(ydate),MAX(ydate)
23:44:18   7  FROM svm6102
23:44:18   8  GROUP BY pair
23:44:18   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ajp_usd       19803  78.249976 83.6669853 78.5106193  83.546306 2010-10-03 23:45:01 2011-01-06 23:35:00

Elapsed: 00:00:00.79
23:44:19 SQL> 
23:44:19 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
23:44:19 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.32
23:44:19 SQL> CREATE TABLE svm6122 COMPRESS AS
23:44:19   2  SELECT
23:44:19   3  pair
23:44:19   4  ,ydate
23:44:19   5  ,prdate
23:44:19   6  ,clse
23:44:19   7  -- g6 is important. I want to predict g6:
23:44:19   8  ,ld6 - clse g6
23:44:19   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
23:44:19  10  -- I want more attributes from the ones I derived above:
23:44:19  11  -- clse relation to moving-min
23:44:19  12  ,clse-min4  cm4
23:44:19  13  ,clse-min6  cm6
23:44:19  14  ,clse-min8  cm8
23:44:19  15  ,clse-min10 cm10
23:44:19  16  ,clse-min12 cm12
23:44:19  17  ,clse-min14 cm14
23:44:19  18  ,clse-min16 cm16
23:44:19  19  ,clse-min18 cm18
23:44:19  20  -- clse relation to moving-avg
23:44:19  21  ,clse-avg4  ca4
23:44:19  22  ,clse-avg6  ca6
23:44:19  23  ,clse-avg8  ca8
23:44:19  24  ,clse-avg10 ca10
23:44:19  25  ,clse-avg12 ca12
23:44:19  26  ,clse-avg14 ca14
23:44:19  27  ,clse-avg16 ca16
23:44:19  28  ,clse-avg18 ca18
23:44:19  29  -- clse relation to moving-max
23:44:19  30  ,clse-max4  cx4
23:44:19  31  ,clse-max6  cx6
23:44:19  32  ,clse-max8  cx8
23:44:19  33  ,clse-max10 cx10
23:44:19  34  ,clse-max12 cx12
23:44:19  35  ,clse-max14 cx14
23:44:19  36  ,clse-max16 cx16
23:44:19  37  ,clse-max18 cx18
23:44:19  38  -- Derive more attributes.
23:44:19  39  -- I want to use CORR() here to help SVM see the shape of the series.
23:44:19  40  -- But COVAR_POP is more stable:
23:44:19  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
23:44:19  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
23:44:19  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
23:44:19  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
23:44:19  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
23:44:19  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
23:44:19  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
23:44:19  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
23:44:19  49  -- Derive date related attributes:
23:44:19  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
23:44:19  51  ,0+TO_CHAR(ydate,'D')d
23:44:19  52  ,0+TO_CHAR(ydate,'W')w
23:44:19  53  -- mpm stands for minutes-past-midnight:
23:44:19  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
23:44:19  55  -- mph stands for minutes-past-hour:
23:44:19  56  ,0+TO_CHAR(ydate,'MI')mph
23:44:19  57  FROM svm6102
23:44:19  58  ORDER BY ydate
23:44:19  59  /

Table created.

Elapsed: 00:00:02.05
23:44:21 SQL> 
23:44:21 SQL> -- rpt
23:44:21 SQL> 
23:44:21 SQL> SELECT
23:44:21   2  pair
23:44:21   3  ,COUNT(pair)
23:44:21   4  ,MIN(clse),MAX(clse)
23:44:21   5  ,MIN(ydate),MAX(ydate)
23:44:21   6  FROM svm6122
23:44:21   7  GROUP BY pair
23:44:21   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ajp_usd       19803  78.249976 83.6669853 2010-10-03 23:45:01 2011-01-06 23:35:00

Elapsed: 00:00:00.04
23:44:21 SQL> 
23:44:21 SQL> -- Prepare for derivation of NTILE based params:
23:44:21 SQL> 
23:44:21 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.23
23:44:21 SQL> CREATE TABLE svm6142 COMPRESS AS
23:44:21   2  SELECT
23:44:21   3  pair
23:44:21   4  ,ydate
23:44:21   5  ,prdate
23:44:21   6  ,clse
23:44:21   7  ,g6
23:44:21   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
23:44:21   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
23:44:21  10  ,CASE WHEN trend IS NULL THEN 1
23:44:21  11  	    WHEN trend =0      THEN 1
23:44:21  12  	    ELSE trend END trend
23:44:21  13  ,cm4
23:44:21  14  ,cm6
23:44:21  15  ,cm8
23:44:21  16  ,cm10
23:44:21  17  ,cm12
23:44:21  18  ,cm14
23:44:21  19  ,cm16
23:44:21  20  ,cm18
23:44:21  21  --
23:44:21  22  ,ca4
23:44:21  23  ,ca6
23:44:21  24  ,ca8
23:44:21  25  ,ca10
23:44:21  26  ,ca12
23:44:21  27  ,ca14
23:44:21  28  ,ca16
23:44:21  29  ,ca18
23:44:21  30  --
23:44:21  31  ,cx4
23:44:21  32  ,cx6
23:44:21  33  ,cx8
23:44:21  34  ,cx10
23:44:21  35  ,cx12
23:44:21  36  ,cx14
23:44:21  37  ,cx16
23:44:21  38  ,cx18
23:44:21  39  --
23:44:21  40  ,crr4
23:44:21  41  ,crr6
23:44:21  42  ,crr8
23:44:21  43  ,crr10
23:44:21  44  ,crr12
23:44:21  45  ,crr14
23:44:21  46  ,crr16
23:44:21  47  ,crr18
23:44:21  48  --
23:44:21  49  ,hh
23:44:21  50  ,d
23:44:21  51  ,w
23:44:21  52  ,mpm
23:44:21  53  ,mph
23:44:21  54  FROM svm6122
23:44:21  55  ORDER BY ydate
23:44:21  56  /

Table created.

Elapsed: 00:00:00.38
23:44:22 SQL> 
23:44:22 SQL> -- rpt
23:44:22 SQL> 
23:44:22 SQL> SELECT
23:44:22   2  pair
23:44:22   3  ,trend
23:44:22   4  ,gatt
23:44:22   5  ,COUNT(pair)
23:44:22   6  ,AVG(g6)
23:44:22   7  FROM svm6142
23:44:22   8  GROUP BY pair,trend,gatt
23:44:22   9  ORDER BY pair,trend,gatt
23:44:22  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ajp_usd 	-1 nup	      4405 -.22384177
ajp_usd 	-1 up	      5229 .223349265
ajp_usd 	-1		35
ajp_usd 	 1 nup	      5291 -.20290144
ajp_usd 	 1 up	      4806 .212866042
ajp_usd 	 1		37

6 rows selected.

Elapsed: 00:00:00.03
23:44:22 SQL> 
23:44:22 SQL> 
23:44:22 SQL> -- Derive NTILE based params:
23:44:22 SQL> 
23:44:22 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.17
23:44:22 SQL> CREATE TABLE svm6162 COMPRESS AS
23:44:22   2  SELECT
23:44:22   3  pair
23:44:22   4  ,ydate
23:44:22   5  ,prdate
23:44:22   6  ,clse
23:44:22   7  ,g6
23:44:22   8  ,gatt
23:44:22   9  ,gattn
23:44:22  10  ,trend
23:44:22  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
23:44:22  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
23:44:22  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
23:44:22  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
23:44:22  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
23:44:22  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
23:44:22  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
23:44:22  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
23:44:22  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
23:44:22  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
23:44:22  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
23:44:22  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
23:44:22  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
23:44:22  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
23:44:22  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
23:44:22  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
23:44:22  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
23:44:22  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
23:44:22  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
23:44:22  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
23:44:22  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
23:44:22  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
23:44:22  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
23:44:22  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
23:44:22  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
23:44:22  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
23:44:22  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
23:44:22  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
23:44:22  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
23:44:22  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
23:44:22  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
23:44:22  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
23:44:22  43  ,hh  att32
23:44:22  44  ,d   att33
23:44:22  45  ,w   att34
23:44:22  46  ,mpm att35
23:44:22  47  ,mph att36
23:44:22  48  ,trend att37
23:44:22  49  FROM svm6142
23:44:22  50  ORDER BY ydate
23:44:22  51  /

Table created.

Elapsed: 00:00:04.96
23:44:27 SQL> 
23:44:27 SQL> -- rpt
23:44:27 SQL> 
23:44:27 SQL> SELECT
23:44:27   2  pair
23:44:27   3  ,trend
23:44:27   4  ,gatt
23:44:27   5  ,COUNT(pair)
23:44:27   6  ,AVG(g6)
23:44:27   7  FROM svm6162
23:44:27   8  GROUP BY pair,trend,gatt
23:44:27   9  ORDER BY pair,trend,gatt
23:44:27  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ajp_usd 	-1 nup	      4405 -.22384177
ajp_usd 	-1 up	      5229 .223349265
ajp_usd 	-1		35
ajp_usd 	 1 nup	      5291 -.20290144
ajp_usd 	 1 up	      4806 .212866042
ajp_usd 	 1		37

6 rows selected.

Elapsed: 00:00:00.02
23:44:27 SQL> 
23:44:27 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.15
23:44:27 SQL> CREATE TABLE modsrc COMPRESS AS
23:44:27   2  SELECT
23:44:27   3  pair
23:44:27   4  ,ydate
23:44:27   5  ,prdate
23:44:27   6  ,trend
23:44:27   7  ,g6
23:44:27   8  ,gatt
23:44:27   9  ,gattn
23:44:27  10  FROM svm6162
23:44:27  11  /

Table created.

Elapsed: 00:00:00.08
23:44:27 SQL> 
23:44:27 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
23:44:27 SQL> 
23:44:27 SQL> DROP   TABLE ajp_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
23:44:28 SQL> CREATE TABLE ajp_ms610 COMPRESS AS
23:44:28   2  SELECT
23:44:28   3  ydate
23:44:28   4  ,trend ajp_trend
23:44:28   5  ,g6    ajp_g6
23:44:28   6  ,gatt  ajp_gatt
23:44:28   7  ,gattn ajp_gattn
23:44:28   8  FROM modsrc
23:44:28   9  /

Table created.

Elapsed: 00:00:00.06
23:44:28 SQL> 
23:44:28 SQL> ANALYZE TABLE ajp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
23:44:28 SQL> 
23:44:28 SQL> -- I need a copy of the attributes:
23:44:28 SQL> 
23:44:28 SQL> 
23:44:28 SQL> DROP   TABLE ajp_att;

Table dropped.

Elapsed: 00:00:00.04
23:44:28 SQL> CREATE TABLE ajp_att COMPRESS AS
23:44:28   2  SELECT
23:44:28   3  ydate
23:44:28   4  ,att00 ajp_att00
23:44:28   5  ,att01 ajp_att01
23:44:28   6  ,att02 ajp_att02
23:44:28   7  ,att03 ajp_att03
23:44:28   8  ,att04 ajp_att04
23:44:28   9  ,att05 ajp_att05
23:44:28  10  ,att06 ajp_att06
23:44:28  11  ,att07 ajp_att07
23:44:28  12  ,att08 ajp_att08
23:44:28  13  ,att09 ajp_att09
23:44:28  14  ,att10 ajp_att10
23:44:28  15  ,att11 ajp_att11
23:44:28  16  ,att12 ajp_att12
23:44:28  17  ,att13 ajp_att13
23:44:28  18  ,att14 ajp_att14
23:44:28  19  ,att15 ajp_att15
23:44:28  20  ,att16 ajp_att16
23:44:28  21  ,att17 ajp_att17
23:44:28  22  ,att18 ajp_att18
23:44:28  23  ,att19 ajp_att19
23:44:28  24  ,att20 ajp_att20
23:44:28  25  ,att21 ajp_att21
23:44:28  26  ,att22 ajp_att22
23:44:28  27  ,att23 ajp_att23
23:44:28  28  ,att24 ajp_att24
23:44:28  29  ,att25 ajp_att25
23:44:28  30  ,att26 ajp_att26
23:44:28  31  ,att27 ajp_att27
23:44:28  32  ,att28 ajp_att28
23:44:28  33  ,att29 ajp_att29
23:44:28  34  ,att30 ajp_att30
23:44:28  35  ,att31 ajp_att31
23:44:28  36  ,att32 ajp_att32
23:44:28  37  ,att33 ajp_att33
23:44:28  38  ,att34 ajp_att34
23:44:28  39  ,att35 ajp_att35
23:44:28  40  ,att36 ajp_att36
23:44:28  41  ,att37 ajp_att37
23:44:28  42  FROM svm6162
23:44:28  43  /

Table created.

Elapsed: 00:00:00.15
23:44:28 SQL> 
23:44:28 SQL> ANALYZE TABLE ajp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.44
23:44:28 SQL> 
23:44:28 SQL> -- rpt
23:44:28 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19803

Elapsed: 00:00:00.79
23:44:29 SQL> SELECT COUNT(*)FROM ajp_att;

  COUNT(*)
----------
     19803

Elapsed: 00:00:00.00
23:44:29 SQL> 
23:44:29 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
