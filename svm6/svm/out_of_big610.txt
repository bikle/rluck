
SQL*Plus: Release 11.2.0.1.0 Production on Fri Dec 31 06:12:35 2010

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

06:12:35 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
06:12:35 SQL> 06:12:35 SQL> --
06:12:35 SQL> -- eur610.sql
06:12:35 SQL> --
06:12:35 SQL> 
06:12:35 SQL> -- Creates views and tables for backtesting a forex SVM strategy
06:12:35 SQL> 
06:12:35 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.02
06:12:35 SQL> 
06:12:35 SQL> -- I created di5min here:
06:12:35 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
06:12:35 SQL> 
06:12:35 SQL> CREATE OR REPLACE VIEW svm6102 AS
06:12:35   2  SELECT
06:12:35   3  pair
06:12:35   4  ,ydate
06:12:35   5  ,prdate
06:12:35   6  ,rownum rnum -- acts as t in my time-series
06:12:35   7  ,clse
06:12:35   8  -- Derive a bunch of attributes from clse, the latest price:
06:12:35   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
06:12:35  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
06:12:35  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
06:12:35  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
06:12:35  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
06:12:35  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
06:12:35  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
06:12:35  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
06:12:35  17  --
06:12:35  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
06:12:35  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
06:12:35  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
06:12:35  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
06:12:35  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
06:12:35  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
06:12:35  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
06:12:35  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
06:12:35  26  --
06:12:35  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
06:12:35  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
06:12:35  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
06:12:35  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
06:12:35  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
06:12:35  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
06:12:35  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
06:12:35  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
06:12:35  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
06:12:35  36  FROM di5min WHERE pair LIKE'%eur%'
06:12:35  37  AND ydate > sysdate - 95
06:12:35  38  ORDER BY ydate
06:12:35  39  /

View created.

Elapsed: 00:00:00.32
06:12:36 SQL> 
06:12:36 SQL> -- rpt
06:12:36 SQL> 
06:12:36 SQL> SELECT
06:12:36   2  pair
06:12:36   3  ,COUNT(pair)
06:12:36   4  ,MIN(clse),MAX(clse)
06:12:36   5  ,MIN(avg6),MAX(avg6)
06:12:36   6  ,MIN(ydate),MAX(ydate)
06:12:36   7  FROM svm6102
06:12:36   8  GROUP BY pair
06:12:36   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_usd       19838    1.29735	   1.4273 1.29875103 1.42436233 2010-09-27 06:15:01 2010-12-31 06:05:00

Elapsed: 00:00:00.94
06:12:37 SQL> 
06:12:37 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
06:12:37 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.06
06:12:37 SQL> CREATE TABLE svm6122 COMPRESS AS
06:12:37   2  SELECT
06:12:37   3  pair
06:12:37   4  ,ydate
06:12:37   5  ,prdate
06:12:37   6  ,clse
06:12:37   7  -- g6 is important. I want to predict g6:
06:12:37   8  ,ld6 - clse g6
06:12:37   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
06:12:37  10  -- I want more attributes from the ones I derived above:
06:12:37  11  -- clse relation to moving-min
06:12:37  12  ,clse-min4  cm4
06:12:37  13  ,clse-min6  cm6
06:12:37  14  ,clse-min8  cm8
06:12:37  15  ,clse-min10 cm10
06:12:37  16  ,clse-min12 cm12
06:12:37  17  ,clse-min14 cm14
06:12:37  18  ,clse-min16 cm16
06:12:37  19  ,clse-min18 cm18
06:12:37  20  -- clse relation to moving-avg
06:12:37  21  ,clse-avg4  ca4
06:12:37  22  ,clse-avg6  ca6
06:12:37  23  ,clse-avg8  ca8
06:12:37  24  ,clse-avg10 ca10
06:12:37  25  ,clse-avg12 ca12
06:12:37  26  ,clse-avg14 ca14
06:12:37  27  ,clse-avg16 ca16
06:12:37  28  ,clse-avg18 ca18
06:12:37  29  -- clse relation to moving-max
06:12:37  30  ,clse-max4  cx4
06:12:37  31  ,clse-max6  cx6
06:12:37  32  ,clse-max8  cx8
06:12:37  33  ,clse-max10 cx10
06:12:37  34  ,clse-max12 cx12
06:12:37  35  ,clse-max14 cx14
06:12:37  36  ,clse-max16 cx16
06:12:37  37  ,clse-max18 cx18
06:12:37  38  -- Derive more attributes.
06:12:37  39  -- I want to use CORR() here to help SVM see the shape of the series.
06:12:37  40  -- But COVAR_POP is more stable:
06:12:37  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
06:12:37  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
06:12:37  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
06:12:37  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
06:12:37  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
06:12:37  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
06:12:37  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
06:12:37  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
06:12:37  49  -- Derive date related attributes:
06:12:37  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
06:12:37  51  ,0+TO_CHAR(ydate,'D')d
06:12:37  52  ,0+TO_CHAR(ydate,'W')w
06:12:37  53  -- mpm stands for minutes-past-midnight:
06:12:37  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
06:12:37  55  -- mph stands for minutes-past-hour:
06:12:37  56  ,0+TO_CHAR(ydate,'MI')mph
06:12:37  57  FROM svm6102
06:12:37  58  ORDER BY ydate
06:12:37  59  /

Table created.

Elapsed: 00:00:02.49
06:12:39 SQL> 
06:12:39 SQL> -- rpt
06:12:39 SQL> 
06:12:39 SQL> SELECT
06:12:39   2  pair
06:12:39   3  ,COUNT(pair)
06:12:39   4  ,MIN(clse),MAX(clse)
06:12:39   5  ,MIN(ydate),MAX(ydate)
06:12:39   6  FROM svm6122
06:12:39   7  GROUP BY pair
06:12:39   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_usd       19838    1.29735	   1.4273 2010-09-27 06:15:01 2010-12-31 06:05:00

Elapsed: 00:00:00.08
06:12:39 SQL> 
06:12:39 SQL> -- Prepare for derivation of NTILE based params:
06:12:39 SQL> 
06:12:39 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.32
06:12:40 SQL> CREATE TABLE svm6142 COMPRESS AS
06:12:40   2  SELECT
06:12:40   3  pair
06:12:40   4  ,ydate
06:12:40   5  ,prdate
06:12:40   6  ,clse
06:12:40   7  ,g6
06:12:40   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
06:12:40   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
06:12:40  10  ,CASE WHEN trend IS NULL THEN 1
06:12:40  11  	    WHEN trend =0      THEN 1
06:12:40  12  	    ELSE trend END trend
06:12:40  13  ,cm4
06:12:40  14  ,cm6
06:12:40  15  ,cm8
06:12:40  16  ,cm10
06:12:40  17  ,cm12
06:12:40  18  ,cm14
06:12:40  19  ,cm16
06:12:40  20  ,cm18
06:12:40  21  --
06:12:40  22  ,ca4
06:12:40  23  ,ca6
06:12:40  24  ,ca8
06:12:40  25  ,ca10
06:12:40  26  ,ca12
06:12:40  27  ,ca14
06:12:40  28  ,ca16
06:12:40  29  ,ca18
06:12:40  30  --
06:12:40  31  ,cx4
06:12:40  32  ,cx6
06:12:40  33  ,cx8
06:12:40  34  ,cx10
06:12:40  35  ,cx12
06:12:40  36  ,cx14
06:12:40  37  ,cx16
06:12:40  38  ,cx18
06:12:40  39  --
06:12:40  40  ,crr4
06:12:40  41  ,crr6
06:12:40  42  ,crr8
06:12:40  43  ,crr10
06:12:40  44  ,crr12
06:12:40  45  ,crr14
06:12:40  46  ,crr16
06:12:40  47  ,crr18
06:12:40  48  --
06:12:40  49  ,hh
06:12:40  50  ,d
06:12:40  51  ,w
06:12:40  52  ,mpm
06:12:40  53  ,mph
06:12:40  54  FROM svm6122
06:12:40  55  ORDER BY ydate
06:12:40  56  /

Table created.

Elapsed: 00:00:00.43
06:12:40 SQL> 
06:12:40 SQL> -- rpt
06:12:40 SQL> 
06:12:40 SQL> SELECT
06:12:40   2  pair
06:12:40   3  ,trend
06:12:40   4  ,gatt
06:12:40   5  ,COUNT(pair)
06:12:40   6  ,AVG(g6)
06:12:40   7  FROM svm6142
06:12:40   8  GROUP BY pair,trend,gatt
06:12:40   9  ORDER BY pair,trend,gatt
06:12:40  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6053 -.00310409
eur_usd 	-1 up	      3735  .00450179
eur_usd 	 1 nup	      6089 -.00307055
eur_usd 	 1 up	      3889 .005018019
eur_usd 	 1		72

Elapsed: 00:00:00.04
06:12:40 SQL> 
06:12:40 SQL> 
06:12:40 SQL> -- Derive NTILE based params:
06:12:40 SQL> 
06:12:40 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.99
06:12:41 SQL> CREATE TABLE svm6162 COMPRESS AS
06:12:41   2  SELECT
06:12:41   3  pair
06:12:41   4  ,ydate
06:12:41   5  ,prdate
06:12:41   6  ,clse
06:12:41   7  ,g6
06:12:41   8  ,gatt
06:12:41   9  ,gattn
06:12:41  10  ,trend
06:12:41  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
06:12:41  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
06:12:41  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
06:12:41  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
06:12:41  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
06:12:41  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
06:12:41  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
06:12:41  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
06:12:41  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
06:12:41  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
06:12:41  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
06:12:41  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
06:12:41  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
06:12:41  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
06:12:41  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
06:12:41  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
06:12:41  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
06:12:41  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
06:12:41  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
06:12:41  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
06:12:41  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
06:12:41  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
06:12:41  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
06:12:41  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
06:12:41  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
06:12:41  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
06:12:41  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
06:12:41  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
06:12:41  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
06:12:41  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
06:12:41  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
06:12:41  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
06:12:41  43  ,hh  att32
06:12:41  44  ,d   att33
06:12:41  45  ,w   att34
06:12:41  46  ,mpm att35
06:12:41  47  ,mph att36
06:12:41  48  ,trend att37
06:12:41  49  FROM svm6142
06:12:41  50  ORDER BY ydate
06:12:41  51  /

Table created.

Elapsed: 00:00:04.75
06:12:46 SQL> 
06:12:46 SQL> -- rpt
06:12:46 SQL> 
06:12:46 SQL> SELECT
06:12:46   2  pair
06:12:46   3  ,trend
06:12:46   4  ,gatt
06:12:46   5  ,COUNT(pair)
06:12:46   6  ,AVG(g6)
06:12:46   7  FROM svm6162
06:12:46   8  GROUP BY pair,trend,gatt
06:12:46   9  ORDER BY pair,trend,gatt
06:12:46  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6053 -.00310409
eur_usd 	-1 up	      3735  .00450179
eur_usd 	 1 nup	      6089 -.00307055
eur_usd 	 1 up	      3889 .005018019
eur_usd 	 1		72

Elapsed: 00:00:00.02
06:12:46 SQL> 
06:12:46 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.30
06:12:46 SQL> CREATE TABLE modsrc COMPRESS AS
06:12:46   2  SELECT
06:12:46   3  pair
06:12:46   4  ,ydate
06:12:46   5  ,prdate
06:12:46   6  ,trend
06:12:46   7  ,g6
06:12:46   8  ,gatt
06:12:46   9  ,gattn
06:12:46  10  FROM svm6162
06:12:46  11  /

Table created.

Elapsed: 00:00:00.08
06:12:46 SQL> 
06:12:46 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
06:12:46 SQL> 
06:12:46 SQL> DROP   TABLE eur_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
06:12:47 SQL> CREATE TABLE eur_ms610 COMPRESS AS
06:12:47   2  SELECT
06:12:47   3  ydate
06:12:47   4  ,trend eur_trend
06:12:47   5  ,g6    eur_g6
06:12:47   6  ,gatt  eur_gatt
06:12:47   7  ,gattn eur_gattn
06:12:47   8  FROM modsrc
06:12:47   9  /

Table created.

Elapsed: 00:00:00.07
06:12:47 SQL> 
06:12:47 SQL> ANALYZE TABLE eur_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
06:12:47 SQL> 
06:12:47 SQL> -- I need a copy of the attributes:
06:12:47 SQL> 
06:12:47 SQL> 
06:12:47 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.06
06:12:47 SQL> CREATE TABLE eur_att COMPRESS AS
06:12:47   2  SELECT
06:12:47   3  ydate
06:12:47   4  ,att00 eur_att00
06:12:47   5  ,att01 eur_att01
06:12:47   6  ,att02 eur_att02
06:12:47   7  ,att03 eur_att03
06:12:47   8  ,att04 eur_att04
06:12:47   9  ,att05 eur_att05
06:12:47  10  ,att06 eur_att06
06:12:47  11  ,att07 eur_att07
06:12:47  12  ,att08 eur_att08
06:12:47  13  ,att09 eur_att09
06:12:47  14  ,att10 eur_att10
06:12:47  15  ,att11 eur_att11
06:12:47  16  ,att12 eur_att12
06:12:47  17  ,att13 eur_att13
06:12:47  18  ,att14 eur_att14
06:12:47  19  ,att15 eur_att15
06:12:47  20  ,att16 eur_att16
06:12:47  21  ,att17 eur_att17
06:12:47  22  ,att18 eur_att18
06:12:47  23  ,att19 eur_att19
06:12:47  24  ,att20 eur_att20
06:12:47  25  ,att21 eur_att21
06:12:47  26  ,att22 eur_att22
06:12:47  27  ,att23 eur_att23
06:12:47  28  ,att24 eur_att24
06:12:47  29  ,att25 eur_att25
06:12:47  30  ,att26 eur_att26
06:12:47  31  ,att27 eur_att27
06:12:47  32  ,att28 eur_att28
06:12:47  33  ,att29 eur_att29
06:12:47  34  ,att30 eur_att30
06:12:47  35  ,att31 eur_att31
06:12:47  36  ,att32 eur_att32
06:12:47  37  ,att33 eur_att33
06:12:47  38  ,att34 eur_att34
06:12:47  39  ,att35 eur_att35
06:12:47  40  ,att36 eur_att36
06:12:47  41  ,att37 eur_att37
06:12:47  42  FROM svm6162
06:12:47  43  /

Table created.

Elapsed: 00:00:00.17
06:12:47 SQL> 
06:12:47 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
06:12:47 SQL> 
06:12:47 SQL> -- rpt
06:12:47 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19838

Elapsed: 00:00:00.88
06:12:48 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     19838

Elapsed: 00:00:00.00
06:12:48 SQL> 
06:12:48 SQL> --
06:12:48 SQL> -- aud610.sql
06:12:48 SQL> --
06:12:48 SQL> 
06:12:48 SQL> -- Creates views and tables for backtesting a forex SVM strategy
06:12:48 SQL> 
06:12:48 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.51
06:12:49 SQL> 
06:12:49 SQL> -- I created di5min here:
06:12:49 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
06:12:49 SQL> 
06:12:49 SQL> CREATE OR REPLACE VIEW svm6102 AS
06:12:49   2  SELECT
06:12:49   3  pair
06:12:49   4  ,ydate
06:12:49   5  ,prdate
06:12:49   6  ,rownum rnum -- acts as t in my time-series
06:12:49   7  ,clse
06:12:49   8  -- Derive a bunch of attributes from clse, the latest price:
06:12:49   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
06:12:49  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
06:12:49  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
06:12:49  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
06:12:49  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
06:12:49  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
06:12:49  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
06:12:49  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
06:12:49  17  --
06:12:49  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
06:12:49  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
06:12:49  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
06:12:49  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
06:12:49  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
06:12:49  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
06:12:49  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
06:12:49  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
06:12:49  26  --
06:12:49  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
06:12:49  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
06:12:49  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
06:12:49  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
06:12:49  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
06:12:49  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
06:12:49  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
06:12:49  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
06:12:49  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
06:12:49  36  FROM di5min WHERE pair LIKE'%aud%'
06:12:49  37  AND ydate > sysdate - 95
06:12:49  38  ORDER BY ydate
06:12:49  39  /

View created.

Elapsed: 00:00:00.03
06:12:49 SQL> 
06:12:49 SQL> -- rpt
06:12:49 SQL> 
06:12:49 SQL> SELECT
06:12:49   2  pair
06:12:49   3  ,COUNT(pair)
06:12:49   4  ,MIN(clse),MAX(clse)
06:12:49   5  ,MIN(avg6),MAX(avg6)
06:12:49   6  ,MIN(ydate),MAX(ydate)
06:12:49   7  FROM svm6102
06:12:49   8  GROUP BY pair
06:12:49   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
aud_usd       19835	.95405	1.0195625 .957141438 1.01819366 2010-09-27 06:15:01 2010-12-31 06:05:00

Elapsed: 00:00:00.86
06:12:50 SQL> 
06:12:50 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
06:12:50 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.23
06:12:50 SQL> CREATE TABLE svm6122 COMPRESS AS
06:12:50   2  SELECT
06:12:50   3  pair
06:12:50   4  ,ydate
06:12:50   5  ,prdate
06:12:50   6  ,clse
06:12:50   7  -- g6 is important. I want to predict g6:
06:12:50   8  ,ld6 - clse g6
06:12:50   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
06:12:50  10  -- I want more attributes from the ones I derived above:
06:12:50  11  -- clse relation to moving-min
06:12:50  12  ,clse-min4  cm4
06:12:50  13  ,clse-min6  cm6
06:12:50  14  ,clse-min8  cm8
06:12:50  15  ,clse-min10 cm10
06:12:50  16  ,clse-min12 cm12
06:12:50  17  ,clse-min14 cm14
06:12:50  18  ,clse-min16 cm16
06:12:50  19  ,clse-min18 cm18
06:12:50  20  -- clse relation to moving-avg
06:12:50  21  ,clse-avg4  ca4
06:12:50  22  ,clse-avg6  ca6
06:12:50  23  ,clse-avg8  ca8
06:12:50  24  ,clse-avg10 ca10
06:12:50  25  ,clse-avg12 ca12
06:12:50  26  ,clse-avg14 ca14
06:12:50  27  ,clse-avg16 ca16
06:12:50  28  ,clse-avg18 ca18
06:12:50  29  -- clse relation to moving-max
06:12:50  30  ,clse-max4  cx4
06:12:50  31  ,clse-max6  cx6
06:12:50  32  ,clse-max8  cx8
06:12:50  33  ,clse-max10 cx10
06:12:50  34  ,clse-max12 cx12
06:12:50  35  ,clse-max14 cx14
06:12:50  36  ,clse-max16 cx16
06:12:50  37  ,clse-max18 cx18
06:12:50  38  -- Derive more attributes.
06:12:50  39  -- I want to use CORR() here to help SVM see the shape of the series.
06:12:50  40  -- But COVAR_POP is more stable:
06:12:50  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
06:12:50  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
06:12:50  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
06:12:50  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
06:12:50  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
06:12:50  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
06:12:50  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
06:12:50  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
06:12:50  49  -- Derive date related attributes:
06:12:50  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
06:12:50  51  ,0+TO_CHAR(ydate,'D')d
06:12:50  52  ,0+TO_CHAR(ydate,'W')w
06:12:50  53  -- mpm stands for minutes-past-midnight:
06:12:50  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
06:12:50  55  -- mph stands for minutes-past-hour:
06:12:50  56  ,0+TO_CHAR(ydate,'MI')mph
06:12:50  57  FROM svm6102
06:12:50  58  ORDER BY ydate
06:12:50  59  /

Table created.

Elapsed: 00:00:02.08
06:12:52 SQL> 
06:12:52 SQL> -- rpt
06:12:52 SQL> 
06:12:52 SQL> SELECT
06:12:52   2  pair
06:12:52   3  ,COUNT(pair)
06:12:52   4  ,MIN(clse),MAX(clse)
06:12:52   5  ,MIN(ydate),MAX(ydate)
06:12:52   6  FROM svm6122
06:12:52   7  GROUP BY pair
06:12:52   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
aud_usd       19835	.95405	1.0195625 2010-09-27 06:15:01 2010-12-31 06:05:00

Elapsed: 00:00:00.04
06:12:52 SQL> 
06:12:52 SQL> -- Prepare for derivation of NTILE based params:
06:12:52 SQL> 
06:12:52 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.25
06:12:52 SQL> CREATE TABLE svm6142 COMPRESS AS
06:12:52   2  SELECT
06:12:52   3  pair
06:12:52   4  ,ydate
06:12:52   5  ,prdate
06:12:52   6  ,clse
06:12:52   7  ,g6
06:12:52   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
06:12:52   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
06:12:52  10  ,CASE WHEN trend IS NULL THEN 1
06:12:52  11  	    WHEN trend =0      THEN 1
06:12:52  12  	    ELSE trend END trend
06:12:52  13  ,cm4
06:12:52  14  ,cm6
06:12:52  15  ,cm8
06:12:52  16  ,cm10
06:12:52  17  ,cm12
06:12:52  18  ,cm14
06:12:52  19  ,cm16
06:12:52  20  ,cm18
06:12:52  21  --
06:12:52  22  ,ca4
06:12:52  23  ,ca6
06:12:52  24  ,ca8
06:12:52  25  ,ca10
06:12:52  26  ,ca12
06:12:52  27  ,ca14
06:12:52  28  ,ca16
06:12:52  29  ,ca18
06:12:52  30  --
06:12:52  31  ,cx4
06:12:52  32  ,cx6
06:12:52  33  ,cx8
06:12:52  34  ,cx10
06:12:52  35  ,cx12
06:12:52  36  ,cx14
06:12:52  37  ,cx16
06:12:52  38  ,cx18
06:12:52  39  --
06:12:52  40  ,crr4
06:12:52  41  ,crr6
06:12:52  42  ,crr8
06:12:52  43  ,crr10
06:12:52  44  ,crr12
06:12:52  45  ,crr14
06:12:52  46  ,crr16
06:12:52  47  ,crr18
06:12:52  48  --
06:12:52  49  ,hh
06:12:52  50  ,d
06:12:52  51  ,w
06:12:52  52  ,mpm
06:12:52  53  ,mph
06:12:52  54  FROM svm6122
06:12:52  55  ORDER BY ydate
06:12:52  56  /

Table created.

Elapsed: 00:00:00.35
06:12:53 SQL> 
06:12:53 SQL> -- rpt
06:12:53 SQL> 
06:12:53 SQL> SELECT
06:12:53   2  pair
06:12:53   3  ,trend
06:12:53   4  ,gatt
06:12:53   5  ,COUNT(pair)
06:12:53   6  ,AVG(g6)
06:12:53   7  FROM svm6142
06:12:53   8  GROUP BY pair,trend,gatt
06:12:53   9  ORDER BY pair,trend,gatt
06:12:53  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5256 -.00212541
aud_usd 	-1 up	      3852 .003733999
aud_usd 	-1		26
aud_usd 	 1 nup	      6857 -.00209341
aud_usd 	 1 up	      3798 .004018135
aud_usd 	 1		46

6 rows selected.

Elapsed: 00:00:00.04
06:12:53 SQL> 
06:12:53 SQL> 
06:12:53 SQL> -- Derive NTILE based params:
06:12:53 SQL> 
06:12:53 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.17
06:12:53 SQL> CREATE TABLE svm6162 COMPRESS AS
06:12:53   2  SELECT
06:12:53   3  pair
06:12:53   4  ,ydate
06:12:53   5  ,prdate
06:12:53   6  ,clse
06:12:53   7  ,g6
06:12:53   8  ,gatt
06:12:53   9  ,gattn
06:12:53  10  ,trend
06:12:53  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
06:12:53  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
06:12:53  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
06:12:53  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
06:12:53  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
06:12:53  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
06:12:53  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
06:12:53  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
06:12:53  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
06:12:53  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
06:12:53  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
06:12:53  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
06:12:53  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
06:12:53  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
06:12:53  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
06:12:53  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
06:12:53  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
06:12:53  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
06:12:53  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
06:12:53  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
06:12:53  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
06:12:53  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
06:12:53  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
06:12:53  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
06:12:53  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
06:12:53  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
06:12:53  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
06:12:53  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
06:12:53  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
06:12:53  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
06:12:53  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
06:12:53  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
06:12:53  43  ,hh  att32
06:12:53  44  ,d   att33
06:12:53  45  ,w   att34
06:12:53  46  ,mpm att35
06:12:53  47  ,mph att36
06:12:53  48  ,trend att37
06:12:53  49  FROM svm6142
06:12:53  50  ORDER BY ydate
06:12:53  51  /

Table created.

Elapsed: 00:00:04.77
06:12:58 SQL> 
06:12:58 SQL> -- rpt
06:12:58 SQL> 
06:12:58 SQL> SELECT
06:12:58   2  pair
06:12:58   3  ,trend
06:12:58   4  ,gatt
06:12:58   5  ,COUNT(pair)
06:12:58   6  ,AVG(g6)
06:12:58   7  FROM svm6162
06:12:58   8  GROUP BY pair,trend,gatt
06:12:58   9  ORDER BY pair,trend,gatt
06:12:58  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5256 -.00212541
aud_usd 	-1 up	      3852 .003733999
aud_usd 	-1		26
aud_usd 	 1 nup	      6857 -.00209341
aud_usd 	 1 up	      3798 .004018135
aud_usd 	 1		46

6 rows selected.

Elapsed: 00:00:00.04
06:12:58 SQL> 
06:12:58 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.16
06:12:58 SQL> CREATE TABLE modsrc COMPRESS AS
06:12:58   2  SELECT
06:12:58   3  pair
06:12:58   4  ,ydate
06:12:58   5  ,prdate
06:12:58   6  ,trend
06:12:58   7  ,g6
06:12:58   8  ,gatt
06:12:58   9  ,gattn
06:12:58  10  FROM svm6162
06:12:58  11  /

Table created.

Elapsed: 00:00:00.08
06:12:58 SQL> 
06:12:58 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
06:12:58 SQL> 
06:12:58 SQL> DROP   TABLE aud_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
06:12:58 SQL> CREATE TABLE aud_ms610 COMPRESS AS
06:12:58   2  SELECT
06:12:58   3  ydate
06:12:58   4  ,trend aud_trend
06:12:58   5  ,g6    aud_g6
06:12:58   6  ,gatt  aud_gatt
06:12:58   7  ,gattn aud_gattn
06:12:58   8  FROM modsrc
06:12:58   9  /

Table created.

Elapsed: 00:00:00.06
06:12:58 SQL> 
06:12:58 SQL> ANALYZE TABLE aud_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
06:12:58 SQL> 
06:12:58 SQL> -- I need a copy of the attributes:
06:12:58 SQL> 
06:12:58 SQL> 
06:12:58 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.06
06:12:58 SQL> CREATE TABLE aud_att COMPRESS AS
06:12:58   2  SELECT
06:12:58   3  ydate
06:12:58   4  ,att00 aud_att00
06:12:58   5  ,att01 aud_att01
06:12:58   6  ,att02 aud_att02
06:12:58   7  ,att03 aud_att03
06:12:58   8  ,att04 aud_att04
06:12:58   9  ,att05 aud_att05
06:12:58  10  ,att06 aud_att06
06:12:58  11  ,att07 aud_att07
06:12:58  12  ,att08 aud_att08
06:12:58  13  ,att09 aud_att09
06:12:58  14  ,att10 aud_att10
06:12:58  15  ,att11 aud_att11
06:12:58  16  ,att12 aud_att12
06:12:58  17  ,att13 aud_att13
06:12:58  18  ,att14 aud_att14
06:12:58  19  ,att15 aud_att15
06:12:58  20  ,att16 aud_att16
06:12:58  21  ,att17 aud_att17
06:12:58  22  ,att18 aud_att18
06:12:58  23  ,att19 aud_att19
06:12:58  24  ,att20 aud_att20
06:12:58  25  ,att21 aud_att21
06:12:58  26  ,att22 aud_att22
06:12:58  27  ,att23 aud_att23
06:12:58  28  ,att24 aud_att24
06:12:58  29  ,att25 aud_att25
06:12:58  30  ,att26 aud_att26
06:12:58  31  ,att27 aud_att27
06:12:58  32  ,att28 aud_att28
06:12:58  33  ,att29 aud_att29
06:12:58  34  ,att30 aud_att30
06:12:58  35  ,att31 aud_att31
06:12:58  36  ,att32 aud_att32
06:12:58  37  ,att33 aud_att33
06:12:58  38  ,att34 aud_att34
06:12:58  39  ,att35 aud_att35
06:12:58  40  ,att36 aud_att36
06:12:58  41  ,att37 aud_att37
06:12:58  42  FROM svm6162
06:12:58  43  /

Table created.

Elapsed: 00:00:00.18
06:12:59 SQL> 
06:12:59 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
06:12:59 SQL> 
06:12:59 SQL> -- rpt
06:12:59 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19835

Elapsed: 00:00:00.88
06:13:00 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     19835

Elapsed: 00:00:00.00
06:13:00 SQL> 
06:13:00 SQL> --
06:13:00 SQL> -- gbp610.sql
06:13:00 SQL> --
06:13:00 SQL> 
06:13:00 SQL> -- Creates views and tables for backtesting a forex SVM strategy
06:13:00 SQL> 
06:13:00 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.36
06:13:00 SQL> 
06:13:00 SQL> -- I created di5min here:
06:13:00 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
06:13:00 SQL> 
06:13:00 SQL> CREATE OR REPLACE VIEW svm6102 AS
06:13:00   2  SELECT
06:13:00   3  pair
06:13:00   4  ,ydate
06:13:00   5  ,prdate
06:13:00   6  ,rownum rnum -- acts as t in my time-series
06:13:00   7  ,clse
06:13:00   8  -- Derive a bunch of attributes from clse, the latest price:
06:13:00   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
06:13:00  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
06:13:00  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
06:13:00  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
06:13:00  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
06:13:00  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
06:13:00  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
06:13:00  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
06:13:00  17  --
06:13:00  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
06:13:00  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
06:13:00  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
06:13:00  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
06:13:00  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
06:13:00  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
06:13:00  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
06:13:00  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
06:13:00  26  --
06:13:00  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
06:13:00  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
06:13:00  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
06:13:00  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
06:13:00  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
06:13:00  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
06:13:00  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
06:13:00  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
06:13:00  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
06:13:00  36  FROM di5min WHERE pair LIKE'%gbp%'
06:13:00  37  AND ydate > sysdate - 95
06:13:00  38  ORDER BY ydate
06:13:00  39  /

View created.

Elapsed: 00:00:00.05
06:13:00 SQL> 
06:13:00 SQL> -- rpt
06:13:00 SQL> 
06:13:00 SQL> SELECT
06:13:00   2  pair
06:13:00   3  ,COUNT(pair)
06:13:00   4  ,MIN(clse),MAX(clse)
06:13:00   5  ,MIN(avg6),MAX(avg6)
06:13:00   6  ,MIN(ydate),MAX(ydate)
06:13:00   7  FROM svm6102
06:13:00   8  GROUP BY pair
06:13:00   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
gbp_usd       19837   1.535325	   1.6295 1.53696747 1.62716986 2010-09-27 06:15:01 2010-12-31 06:05:00

Elapsed: 00:00:00.86
06:13:01 SQL> 
06:13:01 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
06:13:01 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.26
06:13:02 SQL> CREATE TABLE svm6122 COMPRESS AS
06:13:02   2  SELECT
06:13:02   3  pair
06:13:02   4  ,ydate
06:13:02   5  ,prdate
06:13:02   6  ,clse
06:13:02   7  -- g6 is important. I want to predict g6:
06:13:02   8  ,ld6 - clse g6
06:13:02   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
06:13:02  10  -- I want more attributes from the ones I derived above:
06:13:02  11  -- clse relation to moving-min
06:13:02  12  ,clse-min4  cm4
06:13:02  13  ,clse-min6  cm6
06:13:02  14  ,clse-min8  cm8
06:13:02  15  ,clse-min10 cm10
06:13:02  16  ,clse-min12 cm12
06:13:02  17  ,clse-min14 cm14
06:13:02  18  ,clse-min16 cm16
06:13:02  19  ,clse-min18 cm18
06:13:02  20  -- clse relation to moving-avg
06:13:02  21  ,clse-avg4  ca4
06:13:02  22  ,clse-avg6  ca6
06:13:02  23  ,clse-avg8  ca8
06:13:02  24  ,clse-avg10 ca10
06:13:02  25  ,clse-avg12 ca12
06:13:02  26  ,clse-avg14 ca14
06:13:02  27  ,clse-avg16 ca16
06:13:02  28  ,clse-avg18 ca18
06:13:02  29  -- clse relation to moving-max
06:13:02  30  ,clse-max4  cx4
06:13:02  31  ,clse-max6  cx6
06:13:02  32  ,clse-max8  cx8
06:13:02  33  ,clse-max10 cx10
06:13:02  34  ,clse-max12 cx12
06:13:02  35  ,clse-max14 cx14
06:13:02  36  ,clse-max16 cx16
06:13:02  37  ,clse-max18 cx18
06:13:02  38  -- Derive more attributes.
06:13:02  39  -- I want to use CORR() here to help SVM see the shape of the series.
06:13:02  40  -- But COVAR_POP is more stable:
06:13:02  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
06:13:02  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
06:13:02  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
06:13:02  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
06:13:02  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
06:13:02  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
06:13:02  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
06:13:02  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
06:13:02  49  -- Derive date related attributes:
06:13:02  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
06:13:02  51  ,0+TO_CHAR(ydate,'D')d
06:13:02  52  ,0+TO_CHAR(ydate,'W')w
06:13:02  53  -- mpm stands for minutes-past-midnight:
06:13:02  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
06:13:02  55  -- mph stands for minutes-past-hour:
06:13:02  56  ,0+TO_CHAR(ydate,'MI')mph
06:13:02  57  FROM svm6102
06:13:02  58  ORDER BY ydate
06:13:02  59  /

Table created.

Elapsed: 00:00:02.05
06:13:04 SQL> 
06:13:04 SQL> -- rpt
06:13:04 SQL> 
06:13:04 SQL> SELECT
06:13:04   2  pair
06:13:04   3  ,COUNT(pair)
06:13:04   4  ,MIN(clse),MAX(clse)
06:13:04   5  ,MIN(ydate),MAX(ydate)
06:13:04   6  FROM svm6122
06:13:04   7  GROUP BY pair
06:13:04   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
gbp_usd       19837   1.535325	   1.6295 2010-09-27 06:15:01 2010-12-31 06:05:00

Elapsed: 00:00:00.04
06:13:04 SQL> 
06:13:04 SQL> -- Prepare for derivation of NTILE based params:
06:13:04 SQL> 
06:13:04 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.17
06:13:04 SQL> CREATE TABLE svm6142 COMPRESS AS
06:13:04   2  SELECT
06:13:04   3  pair
06:13:04   4  ,ydate
06:13:04   5  ,prdate
06:13:04   6  ,clse
06:13:04   7  ,g6
06:13:04   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
06:13:04   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
06:13:04  10  ,CASE WHEN trend IS NULL THEN 1
06:13:04  11  	    WHEN trend =0      THEN 1
06:13:04  12  	    ELSE trend END trend
06:13:04  13  ,cm4
06:13:04  14  ,cm6
06:13:04  15  ,cm8
06:13:04  16  ,cm10
06:13:04  17  ,cm12
06:13:04  18  ,cm14
06:13:04  19  ,cm16
06:13:04  20  ,cm18
06:13:04  21  --
06:13:04  22  ,ca4
06:13:04  23  ,ca6
06:13:04  24  ,ca8
06:13:04  25  ,ca10
06:13:04  26  ,ca12
06:13:04  27  ,ca14
06:13:04  28  ,ca16
06:13:04  29  ,ca18
06:13:04  30  --
06:13:04  31  ,cx4
06:13:04  32  ,cx6
06:13:04  33  ,cx8
06:13:04  34  ,cx10
06:13:04  35  ,cx12
06:13:04  36  ,cx14
06:13:04  37  ,cx16
06:13:04  38  ,cx18
06:13:04  39  --
06:13:04  40  ,crr4
06:13:04  41  ,crr6
06:13:04  42  ,crr8
06:13:04  43  ,crr10
06:13:04  44  ,crr12
06:13:04  45  ,crr14
06:13:04  46  ,crr16
06:13:04  47  ,crr18
06:13:04  48  --
06:13:04  49  ,hh
06:13:04  50  ,d
06:13:04  51  ,w
06:13:04  52  ,mpm
06:13:04  53  ,mph
06:13:04  54  FROM svm6122
06:13:04  55  ORDER BY ydate
06:13:04  56  /

Table created.

Elapsed: 00:00:00.36
06:13:04 SQL> 
06:13:04 SQL> -- rpt
06:13:04 SQL> 
06:13:04 SQL> SELECT
06:13:04   2  pair
06:13:04   3  ,trend
06:13:04   4  ,gatt
06:13:04   5  ,COUNT(pair)
06:13:04   6  ,AVG(g6)
06:13:04   7  FROM svm6142
06:13:04   8  GROUP BY pair,trend,gatt
06:13:04   9  ORDER BY pair,trend,gatt
06:13:04  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6344 -.00262441
gbp_usd 	-1 up	      3631 .004279255
gbp_usd 	 1 nup	      6295 -.00267677
gbp_usd 	 1 up	      3495 .004353151
gbp_usd 	 1		72

Elapsed: 00:00:00.03
06:13:04 SQL> 
06:13:04 SQL> 
06:13:04 SQL> -- Derive NTILE based params:
06:13:04 SQL> 
06:13:04 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.20
06:13:04 SQL> CREATE TABLE svm6162 COMPRESS AS
06:13:04   2  SELECT
06:13:04   3  pair
06:13:04   4  ,ydate
06:13:04   5  ,prdate
06:13:04   6  ,clse
06:13:04   7  ,g6
06:13:04   8  ,gatt
06:13:04   9  ,gattn
06:13:04  10  ,trend
06:13:04  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
06:13:04  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
06:13:04  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
06:13:04  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
06:13:04  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
06:13:04  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
06:13:04  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
06:13:04  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
06:13:04  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
06:13:04  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
06:13:04  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
06:13:04  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
06:13:04  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
06:13:04  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
06:13:04  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
06:13:04  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
06:13:04  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
06:13:04  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
06:13:04  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
06:13:04  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
06:13:04  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
06:13:04  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
06:13:04  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
06:13:04  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
06:13:04  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
06:13:04  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
06:13:04  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
06:13:04  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
06:13:04  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
06:13:04  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
06:13:04  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
06:13:04  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
06:13:04  43  ,hh  att32
06:13:04  44  ,d   att33
06:13:04  45  ,w   att34
06:13:04  46  ,mpm att35
06:13:04  47  ,mph att36
06:13:04  48  ,trend att37
06:13:04  49  FROM svm6142
06:13:04  50  ORDER BY ydate
06:13:04  51  /

Table created.

Elapsed: 00:00:04.76
06:13:09 SQL> 
06:13:09 SQL> -- rpt
06:13:09 SQL> 
06:13:09 SQL> SELECT
06:13:09   2  pair
06:13:09   3  ,trend
06:13:09   4  ,gatt
06:13:09   5  ,COUNT(pair)
06:13:09   6  ,AVG(g6)
06:13:09   7  FROM svm6162
06:13:09   8  GROUP BY pair,trend,gatt
06:13:09   9  ORDER BY pair,trend,gatt
06:13:09  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6344 -.00262441
gbp_usd 	-1 up	      3631 .004279255
gbp_usd 	 1 nup	      6295 -.00267677
gbp_usd 	 1 up	      3495 .004353151
gbp_usd 	 1		72

Elapsed: 00:00:00.03
06:13:09 SQL> 
06:13:09 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.19
06:13:09 SQL> CREATE TABLE modsrc COMPRESS AS
06:13:09   2  SELECT
06:13:09   3  pair
06:13:09   4  ,ydate
06:13:09   5  ,prdate
06:13:09   6  ,trend
06:13:09   7  ,g6
06:13:09   8  ,gatt
06:13:09   9  ,gattn
06:13:09  10  FROM svm6162
06:13:09  11  /

Table created.

Elapsed: 00:00:00.07
06:13:09 SQL> 
06:13:09 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
06:13:10 SQL> 
06:13:10 SQL> DROP   TABLE gbp_ms610 ;

Table dropped.

Elapsed: 00:00:00.03
06:13:10 SQL> CREATE TABLE gbp_ms610 COMPRESS AS
06:13:10   2  SELECT
06:13:10   3  ydate
06:13:10   4  ,trend gbp_trend
06:13:10   5  ,g6    gbp_g6
06:13:10   6  ,gatt  gbp_gatt
06:13:10   7  ,gattn gbp_gattn
06:13:10   8  FROM modsrc
06:13:10   9  /

Table created.

Elapsed: 00:00:00.07
06:13:10 SQL> 
06:13:10 SQL> ANALYZE TABLE gbp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
06:13:10 SQL> 
06:13:10 SQL> -- I need a copy of the attributes:
06:13:10 SQL> 
06:13:10 SQL> 
06:13:10 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.05
06:13:10 SQL> CREATE TABLE gbp_att COMPRESS AS
06:13:10   2  SELECT
06:13:10   3  ydate
06:13:10   4  ,att00 gbp_att00
06:13:10   5  ,att01 gbp_att01
06:13:10   6  ,att02 gbp_att02
06:13:10   7  ,att03 gbp_att03
06:13:10   8  ,att04 gbp_att04
06:13:10   9  ,att05 gbp_att05
06:13:10  10  ,att06 gbp_att06
06:13:10  11  ,att07 gbp_att07
06:13:10  12  ,att08 gbp_att08
06:13:10  13  ,att09 gbp_att09
06:13:10  14  ,att10 gbp_att10
06:13:10  15  ,att11 gbp_att11
06:13:10  16  ,att12 gbp_att12
06:13:10  17  ,att13 gbp_att13
06:13:10  18  ,att14 gbp_att14
06:13:10  19  ,att15 gbp_att15
06:13:10  20  ,att16 gbp_att16
06:13:10  21  ,att17 gbp_att17
06:13:10  22  ,att18 gbp_att18
06:13:10  23  ,att19 gbp_att19
06:13:10  24  ,att20 gbp_att20
06:13:10  25  ,att21 gbp_att21
06:13:10  26  ,att22 gbp_att22
06:13:10  27  ,att23 gbp_att23
06:13:10  28  ,att24 gbp_att24
06:13:10  29  ,att25 gbp_att25
06:13:10  30  ,att26 gbp_att26
06:13:10  31  ,att27 gbp_att27
06:13:10  32  ,att28 gbp_att28
06:13:10  33  ,att29 gbp_att29
06:13:10  34  ,att30 gbp_att30
06:13:10  35  ,att31 gbp_att31
06:13:10  36  ,att32 gbp_att32
06:13:10  37  ,att33 gbp_att33
06:13:10  38  ,att34 gbp_att34
06:13:10  39  ,att35 gbp_att35
06:13:10  40  ,att36 gbp_att36
06:13:10  41  ,att37 gbp_att37
06:13:10  42  FROM svm6162
06:13:10  43  /

Table created.

Elapsed: 00:00:00.17
06:13:10 SQL> 
06:13:10 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.82
06:13:11 SQL> 
06:13:11 SQL> -- rpt
06:13:11 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19837

Elapsed: 00:00:00.87
06:13:12 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     19837

Elapsed: 00:00:00.00
06:13:12 SQL> 
06:13:12 SQL> --
06:13:12 SQL> -- jpy610.sql
06:13:12 SQL> --
06:13:12 SQL> 
06:13:12 SQL> -- Creates views and tables for backtesting a forex SVM strategy
06:13:12 SQL> 
06:13:12 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.59
06:13:12 SQL> 
06:13:12 SQL> -- I created di5min here:
06:13:12 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
06:13:12 SQL> 
06:13:12 SQL> CREATE OR REPLACE VIEW svm6102 AS
06:13:12   2  SELECT
06:13:12   3  pair
06:13:12   4  ,ydate
06:13:12   5  ,prdate
06:13:12   6  ,rownum rnum -- acts as t in my time-series
06:13:12   7  ,clse
06:13:12   8  -- Derive a bunch of attributes from clse, the latest price:
06:13:12   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
06:13:12  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
06:13:12  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
06:13:12  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
06:13:12  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
06:13:12  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
06:13:12  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
06:13:12  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
06:13:12  17  --
06:13:12  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
06:13:12  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
06:13:12  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
06:13:12  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
06:13:12  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
06:13:12  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
06:13:12  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
06:13:12  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
06:13:12  26  --
06:13:12  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
06:13:12  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
06:13:12  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
06:13:12  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
06:13:12  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
06:13:12  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
06:13:12  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
06:13:12  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
06:13:12  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
06:13:12  36  FROM di5min WHERE pair LIKE'%jpy%'
06:13:12  37  AND ydate > sysdate - 95
06:13:12  38  ORDER BY ydate
06:13:12  39  /

View created.

Elapsed: 00:00:00.05
06:13:13 SQL> 
06:13:13 SQL> -- rpt
06:13:13 SQL> 
06:13:13 SQL> SELECT
06:13:13   2  pair
06:13:13   3  ,COUNT(pair)
06:13:13   4  ,MIN(clse),MAX(clse)
06:13:13   5  ,MIN(avg6),MAX(avg6)
06:13:13   6  ,MIN(ydate),MAX(ydate)
06:13:13   7  FROM svm6102
06:13:13   8  GROUP BY pair
06:13:13   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_jpy       19835	 80.25	   84.485 80.3595205 84.3105479 2010-09-27 06:15:01 2010-12-31 06:05:00

Elapsed: 00:00:00.91
06:13:13 SQL> 
06:13:13 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
06:13:13 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.23
06:13:14 SQL> CREATE TABLE svm6122 COMPRESS AS
06:13:14   2  SELECT
06:13:14   3  pair
06:13:14   4  ,ydate
06:13:14   5  ,prdate
06:13:14   6  ,clse
06:13:14   7  -- g6 is important. I want to predict g6:
06:13:14   8  ,ld6 - clse g6
06:13:14   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
06:13:14  10  -- I want more attributes from the ones I derived above:
06:13:14  11  -- clse relation to moving-min
06:13:14  12  ,clse-min4  cm4
06:13:14  13  ,clse-min6  cm6
06:13:14  14  ,clse-min8  cm8
06:13:14  15  ,clse-min10 cm10
06:13:14  16  ,clse-min12 cm12
06:13:14  17  ,clse-min14 cm14
06:13:14  18  ,clse-min16 cm16
06:13:14  19  ,clse-min18 cm18
06:13:14  20  -- clse relation to moving-avg
06:13:14  21  ,clse-avg4  ca4
06:13:14  22  ,clse-avg6  ca6
06:13:14  23  ,clse-avg8  ca8
06:13:14  24  ,clse-avg10 ca10
06:13:14  25  ,clse-avg12 ca12
06:13:14  26  ,clse-avg14 ca14
06:13:14  27  ,clse-avg16 ca16
06:13:14  28  ,clse-avg18 ca18
06:13:14  29  -- clse relation to moving-max
06:13:14  30  ,clse-max4  cx4
06:13:14  31  ,clse-max6  cx6
06:13:14  32  ,clse-max8  cx8
06:13:14  33  ,clse-max10 cx10
06:13:14  34  ,clse-max12 cx12
06:13:14  35  ,clse-max14 cx14
06:13:14  36  ,clse-max16 cx16
06:13:14  37  ,clse-max18 cx18
06:13:14  38  -- Derive more attributes.
06:13:14  39  -- I want to use CORR() here to help SVM see the shape of the series.
06:13:14  40  -- But COVAR_POP is more stable:
06:13:14  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
06:13:14  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
06:13:14  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
06:13:14  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
06:13:14  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
06:13:14  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
06:13:14  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
06:13:14  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
06:13:14  49  -- Derive date related attributes:
06:13:14  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
06:13:14  51  ,0+TO_CHAR(ydate,'D')d
06:13:14  52  ,0+TO_CHAR(ydate,'W')w
06:13:14  53  -- mpm stands for minutes-past-midnight:
06:13:14  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
06:13:14  55  -- mph stands for minutes-past-hour:
06:13:14  56  ,0+TO_CHAR(ydate,'MI')mph
06:13:14  57  FROM svm6102
06:13:14  58  ORDER BY ydate
06:13:14  59  /

Table created.

Elapsed: 00:00:02.15
06:13:16 SQL> 
06:13:16 SQL> -- rpt
06:13:16 SQL> 
06:13:16 SQL> SELECT
06:13:16   2  pair
06:13:16   3  ,COUNT(pair)
06:13:16   4  ,MIN(clse),MAX(clse)
06:13:16   5  ,MIN(ydate),MAX(ydate)
06:13:16   6  FROM svm6122
06:13:16   7  GROUP BY pair
06:13:16   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_jpy       19835	 80.25	   84.485 2010-09-27 06:15:01 2010-12-31 06:05:00

Elapsed: 00:00:00.07
06:13:16 SQL> 
06:13:16 SQL> -- Prepare for derivation of NTILE based params:
06:13:16 SQL> 
06:13:16 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.37
06:13:16 SQL> CREATE TABLE svm6142 COMPRESS AS
06:13:16   2  SELECT
06:13:16   3  pair
06:13:16   4  ,ydate
06:13:16   5  ,prdate
06:13:16   6  ,clse
06:13:16   7  ,g6
06:13:16   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
06:13:16   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
06:13:16  10  ,CASE WHEN trend IS NULL THEN 1
06:13:16  11  	    WHEN trend =0      THEN 1
06:13:16  12  	    ELSE trend END trend
06:13:16  13  ,cm4
06:13:16  14  ,cm6
06:13:16  15  ,cm8
06:13:16  16  ,cm10
06:13:16  17  ,cm12
06:13:16  18  ,cm14
06:13:16  19  ,cm16
06:13:16  20  ,cm18
06:13:16  21  --
06:13:16  22  ,ca4
06:13:16  23  ,ca6
06:13:16  24  ,ca8
06:13:16  25  ,ca10
06:13:16  26  ,ca12
06:13:16  27  ,ca14
06:13:16  28  ,ca16
06:13:16  29  ,ca18
06:13:16  30  --
06:13:16  31  ,cx4
06:13:16  32  ,cx6
06:13:16  33  ,cx8
06:13:16  34  ,cx10
06:13:16  35  ,cx12
06:13:16  36  ,cx14
06:13:16  37  ,cx16
06:13:16  38  ,cx18
06:13:16  39  --
06:13:16  40  ,crr4
06:13:16  41  ,crr6
06:13:16  42  ,crr8
06:13:16  43  ,crr10
06:13:16  44  ,crr12
06:13:16  45  ,crr14
06:13:16  46  ,crr16
06:13:16  47  ,crr18
06:13:16  48  --
06:13:16  49  ,hh
06:13:16  50  ,d
06:13:16  51  ,w
06:13:16  52  ,mpm
06:13:16  53  ,mph
06:13:16  54  FROM svm6122
06:13:16  55  ORDER BY ydate
06:13:16  56  /

Table created.

Elapsed: 00:00:00.36
06:13:17 SQL> 
06:13:17 SQL> -- rpt
06:13:17 SQL> 
06:13:17 SQL> SELECT
06:13:17   2  pair
06:13:17   3  ,trend
06:13:17   4  ,gatt
06:13:17   5  ,COUNT(pair)
06:13:17   6  ,AVG(g6)
06:13:17   7  FROM svm6142
06:13:17   8  GROUP BY pair,trend,gatt
06:13:17   9  ORDER BY pair,trend,gatt
06:13:17  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5332 -.16644947
usd_jpy 	-1 up	      5034 .162539779
usd_jpy 	-1		72
usd_jpy 	 1 nup	      5238 -.15497032
usd_jpy 	 1 up	      4159 .164956803

Elapsed: 00:00:00.07
06:13:17 SQL> 
06:13:17 SQL> 
06:13:17 SQL> -- Derive NTILE based params:
06:13:17 SQL> 
06:13:17 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.20
06:13:17 SQL> CREATE TABLE svm6162 COMPRESS AS
06:13:17   2  SELECT
06:13:17   3  pair
06:13:17   4  ,ydate
06:13:17   5  ,prdate
06:13:17   6  ,clse
06:13:17   7  ,g6
06:13:17   8  ,gatt
06:13:17   9  ,gattn
06:13:17  10  ,trend
06:13:17  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
06:13:17  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
06:13:17  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
06:13:17  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
06:13:17  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
06:13:17  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
06:13:17  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
06:13:17  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
06:13:17  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
06:13:17  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
06:13:17  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
06:13:17  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
06:13:17  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
06:13:17  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
06:13:17  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
06:13:17  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
06:13:17  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
06:13:17  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
06:13:17  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
06:13:17  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
06:13:17  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
06:13:17  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
06:13:17  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
06:13:17  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
06:13:17  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
06:13:17  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
06:13:17  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
06:13:17  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
06:13:17  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
06:13:17  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
06:13:17  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
06:13:17  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
06:13:17  43  ,hh  att32
06:13:17  44  ,d   att33
06:13:17  45  ,w   att34
06:13:17  46  ,mpm att35
06:13:17  47  ,mph att36
06:13:17  48  ,trend att37
06:13:17  49  FROM svm6142
06:13:17  50  ORDER BY ydate
06:13:17  51  /

Table created.

Elapsed: 00:00:04.86
06:13:22 SQL> 
06:13:22 SQL> -- rpt
06:13:22 SQL> 
06:13:22 SQL> SELECT
06:13:22   2  pair
06:13:22   3  ,trend
06:13:22   4  ,gatt
06:13:22   5  ,COUNT(pair)
06:13:22   6  ,AVG(g6)
06:13:22   7  FROM svm6162
06:13:22   8  GROUP BY pair,trend,gatt
06:13:22   9  ORDER BY pair,trend,gatt
06:13:22  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5332 -.16644947
usd_jpy 	-1 up	      5034 .162539779
usd_jpy 	-1		72
usd_jpy 	 1 nup	      5238 -.15497032
usd_jpy 	 1 up	      4159 .164956803

Elapsed: 00:00:00.03
06:13:22 SQL> 
06:13:22 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
06:13:22 SQL> CREATE TABLE modsrc COMPRESS AS
06:13:22   2  SELECT
06:13:22   3  pair
06:13:22   4  ,ydate
06:13:22   5  ,prdate
06:13:22   6  ,trend
06:13:22   7  ,g6
06:13:22   8  ,gatt
06:13:22   9  ,gattn
06:13:22  10  FROM svm6162
06:13:22  11  /

Table created.

Elapsed: 00:00:00.09
06:13:22 SQL> 
06:13:22 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
06:13:22 SQL> 
06:13:22 SQL> DROP   TABLE jpy_ms610 ;

Table dropped.

Elapsed: 00:00:00.06
06:13:22 SQL> CREATE TABLE jpy_ms610 COMPRESS AS
06:13:22   2  SELECT
06:13:22   3  ydate
06:13:22   4  ,trend jpy_trend
06:13:22   5  ,g6    jpy_g6
06:13:22   6  ,gatt  jpy_gatt
06:13:22   7  ,gattn jpy_gattn
06:13:22   8  FROM modsrc
06:13:22   9  /

Table created.

Elapsed: 00:00:00.07
06:13:22 SQL> 
06:13:22 SQL> ANALYZE TABLE jpy_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
06:13:22 SQL> 
06:13:22 SQL> -- I need a copy of the attributes:
06:13:22 SQL> 
06:13:22 SQL> 
06:13:22 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.12
06:13:23 SQL> CREATE TABLE jpy_att COMPRESS AS
06:13:23   2  SELECT
06:13:23   3  ydate
06:13:23   4  ,att00 jpy_att00
06:13:23   5  ,att01 jpy_att01
06:13:23   6  ,att02 jpy_att02
06:13:23   7  ,att03 jpy_att03
06:13:23   8  ,att04 jpy_att04
06:13:23   9  ,att05 jpy_att05
06:13:23  10  ,att06 jpy_att06
06:13:23  11  ,att07 jpy_att07
06:13:23  12  ,att08 jpy_att08
06:13:23  13  ,att09 jpy_att09
06:13:23  14  ,att10 jpy_att10
06:13:23  15  ,att11 jpy_att11
06:13:23  16  ,att12 jpy_att12
06:13:23  17  ,att13 jpy_att13
06:13:23  18  ,att14 jpy_att14
06:13:23  19  ,att15 jpy_att15
06:13:23  20  ,att16 jpy_att16
06:13:23  21  ,att17 jpy_att17
06:13:23  22  ,att18 jpy_att18
06:13:23  23  ,att19 jpy_att19
06:13:23  24  ,att20 jpy_att20
06:13:23  25  ,att21 jpy_att21
06:13:23  26  ,att22 jpy_att22
06:13:23  27  ,att23 jpy_att23
06:13:23  28  ,att24 jpy_att24
06:13:23  29  ,att25 jpy_att25
06:13:23  30  ,att26 jpy_att26
06:13:23  31  ,att27 jpy_att27
06:13:23  32  ,att28 jpy_att28
06:13:23  33  ,att29 jpy_att29
06:13:23  34  ,att30 jpy_att30
06:13:23  35  ,att31 jpy_att31
06:13:23  36  ,att32 jpy_att32
06:13:23  37  ,att33 jpy_att33
06:13:23  38  ,att34 jpy_att34
06:13:23  39  ,att35 jpy_att35
06:13:23  40  ,att36 jpy_att36
06:13:23  41  ,att37 jpy_att37
06:13:23  42  FROM svm6162
06:13:23  43  /

Table created.

Elapsed: 00:00:00.17
06:13:23 SQL> 
06:13:23 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.43
06:13:23 SQL> 
06:13:23 SQL> -- rpt
06:13:23 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19835

Elapsed: 00:00:00.88
06:13:24 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     19835

Elapsed: 00:00:00.00
06:13:24 SQL> 
06:13:24 SQL> --
06:13:24 SQL> -- cad610.sql
06:13:24 SQL> --
06:13:24 SQL> 
06:13:24 SQL> -- Creates views and tables for backtesting a forex SVM strategy
06:13:24 SQL> 
06:13:24 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.44
06:13:24 SQL> 
06:13:24 SQL> -- I created di5min here:
06:13:24 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
06:13:24 SQL> 
06:13:24 SQL> CREATE OR REPLACE VIEW svm6102 AS
06:13:24   2  SELECT
06:13:24   3  pair
06:13:24   4  ,ydate
06:13:24   5  ,prdate
06:13:24   6  ,rownum rnum -- acts as t in my time-series
06:13:24   7  ,clse
06:13:24   8  -- Derive a bunch of attributes from clse, the latest price:
06:13:24   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
06:13:24  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
06:13:24  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
06:13:24  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
06:13:24  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
06:13:24  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
06:13:24  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
06:13:24  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
06:13:24  17  --
06:13:24  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
06:13:24  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
06:13:24  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
06:13:24  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
06:13:24  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
06:13:24  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
06:13:24  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
06:13:24  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
06:13:24  26  --
06:13:24  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
06:13:24  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
06:13:24  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
06:13:24  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
06:13:24  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
06:13:24  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
06:13:24  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
06:13:24  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
06:13:24  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
06:13:24  36  FROM di5min WHERE pair LIKE'%cad%'
06:13:24  37  AND ydate > sysdate - 95
06:13:24  38  ORDER BY ydate
06:13:24  39  /

View created.

Elapsed: 00:00:00.05
06:13:25 SQL> 
06:13:25 SQL> -- rpt
06:13:25 SQL> 
06:13:25 SQL> SELECT
06:13:25   2  pair
06:13:25   3  ,COUNT(pair)
06:13:25   4  ,MIN(clse),MAX(clse)
06:13:25   5  ,MIN(avg6),MAX(avg6)
06:13:25   6  ,MIN(ydate),MAX(ydate)
06:13:25   7  FROM svm6102
06:13:25   8  GROUP BY pair
06:13:25   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_cad       19835	.99755	    1.036 .998845205 1.03336849 2010-09-27 06:15:01 2010-12-31 06:05:00

Elapsed: 00:00:00.84
06:13:25 SQL> 
06:13:25 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
06:13:25 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.55
06:13:26 SQL> CREATE TABLE svm6122 COMPRESS AS
06:13:26   2  SELECT
06:13:26   3  pair
06:13:26   4  ,ydate
06:13:26   5  ,prdate
06:13:26   6  ,clse
06:13:26   7  -- g6 is important. I want to predict g6:
06:13:26   8  ,ld6 - clse g6
06:13:26   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
06:13:26  10  -- I want more attributes from the ones I derived above:
06:13:26  11  -- clse relation to moving-min
06:13:26  12  ,clse-min4  cm4
06:13:26  13  ,clse-min6  cm6
06:13:26  14  ,clse-min8  cm8
06:13:26  15  ,clse-min10 cm10
06:13:26  16  ,clse-min12 cm12
06:13:26  17  ,clse-min14 cm14
06:13:26  18  ,clse-min16 cm16
06:13:26  19  ,clse-min18 cm18
06:13:26  20  -- clse relation to moving-avg
06:13:26  21  ,clse-avg4  ca4
06:13:26  22  ,clse-avg6  ca6
06:13:26  23  ,clse-avg8  ca8
06:13:26  24  ,clse-avg10 ca10
06:13:26  25  ,clse-avg12 ca12
06:13:26  26  ,clse-avg14 ca14
06:13:26  27  ,clse-avg16 ca16
06:13:26  28  ,clse-avg18 ca18
06:13:26  29  -- clse relation to moving-max
06:13:26  30  ,clse-max4  cx4
06:13:26  31  ,clse-max6  cx6
06:13:26  32  ,clse-max8  cx8
06:13:26  33  ,clse-max10 cx10
06:13:26  34  ,clse-max12 cx12
06:13:26  35  ,clse-max14 cx14
06:13:26  36  ,clse-max16 cx16
06:13:26  37  ,clse-max18 cx18
06:13:26  38  -- Derive more attributes.
06:13:26  39  -- I want to use CORR() here to help SVM see the shape of the series.
06:13:26  40  -- But COVAR_POP is more stable:
06:13:26  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
06:13:26  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
06:13:26  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
06:13:26  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
06:13:26  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
06:13:26  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
06:13:26  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
06:13:26  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
06:13:26  49  -- Derive date related attributes:
06:13:26  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
06:13:26  51  ,0+TO_CHAR(ydate,'D')d
06:13:26  52  ,0+TO_CHAR(ydate,'W')w
06:13:26  53  -- mpm stands for minutes-past-midnight:
06:13:26  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
06:13:26  55  -- mph stands for minutes-past-hour:
06:13:26  56  ,0+TO_CHAR(ydate,'MI')mph
06:13:26  57  FROM svm6102
06:13:26  58  ORDER BY ydate
06:13:26  59  /

Table created.

Elapsed: 00:00:02.06
06:13:28 SQL> 
06:13:28 SQL> -- rpt
06:13:28 SQL> 
06:13:28 SQL> SELECT
06:13:28   2  pair
06:13:28   3  ,COUNT(pair)
06:13:28   4  ,MIN(clse),MAX(clse)
06:13:28   5  ,MIN(ydate),MAX(ydate)
06:13:28   6  FROM svm6122
06:13:28   7  GROUP BY pair
06:13:28   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_cad       19835	.99755	    1.036 2010-09-27 06:15:01 2010-12-31 06:05:00

Elapsed: 00:00:00.06
06:13:28 SQL> 
06:13:28 SQL> -- Prepare for derivation of NTILE based params:
06:13:28 SQL> 
06:13:28 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.22
06:13:28 SQL> CREATE TABLE svm6142 COMPRESS AS
06:13:28   2  SELECT
06:13:28   3  pair
06:13:28   4  ,ydate
06:13:28   5  ,prdate
06:13:28   6  ,clse
06:13:28   7  ,g6
06:13:28   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
06:13:28   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
06:13:28  10  ,CASE WHEN trend IS NULL THEN 1
06:13:28  11  	    WHEN trend =0      THEN 1
06:13:28  12  	    ELSE trend END trend
06:13:28  13  ,cm4
06:13:28  14  ,cm6
06:13:28  15  ,cm8
06:13:28  16  ,cm10
06:13:28  17  ,cm12
06:13:28  18  ,cm14
06:13:28  19  ,cm16
06:13:28  20  ,cm18
06:13:28  21  --
06:13:28  22  ,ca4
06:13:28  23  ,ca6
06:13:28  24  ,ca8
06:13:28  25  ,ca10
06:13:28  26  ,ca12
06:13:28  27  ,ca14
06:13:28  28  ,ca16
06:13:28  29  ,ca18
06:13:28  30  --
06:13:28  31  ,cx4
06:13:28  32  ,cx6
06:13:28  33  ,cx8
06:13:28  34  ,cx10
06:13:28  35  ,cx12
06:13:28  36  ,cx14
06:13:28  37  ,cx16
06:13:28  38  ,cx18
06:13:28  39  --
06:13:28  40  ,crr4
06:13:28  41  ,crr6
06:13:28  42  ,crr8
06:13:28  43  ,crr10
06:13:28  44  ,crr12
06:13:28  45  ,crr14
06:13:28  46  ,crr16
06:13:28  47  ,crr18
06:13:28  48  --
06:13:28  49  ,hh
06:13:28  50  ,d
06:13:28  51  ,w
06:13:28  52  ,mpm
06:13:28  53  ,mph
06:13:28  54  FROM svm6122
06:13:28  55  ORDER BY ydate
06:13:28  56  /

Table created.

Elapsed: 00:00:00.36
06:13:29 SQL> 
06:13:29 SQL> -- rpt
06:13:29 SQL> 
06:13:29 SQL> SELECT
06:13:29   2  pair
06:13:29   3  ,trend
06:13:29   4  ,gatt
06:13:29   5  ,COUNT(pair)
06:13:29   6  ,AVG(g6)
06:13:29   7  FROM svm6142
06:13:29   8  GROUP BY pair,trend,gatt
06:13:29   9  ORDER BY pair,trend,gatt
06:13:29  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7345  -.0013021
usd_cad 	-1 up	      3147 .003082075
usd_cad 	-1		26
usd_cad 	 1 nup	      6774 -.00159961
usd_cad 	 1 up	      2497 .003592845
usd_cad 	 1		46

6 rows selected.

Elapsed: 00:00:00.04
06:13:29 SQL> 
06:13:29 SQL> 
06:13:29 SQL> -- Derive NTILE based params:
06:13:29 SQL> 
06:13:29 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.12
06:13:29 SQL> CREATE TABLE svm6162 COMPRESS AS
06:13:29   2  SELECT
06:13:29   3  pair
06:13:29   4  ,ydate
06:13:29   5  ,prdate
06:13:29   6  ,clse
06:13:29   7  ,g6
06:13:29   8  ,gatt
06:13:29   9  ,gattn
06:13:29  10  ,trend
06:13:29  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
06:13:29  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
06:13:29  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
06:13:29  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
06:13:29  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
06:13:29  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
06:13:29  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
06:13:29  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
06:13:29  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
06:13:29  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
06:13:29  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
06:13:29  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
06:13:29  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
06:13:29  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
06:13:29  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
06:13:29  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
06:13:29  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
06:13:29  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
06:13:29  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
06:13:29  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
06:13:29  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
06:13:29  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
06:13:29  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
06:13:29  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
06:13:29  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
06:13:29  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
06:13:29  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
06:13:29  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
06:13:29  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
06:13:29  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
06:13:29  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
06:13:29  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
06:13:29  43  ,hh  att32
06:13:29  44  ,d   att33
06:13:29  45  ,w   att34
06:13:29  46  ,mpm att35
06:13:29  47  ,mph att36
06:13:29  48  ,trend att37
06:13:29  49  FROM svm6142
06:13:29  50  ORDER BY ydate
06:13:29  51  /

Table created.

Elapsed: 00:00:04.79
06:13:34 SQL> 
06:13:34 SQL> -- rpt
06:13:34 SQL> 
06:13:34 SQL> SELECT
06:13:34   2  pair
06:13:34   3  ,trend
06:13:34   4  ,gatt
06:13:34   5  ,COUNT(pair)
06:13:34   6  ,AVG(g6)
06:13:34   7  FROM svm6162
06:13:34   8  GROUP BY pair,trend,gatt
06:13:34   9  ORDER BY pair,trend,gatt
06:13:34  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7345  -.0013021
usd_cad 	-1 up	      3147 .003082075
usd_cad 	-1		26
usd_cad 	 1 nup	      6774 -.00159961
usd_cad 	 1 up	      2497 .003592845
usd_cad 	 1		46

6 rows selected.

Elapsed: 00:00:00.03
06:13:34 SQL> 
06:13:34 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
06:13:34 SQL> CREATE TABLE modsrc COMPRESS AS
06:13:34   2  SELECT
06:13:34   3  pair
06:13:34   4  ,ydate
06:13:34   5  ,prdate
06:13:34   6  ,trend
06:13:34   7  ,g6
06:13:34   8  ,gatt
06:13:34   9  ,gattn
06:13:34  10  FROM svm6162
06:13:34  11  /

Table created.

Elapsed: 00:00:00.09
06:13:34 SQL> 
06:13:34 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
06:13:34 SQL> 
06:13:34 SQL> DROP   TABLE cad_ms610 ;

Table dropped.

Elapsed: 00:00:00.07
06:13:34 SQL> CREATE TABLE cad_ms610 COMPRESS AS
06:13:34   2  SELECT
06:13:34   3  ydate
06:13:34   4  ,trend cad_trend
06:13:34   5  ,g6    cad_g6
06:13:34   6  ,gatt  cad_gatt
06:13:34   7  ,gattn cad_gattn
06:13:34   8  FROM modsrc
06:13:34   9  /

Table created.

Elapsed: 00:00:00.07
06:13:34 SQL> 
06:13:34 SQL> ANALYZE TABLE cad_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
06:13:34 SQL> 
06:13:34 SQL> -- I need a copy of the attributes:
06:13:34 SQL> 
06:13:34 SQL> 
06:13:34 SQL> DROP   TABLE cad_att;

Table dropped.

Elapsed: 00:00:00.05
06:13:34 SQL> CREATE TABLE cad_att COMPRESS AS
06:13:34   2  SELECT
06:13:34   3  ydate
06:13:34   4  ,att00 cad_att00
06:13:34   5  ,att01 cad_att01
06:13:34   6  ,att02 cad_att02
06:13:34   7  ,att03 cad_att03
06:13:34   8  ,att04 cad_att04
06:13:34   9  ,att05 cad_att05
06:13:34  10  ,att06 cad_att06
06:13:34  11  ,att07 cad_att07
06:13:34  12  ,att08 cad_att08
06:13:34  13  ,att09 cad_att09
06:13:34  14  ,att10 cad_att10
06:13:34  15  ,att11 cad_att11
06:13:34  16  ,att12 cad_att12
06:13:34  17  ,att13 cad_att13
06:13:34  18  ,att14 cad_att14
06:13:34  19  ,att15 cad_att15
06:13:34  20  ,att16 cad_att16
06:13:34  21  ,att17 cad_att17
06:13:34  22  ,att18 cad_att18
06:13:34  23  ,att19 cad_att19
06:13:34  24  ,att20 cad_att20
06:13:34  25  ,att21 cad_att21
06:13:34  26  ,att22 cad_att22
06:13:34  27  ,att23 cad_att23
06:13:34  28  ,att24 cad_att24
06:13:34  29  ,att25 cad_att25
06:13:34  30  ,att26 cad_att26
06:13:34  31  ,att27 cad_att27
06:13:34  32  ,att28 cad_att28
06:13:34  33  ,att29 cad_att29
06:13:34  34  ,att30 cad_att30
06:13:34  35  ,att31 cad_att31
06:13:34  36  ,att32 cad_att32
06:13:34  37  ,att33 cad_att33
06:13:34  38  ,att34 cad_att34
06:13:34  39  ,att35 cad_att35
06:13:34  40  ,att36 cad_att36
06:13:34  41  ,att37 cad_att37
06:13:34  42  FROM svm6162
06:13:34  43  /

Table created.

Elapsed: 00:00:00.18
06:13:35 SQL> 
06:13:35 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
06:13:35 SQL> 
06:13:35 SQL> -- rpt
06:13:35 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19835

Elapsed: 00:00:00.83
06:13:36 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
     19835

Elapsed: 00:00:00.00
06:13:36 SQL> 
06:13:36 SQL> --
06:13:36 SQL> -- chf610.sql
06:13:36 SQL> --
06:13:36 SQL> 
06:13:36 SQL> -- Creates views and tables for backtesting a forex SVM strategy
06:13:36 SQL> 
06:13:36 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.40
06:13:36 SQL> 
06:13:36 SQL> -- I created di5min here:
06:13:36 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
06:13:36 SQL> 
06:13:36 SQL> CREATE OR REPLACE VIEW svm6102 AS
06:13:36   2  SELECT
06:13:36   3  pair
06:13:36   4  ,ydate
06:13:36   5  ,prdate
06:13:36   6  ,rownum rnum -- acts as t in my time-series
06:13:36   7  ,clse
06:13:36   8  -- Derive a bunch of attributes from clse, the latest price:
06:13:36   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
06:13:36  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
06:13:36  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
06:13:36  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
06:13:36  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
06:13:36  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
06:13:36  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
06:13:36  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
06:13:36  17  --
06:13:36  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
06:13:36  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
06:13:36  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
06:13:36  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
06:13:36  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
06:13:36  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
06:13:36  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
06:13:36  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
06:13:36  26  --
06:13:36  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
06:13:36  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
06:13:36  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
06:13:36  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
06:13:36  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
06:13:36  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
06:13:36  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
06:13:36  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
06:13:36  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
06:13:36  36  FROM di5min WHERE pair LIKE'%chf%'
06:13:36  37  AND ydate > sysdate - 95
06:13:36  38  ORDER BY ydate
06:13:36  39  /

View created.

Elapsed: 00:00:00.05
06:13:36 SQL> 
06:13:36 SQL> -- rpt
06:13:36 SQL> 
06:13:36 SQL> SELECT
06:13:36   2  pair
06:13:36   3  ,COUNT(pair)
06:13:36   4  ,MIN(clse),MAX(clse)
06:13:36   5  ,MIN(avg6),MAX(avg6)
06:13:36   6  ,MIN(ydate),MAX(ydate)
06:13:36   7  FROM svm6102
06:13:36   8  GROUP BY pair
06:13:36   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_chf       19838    .934325	  1.00635 .935186301 1.00498151 2010-09-27 06:15:01 2010-12-31 06:05:00

Elapsed: 00:00:00.85
06:13:37 SQL> 
06:13:37 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
06:13:37 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.20
06:13:37 SQL> CREATE TABLE svm6122 COMPRESS AS
06:13:37   2  SELECT
06:13:37   3  pair
06:13:37   4  ,ydate
06:13:37   5  ,prdate
06:13:37   6  ,clse
06:13:37   7  -- g6 is important. I want to predict g6:
06:13:37   8  ,ld6 - clse g6
06:13:37   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
06:13:37  10  -- I want more attributes from the ones I derived above:
06:13:37  11  -- clse relation to moving-min
06:13:37  12  ,clse-min4  cm4
06:13:37  13  ,clse-min6  cm6
06:13:37  14  ,clse-min8  cm8
06:13:37  15  ,clse-min10 cm10
06:13:37  16  ,clse-min12 cm12
06:13:37  17  ,clse-min14 cm14
06:13:37  18  ,clse-min16 cm16
06:13:37  19  ,clse-min18 cm18
06:13:37  20  -- clse relation to moving-avg
06:13:37  21  ,clse-avg4  ca4
06:13:37  22  ,clse-avg6  ca6
06:13:37  23  ,clse-avg8  ca8
06:13:37  24  ,clse-avg10 ca10
06:13:37  25  ,clse-avg12 ca12
06:13:37  26  ,clse-avg14 ca14
06:13:37  27  ,clse-avg16 ca16
06:13:37  28  ,clse-avg18 ca18
06:13:37  29  -- clse relation to moving-max
06:13:37  30  ,clse-max4  cx4
06:13:37  31  ,clse-max6  cx6
06:13:37  32  ,clse-max8  cx8
06:13:37  33  ,clse-max10 cx10
06:13:37  34  ,clse-max12 cx12
06:13:37  35  ,clse-max14 cx14
06:13:37  36  ,clse-max16 cx16
06:13:37  37  ,clse-max18 cx18
06:13:37  38  -- Derive more attributes.
06:13:37  39  -- I want to use CORR() here to help SVM see the shape of the series.
06:13:37  40  -- But COVAR_POP is more stable:
06:13:37  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
06:13:37  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
06:13:37  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
06:13:37  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
06:13:37  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
06:13:37  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
06:13:37  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
06:13:37  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
06:13:37  49  -- Derive date related attributes:
06:13:37  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
06:13:37  51  ,0+TO_CHAR(ydate,'D')d
06:13:37  52  ,0+TO_CHAR(ydate,'W')w
06:13:37  53  -- mpm stands for minutes-past-midnight:
06:13:37  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
06:13:37  55  -- mph stands for minutes-past-hour:
06:13:37  56  ,0+TO_CHAR(ydate,'MI')mph
06:13:37  57  FROM svm6102
06:13:37  58  ORDER BY ydate
06:13:37  59  /

Table created.

Elapsed: 00:00:02.06
06:13:39 SQL> 
06:13:39 SQL> -- rpt
06:13:39 SQL> 
06:13:39 SQL> SELECT
06:13:39   2  pair
06:13:39   3  ,COUNT(pair)
06:13:39   4  ,MIN(clse),MAX(clse)
06:13:39   5  ,MIN(ydate),MAX(ydate)
06:13:39   6  FROM svm6122
06:13:39   7  GROUP BY pair
06:13:39   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_chf       19838    .934325	  1.00635 2010-09-27 06:15:01 2010-12-31 06:05:00

Elapsed: 00:00:00.04
06:13:39 SQL> 
06:13:39 SQL> -- Prepare for derivation of NTILE based params:
06:13:39 SQL> 
06:13:39 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.19
06:13:40 SQL> CREATE TABLE svm6142 COMPRESS AS
06:13:40   2  SELECT
06:13:40   3  pair
06:13:40   4  ,ydate
06:13:40   5  ,prdate
06:13:40   6  ,clse
06:13:40   7  ,g6
06:13:40   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
06:13:40   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
06:13:40  10  ,CASE WHEN trend IS NULL THEN 1
06:13:40  11  	    WHEN trend =0      THEN 1
06:13:40  12  	    ELSE trend END trend
06:13:40  13  ,cm4
06:13:40  14  ,cm6
06:13:40  15  ,cm8
06:13:40  16  ,cm10
06:13:40  17  ,cm12
06:13:40  18  ,cm14
06:13:40  19  ,cm16
06:13:40  20  ,cm18
06:13:40  21  --
06:13:40  22  ,ca4
06:13:40  23  ,ca6
06:13:40  24  ,ca8
06:13:40  25  ,ca10
06:13:40  26  ,ca12
06:13:40  27  ,ca14
06:13:40  28  ,ca16
06:13:40  29  ,ca18
06:13:40  30  --
06:13:40  31  ,cx4
06:13:40  32  ,cx6
06:13:40  33  ,cx8
06:13:40  34  ,cx10
06:13:40  35  ,cx12
06:13:40  36  ,cx14
06:13:40  37  ,cx16
06:13:40  38  ,cx18
06:13:40  39  --
06:13:40  40  ,crr4
06:13:40  41  ,crr6
06:13:40  42  ,crr8
06:13:40  43  ,crr10
06:13:40  44  ,crr12
06:13:40  45  ,crr14
06:13:40  46  ,crr16
06:13:40  47  ,crr18
06:13:40  48  --
06:13:40  49  ,hh
06:13:40  50  ,d
06:13:40  51  ,w
06:13:40  52  ,mpm
06:13:40  53  ,mph
06:13:40  54  FROM svm6122
06:13:40  55  ORDER BY ydate
06:13:40  56  /

Table created.

Elapsed: 00:00:00.37
06:13:40 SQL> 
06:13:40 SQL> -- rpt
06:13:40 SQL> 
06:13:40 SQL> SELECT
06:13:40   2  pair
06:13:40   3  ,trend
06:13:40   4  ,gatt
06:13:40   5  ,COUNT(pair)
06:13:40   6  ,AVG(g6)
06:13:40   7  FROM svm6142
06:13:40   8  GROUP BY pair,trend,gatt
06:13:40   9  ORDER BY pair,trend,gatt
06:13:40  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7344 -.00197274
usd_chf 	-1 up	      3218 .003881137
usd_chf 	-1		27
usd_chf 	 1 nup	      6649 -.00164066
usd_chf 	 1 up	      2555 .003693704
usd_chf 	 1		45

6 rows selected.

Elapsed: 00:00:00.04
06:13:40 SQL> 
06:13:40 SQL> 
06:13:40 SQL> -- Derive NTILE based params:
06:13:40 SQL> 
06:13:40 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.12
06:13:40 SQL> CREATE TABLE svm6162 COMPRESS AS
06:13:40   2  SELECT
06:13:40   3  pair
06:13:40   4  ,ydate
06:13:40   5  ,prdate
06:13:40   6  ,clse
06:13:40   7  ,g6
06:13:40   8  ,gatt
06:13:40   9  ,gattn
06:13:40  10  ,trend
06:13:40  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
06:13:40  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
06:13:40  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
06:13:40  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
06:13:40  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
06:13:40  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
06:13:40  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
06:13:40  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
06:13:40  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
06:13:40  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
06:13:40  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
06:13:40  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
06:13:40  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
06:13:40  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
06:13:40  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
06:13:40  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
06:13:40  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
06:13:40  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
06:13:40  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
06:13:40  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
06:13:40  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
06:13:40  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
06:13:40  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
06:13:40  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
06:13:40  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
06:13:40  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
06:13:40  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
06:13:40  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
06:13:40  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
06:13:40  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
06:13:40  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
06:13:40  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
06:13:40  43  ,hh  att32
06:13:40  44  ,d   att33
06:13:40  45  ,w   att34
06:13:40  46  ,mpm att35
06:13:40  47  ,mph att36
06:13:40  48  ,trend att37
06:13:40  49  FROM svm6142
06:13:40  50  ORDER BY ydate
06:13:40  51  /

Table created.

Elapsed: 00:00:04.90
06:13:45 SQL> 
06:13:45 SQL> -- rpt
06:13:45 SQL> 
06:13:45 SQL> SELECT
06:13:45   2  pair
06:13:45   3  ,trend
06:13:45   4  ,gatt
06:13:45   5  ,COUNT(pair)
06:13:45   6  ,AVG(g6)
06:13:45   7  FROM svm6162
06:13:45   8  GROUP BY pair,trend,gatt
06:13:45   9  ORDER BY pair,trend,gatt
06:13:45  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7344 -.00197274
usd_chf 	-1 up	      3218 .003881137
usd_chf 	-1		27
usd_chf 	 1 nup	      6649 -.00164066
usd_chf 	 1 up	      2555 .003693704
usd_chf 	 1		45

6 rows selected.

Elapsed: 00:00:00.02
06:13:45 SQL> 
06:13:45 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.21
06:13:45 SQL> CREATE TABLE modsrc COMPRESS AS
06:13:45   2  SELECT
06:13:45   3  pair
06:13:45   4  ,ydate
06:13:45   5  ,prdate
06:13:45   6  ,trend
06:13:45   7  ,g6
06:13:45   8  ,gatt
06:13:45   9  ,gattn
06:13:45  10  FROM svm6162
06:13:45  11  /

Table created.

Elapsed: 00:00:00.09
06:13:45 SQL> 
06:13:45 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
06:13:46 SQL> 
06:13:46 SQL> DROP   TABLE chf_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
06:13:46 SQL> CREATE TABLE chf_ms610 COMPRESS AS
06:13:46   2  SELECT
06:13:46   3  ydate
06:13:46   4  ,trend chf_trend
06:13:46   5  ,g6    chf_g6
06:13:46   6  ,gatt  chf_gatt
06:13:46   7  ,gattn chf_gattn
06:13:46   8  FROM modsrc
06:13:46   9  /

Table created.

Elapsed: 00:00:00.07
06:13:46 SQL> 
06:13:46 SQL> ANALYZE TABLE chf_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
06:13:46 SQL> 
06:13:46 SQL> -- I need a copy of the attributes:
06:13:46 SQL> 
06:13:46 SQL> 
06:13:46 SQL> DROP   TABLE chf_att;

Table dropped.

Elapsed: 00:00:00.05
06:13:46 SQL> CREATE TABLE chf_att COMPRESS AS
06:13:46   2  SELECT
06:13:46   3  ydate
06:13:46   4  ,att00 chf_att00
06:13:46   5  ,att01 chf_att01
06:13:46   6  ,att02 chf_att02
06:13:46   7  ,att03 chf_att03
06:13:46   8  ,att04 chf_att04
06:13:46   9  ,att05 chf_att05
06:13:46  10  ,att06 chf_att06
06:13:46  11  ,att07 chf_att07
06:13:46  12  ,att08 chf_att08
06:13:46  13  ,att09 chf_att09
06:13:46  14  ,att10 chf_att10
06:13:46  15  ,att11 chf_att11
06:13:46  16  ,att12 chf_att12
06:13:46  17  ,att13 chf_att13
06:13:46  18  ,att14 chf_att14
06:13:46  19  ,att15 chf_att15
06:13:46  20  ,att16 chf_att16
06:13:46  21  ,att17 chf_att17
06:13:46  22  ,att18 chf_att18
06:13:46  23  ,att19 chf_att19
06:13:46  24  ,att20 chf_att20
06:13:46  25  ,att21 chf_att21
06:13:46  26  ,att22 chf_att22
06:13:46  27  ,att23 chf_att23
06:13:46  28  ,att24 chf_att24
06:13:46  29  ,att25 chf_att25
06:13:46  30  ,att26 chf_att26
06:13:46  31  ,att27 chf_att27
06:13:46  32  ,att28 chf_att28
06:13:46  33  ,att29 chf_att29
06:13:46  34  ,att30 chf_att30
06:13:46  35  ,att31 chf_att31
06:13:46  36  ,att32 chf_att32
06:13:46  37  ,att33 chf_att33
06:13:46  38  ,att34 chf_att34
06:13:46  39  ,att35 chf_att35
06:13:46  40  ,att36 chf_att36
06:13:46  41  ,att37 chf_att37
06:13:46  42  FROM svm6162
06:13:46  43  /

Table created.

Elapsed: 00:00:00.17
06:13:46 SQL> 
06:13:46 SQL> ANALYZE TABLE chf_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
06:13:47 SQL> 
06:13:47 SQL> -- rpt
06:13:47 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19838

Elapsed: 00:00:00.85
06:13:47 SQL> SELECT COUNT(*)FROM chf_att;

  COUNT(*)
----------
     19838

Elapsed: 00:00:00.00
06:13:47 SQL> 
06:13:47 SQL> --
06:13:47 SQL> -- ech610.sql
06:13:47 SQL> --
06:13:47 SQL> 
06:13:47 SQL> -- Creates views and tables for backtesting a forex SVM strategy
06:13:47 SQL> 
06:13:47 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.58
06:13:48 SQL> 
06:13:48 SQL> -- I created di5min here:
06:13:48 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
06:13:48 SQL> 
06:13:48 SQL> CREATE OR REPLACE VIEW svm6102 AS
06:13:48   2  SELECT
06:13:48   3  pair
06:13:48   4  ,ydate
06:13:48   5  ,prdate
06:13:48   6  ,rownum rnum -- acts as t in my time-series
06:13:48   7  ,clse
06:13:48   8  -- Derive a bunch of attributes from clse, the latest price:
06:13:48   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
06:13:48  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
06:13:48  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
06:13:48  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
06:13:48  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
06:13:48  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
06:13:48  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
06:13:48  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
06:13:48  17  --
06:13:48  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
06:13:48  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
06:13:48  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
06:13:48  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
06:13:48  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
06:13:48  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
06:13:48  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
06:13:48  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
06:13:48  26  --
06:13:48  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
06:13:48  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
06:13:48  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
06:13:48  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
06:13:48  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
06:13:48  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
06:13:48  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
06:13:48  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
06:13:48  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
06:13:48  36  FROM di5min WHERE pair LIKE'%ech%'
06:13:48  37  AND ydate > sysdate - 95
06:13:48  38  ORDER BY ydate
06:13:48  39  /

View created.

Elapsed: 00:00:00.04
06:13:48 SQL> 
06:13:48 SQL> -- rpt
06:13:48 SQL> 
06:13:48 SQL> SELECT
06:13:48   2  pair
06:13:48   3  ,COUNT(pair)
06:13:48   4  ,MIN(clse),MAX(clse)
06:13:48   5  ,MIN(avg6),MAX(avg6)
06:13:48   6  ,MIN(ydate),MAX(ydate)
06:13:48   7  FROM svm6102
06:13:48   8  GROUP BY pair
06:13:48   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ech_usd       19837 1.24213032 1.38284305 1.24319868 1.37986485 2010-09-27 06:15:01 2010-12-31 06:05:00

Elapsed: 00:00:00.81
06:13:49 SQL> 
06:13:49 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
06:13:49 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.20
06:13:49 SQL> CREATE TABLE svm6122 COMPRESS AS
06:13:49   2  SELECT
06:13:49   3  pair
06:13:49   4  ,ydate
06:13:49   5  ,prdate
06:13:49   6  ,clse
06:13:49   7  -- g6 is important. I want to predict g6:
06:13:49   8  ,ld6 - clse g6
06:13:49   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
06:13:49  10  -- I want more attributes from the ones I derived above:
06:13:49  11  -- clse relation to moving-min
06:13:49  12  ,clse-min4  cm4
06:13:49  13  ,clse-min6  cm6
06:13:49  14  ,clse-min8  cm8
06:13:49  15  ,clse-min10 cm10
06:13:49  16  ,clse-min12 cm12
06:13:49  17  ,clse-min14 cm14
06:13:49  18  ,clse-min16 cm16
06:13:49  19  ,clse-min18 cm18
06:13:49  20  -- clse relation to moving-avg
06:13:49  21  ,clse-avg4  ca4
06:13:49  22  ,clse-avg6  ca6
06:13:49  23  ,clse-avg8  ca8
06:13:49  24  ,clse-avg10 ca10
06:13:49  25  ,clse-avg12 ca12
06:13:49  26  ,clse-avg14 ca14
06:13:49  27  ,clse-avg16 ca16
06:13:49  28  ,clse-avg18 ca18
06:13:49  29  -- clse relation to moving-max
06:13:49  30  ,clse-max4  cx4
06:13:49  31  ,clse-max6  cx6
06:13:49  32  ,clse-max8  cx8
06:13:49  33  ,clse-max10 cx10
06:13:49  34  ,clse-max12 cx12
06:13:49  35  ,clse-max14 cx14
06:13:49  36  ,clse-max16 cx16
06:13:49  37  ,clse-max18 cx18
06:13:49  38  -- Derive more attributes.
06:13:49  39  -- I want to use CORR() here to help SVM see the shape of the series.
06:13:49  40  -- But COVAR_POP is more stable:
06:13:49  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
06:13:49  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
06:13:49  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
06:13:49  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
06:13:49  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
06:13:49  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
06:13:49  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
06:13:49  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
06:13:49  49  -- Derive date related attributes:
06:13:49  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
06:13:49  51  ,0+TO_CHAR(ydate,'D')d
06:13:49  52  ,0+TO_CHAR(ydate,'W')w
06:13:49  53  -- mpm stands for minutes-past-midnight:
06:13:49  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
06:13:49  55  -- mph stands for minutes-past-hour:
06:13:49  56  ,0+TO_CHAR(ydate,'MI')mph
06:13:49  57  FROM svm6102
06:13:49  58  ORDER BY ydate
06:13:49  59  /

Table created.

Elapsed: 00:00:02.07
06:13:51 SQL> 
06:13:51 SQL> -- rpt
06:13:51 SQL> 
06:13:51 SQL> SELECT
06:13:51   2  pair
06:13:51   3  ,COUNT(pair)
06:13:51   4  ,MIN(clse),MAX(clse)
06:13:51   5  ,MIN(ydate),MAX(ydate)
06:13:51   6  FROM svm6122
06:13:51   7  GROUP BY pair
06:13:51   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ech_usd       19837 1.24213032 1.38284305 2010-09-27 06:15:01 2010-12-31 06:05:00

Elapsed: 00:00:00.04
06:13:51 SQL> 
06:13:51 SQL> -- Prepare for derivation of NTILE based params:
06:13:51 SQL> 
06:13:51 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.23
06:13:51 SQL> CREATE TABLE svm6142 COMPRESS AS
06:13:51   2  SELECT
06:13:51   3  pair
06:13:51   4  ,ydate
06:13:51   5  ,prdate
06:13:51   6  ,clse
06:13:51   7  ,g6
06:13:51   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
06:13:51   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
06:13:51  10  ,CASE WHEN trend IS NULL THEN 1
06:13:51  11  	    WHEN trend =0      THEN 1
06:13:51  12  	    ELSE trend END trend
06:13:51  13  ,cm4
06:13:51  14  ,cm6
06:13:51  15  ,cm8
06:13:51  16  ,cm10
06:13:51  17  ,cm12
06:13:51  18  ,cm14
06:13:51  19  ,cm16
06:13:51  20  ,cm18
06:13:51  21  --
06:13:51  22  ,ca4
06:13:51  23  ,ca6
06:13:51  24  ,ca8
06:13:51  25  ,ca10
06:13:51  26  ,ca12
06:13:51  27  ,ca14
06:13:51  28  ,ca16
06:13:51  29  ,ca18
06:13:51  30  --
06:13:51  31  ,cx4
06:13:51  32  ,cx6
06:13:51  33  ,cx8
06:13:51  34  ,cx10
06:13:51  35  ,cx12
06:13:51  36  ,cx14
06:13:51  37  ,cx16
06:13:51  38  ,cx18
06:13:51  39  --
06:13:51  40  ,crr4
06:13:51  41  ,crr6
06:13:51  42  ,crr8
06:13:51  43  ,crr10
06:13:51  44  ,crr12
06:13:51  45  ,crr14
06:13:51  46  ,crr16
06:13:51  47  ,crr18
06:13:51  48  --
06:13:51  49  ,hh
06:13:51  50  ,d
06:13:51  51  ,w
06:13:51  52  ,mpm
06:13:51  53  ,mph
06:13:51  54  FROM svm6122
06:13:51  55  ORDER BY ydate
06:13:51  56  /

Table created.

Elapsed: 00:00:00.40
06:13:52 SQL> 
06:13:52 SQL> -- rpt
06:13:52 SQL> 
06:13:52 SQL> SELECT
06:13:52   2  pair
06:13:52   3  ,trend
06:13:52   4  ,gatt
06:13:52   5  ,COUNT(pair)
06:13:52   6  ,AVG(g6)
06:13:52   7  FROM svm6142
06:13:52   8  GROUP BY pair,trend,gatt
06:13:52   9  ORDER BY pair,trend,gatt
06:13:52  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6667 -.00219312
ech_usd 	-1 up	      3675 .003544297
ech_usd 	-1		16
ech_usd 	 1 nup	      6544  -.0023167
ech_usd 	 1 up	      2879 .003821987
ech_usd 	 1		56

6 rows selected.

Elapsed: 00:00:00.04
06:13:52 SQL> 
06:13:52 SQL> 
06:13:52 SQL> -- Derive NTILE based params:
06:13:52 SQL> 
06:13:52 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.13
06:13:52 SQL> CREATE TABLE svm6162 COMPRESS AS
06:13:52   2  SELECT
06:13:52   3  pair
06:13:52   4  ,ydate
06:13:52   5  ,prdate
06:13:52   6  ,clse
06:13:52   7  ,g6
06:13:52   8  ,gatt
06:13:52   9  ,gattn
06:13:52  10  ,trend
06:13:52  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
06:13:52  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
06:13:52  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
06:13:52  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
06:13:52  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
06:13:52  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
06:13:52  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
06:13:52  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
06:13:52  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
06:13:52  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
06:13:52  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
06:13:52  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
06:13:52  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
06:13:52  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
06:13:52  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
06:13:52  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
06:13:52  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
06:13:52  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
06:13:52  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
06:13:52  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
06:13:52  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
06:13:52  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
06:13:52  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
06:13:52  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
06:13:52  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
06:13:52  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
06:13:52  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
06:13:52  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
06:13:52  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
06:13:52  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
06:13:52  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
06:13:52  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
06:13:52  43  ,hh  att32
06:13:52  44  ,d   att33
06:13:52  45  ,w   att34
06:13:52  46  ,mpm att35
06:13:52  47  ,mph att36
06:13:52  48  ,trend att37
06:13:52  49  FROM svm6142
06:13:52  50  ORDER BY ydate
06:13:52  51  /

Table created.

Elapsed: 00:00:04.93
06:13:57 SQL> 
06:13:57 SQL> -- rpt
06:13:57 SQL> 
06:13:57 SQL> SELECT
06:13:57   2  pair
06:13:57   3  ,trend
06:13:57   4  ,gatt
06:13:57   5  ,COUNT(pair)
06:13:57   6  ,AVG(g6)
06:13:57   7  FROM svm6162
06:13:57   8  GROUP BY pair,trend,gatt
06:13:57   9  ORDER BY pair,trend,gatt
06:13:57  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6667 -.00219312
ech_usd 	-1 up	      3675 .003544297
ech_usd 	-1		16
ech_usd 	 1 nup	      6544  -.0023167
ech_usd 	 1 up	      2879 .003821987
ech_usd 	 1		56

6 rows selected.

Elapsed: 00:00:00.03
06:13:57 SQL> 
06:13:57 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
06:13:57 SQL> CREATE TABLE modsrc COMPRESS AS
06:13:57   2  SELECT
06:13:57   3  pair
06:13:57   4  ,ydate
06:13:57   5  ,prdate
06:13:57   6  ,trend
06:13:57   7  ,g6
06:13:57   8  ,gatt
06:13:57   9  ,gattn
06:13:57  10  FROM svm6162
06:13:57  11  /

Table created.

Elapsed: 00:00:00.10
06:13:57 SQL> 
06:13:57 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
06:13:57 SQL> 
06:13:57 SQL> DROP   TABLE ech_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
06:13:57 SQL> CREATE TABLE ech_ms610 COMPRESS AS
06:13:57   2  SELECT
06:13:57   3  ydate
06:13:57   4  ,trend ech_trend
06:13:57   5  ,g6    ech_g6
06:13:57   6  ,gatt  ech_gatt
06:13:57   7  ,gattn ech_gattn
06:13:57   8  FROM modsrc
06:13:57   9  /

Table created.

Elapsed: 00:00:00.06
06:13:57 SQL> 
06:13:57 SQL> ANALYZE TABLE ech_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
06:13:58 SQL> 
06:13:58 SQL> -- I need a copy of the attributes:
06:13:58 SQL> 
06:13:58 SQL> 
06:13:58 SQL> DROP   TABLE ech_att;

Table dropped.

Elapsed: 00:00:00.04
06:13:58 SQL> CREATE TABLE ech_att COMPRESS AS
06:13:58   2  SELECT
06:13:58   3  ydate
06:13:58   4  ,att00 ech_att00
06:13:58   5  ,att01 ech_att01
06:13:58   6  ,att02 ech_att02
06:13:58   7  ,att03 ech_att03
06:13:58   8  ,att04 ech_att04
06:13:58   9  ,att05 ech_att05
06:13:58  10  ,att06 ech_att06
06:13:58  11  ,att07 ech_att07
06:13:58  12  ,att08 ech_att08
06:13:58  13  ,att09 ech_att09
06:13:58  14  ,att10 ech_att10
06:13:58  15  ,att11 ech_att11
06:13:58  16  ,att12 ech_att12
06:13:58  17  ,att13 ech_att13
06:13:58  18  ,att14 ech_att14
06:13:58  19  ,att15 ech_att15
06:13:58  20  ,att16 ech_att16
06:13:58  21  ,att17 ech_att17
06:13:58  22  ,att18 ech_att18
06:13:58  23  ,att19 ech_att19
06:13:58  24  ,att20 ech_att20
06:13:58  25  ,att21 ech_att21
06:13:58  26  ,att22 ech_att22
06:13:58  27  ,att23 ech_att23
06:13:58  28  ,att24 ech_att24
06:13:58  29  ,att25 ech_att25
06:13:58  30  ,att26 ech_att26
06:13:58  31  ,att27 ech_att27
06:13:58  32  ,att28 ech_att28
06:13:58  33  ,att29 ech_att29
06:13:58  34  ,att30 ech_att30
06:13:58  35  ,att31 ech_att31
06:13:58  36  ,att32 ech_att32
06:13:58  37  ,att33 ech_att33
06:13:58  38  ,att34 ech_att34
06:13:58  39  ,att35 ech_att35
06:13:58  40  ,att36 ech_att36
06:13:58  41  ,att37 ech_att37
06:13:58  42  FROM svm6162
06:13:58  43  /

Table created.

Elapsed: 00:00:00.20
06:13:58 SQL> 
06:13:58 SQL> ANALYZE TABLE ech_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.53
06:13:58 SQL> 
06:13:58 SQL> -- rpt
06:13:58 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19837

Elapsed: 00:00:00.78
06:13:59 SQL> SELECT COUNT(*)FROM ech_att;

  COUNT(*)
----------
     19837

Elapsed: 00:00:00.00
06:13:59 SQL> 
06:13:59 SQL> --
06:13:59 SQL> -- egb610.sql
06:13:59 SQL> --
06:13:59 SQL> 
06:13:59 SQL> -- Creates views and tables for backtesting a forex SVM strategy
06:13:59 SQL> 
06:13:59 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.40
06:14:00 SQL> 
06:14:00 SQL> -- I created di5min here:
06:14:00 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
06:14:00 SQL> 
06:14:00 SQL> CREATE OR REPLACE VIEW svm6102 AS
06:14:00   2  SELECT
06:14:00   3  pair
06:14:00   4  ,ydate
06:14:00   5  ,prdate
06:14:00   6  ,rownum rnum -- acts as t in my time-series
06:14:00   7  ,clse
06:14:00   8  -- Derive a bunch of attributes from clse, the latest price:
06:14:00   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
06:14:00  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
06:14:00  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
06:14:00  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
06:14:00  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
06:14:00  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
06:14:00  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
06:14:00  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
06:14:00  17  --
06:14:00  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
06:14:00  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
06:14:00  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
06:14:00  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
06:14:00  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
06:14:00  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
06:14:00  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
06:14:00  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
06:14:00  26  --
06:14:00  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
06:14:00  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
06:14:00  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
06:14:00  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
06:14:00  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
06:14:00  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
06:14:00  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
06:14:00  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
06:14:00  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
06:14:00  36  FROM di5min WHERE pair LIKE'%egb%'
06:14:00  37  AND ydate > sysdate - 95
06:14:00  38  ORDER BY ydate
06:14:00  39  /

View created.

Elapsed: 00:00:00.04
06:14:00 SQL> 
06:14:00 SQL> -- rpt
06:14:00 SQL> 
06:14:00 SQL> SELECT
06:14:00   2  pair
06:14:00   3  ,COUNT(pair)
06:14:00   4  ,MIN(clse),MAX(clse)
06:14:00   5  ,MIN(avg6),MAX(avg6)
06:14:00   6  ,MIN(ydate),MAX(ydate)
06:14:00   7  FROM svm6102
06:14:00   8  GROUP BY pair
06:14:00   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
egb_usd       19836 .833520557 .893920122 .834199029 .892400287 2010-09-27 06:15:01 2010-12-31 06:05:00

Elapsed: 00:00:00.94
06:14:01 SQL> 
06:14:01 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
06:14:01 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.27
06:14:01 SQL> CREATE TABLE svm6122 COMPRESS AS
06:14:01   2  SELECT
06:14:01   3  pair
06:14:01   4  ,ydate
06:14:01   5  ,prdate
06:14:01   6  ,clse
06:14:01   7  -- g6 is important. I want to predict g6:
06:14:01   8  ,ld6 - clse g6
06:14:01   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
06:14:01  10  -- I want more attributes from the ones I derived above:
06:14:01  11  -- clse relation to moving-min
06:14:01  12  ,clse-min4  cm4
06:14:01  13  ,clse-min6  cm6
06:14:01  14  ,clse-min8  cm8
06:14:01  15  ,clse-min10 cm10
06:14:01  16  ,clse-min12 cm12
06:14:01  17  ,clse-min14 cm14
06:14:01  18  ,clse-min16 cm16
06:14:01  19  ,clse-min18 cm18
06:14:01  20  -- clse relation to moving-avg
06:14:01  21  ,clse-avg4  ca4
06:14:01  22  ,clse-avg6  ca6
06:14:01  23  ,clse-avg8  ca8
06:14:01  24  ,clse-avg10 ca10
06:14:01  25  ,clse-avg12 ca12
06:14:01  26  ,clse-avg14 ca14
06:14:01  27  ,clse-avg16 ca16
06:14:01  28  ,clse-avg18 ca18
06:14:01  29  -- clse relation to moving-max
06:14:01  30  ,clse-max4  cx4
06:14:01  31  ,clse-max6  cx6
06:14:01  32  ,clse-max8  cx8
06:14:01  33  ,clse-max10 cx10
06:14:01  34  ,clse-max12 cx12
06:14:01  35  ,clse-max14 cx14
06:14:01  36  ,clse-max16 cx16
06:14:01  37  ,clse-max18 cx18
06:14:01  38  -- Derive more attributes.
06:14:01  39  -- I want to use CORR() here to help SVM see the shape of the series.
06:14:01  40  -- But COVAR_POP is more stable:
06:14:01  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
06:14:01  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
06:14:01  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
06:14:01  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
06:14:01  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
06:14:01  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
06:14:01  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
06:14:01  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
06:14:01  49  -- Derive date related attributes:
06:14:01  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
06:14:01  51  ,0+TO_CHAR(ydate,'D')d
06:14:01  52  ,0+TO_CHAR(ydate,'W')w
06:14:01  53  -- mpm stands for minutes-past-midnight:
06:14:01  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
06:14:01  55  -- mph stands for minutes-past-hour:
06:14:01  56  ,0+TO_CHAR(ydate,'MI')mph
06:14:01  57  FROM svm6102
06:14:01  58  ORDER BY ydate
06:14:01  59  /

Table created.

Elapsed: 00:00:02.49
06:14:03 SQL> 
06:14:03 SQL> -- rpt
06:14:03 SQL> 
06:14:03 SQL> SELECT
06:14:03   2  pair
06:14:03   3  ,COUNT(pair)
06:14:03   4  ,MIN(clse),MAX(clse)
06:14:03   5  ,MIN(ydate),MAX(ydate)
06:14:03   6  FROM svm6122
06:14:03   7  GROUP BY pair
06:14:03   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
egb_usd       19836 .833520557 .893920122 2010-09-27 06:15:01 2010-12-31 06:05:00

Elapsed: 00:00:00.07
06:14:03 SQL> 
06:14:03 SQL> -- Prepare for derivation of NTILE based params:
06:14:03 SQL> 
06:14:03 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.38
06:14:04 SQL> CREATE TABLE svm6142 COMPRESS AS
06:14:04   2  SELECT
06:14:04   3  pair
06:14:04   4  ,ydate
06:14:04   5  ,prdate
06:14:04   6  ,clse
06:14:04   7  ,g6
06:14:04   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
06:14:04   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
06:14:04  10  ,CASE WHEN trend IS NULL THEN 1
06:14:04  11  	    WHEN trend =0      THEN 1
06:14:04  12  	    ELSE trend END trend
06:14:04  13  ,cm4
06:14:04  14  ,cm6
06:14:04  15  ,cm8
06:14:04  16  ,cm10
06:14:04  17  ,cm12
06:14:04  18  ,cm14
06:14:04  19  ,cm16
06:14:04  20  ,cm18
06:14:04  21  --
06:14:04  22  ,ca4
06:14:04  23  ,ca6
06:14:04  24  ,ca8
06:14:04  25  ,ca10
06:14:04  26  ,ca12
06:14:04  27  ,ca14
06:14:04  28  ,ca16
06:14:04  29  ,ca18
06:14:04  30  --
06:14:04  31  ,cx4
06:14:04  32  ,cx6
06:14:04  33  ,cx8
06:14:04  34  ,cx10
06:14:04  35  ,cx12
06:14:04  36  ,cx14
06:14:04  37  ,cx16
06:14:04  38  ,cx18
06:14:04  39  --
06:14:04  40  ,crr4
06:14:04  41  ,crr6
06:14:04  42  ,crr8
06:14:04  43  ,crr10
06:14:04  44  ,crr12
06:14:04  45  ,crr14
06:14:04  46  ,crr16
06:14:04  47  ,crr18
06:14:04  48  --
06:14:04  49  ,hh
06:14:04  50  ,d
06:14:04  51  ,w
06:14:04  52  ,mpm
06:14:04  53  ,mph
06:14:04  54  FROM svm6122
06:14:04  55  ORDER BY ydate
06:14:04  56  /

Table created.

Elapsed: 00:00:00.43
06:14:04 SQL> 
06:14:04 SQL> -- rpt
06:14:04 SQL> 
06:14:04 SQL> SELECT
06:14:04   2  pair
06:14:04   3  ,trend
06:14:04   4  ,gatt
06:14:04   5  ,COUNT(pair)
06:14:04   6  ,AVG(g6)
06:14:04   7  FROM svm6142
06:14:04   8  GROUP BY pair,trend,gatt
06:14:04   9  ORDER BY pair,trend,gatt
06:14:04  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7408 -.00098556
egb_usd 	-1 up	      2777 .003089568
egb_usd 	-1		70
egb_usd 	 1 nup	      6811 -.00127901
egb_usd 	 1 up	      2768 .002961387
egb_usd 	 1		 2

6 rows selected.

Elapsed: 00:00:00.05
06:14:04 SQL> 
06:14:04 SQL> 
06:14:04 SQL> -- Derive NTILE based params:
06:14:04 SQL> 
06:14:04 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.32
06:14:05 SQL> CREATE TABLE svm6162 COMPRESS AS
06:14:05   2  SELECT
06:14:05   3  pair
06:14:05   4  ,ydate
06:14:05   5  ,prdate
06:14:05   6  ,clse
06:14:05   7  ,g6
06:14:05   8  ,gatt
06:14:05   9  ,gattn
06:14:05  10  ,trend
06:14:05  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
06:14:05  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
06:14:05  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
06:14:05  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
06:14:05  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
06:14:05  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
06:14:05  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
06:14:05  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
06:14:05  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
06:14:05  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
06:14:05  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
06:14:05  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
06:14:05  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
06:14:05  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
06:14:05  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
06:14:05  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
06:14:05  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
06:14:05  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
06:14:05  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
06:14:05  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
06:14:05  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
06:14:05  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
06:14:05  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
06:14:05  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
06:14:05  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
06:14:05  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
06:14:05  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
06:14:05  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
06:14:05  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
06:14:05  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
06:14:05  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
06:14:05  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
06:14:05  43  ,hh  att32
06:14:05  44  ,d   att33
06:14:05  45  ,w   att34
06:14:05  46  ,mpm att35
06:14:05  47  ,mph att36
06:14:05  48  ,trend att37
06:14:05  49  FROM svm6142
06:14:05  50  ORDER BY ydate
06:14:05  51  /

Table created.

Elapsed: 00:00:05.68
06:14:10 SQL> 
06:14:10 SQL> -- rpt
06:14:10 SQL> 
06:14:10 SQL> SELECT
06:14:10   2  pair
06:14:10   3  ,trend
06:14:10   4  ,gatt
06:14:10   5  ,COUNT(pair)
06:14:10   6  ,AVG(g6)
06:14:10   7  FROM svm6162
06:14:10   8  GROUP BY pair,trend,gatt
06:14:10   9  ORDER BY pair,trend,gatt
06:14:10  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7408 -.00098556
egb_usd 	-1 up	      2777 .003089568
egb_usd 	-1		70
egb_usd 	 1 nup	      6811 -.00127901
egb_usd 	 1 up	      2768 .002961387
egb_usd 	 1		 2

6 rows selected.

Elapsed: 00:00:00.04
06:14:10 SQL> 
06:14:10 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.82
06:14:11 SQL> CREATE TABLE modsrc COMPRESS AS
06:14:11   2  SELECT
06:14:11   3  pair
06:14:11   4  ,ydate
06:14:11   5  ,prdate
06:14:11   6  ,trend
06:14:11   7  ,g6
06:14:11   8  ,gatt
06:14:11   9  ,gattn
06:14:11  10  FROM svm6162
06:14:11  11  /

Table created.

Elapsed: 00:00:00.08
06:14:11 SQL> 
06:14:11 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
06:14:11 SQL> 
06:14:11 SQL> DROP   TABLE egb_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
06:14:11 SQL> CREATE TABLE egb_ms610 COMPRESS AS
06:14:11   2  SELECT
06:14:11   3  ydate
06:14:11   4  ,trend egb_trend
06:14:11   5  ,g6    egb_g6
06:14:11   6  ,gatt  egb_gatt
06:14:11   7  ,gattn egb_gattn
06:14:11   8  FROM modsrc
06:14:11   9  /

Table created.

Elapsed: 00:00:00.06
06:14:12 SQL> 
06:14:12 SQL> ANALYZE TABLE egb_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
06:14:12 SQL> 
06:14:12 SQL> -- I need a copy of the attributes:
06:14:12 SQL> 
06:14:12 SQL> 
06:14:12 SQL> DROP   TABLE egb_att;

Table dropped.

Elapsed: 00:00:00.05
06:14:12 SQL> CREATE TABLE egb_att COMPRESS AS
06:14:12   2  SELECT
06:14:12   3  ydate
06:14:12   4  ,att00 egb_att00
06:14:12   5  ,att01 egb_att01
06:14:12   6  ,att02 egb_att02
06:14:12   7  ,att03 egb_att03
06:14:12   8  ,att04 egb_att04
06:14:12   9  ,att05 egb_att05
06:14:12  10  ,att06 egb_att06
06:14:12  11  ,att07 egb_att07
06:14:12  12  ,att08 egb_att08
06:14:12  13  ,att09 egb_att09
06:14:12  14  ,att10 egb_att10
06:14:12  15  ,att11 egb_att11
06:14:12  16  ,att12 egb_att12
06:14:12  17  ,att13 egb_att13
06:14:12  18  ,att14 egb_att14
06:14:12  19  ,att15 egb_att15
06:14:12  20  ,att16 egb_att16
06:14:12  21  ,att17 egb_att17
06:14:12  22  ,att18 egb_att18
06:14:12  23  ,att19 egb_att19
06:14:12  24  ,att20 egb_att20
06:14:12  25  ,att21 egb_att21
06:14:12  26  ,att22 egb_att22
06:14:12  27  ,att23 egb_att23
06:14:12  28  ,att24 egb_att24
06:14:12  29  ,att25 egb_att25
06:14:12  30  ,att26 egb_att26
06:14:12  31  ,att27 egb_att27
06:14:12  32  ,att28 egb_att28
06:14:12  33  ,att29 egb_att29
06:14:12  34  ,att30 egb_att30
06:14:12  35  ,att31 egb_att31
06:14:12  36  ,att32 egb_att32
06:14:12  37  ,att33 egb_att33
06:14:12  38  ,att34 egb_att34
06:14:12  39  ,att35 egb_att35
06:14:12  40  ,att36 egb_att36
06:14:12  41  ,att37 egb_att37
06:14:12  42  FROM svm6162
06:14:12  43  /

Table created.

Elapsed: 00:00:00.25
06:14:12 SQL> 
06:14:12 SQL> ANALYZE TABLE egb_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
06:14:12 SQL> 
06:14:12 SQL> -- rpt
06:14:12 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19836

Elapsed: 00:00:00.97
06:14:13 SQL> SELECT COUNT(*)FROM egb_att;

  COUNT(*)
----------
     19836

Elapsed: 00:00:00.00
06:14:13 SQL> 
06:14:13 SQL> --
06:14:13 SQL> -- ejp610.sql
06:14:13 SQL> --
06:14:13 SQL> 
06:14:13 SQL> -- Creates views and tables for backtesting a forex SVM strategy
06:14:13 SQL> 
06:14:13 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.35
06:14:14 SQL> 
06:14:14 SQL> -- I created di5min here:
06:14:14 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
06:14:14 SQL> 
06:14:14 SQL> CREATE OR REPLACE VIEW svm6102 AS
06:14:14   2  SELECT
06:14:14   3  pair
06:14:14   4  ,ydate
06:14:14   5  ,prdate
06:14:14   6  ,rownum rnum -- acts as t in my time-series
06:14:14   7  ,clse
06:14:14   8  -- Derive a bunch of attributes from clse, the latest price:
06:14:14   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
06:14:14  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
06:14:14  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
06:14:14  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
06:14:14  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
06:14:14  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
06:14:14  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
06:14:14  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
06:14:14  17  --
06:14:14  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
06:14:14  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
06:14:14  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
06:14:14  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
06:14:14  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
06:14:14  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
06:14:14  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
06:14:14  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
06:14:14  26  --
06:14:14  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
06:14:14  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
06:14:14  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
06:14:14  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
06:14:14  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
06:14:14  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
06:14:14  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
06:14:14  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
06:14:14  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
06:14:14  36  FROM di5min WHERE pair LIKE'%ejp%'
06:14:14  37  AND ydate > sysdate - 95
06:14:14  38  ORDER BY ydate
06:14:14  39  /

View created.

Elapsed: 00:00:00.03
06:14:14 SQL> 
06:14:14 SQL> -- rpt
06:14:14 SQL> 
06:14:14 SQL> SELECT
06:14:14   2  pair
06:14:14   3  ,COUNT(pair)
06:14:14   4  ,MIN(clse),MAX(clse)
06:14:14   5  ,MIN(avg6),MAX(avg6)
06:14:14   6  ,MIN(ydate),MAX(ydate)
06:14:14   7  FROM svm6102
06:14:14   8  GROUP BY pair
06:14:14   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ejp_usd       19834 107.643765	115.63485 107.776148 115.509678 2010-09-27 06:15:01 2010-12-31 06:05:00

Elapsed: 00:00:00.84
06:14:15 SQL> 
06:14:15 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
06:14:15 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.27
06:14:15 SQL> CREATE TABLE svm6122 COMPRESS AS
06:14:15   2  SELECT
06:14:15   3  pair
06:14:15   4  ,ydate
06:14:15   5  ,prdate
06:14:15   6  ,clse
06:14:15   7  -- g6 is important. I want to predict g6:
06:14:15   8  ,ld6 - clse g6
06:14:15   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
06:14:15  10  -- I want more attributes from the ones I derived above:
06:14:15  11  -- clse relation to moving-min
06:14:15  12  ,clse-min4  cm4
06:14:15  13  ,clse-min6  cm6
06:14:15  14  ,clse-min8  cm8
06:14:15  15  ,clse-min10 cm10
06:14:15  16  ,clse-min12 cm12
06:14:15  17  ,clse-min14 cm14
06:14:15  18  ,clse-min16 cm16
06:14:15  19  ,clse-min18 cm18
06:14:15  20  -- clse relation to moving-avg
06:14:15  21  ,clse-avg4  ca4
06:14:15  22  ,clse-avg6  ca6
06:14:15  23  ,clse-avg8  ca8
06:14:15  24  ,clse-avg10 ca10
06:14:15  25  ,clse-avg12 ca12
06:14:15  26  ,clse-avg14 ca14
06:14:15  27  ,clse-avg16 ca16
06:14:15  28  ,clse-avg18 ca18
06:14:15  29  -- clse relation to moving-max
06:14:15  30  ,clse-max4  cx4
06:14:15  31  ,clse-max6  cx6
06:14:15  32  ,clse-max8  cx8
06:14:15  33  ,clse-max10 cx10
06:14:15  34  ,clse-max12 cx12
06:14:15  35  ,clse-max14 cx14
06:14:15  36  ,clse-max16 cx16
06:14:15  37  ,clse-max18 cx18
06:14:15  38  -- Derive more attributes.
06:14:15  39  -- I want to use CORR() here to help SVM see the shape of the series.
06:14:15  40  -- But COVAR_POP is more stable:
06:14:15  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
06:14:15  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
06:14:15  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
06:14:15  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
06:14:15  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
06:14:15  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
06:14:15  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
06:14:15  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
06:14:15  49  -- Derive date related attributes:
06:14:15  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
06:14:15  51  ,0+TO_CHAR(ydate,'D')d
06:14:15  52  ,0+TO_CHAR(ydate,'W')w
06:14:15  53  -- mpm stands for minutes-past-midnight:
06:14:15  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
06:14:15  55  -- mph stands for minutes-past-hour:
06:14:15  56  ,0+TO_CHAR(ydate,'MI')mph
06:14:15  57  FROM svm6102
06:14:15  58  ORDER BY ydate
06:14:15  59  /

Table created.

Elapsed: 00:00:02.12
06:14:17 SQL> 
06:14:17 SQL> -- rpt
06:14:17 SQL> 
06:14:17 SQL> SELECT
06:14:17   2  pair
06:14:17   3  ,COUNT(pair)
06:14:17   4  ,MIN(clse),MAX(clse)
06:14:17   5  ,MIN(ydate),MAX(ydate)
06:14:17   6  FROM svm6122
06:14:17   7  GROUP BY pair
06:14:17   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ejp_usd       19834 107.643765	115.63485 2010-09-27 06:15:01 2010-12-31 06:05:00

Elapsed: 00:00:00.04
06:14:17 SQL> 
06:14:17 SQL> -- Prepare for derivation of NTILE based params:
06:14:17 SQL> 
06:14:17 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.22
06:14:17 SQL> CREATE TABLE svm6142 COMPRESS AS
06:14:17   2  SELECT
06:14:17   3  pair
06:14:17   4  ,ydate
06:14:17   5  ,prdate
06:14:17   6  ,clse
06:14:17   7  ,g6
06:14:17   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
06:14:17   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
06:14:17  10  ,CASE WHEN trend IS NULL THEN 1
06:14:17  11  	    WHEN trend =0      THEN 1
06:14:17  12  	    ELSE trend END trend
06:14:17  13  ,cm4
06:14:17  14  ,cm6
06:14:17  15  ,cm8
06:14:17  16  ,cm10
06:14:17  17  ,cm12
06:14:17  18  ,cm14
06:14:17  19  ,cm16
06:14:17  20  ,cm18
06:14:17  21  --
06:14:17  22  ,ca4
06:14:17  23  ,ca6
06:14:17  24  ,ca8
06:14:17  25  ,ca10
06:14:17  26  ,ca12
06:14:17  27  ,ca14
06:14:17  28  ,ca16
06:14:17  29  ,ca18
06:14:17  30  --
06:14:17  31  ,cx4
06:14:17  32  ,cx6
06:14:17  33  ,cx8
06:14:17  34  ,cx10
06:14:17  35  ,cx12
06:14:17  36  ,cx14
06:14:17  37  ,cx16
06:14:17  38  ,cx18
06:14:17  39  --
06:14:17  40  ,crr4
06:14:17  41  ,crr6
06:14:17  42  ,crr8
06:14:17  43  ,crr10
06:14:17  44  ,crr12
06:14:17  45  ,crr14
06:14:17  46  ,crr16
06:14:17  47  ,crr18
06:14:17  48  --
06:14:17  49  ,hh
06:14:17  50  ,d
06:14:17  51  ,w
06:14:17  52  ,mpm
06:14:17  53  ,mph
06:14:17  54  FROM svm6122
06:14:17  55  ORDER BY ydate
06:14:17  56  /

Table created.

Elapsed: 00:00:00.39
06:14:18 SQL> 
06:14:18 SQL> -- rpt
06:14:18 SQL> 
06:14:18 SQL> SELECT
06:14:18   2  pair
06:14:18   3  ,trend
06:14:18   4  ,gatt
06:14:18   5  ,COUNT(pair)
06:14:18   6  ,AVG(g6)
06:14:18   7  FROM svm6142
06:14:18   8  GROUP BY pair,trend,gatt
06:14:18   9  ORDER BY pair,trend,gatt
06:14:18  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      4868  -.3233642
ejp_usd 	-1 up	      5055 .268850922
ejp_usd 	-1		31
ejp_usd 	 1 nup	      5094 -.28742449
ejp_usd 	 1 up	      4745 .278732958
ejp_usd 	 1		41

6 rows selected.

Elapsed: 00:00:00.04
06:14:18 SQL> 
06:14:18 SQL> 
06:14:18 SQL> -- Derive NTILE based params:
06:14:18 SQL> 
06:14:18 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.13
06:14:18 SQL> CREATE TABLE svm6162 COMPRESS AS
06:14:18   2  SELECT
06:14:18   3  pair
06:14:18   4  ,ydate
06:14:18   5  ,prdate
06:14:18   6  ,clse
06:14:18   7  ,g6
06:14:18   8  ,gatt
06:14:18   9  ,gattn
06:14:18  10  ,trend
06:14:18  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
06:14:18  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
06:14:18  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
06:14:18  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
06:14:18  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
06:14:18  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
06:14:18  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
06:14:18  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
06:14:18  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
06:14:18  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
06:14:18  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
06:14:18  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
06:14:18  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
06:14:18  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
06:14:18  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
06:14:18  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
06:14:18  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
06:14:18  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
06:14:18  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
06:14:18  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
06:14:18  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
06:14:18  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
06:14:18  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
06:14:18  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
06:14:18  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
06:14:18  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
06:14:18  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
06:14:18  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
06:14:18  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
06:14:18  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
06:14:18  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
06:14:18  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
06:14:18  43  ,hh  att32
06:14:18  44  ,d   att33
06:14:18  45  ,w   att34
06:14:18  46  ,mpm att35
06:14:18  47  ,mph att36
06:14:18  48  ,trend att37
06:14:18  49  FROM svm6142
06:14:18  50  ORDER BY ydate
06:14:18  51  /

Table created.

Elapsed: 00:00:04.93
06:14:23 SQL> 
06:14:23 SQL> -- rpt
06:14:23 SQL> 
06:14:23 SQL> SELECT
06:14:23   2  pair
06:14:23   3  ,trend
06:14:23   4  ,gatt
06:14:23   5  ,COUNT(pair)
06:14:23   6  ,AVG(g6)
06:14:23   7  FROM svm6162
06:14:23   8  GROUP BY pair,trend,gatt
06:14:23   9  ORDER BY pair,trend,gatt
06:14:23  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      4868  -.3233642
ejp_usd 	-1 up	      5055 .268850922
ejp_usd 	-1		31
ejp_usd 	 1 nup	      5094 -.28742449
ejp_usd 	 1 up	      4745 .278732958
ejp_usd 	 1		41

6 rows selected.

Elapsed: 00:00:00.02
06:14:23 SQL> 
06:14:23 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
06:14:23 SQL> CREATE TABLE modsrc COMPRESS AS
06:14:23   2  SELECT
06:14:23   3  pair
06:14:23   4  ,ydate
06:14:23   5  ,prdate
06:14:23   6  ,trend
06:14:23   7  ,g6
06:14:23   8  ,gatt
06:14:23   9  ,gattn
06:14:23  10  FROM svm6162
06:14:23  11  /

Table created.

Elapsed: 00:00:00.08
06:14:23 SQL> 
06:14:23 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
06:14:23 SQL> 
06:14:23 SQL> DROP   TABLE ejp_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
06:14:23 SQL> CREATE TABLE ejp_ms610 COMPRESS AS
06:14:23   2  SELECT
06:14:23   3  ydate
06:14:23   4  ,trend ejp_trend
06:14:23   5  ,g6    ejp_g6
06:14:23   6  ,gatt  ejp_gatt
06:14:23   7  ,gattn ejp_gattn
06:14:23   8  FROM modsrc
06:14:23   9  /

Table created.

Elapsed: 00:00:00.08
06:14:23 SQL> 
06:14:23 SQL> ANALYZE TABLE ejp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
06:14:24 SQL> 
06:14:24 SQL> -- I need a copy of the attributes:
06:14:24 SQL> 
06:14:24 SQL> 
06:14:24 SQL> DROP   TABLE ejp_att;

Table dropped.

Elapsed: 00:00:00.06
06:14:24 SQL> CREATE TABLE ejp_att COMPRESS AS
06:14:24   2  SELECT
06:14:24   3  ydate
06:14:24   4  ,att00 ejp_att00
06:14:24   5  ,att01 ejp_att01
06:14:24   6  ,att02 ejp_att02
06:14:24   7  ,att03 ejp_att03
06:14:24   8  ,att04 ejp_att04
06:14:24   9  ,att05 ejp_att05
06:14:24  10  ,att06 ejp_att06
06:14:24  11  ,att07 ejp_att07
06:14:24  12  ,att08 ejp_att08
06:14:24  13  ,att09 ejp_att09
06:14:24  14  ,att10 ejp_att10
06:14:24  15  ,att11 ejp_att11
06:14:24  16  ,att12 ejp_att12
06:14:24  17  ,att13 ejp_att13
06:14:24  18  ,att14 ejp_att14
06:14:24  19  ,att15 ejp_att15
06:14:24  20  ,att16 ejp_att16
06:14:24  21  ,att17 ejp_att17
06:14:24  22  ,att18 ejp_att18
06:14:24  23  ,att19 ejp_att19
06:14:24  24  ,att20 ejp_att20
06:14:24  25  ,att21 ejp_att21
06:14:24  26  ,att22 ejp_att22
06:14:24  27  ,att23 ejp_att23
06:14:24  28  ,att24 ejp_att24
06:14:24  29  ,att25 ejp_att25
06:14:24  30  ,att26 ejp_att26
06:14:24  31  ,att27 ejp_att27
06:14:24  32  ,att28 ejp_att28
06:14:24  33  ,att29 ejp_att29
06:14:24  34  ,att30 ejp_att30
06:14:24  35  ,att31 ejp_att31
06:14:24  36  ,att32 ejp_att32
06:14:24  37  ,att33 ejp_att33
06:14:24  38  ,att34 ejp_att34
06:14:24  39  ,att35 ejp_att35
06:14:24  40  ,att36 ejp_att36
06:14:24  41  ,att37 ejp_att37
06:14:24  42  FROM svm6162
06:14:24  43  /

Table created.

Elapsed: 00:00:00.18
06:14:24 SQL> 
06:14:24 SQL> ANALYZE TABLE ejp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
06:14:24 SQL> 
06:14:24 SQL> -- rpt
06:14:24 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19834

Elapsed: 00:00:00.86
06:14:25 SQL> SELECT COUNT(*)FROM ejp_att;

  COUNT(*)
----------
     19834

Elapsed: 00:00:00.00
06:14:25 SQL> 
06:14:25 SQL> --
06:14:25 SQL> -- ajp610.sql
06:14:25 SQL> --
06:14:25 SQL> 
06:14:25 SQL> -- Creates views and tables for backtesting a forex SVM strategy
06:14:25 SQL> 
06:14:25 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:01.01
06:14:26 SQL> 
06:14:26 SQL> -- I created di5min here:
06:14:26 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
06:14:26 SQL> 
06:14:26 SQL> CREATE OR REPLACE VIEW svm6102 AS
06:14:26   2  SELECT
06:14:26   3  pair
06:14:26   4  ,ydate
06:14:26   5  ,prdate
06:14:26   6  ,rownum rnum -- acts as t in my time-series
06:14:26   7  ,clse
06:14:26   8  -- Derive a bunch of attributes from clse, the latest price:
06:14:26   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
06:14:26  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
06:14:26  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
06:14:26  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
06:14:26  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
06:14:26  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
06:14:26  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
06:14:26  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
06:14:26  17  --
06:14:26  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
06:14:26  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
06:14:26  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
06:14:26  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
06:14:26  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
06:14:26  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
06:14:26  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
06:14:26  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
06:14:26  26  --
06:14:26  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
06:14:26  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
06:14:26  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
06:14:26  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
06:14:26  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
06:14:26  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
06:14:26  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
06:14:26  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
06:14:26  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
06:14:26  36  FROM di5min WHERE pair LIKE'%ajp%'
06:14:26  37  AND ydate > sysdate - 95
06:14:26  38  ORDER BY ydate
06:14:26  39  /

View created.

Elapsed: 00:00:00.04
06:14:26 SQL> 
06:14:26 SQL> -- rpt
06:14:26 SQL> 
06:14:26 SQL> SELECT
06:14:26   2  pair
06:14:26   3  ,COUNT(pair)
06:14:26   4  ,MIN(clse),MAX(clse)
06:14:26   5  ,MIN(avg6),MAX(avg6)
06:14:26   6  ,MIN(ydate),MAX(ydate)
06:14:26   7  FROM svm6102
06:14:26   8  GROUP BY pair
06:14:26   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ajp_usd       19831  78.249976 83.6669853 78.5106193  83.546306 2010-09-27 06:15:01 2010-12-31 06:05:00

Elapsed: 00:00:00.77
06:14:27 SQL> 
06:14:27 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
06:14:27 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.32
06:14:27 SQL> CREATE TABLE svm6122 COMPRESS AS
06:14:27   2  SELECT
06:14:27   3  pair
06:14:27   4  ,ydate
06:14:27   5  ,prdate
06:14:27   6  ,clse
06:14:27   7  -- g6 is important. I want to predict g6:
06:14:27   8  ,ld6 - clse g6
06:14:27   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
06:14:27  10  -- I want more attributes from the ones I derived above:
06:14:27  11  -- clse relation to moving-min
06:14:27  12  ,clse-min4  cm4
06:14:27  13  ,clse-min6  cm6
06:14:27  14  ,clse-min8  cm8
06:14:27  15  ,clse-min10 cm10
06:14:27  16  ,clse-min12 cm12
06:14:27  17  ,clse-min14 cm14
06:14:27  18  ,clse-min16 cm16
06:14:27  19  ,clse-min18 cm18
06:14:27  20  -- clse relation to moving-avg
06:14:27  21  ,clse-avg4  ca4
06:14:27  22  ,clse-avg6  ca6
06:14:27  23  ,clse-avg8  ca8
06:14:27  24  ,clse-avg10 ca10
06:14:27  25  ,clse-avg12 ca12
06:14:27  26  ,clse-avg14 ca14
06:14:27  27  ,clse-avg16 ca16
06:14:27  28  ,clse-avg18 ca18
06:14:27  29  -- clse relation to moving-max
06:14:27  30  ,clse-max4  cx4
06:14:27  31  ,clse-max6  cx6
06:14:27  32  ,clse-max8  cx8
06:14:27  33  ,clse-max10 cx10
06:14:27  34  ,clse-max12 cx12
06:14:27  35  ,clse-max14 cx14
06:14:27  36  ,clse-max16 cx16
06:14:27  37  ,clse-max18 cx18
06:14:27  38  -- Derive more attributes.
06:14:27  39  -- I want to use CORR() here to help SVM see the shape of the series.
06:14:27  40  -- But COVAR_POP is more stable:
06:14:27  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
06:14:27  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
06:14:27  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
06:14:27  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
06:14:27  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
06:14:27  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
06:14:27  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
06:14:27  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
06:14:27  49  -- Derive date related attributes:
06:14:27  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
06:14:27  51  ,0+TO_CHAR(ydate,'D')d
06:14:27  52  ,0+TO_CHAR(ydate,'W')w
06:14:27  53  -- mpm stands for minutes-past-midnight:
06:14:27  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
06:14:27  55  -- mph stands for minutes-past-hour:
06:14:27  56  ,0+TO_CHAR(ydate,'MI')mph
06:14:27  57  FROM svm6102
06:14:27  58  ORDER BY ydate
06:14:27  59  /

Table created.

Elapsed: 00:00:02.04
06:14:29 SQL> 
06:14:29 SQL> -- rpt
06:14:29 SQL> 
06:14:29 SQL> SELECT
06:14:29   2  pair
06:14:29   3  ,COUNT(pair)
06:14:29   4  ,MIN(clse),MAX(clse)
06:14:29   5  ,MIN(ydate),MAX(ydate)
06:14:29   6  FROM svm6122
06:14:29   7  GROUP BY pair
06:14:29   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ajp_usd       19831  78.249976 83.6669853 2010-09-27 06:15:01 2010-12-31 06:05:00

Elapsed: 00:00:00.04
06:14:29 SQL> 
06:14:29 SQL> -- Prepare for derivation of NTILE based params:
06:14:29 SQL> 
06:14:29 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.25
06:14:30 SQL> CREATE TABLE svm6142 COMPRESS AS
06:14:30   2  SELECT
06:14:30   3  pair
06:14:30   4  ,ydate
06:14:30   5  ,prdate
06:14:30   6  ,clse
06:14:30   7  ,g6
06:14:30   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
06:14:30   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
06:14:30  10  ,CASE WHEN trend IS NULL THEN 1
06:14:30  11  	    WHEN trend =0      THEN 1
06:14:30  12  	    ELSE trend END trend
06:14:30  13  ,cm4
06:14:30  14  ,cm6
06:14:30  15  ,cm8
06:14:30  16  ,cm10
06:14:30  17  ,cm12
06:14:30  18  ,cm14
06:14:30  19  ,cm16
06:14:30  20  ,cm18
06:14:30  21  --
06:14:30  22  ,ca4
06:14:30  23  ,ca6
06:14:30  24  ,ca8
06:14:30  25  ,ca10
06:14:30  26  ,ca12
06:14:30  27  ,ca14
06:14:30  28  ,ca16
06:14:30  29  ,ca18
06:14:30  30  --
06:14:30  31  ,cx4
06:14:30  32  ,cx6
06:14:30  33  ,cx8
06:14:30  34  ,cx10
06:14:30  35  ,cx12
06:14:30  36  ,cx14
06:14:30  37  ,cx16
06:14:30  38  ,cx18
06:14:30  39  --
06:14:30  40  ,crr4
06:14:30  41  ,crr6
06:14:30  42  ,crr8
06:14:30  43  ,crr10
06:14:30  44  ,crr12
06:14:30  45  ,crr14
06:14:30  46  ,crr16
06:14:30  47  ,crr18
06:14:30  48  --
06:14:30  49  ,hh
06:14:30  50  ,d
06:14:30  51  ,w
06:14:30  52  ,mpm
06:14:30  53  ,mph
06:14:30  54  FROM svm6122
06:14:30  55  ORDER BY ydate
06:14:30  56  /

Table created.

Elapsed: 00:00:00.38
06:14:30 SQL> 
06:14:30 SQL> -- rpt
06:14:30 SQL> 
06:14:30 SQL> SELECT
06:14:30   2  pair
06:14:30   3  ,trend
06:14:30   4  ,gatt
06:14:30   5  ,COUNT(pair)
06:14:30   6  ,AVG(g6)
06:14:30   7  FROM svm6142
06:14:30   8  GROUP BY pair,trend,gatt
06:14:30   9  ORDER BY pair,trend,gatt
06:14:30  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ajp_usd 	-1 nup	      4172 -.22741243
ajp_usd 	-1 up	      5250  .21890088
ajp_usd 	-1		43
ajp_usd 	 1 nup	      5334 -.20033741
ajp_usd 	 1 up	      5003 .203229028
ajp_usd 	 1		29

6 rows selected.

Elapsed: 00:00:00.04
06:14:30 SQL> 
06:14:30 SQL> 
06:14:30 SQL> -- Derive NTILE based params:
06:14:30 SQL> 
06:14:30 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.18
06:14:30 SQL> CREATE TABLE svm6162 COMPRESS AS
06:14:30   2  SELECT
06:14:30   3  pair
06:14:30   4  ,ydate
06:14:30   5  ,prdate
06:14:30   6  ,clse
06:14:30   7  ,g6
06:14:30   8  ,gatt
06:14:30   9  ,gattn
06:14:30  10  ,trend
06:14:30  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
06:14:30  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
06:14:30  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
06:14:30  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
06:14:30  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
06:14:30  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
06:14:30  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
06:14:30  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
06:14:30  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
06:14:30  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
06:14:30  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
06:14:30  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
06:14:30  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
06:14:30  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
06:14:30  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
06:14:30  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
06:14:30  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
06:14:30  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
06:14:30  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
06:14:30  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
06:14:30  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
06:14:30  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
06:14:30  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
06:14:30  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
06:14:30  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
06:14:30  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
06:14:30  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
06:14:30  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
06:14:30  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
06:14:30  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
06:14:30  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
06:14:30  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
06:14:30  43  ,hh  att32
06:14:30  44  ,d   att33
06:14:30  45  ,w   att34
06:14:30  46  ,mpm att35
06:14:30  47  ,mph att36
06:14:30  48  ,trend att37
06:14:30  49  FROM svm6142
06:14:30  50  ORDER BY ydate
06:14:30  51  /

Table created.

Elapsed: 00:00:04.98
06:14:35 SQL> 
06:14:35 SQL> -- rpt
06:14:35 SQL> 
06:14:35 SQL> SELECT
06:14:35   2  pair
06:14:35   3  ,trend
06:14:35   4  ,gatt
06:14:35   5  ,COUNT(pair)
06:14:35   6  ,AVG(g6)
06:14:35   7  FROM svm6162
06:14:35   8  GROUP BY pair,trend,gatt
06:14:35   9  ORDER BY pair,trend,gatt
06:14:35  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ajp_usd 	-1 nup	      4172 -.22741243
ajp_usd 	-1 up	      5250  .21890088
ajp_usd 	-1		43
ajp_usd 	 1 nup	      5334 -.20033741
ajp_usd 	 1 up	      5003 .203229028
ajp_usd 	 1		29

6 rows selected.

Elapsed: 00:00:00.03
06:14:35 SQL> 
06:14:35 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
06:14:35 SQL> CREATE TABLE modsrc COMPRESS AS
06:14:35   2  SELECT
06:14:35   3  pair
06:14:35   4  ,ydate
06:14:35   5  ,prdate
06:14:35   6  ,trend
06:14:35   7  ,g6
06:14:35   8  ,gatt
06:14:35   9  ,gattn
06:14:35  10  FROM svm6162
06:14:35  11  /

Table created.

Elapsed: 00:00:00.09
06:14:35 SQL> 
06:14:35 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
06:14:36 SQL> 
06:14:36 SQL> DROP   TABLE ajp_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
06:14:36 SQL> CREATE TABLE ajp_ms610 COMPRESS AS
06:14:36   2  SELECT
06:14:36   3  ydate
06:14:36   4  ,trend ajp_trend
06:14:36   5  ,g6    ajp_g6
06:14:36   6  ,gatt  ajp_gatt
06:14:36   7  ,gattn ajp_gattn
06:14:36   8  FROM modsrc
06:14:36   9  /

Table created.

Elapsed: 00:00:00.10
06:14:36 SQL> 
06:14:36 SQL> ANALYZE TABLE ajp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
06:14:36 SQL> 
06:14:36 SQL> -- I need a copy of the attributes:
06:14:36 SQL> 
06:14:36 SQL> 
06:14:36 SQL> DROP   TABLE ajp_att;

Table dropped.

Elapsed: 00:00:00.05
06:14:36 SQL> CREATE TABLE ajp_att COMPRESS AS
06:14:36   2  SELECT
06:14:36   3  ydate
06:14:36   4  ,att00 ajp_att00
06:14:36   5  ,att01 ajp_att01
06:14:36   6  ,att02 ajp_att02
06:14:36   7  ,att03 ajp_att03
06:14:36   8  ,att04 ajp_att04
06:14:36   9  ,att05 ajp_att05
06:14:36  10  ,att06 ajp_att06
06:14:36  11  ,att07 ajp_att07
06:14:36  12  ,att08 ajp_att08
06:14:36  13  ,att09 ajp_att09
06:14:36  14  ,att10 ajp_att10
06:14:36  15  ,att11 ajp_att11
06:14:36  16  ,att12 ajp_att12
06:14:36  17  ,att13 ajp_att13
06:14:36  18  ,att14 ajp_att14
06:14:36  19  ,att15 ajp_att15
06:14:36  20  ,att16 ajp_att16
06:14:36  21  ,att17 ajp_att17
06:14:36  22  ,att18 ajp_att18
06:14:36  23  ,att19 ajp_att19
06:14:36  24  ,att20 ajp_att20
06:14:36  25  ,att21 ajp_att21
06:14:36  26  ,att22 ajp_att22
06:14:36  27  ,att23 ajp_att23
06:14:36  28  ,att24 ajp_att24
06:14:36  29  ,att25 ajp_att25
06:14:36  30  ,att26 ajp_att26
06:14:36  31  ,att27 ajp_att27
06:14:36  32  ,att28 ajp_att28
06:14:36  33  ,att29 ajp_att29
06:14:36  34  ,att30 ajp_att30
06:14:36  35  ,att31 ajp_att31
06:14:36  36  ,att32 ajp_att32
06:14:36  37  ,att33 ajp_att33
06:14:36  38  ,att34 ajp_att34
06:14:36  39  ,att35 ajp_att35
06:14:36  40  ,att36 ajp_att36
06:14:36  41  ,att37 ajp_att37
06:14:36  42  FROM svm6162
06:14:36  43  /

Table created.

Elapsed: 00:00:00.17
06:14:36 SQL> 
06:14:36 SQL> ANALYZE TABLE ajp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
06:14:37 SQL> 
06:14:37 SQL> -- rpt
06:14:37 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19831

Elapsed: 00:00:00.76
06:14:37 SQL> SELECT COUNT(*)FROM ajp_att;

  COUNT(*)
----------
     19831

Elapsed: 00:00:00.00
06:14:37 SQL> 
06:14:37 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
