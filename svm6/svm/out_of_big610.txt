
SQL*Plus: Release 11.2.0.1.0 Production on Wed Jan 5 02:30:33 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

02:30:33 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.01
02:30:33 SQL> 02:30:33 SQL> --
02:30:33 SQL> -- eur610.sql
02:30:33 SQL> --
02:30:33 SQL> 
02:30:33 SQL> -- Creates views and tables for backtesting a forex SVM strategy
02:30:33 SQL> 
02:30:33 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.03
02:30:33 SQL> 
02:30:33 SQL> -- I created di5min here:
02:30:33 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
02:30:33 SQL> 
02:30:33 SQL> CREATE OR REPLACE VIEW svm6102 AS
02:30:33   2  SELECT
02:30:33   3  pair
02:30:33   4  ,ydate
02:30:33   5  ,prdate
02:30:33   6  ,rownum rnum -- acts as t in my time-series
02:30:33   7  ,clse
02:30:33   8  -- Derive a bunch of attributes from clse, the latest price:
02:30:33   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
02:30:33  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
02:30:33  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
02:30:33  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
02:30:33  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
02:30:33  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
02:30:33  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
02:30:33  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
02:30:33  17  --
02:30:33  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
02:30:33  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
02:30:33  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
02:30:33  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
02:30:33  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
02:30:33  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
02:30:33  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
02:30:33  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
02:30:33  26  --
02:30:33  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
02:30:33  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
02:30:33  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
02:30:33  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
02:30:33  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
02:30:33  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
02:30:33  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
02:30:33  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
02:30:33  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
02:30:33  36  FROM di5min WHERE pair LIKE'%eur%'
02:30:33  37  AND ydate > sysdate - 95
02:30:33  38  ORDER BY ydate
02:30:33  39  /

View created.

Elapsed: 00:00:00.13
02:30:33 SQL> 
02:30:33 SQL> -- rpt
02:30:33 SQL> 
02:30:33 SQL> SELECT
02:30:33   2  pair
02:30:33   3  ,COUNT(pair)
02:30:33   4  ,MIN(clse),MAX(clse)
02:30:33   5  ,MIN(avg6),MAX(avg6)
02:30:33   6  ,MIN(ydate),MAX(ydate)
02:30:33   7  FROM svm6102
02:30:33   8  GROUP BY pair
02:30:33   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_usd       19309    1.29735	   1.4273 1.29875103 1.42436233 2010-10-03 20:55:01 2011-01-05 02:25:00

Elapsed: 00:00:00.94
02:30:34 SQL> 
02:30:34 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
02:30:34 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.23
02:30:35 SQL> CREATE TABLE svm6122 COMPRESS AS
02:30:35   2  SELECT
02:30:35   3  pair
02:30:35   4  ,ydate
02:30:35   5  ,prdate
02:30:35   6  ,clse
02:30:35   7  -- g6 is important. I want to predict g6:
02:30:35   8  ,ld6 - clse g6
02:30:35   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
02:30:35  10  -- I want more attributes from the ones I derived above:
02:30:35  11  -- clse relation to moving-min
02:30:35  12  ,clse-min4  cm4
02:30:35  13  ,clse-min6  cm6
02:30:35  14  ,clse-min8  cm8
02:30:35  15  ,clse-min10 cm10
02:30:35  16  ,clse-min12 cm12
02:30:35  17  ,clse-min14 cm14
02:30:35  18  ,clse-min16 cm16
02:30:35  19  ,clse-min18 cm18
02:30:35  20  -- clse relation to moving-avg
02:30:35  21  ,clse-avg4  ca4
02:30:35  22  ,clse-avg6  ca6
02:30:35  23  ,clse-avg8  ca8
02:30:35  24  ,clse-avg10 ca10
02:30:35  25  ,clse-avg12 ca12
02:30:35  26  ,clse-avg14 ca14
02:30:35  27  ,clse-avg16 ca16
02:30:35  28  ,clse-avg18 ca18
02:30:35  29  -- clse relation to moving-max
02:30:35  30  ,clse-max4  cx4
02:30:35  31  ,clse-max6  cx6
02:30:35  32  ,clse-max8  cx8
02:30:35  33  ,clse-max10 cx10
02:30:35  34  ,clse-max12 cx12
02:30:35  35  ,clse-max14 cx14
02:30:35  36  ,clse-max16 cx16
02:30:35  37  ,clse-max18 cx18
02:30:35  38  -- Derive more attributes.
02:30:35  39  -- I want to use CORR() here to help SVM see the shape of the series.
02:30:35  40  -- But COVAR_POP is more stable:
02:30:35  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
02:30:35  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
02:30:35  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
02:30:35  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
02:30:35  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
02:30:35  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
02:30:35  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
02:30:35  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
02:30:35  49  -- Derive date related attributes:
02:30:35  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
02:30:35  51  ,0+TO_CHAR(ydate,'D')d
02:30:35  52  ,0+TO_CHAR(ydate,'W')w
02:30:35  53  -- mpm stands for minutes-past-midnight:
02:30:35  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
02:30:35  55  -- mph stands for minutes-past-hour:
02:30:35  56  ,0+TO_CHAR(ydate,'MI')mph
02:30:35  57  FROM svm6102
02:30:35  58  ORDER BY ydate
02:30:35  59  /

Table created.

Elapsed: 00:00:02.35
02:30:37 SQL> 
02:30:37 SQL> -- rpt
02:30:37 SQL> 
02:30:37 SQL> SELECT
02:30:37   2  pair
02:30:37   3  ,COUNT(pair)
02:30:37   4  ,MIN(clse),MAX(clse)
02:30:37   5  ,MIN(ydate),MAX(ydate)
02:30:37   6  FROM svm6122
02:30:37   7  GROUP BY pair
02:30:37   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_usd       19309    1.29735	   1.4273 2010-10-03 20:55:01 2011-01-05 02:25:00

Elapsed: 00:00:00.05
02:30:37 SQL> 
02:30:37 SQL> -- Prepare for derivation of NTILE based params:
02:30:37 SQL> 
02:30:37 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.62
02:30:38 SQL> CREATE TABLE svm6142 COMPRESS AS
02:30:38   2  SELECT
02:30:38   3  pair
02:30:38   4  ,ydate
02:30:38   5  ,prdate
02:30:38   6  ,clse
02:30:38   7  ,g6
02:30:38   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
02:30:38   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
02:30:38  10  ,CASE WHEN trend IS NULL THEN 1
02:30:38  11  	    WHEN trend =0      THEN 1
02:30:38  12  	    ELSE trend END trend
02:30:38  13  ,cm4
02:30:38  14  ,cm6
02:30:38  15  ,cm8
02:30:38  16  ,cm10
02:30:38  17  ,cm12
02:30:38  18  ,cm14
02:30:38  19  ,cm16
02:30:38  20  ,cm18
02:30:38  21  --
02:30:38  22  ,ca4
02:30:38  23  ,ca6
02:30:38  24  ,ca8
02:30:38  25  ,ca10
02:30:38  26  ,ca12
02:30:38  27  ,ca14
02:30:38  28  ,ca16
02:30:38  29  ,ca18
02:30:38  30  --
02:30:38  31  ,cx4
02:30:38  32  ,cx6
02:30:38  33  ,cx8
02:30:38  34  ,cx10
02:30:38  35  ,cx12
02:30:38  36  ,cx14
02:30:38  37  ,cx16
02:30:38  38  ,cx18
02:30:38  39  --
02:30:38  40  ,crr4
02:30:38  41  ,crr6
02:30:38  42  ,crr8
02:30:38  43  ,crr10
02:30:38  44  ,crr12
02:30:38  45  ,crr14
02:30:38  46  ,crr16
02:30:38  47  ,crr18
02:30:38  48  --
02:30:38  49  ,hh
02:30:38  50  ,d
02:30:38  51  ,w
02:30:38  52  ,mpm
02:30:38  53  ,mph
02:30:38  54  FROM svm6122
02:30:38  55  ORDER BY ydate
02:30:38  56  /

Table created.

Elapsed: 00:00:00.38
02:30:38 SQL> 
02:30:38 SQL> -- rpt
02:30:38 SQL> 
02:30:38 SQL> SELECT
02:30:38   2  pair
02:30:38   3  ,trend
02:30:38   4  ,gatt
02:30:38   5  ,COUNT(pair)
02:30:38   6  ,AVG(g6)
02:30:38   7  FROM svm6142
02:30:38   8  GROUP BY pair,trend,gatt
02:30:38   9  ORDER BY pair,trend,gatt
02:30:38  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6149 -.00311381
eur_usd 	-1 up	      3560 .004455267
eur_usd 	-1		59
eur_usd 	 1 nup	      5823 -.00324859
eur_usd 	 1 up	      3705 .005071238
eur_usd 	 1		13

6 rows selected.

Elapsed: 00:00:00.05
02:30:38 SQL> 
02:30:38 SQL> 
02:30:38 SQL> -- Derive NTILE based params:
02:30:38 SQL> 
02:30:38 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.82
02:30:39 SQL> CREATE TABLE svm6162 COMPRESS AS
02:30:39   2  SELECT
02:30:39   3  pair
02:30:39   4  ,ydate
02:30:39   5  ,prdate
02:30:39   6  ,clse
02:30:39   7  ,g6
02:30:39   8  ,gatt
02:30:39   9  ,gattn
02:30:39  10  ,trend
02:30:39  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
02:30:39  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
02:30:39  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
02:30:39  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
02:30:39  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
02:30:39  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
02:30:39  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
02:30:39  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
02:30:39  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
02:30:39  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
02:30:39  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
02:30:39  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
02:30:39  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
02:30:39  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
02:30:39  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
02:30:39  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
02:30:39  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
02:30:39  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
02:30:39  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
02:30:39  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
02:30:39  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
02:30:39  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
02:30:39  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
02:30:39  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
02:30:39  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
02:30:39  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
02:30:39  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
02:30:39  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
02:30:39  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
02:30:39  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
02:30:39  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
02:30:39  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
02:30:39  43  ,hh  att32
02:30:39  44  ,d   att33
02:30:39  45  ,w   att34
02:30:39  46  ,mpm att35
02:30:39  47  ,mph att36
02:30:39  48  ,trend att37
02:30:39  49  FROM svm6142
02:30:39  50  ORDER BY ydate
02:30:39  51  /

Table created.

Elapsed: 00:00:04.71
02:30:44 SQL> 
02:30:44 SQL> -- rpt
02:30:44 SQL> 
02:30:44 SQL> SELECT
02:30:44   2  pair
02:30:44   3  ,trend
02:30:44   4  ,gatt
02:30:44   5  ,COUNT(pair)
02:30:44   6  ,AVG(g6)
02:30:44   7  FROM svm6162
02:30:44   8  GROUP BY pair,trend,gatt
02:30:44   9  ORDER BY pair,trend,gatt
02:30:44  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6149 -.00311381
eur_usd 	-1 up	      3560 .004455267
eur_usd 	-1		59
eur_usd 	 1 nup	      5823 -.00324859
eur_usd 	 1 up	      3705 .005071238
eur_usd 	 1		13

6 rows selected.

Elapsed: 00:00:00.03
02:30:44 SQL> 
02:30:44 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.32
02:30:44 SQL> CREATE TABLE modsrc COMPRESS AS
02:30:44   2  SELECT
02:30:44   3  pair
02:30:44   4  ,ydate
02:30:44   5  ,prdate
02:30:44   6  ,trend
02:30:44   7  ,g6
02:30:44   8  ,gatt
02:30:44   9  ,gattn
02:30:44  10  FROM svm6162
02:30:44  11  /

Table created.

Elapsed: 00:00:00.08
02:30:44 SQL> 
02:30:44 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.28
02:30:44 SQL> 
02:30:44 SQL> DROP   TABLE eur_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
02:30:44 SQL> CREATE TABLE eur_ms610 COMPRESS AS
02:30:44   2  SELECT
02:30:44   3  ydate
02:30:44   4  ,trend eur_trend
02:30:44   5  ,g6    eur_g6
02:30:44   6  ,gatt  eur_gatt
02:30:44   7  ,gattn eur_gattn
02:30:44   8  FROM modsrc
02:30:44   9  /

Table created.

Elapsed: 00:00:00.06
02:30:44 SQL> 
02:30:44 SQL> ANALYZE TABLE eur_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
02:30:45 SQL> 
02:30:45 SQL> -- I need a copy of the attributes:
02:30:45 SQL> 
02:30:45 SQL> 
02:30:45 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.04
02:30:45 SQL> CREATE TABLE eur_att COMPRESS AS
02:30:45   2  SELECT
02:30:45   3  ydate
02:30:45   4  ,att00 eur_att00
02:30:45   5  ,att01 eur_att01
02:30:45   6  ,att02 eur_att02
02:30:45   7  ,att03 eur_att03
02:30:45   8  ,att04 eur_att04
02:30:45   9  ,att05 eur_att05
02:30:45  10  ,att06 eur_att06
02:30:45  11  ,att07 eur_att07
02:30:45  12  ,att08 eur_att08
02:30:45  13  ,att09 eur_att09
02:30:45  14  ,att10 eur_att10
02:30:45  15  ,att11 eur_att11
02:30:45  16  ,att12 eur_att12
02:30:45  17  ,att13 eur_att13
02:30:45  18  ,att14 eur_att14
02:30:45  19  ,att15 eur_att15
02:30:45  20  ,att16 eur_att16
02:30:45  21  ,att17 eur_att17
02:30:45  22  ,att18 eur_att18
02:30:45  23  ,att19 eur_att19
02:30:45  24  ,att20 eur_att20
02:30:45  25  ,att21 eur_att21
02:30:45  26  ,att22 eur_att22
02:30:45  27  ,att23 eur_att23
02:30:45  28  ,att24 eur_att24
02:30:45  29  ,att25 eur_att25
02:30:45  30  ,att26 eur_att26
02:30:45  31  ,att27 eur_att27
02:30:45  32  ,att28 eur_att28
02:30:45  33  ,att29 eur_att29
02:30:45  34  ,att30 eur_att30
02:30:45  35  ,att31 eur_att31
02:30:45  36  ,att32 eur_att32
02:30:45  37  ,att33 eur_att33
02:30:45  38  ,att34 eur_att34
02:30:45  39  ,att35 eur_att35
02:30:45  40  ,att36 eur_att36
02:30:45  41  ,att37 eur_att37
02:30:45  42  FROM svm6162
02:30:45  43  /

Table created.

Elapsed: 00:00:00.17
02:30:45 SQL> 
02:30:45 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.50
02:30:45 SQL> 
02:30:45 SQL> -- rpt
02:30:45 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19309

Elapsed: 00:00:00.87
02:30:46 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     19309

Elapsed: 00:00:00.00
02:30:46 SQL> 
02:30:46 SQL> --
02:30:46 SQL> -- aud610.sql
02:30:46 SQL> --
02:30:46 SQL> 
02:30:46 SQL> -- Creates views and tables for backtesting a forex SVM strategy
02:30:46 SQL> 
02:30:46 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.41
02:30:47 SQL> 
02:30:47 SQL> -- I created di5min here:
02:30:47 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
02:30:47 SQL> 
02:30:47 SQL> CREATE OR REPLACE VIEW svm6102 AS
02:30:47   2  SELECT
02:30:47   3  pair
02:30:47   4  ,ydate
02:30:47   5  ,prdate
02:30:47   6  ,rownum rnum -- acts as t in my time-series
02:30:47   7  ,clse
02:30:47   8  -- Derive a bunch of attributes from clse, the latest price:
02:30:47   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
02:30:47  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
02:30:47  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
02:30:47  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
02:30:47  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
02:30:47  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
02:30:47  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
02:30:47  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
02:30:47  17  --
02:30:47  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
02:30:47  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
02:30:47  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
02:30:47  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
02:30:47  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
02:30:47  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
02:30:47  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
02:30:47  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
02:30:47  26  --
02:30:47  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
02:30:47  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
02:30:47  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
02:30:47  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
02:30:47  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
02:30:47  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
02:30:47  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
02:30:47  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
02:30:47  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
02:30:47  36  FROM di5min WHERE pair LIKE'%aud%'
02:30:47  37  AND ydate > sysdate - 95
02:30:47  38  ORDER BY ydate
02:30:47  39  /

View created.

Elapsed: 00:00:00.05
02:30:47 SQL> 
02:30:47 SQL> -- rpt
02:30:47 SQL> 
02:30:47 SQL> SELECT
02:30:47   2  pair
02:30:47   3  ,COUNT(pair)
02:30:47   4  ,MIN(clse),MAX(clse)
02:30:47   5  ,MIN(avg6),MAX(avg6)
02:30:47   6  ,MIN(ydate),MAX(ydate)
02:30:47   7  FROM svm6102
02:30:47   8  GROUP BY pair
02:30:47   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
aud_usd       19306	.95405	  1.02495 .957141438 1.02284247 2010-10-03 20:55:01 2011-01-05 02:25:00

Elapsed: 00:00:00.89
02:30:47 SQL> 
02:30:47 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
02:30:47 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.27
02:30:48 SQL> CREATE TABLE svm6122 COMPRESS AS
02:30:48   2  SELECT
02:30:48   3  pair
02:30:48   4  ,ydate
02:30:48   5  ,prdate
02:30:48   6  ,clse
02:30:48   7  -- g6 is important. I want to predict g6:
02:30:48   8  ,ld6 - clse g6
02:30:48   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
02:30:48  10  -- I want more attributes from the ones I derived above:
02:30:48  11  -- clse relation to moving-min
02:30:48  12  ,clse-min4  cm4
02:30:48  13  ,clse-min6  cm6
02:30:48  14  ,clse-min8  cm8
02:30:48  15  ,clse-min10 cm10
02:30:48  16  ,clse-min12 cm12
02:30:48  17  ,clse-min14 cm14
02:30:48  18  ,clse-min16 cm16
02:30:48  19  ,clse-min18 cm18
02:30:48  20  -- clse relation to moving-avg
02:30:48  21  ,clse-avg4  ca4
02:30:48  22  ,clse-avg6  ca6
02:30:48  23  ,clse-avg8  ca8
02:30:48  24  ,clse-avg10 ca10
02:30:48  25  ,clse-avg12 ca12
02:30:48  26  ,clse-avg14 ca14
02:30:48  27  ,clse-avg16 ca16
02:30:48  28  ,clse-avg18 ca18
02:30:48  29  -- clse relation to moving-max
02:30:48  30  ,clse-max4  cx4
02:30:48  31  ,clse-max6  cx6
02:30:48  32  ,clse-max8  cx8
02:30:48  33  ,clse-max10 cx10
02:30:48  34  ,clse-max12 cx12
02:30:48  35  ,clse-max14 cx14
02:30:48  36  ,clse-max16 cx16
02:30:48  37  ,clse-max18 cx18
02:30:48  38  -- Derive more attributes.
02:30:48  39  -- I want to use CORR() here to help SVM see the shape of the series.
02:30:48  40  -- But COVAR_POP is more stable:
02:30:48  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
02:30:48  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
02:30:48  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
02:30:48  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
02:30:48  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
02:30:48  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
02:30:48  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
02:30:48  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
02:30:48  49  -- Derive date related attributes:
02:30:48  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
02:30:48  51  ,0+TO_CHAR(ydate,'D')d
02:30:48  52  ,0+TO_CHAR(ydate,'W')w
02:30:48  53  -- mpm stands for minutes-past-midnight:
02:30:48  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
02:30:48  55  -- mph stands for minutes-past-hour:
02:30:48  56  ,0+TO_CHAR(ydate,'MI')mph
02:30:48  57  FROM svm6102
02:30:48  58  ORDER BY ydate
02:30:48  59  /

Table created.

Elapsed: 00:00:02.01
02:30:50 SQL> 
02:30:50 SQL> -- rpt
02:30:50 SQL> 
02:30:50 SQL> SELECT
02:30:50   2  pair
02:30:50   3  ,COUNT(pair)
02:30:50   4  ,MIN(clse),MAX(clse)
02:30:50   5  ,MIN(ydate),MAX(ydate)
02:30:50   6  FROM svm6122
02:30:50   7  GROUP BY pair
02:30:50   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
aud_usd       19306	.95405	  1.02495 2010-10-03 20:55:01 2011-01-05 02:25:00

Elapsed: 00:00:00.04
02:30:50 SQL> 
02:30:50 SQL> -- Prepare for derivation of NTILE based params:
02:30:50 SQL> 
02:30:50 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.30
02:30:50 SQL> CREATE TABLE svm6142 COMPRESS AS
02:30:50   2  SELECT
02:30:50   3  pair
02:30:50   4  ,ydate
02:30:50   5  ,prdate
02:30:50   6  ,clse
02:30:50   7  ,g6
02:30:50   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
02:30:50   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
02:30:50  10  ,CASE WHEN trend IS NULL THEN 1
02:30:50  11  	    WHEN trend =0      THEN 1
02:30:50  12  	    ELSE trend END trend
02:30:50  13  ,cm4
02:30:50  14  ,cm6
02:30:50  15  ,cm8
02:30:50  16  ,cm10
02:30:50  17  ,cm12
02:30:50  18  ,cm14
02:30:50  19  ,cm16
02:30:50  20  ,cm18
02:30:50  21  --
02:30:50  22  ,ca4
02:30:50  23  ,ca6
02:30:50  24  ,ca8
02:30:50  25  ,ca10
02:30:50  26  ,ca12
02:30:50  27  ,ca14
02:30:50  28  ,ca16
02:30:50  29  ,ca18
02:30:50  30  --
02:30:50  31  ,cx4
02:30:50  32  ,cx6
02:30:50  33  ,cx8
02:30:50  34  ,cx10
02:30:50  35  ,cx12
02:30:50  36  ,cx14
02:30:50  37  ,cx16
02:30:50  38  ,cx18
02:30:50  39  --
02:30:50  40  ,crr4
02:30:50  41  ,crr6
02:30:50  42  ,crr8
02:30:50  43  ,crr10
02:30:50  44  ,crr12
02:30:50  45  ,crr14
02:30:50  46  ,crr16
02:30:50  47  ,crr18
02:30:50  48  --
02:30:50  49  ,hh
02:30:50  50  ,d
02:30:50  51  ,w
02:30:50  52  ,mpm
02:30:50  53  ,mph
02:30:50  54  FROM svm6122
02:30:50  55  ORDER BY ydate
02:30:50  56  /

Table created.

Elapsed: 00:00:00.35
02:30:50 SQL> 
02:30:50 SQL> -- rpt
02:30:50 SQL> 
02:30:50 SQL> SELECT
02:30:50   2  pair
02:30:50   3  ,trend
02:30:50   4  ,gatt
02:30:50   5  ,COUNT(pair)
02:30:50   6  ,AVG(g6)
02:30:50   7  FROM svm6142
02:30:50   8  GROUP BY pair,trend,gatt
02:30:50   9  ORDER BY pair,trend,gatt
02:30:50  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5407 -.00219689
aud_usd 	-1 up	      3646 .003769261
aud_usd 	-1		42
aud_usd 	 1 nup	      6588 -.00212107
aud_usd 	 1 up	      3593 .004054752
aud_usd 	 1		30

6 rows selected.

Elapsed: 00:00:00.03
02:30:51 SQL> 
02:30:51 SQL> 
02:30:51 SQL> -- Derive NTILE based params:
02:30:51 SQL> 
02:30:51 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.14
02:30:51 SQL> CREATE TABLE svm6162 COMPRESS AS
02:30:51   2  SELECT
02:30:51   3  pair
02:30:51   4  ,ydate
02:30:51   5  ,prdate
02:30:51   6  ,clse
02:30:51   7  ,g6
02:30:51   8  ,gatt
02:30:51   9  ,gattn
02:30:51  10  ,trend
02:30:51  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
02:30:51  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
02:30:51  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
02:30:51  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
02:30:51  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
02:30:51  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
02:30:51  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
02:30:51  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
02:30:51  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
02:30:51  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
02:30:51  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
02:30:51  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
02:30:51  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
02:30:51  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
02:30:51  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
02:30:51  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
02:30:51  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
02:30:51  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
02:30:51  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
02:30:51  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
02:30:51  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
02:30:51  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
02:30:51  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
02:30:51  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
02:30:51  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
02:30:51  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
02:30:51  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
02:30:51  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
02:30:51  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
02:30:51  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
02:30:51  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
02:30:51  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
02:30:51  43  ,hh  att32
02:30:51  44  ,d   att33
02:30:51  45  ,w   att34
02:30:51  46  ,mpm att35
02:30:51  47  ,mph att36
02:30:51  48  ,trend att37
02:30:51  49  FROM svm6142
02:30:51  50  ORDER BY ydate
02:30:51  51  /

Table created.

Elapsed: 00:00:04.80
02:30:55 SQL> 
02:30:55 SQL> -- rpt
02:30:55 SQL> 
02:30:55 SQL> SELECT
02:30:55   2  pair
02:30:55   3  ,trend
02:30:55   4  ,gatt
02:30:55   5  ,COUNT(pair)
02:30:55   6  ,AVG(g6)
02:30:55   7  FROM svm6162
02:30:55   8  GROUP BY pair,trend,gatt
02:30:55   9  ORDER BY pair,trend,gatt
02:30:55  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5407 -.00219689
aud_usd 	-1 up	      3646 .003769261
aud_usd 	-1		42
aud_usd 	 1 nup	      6588 -.00212107
aud_usd 	 1 up	      3593 .004054752
aud_usd 	 1		30

6 rows selected.

Elapsed: 00:00:00.03
02:30:55 SQL> 
02:30:55 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.18
02:30:56 SQL> CREATE TABLE modsrc COMPRESS AS
02:30:56   2  SELECT
02:30:56   3  pair
02:30:56   4  ,ydate
02:30:56   5  ,prdate
02:30:56   6  ,trend
02:30:56   7  ,g6
02:30:56   8  ,gatt
02:30:56   9  ,gattn
02:30:56  10  FROM svm6162
02:30:56  11  /

Table created.

Elapsed: 00:00:00.08
02:30:56 SQL> 
02:30:56 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
02:30:56 SQL> 
02:30:56 SQL> DROP   TABLE aud_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
02:30:56 SQL> CREATE TABLE aud_ms610 COMPRESS AS
02:30:56   2  SELECT
02:30:56   3  ydate
02:30:56   4  ,trend aud_trend
02:30:56   5  ,g6    aud_g6
02:30:56   6  ,gatt  aud_gatt
02:30:56   7  ,gattn aud_gattn
02:30:56   8  FROM modsrc
02:30:56   9  /

Table created.

Elapsed: 00:00:00.15
02:30:56 SQL> 
02:30:56 SQL> ANALYZE TABLE aud_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
02:30:56 SQL> 
02:30:56 SQL> -- I need a copy of the attributes:
02:30:56 SQL> 
02:30:56 SQL> 
02:30:56 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.04
02:30:56 SQL> CREATE TABLE aud_att COMPRESS AS
02:30:56   2  SELECT
02:30:56   3  ydate
02:30:56   4  ,att00 aud_att00
02:30:56   5  ,att01 aud_att01
02:30:56   6  ,att02 aud_att02
02:30:56   7  ,att03 aud_att03
02:30:56   8  ,att04 aud_att04
02:30:56   9  ,att05 aud_att05
02:30:56  10  ,att06 aud_att06
02:30:56  11  ,att07 aud_att07
02:30:56  12  ,att08 aud_att08
02:30:56  13  ,att09 aud_att09
02:30:56  14  ,att10 aud_att10
02:30:56  15  ,att11 aud_att11
02:30:56  16  ,att12 aud_att12
02:30:56  17  ,att13 aud_att13
02:30:56  18  ,att14 aud_att14
02:30:56  19  ,att15 aud_att15
02:30:56  20  ,att16 aud_att16
02:30:56  21  ,att17 aud_att17
02:30:56  22  ,att18 aud_att18
02:30:56  23  ,att19 aud_att19
02:30:56  24  ,att20 aud_att20
02:30:56  25  ,att21 aud_att21
02:30:56  26  ,att22 aud_att22
02:30:56  27  ,att23 aud_att23
02:30:56  28  ,att24 aud_att24
02:30:56  29  ,att25 aud_att25
02:30:56  30  ,att26 aud_att26
02:30:56  31  ,att27 aud_att27
02:30:56  32  ,att28 aud_att28
02:30:56  33  ,att29 aud_att29
02:30:56  34  ,att30 aud_att30
02:30:56  35  ,att31 aud_att31
02:30:56  36  ,att32 aud_att32
02:30:56  37  ,att33 aud_att33
02:30:56  38  ,att34 aud_att34
02:30:56  39  ,att35 aud_att35
02:30:56  40  ,att36 aud_att36
02:30:56  41  ,att37 aud_att37
02:30:56  42  FROM svm6162
02:30:56  43  /

Table created.

Elapsed: 00:00:00.18
02:30:57 SQL> 
02:30:57 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.49
02:30:57 SQL> 
02:30:57 SQL> -- rpt
02:30:57 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19306

Elapsed: 00:00:00.86
02:30:58 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     19306

Elapsed: 00:00:00.00
02:30:58 SQL> 
02:30:58 SQL> --
02:30:58 SQL> -- gbp610.sql
02:30:58 SQL> --
02:30:58 SQL> 
02:30:58 SQL> -- Creates views and tables for backtesting a forex SVM strategy
02:30:58 SQL> 
02:30:58 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.44
02:30:58 SQL> 
02:30:58 SQL> -- I created di5min here:
02:30:58 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
02:30:58 SQL> 
02:30:58 SQL> CREATE OR REPLACE VIEW svm6102 AS
02:30:58   2  SELECT
02:30:58   3  pair
02:30:58   4  ,ydate
02:30:58   5  ,prdate
02:30:58   6  ,rownum rnum -- acts as t in my time-series
02:30:58   7  ,clse
02:30:58   8  -- Derive a bunch of attributes from clse, the latest price:
02:30:58   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
02:30:58  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
02:30:58  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
02:30:58  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
02:30:58  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
02:30:58  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
02:30:58  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
02:30:58  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
02:30:58  17  --
02:30:58  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
02:30:58  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
02:30:58  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
02:30:58  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
02:30:58  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
02:30:58  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
02:30:58  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
02:30:58  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
02:30:58  26  --
02:30:58  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
02:30:58  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
02:30:58  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
02:30:58  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
02:30:58  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
02:30:58  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
02:30:58  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
02:30:58  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
02:30:58  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
02:30:58  36  FROM di5min WHERE pair LIKE'%gbp%'
02:30:58  37  AND ydate > sysdate - 95
02:30:58  38  ORDER BY ydate
02:30:58  39  /

View created.

Elapsed: 00:00:00.05
02:30:58 SQL> 
02:30:58 SQL> -- rpt
02:30:58 SQL> 
02:30:58 SQL> SELECT
02:30:58   2  pair
02:30:58   3  ,COUNT(pair)
02:30:58   4  ,MIN(clse),MAX(clse)
02:30:58   5  ,MIN(avg6),MAX(avg6)
02:30:58   6  ,MIN(ydate),MAX(ydate)
02:30:58   7  FROM svm6102
02:30:58   8  GROUP BY pair
02:30:58   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
gbp_usd       19308   1.535325	   1.6295 1.53696747 1.62716986 2010-10-03 20:55:01 2011-01-05 02:25:00

Elapsed: 00:00:00.85
02:30:59 SQL> 
02:30:59 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
02:30:59 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.59
02:31:00 SQL> CREATE TABLE svm6122 COMPRESS AS
02:31:00   2  SELECT
02:31:00   3  pair
02:31:00   4  ,ydate
02:31:00   5  ,prdate
02:31:00   6  ,clse
02:31:00   7  -- g6 is important. I want to predict g6:
02:31:00   8  ,ld6 - clse g6
02:31:00   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
02:31:00  10  -- I want more attributes from the ones I derived above:
02:31:00  11  -- clse relation to moving-min
02:31:00  12  ,clse-min4  cm4
02:31:00  13  ,clse-min6  cm6
02:31:00  14  ,clse-min8  cm8
02:31:00  15  ,clse-min10 cm10
02:31:00  16  ,clse-min12 cm12
02:31:00  17  ,clse-min14 cm14
02:31:00  18  ,clse-min16 cm16
02:31:00  19  ,clse-min18 cm18
02:31:00  20  -- clse relation to moving-avg
02:31:00  21  ,clse-avg4  ca4
02:31:00  22  ,clse-avg6  ca6
02:31:00  23  ,clse-avg8  ca8
02:31:00  24  ,clse-avg10 ca10
02:31:00  25  ,clse-avg12 ca12
02:31:00  26  ,clse-avg14 ca14
02:31:00  27  ,clse-avg16 ca16
02:31:00  28  ,clse-avg18 ca18
02:31:00  29  -- clse relation to moving-max
02:31:00  30  ,clse-max4  cx4
02:31:00  31  ,clse-max6  cx6
02:31:00  32  ,clse-max8  cx8
02:31:00  33  ,clse-max10 cx10
02:31:00  34  ,clse-max12 cx12
02:31:00  35  ,clse-max14 cx14
02:31:00  36  ,clse-max16 cx16
02:31:00  37  ,clse-max18 cx18
02:31:00  38  -- Derive more attributes.
02:31:00  39  -- I want to use CORR() here to help SVM see the shape of the series.
02:31:00  40  -- But COVAR_POP is more stable:
02:31:00  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
02:31:00  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
02:31:00  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
02:31:00  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
02:31:00  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
02:31:00  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
02:31:00  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
02:31:00  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
02:31:00  49  -- Derive date related attributes:
02:31:00  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
02:31:00  51  ,0+TO_CHAR(ydate,'D')d
02:31:00  52  ,0+TO_CHAR(ydate,'W')w
02:31:00  53  -- mpm stands for minutes-past-midnight:
02:31:00  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
02:31:00  55  -- mph stands for minutes-past-hour:
02:31:00  56  ,0+TO_CHAR(ydate,'MI')mph
02:31:00  57  FROM svm6102
02:31:00  58  ORDER BY ydate
02:31:00  59  /

Table created.

Elapsed: 00:00:02.09
02:31:02 SQL> 
02:31:02 SQL> -- rpt
02:31:02 SQL> 
02:31:02 SQL> SELECT
02:31:02   2  pair
02:31:02   3  ,COUNT(pair)
02:31:02   4  ,MIN(clse),MAX(clse)
02:31:02   5  ,MIN(ydate),MAX(ydate)
02:31:02   6  FROM svm6122
02:31:02   7  GROUP BY pair
02:31:02   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
gbp_usd       19308   1.535325	   1.6295 2010-10-03 20:55:01 2011-01-05 02:25:00

Elapsed: 00:00:00.04
02:31:02 SQL> 
02:31:02 SQL> -- Prepare for derivation of NTILE based params:
02:31:02 SQL> 
02:31:02 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.19
02:31:02 SQL> CREATE TABLE svm6142 COMPRESS AS
02:31:02   2  SELECT
02:31:02   3  pair
02:31:02   4  ,ydate
02:31:02   5  ,prdate
02:31:02   6  ,clse
02:31:02   7  ,g6
02:31:02   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
02:31:02   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
02:31:02  10  ,CASE WHEN trend IS NULL THEN 1
02:31:02  11  	    WHEN trend =0      THEN 1
02:31:02  12  	    ELSE trend END trend
02:31:02  13  ,cm4
02:31:02  14  ,cm6
02:31:02  15  ,cm8
02:31:02  16  ,cm10
02:31:02  17  ,cm12
02:31:02  18  ,cm14
02:31:02  19  ,cm16
02:31:02  20  ,cm18
02:31:02  21  --
02:31:02  22  ,ca4
02:31:02  23  ,ca6
02:31:02  24  ,ca8
02:31:02  25  ,ca10
02:31:02  26  ,ca12
02:31:02  27  ,ca14
02:31:02  28  ,ca16
02:31:02  29  ,ca18
02:31:02  30  --
02:31:02  31  ,cx4
02:31:02  32  ,cx6
02:31:02  33  ,cx8
02:31:02  34  ,cx10
02:31:02  35  ,cx12
02:31:02  36  ,cx14
02:31:02  37  ,cx16
02:31:02  38  ,cx18
02:31:02  39  --
02:31:02  40  ,crr4
02:31:02  41  ,crr6
02:31:02  42  ,crr8
02:31:02  43  ,crr10
02:31:02  44  ,crr12
02:31:02  45  ,crr14
02:31:02  46  ,crr16
02:31:02  47  ,crr18
02:31:02  48  --
02:31:02  49  ,hh
02:31:02  50  ,d
02:31:02  51  ,w
02:31:02  52  ,mpm
02:31:02  53  ,mph
02:31:02  54  FROM svm6122
02:31:02  55  ORDER BY ydate
02:31:02  56  /

Table created.

Elapsed: 00:00:00.37
02:31:02 SQL> 
02:31:02 SQL> -- rpt
02:31:02 SQL> 
02:31:02 SQL> SELECT
02:31:02   2  pair
02:31:02   3  ,trend
02:31:02   4  ,gatt
02:31:02   5  ,COUNT(pair)
02:31:02   6  ,AVG(g6)
02:31:02   7  FROM svm6142
02:31:02   8  GROUP BY pair,trend,gatt
02:31:02   9  ORDER BY pair,trend,gatt
02:31:02  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6249 -.00265458
gbp_usd 	-1 up	      3464 .004389517
gbp_usd 	-1		49
gbp_usd 	 1 nup	      6083 -.00259969
gbp_usd 	 1 up	      3440 .004531722
gbp_usd 	 1		23

6 rows selected.

Elapsed: 00:00:00.04
02:31:03 SQL> 
02:31:03 SQL> 
02:31:03 SQL> -- Derive NTILE based params:
02:31:03 SQL> 
02:31:03 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.22
02:31:03 SQL> CREATE TABLE svm6162 COMPRESS AS
02:31:03   2  SELECT
02:31:03   3  pair
02:31:03   4  ,ydate
02:31:03   5  ,prdate
02:31:03   6  ,clse
02:31:03   7  ,g6
02:31:03   8  ,gatt
02:31:03   9  ,gattn
02:31:03  10  ,trend
02:31:03  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
02:31:03  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
02:31:03  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
02:31:03  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
02:31:03  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
02:31:03  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
02:31:03  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
02:31:03  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
02:31:03  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
02:31:03  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
02:31:03  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
02:31:03  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
02:31:03  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
02:31:03  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
02:31:03  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
02:31:03  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
02:31:03  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
02:31:03  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
02:31:03  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
02:31:03  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
02:31:03  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
02:31:03  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
02:31:03  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
02:31:03  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
02:31:03  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
02:31:03  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
02:31:03  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
02:31:03  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
02:31:03  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
02:31:03  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
02:31:03  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
02:31:03  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
02:31:03  43  ,hh  att32
02:31:03  44  ,d   att33
02:31:03  45  ,w   att34
02:31:03  46  ,mpm att35
02:31:03  47  ,mph att36
02:31:03  48  ,trend att37
02:31:03  49  FROM svm6142
02:31:03  50  ORDER BY ydate
02:31:03  51  /

Table created.

Elapsed: 00:00:04.75
02:31:08 SQL> 
02:31:08 SQL> -- rpt
02:31:08 SQL> 
02:31:08 SQL> SELECT
02:31:08   2  pair
02:31:08   3  ,trend
02:31:08   4  ,gatt
02:31:08   5  ,COUNT(pair)
02:31:08   6  ,AVG(g6)
02:31:08   7  FROM svm6162
02:31:08   8  GROUP BY pair,trend,gatt
02:31:08   9  ORDER BY pair,trend,gatt
02:31:08  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6249 -.00265458
gbp_usd 	-1 up	      3464 .004389517
gbp_usd 	-1		49
gbp_usd 	 1 nup	      6083 -.00259969
gbp_usd 	 1 up	      3440 .004531722
gbp_usd 	 1		23

6 rows selected.

Elapsed: 00:00:00.03
02:31:08 SQL> 
02:31:08 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
02:31:08 SQL> CREATE TABLE modsrc COMPRESS AS
02:31:08   2  SELECT
02:31:08   3  pair
02:31:08   4  ,ydate
02:31:08   5  ,prdate
02:31:08   6  ,trend
02:31:08   7  ,g6
02:31:08   8  ,gatt
02:31:08   9  ,gattn
02:31:08  10  FROM svm6162
02:31:08  11  /

Table created.

Elapsed: 00:00:00.08
02:31:08 SQL> 
02:31:08 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
02:31:08 SQL> 
02:31:08 SQL> DROP   TABLE gbp_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
02:31:08 SQL> CREATE TABLE gbp_ms610 COMPRESS AS
02:31:08   2  SELECT
02:31:08   3  ydate
02:31:08   4  ,trend gbp_trend
02:31:08   5  ,g6    gbp_g6
02:31:08   6  ,gatt  gbp_gatt
02:31:08   7  ,gattn gbp_gattn
02:31:08   8  FROM modsrc
02:31:08   9  /

Table created.

Elapsed: 00:00:00.07
02:31:08 SQL> 
02:31:08 SQL> ANALYZE TABLE gbp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
02:31:08 SQL> 
02:31:08 SQL> -- I need a copy of the attributes:
02:31:08 SQL> 
02:31:08 SQL> 
02:31:08 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.04
02:31:08 SQL> CREATE TABLE gbp_att COMPRESS AS
02:31:08   2  SELECT
02:31:08   3  ydate
02:31:08   4  ,att00 gbp_att00
02:31:08   5  ,att01 gbp_att01
02:31:08   6  ,att02 gbp_att02
02:31:08   7  ,att03 gbp_att03
02:31:08   8  ,att04 gbp_att04
02:31:08   9  ,att05 gbp_att05
02:31:08  10  ,att06 gbp_att06
02:31:08  11  ,att07 gbp_att07
02:31:08  12  ,att08 gbp_att08
02:31:08  13  ,att09 gbp_att09
02:31:08  14  ,att10 gbp_att10
02:31:08  15  ,att11 gbp_att11
02:31:08  16  ,att12 gbp_att12
02:31:08  17  ,att13 gbp_att13
02:31:08  18  ,att14 gbp_att14
02:31:08  19  ,att15 gbp_att15
02:31:08  20  ,att16 gbp_att16
02:31:08  21  ,att17 gbp_att17
02:31:08  22  ,att18 gbp_att18
02:31:08  23  ,att19 gbp_att19
02:31:08  24  ,att20 gbp_att20
02:31:08  25  ,att21 gbp_att21
02:31:08  26  ,att22 gbp_att22
02:31:08  27  ,att23 gbp_att23
02:31:08  28  ,att24 gbp_att24
02:31:08  29  ,att25 gbp_att25
02:31:08  30  ,att26 gbp_att26
02:31:08  31  ,att27 gbp_att27
02:31:08  32  ,att28 gbp_att28
02:31:08  33  ,att29 gbp_att29
02:31:08  34  ,att30 gbp_att30
02:31:08  35  ,att31 gbp_att31
02:31:08  36  ,att32 gbp_att32
02:31:08  37  ,att33 gbp_att33
02:31:08  38  ,att34 gbp_att34
02:31:08  39  ,att35 gbp_att35
02:31:08  40  ,att36 gbp_att36
02:31:08  41  ,att37 gbp_att37
02:31:08  42  FROM svm6162
02:31:08  43  /

Table created.

Elapsed: 00:00:00.20
02:31:08 SQL> 
02:31:08 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.42
02:31:09 SQL> 
02:31:09 SQL> -- rpt
02:31:09 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19308

Elapsed: 00:00:00.82
02:31:10 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     19308

Elapsed: 00:00:00.00
02:31:10 SQL> 
02:31:10 SQL> --
02:31:10 SQL> -- jpy610.sql
02:31:10 SQL> --
02:31:10 SQL> 
02:31:10 SQL> -- Creates views and tables for backtesting a forex SVM strategy
02:31:10 SQL> 
02:31:10 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.38
02:31:10 SQL> 
02:31:10 SQL> -- I created di5min here:
02:31:10 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
02:31:10 SQL> 
02:31:10 SQL> CREATE OR REPLACE VIEW svm6102 AS
02:31:10   2  SELECT
02:31:10   3  pair
02:31:10   4  ,ydate
02:31:10   5  ,prdate
02:31:10   6  ,rownum rnum -- acts as t in my time-series
02:31:10   7  ,clse
02:31:10   8  -- Derive a bunch of attributes from clse, the latest price:
02:31:10   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
02:31:10  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
02:31:10  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
02:31:10  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
02:31:10  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
02:31:10  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
02:31:10  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
02:31:10  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
02:31:10  17  --
02:31:10  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
02:31:10  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
02:31:10  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
02:31:10  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
02:31:10  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
02:31:10  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
02:31:10  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
02:31:10  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
02:31:10  26  --
02:31:10  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
02:31:10  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
02:31:10  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
02:31:10  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
02:31:10  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
02:31:10  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
02:31:10  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
02:31:10  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
02:31:10  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
02:31:10  36  FROM di5min WHERE pair LIKE'%jpy%'
02:31:10  37  AND ydate > sysdate - 95
02:31:10  38  ORDER BY ydate
02:31:10  39  /

View created.

Elapsed: 00:00:00.03
02:31:10 SQL> 
02:31:10 SQL> -- rpt
02:31:10 SQL> 
02:31:10 SQL> SELECT
02:31:10   2  pair
02:31:10   3  ,COUNT(pair)
02:31:10   4  ,MIN(clse),MAX(clse)
02:31:10   5  ,MIN(avg6),MAX(avg6)
02:31:10   6  ,MIN(ydate),MAX(ydate)
02:31:10   7  FROM svm6102
02:31:10   8  GROUP BY pair
02:31:10   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_jpy       19306	 80.25	   84.485 80.3595205 84.3105479 2010-10-03 20:55:01 2011-01-05 02:25:00

Elapsed: 00:00:00.90
02:31:11 SQL> 
02:31:11 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
02:31:11 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.25
02:31:11 SQL> CREATE TABLE svm6122 COMPRESS AS
02:31:11   2  SELECT
02:31:11   3  pair
02:31:11   4  ,ydate
02:31:11   5  ,prdate
02:31:11   6  ,clse
02:31:11   7  -- g6 is important. I want to predict g6:
02:31:11   8  ,ld6 - clse g6
02:31:11   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
02:31:11  10  -- I want more attributes from the ones I derived above:
02:31:11  11  -- clse relation to moving-min
02:31:11  12  ,clse-min4  cm4
02:31:11  13  ,clse-min6  cm6
02:31:11  14  ,clse-min8  cm8
02:31:11  15  ,clse-min10 cm10
02:31:11  16  ,clse-min12 cm12
02:31:11  17  ,clse-min14 cm14
02:31:11  18  ,clse-min16 cm16
02:31:11  19  ,clse-min18 cm18
02:31:11  20  -- clse relation to moving-avg
02:31:11  21  ,clse-avg4  ca4
02:31:11  22  ,clse-avg6  ca6
02:31:11  23  ,clse-avg8  ca8
02:31:11  24  ,clse-avg10 ca10
02:31:11  25  ,clse-avg12 ca12
02:31:11  26  ,clse-avg14 ca14
02:31:11  27  ,clse-avg16 ca16
02:31:11  28  ,clse-avg18 ca18
02:31:11  29  -- clse relation to moving-max
02:31:11  30  ,clse-max4  cx4
02:31:11  31  ,clse-max6  cx6
02:31:11  32  ,clse-max8  cx8
02:31:11  33  ,clse-max10 cx10
02:31:11  34  ,clse-max12 cx12
02:31:11  35  ,clse-max14 cx14
02:31:11  36  ,clse-max16 cx16
02:31:11  37  ,clse-max18 cx18
02:31:11  38  -- Derive more attributes.
02:31:11  39  -- I want to use CORR() here to help SVM see the shape of the series.
02:31:11  40  -- But COVAR_POP is more stable:
02:31:11  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
02:31:11  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
02:31:11  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
02:31:11  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
02:31:11  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
02:31:11  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
02:31:11  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
02:31:11  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
02:31:11  49  -- Derive date related attributes:
02:31:11  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
02:31:11  51  ,0+TO_CHAR(ydate,'D')d
02:31:11  52  ,0+TO_CHAR(ydate,'W')w
02:31:11  53  -- mpm stands for minutes-past-midnight:
02:31:11  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
02:31:11  55  -- mph stands for minutes-past-hour:
02:31:11  56  ,0+TO_CHAR(ydate,'MI')mph
02:31:11  57  FROM svm6102
02:31:11  58  ORDER BY ydate
02:31:11  59  /

Table created.

Elapsed: 00:00:02.16
02:31:13 SQL> 
02:31:13 SQL> -- rpt
02:31:13 SQL> 
02:31:13 SQL> SELECT
02:31:13   2  pair
02:31:13   3  ,COUNT(pair)
02:31:13   4  ,MIN(clse),MAX(clse)
02:31:13   5  ,MIN(ydate),MAX(ydate)
02:31:13   6  FROM svm6122
02:31:13   7  GROUP BY pair
02:31:13   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_jpy       19306	 80.25	   84.485 2010-10-03 20:55:01 2011-01-05 02:25:00

Elapsed: 00:00:00.04
02:31:13 SQL> 
02:31:13 SQL> -- Prepare for derivation of NTILE based params:
02:31:13 SQL> 
02:31:13 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.18
02:31:14 SQL> CREATE TABLE svm6142 COMPRESS AS
02:31:14   2  SELECT
02:31:14   3  pair
02:31:14   4  ,ydate
02:31:14   5  ,prdate
02:31:14   6  ,clse
02:31:14   7  ,g6
02:31:14   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
02:31:14   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
02:31:14  10  ,CASE WHEN trend IS NULL THEN 1
02:31:14  11  	    WHEN trend =0      THEN 1
02:31:14  12  	    ELSE trend END trend
02:31:14  13  ,cm4
02:31:14  14  ,cm6
02:31:14  15  ,cm8
02:31:14  16  ,cm10
02:31:14  17  ,cm12
02:31:14  18  ,cm14
02:31:14  19  ,cm16
02:31:14  20  ,cm18
02:31:14  21  --
02:31:14  22  ,ca4
02:31:14  23  ,ca6
02:31:14  24  ,ca8
02:31:14  25  ,ca10
02:31:14  26  ,ca12
02:31:14  27  ,ca14
02:31:14  28  ,ca16
02:31:14  29  ,ca18
02:31:14  30  --
02:31:14  31  ,cx4
02:31:14  32  ,cx6
02:31:14  33  ,cx8
02:31:14  34  ,cx10
02:31:14  35  ,cx12
02:31:14  36  ,cx14
02:31:14  37  ,cx16
02:31:14  38  ,cx18
02:31:14  39  --
02:31:14  40  ,crr4
02:31:14  41  ,crr6
02:31:14  42  ,crr8
02:31:14  43  ,crr10
02:31:14  44  ,crr12
02:31:14  45  ,crr14
02:31:14  46  ,crr16
02:31:14  47  ,crr18
02:31:14  48  --
02:31:14  49  ,hh
02:31:14  50  ,d
02:31:14  51  ,w
02:31:14  52  ,mpm
02:31:14  53  ,mph
02:31:14  54  FROM svm6122
02:31:14  55  ORDER BY ydate
02:31:14  56  /

Table created.

Elapsed: 00:00:00.69
02:31:14 SQL> 
02:31:14 SQL> -- rpt
02:31:14 SQL> 
02:31:14 SQL> SELECT
02:31:14   2  pair
02:31:14   3  ,trend
02:31:14   4  ,gatt
02:31:14   5  ,COUNT(pair)
02:31:14   6  ,AVG(g6)
02:31:14   7  FROM svm6142
02:31:14   8  GROUP BY pair,trend,gatt
02:31:14   9  ORDER BY pair,trend,gatt
02:31:14  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5110 -.16667614
usd_jpy 	-1 up	      4758 .164106802
usd_jpy 	-1		21
usd_jpy 	 1 nup	      4930 -.15710822
usd_jpy 	 1 up	      4436 .168490404
usd_jpy 	 1		51

6 rows selected.

Elapsed: 00:00:00.04
02:31:14 SQL> 
02:31:14 SQL> 
02:31:14 SQL> -- Derive NTILE based params:
02:31:14 SQL> 
02:31:14 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.15
02:31:15 SQL> CREATE TABLE svm6162 COMPRESS AS
02:31:15   2  SELECT
02:31:15   3  pair
02:31:15   4  ,ydate
02:31:15   5  ,prdate
02:31:15   6  ,clse
02:31:15   7  ,g6
02:31:15   8  ,gatt
02:31:15   9  ,gattn
02:31:15  10  ,trend
02:31:15  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
02:31:15  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
02:31:15  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
02:31:15  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
02:31:15  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
02:31:15  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
02:31:15  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
02:31:15  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
02:31:15  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
02:31:15  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
02:31:15  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
02:31:15  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
02:31:15  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
02:31:15  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
02:31:15  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
02:31:15  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
02:31:15  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
02:31:15  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
02:31:15  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
02:31:15  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
02:31:15  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
02:31:15  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
02:31:15  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
02:31:15  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
02:31:15  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
02:31:15  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
02:31:15  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
02:31:15  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
02:31:15  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
02:31:15  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
02:31:15  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
02:31:15  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
02:31:15  43  ,hh  att32
02:31:15  44  ,d   att33
02:31:15  45  ,w   att34
02:31:15  46  ,mpm att35
02:31:15  47  ,mph att36
02:31:15  48  ,trend att37
02:31:15  49  FROM svm6142
02:31:15  50  ORDER BY ydate
02:31:15  51  /

Table created.

Elapsed: 00:00:04.72
02:31:19 SQL> 
02:31:19 SQL> -- rpt
02:31:19 SQL> 
02:31:19 SQL> SELECT
02:31:19   2  pair
02:31:19   3  ,trend
02:31:19   4  ,gatt
02:31:19   5  ,COUNT(pair)
02:31:19   6  ,AVG(g6)
02:31:19   7  FROM svm6162
02:31:19   8  GROUP BY pair,trend,gatt
02:31:19   9  ORDER BY pair,trend,gatt
02:31:19  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5110 -.16667614
usd_jpy 	-1 up	      4758 .164106802
usd_jpy 	-1		21
usd_jpy 	 1 nup	      4930 -.15710822
usd_jpy 	 1 up	      4436 .168490404
usd_jpy 	 1		51

6 rows selected.

Elapsed: 00:00:00.03
02:31:19 SQL> 
02:31:19 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.22
02:31:20 SQL> CREATE TABLE modsrc COMPRESS AS
02:31:20   2  SELECT
02:31:20   3  pair
02:31:20   4  ,ydate
02:31:20   5  ,prdate
02:31:20   6  ,trend
02:31:20   7  ,g6
02:31:20   8  ,gatt
02:31:20   9  ,gattn
02:31:20  10  FROM svm6162
02:31:20  11  /

Table created.

Elapsed: 00:00:00.09
02:31:20 SQL> 
02:31:20 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.22
02:31:20 SQL> 
02:31:20 SQL> DROP   TABLE jpy_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
02:31:20 SQL> CREATE TABLE jpy_ms610 COMPRESS AS
02:31:20   2  SELECT
02:31:20   3  ydate
02:31:20   4  ,trend jpy_trend
02:31:20   5  ,g6    jpy_g6
02:31:20   6  ,gatt  jpy_gatt
02:31:20   7  ,gattn jpy_gattn
02:31:20   8  FROM modsrc
02:31:20   9  /

Table created.

Elapsed: 00:00:00.06
02:31:20 SQL> 
02:31:20 SQL> ANALYZE TABLE jpy_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.24
02:31:20 SQL> 
02:31:20 SQL> -- I need a copy of the attributes:
02:31:20 SQL> 
02:31:20 SQL> 
02:31:20 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.04
02:31:20 SQL> CREATE TABLE jpy_att COMPRESS AS
02:31:20   2  SELECT
02:31:20   3  ydate
02:31:20   4  ,att00 jpy_att00
02:31:20   5  ,att01 jpy_att01
02:31:20   6  ,att02 jpy_att02
02:31:20   7  ,att03 jpy_att03
02:31:20   8  ,att04 jpy_att04
02:31:20   9  ,att05 jpy_att05
02:31:20  10  ,att06 jpy_att06
02:31:20  11  ,att07 jpy_att07
02:31:20  12  ,att08 jpy_att08
02:31:20  13  ,att09 jpy_att09
02:31:20  14  ,att10 jpy_att10
02:31:20  15  ,att11 jpy_att11
02:31:20  16  ,att12 jpy_att12
02:31:20  17  ,att13 jpy_att13
02:31:20  18  ,att14 jpy_att14
02:31:20  19  ,att15 jpy_att15
02:31:20  20  ,att16 jpy_att16
02:31:20  21  ,att17 jpy_att17
02:31:20  22  ,att18 jpy_att18
02:31:20  23  ,att19 jpy_att19
02:31:20  24  ,att20 jpy_att20
02:31:20  25  ,att21 jpy_att21
02:31:20  26  ,att22 jpy_att22
02:31:20  27  ,att23 jpy_att23
02:31:20  28  ,att24 jpy_att24
02:31:20  29  ,att25 jpy_att25
02:31:20  30  ,att26 jpy_att26
02:31:20  31  ,att27 jpy_att27
02:31:20  32  ,att28 jpy_att28
02:31:20  33  ,att29 jpy_att29
02:31:20  34  ,att30 jpy_att30
02:31:20  35  ,att31 jpy_att31
02:31:20  36  ,att32 jpy_att32
02:31:20  37  ,att33 jpy_att33
02:31:20  38  ,att34 jpy_att34
02:31:20  39  ,att35 jpy_att35
02:31:20  40  ,att36 jpy_att36
02:31:20  41  ,att37 jpy_att37
02:31:20  42  FROM svm6162
02:31:20  43  /

Table created.

Elapsed: 00:00:00.18
02:31:20 SQL> 
02:31:20 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.56
02:31:21 SQL> 
02:31:21 SQL> -- rpt
02:31:21 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19306

Elapsed: 00:00:00.87
02:31:22 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     19306

Elapsed: 00:00:00.00
02:31:22 SQL> 
02:31:22 SQL> --
02:31:22 SQL> -- cad610.sql
02:31:22 SQL> --
02:31:22 SQL> 
02:31:22 SQL> -- Creates views and tables for backtesting a forex SVM strategy
02:31:22 SQL> 
02:31:22 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.50
02:31:22 SQL> 
02:31:22 SQL> -- I created di5min here:
02:31:22 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
02:31:22 SQL> 
02:31:22 SQL> CREATE OR REPLACE VIEW svm6102 AS
02:31:22   2  SELECT
02:31:22   3  pair
02:31:22   4  ,ydate
02:31:22   5  ,prdate
02:31:22   6  ,rownum rnum -- acts as t in my time-series
02:31:22   7  ,clse
02:31:22   8  -- Derive a bunch of attributes from clse, the latest price:
02:31:22   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
02:31:22  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
02:31:22  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
02:31:22  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
02:31:22  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
02:31:22  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
02:31:22  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
02:31:22  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
02:31:22  17  --
02:31:22  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
02:31:22  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
02:31:22  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
02:31:22  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
02:31:22  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
02:31:22  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
02:31:22  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
02:31:22  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
02:31:22  26  --
02:31:22  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
02:31:22  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
02:31:22  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
02:31:22  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
02:31:22  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
02:31:22  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
02:31:22  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
02:31:22  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
02:31:22  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
02:31:22  36  FROM di5min WHERE pair LIKE'%cad%'
02:31:22  37  AND ydate > sysdate - 95
02:31:22  38  ORDER BY ydate
02:31:22  39  /

View created.

Elapsed: 00:00:00.04
02:31:22 SQL> 
02:31:22 SQL> -- rpt
02:31:22 SQL> 
02:31:22 SQL> SELECT
02:31:22   2  pair
02:31:22   3  ,COUNT(pair)
02:31:22   4  ,MIN(clse),MAX(clse)
02:31:22   5  ,MIN(avg6),MAX(avg6)
02:31:22   6  ,MIN(ydate),MAX(ydate)
02:31:22   7  FROM svm6102
02:31:22   8  GROUP BY pair
02:31:22   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_cad       19306    .988925	   1.0355 .990603938 1.03282877 2010-10-03 20:55:01 2011-01-05 02:25:00

Elapsed: 00:00:00.85
02:31:23 SQL> 
02:31:23 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
02:31:23 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.18
02:31:23 SQL> CREATE TABLE svm6122 COMPRESS AS
02:31:23   2  SELECT
02:31:23   3  pair
02:31:23   4  ,ydate
02:31:23   5  ,prdate
02:31:23   6  ,clse
02:31:23   7  -- g6 is important. I want to predict g6:
02:31:23   8  ,ld6 - clse g6
02:31:23   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
02:31:23  10  -- I want more attributes from the ones I derived above:
02:31:23  11  -- clse relation to moving-min
02:31:23  12  ,clse-min4  cm4
02:31:23  13  ,clse-min6  cm6
02:31:23  14  ,clse-min8  cm8
02:31:23  15  ,clse-min10 cm10
02:31:23  16  ,clse-min12 cm12
02:31:23  17  ,clse-min14 cm14
02:31:23  18  ,clse-min16 cm16
02:31:23  19  ,clse-min18 cm18
02:31:23  20  -- clse relation to moving-avg
02:31:23  21  ,clse-avg4  ca4
02:31:23  22  ,clse-avg6  ca6
02:31:23  23  ,clse-avg8  ca8
02:31:23  24  ,clse-avg10 ca10
02:31:23  25  ,clse-avg12 ca12
02:31:23  26  ,clse-avg14 ca14
02:31:23  27  ,clse-avg16 ca16
02:31:23  28  ,clse-avg18 ca18
02:31:23  29  -- clse relation to moving-max
02:31:23  30  ,clse-max4  cx4
02:31:23  31  ,clse-max6  cx6
02:31:23  32  ,clse-max8  cx8
02:31:23  33  ,clse-max10 cx10
02:31:23  34  ,clse-max12 cx12
02:31:23  35  ,clse-max14 cx14
02:31:23  36  ,clse-max16 cx16
02:31:23  37  ,clse-max18 cx18
02:31:23  38  -- Derive more attributes.
02:31:23  39  -- I want to use CORR() here to help SVM see the shape of the series.
02:31:23  40  -- But COVAR_POP is more stable:
02:31:23  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
02:31:23  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
02:31:23  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
02:31:23  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
02:31:23  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
02:31:23  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
02:31:23  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
02:31:23  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
02:31:23  49  -- Derive date related attributes:
02:31:23  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
02:31:23  51  ,0+TO_CHAR(ydate,'D')d
02:31:23  52  ,0+TO_CHAR(ydate,'W')w
02:31:23  53  -- mpm stands for minutes-past-midnight:
02:31:23  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
02:31:23  55  -- mph stands for minutes-past-hour:
02:31:23  56  ,0+TO_CHAR(ydate,'MI')mph
02:31:23  57  FROM svm6102
02:31:23  58  ORDER BY ydate
02:31:23  59  /

Table created.

Elapsed: 00:00:02.06
02:31:25 SQL> 
02:31:25 SQL> -- rpt
02:31:25 SQL> 
02:31:25 SQL> SELECT
02:31:25   2  pair
02:31:25   3  ,COUNT(pair)
02:31:25   4  ,MIN(clse),MAX(clse)
02:31:25   5  ,MIN(ydate),MAX(ydate)
02:31:25   6  FROM svm6122
02:31:25   7  GROUP BY pair
02:31:25   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_cad       19306    .988925	   1.0355 2010-10-03 20:55:01 2011-01-05 02:25:00

Elapsed: 00:00:00.04
02:31:26 SQL> 
02:31:26 SQL> -- Prepare for derivation of NTILE based params:
02:31:26 SQL> 
02:31:26 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.24
02:31:26 SQL> CREATE TABLE svm6142 COMPRESS AS
02:31:26   2  SELECT
02:31:26   3  pair
02:31:26   4  ,ydate
02:31:26   5  ,prdate
02:31:26   6  ,clse
02:31:26   7  ,g6
02:31:26   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
02:31:26   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
02:31:26  10  ,CASE WHEN trend IS NULL THEN 1
02:31:26  11  	    WHEN trend =0      THEN 1
02:31:26  12  	    ELSE trend END trend
02:31:26  13  ,cm4
02:31:26  14  ,cm6
02:31:26  15  ,cm8
02:31:26  16  ,cm10
02:31:26  17  ,cm12
02:31:26  18  ,cm14
02:31:26  19  ,cm16
02:31:26  20  ,cm18
02:31:26  21  --
02:31:26  22  ,ca4
02:31:26  23  ,ca6
02:31:26  24  ,ca8
02:31:26  25  ,ca10
02:31:26  26  ,ca12
02:31:26  27  ,ca14
02:31:26  28  ,ca16
02:31:26  29  ,ca18
02:31:26  30  --
02:31:26  31  ,cx4
02:31:26  32  ,cx6
02:31:26  33  ,cx8
02:31:26  34  ,cx10
02:31:26  35  ,cx12
02:31:26  36  ,cx14
02:31:26  37  ,cx16
02:31:26  38  ,cx18
02:31:26  39  --
02:31:26  40  ,crr4
02:31:26  41  ,crr6
02:31:26  42  ,crr8
02:31:26  43  ,crr10
02:31:26  44  ,crr12
02:31:26  45  ,crr14
02:31:26  46  ,crr16
02:31:26  47  ,crr18
02:31:26  48  --
02:31:26  49  ,hh
02:31:26  50  ,d
02:31:26  51  ,w
02:31:26  52  ,mpm
02:31:26  53  ,mph
02:31:26  54  FROM svm6122
02:31:26  55  ORDER BY ydate
02:31:26  56  /

Table created.

Elapsed: 00:00:00.37
02:31:26 SQL> 
02:31:26 SQL> -- rpt
02:31:26 SQL> 
02:31:26 SQL> SELECT
02:31:26   2  pair
02:31:26   3  ,trend
02:31:26   4  ,gatt
02:31:26   5  ,COUNT(pair)
02:31:26   6  ,AVG(g6)
02:31:26   7  FROM svm6142
02:31:26   8  GROUP BY pair,trend,gatt
02:31:26   9  ORDER BY pair,trend,gatt
02:31:26  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7142 -.00124456
usd_cad 	-1 up	      3061 .003077006
usd_cad 	-1		42
usd_cad 	 1 nup	      6657 -.00161133
usd_cad 	 1 up	      2374 .003662303
usd_cad 	 1		30

6 rows selected.

Elapsed: 00:00:00.04
02:31:26 SQL> 
02:31:26 SQL> 
02:31:26 SQL> -- Derive NTILE based params:
02:31:26 SQL> 
02:31:26 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.13
02:31:26 SQL> CREATE TABLE svm6162 COMPRESS AS
02:31:26   2  SELECT
02:31:26   3  pair
02:31:26   4  ,ydate
02:31:26   5  ,prdate
02:31:26   6  ,clse
02:31:26   7  ,g6
02:31:26   8  ,gatt
02:31:26   9  ,gattn
02:31:26  10  ,trend
02:31:26  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
02:31:26  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
02:31:26  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
02:31:26  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
02:31:26  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
02:31:26  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
02:31:26  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
02:31:26  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
02:31:26  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
02:31:26  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
02:31:26  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
02:31:26  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
02:31:26  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
02:31:26  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
02:31:26  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
02:31:26  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
02:31:26  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
02:31:26  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
02:31:26  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
02:31:26  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
02:31:26  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
02:31:26  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
02:31:26  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
02:31:26  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
02:31:26  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
02:31:26  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
02:31:26  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
02:31:26  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
02:31:26  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
02:31:26  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
02:31:26  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
02:31:26  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
02:31:26  43  ,hh  att32
02:31:26  44  ,d   att33
02:31:26  45  ,w   att34
02:31:26  46  ,mpm att35
02:31:26  47  ,mph att36
02:31:26  48  ,trend att37
02:31:26  49  FROM svm6142
02:31:26  50  ORDER BY ydate
02:31:26  51  /

Table created.

Elapsed: 00:00:04.74
02:31:31 SQL> 
02:31:31 SQL> -- rpt
02:31:31 SQL> 
02:31:31 SQL> SELECT
02:31:31   2  pair
02:31:31   3  ,trend
02:31:31   4  ,gatt
02:31:31   5  ,COUNT(pair)
02:31:31   6  ,AVG(g6)
02:31:31   7  FROM svm6162
02:31:31   8  GROUP BY pair,trend,gatt
02:31:31   9  ORDER BY pair,trend,gatt
02:31:31  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7142 -.00124456
usd_cad 	-1 up	      3061 .003077006
usd_cad 	-1		42
usd_cad 	 1 nup	      6657 -.00161133
usd_cad 	 1 up	      2374 .003662303
usd_cad 	 1		30

6 rows selected.

Elapsed: 00:00:00.03
02:31:31 SQL> 
02:31:31 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.17
02:31:31 SQL> CREATE TABLE modsrc COMPRESS AS
02:31:31   2  SELECT
02:31:31   3  pair
02:31:31   4  ,ydate
02:31:31   5  ,prdate
02:31:31   6  ,trend
02:31:31   7  ,g6
02:31:31   8  ,gatt
02:31:31   9  ,gattn
02:31:31  10  FROM svm6162
02:31:31  11  /

Table created.

Elapsed: 00:00:00.08
02:31:31 SQL> 
02:31:31 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
02:31:32 SQL> 
02:31:32 SQL> DROP   TABLE cad_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
02:31:32 SQL> CREATE TABLE cad_ms610 COMPRESS AS
02:31:32   2  SELECT
02:31:32   3  ydate
02:31:32   4  ,trend cad_trend
02:31:32   5  ,g6    cad_g6
02:31:32   6  ,gatt  cad_gatt
02:31:32   7  ,gattn cad_gattn
02:31:32   8  FROM modsrc
02:31:32   9  /

Table created.

Elapsed: 00:00:00.07
02:31:32 SQL> 
02:31:32 SQL> ANALYZE TABLE cad_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
02:31:32 SQL> 
02:31:32 SQL> -- I need a copy of the attributes:
02:31:32 SQL> 
02:31:32 SQL> 
02:31:32 SQL> DROP   TABLE cad_att;

Table dropped.

Elapsed: 00:00:00.05
02:31:32 SQL> CREATE TABLE cad_att COMPRESS AS
02:31:32   2  SELECT
02:31:32   3  ydate
02:31:32   4  ,att00 cad_att00
02:31:32   5  ,att01 cad_att01
02:31:32   6  ,att02 cad_att02
02:31:32   7  ,att03 cad_att03
02:31:32   8  ,att04 cad_att04
02:31:32   9  ,att05 cad_att05
02:31:32  10  ,att06 cad_att06
02:31:32  11  ,att07 cad_att07
02:31:32  12  ,att08 cad_att08
02:31:32  13  ,att09 cad_att09
02:31:32  14  ,att10 cad_att10
02:31:32  15  ,att11 cad_att11
02:31:32  16  ,att12 cad_att12
02:31:32  17  ,att13 cad_att13
02:31:32  18  ,att14 cad_att14
02:31:32  19  ,att15 cad_att15
02:31:32  20  ,att16 cad_att16
02:31:32  21  ,att17 cad_att17
02:31:32  22  ,att18 cad_att18
02:31:32  23  ,att19 cad_att19
02:31:32  24  ,att20 cad_att20
02:31:32  25  ,att21 cad_att21
02:31:32  26  ,att22 cad_att22
02:31:32  27  ,att23 cad_att23
02:31:32  28  ,att24 cad_att24
02:31:32  29  ,att25 cad_att25
02:31:32  30  ,att26 cad_att26
02:31:32  31  ,att27 cad_att27
02:31:32  32  ,att28 cad_att28
02:31:32  33  ,att29 cad_att29
02:31:32  34  ,att30 cad_att30
02:31:32  35  ,att31 cad_att31
02:31:32  36  ,att32 cad_att32
02:31:32  37  ,att33 cad_att33
02:31:32  38  ,att34 cad_att34
02:31:32  39  ,att35 cad_att35
02:31:32  40  ,att36 cad_att36
02:31:32  41  ,att37 cad_att37
02:31:32  42  FROM svm6162
02:31:32  43  /

Table created.

Elapsed: 00:00:00.17
02:31:32 SQL> 
02:31:32 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.43
02:31:32 SQL> 
02:31:32 SQL> -- rpt
02:31:32 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19306

Elapsed: 00:00:00.80
02:31:33 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
     19306

Elapsed: 00:00:00.00
02:31:33 SQL> 
02:31:33 SQL> --
02:31:33 SQL> -- chf610.sql
02:31:33 SQL> --
02:31:33 SQL> 
02:31:33 SQL> -- Creates views and tables for backtesting a forex SVM strategy
02:31:33 SQL> 
02:31:33 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.38
02:31:34 SQL> 
02:31:34 SQL> -- I created di5min here:
02:31:34 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
02:31:34 SQL> 
02:31:34 SQL> CREATE OR REPLACE VIEW svm6102 AS
02:31:34   2  SELECT
02:31:34   3  pair
02:31:34   4  ,ydate
02:31:34   5  ,prdate
02:31:34   6  ,rownum rnum -- acts as t in my time-series
02:31:34   7  ,clse
02:31:34   8  -- Derive a bunch of attributes from clse, the latest price:
02:31:34   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
02:31:34  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
02:31:34  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
02:31:34  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
02:31:34  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
02:31:34  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
02:31:34  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
02:31:34  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
02:31:34  17  --
02:31:34  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
02:31:34  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
02:31:34  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
02:31:34  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
02:31:34  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
02:31:34  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
02:31:34  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
02:31:34  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
02:31:34  26  --
02:31:34  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
02:31:34  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
02:31:34  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
02:31:34  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
02:31:34  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
02:31:34  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
02:31:34  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
02:31:34  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
02:31:34  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
02:31:34  36  FROM di5min WHERE pair LIKE'%chf%'
02:31:34  37  AND ydate > sysdate - 95
02:31:34  38  ORDER BY ydate
02:31:34  39  /

View created.

Elapsed: 00:00:00.05
02:31:34 SQL> 
02:31:34 SQL> -- rpt
02:31:34 SQL> 
02:31:34 SQL> SELECT
02:31:34   2  pair
02:31:34   3  ,COUNT(pair)
02:31:34   4  ,MIN(clse),MAX(clse)
02:31:34   5  ,MIN(avg6),MAX(avg6)
02:31:34   6  ,MIN(ydate),MAX(ydate)
02:31:34   7  FROM svm6102
02:31:34   8  GROUP BY pair
02:31:34   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_chf       19309    .931675	  1.00635  .93325411 1.00498151 2010-10-03 20:55:01 2011-01-05 02:25:00

Elapsed: 00:00:00.84
02:31:35 SQL> 
02:31:35 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
02:31:35 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.24
02:31:35 SQL> CREATE TABLE svm6122 COMPRESS AS
02:31:35   2  SELECT
02:31:35   3  pair
02:31:35   4  ,ydate
02:31:35   5  ,prdate
02:31:35   6  ,clse
02:31:35   7  -- g6 is important. I want to predict g6:
02:31:35   8  ,ld6 - clse g6
02:31:35   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
02:31:35  10  -- I want more attributes from the ones I derived above:
02:31:35  11  -- clse relation to moving-min
02:31:35  12  ,clse-min4  cm4
02:31:35  13  ,clse-min6  cm6
02:31:35  14  ,clse-min8  cm8
02:31:35  15  ,clse-min10 cm10
02:31:35  16  ,clse-min12 cm12
02:31:35  17  ,clse-min14 cm14
02:31:35  18  ,clse-min16 cm16
02:31:35  19  ,clse-min18 cm18
02:31:35  20  -- clse relation to moving-avg
02:31:35  21  ,clse-avg4  ca4
02:31:35  22  ,clse-avg6  ca6
02:31:35  23  ,clse-avg8  ca8
02:31:35  24  ,clse-avg10 ca10
02:31:35  25  ,clse-avg12 ca12
02:31:35  26  ,clse-avg14 ca14
02:31:35  27  ,clse-avg16 ca16
02:31:35  28  ,clse-avg18 ca18
02:31:35  29  -- clse relation to moving-max
02:31:35  30  ,clse-max4  cx4
02:31:35  31  ,clse-max6  cx6
02:31:35  32  ,clse-max8  cx8
02:31:35  33  ,clse-max10 cx10
02:31:35  34  ,clse-max12 cx12
02:31:35  35  ,clse-max14 cx14
02:31:35  36  ,clse-max16 cx16
02:31:35  37  ,clse-max18 cx18
02:31:35  38  -- Derive more attributes.
02:31:35  39  -- I want to use CORR() here to help SVM see the shape of the series.
02:31:35  40  -- But COVAR_POP is more stable:
02:31:35  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
02:31:35  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
02:31:35  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
02:31:35  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
02:31:35  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
02:31:35  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
02:31:35  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
02:31:35  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
02:31:35  49  -- Derive date related attributes:
02:31:35  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
02:31:35  51  ,0+TO_CHAR(ydate,'D')d
02:31:35  52  ,0+TO_CHAR(ydate,'W')w
02:31:35  53  -- mpm stands for minutes-past-midnight:
02:31:35  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
02:31:35  55  -- mph stands for minutes-past-hour:
02:31:35  56  ,0+TO_CHAR(ydate,'MI')mph
02:31:35  57  FROM svm6102
02:31:35  58  ORDER BY ydate
02:31:35  59  /

Table created.

Elapsed: 00:00:02.05
02:31:37 SQL> 
02:31:37 SQL> -- rpt
02:31:37 SQL> 
02:31:37 SQL> SELECT
02:31:37   2  pair
02:31:37   3  ,COUNT(pair)
02:31:37   4  ,MIN(clse),MAX(clse)
02:31:37   5  ,MIN(ydate),MAX(ydate)
02:31:37   6  FROM svm6122
02:31:37   7  GROUP BY pair
02:31:37   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_chf       19309    .931675	  1.00635 2010-10-03 20:55:01 2011-01-05 02:25:00

Elapsed: 00:00:00.03
02:31:37 SQL> 
02:31:37 SQL> -- Prepare for derivation of NTILE based params:
02:31:37 SQL> 
02:31:37 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.27
02:31:37 SQL> CREATE TABLE svm6142 COMPRESS AS
02:31:37   2  SELECT
02:31:37   3  pair
02:31:37   4  ,ydate
02:31:37   5  ,prdate
02:31:37   6  ,clse
02:31:37   7  ,g6
02:31:37   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
02:31:37   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
02:31:37  10  ,CASE WHEN trend IS NULL THEN 1
02:31:37  11  	    WHEN trend =0      THEN 1
02:31:37  12  	    ELSE trend END trend
02:31:37  13  ,cm4
02:31:37  14  ,cm6
02:31:37  15  ,cm8
02:31:37  16  ,cm10
02:31:37  17  ,cm12
02:31:37  18  ,cm14
02:31:37  19  ,cm16
02:31:37  20  ,cm18
02:31:37  21  --
02:31:37  22  ,ca4
02:31:37  23  ,ca6
02:31:37  24  ,ca8
02:31:37  25  ,ca10
02:31:37  26  ,ca12
02:31:37  27  ,ca14
02:31:37  28  ,ca16
02:31:37  29  ,ca18
02:31:37  30  --
02:31:37  31  ,cx4
02:31:37  32  ,cx6
02:31:37  33  ,cx8
02:31:37  34  ,cx10
02:31:37  35  ,cx12
02:31:37  36  ,cx14
02:31:37  37  ,cx16
02:31:37  38  ,cx18
02:31:37  39  --
02:31:37  40  ,crr4
02:31:37  41  ,crr6
02:31:37  42  ,crr8
02:31:37  43  ,crr10
02:31:37  44  ,crr12
02:31:37  45  ,crr14
02:31:37  46  ,crr16
02:31:37  47  ,crr18
02:31:37  48  --
02:31:37  49  ,hh
02:31:37  50  ,d
02:31:37  51  ,w
02:31:37  52  ,mpm
02:31:37  53  ,mph
02:31:37  54  FROM svm6122
02:31:37  55  ORDER BY ydate
02:31:37  56  /

Table created.

Elapsed: 00:00:00.42
02:31:38 SQL> 
02:31:38 SQL> -- rpt
02:31:38 SQL> 
02:31:38 SQL> SELECT
02:31:38   2  pair
02:31:38   3  ,trend
02:31:38   4  ,gatt
02:31:38   5  ,COUNT(pair)
02:31:38   6  ,AVG(g6)
02:31:38   7  FROM svm6142
02:31:38   8  GROUP BY pair,trend,gatt
02:31:38   9  ORDER BY pair,trend,gatt
02:31:38  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7061 -.00199809
usd_chf 	-1 up	      3021 .003850689
usd_chf 	-1		28
usd_chf 	 1 nup	      6375  -.0015641
usd_chf 	 1 up	      2780 .003758424
usd_chf 	 1		44

6 rows selected.

Elapsed: 00:00:00.04
02:31:38 SQL> 
02:31:38 SQL> 
02:31:38 SQL> -- Derive NTILE based params:
02:31:38 SQL> 
02:31:38 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.13
02:31:38 SQL> CREATE TABLE svm6162 COMPRESS AS
02:31:38   2  SELECT
02:31:38   3  pair
02:31:38   4  ,ydate
02:31:38   5  ,prdate
02:31:38   6  ,clse
02:31:38   7  ,g6
02:31:38   8  ,gatt
02:31:38   9  ,gattn
02:31:38  10  ,trend
02:31:38  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
02:31:38  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
02:31:38  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
02:31:38  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
02:31:38  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
02:31:38  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
02:31:38  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
02:31:38  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
02:31:38  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
02:31:38  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
02:31:38  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
02:31:38  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
02:31:38  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
02:31:38  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
02:31:38  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
02:31:38  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
02:31:38  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
02:31:38  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
02:31:38  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
02:31:38  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
02:31:38  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
02:31:38  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
02:31:38  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
02:31:38  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
02:31:38  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
02:31:38  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
02:31:38  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
02:31:38  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
02:31:38  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
02:31:38  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
02:31:38  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
02:31:38  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
02:31:38  43  ,hh  att32
02:31:38  44  ,d   att33
02:31:38  45  ,w   att34
02:31:38  46  ,mpm att35
02:31:38  47  ,mph att36
02:31:38  48  ,trend att37
02:31:38  49  FROM svm6142
02:31:38  50  ORDER BY ydate
02:31:38  51  /

Table created.

Elapsed: 00:00:04.72
02:31:42 SQL> 
02:31:42 SQL> -- rpt
02:31:42 SQL> 
02:31:42 SQL> SELECT
02:31:42   2  pair
02:31:42   3  ,trend
02:31:42   4  ,gatt
02:31:42   5  ,COUNT(pair)
02:31:42   6  ,AVG(g6)
02:31:42   7  FROM svm6162
02:31:42   8  GROUP BY pair,trend,gatt
02:31:42   9  ORDER BY pair,trend,gatt
02:31:42  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7061 -.00199809
usd_chf 	-1 up	      3021 .003850689
usd_chf 	-1		28
usd_chf 	 1 nup	      6375  -.0015641
usd_chf 	 1 up	      2780 .003758424
usd_chf 	 1		44

6 rows selected.

Elapsed: 00:00:00.03
02:31:42 SQL> 
02:31:42 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.20
02:31:43 SQL> CREATE TABLE modsrc COMPRESS AS
02:31:43   2  SELECT
02:31:43   3  pair
02:31:43   4  ,ydate
02:31:43   5  ,prdate
02:31:43   6  ,trend
02:31:43   7  ,g6
02:31:43   8  ,gatt
02:31:43   9  ,gattn
02:31:43  10  FROM svm6162
02:31:43  11  /

Table created.

Elapsed: 00:00:00.08
02:31:43 SQL> 
02:31:43 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.22
02:31:43 SQL> 
02:31:43 SQL> DROP   TABLE chf_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
02:31:43 SQL> CREATE TABLE chf_ms610 COMPRESS AS
02:31:43   2  SELECT
02:31:43   3  ydate
02:31:43   4  ,trend chf_trend
02:31:43   5  ,g6    chf_g6
02:31:43   6  ,gatt  chf_gatt
02:31:43   7  ,gattn chf_gattn
02:31:43   8  FROM modsrc
02:31:43   9  /

Table created.

Elapsed: 00:00:00.06
02:31:43 SQL> 
02:31:43 SQL> ANALYZE TABLE chf_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
02:31:43 SQL> 
02:31:43 SQL> -- I need a copy of the attributes:
02:31:43 SQL> 
02:31:43 SQL> 
02:31:43 SQL> DROP   TABLE chf_att;

Table dropped.

Elapsed: 00:00:00.09
02:31:43 SQL> CREATE TABLE chf_att COMPRESS AS
02:31:43   2  SELECT
02:31:43   3  ydate
02:31:43   4  ,att00 chf_att00
02:31:43   5  ,att01 chf_att01
02:31:43   6  ,att02 chf_att02
02:31:43   7  ,att03 chf_att03
02:31:43   8  ,att04 chf_att04
02:31:43   9  ,att05 chf_att05
02:31:43  10  ,att06 chf_att06
02:31:43  11  ,att07 chf_att07
02:31:43  12  ,att08 chf_att08
02:31:43  13  ,att09 chf_att09
02:31:43  14  ,att10 chf_att10
02:31:43  15  ,att11 chf_att11
02:31:43  16  ,att12 chf_att12
02:31:43  17  ,att13 chf_att13
02:31:43  18  ,att14 chf_att14
02:31:43  19  ,att15 chf_att15
02:31:43  20  ,att16 chf_att16
02:31:43  21  ,att17 chf_att17
02:31:43  22  ,att18 chf_att18
02:31:43  23  ,att19 chf_att19
02:31:43  24  ,att20 chf_att20
02:31:43  25  ,att21 chf_att21
02:31:43  26  ,att22 chf_att22
02:31:43  27  ,att23 chf_att23
02:31:43  28  ,att24 chf_att24
02:31:43  29  ,att25 chf_att25
02:31:43  30  ,att26 chf_att26
02:31:43  31  ,att27 chf_att27
02:31:43  32  ,att28 chf_att28
02:31:43  33  ,att29 chf_att29
02:31:43  34  ,att30 chf_att30
02:31:43  35  ,att31 chf_att31
02:31:43  36  ,att32 chf_att32
02:31:43  37  ,att33 chf_att33
02:31:43  38  ,att34 chf_att34
02:31:43  39  ,att35 chf_att35
02:31:43  40  ,att36 chf_att36
02:31:43  41  ,att37 chf_att37
02:31:43  42  FROM svm6162
02:31:43  43  /

Table created.

Elapsed: 00:00:00.17
02:31:44 SQL> 
02:31:44 SQL> ANALYZE TABLE chf_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:01.08
02:31:45 SQL> 
02:31:45 SQL> -- rpt
02:31:45 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19309

Elapsed: 00:00:00.85
02:31:45 SQL> SELECT COUNT(*)FROM chf_att;

  COUNT(*)
----------
     19309

Elapsed: 00:00:00.00
02:31:45 SQL> 
02:31:45 SQL> --
02:31:45 SQL> -- ech610.sql
02:31:45 SQL> --
02:31:45 SQL> 
02:31:45 SQL> -- Creates views and tables for backtesting a forex SVM strategy
02:31:45 SQL> 
02:31:45 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.45
02:31:46 SQL> 
02:31:46 SQL> -- I created di5min here:
02:31:46 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
02:31:46 SQL> 
02:31:46 SQL> CREATE OR REPLACE VIEW svm6102 AS
02:31:46   2  SELECT
02:31:46   3  pair
02:31:46   4  ,ydate
02:31:46   5  ,prdate
02:31:46   6  ,rownum rnum -- acts as t in my time-series
02:31:46   7  ,clse
02:31:46   8  -- Derive a bunch of attributes from clse, the latest price:
02:31:46   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
02:31:46  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
02:31:46  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
02:31:46  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
02:31:46  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
02:31:46  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
02:31:46  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
02:31:46  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
02:31:46  17  --
02:31:46  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
02:31:46  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
02:31:46  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
02:31:46  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
02:31:46  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
02:31:46  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
02:31:46  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
02:31:46  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
02:31:46  26  --
02:31:46  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
02:31:46  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
02:31:46  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
02:31:46  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
02:31:46  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
02:31:46  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
02:31:46  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
02:31:46  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
02:31:46  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
02:31:46  36  FROM di5min WHERE pair LIKE'%ech%'
02:31:46  37  AND ydate > sysdate - 95
02:31:46  38  ORDER BY ydate
02:31:46  39  /

View created.

Elapsed: 00:00:00.04
02:31:46 SQL> 
02:31:46 SQL> -- rpt
02:31:46 SQL> 
02:31:46 SQL> SELECT
02:31:46   2  pair
02:31:46   3  ,COUNT(pair)
02:31:46   4  ,MIN(clse),MAX(clse)
02:31:46   5  ,MIN(avg6),MAX(avg6)
02:31:46   6  ,MIN(ydate),MAX(ydate)
02:31:46   7  FROM svm6102
02:31:46   8  GROUP BY pair
02:31:46   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ech_usd       19308 1.24192946 1.38284305 1.24320711 1.37986485 2010-10-03 20:55:01 2011-01-05 02:25:00

Elapsed: 00:00:00.80
02:31:47 SQL> 
02:31:47 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
02:31:47 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.26
02:31:47 SQL> CREATE TABLE svm6122 COMPRESS AS
02:31:47   2  SELECT
02:31:47   3  pair
02:31:47   4  ,ydate
02:31:47   5  ,prdate
02:31:47   6  ,clse
02:31:47   7  -- g6 is important. I want to predict g6:
02:31:47   8  ,ld6 - clse g6
02:31:47   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
02:31:47  10  -- I want more attributes from the ones I derived above:
02:31:47  11  -- clse relation to moving-min
02:31:47  12  ,clse-min4  cm4
02:31:47  13  ,clse-min6  cm6
02:31:47  14  ,clse-min8  cm8
02:31:47  15  ,clse-min10 cm10
02:31:47  16  ,clse-min12 cm12
02:31:47  17  ,clse-min14 cm14
02:31:47  18  ,clse-min16 cm16
02:31:47  19  ,clse-min18 cm18
02:31:47  20  -- clse relation to moving-avg
02:31:47  21  ,clse-avg4  ca4
02:31:47  22  ,clse-avg6  ca6
02:31:47  23  ,clse-avg8  ca8
02:31:47  24  ,clse-avg10 ca10
02:31:47  25  ,clse-avg12 ca12
02:31:47  26  ,clse-avg14 ca14
02:31:47  27  ,clse-avg16 ca16
02:31:47  28  ,clse-avg18 ca18
02:31:47  29  -- clse relation to moving-max
02:31:47  30  ,clse-max4  cx4
02:31:47  31  ,clse-max6  cx6
02:31:47  32  ,clse-max8  cx8
02:31:47  33  ,clse-max10 cx10
02:31:47  34  ,clse-max12 cx12
02:31:47  35  ,clse-max14 cx14
02:31:47  36  ,clse-max16 cx16
02:31:47  37  ,clse-max18 cx18
02:31:47  38  -- Derive more attributes.
02:31:47  39  -- I want to use CORR() here to help SVM see the shape of the series.
02:31:47  40  -- But COVAR_POP is more stable:
02:31:47  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
02:31:47  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
02:31:47  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
02:31:47  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
02:31:47  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
02:31:47  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
02:31:47  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
02:31:47  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
02:31:47  49  -- Derive date related attributes:
02:31:47  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
02:31:47  51  ,0+TO_CHAR(ydate,'D')d
02:31:47  52  ,0+TO_CHAR(ydate,'W')w
02:31:47  53  -- mpm stands for minutes-past-midnight:
02:31:47  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
02:31:47  55  -- mph stands for minutes-past-hour:
02:31:47  56  ,0+TO_CHAR(ydate,'MI')mph
02:31:47  57  FROM svm6102
02:31:47  58  ORDER BY ydate
02:31:47  59  /

Table created.

Elapsed: 00:00:02.03
02:31:49 SQL> 
02:31:49 SQL> -- rpt
02:31:49 SQL> 
02:31:49 SQL> SELECT
02:31:49   2  pair
02:31:49   3  ,COUNT(pair)
02:31:49   4  ,MIN(clse),MAX(clse)
02:31:49   5  ,MIN(ydate),MAX(ydate)
02:31:49   6  FROM svm6122
02:31:49   7  GROUP BY pair
02:31:49   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ech_usd       19308 1.24192946 1.38284305 2010-10-03 20:55:01 2011-01-05 02:25:00

Elapsed: 00:00:00.03
02:31:49 SQL> 
02:31:49 SQL> -- Prepare for derivation of NTILE based params:
02:31:49 SQL> 
02:31:49 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.24
02:31:49 SQL> CREATE TABLE svm6142 COMPRESS AS
02:31:49   2  SELECT
02:31:49   3  pair
02:31:49   4  ,ydate
02:31:49   5  ,prdate
02:31:49   6  ,clse
02:31:49   7  ,g6
02:31:49   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
02:31:49   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
02:31:49  10  ,CASE WHEN trend IS NULL THEN 1
02:31:49  11  	    WHEN trend =0      THEN 1
02:31:49  12  	    ELSE trend END trend
02:31:49  13  ,cm4
02:31:49  14  ,cm6
02:31:49  15  ,cm8
02:31:49  16  ,cm10
02:31:49  17  ,cm12
02:31:49  18  ,cm14
02:31:49  19  ,cm16
02:31:49  20  ,cm18
02:31:49  21  --
02:31:49  22  ,ca4
02:31:49  23  ,ca6
02:31:49  24  ,ca8
02:31:49  25  ,ca10
02:31:49  26  ,ca12
02:31:49  27  ,ca14
02:31:49  28  ,ca16
02:31:49  29  ,ca18
02:31:49  30  --
02:31:49  31  ,cx4
02:31:49  32  ,cx6
02:31:49  33  ,cx8
02:31:49  34  ,cx10
02:31:49  35  ,cx12
02:31:49  36  ,cx14
02:31:49  37  ,cx16
02:31:49  38  ,cx18
02:31:49  39  --
02:31:49  40  ,crr4
02:31:49  41  ,crr6
02:31:49  42  ,crr8
02:31:49  43  ,crr10
02:31:49  44  ,crr12
02:31:49  45  ,crr14
02:31:49  46  ,crr16
02:31:49  47  ,crr18
02:31:49  48  --
02:31:49  49  ,hh
02:31:49  50  ,d
02:31:49  51  ,w
02:31:49  52  ,mpm
02:31:49  53  ,mph
02:31:49  54  FROM svm6122
02:31:49  55  ORDER BY ydate
02:31:49  56  /

Table created.

Elapsed: 00:00:00.39
02:31:50 SQL> 
02:31:50 SQL> -- rpt
02:31:50 SQL> 
02:31:50 SQL> SELECT
02:31:50   2  pair
02:31:50   3  ,trend
02:31:50   4  ,gatt
02:31:50   5  ,COUNT(pair)
02:31:50   6  ,AVG(g6)
02:31:50   7  FROM svm6142
02:31:50   8  GROUP BY pair,trend,gatt
02:31:50   9  ORDER BY pair,trend,gatt
02:31:50  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6568 -.00224594
ech_usd 	-1 up	      3536 .003509265
ech_usd 	-1		54
ech_usd 	 1 nup	      6296 -.00241652
ech_usd 	 1 up	      2836 .004078871
ech_usd 	 1		18

6 rows selected.

Elapsed: 00:00:00.04
02:31:50 SQL> 
02:31:50 SQL> 
02:31:50 SQL> -- Derive NTILE based params:
02:31:50 SQL> 
02:31:50 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.14
02:31:50 SQL> CREATE TABLE svm6162 COMPRESS AS
02:31:50   2  SELECT
02:31:50   3  pair
02:31:50   4  ,ydate
02:31:50   5  ,prdate
02:31:50   6  ,clse
02:31:50   7  ,g6
02:31:50   8  ,gatt
02:31:50   9  ,gattn
02:31:50  10  ,trend
02:31:50  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
02:31:50  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
02:31:50  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
02:31:50  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
02:31:50  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
02:31:50  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
02:31:50  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
02:31:50  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
02:31:50  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
02:31:50  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
02:31:50  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
02:31:50  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
02:31:50  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
02:31:50  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
02:31:50  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
02:31:50  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
02:31:50  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
02:31:50  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
02:31:50  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
02:31:50  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
02:31:50  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
02:31:50  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
02:31:50  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
02:31:50  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
02:31:50  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
02:31:50  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
02:31:50  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
02:31:50  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
02:31:50  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
02:31:50  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
02:31:50  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
02:31:50  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
02:31:50  43  ,hh  att32
02:31:50  44  ,d   att33
02:31:50  45  ,w   att34
02:31:50  46  ,mpm att35
02:31:50  47  ,mph att36
02:31:50  48  ,trend att37
02:31:50  49  FROM svm6142
02:31:50  50  ORDER BY ydate
02:31:50  51  /

Table created.

Elapsed: 00:00:04.79
02:31:55 SQL> 
02:31:55 SQL> -- rpt
02:31:55 SQL> 
02:31:55 SQL> SELECT
02:31:55   2  pair
02:31:55   3  ,trend
02:31:55   4  ,gatt
02:31:55   5  ,COUNT(pair)
02:31:55   6  ,AVG(g6)
02:31:55   7  FROM svm6162
02:31:55   8  GROUP BY pair,trend,gatt
02:31:55   9  ORDER BY pair,trend,gatt
02:31:55  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6568 -.00224594
ech_usd 	-1 up	      3536 .003509265
ech_usd 	-1		54
ech_usd 	 1 nup	      6296 -.00241652
ech_usd 	 1 up	      2836 .004078871
ech_usd 	 1		18

6 rows selected.

Elapsed: 00:00:00.03
02:31:55 SQL> 
02:31:55 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.11
02:31:55 SQL> CREATE TABLE modsrc COMPRESS AS
02:31:55   2  SELECT
02:31:55   3  pair
02:31:55   4  ,ydate
02:31:55   5  ,prdate
02:31:55   6  ,trend
02:31:55   7  ,g6
02:31:55   8  ,gatt
02:31:55   9  ,gattn
02:31:55  10  FROM svm6162
02:31:55  11  /

Table created.

Elapsed: 00:00:00.09
02:31:55 SQL> 
02:31:55 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
02:31:55 SQL> 
02:31:55 SQL> DROP   TABLE ech_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
02:31:55 SQL> CREATE TABLE ech_ms610 COMPRESS AS
02:31:55   2  SELECT
02:31:55   3  ydate
02:31:55   4  ,trend ech_trend
02:31:55   5  ,g6    ech_g6
02:31:55   6  ,gatt  ech_gatt
02:31:55   7  ,gattn ech_gattn
02:31:55   8  FROM modsrc
02:31:55   9  /

Table created.

Elapsed: 00:00:00.07
02:31:55 SQL> 
02:31:55 SQL> ANALYZE TABLE ech_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
02:31:55 SQL> 
02:31:55 SQL> -- I need a copy of the attributes:
02:31:55 SQL> 
02:31:55 SQL> 
02:31:55 SQL> DROP   TABLE ech_att;

Table dropped.

Elapsed: 00:00:00.05
02:31:55 SQL> CREATE TABLE ech_att COMPRESS AS
02:31:55   2  SELECT
02:31:55   3  ydate
02:31:55   4  ,att00 ech_att00
02:31:55   5  ,att01 ech_att01
02:31:55   6  ,att02 ech_att02
02:31:55   7  ,att03 ech_att03
02:31:55   8  ,att04 ech_att04
02:31:55   9  ,att05 ech_att05
02:31:55  10  ,att06 ech_att06
02:31:55  11  ,att07 ech_att07
02:31:55  12  ,att08 ech_att08
02:31:55  13  ,att09 ech_att09
02:31:55  14  ,att10 ech_att10
02:31:55  15  ,att11 ech_att11
02:31:55  16  ,att12 ech_att12
02:31:55  17  ,att13 ech_att13
02:31:55  18  ,att14 ech_att14
02:31:55  19  ,att15 ech_att15
02:31:55  20  ,att16 ech_att16
02:31:55  21  ,att17 ech_att17
02:31:55  22  ,att18 ech_att18
02:31:55  23  ,att19 ech_att19
02:31:55  24  ,att20 ech_att20
02:31:55  25  ,att21 ech_att21
02:31:55  26  ,att22 ech_att22
02:31:55  27  ,att23 ech_att23
02:31:55  28  ,att24 ech_att24
02:31:55  29  ,att25 ech_att25
02:31:55  30  ,att26 ech_att26
02:31:55  31  ,att27 ech_att27
02:31:55  32  ,att28 ech_att28
02:31:55  33  ,att29 ech_att29
02:31:55  34  ,att30 ech_att30
02:31:55  35  ,att31 ech_att31
02:31:55  36  ,att32 ech_att32
02:31:55  37  ,att33 ech_att33
02:31:55  38  ,att34 ech_att34
02:31:55  39  ,att35 ech_att35
02:31:55  40  ,att36 ech_att36
02:31:55  41  ,att37 ech_att37
02:31:55  42  FROM svm6162
02:31:55  43  /

Table created.

Elapsed: 00:00:00.17
02:31:56 SQL> 
02:31:56 SQL> ANALYZE TABLE ech_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.44
02:31:56 SQL> 
02:31:56 SQL> -- rpt
02:31:56 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19308

Elapsed: 00:00:00.75
02:31:57 SQL> SELECT COUNT(*)FROM ech_att;

  COUNT(*)
----------
     19308

Elapsed: 00:00:00.01
02:31:57 SQL> 
02:31:57 SQL> --
02:31:57 SQL> -- egb610.sql
02:31:57 SQL> --
02:31:57 SQL> 
02:31:57 SQL> -- Creates views and tables for backtesting a forex SVM strategy
02:31:57 SQL> 
02:31:57 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.40
02:31:57 SQL> 
02:31:57 SQL> -- I created di5min here:
02:31:57 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
02:31:57 SQL> 
02:31:57 SQL> CREATE OR REPLACE VIEW svm6102 AS
02:31:57   2  SELECT
02:31:57   3  pair
02:31:57   4  ,ydate
02:31:57   5  ,prdate
02:31:57   6  ,rownum rnum -- acts as t in my time-series
02:31:57   7  ,clse
02:31:57   8  -- Derive a bunch of attributes from clse, the latest price:
02:31:57   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
02:31:57  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
02:31:57  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
02:31:57  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
02:31:57  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
02:31:57  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
02:31:57  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
02:31:57  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
02:31:57  17  --
02:31:57  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
02:31:57  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
02:31:57  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
02:31:57  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
02:31:57  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
02:31:57  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
02:31:57  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
02:31:57  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
02:31:57  26  --
02:31:57  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
02:31:57  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
02:31:57  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
02:31:57  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
02:31:57  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
02:31:57  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
02:31:57  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
02:31:57  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
02:31:57  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
02:31:57  36  FROM di5min WHERE pair LIKE'%egb%'
02:31:57  37  AND ydate > sysdate - 95
02:31:57  38  ORDER BY ydate
02:31:57  39  /

View created.

Elapsed: 00:00:00.04
02:31:57 SQL> 
02:31:57 SQL> -- rpt
02:31:57 SQL> 
02:31:57 SQL> SELECT
02:31:57   2  pair
02:31:57   3  ,COUNT(pair)
02:31:57   4  ,MIN(clse),MAX(clse)
02:31:57   5  ,MIN(avg6),MAX(avg6)
02:31:57   6  ,MIN(ydate),MAX(ydate)
02:31:57   7  FROM svm6102
02:31:57   8  GROUP BY pair
02:31:57   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
egb_usd       19307 .833520557 .893920122 .834199029 .892400287 2010-10-03 20:55:01 2011-01-05 02:25:00

Elapsed: 00:00:00.98
02:31:58 SQL> 
02:31:58 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
02:31:58 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.25
02:31:58 SQL> CREATE TABLE svm6122 COMPRESS AS
02:31:58   2  SELECT
02:31:58   3  pair
02:31:58   4  ,ydate
02:31:58   5  ,prdate
02:31:58   6  ,clse
02:31:58   7  -- g6 is important. I want to predict g6:
02:31:58   8  ,ld6 - clse g6
02:31:58   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
02:31:58  10  -- I want more attributes from the ones I derived above:
02:31:58  11  -- clse relation to moving-min
02:31:58  12  ,clse-min4  cm4
02:31:58  13  ,clse-min6  cm6
02:31:58  14  ,clse-min8  cm8
02:31:58  15  ,clse-min10 cm10
02:31:58  16  ,clse-min12 cm12
02:31:58  17  ,clse-min14 cm14
02:31:58  18  ,clse-min16 cm16
02:31:58  19  ,clse-min18 cm18
02:31:58  20  -- clse relation to moving-avg
02:31:58  21  ,clse-avg4  ca4
02:31:58  22  ,clse-avg6  ca6
02:31:58  23  ,clse-avg8  ca8
02:31:58  24  ,clse-avg10 ca10
02:31:58  25  ,clse-avg12 ca12
02:31:58  26  ,clse-avg14 ca14
02:31:58  27  ,clse-avg16 ca16
02:31:58  28  ,clse-avg18 ca18
02:31:58  29  -- clse relation to moving-max
02:31:58  30  ,clse-max4  cx4
02:31:58  31  ,clse-max6  cx6
02:31:58  32  ,clse-max8  cx8
02:31:58  33  ,clse-max10 cx10
02:31:58  34  ,clse-max12 cx12
02:31:58  35  ,clse-max14 cx14
02:31:58  36  ,clse-max16 cx16
02:31:58  37  ,clse-max18 cx18
02:31:58  38  -- Derive more attributes.
02:31:58  39  -- I want to use CORR() here to help SVM see the shape of the series.
02:31:58  40  -- But COVAR_POP is more stable:
02:31:58  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
02:31:58  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
02:31:58  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
02:31:58  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
02:31:58  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
02:31:58  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
02:31:58  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
02:31:58  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
02:31:58  49  -- Derive date related attributes:
02:31:58  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
02:31:58  51  ,0+TO_CHAR(ydate,'D')d
02:31:58  52  ,0+TO_CHAR(ydate,'W')w
02:31:58  53  -- mpm stands for minutes-past-midnight:
02:31:58  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
02:31:58  55  -- mph stands for minutes-past-hour:
02:31:58  56  ,0+TO_CHAR(ydate,'MI')mph
02:31:58  57  FROM svm6102
02:31:58  58  ORDER BY ydate
02:31:58  59  /

Table created.

Elapsed: 00:00:02.45
02:32:01 SQL> 
02:32:01 SQL> -- rpt
02:32:01 SQL> 
02:32:01 SQL> SELECT
02:32:01   2  pair
02:32:01   3  ,COUNT(pair)
02:32:01   4  ,MIN(clse),MAX(clse)
02:32:01   5  ,MIN(ydate),MAX(ydate)
02:32:01   6  FROM svm6122
02:32:01   7  GROUP BY pair
02:32:01   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
egb_usd       19307 .833520557 .893920122 2010-10-03 20:55:01 2011-01-05 02:25:00

Elapsed: 00:00:00.05
02:32:01 SQL> 
02:32:01 SQL> -- Prepare for derivation of NTILE based params:
02:32:01 SQL> 
02:32:01 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.43
02:32:01 SQL> CREATE TABLE svm6142 COMPRESS AS
02:32:01   2  SELECT
02:32:01   3  pair
02:32:01   4  ,ydate
02:32:01   5  ,prdate
02:32:01   6  ,clse
02:32:01   7  ,g6
02:32:01   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
02:32:01   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
02:32:01  10  ,CASE WHEN trend IS NULL THEN 1
02:32:01  11  	    WHEN trend =0      THEN 1
02:32:01  12  	    ELSE trend END trend
02:32:01  13  ,cm4
02:32:01  14  ,cm6
02:32:01  15  ,cm8
02:32:01  16  ,cm10
02:32:01  17  ,cm12
02:32:01  18  ,cm14
02:32:01  19  ,cm16
02:32:01  20  ,cm18
02:32:01  21  --
02:32:01  22  ,ca4
02:32:01  23  ,ca6
02:32:01  24  ,ca8
02:32:01  25  ,ca10
02:32:01  26  ,ca12
02:32:01  27  ,ca14
02:32:01  28  ,ca16
02:32:01  29  ,ca18
02:32:01  30  --
02:32:01  31  ,cx4
02:32:01  32  ,cx6
02:32:01  33  ,cx8
02:32:01  34  ,cx10
02:32:01  35  ,cx12
02:32:01  36  ,cx14
02:32:01  37  ,cx16
02:32:01  38  ,cx18
02:32:01  39  --
02:32:01  40  ,crr4
02:32:01  41  ,crr6
02:32:01  42  ,crr8
02:32:01  43  ,crr10
02:32:01  44  ,crr12
02:32:01  45  ,crr14
02:32:01  46  ,crr16
02:32:01  47  ,crr18
02:32:01  48  --
02:32:01  49  ,hh
02:32:01  50  ,d
02:32:01  51  ,w
02:32:01  52  ,mpm
02:32:01  53  ,mph
02:32:01  54  FROM svm6122
02:32:01  55  ORDER BY ydate
02:32:01  56  /

Table created.

Elapsed: 00:00:00.45
02:32:02 SQL> 
02:32:02 SQL> -- rpt
02:32:02 SQL> 
02:32:02 SQL> SELECT
02:32:02   2  pair
02:32:02   3  ,trend
02:32:02   4  ,gatt
02:32:02   5  ,COUNT(pair)
02:32:02   6  ,AVG(g6)
02:32:02   7  FROM svm6142
02:32:02   8  GROUP BY pair,trend,gatt
02:32:02   9  ORDER BY pair,trend,gatt
02:32:02  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7564 -.00104146
egb_usd 	-1 up	      2626 .002933187
egb_usd 	-1		64
egb_usd 	 1 nup	      6428 -.00136584
egb_usd 	 1 up	      2617   .0029282
egb_usd 	 1		 8

6 rows selected.

Elapsed: 00:00:00.04
02:32:02 SQL> 
02:32:02 SQL> 
02:32:02 SQL> -- Derive NTILE based params:
02:32:02 SQL> 
02:32:02 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.21
02:32:02 SQL> CREATE TABLE svm6162 COMPRESS AS
02:32:02   2  SELECT
02:32:02   3  pair
02:32:02   4  ,ydate
02:32:02   5  ,prdate
02:32:02   6  ,clse
02:32:02   7  ,g6
02:32:02   8  ,gatt
02:32:02   9  ,gattn
02:32:02  10  ,trend
02:32:02  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
02:32:02  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
02:32:02  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
02:32:02  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
02:32:02  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
02:32:02  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
02:32:02  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
02:32:02  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
02:32:02  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
02:32:02  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
02:32:02  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
02:32:02  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
02:32:02  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
02:32:02  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
02:32:02  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
02:32:02  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
02:32:02  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
02:32:02  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
02:32:02  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
02:32:02  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
02:32:02  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
02:32:02  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
02:32:02  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
02:32:02  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
02:32:02  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
02:32:02  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
02:32:02  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
02:32:02  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
02:32:02  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
02:32:02  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
02:32:02  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
02:32:02  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
02:32:02  43  ,hh  att32
02:32:02  44  ,d   att33
02:32:02  45  ,w   att34
02:32:02  46  ,mpm att35
02:32:02  47  ,mph att36
02:32:02  48  ,trend att37
02:32:02  49  FROM svm6142
02:32:02  50  ORDER BY ydate
02:32:02  51  /

Table created.

Elapsed: 00:00:05.41
02:32:07 SQL> 
02:32:07 SQL> -- rpt
02:32:07 SQL> 
02:32:07 SQL> SELECT
02:32:07   2  pair
02:32:07   3  ,trend
02:32:07   4  ,gatt
02:32:07   5  ,COUNT(pair)
02:32:07   6  ,AVG(g6)
02:32:07   7  FROM svm6162
02:32:07   8  GROUP BY pair,trend,gatt
02:32:07   9  ORDER BY pair,trend,gatt
02:32:07  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7564 -.00104146
egb_usd 	-1 up	      2626 .002933187
egb_usd 	-1		64
egb_usd 	 1 nup	      6428 -.00136584
egb_usd 	 1 up	      2617   .0029282
egb_usd 	 1		 8

6 rows selected.

Elapsed: 00:00:00.03
02:32:08 SQL> 
02:32:08 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.24
02:32:08 SQL> CREATE TABLE modsrc COMPRESS AS
02:32:08   2  SELECT
02:32:08   3  pair
02:32:08   4  ,ydate
02:32:08   5  ,prdate
02:32:08   6  ,trend
02:32:08   7  ,g6
02:32:08   8  ,gatt
02:32:08   9  ,gattn
02:32:08  10  FROM svm6162
02:32:08  11  /

Table created.

Elapsed: 00:00:00.10
02:32:08 SQL> 
02:32:08 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.22
02:32:08 SQL> 
02:32:08 SQL> DROP   TABLE egb_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
02:32:08 SQL> CREATE TABLE egb_ms610 COMPRESS AS
02:32:08   2  SELECT
02:32:08   3  ydate
02:32:08   4  ,trend egb_trend
02:32:08   5  ,g6    egb_g6
02:32:08   6  ,gatt  egb_gatt
02:32:08   7  ,gattn egb_gattn
02:32:08   8  FROM modsrc
02:32:08   9  /

Table created.

Elapsed: 00:00:00.09
02:32:08 SQL> 
02:32:08 SQL> ANALYZE TABLE egb_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
02:32:08 SQL> 
02:32:08 SQL> -- I need a copy of the attributes:
02:32:08 SQL> 
02:32:08 SQL> 
02:32:08 SQL> DROP   TABLE egb_att;

Table dropped.

Elapsed: 00:00:00.07
02:32:08 SQL> CREATE TABLE egb_att COMPRESS AS
02:32:08   2  SELECT
02:32:08   3  ydate
02:32:08   4  ,att00 egb_att00
02:32:08   5  ,att01 egb_att01
02:32:08   6  ,att02 egb_att02
02:32:08   7  ,att03 egb_att03
02:32:08   8  ,att04 egb_att04
02:32:08   9  ,att05 egb_att05
02:32:08  10  ,att06 egb_att06
02:32:08  11  ,att07 egb_att07
02:32:08  12  ,att08 egb_att08
02:32:08  13  ,att09 egb_att09
02:32:08  14  ,att10 egb_att10
02:32:08  15  ,att11 egb_att11
02:32:08  16  ,att12 egb_att12
02:32:08  17  ,att13 egb_att13
02:32:08  18  ,att14 egb_att14
02:32:08  19  ,att15 egb_att15
02:32:08  20  ,att16 egb_att16
02:32:08  21  ,att17 egb_att17
02:32:08  22  ,att18 egb_att18
02:32:08  23  ,att19 egb_att19
02:32:08  24  ,att20 egb_att20
02:32:08  25  ,att21 egb_att21
02:32:08  26  ,att22 egb_att22
02:32:08  27  ,att23 egb_att23
02:32:08  28  ,att24 egb_att24
02:32:08  29  ,att25 egb_att25
02:32:08  30  ,att26 egb_att26
02:32:08  31  ,att27 egb_att27
02:32:08  32  ,att28 egb_att28
02:32:08  33  ,att29 egb_att29
02:32:08  34  ,att30 egb_att30
02:32:08  35  ,att31 egb_att31
02:32:08  36  ,att32 egb_att32
02:32:08  37  ,att33 egb_att33
02:32:08  38  ,att34 egb_att34
02:32:08  39  ,att35 egb_att35
02:32:08  40  ,att36 egb_att36
02:32:08  41  ,att37 egb_att37
02:32:08  42  FROM svm6162
02:32:08  43  /

Table created.

Elapsed: 00:00:00.19
02:32:09 SQL> 
02:32:09 SQL> ANALYZE TABLE egb_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.44
02:32:09 SQL> 
02:32:09 SQL> -- rpt
02:32:09 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19307

Elapsed: 00:00:00.90
02:32:10 SQL> SELECT COUNT(*)FROM egb_att;

  COUNT(*)
----------
     19307

Elapsed: 00:00:00.01
02:32:10 SQL> 
02:32:10 SQL> --
02:32:10 SQL> -- ejp610.sql
02:32:10 SQL> --
02:32:10 SQL> 
02:32:10 SQL> -- Creates views and tables for backtesting a forex SVM strategy
02:32:10 SQL> 
02:32:10 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.52
02:32:10 SQL> 
02:32:10 SQL> -- I created di5min here:
02:32:10 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
02:32:10 SQL> 
02:32:10 SQL> CREATE OR REPLACE VIEW svm6102 AS
02:32:10   2  SELECT
02:32:10   3  pair
02:32:10   4  ,ydate
02:32:10   5  ,prdate
02:32:10   6  ,rownum rnum -- acts as t in my time-series
02:32:10   7  ,clse
02:32:10   8  -- Derive a bunch of attributes from clse, the latest price:
02:32:10   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
02:32:10  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
02:32:10  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
02:32:10  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
02:32:10  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
02:32:10  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
02:32:10  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
02:32:10  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
02:32:10  17  --
02:32:10  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
02:32:10  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
02:32:10  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
02:32:10  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
02:32:10  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
02:32:10  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
02:32:10  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
02:32:10  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
02:32:10  26  --
02:32:10  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
02:32:10  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
02:32:10  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
02:32:10  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
02:32:10  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
02:32:10  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
02:32:10  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
02:32:10  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
02:32:10  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
02:32:10  36  FROM di5min WHERE pair LIKE'%ejp%'
02:32:10  37  AND ydate > sysdate - 95
02:32:10  38  ORDER BY ydate
02:32:10  39  /

View created.

Elapsed: 00:00:00.04
02:32:11 SQL> 
02:32:11 SQL> -- rpt
02:32:11 SQL> 
02:32:11 SQL> SELECT
02:32:11   2  pair
02:32:11   3  ,COUNT(pair)
02:32:11   4  ,MIN(clse),MAX(clse)
02:32:11   5  ,MIN(avg6),MAX(avg6)
02:32:11   6  ,MIN(ydate),MAX(ydate)
02:32:11   7  FROM svm6102
02:32:11   8  GROUP BY pair
02:32:11   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ejp_usd       19305 107.643765	115.63485 107.776148 115.509678 2010-10-03 20:55:01 2011-01-05 02:25:00

Elapsed: 00:00:00.83
02:32:11 SQL> 
02:32:11 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
02:32:11 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.20
02:32:12 SQL> CREATE TABLE svm6122 COMPRESS AS
02:32:12   2  SELECT
02:32:12   3  pair
02:32:12   4  ,ydate
02:32:12   5  ,prdate
02:32:12   6  ,clse
02:32:12   7  -- g6 is important. I want to predict g6:
02:32:12   8  ,ld6 - clse g6
02:32:12   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
02:32:12  10  -- I want more attributes from the ones I derived above:
02:32:12  11  -- clse relation to moving-min
02:32:12  12  ,clse-min4  cm4
02:32:12  13  ,clse-min6  cm6
02:32:12  14  ,clse-min8  cm8
02:32:12  15  ,clse-min10 cm10
02:32:12  16  ,clse-min12 cm12
02:32:12  17  ,clse-min14 cm14
02:32:12  18  ,clse-min16 cm16
02:32:12  19  ,clse-min18 cm18
02:32:12  20  -- clse relation to moving-avg
02:32:12  21  ,clse-avg4  ca4
02:32:12  22  ,clse-avg6  ca6
02:32:12  23  ,clse-avg8  ca8
02:32:12  24  ,clse-avg10 ca10
02:32:12  25  ,clse-avg12 ca12
02:32:12  26  ,clse-avg14 ca14
02:32:12  27  ,clse-avg16 ca16
02:32:12  28  ,clse-avg18 ca18
02:32:12  29  -- clse relation to moving-max
02:32:12  30  ,clse-max4  cx4
02:32:12  31  ,clse-max6  cx6
02:32:12  32  ,clse-max8  cx8
02:32:12  33  ,clse-max10 cx10
02:32:12  34  ,clse-max12 cx12
02:32:12  35  ,clse-max14 cx14
02:32:12  36  ,clse-max16 cx16
02:32:12  37  ,clse-max18 cx18
02:32:12  38  -- Derive more attributes.
02:32:12  39  -- I want to use CORR() here to help SVM see the shape of the series.
02:32:12  40  -- But COVAR_POP is more stable:
02:32:12  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
02:32:12  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
02:32:12  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
02:32:12  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
02:32:12  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
02:32:12  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
02:32:12  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
02:32:12  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
02:32:12  49  -- Derive date related attributes:
02:32:12  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
02:32:12  51  ,0+TO_CHAR(ydate,'D')d
02:32:12  52  ,0+TO_CHAR(ydate,'W')w
02:32:12  53  -- mpm stands for minutes-past-midnight:
02:32:12  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
02:32:12  55  -- mph stands for minutes-past-hour:
02:32:12  56  ,0+TO_CHAR(ydate,'MI')mph
02:32:12  57  FROM svm6102
02:32:12  58  ORDER BY ydate
02:32:12  59  /

Table created.

Elapsed: 00:00:02.07
02:32:14 SQL> 
02:32:14 SQL> -- rpt
02:32:14 SQL> 
02:32:14 SQL> SELECT
02:32:14   2  pair
02:32:14   3  ,COUNT(pair)
02:32:14   4  ,MIN(clse),MAX(clse)
02:32:14   5  ,MIN(ydate),MAX(ydate)
02:32:14   6  FROM svm6122
02:32:14   7  GROUP BY pair
02:32:14   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ejp_usd       19305 107.643765	115.63485 2010-10-03 20:55:01 2011-01-05 02:25:00

Elapsed: 00:00:00.04
02:32:14 SQL> 
02:32:14 SQL> -- Prepare for derivation of NTILE based params:
02:32:14 SQL> 
02:32:14 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.20
02:32:14 SQL> CREATE TABLE svm6142 COMPRESS AS
02:32:14   2  SELECT
02:32:14   3  pair
02:32:14   4  ,ydate
02:32:14   5  ,prdate
02:32:14   6  ,clse
02:32:14   7  ,g6
02:32:14   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
02:32:14   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
02:32:14  10  ,CASE WHEN trend IS NULL THEN 1
02:32:14  11  	    WHEN trend =0      THEN 1
02:32:14  12  	    ELSE trend END trend
02:32:14  13  ,cm4
02:32:14  14  ,cm6
02:32:14  15  ,cm8
02:32:14  16  ,cm10
02:32:14  17  ,cm12
02:32:14  18  ,cm14
02:32:14  19  ,cm16
02:32:14  20  ,cm18
02:32:14  21  --
02:32:14  22  ,ca4
02:32:14  23  ,ca6
02:32:14  24  ,ca8
02:32:14  25  ,ca10
02:32:14  26  ,ca12
02:32:14  27  ,ca14
02:32:14  28  ,ca16
02:32:14  29  ,ca18
02:32:14  30  --
02:32:14  31  ,cx4
02:32:14  32  ,cx6
02:32:14  33  ,cx8
02:32:14  34  ,cx10
02:32:14  35  ,cx12
02:32:14  36  ,cx14
02:32:14  37  ,cx16
02:32:14  38  ,cx18
02:32:14  39  --
02:32:14  40  ,crr4
02:32:14  41  ,crr6
02:32:14  42  ,crr8
02:32:14  43  ,crr10
02:32:14  44  ,crr12
02:32:14  45  ,crr14
02:32:14  46  ,crr16
02:32:14  47  ,crr18
02:32:14  48  --
02:32:14  49  ,hh
02:32:14  50  ,d
02:32:14  51  ,w
02:32:14  52  ,mpm
02:32:14  53  ,mph
02:32:14  54  FROM svm6122
02:32:14  55  ORDER BY ydate
02:32:14  56  /

Table created.

Elapsed: 00:00:00.59
02:32:14 SQL> 
02:32:14 SQL> -- rpt
02:32:14 SQL> 
02:32:14 SQL> SELECT
02:32:14   2  pair
02:32:14   3  ,trend
02:32:14   4  ,gatt
02:32:14   5  ,COUNT(pair)
02:32:14   6  ,AVG(g6)
02:32:14   7  FROM svm6142
02:32:14   8  GROUP BY pair,trend,gatt
02:32:14   9  ORDER BY pair,trend,gatt
02:32:14  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      4894 -.32373523
ejp_usd 	-1 up	      4858 .271517767
ejp_usd 	-1		43
ejp_usd 	 1 nup	      4906 -.30104078
ejp_usd 	 1 up	      4575 .290080166
ejp_usd 	 1		29

6 rows selected.

Elapsed: 00:00:00.04
02:32:15 SQL> 
02:32:15 SQL> 
02:32:15 SQL> -- Derive NTILE based params:
02:32:15 SQL> 
02:32:15 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.14
02:32:15 SQL> CREATE TABLE svm6162 COMPRESS AS
02:32:15   2  SELECT
02:32:15   3  pair
02:32:15   4  ,ydate
02:32:15   5  ,prdate
02:32:15   6  ,clse
02:32:15   7  ,g6
02:32:15   8  ,gatt
02:32:15   9  ,gattn
02:32:15  10  ,trend
02:32:15  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
02:32:15  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
02:32:15  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
02:32:15  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
02:32:15  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
02:32:15  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
02:32:15  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
02:32:15  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
02:32:15  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
02:32:15  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
02:32:15  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
02:32:15  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
02:32:15  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
02:32:15  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
02:32:15  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
02:32:15  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
02:32:15  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
02:32:15  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
02:32:15  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
02:32:15  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
02:32:15  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
02:32:15  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
02:32:15  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
02:32:15  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
02:32:15  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
02:32:15  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
02:32:15  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
02:32:15  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
02:32:15  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
02:32:15  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
02:32:15  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
02:32:15  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
02:32:15  43  ,hh  att32
02:32:15  44  ,d   att33
02:32:15  45  ,w   att34
02:32:15  46  ,mpm att35
02:32:15  47  ,mph att36
02:32:15  48  ,trend att37
02:32:15  49  FROM svm6142
02:32:15  50  ORDER BY ydate
02:32:15  51  /

Table created.

Elapsed: 00:00:04.84
02:32:19 SQL> 
02:32:19 SQL> -- rpt
02:32:19 SQL> 
02:32:19 SQL> SELECT
02:32:19   2  pair
02:32:19   3  ,trend
02:32:19   4  ,gatt
02:32:19   5  ,COUNT(pair)
02:32:19   6  ,AVG(g6)
02:32:19   7  FROM svm6162
02:32:19   8  GROUP BY pair,trend,gatt
02:32:19   9  ORDER BY pair,trend,gatt
02:32:19  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      4894 -.32373523
ejp_usd 	-1 up	      4858 .271517767
ejp_usd 	-1		43
ejp_usd 	 1 nup	      4906 -.30104078
ejp_usd 	 1 up	      4575 .290080166
ejp_usd 	 1		29

6 rows selected.

Elapsed: 00:00:00.03
02:32:20 SQL> 
02:32:20 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.17
02:32:20 SQL> CREATE TABLE modsrc COMPRESS AS
02:32:20   2  SELECT
02:32:20   3  pair
02:32:20   4  ,ydate
02:32:20   5  ,prdate
02:32:20   6  ,trend
02:32:20   7  ,g6
02:32:20   8  ,gatt
02:32:20   9  ,gattn
02:32:20  10  FROM svm6162
02:32:20  11  /

Table created.

Elapsed: 00:00:00.09
02:32:20 SQL> 
02:32:20 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
02:32:20 SQL> 
02:32:20 SQL> DROP   TABLE ejp_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
02:32:20 SQL> CREATE TABLE ejp_ms610 COMPRESS AS
02:32:20   2  SELECT
02:32:20   3  ydate
02:32:20   4  ,trend ejp_trend
02:32:20   5  ,g6    ejp_g6
02:32:20   6  ,gatt  ejp_gatt
02:32:20   7  ,gattn ejp_gattn
02:32:20   8  FROM modsrc
02:32:20   9  /

Table created.

Elapsed: 00:00:00.08
02:32:20 SQL> 
02:32:20 SQL> ANALYZE TABLE ejp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
02:32:20 SQL> 
02:32:20 SQL> -- I need a copy of the attributes:
02:32:20 SQL> 
02:32:20 SQL> 
02:32:20 SQL> DROP   TABLE ejp_att;

Table dropped.

Elapsed: 00:00:00.05
02:32:20 SQL> CREATE TABLE ejp_att COMPRESS AS
02:32:20   2  SELECT
02:32:20   3  ydate
02:32:20   4  ,att00 ejp_att00
02:32:20   5  ,att01 ejp_att01
02:32:20   6  ,att02 ejp_att02
02:32:20   7  ,att03 ejp_att03
02:32:20   8  ,att04 ejp_att04
02:32:20   9  ,att05 ejp_att05
02:32:20  10  ,att06 ejp_att06
02:32:20  11  ,att07 ejp_att07
02:32:20  12  ,att08 ejp_att08
02:32:20  13  ,att09 ejp_att09
02:32:20  14  ,att10 ejp_att10
02:32:20  15  ,att11 ejp_att11
02:32:20  16  ,att12 ejp_att12
02:32:20  17  ,att13 ejp_att13
02:32:20  18  ,att14 ejp_att14
02:32:20  19  ,att15 ejp_att15
02:32:20  20  ,att16 ejp_att16
02:32:20  21  ,att17 ejp_att17
02:32:20  22  ,att18 ejp_att18
02:32:20  23  ,att19 ejp_att19
02:32:20  24  ,att20 ejp_att20
02:32:20  25  ,att21 ejp_att21
02:32:20  26  ,att22 ejp_att22
02:32:20  27  ,att23 ejp_att23
02:32:20  28  ,att24 ejp_att24
02:32:20  29  ,att25 ejp_att25
02:32:20  30  ,att26 ejp_att26
02:32:20  31  ,att27 ejp_att27
02:32:20  32  ,att28 ejp_att28
02:32:20  33  ,att29 ejp_att29
02:32:20  34  ,att30 ejp_att30
02:32:20  35  ,att31 ejp_att31
02:32:20  36  ,att32 ejp_att32
02:32:20  37  ,att33 ejp_att33
02:32:20  38  ,att34 ejp_att34
02:32:20  39  ,att35 ejp_att35
02:32:20  40  ,att36 ejp_att36
02:32:20  41  ,att37 ejp_att37
02:32:20  42  FROM svm6162
02:32:20  43  /

Table created.

Elapsed: 00:00:00.17
02:32:20 SQL> 
02:32:20 SQL> ANALYZE TABLE ejp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
02:32:21 SQL> 
02:32:21 SQL> -- rpt
02:32:21 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19305

Elapsed: 00:00:00.86
02:32:22 SQL> SELECT COUNT(*)FROM ejp_att;

  COUNT(*)
----------
     19305

Elapsed: 00:00:00.00
02:32:22 SQL> 
02:32:22 SQL> --
02:32:22 SQL> -- ajp610.sql
02:32:22 SQL> --
02:32:22 SQL> 
02:32:22 SQL> -- Creates views and tables for backtesting a forex SVM strategy
02:32:22 SQL> 
02:32:22 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.40
02:32:22 SQL> 
02:32:22 SQL> -- I created di5min here:
02:32:22 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
02:32:22 SQL> 
02:32:22 SQL> CREATE OR REPLACE VIEW svm6102 AS
02:32:22   2  SELECT
02:32:22   3  pair
02:32:22   4  ,ydate
02:32:22   5  ,prdate
02:32:22   6  ,rownum rnum -- acts as t in my time-series
02:32:22   7  ,clse
02:32:22   8  -- Derive a bunch of attributes from clse, the latest price:
02:32:22   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
02:32:22  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
02:32:22  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
02:32:22  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
02:32:22  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
02:32:22  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
02:32:22  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
02:32:22  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
02:32:22  17  --
02:32:22  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
02:32:22  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
02:32:22  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
02:32:22  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
02:32:22  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
02:32:22  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
02:32:22  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
02:32:22  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
02:32:22  26  --
02:32:22  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
02:32:22  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
02:32:22  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
02:32:22  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
02:32:22  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
02:32:22  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
02:32:22  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
02:32:22  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
02:32:22  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
02:32:22  36  FROM di5min WHERE pair LIKE'%ajp%'
02:32:22  37  AND ydate > sysdate - 95
02:32:22  38  ORDER BY ydate
02:32:22  39  /

View created.

Elapsed: 00:00:00.04
02:32:22 SQL> 
02:32:22 SQL> -- rpt
02:32:22 SQL> 
02:32:22 SQL> SELECT
02:32:22   2  pair
02:32:22   3  ,COUNT(pair)
02:32:22   4  ,MIN(clse),MAX(clse)
02:32:22   5  ,MIN(avg6),MAX(avg6)
02:32:22   6  ,MIN(ydate),MAX(ydate)
02:32:22   7  FROM svm6102
02:32:22   8  GROUP BY pair
02:32:22   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ajp_usd       19302  78.249976 83.6669853 78.5106193  83.546306 2010-10-03 20:55:01 2011-01-05 02:25:00

Elapsed: 00:00:00.79
02:32:23 SQL> 
02:32:23 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
02:32:23 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.27
02:32:23 SQL> CREATE TABLE svm6122 COMPRESS AS
02:32:23   2  SELECT
02:32:23   3  pair
02:32:23   4  ,ydate
02:32:23   5  ,prdate
02:32:23   6  ,clse
02:32:23   7  -- g6 is important. I want to predict g6:
02:32:23   8  ,ld6 - clse g6
02:32:23   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
02:32:23  10  -- I want more attributes from the ones I derived above:
02:32:23  11  -- clse relation to moving-min
02:32:23  12  ,clse-min4  cm4
02:32:23  13  ,clse-min6  cm6
02:32:23  14  ,clse-min8  cm8
02:32:23  15  ,clse-min10 cm10
02:32:23  16  ,clse-min12 cm12
02:32:23  17  ,clse-min14 cm14
02:32:23  18  ,clse-min16 cm16
02:32:23  19  ,clse-min18 cm18
02:32:23  20  -- clse relation to moving-avg
02:32:23  21  ,clse-avg4  ca4
02:32:23  22  ,clse-avg6  ca6
02:32:23  23  ,clse-avg8  ca8
02:32:23  24  ,clse-avg10 ca10
02:32:23  25  ,clse-avg12 ca12
02:32:23  26  ,clse-avg14 ca14
02:32:23  27  ,clse-avg16 ca16
02:32:23  28  ,clse-avg18 ca18
02:32:23  29  -- clse relation to moving-max
02:32:23  30  ,clse-max4  cx4
02:32:23  31  ,clse-max6  cx6
02:32:23  32  ,clse-max8  cx8
02:32:23  33  ,clse-max10 cx10
02:32:23  34  ,clse-max12 cx12
02:32:23  35  ,clse-max14 cx14
02:32:23  36  ,clse-max16 cx16
02:32:23  37  ,clse-max18 cx18
02:32:23  38  -- Derive more attributes.
02:32:23  39  -- I want to use CORR() here to help SVM see the shape of the series.
02:32:23  40  -- But COVAR_POP is more stable:
02:32:23  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
02:32:23  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
02:32:23  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
02:32:23  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
02:32:23  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
02:32:23  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
02:32:23  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
02:32:23  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
02:32:23  49  -- Derive date related attributes:
02:32:23  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
02:32:23  51  ,0+TO_CHAR(ydate,'D')d
02:32:23  52  ,0+TO_CHAR(ydate,'W')w
02:32:23  53  -- mpm stands for minutes-past-midnight:
02:32:23  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
02:32:23  55  -- mph stands for minutes-past-hour:
02:32:23  56  ,0+TO_CHAR(ydate,'MI')mph
02:32:23  57  FROM svm6102
02:32:23  58  ORDER BY ydate
02:32:23  59  /

Table created.

Elapsed: 00:00:01.96
02:32:25 SQL> 
02:32:25 SQL> -- rpt
02:32:25 SQL> 
02:32:25 SQL> SELECT
02:32:25   2  pair
02:32:25   3  ,COUNT(pair)
02:32:25   4  ,MIN(clse),MAX(clse)
02:32:25   5  ,MIN(ydate),MAX(ydate)
02:32:25   6  FROM svm6122
02:32:25   7  GROUP BY pair
02:32:25   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ajp_usd       19302  78.249976 83.6669853 2010-10-03 20:55:01 2011-01-05 02:25:00

Elapsed: 00:00:00.03
02:32:25 SQL> 
02:32:25 SQL> -- Prepare for derivation of NTILE based params:
02:32:25 SQL> 
02:32:25 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.23
02:32:26 SQL> CREATE TABLE svm6142 COMPRESS AS
02:32:26   2  SELECT
02:32:26   3  pair
02:32:26   4  ,ydate
02:32:26   5  ,prdate
02:32:26   6  ,clse
02:32:26   7  ,g6
02:32:26   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
02:32:26   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
02:32:26  10  ,CASE WHEN trend IS NULL THEN 1
02:32:26  11  	    WHEN trend =0      THEN 1
02:32:26  12  	    ELSE trend END trend
02:32:26  13  ,cm4
02:32:26  14  ,cm6
02:32:26  15  ,cm8
02:32:26  16  ,cm10
02:32:26  17  ,cm12
02:32:26  18  ,cm14
02:32:26  19  ,cm16
02:32:26  20  ,cm18
02:32:26  21  --
02:32:26  22  ,ca4
02:32:26  23  ,ca6
02:32:26  24  ,ca8
02:32:26  25  ,ca10
02:32:26  26  ,ca12
02:32:26  27  ,ca14
02:32:26  28  ,ca16
02:32:26  29  ,ca18
02:32:26  30  --
02:32:26  31  ,cx4
02:32:26  32  ,cx6
02:32:26  33  ,cx8
02:32:26  34  ,cx10
02:32:26  35  ,cx12
02:32:26  36  ,cx14
02:32:26  37  ,cx16
02:32:26  38  ,cx18
02:32:26  39  --
02:32:26  40  ,crr4
02:32:26  41  ,crr6
02:32:26  42  ,crr8
02:32:26  43  ,crr10
02:32:26  44  ,crr12
02:32:26  45  ,crr14
02:32:26  46  ,crr16
02:32:26  47  ,crr18
02:32:26  48  --
02:32:26  49  ,hh
02:32:26  50  ,d
02:32:26  51  ,w
02:32:26  52  ,mpm
02:32:26  53  ,mph
02:32:26  54  FROM svm6122
02:32:26  55  ORDER BY ydate
02:32:26  56  /

Table created.

Elapsed: 00:00:00.37
02:32:26 SQL> 
02:32:26 SQL> -- rpt
02:32:26 SQL> 
02:32:26 SQL> SELECT
02:32:26   2  pair
02:32:26   3  ,trend
02:32:26   4  ,gatt
02:32:26   5  ,COUNT(pair)
02:32:26   6  ,AVG(g6)
02:32:26   7  FROM svm6142
02:32:26   8  GROUP BY pair,trend,gatt
02:32:26   9  ORDER BY pair,trend,gatt
02:32:26  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ajp_usd 	-1 nup	      4179 -.22803729
ajp_usd 	-1 up	      5115 .220577996
ajp_usd 	-1		36
ajp_usd 	 1 nup	      5191 -.20235505
ajp_usd 	 1 up	      4745 .206911097
ajp_usd 	 1		36

6 rows selected.

Elapsed: 00:00:00.04
02:32:26 SQL> 
02:32:26 SQL> 
02:32:26 SQL> -- Derive NTILE based params:
02:32:26 SQL> 
02:32:26 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.14
02:32:26 SQL> CREATE TABLE svm6162 COMPRESS AS
02:32:26   2  SELECT
02:32:26   3  pair
02:32:26   4  ,ydate
02:32:26   5  ,prdate
02:32:26   6  ,clse
02:32:26   7  ,g6
02:32:26   8  ,gatt
02:32:26   9  ,gattn
02:32:26  10  ,trend
02:32:26  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
02:32:26  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
02:32:26  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
02:32:26  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
02:32:26  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
02:32:26  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
02:32:26  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
02:32:26  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
02:32:26  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
02:32:26  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
02:32:26  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
02:32:26  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
02:32:26  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
02:32:26  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
02:32:26  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
02:32:26  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
02:32:26  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
02:32:26  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
02:32:26  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
02:32:26  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
02:32:26  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
02:32:26  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
02:32:26  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
02:32:26  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
02:32:26  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
02:32:26  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
02:32:26  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
02:32:26  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
02:32:26  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
02:32:26  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
02:32:26  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
02:32:26  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
02:32:26  43  ,hh  att32
02:32:26  44  ,d   att33
02:32:26  45  ,w   att34
02:32:26  46  ,mpm att35
02:32:26  47  ,mph att36
02:32:26  48  ,trend att37
02:32:26  49  FROM svm6142
02:32:26  50  ORDER BY ydate
02:32:26  51  /

Table created.

Elapsed: 00:00:04.82
02:32:31 SQL> 
02:32:31 SQL> -- rpt
02:32:31 SQL> 
02:32:31 SQL> SELECT
02:32:31   2  pair
02:32:31   3  ,trend
02:32:31   4  ,gatt
02:32:31   5  ,COUNT(pair)
02:32:31   6  ,AVG(g6)
02:32:31   7  FROM svm6162
02:32:31   8  GROUP BY pair,trend,gatt
02:32:31   9  ORDER BY pair,trend,gatt
02:32:31  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ajp_usd 	-1 nup	      4179 -.22803729
ajp_usd 	-1 up	      5115 .220577996
ajp_usd 	-1		36
ajp_usd 	 1 nup	      5191 -.20235505
ajp_usd 	 1 up	      4745 .206911097
ajp_usd 	 1		36

6 rows selected.

Elapsed: 00:00:00.02
02:32:31 SQL> 
02:32:31 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
02:32:31 SQL> CREATE TABLE modsrc COMPRESS AS
02:32:31   2  SELECT
02:32:31   3  pair
02:32:31   4  ,ydate
02:32:31   5  ,prdate
02:32:31   6  ,trend
02:32:31   7  ,g6
02:32:31   8  ,gatt
02:32:31   9  ,gattn
02:32:31  10  FROM svm6162
02:32:31  11  /

Table created.

Elapsed: 00:00:00.09
02:32:31 SQL> 
02:32:31 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
02:32:31 SQL> 
02:32:31 SQL> DROP   TABLE ajp_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
02:32:31 SQL> CREATE TABLE ajp_ms610 COMPRESS AS
02:32:31   2  SELECT
02:32:31   3  ydate
02:32:31   4  ,trend ajp_trend
02:32:31   5  ,g6    ajp_g6
02:32:31   6  ,gatt  ajp_gatt
02:32:31   7  ,gattn ajp_gattn
02:32:31   8  FROM modsrc
02:32:31   9  /

Table created.

Elapsed: 00:00:00.09
02:32:32 SQL> 
02:32:32 SQL> ANALYZE TABLE ajp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
02:32:32 SQL> 
02:32:32 SQL> -- I need a copy of the attributes:
02:32:32 SQL> 
02:32:32 SQL> 
02:32:32 SQL> DROP   TABLE ajp_att;

Table dropped.

Elapsed: 00:00:00.04
02:32:32 SQL> CREATE TABLE ajp_att COMPRESS AS
02:32:32   2  SELECT
02:32:32   3  ydate
02:32:32   4  ,att00 ajp_att00
02:32:32   5  ,att01 ajp_att01
02:32:32   6  ,att02 ajp_att02
02:32:32   7  ,att03 ajp_att03
02:32:32   8  ,att04 ajp_att04
02:32:32   9  ,att05 ajp_att05
02:32:32  10  ,att06 ajp_att06
02:32:32  11  ,att07 ajp_att07
02:32:32  12  ,att08 ajp_att08
02:32:32  13  ,att09 ajp_att09
02:32:32  14  ,att10 ajp_att10
02:32:32  15  ,att11 ajp_att11
02:32:32  16  ,att12 ajp_att12
02:32:32  17  ,att13 ajp_att13
02:32:32  18  ,att14 ajp_att14
02:32:32  19  ,att15 ajp_att15
02:32:32  20  ,att16 ajp_att16
02:32:32  21  ,att17 ajp_att17
02:32:32  22  ,att18 ajp_att18
02:32:32  23  ,att19 ajp_att19
02:32:32  24  ,att20 ajp_att20
02:32:32  25  ,att21 ajp_att21
02:32:32  26  ,att22 ajp_att22
02:32:32  27  ,att23 ajp_att23
02:32:32  28  ,att24 ajp_att24
02:32:32  29  ,att25 ajp_att25
02:32:32  30  ,att26 ajp_att26
02:32:32  31  ,att27 ajp_att27
02:32:32  32  ,att28 ajp_att28
02:32:32  33  ,att29 ajp_att29
02:32:32  34  ,att30 ajp_att30
02:32:32  35  ,att31 ajp_att31
02:32:32  36  ,att32 ajp_att32
02:32:32  37  ,att33 ajp_att33
02:32:32  38  ,att34 ajp_att34
02:32:32  39  ,att35 ajp_att35
02:32:32  40  ,att36 ajp_att36
02:32:32  41  ,att37 ajp_att37
02:32:32  42  FROM svm6162
02:32:32  43  /

Table created.

Elapsed: 00:00:00.17
02:32:32 SQL> 
02:32:32 SQL> ANALYZE TABLE ajp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.43
02:32:32 SQL> 
02:32:32 SQL> -- rpt
02:32:32 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19302

Elapsed: 00:00:00.75
02:32:33 SQL> SELECT COUNT(*)FROM ajp_att;

  COUNT(*)
----------
     19302

Elapsed: 00:00:00.00
02:32:33 SQL> 
02:32:33 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
