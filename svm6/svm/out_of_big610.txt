
SQL*Plus: Release 11.2.0.1.0 Production on Mon Jan 3 02:02:48 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

02:02:48 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.01
02:02:48 SQL> 02:02:48 SQL> --
02:02:48 SQL> -- eur610.sql
02:02:48 SQL> --
02:02:48 SQL> 
02:02:48 SQL> -- Creates views and tables for backtesting a forex SVM strategy
02:02:48 SQL> 
02:02:48 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.00
02:02:48 SQL> 
02:02:48 SQL> -- I created di5min here:
02:02:48 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
02:02:48 SQL> 
02:02:48 SQL> CREATE OR REPLACE VIEW svm6102 AS
02:02:48   2  SELECT
02:02:48   3  pair
02:02:48   4  ,ydate
02:02:48   5  ,prdate
02:02:48   6  ,rownum rnum -- acts as t in my time-series
02:02:48   7  ,clse
02:02:48   8  -- Derive a bunch of attributes from clse, the latest price:
02:02:48   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
02:02:48  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
02:02:48  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
02:02:48  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
02:02:48  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
02:02:48  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
02:02:48  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
02:02:48  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
02:02:48  17  --
02:02:48  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
02:02:48  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
02:02:48  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
02:02:48  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
02:02:48  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
02:02:48  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
02:02:48  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
02:02:48  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
02:02:48  26  --
02:02:48  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
02:02:48  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
02:02:48  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
02:02:48  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
02:02:48  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
02:02:48  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
02:02:48  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
02:02:48  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
02:02:48  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
02:02:48  36  FROM di5min WHERE pair LIKE'%eur%'
02:02:48  37  AND ydate > sysdate - 95
02:02:48  38  ORDER BY ydate
02:02:48  39  /

View created.

Elapsed: 00:00:00.10
02:02:48 SQL> 
02:02:48 SQL> -- rpt
02:02:48 SQL> 
02:02:48 SQL> SELECT
02:02:48   2  pair
02:02:48   3  ,COUNT(pair)
02:02:48   4  ,MIN(clse),MAX(clse)
02:02:48   5  ,MIN(avg6),MAX(avg6)
02:02:48   6  ,MIN(ydate),MAX(ydate)
02:02:48   7  FROM svm6102
02:02:48   8  GROUP BY pair
02:02:48   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_usd       19259    1.29735	   1.4273 1.29875103 1.42436233 2010-09-30 02:05:01 2011-01-03 01:55:00

Elapsed: 00:00:00.91
02:02:49 SQL> 
02:02:49 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
02:02:49 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.08
02:02:49 SQL> CREATE TABLE svm6122 COMPRESS AS
02:02:49   2  SELECT
02:02:49   3  pair
02:02:49   4  ,ydate
02:02:49   5  ,prdate
02:02:49   6  ,clse
02:02:49   7  -- g6 is important. I want to predict g6:
02:02:49   8  ,ld6 - clse g6
02:02:49   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
02:02:49  10  -- I want more attributes from the ones I derived above:
02:02:49  11  -- clse relation to moving-min
02:02:49  12  ,clse-min4  cm4
02:02:49  13  ,clse-min6  cm6
02:02:49  14  ,clse-min8  cm8
02:02:49  15  ,clse-min10 cm10
02:02:49  16  ,clse-min12 cm12
02:02:49  17  ,clse-min14 cm14
02:02:49  18  ,clse-min16 cm16
02:02:49  19  ,clse-min18 cm18
02:02:49  20  -- clse relation to moving-avg
02:02:49  21  ,clse-avg4  ca4
02:02:49  22  ,clse-avg6  ca6
02:02:49  23  ,clse-avg8  ca8
02:02:49  24  ,clse-avg10 ca10
02:02:49  25  ,clse-avg12 ca12
02:02:49  26  ,clse-avg14 ca14
02:02:49  27  ,clse-avg16 ca16
02:02:49  28  ,clse-avg18 ca18
02:02:49  29  -- clse relation to moving-max
02:02:49  30  ,clse-max4  cx4
02:02:49  31  ,clse-max6  cx6
02:02:49  32  ,clse-max8  cx8
02:02:49  33  ,clse-max10 cx10
02:02:49  34  ,clse-max12 cx12
02:02:49  35  ,clse-max14 cx14
02:02:49  36  ,clse-max16 cx16
02:02:49  37  ,clse-max18 cx18
02:02:49  38  -- Derive more attributes.
02:02:49  39  -- I want to use CORR() here to help SVM see the shape of the series.
02:02:49  40  -- But COVAR_POP is more stable:
02:02:49  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
02:02:49  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
02:02:49  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
02:02:49  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
02:02:49  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
02:02:49  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
02:02:49  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
02:02:49  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
02:02:49  49  -- Derive date related attributes:
02:02:49  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
02:02:49  51  ,0+TO_CHAR(ydate,'D')d
02:02:49  52  ,0+TO_CHAR(ydate,'W')w
02:02:49  53  -- mpm stands for minutes-past-midnight:
02:02:49  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
02:02:49  55  -- mph stands for minutes-past-hour:
02:02:49  56  ,0+TO_CHAR(ydate,'MI')mph
02:02:49  57  FROM svm6102
02:02:49  58  ORDER BY ydate
02:02:49  59  /

Table created.

Elapsed: 00:00:02.37
02:02:52 SQL> 
02:02:52 SQL> -- rpt
02:02:52 SQL> 
02:02:52 SQL> SELECT
02:02:52   2  pair
02:02:52   3  ,COUNT(pair)
02:02:52   4  ,MIN(clse),MAX(clse)
02:02:52   5  ,MIN(ydate),MAX(ydate)
02:02:52   6  FROM svm6122
02:02:52   7  GROUP BY pair
02:02:52   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_usd       19259    1.29735	   1.4273 2010-09-30 02:05:01 2011-01-03 01:55:00

Elapsed: 00:00:00.05
02:02:52 SQL> 
02:02:52 SQL> -- Prepare for derivation of NTILE based params:
02:02:52 SQL> 
02:02:52 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.08
02:02:52 SQL> CREATE TABLE svm6142 COMPRESS AS
02:02:52   2  SELECT
02:02:52   3  pair
02:02:52   4  ,ydate
02:02:52   5  ,prdate
02:02:52   6  ,clse
02:02:52   7  ,g6
02:02:52   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
02:02:52   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
02:02:52  10  ,CASE WHEN trend IS NULL THEN 1
02:02:52  11  	    WHEN trend =0      THEN 1
02:02:52  12  	    ELSE trend END trend
02:02:52  13  ,cm4
02:02:52  14  ,cm6
02:02:52  15  ,cm8
02:02:52  16  ,cm10
02:02:52  17  ,cm12
02:02:52  18  ,cm14
02:02:52  19  ,cm16
02:02:52  20  ,cm18
02:02:52  21  --
02:02:52  22  ,ca4
02:02:52  23  ,ca6
02:02:52  24  ,ca8
02:02:52  25  ,ca10
02:02:52  26  ,ca12
02:02:52  27  ,ca14
02:02:52  28  ,ca16
02:02:52  29  ,ca18
02:02:52  30  --
02:02:52  31  ,cx4
02:02:52  32  ,cx6
02:02:52  33  ,cx8
02:02:52  34  ,cx10
02:02:52  35  ,cx12
02:02:52  36  ,cx14
02:02:52  37  ,cx16
02:02:52  38  ,cx18
02:02:52  39  --
02:02:52  40  ,crr4
02:02:52  41  ,crr6
02:02:52  42  ,crr8
02:02:52  43  ,crr10
02:02:52  44  ,crr12
02:02:52  45  ,crr14
02:02:52  46  ,crr16
02:02:52  47  ,crr18
02:02:52  48  --
02:02:52  49  ,hh
02:02:52  50  ,d
02:02:52  51  ,w
02:02:52  52  ,mpm
02:02:52  53  ,mph
02:02:52  54  FROM svm6122
02:02:52  55  ORDER BY ydate
02:02:52  56  /

Table created.

Elapsed: 00:00:00.37
02:02:52 SQL> 
02:02:52 SQL> -- rpt
02:02:52 SQL> 
02:02:52 SQL> SELECT
02:02:52   2  pair
02:02:52   3  ,trend
02:02:52   4  ,gatt
02:02:52   5  ,COUNT(pair)
02:02:52   6  ,AVG(g6)
02:02:52   7  FROM svm6142
02:02:52   8  GROUP BY pair,trend,gatt
02:02:52   9  ORDER BY pair,trend,gatt
02:02:52  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      5945 -.00312933
eur_usd 	-1 up	      3576 .004484406
eur_usd 	-1		66
eur_usd 	 1 nup	      5849 -.00316555
eur_usd 	 1 up	      3817 .005051277
eur_usd 	 1		 6

6 rows selected.

Elapsed: 00:00:00.08
02:02:52 SQL> 
02:02:52 SQL> 
02:02:52 SQL> -- Derive NTILE based params:
02:02:52 SQL> 
02:02:52 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.93
02:02:53 SQL> CREATE TABLE svm6162 COMPRESS AS
02:02:53   2  SELECT
02:02:53   3  pair
02:02:53   4  ,ydate
02:02:53   5  ,prdate
02:02:53   6  ,clse
02:02:53   7  ,g6
02:02:53   8  ,gatt
02:02:53   9  ,gattn
02:02:53  10  ,trend
02:02:53  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
02:02:53  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
02:02:53  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
02:02:53  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
02:02:53  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
02:02:53  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
02:02:53  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
02:02:53  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
02:02:53  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
02:02:53  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
02:02:53  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
02:02:53  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
02:02:53  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
02:02:53  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
02:02:53  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
02:02:53  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
02:02:53  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
02:02:53  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
02:02:53  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
02:02:53  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
02:02:53  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
02:02:53  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
02:02:53  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
02:02:53  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
02:02:53  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
02:02:53  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
02:02:53  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
02:02:53  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
02:02:53  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
02:02:53  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
02:02:53  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
02:02:53  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
02:02:53  43  ,hh  att32
02:02:53  44  ,d   att33
02:02:53  45  ,w   att34
02:02:53  46  ,mpm att35
02:02:53  47  ,mph att36
02:02:53  48  ,trend att37
02:02:53  49  FROM svm6142
02:02:53  50  ORDER BY ydate
02:02:53  51  /

Table created.

Elapsed: 00:00:04.74
02:02:58 SQL> 
02:02:58 SQL> -- rpt
02:02:58 SQL> 
02:02:58 SQL> SELECT
02:02:58   2  pair
02:02:58   3  ,trend
02:02:58   4  ,gatt
02:02:58   5  ,COUNT(pair)
02:02:58   6  ,AVG(g6)
02:02:58   7  FROM svm6162
02:02:58   8  GROUP BY pair,trend,gatt
02:02:58   9  ORDER BY pair,trend,gatt
02:02:58  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      5945 -.00312933
eur_usd 	-1 up	      3576 .004484406
eur_usd 	-1		66
eur_usd 	 1 nup	      5849 -.00316555
eur_usd 	 1 up	      3817 .005051277
eur_usd 	 1		 6

6 rows selected.

Elapsed: 00:00:00.03
02:02:58 SQL> 
02:02:58 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.26
02:02:58 SQL> CREATE TABLE modsrc COMPRESS AS
02:02:58   2  SELECT
02:02:58   3  pair
02:02:58   4  ,ydate
02:02:58   5  ,prdate
02:02:58   6  ,trend
02:02:58   7  ,g6
02:02:58   8  ,gatt
02:02:58   9  ,gattn
02:02:58  10  FROM svm6162
02:02:58  11  /

Table created.

Elapsed: 00:00:00.08
02:02:58 SQL> 
02:02:58 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.27
02:02:59 SQL> 
02:02:59 SQL> DROP   TABLE eur_ms610 ;

Table dropped.

Elapsed: 00:00:00.07
02:02:59 SQL> CREATE TABLE eur_ms610 COMPRESS AS
02:02:59   2  SELECT
02:02:59   3  ydate
02:02:59   4  ,trend eur_trend
02:02:59   5  ,g6    eur_g6
02:02:59   6  ,gatt  eur_gatt
02:02:59   7  ,gattn eur_gattn
02:02:59   8  FROM modsrc
02:02:59   9  /

Table created.

Elapsed: 00:00:00.07
02:02:59 SQL> 
02:02:59 SQL> ANALYZE TABLE eur_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
02:02:59 SQL> 
02:02:59 SQL> -- I need a copy of the attributes:
02:02:59 SQL> 
02:02:59 SQL> 
02:02:59 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.08
02:02:59 SQL> CREATE TABLE eur_att COMPRESS AS
02:02:59   2  SELECT
02:02:59   3  ydate
02:02:59   4  ,att00 eur_att00
02:02:59   5  ,att01 eur_att01
02:02:59   6  ,att02 eur_att02
02:02:59   7  ,att03 eur_att03
02:02:59   8  ,att04 eur_att04
02:02:59   9  ,att05 eur_att05
02:02:59  10  ,att06 eur_att06
02:02:59  11  ,att07 eur_att07
02:02:59  12  ,att08 eur_att08
02:02:59  13  ,att09 eur_att09
02:02:59  14  ,att10 eur_att10
02:02:59  15  ,att11 eur_att11
02:02:59  16  ,att12 eur_att12
02:02:59  17  ,att13 eur_att13
02:02:59  18  ,att14 eur_att14
02:02:59  19  ,att15 eur_att15
02:02:59  20  ,att16 eur_att16
02:02:59  21  ,att17 eur_att17
02:02:59  22  ,att18 eur_att18
02:02:59  23  ,att19 eur_att19
02:02:59  24  ,att20 eur_att20
02:02:59  25  ,att21 eur_att21
02:02:59  26  ,att22 eur_att22
02:02:59  27  ,att23 eur_att23
02:02:59  28  ,att24 eur_att24
02:02:59  29  ,att25 eur_att25
02:02:59  30  ,att26 eur_att26
02:02:59  31  ,att27 eur_att27
02:02:59  32  ,att28 eur_att28
02:02:59  33  ,att29 eur_att29
02:02:59  34  ,att30 eur_att30
02:02:59  35  ,att31 eur_att31
02:02:59  36  ,att32 eur_att32
02:02:59  37  ,att33 eur_att33
02:02:59  38  ,att34 eur_att34
02:02:59  39  ,att35 eur_att35
02:02:59  40  ,att36 eur_att36
02:02:59  41  ,att37 eur_att37
02:02:59  42  FROM svm6162
02:02:59  43  /

Table created.

Elapsed: 00:00:00.18
02:02:59 SQL> 
02:02:59 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.43
02:03:00 SQL> 
02:03:00 SQL> -- rpt
02:03:00 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19259

Elapsed: 00:00:00.87
02:03:01 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     19259

Elapsed: 00:00:00.00
02:03:01 SQL> 
02:03:01 SQL> --
02:03:01 SQL> -- aud610.sql
02:03:01 SQL> --
02:03:01 SQL> 
02:03:01 SQL> -- Creates views and tables for backtesting a forex SVM strategy
02:03:01 SQL> 
02:03:01 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.44
02:03:01 SQL> 
02:03:01 SQL> -- I created di5min here:
02:03:01 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
02:03:01 SQL> 
02:03:01 SQL> CREATE OR REPLACE VIEW svm6102 AS
02:03:01   2  SELECT
02:03:01   3  pair
02:03:01   4  ,ydate
02:03:01   5  ,prdate
02:03:01   6  ,rownum rnum -- acts as t in my time-series
02:03:01   7  ,clse
02:03:01   8  -- Derive a bunch of attributes from clse, the latest price:
02:03:01   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
02:03:01  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
02:03:01  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
02:03:01  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
02:03:01  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
02:03:01  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
02:03:01  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
02:03:01  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
02:03:01  17  --
02:03:01  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
02:03:01  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
02:03:01  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
02:03:01  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
02:03:01  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
02:03:01  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
02:03:01  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
02:03:01  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
02:03:01  26  --
02:03:01  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
02:03:01  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
02:03:01  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
02:03:01  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
02:03:01  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
02:03:01  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
02:03:01  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
02:03:01  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
02:03:01  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
02:03:01  36  FROM di5min WHERE pair LIKE'%aud%'
02:03:01  37  AND ydate > sysdate - 95
02:03:01  38  ORDER BY ydate
02:03:01  39  /

View created.

Elapsed: 00:00:00.06
02:03:01 SQL> 
02:03:01 SQL> -- rpt
02:03:01 SQL> 
02:03:01 SQL> SELECT
02:03:01   2  pair
02:03:01   3  ,COUNT(pair)
02:03:01   4  ,MIN(clse),MAX(clse)
02:03:01   5  ,MIN(avg6),MAX(avg6)
02:03:01   6  ,MIN(ydate),MAX(ydate)
02:03:01   7  FROM svm6102
02:03:01   8  GROUP BY pair
02:03:01   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
aud_usd       19256	.95405	  1.02495 .957141438 1.02284247 2010-09-30 02:05:01 2011-01-03 01:55:00

Elapsed: 00:00:00.86
02:03:02 SQL> 
02:03:02 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
02:03:02 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.18
02:03:02 SQL> CREATE TABLE svm6122 COMPRESS AS
02:03:02   2  SELECT
02:03:02   3  pair
02:03:02   4  ,ydate
02:03:02   5  ,prdate
02:03:02   6  ,clse
02:03:02   7  -- g6 is important. I want to predict g6:
02:03:02   8  ,ld6 - clse g6
02:03:02   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
02:03:02  10  -- I want more attributes from the ones I derived above:
02:03:02  11  -- clse relation to moving-min
02:03:02  12  ,clse-min4  cm4
02:03:02  13  ,clse-min6  cm6
02:03:02  14  ,clse-min8  cm8
02:03:02  15  ,clse-min10 cm10
02:03:02  16  ,clse-min12 cm12
02:03:02  17  ,clse-min14 cm14
02:03:02  18  ,clse-min16 cm16
02:03:02  19  ,clse-min18 cm18
02:03:02  20  -- clse relation to moving-avg
02:03:02  21  ,clse-avg4  ca4
02:03:02  22  ,clse-avg6  ca6
02:03:02  23  ,clse-avg8  ca8
02:03:02  24  ,clse-avg10 ca10
02:03:02  25  ,clse-avg12 ca12
02:03:02  26  ,clse-avg14 ca14
02:03:02  27  ,clse-avg16 ca16
02:03:02  28  ,clse-avg18 ca18
02:03:02  29  -- clse relation to moving-max
02:03:02  30  ,clse-max4  cx4
02:03:02  31  ,clse-max6  cx6
02:03:02  32  ,clse-max8  cx8
02:03:02  33  ,clse-max10 cx10
02:03:02  34  ,clse-max12 cx12
02:03:02  35  ,clse-max14 cx14
02:03:02  36  ,clse-max16 cx16
02:03:02  37  ,clse-max18 cx18
02:03:02  38  -- Derive more attributes.
02:03:02  39  -- I want to use CORR() here to help SVM see the shape of the series.
02:03:02  40  -- But COVAR_POP is more stable:
02:03:02  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
02:03:02  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
02:03:02  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
02:03:02  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
02:03:02  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
02:03:02  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
02:03:02  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
02:03:02  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
02:03:02  49  -- Derive date related attributes:
02:03:02  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
02:03:02  51  ,0+TO_CHAR(ydate,'D')d
02:03:02  52  ,0+TO_CHAR(ydate,'W')w
02:03:02  53  -- mpm stands for minutes-past-midnight:
02:03:02  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
02:03:02  55  -- mph stands for minutes-past-hour:
02:03:02  56  ,0+TO_CHAR(ydate,'MI')mph
02:03:02  57  FROM svm6102
02:03:02  58  ORDER BY ydate
02:03:02  59  /

Table created.

Elapsed: 00:00:02.03
02:03:04 SQL> 
02:03:04 SQL> -- rpt
02:03:04 SQL> 
02:03:04 SQL> SELECT
02:03:04   2  pair
02:03:04   3  ,COUNT(pair)
02:03:04   4  ,MIN(clse),MAX(clse)
02:03:04   5  ,MIN(ydate),MAX(ydate)
02:03:04   6  FROM svm6122
02:03:04   7  GROUP BY pair
02:03:04   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
aud_usd       19256	.95405	  1.02495 2010-09-30 02:05:01 2011-01-03 01:55:00

Elapsed: 00:00:00.10
02:03:04 SQL> 
02:03:04 SQL> -- Prepare for derivation of NTILE based params:
02:03:04 SQL> 
02:03:04 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.29
02:03:05 SQL> CREATE TABLE svm6142 COMPRESS AS
02:03:05   2  SELECT
02:03:05   3  pair
02:03:05   4  ,ydate
02:03:05   5  ,prdate
02:03:05   6  ,clse
02:03:05   7  ,g6
02:03:05   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
02:03:05   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
02:03:05  10  ,CASE WHEN trend IS NULL THEN 1
02:03:05  11  	    WHEN trend =0      THEN 1
02:03:05  12  	    ELSE trend END trend
02:03:05  13  ,cm4
02:03:05  14  ,cm6
02:03:05  15  ,cm8
02:03:05  16  ,cm10
02:03:05  17  ,cm12
02:03:05  18  ,cm14
02:03:05  19  ,cm16
02:03:05  20  ,cm18
02:03:05  21  --
02:03:05  22  ,ca4
02:03:05  23  ,ca6
02:03:05  24  ,ca8
02:03:05  25  ,ca10
02:03:05  26  ,ca12
02:03:05  27  ,ca14
02:03:05  28  ,ca16
02:03:05  29  ,ca18
02:03:05  30  --
02:03:05  31  ,cx4
02:03:05  32  ,cx6
02:03:05  33  ,cx8
02:03:05  34  ,cx10
02:03:05  35  ,cx12
02:03:05  36  ,cx14
02:03:05  37  ,cx16
02:03:05  38  ,cx18
02:03:05  39  --
02:03:05  40  ,crr4
02:03:05  41  ,crr6
02:03:05  42  ,crr8
02:03:05  43  ,crr10
02:03:05  44  ,crr12
02:03:05  45  ,crr14
02:03:05  46  ,crr16
02:03:05  47  ,crr18
02:03:05  48  --
02:03:05  49  ,hh
02:03:05  50  ,d
02:03:05  51  ,w
02:03:05  52  ,mpm
02:03:05  53  ,mph
02:03:05  54  FROM svm6122
02:03:05  55  ORDER BY ydate
02:03:05  56  /

Table created.

Elapsed: 00:00:00.35
02:03:05 SQL> 
02:03:05 SQL> -- rpt
02:03:05 SQL> 
02:03:05 SQL> SELECT
02:03:05   2  pair
02:03:05   3  ,trend
02:03:05   4  ,gatt
02:03:05   5  ,COUNT(pair)
02:03:05   6  ,AVG(g6)
02:03:05   7  FROM svm6142
02:03:05   8  GROUP BY pair,trend,gatt
02:03:05   9  ORDER BY pair,trend,gatt
02:03:05  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5036 -.00217569
aud_usd 	-1 up	      3763 .003739041
aud_usd 	-1		45
aud_usd 	 1 nup	      6693 -.00210954
aud_usd 	 1 up	      3692 .004036288
aud_usd 	 1		27

6 rows selected.

Elapsed: 00:00:00.14
02:03:05 SQL> 
02:03:05 SQL> 
02:03:05 SQL> -- Derive NTILE based params:
02:03:05 SQL> 
02:03:05 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.19
02:03:05 SQL> CREATE TABLE svm6162 COMPRESS AS
02:03:05   2  SELECT
02:03:05   3  pair
02:03:05   4  ,ydate
02:03:05   5  ,prdate
02:03:05   6  ,clse
02:03:05   7  ,g6
02:03:05   8  ,gatt
02:03:05   9  ,gattn
02:03:05  10  ,trend
02:03:05  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
02:03:05  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
02:03:05  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
02:03:05  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
02:03:05  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
02:03:05  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
02:03:05  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
02:03:05  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
02:03:05  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
02:03:05  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
02:03:05  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
02:03:05  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
02:03:05  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
02:03:05  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
02:03:05  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
02:03:05  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
02:03:05  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
02:03:05  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
02:03:05  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
02:03:05  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
02:03:05  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
02:03:05  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
02:03:05  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
02:03:05  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
02:03:05  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
02:03:05  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
02:03:05  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
02:03:05  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
02:03:05  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
02:03:05  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
02:03:05  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
02:03:05  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
02:03:05  43  ,hh  att32
02:03:05  44  ,d   att33
02:03:05  45  ,w   att34
02:03:05  46  ,mpm att35
02:03:05  47  ,mph att36
02:03:05  48  ,trend att37
02:03:05  49  FROM svm6142
02:03:05  50  ORDER BY ydate
02:03:05  51  /

Table created.

Elapsed: 00:00:05.06
02:03:10 SQL> 
02:03:10 SQL> -- rpt
02:03:10 SQL> 
02:03:10 SQL> SELECT
02:03:10   2  pair
02:03:10   3  ,trend
02:03:10   4  ,gatt
02:03:10   5  ,COUNT(pair)
02:03:10   6  ,AVG(g6)
02:03:10   7  FROM svm6162
02:03:10   8  GROUP BY pair,trend,gatt
02:03:10   9  ORDER BY pair,trend,gatt
02:03:10  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5036 -.00217569
aud_usd 	-1 up	      3763 .003739041
aud_usd 	-1		45
aud_usd 	 1 nup	      6693 -.00210954
aud_usd 	 1 up	      3692 .004036288
aud_usd 	 1		27

6 rows selected.

Elapsed: 00:00:00.08
02:03:10 SQL> 
02:03:10 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.19
02:03:11 SQL> CREATE TABLE modsrc COMPRESS AS
02:03:11   2  SELECT
02:03:11   3  pair
02:03:11   4  ,ydate
02:03:11   5  ,prdate
02:03:11   6  ,trend
02:03:11   7  ,g6
02:03:11   8  ,gatt
02:03:11   9  ,gattn
02:03:11  10  FROM svm6162
02:03:11  11  /

Table created.

Elapsed: 00:00:00.08
02:03:11 SQL> 
02:03:11 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.27
02:03:11 SQL> 
02:03:11 SQL> DROP   TABLE aud_ms610 ;

Table dropped.

Elapsed: 00:00:00.06
02:03:11 SQL> CREATE TABLE aud_ms610 COMPRESS AS
02:03:11   2  SELECT
02:03:11   3  ydate
02:03:11   4  ,trend aud_trend
02:03:11   5  ,g6    aud_g6
02:03:11   6  ,gatt  aud_gatt
02:03:11   7  ,gattn aud_gattn
02:03:11   8  FROM modsrc
02:03:11   9  /

Table created.

Elapsed: 00:00:00.06
02:03:11 SQL> 
02:03:11 SQL> ANALYZE TABLE aud_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
02:03:11 SQL> 
02:03:11 SQL> -- I need a copy of the attributes:
02:03:11 SQL> 
02:03:11 SQL> 
02:03:11 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.03
02:03:11 SQL> CREATE TABLE aud_att COMPRESS AS
02:03:11   2  SELECT
02:03:11   3  ydate
02:03:11   4  ,att00 aud_att00
02:03:11   5  ,att01 aud_att01
02:03:11   6  ,att02 aud_att02
02:03:11   7  ,att03 aud_att03
02:03:11   8  ,att04 aud_att04
02:03:11   9  ,att05 aud_att05
02:03:11  10  ,att06 aud_att06
02:03:11  11  ,att07 aud_att07
02:03:11  12  ,att08 aud_att08
02:03:11  13  ,att09 aud_att09
02:03:11  14  ,att10 aud_att10
02:03:11  15  ,att11 aud_att11
02:03:11  16  ,att12 aud_att12
02:03:11  17  ,att13 aud_att13
02:03:11  18  ,att14 aud_att14
02:03:11  19  ,att15 aud_att15
02:03:11  20  ,att16 aud_att16
02:03:11  21  ,att17 aud_att17
02:03:11  22  ,att18 aud_att18
02:03:11  23  ,att19 aud_att19
02:03:11  24  ,att20 aud_att20
02:03:11  25  ,att21 aud_att21
02:03:11  26  ,att22 aud_att22
02:03:11  27  ,att23 aud_att23
02:03:11  28  ,att24 aud_att24
02:03:11  29  ,att25 aud_att25
02:03:11  30  ,att26 aud_att26
02:03:11  31  ,att27 aud_att27
02:03:11  32  ,att28 aud_att28
02:03:11  33  ,att29 aud_att29
02:03:11  34  ,att30 aud_att30
02:03:11  35  ,att31 aud_att31
02:03:11  36  ,att32 aud_att32
02:03:11  37  ,att33 aud_att33
02:03:11  38  ,att34 aud_att34
02:03:11  39  ,att35 aud_att35
02:03:11  40  ,att36 aud_att36
02:03:11  41  ,att37 aud_att37
02:03:11  42  FROM svm6162
02:03:11  43  /

Table created.

Elapsed: 00:00:00.17
02:03:11 SQL> 
02:03:11 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
02:03:12 SQL> 
02:03:12 SQL> -- rpt
02:03:12 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19256

Elapsed: 00:00:00.86
02:03:13 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     19256

Elapsed: 00:00:00.01
02:03:13 SQL> 
02:03:13 SQL> --
02:03:13 SQL> -- gbp610.sql
02:03:13 SQL> --
02:03:13 SQL> 
02:03:13 SQL> -- Creates views and tables for backtesting a forex SVM strategy
02:03:13 SQL> 
02:03:13 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.37
02:03:13 SQL> 
02:03:13 SQL> -- I created di5min here:
02:03:13 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
02:03:13 SQL> 
02:03:13 SQL> CREATE OR REPLACE VIEW svm6102 AS
02:03:13   2  SELECT
02:03:13   3  pair
02:03:13   4  ,ydate
02:03:13   5  ,prdate
02:03:13   6  ,rownum rnum -- acts as t in my time-series
02:03:13   7  ,clse
02:03:13   8  -- Derive a bunch of attributes from clse, the latest price:
02:03:13   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
02:03:13  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
02:03:13  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
02:03:13  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
02:03:13  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
02:03:13  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
02:03:13  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
02:03:13  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
02:03:13  17  --
02:03:13  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
02:03:13  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
02:03:13  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
02:03:13  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
02:03:13  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
02:03:13  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
02:03:13  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
02:03:13  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
02:03:13  26  --
02:03:13  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
02:03:13  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
02:03:13  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
02:03:13  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
02:03:13  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
02:03:13  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
02:03:13  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
02:03:13  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
02:03:13  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
02:03:13  36  FROM di5min WHERE pair LIKE'%gbp%'
02:03:13  37  AND ydate > sysdate - 95
02:03:13  38  ORDER BY ydate
02:03:13  39  /

View created.

Elapsed: 00:00:00.04
02:03:13 SQL> 
02:03:13 SQL> -- rpt
02:03:13 SQL> 
02:03:13 SQL> SELECT
02:03:13   2  pair
02:03:13   3  ,COUNT(pair)
02:03:13   4  ,MIN(clse),MAX(clse)
02:03:13   5  ,MIN(avg6),MAX(avg6)
02:03:13   6  ,MIN(ydate),MAX(ydate)
02:03:13   7  FROM svm6102
02:03:13   8  GROUP BY pair
02:03:13   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
gbp_usd       19258   1.535325	   1.6295 1.53696747 1.62716986 2010-09-30 02:05:01 2011-01-03 01:55:00

Elapsed: 00:00:00.88
02:03:14 SQL> 
02:03:14 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
02:03:14 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.20
02:03:14 SQL> CREATE TABLE svm6122 COMPRESS AS
02:03:14   2  SELECT
02:03:14   3  pair
02:03:14   4  ,ydate
02:03:14   5  ,prdate
02:03:14   6  ,clse
02:03:14   7  -- g6 is important. I want to predict g6:
02:03:14   8  ,ld6 - clse g6
02:03:14   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
02:03:14  10  -- I want more attributes from the ones I derived above:
02:03:14  11  -- clse relation to moving-min
02:03:14  12  ,clse-min4  cm4
02:03:14  13  ,clse-min6  cm6
02:03:14  14  ,clse-min8  cm8
02:03:14  15  ,clse-min10 cm10
02:03:14  16  ,clse-min12 cm12
02:03:14  17  ,clse-min14 cm14
02:03:14  18  ,clse-min16 cm16
02:03:14  19  ,clse-min18 cm18
02:03:14  20  -- clse relation to moving-avg
02:03:14  21  ,clse-avg4  ca4
02:03:14  22  ,clse-avg6  ca6
02:03:14  23  ,clse-avg8  ca8
02:03:14  24  ,clse-avg10 ca10
02:03:14  25  ,clse-avg12 ca12
02:03:14  26  ,clse-avg14 ca14
02:03:14  27  ,clse-avg16 ca16
02:03:14  28  ,clse-avg18 ca18
02:03:14  29  -- clse relation to moving-max
02:03:14  30  ,clse-max4  cx4
02:03:14  31  ,clse-max6  cx6
02:03:14  32  ,clse-max8  cx8
02:03:14  33  ,clse-max10 cx10
02:03:14  34  ,clse-max12 cx12
02:03:14  35  ,clse-max14 cx14
02:03:14  36  ,clse-max16 cx16
02:03:14  37  ,clse-max18 cx18
02:03:14  38  -- Derive more attributes.
02:03:14  39  -- I want to use CORR() here to help SVM see the shape of the series.
02:03:14  40  -- But COVAR_POP is more stable:
02:03:14  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
02:03:14  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
02:03:14  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
02:03:14  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
02:03:14  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
02:03:14  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
02:03:14  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
02:03:14  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
02:03:14  49  -- Derive date related attributes:
02:03:14  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
02:03:14  51  ,0+TO_CHAR(ydate,'D')d
02:03:14  52  ,0+TO_CHAR(ydate,'W')w
02:03:14  53  -- mpm stands for minutes-past-midnight:
02:03:14  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
02:03:14  55  -- mph stands for minutes-past-hour:
02:03:14  56  ,0+TO_CHAR(ydate,'MI')mph
02:03:14  57  FROM svm6102
02:03:14  58  ORDER BY ydate
02:03:14  59  /

Table created.

Elapsed: 00:00:02.05
02:03:16 SQL> 
02:03:16 SQL> -- rpt
02:03:16 SQL> 
02:03:16 SQL> SELECT
02:03:16   2  pair
02:03:16   3  ,COUNT(pair)
02:03:16   4  ,MIN(clse),MAX(clse)
02:03:16   5  ,MIN(ydate),MAX(ydate)
02:03:16   6  FROM svm6122
02:03:16   7  GROUP BY pair
02:03:16   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
gbp_usd       19258   1.535325	   1.6295 2010-09-30 02:05:01 2011-01-03 01:55:00

Elapsed: 00:00:00.05
02:03:16 SQL> 
02:03:16 SQL> -- Prepare for derivation of NTILE based params:
02:03:16 SQL> 
02:03:16 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.22
02:03:17 SQL> CREATE TABLE svm6142 COMPRESS AS
02:03:17   2  SELECT
02:03:17   3  pair
02:03:17   4  ,ydate
02:03:17   5  ,prdate
02:03:17   6  ,clse
02:03:17   7  ,g6
02:03:17   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
02:03:17   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
02:03:17  10  ,CASE WHEN trend IS NULL THEN 1
02:03:17  11  	    WHEN trend =0      THEN 1
02:03:17  12  	    ELSE trend END trend
02:03:17  13  ,cm4
02:03:17  14  ,cm6
02:03:17  15  ,cm8
02:03:17  16  ,cm10
02:03:17  17  ,cm12
02:03:17  18  ,cm14
02:03:17  19  ,cm16
02:03:17  20  ,cm18
02:03:17  21  --
02:03:17  22  ,ca4
02:03:17  23  ,ca6
02:03:17  24  ,ca8
02:03:17  25  ,ca10
02:03:17  26  ,ca12
02:03:17  27  ,ca14
02:03:17  28  ,ca16
02:03:17  29  ,ca18
02:03:17  30  --
02:03:17  31  ,cx4
02:03:17  32  ,cx6
02:03:17  33  ,cx8
02:03:17  34  ,cx10
02:03:17  35  ,cx12
02:03:17  36  ,cx14
02:03:17  37  ,cx16
02:03:17  38  ,cx18
02:03:17  39  --
02:03:17  40  ,crr4
02:03:17  41  ,crr6
02:03:17  42  ,crr8
02:03:17  43  ,crr10
02:03:17  44  ,crr12
02:03:17  45  ,crr14
02:03:17  46  ,crr16
02:03:17  47  ,crr18
02:03:17  48  --
02:03:17  49  ,hh
02:03:17  50  ,d
02:03:17  51  ,w
02:03:17  52  ,mpm
02:03:17  53  ,mph
02:03:17  54  FROM svm6122
02:03:17  55  ORDER BY ydate
02:03:17  56  /

Table created.

Elapsed: 00:00:00.36
02:03:17 SQL> 
02:03:17 SQL> -- rpt
02:03:17 SQL> 
02:03:17 SQL> SELECT
02:03:17   2  pair
02:03:17   3  ,trend
02:03:17   4  ,gatt
02:03:17   5  ,COUNT(pair)
02:03:17   6  ,AVG(g6)
02:03:17   7  FROM svm6142
02:03:17   8  GROUP BY pair,trend,gatt
02:03:17   9  ORDER BY pair,trend,gatt
02:03:17  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6119 -.00268492
gbp_usd 	-1 up	      3473 .004328167
gbp_usd 	-1		50
gbp_usd 	 1 nup	      6075 -.00269864
gbp_usd 	 1 up	      3519 .004516972
gbp_usd 	 1		22

6 rows selected.

Elapsed: 00:00:00.06
02:03:17 SQL> 
02:03:17 SQL> 
02:03:17 SQL> -- Derive NTILE based params:
02:03:17 SQL> 
02:03:17 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.19
02:03:17 SQL> CREATE TABLE svm6162 COMPRESS AS
02:03:17   2  SELECT
02:03:17   3  pair
02:03:17   4  ,ydate
02:03:17   5  ,prdate
02:03:17   6  ,clse
02:03:17   7  ,g6
02:03:17   8  ,gatt
02:03:17   9  ,gattn
02:03:17  10  ,trend
02:03:17  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
02:03:17  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
02:03:17  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
02:03:17  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
02:03:17  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
02:03:17  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
02:03:17  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
02:03:17  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
02:03:17  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
02:03:17  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
02:03:17  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
02:03:17  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
02:03:17  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
02:03:17  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
02:03:17  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
02:03:17  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
02:03:17  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
02:03:17  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
02:03:17  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
02:03:17  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
02:03:17  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
02:03:17  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
02:03:17  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
02:03:17  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
02:03:17  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
02:03:17  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
02:03:17  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
02:03:17  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
02:03:17  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
02:03:17  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
02:03:17  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
02:03:17  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
02:03:17  43  ,hh  att32
02:03:17  44  ,d   att33
02:03:17  45  ,w   att34
02:03:17  46  ,mpm att35
02:03:17  47  ,mph att36
02:03:17  48  ,trend att37
02:03:17  49  FROM svm6142
02:03:17  50  ORDER BY ydate
02:03:17  51  /

Table created.

Elapsed: 00:00:04.84
02:03:22 SQL> 
02:03:22 SQL> -- rpt
02:03:22 SQL> 
02:03:22 SQL> SELECT
02:03:22   2  pair
02:03:22   3  ,trend
02:03:22   4  ,gatt
02:03:22   5  ,COUNT(pair)
02:03:22   6  ,AVG(g6)
02:03:22   7  FROM svm6162
02:03:22   8  GROUP BY pair,trend,gatt
02:03:22   9  ORDER BY pair,trend,gatt
02:03:22  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6119 -.00268492
gbp_usd 	-1 up	      3473 .004328167
gbp_usd 	-1		50
gbp_usd 	 1 nup	      6075 -.00269864
gbp_usd 	 1 up	      3519 .004516972
gbp_usd 	 1		22

6 rows selected.

Elapsed: 00:00:00.05
02:03:22 SQL> 
02:03:22 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
02:03:22 SQL> CREATE TABLE modsrc COMPRESS AS
02:03:22   2  SELECT
02:03:22   3  pair
02:03:22   4  ,ydate
02:03:22   5  ,prdate
02:03:22   6  ,trend
02:03:22   7  ,g6
02:03:22   8  ,gatt
02:03:22   9  ,gattn
02:03:22  10  FROM svm6162
02:03:22  11  /

Table created.

Elapsed: 00:00:00.09
02:03:22 SQL> 
02:03:22 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.23
02:03:23 SQL> 
02:03:23 SQL> DROP   TABLE gbp_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
02:03:23 SQL> CREATE TABLE gbp_ms610 COMPRESS AS
02:03:23   2  SELECT
02:03:23   3  ydate
02:03:23   4  ,trend gbp_trend
02:03:23   5  ,g6    gbp_g6
02:03:23   6  ,gatt  gbp_gatt
02:03:23   7  ,gattn gbp_gattn
02:03:23   8  FROM modsrc
02:03:23   9  /

Table created.

Elapsed: 00:00:00.07
02:03:23 SQL> 
02:03:23 SQL> ANALYZE TABLE gbp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.14
02:03:23 SQL> 
02:03:23 SQL> -- I need a copy of the attributes:
02:03:23 SQL> 
02:03:23 SQL> 
02:03:23 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.04
02:03:23 SQL> CREATE TABLE gbp_att COMPRESS AS
02:03:23   2  SELECT
02:03:23   3  ydate
02:03:23   4  ,att00 gbp_att00
02:03:23   5  ,att01 gbp_att01
02:03:23   6  ,att02 gbp_att02
02:03:23   7  ,att03 gbp_att03
02:03:23   8  ,att04 gbp_att04
02:03:23   9  ,att05 gbp_att05
02:03:23  10  ,att06 gbp_att06
02:03:23  11  ,att07 gbp_att07
02:03:23  12  ,att08 gbp_att08
02:03:23  13  ,att09 gbp_att09
02:03:23  14  ,att10 gbp_att10
02:03:23  15  ,att11 gbp_att11
02:03:23  16  ,att12 gbp_att12
02:03:23  17  ,att13 gbp_att13
02:03:23  18  ,att14 gbp_att14
02:03:23  19  ,att15 gbp_att15
02:03:23  20  ,att16 gbp_att16
02:03:23  21  ,att17 gbp_att17
02:03:23  22  ,att18 gbp_att18
02:03:23  23  ,att19 gbp_att19
02:03:23  24  ,att20 gbp_att20
02:03:23  25  ,att21 gbp_att21
02:03:23  26  ,att22 gbp_att22
02:03:23  27  ,att23 gbp_att23
02:03:23  28  ,att24 gbp_att24
02:03:23  29  ,att25 gbp_att25
02:03:23  30  ,att26 gbp_att26
02:03:23  31  ,att27 gbp_att27
02:03:23  32  ,att28 gbp_att28
02:03:23  33  ,att29 gbp_att29
02:03:23  34  ,att30 gbp_att30
02:03:23  35  ,att31 gbp_att31
02:03:23  36  ,att32 gbp_att32
02:03:23  37  ,att33 gbp_att33
02:03:23  38  ,att34 gbp_att34
02:03:23  39  ,att35 gbp_att35
02:03:23  40  ,att36 gbp_att36
02:03:23  41  ,att37 gbp_att37
02:03:23  42  FROM svm6162
02:03:23  43  /

Table created.

Elapsed: 00:00:00.15
02:03:23 SQL> 
02:03:23 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.42
02:03:23 SQL> 
02:03:23 SQL> -- rpt
02:03:23 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19258

Elapsed: 00:00:00.86
02:03:24 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     19258

Elapsed: 00:00:00.00
02:03:24 SQL> 
02:03:24 SQL> --
02:03:24 SQL> -- jpy610.sql
02:03:24 SQL> --
02:03:24 SQL> 
02:03:24 SQL> -- Creates views and tables for backtesting a forex SVM strategy
02:03:24 SQL> 
02:03:24 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.38
02:03:25 SQL> 
02:03:25 SQL> -- I created di5min here:
02:03:25 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
02:03:25 SQL> 
02:03:25 SQL> CREATE OR REPLACE VIEW svm6102 AS
02:03:25   2  SELECT
02:03:25   3  pair
02:03:25   4  ,ydate
02:03:25   5  ,prdate
02:03:25   6  ,rownum rnum -- acts as t in my time-series
02:03:25   7  ,clse
02:03:25   8  -- Derive a bunch of attributes from clse, the latest price:
02:03:25   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
02:03:25  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
02:03:25  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
02:03:25  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
02:03:25  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
02:03:25  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
02:03:25  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
02:03:25  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
02:03:25  17  --
02:03:25  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
02:03:25  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
02:03:25  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
02:03:25  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
02:03:25  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
02:03:25  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
02:03:25  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
02:03:25  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
02:03:25  26  --
02:03:25  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
02:03:25  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
02:03:25  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
02:03:25  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
02:03:25  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
02:03:25  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
02:03:25  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
02:03:25  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
02:03:25  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
02:03:25  36  FROM di5min WHERE pair LIKE'%jpy%'
02:03:25  37  AND ydate > sysdate - 95
02:03:25  38  ORDER BY ydate
02:03:25  39  /

View created.

Elapsed: 00:00:00.04
02:03:25 SQL> 
02:03:25 SQL> -- rpt
02:03:25 SQL> 
02:03:25 SQL> SELECT
02:03:25   2  pair
02:03:25   3  ,COUNT(pair)
02:03:25   4  ,MIN(clse),MAX(clse)
02:03:25   5  ,MIN(avg6),MAX(avg6)
02:03:25   6  ,MIN(ydate),MAX(ydate)
02:03:25   7  FROM svm6102
02:03:25   8  GROUP BY pair
02:03:25   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_jpy       19256	 80.25	   84.485 80.3595205 84.3105479 2010-09-30 02:05:01 2011-01-03 01:55:00

Elapsed: 00:00:00.91
02:03:26 SQL> 
02:03:26 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
02:03:26 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.32
02:03:26 SQL> CREATE TABLE svm6122 COMPRESS AS
02:03:26   2  SELECT
02:03:26   3  pair
02:03:26   4  ,ydate
02:03:26   5  ,prdate
02:03:26   6  ,clse
02:03:26   7  -- g6 is important. I want to predict g6:
02:03:26   8  ,ld6 - clse g6
02:03:26   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
02:03:26  10  -- I want more attributes from the ones I derived above:
02:03:26  11  -- clse relation to moving-min
02:03:26  12  ,clse-min4  cm4
02:03:26  13  ,clse-min6  cm6
02:03:26  14  ,clse-min8  cm8
02:03:26  15  ,clse-min10 cm10
02:03:26  16  ,clse-min12 cm12
02:03:26  17  ,clse-min14 cm14
02:03:26  18  ,clse-min16 cm16
02:03:26  19  ,clse-min18 cm18
02:03:26  20  -- clse relation to moving-avg
02:03:26  21  ,clse-avg4  ca4
02:03:26  22  ,clse-avg6  ca6
02:03:26  23  ,clse-avg8  ca8
02:03:26  24  ,clse-avg10 ca10
02:03:26  25  ,clse-avg12 ca12
02:03:26  26  ,clse-avg14 ca14
02:03:26  27  ,clse-avg16 ca16
02:03:26  28  ,clse-avg18 ca18
02:03:26  29  -- clse relation to moving-max
02:03:26  30  ,clse-max4  cx4
02:03:26  31  ,clse-max6  cx6
02:03:26  32  ,clse-max8  cx8
02:03:26  33  ,clse-max10 cx10
02:03:26  34  ,clse-max12 cx12
02:03:26  35  ,clse-max14 cx14
02:03:26  36  ,clse-max16 cx16
02:03:26  37  ,clse-max18 cx18
02:03:26  38  -- Derive more attributes.
02:03:26  39  -- I want to use CORR() here to help SVM see the shape of the series.
02:03:26  40  -- But COVAR_POP is more stable:
02:03:26  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
02:03:26  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
02:03:26  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
02:03:26  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
02:03:26  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
02:03:26  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
02:03:26  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
02:03:26  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
02:03:26  49  -- Derive date related attributes:
02:03:26  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
02:03:26  51  ,0+TO_CHAR(ydate,'D')d
02:03:26  52  ,0+TO_CHAR(ydate,'W')w
02:03:26  53  -- mpm stands for minutes-past-midnight:
02:03:26  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
02:03:26  55  -- mph stands for minutes-past-hour:
02:03:26  56  ,0+TO_CHAR(ydate,'MI')mph
02:03:26  57  FROM svm6102
02:03:26  58  ORDER BY ydate
02:03:26  59  /

Table created.

Elapsed: 00:00:02.10
02:03:28 SQL> 
02:03:28 SQL> -- rpt
02:03:28 SQL> 
02:03:28 SQL> SELECT
02:03:28   2  pair
02:03:28   3  ,COUNT(pair)
02:03:28   4  ,MIN(clse),MAX(clse)
02:03:28   5  ,MIN(ydate),MAX(ydate)
02:03:28   6  FROM svm6122
02:03:28   7  GROUP BY pair
02:03:28   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_jpy       19256	 80.25	   84.485 2010-09-30 02:05:01 2011-01-03 01:55:00

Elapsed: 00:00:00.10
02:03:28 SQL> 
02:03:28 SQL> -- Prepare for derivation of NTILE based params:
02:03:28 SQL> 
02:03:28 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.23
02:03:28 SQL> CREATE TABLE svm6142 COMPRESS AS
02:03:28   2  SELECT
02:03:28   3  pair
02:03:28   4  ,ydate
02:03:28   5  ,prdate
02:03:28   6  ,clse
02:03:28   7  ,g6
02:03:28   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
02:03:28   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
02:03:28  10  ,CASE WHEN trend IS NULL THEN 1
02:03:28  11  	    WHEN trend =0      THEN 1
02:03:28  12  	    ELSE trend END trend
02:03:28  13  ,cm4
02:03:28  14  ,cm6
02:03:28  15  ,cm8
02:03:28  16  ,cm10
02:03:28  17  ,cm12
02:03:28  18  ,cm14
02:03:28  19  ,cm16
02:03:28  20  ,cm18
02:03:28  21  --
02:03:28  22  ,ca4
02:03:28  23  ,ca6
02:03:28  24  ,ca8
02:03:28  25  ,ca10
02:03:28  26  ,ca12
02:03:28  27  ,ca14
02:03:28  28  ,ca16
02:03:28  29  ,ca18
02:03:28  30  --
02:03:28  31  ,cx4
02:03:28  32  ,cx6
02:03:28  33  ,cx8
02:03:28  34  ,cx10
02:03:28  35  ,cx12
02:03:28  36  ,cx14
02:03:28  37  ,cx16
02:03:28  38  ,cx18
02:03:28  39  --
02:03:28  40  ,crr4
02:03:28  41  ,crr6
02:03:28  42  ,crr8
02:03:28  43  ,crr10
02:03:28  44  ,crr12
02:03:28  45  ,crr14
02:03:28  46  ,crr16
02:03:28  47  ,crr18
02:03:28  48  --
02:03:28  49  ,hh
02:03:28  50  ,d
02:03:28  51  ,w
02:03:28  52  ,mpm
02:03:28  53  ,mph
02:03:28  54  FROM svm6122
02:03:28  55  ORDER BY ydate
02:03:28  56  /

Table created.

Elapsed: 00:00:00.35
02:03:29 SQL> 
02:03:29 SQL> -- rpt
02:03:29 SQL> 
02:03:29 SQL> SELECT
02:03:29   2  pair
02:03:29   3  ,trend
02:03:29   4  ,gatt
02:03:29   5  ,COUNT(pair)
02:03:29   6  ,AVG(g6)
02:03:29   7  FROM svm6142
02:03:29   8  GROUP BY pair,trend,gatt
02:03:29   9  ORDER BY pair,trend,gatt
02:03:29  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5238 -.16594166
usd_jpy 	-1 up	      4852 .164900397
usd_jpy 	-1		33
usd_jpy 	 1 nup	      4978 -.15613091
usd_jpy 	 1 up	      4116 .166146221
usd_jpy 	 1		39

6 rows selected.

Elapsed: 00:00:00.15
02:03:29 SQL> 
02:03:29 SQL> 
02:03:29 SQL> -- Derive NTILE based params:
02:03:29 SQL> 
02:03:29 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.21
02:03:29 SQL> CREATE TABLE svm6162 COMPRESS AS
02:03:29   2  SELECT
02:03:29   3  pair
02:03:29   4  ,ydate
02:03:29   5  ,prdate
02:03:29   6  ,clse
02:03:29   7  ,g6
02:03:29   8  ,gatt
02:03:29   9  ,gattn
02:03:29  10  ,trend
02:03:29  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
02:03:29  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
02:03:29  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
02:03:29  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
02:03:29  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
02:03:29  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
02:03:29  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
02:03:29  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
02:03:29  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
02:03:29  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
02:03:29  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
02:03:29  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
02:03:29  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
02:03:29  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
02:03:29  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
02:03:29  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
02:03:29  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
02:03:29  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
02:03:29  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
02:03:29  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
02:03:29  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
02:03:29  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
02:03:29  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
02:03:29  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
02:03:29  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
02:03:29  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
02:03:29  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
02:03:29  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
02:03:29  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
02:03:29  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
02:03:29  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
02:03:29  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
02:03:29  43  ,hh  att32
02:03:29  44  ,d   att33
02:03:29  45  ,w   att34
02:03:29  46  ,mpm att35
02:03:29  47  ,mph att36
02:03:29  48  ,trend att37
02:03:29  49  FROM svm6142
02:03:29  50  ORDER BY ydate
02:03:29  51  /

Table created.

Elapsed: 00:00:04.89
02:03:34 SQL> 
02:03:34 SQL> -- rpt
02:03:34 SQL> 
02:03:34 SQL> SELECT
02:03:34   2  pair
02:03:34   3  ,trend
02:03:34   4  ,gatt
02:03:34   5  ,COUNT(pair)
02:03:34   6  ,AVG(g6)
02:03:34   7  FROM svm6162
02:03:34   8  GROUP BY pair,trend,gatt
02:03:34   9  ORDER BY pair,trend,gatt
02:03:34  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5238 -.16594166
usd_jpy 	-1 up	      4852 .164900397
usd_jpy 	-1		33
usd_jpy 	 1 nup	      4978 -.15613091
usd_jpy 	 1 up	      4116 .166146221
usd_jpy 	 1		39

6 rows selected.

Elapsed: 00:00:00.08
02:03:34 SQL> 
02:03:34 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.17
02:03:34 SQL> CREATE TABLE modsrc COMPRESS AS
02:03:34   2  SELECT
02:03:34   3  pair
02:03:34   4  ,ydate
02:03:34   5  ,prdate
02:03:34   6  ,trend
02:03:34   7  ,g6
02:03:34   8  ,gatt
02:03:34   9  ,gattn
02:03:34  10  FROM svm6162
02:03:34  11  /

Table created.

Elapsed: 00:00:00.09
02:03:34 SQL> 
02:03:34 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.28
02:03:35 SQL> 
02:03:35 SQL> DROP   TABLE jpy_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
02:03:35 SQL> CREATE TABLE jpy_ms610 COMPRESS AS
02:03:35   2  SELECT
02:03:35   3  ydate
02:03:35   4  ,trend jpy_trend
02:03:35   5  ,g6    jpy_g6
02:03:35   6  ,gatt  jpy_gatt
02:03:35   7  ,gattn jpy_gattn
02:03:35   8  FROM modsrc
02:03:35   9  /

Table created.

Elapsed: 00:00:00.08
02:03:35 SQL> 
02:03:35 SQL> ANALYZE TABLE jpy_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
02:03:35 SQL> 
02:03:35 SQL> -- I need a copy of the attributes:
02:03:35 SQL> 
02:03:35 SQL> 
02:03:35 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.05
02:03:35 SQL> CREATE TABLE jpy_att COMPRESS AS
02:03:35   2  SELECT
02:03:35   3  ydate
02:03:35   4  ,att00 jpy_att00
02:03:35   5  ,att01 jpy_att01
02:03:35   6  ,att02 jpy_att02
02:03:35   7  ,att03 jpy_att03
02:03:35   8  ,att04 jpy_att04
02:03:35   9  ,att05 jpy_att05
02:03:35  10  ,att06 jpy_att06
02:03:35  11  ,att07 jpy_att07
02:03:35  12  ,att08 jpy_att08
02:03:35  13  ,att09 jpy_att09
02:03:35  14  ,att10 jpy_att10
02:03:35  15  ,att11 jpy_att11
02:03:35  16  ,att12 jpy_att12
02:03:35  17  ,att13 jpy_att13
02:03:35  18  ,att14 jpy_att14
02:03:35  19  ,att15 jpy_att15
02:03:35  20  ,att16 jpy_att16
02:03:35  21  ,att17 jpy_att17
02:03:35  22  ,att18 jpy_att18
02:03:35  23  ,att19 jpy_att19
02:03:35  24  ,att20 jpy_att20
02:03:35  25  ,att21 jpy_att21
02:03:35  26  ,att22 jpy_att22
02:03:35  27  ,att23 jpy_att23
02:03:35  28  ,att24 jpy_att24
02:03:35  29  ,att25 jpy_att25
02:03:35  30  ,att26 jpy_att26
02:03:35  31  ,att27 jpy_att27
02:03:35  32  ,att28 jpy_att28
02:03:35  33  ,att29 jpy_att29
02:03:35  34  ,att30 jpy_att30
02:03:35  35  ,att31 jpy_att31
02:03:35  36  ,att32 jpy_att32
02:03:35  37  ,att33 jpy_att33
02:03:35  38  ,att34 jpy_att34
02:03:35  39  ,att35 jpy_att35
02:03:35  40  ,att36 jpy_att36
02:03:35  41  ,att37 jpy_att37
02:03:35  42  FROM svm6162
02:03:35  43  /

Table created.

Elapsed: 00:00:00.17
02:03:35 SQL> 
02:03:35 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
02:03:36 SQL> 
02:03:36 SQL> -- rpt
02:03:36 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19256

Elapsed: 00:00:00.90
02:03:36 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     19256

Elapsed: 00:00:00.00
02:03:36 SQL> 
02:03:36 SQL> --
02:03:36 SQL> -- cad610.sql
02:03:36 SQL> --
02:03:36 SQL> 
02:03:36 SQL> -- Creates views and tables for backtesting a forex SVM strategy
02:03:36 SQL> 
02:03:36 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.46
02:03:37 SQL> 
02:03:37 SQL> -- I created di5min here:
02:03:37 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
02:03:37 SQL> 
02:03:37 SQL> CREATE OR REPLACE VIEW svm6102 AS
02:03:37   2  SELECT
02:03:37   3  pair
02:03:37   4  ,ydate
02:03:37   5  ,prdate
02:03:37   6  ,rownum rnum -- acts as t in my time-series
02:03:37   7  ,clse
02:03:37   8  -- Derive a bunch of attributes from clse, the latest price:
02:03:37   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
02:03:37  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
02:03:37  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
02:03:37  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
02:03:37  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
02:03:37  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
02:03:37  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
02:03:37  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
02:03:37  17  --
02:03:37  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
02:03:37  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
02:03:37  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
02:03:37  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
02:03:37  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
02:03:37  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
02:03:37  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
02:03:37  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
02:03:37  26  --
02:03:37  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
02:03:37  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
02:03:37  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
02:03:37  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
02:03:37  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
02:03:37  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
02:03:37  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
02:03:37  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
02:03:37  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
02:03:37  36  FROM di5min WHERE pair LIKE'%cad%'
02:03:37  37  AND ydate > sysdate - 95
02:03:37  38  ORDER BY ydate
02:03:37  39  /

View created.

Elapsed: 00:00:00.05
02:03:37 SQL> 
02:03:37 SQL> -- rpt
02:03:37 SQL> 
02:03:37 SQL> SELECT
02:03:37   2  pair
02:03:37   3  ,COUNT(pair)
02:03:37   4  ,MIN(clse),MAX(clse)
02:03:37   5  ,MIN(avg6),MAX(avg6)
02:03:37   6  ,MIN(ydate),MAX(ydate)
02:03:37   7  FROM svm6102
02:03:37   8  GROUP BY pair
02:03:37   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_cad       19256    .992825	   1.0355 .994927568 1.03355288 2010-09-30 02:05:01 2011-01-03 01:55:00

Elapsed: 00:00:00.87
02:03:38 SQL> 
02:03:38 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
02:03:38 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.21
02:03:38 SQL> CREATE TABLE svm6122 COMPRESS AS
02:03:38   2  SELECT
02:03:38   3  pair
02:03:38   4  ,ydate
02:03:38   5  ,prdate
02:03:38   6  ,clse
02:03:38   7  -- g6 is important. I want to predict g6:
02:03:38   8  ,ld6 - clse g6
02:03:38   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
02:03:38  10  -- I want more attributes from the ones I derived above:
02:03:38  11  -- clse relation to moving-min
02:03:38  12  ,clse-min4  cm4
02:03:38  13  ,clse-min6  cm6
02:03:38  14  ,clse-min8  cm8
02:03:38  15  ,clse-min10 cm10
02:03:38  16  ,clse-min12 cm12
02:03:38  17  ,clse-min14 cm14
02:03:38  18  ,clse-min16 cm16
02:03:38  19  ,clse-min18 cm18
02:03:38  20  -- clse relation to moving-avg
02:03:38  21  ,clse-avg4  ca4
02:03:38  22  ,clse-avg6  ca6
02:03:38  23  ,clse-avg8  ca8
02:03:38  24  ,clse-avg10 ca10
02:03:38  25  ,clse-avg12 ca12
02:03:38  26  ,clse-avg14 ca14
02:03:38  27  ,clse-avg16 ca16
02:03:38  28  ,clse-avg18 ca18
02:03:38  29  -- clse relation to moving-max
02:03:38  30  ,clse-max4  cx4
02:03:38  31  ,clse-max6  cx6
02:03:38  32  ,clse-max8  cx8
02:03:38  33  ,clse-max10 cx10
02:03:38  34  ,clse-max12 cx12
02:03:38  35  ,clse-max14 cx14
02:03:38  36  ,clse-max16 cx16
02:03:38  37  ,clse-max18 cx18
02:03:38  38  -- Derive more attributes.
02:03:38  39  -- I want to use CORR() here to help SVM see the shape of the series.
02:03:38  40  -- But COVAR_POP is more stable:
02:03:38  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
02:03:38  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
02:03:38  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
02:03:38  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
02:03:38  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
02:03:38  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
02:03:38  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
02:03:38  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
02:03:38  49  -- Derive date related attributes:
02:03:38  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
02:03:38  51  ,0+TO_CHAR(ydate,'D')d
02:03:38  52  ,0+TO_CHAR(ydate,'W')w
02:03:38  53  -- mpm stands for minutes-past-midnight:
02:03:38  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
02:03:38  55  -- mph stands for minutes-past-hour:
02:03:38  56  ,0+TO_CHAR(ydate,'MI')mph
02:03:38  57  FROM svm6102
02:03:38  58  ORDER BY ydate
02:03:38  59  /

Table created.

Elapsed: 00:00:02.46
02:03:41 SQL> 
02:03:41 SQL> -- rpt
02:03:41 SQL> 
02:03:41 SQL> SELECT
02:03:41   2  pair
02:03:41   3  ,COUNT(pair)
02:03:41   4  ,MIN(clse),MAX(clse)
02:03:41   5  ,MIN(ydate),MAX(ydate)
02:03:41   6  FROM svm6122
02:03:41   7  GROUP BY pair
02:03:41   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_cad       19256    .992825	   1.0355 2010-09-30 02:05:01 2011-01-03 01:55:00

Elapsed: 00:00:00.09
02:03:41 SQL> 
02:03:41 SQL> -- Prepare for derivation of NTILE based params:
02:03:41 SQL> 
02:03:41 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.21
02:03:41 SQL> CREATE TABLE svm6142 COMPRESS AS
02:03:41   2  SELECT
02:03:41   3  pair
02:03:41   4  ,ydate
02:03:41   5  ,prdate
02:03:41   6  ,clse
02:03:41   7  ,g6
02:03:41   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
02:03:41   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
02:03:41  10  ,CASE WHEN trend IS NULL THEN 1
02:03:41  11  	    WHEN trend =0      THEN 1
02:03:41  12  	    ELSE trend END trend
02:03:41  13  ,cm4
02:03:41  14  ,cm6
02:03:41  15  ,cm8
02:03:41  16  ,cm10
02:03:41  17  ,cm12
02:03:41  18  ,cm14
02:03:41  19  ,cm16
02:03:41  20  ,cm18
02:03:41  21  --
02:03:41  22  ,ca4
02:03:41  23  ,ca6
02:03:41  24  ,ca8
02:03:41  25  ,ca10
02:03:41  26  ,ca12
02:03:41  27  ,ca14
02:03:41  28  ,ca16
02:03:41  29  ,ca18
02:03:41  30  --
02:03:41  31  ,cx4
02:03:41  32  ,cx6
02:03:41  33  ,cx8
02:03:41  34  ,cx10
02:03:41  35  ,cx12
02:03:41  36  ,cx14
02:03:41  37  ,cx16
02:03:41  38  ,cx18
02:03:41  39  --
02:03:41  40  ,crr4
02:03:41  41  ,crr6
02:03:41  42  ,crr8
02:03:41  43  ,crr10
02:03:41  44  ,crr12
02:03:41  45  ,crr14
02:03:41  46  ,crr16
02:03:41  47  ,crr18
02:03:41  48  --
02:03:41  49  ,hh
02:03:41  50  ,d
02:03:41  51  ,w
02:03:41  52  ,mpm
02:03:41  53  ,mph
02:03:41  54  FROM svm6122
02:03:41  55  ORDER BY ydate
02:03:41  56  /

Table created.

Elapsed: 00:00:00.36
02:03:41 SQL> 
02:03:41 SQL> -- rpt
02:03:41 SQL> 
02:03:41 SQL> SELECT
02:03:41   2  pair
02:03:41   3  ,trend
02:03:41   4  ,gatt
02:03:41   5  ,COUNT(pair)
02:03:41   6  ,AVG(g6)
02:03:41   7  FROM svm6142
02:03:41   8  GROUP BY pair,trend,gatt
02:03:41   9  ORDER BY pair,trend,gatt
02:03:41  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7303 -.00131913
usd_cad 	-1 up	      3000 .003056492
usd_cad 	-1		58
usd_cad 	 1 nup	      6576 -.00163018
usd_cad 	 1 up	      2305 .003653973
usd_cad 	 1		14

6 rows selected.

Elapsed: 00:00:00.04
02:03:41 SQL> 
02:03:41 SQL> 
02:03:41 SQL> -- Derive NTILE based params:
02:03:41 SQL> 
02:03:41 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.12
02:03:41 SQL> CREATE TABLE svm6162 COMPRESS AS
02:03:41   2  SELECT
02:03:41   3  pair
02:03:41   4  ,ydate
02:03:41   5  ,prdate
02:03:41   6  ,clse
02:03:41   7  ,g6
02:03:41   8  ,gatt
02:03:41   9  ,gattn
02:03:41  10  ,trend
02:03:41  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
02:03:41  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
02:03:41  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
02:03:41  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
02:03:41  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
02:03:41  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
02:03:41  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
02:03:41  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
02:03:41  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
02:03:41  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
02:03:41  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
02:03:41  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
02:03:41  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
02:03:41  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
02:03:41  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
02:03:41  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
02:03:41  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
02:03:41  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
02:03:41  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
02:03:41  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
02:03:41  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
02:03:41  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
02:03:41  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
02:03:41  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
02:03:41  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
02:03:41  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
02:03:41  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
02:03:41  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
02:03:41  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
02:03:41  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
02:03:41  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
02:03:41  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
02:03:41  43  ,hh  att32
02:03:41  44  ,d   att33
02:03:41  45  ,w   att34
02:03:41  46  ,mpm att35
02:03:41  47  ,mph att36
02:03:41  48  ,trend att37
02:03:41  49  FROM svm6142
02:03:41  50  ORDER BY ydate
02:03:41  51  /

Table created.

Elapsed: 00:00:04.84
02:03:46 SQL> 
02:03:46 SQL> -- rpt
02:03:46 SQL> 
02:03:46 SQL> SELECT
02:03:46   2  pair
02:03:46   3  ,trend
02:03:46   4  ,gatt
02:03:46   5  ,COUNT(pair)
02:03:46   6  ,AVG(g6)
02:03:46   7  FROM svm6162
02:03:46   8  GROUP BY pair,trend,gatt
02:03:46   9  ORDER BY pair,trend,gatt
02:03:46  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7303 -.00131913
usd_cad 	-1 up	      3000 .003056492
usd_cad 	-1		58
usd_cad 	 1 nup	      6576 -.00163018
usd_cad 	 1 up	      2305 .003653973
usd_cad 	 1		14

6 rows selected.

Elapsed: 00:00:00.03
02:03:46 SQL> 
02:03:46 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.11
02:03:46 SQL> CREATE TABLE modsrc COMPRESS AS
02:03:46   2  SELECT
02:03:46   3  pair
02:03:46   4  ,ydate
02:03:46   5  ,prdate
02:03:46   6  ,trend
02:03:46   7  ,g6
02:03:46   8  ,gatt
02:03:46   9  ,gattn
02:03:46  10  FROM svm6162
02:03:46  11  /

Table created.

Elapsed: 00:00:00.08
02:03:46 SQL> 
02:03:46 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
02:03:47 SQL> 
02:03:47 SQL> DROP   TABLE cad_ms610 ;

Table dropped.

Elapsed: 00:00:00.03
02:03:47 SQL> CREATE TABLE cad_ms610 COMPRESS AS
02:03:47   2  SELECT
02:03:47   3  ydate
02:03:47   4  ,trend cad_trend
02:03:47   5  ,g6    cad_g6
02:03:47   6  ,gatt  cad_gatt
02:03:47   7  ,gattn cad_gattn
02:03:47   8  FROM modsrc
02:03:47   9  /

Table created.

Elapsed: 00:00:00.08
02:03:47 SQL> 
02:03:47 SQL> ANALYZE TABLE cad_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
02:03:47 SQL> 
02:03:47 SQL> -- I need a copy of the attributes:
02:03:47 SQL> 
02:03:47 SQL> 
02:03:47 SQL> DROP   TABLE cad_att;

Table dropped.

Elapsed: 00:00:00.04
02:03:47 SQL> CREATE TABLE cad_att COMPRESS AS
02:03:47   2  SELECT
02:03:47   3  ydate
02:03:47   4  ,att00 cad_att00
02:03:47   5  ,att01 cad_att01
02:03:47   6  ,att02 cad_att02
02:03:47   7  ,att03 cad_att03
02:03:47   8  ,att04 cad_att04
02:03:47   9  ,att05 cad_att05
02:03:47  10  ,att06 cad_att06
02:03:47  11  ,att07 cad_att07
02:03:47  12  ,att08 cad_att08
02:03:47  13  ,att09 cad_att09
02:03:47  14  ,att10 cad_att10
02:03:47  15  ,att11 cad_att11
02:03:47  16  ,att12 cad_att12
02:03:47  17  ,att13 cad_att13
02:03:47  18  ,att14 cad_att14
02:03:47  19  ,att15 cad_att15
02:03:47  20  ,att16 cad_att16
02:03:47  21  ,att17 cad_att17
02:03:47  22  ,att18 cad_att18
02:03:47  23  ,att19 cad_att19
02:03:47  24  ,att20 cad_att20
02:03:47  25  ,att21 cad_att21
02:03:47  26  ,att22 cad_att22
02:03:47  27  ,att23 cad_att23
02:03:47  28  ,att24 cad_att24
02:03:47  29  ,att25 cad_att25
02:03:47  30  ,att26 cad_att26
02:03:47  31  ,att27 cad_att27
02:03:47  32  ,att28 cad_att28
02:03:47  33  ,att29 cad_att29
02:03:47  34  ,att30 cad_att30
02:03:47  35  ,att31 cad_att31
02:03:47  36  ,att32 cad_att32
02:03:47  37  ,att33 cad_att33
02:03:47  38  ,att34 cad_att34
02:03:47  39  ,att35 cad_att35
02:03:47  40  ,att36 cad_att36
02:03:47  41  ,att37 cad_att37
02:03:47  42  FROM svm6162
02:03:47  43  /

Table created.

Elapsed: 00:00:00.18
02:03:47 SQL> 
02:03:47 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.44
02:03:48 SQL> 
02:03:48 SQL> -- rpt
02:03:48 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19256

Elapsed: 00:00:00.83
02:03:48 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
     19256

Elapsed: 00:00:00.00
02:03:48 SQL> 
02:03:48 SQL> --
02:03:48 SQL> -- chf610.sql
02:03:48 SQL> --
02:03:48 SQL> 
02:03:48 SQL> -- Creates views and tables for backtesting a forex SVM strategy
02:03:48 SQL> 
02:03:48 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.39
02:03:49 SQL> 
02:03:49 SQL> -- I created di5min here:
02:03:49 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
02:03:49 SQL> 
02:03:49 SQL> CREATE OR REPLACE VIEW svm6102 AS
02:03:49   2  SELECT
02:03:49   3  pair
02:03:49   4  ,ydate
02:03:49   5  ,prdate
02:03:49   6  ,rownum rnum -- acts as t in my time-series
02:03:49   7  ,clse
02:03:49   8  -- Derive a bunch of attributes from clse, the latest price:
02:03:49   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
02:03:49  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
02:03:49  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
02:03:49  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
02:03:49  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
02:03:49  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
02:03:49  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
02:03:49  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
02:03:49  17  --
02:03:49  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
02:03:49  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
02:03:49  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
02:03:49  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
02:03:49  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
02:03:49  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
02:03:49  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
02:03:49  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
02:03:49  26  --
02:03:49  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
02:03:49  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
02:03:49  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
02:03:49  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
02:03:49  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
02:03:49  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
02:03:49  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
02:03:49  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
02:03:49  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
02:03:49  36  FROM di5min WHERE pair LIKE'%chf%'
02:03:49  37  AND ydate > sysdate - 95
02:03:49  38  ORDER BY ydate
02:03:49  39  /

View created.

Elapsed: 00:00:00.03
02:03:49 SQL> 
02:03:49 SQL> -- rpt
02:03:49 SQL> 
02:03:49 SQL> SELECT
02:03:49   2  pair
02:03:49   3  ,COUNT(pair)
02:03:49   4  ,MIN(clse),MAX(clse)
02:03:49   5  ,MIN(avg6),MAX(avg6)
02:03:49   6  ,MIN(ydate),MAX(ydate)
02:03:49   7  FROM svm6102
02:03:49   8  GROUP BY pair
02:03:49   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_chf       19259    .931675	  1.00635 .933969692 1.00498151 2010-09-30 02:05:01 2011-01-03 01:55:00

Elapsed: 00:00:00.83
02:03:50 SQL> 
02:03:50 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
02:03:50 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.14
02:03:50 SQL> CREATE TABLE svm6122 COMPRESS AS
02:03:50   2  SELECT
02:03:50   3  pair
02:03:50   4  ,ydate
02:03:50   5  ,prdate
02:03:50   6  ,clse
02:03:50   7  -- g6 is important. I want to predict g6:
02:03:50   8  ,ld6 - clse g6
02:03:50   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
02:03:50  10  -- I want more attributes from the ones I derived above:
02:03:50  11  -- clse relation to moving-min
02:03:50  12  ,clse-min4  cm4
02:03:50  13  ,clse-min6  cm6
02:03:50  14  ,clse-min8  cm8
02:03:50  15  ,clse-min10 cm10
02:03:50  16  ,clse-min12 cm12
02:03:50  17  ,clse-min14 cm14
02:03:50  18  ,clse-min16 cm16
02:03:50  19  ,clse-min18 cm18
02:03:50  20  -- clse relation to moving-avg
02:03:50  21  ,clse-avg4  ca4
02:03:50  22  ,clse-avg6  ca6
02:03:50  23  ,clse-avg8  ca8
02:03:50  24  ,clse-avg10 ca10
02:03:50  25  ,clse-avg12 ca12
02:03:50  26  ,clse-avg14 ca14
02:03:50  27  ,clse-avg16 ca16
02:03:50  28  ,clse-avg18 ca18
02:03:50  29  -- clse relation to moving-max
02:03:50  30  ,clse-max4  cx4
02:03:50  31  ,clse-max6  cx6
02:03:50  32  ,clse-max8  cx8
02:03:50  33  ,clse-max10 cx10
02:03:50  34  ,clse-max12 cx12
02:03:50  35  ,clse-max14 cx14
02:03:50  36  ,clse-max16 cx16
02:03:50  37  ,clse-max18 cx18
02:03:50  38  -- Derive more attributes.
02:03:50  39  -- I want to use CORR() here to help SVM see the shape of the series.
02:03:50  40  -- But COVAR_POP is more stable:
02:03:50  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
02:03:50  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
02:03:50  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
02:03:50  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
02:03:50  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
02:03:50  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
02:03:50  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
02:03:50  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
02:03:50  49  -- Derive date related attributes:
02:03:50  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
02:03:50  51  ,0+TO_CHAR(ydate,'D')d
02:03:50  52  ,0+TO_CHAR(ydate,'W')w
02:03:50  53  -- mpm stands for minutes-past-midnight:
02:03:50  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
02:03:50  55  -- mph stands for minutes-past-hour:
02:03:50  56  ,0+TO_CHAR(ydate,'MI')mph
02:03:50  57  FROM svm6102
02:03:50  58  ORDER BY ydate
02:03:50  59  /

Table created.

Elapsed: 00:00:02.05
02:03:52 SQL> 
02:03:52 SQL> -- rpt
02:03:52 SQL> 
02:03:52 SQL> SELECT
02:03:52   2  pair
02:03:52   3  ,COUNT(pair)
02:03:52   4  ,MIN(clse),MAX(clse)
02:03:52   5  ,MIN(ydate),MAX(ydate)
02:03:52   6  FROM svm6122
02:03:52   7  GROUP BY pair
02:03:52   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_chf       19259    .931675	  1.00635 2010-09-30 02:05:01 2011-01-03 01:55:00

Elapsed: 00:00:00.03
02:03:52 SQL> 
02:03:52 SQL> -- Prepare for derivation of NTILE based params:
02:03:52 SQL> 
02:03:52 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.25
02:03:52 SQL> CREATE TABLE svm6142 COMPRESS AS
02:03:52   2  SELECT
02:03:52   3  pair
02:03:52   4  ,ydate
02:03:52   5  ,prdate
02:03:52   6  ,clse
02:03:52   7  ,g6
02:03:52   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
02:03:52   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
02:03:52  10  ,CASE WHEN trend IS NULL THEN 1
02:03:52  11  	    WHEN trend =0      THEN 1
02:03:52  12  	    ELSE trend END trend
02:03:52  13  ,cm4
02:03:52  14  ,cm6
02:03:52  15  ,cm8
02:03:52  16  ,cm10
02:03:52  17  ,cm12
02:03:52  18  ,cm14
02:03:52  19  ,cm16
02:03:52  20  ,cm18
02:03:52  21  --
02:03:52  22  ,ca4
02:03:52  23  ,ca6
02:03:52  24  ,ca8
02:03:52  25  ,ca10
02:03:52  26  ,ca12
02:03:52  27  ,ca14
02:03:52  28  ,ca16
02:03:52  29  ,ca18
02:03:52  30  --
02:03:52  31  ,cx4
02:03:52  32  ,cx6
02:03:52  33  ,cx8
02:03:52  34  ,cx10
02:03:52  35  ,cx12
02:03:52  36  ,cx14
02:03:52  37  ,cx16
02:03:52  38  ,cx18
02:03:52  39  --
02:03:52  40  ,crr4
02:03:52  41  ,crr6
02:03:52  42  ,crr8
02:03:52  43  ,crr10
02:03:52  44  ,crr12
02:03:52  45  ,crr14
02:03:52  46  ,crr16
02:03:52  47  ,crr18
02:03:52  48  --
02:03:52  49  ,hh
02:03:52  50  ,d
02:03:52  51  ,w
02:03:52  52  ,mpm
02:03:52  53  ,mph
02:03:52  54  FROM svm6122
02:03:52  55  ORDER BY ydate
02:03:52  56  /

Table created.

Elapsed: 00:00:00.35
02:03:52 SQL> 
02:03:52 SQL> -- rpt
02:03:52 SQL> 
02:03:52 SQL> SELECT
02:03:52   2  pair
02:03:52   3  ,trend
02:03:52   4  ,gatt
02:03:52   5  ,COUNT(pair)
02:03:52   6  ,AVG(g6)
02:03:52   7  FROM svm6142
02:03:52   8  GROUP BY pair,trend,gatt
02:03:52   9  ORDER BY pair,trend,gatt
02:03:52  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7225 -.00199968
usd_chf 	-1 up	      3081 .003953543
usd_chf 	-1		25
usd_chf 	 1 nup	      6341 -.00161792
usd_chf 	 1 up	      2540 .003706908
usd_chf 	 1		47

6 rows selected.

Elapsed: 00:00:00.03
02:03:52 SQL> 
02:03:52 SQL> 
02:03:52 SQL> -- Derive NTILE based params:
02:03:52 SQL> 
02:03:52 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.18
02:03:53 SQL> CREATE TABLE svm6162 COMPRESS AS
02:03:53   2  SELECT
02:03:53   3  pair
02:03:53   4  ,ydate
02:03:53   5  ,prdate
02:03:53   6  ,clse
02:03:53   7  ,g6
02:03:53   8  ,gatt
02:03:53   9  ,gattn
02:03:53  10  ,trend
02:03:53  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
02:03:53  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
02:03:53  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
02:03:53  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
02:03:53  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
02:03:53  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
02:03:53  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
02:03:53  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
02:03:53  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
02:03:53  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
02:03:53  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
02:03:53  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
02:03:53  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
02:03:53  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
02:03:53  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
02:03:53  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
02:03:53  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
02:03:53  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
02:03:53  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
02:03:53  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
02:03:53  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
02:03:53  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
02:03:53  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
02:03:53  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
02:03:53  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
02:03:53  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
02:03:53  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
02:03:53  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
02:03:53  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
02:03:53  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
02:03:53  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
02:03:53  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
02:03:53  43  ,hh  att32
02:03:53  44  ,d   att33
02:03:53  45  ,w   att34
02:03:53  46  ,mpm att35
02:03:53  47  ,mph att36
02:03:53  48  ,trend att37
02:03:53  49  FROM svm6142
02:03:53  50  ORDER BY ydate
02:03:53  51  /

Table created.

Elapsed: 00:00:04.79
02:03:57 SQL> 
02:03:57 SQL> -- rpt
02:03:57 SQL> 
02:03:57 SQL> SELECT
02:03:57   2  pair
02:03:57   3  ,trend
02:03:57   4  ,gatt
02:03:57   5  ,COUNT(pair)
02:03:57   6  ,AVG(g6)
02:03:57   7  FROM svm6162
02:03:57   8  GROUP BY pair,trend,gatt
02:03:57   9  ORDER BY pair,trend,gatt
02:03:57  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7225 -.00199968
usd_chf 	-1 up	      3081 .003953543
usd_chf 	-1		25
usd_chf 	 1 nup	      6341 -.00161792
usd_chf 	 1 up	      2540 .003706908
usd_chf 	 1		47

6 rows selected.

Elapsed: 00:00:00.03
02:03:58 SQL> 
02:03:58 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.11
02:03:58 SQL> CREATE TABLE modsrc COMPRESS AS
02:03:58   2  SELECT
02:03:58   3  pair
02:03:58   4  ,ydate
02:03:58   5  ,prdate
02:03:58   6  ,trend
02:03:58   7  ,g6
02:03:58   8  ,gatt
02:03:58   9  ,gattn
02:03:58  10  FROM svm6162
02:03:58  11  /

Table created.

Elapsed: 00:00:00.08
02:03:58 SQL> 
02:03:58 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.27
02:03:58 SQL> 
02:03:58 SQL> DROP   TABLE chf_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
02:03:58 SQL> CREATE TABLE chf_ms610 COMPRESS AS
02:03:58   2  SELECT
02:03:58   3  ydate
02:03:58   4  ,trend chf_trend
02:03:58   5  ,g6    chf_g6
02:03:58   6  ,gatt  chf_gatt
02:03:58   7  ,gattn chf_gattn
02:03:58   8  FROM modsrc
02:03:58   9  /

Table created.

Elapsed: 00:00:00.08
02:03:58 SQL> 
02:03:58 SQL> ANALYZE TABLE chf_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
02:03:58 SQL> 
02:03:58 SQL> -- I need a copy of the attributes:
02:03:58 SQL> 
02:03:58 SQL> 
02:03:58 SQL> DROP   TABLE chf_att;

Table dropped.

Elapsed: 00:00:00.04
02:03:58 SQL> CREATE TABLE chf_att COMPRESS AS
02:03:58   2  SELECT
02:03:58   3  ydate
02:03:58   4  ,att00 chf_att00
02:03:58   5  ,att01 chf_att01
02:03:58   6  ,att02 chf_att02
02:03:58   7  ,att03 chf_att03
02:03:58   8  ,att04 chf_att04
02:03:58   9  ,att05 chf_att05
02:03:58  10  ,att06 chf_att06
02:03:58  11  ,att07 chf_att07
02:03:58  12  ,att08 chf_att08
02:03:58  13  ,att09 chf_att09
02:03:58  14  ,att10 chf_att10
02:03:58  15  ,att11 chf_att11
02:03:58  16  ,att12 chf_att12
02:03:58  17  ,att13 chf_att13
02:03:58  18  ,att14 chf_att14
02:03:58  19  ,att15 chf_att15
02:03:58  20  ,att16 chf_att16
02:03:58  21  ,att17 chf_att17
02:03:58  22  ,att18 chf_att18
02:03:58  23  ,att19 chf_att19
02:03:58  24  ,att20 chf_att20
02:03:58  25  ,att21 chf_att21
02:03:58  26  ,att22 chf_att22
02:03:58  27  ,att23 chf_att23
02:03:58  28  ,att24 chf_att24
02:03:58  29  ,att25 chf_att25
02:03:58  30  ,att26 chf_att26
02:03:58  31  ,att27 chf_att27
02:03:58  32  ,att28 chf_att28
02:03:58  33  ,att29 chf_att29
02:03:58  34  ,att30 chf_att30
02:03:58  35  ,att31 chf_att31
02:03:58  36  ,att32 chf_att32
02:03:58  37  ,att33 chf_att33
02:03:58  38  ,att34 chf_att34
02:03:58  39  ,att35 chf_att35
02:03:58  40  ,att36 chf_att36
02:03:58  41  ,att37 chf_att37
02:03:58  42  FROM svm6162
02:03:58  43  /

Table created.

Elapsed: 00:00:00.19
02:03:58 SQL> 
02:03:58 SQL> ANALYZE TABLE chf_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
02:03:59 SQL> 
02:03:59 SQL> -- rpt
02:03:59 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19259

Elapsed: 00:00:00.84
02:04:00 SQL> SELECT COUNT(*)FROM chf_att;

  COUNT(*)
----------
     19259

Elapsed: 00:00:00.00
02:04:00 SQL> 
02:04:00 SQL> --
02:04:00 SQL> -- ech610.sql
02:04:00 SQL> --
02:04:00 SQL> 
02:04:00 SQL> -- Creates views and tables for backtesting a forex SVM strategy
02:04:00 SQL> 
02:04:00 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.36
02:04:00 SQL> 
02:04:00 SQL> -- I created di5min here:
02:04:00 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
02:04:00 SQL> 
02:04:00 SQL> CREATE OR REPLACE VIEW svm6102 AS
02:04:00   2  SELECT
02:04:00   3  pair
02:04:00   4  ,ydate
02:04:00   5  ,prdate
02:04:00   6  ,rownum rnum -- acts as t in my time-series
02:04:00   7  ,clse
02:04:00   8  -- Derive a bunch of attributes from clse, the latest price:
02:04:00   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
02:04:00  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
02:04:00  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
02:04:00  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
02:04:00  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
02:04:00  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
02:04:00  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
02:04:00  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
02:04:00  17  --
02:04:00  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
02:04:00  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
02:04:00  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
02:04:00  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
02:04:00  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
02:04:00  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
02:04:00  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
02:04:00  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
02:04:00  26  --
02:04:00  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
02:04:00  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
02:04:00  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
02:04:00  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
02:04:00  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
02:04:00  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
02:04:00  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
02:04:00  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
02:04:00  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
02:04:00  36  FROM di5min WHERE pair LIKE'%ech%'
02:04:00  37  AND ydate > sysdate - 95
02:04:00  38  ORDER BY ydate
02:04:00  39  /

View created.

Elapsed: 00:00:00.04
02:04:00 SQL> 
02:04:00 SQL> -- rpt
02:04:00 SQL> 
02:04:00 SQL> SELECT
02:04:00   2  pair
02:04:00   3  ,COUNT(pair)
02:04:00   4  ,MIN(clse),MAX(clse)
02:04:00   5  ,MIN(avg6),MAX(avg6)
02:04:00   6  ,MIN(ydate),MAX(ydate)
02:04:00   7  FROM svm6102
02:04:00   8  GROUP BY pair
02:04:00   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ech_usd       19258 1.24213032 1.38284305 1.24320697 1.37986485 2010-09-30 02:05:01 2011-01-03 01:55:00

Elapsed: 00:00:00.82
02:04:01 SQL> 
02:04:01 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
02:04:01 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.31
02:04:01 SQL> CREATE TABLE svm6122 COMPRESS AS
02:04:01   2  SELECT
02:04:01   3  pair
02:04:01   4  ,ydate
02:04:01   5  ,prdate
02:04:01   6  ,clse
02:04:01   7  -- g6 is important. I want to predict g6:
02:04:01   8  ,ld6 - clse g6
02:04:01   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
02:04:01  10  -- I want more attributes from the ones I derived above:
02:04:01  11  -- clse relation to moving-min
02:04:01  12  ,clse-min4  cm4
02:04:01  13  ,clse-min6  cm6
02:04:01  14  ,clse-min8  cm8
02:04:01  15  ,clse-min10 cm10
02:04:01  16  ,clse-min12 cm12
02:04:01  17  ,clse-min14 cm14
02:04:01  18  ,clse-min16 cm16
02:04:01  19  ,clse-min18 cm18
02:04:01  20  -- clse relation to moving-avg
02:04:01  21  ,clse-avg4  ca4
02:04:01  22  ,clse-avg6  ca6
02:04:01  23  ,clse-avg8  ca8
02:04:01  24  ,clse-avg10 ca10
02:04:01  25  ,clse-avg12 ca12
02:04:01  26  ,clse-avg14 ca14
02:04:01  27  ,clse-avg16 ca16
02:04:01  28  ,clse-avg18 ca18
02:04:01  29  -- clse relation to moving-max
02:04:01  30  ,clse-max4  cx4
02:04:01  31  ,clse-max6  cx6
02:04:01  32  ,clse-max8  cx8
02:04:01  33  ,clse-max10 cx10
02:04:01  34  ,clse-max12 cx12
02:04:01  35  ,clse-max14 cx14
02:04:01  36  ,clse-max16 cx16
02:04:01  37  ,clse-max18 cx18
02:04:01  38  -- Derive more attributes.
02:04:01  39  -- I want to use CORR() here to help SVM see the shape of the series.
02:04:01  40  -- But COVAR_POP is more stable:
02:04:01  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
02:04:01  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
02:04:01  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
02:04:01  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
02:04:01  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
02:04:01  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
02:04:01  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
02:04:01  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
02:04:01  49  -- Derive date related attributes:
02:04:01  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
02:04:01  51  ,0+TO_CHAR(ydate,'D')d
02:04:01  52  ,0+TO_CHAR(ydate,'W')w
02:04:01  53  -- mpm stands for minutes-past-midnight:
02:04:01  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
02:04:01  55  -- mph stands for minutes-past-hour:
02:04:01  56  ,0+TO_CHAR(ydate,'MI')mph
02:04:01  57  FROM svm6102
02:04:01  58  ORDER BY ydate
02:04:01  59  /

Table created.

Elapsed: 00:00:01.99
02:04:03 SQL> 
02:04:03 SQL> -- rpt
02:04:03 SQL> 
02:04:03 SQL> SELECT
02:04:03   2  pair
02:04:03   3  ,COUNT(pair)
02:04:03   4  ,MIN(clse),MAX(clse)
02:04:03   5  ,MIN(ydate),MAX(ydate)
02:04:03   6  FROM svm6122
02:04:03   7  GROUP BY pair
02:04:03   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ech_usd       19258 1.24213032 1.38284305 2010-09-30 02:05:01 2011-01-03 01:55:00

Elapsed: 00:00:00.04
02:04:03 SQL> 
02:04:03 SQL> -- Prepare for derivation of NTILE based params:
02:04:03 SQL> 
02:04:03 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.17
02:04:04 SQL> CREATE TABLE svm6142 COMPRESS AS
02:04:04   2  SELECT
02:04:04   3  pair
02:04:04   4  ,ydate
02:04:04   5  ,prdate
02:04:04   6  ,clse
02:04:04   7  ,g6
02:04:04   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
02:04:04   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
02:04:04  10  ,CASE WHEN trend IS NULL THEN 1
02:04:04  11  	    WHEN trend =0      THEN 1
02:04:04  12  	    ELSE trend END trend
02:04:04  13  ,cm4
02:04:04  14  ,cm6
02:04:04  15  ,cm8
02:04:04  16  ,cm10
02:04:04  17  ,cm12
02:04:04  18  ,cm14
02:04:04  19  ,cm16
02:04:04  20  ,cm18
02:04:04  21  --
02:04:04  22  ,ca4
02:04:04  23  ,ca6
02:04:04  24  ,ca8
02:04:04  25  ,ca10
02:04:04  26  ,ca12
02:04:04  27  ,ca14
02:04:04  28  ,ca16
02:04:04  29  ,ca18
02:04:04  30  --
02:04:04  31  ,cx4
02:04:04  32  ,cx6
02:04:04  33  ,cx8
02:04:04  34  ,cx10
02:04:04  35  ,cx12
02:04:04  36  ,cx14
02:04:04  37  ,cx16
02:04:04  38  ,cx18
02:04:04  39  --
02:04:04  40  ,crr4
02:04:04  41  ,crr6
02:04:04  42  ,crr8
02:04:04  43  ,crr10
02:04:04  44  ,crr12
02:04:04  45  ,crr14
02:04:04  46  ,crr16
02:04:04  47  ,crr18
02:04:04  48  --
02:04:04  49  ,hh
02:04:04  50  ,d
02:04:04  51  ,w
02:04:04  52  ,mpm
02:04:04  53  ,mph
02:04:04  54  FROM svm6122
02:04:04  55  ORDER BY ydate
02:04:04  56  /

Table created.

Elapsed: 00:00:00.38
02:04:04 SQL> 
02:04:04 SQL> -- rpt
02:04:04 SQL> 
02:04:04 SQL> SELECT
02:04:04   2  pair
02:04:04   3  ,trend
02:04:04   4  ,gatt
02:04:04   5  ,COUNT(pair)
02:04:04   6  ,AVG(g6)
02:04:04   7  FROM svm6142
02:04:04   8  GROUP BY pair,trend,gatt
02:04:04   9  ORDER BY pair,trend,gatt
02:04:04  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6485 -.00224149
ech_usd 	-1 up	      3530  .00355455
ech_usd 	-1		55
ech_usd 	 1 nup	      6312 -.00237134
ech_usd 	 1 up	      2859 .003862606
ech_usd 	 1		17

6 rows selected.

Elapsed: 00:00:00.04
02:04:04 SQL> 
02:04:04 SQL> 
02:04:04 SQL> -- Derive NTILE based params:
02:04:04 SQL> 
02:04:04 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.11
02:04:04 SQL> CREATE TABLE svm6162 COMPRESS AS
02:04:04   2  SELECT
02:04:04   3  pair
02:04:04   4  ,ydate
02:04:04   5  ,prdate
02:04:04   6  ,clse
02:04:04   7  ,g6
02:04:04   8  ,gatt
02:04:04   9  ,gattn
02:04:04  10  ,trend
02:04:04  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
02:04:04  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
02:04:04  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
02:04:04  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
02:04:04  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
02:04:04  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
02:04:04  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
02:04:04  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
02:04:04  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
02:04:04  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
02:04:04  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
02:04:04  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
02:04:04  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
02:04:04  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
02:04:04  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
02:04:04  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
02:04:04  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
02:04:04  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
02:04:04  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
02:04:04  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
02:04:04  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
02:04:04  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
02:04:04  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
02:04:04  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
02:04:04  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
02:04:04  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
02:04:04  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
02:04:04  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
02:04:04  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
02:04:04  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
02:04:04  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
02:04:04  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
02:04:04  43  ,hh  att32
02:04:04  44  ,d   att33
02:04:04  45  ,w   att34
02:04:04  46  ,mpm att35
02:04:04  47  ,mph att36
02:04:04  48  ,trend att37
02:04:04  49  FROM svm6142
02:04:04  50  ORDER BY ydate
02:04:04  51  /

Table created.

Elapsed: 00:00:04.89
02:04:09 SQL> 
02:04:09 SQL> -- rpt
02:04:09 SQL> 
02:04:09 SQL> SELECT
02:04:09   2  pair
02:04:09   3  ,trend
02:04:09   4  ,gatt
02:04:09   5  ,COUNT(pair)
02:04:09   6  ,AVG(g6)
02:04:09   7  FROM svm6162
02:04:09   8  GROUP BY pair,trend,gatt
02:04:09   9  ORDER BY pair,trend,gatt
02:04:09  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6485 -.00224149
ech_usd 	-1 up	      3530  .00355455
ech_usd 	-1		55
ech_usd 	 1 nup	      6312 -.00237134
ech_usd 	 1 up	      2859 .003862606
ech_usd 	 1		17

6 rows selected.

Elapsed: 00:00:00.03
02:04:09 SQL> 
02:04:09 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.17
02:04:09 SQL> CREATE TABLE modsrc COMPRESS AS
02:04:09   2  SELECT
02:04:09   3  pair
02:04:09   4  ,ydate
02:04:09   5  ,prdate
02:04:09   6  ,trend
02:04:09   7  ,g6
02:04:09   8  ,gatt
02:04:09   9  ,gattn
02:04:09  10  FROM svm6162
02:04:09  11  /

Table created.

Elapsed: 00:00:00.09
02:04:09 SQL> 
02:04:09 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
02:04:09 SQL> 
02:04:09 SQL> DROP   TABLE ech_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
02:04:09 SQL> CREATE TABLE ech_ms610 COMPRESS AS
02:04:09   2  SELECT
02:04:09   3  ydate
02:04:09   4  ,trend ech_trend
02:04:09   5  ,g6    ech_g6
02:04:09   6  ,gatt  ech_gatt
02:04:09   7  ,gattn ech_gattn
02:04:09   8  FROM modsrc
02:04:09   9  /

Table created.

Elapsed: 00:00:00.07
02:04:10 SQL> 
02:04:10 SQL> ANALYZE TABLE ech_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
02:04:10 SQL> 
02:04:10 SQL> -- I need a copy of the attributes:
02:04:10 SQL> 
02:04:10 SQL> 
02:04:10 SQL> DROP   TABLE ech_att;

Table dropped.

Elapsed: 00:00:00.05
02:04:10 SQL> CREATE TABLE ech_att COMPRESS AS
02:04:10   2  SELECT
02:04:10   3  ydate
02:04:10   4  ,att00 ech_att00
02:04:10   5  ,att01 ech_att01
02:04:10   6  ,att02 ech_att02
02:04:10   7  ,att03 ech_att03
02:04:10   8  ,att04 ech_att04
02:04:10   9  ,att05 ech_att05
02:04:10  10  ,att06 ech_att06
02:04:10  11  ,att07 ech_att07
02:04:10  12  ,att08 ech_att08
02:04:10  13  ,att09 ech_att09
02:04:10  14  ,att10 ech_att10
02:04:10  15  ,att11 ech_att11
02:04:10  16  ,att12 ech_att12
02:04:10  17  ,att13 ech_att13
02:04:10  18  ,att14 ech_att14
02:04:10  19  ,att15 ech_att15
02:04:10  20  ,att16 ech_att16
02:04:10  21  ,att17 ech_att17
02:04:10  22  ,att18 ech_att18
02:04:10  23  ,att19 ech_att19
02:04:10  24  ,att20 ech_att20
02:04:10  25  ,att21 ech_att21
02:04:10  26  ,att22 ech_att22
02:04:10  27  ,att23 ech_att23
02:04:10  28  ,att24 ech_att24
02:04:10  29  ,att25 ech_att25
02:04:10  30  ,att26 ech_att26
02:04:10  31  ,att27 ech_att27
02:04:10  32  ,att28 ech_att28
02:04:10  33  ,att29 ech_att29
02:04:10  34  ,att30 ech_att30
02:04:10  35  ,att31 ech_att31
02:04:10  36  ,att32 ech_att32
02:04:10  37  ,att33 ech_att33
02:04:10  38  ,att34 ech_att34
02:04:10  39  ,att35 ech_att35
02:04:10  40  ,att36 ech_att36
02:04:10  41  ,att37 ech_att37
02:04:10  42  FROM svm6162
02:04:10  43  /

Table created.

Elapsed: 00:00:00.57
02:04:10 SQL> 
02:04:10 SQL> ANALYZE TABLE ech_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
02:04:11 SQL> 
02:04:11 SQL> -- rpt
02:04:11 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19258

Elapsed: 00:00:00.77
02:04:12 SQL> SELECT COUNT(*)FROM ech_att;

  COUNT(*)
----------
     19258

Elapsed: 00:00:00.00
02:04:12 SQL> 
02:04:12 SQL> --
02:04:12 SQL> -- egb610.sql
02:04:12 SQL> --
02:04:12 SQL> 
02:04:12 SQL> -- Creates views and tables for backtesting a forex SVM strategy
02:04:12 SQL> 
02:04:12 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.67
02:04:12 SQL> 
02:04:12 SQL> -- I created di5min here:
02:04:12 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
02:04:12 SQL> 
02:04:12 SQL> CREATE OR REPLACE VIEW svm6102 AS
02:04:12   2  SELECT
02:04:12   3  pair
02:04:12   4  ,ydate
02:04:12   5  ,prdate
02:04:12   6  ,rownum rnum -- acts as t in my time-series
02:04:12   7  ,clse
02:04:12   8  -- Derive a bunch of attributes from clse, the latest price:
02:04:12   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
02:04:12  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
02:04:12  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
02:04:12  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
02:04:12  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
02:04:12  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
02:04:12  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
02:04:12  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
02:04:12  17  --
02:04:12  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
02:04:12  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
02:04:12  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
02:04:12  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
02:04:12  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
02:04:12  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
02:04:12  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
02:04:12  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
02:04:12  26  --
02:04:12  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
02:04:12  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
02:04:12  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
02:04:12  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
02:04:12  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
02:04:12  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
02:04:12  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
02:04:12  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
02:04:12  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
02:04:12  36  FROM di5min WHERE pair LIKE'%egb%'
02:04:12  37  AND ydate > sysdate - 95
02:04:12  38  ORDER BY ydate
02:04:12  39  /

View created.

Elapsed: 00:00:00.05
02:04:12 SQL> 
02:04:12 SQL> -- rpt
02:04:12 SQL> 
02:04:12 SQL> SELECT
02:04:12   2  pair
02:04:12   3  ,COUNT(pair)
02:04:12   4  ,MIN(clse),MAX(clse)
02:04:12   5  ,MIN(avg6),MAX(avg6)
02:04:12   6  ,MIN(ydate),MAX(ydate)
02:04:12   7  FROM svm6102
02:04:12   8  GROUP BY pair
02:04:12   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
egb_usd       19257 .833520557 .893920122 .834199029 .892400287 2010-09-30 02:05:01 2011-01-03 01:55:00

Elapsed: 00:00:00.92
02:04:13 SQL> 
02:04:13 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
02:04:13 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.20
02:04:13 SQL> CREATE TABLE svm6122 COMPRESS AS
02:04:13   2  SELECT
02:04:13   3  pair
02:04:13   4  ,ydate
02:04:13   5  ,prdate
02:04:13   6  ,clse
02:04:13   7  -- g6 is important. I want to predict g6:
02:04:13   8  ,ld6 - clse g6
02:04:13   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
02:04:13  10  -- I want more attributes from the ones I derived above:
02:04:13  11  -- clse relation to moving-min
02:04:13  12  ,clse-min4  cm4
02:04:13  13  ,clse-min6  cm6
02:04:13  14  ,clse-min8  cm8
02:04:13  15  ,clse-min10 cm10
02:04:13  16  ,clse-min12 cm12
02:04:13  17  ,clse-min14 cm14
02:04:13  18  ,clse-min16 cm16
02:04:13  19  ,clse-min18 cm18
02:04:13  20  -- clse relation to moving-avg
02:04:13  21  ,clse-avg4  ca4
02:04:13  22  ,clse-avg6  ca6
02:04:13  23  ,clse-avg8  ca8
02:04:13  24  ,clse-avg10 ca10
02:04:13  25  ,clse-avg12 ca12
02:04:13  26  ,clse-avg14 ca14
02:04:13  27  ,clse-avg16 ca16
02:04:13  28  ,clse-avg18 ca18
02:04:13  29  -- clse relation to moving-max
02:04:13  30  ,clse-max4  cx4
02:04:13  31  ,clse-max6  cx6
02:04:13  32  ,clse-max8  cx8
02:04:13  33  ,clse-max10 cx10
02:04:13  34  ,clse-max12 cx12
02:04:13  35  ,clse-max14 cx14
02:04:13  36  ,clse-max16 cx16
02:04:13  37  ,clse-max18 cx18
02:04:13  38  -- Derive more attributes.
02:04:13  39  -- I want to use CORR() here to help SVM see the shape of the series.
02:04:13  40  -- But COVAR_POP is more stable:
02:04:13  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
02:04:13  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
02:04:13  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
02:04:13  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
02:04:13  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
02:04:13  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
02:04:13  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
02:04:13  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
02:04:13  49  -- Derive date related attributes:
02:04:13  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
02:04:13  51  ,0+TO_CHAR(ydate,'D')d
02:04:13  52  ,0+TO_CHAR(ydate,'W')w
02:04:13  53  -- mpm stands for minutes-past-midnight:
02:04:13  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
02:04:13  55  -- mph stands for minutes-past-hour:
02:04:13  56  ,0+TO_CHAR(ydate,'MI')mph
02:04:13  57  FROM svm6102
02:04:13  58  ORDER BY ydate
02:04:13  59  /

Table created.

Elapsed: 00:00:02.42
02:04:16 SQL> 
02:04:16 SQL> -- rpt
02:04:16 SQL> 
02:04:16 SQL> SELECT
02:04:16   2  pair
02:04:16   3  ,COUNT(pair)
02:04:16   4  ,MIN(clse),MAX(clse)
02:04:16   5  ,MIN(ydate),MAX(ydate)
02:04:16   6  FROM svm6122
02:04:16   7  GROUP BY pair
02:04:16   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
egb_usd       19257 .833520557 .893920122 2010-09-30 02:05:01 2011-01-03 01:55:00

Elapsed: 00:00:00.05
02:04:16 SQL> 
02:04:16 SQL> -- Prepare for derivation of NTILE based params:
02:04:16 SQL> 
02:04:16 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.24
02:04:16 SQL> CREATE TABLE svm6142 COMPRESS AS
02:04:16   2  SELECT
02:04:16   3  pair
02:04:16   4  ,ydate
02:04:16   5  ,prdate
02:04:16   6  ,clse
02:04:16   7  ,g6
02:04:16   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
02:04:16   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
02:04:16  10  ,CASE WHEN trend IS NULL THEN 1
02:04:16  11  	    WHEN trend =0      THEN 1
02:04:16  12  	    ELSE trend END trend
02:04:16  13  ,cm4
02:04:16  14  ,cm6
02:04:16  15  ,cm8
02:04:16  16  ,cm10
02:04:16  17  ,cm12
02:04:16  18  ,cm14
02:04:16  19  ,cm16
02:04:16  20  ,cm18
02:04:16  21  --
02:04:16  22  ,ca4
02:04:16  23  ,ca6
02:04:16  24  ,ca8
02:04:16  25  ,ca10
02:04:16  26  ,ca12
02:04:16  27  ,ca14
02:04:16  28  ,ca16
02:04:16  29  ,ca18
02:04:16  30  --
02:04:16  31  ,cx4
02:04:16  32  ,cx6
02:04:16  33  ,cx8
02:04:16  34  ,cx10
02:04:16  35  ,cx12
02:04:16  36  ,cx14
02:04:16  37  ,cx16
02:04:16  38  ,cx18
02:04:16  39  --
02:04:16  40  ,crr4
02:04:16  41  ,crr6
02:04:16  42  ,crr8
02:04:16  43  ,crr10
02:04:16  44  ,crr12
02:04:16  45  ,crr14
02:04:16  46  ,crr16
02:04:16  47  ,crr18
02:04:16  48  --
02:04:16  49  ,hh
02:04:16  50  ,d
02:04:16  51  ,w
02:04:16  52  ,mpm
02:04:16  53  ,mph
02:04:16  54  FROM svm6122
02:04:16  55  ORDER BY ydate
02:04:16  56  /

Table created.

Elapsed: 00:00:00.42
02:04:17 SQL> 
02:04:17 SQL> -- rpt
02:04:17 SQL> 
02:04:17 SQL> SELECT
02:04:17   2  pair
02:04:17   3  ,trend
02:04:17   4  ,gatt
02:04:17   5  ,COUNT(pair)
02:04:17   6  ,AVG(g6)
02:04:17   7  FROM svm6142
02:04:17   8  GROUP BY pair,trend,gatt
02:04:17   9  ORDER BY pair,trend,gatt
02:04:17  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7299 -.00099446
egb_usd 	-1 up	      2659 .002919558
egb_usd 	-1		60
egb_usd 	 1 nup	      6550 -.00131089
egb_usd 	 1 up	      2677 .002977184
egb_usd 	 1		12

6 rows selected.

Elapsed: 00:00:00.04
02:04:17 SQL> 
02:04:17 SQL> 
02:04:17 SQL> -- Derive NTILE based params:
02:04:17 SQL> 
02:04:17 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.24
02:04:17 SQL> CREATE TABLE svm6162 COMPRESS AS
02:04:17   2  SELECT
02:04:17   3  pair
02:04:17   4  ,ydate
02:04:17   5  ,prdate
02:04:17   6  ,clse
02:04:17   7  ,g6
02:04:17   8  ,gatt
02:04:17   9  ,gattn
02:04:17  10  ,trend
02:04:17  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
02:04:17  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
02:04:17  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
02:04:17  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
02:04:17  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
02:04:17  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
02:04:17  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
02:04:17  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
02:04:17  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
02:04:17  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
02:04:17  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
02:04:17  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
02:04:17  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
02:04:17  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
02:04:17  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
02:04:17  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
02:04:17  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
02:04:17  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
02:04:17  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
02:04:17  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
02:04:17  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
02:04:17  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
02:04:17  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
02:04:17  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
02:04:17  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
02:04:17  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
02:04:17  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
02:04:17  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
02:04:17  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
02:04:17  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
02:04:17  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
02:04:17  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
02:04:17  43  ,hh  att32
02:04:17  44  ,d   att33
02:04:17  45  ,w   att34
02:04:17  46  ,mpm att35
02:04:17  47  ,mph att36
02:04:17  48  ,trend att37
02:04:17  49  FROM svm6142
02:04:17  50  ORDER BY ydate
02:04:17  51  /

Table created.

Elapsed: 00:00:05.62
02:04:22 SQL> 
02:04:22 SQL> -- rpt
02:04:22 SQL> 
02:04:22 SQL> SELECT
02:04:22   2  pair
02:04:22   3  ,trend
02:04:22   4  ,gatt
02:04:22   5  ,COUNT(pair)
02:04:22   6  ,AVG(g6)
02:04:22   7  FROM svm6162
02:04:22   8  GROUP BY pair,trend,gatt
02:04:22   9  ORDER BY pair,trend,gatt
02:04:22  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7299 -.00099446
egb_usd 	-1 up	      2659 .002919558
egb_usd 	-1		60
egb_usd 	 1 nup	      6550 -.00131089
egb_usd 	 1 up	      2677 .002977184
egb_usd 	 1		12

6 rows selected.

Elapsed: 00:00:00.03
02:04:22 SQL> 
02:04:22 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.22
02:04:23 SQL> CREATE TABLE modsrc COMPRESS AS
02:04:23   2  SELECT
02:04:23   3  pair
02:04:23   4  ,ydate
02:04:23   5  ,prdate
02:04:23   6  ,trend
02:04:23   7  ,g6
02:04:23   8  ,gatt
02:04:23   9  ,gattn
02:04:23  10  FROM svm6162
02:04:23  11  /

Table created.

Elapsed: 00:00:00.08
02:04:23 SQL> 
02:04:23 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
02:04:23 SQL> 
02:04:23 SQL> DROP   TABLE egb_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
02:04:23 SQL> CREATE TABLE egb_ms610 COMPRESS AS
02:04:23   2  SELECT
02:04:23   3  ydate
02:04:23   4  ,trend egb_trend
02:04:23   5  ,g6    egb_g6
02:04:23   6  ,gatt  egb_gatt
02:04:23   7  ,gattn egb_gattn
02:04:23   8  FROM modsrc
02:04:23   9  /

Table created.

Elapsed: 00:00:00.06
02:04:23 SQL> 
02:04:23 SQL> ANALYZE TABLE egb_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.14
02:04:23 SQL> 
02:04:23 SQL> -- I need a copy of the attributes:
02:04:23 SQL> 
02:04:23 SQL> 
02:04:23 SQL> DROP   TABLE egb_att;

Table dropped.

Elapsed: 00:00:00.32
02:04:24 SQL> CREATE TABLE egb_att COMPRESS AS
02:04:24   2  SELECT
02:04:24   3  ydate
02:04:24   4  ,att00 egb_att00
02:04:24   5  ,att01 egb_att01
02:04:24   6  ,att02 egb_att02
02:04:24   7  ,att03 egb_att03
02:04:24   8  ,att04 egb_att04
02:04:24   9  ,att05 egb_att05
02:04:24  10  ,att06 egb_att06
02:04:24  11  ,att07 egb_att07
02:04:24  12  ,att08 egb_att08
02:04:24  13  ,att09 egb_att09
02:04:24  14  ,att10 egb_att10
02:04:24  15  ,att11 egb_att11
02:04:24  16  ,att12 egb_att12
02:04:24  17  ,att13 egb_att13
02:04:24  18  ,att14 egb_att14
02:04:24  19  ,att15 egb_att15
02:04:24  20  ,att16 egb_att16
02:04:24  21  ,att17 egb_att17
02:04:24  22  ,att18 egb_att18
02:04:24  23  ,att19 egb_att19
02:04:24  24  ,att20 egb_att20
02:04:24  25  ,att21 egb_att21
02:04:24  26  ,att22 egb_att22
02:04:24  27  ,att23 egb_att23
02:04:24  28  ,att24 egb_att24
02:04:24  29  ,att25 egb_att25
02:04:24  30  ,att26 egb_att26
02:04:24  31  ,att27 egb_att27
02:04:24  32  ,att28 egb_att28
02:04:24  33  ,att29 egb_att29
02:04:24  34  ,att30 egb_att30
02:04:24  35  ,att31 egb_att31
02:04:24  36  ,att32 egb_att32
02:04:24  37  ,att33 egb_att33
02:04:24  38  ,att34 egb_att34
02:04:24  39  ,att35 egb_att35
02:04:24  40  ,att36 egb_att36
02:04:24  41  ,att37 egb_att37
02:04:24  42  FROM svm6162
02:04:24  43  /

Table created.

Elapsed: 00:00:00.18
02:04:24 SQL> 
02:04:24 SQL> ANALYZE TABLE egb_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
02:04:24 SQL> 
02:04:24 SQL> -- rpt
02:04:24 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19257

Elapsed: 00:00:00.94
02:04:25 SQL> SELECT COUNT(*)FROM egb_att;

  COUNT(*)
----------
     19257

Elapsed: 00:00:00.00
02:04:25 SQL> 
02:04:25 SQL> --
02:04:25 SQL> -- ejp610.sql
02:04:25 SQL> --
02:04:25 SQL> 
02:04:25 SQL> -- Creates views and tables for backtesting a forex SVM strategy
02:04:25 SQL> 
02:04:25 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.91
02:04:26 SQL> 
02:04:26 SQL> -- I created di5min here:
02:04:26 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
02:04:26 SQL> 
02:04:26 SQL> CREATE OR REPLACE VIEW svm6102 AS
02:04:26   2  SELECT
02:04:26   3  pair
02:04:26   4  ,ydate
02:04:26   5  ,prdate
02:04:26   6  ,rownum rnum -- acts as t in my time-series
02:04:26   7  ,clse
02:04:26   8  -- Derive a bunch of attributes from clse, the latest price:
02:04:26   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
02:04:26  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
02:04:26  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
02:04:26  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
02:04:26  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
02:04:26  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
02:04:26  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
02:04:26  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
02:04:26  17  --
02:04:26  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
02:04:26  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
02:04:26  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
02:04:26  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
02:04:26  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
02:04:26  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
02:04:26  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
02:04:26  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
02:04:26  26  --
02:04:26  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
02:04:26  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
02:04:26  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
02:04:26  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
02:04:26  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
02:04:26  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
02:04:26  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
02:04:26  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
02:04:26  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
02:04:26  36  FROM di5min WHERE pair LIKE'%ejp%'
02:04:26  37  AND ydate > sysdate - 95
02:04:26  38  ORDER BY ydate
02:04:26  39  /

View created.

Elapsed: 00:00:00.05
02:04:26 SQL> 
02:04:26 SQL> -- rpt
02:04:26 SQL> 
02:04:26 SQL> SELECT
02:04:26   2  pair
02:04:26   3  ,COUNT(pair)
02:04:26   4  ,MIN(clse),MAX(clse)
02:04:26   5  ,MIN(avg6),MAX(avg6)
02:04:26   6  ,MIN(ydate),MAX(ydate)
02:04:26   7  FROM svm6102
02:04:26   8  GROUP BY pair
02:04:26   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ejp_usd       19255 107.643765	115.63485 107.776148 115.509678 2010-09-30 02:05:01 2011-01-03 01:55:00

Elapsed: 00:00:00.85
02:04:27 SQL> 
02:04:27 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
02:04:27 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.25
02:04:27 SQL> CREATE TABLE svm6122 COMPRESS AS
02:04:27   2  SELECT
02:04:27   3  pair
02:04:27   4  ,ydate
02:04:27   5  ,prdate
02:04:27   6  ,clse
02:04:27   7  -- g6 is important. I want to predict g6:
02:04:27   8  ,ld6 - clse g6
02:04:27   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
02:04:27  10  -- I want more attributes from the ones I derived above:
02:04:27  11  -- clse relation to moving-min
02:04:27  12  ,clse-min4  cm4
02:04:27  13  ,clse-min6  cm6
02:04:27  14  ,clse-min8  cm8
02:04:27  15  ,clse-min10 cm10
02:04:27  16  ,clse-min12 cm12
02:04:27  17  ,clse-min14 cm14
02:04:27  18  ,clse-min16 cm16
02:04:27  19  ,clse-min18 cm18
02:04:27  20  -- clse relation to moving-avg
02:04:27  21  ,clse-avg4  ca4
02:04:27  22  ,clse-avg6  ca6
02:04:27  23  ,clse-avg8  ca8
02:04:27  24  ,clse-avg10 ca10
02:04:27  25  ,clse-avg12 ca12
02:04:27  26  ,clse-avg14 ca14
02:04:27  27  ,clse-avg16 ca16
02:04:27  28  ,clse-avg18 ca18
02:04:27  29  -- clse relation to moving-max
02:04:27  30  ,clse-max4  cx4
02:04:27  31  ,clse-max6  cx6
02:04:27  32  ,clse-max8  cx8
02:04:27  33  ,clse-max10 cx10
02:04:27  34  ,clse-max12 cx12
02:04:27  35  ,clse-max14 cx14
02:04:27  36  ,clse-max16 cx16
02:04:27  37  ,clse-max18 cx18
02:04:27  38  -- Derive more attributes.
02:04:27  39  -- I want to use CORR() here to help SVM see the shape of the series.
02:04:27  40  -- But COVAR_POP is more stable:
02:04:27  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
02:04:27  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
02:04:27  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
02:04:27  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
02:04:27  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
02:04:27  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
02:04:27  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
02:04:27  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
02:04:27  49  -- Derive date related attributes:
02:04:27  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
02:04:27  51  ,0+TO_CHAR(ydate,'D')d
02:04:27  52  ,0+TO_CHAR(ydate,'W')w
02:04:27  53  -- mpm stands for minutes-past-midnight:
02:04:27  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
02:04:27  55  -- mph stands for minutes-past-hour:
02:04:27  56  ,0+TO_CHAR(ydate,'MI')mph
02:04:27  57  FROM svm6102
02:04:27  58  ORDER BY ydate
02:04:27  59  /

Table created.

Elapsed: 00:00:02.12
02:04:29 SQL> 
02:04:29 SQL> -- rpt
02:04:29 SQL> 
02:04:29 SQL> SELECT
02:04:29   2  pair
02:04:29   3  ,COUNT(pair)
02:04:29   4  ,MIN(clse),MAX(clse)
02:04:29   5  ,MIN(ydate),MAX(ydate)
02:04:29   6  FROM svm6122
02:04:29   7  GROUP BY pair
02:04:29   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ejp_usd       19255 107.643765	115.63485 2010-09-30 02:05:01 2011-01-03 01:55:00

Elapsed: 00:00:00.04
02:04:29 SQL> 
02:04:29 SQL> -- Prepare for derivation of NTILE based params:
02:04:29 SQL> 
02:04:29 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.18
02:04:29 SQL> CREATE TABLE svm6142 COMPRESS AS
02:04:29   2  SELECT
02:04:29   3  pair
02:04:29   4  ,ydate
02:04:29   5  ,prdate
02:04:29   6  ,clse
02:04:29   7  ,g6
02:04:29   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
02:04:29   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
02:04:29  10  ,CASE WHEN trend IS NULL THEN 1
02:04:29  11  	    WHEN trend =0      THEN 1
02:04:29  12  	    ELSE trend END trend
02:04:29  13  ,cm4
02:04:29  14  ,cm6
02:04:29  15  ,cm8
02:04:29  16  ,cm10
02:04:29  17  ,cm12
02:04:29  18  ,cm14
02:04:29  19  ,cm16
02:04:29  20  ,cm18
02:04:29  21  --
02:04:29  22  ,ca4
02:04:29  23  ,ca6
02:04:29  24  ,ca8
02:04:29  25  ,ca10
02:04:29  26  ,ca12
02:04:29  27  ,ca14
02:04:29  28  ,ca16
02:04:29  29  ,ca18
02:04:29  30  --
02:04:29  31  ,cx4
02:04:29  32  ,cx6
02:04:29  33  ,cx8
02:04:29  34  ,cx10
02:04:29  35  ,cx12
02:04:29  36  ,cx14
02:04:29  37  ,cx16
02:04:29  38  ,cx18
02:04:29  39  --
02:04:29  40  ,crr4
02:04:29  41  ,crr6
02:04:29  42  ,crr8
02:04:29  43  ,crr10
02:04:29  44  ,crr12
02:04:29  45  ,crr14
02:04:29  46  ,crr16
02:04:29  47  ,crr18
02:04:29  48  --
02:04:29  49  ,hh
02:04:29  50  ,d
02:04:29  51  ,w
02:04:30  52  ,mpm
02:04:30  53  ,mph
02:04:30  54  FROM svm6122
02:04:30  55  ORDER BY ydate
02:04:30  56  /

Table created.

Elapsed: 00:00:00.39
02:04:30 SQL> 
02:04:30 SQL> -- rpt
02:04:30 SQL> 
02:04:30 SQL> SELECT
02:04:30   2  pair
02:04:30   3  ,trend
02:04:30   4  ,gatt
02:04:30   5  ,COUNT(pair)
02:04:30   6  ,AVG(g6)
02:04:30   7  FROM svm6142
02:04:30   8  GROUP BY pair,trend,gatt
02:04:30   9  ORDER BY pair,trend,gatt
02:04:30  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      4799 -.32424445
ejp_usd 	-1 up	      4862 .269588702
ejp_usd 	-1		71
ejp_usd 	 1 nup	      4903 -.28940154
ejp_usd 	 1 up	      4619  .28079333
ejp_usd 	 1		 1

6 rows selected.

Elapsed: 00:00:00.04
02:04:30 SQL> 
02:04:30 SQL> 
02:04:30 SQL> -- Derive NTILE based params:
02:04:30 SQL> 
02:04:30 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.15
02:04:30 SQL> CREATE TABLE svm6162 COMPRESS AS
02:04:30   2  SELECT
02:04:30   3  pair
02:04:30   4  ,ydate
02:04:30   5  ,prdate
02:04:30   6  ,clse
02:04:30   7  ,g6
02:04:30   8  ,gatt
02:04:30   9  ,gattn
02:04:30  10  ,trend
02:04:30  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
02:04:30  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
02:04:30  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
02:04:30  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
02:04:30  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
02:04:30  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
02:04:30  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
02:04:30  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
02:04:30  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
02:04:30  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
02:04:30  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
02:04:30  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
02:04:30  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
02:04:30  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
02:04:30  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
02:04:30  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
02:04:30  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
02:04:30  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
02:04:30  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
02:04:30  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
02:04:30  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
02:04:30  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
02:04:30  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
02:04:30  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
02:04:30  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
02:04:30  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
02:04:30  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
02:04:30  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
02:04:30  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
02:04:30  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
02:04:30  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
02:04:30  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
02:04:30  43  ,hh  att32
02:04:30  44  ,d   att33
02:04:30  45  ,w   att34
02:04:30  46  ,mpm att35
02:04:30  47  ,mph att36
02:04:30  48  ,trend att37
02:04:30  49  FROM svm6142
02:04:30  50  ORDER BY ydate
02:04:30  51  /

Table created.

Elapsed: 00:00:04.84
02:04:35 SQL> 
02:04:35 SQL> -- rpt
02:04:35 SQL> 
02:04:35 SQL> SELECT
02:04:35   2  pair
02:04:35   3  ,trend
02:04:35   4  ,gatt
02:04:35   5  ,COUNT(pair)
02:04:35   6  ,AVG(g6)
02:04:35   7  FROM svm6162
02:04:35   8  GROUP BY pair,trend,gatt
02:04:35   9  ORDER BY pair,trend,gatt
02:04:35  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      4799 -.32424445
ejp_usd 	-1 up	      4862 .269588702
ejp_usd 	-1		71
ejp_usd 	 1 nup	      4903 -.28940154
ejp_usd 	 1 up	      4619  .28079333
ejp_usd 	 1		 1

6 rows selected.

Elapsed: 00:00:00.03
02:04:35 SQL> 
02:04:35 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.11
02:04:35 SQL> CREATE TABLE modsrc COMPRESS AS
02:04:35   2  SELECT
02:04:35   3  pair
02:04:35   4  ,ydate
02:04:35   5  ,prdate
02:04:35   6  ,trend
02:04:35   7  ,g6
02:04:35   8  ,gatt
02:04:35   9  ,gattn
02:04:35  10  FROM svm6162
02:04:35  11  /

Table created.

Elapsed: 00:00:00.10
02:04:35 SQL> 
02:04:35 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.25
02:04:35 SQL> 
02:04:35 SQL> DROP   TABLE ejp_ms610 ;

Table dropped.

Elapsed: 00:00:00.06
02:04:35 SQL> CREATE TABLE ejp_ms610 COMPRESS AS
02:04:35   2  SELECT
02:04:35   3  ydate
02:04:35   4  ,trend ejp_trend
02:04:35   5  ,g6    ejp_g6
02:04:35   6  ,gatt  ejp_gatt
02:04:35   7  ,gattn ejp_gattn
02:04:35   8  FROM modsrc
02:04:35   9  /

Table created.

Elapsed: 00:00:00.07
02:04:36 SQL> 
02:04:36 SQL> ANALYZE TABLE ejp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
02:04:36 SQL> 
02:04:36 SQL> -- I need a copy of the attributes:
02:04:36 SQL> 
02:04:36 SQL> 
02:04:36 SQL> DROP   TABLE ejp_att;

Table dropped.

Elapsed: 00:00:00.07
02:04:36 SQL> CREATE TABLE ejp_att COMPRESS AS
02:04:36   2  SELECT
02:04:36   3  ydate
02:04:36   4  ,att00 ejp_att00
02:04:36   5  ,att01 ejp_att01
02:04:36   6  ,att02 ejp_att02
02:04:36   7  ,att03 ejp_att03
02:04:36   8  ,att04 ejp_att04
02:04:36   9  ,att05 ejp_att05
02:04:36  10  ,att06 ejp_att06
02:04:36  11  ,att07 ejp_att07
02:04:36  12  ,att08 ejp_att08
02:04:36  13  ,att09 ejp_att09
02:04:36  14  ,att10 ejp_att10
02:04:36  15  ,att11 ejp_att11
02:04:36  16  ,att12 ejp_att12
02:04:36  17  ,att13 ejp_att13
02:04:36  18  ,att14 ejp_att14
02:04:36  19  ,att15 ejp_att15
02:04:36  20  ,att16 ejp_att16
02:04:36  21  ,att17 ejp_att17
02:04:36  22  ,att18 ejp_att18
02:04:36  23  ,att19 ejp_att19
02:04:36  24  ,att20 ejp_att20
02:04:36  25  ,att21 ejp_att21
02:04:36  26  ,att22 ejp_att22
02:04:36  27  ,att23 ejp_att23
02:04:36  28  ,att24 ejp_att24
02:04:36  29  ,att25 ejp_att25
02:04:36  30  ,att26 ejp_att26
02:04:36  31  ,att27 ejp_att27
02:04:36  32  ,att28 ejp_att28
02:04:36  33  ,att29 ejp_att29
02:04:36  34  ,att30 ejp_att30
02:04:36  35  ,att31 ejp_att31
02:04:36  36  ,att32 ejp_att32
02:04:36  37  ,att33 ejp_att33
02:04:36  38  ,att34 ejp_att34
02:04:36  39  ,att35 ejp_att35
02:04:36  40  ,att36 ejp_att36
02:04:36  41  ,att37 ejp_att37
02:04:36  42  FROM svm6162
02:04:36  43  /

Table created.

Elapsed: 00:00:00.18
02:04:36 SQL> 
02:04:36 SQL> ANALYZE TABLE ejp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.40
02:04:36 SQL> 
02:04:36 SQL> -- rpt
02:04:36 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19255

Elapsed: 00:00:00.81
02:04:37 SQL> SELECT COUNT(*)FROM ejp_att;

  COUNT(*)
----------
     19255

Elapsed: 00:00:00.01
02:04:37 SQL> 
02:04:37 SQL> --
02:04:37 SQL> -- ajp610.sql
02:04:37 SQL> --
02:04:37 SQL> 
02:04:37 SQL> -- Creates views and tables for backtesting a forex SVM strategy
02:04:37 SQL> 
02:04:37 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.37
02:04:38 SQL> 
02:04:38 SQL> -- I created di5min here:
02:04:38 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
02:04:38 SQL> 
02:04:38 SQL> CREATE OR REPLACE VIEW svm6102 AS
02:04:38   2  SELECT
02:04:38   3  pair
02:04:38   4  ,ydate
02:04:38   5  ,prdate
02:04:38   6  ,rownum rnum -- acts as t in my time-series
02:04:38   7  ,clse
02:04:38   8  -- Derive a bunch of attributes from clse, the latest price:
02:04:38   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
02:04:38  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
02:04:38  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
02:04:38  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
02:04:38  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
02:04:38  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
02:04:38  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
02:04:38  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
02:04:38  17  --
02:04:38  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
02:04:38  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
02:04:38  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
02:04:38  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
02:04:38  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
02:04:38  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
02:04:38  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
02:04:38  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
02:04:38  26  --
02:04:38  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
02:04:38  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
02:04:38  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
02:04:38  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
02:04:38  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
02:04:38  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
02:04:38  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
02:04:38  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
02:04:38  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
02:04:38  36  FROM di5min WHERE pair LIKE'%ajp%'
02:04:38  37  AND ydate > sysdate - 95
02:04:38  38  ORDER BY ydate
02:04:38  39  /

View created.

Elapsed: 00:00:00.06
02:04:38 SQL> 
02:04:38 SQL> -- rpt
02:04:38 SQL> 
02:04:38 SQL> SELECT
02:04:38   2  pair
02:04:38   3  ,COUNT(pair)
02:04:38   4  ,MIN(clse),MAX(clse)
02:04:38   5  ,MIN(avg6),MAX(avg6)
02:04:38   6  ,MIN(ydate),MAX(ydate)
02:04:38   7  FROM svm6102
02:04:38   8  GROUP BY pair
02:04:38   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ajp_usd       19252  78.249976 83.6669853 78.5106193  83.546306 2010-09-30 02:05:01 2011-01-03 01:55:00

Elapsed: 00:00:00.78
02:04:38 SQL> 
02:04:38 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
02:04:38 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.19
02:04:39 SQL> CREATE TABLE svm6122 COMPRESS AS
02:04:39   2  SELECT
02:04:39   3  pair
02:04:39   4  ,ydate
02:04:39   5  ,prdate
02:04:39   6  ,clse
02:04:39   7  -- g6 is important. I want to predict g6:
02:04:39   8  ,ld6 - clse g6
02:04:39   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
02:04:39  10  -- I want more attributes from the ones I derived above:
02:04:39  11  -- clse relation to moving-min
02:04:39  12  ,clse-min4  cm4
02:04:39  13  ,clse-min6  cm6
02:04:39  14  ,clse-min8  cm8
02:04:39  15  ,clse-min10 cm10
02:04:39  16  ,clse-min12 cm12
02:04:39  17  ,clse-min14 cm14
02:04:39  18  ,clse-min16 cm16
02:04:39  19  ,clse-min18 cm18
02:04:39  20  -- clse relation to moving-avg
02:04:39  21  ,clse-avg4  ca4
02:04:39  22  ,clse-avg6  ca6
02:04:39  23  ,clse-avg8  ca8
02:04:39  24  ,clse-avg10 ca10
02:04:39  25  ,clse-avg12 ca12
02:04:39  26  ,clse-avg14 ca14
02:04:39  27  ,clse-avg16 ca16
02:04:39  28  ,clse-avg18 ca18
02:04:39  29  -- clse relation to moving-max
02:04:39  30  ,clse-max4  cx4
02:04:39  31  ,clse-max6  cx6
02:04:39  32  ,clse-max8  cx8
02:04:39  33  ,clse-max10 cx10
02:04:39  34  ,clse-max12 cx12
02:04:39  35  ,clse-max14 cx14
02:04:39  36  ,clse-max16 cx16
02:04:39  37  ,clse-max18 cx18
02:04:39  38  -- Derive more attributes.
02:04:39  39  -- I want to use CORR() here to help SVM see the shape of the series.
02:04:39  40  -- But COVAR_POP is more stable:
02:04:39  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
02:04:39  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
02:04:39  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
02:04:39  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
02:04:39  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
02:04:39  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
02:04:39  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
02:04:39  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
02:04:39  49  -- Derive date related attributes:
02:04:39  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
02:04:39  51  ,0+TO_CHAR(ydate,'D')d
02:04:39  52  ,0+TO_CHAR(ydate,'W')w
02:04:39  53  -- mpm stands for minutes-past-midnight:
02:04:39  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
02:04:39  55  -- mph stands for minutes-past-hour:
02:04:39  56  ,0+TO_CHAR(ydate,'MI')mph
02:04:39  57  FROM svm6102
02:04:39  58  ORDER BY ydate
02:04:39  59  /

Table created.

Elapsed: 00:00:01.99
02:04:41 SQL> 
02:04:41 SQL> -- rpt
02:04:41 SQL> 
02:04:41 SQL> SELECT
02:04:41   2  pair
02:04:41   3  ,COUNT(pair)
02:04:41   4  ,MIN(clse),MAX(clse)
02:04:41   5  ,MIN(ydate),MAX(ydate)
02:04:41   6  FROM svm6122
02:04:41   7  GROUP BY pair
02:04:41   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ajp_usd       19252  78.249976 83.6669853 2010-09-30 02:05:01 2011-01-03 01:55:00

Elapsed: 00:00:00.04
02:04:41 SQL> 
02:04:41 SQL> -- Prepare for derivation of NTILE based params:
02:04:41 SQL> 
02:04:41 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.20
02:04:41 SQL> CREATE TABLE svm6142 COMPRESS AS
02:04:41   2  SELECT
02:04:41   3  pair
02:04:41   4  ,ydate
02:04:41   5  ,prdate
02:04:41   6  ,clse
02:04:41   7  ,g6
02:04:41   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
02:04:41   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
02:04:41  10  ,CASE WHEN trend IS NULL THEN 1
02:04:41  11  	    WHEN trend =0      THEN 1
02:04:41  12  	    ELSE trend END trend
02:04:41  13  ,cm4
02:04:41  14  ,cm6
02:04:41  15  ,cm8
02:04:41  16  ,cm10
02:04:41  17  ,cm12
02:04:41  18  ,cm14
02:04:41  19  ,cm16
02:04:41  20  ,cm18
02:04:41  21  --
02:04:41  22  ,ca4
02:04:41  23  ,ca6
02:04:41  24  ,ca8
02:04:41  25  ,ca10
02:04:41  26  ,ca12
02:04:41  27  ,ca14
02:04:41  28  ,ca16
02:04:41  29  ,ca18
02:04:41  30  --
02:04:41  31  ,cx4
02:04:41  32  ,cx6
02:04:41  33  ,cx8
02:04:41  34  ,cx10
02:04:41  35  ,cx12
02:04:41  36  ,cx14
02:04:41  37  ,cx16
02:04:41  38  ,cx18
02:04:41  39  --
02:04:41  40  ,crr4
02:04:41  41  ,crr6
02:04:41  42  ,crr8
02:04:41  43  ,crr10
02:04:41  44  ,crr12
02:04:41  45  ,crr14
02:04:41  46  ,crr16
02:04:41  47  ,crr18
02:04:41  48  --
02:04:41  49  ,hh
02:04:41  50  ,d
02:04:41  51  ,w
02:04:41  52  ,mpm
02:04:41  53  ,mph
02:04:41  54  FROM svm6122
02:04:41  55  ORDER BY ydate
02:04:41  56  /

Table created.

Elapsed: 00:00:00.37
02:04:41 SQL> 
02:04:41 SQL> -- rpt
02:04:41 SQL> 
02:04:41 SQL> SELECT
02:04:41   2  pair
02:04:41   3  ,trend
02:04:41   4  ,gatt
02:04:41   5  ,COUNT(pair)
02:04:41   6  ,AVG(g6)
02:04:41   7  FROM svm6142
02:04:41   8  GROUP BY pair,trend,gatt
02:04:41   9  ORDER BY pair,trend,gatt
02:04:41  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ajp_usd 	-1 nup	      4063  -.2281315
ajp_usd 	-1 up	      5147 .222122776
ajp_usd 	-1		44
ajp_usd 	 1 nup	      5188 -.20045821
ajp_usd 	 1 up	      4782 .205530419
ajp_usd 	 1		28

6 rows selected.

Elapsed: 00:00:00.03
02:04:41 SQL> 
02:04:41 SQL> 
02:04:41 SQL> -- Derive NTILE based params:
02:04:41 SQL> 
02:04:41 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.18
02:04:41 SQL> CREATE TABLE svm6162 COMPRESS AS
02:04:41   2  SELECT
02:04:41   3  pair
02:04:41   4  ,ydate
02:04:41   5  ,prdate
02:04:41   6  ,clse
02:04:41   7  ,g6
02:04:41   8  ,gatt
02:04:41   9  ,gattn
02:04:41  10  ,trend
02:04:41  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
02:04:41  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
02:04:41  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
02:04:41  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
02:04:41  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
02:04:41  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
02:04:41  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
02:04:41  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
02:04:41  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
02:04:41  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
02:04:41  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
02:04:41  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
02:04:41  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
02:04:41  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
02:04:41  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
02:04:41  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
02:04:41  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
02:04:41  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
02:04:41  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
02:04:41  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
02:04:41  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
02:04:41  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
02:04:41  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
02:04:41  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
02:04:41  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
02:04:41  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
02:04:41  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
02:04:41  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
02:04:41  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
02:04:41  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
02:04:41  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
02:04:41  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
02:04:41  43  ,hh  att32
02:04:41  44  ,d   att33
02:04:41  45  ,w   att34
02:04:41  46  ,mpm att35
02:04:41  47  ,mph att36
02:04:41  48  ,trend att37
02:04:41  49  FROM svm6142
02:04:41  50  ORDER BY ydate
02:04:41  51  /

Table created.

Elapsed: 00:00:04.90
02:04:46 SQL> 
02:04:46 SQL> -- rpt
02:04:46 SQL> 
02:04:46 SQL> SELECT
02:04:46   2  pair
02:04:46   3  ,trend
02:04:46   4  ,gatt
02:04:46   5  ,COUNT(pair)
02:04:46   6  ,AVG(g6)
02:04:46   7  FROM svm6162
02:04:46   8  GROUP BY pair,trend,gatt
02:04:46   9  ORDER BY pair,trend,gatt
02:04:46  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ajp_usd 	-1 nup	      4063  -.2281315
ajp_usd 	-1 up	      5147 .222122776
ajp_usd 	-1		44
ajp_usd 	 1 nup	      5188 -.20045821
ajp_usd 	 1 up	      4782 .205530419
ajp_usd 	 1		28

6 rows selected.

Elapsed: 00:00:00.04
02:04:46 SQL> 
02:04:46 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.10
02:04:46 SQL> CREATE TABLE modsrc COMPRESS AS
02:04:46   2  SELECT
02:04:46   3  pair
02:04:46   4  ,ydate
02:04:46   5  ,prdate
02:04:46   6  ,trend
02:04:46   7  ,g6
02:04:46   8  ,gatt
02:04:46   9  ,gattn
02:04:46  10  FROM svm6162
02:04:46  11  /

Table created.

Elapsed: 00:00:00.08
02:04:47 SQL> 
02:04:47 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
02:04:47 SQL> 
02:04:47 SQL> DROP   TABLE ajp_ms610 ;

Table dropped.

Elapsed: 00:00:00.03
02:04:47 SQL> CREATE TABLE ajp_ms610 COMPRESS AS
02:04:47   2  SELECT
02:04:47   3  ydate
02:04:47   4  ,trend ajp_trend
02:04:47   5  ,g6    ajp_g6
02:04:47   6  ,gatt  ajp_gatt
02:04:47   7  ,gattn ajp_gattn
02:04:47   8  FROM modsrc
02:04:47   9  /

Table created.

Elapsed: 00:00:00.07
02:04:47 SQL> 
02:04:47 SQL> ANALYZE TABLE ajp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
02:04:47 SQL> 
02:04:47 SQL> -- I need a copy of the attributes:
02:04:47 SQL> 
02:04:47 SQL> 
02:04:47 SQL> DROP   TABLE ajp_att;

Table dropped.

Elapsed: 00:00:00.04
02:04:47 SQL> CREATE TABLE ajp_att COMPRESS AS
02:04:47   2  SELECT
02:04:47   3  ydate
02:04:47   4  ,att00 ajp_att00
02:04:47   5  ,att01 ajp_att01
02:04:47   6  ,att02 ajp_att02
02:04:47   7  ,att03 ajp_att03
02:04:47   8  ,att04 ajp_att04
02:04:47   9  ,att05 ajp_att05
02:04:47  10  ,att06 ajp_att06
02:04:47  11  ,att07 ajp_att07
02:04:47  12  ,att08 ajp_att08
02:04:47  13  ,att09 ajp_att09
02:04:47  14  ,att10 ajp_att10
02:04:47  15  ,att11 ajp_att11
02:04:47  16  ,att12 ajp_att12
02:04:47  17  ,att13 ajp_att13
02:04:47  18  ,att14 ajp_att14
02:04:47  19  ,att15 ajp_att15
02:04:47  20  ,att16 ajp_att16
02:04:47  21  ,att17 ajp_att17
02:04:47  22  ,att18 ajp_att18
02:04:47  23  ,att19 ajp_att19
02:04:47  24  ,att20 ajp_att20
02:04:47  25  ,att21 ajp_att21
02:04:47  26  ,att22 ajp_att22
02:04:47  27  ,att23 ajp_att23
02:04:47  28  ,att24 ajp_att24
02:04:47  29  ,att25 ajp_att25
02:04:47  30  ,att26 ajp_att26
02:04:47  31  ,att27 ajp_att27
02:04:47  32  ,att28 ajp_att28
02:04:47  33  ,att29 ajp_att29
02:04:47  34  ,att30 ajp_att30
02:04:47  35  ,att31 ajp_att31
02:04:47  36  ,att32 ajp_att32
02:04:47  37  ,att33 ajp_att33
02:04:47  38  ,att34 ajp_att34
02:04:47  39  ,att35 ajp_att35
02:04:47  40  ,att36 ajp_att36
02:04:47  41  ,att37 ajp_att37
02:04:47  42  FROM svm6162
02:04:47  43  /

Table created.

Elapsed: 00:00:00.18
02:04:47 SQL> 
02:04:47 SQL> ANALYZE TABLE ajp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.50
02:04:48 SQL> 
02:04:48 SQL> -- rpt
02:04:48 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19252

Elapsed: 00:00:00.77
02:04:48 SQL> SELECT COUNT(*)FROM ajp_att;

  COUNT(*)
----------
     19252

Elapsed: 00:00:00.00
02:04:48 SQL> 
02:04:48 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
