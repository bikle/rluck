
SQL*Plus: Release 11.2.0.1.0 Production on Sun Jan 2 22:19:00 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

22:19:00 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.01
22:19:00 SQL> 22:19:00 SQL> --
22:19:00 SQL> -- eur610.sql
22:19:00 SQL> --
22:19:00 SQL> 
22:19:00 SQL> -- Creates views and tables for backtesting a forex SVM strategy
22:19:00 SQL> 
22:19:00 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.01
22:19:00 SQL> 
22:19:00 SQL> -- I created di5min here:
22:19:00 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
22:19:00 SQL> 
22:19:00 SQL> CREATE OR REPLACE VIEW svm6102 AS
22:19:00   2  SELECT
22:19:00   3  pair
22:19:00   4  ,ydate
22:19:00   5  ,prdate
22:19:00   6  ,rownum rnum -- acts as t in my time-series
22:19:00   7  ,clse
22:19:00   8  -- Derive a bunch of attributes from clse, the latest price:
22:19:00   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
22:19:00  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
22:19:00  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
22:19:00  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
22:19:00  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
22:19:00  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
22:19:00  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
22:19:00  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
22:19:00  17  --
22:19:00  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
22:19:00  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
22:19:00  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
22:19:00  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
22:19:00  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
22:19:00  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
22:19:00  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
22:19:00  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
22:19:00  26  --
22:19:00  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
22:19:00  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
22:19:00  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
22:19:00  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
22:19:00  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
22:19:00  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
22:19:00  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
22:19:00  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
22:19:00  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
22:19:00  36  FROM di5min WHERE pair LIKE'%eur%'
22:19:00  37  AND ydate > sysdate - 95
22:19:00  38  ORDER BY ydate
22:19:00  39  /

View created.

Elapsed: 00:00:00.12
22:19:00 SQL> 
22:19:00 SQL> -- rpt
22:19:00 SQL> 
22:19:00 SQL> SELECT
22:19:00   2  pair
22:19:00   3  ,COUNT(pair)
22:19:00   4  ,MIN(clse),MAX(clse)
22:19:00   5  ,MIN(avg6),MAX(avg6)
22:19:00   6  ,MIN(ydate),MAX(ydate)
22:19:00   7  FROM svm6102
22:19:00   8  GROUP BY pair
22:19:00   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_usd       19259    1.29735	   1.4273 1.29875103 1.42436233 2010-09-29 22:20:01 2010-12-31 21:55:00

Elapsed: 00:00:00.93
22:19:01 SQL> 
22:19:01 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
22:19:01 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.14
22:19:01 SQL> CREATE TABLE svm6122 COMPRESS AS
22:19:01   2  SELECT
22:19:01   3  pair
22:19:01   4  ,ydate
22:19:01   5  ,prdate
22:19:01   6  ,clse
22:19:01   7  -- g6 is important. I want to predict g6:
22:19:01   8  ,ld6 - clse g6
22:19:01   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
22:19:01  10  -- I want more attributes from the ones I derived above:
22:19:01  11  -- clse relation to moving-min
22:19:01  12  ,clse-min4  cm4
22:19:01  13  ,clse-min6  cm6
22:19:01  14  ,clse-min8  cm8
22:19:01  15  ,clse-min10 cm10
22:19:01  16  ,clse-min12 cm12
22:19:01  17  ,clse-min14 cm14
22:19:01  18  ,clse-min16 cm16
22:19:01  19  ,clse-min18 cm18
22:19:01  20  -- clse relation to moving-avg
22:19:01  21  ,clse-avg4  ca4
22:19:01  22  ,clse-avg6  ca6
22:19:01  23  ,clse-avg8  ca8
22:19:01  24  ,clse-avg10 ca10
22:19:01  25  ,clse-avg12 ca12
22:19:01  26  ,clse-avg14 ca14
22:19:01  27  ,clse-avg16 ca16
22:19:01  28  ,clse-avg18 ca18
22:19:01  29  -- clse relation to moving-max
22:19:01  30  ,clse-max4  cx4
22:19:01  31  ,clse-max6  cx6
22:19:01  32  ,clse-max8  cx8
22:19:01  33  ,clse-max10 cx10
22:19:01  34  ,clse-max12 cx12
22:19:01  35  ,clse-max14 cx14
22:19:01  36  ,clse-max16 cx16
22:19:01  37  ,clse-max18 cx18
22:19:01  38  -- Derive more attributes.
22:19:01  39  -- I want to use CORR() here to help SVM see the shape of the series.
22:19:01  40  -- But COVAR_POP is more stable:
22:19:01  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
22:19:01  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
22:19:01  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
22:19:01  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
22:19:01  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
22:19:01  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
22:19:01  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
22:19:01  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
22:19:01  49  -- Derive date related attributes:
22:19:01  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:19:01  51  ,0+TO_CHAR(ydate,'D')d
22:19:01  52  ,0+TO_CHAR(ydate,'W')w
22:19:01  53  -- mpm stands for minutes-past-midnight:
22:19:01  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:19:01  55  -- mph stands for minutes-past-hour:
22:19:01  56  ,0+TO_CHAR(ydate,'MI')mph
22:19:01  57  FROM svm6102
22:19:01  58  ORDER BY ydate
22:19:01  59  /

Table created.

Elapsed: 00:00:02.39
22:19:03 SQL> 
22:19:03 SQL> -- rpt
22:19:03 SQL> 
22:19:03 SQL> SELECT
22:19:03   2  pair
22:19:03   3  ,COUNT(pair)
22:19:03   4  ,MIN(clse),MAX(clse)
22:19:03   5  ,MIN(ydate),MAX(ydate)
22:19:03   6  FROM svm6122
22:19:03   7  GROUP BY pair
22:19:03   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_usd       19259    1.29735	   1.4273 2010-09-29 22:20:01 2010-12-31 21:55:00

Elapsed: 00:00:00.04
22:19:03 SQL> 
22:19:03 SQL> -- Prepare for derivation of NTILE based params:
22:19:03 SQL> 
22:19:03 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.06
22:19:03 SQL> CREATE TABLE svm6142 COMPRESS AS
22:19:03   2  SELECT
22:19:03   3  pair
22:19:03   4  ,ydate
22:19:03   5  ,prdate
22:19:03   6  ,clse
22:19:03   7  ,g6
22:19:03   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
22:19:03   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
22:19:03  10  ,CASE WHEN trend IS NULL THEN 1
22:19:03  11  	    WHEN trend =0      THEN 1
22:19:03  12  	    ELSE trend END trend
22:19:03  13  ,cm4
22:19:03  14  ,cm6
22:19:03  15  ,cm8
22:19:03  16  ,cm10
22:19:03  17  ,cm12
22:19:03  18  ,cm14
22:19:03  19  ,cm16
22:19:03  20  ,cm18
22:19:03  21  --
22:19:03  22  ,ca4
22:19:03  23  ,ca6
22:19:03  24  ,ca8
22:19:03  25  ,ca10
22:19:03  26  ,ca12
22:19:03  27  ,ca14
22:19:03  28  ,ca16
22:19:03  29  ,ca18
22:19:03  30  --
22:19:03  31  ,cx4
22:19:03  32  ,cx6
22:19:03  33  ,cx8
22:19:03  34  ,cx10
22:19:03  35  ,cx12
22:19:03  36  ,cx14
22:19:03  37  ,cx16
22:19:03  38  ,cx18
22:19:03  39  --
22:19:03  40  ,crr4
22:19:03  41  ,crr6
22:19:03  42  ,crr8
22:19:03  43  ,crr10
22:19:03  44  ,crr12
22:19:03  45  ,crr14
22:19:03  46  ,crr16
22:19:03  47  ,crr18
22:19:03  48  --
22:19:03  49  ,hh
22:19:03  50  ,d
22:19:03  51  ,w
22:19:03  52  ,mpm
22:19:03  53  ,mph
22:19:03  54  FROM svm6122
22:19:03  55  ORDER BY ydate
22:19:03  56  /

Table created.

Elapsed: 00:00:00.72
22:19:04 SQL> 
22:19:04 SQL> -- rpt
22:19:04 SQL> 
22:19:04 SQL> SELECT
22:19:04   2  pair
22:19:04   3  ,trend
22:19:04   4  ,gatt
22:19:04   5  ,COUNT(pair)
22:19:04   6  ,AVG(g6)
22:19:04   7  FROM svm6142
22:19:04   8  GROUP BY pair,trend,gatt
22:19:04   9  ORDER BY pair,trend,gatt
22:19:04  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      5944 -.00312274
eur_usd 	-1 up	      3585 .004484529
eur_usd 	-1		46
eur_usd 	 1 nup	      5849 -.00316298
eur_usd 	 1 up	      3809 .005051542
eur_usd 	 1		26

6 rows selected.

Elapsed: 00:00:00.04
22:19:04 SQL> 
22:19:04 SQL> 
22:19:04 SQL> -- Derive NTILE based params:
22:19:04 SQL> 
22:19:04 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.07
22:19:04 SQL> CREATE TABLE svm6162 COMPRESS AS
22:19:04   2  SELECT
22:19:04   3  pair
22:19:04   4  ,ydate
22:19:04   5  ,prdate
22:19:04   6  ,clse
22:19:04   7  ,g6
22:19:04   8  ,gatt
22:19:04   9  ,gattn
22:19:04  10  ,trend
22:19:04  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
22:19:04  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
22:19:04  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
22:19:04  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
22:19:04  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
22:19:04  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
22:19:04  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
22:19:04  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
22:19:04  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
22:19:04  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
22:19:04  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
22:19:04  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
22:19:04  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
22:19:04  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
22:19:04  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
22:19:04  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
22:19:04  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
22:19:04  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
22:19:04  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
22:19:04  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
22:19:04  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
22:19:04  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
22:19:04  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
22:19:04  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
22:19:04  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
22:19:04  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
22:19:04  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
22:19:04  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
22:19:04  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
22:19:04  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
22:19:04  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
22:19:04  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
22:19:04  43  ,hh  att32
22:19:04  44  ,d   att33
22:19:04  45  ,w   att34
22:19:04  46  ,mpm att35
22:19:04  47  ,mph att36
22:19:04  48  ,trend att37
22:19:04  49  FROM svm6142
22:19:04  50  ORDER BY ydate
22:19:04  51  /

Table created.

Elapsed: 00:00:04.81
22:19:09 SQL> 
22:19:09 SQL> -- rpt
22:19:09 SQL> 
22:19:09 SQL> SELECT
22:19:09   2  pair
22:19:09   3  ,trend
22:19:09   4  ,gatt
22:19:09   5  ,COUNT(pair)
22:19:09   6  ,AVG(g6)
22:19:09   7  FROM svm6162
22:19:09   8  GROUP BY pair,trend,gatt
22:19:09   9  ORDER BY pair,trend,gatt
22:19:09  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      5944 -.00312274
eur_usd 	-1 up	      3585 .004484529
eur_usd 	-1		46
eur_usd 	 1 nup	      5849 -.00316298
eur_usd 	 1 up	      3809 .005051542
eur_usd 	 1		26

6 rows selected.

Elapsed: 00:00:00.03
22:19:09 SQL> 
22:19:09 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.05
22:19:09 SQL> CREATE TABLE modsrc COMPRESS AS
22:19:09   2  SELECT
22:19:09   3  pair
22:19:09   4  ,ydate
22:19:09   5  ,prdate
22:19:09   6  ,trend
22:19:09   7  ,g6
22:19:09   8  ,gatt
22:19:09   9  ,gattn
22:19:09  10  FROM svm6162
22:19:09  11  /

Table created.

Elapsed: 00:00:00.08
22:19:09 SQL> 
22:19:09 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
22:19:09 SQL> 
22:19:09 SQL> DROP   TABLE eur_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
22:19:10 SQL> CREATE TABLE eur_ms610 COMPRESS AS
22:19:10   2  SELECT
22:19:10   3  ydate
22:19:10   4  ,trend eur_trend
22:19:10   5  ,g6    eur_g6
22:19:10   6  ,gatt  eur_gatt
22:19:10   7  ,gattn eur_gattn
22:19:10   8  FROM modsrc
22:19:10   9  /

Table created.

Elapsed: 00:00:00.11
22:19:10 SQL> 
22:19:10 SQL> ANALYZE TABLE eur_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
22:19:10 SQL> 
22:19:10 SQL> -- I need a copy of the attributes:
22:19:10 SQL> 
22:19:10 SQL> 
22:19:10 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.05
22:19:10 SQL> CREATE TABLE eur_att COMPRESS AS
22:19:10   2  SELECT
22:19:10   3  ydate
22:19:10   4  ,att00 eur_att00
22:19:10   5  ,att01 eur_att01
22:19:10   6  ,att02 eur_att02
22:19:10   7  ,att03 eur_att03
22:19:10   8  ,att04 eur_att04
22:19:10   9  ,att05 eur_att05
22:19:10  10  ,att06 eur_att06
22:19:10  11  ,att07 eur_att07
22:19:10  12  ,att08 eur_att08
22:19:10  13  ,att09 eur_att09
22:19:10  14  ,att10 eur_att10
22:19:10  15  ,att11 eur_att11
22:19:10  16  ,att12 eur_att12
22:19:10  17  ,att13 eur_att13
22:19:10  18  ,att14 eur_att14
22:19:10  19  ,att15 eur_att15
22:19:10  20  ,att16 eur_att16
22:19:10  21  ,att17 eur_att17
22:19:10  22  ,att18 eur_att18
22:19:10  23  ,att19 eur_att19
22:19:10  24  ,att20 eur_att20
22:19:10  25  ,att21 eur_att21
22:19:10  26  ,att22 eur_att22
22:19:10  27  ,att23 eur_att23
22:19:10  28  ,att24 eur_att24
22:19:10  29  ,att25 eur_att25
22:19:10  30  ,att26 eur_att26
22:19:10  31  ,att27 eur_att27
22:19:10  32  ,att28 eur_att28
22:19:10  33  ,att29 eur_att29
22:19:10  34  ,att30 eur_att30
22:19:10  35  ,att31 eur_att31
22:19:10  36  ,att32 eur_att32
22:19:10  37  ,att33 eur_att33
22:19:10  38  ,att34 eur_att34
22:19:10  39  ,att35 eur_att35
22:19:10  40  ,att36 eur_att36
22:19:10  41  ,att37 eur_att37
22:19:10  42  FROM svm6162
22:19:10  43  /

Table created.

Elapsed: 00:00:00.21
22:19:10 SQL> 
22:19:10 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.44
22:19:11 SQL> 
22:19:11 SQL> -- rpt
22:19:11 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19259

Elapsed: 00:00:00.87
22:19:11 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     19259

Elapsed: 00:00:00.01
22:19:11 SQL> 
22:19:11 SQL> --
22:19:11 SQL> -- aud610.sql
22:19:11 SQL> --
22:19:11 SQL> 
22:19:11 SQL> -- Creates views and tables for backtesting a forex SVM strategy
22:19:11 SQL> 
22:19:11 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.60
22:19:12 SQL> 
22:19:12 SQL> -- I created di5min here:
22:19:12 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
22:19:12 SQL> 
22:19:12 SQL> CREATE OR REPLACE VIEW svm6102 AS
22:19:12   2  SELECT
22:19:12   3  pair
22:19:12   4  ,ydate
22:19:12   5  ,prdate
22:19:12   6  ,rownum rnum -- acts as t in my time-series
22:19:12   7  ,clse
22:19:12   8  -- Derive a bunch of attributes from clse, the latest price:
22:19:12   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
22:19:12  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
22:19:12  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
22:19:12  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
22:19:12  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
22:19:12  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
22:19:12  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
22:19:12  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
22:19:12  17  --
22:19:12  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
22:19:12  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
22:19:12  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
22:19:12  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
22:19:12  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
22:19:12  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
22:19:12  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
22:19:12  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
22:19:12  26  --
22:19:12  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
22:19:12  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
22:19:12  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
22:19:12  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
22:19:12  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
22:19:12  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
22:19:12  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
22:19:12  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
22:19:12  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
22:19:12  36  FROM di5min WHERE pair LIKE'%aud%'
22:19:12  37  AND ydate > sysdate - 95
22:19:12  38  ORDER BY ydate
22:19:12  39  /

View created.

Elapsed: 00:00:00.05
22:19:12 SQL> 
22:19:12 SQL> -- rpt
22:19:12 SQL> 
22:19:12 SQL> SELECT
22:19:12   2  pair
22:19:12   3  ,COUNT(pair)
22:19:12   4  ,MIN(clse),MAX(clse)
22:19:12   5  ,MIN(avg6),MAX(avg6)
22:19:12   6  ,MIN(ydate),MAX(ydate)
22:19:12   7  FROM svm6102
22:19:12   8  GROUP BY pair
22:19:12   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
aud_usd       19256	.95405	  1.02495 .957141438 1.02284247 2010-09-29 22:20:01 2010-12-31 21:55:00

Elapsed: 00:00:00.86
22:19:13 SQL> 
22:19:13 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
22:19:13 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.17
22:19:13 SQL> CREATE TABLE svm6122 COMPRESS AS
22:19:13   2  SELECT
22:19:13   3  pair
22:19:13   4  ,ydate
22:19:13   5  ,prdate
22:19:13   6  ,clse
22:19:13   7  -- g6 is important. I want to predict g6:
22:19:13   8  ,ld6 - clse g6
22:19:13   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
22:19:13  10  -- I want more attributes from the ones I derived above:
22:19:13  11  -- clse relation to moving-min
22:19:13  12  ,clse-min4  cm4
22:19:13  13  ,clse-min6  cm6
22:19:13  14  ,clse-min8  cm8
22:19:13  15  ,clse-min10 cm10
22:19:13  16  ,clse-min12 cm12
22:19:13  17  ,clse-min14 cm14
22:19:13  18  ,clse-min16 cm16
22:19:13  19  ,clse-min18 cm18
22:19:13  20  -- clse relation to moving-avg
22:19:13  21  ,clse-avg4  ca4
22:19:13  22  ,clse-avg6  ca6
22:19:13  23  ,clse-avg8  ca8
22:19:13  24  ,clse-avg10 ca10
22:19:13  25  ,clse-avg12 ca12
22:19:13  26  ,clse-avg14 ca14
22:19:13  27  ,clse-avg16 ca16
22:19:13  28  ,clse-avg18 ca18
22:19:13  29  -- clse relation to moving-max
22:19:13  30  ,clse-max4  cx4
22:19:13  31  ,clse-max6  cx6
22:19:13  32  ,clse-max8  cx8
22:19:13  33  ,clse-max10 cx10
22:19:13  34  ,clse-max12 cx12
22:19:13  35  ,clse-max14 cx14
22:19:13  36  ,clse-max16 cx16
22:19:13  37  ,clse-max18 cx18
22:19:13  38  -- Derive more attributes.
22:19:13  39  -- I want to use CORR() here to help SVM see the shape of the series.
22:19:13  40  -- But COVAR_POP is more stable:
22:19:13  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
22:19:13  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
22:19:13  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
22:19:13  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
22:19:13  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
22:19:13  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
22:19:13  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
22:19:13  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
22:19:13  49  -- Derive date related attributes:
22:19:13  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:19:13  51  ,0+TO_CHAR(ydate,'D')d
22:19:13  52  ,0+TO_CHAR(ydate,'W')w
22:19:13  53  -- mpm stands for minutes-past-midnight:
22:19:13  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:19:13  55  -- mph stands for minutes-past-hour:
22:19:13  56  ,0+TO_CHAR(ydate,'MI')mph
22:19:13  57  FROM svm6102
22:19:13  58  ORDER BY ydate
22:19:13  59  /

Table created.

Elapsed: 00:00:02.05
22:19:15 SQL> 
22:19:15 SQL> -- rpt
22:19:15 SQL> 
22:19:15 SQL> SELECT
22:19:15   2  pair
22:19:15   3  ,COUNT(pair)
22:19:15   4  ,MIN(clse),MAX(clse)
22:19:15   5  ,MIN(ydate),MAX(ydate)
22:19:15   6  FROM svm6122
22:19:15   7  GROUP BY pair
22:19:15   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
aud_usd       19256	.95405	  1.02495 2010-09-29 22:20:01 2010-12-31 21:55:00

Elapsed: 00:00:00.04
22:19:15 SQL> 
22:19:15 SQL> -- Prepare for derivation of NTILE based params:
22:19:15 SQL> 
22:19:15 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.22
22:19:15 SQL> CREATE TABLE svm6142 COMPRESS AS
22:19:15   2  SELECT
22:19:15   3  pair
22:19:15   4  ,ydate
22:19:15   5  ,prdate
22:19:15   6  ,clse
22:19:15   7  ,g6
22:19:15   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
22:19:15   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
22:19:15  10  ,CASE WHEN trend IS NULL THEN 1
22:19:15  11  	    WHEN trend =0      THEN 1
22:19:15  12  	    ELSE trend END trend
22:19:15  13  ,cm4
22:19:15  14  ,cm6
22:19:15  15  ,cm8
22:19:15  16  ,cm10
22:19:15  17  ,cm12
22:19:15  18  ,cm14
22:19:15  19  ,cm16
22:19:15  20  ,cm18
22:19:15  21  --
22:19:15  22  ,ca4
22:19:15  23  ,ca6
22:19:15  24  ,ca8
22:19:15  25  ,ca10
22:19:15  26  ,ca12
22:19:15  27  ,ca14
22:19:15  28  ,ca16
22:19:15  29  ,ca18
22:19:15  30  --
22:19:15  31  ,cx4
22:19:15  32  ,cx6
22:19:15  33  ,cx8
22:19:15  34  ,cx10
22:19:15  35  ,cx12
22:19:15  36  ,cx14
22:19:15  37  ,cx16
22:19:15  38  ,cx18
22:19:15  39  --
22:19:15  40  ,crr4
22:19:15  41  ,crr6
22:19:15  42  ,crr8
22:19:15  43  ,crr10
22:19:15  44  ,crr12
22:19:15  45  ,crr14
22:19:15  46  ,crr16
22:19:15  47  ,crr18
22:19:15  48  --
22:19:15  49  ,hh
22:19:15  50  ,d
22:19:15  51  ,w
22:19:15  52  ,mpm
22:19:15  53  ,mph
22:19:15  54  FROM svm6122
22:19:15  55  ORDER BY ydate
22:19:15  56  /

Table created.

Elapsed: 00:00:00.37
22:19:16 SQL> 
22:19:16 SQL> -- rpt
22:19:16 SQL> 
22:19:16 SQL> SELECT
22:19:16   2  pair
22:19:16   3  ,trend
22:19:16   4  ,gatt
22:19:16   5  ,COUNT(pair)
22:19:16   6  ,AVG(g6)
22:19:16   7  FROM svm6142
22:19:16   8  GROUP BY pair,trend,gatt
22:19:16   9  ORDER BY pair,trend,gatt
22:19:16  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5056  -.0021716
aud_usd 	-1 up	      3784 .003737094
aud_usd 	 1 nup	      6673 -.00211016
aud_usd 	 1 up	      3671 .004039996
aud_usd 	 1		72

Elapsed: 00:00:00.04
22:19:16 SQL> 
22:19:16 SQL> 
22:19:16 SQL> -- Derive NTILE based params:
22:19:16 SQL> 
22:19:16 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.13
22:19:16 SQL> CREATE TABLE svm6162 COMPRESS AS
22:19:16   2  SELECT
22:19:16   3  pair
22:19:16   4  ,ydate
22:19:16   5  ,prdate
22:19:16   6  ,clse
22:19:16   7  ,g6
22:19:16   8  ,gatt
22:19:16   9  ,gattn
22:19:16  10  ,trend
22:19:16  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
22:19:16  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
22:19:16  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
22:19:16  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
22:19:16  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
22:19:16  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
22:19:16  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
22:19:16  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
22:19:16  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
22:19:16  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
22:19:16  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
22:19:16  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
22:19:16  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
22:19:16  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
22:19:16  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
22:19:16  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
22:19:16  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
22:19:16  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
22:19:16  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
22:19:16  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
22:19:16  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
22:19:16  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
22:19:16  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
22:19:16  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
22:19:16  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
22:19:16  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
22:19:16  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
22:19:16  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
22:19:16  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
22:19:16  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
22:19:16  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
22:19:16  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
22:19:16  43  ,hh  att32
22:19:16  44  ,d   att33
22:19:16  45  ,w   att34
22:19:16  46  ,mpm att35
22:19:16  47  ,mph att36
22:19:16  48  ,trend att37
22:19:16  49  FROM svm6142
22:19:16  50  ORDER BY ydate
22:19:16  51  /

Table created.

Elapsed: 00:00:04.64
22:19:21 SQL> 
22:19:21 SQL> -- rpt
22:19:21 SQL> 
22:19:21 SQL> SELECT
22:19:21   2  pair
22:19:21   3  ,trend
22:19:21   4  ,gatt
22:19:21   5  ,COUNT(pair)
22:19:21   6  ,AVG(g6)
22:19:21   7  FROM svm6162
22:19:21   8  GROUP BY pair,trend,gatt
22:19:21   9  ORDER BY pair,trend,gatt
22:19:21  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5056  -.0021716
aud_usd 	-1 up	      3784 .003737094
aud_usd 	 1 nup	      6673 -.00211016
aud_usd 	 1 up	      3671 .004039996
aud_usd 	 1		72

Elapsed: 00:00:00.04
22:19:21 SQL> 
22:19:21 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.18
22:19:21 SQL> CREATE TABLE modsrc COMPRESS AS
22:19:21   2  SELECT
22:19:21   3  pair
22:19:21   4  ,ydate
22:19:21   5  ,prdate
22:19:21   6  ,trend
22:19:21   7  ,g6
22:19:21   8  ,gatt
22:19:21   9  ,gattn
22:19:21  10  FROM svm6162
22:19:21  11  /

Table created.

Elapsed: 00:00:00.09
22:19:21 SQL> 
22:19:21 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.26
22:19:21 SQL> 
22:19:21 SQL> DROP   TABLE aud_ms610 ;

Table dropped.

Elapsed: 00:00:00.09
22:19:21 SQL> CREATE TABLE aud_ms610 COMPRESS AS
22:19:21   2  SELECT
22:19:21   3  ydate
22:19:21   4  ,trend aud_trend
22:19:21   5  ,g6    aud_g6
22:19:21   6  ,gatt  aud_gatt
22:19:21   7  ,gattn aud_gattn
22:19:21   8  FROM modsrc
22:19:21   9  /

Table created.

Elapsed: 00:00:00.06
22:19:21 SQL> 
22:19:21 SQL> ANALYZE TABLE aud_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.14
22:19:21 SQL> 
22:19:21 SQL> -- I need a copy of the attributes:
22:19:21 SQL> 
22:19:21 SQL> 
22:19:21 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.07
22:19:22 SQL> CREATE TABLE aud_att COMPRESS AS
22:19:22   2  SELECT
22:19:22   3  ydate
22:19:22   4  ,att00 aud_att00
22:19:22   5  ,att01 aud_att01
22:19:22   6  ,att02 aud_att02
22:19:22   7  ,att03 aud_att03
22:19:22   8  ,att04 aud_att04
22:19:22   9  ,att05 aud_att05
22:19:22  10  ,att06 aud_att06
22:19:22  11  ,att07 aud_att07
22:19:22  12  ,att08 aud_att08
22:19:22  13  ,att09 aud_att09
22:19:22  14  ,att10 aud_att10
22:19:22  15  ,att11 aud_att11
22:19:22  16  ,att12 aud_att12
22:19:22  17  ,att13 aud_att13
22:19:22  18  ,att14 aud_att14
22:19:22  19  ,att15 aud_att15
22:19:22  20  ,att16 aud_att16
22:19:22  21  ,att17 aud_att17
22:19:22  22  ,att18 aud_att18
22:19:22  23  ,att19 aud_att19
22:19:22  24  ,att20 aud_att20
22:19:22  25  ,att21 aud_att21
22:19:22  26  ,att22 aud_att22
22:19:22  27  ,att23 aud_att23
22:19:22  28  ,att24 aud_att24
22:19:22  29  ,att25 aud_att25
22:19:22  30  ,att26 aud_att26
22:19:22  31  ,att27 aud_att27
22:19:22  32  ,att28 aud_att28
22:19:22  33  ,att29 aud_att29
22:19:22  34  ,att30 aud_att30
22:19:22  35  ,att31 aud_att31
22:19:22  36  ,att32 aud_att32
22:19:22  37  ,att33 aud_att33
22:19:22  38  ,att34 aud_att34
22:19:22  39  ,att35 aud_att35
22:19:22  40  ,att36 aud_att36
22:19:22  41  ,att37 aud_att37
22:19:22  42  FROM svm6162
22:19:22  43  /

Table created.

Elapsed: 00:00:00.18
22:19:22 SQL> 
22:19:22 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.42
22:19:22 SQL> 
22:19:22 SQL> -- rpt
22:19:22 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19256

Elapsed: 00:00:00.87
22:19:23 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     19256

Elapsed: 00:00:00.01
22:19:23 SQL> 
22:19:23 SQL> --
22:19:23 SQL> -- gbp610.sql
22:19:23 SQL> --
22:19:23 SQL> 
22:19:23 SQL> -- Creates views and tables for backtesting a forex SVM strategy
22:19:23 SQL> 
22:19:23 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.43
22:19:23 SQL> 
22:19:23 SQL> -- I created di5min here:
22:19:23 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
22:19:23 SQL> 
22:19:23 SQL> CREATE OR REPLACE VIEW svm6102 AS
22:19:23   2  SELECT
22:19:23   3  pair
22:19:23   4  ,ydate
22:19:23   5  ,prdate
22:19:23   6  ,rownum rnum -- acts as t in my time-series
22:19:23   7  ,clse
22:19:23   8  -- Derive a bunch of attributes from clse, the latest price:
22:19:23   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
22:19:23  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
22:19:23  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
22:19:23  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
22:19:23  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
22:19:23  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
22:19:23  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
22:19:23  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
22:19:23  17  --
22:19:23  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
22:19:23  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
22:19:23  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
22:19:23  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
22:19:23  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
22:19:23  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
22:19:23  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
22:19:23  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
22:19:23  26  --
22:19:23  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
22:19:23  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
22:19:23  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
22:19:23  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
22:19:23  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
22:19:23  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
22:19:23  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
22:19:23  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
22:19:23  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
22:19:23  36  FROM di5min WHERE pair LIKE'%gbp%'
22:19:23  37  AND ydate > sysdate - 95
22:19:23  38  ORDER BY ydate
22:19:23  39  /

View created.

Elapsed: 00:00:00.04
22:19:23 SQL> 
22:19:23 SQL> -- rpt
22:19:23 SQL> 
22:19:23 SQL> SELECT
22:19:23   2  pair
22:19:23   3  ,COUNT(pair)
22:19:23   4  ,MIN(clse),MAX(clse)
22:19:23   5  ,MIN(avg6),MAX(avg6)
22:19:23   6  ,MIN(ydate),MAX(ydate)
22:19:23   7  FROM svm6102
22:19:23   8  GROUP BY pair
22:19:23   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
gbp_usd       19258   1.535325	   1.6295 1.53696747 1.62716986 2010-09-29 22:20:01 2010-12-31 21:55:00

Elapsed: 00:00:00.84
22:19:24 SQL> 
22:19:24 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
22:19:24 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.23
22:19:25 SQL> CREATE TABLE svm6122 COMPRESS AS
22:19:25   2  SELECT
22:19:25   3  pair
22:19:25   4  ,ydate
22:19:25   5  ,prdate
22:19:25   6  ,clse
22:19:25   7  -- g6 is important. I want to predict g6:
22:19:25   8  ,ld6 - clse g6
22:19:25   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
22:19:25  10  -- I want more attributes from the ones I derived above:
22:19:25  11  -- clse relation to moving-min
22:19:25  12  ,clse-min4  cm4
22:19:25  13  ,clse-min6  cm6
22:19:25  14  ,clse-min8  cm8
22:19:25  15  ,clse-min10 cm10
22:19:25  16  ,clse-min12 cm12
22:19:25  17  ,clse-min14 cm14
22:19:25  18  ,clse-min16 cm16
22:19:25  19  ,clse-min18 cm18
22:19:25  20  -- clse relation to moving-avg
22:19:25  21  ,clse-avg4  ca4
22:19:25  22  ,clse-avg6  ca6
22:19:25  23  ,clse-avg8  ca8
22:19:25  24  ,clse-avg10 ca10
22:19:25  25  ,clse-avg12 ca12
22:19:25  26  ,clse-avg14 ca14
22:19:25  27  ,clse-avg16 ca16
22:19:25  28  ,clse-avg18 ca18
22:19:25  29  -- clse relation to moving-max
22:19:25  30  ,clse-max4  cx4
22:19:25  31  ,clse-max6  cx6
22:19:25  32  ,clse-max8  cx8
22:19:25  33  ,clse-max10 cx10
22:19:25  34  ,clse-max12 cx12
22:19:25  35  ,clse-max14 cx14
22:19:25  36  ,clse-max16 cx16
22:19:25  37  ,clse-max18 cx18
22:19:25  38  -- Derive more attributes.
22:19:25  39  -- I want to use CORR() here to help SVM see the shape of the series.
22:19:25  40  -- But COVAR_POP is more stable:
22:19:25  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
22:19:25  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
22:19:25  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
22:19:25  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
22:19:25  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
22:19:25  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
22:19:25  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
22:19:25  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
22:19:25  49  -- Derive date related attributes:
22:19:25  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:19:25  51  ,0+TO_CHAR(ydate,'D')d
22:19:25  52  ,0+TO_CHAR(ydate,'W')w
22:19:25  53  -- mpm stands for minutes-past-midnight:
22:19:25  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:19:25  55  -- mph stands for minutes-past-hour:
22:19:25  56  ,0+TO_CHAR(ydate,'MI')mph
22:19:25  57  FROM svm6102
22:19:25  58  ORDER BY ydate
22:19:25  59  /

Table created.

Elapsed: 00:00:02.03
22:19:27 SQL> 
22:19:27 SQL> -- rpt
22:19:27 SQL> 
22:19:27 SQL> SELECT
22:19:27   2  pair
22:19:27   3  ,COUNT(pair)
22:19:27   4  ,MIN(clse),MAX(clse)
22:19:27   5  ,MIN(ydate),MAX(ydate)
22:19:27   6  FROM svm6122
22:19:27   7  GROUP BY pair
22:19:27   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
gbp_usd       19258   1.535325	   1.6295 2010-09-29 22:20:01 2010-12-31 21:55:00

Elapsed: 00:00:00.04
22:19:27 SQL> 
22:19:27 SQL> -- Prepare for derivation of NTILE based params:
22:19:27 SQL> 
22:19:27 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.17
22:19:27 SQL> CREATE TABLE svm6142 COMPRESS AS
22:19:27   2  SELECT
22:19:27   3  pair
22:19:27   4  ,ydate
22:19:27   5  ,prdate
22:19:27   6  ,clse
22:19:27   7  ,g6
22:19:27   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
22:19:27   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
22:19:27  10  ,CASE WHEN trend IS NULL THEN 1
22:19:27  11  	    WHEN trend =0      THEN 1
22:19:27  12  	    ELSE trend END trend
22:19:27  13  ,cm4
22:19:27  14  ,cm6
22:19:27  15  ,cm8
22:19:27  16  ,cm10
22:19:27  17  ,cm12
22:19:27  18  ,cm14
22:19:27  19  ,cm16
22:19:27  20  ,cm18
22:19:27  21  --
22:19:27  22  ,ca4
22:19:27  23  ,ca6
22:19:27  24  ,ca8
22:19:27  25  ,ca10
22:19:27  26  ,ca12
22:19:27  27  ,ca14
22:19:27  28  ,ca16
22:19:27  29  ,ca18
22:19:27  30  --
22:19:27  31  ,cx4
22:19:27  32  ,cx6
22:19:27  33  ,cx8
22:19:27  34  ,cx10
22:19:27  35  ,cx12
22:19:27  36  ,cx14
22:19:27  37  ,cx16
22:19:27  38  ,cx18
22:19:27  39  --
22:19:27  40  ,crr4
22:19:27  41  ,crr6
22:19:27  42  ,crr8
22:19:27  43  ,crr10
22:19:27  44  ,crr12
22:19:27  45  ,crr14
22:19:27  46  ,crr16
22:19:27  47  ,crr18
22:19:27  48  --
22:19:27  49  ,hh
22:19:27  50  ,d
22:19:27  51  ,w
22:19:27  52  ,mpm
22:19:27  53  ,mph
22:19:27  54  FROM svm6122
22:19:27  55  ORDER BY ydate
22:19:27  56  /

Table created.

Elapsed: 00:00:00.36
22:19:27 SQL> 
22:19:27 SQL> -- rpt
22:19:27 SQL> 
22:19:27 SQL> SELECT
22:19:27   2  pair
22:19:27   3  ,trend
22:19:27   4  ,gatt
22:19:27   5  ,COUNT(pair)
22:19:27   6  ,AVG(g6)
22:19:27   7  FROM svm6142
22:19:27   8  GROUP BY pair,trend,gatt
22:19:27   9  ORDER BY pair,trend,gatt
22:19:27  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6108 -.00268732
gbp_usd 	-1 up	      3473 .004327807
gbp_usd 	-1		 5
gbp_usd 	 1 nup	      6053 -.00268131
gbp_usd 	 1 up	      3552 .004511071
gbp_usd 	 1		67

6 rows selected.

Elapsed: 00:00:00.04
22:19:27 SQL> 
22:19:27 SQL> 
22:19:27 SQL> -- Derive NTILE based params:
22:19:27 SQL> 
22:19:27 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.11
22:19:27 SQL> CREATE TABLE svm6162 COMPRESS AS
22:19:27   2  SELECT
22:19:27   3  pair
22:19:27   4  ,ydate
22:19:27   5  ,prdate
22:19:27   6  ,clse
22:19:27   7  ,g6
22:19:27   8  ,gatt
22:19:27   9  ,gattn
22:19:27  10  ,trend
22:19:27  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
22:19:27  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
22:19:27  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
22:19:27  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
22:19:27  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
22:19:27  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
22:19:27  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
22:19:27  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
22:19:27  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
22:19:27  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
22:19:27  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
22:19:27  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
22:19:27  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
22:19:27  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
22:19:27  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
22:19:27  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
22:19:27  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
22:19:27  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
22:19:27  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
22:19:27  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
22:19:27  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
22:19:27  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
22:19:27  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
22:19:27  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
22:19:27  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
22:19:27  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
22:19:27  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
22:19:27  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
22:19:27  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
22:19:27  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
22:19:27  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
22:19:27  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
22:19:27  43  ,hh  att32
22:19:27  44  ,d   att33
22:19:27  45  ,w   att34
22:19:27  46  ,mpm att35
22:19:27  47  ,mph att36
22:19:27  48  ,trend att37
22:19:27  49  FROM svm6142
22:19:27  50  ORDER BY ydate
22:19:27  51  /

Table created.

Elapsed: 00:00:04.68
22:19:32 SQL> 
22:19:32 SQL> -- rpt
22:19:32 SQL> 
22:19:32 SQL> SELECT
22:19:32   2  pair
22:19:32   3  ,trend
22:19:32   4  ,gatt
22:19:32   5  ,COUNT(pair)
22:19:32   6  ,AVG(g6)
22:19:32   7  FROM svm6162
22:19:32   8  GROUP BY pair,trend,gatt
22:19:32   9  ORDER BY pair,trend,gatt
22:19:32  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6108 -.00268732
gbp_usd 	-1 up	      3473 .004327807
gbp_usd 	-1		 5
gbp_usd 	 1 nup	      6053 -.00268131
gbp_usd 	 1 up	      3552 .004511071
gbp_usd 	 1		67

6 rows selected.

Elapsed: 00:00:00.03
22:19:32 SQL> 
22:19:32 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.10
22:19:32 SQL> CREATE TABLE modsrc COMPRESS AS
22:19:32   2  SELECT
22:19:32   3  pair
22:19:32   4  ,ydate
22:19:32   5  ,prdate
22:19:32   6  ,trend
22:19:32   7  ,g6
22:19:32   8  ,gatt
22:19:32   9  ,gattn
22:19:32  10  FROM svm6162
22:19:32  11  /

Table created.

Elapsed: 00:00:00.12
22:19:32 SQL> 
22:19:32 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
22:19:32 SQL> 
22:19:32 SQL> DROP   TABLE gbp_ms610 ;

Table dropped.

Elapsed: 00:00:00.07
22:19:33 SQL> CREATE TABLE gbp_ms610 COMPRESS AS
22:19:33   2  SELECT
22:19:33   3  ydate
22:19:33   4  ,trend gbp_trend
22:19:33   5  ,g6    gbp_g6
22:19:33   6  ,gatt  gbp_gatt
22:19:33   7  ,gattn gbp_gattn
22:19:33   8  FROM modsrc
22:19:33   9  /

Table created.

Elapsed: 00:00:00.06
22:19:33 SQL> 
22:19:33 SQL> ANALYZE TABLE gbp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
22:19:33 SQL> 
22:19:33 SQL> -- I need a copy of the attributes:
22:19:33 SQL> 
22:19:33 SQL> 
22:19:33 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.06
22:19:33 SQL> CREATE TABLE gbp_att COMPRESS AS
22:19:33   2  SELECT
22:19:33   3  ydate
22:19:33   4  ,att00 gbp_att00
22:19:33   5  ,att01 gbp_att01
22:19:33   6  ,att02 gbp_att02
22:19:33   7  ,att03 gbp_att03
22:19:33   8  ,att04 gbp_att04
22:19:33   9  ,att05 gbp_att05
22:19:33  10  ,att06 gbp_att06
22:19:33  11  ,att07 gbp_att07
22:19:33  12  ,att08 gbp_att08
22:19:33  13  ,att09 gbp_att09
22:19:33  14  ,att10 gbp_att10
22:19:33  15  ,att11 gbp_att11
22:19:33  16  ,att12 gbp_att12
22:19:33  17  ,att13 gbp_att13
22:19:33  18  ,att14 gbp_att14
22:19:33  19  ,att15 gbp_att15
22:19:33  20  ,att16 gbp_att16
22:19:33  21  ,att17 gbp_att17
22:19:33  22  ,att18 gbp_att18
22:19:33  23  ,att19 gbp_att19
22:19:33  24  ,att20 gbp_att20
22:19:33  25  ,att21 gbp_att21
22:19:33  26  ,att22 gbp_att22
22:19:33  27  ,att23 gbp_att23
22:19:33  28  ,att24 gbp_att24
22:19:33  29  ,att25 gbp_att25
22:19:33  30  ,att26 gbp_att26
22:19:33  31  ,att27 gbp_att27
22:19:33  32  ,att28 gbp_att28
22:19:33  33  ,att29 gbp_att29
22:19:33  34  ,att30 gbp_att30
22:19:33  35  ,att31 gbp_att31
22:19:33  36  ,att32 gbp_att32
22:19:33  37  ,att33 gbp_att33
22:19:33  38  ,att34 gbp_att34
22:19:33  39  ,att35 gbp_att35
22:19:33  40  ,att36 gbp_att36
22:19:33  41  ,att37 gbp_att37
22:19:33  42  FROM svm6162
22:19:33  43  /

Table created.

Elapsed: 00:00:00.16
22:19:33 SQL> 
22:19:33 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
22:19:33 SQL> 
22:19:33 SQL> -- rpt
22:19:33 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19258

Elapsed: 00:00:00.84
22:19:34 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     19258

Elapsed: 00:00:00.01
22:19:34 SQL> 
22:19:34 SQL> --
22:19:34 SQL> -- jpy610.sql
22:19:34 SQL> --
22:19:34 SQL> 
22:19:34 SQL> -- Creates views and tables for backtesting a forex SVM strategy
22:19:34 SQL> 
22:19:34 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.87
22:19:35 SQL> 
22:19:35 SQL> -- I created di5min here:
22:19:35 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
22:19:35 SQL> 
22:19:35 SQL> CREATE OR REPLACE VIEW svm6102 AS
22:19:35   2  SELECT
22:19:35   3  pair
22:19:35   4  ,ydate
22:19:35   5  ,prdate
22:19:35   6  ,rownum rnum -- acts as t in my time-series
22:19:35   7  ,clse
22:19:35   8  -- Derive a bunch of attributes from clse, the latest price:
22:19:35   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
22:19:35  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
22:19:35  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
22:19:35  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
22:19:35  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
22:19:35  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
22:19:35  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
22:19:35  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
22:19:35  17  --
22:19:35  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
22:19:35  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
22:19:35  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
22:19:35  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
22:19:35  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
22:19:35  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
22:19:35  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
22:19:35  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
22:19:35  26  --
22:19:35  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
22:19:35  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
22:19:35  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
22:19:35  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
22:19:35  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
22:19:35  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
22:19:35  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
22:19:35  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
22:19:35  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
22:19:35  36  FROM di5min WHERE pair LIKE'%jpy%'
22:19:35  37  AND ydate > sysdate - 95
22:19:35  38  ORDER BY ydate
22:19:35  39  /

View created.

Elapsed: 00:00:00.05
22:19:35 SQL> 
22:19:35 SQL> -- rpt
22:19:35 SQL> 
22:19:35 SQL> SELECT
22:19:35   2  pair
22:19:35   3  ,COUNT(pair)
22:19:35   4  ,MIN(clse),MAX(clse)
22:19:35   5  ,MIN(avg6),MAX(avg6)
22:19:35   6  ,MIN(ydate),MAX(ydate)
22:19:35   7  FROM svm6102
22:19:35   8  GROUP BY pair
22:19:35   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_jpy       19257	 80.25	   84.485 80.3595205 84.3105479 2010-09-29 22:20:01 2011-01-02 22:15:00

Elapsed: 00:00:00.92
22:19:36 SQL> 
22:19:36 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
22:19:36 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.25
22:19:36 SQL> CREATE TABLE svm6122 COMPRESS AS
22:19:36   2  SELECT
22:19:36   3  pair
22:19:36   4  ,ydate
22:19:36   5  ,prdate
22:19:36   6  ,clse
22:19:36   7  -- g6 is important. I want to predict g6:
22:19:36   8  ,ld6 - clse g6
22:19:36   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
22:19:36  10  -- I want more attributes from the ones I derived above:
22:19:36  11  -- clse relation to moving-min
22:19:36  12  ,clse-min4  cm4
22:19:36  13  ,clse-min6  cm6
22:19:36  14  ,clse-min8  cm8
22:19:36  15  ,clse-min10 cm10
22:19:36  16  ,clse-min12 cm12
22:19:36  17  ,clse-min14 cm14
22:19:36  18  ,clse-min16 cm16
22:19:36  19  ,clse-min18 cm18
22:19:36  20  -- clse relation to moving-avg
22:19:36  21  ,clse-avg4  ca4
22:19:36  22  ,clse-avg6  ca6
22:19:36  23  ,clse-avg8  ca8
22:19:36  24  ,clse-avg10 ca10
22:19:36  25  ,clse-avg12 ca12
22:19:36  26  ,clse-avg14 ca14
22:19:36  27  ,clse-avg16 ca16
22:19:36  28  ,clse-avg18 ca18
22:19:36  29  -- clse relation to moving-max
22:19:36  30  ,clse-max4  cx4
22:19:36  31  ,clse-max6  cx6
22:19:36  32  ,clse-max8  cx8
22:19:36  33  ,clse-max10 cx10
22:19:36  34  ,clse-max12 cx12
22:19:36  35  ,clse-max14 cx14
22:19:36  36  ,clse-max16 cx16
22:19:36  37  ,clse-max18 cx18
22:19:36  38  -- Derive more attributes.
22:19:36  39  -- I want to use CORR() here to help SVM see the shape of the series.
22:19:36  40  -- But COVAR_POP is more stable:
22:19:36  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
22:19:36  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
22:19:36  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
22:19:36  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
22:19:36  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
22:19:36  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
22:19:36  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
22:19:36  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
22:19:36  49  -- Derive date related attributes:
22:19:36  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:19:36  51  ,0+TO_CHAR(ydate,'D')d
22:19:36  52  ,0+TO_CHAR(ydate,'W')w
22:19:36  53  -- mpm stands for minutes-past-midnight:
22:19:36  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:19:36  55  -- mph stands for minutes-past-hour:
22:19:36  56  ,0+TO_CHAR(ydate,'MI')mph
22:19:36  57  FROM svm6102
22:19:36  58  ORDER BY ydate
22:19:36  59  /

Table created.

Elapsed: 00:00:02.01
22:19:38 SQL> 
22:19:38 SQL> -- rpt
22:19:38 SQL> 
22:19:38 SQL> SELECT
22:19:38   2  pair
22:19:38   3  ,COUNT(pair)
22:19:38   4  ,MIN(clse),MAX(clse)
22:19:38   5  ,MIN(ydate),MAX(ydate)
22:19:38   6  FROM svm6122
22:19:38   7  GROUP BY pair
22:19:38   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_jpy       19257	 80.25	   84.485 2010-09-29 22:20:01 2011-01-02 22:15:00

Elapsed: 00:00:00.06
22:19:38 SQL> 
22:19:38 SQL> -- Prepare for derivation of NTILE based params:
22:19:38 SQL> 
22:19:38 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.23
22:19:39 SQL> CREATE TABLE svm6142 COMPRESS AS
22:19:39   2  SELECT
22:19:39   3  pair
22:19:39   4  ,ydate
22:19:39   5  ,prdate
22:19:39   6  ,clse
22:19:39   7  ,g6
22:19:39   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
22:19:39   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
22:19:39  10  ,CASE WHEN trend IS NULL THEN 1
22:19:39  11  	    WHEN trend =0      THEN 1
22:19:39  12  	    ELSE trend END trend
22:19:39  13  ,cm4
22:19:39  14  ,cm6
22:19:39  15  ,cm8
22:19:39  16  ,cm10
22:19:39  17  ,cm12
22:19:39  18  ,cm14
22:19:39  19  ,cm16
22:19:39  20  ,cm18
22:19:39  21  --
22:19:39  22  ,ca4
22:19:39  23  ,ca6
22:19:39  24  ,ca8
22:19:39  25  ,ca10
22:19:39  26  ,ca12
22:19:39  27  ,ca14
22:19:39  28  ,ca16
22:19:39  29  ,ca18
22:19:39  30  --
22:19:39  31  ,cx4
22:19:39  32  ,cx6
22:19:39  33  ,cx8
22:19:39  34  ,cx10
22:19:39  35  ,cx12
22:19:39  36  ,cx14
22:19:39  37  ,cx16
22:19:39  38  ,cx18
22:19:39  39  --
22:19:39  40  ,crr4
22:19:39  41  ,crr6
22:19:39  42  ,crr8
22:19:39  43  ,crr10
22:19:39  44  ,crr12
22:19:39  45  ,crr14
22:19:39  46  ,crr16
22:19:39  47  ,crr18
22:19:39  48  --
22:19:39  49  ,hh
22:19:39  50  ,d
22:19:39  51  ,w
22:19:39  52  ,mpm
22:19:39  53  ,mph
22:19:39  54  FROM svm6122
22:19:39  55  ORDER BY ydate
22:19:39  56  /

Table created.

Elapsed: 00:00:00.35
22:19:39 SQL> 
22:19:39 SQL> -- rpt
22:19:39 SQL> 
22:19:39 SQL> SELECT
22:19:39   2  pair
22:19:39   3  ,trend
22:19:39   4  ,gatt
22:19:39   5  ,COUNT(pair)
22:19:39   6  ,AVG(g6)
22:19:39   7  FROM svm6142
22:19:39   8  GROUP BY pair,trend,gatt
22:19:39   9  ORDER BY pair,trend,gatt
22:19:39  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5268 -.16757827
usd_jpy 	-1 up	      4823 .165632485
usd_jpy 	-1		64
usd_jpy 	 1 nup	      4980 -.15609408
usd_jpy 	 1 up	      4114 .166208458
usd_jpy 	 1		 8

6 rows selected.

Elapsed: 00:00:00.04
22:19:39 SQL> 
22:19:39 SQL> 
22:19:39 SQL> -- Derive NTILE based params:
22:19:39 SQL> 
22:19:39 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.19
22:19:39 SQL> CREATE TABLE svm6162 COMPRESS AS
22:19:39   2  SELECT
22:19:39   3  pair
22:19:39   4  ,ydate
22:19:39   5  ,prdate
22:19:39   6  ,clse
22:19:39   7  ,g6
22:19:39   8  ,gatt
22:19:39   9  ,gattn
22:19:39  10  ,trend
22:19:39  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
22:19:39  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
22:19:39  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
22:19:39  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
22:19:39  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
22:19:39  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
22:19:39  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
22:19:39  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
22:19:39  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
22:19:39  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
22:19:39  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
22:19:39  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
22:19:39  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
22:19:39  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
22:19:39  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
22:19:39  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
22:19:39  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
22:19:39  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
22:19:39  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
22:19:39  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
22:19:39  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
22:19:39  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
22:19:39  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
22:19:39  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
22:19:39  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
22:19:39  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
22:19:39  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
22:19:39  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
22:19:39  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
22:19:39  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
22:19:39  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
22:19:39  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
22:19:39  43  ,hh  att32
22:19:39  44  ,d   att33
22:19:39  45  ,w   att34
22:19:39  46  ,mpm att35
22:19:39  47  ,mph att36
22:19:39  48  ,trend att37
22:19:39  49  FROM svm6142
22:19:39  50  ORDER BY ydate
22:19:39  51  /

Table created.

Elapsed: 00:00:04.70
22:19:44 SQL> 
22:19:44 SQL> -- rpt
22:19:44 SQL> 
22:19:44 SQL> SELECT
22:19:44   2  pair
22:19:44   3  ,trend
22:19:44   4  ,gatt
22:19:44   5  ,COUNT(pair)
22:19:44   6  ,AVG(g6)
22:19:44   7  FROM svm6162
22:19:44   8  GROUP BY pair,trend,gatt
22:19:44   9  ORDER BY pair,trend,gatt
22:19:44  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5268 -.16757827
usd_jpy 	-1 up	      4823 .165632485
usd_jpy 	-1		64
usd_jpy 	 1 nup	      4980 -.15609408
usd_jpy 	 1 up	      4114 .166208458
usd_jpy 	 1		 8

6 rows selected.

Elapsed: 00:00:00.03
22:19:44 SQL> 
22:19:44 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.16
22:19:44 SQL> CREATE TABLE modsrc COMPRESS AS
22:19:44   2  SELECT
22:19:44   3  pair
22:19:44   4  ,ydate
22:19:44   5  ,prdate
22:19:44   6  ,trend
22:19:44   7  ,g6
22:19:44   8  ,gatt
22:19:44   9  ,gattn
22:19:44  10  FROM svm6162
22:19:44  11  /

Table created.

Elapsed: 00:00:00.09
22:19:44 SQL> 
22:19:44 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
22:19:44 SQL> 
22:19:44 SQL> DROP   TABLE jpy_ms610 ;

Table dropped.

Elapsed: 00:00:00.06
22:19:44 SQL> CREATE TABLE jpy_ms610 COMPRESS AS
22:19:44   2  SELECT
22:19:44   3  ydate
22:19:44   4  ,trend jpy_trend
22:19:44   5  ,g6    jpy_g6
22:19:44   6  ,gatt  jpy_gatt
22:19:44   7  ,gattn jpy_gattn
22:19:44   8  FROM modsrc
22:19:44   9  /

Table created.

Elapsed: 00:00:00.07
22:19:44 SQL> 
22:19:44 SQL> ANALYZE TABLE jpy_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.13
22:19:45 SQL> 
22:19:45 SQL> -- I need a copy of the attributes:
22:19:45 SQL> 
22:19:45 SQL> 
22:19:45 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.07
22:19:45 SQL> CREATE TABLE jpy_att COMPRESS AS
22:19:45   2  SELECT
22:19:45   3  ydate
22:19:45   4  ,att00 jpy_att00
22:19:45   5  ,att01 jpy_att01
22:19:45   6  ,att02 jpy_att02
22:19:45   7  ,att03 jpy_att03
22:19:45   8  ,att04 jpy_att04
22:19:45   9  ,att05 jpy_att05
22:19:45  10  ,att06 jpy_att06
22:19:45  11  ,att07 jpy_att07
22:19:45  12  ,att08 jpy_att08
22:19:45  13  ,att09 jpy_att09
22:19:45  14  ,att10 jpy_att10
22:19:45  15  ,att11 jpy_att11
22:19:45  16  ,att12 jpy_att12
22:19:45  17  ,att13 jpy_att13
22:19:45  18  ,att14 jpy_att14
22:19:45  19  ,att15 jpy_att15
22:19:45  20  ,att16 jpy_att16
22:19:45  21  ,att17 jpy_att17
22:19:45  22  ,att18 jpy_att18
22:19:45  23  ,att19 jpy_att19
22:19:45  24  ,att20 jpy_att20
22:19:45  25  ,att21 jpy_att21
22:19:45  26  ,att22 jpy_att22
22:19:45  27  ,att23 jpy_att23
22:19:45  28  ,att24 jpy_att24
22:19:45  29  ,att25 jpy_att25
22:19:45  30  ,att26 jpy_att26
22:19:45  31  ,att27 jpy_att27
22:19:45  32  ,att28 jpy_att28
22:19:45  33  ,att29 jpy_att29
22:19:45  34  ,att30 jpy_att30
22:19:45  35  ,att31 jpy_att31
22:19:45  36  ,att32 jpy_att32
22:19:45  37  ,att33 jpy_att33
22:19:45  38  ,att34 jpy_att34
22:19:45  39  ,att35 jpy_att35
22:19:45  40  ,att36 jpy_att36
22:19:45  41  ,att37 jpy_att37
22:19:45  42  FROM svm6162
22:19:45  43  /

Table created.

Elapsed: 00:00:00.22
22:19:45 SQL> 
22:19:45 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.43
22:19:45 SQL> 
22:19:45 SQL> -- rpt
22:19:45 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19257

Elapsed: 00:00:00.89
22:19:46 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     19257

Elapsed: 00:00:00.00
22:19:46 SQL> 
22:19:46 SQL> --
22:19:46 SQL> -- cad610.sql
22:19:46 SQL> --
22:19:46 SQL> 
22:19:46 SQL> -- Creates views and tables for backtesting a forex SVM strategy
22:19:46 SQL> 
22:19:46 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.41
22:19:47 SQL> 
22:19:47 SQL> -- I created di5min here:
22:19:47 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
22:19:47 SQL> 
22:19:47 SQL> CREATE OR REPLACE VIEW svm6102 AS
22:19:47   2  SELECT
22:19:47   3  pair
22:19:47   4  ,ydate
22:19:47   5  ,prdate
22:19:47   6  ,rownum rnum -- acts as t in my time-series
22:19:47   7  ,clse
22:19:47   8  -- Derive a bunch of attributes from clse, the latest price:
22:19:47   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
22:19:47  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
22:19:47  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
22:19:47  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
22:19:47  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
22:19:47  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
22:19:47  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
22:19:47  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
22:19:47  17  --
22:19:47  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
22:19:47  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
22:19:47  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
22:19:47  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
22:19:47  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
22:19:47  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
22:19:47  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
22:19:47  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
22:19:47  26  --
22:19:47  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
22:19:47  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
22:19:47  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
22:19:47  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
22:19:47  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
22:19:47  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
22:19:47  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
22:19:47  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
22:19:47  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
22:19:47  36  FROM di5min WHERE pair LIKE'%cad%'
22:19:47  37  AND ydate > sysdate - 95
22:19:47  38  ORDER BY ydate
22:19:47  39  /

View created.

Elapsed: 00:00:00.03
22:19:47 SQL> 
22:19:47 SQL> -- rpt
22:19:47 SQL> 
22:19:47 SQL> SELECT
22:19:47   2  pair
22:19:47   3  ,COUNT(pair)
22:19:47   4  ,MIN(clse),MAX(clse)
22:19:47   5  ,MIN(avg6),MAX(avg6)
22:19:47   6  ,MIN(ydate),MAX(ydate)
22:19:47   7  FROM svm6102
22:19:47   8  GROUP BY pair
22:19:47   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_cad       19256    .992825	   1.0355 .995120719 1.03336849 2010-09-29 22:20:01 2010-12-31 21:55:00

Elapsed: 00:00:00.85
22:19:48 SQL> 
22:19:48 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
22:19:48 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.33
22:19:48 SQL> CREATE TABLE svm6122 COMPRESS AS
22:19:48   2  SELECT
22:19:48   3  pair
22:19:48   4  ,ydate
22:19:48   5  ,prdate
22:19:48   6  ,clse
22:19:48   7  -- g6 is important. I want to predict g6:
22:19:48   8  ,ld6 - clse g6
22:19:48   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
22:19:48  10  -- I want more attributes from the ones I derived above:
22:19:48  11  -- clse relation to moving-min
22:19:48  12  ,clse-min4  cm4
22:19:48  13  ,clse-min6  cm6
22:19:48  14  ,clse-min8  cm8
22:19:48  15  ,clse-min10 cm10
22:19:48  16  ,clse-min12 cm12
22:19:48  17  ,clse-min14 cm14
22:19:48  18  ,clse-min16 cm16
22:19:48  19  ,clse-min18 cm18
22:19:48  20  -- clse relation to moving-avg
22:19:48  21  ,clse-avg4  ca4
22:19:48  22  ,clse-avg6  ca6
22:19:48  23  ,clse-avg8  ca8
22:19:48  24  ,clse-avg10 ca10
22:19:48  25  ,clse-avg12 ca12
22:19:48  26  ,clse-avg14 ca14
22:19:48  27  ,clse-avg16 ca16
22:19:48  28  ,clse-avg18 ca18
22:19:48  29  -- clse relation to moving-max
22:19:48  30  ,clse-max4  cx4
22:19:48  31  ,clse-max6  cx6
22:19:48  32  ,clse-max8  cx8
22:19:48  33  ,clse-max10 cx10
22:19:48  34  ,clse-max12 cx12
22:19:48  35  ,clse-max14 cx14
22:19:48  36  ,clse-max16 cx16
22:19:48  37  ,clse-max18 cx18
22:19:48  38  -- Derive more attributes.
22:19:48  39  -- I want to use CORR() here to help SVM see the shape of the series.
22:19:48  40  -- But COVAR_POP is more stable:
22:19:48  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
22:19:48  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
22:19:48  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
22:19:48  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
22:19:48  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
22:19:48  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
22:19:48  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
22:19:48  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
22:19:48  49  -- Derive date related attributes:
22:19:48  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:19:48  51  ,0+TO_CHAR(ydate,'D')d
22:19:48  52  ,0+TO_CHAR(ydate,'W')w
22:19:48  53  -- mpm stands for minutes-past-midnight:
22:19:48  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:19:48  55  -- mph stands for minutes-past-hour:
22:19:48  56  ,0+TO_CHAR(ydate,'MI')mph
22:19:48  57  FROM svm6102
22:19:48  58  ORDER BY ydate
22:19:48  59  /

Table created.

Elapsed: 00:00:01.99
22:19:50 SQL> 
22:19:50 SQL> -- rpt
22:19:50 SQL> 
22:19:50 SQL> SELECT
22:19:50   2  pair
22:19:50   3  ,COUNT(pair)
22:19:50   4  ,MIN(clse),MAX(clse)
22:19:50   5  ,MIN(ydate),MAX(ydate)
22:19:50   6  FROM svm6122
22:19:50   7  GROUP BY pair
22:19:50   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_cad       19256    .992825	   1.0355 2010-09-29 22:20:01 2010-12-31 21:55:00

Elapsed: 00:00:00.04
22:19:50 SQL> 
22:19:50 SQL> -- Prepare for derivation of NTILE based params:
22:19:50 SQL> 
22:19:50 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.17
22:19:50 SQL> CREATE TABLE svm6142 COMPRESS AS
22:19:50   2  SELECT
22:19:50   3  pair
22:19:50   4  ,ydate
22:19:50   5  ,prdate
22:19:50   6  ,clse
22:19:50   7  ,g6
22:19:50   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
22:19:50   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
22:19:50  10  ,CASE WHEN trend IS NULL THEN 1
22:19:50  11  	    WHEN trend =0      THEN 1
22:19:50  12  	    ELSE trend END trend
22:19:50  13  ,cm4
22:19:50  14  ,cm6
22:19:50  15  ,cm8
22:19:50  16  ,cm10
22:19:50  17  ,cm12
22:19:50  18  ,cm14
22:19:50  19  ,cm16
22:19:50  20  ,cm18
22:19:50  21  --
22:19:50  22  ,ca4
22:19:50  23  ,ca6
22:19:50  24  ,ca8
22:19:50  25  ,ca10
22:19:50  26  ,ca12
22:19:50  27  ,ca14
22:19:50  28  ,ca16
22:19:50  29  ,ca18
22:19:50  30  --
22:19:50  31  ,cx4
22:19:50  32  ,cx6
22:19:50  33  ,cx8
22:19:50  34  ,cx10
22:19:50  35  ,cx12
22:19:50  36  ,cx14
22:19:50  37  ,cx16
22:19:50  38  ,cx18
22:19:50  39  --
22:19:50  40  ,crr4
22:19:50  41  ,crr6
22:19:50  42  ,crr8
22:19:50  43  ,crr10
22:19:50  44  ,crr12
22:19:50  45  ,crr14
22:19:50  46  ,crr16
22:19:50  47  ,crr18
22:19:50  48  --
22:19:50  49  ,hh
22:19:50  50  ,d
22:19:50  51  ,w
22:19:50  52  ,mpm
22:19:50  53  ,mph
22:19:50  54  FROM svm6122
22:19:50  55  ORDER BY ydate
22:19:50  56  /

Table created.

Elapsed: 00:00:00.36
22:19:50 SQL> 
22:19:50 SQL> -- rpt
22:19:50 SQL> 
22:19:50 SQL> SELECT
22:19:50   2  pair
22:19:50   3  ,trend
22:19:50   4  ,gatt
22:19:50   5  ,COUNT(pair)
22:19:50   6  ,AVG(g6)
22:19:50   7  FROM svm6142
22:19:50   8  GROUP BY pair,trend,gatt
22:19:50   9  ORDER BY pair,trend,gatt
22:19:50  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7245 -.00131284
usd_cad 	-1 up	      3008 .003052934
usd_cad 	-1		67
usd_cad 	 1 nup	      6612 -.00163578
usd_cad 	 1 up	      2319 .003641034
usd_cad 	 1		 5

6 rows selected.

Elapsed: 00:00:00.04
22:19:50 SQL> 
22:19:50 SQL> 
22:19:50 SQL> -- Derive NTILE based params:
22:19:50 SQL> 
22:19:50 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.18
22:19:51 SQL> CREATE TABLE svm6162 COMPRESS AS
22:19:51   2  SELECT
22:19:51   3  pair
22:19:51   4  ,ydate
22:19:51   5  ,prdate
22:19:51   6  ,clse
22:19:51   7  ,g6
22:19:51   8  ,gatt
22:19:51   9  ,gattn
22:19:51  10  ,trend
22:19:51  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
22:19:51  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
22:19:51  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
22:19:51  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
22:19:51  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
22:19:51  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
22:19:51  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
22:19:51  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
22:19:51  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
22:19:51  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
22:19:51  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
22:19:51  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
22:19:51  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
22:19:51  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
22:19:51  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
22:19:51  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
22:19:51  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
22:19:51  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
22:19:51  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
22:19:51  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
22:19:51  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
22:19:51  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
22:19:51  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
22:19:51  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
22:19:51  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
22:19:51  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
22:19:51  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
22:19:51  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
22:19:51  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
22:19:51  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
22:19:51  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
22:19:51  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
22:19:51  43  ,hh  att32
22:19:51  44  ,d   att33
22:19:51  45  ,w   att34
22:19:51  46  ,mpm att35
22:19:51  47  ,mph att36
22:19:51  48  ,trend att37
22:19:51  49  FROM svm6142
22:19:51  50  ORDER BY ydate
22:19:51  51  /

Table created.

Elapsed: 00:00:04.60
22:19:55 SQL> 
22:19:55 SQL> -- rpt
22:19:55 SQL> 
22:19:55 SQL> SELECT
22:19:55   2  pair
22:19:55   3  ,trend
22:19:55   4  ,gatt
22:19:55   5  ,COUNT(pair)
22:19:55   6  ,AVG(g6)
22:19:55   7  FROM svm6162
22:19:55   8  GROUP BY pair,trend,gatt
22:19:55   9  ORDER BY pair,trend,gatt
22:19:55  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7245 -.00131284
usd_cad 	-1 up	      3008 .003052934
usd_cad 	-1		67
usd_cad 	 1 nup	      6612 -.00163578
usd_cad 	 1 up	      2319 .003641034
usd_cad 	 1		 5

6 rows selected.

Elapsed: 00:00:00.04
22:19:55 SQL> 
22:19:55 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.10
22:19:55 SQL> CREATE TABLE modsrc COMPRESS AS
22:19:55   2  SELECT
22:19:55   3  pair
22:19:55   4  ,ydate
22:19:55   5  ,prdate
22:19:55   6  ,trend
22:19:55   7  ,g6
22:19:55   8  ,gatt
22:19:55   9  ,gattn
22:19:55  10  FROM svm6162
22:19:55  11  /

Table created.

Elapsed: 00:00:00.10
22:19:55 SQL> 
22:19:55 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
22:19:56 SQL> 
22:19:56 SQL> DROP   TABLE cad_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
22:19:56 SQL> CREATE TABLE cad_ms610 COMPRESS AS
22:19:56   2  SELECT
22:19:56   3  ydate
22:19:56   4  ,trend cad_trend
22:19:56   5  ,g6    cad_g6
22:19:56   6  ,gatt  cad_gatt
22:19:56   7  ,gattn cad_gattn
22:19:56   8  FROM modsrc
22:19:56   9  /

Table created.

Elapsed: 00:00:00.06
22:19:56 SQL> 
22:19:56 SQL> ANALYZE TABLE cad_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
22:19:56 SQL> 
22:19:56 SQL> -- I need a copy of the attributes:
22:19:56 SQL> 
22:19:56 SQL> 
22:19:56 SQL> DROP   TABLE cad_att;

Table dropped.

Elapsed: 00:00:00.07
22:19:56 SQL> CREATE TABLE cad_att COMPRESS AS
22:19:56   2  SELECT
22:19:56   3  ydate
22:19:56   4  ,att00 cad_att00
22:19:56   5  ,att01 cad_att01
22:19:56   6  ,att02 cad_att02
22:19:56   7  ,att03 cad_att03
22:19:56   8  ,att04 cad_att04
22:19:56   9  ,att05 cad_att05
22:19:56  10  ,att06 cad_att06
22:19:56  11  ,att07 cad_att07
22:19:56  12  ,att08 cad_att08
22:19:56  13  ,att09 cad_att09
22:19:56  14  ,att10 cad_att10
22:19:56  15  ,att11 cad_att11
22:19:56  16  ,att12 cad_att12
22:19:56  17  ,att13 cad_att13
22:19:56  18  ,att14 cad_att14
22:19:56  19  ,att15 cad_att15
22:19:56  20  ,att16 cad_att16
22:19:56  21  ,att17 cad_att17
22:19:56  22  ,att18 cad_att18
22:19:56  23  ,att19 cad_att19
22:19:56  24  ,att20 cad_att20
22:19:56  25  ,att21 cad_att21
22:19:56  26  ,att22 cad_att22
22:19:56  27  ,att23 cad_att23
22:19:56  28  ,att24 cad_att24
22:19:56  29  ,att25 cad_att25
22:19:56  30  ,att26 cad_att26
22:19:56  31  ,att27 cad_att27
22:19:56  32  ,att28 cad_att28
22:19:56  33  ,att29 cad_att29
22:19:56  34  ,att30 cad_att30
22:19:56  35  ,att31 cad_att31
22:19:56  36  ,att32 cad_att32
22:19:56  37  ,att33 cad_att33
22:19:56  38  ,att34 cad_att34
22:19:56  39  ,att35 cad_att35
22:19:56  40  ,att36 cad_att36
22:19:56  41  ,att37 cad_att37
22:19:56  42  FROM svm6162
22:19:56  43  /

Table created.

Elapsed: 00:00:00.17
22:19:56 SQL> 
22:19:56 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.48
22:19:57 SQL> 
22:19:57 SQL> -- rpt
22:19:57 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19256

Elapsed: 00:00:00.81
22:19:57 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
     19256

Elapsed: 00:00:00.00
22:19:57 SQL> 
22:19:57 SQL> --
22:19:57 SQL> -- chf610.sql
22:19:57 SQL> --
22:19:57 SQL> 
22:19:57 SQL> -- Creates views and tables for backtesting a forex SVM strategy
22:19:57 SQL> 
22:19:57 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.42
22:19:58 SQL> 
22:19:58 SQL> -- I created di5min here:
22:19:58 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
22:19:58 SQL> 
22:19:58 SQL> CREATE OR REPLACE VIEW svm6102 AS
22:19:58   2  SELECT
22:19:58   3  pair
22:19:58   4  ,ydate
22:19:58   5  ,prdate
22:19:58   6  ,rownum rnum -- acts as t in my time-series
22:19:58   7  ,clse
22:19:58   8  -- Derive a bunch of attributes from clse, the latest price:
22:19:58   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
22:19:58  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
22:19:58  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
22:19:58  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
22:19:58  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
22:19:58  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
22:19:58  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
22:19:58  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
22:19:58  17  --
22:19:58  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
22:19:58  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
22:19:58  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
22:19:58  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
22:19:58  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
22:19:58  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
22:19:58  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
22:19:58  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
22:19:58  26  --
22:19:58  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
22:19:58  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
22:19:58  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
22:19:58  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
22:19:58  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
22:19:58  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
22:19:58  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
22:19:58  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
22:19:58  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
22:19:58  36  FROM di5min WHERE pair LIKE'%chf%'
22:19:58  37  AND ydate > sysdate - 95
22:19:58  38  ORDER BY ydate
22:19:58  39  /

View created.

Elapsed: 00:00:00.04
22:19:58 SQL> 
22:19:58 SQL> -- rpt
22:19:58 SQL> 
22:19:58 SQL> SELECT
22:19:58   2  pair
22:19:58   3  ,COUNT(pair)
22:19:58   4  ,MIN(clse),MAX(clse)
22:19:58   5  ,MIN(avg6),MAX(avg6)
22:19:58   6  ,MIN(ydate),MAX(ydate)
22:19:58   7  FROM svm6102
22:19:58   8  GROUP BY pair
22:19:58   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_chf       19259    .931675	  1.00635 .933969692 1.00498151 2010-09-29 22:20:01 2010-12-31 21:55:00

Elapsed: 00:00:00.82
22:19:59 SQL> 
22:19:59 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
22:19:59 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.24
22:19:59 SQL> CREATE TABLE svm6122 COMPRESS AS
22:19:59   2  SELECT
22:19:59   3  pair
22:19:59   4  ,ydate
22:19:59   5  ,prdate
22:19:59   6  ,clse
22:19:59   7  -- g6 is important. I want to predict g6:
22:19:59   8  ,ld6 - clse g6
22:19:59   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
22:19:59  10  -- I want more attributes from the ones I derived above:
22:19:59  11  -- clse relation to moving-min
22:19:59  12  ,clse-min4  cm4
22:19:59  13  ,clse-min6  cm6
22:19:59  14  ,clse-min8  cm8
22:19:59  15  ,clse-min10 cm10
22:19:59  16  ,clse-min12 cm12
22:19:59  17  ,clse-min14 cm14
22:19:59  18  ,clse-min16 cm16
22:19:59  19  ,clse-min18 cm18
22:19:59  20  -- clse relation to moving-avg
22:19:59  21  ,clse-avg4  ca4
22:19:59  22  ,clse-avg6  ca6
22:19:59  23  ,clse-avg8  ca8
22:19:59  24  ,clse-avg10 ca10
22:19:59  25  ,clse-avg12 ca12
22:19:59  26  ,clse-avg14 ca14
22:19:59  27  ,clse-avg16 ca16
22:19:59  28  ,clse-avg18 ca18
22:19:59  29  -- clse relation to moving-max
22:19:59  30  ,clse-max4  cx4
22:19:59  31  ,clse-max6  cx6
22:19:59  32  ,clse-max8  cx8
22:19:59  33  ,clse-max10 cx10
22:19:59  34  ,clse-max12 cx12
22:19:59  35  ,clse-max14 cx14
22:19:59  36  ,clse-max16 cx16
22:19:59  37  ,clse-max18 cx18
22:19:59  38  -- Derive more attributes.
22:19:59  39  -- I want to use CORR() here to help SVM see the shape of the series.
22:19:59  40  -- But COVAR_POP is more stable:
22:19:59  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
22:19:59  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
22:19:59  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
22:19:59  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
22:19:59  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
22:19:59  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
22:19:59  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
22:19:59  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
22:19:59  49  -- Derive date related attributes:
22:19:59  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:19:59  51  ,0+TO_CHAR(ydate,'D')d
22:19:59  52  ,0+TO_CHAR(ydate,'W')w
22:19:59  53  -- mpm stands for minutes-past-midnight:
22:19:59  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:19:59  55  -- mph stands for minutes-past-hour:
22:19:59  56  ,0+TO_CHAR(ydate,'MI')mph
22:19:59  57  FROM svm6102
22:19:59  58  ORDER BY ydate
22:19:59  59  /

Table created.

Elapsed: 00:00:02.01
22:20:01 SQL> 
22:20:01 SQL> -- rpt
22:20:01 SQL> 
22:20:01 SQL> SELECT
22:20:01   2  pair
22:20:01   3  ,COUNT(pair)
22:20:01   4  ,MIN(clse),MAX(clse)
22:20:01   5  ,MIN(ydate),MAX(ydate)
22:20:01   6  FROM svm6122
22:20:01   7  GROUP BY pair
22:20:01   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_chf       19259    .931675	  1.00635 2010-09-29 22:20:01 2010-12-31 21:55:00

Elapsed: 00:00:00.04
22:20:01 SQL> 
22:20:01 SQL> -- Prepare for derivation of NTILE based params:
22:20:01 SQL> 
22:20:01 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.17
22:20:01 SQL> CREATE TABLE svm6142 COMPRESS AS
22:20:01   2  SELECT
22:20:01   3  pair
22:20:01   4  ,ydate
22:20:01   5  ,prdate
22:20:01   6  ,clse
22:20:01   7  ,g6
22:20:01   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
22:20:01   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
22:20:01  10  ,CASE WHEN trend IS NULL THEN 1
22:20:01  11  	    WHEN trend =0      THEN 1
22:20:01  12  	    ELSE trend END trend
22:20:01  13  ,cm4
22:20:01  14  ,cm6
22:20:01  15  ,cm8
22:20:01  16  ,cm10
22:20:01  17  ,cm12
22:20:01  18  ,cm14
22:20:01  19  ,cm16
22:20:01  20  ,cm18
22:20:01  21  --
22:20:01  22  ,ca4
22:20:01  23  ,ca6
22:20:01  24  ,ca8
22:20:01  25  ,ca10
22:20:01  26  ,ca12
22:20:01  27  ,ca14
22:20:01  28  ,ca16
22:20:01  29  ,ca18
22:20:01  30  --
22:20:01  31  ,cx4
22:20:01  32  ,cx6
22:20:01  33  ,cx8
22:20:01  34  ,cx10
22:20:01  35  ,cx12
22:20:01  36  ,cx14
22:20:01  37  ,cx16
22:20:01  38  ,cx18
22:20:01  39  --
22:20:01  40  ,crr4
22:20:01  41  ,crr6
22:20:01  42  ,crr8
22:20:01  43  ,crr10
22:20:01  44  ,crr12
22:20:01  45  ,crr14
22:20:01  46  ,crr16
22:20:01  47  ,crr18
22:20:01  48  --
22:20:01  49  ,hh
22:20:01  50  ,d
22:20:01  51  ,w
22:20:01  52  ,mpm
22:20:01  53  ,mph
22:20:01  54  FROM svm6122
22:20:01  55  ORDER BY ydate
22:20:01  56  /

Table created.

Elapsed: 00:00:00.38
22:20:02 SQL> 
22:20:02 SQL> -- rpt
22:20:02 SQL> 
22:20:02 SQL> SELECT
22:20:02   2  pair
22:20:02   3  ,trend
22:20:02   4  ,gatt
22:20:02   5  ,COUNT(pair)
22:20:02   6  ,AVG(g6)
22:20:02   7  FROM svm6142
22:20:02   8  GROUP BY pair,trend,gatt
22:20:02   9  ORDER BY pair,trend,gatt
22:20:02  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7178 -.00200496
usd_chf 	-1 up	      3099 .003940111
usd_chf 	-1		38
usd_chf 	 1 nup	      6368  -.0016159
usd_chf 	 1 up	      2542 .003705113
usd_chf 	 1		34

6 rows selected.

Elapsed: 00:00:00.04
22:20:02 SQL> 
22:20:02 SQL> 
22:20:02 SQL> -- Derive NTILE based params:
22:20:02 SQL> 
22:20:02 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.12
22:20:02 SQL> CREATE TABLE svm6162 COMPRESS AS
22:20:02   2  SELECT
22:20:02   3  pair
22:20:02   4  ,ydate
22:20:02   5  ,prdate
22:20:02   6  ,clse
22:20:02   7  ,g6
22:20:02   8  ,gatt
22:20:02   9  ,gattn
22:20:02  10  ,trend
22:20:02  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
22:20:02  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
22:20:02  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
22:20:02  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
22:20:02  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
22:20:02  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
22:20:02  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
22:20:02  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
22:20:02  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
22:20:02  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
22:20:02  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
22:20:02  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
22:20:02  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
22:20:02  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
22:20:02  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
22:20:02  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
22:20:02  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
22:20:02  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
22:20:02  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
22:20:02  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
22:20:02  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
22:20:02  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
22:20:02  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
22:20:02  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
22:20:02  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
22:20:02  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
22:20:02  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
22:20:02  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
22:20:02  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
22:20:02  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
22:20:02  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
22:20:02  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
22:20:02  43  ,hh  att32
22:20:02  44  ,d   att33
22:20:02  45  ,w   att34
22:20:02  46  ,mpm att35
22:20:02  47  ,mph att36
22:20:02  48  ,trend att37
22:20:02  49  FROM svm6142
22:20:02  50  ORDER BY ydate
22:20:02  51  /

Table created.

Elapsed: 00:00:04.71
22:20:06 SQL> 
22:20:06 SQL> -- rpt
22:20:06 SQL> 
22:20:06 SQL> SELECT
22:20:06   2  pair
22:20:06   3  ,trend
22:20:06   4  ,gatt
22:20:06   5  ,COUNT(pair)
22:20:06   6  ,AVG(g6)
22:20:06   7  FROM svm6162
22:20:06   8  GROUP BY pair,trend,gatt
22:20:06   9  ORDER BY pair,trend,gatt
22:20:06  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7178 -.00200496
usd_chf 	-1 up	      3099 .003940111
usd_chf 	-1		38
usd_chf 	 1 nup	      6368  -.0016159
usd_chf 	 1 up	      2542 .003705113
usd_chf 	 1		34

6 rows selected.

Elapsed: 00:00:00.03
22:20:06 SQL> 
22:20:06 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
22:20:07 SQL> CREATE TABLE modsrc COMPRESS AS
22:20:07   2  SELECT
22:20:07   3  pair
22:20:07   4  ,ydate
22:20:07   5  ,prdate
22:20:07   6  ,trend
22:20:07   7  ,g6
22:20:07   8  ,gatt
22:20:07   9  ,gattn
22:20:07  10  FROM svm6162
22:20:07  11  /

Table created.

Elapsed: 00:00:00.07
22:20:07 SQL> 
22:20:07 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.22
22:20:07 SQL> 
22:20:07 SQL> DROP   TABLE chf_ms610 ;

Table dropped.

Elapsed: 00:00:00.06
22:20:07 SQL> CREATE TABLE chf_ms610 COMPRESS AS
22:20:07   2  SELECT
22:20:07   3  ydate
22:20:07   4  ,trend chf_trend
22:20:07   5  ,g6    chf_g6
22:20:07   6  ,gatt  chf_gatt
22:20:07   7  ,gattn chf_gattn
22:20:07   8  FROM modsrc
22:20:07   9  /

Table created.

Elapsed: 00:00:00.06
22:20:07 SQL> 
22:20:07 SQL> ANALYZE TABLE chf_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.14
22:20:07 SQL> 
22:20:07 SQL> -- I need a copy of the attributes:
22:20:07 SQL> 
22:20:07 SQL> 
22:20:07 SQL> DROP   TABLE chf_att;

Table dropped.

Elapsed: 00:00:00.04
22:20:07 SQL> CREATE TABLE chf_att COMPRESS AS
22:20:07   2  SELECT
22:20:07   3  ydate
22:20:07   4  ,att00 chf_att00
22:20:07   5  ,att01 chf_att01
22:20:07   6  ,att02 chf_att02
22:20:07   7  ,att03 chf_att03
22:20:07   8  ,att04 chf_att04
22:20:07   9  ,att05 chf_att05
22:20:07  10  ,att06 chf_att06
22:20:07  11  ,att07 chf_att07
22:20:07  12  ,att08 chf_att08
22:20:07  13  ,att09 chf_att09
22:20:07  14  ,att10 chf_att10
22:20:07  15  ,att11 chf_att11
22:20:07  16  ,att12 chf_att12
22:20:07  17  ,att13 chf_att13
22:20:07  18  ,att14 chf_att14
22:20:07  19  ,att15 chf_att15
22:20:07  20  ,att16 chf_att16
22:20:07  21  ,att17 chf_att17
22:20:07  22  ,att18 chf_att18
22:20:07  23  ,att19 chf_att19
22:20:07  24  ,att20 chf_att20
22:20:07  25  ,att21 chf_att21
22:20:07  26  ,att22 chf_att22
22:20:07  27  ,att23 chf_att23
22:20:07  28  ,att24 chf_att24
22:20:07  29  ,att25 chf_att25
22:20:07  30  ,att26 chf_att26
22:20:07  31  ,att27 chf_att27
22:20:07  32  ,att28 chf_att28
22:20:07  33  ,att29 chf_att29
22:20:07  34  ,att30 chf_att30
22:20:07  35  ,att31 chf_att31
22:20:07  36  ,att32 chf_att32
22:20:07  37  ,att33 chf_att33
22:20:07  38  ,att34 chf_att34
22:20:07  39  ,att35 chf_att35
22:20:07  40  ,att36 chf_att36
22:20:07  41  ,att37 chf_att37
22:20:07  42  FROM svm6162
22:20:07  43  /

Table created.

Elapsed: 00:00:00.17
22:20:07 SQL> 
22:20:07 SQL> ANALYZE TABLE chf_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
22:20:08 SQL> 
22:20:08 SQL> -- rpt
22:20:08 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19258

Elapsed: 00:00:00.84
22:20:09 SQL> SELECT COUNT(*)FROM chf_att;

  COUNT(*)
----------
     19259

Elapsed: 00:00:00.00
22:20:09 SQL> 
22:20:09 SQL> --
22:20:09 SQL> -- ech610.sql
22:20:09 SQL> --
22:20:09 SQL> 
22:20:09 SQL> -- Creates views and tables for backtesting a forex SVM strategy
22:20:09 SQL> 
22:20:09 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.45
22:20:09 SQL> 
22:20:09 SQL> -- I created di5min here:
22:20:09 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
22:20:09 SQL> 
22:20:09 SQL> CREATE OR REPLACE VIEW svm6102 AS
22:20:09   2  SELECT
22:20:09   3  pair
22:20:09   4  ,ydate
22:20:09   5  ,prdate
22:20:09   6  ,rownum rnum -- acts as t in my time-series
22:20:09   7  ,clse
22:20:09   8  -- Derive a bunch of attributes from clse, the latest price:
22:20:09   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
22:20:09  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
22:20:09  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
22:20:09  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
22:20:09  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
22:20:09  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
22:20:09  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
22:20:09  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
22:20:09  17  --
22:20:09  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
22:20:09  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
22:20:09  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
22:20:09  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
22:20:09  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
22:20:09  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
22:20:09  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
22:20:09  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
22:20:09  26  --
22:20:09  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
22:20:09  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
22:20:09  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
22:20:09  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
22:20:09  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
22:20:09  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
22:20:09  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
22:20:09  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
22:20:09  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
22:20:09  36  FROM di5min WHERE pair LIKE'%ech%'
22:20:09  37  AND ydate > sysdate - 95
22:20:09  38  ORDER BY ydate
22:20:09  39  /

View created.

Elapsed: 00:00:00.04
22:20:09 SQL> 
22:20:09 SQL> -- rpt
22:20:09 SQL> 
22:20:09 SQL> SELECT
22:20:09   2  pair
22:20:09   3  ,COUNT(pair)
22:20:09   4  ,MIN(clse),MAX(clse)
22:20:09   5  ,MIN(avg6),MAX(avg6)
22:20:09   6  ,MIN(ydate),MAX(ydate)
22:20:09   7  FROM svm6102
22:20:09   8  GROUP BY pair
22:20:09   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ech_usd       19257 1.24213032 1.38284305 1.24319868 1.37986485 2010-09-29 22:25:01 2010-12-31 21:55:00

Elapsed: 00:00:00.76
22:20:10 SQL> 
22:20:10 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
22:20:10 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.25
22:20:10 SQL> CREATE TABLE svm6122 COMPRESS AS
22:20:10   2  SELECT
22:20:10   3  pair
22:20:10   4  ,ydate
22:20:10   5  ,prdate
22:20:10   6  ,clse
22:20:10   7  -- g6 is important. I want to predict g6:
22:20:10   8  ,ld6 - clse g6
22:20:10   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
22:20:10  10  -- I want more attributes from the ones I derived above:
22:20:10  11  -- clse relation to moving-min
22:20:10  12  ,clse-min4  cm4
22:20:10  13  ,clse-min6  cm6
22:20:10  14  ,clse-min8  cm8
22:20:10  15  ,clse-min10 cm10
22:20:10  16  ,clse-min12 cm12
22:20:10  17  ,clse-min14 cm14
22:20:10  18  ,clse-min16 cm16
22:20:10  19  ,clse-min18 cm18
22:20:10  20  -- clse relation to moving-avg
22:20:10  21  ,clse-avg4  ca4
22:20:10  22  ,clse-avg6  ca6
22:20:10  23  ,clse-avg8  ca8
22:20:10  24  ,clse-avg10 ca10
22:20:10  25  ,clse-avg12 ca12
22:20:10  26  ,clse-avg14 ca14
22:20:10  27  ,clse-avg16 ca16
22:20:10  28  ,clse-avg18 ca18
22:20:10  29  -- clse relation to moving-max
22:20:10  30  ,clse-max4  cx4
22:20:10  31  ,clse-max6  cx6
22:20:10  32  ,clse-max8  cx8
22:20:10  33  ,clse-max10 cx10
22:20:10  34  ,clse-max12 cx12
22:20:10  35  ,clse-max14 cx14
22:20:10  36  ,clse-max16 cx16
22:20:10  37  ,clse-max18 cx18
22:20:10  38  -- Derive more attributes.
22:20:10  39  -- I want to use CORR() here to help SVM see the shape of the series.
22:20:10  40  -- But COVAR_POP is more stable:
22:20:10  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
22:20:10  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
22:20:10  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
22:20:10  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
22:20:10  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
22:20:10  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
22:20:10  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
22:20:10  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
22:20:10  49  -- Derive date related attributes:
22:20:10  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:20:10  51  ,0+TO_CHAR(ydate,'D')d
22:20:10  52  ,0+TO_CHAR(ydate,'W')w
22:20:10  53  -- mpm stands for minutes-past-midnight:
22:20:10  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:20:10  55  -- mph stands for minutes-past-hour:
22:20:10  56  ,0+TO_CHAR(ydate,'MI')mph
22:20:10  57  FROM svm6102
22:20:10  58  ORDER BY ydate
22:20:10  59  /

Table created.

Elapsed: 00:00:02.10
22:20:12 SQL> 
22:20:12 SQL> -- rpt
22:20:12 SQL> 
22:20:12 SQL> SELECT
22:20:12   2  pair
22:20:12   3  ,COUNT(pair)
22:20:12   4  ,MIN(clse),MAX(clse)
22:20:12   5  ,MIN(ydate),MAX(ydate)
22:20:12   6  FROM svm6122
22:20:12   7  GROUP BY pair
22:20:12   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ech_usd       19257 1.24213032 1.38284305 2010-09-29 22:25:01 2010-12-31 21:55:00

Elapsed: 00:00:00.04
22:20:12 SQL> 
22:20:12 SQL> -- Prepare for derivation of NTILE based params:
22:20:12 SQL> 
22:20:12 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.26
22:20:13 SQL> CREATE TABLE svm6142 COMPRESS AS
22:20:13   2  SELECT
22:20:13   3  pair
22:20:13   4  ,ydate
22:20:13   5  ,prdate
22:20:13   6  ,clse
22:20:13   7  ,g6
22:20:13   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
22:20:13   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
22:20:13  10  ,CASE WHEN trend IS NULL THEN 1
22:20:13  11  	    WHEN trend =0      THEN 1
22:20:13  12  	    ELSE trend END trend
22:20:13  13  ,cm4
22:20:13  14  ,cm6
22:20:13  15  ,cm8
22:20:13  16  ,cm10
22:20:13  17  ,cm12
22:20:13  18  ,cm14
22:20:13  19  ,cm16
22:20:13  20  ,cm18
22:20:13  21  --
22:20:13  22  ,ca4
22:20:13  23  ,ca6
22:20:13  24  ,ca8
22:20:13  25  ,ca10
22:20:13  26  ,ca12
22:20:13  27  ,ca14
22:20:13  28  ,ca16
22:20:13  29  ,ca18
22:20:13  30  --
22:20:13  31  ,cx4
22:20:13  32  ,cx6
22:20:13  33  ,cx8
22:20:13  34  ,cx10
22:20:13  35  ,cx12
22:20:13  36  ,cx14
22:20:13  37  ,cx16
22:20:13  38  ,cx18
22:20:13  39  --
22:20:13  40  ,crr4
22:20:13  41  ,crr6
22:20:13  42  ,crr8
22:20:13  43  ,crr10
22:20:13  44  ,crr12
22:20:13  45  ,crr14
22:20:13  46  ,crr16
22:20:13  47  ,crr18
22:20:13  48  --
22:20:13  49  ,hh
22:20:13  50  ,d
22:20:13  51  ,w
22:20:13  52  ,mpm
22:20:13  53  ,mph
22:20:13  54  FROM svm6122
22:20:13  55  ORDER BY ydate
22:20:13  56  /

Table created.

Elapsed: 00:00:00.38
22:20:13 SQL> 
22:20:13 SQL> -- rpt
22:20:13 SQL> 
22:20:13 SQL> SELECT
22:20:13   2  pair
22:20:13   3  ,trend
22:20:13   4  ,gatt
22:20:13   5  ,COUNT(pair)
22:20:13   6  ,AVG(g6)
22:20:13   7  FROM svm6142
22:20:13   8  GROUP BY pair,trend,gatt
22:20:13   9  ORDER BY pair,trend,gatt
22:20:13  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6494 -.00223082
ech_usd 	-1 up	      3538 .003550196
ech_usd 	-1		43
ech_usd 	 1 nup	      6296 -.00236622
ech_usd 	 1 up	      2857 .003864232
ech_usd 	 1		29

6 rows selected.

Elapsed: 00:00:00.04
22:20:13 SQL> 
22:20:13 SQL> 
22:20:13 SQL> -- Derive NTILE based params:
22:20:13 SQL> 
22:20:13 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.12
22:20:13 SQL> CREATE TABLE svm6162 COMPRESS AS
22:20:13   2  SELECT
22:20:13   3  pair
22:20:13   4  ,ydate
22:20:13   5  ,prdate
22:20:13   6  ,clse
22:20:13   7  ,g6
22:20:13   8  ,gatt
22:20:13   9  ,gattn
22:20:13  10  ,trend
22:20:13  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
22:20:13  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
22:20:13  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
22:20:13  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
22:20:13  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
22:20:13  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
22:20:13  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
22:20:13  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
22:20:13  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
22:20:13  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
22:20:13  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
22:20:13  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
22:20:13  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
22:20:13  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
22:20:13  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
22:20:13  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
22:20:13  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
22:20:13  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
22:20:13  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
22:20:13  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
22:20:13  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
22:20:13  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
22:20:13  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
22:20:13  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
22:20:13  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
22:20:13  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
22:20:13  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
22:20:13  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
22:20:13  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
22:20:13  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
22:20:13  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
22:20:13  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
22:20:13  43  ,hh  att32
22:20:13  44  ,d   att33
22:20:13  45  ,w   att34
22:20:13  46  ,mpm att35
22:20:13  47  ,mph att36
22:20:13  48  ,trend att37
22:20:13  49  FROM svm6142
22:20:13  50  ORDER BY ydate
22:20:13  51  /

Table created.

Elapsed: 00:00:04.80
22:20:18 SQL> 
22:20:18 SQL> -- rpt
22:20:18 SQL> 
22:20:18 SQL> SELECT
22:20:18   2  pair
22:20:18   3  ,trend
22:20:18   4  ,gatt
22:20:18   5  ,COUNT(pair)
22:20:18   6  ,AVG(g6)
22:20:18   7  FROM svm6162
22:20:18   8  GROUP BY pair,trend,gatt
22:20:18   9  ORDER BY pair,trend,gatt
22:20:18  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6494 -.00223082
ech_usd 	-1 up	      3538 .003550196
ech_usd 	-1		43
ech_usd 	 1 nup	      6296 -.00236622
ech_usd 	 1 up	      2857 .003864232
ech_usd 	 1		29

6 rows selected.

Elapsed: 00:00:00.03
22:20:18 SQL> 
22:20:18 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.15
22:20:18 SQL> CREATE TABLE modsrc COMPRESS AS
22:20:18   2  SELECT
22:20:18   3  pair
22:20:18   4  ,ydate
22:20:18   5  ,prdate
22:20:18   6  ,trend
22:20:18   7  ,g6
22:20:18   8  ,gatt
22:20:18   9  ,gattn
22:20:18  10  FROM svm6162
22:20:18  11  /

Table created.

Elapsed: 00:00:00.08
22:20:18 SQL> 
22:20:18 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
22:20:18 SQL> 
22:20:18 SQL> DROP   TABLE ech_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
22:20:18 SQL> CREATE TABLE ech_ms610 COMPRESS AS
22:20:18   2  SELECT
22:20:18   3  ydate
22:20:18   4  ,trend ech_trend
22:20:18   5  ,g6    ech_g6
22:20:18   6  ,gatt  ech_gatt
22:20:18   7  ,gattn ech_gattn
22:20:18   8  FROM modsrc
22:20:18   9  /

Table created.

Elapsed: 00:00:00.06
22:20:19 SQL> 
22:20:19 SQL> ANALYZE TABLE ech_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
22:20:19 SQL> 
22:20:19 SQL> -- I need a copy of the attributes:
22:20:19 SQL> 
22:20:19 SQL> 
22:20:19 SQL> DROP   TABLE ech_att;

Table dropped.

Elapsed: 00:00:00.06
22:20:19 SQL> CREATE TABLE ech_att COMPRESS AS
22:20:19   2  SELECT
22:20:19   3  ydate
22:20:19   4  ,att00 ech_att00
22:20:19   5  ,att01 ech_att01
22:20:19   6  ,att02 ech_att02
22:20:19   7  ,att03 ech_att03
22:20:19   8  ,att04 ech_att04
22:20:19   9  ,att05 ech_att05
22:20:19  10  ,att06 ech_att06
22:20:19  11  ,att07 ech_att07
22:20:19  12  ,att08 ech_att08
22:20:19  13  ,att09 ech_att09
22:20:19  14  ,att10 ech_att10
22:20:19  15  ,att11 ech_att11
22:20:19  16  ,att12 ech_att12
22:20:19  17  ,att13 ech_att13
22:20:19  18  ,att14 ech_att14
22:20:19  19  ,att15 ech_att15
22:20:19  20  ,att16 ech_att16
22:20:19  21  ,att17 ech_att17
22:20:19  22  ,att18 ech_att18
22:20:19  23  ,att19 ech_att19
22:20:19  24  ,att20 ech_att20
22:20:19  25  ,att21 ech_att21
22:20:19  26  ,att22 ech_att22
22:20:19  27  ,att23 ech_att23
22:20:19  28  ,att24 ech_att24
22:20:19  29  ,att25 ech_att25
22:20:19  30  ,att26 ech_att26
22:20:19  31  ,att27 ech_att27
22:20:19  32  ,att28 ech_att28
22:20:19  33  ,att29 ech_att29
22:20:19  34  ,att30 ech_att30
22:20:19  35  ,att31 ech_att31
22:20:19  36  ,att32 ech_att32
22:20:19  37  ,att33 ech_att33
22:20:19  38  ,att34 ech_att34
22:20:19  39  ,att35 ech_att35
22:20:19  40  ,att36 ech_att36
22:20:19  41  ,att37 ech_att37
22:20:19  42  FROM svm6162
22:20:19  43  /

Table created.

Elapsed: 00:00:00.17
22:20:19 SQL> 
22:20:19 SQL> ANALYZE TABLE ech_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
22:20:19 SQL> 
22:20:19 SQL> -- rpt
22:20:19 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19257

Elapsed: 00:00:00.79
22:20:20 SQL> SELECT COUNT(*)FROM ech_att;

  COUNT(*)
----------
     19257

Elapsed: 00:00:00.01
22:20:20 SQL> 
22:20:20 SQL> --
22:20:20 SQL> -- egb610.sql
22:20:20 SQL> --
22:20:20 SQL> 
22:20:20 SQL> -- Creates views and tables for backtesting a forex SVM strategy
22:20:20 SQL> 
22:20:20 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.42
22:20:21 SQL> 
22:20:21 SQL> -- I created di5min here:
22:20:21 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
22:20:21 SQL> 
22:20:21 SQL> CREATE OR REPLACE VIEW svm6102 AS
22:20:21   2  SELECT
22:20:21   3  pair
22:20:21   4  ,ydate
22:20:21   5  ,prdate
22:20:21   6  ,rownum rnum -- acts as t in my time-series
22:20:21   7  ,clse
22:20:21   8  -- Derive a bunch of attributes from clse, the latest price:
22:20:21   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
22:20:21  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
22:20:21  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
22:20:21  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
22:20:21  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
22:20:21  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
22:20:21  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
22:20:21  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
22:20:21  17  --
22:20:21  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
22:20:21  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
22:20:21  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
22:20:21  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
22:20:21  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
22:20:21  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
22:20:21  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
22:20:21  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
22:20:21  26  --
22:20:21  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
22:20:21  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
22:20:21  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
22:20:21  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
22:20:21  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
22:20:21  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
22:20:21  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
22:20:21  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
22:20:21  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
22:20:21  36  FROM di5min WHERE pair LIKE'%egb%'
22:20:21  37  AND ydate > sysdate - 95
22:20:21  38  ORDER BY ydate
22:20:21  39  /

View created.

Elapsed: 00:00:00.05
22:20:21 SQL> 
22:20:21 SQL> -- rpt
22:20:21 SQL> 
22:20:21 SQL> SELECT
22:20:21   2  pair
22:20:21   3  ,COUNT(pair)
22:20:21   4  ,MIN(clse),MAX(clse)
22:20:21   5  ,MIN(avg6),MAX(avg6)
22:20:21   6  ,MIN(ydate),MAX(ydate)
22:20:21   7  FROM svm6102
22:20:21   8  GROUP BY pair
22:20:21   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
egb_usd       19256 .833520557 .893920122 .834199029 .892400287 2010-09-29 22:25:01 2010-12-31 21:55:00

Elapsed: 00:00:00.97
22:20:22 SQL> 
22:20:22 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
22:20:22 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.18
22:20:22 SQL> CREATE TABLE svm6122 COMPRESS AS
22:20:22   2  SELECT
22:20:22   3  pair
22:20:22   4  ,ydate
22:20:22   5  ,prdate
22:20:22   6  ,clse
22:20:22   7  -- g6 is important. I want to predict g6:
22:20:22   8  ,ld6 - clse g6
22:20:22   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
22:20:22  10  -- I want more attributes from the ones I derived above:
22:20:22  11  -- clse relation to moving-min
22:20:22  12  ,clse-min4  cm4
22:20:22  13  ,clse-min6  cm6
22:20:22  14  ,clse-min8  cm8
22:20:22  15  ,clse-min10 cm10
22:20:22  16  ,clse-min12 cm12
22:20:22  17  ,clse-min14 cm14
22:20:22  18  ,clse-min16 cm16
22:20:22  19  ,clse-min18 cm18
22:20:22  20  -- clse relation to moving-avg
22:20:22  21  ,clse-avg4  ca4
22:20:22  22  ,clse-avg6  ca6
22:20:22  23  ,clse-avg8  ca8
22:20:22  24  ,clse-avg10 ca10
22:20:22  25  ,clse-avg12 ca12
22:20:22  26  ,clse-avg14 ca14
22:20:22  27  ,clse-avg16 ca16
22:20:22  28  ,clse-avg18 ca18
22:20:22  29  -- clse relation to moving-max
22:20:22  30  ,clse-max4  cx4
22:20:22  31  ,clse-max6  cx6
22:20:22  32  ,clse-max8  cx8
22:20:22  33  ,clse-max10 cx10
22:20:22  34  ,clse-max12 cx12
22:20:22  35  ,clse-max14 cx14
22:20:22  36  ,clse-max16 cx16
22:20:22  37  ,clse-max18 cx18
22:20:22  38  -- Derive more attributes.
22:20:22  39  -- I want to use CORR() here to help SVM see the shape of the series.
22:20:22  40  -- But COVAR_POP is more stable:
22:20:22  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
22:20:22  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
22:20:22  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
22:20:22  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
22:20:22  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
22:20:22  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
22:20:22  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
22:20:22  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
22:20:22  49  -- Derive date related attributes:
22:20:22  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:20:22  51  ,0+TO_CHAR(ydate,'D')d
22:20:22  52  ,0+TO_CHAR(ydate,'W')w
22:20:22  53  -- mpm stands for minutes-past-midnight:
22:20:22  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:20:22  55  -- mph stands for minutes-past-hour:
22:20:22  56  ,0+TO_CHAR(ydate,'MI')mph
22:20:22  57  FROM svm6102
22:20:22  58  ORDER BY ydate
22:20:22  59  /

Table created.

Elapsed: 00:00:02.45
22:20:24 SQL> 
22:20:24 SQL> -- rpt
22:20:24 SQL> 
22:20:24 SQL> SELECT
22:20:24   2  pair
22:20:24   3  ,COUNT(pair)
22:20:24   4  ,MIN(clse),MAX(clse)
22:20:24   5  ,MIN(ydate),MAX(ydate)
22:20:24   6  FROM svm6122
22:20:24   7  GROUP BY pair
22:20:24   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
egb_usd       19256 .833520557 .893920122 2010-09-29 22:25:01 2010-12-31 21:55:00

Elapsed: 00:00:00.04
22:20:24 SQL> 
22:20:24 SQL> -- Prepare for derivation of NTILE based params:
22:20:24 SQL> 
22:20:24 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.19
22:20:25 SQL> CREATE TABLE svm6142 COMPRESS AS
22:20:25   2  SELECT
22:20:25   3  pair
22:20:25   4  ,ydate
22:20:25   5  ,prdate
22:20:25   6  ,clse
22:20:25   7  ,g6
22:20:25   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
22:20:25   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
22:20:25  10  ,CASE WHEN trend IS NULL THEN 1
22:20:25  11  	    WHEN trend =0      THEN 1
22:20:25  12  	    ELSE trend END trend
22:20:25  13  ,cm4
22:20:25  14  ,cm6
22:20:25  15  ,cm8
22:20:25  16  ,cm10
22:20:25  17  ,cm12
22:20:25  18  ,cm14
22:20:25  19  ,cm16
22:20:25  20  ,cm18
22:20:25  21  --
22:20:25  22  ,ca4
22:20:25  23  ,ca6
22:20:25  24  ,ca8
22:20:25  25  ,ca10
22:20:25  26  ,ca12
22:20:25  27  ,ca14
22:20:25  28  ,ca16
22:20:25  29  ,ca18
22:20:25  30  --
22:20:25  31  ,cx4
22:20:25  32  ,cx6
22:20:25  33  ,cx8
22:20:25  34  ,cx10
22:20:25  35  ,cx12
22:20:25  36  ,cx14
22:20:25  37  ,cx16
22:20:25  38  ,cx18
22:20:25  39  --
22:20:25  40  ,crr4
22:20:25  41  ,crr6
22:20:25  42  ,crr8
22:20:25  43  ,crr10
22:20:25  44  ,crr12
22:20:25  45  ,crr14
22:20:25  46  ,crr16
22:20:25  47  ,crr18
22:20:25  48  --
22:20:25  49  ,hh
22:20:25  50  ,d
22:20:25  51  ,w
22:20:25  52  ,mpm
22:20:25  53  ,mph
22:20:25  54  FROM svm6122
22:20:25  55  ORDER BY ydate
22:20:25  56  /

Table created.

Elapsed: 00:00:00.41
22:20:25 SQL> 
22:20:25 SQL> -- rpt
22:20:25 SQL> 
22:20:25 SQL> SELECT
22:20:25   2  pair
22:20:25   3  ,trend
22:20:25   4  ,gatt
22:20:25   5  ,COUNT(pair)
22:20:25   6  ,AVG(g6)
22:20:25   7  FROM svm6142
22:20:25   8  GROUP BY pair,trend,gatt
22:20:25   9  ORDER BY pair,trend,gatt
22:20:25  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7294 -.00100886
egb_usd 	-1 up	      2667 .002927443
egb_usd 	-1		69
egb_usd 	 1 nup	      6554 -.00131376
egb_usd 	 1 up	      2669 .002969478
egb_usd 	 1		 3

6 rows selected.

Elapsed: 00:00:00.04
22:20:25 SQL> 
22:20:25 SQL> 
22:20:25 SQL> -- Derive NTILE based params:
22:20:25 SQL> 
22:20:25 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.12
22:20:25 SQL> CREATE TABLE svm6162 COMPRESS AS
22:20:25   2  SELECT
22:20:25   3  pair
22:20:25   4  ,ydate
22:20:25   5  ,prdate
22:20:25   6  ,clse
22:20:25   7  ,g6
22:20:25   8  ,gatt
22:20:25   9  ,gattn
22:20:25  10  ,trend
22:20:25  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
22:20:25  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
22:20:25  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
22:20:25  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
22:20:25  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
22:20:25  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
22:20:25  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
22:20:25  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
22:20:25  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
22:20:25  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
22:20:25  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
22:20:25  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
22:20:25  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
22:20:25  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
22:20:25  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
22:20:25  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
22:20:25  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
22:20:25  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
22:20:25  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
22:20:25  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
22:20:25  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
22:20:25  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
22:20:25  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
22:20:25  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
22:20:25  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
22:20:25  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
22:20:25  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
22:20:25  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
22:20:25  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
22:20:25  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
22:20:25  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
22:20:25  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
22:20:25  43  ,hh  att32
22:20:25  44  ,d   att33
22:20:25  45  ,w   att34
22:20:25  46  ,mpm att35
22:20:25  47  ,mph att36
22:20:25  48  ,trend att37
22:20:25  49  FROM svm6142
22:20:25  50  ORDER BY ydate
22:20:25  51  /

Table created.

Elapsed: 00:00:05.52
22:20:31 SQL> 
22:20:31 SQL> -- rpt
22:20:31 SQL> 
22:20:31 SQL> SELECT
22:20:31   2  pair
22:20:31   3  ,trend
22:20:31   4  ,gatt
22:20:31   5  ,COUNT(pair)
22:20:31   6  ,AVG(g6)
22:20:31   7  FROM svm6162
22:20:31   8  GROUP BY pair,trend,gatt
22:20:31   9  ORDER BY pair,trend,gatt
22:20:31  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7294 -.00100886
egb_usd 	-1 up	      2667 .002927443
egb_usd 	-1		69
egb_usd 	 1 nup	      6554 -.00131376
egb_usd 	 1 up	      2669 .002969478
egb_usd 	 1		 3

6 rows selected.

Elapsed: 00:00:00.03
22:20:31 SQL> 
22:20:31 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
22:20:31 SQL> CREATE TABLE modsrc COMPRESS AS
22:20:31   2  SELECT
22:20:31   3  pair
22:20:31   4  ,ydate
22:20:31   5  ,prdate
22:20:31   6  ,trend
22:20:31   7  ,g6
22:20:31   8  ,gatt
22:20:31   9  ,gattn
22:20:31  10  FROM svm6162
22:20:31  11  /

Table created.

Elapsed: 00:00:00.08
22:20:31 SQL> 
22:20:31 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.28
22:20:31 SQL> 
22:20:31 SQL> DROP   TABLE egb_ms610 ;

Table dropped.

Elapsed: 00:00:00.06
22:20:31 SQL> CREATE TABLE egb_ms610 COMPRESS AS
22:20:31   2  SELECT
22:20:31   3  ydate
22:20:31   4  ,trend egb_trend
22:20:31   5  ,g6    egb_g6
22:20:31   6  ,gatt  egb_gatt
22:20:31   7  ,gattn egb_gattn
22:20:31   8  FROM modsrc
22:20:31   9  /

Table created.

Elapsed: 00:00:00.06
22:20:31 SQL> 
22:20:31 SQL> ANALYZE TABLE egb_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
22:20:31 SQL> 
22:20:31 SQL> -- I need a copy of the attributes:
22:20:31 SQL> 
22:20:31 SQL> 
22:20:31 SQL> DROP   TABLE egb_att;

Table dropped.

Elapsed: 00:00:00.07
22:20:32 SQL> CREATE TABLE egb_att COMPRESS AS
22:20:32   2  SELECT
22:20:32   3  ydate
22:20:32   4  ,att00 egb_att00
22:20:32   5  ,att01 egb_att01
22:20:32   6  ,att02 egb_att02
22:20:32   7  ,att03 egb_att03
22:20:32   8  ,att04 egb_att04
22:20:32   9  ,att05 egb_att05
22:20:32  10  ,att06 egb_att06
22:20:32  11  ,att07 egb_att07
22:20:32  12  ,att08 egb_att08
22:20:32  13  ,att09 egb_att09
22:20:32  14  ,att10 egb_att10
22:20:32  15  ,att11 egb_att11
22:20:32  16  ,att12 egb_att12
22:20:32  17  ,att13 egb_att13
22:20:32  18  ,att14 egb_att14
22:20:32  19  ,att15 egb_att15
22:20:32  20  ,att16 egb_att16
22:20:32  21  ,att17 egb_att17
22:20:32  22  ,att18 egb_att18
22:20:32  23  ,att19 egb_att19
22:20:32  24  ,att20 egb_att20
22:20:32  25  ,att21 egb_att21
22:20:32  26  ,att22 egb_att22
22:20:32  27  ,att23 egb_att23
22:20:32  28  ,att24 egb_att24
22:20:32  29  ,att25 egb_att25
22:20:32  30  ,att26 egb_att26
22:20:32  31  ,att27 egb_att27
22:20:32  32  ,att28 egb_att28
22:20:32  33  ,att29 egb_att29
22:20:32  34  ,att30 egb_att30
22:20:32  35  ,att31 egb_att31
22:20:32  36  ,att32 egb_att32
22:20:32  37  ,att33 egb_att33
22:20:32  38  ,att34 egb_att34
22:20:32  39  ,att35 egb_att35
22:20:32  40  ,att36 egb_att36
22:20:32  41  ,att37 egb_att37
22:20:32  42  FROM svm6162
22:20:32  43  /

Table created.

Elapsed: 00:00:00.18
22:20:32 SQL> 
22:20:32 SQL> ANALYZE TABLE egb_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
22:20:32 SQL> 
22:20:32 SQL> -- rpt
22:20:32 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19256

Elapsed: 00:00:00.93
22:20:33 SQL> SELECT COUNT(*)FROM egb_att;

  COUNT(*)
----------
     19256

Elapsed: 00:00:00.00
22:20:33 SQL> 
22:20:33 SQL> --
22:20:33 SQL> -- ejp610.sql
22:20:33 SQL> --
22:20:33 SQL> 
22:20:33 SQL> -- Creates views and tables for backtesting a forex SVM strategy
22:20:33 SQL> 
22:20:33 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.47
22:20:34 SQL> 
22:20:34 SQL> -- I created di5min here:
22:20:34 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
22:20:34 SQL> 
22:20:34 SQL> CREATE OR REPLACE VIEW svm6102 AS
22:20:34   2  SELECT
22:20:34   3  pair
22:20:34   4  ,ydate
22:20:34   5  ,prdate
22:20:34   6  ,rownum rnum -- acts as t in my time-series
22:20:34   7  ,clse
22:20:34   8  -- Derive a bunch of attributes from clse, the latest price:
22:20:34   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
22:20:34  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
22:20:34  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
22:20:34  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
22:20:34  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
22:20:34  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
22:20:34  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
22:20:34  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
22:20:34  17  --
22:20:34  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
22:20:34  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
22:20:34  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
22:20:34  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
22:20:34  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
22:20:34  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
22:20:34  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
22:20:34  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
22:20:34  26  --
22:20:34  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
22:20:34  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
22:20:34  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
22:20:34  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
22:20:34  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
22:20:34  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
22:20:34  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
22:20:34  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
22:20:34  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
22:20:34  36  FROM di5min WHERE pair LIKE'%ejp%'
22:20:34  37  AND ydate > sysdate - 95
22:20:34  38  ORDER BY ydate
22:20:34  39  /

View created.

Elapsed: 00:00:00.05
22:20:34 SQL> 
22:20:34 SQL> -- rpt
22:20:34 SQL> 
22:20:34 SQL> SELECT
22:20:34   2  pair
22:20:34   3  ,COUNT(pair)
22:20:34   4  ,MIN(clse),MAX(clse)
22:20:34   5  ,MIN(avg6),MAX(avg6)
22:20:34   6  ,MIN(ydate),MAX(ydate)
22:20:34   7  FROM svm6102
22:20:34   8  GROUP BY pair
22:20:34   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ejp_usd       19254 107.643765	115.63485 107.776148 115.509678 2010-09-29 22:25:01 2010-12-31 21:55:00

Elapsed: 00:00:00.84
22:20:34 SQL> 
22:20:34 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
22:20:34 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.75
22:20:35 SQL> CREATE TABLE svm6122 COMPRESS AS
22:20:35   2  SELECT
22:20:35   3  pair
22:20:35   4  ,ydate
22:20:35   5  ,prdate
22:20:35   6  ,clse
22:20:35   7  -- g6 is important. I want to predict g6:
22:20:35   8  ,ld6 - clse g6
22:20:35   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
22:20:35  10  -- I want more attributes from the ones I derived above:
22:20:35  11  -- clse relation to moving-min
22:20:35  12  ,clse-min4  cm4
22:20:35  13  ,clse-min6  cm6
22:20:35  14  ,clse-min8  cm8
22:20:35  15  ,clse-min10 cm10
22:20:35  16  ,clse-min12 cm12
22:20:35  17  ,clse-min14 cm14
22:20:35  18  ,clse-min16 cm16
22:20:35  19  ,clse-min18 cm18
22:20:35  20  -- clse relation to moving-avg
22:20:35  21  ,clse-avg4  ca4
22:20:35  22  ,clse-avg6  ca6
22:20:35  23  ,clse-avg8  ca8
22:20:35  24  ,clse-avg10 ca10
22:20:35  25  ,clse-avg12 ca12
22:20:35  26  ,clse-avg14 ca14
22:20:35  27  ,clse-avg16 ca16
22:20:35  28  ,clse-avg18 ca18
22:20:35  29  -- clse relation to moving-max
22:20:35  30  ,clse-max4  cx4
22:20:35  31  ,clse-max6  cx6
22:20:35  32  ,clse-max8  cx8
22:20:35  33  ,clse-max10 cx10
22:20:35  34  ,clse-max12 cx12
22:20:35  35  ,clse-max14 cx14
22:20:35  36  ,clse-max16 cx16
22:20:35  37  ,clse-max18 cx18
22:20:35  38  -- Derive more attributes.
22:20:35  39  -- I want to use CORR() here to help SVM see the shape of the series.
22:20:35  40  -- But COVAR_POP is more stable:
22:20:35  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
22:20:35  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
22:20:35  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
22:20:35  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
22:20:35  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
22:20:35  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
22:20:35  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
22:20:35  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
22:20:35  49  -- Derive date related attributes:
22:20:35  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:20:35  51  ,0+TO_CHAR(ydate,'D')d
22:20:35  52  ,0+TO_CHAR(ydate,'W')w
22:20:35  53  -- mpm stands for minutes-past-midnight:
22:20:35  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:20:35  55  -- mph stands for minutes-past-hour:
22:20:35  56  ,0+TO_CHAR(ydate,'MI')mph
22:20:35  57  FROM svm6102
22:20:35  58  ORDER BY ydate
22:20:35  59  /

Table created.

Elapsed: 00:00:02.05
22:20:37 SQL> 
22:20:37 SQL> -- rpt
22:20:37 SQL> 
22:20:37 SQL> SELECT
22:20:37   2  pair
22:20:37   3  ,COUNT(pair)
22:20:37   4  ,MIN(clse),MAX(clse)
22:20:37   5  ,MIN(ydate),MAX(ydate)
22:20:37   6  FROM svm6122
22:20:37   7  GROUP BY pair
22:20:37   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ejp_usd       19254 107.643765	115.63485 2010-09-29 22:25:01 2010-12-31 21:55:00

Elapsed: 00:00:00.04
22:20:37 SQL> 
22:20:37 SQL> -- Prepare for derivation of NTILE based params:
22:20:37 SQL> 
22:20:37 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.19
22:20:37 SQL> CREATE TABLE svm6142 COMPRESS AS
22:20:37   2  SELECT
22:20:37   3  pair
22:20:37   4  ,ydate
22:20:37   5  ,prdate
22:20:37   6  ,clse
22:20:37   7  ,g6
22:20:37   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
22:20:37   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
22:20:37  10  ,CASE WHEN trend IS NULL THEN 1
22:20:37  11  	    WHEN trend =0      THEN 1
22:20:37  12  	    ELSE trend END trend
22:20:37  13  ,cm4
22:20:37  14  ,cm6
22:20:37  15  ,cm8
22:20:37  16  ,cm10
22:20:37  17  ,cm12
22:20:37  18  ,cm14
22:20:37  19  ,cm16
22:20:37  20  ,cm18
22:20:37  21  --
22:20:37  22  ,ca4
22:20:37  23  ,ca6
22:20:37  24  ,ca8
22:20:37  25  ,ca10
22:20:37  26  ,ca12
22:20:37  27  ,ca14
22:20:37  28  ,ca16
22:20:37  29  ,ca18
22:20:37  30  --
22:20:37  31  ,cx4
22:20:37  32  ,cx6
22:20:37  33  ,cx8
22:20:37  34  ,cx10
22:20:37  35  ,cx12
22:20:37  36  ,cx14
22:20:37  37  ,cx16
22:20:37  38  ,cx18
22:20:37  39  --
22:20:37  40  ,crr4
22:20:37  41  ,crr6
22:20:37  42  ,crr8
22:20:37  43  ,crr10
22:20:37  44  ,crr12
22:20:37  45  ,crr14
22:20:37  46  ,crr16
22:20:37  47  ,crr18
22:20:37  48  --
22:20:37  49  ,hh
22:20:37  50  ,d
22:20:37  51  ,w
22:20:37  52  ,mpm
22:20:37  53  ,mph
22:20:37  54  FROM svm6122
22:20:37  55  ORDER BY ydate
22:20:37  56  /

Table created.

Elapsed: 00:00:00.42
22:20:38 SQL> 
22:20:38 SQL> -- rpt
22:20:38 SQL> 
22:20:38 SQL> SELECT
22:20:38   2  pair
22:20:38   3  ,trend
22:20:38   4  ,gatt
22:20:38   5  ,COUNT(pair)
22:20:38   6  ,AVG(g6)
22:20:38   7  FROM svm6142
22:20:38   8  GROUP BY pair,trend,gatt
22:20:38   9  ORDER BY pair,trend,gatt
22:20:38  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      4800 -.32705454
ejp_usd 	-1 up	      4862 .269593514
ejp_usd 	-1		60
ejp_usd 	 1 nup	      4901 -.28990568
ejp_usd 	 1 up	      4619  .28079333
ejp_usd 	 1		12

6 rows selected.

Elapsed: 00:00:00.04
22:20:38 SQL> 
22:20:38 SQL> 
22:20:38 SQL> -- Derive NTILE based params:
22:20:38 SQL> 
22:20:38 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.14
22:20:38 SQL> CREATE TABLE svm6162 COMPRESS AS
22:20:38   2  SELECT
22:20:38   3  pair
22:20:38   4  ,ydate
22:20:38   5  ,prdate
22:20:38   6  ,clse
22:20:38   7  ,g6
22:20:38   8  ,gatt
22:20:38   9  ,gattn
22:20:38  10  ,trend
22:20:38  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
22:20:38  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
22:20:38  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
22:20:38  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
22:20:38  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
22:20:38  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
22:20:38  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
22:20:38  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
22:20:38  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
22:20:38  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
22:20:38  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
22:20:38  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
22:20:38  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
22:20:38  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
22:20:38  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
22:20:38  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
22:20:38  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
22:20:38  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
22:20:38  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
22:20:38  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
22:20:38  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
22:20:38  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
22:20:38  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
22:20:38  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
22:20:38  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
22:20:38  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
22:20:38  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
22:20:38  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
22:20:38  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
22:20:38  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
22:20:38  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
22:20:38  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
22:20:38  43  ,hh  att32
22:20:38  44  ,d   att33
22:20:38  45  ,w   att34
22:20:38  46  ,mpm att35
22:20:38  47  ,mph att36
22:20:38  48  ,trend att37
22:20:38  49  FROM svm6142
22:20:38  50  ORDER BY ydate
22:20:38  51  /

Table created.

Elapsed: 00:00:04.73
22:20:43 SQL> 
22:20:43 SQL> -- rpt
22:20:43 SQL> 
22:20:43 SQL> SELECT
22:20:43   2  pair
22:20:43   3  ,trend
22:20:43   4  ,gatt
22:20:43   5  ,COUNT(pair)
22:20:43   6  ,AVG(g6)
22:20:43   7  FROM svm6162
22:20:43   8  GROUP BY pair,trend,gatt
22:20:43   9  ORDER BY pair,trend,gatt
22:20:43  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      4800 -.32705454
ejp_usd 	-1 up	      4862 .269593514
ejp_usd 	-1		60
ejp_usd 	 1 nup	      4901 -.28990568
ejp_usd 	 1 up	      4619  .28079333
ejp_usd 	 1		12

6 rows selected.

Elapsed: 00:00:00.03
22:20:43 SQL> 
22:20:43 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.17
22:20:43 SQL> CREATE TABLE modsrc COMPRESS AS
22:20:43   2  SELECT
22:20:43   3  pair
22:20:43   4  ,ydate
22:20:43   5  ,prdate
22:20:43   6  ,trend
22:20:43   7  ,g6
22:20:43   8  ,gatt
22:20:43   9  ,gattn
22:20:43  10  FROM svm6162
22:20:43  11  /

Table created.

Elapsed: 00:00:00.08
22:20:43 SQL> 
22:20:43 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
22:20:43 SQL> 
22:20:43 SQL> DROP   TABLE ejp_ms610 ;

Table dropped.

Elapsed: 00:00:00.08
22:20:43 SQL> CREATE TABLE ejp_ms610 COMPRESS AS
22:20:43   2  SELECT
22:20:43   3  ydate
22:20:43   4  ,trend ejp_trend
22:20:43   5  ,g6    ejp_g6
22:20:43   6  ,gatt  ejp_gatt
22:20:43   7  ,gattn ejp_gattn
22:20:43   8  FROM modsrc
22:20:43   9  /

Table created.

Elapsed: 00:00:00.07
22:20:43 SQL> 
22:20:43 SQL> ANALYZE TABLE ejp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
22:20:44 SQL> 
22:20:44 SQL> -- I need a copy of the attributes:
22:20:44 SQL> 
22:20:44 SQL> 
22:20:44 SQL> DROP   TABLE ejp_att;

Table dropped.

Elapsed: 00:00:00.05
22:20:44 SQL> CREATE TABLE ejp_att COMPRESS AS
22:20:44   2  SELECT
22:20:44   3  ydate
22:20:44   4  ,att00 ejp_att00
22:20:44   5  ,att01 ejp_att01
22:20:44   6  ,att02 ejp_att02
22:20:44   7  ,att03 ejp_att03
22:20:44   8  ,att04 ejp_att04
22:20:44   9  ,att05 ejp_att05
22:20:44  10  ,att06 ejp_att06
22:20:44  11  ,att07 ejp_att07
22:20:44  12  ,att08 ejp_att08
22:20:44  13  ,att09 ejp_att09
22:20:44  14  ,att10 ejp_att10
22:20:44  15  ,att11 ejp_att11
22:20:44  16  ,att12 ejp_att12
22:20:44  17  ,att13 ejp_att13
22:20:44  18  ,att14 ejp_att14
22:20:44  19  ,att15 ejp_att15
22:20:44  20  ,att16 ejp_att16
22:20:44  21  ,att17 ejp_att17
22:20:44  22  ,att18 ejp_att18
22:20:44  23  ,att19 ejp_att19
22:20:44  24  ,att20 ejp_att20
22:20:44  25  ,att21 ejp_att21
22:20:44  26  ,att22 ejp_att22
22:20:44  27  ,att23 ejp_att23
22:20:44  28  ,att24 ejp_att24
22:20:44  29  ,att25 ejp_att25
22:20:44  30  ,att26 ejp_att26
22:20:44  31  ,att27 ejp_att27
22:20:44  32  ,att28 ejp_att28
22:20:44  33  ,att29 ejp_att29
22:20:44  34  ,att30 ejp_att30
22:20:44  35  ,att31 ejp_att31
22:20:44  36  ,att32 ejp_att32
22:20:44  37  ,att33 ejp_att33
22:20:44  38  ,att34 ejp_att34
22:20:44  39  ,att35 ejp_att35
22:20:44  40  ,att36 ejp_att36
22:20:44  41  ,att37 ejp_att37
22:20:44  42  FROM svm6162
22:20:44  43  /

Table created.

Elapsed: 00:00:00.16
22:20:44 SQL> 
22:20:44 SQL> ANALYZE TABLE ejp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
22:20:44 SQL> 
22:20:44 SQL> -- rpt
22:20:44 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19254

Elapsed: 00:00:00.83
22:20:45 SQL> SELECT COUNT(*)FROM ejp_att;

  COUNT(*)
----------
     19254

Elapsed: 00:00:00.00
22:20:45 SQL> 
22:20:45 SQL> --
22:20:45 SQL> -- ajp610.sql
22:20:45 SQL> --
22:20:45 SQL> 
22:20:45 SQL> -- Creates views and tables for backtesting a forex SVM strategy
22:20:45 SQL> 
22:20:45 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.35
22:20:45 SQL> 
22:20:45 SQL> -- I created di5min here:
22:20:45 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
22:20:45 SQL> 
22:20:45 SQL> CREATE OR REPLACE VIEW svm6102 AS
22:20:45   2  SELECT
22:20:45   3  pair
22:20:45   4  ,ydate
22:20:45   5  ,prdate
22:20:45   6  ,rownum rnum -- acts as t in my time-series
22:20:45   7  ,clse
22:20:45   8  -- Derive a bunch of attributes from clse, the latest price:
22:20:45   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
22:20:45  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
22:20:45  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
22:20:45  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
22:20:45  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
22:20:45  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
22:20:45  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
22:20:45  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
22:20:45  17  --
22:20:45  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
22:20:45  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
22:20:45  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
22:20:45  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
22:20:45  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
22:20:45  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
22:20:45  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
22:20:45  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
22:20:45  26  --
22:20:45  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
22:20:45  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
22:20:45  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
22:20:45  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
22:20:45  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
22:20:45  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
22:20:45  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
22:20:45  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
22:20:45  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
22:20:45  36  FROM di5min WHERE pair LIKE'%ajp%'
22:20:45  37  AND ydate > sysdate - 95
22:20:45  38  ORDER BY ydate
22:20:45  39  /

View created.

Elapsed: 00:00:00.06
22:20:46 SQL> 
22:20:46 SQL> -- rpt
22:20:46 SQL> 
22:20:46 SQL> SELECT
22:20:46   2  pair
22:20:46   3  ,COUNT(pair)
22:20:46   4  ,MIN(clse),MAX(clse)
22:20:46   5  ,MIN(avg6),MAX(avg6)
22:20:46   6  ,MIN(ydate),MAX(ydate)
22:20:46   7  FROM svm6102
22:20:46   8  GROUP BY pair
22:20:46   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ajp_usd       19251  78.249976 83.6669853 78.5106193  83.546306 2010-09-29 22:25:01 2010-12-31 21:55:00

Elapsed: 00:00:00.76
22:20:46 SQL> 
22:20:46 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
22:20:46 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.19
22:20:47 SQL> CREATE TABLE svm6122 COMPRESS AS
22:20:47   2  SELECT
22:20:47   3  pair
22:20:47   4  ,ydate
22:20:47   5  ,prdate
22:20:47   6  ,clse
22:20:47   7  -- g6 is important. I want to predict g6:
22:20:47   8  ,ld6 - clse g6
22:20:47   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
22:20:47  10  -- I want more attributes from the ones I derived above:
22:20:47  11  -- clse relation to moving-min
22:20:47  12  ,clse-min4  cm4
22:20:47  13  ,clse-min6  cm6
22:20:47  14  ,clse-min8  cm8
22:20:47  15  ,clse-min10 cm10
22:20:47  16  ,clse-min12 cm12
22:20:47  17  ,clse-min14 cm14
22:20:47  18  ,clse-min16 cm16
22:20:47  19  ,clse-min18 cm18
22:20:47  20  -- clse relation to moving-avg
22:20:47  21  ,clse-avg4  ca4
22:20:47  22  ,clse-avg6  ca6
22:20:47  23  ,clse-avg8  ca8
22:20:47  24  ,clse-avg10 ca10
22:20:47  25  ,clse-avg12 ca12
22:20:47  26  ,clse-avg14 ca14
22:20:47  27  ,clse-avg16 ca16
22:20:47  28  ,clse-avg18 ca18
22:20:47  29  -- clse relation to moving-max
22:20:47  30  ,clse-max4  cx4
22:20:47  31  ,clse-max6  cx6
22:20:47  32  ,clse-max8  cx8
22:20:47  33  ,clse-max10 cx10
22:20:47  34  ,clse-max12 cx12
22:20:47  35  ,clse-max14 cx14
22:20:47  36  ,clse-max16 cx16
22:20:47  37  ,clse-max18 cx18
22:20:47  38  -- Derive more attributes.
22:20:47  39  -- I want to use CORR() here to help SVM see the shape of the series.
22:20:47  40  -- But COVAR_POP is more stable:
22:20:47  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
22:20:47  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
22:20:47  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
22:20:47  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
22:20:47  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
22:20:47  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
22:20:47  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
22:20:47  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
22:20:47  49  -- Derive date related attributes:
22:20:47  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:20:47  51  ,0+TO_CHAR(ydate,'D')d
22:20:47  52  ,0+TO_CHAR(ydate,'W')w
22:20:47  53  -- mpm stands for minutes-past-midnight:
22:20:47  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:20:47  55  -- mph stands for minutes-past-hour:
22:20:47  56  ,0+TO_CHAR(ydate,'MI')mph
22:20:47  57  FROM svm6102
22:20:47  58  ORDER BY ydate
22:20:47  59  /

Table created.

Elapsed: 00:00:01.99
22:20:48 SQL> 
22:20:48 SQL> -- rpt
22:20:48 SQL> 
22:20:48 SQL> SELECT
22:20:48   2  pair
22:20:48   3  ,COUNT(pair)
22:20:48   4  ,MIN(clse),MAX(clse)
22:20:48   5  ,MIN(ydate),MAX(ydate)
22:20:48   6  FROM svm6122
22:20:48   7  GROUP BY pair
22:20:48   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ajp_usd       19251  78.249976 83.6669853 2010-09-29 22:25:01 2010-12-31 21:55:00

Elapsed: 00:00:00.04
22:20:49 SQL> 
22:20:49 SQL> -- Prepare for derivation of NTILE based params:
22:20:49 SQL> 
22:20:49 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.20
22:20:49 SQL> CREATE TABLE svm6142 COMPRESS AS
22:20:49   2  SELECT
22:20:49   3  pair
22:20:49   4  ,ydate
22:20:49   5  ,prdate
22:20:49   6  ,clse
22:20:49   7  ,g6
22:20:49   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
22:20:49   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
22:20:49  10  ,CASE WHEN trend IS NULL THEN 1
22:20:49  11  	    WHEN trend =0      THEN 1
22:20:49  12  	    ELSE trend END trend
22:20:49  13  ,cm4
22:20:49  14  ,cm6
22:20:49  15  ,cm8
22:20:49  16  ,cm10
22:20:49  17  ,cm12
22:20:49  18  ,cm14
22:20:49  19  ,cm16
22:20:49  20  ,cm18
22:20:49  21  --
22:20:49  22  ,ca4
22:20:49  23  ,ca6
22:20:49  24  ,ca8
22:20:49  25  ,ca10
22:20:49  26  ,ca12
22:20:49  27  ,ca14
22:20:49  28  ,ca16
22:20:49  29  ,ca18
22:20:49  30  --
22:20:49  31  ,cx4
22:20:49  32  ,cx6
22:20:49  33  ,cx8
22:20:49  34  ,cx10
22:20:49  35  ,cx12
22:20:49  36  ,cx14
22:20:49  37  ,cx16
22:20:49  38  ,cx18
22:20:49  39  --
22:20:49  40  ,crr4
22:20:49  41  ,crr6
22:20:49  42  ,crr8
22:20:49  43  ,crr10
22:20:49  44  ,crr12
22:20:49  45  ,crr14
22:20:49  46  ,crr16
22:20:49  47  ,crr18
22:20:49  48  --
22:20:49  49  ,hh
22:20:49  50  ,d
22:20:49  51  ,w
22:20:49  52  ,mpm
22:20:49  53  ,mph
22:20:49  54  FROM svm6122
22:20:49  55  ORDER BY ydate
22:20:49  56  /

Table created.

Elapsed: 00:00:00.37
22:20:49 SQL> 
22:20:49 SQL> -- rpt
22:20:49 SQL> 
22:20:49 SQL> SELECT
22:20:49   2  pair
22:20:49   3  ,trend
22:20:49   4  ,gatt
22:20:49   5  ,COUNT(pair)
22:20:49   6  ,AVG(g6)
22:20:49   7  FROM svm6142
22:20:49   8  GROUP BY pair,trend,gatt
22:20:49   9  ORDER BY pair,trend,gatt
22:20:49  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ajp_usd 	-1 nup	      4089 -.22920372
ajp_usd 	-1 up	      5148 .222089358
ajp_usd 	 1 nup	      5161 -.20208849
ajp_usd 	 1 up	      4781   .2055591
ajp_usd 	 1		72

Elapsed: 00:00:00.04
22:20:49 SQL> 
22:20:49 SQL> 
22:20:49 SQL> -- Derive NTILE based params:
22:20:49 SQL> 
22:20:49 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.12
22:20:49 SQL> CREATE TABLE svm6162 COMPRESS AS
22:20:49   2  SELECT
22:20:49   3  pair
22:20:49   4  ,ydate
22:20:49   5  ,prdate
22:20:49   6  ,clse
22:20:49   7  ,g6
22:20:49   8  ,gatt
22:20:49   9  ,gattn
22:20:49  10  ,trend
22:20:49  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
22:20:49  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
22:20:49  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
22:20:49  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
22:20:49  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
22:20:49  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
22:20:49  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
22:20:49  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
22:20:49  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
22:20:49  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
22:20:49  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
22:20:49  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
22:20:49  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
22:20:49  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
22:20:49  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
22:20:49  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
22:20:49  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
22:20:49  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
22:20:49  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
22:20:49  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
22:20:49  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
22:20:49  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
22:20:49  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
22:20:49  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
22:20:49  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
22:20:49  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
22:20:49  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
22:20:49  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
22:20:49  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
22:20:49  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
22:20:49  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
22:20:49  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
22:20:49  43  ,hh  att32
22:20:49  44  ,d   att33
22:20:49  45  ,w   att34
22:20:49  46  ,mpm att35
22:20:49  47  ,mph att36
22:20:49  48  ,trend att37
22:20:49  49  FROM svm6142
22:20:49  50  ORDER BY ydate
22:20:49  51  /

Table created.

Elapsed: 00:00:04.89
22:20:54 SQL> 
22:20:54 SQL> -- rpt
22:20:54 SQL> 
22:20:54 SQL> SELECT
22:20:54   2  pair
22:20:54   3  ,trend
22:20:54   4  ,gatt
22:20:54   5  ,COUNT(pair)
22:20:54   6  ,AVG(g6)
22:20:54   7  FROM svm6162
22:20:54   8  GROUP BY pair,trend,gatt
22:20:54   9  ORDER BY pair,trend,gatt
22:20:54  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ajp_usd 	-1 nup	      4089 -.22920372
ajp_usd 	-1 up	      5148 .222089358
ajp_usd 	 1 nup	      5161 -.20208849
ajp_usd 	 1 up	      4781   .2055591
ajp_usd 	 1		72

Elapsed: 00:00:00.03
22:20:54 SQL> 
22:20:54 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.11
22:20:54 SQL> CREATE TABLE modsrc COMPRESS AS
22:20:54   2  SELECT
22:20:54   3  pair
22:20:54   4  ,ydate
22:20:54   5  ,prdate
22:20:54   6  ,trend
22:20:54   7  ,g6
22:20:54   8  ,gatt
22:20:54   9  ,gattn
22:20:54  10  FROM svm6162
22:20:54  11  /

Table created.

Elapsed: 00:00:00.08
22:20:54 SQL> 
22:20:54 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
22:20:55 SQL> 
22:20:55 SQL> DROP   TABLE ajp_ms610 ;

Table dropped.

Elapsed: 00:00:00.06
22:20:55 SQL> CREATE TABLE ajp_ms610 COMPRESS AS
22:20:55   2  SELECT
22:20:55   3  ydate
22:20:55   4  ,trend ajp_trend
22:20:55   5  ,g6    ajp_g6
22:20:55   6  ,gatt  ajp_gatt
22:20:55   7  ,gattn ajp_gattn
22:20:55   8  FROM modsrc
22:20:55   9  /

Table created.

Elapsed: 00:00:00.08
22:20:55 SQL> 
22:20:55 SQL> ANALYZE TABLE ajp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
22:20:55 SQL> 
22:20:55 SQL> -- I need a copy of the attributes:
22:20:55 SQL> 
22:20:55 SQL> 
22:20:55 SQL> DROP   TABLE ajp_att;

Table dropped.

Elapsed: 00:00:00.04
22:20:55 SQL> CREATE TABLE ajp_att COMPRESS AS
22:20:55   2  SELECT
22:20:55   3  ydate
22:20:55   4  ,att00 ajp_att00
22:20:55   5  ,att01 ajp_att01
22:20:55   6  ,att02 ajp_att02
22:20:55   7  ,att03 ajp_att03
22:20:55   8  ,att04 ajp_att04
22:20:55   9  ,att05 ajp_att05
22:20:55  10  ,att06 ajp_att06
22:20:55  11  ,att07 ajp_att07
22:20:55  12  ,att08 ajp_att08
22:20:55  13  ,att09 ajp_att09
22:20:55  14  ,att10 ajp_att10
22:20:55  15  ,att11 ajp_att11
22:20:55  16  ,att12 ajp_att12
22:20:55  17  ,att13 ajp_att13
22:20:55  18  ,att14 ajp_att14
22:20:55  19  ,att15 ajp_att15
22:20:55  20  ,att16 ajp_att16
22:20:55  21  ,att17 ajp_att17
22:20:55  22  ,att18 ajp_att18
22:20:55  23  ,att19 ajp_att19
22:20:55  24  ,att20 ajp_att20
22:20:55  25  ,att21 ajp_att21
22:20:55  26  ,att22 ajp_att22
22:20:55  27  ,att23 ajp_att23
22:20:55  28  ,att24 ajp_att24
22:20:55  29  ,att25 ajp_att25
22:20:55  30  ,att26 ajp_att26
22:20:55  31  ,att27 ajp_att27
22:20:55  32  ,att28 ajp_att28
22:20:55  33  ,att29 ajp_att29
22:20:55  34  ,att30 ajp_att30
22:20:55  35  ,att31 ajp_att31
22:20:55  36  ,att32 ajp_att32
22:20:55  37  ,att33 ajp_att33
22:20:55  38  ,att34 ajp_att34
22:20:55  39  ,att35 ajp_att35
22:20:55  40  ,att36 ajp_att36
22:20:55  41  ,att37 ajp_att37
22:20:55  42  FROM svm6162
22:20:55  43  /

Table created.

Elapsed: 00:00:00.25
22:20:55 SQL> 
22:20:55 SQL> ANALYZE TABLE ajp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.43
22:20:56 SQL> 
22:20:56 SQL> -- rpt
22:20:56 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19251

Elapsed: 00:00:00.75
22:20:56 SQL> SELECT COUNT(*)FROM ajp_att;

  COUNT(*)
----------
     19251

Elapsed: 00:00:00.01
22:20:56 SQL> 
22:20:56 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
