
SQL*Plus: Release 11.2.0.1.0 Production on Thu Jan 6 15:37:14 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

15:37:14 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
15:37:14 SQL> 15:37:14 SQL> --
15:37:14 SQL> -- eur610.sql
15:37:14 SQL> --
15:37:14 SQL> 
15:37:14 SQL> -- Creates views and tables for backtesting a forex SVM strategy
15:37:14 SQL> 
15:37:14 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.02
15:37:14 SQL> 
15:37:14 SQL> -- I created di5min here:
15:37:14 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
15:37:14 SQL> 
15:37:14 SQL> CREATE OR REPLACE VIEW svm6102 AS
15:37:14   2  SELECT
15:37:14   3  pair
15:37:14   4  ,ydate
15:37:14   5  ,prdate
15:37:14   6  ,rownum rnum -- acts as t in my time-series
15:37:14   7  ,clse
15:37:14   8  -- Derive a bunch of attributes from clse, the latest price:
15:37:14   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
15:37:14  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
15:37:14  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
15:37:14  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
15:37:14  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
15:37:14  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
15:37:14  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
15:37:14  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
15:37:14  17  --
15:37:14  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
15:37:14  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
15:37:14  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
15:37:14  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
15:37:14  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
15:37:14  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
15:37:14  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
15:37:14  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
15:37:14  26  --
15:37:14  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
15:37:14  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
15:37:14  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
15:37:14  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
15:37:14  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
15:37:14  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
15:37:14  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
15:37:14  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
15:37:14  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
15:37:14  36  FROM di5min WHERE pair LIKE'%eur%'
15:37:14  37  AND ydate > sysdate - 95
15:37:14  38  ORDER BY ydate
15:37:14  39  /

View created.

Elapsed: 00:00:00.09
15:37:14 SQL> 
15:37:14 SQL> -- rpt
15:37:14 SQL> 
15:37:14 SQL> SELECT
15:37:14   2  pair
15:37:14   3  ,COUNT(pair)
15:37:14   4  ,MIN(clse),MAX(clse)
15:37:14   5  ,MIN(avg6),MAX(avg6)
15:37:14   6  ,MIN(ydate),MAX(ydate)
15:37:14   7  FROM svm6102
15:37:14   8  GROUP BY pair
15:37:14   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_usd       19750    1.29735	   1.4273 1.29875103 1.42436233 2010-10-03 20:55:01 2011-01-06 15:30:00

Elapsed: 00:00:00.93
15:37:15 SQL> 
15:37:15 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
15:37:15 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.14
15:37:15 SQL> CREATE TABLE svm6122 COMPRESS AS
15:37:15   2  SELECT
15:37:15   3  pair
15:37:15   4  ,ydate
15:37:15   5  ,prdate
15:37:15   6  ,clse
15:37:15   7  -- g6 is important. I want to predict g6:
15:37:15   8  ,ld6 - clse g6
15:37:15   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
15:37:15  10  -- I want more attributes from the ones I derived above:
15:37:15  11  -- clse relation to moving-min
15:37:15  12  ,clse-min4  cm4
15:37:15  13  ,clse-min6  cm6
15:37:15  14  ,clse-min8  cm8
15:37:15  15  ,clse-min10 cm10
15:37:15  16  ,clse-min12 cm12
15:37:15  17  ,clse-min14 cm14
15:37:15  18  ,clse-min16 cm16
15:37:15  19  ,clse-min18 cm18
15:37:15  20  -- clse relation to moving-avg
15:37:15  21  ,clse-avg4  ca4
15:37:15  22  ,clse-avg6  ca6
15:37:15  23  ,clse-avg8  ca8
15:37:15  24  ,clse-avg10 ca10
15:37:15  25  ,clse-avg12 ca12
15:37:15  26  ,clse-avg14 ca14
15:37:15  27  ,clse-avg16 ca16
15:37:15  28  ,clse-avg18 ca18
15:37:15  29  -- clse relation to moving-max
15:37:15  30  ,clse-max4  cx4
15:37:15  31  ,clse-max6  cx6
15:37:15  32  ,clse-max8  cx8
15:37:15  33  ,clse-max10 cx10
15:37:15  34  ,clse-max12 cx12
15:37:15  35  ,clse-max14 cx14
15:37:15  36  ,clse-max16 cx16
15:37:15  37  ,clse-max18 cx18
15:37:15  38  -- Derive more attributes.
15:37:15  39  -- I want to use CORR() here to help SVM see the shape of the series.
15:37:15  40  -- But COVAR_POP is more stable:
15:37:15  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
15:37:15  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
15:37:15  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
15:37:15  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
15:37:15  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
15:37:15  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
15:37:15  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
15:37:15  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
15:37:15  49  -- Derive date related attributes:
15:37:15  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
15:37:15  51  ,0+TO_CHAR(ydate,'D')d
15:37:15  52  ,0+TO_CHAR(ydate,'W')w
15:37:15  53  -- mpm stands for minutes-past-midnight:
15:37:15  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
15:37:15  55  -- mph stands for minutes-past-hour:
15:37:15  56  ,0+TO_CHAR(ydate,'MI')mph
15:37:15  57  FROM svm6102
15:37:15  58  ORDER BY ydate
15:37:15  59  /

Table created.

Elapsed: 00:00:02.54
15:37:17 SQL> 
15:37:17 SQL> -- rpt
15:37:17 SQL> 
15:37:17 SQL> SELECT
15:37:17   2  pair
15:37:17   3  ,COUNT(pair)
15:37:17   4  ,MIN(clse),MAX(clse)
15:37:17   5  ,MIN(ydate),MAX(ydate)
15:37:17   6  FROM svm6122
15:37:17   7  GROUP BY pair
15:37:17   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_usd       19750    1.29735	   1.4273 2010-10-03 20:55:01 2011-01-06 15:30:00

Elapsed: 00:00:00.05
15:37:17 SQL> 
15:37:17 SQL> -- Prepare for derivation of NTILE based params:
15:37:17 SQL> 
15:37:17 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:01.08
15:37:18 SQL> CREATE TABLE svm6142 COMPRESS AS
15:37:18   2  SELECT
15:37:18   3  pair
15:37:18   4  ,ydate
15:37:18   5  ,prdate
15:37:18   6  ,clse
15:37:18   7  ,g6
15:37:18   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
15:37:18   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
15:37:18  10  ,CASE WHEN trend IS NULL THEN 1
15:37:18  11  	    WHEN trend =0      THEN 1
15:37:18  12  	    ELSE trend END trend
15:37:18  13  ,cm4
15:37:18  14  ,cm6
15:37:18  15  ,cm8
15:37:18  16  ,cm10
15:37:18  17  ,cm12
15:37:18  18  ,cm14
15:37:18  19  ,cm16
15:37:18  20  ,cm18
15:37:18  21  --
15:37:18  22  ,ca4
15:37:18  23  ,ca6
15:37:18  24  ,ca8
15:37:18  25  ,ca10
15:37:18  26  ,ca12
15:37:18  27  ,ca14
15:37:18  28  ,ca16
15:37:18  29  ,ca18
15:37:18  30  --
15:37:18  31  ,cx4
15:37:18  32  ,cx6
15:37:18  33  ,cx8
15:37:18  34  ,cx10
15:37:18  35  ,cx12
15:37:18  36  ,cx14
15:37:18  37  ,cx16
15:37:18  38  ,cx18
15:37:18  39  --
15:37:18  40  ,crr4
15:37:18  41  ,crr6
15:37:18  42  ,crr8
15:37:18  43  ,crr10
15:37:18  44  ,crr12
15:37:18  45  ,crr14
15:37:18  46  ,crr16
15:37:18  47  ,crr18
15:37:18  48  --
15:37:18  49  ,hh
15:37:18  50  ,d
15:37:18  51  ,w
15:37:18  52  ,mpm
15:37:18  53  ,mph
15:37:18  54  FROM svm6122
15:37:18  55  ORDER BY ydate
15:37:18  56  /

Table created.

Elapsed: 00:00:00.53
15:37:19 SQL> 
15:37:19 SQL> -- rpt
15:37:19 SQL> 
15:37:19 SQL> SELECT
15:37:19   2  pair
15:37:19   3  ,trend
15:37:19   4  ,gatt
15:37:19   5  ,COUNT(pair)
15:37:19   6  ,AVG(g6)
15:37:19   7  FROM svm6142
15:37:19   8  GROUP BY pair,trend,gatt
15:37:19   9  ORDER BY pair,trend,gatt
15:37:19  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6533 -.00312155
eur_usd 	-1 up	      3570 .004447223
eur_usd 	-1		69
eur_usd 	 1 nup	      5870   -.003249
eur_usd 	 1 up	      3705 .005071238
eur_usd 	 1		 3

6 rows selected.

Elapsed: 00:00:00.05
15:37:19 SQL> 
15:37:19 SQL> 
15:37:19 SQL> -- Derive NTILE based params:
15:37:19 SQL> 
15:37:19 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.55
15:37:20 SQL> CREATE TABLE svm6162 COMPRESS AS
15:37:20   2  SELECT
15:37:20   3  pair
15:37:20   4  ,ydate
15:37:20   5  ,prdate
15:37:20   6  ,clse
15:37:20   7  ,g6
15:37:20   8  ,gatt
15:37:20   9  ,gattn
15:37:20  10  ,trend
15:37:20  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
15:37:20  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
15:37:20  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
15:37:20  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
15:37:20  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
15:37:20  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
15:37:20  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
15:37:20  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
15:37:20  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
15:37:20  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
15:37:20  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
15:37:20  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
15:37:20  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
15:37:20  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
15:37:20  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
15:37:20  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
15:37:20  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
15:37:20  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
15:37:20  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
15:37:20  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
15:37:20  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
15:37:20  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
15:37:20  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
15:37:20  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
15:37:20  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
15:37:20  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
15:37:20  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
15:37:20  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
15:37:20  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
15:37:20  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
15:37:20  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
15:37:20  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
15:37:20  43  ,hh  att32
15:37:20  44  ,d   att33
15:37:20  45  ,w   att34
15:37:20  46  ,mpm att35
15:37:20  47  ,mph att36
15:37:20  48  ,trend att37
15:37:20  49  FROM svm6142
15:37:20  50  ORDER BY ydate
15:37:20  51  /

Table created.

Elapsed: 00:00:04.81
15:37:24 SQL> 
15:37:24 SQL> -- rpt
15:37:24 SQL> 
15:37:24 SQL> SELECT
15:37:24   2  pair
15:37:24   3  ,trend
15:37:24   4  ,gatt
15:37:24   5  ,COUNT(pair)
15:37:24   6  ,AVG(g6)
15:37:24   7  FROM svm6162
15:37:24   8  GROUP BY pair,trend,gatt
15:37:24   9  ORDER BY pair,trend,gatt
15:37:24  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6533 -.00312155
eur_usd 	-1 up	      3570 .004447223
eur_usd 	-1		69
eur_usd 	 1 nup	      5870   -.003249
eur_usd 	 1 up	      3705 .005071238
eur_usd 	 1		 3

6 rows selected.

Elapsed: 00:00:00.03
15:37:24 SQL> 
15:37:24 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.08
15:37:24 SQL> CREATE TABLE modsrc COMPRESS AS
15:37:24   2  SELECT
15:37:24   3  pair
15:37:24   4  ,ydate
15:37:24   5  ,prdate
15:37:24   6  ,trend
15:37:24   7  ,g6
15:37:24   8  ,gatt
15:37:24   9  ,gattn
15:37:24  10  FROM svm6162
15:37:24  11  /

Table created.

Elapsed: 00:00:00.09
15:37:25 SQL> 
15:37:25 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
15:37:25 SQL> 
15:37:25 SQL> DROP   TABLE eur_ms610 ;

Table dropped.

Elapsed: 00:00:00.03
15:37:25 SQL> CREATE TABLE eur_ms610 COMPRESS AS
15:37:25   2  SELECT
15:37:25   3  ydate
15:37:25   4  ,trend eur_trend
15:37:25   5  ,g6    eur_g6
15:37:25   6  ,gatt  eur_gatt
15:37:25   7  ,gattn eur_gattn
15:37:25   8  FROM modsrc
15:37:25   9  /

Table created.

Elapsed: 00:00:00.06
15:37:25 SQL> 
15:37:25 SQL> ANALYZE TABLE eur_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
15:37:25 SQL> 
15:37:25 SQL> -- I need a copy of the attributes:
15:37:25 SQL> 
15:37:25 SQL> 
15:37:25 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.04
15:37:25 SQL> CREATE TABLE eur_att COMPRESS AS
15:37:25   2  SELECT
15:37:25   3  ydate
15:37:25   4  ,att00 eur_att00
15:37:25   5  ,att01 eur_att01
15:37:25   6  ,att02 eur_att02
15:37:25   7  ,att03 eur_att03
15:37:25   8  ,att04 eur_att04
15:37:25   9  ,att05 eur_att05
15:37:25  10  ,att06 eur_att06
15:37:25  11  ,att07 eur_att07
15:37:25  12  ,att08 eur_att08
15:37:25  13  ,att09 eur_att09
15:37:25  14  ,att10 eur_att10
15:37:25  15  ,att11 eur_att11
15:37:25  16  ,att12 eur_att12
15:37:25  17  ,att13 eur_att13
15:37:25  18  ,att14 eur_att14
15:37:25  19  ,att15 eur_att15
15:37:25  20  ,att16 eur_att16
15:37:25  21  ,att17 eur_att17
15:37:25  22  ,att18 eur_att18
15:37:25  23  ,att19 eur_att19
15:37:25  24  ,att20 eur_att20
15:37:25  25  ,att21 eur_att21
15:37:25  26  ,att22 eur_att22
15:37:25  27  ,att23 eur_att23
15:37:25  28  ,att24 eur_att24
15:37:25  29  ,att25 eur_att25
15:37:25  30  ,att26 eur_att26
15:37:25  31  ,att27 eur_att27
15:37:25  32  ,att28 eur_att28
15:37:25  33  ,att29 eur_att29
15:37:25  34  ,att30 eur_att30
15:37:25  35  ,att31 eur_att31
15:37:25  36  ,att32 eur_att32
15:37:25  37  ,att33 eur_att33
15:37:25  38  ,att34 eur_att34
15:37:25  39  ,att35 eur_att35
15:37:25  40  ,att36 eur_att36
15:37:25  41  ,att37 eur_att37
15:37:25  42  FROM svm6162
15:37:25  43  /

Table created.

Elapsed: 00:00:00.18
15:37:25 SQL> 
15:37:25 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.49
15:37:26 SQL> 
15:37:26 SQL> -- rpt
15:37:26 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19750

Elapsed: 00:00:00.92
15:37:27 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     19750

Elapsed: 00:00:00.00
15:37:27 SQL> 
15:37:27 SQL> --
15:37:27 SQL> -- aud610.sql
15:37:27 SQL> --
15:37:27 SQL> 
15:37:27 SQL> -- Creates views and tables for backtesting a forex SVM strategy
15:37:27 SQL> 
15:37:27 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.42
15:37:27 SQL> 
15:37:27 SQL> -- I created di5min here:
15:37:27 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
15:37:27 SQL> 
15:37:27 SQL> CREATE OR REPLACE VIEW svm6102 AS
15:37:27   2  SELECT
15:37:27   3  pair
15:37:27   4  ,ydate
15:37:27   5  ,prdate
15:37:27   6  ,rownum rnum -- acts as t in my time-series
15:37:27   7  ,clse
15:37:27   8  -- Derive a bunch of attributes from clse, the latest price:
15:37:27   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
15:37:27  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
15:37:27  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
15:37:27  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
15:37:27  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
15:37:27  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
15:37:27  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
15:37:27  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
15:37:27  17  --
15:37:27  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
15:37:27  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
15:37:27  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
15:37:27  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
15:37:27  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
15:37:27  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
15:37:27  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
15:37:27  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
15:37:27  26  --
15:37:27  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
15:37:27  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
15:37:27  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
15:37:27  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
15:37:27  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
15:37:27  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
15:37:27  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
15:37:27  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
15:37:27  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
15:37:27  36  FROM di5min WHERE pair LIKE'%aud%'
15:37:27  37  AND ydate > sysdate - 95
15:37:27  38  ORDER BY ydate
15:37:27  39  /

View created.

Elapsed: 00:00:00.05
15:37:27 SQL> 
15:37:27 SQL> -- rpt
15:37:27 SQL> 
15:37:27 SQL> SELECT
15:37:27   2  pair
15:37:27   3  ,COUNT(pair)
15:37:27   4  ,MIN(clse),MAX(clse)
15:37:27   5  ,MIN(avg6),MAX(avg6)
15:37:27   6  ,MIN(ydate),MAX(ydate)
15:37:27   7  FROM svm6102
15:37:27   8  GROUP BY pair
15:37:27   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
aud_usd       19747	.95405	  1.02495 .957141438 1.02284247 2010-10-03 20:55:01 2011-01-06 15:30:00

Elapsed: 00:00:00.89
15:37:28 SQL> 
15:37:28 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
15:37:28 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.23
15:37:28 SQL> CREATE TABLE svm6122 COMPRESS AS
15:37:28   2  SELECT
15:37:28   3  pair
15:37:28   4  ,ydate
15:37:28   5  ,prdate
15:37:28   6  ,clse
15:37:28   7  -- g6 is important. I want to predict g6:
15:37:28   8  ,ld6 - clse g6
15:37:28   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
15:37:28  10  -- I want more attributes from the ones I derived above:
15:37:28  11  -- clse relation to moving-min
15:37:28  12  ,clse-min4  cm4
15:37:28  13  ,clse-min6  cm6
15:37:28  14  ,clse-min8  cm8
15:37:28  15  ,clse-min10 cm10
15:37:28  16  ,clse-min12 cm12
15:37:28  17  ,clse-min14 cm14
15:37:28  18  ,clse-min16 cm16
15:37:28  19  ,clse-min18 cm18
15:37:28  20  -- clse relation to moving-avg
15:37:28  21  ,clse-avg4  ca4
15:37:28  22  ,clse-avg6  ca6
15:37:28  23  ,clse-avg8  ca8
15:37:28  24  ,clse-avg10 ca10
15:37:28  25  ,clse-avg12 ca12
15:37:28  26  ,clse-avg14 ca14
15:37:28  27  ,clse-avg16 ca16
15:37:28  28  ,clse-avg18 ca18
15:37:28  29  -- clse relation to moving-max
15:37:28  30  ,clse-max4  cx4
15:37:28  31  ,clse-max6  cx6
15:37:28  32  ,clse-max8  cx8
15:37:28  33  ,clse-max10 cx10
15:37:28  34  ,clse-max12 cx12
15:37:28  35  ,clse-max14 cx14
15:37:28  36  ,clse-max16 cx16
15:37:28  37  ,clse-max18 cx18
15:37:28  38  -- Derive more attributes.
15:37:28  39  -- I want to use CORR() here to help SVM see the shape of the series.
15:37:28  40  -- But COVAR_POP is more stable:
15:37:28  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
15:37:28  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
15:37:28  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
15:37:28  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
15:37:28  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
15:37:28  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
15:37:28  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
15:37:28  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
15:37:28  49  -- Derive date related attributes:
15:37:28  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
15:37:28  51  ,0+TO_CHAR(ydate,'D')d
15:37:28  52  ,0+TO_CHAR(ydate,'W')w
15:37:28  53  -- mpm stands for minutes-past-midnight:
15:37:28  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
15:37:28  55  -- mph stands for minutes-past-hour:
15:37:28  56  ,0+TO_CHAR(ydate,'MI')mph
15:37:28  57  FROM svm6102
15:37:28  58  ORDER BY ydate
15:37:28  59  /

Table created.

Elapsed: 00:00:02.16
15:37:30 SQL> 
15:37:30 SQL> -- rpt
15:37:30 SQL> 
15:37:30 SQL> SELECT
15:37:30   2  pair
15:37:30   3  ,COUNT(pair)
15:37:30   4  ,MIN(clse),MAX(clse)
15:37:30   5  ,MIN(ydate),MAX(ydate)
15:37:30   6  FROM svm6122
15:37:30   7  GROUP BY pair
15:37:30   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
aud_usd       19747	.95405	  1.02495 2010-10-03 20:55:01 2011-01-06 15:30:00

Elapsed: 00:00:00.04
15:37:30 SQL> 
15:37:30 SQL> -- Prepare for derivation of NTILE based params:
15:37:30 SQL> 
15:37:30 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.29
15:37:31 SQL> CREATE TABLE svm6142 COMPRESS AS
15:37:31   2  SELECT
15:37:31   3  pair
15:37:31   4  ,ydate
15:37:31   5  ,prdate
15:37:31   6  ,clse
15:37:31   7  ,g6
15:37:31   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
15:37:31   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
15:37:31  10  ,CASE WHEN trend IS NULL THEN 1
15:37:31  11  	    WHEN trend =0      THEN 1
15:37:31  12  	    ELSE trend END trend
15:37:31  13  ,cm4
15:37:31  14  ,cm6
15:37:31  15  ,cm8
15:37:31  16  ,cm10
15:37:31  17  ,cm12
15:37:31  18  ,cm14
15:37:31  19  ,cm16
15:37:31  20  ,cm18
15:37:31  21  --
15:37:31  22  ,ca4
15:37:31  23  ,ca6
15:37:31  24  ,ca8
15:37:31  25  ,ca10
15:37:31  26  ,ca12
15:37:31  27  ,ca14
15:37:31  28  ,ca16
15:37:31  29  ,ca18
15:37:31  30  --
15:37:31  31  ,cx4
15:37:31  32  ,cx6
15:37:31  33  ,cx8
15:37:31  34  ,cx10
15:37:31  35  ,cx12
15:37:31  36  ,cx14
15:37:31  37  ,cx16
15:37:31  38  ,cx18
15:37:31  39  --
15:37:31  40  ,crr4
15:37:31  41  ,crr6
15:37:31  42  ,crr8
15:37:31  43  ,crr10
15:37:31  44  ,crr12
15:37:31  45  ,crr14
15:37:31  46  ,crr16
15:37:31  47  ,crr18
15:37:31  48  --
15:37:31  49  ,hh
15:37:31  50  ,d
15:37:31  51  ,w
15:37:31  52  ,mpm
15:37:31  53  ,mph
15:37:31  54  FROM svm6122
15:37:31  55  ORDER BY ydate
15:37:31  56  /

Table created.

Elapsed: 00:00:00.36
15:37:31 SQL> 
15:37:31 SQL> -- rpt
15:37:31 SQL> 
15:37:31 SQL> SELECT
15:37:31   2  pair
15:37:31   3  ,trend
15:37:31   4  ,gatt
15:37:31   5  ,COUNT(pair)
15:37:31   6  ,AVG(g6)
15:37:31   7  FROM svm6142
15:37:31   8  GROUP BY pair,trend,gatt
15:37:31   9  ORDER BY pair,trend,gatt
15:37:31  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5685 -.00215255
aud_usd 	-1 up	      3701 .003745866
aud_usd 	-1		39
aud_usd 	 1 nup	      6696 -.00213564
aud_usd 	 1 up	      3593 .004054752
aud_usd 	 1		33

6 rows selected.

Elapsed: 00:00:00.04
15:37:31 SQL> 
15:37:31 SQL> 
15:37:31 SQL> -- Derive NTILE based params:
15:37:31 SQL> 
15:37:31 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.15
15:37:31 SQL> CREATE TABLE svm6162 COMPRESS AS
15:37:31   2  SELECT
15:37:31   3  pair
15:37:31   4  ,ydate
15:37:31   5  ,prdate
15:37:31   6  ,clse
15:37:31   7  ,g6
15:37:31   8  ,gatt
15:37:31   9  ,gattn
15:37:31  10  ,trend
15:37:31  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
15:37:31  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
15:37:31  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
15:37:31  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
15:37:31  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
15:37:31  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
15:37:31  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
15:37:31  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
15:37:31  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
15:37:31  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
15:37:31  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
15:37:31  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
15:37:31  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
15:37:31  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
15:37:31  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
15:37:31  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
15:37:31  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
15:37:31  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
15:37:31  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
15:37:31  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
15:37:31  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
15:37:31  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
15:37:31  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
15:37:31  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
15:37:31  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
15:37:31  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
15:37:31  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
15:37:31  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
15:37:31  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
15:37:31  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
15:37:31  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
15:37:31  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
15:37:31  43  ,hh  att32
15:37:31  44  ,d   att33
15:37:31  45  ,w   att34
15:37:31  46  ,mpm att35
15:37:31  47  ,mph att36
15:37:31  48  ,trend att37
15:37:31  49  FROM svm6142
15:37:31  50  ORDER BY ydate
15:37:31  51  /

Table created.

Elapsed: 00:00:04.78
15:37:36 SQL> 
15:37:36 SQL> -- rpt
15:37:36 SQL> 
15:37:36 SQL> SELECT
15:37:36   2  pair
15:37:36   3  ,trend
15:37:36   4  ,gatt
15:37:36   5  ,COUNT(pair)
15:37:36   6  ,AVG(g6)
15:37:36   7  FROM svm6162
15:37:36   8  GROUP BY pair,trend,gatt
15:37:36   9  ORDER BY pair,trend,gatt
15:37:36  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5685 -.00215255
aud_usd 	-1 up	      3701 .003745866
aud_usd 	-1		39
aud_usd 	 1 nup	      6696 -.00213564
aud_usd 	 1 up	      3593 .004054752
aud_usd 	 1		33

6 rows selected.

Elapsed: 00:00:00.02
15:37:36 SQL> 
15:37:36 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
15:37:36 SQL> CREATE TABLE modsrc COMPRESS AS
15:37:36   2  SELECT
15:37:36   3  pair
15:37:36   4  ,ydate
15:37:36   5  ,prdate
15:37:36   6  ,trend
15:37:36   7  ,g6
15:37:36   8  ,gatt
15:37:36   9  ,gattn
15:37:36  10  FROM svm6162
15:37:36  11  /

Table created.

Elapsed: 00:00:00.08
15:37:36 SQL> 
15:37:36 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
15:37:37 SQL> 
15:37:37 SQL> DROP   TABLE aud_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
15:37:37 SQL> CREATE TABLE aud_ms610 COMPRESS AS
15:37:37   2  SELECT
15:37:37   3  ydate
15:37:37   4  ,trend aud_trend
15:37:37   5  ,g6    aud_g6
15:37:37   6  ,gatt  aud_gatt
15:37:37   7  ,gattn aud_gattn
15:37:37   8  FROM modsrc
15:37:37   9  /

Table created.

Elapsed: 00:00:00.09
15:37:37 SQL> 
15:37:37 SQL> ANALYZE TABLE aud_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
15:37:37 SQL> 
15:37:37 SQL> -- I need a copy of the attributes:
15:37:37 SQL> 
15:37:37 SQL> 
15:37:37 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.04
15:37:37 SQL> CREATE TABLE aud_att COMPRESS AS
15:37:37   2  SELECT
15:37:37   3  ydate
15:37:37   4  ,att00 aud_att00
15:37:37   5  ,att01 aud_att01
15:37:37   6  ,att02 aud_att02
15:37:37   7  ,att03 aud_att03
15:37:37   8  ,att04 aud_att04
15:37:37   9  ,att05 aud_att05
15:37:37  10  ,att06 aud_att06
15:37:37  11  ,att07 aud_att07
15:37:37  12  ,att08 aud_att08
15:37:37  13  ,att09 aud_att09
15:37:37  14  ,att10 aud_att10
15:37:37  15  ,att11 aud_att11
15:37:37  16  ,att12 aud_att12
15:37:37  17  ,att13 aud_att13
15:37:37  18  ,att14 aud_att14
15:37:37  19  ,att15 aud_att15
15:37:37  20  ,att16 aud_att16
15:37:37  21  ,att17 aud_att17
15:37:37  22  ,att18 aud_att18
15:37:37  23  ,att19 aud_att19
15:37:37  24  ,att20 aud_att20
15:37:37  25  ,att21 aud_att21
15:37:37  26  ,att22 aud_att22
15:37:37  27  ,att23 aud_att23
15:37:37  28  ,att24 aud_att24
15:37:37  29  ,att25 aud_att25
15:37:37  30  ,att26 aud_att26
15:37:37  31  ,att27 aud_att27
15:37:37  32  ,att28 aud_att28
15:37:37  33  ,att29 aud_att29
15:37:37  34  ,att30 aud_att30
15:37:37  35  ,att31 aud_att31
15:37:37  36  ,att32 aud_att32
15:37:37  37  ,att33 aud_att33
15:37:37  38  ,att34 aud_att34
15:37:37  39  ,att35 aud_att35
15:37:37  40  ,att36 aud_att36
15:37:37  41  ,att37 aud_att37
15:37:37  42  FROM svm6162
15:37:37  43  /

Table created.

Elapsed: 00:00:00.17
15:37:37 SQL> 
15:37:37 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.43
15:37:37 SQL> 
15:37:37 SQL> -- rpt
15:37:37 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19747

Elapsed: 00:00:00.86
15:37:38 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     19747

Elapsed: 00:00:00.00
15:37:38 SQL> 
15:37:38 SQL> --
15:37:38 SQL> -- gbp610.sql
15:37:38 SQL> --
15:37:38 SQL> 
15:37:38 SQL> -- Creates views and tables for backtesting a forex SVM strategy
15:37:38 SQL> 
15:37:38 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.54
15:37:39 SQL> 
15:37:39 SQL> -- I created di5min here:
15:37:39 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
15:37:39 SQL> 
15:37:39 SQL> CREATE OR REPLACE VIEW svm6102 AS
15:37:39   2  SELECT
15:37:39   3  pair
15:37:39   4  ,ydate
15:37:39   5  ,prdate
15:37:39   6  ,rownum rnum -- acts as t in my time-series
15:37:39   7  ,clse
15:37:39   8  -- Derive a bunch of attributes from clse, the latest price:
15:37:39   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
15:37:39  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
15:37:39  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
15:37:39  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
15:37:39  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
15:37:39  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
15:37:39  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
15:37:39  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
15:37:39  17  --
15:37:39  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
15:37:39  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
15:37:39  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
15:37:39  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
15:37:39  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
15:37:39  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
15:37:39  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
15:37:39  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
15:37:39  26  --
15:37:39  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
15:37:39  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
15:37:39  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
15:37:39  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
15:37:39  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
15:37:39  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
15:37:39  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
15:37:39  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
15:37:39  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
15:37:39  36  FROM di5min WHERE pair LIKE'%gbp%'
15:37:39  37  AND ydate > sysdate - 95
15:37:39  38  ORDER BY ydate
15:37:39  39  /

View created.

Elapsed: 00:00:00.04
15:37:39 SQL> 
15:37:39 SQL> -- rpt
15:37:39 SQL> 
15:37:39 SQL> SELECT
15:37:39   2  pair
15:37:39   3  ,COUNT(pair)
15:37:39   4  ,MIN(clse),MAX(clse)
15:37:39   5  ,MIN(avg6),MAX(avg6)
15:37:39   6  ,MIN(ydate),MAX(ydate)
15:37:39   7  FROM svm6102
15:37:39   8  GROUP BY pair
15:37:39   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
gbp_usd       19750   1.535325	   1.6295 1.53696747 1.62716986 2010-10-03 20:55:01 2011-01-06 15:35:00

Elapsed: 00:00:00.88
15:37:40 SQL> 
15:37:40 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
15:37:40 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.28
15:37:40 SQL> CREATE TABLE svm6122 COMPRESS AS
15:37:40   2  SELECT
15:37:40   3  pair
15:37:40   4  ,ydate
15:37:40   5  ,prdate
15:37:40   6  ,clse
15:37:40   7  -- g6 is important. I want to predict g6:
15:37:40   8  ,ld6 - clse g6
15:37:40   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
15:37:40  10  -- I want more attributes from the ones I derived above:
15:37:40  11  -- clse relation to moving-min
15:37:40  12  ,clse-min4  cm4
15:37:40  13  ,clse-min6  cm6
15:37:40  14  ,clse-min8  cm8
15:37:40  15  ,clse-min10 cm10
15:37:40  16  ,clse-min12 cm12
15:37:40  17  ,clse-min14 cm14
15:37:40  18  ,clse-min16 cm16
15:37:40  19  ,clse-min18 cm18
15:37:40  20  -- clse relation to moving-avg
15:37:40  21  ,clse-avg4  ca4
15:37:40  22  ,clse-avg6  ca6
15:37:40  23  ,clse-avg8  ca8
15:37:40  24  ,clse-avg10 ca10
15:37:40  25  ,clse-avg12 ca12
15:37:40  26  ,clse-avg14 ca14
15:37:40  27  ,clse-avg16 ca16
15:37:40  28  ,clse-avg18 ca18
15:37:40  29  -- clse relation to moving-max
15:37:40  30  ,clse-max4  cx4
15:37:40  31  ,clse-max6  cx6
15:37:40  32  ,clse-max8  cx8
15:37:40  33  ,clse-max10 cx10
15:37:40  34  ,clse-max12 cx12
15:37:40  35  ,clse-max14 cx14
15:37:40  36  ,clse-max16 cx16
15:37:40  37  ,clse-max18 cx18
15:37:40  38  -- Derive more attributes.
15:37:40  39  -- I want to use CORR() here to help SVM see the shape of the series.
15:37:40  40  -- But COVAR_POP is more stable:
15:37:40  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
15:37:40  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
15:37:40  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
15:37:40  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
15:37:40  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
15:37:40  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
15:37:40  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
15:37:40  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
15:37:40  49  -- Derive date related attributes:
15:37:40  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
15:37:40  51  ,0+TO_CHAR(ydate,'D')d
15:37:40  52  ,0+TO_CHAR(ydate,'W')w
15:37:40  53  -- mpm stands for minutes-past-midnight:
15:37:40  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
15:37:40  55  -- mph stands for minutes-past-hour:
15:37:40  56  ,0+TO_CHAR(ydate,'MI')mph
15:37:40  57  FROM svm6102
15:37:40  58  ORDER BY ydate
15:37:40  59  /

Table created.

Elapsed: 00:00:02.05
15:37:42 SQL> 
15:37:42 SQL> -- rpt
15:37:42 SQL> 
15:37:42 SQL> SELECT
15:37:42   2  pair
15:37:42   3  ,COUNT(pair)
15:37:42   4  ,MIN(clse),MAX(clse)
15:37:42   5  ,MIN(ydate),MAX(ydate)
15:37:42   6  FROM svm6122
15:37:42   7  GROUP BY pair
15:37:42   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
gbp_usd       19750   1.535325	   1.6295 2010-10-03 20:55:01 2011-01-06 15:35:00

Elapsed: 00:00:00.04
15:37:42 SQL> 
15:37:42 SQL> -- Prepare for derivation of NTILE based params:
15:37:42 SQL> 
15:37:42 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.23
15:37:42 SQL> CREATE TABLE svm6142 COMPRESS AS
15:37:42   2  SELECT
15:37:42   3  pair
15:37:42   4  ,ydate
15:37:42   5  ,prdate
15:37:42   6  ,clse
15:37:42   7  ,g6
15:37:42   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
15:37:42   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
15:37:42  10  ,CASE WHEN trend IS NULL THEN 1
15:37:42  11  	    WHEN trend =0      THEN 1
15:37:42  12  	    ELSE trend END trend
15:37:42  13  ,cm4
15:37:42  14  ,cm6
15:37:42  15  ,cm8
15:37:42  16  ,cm10
15:37:42  17  ,cm12
15:37:42  18  ,cm14
15:37:42  19  ,cm16
15:37:42  20  ,cm18
15:37:42  21  --
15:37:42  22  ,ca4
15:37:42  23  ,ca6
15:37:42  24  ,ca8
15:37:42  25  ,ca10
15:37:42  26  ,ca12
15:37:42  27  ,ca14
15:37:42  28  ,ca16
15:37:42  29  ,ca18
15:37:42  30  --
15:37:42  31  ,cx4
15:37:42  32  ,cx6
15:37:42  33  ,cx8
15:37:42  34  ,cx10
15:37:42  35  ,cx12
15:37:42  36  ,cx14
15:37:42  37  ,cx16
15:37:42  38  ,cx18
15:37:42  39  --
15:37:42  40  ,crr4
15:37:42  41  ,crr6
15:37:42  42  ,crr8
15:37:42  43  ,crr10
15:37:42  44  ,crr12
15:37:42  45  ,crr14
15:37:42  46  ,crr16
15:37:42  47  ,crr18
15:37:42  48  --
15:37:42  49  ,hh
15:37:42  50  ,d
15:37:42  51  ,w
15:37:42  52  ,mpm
15:37:42  53  ,mph
15:37:42  54  FROM svm6122
15:37:42  55  ORDER BY ydate
15:37:42  56  /

Table created.

Elapsed: 00:00:00.37
15:37:43 SQL> 
15:37:43 SQL> -- rpt
15:37:43 SQL> 
15:37:43 SQL> SELECT
15:37:43   2  pair
15:37:43   3  ,trend
15:37:43   4  ,gatt
15:37:43   5  ,COUNT(pair)
15:37:43   6  ,AVG(g6)
15:37:43   7  FROM svm6142
15:37:43   8  GROUP BY pair,trend,gatt
15:37:43   9  ORDER BY pair,trend,gatt
15:37:43  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6373 -.00263133
gbp_usd 	-1 up	      3570 .004345847
gbp_usd 	-1		66
gbp_usd 	 1 nup	      6279 -.00264613
gbp_usd 	 1 up	      3456 .004524374
gbp_usd 	 1		 6

6 rows selected.

Elapsed: 00:00:00.04
15:37:43 SQL> 
15:37:43 SQL> 
15:37:43 SQL> -- Derive NTILE based params:
15:37:43 SQL> 
15:37:43 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.22
15:37:43 SQL> CREATE TABLE svm6162 COMPRESS AS
15:37:43   2  SELECT
15:37:43   3  pair
15:37:43   4  ,ydate
15:37:43   5  ,prdate
15:37:43   6  ,clse
15:37:43   7  ,g6
15:37:43   8  ,gatt
15:37:43   9  ,gattn
15:37:43  10  ,trend
15:37:43  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
15:37:43  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
15:37:43  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
15:37:43  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
15:37:43  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
15:37:43  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
15:37:43  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
15:37:43  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
15:37:43  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
15:37:43  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
15:37:43  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
15:37:43  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
15:37:43  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
15:37:43  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
15:37:43  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
15:37:43  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
15:37:43  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
15:37:43  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
15:37:43  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
15:37:43  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
15:37:43  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
15:37:43  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
15:37:43  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
15:37:43  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
15:37:43  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
15:37:43  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
15:37:43  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
15:37:43  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
15:37:43  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
15:37:43  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
15:37:43  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
15:37:43  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
15:37:43  43  ,hh  att32
15:37:43  44  ,d   att33
15:37:43  45  ,w   att34
15:37:43  46  ,mpm att35
15:37:43  47  ,mph att36
15:37:43  48  ,trend att37
15:37:43  49  FROM svm6142
15:37:43  50  ORDER BY ydate
15:37:43  51  /

Table created.

Elapsed: 00:00:04.81
15:37:48 SQL> 
15:37:48 SQL> -- rpt
15:37:48 SQL> 
15:37:48 SQL> SELECT
15:37:48   2  pair
15:37:48   3  ,trend
15:37:48   4  ,gatt
15:37:48   5  ,COUNT(pair)
15:37:48   6  ,AVG(g6)
15:37:48   7  FROM svm6162
15:37:48   8  GROUP BY pair,trend,gatt
15:37:48   9  ORDER BY pair,trend,gatt
15:37:48  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6373 -.00263133
gbp_usd 	-1 up	      3570 .004345847
gbp_usd 	-1		66
gbp_usd 	 1 nup	      6279 -.00264613
gbp_usd 	 1 up	      3456 .004524374
gbp_usd 	 1		 6

6 rows selected.

Elapsed: 00:00:00.03
15:37:48 SQL> 
15:37:48 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.10
15:37:48 SQL> CREATE TABLE modsrc COMPRESS AS
15:37:48   2  SELECT
15:37:48   3  pair
15:37:48   4  ,ydate
15:37:48   5  ,prdate
15:37:48   6  ,trend
15:37:48   7  ,g6
15:37:48   8  ,gatt
15:37:48   9  ,gattn
15:37:48  10  FROM svm6162
15:37:48  11  /

Table created.

Elapsed: 00:00:00.08
15:37:48 SQL> 
15:37:48 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.27
15:37:48 SQL> 
15:37:48 SQL> DROP   TABLE gbp_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
15:37:48 SQL> CREATE TABLE gbp_ms610 COMPRESS AS
15:37:48   2  SELECT
15:37:48   3  ydate
15:37:48   4  ,trend gbp_trend
15:37:48   5  ,g6    gbp_g6
15:37:48   6  ,gatt  gbp_gatt
15:37:48   7  ,gattn gbp_gattn
15:37:48   8  FROM modsrc
15:37:48   9  /

Table created.

Elapsed: 00:00:00.07
15:37:48 SQL> 
15:37:48 SQL> ANALYZE TABLE gbp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.27
15:37:49 SQL> 
15:37:49 SQL> -- I need a copy of the attributes:
15:37:49 SQL> 
15:37:49 SQL> 
15:37:49 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.05
15:37:49 SQL> CREATE TABLE gbp_att COMPRESS AS
15:37:49   2  SELECT
15:37:49   3  ydate
15:37:49   4  ,att00 gbp_att00
15:37:49   5  ,att01 gbp_att01
15:37:49   6  ,att02 gbp_att02
15:37:49   7  ,att03 gbp_att03
15:37:49   8  ,att04 gbp_att04
15:37:49   9  ,att05 gbp_att05
15:37:49  10  ,att06 gbp_att06
15:37:49  11  ,att07 gbp_att07
15:37:49  12  ,att08 gbp_att08
15:37:49  13  ,att09 gbp_att09
15:37:49  14  ,att10 gbp_att10
15:37:49  15  ,att11 gbp_att11
15:37:49  16  ,att12 gbp_att12
15:37:49  17  ,att13 gbp_att13
15:37:49  18  ,att14 gbp_att14
15:37:49  19  ,att15 gbp_att15
15:37:49  20  ,att16 gbp_att16
15:37:49  21  ,att17 gbp_att17
15:37:49  22  ,att18 gbp_att18
15:37:49  23  ,att19 gbp_att19
15:37:49  24  ,att20 gbp_att20
15:37:49  25  ,att21 gbp_att21
15:37:49  26  ,att22 gbp_att22
15:37:49  27  ,att23 gbp_att23
15:37:49  28  ,att24 gbp_att24
15:37:49  29  ,att25 gbp_att25
15:37:49  30  ,att26 gbp_att26
15:37:49  31  ,att27 gbp_att27
15:37:49  32  ,att28 gbp_att28
15:37:49  33  ,att29 gbp_att29
15:37:49  34  ,att30 gbp_att30
15:37:49  35  ,att31 gbp_att31
15:37:49  36  ,att32 gbp_att32
15:37:49  37  ,att33 gbp_att33
15:37:49  38  ,att34 gbp_att34
15:37:49  39  ,att35 gbp_att35
15:37:49  40  ,att36 gbp_att36
15:37:49  41  ,att37 gbp_att37
15:37:49  42  FROM svm6162
15:37:49  43  /

Table created.

Elapsed: 00:00:00.18
15:37:49 SQL> 
15:37:49 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.49
15:37:49 SQL> 
15:37:49 SQL> -- rpt
15:37:49 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19750

Elapsed: 00:00:00.85
15:37:50 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     19750

Elapsed: 00:00:00.01
15:37:50 SQL> 
15:37:50 SQL> --
15:37:50 SQL> -- jpy610.sql
15:37:50 SQL> --
15:37:50 SQL> 
15:37:50 SQL> -- Creates views and tables for backtesting a forex SVM strategy
15:37:50 SQL> 
15:37:50 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.39
15:37:51 SQL> 
15:37:51 SQL> -- I created di5min here:
15:37:51 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
15:37:51 SQL> 
15:37:51 SQL> CREATE OR REPLACE VIEW svm6102 AS
15:37:51   2  SELECT
15:37:51   3  pair
15:37:51   4  ,ydate
15:37:51   5  ,prdate
15:37:51   6  ,rownum rnum -- acts as t in my time-series
15:37:51   7  ,clse
15:37:51   8  -- Derive a bunch of attributes from clse, the latest price:
15:37:51   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
15:37:51  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
15:37:51  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
15:37:51  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
15:37:51  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
15:37:51  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
15:37:51  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
15:37:51  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
15:37:51  17  --
15:37:51  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
15:37:51  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
15:37:51  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
15:37:51  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
15:37:51  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
15:37:51  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
15:37:51  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
15:37:51  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
15:37:51  26  --
15:37:51  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
15:37:51  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
15:37:51  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
15:37:51  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
15:37:51  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
15:37:51  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
15:37:51  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
15:37:51  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
15:37:51  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
15:37:51  36  FROM di5min WHERE pair LIKE'%jpy%'
15:37:51  37  AND ydate > sysdate - 95
15:37:51  38  ORDER BY ydate
15:37:51  39  /

View created.

Elapsed: 00:00:00.04
15:37:51 SQL> 
15:37:51 SQL> -- rpt
15:37:51 SQL> 
15:37:51 SQL> SELECT
15:37:51   2  pair
15:37:51   3  ,COUNT(pair)
15:37:51   4  ,MIN(clse),MAX(clse)
15:37:51   5  ,MIN(avg6),MAX(avg6)
15:37:51   6  ,MIN(ydate),MAX(ydate)
15:37:51   7  FROM svm6102
15:37:51   8  GROUP BY pair
15:37:51   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_jpy       19749	 80.25	   84.485 80.3595205 84.3105479 2010-10-03 20:55:01 2011-01-06 15:35:00

Elapsed: 00:00:00.94
15:37:52 SQL> 
15:37:52 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
15:37:52 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.24
15:37:52 SQL> CREATE TABLE svm6122 COMPRESS AS
15:37:52   2  SELECT
15:37:52   3  pair
15:37:52   4  ,ydate
15:37:52   5  ,prdate
15:37:52   6  ,clse
15:37:52   7  -- g6 is important. I want to predict g6:
15:37:52   8  ,ld6 - clse g6
15:37:52   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
15:37:52  10  -- I want more attributes from the ones I derived above:
15:37:52  11  -- clse relation to moving-min
15:37:52  12  ,clse-min4  cm4
15:37:52  13  ,clse-min6  cm6
15:37:52  14  ,clse-min8  cm8
15:37:52  15  ,clse-min10 cm10
15:37:52  16  ,clse-min12 cm12
15:37:52  17  ,clse-min14 cm14
15:37:52  18  ,clse-min16 cm16
15:37:52  19  ,clse-min18 cm18
15:37:52  20  -- clse relation to moving-avg
15:37:52  21  ,clse-avg4  ca4
15:37:52  22  ,clse-avg6  ca6
15:37:52  23  ,clse-avg8  ca8
15:37:52  24  ,clse-avg10 ca10
15:37:52  25  ,clse-avg12 ca12
15:37:52  26  ,clse-avg14 ca14
15:37:52  27  ,clse-avg16 ca16
15:37:52  28  ,clse-avg18 ca18
15:37:52  29  -- clse relation to moving-max
15:37:52  30  ,clse-max4  cx4
15:37:52  31  ,clse-max6  cx6
15:37:52  32  ,clse-max8  cx8
15:37:52  33  ,clse-max10 cx10
15:37:52  34  ,clse-max12 cx12
15:37:52  35  ,clse-max14 cx14
15:37:52  36  ,clse-max16 cx16
15:37:52  37  ,clse-max18 cx18
15:37:52  38  -- Derive more attributes.
15:37:52  39  -- I want to use CORR() here to help SVM see the shape of the series.
15:37:52  40  -- But COVAR_POP is more stable:
15:37:52  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
15:37:52  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
15:37:52  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
15:37:52  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
15:37:52  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
15:37:52  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
15:37:52  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
15:37:52  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
15:37:52  49  -- Derive date related attributes:
15:37:52  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
15:37:52  51  ,0+TO_CHAR(ydate,'D')d
15:37:52  52  ,0+TO_CHAR(ydate,'W')w
15:37:52  53  -- mpm stands for minutes-past-midnight:
15:37:52  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
15:37:52  55  -- mph stands for minutes-past-hour:
15:37:52  56  ,0+TO_CHAR(ydate,'MI')mph
15:37:52  57  FROM svm6102
15:37:52  58  ORDER BY ydate
15:37:52  59  /

Table created.

Elapsed: 00:00:02.10
15:37:54 SQL> 
15:37:54 SQL> -- rpt
15:37:54 SQL> 
15:37:54 SQL> SELECT
15:37:54   2  pair
15:37:54   3  ,COUNT(pair)
15:37:54   4  ,MIN(clse),MAX(clse)
15:37:54   5  ,MIN(ydate),MAX(ydate)
15:37:54   6  FROM svm6122
15:37:54   7  GROUP BY pair
15:37:54   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_jpy       19749	 80.25	   84.485 2010-10-03 20:55:01 2011-01-06 15:35:00

Elapsed: 00:00:00.05
15:37:54 SQL> 
15:37:54 SQL> -- Prepare for derivation of NTILE based params:
15:37:54 SQL> 
15:37:54 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.26
15:37:54 SQL> CREATE TABLE svm6142 COMPRESS AS
15:37:54   2  SELECT
15:37:54   3  pair
15:37:54   4  ,ydate
15:37:54   5  ,prdate
15:37:54   6  ,clse
15:37:54   7  ,g6
15:37:54   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
15:37:54   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
15:37:54  10  ,CASE WHEN trend IS NULL THEN 1
15:37:54  11  	    WHEN trend =0      THEN 1
15:37:54  12  	    ELSE trend END trend
15:37:54  13  ,cm4
15:37:54  14  ,cm6
15:37:54  15  ,cm8
15:37:54  16  ,cm10
15:37:54  17  ,cm12
15:37:54  18  ,cm14
15:37:54  19  ,cm16
15:37:54  20  ,cm18
15:37:54  21  --
15:37:54  22  ,ca4
15:37:54  23  ,ca6
15:37:54  24  ,ca8
15:37:54  25  ,ca10
15:37:54  26  ,ca12
15:37:54  27  ,ca14
15:37:54  28  ,ca16
15:37:54  29  ,ca18
15:37:54  30  --
15:37:54  31  ,cx4
15:37:54  32  ,cx6
15:37:54  33  ,cx8
15:37:54  34  ,cx10
15:37:54  35  ,cx12
15:37:54  36  ,cx14
15:37:54  37  ,cx16
15:37:54  38  ,cx18
15:37:54  39  --
15:37:54  40  ,crr4
15:37:54  41  ,crr6
15:37:54  42  ,crr8
15:37:54  43  ,crr10
15:37:54  44  ,crr12
15:37:54  45  ,crr14
15:37:54  46  ,crr16
15:37:54  47  ,crr18
15:37:54  48  --
15:37:54  49  ,hh
15:37:54  50  ,d
15:37:54  51  ,w
15:37:54  52  ,mpm
15:37:54  53  ,mph
15:37:54  54  FROM svm6122
15:37:54  55  ORDER BY ydate
15:37:54  56  /

Table created.

Elapsed: 00:00:00.36
15:37:55 SQL> 
15:37:55 SQL> -- rpt
15:37:55 SQL> 
15:37:55 SQL> SELECT
15:37:55   2  pair
15:37:55   3  ,trend
15:37:55   4  ,gatt
15:37:55   5  ,COUNT(pair)
15:37:55   6  ,AVG(g6)
15:37:55   7  FROM svm6142
15:37:55   8  GROUP BY pair,trend,gatt
15:37:55   9  ORDER BY pair,trend,gatt
15:37:55  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5176 -.16573973
usd_jpy 	-1 up	      4864 .170072246
usd_jpy 	-1		53
usd_jpy 	 1 nup	      5077 -.15499158
usd_jpy 	 1 up	      4560  .17449582
usd_jpy 	 1		19

6 rows selected.

Elapsed: 00:00:00.03
15:37:55 SQL> 
15:37:55 SQL> 
15:37:55 SQL> -- Derive NTILE based params:
15:37:55 SQL> 
15:37:55 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.21
15:37:55 SQL> CREATE TABLE svm6162 COMPRESS AS
15:37:55   2  SELECT
15:37:55   3  pair
15:37:55   4  ,ydate
15:37:55   5  ,prdate
15:37:55   6  ,clse
15:37:55   7  ,g6
15:37:55   8  ,gatt
15:37:55   9  ,gattn
15:37:55  10  ,trend
15:37:55  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
15:37:55  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
15:37:55  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
15:37:55  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
15:37:55  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
15:37:55  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
15:37:55  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
15:37:55  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
15:37:55  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
15:37:55  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
15:37:55  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
15:37:55  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
15:37:55  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
15:37:55  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
15:37:55  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
15:37:55  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
15:37:55  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
15:37:55  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
15:37:55  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
15:37:55  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
15:37:55  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
15:37:55  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
15:37:55  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
15:37:55  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
15:37:55  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
15:37:55  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
15:37:55  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
15:37:55  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
15:37:55  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
15:37:55  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
15:37:55  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
15:37:55  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
15:37:55  43  ,hh  att32
15:37:55  44  ,d   att33
15:37:55  45  ,w   att34
15:37:55  46  ,mpm att35
15:37:55  47  ,mph att36
15:37:55  48  ,trend att37
15:37:55  49  FROM svm6142
15:37:55  50  ORDER BY ydate
15:37:55  51  /

Table created.

Elapsed: 00:00:04.83
15:38:00 SQL> 
15:38:00 SQL> -- rpt
15:38:00 SQL> 
15:38:00 SQL> SELECT
15:38:00   2  pair
15:38:00   3  ,trend
15:38:00   4  ,gatt
15:38:00   5  ,COUNT(pair)
15:38:00   6  ,AVG(g6)
15:38:00   7  FROM svm6162
15:38:00   8  GROUP BY pair,trend,gatt
15:38:00   9  ORDER BY pair,trend,gatt
15:38:00  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5176 -.16573973
usd_jpy 	-1 up	      4864 .170072246
usd_jpy 	-1		53
usd_jpy 	 1 nup	      5077 -.15499158
usd_jpy 	 1 up	      4560  .17449582
usd_jpy 	 1		19

6 rows selected.

Elapsed: 00:00:00.03
15:38:00 SQL> 
15:38:00 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.18
15:38:00 SQL> CREATE TABLE modsrc COMPRESS AS
15:38:00   2  SELECT
15:38:00   3  pair
15:38:00   4  ,ydate
15:38:00   5  ,prdate
15:38:00   6  ,trend
15:38:00   7  ,g6
15:38:00   8  ,gatt
15:38:00   9  ,gattn
15:38:00  10  FROM svm6162
15:38:00  11  /

Table created.

Elapsed: 00:00:00.08
15:38:00 SQL> 
15:38:00 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
15:38:00 SQL> 
15:38:00 SQL> DROP   TABLE jpy_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
15:38:00 SQL> CREATE TABLE jpy_ms610 COMPRESS AS
15:38:00   2  SELECT
15:38:00   3  ydate
15:38:00   4  ,trend jpy_trend
15:38:00   5  ,g6    jpy_g6
15:38:00   6  ,gatt  jpy_gatt
15:38:00   7  ,gattn jpy_gattn
15:38:00   8  FROM modsrc
15:38:00   9  /

Table created.

Elapsed: 00:00:00.06
15:38:00 SQL> 
15:38:00 SQL> ANALYZE TABLE jpy_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.14
15:38:01 SQL> 
15:38:01 SQL> -- I need a copy of the attributes:
15:38:01 SQL> 
15:38:01 SQL> 
15:38:01 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.03
15:38:01 SQL> CREATE TABLE jpy_att COMPRESS AS
15:38:01   2  SELECT
15:38:01   3  ydate
15:38:01   4  ,att00 jpy_att00
15:38:01   5  ,att01 jpy_att01
15:38:01   6  ,att02 jpy_att02
15:38:01   7  ,att03 jpy_att03
15:38:01   8  ,att04 jpy_att04
15:38:01   9  ,att05 jpy_att05
15:38:01  10  ,att06 jpy_att06
15:38:01  11  ,att07 jpy_att07
15:38:01  12  ,att08 jpy_att08
15:38:01  13  ,att09 jpy_att09
15:38:01  14  ,att10 jpy_att10
15:38:01  15  ,att11 jpy_att11
15:38:01  16  ,att12 jpy_att12
15:38:01  17  ,att13 jpy_att13
15:38:01  18  ,att14 jpy_att14
15:38:01  19  ,att15 jpy_att15
15:38:01  20  ,att16 jpy_att16
15:38:01  21  ,att17 jpy_att17
15:38:01  22  ,att18 jpy_att18
15:38:01  23  ,att19 jpy_att19
15:38:01  24  ,att20 jpy_att20
15:38:01  25  ,att21 jpy_att21
15:38:01  26  ,att22 jpy_att22
15:38:01  27  ,att23 jpy_att23
15:38:01  28  ,att24 jpy_att24
15:38:01  29  ,att25 jpy_att25
15:38:01  30  ,att26 jpy_att26
15:38:01  31  ,att27 jpy_att27
15:38:01  32  ,att28 jpy_att28
15:38:01  33  ,att29 jpy_att29
15:38:01  34  ,att30 jpy_att30
15:38:01  35  ,att31 jpy_att31
15:38:01  36  ,att32 jpy_att32
15:38:01  37  ,att33 jpy_att33
15:38:01  38  ,att34 jpy_att34
15:38:01  39  ,att35 jpy_att35
15:38:01  40  ,att36 jpy_att36
15:38:01  41  ,att37 jpy_att37
15:38:01  42  FROM svm6162
15:38:01  43  /

Table created.

Elapsed: 00:00:00.16
15:38:01 SQL> 
15:38:01 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.42
15:38:01 SQL> 
15:38:01 SQL> -- rpt
15:38:01 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19749

Elapsed: 00:00:00.90
15:38:02 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     19749

Elapsed: 00:00:00.00
15:38:02 SQL> 
15:38:02 SQL> --
15:38:02 SQL> -- cad610.sql
15:38:02 SQL> --
15:38:02 SQL> 
15:38:02 SQL> -- Creates views and tables for backtesting a forex SVM strategy
15:38:02 SQL> 
15:38:02 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.42
15:38:02 SQL> 
15:38:02 SQL> -- I created di5min here:
15:38:02 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
15:38:02 SQL> 
15:38:02 SQL> CREATE OR REPLACE VIEW svm6102 AS
15:38:02   2  SELECT
15:38:02   3  pair
15:38:02   4  ,ydate
15:38:02   5  ,prdate
15:38:02   6  ,rownum rnum -- acts as t in my time-series
15:38:02   7  ,clse
15:38:02   8  -- Derive a bunch of attributes from clse, the latest price:
15:38:02   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
15:38:02  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
15:38:02  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
15:38:02  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
15:38:02  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
15:38:02  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
15:38:02  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
15:38:02  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
15:38:02  17  --
15:38:02  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
15:38:02  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
15:38:02  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
15:38:02  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
15:38:02  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
15:38:02  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
15:38:02  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
15:38:02  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
15:38:02  26  --
15:38:02  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
15:38:02  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
15:38:02  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
15:38:02  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
15:38:02  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
15:38:02  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
15:38:02  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
15:38:02  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
15:38:02  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
15:38:02  36  FROM di5min WHERE pair LIKE'%cad%'
15:38:02  37  AND ydate > sysdate - 95
15:38:02  38  ORDER BY ydate
15:38:02  39  /

View created.

Elapsed: 00:00:00.04
15:38:03 SQL> 
15:38:03 SQL> -- rpt
15:38:03 SQL> 
15:38:03 SQL> SELECT
15:38:03   2  pair
15:38:03   3  ,COUNT(pair)
15:38:03   4  ,MIN(clse),MAX(clse)
15:38:03   5  ,MIN(avg6),MAX(avg6)
15:38:03   6  ,MIN(ydate),MAX(ydate)
15:38:03   7  FROM svm6102
15:38:03   8  GROUP BY pair
15:38:03   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_cad       19749    .988925	   1.0355 .990605795 1.03282877 2010-10-03 20:55:01 2011-01-06 15:35:00

Elapsed: 00:00:00.85
15:38:03 SQL> 
15:38:03 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
15:38:03 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:01.20
15:38:05 SQL> CREATE TABLE svm6122 COMPRESS AS
15:38:05   2  SELECT
15:38:05   3  pair
15:38:05   4  ,ydate
15:38:05   5  ,prdate
15:38:05   6  ,clse
15:38:05   7  -- g6 is important. I want to predict g6:
15:38:05   8  ,ld6 - clse g6
15:38:05   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
15:38:05  10  -- I want more attributes from the ones I derived above:
15:38:05  11  -- clse relation to moving-min
15:38:05  12  ,clse-min4  cm4
15:38:05  13  ,clse-min6  cm6
15:38:05  14  ,clse-min8  cm8
15:38:05  15  ,clse-min10 cm10
15:38:05  16  ,clse-min12 cm12
15:38:05  17  ,clse-min14 cm14
15:38:05  18  ,clse-min16 cm16
15:38:05  19  ,clse-min18 cm18
15:38:05  20  -- clse relation to moving-avg
15:38:05  21  ,clse-avg4  ca4
15:38:05  22  ,clse-avg6  ca6
15:38:05  23  ,clse-avg8  ca8
15:38:05  24  ,clse-avg10 ca10
15:38:05  25  ,clse-avg12 ca12
15:38:05  26  ,clse-avg14 ca14
15:38:05  27  ,clse-avg16 ca16
15:38:05  28  ,clse-avg18 ca18
15:38:05  29  -- clse relation to moving-max
15:38:05  30  ,clse-max4  cx4
15:38:05  31  ,clse-max6  cx6
15:38:05  32  ,clse-max8  cx8
15:38:05  33  ,clse-max10 cx10
15:38:05  34  ,clse-max12 cx12
15:38:05  35  ,clse-max14 cx14
15:38:05  36  ,clse-max16 cx16
15:38:05  37  ,clse-max18 cx18
15:38:05  38  -- Derive more attributes.
15:38:05  39  -- I want to use CORR() here to help SVM see the shape of the series.
15:38:05  40  -- But COVAR_POP is more stable:
15:38:05  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
15:38:05  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
15:38:05  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
15:38:05  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
15:38:05  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
15:38:05  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
15:38:05  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
15:38:05  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
15:38:05  49  -- Derive date related attributes:
15:38:05  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
15:38:05  51  ,0+TO_CHAR(ydate,'D')d
15:38:05  52  ,0+TO_CHAR(ydate,'W')w
15:38:05  53  -- mpm stands for minutes-past-midnight:
15:38:05  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
15:38:05  55  -- mph stands for minutes-past-hour:
15:38:05  56  ,0+TO_CHAR(ydate,'MI')mph
15:38:05  57  FROM svm6102
15:38:05  58  ORDER BY ydate
15:38:05  59  /

Table created.

Elapsed: 00:00:02.05
15:38:07 SQL> 
15:38:07 SQL> -- rpt
15:38:07 SQL> 
15:38:07 SQL> SELECT
15:38:07   2  pair
15:38:07   3  ,COUNT(pair)
15:38:07   4  ,MIN(clse),MAX(clse)
15:38:07   5  ,MIN(ydate),MAX(ydate)
15:38:07   6  FROM svm6122
15:38:07   7  GROUP BY pair
15:38:07   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_cad       19749    .988925	   1.0355 2010-10-03 20:55:01 2011-01-06 15:35:00

Elapsed: 00:00:00.04
15:38:07 SQL> 
15:38:07 SQL> -- Prepare for derivation of NTILE based params:
15:38:07 SQL> 
15:38:07 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.23
15:38:07 SQL> CREATE TABLE svm6142 COMPRESS AS
15:38:07   2  SELECT
15:38:07   3  pair
15:38:07   4  ,ydate
15:38:07   5  ,prdate
15:38:07   6  ,clse
15:38:07   7  ,g6
15:38:07   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
15:38:07   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
15:38:07  10  ,CASE WHEN trend IS NULL THEN 1
15:38:07  11  	    WHEN trend =0      THEN 1
15:38:07  12  	    ELSE trend END trend
15:38:07  13  ,cm4
15:38:07  14  ,cm6
15:38:07  15  ,cm8
15:38:07  16  ,cm10
15:38:07  17  ,cm12
15:38:07  18  ,cm14
15:38:07  19  ,cm16
15:38:07  20  ,cm18
15:38:07  21  --
15:38:07  22  ,ca4
15:38:07  23  ,ca6
15:38:07  24  ,ca8
15:38:07  25  ,ca10
15:38:07  26  ,ca12
15:38:07  27  ,ca14
15:38:07  28  ,ca16
15:38:07  29  ,ca18
15:38:07  30  --
15:38:07  31  ,cx4
15:38:07  32  ,cx6
15:38:07  33  ,cx8
15:38:07  34  ,cx10
15:38:07  35  ,cx12
15:38:07  36  ,cx14
15:38:07  37  ,cx16
15:38:07  38  ,cx18
15:38:07  39  --
15:38:07  40  ,crr4
15:38:07  41  ,crr6
15:38:07  42  ,crr8
15:38:07  43  ,crr10
15:38:07  44  ,crr12
15:38:07  45  ,crr14
15:38:07  46  ,crr16
15:38:07  47  ,crr18
15:38:07  48  --
15:38:07  49  ,hh
15:38:07  50  ,d
15:38:07  51  ,w
15:38:07  52  ,mpm
15:38:07  53  ,mph
15:38:07  54  FROM svm6122
15:38:07  55  ORDER BY ydate
15:38:07  56  /

Table created.

Elapsed: 00:00:00.37
15:38:07 SQL> 
15:38:07 SQL> -- rpt
15:38:07 SQL> 
15:38:07 SQL> SELECT
15:38:07   2  pair
15:38:07   3  ,trend
15:38:07   4  ,gatt
15:38:07   5  ,COUNT(pair)
15:38:07   6  ,AVG(g6)
15:38:07   7  FROM svm6142
15:38:07   8  GROUP BY pair,trend,gatt
15:38:07   9  ORDER BY pair,trend,gatt
15:38:07  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7318 -.00124187
usd_cad 	-1 up	      3136 .003055501
usd_cad 	-1		47
usd_cad 	 1 nup	      6834 -.00161269
usd_cad 	 1 up	      2389 .003648486
usd_cad 	 1		25

6 rows selected.

Elapsed: 00:00:00.04
15:38:07 SQL> 
15:38:07 SQL> 
15:38:07 SQL> -- Derive NTILE based params:
15:38:07 SQL> 
15:38:07 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.16
15:38:07 SQL> CREATE TABLE svm6162 COMPRESS AS
15:38:07   2  SELECT
15:38:07   3  pair
15:38:07   4  ,ydate
15:38:07   5  ,prdate
15:38:07   6  ,clse
15:38:07   7  ,g6
15:38:07   8  ,gatt
15:38:07   9  ,gattn
15:38:07  10  ,trend
15:38:07  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
15:38:07  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
15:38:07  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
15:38:07  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
15:38:07  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
15:38:07  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
15:38:07  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
15:38:07  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
15:38:07  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
15:38:07  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
15:38:07  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
15:38:07  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
15:38:07  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
15:38:07  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
15:38:07  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
15:38:07  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
15:38:07  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
15:38:07  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
15:38:07  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
15:38:07  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
15:38:07  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
15:38:07  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
15:38:07  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
15:38:07  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
15:38:07  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
15:38:07  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
15:38:07  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
15:38:07  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
15:38:07  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
15:38:07  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
15:38:07  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
15:38:07  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
15:38:07  43  ,hh  att32
15:38:07  44  ,d   att33
15:38:07  45  ,w   att34
15:38:07  46  ,mpm att35
15:38:07  47  ,mph att36
15:38:07  48  ,trend att37
15:38:07  49  FROM svm6142
15:38:07  50  ORDER BY ydate
15:38:07  51  /

Table created.

Elapsed: 00:00:04.73
15:38:12 SQL> 
15:38:12 SQL> -- rpt
15:38:12 SQL> 
15:38:12 SQL> SELECT
15:38:12   2  pair
15:38:12   3  ,trend
15:38:12   4  ,gatt
15:38:12   5  ,COUNT(pair)
15:38:12   6  ,AVG(g6)
15:38:12   7  FROM svm6162
15:38:12   8  GROUP BY pair,trend,gatt
15:38:12   9  ORDER BY pair,trend,gatt
15:38:12  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7318 -.00124187
usd_cad 	-1 up	      3136 .003055501
usd_cad 	-1		47
usd_cad 	 1 nup	      6834 -.00161269
usd_cad 	 1 up	      2389 .003648486
usd_cad 	 1		25

6 rows selected.

Elapsed: 00:00:00.03
15:38:12 SQL> 
15:38:12 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.15
15:38:12 SQL> CREATE TABLE modsrc COMPRESS AS
15:38:12   2  SELECT
15:38:12   3  pair
15:38:12   4  ,ydate
15:38:12   5  ,prdate
15:38:12   6  ,trend
15:38:12   7  ,g6
15:38:12   8  ,gatt
15:38:12   9  ,gattn
15:38:12  10  FROM svm6162
15:38:12  11  /

Table created.

Elapsed: 00:00:00.08
15:38:12 SQL> 
15:38:12 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
15:38:13 SQL> 
15:38:13 SQL> DROP   TABLE cad_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
15:38:13 SQL> CREATE TABLE cad_ms610 COMPRESS AS
15:38:13   2  SELECT
15:38:13   3  ydate
15:38:13   4  ,trend cad_trend
15:38:13   5  ,g6    cad_g6
15:38:13   6  ,gatt  cad_gatt
15:38:13   7  ,gattn cad_gattn
15:38:13   8  FROM modsrc
15:38:13   9  /

Table created.

Elapsed: 00:00:00.06
15:38:13 SQL> 
15:38:13 SQL> ANALYZE TABLE cad_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
15:38:13 SQL> 
15:38:13 SQL> -- I need a copy of the attributes:
15:38:13 SQL> 
15:38:13 SQL> 
15:38:13 SQL> DROP   TABLE cad_att;

Table dropped.

Elapsed: 00:00:00.04
15:38:13 SQL> CREATE TABLE cad_att COMPRESS AS
15:38:13   2  SELECT
15:38:13   3  ydate
15:38:13   4  ,att00 cad_att00
15:38:13   5  ,att01 cad_att01
15:38:13   6  ,att02 cad_att02
15:38:13   7  ,att03 cad_att03
15:38:13   8  ,att04 cad_att04
15:38:13   9  ,att05 cad_att05
15:38:13  10  ,att06 cad_att06
15:38:13  11  ,att07 cad_att07
15:38:13  12  ,att08 cad_att08
15:38:13  13  ,att09 cad_att09
15:38:13  14  ,att10 cad_att10
15:38:13  15  ,att11 cad_att11
15:38:13  16  ,att12 cad_att12
15:38:13  17  ,att13 cad_att13
15:38:13  18  ,att14 cad_att14
15:38:13  19  ,att15 cad_att15
15:38:13  20  ,att16 cad_att16
15:38:13  21  ,att17 cad_att17
15:38:13  22  ,att18 cad_att18
15:38:13  23  ,att19 cad_att19
15:38:13  24  ,att20 cad_att20
15:38:13  25  ,att21 cad_att21
15:38:13  26  ,att22 cad_att22
15:38:13  27  ,att23 cad_att23
15:38:13  28  ,att24 cad_att24
15:38:13  29  ,att25 cad_att25
15:38:13  30  ,att26 cad_att26
15:38:13  31  ,att27 cad_att27
15:38:13  32  ,att28 cad_att28
15:38:13  33  ,att29 cad_att29
15:38:13  34  ,att30 cad_att30
15:38:13  35  ,att31 cad_att31
15:38:13  36  ,att32 cad_att32
15:38:13  37  ,att33 cad_att33
15:38:13  38  ,att34 cad_att34
15:38:13  39  ,att35 cad_att35
15:38:13  40  ,att36 cad_att36
15:38:13  41  ,att37 cad_att37
15:38:13  42  FROM svm6162
15:38:13  43  /

Table created.

Elapsed: 00:00:00.17
15:38:13 SQL> 
15:38:13 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
15:38:14 SQL> 
15:38:14 SQL> -- rpt
15:38:14 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19749

Elapsed: 00:00:00.85
15:38:14 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
     19749

Elapsed: 00:00:00.00
15:38:14 SQL> 
15:38:14 SQL> --
15:38:14 SQL> -- chf610.sql
15:38:14 SQL> --
15:38:14 SQL> 
15:38:14 SQL> -- Creates views and tables for backtesting a forex SVM strategy
15:38:14 SQL> 
15:38:14 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.35
15:38:15 SQL> 
15:38:15 SQL> -- I created di5min here:
15:38:15 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
15:38:15 SQL> 
15:38:15 SQL> CREATE OR REPLACE VIEW svm6102 AS
15:38:15   2  SELECT
15:38:15   3  pair
15:38:15   4  ,ydate
15:38:15   5  ,prdate
15:38:15   6  ,rownum rnum -- acts as t in my time-series
15:38:15   7  ,clse
15:38:15   8  -- Derive a bunch of attributes from clse, the latest price:
15:38:15   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
15:38:15  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
15:38:15  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
15:38:15  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
15:38:15  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
15:38:15  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
15:38:15  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
15:38:15  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
15:38:15  17  --
15:38:15  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
15:38:15  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
15:38:15  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
15:38:15  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
15:38:15  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
15:38:15  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
15:38:15  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
15:38:15  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
15:38:15  26  --
15:38:15  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
15:38:15  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
15:38:15  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
15:38:15  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
15:38:15  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
15:38:15  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
15:38:15  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
15:38:15  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
15:38:15  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
15:38:15  36  FROM di5min WHERE pair LIKE'%chf%'
15:38:15  37  AND ydate > sysdate - 95
15:38:15  38  ORDER BY ydate
15:38:15  39  /

View created.

Elapsed: 00:00:00.05
15:38:15 SQL> 
15:38:15 SQL> -- rpt
15:38:15 SQL> 
15:38:15 SQL> SELECT
15:38:15   2  pair
15:38:15   3  ,COUNT(pair)
15:38:15   4  ,MIN(clse),MAX(clse)
15:38:15   5  ,MIN(avg6),MAX(avg6)
15:38:15   6  ,MIN(ydate),MAX(ydate)
15:38:15   7  FROM svm6102
15:38:15   8  GROUP BY pair
15:38:15   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_chf       19752    .931675	  1.00635  .93325411 1.00498151 2010-10-03 20:55:01 2011-01-06 15:35:00

Elapsed: 00:00:00.86
15:38:16 SQL> 
15:38:16 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
15:38:16 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.30
15:38:16 SQL> CREATE TABLE svm6122 COMPRESS AS
15:38:16   2  SELECT
15:38:16   3  pair
15:38:16   4  ,ydate
15:38:16   5  ,prdate
15:38:16   6  ,clse
15:38:16   7  -- g6 is important. I want to predict g6:
15:38:16   8  ,ld6 - clse g6
15:38:16   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
15:38:16  10  -- I want more attributes from the ones I derived above:
15:38:16  11  -- clse relation to moving-min
15:38:16  12  ,clse-min4  cm4
15:38:16  13  ,clse-min6  cm6
15:38:16  14  ,clse-min8  cm8
15:38:16  15  ,clse-min10 cm10
15:38:16  16  ,clse-min12 cm12
15:38:16  17  ,clse-min14 cm14
15:38:16  18  ,clse-min16 cm16
15:38:16  19  ,clse-min18 cm18
15:38:16  20  -- clse relation to moving-avg
15:38:16  21  ,clse-avg4  ca4
15:38:16  22  ,clse-avg6  ca6
15:38:16  23  ,clse-avg8  ca8
15:38:16  24  ,clse-avg10 ca10
15:38:16  25  ,clse-avg12 ca12
15:38:16  26  ,clse-avg14 ca14
15:38:16  27  ,clse-avg16 ca16
15:38:16  28  ,clse-avg18 ca18
15:38:16  29  -- clse relation to moving-max
15:38:16  30  ,clse-max4  cx4
15:38:16  31  ,clse-max6  cx6
15:38:16  32  ,clse-max8  cx8
15:38:16  33  ,clse-max10 cx10
15:38:16  34  ,clse-max12 cx12
15:38:16  35  ,clse-max14 cx14
15:38:16  36  ,clse-max16 cx16
15:38:16  37  ,clse-max18 cx18
15:38:16  38  -- Derive more attributes.
15:38:16  39  -- I want to use CORR() here to help SVM see the shape of the series.
15:38:16  40  -- But COVAR_POP is more stable:
15:38:16  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
15:38:16  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
15:38:16  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
15:38:16  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
15:38:16  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
15:38:16  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
15:38:16  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
15:38:16  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
15:38:16  49  -- Derive date related attributes:
15:38:16  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
15:38:16  51  ,0+TO_CHAR(ydate,'D')d
15:38:16  52  ,0+TO_CHAR(ydate,'W')w
15:38:16  53  -- mpm stands for minutes-past-midnight:
15:38:16  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
15:38:16  55  -- mph stands for minutes-past-hour:
15:38:16  56  ,0+TO_CHAR(ydate,'MI')mph
15:38:16  57  FROM svm6102
15:38:16  58  ORDER BY ydate
15:38:16  59  /

Table created.

Elapsed: 00:00:02.07
15:38:18 SQL> 
15:38:18 SQL> -- rpt
15:38:18 SQL> 
15:38:18 SQL> SELECT
15:38:18   2  pair
15:38:18   3  ,COUNT(pair)
15:38:18   4  ,MIN(clse),MAX(clse)
15:38:18   5  ,MIN(ydate),MAX(ydate)
15:38:18   6  FROM svm6122
15:38:18   7  GROUP BY pair
15:38:18   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_chf       19752    .931675	  1.00635 2010-10-03 20:55:01 2011-01-06 15:35:00

Elapsed: 00:00:00.04
15:38:18 SQL> 
15:38:18 SQL> -- Prepare for derivation of NTILE based params:
15:38:18 SQL> 
15:38:18 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.24
15:38:18 SQL> CREATE TABLE svm6142 COMPRESS AS
15:38:18   2  SELECT
15:38:18   3  pair
15:38:18   4  ,ydate
15:38:18   5  ,prdate
15:38:18   6  ,clse
15:38:18   7  ,g6
15:38:18   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
15:38:18   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
15:38:18  10  ,CASE WHEN trend IS NULL THEN 1
15:38:18  11  	    WHEN trend =0      THEN 1
15:38:18  12  	    ELSE trend END trend
15:38:18  13  ,cm4
15:38:18  14  ,cm6
15:38:18  15  ,cm8
15:38:18  16  ,cm10
15:38:18  17  ,cm12
15:38:18  18  ,cm14
15:38:18  19  ,cm16
15:38:18  20  ,cm18
15:38:18  21  --
15:38:18  22  ,ca4
15:38:18  23  ,ca6
15:38:18  24  ,ca8
15:38:18  25  ,ca10
15:38:18  26  ,ca12
15:38:18  27  ,ca14
15:38:18  28  ,ca16
15:38:18  29  ,ca18
15:38:18  30  --
15:38:18  31  ,cx4
15:38:18  32  ,cx6
15:38:18  33  ,cx8
15:38:18  34  ,cx10
15:38:18  35  ,cx12
15:38:18  36  ,cx14
15:38:18  37  ,cx16
15:38:18  38  ,cx18
15:38:18  39  --
15:38:18  40  ,crr4
15:38:18  41  ,crr6
15:38:18  42  ,crr8
15:38:18  43  ,crr10
15:38:18  44  ,crr12
15:38:18  45  ,crr14
15:38:18  46  ,crr16
15:38:18  47  ,crr18
15:38:18  48  --
15:38:18  49  ,hh
15:38:18  50  ,d
15:38:18  51  ,w
15:38:18  52  ,mpm
15:38:18  53  ,mph
15:38:18  54  FROM svm6122
15:38:18  55  ORDER BY ydate
15:38:18  56  /

Table created.

Elapsed: 00:00:00.62
15:38:19 SQL> 
15:38:19 SQL> -- rpt
15:38:19 SQL> 
15:38:19 SQL> SELECT
15:38:19   2  pair
15:38:19   3  ,trend
15:38:19   4  ,gatt
15:38:19   5  ,COUNT(pair)
15:38:19   6  ,AVG(g6)
15:38:19   7  FROM svm6142
15:38:19   8  GROUP BY pair,trend,gatt
15:38:19   9  ORDER BY pair,trend,gatt
15:38:19  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7096 -.00198856
usd_chf 	-1 up	      3062 .003823561
usd_chf 	-1		29
usd_chf 	 1 nup	      6541 -.00152858
usd_chf 	 1 up	      2981 .003939435
usd_chf 	 1		43

6 rows selected.

Elapsed: 00:00:00.04
15:38:19 SQL> 
15:38:19 SQL> 
15:38:19 SQL> -- Derive NTILE based params:
15:38:19 SQL> 
15:38:19 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.16
15:38:19 SQL> CREATE TABLE svm6162 COMPRESS AS
15:38:19   2  SELECT
15:38:19   3  pair
15:38:19   4  ,ydate
15:38:19   5  ,prdate
15:38:19   6  ,clse
15:38:19   7  ,g6
15:38:19   8  ,gatt
15:38:19   9  ,gattn
15:38:19  10  ,trend
15:38:19  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
15:38:19  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
15:38:19  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
15:38:19  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
15:38:19  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
15:38:19  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
15:38:19  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
15:38:19  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
15:38:19  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
15:38:19  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
15:38:19  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
15:38:19  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
15:38:19  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
15:38:19  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
15:38:19  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
15:38:19  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
15:38:19  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
15:38:19  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
15:38:19  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
15:38:19  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
15:38:19  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
15:38:19  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
15:38:19  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
15:38:19  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
15:38:19  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
15:38:19  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
15:38:19  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
15:38:19  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
15:38:19  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
15:38:19  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
15:38:19  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
15:38:19  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
15:38:19  43  ,hh  att32
15:38:19  44  ,d   att33
15:38:19  45  ,w   att34
15:38:19  46  ,mpm att35
15:38:19  47  ,mph att36
15:38:19  48  ,trend att37
15:38:19  49  FROM svm6142
15:38:19  50  ORDER BY ydate
15:38:19  51  /

Table created.

Elapsed: 00:00:04.82
15:38:24 SQL> 
15:38:24 SQL> -- rpt
15:38:24 SQL> 
15:38:24 SQL> SELECT
15:38:24   2  pair
15:38:24   3  ,trend
15:38:24   4  ,gatt
15:38:24   5  ,COUNT(pair)
15:38:24   6  ,AVG(g6)
15:38:24   7  FROM svm6162
15:38:24   8  GROUP BY pair,trend,gatt
15:38:24   9  ORDER BY pair,trend,gatt
15:38:24  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7096 -.00198856
usd_chf 	-1 up	      3062 .003823561
usd_chf 	-1		29
usd_chf 	 1 nup	      6541 -.00152858
usd_chf 	 1 up	      2981 .003939435
usd_chf 	 1		43

6 rows selected.

Elapsed: 00:00:00.03
15:38:24 SQL> 
15:38:24 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.17
15:38:24 SQL> CREATE TABLE modsrc COMPRESS AS
15:38:24   2  SELECT
15:38:24   3  pair
15:38:24   4  ,ydate
15:38:24   5  ,prdate
15:38:24   6  ,trend
15:38:24   7  ,g6
15:38:24   8  ,gatt
15:38:24   9  ,gattn
15:38:24  10  FROM svm6162
15:38:24  11  /

Table created.

Elapsed: 00:00:00.08
15:38:24 SQL> 
15:38:24 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
15:38:24 SQL> 
15:38:24 SQL> DROP   TABLE chf_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
15:38:25 SQL> CREATE TABLE chf_ms610 COMPRESS AS
15:38:25   2  SELECT
15:38:25   3  ydate
15:38:25   4  ,trend chf_trend
15:38:25   5  ,g6    chf_g6
15:38:25   6  ,gatt  chf_gatt
15:38:25   7  ,gattn chf_gattn
15:38:25   8  FROM modsrc
15:38:25   9  /

Table created.

Elapsed: 00:00:00.07
15:38:25 SQL> 
15:38:25 SQL> ANALYZE TABLE chf_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
15:38:25 SQL> 
15:38:25 SQL> -- I need a copy of the attributes:
15:38:25 SQL> 
15:38:25 SQL> 
15:38:25 SQL> DROP   TABLE chf_att;

Table dropped.

Elapsed: 00:00:00.05
15:38:25 SQL> CREATE TABLE chf_att COMPRESS AS
15:38:25   2  SELECT
15:38:25   3  ydate
15:38:25   4  ,att00 chf_att00
15:38:25   5  ,att01 chf_att01
15:38:25   6  ,att02 chf_att02
15:38:25   7  ,att03 chf_att03
15:38:25   8  ,att04 chf_att04
15:38:25   9  ,att05 chf_att05
15:38:25  10  ,att06 chf_att06
15:38:25  11  ,att07 chf_att07
15:38:25  12  ,att08 chf_att08
15:38:25  13  ,att09 chf_att09
15:38:25  14  ,att10 chf_att10
15:38:25  15  ,att11 chf_att11
15:38:25  16  ,att12 chf_att12
15:38:25  17  ,att13 chf_att13
15:38:25  18  ,att14 chf_att14
15:38:25  19  ,att15 chf_att15
15:38:25  20  ,att16 chf_att16
15:38:25  21  ,att17 chf_att17
15:38:25  22  ,att18 chf_att18
15:38:25  23  ,att19 chf_att19
15:38:25  24  ,att20 chf_att20
15:38:25  25  ,att21 chf_att21
15:38:25  26  ,att22 chf_att22
15:38:25  27  ,att23 chf_att23
15:38:25  28  ,att24 chf_att24
15:38:25  29  ,att25 chf_att25
15:38:25  30  ,att26 chf_att26
15:38:25  31  ,att27 chf_att27
15:38:25  32  ,att28 chf_att28
15:38:25  33  ,att29 chf_att29
15:38:25  34  ,att30 chf_att30
15:38:25  35  ,att31 chf_att31
15:38:25  36  ,att32 chf_att32
15:38:25  37  ,att33 chf_att33
15:38:25  38  ,att34 chf_att34
15:38:25  39  ,att35 chf_att35
15:38:25  40  ,att36 chf_att36
15:38:25  41  ,att37 chf_att37
15:38:25  42  FROM svm6162
15:38:25  43  /

Table created.

Elapsed: 00:00:00.17
15:38:25 SQL> 
15:38:25 SQL> ANALYZE TABLE chf_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
15:38:25 SQL> 
15:38:25 SQL> -- rpt
15:38:25 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19752

Elapsed: 00:00:00.85
15:38:26 SQL> SELECT COUNT(*)FROM chf_att;

  COUNT(*)
----------
     19752

Elapsed: 00:00:00.00
15:38:26 SQL> 
15:38:26 SQL> --
15:38:26 SQL> -- ech610.sql
15:38:26 SQL> --
15:38:26 SQL> 
15:38:26 SQL> -- Creates views and tables for backtesting a forex SVM strategy
15:38:26 SQL> 
15:38:26 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.39
15:38:27 SQL> 
15:38:27 SQL> -- I created di5min here:
15:38:27 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
15:38:27 SQL> 
15:38:27 SQL> CREATE OR REPLACE VIEW svm6102 AS
15:38:27   2  SELECT
15:38:27   3  pair
15:38:27   4  ,ydate
15:38:27   5  ,prdate
15:38:27   6  ,rownum rnum -- acts as t in my time-series
15:38:27   7  ,clse
15:38:27   8  -- Derive a bunch of attributes from clse, the latest price:
15:38:27   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
15:38:27  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
15:38:27  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
15:38:27  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
15:38:27  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
15:38:27  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
15:38:27  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
15:38:27  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
15:38:27  17  --
15:38:27  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
15:38:27  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
15:38:27  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
15:38:27  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
15:38:27  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
15:38:27  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
15:38:27  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
15:38:27  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
15:38:27  26  --
15:38:27  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
15:38:27  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
15:38:27  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
15:38:27  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
15:38:27  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
15:38:27  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
15:38:27  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
15:38:27  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
15:38:27  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
15:38:27  36  FROM di5min WHERE pair LIKE'%ech%'
15:38:27  37  AND ydate > sysdate - 95
15:38:27  38  ORDER BY ydate
15:38:27  39  /

View created.

Elapsed: 00:00:00.05
15:38:27 SQL> 
15:38:27 SQL> -- rpt
15:38:27 SQL> 
15:38:27 SQL> SELECT
15:38:27   2  pair
15:38:27   3  ,COUNT(pair)
15:38:27   4  ,MIN(clse),MAX(clse)
15:38:27   5  ,MIN(avg6),MAX(avg6)
15:38:27   6  ,MIN(ydate),MAX(ydate)
15:38:27   7  FROM svm6102
15:38:27   8  GROUP BY pair
15:38:27   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ech_usd       19749 1.24182424 1.38284305 1.24320711 1.37986485 2010-10-03 20:55:01 2011-01-06 15:30:00

Elapsed: 00:00:00.85
15:38:28 SQL> 
15:38:28 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
15:38:28 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.24
15:38:28 SQL> CREATE TABLE svm6122 COMPRESS AS
15:38:28   2  SELECT
15:38:28   3  pair
15:38:28   4  ,ydate
15:38:28   5  ,prdate
15:38:28   6  ,clse
15:38:28   7  -- g6 is important. I want to predict g6:
15:38:28   8  ,ld6 - clse g6
15:38:28   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
15:38:28  10  -- I want more attributes from the ones I derived above:
15:38:28  11  -- clse relation to moving-min
15:38:28  12  ,clse-min4  cm4
15:38:28  13  ,clse-min6  cm6
15:38:28  14  ,clse-min8  cm8
15:38:28  15  ,clse-min10 cm10
15:38:28  16  ,clse-min12 cm12
15:38:28  17  ,clse-min14 cm14
15:38:28  18  ,clse-min16 cm16
15:38:28  19  ,clse-min18 cm18
15:38:28  20  -- clse relation to moving-avg
15:38:28  21  ,clse-avg4  ca4
15:38:28  22  ,clse-avg6  ca6
15:38:28  23  ,clse-avg8  ca8
15:38:28  24  ,clse-avg10 ca10
15:38:28  25  ,clse-avg12 ca12
15:38:28  26  ,clse-avg14 ca14
15:38:28  27  ,clse-avg16 ca16
15:38:28  28  ,clse-avg18 ca18
15:38:28  29  -- clse relation to moving-max
15:38:28  30  ,clse-max4  cx4
15:38:28  31  ,clse-max6  cx6
15:38:28  32  ,clse-max8  cx8
15:38:28  33  ,clse-max10 cx10
15:38:28  34  ,clse-max12 cx12
15:38:28  35  ,clse-max14 cx14
15:38:28  36  ,clse-max16 cx16
15:38:28  37  ,clse-max18 cx18
15:38:28  38  -- Derive more attributes.
15:38:28  39  -- I want to use CORR() here to help SVM see the shape of the series.
15:38:28  40  -- But COVAR_POP is more stable:
15:38:28  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
15:38:28  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
15:38:28  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
15:38:28  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
15:38:28  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
15:38:28  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
15:38:28  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
15:38:28  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
15:38:28  49  -- Derive date related attributes:
15:38:28  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
15:38:28  51  ,0+TO_CHAR(ydate,'D')d
15:38:28  52  ,0+TO_CHAR(ydate,'W')w
15:38:28  53  -- mpm stands for minutes-past-midnight:
15:38:28  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
15:38:28  55  -- mph stands for minutes-past-hour:
15:38:28  56  ,0+TO_CHAR(ydate,'MI')mph
15:38:28  57  FROM svm6102
15:38:28  58  ORDER BY ydate
15:38:28  59  /

Table created.

Elapsed: 00:00:02.13
15:38:30 SQL> 
15:38:30 SQL> -- rpt
15:38:30 SQL> 
15:38:30 SQL> SELECT
15:38:30   2  pair
15:38:30   3  ,COUNT(pair)
15:38:30   4  ,MIN(clse),MAX(clse)
15:38:30   5  ,MIN(ydate),MAX(ydate)
15:38:30   6  FROM svm6122
15:38:30   7  GROUP BY pair
15:38:30   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ech_usd       19749 1.24182424 1.38284305 2010-10-03 20:55:01 2011-01-06 15:30:00

Elapsed: 00:00:00.04
15:38:30 SQL> 
15:38:30 SQL> -- Prepare for derivation of NTILE based params:
15:38:30 SQL> 
15:38:30 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.27
15:38:30 SQL> CREATE TABLE svm6142 COMPRESS AS
15:38:30   2  SELECT
15:38:30   3  pair
15:38:30   4  ,ydate
15:38:30   5  ,prdate
15:38:30   6  ,clse
15:38:30   7  ,g6
15:38:30   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
15:38:30   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
15:38:30  10  ,CASE WHEN trend IS NULL THEN 1
15:38:30  11  	    WHEN trend =0      THEN 1
15:38:30  12  	    ELSE trend END trend
15:38:30  13  ,cm4
15:38:30  14  ,cm6
15:38:30  15  ,cm8
15:38:30  16  ,cm10
15:38:30  17  ,cm12
15:38:30  18  ,cm14
15:38:30  19  ,cm16
15:38:30  20  ,cm18
15:38:30  21  --
15:38:30  22  ,ca4
15:38:30  23  ,ca6
15:38:30  24  ,ca8
15:38:30  25  ,ca10
15:38:30  26  ,ca12
15:38:30  27  ,ca14
15:38:30  28  ,ca16
15:38:30  29  ,ca18
15:38:30  30  --
15:38:30  31  ,cx4
15:38:30  32  ,cx6
15:38:30  33  ,cx8
15:38:30  34  ,cx10
15:38:30  35  ,cx12
15:38:30  36  ,cx14
15:38:30  37  ,cx16
15:38:30  38  ,cx18
15:38:30  39  --
15:38:30  40  ,crr4
15:38:30  41  ,crr6
15:38:30  42  ,crr8
15:38:30  43  ,crr10
15:38:30  44  ,crr12
15:38:30  45  ,crr14
15:38:30  46  ,crr16
15:38:30  47  ,crr18
15:38:30  48  --
15:38:30  49  ,hh
15:38:30  50  ,d
15:38:30  51  ,w
15:38:30  52  ,mpm
15:38:30  53  ,mph
15:38:30  54  FROM svm6122
15:38:30  55  ORDER BY ydate
15:38:30  56  /

Table created.

Elapsed: 00:00:00.41
15:38:31 SQL> 
15:38:31 SQL> -- rpt
15:38:31 SQL> 
15:38:31 SQL> SELECT
15:38:31   2  pair
15:38:31   3  ,trend
15:38:31   4  ,gatt
15:38:31   5  ,COUNT(pair)
15:38:31   6  ,AVG(g6)
15:38:31   7  FROM svm6142
15:38:31   8  GROUP BY pair,trend,gatt
15:38:31   9  ORDER BY pair,trend,gatt
15:38:31  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6728 -.00223201
ech_usd 	-1 up	      3581 .003574571
ech_usd 	-1		66
ech_usd 	 1 nup	      6461  -.0023695
ech_usd 	 1 up	      2907 .004121147
ech_usd 	 1		 6

6 rows selected.

Elapsed: 00:00:00.04
15:38:31 SQL> 
15:38:31 SQL> 
15:38:31 SQL> -- Derive NTILE based params:
15:38:31 SQL> 
15:38:31 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.16
15:38:31 SQL> CREATE TABLE svm6162 COMPRESS AS
15:38:31   2  SELECT
15:38:31   3  pair
15:38:31   4  ,ydate
15:38:31   5  ,prdate
15:38:31   6  ,clse
15:38:31   7  ,g6
15:38:31   8  ,gatt
15:38:31   9  ,gattn
15:38:31  10  ,trend
15:38:31  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
15:38:31  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
15:38:31  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
15:38:31  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
15:38:31  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
15:38:31  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
15:38:31  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
15:38:31  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
15:38:31  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
15:38:31  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
15:38:31  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
15:38:31  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
15:38:31  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
15:38:31  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
15:38:31  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
15:38:31  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
15:38:31  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
15:38:31  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
15:38:31  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
15:38:31  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
15:38:31  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
15:38:31  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
15:38:31  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
15:38:31  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
15:38:31  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
15:38:31  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
15:38:31  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
15:38:31  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
15:38:31  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
15:38:31  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
15:38:31  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
15:38:31  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
15:38:31  43  ,hh  att32
15:38:31  44  ,d   att33
15:38:31  45  ,w   att34
15:38:31  46  ,mpm att35
15:38:31  47  ,mph att36
15:38:31  48  ,trend att37
15:38:31  49  FROM svm6142
15:38:31  50  ORDER BY ydate
15:38:31  51  /

Table created.

Elapsed: 00:00:04.94
15:38:36 SQL> 
15:38:36 SQL> -- rpt
15:38:36 SQL> 
15:38:36 SQL> SELECT
15:38:36   2  pair
15:38:36   3  ,trend
15:38:36   4  ,gatt
15:38:36   5  ,COUNT(pair)
15:38:36   6  ,AVG(g6)
15:38:36   7  FROM svm6162
15:38:36   8  GROUP BY pair,trend,gatt
15:38:36   9  ORDER BY pair,trend,gatt
15:38:36  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6728 -.00223201
ech_usd 	-1 up	      3581 .003574571
ech_usd 	-1		66
ech_usd 	 1 nup	      6461  -.0023695
ech_usd 	 1 up	      2907 .004121147
ech_usd 	 1		 6

6 rows selected.

Elapsed: 00:00:00.03
15:38:36 SQL> 
15:38:36 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.10
15:38:36 SQL> CREATE TABLE modsrc COMPRESS AS
15:38:36   2  SELECT
15:38:36   3  pair
15:38:36   4  ,ydate
15:38:36   5  ,prdate
15:38:36   6  ,trend
15:38:36   7  ,g6
15:38:36   8  ,gatt
15:38:36   9  ,gattn
15:38:36  10  FROM svm6162
15:38:36  11  /

Table created.

Elapsed: 00:00:00.09
15:38:36 SQL> 
15:38:36 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
15:38:36 SQL> 
15:38:36 SQL> DROP   TABLE ech_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
15:38:36 SQL> CREATE TABLE ech_ms610 COMPRESS AS
15:38:36   2  SELECT
15:38:36   3  ydate
15:38:36   4  ,trend ech_trend
15:38:36   5  ,g6    ech_g6
15:38:36   6  ,gatt  ech_gatt
15:38:36   7  ,gattn ech_gattn
15:38:36   8  FROM modsrc
15:38:36   9  /

Table created.

Elapsed: 00:00:00.06
15:38:36 SQL> 
15:38:36 SQL> ANALYZE TABLE ech_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
15:38:37 SQL> 
15:38:37 SQL> -- I need a copy of the attributes:
15:38:37 SQL> 
15:38:37 SQL> 
15:38:37 SQL> DROP   TABLE ech_att;

Table dropped.

Elapsed: 00:00:00.05
15:38:37 SQL> CREATE TABLE ech_att COMPRESS AS
15:38:37   2  SELECT
15:38:37   3  ydate
15:38:37   4  ,att00 ech_att00
15:38:37   5  ,att01 ech_att01
15:38:37   6  ,att02 ech_att02
15:38:37   7  ,att03 ech_att03
15:38:37   8  ,att04 ech_att04
15:38:37   9  ,att05 ech_att05
15:38:37  10  ,att06 ech_att06
15:38:37  11  ,att07 ech_att07
15:38:37  12  ,att08 ech_att08
15:38:37  13  ,att09 ech_att09
15:38:37  14  ,att10 ech_att10
15:38:37  15  ,att11 ech_att11
15:38:37  16  ,att12 ech_att12
15:38:37  17  ,att13 ech_att13
15:38:37  18  ,att14 ech_att14
15:38:37  19  ,att15 ech_att15
15:38:37  20  ,att16 ech_att16
15:38:37  21  ,att17 ech_att17
15:38:37  22  ,att18 ech_att18
15:38:37  23  ,att19 ech_att19
15:38:37  24  ,att20 ech_att20
15:38:37  25  ,att21 ech_att21
15:38:37  26  ,att22 ech_att22
15:38:37  27  ,att23 ech_att23
15:38:37  28  ,att24 ech_att24
15:38:37  29  ,att25 ech_att25
15:38:37  30  ,att26 ech_att26
15:38:37  31  ,att27 ech_att27
15:38:37  32  ,att28 ech_att28
15:38:37  33  ,att29 ech_att29
15:38:37  34  ,att30 ech_att30
15:38:37  35  ,att31 ech_att31
15:38:37  36  ,att32 ech_att32
15:38:37  37  ,att33 ech_att33
15:38:37  38  ,att34 ech_att34
15:38:37  39  ,att35 ech_att35
15:38:37  40  ,att36 ech_att36
15:38:37  41  ,att37 ech_att37
15:38:37  42  FROM svm6162
15:38:37  43  /

Table created.

Elapsed: 00:00:00.17
15:38:37 SQL> 
15:38:37 SQL> ANALYZE TABLE ech_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.48
15:38:37 SQL> 
15:38:37 SQL> -- rpt
15:38:37 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19749

Elapsed: 00:00:00.80
15:38:38 SQL> SELECT COUNT(*)FROM ech_att;

  COUNT(*)
----------
     19749

Elapsed: 00:00:00.00
15:38:38 SQL> 
15:38:38 SQL> --
15:38:38 SQL> -- egb610.sql
15:38:38 SQL> --
15:38:38 SQL> 
15:38:38 SQL> -- Creates views and tables for backtesting a forex SVM strategy
15:38:38 SQL> 
15:38:38 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.37
15:38:38 SQL> 
15:38:38 SQL> -- I created di5min here:
15:38:38 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
15:38:38 SQL> 
15:38:38 SQL> CREATE OR REPLACE VIEW svm6102 AS
15:38:38   2  SELECT
15:38:38   3  pair
15:38:38   4  ,ydate
15:38:38   5  ,prdate
15:38:38   6  ,rownum rnum -- acts as t in my time-series
15:38:38   7  ,clse
15:38:38   8  -- Derive a bunch of attributes from clse, the latest price:
15:38:38   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
15:38:38  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
15:38:38  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
15:38:38  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
15:38:38  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
15:38:38  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
15:38:38  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
15:38:38  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
15:38:38  17  --
15:38:38  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
15:38:38  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
15:38:38  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
15:38:38  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
15:38:38  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
15:38:38  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
15:38:38  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
15:38:38  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
15:38:38  26  --
15:38:38  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
15:38:38  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
15:38:38  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
15:38:38  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
15:38:38  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
15:38:38  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
15:38:38  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
15:38:38  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
15:38:38  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
15:38:38  36  FROM di5min WHERE pair LIKE'%egb%'
15:38:38  37  AND ydate > sysdate - 95
15:38:38  38  ORDER BY ydate
15:38:38  39  /

View created.

Elapsed: 00:00:00.05
15:38:38 SQL> 
15:38:38 SQL> -- rpt
15:38:38 SQL> 
15:38:38 SQL> SELECT
15:38:38   2  pair
15:38:38   3  ,COUNT(pair)
15:38:38   4  ,MIN(clse),MAX(clse)
15:38:38   5  ,MIN(avg6),MAX(avg6)
15:38:38   6  ,MIN(ydate),MAX(ydate)
15:38:38   7  FROM svm6102
15:38:38   8  GROUP BY pair
15:38:38   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
egb_usd       19748 .833520557 .893920122 .834199029 .892400287 2010-10-03 20:55:01 2011-01-06 15:30:00

Elapsed: 00:00:00.98
15:38:39 SQL> 
15:38:39 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
15:38:39 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.22
15:38:40 SQL> CREATE TABLE svm6122 COMPRESS AS
15:38:40   2  SELECT
15:38:40   3  pair
15:38:40   4  ,ydate
15:38:40   5  ,prdate
15:38:40   6  ,clse
15:38:40   7  -- g6 is important. I want to predict g6:
15:38:40   8  ,ld6 - clse g6
15:38:40   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
15:38:40  10  -- I want more attributes from the ones I derived above:
15:38:40  11  -- clse relation to moving-min
15:38:40  12  ,clse-min4  cm4
15:38:40  13  ,clse-min6  cm6
15:38:40  14  ,clse-min8  cm8
15:38:40  15  ,clse-min10 cm10
15:38:40  16  ,clse-min12 cm12
15:38:40  17  ,clse-min14 cm14
15:38:40  18  ,clse-min16 cm16
15:38:40  19  ,clse-min18 cm18
15:38:40  20  -- clse relation to moving-avg
15:38:40  21  ,clse-avg4  ca4
15:38:40  22  ,clse-avg6  ca6
15:38:40  23  ,clse-avg8  ca8
15:38:40  24  ,clse-avg10 ca10
15:38:40  25  ,clse-avg12 ca12
15:38:40  26  ,clse-avg14 ca14
15:38:40  27  ,clse-avg16 ca16
15:38:40  28  ,clse-avg18 ca18
15:38:40  29  -- clse relation to moving-max
15:38:40  30  ,clse-max4  cx4
15:38:40  31  ,clse-max6  cx6
15:38:40  32  ,clse-max8  cx8
15:38:40  33  ,clse-max10 cx10
15:38:40  34  ,clse-max12 cx12
15:38:40  35  ,clse-max14 cx14
15:38:40  36  ,clse-max16 cx16
15:38:40  37  ,clse-max18 cx18
15:38:40  38  -- Derive more attributes.
15:38:40  39  -- I want to use CORR() here to help SVM see the shape of the series.
15:38:40  40  -- But COVAR_POP is more stable:
15:38:40  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
15:38:40  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
15:38:40  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
15:38:40  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
15:38:40  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
15:38:40  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
15:38:40  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
15:38:40  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
15:38:40  49  -- Derive date related attributes:
15:38:40  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
15:38:40  51  ,0+TO_CHAR(ydate,'D')d
15:38:40  52  ,0+TO_CHAR(ydate,'W')w
15:38:40  53  -- mpm stands for minutes-past-midnight:
15:38:40  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
15:38:40  55  -- mph stands for minutes-past-hour:
15:38:40  56  ,0+TO_CHAR(ydate,'MI')mph
15:38:40  57  FROM svm6102
15:38:40  58  ORDER BY ydate
15:38:40  59  /

Table created.

Elapsed: 00:00:02.49
15:38:42 SQL> 
15:38:42 SQL> -- rpt
15:38:42 SQL> 
15:38:42 SQL> SELECT
15:38:42   2  pair
15:38:42   3  ,COUNT(pair)
15:38:42   4  ,MIN(clse),MAX(clse)
15:38:42   5  ,MIN(ydate),MAX(ydate)
15:38:42   6  FROM svm6122
15:38:42   7  GROUP BY pair
15:38:42   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
egb_usd       19748 .833520557 .893920122 2010-10-03 20:55:01 2011-01-06 15:30:00

Elapsed: 00:00:00.04
15:38:42 SQL> 
15:38:42 SQL> -- Prepare for derivation of NTILE based params:
15:38:42 SQL> 
15:38:42 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.30
15:38:42 SQL> CREATE TABLE svm6142 COMPRESS AS
15:38:42   2  SELECT
15:38:42   3  pair
15:38:42   4  ,ydate
15:38:42   5  ,prdate
15:38:42   6  ,clse
15:38:42   7  ,g6
15:38:42   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
15:38:42   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
15:38:42  10  ,CASE WHEN trend IS NULL THEN 1
15:38:42  11  	    WHEN trend =0      THEN 1
15:38:42  12  	    ELSE trend END trend
15:38:42  13  ,cm4
15:38:42  14  ,cm6
15:38:42  15  ,cm8
15:38:42  16  ,cm10
15:38:42  17  ,cm12
15:38:42  18  ,cm14
15:38:42  19  ,cm16
15:38:42  20  ,cm18
15:38:42  21  --
15:38:42  22  ,ca4
15:38:42  23  ,ca6
15:38:42  24  ,ca8
15:38:42  25  ,ca10
15:38:42  26  ,ca12
15:38:42  27  ,ca14
15:38:42  28  ,ca16
15:38:42  29  ,ca18
15:38:42  30  --
15:38:42  31  ,cx4
15:38:42  32  ,cx6
15:38:42  33  ,cx8
15:38:42  34  ,cx10
15:38:42  35  ,cx12
15:38:42  36  ,cx14
15:38:42  37  ,cx16
15:38:42  38  ,cx18
15:38:42  39  --
15:38:42  40  ,crr4
15:38:42  41  ,crr6
15:38:42  42  ,crr8
15:38:42  43  ,crr10
15:38:42  44  ,crr12
15:38:42  45  ,crr14
15:38:42  46  ,crr16
15:38:42  47  ,crr18
15:38:42  48  --
15:38:42  49  ,hh
15:38:42  50  ,d
15:38:42  51  ,w
15:38:42  52  ,mpm
15:38:42  53  ,mph
15:38:42  54  FROM svm6122
15:38:42  55  ORDER BY ydate
15:38:42  56  /

Table created.

Elapsed: 00:00:00.42
15:38:43 SQL> 
15:38:43 SQL> -- rpt
15:38:43 SQL> 
15:38:43 SQL> SELECT
15:38:43   2  pair
15:38:43   3  ,trend
15:38:43   4  ,gatt
15:38:43   5  ,COUNT(pair)
15:38:43   6  ,AVG(g6)
15:38:43   7  FROM svm6142
15:38:43   8  GROUP BY pair,trend,gatt
15:38:43   9  ORDER BY pair,trend,gatt
15:38:43  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7917 -.00104436
egb_usd 	-1 up	      2636 .002928295
egb_usd 	-1		58
egb_usd 	 1 nup	      6506 -.00137638
egb_usd 	 1 up	      2617   .0029282
egb_usd 	 1		14

6 rows selected.

Elapsed: 00:00:00.05
15:38:43 SQL> 
15:38:43 SQL> 
15:38:43 SQL> -- Derive NTILE based params:
15:38:43 SQL> 
15:38:43 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.16
15:38:43 SQL> CREATE TABLE svm6162 COMPRESS AS
15:38:43   2  SELECT
15:38:43   3  pair
15:38:43   4  ,ydate
15:38:43   5  ,prdate
15:38:43   6  ,clse
15:38:43   7  ,g6
15:38:43   8  ,gatt
15:38:43   9  ,gattn
15:38:43  10  ,trend
15:38:43  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
15:38:43  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
15:38:43  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
15:38:43  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
15:38:43  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
15:38:43  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
15:38:43  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
15:38:43  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
15:38:43  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
15:38:43  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
15:38:43  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
15:38:43  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
15:38:43  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
15:38:43  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
15:38:43  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
15:38:43  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
15:38:43  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
15:38:43  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
15:38:43  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
15:38:43  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
15:38:43  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
15:38:43  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
15:38:43  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
15:38:43  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
15:38:43  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
15:38:43  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
15:38:43  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
15:38:43  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
15:38:43  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
15:38:43  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
15:38:43  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
15:38:43  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
15:38:43  43  ,hh  att32
15:38:43  44  ,d   att33
15:38:43  45  ,w   att34
15:38:43  46  ,mpm att35
15:38:43  47  ,mph att36
15:38:43  48  ,trend att37
15:38:43  49  FROM svm6142
15:38:43  50  ORDER BY ydate
15:38:43  51  /

Table created.

Elapsed: 00:00:06.02
15:38:49 SQL> 
15:38:49 SQL> -- rpt
15:38:49 SQL> 
15:38:49 SQL> SELECT
15:38:49   2  pair
15:38:49   3  ,trend
15:38:49   4  ,gatt
15:38:49   5  ,COUNT(pair)
15:38:49   6  ,AVG(g6)
15:38:49   7  FROM svm6162
15:38:49   8  GROUP BY pair,trend,gatt
15:38:49   9  ORDER BY pair,trend,gatt
15:38:49  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7917 -.00104436
egb_usd 	-1 up	      2636 .002928295
egb_usd 	-1		58
egb_usd 	 1 nup	      6506 -.00137638
egb_usd 	 1 up	      2617   .0029282
egb_usd 	 1		14

6 rows selected.

Elapsed: 00:00:00.04
15:38:49 SQL> 
15:38:49 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.33
15:38:49 SQL> CREATE TABLE modsrc COMPRESS AS
15:38:49   2  SELECT
15:38:49   3  pair
15:38:49   4  ,ydate
15:38:49   5  ,prdate
15:38:49   6  ,trend
15:38:49   7  ,g6
15:38:49   8  ,gatt
15:38:49   9  ,gattn
15:38:49  10  FROM svm6162
15:38:49  11  /

Table created.

Elapsed: 00:00:00.10
15:38:50 SQL> 
15:38:50 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.29
15:38:50 SQL> 
15:38:50 SQL> DROP   TABLE egb_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
15:38:50 SQL> CREATE TABLE egb_ms610 COMPRESS AS
15:38:50   2  SELECT
15:38:50   3  ydate
15:38:50   4  ,trend egb_trend
15:38:50   5  ,g6    egb_g6
15:38:50   6  ,gatt  egb_gatt
15:38:50   7  ,gattn egb_gattn
15:38:50   8  FROM modsrc
15:38:50   9  /

Table created.

Elapsed: 00:00:00.06
15:38:50 SQL> 
15:38:50 SQL> ANALYZE TABLE egb_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
15:38:50 SQL> 
15:38:50 SQL> -- I need a copy of the attributes:
15:38:50 SQL> 
15:38:50 SQL> 
15:38:50 SQL> DROP   TABLE egb_att;

Table dropped.

Elapsed: 00:00:00.04
15:38:50 SQL> CREATE TABLE egb_att COMPRESS AS
15:38:50   2  SELECT
15:38:50   3  ydate
15:38:50   4  ,att00 egb_att00
15:38:50   5  ,att01 egb_att01
15:38:50   6  ,att02 egb_att02
15:38:50   7  ,att03 egb_att03
15:38:50   8  ,att04 egb_att04
15:38:50   9  ,att05 egb_att05
15:38:50  10  ,att06 egb_att06
15:38:50  11  ,att07 egb_att07
15:38:50  12  ,att08 egb_att08
15:38:50  13  ,att09 egb_att09
15:38:50  14  ,att10 egb_att10
15:38:50  15  ,att11 egb_att11
15:38:50  16  ,att12 egb_att12
15:38:50  17  ,att13 egb_att13
15:38:50  18  ,att14 egb_att14
15:38:50  19  ,att15 egb_att15
15:38:50  20  ,att16 egb_att16
15:38:50  21  ,att17 egb_att17
15:38:50  22  ,att18 egb_att18
15:38:50  23  ,att19 egb_att19
15:38:50  24  ,att20 egb_att20
15:38:50  25  ,att21 egb_att21
15:38:50  26  ,att22 egb_att22
15:38:50  27  ,att23 egb_att23
15:38:50  28  ,att24 egb_att24
15:38:50  29  ,att25 egb_att25
15:38:50  30  ,att26 egb_att26
15:38:50  31  ,att27 egb_att27
15:38:50  32  ,att28 egb_att28
15:38:50  33  ,att29 egb_att29
15:38:50  34  ,att30 egb_att30
15:38:50  35  ,att31 egb_att31
15:38:50  36  ,att32 egb_att32
15:38:50  37  ,att33 egb_att33
15:38:50  38  ,att34 egb_att34
15:38:50  39  ,att35 egb_att35
15:38:50  40  ,att36 egb_att36
15:38:50  41  ,att37 egb_att37
15:38:50  42  FROM svm6162
15:38:50  43  /

Table created.

Elapsed: 00:00:00.18
15:38:50 SQL> 
15:38:50 SQL> ANALYZE TABLE egb_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
15:38:51 SQL> 
15:38:51 SQL> -- rpt
15:38:51 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19748

Elapsed: 00:00:00.96
15:38:52 SQL> SELECT COUNT(*)FROM egb_att;

  COUNT(*)
----------
     19748

Elapsed: 00:00:00.00
15:38:52 SQL> 
15:38:52 SQL> --
15:38:52 SQL> -- ejp610.sql
15:38:52 SQL> --
15:38:52 SQL> 
15:38:52 SQL> -- Creates views and tables for backtesting a forex SVM strategy
15:38:52 SQL> 
15:38:52 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.56
15:38:52 SQL> 
15:38:52 SQL> -- I created di5min here:
15:38:52 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
15:38:52 SQL> 
15:38:52 SQL> CREATE OR REPLACE VIEW svm6102 AS
15:38:52   2  SELECT
15:38:52   3  pair
15:38:52   4  ,ydate
15:38:52   5  ,prdate
15:38:52   6  ,rownum rnum -- acts as t in my time-series
15:38:52   7  ,clse
15:38:52   8  -- Derive a bunch of attributes from clse, the latest price:
15:38:52   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
15:38:52  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
15:38:52  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
15:38:52  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
15:38:52  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
15:38:52  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
15:38:52  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
15:38:52  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
15:38:52  17  --
15:38:52  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
15:38:52  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
15:38:52  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
15:38:52  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
15:38:52  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
15:38:52  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
15:38:52  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
15:38:52  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
15:38:52  26  --
15:38:52  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
15:38:52  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
15:38:52  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
15:38:52  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
15:38:52  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
15:38:52  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
15:38:52  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
15:38:52  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
15:38:52  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
15:38:52  36  FROM di5min WHERE pair LIKE'%ejp%'
15:38:52  37  AND ydate > sysdate - 95
15:38:52  38  ORDER BY ydate
15:38:52  39  /

View created.

Elapsed: 00:00:00.05
15:38:52 SQL> 
15:38:52 SQL> -- rpt
15:38:52 SQL> 
15:38:52 SQL> SELECT
15:38:52   2  pair
15:38:52   3  ,COUNT(pair)
15:38:52   4  ,MIN(clse),MAX(clse)
15:38:52   5  ,MIN(avg6),MAX(avg6)
15:38:52   6  ,MIN(ydate),MAX(ydate)
15:38:52   7  FROM svm6102
15:38:52   8  GROUP BY pair
15:38:52   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ejp_usd       19746 107.643765	115.63485 107.776148 115.509678 2010-10-03 20:55:01 2011-01-06 15:30:00

Elapsed: 00:00:00.85
15:38:53 SQL> 
15:38:53 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
15:38:53 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.32
15:38:54 SQL> CREATE TABLE svm6122 COMPRESS AS
15:38:54   2  SELECT
15:38:54   3  pair
15:38:54   4  ,ydate
15:38:54   5  ,prdate
15:38:54   6  ,clse
15:38:54   7  -- g6 is important. I want to predict g6:
15:38:54   8  ,ld6 - clse g6
15:38:54   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
15:38:54  10  -- I want more attributes from the ones I derived above:
15:38:54  11  -- clse relation to moving-min
15:38:54  12  ,clse-min4  cm4
15:38:54  13  ,clse-min6  cm6
15:38:54  14  ,clse-min8  cm8
15:38:54  15  ,clse-min10 cm10
15:38:54  16  ,clse-min12 cm12
15:38:54  17  ,clse-min14 cm14
15:38:54  18  ,clse-min16 cm16
15:38:54  19  ,clse-min18 cm18
15:38:54  20  -- clse relation to moving-avg
15:38:54  21  ,clse-avg4  ca4
15:38:54  22  ,clse-avg6  ca6
15:38:54  23  ,clse-avg8  ca8
15:38:54  24  ,clse-avg10 ca10
15:38:54  25  ,clse-avg12 ca12
15:38:54  26  ,clse-avg14 ca14
15:38:54  27  ,clse-avg16 ca16
15:38:54  28  ,clse-avg18 ca18
15:38:54  29  -- clse relation to moving-max
15:38:54  30  ,clse-max4  cx4
15:38:54  31  ,clse-max6  cx6
15:38:54  32  ,clse-max8  cx8
15:38:54  33  ,clse-max10 cx10
15:38:54  34  ,clse-max12 cx12
15:38:54  35  ,clse-max14 cx14
15:38:54  36  ,clse-max16 cx16
15:38:54  37  ,clse-max18 cx18
15:38:54  38  -- Derive more attributes.
15:38:54  39  -- I want to use CORR() here to help SVM see the shape of the series.
15:38:54  40  -- But COVAR_POP is more stable:
15:38:54  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
15:38:54  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
15:38:54  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
15:38:54  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
15:38:54  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
15:38:54  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
15:38:54  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
15:38:54  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
15:38:54  49  -- Derive date related attributes:
15:38:54  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
15:38:54  51  ,0+TO_CHAR(ydate,'D')d
15:38:54  52  ,0+TO_CHAR(ydate,'W')w
15:38:54  53  -- mpm stands for minutes-past-midnight:
15:38:54  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
15:38:54  55  -- mph stands for minutes-past-hour:
15:38:54  56  ,0+TO_CHAR(ydate,'MI')mph
15:38:54  57  FROM svm6102
15:38:54  58  ORDER BY ydate
15:38:54  59  /

Table created.

Elapsed: 00:00:02.13
15:38:56 SQL> 
15:38:56 SQL> -- rpt
15:38:56 SQL> 
15:38:56 SQL> SELECT
15:38:56   2  pair
15:38:56   3  ,COUNT(pair)
15:38:56   4  ,MIN(clse),MAX(clse)
15:38:56   5  ,MIN(ydate),MAX(ydate)
15:38:56   6  FROM svm6122
15:38:56   7  GROUP BY pair
15:38:56   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ejp_usd       19746 107.643765	115.63485 2010-10-03 20:55:01 2011-01-06 15:30:00

Elapsed: 00:00:00.04
15:38:56 SQL> 
15:38:56 SQL> -- Prepare for derivation of NTILE based params:
15:38:56 SQL> 
15:38:56 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.25
15:38:56 SQL> CREATE TABLE svm6142 COMPRESS AS
15:38:56   2  SELECT
15:38:56   3  pair
15:38:56   4  ,ydate
15:38:56   5  ,prdate
15:38:56   6  ,clse
15:38:56   7  ,g6
15:38:56   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
15:38:56   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
15:38:56  10  ,CASE WHEN trend IS NULL THEN 1
15:38:56  11  	    WHEN trend =0      THEN 1
15:38:56  12  	    ELSE trend END trend
15:38:56  13  ,cm4
15:38:56  14  ,cm6
15:38:56  15  ,cm8
15:38:56  16  ,cm10
15:38:56  17  ,cm12
15:38:56  18  ,cm14
15:38:56  19  ,cm16
15:38:56  20  ,cm18
15:38:56  21  --
15:38:56  22  ,ca4
15:38:56  23  ,ca6
15:38:56  24  ,ca8
15:38:56  25  ,ca10
15:38:56  26  ,ca12
15:38:56  27  ,ca14
15:38:56  28  ,ca16
15:38:56  29  ,ca18
15:38:56  30  --
15:38:56  31  ,cx4
15:38:56  32  ,cx6
15:38:56  33  ,cx8
15:38:56  34  ,cx10
15:38:56  35  ,cx12
15:38:56  36  ,cx14
15:38:56  37  ,cx16
15:38:56  38  ,cx18
15:38:56  39  --
15:38:56  40  ,crr4
15:38:56  41  ,crr6
15:38:56  42  ,crr8
15:38:56  43  ,crr10
15:38:56  44  ,crr12
15:38:56  45  ,crr14
15:38:56  46  ,crr16
15:38:56  47  ,crr18
15:38:56  48  --
15:38:56  49  ,hh
15:38:56  50  ,d
15:38:56  51  ,w
15:38:56  52  ,mpm
15:38:56  53  ,mph
15:38:56  54  FROM svm6122
15:38:56  55  ORDER BY ydate
15:38:56  56  /

Table created.

Elapsed: 00:00:00.48
15:38:57 SQL> 
15:38:57 SQL> -- rpt
15:38:57 SQL> 
15:38:57 SQL> SELECT
15:38:57   2  pair
15:38:57   3  ,trend
15:38:57   4  ,gatt
15:38:57   5  ,COUNT(pair)
15:38:57   6  ,AVG(g6)
15:38:57   7  FROM svm6142
15:38:57   8  GROUP BY pair,trend,gatt
15:38:57   9  ORDER BY pair,trend,gatt
15:38:57  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      5099 -.32006277
ejp_usd 	-1 up	      4933 .277546023
ejp_usd 	-1		72
ejp_usd 	 1 nup	      5013 -.29959844
ejp_usd 	 1 up	      4629 .288536003

Elapsed: 00:00:00.04
15:38:57 SQL> 
15:38:57 SQL> 
15:38:57 SQL> -- Derive NTILE based params:
15:38:57 SQL> 
15:38:57 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.22
15:38:57 SQL> CREATE TABLE svm6162 COMPRESS AS
15:38:57   2  SELECT
15:38:57   3  pair
15:38:57   4  ,ydate
15:38:57   5  ,prdate
15:38:57   6  ,clse
15:38:57   7  ,g6
15:38:57   8  ,gatt
15:38:57   9  ,gattn
15:38:57  10  ,trend
15:38:57  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
15:38:57  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
15:38:57  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
15:38:57  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
15:38:57  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
15:38:57  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
15:38:57  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
15:38:57  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
15:38:57  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
15:38:57  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
15:38:57  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
15:38:57  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
15:38:57  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
15:38:57  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
15:38:57  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
15:38:57  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
15:38:57  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
15:38:57  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
15:38:57  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
15:38:57  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
15:38:57  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
15:38:57  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
15:38:57  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
15:38:57  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
15:38:57  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
15:38:57  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
15:38:57  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
15:38:57  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
15:38:57  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
15:38:57  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
15:38:57  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
15:38:57  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
15:38:57  43  ,hh  att32
15:38:57  44  ,d   att33
15:38:57  45  ,w   att34
15:38:57  46  ,mpm att35
15:38:57  47  ,mph att36
15:38:57  48  ,trend att37
15:38:57  49  FROM svm6142
15:38:57  50  ORDER BY ydate
15:38:57  51  /

Table created.

Elapsed: 00:00:04.88
15:39:02 SQL> 
15:39:02 SQL> -- rpt
15:39:02 SQL> 
15:39:02 SQL> SELECT
15:39:02   2  pair
15:39:02   3  ,trend
15:39:02   4  ,gatt
15:39:02   5  ,COUNT(pair)
15:39:02   6  ,AVG(g6)
15:39:02   7  FROM svm6162
15:39:02   8  GROUP BY pair,trend,gatt
15:39:02   9  ORDER BY pair,trend,gatt
15:39:02  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      5099 -.32006277
ejp_usd 	-1 up	      4933 .277546023
ejp_usd 	-1		72
ejp_usd 	 1 nup	      5013 -.29959844
ejp_usd 	 1 up	      4629 .288536003

Elapsed: 00:00:00.03
15:39:02 SQL> 
15:39:02 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.19
15:39:02 SQL> CREATE TABLE modsrc COMPRESS AS
15:39:02   2  SELECT
15:39:02   3  pair
15:39:02   4  ,ydate
15:39:02   5  ,prdate
15:39:02   6  ,trend
15:39:02   7  ,g6
15:39:02   8  ,gatt
15:39:02   9  ,gattn
15:39:02  10  FROM svm6162
15:39:02  11  /

Table created.

Elapsed: 00:00:00.10
15:39:02 SQL> 
15:39:02 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
15:39:02 SQL> 
15:39:02 SQL> DROP   TABLE ejp_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
15:39:02 SQL> CREATE TABLE ejp_ms610 COMPRESS AS
15:39:02   2  SELECT
15:39:02   3  ydate
15:39:02   4  ,trend ejp_trend
15:39:02   5  ,g6    ejp_g6
15:39:02   6  ,gatt  ejp_gatt
15:39:02   7  ,gattn ejp_gattn
15:39:02   8  FROM modsrc
15:39:02   9  /

Table created.

Elapsed: 00:00:00.07
15:39:02 SQL> 
15:39:02 SQL> ANALYZE TABLE ejp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.22
15:39:03 SQL> 
15:39:03 SQL> -- I need a copy of the attributes:
15:39:03 SQL> 
15:39:03 SQL> 
15:39:03 SQL> DROP   TABLE ejp_att;

Table dropped.

Elapsed: 00:00:00.04
15:39:03 SQL> CREATE TABLE ejp_att COMPRESS AS
15:39:03   2  SELECT
15:39:03   3  ydate
15:39:03   4  ,att00 ejp_att00
15:39:03   5  ,att01 ejp_att01
15:39:03   6  ,att02 ejp_att02
15:39:03   7  ,att03 ejp_att03
15:39:03   8  ,att04 ejp_att04
15:39:03   9  ,att05 ejp_att05
15:39:03  10  ,att06 ejp_att06
15:39:03  11  ,att07 ejp_att07
15:39:03  12  ,att08 ejp_att08
15:39:03  13  ,att09 ejp_att09
15:39:03  14  ,att10 ejp_att10
15:39:03  15  ,att11 ejp_att11
15:39:03  16  ,att12 ejp_att12
15:39:03  17  ,att13 ejp_att13
15:39:03  18  ,att14 ejp_att14
15:39:03  19  ,att15 ejp_att15
15:39:03  20  ,att16 ejp_att16
15:39:03  21  ,att17 ejp_att17
15:39:03  22  ,att18 ejp_att18
15:39:03  23  ,att19 ejp_att19
15:39:03  24  ,att20 ejp_att20
15:39:03  25  ,att21 ejp_att21
15:39:03  26  ,att22 ejp_att22
15:39:03  27  ,att23 ejp_att23
15:39:03  28  ,att24 ejp_att24
15:39:03  29  ,att25 ejp_att25
15:39:03  30  ,att26 ejp_att26
15:39:03  31  ,att27 ejp_att27
15:39:03  32  ,att28 ejp_att28
15:39:03  33  ,att29 ejp_att29
15:39:03  34  ,att30 ejp_att30
15:39:03  35  ,att31 ejp_att31
15:39:03  36  ,att32 ejp_att32
15:39:03  37  ,att33 ejp_att33
15:39:03  38  ,att34 ejp_att34
15:39:03  39  ,att35 ejp_att35
15:39:03  40  ,att36 ejp_att36
15:39:03  41  ,att37 ejp_att37
15:39:03  42  FROM svm6162
15:39:03  43  /

Table created.

Elapsed: 00:00:00.17
15:39:03 SQL> 
15:39:03 SQL> ANALYZE TABLE ejp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.44
15:39:03 SQL> 
15:39:03 SQL> -- rpt
15:39:03 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19746

Elapsed: 00:00:00.86
15:39:04 SQL> SELECT COUNT(*)FROM ejp_att;

  COUNT(*)
----------
     19746

Elapsed: 00:00:00.01
15:39:04 SQL> 
15:39:04 SQL> --
15:39:04 SQL> -- ajp610.sql
15:39:04 SQL> --
15:39:04 SQL> 
15:39:04 SQL> -- Creates views and tables for backtesting a forex SVM strategy
15:39:04 SQL> 
15:39:04 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.76
15:39:05 SQL> 
15:39:05 SQL> -- I created di5min here:
15:39:05 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
15:39:05 SQL> 
15:39:05 SQL> CREATE OR REPLACE VIEW svm6102 AS
15:39:05   2  SELECT
15:39:05   3  pair
15:39:05   4  ,ydate
15:39:05   5  ,prdate
15:39:05   6  ,rownum rnum -- acts as t in my time-series
15:39:05   7  ,clse
15:39:05   8  -- Derive a bunch of attributes from clse, the latest price:
15:39:05   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
15:39:05  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
15:39:05  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
15:39:05  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
15:39:05  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
15:39:05  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
15:39:05  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
15:39:05  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
15:39:05  17  --
15:39:05  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
15:39:05  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
15:39:05  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
15:39:05  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
15:39:05  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
15:39:05  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
15:39:05  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
15:39:05  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
15:39:05  26  --
15:39:05  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
15:39:05  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
15:39:05  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
15:39:05  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
15:39:05  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
15:39:05  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
15:39:05  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
15:39:05  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
15:39:05  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
15:39:05  36  FROM di5min WHERE pair LIKE'%ajp%'
15:39:05  37  AND ydate > sysdate - 95
15:39:05  38  ORDER BY ydate
15:39:05  39  /

View created.

Elapsed: 00:00:00.05
15:39:05 SQL> 
15:39:05 SQL> -- rpt
15:39:05 SQL> 
15:39:05 SQL> SELECT
15:39:05   2  pair
15:39:05   3  ,COUNT(pair)
15:39:05   4  ,MIN(clse),MAX(clse)
15:39:05   5  ,MIN(avg6),MAX(avg6)
15:39:05   6  ,MIN(ydate),MAX(ydate)
15:39:05   7  FROM svm6102
15:39:05   8  GROUP BY pair
15:39:05   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ajp_usd       19743  78.249976 83.6669853 78.5106193  83.546306 2010-10-03 20:55:01 2011-01-06 15:30:00

Elapsed: 00:00:00.80
15:39:06 SQL> 
15:39:06 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
15:39:06 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.30
15:39:06 SQL> CREATE TABLE svm6122 COMPRESS AS
15:39:06   2  SELECT
15:39:06   3  pair
15:39:06   4  ,ydate
15:39:06   5  ,prdate
15:39:06   6  ,clse
15:39:06   7  -- g6 is important. I want to predict g6:
15:39:06   8  ,ld6 - clse g6
15:39:06   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
15:39:06  10  -- I want more attributes from the ones I derived above:
15:39:06  11  -- clse relation to moving-min
15:39:06  12  ,clse-min4  cm4
15:39:06  13  ,clse-min6  cm6
15:39:06  14  ,clse-min8  cm8
15:39:06  15  ,clse-min10 cm10
15:39:06  16  ,clse-min12 cm12
15:39:06  17  ,clse-min14 cm14
15:39:06  18  ,clse-min16 cm16
15:39:06  19  ,clse-min18 cm18
15:39:06  20  -- clse relation to moving-avg
15:39:06  21  ,clse-avg4  ca4
15:39:06  22  ,clse-avg6  ca6
15:39:06  23  ,clse-avg8  ca8
15:39:06  24  ,clse-avg10 ca10
15:39:06  25  ,clse-avg12 ca12
15:39:06  26  ,clse-avg14 ca14
15:39:06  27  ,clse-avg16 ca16
15:39:06  28  ,clse-avg18 ca18
15:39:06  29  -- clse relation to moving-max
15:39:06  30  ,clse-max4  cx4
15:39:06  31  ,clse-max6  cx6
15:39:06  32  ,clse-max8  cx8
15:39:06  33  ,clse-max10 cx10
15:39:06  34  ,clse-max12 cx12
15:39:06  35  ,clse-max14 cx14
15:39:06  36  ,clse-max16 cx16
15:39:06  37  ,clse-max18 cx18
15:39:06  38  -- Derive more attributes.
15:39:06  39  -- I want to use CORR() here to help SVM see the shape of the series.
15:39:06  40  -- But COVAR_POP is more stable:
15:39:06  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
15:39:06  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
15:39:06  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
15:39:06  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
15:39:06  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
15:39:06  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
15:39:06  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
15:39:06  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
15:39:06  49  -- Derive date related attributes:
15:39:06  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
15:39:06  51  ,0+TO_CHAR(ydate,'D')d
15:39:06  52  ,0+TO_CHAR(ydate,'W')w
15:39:06  53  -- mpm stands for minutes-past-midnight:
15:39:06  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
15:39:06  55  -- mph stands for minutes-past-hour:
15:39:06  56  ,0+TO_CHAR(ydate,'MI')mph
15:39:06  57  FROM svm6102
15:39:06  58  ORDER BY ydate
15:39:06  59  /

Table created.

Elapsed: 00:00:02.06
15:39:08 SQL> 
15:39:08 SQL> -- rpt
15:39:08 SQL> 
15:39:08 SQL> SELECT
15:39:08   2  pair
15:39:08   3  ,COUNT(pair)
15:39:08   4  ,MIN(clse),MAX(clse)
15:39:08   5  ,MIN(ydate),MAX(ydate)
15:39:08   6  FROM svm6122
15:39:08   7  GROUP BY pair
15:39:08   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ajp_usd       19743  78.249976 83.6669853 2010-10-03 20:55:01 2011-01-06 15:30:00

Elapsed: 00:00:00.04
15:39:08 SQL> 
15:39:08 SQL> -- Prepare for derivation of NTILE based params:
15:39:08 SQL> 
15:39:08 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.24
15:39:08 SQL> CREATE TABLE svm6142 COMPRESS AS
15:39:08   2  SELECT
15:39:08   3  pair
15:39:08   4  ,ydate
15:39:08   5  ,prdate
15:39:08   6  ,clse
15:39:08   7  ,g6
15:39:08   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
15:39:08   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
15:39:08  10  ,CASE WHEN trend IS NULL THEN 1
15:39:08  11  	    WHEN trend =0      THEN 1
15:39:08  12  	    ELSE trend END trend
15:39:08  13  ,cm4
15:39:08  14  ,cm6
15:39:08  15  ,cm8
15:39:08  16  ,cm10
15:39:08  17  ,cm12
15:39:08  18  ,cm14
15:39:08  19  ,cm16
15:39:08  20  ,cm18
15:39:08  21  --
15:39:08  22  ,ca4
15:39:08  23  ,ca6
15:39:08  24  ,ca8
15:39:08  25  ,ca10
15:39:08  26  ,ca12
15:39:08  27  ,ca14
15:39:08  28  ,ca16
15:39:08  29  ,ca18
15:39:08  30  --
15:39:08  31  ,cx4
15:39:08  32  ,cx6
15:39:08  33  ,cx8
15:39:08  34  ,cx10
15:39:08  35  ,cx12
15:39:08  36  ,cx14
15:39:08  37  ,cx16
15:39:08  38  ,cx18
15:39:08  39  --
15:39:08  40  ,crr4
15:39:08  41  ,crr6
15:39:08  42  ,crr8
15:39:08  43  ,crr10
15:39:08  44  ,crr12
15:39:08  45  ,crr14
15:39:08  46  ,crr16
15:39:08  47  ,crr18
15:39:08  48  --
15:39:08  49  ,hh
15:39:08  50  ,d
15:39:08  51  ,w
15:39:08  52  ,mpm
15:39:08  53  ,mph
15:39:08  54  FROM svm6122
15:39:08  55  ORDER BY ydate
15:39:08  56  /

Table created.

Elapsed: 00:00:00.42
15:39:09 SQL> 
15:39:09 SQL> -- rpt
15:39:09 SQL> 
15:39:09 SQL> SELECT
15:39:09   2  pair
15:39:09   3  ,trend
15:39:09   4  ,gatt
15:39:09   5  ,COUNT(pair)
15:39:09   6  ,AVG(g6)
15:39:09   7  FROM svm6142
15:39:09   8  GROUP BY pair,trend,gatt
15:39:09   9  ORDER BY pair,trend,gatt
15:39:09  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ajp_usd 	-1 nup	      4351 -.22422601
ajp_usd 	-1 up	      5199  .22443694
ajp_usd 	-1		64
ajp_usd 	 1 nup	      5302 -.20350468
ajp_usd 	 1 up	      4819 .212479679
ajp_usd 	 1		 8

6 rows selected.

Elapsed: 00:00:00.03
15:39:09 SQL> 
15:39:09 SQL> 
15:39:09 SQL> -- Derive NTILE based params:
15:39:09 SQL> 
15:39:09 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.22
15:39:09 SQL> CREATE TABLE svm6162 COMPRESS AS
15:39:09   2  SELECT
15:39:09   3  pair
15:39:09   4  ,ydate
15:39:09   5  ,prdate
15:39:09   6  ,clse
15:39:09   7  ,g6
15:39:09   8  ,gatt
15:39:09   9  ,gattn
15:39:09  10  ,trend
15:39:09  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
15:39:09  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
15:39:09  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
15:39:09  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
15:39:09  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
15:39:09  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
15:39:09  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
15:39:09  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
15:39:09  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
15:39:09  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
15:39:09  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
15:39:09  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
15:39:09  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
15:39:09  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
15:39:09  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
15:39:09  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
15:39:09  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
15:39:09  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
15:39:09  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
15:39:09  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
15:39:09  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
15:39:09  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
15:39:09  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
15:39:09  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
15:39:09  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
15:39:09  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
15:39:09  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
15:39:09  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
15:39:09  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
15:39:09  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
15:39:09  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
15:39:09  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
15:39:09  43  ,hh  att32
15:39:09  44  ,d   att33
15:39:09  45  ,w   att34
15:39:09  46  ,mpm att35
15:39:09  47  ,mph att36
15:39:09  48  ,trend att37
15:39:09  49  FROM svm6142
15:39:09  50  ORDER BY ydate
15:39:09  51  /

Table created.

Elapsed: 00:00:04.91
15:39:14 SQL> 
15:39:14 SQL> -- rpt
15:39:14 SQL> 
15:39:14 SQL> SELECT
15:39:14   2  pair
15:39:14   3  ,trend
15:39:14   4  ,gatt
15:39:14   5  ,COUNT(pair)
15:39:14   6  ,AVG(g6)
15:39:14   7  FROM svm6162
15:39:14   8  GROUP BY pair,trend,gatt
15:39:14   9  ORDER BY pair,trend,gatt
15:39:14  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ajp_usd 	-1 nup	      4351 -.22422601
ajp_usd 	-1 up	      5199  .22443694
ajp_usd 	-1		64
ajp_usd 	 1 nup	      5302 -.20350468
ajp_usd 	 1 up	      4819 .212479679
ajp_usd 	 1		 8

6 rows selected.

Elapsed: 00:00:00.03
15:39:14 SQL> 
15:39:14 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.16
15:39:14 SQL> CREATE TABLE modsrc COMPRESS AS
15:39:14   2  SELECT
15:39:14   3  pair
15:39:14   4  ,ydate
15:39:14   5  ,prdate
15:39:14   6  ,trend
15:39:14   7  ,g6
15:39:14   8  ,gatt
15:39:14   9  ,gattn
15:39:14  10  FROM svm6162
15:39:14  11  /

Table created.

Elapsed: 00:00:00.09
15:39:14 SQL> 
15:39:14 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.23
15:39:14 SQL> 
15:39:14 SQL> DROP   TABLE ajp_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
15:39:14 SQL> CREATE TABLE ajp_ms610 COMPRESS AS
15:39:14   2  SELECT
15:39:14   3  ydate
15:39:14   4  ,trend ajp_trend
15:39:14   5  ,g6    ajp_g6
15:39:14   6  ,gatt  ajp_gatt
15:39:14   7  ,gattn ajp_gattn
15:39:14   8  FROM modsrc
15:39:14   9  /

Table created.

Elapsed: 00:00:00.07
15:39:15 SQL> 
15:39:15 SQL> ANALYZE TABLE ajp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.27
15:39:15 SQL> 
15:39:15 SQL> -- I need a copy of the attributes:
15:39:15 SQL> 
15:39:15 SQL> 
15:39:15 SQL> DROP   TABLE ajp_att;

Table dropped.

Elapsed: 00:00:00.06
15:39:15 SQL> CREATE TABLE ajp_att COMPRESS AS
15:39:15   2  SELECT
15:39:15   3  ydate
15:39:15   4  ,att00 ajp_att00
15:39:15   5  ,att01 ajp_att01
15:39:15   6  ,att02 ajp_att02
15:39:15   7  ,att03 ajp_att03
15:39:15   8  ,att04 ajp_att04
15:39:15   9  ,att05 ajp_att05
15:39:15  10  ,att06 ajp_att06
15:39:15  11  ,att07 ajp_att07
15:39:15  12  ,att08 ajp_att08
15:39:15  13  ,att09 ajp_att09
15:39:15  14  ,att10 ajp_att10
15:39:15  15  ,att11 ajp_att11
15:39:15  16  ,att12 ajp_att12
15:39:15  17  ,att13 ajp_att13
15:39:15  18  ,att14 ajp_att14
15:39:15  19  ,att15 ajp_att15
15:39:15  20  ,att16 ajp_att16
15:39:15  21  ,att17 ajp_att17
15:39:15  22  ,att18 ajp_att18
15:39:15  23  ,att19 ajp_att19
15:39:15  24  ,att20 ajp_att20
15:39:15  25  ,att21 ajp_att21
15:39:15  26  ,att22 ajp_att22
15:39:15  27  ,att23 ajp_att23
15:39:15  28  ,att24 ajp_att24
15:39:15  29  ,att25 ajp_att25
15:39:15  30  ,att26 ajp_att26
15:39:15  31  ,att27 ajp_att27
15:39:15  32  ,att28 ajp_att28
15:39:15  33  ,att29 ajp_att29
15:39:15  34  ,att30 ajp_att30
15:39:15  35  ,att31 ajp_att31
15:39:15  36  ,att32 ajp_att32
15:39:15  37  ,att33 ajp_att33
15:39:15  38  ,att34 ajp_att34
15:39:15  39  ,att35 ajp_att35
15:39:15  40  ,att36 ajp_att36
15:39:15  41  ,att37 ajp_att37
15:39:15  42  FROM svm6162
15:39:15  43  /

Table created.

Elapsed: 00:00:00.17
15:39:15 SQL> 
15:39:15 SQL> ANALYZE TABLE ajp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.49
15:39:16 SQL> 
15:39:16 SQL> -- rpt
15:39:16 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19743

Elapsed: 00:00:00.79
15:39:16 SQL> SELECT COUNT(*)FROM ajp_att;

  COUNT(*)
----------
     19743

Elapsed: 00:00:00.00
15:39:16 SQL> 
15:39:16 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
