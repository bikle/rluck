
SQL*Plus: Release 11.2.0.1.0 Production on Wed Jan 5 22:36:19 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

22:36:19 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
22:36:19 SQL> 22:36:19 SQL> --
22:36:19 SQL> -- eur610.sql
22:36:19 SQL> --
22:36:19 SQL> 
22:36:19 SQL> -- Creates views and tables for backtesting a forex SVM strategy
22:36:19 SQL> 
22:36:19 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.01
22:36:19 SQL> 
22:36:19 SQL> -- I created di5min here:
22:36:19 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
22:36:19 SQL> 
22:36:19 SQL> CREATE OR REPLACE VIEW svm6102 AS
22:36:19   2  SELECT
22:36:19   3  pair
22:36:19   4  ,ydate
22:36:19   5  ,prdate
22:36:19   6  ,rownum rnum -- acts as t in my time-series
22:36:19   7  ,clse
22:36:19   8  -- Derive a bunch of attributes from clse, the latest price:
22:36:19   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
22:36:19  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
22:36:19  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
22:36:19  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
22:36:19  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
22:36:19  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
22:36:19  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
22:36:19  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
22:36:19  17  --
22:36:19  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
22:36:19  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
22:36:19  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
22:36:19  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
22:36:19  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
22:36:19  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
22:36:19  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
22:36:19  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
22:36:19  26  --
22:36:19  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
22:36:19  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
22:36:19  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
22:36:19  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
22:36:19  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
22:36:19  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
22:36:19  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
22:36:19  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
22:36:19  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
22:36:19  36  FROM di5min WHERE pair LIKE'%eur%'
22:36:19  37  AND ydate > sysdate - 95
22:36:19  38  ORDER BY ydate
22:36:19  39  /

View created.

Elapsed: 00:00:00.07
22:36:19 SQL> 
22:36:19 SQL> -- rpt
22:36:19 SQL> 
22:36:19 SQL> SELECT
22:36:19   2  pair
22:36:19   3  ,COUNT(pair)
22:36:19   4  ,MIN(clse),MAX(clse)
22:36:19   5  ,MIN(avg6),MAX(avg6)
22:36:19   6  ,MIN(ydate),MAX(ydate)
22:36:19   7  FROM svm6102
22:36:19   8  GROUP BY pair
22:36:19   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_usd       19546    1.29735	   1.4273 1.29875103 1.42436233 2010-10-03 20:55:01 2011-01-05 22:30:00

Elapsed: 00:00:00.94
22:36:20 SQL> 
22:36:20 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
22:36:20 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.19
22:36:21 SQL> CREATE TABLE svm6122 COMPRESS AS
22:36:21   2  SELECT
22:36:21   3  pair
22:36:21   4  ,ydate
22:36:21   5  ,prdate
22:36:21   6  ,clse
22:36:21   7  -- g6 is important. I want to predict g6:
22:36:21   8  ,ld6 - clse g6
22:36:21   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
22:36:21  10  -- I want more attributes from the ones I derived above:
22:36:21  11  -- clse relation to moving-min
22:36:21  12  ,clse-min4  cm4
22:36:21  13  ,clse-min6  cm6
22:36:21  14  ,clse-min8  cm8
22:36:21  15  ,clse-min10 cm10
22:36:21  16  ,clse-min12 cm12
22:36:21  17  ,clse-min14 cm14
22:36:21  18  ,clse-min16 cm16
22:36:21  19  ,clse-min18 cm18
22:36:21  20  -- clse relation to moving-avg
22:36:21  21  ,clse-avg4  ca4
22:36:21  22  ,clse-avg6  ca6
22:36:21  23  ,clse-avg8  ca8
22:36:21  24  ,clse-avg10 ca10
22:36:21  25  ,clse-avg12 ca12
22:36:21  26  ,clse-avg14 ca14
22:36:21  27  ,clse-avg16 ca16
22:36:21  28  ,clse-avg18 ca18
22:36:21  29  -- clse relation to moving-max
22:36:21  30  ,clse-max4  cx4
22:36:21  31  ,clse-max6  cx6
22:36:21  32  ,clse-max8  cx8
22:36:21  33  ,clse-max10 cx10
22:36:21  34  ,clse-max12 cx12
22:36:21  35  ,clse-max14 cx14
22:36:21  36  ,clse-max16 cx16
22:36:21  37  ,clse-max18 cx18
22:36:21  38  -- Derive more attributes.
22:36:21  39  -- I want to use CORR() here to help SVM see the shape of the series.
22:36:21  40  -- But COVAR_POP is more stable:
22:36:21  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
22:36:21  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
22:36:21  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
22:36:21  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
22:36:21  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
22:36:21  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
22:36:21  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
22:36:21  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
22:36:21  49  -- Derive date related attributes:
22:36:21  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:36:21  51  ,0+TO_CHAR(ydate,'D')d
22:36:21  52  ,0+TO_CHAR(ydate,'W')w
22:36:21  53  -- mpm stands for minutes-past-midnight:
22:36:21  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:36:21  55  -- mph stands for minutes-past-hour:
22:36:21  56  ,0+TO_CHAR(ydate,'MI')mph
22:36:21  57  FROM svm6102
22:36:21  58  ORDER BY ydate
22:36:21  59  /

Table created.

Elapsed: 00:00:02.51
22:36:23 SQL> 
22:36:23 SQL> -- rpt
22:36:23 SQL> 
22:36:23 SQL> SELECT
22:36:23   2  pair
22:36:23   3  ,COUNT(pair)
22:36:23   4  ,MIN(clse),MAX(clse)
22:36:23   5  ,MIN(ydate),MAX(ydate)
22:36:23   6  FROM svm6122
22:36:23   7  GROUP BY pair
22:36:23   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_usd       19546    1.29735	   1.4273 2010-10-03 20:55:01 2011-01-05 22:30:00

Elapsed: 00:00:00.04
22:36:23 SQL> 
22:36:23 SQL> -- Prepare for derivation of NTILE based params:
22:36:23 SQL> 
22:36:23 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.39
22:36:24 SQL> CREATE TABLE svm6142 COMPRESS AS
22:36:24   2  SELECT
22:36:24   3  pair
22:36:24   4  ,ydate
22:36:24   5  ,prdate
22:36:24   6  ,clse
22:36:24   7  ,g6
22:36:24   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
22:36:24   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
22:36:24  10  ,CASE WHEN trend IS NULL THEN 1
22:36:24  11  	    WHEN trend =0      THEN 1
22:36:24  12  	    ELSE trend END trend
22:36:24  13  ,cm4
22:36:24  14  ,cm6
22:36:24  15  ,cm8
22:36:24  16  ,cm10
22:36:24  17  ,cm12
22:36:24  18  ,cm14
22:36:24  19  ,cm16
22:36:24  20  ,cm18
22:36:24  21  --
22:36:24  22  ,ca4
22:36:24  23  ,ca6
22:36:24  24  ,ca8
22:36:24  25  ,ca10
22:36:24  26  ,ca12
22:36:24  27  ,ca14
22:36:24  28  ,ca16
22:36:24  29  ,ca18
22:36:24  30  --
22:36:24  31  ,cx4
22:36:24  32  ,cx6
22:36:24  33  ,cx8
22:36:24  34  ,cx10
22:36:24  35  ,cx12
22:36:24  36  ,cx14
22:36:24  37  ,cx16
22:36:24  38  ,cx18
22:36:24  39  --
22:36:24  40  ,crr4
22:36:24  41  ,crr6
22:36:24  42  ,crr8
22:36:24  43  ,crr10
22:36:24  44  ,crr12
22:36:24  45  ,crr14
22:36:24  46  ,crr16
22:36:24  47  ,crr18
22:36:24  48  --
22:36:24  49  ,hh
22:36:24  50  ,d
22:36:24  51  ,w
22:36:24  52  ,mpm
22:36:24  53  ,mph
22:36:24  54  FROM svm6122
22:36:24  55  ORDER BY ydate
22:36:24  56  /

Table created.

Elapsed: 00:00:00.42
22:36:24 SQL> 
22:36:24 SQL> -- rpt
22:36:24 SQL> 
22:36:24 SQL> SELECT
22:36:24   2  pair
22:36:24   3  ,trend
22:36:24   4  ,gatt
22:36:24   5  ,COUNT(pair)
22:36:24   6  ,AVG(g6)
22:36:24   7  FROM svm6142
22:36:24   8  GROUP BY pair,trend,gatt
22:36:24   9  ORDER BY pair,trend,gatt
22:36:24  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6361 -.00315342
eur_usd 	-1 up	      3568 .004448882
eur_usd 	-1		53
eur_usd 	 1 nup	      5840 -.00325501
eur_usd 	 1 up	      3705 .005071238
eur_usd 	 1		19

6 rows selected.

Elapsed: 00:00:00.04
22:36:24 SQL> 
22:36:24 SQL> 
22:36:24 SQL> -- Derive NTILE based params:
22:36:24 SQL> 
22:36:24 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.57
22:36:25 SQL> CREATE TABLE svm6162 COMPRESS AS
22:36:25   2  SELECT
22:36:25   3  pair
22:36:25   4  ,ydate
22:36:25   5  ,prdate
22:36:25   6  ,clse
22:36:25   7  ,g6
22:36:25   8  ,gatt
22:36:25   9  ,gattn
22:36:25  10  ,trend
22:36:25  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
22:36:25  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
22:36:25  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
22:36:25  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
22:36:25  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
22:36:25  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
22:36:25  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
22:36:25  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
22:36:25  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
22:36:25  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
22:36:25  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
22:36:25  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
22:36:25  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
22:36:25  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
22:36:25  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
22:36:25  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
22:36:25  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
22:36:25  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
22:36:25  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
22:36:25  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
22:36:25  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
22:36:25  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
22:36:25  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
22:36:25  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
22:36:25  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
22:36:25  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
22:36:25  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
22:36:25  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
22:36:25  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
22:36:25  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
22:36:25  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
22:36:25  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
22:36:25  43  ,hh  att32
22:36:25  44  ,d   att33
22:36:25  45  ,w   att34
22:36:25  46  ,mpm att35
22:36:25  47  ,mph att36
22:36:25  48  ,trend att37
22:36:25  49  FROM svm6142
22:36:25  50  ORDER BY ydate
22:36:25  51  /

Table created.

Elapsed: 00:00:04.93
22:36:29 SQL> 
22:36:29 SQL> -- rpt
22:36:29 SQL> 
22:36:29 SQL> SELECT
22:36:29   2  pair
22:36:29   3  ,trend
22:36:29   4  ,gatt
22:36:29   5  ,COUNT(pair)
22:36:29   6  ,AVG(g6)
22:36:29   7  FROM svm6162
22:36:29   8  GROUP BY pair,trend,gatt
22:36:29   9  ORDER BY pair,trend,gatt
22:36:29  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6361 -.00315342
eur_usd 	-1 up	      3568 .004448882
eur_usd 	-1		53
eur_usd 	 1 nup	      5840 -.00325501
eur_usd 	 1 up	      3705 .005071238
eur_usd 	 1		19

6 rows selected.

Elapsed: 00:00:00.02
22:36:30 SQL> 
22:36:30 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.19
22:36:30 SQL> CREATE TABLE modsrc COMPRESS AS
22:36:30   2  SELECT
22:36:30   3  pair
22:36:30   4  ,ydate
22:36:30   5  ,prdate
22:36:30   6  ,trend
22:36:30   7  ,g6
22:36:30   8  ,gatt
22:36:30   9  ,gattn
22:36:30  10  FROM svm6162
22:36:30  11  /

Table created.

Elapsed: 00:00:00.08
22:36:30 SQL> 
22:36:30 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.26
22:36:30 SQL> 
22:36:30 SQL> DROP   TABLE eur_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
22:36:30 SQL> CREATE TABLE eur_ms610 COMPRESS AS
22:36:30   2  SELECT
22:36:30   3  ydate
22:36:30   4  ,trend eur_trend
22:36:30   5  ,g6    eur_g6
22:36:30   6  ,gatt  eur_gatt
22:36:30   7  ,gattn eur_gattn
22:36:30   8  FROM modsrc
22:36:30   9  /

Table created.

Elapsed: 00:00:00.06
22:36:30 SQL> 
22:36:30 SQL> ANALYZE TABLE eur_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
22:36:30 SQL> 
22:36:30 SQL> -- I need a copy of the attributes:
22:36:30 SQL> 
22:36:30 SQL> 
22:36:30 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.04
22:36:30 SQL> CREATE TABLE eur_att COMPRESS AS
22:36:30   2  SELECT
22:36:30   3  ydate
22:36:30   4  ,att00 eur_att00
22:36:30   5  ,att01 eur_att01
22:36:30   6  ,att02 eur_att02
22:36:30   7  ,att03 eur_att03
22:36:30   8  ,att04 eur_att04
22:36:30   9  ,att05 eur_att05
22:36:30  10  ,att06 eur_att06
22:36:30  11  ,att07 eur_att07
22:36:30  12  ,att08 eur_att08
22:36:30  13  ,att09 eur_att09
22:36:30  14  ,att10 eur_att10
22:36:30  15  ,att11 eur_att11
22:36:30  16  ,att12 eur_att12
22:36:30  17  ,att13 eur_att13
22:36:30  18  ,att14 eur_att14
22:36:30  19  ,att15 eur_att15
22:36:30  20  ,att16 eur_att16
22:36:30  21  ,att17 eur_att17
22:36:30  22  ,att18 eur_att18
22:36:30  23  ,att19 eur_att19
22:36:30  24  ,att20 eur_att20
22:36:30  25  ,att21 eur_att21
22:36:30  26  ,att22 eur_att22
22:36:30  27  ,att23 eur_att23
22:36:30  28  ,att24 eur_att24
22:36:30  29  ,att25 eur_att25
22:36:30  30  ,att26 eur_att26
22:36:30  31  ,att27 eur_att27
22:36:30  32  ,att28 eur_att28
22:36:30  33  ,att29 eur_att29
22:36:30  34  ,att30 eur_att30
22:36:30  35  ,att31 eur_att31
22:36:30  36  ,att32 eur_att32
22:36:30  37  ,att33 eur_att33
22:36:30  38  ,att34 eur_att34
22:36:30  39  ,att35 eur_att35
22:36:30  40  ,att36 eur_att36
22:36:30  41  ,att37 eur_att37
22:36:30  42  FROM svm6162
22:36:30  43  /

Table created.

Elapsed: 00:00:00.19
22:36:31 SQL> 
22:36:31 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
22:36:31 SQL> 
22:36:31 SQL> -- rpt
22:36:31 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19546

Elapsed: 00:00:00.89
22:36:32 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     19546

Elapsed: 00:00:00.00
22:36:32 SQL> 
22:36:32 SQL> --
22:36:32 SQL> -- aud610.sql
22:36:32 SQL> --
22:36:32 SQL> 
22:36:32 SQL> -- Creates views and tables for backtesting a forex SVM strategy
22:36:32 SQL> 
22:36:32 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.51
22:36:32 SQL> 
22:36:32 SQL> -- I created di5min here:
22:36:32 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
22:36:32 SQL> 
22:36:32 SQL> CREATE OR REPLACE VIEW svm6102 AS
22:36:32   2  SELECT
22:36:32   3  pair
22:36:32   4  ,ydate
22:36:32   5  ,prdate
22:36:32   6  ,rownum rnum -- acts as t in my time-series
22:36:32   7  ,clse
22:36:32   8  -- Derive a bunch of attributes from clse, the latest price:
22:36:32   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
22:36:32  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
22:36:32  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
22:36:32  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
22:36:32  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
22:36:32  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
22:36:32  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
22:36:32  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
22:36:32  17  --
22:36:32  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
22:36:32  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
22:36:32  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
22:36:32  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
22:36:32  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
22:36:32  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
22:36:32  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
22:36:32  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
22:36:32  26  --
22:36:32  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
22:36:32  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
22:36:32  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
22:36:32  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
22:36:32  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
22:36:32  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
22:36:32  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
22:36:32  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
22:36:32  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
22:36:32  36  FROM di5min WHERE pair LIKE'%aud%'
22:36:32  37  AND ydate > sysdate - 95
22:36:32  38  ORDER BY ydate
22:36:32  39  /

View created.

Elapsed: 00:00:00.04
22:36:32 SQL> 
22:36:32 SQL> -- rpt
22:36:32 SQL> 
22:36:32 SQL> SELECT
22:36:32   2  pair
22:36:32   3  ,COUNT(pair)
22:36:32   4  ,MIN(clse),MAX(clse)
22:36:32   5  ,MIN(avg6),MAX(avg6)
22:36:32   6  ,MIN(ydate),MAX(ydate)
22:36:32   7  FROM svm6102
22:36:32   8  GROUP BY pair
22:36:32   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
aud_usd       19543	.95405	  1.02495 .957141438 1.02284247 2010-10-03 20:55:01 2011-01-05 22:30:00

Elapsed: 00:00:00.88
22:36:33 SQL> 
22:36:33 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
22:36:33 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.23
22:36:34 SQL> CREATE TABLE svm6122 COMPRESS AS
22:36:34   2  SELECT
22:36:34   3  pair
22:36:34   4  ,ydate
22:36:34   5  ,prdate
22:36:34   6  ,clse
22:36:34   7  -- g6 is important. I want to predict g6:
22:36:34   8  ,ld6 - clse g6
22:36:34   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
22:36:34  10  -- I want more attributes from the ones I derived above:
22:36:34  11  -- clse relation to moving-min
22:36:34  12  ,clse-min4  cm4
22:36:34  13  ,clse-min6  cm6
22:36:34  14  ,clse-min8  cm8
22:36:34  15  ,clse-min10 cm10
22:36:34  16  ,clse-min12 cm12
22:36:34  17  ,clse-min14 cm14
22:36:34  18  ,clse-min16 cm16
22:36:34  19  ,clse-min18 cm18
22:36:34  20  -- clse relation to moving-avg
22:36:34  21  ,clse-avg4  ca4
22:36:34  22  ,clse-avg6  ca6
22:36:34  23  ,clse-avg8  ca8
22:36:34  24  ,clse-avg10 ca10
22:36:34  25  ,clse-avg12 ca12
22:36:34  26  ,clse-avg14 ca14
22:36:34  27  ,clse-avg16 ca16
22:36:34  28  ,clse-avg18 ca18
22:36:34  29  -- clse relation to moving-max
22:36:34  30  ,clse-max4  cx4
22:36:34  31  ,clse-max6  cx6
22:36:34  32  ,clse-max8  cx8
22:36:34  33  ,clse-max10 cx10
22:36:34  34  ,clse-max12 cx12
22:36:34  35  ,clse-max14 cx14
22:36:34  36  ,clse-max16 cx16
22:36:34  37  ,clse-max18 cx18
22:36:34  38  -- Derive more attributes.
22:36:34  39  -- I want to use CORR() here to help SVM see the shape of the series.
22:36:34  40  -- But COVAR_POP is more stable:
22:36:34  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
22:36:34  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
22:36:34  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
22:36:34  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
22:36:34  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
22:36:34  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
22:36:34  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
22:36:34  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
22:36:34  49  -- Derive date related attributes:
22:36:34  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:36:34  51  ,0+TO_CHAR(ydate,'D')d
22:36:34  52  ,0+TO_CHAR(ydate,'W')w
22:36:34  53  -- mpm stands for minutes-past-midnight:
22:36:34  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:36:34  55  -- mph stands for minutes-past-hour:
22:36:34  56  ,0+TO_CHAR(ydate,'MI')mph
22:36:34  57  FROM svm6102
22:36:34  58  ORDER BY ydate
22:36:34  59  /

Table created.

Elapsed: 00:00:02.06
22:36:36 SQL> 
22:36:36 SQL> -- rpt
22:36:36 SQL> 
22:36:36 SQL> SELECT
22:36:36   2  pair
22:36:36   3  ,COUNT(pair)
22:36:36   4  ,MIN(clse),MAX(clse)
22:36:36   5  ,MIN(ydate),MAX(ydate)
22:36:36   6  FROM svm6122
22:36:36   7  GROUP BY pair
22:36:36   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
aud_usd       19543	.95405	  1.02495 2010-10-03 20:55:01 2011-01-05 22:30:00

Elapsed: 00:00:00.04
22:36:36 SQL> 
22:36:36 SQL> -- Prepare for derivation of NTILE based params:
22:36:36 SQL> 
22:36:36 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.27
22:36:36 SQL> CREATE TABLE svm6142 COMPRESS AS
22:36:36   2  SELECT
22:36:36   3  pair
22:36:36   4  ,ydate
22:36:36   5  ,prdate
22:36:36   6  ,clse
22:36:36   7  ,g6
22:36:36   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
22:36:36   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
22:36:36  10  ,CASE WHEN trend IS NULL THEN 1
22:36:36  11  	    WHEN trend =0      THEN 1
22:36:36  12  	    ELSE trend END trend
22:36:36  13  ,cm4
22:36:36  14  ,cm6
22:36:36  15  ,cm8
22:36:36  16  ,cm10
22:36:36  17  ,cm12
22:36:36  18  ,cm14
22:36:36  19  ,cm16
22:36:36  20  ,cm18
22:36:36  21  --
22:36:36  22  ,ca4
22:36:36  23  ,ca6
22:36:36  24  ,ca8
22:36:36  25  ,ca10
22:36:36  26  ,ca12
22:36:36  27  ,ca14
22:36:36  28  ,ca16
22:36:36  29  ,ca18
22:36:36  30  --
22:36:36  31  ,cx4
22:36:36  32  ,cx6
22:36:36  33  ,cx8
22:36:36  34  ,cx10
22:36:36  35  ,cx12
22:36:36  36  ,cx14
22:36:36  37  ,cx16
22:36:36  38  ,cx18
22:36:36  39  --
22:36:36  40  ,crr4
22:36:36  41  ,crr6
22:36:36  42  ,crr8
22:36:36  43  ,crr10
22:36:36  44  ,crr12
22:36:36  45  ,crr14
22:36:36  46  ,crr16
22:36:36  47  ,crr18
22:36:36  48  --
22:36:36  49  ,hh
22:36:36  50  ,d
22:36:36  51  ,w
22:36:36  52  ,mpm
22:36:36  53  ,mph
22:36:36  54  FROM svm6122
22:36:36  55  ORDER BY ydate
22:36:36  56  /

Table created.

Elapsed: 00:00:00.36
22:36:36 SQL> 
22:36:36 SQL> -- rpt
22:36:36 SQL> 
22:36:36 SQL> SELECT
22:36:36   2  pair
22:36:36   3  ,trend
22:36:36   4  ,gatt
22:36:36   5  ,COUNT(pair)
22:36:36   6  ,AVG(g6)
22:36:36   7  FROM svm6142
22:36:36   8  GROUP BY pair,trend,gatt
22:36:36   9  ORDER BY pair,trend,gatt
22:36:36  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5579 -.00217971
aud_usd 	-1 up	      3677 .003755643
aud_usd 	-1		21
aud_usd 	 1 nup	      6622 -.00213247
aud_usd 	 1 up	      3593 .004054752
aud_usd 	 1		51

6 rows selected.

Elapsed: 00:00:00.05
22:36:36 SQL> 
22:36:36 SQL> 
22:36:36 SQL> -- Derive NTILE based params:
22:36:36 SQL> 
22:36:36 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.15
22:36:37 SQL> CREATE TABLE svm6162 COMPRESS AS
22:36:37   2  SELECT
22:36:37   3  pair
22:36:37   4  ,ydate
22:36:37   5  ,prdate
22:36:37   6  ,clse
22:36:37   7  ,g6
22:36:37   8  ,gatt
22:36:37   9  ,gattn
22:36:37  10  ,trend
22:36:37  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
22:36:37  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
22:36:37  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
22:36:37  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
22:36:37  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
22:36:37  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
22:36:37  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
22:36:37  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
22:36:37  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
22:36:37  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
22:36:37  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
22:36:37  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
22:36:37  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
22:36:37  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
22:36:37  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
22:36:37  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
22:36:37  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
22:36:37  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
22:36:37  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
22:36:37  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
22:36:37  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
22:36:37  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
22:36:37  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
22:36:37  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
22:36:37  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
22:36:37  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
22:36:37  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
22:36:37  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
22:36:37  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
22:36:37  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
22:36:37  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
22:36:37  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
22:36:37  43  ,hh  att32
22:36:37  44  ,d   att33
22:36:37  45  ,w   att34
22:36:37  46  ,mpm att35
22:36:37  47  ,mph att36
22:36:37  48  ,trend att37
22:36:37  49  FROM svm6142
22:36:37  50  ORDER BY ydate
22:36:37  51  /

Table created.

Elapsed: 00:00:04.82
22:36:41 SQL> 
22:36:41 SQL> -- rpt
22:36:41 SQL> 
22:36:41 SQL> SELECT
22:36:41   2  pair
22:36:41   3  ,trend
22:36:41   4  ,gatt
22:36:41   5  ,COUNT(pair)
22:36:41   6  ,AVG(g6)
22:36:41   7  FROM svm6162
22:36:41   8  GROUP BY pair,trend,gatt
22:36:41   9  ORDER BY pair,trend,gatt
22:36:41  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5579 -.00217971
aud_usd 	-1 up	      3677 .003755643
aud_usd 	-1		21
aud_usd 	 1 nup	      6622 -.00213247
aud_usd 	 1 up	      3593 .004054752
aud_usd 	 1		51

6 rows selected.

Elapsed: 00:00:00.03
22:36:41 SQL> 
22:36:41 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.19
22:36:42 SQL> CREATE TABLE modsrc COMPRESS AS
22:36:42   2  SELECT
22:36:42   3  pair
22:36:42   4  ,ydate
22:36:42   5  ,prdate
22:36:42   6  ,trend
22:36:42   7  ,g6
22:36:42   8  ,gatt
22:36:42   9  ,gattn
22:36:42  10  FROM svm6162
22:36:42  11  /

Table created.

Elapsed: 00:00:00.08
22:36:42 SQL> 
22:36:42 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
22:36:42 SQL> 
22:36:42 SQL> DROP   TABLE aud_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
22:36:42 SQL> CREATE TABLE aud_ms610 COMPRESS AS
22:36:42   2  SELECT
22:36:42   3  ydate
22:36:42   4  ,trend aud_trend
22:36:42   5  ,g6    aud_g6
22:36:42   6  ,gatt  aud_gatt
22:36:42   7  ,gattn aud_gattn
22:36:42   8  FROM modsrc
22:36:42   9  /

Table created.

Elapsed: 00:00:00.07
22:36:42 SQL> 
22:36:42 SQL> ANALYZE TABLE aud_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.33
22:36:42 SQL> 
22:36:42 SQL> -- I need a copy of the attributes:
22:36:42 SQL> 
22:36:42 SQL> 
22:36:42 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.04
22:36:42 SQL> CREATE TABLE aud_att COMPRESS AS
22:36:42   2  SELECT
22:36:42   3  ydate
22:36:42   4  ,att00 aud_att00
22:36:42   5  ,att01 aud_att01
22:36:42   6  ,att02 aud_att02
22:36:42   7  ,att03 aud_att03
22:36:42   8  ,att04 aud_att04
22:36:42   9  ,att05 aud_att05
22:36:42  10  ,att06 aud_att06
22:36:42  11  ,att07 aud_att07
22:36:42  12  ,att08 aud_att08
22:36:42  13  ,att09 aud_att09
22:36:42  14  ,att10 aud_att10
22:36:42  15  ,att11 aud_att11
22:36:42  16  ,att12 aud_att12
22:36:42  17  ,att13 aud_att13
22:36:42  18  ,att14 aud_att14
22:36:42  19  ,att15 aud_att15
22:36:42  20  ,att16 aud_att16
22:36:42  21  ,att17 aud_att17
22:36:42  22  ,att18 aud_att18
22:36:42  23  ,att19 aud_att19
22:36:42  24  ,att20 aud_att20
22:36:42  25  ,att21 aud_att21
22:36:42  26  ,att22 aud_att22
22:36:42  27  ,att23 aud_att23
22:36:42  28  ,att24 aud_att24
22:36:42  29  ,att25 aud_att25
22:36:42  30  ,att26 aud_att26
22:36:42  31  ,att27 aud_att27
22:36:42  32  ,att28 aud_att28
22:36:42  33  ,att29 aud_att29
22:36:42  34  ,att30 aud_att30
22:36:42  35  ,att31 aud_att31
22:36:42  36  ,att32 aud_att32
22:36:42  37  ,att33 aud_att33
22:36:42  38  ,att34 aud_att34
22:36:42  39  ,att35 aud_att35
22:36:42  40  ,att36 aud_att36
22:36:42  41  ,att37 aud_att37
22:36:42  42  FROM svm6162
22:36:42  43  /

Table created.

Elapsed: 00:00:00.17
22:36:42 SQL> 
22:36:42 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.44
22:36:43 SQL> 
22:36:43 SQL> -- rpt
22:36:43 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19543

Elapsed: 00:00:00.86
22:36:44 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     19543

Elapsed: 00:00:00.00
22:36:44 SQL> 
22:36:44 SQL> --
22:36:44 SQL> -- gbp610.sql
22:36:44 SQL> --
22:36:44 SQL> 
22:36:44 SQL> -- Creates views and tables for backtesting a forex SVM strategy
22:36:44 SQL> 
22:36:44 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.40
22:36:44 SQL> 
22:36:44 SQL> -- I created di5min here:
22:36:44 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
22:36:44 SQL> 
22:36:44 SQL> CREATE OR REPLACE VIEW svm6102 AS
22:36:44   2  SELECT
22:36:44   3  pair
22:36:44   4  ,ydate
22:36:44   5  ,prdate
22:36:44   6  ,rownum rnum -- acts as t in my time-series
22:36:44   7  ,clse
22:36:44   8  -- Derive a bunch of attributes from clse, the latest price:
22:36:44   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
22:36:44  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
22:36:44  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
22:36:44  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
22:36:44  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
22:36:44  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
22:36:44  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
22:36:44  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
22:36:44  17  --
22:36:44  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
22:36:44  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
22:36:44  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
22:36:44  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
22:36:44  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
22:36:44  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
22:36:44  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
22:36:44  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
22:36:44  26  --
22:36:44  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
22:36:44  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
22:36:44  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
22:36:44  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
22:36:44  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
22:36:44  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
22:36:44  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
22:36:44  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
22:36:44  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
22:36:44  36  FROM di5min WHERE pair LIKE'%gbp%'
22:36:44  37  AND ydate > sysdate - 95
22:36:44  38  ORDER BY ydate
22:36:44  39  /

View created.

Elapsed: 00:00:00.05
22:36:44 SQL> 
22:36:44 SQL> -- rpt
22:36:44 SQL> 
22:36:44 SQL> SELECT
22:36:44   2  pair
22:36:44   3  ,COUNT(pair)
22:36:44   4  ,MIN(clse),MAX(clse)
22:36:44   5  ,MIN(avg6),MAX(avg6)
22:36:44   6  ,MIN(ydate),MAX(ydate)
22:36:44   7  FROM svm6102
22:36:44   8  GROUP BY pair
22:36:44   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
gbp_usd       19545   1.535325	   1.6295 1.53696747 1.62716986 2010-10-03 20:55:01 2011-01-05 22:30:00

Elapsed: 00:00:00.87
22:36:45 SQL> 
22:36:45 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
22:36:45 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.23
22:36:45 SQL> CREATE TABLE svm6122 COMPRESS AS
22:36:45   2  SELECT
22:36:45   3  pair
22:36:45   4  ,ydate
22:36:45   5  ,prdate
22:36:45   6  ,clse
22:36:45   7  -- g6 is important. I want to predict g6:
22:36:45   8  ,ld6 - clse g6
22:36:45   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
22:36:45  10  -- I want more attributes from the ones I derived above:
22:36:45  11  -- clse relation to moving-min
22:36:45  12  ,clse-min4  cm4
22:36:45  13  ,clse-min6  cm6
22:36:45  14  ,clse-min8  cm8
22:36:45  15  ,clse-min10 cm10
22:36:45  16  ,clse-min12 cm12
22:36:45  17  ,clse-min14 cm14
22:36:45  18  ,clse-min16 cm16
22:36:45  19  ,clse-min18 cm18
22:36:45  20  -- clse relation to moving-avg
22:36:45  21  ,clse-avg4  ca4
22:36:45  22  ,clse-avg6  ca6
22:36:45  23  ,clse-avg8  ca8
22:36:45  24  ,clse-avg10 ca10
22:36:45  25  ,clse-avg12 ca12
22:36:45  26  ,clse-avg14 ca14
22:36:45  27  ,clse-avg16 ca16
22:36:45  28  ,clse-avg18 ca18
22:36:45  29  -- clse relation to moving-max
22:36:45  30  ,clse-max4  cx4
22:36:45  31  ,clse-max6  cx6
22:36:45  32  ,clse-max8  cx8
22:36:45  33  ,clse-max10 cx10
22:36:45  34  ,clse-max12 cx12
22:36:45  35  ,clse-max14 cx14
22:36:45  36  ,clse-max16 cx16
22:36:45  37  ,clse-max18 cx18
22:36:45  38  -- Derive more attributes.
22:36:45  39  -- I want to use CORR() here to help SVM see the shape of the series.
22:36:45  40  -- But COVAR_POP is more stable:
22:36:45  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
22:36:45  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
22:36:45  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
22:36:45  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
22:36:45  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
22:36:45  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
22:36:45  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
22:36:45  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
22:36:45  49  -- Derive date related attributes:
22:36:45  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:36:45  51  ,0+TO_CHAR(ydate,'D')d
22:36:45  52  ,0+TO_CHAR(ydate,'W')w
22:36:45  53  -- mpm stands for minutes-past-midnight:
22:36:45  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:36:45  55  -- mph stands for minutes-past-hour:
22:36:45  56  ,0+TO_CHAR(ydate,'MI')mph
22:36:45  57  FROM svm6102
22:36:45  58  ORDER BY ydate
22:36:45  59  /

Table created.

Elapsed: 00:00:02.10
22:36:47 SQL> 
22:36:47 SQL> -- rpt
22:36:47 SQL> 
22:36:47 SQL> SELECT
22:36:47   2  pair
22:36:47   3  ,COUNT(pair)
22:36:47   4  ,MIN(clse),MAX(clse)
22:36:47   5  ,MIN(ydate),MAX(ydate)
22:36:47   6  FROM svm6122
22:36:47   7  GROUP BY pair
22:36:47   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
gbp_usd       19545   1.535325	   1.6295 2010-10-03 20:55:01 2011-01-05 22:30:00

Elapsed: 00:00:00.04
22:36:47 SQL> 
22:36:47 SQL> -- Prepare for derivation of NTILE based params:
22:36:47 SQL> 
22:36:47 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.23
22:36:48 SQL> CREATE TABLE svm6142 COMPRESS AS
22:36:48   2  SELECT
22:36:48   3  pair
22:36:48   4  ,ydate
22:36:48   5  ,prdate
22:36:48   6  ,clse
22:36:48   7  ,g6
22:36:48   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
22:36:48   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
22:36:48  10  ,CASE WHEN trend IS NULL THEN 1
22:36:48  11  	    WHEN trend =0      THEN 1
22:36:48  12  	    ELSE trend END trend
22:36:48  13  ,cm4
22:36:48  14  ,cm6
22:36:48  15  ,cm8
22:36:48  16  ,cm10
22:36:48  17  ,cm12
22:36:48  18  ,cm14
22:36:48  19  ,cm16
22:36:48  20  ,cm18
22:36:48  21  --
22:36:48  22  ,ca4
22:36:48  23  ,ca6
22:36:48  24  ,ca8
22:36:48  25  ,ca10
22:36:48  26  ,ca12
22:36:48  27  ,ca14
22:36:48  28  ,ca16
22:36:48  29  ,ca18
22:36:48  30  --
22:36:48  31  ,cx4
22:36:48  32  ,cx6
22:36:48  33  ,cx8
22:36:48  34  ,cx10
22:36:48  35  ,cx12
22:36:48  36  ,cx14
22:36:48  37  ,cx16
22:36:48  38  ,cx18
22:36:48  39  --
22:36:48  40  ,crr4
22:36:48  41  ,crr6
22:36:48  42  ,crr8
22:36:48  43  ,crr10
22:36:48  44  ,crr12
22:36:48  45  ,crr14
22:36:48  46  ,crr16
22:36:48  47  ,crr18
22:36:48  48  --
22:36:48  49  ,hh
22:36:48  50  ,d
22:36:48  51  ,w
22:36:48  52  ,mpm
22:36:48  53  ,mph
22:36:48  54  FROM svm6122
22:36:48  55  ORDER BY ydate
22:36:48  56  /

Table created.

Elapsed: 00:00:00.40
22:36:48 SQL> 
22:36:48 SQL> -- rpt
22:36:48 SQL> 
22:36:48 SQL> SELECT
22:36:48   2  pair
22:36:48   3  ,trend
22:36:48   4  ,gatt
22:36:48   5  ,COUNT(pair)
22:36:48   6  ,AVG(g6)
22:36:48   7  FROM svm6142
22:36:48   8  GROUP BY pair,trend,gatt
22:36:48   9  ORDER BY pair,trend,gatt
22:36:48  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6334 -.00264195
gbp_usd 	-1 up	      3528 .004368155
gbp_usd 	-1		50
gbp_usd 	 1 nup	      6171 -.00267065
gbp_usd 	 1 up	      3440 .004531722
gbp_usd 	 1		22

6 rows selected.

Elapsed: 00:00:00.04
22:36:48 SQL> 
22:36:48 SQL> 
22:36:48 SQL> -- Derive NTILE based params:
22:36:48 SQL> 
22:36:48 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.17
22:36:48 SQL> CREATE TABLE svm6162 COMPRESS AS
22:36:48   2  SELECT
22:36:48   3  pair
22:36:48   4  ,ydate
22:36:48   5  ,prdate
22:36:48   6  ,clse
22:36:48   7  ,g6
22:36:48   8  ,gatt
22:36:48   9  ,gattn
22:36:48  10  ,trend
22:36:48  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
22:36:48  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
22:36:48  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
22:36:48  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
22:36:48  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
22:36:48  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
22:36:48  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
22:36:48  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
22:36:48  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
22:36:48  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
22:36:48  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
22:36:48  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
22:36:48  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
22:36:48  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
22:36:48  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
22:36:48  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
22:36:48  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
22:36:48  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
22:36:48  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
22:36:48  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
22:36:48  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
22:36:48  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
22:36:48  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
22:36:48  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
22:36:48  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
22:36:48  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
22:36:48  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
22:36:48  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
22:36:48  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
22:36:48  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
22:36:48  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
22:36:48  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
22:36:48  43  ,hh  att32
22:36:48  44  ,d   att33
22:36:48  45  ,w   att34
22:36:48  46  ,mpm att35
22:36:48  47  ,mph att36
22:36:48  48  ,trend att37
22:36:48  49  FROM svm6142
22:36:48  50  ORDER BY ydate
22:36:48  51  /

Table created.

Elapsed: 00:00:04.78
22:36:53 SQL> 
22:36:53 SQL> -- rpt
22:36:53 SQL> 
22:36:53 SQL> SELECT
22:36:53   2  pair
22:36:53   3  ,trend
22:36:53   4  ,gatt
22:36:53   5  ,COUNT(pair)
22:36:53   6  ,AVG(g6)
22:36:53   7  FROM svm6162
22:36:53   8  GROUP BY pair,trend,gatt
22:36:53   9  ORDER BY pair,trend,gatt
22:36:53  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6334 -.00264195
gbp_usd 	-1 up	      3528 .004368155
gbp_usd 	-1		50
gbp_usd 	 1 nup	      6171 -.00267065
gbp_usd 	 1 up	      3440 .004531722
gbp_usd 	 1		22

6 rows selected.

Elapsed: 00:00:00.02
22:36:53 SQL> 
22:36:53 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.14
22:36:53 SQL> CREATE TABLE modsrc COMPRESS AS
22:36:53   2  SELECT
22:36:53   3  pair
22:36:53   4  ,ydate
22:36:53   5  ,prdate
22:36:53   6  ,trend
22:36:53   7  ,g6
22:36:53   8  ,gatt
22:36:53   9  ,gattn
22:36:53  10  FROM svm6162
22:36:53  11  /

Table created.

Elapsed: 00:00:00.09
22:36:53 SQL> 
22:36:53 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
22:36:54 SQL> 
22:36:54 SQL> DROP   TABLE gbp_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
22:36:54 SQL> CREATE TABLE gbp_ms610 COMPRESS AS
22:36:54   2  SELECT
22:36:54   3  ydate
22:36:54   4  ,trend gbp_trend
22:36:54   5  ,g6    gbp_g6
22:36:54   6  ,gatt  gbp_gatt
22:36:54   7  ,gattn gbp_gattn
22:36:54   8  FROM modsrc
22:36:54   9  /

Table created.

Elapsed: 00:00:00.06
22:36:54 SQL> 
22:36:54 SQL> ANALYZE TABLE gbp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
22:36:54 SQL> 
22:36:54 SQL> -- I need a copy of the attributes:
22:36:54 SQL> 
22:36:54 SQL> 
22:36:54 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.04
22:36:54 SQL> CREATE TABLE gbp_att COMPRESS AS
22:36:54   2  SELECT
22:36:54   3  ydate
22:36:54   4  ,att00 gbp_att00
22:36:54   5  ,att01 gbp_att01
22:36:54   6  ,att02 gbp_att02
22:36:54   7  ,att03 gbp_att03
22:36:54   8  ,att04 gbp_att04
22:36:54   9  ,att05 gbp_att05
22:36:54  10  ,att06 gbp_att06
22:36:54  11  ,att07 gbp_att07
22:36:54  12  ,att08 gbp_att08
22:36:54  13  ,att09 gbp_att09
22:36:54  14  ,att10 gbp_att10
22:36:54  15  ,att11 gbp_att11
22:36:54  16  ,att12 gbp_att12
22:36:54  17  ,att13 gbp_att13
22:36:54  18  ,att14 gbp_att14
22:36:54  19  ,att15 gbp_att15
22:36:54  20  ,att16 gbp_att16
22:36:54  21  ,att17 gbp_att17
22:36:54  22  ,att18 gbp_att18
22:36:54  23  ,att19 gbp_att19
22:36:54  24  ,att20 gbp_att20
22:36:54  25  ,att21 gbp_att21
22:36:54  26  ,att22 gbp_att22
22:36:54  27  ,att23 gbp_att23
22:36:54  28  ,att24 gbp_att24
22:36:54  29  ,att25 gbp_att25
22:36:54  30  ,att26 gbp_att26
22:36:54  31  ,att27 gbp_att27
22:36:54  32  ,att28 gbp_att28
22:36:54  33  ,att29 gbp_att29
22:36:54  34  ,att30 gbp_att30
22:36:54  35  ,att31 gbp_att31
22:36:54  36  ,att32 gbp_att32
22:36:54  37  ,att33 gbp_att33
22:36:54  38  ,att34 gbp_att34
22:36:54  39  ,att35 gbp_att35
22:36:54  40  ,att36 gbp_att36
22:36:54  41  ,att37 gbp_att37
22:36:54  42  FROM svm6162
22:36:54  43  /

Table created.

Elapsed: 00:00:00.17
22:36:54 SQL> 
22:36:54 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
22:36:54 SQL> 
22:36:54 SQL> -- rpt
22:36:54 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19545

Elapsed: 00:00:00.88
22:36:55 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     19545

Elapsed: 00:00:00.00
22:36:55 SQL> 
22:36:55 SQL> --
22:36:55 SQL> -- jpy610.sql
22:36:55 SQL> --
22:36:55 SQL> 
22:36:55 SQL> -- Creates views and tables for backtesting a forex SVM strategy
22:36:55 SQL> 
22:36:55 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:02.77
22:36:58 SQL> 
22:36:58 SQL> -- I created di5min here:
22:36:58 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
22:36:58 SQL> 
22:36:58 SQL> CREATE OR REPLACE VIEW svm6102 AS
22:36:58   2  SELECT
22:36:58   3  pair
22:36:58   4  ,ydate
22:36:58   5  ,prdate
22:36:58   6  ,rownum rnum -- acts as t in my time-series
22:36:58   7  ,clse
22:36:58   8  -- Derive a bunch of attributes from clse, the latest price:
22:36:58   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
22:36:58  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
22:36:58  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
22:36:58  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
22:36:58  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
22:36:58  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
22:36:58  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
22:36:58  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
22:36:58  17  --
22:36:58  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
22:36:58  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
22:36:58  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
22:36:58  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
22:36:58  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
22:36:58  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
22:36:58  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
22:36:58  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
22:36:58  26  --
22:36:58  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
22:36:58  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
22:36:58  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
22:36:58  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
22:36:58  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
22:36:58  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
22:36:58  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
22:36:58  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
22:36:58  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
22:36:58  36  FROM di5min WHERE pair LIKE'%jpy%'
22:36:58  37  AND ydate > sysdate - 95
22:36:58  38  ORDER BY ydate
22:36:58  39  /

View created.

Elapsed: 00:00:00.11
22:36:58 SQL> 
22:36:58 SQL> -- rpt
22:36:58 SQL> 
22:36:58 SQL> SELECT
22:36:58   2  pair
22:36:58   3  ,COUNT(pair)
22:36:58   4  ,MIN(clse),MAX(clse)
22:36:58   5  ,MIN(avg6),MAX(avg6)
22:36:58   6  ,MIN(ydate),MAX(ydate)
22:36:58   7  FROM svm6102
22:36:58   8  GROUP BY pair
22:36:58   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_jpy       19545	 80.25	   84.485 80.3595205 84.3105479 2010-10-03 20:55:01 2011-01-05 22:35:00

Elapsed: 00:00:00.92
22:36:59 SQL> 
22:36:59 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
22:36:59 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.30
22:36:59 SQL> CREATE TABLE svm6122 COMPRESS AS
22:36:59   2  SELECT
22:36:59   3  pair
22:36:59   4  ,ydate
22:36:59   5  ,prdate
22:36:59   6  ,clse
22:36:59   7  -- g6 is important. I want to predict g6:
22:36:59   8  ,ld6 - clse g6
22:36:59   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
22:36:59  10  -- I want more attributes from the ones I derived above:
22:36:59  11  -- clse relation to moving-min
22:36:59  12  ,clse-min4  cm4
22:36:59  13  ,clse-min6  cm6
22:36:59  14  ,clse-min8  cm8
22:36:59  15  ,clse-min10 cm10
22:36:59  16  ,clse-min12 cm12
22:36:59  17  ,clse-min14 cm14
22:36:59  18  ,clse-min16 cm16
22:36:59  19  ,clse-min18 cm18
22:36:59  20  -- clse relation to moving-avg
22:36:59  21  ,clse-avg4  ca4
22:36:59  22  ,clse-avg6  ca6
22:36:59  23  ,clse-avg8  ca8
22:36:59  24  ,clse-avg10 ca10
22:36:59  25  ,clse-avg12 ca12
22:36:59  26  ,clse-avg14 ca14
22:36:59  27  ,clse-avg16 ca16
22:36:59  28  ,clse-avg18 ca18
22:36:59  29  -- clse relation to moving-max
22:36:59  30  ,clse-max4  cx4
22:36:59  31  ,clse-max6  cx6
22:36:59  32  ,clse-max8  cx8
22:36:59  33  ,clse-max10 cx10
22:36:59  34  ,clse-max12 cx12
22:36:59  35  ,clse-max14 cx14
22:36:59  36  ,clse-max16 cx16
22:36:59  37  ,clse-max18 cx18
22:36:59  38  -- Derive more attributes.
22:36:59  39  -- I want to use CORR() here to help SVM see the shape of the series.
22:36:59  40  -- But COVAR_POP is more stable:
22:36:59  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
22:36:59  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
22:36:59  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
22:36:59  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
22:36:59  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
22:36:59  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
22:36:59  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
22:36:59  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
22:36:59  49  -- Derive date related attributes:
22:36:59  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:36:59  51  ,0+TO_CHAR(ydate,'D')d
22:36:59  52  ,0+TO_CHAR(ydate,'W')w
22:36:59  53  -- mpm stands for minutes-past-midnight:
22:36:59  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:36:59  55  -- mph stands for minutes-past-hour:
22:36:59  56  ,0+TO_CHAR(ydate,'MI')mph
22:36:59  57  FROM svm6102
22:36:59  58  ORDER BY ydate
22:36:59  59  /

Table created.

Elapsed: 00:00:02.17
22:37:02 SQL> 
22:37:02 SQL> -- rpt
22:37:02 SQL> 
22:37:02 SQL> SELECT
22:37:02   2  pair
22:37:02   3  ,COUNT(pair)
22:37:02   4  ,MIN(clse),MAX(clse)
22:37:02   5  ,MIN(ydate),MAX(ydate)
22:37:02   6  FROM svm6122
22:37:02   7  GROUP BY pair
22:37:02   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_jpy       19545	 80.25	   84.485 2010-10-03 20:55:01 2011-01-05 22:35:00

Elapsed: 00:00:00.06
22:37:02 SQL> 
22:37:02 SQL> -- Prepare for derivation of NTILE based params:
22:37:02 SQL> 
22:37:02 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.28
22:37:02 SQL> CREATE TABLE svm6142 COMPRESS AS
22:37:02   2  SELECT
22:37:02   3  pair
22:37:02   4  ,ydate
22:37:02   5  ,prdate
22:37:02   6  ,clse
22:37:02   7  ,g6
22:37:02   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
22:37:02   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
22:37:02  10  ,CASE WHEN trend IS NULL THEN 1
22:37:02  11  	    WHEN trend =0      THEN 1
22:37:02  12  	    ELSE trend END trend
22:37:02  13  ,cm4
22:37:02  14  ,cm6
22:37:02  15  ,cm8
22:37:02  16  ,cm10
22:37:02  17  ,cm12
22:37:02  18  ,cm14
22:37:02  19  ,cm16
22:37:02  20  ,cm18
22:37:02  21  --
22:37:02  22  ,ca4
22:37:02  23  ,ca6
22:37:02  24  ,ca8
22:37:02  25  ,ca10
22:37:02  26  ,ca12
22:37:02  27  ,ca14
22:37:02  28  ,ca16
22:37:02  29  ,ca18
22:37:02  30  --
22:37:02  31  ,cx4
22:37:02  32  ,cx6
22:37:02  33  ,cx8
22:37:02  34  ,cx10
22:37:02  35  ,cx12
22:37:02  36  ,cx14
22:37:02  37  ,cx16
22:37:02  38  ,cx18
22:37:02  39  --
22:37:02  40  ,crr4
22:37:02  41  ,crr6
22:37:02  42  ,crr8
22:37:02  43  ,crr10
22:37:02  44  ,crr12
22:37:02  45  ,crr14
22:37:02  46  ,crr16
22:37:02  47  ,crr18
22:37:02  48  --
22:37:02  49  ,hh
22:37:02  50  ,d
22:37:02  51  ,w
22:37:02  52  ,mpm
22:37:02  53  ,mph
22:37:02  54  FROM svm6122
22:37:02  55  ORDER BY ydate
22:37:02  56  /

Table created.

Elapsed: 00:00:00.38
22:37:02 SQL> 
22:37:02 SQL> -- rpt
22:37:02 SQL> 
22:37:02 SQL> SELECT
22:37:02   2  pair
22:37:02   3  ,trend
22:37:02   4  ,gatt
22:37:02   5  ,COUNT(pair)
22:37:02   6  ,AVG(g6)
22:37:02   7  FROM svm6142
22:37:02   8  GROUP BY pair,trend,gatt
22:37:02   9  ORDER BY pair,trend,gatt
22:37:02  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5111 -.16664378
usd_jpy 	-1 up	      4838  .17055592
usd_jpy 	-1		 5
usd_jpy 	 1 nup	      4999 -.15604441
usd_jpy 	 1 up	      4525 .175381835
usd_jpy 	 1		67

6 rows selected.

Elapsed: 00:00:00.04
22:37:02 SQL> 
22:37:02 SQL> 
22:37:02 SQL> -- Derive NTILE based params:
22:37:02 SQL> 
22:37:02 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.15
22:37:03 SQL> CREATE TABLE svm6162 COMPRESS AS
22:37:03   2  SELECT
22:37:03   3  pair
22:37:03   4  ,ydate
22:37:03   5  ,prdate
22:37:03   6  ,clse
22:37:03   7  ,g6
22:37:03   8  ,gatt
22:37:03   9  ,gattn
22:37:03  10  ,trend
22:37:03  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
22:37:03  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
22:37:03  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
22:37:03  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
22:37:03  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
22:37:03  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
22:37:03  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
22:37:03  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
22:37:03  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
22:37:03  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
22:37:03  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
22:37:03  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
22:37:03  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
22:37:03  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
22:37:03  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
22:37:03  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
22:37:03  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
22:37:03  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
22:37:03  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
22:37:03  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
22:37:03  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
22:37:03  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
22:37:03  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
22:37:03  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
22:37:03  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
22:37:03  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
22:37:03  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
22:37:03  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
22:37:03  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
22:37:03  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
22:37:03  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
22:37:03  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
22:37:03  43  ,hh  att32
22:37:03  44  ,d   att33
22:37:03  45  ,w   att34
22:37:03  46  ,mpm att35
22:37:03  47  ,mph att36
22:37:03  48  ,trend att37
22:37:03  49  FROM svm6142
22:37:03  50  ORDER BY ydate
22:37:03  51  /

Table created.

Elapsed: 00:00:04.76
22:37:07 SQL> 
22:37:07 SQL> -- rpt
22:37:07 SQL> 
22:37:07 SQL> SELECT
22:37:07   2  pair
22:37:07   3  ,trend
22:37:07   4  ,gatt
22:37:07   5  ,COUNT(pair)
22:37:07   6  ,AVG(g6)
22:37:07   7  FROM svm6162
22:37:07   8  GROUP BY pair,trend,gatt
22:37:07   9  ORDER BY pair,trend,gatt
22:37:07  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5111 -.16664378
usd_jpy 	-1 up	      4838  .17055592
usd_jpy 	-1		 5
usd_jpy 	 1 nup	      4999 -.15604441
usd_jpy 	 1 up	      4525 .175381835
usd_jpy 	 1		67

6 rows selected.

Elapsed: 00:00:00.03
22:37:07 SQL> 
22:37:07 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
22:37:07 SQL> CREATE TABLE modsrc COMPRESS AS
22:37:07   2  SELECT
22:37:07   3  pair
22:37:07   4  ,ydate
22:37:07   5  ,prdate
22:37:07   6  ,trend
22:37:07   7  ,g6
22:37:07   8  ,gatt
22:37:07   9  ,gattn
22:37:07  10  FROM svm6162
22:37:07  11  /

Table created.

Elapsed: 00:00:00.08
22:37:08 SQL> 
22:37:08 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
22:37:08 SQL> 
22:37:08 SQL> DROP   TABLE jpy_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
22:37:08 SQL> CREATE TABLE jpy_ms610 COMPRESS AS
22:37:08   2  SELECT
22:37:08   3  ydate
22:37:08   4  ,trend jpy_trend
22:37:08   5  ,g6    jpy_g6
22:37:08   6  ,gatt  jpy_gatt
22:37:08   7  ,gattn jpy_gattn
22:37:08   8  FROM modsrc
22:37:08   9  /

Table created.

Elapsed: 00:00:00.07
22:37:08 SQL> 
22:37:08 SQL> ANALYZE TABLE jpy_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
22:37:08 SQL> 
22:37:08 SQL> -- I need a copy of the attributes:
22:37:08 SQL> 
22:37:08 SQL> 
22:37:08 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.04
22:37:08 SQL> CREATE TABLE jpy_att COMPRESS AS
22:37:08   2  SELECT
22:37:08   3  ydate
22:37:08   4  ,att00 jpy_att00
22:37:08   5  ,att01 jpy_att01
22:37:08   6  ,att02 jpy_att02
22:37:08   7  ,att03 jpy_att03
22:37:08   8  ,att04 jpy_att04
22:37:08   9  ,att05 jpy_att05
22:37:08  10  ,att06 jpy_att06
22:37:08  11  ,att07 jpy_att07
22:37:08  12  ,att08 jpy_att08
22:37:08  13  ,att09 jpy_att09
22:37:08  14  ,att10 jpy_att10
22:37:08  15  ,att11 jpy_att11
22:37:08  16  ,att12 jpy_att12
22:37:08  17  ,att13 jpy_att13
22:37:08  18  ,att14 jpy_att14
22:37:08  19  ,att15 jpy_att15
22:37:08  20  ,att16 jpy_att16
22:37:08  21  ,att17 jpy_att17
22:37:08  22  ,att18 jpy_att18
22:37:08  23  ,att19 jpy_att19
22:37:08  24  ,att20 jpy_att20
22:37:08  25  ,att21 jpy_att21
22:37:08  26  ,att22 jpy_att22
22:37:08  27  ,att23 jpy_att23
22:37:08  28  ,att24 jpy_att24
22:37:08  29  ,att25 jpy_att25
22:37:08  30  ,att26 jpy_att26
22:37:08  31  ,att27 jpy_att27
22:37:08  32  ,att28 jpy_att28
22:37:08  33  ,att29 jpy_att29
22:37:08  34  ,att30 jpy_att30
22:37:08  35  ,att31 jpy_att31
22:37:08  36  ,att32 jpy_att32
22:37:08  37  ,att33 jpy_att33
22:37:08  38  ,att34 jpy_att34
22:37:08  39  ,att35 jpy_att35
22:37:08  40  ,att36 jpy_att36
22:37:08  41  ,att37 jpy_att37
22:37:08  42  FROM svm6162
22:37:08  43  /

Table created.

Elapsed: 00:00:00.20
22:37:08 SQL> 
22:37:08 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.44
22:37:09 SQL> 
22:37:09 SQL> -- rpt
22:37:09 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19545

Elapsed: 00:00:00.92
22:37:10 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     19545

Elapsed: 00:00:00.00
22:37:10 SQL> 
22:37:10 SQL> --
22:37:10 SQL> -- cad610.sql
22:37:10 SQL> --
22:37:10 SQL> 
22:37:10 SQL> -- Creates views and tables for backtesting a forex SVM strategy
22:37:10 SQL> 
22:37:10 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.35
22:37:10 SQL> 
22:37:10 SQL> -- I created di5min here:
22:37:10 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
22:37:10 SQL> 
22:37:10 SQL> CREATE OR REPLACE VIEW svm6102 AS
22:37:10   2  SELECT
22:37:10   3  pair
22:37:10   4  ,ydate
22:37:10   5  ,prdate
22:37:10   6  ,rownum rnum -- acts as t in my time-series
22:37:10   7  ,clse
22:37:10   8  -- Derive a bunch of attributes from clse, the latest price:
22:37:10   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
22:37:10  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
22:37:10  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
22:37:10  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
22:37:10  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
22:37:10  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
22:37:10  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
22:37:10  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
22:37:10  17  --
22:37:10  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
22:37:10  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
22:37:10  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
22:37:10  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
22:37:10  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
22:37:10  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
22:37:10  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
22:37:10  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
22:37:10  26  --
22:37:10  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
22:37:10  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
22:37:10  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
22:37:10  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
22:37:10  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
22:37:10  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
22:37:10  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
22:37:10  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
22:37:10  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
22:37:10  36  FROM di5min WHERE pair LIKE'%cad%'
22:37:10  37  AND ydate > sysdate - 95
22:37:10  38  ORDER BY ydate
22:37:10  39  /

View created.

Elapsed: 00:00:00.05
22:37:10 SQL> 
22:37:10 SQL> -- rpt
22:37:10 SQL> 
22:37:10 SQL> SELECT
22:37:10   2  pair
22:37:10   3  ,COUNT(pair)
22:37:10   4  ,MIN(clse),MAX(clse)
22:37:10   5  ,MIN(avg6),MAX(avg6)
22:37:10   6  ,MIN(ydate),MAX(ydate)
22:37:10   7  FROM svm6102
22:37:10   8  GROUP BY pair
22:37:10   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_cad       19544    .988925	   1.0355 .990603938 1.03282877 2010-10-03 20:55:01 2011-01-05 22:30:00

Elapsed: 00:00:00.84
22:37:11 SQL> 
22:37:11 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
22:37:11 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.22
22:37:11 SQL> CREATE TABLE svm6122 COMPRESS AS
22:37:11   2  SELECT
22:37:11   3  pair
22:37:11   4  ,ydate
22:37:11   5  ,prdate
22:37:11   6  ,clse
22:37:11   7  -- g6 is important. I want to predict g6:
22:37:11   8  ,ld6 - clse g6
22:37:11   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
22:37:11  10  -- I want more attributes from the ones I derived above:
22:37:11  11  -- clse relation to moving-min
22:37:11  12  ,clse-min4  cm4
22:37:11  13  ,clse-min6  cm6
22:37:11  14  ,clse-min8  cm8
22:37:11  15  ,clse-min10 cm10
22:37:11  16  ,clse-min12 cm12
22:37:11  17  ,clse-min14 cm14
22:37:11  18  ,clse-min16 cm16
22:37:11  19  ,clse-min18 cm18
22:37:11  20  -- clse relation to moving-avg
22:37:11  21  ,clse-avg4  ca4
22:37:11  22  ,clse-avg6  ca6
22:37:11  23  ,clse-avg8  ca8
22:37:11  24  ,clse-avg10 ca10
22:37:11  25  ,clse-avg12 ca12
22:37:11  26  ,clse-avg14 ca14
22:37:11  27  ,clse-avg16 ca16
22:37:11  28  ,clse-avg18 ca18
22:37:11  29  -- clse relation to moving-max
22:37:11  30  ,clse-max4  cx4
22:37:11  31  ,clse-max6  cx6
22:37:11  32  ,clse-max8  cx8
22:37:11  33  ,clse-max10 cx10
22:37:11  34  ,clse-max12 cx12
22:37:11  35  ,clse-max14 cx14
22:37:11  36  ,clse-max16 cx16
22:37:11  37  ,clse-max18 cx18
22:37:11  38  -- Derive more attributes.
22:37:11  39  -- I want to use CORR() here to help SVM see the shape of the series.
22:37:11  40  -- But COVAR_POP is more stable:
22:37:11  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
22:37:11  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
22:37:11  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
22:37:11  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
22:37:11  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
22:37:11  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
22:37:11  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
22:37:11  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
22:37:11  49  -- Derive date related attributes:
22:37:11  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:37:11  51  ,0+TO_CHAR(ydate,'D')d
22:37:11  52  ,0+TO_CHAR(ydate,'W')w
22:37:11  53  -- mpm stands for minutes-past-midnight:
22:37:11  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:37:11  55  -- mph stands for minutes-past-hour:
22:37:11  56  ,0+TO_CHAR(ydate,'MI')mph
22:37:11  57  FROM svm6102
22:37:11  58  ORDER BY ydate
22:37:11  59  /

Table created.

Elapsed: 00:00:02.04
22:37:13 SQL> 
22:37:13 SQL> -- rpt
22:37:13 SQL> 
22:37:13 SQL> SELECT
22:37:13   2  pair
22:37:13   3  ,COUNT(pair)
22:37:13   4  ,MIN(clse),MAX(clse)
22:37:13   5  ,MIN(ydate),MAX(ydate)
22:37:13   6  FROM svm6122
22:37:13   7  GROUP BY pair
22:37:13   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_cad       19544    .988925	   1.0355 2010-10-03 20:55:01 2011-01-05 22:30:00

Elapsed: 00:00:00.04
22:37:13 SQL> 
22:37:13 SQL> -- Prepare for derivation of NTILE based params:
22:37:13 SQL> 
22:37:13 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.26
22:37:13 SQL> CREATE TABLE svm6142 COMPRESS AS
22:37:13   2  SELECT
22:37:13   3  pair
22:37:13   4  ,ydate
22:37:13   5  ,prdate
22:37:13   6  ,clse
22:37:13   7  ,g6
22:37:13   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
22:37:13   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
22:37:13  10  ,CASE WHEN trend IS NULL THEN 1
22:37:13  11  	    WHEN trend =0      THEN 1
22:37:13  12  	    ELSE trend END trend
22:37:13  13  ,cm4
22:37:13  14  ,cm6
22:37:13  15  ,cm8
22:37:13  16  ,cm10
22:37:13  17  ,cm12
22:37:13  18  ,cm14
22:37:13  19  ,cm16
22:37:13  20  ,cm18
22:37:13  21  --
22:37:13  22  ,ca4
22:37:13  23  ,ca6
22:37:13  24  ,ca8
22:37:13  25  ,ca10
22:37:13  26  ,ca12
22:37:13  27  ,ca14
22:37:13  28  ,ca16
22:37:13  29  ,ca18
22:37:13  30  --
22:37:13  31  ,cx4
22:37:13  32  ,cx6
22:37:13  33  ,cx8
22:37:13  34  ,cx10
22:37:13  35  ,cx12
22:37:13  36  ,cx14
22:37:13  37  ,cx16
22:37:13  38  ,cx18
22:37:13  39  --
22:37:13  40  ,crr4
22:37:13  41  ,crr6
22:37:13  42  ,crr8
22:37:13  43  ,crr10
22:37:13  44  ,crr12
22:37:13  45  ,crr14
22:37:13  46  ,crr16
22:37:13  47  ,crr18
22:37:13  48  --
22:37:13  49  ,hh
22:37:13  50  ,d
22:37:13  51  ,w
22:37:13  52  ,mpm
22:37:13  53  ,mph
22:37:13  54  FROM svm6122
22:37:13  55  ORDER BY ydate
22:37:13  56  /

Table created.

Elapsed: 00:00:00.37
22:37:14 SQL> 
22:37:14 SQL> -- rpt
22:37:14 SQL> 
22:37:14 SQL> SELECT
22:37:14   2  pair
22:37:14   3  ,trend
22:37:14   4  ,gatt
22:37:14   5  ,COUNT(pair)
22:37:14   6  ,AVG(g6)
22:37:14   7  FROM svm6142
22:37:14   8  GROUP BY pair,trend,gatt
22:37:14   9  ORDER BY pair,trend,gatt
22:37:14  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7208   -.001245
usd_cad 	-1 up	      3094 .003064775
usd_cad 	-1		64
usd_cad 	 1 nup	      6781 -.00161922
usd_cad 	 1 up	      2389 .003648486
usd_cad 	 1		 8

6 rows selected.

Elapsed: 00:00:00.04
22:37:14 SQL> 
22:37:14 SQL> 
22:37:14 SQL> -- Derive NTILE based params:
22:37:14 SQL> 
22:37:14 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.17
22:37:14 SQL> CREATE TABLE svm6162 COMPRESS AS
22:37:14   2  SELECT
22:37:14   3  pair
22:37:14   4  ,ydate
22:37:14   5  ,prdate
22:37:14   6  ,clse
22:37:14   7  ,g6
22:37:14   8  ,gatt
22:37:14   9  ,gattn
22:37:14  10  ,trend
22:37:14  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
22:37:14  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
22:37:14  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
22:37:14  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
22:37:14  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
22:37:14  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
22:37:14  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
22:37:14  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
22:37:14  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
22:37:14  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
22:37:14  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
22:37:14  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
22:37:14  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
22:37:14  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
22:37:14  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
22:37:14  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
22:37:14  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
22:37:14  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
22:37:14  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
22:37:14  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
22:37:14  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
22:37:14  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
22:37:14  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
22:37:14  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
22:37:14  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
22:37:14  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
22:37:14  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
22:37:14  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
22:37:14  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
22:37:14  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
22:37:14  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
22:37:14  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
22:37:14  43  ,hh  att32
22:37:14  44  ,d   att33
22:37:14  45  ,w   att34
22:37:14  46  ,mpm att35
22:37:14  47  ,mph att36
22:37:14  48  ,trend att37
22:37:14  49  FROM svm6142
22:37:14  50  ORDER BY ydate
22:37:14  51  /

Table created.

Elapsed: 00:00:04.70
22:37:19 SQL> 
22:37:19 SQL> -- rpt
22:37:19 SQL> 
22:37:19 SQL> SELECT
22:37:19   2  pair
22:37:19   3  ,trend
22:37:19   4  ,gatt
22:37:19   5  ,COUNT(pair)
22:37:19   6  ,AVG(g6)
22:37:19   7  FROM svm6162
22:37:19   8  GROUP BY pair,trend,gatt
22:37:19   9  ORDER BY pair,trend,gatt
22:37:19  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7208   -.001245
usd_cad 	-1 up	      3094 .003064775
usd_cad 	-1		64
usd_cad 	 1 nup	      6781 -.00161922
usd_cad 	 1 up	      2389 .003648486
usd_cad 	 1		 8

6 rows selected.

Elapsed: 00:00:00.03
22:37:19 SQL> 
22:37:19 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
22:37:19 SQL> CREATE TABLE modsrc COMPRESS AS
22:37:19   2  SELECT
22:37:19   3  pair
22:37:19   4  ,ydate
22:37:19   5  ,prdate
22:37:19   6  ,trend
22:37:19   7  ,g6
22:37:19   8  ,gatt
22:37:19   9  ,gattn
22:37:19  10  FROM svm6162
22:37:19  11  /

Table created.

Elapsed: 00:00:00.08
22:37:19 SQL> 
22:37:19 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
22:37:19 SQL> 
22:37:19 SQL> DROP   TABLE cad_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
22:37:19 SQL> CREATE TABLE cad_ms610 COMPRESS AS
22:37:19   2  SELECT
22:37:19   3  ydate
22:37:19   4  ,trend cad_trend
22:37:19   5  ,g6    cad_g6
22:37:19   6  ,gatt  cad_gatt
22:37:19   7  ,gattn cad_gattn
22:37:19   8  FROM modsrc
22:37:19   9  /

Table created.

Elapsed: 00:00:00.07
22:37:19 SQL> 
22:37:19 SQL> ANALYZE TABLE cad_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
22:37:19 SQL> 
22:37:19 SQL> -- I need a copy of the attributes:
22:37:19 SQL> 
22:37:19 SQL> 
22:37:19 SQL> DROP   TABLE cad_att;

Table dropped.

Elapsed: 00:00:00.04
22:37:19 SQL> CREATE TABLE cad_att COMPRESS AS
22:37:19   2  SELECT
22:37:19   3  ydate
22:37:19   4  ,att00 cad_att00
22:37:19   5  ,att01 cad_att01
22:37:19   6  ,att02 cad_att02
22:37:19   7  ,att03 cad_att03
22:37:19   8  ,att04 cad_att04
22:37:19   9  ,att05 cad_att05
22:37:19  10  ,att06 cad_att06
22:37:19  11  ,att07 cad_att07
22:37:19  12  ,att08 cad_att08
22:37:19  13  ,att09 cad_att09
22:37:19  14  ,att10 cad_att10
22:37:19  15  ,att11 cad_att11
22:37:19  16  ,att12 cad_att12
22:37:19  17  ,att13 cad_att13
22:37:19  18  ,att14 cad_att14
22:37:19  19  ,att15 cad_att15
22:37:19  20  ,att16 cad_att16
22:37:19  21  ,att17 cad_att17
22:37:19  22  ,att18 cad_att18
22:37:19  23  ,att19 cad_att19
22:37:19  24  ,att20 cad_att20
22:37:19  25  ,att21 cad_att21
22:37:19  26  ,att22 cad_att22
22:37:19  27  ,att23 cad_att23
22:37:19  28  ,att24 cad_att24
22:37:19  29  ,att25 cad_att25
22:37:19  30  ,att26 cad_att26
22:37:19  31  ,att27 cad_att27
22:37:19  32  ,att28 cad_att28
22:37:19  33  ,att29 cad_att29
22:37:19  34  ,att30 cad_att30
22:37:19  35  ,att31 cad_att31
22:37:19  36  ,att32 cad_att32
22:37:19  37  ,att33 cad_att33
22:37:19  38  ,att34 cad_att34
22:37:19  39  ,att35 cad_att35
22:37:19  40  ,att36 cad_att36
22:37:19  41  ,att37 cad_att37
22:37:19  42  FROM svm6162
22:37:19  43  /

Table created.

Elapsed: 00:00:00.18
22:37:20 SQL> 
22:37:20 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.50
22:37:20 SQL> 
22:37:20 SQL> -- rpt
22:37:20 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19544

Elapsed: 00:00:00.83
22:37:21 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
     19544

Elapsed: 00:00:00.00
22:37:21 SQL> 
22:37:21 SQL> --
22:37:21 SQL> -- chf610.sql
22:37:21 SQL> --
22:37:21 SQL> 
22:37:21 SQL> -- Creates views and tables for backtesting a forex SVM strategy
22:37:21 SQL> 
22:37:21 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.40
22:37:21 SQL> 
22:37:21 SQL> -- I created di5min here:
22:37:21 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
22:37:21 SQL> 
22:37:21 SQL> CREATE OR REPLACE VIEW svm6102 AS
22:37:21   2  SELECT
22:37:21   3  pair
22:37:21   4  ,ydate
22:37:21   5  ,prdate
22:37:21   6  ,rownum rnum -- acts as t in my time-series
22:37:21   7  ,clse
22:37:21   8  -- Derive a bunch of attributes from clse, the latest price:
22:37:21   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
22:37:21  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
22:37:21  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
22:37:21  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
22:37:21  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
22:37:21  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
22:37:21  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
22:37:21  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
22:37:21  17  --
22:37:21  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
22:37:21  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
22:37:21  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
22:37:21  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
22:37:21  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
22:37:21  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
22:37:21  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
22:37:21  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
22:37:21  26  --
22:37:21  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
22:37:21  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
22:37:21  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
22:37:21  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
22:37:21  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
22:37:21  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
22:37:21  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
22:37:21  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
22:37:21  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
22:37:21  36  FROM di5min WHERE pair LIKE'%chf%'
22:37:21  37  AND ydate > sysdate - 95
22:37:21  38  ORDER BY ydate
22:37:21  39  /

View created.

Elapsed: 00:00:00.04
22:37:21 SQL> 
22:37:21 SQL> -- rpt
22:37:21 SQL> 
22:37:21 SQL> SELECT
22:37:21   2  pair
22:37:21   3  ,COUNT(pair)
22:37:21   4  ,MIN(clse),MAX(clse)
22:37:21   5  ,MIN(avg6),MAX(avg6)
22:37:21   6  ,MIN(ydate),MAX(ydate)
22:37:21   7  FROM svm6102
22:37:21   8  GROUP BY pair
22:37:21   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_chf       19548    .931675	  1.00635  .93325411 1.00498151 2010-10-03 20:55:01 2011-01-05 22:35:00

Elapsed: 00:00:00.86
22:37:22 SQL> 
22:37:22 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
22:37:22 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.26
22:37:23 SQL> CREATE TABLE svm6122 COMPRESS AS
22:37:23   2  SELECT
22:37:23   3  pair
22:37:23   4  ,ydate
22:37:23   5  ,prdate
22:37:23   6  ,clse
22:37:23   7  -- g6 is important. I want to predict g6:
22:37:23   8  ,ld6 - clse g6
22:37:23   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
22:37:23  10  -- I want more attributes from the ones I derived above:
22:37:23  11  -- clse relation to moving-min
22:37:23  12  ,clse-min4  cm4
22:37:23  13  ,clse-min6  cm6
22:37:23  14  ,clse-min8  cm8
22:37:23  15  ,clse-min10 cm10
22:37:23  16  ,clse-min12 cm12
22:37:23  17  ,clse-min14 cm14
22:37:23  18  ,clse-min16 cm16
22:37:23  19  ,clse-min18 cm18
22:37:23  20  -- clse relation to moving-avg
22:37:23  21  ,clse-avg4  ca4
22:37:23  22  ,clse-avg6  ca6
22:37:23  23  ,clse-avg8  ca8
22:37:23  24  ,clse-avg10 ca10
22:37:23  25  ,clse-avg12 ca12
22:37:23  26  ,clse-avg14 ca14
22:37:23  27  ,clse-avg16 ca16
22:37:23  28  ,clse-avg18 ca18
22:37:23  29  -- clse relation to moving-max
22:37:23  30  ,clse-max4  cx4
22:37:23  31  ,clse-max6  cx6
22:37:23  32  ,clse-max8  cx8
22:37:23  33  ,clse-max10 cx10
22:37:23  34  ,clse-max12 cx12
22:37:23  35  ,clse-max14 cx14
22:37:23  36  ,clse-max16 cx16
22:37:23  37  ,clse-max18 cx18
22:37:23  38  -- Derive more attributes.
22:37:23  39  -- I want to use CORR() here to help SVM see the shape of the series.
22:37:23  40  -- But COVAR_POP is more stable:
22:37:23  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
22:37:23  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
22:37:23  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
22:37:23  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
22:37:23  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
22:37:23  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
22:37:23  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
22:37:23  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
22:37:23  49  -- Derive date related attributes:
22:37:23  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:37:23  51  ,0+TO_CHAR(ydate,'D')d
22:37:23  52  ,0+TO_CHAR(ydate,'W')w
22:37:23  53  -- mpm stands for minutes-past-midnight:
22:37:23  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:37:23  55  -- mph stands for minutes-past-hour:
22:37:23  56  ,0+TO_CHAR(ydate,'MI')mph
22:37:23  57  FROM svm6102
22:37:23  58  ORDER BY ydate
22:37:23  59  /

Table created.

Elapsed: 00:00:02.11
22:37:25 SQL> 
22:37:25 SQL> -- rpt
22:37:25 SQL> 
22:37:25 SQL> SELECT
22:37:25   2  pair
22:37:25   3  ,COUNT(pair)
22:37:25   4  ,MIN(clse),MAX(clse)
22:37:25   5  ,MIN(ydate),MAX(ydate)
22:37:25   6  FROM svm6122
22:37:25   7  GROUP BY pair
22:37:25   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_chf       19548    .931675	  1.00635 2010-10-03 20:55:01 2011-01-05 22:35:00

Elapsed: 00:00:00.04
22:37:25 SQL> 
22:37:25 SQL> -- Prepare for derivation of NTILE based params:
22:37:25 SQL> 
22:37:25 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.22
22:37:25 SQL> CREATE TABLE svm6142 COMPRESS AS
22:37:25   2  SELECT
22:37:25   3  pair
22:37:25   4  ,ydate
22:37:25   5  ,prdate
22:37:25   6  ,clse
22:37:25   7  ,g6
22:37:25   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
22:37:25   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
22:37:25  10  ,CASE WHEN trend IS NULL THEN 1
22:37:25  11  	    WHEN trend =0      THEN 1
22:37:25  12  	    ELSE trend END trend
22:37:25  13  ,cm4
22:37:25  14  ,cm6
22:37:25  15  ,cm8
22:37:25  16  ,cm10
22:37:25  17  ,cm12
22:37:25  18  ,cm14
22:37:25  19  ,cm16
22:37:25  20  ,cm18
22:37:25  21  --
22:37:25  22  ,ca4
22:37:25  23  ,ca6
22:37:25  24  ,ca8
22:37:25  25  ,ca10
22:37:25  26  ,ca12
22:37:25  27  ,ca14
22:37:25  28  ,ca16
22:37:25  29  ,ca18
22:37:25  30  --
22:37:25  31  ,cx4
22:37:25  32  ,cx6
22:37:25  33  ,cx8
22:37:25  34  ,cx10
22:37:25  35  ,cx12
22:37:25  36  ,cx14
22:37:25  37  ,cx16
22:37:25  38  ,cx18
22:37:25  39  --
22:37:25  40  ,crr4
22:37:25  41  ,crr6
22:37:25  42  ,crr8
22:37:25  43  ,crr10
22:37:25  44  ,crr12
22:37:25  45  ,crr14
22:37:25  46  ,crr16
22:37:25  47  ,crr18
22:37:25  48  --
22:37:25  49  ,hh
22:37:25  50  ,d
22:37:25  51  ,w
22:37:25  52  ,mpm
22:37:25  53  ,mph
22:37:25  54  FROM svm6122
22:37:25  55  ORDER BY ydate
22:37:25  56  /

Table created.

Elapsed: 00:00:00.37
22:37:25 SQL> 
22:37:25 SQL> -- rpt
22:37:25 SQL> 
22:37:25 SQL> SELECT
22:37:25   2  pair
22:37:25   3  ,trend
22:37:25   4  ,gatt
22:37:25   5  ,COUNT(pair)
22:37:25   6  ,AVG(g6)
22:37:25   7  FROM svm6142
22:37:25   8  GROUP BY pair,trend,gatt
22:37:25   9  ORDER BY pair,trend,gatt
22:37:25  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7072  -.0019936
usd_chf 	-1 up	      3045 .003835688
usd_chf 	-1		13
usd_chf 	 1 nup	      6429 -.00154858
usd_chf 	 1 up	      2930 .003970118
usd_chf 	 1		59

6 rows selected.

Elapsed: 00:00:00.03
22:37:25 SQL> 
22:37:25 SQL> 
22:37:25 SQL> -- Derive NTILE based params:
22:37:25 SQL> 
22:37:25 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.25
22:37:26 SQL> CREATE TABLE svm6162 COMPRESS AS
22:37:26   2  SELECT
22:37:26   3  pair
22:37:26   4  ,ydate
22:37:26   5  ,prdate
22:37:26   6  ,clse
22:37:26   7  ,g6
22:37:26   8  ,gatt
22:37:26   9  ,gattn
22:37:26  10  ,trend
22:37:26  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
22:37:26  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
22:37:26  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
22:37:26  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
22:37:26  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
22:37:26  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
22:37:26  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
22:37:26  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
22:37:26  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
22:37:26  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
22:37:26  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
22:37:26  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
22:37:26  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
22:37:26  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
22:37:26  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
22:37:26  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
22:37:26  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
22:37:26  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
22:37:26  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
22:37:26  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
22:37:26  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
22:37:26  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
22:37:26  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
22:37:26  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
22:37:26  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
22:37:26  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
22:37:26  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
22:37:26  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
22:37:26  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
22:37:26  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
22:37:26  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
22:37:26  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
22:37:26  43  ,hh  att32
22:37:26  44  ,d   att33
22:37:26  45  ,w   att34
22:37:26  46  ,mpm att35
22:37:26  47  ,mph att36
22:37:26  48  ,trend att37
22:37:26  49  FROM svm6142
22:37:26  50  ORDER BY ydate
22:37:26  51  /

Table created.

Elapsed: 00:00:04.90
22:37:30 SQL> 
22:37:30 SQL> -- rpt
22:37:30 SQL> 
22:37:30 SQL> SELECT
22:37:30   2  pair
22:37:30   3  ,trend
22:37:30   4  ,gatt
22:37:30   5  ,COUNT(pair)
22:37:30   6  ,AVG(g6)
22:37:30   7  FROM svm6162
22:37:30   8  GROUP BY pair,trend,gatt
22:37:30   9  ORDER BY pair,trend,gatt
22:37:30  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7072  -.0019936
usd_chf 	-1 up	      3045 .003835688
usd_chf 	-1		13
usd_chf 	 1 nup	      6429 -.00154858
usd_chf 	 1 up	      2930 .003970118
usd_chf 	 1		59

6 rows selected.

Elapsed: 00:00:00.03
22:37:31 SQL> 
22:37:31 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.21
22:37:31 SQL> CREATE TABLE modsrc COMPRESS AS
22:37:31   2  SELECT
22:37:31   3  pair
22:37:31   4  ,ydate
22:37:31   5  ,prdate
22:37:31   6  ,trend
22:37:31   7  ,g6
22:37:31   8  ,gatt
22:37:31   9  ,gattn
22:37:31  10  FROM svm6162
22:37:31  11  /

Table created.

Elapsed: 00:00:00.09
22:37:31 SQL> 
22:37:31 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
22:37:31 SQL> 
22:37:31 SQL> DROP   TABLE chf_ms610 ;

Table dropped.

Elapsed: 00:00:00.07
22:37:31 SQL> CREATE TABLE chf_ms610 COMPRESS AS
22:37:31   2  SELECT
22:37:31   3  ydate
22:37:31   4  ,trend chf_trend
22:37:31   5  ,g6    chf_g6
22:37:31   6  ,gatt  chf_gatt
22:37:31   7  ,gattn chf_gattn
22:37:31   8  FROM modsrc
22:37:31   9  /

Table created.

Elapsed: 00:00:00.08
22:37:31 SQL> 
22:37:31 SQL> ANALYZE TABLE chf_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
22:37:31 SQL> 
22:37:31 SQL> -- I need a copy of the attributes:
22:37:31 SQL> 
22:37:31 SQL> 
22:37:31 SQL> DROP   TABLE chf_att;

Table dropped.

Elapsed: 00:00:00.04
22:37:31 SQL> CREATE TABLE chf_att COMPRESS AS
22:37:31   2  SELECT
22:37:31   3  ydate
22:37:31   4  ,att00 chf_att00
22:37:31   5  ,att01 chf_att01
22:37:31   6  ,att02 chf_att02
22:37:31   7  ,att03 chf_att03
22:37:31   8  ,att04 chf_att04
22:37:31   9  ,att05 chf_att05
22:37:31  10  ,att06 chf_att06
22:37:31  11  ,att07 chf_att07
22:37:31  12  ,att08 chf_att08
22:37:31  13  ,att09 chf_att09
22:37:31  14  ,att10 chf_att10
22:37:31  15  ,att11 chf_att11
22:37:31  16  ,att12 chf_att12
22:37:31  17  ,att13 chf_att13
22:37:31  18  ,att14 chf_att14
22:37:31  19  ,att15 chf_att15
22:37:31  20  ,att16 chf_att16
22:37:31  21  ,att17 chf_att17
22:37:31  22  ,att18 chf_att18
22:37:31  23  ,att19 chf_att19
22:37:31  24  ,att20 chf_att20
22:37:31  25  ,att21 chf_att21
22:37:31  26  ,att22 chf_att22
22:37:31  27  ,att23 chf_att23
22:37:31  28  ,att24 chf_att24
22:37:31  29  ,att25 chf_att25
22:37:31  30  ,att26 chf_att26
22:37:31  31  ,att27 chf_att27
22:37:31  32  ,att28 chf_att28
22:37:31  33  ,att29 chf_att29
22:37:31  34  ,att30 chf_att30
22:37:31  35  ,att31 chf_att31
22:37:31  36  ,att32 chf_att32
22:37:31  37  ,att33 chf_att33
22:37:31  38  ,att34 chf_att34
22:37:31  39  ,att35 chf_att35
22:37:31  40  ,att36 chf_att36
22:37:31  41  ,att37 chf_att37
22:37:31  42  FROM svm6162
22:37:31  43  /

Table created.

Elapsed: 00:00:00.18
22:37:32 SQL> 
22:37:32 SQL> ANALYZE TABLE chf_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.50
22:37:32 SQL> 
22:37:32 SQL> -- rpt
22:37:32 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19548

Elapsed: 00:00:00.84
22:37:33 SQL> SELECT COUNT(*)FROM chf_att;

  COUNT(*)
----------
     19548

Elapsed: 00:00:00.00
22:37:33 SQL> 
22:37:33 SQL> --
22:37:33 SQL> -- ech610.sql
22:37:33 SQL> --
22:37:33 SQL> 
22:37:33 SQL> -- Creates views and tables for backtesting a forex SVM strategy
22:37:33 SQL> 
22:37:33 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.42
22:37:33 SQL> 
22:37:33 SQL> -- I created di5min here:
22:37:33 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
22:37:33 SQL> 
22:37:33 SQL> CREATE OR REPLACE VIEW svm6102 AS
22:37:33   2  SELECT
22:37:33   3  pair
22:37:33   4  ,ydate
22:37:33   5  ,prdate
22:37:33   6  ,rownum rnum -- acts as t in my time-series
22:37:33   7  ,clse
22:37:33   8  -- Derive a bunch of attributes from clse, the latest price:
22:37:33   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
22:37:33  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
22:37:33  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
22:37:33  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
22:37:33  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
22:37:33  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
22:37:33  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
22:37:33  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
22:37:33  17  --
22:37:33  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
22:37:33  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
22:37:33  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
22:37:33  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
22:37:33  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
22:37:33  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
22:37:33  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
22:37:33  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
22:37:33  26  --
22:37:33  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
22:37:33  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
22:37:33  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
22:37:33  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
22:37:33  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
22:37:33  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
22:37:33  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
22:37:33  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
22:37:33  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
22:37:33  36  FROM di5min WHERE pair LIKE'%ech%'
22:37:33  37  AND ydate > sysdate - 95
22:37:33  38  ORDER BY ydate
22:37:33  39  /

View created.

Elapsed: 00:00:00.04
22:37:33 SQL> 
22:37:33 SQL> -- rpt
22:37:33 SQL> 
22:37:33 SQL> SELECT
22:37:33   2  pair
22:37:33   3  ,COUNT(pair)
22:37:33   4  ,MIN(clse),MAX(clse)
22:37:33   5  ,MIN(avg6),MAX(avg6)
22:37:33   6  ,MIN(ydate),MAX(ydate)
22:37:33   7  FROM svm6102
22:37:33   8  GROUP BY pair
22:37:33   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ech_usd       19545 1.24192946 1.38284305 1.24320711 1.37986485 2010-10-03 20:55:01 2011-01-05 22:30:00

Elapsed: 00:00:00.85
22:37:34 SQL> 
22:37:34 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
22:37:34 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.23
22:37:34 SQL> CREATE TABLE svm6122 COMPRESS AS
22:37:34   2  SELECT
22:37:34   3  pair
22:37:34   4  ,ydate
22:37:34   5  ,prdate
22:37:34   6  ,clse
22:37:34   7  -- g6 is important. I want to predict g6:
22:37:34   8  ,ld6 - clse g6
22:37:34   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
22:37:34  10  -- I want more attributes from the ones I derived above:
22:37:34  11  -- clse relation to moving-min
22:37:34  12  ,clse-min4  cm4
22:37:34  13  ,clse-min6  cm6
22:37:34  14  ,clse-min8  cm8
22:37:34  15  ,clse-min10 cm10
22:37:34  16  ,clse-min12 cm12
22:37:34  17  ,clse-min14 cm14
22:37:34  18  ,clse-min16 cm16
22:37:34  19  ,clse-min18 cm18
22:37:34  20  -- clse relation to moving-avg
22:37:34  21  ,clse-avg4  ca4
22:37:34  22  ,clse-avg6  ca6
22:37:34  23  ,clse-avg8  ca8
22:37:34  24  ,clse-avg10 ca10
22:37:34  25  ,clse-avg12 ca12
22:37:34  26  ,clse-avg14 ca14
22:37:34  27  ,clse-avg16 ca16
22:37:34  28  ,clse-avg18 ca18
22:37:34  29  -- clse relation to moving-max
22:37:34  30  ,clse-max4  cx4
22:37:34  31  ,clse-max6  cx6
22:37:34  32  ,clse-max8  cx8
22:37:34  33  ,clse-max10 cx10
22:37:34  34  ,clse-max12 cx12
22:37:34  35  ,clse-max14 cx14
22:37:34  36  ,clse-max16 cx16
22:37:34  37  ,clse-max18 cx18
22:37:34  38  -- Derive more attributes.
22:37:34  39  -- I want to use CORR() here to help SVM see the shape of the series.
22:37:34  40  -- But COVAR_POP is more stable:
22:37:34  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
22:37:34  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
22:37:34  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
22:37:34  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
22:37:34  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
22:37:34  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
22:37:34  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
22:37:34  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
22:37:34  49  -- Derive date related attributes:
22:37:34  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:37:34  51  ,0+TO_CHAR(ydate,'D')d
22:37:34  52  ,0+TO_CHAR(ydate,'W')w
22:37:34  53  -- mpm stands for minutes-past-midnight:
22:37:34  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:37:34  55  -- mph stands for minutes-past-hour:
22:37:34  56  ,0+TO_CHAR(ydate,'MI')mph
22:37:34  57  FROM svm6102
22:37:34  58  ORDER BY ydate
22:37:34  59  /

Table created.

Elapsed: 00:00:02.08
22:37:37 SQL> 
22:37:37 SQL> -- rpt
22:37:37 SQL> 
22:37:37 SQL> SELECT
22:37:37   2  pair
22:37:37   3  ,COUNT(pair)
22:37:37   4  ,MIN(clse),MAX(clse)
22:37:37   5  ,MIN(ydate),MAX(ydate)
22:37:37   6  FROM svm6122
22:37:37   7  GROUP BY pair
22:37:37   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ech_usd       19545 1.24192946 1.38284305 2010-10-03 20:55:01 2011-01-05 22:30:00

Elapsed: 00:00:00.04
22:37:37 SQL> 
22:37:37 SQL> -- Prepare for derivation of NTILE based params:
22:37:37 SQL> 
22:37:37 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.24
22:37:37 SQL> CREATE TABLE svm6142 COMPRESS AS
22:37:37   2  SELECT
22:37:37   3  pair
22:37:37   4  ,ydate
22:37:37   5  ,prdate
22:37:37   6  ,clse
22:37:37   7  ,g6
22:37:37   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
22:37:37   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
22:37:37  10  ,CASE WHEN trend IS NULL THEN 1
22:37:37  11  	    WHEN trend =0      THEN 1
22:37:37  12  	    ELSE trend END trend
22:37:37  13  ,cm4
22:37:37  14  ,cm6
22:37:37  15  ,cm8
22:37:37  16  ,cm10
22:37:37  17  ,cm12
22:37:37  18  ,cm14
22:37:37  19  ,cm16
22:37:37  20  ,cm18
22:37:37  21  --
22:37:37  22  ,ca4
22:37:37  23  ,ca6
22:37:37  24  ,ca8
22:37:37  25  ,ca10
22:37:37  26  ,ca12
22:37:37  27  ,ca14
22:37:37  28  ,ca16
22:37:37  29  ,ca18
22:37:37  30  --
22:37:37  31  ,cx4
22:37:37  32  ,cx6
22:37:37  33  ,cx8
22:37:37  34  ,cx10
22:37:37  35  ,cx12
22:37:37  36  ,cx14
22:37:37  37  ,cx16
22:37:37  38  ,cx18
22:37:37  39  --
22:37:37  40  ,crr4
22:37:37  41  ,crr6
22:37:37  42  ,crr8
22:37:37  43  ,crr10
22:37:37  44  ,crr12
22:37:37  45  ,crr14
22:37:37  46  ,crr16
22:37:37  47  ,crr18
22:37:37  48  --
22:37:37  49  ,hh
22:37:37  50  ,d
22:37:37  51  ,w
22:37:37  52  ,mpm
22:37:37  53  ,mph
22:37:37  54  FROM svm6122
22:37:37  55  ORDER BY ydate
22:37:37  56  /

Table created.

Elapsed: 00:00:00.39
22:37:37 SQL> 
22:37:37 SQL> -- rpt
22:37:37 SQL> 
22:37:37 SQL> SELECT
22:37:37   2  pair
22:37:37   3  ,trend
22:37:37   4  ,gatt
22:37:37   5  ,COUNT(pair)
22:37:37   6  ,AVG(g6)
22:37:37   7  FROM svm6142
22:37:37   8  GROUP BY pair,trend,gatt
22:37:37   9  ORDER BY pair,trend,gatt
22:37:37  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6658 -.00222518
ech_usd 	-1 up	      3582 .003573529
ech_usd 	-1		 2
ech_usd 	 1 nup	      6332 -.00240556
ech_usd 	 1 up	      2901 .004126165
ech_usd 	 1		70

6 rows selected.

Elapsed: 00:00:00.03
22:37:37 SQL> 
22:37:37 SQL> 
22:37:37 SQL> -- Derive NTILE based params:
22:37:37 SQL> 
22:37:37 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.18
22:37:37 SQL> CREATE TABLE svm6162 COMPRESS AS
22:37:37   2  SELECT
22:37:37   3  pair
22:37:37   4  ,ydate
22:37:37   5  ,prdate
22:37:37   6  ,clse
22:37:37   7  ,g6
22:37:37   8  ,gatt
22:37:37   9  ,gattn
22:37:37  10  ,trend
22:37:37  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
22:37:37  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
22:37:37  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
22:37:37  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
22:37:37  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
22:37:37  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
22:37:37  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
22:37:37  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
22:37:37  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
22:37:37  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
22:37:37  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
22:37:37  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
22:37:37  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
22:37:37  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
22:37:37  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
22:37:37  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
22:37:37  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
22:37:37  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
22:37:37  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
22:37:37  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
22:37:37  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
22:37:37  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
22:37:37  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
22:37:37  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
22:37:37  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
22:37:37  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
22:37:37  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
22:37:37  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
22:37:37  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
22:37:37  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
22:37:37  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
22:37:37  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
22:37:37  43  ,hh  att32
22:37:37  44  ,d   att33
22:37:37  45  ,w   att34
22:37:37  46  ,mpm att35
22:37:37  47  ,mph att36
22:37:37  48  ,trend att37
22:37:37  49  FROM svm6142
22:37:37  50  ORDER BY ydate
22:37:37  51  /

Table created.

Elapsed: 00:00:04.97
22:37:42 SQL> 
22:37:42 SQL> -- rpt
22:37:42 SQL> 
22:37:42 SQL> SELECT
22:37:42   2  pair
22:37:42   3  ,trend
22:37:42   4  ,gatt
22:37:42   5  ,COUNT(pair)
22:37:42   6  ,AVG(g6)
22:37:42   7  FROM svm6162
22:37:42   8  GROUP BY pair,trend,gatt
22:37:42   9  ORDER BY pair,trend,gatt
22:37:42  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6658 -.00222518
ech_usd 	-1 up	      3582 .003573529
ech_usd 	-1		 2
ech_usd 	 1 nup	      6332 -.00240556
ech_usd 	 1 up	      2901 .004126165
ech_usd 	 1		70

6 rows selected.

Elapsed: 00:00:00.02
22:37:42 SQL> 
22:37:42 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.24
22:37:43 SQL> CREATE TABLE modsrc COMPRESS AS
22:37:43   2  SELECT
22:37:43   3  pair
22:37:43   4  ,ydate
22:37:43   5  ,prdate
22:37:43   6  ,trend
22:37:43   7  ,g6
22:37:43   8  ,gatt
22:37:43   9  ,gattn
22:37:43  10  FROM svm6162
22:37:43  11  /

Table created.

Elapsed: 00:00:00.10
22:37:43 SQL> 
22:37:43 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.23
22:37:43 SQL> 
22:37:43 SQL> DROP   TABLE ech_ms610 ;

Table dropped.

Elapsed: 00:00:00.10
22:37:43 SQL> CREATE TABLE ech_ms610 COMPRESS AS
22:37:43   2  SELECT
22:37:43   3  ydate
22:37:43   4  ,trend ech_trend
22:37:43   5  ,g6    ech_g6
22:37:43   6  ,gatt  ech_gatt
22:37:43   7  ,gattn ech_gattn
22:37:43   8  FROM modsrc
22:37:43   9  /

Table created.

Elapsed: 00:00:00.07
22:37:43 SQL> 
22:37:43 SQL> ANALYZE TABLE ech_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
22:37:43 SQL> 
22:37:43 SQL> -- I need a copy of the attributes:
22:37:43 SQL> 
22:37:43 SQL> 
22:37:43 SQL> DROP   TABLE ech_att;

Table dropped.

Elapsed: 00:00:00.08
22:37:43 SQL> CREATE TABLE ech_att COMPRESS AS
22:37:43   2  SELECT
22:37:43   3  ydate
22:37:43   4  ,att00 ech_att00
22:37:43   5  ,att01 ech_att01
22:37:43   6  ,att02 ech_att02
22:37:43   7  ,att03 ech_att03
22:37:43   8  ,att04 ech_att04
22:37:43   9  ,att05 ech_att05
22:37:43  10  ,att06 ech_att06
22:37:43  11  ,att07 ech_att07
22:37:43  12  ,att08 ech_att08
22:37:43  13  ,att09 ech_att09
22:37:43  14  ,att10 ech_att10
22:37:43  15  ,att11 ech_att11
22:37:43  16  ,att12 ech_att12
22:37:43  17  ,att13 ech_att13
22:37:43  18  ,att14 ech_att14
22:37:43  19  ,att15 ech_att15
22:37:43  20  ,att16 ech_att16
22:37:43  21  ,att17 ech_att17
22:37:43  22  ,att18 ech_att18
22:37:43  23  ,att19 ech_att19
22:37:43  24  ,att20 ech_att20
22:37:43  25  ,att21 ech_att21
22:37:43  26  ,att22 ech_att22
22:37:43  27  ,att23 ech_att23
22:37:43  28  ,att24 ech_att24
22:37:43  29  ,att25 ech_att25
22:37:43  30  ,att26 ech_att26
22:37:43  31  ,att27 ech_att27
22:37:43  32  ,att28 ech_att28
22:37:43  33  ,att29 ech_att29
22:37:43  34  ,att30 ech_att30
22:37:43  35  ,att31 ech_att31
22:37:43  36  ,att32 ech_att32
22:37:43  37  ,att33 ech_att33
22:37:43  38  ,att34 ech_att34
22:37:43  39  ,att35 ech_att35
22:37:43  40  ,att36 ech_att36
22:37:43  41  ,att37 ech_att37
22:37:43  42  FROM svm6162
22:37:43  43  /

Table created.

Elapsed: 00:00:00.18
22:37:44 SQL> 
22:37:44 SQL> ANALYZE TABLE ech_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
22:37:44 SQL> 
22:37:44 SQL> -- rpt
22:37:44 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19545

Elapsed: 00:00:00.79
22:37:45 SQL> SELECT COUNT(*)FROM ech_att;

  COUNT(*)
----------
     19545

Elapsed: 00:00:00.00
22:37:45 SQL> 
22:37:45 SQL> --
22:37:45 SQL> -- egb610.sql
22:37:45 SQL> --
22:37:45 SQL> 
22:37:45 SQL> -- Creates views and tables for backtesting a forex SVM strategy
22:37:45 SQL> 
22:37:45 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.38
22:37:45 SQL> 
22:37:45 SQL> -- I created di5min here:
22:37:45 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
22:37:45 SQL> 
22:37:45 SQL> CREATE OR REPLACE VIEW svm6102 AS
22:37:45   2  SELECT
22:37:45   3  pair
22:37:45   4  ,ydate
22:37:45   5  ,prdate
22:37:45   6  ,rownum rnum -- acts as t in my time-series
22:37:45   7  ,clse
22:37:45   8  -- Derive a bunch of attributes from clse, the latest price:
22:37:45   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
22:37:45  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
22:37:45  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
22:37:45  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
22:37:45  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
22:37:45  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
22:37:45  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
22:37:45  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
22:37:45  17  --
22:37:45  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
22:37:45  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
22:37:45  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
22:37:45  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
22:37:45  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
22:37:45  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
22:37:45  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
22:37:45  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
22:37:45  26  --
22:37:45  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
22:37:45  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
22:37:45  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
22:37:45  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
22:37:45  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
22:37:45  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
22:37:45  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
22:37:45  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
22:37:45  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
22:37:45  36  FROM di5min WHERE pair LIKE'%egb%'
22:37:45  37  AND ydate > sysdate - 95
22:37:45  38  ORDER BY ydate
22:37:45  39  /

View created.

Elapsed: 00:00:00.05
22:37:45 SQL> 
22:37:45 SQL> -- rpt
22:37:45 SQL> 
22:37:45 SQL> SELECT
22:37:45   2  pair
22:37:45   3  ,COUNT(pair)
22:37:45   4  ,MIN(clse),MAX(clse)
22:37:45   5  ,MIN(avg6),MAX(avg6)
22:37:45   6  ,MIN(ydate),MAX(ydate)
22:37:45   7  FROM svm6102
22:37:45   8  GROUP BY pair
22:37:45   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
egb_usd       19544 .833520557 .893920122 .834199029 .892400287 2010-10-03 20:55:01 2011-01-05 22:30:00

Elapsed: 00:00:00.93
22:37:46 SQL> 
22:37:46 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
22:37:46 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.28
22:37:46 SQL> CREATE TABLE svm6122 COMPRESS AS
22:37:46   2  SELECT
22:37:46   3  pair
22:37:46   4  ,ydate
22:37:46   5  ,prdate
22:37:46   6  ,clse
22:37:46   7  -- g6 is important. I want to predict g6:
22:37:46   8  ,ld6 - clse g6
22:37:46   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
22:37:46  10  -- I want more attributes from the ones I derived above:
22:37:46  11  -- clse relation to moving-min
22:37:46  12  ,clse-min4  cm4
22:37:46  13  ,clse-min6  cm6
22:37:46  14  ,clse-min8  cm8
22:37:46  15  ,clse-min10 cm10
22:37:46  16  ,clse-min12 cm12
22:37:46  17  ,clse-min14 cm14
22:37:46  18  ,clse-min16 cm16
22:37:46  19  ,clse-min18 cm18
22:37:46  20  -- clse relation to moving-avg
22:37:46  21  ,clse-avg4  ca4
22:37:46  22  ,clse-avg6  ca6
22:37:46  23  ,clse-avg8  ca8
22:37:46  24  ,clse-avg10 ca10
22:37:46  25  ,clse-avg12 ca12
22:37:46  26  ,clse-avg14 ca14
22:37:46  27  ,clse-avg16 ca16
22:37:46  28  ,clse-avg18 ca18
22:37:46  29  -- clse relation to moving-max
22:37:46  30  ,clse-max4  cx4
22:37:46  31  ,clse-max6  cx6
22:37:46  32  ,clse-max8  cx8
22:37:46  33  ,clse-max10 cx10
22:37:46  34  ,clse-max12 cx12
22:37:46  35  ,clse-max14 cx14
22:37:46  36  ,clse-max16 cx16
22:37:46  37  ,clse-max18 cx18
22:37:46  38  -- Derive more attributes.
22:37:46  39  -- I want to use CORR() here to help SVM see the shape of the series.
22:37:46  40  -- But COVAR_POP is more stable:
22:37:46  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
22:37:46  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
22:37:46  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
22:37:46  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
22:37:46  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
22:37:46  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
22:37:46  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
22:37:46  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
22:37:46  49  -- Derive date related attributes:
22:37:46  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:37:46  51  ,0+TO_CHAR(ydate,'D')d
22:37:46  52  ,0+TO_CHAR(ydate,'W')w
22:37:46  53  -- mpm stands for minutes-past-midnight:
22:37:46  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:37:46  55  -- mph stands for minutes-past-hour:
22:37:46  56  ,0+TO_CHAR(ydate,'MI')mph
22:37:46  57  FROM svm6102
22:37:46  58  ORDER BY ydate
22:37:46  59  /

Table created.

Elapsed: 00:00:02.51
22:37:49 SQL> 
22:37:49 SQL> -- rpt
22:37:49 SQL> 
22:37:49 SQL> SELECT
22:37:49   2  pair
22:37:49   3  ,COUNT(pair)
22:37:49   4  ,MIN(clse),MAX(clse)
22:37:49   5  ,MIN(ydate),MAX(ydate)
22:37:49   6  FROM svm6122
22:37:49   7  GROUP BY pair
22:37:49   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
egb_usd       19544 .833520557 .893920122 2010-10-03 20:55:01 2011-01-05 22:30:00

Elapsed: 00:00:00.05
22:37:49 SQL> 
22:37:49 SQL> -- Prepare for derivation of NTILE based params:
22:37:49 SQL> 
22:37:49 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.61
22:37:50 SQL> CREATE TABLE svm6142 COMPRESS AS
22:37:50   2  SELECT
22:37:50   3  pair
22:37:50   4  ,ydate
22:37:50   5  ,prdate
22:37:50   6  ,clse
22:37:50   7  ,g6
22:37:50   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
22:37:50   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
22:37:50  10  ,CASE WHEN trend IS NULL THEN 1
22:37:50  11  	    WHEN trend =0      THEN 1
22:37:50  12  	    ELSE trend END trend
22:37:50  13  ,cm4
22:37:50  14  ,cm6
22:37:50  15  ,cm8
22:37:50  16  ,cm10
22:37:50  17  ,cm12
22:37:50  18  ,cm14
22:37:50  19  ,cm16
22:37:50  20  ,cm18
22:37:50  21  --
22:37:50  22  ,ca4
22:37:50  23  ,ca6
22:37:50  24  ,ca8
22:37:50  25  ,ca10
22:37:50  26  ,ca12
22:37:50  27  ,ca14
22:37:50  28  ,ca16
22:37:50  29  ,ca18
22:37:50  30  --
22:37:50  31  ,cx4
22:37:50  32  ,cx6
22:37:50  33  ,cx8
22:37:50  34  ,cx10
22:37:50  35  ,cx12
22:37:50  36  ,cx14
22:37:50  37  ,cx16
22:37:50  38  ,cx18
22:37:50  39  --
22:37:50  40  ,crr4
22:37:50  41  ,crr6
22:37:50  42  ,crr8
22:37:50  43  ,crr10
22:37:50  44  ,crr12
22:37:50  45  ,crr14
22:37:50  46  ,crr16
22:37:50  47  ,crr18
22:37:50  48  --
22:37:50  49  ,hh
22:37:50  50  ,d
22:37:50  51  ,w
22:37:50  52  ,mpm
22:37:50  53  ,mph
22:37:50  54  FROM svm6122
22:37:50  55  ORDER BY ydate
22:37:50  56  /

Table created.

Elapsed: 00:00:00.42
22:37:50 SQL> 
22:37:50 SQL> -- rpt
22:37:50 SQL> 
22:37:50 SQL> SELECT
22:37:50   2  pair
22:37:50   3  ,trend
22:37:50   4  ,gatt
22:37:50   5  ,COUNT(pair)
22:37:50   6  ,AVG(g6)
22:37:50   7  FROM svm6142
22:37:50   8  GROUP BY pair,trend,gatt
22:37:50   9  ORDER BY pair,trend,gatt
22:37:50  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7753 -.00104285
egb_usd 	-1 up	      2636 .002928295
egb_usd 	-1		32
egb_usd 	 1 nup	      6466 -.00137556
egb_usd 	 1 up	      2617   .0029282
egb_usd 	 1		40

6 rows selected.

Elapsed: 00:00:00.04
22:37:50 SQL> 
22:37:50 SQL> 
22:37:50 SQL> -- Derive NTILE based params:
22:37:50 SQL> 
22:37:50 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.27
22:37:50 SQL> CREATE TABLE svm6162 COMPRESS AS
22:37:50   2  SELECT
22:37:50   3  pair
22:37:50   4  ,ydate
22:37:50   5  ,prdate
22:37:50   6  ,clse
22:37:50   7  ,g6
22:37:50   8  ,gatt
22:37:50   9  ,gattn
22:37:50  10  ,trend
22:37:50  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
22:37:50  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
22:37:50  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
22:37:50  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
22:37:50  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
22:37:50  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
22:37:50  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
22:37:50  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
22:37:50  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
22:37:50  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
22:37:50  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
22:37:50  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
22:37:50  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
22:37:50  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
22:37:50  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
22:37:50  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
22:37:50  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
22:37:50  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
22:37:50  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
22:37:50  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
22:37:50  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
22:37:50  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
22:37:50  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
22:37:50  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
22:37:50  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
22:37:50  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
22:37:50  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
22:37:50  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
22:37:50  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
22:37:50  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
22:37:50  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
22:37:50  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
22:37:50  43  ,hh  att32
22:37:50  44  ,d   att33
22:37:50  45  ,w   att34
22:37:50  46  ,mpm att35
22:37:50  47  ,mph att36
22:37:50  48  ,trend att37
22:37:50  49  FROM svm6142
22:37:50  50  ORDER BY ydate
22:37:50  51  /

Table created.

Elapsed: 00:00:05.64
22:37:56 SQL> 
22:37:56 SQL> -- rpt
22:37:56 SQL> 
22:37:56 SQL> SELECT
22:37:56   2  pair
22:37:56   3  ,trend
22:37:56   4  ,gatt
22:37:56   5  ,COUNT(pair)
22:37:56   6  ,AVG(g6)
22:37:56   7  FROM svm6162
22:37:56   8  GROUP BY pair,trend,gatt
22:37:56   9  ORDER BY pair,trend,gatt
22:37:56  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7753 -.00104285
egb_usd 	-1 up	      2636 .002928295
egb_usd 	-1		32
egb_usd 	 1 nup	      6466 -.00137556
egb_usd 	 1 up	      2617   .0029282
egb_usd 	 1		40

6 rows selected.

Elapsed: 00:00:00.03
22:37:56 SQL> 
22:37:56 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:01.11
22:37:57 SQL> CREATE TABLE modsrc COMPRESS AS
22:37:57   2  SELECT
22:37:57   3  pair
22:37:57   4  ,ydate
22:37:57   5  ,prdate
22:37:57   6  ,trend
22:37:57   7  ,g6
22:37:57   8  ,gatt
22:37:57   9  ,gattn
22:37:57  10  FROM svm6162
22:37:57  11  /

Table created.

Elapsed: 00:00:00.08
22:37:57 SQL> 
22:37:57 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.22
22:37:57 SQL> 
22:37:57 SQL> DROP   TABLE egb_ms610 ;

Table dropped.

Elapsed: 00:00:00.03
22:37:57 SQL> CREATE TABLE egb_ms610 COMPRESS AS
22:37:57   2  SELECT
22:37:57   3  ydate
22:37:57   4  ,trend egb_trend
22:37:57   5  ,g6    egb_g6
22:37:57   6  ,gatt  egb_gatt
22:37:57   7  ,gattn egb_gattn
22:37:57   8  FROM modsrc
22:37:57   9  /

Table created.

Elapsed: 00:00:00.06
22:37:58 SQL> 
22:37:58 SQL> ANALYZE TABLE egb_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
22:37:58 SQL> 
22:37:58 SQL> -- I need a copy of the attributes:
22:37:58 SQL> 
22:37:58 SQL> 
22:37:58 SQL> DROP   TABLE egb_att;

Table dropped.

Elapsed: 00:00:00.08
22:37:58 SQL> CREATE TABLE egb_att COMPRESS AS
22:37:58   2  SELECT
22:37:58   3  ydate
22:37:58   4  ,att00 egb_att00
22:37:58   5  ,att01 egb_att01
22:37:58   6  ,att02 egb_att02
22:37:58   7  ,att03 egb_att03
22:37:58   8  ,att04 egb_att04
22:37:58   9  ,att05 egb_att05
22:37:58  10  ,att06 egb_att06
22:37:58  11  ,att07 egb_att07
22:37:58  12  ,att08 egb_att08
22:37:58  13  ,att09 egb_att09
22:37:58  14  ,att10 egb_att10
22:37:58  15  ,att11 egb_att11
22:37:58  16  ,att12 egb_att12
22:37:58  17  ,att13 egb_att13
22:37:58  18  ,att14 egb_att14
22:37:58  19  ,att15 egb_att15
22:37:58  20  ,att16 egb_att16
22:37:58  21  ,att17 egb_att17
22:37:58  22  ,att18 egb_att18
22:37:58  23  ,att19 egb_att19
22:37:58  24  ,att20 egb_att20
22:37:58  25  ,att21 egb_att21
22:37:58  26  ,att22 egb_att22
22:37:58  27  ,att23 egb_att23
22:37:58  28  ,att24 egb_att24
22:37:58  29  ,att25 egb_att25
22:37:58  30  ,att26 egb_att26
22:37:58  31  ,att27 egb_att27
22:37:58  32  ,att28 egb_att28
22:37:58  33  ,att29 egb_att29
22:37:58  34  ,att30 egb_att30
22:37:58  35  ,att31 egb_att31
22:37:58  36  ,att32 egb_att32
22:37:58  37  ,att33 egb_att33
22:37:58  38  ,att34 egb_att34
22:37:58  39  ,att35 egb_att35
22:37:58  40  ,att36 egb_att36
22:37:58  41  ,att37 egb_att37
22:37:58  42  FROM svm6162
22:37:58  43  /

Table created.

Elapsed: 00:00:00.17
22:37:58 SQL> 
22:37:58 SQL> ANALYZE TABLE egb_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.56
22:37:59 SQL> 
22:37:59 SQL> -- rpt
22:37:59 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19544

Elapsed: 00:00:00.93
22:37:59 SQL> SELECT COUNT(*)FROM egb_att;

  COUNT(*)
----------
     19544

Elapsed: 00:00:00.00
22:37:59 SQL> 
22:37:59 SQL> --
22:37:59 SQL> -- ejp610.sql
22:37:59 SQL> --
22:37:59 SQL> 
22:37:59 SQL> -- Creates views and tables for backtesting a forex SVM strategy
22:37:59 SQL> 
22:37:59 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.49
22:38:00 SQL> 
22:38:00 SQL> -- I created di5min here:
22:38:00 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
22:38:00 SQL> 
22:38:00 SQL> CREATE OR REPLACE VIEW svm6102 AS
22:38:00   2  SELECT
22:38:00   3  pair
22:38:00   4  ,ydate
22:38:00   5  ,prdate
22:38:00   6  ,rownum rnum -- acts as t in my time-series
22:38:00   7  ,clse
22:38:00   8  -- Derive a bunch of attributes from clse, the latest price:
22:38:00   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
22:38:00  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
22:38:00  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
22:38:00  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
22:38:00  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
22:38:00  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
22:38:00  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
22:38:00  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
22:38:00  17  --
22:38:00  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
22:38:00  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
22:38:00  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
22:38:00  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
22:38:00  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
22:38:00  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
22:38:00  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
22:38:00  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
22:38:00  26  --
22:38:00  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
22:38:00  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
22:38:00  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
22:38:00  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
22:38:00  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
22:38:00  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
22:38:00  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
22:38:00  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
22:38:00  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
22:38:00  36  FROM di5min WHERE pair LIKE'%ejp%'
22:38:00  37  AND ydate > sysdate - 95
22:38:00  38  ORDER BY ydate
22:38:00  39  /

View created.

Elapsed: 00:00:00.04
22:38:00 SQL> 
22:38:00 SQL> -- rpt
22:38:00 SQL> 
22:38:00 SQL> SELECT
22:38:00   2  pair
22:38:00   3  ,COUNT(pair)
22:38:00   4  ,MIN(clse),MAX(clse)
22:38:00   5  ,MIN(avg6),MAX(avg6)
22:38:00   6  ,MIN(ydate),MAX(ydate)
22:38:00   7  FROM svm6102
22:38:00   8  GROUP BY pair
22:38:00   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ejp_usd       19542 107.643765	115.63485 107.776148 115.509678 2010-10-03 20:55:01 2011-01-05 22:30:00

Elapsed: 00:00:00.86
22:38:01 SQL> 
22:38:01 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
22:38:01 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.34
22:38:01 SQL> CREATE TABLE svm6122 COMPRESS AS
22:38:01   2  SELECT
22:38:01   3  pair
22:38:01   4  ,ydate
22:38:01   5  ,prdate
22:38:01   6  ,clse
22:38:01   7  -- g6 is important. I want to predict g6:
22:38:01   8  ,ld6 - clse g6
22:38:01   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
22:38:01  10  -- I want more attributes from the ones I derived above:
22:38:01  11  -- clse relation to moving-min
22:38:01  12  ,clse-min4  cm4
22:38:01  13  ,clse-min6  cm6
22:38:01  14  ,clse-min8  cm8
22:38:01  15  ,clse-min10 cm10
22:38:01  16  ,clse-min12 cm12
22:38:01  17  ,clse-min14 cm14
22:38:01  18  ,clse-min16 cm16
22:38:01  19  ,clse-min18 cm18
22:38:01  20  -- clse relation to moving-avg
22:38:01  21  ,clse-avg4  ca4
22:38:01  22  ,clse-avg6  ca6
22:38:01  23  ,clse-avg8  ca8
22:38:01  24  ,clse-avg10 ca10
22:38:01  25  ,clse-avg12 ca12
22:38:01  26  ,clse-avg14 ca14
22:38:01  27  ,clse-avg16 ca16
22:38:01  28  ,clse-avg18 ca18
22:38:01  29  -- clse relation to moving-max
22:38:01  30  ,clse-max4  cx4
22:38:01  31  ,clse-max6  cx6
22:38:01  32  ,clse-max8  cx8
22:38:01  33  ,clse-max10 cx10
22:38:01  34  ,clse-max12 cx12
22:38:01  35  ,clse-max14 cx14
22:38:01  36  ,clse-max16 cx16
22:38:01  37  ,clse-max18 cx18
22:38:01  38  -- Derive more attributes.
22:38:01  39  -- I want to use CORR() here to help SVM see the shape of the series.
22:38:01  40  -- But COVAR_POP is more stable:
22:38:01  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
22:38:01  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
22:38:01  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
22:38:01  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
22:38:01  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
22:38:01  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
22:38:01  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
22:38:01  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
22:38:01  49  -- Derive date related attributes:
22:38:01  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:38:01  51  ,0+TO_CHAR(ydate,'D')d
22:38:01  52  ,0+TO_CHAR(ydate,'W')w
22:38:01  53  -- mpm stands for minutes-past-midnight:
22:38:01  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:38:01  55  -- mph stands for minutes-past-hour:
22:38:01  56  ,0+TO_CHAR(ydate,'MI')mph
22:38:01  57  FROM svm6102
22:38:01  58  ORDER BY ydate
22:38:01  59  /

Table created.

Elapsed: 00:00:02.30
22:38:04 SQL> 
22:38:04 SQL> -- rpt
22:38:04 SQL> 
22:38:04 SQL> SELECT
22:38:04   2  pair
22:38:04   3  ,COUNT(pair)
22:38:04   4  ,MIN(clse),MAX(clse)
22:38:04   5  ,MIN(ydate),MAX(ydate)
22:38:04   6  FROM svm6122
22:38:04   7  GROUP BY pair
22:38:04   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ejp_usd       19542 107.643765	115.63485 2010-10-03 20:55:01 2011-01-05 22:30:00

Elapsed: 00:00:00.04
22:38:04 SQL> 
22:38:04 SQL> -- Prepare for derivation of NTILE based params:
22:38:04 SQL> 
22:38:04 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.25
22:38:04 SQL> CREATE TABLE svm6142 COMPRESS AS
22:38:04   2  SELECT
22:38:04   3  pair
22:38:04   4  ,ydate
22:38:04   5  ,prdate
22:38:04   6  ,clse
22:38:04   7  ,g6
22:38:04   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
22:38:04   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
22:38:04  10  ,CASE WHEN trend IS NULL THEN 1
22:38:04  11  	    WHEN trend =0      THEN 1
22:38:04  12  	    ELSE trend END trend
22:38:04  13  ,cm4
22:38:04  14  ,cm6
22:38:04  15  ,cm8
22:38:04  16  ,cm10
22:38:04  17  ,cm12
22:38:04  18  ,cm14
22:38:04  19  ,cm16
22:38:04  20  ,cm18
22:38:04  21  --
22:38:04  22  ,ca4
22:38:04  23  ,ca6
22:38:04  24  ,ca8
22:38:04  25  ,ca10
22:38:04  26  ,ca12
22:38:04  27  ,ca14
22:38:04  28  ,ca16
22:38:04  29  ,ca18
22:38:04  30  --
22:38:04  31  ,cx4
22:38:04  32  ,cx6
22:38:04  33  ,cx8
22:38:04  34  ,cx10
22:38:04  35  ,cx12
22:38:04  36  ,cx14
22:38:04  37  ,cx16
22:38:04  38  ,cx18
22:38:04  39  --
22:38:04  40  ,crr4
22:38:04  41  ,crr6
22:38:04  42  ,crr8
22:38:04  43  ,crr10
22:38:04  44  ,crr12
22:38:04  45  ,crr14
22:38:04  46  ,crr16
22:38:04  47  ,crr18
22:38:04  48  --
22:38:04  49  ,hh
22:38:04  50  ,d
22:38:04  51  ,w
22:38:04  52  ,mpm
22:38:04  53  ,mph
22:38:04  54  FROM svm6122
22:38:04  55  ORDER BY ydate
22:38:04  56  /

Table created.

Elapsed: 00:00:00.37
22:38:04 SQL> 
22:38:04 SQL> -- rpt
22:38:04 SQL> 
22:38:04 SQL> SELECT
22:38:04   2  pair
22:38:04   3  ,trend
22:38:04   4  ,gatt
22:38:04   5  ,COUNT(pair)
22:38:04   6  ,AVG(g6)
22:38:04   7  FROM svm6142
22:38:04   8  GROUP BY pair,trend,gatt
22:38:04   9  ORDER BY pair,trend,gatt
22:38:04  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      4986  -.3208998
ejp_usd 	-1 up	      4933 .277543679
ejp_usd 	 1 nup	      4941 -.30121313
ejp_usd 	 1 up	      4610 .289497462
ejp_usd 	 1		72

Elapsed: 00:00:00.03
22:38:04 SQL> 
22:38:04 SQL> 
22:38:04 SQL> -- Derive NTILE based params:
22:38:04 SQL> 
22:38:04 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.16
22:38:04 SQL> CREATE TABLE svm6162 COMPRESS AS
22:38:04   2  SELECT
22:38:04   3  pair
22:38:04   4  ,ydate
22:38:04   5  ,prdate
22:38:04   6  ,clse
22:38:04   7  ,g6
22:38:04   8  ,gatt
22:38:04   9  ,gattn
22:38:04  10  ,trend
22:38:04  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
22:38:04  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
22:38:04  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
22:38:04  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
22:38:04  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
22:38:04  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
22:38:04  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
22:38:04  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
22:38:04  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
22:38:04  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
22:38:04  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
22:38:04  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
22:38:04  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
22:38:04  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
22:38:04  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
22:38:04  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
22:38:04  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
22:38:04  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
22:38:04  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
22:38:04  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
22:38:04  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
22:38:04  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
22:38:04  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
22:38:04  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
22:38:04  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
22:38:04  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
22:38:04  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
22:38:04  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
22:38:04  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
22:38:04  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
22:38:04  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
22:38:04  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
22:38:04  43  ,hh  att32
22:38:04  44  ,d   att33
22:38:04  45  ,w   att34
22:38:04  46  ,mpm att35
22:38:04  47  ,mph att36
22:38:04  48  ,trend att37
22:38:04  49  FROM svm6142
22:38:04  50  ORDER BY ydate
22:38:04  51  /

Table created.

Elapsed: 00:00:04.98
22:38:09 SQL> 
22:38:09 SQL> -- rpt
22:38:09 SQL> 
22:38:09 SQL> SELECT
22:38:09   2  pair
22:38:09   3  ,trend
22:38:09   4  ,gatt
22:38:09   5  ,COUNT(pair)
22:38:09   6  ,AVG(g6)
22:38:09   7  FROM svm6162
22:38:09   8  GROUP BY pair,trend,gatt
22:38:09   9  ORDER BY pair,trend,gatt
22:38:09  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      4986  -.3208998
ejp_usd 	-1 up	      4933 .277543679
ejp_usd 	 1 nup	      4941 -.30121313
ejp_usd 	 1 up	      4610 .289497462
ejp_usd 	 1		72

Elapsed: 00:00:00.03
22:38:09 SQL> 
22:38:09 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.23
22:38:10 SQL> CREATE TABLE modsrc COMPRESS AS
22:38:10   2  SELECT
22:38:10   3  pair
22:38:10   4  ,ydate
22:38:10   5  ,prdate
22:38:10   6  ,trend
22:38:10   7  ,g6
22:38:10   8  ,gatt
22:38:10   9  ,gattn
22:38:10  10  FROM svm6162
22:38:10  11  /

Table created.

Elapsed: 00:00:00.07
22:38:10 SQL> 
22:38:10 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
22:38:10 SQL> 
22:38:10 SQL> DROP   TABLE ejp_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
22:38:10 SQL> CREATE TABLE ejp_ms610 COMPRESS AS
22:38:10   2  SELECT
22:38:10   3  ydate
22:38:10   4  ,trend ejp_trend
22:38:10   5  ,g6    ejp_g6
22:38:10   6  ,gatt  ejp_gatt
22:38:10   7  ,gattn ejp_gattn
22:38:10   8  FROM modsrc
22:38:10   9  /

Table created.

Elapsed: 00:00:00.08
22:38:10 SQL> 
22:38:10 SQL> ANALYZE TABLE ejp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
22:38:10 SQL> 
22:38:10 SQL> -- I need a copy of the attributes:
22:38:10 SQL> 
22:38:10 SQL> 
22:38:10 SQL> DROP   TABLE ejp_att;

Table dropped.

Elapsed: 00:00:00.05
22:38:10 SQL> CREATE TABLE ejp_att COMPRESS AS
22:38:10   2  SELECT
22:38:10   3  ydate
22:38:10   4  ,att00 ejp_att00
22:38:10   5  ,att01 ejp_att01
22:38:10   6  ,att02 ejp_att02
22:38:10   7  ,att03 ejp_att03
22:38:10   8  ,att04 ejp_att04
22:38:10   9  ,att05 ejp_att05
22:38:10  10  ,att06 ejp_att06
22:38:10  11  ,att07 ejp_att07
22:38:10  12  ,att08 ejp_att08
22:38:10  13  ,att09 ejp_att09
22:38:10  14  ,att10 ejp_att10
22:38:10  15  ,att11 ejp_att11
22:38:10  16  ,att12 ejp_att12
22:38:10  17  ,att13 ejp_att13
22:38:10  18  ,att14 ejp_att14
22:38:10  19  ,att15 ejp_att15
22:38:10  20  ,att16 ejp_att16
22:38:10  21  ,att17 ejp_att17
22:38:10  22  ,att18 ejp_att18
22:38:10  23  ,att19 ejp_att19
22:38:10  24  ,att20 ejp_att20
22:38:10  25  ,att21 ejp_att21
22:38:10  26  ,att22 ejp_att22
22:38:10  27  ,att23 ejp_att23
22:38:10  28  ,att24 ejp_att24
22:38:10  29  ,att25 ejp_att25
22:38:10  30  ,att26 ejp_att26
22:38:10  31  ,att27 ejp_att27
22:38:10  32  ,att28 ejp_att28
22:38:10  33  ,att29 ejp_att29
22:38:10  34  ,att30 ejp_att30
22:38:10  35  ,att31 ejp_att31
22:38:10  36  ,att32 ejp_att32
22:38:10  37  ,att33 ejp_att33
22:38:10  38  ,att34 ejp_att34
22:38:10  39  ,att35 ejp_att35
22:38:10  40  ,att36 ejp_att36
22:38:10  41  ,att37 ejp_att37
22:38:10  42  FROM svm6162
22:38:10  43  /

Table created.

Elapsed: 00:00:00.21
22:38:10 SQL> 
22:38:10 SQL> ANALYZE TABLE ejp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.48
22:38:11 SQL> 
22:38:11 SQL> -- rpt
22:38:11 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19542

Elapsed: 00:00:00.82
22:38:12 SQL> SELECT COUNT(*)FROM ejp_att;

  COUNT(*)
----------
     19542

Elapsed: 00:00:00.00
22:38:12 SQL> 
22:38:12 SQL> --
22:38:12 SQL> -- ajp610.sql
22:38:12 SQL> --
22:38:12 SQL> 
22:38:12 SQL> -- Creates views and tables for backtesting a forex SVM strategy
22:38:12 SQL> 
22:38:12 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.46
22:38:12 SQL> 
22:38:12 SQL> -- I created di5min here:
22:38:12 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
22:38:12 SQL> 
22:38:12 SQL> CREATE OR REPLACE VIEW svm6102 AS
22:38:12   2  SELECT
22:38:12   3  pair
22:38:12   4  ,ydate
22:38:12   5  ,prdate
22:38:12   6  ,rownum rnum -- acts as t in my time-series
22:38:12   7  ,clse
22:38:12   8  -- Derive a bunch of attributes from clse, the latest price:
22:38:12   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
22:38:12  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
22:38:12  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
22:38:12  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
22:38:12  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
22:38:12  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
22:38:12  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
22:38:12  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
22:38:12  17  --
22:38:12  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
22:38:12  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
22:38:12  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
22:38:12  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
22:38:12  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
22:38:12  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
22:38:12  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
22:38:12  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
22:38:12  26  --
22:38:12  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
22:38:12  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
22:38:12  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
22:38:12  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
22:38:12  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
22:38:12  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
22:38:12  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
22:38:12  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
22:38:12  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
22:38:12  36  FROM di5min WHERE pair LIKE'%ajp%'
22:38:12  37  AND ydate > sysdate - 95
22:38:12  38  ORDER BY ydate
22:38:12  39  /

View created.

Elapsed: 00:00:00.08
22:38:12 SQL> 
22:38:12 SQL> -- rpt
22:38:12 SQL> 
22:38:12 SQL> SELECT
22:38:12   2  pair
22:38:12   3  ,COUNT(pair)
22:38:12   4  ,MIN(clse),MAX(clse)
22:38:12   5  ,MIN(avg6),MAX(avg6)
22:38:12   6  ,MIN(ydate),MAX(ydate)
22:38:12   7  FROM svm6102
22:38:12   8  GROUP BY pair
22:38:12   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ajp_usd       19539  78.249976 83.6669853 78.5106193  83.546306 2010-10-03 20:55:01 2011-01-05 22:30:00

Elapsed: 00:00:00.82
22:38:13 SQL> 
22:38:13 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
22:38:13 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.31
22:38:13 SQL> CREATE TABLE svm6122 COMPRESS AS
22:38:13   2  SELECT
22:38:13   3  pair
22:38:13   4  ,ydate
22:38:13   5  ,prdate
22:38:13   6  ,clse
22:38:13   7  -- g6 is important. I want to predict g6:
22:38:13   8  ,ld6 - clse g6
22:38:13   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
22:38:13  10  -- I want more attributes from the ones I derived above:
22:38:13  11  -- clse relation to moving-min
22:38:13  12  ,clse-min4  cm4
22:38:13  13  ,clse-min6  cm6
22:38:13  14  ,clse-min8  cm8
22:38:13  15  ,clse-min10 cm10
22:38:13  16  ,clse-min12 cm12
22:38:13  17  ,clse-min14 cm14
22:38:13  18  ,clse-min16 cm16
22:38:13  19  ,clse-min18 cm18
22:38:13  20  -- clse relation to moving-avg
22:38:13  21  ,clse-avg4  ca4
22:38:13  22  ,clse-avg6  ca6
22:38:13  23  ,clse-avg8  ca8
22:38:13  24  ,clse-avg10 ca10
22:38:13  25  ,clse-avg12 ca12
22:38:13  26  ,clse-avg14 ca14
22:38:13  27  ,clse-avg16 ca16
22:38:13  28  ,clse-avg18 ca18
22:38:13  29  -- clse relation to moving-max
22:38:13  30  ,clse-max4  cx4
22:38:13  31  ,clse-max6  cx6
22:38:13  32  ,clse-max8  cx8
22:38:13  33  ,clse-max10 cx10
22:38:13  34  ,clse-max12 cx12
22:38:13  35  ,clse-max14 cx14
22:38:13  36  ,clse-max16 cx16
22:38:13  37  ,clse-max18 cx18
22:38:13  38  -- Derive more attributes.
22:38:13  39  -- I want to use CORR() here to help SVM see the shape of the series.
22:38:13  40  -- But COVAR_POP is more stable:
22:38:13  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
22:38:13  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
22:38:13  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
22:38:13  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
22:38:13  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
22:38:13  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
22:38:13  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
22:38:13  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
22:38:13  49  -- Derive date related attributes:
22:38:13  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:38:13  51  ,0+TO_CHAR(ydate,'D')d
22:38:13  52  ,0+TO_CHAR(ydate,'W')w
22:38:13  53  -- mpm stands for minutes-past-midnight:
22:38:13  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:38:13  55  -- mph stands for minutes-past-hour:
22:38:13  56  ,0+TO_CHAR(ydate,'MI')mph
22:38:13  57  FROM svm6102
22:38:13  58  ORDER BY ydate
22:38:13  59  /

Table created.

Elapsed: 00:00:02.01
22:38:15 SQL> 
22:38:15 SQL> -- rpt
22:38:15 SQL> 
22:38:15 SQL> SELECT
22:38:15   2  pair
22:38:15   3  ,COUNT(pair)
22:38:15   4  ,MIN(clse),MAX(clse)
22:38:15   5  ,MIN(ydate),MAX(ydate)
22:38:15   6  FROM svm6122
22:38:15   7  GROUP BY pair
22:38:15   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ajp_usd       19539  78.249976 83.6669853 2010-10-03 20:55:01 2011-01-05 22:30:00

Elapsed: 00:00:00.04
22:38:15 SQL> 
22:38:15 SQL> -- Prepare for derivation of NTILE based params:
22:38:15 SQL> 
22:38:15 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.29
22:38:16 SQL> CREATE TABLE svm6142 COMPRESS AS
22:38:16   2  SELECT
22:38:16   3  pair
22:38:16   4  ,ydate
22:38:16   5  ,prdate
22:38:16   6  ,clse
22:38:16   7  ,g6
22:38:16   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
22:38:16   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
22:38:16  10  ,CASE WHEN trend IS NULL THEN 1
22:38:16  11  	    WHEN trend =0      THEN 1
22:38:16  12  	    ELSE trend END trend
22:38:16  13  ,cm4
22:38:16  14  ,cm6
22:38:16  15  ,cm8
22:38:16  16  ,cm10
22:38:16  17  ,cm12
22:38:16  18  ,cm14
22:38:16  19  ,cm16
22:38:16  20  ,cm18
22:38:16  21  --
22:38:16  22  ,ca4
22:38:16  23  ,ca6
22:38:16  24  ,ca8
22:38:16  25  ,ca10
22:38:16  26  ,ca12
22:38:16  27  ,ca14
22:38:16  28  ,ca16
22:38:16  29  ,ca18
22:38:16  30  --
22:38:16  31  ,cx4
22:38:16  32  ,cx6
22:38:16  33  ,cx8
22:38:16  34  ,cx10
22:38:16  35  ,cx12
22:38:16  36  ,cx14
22:38:16  37  ,cx16
22:38:16  38  ,cx18
22:38:16  39  --
22:38:16  40  ,crr4
22:38:16  41  ,crr6
22:38:16  42  ,crr8
22:38:16  43  ,crr10
22:38:16  44  ,crr12
22:38:16  45  ,crr14
22:38:16  46  ,crr16
22:38:16  47  ,crr18
22:38:16  48  --
22:38:16  49  ,hh
22:38:16  50  ,d
22:38:16  51  ,w
22:38:16  52  ,mpm
22:38:16  53  ,mph
22:38:16  54  FROM svm6122
22:38:16  55  ORDER BY ydate
22:38:16  56  /

Table created.

Elapsed: 00:00:00.38
22:38:16 SQL> 
22:38:16 SQL> -- rpt
22:38:16 SQL> 
22:38:16 SQL> SELECT
22:38:16   2  pair
22:38:16   3  ,trend
22:38:16   4  ,gatt
22:38:16   5  ,COUNT(pair)
22:38:16   6  ,AVG(g6)
22:38:16   7  FROM svm6142
22:38:16   8  GROUP BY pair,trend,gatt
22:38:16   9  ORDER BY pair,trend,gatt
22:38:16  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ajp_usd 	-1 nup	      4245 -.22696926
ajp_usd 	-1 up	      5187 .224896558
ajp_usd 	 1 nup	      5226 -.20365982
ajp_usd 	 1 up	      4809 .212770145
ajp_usd 	 1		72

Elapsed: 00:00:00.03
22:38:16 SQL> 
22:38:16 SQL> 
22:38:16 SQL> -- Derive NTILE based params:
22:38:16 SQL> 
22:38:16 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.24
22:38:16 SQL> CREATE TABLE svm6162 COMPRESS AS
22:38:16   2  SELECT
22:38:16   3  pair
22:38:16   4  ,ydate
22:38:16   5  ,prdate
22:38:16   6  ,clse
22:38:16   7  ,g6
22:38:16   8  ,gatt
22:38:16   9  ,gattn
22:38:16  10  ,trend
22:38:16  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
22:38:16  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
22:38:16  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
22:38:16  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
22:38:16  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
22:38:16  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
22:38:16  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
22:38:16  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
22:38:16  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
22:38:16  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
22:38:16  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
22:38:16  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
22:38:16  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
22:38:16  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
22:38:16  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
22:38:16  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
22:38:16  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
22:38:16  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
22:38:16  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
22:38:16  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
22:38:16  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
22:38:16  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
22:38:16  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
22:38:16  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
22:38:16  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
22:38:16  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
22:38:16  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
22:38:16  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
22:38:16  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
22:38:16  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
22:38:16  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
22:38:16  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
22:38:16  43  ,hh  att32
22:38:16  44  ,d   att33
22:38:16  45  ,w   att34
22:38:16  46  ,mpm att35
22:38:16  47  ,mph att36
22:38:16  48  ,trend att37
22:38:16  49  FROM svm6142
22:38:16  50  ORDER BY ydate
22:38:16  51  /

Table created.

Elapsed: 00:00:04.87
22:38:21 SQL> 
22:38:21 SQL> -- rpt
22:38:21 SQL> 
22:38:21 SQL> SELECT
22:38:21   2  pair
22:38:21   3  ,trend
22:38:21   4  ,gatt
22:38:21   5  ,COUNT(pair)
22:38:21   6  ,AVG(g6)
22:38:21   7  FROM svm6162
22:38:21   8  GROUP BY pair,trend,gatt
22:38:21   9  ORDER BY pair,trend,gatt
22:38:21  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ajp_usd 	-1 nup	      4245 -.22696926
ajp_usd 	-1 up	      5187 .224896558
ajp_usd 	 1 nup	      5226 -.20365982
ajp_usd 	 1 up	      4809 .212770145
ajp_usd 	 1		72

Elapsed: 00:00:00.02
22:38:21 SQL> 
22:38:21 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.18
22:38:21 SQL> CREATE TABLE modsrc COMPRESS AS
22:38:21   2  SELECT
22:38:21   3  pair
22:38:21   4  ,ydate
22:38:21   5  ,prdate
22:38:21   6  ,trend
22:38:21   7  ,g6
22:38:21   8  ,gatt
22:38:21   9  ,gattn
22:38:21  10  FROM svm6162
22:38:21  11  /

Table created.

Elapsed: 00:00:00.08
22:38:22 SQL> 
22:38:22 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
22:38:22 SQL> 
22:38:22 SQL> DROP   TABLE ajp_ms610 ;

Table dropped.

Elapsed: 00:00:00.11
22:38:22 SQL> CREATE TABLE ajp_ms610 COMPRESS AS
22:38:22   2  SELECT
22:38:22   3  ydate
22:38:22   4  ,trend ajp_trend
22:38:22   5  ,g6    ajp_g6
22:38:22   6  ,gatt  ajp_gatt
22:38:22   7  ,gattn ajp_gattn
22:38:22   8  FROM modsrc
22:38:22   9  /

Table created.

Elapsed: 00:00:00.11
22:38:22 SQL> 
22:38:22 SQL> ANALYZE TABLE ajp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
22:38:22 SQL> 
22:38:22 SQL> -- I need a copy of the attributes:
22:38:22 SQL> 
22:38:22 SQL> 
22:38:22 SQL> DROP   TABLE ajp_att;

Table dropped.

Elapsed: 00:00:00.05
22:38:22 SQL> CREATE TABLE ajp_att COMPRESS AS
22:38:22   2  SELECT
22:38:22   3  ydate
22:38:22   4  ,att00 ajp_att00
22:38:22   5  ,att01 ajp_att01
22:38:22   6  ,att02 ajp_att02
22:38:22   7  ,att03 ajp_att03
22:38:22   8  ,att04 ajp_att04
22:38:22   9  ,att05 ajp_att05
22:38:22  10  ,att06 ajp_att06
22:38:22  11  ,att07 ajp_att07
22:38:22  12  ,att08 ajp_att08
22:38:22  13  ,att09 ajp_att09
22:38:22  14  ,att10 ajp_att10
22:38:22  15  ,att11 ajp_att11
22:38:22  16  ,att12 ajp_att12
22:38:22  17  ,att13 ajp_att13
22:38:22  18  ,att14 ajp_att14
22:38:22  19  ,att15 ajp_att15
22:38:22  20  ,att16 ajp_att16
22:38:22  21  ,att17 ajp_att17
22:38:22  22  ,att18 ajp_att18
22:38:22  23  ,att19 ajp_att19
22:38:22  24  ,att20 ajp_att20
22:38:22  25  ,att21 ajp_att21
22:38:22  26  ,att22 ajp_att22
22:38:22  27  ,att23 ajp_att23
22:38:22  28  ,att24 ajp_att24
22:38:22  29  ,att25 ajp_att25
22:38:22  30  ,att26 ajp_att26
22:38:22  31  ,att27 ajp_att27
22:38:22  32  ,att28 ajp_att28
22:38:22  33  ,att29 ajp_att29
22:38:22  34  ,att30 ajp_att30
22:38:22  35  ,att31 ajp_att31
22:38:22  36  ,att32 ajp_att32
22:38:22  37  ,att33 ajp_att33
22:38:22  38  ,att34 ajp_att34
22:38:22  39  ,att35 ajp_att35
22:38:22  40  ,att36 ajp_att36
22:38:22  41  ,att37 ajp_att37
22:38:22  42  FROM svm6162
22:38:22  43  /

Table created.

Elapsed: 00:00:00.15
22:38:22 SQL> 
22:38:22 SQL> ANALYZE TABLE ajp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
22:38:23 SQL> 
22:38:23 SQL> -- rpt
22:38:23 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19539

Elapsed: 00:00:00.75
22:38:24 SQL> SELECT COUNT(*)FROM ajp_att;

  COUNT(*)
----------
     19539

Elapsed: 00:00:00.00
22:38:24 SQL> 
22:38:24 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
