
SQL*Plus: Release 11.2.0.1.0 Production on Fri Dec 31 05:10:14 2010

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

05:10:14 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
05:10:14 SQL> 05:10:14 SQL> --
05:10:14 SQL> -- eur610.sql
05:10:14 SQL> --
05:10:14 SQL> 
05:10:14 SQL> -- Creates views and tables for backtesting a forex SVM strategy
05:10:14 SQL> 
05:10:14 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.02
05:10:14 SQL> 
05:10:14 SQL> -- I created di5min here:
05:10:14 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
05:10:14 SQL> 
05:10:14 SQL> CREATE OR REPLACE VIEW svm6102 AS
05:10:14   2  SELECT
05:10:14   3  pair
05:10:14   4  ,ydate
05:10:14   5  ,prdate
05:10:14   6  ,rownum rnum -- acts as t in my time-series
05:10:14   7  ,clse
05:10:14   8  -- Derive a bunch of attributes from clse, the latest price:
05:10:14   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
05:10:14  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
05:10:14  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
05:10:14  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
05:10:14  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
05:10:14  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
05:10:14  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
05:10:14  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
05:10:14  17  --
05:10:14  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
05:10:14  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
05:10:14  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
05:10:14  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
05:10:14  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
05:10:14  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
05:10:14  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
05:10:14  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
05:10:14  26  --
05:10:14  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
05:10:14  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
05:10:14  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
05:10:14  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
05:10:14  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
05:10:14  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
05:10:14  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
05:10:14  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
05:10:14  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
05:10:14  36  FROM di5min WHERE pair LIKE'%eur%'
05:10:14  37  AND ydate > sysdate - 95
05:10:14  38  ORDER BY ydate
05:10:14  39  /

View created.

Elapsed: 00:00:00.08
05:10:15 SQL> 
05:10:15 SQL> -- rpt
05:10:15 SQL> 
05:10:15 SQL> SELECT
05:10:15   2  pair
05:10:15   3  ,COUNT(pair)
05:10:15   4  ,MIN(clse),MAX(clse)
05:10:15   5  ,MIN(avg6),MAX(avg6)
05:10:15   6  ,MIN(ydate),MAX(ydate)
05:10:15   7  FROM svm6102
05:10:15   8  GROUP BY pair
05:10:15   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_usd       19838    1.29735	   1.4273 1.29875103 1.42436233 2010-09-27 05:15:01 2010-12-31 05:05:00

Elapsed: 00:00:00.91
05:10:15 SQL> 
05:10:15 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
05:10:15 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.21
05:10:16 SQL> CREATE TABLE svm6122 COMPRESS AS
05:10:16   2  SELECT
05:10:16   3  pair
05:10:16   4  ,ydate
05:10:16   5  ,prdate
05:10:16   6  ,clse
05:10:16   7  -- g6 is important. I want to predict g6:
05:10:16   8  ,ld6 - clse g6
05:10:16   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
05:10:16  10  -- I want more attributes from the ones I derived above:
05:10:16  11  -- clse relation to moving-min
05:10:16  12  ,clse-min4  cm4
05:10:16  13  ,clse-min6  cm6
05:10:16  14  ,clse-min8  cm8
05:10:16  15  ,clse-min10 cm10
05:10:16  16  ,clse-min12 cm12
05:10:16  17  ,clse-min14 cm14
05:10:16  18  ,clse-min16 cm16
05:10:16  19  ,clse-min18 cm18
05:10:16  20  -- clse relation to moving-avg
05:10:16  21  ,clse-avg4  ca4
05:10:16  22  ,clse-avg6  ca6
05:10:16  23  ,clse-avg8  ca8
05:10:16  24  ,clse-avg10 ca10
05:10:16  25  ,clse-avg12 ca12
05:10:16  26  ,clse-avg14 ca14
05:10:16  27  ,clse-avg16 ca16
05:10:16  28  ,clse-avg18 ca18
05:10:16  29  -- clse relation to moving-max
05:10:16  30  ,clse-max4  cx4
05:10:16  31  ,clse-max6  cx6
05:10:16  32  ,clse-max8  cx8
05:10:16  33  ,clse-max10 cx10
05:10:16  34  ,clse-max12 cx12
05:10:16  35  ,clse-max14 cx14
05:10:16  36  ,clse-max16 cx16
05:10:16  37  ,clse-max18 cx18
05:10:16  38  -- Derive more attributes.
05:10:16  39  -- I want to use CORR() here to help SVM see the shape of the series.
05:10:16  40  -- But COVAR_POP is more stable:
05:10:16  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
05:10:16  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
05:10:16  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
05:10:16  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
05:10:16  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
05:10:16  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
05:10:16  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
05:10:16  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
05:10:16  49  -- Derive date related attributes:
05:10:16  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
05:10:16  51  ,0+TO_CHAR(ydate,'D')d
05:10:16  52  ,0+TO_CHAR(ydate,'W')w
05:10:16  53  -- mpm stands for minutes-past-midnight:
05:10:16  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
05:10:16  55  -- mph stands for minutes-past-hour:
05:10:16  56  ,0+TO_CHAR(ydate,'MI')mph
05:10:16  57  FROM svm6102
05:10:16  58  ORDER BY ydate
05:10:16  59  /

Table created.

Elapsed: 00:00:02.46
05:10:18 SQL> 
05:10:18 SQL> -- rpt
05:10:18 SQL> 
05:10:18 SQL> SELECT
05:10:18   2  pair
05:10:18   3  ,COUNT(pair)
05:10:18   4  ,MIN(clse),MAX(clse)
05:10:18   5  ,MIN(ydate),MAX(ydate)
05:10:18   6  FROM svm6122
05:10:18   7  GROUP BY pair
05:10:18   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_usd       19838    1.29735	   1.4273 2010-09-27 05:15:01 2010-12-31 05:05:00

Elapsed: 00:00:00.04
05:10:18 SQL> 
05:10:18 SQL> -- Prepare for derivation of NTILE based params:
05:10:18 SQL> 
05:10:18 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.54
05:10:19 SQL> CREATE TABLE svm6142 COMPRESS AS
05:10:19   2  SELECT
05:10:19   3  pair
05:10:19   4  ,ydate
05:10:19   5  ,prdate
05:10:19   6  ,clse
05:10:19   7  ,g6
05:10:19   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
05:10:19   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
05:10:19  10  ,CASE WHEN trend IS NULL THEN 1
05:10:19  11  	    WHEN trend =0      THEN 1
05:10:19  12  	    ELSE trend END trend
05:10:19  13  ,cm4
05:10:19  14  ,cm6
05:10:19  15  ,cm8
05:10:19  16  ,cm10
05:10:19  17  ,cm12
05:10:19  18  ,cm14
05:10:19  19  ,cm16
05:10:19  20  ,cm18
05:10:19  21  --
05:10:19  22  ,ca4
05:10:19  23  ,ca6
05:10:19  24  ,ca8
05:10:19  25  ,ca10
05:10:19  26  ,ca12
05:10:19  27  ,ca14
05:10:19  28  ,ca16
05:10:19  29  ,ca18
05:10:19  30  --
05:10:19  31  ,cx4
05:10:19  32  ,cx6
05:10:19  33  ,cx8
05:10:19  34  ,cx10
05:10:19  35  ,cx12
05:10:19  36  ,cx14
05:10:19  37  ,cx16
05:10:19  38  ,cx18
05:10:19  39  --
05:10:19  40  ,crr4
05:10:19  41  ,crr6
05:10:19  42  ,crr8
05:10:19  43  ,crr10
05:10:19  44  ,crr12
05:10:19  45  ,crr14
05:10:19  46  ,crr16
05:10:19  47  ,crr18
05:10:19  48  --
05:10:19  49  ,hh
05:10:19  50  ,d
05:10:19  51  ,w
05:10:19  52  ,mpm
05:10:19  53  ,mph
05:10:19  54  FROM svm6122
05:10:19  55  ORDER BY ydate
05:10:19  56  /

Table created.

Elapsed: 00:00:00.43
05:10:19 SQL> 
05:10:19 SQL> -- rpt
05:10:19 SQL> 
05:10:19 SQL> SELECT
05:10:19   2  pair
05:10:19   3  ,trend
05:10:19   4  ,gatt
05:10:19   5  ,COUNT(pair)
05:10:19   6  ,AVG(g6)
05:10:19   7  FROM svm6142
05:10:19   8  GROUP BY pair,trend,gatt
05:10:19   9  ORDER BY pair,trend,gatt
05:10:19  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6062 -.00309861
eur_usd 	-1 up	      3751 .004491612
eur_usd 	 1 nup	      6078 -.00307667
eur_usd 	 1 up	      3875 .005028161
eur_usd 	 1		72

Elapsed: 00:00:00.04
05:10:19 SQL> 
05:10:19 SQL> 
05:10:19 SQL> -- Derive NTILE based params:
05:10:19 SQL> 
05:10:19 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.04
05:10:19 SQL> CREATE TABLE svm6162 COMPRESS AS
05:10:19   2  SELECT
05:10:19   3  pair
05:10:19   4  ,ydate
05:10:19   5  ,prdate
05:10:19   6  ,clse
05:10:19   7  ,g6
05:10:19   8  ,gatt
05:10:19   9  ,gattn
05:10:19  10  ,trend
05:10:19  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
05:10:19  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
05:10:19  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
05:10:19  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
05:10:19  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
05:10:19  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
05:10:19  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
05:10:19  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
05:10:19  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
05:10:19  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
05:10:19  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
05:10:19  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
05:10:19  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
05:10:19  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
05:10:19  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
05:10:19  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
05:10:19  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
05:10:19  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
05:10:19  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
05:10:19  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
05:10:19  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
05:10:19  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
05:10:19  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
05:10:19  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
05:10:19  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
05:10:19  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
05:10:19  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
05:10:19  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
05:10:19  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
05:10:19  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
05:10:19  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
05:10:19  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
05:10:19  43  ,hh  att32
05:10:19  44  ,d   att33
05:10:19  45  ,w   att34
05:10:19  46  ,mpm att35
05:10:19  47  ,mph att36
05:10:19  48  ,trend att37
05:10:19  49  FROM svm6142
05:10:19  50  ORDER BY ydate
05:10:19  51  /

Table created.

Elapsed: 00:00:04.75
05:10:24 SQL> 
05:10:24 SQL> -- rpt
05:10:24 SQL> 
05:10:24 SQL> SELECT
05:10:24   2  pair
05:10:24   3  ,trend
05:10:24   4  ,gatt
05:10:24   5  ,COUNT(pair)
05:10:24   6  ,AVG(g6)
05:10:24   7  FROM svm6162
05:10:24   8  GROUP BY pair,trend,gatt
05:10:24   9  ORDER BY pair,trend,gatt
05:10:24  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6062 -.00309861
eur_usd 	-1 up	      3751 .004491612
eur_usd 	 1 nup	      6078 -.00307667
eur_usd 	 1 up	      3875 .005028161
eur_usd 	 1		72

Elapsed: 00:00:00.03
05:10:24 SQL> 
05:10:24 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.25
05:10:24 SQL> CREATE TABLE modsrc COMPRESS AS
05:10:24   2  SELECT
05:10:24   3  pair
05:10:24   4  ,ydate
05:10:24   5  ,prdate
05:10:24   6  ,trend
05:10:24   7  ,g6
05:10:24   8  ,gatt
05:10:24   9  ,gattn
05:10:24  10  FROM svm6162
05:10:24  11  /

Table created.

Elapsed: 00:00:00.08
05:10:24 SQL> 
05:10:24 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
05:10:25 SQL> 
05:10:25 SQL> DROP   TABLE eur_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
05:10:25 SQL> CREATE TABLE eur_ms610 COMPRESS AS
05:10:25   2  SELECT
05:10:25   3  ydate
05:10:25   4  ,trend eur_trend
05:10:25   5  ,g6    eur_g6
05:10:25   6  ,gatt  eur_gatt
05:10:25   7  ,gattn eur_gattn
05:10:25   8  FROM modsrc
05:10:25   9  /

Table created.

Elapsed: 00:00:00.06
05:10:25 SQL> 
05:10:25 SQL> ANALYZE TABLE eur_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
05:10:25 SQL> 
05:10:25 SQL> -- I need a copy of the attributes:
05:10:25 SQL> 
05:10:25 SQL> 
05:10:25 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.04
05:10:25 SQL> CREATE TABLE eur_att COMPRESS AS
05:10:25   2  SELECT
05:10:25   3  ydate
05:10:25   4  ,att00 eur_att00
05:10:25   5  ,att01 eur_att01
05:10:25   6  ,att02 eur_att02
05:10:25   7  ,att03 eur_att03
05:10:25   8  ,att04 eur_att04
05:10:25   9  ,att05 eur_att05
05:10:25  10  ,att06 eur_att06
05:10:25  11  ,att07 eur_att07
05:10:25  12  ,att08 eur_att08
05:10:25  13  ,att09 eur_att09
05:10:25  14  ,att10 eur_att10
05:10:25  15  ,att11 eur_att11
05:10:25  16  ,att12 eur_att12
05:10:25  17  ,att13 eur_att13
05:10:25  18  ,att14 eur_att14
05:10:25  19  ,att15 eur_att15
05:10:25  20  ,att16 eur_att16
05:10:25  21  ,att17 eur_att17
05:10:25  22  ,att18 eur_att18
05:10:25  23  ,att19 eur_att19
05:10:25  24  ,att20 eur_att20
05:10:25  25  ,att21 eur_att21
05:10:25  26  ,att22 eur_att22
05:10:25  27  ,att23 eur_att23
05:10:25  28  ,att24 eur_att24
05:10:25  29  ,att25 eur_att25
05:10:25  30  ,att26 eur_att26
05:10:25  31  ,att27 eur_att27
05:10:25  32  ,att28 eur_att28
05:10:25  33  ,att29 eur_att29
05:10:25  34  ,att30 eur_att30
05:10:25  35  ,att31 eur_att31
05:10:25  36  ,att32 eur_att32
05:10:25  37  ,att33 eur_att33
05:10:25  38  ,att34 eur_att34
05:10:25  39  ,att35 eur_att35
05:10:25  40  ,att36 eur_att36
05:10:25  41  ,att37 eur_att37
05:10:25  42  FROM svm6162
05:10:25  43  /

Table created.

Elapsed: 00:00:00.17
05:10:25 SQL> 
05:10:25 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
05:10:25 SQL> 
05:10:25 SQL> -- rpt
05:10:25 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19838

Elapsed: 00:00:00.97
05:10:26 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     19838

Elapsed: 00:00:00.01
05:10:26 SQL> 
05:10:26 SQL> --
05:10:26 SQL> -- aud610.sql
05:10:26 SQL> --
05:10:26 SQL> 
05:10:26 SQL> -- Creates views and tables for backtesting a forex SVM strategy
05:10:26 SQL> 
05:10:26 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.43
05:10:27 SQL> 
05:10:27 SQL> -- I created di5min here:
05:10:27 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
05:10:27 SQL> 
05:10:27 SQL> CREATE OR REPLACE VIEW svm6102 AS
05:10:27   2  SELECT
05:10:27   3  pair
05:10:27   4  ,ydate
05:10:27   5  ,prdate
05:10:27   6  ,rownum rnum -- acts as t in my time-series
05:10:27   7  ,clse
05:10:27   8  -- Derive a bunch of attributes from clse, the latest price:
05:10:27   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
05:10:27  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
05:10:27  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
05:10:27  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
05:10:27  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
05:10:27  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
05:10:27  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
05:10:27  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
05:10:27  17  --
05:10:27  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
05:10:27  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
05:10:27  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
05:10:27  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
05:10:27  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
05:10:27  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
05:10:27  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
05:10:27  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
05:10:27  26  --
05:10:27  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
05:10:27  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
05:10:27  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
05:10:27  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
05:10:27  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
05:10:27  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
05:10:27  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
05:10:27  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
05:10:27  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
05:10:27  36  FROM di5min WHERE pair LIKE'%aud%'
05:10:27  37  AND ydate > sysdate - 95
05:10:27  38  ORDER BY ydate
05:10:27  39  /

View created.

Elapsed: 00:00:00.04
05:10:27 SQL> 
05:10:27 SQL> -- rpt
05:10:27 SQL> 
05:10:27 SQL> SELECT
05:10:27   2  pair
05:10:27   3  ,COUNT(pair)
05:10:27   4  ,MIN(clse),MAX(clse)
05:10:27   5  ,MIN(avg6),MAX(avg6)
05:10:27   6  ,MIN(ydate),MAX(ydate)
05:10:27   7  FROM svm6102
05:10:27   8  GROUP BY pair
05:10:27   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
aud_usd       19835	.95405	1.0195625 .957141438 1.01819366 2010-09-27 05:15:01 2010-12-31 05:05:00

Elapsed: 00:00:00.88
05:10:28 SQL> 
05:10:28 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
05:10:28 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.23
05:10:28 SQL> CREATE TABLE svm6122 COMPRESS AS
05:10:28   2  SELECT
05:10:28   3  pair
05:10:28   4  ,ydate
05:10:28   5  ,prdate
05:10:28   6  ,clse
05:10:28   7  -- g6 is important. I want to predict g6:
05:10:28   8  ,ld6 - clse g6
05:10:28   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
05:10:28  10  -- I want more attributes from the ones I derived above:
05:10:28  11  -- clse relation to moving-min
05:10:28  12  ,clse-min4  cm4
05:10:28  13  ,clse-min6  cm6
05:10:28  14  ,clse-min8  cm8
05:10:28  15  ,clse-min10 cm10
05:10:28  16  ,clse-min12 cm12
05:10:28  17  ,clse-min14 cm14
05:10:28  18  ,clse-min16 cm16
05:10:28  19  ,clse-min18 cm18
05:10:28  20  -- clse relation to moving-avg
05:10:28  21  ,clse-avg4  ca4
05:10:28  22  ,clse-avg6  ca6
05:10:28  23  ,clse-avg8  ca8
05:10:28  24  ,clse-avg10 ca10
05:10:28  25  ,clse-avg12 ca12
05:10:28  26  ,clse-avg14 ca14
05:10:28  27  ,clse-avg16 ca16
05:10:28  28  ,clse-avg18 ca18
05:10:28  29  -- clse relation to moving-max
05:10:28  30  ,clse-max4  cx4
05:10:28  31  ,clse-max6  cx6
05:10:28  32  ,clse-max8  cx8
05:10:28  33  ,clse-max10 cx10
05:10:28  34  ,clse-max12 cx12
05:10:28  35  ,clse-max14 cx14
05:10:28  36  ,clse-max16 cx16
05:10:28  37  ,clse-max18 cx18
05:10:28  38  -- Derive more attributes.
05:10:28  39  -- I want to use CORR() here to help SVM see the shape of the series.
05:10:28  40  -- But COVAR_POP is more stable:
05:10:28  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
05:10:28  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
05:10:28  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
05:10:28  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
05:10:28  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
05:10:28  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
05:10:28  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
05:10:28  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
05:10:28  49  -- Derive date related attributes:
05:10:28  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
05:10:28  51  ,0+TO_CHAR(ydate,'D')d
05:10:28  52  ,0+TO_CHAR(ydate,'W')w
05:10:28  53  -- mpm stands for minutes-past-midnight:
05:10:28  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
05:10:28  55  -- mph stands for minutes-past-hour:
05:10:28  56  ,0+TO_CHAR(ydate,'MI')mph
05:10:28  57  FROM svm6102
05:10:28  58  ORDER BY ydate
05:10:28  59  /

Table created.

Elapsed: 00:00:02.06
05:10:30 SQL> 
05:10:30 SQL> -- rpt
05:10:30 SQL> 
05:10:30 SQL> SELECT
05:10:30   2  pair
05:10:30   3  ,COUNT(pair)
05:10:30   4  ,MIN(clse),MAX(clse)
05:10:30   5  ,MIN(ydate),MAX(ydate)
05:10:30   6  FROM svm6122
05:10:30   7  GROUP BY pair
05:10:30   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
aud_usd       19835	.95405	1.0195625 2010-09-27 05:15:01 2010-12-31 05:05:00

Elapsed: 00:00:00.04
05:10:30 SQL> 
05:10:30 SQL> -- Prepare for derivation of NTILE based params:
05:10:30 SQL> 
05:10:30 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.25
05:10:30 SQL> CREATE TABLE svm6142 COMPRESS AS
05:10:30   2  SELECT
05:10:30   3  pair
05:10:30   4  ,ydate
05:10:30   5  ,prdate
05:10:30   6  ,clse
05:10:30   7  ,g6
05:10:30   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
05:10:30   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
05:10:30  10  ,CASE WHEN trend IS NULL THEN 1
05:10:30  11  	    WHEN trend =0      THEN 1
05:10:30  12  	    ELSE trend END trend
05:10:30  13  ,cm4
05:10:30  14  ,cm6
05:10:30  15  ,cm8
05:10:30  16  ,cm10
05:10:30  17  ,cm12
05:10:30  18  ,cm14
05:10:30  19  ,cm16
05:10:30  20  ,cm18
05:10:30  21  --
05:10:30  22  ,ca4
05:10:30  23  ,ca6
05:10:30  24  ,ca8
05:10:30  25  ,ca10
05:10:30  26  ,ca12
05:10:30  27  ,ca14
05:10:30  28  ,ca16
05:10:30  29  ,ca18
05:10:30  30  --
05:10:30  31  ,cx4
05:10:30  32  ,cx6
05:10:30  33  ,cx8
05:10:30  34  ,cx10
05:10:30  35  ,cx12
05:10:30  36  ,cx14
05:10:30  37  ,cx16
05:10:30  38  ,cx18
05:10:30  39  --
05:10:30  40  ,crr4
05:10:30  41  ,crr6
05:10:30  42  ,crr8
05:10:30  43  ,crr10
05:10:30  44  ,crr12
05:10:30  45  ,crr14
05:10:30  46  ,crr16
05:10:30  47  ,crr18
05:10:30  48  --
05:10:30  49  ,hh
05:10:30  50  ,d
05:10:30  51  ,w
05:10:30  52  ,mpm
05:10:30  53  ,mph
05:10:30  54  FROM svm6122
05:10:30  55  ORDER BY ydate
05:10:30  56  /

Table created.

Elapsed: 00:00:00.35
05:10:31 SQL> 
05:10:31 SQL> -- rpt
05:10:31 SQL> 
05:10:31 SQL> SELECT
05:10:31   2  pair
05:10:31   3  ,trend
05:10:31   4  ,gatt
05:10:31   5  ,COUNT(pair)
05:10:31   6  ,AVG(g6)
05:10:31   7  FROM svm6142
05:10:31   8  GROUP BY pair,trend,gatt
05:10:31   9  ORDER BY pair,trend,gatt
05:10:31  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5251 -.00212801
aud_usd 	-1 up	      3854  .00373184
aud_usd 	-1		22
aud_usd 	 1 nup	      6850  -.0020957
aud_usd 	 1 up	      3808  .00401441
aud_usd 	 1		50

6 rows selected.

Elapsed: 00:00:00.05
05:10:31 SQL> 
05:10:31 SQL> 
05:10:31 SQL> -- Derive NTILE based params:
05:10:31 SQL> 
05:10:31 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.13
05:10:31 SQL> CREATE TABLE svm6162 COMPRESS AS
05:10:31   2  SELECT
05:10:31   3  pair
05:10:31   4  ,ydate
05:10:31   5  ,prdate
05:10:31   6  ,clse
05:10:31   7  ,g6
05:10:31   8  ,gatt
05:10:31   9  ,gattn
05:10:31  10  ,trend
05:10:31  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
05:10:31  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
05:10:31  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
05:10:31  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
05:10:31  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
05:10:31  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
05:10:31  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
05:10:31  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
05:10:31  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
05:10:31  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
05:10:31  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
05:10:31  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
05:10:31  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
05:10:31  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
05:10:31  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
05:10:31  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
05:10:31  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
05:10:31  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
05:10:31  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
05:10:31  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
05:10:31  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
05:10:31  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
05:10:31  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
05:10:31  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
05:10:31  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
05:10:31  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
05:10:31  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
05:10:31  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
05:10:31  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
05:10:31  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
05:10:31  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
05:10:31  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
05:10:31  43  ,hh  att32
05:10:31  44  ,d   att33
05:10:31  45  ,w   att34
05:10:31  46  ,mpm att35
05:10:31  47  ,mph att36
05:10:31  48  ,trend att37
05:10:31  49  FROM svm6142
05:10:31  50  ORDER BY ydate
05:10:31  51  /

Table created.

Elapsed: 00:00:04.82
05:10:36 SQL> 
05:10:36 SQL> -- rpt
05:10:36 SQL> 
05:10:36 SQL> SELECT
05:10:36   2  pair
05:10:36   3  ,trend
05:10:36   4  ,gatt
05:10:36   5  ,COUNT(pair)
05:10:36   6  ,AVG(g6)
05:10:36   7  FROM svm6162
05:10:36   8  GROUP BY pair,trend,gatt
05:10:36   9  ORDER BY pair,trend,gatt
05:10:36  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5251 -.00212801
aud_usd 	-1 up	      3854  .00373184
aud_usd 	-1		22
aud_usd 	 1 nup	      6850  -.0020957
aud_usd 	 1 up	      3808  .00401441
aud_usd 	 1		50

6 rows selected.

Elapsed: 00:00:00.04
05:10:36 SQL> 
05:10:36 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.20
05:10:36 SQL> CREATE TABLE modsrc COMPRESS AS
05:10:36   2  SELECT
05:10:36   3  pair
05:10:36   4  ,ydate
05:10:36   5  ,prdate
05:10:36   6  ,trend
05:10:36   7  ,g6
05:10:36   8  ,gatt
05:10:36   9  ,gattn
05:10:36  10  FROM svm6162
05:10:36  11  /

Table created.

Elapsed: 00:00:00.08
05:10:36 SQL> 
05:10:36 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.30
05:10:36 SQL> 
05:10:36 SQL> DROP   TABLE aud_ms610 ;

Table dropped.

Elapsed: 00:00:00.13
05:10:36 SQL> CREATE TABLE aud_ms610 COMPRESS AS
05:10:36   2  SELECT
05:10:36   3  ydate
05:10:36   4  ,trend aud_trend
05:10:36   5  ,g6    aud_g6
05:10:36   6  ,gatt  aud_gatt
05:10:36   7  ,gattn aud_gattn
05:10:36   8  FROM modsrc
05:10:36   9  /

Table created.

Elapsed: 00:00:00.06
05:10:37 SQL> 
05:10:37 SQL> ANALYZE TABLE aud_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
05:10:37 SQL> 
05:10:37 SQL> -- I need a copy of the attributes:
05:10:37 SQL> 
05:10:37 SQL> 
05:10:37 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.05
05:10:37 SQL> CREATE TABLE aud_att COMPRESS AS
05:10:37   2  SELECT
05:10:37   3  ydate
05:10:37   4  ,att00 aud_att00
05:10:37   5  ,att01 aud_att01
05:10:37   6  ,att02 aud_att02
05:10:37   7  ,att03 aud_att03
05:10:37   8  ,att04 aud_att04
05:10:37   9  ,att05 aud_att05
05:10:37  10  ,att06 aud_att06
05:10:37  11  ,att07 aud_att07
05:10:37  12  ,att08 aud_att08
05:10:37  13  ,att09 aud_att09
05:10:37  14  ,att10 aud_att10
05:10:37  15  ,att11 aud_att11
05:10:37  16  ,att12 aud_att12
05:10:37  17  ,att13 aud_att13
05:10:37  18  ,att14 aud_att14
05:10:37  19  ,att15 aud_att15
05:10:37  20  ,att16 aud_att16
05:10:37  21  ,att17 aud_att17
05:10:37  22  ,att18 aud_att18
05:10:37  23  ,att19 aud_att19
05:10:37  24  ,att20 aud_att20
05:10:37  25  ,att21 aud_att21
05:10:37  26  ,att22 aud_att22
05:10:37  27  ,att23 aud_att23
05:10:37  28  ,att24 aud_att24
05:10:37  29  ,att25 aud_att25
05:10:37  30  ,att26 aud_att26
05:10:37  31  ,att27 aud_att27
05:10:37  32  ,att28 aud_att28
05:10:37  33  ,att29 aud_att29
05:10:37  34  ,att30 aud_att30
05:10:37  35  ,att31 aud_att31
05:10:37  36  ,att32 aud_att32
05:10:37  37  ,att33 aud_att33
05:10:37  38  ,att34 aud_att34
05:10:37  39  ,att35 aud_att35
05:10:37  40  ,att36 aud_att36
05:10:37  41  ,att37 aud_att37
05:10:37  42  FROM svm6162
05:10:37  43  /

Table created.

Elapsed: 00:00:00.61
05:10:37 SQL> 
05:10:37 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.52
05:10:38 SQL> 
05:10:38 SQL> -- rpt
05:10:38 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19835

Elapsed: 00:00:00.89
05:10:39 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     19835

Elapsed: 00:00:00.00
05:10:39 SQL> 
05:10:39 SQL> --
05:10:39 SQL> -- gbp610.sql
05:10:39 SQL> --
05:10:39 SQL> 
05:10:39 SQL> -- Creates views and tables for backtesting a forex SVM strategy
05:10:39 SQL> 
05:10:39 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.86
05:10:40 SQL> 
05:10:40 SQL> -- I created di5min here:
05:10:40 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
05:10:40 SQL> 
05:10:40 SQL> CREATE OR REPLACE VIEW svm6102 AS
05:10:40   2  SELECT
05:10:40   3  pair
05:10:40   4  ,ydate
05:10:40   5  ,prdate
05:10:40   6  ,rownum rnum -- acts as t in my time-series
05:10:40   7  ,clse
05:10:40   8  -- Derive a bunch of attributes from clse, the latest price:
05:10:40   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
05:10:40  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
05:10:40  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
05:10:40  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
05:10:40  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
05:10:40  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
05:10:40  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
05:10:40  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
05:10:40  17  --
05:10:40  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
05:10:40  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
05:10:40  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
05:10:40  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
05:10:40  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
05:10:40  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
05:10:40  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
05:10:40  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
05:10:40  26  --
05:10:40  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
05:10:40  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
05:10:40  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
05:10:40  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
05:10:40  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
05:10:40  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
05:10:40  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
05:10:40  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
05:10:40  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
05:10:40  36  FROM di5min WHERE pair LIKE'%gbp%'
05:10:40  37  AND ydate > sysdate - 95
05:10:40  38  ORDER BY ydate
05:10:40  39  /

View created.

Elapsed: 00:00:00.13
05:10:40 SQL> 
05:10:40 SQL> -- rpt
05:10:40 SQL> 
05:10:40 SQL> SELECT
05:10:40   2  pair
05:10:40   3  ,COUNT(pair)
05:10:40   4  ,MIN(clse),MAX(clse)
05:10:40   5  ,MIN(avg6),MAX(avg6)
05:10:40   6  ,MIN(ydate),MAX(ydate)
05:10:40   7  FROM svm6102
05:10:40   8  GROUP BY pair
05:10:40   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
gbp_usd       19837   1.535325	   1.6295 1.53696747 1.62716986 2010-09-27 05:15:01 2010-12-31 05:05:00

Elapsed: 00:00:00.89
05:10:41 SQL> 
05:10:41 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
05:10:41 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.18
05:10:41 SQL> CREATE TABLE svm6122 COMPRESS AS
05:10:41   2  SELECT
05:10:41   3  pair
05:10:41   4  ,ydate
05:10:41   5  ,prdate
05:10:41   6  ,clse
05:10:41   7  -- g6 is important. I want to predict g6:
05:10:41   8  ,ld6 - clse g6
05:10:41   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
05:10:41  10  -- I want more attributes from the ones I derived above:
05:10:41  11  -- clse relation to moving-min
05:10:41  12  ,clse-min4  cm4
05:10:41  13  ,clse-min6  cm6
05:10:41  14  ,clse-min8  cm8
05:10:41  15  ,clse-min10 cm10
05:10:41  16  ,clse-min12 cm12
05:10:41  17  ,clse-min14 cm14
05:10:41  18  ,clse-min16 cm16
05:10:41  19  ,clse-min18 cm18
05:10:41  20  -- clse relation to moving-avg
05:10:41  21  ,clse-avg4  ca4
05:10:41  22  ,clse-avg6  ca6
05:10:41  23  ,clse-avg8  ca8
05:10:41  24  ,clse-avg10 ca10
05:10:41  25  ,clse-avg12 ca12
05:10:41  26  ,clse-avg14 ca14
05:10:41  27  ,clse-avg16 ca16
05:10:41  28  ,clse-avg18 ca18
05:10:41  29  -- clse relation to moving-max
05:10:41  30  ,clse-max4  cx4
05:10:41  31  ,clse-max6  cx6
05:10:41  32  ,clse-max8  cx8
05:10:41  33  ,clse-max10 cx10
05:10:41  34  ,clse-max12 cx12
05:10:41  35  ,clse-max14 cx14
05:10:41  36  ,clse-max16 cx16
05:10:41  37  ,clse-max18 cx18
05:10:41  38  -- Derive more attributes.
05:10:41  39  -- I want to use CORR() here to help SVM see the shape of the series.
05:10:41  40  -- But COVAR_POP is more stable:
05:10:41  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
05:10:41  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
05:10:41  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
05:10:41  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
05:10:41  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
05:10:41  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
05:10:41  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
05:10:41  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
05:10:41  49  -- Derive date related attributes:
05:10:41  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
05:10:41  51  ,0+TO_CHAR(ydate,'D')d
05:10:41  52  ,0+TO_CHAR(ydate,'W')w
05:10:41  53  -- mpm stands for minutes-past-midnight:
05:10:41  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
05:10:41  55  -- mph stands for minutes-past-hour:
05:10:41  56  ,0+TO_CHAR(ydate,'MI')mph
05:10:41  57  FROM svm6102
05:10:41  58  ORDER BY ydate
05:10:41  59  /

Table created.

Elapsed: 00:00:02.11
05:10:43 SQL> 
05:10:43 SQL> -- rpt
05:10:43 SQL> 
05:10:43 SQL> SELECT
05:10:43   2  pair
05:10:43   3  ,COUNT(pair)
05:10:43   4  ,MIN(clse),MAX(clse)
05:10:43   5  ,MIN(ydate),MAX(ydate)
05:10:43   6  FROM svm6122
05:10:43   7  GROUP BY pair
05:10:43   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
gbp_usd       19837   1.535325	   1.6295 2010-09-27 05:15:01 2010-12-31 05:05:00

Elapsed: 00:00:00.04
05:10:43 SQL> 
05:10:43 SQL> -- Prepare for derivation of NTILE based params:
05:10:43 SQL> 
05:10:43 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.18
05:10:43 SQL> CREATE TABLE svm6142 COMPRESS AS
05:10:43   2  SELECT
05:10:43   3  pair
05:10:43   4  ,ydate
05:10:43   5  ,prdate
05:10:43   6  ,clse
05:10:43   7  ,g6
05:10:43   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
05:10:43   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
05:10:43  10  ,CASE WHEN trend IS NULL THEN 1
05:10:43  11  	    WHEN trend =0      THEN 1
05:10:43  12  	    ELSE trend END trend
05:10:43  13  ,cm4
05:10:43  14  ,cm6
05:10:43  15  ,cm8
05:10:43  16  ,cm10
05:10:43  17  ,cm12
05:10:43  18  ,cm14
05:10:43  19  ,cm16
05:10:43  20  ,cm18
05:10:43  21  --
05:10:43  22  ,ca4
05:10:43  23  ,ca6
05:10:43  24  ,ca8
05:10:43  25  ,ca10
05:10:43  26  ,ca12
05:10:43  27  ,ca14
05:10:43  28  ,ca16
05:10:43  29  ,ca18
05:10:43  30  --
05:10:43  31  ,cx4
05:10:43  32  ,cx6
05:10:43  33  ,cx8
05:10:43  34  ,cx10
05:10:43  35  ,cx12
05:10:43  36  ,cx14
05:10:43  37  ,cx16
05:10:43  38  ,cx18
05:10:43  39  --
05:10:43  40  ,crr4
05:10:43  41  ,crr6
05:10:43  42  ,crr8
05:10:43  43  ,crr10
05:10:43  44  ,crr12
05:10:43  45  ,crr14
05:10:43  46  ,crr16
05:10:43  47  ,crr18
05:10:43  48  --
05:10:43  49  ,hh
05:10:43  50  ,d
05:10:43  51  ,w
05:10:43  52  ,mpm
05:10:43  53  ,mph
05:10:43  54  FROM svm6122
05:10:43  55  ORDER BY ydate
05:10:43  56  /

Table created.

Elapsed: 00:00:00.36
05:10:44 SQL> 
05:10:44 SQL> -- rpt
05:10:44 SQL> 
05:10:44 SQL> SELECT
05:10:44   2  pair
05:10:44   3  ,trend
05:10:44   4  ,gatt
05:10:44   5  ,COUNT(pair)
05:10:44   6  ,AVG(g6)
05:10:44   7  FROM svm6142
05:10:44   8  GROUP BY pair,trend,gatt
05:10:44   9  ORDER BY pair,trend,gatt
05:10:44  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6344 -.00262441
gbp_usd 	-1 up	      3637 .004274945
gbp_usd 	 1 nup	      6287 -.00268105
gbp_usd 	 1 up	      3497 .004352438
gbp_usd 	 1		72

Elapsed: 00:00:00.04
05:10:44 SQL> 
05:10:44 SQL> 
05:10:44 SQL> -- Derive NTILE based params:
05:10:44 SQL> 
05:10:44 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.12
05:10:44 SQL> CREATE TABLE svm6162 COMPRESS AS
05:10:44   2  SELECT
05:10:44   3  pair
05:10:44   4  ,ydate
05:10:44   5  ,prdate
05:10:44   6  ,clse
05:10:44   7  ,g6
05:10:44   8  ,gatt
05:10:44   9  ,gattn
05:10:44  10  ,trend
05:10:44  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
05:10:44  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
05:10:44  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
05:10:44  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
05:10:44  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
05:10:44  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
05:10:44  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
05:10:44  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
05:10:44  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
05:10:44  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
05:10:44  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
05:10:44  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
05:10:44  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
05:10:44  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
05:10:44  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
05:10:44  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
05:10:44  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
05:10:44  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
05:10:44  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
05:10:44  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
05:10:44  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
05:10:44  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
05:10:44  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
05:10:44  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
05:10:44  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
05:10:44  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
05:10:44  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
05:10:44  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
05:10:44  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
05:10:44  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
05:10:44  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
05:10:44  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
05:10:44  43  ,hh  att32
05:10:44  44  ,d   att33
05:10:44  45  ,w   att34
05:10:44  46  ,mpm att35
05:10:44  47  ,mph att36
05:10:44  48  ,trend att37
05:10:44  49  FROM svm6142
05:10:44  50  ORDER BY ydate
05:10:44  51  /

Table created.

Elapsed: 00:00:04.79
05:10:48 SQL> 
05:10:48 SQL> -- rpt
05:10:48 SQL> 
05:10:48 SQL> SELECT
05:10:48   2  pair
05:10:48   3  ,trend
05:10:48   4  ,gatt
05:10:48   5  ,COUNT(pair)
05:10:48   6  ,AVG(g6)
05:10:48   7  FROM svm6162
05:10:48   8  GROUP BY pair,trend,gatt
05:10:48   9  ORDER BY pair,trend,gatt
05:10:48  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6344 -.00262441
gbp_usd 	-1 up	      3637 .004274945
gbp_usd 	 1 nup	      6287 -.00268105
gbp_usd 	 1 up	      3497 .004352438
gbp_usd 	 1		72

Elapsed: 00:00:00.04
05:10:49 SQL> 
05:10:49 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.16
05:10:49 SQL> CREATE TABLE modsrc COMPRESS AS
05:10:49   2  SELECT
05:10:49   3  pair
05:10:49   4  ,ydate
05:10:49   5  ,prdate
05:10:49   6  ,trend
05:10:49   7  ,g6
05:10:49   8  ,gatt
05:10:49   9  ,gattn
05:10:49  10  FROM svm6162
05:10:49  11  /

Table created.

Elapsed: 00:00:00.09
05:10:49 SQL> 
05:10:49 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
05:10:49 SQL> 
05:10:49 SQL> DROP   TABLE gbp_ms610 ;

Table dropped.

Elapsed: 00:00:00.07
05:10:49 SQL> CREATE TABLE gbp_ms610 COMPRESS AS
05:10:49   2  SELECT
05:10:49   3  ydate
05:10:49   4  ,trend gbp_trend
05:10:49   5  ,g6    gbp_g6
05:10:49   6  ,gatt  gbp_gatt
05:10:49   7  ,gattn gbp_gattn
05:10:49   8  FROM modsrc
05:10:49   9  /

Table created.

Elapsed: 00:00:00.06
05:10:49 SQL> 
05:10:49 SQL> ANALYZE TABLE gbp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
05:10:49 SQL> 
05:10:49 SQL> -- I need a copy of the attributes:
05:10:49 SQL> 
05:10:49 SQL> 
05:10:49 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.06
05:10:49 SQL> CREATE TABLE gbp_att COMPRESS AS
05:10:49   2  SELECT
05:10:49   3  ydate
05:10:49   4  ,att00 gbp_att00
05:10:49   5  ,att01 gbp_att01
05:10:49   6  ,att02 gbp_att02
05:10:49   7  ,att03 gbp_att03
05:10:49   8  ,att04 gbp_att04
05:10:49   9  ,att05 gbp_att05
05:10:49  10  ,att06 gbp_att06
05:10:49  11  ,att07 gbp_att07
05:10:49  12  ,att08 gbp_att08
05:10:49  13  ,att09 gbp_att09
05:10:49  14  ,att10 gbp_att10
05:10:49  15  ,att11 gbp_att11
05:10:49  16  ,att12 gbp_att12
05:10:49  17  ,att13 gbp_att13
05:10:49  18  ,att14 gbp_att14
05:10:49  19  ,att15 gbp_att15
05:10:49  20  ,att16 gbp_att16
05:10:49  21  ,att17 gbp_att17
05:10:49  22  ,att18 gbp_att18
05:10:49  23  ,att19 gbp_att19
05:10:49  24  ,att20 gbp_att20
05:10:49  25  ,att21 gbp_att21
05:10:49  26  ,att22 gbp_att22
05:10:49  27  ,att23 gbp_att23
05:10:49  28  ,att24 gbp_att24
05:10:49  29  ,att25 gbp_att25
05:10:49  30  ,att26 gbp_att26
05:10:49  31  ,att27 gbp_att27
05:10:49  32  ,att28 gbp_att28
05:10:49  33  ,att29 gbp_att29
05:10:49  34  ,att30 gbp_att30
05:10:49  35  ,att31 gbp_att31
05:10:49  36  ,att32 gbp_att32
05:10:49  37  ,att33 gbp_att33
05:10:49  38  ,att34 gbp_att34
05:10:49  39  ,att35 gbp_att35
05:10:49  40  ,att36 gbp_att36
05:10:49  41  ,att37 gbp_att37
05:10:49  42  FROM svm6162
05:10:49  43  /

Table created.

Elapsed: 00:00:00.17
05:10:49 SQL> 
05:10:49 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
05:10:50 SQL> 
05:10:50 SQL> -- rpt
05:10:50 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19837

Elapsed: 00:00:00.86
05:10:51 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     19837

Elapsed: 00:00:00.00
05:10:51 SQL> 
05:10:51 SQL> --
05:10:51 SQL> -- jpy610.sql
05:10:51 SQL> --
05:10:51 SQL> 
05:10:51 SQL> -- Creates views and tables for backtesting a forex SVM strategy
05:10:51 SQL> 
05:10:51 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.44
05:10:51 SQL> 
05:10:51 SQL> -- I created di5min here:
05:10:51 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
05:10:51 SQL> 
05:10:51 SQL> CREATE OR REPLACE VIEW svm6102 AS
05:10:51   2  SELECT
05:10:51   3  pair
05:10:51   4  ,ydate
05:10:51   5  ,prdate
05:10:51   6  ,rownum rnum -- acts as t in my time-series
05:10:51   7  ,clse
05:10:51   8  -- Derive a bunch of attributes from clse, the latest price:
05:10:51   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
05:10:51  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
05:10:51  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
05:10:51  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
05:10:51  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
05:10:51  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
05:10:51  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
05:10:51  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
05:10:51  17  --
05:10:51  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
05:10:51  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
05:10:51  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
05:10:51  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
05:10:51  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
05:10:51  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
05:10:51  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
05:10:51  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
05:10:51  26  --
05:10:51  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
05:10:51  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
05:10:51  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
05:10:51  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
05:10:51  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
05:10:51  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
05:10:51  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
05:10:51  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
05:10:51  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
05:10:51  36  FROM di5min WHERE pair LIKE'%jpy%'
05:10:51  37  AND ydate > sysdate - 95
05:10:51  38  ORDER BY ydate
05:10:51  39  /

View created.

Elapsed: 00:00:00.07
05:10:51 SQL> 
05:10:51 SQL> -- rpt
05:10:51 SQL> 
05:10:51 SQL> SELECT
05:10:51   2  pair
05:10:51   3  ,COUNT(pair)
05:10:51   4  ,MIN(clse),MAX(clse)
05:10:51   5  ,MIN(avg6),MAX(avg6)
05:10:51   6  ,MIN(ydate),MAX(ydate)
05:10:51   7  FROM svm6102
05:10:51   8  GROUP BY pair
05:10:51   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_jpy       19835	 80.25	   84.485 80.3595205 84.3105479 2010-09-27 05:15:01 2010-12-31 05:05:00

Elapsed: 00:00:00.93
05:10:52 SQL> 
05:10:52 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
05:10:52 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.49
05:10:53 SQL> CREATE TABLE svm6122 COMPRESS AS
05:10:53   2  SELECT
05:10:53   3  pair
05:10:53   4  ,ydate
05:10:53   5  ,prdate
05:10:53   6  ,clse
05:10:53   7  -- g6 is important. I want to predict g6:
05:10:53   8  ,ld6 - clse g6
05:10:53   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
05:10:53  10  -- I want more attributes from the ones I derived above:
05:10:53  11  -- clse relation to moving-min
05:10:53  12  ,clse-min4  cm4
05:10:53  13  ,clse-min6  cm6
05:10:53  14  ,clse-min8  cm8
05:10:53  15  ,clse-min10 cm10
05:10:53  16  ,clse-min12 cm12
05:10:53  17  ,clse-min14 cm14
05:10:53  18  ,clse-min16 cm16
05:10:53  19  ,clse-min18 cm18
05:10:53  20  -- clse relation to moving-avg
05:10:53  21  ,clse-avg4  ca4
05:10:53  22  ,clse-avg6  ca6
05:10:53  23  ,clse-avg8  ca8
05:10:53  24  ,clse-avg10 ca10
05:10:53  25  ,clse-avg12 ca12
05:10:53  26  ,clse-avg14 ca14
05:10:53  27  ,clse-avg16 ca16
05:10:53  28  ,clse-avg18 ca18
05:10:53  29  -- clse relation to moving-max
05:10:53  30  ,clse-max4  cx4
05:10:53  31  ,clse-max6  cx6
05:10:53  32  ,clse-max8  cx8
05:10:53  33  ,clse-max10 cx10
05:10:53  34  ,clse-max12 cx12
05:10:53  35  ,clse-max14 cx14
05:10:53  36  ,clse-max16 cx16
05:10:53  37  ,clse-max18 cx18
05:10:53  38  -- Derive more attributes.
05:10:53  39  -- I want to use CORR() here to help SVM see the shape of the series.
05:10:53  40  -- But COVAR_POP is more stable:
05:10:53  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
05:10:53  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
05:10:53  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
05:10:53  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
05:10:53  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
05:10:53  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
05:10:53  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
05:10:53  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
05:10:53  49  -- Derive date related attributes:
05:10:53  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
05:10:53  51  ,0+TO_CHAR(ydate,'D')d
05:10:53  52  ,0+TO_CHAR(ydate,'W')w
05:10:53  53  -- mpm stands for minutes-past-midnight:
05:10:53  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
05:10:53  55  -- mph stands for minutes-past-hour:
05:10:53  56  ,0+TO_CHAR(ydate,'MI')mph
05:10:53  57  FROM svm6102
05:10:53  58  ORDER BY ydate
05:10:53  59  /

Table created.

Elapsed: 00:00:02.08
05:10:55 SQL> 
05:10:55 SQL> -- rpt
05:10:55 SQL> 
05:10:55 SQL> SELECT
05:10:55   2  pair
05:10:55   3  ,COUNT(pair)
05:10:55   4  ,MIN(clse),MAX(clse)
05:10:55   5  ,MIN(ydate),MAX(ydate)
05:10:55   6  FROM svm6122
05:10:55   7  GROUP BY pair
05:10:55   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_jpy       19835	 80.25	   84.485 2010-09-27 05:15:01 2010-12-31 05:05:00

Elapsed: 00:00:00.05
05:10:55 SQL> 
05:10:55 SQL> -- Prepare for derivation of NTILE based params:
05:10:55 SQL> 
05:10:55 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.26
05:10:55 SQL> CREATE TABLE svm6142 COMPRESS AS
05:10:55   2  SELECT
05:10:55   3  pair
05:10:55   4  ,ydate
05:10:55   5  ,prdate
05:10:55   6  ,clse
05:10:55   7  ,g6
05:10:55   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
05:10:55   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
05:10:55  10  ,CASE WHEN trend IS NULL THEN 1
05:10:55  11  	    WHEN trend =0      THEN 1
05:10:55  12  	    ELSE trend END trend
05:10:55  13  ,cm4
05:10:55  14  ,cm6
05:10:55  15  ,cm8
05:10:55  16  ,cm10
05:10:55  17  ,cm12
05:10:55  18  ,cm14
05:10:55  19  ,cm16
05:10:55  20  ,cm18
05:10:55  21  --
05:10:55  22  ,ca4
05:10:55  23  ,ca6
05:10:55  24  ,ca8
05:10:55  25  ,ca10
05:10:55  26  ,ca12
05:10:55  27  ,ca14
05:10:55  28  ,ca16
05:10:55  29  ,ca18
05:10:55  30  --
05:10:55  31  ,cx4
05:10:55  32  ,cx6
05:10:55  33  ,cx8
05:10:55  34  ,cx10
05:10:55  35  ,cx12
05:10:55  36  ,cx14
05:10:55  37  ,cx16
05:10:55  38  ,cx18
05:10:55  39  --
05:10:55  40  ,crr4
05:10:55  41  ,crr6
05:10:55  42  ,crr8
05:10:55  43  ,crr10
05:10:55  44  ,crr12
05:10:55  45  ,crr14
05:10:55  46  ,crr16
05:10:55  47  ,crr18
05:10:55  48  --
05:10:55  49  ,hh
05:10:55  50  ,d
05:10:55  51  ,w
05:10:55  52  ,mpm
05:10:55  53  ,mph
05:10:55  54  FROM svm6122
05:10:55  55  ORDER BY ydate
05:10:55  56  /

Table created.

Elapsed: 00:00:00.37
05:10:55 SQL> 
05:10:55 SQL> -- rpt
05:10:55 SQL> 
05:10:55 SQL> SELECT
05:10:55   2  pair
05:10:55   3  ,trend
05:10:55   4  ,gatt
05:10:55   5  ,COUNT(pair)
05:10:55   6  ,AVG(g6)
05:10:55   7  FROM svm6142
05:10:55   8  GROUP BY pair,trend,gatt
05:10:55   9  ORDER BY pair,trend,gatt
05:10:55  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5350 -.16604903
usd_jpy 	-1 up	      5042  .16231312
usd_jpy 	-1		72
usd_jpy 	 1 nup	      5220 -.15540125
usd_jpy 	 1 up	      4151  .16523858

Elapsed: 00:00:00.04
05:10:56 SQL> 
05:10:56 SQL> 
05:10:56 SQL> -- Derive NTILE based params:
05:10:56 SQL> 
05:10:56 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.14
05:10:56 SQL> CREATE TABLE svm6162 COMPRESS AS
05:10:56   2  SELECT
05:10:56   3  pair
05:10:56   4  ,ydate
05:10:56   5  ,prdate
05:10:56   6  ,clse
05:10:56   7  ,g6
05:10:56   8  ,gatt
05:10:56   9  ,gattn
05:10:56  10  ,trend
05:10:56  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
05:10:56  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
05:10:56  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
05:10:56  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
05:10:56  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
05:10:56  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
05:10:56  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
05:10:56  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
05:10:56  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
05:10:56  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
05:10:56  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
05:10:56  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
05:10:56  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
05:10:56  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
05:10:56  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
05:10:56  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
05:10:56  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
05:10:56  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
05:10:56  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
05:10:56  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
05:10:56  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
05:10:56  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
05:10:56  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
05:10:56  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
05:10:56  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
05:10:56  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
05:10:56  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
05:10:56  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
05:10:56  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
05:10:56  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
05:10:56  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
05:10:56  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
05:10:56  43  ,hh  att32
05:10:56  44  ,d   att33
05:10:56  45  ,w   att34
05:10:56  46  ,mpm att35
05:10:56  47  ,mph att36
05:10:56  48  ,trend att37
05:10:56  49  FROM svm6142
05:10:56  50  ORDER BY ydate
05:10:56  51  /

Table created.

Elapsed: 00:00:04.84
05:11:01 SQL> 
05:11:01 SQL> -- rpt
05:11:01 SQL> 
05:11:01 SQL> SELECT
05:11:01   2  pair
05:11:01   3  ,trend
05:11:01   4  ,gatt
05:11:01   5  ,COUNT(pair)
05:11:01   6  ,AVG(g6)
05:11:01   7  FROM svm6162
05:11:01   8  GROUP BY pair,trend,gatt
05:11:01   9  ORDER BY pair,trend,gatt
05:11:01  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5350 -.16604903
usd_jpy 	-1 up	      5042  .16231312
usd_jpy 	-1		72
usd_jpy 	 1 nup	      5220 -.15540125
usd_jpy 	 1 up	      4151  .16523858

Elapsed: 00:00:00.03
05:11:01 SQL> 
05:11:01 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.33
05:11:01 SQL> CREATE TABLE modsrc COMPRESS AS
05:11:01   2  SELECT
05:11:01   3  pair
05:11:01   4  ,ydate
05:11:01   5  ,prdate
05:11:01   6  ,trend
05:11:01   7  ,g6
05:11:01   8  ,gatt
05:11:01   9  ,gattn
05:11:01  10  FROM svm6162
05:11:01  11  /

Table created.

Elapsed: 00:00:00.08
05:11:01 SQL> 
05:11:01 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
05:11:01 SQL> 
05:11:01 SQL> DROP   TABLE jpy_ms610 ;

Table dropped.

Elapsed: 00:00:00.06
05:11:01 SQL> CREATE TABLE jpy_ms610 COMPRESS AS
05:11:01   2  SELECT
05:11:01   3  ydate
05:11:01   4  ,trend jpy_trend
05:11:01   5  ,g6    jpy_g6
05:11:01   6  ,gatt  jpy_gatt
05:11:01   7  ,gattn jpy_gattn
05:11:01   8  FROM modsrc
05:11:01   9  /

Table created.

Elapsed: 00:00:00.07
05:11:01 SQL> 
05:11:01 SQL> ANALYZE TABLE jpy_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
05:11:01 SQL> 
05:11:01 SQL> -- I need a copy of the attributes:
05:11:01 SQL> 
05:11:01 SQL> 
05:11:01 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.05
05:11:01 SQL> CREATE TABLE jpy_att COMPRESS AS
05:11:01   2  SELECT
05:11:01   3  ydate
05:11:01   4  ,att00 jpy_att00
05:11:01   5  ,att01 jpy_att01
05:11:01   6  ,att02 jpy_att02
05:11:01   7  ,att03 jpy_att03
05:11:01   8  ,att04 jpy_att04
05:11:01   9  ,att05 jpy_att05
05:11:01  10  ,att06 jpy_att06
05:11:01  11  ,att07 jpy_att07
05:11:01  12  ,att08 jpy_att08
05:11:01  13  ,att09 jpy_att09
05:11:01  14  ,att10 jpy_att10
05:11:01  15  ,att11 jpy_att11
05:11:01  16  ,att12 jpy_att12
05:11:01  17  ,att13 jpy_att13
05:11:01  18  ,att14 jpy_att14
05:11:01  19  ,att15 jpy_att15
05:11:01  20  ,att16 jpy_att16
05:11:01  21  ,att17 jpy_att17
05:11:01  22  ,att18 jpy_att18
05:11:01  23  ,att19 jpy_att19
05:11:01  24  ,att20 jpy_att20
05:11:01  25  ,att21 jpy_att21
05:11:01  26  ,att22 jpy_att22
05:11:01  27  ,att23 jpy_att23
05:11:01  28  ,att24 jpy_att24
05:11:01  29  ,att25 jpy_att25
05:11:01  30  ,att26 jpy_att26
05:11:01  31  ,att27 jpy_att27
05:11:01  32  ,att28 jpy_att28
05:11:01  33  ,att29 jpy_att29
05:11:01  34  ,att30 jpy_att30
05:11:01  35  ,att31 jpy_att31
05:11:01  36  ,att32 jpy_att32
05:11:01  37  ,att33 jpy_att33
05:11:01  38  ,att34 jpy_att34
05:11:01  39  ,att35 jpy_att35
05:11:01  40  ,att36 jpy_att36
05:11:01  41  ,att37 jpy_att37
05:11:01  42  FROM svm6162
05:11:01  43  /

Table created.

Elapsed: 00:00:00.17
05:11:02 SQL> 
05:11:02 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
05:11:02 SQL> 
05:11:02 SQL> -- rpt
05:11:02 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19835

Elapsed: 00:00:00.90
05:11:03 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     19835

Elapsed: 00:00:00.00
05:11:03 SQL> 
05:11:03 SQL> --
05:11:03 SQL> -- cad610.sql
05:11:03 SQL> --
05:11:03 SQL> 
05:11:03 SQL> -- Creates views and tables for backtesting a forex SVM strategy
05:11:03 SQL> 
05:11:03 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.43
05:11:03 SQL> 
05:11:03 SQL> -- I created di5min here:
05:11:03 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
05:11:03 SQL> 
05:11:03 SQL> CREATE OR REPLACE VIEW svm6102 AS
05:11:03   2  SELECT
05:11:03   3  pair
05:11:03   4  ,ydate
05:11:03   5  ,prdate
05:11:03   6  ,rownum rnum -- acts as t in my time-series
05:11:03   7  ,clse
05:11:03   8  -- Derive a bunch of attributes from clse, the latest price:
05:11:03   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
05:11:03  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
05:11:03  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
05:11:03  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
05:11:03  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
05:11:03  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
05:11:03  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
05:11:03  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
05:11:03  17  --
05:11:03  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
05:11:03  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
05:11:03  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
05:11:03  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
05:11:03  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
05:11:03  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
05:11:03  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
05:11:03  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
05:11:03  26  --
05:11:03  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
05:11:03  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
05:11:03  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
05:11:03  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
05:11:03  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
05:11:03  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
05:11:03  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
05:11:03  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
05:11:03  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
05:11:03  36  FROM di5min WHERE pair LIKE'%cad%'
05:11:03  37  AND ydate > sysdate - 95
05:11:03  38  ORDER BY ydate
05:11:03  39  /

View created.

Elapsed: 00:00:00.04
05:11:03 SQL> 
05:11:03 SQL> -- rpt
05:11:03 SQL> 
05:11:03 SQL> SELECT
05:11:03   2  pair
05:11:03   3  ,COUNT(pair)
05:11:03   4  ,MIN(clse),MAX(clse)
05:11:03   5  ,MIN(avg6),MAX(avg6)
05:11:03   6  ,MIN(ydate),MAX(ydate)
05:11:03   7  FROM svm6102
05:11:03   8  GROUP BY pair
05:11:03   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_cad       19835	.99755	    1.036 .998845205 1.03336849 2010-09-27 05:15:01 2010-12-31 05:05:00

Elapsed: 00:00:00.83
05:11:04 SQL> 
05:11:04 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
05:11:04 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.25
05:11:05 SQL> CREATE TABLE svm6122 COMPRESS AS
05:11:05   2  SELECT
05:11:05   3  pair
05:11:05   4  ,ydate
05:11:05   5  ,prdate
05:11:05   6  ,clse
05:11:05   7  -- g6 is important. I want to predict g6:
05:11:05   8  ,ld6 - clse g6
05:11:05   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
05:11:05  10  -- I want more attributes from the ones I derived above:
05:11:05  11  -- clse relation to moving-min
05:11:05  12  ,clse-min4  cm4
05:11:05  13  ,clse-min6  cm6
05:11:05  14  ,clse-min8  cm8
05:11:05  15  ,clse-min10 cm10
05:11:05  16  ,clse-min12 cm12
05:11:05  17  ,clse-min14 cm14
05:11:05  18  ,clse-min16 cm16
05:11:05  19  ,clse-min18 cm18
05:11:05  20  -- clse relation to moving-avg
05:11:05  21  ,clse-avg4  ca4
05:11:05  22  ,clse-avg6  ca6
05:11:05  23  ,clse-avg8  ca8
05:11:05  24  ,clse-avg10 ca10
05:11:05  25  ,clse-avg12 ca12
05:11:05  26  ,clse-avg14 ca14
05:11:05  27  ,clse-avg16 ca16
05:11:05  28  ,clse-avg18 ca18
05:11:05  29  -- clse relation to moving-max
05:11:05  30  ,clse-max4  cx4
05:11:05  31  ,clse-max6  cx6
05:11:05  32  ,clse-max8  cx8
05:11:05  33  ,clse-max10 cx10
05:11:05  34  ,clse-max12 cx12
05:11:05  35  ,clse-max14 cx14
05:11:05  36  ,clse-max16 cx16
05:11:05  37  ,clse-max18 cx18
05:11:05  38  -- Derive more attributes.
05:11:05  39  -- I want to use CORR() here to help SVM see the shape of the series.
05:11:05  40  -- But COVAR_POP is more stable:
05:11:05  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
05:11:05  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
05:11:05  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
05:11:05  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
05:11:05  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
05:11:05  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
05:11:05  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
05:11:05  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
05:11:05  49  -- Derive date related attributes:
05:11:05  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
05:11:05  51  ,0+TO_CHAR(ydate,'D')d
05:11:05  52  ,0+TO_CHAR(ydate,'W')w
05:11:05  53  -- mpm stands for minutes-past-midnight:
05:11:05  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
05:11:05  55  -- mph stands for minutes-past-hour:
05:11:05  56  ,0+TO_CHAR(ydate,'MI')mph
05:11:05  57  FROM svm6102
05:11:05  58  ORDER BY ydate
05:11:05  59  /

Table created.

Elapsed: 00:00:02.04
05:11:07 SQL> 
05:11:07 SQL> -- rpt
05:11:07 SQL> 
05:11:07 SQL> SELECT
05:11:07   2  pair
05:11:07   3  ,COUNT(pair)
05:11:07   4  ,MIN(clse),MAX(clse)
05:11:07   5  ,MIN(ydate),MAX(ydate)
05:11:07   6  FROM svm6122
05:11:07   7  GROUP BY pair
05:11:07   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_cad       19835	.99755	    1.036 2010-09-27 05:15:01 2010-12-31 05:05:00

Elapsed: 00:00:00.04
05:11:07 SQL> 
05:11:07 SQL> -- Prepare for derivation of NTILE based params:
05:11:07 SQL> 
05:11:07 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.94
05:11:08 SQL> CREATE TABLE svm6142 COMPRESS AS
05:11:08   2  SELECT
05:11:08   3  pair
05:11:08   4  ,ydate
05:11:08   5  ,prdate
05:11:08   6  ,clse
05:11:08   7  ,g6
05:11:08   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
05:11:08   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
05:11:08  10  ,CASE WHEN trend IS NULL THEN 1
05:11:08  11  	    WHEN trend =0      THEN 1
05:11:08  12  	    ELSE trend END trend
05:11:08  13  ,cm4
05:11:08  14  ,cm6
05:11:08  15  ,cm8
05:11:08  16  ,cm10
05:11:08  17  ,cm12
05:11:08  18  ,cm14
05:11:08  19  ,cm16
05:11:08  20  ,cm18
05:11:08  21  --
05:11:08  22  ,ca4
05:11:08  23  ,ca6
05:11:08  24  ,ca8
05:11:08  25  ,ca10
05:11:08  26  ,ca12
05:11:08  27  ,ca14
05:11:08  28  ,ca16
05:11:08  29  ,ca18
05:11:08  30  --
05:11:08  31  ,cx4
05:11:08  32  ,cx6
05:11:08  33  ,cx8
05:11:08  34  ,cx10
05:11:08  35  ,cx12
05:11:08  36  ,cx14
05:11:08  37  ,cx16
05:11:08  38  ,cx18
05:11:08  39  --
05:11:08  40  ,crr4
05:11:08  41  ,crr6
05:11:08  42  ,crr8
05:11:08  43  ,crr10
05:11:08  44  ,crr12
05:11:08  45  ,crr14
05:11:08  46  ,crr16
05:11:08  47  ,crr18
05:11:08  48  --
05:11:08  49  ,hh
05:11:08  50  ,d
05:11:08  51  ,w
05:11:08  52  ,mpm
05:11:08  53  ,mph
05:11:08  54  FROM svm6122
05:11:08  55  ORDER BY ydate
05:11:08  56  /

Table created.

Elapsed: 00:00:00.36
05:11:08 SQL> 
05:11:08 SQL> -- rpt
05:11:08 SQL> 
05:11:08 SQL> SELECT
05:11:08   2  pair
05:11:08   3  ,trend
05:11:08   4  ,gatt
05:11:08   5  ,COUNT(pair)
05:11:08   6  ,AVG(g6)
05:11:08   7  FROM svm6142
05:11:08   8  GROUP BY pair,trend,gatt
05:11:08   9  ORDER BY pair,trend,gatt
05:11:08  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7338 -.00130443
usd_cad 	-1 up	      3149 .003081308
usd_cad 	-1		38
usd_cad 	 1 nup	      6781 -.00159889
usd_cad 	 1 up	      2495 .003594222
usd_cad 	 1		34

6 rows selected.

Elapsed: 00:00:00.04
05:11:08 SQL> 
05:11:08 SQL> 
05:11:08 SQL> -- Derive NTILE based params:
05:11:08 SQL> 
05:11:08 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.17
05:11:08 SQL> CREATE TABLE svm6162 COMPRESS AS
05:11:08   2  SELECT
05:11:08   3  pair
05:11:08   4  ,ydate
05:11:08   5  ,prdate
05:11:08   6  ,clse
05:11:08   7  ,g6
05:11:08   8  ,gatt
05:11:08   9  ,gattn
05:11:08  10  ,trend
05:11:08  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
05:11:08  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
05:11:08  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
05:11:08  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
05:11:08  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
05:11:08  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
05:11:08  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
05:11:08  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
05:11:08  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
05:11:08  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
05:11:08  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
05:11:08  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
05:11:08  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
05:11:08  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
05:11:08  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
05:11:08  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
05:11:08  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
05:11:08  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
05:11:08  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
05:11:08  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
05:11:08  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
05:11:08  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
05:11:08  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
05:11:08  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
05:11:08  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
05:11:08  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
05:11:08  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
05:11:08  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
05:11:08  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
05:11:08  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
05:11:08  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
05:11:08  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
05:11:08  43  ,hh  att32
05:11:08  44  ,d   att33
05:11:08  45  ,w   att34
05:11:08  46  ,mpm att35
05:11:08  47  ,mph att36
05:11:08  48  ,trend att37
05:11:08  49  FROM svm6142
05:11:08  50  ORDER BY ydate
05:11:08  51  /

Table created.

Elapsed: 00:00:04.82
05:11:13 SQL> 
05:11:13 SQL> -- rpt
05:11:13 SQL> 
05:11:13 SQL> SELECT
05:11:13   2  pair
05:11:13   3  ,trend
05:11:13   4  ,gatt
05:11:13   5  ,COUNT(pair)
05:11:13   6  ,AVG(g6)
05:11:13   7  FROM svm6162
05:11:13   8  GROUP BY pair,trend,gatt
05:11:13   9  ORDER BY pair,trend,gatt
05:11:13  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7338 -.00130443
usd_cad 	-1 up	      3149 .003081308
usd_cad 	-1		38
usd_cad 	 1 nup	      6781 -.00159889
usd_cad 	 1 up	      2495 .003594222
usd_cad 	 1		34

6 rows selected.

Elapsed: 00:00:00.03
05:11:13 SQL> 
05:11:13 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.15
05:11:13 SQL> CREATE TABLE modsrc COMPRESS AS
05:11:13   2  SELECT
05:11:13   3  pair
05:11:13   4  ,ydate
05:11:13   5  ,prdate
05:11:13   6  ,trend
05:11:13   7  ,g6
05:11:13   8  ,gatt
05:11:13   9  ,gattn
05:11:13  10  FROM svm6162
05:11:13  11  /

Table created.

Elapsed: 00:00:00.08
05:11:13 SQL> 
05:11:13 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
05:11:13 SQL> 
05:11:13 SQL> DROP   TABLE cad_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
05:11:13 SQL> CREATE TABLE cad_ms610 COMPRESS AS
05:11:13   2  SELECT
05:11:13   3  ydate
05:11:13   4  ,trend cad_trend
05:11:13   5  ,g6    cad_g6
05:11:13   6  ,gatt  cad_gatt
05:11:13   7  ,gattn cad_gattn
05:11:13   8  FROM modsrc
05:11:13   9  /

Table created.

Elapsed: 00:00:00.08
05:11:14 SQL> 
05:11:14 SQL> ANALYZE TABLE cad_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
05:11:14 SQL> 
05:11:14 SQL> -- I need a copy of the attributes:
05:11:14 SQL> 
05:11:14 SQL> 
05:11:14 SQL> DROP   TABLE cad_att;

Table dropped.

Elapsed: 00:00:00.13
05:11:14 SQL> CREATE TABLE cad_att COMPRESS AS
05:11:14   2  SELECT
05:11:14   3  ydate
05:11:14   4  ,att00 cad_att00
05:11:14   5  ,att01 cad_att01
05:11:14   6  ,att02 cad_att02
05:11:14   7  ,att03 cad_att03
05:11:14   8  ,att04 cad_att04
05:11:14   9  ,att05 cad_att05
05:11:14  10  ,att06 cad_att06
05:11:14  11  ,att07 cad_att07
05:11:14  12  ,att08 cad_att08
05:11:14  13  ,att09 cad_att09
05:11:14  14  ,att10 cad_att10
05:11:14  15  ,att11 cad_att11
05:11:14  16  ,att12 cad_att12
05:11:14  17  ,att13 cad_att13
05:11:14  18  ,att14 cad_att14
05:11:14  19  ,att15 cad_att15
05:11:14  20  ,att16 cad_att16
05:11:14  21  ,att17 cad_att17
05:11:14  22  ,att18 cad_att18
05:11:14  23  ,att19 cad_att19
05:11:14  24  ,att20 cad_att20
05:11:14  25  ,att21 cad_att21
05:11:14  26  ,att22 cad_att22
05:11:14  27  ,att23 cad_att23
05:11:14  28  ,att24 cad_att24
05:11:14  29  ,att25 cad_att25
05:11:14  30  ,att26 cad_att26
05:11:14  31  ,att27 cad_att27
05:11:14  32  ,att28 cad_att28
05:11:14  33  ,att29 cad_att29
05:11:14  34  ,att30 cad_att30
05:11:14  35  ,att31 cad_att31
05:11:14  36  ,att32 cad_att32
05:11:14  37  ,att33 cad_att33
05:11:14  38  ,att34 cad_att34
05:11:14  39  ,att35 cad_att35
05:11:14  40  ,att36 cad_att36
05:11:14  41  ,att37 cad_att37
05:11:14  42  FROM svm6162
05:11:14  43  /

Table created.

Elapsed: 00:00:00.21
05:11:14 SQL> 
05:11:14 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
05:11:14 SQL> 
05:11:14 SQL> -- rpt
05:11:14 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19835

Elapsed: 00:00:00.83
05:11:15 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
     19835

Elapsed: 00:00:00.00
05:11:15 SQL> 
05:11:15 SQL> --
05:11:15 SQL> -- chf610.sql
05:11:15 SQL> --
05:11:15 SQL> 
05:11:15 SQL> -- Creates views and tables for backtesting a forex SVM strategy
05:11:15 SQL> 
05:11:15 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.36
05:11:16 SQL> 
05:11:16 SQL> -- I created di5min here:
05:11:16 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
05:11:16 SQL> 
05:11:16 SQL> CREATE OR REPLACE VIEW svm6102 AS
05:11:16   2  SELECT
05:11:16   3  pair
05:11:16   4  ,ydate
05:11:16   5  ,prdate
05:11:16   6  ,rownum rnum -- acts as t in my time-series
05:11:16   7  ,clse
05:11:16   8  -- Derive a bunch of attributes from clse, the latest price:
05:11:16   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
05:11:16  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
05:11:16  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
05:11:16  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
05:11:16  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
05:11:16  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
05:11:16  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
05:11:16  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
05:11:16  17  --
05:11:16  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
05:11:16  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
05:11:16  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
05:11:16  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
05:11:16  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
05:11:16  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
05:11:16  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
05:11:16  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
05:11:16  26  --
05:11:16  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
05:11:16  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
05:11:16  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
05:11:16  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
05:11:16  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
05:11:16  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
05:11:16  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
05:11:16  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
05:11:16  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
05:11:16  36  FROM di5min WHERE pair LIKE'%chf%'
05:11:16  37  AND ydate > sysdate - 95
05:11:16  38  ORDER BY ydate
05:11:16  39  /

View created.

Elapsed: 00:00:00.04
05:11:16 SQL> 
05:11:16 SQL> -- rpt
05:11:16 SQL> 
05:11:16 SQL> SELECT
05:11:16   2  pair
05:11:16   3  ,COUNT(pair)
05:11:16   4  ,MIN(clse),MAX(clse)
05:11:16   5  ,MIN(avg6),MAX(avg6)
05:11:16   6  ,MIN(ydate),MAX(ydate)
05:11:16   7  FROM svm6102
05:11:16   8  GROUP BY pair
05:11:16   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_chf       19838    .934325	  1.00635 .935186301 1.00498151 2010-09-27 05:15:01 2010-12-31 05:05:00

Elapsed: 00:00:00.89
05:11:17 SQL> 
05:11:17 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
05:11:17 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.18
05:11:17 SQL> CREATE TABLE svm6122 COMPRESS AS
05:11:17   2  SELECT
05:11:17   3  pair
05:11:17   4  ,ydate
05:11:17   5  ,prdate
05:11:17   6  ,clse
05:11:17   7  -- g6 is important. I want to predict g6:
05:11:17   8  ,ld6 - clse g6
05:11:17   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
05:11:17  10  -- I want more attributes from the ones I derived above:
05:11:17  11  -- clse relation to moving-min
05:11:17  12  ,clse-min4  cm4
05:11:17  13  ,clse-min6  cm6
05:11:17  14  ,clse-min8  cm8
05:11:17  15  ,clse-min10 cm10
05:11:17  16  ,clse-min12 cm12
05:11:17  17  ,clse-min14 cm14
05:11:17  18  ,clse-min16 cm16
05:11:17  19  ,clse-min18 cm18
05:11:17  20  -- clse relation to moving-avg
05:11:17  21  ,clse-avg4  ca4
05:11:17  22  ,clse-avg6  ca6
05:11:17  23  ,clse-avg8  ca8
05:11:17  24  ,clse-avg10 ca10
05:11:17  25  ,clse-avg12 ca12
05:11:17  26  ,clse-avg14 ca14
05:11:17  27  ,clse-avg16 ca16
05:11:17  28  ,clse-avg18 ca18
05:11:17  29  -- clse relation to moving-max
05:11:17  30  ,clse-max4  cx4
05:11:17  31  ,clse-max6  cx6
05:11:17  32  ,clse-max8  cx8
05:11:17  33  ,clse-max10 cx10
05:11:17  34  ,clse-max12 cx12
05:11:17  35  ,clse-max14 cx14
05:11:17  36  ,clse-max16 cx16
05:11:17  37  ,clse-max18 cx18
05:11:17  38  -- Derive more attributes.
05:11:17  39  -- I want to use CORR() here to help SVM see the shape of the series.
05:11:17  40  -- But COVAR_POP is more stable:
05:11:17  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
05:11:17  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
05:11:17  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
05:11:17  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
05:11:17  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
05:11:17  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
05:11:17  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
05:11:17  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
05:11:17  49  -- Derive date related attributes:
05:11:17  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
05:11:17  51  ,0+TO_CHAR(ydate,'D')d
05:11:17  52  ,0+TO_CHAR(ydate,'W')w
05:11:17  53  -- mpm stands for minutes-past-midnight:
05:11:17  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
05:11:17  55  -- mph stands for minutes-past-hour:
05:11:17  56  ,0+TO_CHAR(ydate,'MI')mph
05:11:17  57  FROM svm6102
05:11:17  58  ORDER BY ydate
05:11:17  59  /

Table created.

Elapsed: 00:00:02.06
05:11:19 SQL> 
05:11:19 SQL> -- rpt
05:11:19 SQL> 
05:11:19 SQL> SELECT
05:11:19   2  pair
05:11:19   3  ,COUNT(pair)
05:11:19   4  ,MIN(clse),MAX(clse)
05:11:19   5  ,MIN(ydate),MAX(ydate)
05:11:19   6  FROM svm6122
05:11:19   7  GROUP BY pair
05:11:19   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_chf       19838    .934325	  1.00635 2010-09-27 05:15:01 2010-12-31 05:05:00

Elapsed: 00:00:00.03
05:11:19 SQL> 
05:11:19 SQL> -- Prepare for derivation of NTILE based params:
05:11:19 SQL> 
05:11:19 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.23
05:11:19 SQL> CREATE TABLE svm6142 COMPRESS AS
05:11:19   2  SELECT
05:11:19   3  pair
05:11:19   4  ,ydate
05:11:19   5  ,prdate
05:11:19   6  ,clse
05:11:19   7  ,g6
05:11:19   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
05:11:19   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
05:11:19  10  ,CASE WHEN trend IS NULL THEN 1
05:11:19  11  	    WHEN trend =0      THEN 1
05:11:19  12  	    ELSE trend END trend
05:11:19  13  ,cm4
05:11:19  14  ,cm6
05:11:19  15  ,cm8
05:11:19  16  ,cm10
05:11:19  17  ,cm12
05:11:19  18  ,cm14
05:11:19  19  ,cm16
05:11:19  20  ,cm18
05:11:19  21  --
05:11:19  22  ,ca4
05:11:19  23  ,ca6
05:11:19  24  ,ca8
05:11:19  25  ,ca10
05:11:19  26  ,ca12
05:11:19  27  ,ca14
05:11:19  28  ,ca16
05:11:19  29  ,ca18
05:11:19  30  --
05:11:19  31  ,cx4
05:11:19  32  ,cx6
05:11:19  33  ,cx8
05:11:19  34  ,cx10
05:11:19  35  ,cx12
05:11:19  36  ,cx14
05:11:19  37  ,cx16
05:11:19  38  ,cx18
05:11:19  39  --
05:11:19  40  ,crr4
05:11:19  41  ,crr6
05:11:19  42  ,crr8
05:11:19  43  ,crr10
05:11:19  44  ,crr12
05:11:19  45  ,crr14
05:11:19  46  ,crr16
05:11:19  47  ,crr18
05:11:19  48  --
05:11:19  49  ,hh
05:11:19  50  ,d
05:11:19  51  ,w
05:11:19  52  ,mpm
05:11:19  53  ,mph
05:11:19  54  FROM svm6122
05:11:19  55  ORDER BY ydate
05:11:19  56  /

Table created.

Elapsed: 00:00:00.37
05:11:19 SQL> 
05:11:19 SQL> -- rpt
05:11:19 SQL> 
05:11:19 SQL> SELECT
05:11:19   2  pair
05:11:19   3  ,trend
05:11:19   4  ,gatt
05:11:19   5  ,COUNT(pair)
05:11:19   6  ,AVG(g6)
05:11:19   7  FROM svm6142
05:11:19   8  GROUP BY pair,trend,gatt
05:11:19   9  ORDER BY pair,trend,gatt
05:11:19  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7328 -.00197161
usd_chf 	-1 up	      3206 .003883063
usd_chf 	-1		39
usd_chf 	 1 nup	      6677 -.00164167
usd_chf 	 1 up	      2555 .003693704
usd_chf 	 1		33

6 rows selected.

Elapsed: 00:00:00.03
05:11:20 SQL> 
05:11:20 SQL> 
05:11:20 SQL> -- Derive NTILE based params:
05:11:20 SQL> 
05:11:20 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.13
05:11:20 SQL> CREATE TABLE svm6162 COMPRESS AS
05:11:20   2  SELECT
05:11:20   3  pair
05:11:20   4  ,ydate
05:11:20   5  ,prdate
05:11:20   6  ,clse
05:11:20   7  ,g6
05:11:20   8  ,gatt
05:11:20   9  ,gattn
05:11:20  10  ,trend
05:11:20  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
05:11:20  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
05:11:20  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
05:11:20  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
05:11:20  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
05:11:20  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
05:11:20  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
05:11:20  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
05:11:20  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
05:11:20  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
05:11:20  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
05:11:20  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
05:11:20  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
05:11:20  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
05:11:20  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
05:11:20  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
05:11:20  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
05:11:20  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
05:11:20  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
05:11:20  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
05:11:20  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
05:11:20  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
05:11:20  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
05:11:20  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
05:11:20  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
05:11:20  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
05:11:20  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
05:11:20  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
05:11:20  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
05:11:20  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
05:11:20  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
05:11:20  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
05:11:20  43  ,hh  att32
05:11:20  44  ,d   att33
05:11:20  45  ,w   att34
05:11:20  46  ,mpm att35
05:11:20  47  ,mph att36
05:11:20  48  ,trend att37
05:11:20  49  FROM svm6142
05:11:20  50  ORDER BY ydate
05:11:20  51  /

Table created.

Elapsed: 00:00:04.85
05:11:25 SQL> 
05:11:25 SQL> -- rpt
05:11:25 SQL> 
05:11:25 SQL> SELECT
05:11:25   2  pair
05:11:25   3  ,trend
05:11:25   4  ,gatt
05:11:25   5  ,COUNT(pair)
05:11:25   6  ,AVG(g6)
05:11:25   7  FROM svm6162
05:11:25   8  GROUP BY pair,trend,gatt
05:11:25   9  ORDER BY pair,trend,gatt
05:11:25  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7328 -.00197161
usd_chf 	-1 up	      3206 .003883063
usd_chf 	-1		39
usd_chf 	 1 nup	      6677 -.00164167
usd_chf 	 1 up	      2555 .003693704
usd_chf 	 1		33

6 rows selected.

Elapsed: 00:00:00.02
05:11:25 SQL> 
05:11:25 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.17
05:11:25 SQL> CREATE TABLE modsrc COMPRESS AS
05:11:25   2  SELECT
05:11:25   3  pair
05:11:25   4  ,ydate
05:11:25   5  ,prdate
05:11:25   6  ,trend
05:11:25   7  ,g6
05:11:25   8  ,gatt
05:11:25   9  ,gattn
05:11:25  10  FROM svm6162
05:11:25  11  /

Table created.

Elapsed: 00:00:00.09
05:11:25 SQL> 
05:11:25 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.26
05:11:25 SQL> 
05:11:25 SQL> DROP   TABLE chf_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
05:11:25 SQL> CREATE TABLE chf_ms610 COMPRESS AS
05:11:25   2  SELECT
05:11:25   3  ydate
05:11:25   4  ,trend chf_trend
05:11:25   5  ,g6    chf_g6
05:11:25   6  ,gatt  chf_gatt
05:11:25   7  ,gattn chf_gattn
05:11:25   8  FROM modsrc
05:11:25   9  /

Table created.

Elapsed: 00:00:00.06
05:11:25 SQL> 
05:11:25 SQL> ANALYZE TABLE chf_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
05:11:25 SQL> 
05:11:25 SQL> -- I need a copy of the attributes:
05:11:25 SQL> 
05:11:25 SQL> 
05:11:25 SQL> DROP   TABLE chf_att;

Table dropped.

Elapsed: 00:00:00.04
05:11:25 SQL> CREATE TABLE chf_att COMPRESS AS
05:11:25   2  SELECT
05:11:25   3  ydate
05:11:25   4  ,att00 chf_att00
05:11:25   5  ,att01 chf_att01
05:11:25   6  ,att02 chf_att02
05:11:25   7  ,att03 chf_att03
05:11:25   8  ,att04 chf_att04
05:11:25   9  ,att05 chf_att05
05:11:25  10  ,att06 chf_att06
05:11:25  11  ,att07 chf_att07
05:11:25  12  ,att08 chf_att08
05:11:25  13  ,att09 chf_att09
05:11:25  14  ,att10 chf_att10
05:11:25  15  ,att11 chf_att11
05:11:25  16  ,att12 chf_att12
05:11:25  17  ,att13 chf_att13
05:11:25  18  ,att14 chf_att14
05:11:25  19  ,att15 chf_att15
05:11:25  20  ,att16 chf_att16
05:11:25  21  ,att17 chf_att17
05:11:25  22  ,att18 chf_att18
05:11:25  23  ,att19 chf_att19
05:11:25  24  ,att20 chf_att20
05:11:25  25  ,att21 chf_att21
05:11:25  26  ,att22 chf_att22
05:11:25  27  ,att23 chf_att23
05:11:25  28  ,att24 chf_att24
05:11:25  29  ,att25 chf_att25
05:11:25  30  ,att26 chf_att26
05:11:25  31  ,att27 chf_att27
05:11:25  32  ,att28 chf_att28
05:11:25  33  ,att29 chf_att29
05:11:25  34  ,att30 chf_att30
05:11:25  35  ,att31 chf_att31
05:11:25  36  ,att32 chf_att32
05:11:25  37  ,att33 chf_att33
05:11:25  38  ,att34 chf_att34
05:11:25  39  ,att35 chf_att35
05:11:25  40  ,att36 chf_att36
05:11:25  41  ,att37 chf_att37
05:11:25  42  FROM svm6162
05:11:25  43  /

Table created.

Elapsed: 00:00:00.20
05:11:26 SQL> 
05:11:26 SQL> ANALYZE TABLE chf_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.48
05:11:26 SQL> 
05:11:26 SQL> -- rpt
05:11:26 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19838

Elapsed: 00:00:00.84
05:11:27 SQL> SELECT COUNT(*)FROM chf_att;

  COUNT(*)
----------
     19838

Elapsed: 00:00:00.00
05:11:27 SQL> 
05:11:27 SQL> --
05:11:27 SQL> -- ech610.sql
05:11:27 SQL> --
05:11:27 SQL> 
05:11:27 SQL> -- Creates views and tables for backtesting a forex SVM strategy
05:11:27 SQL> 
05:11:27 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.40
05:11:27 SQL> 
05:11:27 SQL> -- I created di5min here:
05:11:27 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
05:11:27 SQL> 
05:11:27 SQL> CREATE OR REPLACE VIEW svm6102 AS
05:11:27   2  SELECT
05:11:27   3  pair
05:11:27   4  ,ydate
05:11:27   5  ,prdate
05:11:27   6  ,rownum rnum -- acts as t in my time-series
05:11:27   7  ,clse
05:11:27   8  -- Derive a bunch of attributes from clse, the latest price:
05:11:27   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
05:11:27  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
05:11:27  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
05:11:27  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
05:11:27  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
05:11:27  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
05:11:27  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
05:11:27  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
05:11:27  17  --
05:11:27  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
05:11:27  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
05:11:27  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
05:11:27  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
05:11:27  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
05:11:27  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
05:11:27  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
05:11:27  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
05:11:27  26  --
05:11:27  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
05:11:27  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
05:11:27  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
05:11:27  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
05:11:27  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
05:11:27  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
05:11:27  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
05:11:27  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
05:11:27  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
05:11:27  36  FROM di5min WHERE pair LIKE'%ech%'
05:11:27  37  AND ydate > sysdate - 95
05:11:27  38  ORDER BY ydate
05:11:27  39  /

View created.

Elapsed: 00:00:00.04
05:11:27 SQL> 
05:11:27 SQL> -- rpt
05:11:27 SQL> 
05:11:27 SQL> SELECT
05:11:27   2  pair
05:11:27   3  ,COUNT(pair)
05:11:27   4  ,MIN(clse),MAX(clse)
05:11:27   5  ,MIN(avg6),MAX(avg6)
05:11:27   6  ,MIN(ydate),MAX(ydate)
05:11:27   7  FROM svm6102
05:11:27   8  GROUP BY pair
05:11:27   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ech_usd       19837 1.24213032 1.38284305 1.24319868 1.37986485 2010-09-27 05:15:01 2010-12-31 05:05:00

Elapsed: 00:00:00.81
05:11:28 SQL> 
05:11:28 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
05:11:28 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.19
05:11:28 SQL> CREATE TABLE svm6122 COMPRESS AS
05:11:28   2  SELECT
05:11:28   3  pair
05:11:28   4  ,ydate
05:11:28   5  ,prdate
05:11:28   6  ,clse
05:11:28   7  -- g6 is important. I want to predict g6:
05:11:28   8  ,ld6 - clse g6
05:11:28   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
05:11:28  10  -- I want more attributes from the ones I derived above:
05:11:28  11  -- clse relation to moving-min
05:11:28  12  ,clse-min4  cm4
05:11:28  13  ,clse-min6  cm6
05:11:28  14  ,clse-min8  cm8
05:11:28  15  ,clse-min10 cm10
05:11:28  16  ,clse-min12 cm12
05:11:28  17  ,clse-min14 cm14
05:11:28  18  ,clse-min16 cm16
05:11:28  19  ,clse-min18 cm18
05:11:28  20  -- clse relation to moving-avg
05:11:28  21  ,clse-avg4  ca4
05:11:28  22  ,clse-avg6  ca6
05:11:28  23  ,clse-avg8  ca8
05:11:28  24  ,clse-avg10 ca10
05:11:28  25  ,clse-avg12 ca12
05:11:28  26  ,clse-avg14 ca14
05:11:28  27  ,clse-avg16 ca16
05:11:28  28  ,clse-avg18 ca18
05:11:28  29  -- clse relation to moving-max
05:11:28  30  ,clse-max4  cx4
05:11:28  31  ,clse-max6  cx6
05:11:28  32  ,clse-max8  cx8
05:11:28  33  ,clse-max10 cx10
05:11:28  34  ,clse-max12 cx12
05:11:28  35  ,clse-max14 cx14
05:11:28  36  ,clse-max16 cx16
05:11:28  37  ,clse-max18 cx18
05:11:28  38  -- Derive more attributes.
05:11:28  39  -- I want to use CORR() here to help SVM see the shape of the series.
05:11:28  40  -- But COVAR_POP is more stable:
05:11:28  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
05:11:28  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
05:11:28  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
05:11:28  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
05:11:28  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
05:11:28  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
05:11:28  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
05:11:28  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
05:11:28  49  -- Derive date related attributes:
05:11:28  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
05:11:28  51  ,0+TO_CHAR(ydate,'D')d
05:11:28  52  ,0+TO_CHAR(ydate,'W')w
05:11:28  53  -- mpm stands for minutes-past-midnight:
05:11:28  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
05:11:28  55  -- mph stands for minutes-past-hour:
05:11:28  56  ,0+TO_CHAR(ydate,'MI')mph
05:11:28  57  FROM svm6102
05:11:28  58  ORDER BY ydate
05:11:28  59  /

Table created.

Elapsed: 00:00:02.05
05:11:30 SQL> 
05:11:30 SQL> -- rpt
05:11:30 SQL> 
05:11:30 SQL> SELECT
05:11:30   2  pair
05:11:30   3  ,COUNT(pair)
05:11:30   4  ,MIN(clse),MAX(clse)
05:11:30   5  ,MIN(ydate),MAX(ydate)
05:11:30   6  FROM svm6122
05:11:30   7  GROUP BY pair
05:11:30   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ech_usd       19837 1.24213032 1.38284305 2010-09-27 05:15:01 2010-12-31 05:05:00

Elapsed: 00:00:00.03
05:11:30 SQL> 
05:11:30 SQL> -- Prepare for derivation of NTILE based params:
05:11:30 SQL> 
05:11:30 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.21
05:11:31 SQL> CREATE TABLE svm6142 COMPRESS AS
05:11:31   2  SELECT
05:11:31   3  pair
05:11:31   4  ,ydate
05:11:31   5  ,prdate
05:11:31   6  ,clse
05:11:31   7  ,g6
05:11:31   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
05:11:31   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
05:11:31  10  ,CASE WHEN trend IS NULL THEN 1
05:11:31  11  	    WHEN trend =0      THEN 1
05:11:31  12  	    ELSE trend END trend
05:11:31  13  ,cm4
05:11:31  14  ,cm6
05:11:31  15  ,cm8
05:11:31  16  ,cm10
05:11:31  17  ,cm12
05:11:31  18  ,cm14
05:11:31  19  ,cm16
05:11:31  20  ,cm18
05:11:31  21  --
05:11:31  22  ,ca4
05:11:31  23  ,ca6
05:11:31  24  ,ca8
05:11:31  25  ,ca10
05:11:31  26  ,ca12
05:11:31  27  ,ca14
05:11:31  28  ,ca16
05:11:31  29  ,ca18
05:11:31  30  --
05:11:31  31  ,cx4
05:11:31  32  ,cx6
05:11:31  33  ,cx8
05:11:31  34  ,cx10
05:11:31  35  ,cx12
05:11:31  36  ,cx14
05:11:31  37  ,cx16
05:11:31  38  ,cx18
05:11:31  39  --
05:11:31  40  ,crr4
05:11:31  41  ,crr6
05:11:31  42  ,crr8
05:11:31  43  ,crr10
05:11:31  44  ,crr12
05:11:31  45  ,crr14
05:11:31  46  ,crr16
05:11:31  47  ,crr18
05:11:31  48  --
05:11:31  49  ,hh
05:11:31  50  ,d
05:11:31  51  ,w
05:11:31  52  ,mpm
05:11:31  53  ,mph
05:11:31  54  FROM svm6122
05:11:31  55  ORDER BY ydate
05:11:31  56  /

Table created.

Elapsed: 00:00:00.41
05:11:31 SQL> 
05:11:31 SQL> -- rpt
05:11:31 SQL> 
05:11:31 SQL> SELECT
05:11:31   2  pair
05:11:31   3  ,trend
05:11:31   4  ,gatt
05:11:31   5  ,COUNT(pair)
05:11:31   6  ,AVG(g6)
05:11:31   7  FROM svm6142
05:11:31   8  GROUP BY pair,trend,gatt
05:11:31   9  ORDER BY pair,trend,gatt
05:11:31  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6672 -.00219095
ech_usd 	-1 up	      3663 .003539978
ech_usd 	-1		28
ech_usd 	 1 nup	      6551 -.00231595
ech_usd 	 1 up	      2879 .003821989
ech_usd 	 1		44

6 rows selected.

Elapsed: 00:00:00.03
05:11:31 SQL> 
05:11:31 SQL> 
05:11:31 SQL> -- Derive NTILE based params:
05:11:31 SQL> 
05:11:31 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.14
05:11:31 SQL> CREATE TABLE svm6162 COMPRESS AS
05:11:31   2  SELECT
05:11:31   3  pair
05:11:31   4  ,ydate
05:11:31   5  ,prdate
05:11:31   6  ,clse
05:11:31   7  ,g6
05:11:31   8  ,gatt
05:11:31   9  ,gattn
05:11:31  10  ,trend
05:11:31  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
05:11:31  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
05:11:31  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
05:11:31  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
05:11:31  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
05:11:31  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
05:11:31  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
05:11:31  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
05:11:31  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
05:11:31  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
05:11:31  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
05:11:31  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
05:11:31  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
05:11:31  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
05:11:31  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
05:11:31  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
05:11:31  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
05:11:31  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
05:11:31  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
05:11:31  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
05:11:31  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
05:11:31  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
05:11:31  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
05:11:31  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
05:11:31  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
05:11:31  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
05:11:31  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
05:11:31  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
05:11:31  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
05:11:31  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
05:11:31  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
05:11:31  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
05:11:31  43  ,hh  att32
05:11:31  44  ,d   att33
05:11:31  45  ,w   att34
05:11:31  46  ,mpm att35
05:11:31  47  ,mph att36
05:11:31  48  ,trend att37
05:11:31  49  FROM svm6142
05:11:31  50  ORDER BY ydate
05:11:31  51  /

Table created.

Elapsed: 00:00:04.92
05:11:36 SQL> 
05:11:36 SQL> -- rpt
05:11:36 SQL> 
05:11:36 SQL> SELECT
05:11:36   2  pair
05:11:36   3  ,trend
05:11:36   4  ,gatt
05:11:36   5  ,COUNT(pair)
05:11:36   6  ,AVG(g6)
05:11:36   7  FROM svm6162
05:11:36   8  GROUP BY pair,trend,gatt
05:11:36   9  ORDER BY pair,trend,gatt
05:11:36  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6672 -.00219095
ech_usd 	-1 up	      3663 .003539978
ech_usd 	-1		28
ech_usd 	 1 nup	      6551 -.00231595
ech_usd 	 1 up	      2879 .003821989
ech_usd 	 1		44

6 rows selected.

Elapsed: 00:00:00.03
05:11:36 SQL> 
05:11:36 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.14
05:11:36 SQL> CREATE TABLE modsrc COMPRESS AS
05:11:36   2  SELECT
05:11:36   3  pair
05:11:36   4  ,ydate
05:11:36   5  ,prdate
05:11:36   6  ,trend
05:11:36   7  ,g6
05:11:36   8  ,gatt
05:11:36   9  ,gattn
05:11:36  10  FROM svm6162
05:11:36  11  /

Table created.

Elapsed: 00:00:00.10
05:11:36 SQL> 
05:11:36 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
05:11:37 SQL> 
05:11:37 SQL> DROP   TABLE ech_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
05:11:37 SQL> CREATE TABLE ech_ms610 COMPRESS AS
05:11:37   2  SELECT
05:11:37   3  ydate
05:11:37   4  ,trend ech_trend
05:11:37   5  ,g6    ech_g6
05:11:37   6  ,gatt  ech_gatt
05:11:37   7  ,gattn ech_gattn
05:11:37   8  FROM modsrc
05:11:37   9  /

Table created.

Elapsed: 00:00:00.07
05:11:37 SQL> 
05:11:37 SQL> ANALYZE TABLE ech_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
05:11:37 SQL> 
05:11:37 SQL> -- I need a copy of the attributes:
05:11:37 SQL> 
05:11:37 SQL> 
05:11:37 SQL> DROP   TABLE ech_att;

Table dropped.

Elapsed: 00:00:00.94
05:11:38 SQL> CREATE TABLE ech_att COMPRESS AS
05:11:38   2  SELECT
05:11:38   3  ydate
05:11:38   4  ,att00 ech_att00
05:11:38   5  ,att01 ech_att01
05:11:38   6  ,att02 ech_att02
05:11:38   7  ,att03 ech_att03
05:11:38   8  ,att04 ech_att04
05:11:38   9  ,att05 ech_att05
05:11:38  10  ,att06 ech_att06
05:11:38  11  ,att07 ech_att07
05:11:38  12  ,att08 ech_att08
05:11:38  13  ,att09 ech_att09
05:11:38  14  ,att10 ech_att10
05:11:38  15  ,att11 ech_att11
05:11:38  16  ,att12 ech_att12
05:11:38  17  ,att13 ech_att13
05:11:38  18  ,att14 ech_att14
05:11:38  19  ,att15 ech_att15
05:11:38  20  ,att16 ech_att16
05:11:38  21  ,att17 ech_att17
05:11:38  22  ,att18 ech_att18
05:11:38  23  ,att19 ech_att19
05:11:38  24  ,att20 ech_att20
05:11:38  25  ,att21 ech_att21
05:11:38  26  ,att22 ech_att22
05:11:38  27  ,att23 ech_att23
05:11:38  28  ,att24 ech_att24
05:11:38  29  ,att25 ech_att25
05:11:38  30  ,att26 ech_att26
05:11:38  31  ,att27 ech_att27
05:11:38  32  ,att28 ech_att28
05:11:38  33  ,att29 ech_att29
05:11:38  34  ,att30 ech_att30
05:11:38  35  ,att31 ech_att31
05:11:38  36  ,att32 ech_att32
05:11:38  37  ,att33 ech_att33
05:11:38  38  ,att34 ech_att34
05:11:38  39  ,att35 ech_att35
05:11:38  40  ,att36 ech_att36
05:11:38  41  ,att37 ech_att37
05:11:38  42  FROM svm6162
05:11:38  43  /

Table created.

Elapsed: 00:00:00.19
05:11:38 SQL> 
05:11:38 SQL> ANALYZE TABLE ech_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
05:11:38 SQL> 
05:11:38 SQL> -- rpt
05:11:38 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19837

Elapsed: 00:00:00.78
05:11:39 SQL> SELECT COUNT(*)FROM ech_att;

  COUNT(*)
----------
     19837

Elapsed: 00:00:00.00
05:11:39 SQL> 
05:11:39 SQL> --
05:11:39 SQL> -- egb610.sql
05:11:39 SQL> --
05:11:39 SQL> 
05:11:39 SQL> -- Creates views and tables for backtesting a forex SVM strategy
05:11:39 SQL> 
05:11:39 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.51
05:11:40 SQL> 
05:11:40 SQL> -- I created di5min here:
05:11:40 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
05:11:40 SQL> 
05:11:40 SQL> CREATE OR REPLACE VIEW svm6102 AS
05:11:40   2  SELECT
05:11:40   3  pair
05:11:40   4  ,ydate
05:11:40   5  ,prdate
05:11:40   6  ,rownum rnum -- acts as t in my time-series
05:11:40   7  ,clse
05:11:40   8  -- Derive a bunch of attributes from clse, the latest price:
05:11:40   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
05:11:40  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
05:11:40  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
05:11:40  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
05:11:40  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
05:11:40  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
05:11:40  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
05:11:40  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
05:11:40  17  --
05:11:40  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
05:11:40  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
05:11:40  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
05:11:40  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
05:11:40  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
05:11:40  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
05:11:40  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
05:11:40  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
05:11:40  26  --
05:11:40  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
05:11:40  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
05:11:40  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
05:11:40  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
05:11:40  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
05:11:40  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
05:11:40  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
05:11:40  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
05:11:40  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
05:11:40  36  FROM di5min WHERE pair LIKE'%egb%'
05:11:40  37  AND ydate > sysdate - 95
05:11:40  38  ORDER BY ydate
05:11:40  39  /

View created.

Elapsed: 00:00:00.05
05:11:40 SQL> 
05:11:40 SQL> -- rpt
05:11:40 SQL> 
05:11:40 SQL> SELECT
05:11:40   2  pair
05:11:40   3  ,COUNT(pair)
05:11:40   4  ,MIN(clse),MAX(clse)
05:11:40   5  ,MIN(avg6),MAX(avg6)
05:11:40   6  ,MIN(ydate),MAX(ydate)
05:11:40   7  FROM svm6102
05:11:40   8  GROUP BY pair
05:11:40   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
egb_usd       19836 .833520557 .893920122 .834199029 .892400287 2010-09-27 05:15:01 2010-12-31 05:05:00

Elapsed: 00:00:00.94
05:11:41 SQL> 
05:11:41 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
05:11:41 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.25
05:11:41 SQL> CREATE TABLE svm6122 COMPRESS AS
05:11:41   2  SELECT
05:11:41   3  pair
05:11:41   4  ,ydate
05:11:41   5  ,prdate
05:11:41   6  ,clse
05:11:41   7  -- g6 is important. I want to predict g6:
05:11:41   8  ,ld6 - clse g6
05:11:41   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
05:11:41  10  -- I want more attributes from the ones I derived above:
05:11:41  11  -- clse relation to moving-min
05:11:41  12  ,clse-min4  cm4
05:11:41  13  ,clse-min6  cm6
05:11:41  14  ,clse-min8  cm8
05:11:41  15  ,clse-min10 cm10
05:11:41  16  ,clse-min12 cm12
05:11:41  17  ,clse-min14 cm14
05:11:41  18  ,clse-min16 cm16
05:11:41  19  ,clse-min18 cm18
05:11:41  20  -- clse relation to moving-avg
05:11:41  21  ,clse-avg4  ca4
05:11:41  22  ,clse-avg6  ca6
05:11:41  23  ,clse-avg8  ca8
05:11:41  24  ,clse-avg10 ca10
05:11:41  25  ,clse-avg12 ca12
05:11:41  26  ,clse-avg14 ca14
05:11:41  27  ,clse-avg16 ca16
05:11:41  28  ,clse-avg18 ca18
05:11:41  29  -- clse relation to moving-max
05:11:41  30  ,clse-max4  cx4
05:11:41  31  ,clse-max6  cx6
05:11:41  32  ,clse-max8  cx8
05:11:41  33  ,clse-max10 cx10
05:11:41  34  ,clse-max12 cx12
05:11:41  35  ,clse-max14 cx14
05:11:41  36  ,clse-max16 cx16
05:11:41  37  ,clse-max18 cx18
05:11:41  38  -- Derive more attributes.
05:11:41  39  -- I want to use CORR() here to help SVM see the shape of the series.
05:11:41  40  -- But COVAR_POP is more stable:
05:11:41  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
05:11:41  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
05:11:41  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
05:11:41  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
05:11:41  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
05:11:41  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
05:11:41  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
05:11:41  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
05:11:41  49  -- Derive date related attributes:
05:11:41  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
05:11:41  51  ,0+TO_CHAR(ydate,'D')d
05:11:41  52  ,0+TO_CHAR(ydate,'W')w
05:11:41  53  -- mpm stands for minutes-past-midnight:
05:11:41  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
05:11:41  55  -- mph stands for minutes-past-hour:
05:11:41  56  ,0+TO_CHAR(ydate,'MI')mph
05:11:41  57  FROM svm6102
05:11:41  58  ORDER BY ydate
05:11:41  59  /

Table created.

Elapsed: 00:00:02.47
05:11:44 SQL> 
05:11:44 SQL> -- rpt
05:11:44 SQL> 
05:11:44 SQL> SELECT
05:11:44   2  pair
05:11:44   3  ,COUNT(pair)
05:11:44   4  ,MIN(clse),MAX(clse)
05:11:44   5  ,MIN(ydate),MAX(ydate)
05:11:44   6  FROM svm6122
05:11:44   7  GROUP BY pair
05:11:44   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
egb_usd       19836 .833520557 .893920122 2010-09-27 05:15:01 2010-12-31 05:05:00

Elapsed: 00:00:00.05
05:11:44 SQL> 
05:11:44 SQL> -- Prepare for derivation of NTILE based params:
05:11:44 SQL> 
05:11:44 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.50
05:11:44 SQL> CREATE TABLE svm6142 COMPRESS AS
05:11:44   2  SELECT
05:11:44   3  pair
05:11:44   4  ,ydate
05:11:44   5  ,prdate
05:11:44   6  ,clse
05:11:44   7  ,g6
05:11:44   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
05:11:44   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
05:11:44  10  ,CASE WHEN trend IS NULL THEN 1
05:11:44  11  	    WHEN trend =0      THEN 1
05:11:44  12  	    ELSE trend END trend
05:11:44  13  ,cm4
05:11:44  14  ,cm6
05:11:44  15  ,cm8
05:11:44  16  ,cm10
05:11:44  17  ,cm12
05:11:44  18  ,cm14
05:11:44  19  ,cm16
05:11:44  20  ,cm18
05:11:44  21  --
05:11:44  22  ,ca4
05:11:44  23  ,ca6
05:11:44  24  ,ca8
05:11:44  25  ,ca10
05:11:44  26  ,ca12
05:11:44  27  ,ca14
05:11:44  28  ,ca16
05:11:44  29  ,ca18
05:11:44  30  --
05:11:44  31  ,cx4
05:11:44  32  ,cx6
05:11:44  33  ,cx8
05:11:44  34  ,cx10
05:11:44  35  ,cx12
05:11:44  36  ,cx14
05:11:44  37  ,cx16
05:11:44  38  ,cx18
05:11:44  39  --
05:11:44  40  ,crr4
05:11:44  41  ,crr6
05:11:44  42  ,crr8
05:11:44  43  ,crr10
05:11:44  44  ,crr12
05:11:44  45  ,crr14
05:11:44  46  ,crr16
05:11:44  47  ,crr18
05:11:44  48  --
05:11:44  49  ,hh
05:11:44  50  ,d
05:11:44  51  ,w
05:11:44  52  ,mpm
05:11:44  53  ,mph
05:11:44  54  FROM svm6122
05:11:44  55  ORDER BY ydate
05:11:44  56  /

Table created.

Elapsed: 00:00:00.42
05:11:44 SQL> 
05:11:44 SQL> -- rpt
05:11:44 SQL> 
05:11:44 SQL> SELECT
05:11:44   2  pair
05:11:44   3  ,trend
05:11:44   4  ,gatt
05:11:44   5  ,COUNT(pair)
05:11:44   6  ,AVG(g6)
05:11:44   7  FROM svm6142
05:11:44   8  GROUP BY pair,trend,gatt
05:11:44   9  ORDER BY pair,trend,gatt
05:11:44  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7425 -.00098349
egb_usd 	-1 up	      2777 .003089568
egb_usd 	-1		72
egb_usd 	 1 nup	      6794  -.0012824
egb_usd 	 1 up	      2768 .002961387

Elapsed: 00:00:00.04
05:11:45 SQL> 
05:11:45 SQL> 
05:11:45 SQL> -- Derive NTILE based params:
05:11:45 SQL> 
05:11:45 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.18
05:11:45 SQL> CREATE TABLE svm6162 COMPRESS AS
05:11:45   2  SELECT
05:11:45   3  pair
05:11:45   4  ,ydate
05:11:45   5  ,prdate
05:11:45   6  ,clse
05:11:45   7  ,g6
05:11:45   8  ,gatt
05:11:45   9  ,gattn
05:11:45  10  ,trend
05:11:45  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
05:11:45  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
05:11:45  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
05:11:45  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
05:11:45  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
05:11:45  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
05:11:45  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
05:11:45  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
05:11:45  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
05:11:45  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
05:11:45  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
05:11:45  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
05:11:45  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
05:11:45  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
05:11:45  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
05:11:45  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
05:11:45  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
05:11:45  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
05:11:45  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
05:11:45  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
05:11:45  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
05:11:45  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
05:11:45  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
05:11:45  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
05:11:45  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
05:11:45  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
05:11:45  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
05:11:45  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
05:11:45  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
05:11:45  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
05:11:45  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
05:11:45  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
05:11:45  43  ,hh  att32
05:11:45  44  ,d   att33
05:11:45  45  ,w   att34
05:11:45  46  ,mpm att35
05:11:45  47  ,mph att36
05:11:45  48  ,trend att37
05:11:45  49  FROM svm6142
05:11:45  50  ORDER BY ydate
05:11:45  51  /

Table created.

Elapsed: 00:00:05.60
05:11:50 SQL> 
05:11:50 SQL> -- rpt
05:11:50 SQL> 
05:11:50 SQL> SELECT
05:11:50   2  pair
05:11:50   3  ,trend
05:11:50   4  ,gatt
05:11:50   5  ,COUNT(pair)
05:11:50   6  ,AVG(g6)
05:11:50   7  FROM svm6162
05:11:50   8  GROUP BY pair,trend,gatt
05:11:50   9  ORDER BY pair,trend,gatt
05:11:50  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7425 -.00098349
egb_usd 	-1 up	      2777 .003089568
egb_usd 	-1		72
egb_usd 	 1 nup	      6794  -.0012824
egb_usd 	 1 up	      2768 .002961387

Elapsed: 00:00:00.03
05:11:50 SQL> 
05:11:50 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.33
05:11:51 SQL> CREATE TABLE modsrc COMPRESS AS
05:11:51   2  SELECT
05:11:51   3  pair
05:11:51   4  ,ydate
05:11:51   5  ,prdate
05:11:51   6  ,trend
05:11:51   7  ,g6
05:11:51   8  ,gatt
05:11:51   9  ,gattn
05:11:51  10  FROM svm6162
05:11:51  11  /

Table created.

Elapsed: 00:00:00.10
05:11:51 SQL> 
05:11:51 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
05:11:51 SQL> 
05:11:51 SQL> DROP   TABLE egb_ms610 ;

Table dropped.

Elapsed: 00:00:00.20
05:11:51 SQL> CREATE TABLE egb_ms610 COMPRESS AS
05:11:51   2  SELECT
05:11:51   3  ydate
05:11:51   4  ,trend egb_trend
05:11:51   5  ,g6    egb_g6
05:11:51   6  ,gatt  egb_gatt
05:11:51   7  ,gattn egb_gattn
05:11:51   8  FROM modsrc
05:11:51   9  /

Table created.

Elapsed: 00:00:00.06
05:11:51 SQL> 
05:11:51 SQL> ANALYZE TABLE egb_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
05:11:51 SQL> 
05:11:51 SQL> -- I need a copy of the attributes:
05:11:51 SQL> 
05:11:51 SQL> 
05:11:51 SQL> DROP   TABLE egb_att;

Table dropped.

Elapsed: 00:00:00.14
05:11:52 SQL> CREATE TABLE egb_att COMPRESS AS
05:11:52   2  SELECT
05:11:52   3  ydate
05:11:52   4  ,att00 egb_att00
05:11:52   5  ,att01 egb_att01
05:11:52   6  ,att02 egb_att02
05:11:52   7  ,att03 egb_att03
05:11:52   8  ,att04 egb_att04
05:11:52   9  ,att05 egb_att05
05:11:52  10  ,att06 egb_att06
05:11:52  11  ,att07 egb_att07
05:11:52  12  ,att08 egb_att08
05:11:52  13  ,att09 egb_att09
05:11:52  14  ,att10 egb_att10
05:11:52  15  ,att11 egb_att11
05:11:52  16  ,att12 egb_att12
05:11:52  17  ,att13 egb_att13
05:11:52  18  ,att14 egb_att14
05:11:52  19  ,att15 egb_att15
05:11:52  20  ,att16 egb_att16
05:11:52  21  ,att17 egb_att17
05:11:52  22  ,att18 egb_att18
05:11:52  23  ,att19 egb_att19
05:11:52  24  ,att20 egb_att20
05:11:52  25  ,att21 egb_att21
05:11:52  26  ,att22 egb_att22
05:11:52  27  ,att23 egb_att23
05:11:52  28  ,att24 egb_att24
05:11:52  29  ,att25 egb_att25
05:11:52  30  ,att26 egb_att26
05:11:52  31  ,att27 egb_att27
05:11:52  32  ,att28 egb_att28
05:11:52  33  ,att29 egb_att29
05:11:52  34  ,att30 egb_att30
05:11:52  35  ,att31 egb_att31
05:11:52  36  ,att32 egb_att32
05:11:52  37  ,att33 egb_att33
05:11:52  38  ,att34 egb_att34
05:11:52  39  ,att35 egb_att35
05:11:52  40  ,att36 egb_att36
05:11:52  41  ,att37 egb_att37
05:11:52  42  FROM svm6162
05:11:52  43  /

Table created.

Elapsed: 00:00:00.18
05:11:52 SQL> 
05:11:52 SQL> ANALYZE TABLE egb_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:01.10
05:11:53 SQL> 
05:11:53 SQL> -- rpt
05:11:53 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19836

Elapsed: 00:00:00.94
05:11:54 SQL> SELECT COUNT(*)FROM egb_att;

  COUNT(*)
----------
     19836

Elapsed: 00:00:00.00
05:11:54 SQL> 
05:11:54 SQL> --
05:11:54 SQL> -- ejp610.sql
05:11:54 SQL> --
05:11:54 SQL> 
05:11:54 SQL> -- Creates views and tables for backtesting a forex SVM strategy
05:11:54 SQL> 
05:11:54 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.45
05:11:54 SQL> 
05:11:54 SQL> -- I created di5min here:
05:11:54 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
05:11:54 SQL> 
05:11:54 SQL> CREATE OR REPLACE VIEW svm6102 AS
05:11:54   2  SELECT
05:11:54   3  pair
05:11:54   4  ,ydate
05:11:54   5  ,prdate
05:11:54   6  ,rownum rnum -- acts as t in my time-series
05:11:54   7  ,clse
05:11:54   8  -- Derive a bunch of attributes from clse, the latest price:
05:11:54   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
05:11:54  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
05:11:54  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
05:11:54  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
05:11:54  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
05:11:54  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
05:11:54  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
05:11:54  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
05:11:54  17  --
05:11:54  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
05:11:54  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
05:11:54  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
05:11:54  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
05:11:54  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
05:11:54  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
05:11:54  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
05:11:54  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
05:11:54  26  --
05:11:54  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
05:11:54  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
05:11:54  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
05:11:54  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
05:11:54  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
05:11:54  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
05:11:54  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
05:11:54  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
05:11:54  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
05:11:54  36  FROM di5min WHERE pair LIKE'%ejp%'
05:11:54  37  AND ydate > sysdate - 95
05:11:54  38  ORDER BY ydate
05:11:54  39  /

View created.

Elapsed: 00:00:00.06
05:11:54 SQL> 
05:11:54 SQL> -- rpt
05:11:54 SQL> 
05:11:54 SQL> SELECT
05:11:54   2  pair
05:11:54   3  ,COUNT(pair)
05:11:54   4  ,MIN(clse),MAX(clse)
05:11:54   5  ,MIN(avg6),MAX(avg6)
05:11:54   6  ,MIN(ydate),MAX(ydate)
05:11:54   7  FROM svm6102
05:11:54   8  GROUP BY pair
05:11:54   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ejp_usd       19834 107.643765	115.63485 107.776148 115.509678 2010-09-27 05:15:01 2010-12-31 05:05:00

Elapsed: 00:00:00.87
05:11:55 SQL> 
05:11:55 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
05:11:55 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.26
05:11:55 SQL> CREATE TABLE svm6122 COMPRESS AS
05:11:55   2  SELECT
05:11:55   3  pair
05:11:55   4  ,ydate
05:11:55   5  ,prdate
05:11:55   6  ,clse
05:11:55   7  -- g6 is important. I want to predict g6:
05:11:55   8  ,ld6 - clse g6
05:11:55   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
05:11:55  10  -- I want more attributes from the ones I derived above:
05:11:55  11  -- clse relation to moving-min
05:11:55  12  ,clse-min4  cm4
05:11:55  13  ,clse-min6  cm6
05:11:55  14  ,clse-min8  cm8
05:11:55  15  ,clse-min10 cm10
05:11:55  16  ,clse-min12 cm12
05:11:55  17  ,clse-min14 cm14
05:11:55  18  ,clse-min16 cm16
05:11:55  19  ,clse-min18 cm18
05:11:55  20  -- clse relation to moving-avg
05:11:55  21  ,clse-avg4  ca4
05:11:55  22  ,clse-avg6  ca6
05:11:55  23  ,clse-avg8  ca8
05:11:55  24  ,clse-avg10 ca10
05:11:55  25  ,clse-avg12 ca12
05:11:55  26  ,clse-avg14 ca14
05:11:55  27  ,clse-avg16 ca16
05:11:55  28  ,clse-avg18 ca18
05:11:55  29  -- clse relation to moving-max
05:11:55  30  ,clse-max4  cx4
05:11:55  31  ,clse-max6  cx6
05:11:55  32  ,clse-max8  cx8
05:11:55  33  ,clse-max10 cx10
05:11:55  34  ,clse-max12 cx12
05:11:55  35  ,clse-max14 cx14
05:11:55  36  ,clse-max16 cx16
05:11:55  37  ,clse-max18 cx18
05:11:55  38  -- Derive more attributes.
05:11:55  39  -- I want to use CORR() here to help SVM see the shape of the series.
05:11:55  40  -- But COVAR_POP is more stable:
05:11:55  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
05:11:55  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
05:11:55  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
05:11:55  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
05:11:55  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
05:11:55  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
05:11:55  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
05:11:55  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
05:11:55  49  -- Derive date related attributes:
05:11:55  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
05:11:55  51  ,0+TO_CHAR(ydate,'D')d
05:11:55  52  ,0+TO_CHAR(ydate,'W')w
05:11:55  53  -- mpm stands for minutes-past-midnight:
05:11:55  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
05:11:55  55  -- mph stands for minutes-past-hour:
05:11:55  56  ,0+TO_CHAR(ydate,'MI')mph
05:11:55  57  FROM svm6102
05:11:55  58  ORDER BY ydate
05:11:55  59  /

Table created.

Elapsed: 00:00:02.10
05:11:58 SQL> 
05:11:58 SQL> -- rpt
05:11:58 SQL> 
05:11:58 SQL> SELECT
05:11:58   2  pair
05:11:58   3  ,COUNT(pair)
05:11:58   4  ,MIN(clse),MAX(clse)
05:11:58   5  ,MIN(ydate),MAX(ydate)
05:11:58   6  FROM svm6122
05:11:58   7  GROUP BY pair
05:11:58   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ejp_usd       19834 107.643765	115.63485 2010-09-27 05:15:01 2010-12-31 05:05:00

Elapsed: 00:00:00.04
05:11:58 SQL> 
05:11:58 SQL> -- Prepare for derivation of NTILE based params:
05:11:58 SQL> 
05:11:58 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.20
05:11:58 SQL> CREATE TABLE svm6142 COMPRESS AS
05:11:58   2  SELECT
05:11:58   3  pair
05:11:58   4  ,ydate
05:11:58   5  ,prdate
05:11:58   6  ,clse
05:11:58   7  ,g6
05:11:58   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
05:11:58   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
05:11:58  10  ,CASE WHEN trend IS NULL THEN 1
05:11:58  11  	    WHEN trend =0      THEN 1
05:11:58  12  	    ELSE trend END trend
05:11:58  13  ,cm4
05:11:58  14  ,cm6
05:11:58  15  ,cm8
05:11:58  16  ,cm10
05:11:58  17  ,cm12
05:11:58  18  ,cm14
05:11:58  19  ,cm16
05:11:58  20  ,cm18
05:11:58  21  --
05:11:58  22  ,ca4
05:11:58  23  ,ca6
05:11:58  24  ,ca8
05:11:58  25  ,ca10
05:11:58  26  ,ca12
05:11:58  27  ,ca14
05:11:58  28  ,ca16
05:11:58  29  ,ca18
05:11:58  30  --
05:11:58  31  ,cx4
05:11:58  32  ,cx6
05:11:58  33  ,cx8
05:11:58  34  ,cx10
05:11:58  35  ,cx12
05:11:58  36  ,cx14
05:11:58  37  ,cx16
05:11:58  38  ,cx18
05:11:58  39  --
05:11:58  40  ,crr4
05:11:58  41  ,crr6
05:11:58  42  ,crr8
05:11:58  43  ,crr10
05:11:58  44  ,crr12
05:11:58  45  ,crr14
05:11:58  46  ,crr16
05:11:58  47  ,crr18
05:11:58  48  --
05:11:58  49  ,hh
05:11:58  50  ,d
05:11:58  51  ,w
05:11:58  52  ,mpm
05:11:58  53  ,mph
05:11:58  54  FROM svm6122
05:11:58  55  ORDER BY ydate
05:11:58  56  /

Table created.

Elapsed: 00:00:00.38
05:11:58 SQL> 
05:11:58 SQL> -- rpt
05:11:58 SQL> 
05:11:58 SQL> SELECT
05:11:58   2  pair
05:11:58   3  ,trend
05:11:58   4  ,gatt
05:11:58   5  ,COUNT(pair)
05:11:58   6  ,AVG(g6)
05:11:58   7  FROM svm6142
05:11:58   8  GROUP BY pair,trend,gatt
05:11:58   9  ORDER BY pair,trend,gatt
05:11:58  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      4872 -.32313466
ejp_usd 	-1 up	      5071 .268548412
ejp_usd 	-1		43
ejp_usd 	 1 nup	      5091 -.28760847
ejp_usd 	 1 up	      4728 .279200972
ejp_usd 	 1		29

6 rows selected.

Elapsed: 00:00:00.04
05:11:58 SQL> 
05:11:58 SQL> 
05:11:58 SQL> -- Derive NTILE based params:
05:11:58 SQL> 
05:11:58 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.14
05:11:58 SQL> CREATE TABLE svm6162 COMPRESS AS
05:11:58   2  SELECT
05:11:58   3  pair
05:11:58   4  ,ydate
05:11:58   5  ,prdate
05:11:58   6  ,clse
05:11:58   7  ,g6
05:11:58   8  ,gatt
05:11:58   9  ,gattn
05:11:58  10  ,trend
05:11:58  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
05:11:58  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
05:11:58  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
05:11:58  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
05:11:58  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
05:11:58  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
05:11:58  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
05:11:58  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
05:11:58  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
05:11:58  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
05:11:58  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
05:11:58  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
05:11:58  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
05:11:58  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
05:11:58  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
05:11:58  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
05:11:58  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
05:11:58  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
05:11:58  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
05:11:58  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
05:11:58  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
05:11:58  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
05:11:58  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
05:11:58  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
05:11:58  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
05:11:58  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
05:11:58  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
05:11:58  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
05:11:58  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
05:11:58  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
05:11:58  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
05:11:58  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
05:11:58  43  ,hh  att32
05:11:58  44  ,d   att33
05:11:58  45  ,w   att34
05:11:58  46  ,mpm att35
05:11:58  47  ,mph att36
05:11:58  48  ,trend att37
05:11:58  49  FROM svm6142
05:11:58  50  ORDER BY ydate
05:11:58  51  /

Table created.

Elapsed: 00:00:04.92
05:12:03 SQL> 
05:12:03 SQL> -- rpt
05:12:03 SQL> 
05:12:03 SQL> SELECT
05:12:03   2  pair
05:12:03   3  ,trend
05:12:03   4  ,gatt
05:12:03   5  ,COUNT(pair)
05:12:03   6  ,AVG(g6)
05:12:03   7  FROM svm6162
05:12:03   8  GROUP BY pair,trend,gatt
05:12:03   9  ORDER BY pair,trend,gatt
05:12:03  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      4872 -.32313466
ejp_usd 	-1 up	      5071 .268548412
ejp_usd 	-1		43
ejp_usd 	 1 nup	      5091 -.28760847
ejp_usd 	 1 up	      4728 .279200972
ejp_usd 	 1		29

6 rows selected.

Elapsed: 00:00:00.03
05:12:03 SQL> 
05:12:03 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.11
05:12:03 SQL> CREATE TABLE modsrc COMPRESS AS
05:12:03   2  SELECT
05:12:03   3  pair
05:12:03   4  ,ydate
05:12:03   5  ,prdate
05:12:03   6  ,trend
05:12:03   7  ,g6
05:12:03   8  ,gatt
05:12:03   9  ,gattn
05:12:03  10  FROM svm6162
05:12:03  11  /

Table created.

Elapsed: 00:00:00.09
05:12:03 SQL> 
05:12:03 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
05:12:04 SQL> 
05:12:04 SQL> DROP   TABLE ejp_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
05:12:04 SQL> CREATE TABLE ejp_ms610 COMPRESS AS
05:12:04   2  SELECT
05:12:04   3  ydate
05:12:04   4  ,trend ejp_trend
05:12:04   5  ,g6    ejp_g6
05:12:04   6  ,gatt  ejp_gatt
05:12:04   7  ,gattn ejp_gattn
05:12:04   8  FROM modsrc
05:12:04   9  /

Table created.

Elapsed: 00:00:00.06
05:12:04 SQL> 
05:12:04 SQL> ANALYZE TABLE ejp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
05:12:04 SQL> 
05:12:04 SQL> -- I need a copy of the attributes:
05:12:04 SQL> 
05:12:04 SQL> 
05:12:04 SQL> DROP   TABLE ejp_att;

Table dropped.

Elapsed: 00:00:00.04
05:12:04 SQL> CREATE TABLE ejp_att COMPRESS AS
05:12:04   2  SELECT
05:12:04   3  ydate
05:12:04   4  ,att00 ejp_att00
05:12:04   5  ,att01 ejp_att01
05:12:04   6  ,att02 ejp_att02
05:12:04   7  ,att03 ejp_att03
05:12:04   8  ,att04 ejp_att04
05:12:04   9  ,att05 ejp_att05
05:12:04  10  ,att06 ejp_att06
05:12:04  11  ,att07 ejp_att07
05:12:04  12  ,att08 ejp_att08
05:12:04  13  ,att09 ejp_att09
05:12:04  14  ,att10 ejp_att10
05:12:04  15  ,att11 ejp_att11
05:12:04  16  ,att12 ejp_att12
05:12:04  17  ,att13 ejp_att13
05:12:04  18  ,att14 ejp_att14
05:12:04  19  ,att15 ejp_att15
05:12:04  20  ,att16 ejp_att16
05:12:04  21  ,att17 ejp_att17
05:12:04  22  ,att18 ejp_att18
05:12:04  23  ,att19 ejp_att19
05:12:04  24  ,att20 ejp_att20
05:12:04  25  ,att21 ejp_att21
05:12:04  26  ,att22 ejp_att22
05:12:04  27  ,att23 ejp_att23
05:12:04  28  ,att24 ejp_att24
05:12:04  29  ,att25 ejp_att25
05:12:04  30  ,att26 ejp_att26
05:12:04  31  ,att27 ejp_att27
05:12:04  32  ,att28 ejp_att28
05:12:04  33  ,att29 ejp_att29
05:12:04  34  ,att30 ejp_att30
05:12:04  35  ,att31 ejp_att31
05:12:04  36  ,att32 ejp_att32
05:12:04  37  ,att33 ejp_att33
05:12:04  38  ,att34 ejp_att34
05:12:04  39  ,att35 ejp_att35
05:12:04  40  ,att36 ejp_att36
05:12:04  41  ,att37 ejp_att37
05:12:04  42  FROM svm6162
05:12:04  43  /

Table created.

Elapsed: 00:00:00.17
05:12:04 SQL> 
05:12:04 SQL> ANALYZE TABLE ejp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
05:12:05 SQL> 
05:12:05 SQL> -- rpt
05:12:05 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19834

Elapsed: 00:00:00.86
05:12:05 SQL> SELECT COUNT(*)FROM ejp_att;

  COUNT(*)
----------
     19834

Elapsed: 00:00:00.01
05:12:05 SQL> 
05:12:05 SQL> --
05:12:05 SQL> -- ajp610.sql
05:12:05 SQL> --
05:12:05 SQL> 
05:12:05 SQL> -- Creates views and tables for backtesting a forex SVM strategy
05:12:05 SQL> 
05:12:05 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.54
05:12:06 SQL> 
05:12:06 SQL> -- I created di5min here:
05:12:06 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
05:12:06 SQL> 
05:12:06 SQL> CREATE OR REPLACE VIEW svm6102 AS
05:12:06   2  SELECT
05:12:06   3  pair
05:12:06   4  ,ydate
05:12:06   5  ,prdate
05:12:06   6  ,rownum rnum -- acts as t in my time-series
05:12:06   7  ,clse
05:12:06   8  -- Derive a bunch of attributes from clse, the latest price:
05:12:06   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
05:12:06  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
05:12:06  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
05:12:06  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
05:12:06  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
05:12:06  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
05:12:06  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
05:12:06  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
05:12:06  17  --
05:12:06  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
05:12:06  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
05:12:06  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
05:12:06  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
05:12:06  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
05:12:06  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
05:12:06  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
05:12:06  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
05:12:06  26  --
05:12:06  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
05:12:06  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
05:12:06  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
05:12:06  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
05:12:06  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
05:12:06  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
05:12:06  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
05:12:06  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
05:12:06  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
05:12:06  36  FROM di5min WHERE pair LIKE'%ajp%'
05:12:06  37  AND ydate > sysdate - 95
05:12:06  38  ORDER BY ydate
05:12:06  39  /

View created.

Elapsed: 00:00:00.04
05:12:06 SQL> 
05:12:06 SQL> -- rpt
05:12:06 SQL> 
05:12:06 SQL> SELECT
05:12:06   2  pair
05:12:06   3  ,COUNT(pair)
05:12:06   4  ,MIN(clse),MAX(clse)
05:12:06   5  ,MIN(avg6),MAX(avg6)
05:12:06   6  ,MIN(ydate),MAX(ydate)
05:12:06   7  FROM svm6102
05:12:06   8  GROUP BY pair
05:12:06   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ajp_usd       19831  78.249976 83.6669853 78.5106193  83.546306 2010-09-27 05:15:01 2010-12-31 05:05:00

Elapsed: 00:00:00.78
05:12:07 SQL> 
05:12:07 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
05:12:07 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.26
05:12:07 SQL> CREATE TABLE svm6122 COMPRESS AS
05:12:07   2  SELECT
05:12:07   3  pair
05:12:07   4  ,ydate
05:12:07   5  ,prdate
05:12:07   6  ,clse
05:12:07   7  -- g6 is important. I want to predict g6:
05:12:07   8  ,ld6 - clse g6
05:12:07   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
05:12:07  10  -- I want more attributes from the ones I derived above:
05:12:07  11  -- clse relation to moving-min
05:12:07  12  ,clse-min4  cm4
05:12:07  13  ,clse-min6  cm6
05:12:07  14  ,clse-min8  cm8
05:12:07  15  ,clse-min10 cm10
05:12:07  16  ,clse-min12 cm12
05:12:07  17  ,clse-min14 cm14
05:12:07  18  ,clse-min16 cm16
05:12:07  19  ,clse-min18 cm18
05:12:07  20  -- clse relation to moving-avg
05:12:07  21  ,clse-avg4  ca4
05:12:07  22  ,clse-avg6  ca6
05:12:07  23  ,clse-avg8  ca8
05:12:07  24  ,clse-avg10 ca10
05:12:07  25  ,clse-avg12 ca12
05:12:07  26  ,clse-avg14 ca14
05:12:07  27  ,clse-avg16 ca16
05:12:07  28  ,clse-avg18 ca18
05:12:07  29  -- clse relation to moving-max
05:12:07  30  ,clse-max4  cx4
05:12:07  31  ,clse-max6  cx6
05:12:07  32  ,clse-max8  cx8
05:12:07  33  ,clse-max10 cx10
05:12:07  34  ,clse-max12 cx12
05:12:07  35  ,clse-max14 cx14
05:12:07  36  ,clse-max16 cx16
05:12:07  37  ,clse-max18 cx18
05:12:07  38  -- Derive more attributes.
05:12:07  39  -- I want to use CORR() here to help SVM see the shape of the series.
05:12:07  40  -- But COVAR_POP is more stable:
05:12:07  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
05:12:07  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
05:12:07  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
05:12:07  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
05:12:07  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
05:12:07  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
05:12:07  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
05:12:07  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
05:12:07  49  -- Derive date related attributes:
05:12:07  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
05:12:07  51  ,0+TO_CHAR(ydate,'D')d
05:12:07  52  ,0+TO_CHAR(ydate,'W')w
05:12:07  53  -- mpm stands for minutes-past-midnight:
05:12:07  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
05:12:07  55  -- mph stands for minutes-past-hour:
05:12:07  56  ,0+TO_CHAR(ydate,'MI')mph
05:12:07  57  FROM svm6102
05:12:07  58  ORDER BY ydate
05:12:07  59  /

Table created.

Elapsed: 00:00:02.02
05:12:09 SQL> 
05:12:09 SQL> -- rpt
05:12:09 SQL> 
05:12:09 SQL> SELECT
05:12:09   2  pair
05:12:09   3  ,COUNT(pair)
05:12:09   4  ,MIN(clse),MAX(clse)
05:12:09   5  ,MIN(ydate),MAX(ydate)
05:12:09   6  FROM svm6122
05:12:09   7  GROUP BY pair
05:12:09   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ajp_usd       19831  78.249976 83.6669853 2010-09-27 05:15:01 2010-12-31 05:05:00

Elapsed: 00:00:00.04
05:12:09 SQL> 
05:12:09 SQL> -- Prepare for derivation of NTILE based params:
05:12:09 SQL> 
05:12:09 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.17
05:12:09 SQL> CREATE TABLE svm6142 COMPRESS AS
05:12:09   2  SELECT
05:12:09   3  pair
05:12:09   4  ,ydate
05:12:09   5  ,prdate
05:12:09   6  ,clse
05:12:09   7  ,g6
05:12:09   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
05:12:09   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
05:12:09  10  ,CASE WHEN trend IS NULL THEN 1
05:12:09  11  	    WHEN trend =0      THEN 1
05:12:09  12  	    ELSE trend END trend
05:12:09  13  ,cm4
05:12:09  14  ,cm6
05:12:09  15  ,cm8
05:12:09  16  ,cm10
05:12:09  17  ,cm12
05:12:09  18  ,cm14
05:12:09  19  ,cm16
05:12:09  20  ,cm18
05:12:09  21  --
05:12:09  22  ,ca4
05:12:09  23  ,ca6
05:12:09  24  ,ca8
05:12:09  25  ,ca10
05:12:09  26  ,ca12
05:12:09  27  ,ca14
05:12:09  28  ,ca16
05:12:09  29  ,ca18
05:12:09  30  --
05:12:09  31  ,cx4
05:12:09  32  ,cx6
05:12:09  33  ,cx8
05:12:09  34  ,cx10
05:12:09  35  ,cx12
05:12:09  36  ,cx14
05:12:09  37  ,cx16
05:12:09  38  ,cx18
05:12:09  39  --
05:12:09  40  ,crr4
05:12:09  41  ,crr6
05:12:09  42  ,crr8
05:12:09  43  ,crr10
05:12:09  44  ,crr12
05:12:09  45  ,crr14
05:12:09  46  ,crr16
05:12:09  47  ,crr18
05:12:09  48  --
05:12:09  49  ,hh
05:12:09  50  ,d
05:12:09  51  ,w
05:12:09  52  ,mpm
05:12:09  53  ,mph
05:12:09  54  FROM svm6122
05:12:09  55  ORDER BY ydate
05:12:09  56  /

Table created.

Elapsed: 00:00:00.39
05:12:10 SQL> 
05:12:10 SQL> -- rpt
05:12:10 SQL> 
05:12:10 SQL> SELECT
05:12:10   2  pair
05:12:10   3  ,trend
05:12:10   4  ,gatt
05:12:10   5  ,COUNT(pair)
05:12:10   6  ,AVG(g6)
05:12:10   7  FROM svm6142
05:12:10   8  GROUP BY pair,trend,gatt
05:12:10   9  ORDER BY pair,trend,gatt
05:12:10  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ajp_usd 	-1 nup	      4172 -.22741248
ajp_usd 	-1 up	      5260 .218839374
ajp_usd 	-1		37
ajp_usd 	 1 nup	      5327 -.20057934
ajp_usd 	 1 up	      5000 .203256351
ajp_usd 	 1		35

6 rows selected.

Elapsed: 00:00:00.04
05:12:10 SQL> 
05:12:10 SQL> 
05:12:10 SQL> -- Derive NTILE based params:
05:12:10 SQL> 
05:12:10 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.14
05:12:10 SQL> CREATE TABLE svm6162 COMPRESS AS
05:12:10   2  SELECT
05:12:10   3  pair
05:12:10   4  ,ydate
05:12:10   5  ,prdate
05:12:10   6  ,clse
05:12:10   7  ,g6
05:12:10   8  ,gatt
05:12:10   9  ,gattn
05:12:10  10  ,trend
05:12:10  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
05:12:10  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
05:12:10  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
05:12:10  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
05:12:10  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
05:12:10  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
05:12:10  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
05:12:10  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
05:12:10  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
05:12:10  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
05:12:10  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
05:12:10  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
05:12:10  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
05:12:10  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
05:12:10  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
05:12:10  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
05:12:10  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
05:12:10  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
05:12:10  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
05:12:10  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
05:12:10  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
05:12:10  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
05:12:10  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
05:12:10  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
05:12:10  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
05:12:10  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
05:12:10  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
05:12:10  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
05:12:10  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
05:12:10  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
05:12:10  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
05:12:10  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
05:12:10  43  ,hh  att32
05:12:10  44  ,d   att33
05:12:10  45  ,w   att34
05:12:10  46  ,mpm att35
05:12:10  47  ,mph att36
05:12:10  48  ,trend att37
05:12:10  49  FROM svm6142
05:12:10  50  ORDER BY ydate
05:12:10  51  /

Table created.

Elapsed: 00:00:04.91
05:12:15 SQL> 
05:12:15 SQL> -- rpt
05:12:15 SQL> 
05:12:15 SQL> SELECT
05:12:15   2  pair
05:12:15   3  ,trend
05:12:15   4  ,gatt
05:12:15   5  ,COUNT(pair)
05:12:15   6  ,AVG(g6)
05:12:15   7  FROM svm6162
05:12:15   8  GROUP BY pair,trend,gatt
05:12:15   9  ORDER BY pair,trend,gatt
05:12:15  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ajp_usd 	-1 nup	      4172 -.22741248
ajp_usd 	-1 up	      5260 .218839374
ajp_usd 	-1		37
ajp_usd 	 1 nup	      5327 -.20057934
ajp_usd 	 1 up	      5000 .203256351
ajp_usd 	 1		35

6 rows selected.

Elapsed: 00:00:00.03
05:12:15 SQL> 
05:12:15 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.18
05:12:15 SQL> CREATE TABLE modsrc COMPRESS AS
05:12:15   2  SELECT
05:12:15   3  pair
05:12:15   4  ,ydate
05:12:15   5  ,prdate
05:12:15   6  ,trend
05:12:15   7  ,g6
05:12:15   8  ,gatt
05:12:15   9  ,gattn
05:12:15  10  FROM svm6162
05:12:15  11  /

Table created.

Elapsed: 00:00:00.09
05:12:15 SQL> 
05:12:15 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.22
05:12:15 SQL> 
05:12:15 SQL> DROP   TABLE ajp_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
05:12:15 SQL> CREATE TABLE ajp_ms610 COMPRESS AS
05:12:15   2  SELECT
05:12:15   3  ydate
05:12:15   4  ,trend ajp_trend
05:12:15   5  ,g6    ajp_g6
05:12:15   6  ,gatt  ajp_gatt
05:12:15   7  ,gattn ajp_gattn
05:12:15   8  FROM modsrc
05:12:15   9  /

Table created.

Elapsed: 00:00:00.08
05:12:15 SQL> 
05:12:15 SQL> ANALYZE TABLE ajp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
05:12:16 SQL> 
05:12:16 SQL> -- I need a copy of the attributes:
05:12:16 SQL> 
05:12:16 SQL> 
05:12:16 SQL> DROP   TABLE ajp_att;

Table dropped.

Elapsed: 00:00:00.05
05:12:16 SQL> CREATE TABLE ajp_att COMPRESS AS
05:12:16   2  SELECT
05:12:16   3  ydate
05:12:16   4  ,att00 ajp_att00
05:12:16   5  ,att01 ajp_att01
05:12:16   6  ,att02 ajp_att02
05:12:16   7  ,att03 ajp_att03
05:12:16   8  ,att04 ajp_att04
05:12:16   9  ,att05 ajp_att05
05:12:16  10  ,att06 ajp_att06
05:12:16  11  ,att07 ajp_att07
05:12:16  12  ,att08 ajp_att08
05:12:16  13  ,att09 ajp_att09
05:12:16  14  ,att10 ajp_att10
05:12:16  15  ,att11 ajp_att11
05:12:16  16  ,att12 ajp_att12
05:12:16  17  ,att13 ajp_att13
05:12:16  18  ,att14 ajp_att14
05:12:16  19  ,att15 ajp_att15
05:12:16  20  ,att16 ajp_att16
05:12:16  21  ,att17 ajp_att17
05:12:16  22  ,att18 ajp_att18
05:12:16  23  ,att19 ajp_att19
05:12:16  24  ,att20 ajp_att20
05:12:16  25  ,att21 ajp_att21
05:12:16  26  ,att22 ajp_att22
05:12:16  27  ,att23 ajp_att23
05:12:16  28  ,att24 ajp_att24
05:12:16  29  ,att25 ajp_att25
05:12:16  30  ,att26 ajp_att26
05:12:16  31  ,att27 ajp_att27
05:12:16  32  ,att28 ajp_att28
05:12:16  33  ,att29 ajp_att29
05:12:16  34  ,att30 ajp_att30
05:12:16  35  ,att31 ajp_att31
05:12:16  36  ,att32 ajp_att32
05:12:16  37  ,att33 ajp_att33
05:12:16  38  ,att34 ajp_att34
05:12:16  39  ,att35 ajp_att35
05:12:16  40  ,att36 ajp_att36
05:12:16  41  ,att37 ajp_att37
05:12:16  42  FROM svm6162
05:12:16  43  /

Table created.

Elapsed: 00:00:00.15
05:12:16 SQL> 
05:12:16 SQL> ANALYZE TABLE ajp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
05:12:16 SQL> 
05:12:16 SQL> -- rpt
05:12:16 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19831

Elapsed: 00:00:00.76
05:12:17 SQL> SELECT COUNT(*)FROM ajp_att;

  COUNT(*)
----------
     19831

Elapsed: 00:00:00.00
05:12:17 SQL> 
05:12:17 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
