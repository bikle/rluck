
SQL*Plus: Release 11.2.0.1.0 Production on Fri Jan 7 15:43:10 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

15:43:10 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
15:43:10 SQL> 15:43:10 SQL> --
15:43:10 SQL> -- eur610.sql
15:43:10 SQL> --
15:43:10 SQL> 
15:43:10 SQL> -- Creates views and tables for backtesting a forex SVM strategy
15:43:10 SQL> 
15:43:10 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.01
15:43:10 SQL> 
15:43:10 SQL> -- I created di5min here:
15:43:10 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
15:43:10 SQL> 
15:43:10 SQL> CREATE OR REPLACE VIEW svm6102 AS
15:43:10   2  SELECT
15:43:10   3  pair
15:43:10   4  ,ydate
15:43:10   5  ,prdate
15:43:10   6  ,rownum rnum -- acts as t in my time-series
15:43:10   7  ,clse
15:43:10   8  -- Derive a bunch of attributes from clse, the latest price:
15:43:10   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
15:43:10  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
15:43:10  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
15:43:10  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
15:43:10  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
15:43:10  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
15:43:10  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
15:43:10  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
15:43:10  17  --
15:43:10  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
15:43:10  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
15:43:10  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
15:43:10  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
15:43:10  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
15:43:10  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
15:43:10  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
15:43:10  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
15:43:10  26  --
15:43:10  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
15:43:10  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
15:43:10  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
15:43:10  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
15:43:10  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
15:43:10  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
15:43:10  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
15:43:10  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
15:43:10  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
15:43:10  36  FROM di5min WHERE pair LIKE'%eur%'
15:43:10  37  AND ydate > sysdate - 95
15:43:10  38  ORDER BY ydate
15:43:10  39  /

View created.

Elapsed: 00:00:00.04
15:43:10 SQL> 
15:43:10 SQL> -- rpt
15:43:10 SQL> 
15:43:10 SQL> SELECT
15:43:10   2  pair
15:43:10   3  ,COUNT(pair)
15:43:10   4  ,MIN(clse),MAX(clse)
15:43:10   5  ,MIN(avg6),MAX(avg6)
15:43:10   6  ,MIN(ydate),MAX(ydate)
15:43:10   7  FROM svm6102
15:43:10   8  GROUP BY pair
15:43:10   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_usd       19811   1.295125	   1.4273 1.29772911 1.42436233 2010-10-04 15:45:01 2011-01-07 15:40:00

Elapsed: 00:00:00.94
15:43:11 SQL> 
15:43:11 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
15:43:11 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.04
15:43:11 SQL> CREATE TABLE svm6122 COMPRESS AS
15:43:11   2  SELECT
15:43:11   3  pair
15:43:11   4  ,ydate
15:43:11   5  ,prdate
15:43:11   6  ,clse
15:43:11   7  -- g6 is important. I want to predict g6:
15:43:11   8  ,ld6 - clse g6
15:43:11   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
15:43:11  10  -- I want more attributes from the ones I derived above:
15:43:11  11  -- clse relation to moving-min
15:43:11  12  ,clse-min4  cm4
15:43:11  13  ,clse-min6  cm6
15:43:11  14  ,clse-min8  cm8
15:43:11  15  ,clse-min10 cm10
15:43:11  16  ,clse-min12 cm12
15:43:11  17  ,clse-min14 cm14
15:43:11  18  ,clse-min16 cm16
15:43:11  19  ,clse-min18 cm18
15:43:11  20  -- clse relation to moving-avg
15:43:11  21  ,clse-avg4  ca4
15:43:11  22  ,clse-avg6  ca6
15:43:11  23  ,clse-avg8  ca8
15:43:11  24  ,clse-avg10 ca10
15:43:11  25  ,clse-avg12 ca12
15:43:11  26  ,clse-avg14 ca14
15:43:11  27  ,clse-avg16 ca16
15:43:11  28  ,clse-avg18 ca18
15:43:11  29  -- clse relation to moving-max
15:43:11  30  ,clse-max4  cx4
15:43:11  31  ,clse-max6  cx6
15:43:11  32  ,clse-max8  cx8
15:43:11  33  ,clse-max10 cx10
15:43:11  34  ,clse-max12 cx12
15:43:11  35  ,clse-max14 cx14
15:43:11  36  ,clse-max16 cx16
15:43:11  37  ,clse-max18 cx18
15:43:11  38  -- Derive more attributes.
15:43:11  39  -- I want to use CORR() here to help SVM see the shape of the series.
15:43:11  40  -- But COVAR_POP is more stable:
15:43:11  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
15:43:11  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
15:43:11  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
15:43:11  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
15:43:11  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
15:43:11  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
15:43:11  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
15:43:11  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
15:43:11  49  -- Derive date related attributes:
15:43:11  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
15:43:11  51  ,0+TO_CHAR(ydate,'D')d
15:43:11  52  ,0+TO_CHAR(ydate,'W')w
15:43:11  53  -- mpm stands for minutes-past-midnight:
15:43:11  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
15:43:11  55  -- mph stands for minutes-past-hour:
15:43:11  56  ,0+TO_CHAR(ydate,'MI')mph
15:43:11  57  FROM svm6102
15:43:11  58  ORDER BY ydate
15:43:11  59  /

Table created.

Elapsed: 00:00:02.44
15:43:14 SQL> 
15:43:14 SQL> -- rpt
15:43:14 SQL> 
15:43:14 SQL> SELECT
15:43:14   2  pair
15:43:14   3  ,COUNT(pair)
15:43:14   4  ,MIN(clse),MAX(clse)
15:43:14   5  ,MIN(ydate),MAX(ydate)
15:43:14   6  FROM svm6122
15:43:14   7  GROUP BY pair
15:43:14   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_usd       19811   1.295125	   1.4273 2010-10-04 15:45:01 2011-01-07 15:40:00

Elapsed: 00:00:00.04
15:43:14 SQL> 
15:43:14 SQL> -- Prepare for derivation of NTILE based params:
15:43:14 SQL> 
15:43:14 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.14
15:43:14 SQL> CREATE TABLE svm6142 COMPRESS AS
15:43:14   2  SELECT
15:43:14   3  pair
15:43:14   4  ,ydate
15:43:14   5  ,prdate
15:43:14   6  ,clse
15:43:14   7  ,g6
15:43:14   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
15:43:14   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
15:43:14  10  ,CASE WHEN trend IS NULL THEN 1
15:43:14  11  	    WHEN trend =0      THEN 1
15:43:14  12  	    ELSE trend END trend
15:43:14  13  ,cm4
15:43:14  14  ,cm6
15:43:14  15  ,cm8
15:43:14  16  ,cm10
15:43:14  17  ,cm12
15:43:14  18  ,cm14
15:43:14  19  ,cm16
15:43:14  20  ,cm18
15:43:14  21  --
15:43:14  22  ,ca4
15:43:14  23  ,ca6
15:43:14  24  ,ca8
15:43:14  25  ,ca10
15:43:14  26  ,ca12
15:43:14  27  ,ca14
15:43:14  28  ,ca16
15:43:14  29  ,ca18
15:43:14  30  --
15:43:14  31  ,cx4
15:43:14  32  ,cx6
15:43:14  33  ,cx8
15:43:14  34  ,cx10
15:43:14  35  ,cx12
15:43:14  36  ,cx14
15:43:14  37  ,cx16
15:43:14  38  ,cx18
15:43:14  39  --
15:43:14  40  ,crr4
15:43:14  41  ,crr6
15:43:14  42  ,crr8
15:43:14  43  ,crr10
15:43:14  44  ,crr12
15:43:14  45  ,crr14
15:43:14  46  ,crr16
15:43:14  47  ,crr18
15:43:14  48  --
15:43:14  49  ,hh
15:43:14  50  ,d
15:43:14  51  ,w
15:43:14  52  ,mpm
15:43:14  53  ,mph
15:43:14  54  FROM svm6122
15:43:14  55  ORDER BY ydate
15:43:14  56  /

Table created.

Elapsed: 00:00:00.38
15:43:14 SQL> 
15:43:14 SQL> -- rpt
15:43:14 SQL> 
15:43:14 SQL> SELECT
15:43:14   2  pair
15:43:14   3  ,trend
15:43:14   4  ,gatt
15:43:14   5  ,COUNT(pair)
15:43:14   6  ,AVG(g6)
15:43:14   7  FROM svm6142
15:43:14   8  GROUP BY pair,trend,gatt
15:43:14   9  ORDER BY pair,trend,gatt
15:43:14  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6583 -.00313988
eur_usd 	-1 up	      3567 .004449618
eur_usd 	-1		63
eur_usd 	 1 nup	      5884 -.00324274
eur_usd 	 1 up	      3705 .005071238
eur_usd 	 1		 9

6 rows selected.

Elapsed: 00:00:00.04
15:43:14 SQL> 
15:43:14 SQL> 
15:43:14 SQL> -- Derive NTILE based params:
15:43:14 SQL> 
15:43:14 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.31
15:43:15 SQL> CREATE TABLE svm6162 COMPRESS AS
15:43:15   2  SELECT
15:43:15   3  pair
15:43:15   4  ,ydate
15:43:15   5  ,prdate
15:43:15   6  ,clse
15:43:15   7  ,g6
15:43:15   8  ,gatt
15:43:15   9  ,gattn
15:43:15  10  ,trend
15:43:15  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
15:43:15  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
15:43:15  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
15:43:15  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
15:43:15  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
15:43:15  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
15:43:15  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
15:43:15  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
15:43:15  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
15:43:15  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
15:43:15  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
15:43:15  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
15:43:15  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
15:43:15  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
15:43:15  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
15:43:15  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
15:43:15  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
15:43:15  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
15:43:15  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
15:43:15  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
15:43:15  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
15:43:15  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
15:43:15  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
15:43:15  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
15:43:15  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
15:43:15  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
15:43:15  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
15:43:15  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
15:43:15  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
15:43:15  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
15:43:15  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
15:43:15  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
15:43:15  43  ,hh  att32
15:43:15  44  ,d   att33
15:43:15  45  ,w   att34
15:43:15  46  ,mpm att35
15:43:15  47  ,mph att36
15:43:15  48  ,trend att37
15:43:15  49  FROM svm6142
15:43:15  50  ORDER BY ydate
15:43:15  51  /

Table created.

Elapsed: 00:00:04.73
15:43:19 SQL> 
15:43:19 SQL> -- rpt
15:43:19 SQL> 
15:43:19 SQL> SELECT
15:43:19   2  pair
15:43:19   3  ,trend
15:43:19   4  ,gatt
15:43:19   5  ,COUNT(pair)
15:43:19   6  ,AVG(g6)
15:43:19   7  FROM svm6162
15:43:19   8  GROUP BY pair,trend,gatt
15:43:19   9  ORDER BY pair,trend,gatt
15:43:19  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6583 -.00313988
eur_usd 	-1 up	      3567 .004449618
eur_usd 	-1		63
eur_usd 	 1 nup	      5884 -.00324274
eur_usd 	 1 up	      3705 .005071238
eur_usd 	 1		 9

6 rows selected.

Elapsed: 00:00:00.03
15:43:19 SQL> 
15:43:19 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.14
15:43:20 SQL> CREATE TABLE modsrc COMPRESS AS
15:43:20   2  SELECT
15:43:20   3  pair
15:43:20   4  ,ydate
15:43:20   5  ,prdate
15:43:20   6  ,trend
15:43:20   7  ,g6
15:43:20   8  ,gatt
15:43:20   9  ,gattn
15:43:20  10  FROM svm6162
15:43:20  11  /

Table created.

Elapsed: 00:00:00.09
15:43:20 SQL> 
15:43:20 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
15:43:20 SQL> 
15:43:20 SQL> DROP   TABLE eur_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
15:43:20 SQL> CREATE TABLE eur_ms610 COMPRESS AS
15:43:20   2  SELECT
15:43:20   3  ydate
15:43:20   4  ,trend eur_trend
15:43:20   5  ,g6    eur_g6
15:43:20   6  ,gatt  eur_gatt
15:43:20   7  ,gattn eur_gattn
15:43:20   8  FROM modsrc
15:43:20   9  /

Table created.

Elapsed: 00:00:00.06
15:43:20 SQL> 
15:43:20 SQL> ANALYZE TABLE eur_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
15:43:20 SQL> 
15:43:20 SQL> -- I need a copy of the attributes:
15:43:20 SQL> 
15:43:20 SQL> 
15:43:20 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.33
15:43:20 SQL> CREATE TABLE eur_att COMPRESS AS
15:43:20   2  SELECT
15:43:20   3  ydate
15:43:20   4  ,att00 eur_att00
15:43:20   5  ,att01 eur_att01
15:43:20   6  ,att02 eur_att02
15:43:20   7  ,att03 eur_att03
15:43:20   8  ,att04 eur_att04
15:43:20   9  ,att05 eur_att05
15:43:20  10  ,att06 eur_att06
15:43:20  11  ,att07 eur_att07
15:43:20  12  ,att08 eur_att08
15:43:20  13  ,att09 eur_att09
15:43:20  14  ,att10 eur_att10
15:43:20  15  ,att11 eur_att11
15:43:20  16  ,att12 eur_att12
15:43:20  17  ,att13 eur_att13
15:43:20  18  ,att14 eur_att14
15:43:20  19  ,att15 eur_att15
15:43:20  20  ,att16 eur_att16
15:43:20  21  ,att17 eur_att17
15:43:20  22  ,att18 eur_att18
15:43:20  23  ,att19 eur_att19
15:43:20  24  ,att20 eur_att20
15:43:20  25  ,att21 eur_att21
15:43:20  26  ,att22 eur_att22
15:43:20  27  ,att23 eur_att23
15:43:20  28  ,att24 eur_att24
15:43:20  29  ,att25 eur_att25
15:43:20  30  ,att26 eur_att26
15:43:20  31  ,att27 eur_att27
15:43:20  32  ,att28 eur_att28
15:43:20  33  ,att29 eur_att29
15:43:20  34  ,att30 eur_att30
15:43:20  35  ,att31 eur_att31
15:43:20  36  ,att32 eur_att32
15:43:20  37  ,att33 eur_att33
15:43:20  38  ,att34 eur_att34
15:43:20  39  ,att35 eur_att35
15:43:20  40  ,att36 eur_att36
15:43:20  41  ,att37 eur_att37
15:43:20  42  FROM svm6162
15:43:20  43  /

Table created.

Elapsed: 00:00:00.17
15:43:21 SQL> 
15:43:21 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
15:43:21 SQL> 
15:43:21 SQL> -- rpt
15:43:21 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19811

Elapsed: 00:00:00.97
15:43:22 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     19811

Elapsed: 00:00:00.00
15:43:22 SQL> 
15:43:22 SQL> --
15:43:22 SQL> -- aud610.sql
15:43:22 SQL> --
15:43:22 SQL> 
15:43:22 SQL> -- Creates views and tables for backtesting a forex SVM strategy
15:43:22 SQL> 
15:43:22 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.36
15:43:22 SQL> 
15:43:22 SQL> -- I created di5min here:
15:43:22 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
15:43:22 SQL> 
15:43:22 SQL> CREATE OR REPLACE VIEW svm6102 AS
15:43:22   2  SELECT
15:43:22   3  pair
15:43:22   4  ,ydate
15:43:22   5  ,prdate
15:43:22   6  ,rownum rnum -- acts as t in my time-series
15:43:22   7  ,clse
15:43:22   8  -- Derive a bunch of attributes from clse, the latest price:
15:43:22   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
15:43:22  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
15:43:22  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
15:43:22  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
15:43:22  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
15:43:22  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
15:43:22  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
15:43:22  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
15:43:22  17  --
15:43:22  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
15:43:22  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
15:43:22  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
15:43:22  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
15:43:22  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
15:43:22  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
15:43:22  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
15:43:22  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
15:43:22  26  --
15:43:22  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
15:43:22  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
15:43:22  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
15:43:22  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
15:43:22  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
15:43:22  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
15:43:22  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
15:43:22  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
15:43:22  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
15:43:22  36  FROM di5min WHERE pair LIKE'%aud%'
15:43:22  37  AND ydate > sysdate - 95
15:43:22  38  ORDER BY ydate
15:43:22  39  /

View created.

Elapsed: 00:00:00.05
15:43:22 SQL> 
15:43:22 SQL> -- rpt
15:43:22 SQL> 
15:43:22 SQL> SELECT
15:43:22   2  pair
15:43:22   3  ,COUNT(pair)
15:43:22   4  ,MIN(clse),MAX(clse)
15:43:22   5  ,MIN(avg6),MAX(avg6)
15:43:22   6  ,MIN(ydate),MAX(ydate)
15:43:22   7  FROM svm6102
15:43:22   8  GROUP BY pair
15:43:22   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
aud_usd       19808	.95405	  1.02495 .957141438 1.02284247 2010-10-04 15:45:01 2011-01-07 15:40:00

Elapsed: 00:00:00.88
15:43:23 SQL> 
15:43:23 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
15:43:23 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.24
15:43:24 SQL> CREATE TABLE svm6122 COMPRESS AS
15:43:24   2  SELECT
15:43:24   3  pair
15:43:24   4  ,ydate
15:43:24   5  ,prdate
15:43:24   6  ,clse
15:43:24   7  -- g6 is important. I want to predict g6:
15:43:24   8  ,ld6 - clse g6
15:43:24   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
15:43:24  10  -- I want more attributes from the ones I derived above:
15:43:24  11  -- clse relation to moving-min
15:43:24  12  ,clse-min4  cm4
15:43:24  13  ,clse-min6  cm6
15:43:24  14  ,clse-min8  cm8
15:43:24  15  ,clse-min10 cm10
15:43:24  16  ,clse-min12 cm12
15:43:24  17  ,clse-min14 cm14
15:43:24  18  ,clse-min16 cm16
15:43:24  19  ,clse-min18 cm18
15:43:24  20  -- clse relation to moving-avg
15:43:24  21  ,clse-avg4  ca4
15:43:24  22  ,clse-avg6  ca6
15:43:24  23  ,clse-avg8  ca8
15:43:24  24  ,clse-avg10 ca10
15:43:24  25  ,clse-avg12 ca12
15:43:24  26  ,clse-avg14 ca14
15:43:24  27  ,clse-avg16 ca16
15:43:24  28  ,clse-avg18 ca18
15:43:24  29  -- clse relation to moving-max
15:43:24  30  ,clse-max4  cx4
15:43:24  31  ,clse-max6  cx6
15:43:24  32  ,clse-max8  cx8
15:43:24  33  ,clse-max10 cx10
15:43:24  34  ,clse-max12 cx12
15:43:24  35  ,clse-max14 cx14
15:43:24  36  ,clse-max16 cx16
15:43:24  37  ,clse-max18 cx18
15:43:24  38  -- Derive more attributes.
15:43:24  39  -- I want to use CORR() here to help SVM see the shape of the series.
15:43:24  40  -- But COVAR_POP is more stable:
15:43:24  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
15:43:24  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
15:43:24  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
15:43:24  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
15:43:24  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
15:43:24  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
15:43:24  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
15:43:24  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
15:43:24  49  -- Derive date related attributes:
15:43:24  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
15:43:24  51  ,0+TO_CHAR(ydate,'D')d
15:43:24  52  ,0+TO_CHAR(ydate,'W')w
15:43:24  53  -- mpm stands for minutes-past-midnight:
15:43:24  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
15:43:24  55  -- mph stands for minutes-past-hour:
15:43:24  56  ,0+TO_CHAR(ydate,'MI')mph
15:43:24  57  FROM svm6102
15:43:24  58  ORDER BY ydate
15:43:24  59  /

Table created.

Elapsed: 00:00:02.10
15:43:26 SQL> 
15:43:26 SQL> -- rpt
15:43:26 SQL> 
15:43:26 SQL> SELECT
15:43:26   2  pair
15:43:26   3  ,COUNT(pair)
15:43:26   4  ,MIN(clse),MAX(clse)
15:43:26   5  ,MIN(ydate),MAX(ydate)
15:43:26   6  FROM svm6122
15:43:26   7  GROUP BY pair
15:43:26   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
aud_usd       19808	.95405	  1.02495 2010-10-04 15:45:01 2011-01-07 15:40:00

Elapsed: 00:00:00.05
15:43:26 SQL> 
15:43:26 SQL> -- Prepare for derivation of NTILE based params:
15:43:26 SQL> 
15:43:26 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.37
15:43:26 SQL> CREATE TABLE svm6142 COMPRESS AS
15:43:26   2  SELECT
15:43:26   3  pair
15:43:26   4  ,ydate
15:43:26   5  ,prdate
15:43:26   6  ,clse
15:43:26   7  ,g6
15:43:26   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
15:43:26   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
15:43:26  10  ,CASE WHEN trend IS NULL THEN 1
15:43:26  11  	    WHEN trend =0      THEN 1
15:43:26  12  	    ELSE trend END trend
15:43:26  13  ,cm4
15:43:26  14  ,cm6
15:43:26  15  ,cm8
15:43:26  16  ,cm10
15:43:26  17  ,cm12
15:43:26  18  ,cm14
15:43:26  19  ,cm16
15:43:26  20  ,cm18
15:43:26  21  --
15:43:26  22  ,ca4
15:43:26  23  ,ca6
15:43:26  24  ,ca8
15:43:26  25  ,ca10
15:43:26  26  ,ca12
15:43:26  27  ,ca14
15:43:26  28  ,ca16
15:43:26  29  ,ca18
15:43:26  30  --
15:43:26  31  ,cx4
15:43:26  32  ,cx6
15:43:26  33  ,cx8
15:43:26  34  ,cx10
15:43:26  35  ,cx12
15:43:26  36  ,cx14
15:43:26  37  ,cx16
15:43:26  38  ,cx18
15:43:26  39  --
15:43:26  40  ,crr4
15:43:26  41  ,crr6
15:43:26  42  ,crr8
15:43:26  43  ,crr10
15:43:26  44  ,crr12
15:43:26  45  ,crr14
15:43:26  46  ,crr16
15:43:26  47  ,crr18
15:43:26  48  --
15:43:26  49  ,hh
15:43:26  50  ,d
15:43:26  51  ,w
15:43:26  52  ,mpm
15:43:26  53  ,mph
15:43:26  54  FROM svm6122
15:43:26  55  ORDER BY ydate
15:43:26  56  /

Table created.

Elapsed: 00:00:00.36
15:43:26 SQL> 
15:43:26 SQL> -- rpt
15:43:26 SQL> 
15:43:26 SQL> SELECT
15:43:26   2  pair
15:43:26   3  ,trend
15:43:26   4  ,gatt
15:43:26   5  ,COUNT(pair)
15:43:26   6  ,AVG(g6)
15:43:26   7  FROM svm6142
15:43:26   8  GROUP BY pair,trend,gatt
15:43:26   9  ORDER BY pair,trend,gatt
15:43:26  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5694 -.00214492
aud_usd 	-1 up	      3709 .003768947
aud_usd 	-1		40
aud_usd 	 1 nup	      6739 -.00213156
aud_usd 	 1 up	      3594 .004054149
aud_usd 	 1		32

6 rows selected.

Elapsed: 00:00:00.03
15:43:26 SQL> 
15:43:26 SQL> 
15:43:26 SQL> -- Derive NTILE based params:
15:43:26 SQL> 
15:43:26 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.15
15:43:27 SQL> CREATE TABLE svm6162 COMPRESS AS
15:43:27   2  SELECT
15:43:27   3  pair
15:43:27   4  ,ydate
15:43:27   5  ,prdate
15:43:27   6  ,clse
15:43:27   7  ,g6
15:43:27   8  ,gatt
15:43:27   9  ,gattn
15:43:27  10  ,trend
15:43:27  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
15:43:27  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
15:43:27  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
15:43:27  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
15:43:27  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
15:43:27  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
15:43:27  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
15:43:27  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
15:43:27  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
15:43:27  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
15:43:27  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
15:43:27  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
15:43:27  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
15:43:27  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
15:43:27  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
15:43:27  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
15:43:27  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
15:43:27  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
15:43:27  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
15:43:27  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
15:43:27  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
15:43:27  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
15:43:27  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
15:43:27  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
15:43:27  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
15:43:27  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
15:43:27  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
15:43:27  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
15:43:27  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
15:43:27  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
15:43:27  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
15:43:27  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
15:43:27  43  ,hh  att32
15:43:27  44  ,d   att33
15:43:27  45  ,w   att34
15:43:27  46  ,mpm att35
15:43:27  47  ,mph att36
15:43:27  48  ,trend att37
15:43:27  49  FROM svm6142
15:43:27  50  ORDER BY ydate
15:43:27  51  /

Table created.

Elapsed: 00:00:04.91
15:43:32 SQL> 
15:43:32 SQL> -- rpt
15:43:32 SQL> 
15:43:32 SQL> SELECT
15:43:32   2  pair
15:43:32   3  ,trend
15:43:32   4  ,gatt
15:43:32   5  ,COUNT(pair)
15:43:32   6  ,AVG(g6)
15:43:32   7  FROM svm6162
15:43:32   8  GROUP BY pair,trend,gatt
15:43:32   9  ORDER BY pair,trend,gatt
15:43:32  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5694 -.00214492
aud_usd 	-1 up	      3709 .003768947
aud_usd 	-1		40
aud_usd 	 1 nup	      6739 -.00213156
aud_usd 	 1 up	      3594 .004054149
aud_usd 	 1		32

6 rows selected.

Elapsed: 00:00:00.03
15:43:32 SQL> 
15:43:32 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.17
15:43:32 SQL> CREATE TABLE modsrc COMPRESS AS
15:43:32   2  SELECT
15:43:32   3  pair
15:43:32   4  ,ydate
15:43:32   5  ,prdate
15:43:32   6  ,trend
15:43:32   7  ,g6
15:43:32   8  ,gatt
15:43:32   9  ,gattn
15:43:32  10  FROM svm6162
15:43:32  11  /

Table created.

Elapsed: 00:00:00.08
15:43:32 SQL> 
15:43:32 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.28
15:43:32 SQL> 
15:43:32 SQL> DROP   TABLE aud_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
15:43:32 SQL> CREATE TABLE aud_ms610 COMPRESS AS
15:43:32   2  SELECT
15:43:32   3  ydate
15:43:32   4  ,trend aud_trend
15:43:32   5  ,g6    aud_g6
15:43:32   6  ,gatt  aud_gatt
15:43:32   7  ,gattn aud_gattn
15:43:32   8  FROM modsrc
15:43:32   9  /

Table created.

Elapsed: 00:00:00.06
15:43:32 SQL> 
15:43:32 SQL> ANALYZE TABLE aud_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
15:43:32 SQL> 
15:43:32 SQL> -- I need a copy of the attributes:
15:43:32 SQL> 
15:43:32 SQL> 
15:43:32 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.05
15:43:32 SQL> CREATE TABLE aud_att COMPRESS AS
15:43:32   2  SELECT
15:43:32   3  ydate
15:43:32   4  ,att00 aud_att00
15:43:32   5  ,att01 aud_att01
15:43:32   6  ,att02 aud_att02
15:43:32   7  ,att03 aud_att03
15:43:32   8  ,att04 aud_att04
15:43:32   9  ,att05 aud_att05
15:43:32  10  ,att06 aud_att06
15:43:32  11  ,att07 aud_att07
15:43:32  12  ,att08 aud_att08
15:43:32  13  ,att09 aud_att09
15:43:32  14  ,att10 aud_att10
15:43:32  15  ,att11 aud_att11
15:43:32  16  ,att12 aud_att12
15:43:32  17  ,att13 aud_att13
15:43:32  18  ,att14 aud_att14
15:43:32  19  ,att15 aud_att15
15:43:32  20  ,att16 aud_att16
15:43:32  21  ,att17 aud_att17
15:43:32  22  ,att18 aud_att18
15:43:32  23  ,att19 aud_att19
15:43:32  24  ,att20 aud_att20
15:43:32  25  ,att21 aud_att21
15:43:32  26  ,att22 aud_att22
15:43:32  27  ,att23 aud_att23
15:43:32  28  ,att24 aud_att24
15:43:32  29  ,att25 aud_att25
15:43:32  30  ,att26 aud_att26
15:43:32  31  ,att27 aud_att27
15:43:32  32  ,att28 aud_att28
15:43:32  33  ,att29 aud_att29
15:43:32  34  ,att30 aud_att30
15:43:32  35  ,att31 aud_att31
15:43:32  36  ,att32 aud_att32
15:43:32  37  ,att33 aud_att33
15:43:32  38  ,att34 aud_att34
15:43:32  39  ,att35 aud_att35
15:43:32  40  ,att36 aud_att36
15:43:32  41  ,att37 aud_att37
15:43:32  42  FROM svm6162
15:43:32  43  /

Table created.

Elapsed: 00:00:00.17
15:43:33 SQL> 
15:43:33 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
15:43:33 SQL> 
15:43:33 SQL> -- rpt
15:43:33 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19808

Elapsed: 00:00:00.86
15:43:34 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     19808

Elapsed: 00:00:00.00
15:43:34 SQL> 
15:43:34 SQL> --
15:43:34 SQL> -- gbp610.sql
15:43:34 SQL> --
15:43:34 SQL> 
15:43:34 SQL> -- Creates views and tables for backtesting a forex SVM strategy
15:43:34 SQL> 
15:43:34 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:01.47
15:43:35 SQL> 
15:43:35 SQL> -- I created di5min here:
15:43:35 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
15:43:35 SQL> 
15:43:35 SQL> CREATE OR REPLACE VIEW svm6102 AS
15:43:35   2  SELECT
15:43:35   3  pair
15:43:35   4  ,ydate
15:43:35   5  ,prdate
15:43:35   6  ,rownum rnum -- acts as t in my time-series
15:43:35   7  ,clse
15:43:35   8  -- Derive a bunch of attributes from clse, the latest price:
15:43:35   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
15:43:35  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
15:43:35  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
15:43:35  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
15:43:35  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
15:43:35  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
15:43:35  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
15:43:35  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
15:43:35  17  --
15:43:35  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
15:43:35  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
15:43:35  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
15:43:35  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
15:43:35  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
15:43:35  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
15:43:35  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
15:43:35  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
15:43:35  26  --
15:43:35  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
15:43:35  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
15:43:35  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
15:43:35  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
15:43:35  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
15:43:35  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
15:43:35  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
15:43:35  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
15:43:35  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
15:43:35  36  FROM di5min WHERE pair LIKE'%gbp%'
15:43:35  37  AND ydate > sysdate - 95
15:43:35  38  ORDER BY ydate
15:43:35  39  /

View created.

Elapsed: 00:00:00.05
15:43:35 SQL> 
15:43:35 SQL> -- rpt
15:43:35 SQL> 
15:43:35 SQL> SELECT
15:43:35   2  pair
15:43:35   3  ,COUNT(pair)
15:43:35   4  ,MIN(clse),MAX(clse)
15:43:35   5  ,MIN(avg6),MAX(avg6)
15:43:35   6  ,MIN(ydate),MAX(ydate)
15:43:35   7  FROM svm6102
15:43:35   8  GROUP BY pair
15:43:35   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
gbp_usd       19810   1.535325	   1.6295 1.53696747 1.62716986 2010-10-04 15:45:01 2011-01-07 15:40:00

Elapsed: 00:00:00.87
15:43:36 SQL> 
15:43:36 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
15:43:36 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.29
15:43:37 SQL> CREATE TABLE svm6122 COMPRESS AS
15:43:37   2  SELECT
15:43:37   3  pair
15:43:37   4  ,ydate
15:43:37   5  ,prdate
15:43:37   6  ,clse
15:43:37   7  -- g6 is important. I want to predict g6:
15:43:37   8  ,ld6 - clse g6
15:43:37   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
15:43:37  10  -- I want more attributes from the ones I derived above:
15:43:37  11  -- clse relation to moving-min
15:43:37  12  ,clse-min4  cm4
15:43:37  13  ,clse-min6  cm6
15:43:37  14  ,clse-min8  cm8
15:43:37  15  ,clse-min10 cm10
15:43:37  16  ,clse-min12 cm12
15:43:37  17  ,clse-min14 cm14
15:43:37  18  ,clse-min16 cm16
15:43:37  19  ,clse-min18 cm18
15:43:37  20  -- clse relation to moving-avg
15:43:37  21  ,clse-avg4  ca4
15:43:37  22  ,clse-avg6  ca6
15:43:37  23  ,clse-avg8  ca8
15:43:37  24  ,clse-avg10 ca10
15:43:37  25  ,clse-avg12 ca12
15:43:37  26  ,clse-avg14 ca14
15:43:37  27  ,clse-avg16 ca16
15:43:37  28  ,clse-avg18 ca18
15:43:37  29  -- clse relation to moving-max
15:43:37  30  ,clse-max4  cx4
15:43:37  31  ,clse-max6  cx6
15:43:37  32  ,clse-max8  cx8
15:43:37  33  ,clse-max10 cx10
15:43:37  34  ,clse-max12 cx12
15:43:37  35  ,clse-max14 cx14
15:43:37  36  ,clse-max16 cx16
15:43:37  37  ,clse-max18 cx18
15:43:37  38  -- Derive more attributes.
15:43:37  39  -- I want to use CORR() here to help SVM see the shape of the series.
15:43:37  40  -- But COVAR_POP is more stable:
15:43:37  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
15:43:37  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
15:43:37  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
15:43:37  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
15:43:37  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
15:43:37  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
15:43:37  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
15:43:37  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
15:43:37  49  -- Derive date related attributes:
15:43:37  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
15:43:37  51  ,0+TO_CHAR(ydate,'D')d
15:43:37  52  ,0+TO_CHAR(ydate,'W')w
15:43:37  53  -- mpm stands for minutes-past-midnight:
15:43:37  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
15:43:37  55  -- mph stands for minutes-past-hour:
15:43:37  56  ,0+TO_CHAR(ydate,'MI')mph
15:43:37  57  FROM svm6102
15:43:37  58  ORDER BY ydate
15:43:37  59  /

Table created.

Elapsed: 00:00:02.06
15:43:39 SQL> 
15:43:39 SQL> -- rpt
15:43:39 SQL> 
15:43:39 SQL> SELECT
15:43:39   2  pair
15:43:39   3  ,COUNT(pair)
15:43:39   4  ,MIN(clse),MAX(clse)
15:43:39   5  ,MIN(ydate),MAX(ydate)
15:43:39   6  FROM svm6122
15:43:39   7  GROUP BY pair
15:43:39   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
gbp_usd       19810   1.535325	   1.6295 2010-10-04 15:45:01 2011-01-07 15:40:00

Elapsed: 00:00:00.04
15:43:39 SQL> 
15:43:39 SQL> -- Prepare for derivation of NTILE based params:
15:43:39 SQL> 
15:43:39 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.29
15:43:39 SQL> CREATE TABLE svm6142 COMPRESS AS
15:43:39   2  SELECT
15:43:39   3  pair
15:43:39   4  ,ydate
15:43:39   5  ,prdate
15:43:39   6  ,clse
15:43:39   7  ,g6
15:43:39   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
15:43:39   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
15:43:39  10  ,CASE WHEN trend IS NULL THEN 1
15:43:39  11  	    WHEN trend =0      THEN 1
15:43:39  12  	    ELSE trend END trend
15:43:39  13  ,cm4
15:43:39  14  ,cm6
15:43:39  15  ,cm8
15:43:39  16  ,cm10
15:43:39  17  ,cm12
15:43:39  18  ,cm14
15:43:39  19  ,cm16
15:43:39  20  ,cm18
15:43:39  21  --
15:43:39  22  ,ca4
15:43:39  23  ,ca6
15:43:39  24  ,ca8
15:43:39  25  ,ca10
15:43:39  26  ,ca12
15:43:39  27  ,ca14
15:43:39  28  ,ca16
15:43:39  29  ,ca18
15:43:39  30  --
15:43:39  31  ,cx4
15:43:39  32  ,cx6
15:43:39  33  ,cx8
15:43:39  34  ,cx10
15:43:39  35  ,cx12
15:43:39  36  ,cx14
15:43:39  37  ,cx16
15:43:39  38  ,cx18
15:43:39  39  --
15:43:39  40  ,crr4
15:43:39  41  ,crr6
15:43:39  42  ,crr8
15:43:39  43  ,crr10
15:43:39  44  ,crr12
15:43:39  45  ,crr14
15:43:39  46  ,crr16
15:43:39  47  ,crr18
15:43:39  48  --
15:43:39  49  ,hh
15:43:39  50  ,d
15:43:39  51  ,w
15:43:39  52  ,mpm
15:43:39  53  ,mph
15:43:39  54  FROM svm6122
15:43:39  55  ORDER BY ydate
15:43:39  56  /

Table created.

Elapsed: 00:00:00.36
15:43:39 SQL> 
15:43:39 SQL> -- rpt
15:43:39 SQL> 
15:43:39 SQL> SELECT
15:43:39   2  pair
15:43:39   3  ,trend
15:43:39   4  ,gatt
15:43:39   5  ,COUNT(pair)
15:43:39   6  ,AVG(g6)
15:43:39   7  FROM svm6142
15:43:39   8  GROUP BY pair,trend,gatt
15:43:39   9  ORDER BY pair,trend,gatt
15:43:39  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6541 -.00260438
gbp_usd 	-1 up	      3552 .004334463
gbp_usd 	-1		 5
gbp_usd 	 1 nup	      6194 -.00267203
gbp_usd 	 1 up	      3451 .004529162
gbp_usd 	 1		67

6 rows selected.

Elapsed: 00:00:00.05
15:43:39 SQL> 
15:43:39 SQL> 
15:43:39 SQL> -- Derive NTILE based params:
15:43:39 SQL> 
15:43:39 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.16
15:43:40 SQL> CREATE TABLE svm6162 COMPRESS AS
15:43:40   2  SELECT
15:43:40   3  pair
15:43:40   4  ,ydate
15:43:40   5  ,prdate
15:43:40   6  ,clse
15:43:40   7  ,g6
15:43:40   8  ,gatt
15:43:40   9  ,gattn
15:43:40  10  ,trend
15:43:40  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
15:43:40  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
15:43:40  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
15:43:40  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
15:43:40  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
15:43:40  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
15:43:40  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
15:43:40  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
15:43:40  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
15:43:40  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
15:43:40  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
15:43:40  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
15:43:40  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
15:43:40  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
15:43:40  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
15:43:40  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
15:43:40  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
15:43:40  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
15:43:40  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
15:43:40  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
15:43:40  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
15:43:40  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
15:43:40  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
15:43:40  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
15:43:40  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
15:43:40  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
15:43:40  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
15:43:40  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
15:43:40  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
15:43:40  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
15:43:40  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
15:43:40  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
15:43:40  43  ,hh  att32
15:43:40  44  ,d   att33
15:43:40  45  ,w   att34
15:43:40  46  ,mpm att35
15:43:40  47  ,mph att36
15:43:40  48  ,trend att37
15:43:40  49  FROM svm6142
15:43:40  50  ORDER BY ydate
15:43:40  51  /

Table created.

Elapsed: 00:00:04.82
15:43:44 SQL> 
15:43:44 SQL> -- rpt
15:43:44 SQL> 
15:43:44 SQL> SELECT
15:43:44   2  pair
15:43:44   3  ,trend
15:43:44   4  ,gatt
15:43:44   5  ,COUNT(pair)
15:43:44   6  ,AVG(g6)
15:43:44   7  FROM svm6162
15:43:44   8  GROUP BY pair,trend,gatt
15:43:44   9  ORDER BY pair,trend,gatt
15:43:44  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6541 -.00260438
gbp_usd 	-1 up	      3552 .004334463
gbp_usd 	-1		 5
gbp_usd 	 1 nup	      6194 -.00267203
gbp_usd 	 1 up	      3451 .004529162
gbp_usd 	 1		67

6 rows selected.

Elapsed: 00:00:00.03
15:43:44 SQL> 
15:43:44 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.15
15:43:45 SQL> CREATE TABLE modsrc COMPRESS AS
15:43:45   2  SELECT
15:43:45   3  pair
15:43:45   4  ,ydate
15:43:45   5  ,prdate
15:43:45   6  ,trend
15:43:45   7  ,g6
15:43:45   8  ,gatt
15:43:45   9  ,gattn
15:43:45  10  FROM svm6162
15:43:45  11  /

Table created.

Elapsed: 00:00:00.11
15:43:45 SQL> 
15:43:45 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.27
15:43:45 SQL> 
15:43:45 SQL> DROP   TABLE gbp_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
15:43:45 SQL> CREATE TABLE gbp_ms610 COMPRESS AS
15:43:45   2  SELECT
15:43:45   3  ydate
15:43:45   4  ,trend gbp_trend
15:43:45   5  ,g6    gbp_g6
15:43:45   6  ,gatt  gbp_gatt
15:43:45   7  ,gattn gbp_gattn
15:43:45   8  FROM modsrc
15:43:45   9  /

Table created.

Elapsed: 00:00:00.05
15:43:45 SQL> 
15:43:45 SQL> ANALYZE TABLE gbp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
15:43:45 SQL> 
15:43:45 SQL> -- I need a copy of the attributes:
15:43:45 SQL> 
15:43:45 SQL> 
15:43:45 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.05
15:43:45 SQL> CREATE TABLE gbp_att COMPRESS AS
15:43:45   2  SELECT
15:43:45   3  ydate
15:43:45   4  ,att00 gbp_att00
15:43:45   5  ,att01 gbp_att01
15:43:45   6  ,att02 gbp_att02
15:43:45   7  ,att03 gbp_att03
15:43:45   8  ,att04 gbp_att04
15:43:45   9  ,att05 gbp_att05
15:43:45  10  ,att06 gbp_att06
15:43:45  11  ,att07 gbp_att07
15:43:45  12  ,att08 gbp_att08
15:43:45  13  ,att09 gbp_att09
15:43:45  14  ,att10 gbp_att10
15:43:45  15  ,att11 gbp_att11
15:43:45  16  ,att12 gbp_att12
15:43:45  17  ,att13 gbp_att13
15:43:45  18  ,att14 gbp_att14
15:43:45  19  ,att15 gbp_att15
15:43:45  20  ,att16 gbp_att16
15:43:45  21  ,att17 gbp_att17
15:43:45  22  ,att18 gbp_att18
15:43:45  23  ,att19 gbp_att19
15:43:45  24  ,att20 gbp_att20
15:43:45  25  ,att21 gbp_att21
15:43:45  26  ,att22 gbp_att22
15:43:45  27  ,att23 gbp_att23
15:43:45  28  ,att24 gbp_att24
15:43:45  29  ,att25 gbp_att25
15:43:45  30  ,att26 gbp_att26
15:43:45  31  ,att27 gbp_att27
15:43:45  32  ,att28 gbp_att28
15:43:45  33  ,att29 gbp_att29
15:43:45  34  ,att30 gbp_att30
15:43:45  35  ,att31 gbp_att31
15:43:45  36  ,att32 gbp_att32
15:43:45  37  ,att33 gbp_att33
15:43:45  38  ,att34 gbp_att34
15:43:45  39  ,att35 gbp_att35
15:43:45  40  ,att36 gbp_att36
15:43:45  41  ,att37 gbp_att37
15:43:45  42  FROM svm6162
15:43:45  43  /

Table created.

Elapsed: 00:00:00.20
15:43:45 SQL> 
15:43:45 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.48
15:43:46 SQL> 
15:43:46 SQL> -- rpt
15:43:46 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19810

Elapsed: 00:00:00.87
15:43:47 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     19810

Elapsed: 00:00:00.00
15:43:47 SQL> 
15:43:47 SQL> --
15:43:47 SQL> -- jpy610.sql
15:43:47 SQL> --
15:43:47 SQL> 
15:43:47 SQL> -- Creates views and tables for backtesting a forex SVM strategy
15:43:47 SQL> 
15:43:47 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.46
15:43:47 SQL> 
15:43:47 SQL> -- I created di5min here:
15:43:47 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
15:43:47 SQL> 
15:43:47 SQL> CREATE OR REPLACE VIEW svm6102 AS
15:43:47   2  SELECT
15:43:47   3  pair
15:43:47   4  ,ydate
15:43:47   5  ,prdate
15:43:47   6  ,rownum rnum -- acts as t in my time-series
15:43:47   7  ,clse
15:43:47   8  -- Derive a bunch of attributes from clse, the latest price:
15:43:47   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
15:43:47  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
15:43:47  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
15:43:47  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
15:43:47  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
15:43:47  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
15:43:47  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
15:43:47  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
15:43:47  17  --
15:43:47  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
15:43:47  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
15:43:47  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
15:43:47  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
15:43:47  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
15:43:47  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
15:43:47  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
15:43:47  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
15:43:47  26  --
15:43:47  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
15:43:47  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
15:43:47  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
15:43:47  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
15:43:47  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
15:43:47  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
15:43:47  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
15:43:47  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
15:43:47  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
15:43:47  36  FROM di5min WHERE pair LIKE'%jpy%'
15:43:47  37  AND ydate > sysdate - 95
15:43:47  38  ORDER BY ydate
15:43:47  39  /

View created.

Elapsed: 00:00:00.05
15:43:47 SQL> 
15:43:47 SQL> -- rpt
15:43:47 SQL> 
15:43:47 SQL> SELECT
15:43:47   2  pair
15:43:47   3  ,COUNT(pair)
15:43:47   4  ,MIN(clse),MAX(clse)
15:43:47   5  ,MIN(avg6),MAX(avg6)
15:43:47   6  ,MIN(ydate),MAX(ydate)
15:43:47   7  FROM svm6102
15:43:47   8  GROUP BY pair
15:43:47   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_jpy       19809	 80.25	   84.485 80.3595205 84.3105479 2010-10-04 15:45:01 2011-01-07 15:40:00

Elapsed: 00:00:00.94
15:43:48 SQL> 
15:43:48 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
15:43:48 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.29
15:43:49 SQL> CREATE TABLE svm6122 COMPRESS AS
15:43:49   2  SELECT
15:43:49   3  pair
15:43:49   4  ,ydate
15:43:49   5  ,prdate
15:43:49   6  ,clse
15:43:49   7  -- g6 is important. I want to predict g6:
15:43:49   8  ,ld6 - clse g6
15:43:49   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
15:43:49  10  -- I want more attributes from the ones I derived above:
15:43:49  11  -- clse relation to moving-min
15:43:49  12  ,clse-min4  cm4
15:43:49  13  ,clse-min6  cm6
15:43:49  14  ,clse-min8  cm8
15:43:49  15  ,clse-min10 cm10
15:43:49  16  ,clse-min12 cm12
15:43:49  17  ,clse-min14 cm14
15:43:49  18  ,clse-min16 cm16
15:43:49  19  ,clse-min18 cm18
15:43:49  20  -- clse relation to moving-avg
15:43:49  21  ,clse-avg4  ca4
15:43:49  22  ,clse-avg6  ca6
15:43:49  23  ,clse-avg8  ca8
15:43:49  24  ,clse-avg10 ca10
15:43:49  25  ,clse-avg12 ca12
15:43:49  26  ,clse-avg14 ca14
15:43:49  27  ,clse-avg16 ca16
15:43:49  28  ,clse-avg18 ca18
15:43:49  29  -- clse relation to moving-max
15:43:49  30  ,clse-max4  cx4
15:43:49  31  ,clse-max6  cx6
15:43:49  32  ,clse-max8  cx8
15:43:49  33  ,clse-max10 cx10
15:43:49  34  ,clse-max12 cx12
15:43:49  35  ,clse-max14 cx14
15:43:49  36  ,clse-max16 cx16
15:43:49  37  ,clse-max18 cx18
15:43:49  38  -- Derive more attributes.
15:43:49  39  -- I want to use CORR() here to help SVM see the shape of the series.
15:43:49  40  -- But COVAR_POP is more stable:
15:43:49  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
15:43:49  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
15:43:49  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
15:43:49  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
15:43:49  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
15:43:49  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
15:43:49  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
15:43:49  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
15:43:49  49  -- Derive date related attributes:
15:43:49  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
15:43:49  51  ,0+TO_CHAR(ydate,'D')d
15:43:49  52  ,0+TO_CHAR(ydate,'W')w
15:43:49  53  -- mpm stands for minutes-past-midnight:
15:43:49  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
15:43:49  55  -- mph stands for minutes-past-hour:
15:43:49  56  ,0+TO_CHAR(ydate,'MI')mph
15:43:49  57  FROM svm6102
15:43:49  58  ORDER BY ydate
15:43:49  59  /

Table created.

Elapsed: 00:00:02.13
15:43:51 SQL> 
15:43:51 SQL> -- rpt
15:43:51 SQL> 
15:43:51 SQL> SELECT
15:43:51   2  pair
15:43:51   3  ,COUNT(pair)
15:43:51   4  ,MIN(clse),MAX(clse)
15:43:51   5  ,MIN(ydate),MAX(ydate)
15:43:51   6  FROM svm6122
15:43:51   7  GROUP BY pair
15:43:51   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_jpy       19809	 80.25	   84.485 2010-10-04 15:45:01 2011-01-07 15:40:00

Elapsed: 00:00:00.04
15:43:51 SQL> 
15:43:51 SQL> -- Prepare for derivation of NTILE based params:
15:43:51 SQL> 
15:43:51 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.30
15:43:51 SQL> CREATE TABLE svm6142 COMPRESS AS
15:43:51   2  SELECT
15:43:51   3  pair
15:43:51   4  ,ydate
15:43:51   5  ,prdate
15:43:51   6  ,clse
15:43:51   7  ,g6
15:43:51   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
15:43:51   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
15:43:51  10  ,CASE WHEN trend IS NULL THEN 1
15:43:51  11  	    WHEN trend =0      THEN 1
15:43:51  12  	    ELSE trend END trend
15:43:51  13  ,cm4
15:43:51  14  ,cm6
15:43:51  15  ,cm8
15:43:51  16  ,cm10
15:43:51  17  ,cm12
15:43:51  18  ,cm14
15:43:51  19  ,cm16
15:43:51  20  ,cm18
15:43:51  21  --
15:43:51  22  ,ca4
15:43:51  23  ,ca6
15:43:51  24  ,ca8
15:43:51  25  ,ca10
15:43:51  26  ,ca12
15:43:51  27  ,ca14
15:43:51  28  ,ca16
15:43:51  29  ,ca18
15:43:51  30  --
15:43:51  31  ,cx4
15:43:51  32  ,cx6
15:43:51  33  ,cx8
15:43:51  34  ,cx10
15:43:51  35  ,cx12
15:43:51  36  ,cx14
15:43:51  37  ,cx16
15:43:51  38  ,cx18
15:43:51  39  --
15:43:51  40  ,crr4
15:43:51  41  ,crr6
15:43:51  42  ,crr8
15:43:51  43  ,crr10
15:43:51  44  ,crr12
15:43:51  45  ,crr14
15:43:51  46  ,crr16
15:43:51  47  ,crr18
15:43:51  48  --
15:43:51  49  ,hh
15:43:51  50  ,d
15:43:51  51  ,w
15:43:51  52  ,mpm
15:43:51  53  ,mph
15:43:51  54  FROM svm6122
15:43:51  55  ORDER BY ydate
15:43:51  56  /

Table created.

Elapsed: 00:00:00.39
15:43:51 SQL> 
15:43:51 SQL> -- rpt
15:43:51 SQL> 
15:43:51 SQL> SELECT
15:43:51   2  pair
15:43:51   3  ,trend
15:43:51   4  ,gatt
15:43:51   5  ,COUNT(pair)
15:43:51   6  ,AVG(g6)
15:43:51   7  FROM svm6142
15:43:51   8  GROUP BY pair,trend,gatt
15:43:51   9  ORDER BY pair,trend,gatt
15:43:51  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5173 -.16581157
usd_jpy 	-1 up	      4865 .170822747
usd_jpy 	-1		28
usd_jpy 	 1 nup	      5038 -.15398633
usd_jpy 	 1 up	      4661 .172746193
usd_jpy 	 1		44

6 rows selected.

Elapsed: 00:00:00.07
15:43:51 SQL> 
15:43:51 SQL> 
15:43:51 SQL> -- Derive NTILE based params:
15:43:51 SQL> 
15:43:51 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.15
15:43:52 SQL> CREATE TABLE svm6162 COMPRESS AS
15:43:52   2  SELECT
15:43:52   3  pair
15:43:52   4  ,ydate
15:43:52   5  ,prdate
15:43:52   6  ,clse
15:43:52   7  ,g6
15:43:52   8  ,gatt
15:43:52   9  ,gattn
15:43:52  10  ,trend
15:43:52  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
15:43:52  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
15:43:52  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
15:43:52  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
15:43:52  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
15:43:52  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
15:43:52  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
15:43:52  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
15:43:52  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
15:43:52  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
15:43:52  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
15:43:52  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
15:43:52  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
15:43:52  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
15:43:52  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
15:43:52  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
15:43:52  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
15:43:52  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
15:43:52  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
15:43:52  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
15:43:52  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
15:43:52  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
15:43:52  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
15:43:52  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
15:43:52  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
15:43:52  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
15:43:52  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
15:43:52  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
15:43:52  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
15:43:52  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
15:43:52  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
15:43:52  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
15:43:52  43  ,hh  att32
15:43:52  44  ,d   att33
15:43:52  45  ,w   att34
15:43:52  46  ,mpm att35
15:43:52  47  ,mph att36
15:43:52  48  ,trend att37
15:43:52  49  FROM svm6142
15:43:52  50  ORDER BY ydate
15:43:52  51  /

Table created.

Elapsed: 00:00:04.79
15:43:56 SQL> 
15:43:56 SQL> -- rpt
15:43:56 SQL> 
15:43:56 SQL> SELECT
15:43:56   2  pair
15:43:56   3  ,trend
15:43:56   4  ,gatt
15:43:56   5  ,COUNT(pair)
15:43:56   6  ,AVG(g6)
15:43:56   7  FROM svm6162
15:43:56   8  GROUP BY pair,trend,gatt
15:43:56   9  ORDER BY pair,trend,gatt
15:43:56  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5173 -.16581157
usd_jpy 	-1 up	      4865 .170822747
usd_jpy 	-1		28
usd_jpy 	 1 nup	      5038 -.15398633
usd_jpy 	 1 up	      4661 .172746193
usd_jpy 	 1		44

6 rows selected.

Elapsed: 00:00:00.32
15:43:57 SQL> 
15:43:57 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.14
15:43:57 SQL> CREATE TABLE modsrc COMPRESS AS
15:43:57   2  SELECT
15:43:57   3  pair
15:43:57   4  ,ydate
15:43:57   5  ,prdate
15:43:57   6  ,trend
15:43:57   7  ,g6
15:43:57   8  ,gatt
15:43:57   9  ,gattn
15:43:57  10  FROM svm6162
15:43:57  11  /

Table created.

Elapsed: 00:00:00.10
15:43:57 SQL> 
15:43:57 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.27
15:43:57 SQL> 
15:43:57 SQL> DROP   TABLE jpy_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
15:43:57 SQL> CREATE TABLE jpy_ms610 COMPRESS AS
15:43:57   2  SELECT
15:43:57   3  ydate
15:43:57   4  ,trend jpy_trend
15:43:57   5  ,g6    jpy_g6
15:43:57   6  ,gatt  jpy_gatt
15:43:57   7  ,gattn jpy_gattn
15:43:57   8  FROM modsrc
15:43:57   9  /

Table created.

Elapsed: 00:00:00.08
15:43:57 SQL> 
15:43:57 SQL> ANALYZE TABLE jpy_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
15:43:58 SQL> 
15:43:58 SQL> -- I need a copy of the attributes:
15:43:58 SQL> 
15:43:58 SQL> 
15:43:58 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.04
15:43:58 SQL> CREATE TABLE jpy_att COMPRESS AS
15:43:58   2  SELECT
15:43:58   3  ydate
15:43:58   4  ,att00 jpy_att00
15:43:58   5  ,att01 jpy_att01
15:43:58   6  ,att02 jpy_att02
15:43:58   7  ,att03 jpy_att03
15:43:58   8  ,att04 jpy_att04
15:43:58   9  ,att05 jpy_att05
15:43:58  10  ,att06 jpy_att06
15:43:58  11  ,att07 jpy_att07
15:43:58  12  ,att08 jpy_att08
15:43:58  13  ,att09 jpy_att09
15:43:58  14  ,att10 jpy_att10
15:43:58  15  ,att11 jpy_att11
15:43:58  16  ,att12 jpy_att12
15:43:58  17  ,att13 jpy_att13
15:43:58  18  ,att14 jpy_att14
15:43:58  19  ,att15 jpy_att15
15:43:58  20  ,att16 jpy_att16
15:43:58  21  ,att17 jpy_att17
15:43:58  22  ,att18 jpy_att18
15:43:58  23  ,att19 jpy_att19
15:43:58  24  ,att20 jpy_att20
15:43:58  25  ,att21 jpy_att21
15:43:58  26  ,att22 jpy_att22
15:43:58  27  ,att23 jpy_att23
15:43:58  28  ,att24 jpy_att24
15:43:58  29  ,att25 jpy_att25
15:43:58  30  ,att26 jpy_att26
15:43:58  31  ,att27 jpy_att27
15:43:58  32  ,att28 jpy_att28
15:43:58  33  ,att29 jpy_att29
15:43:58  34  ,att30 jpy_att30
15:43:58  35  ,att31 jpy_att31
15:43:58  36  ,att32 jpy_att32
15:43:58  37  ,att33 jpy_att33
15:43:58  38  ,att34 jpy_att34
15:43:58  39  ,att35 jpy_att35
15:43:58  40  ,att36 jpy_att36
15:43:58  41  ,att37 jpy_att37
15:43:58  42  FROM svm6162
15:43:58  43  /

Table created.

Elapsed: 00:00:00.20
15:43:58 SQL> 
15:43:58 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
15:43:58 SQL> 
15:43:58 SQL> -- rpt
15:43:58 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19809

Elapsed: 00:00:00.90
15:43:59 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     19809

Elapsed: 00:00:00.00
15:43:59 SQL> 
15:43:59 SQL> --
15:43:59 SQL> -- cad610.sql
15:43:59 SQL> --
15:43:59 SQL> 
15:43:59 SQL> -- Creates views and tables for backtesting a forex SVM strategy
15:43:59 SQL> 
15:43:59 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.46
15:44:00 SQL> 
15:44:00 SQL> -- I created di5min here:
15:44:00 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
15:44:00 SQL> 
15:44:00 SQL> CREATE OR REPLACE VIEW svm6102 AS
15:44:00   2  SELECT
15:44:00   3  pair
15:44:00   4  ,ydate
15:44:00   5  ,prdate
15:44:00   6  ,rownum rnum -- acts as t in my time-series
15:44:00   7  ,clse
15:44:00   8  -- Derive a bunch of attributes from clse, the latest price:
15:44:00   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
15:44:00  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
15:44:00  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
15:44:00  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
15:44:00  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
15:44:00  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
15:44:00  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
15:44:00  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
15:44:00  17  --
15:44:00  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
15:44:00  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
15:44:00  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
15:44:00  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
15:44:00  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
15:44:00  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
15:44:00  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
15:44:00  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
15:44:00  26  --
15:44:00  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
15:44:00  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
15:44:00  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
15:44:00  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
15:44:00  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
15:44:00  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
15:44:00  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
15:44:00  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
15:44:00  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
15:44:00  36  FROM di5min WHERE pair LIKE'%cad%'
15:44:00  37  AND ydate > sysdate - 95
15:44:00  38  ORDER BY ydate
15:44:00  39  /

View created.

Elapsed: 00:00:00.05
15:44:00 SQL> 
15:44:00 SQL> -- rpt
15:44:00 SQL> 
15:44:00 SQL> SELECT
15:44:00   2  pair
15:44:00   3  ,COUNT(pair)
15:44:00   4  ,MIN(clse),MAX(clse)
15:44:00   5  ,MIN(avg6),MAX(avg6)
15:44:00   6  ,MIN(ydate),MAX(ydate)
15:44:00   7  FROM svm6102
15:44:00   8  GROUP BY pair
15:44:00   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_cad       19809    .988925	   1.0355  .99060274 1.03282877 2010-10-04 15:45:01 2011-01-07 15:40:00

Elapsed: 00:00:00.85
15:44:01 SQL> 
15:44:01 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
15:44:01 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.27
15:44:01 SQL> CREATE TABLE svm6122 COMPRESS AS
15:44:01   2  SELECT
15:44:01   3  pair
15:44:01   4  ,ydate
15:44:01   5  ,prdate
15:44:01   6  ,clse
15:44:01   7  -- g6 is important. I want to predict g6:
15:44:01   8  ,ld6 - clse g6
15:44:01   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
15:44:01  10  -- I want more attributes from the ones I derived above:
15:44:01  11  -- clse relation to moving-min
15:44:01  12  ,clse-min4  cm4
15:44:01  13  ,clse-min6  cm6
15:44:01  14  ,clse-min8  cm8
15:44:01  15  ,clse-min10 cm10
15:44:01  16  ,clse-min12 cm12
15:44:01  17  ,clse-min14 cm14
15:44:01  18  ,clse-min16 cm16
15:44:01  19  ,clse-min18 cm18
15:44:01  20  -- clse relation to moving-avg
15:44:01  21  ,clse-avg4  ca4
15:44:01  22  ,clse-avg6  ca6
15:44:01  23  ,clse-avg8  ca8
15:44:01  24  ,clse-avg10 ca10
15:44:01  25  ,clse-avg12 ca12
15:44:01  26  ,clse-avg14 ca14
15:44:01  27  ,clse-avg16 ca16
15:44:01  28  ,clse-avg18 ca18
15:44:01  29  -- clse relation to moving-max
15:44:01  30  ,clse-max4  cx4
15:44:01  31  ,clse-max6  cx6
15:44:01  32  ,clse-max8  cx8
15:44:01  33  ,clse-max10 cx10
15:44:01  34  ,clse-max12 cx12
15:44:01  35  ,clse-max14 cx14
15:44:01  36  ,clse-max16 cx16
15:44:01  37  ,clse-max18 cx18
15:44:01  38  -- Derive more attributes.
15:44:01  39  -- I want to use CORR() here to help SVM see the shape of the series.
15:44:01  40  -- But COVAR_POP is more stable:
15:44:01  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
15:44:01  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
15:44:01  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
15:44:01  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
15:44:01  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
15:44:01  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
15:44:01  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
15:44:01  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
15:44:01  49  -- Derive date related attributes:
15:44:01  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
15:44:01  51  ,0+TO_CHAR(ydate,'D')d
15:44:01  52  ,0+TO_CHAR(ydate,'W')w
15:44:01  53  -- mpm stands for minutes-past-midnight:
15:44:01  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
15:44:01  55  -- mph stands for minutes-past-hour:
15:44:01  56  ,0+TO_CHAR(ydate,'MI')mph
15:44:01  57  FROM svm6102
15:44:01  58  ORDER BY ydate
15:44:01  59  /

Table created.

Elapsed: 00:00:02.06
15:44:03 SQL> 
15:44:03 SQL> -- rpt
15:44:03 SQL> 
15:44:03 SQL> SELECT
15:44:03   2  pair
15:44:03   3  ,COUNT(pair)
15:44:03   4  ,MIN(clse),MAX(clse)
15:44:03   5  ,MIN(ydate),MAX(ydate)
15:44:03   6  FROM svm6122
15:44:03   7  GROUP BY pair
15:44:03   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_cad       19809    .988925	   1.0355 2010-10-04 15:45:01 2011-01-07 15:40:00

Elapsed: 00:00:00.05
15:44:03 SQL> 
15:44:03 SQL> -- Prepare for derivation of NTILE based params:
15:44:03 SQL> 
15:44:03 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.27
15:44:03 SQL> CREATE TABLE svm6142 COMPRESS AS
15:44:03   2  SELECT
15:44:03   3  pair
15:44:03   4  ,ydate
15:44:03   5  ,prdate
15:44:03   6  ,clse
15:44:03   7  ,g6
15:44:03   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
15:44:03   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
15:44:03  10  ,CASE WHEN trend IS NULL THEN 1
15:44:03  11  	    WHEN trend =0      THEN 1
15:44:03  12  	    ELSE trend END trend
15:44:03  13  ,cm4
15:44:03  14  ,cm6
15:44:03  15  ,cm8
15:44:03  16  ,cm10
15:44:03  17  ,cm12
15:44:03  18  ,cm14
15:44:03  19  ,cm16
15:44:03  20  ,cm18
15:44:03  21  --
15:44:03  22  ,ca4
15:44:03  23  ,ca6
15:44:03  24  ,ca8
15:44:03  25  ,ca10
15:44:03  26  ,ca12
15:44:03  27  ,ca14
15:44:03  28  ,ca16
15:44:03  29  ,ca18
15:44:03  30  --
15:44:03  31  ,cx4
15:44:03  32  ,cx6
15:44:03  33  ,cx8
15:44:03  34  ,cx10
15:44:03  35  ,cx12
15:44:03  36  ,cx14
15:44:03  37  ,cx16
15:44:03  38  ,cx18
15:44:03  39  --
15:44:03  40  ,crr4
15:44:03  41  ,crr6
15:44:03  42  ,crr8
15:44:03  43  ,crr10
15:44:03  44  ,crr12
15:44:03  45  ,crr14
15:44:03  46  ,crr16
15:44:03  47  ,crr18
15:44:03  48  --
15:44:03  49  ,hh
15:44:03  50  ,d
15:44:03  51  ,w
15:44:03  52  ,mpm
15:44:03  53  ,mph
15:44:03  54  FROM svm6122
15:44:03  55  ORDER BY ydate
15:44:03  56  /

Table created.

Elapsed: 00:00:00.37
15:44:04 SQL> 
15:44:04 SQL> -- rpt
15:44:04 SQL> 
15:44:04 SQL> SELECT
15:44:04   2  pair
15:44:04   3  ,trend
15:44:04   4  ,gatt
15:44:04   5  ,COUNT(pair)
15:44:04   6  ,AVG(g6)
15:44:04   7  FROM svm6142
15:44:04   8  GROUP BY pair,trend,gatt
15:44:04   9  ORDER BY pair,trend,gatt
15:44:04  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7368 -.00123073
usd_cad 	-1 up	      3132 .003051015
usd_cad 	-1		51
usd_cad 	 1 nup	      6813 -.00166193
usd_cad 	 1 up	      2424 .003626976
usd_cad 	 1		21

6 rows selected.

Elapsed: 00:00:00.04
15:44:04 SQL> 
15:44:04 SQL> 
15:44:04 SQL> -- Derive NTILE based params:
15:44:04 SQL> 
15:44:04 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.16
15:44:04 SQL> CREATE TABLE svm6162 COMPRESS AS
15:44:04   2  SELECT
15:44:04   3  pair
15:44:04   4  ,ydate
15:44:04   5  ,prdate
15:44:04   6  ,clse
15:44:04   7  ,g6
15:44:04   8  ,gatt
15:44:04   9  ,gattn
15:44:04  10  ,trend
15:44:04  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
15:44:04  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
15:44:04  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
15:44:04  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
15:44:04  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
15:44:04  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
15:44:04  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
15:44:04  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
15:44:04  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
15:44:04  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
15:44:04  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
15:44:04  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
15:44:04  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
15:44:04  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
15:44:04  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
15:44:04  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
15:44:04  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
15:44:04  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
15:44:04  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
15:44:04  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
15:44:04  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
15:44:04  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
15:44:04  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
15:44:04  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
15:44:04  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
15:44:04  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
15:44:04  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
15:44:04  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
15:44:04  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
15:44:04  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
15:44:04  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
15:44:04  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
15:44:04  43  ,hh  att32
15:44:04  44  ,d   att33
15:44:04  45  ,w   att34
15:44:04  46  ,mpm att35
15:44:04  47  ,mph att36
15:44:04  48  ,trend att37
15:44:04  49  FROM svm6142
15:44:04  50  ORDER BY ydate
15:44:04  51  /

Table created.

Elapsed: 00:00:04.84
15:44:09 SQL> 
15:44:09 SQL> -- rpt
15:44:09 SQL> 
15:44:09 SQL> SELECT
15:44:09   2  pair
15:44:09   3  ,trend
15:44:09   4  ,gatt
15:44:09   5  ,COUNT(pair)
15:44:09   6  ,AVG(g6)
15:44:09   7  FROM svm6162
15:44:09   8  GROUP BY pair,trend,gatt
15:44:09   9  ORDER BY pair,trend,gatt
15:44:09  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7368 -.00123073
usd_cad 	-1 up	      3132 .003051015
usd_cad 	-1		51
usd_cad 	 1 nup	      6813 -.00166193
usd_cad 	 1 up	      2424 .003626976
usd_cad 	 1		21

6 rows selected.

Elapsed: 00:00:00.03
15:44:09 SQL> 
15:44:09 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.17
15:44:09 SQL> CREATE TABLE modsrc COMPRESS AS
15:44:09   2  SELECT
15:44:09   3  pair
15:44:09   4  ,ydate
15:44:09   5  ,prdate
15:44:09   6  ,trend
15:44:09   7  ,g6
15:44:09   8  ,gatt
15:44:09   9  ,gattn
15:44:09  10  FROM svm6162
15:44:09  11  /

Table created.

Elapsed: 00:00:00.10
15:44:09 SQL> 
15:44:09 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.23
15:44:09 SQL> 
15:44:09 SQL> DROP   TABLE cad_ms610 ;

Table dropped.

Elapsed: 00:00:00.07
15:44:09 SQL> CREATE TABLE cad_ms610 COMPRESS AS
15:44:09   2  SELECT
15:44:09   3  ydate
15:44:09   4  ,trend cad_trend
15:44:09   5  ,g6    cad_g6
15:44:09   6  ,gatt  cad_gatt
15:44:09   7  ,gattn cad_gattn
15:44:09   8  FROM modsrc
15:44:09   9  /

Table created.

Elapsed: 00:00:00.08
15:44:09 SQL> 
15:44:09 SQL> ANALYZE TABLE cad_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
15:44:09 SQL> 
15:44:09 SQL> -- I need a copy of the attributes:
15:44:09 SQL> 
15:44:09 SQL> 
15:44:09 SQL> DROP   TABLE cad_att;

Table dropped.

Elapsed: 00:00:00.05
15:44:09 SQL> CREATE TABLE cad_att COMPRESS AS
15:44:09   2  SELECT
15:44:09   3  ydate
15:44:09   4  ,att00 cad_att00
15:44:09   5  ,att01 cad_att01
15:44:09   6  ,att02 cad_att02
15:44:09   7  ,att03 cad_att03
15:44:09   8  ,att04 cad_att04
15:44:09   9  ,att05 cad_att05
15:44:09  10  ,att06 cad_att06
15:44:09  11  ,att07 cad_att07
15:44:09  12  ,att08 cad_att08
15:44:09  13  ,att09 cad_att09
15:44:09  14  ,att10 cad_att10
15:44:09  15  ,att11 cad_att11
15:44:09  16  ,att12 cad_att12
15:44:09  17  ,att13 cad_att13
15:44:09  18  ,att14 cad_att14
15:44:09  19  ,att15 cad_att15
15:44:09  20  ,att16 cad_att16
15:44:09  21  ,att17 cad_att17
15:44:09  22  ,att18 cad_att18
15:44:09  23  ,att19 cad_att19
15:44:09  24  ,att20 cad_att20
15:44:09  25  ,att21 cad_att21
15:44:09  26  ,att22 cad_att22
15:44:09  27  ,att23 cad_att23
15:44:09  28  ,att24 cad_att24
15:44:09  29  ,att25 cad_att25
15:44:09  30  ,att26 cad_att26
15:44:09  31  ,att27 cad_att27
15:44:09  32  ,att28 cad_att28
15:44:09  33  ,att29 cad_att29
15:44:09  34  ,att30 cad_att30
15:44:09  35  ,att31 cad_att31
15:44:09  36  ,att32 cad_att32
15:44:09  37  ,att33 cad_att33
15:44:09  38  ,att34 cad_att34
15:44:09  39  ,att35 cad_att35
15:44:09  40  ,att36 cad_att36
15:44:09  41  ,att37 cad_att37
15:44:09  42  FROM svm6162
15:44:09  43  /

Table created.

Elapsed: 00:00:00.17
15:44:10 SQL> 
15:44:10 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.89
15:44:11 SQL> 
15:44:11 SQL> -- rpt
15:44:11 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19809

Elapsed: 00:00:00.85
15:44:11 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
     19809

Elapsed: 00:00:00.00
15:44:11 SQL> 
15:44:11 SQL> --
15:44:11 SQL> -- chf610.sql
15:44:11 SQL> --
15:44:11 SQL> 
15:44:11 SQL> -- Creates views and tables for backtesting a forex SVM strategy
15:44:11 SQL> 
15:44:11 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.61
15:44:12 SQL> 
15:44:12 SQL> -- I created di5min here:
15:44:12 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
15:44:12 SQL> 
15:44:12 SQL> CREATE OR REPLACE VIEW svm6102 AS
15:44:12   2  SELECT
15:44:12   3  pair
15:44:12   4  ,ydate
15:44:12   5  ,prdate
15:44:12   6  ,rownum rnum -- acts as t in my time-series
15:44:12   7  ,clse
15:44:12   8  -- Derive a bunch of attributes from clse, the latest price:
15:44:12   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
15:44:12  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
15:44:12  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
15:44:12  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
15:44:12  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
15:44:12  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
15:44:12  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
15:44:12  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
15:44:12  17  --
15:44:12  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
15:44:12  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
15:44:12  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
15:44:12  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
15:44:12  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
15:44:12  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
15:44:12  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
15:44:12  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
15:44:12  26  --
15:44:12  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
15:44:12  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
15:44:12  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
15:44:12  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
15:44:12  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
15:44:12  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
15:44:12  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
15:44:12  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
15:44:12  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
15:44:12  36  FROM di5min WHERE pair LIKE'%chf%'
15:44:12  37  AND ydate > sysdate - 95
15:44:12  38  ORDER BY ydate
15:44:12  39  /

View created.

Elapsed: 00:00:00.04
15:44:12 SQL> 
15:44:12 SQL> -- rpt
15:44:12 SQL> 
15:44:12 SQL> SELECT
15:44:12   2  pair
15:44:12   3  ,COUNT(pair)
15:44:12   4  ,MIN(clse),MAX(clse)
15:44:12   5  ,MIN(avg6),MAX(avg6)
15:44:12   6  ,MIN(ydate),MAX(ydate)
15:44:12   7  FROM svm6102
15:44:12   8  GROUP BY pair
15:44:12   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_chf       19812    .931675	  1.00635 .933257705 1.00498151 2010-10-04 15:45:01 2011-01-07 15:40:00

Elapsed: 00:00:00.88
15:44:13 SQL> 
15:44:13 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
15:44:13 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.23
15:44:13 SQL> CREATE TABLE svm6122 COMPRESS AS
15:44:13   2  SELECT
15:44:13   3  pair
15:44:13   4  ,ydate
15:44:13   5  ,prdate
15:44:13   6  ,clse
15:44:13   7  -- g6 is important. I want to predict g6:
15:44:13   8  ,ld6 - clse g6
15:44:13   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
15:44:13  10  -- I want more attributes from the ones I derived above:
15:44:13  11  -- clse relation to moving-min
15:44:13  12  ,clse-min4  cm4
15:44:13  13  ,clse-min6  cm6
15:44:13  14  ,clse-min8  cm8
15:44:13  15  ,clse-min10 cm10
15:44:13  16  ,clse-min12 cm12
15:44:13  17  ,clse-min14 cm14
15:44:13  18  ,clse-min16 cm16
15:44:13  19  ,clse-min18 cm18
15:44:13  20  -- clse relation to moving-avg
15:44:13  21  ,clse-avg4  ca4
15:44:13  22  ,clse-avg6  ca6
15:44:13  23  ,clse-avg8  ca8
15:44:13  24  ,clse-avg10 ca10
15:44:13  25  ,clse-avg12 ca12
15:44:13  26  ,clse-avg14 ca14
15:44:13  27  ,clse-avg16 ca16
15:44:13  28  ,clse-avg18 ca18
15:44:13  29  -- clse relation to moving-max
15:44:13  30  ,clse-max4  cx4
15:44:13  31  ,clse-max6  cx6
15:44:13  32  ,clse-max8  cx8
15:44:13  33  ,clse-max10 cx10
15:44:13  34  ,clse-max12 cx12
15:44:13  35  ,clse-max14 cx14
15:44:13  36  ,clse-max16 cx16
15:44:13  37  ,clse-max18 cx18
15:44:13  38  -- Derive more attributes.
15:44:13  39  -- I want to use CORR() here to help SVM see the shape of the series.
15:44:13  40  -- But COVAR_POP is more stable:
15:44:13  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
15:44:13  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
15:44:13  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
15:44:13  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
15:44:13  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
15:44:13  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
15:44:13  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
15:44:13  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
15:44:13  49  -- Derive date related attributes:
15:44:13  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
15:44:13  51  ,0+TO_CHAR(ydate,'D')d
15:44:13  52  ,0+TO_CHAR(ydate,'W')w
15:44:13  53  -- mpm stands for minutes-past-midnight:
15:44:13  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
15:44:13  55  -- mph stands for minutes-past-hour:
15:44:13  56  ,0+TO_CHAR(ydate,'MI')mph
15:44:13  57  FROM svm6102
15:44:13  58  ORDER BY ydate
15:44:13  59  /

Table created.

Elapsed: 00:00:02.12
15:44:15 SQL> 
15:44:15 SQL> -- rpt
15:44:15 SQL> 
15:44:15 SQL> SELECT
15:44:15   2  pair
15:44:15   3  ,COUNT(pair)
15:44:15   4  ,MIN(clse),MAX(clse)
15:44:15   5  ,MIN(ydate),MAX(ydate)
15:44:15   6  FROM svm6122
15:44:15   7  GROUP BY pair
15:44:15   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_chf       19812    .931675	  1.00635 2010-10-04 15:45:01 2011-01-07 15:40:00

Elapsed: 00:00:00.04
15:44:15 SQL> 
15:44:15 SQL> -- Prepare for derivation of NTILE based params:
15:44:15 SQL> 
15:44:15 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.22
15:44:16 SQL> CREATE TABLE svm6142 COMPRESS AS
15:44:16   2  SELECT
15:44:16   3  pair
15:44:16   4  ,ydate
15:44:16   5  ,prdate
15:44:16   6  ,clse
15:44:16   7  ,g6
15:44:16   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
15:44:16   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
15:44:16  10  ,CASE WHEN trend IS NULL THEN 1
15:44:16  11  	    WHEN trend =0      THEN 1
15:44:16  12  	    ELSE trend END trend
15:44:16  13  ,cm4
15:44:16  14  ,cm6
15:44:16  15  ,cm8
15:44:16  16  ,cm10
15:44:16  17  ,cm12
15:44:16  18  ,cm14
15:44:16  19  ,cm16
15:44:16  20  ,cm18
15:44:16  21  --
15:44:16  22  ,ca4
15:44:16  23  ,ca6
15:44:16  24  ,ca8
15:44:16  25  ,ca10
15:44:16  26  ,ca12
15:44:16  27  ,ca14
15:44:16  28  ,ca16
15:44:16  29  ,ca18
15:44:16  30  --
15:44:16  31  ,cx4
15:44:16  32  ,cx6
15:44:16  33  ,cx8
15:44:16  34  ,cx10
15:44:16  35  ,cx12
15:44:16  36  ,cx14
15:44:16  37  ,cx16
15:44:16  38  ,cx18
15:44:16  39  --
15:44:16  40  ,crr4
15:44:16  41  ,crr6
15:44:16  42  ,crr8
15:44:16  43  ,crr10
15:44:16  44  ,crr12
15:44:16  45  ,crr14
15:44:16  46  ,crr16
15:44:16  47  ,crr18
15:44:16  48  --
15:44:16  49  ,hh
15:44:16  50  ,d
15:44:16  51  ,w
15:44:16  52  ,mpm
15:44:16  53  ,mph
15:44:16  54  FROM svm6122
15:44:16  55  ORDER BY ydate
15:44:16  56  /

Table created.

Elapsed: 00:00:00.41
15:44:16 SQL> 
15:44:16 SQL> -- rpt
15:44:16 SQL> 
15:44:16 SQL> SELECT
15:44:16   2  pair
15:44:16   3  ,trend
15:44:16   4  ,gatt
15:44:16   5  ,COUNT(pair)
15:44:16   6  ,AVG(g6)
15:44:16   7  FROM svm6142
15:44:16   8  GROUP BY pair,trend,gatt
15:44:16   9  ORDER BY pair,trend,gatt
15:44:16  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7096 -.00197406
usd_chf 	-1 up	      3093 .003806766
usd_chf 	-1		48
usd_chf 	 1 nup	      6602 -.00151662
usd_chf 	 1 up	      2949 .003956458
usd_chf 	 1		24

6 rows selected.

Elapsed: 00:00:00.05
15:44:16 SQL> 
15:44:16 SQL> 
15:44:16 SQL> -- Derive NTILE based params:
15:44:16 SQL> 
15:44:16 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.16
15:44:16 SQL> CREATE TABLE svm6162 COMPRESS AS
15:44:16   2  SELECT
15:44:16   3  pair
15:44:16   4  ,ydate
15:44:16   5  ,prdate
15:44:16   6  ,clse
15:44:16   7  ,g6
15:44:16   8  ,gatt
15:44:16   9  ,gattn
15:44:16  10  ,trend
15:44:16  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
15:44:16  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
15:44:16  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
15:44:16  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
15:44:16  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
15:44:16  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
15:44:16  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
15:44:16  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
15:44:16  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
15:44:16  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
15:44:16  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
15:44:16  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
15:44:16  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
15:44:16  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
15:44:16  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
15:44:16  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
15:44:16  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
15:44:16  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
15:44:16  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
15:44:16  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
15:44:16  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
15:44:16  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
15:44:16  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
15:44:16  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
15:44:16  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
15:44:16  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
15:44:16  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
15:44:16  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
15:44:16  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
15:44:16  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
15:44:16  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
15:44:16  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
15:44:16  43  ,hh  att32
15:44:16  44  ,d   att33
15:44:16  45  ,w   att34
15:44:16  46  ,mpm att35
15:44:16  47  ,mph att36
15:44:16  48  ,trend att37
15:44:16  49  FROM svm6142
15:44:16  50  ORDER BY ydate
15:44:16  51  /

Table created.

Elapsed: 00:00:04.79
15:44:21 SQL> 
15:44:21 SQL> -- rpt
15:44:21 SQL> 
15:44:21 SQL> SELECT
15:44:21   2  pair
15:44:21   3  ,trend
15:44:21   4  ,gatt
15:44:21   5  ,COUNT(pair)
15:44:21   6  ,AVG(g6)
15:44:21   7  FROM svm6162
15:44:21   8  GROUP BY pair,trend,gatt
15:44:21   9  ORDER BY pair,trend,gatt
15:44:21  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7096 -.00197406
usd_chf 	-1 up	      3093 .003806766
usd_chf 	-1		48
usd_chf 	 1 nup	      6602 -.00151662
usd_chf 	 1 up	      2949 .003956458
usd_chf 	 1		24

6 rows selected.

Elapsed: 00:00:00.03
15:44:21 SQL> 
15:44:21 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.15
15:44:21 SQL> CREATE TABLE modsrc COMPRESS AS
15:44:21   2  SELECT
15:44:21   3  pair
15:44:21   4  ,ydate
15:44:21   5  ,prdate
15:44:21   6  ,trend
15:44:21   7  ,g6
15:44:21   8  ,gatt
15:44:21   9  ,gattn
15:44:21  10  FROM svm6162
15:44:21  11  /

Table created.

Elapsed: 00:00:00.09
15:44:21 SQL> 
15:44:21 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
15:44:21 SQL> 
15:44:21 SQL> DROP   TABLE chf_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
15:44:21 SQL> CREATE TABLE chf_ms610 COMPRESS AS
15:44:21   2  SELECT
15:44:21   3  ydate
15:44:21   4  ,trend chf_trend
15:44:21   5  ,g6    chf_g6
15:44:21   6  ,gatt  chf_gatt
15:44:21   7  ,gattn chf_gattn
15:44:21   8  FROM modsrc
15:44:21   9  /

Table created.

Elapsed: 00:00:00.08
15:44:22 SQL> 
15:44:22 SQL> ANALYZE TABLE chf_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.14
15:44:22 SQL> 
15:44:22 SQL> -- I need a copy of the attributes:
15:44:22 SQL> 
15:44:22 SQL> 
15:44:22 SQL> DROP   TABLE chf_att;

Table dropped.

Elapsed: 00:00:00.04
15:44:22 SQL> CREATE TABLE chf_att COMPRESS AS
15:44:22   2  SELECT
15:44:22   3  ydate
15:44:22   4  ,att00 chf_att00
15:44:22   5  ,att01 chf_att01
15:44:22   6  ,att02 chf_att02
15:44:22   7  ,att03 chf_att03
15:44:22   8  ,att04 chf_att04
15:44:22   9  ,att05 chf_att05
15:44:22  10  ,att06 chf_att06
15:44:22  11  ,att07 chf_att07
15:44:22  12  ,att08 chf_att08
15:44:22  13  ,att09 chf_att09
15:44:22  14  ,att10 chf_att10
15:44:22  15  ,att11 chf_att11
15:44:22  16  ,att12 chf_att12
15:44:22  17  ,att13 chf_att13
15:44:22  18  ,att14 chf_att14
15:44:22  19  ,att15 chf_att15
15:44:22  20  ,att16 chf_att16
15:44:22  21  ,att17 chf_att17
15:44:22  22  ,att18 chf_att18
15:44:22  23  ,att19 chf_att19
15:44:22  24  ,att20 chf_att20
15:44:22  25  ,att21 chf_att21
15:44:22  26  ,att22 chf_att22
15:44:22  27  ,att23 chf_att23
15:44:22  28  ,att24 chf_att24
15:44:22  29  ,att25 chf_att25
15:44:22  30  ,att26 chf_att26
15:44:22  31  ,att27 chf_att27
15:44:22  32  ,att28 chf_att28
15:44:22  33  ,att29 chf_att29
15:44:22  34  ,att30 chf_att30
15:44:22  35  ,att31 chf_att31
15:44:22  36  ,att32 chf_att32
15:44:22  37  ,att33 chf_att33
15:44:22  38  ,att34 chf_att34
15:44:22  39  ,att35 chf_att35
15:44:22  40  ,att36 chf_att36
15:44:22  41  ,att37 chf_att37
15:44:22  42  FROM svm6162
15:44:22  43  /

Table created.

Elapsed: 00:00:00.23
15:44:22 SQL> 
15:44:22 SQL> ANALYZE TABLE chf_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
15:44:22 SQL> 
15:44:22 SQL> -- rpt
15:44:22 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19812

Elapsed: 00:00:00.83
15:44:23 SQL> SELECT COUNT(*)FROM chf_att;

  COUNT(*)
----------
     19812

Elapsed: 00:00:00.00
15:44:23 SQL> 
15:44:23 SQL> --
15:44:23 SQL> -- ech610.sql
15:44:23 SQL> --
15:44:23 SQL> 
15:44:23 SQL> -- Creates views and tables for backtesting a forex SVM strategy
15:44:23 SQL> 
15:44:23 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.48
15:44:24 SQL> 
15:44:24 SQL> -- I created di5min here:
15:44:24 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
15:44:24 SQL> 
15:44:24 SQL> CREATE OR REPLACE VIEW svm6102 AS
15:44:24   2  SELECT
15:44:24   3  pair
15:44:24   4  ,ydate
15:44:24   5  ,prdate
15:44:24   6  ,rownum rnum -- acts as t in my time-series
15:44:24   7  ,clse
15:44:24   8  -- Derive a bunch of attributes from clse, the latest price:
15:44:24   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
15:44:24  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
15:44:24  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
15:44:24  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
15:44:24  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
15:44:24  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
15:44:24  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
15:44:24  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
15:44:24  17  --
15:44:24  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
15:44:24  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
15:44:24  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
15:44:24  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
15:44:24  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
15:44:24  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
15:44:24  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
15:44:24  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
15:44:24  26  --
15:44:24  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
15:44:24  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
15:44:24  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
15:44:24  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
15:44:24  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
15:44:24  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
15:44:24  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
15:44:24  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
15:44:24  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
15:44:24  36  FROM di5min WHERE pair LIKE'%ech%'
15:44:24  37  AND ydate > sysdate - 95
15:44:24  38  ORDER BY ydate
15:44:24  39  /

View created.

Elapsed: 00:00:00.04
15:44:24 SQL> 
15:44:24 SQL> -- rpt
15:44:24 SQL> 
15:44:24 SQL> SELECT
15:44:24   2  pair
15:44:24   3  ,COUNT(pair)
15:44:24   4  ,MIN(clse),MAX(clse)
15:44:24   5  ,MIN(avg6),MAX(avg6)
15:44:24   6  ,MIN(ydate),MAX(ydate)
15:44:24   7  FROM svm6102
15:44:24   8  GROUP BY pair
15:44:24   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ech_usd       19810 1.24182424 1.38284305 1.24320711 1.37986485 2010-10-04 15:45:01 2011-01-07 15:40:00

Elapsed: 00:00:00.83
15:44:25 SQL> 
15:44:25 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
15:44:25 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.24
15:44:25 SQL> CREATE TABLE svm6122 COMPRESS AS
15:44:25   2  SELECT
15:44:25   3  pair
15:44:25   4  ,ydate
15:44:25   5  ,prdate
15:44:25   6  ,clse
15:44:25   7  -- g6 is important. I want to predict g6:
15:44:25   8  ,ld6 - clse g6
15:44:25   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
15:44:25  10  -- I want more attributes from the ones I derived above:
15:44:25  11  -- clse relation to moving-min
15:44:25  12  ,clse-min4  cm4
15:44:25  13  ,clse-min6  cm6
15:44:25  14  ,clse-min8  cm8
15:44:25  15  ,clse-min10 cm10
15:44:25  16  ,clse-min12 cm12
15:44:25  17  ,clse-min14 cm14
15:44:25  18  ,clse-min16 cm16
15:44:25  19  ,clse-min18 cm18
15:44:25  20  -- clse relation to moving-avg
15:44:25  21  ,clse-avg4  ca4
15:44:25  22  ,clse-avg6  ca6
15:44:25  23  ,clse-avg8  ca8
15:44:25  24  ,clse-avg10 ca10
15:44:25  25  ,clse-avg12 ca12
15:44:25  26  ,clse-avg14 ca14
15:44:25  27  ,clse-avg16 ca16
15:44:25  28  ,clse-avg18 ca18
15:44:25  29  -- clse relation to moving-max
15:44:25  30  ,clse-max4  cx4
15:44:25  31  ,clse-max6  cx6
15:44:25  32  ,clse-max8  cx8
15:44:25  33  ,clse-max10 cx10
15:44:25  34  ,clse-max12 cx12
15:44:25  35  ,clse-max14 cx14
15:44:25  36  ,clse-max16 cx16
15:44:25  37  ,clse-max18 cx18
15:44:25  38  -- Derive more attributes.
15:44:25  39  -- I want to use CORR() here to help SVM see the shape of the series.
15:44:25  40  -- But COVAR_POP is more stable:
15:44:25  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
15:44:25  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
15:44:25  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
15:44:25  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
15:44:25  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
15:44:25  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
15:44:25  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
15:44:25  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
15:44:25  49  -- Derive date related attributes:
15:44:25  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
15:44:25  51  ,0+TO_CHAR(ydate,'D')d
15:44:25  52  ,0+TO_CHAR(ydate,'W')w
15:44:25  53  -- mpm stands for minutes-past-midnight:
15:44:25  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
15:44:25  55  -- mph stands for minutes-past-hour:
15:44:25  56  ,0+TO_CHAR(ydate,'MI')mph
15:44:25  57  FROM svm6102
15:44:25  58  ORDER BY ydate
15:44:25  59  /

Table created.

Elapsed: 00:00:02.09
15:44:27 SQL> 
15:44:27 SQL> -- rpt
15:44:27 SQL> 
15:44:27 SQL> SELECT
15:44:27   2  pair
15:44:27   3  ,COUNT(pair)
15:44:27   4  ,MIN(clse),MAX(clse)
15:44:27   5  ,MIN(ydate),MAX(ydate)
15:44:27   6  FROM svm6122
15:44:27   7  GROUP BY pair
15:44:27   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ech_usd       19810 1.24182424 1.38284305 2010-10-04 15:45:01 2011-01-07 15:40:00

Elapsed: 00:00:00.04
15:44:27 SQL> 
15:44:27 SQL> -- Prepare for derivation of NTILE based params:
15:44:27 SQL> 
15:44:27 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.23
15:44:27 SQL> CREATE TABLE svm6142 COMPRESS AS
15:44:27   2  SELECT
15:44:27   3  pair
15:44:27   4  ,ydate
15:44:27   5  ,prdate
15:44:27   6  ,clse
15:44:27   7  ,g6
15:44:27   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
15:44:27   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
15:44:27  10  ,CASE WHEN trend IS NULL THEN 1
15:44:27  11  	    WHEN trend =0      THEN 1
15:44:27  12  	    ELSE trend END trend
15:44:27  13  ,cm4
15:44:27  14  ,cm6
15:44:27  15  ,cm8
15:44:27  16  ,cm10
15:44:27  17  ,cm12
15:44:27  18  ,cm14
15:44:27  19  ,cm16
15:44:27  20  ,cm18
15:44:27  21  --
15:44:27  22  ,ca4
15:44:27  23  ,ca6
15:44:27  24  ,ca8
15:44:27  25  ,ca10
15:44:27  26  ,ca12
15:44:27  27  ,ca14
15:44:27  28  ,ca16
15:44:27  29  ,ca18
15:44:27  30  --
15:44:27  31  ,cx4
15:44:27  32  ,cx6
15:44:27  33  ,cx8
15:44:27  34  ,cx10
15:44:27  35  ,cx12
15:44:27  36  ,cx14
15:44:27  37  ,cx16
15:44:27  38  ,cx18
15:44:27  39  --
15:44:27  40  ,crr4
15:44:27  41  ,crr6
15:44:27  42  ,crr8
15:44:27  43  ,crr10
15:44:27  44  ,crr12
15:44:27  45  ,crr14
15:44:27  46  ,crr16
15:44:27  47  ,crr18
15:44:27  48  --
15:44:27  49  ,hh
15:44:27  50  ,d
15:44:27  51  ,w
15:44:27  52  ,mpm
15:44:27  53  ,mph
15:44:27  54  FROM svm6122
15:44:27  55  ORDER BY ydate
15:44:27  56  /

Table created.

Elapsed: 00:00:00.48
15:44:28 SQL> 
15:44:28 SQL> -- rpt
15:44:28 SQL> 
15:44:28 SQL> SELECT
15:44:28   2  pair
15:44:28   3  ,trend
15:44:28   4  ,gatt
15:44:28   5  ,COUNT(pair)
15:44:28   6  ,AVG(g6)
15:44:28   7  FROM svm6142
15:44:28   8  GROUP BY pair,trend,gatt
15:44:28   9  ORDER BY pair,trend,gatt
15:44:28  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6826 -.00228712
ech_usd 	-1 up	      3581 .003574033
ech_usd 	-1		52
ech_usd 	 1 nup	      6426 -.00231275
ech_usd 	 1 up	      2905 .004122694
ech_usd 	 1		20

6 rows selected.

Elapsed: 00:00:00.04
15:44:28 SQL> 
15:44:28 SQL> 
15:44:28 SQL> -- Derive NTILE based params:
15:44:28 SQL> 
15:44:28 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.30
15:44:28 SQL> CREATE TABLE svm6162 COMPRESS AS
15:44:28   2  SELECT
15:44:28   3  pair
15:44:28   4  ,ydate
15:44:28   5  ,prdate
15:44:28   6  ,clse
15:44:28   7  ,g6
15:44:28   8  ,gatt
15:44:28   9  ,gattn
15:44:28  10  ,trend
15:44:28  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
15:44:28  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
15:44:28  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
15:44:28  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
15:44:28  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
15:44:28  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
15:44:28  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
15:44:28  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
15:44:28  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
15:44:28  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
15:44:28  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
15:44:28  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
15:44:28  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
15:44:28  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
15:44:28  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
15:44:28  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
15:44:28  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
15:44:28  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
15:44:28  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
15:44:28  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
15:44:28  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
15:44:28  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
15:44:28  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
15:44:28  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
15:44:28  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
15:44:28  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
15:44:28  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
15:44:28  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
15:44:28  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
15:44:28  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
15:44:28  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
15:44:28  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
15:44:28  43  ,hh  att32
15:44:28  44  ,d   att33
15:44:28  45  ,w   att34
15:44:28  46  ,mpm att35
15:44:28  47  ,mph att36
15:44:28  48  ,trend att37
15:44:28  49  FROM svm6142
15:44:28  50  ORDER BY ydate
15:44:28  51  /

Table created.

Elapsed: 00:00:05.01
15:44:33 SQL> 
15:44:33 SQL> -- rpt
15:44:33 SQL> 
15:44:33 SQL> SELECT
15:44:33   2  pair
15:44:33   3  ,trend
15:44:33   4  ,gatt
15:44:33   5  ,COUNT(pair)
15:44:33   6  ,AVG(g6)
15:44:33   7  FROM svm6162
15:44:33   8  GROUP BY pair,trend,gatt
15:44:33   9  ORDER BY pair,trend,gatt
15:44:33  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6826 -.00228712
ech_usd 	-1 up	      3581 .003574033
ech_usd 	-1		52
ech_usd 	 1 nup	      6426 -.00231275
ech_usd 	 1 up	      2905 .004122694
ech_usd 	 1		20

6 rows selected.

Elapsed: 00:00:00.03
15:44:33 SQL> 
15:44:33 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.15
15:44:33 SQL> CREATE TABLE modsrc COMPRESS AS
15:44:33   2  SELECT
15:44:33   3  pair
15:44:33   4  ,ydate
15:44:33   5  ,prdate
15:44:33   6  ,trend
15:44:33   7  ,g6
15:44:33   8  ,gatt
15:44:33   9  ,gattn
15:44:33  10  FROM svm6162
15:44:33  11  /

Table created.

Elapsed: 00:00:00.10
15:44:33 SQL> 
15:44:33 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.27
15:44:34 SQL> 
15:44:34 SQL> DROP   TABLE ech_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
15:44:34 SQL> CREATE TABLE ech_ms610 COMPRESS AS
15:44:34   2  SELECT
15:44:34   3  ydate
15:44:34   4  ,trend ech_trend
15:44:34   5  ,g6    ech_g6
15:44:34   6  ,gatt  ech_gatt
15:44:34   7  ,gattn ech_gattn
15:44:34   8  FROM modsrc
15:44:34   9  /

Table created.

Elapsed: 00:00:00.07
15:44:34 SQL> 
15:44:34 SQL> ANALYZE TABLE ech_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
15:44:34 SQL> 
15:44:34 SQL> -- I need a copy of the attributes:
15:44:34 SQL> 
15:44:34 SQL> 
15:44:34 SQL> DROP   TABLE ech_att;

Table dropped.

Elapsed: 00:00:00.05
15:44:34 SQL> CREATE TABLE ech_att COMPRESS AS
15:44:34   2  SELECT
15:44:34   3  ydate
15:44:34   4  ,att00 ech_att00
15:44:34   5  ,att01 ech_att01
15:44:34   6  ,att02 ech_att02
15:44:34   7  ,att03 ech_att03
15:44:34   8  ,att04 ech_att04
15:44:34   9  ,att05 ech_att05
15:44:34  10  ,att06 ech_att06
15:44:34  11  ,att07 ech_att07
15:44:34  12  ,att08 ech_att08
15:44:34  13  ,att09 ech_att09
15:44:34  14  ,att10 ech_att10
15:44:34  15  ,att11 ech_att11
15:44:34  16  ,att12 ech_att12
15:44:34  17  ,att13 ech_att13
15:44:34  18  ,att14 ech_att14
15:44:34  19  ,att15 ech_att15
15:44:34  20  ,att16 ech_att16
15:44:34  21  ,att17 ech_att17
15:44:34  22  ,att18 ech_att18
15:44:34  23  ,att19 ech_att19
15:44:34  24  ,att20 ech_att20
15:44:34  25  ,att21 ech_att21
15:44:34  26  ,att22 ech_att22
15:44:34  27  ,att23 ech_att23
15:44:34  28  ,att24 ech_att24
15:44:34  29  ,att25 ech_att25
15:44:34  30  ,att26 ech_att26
15:44:34  31  ,att27 ech_att27
15:44:34  32  ,att28 ech_att28
15:44:34  33  ,att29 ech_att29
15:44:34  34  ,att30 ech_att30
15:44:34  35  ,att31 ech_att31
15:44:34  36  ,att32 ech_att32
15:44:34  37  ,att33 ech_att33
15:44:34  38  ,att34 ech_att34
15:44:34  39  ,att35 ech_att35
15:44:34  40  ,att36 ech_att36
15:44:34  41  ,att37 ech_att37
15:44:34  42  FROM svm6162
15:44:34  43  /

Table created.

Elapsed: 00:00:01.13
15:44:35 SQL> 
15:44:35 SQL> ANALYZE TABLE ech_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
15:44:36 SQL> 
15:44:36 SQL> -- rpt
15:44:36 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19810

Elapsed: 00:00:00.81
15:44:36 SQL> SELECT COUNT(*)FROM ech_att;

  COUNT(*)
----------
     19810

Elapsed: 00:00:00.00
15:44:36 SQL> 
15:44:36 SQL> --
15:44:36 SQL> -- egb610.sql
15:44:36 SQL> --
15:44:36 SQL> 
15:44:36 SQL> -- Creates views and tables for backtesting a forex SVM strategy
15:44:36 SQL> 
15:44:36 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.92
15:44:37 SQL> 
15:44:37 SQL> -- I created di5min here:
15:44:37 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
15:44:37 SQL> 
15:44:37 SQL> CREATE OR REPLACE VIEW svm6102 AS
15:44:37   2  SELECT
15:44:37   3  pair
15:44:37   4  ,ydate
15:44:37   5  ,prdate
15:44:37   6  ,rownum rnum -- acts as t in my time-series
15:44:37   7  ,clse
15:44:37   8  -- Derive a bunch of attributes from clse, the latest price:
15:44:37   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
15:44:37  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
15:44:37  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
15:44:37  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
15:44:37  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
15:44:37  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
15:44:37  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
15:44:37  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
15:44:37  17  --
15:44:37  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
15:44:37  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
15:44:37  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
15:44:37  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
15:44:37  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
15:44:37  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
15:44:37  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
15:44:37  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
15:44:37  26  --
15:44:37  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
15:44:37  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
15:44:37  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
15:44:37  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
15:44:37  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
15:44:37  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
15:44:37  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
15:44:37  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
15:44:37  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
15:44:37  36  FROM di5min WHERE pair LIKE'%egb%'
15:44:37  37  AND ydate > sysdate - 95
15:44:37  38  ORDER BY ydate
15:44:37  39  /

View created.

Elapsed: 00:00:00.04
15:44:37 SQL> 
15:44:37 SQL> -- rpt
15:44:37 SQL> 
15:44:37 SQL> SELECT
15:44:37   2  pair
15:44:37   3  ,COUNT(pair)
15:44:37   4  ,MIN(clse),MAX(clse)
15:44:37   5  ,MIN(avg6),MAX(avg6)
15:44:37   6  ,MIN(ydate),MAX(ydate)
15:44:37   7  FROM svm6102
15:44:37   8  GROUP BY pair
15:44:37   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
egb_usd       19809 .833520557 .893920122 .834199029 .892400287 2010-10-04 15:45:01 2011-01-07 15:40:00

Elapsed: 00:00:00.94
15:44:38 SQL> 
15:44:38 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
15:44:38 SQL> DROP TABLE svm6122;
