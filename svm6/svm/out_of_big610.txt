
SQL*Plus: Release 11.2.0.1.0 Production on Fri Jan 7 11:15:23 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

11:15:23 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
11:15:23 SQL> 11:15:23 SQL> --
11:15:23 SQL> -- eur610.sql
11:15:23 SQL> --
11:15:23 SQL> 
11:15:23 SQL> -- Creates views and tables for backtesting a forex SVM strategy
11:15:23 SQL> 
11:15:23 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.00
11:15:23 SQL> 
11:15:23 SQL> -- I created di5min here:
11:15:23 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
11:15:23 SQL> 
11:15:23 SQL> CREATE OR REPLACE VIEW svm6102 AS
11:15:23   2  SELECT
11:15:23   3  pair
11:15:23   4  ,ydate
11:15:23   5  ,prdate
11:15:23   6  ,rownum rnum -- acts as t in my time-series
11:15:23   7  ,clse
11:15:23   8  -- Derive a bunch of attributes from clse, the latest price:
11:15:23   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
11:15:23  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
11:15:23  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
11:15:23  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
11:15:23  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
11:15:23  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
11:15:23  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
11:15:23  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
11:15:23  17  --
11:15:23  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
11:15:23  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
11:15:23  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
11:15:23  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
11:15:23  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
11:15:23  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
11:15:23  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
11:15:23  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
11:15:23  26  --
11:15:23  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
11:15:23  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
11:15:23  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
11:15:23  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
11:15:23  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
11:15:23  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
11:15:23  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
11:15:23  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
11:15:23  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
11:15:23  36  FROM di5min WHERE pair LIKE'%eur%'
11:15:23  37  AND ydate > sysdate - 95
11:15:23  38  ORDER BY ydate
11:15:23  39  /

View created.

Elapsed: 00:00:00.09
11:15:24 SQL> 
11:15:24 SQL> -- rpt
11:15:24 SQL> 
11:15:24 SQL> SELECT
11:15:24   2  pair
11:15:24   3  ,COUNT(pair)
11:15:24   4  ,MIN(clse),MAX(clse)
11:15:24   5  ,MIN(avg6),MAX(avg6)
11:15:24   6  ,MIN(ydate),MAX(ydate)
11:15:24   7  FROM svm6102
11:15:24   8  GROUP BY pair
11:15:24   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_usd       19810  1.2970625	   1.4273 1.29857688 1.42436233 2010-10-04 11:20:01 2011-01-07 11:10:00

Elapsed: 00:00:00.93
11:15:24 SQL> 
11:15:24 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
11:15:24 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.45
11:15:25 SQL> CREATE TABLE svm6122 COMPRESS AS
11:15:25   2  SELECT
11:15:25   3  pair
11:15:25   4  ,ydate
11:15:25   5  ,prdate
11:15:25   6  ,clse
11:15:25   7  -- g6 is important. I want to predict g6:
11:15:25   8  ,ld6 - clse g6
11:15:25   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
11:15:25  10  -- I want more attributes from the ones I derived above:
11:15:25  11  -- clse relation to moving-min
11:15:25  12  ,clse-min4  cm4
11:15:25  13  ,clse-min6  cm6
11:15:25  14  ,clse-min8  cm8
11:15:25  15  ,clse-min10 cm10
11:15:25  16  ,clse-min12 cm12
11:15:25  17  ,clse-min14 cm14
11:15:25  18  ,clse-min16 cm16
11:15:25  19  ,clse-min18 cm18
11:15:25  20  -- clse relation to moving-avg
11:15:25  21  ,clse-avg4  ca4
11:15:25  22  ,clse-avg6  ca6
11:15:25  23  ,clse-avg8  ca8
11:15:25  24  ,clse-avg10 ca10
11:15:25  25  ,clse-avg12 ca12
11:15:25  26  ,clse-avg14 ca14
11:15:25  27  ,clse-avg16 ca16
11:15:25  28  ,clse-avg18 ca18
11:15:25  29  -- clse relation to moving-max
11:15:25  30  ,clse-max4  cx4
11:15:25  31  ,clse-max6  cx6
11:15:25  32  ,clse-max8  cx8
11:15:25  33  ,clse-max10 cx10
11:15:25  34  ,clse-max12 cx12
11:15:25  35  ,clse-max14 cx14
11:15:25  36  ,clse-max16 cx16
11:15:25  37  ,clse-max18 cx18
11:15:25  38  -- Derive more attributes.
11:15:25  39  -- I want to use CORR() here to help SVM see the shape of the series.
11:15:25  40  -- But COVAR_POP is more stable:
11:15:25  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
11:15:25  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
11:15:25  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
11:15:25  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
11:15:25  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
11:15:25  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
11:15:25  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
11:15:25  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
11:15:25  49  -- Derive date related attributes:
11:15:25  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
11:15:25  51  ,0+TO_CHAR(ydate,'D')d
11:15:25  52  ,0+TO_CHAR(ydate,'W')w
11:15:25  53  -- mpm stands for minutes-past-midnight:
11:15:25  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
11:15:25  55  -- mph stands for minutes-past-hour:
11:15:25  56  ,0+TO_CHAR(ydate,'MI')mph
11:15:25  57  FROM svm6102
11:15:25  58  ORDER BY ydate
11:15:25  59  /

Table created.

Elapsed: 00:00:02.45
11:15:27 SQL> 
11:15:27 SQL> -- rpt
11:15:27 SQL> 
11:15:27 SQL> SELECT
11:15:27   2  pair
11:15:27   3  ,COUNT(pair)
11:15:27   4  ,MIN(clse),MAX(clse)
11:15:27   5  ,MIN(ydate),MAX(ydate)
11:15:27   6  FROM svm6122
11:15:27   7  GROUP BY pair
11:15:27   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_usd       19810  1.2970625	   1.4273 2010-10-04 11:20:01 2011-01-07 11:10:00

Elapsed: 00:00:00.04
11:15:27 SQL> 
11:15:27 SQL> -- Prepare for derivation of NTILE based params:
11:15:27 SQL> 
11:15:27 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.03
11:15:27 SQL> CREATE TABLE svm6142 COMPRESS AS
11:15:27   2  SELECT
11:15:27   3  pair
11:15:27   4  ,ydate
11:15:27   5  ,prdate
11:15:27   6  ,clse
11:15:27   7  ,g6
11:15:27   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
11:15:27   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
11:15:27  10  ,CASE WHEN trend IS NULL THEN 1
11:15:27  11  	    WHEN trend =0      THEN 1
11:15:27  12  	    ELSE trend END trend
11:15:27  13  ,cm4
11:15:27  14  ,cm6
11:15:27  15  ,cm8
11:15:27  16  ,cm10
11:15:27  17  ,cm12
11:15:27  18  ,cm14
11:15:27  19  ,cm16
11:15:27  20  ,cm18
11:15:27  21  --
11:15:27  22  ,ca4
11:15:27  23  ,ca6
11:15:27  24  ,ca8
11:15:27  25  ,ca10
11:15:27  26  ,ca12
11:15:27  27  ,ca14
11:15:27  28  ,ca16
11:15:27  29  ,ca18
11:15:27  30  --
11:15:27  31  ,cx4
11:15:27  32  ,cx6
11:15:27  33  ,cx8
11:15:27  34  ,cx10
11:15:27  35  ,cx12
11:15:27  36  ,cx14
11:15:27  37  ,cx16
11:15:27  38  ,cx18
11:15:27  39  --
11:15:27  40  ,crr4
11:15:27  41  ,crr6
11:15:27  42  ,crr8
11:15:27  43  ,crr10
11:15:27  44  ,crr12
11:15:27  45  ,crr14
11:15:27  46  ,crr16
11:15:27  47  ,crr18
11:15:27  48  --
11:15:27  49  ,hh
11:15:27  50  ,d
11:15:27  51  ,w
11:15:27  52  ,mpm
11:15:27  53  ,mph
11:15:27  54  FROM svm6122
11:15:27  55  ORDER BY ydate
11:15:27  56  /

Table created.

Elapsed: 00:00:00.38
11:15:28 SQL> 
11:15:28 SQL> -- rpt
11:15:28 SQL> 
11:15:28 SQL> SELECT
11:15:28   2  pair
11:15:28   3  ,trend
11:15:28   4  ,gatt
11:15:28   5  ,COUNT(pair)
11:15:28   6  ,AVG(g6)
11:15:28   7  FROM svm6142
11:15:28   8  GROUP BY pair,trend,gatt
11:15:28   9  ORDER BY pair,trend,gatt
11:15:28  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6602 -.00313865
eur_usd 	-1 up	      3564 .004451722
eur_usd 	-1		68
eur_usd 	 1 nup	      5867 -.00324774
eur_usd 	 1 up	      3705 .005071238
eur_usd 	 1		 4

6 rows selected.

Elapsed: 00:00:00.05
11:15:28 SQL> 
11:15:28 SQL> 
11:15:28 SQL> -- Derive NTILE based params:
11:15:28 SQL> 
11:15:28 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.53
11:15:28 SQL> CREATE TABLE svm6162 COMPRESS AS
11:15:28   2  SELECT
11:15:28   3  pair
11:15:28   4  ,ydate
11:15:28   5  ,prdate
11:15:28   6  ,clse
11:15:28   7  ,g6
11:15:28   8  ,gatt
11:15:28   9  ,gattn
11:15:28  10  ,trend
11:15:28  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
11:15:28  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
11:15:28  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
11:15:28  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
11:15:28  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
11:15:28  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
11:15:28  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
11:15:28  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
11:15:28  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
11:15:28  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
11:15:28  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
11:15:28  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
11:15:28  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
11:15:28  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
11:15:28  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
11:15:28  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
11:15:28  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
11:15:28  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
11:15:28  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
11:15:28  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
11:15:28  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
11:15:28  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
11:15:28  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
11:15:28  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
11:15:28  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
11:15:28  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
11:15:28  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
11:15:28  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
11:15:28  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
11:15:28  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
11:15:28  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
11:15:28  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
11:15:28  43  ,hh  att32
11:15:28  44  ,d   att33
11:15:28  45  ,w   att34
11:15:28  46  ,mpm att35
11:15:28  47  ,mph att36
11:15:28  48  ,trend att37
11:15:28  49  FROM svm6142
11:15:28  50  ORDER BY ydate
11:15:28  51  /

Table created.

Elapsed: 00:00:04.97
11:15:33 SQL> 
11:15:33 SQL> -- rpt
11:15:33 SQL> 
11:15:33 SQL> SELECT
11:15:33   2  pair
11:15:33   3  ,trend
11:15:33   4  ,gatt
11:15:33   5  ,COUNT(pair)
11:15:33   6  ,AVG(g6)
11:15:33   7  FROM svm6162
11:15:33   8  GROUP BY pair,trend,gatt
11:15:33   9  ORDER BY pair,trend,gatt
11:15:33  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6602 -.00313865
eur_usd 	-1 up	      3564 .004451722
eur_usd 	-1		68
eur_usd 	 1 nup	      5867 -.00324774
eur_usd 	 1 up	      3705 .005071238
eur_usd 	 1		 4

6 rows selected.

Elapsed: 00:00:00.03
11:15:33 SQL> 
11:15:33 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.41
11:15:34 SQL> CREATE TABLE modsrc COMPRESS AS
11:15:34   2  SELECT
11:15:34   3  pair
11:15:34   4  ,ydate
11:15:34   5  ,prdate
11:15:34   6  ,trend
11:15:34   7  ,g6
11:15:34   8  ,gatt
11:15:34   9  ,gattn
11:15:34  10  FROM svm6162
11:15:34  11  /

Table created.

Elapsed: 00:00:00.09
11:15:34 SQL> 
11:15:34 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.22
11:15:34 SQL> 
11:15:34 SQL> DROP   TABLE eur_ms610 ;

Table dropped.

Elapsed: 00:00:00.28
11:15:34 SQL> CREATE TABLE eur_ms610 COMPRESS AS
11:15:34   2  SELECT
11:15:34   3  ydate
11:15:34   4  ,trend eur_trend
11:15:34   5  ,g6    eur_g6
11:15:34   6  ,gatt  eur_gatt
11:15:34   7  ,gattn eur_gattn
11:15:34   8  FROM modsrc
11:15:34   9  /

Table created.

Elapsed: 00:00:00.06
11:15:35 SQL> 
11:15:35 SQL> ANALYZE TABLE eur_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
11:15:35 SQL> 
11:15:35 SQL> -- I need a copy of the attributes:
11:15:35 SQL> 
11:15:35 SQL> 
11:15:35 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.04
11:15:35 SQL> CREATE TABLE eur_att COMPRESS AS
11:15:35   2  SELECT
11:15:35   3  ydate
11:15:35   4  ,att00 eur_att00
11:15:35   5  ,att01 eur_att01
11:15:35   6  ,att02 eur_att02
11:15:35   7  ,att03 eur_att03
11:15:35   8  ,att04 eur_att04
11:15:35   9  ,att05 eur_att05
11:15:35  10  ,att06 eur_att06
11:15:35  11  ,att07 eur_att07
11:15:35  12  ,att08 eur_att08
11:15:35  13  ,att09 eur_att09
11:15:35  14  ,att10 eur_att10
11:15:35  15  ,att11 eur_att11
11:15:35  16  ,att12 eur_att12
11:15:35  17  ,att13 eur_att13
11:15:35  18  ,att14 eur_att14
11:15:35  19  ,att15 eur_att15
11:15:35  20  ,att16 eur_att16
11:15:35  21  ,att17 eur_att17
11:15:35  22  ,att18 eur_att18
11:15:35  23  ,att19 eur_att19
11:15:35  24  ,att20 eur_att20
11:15:35  25  ,att21 eur_att21
11:15:35  26  ,att22 eur_att22
11:15:35  27  ,att23 eur_att23
11:15:35  28  ,att24 eur_att24
11:15:35  29  ,att25 eur_att25
11:15:35  30  ,att26 eur_att26
11:15:35  31  ,att27 eur_att27
11:15:35  32  ,att28 eur_att28
11:15:35  33  ,att29 eur_att29
11:15:35  34  ,att30 eur_att30
11:15:35  35  ,att31 eur_att31
11:15:35  36  ,att32 eur_att32
11:15:35  37  ,att33 eur_att33
11:15:35  38  ,att34 eur_att34
11:15:35  39  ,att35 eur_att35
11:15:35  40  ,att36 eur_att36
11:15:35  41  ,att37 eur_att37
11:15:35  42  FROM svm6162
11:15:35  43  /

Table created.

Elapsed: 00:00:00.17
11:15:35 SQL> 
11:15:35 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
11:15:35 SQL> 
11:15:35 SQL> -- rpt
11:15:35 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19810

Elapsed: 00:00:00.91
11:15:36 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     19810

Elapsed: 00:00:00.01
11:15:36 SQL> 
11:15:36 SQL> --
11:15:36 SQL> -- aud610.sql
11:15:36 SQL> --
11:15:36 SQL> 
11:15:36 SQL> -- Creates views and tables for backtesting a forex SVM strategy
11:15:36 SQL> 
11:15:36 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.43
11:15:37 SQL> 
11:15:37 SQL> -- I created di5min here:
11:15:37 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
11:15:37 SQL> 
11:15:37 SQL> CREATE OR REPLACE VIEW svm6102 AS
11:15:37   2  SELECT
11:15:37   3  pair
11:15:37   4  ,ydate
11:15:37   5  ,prdate
11:15:37   6  ,rownum rnum -- acts as t in my time-series
11:15:37   7  ,clse
11:15:37   8  -- Derive a bunch of attributes from clse, the latest price:
11:15:37   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
11:15:37  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
11:15:37  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
11:15:37  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
11:15:37  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
11:15:37  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
11:15:37  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
11:15:37  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
11:15:37  17  --
11:15:37  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
11:15:37  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
11:15:37  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
11:15:37  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
11:15:37  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
11:15:37  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
11:15:37  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
11:15:37  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
11:15:37  26  --
11:15:37  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
11:15:37  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
11:15:37  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
11:15:37  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
11:15:37  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
11:15:37  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
11:15:37  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
11:15:37  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
11:15:37  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
11:15:37  36  FROM di5min WHERE pair LIKE'%aud%'
11:15:37  37  AND ydate > sysdate - 95
11:15:37  38  ORDER BY ydate
11:15:37  39  /

View created.

Elapsed: 00:00:00.04
11:15:37 SQL> 
11:15:37 SQL> -- rpt
11:15:37 SQL> 
11:15:37 SQL> SELECT
11:15:37   2  pair
11:15:37   3  ,COUNT(pair)
11:15:37   4  ,MIN(clse),MAX(clse)
11:15:37   5  ,MIN(avg6),MAX(avg6)
11:15:37   6  ,MIN(ydate),MAX(ydate)
11:15:37   7  FROM svm6102
11:15:37   8  GROUP BY pair
11:15:37   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
aud_usd       19807	.95405	  1.02495 .957141438 1.02284247 2010-10-04 11:20:01 2011-01-07 11:10:00

Elapsed: 00:00:00.90
11:15:38 SQL> 
11:15:38 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
11:15:38 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.36
11:15:38 SQL> CREATE TABLE svm6122 COMPRESS AS
11:15:38   2  SELECT
11:15:38   3  pair
11:15:38   4  ,ydate
11:15:38   5  ,prdate
11:15:38   6  ,clse
11:15:38   7  -- g6 is important. I want to predict g6:
11:15:38   8  ,ld6 - clse g6
11:15:38   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
11:15:38  10  -- I want more attributes from the ones I derived above:
11:15:38  11  -- clse relation to moving-min
11:15:38  12  ,clse-min4  cm4
11:15:38  13  ,clse-min6  cm6
11:15:38  14  ,clse-min8  cm8
11:15:38  15  ,clse-min10 cm10
11:15:38  16  ,clse-min12 cm12
11:15:38  17  ,clse-min14 cm14
11:15:38  18  ,clse-min16 cm16
11:15:38  19  ,clse-min18 cm18
11:15:38  20  -- clse relation to moving-avg
11:15:38  21  ,clse-avg4  ca4
11:15:38  22  ,clse-avg6  ca6
11:15:38  23  ,clse-avg8  ca8
11:15:38  24  ,clse-avg10 ca10
11:15:38  25  ,clse-avg12 ca12
11:15:38  26  ,clse-avg14 ca14
11:15:38  27  ,clse-avg16 ca16
11:15:38  28  ,clse-avg18 ca18
11:15:38  29  -- clse relation to moving-max
11:15:38  30  ,clse-max4  cx4
11:15:38  31  ,clse-max6  cx6
11:15:38  32  ,clse-max8  cx8
11:15:38  33  ,clse-max10 cx10
11:15:38  34  ,clse-max12 cx12
11:15:38  35  ,clse-max14 cx14
11:15:38  36  ,clse-max16 cx16
11:15:38  37  ,clse-max18 cx18
11:15:38  38  -- Derive more attributes.
11:15:38  39  -- I want to use CORR() here to help SVM see the shape of the series.
11:15:38  40  -- But COVAR_POP is more stable:
11:15:38  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
11:15:38  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
11:15:38  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
11:15:38  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
11:15:38  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
11:15:38  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
11:15:38  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
11:15:38  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
11:15:38  49  -- Derive date related attributes:
11:15:38  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
11:15:38  51  ,0+TO_CHAR(ydate,'D')d
11:15:38  52  ,0+TO_CHAR(ydate,'W')w
11:15:38  53  -- mpm stands for minutes-past-midnight:
11:15:38  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
11:15:38  55  -- mph stands for minutes-past-hour:
11:15:38  56  ,0+TO_CHAR(ydate,'MI')mph
11:15:38  57  FROM svm6102
11:15:38  58  ORDER BY ydate
11:15:38  59  /

Table created.

Elapsed: 00:00:02.15
11:15:40 SQL> 
11:15:40 SQL> -- rpt
11:15:40 SQL> 
11:15:40 SQL> SELECT
11:15:40   2  pair
11:15:40   3  ,COUNT(pair)
11:15:40   4  ,MIN(clse),MAX(clse)
11:15:40   5  ,MIN(ydate),MAX(ydate)
11:15:40   6  FROM svm6122
11:15:40   7  GROUP BY pair
11:15:40   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
aud_usd       19807	.95405	  1.02495 2010-10-04 11:20:01 2011-01-07 11:10:00

Elapsed: 00:00:00.07
11:15:40 SQL> 
11:15:40 SQL> -- Prepare for derivation of NTILE based params:
11:15:40 SQL> 
11:15:40 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.25
11:15:40 SQL> CREATE TABLE svm6142 COMPRESS AS
11:15:40   2  SELECT
11:15:40   3  pair
11:15:40   4  ,ydate
11:15:40   5  ,prdate
11:15:40   6  ,clse
11:15:40   7  ,g6
11:15:40   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
11:15:40   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
11:15:40  10  ,CASE WHEN trend IS NULL THEN 1
11:15:40  11  	    WHEN trend =0      THEN 1
11:15:40  12  	    ELSE trend END trend
11:15:40  13  ,cm4
11:15:40  14  ,cm6
11:15:40  15  ,cm8
11:15:40  16  ,cm10
11:15:40  17  ,cm12
11:15:40  18  ,cm14
11:15:40  19  ,cm16
11:15:40  20  ,cm18
11:15:40  21  --
11:15:40  22  ,ca4
11:15:40  23  ,ca6
11:15:40  24  ,ca8
11:15:40  25  ,ca10
11:15:40  26  ,ca12
11:15:40  27  ,ca14
11:15:40  28  ,ca16
11:15:40  29  ,ca18
11:15:40  30  --
11:15:40  31  ,cx4
11:15:40  32  ,cx6
11:15:40  33  ,cx8
11:15:40  34  ,cx10
11:15:40  35  ,cx12
11:15:40  36  ,cx14
11:15:40  37  ,cx16
11:15:40  38  ,cx18
11:15:40  39  --
11:15:40  40  ,crr4
11:15:40  41  ,crr6
11:15:40  42  ,crr8
11:15:40  43  ,crr10
11:15:40  44  ,crr12
11:15:40  45  ,crr14
11:15:40  46  ,crr16
11:15:40  47  ,crr18
11:15:40  48  --
11:15:40  49  ,hh
11:15:40  50  ,d
11:15:40  51  ,w
11:15:41  52  ,mpm
11:15:41  53  ,mph
11:15:41  54  FROM svm6122
11:15:41  55  ORDER BY ydate
11:15:41  56  /

Table created.

Elapsed: 00:00:00.38
11:15:41 SQL> 
11:15:41 SQL> -- rpt
11:15:41 SQL> 
11:15:41 SQL> SELECT
11:15:41   2  pair
11:15:41   3  ,trend
11:15:41   4  ,gatt
11:15:41   5  ,COUNT(pair)
11:15:41   6  ,AVG(g6)
11:15:41   7  FROM svm6142
11:15:41   8  GROUP BY pair,trend,gatt
11:15:41   9  ORDER BY pair,trend,gatt
11:15:41  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5752  -.0021315
aud_usd 	-1 up	      3684 .003755646
aud_usd 	-1		64
aud_usd 	 1 nup	      6706 -.00214362
aud_usd 	 1 up	      3593 .004054752
aud_usd 	 1		 8

6 rows selected.

Elapsed: 00:00:00.04
11:15:41 SQL> 
11:15:41 SQL> 
11:15:41 SQL> -- Derive NTILE based params:
11:15:41 SQL> 
11:15:41 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.22
11:15:41 SQL> CREATE TABLE svm6162 COMPRESS AS
11:15:41   2  SELECT
11:15:41   3  pair
11:15:41   4  ,ydate
11:15:41   5  ,prdate
11:15:41   6  ,clse
11:15:41   7  ,g6
11:15:41   8  ,gatt
11:15:41   9  ,gattn
11:15:41  10  ,trend
11:15:41  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
11:15:41  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
11:15:41  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
11:15:41  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
11:15:41  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
11:15:41  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
11:15:41  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
11:15:41  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
11:15:41  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
11:15:41  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
11:15:41  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
11:15:41  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
11:15:41  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
11:15:41  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
11:15:41  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
11:15:41  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
11:15:41  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
11:15:41  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
11:15:41  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
11:15:41  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
11:15:41  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
11:15:41  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
11:15:41  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
11:15:41  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
11:15:41  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
11:15:41  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
11:15:41  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
11:15:41  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
11:15:41  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
11:15:41  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
11:15:41  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
11:15:41  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
11:15:41  43  ,hh  att32
11:15:41  44  ,d   att33
11:15:41  45  ,w   att34
11:15:41  46  ,mpm att35
11:15:41  47  ,mph att36
11:15:41  48  ,trend att37
11:15:41  49  FROM svm6142
11:15:41  50  ORDER BY ydate
11:15:41  51  /

Table created.

Elapsed: 00:00:04.78
11:15:46 SQL> 
11:15:46 SQL> -- rpt
11:15:46 SQL> 
11:15:46 SQL> SELECT
11:15:46   2  pair
11:15:46   3  ,trend
11:15:46   4  ,gatt
11:15:46   5  ,COUNT(pair)
11:15:46   6  ,AVG(g6)
11:15:46   7  FROM svm6162
11:15:46   8  GROUP BY pair,trend,gatt
11:15:46   9  ORDER BY pair,trend,gatt
11:15:46  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5752  -.0021315
aud_usd 	-1 up	      3684 .003755646
aud_usd 	-1		64
aud_usd 	 1 nup	      6706 -.00214362
aud_usd 	 1 up	      3593 .004054752
aud_usd 	 1		 8

6 rows selected.

Elapsed: 00:00:00.02
11:15:46 SQL> 
11:15:46 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
11:15:46 SQL> CREATE TABLE modsrc COMPRESS AS
11:15:46   2  SELECT
11:15:46   3  pair
11:15:46   4  ,ydate
11:15:46   5  ,prdate
11:15:46   6  ,trend
11:15:46   7  ,g6
11:15:46   8  ,gatt
11:15:46   9  ,gattn
11:15:46  10  FROM svm6162
11:15:46  11  /

Table created.

Elapsed: 00:00:00.07
11:15:46 SQL> 
11:15:46 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
11:15:46 SQL> 
11:15:46 SQL> DROP   TABLE aud_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
11:15:46 SQL> CREATE TABLE aud_ms610 COMPRESS AS
11:15:46   2  SELECT
11:15:46   3  ydate
11:15:46   4  ,trend aud_trend
11:15:46   5  ,g6    aud_g6
11:15:46   6  ,gatt  aud_gatt
11:15:46   7  ,gattn aud_gattn
11:15:46   8  FROM modsrc
11:15:46   9  /

Table created.

Elapsed: 00:00:00.06
11:15:46 SQL> 
11:15:46 SQL> ANALYZE TABLE aud_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
11:15:47 SQL> 
11:15:47 SQL> -- I need a copy of the attributes:
11:15:47 SQL> 
11:15:47 SQL> 
11:15:47 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.05
11:15:47 SQL> CREATE TABLE aud_att COMPRESS AS
11:15:47   2  SELECT
11:15:47   3  ydate
11:15:47   4  ,att00 aud_att00
11:15:47   5  ,att01 aud_att01
11:15:47   6  ,att02 aud_att02
11:15:47   7  ,att03 aud_att03
11:15:47   8  ,att04 aud_att04
11:15:47   9  ,att05 aud_att05
11:15:47  10  ,att06 aud_att06
11:15:47  11  ,att07 aud_att07
11:15:47  12  ,att08 aud_att08
11:15:47  13  ,att09 aud_att09
11:15:47  14  ,att10 aud_att10
11:15:47  15  ,att11 aud_att11
11:15:47  16  ,att12 aud_att12
11:15:47  17  ,att13 aud_att13
11:15:47  18  ,att14 aud_att14
11:15:47  19  ,att15 aud_att15
11:15:47  20  ,att16 aud_att16
11:15:47  21  ,att17 aud_att17
11:15:47  22  ,att18 aud_att18
11:15:47  23  ,att19 aud_att19
11:15:47  24  ,att20 aud_att20
11:15:47  25  ,att21 aud_att21
11:15:47  26  ,att22 aud_att22
11:15:47  27  ,att23 aud_att23
11:15:47  28  ,att24 aud_att24
11:15:47  29  ,att25 aud_att25
11:15:47  30  ,att26 aud_att26
11:15:47  31  ,att27 aud_att27
11:15:47  32  ,att28 aud_att28
11:15:47  33  ,att29 aud_att29
11:15:47  34  ,att30 aud_att30
11:15:47  35  ,att31 aud_att31
11:15:47  36  ,att32 aud_att32
11:15:47  37  ,att33 aud_att33
11:15:47  38  ,att34 aud_att34
11:15:47  39  ,att35 aud_att35
11:15:47  40  ,att36 aud_att36
11:15:47  41  ,att37 aud_att37
11:15:47  42  FROM svm6162
11:15:47  43  /

Table created.

Elapsed: 00:00:00.17
11:15:47 SQL> 
11:15:47 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
11:15:47 SQL> 
11:15:47 SQL> -- rpt
11:15:47 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19807

Elapsed: 00:00:00.88
11:15:48 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     19807

Elapsed: 00:00:00.01
11:15:48 SQL> 
11:15:48 SQL> --
11:15:48 SQL> -- gbp610.sql
11:15:48 SQL> --
11:15:48 SQL> 
11:15:48 SQL> -- Creates views and tables for backtesting a forex SVM strategy
11:15:48 SQL> 
11:15:48 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:02.00
11:15:50 SQL> 
11:15:50 SQL> -- I created di5min here:
11:15:50 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
11:15:50 SQL> 
11:15:50 SQL> CREATE OR REPLACE VIEW svm6102 AS
11:15:50   2  SELECT
11:15:50   3  pair
11:15:50   4  ,ydate
11:15:50   5  ,prdate
11:15:50   6  ,rownum rnum -- acts as t in my time-series
11:15:50   7  ,clse
11:15:50   8  -- Derive a bunch of attributes from clse, the latest price:
11:15:50   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
11:15:50  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
11:15:50  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
11:15:50  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
11:15:50  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
11:15:50  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
11:15:50  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
11:15:50  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
11:15:50  17  --
11:15:50  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
11:15:50  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
11:15:50  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
11:15:50  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
11:15:50  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
11:15:50  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
11:15:50  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
11:15:50  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
11:15:50  26  --
11:15:50  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
11:15:50  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
11:15:50  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
11:15:50  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
11:15:50  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
11:15:50  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
11:15:50  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
11:15:50  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
11:15:50  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
11:15:50  36  FROM di5min WHERE pair LIKE'%gbp%'
11:15:50  37  AND ydate > sysdate - 95
11:15:50  38  ORDER BY ydate
11:15:50  39  /

View created.

Elapsed: 00:00:00.05
11:15:50 SQL> 
11:15:50 SQL> -- rpt
11:15:50 SQL> 
11:15:50 SQL> SELECT
11:15:50   2  pair
11:15:50   3  ,COUNT(pair)
11:15:50   4  ,MIN(clse),MAX(clse)
11:15:50   5  ,MIN(avg6),MAX(avg6)
11:15:50   6  ,MIN(ydate),MAX(ydate)
11:15:50   7  FROM svm6102
11:15:50   8  GROUP BY pair
11:15:50   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
gbp_usd       19809   1.535325	   1.6295 1.53696747 1.62716986 2010-10-04 11:20:01 2011-01-07 11:10:00

Elapsed: 00:00:00.89
11:15:51 SQL> 
11:15:51 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
11:15:51 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.28
11:15:51 SQL> CREATE TABLE svm6122 COMPRESS AS
11:15:51   2  SELECT
11:15:51   3  pair
11:15:51   4  ,ydate
11:15:51   5  ,prdate
11:15:51   6  ,clse
11:15:51   7  -- g6 is important. I want to predict g6:
11:15:51   8  ,ld6 - clse g6
11:15:51   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
11:15:51  10  -- I want more attributes from the ones I derived above:
11:15:51  11  -- clse relation to moving-min
11:15:51  12  ,clse-min4  cm4
11:15:51  13  ,clse-min6  cm6
11:15:51  14  ,clse-min8  cm8
11:15:51  15  ,clse-min10 cm10
11:15:51  16  ,clse-min12 cm12
11:15:51  17  ,clse-min14 cm14
11:15:51  18  ,clse-min16 cm16
11:15:51  19  ,clse-min18 cm18
11:15:51  20  -- clse relation to moving-avg
11:15:51  21  ,clse-avg4  ca4
11:15:51  22  ,clse-avg6  ca6
11:15:51  23  ,clse-avg8  ca8
11:15:51  24  ,clse-avg10 ca10
11:15:51  25  ,clse-avg12 ca12
11:15:51  26  ,clse-avg14 ca14
11:15:51  27  ,clse-avg16 ca16
11:15:51  28  ,clse-avg18 ca18
11:15:51  29  -- clse relation to moving-max
11:15:51  30  ,clse-max4  cx4
11:15:51  31  ,clse-max6  cx6
11:15:51  32  ,clse-max8  cx8
11:15:51  33  ,clse-max10 cx10
11:15:51  34  ,clse-max12 cx12
11:15:51  35  ,clse-max14 cx14
11:15:51  36  ,clse-max16 cx16
11:15:51  37  ,clse-max18 cx18
11:15:51  38  -- Derive more attributes.
11:15:51  39  -- I want to use CORR() here to help SVM see the shape of the series.
11:15:51  40  -- But COVAR_POP is more stable:
11:15:51  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
11:15:51  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
11:15:51  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
11:15:51  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
11:15:51  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
11:15:51  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
11:15:51  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
11:15:51  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
11:15:51  49  -- Derive date related attributes:
11:15:51  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
11:15:51  51  ,0+TO_CHAR(ydate,'D')d
11:15:51  52  ,0+TO_CHAR(ydate,'W')w
11:15:51  53  -- mpm stands for minutes-past-midnight:
11:15:51  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
11:15:51  55  -- mph stands for minutes-past-hour:
11:15:51  56  ,0+TO_CHAR(ydate,'MI')mph
11:15:51  57  FROM svm6102
11:15:51  58  ORDER BY ydate
11:15:51  59  /

Table created.

Elapsed: 00:00:02.11
11:15:54 SQL> 
11:15:54 SQL> -- rpt
11:15:54 SQL> 
11:15:54 SQL> SELECT
11:15:54   2  pair
11:15:54   3  ,COUNT(pair)
11:15:54   4  ,MIN(clse),MAX(clse)
11:15:54   5  ,MIN(ydate),MAX(ydate)
11:15:54   6  FROM svm6122
11:15:54   7  GROUP BY pair
11:15:54   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
gbp_usd       19809   1.535325	   1.6295 2010-10-04 11:20:01 2011-01-07 11:10:00

Elapsed: 00:00:00.04
11:15:54 SQL> 
11:15:54 SQL> -- Prepare for derivation of NTILE based params:
11:15:54 SQL> 
11:15:54 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.31
11:15:54 SQL> CREATE TABLE svm6142 COMPRESS AS
11:15:54   2  SELECT
11:15:54   3  pair
11:15:54   4  ,ydate
11:15:54   5  ,prdate
11:15:54   6  ,clse
11:15:54   7  ,g6
11:15:54   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
11:15:54   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
11:15:54  10  ,CASE WHEN trend IS NULL THEN 1
11:15:54  11  	    WHEN trend =0      THEN 1
11:15:54  12  	    ELSE trend END trend
11:15:54  13  ,cm4
11:15:54  14  ,cm6
11:15:54  15  ,cm8
11:15:54  16  ,cm10
11:15:54  17  ,cm12
11:15:54  18  ,cm14
11:15:54  19  ,cm16
11:15:54  20  ,cm18
11:15:54  21  --
11:15:54  22  ,ca4
11:15:54  23  ,ca6
11:15:54  24  ,ca8
11:15:54  25  ,ca10
11:15:54  26  ,ca12
11:15:54  27  ,ca14
11:15:54  28  ,ca16
11:15:54  29  ,ca18
11:15:54  30  --
11:15:54  31  ,cx4
11:15:54  32  ,cx6
11:15:54  33  ,cx8
11:15:54  34  ,cx10
11:15:54  35  ,cx12
11:15:54  36  ,cx14
11:15:54  37  ,cx16
11:15:54  38  ,cx18
11:15:54  39  --
11:15:54  40  ,crr4
11:15:54  41  ,crr6
11:15:54  42  ,crr8
11:15:54  43  ,crr10
11:15:54  44  ,crr12
11:15:54  45  ,crr14
11:15:54  46  ,crr16
11:15:54  47  ,crr18
11:15:54  48  --
11:15:54  49  ,hh
11:15:54  50  ,d
11:15:54  51  ,w
11:15:54  52  ,mpm
11:15:54  53  ,mph
11:15:54  54  FROM svm6122
11:15:54  55  ORDER BY ydate
11:15:54  56  /

Table created.

Elapsed: 00:00:00.38
11:15:54 SQL> 
11:15:54 SQL> -- rpt
11:15:54 SQL> 
11:15:54 SQL> SELECT
11:15:54   2  pair
11:15:54   3  ,trend
11:15:54   4  ,gatt
11:15:54   5  ,COUNT(pair)
11:15:54   6  ,AVG(g6)
11:15:54   7  FROM svm6142
11:15:54   8  GROUP BY pair,trend,gatt
11:15:54   9  ORDER BY pair,trend,gatt
11:15:54  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6530 -.00260544
gbp_usd 	-1 up	      3511 .004318403
gbp_usd 	-1		57
gbp_usd 	 1 nup	      6247 -.00266547
gbp_usd 	 1 up	      3449 .004526352
gbp_usd 	 1		15

6 rows selected.

Elapsed: 00:00:00.03
11:15:54 SQL> 
11:15:54 SQL> 
11:15:54 SQL> -- Derive NTILE based params:
11:15:54 SQL> 
11:15:54 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.16
11:15:54 SQL> CREATE TABLE svm6162 COMPRESS AS
11:15:54   2  SELECT
11:15:54   3  pair
11:15:54   4  ,ydate
11:15:54   5  ,prdate
11:15:54   6  ,clse
11:15:54   7  ,g6
11:15:54   8  ,gatt
11:15:54   9  ,gattn
11:15:54  10  ,trend
11:15:54  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
11:15:54  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
11:15:54  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
11:15:54  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
11:15:54  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
11:15:54  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
11:15:54  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
11:15:54  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
11:15:54  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
11:15:54  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
11:15:54  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
11:15:54  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
11:15:54  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
11:15:54  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
11:15:54  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
11:15:54  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
11:15:54  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
11:15:54  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
11:15:54  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
11:15:54  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
11:15:54  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
11:15:54  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
11:15:54  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
11:15:54  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
11:15:54  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
11:15:54  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
11:15:54  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
11:15:54  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
11:15:54  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
11:15:54  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
11:15:54  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
11:15:54  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
11:15:54  43  ,hh  att32
11:15:54  44  ,d   att33
11:15:54  45  ,w   att34
11:15:54  46  ,mpm att35
11:15:54  47  ,mph att36
11:15:54  48  ,trend att37
11:15:54  49  FROM svm6142
11:15:54  50  ORDER BY ydate
11:15:54  51  /

Table created.

Elapsed: 00:00:04.91
11:15:59 SQL> 
11:15:59 SQL> -- rpt
11:15:59 SQL> 
11:15:59 SQL> SELECT
11:15:59   2  pair
11:15:59   3  ,trend
11:15:59   4  ,gatt
11:15:59   5  ,COUNT(pair)
11:15:59   6  ,AVG(g6)
11:15:59   7  FROM svm6162
11:15:59   8  GROUP BY pair,trend,gatt
11:15:59   9  ORDER BY pair,trend,gatt
11:15:59  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6530 -.00260544
gbp_usd 	-1 up	      3511 .004318403
gbp_usd 	-1		57
gbp_usd 	 1 nup	      6247 -.00266547
gbp_usd 	 1 up	      3449 .004526352
gbp_usd 	 1		15

6 rows selected.

Elapsed: 00:00:00.03
11:15:59 SQL> 
11:15:59 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
11:16:00 SQL> CREATE TABLE modsrc COMPRESS AS
11:16:00   2  SELECT
11:16:00   3  pair
11:16:00   4  ,ydate
11:16:00   5  ,prdate
11:16:00   6  ,trend
11:16:00   7  ,g6
11:16:00   8  ,gatt
11:16:00   9  ,gattn
11:16:00  10  FROM svm6162
11:16:00  11  /

Table created.

Elapsed: 00:00:00.08
11:16:00 SQL> 
11:16:00 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
11:16:00 SQL> 
11:16:00 SQL> DROP   TABLE gbp_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
11:16:00 SQL> CREATE TABLE gbp_ms610 COMPRESS AS
11:16:00   2  SELECT
11:16:00   3  ydate
11:16:00   4  ,trend gbp_trend
11:16:00   5  ,g6    gbp_g6
11:16:00   6  ,gatt  gbp_gatt
11:16:00   7  ,gattn gbp_gattn
11:16:00   8  FROM modsrc
11:16:00   9  /

Table created.

Elapsed: 00:00:00.07
11:16:00 SQL> 
11:16:00 SQL> ANALYZE TABLE gbp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
11:16:00 SQL> 
11:16:00 SQL> -- I need a copy of the attributes:
11:16:00 SQL> 
11:16:00 SQL> 
11:16:00 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.05
11:16:00 SQL> CREATE TABLE gbp_att COMPRESS AS
11:16:00   2  SELECT
11:16:00   3  ydate
11:16:00   4  ,att00 gbp_att00
11:16:00   5  ,att01 gbp_att01
11:16:00   6  ,att02 gbp_att02
11:16:00   7  ,att03 gbp_att03
11:16:00   8  ,att04 gbp_att04
11:16:00   9  ,att05 gbp_att05
11:16:00  10  ,att06 gbp_att06
11:16:00  11  ,att07 gbp_att07
11:16:00  12  ,att08 gbp_att08
11:16:00  13  ,att09 gbp_att09
11:16:00  14  ,att10 gbp_att10
11:16:00  15  ,att11 gbp_att11
11:16:00  16  ,att12 gbp_att12
11:16:00  17  ,att13 gbp_att13
11:16:00  18  ,att14 gbp_att14
11:16:00  19  ,att15 gbp_att15
11:16:00  20  ,att16 gbp_att16
11:16:00  21  ,att17 gbp_att17
11:16:00  22  ,att18 gbp_att18
11:16:00  23  ,att19 gbp_att19
11:16:00  24  ,att20 gbp_att20
11:16:00  25  ,att21 gbp_att21
11:16:00  26  ,att22 gbp_att22
11:16:00  27  ,att23 gbp_att23
11:16:00  28  ,att24 gbp_att24
11:16:00  29  ,att25 gbp_att25
11:16:00  30  ,att26 gbp_att26
11:16:00  31  ,att27 gbp_att27
11:16:00  32  ,att28 gbp_att28
11:16:00  33  ,att29 gbp_att29
11:16:00  34  ,att30 gbp_att30
11:16:00  35  ,att31 gbp_att31
11:16:00  36  ,att32 gbp_att32
11:16:00  37  ,att33 gbp_att33
11:16:00  38  ,att34 gbp_att34
11:16:00  39  ,att35 gbp_att35
11:16:00  40  ,att36 gbp_att36
11:16:00  41  ,att37 gbp_att37
11:16:00  42  FROM svm6162
11:16:00  43  /

Table created.

Elapsed: 00:00:00.18
11:16:00 SQL> 
11:16:00 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.49
11:16:01 SQL> 
11:16:01 SQL> -- rpt
11:16:01 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19809

Elapsed: 00:00:00.88
11:16:02 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     19809

Elapsed: 00:00:00.00
11:16:02 SQL> 
11:16:02 SQL> --
11:16:02 SQL> -- jpy610.sql
11:16:02 SQL> --
11:16:02 SQL> 
11:16:02 SQL> -- Creates views and tables for backtesting a forex SVM strategy
11:16:02 SQL> 
11:16:02 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.53
11:16:02 SQL> 
11:16:02 SQL> -- I created di5min here:
11:16:02 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
11:16:02 SQL> 
11:16:02 SQL> CREATE OR REPLACE VIEW svm6102 AS
11:16:02   2  SELECT
11:16:02   3  pair
11:16:02   4  ,ydate
11:16:02   5  ,prdate
11:16:02   6  ,rownum rnum -- acts as t in my time-series
11:16:02   7  ,clse
11:16:02   8  -- Derive a bunch of attributes from clse, the latest price:
11:16:02   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
11:16:02  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
11:16:02  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
11:16:02  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
11:16:02  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
11:16:02  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
11:16:02  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
11:16:02  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
11:16:02  17  --
11:16:02  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
11:16:02  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
11:16:02  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
11:16:02  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
11:16:02  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
11:16:02  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
11:16:02  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
11:16:02  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
11:16:02  26  --
11:16:02  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
11:16:02  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
11:16:02  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
11:16:02  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
11:16:02  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
11:16:02  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
11:16:02  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
11:16:02  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
11:16:02  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
11:16:02  36  FROM di5min WHERE pair LIKE'%jpy%'
11:16:02  37  AND ydate > sysdate - 95
11:16:02  38  ORDER BY ydate
11:16:02  39  /

View created.

Elapsed: 00:00:00.05
11:16:02 SQL> 
11:16:02 SQL> -- rpt
11:16:02 SQL> 
11:16:02 SQL> SELECT
11:16:02   2  pair
11:16:02   3  ,COUNT(pair)
11:16:02   4  ,MIN(clse),MAX(clse)
11:16:02   5  ,MIN(avg6),MAX(avg6)
11:16:02   6  ,MIN(ydate),MAX(ydate)
11:16:02   7  FROM svm6102
11:16:02   8  GROUP BY pair
11:16:02   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_jpy       19808	 80.25	   84.485 80.3595205 84.3105479 2010-10-04 11:20:01 2011-01-07 11:10:00

Elapsed: 00:00:00.94
11:16:03 SQL> 
11:16:03 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
11:16:03 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.26
11:16:03 SQL> CREATE TABLE svm6122 COMPRESS AS
11:16:03   2  SELECT
11:16:03   3  pair
11:16:03   4  ,ydate
11:16:03   5  ,prdate
11:16:03   6  ,clse
11:16:03   7  -- g6 is important. I want to predict g6:
11:16:03   8  ,ld6 - clse g6
11:16:03   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
11:16:03  10  -- I want more attributes from the ones I derived above:
11:16:03  11  -- clse relation to moving-min
11:16:03  12  ,clse-min4  cm4
11:16:03  13  ,clse-min6  cm6
11:16:03  14  ,clse-min8  cm8
11:16:03  15  ,clse-min10 cm10
11:16:03  16  ,clse-min12 cm12
11:16:03  17  ,clse-min14 cm14
11:16:03  18  ,clse-min16 cm16
11:16:03  19  ,clse-min18 cm18
11:16:03  20  -- clse relation to moving-avg
11:16:03  21  ,clse-avg4  ca4
11:16:03  22  ,clse-avg6  ca6
11:16:03  23  ,clse-avg8  ca8
11:16:03  24  ,clse-avg10 ca10
11:16:03  25  ,clse-avg12 ca12
11:16:03  26  ,clse-avg14 ca14
11:16:03  27  ,clse-avg16 ca16
11:16:03  28  ,clse-avg18 ca18
11:16:03  29  -- clse relation to moving-max
11:16:03  30  ,clse-max4  cx4
11:16:03  31  ,clse-max6  cx6
11:16:03  32  ,clse-max8  cx8
11:16:03  33  ,clse-max10 cx10
11:16:03  34  ,clse-max12 cx12
11:16:03  35  ,clse-max14 cx14
11:16:03  36  ,clse-max16 cx16
11:16:03  37  ,clse-max18 cx18
11:16:03  38  -- Derive more attributes.
11:16:03  39  -- I want to use CORR() here to help SVM see the shape of the series.
11:16:03  40  -- But COVAR_POP is more stable:
11:16:03  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
11:16:03  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
11:16:03  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
11:16:03  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
11:16:03  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
11:16:03  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
11:16:03  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
11:16:03  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
11:16:03  49  -- Derive date related attributes:
11:16:03  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
11:16:03  51  ,0+TO_CHAR(ydate,'D')d
11:16:03  52  ,0+TO_CHAR(ydate,'W')w
11:16:03  53  -- mpm stands for minutes-past-midnight:
11:16:03  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
11:16:03  55  -- mph stands for minutes-past-hour:
11:16:03  56  ,0+TO_CHAR(ydate,'MI')mph
11:16:03  57  FROM svm6102
11:16:03  58  ORDER BY ydate
11:16:03  59  /

Table created.

Elapsed: 00:00:02.15
11:16:06 SQL> 
11:16:06 SQL> -- rpt
11:16:06 SQL> 
11:16:06 SQL> SELECT
11:16:06   2  pair
11:16:06   3  ,COUNT(pair)
11:16:06   4  ,MIN(clse),MAX(clse)
11:16:06   5  ,MIN(ydate),MAX(ydate)
11:16:06   6  FROM svm6122
11:16:06   7  GROUP BY pair
11:16:06   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_jpy       19808	 80.25	   84.485 2010-10-04 11:20:01 2011-01-07 11:10:00

Elapsed: 00:00:00.04
11:16:06 SQL> 
11:16:06 SQL> -- Prepare for derivation of NTILE based params:
11:16:06 SQL> 
11:16:06 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.28
11:16:06 SQL> CREATE TABLE svm6142 COMPRESS AS
11:16:06   2  SELECT
11:16:06   3  pair
11:16:06   4  ,ydate
11:16:06   5  ,prdate
11:16:06   6  ,clse
11:16:06   7  ,g6
11:16:06   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
11:16:06   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
11:16:06  10  ,CASE WHEN trend IS NULL THEN 1
11:16:06  11  	    WHEN trend =0      THEN 1
11:16:06  12  	    ELSE trend END trend
11:16:06  13  ,cm4
11:16:06  14  ,cm6
11:16:06  15  ,cm8
11:16:06  16  ,cm10
11:16:06  17  ,cm12
11:16:06  18  ,cm14
11:16:06  19  ,cm16
11:16:06  20  ,cm18
11:16:06  21  --
11:16:06  22  ,ca4
11:16:06  23  ,ca6
11:16:06  24  ,ca8
11:16:06  25  ,ca10
11:16:06  26  ,ca12
11:16:06  27  ,ca14
11:16:06  28  ,ca16
11:16:06  29  ,ca18
11:16:06  30  --
11:16:06  31  ,cx4
11:16:06  32  ,cx6
11:16:06  33  ,cx8
11:16:06  34  ,cx10
11:16:06  35  ,cx12
11:16:06  36  ,cx14
11:16:06  37  ,cx16
11:16:06  38  ,cx18
11:16:06  39  --
11:16:06  40  ,crr4
11:16:06  41  ,crr6
11:16:06  42  ,crr8
11:16:06  43  ,crr10
11:16:06  44  ,crr12
11:16:06  45  ,crr14
11:16:06  46  ,crr16
11:16:06  47  ,crr18
11:16:06  48  --
11:16:06  49  ,hh
11:16:06  50  ,d
11:16:06  51  ,w
11:16:06  52  ,mpm
11:16:06  53  ,mph
11:16:06  54  FROM svm6122
11:16:06  55  ORDER BY ydate
11:16:06  56  /

Table created.

Elapsed: 00:00:00.35
11:16:06 SQL> 
11:16:06 SQL> -- rpt
11:16:06 SQL> 
11:16:06 SQL> SELECT
11:16:06   2  pair
11:16:06   3  ,trend
11:16:06   4  ,gatt
11:16:06   5  ,COUNT(pair)
11:16:06   6  ,AVG(g6)
11:16:06   7  FROM svm6142
11:16:06   8  GROUP BY pair,trend,gatt
11:16:06   9  ORDER BY pair,trend,gatt
11:16:06  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5171 -.16583061
usd_jpy 	-1 up	      4859 .170736297
usd_jpy 	 1 nup	      5017 -.15289887
usd_jpy 	 1 up	      4689 .172378662
usd_jpy 	 1		72

Elapsed: 00:00:00.06
11:16:06 SQL> 
11:16:06 SQL> 
11:16:06 SQL> -- Derive NTILE based params:
11:16:06 SQL> 
11:16:06 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.17
11:16:07 SQL> CREATE TABLE svm6162 COMPRESS AS
11:16:07   2  SELECT
11:16:07   3  pair
11:16:07   4  ,ydate
11:16:07   5  ,prdate
11:16:07   6  ,clse
11:16:07   7  ,g6
11:16:07   8  ,gatt
11:16:07   9  ,gattn
11:16:07  10  ,trend
11:16:07  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
11:16:07  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
11:16:07  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
11:16:07  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
11:16:07  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
11:16:07  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
11:16:07  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
11:16:07  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
11:16:07  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
11:16:07  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
11:16:07  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
11:16:07  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
11:16:07  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
11:16:07  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
11:16:07  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
11:16:07  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
11:16:07  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
11:16:07  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
11:16:07  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
11:16:07  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
11:16:07  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
11:16:07  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
11:16:07  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
11:16:07  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
11:16:07  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
11:16:07  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
11:16:07  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
11:16:07  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
11:16:07  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
11:16:07  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
11:16:07  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
11:16:07  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
11:16:07  43  ,hh  att32
11:16:07  44  ,d   att33
11:16:07  45  ,w   att34
11:16:07  46  ,mpm att35
11:16:07  47  ,mph att36
11:16:07  48  ,trend att37
11:16:07  49  FROM svm6142
11:16:07  50  ORDER BY ydate
11:16:07  51  /

Table created.

Elapsed: 00:00:04.94
11:16:11 SQL> 
11:16:11 SQL> -- rpt
11:16:11 SQL> 
11:16:11 SQL> SELECT
11:16:11   2  pair
11:16:11   3  ,trend
11:16:11   4  ,gatt
11:16:11   5  ,COUNT(pair)
11:16:11   6  ,AVG(g6)
11:16:11   7  FROM svm6162
11:16:11   8  GROUP BY pair,trend,gatt
11:16:11   9  ORDER BY pair,trend,gatt
11:16:11  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5171 -.16583061
usd_jpy 	-1 up	      4859 .170736297
usd_jpy 	 1 nup	      5017 -.15289887
usd_jpy 	 1 up	      4689 .172378662
usd_jpy 	 1		72

Elapsed: 00:00:00.03
11:16:11 SQL> 
11:16:11 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.21
11:16:12 SQL> CREATE TABLE modsrc COMPRESS AS
11:16:12   2  SELECT
11:16:12   3  pair
11:16:12   4  ,ydate
11:16:12   5  ,prdate
11:16:12   6  ,trend
11:16:12   7  ,g6
11:16:12   8  ,gatt
11:16:12   9  ,gattn
11:16:12  10  FROM svm6162
11:16:12  11  /

Table created.

Elapsed: 00:00:00.08
11:16:12 SQL> 
11:16:12 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
11:16:12 SQL> 
11:16:12 SQL> DROP   TABLE jpy_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
11:16:12 SQL> CREATE TABLE jpy_ms610 COMPRESS AS
11:16:12   2  SELECT
11:16:12   3  ydate
11:16:12   4  ,trend jpy_trend
11:16:12   5  ,g6    jpy_g6
11:16:12   6  ,gatt  jpy_gatt
11:16:12   7  ,gattn jpy_gattn
11:16:12   8  FROM modsrc
11:16:12   9  /

Table created.

Elapsed: 00:00:00.06
11:16:12 SQL> 
11:16:12 SQL> ANALYZE TABLE jpy_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
11:16:12 SQL> 
11:16:12 SQL> -- I need a copy of the attributes:
11:16:12 SQL> 
11:16:12 SQL> 
11:16:12 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.04
11:16:12 SQL> CREATE TABLE jpy_att COMPRESS AS
11:16:12   2  SELECT
11:16:12   3  ydate
11:16:12   4  ,att00 jpy_att00
11:16:12   5  ,att01 jpy_att01
11:16:12   6  ,att02 jpy_att02
11:16:12   7  ,att03 jpy_att03
11:16:12   8  ,att04 jpy_att04
11:16:12   9  ,att05 jpy_att05
11:16:12  10  ,att06 jpy_att06
11:16:12  11  ,att07 jpy_att07
11:16:12  12  ,att08 jpy_att08
11:16:12  13  ,att09 jpy_att09
11:16:12  14  ,att10 jpy_att10
11:16:12  15  ,att11 jpy_att11
11:16:12  16  ,att12 jpy_att12
11:16:12  17  ,att13 jpy_att13
11:16:12  18  ,att14 jpy_att14
11:16:12  19  ,att15 jpy_att15
11:16:12  20  ,att16 jpy_att16
11:16:12  21  ,att17 jpy_att17
11:16:12  22  ,att18 jpy_att18
11:16:12  23  ,att19 jpy_att19
11:16:12  24  ,att20 jpy_att20
11:16:12  25  ,att21 jpy_att21
11:16:12  26  ,att22 jpy_att22
11:16:12  27  ,att23 jpy_att23
11:16:12  28  ,att24 jpy_att24
11:16:12  29  ,att25 jpy_att25
11:16:12  30  ,att26 jpy_att26
11:16:12  31  ,att27 jpy_att27
11:16:12  32  ,att28 jpy_att28
11:16:12  33  ,att29 jpy_att29
11:16:12  34  ,att30 jpy_att30
11:16:12  35  ,att31 jpy_att31
11:16:12  36  ,att32 jpy_att32
11:16:12  37  ,att33 jpy_att33
11:16:12  38  ,att34 jpy_att34
11:16:12  39  ,att35 jpy_att35
11:16:12  40  ,att36 jpy_att36
11:16:12  41  ,att37 jpy_att37
11:16:12  42  FROM svm6162
11:16:12  43  /

Table created.

Elapsed: 00:00:00.16
11:16:12 SQL> 
11:16:12 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
11:16:13 SQL> 
11:16:13 SQL> -- rpt
11:16:13 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19808

Elapsed: 00:00:00.91
11:16:14 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     19808

Elapsed: 00:00:00.00
11:16:14 SQL> 
11:16:14 SQL> --
11:16:14 SQL> -- cad610.sql
11:16:14 SQL> --
11:16:14 SQL> 
11:16:14 SQL> -- Creates views and tables for backtesting a forex SVM strategy
11:16:14 SQL> 
11:16:14 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.47
11:16:14 SQL> 
11:16:14 SQL> -- I created di5min here:
11:16:14 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
11:16:14 SQL> 
11:16:14 SQL> CREATE OR REPLACE VIEW svm6102 AS
11:16:14   2  SELECT
11:16:14   3  pair
11:16:14   4  ,ydate
11:16:14   5  ,prdate
11:16:14   6  ,rownum rnum -- acts as t in my time-series
11:16:14   7  ,clse
11:16:14   8  -- Derive a bunch of attributes from clse, the latest price:
11:16:14   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
11:16:14  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
11:16:14  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
11:16:14  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
11:16:14  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
11:16:14  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
11:16:14  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
11:16:14  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
11:16:14  17  --
11:16:14  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
11:16:14  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
11:16:14  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
11:16:14  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
11:16:14  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
11:16:14  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
11:16:14  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
11:16:14  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
11:16:14  26  --
11:16:14  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
11:16:14  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
11:16:14  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
11:16:14  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
11:16:14  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
11:16:14  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
11:16:14  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
11:16:14  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
11:16:14  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
11:16:14  36  FROM di5min WHERE pair LIKE'%cad%'
11:16:14  37  AND ydate > sysdate - 95
11:16:14  38  ORDER BY ydate
11:16:14  39  /

View created.

Elapsed: 00:00:00.07
11:16:14 SQL> 
11:16:14 SQL> -- rpt
11:16:14 SQL> 
11:16:14 SQL> SELECT
11:16:14   2  pair
11:16:14   3  ,COUNT(pair)
11:16:14   4  ,MIN(clse),MAX(clse)
11:16:14   5  ,MIN(avg6),MAX(avg6)
11:16:14   6  ,MIN(ydate),MAX(ydate)
11:16:14   7  FROM svm6102
11:16:14   8  GROUP BY pair
11:16:14   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_cad       19808    .988925	   1.0355  .99060274 1.03282877 2010-10-04 11:20:01 2011-01-07 11:10:00

Elapsed: 00:00:00.86
11:16:15 SQL> 
11:16:15 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
11:16:15 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.23
11:16:15 SQL> CREATE TABLE svm6122 COMPRESS AS
11:16:15   2  SELECT
11:16:15   3  pair
11:16:15   4  ,ydate
11:16:15   5  ,prdate
11:16:15   6  ,clse
11:16:15   7  -- g6 is important. I want to predict g6:
11:16:15   8  ,ld6 - clse g6
11:16:15   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
11:16:15  10  -- I want more attributes from the ones I derived above:
11:16:15  11  -- clse relation to moving-min
11:16:15  12  ,clse-min4  cm4
11:16:15  13  ,clse-min6  cm6
11:16:15  14  ,clse-min8  cm8
11:16:15  15  ,clse-min10 cm10
11:16:15  16  ,clse-min12 cm12
11:16:15  17  ,clse-min14 cm14
11:16:15  18  ,clse-min16 cm16
11:16:15  19  ,clse-min18 cm18
11:16:15  20  -- clse relation to moving-avg
11:16:15  21  ,clse-avg4  ca4
11:16:15  22  ,clse-avg6  ca6
11:16:15  23  ,clse-avg8  ca8
11:16:15  24  ,clse-avg10 ca10
11:16:15  25  ,clse-avg12 ca12
11:16:15  26  ,clse-avg14 ca14
11:16:15  27  ,clse-avg16 ca16
11:16:15  28  ,clse-avg18 ca18
11:16:15  29  -- clse relation to moving-max
11:16:15  30  ,clse-max4  cx4
11:16:15  31  ,clse-max6  cx6
11:16:15  32  ,clse-max8  cx8
11:16:15  33  ,clse-max10 cx10
11:16:15  34  ,clse-max12 cx12
11:16:15  35  ,clse-max14 cx14
11:16:15  36  ,clse-max16 cx16
11:16:15  37  ,clse-max18 cx18
11:16:15  38  -- Derive more attributes.
11:16:15  39  -- I want to use CORR() here to help SVM see the shape of the series.
11:16:15  40  -- But COVAR_POP is more stable:
11:16:15  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
11:16:15  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
11:16:15  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
11:16:15  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
11:16:15  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
11:16:15  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
11:16:15  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
11:16:15  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
11:16:15  49  -- Derive date related attributes:
11:16:15  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
11:16:15  51  ,0+TO_CHAR(ydate,'D')d
11:16:15  52  ,0+TO_CHAR(ydate,'W')w
11:16:15  53  -- mpm stands for minutes-past-midnight:
11:16:15  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
11:16:15  55  -- mph stands for minutes-past-hour:
11:16:15  56  ,0+TO_CHAR(ydate,'MI')mph
11:16:15  57  FROM svm6102
11:16:15  58  ORDER BY ydate
11:16:15  59  /

Table created.

Elapsed: 00:00:02.07
11:16:17 SQL> 
11:16:17 SQL> -- rpt
11:16:17 SQL> 
11:16:17 SQL> SELECT
11:16:17   2  pair
11:16:17   3  ,COUNT(pair)
11:16:17   4  ,MIN(clse),MAX(clse)
11:16:17   5  ,MIN(ydate),MAX(ydate)
11:16:17   6  FROM svm6122
11:16:17   7  GROUP BY pair
11:16:17   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_cad       19808    .988925	   1.0355 2010-10-04 11:20:01 2011-01-07 11:10:00

Elapsed: 00:00:00.10
11:16:18 SQL> 
11:16:18 SQL> -- Prepare for derivation of NTILE based params:
11:16:18 SQL> 
11:16:18 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.27
11:16:18 SQL> CREATE TABLE svm6142 COMPRESS AS
11:16:18   2  SELECT
11:16:18   3  pair
11:16:18   4  ,ydate
11:16:18   5  ,prdate
11:16:18   6  ,clse
11:16:18   7  ,g6
11:16:18   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
11:16:18   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
11:16:18  10  ,CASE WHEN trend IS NULL THEN 1
11:16:18  11  	    WHEN trend =0      THEN 1
11:16:18  12  	    ELSE trend END trend
11:16:18  13  ,cm4
11:16:18  14  ,cm6
11:16:18  15  ,cm8
11:16:18  16  ,cm10
11:16:18  17  ,cm12
11:16:18  18  ,cm14
11:16:18  19  ,cm16
11:16:18  20  ,cm18
11:16:18  21  --
11:16:18  22  ,ca4
11:16:18  23  ,ca6
11:16:18  24  ,ca8
11:16:18  25  ,ca10
11:16:18  26  ,ca12
11:16:18  27  ,ca14
11:16:18  28  ,ca16
11:16:18  29  ,ca18
11:16:18  30  --
11:16:18  31  ,cx4
11:16:18  32  ,cx6
11:16:18  33  ,cx8
11:16:18  34  ,cx10
11:16:18  35  ,cx12
11:16:18  36  ,cx14
11:16:18  37  ,cx16
11:16:18  38  ,cx18
11:16:18  39  --
11:16:18  40  ,crr4
11:16:18  41  ,crr6
11:16:18  42  ,crr8
11:16:18  43  ,crr10
11:16:18  44  ,crr12
11:16:18  45  ,crr14
11:16:18  46  ,crr16
11:16:18  47  ,crr18
11:16:18  48  --
11:16:18  49  ,hh
11:16:18  50  ,d
11:16:18  51  ,w
11:16:18  52  ,mpm
11:16:18  53  ,mph
11:16:18  54  FROM svm6122
11:16:18  55  ORDER BY ydate
11:16:18  56  /

Table created.

Elapsed: 00:00:00.45
11:16:18 SQL> 
11:16:18 SQL> -- rpt
11:16:18 SQL> 
11:16:18 SQL> SELECT
11:16:18   2  pair
11:16:18   3  ,trend
11:16:18   4  ,gatt
11:16:18   5  ,COUNT(pair)
11:16:18   6  ,AVG(g6)
11:16:18   7  FROM svm6142
11:16:18   8  GROUP BY pair,trend,gatt
11:16:18   9  ORDER BY pair,trend,gatt
11:16:18  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7327 -.00123886
usd_cad 	-1 up	      3136  .00304759
usd_cad 	-1		 4
usd_cad 	 1 nup	      6835 -.00160586
usd_cad 	 1 up	      2438 .003617913
usd_cad 	 1		68

6 rows selected.

Elapsed: 00:00:00.04
11:16:18 SQL> 
11:16:18 SQL> 
11:16:18 SQL> -- Derive NTILE based params:
11:16:18 SQL> 
11:16:18 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.21
11:16:19 SQL> CREATE TABLE svm6162 COMPRESS AS
11:16:19   2  SELECT
11:16:19   3  pair
11:16:19   4  ,ydate
11:16:19   5  ,prdate
11:16:19   6  ,clse
11:16:19   7  ,g6
11:16:19   8  ,gatt
11:16:19   9  ,gattn
11:16:19  10  ,trend
11:16:19  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
11:16:19  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
11:16:19  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
11:16:19  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
11:16:19  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
11:16:19  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
11:16:19  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
11:16:19  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
11:16:19  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
11:16:19  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
11:16:19  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
11:16:19  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
11:16:19  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
11:16:19  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
11:16:19  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
11:16:19  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
11:16:19  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
11:16:19  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
11:16:19  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
11:16:19  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
11:16:19  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
11:16:19  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
11:16:19  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
11:16:19  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
11:16:19  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
11:16:19  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
11:16:19  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
11:16:19  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
11:16:19  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
11:16:19  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
11:16:19  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
11:16:19  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
11:16:19  43  ,hh  att32
11:16:19  44  ,d   att33
11:16:19  45  ,w   att34
11:16:19  46  ,mpm att35
11:16:19  47  ,mph att36
11:16:19  48  ,trend att37
11:16:19  49  FROM svm6142
11:16:19  50  ORDER BY ydate
11:16:19  51  /

Table created.

Elapsed: 00:00:04.89
11:16:23 SQL> 
11:16:23 SQL> -- rpt
11:16:23 SQL> 
11:16:23 SQL> SELECT
11:16:23   2  pair
11:16:23   3  ,trend
11:16:23   4  ,gatt
11:16:23   5  ,COUNT(pair)
11:16:23   6  ,AVG(g6)
11:16:23   7  FROM svm6162
11:16:23   8  GROUP BY pair,trend,gatt
11:16:23   9  ORDER BY pair,trend,gatt
11:16:23  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7327 -.00123886
usd_cad 	-1 up	      3136  .00304759
usd_cad 	-1		 4
usd_cad 	 1 nup	      6835 -.00160586
usd_cad 	 1 up	      2438 .003617913
usd_cad 	 1		68

6 rows selected.

Elapsed: 00:00:00.03
11:16:24 SQL> 
11:16:24 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.19
11:16:24 SQL> CREATE TABLE modsrc COMPRESS AS
11:16:24   2  SELECT
11:16:24   3  pair
11:16:24   4  ,ydate
11:16:24   5  ,prdate
11:16:24   6  ,trend
11:16:24   7  ,g6
11:16:24   8  ,gatt
11:16:24   9  ,gattn
11:16:24  10  FROM svm6162
11:16:24  11  /

Table created.

Elapsed: 00:00:00.09
11:16:24 SQL> 
11:16:24 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
11:16:24 SQL> 
11:16:24 SQL> DROP   TABLE cad_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
11:16:24 SQL> CREATE TABLE cad_ms610 COMPRESS AS
11:16:24   2  SELECT
11:16:24   3  ydate
11:16:24   4  ,trend cad_trend
11:16:24   5  ,g6    cad_g6
11:16:24   6  ,gatt  cad_gatt
11:16:24   7  ,gattn cad_gattn
11:16:24   8  FROM modsrc
11:16:24   9  /

Table created.

Elapsed: 00:00:00.07
11:16:24 SQL> 
11:16:24 SQL> ANALYZE TABLE cad_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.14
11:16:24 SQL> 
11:16:24 SQL> -- I need a copy of the attributes:
11:16:24 SQL> 
11:16:24 SQL> 
11:16:24 SQL> DROP   TABLE cad_att;

Table dropped.

Elapsed: 00:00:00.05
11:16:24 SQL> CREATE TABLE cad_att COMPRESS AS
11:16:24   2  SELECT
11:16:24   3  ydate
11:16:24   4  ,att00 cad_att00
11:16:24   5  ,att01 cad_att01
11:16:24   6  ,att02 cad_att02
11:16:24   7  ,att03 cad_att03
11:16:24   8  ,att04 cad_att04
11:16:24   9  ,att05 cad_att05
11:16:24  10  ,att06 cad_att06
11:16:24  11  ,att07 cad_att07
11:16:24  12  ,att08 cad_att08
11:16:24  13  ,att09 cad_att09
11:16:24  14  ,att10 cad_att10
11:16:24  15  ,att11 cad_att11
11:16:24  16  ,att12 cad_att12
11:16:24  17  ,att13 cad_att13
11:16:24  18  ,att14 cad_att14
11:16:24  19  ,att15 cad_att15
11:16:24  20  ,att16 cad_att16
11:16:24  21  ,att17 cad_att17
11:16:24  22  ,att18 cad_att18
11:16:24  23  ,att19 cad_att19
11:16:24  24  ,att20 cad_att20
11:16:24  25  ,att21 cad_att21
11:16:24  26  ,att22 cad_att22
11:16:24  27  ,att23 cad_att23
11:16:24  28  ,att24 cad_att24
11:16:24  29  ,att25 cad_att25
11:16:24  30  ,att26 cad_att26
11:16:24  31  ,att27 cad_att27
11:16:24  32  ,att28 cad_att28
11:16:24  33  ,att29 cad_att29
11:16:24  34  ,att30 cad_att30
11:16:24  35  ,att31 cad_att31
11:16:24  36  ,att32 cad_att32
11:16:24  37  ,att33 cad_att33
11:16:24  38  ,att34 cad_att34
11:16:24  39  ,att35 cad_att35
11:16:24  40  ,att36 cad_att36
11:16:24  41  ,att37 cad_att37
11:16:24  42  FROM svm6162
11:16:24  43  /

Table created.

Elapsed: 00:00:00.17
11:16:24 SQL> 
11:16:24 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
11:16:25 SQL> 
11:16:25 SQL> -- rpt
11:16:25 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19808

Elapsed: 00:00:00.86
11:16:26 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
     19808

Elapsed: 00:00:00.01
11:16:26 SQL> 
11:16:26 SQL> --
11:16:26 SQL> -- chf610.sql
11:16:26 SQL> --
11:16:26 SQL> 
11:16:26 SQL> -- Creates views and tables for backtesting a forex SVM strategy
11:16:26 SQL> 
11:16:26 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.48
11:16:26 SQL> 
11:16:26 SQL> -- I created di5min here:
11:16:26 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
11:16:26 SQL> 
11:16:26 SQL> CREATE OR REPLACE VIEW svm6102 AS
11:16:26   2  SELECT
11:16:26   3  pair
11:16:26   4  ,ydate
11:16:26   5  ,prdate
11:16:26   6  ,rownum rnum -- acts as t in my time-series
11:16:26   7  ,clse
11:16:26   8  -- Derive a bunch of attributes from clse, the latest price:
11:16:26   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
11:16:26  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
11:16:26  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
11:16:26  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
11:16:26  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
11:16:26  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
11:16:26  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
11:16:26  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
11:16:26  17  --
11:16:26  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
11:16:26  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
11:16:26  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
11:16:26  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
11:16:26  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
11:16:26  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
11:16:26  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
11:16:26  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
11:16:26  26  --
11:16:26  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
11:16:26  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
11:16:26  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
11:16:26  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
11:16:26  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
11:16:26  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
11:16:26  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
11:16:26  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
11:16:26  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
11:16:26  36  FROM di5min WHERE pair LIKE'%chf%'
11:16:26  37  AND ydate > sysdate - 95
11:16:26  38  ORDER BY ydate
11:16:26  39  /

View created.

Elapsed: 00:00:00.12
11:16:26 SQL> 
11:16:26 SQL> -- rpt
11:16:26 SQL> 
11:16:26 SQL> SELECT
11:16:26   2  pair
11:16:26   3  ,COUNT(pair)
11:16:26   4  ,MIN(clse),MAX(clse)
11:16:26   5  ,MIN(avg6),MAX(avg6)
11:16:26   6  ,MIN(ydate),MAX(ydate)
11:16:26   7  FROM svm6102
11:16:26   8  GROUP BY pair
11:16:26   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_chf       19811    .931675	  1.00635 .933257705 1.00498151 2010-10-04 11:20:01 2011-01-07 11:10:00

Elapsed: 00:00:00.89
11:16:27 SQL> 
11:16:27 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
11:16:27 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.25
11:16:28 SQL> CREATE TABLE svm6122 COMPRESS AS
11:16:28   2  SELECT
11:16:28   3  pair
11:16:28   4  ,ydate
11:16:28   5  ,prdate
11:16:28   6  ,clse
11:16:28   7  -- g6 is important. I want to predict g6:
11:16:28   8  ,ld6 - clse g6
11:16:28   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
11:16:28  10  -- I want more attributes from the ones I derived above:
11:16:28  11  -- clse relation to moving-min
11:16:28  12  ,clse-min4  cm4
11:16:28  13  ,clse-min6  cm6
11:16:28  14  ,clse-min8  cm8
11:16:28  15  ,clse-min10 cm10
11:16:28  16  ,clse-min12 cm12
11:16:28  17  ,clse-min14 cm14
11:16:28  18  ,clse-min16 cm16
11:16:28  19  ,clse-min18 cm18
11:16:28  20  -- clse relation to moving-avg
11:16:28  21  ,clse-avg4  ca4
11:16:28  22  ,clse-avg6  ca6
11:16:28  23  ,clse-avg8  ca8
11:16:28  24  ,clse-avg10 ca10
11:16:28  25  ,clse-avg12 ca12
11:16:28  26  ,clse-avg14 ca14
11:16:28  27  ,clse-avg16 ca16
11:16:28  28  ,clse-avg18 ca18
11:16:28  29  -- clse relation to moving-max
11:16:28  30  ,clse-max4  cx4
11:16:28  31  ,clse-max6  cx6
11:16:28  32  ,clse-max8  cx8
11:16:28  33  ,clse-max10 cx10
11:16:28  34  ,clse-max12 cx12
11:16:28  35  ,clse-max14 cx14
11:16:28  36  ,clse-max16 cx16
11:16:28  37  ,clse-max18 cx18
11:16:28  38  -- Derive more attributes.
11:16:28  39  -- I want to use CORR() here to help SVM see the shape of the series.
11:16:28  40  -- But COVAR_POP is more stable:
11:16:28  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
11:16:28  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
11:16:28  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
11:16:28  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
11:16:28  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
11:16:28  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
11:16:28  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
11:16:28  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
11:16:28  49  -- Derive date related attributes:
11:16:28  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
11:16:28  51  ,0+TO_CHAR(ydate,'D')d
11:16:28  52  ,0+TO_CHAR(ydate,'W')w
11:16:28  53  -- mpm stands for minutes-past-midnight:
11:16:28  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
11:16:28  55  -- mph stands for minutes-past-hour:
11:16:28  56  ,0+TO_CHAR(ydate,'MI')mph
11:16:28  57  FROM svm6102
11:16:28  58  ORDER BY ydate
11:16:28  59  /

Table created.

Elapsed: 00:00:02.09
11:16:30 SQL> 
11:16:30 SQL> -- rpt
11:16:30 SQL> 
11:16:30 SQL> SELECT
11:16:30   2  pair
11:16:30   3  ,COUNT(pair)
11:16:30   4  ,MIN(clse),MAX(clse)
11:16:30   5  ,MIN(ydate),MAX(ydate)
11:16:30   6  FROM svm6122
11:16:30   7  GROUP BY pair
11:16:30   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_chf       19811    .931675	  1.00635 2010-10-04 11:20:01 2011-01-07 11:10:00

Elapsed: 00:00:00.03
11:16:30 SQL> 
11:16:30 SQL> -- Prepare for derivation of NTILE based params:
11:16:30 SQL> 
11:16:30 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.19
11:16:30 SQL> CREATE TABLE svm6142 COMPRESS AS
11:16:30   2  SELECT
11:16:30   3  pair
11:16:30   4  ,ydate
11:16:30   5  ,prdate
11:16:30   6  ,clse
11:16:30   7  ,g6
11:16:30   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
11:16:30   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
11:16:30  10  ,CASE WHEN trend IS NULL THEN 1
11:16:30  11  	    WHEN trend =0      THEN 1
11:16:30  12  	    ELSE trend END trend
11:16:30  13  ,cm4
11:16:30  14  ,cm6
11:16:30  15  ,cm8
11:16:30  16  ,cm10
11:16:30  17  ,cm12
11:16:30  18  ,cm14
11:16:30  19  ,cm16
11:16:30  20  ,cm18
11:16:30  21  --
11:16:30  22  ,ca4
11:16:30  23  ,ca6
11:16:30  24  ,ca8
11:16:30  25  ,ca10
11:16:30  26  ,ca12
11:16:30  27  ,ca14
11:16:30  28  ,ca16
11:16:30  29  ,ca18
11:16:30  30  --
11:16:30  31  ,cx4
11:16:30  32  ,cx6
11:16:30  33  ,cx8
11:16:30  34  ,cx10
11:16:30  35  ,cx12
11:16:30  36  ,cx14
11:16:30  37  ,cx16
11:16:30  38  ,cx18
11:16:30  39  --
11:16:30  40  ,crr4
11:16:30  41  ,crr6
11:16:30  42  ,crr8
11:16:30  43  ,crr10
11:16:30  44  ,crr12
11:16:30  45  ,crr14
11:16:30  46  ,crr16
11:16:30  47  ,crr18
11:16:30  48  --
11:16:30  49  ,hh
11:16:30  50  ,d
11:16:30  51  ,w
11:16:30  52  ,mpm
11:16:30  53  ,mph
11:16:30  54  FROM svm6122
11:16:30  55  ORDER BY ydate
11:16:30  56  /

Table created.

Elapsed: 00:00:00.40
11:16:30 SQL> 
11:16:30 SQL> -- rpt
11:16:30 SQL> 
11:16:30 SQL> SELECT
11:16:30   2  pair
11:16:30   3  ,trend
11:16:30   4  ,gatt
11:16:30   5  ,COUNT(pair)
11:16:30   6  ,AVG(g6)
11:16:30   7  FROM svm6142
11:16:30   8  GROUP BY pair,trend,gatt
11:16:30   9  ORDER BY pair,trend,gatt
11:16:30  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7103 -.00197463
usd_chf 	-1 up	      3086 .003809605
usd_chf 	-1		49
usd_chf 	 1 nup	      6604 -.00151627
usd_chf 	 1 up	      2946 .003958819
usd_chf 	 1		23

6 rows selected.

Elapsed: 00:00:00.03
11:16:30 SQL> 
11:16:30 SQL> 
11:16:30 SQL> -- Derive NTILE based params:
11:16:30 SQL> 
11:16:30 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.15
11:16:30 SQL> CREATE TABLE svm6162 COMPRESS AS
11:16:30   2  SELECT
11:16:30   3  pair
11:16:30   4  ,ydate
11:16:30   5  ,prdate
11:16:30   6  ,clse
11:16:30   7  ,g6
11:16:30   8  ,gatt
11:16:30   9  ,gattn
11:16:30  10  ,trend
11:16:30  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
11:16:30  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
11:16:30  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
11:16:30  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
11:16:30  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
11:16:30  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
11:16:30  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
11:16:30  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
11:16:30  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
11:16:30  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
11:16:30  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
11:16:30  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
11:16:30  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
11:16:30  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
11:16:30  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
11:16:30  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
11:16:30  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
11:16:30  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
11:16:30  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
11:16:30  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
11:16:30  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
11:16:30  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
11:16:30  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
11:16:30  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
11:16:30  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
11:16:30  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
11:16:30  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
11:16:30  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
11:16:30  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
11:16:30  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
11:16:30  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
11:16:30  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
11:16:30  43  ,hh  att32
11:16:30  44  ,d   att33
11:16:30  45  ,w   att34
11:16:30  46  ,mpm att35
11:16:30  47  ,mph att36
11:16:30  48  ,trend att37
11:16:30  49  FROM svm6142
11:16:30  50  ORDER BY ydate
11:16:30  51  /

Table created.

Elapsed: 00:00:04.85
11:16:35 SQL> 
11:16:35 SQL> -- rpt
11:16:35 SQL> 
11:16:35 SQL> SELECT
11:16:35   2  pair
11:16:35   3  ,trend
11:16:35   4  ,gatt
11:16:35   5  ,COUNT(pair)
11:16:35   6  ,AVG(g6)
11:16:35   7  FROM svm6162
11:16:35   8  GROUP BY pair,trend,gatt
11:16:35   9  ORDER BY pair,trend,gatt
11:16:35  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7103 -.00197463
usd_chf 	-1 up	      3086 .003809605
usd_chf 	-1		49
usd_chf 	 1 nup	      6604 -.00151627
usd_chf 	 1 up	      2946 .003958819
usd_chf 	 1		23

6 rows selected.

Elapsed: 00:00:00.03
11:16:35 SQL> 
11:16:35 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.21
11:16:36 SQL> CREATE TABLE modsrc COMPRESS AS
11:16:36   2  SELECT
11:16:36   3  pair
11:16:36   4  ,ydate
11:16:36   5  ,prdate
11:16:36   6  ,trend
11:16:36   7  ,g6
11:16:36   8  ,gatt
11:16:36   9  ,gattn
11:16:36  10  FROM svm6162
11:16:36  11  /

Table created.

Elapsed: 00:00:00.08
11:16:36 SQL> 
11:16:36 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
11:16:36 SQL> 
11:16:36 SQL> DROP   TABLE chf_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
11:16:36 SQL> CREATE TABLE chf_ms610 COMPRESS AS
11:16:36   2  SELECT
11:16:36   3  ydate
11:16:36   4  ,trend chf_trend
11:16:36   5  ,g6    chf_g6
11:16:36   6  ,gatt  chf_gatt
11:16:36   7  ,gattn chf_gattn
11:16:36   8  FROM modsrc
11:16:36   9  /

Table created.

Elapsed: 00:00:00.06
11:16:36 SQL> 
11:16:36 SQL> ANALYZE TABLE chf_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
11:16:36 SQL> 
11:16:36 SQL> -- I need a copy of the attributes:
11:16:36 SQL> 
11:16:36 SQL> 
11:16:36 SQL> DROP   TABLE chf_att;

Table dropped.

Elapsed: 00:00:00.04
11:16:36 SQL> CREATE TABLE chf_att COMPRESS AS
11:16:36   2  SELECT
11:16:36   3  ydate
11:16:36   4  ,att00 chf_att00
11:16:36   5  ,att01 chf_att01
11:16:36   6  ,att02 chf_att02
11:16:36   7  ,att03 chf_att03
11:16:36   8  ,att04 chf_att04
11:16:36   9  ,att05 chf_att05
11:16:36  10  ,att06 chf_att06
11:16:36  11  ,att07 chf_att07
11:16:36  12  ,att08 chf_att08
11:16:36  13  ,att09 chf_att09
11:16:36  14  ,att10 chf_att10
11:16:36  15  ,att11 chf_att11
11:16:36  16  ,att12 chf_att12
11:16:36  17  ,att13 chf_att13
11:16:36  18  ,att14 chf_att14
11:16:36  19  ,att15 chf_att15
11:16:36  20  ,att16 chf_att16
11:16:36  21  ,att17 chf_att17
11:16:36  22  ,att18 chf_att18
11:16:36  23  ,att19 chf_att19
11:16:36  24  ,att20 chf_att20
11:16:36  25  ,att21 chf_att21
11:16:36  26  ,att22 chf_att22
11:16:36  27  ,att23 chf_att23
11:16:36  28  ,att24 chf_att24
11:16:36  29  ,att25 chf_att25
11:16:36  30  ,att26 chf_att26
11:16:36  31  ,att27 chf_att27
11:16:36  32  ,att28 chf_att28
11:16:36  33  ,att29 chf_att29
11:16:36  34  ,att30 chf_att30
11:16:36  35  ,att31 chf_att31
11:16:36  36  ,att32 chf_att32
11:16:36  37  ,att33 chf_att33
11:16:36  38  ,att34 chf_att34
11:16:36  39  ,att35 chf_att35
11:16:36  40  ,att36 chf_att36
11:16:36  41  ,att37 chf_att37
11:16:36  42  FROM svm6162
11:16:36  43  /

Table created.

Elapsed: 00:00:00.21
11:16:36 SQL> 
11:16:36 SQL> ANALYZE TABLE chf_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
11:16:37 SQL> 
11:16:37 SQL> -- rpt
11:16:37 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19811

Elapsed: 00:00:00.88
11:16:38 SQL> SELECT COUNT(*)FROM chf_att;

  COUNT(*)
----------
     19811

Elapsed: 00:00:00.00
11:16:38 SQL> 
11:16:38 SQL> --
11:16:38 SQL> -- ech610.sql
11:16:38 SQL> --
11:16:38 SQL> 
11:16:38 SQL> -- Creates views and tables for backtesting a forex SVM strategy
11:16:38 SQL> 
11:16:38 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.40
11:16:38 SQL> 
11:16:38 SQL> -- I created di5min here:
11:16:38 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
11:16:38 SQL> 
11:16:38 SQL> CREATE OR REPLACE VIEW svm6102 AS
11:16:38   2  SELECT
11:16:38   3  pair
11:16:38   4  ,ydate
11:16:38   5  ,prdate
11:16:38   6  ,rownum rnum -- acts as t in my time-series
11:16:38   7  ,clse
11:16:38   8  -- Derive a bunch of attributes from clse, the latest price:
11:16:38   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
11:16:38  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
11:16:38  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
11:16:38  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
11:16:38  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
11:16:38  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
11:16:38  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
11:16:38  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
11:16:38  17  --
11:16:38  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
11:16:38  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
11:16:38  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
11:16:38  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
11:16:38  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
11:16:38  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
11:16:38  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
11:16:38  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
11:16:38  26  --
11:16:38  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
11:16:38  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
11:16:38  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
11:16:38  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
11:16:38  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
11:16:38  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
11:16:38  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
11:16:38  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
11:16:38  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
11:16:38  36  FROM di5min WHERE pair LIKE'%ech%'
11:16:38  37  AND ydate > sysdate - 95
11:16:38  38  ORDER BY ydate
11:16:38  39  /

View created.

Elapsed: 00:00:00.05
11:16:38 SQL> 
11:16:38 SQL> -- rpt
11:16:38 SQL> 
11:16:38 SQL> SELECT
11:16:38   2  pair
11:16:38   3  ,COUNT(pair)
11:16:38   4  ,MIN(clse),MAX(clse)
11:16:38   5  ,MIN(avg6),MAX(avg6)
11:16:38   6  ,MIN(ydate),MAX(ydate)
11:16:38   7  FROM svm6102
11:16:38   8  GROUP BY pair
11:16:38   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ech_usd       19809 1.24182424 1.38284305 1.24320711 1.37986485 2010-10-04 11:20:01 2011-01-07 11:10:00

Elapsed: 00:00:00.82
11:16:39 SQL> 
11:16:39 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
11:16:39 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.30
11:16:39 SQL> CREATE TABLE svm6122 COMPRESS AS
11:16:39   2  SELECT
11:16:39   3  pair
11:16:39   4  ,ydate
11:16:39   5  ,prdate
11:16:39   6  ,clse
11:16:39   7  -- g6 is important. I want to predict g6:
11:16:39   8  ,ld6 - clse g6
11:16:39   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
11:16:39  10  -- I want more attributes from the ones I derived above:
11:16:39  11  -- clse relation to moving-min
11:16:39  12  ,clse-min4  cm4
11:16:39  13  ,clse-min6  cm6
11:16:39  14  ,clse-min8  cm8
11:16:39  15  ,clse-min10 cm10
11:16:39  16  ,clse-min12 cm12
11:16:39  17  ,clse-min14 cm14
11:16:39  18  ,clse-min16 cm16
11:16:39  19  ,clse-min18 cm18
11:16:39  20  -- clse relation to moving-avg
11:16:39  21  ,clse-avg4  ca4
11:16:39  22  ,clse-avg6  ca6
11:16:39  23  ,clse-avg8  ca8
11:16:39  24  ,clse-avg10 ca10
11:16:39  25  ,clse-avg12 ca12
11:16:39  26  ,clse-avg14 ca14
11:16:39  27  ,clse-avg16 ca16
11:16:39  28  ,clse-avg18 ca18
11:16:39  29  -- clse relation to moving-max
11:16:39  30  ,clse-max4  cx4
11:16:39  31  ,clse-max6  cx6
11:16:39  32  ,clse-max8  cx8
11:16:39  33  ,clse-max10 cx10
11:16:39  34  ,clse-max12 cx12
11:16:39  35  ,clse-max14 cx14
11:16:39  36  ,clse-max16 cx16
11:16:39  37  ,clse-max18 cx18
11:16:39  38  -- Derive more attributes.
11:16:39  39  -- I want to use CORR() here to help SVM see the shape of the series.
11:16:39  40  -- But COVAR_POP is more stable:
11:16:39  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
11:16:39  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
11:16:39  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
11:16:39  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
11:16:39  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
11:16:39  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
11:16:39  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
11:16:39  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
11:16:39  49  -- Derive date related attributes:
11:16:39  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
11:16:39  51  ,0+TO_CHAR(ydate,'D')d
11:16:39  52  ,0+TO_CHAR(ydate,'W')w
11:16:39  53  -- mpm stands for minutes-past-midnight:
11:16:39  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
11:16:39  55  -- mph stands for minutes-past-hour:
11:16:39  56  ,0+TO_CHAR(ydate,'MI')mph
11:16:39  57  FROM svm6102
11:16:39  58  ORDER BY ydate
11:16:39  59  /

Table created.

Elapsed: 00:00:02.11
11:16:41 SQL> 
11:16:41 SQL> -- rpt
11:16:41 SQL> 
11:16:41 SQL> SELECT
11:16:41   2  pair
11:16:41   3  ,COUNT(pair)
11:16:41   4  ,MIN(clse),MAX(clse)
11:16:41   5  ,MIN(ydate),MAX(ydate)
11:16:41   6  FROM svm6122
11:16:41   7  GROUP BY pair
11:16:41   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ech_usd       19809 1.24182424 1.38284305 2010-10-04 11:20:01 2011-01-07 11:10:00

Elapsed: 00:00:00.09
11:16:41 SQL> 
11:16:41 SQL> -- Prepare for derivation of NTILE based params:
11:16:41 SQL> 
11:16:41 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.28
11:16:42 SQL> CREATE TABLE svm6142 COMPRESS AS
11:16:42   2  SELECT
11:16:42   3  pair
11:16:42   4  ,ydate
11:16:42   5  ,prdate
11:16:42   6  ,clse
11:16:42   7  ,g6
11:16:42   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
11:16:42   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
11:16:42  10  ,CASE WHEN trend IS NULL THEN 1
11:16:42  11  	    WHEN trend =0      THEN 1
11:16:42  12  	    ELSE trend END trend
11:16:42  13  ,cm4
11:16:42  14  ,cm6
11:16:42  15  ,cm8
11:16:42  16  ,cm10
11:16:42  17  ,cm12
11:16:42  18  ,cm14
11:16:42  19  ,cm16
11:16:42  20  ,cm18
11:16:42  21  --
11:16:42  22  ,ca4
11:16:42  23  ,ca6
11:16:42  24  ,ca8
11:16:42  25  ,ca10
11:16:42  26  ,ca12
11:16:42  27  ,ca14
11:16:42  28  ,ca16
11:16:42  29  ,ca18
11:16:42  30  --
11:16:42  31  ,cx4
11:16:42  32  ,cx6
11:16:42  33  ,cx8
11:16:42  34  ,cx10
11:16:42  35  ,cx12
11:16:42  36  ,cx14
11:16:42  37  ,cx16
11:16:42  38  ,cx18
11:16:42  39  --
11:16:42  40  ,crr4
11:16:42  41  ,crr6
11:16:42  42  ,crr8
11:16:42  43  ,crr10
11:16:42  44  ,crr12
11:16:42  45  ,crr14
11:16:42  46  ,crr16
11:16:42  47  ,crr18
11:16:42  48  --
11:16:42  49  ,hh
11:16:42  50  ,d
11:16:42  51  ,w
11:16:42  52  ,mpm
11:16:42  53  ,mph
11:16:42  54  FROM svm6122
11:16:42  55  ORDER BY ydate
11:16:42  56  /

Table created.

Elapsed: 00:00:00.48
11:16:42 SQL> 
11:16:42 SQL> -- rpt
11:16:42 SQL> 
11:16:42 SQL> SELECT
11:16:42   2  pair
11:16:42   3  ,trend
11:16:42   4  ,gatt
11:16:42   5  ,COUNT(pair)
11:16:42   6  ,AVG(g6)
11:16:42   7  FROM svm6142
11:16:42   8  GROUP BY pair,trend,gatt
11:16:42   9  ORDER BY pair,trend,gatt
11:16:42  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6826 -.00228903
ech_usd 	-1 up	      3567 .003580667
ech_usd 	-1		67
ech_usd 	 1 nup	      6439  -.0023161
ech_usd 	 1 up	      2905 .004123103
ech_usd 	 1		 5

6 rows selected.

Elapsed: 00:00:00.03
11:16:42 SQL> 
11:16:42 SQL> 
11:16:42 SQL> -- Derive NTILE based params:
11:16:42 SQL> 
11:16:42 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.18
11:16:42 SQL> CREATE TABLE svm6162 COMPRESS AS
11:16:42   2  SELECT
11:16:42   3  pair
11:16:42   4  ,ydate
11:16:42   5  ,prdate
11:16:42   6  ,clse
11:16:42   7  ,g6
11:16:42   8  ,gatt
11:16:42   9  ,gattn
11:16:42  10  ,trend
11:16:42  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
11:16:42  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
11:16:42  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
11:16:42  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
11:16:42  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
11:16:42  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
11:16:42  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
11:16:42  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
11:16:42  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
11:16:42  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
11:16:42  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
11:16:42  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
11:16:42  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
11:16:42  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
11:16:42  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
11:16:42  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
11:16:42  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
11:16:42  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
11:16:42  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
11:16:42  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
11:16:42  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
11:16:42  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
11:16:42  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
11:16:42  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
11:16:42  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
11:16:42  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
11:16:42  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
11:16:42  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
11:16:42  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
11:16:42  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
11:16:42  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
11:16:42  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
11:16:42  43  ,hh  att32
11:16:42  44  ,d   att33
11:16:42  45  ,w   att34
11:16:42  46  ,mpm att35
11:16:42  47  ,mph att36
11:16:42  48  ,trend att37
11:16:42  49  FROM svm6142
11:16:42  50  ORDER BY ydate
11:16:42  51  /

Table created.

Elapsed: 00:00:04.88
11:16:47 SQL> 
11:16:47 SQL> -- rpt
11:16:47 SQL> 
11:16:47 SQL> SELECT
11:16:47   2  pair
11:16:47   3  ,trend
11:16:47   4  ,gatt
11:16:47   5  ,COUNT(pair)
11:16:47   6  ,AVG(g6)
11:16:47   7  FROM svm6162
11:16:47   8  GROUP BY pair,trend,gatt
11:16:47   9  ORDER BY pair,trend,gatt
11:16:47  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6826 -.00228903
ech_usd 	-1 up	      3567 .003580667
ech_usd 	-1		67
ech_usd 	 1 nup	      6439  -.0023161
ech_usd 	 1 up	      2905 .004123103
ech_usd 	 1		 5

6 rows selected.

Elapsed: 00:00:00.03
11:16:47 SQL> 
11:16:47 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.17
11:16:47 SQL> CREATE TABLE modsrc COMPRESS AS
11:16:47   2  SELECT
11:16:47   3  pair
11:16:47   4  ,ydate
11:16:47   5  ,prdate
11:16:47   6  ,trend
11:16:47   7  ,g6
11:16:47   8  ,gatt
11:16:47   9  ,gattn
11:16:47  10  FROM svm6162
11:16:47  11  /

Table created.

Elapsed: 00:00:00.10
11:16:48 SQL> 
11:16:48 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
11:16:48 SQL> 
11:16:48 SQL> DROP   TABLE ech_ms610 ;

Table dropped.

Elapsed: 00:00:00.14
11:16:48 SQL> CREATE TABLE ech_ms610 COMPRESS AS
11:16:48   2  SELECT
11:16:48   3  ydate
11:16:48   4  ,trend ech_trend
11:16:48   5  ,g6    ech_g6
11:16:48   6  ,gatt  ech_gatt
11:16:48   7  ,gattn ech_gattn
11:16:48   8  FROM modsrc
11:16:48   9  /

Table created.

Elapsed: 00:00:00.06
11:16:48 SQL> 
11:16:48 SQL> ANALYZE TABLE ech_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
11:16:48 SQL> 
11:16:48 SQL> -- I need a copy of the attributes:
11:16:48 SQL> 
11:16:48 SQL> 
11:16:48 SQL> DROP   TABLE ech_att;

Table dropped.

Elapsed: 00:00:00.24
11:16:48 SQL> CREATE TABLE ech_att COMPRESS AS
11:16:48   2  SELECT
11:16:48   3  ydate
11:16:48   4  ,att00 ech_att00
11:16:48   5  ,att01 ech_att01
11:16:48   6  ,att02 ech_att02
11:16:48   7  ,att03 ech_att03
11:16:48   8  ,att04 ech_att04
11:16:48   9  ,att05 ech_att05
11:16:48  10  ,att06 ech_att06
11:16:48  11  ,att07 ech_att07
11:16:48  12  ,att08 ech_att08
11:16:48  13  ,att09 ech_att09
11:16:48  14  ,att10 ech_att10
11:16:48  15  ,att11 ech_att11
11:16:48  16  ,att12 ech_att12
11:16:48  17  ,att13 ech_att13
11:16:48  18  ,att14 ech_att14
11:16:48  19  ,att15 ech_att15
11:16:48  20  ,att16 ech_att16
11:16:48  21  ,att17 ech_att17
11:16:48  22  ,att18 ech_att18
11:16:48  23  ,att19 ech_att19
11:16:48  24  ,att20 ech_att20
11:16:48  25  ,att21 ech_att21
11:16:48  26  ,att22 ech_att22
11:16:48  27  ,att23 ech_att23
11:16:48  28  ,att24 ech_att24
11:16:48  29  ,att25 ech_att25
11:16:48  30  ,att26 ech_att26
11:16:48  31  ,att27 ech_att27
11:16:48  32  ,att28 ech_att28
11:16:48  33  ,att29 ech_att29
11:16:48  34  ,att30 ech_att30
11:16:48  35  ,att31 ech_att31
11:16:48  36  ,att32 ech_att32
11:16:48  37  ,att33 ech_att33
11:16:48  38  ,att34 ech_att34
11:16:48  39  ,att35 ech_att35
11:16:48  40  ,att36 ech_att36
11:16:48  41  ,att37 ech_att37
11:16:48  42  FROM svm6162
11:16:48  43  /

Table created.

Elapsed: 00:00:00.18
11:16:49 SQL> 
11:16:49 SQL> ANALYZE TABLE ech_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.86
11:16:49 SQL> 
11:16:49 SQL> -- rpt
11:16:49 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19809

Elapsed: 00:00:00.82
11:16:50 SQL> SELECT COUNT(*)FROM ech_att;

  COUNT(*)
----------
     19809

Elapsed: 00:00:00.00
11:16:50 SQL> 
11:16:50 SQL> --
11:16:50 SQL> -- egb610.sql
11:16:50 SQL> --
11:16:50 SQL> 
11:16:50 SQL> -- Creates views and tables for backtesting a forex SVM strategy
11:16:50 SQL> 
11:16:50 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.66
11:16:51 SQL> 
11:16:51 SQL> -- I created di5min here:
11:16:51 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
11:16:51 SQL> 
11:16:51 SQL> CREATE OR REPLACE VIEW svm6102 AS
11:16:51   2  SELECT
11:16:51   3  pair
11:16:51   4  ,ydate
11:16:51   5  ,prdate
11:16:51   6  ,rownum rnum -- acts as t in my time-series
11:16:51   7  ,clse
11:16:51   8  -- Derive a bunch of attributes from clse, the latest price:
11:16:51   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
11:16:51  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
11:16:51  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
11:16:51  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
11:16:51  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
11:16:51  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
11:16:51  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
11:16:51  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
11:16:51  17  --
11:16:51  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
11:16:51  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
11:16:51  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
11:16:51  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
11:16:51  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
11:16:51  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
11:16:51  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
11:16:51  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
11:16:51  26  --
11:16:51  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
11:16:51  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
11:16:51  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
11:16:51  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
11:16:51  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
11:16:51  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
11:16:51  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
11:16:51  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
11:16:51  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
11:16:51  36  FROM di5min WHERE pair LIKE'%egb%'
11:16:51  37  AND ydate > sysdate - 95
11:16:51  38  ORDER BY ydate
11:16:51  39  /

View created.

Elapsed: 00:00:00.05
11:16:51 SQL> 
11:16:51 SQL> -- rpt
11:16:51 SQL> 
11:16:51 SQL> SELECT
11:16:51   2  pair
11:16:51   3  ,COUNT(pair)
11:16:51   4  ,MIN(clse),MAX(clse)
11:16:51   5  ,MIN(avg6),MAX(avg6)
11:16:51   6  ,MIN(ydate),MAX(ydate)
11:16:51   7  FROM svm6102
11:16:51   8  GROUP BY pair
11:16:51   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
egb_usd       19808 .833520557 .893920122 .834199029 .892400287 2010-10-04 11:20:01 2011-01-07 11:10:00

Elapsed: 00:00:00.94
11:16:52 SQL> 
11:16:52 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
11:16:52 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.26
11:16:52 SQL> CREATE TABLE svm6122 COMPRESS AS
11:16:52   2  SELECT
11:16:52   3  pair
11:16:52   4  ,ydate
11:16:52   5  ,prdate
11:16:52   6  ,clse
11:16:52   7  -- g6 is important. I want to predict g6:
11:16:52   8  ,ld6 - clse g6
11:16:52   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
11:16:52  10  -- I want more attributes from the ones I derived above:
11:16:52  11  -- clse relation to moving-min
11:16:52  12  ,clse-min4  cm4
11:16:52  13  ,clse-min6  cm6
11:16:52  14  ,clse-min8  cm8
11:16:52  15  ,clse-min10 cm10
11:16:52  16  ,clse-min12 cm12
11:16:52  17  ,clse-min14 cm14
11:16:52  18  ,clse-min16 cm16
11:16:52  19  ,clse-min18 cm18
11:16:52  20  -- clse relation to moving-avg
11:16:52  21  ,clse-avg4  ca4
11:16:52  22  ,clse-avg6  ca6
11:16:52  23  ,clse-avg8  ca8
11:16:52  24  ,clse-avg10 ca10
11:16:52  25  ,clse-avg12 ca12
11:16:52  26  ,clse-avg14 ca14
11:16:52  27  ,clse-avg16 ca16
11:16:52  28  ,clse-avg18 ca18
11:16:52  29  -- clse relation to moving-max
11:16:52  30  ,clse-max4  cx4
11:16:52  31  ,clse-max6  cx6
11:16:52  32  ,clse-max8  cx8
11:16:52  33  ,clse-max10 cx10
11:16:52  34  ,clse-max12 cx12
11:16:52  35  ,clse-max14 cx14
11:16:52  36  ,clse-max16 cx16
11:16:52  37  ,clse-max18 cx18
11:16:52  38  -- Derive more attributes.
11:16:52  39  -- I want to use CORR() here to help SVM see the shape of the series.
11:16:52  40  -- But COVAR_POP is more stable:
11:16:52  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
11:16:52  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
11:16:52  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
11:16:52  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
11:16:52  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
11:16:52  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
11:16:52  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
11:16:52  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
11:16:52  49  -- Derive date related attributes:
11:16:52  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
11:16:52  51  ,0+TO_CHAR(ydate,'D')d
11:16:52  52  ,0+TO_CHAR(ydate,'W')w
11:16:52  53  -- mpm stands for minutes-past-midnight:
11:16:52  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
11:16:52  55  -- mph stands for minutes-past-hour:
11:16:52  56  ,0+TO_CHAR(ydate,'MI')mph
11:16:52  57  FROM svm6102
11:16:52  58  ORDER BY ydate
11:16:52  59  /

Table created.

Elapsed: 00:00:02.59
11:16:55 SQL> 
11:16:55 SQL> -- rpt
11:16:55 SQL> 
11:16:55 SQL> SELECT
11:16:55   2  pair
11:16:55   3  ,COUNT(pair)
11:16:55   4  ,MIN(clse),MAX(clse)
11:16:55   5  ,MIN(ydate),MAX(ydate)
11:16:55   6  FROM svm6122
11:16:55   7  GROUP BY pair
11:16:55   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
egb_usd       19808 .833520557 .893920122 2010-10-04 11:20:01 2011-01-07 11:10:00

Elapsed: 00:00:00.07
11:16:55 SQL> 
11:16:55 SQL> -- Prepare for derivation of NTILE based params:
11:16:55 SQL> 
11:16:55 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.45
11:16:55 SQL> CREATE TABLE svm6142 COMPRESS AS
11:16:55   2  SELECT
11:16:55   3  pair
11:16:55   4  ,ydate
11:16:55   5  ,prdate
11:16:55   6  ,clse
11:16:55   7  ,g6
11:16:55   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
11:16:55   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
11:16:55  10  ,CASE WHEN trend IS NULL THEN 1
11:16:55  11  	    WHEN trend =0      THEN 1
11:16:55  12  	    ELSE trend END trend
11:16:55  13  ,cm4
11:16:55  14  ,cm6
11:16:55  15  ,cm8
11:16:55  16  ,cm10
11:16:55  17  ,cm12
11:16:55  18  ,cm14
11:16:55  19  ,cm16
11:16:55  20  ,cm18
11:16:55  21  --
11:16:55  22  ,ca4
11:16:55  23  ,ca6
11:16:55  24  ,ca8
11:16:55  25  ,ca10
11:16:55  26  ,ca12
11:16:55  27  ,ca14
11:16:55  28  ,ca16
11:16:55  29  ,ca18
11:16:55  30  --
11:16:55  31  ,cx4
11:16:55  32  ,cx6
11:16:55  33  ,cx8
11:16:55  34  ,cx10
11:16:55  35  ,cx12
11:16:55  36  ,cx14
11:16:55  37  ,cx16
11:16:55  38  ,cx18
11:16:55  39  --
11:16:55  40  ,crr4
11:16:55  41  ,crr6
11:16:55  42  ,crr8
11:16:55  43  ,crr10
11:16:55  44  ,crr12
11:16:55  45  ,crr14
11:16:55  46  ,crr16
11:16:55  47  ,crr18
11:16:55  48  --
11:16:55  49  ,hh
11:16:55  50  ,d
11:16:55  51  ,w
11:16:55  52  ,mpm
11:16:55  53  ,mph
11:16:55  54  FROM svm6122
11:16:55  55  ORDER BY ydate
11:16:55  56  /

Table created.

Elapsed: 00:00:00.43
11:16:56 SQL> 
11:16:56 SQL> -- rpt
11:16:56 SQL> 
11:16:56 SQL> SELECT
11:16:56   2  pair
11:16:56   3  ,trend
11:16:56   4  ,gatt
11:16:56   5  ,COUNT(pair)
11:16:56   6  ,AVG(g6)
11:16:56   7  FROM svm6142
11:16:56   8  GROUP BY pair,trend,gatt
11:16:56   9  ORDER BY pair,trend,gatt
11:16:56  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7937 -.00103111
egb_usd 	-1 up	      2634 .002928824
egb_usd 	-1		40
egb_usd 	 1 nup	      6546 -.00135866
egb_usd 	 1 up	      2619 .002926948
egb_usd 	 1		32

6 rows selected.

Elapsed: 00:00:00.05
11:16:56 SQL> 
11:16:56 SQL> 
11:16:56 SQL> -- Derive NTILE based params:
11:16:56 SQL> 
11:16:56 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.35
11:16:56 SQL> CREATE TABLE svm6162 COMPRESS AS
11:16:56   2  SELECT
11:16:56   3  pair
11:16:56   4  ,ydate
11:16:56   5  ,prdate
11:16:56   6  ,clse
11:16:56   7  ,g6
11:16:56   8  ,gatt
11:16:56   9  ,gattn
11:16:56  10  ,trend
11:16:56  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
11:16:56  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
11:16:56  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
11:16:56  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
11:16:56  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
11:16:56  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
11:16:56  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
11:16:56  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
11:16:56  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
11:16:56  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
11:16:56  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
11:16:56  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
11:16:56  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
11:16:56  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
11:16:56  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
11:16:56  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
11:16:56  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
11:16:56  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
11:16:56  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
11:16:56  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
11:16:56  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
11:16:56  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
11:16:56  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
11:16:56  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
11:16:56  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
11:16:56  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
11:16:56  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
11:16:56  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
11:16:56  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
11:16:56  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
11:16:56  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
11:16:56  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
11:16:56  43  ,hh  att32
11:16:56  44  ,d   att33
11:16:56  45  ,w   att34
11:16:56  46  ,mpm att35
11:16:56  47  ,mph att36
11:16:56  48  ,trend att37
11:16:56  49  FROM svm6142
11:16:56  50  ORDER BY ydate
11:16:56  51  /

Table created.

Elapsed: 00:00:05.68
11:17:02 SQL> 
11:17:02 SQL> -- rpt
11:17:02 SQL> 
11:17:02 SQL> SELECT
11:17:02   2  pair
11:17:02   3  ,trend
11:17:02   4  ,gatt
11:17:02   5  ,COUNT(pair)
11:17:02   6  ,AVG(g6)
11:17:02   7  FROM svm6162
11:17:02   8  GROUP BY pair,trend,gatt
11:17:02   9  ORDER BY pair,trend,gatt
11:17:02  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7937 -.00103111
egb_usd 	-1 up	      2634 .002928824
egb_usd 	-1		40
egb_usd 	 1 nup	      6546 -.00135866
egb_usd 	 1 up	      2619 .002926948
egb_usd 	 1		32

6 rows selected.

Elapsed: 00:00:00.02
11:17:02 SQL> 
11:17:02 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.26
11:17:02 SQL> CREATE TABLE modsrc COMPRESS AS
11:17:02   2  SELECT
11:17:02   3  pair
11:17:02   4  ,ydate
11:17:02   5  ,prdate
11:17:02   6  ,trend
11:17:02   7  ,g6
11:17:02   8  ,gatt
11:17:02   9  ,gattn
11:17:02  10  FROM svm6162
11:17:02  11  /

Table created.

Elapsed: 00:00:00.08
11:17:02 SQL> 
11:17:02 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
11:17:02 SQL> 
11:17:02 SQL> DROP   TABLE egb_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
11:17:02 SQL> CREATE TABLE egb_ms610 COMPRESS AS
11:17:02   2  SELECT
11:17:02   3  ydate
11:17:02   4  ,trend egb_trend
11:17:02   5  ,g6    egb_g6
11:17:02   6  ,gatt  egb_gatt
11:17:02   7  ,gattn egb_gattn
11:17:02   8  FROM modsrc
11:17:02   9  /

Table created.

Elapsed: 00:00:00.07
11:17:03 SQL> 
11:17:03 SQL> ANALYZE TABLE egb_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
11:17:03 SQL> 
11:17:03 SQL> -- I need a copy of the attributes:
11:17:03 SQL> 
11:17:03 SQL> 
11:17:03 SQL> DROP   TABLE egb_att;

Table dropped.

Elapsed: 00:00:00.09
11:17:03 SQL> CREATE TABLE egb_att COMPRESS AS
11:17:03   2  SELECT
11:17:03   3  ydate
11:17:03   4  ,att00 egb_att00
11:17:03   5  ,att01 egb_att01
11:17:03   6  ,att02 egb_att02
11:17:03   7  ,att03 egb_att03
11:17:03   8  ,att04 egb_att04
11:17:03   9  ,att05 egb_att05
11:17:03  10  ,att06 egb_att06
11:17:03  11  ,att07 egb_att07
11:17:03  12  ,att08 egb_att08
11:17:03  13  ,att09 egb_att09
11:17:03  14  ,att10 egb_att10
11:17:03  15  ,att11 egb_att11
11:17:03  16  ,att12 egb_att12
11:17:03  17  ,att13 egb_att13
11:17:03  18  ,att14 egb_att14
11:17:03  19  ,att15 egb_att15
11:17:03  20  ,att16 egb_att16
11:17:03  21  ,att17 egb_att17
11:17:03  22  ,att18 egb_att18
11:17:03  23  ,att19 egb_att19
11:17:03  24  ,att20 egb_att20
11:17:03  25  ,att21 egb_att21
11:17:03  26  ,att22 egb_att22
11:17:03  27  ,att23 egb_att23
11:17:03  28  ,att24 egb_att24
11:17:03  29  ,att25 egb_att25
11:17:03  30  ,att26 egb_att26
11:17:03  31  ,att27 egb_att27
11:17:03  32  ,att28 egb_att28
11:17:03  33  ,att29 egb_att29
11:17:03  34  ,att30 egb_att30
11:17:03  35  ,att31 egb_att31
11:17:03  36  ,att32 egb_att32
11:17:03  37  ,att33 egb_att33
11:17:03  38  ,att34 egb_att34
11:17:03  39  ,att35 egb_att35
11:17:03  40  ,att36 egb_att36
11:17:03  41  ,att37 egb_att37
11:17:03  42  FROM svm6162
11:17:03  43  /

Table created.

Elapsed: 00:00:00.22
11:17:03 SQL> 
11:17:03 SQL> ANALYZE TABLE egb_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.44
11:17:03 SQL> 
11:17:03 SQL> -- rpt
11:17:03 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19808

Elapsed: 00:00:00.95
11:17:04 SQL> SELECT COUNT(*)FROM egb_att;

  COUNT(*)
----------
     19808

Elapsed: 00:00:00.00
11:17:04 SQL> 
11:17:04 SQL> --
11:17:04 SQL> -- ejp610.sql
11:17:04 SQL> --
11:17:04 SQL> 
11:17:04 SQL> -- Creates views and tables for backtesting a forex SVM strategy
11:17:04 SQL> 
11:17:04 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.57
11:17:05 SQL> 
11:17:05 SQL> -- I created di5min here:
11:17:05 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
11:17:05 SQL> 
11:17:05 SQL> CREATE OR REPLACE VIEW svm6102 AS
11:17:05   2  SELECT
11:17:05   3  pair
11:17:05   4  ,ydate
11:17:05   5  ,prdate
11:17:05   6  ,rownum rnum -- acts as t in my time-series
11:17:05   7  ,clse
11:17:05   8  -- Derive a bunch of attributes from clse, the latest price:
11:17:05   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
11:17:05  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
11:17:05  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
11:17:05  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
11:17:05  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
11:17:05  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
11:17:05  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
11:17:05  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
11:17:05  17  --
11:17:05  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
11:17:05  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
11:17:05  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
11:17:05  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
11:17:05  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
11:17:05  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
11:17:05  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
11:17:05  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
11:17:05  26  --
11:17:05  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
11:17:05  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
11:17:05  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
11:17:05  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
11:17:05  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
11:17:05  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
11:17:05  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
11:17:05  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
11:17:05  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
11:17:05  36  FROM di5min WHERE pair LIKE'%ejp%'
11:17:05  37  AND ydate > sysdate - 95
11:17:05  38  ORDER BY ydate
11:17:05  39  /

View created.

Elapsed: 00:00:00.08
11:17:05 SQL> 
11:17:05 SQL> -- rpt
11:17:05 SQL> 
11:17:05 SQL> SELECT
11:17:05   2  pair
11:17:05   3  ,COUNT(pair)
11:17:05   4  ,MIN(clse),MAX(clse)
11:17:05   5  ,MIN(avg6),MAX(avg6)
11:17:05   6  ,MIN(ydate),MAX(ydate)
11:17:05   7  FROM svm6102
11:17:05   8  GROUP BY pair
11:17:05   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ejp_usd       19806 107.643765	115.63485 107.776148 115.509678 2010-10-04 11:20:01 2011-01-07 11:10:00

Elapsed: 00:00:00.85
11:17:06 SQL> 
11:17:06 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
11:17:06 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.24
11:17:06 SQL> CREATE TABLE svm6122 COMPRESS AS
11:17:06   2  SELECT
11:17:06   3  pair
11:17:06   4  ,ydate
11:17:06   5  ,prdate
11:17:06   6  ,clse
11:17:06   7  -- g6 is important. I want to predict g6:
11:17:06   8  ,ld6 - clse g6
11:17:06   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
11:17:06  10  -- I want more attributes from the ones I derived above:
11:17:06  11  -- clse relation to moving-min
11:17:06  12  ,clse-min4  cm4
11:17:06  13  ,clse-min6  cm6
11:17:06  14  ,clse-min8  cm8
11:17:06  15  ,clse-min10 cm10
11:17:06  16  ,clse-min12 cm12
11:17:06  17  ,clse-min14 cm14
11:17:06  18  ,clse-min16 cm16
11:17:06  19  ,clse-min18 cm18
11:17:06  20  -- clse relation to moving-avg
11:17:06  21  ,clse-avg4  ca4
11:17:06  22  ,clse-avg6  ca6
11:17:06  23  ,clse-avg8  ca8
11:17:06  24  ,clse-avg10 ca10
11:17:06  25  ,clse-avg12 ca12
11:17:06  26  ,clse-avg14 ca14
11:17:06  27  ,clse-avg16 ca16
11:17:06  28  ,clse-avg18 ca18
11:17:06  29  -- clse relation to moving-max
11:17:06  30  ,clse-max4  cx4
11:17:06  31  ,clse-max6  cx6
11:17:06  32  ,clse-max8  cx8
11:17:06  33  ,clse-max10 cx10
11:17:06  34  ,clse-max12 cx12
11:17:06  35  ,clse-max14 cx14
11:17:06  36  ,clse-max16 cx16
11:17:06  37  ,clse-max18 cx18
11:17:06  38  -- Derive more attributes.
11:17:06  39  -- I want to use CORR() here to help SVM see the shape of the series.
11:17:06  40  -- But COVAR_POP is more stable:
11:17:06  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
11:17:06  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
11:17:06  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
11:17:06  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
11:17:06  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
11:17:06  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
11:17:06  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
11:17:06  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
11:17:06  49  -- Derive date related attributes:
11:17:06  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
11:17:06  51  ,0+TO_CHAR(ydate,'D')d
11:17:06  52  ,0+TO_CHAR(ydate,'W')w
11:17:06  53  -- mpm stands for minutes-past-midnight:
11:17:06  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
11:17:06  55  -- mph stands for minutes-past-hour:
11:17:06  56  ,0+TO_CHAR(ydate,'MI')mph
11:17:06  57  FROM svm6102
11:17:06  58  ORDER BY ydate
11:17:06  59  /

Table created.

Elapsed: 00:00:02.13
11:17:08 SQL> 
11:17:08 SQL> -- rpt
11:17:08 SQL> 
11:17:08 SQL> SELECT
11:17:08   2  pair
11:17:08   3  ,COUNT(pair)
11:17:08   4  ,MIN(clse),MAX(clse)
11:17:08   5  ,MIN(ydate),MAX(ydate)
11:17:08   6  FROM svm6122
11:17:08   7  GROUP BY pair
11:17:08   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ejp_usd       19806 107.643765	115.63485 2010-10-04 11:20:01 2011-01-07 11:10:00

Elapsed: 00:00:00.06
11:17:08 SQL> 
11:17:08 SQL> -- Prepare for derivation of NTILE based params:
11:17:08 SQL> 
11:17:08 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.33
11:17:09 SQL> CREATE TABLE svm6142 COMPRESS AS
11:17:09   2  SELECT
11:17:09   3  pair
11:17:09   4  ,ydate
11:17:09   5  ,prdate
11:17:09   6  ,clse
11:17:09   7  ,g6
11:17:09   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
11:17:09   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
11:17:09  10  ,CASE WHEN trend IS NULL THEN 1
11:17:09  11  	    WHEN trend =0      THEN 1
11:17:09  12  	    ELSE trend END trend
11:17:09  13  ,cm4
11:17:09  14  ,cm6
11:17:09  15  ,cm8
11:17:09  16  ,cm10
11:17:09  17  ,cm12
11:17:09  18  ,cm14
11:17:09  19  ,cm16
11:17:09  20  ,cm18
11:17:09  21  --
11:17:09  22  ,ca4
11:17:09  23  ,ca6
11:17:09  24  ,ca8
11:17:09  25  ,ca10
11:17:09  26  ,ca12
11:17:09  27  ,ca14
11:17:09  28  ,ca16
11:17:09  29  ,ca18
11:17:09  30  --
11:17:09  31  ,cx4
11:17:09  32  ,cx6
11:17:09  33  ,cx8
11:17:09  34  ,cx10
11:17:09  35  ,cx12
11:17:09  36  ,cx14
11:17:09  37  ,cx16
11:17:09  38  ,cx18
11:17:09  39  --
11:17:09  40  ,crr4
11:17:09  41  ,crr6
11:17:09  42  ,crr8
11:17:09  43  ,crr10
11:17:09  44  ,crr12
11:17:09  45  ,crr14
11:17:09  46  ,crr16
11:17:09  47  ,crr18
11:17:09  48  --
11:17:09  49  ,hh
11:17:09  50  ,d
11:17:09  51  ,w
11:17:09  52  ,mpm
11:17:09  53  ,mph
11:17:09  54  FROM svm6122
11:17:09  55  ORDER BY ydate
11:17:09  56  /

Table created.

Elapsed: 00:00:00.40
11:17:09 SQL> 
11:17:09 SQL> -- rpt
11:17:09 SQL> 
11:17:09 SQL> SELECT
11:17:09   2  pair
11:17:09   3  ,trend
11:17:09   4  ,gatt
11:17:09   5  ,COUNT(pair)
11:17:09   6  ,AVG(g6)
11:17:09   7  FROM svm6142
11:17:09   8  GROUP BY pair,trend,gatt
11:17:09   9  ORDER BY pair,trend,gatt
11:17:09  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      5204 -.32101112
ejp_usd 	-1 up	      4950 .276623703
ejp_usd 	-1		 1
ejp_usd 	 1 nup	      4951  -.2916054
ejp_usd 	 1 up	      4629 .288512685
ejp_usd 	 1		71

6 rows selected.

Elapsed: 00:00:00.03
11:17:09 SQL> 
11:17:09 SQL> 
11:17:09 SQL> -- Derive NTILE based params:
11:17:09 SQL> 
11:17:09 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.17
11:17:09 SQL> CREATE TABLE svm6162 COMPRESS AS
11:17:09   2  SELECT
11:17:09   3  pair
11:17:09   4  ,ydate
11:17:09   5  ,prdate
11:17:09   6  ,clse
11:17:09   7  ,g6
11:17:09   8  ,gatt
11:17:09   9  ,gattn
11:17:09  10  ,trend
11:17:09  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
11:17:09  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
11:17:09  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
11:17:09  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
11:17:09  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
11:17:09  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
11:17:09  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
11:17:09  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
11:17:09  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
11:17:09  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
11:17:09  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
11:17:09  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
11:17:09  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
11:17:09  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
11:17:09  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
11:17:09  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
11:17:09  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
11:17:09  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
11:17:09  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
11:17:09  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
11:17:09  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
11:17:09  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
11:17:09  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
11:17:09  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
11:17:09  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
11:17:09  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
11:17:09  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
11:17:09  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
11:17:09  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
11:17:09  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
11:17:09  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
11:17:09  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
11:17:09  43  ,hh  att32
11:17:09  44  ,d   att33
11:17:09  45  ,w   att34
11:17:09  46  ,mpm att35
11:17:09  47  ,mph att36
11:17:09  48  ,trend att37
11:17:09  49  FROM svm6142
11:17:09  50  ORDER BY ydate
11:17:09  51  /

Table created.

Elapsed: 00:00:04.96
11:17:14 SQL> 
11:17:14 SQL> -- rpt
11:17:14 SQL> 
11:17:14 SQL> SELECT
11:17:14   2  pair
11:17:14   3  ,trend
11:17:14   4  ,gatt
11:17:14   5  ,COUNT(pair)
11:17:14   6  ,AVG(g6)
11:17:14   7  FROM svm6162
11:17:14   8  GROUP BY pair,trend,gatt
11:17:14   9  ORDER BY pair,trend,gatt
11:17:14  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      5204 -.32101112
ejp_usd 	-1 up	      4950 .276623703
ejp_usd 	-1		 1
ejp_usd 	 1 nup	      4951  -.2916054
ejp_usd 	 1 up	      4629 .288512685
ejp_usd 	 1		71

6 rows selected.

Elapsed: 00:00:00.03
11:17:14 SQL> 
11:17:14 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
11:17:14 SQL> CREATE TABLE modsrc COMPRESS AS
11:17:14   2  SELECT
11:17:14   3  pair
11:17:14   4  ,ydate
11:17:14   5  ,prdate
11:17:14   6  ,trend
11:17:14   7  ,g6
11:17:14   8  ,gatt
11:17:14   9  ,gattn
11:17:14  10  FROM svm6162
11:17:14  11  /

Table created.

Elapsed: 00:00:00.08
11:17:14 SQL> 
11:17:14 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
11:17:15 SQL> 
11:17:15 SQL> DROP   TABLE ejp_ms610 ;

Table dropped.

Elapsed: 00:00:00.03
11:17:15 SQL> CREATE TABLE ejp_ms610 COMPRESS AS
11:17:15   2  SELECT
11:17:15   3  ydate
11:17:15   4  ,trend ejp_trend
11:17:15   5  ,g6    ejp_g6
11:17:15   6  ,gatt  ejp_gatt
11:17:15   7  ,gattn ejp_gattn
11:17:15   8  FROM modsrc
11:17:15   9  /

Table created.

Elapsed: 00:00:00.08
11:17:15 SQL> 
11:17:15 SQL> ANALYZE TABLE ejp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
11:17:15 SQL> 
11:17:15 SQL> -- I need a copy of the attributes:
11:17:15 SQL> 
11:17:15 SQL> 
11:17:15 SQL> DROP   TABLE ejp_att;

Table dropped.

Elapsed: 00:00:00.03
11:17:15 SQL> CREATE TABLE ejp_att COMPRESS AS
11:17:15   2  SELECT
11:17:15   3  ydate
11:17:15   4  ,att00 ejp_att00
11:17:15   5  ,att01 ejp_att01
11:17:15   6  ,att02 ejp_att02
11:17:15   7  ,att03 ejp_att03
11:17:15   8  ,att04 ejp_att04
11:17:15   9  ,att05 ejp_att05
11:17:15  10  ,att06 ejp_att06
11:17:15  11  ,att07 ejp_att07
11:17:15  12  ,att08 ejp_att08
11:17:15  13  ,att09 ejp_att09
11:17:15  14  ,att10 ejp_att10
11:17:15  15  ,att11 ejp_att11
11:17:15  16  ,att12 ejp_att12
11:17:15  17  ,att13 ejp_att13
11:17:15  18  ,att14 ejp_att14
11:17:15  19  ,att15 ejp_att15
11:17:15  20  ,att16 ejp_att16
11:17:15  21  ,att17 ejp_att17
11:17:15  22  ,att18 ejp_att18
11:17:15  23  ,att19 ejp_att19
11:17:15  24  ,att20 ejp_att20
11:17:15  25  ,att21 ejp_att21
11:17:15  26  ,att22 ejp_att22
11:17:15  27  ,att23 ejp_att23
11:17:15  28  ,att24 ejp_att24
11:17:15  29  ,att25 ejp_att25
11:17:15  30  ,att26 ejp_att26
11:17:15  31  ,att27 ejp_att27
11:17:15  32  ,att28 ejp_att28
11:17:15  33  ,att29 ejp_att29
11:17:15  34  ,att30 ejp_att30
11:17:15  35  ,att31 ejp_att31
11:17:15  36  ,att32 ejp_att32
11:17:15  37  ,att33 ejp_att33
11:17:15  38  ,att34 ejp_att34
11:17:15  39  ,att35 ejp_att35
11:17:15  40  ,att36 ejp_att36
11:17:15  41  ,att37 ejp_att37
11:17:15  42  FROM svm6162
11:17:15  43  /

Table created.

Elapsed: 00:00:00.21
11:17:15 SQL> 
11:17:15 SQL> ANALYZE TABLE ejp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
11:17:16 SQL> 
11:17:16 SQL> -- rpt
11:17:16 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19806

Elapsed: 00:00:00.82
11:17:16 SQL> SELECT COUNT(*)FROM ejp_att;

  COUNT(*)
----------
     19806

Elapsed: 00:00:00.00
11:17:16 SQL> 
11:17:16 SQL> --
11:17:16 SQL> -- ajp610.sql
11:17:16 SQL> --
11:17:16 SQL> 
11:17:16 SQL> -- Creates views and tables for backtesting a forex SVM strategy
11:17:16 SQL> 
11:17:16 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.45
11:17:17 SQL> 
11:17:17 SQL> -- I created di5min here:
11:17:17 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
11:17:17 SQL> 
11:17:17 SQL> CREATE OR REPLACE VIEW svm6102 AS
11:17:17   2  SELECT
11:17:17   3  pair
11:17:17   4  ,ydate
11:17:17   5  ,prdate
11:17:17   6  ,rownum rnum -- acts as t in my time-series
11:17:17   7  ,clse
11:17:17   8  -- Derive a bunch of attributes from clse, the latest price:
11:17:17   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
11:17:17  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
11:17:17  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
11:17:17  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
11:17:17  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
11:17:17  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
11:17:17  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
11:17:17  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
11:17:17  17  --
11:17:17  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
11:17:17  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
11:17:17  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
11:17:17  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
11:17:17  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
11:17:17  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
11:17:17  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
11:17:17  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
11:17:17  26  --
11:17:17  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
11:17:17  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
11:17:17  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
11:17:17  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
11:17:17  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
11:17:17  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
11:17:17  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
11:17:17  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
11:17:17  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
11:17:17  36  FROM di5min WHERE pair LIKE'%ajp%'
11:17:17  37  AND ydate > sysdate - 95
11:17:17  38  ORDER BY ydate
11:17:17  39  /

View created.

Elapsed: 00:00:00.05
11:17:17 SQL> 
11:17:17 SQL> -- rpt
11:17:17 SQL> 
11:17:17 SQL> SELECT
11:17:17   2  pair
11:17:17   3  ,COUNT(pair)
11:17:17   4  ,MIN(clse),MAX(clse)
11:17:17   5  ,MIN(avg6),MAX(avg6)
11:17:17   6  ,MIN(ydate),MAX(ydate)
11:17:17   7  FROM svm6102
11:17:17   8  GROUP BY pair
11:17:17   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ajp_usd       19803  78.249976 83.6669853 78.5106193  83.546306 2010-10-04 11:20:01 2011-01-07 11:10:00

Elapsed: 00:00:00.78
11:17:18 SQL> 
11:17:18 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
11:17:18 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.38
11:17:18 SQL> CREATE TABLE svm6122 COMPRESS AS
11:17:18   2  SELECT
11:17:18   3  pair
11:17:18   4  ,ydate
11:17:18   5  ,prdate
11:17:18   6  ,clse
11:17:18   7  -- g6 is important. I want to predict g6:
11:17:18   8  ,ld6 - clse g6
11:17:18   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
11:17:18  10  -- I want more attributes from the ones I derived above:
11:17:18  11  -- clse relation to moving-min
11:17:18  12  ,clse-min4  cm4
11:17:18  13  ,clse-min6  cm6
11:17:18  14  ,clse-min8  cm8
11:17:18  15  ,clse-min10 cm10
11:17:18  16  ,clse-min12 cm12
11:17:18  17  ,clse-min14 cm14
11:17:18  18  ,clse-min16 cm16
11:17:18  19  ,clse-min18 cm18
11:17:18  20  -- clse relation to moving-avg
11:17:18  21  ,clse-avg4  ca4
11:17:18  22  ,clse-avg6  ca6
11:17:18  23  ,clse-avg8  ca8
11:17:18  24  ,clse-avg10 ca10
11:17:18  25  ,clse-avg12 ca12
11:17:18  26  ,clse-avg14 ca14
11:17:18  27  ,clse-avg16 ca16
11:17:18  28  ,clse-avg18 ca18
11:17:18  29  -- clse relation to moving-max
11:17:18  30  ,clse-max4  cx4
11:17:18  31  ,clse-max6  cx6
11:17:18  32  ,clse-max8  cx8
11:17:18  33  ,clse-max10 cx10
11:17:18  34  ,clse-max12 cx12
11:17:18  35  ,clse-max14 cx14
11:17:18  36  ,clse-max16 cx16
11:17:18  37  ,clse-max18 cx18
11:17:18  38  -- Derive more attributes.
11:17:18  39  -- I want to use CORR() here to help SVM see the shape of the series.
11:17:18  40  -- But COVAR_POP is more stable:
11:17:18  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
11:17:18  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
11:17:18  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
11:17:18  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
11:17:18  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
11:17:18  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
11:17:18  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
11:17:18  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
11:17:18  49  -- Derive date related attributes:
11:17:18  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
11:17:18  51  ,0+TO_CHAR(ydate,'D')d
11:17:18  52  ,0+TO_CHAR(ydate,'W')w
11:17:18  53  -- mpm stands for minutes-past-midnight:
11:17:18  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
11:17:18  55  -- mph stands for minutes-past-hour:
11:17:18  56  ,0+TO_CHAR(ydate,'MI')mph
11:17:18  57  FROM svm6102
11:17:18  58  ORDER BY ydate
11:17:18  59  /

Table created.

Elapsed: 00:00:02.04
11:17:20 SQL> 
11:17:20 SQL> -- rpt
11:17:20 SQL> 
11:17:20 SQL> SELECT
11:17:20   2  pair
11:17:20   3  ,COUNT(pair)
11:17:20   4  ,MIN(clse),MAX(clse)
11:17:20   5  ,MIN(ydate),MAX(ydate)
11:17:20   6  FROM svm6122
11:17:20   7  GROUP BY pair
11:17:20   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ajp_usd       19803  78.249976 83.6669853 2010-10-04 11:20:01 2011-01-07 11:10:00

Elapsed: 00:00:00.04
11:17:20 SQL> 
11:17:20 SQL> -- Prepare for derivation of NTILE based params:
11:17:20 SQL> 
11:17:20 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.21
11:17:20 SQL> CREATE TABLE svm6142 COMPRESS AS
11:17:20   2  SELECT
11:17:20   3  pair
11:17:20   4  ,ydate
11:17:20   5  ,prdate
11:17:20   6  ,clse
11:17:20   7  ,g6
11:17:20   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
11:17:20   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
11:17:20  10  ,CASE WHEN trend IS NULL THEN 1
11:17:20  11  	    WHEN trend =0      THEN 1
11:17:20  12  	    ELSE trend END trend
11:17:20  13  ,cm4
11:17:20  14  ,cm6
11:17:20  15  ,cm8
11:17:20  16  ,cm10
11:17:20  17  ,cm12
11:17:20  18  ,cm14
11:17:20  19  ,cm16
11:17:20  20  ,cm18
11:17:20  21  --
11:17:20  22  ,ca4
11:17:20  23  ,ca6
11:17:20  24  ,ca8
11:17:20  25  ,ca10
11:17:20  26  ,ca12
11:17:20  27  ,ca14
11:17:20  28  ,ca16
11:17:20  29  ,ca18
11:17:20  30  --
11:17:20  31  ,cx4
11:17:20  32  ,cx6
11:17:20  33  ,cx8
11:17:20  34  ,cx10
11:17:20  35  ,cx12
11:17:20  36  ,cx14
11:17:20  37  ,cx16
11:17:20  38  ,cx18
11:17:20  39  --
11:17:20  40  ,crr4
11:17:20  41  ,crr6
11:17:20  42  ,crr8
11:17:20  43  ,crr10
11:17:20  44  ,crr12
11:17:20  45  ,crr14
11:17:20  46  ,crr16
11:17:20  47  ,crr18
11:17:20  48  --
11:17:20  49  ,hh
11:17:20  50  ,d
11:17:20  51  ,w
11:17:20  52  ,mpm
11:17:20  53  ,mph
11:17:20  54  FROM svm6122
11:17:20  55  ORDER BY ydate
11:17:20  56  /

Table created.

Elapsed: 00:00:00.41
11:17:21 SQL> 
11:17:21 SQL> -- rpt
11:17:21 SQL> 
11:17:21 SQL> SELECT
11:17:21   2  pair
11:17:21   3  ,trend
11:17:21   4  ,gatt
11:17:21   5  ,COUNT(pair)
11:17:21   6  ,AVG(g6)
11:17:21   7  FROM svm6142
11:17:21   8  GROUP BY pair,trend,gatt
11:17:21   9  ORDER BY pair,trend,gatt
11:17:21  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ajp_usd 	-1 nup	      4354 -.22346214
ajp_usd 	-1 up	      5273 .221708817
ajp_usd 	-1		 5
ajp_usd 	 1 nup	      5296 -.19991843
ajp_usd 	 1 up	      4808  .21282171
ajp_usd 	 1		67

6 rows selected.

Elapsed: 00:00:00.04
11:17:21 SQL> 
11:17:21 SQL> 
11:17:21 SQL> -- Derive NTILE based params:
11:17:21 SQL> 
11:17:21 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.18
11:17:21 SQL> CREATE TABLE svm6162 COMPRESS AS
11:17:21   2  SELECT
11:17:21   3  pair
11:17:21   4  ,ydate
11:17:21   5  ,prdate
11:17:21   6  ,clse
11:17:21   7  ,g6
11:17:21   8  ,gatt
11:17:21   9  ,gattn
11:17:21  10  ,trend
11:17:21  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
11:17:21  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
11:17:21  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
11:17:21  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
11:17:21  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
11:17:21  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
11:17:21  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
11:17:21  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
11:17:21  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
11:17:21  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
11:17:21  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
11:17:21  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
11:17:21  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
11:17:21  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
11:17:21  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
11:17:21  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
11:17:21  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
11:17:21  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
11:17:21  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
11:17:21  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
11:17:21  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
11:17:21  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
11:17:21  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
11:17:21  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
11:17:21  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
11:17:21  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
11:17:21  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
11:17:21  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
11:17:21  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
11:17:21  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
11:17:21  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
11:17:21  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
11:17:21  43  ,hh  att32
11:17:21  44  ,d   att33
11:17:21  45  ,w   att34
11:17:21  46  ,mpm att35
11:17:21  47  ,mph att36
11:17:21  48  ,trend att37
11:17:21  49  FROM svm6142
11:17:21  50  ORDER BY ydate
11:17:21  51  /

Table created.

Elapsed: 00:00:04.94
11:17:26 SQL> 
11:17:26 SQL> -- rpt
11:17:26 SQL> 
11:17:26 SQL> SELECT
11:17:26   2  pair
11:17:26   3  ,trend
11:17:26   4  ,gatt
11:17:26   5  ,COUNT(pair)
11:17:26   6  ,AVG(g6)
11:17:26   7  FROM svm6162
11:17:26   8  GROUP BY pair,trend,gatt
11:17:26   9  ORDER BY pair,trend,gatt
11:17:26  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ajp_usd 	-1 nup	      4354 -.22346214
ajp_usd 	-1 up	      5273 .221708817
ajp_usd 	-1		 5
ajp_usd 	 1 nup	      5296 -.19991843
ajp_usd 	 1 up	      4808  .21282171
ajp_usd 	 1		67

6 rows selected.

Elapsed: 00:00:00.03
11:17:26 SQL> 
11:17:26 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.17
11:17:26 SQL> CREATE TABLE modsrc COMPRESS AS
11:17:26   2  SELECT
11:17:26   3  pair
11:17:26   4  ,ydate
11:17:26   5  ,prdate
11:17:26   6  ,trend
11:17:26   7  ,g6
11:17:26   8  ,gatt
11:17:26   9  ,gattn
11:17:26  10  FROM svm6162
11:17:26  11  /

Table created.

Elapsed: 00:00:00.08
11:17:26 SQL> 
11:17:26 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.22
11:17:27 SQL> 
11:17:27 SQL> DROP   TABLE ajp_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
11:17:27 SQL> CREATE TABLE ajp_ms610 COMPRESS AS
11:17:27   2  SELECT
11:17:27   3  ydate
11:17:27   4  ,trend ajp_trend
11:17:27   5  ,g6    ajp_g6
11:17:27   6  ,gatt  ajp_gatt
11:17:27   7  ,gattn ajp_gattn
11:17:27   8  FROM modsrc
11:17:27   9  /

Table created.

Elapsed: 00:00:00.08
11:17:27 SQL> 
11:17:27 SQL> ANALYZE TABLE ajp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
11:17:27 SQL> 
11:17:27 SQL> -- I need a copy of the attributes:
11:17:27 SQL> 
11:17:27 SQL> 
11:17:27 SQL> DROP   TABLE ajp_att;

Table dropped.

Elapsed: 00:00:00.04
11:17:27 SQL> CREATE TABLE ajp_att COMPRESS AS
11:17:27   2  SELECT
11:17:27   3  ydate
11:17:27   4  ,att00 ajp_att00
11:17:27   5  ,att01 ajp_att01
11:17:27   6  ,att02 ajp_att02
11:17:27   7  ,att03 ajp_att03
11:17:27   8  ,att04 ajp_att04
11:17:27   9  ,att05 ajp_att05
11:17:27  10  ,att06 ajp_att06
11:17:27  11  ,att07 ajp_att07
11:17:27  12  ,att08 ajp_att08
11:17:27  13  ,att09 ajp_att09
11:17:27  14  ,att10 ajp_att10
11:17:27  15  ,att11 ajp_att11
11:17:27  16  ,att12 ajp_att12
11:17:27  17  ,att13 ajp_att13
11:17:27  18  ,att14 ajp_att14
11:17:27  19  ,att15 ajp_att15
11:17:27  20  ,att16 ajp_att16
11:17:27  21  ,att17 ajp_att17
11:17:27  22  ,att18 ajp_att18
11:17:27  23  ,att19 ajp_att19
11:17:27  24  ,att20 ajp_att20
11:17:27  25  ,att21 ajp_att21
11:17:27  26  ,att22 ajp_att22
11:17:27  27  ,att23 ajp_att23
11:17:27  28  ,att24 ajp_att24
11:17:27  29  ,att25 ajp_att25
11:17:27  30  ,att26 ajp_att26
11:17:27  31  ,att27 ajp_att27
11:17:27  32  ,att28 ajp_att28
11:17:27  33  ,att29 ajp_att29
11:17:27  34  ,att30 ajp_att30
11:17:27  35  ,att31 ajp_att31
11:17:27  36  ,att32 ajp_att32
11:17:27  37  ,att33 ajp_att33
11:17:27  38  ,att34 ajp_att34
11:17:27  39  ,att35 ajp_att35
11:17:27  40  ,att36 ajp_att36
11:17:27  41  ,att37 ajp_att37
11:17:27  42  FROM svm6162
11:17:27  43  /

Table created.

Elapsed: 00:00:00.18
11:17:27 SQL> 
11:17:27 SQL> ANALYZE TABLE ajp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
11:17:27 SQL> 
11:17:27 SQL> -- rpt
11:17:27 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19803

Elapsed: 00:00:00.76
11:17:28 SQL> SELECT COUNT(*)FROM ajp_att;

  COUNT(*)
----------
     19803

Elapsed: 00:00:00.00
11:17:28 SQL> 
11:17:28 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
