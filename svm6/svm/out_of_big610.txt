
SQL*Plus: Release 11.2.0.1.0 Production on Thu Dec 30 22:33:50 2010

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

22:33:50 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
22:33:50 SQL> 22:33:50 SQL> --
22:33:50 SQL> -- eur610.sql
22:33:50 SQL> --
22:33:50 SQL> 
22:33:50 SQL> -- Creates views and tables for backtesting a forex SVM strategy
22:33:50 SQL> 
22:33:50 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.02
22:33:50 SQL> 
22:33:50 SQL> -- I created di5min here:
22:33:50 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
22:33:50 SQL> 
22:33:50 SQL> CREATE OR REPLACE VIEW svm6102 AS
22:33:50   2  SELECT
22:33:50   3  pair
22:33:50   4  ,ydate
22:33:50   5  ,prdate
22:33:50   6  ,rownum rnum -- acts as t in my time-series
22:33:50   7  ,clse
22:33:50   8  -- Derive a bunch of attributes from clse, the latest price:
22:33:50   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
22:33:50  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
22:33:50  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
22:33:50  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
22:33:50  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
22:33:50  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
22:33:50  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
22:33:50  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
22:33:50  17  --
22:33:50  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
22:33:50  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
22:33:50  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
22:33:50  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
22:33:50  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
22:33:50  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
22:33:50  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
22:33:50  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
22:33:50  26  --
22:33:50  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
22:33:50  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
22:33:50  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
22:33:50  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
22:33:50  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
22:33:50  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
22:33:50  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
22:33:50  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
22:33:50  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
22:33:50  36  FROM di5min WHERE pair LIKE'%eur%'
22:33:50  37  AND ydate > sysdate - 95
22:33:50  38  ORDER BY ydate
22:33:50  39  /

View created.

Elapsed: 00:00:00.05
22:33:50 SQL> 
22:33:50 SQL> -- rpt
22:33:50 SQL> 
22:33:50 SQL> SELECT
22:33:50   2  pair
22:33:50   3  ,COUNT(pair)
22:33:50   4  ,MIN(clse),MAX(clse)
22:33:50   5  ,MIN(avg6),MAX(avg6)
22:33:50   6  ,MIN(ydate),MAX(ydate)
22:33:50   7  FROM svm6102
22:33:50   8  GROUP BY pair
22:33:50   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_usd       19839    1.29735	   1.4273 1.29875103 1.42436233 2010-09-26 22:35:01 2010-12-30 22:30:00

Elapsed: 00:00:00.91
22:33:51 SQL> 
22:33:51 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
22:33:51 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.04
22:33:51 SQL> CREATE TABLE svm6122 COMPRESS AS
22:33:51   2  SELECT
22:33:51   3  pair
22:33:51   4  ,ydate
22:33:51   5  ,prdate
22:33:51   6  ,clse
22:33:51   7  -- g6 is important. I want to predict g6:
22:33:51   8  ,ld6 - clse g6
22:33:51   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
22:33:51  10  -- I want more attributes from the ones I derived above:
22:33:51  11  -- clse relation to moving-min
22:33:51  12  ,clse-min4  cm4
22:33:51  13  ,clse-min6  cm6
22:33:51  14  ,clse-min8  cm8
22:33:51  15  ,clse-min10 cm10
22:33:51  16  ,clse-min12 cm12
22:33:51  17  ,clse-min14 cm14
22:33:51  18  ,clse-min16 cm16
22:33:51  19  ,clse-min18 cm18
22:33:51  20  -- clse relation to moving-avg
22:33:51  21  ,clse-avg4  ca4
22:33:51  22  ,clse-avg6  ca6
22:33:51  23  ,clse-avg8  ca8
22:33:51  24  ,clse-avg10 ca10
22:33:51  25  ,clse-avg12 ca12
22:33:51  26  ,clse-avg14 ca14
22:33:51  27  ,clse-avg16 ca16
22:33:51  28  ,clse-avg18 ca18
22:33:51  29  -- clse relation to moving-max
22:33:51  30  ,clse-max4  cx4
22:33:51  31  ,clse-max6  cx6
22:33:51  32  ,clse-max8  cx8
22:33:51  33  ,clse-max10 cx10
22:33:51  34  ,clse-max12 cx12
22:33:51  35  ,clse-max14 cx14
22:33:51  36  ,clse-max16 cx16
22:33:51  37  ,clse-max18 cx18
22:33:51  38  -- Derive more attributes.
22:33:51  39  -- I want to use CORR() here to help SVM see the shape of the series.
22:33:51  40  -- But COVAR_POP is more stable:
22:33:51  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
22:33:51  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
22:33:51  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
22:33:51  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
22:33:51  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
22:33:51  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
22:33:51  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
22:33:51  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
22:33:51  49  -- Derive date related attributes:
22:33:51  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:33:51  51  ,0+TO_CHAR(ydate,'D')d
22:33:51  52  ,0+TO_CHAR(ydate,'W')w
22:33:51  53  -- mpm stands for minutes-past-midnight:
22:33:51  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:33:51  55  -- mph stands for minutes-past-hour:
22:33:51  56  ,0+TO_CHAR(ydate,'MI')mph
22:33:51  57  FROM svm6102
22:33:51  58  ORDER BY ydate
22:33:51  59  /

Table created.

Elapsed: 00:00:02.41
22:33:53 SQL> 
22:33:53 SQL> -- rpt
22:33:53 SQL> 
22:33:53 SQL> SELECT
22:33:53   2  pair
22:33:53   3  ,COUNT(pair)
22:33:53   4  ,MIN(clse),MAX(clse)
22:33:53   5  ,MIN(ydate),MAX(ydate)
22:33:53   6  FROM svm6122
22:33:53   7  GROUP BY pair
22:33:53   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_usd       19839    1.29735	   1.4273 2010-09-26 22:35:01 2010-12-30 22:30:00

Elapsed: 00:00:00.06
22:33:53 SQL> 
22:33:53 SQL> -- Prepare for derivation of NTILE based params:
22:33:53 SQL> 
22:33:53 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.07
22:33:53 SQL> CREATE TABLE svm6142 COMPRESS AS
22:33:53   2  SELECT
22:33:53   3  pair
22:33:53   4  ,ydate
22:33:53   5  ,prdate
22:33:53   6  ,clse
22:33:53   7  ,g6
22:33:53   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
22:33:53   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
22:33:53  10  ,CASE WHEN trend IS NULL THEN 1
22:33:53  11  	    WHEN trend =0      THEN 1
22:33:53  12  	    ELSE trend END trend
22:33:53  13  ,cm4
22:33:53  14  ,cm6
22:33:53  15  ,cm8
22:33:53  16  ,cm10
22:33:53  17  ,cm12
22:33:53  18  ,cm14
22:33:53  19  ,cm16
22:33:53  20  ,cm18
22:33:53  21  --
22:33:53  22  ,ca4
22:33:53  23  ,ca6
22:33:53  24  ,ca8
22:33:53  25  ,ca10
22:33:53  26  ,ca12
22:33:53  27  ,ca14
22:33:53  28  ,ca16
22:33:53  29  ,ca18
22:33:53  30  --
22:33:53  31  ,cx4
22:33:53  32  ,cx6
22:33:53  33  ,cx8
22:33:53  34  ,cx10
22:33:53  35  ,cx12
22:33:53  36  ,cx14
22:33:53  37  ,cx16
22:33:53  38  ,cx18
22:33:53  39  --
22:33:53  40  ,crr4
22:33:53  41  ,crr6
22:33:53  42  ,crr8
22:33:53  43  ,crr10
22:33:53  44  ,crr12
22:33:53  45  ,crr14
22:33:53  46  ,crr16
22:33:53  47  ,crr18
22:33:53  48  --
22:33:53  49  ,hh
22:33:53  50  ,d
22:33:53  51  ,w
22:33:53  52  ,mpm
22:33:53  53  ,mph
22:33:53  54  FROM svm6122
22:33:53  55  ORDER BY ydate
22:33:53  56  /

Table created.

Elapsed: 00:00:00.39
22:33:54 SQL> 
22:33:54 SQL> -- rpt
22:33:54 SQL> 
22:33:54 SQL> SELECT
22:33:54   2  pair
22:33:54   3  ,trend
22:33:54   4  ,gatt
22:33:54   5  ,COUNT(pair)
22:33:54   6  ,AVG(g6)
22:33:54   7  FROM svm6142
22:33:54   8  GROUP BY pair,trend,gatt
22:33:54   9  ORDER BY pair,trend,gatt
22:33:54  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6119 -.00308072
eur_usd 	-1 up	      3753 .004490504
eur_usd 	-1		16
eur_usd 	 1 nup	      6057 -.00309318
eur_usd 	 1 up	      3838 .005052788
eur_usd 	 1		56

6 rows selected.

Elapsed: 00:00:00.04
22:33:54 SQL> 
22:33:54 SQL> 
22:33:54 SQL> -- Derive NTILE based params:
22:33:54 SQL> 
22:33:54 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.04
22:33:54 SQL> CREATE TABLE svm6162 COMPRESS AS
22:33:54   2  SELECT
22:33:54   3  pair
22:33:54   4  ,ydate
22:33:54   5  ,prdate
22:33:54   6  ,clse
22:33:54   7  ,g6
22:33:54   8  ,gatt
22:33:54   9  ,gattn
22:33:54  10  ,trend
22:33:54  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
22:33:54  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
22:33:54  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
22:33:54  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
22:33:54  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
22:33:54  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
22:33:54  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
22:33:54  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
22:33:54  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
22:33:54  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
22:33:54  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
22:33:54  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
22:33:54  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
22:33:54  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
22:33:54  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
22:33:54  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
22:33:54  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
22:33:54  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
22:33:54  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
22:33:54  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
22:33:54  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
22:33:54  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
22:33:54  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
22:33:54  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
22:33:54  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
22:33:54  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
22:33:54  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
22:33:54  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
22:33:54  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
22:33:54  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
22:33:54  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
22:33:54  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
22:33:54  43  ,hh  att32
22:33:54  44  ,d   att33
22:33:54  45  ,w   att34
22:33:54  46  ,mpm att35
22:33:54  47  ,mph att36
22:33:54  48  ,trend att37
22:33:54  49  FROM svm6142
22:33:54  50  ORDER BY ydate
22:33:54  51  /

Table created.

Elapsed: 00:00:04.91
22:33:59 SQL> 
22:33:59 SQL> -- rpt
22:33:59 SQL> 
22:33:59 SQL> SELECT
22:33:59   2  pair
22:33:59   3  ,trend
22:33:59   4  ,gatt
22:33:59   5  ,COUNT(pair)
22:33:59   6  ,AVG(g6)
22:33:59   7  FROM svm6162
22:33:59   8  GROUP BY pair,trend,gatt
22:33:59   9  ORDER BY pair,trend,gatt
22:33:59  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6119 -.00308072
eur_usd 	-1 up	      3753 .004490504
eur_usd 	-1		16
eur_usd 	 1 nup	      6057 -.00309318
eur_usd 	 1 up	      3838 .005052788
eur_usd 	 1		56

6 rows selected.

Elapsed: 00:00:00.06
22:33:59 SQL> 
22:33:59 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.03
22:33:59 SQL> CREATE TABLE modsrc COMPRESS AS
22:33:59   2  SELECT
22:33:59   3  pair
22:33:59   4  ,ydate
22:33:59   5  ,prdate
22:33:59   6  ,trend
22:33:59   7  ,g6
22:33:59   8  ,gatt
22:33:59   9  ,gattn
22:33:59  10  FROM svm6162
22:33:59  11  /

Table created.

Elapsed: 00:00:00.08
22:33:59 SQL> 
22:33:59 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
22:33:59 SQL> 
22:33:59 SQL> DROP   TABLE eur_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
22:33:59 SQL> CREATE TABLE eur_ms610 COMPRESS AS
22:33:59   2  SELECT
22:33:59   3  ydate
22:33:59   4  ,trend eur_trend
22:33:59   5  ,g6    eur_g6
22:33:59   6  ,gatt  eur_gatt
22:33:59   7  ,gattn eur_gattn
22:33:59   8  FROM modsrc
22:33:59   9  /

Table created.

Elapsed: 00:00:00.06
22:33:59 SQL> 
22:33:59 SQL> ANALYZE TABLE eur_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
22:33:59 SQL> 
22:33:59 SQL> -- I need a copy of the attributes:
22:33:59 SQL> 
22:33:59 SQL> 
22:33:59 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.04
22:33:59 SQL> CREATE TABLE eur_att COMPRESS AS
22:33:59   2  SELECT
22:33:59   3  ydate
22:33:59   4  ,att00 eur_att00
22:33:59   5  ,att01 eur_att01
22:33:59   6  ,att02 eur_att02
22:33:59   7  ,att03 eur_att03
22:33:59   8  ,att04 eur_att04
22:33:59   9  ,att05 eur_att05
22:33:59  10  ,att06 eur_att06
22:33:59  11  ,att07 eur_att07
22:33:59  12  ,att08 eur_att08
22:33:59  13  ,att09 eur_att09
22:33:59  14  ,att10 eur_att10
22:33:59  15  ,att11 eur_att11
22:33:59  16  ,att12 eur_att12
22:33:59  17  ,att13 eur_att13
22:33:59  18  ,att14 eur_att14
22:33:59  19  ,att15 eur_att15
22:33:59  20  ,att16 eur_att16
22:33:59  21  ,att17 eur_att17
22:33:59  22  ,att18 eur_att18
22:33:59  23  ,att19 eur_att19
22:33:59  24  ,att20 eur_att20
22:33:59  25  ,att21 eur_att21
22:33:59  26  ,att22 eur_att22
22:33:59  27  ,att23 eur_att23
22:33:59  28  ,att24 eur_att24
22:33:59  29  ,att25 eur_att25
22:33:59  30  ,att26 eur_att26
22:33:59  31  ,att27 eur_att27
22:33:59  32  ,att28 eur_att28
22:33:59  33  ,att29 eur_att29
22:33:59  34  ,att30 eur_att30
22:33:59  35  ,att31 eur_att31
22:33:59  36  ,att32 eur_att32
22:33:59  37  ,att33 eur_att33
22:33:59  38  ,att34 eur_att34
22:33:59  39  ,att35 eur_att35
22:33:59  40  ,att36 eur_att36
22:33:59  41  ,att37 eur_att37
22:33:59  42  FROM svm6162
22:33:59  43  /

Table created.

Elapsed: 00:00:00.16
22:33:59 SQL> 
22:33:59 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
22:34:00 SQL> 
22:34:00 SQL> -- rpt
22:34:00 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19839

Elapsed: 00:00:00.88
22:34:01 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     19839

Elapsed: 00:00:00.00
22:34:01 SQL> 
22:34:01 SQL> --
22:34:01 SQL> -- aud610.sql
22:34:01 SQL> --
22:34:01 SQL> 
22:34:01 SQL> -- Creates views and tables for backtesting a forex SVM strategy
22:34:01 SQL> 
22:34:01 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.38
22:34:01 SQL> 
22:34:01 SQL> -- I created di5min here:
22:34:01 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
22:34:01 SQL> 
22:34:01 SQL> CREATE OR REPLACE VIEW svm6102 AS
22:34:01   2  SELECT
22:34:01   3  pair
22:34:01   4  ,ydate
22:34:01   5  ,prdate
22:34:01   6  ,rownum rnum -- acts as t in my time-series
22:34:01   7  ,clse
22:34:01   8  -- Derive a bunch of attributes from clse, the latest price:
22:34:01   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
22:34:01  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
22:34:01  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
22:34:01  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
22:34:01  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
22:34:01  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
22:34:01  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
22:34:01  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
22:34:01  17  --
22:34:01  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
22:34:01  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
22:34:01  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
22:34:01  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
22:34:01  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
22:34:01  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
22:34:01  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
22:34:01  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
22:34:01  26  --
22:34:01  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
22:34:01  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
22:34:01  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
22:34:01  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
22:34:01  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
22:34:01  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
22:34:01  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
22:34:01  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
22:34:01  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
22:34:01  36  FROM di5min WHERE pair LIKE'%aud%'
22:34:01  37  AND ydate > sysdate - 95
22:34:01  38  ORDER BY ydate
22:34:01  39  /

View created.

Elapsed: 00:00:00.04
22:34:01 SQL> 
22:34:01 SQL> -- rpt
22:34:01 SQL> 
22:34:01 SQL> SELECT
22:34:01   2  pair
22:34:01   3  ,COUNT(pair)
22:34:01   4  ,MIN(clse),MAX(clse)
22:34:01   5  ,MIN(avg6),MAX(avg6)
22:34:01   6  ,MIN(ydate),MAX(ydate)
22:34:01   7  FROM svm6102
22:34:01   8  GROUP BY pair
22:34:01   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
aud_usd       19836	.95405	1.0195625 .957141438 1.01819366 2010-09-26 22:35:01 2010-12-30 22:30:00

Elapsed: 00:00:00.87
22:34:02 SQL> 
22:34:02 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
22:34:02 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.24
22:34:02 SQL> CREATE TABLE svm6122 COMPRESS AS
22:34:02   2  SELECT
22:34:02   3  pair
22:34:02   4  ,ydate
22:34:02   5  ,prdate
22:34:02   6  ,clse
22:34:02   7  -- g6 is important. I want to predict g6:
22:34:02   8  ,ld6 - clse g6
22:34:02   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
22:34:02  10  -- I want more attributes from the ones I derived above:
22:34:02  11  -- clse relation to moving-min
22:34:02  12  ,clse-min4  cm4
22:34:02  13  ,clse-min6  cm6
22:34:02  14  ,clse-min8  cm8
22:34:02  15  ,clse-min10 cm10
22:34:02  16  ,clse-min12 cm12
22:34:02  17  ,clse-min14 cm14
22:34:02  18  ,clse-min16 cm16
22:34:02  19  ,clse-min18 cm18
22:34:02  20  -- clse relation to moving-avg
22:34:02  21  ,clse-avg4  ca4
22:34:02  22  ,clse-avg6  ca6
22:34:02  23  ,clse-avg8  ca8
22:34:02  24  ,clse-avg10 ca10
22:34:02  25  ,clse-avg12 ca12
22:34:02  26  ,clse-avg14 ca14
22:34:02  27  ,clse-avg16 ca16
22:34:02  28  ,clse-avg18 ca18
22:34:02  29  -- clse relation to moving-max
22:34:02  30  ,clse-max4  cx4
22:34:02  31  ,clse-max6  cx6
22:34:02  32  ,clse-max8  cx8
22:34:02  33  ,clse-max10 cx10
22:34:02  34  ,clse-max12 cx12
22:34:02  35  ,clse-max14 cx14
22:34:02  36  ,clse-max16 cx16
22:34:02  37  ,clse-max18 cx18
22:34:02  38  -- Derive more attributes.
22:34:02  39  -- I want to use CORR() here to help SVM see the shape of the series.
22:34:02  40  -- But COVAR_POP is more stable:
22:34:02  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
22:34:02  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
22:34:02  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
22:34:02  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
22:34:02  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
22:34:02  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
22:34:02  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
22:34:02  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
22:34:02  49  -- Derive date related attributes:
22:34:02  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:34:02  51  ,0+TO_CHAR(ydate,'D')d
22:34:02  52  ,0+TO_CHAR(ydate,'W')w
22:34:02  53  -- mpm stands for minutes-past-midnight:
22:34:02  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:34:02  55  -- mph stands for minutes-past-hour:
22:34:02  56  ,0+TO_CHAR(ydate,'MI')mph
22:34:02  57  FROM svm6102
22:34:02  58  ORDER BY ydate
22:34:02  59  /

Table created.

Elapsed: 00:00:02.06
22:34:04 SQL> 
22:34:04 SQL> -- rpt
22:34:04 SQL> 
22:34:04 SQL> SELECT
22:34:04   2  pair
22:34:04   3  ,COUNT(pair)
22:34:04   4  ,MIN(clse),MAX(clse)
22:34:04   5  ,MIN(ydate),MAX(ydate)
22:34:04   6  FROM svm6122
22:34:04   7  GROUP BY pair
22:34:04   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
aud_usd       19836	.95405	1.0195625 2010-09-26 22:35:01 2010-12-30 22:30:00

Elapsed: 00:00:00.03
22:34:04 SQL> 
22:34:04 SQL> -- Prepare for derivation of NTILE based params:
22:34:04 SQL> 
22:34:04 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.17
22:34:05 SQL> CREATE TABLE svm6142 COMPRESS AS
22:34:05   2  SELECT
22:34:05   3  pair
22:34:05   4  ,ydate
22:34:05   5  ,prdate
22:34:05   6  ,clse
22:34:05   7  ,g6
22:34:05   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
22:34:05   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
22:34:05  10  ,CASE WHEN trend IS NULL THEN 1
22:34:05  11  	    WHEN trend =0      THEN 1
22:34:05  12  	    ELSE trend END trend
22:34:05  13  ,cm4
22:34:05  14  ,cm6
22:34:05  15  ,cm8
22:34:05  16  ,cm10
22:34:05  17  ,cm12
22:34:05  18  ,cm14
22:34:05  19  ,cm16
22:34:05  20  ,cm18
22:34:05  21  --
22:34:05  22  ,ca4
22:34:05  23  ,ca6
22:34:05  24  ,ca8
22:34:05  25  ,ca10
22:34:05  26  ,ca12
22:34:05  27  ,ca14
22:34:05  28  ,ca16
22:34:05  29  ,ca18
22:34:05  30  --
22:34:05  31  ,cx4
22:34:05  32  ,cx6
22:34:05  33  ,cx8
22:34:05  34  ,cx10
22:34:05  35  ,cx12
22:34:05  36  ,cx14
22:34:05  37  ,cx16
22:34:05  38  ,cx18
22:34:05  39  --
22:34:05  40  ,crr4
22:34:05  41  ,crr6
22:34:05  42  ,crr8
22:34:05  43  ,crr10
22:34:05  44  ,crr12
22:34:05  45  ,crr14
22:34:05  46  ,crr16
22:34:05  47  ,crr18
22:34:05  48  --
22:34:05  49  ,hh
22:34:05  50  ,d
22:34:05  51  ,w
22:34:05  52  ,mpm
22:34:05  53  ,mph
22:34:05  54  FROM svm6122
22:34:05  55  ORDER BY ydate
22:34:05  56  /

Table created.

Elapsed: 00:00:00.37
22:34:05 SQL> 
22:34:05 SQL> -- rpt
22:34:05 SQL> 
22:34:05 SQL> SELECT
22:34:05   2  pair
22:34:05   3  ,trend
22:34:05   4  ,gatt
22:34:05   5  ,COUNT(pair)
22:34:05   6  ,AVG(g6)
22:34:05   7  FROM svm6142
22:34:05   8  GROUP BY pair,trend,gatt
22:34:05   9  ORDER BY pair,trend,gatt
22:34:05  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5305  -.0021063
aud_usd 	-1 up	      3843 .003724779
aud_usd 	-1		38
aud_usd 	 1 nup	      6825 -.00210659
aud_usd 	 1 up	      3791 .004024199
aud_usd 	 1		34

6 rows selected.

Elapsed: 00:00:00.04
22:34:05 SQL> 
22:34:05 SQL> 
22:34:05 SQL> -- Derive NTILE based params:
22:34:05 SQL> 
22:34:05 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.12
22:34:05 SQL> CREATE TABLE svm6162 COMPRESS AS
22:34:05   2  SELECT
22:34:05   3  pair
22:34:05   4  ,ydate
22:34:05   5  ,prdate
22:34:05   6  ,clse
22:34:05   7  ,g6
22:34:05   8  ,gatt
22:34:05   9  ,gattn
22:34:05  10  ,trend
22:34:05  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
22:34:05  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
22:34:05  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
22:34:05  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
22:34:05  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
22:34:05  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
22:34:05  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
22:34:05  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
22:34:05  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
22:34:05  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
22:34:05  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
22:34:05  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
22:34:05  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
22:34:05  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
22:34:05  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
22:34:05  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
22:34:05  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
22:34:05  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
22:34:05  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
22:34:05  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
22:34:05  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
22:34:05  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
22:34:05  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
22:34:05  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
22:34:05  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
22:34:05  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
22:34:05  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
22:34:05  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
22:34:05  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
22:34:05  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
22:34:05  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
22:34:05  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
22:34:05  43  ,hh  att32
22:34:05  44  ,d   att33
22:34:05  45  ,w   att34
22:34:05  46  ,mpm att35
22:34:05  47  ,mph att36
22:34:05  48  ,trend att37
22:34:05  49  FROM svm6142
22:34:05  50  ORDER BY ydate
22:34:05  51  /

Table created.

Elapsed: 00:00:04.82
22:34:10 SQL> 
22:34:10 SQL> -- rpt
22:34:10 SQL> 
22:34:10 SQL> SELECT
22:34:10   2  pair
22:34:10   3  ,trend
22:34:10   4  ,gatt
22:34:10   5  ,COUNT(pair)
22:34:10   6  ,AVG(g6)
22:34:10   7  FROM svm6162
22:34:10   8  GROUP BY pair,trend,gatt
22:34:10   9  ORDER BY pair,trend,gatt
22:34:10  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5305  -.0021063
aud_usd 	-1 up	      3843 .003724779
aud_usd 	-1		38
aud_usd 	 1 nup	      6825 -.00210659
aud_usd 	 1 up	      3791 .004024199
aud_usd 	 1		34

6 rows selected.

Elapsed: 00:00:00.03
22:34:10 SQL> 
22:34:10 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.30
22:34:10 SQL> CREATE TABLE modsrc COMPRESS AS
22:34:10   2  SELECT
22:34:10   3  pair
22:34:10   4  ,ydate
22:34:10   5  ,prdate
22:34:10   6  ,trend
22:34:10   7  ,g6
22:34:10   8  ,gatt
22:34:10   9  ,gattn
22:34:10  10  FROM svm6162
22:34:10  11  /

Table created.

Elapsed: 00:00:00.12
22:34:10 SQL> 
22:34:10 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
22:34:11 SQL> 
22:34:11 SQL> DROP   TABLE aud_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
22:34:11 SQL> CREATE TABLE aud_ms610 COMPRESS AS
22:34:11   2  SELECT
22:34:11   3  ydate
22:34:11   4  ,trend aud_trend
22:34:11   5  ,g6    aud_g6
22:34:11   6  ,gatt  aud_gatt
22:34:11   7  ,gattn aud_gattn
22:34:11   8  FROM modsrc
22:34:11   9  /

Table created.

Elapsed: 00:00:00.07
22:34:11 SQL> 
22:34:11 SQL> ANALYZE TABLE aud_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
22:34:11 SQL> 
22:34:11 SQL> -- I need a copy of the attributes:
22:34:11 SQL> 
22:34:11 SQL> 
22:34:11 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.05
22:34:11 SQL> CREATE TABLE aud_att COMPRESS AS
22:34:11   2  SELECT
22:34:11   3  ydate
22:34:11   4  ,att00 aud_att00
22:34:11   5  ,att01 aud_att01
22:34:11   6  ,att02 aud_att02
22:34:11   7  ,att03 aud_att03
22:34:11   8  ,att04 aud_att04
22:34:11   9  ,att05 aud_att05
22:34:11  10  ,att06 aud_att06
22:34:11  11  ,att07 aud_att07
22:34:11  12  ,att08 aud_att08
22:34:11  13  ,att09 aud_att09
22:34:11  14  ,att10 aud_att10
22:34:11  15  ,att11 aud_att11
22:34:11  16  ,att12 aud_att12
22:34:11  17  ,att13 aud_att13
22:34:11  18  ,att14 aud_att14
22:34:11  19  ,att15 aud_att15
22:34:11  20  ,att16 aud_att16
22:34:11  21  ,att17 aud_att17
22:34:11  22  ,att18 aud_att18
22:34:11  23  ,att19 aud_att19
22:34:11  24  ,att20 aud_att20
22:34:11  25  ,att21 aud_att21
22:34:11  26  ,att22 aud_att22
22:34:11  27  ,att23 aud_att23
22:34:11  28  ,att24 aud_att24
22:34:11  29  ,att25 aud_att25
22:34:11  30  ,att26 aud_att26
22:34:11  31  ,att27 aud_att27
22:34:11  32  ,att28 aud_att28
22:34:11  33  ,att29 aud_att29
22:34:11  34  ,att30 aud_att30
22:34:11  35  ,att31 aud_att31
22:34:11  36  ,att32 aud_att32
22:34:11  37  ,att33 aud_att33
22:34:11  38  ,att34 aud_att34
22:34:11  39  ,att35 aud_att35
22:34:11  40  ,att36 aud_att36
22:34:11  41  ,att37 aud_att37
22:34:11  42  FROM svm6162
22:34:11  43  /

Table created.

Elapsed: 00:00:00.19
22:34:11 SQL> 
22:34:11 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.52
22:34:12 SQL> 
22:34:12 SQL> -- rpt
22:34:12 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19836

Elapsed: 00:00:01.63
22:34:13 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     19836

Elapsed: 00:00:00.00
22:34:13 SQL> 
22:34:13 SQL> --
22:34:13 SQL> -- gbp610.sql
22:34:13 SQL> --
22:34:13 SQL> 
22:34:13 SQL> -- Creates views and tables for backtesting a forex SVM strategy
22:34:13 SQL> 
22:34:13 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:02.63
22:34:16 SQL> 
22:34:16 SQL> -- I created di5min here:
22:34:16 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
22:34:16 SQL> 
22:34:16 SQL> CREATE OR REPLACE VIEW svm6102 AS
22:34:16   2  SELECT
22:34:16   3  pair
22:34:16   4  ,ydate
22:34:16   5  ,prdate
22:34:16   6  ,rownum rnum -- acts as t in my time-series
22:34:16   7  ,clse
22:34:16   8  -- Derive a bunch of attributes from clse, the latest price:
22:34:16   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
22:34:16  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
22:34:16  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
22:34:16  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
22:34:16  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
22:34:16  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
22:34:16  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
22:34:16  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
22:34:16  17  --
22:34:16  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
22:34:16  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
22:34:16  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
22:34:16  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
22:34:16  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
22:34:16  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
22:34:16  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
22:34:16  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
22:34:16  26  --
22:34:16  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
22:34:16  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
22:34:16  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
22:34:16  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
22:34:16  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
22:34:16  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
22:34:16  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
22:34:16  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
22:34:16  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
22:34:16  36  FROM di5min WHERE pair LIKE'%gbp%'
22:34:16  37  AND ydate > sysdate - 95
22:34:16  38  ORDER BY ydate
22:34:16  39  /

View created.

Elapsed: 00:00:00.05
22:34:16 SQL> 
22:34:16 SQL> -- rpt
22:34:16 SQL> 
22:34:16 SQL> SELECT
22:34:16   2  pair
22:34:16   3  ,COUNT(pair)
22:34:16   4  ,MIN(clse),MAX(clse)
22:34:16   5  ,MIN(avg6),MAX(avg6)
22:34:16   6  ,MIN(ydate),MAX(ydate)
22:34:16   7  FROM svm6102
22:34:16   8  GROUP BY pair
22:34:16   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
gbp_usd       19839   1.535325	   1.6295 1.53696747 1.62716986 2010-09-26 22:35:01 2010-12-30 22:30:00

Elapsed: 00:00:00.90
22:34:17 SQL> 
22:34:17 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
22:34:17 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.24
22:34:17 SQL> CREATE TABLE svm6122 COMPRESS AS
22:34:17   2  SELECT
22:34:17   3  pair
22:34:17   4  ,ydate
22:34:17   5  ,prdate
22:34:17   6  ,clse
22:34:17   7  -- g6 is important. I want to predict g6:
22:34:17   8  ,ld6 - clse g6
22:34:17   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
22:34:17  10  -- I want more attributes from the ones I derived above:
22:34:17  11  -- clse relation to moving-min
22:34:17  12  ,clse-min4  cm4
22:34:17  13  ,clse-min6  cm6
22:34:17  14  ,clse-min8  cm8
22:34:17  15  ,clse-min10 cm10
22:34:17  16  ,clse-min12 cm12
22:34:17  17  ,clse-min14 cm14
22:34:17  18  ,clse-min16 cm16
22:34:17  19  ,clse-min18 cm18
22:34:17  20  -- clse relation to moving-avg
22:34:17  21  ,clse-avg4  ca4
22:34:17  22  ,clse-avg6  ca6
22:34:17  23  ,clse-avg8  ca8
22:34:17  24  ,clse-avg10 ca10
22:34:17  25  ,clse-avg12 ca12
22:34:17  26  ,clse-avg14 ca14
22:34:17  27  ,clse-avg16 ca16
22:34:17  28  ,clse-avg18 ca18
22:34:17  29  -- clse relation to moving-max
22:34:17  30  ,clse-max4  cx4
22:34:17  31  ,clse-max6  cx6
22:34:17  32  ,clse-max8  cx8
22:34:17  33  ,clse-max10 cx10
22:34:17  34  ,clse-max12 cx12
22:34:17  35  ,clse-max14 cx14
22:34:17  36  ,clse-max16 cx16
22:34:17  37  ,clse-max18 cx18
22:34:17  38  -- Derive more attributes.
22:34:17  39  -- I want to use CORR() here to help SVM see the shape of the series.
22:34:17  40  -- But COVAR_POP is more stable:
22:34:17  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
22:34:17  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
22:34:17  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
22:34:17  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
22:34:17  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
22:34:17  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
22:34:17  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
22:34:17  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
22:34:17  49  -- Derive date related attributes:
22:34:17  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:34:17  51  ,0+TO_CHAR(ydate,'D')d
22:34:17  52  ,0+TO_CHAR(ydate,'W')w
22:34:17  53  -- mpm stands for minutes-past-midnight:
22:34:17  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:34:17  55  -- mph stands for minutes-past-hour:
22:34:17  56  ,0+TO_CHAR(ydate,'MI')mph
22:34:17  57  FROM svm6102
22:34:17  58  ORDER BY ydate
22:34:17  59  /

Table created.

Elapsed: 00:00:02.06
22:34:19 SQL> 
22:34:19 SQL> -- rpt
22:34:19 SQL> 
22:34:19 SQL> SELECT
22:34:19   2  pair
22:34:19   3  ,COUNT(pair)
22:34:19   4  ,MIN(clse),MAX(clse)
22:34:19   5  ,MIN(ydate),MAX(ydate)
22:34:19   6  FROM svm6122
22:34:19   7  GROUP BY pair
22:34:19   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
gbp_usd       19839   1.535325	   1.6295 2010-09-26 22:35:01 2010-12-30 22:30:00

Elapsed: 00:00:00.04
22:34:19 SQL> 
22:34:19 SQL> -- Prepare for derivation of NTILE based params:
22:34:19 SQL> 
22:34:19 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.16
22:34:19 SQL> CREATE TABLE svm6142 COMPRESS AS
22:34:19   2  SELECT
22:34:19   3  pair
22:34:19   4  ,ydate
22:34:19   5  ,prdate
22:34:19   6  ,clse
22:34:19   7  ,g6
22:34:19   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
22:34:19   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
22:34:19  10  ,CASE WHEN trend IS NULL THEN 1
22:34:19  11  	    WHEN trend =0      THEN 1
22:34:19  12  	    ELSE trend END trend
22:34:19  13  ,cm4
22:34:19  14  ,cm6
22:34:19  15  ,cm8
22:34:19  16  ,cm10
22:34:19  17  ,cm12
22:34:19  18  ,cm14
22:34:19  19  ,cm16
22:34:19  20  ,cm18
22:34:19  21  --
22:34:19  22  ,ca4
22:34:19  23  ,ca6
22:34:19  24  ,ca8
22:34:19  25  ,ca10
22:34:19  26  ,ca12
22:34:19  27  ,ca14
22:34:19  28  ,ca16
22:34:19  29  ,ca18
22:34:19  30  --
22:34:19  31  ,cx4
22:34:19  32  ,cx6
22:34:19  33  ,cx8
22:34:19  34  ,cx10
22:34:19  35  ,cx12
22:34:19  36  ,cx14
22:34:19  37  ,cx16
22:34:19  38  ,cx18
22:34:19  39  --
22:34:19  40  ,crr4
22:34:19  41  ,crr6
22:34:19  42  ,crr8
22:34:19  43  ,crr10
22:34:19  44  ,crr12
22:34:19  45  ,crr14
22:34:19  46  ,crr16
22:34:19  47  ,crr18
22:34:19  48  --
22:34:19  49  ,hh
22:34:19  50  ,d
22:34:19  51  ,w
22:34:19  52  ,mpm
22:34:19  53  ,mph
22:34:19  54  FROM svm6122
22:34:19  55  ORDER BY ydate
22:34:19  56  /

Table created.

Elapsed: 00:00:00.37
22:34:20 SQL> 
22:34:20 SQL> -- rpt
22:34:20 SQL> 
22:34:20 SQL> SELECT
22:34:20   2  pair
22:34:20   3  ,trend
22:34:20   4  ,gatt
22:34:20   5  ,COUNT(pair)
22:34:20   6  ,AVG(g6)
22:34:20   7  FROM svm6142
22:34:20   8  GROUP BY pair,trend,gatt
22:34:20   9  ORDER BY pair,trend,gatt
22:34:20  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6391 -.00260736
gbp_usd 	-1 up	      3591 .004280921
gbp_usd 	-1		57
gbp_usd 	 1 nup	      6301 -.00267663
gbp_usd 	 1 up	      3484 .004360516
gbp_usd 	 1		15

6 rows selected.

Elapsed: 00:00:00.04
22:34:20 SQL> 
22:34:20 SQL> 
22:34:20 SQL> -- Derive NTILE based params:
22:34:20 SQL> 
22:34:20 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.13
22:34:20 SQL> CREATE TABLE svm6162 COMPRESS AS
22:34:20   2  SELECT
22:34:20   3  pair
22:34:20   4  ,ydate
22:34:20   5  ,prdate
22:34:20   6  ,clse
22:34:20   7  ,g6
22:34:20   8  ,gatt
22:34:20   9  ,gattn
22:34:20  10  ,trend
22:34:20  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
22:34:20  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
22:34:20  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
22:34:20  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
22:34:20  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
22:34:20  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
22:34:20  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
22:34:20  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
22:34:20  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
22:34:20  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
22:34:20  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
22:34:20  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
22:34:20  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
22:34:20  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
22:34:20  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
22:34:20  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
22:34:20  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
22:34:20  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
22:34:20  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
22:34:20  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
22:34:20  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
22:34:20  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
22:34:20  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
22:34:20  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
22:34:20  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
22:34:20  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
22:34:20  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
22:34:20  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
22:34:20  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
22:34:20  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
22:34:20  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
22:34:20  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
22:34:20  43  ,hh  att32
22:34:20  44  ,d   att33
22:34:20  45  ,w   att34
22:34:20  46  ,mpm att35
22:34:20  47  ,mph att36
22:34:20  48  ,trend att37
22:34:20  49  FROM svm6142
22:34:20  50  ORDER BY ydate
22:34:20  51  /

Table created.

Elapsed: 00:00:04.92
22:34:25 SQL> 
22:34:25 SQL> -- rpt
22:34:25 SQL> 
22:34:25 SQL> SELECT
22:34:25   2  pair
22:34:25   3  ,trend
22:34:25   4  ,gatt
22:34:25   5  ,COUNT(pair)
22:34:25   6  ,AVG(g6)
22:34:25   7  FROM svm6162
22:34:25   8  GROUP BY pair,trend,gatt
22:34:25   9  ORDER BY pair,trend,gatt
22:34:25  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6391 -.00260736
gbp_usd 	-1 up	      3591 .004280921
gbp_usd 	-1		57
gbp_usd 	 1 nup	      6301 -.00267663
gbp_usd 	 1 up	      3484 .004360516
gbp_usd 	 1		15

6 rows selected.

Elapsed: 00:00:00.04
22:34:25 SQL> 
22:34:25 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.34
22:34:25 SQL> CREATE TABLE modsrc COMPRESS AS
22:34:25   2  SELECT
22:34:25   3  pair
22:34:25   4  ,ydate
22:34:25   5  ,prdate
22:34:25   6  ,trend
22:34:25   7  ,g6
22:34:25   8  ,gatt
22:34:25   9  ,gattn
22:34:25  10  FROM svm6162
22:34:25  11  /

Table created.

Elapsed: 00:00:00.07
22:34:25 SQL> 
22:34:25 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
22:34:26 SQL> 
22:34:26 SQL> DROP   TABLE gbp_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
22:34:26 SQL> CREATE TABLE gbp_ms610 COMPRESS AS
22:34:26   2  SELECT
22:34:26   3  ydate
22:34:26   4  ,trend gbp_trend
22:34:26   5  ,g6    gbp_g6
22:34:26   6  ,gatt  gbp_gatt
22:34:26   7  ,gattn gbp_gattn
22:34:26   8  FROM modsrc
22:34:26   9  /

Table created.

Elapsed: 00:00:00.06
22:34:26 SQL> 
22:34:26 SQL> ANALYZE TABLE gbp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
22:34:26 SQL> 
22:34:26 SQL> -- I need a copy of the attributes:
22:34:26 SQL> 
22:34:26 SQL> 
22:34:26 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.05
22:34:26 SQL> CREATE TABLE gbp_att COMPRESS AS
22:34:26   2  SELECT
22:34:26   3  ydate
22:34:26   4  ,att00 gbp_att00
22:34:26   5  ,att01 gbp_att01
22:34:26   6  ,att02 gbp_att02
22:34:26   7  ,att03 gbp_att03
22:34:26   8  ,att04 gbp_att04
22:34:26   9  ,att05 gbp_att05
22:34:26  10  ,att06 gbp_att06
22:34:26  11  ,att07 gbp_att07
22:34:26  12  ,att08 gbp_att08
22:34:26  13  ,att09 gbp_att09
22:34:26  14  ,att10 gbp_att10
22:34:26  15  ,att11 gbp_att11
22:34:26  16  ,att12 gbp_att12
22:34:26  17  ,att13 gbp_att13
22:34:26  18  ,att14 gbp_att14
22:34:26  19  ,att15 gbp_att15
22:34:26  20  ,att16 gbp_att16
22:34:26  21  ,att17 gbp_att17
22:34:26  22  ,att18 gbp_att18
22:34:26  23  ,att19 gbp_att19
22:34:26  24  ,att20 gbp_att20
22:34:26  25  ,att21 gbp_att21
22:34:26  26  ,att22 gbp_att22
22:34:26  27  ,att23 gbp_att23
22:34:26  28  ,att24 gbp_att24
22:34:26  29  ,att25 gbp_att25
22:34:26  30  ,att26 gbp_att26
22:34:26  31  ,att27 gbp_att27
22:34:26  32  ,att28 gbp_att28
22:34:26  33  ,att29 gbp_att29
22:34:26  34  ,att30 gbp_att30
22:34:26  35  ,att31 gbp_att31
22:34:26  36  ,att32 gbp_att32
22:34:26  37  ,att33 gbp_att33
22:34:26  38  ,att34 gbp_att34
22:34:26  39  ,att35 gbp_att35
22:34:26  40  ,att36 gbp_att36
22:34:26  41  ,att37 gbp_att37
22:34:26  42  FROM svm6162
22:34:26  43  /

Table created.

Elapsed: 00:00:00.19
22:34:26 SQL> 
22:34:26 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
22:34:27 SQL> 
22:34:27 SQL> -- rpt
22:34:27 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19839

Elapsed: 00:00:00.83
22:34:27 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     19839

Elapsed: 00:00:00.00
22:34:27 SQL> 
22:34:27 SQL> --
22:34:27 SQL> -- jpy610.sql
22:34:27 SQL> --
22:34:27 SQL> 
22:34:27 SQL> -- Creates views and tables for backtesting a forex SVM strategy
22:34:27 SQL> 
22:34:27 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.75
22:34:28 SQL> 
22:34:28 SQL> -- I created di5min here:
22:34:28 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
22:34:28 SQL> 
22:34:28 SQL> CREATE OR REPLACE VIEW svm6102 AS
22:34:28   2  SELECT
22:34:28   3  pair
22:34:28   4  ,ydate
22:34:28   5  ,prdate
22:34:28   6  ,rownum rnum -- acts as t in my time-series
22:34:28   7  ,clse
22:34:28   8  -- Derive a bunch of attributes from clse, the latest price:
22:34:28   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
22:34:28  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
22:34:28  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
22:34:28  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
22:34:28  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
22:34:28  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
22:34:28  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
22:34:28  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
22:34:28  17  --
22:34:28  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
22:34:28  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
22:34:28  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
22:34:28  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
22:34:28  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
22:34:28  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
22:34:28  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
22:34:28  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
22:34:28  26  --
22:34:28  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
22:34:28  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
22:34:28  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
22:34:28  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
22:34:28  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
22:34:28  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
22:34:28  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
22:34:28  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
22:34:28  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
22:34:28  36  FROM di5min WHERE pair LIKE'%jpy%'
22:34:28  37  AND ydate > sysdate - 95
22:34:28  38  ORDER BY ydate
22:34:28  39  /

View created.

Elapsed: 00:00:00.04
22:34:28 SQL> 
22:34:28 SQL> -- rpt
22:34:28 SQL> 
22:34:28 SQL> SELECT
22:34:28   2  pair
22:34:28   3  ,COUNT(pair)
22:34:28   4  ,MIN(clse),MAX(clse)
22:34:28   5  ,MIN(avg6),MAX(avg6)
22:34:28   6  ,MIN(ydate),MAX(ydate)
22:34:28   7  FROM svm6102
22:34:28   8  GROUP BY pair
22:34:28   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_jpy       19836	 80.25	   84.485 80.3595205 84.3326667 2010-09-26 22:35:01 2010-12-30 22:30:00

Elapsed: 00:00:00.91
22:34:29 SQL> 
22:34:29 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
22:34:29 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.17
22:34:29 SQL> CREATE TABLE svm6122 COMPRESS AS
22:34:29   2  SELECT
22:34:29   3  pair
22:34:29   4  ,ydate
22:34:29   5  ,prdate
22:34:29   6  ,clse
22:34:29   7  -- g6 is important. I want to predict g6:
22:34:29   8  ,ld6 - clse g6
22:34:29   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
22:34:29  10  -- I want more attributes from the ones I derived above:
22:34:29  11  -- clse relation to moving-min
22:34:29  12  ,clse-min4  cm4
22:34:29  13  ,clse-min6  cm6
22:34:29  14  ,clse-min8  cm8
22:34:29  15  ,clse-min10 cm10
22:34:29  16  ,clse-min12 cm12
22:34:29  17  ,clse-min14 cm14
22:34:29  18  ,clse-min16 cm16
22:34:29  19  ,clse-min18 cm18
22:34:29  20  -- clse relation to moving-avg
22:34:29  21  ,clse-avg4  ca4
22:34:29  22  ,clse-avg6  ca6
22:34:29  23  ,clse-avg8  ca8
22:34:29  24  ,clse-avg10 ca10
22:34:29  25  ,clse-avg12 ca12
22:34:29  26  ,clse-avg14 ca14
22:34:29  27  ,clse-avg16 ca16
22:34:29  28  ,clse-avg18 ca18
22:34:29  29  -- clse relation to moving-max
22:34:29  30  ,clse-max4  cx4
22:34:29  31  ,clse-max6  cx6
22:34:29  32  ,clse-max8  cx8
22:34:29  33  ,clse-max10 cx10
22:34:29  34  ,clse-max12 cx12
22:34:29  35  ,clse-max14 cx14
22:34:29  36  ,clse-max16 cx16
22:34:29  37  ,clse-max18 cx18
22:34:29  38  -- Derive more attributes.
22:34:29  39  -- I want to use CORR() here to help SVM see the shape of the series.
22:34:29  40  -- But COVAR_POP is more stable:
22:34:29  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
22:34:29  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
22:34:29  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
22:34:29  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
22:34:29  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
22:34:29  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
22:34:29  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
22:34:29  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
22:34:29  49  -- Derive date related attributes:
22:34:29  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:34:29  51  ,0+TO_CHAR(ydate,'D')d
22:34:29  52  ,0+TO_CHAR(ydate,'W')w
22:34:29  53  -- mpm stands for minutes-past-midnight:
22:34:29  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:34:29  55  -- mph stands for minutes-past-hour:
22:34:29  56  ,0+TO_CHAR(ydate,'MI')mph
22:34:29  57  FROM svm6102
22:34:29  58  ORDER BY ydate
22:34:29  59  /

Table created.

Elapsed: 00:00:02.16
22:34:31 SQL> 
22:34:31 SQL> -- rpt
22:34:31 SQL> 
22:34:31 SQL> SELECT
22:34:31   2  pair
22:34:31   3  ,COUNT(pair)
22:34:31   4  ,MIN(clse),MAX(clse)
22:34:31   5  ,MIN(ydate),MAX(ydate)
22:34:31   6  FROM svm6122
22:34:31   7  GROUP BY pair
22:34:31   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_jpy       19836	 80.25	   84.485 2010-09-26 22:35:01 2010-12-30 22:30:00

Elapsed: 00:00:00.07
22:34:31 SQL> 
22:34:31 SQL> -- Prepare for derivation of NTILE based params:
22:34:31 SQL> 
22:34:31 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.32
22:34:32 SQL> CREATE TABLE svm6142 COMPRESS AS
22:34:32   2  SELECT
22:34:32   3  pair
22:34:32   4  ,ydate
22:34:32   5  ,prdate
22:34:32   6  ,clse
22:34:32   7  ,g6
22:34:32   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
22:34:32   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
22:34:32  10  ,CASE WHEN trend IS NULL THEN 1
22:34:32  11  	    WHEN trend =0      THEN 1
22:34:32  12  	    ELSE trend END trend
22:34:32  13  ,cm4
22:34:32  14  ,cm6
22:34:32  15  ,cm8
22:34:32  16  ,cm10
22:34:32  17  ,cm12
22:34:32  18  ,cm14
22:34:32  19  ,cm16
22:34:32  20  ,cm18
22:34:32  21  --
22:34:32  22  ,ca4
22:34:32  23  ,ca6
22:34:32  24  ,ca8
22:34:32  25  ,ca10
22:34:32  26  ,ca12
22:34:32  27  ,ca14
22:34:32  28  ,ca16
22:34:32  29  ,ca18
22:34:32  30  --
22:34:32  31  ,cx4
22:34:32  32  ,cx6
22:34:32  33  ,cx8
22:34:32  34  ,cx10
22:34:32  35  ,cx12
22:34:32  36  ,cx14
22:34:32  37  ,cx16
22:34:32  38  ,cx18
22:34:32  39  --
22:34:32  40  ,crr4
22:34:32  41  ,crr6
22:34:32  42  ,crr8
22:34:32  43  ,crr10
22:34:32  44  ,crr12
22:34:32  45  ,crr14
22:34:32  46  ,crr16
22:34:32  47  ,crr18
22:34:32  48  --
22:34:32  49  ,hh
22:34:32  50  ,d
22:34:32  51  ,w
22:34:32  52  ,mpm
22:34:32  53  ,mph
22:34:32  54  FROM svm6122
22:34:32  55  ORDER BY ydate
22:34:32  56  /

Table created.

Elapsed: 00:00:00.36
22:34:32 SQL> 
22:34:32 SQL> -- rpt
22:34:32 SQL> 
22:34:32 SQL> SELECT
22:34:32   2  pair
22:34:32   3  ,trend
22:34:32   4  ,gatt
22:34:32   5  ,COUNT(pair)
22:34:32   6  ,AVG(g6)
22:34:32   7  FROM svm6142
22:34:32   8  GROUP BY pair,trend,gatt
22:34:32   9  ORDER BY pair,trend,gatt
22:34:32  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5396 -.16523752
usd_jpy 	-1 up	      5046 .162199069
usd_jpy 	-1		19
usd_jpy 	 1 nup	      5171 -.15527754
usd_jpy 	 1 up	      4151  .16523858
usd_jpy 	 1		53

6 rows selected.

Elapsed: 00:00:00.06
22:34:32 SQL> 
22:34:32 SQL> 
22:34:32 SQL> -- Derive NTILE based params:
22:34:32 SQL> 
22:34:32 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.35
22:34:33 SQL> CREATE TABLE svm6162 COMPRESS AS
22:34:33   2  SELECT
22:34:33   3  pair
22:34:33   4  ,ydate
22:34:33   5  ,prdate
22:34:33   6  ,clse
22:34:33   7  ,g6
22:34:33   8  ,gatt
22:34:33   9  ,gattn
22:34:33  10  ,trend
22:34:33  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
22:34:33  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
22:34:33  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
22:34:33  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
22:34:33  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
22:34:33  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
22:34:33  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
22:34:33  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
22:34:33  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
22:34:33  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
22:34:33  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
22:34:33  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
22:34:33  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
22:34:33  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
22:34:33  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
22:34:33  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
22:34:33  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
22:34:33  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
22:34:33  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
22:34:33  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
22:34:33  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
22:34:33  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
22:34:33  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
22:34:33  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
22:34:33  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
22:34:33  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
22:34:33  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
22:34:33  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
22:34:33  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
22:34:33  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
22:34:33  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
22:34:33  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
22:34:33  43  ,hh  att32
22:34:33  44  ,d   att33
22:34:33  45  ,w   att34
22:34:33  46  ,mpm att35
22:34:33  47  ,mph att36
22:34:33  48  ,trend att37
22:34:33  49  FROM svm6142
22:34:33  50  ORDER BY ydate
22:34:33  51  /

Table created.

Elapsed: 00:00:04.80
22:34:37 SQL> 
22:34:37 SQL> -- rpt
22:34:37 SQL> 
22:34:37 SQL> SELECT
22:34:37   2  pair
22:34:37   3  ,trend
22:34:37   4  ,gatt
22:34:37   5  ,COUNT(pair)
22:34:37   6  ,AVG(g6)
22:34:37   7  FROM svm6162
22:34:37   8  GROUP BY pair,trend,gatt
22:34:37   9  ORDER BY pair,trend,gatt
22:34:37  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5396 -.16523752
usd_jpy 	-1 up	      5046 .162199069
usd_jpy 	-1		19
usd_jpy 	 1 nup	      5171 -.15527754
usd_jpy 	 1 up	      4151  .16523858
usd_jpy 	 1		53

6 rows selected.

Elapsed: 00:00:00.03
22:34:37 SQL> 
22:34:37 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
22:34:38 SQL> CREATE TABLE modsrc COMPRESS AS
22:34:38   2  SELECT
22:34:38   3  pair
22:34:38   4  ,ydate
22:34:38   5  ,prdate
22:34:38   6  ,trend
22:34:38   7  ,g6
22:34:38   8  ,gatt
22:34:38   9  ,gattn
22:34:38  10  FROM svm6162
22:34:38  11  /

Table created.

Elapsed: 00:00:00.08
22:34:38 SQL> 
22:34:38 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.28
22:34:38 SQL> 
22:34:38 SQL> DROP   TABLE jpy_ms610 ;

Table dropped.

Elapsed: 00:00:00.18
22:34:38 SQL> CREATE TABLE jpy_ms610 COMPRESS AS
22:34:38   2  SELECT
22:34:38   3  ydate
22:34:38   4  ,trend jpy_trend
22:34:38   5  ,g6    jpy_g6
22:34:38   6  ,gatt  jpy_gatt
22:34:38   7  ,gattn jpy_gattn
22:34:38   8  FROM modsrc
22:34:38   9  /

Table created.

Elapsed: 00:00:00.09
22:34:38 SQL> 
22:34:38 SQL> ANALYZE TABLE jpy_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
22:34:38 SQL> 
22:34:38 SQL> -- I need a copy of the attributes:
22:34:38 SQL> 
22:34:38 SQL> 
22:34:38 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.04
22:34:38 SQL> CREATE TABLE jpy_att COMPRESS AS
22:34:38   2  SELECT
22:34:38   3  ydate
22:34:38   4  ,att00 jpy_att00
22:34:38   5  ,att01 jpy_att01
22:34:38   6  ,att02 jpy_att02
22:34:38   7  ,att03 jpy_att03
22:34:38   8  ,att04 jpy_att04
22:34:38   9  ,att05 jpy_att05
22:34:38  10  ,att06 jpy_att06
22:34:38  11  ,att07 jpy_att07
22:34:38  12  ,att08 jpy_att08
22:34:38  13  ,att09 jpy_att09
22:34:38  14  ,att10 jpy_att10
22:34:38  15  ,att11 jpy_att11
22:34:38  16  ,att12 jpy_att12
22:34:38  17  ,att13 jpy_att13
22:34:38  18  ,att14 jpy_att14
22:34:38  19  ,att15 jpy_att15
22:34:38  20  ,att16 jpy_att16
22:34:38  21  ,att17 jpy_att17
22:34:38  22  ,att18 jpy_att18
22:34:38  23  ,att19 jpy_att19
22:34:38  24  ,att20 jpy_att20
22:34:38  25  ,att21 jpy_att21
22:34:38  26  ,att22 jpy_att22
22:34:38  27  ,att23 jpy_att23
22:34:38  28  ,att24 jpy_att24
22:34:38  29  ,att25 jpy_att25
22:34:38  30  ,att26 jpy_att26
22:34:38  31  ,att27 jpy_att27
22:34:38  32  ,att28 jpy_att28
22:34:38  33  ,att29 jpy_att29
22:34:38  34  ,att30 jpy_att30
22:34:38  35  ,att31 jpy_att31
22:34:38  36  ,att32 jpy_att32
22:34:38  37  ,att33 jpy_att33
22:34:38  38  ,att34 jpy_att34
22:34:38  39  ,att35 jpy_att35
22:34:38  40  ,att36 jpy_att36
22:34:38  41  ,att37 jpy_att37
22:34:38  42  FROM svm6162
22:34:38  43  /

Table created.

Elapsed: 00:00:00.16
22:34:39 SQL> 
22:34:39 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.48
22:34:39 SQL> 
22:34:39 SQL> -- rpt
22:34:39 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19836

Elapsed: 00:00:00.90
22:34:40 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     19836

Elapsed: 00:00:00.00
22:34:40 SQL> 
22:34:40 SQL> --
22:34:40 SQL> -- cad610.sql
22:34:40 SQL> --
22:34:40 SQL> 
22:34:40 SQL> -- Creates views and tables for backtesting a forex SVM strategy
22:34:40 SQL> 
22:34:40 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.36
22:34:40 SQL> 
22:34:40 SQL> -- I created di5min here:
22:34:40 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
22:34:40 SQL> 
22:34:40 SQL> CREATE OR REPLACE VIEW svm6102 AS
22:34:40   2  SELECT
22:34:40   3  pair
22:34:40   4  ,ydate
22:34:40   5  ,prdate
22:34:40   6  ,rownum rnum -- acts as t in my time-series
22:34:40   7  ,clse
22:34:40   8  -- Derive a bunch of attributes from clse, the latest price:
22:34:40   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
22:34:40  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
22:34:40  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
22:34:40  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
22:34:40  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
22:34:40  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
22:34:40  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
22:34:40  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
22:34:40  17  --
22:34:40  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
22:34:40  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
22:34:40  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
22:34:40  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
22:34:40  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
22:34:40  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
22:34:40  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
22:34:40  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
22:34:40  26  --
22:34:40  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
22:34:40  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
22:34:40  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
22:34:40  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
22:34:40  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
22:34:40  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
22:34:40  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
22:34:40  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
22:34:40  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
22:34:40  36  FROM di5min WHERE pair LIKE'%cad%'
22:34:40  37  AND ydate > sysdate - 95
22:34:40  38  ORDER BY ydate
22:34:40  39  /

View created.

Elapsed: 00:00:00.05
22:34:40 SQL> 
22:34:40 SQL> -- rpt
22:34:40 SQL> 
22:34:40 SQL> SELECT
22:34:40   2  pair
22:34:40   3  ,COUNT(pair)
22:34:40   4  ,MIN(clse),MAX(clse)
22:34:40   5  ,MIN(avg6),MAX(avg6)
22:34:40   6  ,MIN(ydate),MAX(ydate)
22:34:40   7  FROM svm6102
22:34:40   8  GROUP BY pair
22:34:40   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_cad       19836	.99755	    1.036 .998845205 1.03336849 2010-09-26 22:35:01 2010-12-30 22:30:00

Elapsed: 00:00:00.84
22:34:41 SQL> 
22:34:41 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
22:34:41 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.32
22:34:41 SQL> CREATE TABLE svm6122 COMPRESS AS
22:34:41   2  SELECT
22:34:41   3  pair
22:34:41   4  ,ydate
22:34:41   5  ,prdate
22:34:41   6  ,clse
22:34:41   7  -- g6 is important. I want to predict g6:
22:34:41   8  ,ld6 - clse g6
22:34:41   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
22:34:41  10  -- I want more attributes from the ones I derived above:
22:34:41  11  -- clse relation to moving-min
22:34:41  12  ,clse-min4  cm4
22:34:41  13  ,clse-min6  cm6
22:34:41  14  ,clse-min8  cm8
22:34:41  15  ,clse-min10 cm10
22:34:41  16  ,clse-min12 cm12
22:34:41  17  ,clse-min14 cm14
22:34:41  18  ,clse-min16 cm16
22:34:41  19  ,clse-min18 cm18
22:34:41  20  -- clse relation to moving-avg
22:34:41  21  ,clse-avg4  ca4
22:34:41  22  ,clse-avg6  ca6
22:34:41  23  ,clse-avg8  ca8
22:34:41  24  ,clse-avg10 ca10
22:34:41  25  ,clse-avg12 ca12
22:34:41  26  ,clse-avg14 ca14
22:34:41  27  ,clse-avg16 ca16
22:34:41  28  ,clse-avg18 ca18
22:34:41  29  -- clse relation to moving-max
22:34:41  30  ,clse-max4  cx4
22:34:41  31  ,clse-max6  cx6
22:34:41  32  ,clse-max8  cx8
22:34:41  33  ,clse-max10 cx10
22:34:41  34  ,clse-max12 cx12
22:34:41  35  ,clse-max14 cx14
22:34:41  36  ,clse-max16 cx16
22:34:41  37  ,clse-max18 cx18
22:34:41  38  -- Derive more attributes.
22:34:41  39  -- I want to use CORR() here to help SVM see the shape of the series.
22:34:41  40  -- But COVAR_POP is more stable:
22:34:41  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
22:34:41  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
22:34:41  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
22:34:41  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
22:34:41  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
22:34:41  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
22:34:41  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
22:34:41  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
22:34:41  49  -- Derive date related attributes:
22:34:41  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:34:41  51  ,0+TO_CHAR(ydate,'D')d
22:34:41  52  ,0+TO_CHAR(ydate,'W')w
22:34:41  53  -- mpm stands for minutes-past-midnight:
22:34:41  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:34:41  55  -- mph stands for minutes-past-hour:
22:34:41  56  ,0+TO_CHAR(ydate,'MI')mph
22:34:41  57  FROM svm6102
22:34:41  58  ORDER BY ydate
22:34:41  59  /

Table created.

Elapsed: 00:00:02.18
22:34:44 SQL> 
22:34:44 SQL> -- rpt
22:34:44 SQL> 
22:34:44 SQL> SELECT
22:34:44   2  pair
22:34:44   3  ,COUNT(pair)
22:34:44   4  ,MIN(clse),MAX(clse)
22:34:44   5  ,MIN(ydate),MAX(ydate)
22:34:44   6  FROM svm6122
22:34:44   7  GROUP BY pair
22:34:44   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_cad       19836	.99755	    1.036 2010-09-26 22:35:01 2010-12-30 22:30:00

Elapsed: 00:00:00.04
22:34:44 SQL> 
22:34:44 SQL> -- Prepare for derivation of NTILE based params:
22:34:44 SQL> 
22:34:44 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.17
22:34:44 SQL> CREATE TABLE svm6142 COMPRESS AS
22:34:44   2  SELECT
22:34:44   3  pair
22:34:44   4  ,ydate
22:34:44   5  ,prdate
22:34:44   6  ,clse
22:34:44   7  ,g6
22:34:44   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
22:34:44   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
22:34:44  10  ,CASE WHEN trend IS NULL THEN 1
22:34:44  11  	    WHEN trend =0      THEN 1
22:34:44  12  	    ELSE trend END trend
22:34:44  13  ,cm4
22:34:44  14  ,cm6
22:34:44  15  ,cm8
22:34:44  16  ,cm10
22:34:44  17  ,cm12
22:34:44  18  ,cm14
22:34:44  19  ,cm16
22:34:44  20  ,cm18
22:34:44  21  --
22:34:44  22  ,ca4
22:34:44  23  ,ca6
22:34:44  24  ,ca8
22:34:44  25  ,ca10
22:34:44  26  ,ca12
22:34:44  27  ,ca14
22:34:44  28  ,ca16
22:34:44  29  ,ca18
22:34:44  30  --
22:34:44  31  ,cx4
22:34:44  32  ,cx6
22:34:44  33  ,cx8
22:34:44  34  ,cx10
22:34:44  35  ,cx12
22:34:44  36  ,cx14
22:34:44  37  ,cx16
22:34:44  38  ,cx18
22:34:44  39  --
22:34:44  40  ,crr4
22:34:44  41  ,crr6
22:34:44  42  ,crr8
22:34:44  43  ,crr10
22:34:44  44  ,crr12
22:34:44  45  ,crr14
22:34:44  46  ,crr16
22:34:44  47  ,crr18
22:34:44  48  --
22:34:44  49  ,hh
22:34:44  50  ,d
22:34:44  51  ,w
22:34:44  52  ,mpm
22:34:44  53  ,mph
22:34:44  54  FROM svm6122
22:34:44  55  ORDER BY ydate
22:34:44  56  /

Table created.

Elapsed: 00:00:00.38
22:34:44 SQL> 
22:34:44 SQL> -- rpt
22:34:44 SQL> 
22:34:44 SQL> SELECT
22:34:44   2  pair
22:34:44   3  ,trend
22:34:44   4  ,gatt
22:34:44   5  ,COUNT(pair)
22:34:44   6  ,AVG(g6)
22:34:44   7  FROM svm6142
22:34:44   8  GROUP BY pair,trend,gatt
22:34:44   9  ORDER BY pair,trend,gatt
22:34:44  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7324 -.00130613
usd_cad 	-1 up	      3153 .003080158
usd_cad 	-1		35
usd_cad 	 1 nup	      6795 -.00159923
usd_cad 	 1 up	      2492 .003595539
usd_cad 	 1		37

6 rows selected.

Elapsed: 00:00:00.05
22:34:44 SQL> 
22:34:44 SQL> 
22:34:44 SQL> -- Derive NTILE based params:
22:34:44 SQL> 
22:34:44 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:01.56
22:34:46 SQL> CREATE TABLE svm6162 COMPRESS AS
22:34:46   2  SELECT
22:34:46   3  pair
22:34:46   4  ,ydate
22:34:46   5  ,prdate
22:34:46   6  ,clse
22:34:46   7  ,g6
22:34:46   8  ,gatt
22:34:46   9  ,gattn
22:34:46  10  ,trend
22:34:46  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
22:34:46  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
22:34:46  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
22:34:46  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
22:34:46  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
22:34:46  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
22:34:46  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
22:34:46  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
22:34:46  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
22:34:46  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
22:34:46  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
22:34:46  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
22:34:46  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
22:34:46  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
22:34:46  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
22:34:46  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
22:34:46  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
22:34:46  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
22:34:46  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
22:34:46  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
22:34:46  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
22:34:46  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
22:34:46  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
22:34:46  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
22:34:46  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
22:34:46  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
22:34:46  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
22:34:46  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
22:34:46  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
22:34:46  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
22:34:46  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
22:34:46  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
22:34:46  43  ,hh  att32
22:34:46  44  ,d   att33
22:34:46  45  ,w   att34
22:34:46  46  ,mpm att35
22:34:46  47  ,mph att36
22:34:46  48  ,trend att37
22:34:46  49  FROM svm6142
22:34:46  50  ORDER BY ydate
22:34:46  51  /

Table created.

Elapsed: 00:00:04.80
22:34:51 SQL> 
22:34:51 SQL> -- rpt
22:34:51 SQL> 
22:34:51 SQL> SELECT
22:34:51   2  pair
22:34:51   3  ,trend
22:34:51   4  ,gatt
22:34:51   5  ,COUNT(pair)
22:34:51   6  ,AVG(g6)
22:34:51   7  FROM svm6162
22:34:51   8  GROUP BY pair,trend,gatt
22:34:51   9  ORDER BY pair,trend,gatt
22:34:51  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7324 -.00130613
usd_cad 	-1 up	      3153 .003080158
usd_cad 	-1		35
usd_cad 	 1 nup	      6795 -.00159923
usd_cad 	 1 up	      2492 .003595539
usd_cad 	 1		37

6 rows selected.

Elapsed: 00:00:00.02
22:34:51 SQL> 
22:34:51 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.17
22:34:51 SQL> CREATE TABLE modsrc COMPRESS AS
22:34:51   2  SELECT
22:34:51   3  pair
22:34:51   4  ,ydate
22:34:51   5  ,prdate
22:34:51   6  ,trend
22:34:51   7  ,g6
22:34:51   8  ,gatt
22:34:51   9  ,gattn
22:34:51  10  FROM svm6162
22:34:51  11  /

Table created.

Elapsed: 00:00:00.08
22:34:51 SQL> 
22:34:51 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.25
22:34:51 SQL> 
22:34:51 SQL> DROP   TABLE cad_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
22:34:51 SQL> CREATE TABLE cad_ms610 COMPRESS AS
22:34:51   2  SELECT
22:34:51   3  ydate
22:34:51   4  ,trend cad_trend
22:34:51   5  ,g6    cad_g6
22:34:51   6  ,gatt  cad_gatt
22:34:51   7  ,gattn cad_gattn
22:34:51   8  FROM modsrc
22:34:51   9  /

Table created.

Elapsed: 00:00:00.08
22:34:51 SQL> 
22:34:51 SQL> ANALYZE TABLE cad_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
22:34:52 SQL> 
22:34:52 SQL> -- I need a copy of the attributes:
22:34:52 SQL> 
22:34:52 SQL> 
22:34:52 SQL> DROP   TABLE cad_att;

Table dropped.

Elapsed: 00:00:00.05
22:34:52 SQL> CREATE TABLE cad_att COMPRESS AS
22:34:52   2  SELECT
22:34:52   3  ydate
22:34:52   4  ,att00 cad_att00
22:34:52   5  ,att01 cad_att01
22:34:52   6  ,att02 cad_att02
22:34:52   7  ,att03 cad_att03
22:34:52   8  ,att04 cad_att04
22:34:52   9  ,att05 cad_att05
22:34:52  10  ,att06 cad_att06
22:34:52  11  ,att07 cad_att07
22:34:52  12  ,att08 cad_att08
22:34:52  13  ,att09 cad_att09
22:34:52  14  ,att10 cad_att10
22:34:52  15  ,att11 cad_att11
22:34:52  16  ,att12 cad_att12
22:34:52  17  ,att13 cad_att13
22:34:52  18  ,att14 cad_att14
22:34:52  19  ,att15 cad_att15
22:34:52  20  ,att16 cad_att16
22:34:52  21  ,att17 cad_att17
22:34:52  22  ,att18 cad_att18
22:34:52  23  ,att19 cad_att19
22:34:52  24  ,att20 cad_att20
22:34:52  25  ,att21 cad_att21
22:34:52  26  ,att22 cad_att22
22:34:52  27  ,att23 cad_att23
22:34:52  28  ,att24 cad_att24
22:34:52  29  ,att25 cad_att25
22:34:52  30  ,att26 cad_att26
22:34:52  31  ,att27 cad_att27
22:34:52  32  ,att28 cad_att28
22:34:52  33  ,att29 cad_att29
22:34:52  34  ,att30 cad_att30
22:34:52  35  ,att31 cad_att31
22:34:52  36  ,att32 cad_att32
22:34:52  37  ,att33 cad_att33
22:34:52  38  ,att34 cad_att34
22:34:52  39  ,att35 cad_att35
22:34:52  40  ,att36 cad_att36
22:34:52  41  ,att37 cad_att37
22:34:52  42  FROM svm6162
22:34:52  43  /

Table created.

Elapsed: 00:00:00.18
22:34:52 SQL> 
22:34:52 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.51
22:34:52 SQL> 
22:34:52 SQL> -- rpt
22:34:52 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19836

Elapsed: 00:00:00.85
22:34:53 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
     19836

Elapsed: 00:00:00.00
22:34:53 SQL> 
22:34:53 SQL> --
22:34:53 SQL> -- chf610.sql
22:34:53 SQL> --
22:34:53 SQL> 
22:34:53 SQL> -- Creates views and tables for backtesting a forex SVM strategy
22:34:53 SQL> 
22:34:53 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.41
22:34:54 SQL> 
22:34:54 SQL> -- I created di5min here:
22:34:54 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
22:34:54 SQL> 
22:34:54 SQL> CREATE OR REPLACE VIEW svm6102 AS
22:34:54   2  SELECT
22:34:54   3  pair
22:34:54   4  ,ydate
22:34:54   5  ,prdate
22:34:54   6  ,rownum rnum -- acts as t in my time-series
22:34:54   7  ,clse
22:34:54   8  -- Derive a bunch of attributes from clse, the latest price:
22:34:54   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
22:34:54  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
22:34:54  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
22:34:54  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
22:34:54  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
22:34:54  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
22:34:54  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
22:34:54  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
22:34:54  17  --
22:34:54  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
22:34:54  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
22:34:54  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
22:34:54  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
22:34:54  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
22:34:54  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
22:34:54  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
22:34:54  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
22:34:54  26  --
22:34:54  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
22:34:54  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
22:34:54  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
22:34:54  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
22:34:54  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
22:34:54  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
22:34:54  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
22:34:54  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
22:34:54  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
22:34:54  36  FROM di5min WHERE pair LIKE'%chf%'
22:34:54  37  AND ydate > sysdate - 95
22:34:54  38  ORDER BY ydate
22:34:54  39  /

View created.

Elapsed: 00:00:00.05
22:34:54 SQL> 
22:34:54 SQL> -- rpt
22:34:54 SQL> 
22:34:54 SQL> SELECT
22:34:54   2  pair
22:34:54   3  ,COUNT(pair)
22:34:54   4  ,MIN(clse),MAX(clse)
22:34:54   5  ,MIN(avg6),MAX(avg6)
22:34:54   6  ,MIN(ydate),MAX(ydate)
22:34:54   7  FROM svm6102
22:34:54   8  GROUP BY pair
22:34:54   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_chf       19839    .935075	  1.00635 .936337158 1.00498151 2010-09-26 22:35:01 2010-12-30 22:30:00

Elapsed: 00:00:00.85
22:34:54 SQL> 
22:34:54 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
22:34:54 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.24
22:34:55 SQL> CREATE TABLE svm6122 COMPRESS AS
22:34:55   2  SELECT
22:34:55   3  pair
22:34:55   4  ,ydate
22:34:55   5  ,prdate
22:34:55   6  ,clse
22:34:55   7  -- g6 is important. I want to predict g6:
22:34:55   8  ,ld6 - clse g6
22:34:55   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
22:34:55  10  -- I want more attributes from the ones I derived above:
22:34:55  11  -- clse relation to moving-min
22:34:55  12  ,clse-min4  cm4
22:34:55  13  ,clse-min6  cm6
22:34:55  14  ,clse-min8  cm8
22:34:55  15  ,clse-min10 cm10
22:34:55  16  ,clse-min12 cm12
22:34:55  17  ,clse-min14 cm14
22:34:55  18  ,clse-min16 cm16
22:34:55  19  ,clse-min18 cm18
22:34:55  20  -- clse relation to moving-avg
22:34:55  21  ,clse-avg4  ca4
22:34:55  22  ,clse-avg6  ca6
22:34:55  23  ,clse-avg8  ca8
22:34:55  24  ,clse-avg10 ca10
22:34:55  25  ,clse-avg12 ca12
22:34:55  26  ,clse-avg14 ca14
22:34:55  27  ,clse-avg16 ca16
22:34:55  28  ,clse-avg18 ca18
22:34:55  29  -- clse relation to moving-max
22:34:55  30  ,clse-max4  cx4
22:34:55  31  ,clse-max6  cx6
22:34:55  32  ,clse-max8  cx8
22:34:55  33  ,clse-max10 cx10
22:34:55  34  ,clse-max12 cx12
22:34:55  35  ,clse-max14 cx14
22:34:55  36  ,clse-max16 cx16
22:34:55  37  ,clse-max18 cx18
22:34:55  38  -- Derive more attributes.
22:34:55  39  -- I want to use CORR() here to help SVM see the shape of the series.
22:34:55  40  -- But COVAR_POP is more stable:
22:34:55  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
22:34:55  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
22:34:55  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
22:34:55  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
22:34:55  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
22:34:55  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
22:34:55  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
22:34:55  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
22:34:55  49  -- Derive date related attributes:
22:34:55  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:34:55  51  ,0+TO_CHAR(ydate,'D')d
22:34:55  52  ,0+TO_CHAR(ydate,'W')w
22:34:55  53  -- mpm stands for minutes-past-midnight:
22:34:55  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:34:55  55  -- mph stands for minutes-past-hour:
22:34:55  56  ,0+TO_CHAR(ydate,'MI')mph
22:34:55  57  FROM svm6102
22:34:55  58  ORDER BY ydate
22:34:55  59  /

Table created.

Elapsed: 00:00:02.07
22:34:57 SQL> 
22:34:57 SQL> -- rpt
22:34:57 SQL> 
22:34:57 SQL> SELECT
22:34:57   2  pair
22:34:57   3  ,COUNT(pair)
22:34:57   4  ,MIN(clse),MAX(clse)
22:34:57   5  ,MIN(ydate),MAX(ydate)
22:34:57   6  FROM svm6122
22:34:57   7  GROUP BY pair
22:34:57   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_chf       19839    .935075	  1.00635 2010-09-26 22:35:01 2010-12-30 22:30:00

Elapsed: 00:00:00.05
22:34:57 SQL> 
22:34:57 SQL> -- Prepare for derivation of NTILE based params:
22:34:57 SQL> 
22:34:57 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.17
22:34:57 SQL> CREATE TABLE svm6142 COMPRESS AS
22:34:57   2  SELECT
22:34:57   3  pair
22:34:57   4  ,ydate
22:34:57   5  ,prdate
22:34:57   6  ,clse
22:34:57   7  ,g6
22:34:57   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
22:34:57   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
22:34:57  10  ,CASE WHEN trend IS NULL THEN 1
22:34:57  11  	    WHEN trend =0      THEN 1
22:34:57  12  	    ELSE trend END trend
22:34:57  13  ,cm4
22:34:57  14  ,cm6
22:34:57  15  ,cm8
22:34:57  16  ,cm10
22:34:57  17  ,cm12
22:34:57  18  ,cm14
22:34:57  19  ,cm16
22:34:57  20  ,cm18
22:34:57  21  --
22:34:57  22  ,ca4
22:34:57  23  ,ca6
22:34:57  24  ,ca8
22:34:57  25  ,ca10
22:34:57  26  ,ca12
22:34:57  27  ,ca14
22:34:57  28  ,ca16
22:34:57  29  ,ca18
22:34:57  30  --
22:34:57  31  ,cx4
22:34:57  32  ,cx6
22:34:57  33  ,cx8
22:34:57  34  ,cx10
22:34:57  35  ,cx12
22:34:57  36  ,cx14
22:34:57  37  ,cx16
22:34:57  38  ,cx18
22:34:57  39  --
22:34:57  40  ,crr4
22:34:57  41  ,crr6
22:34:57  42  ,crr8
22:34:57  43  ,crr10
22:34:57  44  ,crr12
22:34:57  45  ,crr14
22:34:57  46  ,crr16
22:34:57  47  ,crr18
22:34:57  48  --
22:34:57  49  ,hh
22:34:57  50  ,d
22:34:57  51  ,w
22:34:57  52  ,mpm
22:34:57  53  ,mph
22:34:57  54  FROM svm6122
22:34:57  55  ORDER BY ydate
22:34:57  56  /

Table created.

Elapsed: 00:00:00.37
22:34:57 SQL> 
22:34:57 SQL> -- rpt
22:34:57 SQL> 
22:34:57 SQL> SELECT
22:34:57   2  pair
22:34:57   3  ,trend
22:34:57   4  ,gatt
22:34:57   5  ,COUNT(pair)
22:34:57   6  ,AVG(g6)
22:34:57   7  FROM svm6142
22:34:57   8  GROUP BY pair,trend,gatt
22:34:57   9  ORDER BY pair,trend,gatt
22:34:57  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7313 -.00196378
usd_chf 	-1 up	      3177 .003893858
usd_chf 	-1		72
usd_chf 	 1 nup	      6722 -.00163005
usd_chf 	 1 up	      2555 .003693704

Elapsed: 00:00:00.04
22:34:57 SQL> 
22:34:57 SQL> 
22:34:57 SQL> -- Derive NTILE based params:
22:34:57 SQL> 
22:34:57 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.13
22:34:58 SQL> CREATE TABLE svm6162 COMPRESS AS
22:34:58   2  SELECT
22:34:58   3  pair
22:34:58   4  ,ydate
22:34:58   5  ,prdate
22:34:58   6  ,clse
22:34:58   7  ,g6
22:34:58   8  ,gatt
22:34:58   9  ,gattn
22:34:58  10  ,trend
22:34:58  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
22:34:58  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
22:34:58  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
22:34:58  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
22:34:58  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
22:34:58  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
22:34:58  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
22:34:58  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
22:34:58  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
22:34:58  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
22:34:58  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
22:34:58  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
22:34:58  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
22:34:58  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
22:34:58  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
22:34:58  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
22:34:58  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
22:34:58  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
22:34:58  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
22:34:58  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
22:34:58  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
22:34:58  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
22:34:58  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
22:34:58  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
22:34:58  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
22:34:58  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
22:34:58  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
22:34:58  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
22:34:58  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
22:34:58  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
22:34:58  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
22:34:58  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
22:34:58  43  ,hh  att32
22:34:58  44  ,d   att33
22:34:58  45  ,w   att34
22:34:58  46  ,mpm att35
22:34:58  47  ,mph att36
22:34:58  48  ,trend att37
22:34:58  49  FROM svm6142
22:34:58  50  ORDER BY ydate
22:34:58  51  /

Table created.

Elapsed: 00:00:04.78
22:35:02 SQL> 
22:35:02 SQL> -- rpt
22:35:02 SQL> 
22:35:02 SQL> SELECT
22:35:02   2  pair
22:35:02   3  ,trend
22:35:02   4  ,gatt
22:35:02   5  ,COUNT(pair)
22:35:02   6  ,AVG(g6)
22:35:02   7  FROM svm6162
22:35:02   8  GROUP BY pair,trend,gatt
22:35:02   9  ORDER BY pair,trend,gatt
22:35:02  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7313 -.00196378
usd_chf 	-1 up	      3177 .003893858
usd_chf 	-1		72
usd_chf 	 1 nup	      6722 -.00163005
usd_chf 	 1 up	      2555 .003693704

Elapsed: 00:00:00.03
22:35:02 SQL> 
22:35:02 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.20
22:35:03 SQL> CREATE TABLE modsrc COMPRESS AS
22:35:03   2  SELECT
22:35:03   3  pair
22:35:03   4  ,ydate
22:35:03   5  ,prdate
22:35:03   6  ,trend
22:35:03   7  ,g6
22:35:03   8  ,gatt
22:35:03   9  ,gattn
22:35:03  10  FROM svm6162
22:35:03  11  /

Table created.

Elapsed: 00:00:00.08
22:35:03 SQL> 
22:35:03 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
22:35:03 SQL> 
22:35:03 SQL> DROP   TABLE chf_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
22:35:03 SQL> CREATE TABLE chf_ms610 COMPRESS AS
22:35:03   2  SELECT
22:35:03   3  ydate
22:35:03   4  ,trend chf_trend
22:35:03   5  ,g6    chf_g6
22:35:03   6  ,gatt  chf_gatt
22:35:03   7  ,gattn chf_gattn
22:35:03   8  FROM modsrc
22:35:03   9  /

Table created.

Elapsed: 00:00:00.06
22:35:03 SQL> 
22:35:03 SQL> ANALYZE TABLE chf_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
22:35:03 SQL> 
22:35:03 SQL> -- I need a copy of the attributes:
22:35:03 SQL> 
22:35:03 SQL> 
22:35:03 SQL> DROP   TABLE chf_att;

Table dropped.

Elapsed: 00:00:00.05
22:35:03 SQL> CREATE TABLE chf_att COMPRESS AS
22:35:03   2  SELECT
22:35:03   3  ydate
22:35:03   4  ,att00 chf_att00
22:35:03   5  ,att01 chf_att01
22:35:03   6  ,att02 chf_att02
22:35:03   7  ,att03 chf_att03
22:35:03   8  ,att04 chf_att04
22:35:03   9  ,att05 chf_att05
22:35:03  10  ,att06 chf_att06
22:35:03  11  ,att07 chf_att07
22:35:03  12  ,att08 chf_att08
22:35:03  13  ,att09 chf_att09
22:35:03  14  ,att10 chf_att10
22:35:03  15  ,att11 chf_att11
22:35:03  16  ,att12 chf_att12
22:35:03  17  ,att13 chf_att13
22:35:03  18  ,att14 chf_att14
22:35:03  19  ,att15 chf_att15
22:35:03  20  ,att16 chf_att16
22:35:03  21  ,att17 chf_att17
22:35:03  22  ,att18 chf_att18
22:35:03  23  ,att19 chf_att19
22:35:03  24  ,att20 chf_att20
22:35:03  25  ,att21 chf_att21
22:35:03  26  ,att22 chf_att22
22:35:03  27  ,att23 chf_att23
22:35:03  28  ,att24 chf_att24
22:35:03  29  ,att25 chf_att25
22:35:03  30  ,att26 chf_att26
22:35:03  31  ,att27 chf_att27
22:35:03  32  ,att28 chf_att28
22:35:03  33  ,att29 chf_att29
22:35:03  34  ,att30 chf_att30
22:35:03  35  ,att31 chf_att31
22:35:03  36  ,att32 chf_att32
22:35:03  37  ,att33 chf_att33
22:35:03  38  ,att34 chf_att34
22:35:03  39  ,att35 chf_att35
22:35:03  40  ,att36 chf_att36
22:35:03  41  ,att37 chf_att37
22:35:03  42  FROM svm6162
22:35:03  43  /

Table created.

Elapsed: 00:00:00.16
22:35:03 SQL> 
22:35:03 SQL> ANALYZE TABLE chf_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
22:35:04 SQL> 
22:35:04 SQL> -- rpt
22:35:04 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19838

Elapsed: 00:00:00.84
22:35:05 SQL> SELECT COUNT(*)FROM chf_att;

  COUNT(*)
----------
     19839

Elapsed: 00:00:00.00
22:35:05 SQL> 
22:35:05 SQL> --
22:35:05 SQL> -- ech610.sql
22:35:05 SQL> --
22:35:05 SQL> 
22:35:05 SQL> -- Creates views and tables for backtesting a forex SVM strategy
22:35:05 SQL> 
22:35:05 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.38
22:35:05 SQL> 
22:35:05 SQL> -- I created di5min here:
22:35:05 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
22:35:05 SQL> 
22:35:05 SQL> CREATE OR REPLACE VIEW svm6102 AS
22:35:05   2  SELECT
22:35:05   3  pair
22:35:05   4  ,ydate
22:35:05   5  ,prdate
22:35:05   6  ,rownum rnum -- acts as t in my time-series
22:35:05   7  ,clse
22:35:05   8  -- Derive a bunch of attributes from clse, the latest price:
22:35:05   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
22:35:05  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
22:35:05  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
22:35:05  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
22:35:05  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
22:35:05  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
22:35:05  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
22:35:05  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
22:35:05  17  --
22:35:05  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
22:35:05  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
22:35:05  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
22:35:05  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
22:35:05  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
22:35:05  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
22:35:05  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
22:35:05  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
22:35:05  26  --
22:35:05  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
22:35:05  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
22:35:05  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
22:35:05  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
22:35:05  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
22:35:05  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
22:35:05  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
22:35:05  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
22:35:05  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
22:35:05  36  FROM di5min WHERE pair LIKE'%ech%'
22:35:05  37  AND ydate > sysdate - 95
22:35:05  38  ORDER BY ydate
22:35:05  39  /

View created.

Elapsed: 00:00:00.05
22:35:05 SQL> 
22:35:05 SQL> -- rpt
22:35:05 SQL> 
22:35:05 SQL> SELECT
22:35:05   2  pair
22:35:05   3  ,COUNT(pair)
22:35:05   4  ,MIN(clse),MAX(clse)
22:35:05   5  ,MIN(avg6),MAX(avg6)
22:35:05   6  ,MIN(ydate),MAX(ydate)
22:35:05   7  FROM svm6102
22:35:05   8  GROUP BY pair
22:35:05   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ech_usd       19837 1.24213032 1.38284305  1.2436053 1.37986485 2010-09-26 22:40:01 2010-12-30 22:30:00

Elapsed: 00:00:00.78
22:35:06 SQL> 
22:35:06 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
22:35:06 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.25
22:35:06 SQL> CREATE TABLE svm6122 COMPRESS AS
22:35:06   2  SELECT
22:35:06   3  pair
22:35:06   4  ,ydate
22:35:06   5  ,prdate
22:35:06   6  ,clse
22:35:06   7  -- g6 is important. I want to predict g6:
22:35:06   8  ,ld6 - clse g6
22:35:06   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
22:35:06  10  -- I want more attributes from the ones I derived above:
22:35:06  11  -- clse relation to moving-min
22:35:06  12  ,clse-min4  cm4
22:35:06  13  ,clse-min6  cm6
22:35:06  14  ,clse-min8  cm8
22:35:06  15  ,clse-min10 cm10
22:35:06  16  ,clse-min12 cm12
22:35:06  17  ,clse-min14 cm14
22:35:06  18  ,clse-min16 cm16
22:35:06  19  ,clse-min18 cm18
22:35:06  20  -- clse relation to moving-avg
22:35:06  21  ,clse-avg4  ca4
22:35:06  22  ,clse-avg6  ca6
22:35:06  23  ,clse-avg8  ca8
22:35:06  24  ,clse-avg10 ca10
22:35:06  25  ,clse-avg12 ca12
22:35:06  26  ,clse-avg14 ca14
22:35:06  27  ,clse-avg16 ca16
22:35:06  28  ,clse-avg18 ca18
22:35:06  29  -- clse relation to moving-max
22:35:06  30  ,clse-max4  cx4
22:35:06  31  ,clse-max6  cx6
22:35:06  32  ,clse-max8  cx8
22:35:06  33  ,clse-max10 cx10
22:35:06  34  ,clse-max12 cx12
22:35:06  35  ,clse-max14 cx14
22:35:06  36  ,clse-max16 cx16
22:35:06  37  ,clse-max18 cx18
22:35:06  38  -- Derive more attributes.
22:35:06  39  -- I want to use CORR() here to help SVM see the shape of the series.
22:35:06  40  -- But COVAR_POP is more stable:
22:35:06  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
22:35:06  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
22:35:06  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
22:35:06  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
22:35:06  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
22:35:06  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
22:35:06  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
22:35:06  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
22:35:06  49  -- Derive date related attributes:
22:35:06  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:35:06  51  ,0+TO_CHAR(ydate,'D')d
22:35:06  52  ,0+TO_CHAR(ydate,'W')w
22:35:06  53  -- mpm stands for minutes-past-midnight:
22:35:06  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:35:06  55  -- mph stands for minutes-past-hour:
22:35:06  56  ,0+TO_CHAR(ydate,'MI')mph
22:35:06  57  FROM svm6102
22:35:06  58  ORDER BY ydate
22:35:06  59  /

Table created.

Elapsed: 00:00:02.03
22:35:08 SQL> 
22:35:08 SQL> -- rpt
22:35:08 SQL> 
22:35:08 SQL> SELECT
22:35:08   2  pair
22:35:08   3  ,COUNT(pair)
22:35:08   4  ,MIN(clse),MAX(clse)
22:35:08   5  ,MIN(ydate),MAX(ydate)
22:35:08   6  FROM svm6122
22:35:08   7  GROUP BY pair
22:35:08   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ech_usd       19837 1.24213032 1.38284305 2010-09-26 22:40:01 2010-12-30 22:30:00

Elapsed: 00:00:00.04
22:35:08 SQL> 
22:35:08 SQL> -- Prepare for derivation of NTILE based params:
22:35:08 SQL> 
22:35:08 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.23
22:35:08 SQL> CREATE TABLE svm6142 COMPRESS AS
22:35:08   2  SELECT
22:35:08   3  pair
22:35:08   4  ,ydate
22:35:08   5  ,prdate
22:35:08   6  ,clse
22:35:08   7  ,g6
22:35:08   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
22:35:08   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
22:35:08  10  ,CASE WHEN trend IS NULL THEN 1
22:35:08  11  	    WHEN trend =0      THEN 1
22:35:08  12  	    ELSE trend END trend
22:35:08  13  ,cm4
22:35:08  14  ,cm6
22:35:08  15  ,cm8
22:35:08  16  ,cm10
22:35:08  17  ,cm12
22:35:08  18  ,cm14
22:35:08  19  ,cm16
22:35:08  20  ,cm18
22:35:08  21  --
22:35:08  22  ,ca4
22:35:08  23  ,ca6
22:35:08  24  ,ca8
22:35:08  25  ,ca10
22:35:08  26  ,ca12
22:35:08  27  ,ca14
22:35:08  28  ,ca16
22:35:08  29  ,ca18
22:35:08  30  --
22:35:08  31  ,cx4
22:35:08  32  ,cx6
22:35:08  33  ,cx8
22:35:08  34  ,cx10
22:35:08  35  ,cx12
22:35:08  36  ,cx14
22:35:08  37  ,cx16
22:35:08  38  ,cx18
22:35:08  39  --
22:35:08  40  ,crr4
22:35:08  41  ,crr6
22:35:08  42  ,crr8
22:35:08  43  ,crr10
22:35:08  44  ,crr12
22:35:08  45  ,crr14
22:35:08  46  ,crr16
22:35:08  47  ,crr18
22:35:08  48  --
22:35:08  49  ,hh
22:35:08  50  ,d
22:35:08  51  ,w
22:35:08  52  ,mpm
22:35:08  53  ,mph
22:35:08  54  FROM svm6122
22:35:08  55  ORDER BY ydate
22:35:08  56  /

Table created.

Elapsed: 00:00:00.40
22:35:09 SQL> 
22:35:09 SQL> -- rpt
22:35:09 SQL> 
22:35:09 SQL> SELECT
22:35:09   2  pair
22:35:09   3  ,trend
22:35:09   4  ,gatt
22:35:09   5  ,COUNT(pair)
22:35:09   6  ,AVG(g6)
22:35:09   7  FROM svm6142
22:35:09   8  GROUP BY pair,trend,gatt
22:35:09   9  ORDER BY pair,trend,gatt
22:35:09  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6688 -.00219154
ech_usd 	-1 up	      3631  .00353715
ech_usd 	-1		65
ech_usd 	 1 nup	      6567 -.00230992
ech_usd 	 1 up	      2879 .003821057
ech_usd 	 1		 7

6 rows selected.

Elapsed: 00:00:00.05
22:35:09 SQL> 
22:35:09 SQL> 
22:35:09 SQL> -- Derive NTILE based params:
22:35:09 SQL> 
22:35:09 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.14
22:35:09 SQL> CREATE TABLE svm6162 COMPRESS AS
22:35:09   2  SELECT
22:35:09   3  pair
22:35:09   4  ,ydate
22:35:09   5  ,prdate
22:35:09   6  ,clse
22:35:09   7  ,g6
22:35:09   8  ,gatt
22:35:09   9  ,gattn
22:35:09  10  ,trend
22:35:09  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
22:35:09  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
22:35:09  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
22:35:09  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
22:35:09  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
22:35:09  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
22:35:09  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
22:35:09  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
22:35:09  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
22:35:09  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
22:35:09  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
22:35:09  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
22:35:09  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
22:35:09  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
22:35:09  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
22:35:09  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
22:35:09  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
22:35:09  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
22:35:09  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
22:35:09  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
22:35:09  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
22:35:09  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
22:35:09  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
22:35:09  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
22:35:09  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
22:35:09  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
22:35:09  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
22:35:09  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
22:35:09  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
22:35:09  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
22:35:09  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
22:35:09  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
22:35:09  43  ,hh  att32
22:35:09  44  ,d   att33
22:35:09  45  ,w   att34
22:35:09  46  ,mpm att35
22:35:09  47  ,mph att36
22:35:09  48  ,trend att37
22:35:09  49  FROM svm6142
22:35:09  50  ORDER BY ydate
22:35:09  51  /

Table created.

Elapsed: 00:00:04.98
22:35:14 SQL> 
22:35:14 SQL> -- rpt
22:35:14 SQL> 
22:35:14 SQL> SELECT
22:35:14   2  pair
22:35:14   3  ,trend
22:35:14   4  ,gatt
22:35:14   5  ,COUNT(pair)
22:35:14   6  ,AVG(g6)
22:35:14   7  FROM svm6162
22:35:14   8  GROUP BY pair,trend,gatt
22:35:14   9  ORDER BY pair,trend,gatt
22:35:14  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6688 -.00219154
ech_usd 	-1 up	      3631  .00353715
ech_usd 	-1		65
ech_usd 	 1 nup	      6567 -.00230992
ech_usd 	 1 up	      2879 .003821057
ech_usd 	 1		 7

6 rows selected.

Elapsed: 00:00:00.03
22:35:14 SQL> 
22:35:14 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
22:35:14 SQL> CREATE TABLE modsrc COMPRESS AS
22:35:14   2  SELECT
22:35:14   3  pair
22:35:14   4  ,ydate
22:35:14   5  ,prdate
22:35:14   6  ,trend
22:35:14   7  ,g6
22:35:14   8  ,gatt
22:35:14   9  ,gattn
22:35:14  10  FROM svm6162
22:35:14  11  /

Table created.

Elapsed: 00:00:00.10
22:35:14 SQL> 
22:35:14 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.35
22:35:14 SQL> 
22:35:14 SQL> DROP   TABLE ech_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
22:35:15 SQL> CREATE TABLE ech_ms610 COMPRESS AS
22:35:15   2  SELECT
22:35:15   3  ydate
22:35:15   4  ,trend ech_trend
22:35:15   5  ,g6    ech_g6
22:35:15   6  ,gatt  ech_gatt
22:35:15   7  ,gattn ech_gattn
22:35:15   8  FROM modsrc
22:35:15   9  /

Table created.

Elapsed: 00:00:00.07
22:35:15 SQL> 
22:35:15 SQL> ANALYZE TABLE ech_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
22:35:15 SQL> 
22:35:15 SQL> -- I need a copy of the attributes:
22:35:15 SQL> 
22:35:15 SQL> 
22:35:15 SQL> DROP   TABLE ech_att;

Table dropped.

Elapsed: 00:00:00.04
22:35:15 SQL> CREATE TABLE ech_att COMPRESS AS
22:35:15   2  SELECT
22:35:15   3  ydate
22:35:15   4  ,att00 ech_att00
22:35:15   5  ,att01 ech_att01
22:35:15   6  ,att02 ech_att02
22:35:15   7  ,att03 ech_att03
22:35:15   8  ,att04 ech_att04
22:35:15   9  ,att05 ech_att05
22:35:15  10  ,att06 ech_att06
22:35:15  11  ,att07 ech_att07
22:35:15  12  ,att08 ech_att08
22:35:15  13  ,att09 ech_att09
22:35:15  14  ,att10 ech_att10
22:35:15  15  ,att11 ech_att11
22:35:15  16  ,att12 ech_att12
22:35:15  17  ,att13 ech_att13
22:35:15  18  ,att14 ech_att14
22:35:15  19  ,att15 ech_att15
22:35:15  20  ,att16 ech_att16
22:35:15  21  ,att17 ech_att17
22:35:15  22  ,att18 ech_att18
22:35:15  23  ,att19 ech_att19
22:35:15  24  ,att20 ech_att20
22:35:15  25  ,att21 ech_att21
22:35:15  26  ,att22 ech_att22
22:35:15  27  ,att23 ech_att23
22:35:15  28  ,att24 ech_att24
22:35:15  29  ,att25 ech_att25
22:35:15  30  ,att26 ech_att26
22:35:15  31  ,att27 ech_att27
22:35:15  32  ,att28 ech_att28
22:35:15  33  ,att29 ech_att29
22:35:15  34  ,att30 ech_att30
22:35:15  35  ,att31 ech_att31
22:35:15  36  ,att32 ech_att32
22:35:15  37  ,att33 ech_att33
22:35:15  38  ,att34 ech_att34
22:35:15  39  ,att35 ech_att35
22:35:15  40  ,att36 ech_att36
22:35:15  41  ,att37 ech_att37
22:35:15  42  FROM svm6162
22:35:15  43  /

Table created.

Elapsed: 00:00:00.17
22:35:15 SQL> 
22:35:15 SQL> ANALYZE TABLE ech_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
22:35:15 SQL> 
22:35:15 SQL> -- rpt
22:35:15 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19837

Elapsed: 00:00:00.79
22:35:16 SQL> SELECT COUNT(*)FROM ech_att;

  COUNT(*)
----------
     19837

Elapsed: 00:00:00.00
22:35:16 SQL> 
22:35:16 SQL> --
22:35:16 SQL> -- egb610.sql
22:35:16 SQL> --
22:35:16 SQL> 
22:35:16 SQL> -- Creates views and tables for backtesting a forex SVM strategy
22:35:16 SQL> 
22:35:16 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.37
22:35:17 SQL> 
22:35:17 SQL> -- I created di5min here:
22:35:17 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
22:35:17 SQL> 
22:35:17 SQL> CREATE OR REPLACE VIEW svm6102 AS
22:35:17   2  SELECT
22:35:17   3  pair
22:35:17   4  ,ydate
22:35:17   5  ,prdate
22:35:17   6  ,rownum rnum -- acts as t in my time-series
22:35:17   7  ,clse
22:35:17   8  -- Derive a bunch of attributes from clse, the latest price:
22:35:17   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
22:35:17  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
22:35:17  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
22:35:17  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
22:35:17  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
22:35:17  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
22:35:17  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
22:35:17  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
22:35:17  17  --
22:35:17  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
22:35:17  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
22:35:17  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
22:35:17  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
22:35:17  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
22:35:17  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
22:35:17  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
22:35:17  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
22:35:17  26  --
22:35:17  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
22:35:17  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
22:35:17  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
22:35:17  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
22:35:17  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
22:35:17  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
22:35:17  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
22:35:17  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
22:35:17  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
22:35:17  36  FROM di5min WHERE pair LIKE'%egb%'
22:35:17  37  AND ydate > sysdate - 95
22:35:17  38  ORDER BY ydate
22:35:17  39  /

View created.

Elapsed: 00:00:00.05
22:35:17 SQL> 
22:35:17 SQL> -- rpt
22:35:17 SQL> 
22:35:17 SQL> SELECT
22:35:17   2  pair
22:35:17   3  ,COUNT(pair)
22:35:17   4  ,MIN(clse),MAX(clse)
22:35:17   5  ,MIN(avg6),MAX(avg6)
22:35:17   6  ,MIN(ydate),MAX(ydate)
22:35:17   7  FROM svm6102
22:35:17   8  GROUP BY pair
22:35:17   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
egb_usd       19837 .833520557 .893920122 .834199029 .892400287 2010-09-26 22:40:01 2010-12-30 22:30:00

Elapsed: 00:00:00.96
22:35:18 SQL> 
22:35:18 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
22:35:18 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.29
22:35:18 SQL> CREATE TABLE svm6122 COMPRESS AS
22:35:18   2  SELECT
22:35:18   3  pair
22:35:18   4  ,ydate
22:35:18   5  ,prdate
22:35:18   6  ,clse
22:35:18   7  -- g6 is important. I want to predict g6:
22:35:18   8  ,ld6 - clse g6
22:35:18   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
22:35:18  10  -- I want more attributes from the ones I derived above:
22:35:18  11  -- clse relation to moving-min
22:35:18  12  ,clse-min4  cm4
22:35:18  13  ,clse-min6  cm6
22:35:18  14  ,clse-min8  cm8
22:35:18  15  ,clse-min10 cm10
22:35:18  16  ,clse-min12 cm12
22:35:18  17  ,clse-min14 cm14
22:35:18  18  ,clse-min16 cm16
22:35:18  19  ,clse-min18 cm18
22:35:18  20  -- clse relation to moving-avg
22:35:18  21  ,clse-avg4  ca4
22:35:18  22  ,clse-avg6  ca6
22:35:18  23  ,clse-avg8  ca8
22:35:18  24  ,clse-avg10 ca10
22:35:18  25  ,clse-avg12 ca12
22:35:18  26  ,clse-avg14 ca14
22:35:18  27  ,clse-avg16 ca16
22:35:18  28  ,clse-avg18 ca18
22:35:18  29  -- clse relation to moving-max
22:35:18  30  ,clse-max4  cx4
22:35:18  31  ,clse-max6  cx6
22:35:18  32  ,clse-max8  cx8
22:35:18  33  ,clse-max10 cx10
22:35:18  34  ,clse-max12 cx12
22:35:18  35  ,clse-max14 cx14
22:35:18  36  ,clse-max16 cx16
22:35:18  37  ,clse-max18 cx18
22:35:18  38  -- Derive more attributes.
22:35:18  39  -- I want to use CORR() here to help SVM see the shape of the series.
22:35:18  40  -- But COVAR_POP is more stable:
22:35:18  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
22:35:18  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
22:35:18  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
22:35:18  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
22:35:18  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
22:35:18  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
22:35:18  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
22:35:18  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
22:35:18  49  -- Derive date related attributes:
22:35:18  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:35:18  51  ,0+TO_CHAR(ydate,'D')d
22:35:18  52  ,0+TO_CHAR(ydate,'W')w
22:35:18  53  -- mpm stands for minutes-past-midnight:
22:35:18  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:35:18  55  -- mph stands for minutes-past-hour:
22:35:18  56  ,0+TO_CHAR(ydate,'MI')mph
22:35:18  57  FROM svm6102
22:35:18  58  ORDER BY ydate
22:35:18  59  /

Table created.

Elapsed: 00:00:02.49
22:35:20 SQL> 
22:35:20 SQL> -- rpt
22:35:20 SQL> 
22:35:20 SQL> SELECT
22:35:20   2  pair
22:35:20   3  ,COUNT(pair)
22:35:20   4  ,MIN(clse),MAX(clse)
22:35:20   5  ,MIN(ydate),MAX(ydate)
22:35:20   6  FROM svm6122
22:35:20   7  GROUP BY pair
22:35:20   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
egb_usd       19837 .833520557 .893920122 2010-09-26 22:40:01 2010-12-30 22:30:00

Elapsed: 00:00:00.04
22:35:20 SQL> 
22:35:20 SQL> -- Prepare for derivation of NTILE based params:
22:35:20 SQL> 
22:35:20 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.36
22:35:21 SQL> CREATE TABLE svm6142 COMPRESS AS
22:35:21   2  SELECT
22:35:21   3  pair
22:35:21   4  ,ydate
22:35:21   5  ,prdate
22:35:21   6  ,clse
22:35:21   7  ,g6
22:35:21   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
22:35:21   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
22:35:21  10  ,CASE WHEN trend IS NULL THEN 1
22:35:21  11  	    WHEN trend =0      THEN 1
22:35:21  12  	    ELSE trend END trend
22:35:21  13  ,cm4
22:35:21  14  ,cm6
22:35:21  15  ,cm8
22:35:21  16  ,cm10
22:35:21  17  ,cm12
22:35:21  18  ,cm14
22:35:21  19  ,cm16
22:35:21  20  ,cm18
22:35:21  21  --
22:35:21  22  ,ca4
22:35:21  23  ,ca6
22:35:21  24  ,ca8
22:35:21  25  ,ca10
22:35:21  26  ,ca12
22:35:21  27  ,ca14
22:35:21  28  ,ca16
22:35:21  29  ,ca18
22:35:21  30  --
22:35:21  31  ,cx4
22:35:21  32  ,cx6
22:35:21  33  ,cx8
22:35:21  34  ,cx10
22:35:21  35  ,cx12
22:35:21  36  ,cx14
22:35:21  37  ,cx16
22:35:21  38  ,cx18
22:35:21  39  --
22:35:21  40  ,crr4
22:35:21  41  ,crr6
22:35:21  42  ,crr8
22:35:21  43  ,crr10
22:35:21  44  ,crr12
22:35:21  45  ,crr14
22:35:21  46  ,crr16
22:35:21  47  ,crr18
22:35:21  48  --
22:35:21  49  ,hh
22:35:21  50  ,d
22:35:21  51  ,w
22:35:21  52  ,mpm
22:35:21  53  ,mph
22:35:21  54  FROM svm6122
22:35:21  55  ORDER BY ydate
22:35:21  56  /

Table created.

Elapsed: 00:00:00.42
22:35:21 SQL> 
22:35:21 SQL> -- rpt
22:35:21 SQL> 
22:35:21 SQL> SELECT
22:35:21   2  pair
22:35:21   3  ,trend
22:35:21   4  ,gatt
22:35:21   5  ,COUNT(pair)
22:35:21   6  ,AVG(g6)
22:35:21   7  FROM svm6142
22:35:21   8  GROUP BY pair,trend,gatt
22:35:21   9  ORDER BY pair,trend,gatt
22:35:21  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7480 -.00098034
egb_usd 	-1 up	      2777 .003089568
egb_usd 	-1		17
egb_usd 	 1 nup	      6740 -.00128722
egb_usd 	 1 up	      2768 .002961387
egb_usd 	 1		55

6 rows selected.

Elapsed: 00:00:00.04
22:35:21 SQL> 
22:35:21 SQL> 
22:35:21 SQL> -- Derive NTILE based params:
22:35:21 SQL> 
22:35:21 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.17
22:35:21 SQL> CREATE TABLE svm6162 COMPRESS AS
22:35:21   2  SELECT
22:35:21   3  pair
22:35:21   4  ,ydate
22:35:21   5  ,prdate
22:35:21   6  ,clse
22:35:21   7  ,g6
22:35:21   8  ,gatt
22:35:21   9  ,gattn
22:35:21  10  ,trend
22:35:21  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
22:35:21  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
22:35:21  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
22:35:21  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
22:35:21  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
22:35:21  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
22:35:21  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
22:35:21  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
22:35:21  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
22:35:21  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
22:35:21  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
22:35:21  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
22:35:21  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
22:35:21  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
22:35:21  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
22:35:21  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
22:35:21  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
22:35:21  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
22:35:21  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
22:35:21  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
22:35:21  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
22:35:21  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
22:35:21  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
22:35:21  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
22:35:21  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
22:35:21  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
22:35:21  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
22:35:21  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
22:35:21  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
22:35:21  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
22:35:21  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
22:35:21  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
22:35:21  43  ,hh  att32
22:35:21  44  ,d   att33
22:35:21  45  ,w   att34
22:35:21  46  ,mpm att35
22:35:21  47  ,mph att36
22:35:21  48  ,trend att37
22:35:21  49  FROM svm6142
22:35:21  50  ORDER BY ydate
22:35:21  51  /

Table created.

Elapsed: 00:00:05.57
22:35:27 SQL> 
22:35:27 SQL> -- rpt
22:35:27 SQL> 
22:35:27 SQL> SELECT
22:35:27   2  pair
22:35:27   3  ,trend
22:35:27   4  ,gatt
22:35:27   5  ,COUNT(pair)
22:35:27   6  ,AVG(g6)
22:35:27   7  FROM svm6162
22:35:27   8  GROUP BY pair,trend,gatt
22:35:27   9  ORDER BY pair,trend,gatt
22:35:27  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7480 -.00098034
egb_usd 	-1 up	      2777 .003089568
egb_usd 	-1		17
egb_usd 	 1 nup	      6740 -.00128722
egb_usd 	 1 up	      2768 .002961387
egb_usd 	 1		55

6 rows selected.

Elapsed: 00:00:00.03
22:35:27 SQL> 
22:35:27 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.16
22:35:27 SQL> CREATE TABLE modsrc COMPRESS AS
22:35:27   2  SELECT
22:35:27   3  pair
22:35:27   4  ,ydate
22:35:27   5  ,prdate
22:35:27   6  ,trend
22:35:27   7  ,g6
22:35:27   8  ,gatt
22:35:27   9  ,gattn
22:35:27  10  FROM svm6162
22:35:27  11  /

Table created.

Elapsed: 00:00:00.09
22:35:27 SQL> 
22:35:27 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.22
22:35:28 SQL> 
22:35:28 SQL> DROP   TABLE egb_ms610 ;

Table dropped.

Elapsed: 00:00:00.03
22:35:28 SQL> CREATE TABLE egb_ms610 COMPRESS AS
22:35:28   2  SELECT
22:35:28   3  ydate
22:35:28   4  ,trend egb_trend
22:35:28   5  ,g6    egb_g6
22:35:28   6  ,gatt  egb_gatt
22:35:28   7  ,gattn egb_gattn
22:35:28   8  FROM modsrc
22:35:28   9  /

Table created.

Elapsed: 00:00:00.08
22:35:28 SQL> 
22:35:28 SQL> ANALYZE TABLE egb_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
22:35:28 SQL> 
22:35:28 SQL> -- I need a copy of the attributes:
22:35:28 SQL> 
22:35:28 SQL> 
22:35:28 SQL> DROP   TABLE egb_att;

Table dropped.

Elapsed: 00:00:00.05
22:35:28 SQL> CREATE TABLE egb_att COMPRESS AS
22:35:28   2  SELECT
22:35:28   3  ydate
22:35:28   4  ,att00 egb_att00
22:35:28   5  ,att01 egb_att01
22:35:28   6  ,att02 egb_att02
22:35:28   7  ,att03 egb_att03
22:35:28   8  ,att04 egb_att04
22:35:28   9  ,att05 egb_att05
22:35:28  10  ,att06 egb_att06
22:35:28  11  ,att07 egb_att07
22:35:28  12  ,att08 egb_att08
22:35:28  13  ,att09 egb_att09
22:35:28  14  ,att10 egb_att10
22:35:28  15  ,att11 egb_att11
22:35:28  16  ,att12 egb_att12
22:35:28  17  ,att13 egb_att13
22:35:28  18  ,att14 egb_att14
22:35:28  19  ,att15 egb_att15
22:35:28  20  ,att16 egb_att16
22:35:28  21  ,att17 egb_att17
22:35:28  22  ,att18 egb_att18
22:35:28  23  ,att19 egb_att19
22:35:28  24  ,att20 egb_att20
22:35:28  25  ,att21 egb_att21
22:35:28  26  ,att22 egb_att22
22:35:28  27  ,att23 egb_att23
22:35:28  28  ,att24 egb_att24
22:35:28  29  ,att25 egb_att25
22:35:28  30  ,att26 egb_att26
22:35:28  31  ,att27 egb_att27
22:35:28  32  ,att28 egb_att28
22:35:28  33  ,att29 egb_att29
22:35:28  34  ,att30 egb_att30
22:35:28  35  ,att31 egb_att31
22:35:28  36  ,att32 egb_att32
22:35:28  37  ,att33 egb_att33
22:35:28  38  ,att34 egb_att34
22:35:28  39  ,att35 egb_att35
22:35:28  40  ,att36 egb_att36
22:35:28  41  ,att37 egb_att37
22:35:28  42  FROM svm6162
22:35:28  43  /

Table created.

Elapsed: 00:00:00.20
22:35:28 SQL> 
22:35:28 SQL> ANALYZE TABLE egb_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
22:35:29 SQL> 
22:35:29 SQL> -- rpt
22:35:29 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19837

Elapsed: 00:00:00.94
22:35:29 SQL> SELECT COUNT(*)FROM egb_att;

  COUNT(*)
----------
     19837

Elapsed: 00:00:00.01
22:35:29 SQL> 
22:35:29 SQL> --
22:35:29 SQL> -- ejp610.sql
22:35:29 SQL> --
22:35:29 SQL> 
22:35:29 SQL> -- Creates views and tables for backtesting a forex SVM strategy
22:35:29 SQL> 
22:35:29 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.63
22:35:30 SQL> 
22:35:30 SQL> -- I created di5min here:
22:35:30 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
22:35:30 SQL> 
22:35:30 SQL> CREATE OR REPLACE VIEW svm6102 AS
22:35:30   2  SELECT
22:35:30   3  pair
22:35:30   4  ,ydate
22:35:30   5  ,prdate
22:35:30   6  ,rownum rnum -- acts as t in my time-series
22:35:30   7  ,clse
22:35:30   8  -- Derive a bunch of attributes from clse, the latest price:
22:35:30   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
22:35:30  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
22:35:30  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
22:35:30  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
22:35:30  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
22:35:30  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
22:35:30  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
22:35:30  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
22:35:30  17  --
22:35:30  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
22:35:30  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
22:35:30  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
22:35:30  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
22:35:30  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
22:35:30  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
22:35:30  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
22:35:30  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
22:35:30  26  --
22:35:30  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
22:35:30  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
22:35:30  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
22:35:30  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
22:35:30  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
22:35:30  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
22:35:30  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
22:35:30  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
22:35:30  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
22:35:30  36  FROM di5min WHERE pair LIKE'%ejp%'
22:35:30  37  AND ydate > sysdate - 95
22:35:30  38  ORDER BY ydate
22:35:30  39  /

View created.

Elapsed: 00:00:00.06
22:35:30 SQL> 
22:35:30 SQL> -- rpt
22:35:30 SQL> 
22:35:30 SQL> SELECT
22:35:30   2  pair
22:35:30   3  ,COUNT(pair)
22:35:30   4  ,MIN(clse),MAX(clse)
22:35:30   5  ,MIN(avg6),MAX(avg6)
22:35:30   6  ,MIN(ydate),MAX(ydate)
22:35:30   7  FROM svm6102
22:35:30   8  GROUP BY pair
22:35:30   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ejp_usd       19834 107.643765	115.63485 107.776148 115.509678 2010-09-26 22:40:01 2010-12-30 22:30:00

Elapsed: 00:00:00.84
22:35:31 SQL> 
22:35:31 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
22:35:31 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.26
22:35:31 SQL> CREATE TABLE svm6122 COMPRESS AS
22:35:31   2  SELECT
22:35:31   3  pair
22:35:31   4  ,ydate
22:35:31   5  ,prdate
22:35:31   6  ,clse
22:35:31   7  -- g6 is important. I want to predict g6:
22:35:31   8  ,ld6 - clse g6
22:35:31   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
22:35:31  10  -- I want more attributes from the ones I derived above:
22:35:31  11  -- clse relation to moving-min
22:35:31  12  ,clse-min4  cm4
22:35:31  13  ,clse-min6  cm6
22:35:31  14  ,clse-min8  cm8
22:35:31  15  ,clse-min10 cm10
22:35:31  16  ,clse-min12 cm12
22:35:31  17  ,clse-min14 cm14
22:35:31  18  ,clse-min16 cm16
22:35:31  19  ,clse-min18 cm18
22:35:31  20  -- clse relation to moving-avg
22:35:31  21  ,clse-avg4  ca4
22:35:31  22  ,clse-avg6  ca6
22:35:31  23  ,clse-avg8  ca8
22:35:31  24  ,clse-avg10 ca10
22:35:31  25  ,clse-avg12 ca12
22:35:31  26  ,clse-avg14 ca14
22:35:31  27  ,clse-avg16 ca16
22:35:31  28  ,clse-avg18 ca18
22:35:31  29  -- clse relation to moving-max
22:35:31  30  ,clse-max4  cx4
22:35:31  31  ,clse-max6  cx6
22:35:31  32  ,clse-max8  cx8
22:35:31  33  ,clse-max10 cx10
22:35:31  34  ,clse-max12 cx12
22:35:31  35  ,clse-max14 cx14
22:35:31  36  ,clse-max16 cx16
22:35:31  37  ,clse-max18 cx18
22:35:31  38  -- Derive more attributes.
22:35:31  39  -- I want to use CORR() here to help SVM see the shape of the series.
22:35:31  40  -- But COVAR_POP is more stable:
22:35:31  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
22:35:31  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
22:35:31  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
22:35:31  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
22:35:31  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
22:35:31  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
22:35:31  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
22:35:31  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
22:35:31  49  -- Derive date related attributes:
22:35:31  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:35:31  51  ,0+TO_CHAR(ydate,'D')d
22:35:31  52  ,0+TO_CHAR(ydate,'W')w
22:35:31  53  -- mpm stands for minutes-past-midnight:
22:35:31  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:35:31  55  -- mph stands for minutes-past-hour:
22:35:31  56  ,0+TO_CHAR(ydate,'MI')mph
22:35:31  57  FROM svm6102
22:35:31  58  ORDER BY ydate
22:35:31  59  /

Table created.

Elapsed: 00:00:02.11
22:35:33 SQL> 
22:35:33 SQL> -- rpt
22:35:33 SQL> 
22:35:33 SQL> SELECT
22:35:33   2  pair
22:35:33   3  ,COUNT(pair)
22:35:33   4  ,MIN(clse),MAX(clse)
22:35:33   5  ,MIN(ydate),MAX(ydate)
22:35:33   6  FROM svm6122
22:35:33   7  GROUP BY pair
22:35:33   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ejp_usd       19834 107.643765	115.63485 2010-09-26 22:40:01 2010-12-30 22:30:00

Elapsed: 00:00:00.04
22:35:33 SQL> 
22:35:33 SQL> -- Prepare for derivation of NTILE based params:
22:35:33 SQL> 
22:35:33 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.33
22:35:34 SQL> CREATE TABLE svm6142 COMPRESS AS
22:35:34   2  SELECT
22:35:34   3  pair
22:35:34   4  ,ydate
22:35:34   5  ,prdate
22:35:34   6  ,clse
22:35:34   7  ,g6
22:35:34   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
22:35:34   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
22:35:34  10  ,CASE WHEN trend IS NULL THEN 1
22:35:34  11  	    WHEN trend =0      THEN 1
22:35:34  12  	    ELSE trend END trend
22:35:34  13  ,cm4
22:35:34  14  ,cm6
22:35:34  15  ,cm8
22:35:34  16  ,cm10
22:35:34  17  ,cm12
22:35:34  18  ,cm14
22:35:34  19  ,cm16
22:35:34  20  ,cm18
22:35:34  21  --
22:35:34  22  ,ca4
22:35:34  23  ,ca6
22:35:34  24  ,ca8
22:35:34  25  ,ca10
22:35:34  26  ,ca12
22:35:34  27  ,ca14
22:35:34  28  ,ca16
22:35:34  29  ,ca18
22:35:34  30  --
22:35:34  31  ,cx4
22:35:34  32  ,cx6
22:35:34  33  ,cx8
22:35:34  34  ,cx10
22:35:34  35  ,cx12
22:35:34  36  ,cx14
22:35:34  37  ,cx16
22:35:34  38  ,cx18
22:35:34  39  --
22:35:34  40  ,crr4
22:35:34  41  ,crr6
22:35:34  42  ,crr8
22:35:34  43  ,crr10
22:35:34  44  ,crr12
22:35:34  45  ,crr14
22:35:34  46  ,crr16
22:35:34  47  ,crr18
22:35:34  48  --
22:35:34  49  ,hh
22:35:34  50  ,d
22:35:34  51  ,w
22:35:34  52  ,mpm
22:35:34  53  ,mph
22:35:34  54  FROM svm6122
22:35:34  55  ORDER BY ydate
22:35:34  56  /

Table created.

Elapsed: 00:00:00.38
22:35:34 SQL> 
22:35:34 SQL> -- rpt
22:35:34 SQL> 
22:35:34 SQL> SELECT
22:35:34   2  pair
22:35:34   3  ,trend
22:35:34   4  ,gatt
22:35:34   5  ,COUNT(pair)
22:35:34   6  ,AVG(g6)
22:35:34   7  FROM svm6142
22:35:34   8  GROUP BY pair,trend,gatt
22:35:34   9  ORDER BY pair,trend,gatt
22:35:34  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      4938 -.32122794
ejp_usd 	-1 up	      5064 .268994607
ejp_usd 	-1		21
ejp_usd 	 1 nup	      5051 -.28905769
ejp_usd 	 1 up	      4709 .280025769
ejp_usd 	 1		51

6 rows selected.

Elapsed: 00:00:00.04
22:35:34 SQL> 
22:35:34 SQL> 
22:35:34 SQL> -- Derive NTILE based params:
22:35:34 SQL> 
22:35:34 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.14
22:35:34 SQL> CREATE TABLE svm6162 COMPRESS AS
22:35:34   2  SELECT
22:35:34   3  pair
22:35:34   4  ,ydate
22:35:34   5  ,prdate
22:35:34   6  ,clse
22:35:34   7  ,g6
22:35:34   8  ,gatt
22:35:34   9  ,gattn
22:35:34  10  ,trend
22:35:34  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
22:35:34  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
22:35:34  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
22:35:34  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
22:35:34  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
22:35:34  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
22:35:34  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
22:35:34  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
22:35:34  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
22:35:34  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
22:35:34  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
22:35:34  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
22:35:34  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
22:35:34  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
22:35:34  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
22:35:34  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
22:35:34  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
22:35:34  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
22:35:34  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
22:35:34  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
22:35:34  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
22:35:34  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
22:35:34  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
22:35:34  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
22:35:34  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
22:35:34  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
22:35:34  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
22:35:34  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
22:35:34  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
22:35:34  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
22:35:34  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
22:35:34  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
22:35:34  43  ,hh  att32
22:35:34  44  ,d   att33
22:35:34  45  ,w   att34
22:35:34  46  ,mpm att35
22:35:34  47  ,mph att36
22:35:34  48  ,trend att37
22:35:34  49  FROM svm6142
22:35:34  50  ORDER BY ydate
22:35:34  51  /

Table created.

Elapsed: 00:00:04.84
22:35:39 SQL> 
22:35:39 SQL> -- rpt
22:35:39 SQL> 
22:35:39 SQL> SELECT
22:35:39   2  pair
22:35:39   3  ,trend
22:35:39   4  ,gatt
22:35:39   5  ,COUNT(pair)
22:35:39   6  ,AVG(g6)
22:35:39   7  FROM svm6162
22:35:39   8  GROUP BY pair,trend,gatt
22:35:39   9  ORDER BY pair,trend,gatt
22:35:39  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      4938 -.32122794
ejp_usd 	-1 up	      5064 .268994607
ejp_usd 	-1		21
ejp_usd 	 1 nup	      5051 -.28905769
ejp_usd 	 1 up	      4709 .280025769
ejp_usd 	 1		51

6 rows selected.

Elapsed: 00:00:00.03
22:35:39 SQL> 
22:35:39 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.17
22:35:39 SQL> CREATE TABLE modsrc COMPRESS AS
22:35:39   2  SELECT
22:35:39   3  pair
22:35:39   4  ,ydate
22:35:39   5  ,prdate
22:35:39   6  ,trend
22:35:39   7  ,g6
22:35:39   8  ,gatt
22:35:39   9  ,gattn
22:35:39  10  FROM svm6162
22:35:39  11  /

Table created.

Elapsed: 00:00:00.08
22:35:39 SQL> 
22:35:39 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
22:35:40 SQL> 
22:35:40 SQL> DROP   TABLE ejp_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
22:35:40 SQL> CREATE TABLE ejp_ms610 COMPRESS AS
22:35:40   2  SELECT
22:35:40   3  ydate
22:35:40   4  ,trend ejp_trend
22:35:40   5  ,g6    ejp_g6
22:35:40   6  ,gatt  ejp_gatt
22:35:40   7  ,gattn ejp_gattn
22:35:40   8  FROM modsrc
22:35:40   9  /

Table created.

Elapsed: 00:00:00.07
22:35:40 SQL> 
22:35:40 SQL> ANALYZE TABLE ejp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
22:35:40 SQL> 
22:35:40 SQL> -- I need a copy of the attributes:
22:35:40 SQL> 
22:35:40 SQL> 
22:35:40 SQL> DROP   TABLE ejp_att;

Table dropped.

Elapsed: 00:00:00.05
22:35:40 SQL> CREATE TABLE ejp_att COMPRESS AS
22:35:40   2  SELECT
22:35:40   3  ydate
22:35:40   4  ,att00 ejp_att00
22:35:40   5  ,att01 ejp_att01
22:35:40   6  ,att02 ejp_att02
22:35:40   7  ,att03 ejp_att03
22:35:40   8  ,att04 ejp_att04
22:35:40   9  ,att05 ejp_att05
22:35:40  10  ,att06 ejp_att06
22:35:40  11  ,att07 ejp_att07
22:35:40  12  ,att08 ejp_att08
22:35:40  13  ,att09 ejp_att09
22:35:40  14  ,att10 ejp_att10
22:35:40  15  ,att11 ejp_att11
22:35:40  16  ,att12 ejp_att12
22:35:40  17  ,att13 ejp_att13
22:35:40  18  ,att14 ejp_att14
22:35:40  19  ,att15 ejp_att15
22:35:40  20  ,att16 ejp_att16
22:35:40  21  ,att17 ejp_att17
22:35:40  22  ,att18 ejp_att18
22:35:40  23  ,att19 ejp_att19
22:35:40  24  ,att20 ejp_att20
22:35:40  25  ,att21 ejp_att21
22:35:40  26  ,att22 ejp_att22
22:35:40  27  ,att23 ejp_att23
22:35:40  28  ,att24 ejp_att24
22:35:40  29  ,att25 ejp_att25
22:35:40  30  ,att26 ejp_att26
22:35:40  31  ,att27 ejp_att27
22:35:40  32  ,att28 ejp_att28
22:35:40  33  ,att29 ejp_att29
22:35:40  34  ,att30 ejp_att30
22:35:40  35  ,att31 ejp_att31
22:35:40  36  ,att32 ejp_att32
22:35:40  37  ,att33 ejp_att33
22:35:40  38  ,att34 ejp_att34
22:35:40  39  ,att35 ejp_att35
22:35:40  40  ,att36 ejp_att36
22:35:40  41  ,att37 ejp_att37
22:35:40  42  FROM svm6162
22:35:40  43  /

Table created.

Elapsed: 00:00:00.17
22:35:40 SQL> 
22:35:40 SQL> ANALYZE TABLE ejp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.44
22:35:41 SQL> 
22:35:41 SQL> -- rpt
22:35:41 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19834

Elapsed: 00:00:00.87
22:35:41 SQL> SELECT COUNT(*)FROM ejp_att;

  COUNT(*)
----------
     19834

Elapsed: 00:00:00.00
22:35:41 SQL> 
22:35:41 SQL> --
22:35:41 SQL> -- ajp610.sql
22:35:41 SQL> --
22:35:41 SQL> 
22:35:41 SQL> -- Creates views and tables for backtesting a forex SVM strategy
22:35:41 SQL> 
22:35:41 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.38
22:35:42 SQL> 
22:35:42 SQL> -- I created di5min here:
22:35:42 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
22:35:42 SQL> 
22:35:42 SQL> CREATE OR REPLACE VIEW svm6102 AS
22:35:42   2  SELECT
22:35:42   3  pair
22:35:42   4  ,ydate
22:35:42   5  ,prdate
22:35:42   6  ,rownum rnum -- acts as t in my time-series
22:35:42   7  ,clse
22:35:42   8  -- Derive a bunch of attributes from clse, the latest price:
22:35:42   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
22:35:42  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
22:35:42  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
22:35:42  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
22:35:42  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
22:35:42  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
22:35:42  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
22:35:42  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
22:35:42  17  --
22:35:42  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
22:35:42  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
22:35:42  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
22:35:42  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
22:35:42  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
22:35:42  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
22:35:42  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
22:35:42  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
22:35:42  26  --
22:35:42  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
22:35:42  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
22:35:42  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
22:35:42  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
22:35:42  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
22:35:42  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
22:35:42  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
22:35:42  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
22:35:42  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
22:35:42  36  FROM di5min WHERE pair LIKE'%ajp%'
22:35:42  37  AND ydate > sysdate - 95
22:35:42  38  ORDER BY ydate
22:35:42  39  /

View created.

Elapsed: 00:00:00.05
22:35:42 SQL> 
22:35:42 SQL> -- rpt
22:35:42 SQL> 
22:35:42 SQL> SELECT
22:35:42   2  pair
22:35:42   3  ,COUNT(pair)
22:35:42   4  ,MIN(clse),MAX(clse)
22:35:42   5  ,MIN(avg6),MAX(avg6)
22:35:42   6  ,MIN(ydate),MAX(ydate)
22:35:42   7  FROM svm6102
22:35:42   8  GROUP BY pair
22:35:42   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ajp_usd       19831  78.249976 83.6669853 78.5106193  83.546306 2010-09-26 22:40:01 2010-12-30 22:30:00

Elapsed: 00:00:00.79
22:35:43 SQL> 
22:35:43 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
22:35:43 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:01.33
22:35:44 SQL> CREATE TABLE svm6122 COMPRESS AS
22:35:44   2  SELECT
22:35:44   3  pair
22:35:44   4  ,ydate
22:35:44   5  ,prdate
22:35:44   6  ,clse
22:35:44   7  -- g6 is important. I want to predict g6:
22:35:44   8  ,ld6 - clse g6
22:35:44   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
22:35:44  10  -- I want more attributes from the ones I derived above:
22:35:44  11  -- clse relation to moving-min
22:35:44  12  ,clse-min4  cm4
22:35:44  13  ,clse-min6  cm6
22:35:44  14  ,clse-min8  cm8
22:35:44  15  ,clse-min10 cm10
22:35:44  16  ,clse-min12 cm12
22:35:44  17  ,clse-min14 cm14
22:35:44  18  ,clse-min16 cm16
22:35:44  19  ,clse-min18 cm18
22:35:44  20  -- clse relation to moving-avg
22:35:44  21  ,clse-avg4  ca4
22:35:44  22  ,clse-avg6  ca6
22:35:44  23  ,clse-avg8  ca8
22:35:44  24  ,clse-avg10 ca10
22:35:44  25  ,clse-avg12 ca12
22:35:44  26  ,clse-avg14 ca14
22:35:44  27  ,clse-avg16 ca16
22:35:44  28  ,clse-avg18 ca18
22:35:44  29  -- clse relation to moving-max
22:35:44  30  ,clse-max4  cx4
22:35:44  31  ,clse-max6  cx6
22:35:44  32  ,clse-max8  cx8
22:35:44  33  ,clse-max10 cx10
22:35:44  34  ,clse-max12 cx12
22:35:44  35  ,clse-max14 cx14
22:35:44  36  ,clse-max16 cx16
22:35:44  37  ,clse-max18 cx18
22:35:44  38  -- Derive more attributes.
22:35:44  39  -- I want to use CORR() here to help SVM see the shape of the series.
22:35:44  40  -- But COVAR_POP is more stable:
22:35:44  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
22:35:44  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
22:35:44  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
22:35:44  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
22:35:44  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
22:35:44  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
22:35:44  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
22:35:44  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
22:35:44  49  -- Derive date related attributes:
22:35:44  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:35:44  51  ,0+TO_CHAR(ydate,'D')d
22:35:44  52  ,0+TO_CHAR(ydate,'W')w
22:35:44  53  -- mpm stands for minutes-past-midnight:
22:35:44  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:35:44  55  -- mph stands for minutes-past-hour:
22:35:44  56  ,0+TO_CHAR(ydate,'MI')mph
22:35:44  57  FROM svm6102
22:35:44  58  ORDER BY ydate
22:35:44  59  /

Table created.

Elapsed: 00:00:02.03
22:35:46 SQL> 
22:35:46 SQL> -- rpt
22:35:46 SQL> 
22:35:46 SQL> SELECT
22:35:46   2  pair
22:35:46   3  ,COUNT(pair)
22:35:46   4  ,MIN(clse),MAX(clse)
22:35:46   5  ,MIN(ydate),MAX(ydate)
22:35:46   6  FROM svm6122
22:35:46   7  GROUP BY pair
22:35:46   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ajp_usd       19831  78.249976 83.6669853 2010-09-26 22:40:01 2010-12-30 22:30:00

Elapsed: 00:00:00.04
22:35:46 SQL> 
22:35:46 SQL> -- Prepare for derivation of NTILE based params:
22:35:46 SQL> 
22:35:46 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.19
22:35:46 SQL> CREATE TABLE svm6142 COMPRESS AS
22:35:46   2  SELECT
22:35:46   3  pair
22:35:46   4  ,ydate
22:35:46   5  ,prdate
22:35:46   6  ,clse
22:35:46   7  ,g6
22:35:46   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
22:35:46   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
22:35:46  10  ,CASE WHEN trend IS NULL THEN 1
22:35:46  11  	    WHEN trend =0      THEN 1
22:35:46  12  	    ELSE trend END trend
22:35:46  13  ,cm4
22:35:46  14  ,cm6
22:35:46  15  ,cm8
22:35:46  16  ,cm10
22:35:46  17  ,cm12
22:35:46  18  ,cm14
22:35:46  19  ,cm16
22:35:46  20  ,cm18
22:35:46  21  --
22:35:46  22  ,ca4
22:35:46  23  ,ca6
22:35:46  24  ,ca8
22:35:46  25  ,ca10
22:35:46  26  ,ca12
22:35:46  27  ,ca14
22:35:46  28  ,ca16
22:35:46  29  ,ca18
22:35:46  30  --
22:35:46  31  ,cx4
22:35:46  32  ,cx6
22:35:46  33  ,cx8
22:35:46  34  ,cx10
22:35:46  35  ,cx12
22:35:46  36  ,cx14
22:35:46  37  ,cx16
22:35:46  38  ,cx18
22:35:46  39  --
22:35:46  40  ,crr4
22:35:46  41  ,crr6
22:35:46  42  ,crr8
22:35:46  43  ,crr10
22:35:46  44  ,crr12
22:35:46  45  ,crr14
22:35:46  46  ,crr16
22:35:46  47  ,crr18
22:35:46  48  --
22:35:46  49  ,hh
22:35:46  50  ,d
22:35:46  51  ,w
22:35:46  52  ,mpm
22:35:46  53  ,mph
22:35:46  54  FROM svm6122
22:35:46  55  ORDER BY ydate
22:35:46  56  /

Table created.

Elapsed: 00:00:00.38
22:35:47 SQL> 
22:35:47 SQL> -- rpt
22:35:47 SQL> 
22:35:47 SQL> SELECT
22:35:47   2  pair
22:35:47   3  ,trend
22:35:47   4  ,gatt
22:35:47   5  ,COUNT(pair)
22:35:47   6  ,AVG(g6)
22:35:47   7  FROM svm6142
22:35:47   8  GROUP BY pair,trend,gatt
22:35:47   9  ORDER BY pair,trend,gatt
22:35:47  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ajp_usd 	-1 nup	      4204 -.22644037
ajp_usd 	-1 up	      5291 .218047802
ajp_usd 	-1		17
ajp_usd 	 1 nup	      5304 -.20164661
ajp_usd 	 1 up	      4960 .204369211
ajp_usd 	 1		55

6 rows selected.

Elapsed: 00:00:00.04
22:35:47 SQL> 
22:35:47 SQL> 
22:35:47 SQL> -- Derive NTILE based params:
22:35:47 SQL> 
22:35:47 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.13
22:35:47 SQL> CREATE TABLE svm6162 COMPRESS AS
22:35:47   2  SELECT
22:35:47   3  pair
22:35:47   4  ,ydate
22:35:47   5  ,prdate
22:35:47   6  ,clse
22:35:47   7  ,g6
22:35:47   8  ,gatt
22:35:47   9  ,gattn
22:35:47  10  ,trend
22:35:47  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
22:35:47  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
22:35:47  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
22:35:47  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
22:35:47  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
22:35:47  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
22:35:47  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
22:35:47  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
22:35:47  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
22:35:47  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
22:35:47  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
22:35:47  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
22:35:47  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
22:35:47  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
22:35:47  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
22:35:47  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
22:35:47  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
22:35:47  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
22:35:47  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
22:35:47  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
22:35:47  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
22:35:47  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
22:35:47  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
22:35:47  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
22:35:47  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
22:35:47  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
22:35:47  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
22:35:47  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
22:35:47  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
22:35:47  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
22:35:47  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
22:35:47  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
22:35:47  43  ,hh  att32
22:35:47  44  ,d   att33
22:35:47  45  ,w   att34
22:35:47  46  ,mpm att35
22:35:47  47  ,mph att36
22:35:47  48  ,trend att37
22:35:47  49  FROM svm6142
22:35:47  50  ORDER BY ydate
22:35:47  51  /

Table created.

Elapsed: 00:00:04.88
22:35:52 SQL> 
22:35:52 SQL> -- rpt
22:35:52 SQL> 
22:35:52 SQL> SELECT
22:35:52   2  pair
22:35:52   3  ,trend
22:35:52   4  ,gatt
22:35:52   5  ,COUNT(pair)
22:35:52   6  ,AVG(g6)
22:35:52   7  FROM svm6162
22:35:52   8  GROUP BY pair,trend,gatt
22:35:52   9  ORDER BY pair,trend,gatt
22:35:52  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ajp_usd 	-1 nup	      4204 -.22644037
ajp_usd 	-1 up	      5291 .218047802
ajp_usd 	-1		17
ajp_usd 	 1 nup	      5304 -.20164661
ajp_usd 	 1 up	      4960 .204369211
ajp_usd 	 1		55

6 rows selected.

Elapsed: 00:00:00.04
22:35:52 SQL> 
22:35:52 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.37
22:35:52 SQL> CREATE TABLE modsrc COMPRESS AS
22:35:52   2  SELECT
22:35:52   3  pair
22:35:52   4  ,ydate
22:35:52   5  ,prdate
22:35:52   6  ,trend
22:35:52   7  ,g6
22:35:52   8  ,gatt
22:35:52   9  ,gattn
22:35:52  10  FROM svm6162
22:35:52  11  /

Table created.

Elapsed: 00:00:00.10
22:35:52 SQL> 
22:35:52 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
22:35:52 SQL> 
22:35:52 SQL> DROP   TABLE ajp_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
22:35:52 SQL> CREATE TABLE ajp_ms610 COMPRESS AS
22:35:52   2  SELECT
22:35:52   3  ydate
22:35:52   4  ,trend ajp_trend
22:35:52   5  ,g6    ajp_g6
22:35:52   6  ,gatt  ajp_gatt
22:35:52   7  ,gattn ajp_gattn
22:35:52   8  FROM modsrc
22:35:52   9  /

Table created.

Elapsed: 00:00:00.06
22:35:53 SQL> 
22:35:53 SQL> ANALYZE TABLE ajp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
22:35:53 SQL> 
22:35:53 SQL> -- I need a copy of the attributes:
22:35:53 SQL> 
22:35:53 SQL> 
22:35:53 SQL> DROP   TABLE ajp_att;

Table dropped.

Elapsed: 00:00:00.06
22:35:53 SQL> CREATE TABLE ajp_att COMPRESS AS
22:35:53   2  SELECT
22:35:53   3  ydate
22:35:53   4  ,att00 ajp_att00
22:35:53   5  ,att01 ajp_att01
22:35:53   6  ,att02 ajp_att02
22:35:53   7  ,att03 ajp_att03
22:35:53   8  ,att04 ajp_att04
22:35:53   9  ,att05 ajp_att05
22:35:53  10  ,att06 ajp_att06
22:35:53  11  ,att07 ajp_att07
22:35:53  12  ,att08 ajp_att08
22:35:53  13  ,att09 ajp_att09
22:35:53  14  ,att10 ajp_att10
22:35:53  15  ,att11 ajp_att11
22:35:53  16  ,att12 ajp_att12
22:35:53  17  ,att13 ajp_att13
22:35:53  18  ,att14 ajp_att14
22:35:53  19  ,att15 ajp_att15
22:35:53  20  ,att16 ajp_att16
22:35:53  21  ,att17 ajp_att17
22:35:53  22  ,att18 ajp_att18
22:35:53  23  ,att19 ajp_att19
22:35:53  24  ,att20 ajp_att20
22:35:53  25  ,att21 ajp_att21
22:35:53  26  ,att22 ajp_att22
22:35:53  27  ,att23 ajp_att23
22:35:53  28  ,att24 ajp_att24
22:35:53  29  ,att25 ajp_att25
22:35:53  30  ,att26 ajp_att26
22:35:53  31  ,att27 ajp_att27
22:35:53  32  ,att28 ajp_att28
22:35:53  33  ,att29 ajp_att29
22:35:53  34  ,att30 ajp_att30
22:35:53  35  ,att31 ajp_att31
22:35:53  36  ,att32 ajp_att32
22:35:53  37  ,att33 ajp_att33
22:35:53  38  ,att34 ajp_att34
22:35:53  39  ,att35 ajp_att35
22:35:53  40  ,att36 ajp_att36
22:35:53  41  ,att37 ajp_att37
22:35:53  42  FROM svm6162
22:35:53  43  /

Table created.

Elapsed: 00:00:00.16
22:35:53 SQL> 
22:35:53 SQL> ANALYZE TABLE ajp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.48
22:35:53 SQL> 
22:35:53 SQL> -- rpt
22:35:53 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19831

Elapsed: 00:00:00.77
22:35:54 SQL> SELECT COUNT(*)FROM ajp_att;

  COUNT(*)
----------
     19831

Elapsed: 00:00:00.00
22:35:54 SQL> 
22:35:54 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
