
SQL*Plus: Release 11.2.0.1.0 Production on Wed Dec 29 03:52:28 2010

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

03:52:28 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
03:52:28 SQL> 03:52:28 SQL> --
03:52:28 SQL> -- eur610.sql
03:52:28 SQL> --
03:52:28 SQL> 
03:52:28 SQL> -- Creates views and tables for backtesting a forex SVM strategy
03:52:28 SQL> 
03:52:28 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.01
03:52:28 SQL> 
03:52:28 SQL> -- I created di5min here:
03:52:28 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
03:52:28 SQL> 
03:52:28 SQL> CREATE OR REPLACE VIEW svm6102 AS
03:52:28   2  SELECT
03:52:28   3  pair
03:52:28   4  ,ydate
03:52:28   5  ,prdate
03:52:28   6  ,rownum rnum -- acts as t in my time-series
03:52:28   7  ,clse
03:52:28   8  -- Derive a bunch of attributes from clse, the latest price:
03:52:28   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
03:52:28  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
03:52:28  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
03:52:28  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
03:52:28  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
03:52:28  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
03:52:28  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
03:52:28  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
03:52:28  17  --
03:52:28  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
03:52:28  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
03:52:28  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
03:52:28  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
03:52:28  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
03:52:28  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
03:52:28  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
03:52:28  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
03:52:28  26  --
03:52:28  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
03:52:28  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
03:52:28  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
03:52:28  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
03:52:28  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
03:52:28  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
03:52:28  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
03:52:28  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
03:52:28  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
03:52:28  36  FROM di5min WHERE pair LIKE'%eur%'
03:52:28  37  AND ydate > sysdate - 95
03:52:28  38  ORDER BY ydate
03:52:28  39  /

View created.

Elapsed: 00:00:00.06
03:52:29 SQL> 
03:52:29 SQL> -- rpt
03:52:29 SQL> 
03:52:29 SQL> SELECT
03:52:29   2  pair
03:52:29   3  ,COUNT(pair)
03:52:29   4  ,MIN(clse),MAX(clse)
03:52:29   5  ,MIN(avg6),MAX(avg6)
03:52:29   6  ,MIN(ydate),MAX(ydate)
03:52:29   7  FROM svm6102
03:52:29   8  GROUP BY pair
03:52:29   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_usd       19353    1.29735	   1.4273 1.29875103 1.42436233 2010-09-26 20:55:01 2010-12-29 03:45:00

Elapsed: 00:00:00.89
03:52:29 SQL> 
03:52:29 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
03:52:29 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.12
03:52:30 SQL> CREATE TABLE svm6122 COMPRESS AS
03:52:30   2  SELECT
03:52:30   3  pair
03:52:30   4  ,ydate
03:52:30   5  ,prdate
03:52:30   6  ,clse
03:52:30   7  -- g6 is important. I want to predict g6:
03:52:30   8  ,ld6 - clse g6
03:52:30   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
03:52:30  10  -- I want more attributes from the ones I derived above:
03:52:30  11  -- clse relation to moving-min
03:52:30  12  ,clse-min4  cm4
03:52:30  13  ,clse-min6  cm6
03:52:30  14  ,clse-min8  cm8
03:52:30  15  ,clse-min10 cm10
03:52:30  16  ,clse-min12 cm12
03:52:30  17  ,clse-min14 cm14
03:52:30  18  ,clse-min16 cm16
03:52:30  19  ,clse-min18 cm18
03:52:30  20  -- clse relation to moving-avg
03:52:30  21  ,clse-avg4  ca4
03:52:30  22  ,clse-avg6  ca6
03:52:30  23  ,clse-avg8  ca8
03:52:30  24  ,clse-avg10 ca10
03:52:30  25  ,clse-avg12 ca12
03:52:30  26  ,clse-avg14 ca14
03:52:30  27  ,clse-avg16 ca16
03:52:30  28  ,clse-avg18 ca18
03:52:30  29  -- clse relation to moving-max
03:52:30  30  ,clse-max4  cx4
03:52:30  31  ,clse-max6  cx6
03:52:30  32  ,clse-max8  cx8
03:52:30  33  ,clse-max10 cx10
03:52:30  34  ,clse-max12 cx12
03:52:30  35  ,clse-max14 cx14
03:52:30  36  ,clse-max16 cx16
03:52:30  37  ,clse-max18 cx18
03:52:30  38  -- Derive more attributes.
03:52:30  39  -- I want to use CORR() here to help SVM see the shape of the series.
03:52:30  40  -- But COVAR_POP is more stable:
03:52:30  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
03:52:30  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
03:52:30  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
03:52:30  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
03:52:30  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
03:52:30  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
03:52:30  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
03:52:30  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
03:52:30  49  -- Derive date related attributes:
03:52:30  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
03:52:30  51  ,0+TO_CHAR(ydate,'D')d
03:52:30  52  ,0+TO_CHAR(ydate,'W')w
03:52:30  53  -- mpm stands for minutes-past-midnight:
03:52:30  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
03:52:30  55  -- mph stands for minutes-past-hour:
03:52:30  56  ,0+TO_CHAR(ydate,'MI')mph
03:52:30  57  FROM svm6102
03:52:30  58  ORDER BY ydate
03:52:30  59  /

Table created.

Elapsed: 00:00:02.33
03:52:32 SQL> 
03:52:32 SQL> -- rpt
03:52:32 SQL> 
03:52:32 SQL> SELECT
03:52:32   2  pair
03:52:32   3  ,COUNT(pair)
03:52:32   4  ,MIN(clse),MAX(clse)
03:52:32   5  ,MIN(ydate),MAX(ydate)
03:52:32   6  FROM svm6122
03:52:32   7  GROUP BY pair
03:52:32   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_usd       19353    1.29735	   1.4273 2010-09-26 20:55:01 2010-12-29 03:45:00

Elapsed: 00:00:00.15
03:52:32 SQL> 
03:52:32 SQL> -- Prepare for derivation of NTILE based params:
03:52:32 SQL> 
03:52:32 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.63
03:52:33 SQL> CREATE TABLE svm6142 COMPRESS AS
03:52:33   2  SELECT
03:52:33   3  pair
03:52:33   4  ,ydate
03:52:33   5  ,prdate
03:52:33   6  ,clse
03:52:33   7  ,g6
03:52:33   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
03:52:33   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
03:52:33  10  ,CASE WHEN trend IS NULL THEN 1
03:52:33  11  	    WHEN trend =0      THEN 1
03:52:33  12  	    ELSE trend END trend
03:52:33  13  ,cm4
03:52:33  14  ,cm6
03:52:33  15  ,cm8
03:52:33  16  ,cm10
03:52:33  17  ,cm12
03:52:33  18  ,cm14
03:52:33  19  ,cm16
03:52:33  20  ,cm18
03:52:33  21  --
03:52:33  22  ,ca4
03:52:33  23  ,ca6
03:52:33  24  ,ca8
03:52:33  25  ,ca10
03:52:33  26  ,ca12
03:52:33  27  ,ca14
03:52:33  28  ,ca16
03:52:33  29  ,ca18
03:52:33  30  --
03:52:33  31  ,cx4
03:52:33  32  ,cx6
03:52:33  33  ,cx8
03:52:33  34  ,cx10
03:52:33  35  ,cx12
03:52:33  36  ,cx14
03:52:33  37  ,cx16
03:52:33  38  ,cx18
03:52:33  39  --
03:52:33  40  ,crr4
03:52:33  41  ,crr6
03:52:33  42  ,crr8
03:52:33  43  ,crr10
03:52:33  44  ,crr12
03:52:33  45  ,crr14
03:52:33  46  ,crr16
03:52:33  47  ,crr18
03:52:33  48  --
03:52:33  49  ,hh
03:52:33  50  ,d
03:52:33  51  ,w
03:52:33  52  ,mpm
03:52:33  53  ,mph
03:52:33  54  FROM svm6122
03:52:33  55  ORDER BY ydate
03:52:33  56  /

Table created.

Elapsed: 00:00:00.36
03:52:33 SQL> 
03:52:33 SQL> -- rpt
03:52:33 SQL> 
03:52:33 SQL> SELECT
03:52:33   2  pair
03:52:33   3  ,trend
03:52:33   4  ,gatt
03:52:33   5  ,COUNT(pair)
03:52:33   6  ,AVG(g6)
03:52:33   7  FROM svm6142
03:52:33   8  GROUP BY pair,trend,gatt
03:52:33   9  ORDER BY pair,trend,gatt
03:52:33  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6127 -.00308346
eur_usd 	-1 up	      3638  .00447891
eur_usd 	-1		42
eur_usd 	 1 nup	      5871 -.00319026
eur_usd 	 1 up	      3645 .005140343
eur_usd 	 1		30

6 rows selected.

Elapsed: 00:00:00.10
03:52:33 SQL> 
03:52:33 SQL> 
03:52:33 SQL> -- Derive NTILE based params:
03:52:33 SQL> 
03:52:33 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:01.89
03:52:35 SQL> CREATE TABLE svm6162 COMPRESS AS
03:52:35   2  SELECT
03:52:35   3  pair
03:52:35   4  ,ydate
03:52:35   5  ,prdate
03:52:35   6  ,clse
03:52:35   7  ,g6
03:52:35   8  ,gatt
03:52:35   9  ,gattn
03:52:35  10  ,trend
03:52:35  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
03:52:35  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
03:52:35  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
03:52:35  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
03:52:35  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
03:52:35  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
03:52:35  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
03:52:35  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
03:52:35  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
03:52:35  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
03:52:35  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
03:52:35  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
03:52:35  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
03:52:35  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
03:52:35  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
03:52:35  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
03:52:35  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
03:52:35  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
03:52:35  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
03:52:35  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
03:52:35  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
03:52:35  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
03:52:35  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
03:52:35  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
03:52:35  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
03:52:35  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
03:52:35  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
03:52:35  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
03:52:35  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
03:52:35  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
03:52:35  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
03:52:35  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
03:52:35  43  ,hh  att32
03:52:35  44  ,d   att33
03:52:35  45  ,w   att34
03:52:35  46  ,mpm att35
03:52:35  47  ,mph att36
03:52:35  48  ,trend att37
03:52:35  49  FROM svm6142
03:52:35  50  ORDER BY ydate
03:52:35  51  /

Table created.

Elapsed: 00:00:04.75
03:52:40 SQL> 
03:52:40 SQL> -- rpt
03:52:40 SQL> 
03:52:40 SQL> SELECT
03:52:40   2  pair
03:52:40   3  ,trend
03:52:40   4  ,gatt
03:52:40   5  ,COUNT(pair)
03:52:40   6  ,AVG(g6)
03:52:40   7  FROM svm6162
03:52:40   8  GROUP BY pair,trend,gatt
03:52:40   9  ORDER BY pair,trend,gatt
03:52:40  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6127 -.00308346
eur_usd 	-1 up	      3638  .00447891
eur_usd 	-1		42
eur_usd 	 1 nup	      5871 -.00319026
eur_usd 	 1 up	      3645 .005140343
eur_usd 	 1		30

6 rows selected.

Elapsed: 00:00:00.03
03:52:40 SQL> 
03:52:40 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.22
03:52:40 SQL> CREATE TABLE modsrc COMPRESS AS
03:52:40   2  SELECT
03:52:40   3  pair
03:52:40   4  ,ydate
03:52:40   5  ,prdate
03:52:40   6  ,trend
03:52:40   7  ,g6
03:52:40   8  ,gatt
03:52:40   9  ,gattn
03:52:40  10  FROM svm6162
03:52:40  11  /

Table created.

Elapsed: 00:00:00.09
03:52:40 SQL> 
03:52:40 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.22
03:52:40 SQL> 
03:52:40 SQL> DROP   TABLE eur_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
03:52:40 SQL> CREATE TABLE eur_ms610 COMPRESS AS
03:52:40   2  SELECT
03:52:40   3  ydate
03:52:40   4  ,trend eur_trend
03:52:40   5  ,g6    eur_g6
03:52:40   6  ,gatt  eur_gatt
03:52:40   7  ,gattn eur_gattn
03:52:40   8  FROM modsrc
03:52:40   9  /

Table created.

Elapsed: 00:00:00.07
03:52:40 SQL> 
03:52:40 SQL> ANALYZE TABLE eur_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
03:52:41 SQL> 
03:52:41 SQL> -- I need a copy of the attributes:
03:52:41 SQL> 
03:52:41 SQL> 
03:52:41 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.27
03:52:41 SQL> CREATE TABLE eur_att COMPRESS AS
03:52:41   2  SELECT
03:52:41   3  ydate
03:52:41   4  ,att00 eur_att00
03:52:41   5  ,att01 eur_att01
03:52:41   6  ,att02 eur_att02
03:52:41   7  ,att03 eur_att03
03:52:41   8  ,att04 eur_att04
03:52:41   9  ,att05 eur_att05
03:52:41  10  ,att06 eur_att06
03:52:41  11  ,att07 eur_att07
03:52:41  12  ,att08 eur_att08
03:52:41  13  ,att09 eur_att09
03:52:41  14  ,att10 eur_att10
03:52:41  15  ,att11 eur_att11
03:52:41  16  ,att12 eur_att12
03:52:41  17  ,att13 eur_att13
03:52:41  18  ,att14 eur_att14
03:52:41  19  ,att15 eur_att15
03:52:41  20  ,att16 eur_att16
03:52:41  21  ,att17 eur_att17
03:52:41  22  ,att18 eur_att18
03:52:41  23  ,att19 eur_att19
03:52:41  24  ,att20 eur_att20
03:52:41  25  ,att21 eur_att21
03:52:41  26  ,att22 eur_att22
03:52:41  27  ,att23 eur_att23
03:52:41  28  ,att24 eur_att24
03:52:41  29  ,att25 eur_att25
03:52:41  30  ,att26 eur_att26
03:52:41  31  ,att27 eur_att27
03:52:41  32  ,att28 eur_att28
03:52:41  33  ,att29 eur_att29
03:52:41  34  ,att30 eur_att30
03:52:41  35  ,att31 eur_att31
03:52:41  36  ,att32 eur_att32
03:52:41  37  ,att33 eur_att33
03:52:41  38  ,att34 eur_att34
03:52:41  39  ,att35 eur_att35
03:52:41  40  ,att36 eur_att36
03:52:41  41  ,att37 eur_att37
03:52:41  42  FROM svm6162
03:52:41  43  /

Table created.

Elapsed: 00:00:00.17
03:52:41 SQL> 
03:52:41 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
03:52:42 SQL> 
03:52:42 SQL> -- rpt
03:52:42 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19353

Elapsed: 00:00:00.85
03:52:42 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     19353

Elapsed: 00:00:00.01
03:52:42 SQL> 
03:52:42 SQL> --
03:52:42 SQL> -- aud610.sql
03:52:42 SQL> --
03:52:42 SQL> 
03:52:42 SQL> -- Creates views and tables for backtesting a forex SVM strategy
03:52:42 SQL> 
03:52:42 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.68
03:52:43 SQL> 
03:52:43 SQL> -- I created di5min here:
03:52:43 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
03:52:43 SQL> 
03:52:43 SQL> CREATE OR REPLACE VIEW svm6102 AS
03:52:43   2  SELECT
03:52:43   3  pair
03:52:43   4  ,ydate
03:52:43   5  ,prdate
03:52:43   6  ,rownum rnum -- acts as t in my time-series
03:52:43   7  ,clse
03:52:43   8  -- Derive a bunch of attributes from clse, the latest price:
03:52:43   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
03:52:43  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
03:52:43  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
03:52:43  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
03:52:43  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
03:52:43  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
03:52:43  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
03:52:43  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
03:52:43  17  --
03:52:43  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
03:52:43  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
03:52:43  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
03:52:43  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
03:52:43  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
03:52:43  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
03:52:43  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
03:52:43  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
03:52:43  26  --
03:52:43  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
03:52:43  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
03:52:43  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
03:52:43  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
03:52:43  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
03:52:43  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
03:52:43  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
03:52:43  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
03:52:43  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
03:52:43  36  FROM di5min WHERE pair LIKE'%aud%'
03:52:43  37  AND ydate > sysdate - 95
03:52:43  38  ORDER BY ydate
03:52:43  39  /

View created.

Elapsed: 00:00:00.09
03:52:43 SQL> 
03:52:43 SQL> -- rpt
03:52:43 SQL> 
03:52:43 SQL> SELECT
03:52:43   2  pair
03:52:43   3  ,COUNT(pair)
03:52:43   4  ,MIN(clse),MAX(clse)
03:52:43   5  ,MIN(avg6),MAX(avg6)
03:52:43   6  ,MIN(ydate),MAX(ydate)
03:52:43   7  FROM svm6102
03:52:43   8  GROUP BY pair
03:52:43   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
aud_usd       19350	.95405	   1.0181 .957141438 1.01556438 2010-09-26 20:55:01 2010-12-29 03:45:00

Elapsed: 00:00:00.88
03:52:44 SQL> 
03:52:44 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
03:52:44 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.20
03:52:44 SQL> CREATE TABLE svm6122 COMPRESS AS
03:52:44   2  SELECT
03:52:44   3  pair
03:52:44   4  ,ydate
03:52:44   5  ,prdate
03:52:44   6  ,clse
03:52:44   7  -- g6 is important. I want to predict g6:
03:52:44   8  ,ld6 - clse g6
03:52:44   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
03:52:44  10  -- I want more attributes from the ones I derived above:
03:52:44  11  -- clse relation to moving-min
03:52:44  12  ,clse-min4  cm4
03:52:44  13  ,clse-min6  cm6
03:52:44  14  ,clse-min8  cm8
03:52:44  15  ,clse-min10 cm10
03:52:44  16  ,clse-min12 cm12
03:52:44  17  ,clse-min14 cm14
03:52:44  18  ,clse-min16 cm16
03:52:44  19  ,clse-min18 cm18
03:52:44  20  -- clse relation to moving-avg
03:52:44  21  ,clse-avg4  ca4
03:52:44  22  ,clse-avg6  ca6
03:52:44  23  ,clse-avg8  ca8
03:52:44  24  ,clse-avg10 ca10
03:52:44  25  ,clse-avg12 ca12
03:52:44  26  ,clse-avg14 ca14
03:52:44  27  ,clse-avg16 ca16
03:52:44  28  ,clse-avg18 ca18
03:52:44  29  -- clse relation to moving-max
03:52:44  30  ,clse-max4  cx4
03:52:44  31  ,clse-max6  cx6
03:52:44  32  ,clse-max8  cx8
03:52:44  33  ,clse-max10 cx10
03:52:44  34  ,clse-max12 cx12
03:52:44  35  ,clse-max14 cx14
03:52:44  36  ,clse-max16 cx16
03:52:44  37  ,clse-max18 cx18
03:52:44  38  -- Derive more attributes.
03:52:44  39  -- I want to use CORR() here to help SVM see the shape of the series.
03:52:44  40  -- But COVAR_POP is more stable:
03:52:44  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
03:52:44  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
03:52:44  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
03:52:44  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
03:52:44  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
03:52:44  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
03:52:44  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
03:52:44  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
03:52:44  49  -- Derive date related attributes:
03:52:44  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
03:52:44  51  ,0+TO_CHAR(ydate,'D')d
03:52:44  52  ,0+TO_CHAR(ydate,'W')w
03:52:44  53  -- mpm stands for minutes-past-midnight:
03:52:44  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
03:52:44  55  -- mph stands for minutes-past-hour:
03:52:44  56  ,0+TO_CHAR(ydate,'MI')mph
03:52:44  57  FROM svm6102
03:52:44  58  ORDER BY ydate
03:52:44  59  /

Table created.

Elapsed: 00:00:02.09
03:52:46 SQL> 
03:52:46 SQL> -- rpt
03:52:46 SQL> 
03:52:46 SQL> SELECT
03:52:46   2  pair
03:52:46   3  ,COUNT(pair)
03:52:46   4  ,MIN(clse),MAX(clse)
03:52:46   5  ,MIN(ydate),MAX(ydate)
03:52:46   6  FROM svm6122
03:52:46   7  GROUP BY pair
03:52:46   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
aud_usd       19350	.95405	   1.0181 2010-09-26 20:55:01 2010-12-29 03:45:00

Elapsed: 00:00:00.15
03:52:46 SQL> 
03:52:46 SQL> -- Prepare for derivation of NTILE based params:
03:52:46 SQL> 
03:52:46 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.27
03:52:47 SQL> CREATE TABLE svm6142 COMPRESS AS
03:52:47   2  SELECT
03:52:47   3  pair
03:52:47   4  ,ydate
03:52:47   5  ,prdate
03:52:47   6  ,clse
03:52:47   7  ,g6
03:52:47   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
03:52:47   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
03:52:47  10  ,CASE WHEN trend IS NULL THEN 1
03:52:47  11  	    WHEN trend =0      THEN 1
03:52:47  12  	    ELSE trend END trend
03:52:47  13  ,cm4
03:52:47  14  ,cm6
03:52:47  15  ,cm8
03:52:47  16  ,cm10
03:52:47  17  ,cm12
03:52:47  18  ,cm14
03:52:47  19  ,cm16
03:52:47  20  ,cm18
03:52:47  21  --
03:52:47  22  ,ca4
03:52:47  23  ,ca6
03:52:47  24  ,ca8
03:52:47  25  ,ca10
03:52:47  26  ,ca12
03:52:47  27  ,ca14
03:52:47  28  ,ca16
03:52:47  29  ,ca18
03:52:47  30  --
03:52:47  31  ,cx4
03:52:47  32  ,cx6
03:52:47  33  ,cx8
03:52:47  34  ,cx10
03:52:47  35  ,cx12
03:52:47  36  ,cx14
03:52:47  37  ,cx16
03:52:47  38  ,cx18
03:52:47  39  --
03:52:47  40  ,crr4
03:52:47  41  ,crr6
03:52:47  42  ,crr8
03:52:47  43  ,crr10
03:52:47  44  ,crr12
03:52:47  45  ,crr14
03:52:47  46  ,crr16
03:52:47  47  ,crr18
03:52:47  48  --
03:52:47  49  ,hh
03:52:47  50  ,d
03:52:47  51  ,w
03:52:47  52  ,mpm
03:52:47  53  ,mph
03:52:47  54  FROM svm6122
03:52:47  55  ORDER BY ydate
03:52:47  56  /

Table created.

Elapsed: 00:00:00.37
03:52:47 SQL> 
03:52:47 SQL> -- rpt
03:52:47 SQL> 
03:52:47 SQL> SELECT
03:52:47   2  pair
03:52:47   3  ,trend
03:52:47   4  ,gatt
03:52:47   5  ,COUNT(pair)
03:52:47   6  ,AVG(g6)
03:52:47   7  FROM svm6142
03:52:47   8  GROUP BY pair,trend,gatt
03:52:47   9  ORDER BY pair,trend,gatt
03:52:47  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5175 -.00213551
aud_usd 	-1 up	      3777 .003738364
aud_usd 	-1		51
aud_usd 	 1 nup	      6679 -.00213644
aud_usd 	 1 up	      3647 .004062925
aud_usd 	 1		21

6 rows selected.

Elapsed: 00:00:00.07
03:52:47 SQL> 
03:52:47 SQL> 
03:52:47 SQL> -- Derive NTILE based params:
03:52:47 SQL> 
03:52:47 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.17
03:52:47 SQL> CREATE TABLE svm6162 COMPRESS AS
03:52:47   2  SELECT
03:52:47   3  pair
03:52:47   4  ,ydate
03:52:47   5  ,prdate
03:52:47   6  ,clse
03:52:47   7  ,g6
03:52:47   8  ,gatt
03:52:47   9  ,gattn
03:52:47  10  ,trend
03:52:47  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
03:52:47  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
03:52:47  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
03:52:47  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
03:52:47  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
03:52:47  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
03:52:47  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
03:52:47  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
03:52:47  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
03:52:47  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
03:52:47  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
03:52:47  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
03:52:47  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
03:52:47  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
03:52:47  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
03:52:47  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
03:52:47  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
03:52:47  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
03:52:47  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
03:52:47  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
03:52:47  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
03:52:47  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
03:52:47  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
03:52:47  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
03:52:47  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
03:52:47  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
03:52:47  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
03:52:47  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
03:52:47  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
03:52:47  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
03:52:47  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
03:52:47  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
03:52:47  43  ,hh  att32
03:52:47  44  ,d   att33
03:52:47  45  ,w   att34
03:52:47  46  ,mpm att35
03:52:47  47  ,mph att36
03:52:47  48  ,trend att37
03:52:47  49  FROM svm6142
03:52:47  50  ORDER BY ydate
03:52:47  51  /

Table created.

Elapsed: 00:00:04.65
03:52:52 SQL> 
03:52:52 SQL> -- rpt
03:52:52 SQL> 
03:52:52 SQL> SELECT
03:52:52   2  pair
03:52:52   3  ,trend
03:52:52   4  ,gatt
03:52:52   5  ,COUNT(pair)
03:52:52   6  ,AVG(g6)
03:52:52   7  FROM svm6162
03:52:52   8  GROUP BY pair,trend,gatt
03:52:52   9  ORDER BY pair,trend,gatt
03:52:52  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5175 -.00213551
aud_usd 	-1 up	      3777 .003738364
aud_usd 	-1		51
aud_usd 	 1 nup	      6679 -.00213644
aud_usd 	 1 up	      3647 .004062925
aud_usd 	 1		21

6 rows selected.

Elapsed: 00:00:00.03
03:52:52 SQL> 
03:52:52 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
03:52:52 SQL> CREATE TABLE modsrc COMPRESS AS
03:52:52   2  SELECT
03:52:52   3  pair
03:52:52   4  ,ydate
03:52:52   5  ,prdate
03:52:52   6  ,trend
03:52:52   7  ,g6
03:52:52   8  ,gatt
03:52:52   9  ,gattn
03:52:52  10  FROM svm6162
03:52:52  11  /

Table created.

Elapsed: 00:00:00.08
03:52:52 SQL> 
03:52:52 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
03:52:52 SQL> 
03:52:52 SQL> DROP   TABLE aud_ms610 ;

Table dropped.

Elapsed: 00:00:00.09
03:52:53 SQL> CREATE TABLE aud_ms610 COMPRESS AS
03:52:53   2  SELECT
03:52:53   3  ydate
03:52:53   4  ,trend aud_trend
03:52:53   5  ,g6    aud_g6
03:52:53   6  ,gatt  aud_gatt
03:52:53   7  ,gattn aud_gattn
03:52:53   8  FROM modsrc
03:52:53   9  /

Table created.

Elapsed: 00:00:00.09
03:52:53 SQL> 
03:52:53 SQL> ANALYZE TABLE aud_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
03:52:53 SQL> 
03:52:53 SQL> -- I need a copy of the attributes:
03:52:53 SQL> 
03:52:53 SQL> 
03:52:53 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.05
03:52:53 SQL> CREATE TABLE aud_att COMPRESS AS
03:52:53   2  SELECT
03:52:53   3  ydate
03:52:53   4  ,att00 aud_att00
03:52:53   5  ,att01 aud_att01
03:52:53   6  ,att02 aud_att02
03:52:53   7  ,att03 aud_att03
03:52:53   8  ,att04 aud_att04
03:52:53   9  ,att05 aud_att05
03:52:53  10  ,att06 aud_att06
03:52:53  11  ,att07 aud_att07
03:52:53  12  ,att08 aud_att08
03:52:53  13  ,att09 aud_att09
03:52:53  14  ,att10 aud_att10
03:52:53  15  ,att11 aud_att11
03:52:53  16  ,att12 aud_att12
03:52:53  17  ,att13 aud_att13
03:52:53  18  ,att14 aud_att14
03:52:53  19  ,att15 aud_att15
03:52:53  20  ,att16 aud_att16
03:52:53  21  ,att17 aud_att17
03:52:53  22  ,att18 aud_att18
03:52:53  23  ,att19 aud_att19
03:52:53  24  ,att20 aud_att20
03:52:53  25  ,att21 aud_att21
03:52:53  26  ,att22 aud_att22
03:52:53  27  ,att23 aud_att23
03:52:53  28  ,att24 aud_att24
03:52:53  29  ,att25 aud_att25
03:52:53  30  ,att26 aud_att26
03:52:53  31  ,att27 aud_att27
03:52:53  32  ,att28 aud_att28
03:52:53  33  ,att29 aud_att29
03:52:53  34  ,att30 aud_att30
03:52:53  35  ,att31 aud_att31
03:52:53  36  ,att32 aud_att32
03:52:53  37  ,att33 aud_att33
03:52:53  38  ,att34 aud_att34
03:52:53  39  ,att35 aud_att35
03:52:53  40  ,att36 aud_att36
03:52:53  41  ,att37 aud_att37
03:52:53  42  FROM svm6162
03:52:53  43  /

Table created.

Elapsed: 00:00:00.17
03:52:53 SQL> 
03:52:53 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.43
03:52:53 SQL> 
03:52:53 SQL> -- rpt
03:52:53 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19350

Elapsed: 00:00:00.82
03:52:54 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     19350

Elapsed: 00:00:00.00
03:52:54 SQL> 
03:52:54 SQL> --
03:52:54 SQL> -- gbp610.sql
03:52:54 SQL> --
03:52:54 SQL> 
03:52:54 SQL> -- Creates views and tables for backtesting a forex SVM strategy
03:52:54 SQL> 
03:52:54 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.52
03:52:55 SQL> 
03:52:55 SQL> -- I created di5min here:
03:52:55 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
03:52:55 SQL> 
03:52:55 SQL> CREATE OR REPLACE VIEW svm6102 AS
03:52:55   2  SELECT
03:52:55   3  pair
03:52:55   4  ,ydate
03:52:55   5  ,prdate
03:52:55   6  ,rownum rnum -- acts as t in my time-series
03:52:55   7  ,clse
03:52:55   8  -- Derive a bunch of attributes from clse, the latest price:
03:52:55   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
03:52:55  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
03:52:55  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
03:52:55  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
03:52:55  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
03:52:55  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
03:52:55  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
03:52:55  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
03:52:55  17  --
03:52:55  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
03:52:55  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
03:52:55  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
03:52:55  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
03:52:55  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
03:52:55  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
03:52:55  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
03:52:55  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
03:52:55  26  --
03:52:55  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
03:52:55  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
03:52:55  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
03:52:55  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
03:52:55  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
03:52:55  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
03:52:55  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
03:52:55  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
03:52:55  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
03:52:55  36  FROM di5min WHERE pair LIKE'%gbp%'
03:52:55  37  AND ydate > sysdate - 95
03:52:55  38  ORDER BY ydate
03:52:55  39  /

View created.

Elapsed: 00:00:00.06
03:52:55 SQL> 
03:52:55 SQL> -- rpt
03:52:55 SQL> 
03:52:55 SQL> SELECT
03:52:55   2  pair
03:52:55   3  ,COUNT(pair)
03:52:55   4  ,MIN(clse),MAX(clse)
03:52:55   5  ,MIN(avg6),MAX(avg6)
03:52:55   6  ,MIN(ydate),MAX(ydate)
03:52:55   7  FROM svm6102
03:52:55   8  GROUP BY pair
03:52:55   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
gbp_usd       19352   1.535325	   1.6295 1.53696747 1.62716986 2010-09-26 20:55:01 2010-12-29 03:45:00

Elapsed: 00:00:00.84
03:52:56 SQL> 
03:52:56 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
03:52:56 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.19
03:52:56 SQL> CREATE TABLE svm6122 COMPRESS AS
03:52:56   2  SELECT
03:52:56   3  pair
03:52:56   4  ,ydate
03:52:56   5  ,prdate
03:52:56   6  ,clse
03:52:56   7  -- g6 is important. I want to predict g6:
03:52:56   8  ,ld6 - clse g6
03:52:56   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
03:52:56  10  -- I want more attributes from the ones I derived above:
03:52:56  11  -- clse relation to moving-min
03:52:56  12  ,clse-min4  cm4
03:52:56  13  ,clse-min6  cm6
03:52:56  14  ,clse-min8  cm8
03:52:56  15  ,clse-min10 cm10
03:52:56  16  ,clse-min12 cm12
03:52:56  17  ,clse-min14 cm14
03:52:56  18  ,clse-min16 cm16
03:52:56  19  ,clse-min18 cm18
03:52:56  20  -- clse relation to moving-avg
03:52:56  21  ,clse-avg4  ca4
03:52:56  22  ,clse-avg6  ca6
03:52:56  23  ,clse-avg8  ca8
03:52:56  24  ,clse-avg10 ca10
03:52:56  25  ,clse-avg12 ca12
03:52:56  26  ,clse-avg14 ca14
03:52:56  27  ,clse-avg16 ca16
03:52:56  28  ,clse-avg18 ca18
03:52:56  29  -- clse relation to moving-max
03:52:56  30  ,clse-max4  cx4
03:52:56  31  ,clse-max6  cx6
03:52:56  32  ,clse-max8  cx8
03:52:56  33  ,clse-max10 cx10
03:52:56  34  ,clse-max12 cx12
03:52:56  35  ,clse-max14 cx14
03:52:56  36  ,clse-max16 cx16
03:52:56  37  ,clse-max18 cx18
03:52:56  38  -- Derive more attributes.
03:52:56  39  -- I want to use CORR() here to help SVM see the shape of the series.
03:52:56  40  -- But COVAR_POP is more stable:
03:52:56  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
03:52:56  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
03:52:56  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
03:52:56  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
03:52:56  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
03:52:56  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
03:52:56  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
03:52:56  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
03:52:56  49  -- Derive date related attributes:
03:52:56  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
03:52:56  51  ,0+TO_CHAR(ydate,'D')d
03:52:56  52  ,0+TO_CHAR(ydate,'W')w
03:52:56  53  -- mpm stands for minutes-past-midnight:
03:52:56  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
03:52:56  55  -- mph stands for minutes-past-hour:
03:52:56  56  ,0+TO_CHAR(ydate,'MI')mph
03:52:56  57  FROM svm6102
03:52:56  58  ORDER BY ydate
03:52:56  59  /

Table created.

Elapsed: 00:00:02.06
03:52:58 SQL> 
03:52:58 SQL> -- rpt
03:52:58 SQL> 
03:52:58 SQL> SELECT
03:52:58   2  pair
03:52:58   3  ,COUNT(pair)
03:52:58   4  ,MIN(clse),MAX(clse)
03:52:58   5  ,MIN(ydate),MAX(ydate)
03:52:58   6  FROM svm6122
03:52:58   7  GROUP BY pair
03:52:58   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
gbp_usd       19352   1.535325	   1.6295 2010-09-26 20:55:01 2010-12-29 03:45:00

Elapsed: 00:00:00.19
03:52:58 SQL> 
03:52:58 SQL> -- Prepare for derivation of NTILE based params:
03:52:58 SQL> 
03:52:58 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.19
03:52:58 SQL> CREATE TABLE svm6142 COMPRESS AS
03:52:58   2  SELECT
03:52:58   3  pair
03:52:58   4  ,ydate
03:52:58   5  ,prdate
03:52:58   6  ,clse
03:52:58   7  ,g6
03:52:58   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
03:52:58   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
03:52:58  10  ,CASE WHEN trend IS NULL THEN 1
03:52:58  11  	    WHEN trend =0      THEN 1
03:52:58  12  	    ELSE trend END trend
03:52:58  13  ,cm4
03:52:58  14  ,cm6
03:52:58  15  ,cm8
03:52:58  16  ,cm10
03:52:58  17  ,cm12
03:52:58  18  ,cm14
03:52:58  19  ,cm16
03:52:58  20  ,cm18
03:52:58  21  --
03:52:58  22  ,ca4
03:52:58  23  ,ca6
03:52:58  24  ,ca8
03:52:58  25  ,ca10
03:52:58  26  ,ca12
03:52:58  27  ,ca14
03:52:58  28  ,ca16
03:52:58  29  ,ca18
03:52:58  30  --
03:52:58  31  ,cx4
03:52:58  32  ,cx6
03:52:58  33  ,cx8
03:52:58  34  ,cx10
03:52:58  35  ,cx12
03:52:58  36  ,cx14
03:52:58  37  ,cx16
03:52:58  38  ,cx18
03:52:58  39  --
03:52:58  40  ,crr4
03:52:58  41  ,crr6
03:52:58  42  ,crr8
03:52:58  43  ,crr10
03:52:58  44  ,crr12
03:52:58  45  ,crr14
03:52:58  46  ,crr16
03:52:58  47  ,crr18
03:52:58  48  --
03:52:58  49  ,hh
03:52:58  50  ,d
03:52:58  51  ,w
03:52:58  52  ,mpm
03:52:58  53  ,mph
03:52:58  54  FROM svm6122
03:52:58  55  ORDER BY ydate
03:52:58  56  /

Table created.

Elapsed: 00:00:00.44
03:52:59 SQL> 
03:52:59 SQL> -- rpt
03:52:59 SQL> 
03:52:59 SQL> SELECT
03:52:59   2  pair
03:52:59   3  ,trend
03:52:59   4  ,gatt
03:52:59   5  ,COUNT(pair)
03:52:59   6  ,AVG(g6)
03:52:59   7  FROM svm6142
03:52:59   8  GROUP BY pair,trend,gatt
03:52:59   9  ORDER BY pair,trend,gatt
03:52:59  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6294 -.00256089
gbp_usd 	-1 up	      3498  .00424514
gbp_usd 	-1		22
gbp_usd 	 1 nup	      6124 -.00270402
gbp_usd 	 1 up	      3364 .004354448
gbp_usd 	 1		50

6 rows selected.

Elapsed: 00:00:00.14
03:52:59 SQL> 
03:52:59 SQL> 
03:52:59 SQL> -- Derive NTILE based params:
03:52:59 SQL> 
03:52:59 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.20
03:52:59 SQL> CREATE TABLE svm6162 COMPRESS AS
03:52:59   2  SELECT
03:52:59   3  pair
03:52:59   4  ,ydate
03:52:59   5  ,prdate
03:52:59   6  ,clse
03:52:59   7  ,g6
03:52:59   8  ,gatt
03:52:59   9  ,gattn
03:52:59  10  ,trend
03:52:59  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
03:52:59  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
03:52:59  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
03:52:59  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
03:52:59  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
03:52:59  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
03:52:59  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
03:52:59  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
03:52:59  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
03:52:59  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
03:52:59  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
03:52:59  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
03:52:59  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
03:52:59  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
03:52:59  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
03:52:59  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
03:52:59  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
03:52:59  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
03:52:59  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
03:52:59  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
03:52:59  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
03:52:59  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
03:52:59  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
03:52:59  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
03:52:59  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
03:52:59  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
03:52:59  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
03:52:59  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
03:52:59  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
03:52:59  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
03:52:59  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
03:52:59  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
03:52:59  43  ,hh  att32
03:52:59  44  ,d   att33
03:52:59  45  ,w   att34
03:52:59  46  ,mpm att35
03:52:59  47  ,mph att36
03:52:59  48  ,trend att37
03:52:59  49  FROM svm6142
03:52:59  50  ORDER BY ydate
03:52:59  51  /

Table created.

Elapsed: 00:00:04.67
03:53:04 SQL> 
03:53:04 SQL> -- rpt
03:53:04 SQL> 
03:53:04 SQL> SELECT
03:53:04   2  pair
03:53:04   3  ,trend
03:53:04   4  ,gatt
03:53:04   5  ,COUNT(pair)
03:53:04   6  ,AVG(g6)
03:53:04   7  FROM svm6162
03:53:04   8  GROUP BY pair,trend,gatt
03:53:04   9  ORDER BY pair,trend,gatt
03:53:04  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6294 -.00256089
gbp_usd 	-1 up	      3498  .00424514
gbp_usd 	-1		22
gbp_usd 	 1 nup	      6124 -.00270402
gbp_usd 	 1 up	      3364 .004354448
gbp_usd 	 1		50

6 rows selected.

Elapsed: 00:00:00.02
03:53:04 SQL> 
03:53:04 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.15
03:53:04 SQL> CREATE TABLE modsrc COMPRESS AS
03:53:04   2  SELECT
03:53:04   3  pair
03:53:04   4  ,ydate
03:53:04   5  ,prdate
03:53:04   6  ,trend
03:53:04   7  ,g6
03:53:04   8  ,gatt
03:53:04   9  ,gattn
03:53:04  10  FROM svm6162
03:53:04  11  /

Table created.

Elapsed: 00:00:00.11
03:53:04 SQL> 
03:53:04 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
03:53:04 SQL> 
03:53:04 SQL> DROP   TABLE gbp_ms610 ;

Table dropped.

Elapsed: 00:00:00.08
03:53:04 SQL> CREATE TABLE gbp_ms610 COMPRESS AS
03:53:04   2  SELECT
03:53:04   3  ydate
03:53:04   4  ,trend gbp_trend
03:53:04   5  ,g6    gbp_g6
03:53:04   6  ,gatt  gbp_gatt
03:53:04   7  ,gattn gbp_gattn
03:53:04   8  FROM modsrc
03:53:04   9  /

Table created.

Elapsed: 00:00:00.09
03:53:04 SQL> 
03:53:04 SQL> ANALYZE TABLE gbp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.14
03:53:05 SQL> 
03:53:05 SQL> -- I need a copy of the attributes:
03:53:05 SQL> 
03:53:05 SQL> 
03:53:05 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.04
03:53:05 SQL> CREATE TABLE gbp_att COMPRESS AS
03:53:05   2  SELECT
03:53:05   3  ydate
03:53:05   4  ,att00 gbp_att00
03:53:05   5  ,att01 gbp_att01
03:53:05   6  ,att02 gbp_att02
03:53:05   7  ,att03 gbp_att03
03:53:05   8  ,att04 gbp_att04
03:53:05   9  ,att05 gbp_att05
03:53:05  10  ,att06 gbp_att06
03:53:05  11  ,att07 gbp_att07
03:53:05  12  ,att08 gbp_att08
03:53:05  13  ,att09 gbp_att09
03:53:05  14  ,att10 gbp_att10
03:53:05  15  ,att11 gbp_att11
03:53:05  16  ,att12 gbp_att12
03:53:05  17  ,att13 gbp_att13
03:53:05  18  ,att14 gbp_att14
03:53:05  19  ,att15 gbp_att15
03:53:05  20  ,att16 gbp_att16
03:53:05  21  ,att17 gbp_att17
03:53:05  22  ,att18 gbp_att18
03:53:05  23  ,att19 gbp_att19
03:53:05  24  ,att20 gbp_att20
03:53:05  25  ,att21 gbp_att21
03:53:05  26  ,att22 gbp_att22
03:53:05  27  ,att23 gbp_att23
03:53:05  28  ,att24 gbp_att24
03:53:05  29  ,att25 gbp_att25
03:53:05  30  ,att26 gbp_att26
03:53:05  31  ,att27 gbp_att27
03:53:05  32  ,att28 gbp_att28
03:53:05  33  ,att29 gbp_att29
03:53:05  34  ,att30 gbp_att30
03:53:05  35  ,att31 gbp_att31
03:53:05  36  ,att32 gbp_att32
03:53:05  37  ,att33 gbp_att33
03:53:05  38  ,att34 gbp_att34
03:53:05  39  ,att35 gbp_att35
03:53:05  40  ,att36 gbp_att36
03:53:05  41  ,att37 gbp_att37
03:53:05  42  FROM svm6162
03:53:05  43  /

Table created.

Elapsed: 00:00:00.17
03:53:05 SQL> 
03:53:05 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.49
03:53:05 SQL> 
03:53:05 SQL> -- rpt
03:53:05 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19352

Elapsed: 00:00:00.83
03:53:06 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     19352

Elapsed: 00:00:00.00
03:53:06 SQL> 
03:53:06 SQL> --
03:53:06 SQL> -- jpy610.sql
03:53:06 SQL> --
03:53:06 SQL> 
03:53:06 SQL> -- Creates views and tables for backtesting a forex SVM strategy
03:53:06 SQL> 
03:53:06 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.50
03:53:07 SQL> 
03:53:07 SQL> -- I created di5min here:
03:53:07 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
03:53:07 SQL> 
03:53:07 SQL> CREATE OR REPLACE VIEW svm6102 AS
03:53:07   2  SELECT
03:53:07   3  pair
03:53:07   4  ,ydate
03:53:07   5  ,prdate
03:53:07   6  ,rownum rnum -- acts as t in my time-series
03:53:07   7  ,clse
03:53:07   8  -- Derive a bunch of attributes from clse, the latest price:
03:53:07   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
03:53:07  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
03:53:07  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
03:53:07  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
03:53:07  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
03:53:07  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
03:53:07  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
03:53:07  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
03:53:07  17  --
03:53:07  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
03:53:07  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
03:53:07  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
03:53:07  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
03:53:07  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
03:53:07  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
03:53:07  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
03:53:07  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
03:53:07  26  --
03:53:07  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
03:53:07  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
03:53:07  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
03:53:07  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
03:53:07  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
03:53:07  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
03:53:07  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
03:53:07  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
03:53:07  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
03:53:07  36  FROM di5min WHERE pair LIKE'%jpy%'
03:53:07  37  AND ydate > sysdate - 95
03:53:07  38  ORDER BY ydate
03:53:07  39  /

View created.

Elapsed: 00:00:00.05
03:53:07 SQL> 
03:53:07 SQL> -- rpt
03:53:07 SQL> 
03:53:07 SQL> SELECT
03:53:07   2  pair
03:53:07   3  ,COUNT(pair)
03:53:07   4  ,MIN(clse),MAX(clse)
03:53:07   5  ,MIN(avg6),MAX(avg6)
03:53:07   6  ,MIN(ydate),MAX(ydate)
03:53:07   7  FROM svm6102
03:53:07   8  GROUP BY pair
03:53:07   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_jpy       19350	 80.25	   84.485 80.3595205 84.3105479 2010-09-26 20:55:01 2010-12-29 03:50:00

Elapsed: 00:00:00.89
03:53:08 SQL> 
03:53:08 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
03:53:08 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.18
03:53:08 SQL> CREATE TABLE svm6122 COMPRESS AS
03:53:08   2  SELECT
03:53:08   3  pair
03:53:08   4  ,ydate
03:53:08   5  ,prdate
03:53:08   6  ,clse
03:53:08   7  -- g6 is important. I want to predict g6:
03:53:08   8  ,ld6 - clse g6
03:53:08   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
03:53:08  10  -- I want more attributes from the ones I derived above:
03:53:08  11  -- clse relation to moving-min
03:53:08  12  ,clse-min4  cm4
03:53:08  13  ,clse-min6  cm6
03:53:08  14  ,clse-min8  cm8
03:53:08  15  ,clse-min10 cm10
03:53:08  16  ,clse-min12 cm12
03:53:08  17  ,clse-min14 cm14
03:53:08  18  ,clse-min16 cm16
03:53:08  19  ,clse-min18 cm18
03:53:08  20  -- clse relation to moving-avg
03:53:08  21  ,clse-avg4  ca4
03:53:08  22  ,clse-avg6  ca6
03:53:08  23  ,clse-avg8  ca8
03:53:08  24  ,clse-avg10 ca10
03:53:08  25  ,clse-avg12 ca12
03:53:08  26  ,clse-avg14 ca14
03:53:08  27  ,clse-avg16 ca16
03:53:08  28  ,clse-avg18 ca18
03:53:08  29  -- clse relation to moving-max
03:53:08  30  ,clse-max4  cx4
03:53:08  31  ,clse-max6  cx6
03:53:08  32  ,clse-max8  cx8
03:53:08  33  ,clse-max10 cx10
03:53:08  34  ,clse-max12 cx12
03:53:08  35  ,clse-max14 cx14
03:53:08  36  ,clse-max16 cx16
03:53:08  37  ,clse-max18 cx18
03:53:08  38  -- Derive more attributes.
03:53:08  39  -- I want to use CORR() here to help SVM see the shape of the series.
03:53:08  40  -- But COVAR_POP is more stable:
03:53:08  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
03:53:08  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
03:53:08  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
03:53:08  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
03:53:08  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
03:53:08  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
03:53:08  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
03:53:08  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
03:53:08  49  -- Derive date related attributes:
03:53:08  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
03:53:08  51  ,0+TO_CHAR(ydate,'D')d
03:53:08  52  ,0+TO_CHAR(ydate,'W')w
03:53:08  53  -- mpm stands for minutes-past-midnight:
03:53:08  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
03:53:08  55  -- mph stands for minutes-past-hour:
03:53:08  56  ,0+TO_CHAR(ydate,'MI')mph
03:53:08  57  FROM svm6102
03:53:08  58  ORDER BY ydate
03:53:08  59  /

Table created.

Elapsed: 00:00:02.03
03:53:10 SQL> 
03:53:10 SQL> -- rpt
03:53:10 SQL> 
03:53:10 SQL> SELECT
03:53:10   2  pair
03:53:10   3  ,COUNT(pair)
03:53:10   4  ,MIN(clse),MAX(clse)
03:53:10   5  ,MIN(ydate),MAX(ydate)
03:53:10   6  FROM svm6122
03:53:10   7  GROUP BY pair
03:53:10   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_jpy       19350	 80.25	   84.485 2010-09-26 20:55:01 2010-12-29 03:50:00

Elapsed: 00:00:00.09
03:53:10 SQL> 
03:53:10 SQL> -- Prepare for derivation of NTILE based params:
03:53:10 SQL> 
03:53:10 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.29
03:53:10 SQL> CREATE TABLE svm6142 COMPRESS AS
03:53:10   2  SELECT
03:53:10   3  pair
03:53:10   4  ,ydate
03:53:10   5  ,prdate
03:53:10   6  ,clse
03:53:10   7  ,g6
03:53:10   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
03:53:10   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
03:53:10  10  ,CASE WHEN trend IS NULL THEN 1
03:53:10  11  	    WHEN trend =0      THEN 1
03:53:10  12  	    ELSE trend END trend
03:53:10  13  ,cm4
03:53:10  14  ,cm6
03:53:10  15  ,cm8
03:53:10  16  ,cm10
03:53:10  17  ,cm12
03:53:10  18  ,cm14
03:53:10  19  ,cm16
03:53:10  20  ,cm18
03:53:10  21  --
03:53:10  22  ,ca4
03:53:10  23  ,ca6
03:53:10  24  ,ca8
03:53:10  25  ,ca10
03:53:10  26  ,ca12
03:53:10  27  ,ca14
03:53:10  28  ,ca16
03:53:10  29  ,ca18
03:53:10  30  --
03:53:10  31  ,cx4
03:53:10  32  ,cx6
03:53:10  33  ,cx8
03:53:10  34  ,cx10
03:53:10  35  ,cx12
03:53:10  36  ,cx14
03:53:10  37  ,cx16
03:53:10  38  ,cx18
03:53:10  39  --
03:53:10  40  ,crr4
03:53:10  41  ,crr6
03:53:10  42  ,crr8
03:53:10  43  ,crr10
03:53:10  44  ,crr12
03:53:10  45  ,crr14
03:53:10  46  ,crr16
03:53:10  47  ,crr18
03:53:10  48  --
03:53:10  49  ,hh
03:53:10  50  ,d
03:53:10  51  ,w
03:53:10  52  ,mpm
03:53:10  53  ,mph
03:53:10  54  FROM svm6122
03:53:10  55  ORDER BY ydate
03:53:10  56  /

Table created.

Elapsed: 00:00:00.34
03:53:10 SQL> 
03:53:10 SQL> -- rpt
03:53:10 SQL> 
03:53:10 SQL> SELECT
03:53:10   2  pair
03:53:10   3  ,trend
03:53:10   4  ,gatt
03:53:10   5  ,COUNT(pair)
03:53:10   6  ,AVG(g6)
03:53:10   7  FROM svm6142
03:53:10   8  GROUP BY pair,trend,gatt
03:53:10   9  ORDER BY pair,trend,gatt
03:53:10  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5097 -.16260702
usd_jpy 	-1 up	      4954 .163304745
usd_jpy 	-1		34
usd_jpy 	 1 nup	      5134 -.15508333
usd_jpy 	 1 up	      4093 .165084061
usd_jpy 	 1		38

6 rows selected.

Elapsed: 00:00:00.08
03:53:11 SQL> 
03:53:11 SQL> 
03:53:11 SQL> -- Derive NTILE based params:
03:53:11 SQL> 
03:53:11 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.24
03:53:11 SQL> CREATE TABLE svm6162 COMPRESS AS
03:53:11   2  SELECT
03:53:11   3  pair
03:53:11   4  ,ydate
03:53:11   5  ,prdate
03:53:11   6  ,clse
03:53:11   7  ,g6
03:53:11   8  ,gatt
03:53:11   9  ,gattn
03:53:11  10  ,trend
03:53:11  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
03:53:11  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
03:53:11  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
03:53:11  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
03:53:11  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
03:53:11  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
03:53:11  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
03:53:11  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
03:53:11  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
03:53:11  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
03:53:11  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
03:53:11  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
03:53:11  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
03:53:11  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
03:53:11  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
03:53:11  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
03:53:11  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
03:53:11  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
03:53:11  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
03:53:11  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
03:53:11  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
03:53:11  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
03:53:11  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
03:53:11  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
03:53:11  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
03:53:11  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
03:53:11  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
03:53:11  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
03:53:11  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
03:53:11  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
03:53:11  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
03:53:11  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
03:53:11  43  ,hh  att32
03:53:11  44  ,d   att33
03:53:11  45  ,w   att34
03:53:11  46  ,mpm att35
03:53:11  47  ,mph att36
03:53:11  48  ,trend att37
03:53:11  49  FROM svm6142
03:53:11  50  ORDER BY ydate
03:53:11  51  /

Table created.

Elapsed: 00:00:04.67
03:53:15 SQL> 
03:53:15 SQL> -- rpt
03:53:15 SQL> 
03:53:15 SQL> SELECT
03:53:15   2  pair
03:53:15   3  ,trend
03:53:15   4  ,gatt
03:53:15   5  ,COUNT(pair)
03:53:15   6  ,AVG(g6)
03:53:15   7  FROM svm6162
03:53:15   8  GROUP BY pair,trend,gatt
03:53:15   9  ORDER BY pair,trend,gatt
03:53:15  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5097 -.16260702
usd_jpy 	-1 up	      4954 .163304745
usd_jpy 	-1		34
usd_jpy 	 1 nup	      5134 -.15508333
usd_jpy 	 1 up	      4093 .165084061
usd_jpy 	 1		38

6 rows selected.

Elapsed: 00:00:00.03
03:53:15 SQL> 
03:53:15 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
03:53:16 SQL> CREATE TABLE modsrc COMPRESS AS
03:53:16   2  SELECT
03:53:16   3  pair
03:53:16   4  ,ydate
03:53:16   5  ,prdate
03:53:16   6  ,trend
03:53:16   7  ,g6
03:53:16   8  ,gatt
03:53:16   9  ,gattn
03:53:16  10  FROM svm6162
03:53:16  11  /

Table created.

Elapsed: 00:00:00.08
03:53:16 SQL> 
03:53:16 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
03:53:16 SQL> 
03:53:16 SQL> DROP   TABLE jpy_ms610 ;

Table dropped.

Elapsed: 00:00:00.11
03:53:16 SQL> CREATE TABLE jpy_ms610 COMPRESS AS
03:53:16   2  SELECT
03:53:16   3  ydate
03:53:16   4  ,trend jpy_trend
03:53:16   5  ,g6    jpy_g6
03:53:16   6  ,gatt  jpy_gatt
03:53:16   7  ,gattn jpy_gattn
03:53:16   8  FROM modsrc
03:53:16   9  /

Table created.

Elapsed: 00:00:00.06
03:53:16 SQL> 
03:53:16 SQL> ANALYZE TABLE jpy_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
03:53:16 SQL> 
03:53:16 SQL> -- I need a copy of the attributes:
03:53:16 SQL> 
03:53:16 SQL> 
03:53:16 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.05
03:53:16 SQL> CREATE TABLE jpy_att COMPRESS AS
03:53:16   2  SELECT
03:53:16   3  ydate
03:53:16   4  ,att00 jpy_att00
03:53:16   5  ,att01 jpy_att01
03:53:16   6  ,att02 jpy_att02
03:53:16   7  ,att03 jpy_att03
03:53:16   8  ,att04 jpy_att04
03:53:16   9  ,att05 jpy_att05
03:53:16  10  ,att06 jpy_att06
03:53:16  11  ,att07 jpy_att07
03:53:16  12  ,att08 jpy_att08
03:53:16  13  ,att09 jpy_att09
03:53:16  14  ,att10 jpy_att10
03:53:16  15  ,att11 jpy_att11
03:53:16  16  ,att12 jpy_att12
03:53:16  17  ,att13 jpy_att13
03:53:16  18  ,att14 jpy_att14
03:53:16  19  ,att15 jpy_att15
03:53:16  20  ,att16 jpy_att16
03:53:16  21  ,att17 jpy_att17
03:53:16  22  ,att18 jpy_att18
03:53:16  23  ,att19 jpy_att19
03:53:16  24  ,att20 jpy_att20
03:53:16  25  ,att21 jpy_att21
03:53:16  26  ,att22 jpy_att22
03:53:16  27  ,att23 jpy_att23
03:53:16  28  ,att24 jpy_att24
03:53:16  29  ,att25 jpy_att25
03:53:16  30  ,att26 jpy_att26
03:53:16  31  ,att27 jpy_att27
03:53:16  32  ,att28 jpy_att28
03:53:16  33  ,att29 jpy_att29
03:53:16  34  ,att30 jpy_att30
03:53:16  35  ,att31 jpy_att31
03:53:16  36  ,att32 jpy_att32
03:53:16  37  ,att33 jpy_att33
03:53:16  38  ,att34 jpy_att34
03:53:16  39  ,att35 jpy_att35
03:53:16  40  ,att36 jpy_att36
03:53:16  41  ,att37 jpy_att37
03:53:16  42  FROM svm6162
03:53:16  43  /

Table created.

Elapsed: 00:00:00.17
03:53:16 SQL> 
03:53:16 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.42
03:53:17 SQL> 
03:53:17 SQL> -- rpt
03:53:17 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19350

Elapsed: 00:00:00.86
03:53:18 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     19350

Elapsed: 00:00:00.00
03:53:18 SQL> 
03:53:18 SQL> --
03:53:18 SQL> -- cad610.sql
03:53:18 SQL> --
03:53:18 SQL> 
03:53:18 SQL> -- Creates views and tables for backtesting a forex SVM strategy
03:53:18 SQL> 
03:53:18 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.40
03:53:18 SQL> 
03:53:18 SQL> -- I created di5min here:
03:53:18 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
03:53:18 SQL> 
03:53:18 SQL> CREATE OR REPLACE VIEW svm6102 AS
03:53:18   2  SELECT
03:53:18   3  pair
03:53:18   4  ,ydate
03:53:18   5  ,prdate
03:53:18   6  ,rownum rnum -- acts as t in my time-series
03:53:18   7  ,clse
03:53:18   8  -- Derive a bunch of attributes from clse, the latest price:
03:53:18   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
03:53:18  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
03:53:18  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
03:53:18  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
03:53:18  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
03:53:18  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
03:53:18  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
03:53:18  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
03:53:18  17  --
03:53:18  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
03:53:18  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
03:53:18  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
03:53:18  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
03:53:18  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
03:53:18  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
03:53:18  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
03:53:18  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
03:53:18  26  --
03:53:18  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
03:53:18  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
03:53:18  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
03:53:18  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
03:53:18  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
03:53:18  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
03:53:18  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
03:53:18  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
03:53:18  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
03:53:18  36  FROM di5min WHERE pair LIKE'%cad%'
03:53:18  37  AND ydate > sysdate - 95
03:53:18  38  ORDER BY ydate
03:53:18  39  /

View created.

Elapsed: 00:00:00.05
03:53:18 SQL> 
03:53:18 SQL> -- rpt
03:53:18 SQL> 
03:53:18 SQL> SELECT
03:53:18   2  pair
03:53:18   3  ,COUNT(pair)
03:53:18   4  ,MIN(clse),MAX(clse)
03:53:18   5  ,MIN(avg6),MAX(avg6)
03:53:18   6  ,MIN(ydate),MAX(ydate)
03:53:18   7  FROM svm6102
03:53:18   8  GROUP BY pair
03:53:18   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_cad       19349    .997975	    1.036 .999321575 1.03336849 2010-09-26 20:55:01 2010-12-29 03:45:00

Elapsed: 00:00:00.84
03:53:19 SQL> 
03:53:19 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
03:53:19 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.56
03:53:20 SQL> CREATE TABLE svm6122 COMPRESS AS
03:53:20   2  SELECT
03:53:20   3  pair
03:53:20   4  ,ydate
03:53:20   5  ,prdate
03:53:20   6  ,clse
03:53:20   7  -- g6 is important. I want to predict g6:
03:53:20   8  ,ld6 - clse g6
03:53:20   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
03:53:20  10  -- I want more attributes from the ones I derived above:
03:53:20  11  -- clse relation to moving-min
03:53:20  12  ,clse-min4  cm4
03:53:20  13  ,clse-min6  cm6
03:53:20  14  ,clse-min8  cm8
03:53:20  15  ,clse-min10 cm10
03:53:20  16  ,clse-min12 cm12
03:53:20  17  ,clse-min14 cm14
03:53:20  18  ,clse-min16 cm16
03:53:20  19  ,clse-min18 cm18
03:53:20  20  -- clse relation to moving-avg
03:53:20  21  ,clse-avg4  ca4
03:53:20  22  ,clse-avg6  ca6
03:53:20  23  ,clse-avg8  ca8
03:53:20  24  ,clse-avg10 ca10
03:53:20  25  ,clse-avg12 ca12
03:53:20  26  ,clse-avg14 ca14
03:53:20  27  ,clse-avg16 ca16
03:53:20  28  ,clse-avg18 ca18
03:53:20  29  -- clse relation to moving-max
03:53:20  30  ,clse-max4  cx4
03:53:20  31  ,clse-max6  cx6
03:53:20  32  ,clse-max8  cx8
03:53:20  33  ,clse-max10 cx10
03:53:20  34  ,clse-max12 cx12
03:53:20  35  ,clse-max14 cx14
03:53:20  36  ,clse-max16 cx16
03:53:20  37  ,clse-max18 cx18
03:53:20  38  -- Derive more attributes.
03:53:20  39  -- I want to use CORR() here to help SVM see the shape of the series.
03:53:20  40  -- But COVAR_POP is more stable:
03:53:20  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
03:53:20  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
03:53:20  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
03:53:20  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
03:53:20  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
03:53:20  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
03:53:20  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
03:53:20  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
03:53:20  49  -- Derive date related attributes:
03:53:20  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
03:53:20  51  ,0+TO_CHAR(ydate,'D')d
03:53:20  52  ,0+TO_CHAR(ydate,'W')w
03:53:20  53  -- mpm stands for minutes-past-midnight:
03:53:20  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
03:53:20  55  -- mph stands for minutes-past-hour:
03:53:20  56  ,0+TO_CHAR(ydate,'MI')mph
03:53:20  57  FROM svm6102
03:53:20  58  ORDER BY ydate
03:53:20  59  /

Table created.

Elapsed: 00:00:02.02
03:53:22 SQL> 
03:53:22 SQL> -- rpt
03:53:22 SQL> 
03:53:22 SQL> SELECT
03:53:22   2  pair
03:53:22   3  ,COUNT(pair)
03:53:22   4  ,MIN(clse),MAX(clse)
03:53:22   5  ,MIN(ydate),MAX(ydate)
03:53:22   6  FROM svm6122
03:53:22   7  GROUP BY pair
03:53:22   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_cad       19349    .997975	    1.036 2010-09-26 20:55:01 2010-12-29 03:45:00

Elapsed: 00:00:00.04
03:53:22 SQL> 
03:53:22 SQL> -- Prepare for derivation of NTILE based params:
03:53:22 SQL> 
03:53:22 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.21
03:53:22 SQL> CREATE TABLE svm6142 COMPRESS AS
03:53:22   2  SELECT
03:53:22   3  pair
03:53:22   4  ,ydate
03:53:22   5  ,prdate
03:53:22   6  ,clse
03:53:22   7  ,g6
03:53:22   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
03:53:22   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
03:53:22  10  ,CASE WHEN trend IS NULL THEN 1
03:53:22  11  	    WHEN trend =0      THEN 1
03:53:22  12  	    ELSE trend END trend
03:53:22  13  ,cm4
03:53:22  14  ,cm6
03:53:22  15  ,cm8
03:53:22  16  ,cm10
03:53:22  17  ,cm12
03:53:22  18  ,cm14
03:53:22  19  ,cm16
03:53:22  20  ,cm18
03:53:22  21  --
03:53:22  22  ,ca4
03:53:22  23  ,ca6
03:53:22  24  ,ca8
03:53:22  25  ,ca10
03:53:22  26  ,ca12
03:53:22  27  ,ca14
03:53:22  28  ,ca16
03:53:22  29  ,ca18
03:53:22  30  --
03:53:22  31  ,cx4
03:53:22  32  ,cx6
03:53:22  33  ,cx8
03:53:22  34  ,cx10
03:53:22  35  ,cx12
03:53:22  36  ,cx14
03:53:22  37  ,cx16
03:53:22  38  ,cx18
03:53:22  39  --
03:53:22  40  ,crr4
03:53:22  41  ,crr6
03:53:22  42  ,crr8
03:53:22  43  ,crr10
03:53:22  44  ,crr12
03:53:22  45  ,crr14
03:53:22  46  ,crr16
03:53:22  47  ,crr18
03:53:22  48  --
03:53:22  49  ,hh
03:53:22  50  ,d
03:53:22  51  ,w
03:53:22  52  ,mpm
03:53:22  53  ,mph
03:53:22  54  FROM svm6122
03:53:22  55  ORDER BY ydate
03:53:22  56  /

Table created.

Elapsed: 00:00:00.36
03:53:22 SQL> 
03:53:22 SQL> -- rpt
03:53:22 SQL> 
03:53:22 SQL> SELECT
03:53:22   2  pair
03:53:22   3  ,trend
03:53:22   4  ,gatt
03:53:22   5  ,COUNT(pair)
03:53:22   6  ,AVG(g6)
03:53:22   7  FROM svm6142
03:53:22   8  GROUP BY pair,trend,gatt
03:53:22   9  ORDER BY pair,trend,gatt
03:53:22  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7141 -.00133516
usd_cad 	-1 up	      3081  .00310749
usd_cad 	-1		 4
usd_cad 	 1 nup	      6566 -.00162624
usd_cad 	 1 up	      2489 .003597467
usd_cad 	 1		68

6 rows selected.

Elapsed: 00:00:00.04
03:53:22 SQL> 
03:53:22 SQL> 
03:53:22 SQL> -- Derive NTILE based params:
03:53:22 SQL> 
03:53:22 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.20
03:53:22 SQL> CREATE TABLE svm6162 COMPRESS AS
03:53:22   2  SELECT
03:53:22   3  pair
03:53:22   4  ,ydate
03:53:22   5  ,prdate
03:53:22   6  ,clse
03:53:22   7  ,g6
03:53:22   8  ,gatt
03:53:22   9  ,gattn
03:53:22  10  ,trend
03:53:22  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
03:53:22  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
03:53:22  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
03:53:22  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
03:53:22  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
03:53:22  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
03:53:22  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
03:53:22  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
03:53:22  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
03:53:22  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
03:53:22  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
03:53:22  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
03:53:22  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
03:53:22  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
03:53:22  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
03:53:22  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
03:53:22  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
03:53:22  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
03:53:22  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
03:53:22  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
03:53:22  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
03:53:22  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
03:53:22  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
03:53:22  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
03:53:22  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
03:53:22  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
03:53:22  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
03:53:22  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
03:53:22  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
03:53:22  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
03:53:22  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
03:53:22  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
03:53:22  43  ,hh  att32
03:53:22  44  ,d   att33
03:53:22  45  ,w   att34
03:53:22  46  ,mpm att35
03:53:22  47  ,mph att36
03:53:22  48  ,trend att37
03:53:22  49  FROM svm6142
03:53:22  50  ORDER BY ydate
03:53:22  51  /

Table created.

Elapsed: 00:00:04.69
03:53:27 SQL> 
03:53:27 SQL> -- rpt
03:53:27 SQL> 
03:53:27 SQL> SELECT
03:53:27   2  pair
03:53:27   3  ,trend
03:53:27   4  ,gatt
03:53:27   5  ,COUNT(pair)
03:53:27   6  ,AVG(g6)
03:53:27   7  FROM svm6162
03:53:27   8  GROUP BY pair,trend,gatt
03:53:27   9  ORDER BY pair,trend,gatt
03:53:27  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7141 -.00133516
usd_cad 	-1 up	      3081  .00310749
usd_cad 	-1		 4
usd_cad 	 1 nup	      6566 -.00162624
usd_cad 	 1 up	      2489 .003597467
usd_cad 	 1		68

6 rows selected.

Elapsed: 00:00:00.03
03:53:27 SQL> 
03:53:27 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.14
03:53:27 SQL> CREATE TABLE modsrc COMPRESS AS
03:53:27   2  SELECT
03:53:27   3  pair
03:53:27   4  ,ydate
03:53:27   5  ,prdate
03:53:27   6  ,trend
03:53:27   7  ,g6
03:53:27   8  ,gatt
03:53:27   9  ,gattn
03:53:27  10  FROM svm6162
03:53:27  11  /

Table created.

Elapsed: 00:00:00.08
03:53:27 SQL> 
03:53:27 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
03:53:28 SQL> 
03:53:28 SQL> DROP   TABLE cad_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
03:53:28 SQL> CREATE TABLE cad_ms610 COMPRESS AS
03:53:28   2  SELECT
03:53:28   3  ydate
03:53:28   4  ,trend cad_trend
03:53:28   5  ,g6    cad_g6
03:53:28   6  ,gatt  cad_gatt
03:53:28   7  ,gattn cad_gattn
03:53:28   8  FROM modsrc
03:53:28   9  /

Table created.

Elapsed: 00:00:00.08
03:53:28 SQL> 
03:53:28 SQL> ANALYZE TABLE cad_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
03:53:28 SQL> 
03:53:28 SQL> -- I need a copy of the attributes:
03:53:28 SQL> 
03:53:28 SQL> 
03:53:28 SQL> DROP   TABLE cad_att;

Table dropped.

Elapsed: 00:00:00.04
03:53:28 SQL> CREATE TABLE cad_att COMPRESS AS
03:53:28   2  SELECT
03:53:28   3  ydate
03:53:28   4  ,att00 cad_att00
03:53:28   5  ,att01 cad_att01
03:53:28   6  ,att02 cad_att02
03:53:28   7  ,att03 cad_att03
03:53:28   8  ,att04 cad_att04
03:53:28   9  ,att05 cad_att05
03:53:28  10  ,att06 cad_att06
03:53:28  11  ,att07 cad_att07
03:53:28  12  ,att08 cad_att08
03:53:28  13  ,att09 cad_att09
03:53:28  14  ,att10 cad_att10
03:53:28  15  ,att11 cad_att11
03:53:28  16  ,att12 cad_att12
03:53:28  17  ,att13 cad_att13
03:53:28  18  ,att14 cad_att14
03:53:28  19  ,att15 cad_att15
03:53:28  20  ,att16 cad_att16
03:53:28  21  ,att17 cad_att17
03:53:28  22  ,att18 cad_att18
03:53:28  23  ,att19 cad_att19
03:53:28  24  ,att20 cad_att20
03:53:28  25  ,att21 cad_att21
03:53:28  26  ,att22 cad_att22
03:53:28  27  ,att23 cad_att23
03:53:28  28  ,att24 cad_att24
03:53:28  29  ,att25 cad_att25
03:53:28  30  ,att26 cad_att26
03:53:28  31  ,att27 cad_att27
03:53:28  32  ,att28 cad_att28
03:53:28  33  ,att29 cad_att29
03:53:28  34  ,att30 cad_att30
03:53:28  35  ,att31 cad_att31
03:53:28  36  ,att32 cad_att32
03:53:28  37  ,att33 cad_att33
03:53:28  38  ,att34 cad_att34
03:53:28  39  ,att35 cad_att35
03:53:28  40  ,att36 cad_att36
03:53:28  41  ,att37 cad_att37
03:53:28  42  FROM svm6162
03:53:28  43  /

Table created.

Elapsed: 00:00:00.17
03:53:28 SQL> 
03:53:28 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.42
03:53:28 SQL> 
03:53:28 SQL> -- rpt
03:53:28 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19349

Elapsed: 00:00:00.81
03:53:29 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
     19349

Elapsed: 00:00:00.00
03:53:29 SQL> 
03:53:29 SQL> --
03:53:29 SQL> -- chf610.sql
03:53:29 SQL> --
03:53:29 SQL> 
03:53:29 SQL> -- Creates views and tables for backtesting a forex SVM strategy
03:53:29 SQL> 
03:53:29 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.77
03:53:30 SQL> 
03:53:30 SQL> -- I created di5min here:
03:53:30 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
03:53:30 SQL> 
03:53:30 SQL> CREATE OR REPLACE VIEW svm6102 AS
03:53:30   2  SELECT
03:53:30   3  pair
03:53:30   4  ,ydate
03:53:30   5  ,prdate
03:53:30   6  ,rownum rnum -- acts as t in my time-series
03:53:30   7  ,clse
03:53:30   8  -- Derive a bunch of attributes from clse, the latest price:
03:53:30   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
03:53:30  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
03:53:30  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
03:53:30  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
03:53:30  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
03:53:30  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
03:53:30  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
03:53:30  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
03:53:30  17  --
03:53:30  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
03:53:30  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
03:53:30  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
03:53:30  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
03:53:30  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
03:53:30  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
03:53:30  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
03:53:30  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
03:53:30  26  --
03:53:30  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
03:53:30  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
03:53:30  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
03:53:30  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
03:53:30  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
03:53:30  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
03:53:30  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
03:53:30  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
03:53:30  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
03:53:30  36  FROM di5min WHERE pair LIKE'%chf%'
03:53:30  37  AND ydate > sysdate - 95
03:53:30  38  ORDER BY ydate
03:53:30  39  /

View created.

Elapsed: 00:00:00.12
03:53:30 SQL> 
03:53:30 SQL> -- rpt
03:53:30 SQL> 
03:53:30 SQL> SELECT
03:53:30   2  pair
03:53:30   3  ,COUNT(pair)
03:53:30   4  ,MIN(clse),MAX(clse)
03:53:30   5  ,MIN(avg6),MAX(avg6)
03:53:30   6  ,MIN(ydate),MAX(ydate)
03:53:30   7  FROM svm6102
03:53:30   8  GROUP BY pair
03:53:30   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_chf       19352	.94525	  1.00635 .947785616 1.00498151 2010-09-26 20:55:01 2010-12-29 03:45:00

Elapsed: 00:00:00.86
03:53:31 SQL> 
03:53:31 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
03:53:31 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:01.89
03:53:33 SQL> CREATE TABLE svm6122 COMPRESS AS
03:53:33   2  SELECT
03:53:33   3  pair
03:53:33   4  ,ydate
03:53:33   5  ,prdate
03:53:33   6  ,clse
03:53:33   7  -- g6 is important. I want to predict g6:
03:53:33   8  ,ld6 - clse g6
03:53:33   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
03:53:33  10  -- I want more attributes from the ones I derived above:
03:53:33  11  -- clse relation to moving-min
03:53:33  12  ,clse-min4  cm4
03:53:33  13  ,clse-min6  cm6
03:53:33  14  ,clse-min8  cm8
03:53:33  15  ,clse-min10 cm10
03:53:33  16  ,clse-min12 cm12
03:53:33  17  ,clse-min14 cm14
03:53:33  18  ,clse-min16 cm16
03:53:33  19  ,clse-min18 cm18
03:53:33  20  -- clse relation to moving-avg
03:53:33  21  ,clse-avg4  ca4
03:53:33  22  ,clse-avg6  ca6
03:53:33  23  ,clse-avg8  ca8
03:53:33  24  ,clse-avg10 ca10
03:53:33  25  ,clse-avg12 ca12
03:53:33  26  ,clse-avg14 ca14
03:53:33  27  ,clse-avg16 ca16
03:53:33  28  ,clse-avg18 ca18
03:53:33  29  -- clse relation to moving-max
03:53:33  30  ,clse-max4  cx4
03:53:33  31  ,clse-max6  cx6
03:53:33  32  ,clse-max8  cx8
03:53:33  33  ,clse-max10 cx10
03:53:33  34  ,clse-max12 cx12
03:53:33  35  ,clse-max14 cx14
03:53:33  36  ,clse-max16 cx16
03:53:33  37  ,clse-max18 cx18
03:53:33  38  -- Derive more attributes.
03:53:33  39  -- I want to use CORR() here to help SVM see the shape of the series.
03:53:33  40  -- But COVAR_POP is more stable:
03:53:33  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
03:53:33  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
03:53:33  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
03:53:33  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
03:53:33  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
03:53:33  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
03:53:33  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
03:53:33  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
03:53:33  49  -- Derive date related attributes:
03:53:33  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
03:53:33  51  ,0+TO_CHAR(ydate,'D')d
03:53:33  52  ,0+TO_CHAR(ydate,'W')w
03:53:33  53  -- mpm stands for minutes-past-midnight:
03:53:33  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
03:53:33  55  -- mph stands for minutes-past-hour:
03:53:33  56  ,0+TO_CHAR(ydate,'MI')mph
03:53:33  57  FROM svm6102
03:53:33  58  ORDER BY ydate
03:53:33  59  /

Table created.

Elapsed: 00:00:02.01
03:53:35 SQL> 
03:53:35 SQL> -- rpt
03:53:35 SQL> 
03:53:35 SQL> SELECT
03:53:35   2  pair
03:53:35   3  ,COUNT(pair)
03:53:35   4  ,MIN(clse),MAX(clse)
03:53:35   5  ,MIN(ydate),MAX(ydate)
03:53:35   6  FROM svm6122
03:53:35   7  GROUP BY pair
03:53:35   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_chf       19352	.94525	  1.00635 2010-09-26 20:55:01 2010-12-29 03:45:00

Elapsed: 00:00:00.04
03:53:35 SQL> 
03:53:35 SQL> -- Prepare for derivation of NTILE based params:
03:53:35 SQL> 
03:53:35 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.20
03:53:35 SQL> CREATE TABLE svm6142 COMPRESS AS
03:53:35   2  SELECT
03:53:35   3  pair
03:53:35   4  ,ydate
03:53:35   5  ,prdate
03:53:35   6  ,clse
03:53:35   7  ,g6
03:53:35   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
03:53:35   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
03:53:35  10  ,CASE WHEN trend IS NULL THEN 1
03:53:35  11  	    WHEN trend =0      THEN 1
03:53:35  12  	    ELSE trend END trend
03:53:35  13  ,cm4
03:53:35  14  ,cm6
03:53:35  15  ,cm8
03:53:35  16  ,cm10
03:53:35  17  ,cm12
03:53:35  18  ,cm14
03:53:35  19  ,cm16
03:53:35  20  ,cm18
03:53:35  21  --
03:53:35  22  ,ca4
03:53:35  23  ,ca6
03:53:35  24  ,ca8
03:53:35  25  ,ca10
03:53:35  26  ,ca12
03:53:35  27  ,ca14
03:53:35  28  ,ca16
03:53:35  29  ,ca18
03:53:35  30  --
03:53:35  31  ,cx4
03:53:35  32  ,cx6
03:53:35  33  ,cx8
03:53:35  34  ,cx10
03:53:35  35  ,cx12
03:53:35  36  ,cx14
03:53:35  37  ,cx16
03:53:35  38  ,cx18
03:53:35  39  --
03:53:35  40  ,crr4
03:53:35  41  ,crr6
03:53:35  42  ,crr8
03:53:35  43  ,crr10
03:53:35  44  ,crr12
03:53:35  45  ,crr14
03:53:35  46  ,crr16
03:53:35  47  ,crr18
03:53:35  48  --
03:53:35  49  ,hh
03:53:35  50  ,d
03:53:35  51  ,w
03:53:35  52  ,mpm
03:53:35  53  ,mph
03:53:35  54  FROM svm6122
03:53:35  55  ORDER BY ydate
03:53:35  56  /

Table created.

Elapsed: 00:00:00.36
03:53:36 SQL> 
03:53:36 SQL> -- rpt
03:53:36 SQL> 
03:53:36 SQL> SELECT
03:53:36   2  pair
03:53:36   3  ,trend
03:53:36   4  ,gatt
03:53:36   5  ,COUNT(pair)
03:53:36   6  ,AVG(g6)
03:53:36   7  FROM svm6142
03:53:36   8  GROUP BY pair,trend,gatt
03:53:36   9  ORDER BY pair,trend,gatt
03:53:36  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      6895 -.00194307
usd_chf 	-1 up	      3170 .003899842
usd_chf 	-1		32
usd_chf 	 1 nup	      6650 -.00162406
usd_chf 	 1 up	      2565 .003689727
usd_chf 	 1		40

6 rows selected.

Elapsed: 00:00:00.04
03:53:36 SQL> 
03:53:36 SQL> 
03:53:36 SQL> -- Derive NTILE based params:
03:53:36 SQL> 
03:53:36 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.15
03:53:36 SQL> CREATE TABLE svm6162 COMPRESS AS
03:53:36   2  SELECT
03:53:36   3  pair
03:53:36   4  ,ydate
03:53:36   5  ,prdate
03:53:36   6  ,clse
03:53:36   7  ,g6
03:53:36   8  ,gatt
03:53:36   9  ,gattn
03:53:36  10  ,trend
03:53:36  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
03:53:36  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
03:53:36  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
03:53:36  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
03:53:36  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
03:53:36  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
03:53:36  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
03:53:36  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
03:53:36  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
03:53:36  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
03:53:36  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
03:53:36  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
03:53:36  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
03:53:36  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
03:53:36  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
03:53:36  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
03:53:36  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
03:53:36  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
03:53:36  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
03:53:36  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
03:53:36  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
03:53:36  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
03:53:36  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
03:53:36  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
03:53:36  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
03:53:36  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
03:53:36  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
03:53:36  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
03:53:36  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
03:53:36  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
03:53:36  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
03:53:36  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
03:53:36  43  ,hh  att32
03:53:36  44  ,d   att33
03:53:36  45  ,w   att34
03:53:36  46  ,mpm att35
03:53:36  47  ,mph att36
03:53:36  48  ,trend att37
03:53:36  49  FROM svm6142
03:53:36  50  ORDER BY ydate
03:53:36  51  /

Table created.

Elapsed: 00:00:04.72
03:53:40 SQL> 
03:53:40 SQL> -- rpt
03:53:40 SQL> 
03:53:40 SQL> SELECT
03:53:40   2  pair
03:53:40   3  ,trend
03:53:40   4  ,gatt
03:53:40   5  ,COUNT(pair)
03:53:40   6  ,AVG(g6)
03:53:40   7  FROM svm6162
03:53:40   8  GROUP BY pair,trend,gatt
03:53:40   9  ORDER BY pair,trend,gatt
03:53:40  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      6895 -.00194307
usd_chf 	-1 up	      3170 .003899842
usd_chf 	-1		32
usd_chf 	 1 nup	      6650 -.00162406
usd_chf 	 1 up	      2565 .003689727
usd_chf 	 1		40

6 rows selected.

Elapsed: 00:00:00.03
03:53:40 SQL> 
03:53:40 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.14
03:53:41 SQL> CREATE TABLE modsrc COMPRESS AS
03:53:41   2  SELECT
03:53:41   3  pair
03:53:41   4  ,ydate
03:53:41   5  ,prdate
03:53:41   6  ,trend
03:53:41   7  ,g6
03:53:41   8  ,gatt
03:53:41   9  ,gattn
03:53:41  10  FROM svm6162
03:53:41  11  /

Table created.

Elapsed: 00:00:00.09
03:53:41 SQL> 
03:53:41 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
03:53:41 SQL> 
03:53:41 SQL> DROP   TABLE chf_ms610 ;

Table dropped.

Elapsed: 00:00:00.14
03:53:41 SQL> CREATE TABLE chf_ms610 COMPRESS AS
03:53:41   2  SELECT
03:53:41   3  ydate
03:53:41   4  ,trend chf_trend
03:53:41   5  ,g6    chf_g6
03:53:41   6  ,gatt  chf_gatt
03:53:41   7  ,gattn chf_gattn
03:53:41   8  FROM modsrc
03:53:41   9  /

Table created.

Elapsed: 00:00:00.07
03:53:41 SQL> 
03:53:41 SQL> ANALYZE TABLE chf_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.14
03:53:41 SQL> 
03:53:41 SQL> -- I need a copy of the attributes:
03:53:41 SQL> 
03:53:41 SQL> 
03:53:41 SQL> DROP   TABLE chf_att;

Table dropped.

Elapsed: 00:00:00.05
03:53:41 SQL> CREATE TABLE chf_att COMPRESS AS
03:53:41   2  SELECT
03:53:41   3  ydate
03:53:41   4  ,att00 chf_att00
03:53:41   5  ,att01 chf_att01
03:53:41   6  ,att02 chf_att02
03:53:41   7  ,att03 chf_att03
03:53:41   8  ,att04 chf_att04
03:53:41   9  ,att05 chf_att05
03:53:41  10  ,att06 chf_att06
03:53:41  11  ,att07 chf_att07
03:53:41  12  ,att08 chf_att08
03:53:41  13  ,att09 chf_att09
03:53:41  14  ,att10 chf_att10
03:53:41  15  ,att11 chf_att11
03:53:41  16  ,att12 chf_att12
03:53:41  17  ,att13 chf_att13
03:53:41  18  ,att14 chf_att14
03:53:41  19  ,att15 chf_att15
03:53:41  20  ,att16 chf_att16
03:53:41  21  ,att17 chf_att17
03:53:41  22  ,att18 chf_att18
03:53:41  23  ,att19 chf_att19
03:53:41  24  ,att20 chf_att20
03:53:41  25  ,att21 chf_att21
03:53:41  26  ,att22 chf_att22
03:53:41  27  ,att23 chf_att23
03:53:41  28  ,att24 chf_att24
03:53:41  29  ,att25 chf_att25
03:53:41  30  ,att26 chf_att26
03:53:41  31  ,att27 chf_att27
03:53:41  32  ,att28 chf_att28
03:53:41  33  ,att29 chf_att29
03:53:41  34  ,att30 chf_att30
03:53:41  35  ,att31 chf_att31
03:53:41  36  ,att32 chf_att32
03:53:41  37  ,att33 chf_att33
03:53:41  38  ,att34 chf_att34
03:53:41  39  ,att35 chf_att35
03:53:41  40  ,att36 chf_att36
03:53:41  41  ,att37 chf_att37
03:53:41  42  FROM svm6162
03:53:41  43  /

Table created.

Elapsed: 00:00:00.19
03:53:41 SQL> 
03:53:41 SQL> ANALYZE TABLE chf_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
03:53:42 SQL> 
03:53:42 SQL> -- rpt
03:53:42 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19352

Elapsed: 00:00:00.81
03:53:43 SQL> SELECT COUNT(*)FROM chf_att;

  COUNT(*)
----------
     19352

Elapsed: 00:00:00.00
03:53:43 SQL> 
03:53:43 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
