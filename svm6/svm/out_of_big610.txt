
SQL*Plus: Release 11.2.0.1.0 Production on Wed Jan 5 15:11:57 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

15:11:57 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
15:11:57 SQL> 15:11:57 SQL> --
15:11:57 SQL> -- eur610.sql
15:11:57 SQL> --
15:11:57 SQL> 
15:11:57 SQL> -- Creates views and tables for backtesting a forex SVM strategy
15:11:57 SQL> 
15:11:57 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.01
15:11:57 SQL> 
15:11:57 SQL> -- I created di5min here:
15:11:57 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
15:11:57 SQL> 
15:11:57 SQL> CREATE OR REPLACE VIEW svm6102 AS
15:11:57   2  SELECT
15:11:57   3  pair
15:11:57   4  ,ydate
15:11:57   5  ,prdate
15:11:57   6  ,rownum rnum -- acts as t in my time-series
15:11:57   7  ,clse
15:11:57   8  -- Derive a bunch of attributes from clse, the latest price:
15:11:57   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
15:11:57  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
15:11:57  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
15:11:57  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
15:11:57  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
15:11:57  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
15:11:57  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
15:11:57  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
15:11:57  17  --
15:11:57  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
15:11:57  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
15:11:57  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
15:11:57  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
15:11:57  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
15:11:57  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
15:11:57  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
15:11:57  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
15:11:57  26  --
15:11:57  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
15:11:57  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
15:11:57  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
15:11:57  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
15:11:57  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
15:11:57  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
15:11:57  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
15:11:57  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
15:11:57  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
15:11:57  36  FROM di5min WHERE pair LIKE'%eur%'
15:11:57  37  AND ydate > sysdate - 95
15:11:57  38  ORDER BY ydate
15:11:57  39  /

View created.

Elapsed: 00:00:00.06
15:11:57 SQL> 
15:11:57 SQL> -- rpt
15:11:57 SQL> 
15:11:57 SQL> SELECT
15:11:57   2  pair
15:11:57   3  ,COUNT(pair)
15:11:57   4  ,MIN(clse),MAX(clse)
15:11:57   5  ,MIN(avg6),MAX(avg6)
15:11:57   6  ,MIN(ydate),MAX(ydate)
15:11:57   7  FROM svm6102
15:11:57   8  GROUP BY pair
15:11:57   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_usd       19462    1.29735	   1.4273 1.29875103 1.42436233 2010-10-03 20:55:01 2011-01-05 15:10:00

Elapsed: 00:00:00.91
15:11:58 SQL> 
15:11:58 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
15:11:58 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.32
15:11:59 SQL> CREATE TABLE svm6122 COMPRESS AS
15:11:59   2  SELECT
15:11:59   3  pair
15:11:59   4  ,ydate
15:11:59   5  ,prdate
15:11:59   6  ,clse
15:11:59   7  -- g6 is important. I want to predict g6:
15:11:59   8  ,ld6 - clse g6
15:11:59   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
15:11:59  10  -- I want more attributes from the ones I derived above:
15:11:59  11  -- clse relation to moving-min
15:11:59  12  ,clse-min4  cm4
15:11:59  13  ,clse-min6  cm6
15:11:59  14  ,clse-min8  cm8
15:11:59  15  ,clse-min10 cm10
15:11:59  16  ,clse-min12 cm12
15:11:59  17  ,clse-min14 cm14
15:11:59  18  ,clse-min16 cm16
15:11:59  19  ,clse-min18 cm18
15:11:59  20  -- clse relation to moving-avg
15:11:59  21  ,clse-avg4  ca4
15:11:59  22  ,clse-avg6  ca6
15:11:59  23  ,clse-avg8  ca8
15:11:59  24  ,clse-avg10 ca10
15:11:59  25  ,clse-avg12 ca12
15:11:59  26  ,clse-avg14 ca14
15:11:59  27  ,clse-avg16 ca16
15:11:59  28  ,clse-avg18 ca18
15:11:59  29  -- clse relation to moving-max
15:11:59  30  ,clse-max4  cx4
15:11:59  31  ,clse-max6  cx6
15:11:59  32  ,clse-max8  cx8
15:11:59  33  ,clse-max10 cx10
15:11:59  34  ,clse-max12 cx12
15:11:59  35  ,clse-max14 cx14
15:11:59  36  ,clse-max16 cx16
15:11:59  37  ,clse-max18 cx18
15:11:59  38  -- Derive more attributes.
15:11:59  39  -- I want to use CORR() here to help SVM see the shape of the series.
15:11:59  40  -- But COVAR_POP is more stable:
15:11:59  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
15:11:59  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
15:11:59  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
15:11:59  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
15:11:59  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
15:11:59  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
15:11:59  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
15:11:59  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
15:11:59  49  -- Derive date related attributes:
15:11:59  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
15:11:59  51  ,0+TO_CHAR(ydate,'D')d
15:11:59  52  ,0+TO_CHAR(ydate,'W')w
15:11:59  53  -- mpm stands for minutes-past-midnight:
15:11:59  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
15:11:59  55  -- mph stands for minutes-past-hour:
15:11:59  56  ,0+TO_CHAR(ydate,'MI')mph
15:11:59  57  FROM svm6102
15:11:59  58  ORDER BY ydate
15:11:59  59  /

Table created.

Elapsed: 00:00:02.46
15:12:01 SQL> 
15:12:01 SQL> -- rpt
15:12:01 SQL> 
15:12:01 SQL> SELECT
15:12:01   2  pair
15:12:01   3  ,COUNT(pair)
15:12:01   4  ,MIN(clse),MAX(clse)
15:12:01   5  ,MIN(ydate),MAX(ydate)
15:12:01   6  FROM svm6122
15:12:01   7  GROUP BY pair
15:12:01   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_usd       19462    1.29735	   1.4273 2010-10-03 20:55:01 2011-01-05 15:10:00

Elapsed: 00:00:00.04
15:12:01 SQL> 
15:12:01 SQL> -- Prepare for derivation of NTILE based params:
15:12:01 SQL> 
15:12:01 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.75
15:12:02 SQL> CREATE TABLE svm6142 COMPRESS AS
15:12:02   2  SELECT
15:12:02   3  pair
15:12:02   4  ,ydate
15:12:02   5  ,prdate
15:12:02   6  ,clse
15:12:02   7  ,g6
15:12:02   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
15:12:02   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
15:12:02  10  ,CASE WHEN trend IS NULL THEN 1
15:12:02  11  	    WHEN trend =0      THEN 1
15:12:02  12  	    ELSE trend END trend
15:12:02  13  ,cm4
15:12:02  14  ,cm6
15:12:02  15  ,cm8
15:12:02  16  ,cm10
15:12:02  17  ,cm12
15:12:02  18  ,cm14
15:12:02  19  ,cm16
15:12:02  20  ,cm18
15:12:02  21  --
15:12:02  22  ,ca4
15:12:02  23  ,ca6
15:12:02  24  ,ca8
15:12:02  25  ,ca10
15:12:02  26  ,ca12
15:12:02  27  ,ca14
15:12:02  28  ,ca16
15:12:02  29  ,ca18
15:12:02  30  --
15:12:02  31  ,cx4
15:12:02  32  ,cx6
15:12:02  33  ,cx8
15:12:02  34  ,cx10
15:12:02  35  ,cx12
15:12:02  36  ,cx14
15:12:02  37  ,cx16
15:12:02  38  ,cx18
15:12:02  39  --
15:12:02  40  ,crr4
15:12:02  41  ,crr6
15:12:02  42  ,crr8
15:12:02  43  ,crr10
15:12:02  44  ,crr12
15:12:02  45  ,crr14
15:12:02  46  ,crr16
15:12:02  47  ,crr18
15:12:02  48  --
15:12:02  49  ,hh
15:12:02  50  ,d
15:12:02  51  ,w
15:12:02  52  ,mpm
15:12:02  53  ,mph
15:12:02  54  FROM svm6122
15:12:02  55  ORDER BY ydate
15:12:02  56  /

Table created.

Elapsed: 00:00:00.37
15:12:02 SQL> 
15:12:02 SQL> -- rpt
15:12:02 SQL> 
15:12:02 SQL> SELECT
15:12:02   2  pair
15:12:02   3  ,trend
15:12:02   4  ,gatt
15:12:02   5  ,COUNT(pair)
15:12:02   6  ,AVG(g6)
15:12:02   7  FROM svm6142
15:12:02   8  GROUP BY pair,trend,gatt
15:12:02   9  ORDER BY pair,trend,gatt
15:12:02  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6283 -.00312887
eur_usd 	-1 up	      3562 .004453576
eur_usd 	-1		72
eur_usd 	 1 nup	      5840 -.00325501
eur_usd 	 1 up	      3705 .005071238

Elapsed: 00:00:00.03
15:12:02 SQL> 
15:12:02 SQL> 
15:12:02 SQL> -- Derive NTILE based params:
15:12:02 SQL> 
15:12:02 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.47
15:12:03 SQL> CREATE TABLE svm6162 COMPRESS AS
15:12:03   2  SELECT
15:12:03   3  pair
15:12:03   4  ,ydate
15:12:03   5  ,prdate
15:12:03   6  ,clse
15:12:03   7  ,g6
15:12:03   8  ,gatt
15:12:03   9  ,gattn
15:12:03  10  ,trend
15:12:03  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
15:12:03  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
15:12:03  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
15:12:03  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
15:12:03  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
15:12:03  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
15:12:03  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
15:12:03  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
15:12:03  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
15:12:03  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
15:12:03  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
15:12:03  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
15:12:03  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
15:12:03  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
15:12:03  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
15:12:03  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
15:12:03  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
15:12:03  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
15:12:03  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
15:12:03  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
15:12:03  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
15:12:03  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
15:12:03  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
15:12:03  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
15:12:03  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
15:12:03  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
15:12:03  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
15:12:03  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
15:12:03  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
15:12:03  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
15:12:03  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
15:12:03  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
15:12:03  43  ,hh  att32
15:12:03  44  ,d   att33
15:12:03  45  ,w   att34
15:12:03  46  ,mpm att35
15:12:03  47  ,mph att36
15:12:03  48  ,trend att37
15:12:03  49  FROM svm6142
15:12:03  50  ORDER BY ydate
15:12:03  51  /

Table created.

Elapsed: 00:00:04.77
15:12:07 SQL> 
15:12:07 SQL> -- rpt
15:12:07 SQL> 
15:12:07 SQL> SELECT
15:12:07   2  pair
15:12:07   3  ,trend
15:12:07   4  ,gatt
15:12:07   5  ,COUNT(pair)
15:12:07   6  ,AVG(g6)
15:12:07   7  FROM svm6162
15:12:07   8  GROUP BY pair,trend,gatt
15:12:07   9  ORDER BY pair,trend,gatt
15:12:07  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6283 -.00312887
eur_usd 	-1 up	      3562 .004453576
eur_usd 	-1		72
eur_usd 	 1 nup	      5840 -.00325501
eur_usd 	 1 up	      3705 .005071238

Elapsed: 00:00:00.03
15:12:07 SQL> 
15:12:07 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.08
15:12:08 SQL> CREATE TABLE modsrc COMPRESS AS
15:12:08   2  SELECT
15:12:08   3  pair
15:12:08   4  ,ydate
15:12:08   5  ,prdate
15:12:08   6  ,trend
15:12:08   7  ,g6
15:12:08   8  ,gatt
15:12:08   9  ,gattn
15:12:08  10  FROM svm6162
15:12:08  11  /

Table created.

Elapsed: 00:00:00.08
15:12:08 SQL> 
15:12:08 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.22
15:12:08 SQL> 
15:12:08 SQL> DROP   TABLE eur_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
15:12:08 SQL> CREATE TABLE eur_ms610 COMPRESS AS
15:12:08   2  SELECT
15:12:08   3  ydate
15:12:08   4  ,trend eur_trend
15:12:08   5  ,g6    eur_g6
15:12:08   6  ,gatt  eur_gatt
15:12:08   7  ,gattn eur_gattn
15:12:08   8  FROM modsrc
15:12:08   9  /

Table created.

Elapsed: 00:00:00.06
15:12:08 SQL> 
15:12:08 SQL> ANALYZE TABLE eur_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
15:12:08 SQL> 
15:12:08 SQL> -- I need a copy of the attributes:
15:12:08 SQL> 
15:12:08 SQL> 
15:12:08 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.05
15:12:08 SQL> CREATE TABLE eur_att COMPRESS AS
15:12:08   2  SELECT
15:12:08   3  ydate
15:12:08   4  ,att00 eur_att00
15:12:08   5  ,att01 eur_att01
15:12:08   6  ,att02 eur_att02
15:12:08   7  ,att03 eur_att03
15:12:08   8  ,att04 eur_att04
15:12:08   9  ,att05 eur_att05
15:12:08  10  ,att06 eur_att06
15:12:08  11  ,att07 eur_att07
15:12:08  12  ,att08 eur_att08
15:12:08  13  ,att09 eur_att09
15:12:08  14  ,att10 eur_att10
15:12:08  15  ,att11 eur_att11
15:12:08  16  ,att12 eur_att12
15:12:08  17  ,att13 eur_att13
15:12:08  18  ,att14 eur_att14
15:12:08  19  ,att15 eur_att15
15:12:08  20  ,att16 eur_att16
15:12:08  21  ,att17 eur_att17
15:12:08  22  ,att18 eur_att18
15:12:08  23  ,att19 eur_att19
15:12:08  24  ,att20 eur_att20
15:12:08  25  ,att21 eur_att21
15:12:08  26  ,att22 eur_att22
15:12:08  27  ,att23 eur_att23
15:12:08  28  ,att24 eur_att24
15:12:08  29  ,att25 eur_att25
15:12:08  30  ,att26 eur_att26
15:12:08  31  ,att27 eur_att27
15:12:08  32  ,att28 eur_att28
15:12:08  33  ,att29 eur_att29
15:12:08  34  ,att30 eur_att30
15:12:08  35  ,att31 eur_att31
15:12:08  36  ,att32 eur_att32
15:12:08  37  ,att33 eur_att33
15:12:08  38  ,att34 eur_att34
15:12:08  39  ,att35 eur_att35
15:12:08  40  ,att36 eur_att36
15:12:08  41  ,att37 eur_att37
15:12:08  42  FROM svm6162
15:12:08  43  /

Table created.

Elapsed: 00:00:00.17
15:12:08 SQL> 
15:12:08 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
15:12:09 SQL> 
15:12:09 SQL> -- rpt
15:12:09 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19462

Elapsed: 00:00:00.89
15:12:10 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     19462

Elapsed: 00:00:00.00
15:12:10 SQL> 
15:12:10 SQL> --
15:12:10 SQL> -- aud610.sql
15:12:10 SQL> --
15:12:10 SQL> 
15:12:10 SQL> -- Creates views and tables for backtesting a forex SVM strategy
15:12:10 SQL> 
15:12:10 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.41
15:12:10 SQL> 
15:12:10 SQL> -- I created di5min here:
15:12:10 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
15:12:10 SQL> 
15:12:10 SQL> CREATE OR REPLACE VIEW svm6102 AS
15:12:10   2  SELECT
15:12:10   3  pair
15:12:10   4  ,ydate
15:12:10   5  ,prdate
15:12:10   6  ,rownum rnum -- acts as t in my time-series
15:12:10   7  ,clse
15:12:10   8  -- Derive a bunch of attributes from clse, the latest price:
15:12:10   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
15:12:10  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
15:12:10  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
15:12:10  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
15:12:10  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
15:12:10  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
15:12:10  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
15:12:10  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
15:12:10  17  --
15:12:10  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
15:12:10  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
15:12:10  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
15:12:10  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
15:12:10  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
15:12:10  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
15:12:10  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
15:12:10  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
15:12:10  26  --
15:12:10  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
15:12:10  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
15:12:10  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
15:12:10  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
15:12:10  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
15:12:10  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
15:12:10  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
15:12:10  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
15:12:10  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
15:12:10  36  FROM di5min WHERE pair LIKE'%aud%'
15:12:10  37  AND ydate > sysdate - 95
15:12:10  38  ORDER BY ydate
15:12:10  39  /

View created.

Elapsed: 00:00:00.03
15:12:10 SQL> 
15:12:10 SQL> -- rpt
15:12:10 SQL> 
15:12:10 SQL> SELECT
15:12:10   2  pair
15:12:10   3  ,COUNT(pair)
15:12:10   4  ,MIN(clse),MAX(clse)
15:12:10   5  ,MIN(avg6),MAX(avg6)
15:12:10   6  ,MIN(ydate),MAX(ydate)
15:12:10   7  FROM svm6102
15:12:10   8  GROUP BY pair
15:12:10   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
aud_usd       19458	.95405	  1.02495 .957141438 1.02284247 2010-10-03 20:55:01 2011-01-05 15:05:00

Elapsed: 00:00:00.89
15:12:11 SQL> 
15:12:11 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
15:12:11 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.20
15:12:11 SQL> CREATE TABLE svm6122 COMPRESS AS
15:12:11   2  SELECT
15:12:11   3  pair
15:12:11   4  ,ydate
15:12:11   5  ,prdate
15:12:11   6  ,clse
15:12:11   7  -- g6 is important. I want to predict g6:
15:12:11   8  ,ld6 - clse g6
15:12:11   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
15:12:11  10  -- I want more attributes from the ones I derived above:
15:12:11  11  -- clse relation to moving-min
15:12:11  12  ,clse-min4  cm4
15:12:11  13  ,clse-min6  cm6
15:12:11  14  ,clse-min8  cm8
15:12:11  15  ,clse-min10 cm10
15:12:11  16  ,clse-min12 cm12
15:12:11  17  ,clse-min14 cm14
15:12:11  18  ,clse-min16 cm16
15:12:11  19  ,clse-min18 cm18
15:12:11  20  -- clse relation to moving-avg
15:12:11  21  ,clse-avg4  ca4
15:12:11  22  ,clse-avg6  ca6
15:12:11  23  ,clse-avg8  ca8
15:12:11  24  ,clse-avg10 ca10
15:12:11  25  ,clse-avg12 ca12
15:12:11  26  ,clse-avg14 ca14
15:12:11  27  ,clse-avg16 ca16
15:12:11  28  ,clse-avg18 ca18
15:12:11  29  -- clse relation to moving-max
15:12:11  30  ,clse-max4  cx4
15:12:11  31  ,clse-max6  cx6
15:12:11  32  ,clse-max8  cx8
15:12:11  33  ,clse-max10 cx10
15:12:11  34  ,clse-max12 cx12
15:12:11  35  ,clse-max14 cx14
15:12:11  36  ,clse-max16 cx16
15:12:11  37  ,clse-max18 cx18
15:12:11  38  -- Derive more attributes.
15:12:11  39  -- I want to use CORR() here to help SVM see the shape of the series.
15:12:11  40  -- But COVAR_POP is more stable:
15:12:11  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
15:12:11  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
15:12:11  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
15:12:11  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
15:12:11  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
15:12:11  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
15:12:11  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
15:12:11  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
15:12:11  49  -- Derive date related attributes:
15:12:11  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
15:12:11  51  ,0+TO_CHAR(ydate,'D')d
15:12:11  52  ,0+TO_CHAR(ydate,'W')w
15:12:11  53  -- mpm stands for minutes-past-midnight:
15:12:11  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
15:12:11  55  -- mph stands for minutes-past-hour:
15:12:11  56  ,0+TO_CHAR(ydate,'MI')mph
15:12:11  57  FROM svm6102
15:12:11  58  ORDER BY ydate
15:12:11  59  /

Table created.

Elapsed: 00:00:02.05
15:12:13 SQL> 
15:12:13 SQL> -- rpt
15:12:13 SQL> 
15:12:13 SQL> SELECT
15:12:13   2  pair
15:12:13   3  ,COUNT(pair)
15:12:13   4  ,MIN(clse),MAX(clse)
15:12:13   5  ,MIN(ydate),MAX(ydate)
15:12:13   6  FROM svm6122
15:12:13   7  GROUP BY pair
15:12:13   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
aud_usd       19458	.95405	  1.02495 2010-10-03 20:55:01 2011-01-05 15:05:00

Elapsed: 00:00:00.04
15:12:13 SQL> 
15:12:13 SQL> -- Prepare for derivation of NTILE based params:
15:12:13 SQL> 
15:12:13 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.36
15:12:14 SQL> CREATE TABLE svm6142 COMPRESS AS
15:12:14   2  SELECT
15:12:14   3  pair
15:12:14   4  ,ydate
15:12:14   5  ,prdate
15:12:14   6  ,clse
15:12:14   7  ,g6
15:12:14   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
15:12:14   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
15:12:14  10  ,CASE WHEN trend IS NULL THEN 1
15:12:14  11  	    WHEN trend =0      THEN 1
15:12:14  12  	    ELSE trend END trend
15:12:14  13  ,cm4
15:12:14  14  ,cm6
15:12:14  15  ,cm8
15:12:14  16  ,cm10
15:12:14  17  ,cm12
15:12:14  18  ,cm14
15:12:14  19  ,cm16
15:12:14  20  ,cm18
15:12:14  21  --
15:12:14  22  ,ca4
15:12:14  23  ,ca6
15:12:14  24  ,ca8
15:12:14  25  ,ca10
15:12:14  26  ,ca12
15:12:14  27  ,ca14
15:12:14  28  ,ca16
15:12:14  29  ,ca18
15:12:14  30  --
15:12:14  31  ,cx4
15:12:14  32  ,cx6
15:12:14  33  ,cx8
15:12:14  34  ,cx10
15:12:14  35  ,cx12
15:12:14  36  ,cx14
15:12:14  37  ,cx16
15:12:14  38  ,cx18
15:12:14  39  --
15:12:14  40  ,crr4
15:12:14  41  ,crr6
15:12:14  42  ,crr8
15:12:14  43  ,crr10
15:12:14  44  ,crr12
15:12:14  45  ,crr14
15:12:14  46  ,crr16
15:12:14  47  ,crr18
15:12:14  48  --
15:12:14  49  ,hh
15:12:14  50  ,d
15:12:14  51  ,w
15:12:14  52  ,mpm
15:12:14  53  ,mph
15:12:14  54  FROM svm6122
15:12:14  55  ORDER BY ydate
15:12:14  56  /

Table created.

Elapsed: 00:00:00.36
15:12:14 SQL> 
15:12:14 SQL> -- rpt
15:12:14 SQL> 
15:12:14 SQL> SELECT
15:12:14   2  pair
15:12:14   3  ,trend
15:12:14   4  ,gatt
15:12:14   5  ,COUNT(pair)
15:12:14   6  ,AVG(g6)
15:12:14   7  FROM svm6142
15:12:14   8  GROUP BY pair,trend,gatt
15:12:14   9  ORDER BY pair,trend,gatt
15:12:14  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5526 -.00219071
aud_usd 	-1 up	      3646 .003769261
aud_usd 	-1		71
aud_usd 	 1 nup	      6621 -.00213267
aud_usd 	 1 up	      3593 .004054752
aud_usd 	 1		 1

6 rows selected.

Elapsed: 00:00:00.04
15:12:14 SQL> 
15:12:14 SQL> 
15:12:14 SQL> -- Derive NTILE based params:
15:12:14 SQL> 
15:12:14 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.23
15:12:14 SQL> CREATE TABLE svm6162 COMPRESS AS
15:12:14   2  SELECT
15:12:14   3  pair
15:12:14   4  ,ydate
15:12:14   5  ,prdate
15:12:14   6  ,clse
15:12:14   7  ,g6
15:12:14   8  ,gatt
15:12:14   9  ,gattn
15:12:14  10  ,trend
15:12:14  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
15:12:14  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
15:12:14  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
15:12:14  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
15:12:14  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
15:12:14  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
15:12:14  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
15:12:14  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
15:12:14  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
15:12:14  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
15:12:14  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
15:12:14  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
15:12:14  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
15:12:14  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
15:12:14  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
15:12:14  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
15:12:14  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
15:12:14  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
15:12:14  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
15:12:14  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
15:12:14  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
15:12:14  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
15:12:14  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
15:12:14  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
15:12:14  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
15:12:14  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
15:12:14  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
15:12:14  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
15:12:14  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
15:12:14  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
15:12:14  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
15:12:14  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
15:12:14  43  ,hh  att32
15:12:14  44  ,d   att33
15:12:14  45  ,w   att34
15:12:14  46  ,mpm att35
15:12:14  47  ,mph att36
15:12:14  48  ,trend att37
15:12:14  49  FROM svm6142
15:12:14  50  ORDER BY ydate
15:12:14  51  /

Table created.

Elapsed: 00:00:04.75
15:12:19 SQL> 
15:12:19 SQL> -- rpt
15:12:19 SQL> 
15:12:19 SQL> SELECT
15:12:19   2  pair
15:12:19   3  ,trend
15:12:19   4  ,gatt
15:12:19   5  ,COUNT(pair)
15:12:19   6  ,AVG(g6)
15:12:19   7  FROM svm6162
15:12:19   8  GROUP BY pair,trend,gatt
15:12:19   9  ORDER BY pair,trend,gatt
15:12:19  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5526 -.00219071
aud_usd 	-1 up	      3646 .003769261
aud_usd 	-1		71
aud_usd 	 1 nup	      6621 -.00213267
aud_usd 	 1 up	      3593 .004054752
aud_usd 	 1		 1

6 rows selected.

Elapsed: 00:00:00.03
15:12:19 SQL> 
15:12:19 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.14
15:12:19 SQL> CREATE TABLE modsrc COMPRESS AS
15:12:19   2  SELECT
15:12:19   3  pair
15:12:19   4  ,ydate
15:12:19   5  ,prdate
15:12:19   6  ,trend
15:12:19   7  ,g6
15:12:19   8  ,gatt
15:12:19   9  ,gattn
15:12:19  10  FROM svm6162
15:12:19  11  /

Table created.

Elapsed: 00:00:00.09
15:12:19 SQL> 
15:12:19 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
15:12:19 SQL> 
15:12:19 SQL> DROP   TABLE aud_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
15:12:20 SQL> CREATE TABLE aud_ms610 COMPRESS AS
15:12:20   2  SELECT
15:12:20   3  ydate
15:12:20   4  ,trend aud_trend
15:12:20   5  ,g6    aud_g6
15:12:20   6  ,gatt  aud_gatt
15:12:20   7  ,gattn aud_gattn
15:12:20   8  FROM modsrc
15:12:20   9  /

Table created.

Elapsed: 00:00:00.06
15:12:20 SQL> 
15:12:20 SQL> ANALYZE TABLE aud_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
15:12:20 SQL> 
15:12:20 SQL> -- I need a copy of the attributes:
15:12:20 SQL> 
15:12:20 SQL> 
15:12:20 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.04
15:12:20 SQL> CREATE TABLE aud_att COMPRESS AS
15:12:20   2  SELECT
15:12:20   3  ydate
15:12:20   4  ,att00 aud_att00
15:12:20   5  ,att01 aud_att01
15:12:20   6  ,att02 aud_att02
15:12:20   7  ,att03 aud_att03
15:12:20   8  ,att04 aud_att04
15:12:20   9  ,att05 aud_att05
15:12:20  10  ,att06 aud_att06
15:12:20  11  ,att07 aud_att07
15:12:20  12  ,att08 aud_att08
15:12:20  13  ,att09 aud_att09
15:12:20  14  ,att10 aud_att10
15:12:20  15  ,att11 aud_att11
15:12:20  16  ,att12 aud_att12
15:12:20  17  ,att13 aud_att13
15:12:20  18  ,att14 aud_att14
15:12:20  19  ,att15 aud_att15
15:12:20  20  ,att16 aud_att16
15:12:20  21  ,att17 aud_att17
15:12:20  22  ,att18 aud_att18
15:12:20  23  ,att19 aud_att19
15:12:20  24  ,att20 aud_att20
15:12:20  25  ,att21 aud_att21
15:12:20  26  ,att22 aud_att22
15:12:20  27  ,att23 aud_att23
15:12:20  28  ,att24 aud_att24
15:12:20  29  ,att25 aud_att25
15:12:20  30  ,att26 aud_att26
15:12:20  31  ,att27 aud_att27
15:12:20  32  ,att28 aud_att28
15:12:20  33  ,att29 aud_att29
15:12:20  34  ,att30 aud_att30
15:12:20  35  ,att31 aud_att31
15:12:20  36  ,att32 aud_att32
15:12:20  37  ,att33 aud_att33
15:12:20  38  ,att34 aud_att34
15:12:20  39  ,att35 aud_att35
15:12:20  40  ,att36 aud_att36
15:12:20  41  ,att37 aud_att37
15:12:20  42  FROM svm6162
15:12:20  43  /

Table created.

Elapsed: 00:00:00.15
15:12:20 SQL> 
15:12:20 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
15:12:20 SQL> 
15:12:20 SQL> -- rpt
15:12:20 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19458

Elapsed: 00:00:00.89
15:12:21 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     19458

Elapsed: 00:00:00.00
15:12:21 SQL> 
15:12:21 SQL> --
15:12:21 SQL> -- gbp610.sql
15:12:21 SQL> --
15:12:21 SQL> 
15:12:21 SQL> -- Creates views and tables for backtesting a forex SVM strategy
15:12:21 SQL> 
15:12:21 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.47
15:12:22 SQL> 
15:12:22 SQL> -- I created di5min here:
15:12:22 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
15:12:22 SQL> 
15:12:22 SQL> CREATE OR REPLACE VIEW svm6102 AS
15:12:22   2  SELECT
15:12:22   3  pair
15:12:22   4  ,ydate
15:12:22   5  ,prdate
15:12:22   6  ,rownum rnum -- acts as t in my time-series
15:12:22   7  ,clse
15:12:22   8  -- Derive a bunch of attributes from clse, the latest price:
15:12:22   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
15:12:22  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
15:12:22  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
15:12:22  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
15:12:22  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
15:12:22  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
15:12:22  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
15:12:22  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
15:12:22  17  --
15:12:22  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
15:12:22  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
15:12:22  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
15:12:22  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
15:12:22  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
15:12:22  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
15:12:22  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
15:12:22  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
15:12:22  26  --
15:12:22  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
15:12:22  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
15:12:22  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
15:12:22  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
15:12:22  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
15:12:22  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
15:12:22  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
15:12:22  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
15:12:22  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
15:12:22  36  FROM di5min WHERE pair LIKE'%gbp%'
15:12:22  37  AND ydate > sysdate - 95
15:12:22  38  ORDER BY ydate
15:12:22  39  /

View created.

Elapsed: 00:00:00.05
15:12:22 SQL> 
15:12:22 SQL> -- rpt
15:12:22 SQL> 
15:12:22 SQL> SELECT
15:12:22   2  pair
15:12:22   3  ,COUNT(pair)
15:12:22   4  ,MIN(clse),MAX(clse)
15:12:22   5  ,MIN(avg6),MAX(avg6)
15:12:22   6  ,MIN(ydate),MAX(ydate)
15:12:22   7  FROM svm6102
15:12:22   8  GROUP BY pair
15:12:22   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
gbp_usd       19461   1.535325	   1.6295 1.53696747 1.62716986 2010-10-03 20:55:01 2011-01-05 15:10:00

Elapsed: 00:00:00.84
15:12:23 SQL> 
15:12:23 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
15:12:23 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.20
15:12:23 SQL> CREATE TABLE svm6122 COMPRESS AS
15:12:23   2  SELECT
15:12:23   3  pair
15:12:23   4  ,ydate
15:12:23   5  ,prdate
15:12:23   6  ,clse
15:12:23   7  -- g6 is important. I want to predict g6:
15:12:23   8  ,ld6 - clse g6
15:12:23   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
15:12:23  10  -- I want more attributes from the ones I derived above:
15:12:23  11  -- clse relation to moving-min
15:12:23  12  ,clse-min4  cm4
15:12:23  13  ,clse-min6  cm6
15:12:23  14  ,clse-min8  cm8
15:12:23  15  ,clse-min10 cm10
15:12:23  16  ,clse-min12 cm12
15:12:23  17  ,clse-min14 cm14
15:12:23  18  ,clse-min16 cm16
15:12:23  19  ,clse-min18 cm18
15:12:23  20  -- clse relation to moving-avg
15:12:23  21  ,clse-avg4  ca4
15:12:23  22  ,clse-avg6  ca6
15:12:23  23  ,clse-avg8  ca8
15:12:23  24  ,clse-avg10 ca10
15:12:23  25  ,clse-avg12 ca12
15:12:23  26  ,clse-avg14 ca14
15:12:23  27  ,clse-avg16 ca16
15:12:23  28  ,clse-avg18 ca18
15:12:23  29  -- clse relation to moving-max
15:12:23  30  ,clse-max4  cx4
15:12:23  31  ,clse-max6  cx6
15:12:23  32  ,clse-max8  cx8
15:12:23  33  ,clse-max10 cx10
15:12:23  34  ,clse-max12 cx12
15:12:23  35  ,clse-max14 cx14
15:12:23  36  ,clse-max16 cx16
15:12:23  37  ,clse-max18 cx18
15:12:23  38  -- Derive more attributes.
15:12:23  39  -- I want to use CORR() here to help SVM see the shape of the series.
15:12:23  40  -- But COVAR_POP is more stable:
15:12:23  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
15:12:23  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
15:12:23  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
15:12:23  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
15:12:23  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
15:12:23  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
15:12:23  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
15:12:23  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
15:12:23  49  -- Derive date related attributes:
15:12:23  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
15:12:23  51  ,0+TO_CHAR(ydate,'D')d
15:12:23  52  ,0+TO_CHAR(ydate,'W')w
15:12:23  53  -- mpm stands for minutes-past-midnight:
15:12:23  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
15:12:23  55  -- mph stands for minutes-past-hour:
15:12:23  56  ,0+TO_CHAR(ydate,'MI')mph
15:12:23  57  FROM svm6102
15:12:23  58  ORDER BY ydate
15:12:23  59  /

Table created.

Elapsed: 00:00:02.10
15:12:25 SQL> 
15:12:25 SQL> -- rpt
15:12:25 SQL> 
15:12:25 SQL> SELECT
15:12:25   2  pair
15:12:25   3  ,COUNT(pair)
15:12:25   4  ,MIN(clse),MAX(clse)
15:12:25   5  ,MIN(ydate),MAX(ydate)
15:12:25   6  FROM svm6122
15:12:25   7  GROUP BY pair
15:12:25   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
gbp_usd       19461   1.535325	   1.6295 2010-10-03 20:55:01 2011-01-05 15:10:00

Elapsed: 00:00:00.04
15:12:25 SQL> 
15:12:25 SQL> -- Prepare for derivation of NTILE based params:
15:12:25 SQL> 
15:12:25 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.19
15:12:25 SQL> CREATE TABLE svm6142 COMPRESS AS
15:12:25   2  SELECT
15:12:25   3  pair
15:12:25   4  ,ydate
15:12:25   5  ,prdate
15:12:25   6  ,clse
15:12:25   7  ,g6
15:12:25   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
15:12:25   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
15:12:25  10  ,CASE WHEN trend IS NULL THEN 1
15:12:25  11  	    WHEN trend =0      THEN 1
15:12:25  12  	    ELSE trend END trend
15:12:25  13  ,cm4
15:12:25  14  ,cm6
15:12:25  15  ,cm8
15:12:25  16  ,cm10
15:12:25  17  ,cm12
15:12:25  18  ,cm14
15:12:25  19  ,cm16
15:12:25  20  ,cm18
15:12:25  21  --
15:12:25  22  ,ca4
15:12:25  23  ,ca6
15:12:25  24  ,ca8
15:12:25  25  ,ca10
15:12:25  26  ,ca12
15:12:25  27  ,ca14
15:12:25  28  ,ca16
15:12:25  29  ,ca18
15:12:25  30  --
15:12:25  31  ,cx4
15:12:25  32  ,cx6
15:12:25  33  ,cx8
15:12:25  34  ,cx10
15:12:25  35  ,cx12
15:12:25  36  ,cx14
15:12:25  37  ,cx16
15:12:25  38  ,cx18
15:12:25  39  --
15:12:25  40  ,crr4
15:12:25  41  ,crr6
15:12:25  42  ,crr8
15:12:25  43  ,crr10
15:12:25  44  ,crr12
15:12:25  45  ,crr14
15:12:25  46  ,crr16
15:12:25  47  ,crr18
15:12:25  48  --
15:12:25  49  ,hh
15:12:25  50  ,d
15:12:25  51  ,w
15:12:25  52  ,mpm
15:12:25  53  ,mph
15:12:25  54  FROM svm6122
15:12:25  55  ORDER BY ydate
15:12:25  56  /

Table created.

Elapsed: 00:00:00.37
15:12:26 SQL> 
15:12:26 SQL> -- rpt
15:12:26 SQL> 
15:12:26 SQL> SELECT
15:12:26   2  pair
15:12:26   3  ,trend
15:12:26   4  ,gatt
15:12:26   5  ,COUNT(pair)
15:12:26   6  ,AVG(g6)
15:12:26   7  FROM svm6142
15:12:26   8  GROUP BY pair,trend,gatt
15:12:26   9  ORDER BY pair,trend,gatt
15:12:26  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6315 -.00264115
gbp_usd 	-1 up	      3510 .004373914
gbp_usd 	-1		25
gbp_usd 	 1 nup	      6124 -.00262274
gbp_usd 	 1 up	      3440 .004531722
gbp_usd 	 1		47

6 rows selected.

Elapsed: 00:00:00.04
15:12:26 SQL> 
15:12:26 SQL> 
15:12:26 SQL> -- Derive NTILE based params:
15:12:26 SQL> 
15:12:26 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.18
15:12:26 SQL> CREATE TABLE svm6162 COMPRESS AS
15:12:26   2  SELECT
15:12:26   3  pair
15:12:26   4  ,ydate
15:12:26   5  ,prdate
15:12:26   6  ,clse
15:12:26   7  ,g6
15:12:26   8  ,gatt
15:12:26   9  ,gattn
15:12:26  10  ,trend
15:12:26  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
15:12:26  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
15:12:26  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
15:12:26  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
15:12:26  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
15:12:26  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
15:12:26  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
15:12:26  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
15:12:26  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
15:12:26  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
15:12:26  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
15:12:26  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
15:12:26  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
15:12:26  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
15:12:26  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
15:12:26  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
15:12:26  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
15:12:26  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
15:12:26  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
15:12:26  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
15:12:26  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
15:12:26  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
15:12:26  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
15:12:26  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
15:12:26  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
15:12:26  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
15:12:26  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
15:12:26  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
15:12:26  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
15:12:26  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
15:12:26  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
15:12:26  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
15:12:26  43  ,hh  att32
15:12:26  44  ,d   att33
15:12:26  45  ,w   att34
15:12:26  46  ,mpm att35
15:12:26  47  ,mph att36
15:12:26  48  ,trend att37
15:12:26  49  FROM svm6142
15:12:26  50  ORDER BY ydate
15:12:26  51  /

Table created.

Elapsed: 00:00:04.76
15:12:31 SQL> 
15:12:31 SQL> -- rpt
15:12:31 SQL> 
15:12:31 SQL> SELECT
15:12:31   2  pair
15:12:31   3  ,trend
15:12:31   4  ,gatt
15:12:31   5  ,COUNT(pair)
15:12:31   6  ,AVG(g6)
15:12:31   7  FROM svm6162
15:12:31   8  GROUP BY pair,trend,gatt
15:12:31   9  ORDER BY pair,trend,gatt
15:12:31  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6315 -.00264115
gbp_usd 	-1 up	      3510 .004373914
gbp_usd 	-1		25
gbp_usd 	 1 nup	      6124 -.00262274
gbp_usd 	 1 up	      3440 .004531722
gbp_usd 	 1		47

6 rows selected.

Elapsed: 00:00:00.02
15:12:31 SQL> 
15:12:31 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
15:12:31 SQL> CREATE TABLE modsrc COMPRESS AS
15:12:31   2  SELECT
15:12:31   3  pair
15:12:31   4  ,ydate
15:12:31   5  ,prdate
15:12:31   6  ,trend
15:12:31   7  ,g6
15:12:31   8  ,gatt
15:12:31   9  ,gattn
15:12:31  10  FROM svm6162
15:12:31  11  /

Table created.

Elapsed: 00:00:00.07
15:12:31 SQL> 
15:12:31 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
15:12:31 SQL> 
15:12:31 SQL> DROP   TABLE gbp_ms610 ;

Table dropped.

Elapsed: 00:00:00.03
15:12:31 SQL> CREATE TABLE gbp_ms610 COMPRESS AS
15:12:31   2  SELECT
15:12:31   3  ydate
15:12:31   4  ,trend gbp_trend
15:12:31   5  ,g6    gbp_g6
15:12:31   6  ,gatt  gbp_gatt
15:12:31   7  ,gattn gbp_gattn
15:12:31   8  FROM modsrc
15:12:31   9  /

Table created.

Elapsed: 00:00:00.06
15:12:31 SQL> 
15:12:31 SQL> ANALYZE TABLE gbp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
15:12:31 SQL> 
15:12:31 SQL> -- I need a copy of the attributes:
15:12:31 SQL> 
15:12:31 SQL> 
15:12:31 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.04
15:12:31 SQL> CREATE TABLE gbp_att COMPRESS AS
15:12:31   2  SELECT
15:12:31   3  ydate
15:12:31   4  ,att00 gbp_att00
15:12:31   5  ,att01 gbp_att01
15:12:31   6  ,att02 gbp_att02
15:12:31   7  ,att03 gbp_att03
15:12:31   8  ,att04 gbp_att04
15:12:31   9  ,att05 gbp_att05
15:12:31  10  ,att06 gbp_att06
15:12:31  11  ,att07 gbp_att07
15:12:31  12  ,att08 gbp_att08
15:12:31  13  ,att09 gbp_att09
15:12:31  14  ,att10 gbp_att10
15:12:31  15  ,att11 gbp_att11
15:12:31  16  ,att12 gbp_att12
15:12:31  17  ,att13 gbp_att13
15:12:31  18  ,att14 gbp_att14
15:12:31  19  ,att15 gbp_att15
15:12:31  20  ,att16 gbp_att16
15:12:31  21  ,att17 gbp_att17
15:12:31  22  ,att18 gbp_att18
15:12:31  23  ,att19 gbp_att19
15:12:31  24  ,att20 gbp_att20
15:12:31  25  ,att21 gbp_att21
15:12:31  26  ,att22 gbp_att22
15:12:31  27  ,att23 gbp_att23
15:12:31  28  ,att24 gbp_att24
15:12:31  29  ,att25 gbp_att25
15:12:31  30  ,att26 gbp_att26
15:12:31  31  ,att27 gbp_att27
15:12:31  32  ,att28 gbp_att28
15:12:31  33  ,att29 gbp_att29
15:12:31  34  ,att30 gbp_att30
15:12:31  35  ,att31 gbp_att31
15:12:31  36  ,att32 gbp_att32
15:12:31  37  ,att33 gbp_att33
15:12:31  38  ,att34 gbp_att34
15:12:31  39  ,att35 gbp_att35
15:12:31  40  ,att36 gbp_att36
15:12:31  41  ,att37 gbp_att37
15:12:31  42  FROM svm6162
15:12:31  43  /

Table created.

Elapsed: 00:00:00.18
15:12:31 SQL> 
15:12:31 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
15:12:32 SQL> 
15:12:32 SQL> -- rpt
15:12:32 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19461

Elapsed: 00:00:00.84
15:12:33 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     19461

Elapsed: 00:00:00.00
15:12:33 SQL> 
15:12:33 SQL> --
15:12:33 SQL> -- jpy610.sql
15:12:33 SQL> --
15:12:33 SQL> 
15:12:33 SQL> -- Creates views and tables for backtesting a forex SVM strategy
15:12:33 SQL> 
15:12:33 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.36
15:12:33 SQL> 
15:12:33 SQL> -- I created di5min here:
15:12:33 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
15:12:33 SQL> 
15:12:33 SQL> CREATE OR REPLACE VIEW svm6102 AS
15:12:33   2  SELECT
15:12:33   3  pair
15:12:33   4  ,ydate
15:12:33   5  ,prdate
15:12:33   6  ,rownum rnum -- acts as t in my time-series
15:12:33   7  ,clse
15:12:33   8  -- Derive a bunch of attributes from clse, the latest price:
15:12:33   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
15:12:33  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
15:12:33  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
15:12:33  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
15:12:33  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
15:12:33  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
15:12:33  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
15:12:33  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
15:12:33  17  --
15:12:33  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
15:12:33  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
15:12:33  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
15:12:33  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
15:12:33  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
15:12:33  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
15:12:33  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
15:12:33  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
15:12:33  26  --
15:12:33  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
15:12:33  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
15:12:33  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
15:12:33  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
15:12:33  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
15:12:33  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
15:12:33  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
15:12:33  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
15:12:33  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
15:12:33  36  FROM di5min WHERE pair LIKE'%jpy%'
15:12:33  37  AND ydate > sysdate - 95
15:12:33  38  ORDER BY ydate
15:12:33  39  /

View created.

Elapsed: 00:00:00.05
15:12:33 SQL> 
15:12:33 SQL> -- rpt
15:12:33 SQL> 
15:12:33 SQL> SELECT
15:12:33   2  pair
15:12:33   3  ,COUNT(pair)
15:12:33   4  ,MIN(clse),MAX(clse)
15:12:33   5  ,MIN(avg6),MAX(avg6)
15:12:33   6  ,MIN(ydate),MAX(ydate)
15:12:33   7  FROM svm6102
15:12:33   8  GROUP BY pair
15:12:33   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_jpy       19459	 80.25	   84.485 80.3595205 84.3105479 2010-10-03 20:55:01 2011-01-05 15:10:00

Elapsed: 00:00:00.90
15:12:34 SQL> 
15:12:34 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
15:12:34 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.19
15:12:34 SQL> CREATE TABLE svm6122 COMPRESS AS
15:12:34   2  SELECT
15:12:34   3  pair
15:12:34   4  ,ydate
15:12:34   5  ,prdate
15:12:34   6  ,clse
15:12:34   7  -- g6 is important. I want to predict g6:
15:12:34   8  ,ld6 - clse g6
15:12:34   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
15:12:34  10  -- I want more attributes from the ones I derived above:
15:12:34  11  -- clse relation to moving-min
15:12:34  12  ,clse-min4  cm4
15:12:34  13  ,clse-min6  cm6
15:12:34  14  ,clse-min8  cm8
15:12:34  15  ,clse-min10 cm10
15:12:34  16  ,clse-min12 cm12
15:12:34  17  ,clse-min14 cm14
15:12:34  18  ,clse-min16 cm16
15:12:34  19  ,clse-min18 cm18
15:12:34  20  -- clse relation to moving-avg
15:12:34  21  ,clse-avg4  ca4
15:12:34  22  ,clse-avg6  ca6
15:12:34  23  ,clse-avg8  ca8
15:12:34  24  ,clse-avg10 ca10
15:12:34  25  ,clse-avg12 ca12
15:12:34  26  ,clse-avg14 ca14
15:12:34  27  ,clse-avg16 ca16
15:12:34  28  ,clse-avg18 ca18
15:12:34  29  -- clse relation to moving-max
15:12:34  30  ,clse-max4  cx4
15:12:34  31  ,clse-max6  cx6
15:12:34  32  ,clse-max8  cx8
15:12:34  33  ,clse-max10 cx10
15:12:34  34  ,clse-max12 cx12
15:12:34  35  ,clse-max14 cx14
15:12:34  36  ,clse-max16 cx16
15:12:34  37  ,clse-max18 cx18
15:12:34  38  -- Derive more attributes.
15:12:34  39  -- I want to use CORR() here to help SVM see the shape of the series.
15:12:34  40  -- But COVAR_POP is more stable:
15:12:34  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
15:12:34  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
15:12:34  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
15:12:34  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
15:12:34  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
15:12:34  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
15:12:34  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
15:12:34  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
15:12:34  49  -- Derive date related attributes:
15:12:34  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
15:12:34  51  ,0+TO_CHAR(ydate,'D')d
15:12:34  52  ,0+TO_CHAR(ydate,'W')w
15:12:34  53  -- mpm stands for minutes-past-midnight:
15:12:34  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
15:12:34  55  -- mph stands for minutes-past-hour:
15:12:34  56  ,0+TO_CHAR(ydate,'MI')mph
15:12:34  57  FROM svm6102
15:12:34  58  ORDER BY ydate
15:12:34  59  /

Table created.

Elapsed: 00:00:02.11
15:12:36 SQL> 
15:12:36 SQL> -- rpt
15:12:36 SQL> 
15:12:36 SQL> SELECT
15:12:36   2  pair
15:12:36   3  ,COUNT(pair)
15:12:36   4  ,MIN(clse),MAX(clse)
15:12:36   5  ,MIN(ydate),MAX(ydate)
15:12:36   6  FROM svm6122
15:12:36   7  GROUP BY pair
15:12:36   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_jpy       19459	 80.25	   84.485 2010-10-03 20:55:01 2011-01-05 15:10:00

Elapsed: 00:00:00.05
15:12:36 SQL> 
15:12:36 SQL> -- Prepare for derivation of NTILE based params:
15:12:36 SQL> 
15:12:36 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.21
15:12:37 SQL> CREATE TABLE svm6142 COMPRESS AS
15:12:37   2  SELECT
15:12:37   3  pair
15:12:37   4  ,ydate
15:12:37   5  ,prdate
15:12:37   6  ,clse
15:12:37   7  ,g6
15:12:37   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
15:12:37   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
15:12:37  10  ,CASE WHEN trend IS NULL THEN 1
15:12:37  11  	    WHEN trend =0      THEN 1
15:12:37  12  	    ELSE trend END trend
15:12:37  13  ,cm4
15:12:37  14  ,cm6
15:12:37  15  ,cm8
15:12:37  16  ,cm10
15:12:37  17  ,cm12
15:12:37  18  ,cm14
15:12:37  19  ,cm16
15:12:37  20  ,cm18
15:12:37  21  --
15:12:37  22  ,ca4
15:12:37  23  ,ca6
15:12:37  24  ,ca8
15:12:37  25  ,ca10
15:12:37  26  ,ca12
15:12:37  27  ,ca14
15:12:37  28  ,ca16
15:12:37  29  ,ca18
15:12:37  30  --
15:12:37  31  ,cx4
15:12:37  32  ,cx6
15:12:37  33  ,cx8
15:12:37  34  ,cx10
15:12:37  35  ,cx12
15:12:37  36  ,cx14
15:12:37  37  ,cx16
15:12:37  38  ,cx18
15:12:37  39  --
15:12:37  40  ,crr4
15:12:37  41  ,crr6
15:12:37  42  ,crr8
15:12:37  43  ,crr10
15:12:37  44  ,crr12
15:12:37  45  ,crr14
15:12:37  46  ,crr16
15:12:37  47  ,crr18
15:12:37  48  --
15:12:37  49  ,hh
15:12:37  50  ,d
15:12:37  51  ,w
15:12:37  52  ,mpm
15:12:37  53  ,mph
15:12:37  54  FROM svm6122
15:12:37  55  ORDER BY ydate
15:12:37  56  /

Table created.

Elapsed: 00:00:00.36
15:12:37 SQL> 
15:12:37 SQL> -- rpt
15:12:37 SQL> 
15:12:37 SQL> SELECT
15:12:37   2  pair
15:12:37   3  ,trend
15:12:37   4  ,gatt
15:12:37   5  ,COUNT(pair)
15:12:37   6  ,AVG(g6)
15:12:37   7  FROM svm6142
15:12:37   8  GROUP BY pair,trend,gatt
15:12:37   9  ORDER BY pair,trend,gatt
15:12:37  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5111 -.16664378
usd_jpy 	-1 up	      4825 .167937081
usd_jpy 	-1		13
usd_jpy 	 1 nup	      4993  -.1561771
usd_jpy 	 1 up	      4458 .168145678
usd_jpy 	 1		59

6 rows selected.

Elapsed: 00:00:00.04
15:12:37 SQL> 
15:12:37 SQL> 
15:12:37 SQL> -- Derive NTILE based params:
15:12:37 SQL> 
15:12:37 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.16
15:12:37 SQL> CREATE TABLE svm6162 COMPRESS AS
15:12:37   2  SELECT
15:12:37   3  pair
15:12:37   4  ,ydate
15:12:37   5  ,prdate
15:12:37   6  ,clse
15:12:37   7  ,g6
15:12:37   8  ,gatt
15:12:37   9  ,gattn
15:12:37  10  ,trend
15:12:37  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
15:12:37  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
15:12:37  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
15:12:37  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
15:12:37  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
15:12:37  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
15:12:37  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
15:12:37  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
15:12:37  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
15:12:37  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
15:12:37  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
15:12:37  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
15:12:37  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
15:12:37  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
15:12:37  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
15:12:37  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
15:12:37  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
15:12:37  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
15:12:37  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
15:12:37  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
15:12:37  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
15:12:37  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
15:12:37  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
15:12:37  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
15:12:37  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
15:12:37  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
15:12:37  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
15:12:37  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
15:12:37  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
15:12:37  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
15:12:37  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
15:12:37  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
15:12:37  43  ,hh  att32
15:12:37  44  ,d   att33
15:12:37  45  ,w   att34
15:12:37  46  ,mpm att35
15:12:37  47  ,mph att36
15:12:37  48  ,trend att37
15:12:37  49  FROM svm6142
15:12:37  50  ORDER BY ydate
15:12:37  51  /

Table created.

Elapsed: 00:00:04.83
15:12:42 SQL> 
15:12:42 SQL> -- rpt
15:12:42 SQL> 
15:12:42 SQL> SELECT
15:12:42   2  pair
15:12:42   3  ,trend
15:12:42   4  ,gatt
15:12:42   5  ,COUNT(pair)
15:12:42   6  ,AVG(g6)
15:12:42   7  FROM svm6162
15:12:42   8  GROUP BY pair,trend,gatt
15:12:42   9  ORDER BY pair,trend,gatt
15:12:42  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5111 -.16664378
usd_jpy 	-1 up	      4825 .167937081
usd_jpy 	-1		13
usd_jpy 	 1 nup	      4993  -.1561771
usd_jpy 	 1 up	      4458 .168145678
usd_jpy 	 1		59

6 rows selected.

Elapsed: 00:00:00.03
15:12:42 SQL> 
15:12:42 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.18
15:12:42 SQL> CREATE TABLE modsrc COMPRESS AS
15:12:42   2  SELECT
15:12:42   3  pair
15:12:42   4  ,ydate
15:12:42   5  ,prdate
15:12:42   6  ,trend
15:12:42   7  ,g6
15:12:42   8  ,gatt
15:12:42   9  ,gattn
15:12:42  10  FROM svm6162
15:12:42  11  /

Table created.

Elapsed: 00:00:00.09
15:12:42 SQL> 
15:12:42 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.23
15:12:43 SQL> 
15:12:43 SQL> DROP   TABLE jpy_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
15:12:43 SQL> CREATE TABLE jpy_ms610 COMPRESS AS
15:12:43   2  SELECT
15:12:43   3  ydate
15:12:43   4  ,trend jpy_trend
15:12:43   5  ,g6    jpy_g6
15:12:43   6  ,gatt  jpy_gatt
15:12:43   7  ,gattn jpy_gattn
15:12:43   8  FROM modsrc
15:12:43   9  /

Table created.

Elapsed: 00:00:00.07
15:12:43 SQL> 
15:12:43 SQL> ANALYZE TABLE jpy_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
15:12:43 SQL> 
15:12:43 SQL> -- I need a copy of the attributes:
15:12:43 SQL> 
15:12:43 SQL> 
15:12:43 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.05
15:12:43 SQL> CREATE TABLE jpy_att COMPRESS AS
15:12:43   2  SELECT
15:12:43   3  ydate
15:12:43   4  ,att00 jpy_att00
15:12:43   5  ,att01 jpy_att01
15:12:43   6  ,att02 jpy_att02
15:12:43   7  ,att03 jpy_att03
15:12:43   8  ,att04 jpy_att04
15:12:43   9  ,att05 jpy_att05
15:12:43  10  ,att06 jpy_att06
15:12:43  11  ,att07 jpy_att07
15:12:43  12  ,att08 jpy_att08
15:12:43  13  ,att09 jpy_att09
15:12:43  14  ,att10 jpy_att10
15:12:43  15  ,att11 jpy_att11
15:12:43  16  ,att12 jpy_att12
15:12:43  17  ,att13 jpy_att13
15:12:43  18  ,att14 jpy_att14
15:12:43  19  ,att15 jpy_att15
15:12:43  20  ,att16 jpy_att16
15:12:43  21  ,att17 jpy_att17
15:12:43  22  ,att18 jpy_att18
15:12:43  23  ,att19 jpy_att19
15:12:43  24  ,att20 jpy_att20
15:12:43  25  ,att21 jpy_att21
15:12:43  26  ,att22 jpy_att22
15:12:43  27  ,att23 jpy_att23
15:12:43  28  ,att24 jpy_att24
15:12:43  29  ,att25 jpy_att25
15:12:43  30  ,att26 jpy_att26
15:12:43  31  ,att27 jpy_att27
15:12:43  32  ,att28 jpy_att28
15:12:43  33  ,att29 jpy_att29
15:12:43  34  ,att30 jpy_att30
15:12:43  35  ,att31 jpy_att31
15:12:43  36  ,att32 jpy_att32
15:12:43  37  ,att33 jpy_att33
15:12:43  38  ,att34 jpy_att34
15:12:43  39  ,att35 jpy_att35
15:12:43  40  ,att36 jpy_att36
15:12:43  41  ,att37 jpy_att37
15:12:43  42  FROM svm6162
15:12:43  43  /

Table created.

Elapsed: 00:00:00.21
15:12:43 SQL> 
15:12:43 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
15:12:44 SQL> 
15:12:44 SQL> -- rpt
15:12:44 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19459

Elapsed: 00:00:00.92
15:12:44 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     19459

Elapsed: 00:00:00.00
15:12:44 SQL> 
15:12:44 SQL> --
15:12:44 SQL> -- cad610.sql
15:12:44 SQL> --
15:12:44 SQL> 
15:12:44 SQL> -- Creates views and tables for backtesting a forex SVM strategy
15:12:44 SQL> 
15:12:44 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.37
15:12:45 SQL> 
15:12:45 SQL> -- I created di5min here:
15:12:45 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
15:12:45 SQL> 
15:12:45 SQL> CREATE OR REPLACE VIEW svm6102 AS
15:12:45   2  SELECT
15:12:45   3  pair
15:12:45   4  ,ydate
15:12:45   5  ,prdate
15:12:45   6  ,rownum rnum -- acts as t in my time-series
15:12:45   7  ,clse
15:12:45   8  -- Derive a bunch of attributes from clse, the latest price:
15:12:45   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
15:12:45  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
15:12:45  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
15:12:45  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
15:12:45  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
15:12:45  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
15:12:45  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
15:12:45  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
15:12:45  17  --
15:12:45  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
15:12:45  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
15:12:45  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
15:12:45  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
15:12:45  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
15:12:45  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
15:12:45  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
15:12:45  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
15:12:45  26  --
15:12:45  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
15:12:45  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
15:12:45  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
15:12:45  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
15:12:45  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
15:12:45  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
15:12:45  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
15:12:45  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
15:12:45  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
15:12:45  36  FROM di5min WHERE pair LIKE'%cad%'
15:12:45  37  AND ydate > sysdate - 95
15:12:45  38  ORDER BY ydate
15:12:45  39  /

View created.

Elapsed: 00:00:00.04
15:12:45 SQL> 
15:12:45 SQL> -- rpt
15:12:45 SQL> 
15:12:45 SQL> SELECT
15:12:45   2  pair
15:12:45   3  ,COUNT(pair)
15:12:45   4  ,MIN(clse),MAX(clse)
15:12:45   5  ,MIN(avg6),MAX(avg6)
15:12:45   6  ,MIN(ydate),MAX(ydate)
15:12:45   7  FROM svm6102
15:12:45   8  GROUP BY pair
15:12:45   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_cad       19459    .988925	   1.0355 .990603938 1.03282877 2010-10-03 20:55:01 2011-01-05 15:10:00

Elapsed: 00:00:00.85
15:12:46 SQL> 
15:12:46 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
15:12:46 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.31
15:12:46 SQL> CREATE TABLE svm6122 COMPRESS AS
15:12:46   2  SELECT
15:12:46   3  pair
15:12:46   4  ,ydate
15:12:46   5  ,prdate
15:12:46   6  ,clse
15:12:46   7  -- g6 is important. I want to predict g6:
15:12:46   8  ,ld6 - clse g6
15:12:46   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
15:12:46  10  -- I want more attributes from the ones I derived above:
15:12:46  11  -- clse relation to moving-min
15:12:46  12  ,clse-min4  cm4
15:12:46  13  ,clse-min6  cm6
15:12:46  14  ,clse-min8  cm8
15:12:46  15  ,clse-min10 cm10
15:12:46  16  ,clse-min12 cm12
15:12:46  17  ,clse-min14 cm14
15:12:46  18  ,clse-min16 cm16
15:12:46  19  ,clse-min18 cm18
15:12:46  20  -- clse relation to moving-avg
15:12:46  21  ,clse-avg4  ca4
15:12:46  22  ,clse-avg6  ca6
15:12:46  23  ,clse-avg8  ca8
15:12:46  24  ,clse-avg10 ca10
15:12:46  25  ,clse-avg12 ca12
15:12:46  26  ,clse-avg14 ca14
15:12:46  27  ,clse-avg16 ca16
15:12:46  28  ,clse-avg18 ca18
15:12:46  29  -- clse relation to moving-max
15:12:46  30  ,clse-max4  cx4
15:12:46  31  ,clse-max6  cx6
15:12:46  32  ,clse-max8  cx8
15:12:46  33  ,clse-max10 cx10
15:12:46  34  ,clse-max12 cx12
15:12:46  35  ,clse-max14 cx14
15:12:46  36  ,clse-max16 cx16
15:12:46  37  ,clse-max18 cx18
15:12:46  38  -- Derive more attributes.
15:12:46  39  -- I want to use CORR() here to help SVM see the shape of the series.
15:12:46  40  -- But COVAR_POP is more stable:
15:12:46  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
15:12:46  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
15:12:46  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
15:12:46  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
15:12:46  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
15:12:46  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
15:12:46  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
15:12:46  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
15:12:46  49  -- Derive date related attributes:
15:12:46  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
15:12:46  51  ,0+TO_CHAR(ydate,'D')d
15:12:46  52  ,0+TO_CHAR(ydate,'W')w
15:12:46  53  -- mpm stands for minutes-past-midnight:
15:12:46  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
15:12:46  55  -- mph stands for minutes-past-hour:
15:12:46  56  ,0+TO_CHAR(ydate,'MI')mph
15:12:46  57  FROM svm6102
15:12:46  58  ORDER BY ydate
15:12:46  59  /

Table created.

Elapsed: 00:00:02.06
15:12:48 SQL> 
15:12:48 SQL> -- rpt
15:12:48 SQL> 
15:12:48 SQL> SELECT
15:12:48   2  pair
15:12:48   3  ,COUNT(pair)
15:12:48   4  ,MIN(clse),MAX(clse)
15:12:48   5  ,MIN(ydate),MAX(ydate)
15:12:48   6  FROM svm6122
15:12:48   7  GROUP BY pair
15:12:48   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_cad       19459    .988925	   1.0355 2010-10-03 20:55:01 2011-01-05 15:10:00

Elapsed: 00:00:00.03
15:12:48 SQL> 
15:12:48 SQL> -- Prepare for derivation of NTILE based params:
15:12:48 SQL> 
15:12:48 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.27
15:12:48 SQL> CREATE TABLE svm6142 COMPRESS AS
15:12:48   2  SELECT
15:12:48   3  pair
15:12:48   4  ,ydate
15:12:48   5  ,prdate
15:12:48   6  ,clse
15:12:48   7  ,g6
15:12:48   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
15:12:48   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
15:12:48  10  ,CASE WHEN trend IS NULL THEN 1
15:12:48  11  	    WHEN trend =0      THEN 1
15:12:48  12  	    ELSE trend END trend
15:12:48  13  ,cm4
15:12:48  14  ,cm6
15:12:48  15  ,cm8
15:12:48  16  ,cm10
15:12:48  17  ,cm12
15:12:48  18  ,cm14
15:12:48  19  ,cm16
15:12:48  20  ,cm18
15:12:48  21  --
15:12:48  22  ,ca4
15:12:48  23  ,ca6
15:12:48  24  ,ca8
15:12:48  25  ,ca10
15:12:48  26  ,ca12
15:12:48  27  ,ca14
15:12:48  28  ,ca16
15:12:48  29  ,ca18
15:12:48  30  --
15:12:48  31  ,cx4
15:12:48  32  ,cx6
15:12:48  33  ,cx8
15:12:48  34  ,cx10
15:12:48  35  ,cx12
15:12:48  36  ,cx14
15:12:48  37  ,cx16
15:12:48  38  ,cx18
15:12:48  39  --
15:12:48  40  ,crr4
15:12:48  41  ,crr6
15:12:48  42  ,crr8
15:12:48  43  ,crr10
15:12:48  44  ,crr12
15:12:48  45  ,crr14
15:12:48  46  ,crr16
15:12:48  47  ,crr18
15:12:48  48  --
15:12:48  49  ,hh
15:12:48  50  ,d
15:12:48  51  ,w
15:12:48  52  ,mpm
15:12:48  53  ,mph
15:12:48  54  FROM svm6122
15:12:48  55  ORDER BY ydate
15:12:48  56  /

Table created.

Elapsed: 00:00:00.36
15:12:49 SQL> 
15:12:49 SQL> -- rpt
15:12:49 SQL> 
15:12:49 SQL> SELECT
15:12:49   2  pair
15:12:49   3  ,trend
15:12:49   4  ,gatt
15:12:49   5  ,COUNT(pair)
15:12:49   6  ,AVG(g6)
15:12:49   7  FROM svm6142
15:12:49   8  GROUP BY pair,trend,gatt
15:12:49   9  ORDER BY pair,trend,gatt
15:12:49  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7167  -.0012451
usd_cad 	-1 up	      3092 .003065739
usd_cad 	-1		30
usd_cad 	 1 nup	      6739 -.00159175
usd_cad 	 1 up	      2389 .003648486
usd_cad 	 1		42

6 rows selected.

Elapsed: 00:00:00.04
15:12:49 SQL> 
15:12:49 SQL> 
15:12:49 SQL> -- Derive NTILE based params:
15:12:49 SQL> 
15:12:49 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.23
15:12:49 SQL> CREATE TABLE svm6162 COMPRESS AS
15:12:49   2  SELECT
15:12:49   3  pair
15:12:49   4  ,ydate
15:12:49   5  ,prdate
15:12:49   6  ,clse
15:12:49   7  ,g6
15:12:49   8  ,gatt
15:12:49   9  ,gattn
15:12:49  10  ,trend
15:12:49  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
15:12:49  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
15:12:49  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
15:12:49  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
15:12:49  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
15:12:49  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
15:12:49  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
15:12:49  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
15:12:49  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
15:12:49  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
15:12:49  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
15:12:49  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
15:12:49  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
15:12:49  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
15:12:49  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
15:12:49  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
15:12:49  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
15:12:49  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
15:12:49  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
15:12:49  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
15:12:49  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
15:12:49  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
15:12:49  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
15:12:49  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
15:12:49  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
15:12:49  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
15:12:49  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
15:12:49  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
15:12:49  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
15:12:49  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
15:12:49  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
15:12:49  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
15:12:49  43  ,hh  att32
15:12:49  44  ,d   att33
15:12:49  45  ,w   att34
15:12:49  46  ,mpm att35
15:12:49  47  ,mph att36
15:12:49  48  ,trend att37
15:12:49  49  FROM svm6142
15:12:49  50  ORDER BY ydate
15:12:49  51  /

Table created.

Elapsed: 00:00:05.74
15:12:55 SQL> 
15:12:55 SQL> -- rpt
15:12:55 SQL> 
15:12:55 SQL> SELECT
15:12:55   2  pair
15:12:55   3  ,trend
15:12:55   4  ,gatt
15:12:55   5  ,COUNT(pair)
15:12:55   6  ,AVG(g6)
15:12:55   7  FROM svm6162
15:12:55   8  GROUP BY pair,trend,gatt
15:12:55   9  ORDER BY pair,trend,gatt
15:12:55  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7167  -.0012451
usd_cad 	-1 up	      3092 .003065739
usd_cad 	-1		30
usd_cad 	 1 nup	      6739 -.00159175
usd_cad 	 1 up	      2389 .003648486
usd_cad 	 1		42

6 rows selected.

Elapsed: 00:00:00.03
15:12:55 SQL> 
15:12:55 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.17
15:12:55 SQL> CREATE TABLE modsrc COMPRESS AS
15:12:55   2  SELECT
15:12:55   3  pair
15:12:55   4  ,ydate
15:12:55   5  ,prdate
15:12:55   6  ,trend
15:12:55   7  ,g6
15:12:55   8  ,gatt
15:12:55   9  ,gattn
15:12:55  10  FROM svm6162
15:12:55  11  /

Table created.

Elapsed: 00:00:00.09
15:12:55 SQL> 
15:12:55 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.27
15:12:55 SQL> 
15:12:55 SQL> DROP   TABLE cad_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
15:12:55 SQL> CREATE TABLE cad_ms610 COMPRESS AS
15:12:55   2  SELECT
15:12:55   3  ydate
15:12:55   4  ,trend cad_trend
15:12:55   5  ,g6    cad_g6
15:12:55   6  ,gatt  cad_gatt
15:12:55   7  ,gattn cad_gattn
15:12:55   8  FROM modsrc
15:12:55   9  /

Table created.

Elapsed: 00:00:00.06
15:12:55 SQL> 
15:12:55 SQL> ANALYZE TABLE cad_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
15:12:56 SQL> 
15:12:56 SQL> -- I need a copy of the attributes:
15:12:56 SQL> 
15:12:56 SQL> 
15:12:56 SQL> DROP   TABLE cad_att;

Table dropped.

Elapsed: 00:00:00.06
15:12:56 SQL> CREATE TABLE cad_att COMPRESS AS
15:12:56   2  SELECT
15:12:56   3  ydate
15:12:56   4  ,att00 cad_att00
15:12:56   5  ,att01 cad_att01
15:12:56   6  ,att02 cad_att02
15:12:56   7  ,att03 cad_att03
15:12:56   8  ,att04 cad_att04
15:12:56   9  ,att05 cad_att05
15:12:56  10  ,att06 cad_att06
15:12:56  11  ,att07 cad_att07
15:12:56  12  ,att08 cad_att08
15:12:56  13  ,att09 cad_att09
15:12:56  14  ,att10 cad_att10
15:12:56  15  ,att11 cad_att11
15:12:56  16  ,att12 cad_att12
15:12:56  17  ,att13 cad_att13
15:12:56  18  ,att14 cad_att14
15:12:56  19  ,att15 cad_att15
15:12:56  20  ,att16 cad_att16
15:12:56  21  ,att17 cad_att17
15:12:56  22  ,att18 cad_att18
15:12:56  23  ,att19 cad_att19
15:12:56  24  ,att20 cad_att20
15:12:56  25  ,att21 cad_att21
15:12:56  26  ,att22 cad_att22
15:12:56  27  ,att23 cad_att23
15:12:56  28  ,att24 cad_att24
15:12:56  29  ,att25 cad_att25
15:12:56  30  ,att26 cad_att26
15:12:56  31  ,att27 cad_att27
15:12:56  32  ,att28 cad_att28
15:12:56  33  ,att29 cad_att29
15:12:56  34  ,att30 cad_att30
15:12:56  35  ,att31 cad_att31
15:12:56  36  ,att32 cad_att32
15:12:56  37  ,att33 cad_att33
15:12:56  38  ,att34 cad_att34
15:12:56  39  ,att35 cad_att35
15:12:56  40  ,att36 cad_att36
15:12:56  41  ,att37 cad_att37
15:12:56  42  FROM svm6162
15:12:56  43  /

Table created.

Elapsed: 00:00:00.15
15:12:56 SQL> 
15:12:56 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
15:12:56 SQL> 
15:12:56 SQL> -- rpt
15:12:56 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19459

Elapsed: 00:00:00.81
15:12:57 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
     19459

Elapsed: 00:00:00.00
15:12:57 SQL> 
15:12:57 SQL> --
15:12:57 SQL> -- chf610.sql
15:12:57 SQL> --
15:12:57 SQL> 
15:12:57 SQL> -- Creates views and tables for backtesting a forex SVM strategy
15:12:57 SQL> 
15:12:57 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.39
15:12:57 SQL> 
15:12:57 SQL> -- I created di5min here:
15:12:57 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
15:12:57 SQL> 
15:12:57 SQL> CREATE OR REPLACE VIEW svm6102 AS
15:12:57   2  SELECT
15:12:57   3  pair
15:12:57   4  ,ydate
15:12:57   5  ,prdate
15:12:57   6  ,rownum rnum -- acts as t in my time-series
15:12:57   7  ,clse
15:12:57   8  -- Derive a bunch of attributes from clse, the latest price:
15:12:57   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
15:12:57  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
15:12:57  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
15:12:57  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
15:12:57  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
15:12:57  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
15:12:57  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
15:12:57  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
15:12:57  17  --
15:12:57  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
15:12:57  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
15:12:57  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
15:12:57  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
15:12:57  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
15:12:57  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
15:12:57  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
15:12:57  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
15:12:57  26  --
15:12:57  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
15:12:57  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
15:12:57  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
15:12:57  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
15:12:57  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
15:12:57  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
15:12:57  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
15:12:57  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
15:12:57  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
15:12:57  36  FROM di5min WHERE pair LIKE'%chf%'
15:12:57  37  AND ydate > sysdate - 95
15:12:57  38  ORDER BY ydate
15:12:57  39  /

View created.

Elapsed: 00:00:00.05
15:12:58 SQL> 
15:12:58 SQL> -- rpt
15:12:58 SQL> 
15:12:58 SQL> SELECT
15:12:58   2  pair
15:12:58   3  ,COUNT(pair)
15:12:58   4  ,MIN(clse),MAX(clse)
15:12:58   5  ,MIN(avg6),MAX(avg6)
15:12:58   6  ,MIN(ydate),MAX(ydate)
15:12:58   7  FROM svm6102
15:12:58   8  GROUP BY pair
15:12:58   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_chf       19462    .931675	  1.00635  .93325411 1.00498151 2010-10-03 20:55:01 2011-01-05 15:10:00

Elapsed: 00:00:00.85
15:12:58 SQL> 
15:12:58 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
15:12:58 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.24
15:12:59 SQL> CREATE TABLE svm6122 COMPRESS AS
15:12:59   2  SELECT
15:12:59   3  pair
15:12:59   4  ,ydate
15:12:59   5  ,prdate
15:12:59   6  ,clse
15:12:59   7  -- g6 is important. I want to predict g6:
15:12:59   8  ,ld6 - clse g6
15:12:59   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
15:12:59  10  -- I want more attributes from the ones I derived above:
15:12:59  11  -- clse relation to moving-min
15:12:59  12  ,clse-min4  cm4
15:12:59  13  ,clse-min6  cm6
15:12:59  14  ,clse-min8  cm8
15:12:59  15  ,clse-min10 cm10
15:12:59  16  ,clse-min12 cm12
15:12:59  17  ,clse-min14 cm14
15:12:59  18  ,clse-min16 cm16
15:12:59  19  ,clse-min18 cm18
15:12:59  20  -- clse relation to moving-avg
15:12:59  21  ,clse-avg4  ca4
15:12:59  22  ,clse-avg6  ca6
15:12:59  23  ,clse-avg8  ca8
15:12:59  24  ,clse-avg10 ca10
15:12:59  25  ,clse-avg12 ca12
15:12:59  26  ,clse-avg14 ca14
15:12:59  27  ,clse-avg16 ca16
15:12:59  28  ,clse-avg18 ca18
15:12:59  29  -- clse relation to moving-max
15:12:59  30  ,clse-max4  cx4
15:12:59  31  ,clse-max6  cx6
15:12:59  32  ,clse-max8  cx8
15:12:59  33  ,clse-max10 cx10
15:12:59  34  ,clse-max12 cx12
15:12:59  35  ,clse-max14 cx14
15:12:59  36  ,clse-max16 cx16
15:12:59  37  ,clse-max18 cx18
15:12:59  38  -- Derive more attributes.
15:12:59  39  -- I want to use CORR() here to help SVM see the shape of the series.
15:12:59  40  -- But COVAR_POP is more stable:
15:12:59  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
15:12:59  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
15:12:59  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
15:12:59  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
15:12:59  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
15:12:59  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
15:12:59  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
15:12:59  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
15:12:59  49  -- Derive date related attributes:
15:12:59  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
15:12:59  51  ,0+TO_CHAR(ydate,'D')d
15:12:59  52  ,0+TO_CHAR(ydate,'W')w
15:12:59  53  -- mpm stands for minutes-past-midnight:
15:12:59  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
15:12:59  55  -- mph stands for minutes-past-hour:
15:12:59  56  ,0+TO_CHAR(ydate,'MI')mph
15:12:59  57  FROM svm6102
15:12:59  58  ORDER BY ydate
15:12:59  59  /

Table created.

Elapsed: 00:00:02.17
15:13:01 SQL> 
15:13:01 SQL> -- rpt
15:13:01 SQL> 
15:13:01 SQL> SELECT
15:13:01   2  pair
15:13:01   3  ,COUNT(pair)
15:13:01   4  ,MIN(clse),MAX(clse)
15:13:01   5  ,MIN(ydate),MAX(ydate)
15:13:01   6  FROM svm6122
15:13:01   7  GROUP BY pair
15:13:01   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_chf       19462    .931675	  1.00635 2010-10-03 20:55:01 2011-01-05 15:10:00

Elapsed: 00:00:00.03
15:13:01 SQL> 
15:13:01 SQL> -- Prepare for derivation of NTILE based params:
15:13:01 SQL> 
15:13:01 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.24
15:13:01 SQL> CREATE TABLE svm6142 COMPRESS AS
15:13:01   2  SELECT
15:13:01   3  pair
15:13:01   4  ,ydate
15:13:01   5  ,prdate
15:13:01   6  ,clse
15:13:01   7  ,g6
15:13:01   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
15:13:01   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
15:13:01  10  ,CASE WHEN trend IS NULL THEN 1
15:13:01  11  	    WHEN trend =0      THEN 1
15:13:01  12  	    ELSE trend END trend
15:13:01  13  ,cm4
15:13:01  14  ,cm6
15:13:01  15  ,cm8
15:13:01  16  ,cm10
15:13:01  17  ,cm12
15:13:01  18  ,cm14
15:13:01  19  ,cm16
15:13:01  20  ,cm18
15:13:01  21  --
15:13:01  22  ,ca4
15:13:01  23  ,ca6
15:13:01  24  ,ca8
15:13:01  25  ,ca10
15:13:01  26  ,ca12
15:13:01  27  ,ca14
15:13:01  28  ,ca16
15:13:01  29  ,ca18
15:13:01  30  --
15:13:01  31  ,cx4
15:13:01  32  ,cx6
15:13:01  33  ,cx8
15:13:01  34  ,cx10
15:13:01  35  ,cx12
15:13:01  36  ,cx14
15:13:01  37  ,cx16
15:13:01  38  ,cx18
15:13:01  39  --
15:13:01  40  ,crr4
15:13:01  41  ,crr6
15:13:01  42  ,crr8
15:13:01  43  ,crr10
15:13:01  44  ,crr12
15:13:01  45  ,crr14
15:13:01  46  ,crr16
15:13:01  47  ,crr18
15:13:01  48  --
15:13:01  49  ,hh
15:13:01  50  ,d
15:13:01  51  ,w
15:13:01  52  ,mpm
15:13:01  53  ,mph
15:13:01  54  FROM svm6122
15:13:01  55  ORDER BY ydate
15:13:01  56  /

Table created.

Elapsed: 00:00:00.35
15:13:01 SQL> 
15:13:01 SQL> -- rpt
15:13:01 SQL> 
15:13:01 SQL> SELECT
15:13:01   2  pair
15:13:01   3  ,trend
15:13:01   4  ,gatt
15:13:01   5  ,COUNT(pair)
15:13:01   6  ,AVG(g6)
15:13:01   7  FROM svm6142
15:13:01   8  GROUP BY pair,trend,gatt
15:13:01   9  ORDER BY pair,trend,gatt
15:13:01  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7072  -.0019936
usd_chf 	-1 up	      3045 .003835688
usd_chf 	 1 nup	      6414  -.0015513
usd_chf 	 1 up	      2859 .003797121
usd_chf 	 1		72

Elapsed: 00:00:00.04
15:13:01 SQL> 
15:13:01 SQL> 
15:13:01 SQL> -- Derive NTILE based params:
15:13:01 SQL> 
15:13:01 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.21
15:13:02 SQL> CREATE TABLE svm6162 COMPRESS AS
15:13:02   2  SELECT
15:13:02   3  pair
15:13:02   4  ,ydate
15:13:02   5  ,prdate
15:13:02   6  ,clse
15:13:02   7  ,g6
15:13:02   8  ,gatt
15:13:02   9  ,gattn
15:13:02  10  ,trend
15:13:02  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
15:13:02  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
15:13:02  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
15:13:02  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
15:13:02  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
15:13:02  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
15:13:02  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
15:13:02  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
15:13:02  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
15:13:02  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
15:13:02  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
15:13:02  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
15:13:02  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
15:13:02  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
15:13:02  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
15:13:02  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
15:13:02  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
15:13:02  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
15:13:02  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
15:13:02  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
15:13:02  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
15:13:02  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
15:13:02  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
15:13:02  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
15:13:02  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
15:13:02  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
15:13:02  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
15:13:02  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
15:13:02  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
15:13:02  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
15:13:02  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
15:13:02  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
15:13:02  43  ,hh  att32
15:13:02  44  ,d   att33
15:13:02  45  ,w   att34
15:13:02  46  ,mpm att35
15:13:02  47  ,mph att36
15:13:02  48  ,trend att37
15:13:02  49  FROM svm6142
15:13:02  50  ORDER BY ydate
15:13:02  51  /

Table created.

Elapsed: 00:00:04.78
15:13:06 SQL> 
15:13:06 SQL> -- rpt
15:13:06 SQL> 
15:13:06 SQL> SELECT
15:13:06   2  pair
15:13:06   3  ,trend
15:13:06   4  ,gatt
15:13:06   5  ,COUNT(pair)
15:13:06   6  ,AVG(g6)
15:13:06   7  FROM svm6162
15:13:06   8  GROUP BY pair,trend,gatt
15:13:06   9  ORDER BY pair,trend,gatt
15:13:06  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7072  -.0019936
usd_chf 	-1 up	      3045 .003835688
usd_chf 	 1 nup	      6414  -.0015513
usd_chf 	 1 up	      2859 .003797121
usd_chf 	 1		72

Elapsed: 00:00:00.03
15:13:06 SQL> 
15:13:06 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
15:13:07 SQL> CREATE TABLE modsrc COMPRESS AS
15:13:07   2  SELECT
15:13:07   3  pair
15:13:07   4  ,ydate
15:13:07   5  ,prdate
15:13:07   6  ,trend
15:13:07   7  ,g6
15:13:07   8  ,gatt
15:13:07   9  ,gattn
15:13:07  10  FROM svm6162
15:13:07  11  /

Table created.

Elapsed: 00:00:00.08
15:13:07 SQL> 
15:13:07 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
15:13:07 SQL> 
15:13:07 SQL> DROP   TABLE chf_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
15:13:07 SQL> CREATE TABLE chf_ms610 COMPRESS AS
15:13:07   2  SELECT
15:13:07   3  ydate
15:13:07   4  ,trend chf_trend
15:13:07   5  ,g6    chf_g6
15:13:07   6  ,gatt  chf_gatt
15:13:07   7  ,gattn chf_gattn
15:13:07   8  FROM modsrc
15:13:07   9  /

Table created.

Elapsed: 00:00:00.06
15:13:07 SQL> 
15:13:07 SQL> ANALYZE TABLE chf_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
15:13:07 SQL> 
15:13:07 SQL> -- I need a copy of the attributes:
15:13:07 SQL> 
15:13:07 SQL> 
15:13:07 SQL> DROP   TABLE chf_att;

Table dropped.

Elapsed: 00:00:00.08
15:13:07 SQL> CREATE TABLE chf_att COMPRESS AS
15:13:07   2  SELECT
15:13:07   3  ydate
15:13:07   4  ,att00 chf_att00
15:13:07   5  ,att01 chf_att01
15:13:07   6  ,att02 chf_att02
15:13:07   7  ,att03 chf_att03
15:13:07   8  ,att04 chf_att04
15:13:07   9  ,att05 chf_att05
15:13:07  10  ,att06 chf_att06
15:13:07  11  ,att07 chf_att07
15:13:07  12  ,att08 chf_att08
15:13:07  13  ,att09 chf_att09
15:13:07  14  ,att10 chf_att10
15:13:07  15  ,att11 chf_att11
15:13:07  16  ,att12 chf_att12
15:13:07  17  ,att13 chf_att13
15:13:07  18  ,att14 chf_att14
15:13:07  19  ,att15 chf_att15
15:13:07  20  ,att16 chf_att16
15:13:07  21  ,att17 chf_att17
15:13:07  22  ,att18 chf_att18
15:13:07  23  ,att19 chf_att19
15:13:07  24  ,att20 chf_att20
15:13:07  25  ,att21 chf_att21
15:13:07  26  ,att22 chf_att22
15:13:07  27  ,att23 chf_att23
15:13:07  28  ,att24 chf_att24
15:13:07  29  ,att25 chf_att25
15:13:07  30  ,att26 chf_att26
15:13:07  31  ,att27 chf_att27
15:13:07  32  ,att28 chf_att28
15:13:07  33  ,att29 chf_att29
15:13:07  34  ,att30 chf_att30
15:13:07  35  ,att31 chf_att31
15:13:07  36  ,att32 chf_att32
15:13:07  37  ,att33 chf_att33
15:13:07  38  ,att34 chf_att34
15:13:07  39  ,att35 chf_att35
15:13:07  40  ,att36 chf_att36
15:13:07  41  ,att37 chf_att37
15:13:07  42  FROM svm6162
15:13:07  43  /

Table created.

Elapsed: 00:00:00.16
15:13:07 SQL> 
15:13:07 SQL> ANALYZE TABLE chf_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.44
15:13:08 SQL> 
15:13:08 SQL> -- rpt
15:13:08 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19462

Elapsed: 00:00:00.84
15:13:09 SQL> SELECT COUNT(*)FROM chf_att;

  COUNT(*)
----------
     19462

Elapsed: 00:00:00.00
15:13:09 SQL> 
15:13:09 SQL> --
15:13:09 SQL> -- ech610.sql
15:13:09 SQL> --
15:13:09 SQL> 
15:13:09 SQL> -- Creates views and tables for backtesting a forex SVM strategy
15:13:09 SQL> 
15:13:09 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.57
15:13:09 SQL> 
15:13:09 SQL> -- I created di5min here:
15:13:09 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
15:13:09 SQL> 
15:13:09 SQL> CREATE OR REPLACE VIEW svm6102 AS
15:13:09   2  SELECT
15:13:09   3  pair
15:13:09   4  ,ydate
15:13:09   5  ,prdate
15:13:09   6  ,rownum rnum -- acts as t in my time-series
15:13:09   7  ,clse
15:13:09   8  -- Derive a bunch of attributes from clse, the latest price:
15:13:09   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
15:13:09  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
15:13:09  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
15:13:09  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
15:13:09  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
15:13:09  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
15:13:09  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
15:13:09  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
15:13:09  17  --
15:13:09  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
15:13:09  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
15:13:09  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
15:13:09  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
15:13:09  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
15:13:09  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
15:13:09  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
15:13:09  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
15:13:09  26  --
15:13:09  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
15:13:09  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
15:13:09  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
15:13:09  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
15:13:09  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
15:13:09  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
15:13:09  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
15:13:09  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
15:13:09  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
15:13:09  36  FROM di5min WHERE pair LIKE'%ech%'
15:13:09  37  AND ydate > sysdate - 95
15:13:09  38  ORDER BY ydate
15:13:09  39  /

View created.

Elapsed: 00:00:00.04
15:13:09 SQL> 
15:13:09 SQL> -- rpt
15:13:09 SQL> 
15:13:09 SQL> SELECT
15:13:09   2  pair
15:13:09   3  ,COUNT(pair)
15:13:09   4  ,MIN(clse),MAX(clse)
15:13:09   5  ,MIN(avg6),MAX(avg6)
15:13:09   6  ,MIN(ydate),MAX(ydate)
15:13:09   7  FROM svm6102
15:13:09   8  GROUP BY pair
15:13:09   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ech_usd       19461 1.24192946 1.38284305 1.24320711 1.37986485 2010-10-03 20:55:01 2011-01-05 15:10:00

Elapsed: 00:00:00.83
15:13:10 SQL> 
15:13:10 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
15:13:10 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.28
15:13:10 SQL> CREATE TABLE svm6122 COMPRESS AS
15:13:10   2  SELECT
15:13:10   3  pair
15:13:10   4  ,ydate
15:13:10   5  ,prdate
15:13:10   6  ,clse
15:13:10   7  -- g6 is important. I want to predict g6:
15:13:10   8  ,ld6 - clse g6
15:13:10   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
15:13:10  10  -- I want more attributes from the ones I derived above:
15:13:10  11  -- clse relation to moving-min
15:13:10  12  ,clse-min4  cm4
15:13:10  13  ,clse-min6  cm6
15:13:10  14  ,clse-min8  cm8
15:13:10  15  ,clse-min10 cm10
15:13:10  16  ,clse-min12 cm12
15:13:10  17  ,clse-min14 cm14
15:13:10  18  ,clse-min16 cm16
15:13:10  19  ,clse-min18 cm18
15:13:10  20  -- clse relation to moving-avg
15:13:10  21  ,clse-avg4  ca4
15:13:10  22  ,clse-avg6  ca6
15:13:10  23  ,clse-avg8  ca8
15:13:10  24  ,clse-avg10 ca10
15:13:10  25  ,clse-avg12 ca12
15:13:10  26  ,clse-avg14 ca14
15:13:10  27  ,clse-avg16 ca16
15:13:10  28  ,clse-avg18 ca18
15:13:10  29  -- clse relation to moving-max
15:13:10  30  ,clse-max4  cx4
15:13:10  31  ,clse-max6  cx6
15:13:10  32  ,clse-max8  cx8
15:13:10  33  ,clse-max10 cx10
15:13:10  34  ,clse-max12 cx12
15:13:10  35  ,clse-max14 cx14
15:13:10  36  ,clse-max16 cx16
15:13:10  37  ,clse-max18 cx18
15:13:10  38  -- Derive more attributes.
15:13:10  39  -- I want to use CORR() here to help SVM see the shape of the series.
15:13:10  40  -- But COVAR_POP is more stable:
15:13:10  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
15:13:10  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
15:13:10  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
15:13:10  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
15:13:10  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
15:13:10  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
15:13:10  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
15:13:10  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
15:13:10  49  -- Derive date related attributes:
15:13:10  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
15:13:10  51  ,0+TO_CHAR(ydate,'D')d
15:13:10  52  ,0+TO_CHAR(ydate,'W')w
15:13:10  53  -- mpm stands for minutes-past-midnight:
15:13:10  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
15:13:10  55  -- mph stands for minutes-past-hour:
15:13:10  56  ,0+TO_CHAR(ydate,'MI')mph
15:13:10  57  FROM svm6102
15:13:10  58  ORDER BY ydate
15:13:10  59  /

Table created.

Elapsed: 00:00:02.12
15:13:13 SQL> 
15:13:13 SQL> -- rpt
15:13:13 SQL> 
15:13:13 SQL> SELECT
15:13:13   2  pair
15:13:13   3  ,COUNT(pair)
15:13:13   4  ,MIN(clse),MAX(clse)
15:13:13   5  ,MIN(ydate),MAX(ydate)
15:13:13   6  FROM svm6122
15:13:13   7  GROUP BY pair
15:13:13   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ech_usd       19461 1.24192946 1.38284305 2010-10-03 20:55:01 2011-01-05 15:10:00

Elapsed: 00:00:00.03
15:13:13 SQL> 
15:13:13 SQL> -- Prepare for derivation of NTILE based params:
15:13:13 SQL> 
15:13:13 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.27
15:13:13 SQL> CREATE TABLE svm6142 COMPRESS AS
15:13:13   2  SELECT
15:13:13   3  pair
15:13:13   4  ,ydate
15:13:13   5  ,prdate
15:13:13   6  ,clse
15:13:13   7  ,g6
15:13:13   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
15:13:13   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
15:13:13  10  ,CASE WHEN trend IS NULL THEN 1
15:13:13  11  	    WHEN trend =0      THEN 1
15:13:13  12  	    ELSE trend END trend
15:13:13  13  ,cm4
15:13:13  14  ,cm6
15:13:13  15  ,cm8
15:13:13  16  ,cm10
15:13:13  17  ,cm12
15:13:13  18  ,cm14
15:13:13  19  ,cm16
15:13:13  20  ,cm18
15:13:13  21  --
15:13:13  22  ,ca4
15:13:13  23  ,ca6
15:13:13  24  ,ca8
15:13:13  25  ,ca10
15:13:13  26  ,ca12
15:13:13  27  ,ca14
15:13:13  28  ,ca16
15:13:13  29  ,ca18
15:13:13  30  --
15:13:13  31  ,cx4
15:13:13  32  ,cx6
15:13:13  33  ,cx8
15:13:13  34  ,cx10
15:13:13  35  ,cx12
15:13:13  36  ,cx14
15:13:13  37  ,cx16
15:13:13  38  ,cx18
15:13:13  39  --
15:13:13  40  ,crr4
15:13:13  41  ,crr6
15:13:13  42  ,crr8
15:13:13  43  ,crr10
15:13:13  44  ,crr12
15:13:13  45  ,crr14
15:13:13  46  ,crr16
15:13:13  47  ,crr18
15:13:13  48  --
15:13:13  49  ,hh
15:13:13  50  ,d
15:13:13  51  ,w
15:13:13  52  ,mpm
15:13:13  53  ,mph
15:13:13  54  FROM svm6122
15:13:13  55  ORDER BY ydate
15:13:13  56  /

Table created.

Elapsed: 00:00:00.38
15:13:13 SQL> 
15:13:13 SQL> -- rpt
15:13:13 SQL> 
15:13:13 SQL> SELECT
15:13:13   2  pair
15:13:13   3  ,trend
15:13:13   4  ,gatt
15:13:13   5  ,COUNT(pair)
15:13:13   6  ,AVG(g6)
15:13:13   7  FROM svm6142
15:13:13   8  GROUP BY pair,trend,gatt
15:13:13   9  ORDER BY pair,trend,gatt
15:13:13  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6658 -.00222518
ech_usd 	-1 up	      3552 .003511144
ech_usd 	-1		30
ech_usd 	 1 nup	      6320 -.00241051
ech_usd 	 1 up	      2859 .004077585
ech_usd 	 1		42

6 rows selected.

Elapsed: 00:00:00.03
15:13:13 SQL> 
15:13:13 SQL> 
15:13:13 SQL> -- Derive NTILE based params:
15:13:13 SQL> 
15:13:13 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.22
15:13:13 SQL> CREATE TABLE svm6162 COMPRESS AS
15:13:13   2  SELECT
15:13:13   3  pair
15:13:13   4  ,ydate
15:13:13   5  ,prdate
15:13:13   6  ,clse
15:13:13   7  ,g6
15:13:13   8  ,gatt
15:13:13   9  ,gattn
15:13:13  10  ,trend
15:13:13  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
15:13:13  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
15:13:13  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
15:13:13  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
15:13:13  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
15:13:13  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
15:13:13  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
15:13:13  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
15:13:13  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
15:13:13  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
15:13:13  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
15:13:13  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
15:13:13  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
15:13:13  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
15:13:13  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
15:13:13  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
15:13:13  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
15:13:13  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
15:13:13  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
15:13:13  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
15:13:13  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
15:13:13  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
15:13:13  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
15:13:13  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
15:13:13  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
15:13:13  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
15:13:13  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
15:13:13  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
15:13:13  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
15:13:13  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
15:13:13  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
15:13:13  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
15:13:13  43  ,hh  att32
15:13:13  44  ,d   att33
15:13:13  45  ,w   att34
15:13:13  46  ,mpm att35
15:13:13  47  ,mph att36
15:13:13  48  ,trend att37
15:13:13  49  FROM svm6142
15:13:13  50  ORDER BY ydate
15:13:13  51  /

Table created.

Elapsed: 00:00:04.86
15:13:18 SQL> 
15:13:18 SQL> -- rpt
15:13:18 SQL> 
15:13:18 SQL> SELECT
15:13:18   2  pair
15:13:18   3  ,trend
15:13:18   4  ,gatt
15:13:18   5  ,COUNT(pair)
15:13:18   6  ,AVG(g6)
15:13:18   7  FROM svm6162
15:13:18   8  GROUP BY pair,trend,gatt
15:13:18   9  ORDER BY pair,trend,gatt
15:13:18  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6658 -.00222518
ech_usd 	-1 up	      3552 .003511144
ech_usd 	-1		30
ech_usd 	 1 nup	      6320 -.00241051
ech_usd 	 1 up	      2859 .004077585
ech_usd 	 1		42

6 rows selected.

Elapsed: 00:00:00.02
15:13:18 SQL> 
15:13:18 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.10
15:13:18 SQL> CREATE TABLE modsrc COMPRESS AS
15:13:18   2  SELECT
15:13:18   3  pair
15:13:18   4  ,ydate
15:13:18   5  ,prdate
15:13:18   6  ,trend
15:13:18   7  ,g6
15:13:18   8  ,gatt
15:13:18   9  ,gattn
15:13:18  10  FROM svm6162
15:13:18  11  /

Table created.

Elapsed: 00:00:00.09
15:13:19 SQL> 
15:13:19 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.22
15:13:19 SQL> 
15:13:19 SQL> DROP   TABLE ech_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
15:13:19 SQL> CREATE TABLE ech_ms610 COMPRESS AS
15:13:19   2  SELECT
15:13:19   3  ydate
15:13:19   4  ,trend ech_trend
15:13:19   5  ,g6    ech_g6
15:13:19   6  ,gatt  ech_gatt
15:13:19   7  ,gattn ech_gattn
15:13:19   8  FROM modsrc
15:13:19   9  /

Table created.

Elapsed: 00:00:00.07
15:13:19 SQL> 
15:13:19 SQL> ANALYZE TABLE ech_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
15:13:19 SQL> 
15:13:19 SQL> -- I need a copy of the attributes:
15:13:19 SQL> 
15:13:19 SQL> 
15:13:19 SQL> DROP   TABLE ech_att;

Table dropped.

Elapsed: 00:00:00.05
15:13:19 SQL> CREATE TABLE ech_att COMPRESS AS
15:13:19   2  SELECT
15:13:19   3  ydate
15:13:19   4  ,att00 ech_att00
15:13:19   5  ,att01 ech_att01
15:13:19   6  ,att02 ech_att02
15:13:19   7  ,att03 ech_att03
15:13:19   8  ,att04 ech_att04
15:13:19   9  ,att05 ech_att05
15:13:19  10  ,att06 ech_att06
15:13:19  11  ,att07 ech_att07
15:13:19  12  ,att08 ech_att08
15:13:19  13  ,att09 ech_att09
15:13:19  14  ,att10 ech_att10
15:13:19  15  ,att11 ech_att11
15:13:19  16  ,att12 ech_att12
15:13:19  17  ,att13 ech_att13
15:13:19  18  ,att14 ech_att14
15:13:19  19  ,att15 ech_att15
15:13:19  20  ,att16 ech_att16
15:13:19  21  ,att17 ech_att17
15:13:19  22  ,att18 ech_att18
15:13:19  23  ,att19 ech_att19
15:13:19  24  ,att20 ech_att20
15:13:19  25  ,att21 ech_att21
15:13:19  26  ,att22 ech_att22
15:13:19  27  ,att23 ech_att23
15:13:19  28  ,att24 ech_att24
15:13:19  29  ,att25 ech_att25
15:13:19  30  ,att26 ech_att26
15:13:19  31  ,att27 ech_att27
15:13:19  32  ,att28 ech_att28
15:13:19  33  ,att29 ech_att29
15:13:19  34  ,att30 ech_att30
15:13:19  35  ,att31 ech_att31
15:13:19  36  ,att32 ech_att32
15:13:19  37  ,att33 ech_att33
15:13:19  38  ,att34 ech_att34
15:13:19  39  ,att35 ech_att35
15:13:19  40  ,att36 ech_att36
15:13:19  41  ,att37 ech_att37
15:13:19  42  FROM svm6162
15:13:19  43  /

Table created.

Elapsed: 00:00:00.15
15:13:19 SQL> 
15:13:19 SQL> ANALYZE TABLE ech_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
15:13:20 SQL> 
15:13:20 SQL> -- rpt
15:13:20 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19461

Elapsed: 00:00:00.77
15:13:21 SQL> SELECT COUNT(*)FROM ech_att;

  COUNT(*)
----------
     19461

Elapsed: 00:00:00.00
15:13:21 SQL> 
15:13:21 SQL> --
15:13:21 SQL> -- egb610.sql
15:13:21 SQL> --
15:13:21 SQL> 
15:13:21 SQL> -- Creates views and tables for backtesting a forex SVM strategy
15:13:21 SQL> 
15:13:21 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.40
15:13:21 SQL> 
15:13:21 SQL> -- I created di5min here:
15:13:21 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
15:13:21 SQL> 
15:13:21 SQL> CREATE OR REPLACE VIEW svm6102 AS
15:13:21   2  SELECT
15:13:21   3  pair
15:13:21   4  ,ydate
15:13:21   5  ,prdate
15:13:21   6  ,rownum rnum -- acts as t in my time-series
15:13:21   7  ,clse
15:13:21   8  -- Derive a bunch of attributes from clse, the latest price:
15:13:21   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
15:13:21  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
15:13:21  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
15:13:21  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
15:13:21  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
15:13:21  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
15:13:21  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
15:13:21  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
15:13:21  17  --
15:13:21  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
15:13:21  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
15:13:21  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
15:13:21  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
15:13:21  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
15:13:21  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
15:13:21  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
15:13:21  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
15:13:21  26  --
15:13:21  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
15:13:21  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
15:13:21  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
15:13:21  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
15:13:21  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
15:13:21  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
15:13:21  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
15:13:21  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
15:13:21  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
15:13:21  36  FROM di5min WHERE pair LIKE'%egb%'
15:13:21  37  AND ydate > sysdate - 95
15:13:21  38  ORDER BY ydate
15:13:21  39  /

View created.

Elapsed: 00:00:00.05
15:13:21 SQL> 
15:13:21 SQL> -- rpt
15:13:21 SQL> 
15:13:21 SQL> SELECT
15:13:21   2  pair
15:13:21   3  ,COUNT(pair)
15:13:21   4  ,MIN(clse),MAX(clse)
15:13:21   5  ,MIN(avg6),MAX(avg6)
15:13:21   6  ,MIN(ydate),MAX(ydate)
15:13:21   7  FROM svm6102
15:13:21   8  GROUP BY pair
15:13:21   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
egb_usd       19460 .833520557 .893920122 .834199029 .892400287 2010-10-03 20:55:01 2011-01-05 15:10:00

Elapsed: 00:00:00.95
15:13:22 SQL> 
15:13:22 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
15:13:22 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.30
15:13:22 SQL> CREATE TABLE svm6122 COMPRESS AS
15:13:22   2  SELECT
15:13:22   3  pair
15:13:22   4  ,ydate
15:13:22   5  ,prdate
15:13:22   6  ,clse
15:13:22   7  -- g6 is important. I want to predict g6:
15:13:22   8  ,ld6 - clse g6
15:13:22   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
15:13:22  10  -- I want more attributes from the ones I derived above:
15:13:22  11  -- clse relation to moving-min
15:13:22  12  ,clse-min4  cm4
15:13:22  13  ,clse-min6  cm6
15:13:22  14  ,clse-min8  cm8
15:13:22  15  ,clse-min10 cm10
15:13:22  16  ,clse-min12 cm12
15:13:22  17  ,clse-min14 cm14
15:13:22  18  ,clse-min16 cm16
15:13:22  19  ,clse-min18 cm18
15:13:22  20  -- clse relation to moving-avg
15:13:22  21  ,clse-avg4  ca4
15:13:22  22  ,clse-avg6  ca6
15:13:22  23  ,clse-avg8  ca8
15:13:22  24  ,clse-avg10 ca10
15:13:22  25  ,clse-avg12 ca12
15:13:22  26  ,clse-avg14 ca14
15:13:22  27  ,clse-avg16 ca16
15:13:22  28  ,clse-avg18 ca18
15:13:22  29  -- clse relation to moving-max
15:13:22  30  ,clse-max4  cx4
15:13:22  31  ,clse-max6  cx6
15:13:22  32  ,clse-max8  cx8
15:13:22  33  ,clse-max10 cx10
15:13:22  34  ,clse-max12 cx12
15:13:22  35  ,clse-max14 cx14
15:13:22  36  ,clse-max16 cx16
15:13:22  37  ,clse-max18 cx18
15:13:22  38  -- Derive more attributes.
15:13:22  39  -- I want to use CORR() here to help SVM see the shape of the series.
15:13:22  40  -- But COVAR_POP is more stable:
15:13:22  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
15:13:22  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
15:13:22  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
15:13:22  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
15:13:22  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
15:13:22  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
15:13:22  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
15:13:22  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
15:13:22  49  -- Derive date related attributes:
15:13:22  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
15:13:22  51  ,0+TO_CHAR(ydate,'D')d
15:13:22  52  ,0+TO_CHAR(ydate,'W')w
15:13:22  53  -- mpm stands for minutes-past-midnight:
15:13:22  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
15:13:22  55  -- mph stands for minutes-past-hour:
15:13:22  56  ,0+TO_CHAR(ydate,'MI')mph
15:13:22  57  FROM svm6102
15:13:22  58  ORDER BY ydate
15:13:22  59  /

Table created.

Elapsed: 00:00:02.60
15:13:25 SQL> 
15:13:25 SQL> -- rpt
15:13:25 SQL> 
15:13:25 SQL> SELECT
15:13:25   2  pair
15:13:25   3  ,COUNT(pair)
15:13:25   4  ,MIN(clse),MAX(clse)
15:13:25   5  ,MIN(ydate),MAX(ydate)
15:13:25   6  FROM svm6122
15:13:25   7  GROUP BY pair
15:13:25   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
egb_usd       19460 .833520557 .893920122 2010-10-03 20:55:01 2011-01-05 15:10:00

Elapsed: 00:00:00.04
15:13:25 SQL> 
15:13:25 SQL> -- Prepare for derivation of NTILE based params:
15:13:25 SQL> 
15:13:25 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.31
15:13:25 SQL> CREATE TABLE svm6142 COMPRESS AS
15:13:25   2  SELECT
15:13:25   3  pair
15:13:25   4  ,ydate
15:13:25   5  ,prdate
15:13:25   6  ,clse
15:13:25   7  ,g6
15:13:25   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
15:13:25   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
15:13:25  10  ,CASE WHEN trend IS NULL THEN 1
15:13:25  11  	    WHEN trend =0      THEN 1
15:13:25  12  	    ELSE trend END trend
15:13:25  13  ,cm4
15:13:25  14  ,cm6
15:13:25  15  ,cm8
15:13:25  16  ,cm10
15:13:25  17  ,cm12
15:13:25  18  ,cm14
15:13:25  19  ,cm16
15:13:25  20  ,cm18
15:13:25  21  --
15:13:25  22  ,ca4
15:13:25  23  ,ca6
15:13:25  24  ,ca8
15:13:25  25  ,ca10
15:13:25  26  ,ca12
15:13:25  27  ,ca14
15:13:25  28  ,ca16
15:13:25  29  ,ca18
15:13:25  30  --
15:13:25  31  ,cx4
15:13:25  32  ,cx6
15:13:25  33  ,cx8
15:13:25  34  ,cx10
15:13:25  35  ,cx12
15:13:25  36  ,cx14
15:13:25  37  ,cx16
15:13:25  38  ,cx18
15:13:25  39  --
15:13:25  40  ,crr4
15:13:25  41  ,crr6
15:13:25  42  ,crr8
15:13:25  43  ,crr10
15:13:25  44  ,crr12
15:13:25  45  ,crr14
15:13:25  46  ,crr16
15:13:25  47  ,crr18
15:13:25  48  --
15:13:25  49  ,hh
15:13:25  50  ,d
15:13:25  51  ,w
15:13:25  52  ,mpm
15:13:25  53  ,mph
15:13:25  54  FROM svm6122
15:13:25  55  ORDER BY ydate
15:13:25  56  /

Table created.

Elapsed: 00:00:00.45
15:13:26 SQL> 
15:13:26 SQL> -- rpt
15:13:26 SQL> 
15:13:26 SQL> SELECT
15:13:26   2  pair
15:13:26   3  ,trend
15:13:26   4  ,gatt
15:13:26   5  ,COUNT(pair)
15:13:26   6  ,AVG(g6)
15:13:26   7  FROM svm6142
15:13:26   8  GROUP BY pair,trend,gatt
15:13:26   9  ORDER BY pair,trend,gatt
15:13:26  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7682 -.00104765
egb_usd 	-1 up	      2626 .002933187
egb_usd 	-1		69
egb_usd 	 1 nup	      6463 -.00137572
egb_usd 	 1 up	      2617   .0029282
egb_usd 	 1		 3

6 rows selected.

Elapsed: 00:00:00.04
15:13:26 SQL> 
15:13:26 SQL> 
15:13:26 SQL> -- Derive NTILE based params:
15:13:26 SQL> 
15:13:26 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.33
15:13:26 SQL> CREATE TABLE svm6162 COMPRESS AS
15:13:26   2  SELECT
15:13:26   3  pair
15:13:26   4  ,ydate
15:13:26   5  ,prdate
15:13:26   6  ,clse
15:13:26   7  ,g6
15:13:26   8  ,gatt
15:13:26   9  ,gattn
15:13:26  10  ,trend
15:13:26  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
15:13:26  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
15:13:26  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
15:13:26  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
15:13:26  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
15:13:26  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
15:13:26  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
15:13:26  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
15:13:26  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
15:13:26  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
15:13:26  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
15:13:26  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
15:13:26  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
15:13:26  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
15:13:26  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
15:13:26  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
15:13:26  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
15:13:26  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
15:13:26  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
15:13:26  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
15:13:26  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
15:13:26  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
15:13:26  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
15:13:26  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
15:13:26  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
15:13:26  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
15:13:26  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
15:13:26  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
15:13:26  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
15:13:26  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
15:13:26  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
15:13:26  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
15:13:26  43  ,hh  att32
15:13:26  44  ,d   att33
15:13:26  45  ,w   att34
15:13:26  46  ,mpm att35
15:13:26  47  ,mph att36
15:13:26  48  ,trend att37
15:13:26  49  FROM svm6142
15:13:26  50  ORDER BY ydate
15:13:26  51  /

Table created.

Elapsed: 00:00:05.61
15:13:32 SQL> 
15:13:32 SQL> -- rpt
15:13:32 SQL> 
15:13:32 SQL> SELECT
15:13:32   2  pair
15:13:32   3  ,trend
15:13:32   4  ,gatt
15:13:32   5  ,COUNT(pair)
15:13:32   6  ,AVG(g6)
15:13:32   7  FROM svm6162
15:13:32   8  GROUP BY pair,trend,gatt
15:13:32   9  ORDER BY pair,trend,gatt
15:13:32  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7682 -.00104765
egb_usd 	-1 up	      2626 .002933187
egb_usd 	-1		69
egb_usd 	 1 nup	      6463 -.00137572
egb_usd 	 1 up	      2617   .0029282
egb_usd 	 1		 3

6 rows selected.

Elapsed: 00:00:00.03
15:13:32 SQL> 
15:13:32 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.17
15:13:32 SQL> CREATE TABLE modsrc COMPRESS AS
15:13:32   2  SELECT
15:13:32   3  pair
15:13:32   4  ,ydate
15:13:32   5  ,prdate
15:13:32   6  ,trend
15:13:32   7  ,g6
15:13:32   8  ,gatt
15:13:32   9  ,gattn
15:13:32  10  FROM svm6162
15:13:32  11  /

Table created.

Elapsed: 00:00:00.08
15:13:32 SQL> 
15:13:32 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.22
15:13:32 SQL> 
15:13:32 SQL> DROP   TABLE egb_ms610 ;

Table dropped.

Elapsed: 00:00:00.03
15:13:32 SQL> CREATE TABLE egb_ms610 COMPRESS AS
15:13:32   2  SELECT
15:13:32   3  ydate
15:13:32   4  ,trend egb_trend
15:13:32   5  ,g6    egb_g6
15:13:32   6  ,gatt  egb_gatt
15:13:32   7  ,gattn egb_gattn
15:13:32   8  FROM modsrc
15:13:32   9  /

Table created.

Elapsed: 00:00:00.06
15:13:32 SQL> 
15:13:32 SQL> ANALYZE TABLE egb_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
15:13:32 SQL> 
15:13:32 SQL> -- I need a copy of the attributes:
15:13:32 SQL> 
15:13:32 SQL> 
15:13:32 SQL> DROP   TABLE egb_att;

Table dropped.

Elapsed: 00:00:00.04
15:13:32 SQL> CREATE TABLE egb_att COMPRESS AS
15:13:32   2  SELECT
15:13:32   3  ydate
15:13:32   4  ,att00 egb_att00
15:13:32   5  ,att01 egb_att01
15:13:32   6  ,att02 egb_att02
15:13:32   7  ,att03 egb_att03
15:13:32   8  ,att04 egb_att04
15:13:32   9  ,att05 egb_att05
15:13:32  10  ,att06 egb_att06
15:13:32  11  ,att07 egb_att07
15:13:32  12  ,att08 egb_att08
15:13:32  13  ,att09 egb_att09
15:13:32  14  ,att10 egb_att10
15:13:32  15  ,att11 egb_att11
15:13:32  16  ,att12 egb_att12
15:13:32  17  ,att13 egb_att13
15:13:32  18  ,att14 egb_att14
15:13:32  19  ,att15 egb_att15
15:13:32  20  ,att16 egb_att16
15:13:32  21  ,att17 egb_att17
15:13:32  22  ,att18 egb_att18
15:13:32  23  ,att19 egb_att19
15:13:32  24  ,att20 egb_att20
15:13:32  25  ,att21 egb_att21
15:13:32  26  ,att22 egb_att22
15:13:32  27  ,att23 egb_att23
15:13:32  28  ,att24 egb_att24
15:13:32  29  ,att25 egb_att25
15:13:32  30  ,att26 egb_att26
15:13:32  31  ,att27 egb_att27
15:13:32  32  ,att28 egb_att28
15:13:32  33  ,att29 egb_att29
15:13:32  34  ,att30 egb_att30
15:13:32  35  ,att31 egb_att31
15:13:32  36  ,att32 egb_att32
15:13:32  37  ,att33 egb_att33
15:13:32  38  ,att34 egb_att34
15:13:32  39  ,att35 egb_att35
15:13:32  40  ,att36 egb_att36
15:13:32  41  ,att37 egb_att37
15:13:32  42  FROM svm6162
15:13:32  43  /

Table created.

Elapsed: 00:00:00.18
15:13:33 SQL> 
15:13:33 SQL> ANALYZE TABLE egb_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.48
15:13:33 SQL> 
15:13:33 SQL> -- rpt
15:13:33 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19460

Elapsed: 00:00:00.93
15:13:34 SQL> SELECT COUNT(*)FROM egb_att;

  COUNT(*)
----------
     19460

Elapsed: 00:00:00.00
15:13:34 SQL> 
15:13:34 SQL> --
15:13:34 SQL> -- ejp610.sql
15:13:34 SQL> --
15:13:34 SQL> 
15:13:34 SQL> -- Creates views and tables for backtesting a forex SVM strategy
15:13:34 SQL> 
15:13:34 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.50
15:13:35 SQL> 
15:13:35 SQL> -- I created di5min here:
15:13:35 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
15:13:35 SQL> 
15:13:35 SQL> CREATE OR REPLACE VIEW svm6102 AS
15:13:35   2  SELECT
15:13:35   3  pair
15:13:35   4  ,ydate
15:13:35   5  ,prdate
15:13:35   6  ,rownum rnum -- acts as t in my time-series
15:13:35   7  ,clse
15:13:35   8  -- Derive a bunch of attributes from clse, the latest price:
15:13:35   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
15:13:35  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
15:13:35  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
15:13:35  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
15:13:35  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
15:13:35  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
15:13:35  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
15:13:35  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
15:13:35  17  --
15:13:35  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
15:13:35  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
15:13:35  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
15:13:35  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
15:13:35  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
15:13:35  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
15:13:35  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
15:13:35  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
15:13:35  26  --
15:13:35  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
15:13:35  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
15:13:35  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
15:13:35  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
15:13:35  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
15:13:35  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
15:13:35  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
15:13:35  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
15:13:35  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
15:13:35  36  FROM di5min WHERE pair LIKE'%ejp%'
15:13:35  37  AND ydate > sysdate - 95
15:13:35  38  ORDER BY ydate
15:13:35  39  /

View created.

Elapsed: 00:00:00.03
15:13:35 SQL> 
15:13:35 SQL> -- rpt
15:13:35 SQL> 
15:13:35 SQL> SELECT
15:13:35   2  pair
15:13:35   3  ,COUNT(pair)
15:13:35   4  ,MIN(clse),MAX(clse)
15:13:35   5  ,MIN(avg6),MAX(avg6)
15:13:35   6  ,MIN(ydate),MAX(ydate)
15:13:35   7  FROM svm6102
15:13:35   8  GROUP BY pair
15:13:35   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ejp_usd       19458 107.643765	115.63485 107.776148 115.509678 2010-10-03 20:55:01 2011-01-05 15:10:00

Elapsed: 00:00:00.84
15:13:35 SQL> 
15:13:35 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
15:13:35 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.26
15:13:36 SQL> CREATE TABLE svm6122 COMPRESS AS
15:13:36   2  SELECT
15:13:36   3  pair
15:13:36   4  ,ydate
15:13:36   5  ,prdate
15:13:36   6  ,clse
15:13:36   7  -- g6 is important. I want to predict g6:
15:13:36   8  ,ld6 - clse g6
15:13:36   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
15:13:36  10  -- I want more attributes from the ones I derived above:
15:13:36  11  -- clse relation to moving-min
15:13:36  12  ,clse-min4  cm4
15:13:36  13  ,clse-min6  cm6
15:13:36  14  ,clse-min8  cm8
15:13:36  15  ,clse-min10 cm10
15:13:36  16  ,clse-min12 cm12
15:13:36  17  ,clse-min14 cm14
15:13:36  18  ,clse-min16 cm16
15:13:36  19  ,clse-min18 cm18
15:13:36  20  -- clse relation to moving-avg
15:13:36  21  ,clse-avg4  ca4
15:13:36  22  ,clse-avg6  ca6
15:13:36  23  ,clse-avg8  ca8
15:13:36  24  ,clse-avg10 ca10
15:13:36  25  ,clse-avg12 ca12
15:13:36  26  ,clse-avg14 ca14
15:13:36  27  ,clse-avg16 ca16
15:13:36  28  ,clse-avg18 ca18
15:13:36  29  -- clse relation to moving-max
15:13:36  30  ,clse-max4  cx4
15:13:36  31  ,clse-max6  cx6
15:13:36  32  ,clse-max8  cx8
15:13:36  33  ,clse-max10 cx10
15:13:36  34  ,clse-max12 cx12
15:13:36  35  ,clse-max14 cx14
15:13:36  36  ,clse-max16 cx16
15:13:36  37  ,clse-max18 cx18
15:13:36  38  -- Derive more attributes.
15:13:36  39  -- I want to use CORR() here to help SVM see the shape of the series.
15:13:36  40  -- But COVAR_POP is more stable:
15:13:36  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
15:13:36  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
15:13:36  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
15:13:36  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
15:13:36  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
15:13:36  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
15:13:36  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
15:13:36  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
15:13:36  49  -- Derive date related attributes:
15:13:36  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
15:13:36  51  ,0+TO_CHAR(ydate,'D')d
15:13:36  52  ,0+TO_CHAR(ydate,'W')w
15:13:36  53  -- mpm stands for minutes-past-midnight:
15:13:36  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
15:13:36  55  -- mph stands for minutes-past-hour:
15:13:36  56  ,0+TO_CHAR(ydate,'MI')mph
15:13:36  57  FROM svm6102
15:13:36  58  ORDER BY ydate
15:13:36  59  /

Table created.

Elapsed: 00:00:02.11
15:13:38 SQL> 
15:13:38 SQL> -- rpt
15:13:38 SQL> 
15:13:38 SQL> SELECT
15:13:38   2  pair
15:13:38   3  ,COUNT(pair)
15:13:38   4  ,MIN(clse),MAX(clse)
15:13:38   5  ,MIN(ydate),MAX(ydate)
15:13:38   6  FROM svm6122
15:13:38   7  GROUP BY pair
15:13:38   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ejp_usd       19458 107.643765	115.63485 2010-10-03 20:55:01 2011-01-05 15:10:00

Elapsed: 00:00:00.04
15:13:38 SQL> 
15:13:38 SQL> -- Prepare for derivation of NTILE based params:
15:13:38 SQL> 
15:13:38 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.24
15:13:38 SQL> CREATE TABLE svm6142 COMPRESS AS
15:13:38   2  SELECT
15:13:38   3  pair
15:13:38   4  ,ydate
15:13:38   5  ,prdate
15:13:38   6  ,clse
15:13:38   7  ,g6
15:13:38   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
15:13:38   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
15:13:38  10  ,CASE WHEN trend IS NULL THEN 1
15:13:38  11  	    WHEN trend =0      THEN 1
15:13:38  12  	    ELSE trend END trend
15:13:38  13  ,cm4
15:13:38  14  ,cm6
15:13:38  15  ,cm8
15:13:38  16  ,cm10
15:13:38  17  ,cm12
15:13:38  18  ,cm14
15:13:38  19  ,cm16
15:13:38  20  ,cm18
15:13:38  21  --
15:13:38  22  ,ca4
15:13:38  23  ,ca6
15:13:38  24  ,ca8
15:13:38  25  ,ca10
15:13:38  26  ,ca12
15:13:38  27  ,ca14
15:13:38  28  ,ca16
15:13:38  29  ,ca18
15:13:38  30  --
15:13:38  31  ,cx4
15:13:38  32  ,cx6
15:13:38  33  ,cx8
15:13:38  34  ,cx10
15:13:38  35  ,cx12
15:13:38  36  ,cx14
15:13:38  37  ,cx16
15:13:38  38  ,cx18
15:13:38  39  --
15:13:38  40  ,crr4
15:13:38  41  ,crr6
15:13:38  42  ,crr8
15:13:38  43  ,crr10
15:13:38  44  ,crr12
15:13:38  45  ,crr14
15:13:38  46  ,crr16
15:13:38  47  ,crr18
15:13:38  48  --
15:13:38  49  ,hh
15:13:38  50  ,d
15:13:38  51  ,w
15:13:38  52  ,mpm
15:13:38  53  ,mph
15:13:38  54  FROM svm6122
15:13:38  55  ORDER BY ydate
15:13:38  56  /

Table created.

Elapsed: 00:00:00.40
15:13:38 SQL> 
15:13:38 SQL> -- rpt
15:13:38 SQL> 
15:13:38 SQL> SELECT
15:13:38   2  pair
15:13:38   3  ,trend
15:13:38   4  ,gatt
15:13:38   5  ,COUNT(pair)
15:13:38   6  ,AVG(g6)
15:13:38   7  FROM svm6142
15:13:38   8  GROUP BY pair,trend,gatt
15:13:38   9  ORDER BY pair,trend,gatt
15:13:38  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      4986 -.32090265
ejp_usd 	-1 up	      4885 .272558921
ejp_usd 	-1		48
ejp_usd 	 1 nup	      4940 -.30127115
ejp_usd 	 1 up	      4575 .290080166
ejp_usd 	 1		24

6 rows selected.

Elapsed: 00:00:00.03
15:13:38 SQL> 
15:13:38 SQL> 
15:13:38 SQL> -- Derive NTILE based params:
15:13:38 SQL> 
15:13:38 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.18
15:13:39 SQL> CREATE TABLE svm6162 COMPRESS AS
15:13:39   2  SELECT
15:13:39   3  pair
15:13:39   4  ,ydate
15:13:39   5  ,prdate
15:13:39   6  ,clse
15:13:39   7  ,g6
15:13:39   8  ,gatt
15:13:39   9  ,gattn
15:13:39  10  ,trend
15:13:39  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
15:13:39  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
15:13:39  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
15:13:39  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
15:13:39  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
15:13:39  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
15:13:39  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
15:13:39  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
15:13:39  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
15:13:39  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
15:13:39  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
15:13:39  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
15:13:39  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
15:13:39  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
15:13:39  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
15:13:39  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
15:13:39  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
15:13:39  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
15:13:39  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
15:13:39  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
15:13:39  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
15:13:39  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
15:13:39  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
15:13:39  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
15:13:39  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
15:13:39  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
15:13:39  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
15:13:39  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
15:13:39  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
15:13:39  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
15:13:39  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
15:13:39  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
15:13:39  43  ,hh  att32
15:13:39  44  ,d   att33
15:13:39  45  ,w   att34
15:13:39  46  ,mpm att35
15:13:39  47  ,mph att36
15:13:39  48  ,trend att37
15:13:39  49  FROM svm6142
15:13:39  50  ORDER BY ydate
15:13:39  51  /
