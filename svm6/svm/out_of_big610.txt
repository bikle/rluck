
SQL*Plus: Release 11.2.0.1.0 Production on Fri Jan 7 10:20:59 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

10:20:59 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.01
10:20:59 SQL> 10:20:59 SQL> --
10:20:59 SQL> -- eur610.sql
10:20:59 SQL> --
10:20:59 SQL> 
10:20:59 SQL> -- Creates views and tables for backtesting a forex SVM strategy
10:20:59 SQL> 
10:20:59 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.01
10:20:59 SQL> 
10:20:59 SQL> -- I created di5min here:
10:20:59 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
10:20:59 SQL> 
10:20:59 SQL> CREATE OR REPLACE VIEW svm6102 AS
10:20:59   2  SELECT
10:20:59   3  pair
10:20:59   4  ,ydate
10:20:59   5  ,prdate
10:20:59   6  ,rownum rnum -- acts as t in my time-series
10:20:59   7  ,clse
10:20:59   8  -- Derive a bunch of attributes from clse, the latest price:
10:20:59   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
10:20:59  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
10:20:59  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
10:20:59  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
10:20:59  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
10:20:59  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
10:20:59  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
10:20:59  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
10:20:59  17  --
10:20:59  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
10:20:59  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
10:20:59  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
10:20:59  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
10:20:59  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
10:20:59  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
10:20:59  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
10:20:59  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
10:20:59  26  --
10:20:59  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
10:20:59  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
10:20:59  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
10:20:59  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
10:20:59  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
10:20:59  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
10:20:59  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
10:20:59  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
10:20:59  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
10:20:59  36  FROM di5min WHERE pair LIKE'%eur%'
10:20:59  37  AND ydate > sysdate - 95
10:20:59  38  ORDER BY ydate
10:20:59  39  /

View created.

Elapsed: 00:00:00.08
10:20:59 SQL> 
10:20:59 SQL> -- rpt
10:20:59 SQL> 
10:20:59 SQL> SELECT
10:20:59   2  pair
10:20:59   3  ,COUNT(pair)
10:20:59   4  ,MIN(clse),MAX(clse)
10:20:59   5  ,MIN(avg6),MAX(avg6)
10:20:59   6  ,MIN(ydate),MAX(ydate)
10:20:59   7  FROM svm6102
10:20:59   8  GROUP BY pair
10:20:59   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_usd       19810  1.2970625	   1.4273 1.29872979 1.42436233 2010-10-04 10:25:01 2011-01-07 10:15:00

Elapsed: 00:00:00.96
10:21:00 SQL> 
10:21:00 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
10:21:00 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.34
10:21:00 SQL> CREATE TABLE svm6122 COMPRESS AS
10:21:00   2  SELECT
10:21:00   3  pair
10:21:00   4  ,ydate
10:21:00   5  ,prdate
10:21:00   6  ,clse
10:21:00   7  -- g6 is important. I want to predict g6:
10:21:00   8  ,ld6 - clse g6
10:21:00   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
10:21:00  10  -- I want more attributes from the ones I derived above:
10:21:00  11  -- clse relation to moving-min
10:21:00  12  ,clse-min4  cm4
10:21:00  13  ,clse-min6  cm6
10:21:00  14  ,clse-min8  cm8
10:21:00  15  ,clse-min10 cm10
10:21:00  16  ,clse-min12 cm12
10:21:00  17  ,clse-min14 cm14
10:21:00  18  ,clse-min16 cm16
10:21:00  19  ,clse-min18 cm18
10:21:00  20  -- clse relation to moving-avg
10:21:00  21  ,clse-avg4  ca4
10:21:00  22  ,clse-avg6  ca6
10:21:00  23  ,clse-avg8  ca8
10:21:00  24  ,clse-avg10 ca10
10:21:00  25  ,clse-avg12 ca12
10:21:00  26  ,clse-avg14 ca14
10:21:00  27  ,clse-avg16 ca16
10:21:00  28  ,clse-avg18 ca18
10:21:00  29  -- clse relation to moving-max
10:21:00  30  ,clse-max4  cx4
10:21:00  31  ,clse-max6  cx6
10:21:00  32  ,clse-max8  cx8
10:21:00  33  ,clse-max10 cx10
10:21:00  34  ,clse-max12 cx12
10:21:00  35  ,clse-max14 cx14
10:21:00  36  ,clse-max16 cx16
10:21:00  37  ,clse-max18 cx18
10:21:00  38  -- Derive more attributes.
10:21:00  39  -- I want to use CORR() here to help SVM see the shape of the series.
10:21:00  40  -- But COVAR_POP is more stable:
10:21:00  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
10:21:00  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
10:21:00  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
10:21:00  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
10:21:00  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
10:21:00  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
10:21:00  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
10:21:00  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
10:21:00  49  -- Derive date related attributes:
10:21:00  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
10:21:00  51  ,0+TO_CHAR(ydate,'D')d
10:21:00  52  ,0+TO_CHAR(ydate,'W')w
10:21:00  53  -- mpm stands for minutes-past-midnight:
10:21:00  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
10:21:00  55  -- mph stands for minutes-past-hour:
10:21:00  56  ,0+TO_CHAR(ydate,'MI')mph
10:21:00  57  FROM svm6102
10:21:00  58  ORDER BY ydate
10:21:00  59  /

Table created.

Elapsed: 00:00:02.43
10:21:03 SQL> 
10:21:03 SQL> -- rpt
10:21:03 SQL> 
10:21:03 SQL> SELECT
10:21:03   2  pair
10:21:03   3  ,COUNT(pair)
10:21:03   4  ,MIN(clse),MAX(clse)
10:21:03   5  ,MIN(ydate),MAX(ydate)
10:21:03   6  FROM svm6122
10:21:03   7  GROUP BY pair
10:21:03   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_usd       19810  1.2970625	   1.4273 2010-10-04 10:25:01 2011-01-07 10:15:00

Elapsed: 00:00:00.05
10:21:03 SQL> 
10:21:03 SQL> -- Prepare for derivation of NTILE based params:
10:21:03 SQL> 
10:21:03 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.68
10:21:04 SQL> CREATE TABLE svm6142 COMPRESS AS
10:21:04   2  SELECT
10:21:04   3  pair
10:21:04   4  ,ydate
10:21:04   5  ,prdate
10:21:04   6  ,clse
10:21:04   7  ,g6
10:21:04   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
10:21:04   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
10:21:04  10  ,CASE WHEN trend IS NULL THEN 1
10:21:04  11  	    WHEN trend =0      THEN 1
10:21:04  12  	    ELSE trend END trend
10:21:04  13  ,cm4
10:21:04  14  ,cm6
10:21:04  15  ,cm8
10:21:04  16  ,cm10
10:21:04  17  ,cm12
10:21:04  18  ,cm14
10:21:04  19  ,cm16
10:21:04  20  ,cm18
10:21:04  21  --
10:21:04  22  ,ca4
10:21:04  23  ,ca6
10:21:04  24  ,ca8
10:21:04  25  ,ca10
10:21:04  26  ,ca12
10:21:04  27  ,ca14
10:21:04  28  ,ca16
10:21:04  29  ,ca18
10:21:04  30  --
10:21:04  31  ,cx4
10:21:04  32  ,cx6
10:21:04  33  ,cx8
10:21:04  34  ,cx10
10:21:04  35  ,cx12
10:21:04  36  ,cx14
10:21:04  37  ,cx16
10:21:04  38  ,cx18
10:21:04  39  --
10:21:04  40  ,crr4
10:21:04  41  ,crr6
10:21:04  42  ,crr8
10:21:04  43  ,crr10
10:21:04  44  ,crr12
10:21:04  45  ,crr14
10:21:04  46  ,crr16
10:21:04  47  ,crr18
10:21:04  48  --
10:21:04  49  ,hh
10:21:04  50  ,d
10:21:04  51  ,w
10:21:04  52  ,mpm
10:21:04  53  ,mph
10:21:04  54  FROM svm6122
10:21:04  55  ORDER BY ydate
10:21:04  56  /

Table created.

Elapsed: 00:00:00.37
10:21:04 SQL> 
10:21:04 SQL> -- rpt
10:21:04 SQL> 
10:21:04 SQL> SELECT
10:21:04   2  pair
10:21:04   3  ,trend
10:21:04   4  ,gatt
10:21:04   5  ,COUNT(pair)
10:21:04   6  ,AVG(g6)
10:21:04   7  FROM svm6142
10:21:04   8  GROUP BY pair,trend,gatt
10:21:04   9  ORDER BY pair,trend,gatt
10:21:04  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6577 -.00314334
eur_usd 	-1 up	      3564 .004451722
eur_usd 	-1		66
eur_usd 	 1 nup	      5892 -.00324164
eur_usd 	 1 up	      3705 .005071238
eur_usd 	 1		 6

6 rows selected.

Elapsed: 00:00:00.05
10:21:04 SQL> 
10:21:04 SQL> 
10:21:04 SQL> -- Derive NTILE based params:
10:21:04 SQL> 
10:21:04 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.42
10:21:04 SQL> CREATE TABLE svm6162 COMPRESS AS
10:21:04   2  SELECT
10:21:04   3  pair
10:21:04   4  ,ydate
10:21:04   5  ,prdate
10:21:04   6  ,clse
10:21:04   7  ,g6
10:21:04   8  ,gatt
10:21:04   9  ,gattn
10:21:04  10  ,trend
10:21:04  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
10:21:04  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
10:21:04  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
10:21:04  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
10:21:04  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
10:21:04  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
10:21:04  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
10:21:04  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
10:21:04  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
10:21:04  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
10:21:04  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
10:21:04  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
10:21:04  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
10:21:04  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
10:21:04  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
10:21:04  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
10:21:04  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
10:21:04  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
10:21:04  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
10:21:04  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
10:21:04  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
10:21:04  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
10:21:04  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
10:21:04  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
10:21:04  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
10:21:04  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
10:21:04  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
10:21:04  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
10:21:04  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
10:21:04  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
10:21:04  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
10:21:04  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
10:21:04  43  ,hh  att32
10:21:04  44  ,d   att33
10:21:04  45  ,w   att34
10:21:04  46  ,mpm att35
10:21:04  47  ,mph att36
10:21:04  48  ,trend att37
10:21:04  49  FROM svm6142
10:21:04  50  ORDER BY ydate
10:21:04  51  /

Table created.

Elapsed: 00:00:04.83
10:21:09 SQL> 
10:21:09 SQL> -- rpt
10:21:09 SQL> 
10:21:09 SQL> SELECT
10:21:09   2  pair
10:21:09   3  ,trend
10:21:09   4  ,gatt
10:21:09   5  ,COUNT(pair)
10:21:09   6  ,AVG(g6)
10:21:09   7  FROM svm6162
10:21:09   8  GROUP BY pair,trend,gatt
10:21:09   9  ORDER BY pair,trend,gatt
10:21:09  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6577 -.00314334
eur_usd 	-1 up	      3564 .004451722
eur_usd 	-1		66
eur_usd 	 1 nup	      5892 -.00324164
eur_usd 	 1 up	      3705 .005071238
eur_usd 	 1		 6

6 rows selected.

Elapsed: 00:00:00.03
10:21:09 SQL> 
10:21:09 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.27
10:21:10 SQL> CREATE TABLE modsrc COMPRESS AS
10:21:10   2  SELECT
10:21:10   3  pair
10:21:10   4  ,ydate
10:21:10   5  ,prdate
10:21:10   6  ,trend
10:21:10   7  ,g6
10:21:10   8  ,gatt
10:21:10   9  ,gattn
10:21:10  10  FROM svm6162
10:21:10  11  /

Table created.

Elapsed: 00:00:00.08
10:21:10 SQL> 
10:21:10 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.27
10:21:10 SQL> 
10:21:10 SQL> DROP   TABLE eur_ms610 ;

Table dropped.

Elapsed: 00:00:00.18
10:21:10 SQL> CREATE TABLE eur_ms610 COMPRESS AS
10:21:10   2  SELECT
10:21:10   3  ydate
10:21:10   4  ,trend eur_trend
10:21:10   5  ,g6    eur_g6
10:21:10   6  ,gatt  eur_gatt
10:21:10   7  ,gattn eur_gattn
10:21:10   8  FROM modsrc
10:21:10   9  /

Table created.

Elapsed: 00:00:00.06
10:21:10 SQL> 
10:21:10 SQL> ANALYZE TABLE eur_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
10:21:10 SQL> 
10:21:10 SQL> -- I need a copy of the attributes:
10:21:10 SQL> 
10:21:10 SQL> 
10:21:10 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.04
10:21:10 SQL> CREATE TABLE eur_att COMPRESS AS
10:21:10   2  SELECT
10:21:10   3  ydate
10:21:10   4  ,att00 eur_att00
10:21:10   5  ,att01 eur_att01
10:21:10   6  ,att02 eur_att02
10:21:10   7  ,att03 eur_att03
10:21:10   8  ,att04 eur_att04
10:21:10   9  ,att05 eur_att05
10:21:10  10  ,att06 eur_att06
10:21:10  11  ,att07 eur_att07
10:21:10  12  ,att08 eur_att08
10:21:10  13  ,att09 eur_att09
10:21:10  14  ,att10 eur_att10
10:21:10  15  ,att11 eur_att11
10:21:10  16  ,att12 eur_att12
10:21:10  17  ,att13 eur_att13
10:21:10  18  ,att14 eur_att14
10:21:10  19  ,att15 eur_att15
10:21:10  20  ,att16 eur_att16
10:21:10  21  ,att17 eur_att17
10:21:10  22  ,att18 eur_att18
10:21:10  23  ,att19 eur_att19
10:21:10  24  ,att20 eur_att20
10:21:10  25  ,att21 eur_att21
10:21:10  26  ,att22 eur_att22
10:21:10  27  ,att23 eur_att23
10:21:10  28  ,att24 eur_att24
10:21:10  29  ,att25 eur_att25
10:21:10  30  ,att26 eur_att26
10:21:10  31  ,att27 eur_att27
10:21:10  32  ,att28 eur_att28
10:21:10  33  ,att29 eur_att29
10:21:10  34  ,att30 eur_att30
10:21:10  35  ,att31 eur_att31
10:21:10  36  ,att32 eur_att32
10:21:10  37  ,att33 eur_att33
10:21:10  38  ,att34 eur_att34
10:21:10  39  ,att35 eur_att35
10:21:10  40  ,att36 eur_att36
10:21:10  41  ,att37 eur_att37
10:21:10  42  FROM svm6162
10:21:10  43  /

Table created.

Elapsed: 00:00:00.17
10:21:11 SQL> 
10:21:11 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
10:21:11 SQL> 
10:21:11 SQL> -- rpt
10:21:11 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19810

Elapsed: 00:00:00.92
10:21:12 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     19810

Elapsed: 00:00:00.00
10:21:12 SQL> 
10:21:12 SQL> --
10:21:12 SQL> -- aud610.sql
10:21:12 SQL> --
10:21:12 SQL> 
10:21:12 SQL> -- Creates views and tables for backtesting a forex SVM strategy
10:21:12 SQL> 
10:21:12 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.52
10:21:12 SQL> 
10:21:12 SQL> -- I created di5min here:
10:21:12 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
10:21:12 SQL> 
10:21:12 SQL> CREATE OR REPLACE VIEW svm6102 AS
10:21:12   2  SELECT
10:21:12   3  pair
10:21:12   4  ,ydate
10:21:12   5  ,prdate
10:21:12   6  ,rownum rnum -- acts as t in my time-series
10:21:12   7  ,clse
10:21:12   8  -- Derive a bunch of attributes from clse, the latest price:
10:21:12   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
10:21:12  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
10:21:12  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
10:21:12  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
10:21:12  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
10:21:12  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
10:21:12  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
10:21:12  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
10:21:12  17  --
10:21:12  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
10:21:12  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
10:21:12  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
10:21:12  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
10:21:12  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
10:21:12  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
10:21:12  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
10:21:12  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
10:21:12  26  --
10:21:12  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
10:21:12  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
10:21:12  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
10:21:12  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
10:21:12  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
10:21:12  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
10:21:12  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
10:21:12  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
10:21:12  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
10:21:12  36  FROM di5min WHERE pair LIKE'%aud%'
10:21:12  37  AND ydate > sysdate - 95
10:21:12  38  ORDER BY ydate
10:21:12  39  /

View created.

Elapsed: 00:00:00.05
10:21:13 SQL> 
10:21:13 SQL> -- rpt
10:21:13 SQL> 
10:21:13 SQL> SELECT
10:21:13   2  pair
10:21:13   3  ,COUNT(pair)
10:21:13   4  ,MIN(clse),MAX(clse)
10:21:13   5  ,MIN(avg6),MAX(avg6)
10:21:13   6  ,MIN(ydate),MAX(ydate)
10:21:13   7  FROM svm6102
10:21:13   8  GROUP BY pair
10:21:13   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
aud_usd       19807	.95405	  1.02495 .957141438 1.02284247 2010-10-04 10:25:01 2011-01-07 10:15:00

Elapsed: 00:00:00.88
10:21:13 SQL> 
10:21:13 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
10:21:13 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.30
10:21:14 SQL> CREATE TABLE svm6122 COMPRESS AS
10:21:14   2  SELECT
10:21:14   3  pair
10:21:14   4  ,ydate
10:21:14   5  ,prdate
10:21:14   6  ,clse
10:21:14   7  -- g6 is important. I want to predict g6:
10:21:14   8  ,ld6 - clse g6
10:21:14   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
10:21:14  10  -- I want more attributes from the ones I derived above:
10:21:14  11  -- clse relation to moving-min
10:21:14  12  ,clse-min4  cm4
10:21:14  13  ,clse-min6  cm6
10:21:14  14  ,clse-min8  cm8
10:21:14  15  ,clse-min10 cm10
10:21:14  16  ,clse-min12 cm12
10:21:14  17  ,clse-min14 cm14
10:21:14  18  ,clse-min16 cm16
10:21:14  19  ,clse-min18 cm18
10:21:14  20  -- clse relation to moving-avg
10:21:14  21  ,clse-avg4  ca4
10:21:14  22  ,clse-avg6  ca6
10:21:14  23  ,clse-avg8  ca8
10:21:14  24  ,clse-avg10 ca10
10:21:14  25  ,clse-avg12 ca12
10:21:14  26  ,clse-avg14 ca14
10:21:14  27  ,clse-avg16 ca16
10:21:14  28  ,clse-avg18 ca18
10:21:14  29  -- clse relation to moving-max
10:21:14  30  ,clse-max4  cx4
10:21:14  31  ,clse-max6  cx6
10:21:14  32  ,clse-max8  cx8
10:21:14  33  ,clse-max10 cx10
10:21:14  34  ,clse-max12 cx12
10:21:14  35  ,clse-max14 cx14
10:21:14  36  ,clse-max16 cx16
10:21:14  37  ,clse-max18 cx18
10:21:14  38  -- Derive more attributes.
10:21:14  39  -- I want to use CORR() here to help SVM see the shape of the series.
10:21:14  40  -- But COVAR_POP is more stable:
10:21:14  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
10:21:14  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
10:21:14  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
10:21:14  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
10:21:14  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
10:21:14  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
10:21:14  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
10:21:14  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
10:21:14  49  -- Derive date related attributes:
10:21:14  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
10:21:14  51  ,0+TO_CHAR(ydate,'D')d
10:21:14  52  ,0+TO_CHAR(ydate,'W')w
10:21:14  53  -- mpm stands for minutes-past-midnight:
10:21:14  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
10:21:14  55  -- mph stands for minutes-past-hour:
10:21:14  56  ,0+TO_CHAR(ydate,'MI')mph
10:21:14  57  FROM svm6102
10:21:14  58  ORDER BY ydate
10:21:14  59  /

Table created.

Elapsed: 00:00:02.06
10:21:16 SQL> 
10:21:16 SQL> -- rpt
10:21:16 SQL> 
10:21:16 SQL> SELECT
10:21:16   2  pair
10:21:16   3  ,COUNT(pair)
10:21:16   4  ,MIN(clse),MAX(clse)
10:21:16   5  ,MIN(ydate),MAX(ydate)
10:21:16   6  FROM svm6122
10:21:16   7  GROUP BY pair
10:21:16   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
aud_usd       19807	.95405	  1.02495 2010-10-04 10:25:01 2011-01-07 10:15:00

Elapsed: 00:00:00.05
10:21:16 SQL> 
10:21:16 SQL> -- Prepare for derivation of NTILE based params:
10:21:16 SQL> 
10:21:16 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.21
10:21:16 SQL> CREATE TABLE svm6142 COMPRESS AS
10:21:16   2  SELECT
10:21:16   3  pair
10:21:16   4  ,ydate
10:21:16   5  ,prdate
10:21:16   6  ,clse
10:21:16   7  ,g6
10:21:16   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
10:21:16   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
10:21:16  10  ,CASE WHEN trend IS NULL THEN 1
10:21:16  11  	    WHEN trend =0      THEN 1
10:21:16  12  	    ELSE trend END trend
10:21:16  13  ,cm4
10:21:16  14  ,cm6
10:21:16  15  ,cm8
10:21:16  16  ,cm10
10:21:16  17  ,cm12
10:21:16  18  ,cm14
10:21:16  19  ,cm16
10:21:16  20  ,cm18
10:21:16  21  --
10:21:16  22  ,ca4
10:21:16  23  ,ca6
10:21:16  24  ,ca8
10:21:16  25  ,ca10
10:21:16  26  ,ca12
10:21:16  27  ,ca14
10:21:16  28  ,ca16
10:21:16  29  ,ca18
10:21:16  30  --
10:21:16  31  ,cx4
10:21:16  32  ,cx6
10:21:16  33  ,cx8
10:21:16  34  ,cx10
10:21:16  35  ,cx12
10:21:16  36  ,cx14
10:21:16  37  ,cx16
10:21:16  38  ,cx18
10:21:16  39  --
10:21:16  40  ,crr4
10:21:16  41  ,crr6
10:21:16  42  ,crr8
10:21:16  43  ,crr10
10:21:16  44  ,crr12
10:21:16  45  ,crr14
10:21:16  46  ,crr16
10:21:16  47  ,crr18
10:21:16  48  --
10:21:16  49  ,hh
10:21:16  50  ,d
10:21:16  51  ,w
10:21:16  52  ,mpm
10:21:16  53  ,mph
10:21:16  54  FROM svm6122
10:21:16  55  ORDER BY ydate
10:21:16  56  /

Table created.

Elapsed: 00:00:00.93
10:21:17 SQL> 
10:21:17 SQL> -- rpt
10:21:17 SQL> 
10:21:17 SQL> SELECT
10:21:17   2  pair
10:21:17   3  ,trend
10:21:17   4  ,gatt
10:21:17   5  ,COUNT(pair)
10:21:17   6  ,AVG(g6)
10:21:17   7  FROM svm6142
10:21:17   8  GROUP BY pair,trend,gatt
10:21:17   9  ORDER BY pair,trend,gatt
10:21:17  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5739 -.00213271
aud_usd 	-1 up	      3684 .003755646
aud_usd 	-1		64
aud_usd 	 1 nup	      6719 -.00214344
aud_usd 	 1 up	      3593 .004054752
aud_usd 	 1		 8

6 rows selected.

Elapsed: 00:00:00.04
10:21:17 SQL> 
10:21:17 SQL> 
10:21:17 SQL> -- Derive NTILE based params:
10:21:17 SQL> 
10:21:17 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.16
10:21:17 SQL> CREATE TABLE svm6162 COMPRESS AS
10:21:17   2  SELECT
10:21:17   3  pair
10:21:17   4  ,ydate
10:21:17   5  ,prdate
10:21:17   6  ,clse
10:21:17   7  ,g6
10:21:17   8  ,gatt
10:21:17   9  ,gattn
10:21:17  10  ,trend
10:21:17  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
10:21:17  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
10:21:17  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
10:21:17  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
10:21:17  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
10:21:17  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
10:21:17  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
10:21:17  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
10:21:17  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
10:21:17  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
10:21:17  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
10:21:17  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
10:21:17  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
10:21:17  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
10:21:17  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
10:21:17  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
10:21:17  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
10:21:17  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
10:21:17  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
10:21:17  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
10:21:17  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
10:21:17  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
10:21:17  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
10:21:17  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
10:21:17  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
10:21:17  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
10:21:17  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
10:21:17  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
10:21:17  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
10:21:17  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
10:21:17  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
10:21:17  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
10:21:17  43  ,hh  att32
10:21:17  44  ,d   att33
10:21:17  45  ,w   att34
10:21:17  46  ,mpm att35
10:21:17  47  ,mph att36
10:21:17  48  ,trend att37
10:21:17  49  FROM svm6142
10:21:17  50  ORDER BY ydate
10:21:17  51  /

Table created.

Elapsed: 00:00:04.89
10:21:22 SQL> 
10:21:22 SQL> -- rpt
10:21:22 SQL> 
10:21:22 SQL> SELECT
10:21:22   2  pair
10:21:22   3  ,trend
10:21:22   4  ,gatt
10:21:22   5  ,COUNT(pair)
10:21:22   6  ,AVG(g6)
10:21:22   7  FROM svm6162
10:21:22   8  GROUP BY pair,trend,gatt
10:21:22   9  ORDER BY pair,trend,gatt
10:21:22  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5739 -.00213271
aud_usd 	-1 up	      3684 .003755646
aud_usd 	-1		64
aud_usd 	 1 nup	      6719 -.00214344
aud_usd 	 1 up	      3593 .004054752
aud_usd 	 1		 8

6 rows selected.

Elapsed: 00:00:00.02
10:21:22 SQL> 
10:21:22 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.17
10:21:22 SQL> CREATE TABLE modsrc COMPRESS AS
10:21:22   2  SELECT
10:21:22   3  pair
10:21:22   4  ,ydate
10:21:22   5  ,prdate
10:21:22   6  ,trend
10:21:22   7  ,g6
10:21:22   8  ,gatt
10:21:22   9  ,gattn
10:21:22  10  FROM svm6162
10:21:22  11  /

Table created.

Elapsed: 00:00:00.08
10:21:22 SQL> 
10:21:22 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
10:21:23 SQL> 
10:21:23 SQL> DROP   TABLE aud_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
10:21:23 SQL> CREATE TABLE aud_ms610 COMPRESS AS
10:21:23   2  SELECT
10:21:23   3  ydate
10:21:23   4  ,trend aud_trend
10:21:23   5  ,g6    aud_g6
10:21:23   6  ,gatt  aud_gatt
10:21:23   7  ,gattn aud_gattn
10:21:23   8  FROM modsrc
10:21:23   9  /

Table created.

Elapsed: 00:00:00.06
10:21:23 SQL> 
10:21:23 SQL> ANALYZE TABLE aud_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
10:21:23 SQL> 
10:21:23 SQL> -- I need a copy of the attributes:
10:21:23 SQL> 
10:21:23 SQL> 
10:21:23 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.11
10:21:23 SQL> CREATE TABLE aud_att COMPRESS AS
10:21:23   2  SELECT
10:21:23   3  ydate
10:21:23   4  ,att00 aud_att00
10:21:23   5  ,att01 aud_att01
10:21:23   6  ,att02 aud_att02
10:21:23   7  ,att03 aud_att03
10:21:23   8  ,att04 aud_att04
10:21:23   9  ,att05 aud_att05
10:21:23  10  ,att06 aud_att06
10:21:23  11  ,att07 aud_att07
10:21:23  12  ,att08 aud_att08
10:21:23  13  ,att09 aud_att09
10:21:23  14  ,att10 aud_att10
10:21:23  15  ,att11 aud_att11
10:21:23  16  ,att12 aud_att12
10:21:23  17  ,att13 aud_att13
10:21:23  18  ,att14 aud_att14
10:21:23  19  ,att15 aud_att15
10:21:23  20  ,att16 aud_att16
10:21:23  21  ,att17 aud_att17
10:21:23  22  ,att18 aud_att18
10:21:23  23  ,att19 aud_att19
10:21:23  24  ,att20 aud_att20
10:21:23  25  ,att21 aud_att21
10:21:23  26  ,att22 aud_att22
10:21:23  27  ,att23 aud_att23
10:21:23  28  ,att24 aud_att24
10:21:23  29  ,att25 aud_att25
10:21:23  30  ,att26 aud_att26
10:21:23  31  ,att27 aud_att27
10:21:23  32  ,att28 aud_att28
10:21:23  33  ,att29 aud_att29
10:21:23  34  ,att30 aud_att30
10:21:23  35  ,att31 aud_att31
10:21:23  36  ,att32 aud_att32
10:21:23  37  ,att33 aud_att33
10:21:23  38  ,att34 aud_att34
10:21:23  39  ,att35 aud_att35
10:21:23  40  ,att36 aud_att36
10:21:23  41  ,att37 aud_att37
10:21:23  42  FROM svm6162
10:21:23  43  /

Table created.

Elapsed: 00:00:00.17
10:21:23 SQL> 
10:21:23 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.57
10:21:24 SQL> 
10:21:24 SQL> -- rpt
10:21:24 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19807

Elapsed: 00:00:00.85
10:21:24 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     19807

Elapsed: 00:00:00.00
10:21:24 SQL> 
10:21:24 SQL> --
10:21:24 SQL> -- gbp610.sql
10:21:24 SQL> --
10:21:24 SQL> 
10:21:24 SQL> -- Creates views and tables for backtesting a forex SVM strategy
10:21:24 SQL> 
10:21:24 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.45
10:21:25 SQL> 
10:21:25 SQL> -- I created di5min here:
10:21:25 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
10:21:25 SQL> 
10:21:25 SQL> CREATE OR REPLACE VIEW svm6102 AS
10:21:25   2  SELECT
10:21:25   3  pair
10:21:25   4  ,ydate
10:21:25   5  ,prdate
10:21:25   6  ,rownum rnum -- acts as t in my time-series
10:21:25   7  ,clse
10:21:25   8  -- Derive a bunch of attributes from clse, the latest price:
10:21:25   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
10:21:25  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
10:21:25  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
10:21:25  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
10:21:25  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
10:21:25  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
10:21:25  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
10:21:25  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
10:21:25  17  --
10:21:25  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
10:21:25  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
10:21:25  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
10:21:25  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
10:21:25  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
10:21:25  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
10:21:25  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
10:21:25  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
10:21:25  26  --
10:21:25  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
10:21:25  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
10:21:25  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
10:21:25  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
10:21:25  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
10:21:25  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
10:21:25  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
10:21:25  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
10:21:25  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
10:21:25  36  FROM di5min WHERE pair LIKE'%gbp%'
10:21:25  37  AND ydate > sysdate - 95
10:21:25  38  ORDER BY ydate
10:21:25  39  /

View created.

Elapsed: 00:00:00.05
10:21:25 SQL> 
10:21:25 SQL> -- rpt
10:21:25 SQL> 
10:21:25 SQL> SELECT
10:21:25   2  pair
10:21:25   3  ,COUNT(pair)
10:21:25   4  ,MIN(clse),MAX(clse)
10:21:25   5  ,MIN(avg6),MAX(avg6)
10:21:25   6  ,MIN(ydate),MAX(ydate)
10:21:25   7  FROM svm6102
10:21:25   8  GROUP BY pair
10:21:25   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
gbp_usd       19809   1.535325	   1.6295 1.53696747 1.62716986 2010-10-04 10:25:01 2011-01-07 10:15:00

Elapsed: 00:00:00.86
10:21:26 SQL> 
10:21:26 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
10:21:26 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.26
10:21:26 SQL> CREATE TABLE svm6122 COMPRESS AS
10:21:26   2  SELECT
10:21:26   3  pair
10:21:26   4  ,ydate
10:21:26   5  ,prdate
10:21:26   6  ,clse
10:21:26   7  -- g6 is important. I want to predict g6:
10:21:26   8  ,ld6 - clse g6
10:21:26   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
10:21:26  10  -- I want more attributes from the ones I derived above:
10:21:26  11  -- clse relation to moving-min
10:21:26  12  ,clse-min4  cm4
10:21:26  13  ,clse-min6  cm6
10:21:26  14  ,clse-min8  cm8
10:21:26  15  ,clse-min10 cm10
10:21:26  16  ,clse-min12 cm12
10:21:26  17  ,clse-min14 cm14
10:21:26  18  ,clse-min16 cm16
10:21:26  19  ,clse-min18 cm18
10:21:26  20  -- clse relation to moving-avg
10:21:26  21  ,clse-avg4  ca4
10:21:26  22  ,clse-avg6  ca6
10:21:26  23  ,clse-avg8  ca8
10:21:26  24  ,clse-avg10 ca10
10:21:26  25  ,clse-avg12 ca12
10:21:26  26  ,clse-avg14 ca14
10:21:26  27  ,clse-avg16 ca16
10:21:26  28  ,clse-avg18 ca18
10:21:26  29  -- clse relation to moving-max
10:21:26  30  ,clse-max4  cx4
10:21:26  31  ,clse-max6  cx6
10:21:26  32  ,clse-max8  cx8
10:21:26  33  ,clse-max10 cx10
10:21:26  34  ,clse-max12 cx12
10:21:26  35  ,clse-max14 cx14
10:21:26  36  ,clse-max16 cx16
10:21:26  37  ,clse-max18 cx18
10:21:26  38  -- Derive more attributes.
10:21:26  39  -- I want to use CORR() here to help SVM see the shape of the series.
10:21:26  40  -- But COVAR_POP is more stable:
10:21:26  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
10:21:26  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
10:21:26  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
10:21:26  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
10:21:26  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
10:21:26  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
10:21:26  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
10:21:26  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
10:21:26  49  -- Derive date related attributes:
10:21:26  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
10:21:26  51  ,0+TO_CHAR(ydate,'D')d
10:21:26  52  ,0+TO_CHAR(ydate,'W')w
10:21:26  53  -- mpm stands for minutes-past-midnight:
10:21:26  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
10:21:26  55  -- mph stands for minutes-past-hour:
10:21:26  56  ,0+TO_CHAR(ydate,'MI')mph
10:21:26  57  FROM svm6102
10:21:26  58  ORDER BY ydate
10:21:26  59  /

Table created.

Elapsed: 00:00:02.06
10:21:28 SQL> 
10:21:28 SQL> -- rpt
10:21:28 SQL> 
10:21:28 SQL> SELECT
10:21:28   2  pair
10:21:28   3  ,COUNT(pair)
10:21:28   4  ,MIN(clse),MAX(clse)
10:21:28   5  ,MIN(ydate),MAX(ydate)
10:21:28   6  FROM svm6122
10:21:28   7  GROUP BY pair
10:21:28   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
gbp_usd       19809   1.535325	   1.6295 2010-10-04 10:25:01 2011-01-07 10:15:00

Elapsed: 00:00:00.06
10:21:28 SQL> 
10:21:28 SQL> -- Prepare for derivation of NTILE based params:
10:21:28 SQL> 
10:21:28 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.28
10:21:29 SQL> CREATE TABLE svm6142 COMPRESS AS
10:21:29   2  SELECT
10:21:29   3  pair
10:21:29   4  ,ydate
10:21:29   5  ,prdate
10:21:29   6  ,clse
10:21:29   7  ,g6
10:21:29   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
10:21:29   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
10:21:29  10  ,CASE WHEN trend IS NULL THEN 1
10:21:29  11  	    WHEN trend =0      THEN 1
10:21:29  12  	    ELSE trend END trend
10:21:29  13  ,cm4
10:21:29  14  ,cm6
10:21:29  15  ,cm8
10:21:29  16  ,cm10
10:21:29  17  ,cm12
10:21:29  18  ,cm14
10:21:29  19  ,cm16
10:21:29  20  ,cm18
10:21:29  21  --
10:21:29  22  ,ca4
10:21:29  23  ,ca6
10:21:29  24  ,ca8
10:21:29  25  ,ca10
10:21:29  26  ,ca12
10:21:29  27  ,ca14
10:21:29  28  ,ca16
10:21:29  29  ,ca18
10:21:29  30  --
10:21:29  31  ,cx4
10:21:29  32  ,cx6
10:21:29  33  ,cx8
10:21:29  34  ,cx10
10:21:29  35  ,cx12
10:21:29  36  ,cx14
10:21:29  37  ,cx16
10:21:29  38  ,cx18
10:21:29  39  --
10:21:29  40  ,crr4
10:21:29  41  ,crr6
10:21:29  42  ,crr8
10:21:29  43  ,crr10
10:21:29  44  ,crr12
10:21:29  45  ,crr14
10:21:29  46  ,crr16
10:21:29  47  ,crr18
10:21:29  48  --
10:21:29  49  ,hh
10:21:29  50  ,d
10:21:29  51  ,w
10:21:29  52  ,mpm
10:21:29  53  ,mph
10:21:29  54  FROM svm6122
10:21:29  55  ORDER BY ydate
10:21:29  56  /

Table created.

Elapsed: 00:00:00.39
10:21:29 SQL> 
10:21:29 SQL> -- rpt
10:21:29 SQL> 
10:21:29 SQL> SELECT
10:21:29   2  pair
10:21:29   3  ,trend
10:21:29   4  ,gatt
10:21:29   5  ,COUNT(pair)
10:21:29   6  ,AVG(g6)
10:21:29   7  FROM svm6142
10:21:29   8  GROUP BY pair,trend,gatt
10:21:29   9  ORDER BY pair,trend,gatt
10:21:29  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6497 -.00261478
gbp_usd 	-1 up	      3511 .004318403
gbp_usd 	-1		66
gbp_usd 	 1 nup	      6274 -.00265831
gbp_usd 	 1 up	      3455 .004523455
gbp_usd 	 1		 6

6 rows selected.

Elapsed: 00:00:00.04
10:21:29 SQL> 
10:21:29 SQL> 
10:21:29 SQL> -- Derive NTILE based params:
10:21:29 SQL> 
10:21:29 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.33
10:21:29 SQL> CREATE TABLE svm6162 COMPRESS AS
10:21:29   2  SELECT
10:21:29   3  pair
10:21:29   4  ,ydate
10:21:29   5  ,prdate
10:21:29   6  ,clse
10:21:29   7  ,g6
10:21:29   8  ,gatt
10:21:29   9  ,gattn
10:21:29  10  ,trend
10:21:29  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
10:21:29  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
10:21:29  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
10:21:29  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
10:21:29  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
10:21:29  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
10:21:29  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
10:21:29  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
10:21:29  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
10:21:29  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
10:21:29  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
10:21:29  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
10:21:29  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
10:21:29  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
10:21:29  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
10:21:29  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
10:21:29  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
10:21:29  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
10:21:29  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
10:21:29  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
10:21:29  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
10:21:29  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
10:21:29  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
10:21:29  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
10:21:29  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
10:21:29  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
10:21:29  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
10:21:29  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
10:21:29  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
10:21:29  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
10:21:29  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
10:21:29  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
10:21:29  43  ,hh  att32
10:21:29  44  ,d   att33
10:21:29  45  ,w   att34
10:21:29  46  ,mpm att35
10:21:29  47  ,mph att36
10:21:29  48  ,trend att37
10:21:29  49  FROM svm6142
10:21:29  50  ORDER BY ydate
10:21:29  51  /

Table created.

Elapsed: 00:00:04.75
10:21:34 SQL> 
10:21:34 SQL> -- rpt
10:21:34 SQL> 
10:21:34 SQL> SELECT
10:21:34   2  pair
10:21:34   3  ,trend
10:21:34   4  ,gatt
10:21:34   5  ,COUNT(pair)
10:21:34   6  ,AVG(g6)
10:21:34   7  FROM svm6162
10:21:34   8  GROUP BY pair,trend,gatt
10:21:34   9  ORDER BY pair,trend,gatt
10:21:34  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6497 -.00261478
gbp_usd 	-1 up	      3511 .004318403
gbp_usd 	-1		66
gbp_usd 	 1 nup	      6274 -.00265831
gbp_usd 	 1 up	      3455 .004523455
gbp_usd 	 1		 6

6 rows selected.

Elapsed: 00:00:00.02
10:21:34 SQL> 
10:21:34 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
10:21:34 SQL> CREATE TABLE modsrc COMPRESS AS
10:21:34   2  SELECT
10:21:34   3  pair
10:21:34   4  ,ydate
10:21:34   5  ,prdate
10:21:34   6  ,trend
10:21:34   7  ,g6
10:21:34   8  ,gatt
10:21:34   9  ,gattn
10:21:34  10  FROM svm6162
10:21:34  11  /

Table created.

Elapsed: 00:00:00.07
10:21:34 SQL> 
10:21:34 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
10:21:34 SQL> 
10:21:34 SQL> DROP   TABLE gbp_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
10:21:34 SQL> CREATE TABLE gbp_ms610 COMPRESS AS
10:21:34   2  SELECT
10:21:34   3  ydate
10:21:34   4  ,trend gbp_trend
10:21:34   5  ,g6    gbp_g6
10:21:34   6  ,gatt  gbp_gatt
10:21:34   7  ,gattn gbp_gattn
10:21:34   8  FROM modsrc
10:21:34   9  /

Table created.

Elapsed: 00:00:00.06
10:21:35 SQL> 
10:21:35 SQL> ANALYZE TABLE gbp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
10:21:35 SQL> 
10:21:35 SQL> -- I need a copy of the attributes:
10:21:35 SQL> 
10:21:35 SQL> 
10:21:35 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.04
10:21:35 SQL> CREATE TABLE gbp_att COMPRESS AS
10:21:35   2  SELECT
10:21:35   3  ydate
10:21:35   4  ,att00 gbp_att00
10:21:35   5  ,att01 gbp_att01
10:21:35   6  ,att02 gbp_att02
10:21:35   7  ,att03 gbp_att03
10:21:35   8  ,att04 gbp_att04
10:21:35   9  ,att05 gbp_att05
10:21:35  10  ,att06 gbp_att06
10:21:35  11  ,att07 gbp_att07
10:21:35  12  ,att08 gbp_att08
10:21:35  13  ,att09 gbp_att09
10:21:35  14  ,att10 gbp_att10
10:21:35  15  ,att11 gbp_att11
10:21:35  16  ,att12 gbp_att12
10:21:35  17  ,att13 gbp_att13
10:21:35  18  ,att14 gbp_att14
10:21:35  19  ,att15 gbp_att15
10:21:35  20  ,att16 gbp_att16
10:21:35  21  ,att17 gbp_att17
10:21:35  22  ,att18 gbp_att18
10:21:35  23  ,att19 gbp_att19
10:21:35  24  ,att20 gbp_att20
10:21:35  25  ,att21 gbp_att21
10:21:35  26  ,att22 gbp_att22
10:21:35  27  ,att23 gbp_att23
10:21:35  28  ,att24 gbp_att24
10:21:35  29  ,att25 gbp_att25
10:21:35  30  ,att26 gbp_att26
10:21:35  31  ,att27 gbp_att27
10:21:35  32  ,att28 gbp_att28
10:21:35  33  ,att29 gbp_att29
10:21:35  34  ,att30 gbp_att30
10:21:35  35  ,att31 gbp_att31
10:21:35  36  ,att32 gbp_att32
10:21:35  37  ,att33 gbp_att33
10:21:35  38  ,att34 gbp_att34
10:21:35  39  ,att35 gbp_att35
10:21:35  40  ,att36 gbp_att36
10:21:35  41  ,att37 gbp_att37
10:21:35  42  FROM svm6162
10:21:35  43  /

Table created.

Elapsed: 00:00:00.16
10:21:35 SQL> 
10:21:35 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.43
10:21:35 SQL> 
10:21:35 SQL> -- rpt
10:21:35 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19809

Elapsed: 00:00:00.86
10:21:36 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     19809

Elapsed: 00:00:00.01
10:21:36 SQL> 
10:21:36 SQL> --
10:21:36 SQL> -- jpy610.sql
10:21:36 SQL> --
10:21:36 SQL> 
10:21:36 SQL> -- Creates views and tables for backtesting a forex SVM strategy
10:21:36 SQL> 
10:21:36 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.48
10:21:37 SQL> 
10:21:37 SQL> -- I created di5min here:
10:21:37 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
10:21:37 SQL> 
10:21:37 SQL> CREATE OR REPLACE VIEW svm6102 AS
10:21:37   2  SELECT
10:21:37   3  pair
10:21:37   4  ,ydate
10:21:37   5  ,prdate
10:21:37   6  ,rownum rnum -- acts as t in my time-series
10:21:37   7  ,clse
10:21:37   8  -- Derive a bunch of attributes from clse, the latest price:
10:21:37   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
10:21:37  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
10:21:37  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
10:21:37  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
10:21:37  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
10:21:37  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
10:21:37  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
10:21:37  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
10:21:37  17  --
10:21:37  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
10:21:37  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
10:21:37  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
10:21:37  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
10:21:37  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
10:21:37  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
10:21:37  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
10:21:37  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
10:21:37  26  --
10:21:37  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
10:21:37  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
10:21:37  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
10:21:37  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
10:21:37  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
10:21:37  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
10:21:37  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
10:21:37  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
10:21:37  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
10:21:37  36  FROM di5min WHERE pair LIKE'%jpy%'
10:21:37  37  AND ydate > sysdate - 95
10:21:37  38  ORDER BY ydate
10:21:37  39  /

View created.

Elapsed: 00:00:00.04
10:21:37 SQL> 
10:21:37 SQL> -- rpt
10:21:37 SQL> 
10:21:37 SQL> SELECT
10:21:37   2  pair
10:21:37   3  ,COUNT(pair)
10:21:37   4  ,MIN(clse),MAX(clse)
10:21:37   5  ,MIN(avg6),MAX(avg6)
10:21:37   6  ,MIN(ydate),MAX(ydate)
10:21:37   7  FROM svm6102
10:21:37   8  GROUP BY pair
10:21:37   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_jpy       19808	 80.25	   84.485 80.3595205 84.3105479 2010-10-04 10:25:01 2011-01-07 10:15:00

Elapsed: 00:00:00.92
10:21:38 SQL> 
10:21:38 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
10:21:38 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.21
10:21:38 SQL> CREATE TABLE svm6122 COMPRESS AS
10:21:38   2  SELECT
10:21:38   3  pair
10:21:38   4  ,ydate
10:21:38   5  ,prdate
10:21:38   6  ,clse
10:21:38   7  -- g6 is important. I want to predict g6:
10:21:38   8  ,ld6 - clse g6
10:21:38   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
10:21:38  10  -- I want more attributes from the ones I derived above:
10:21:38  11  -- clse relation to moving-min
10:21:38  12  ,clse-min4  cm4
10:21:38  13  ,clse-min6  cm6
10:21:38  14  ,clse-min8  cm8
10:21:38  15  ,clse-min10 cm10
10:21:38  16  ,clse-min12 cm12
10:21:38  17  ,clse-min14 cm14
10:21:38  18  ,clse-min16 cm16
10:21:38  19  ,clse-min18 cm18
10:21:38  20  -- clse relation to moving-avg
10:21:38  21  ,clse-avg4  ca4
10:21:38  22  ,clse-avg6  ca6
10:21:38  23  ,clse-avg8  ca8
10:21:38  24  ,clse-avg10 ca10
10:21:38  25  ,clse-avg12 ca12
10:21:38  26  ,clse-avg14 ca14
10:21:38  27  ,clse-avg16 ca16
10:21:38  28  ,clse-avg18 ca18
10:21:38  29  -- clse relation to moving-max
10:21:38  30  ,clse-max4  cx4
10:21:38  31  ,clse-max6  cx6
10:21:38  32  ,clse-max8  cx8
10:21:38  33  ,clse-max10 cx10
10:21:38  34  ,clse-max12 cx12
10:21:38  35  ,clse-max14 cx14
10:21:38  36  ,clse-max16 cx16
10:21:38  37  ,clse-max18 cx18
10:21:38  38  -- Derive more attributes.
10:21:38  39  -- I want to use CORR() here to help SVM see the shape of the series.
10:21:38  40  -- But COVAR_POP is more stable:
10:21:38  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
10:21:38  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
10:21:38  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
10:21:38  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
10:21:38  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
10:21:38  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
10:21:38  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
10:21:38  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
10:21:38  49  -- Derive date related attributes:
10:21:38  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
10:21:38  51  ,0+TO_CHAR(ydate,'D')d
10:21:38  52  ,0+TO_CHAR(ydate,'W')w
10:21:38  53  -- mpm stands for minutes-past-midnight:
10:21:38  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
10:21:38  55  -- mph stands for minutes-past-hour:
10:21:38  56  ,0+TO_CHAR(ydate,'MI')mph
10:21:38  57  FROM svm6102
10:21:38  58  ORDER BY ydate
10:21:38  59  /

Table created.

Elapsed: 00:00:02.14
10:21:40 SQL> 
10:21:40 SQL> -- rpt
10:21:40 SQL> 
10:21:40 SQL> SELECT
10:21:40   2  pair
10:21:40   3  ,COUNT(pair)
10:21:40   4  ,MIN(clse),MAX(clse)
10:21:40   5  ,MIN(ydate),MAX(ydate)
10:21:40   6  FROM svm6122
10:21:40   7  GROUP BY pair
10:21:40   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_jpy       19808	 80.25	   84.485 2010-10-04 10:25:01 2011-01-07 10:15:00

Elapsed: 00:00:00.08
10:21:40 SQL> 
10:21:40 SQL> -- Prepare for derivation of NTILE based params:
10:21:40 SQL> 
10:21:40 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.29
10:21:40 SQL> CREATE TABLE svm6142 COMPRESS AS
10:21:40   2  SELECT
10:21:40   3  pair
10:21:40   4  ,ydate
10:21:40   5  ,prdate
10:21:40   6  ,clse
10:21:40   7  ,g6
10:21:40   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
10:21:40   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
10:21:40  10  ,CASE WHEN trend IS NULL THEN 1
10:21:40  11  	    WHEN trend =0      THEN 1
10:21:40  12  	    ELSE trend END trend
10:21:40  13  ,cm4
10:21:40  14  ,cm6
10:21:40  15  ,cm8
10:21:40  16  ,cm10
10:21:40  17  ,cm12
10:21:40  18  ,cm14
10:21:40  19  ,cm16
10:21:40  20  ,cm18
10:21:40  21  --
10:21:40  22  ,ca4
10:21:40  23  ,ca6
10:21:40  24  ,ca8
10:21:40  25  ,ca10
10:21:40  26  ,ca12
10:21:40  27  ,ca14
10:21:40  28  ,ca16
10:21:40  29  ,ca18
10:21:40  30  --
10:21:40  31  ,cx4
10:21:40  32  ,cx6
10:21:40  33  ,cx8
10:21:40  34  ,cx10
10:21:40  35  ,cx12
10:21:40  36  ,cx14
10:21:40  37  ,cx16
10:21:40  38  ,cx18
10:21:40  39  --
10:21:40  40  ,crr4
10:21:40  41  ,crr6
10:21:40  42  ,crr8
10:21:40  43  ,crr10
10:21:40  44  ,crr12
10:21:40  45  ,crr14
10:21:40  46  ,crr16
10:21:40  47  ,crr18
10:21:40  48  --
10:21:40  49  ,hh
10:21:40  50  ,d
10:21:40  51  ,w
10:21:40  52  ,mpm
10:21:40  53  ,mph
10:21:40  54  FROM svm6122
10:21:40  55  ORDER BY ydate
10:21:40  56  /

Table created.

Elapsed: 00:00:00.37
10:21:41 SQL> 
10:21:41 SQL> -- rpt
10:21:41 SQL> 
10:21:41 SQL> SELECT
10:21:41   2  pair
10:21:41   3  ,trend
10:21:41   4  ,gatt
10:21:41   5  ,COUNT(pair)
10:21:41   6  ,AVG(g6)
10:21:41   7  FROM svm6142
10:21:41   8  GROUP BY pair,trend,gatt
10:21:41   9  ORDER BY pair,trend,gatt
10:21:41  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5171 -.16583061
usd_jpy 	-1 up	      4868 .170645576
usd_jpy 	 1 nup	      5017 -.15289748
usd_jpy 	 1 up	      4680 .172455461
usd_jpy 	 1		72

Elapsed: 00:00:00.07
10:21:41 SQL> 
10:21:41 SQL> 
10:21:41 SQL> -- Derive NTILE based params:
10:21:41 SQL> 
10:21:41 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.19
10:21:41 SQL> CREATE TABLE svm6162 COMPRESS AS
10:21:41   2  SELECT
10:21:41   3  pair
10:21:41   4  ,ydate
10:21:41   5  ,prdate
10:21:41   6  ,clse
10:21:41   7  ,g6
10:21:41   8  ,gatt
10:21:41   9  ,gattn
10:21:41  10  ,trend
10:21:41  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
10:21:41  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
10:21:41  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
10:21:41  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
10:21:41  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
10:21:41  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
10:21:41  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
10:21:41  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
10:21:41  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
10:21:41  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
10:21:41  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
10:21:41  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
10:21:41  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
10:21:41  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
10:21:41  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
10:21:41  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
10:21:41  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
10:21:41  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
10:21:41  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
10:21:41  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
10:21:41  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
10:21:41  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
10:21:41  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
10:21:41  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
10:21:41  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
10:21:41  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
10:21:41  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
10:21:41  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
10:21:41  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
10:21:41  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
10:21:41  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
10:21:41  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
10:21:41  43  ,hh  att32
10:21:41  44  ,d   att33
10:21:41  45  ,w   att34
10:21:41  46  ,mpm att35
10:21:41  47  ,mph att36
10:21:41  48  ,trend att37
10:21:41  49  FROM svm6142
10:21:41  50  ORDER BY ydate
10:21:41  51  /

Table created.

Elapsed: 00:00:04.80
10:21:46 SQL> 
10:21:46 SQL> -- rpt
10:21:46 SQL> 
10:21:46 SQL> SELECT
10:21:46   2  pair
10:21:46   3  ,trend
10:21:46   4  ,gatt
10:21:46   5  ,COUNT(pair)
10:21:46   6  ,AVG(g6)
10:21:46   7  FROM svm6162
10:21:46   8  GROUP BY pair,trend,gatt
10:21:46   9  ORDER BY pair,trend,gatt
10:21:46  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5171 -.16583061
usd_jpy 	-1 up	      4868 .170645576
usd_jpy 	 1 nup	      5017 -.15289748
usd_jpy 	 1 up	      4680 .172455461
usd_jpy 	 1		72

Elapsed: 00:00:00.03
10:21:46 SQL> 
10:21:46 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.14
10:21:46 SQL> CREATE TABLE modsrc COMPRESS AS
10:21:46   2  SELECT
10:21:46   3  pair
10:21:46   4  ,ydate
10:21:46   5  ,prdate
10:21:46   6  ,trend
10:21:46   7  ,g6
10:21:46   8  ,gatt
10:21:46   9  ,gattn
10:21:46  10  FROM svm6162
10:21:46  11  /

Table created.

Elapsed: 00:00:00.09
10:21:46 SQL> 
10:21:46 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.88
10:21:47 SQL> 
10:21:47 SQL> DROP   TABLE jpy_ms610 ;

Table dropped.

Elapsed: 00:00:00.06
10:21:47 SQL> CREATE TABLE jpy_ms610 COMPRESS AS
10:21:47   2  SELECT
10:21:47   3  ydate
10:21:47   4  ,trend jpy_trend
10:21:47   5  ,g6    jpy_g6
10:21:47   6  ,gatt  jpy_gatt
10:21:47   7  ,gattn jpy_gattn
10:21:47   8  FROM modsrc
10:21:47   9  /

Table created.

Elapsed: 00:00:00.09
10:21:47 SQL> 
10:21:47 SQL> ANALYZE TABLE jpy_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
10:21:47 SQL> 
10:21:47 SQL> -- I need a copy of the attributes:
10:21:47 SQL> 
10:21:47 SQL> 
10:21:47 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.08
10:21:47 SQL> CREATE TABLE jpy_att COMPRESS AS
10:21:47   2  SELECT
10:21:47   3  ydate
10:21:47   4  ,att00 jpy_att00
10:21:47   5  ,att01 jpy_att01
10:21:47   6  ,att02 jpy_att02
10:21:47   7  ,att03 jpy_att03
10:21:47   8  ,att04 jpy_att04
10:21:47   9  ,att05 jpy_att05
10:21:47  10  ,att06 jpy_att06
10:21:47  11  ,att07 jpy_att07
10:21:47  12  ,att08 jpy_att08
10:21:47  13  ,att09 jpy_att09
10:21:47  14  ,att10 jpy_att10
10:21:47  15  ,att11 jpy_att11
10:21:47  16  ,att12 jpy_att12
10:21:47  17  ,att13 jpy_att13
10:21:47  18  ,att14 jpy_att14
10:21:47  19  ,att15 jpy_att15
10:21:47  20  ,att16 jpy_att16
10:21:47  21  ,att17 jpy_att17
10:21:47  22  ,att18 jpy_att18
10:21:47  23  ,att19 jpy_att19
10:21:47  24  ,att20 jpy_att20
10:21:47  25  ,att21 jpy_att21
10:21:47  26  ,att22 jpy_att22
10:21:47  27  ,att23 jpy_att23
10:21:47  28  ,att24 jpy_att24
10:21:47  29  ,att25 jpy_att25
10:21:47  30  ,att26 jpy_att26
10:21:47  31  ,att27 jpy_att27
10:21:47  32  ,att28 jpy_att28
10:21:47  33  ,att29 jpy_att29
10:21:47  34  ,att30 jpy_att30
10:21:47  35  ,att31 jpy_att31
10:21:47  36  ,att32 jpy_att32
10:21:47  37  ,att33 jpy_att33
10:21:47  38  ,att34 jpy_att34
10:21:47  39  ,att35 jpy_att35
10:21:47  40  ,att36 jpy_att36
10:21:47  41  ,att37 jpy_att37
10:21:47  42  FROM svm6162
10:21:47  43  /

Table created.

Elapsed: 00:00:00.17
10:21:48 SQL> 
10:21:48 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
10:21:48 SQL> 
10:21:48 SQL> -- rpt
10:21:48 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19808

Elapsed: 00:00:00.92
10:21:49 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     19808

Elapsed: 00:00:00.01
10:21:49 SQL> 
10:21:49 SQL> --
10:21:49 SQL> -- cad610.sql
10:21:49 SQL> --
10:21:49 SQL> 
10:21:49 SQL> -- Creates views and tables for backtesting a forex SVM strategy
10:21:49 SQL> 
10:21:49 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.71
10:21:50 SQL> 
10:21:50 SQL> -- I created di5min here:
10:21:50 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
10:21:50 SQL> 
10:21:50 SQL> CREATE OR REPLACE VIEW svm6102 AS
10:21:50   2  SELECT
10:21:50   3  pair
10:21:50   4  ,ydate
10:21:50   5  ,prdate
10:21:50   6  ,rownum rnum -- acts as t in my time-series
10:21:50   7  ,clse
10:21:50   8  -- Derive a bunch of attributes from clse, the latest price:
10:21:50   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
10:21:50  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
10:21:50  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
10:21:50  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
10:21:50  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
10:21:50  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
10:21:50  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
10:21:50  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
10:21:50  17  --
10:21:50  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
10:21:50  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
10:21:50  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
10:21:50  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
10:21:50  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
10:21:50  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
10:21:50  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
10:21:50  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
10:21:50  26  --
10:21:50  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
10:21:50  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
10:21:50  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
10:21:50  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
10:21:50  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
10:21:50  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
10:21:50  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
10:21:50  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
10:21:50  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
10:21:50  36  FROM di5min WHERE pair LIKE'%cad%'
10:21:50  37  AND ydate > sysdate - 95
10:21:50  38  ORDER BY ydate
10:21:50  39  /

View created.

Elapsed: 00:00:00.04
10:21:50 SQL> 
10:21:50 SQL> -- rpt
10:21:50 SQL> 
10:21:50 SQL> SELECT
10:21:50   2  pair
10:21:50   3  ,COUNT(pair)
10:21:50   4  ,MIN(clse),MAX(clse)
10:21:50   5  ,MIN(avg6),MAX(avg6)
10:21:50   6  ,MIN(ydate),MAX(ydate)
10:21:50   7  FROM svm6102
10:21:50   8  GROUP BY pair
10:21:50   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_cad       19808    .988925	   1.0355  .99060274 1.03282877 2010-10-04 10:25:01 2011-01-07 10:15:00

Elapsed: 00:00:00.85
10:21:51 SQL> 
10:21:51 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
10:21:51 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.18
10:21:51 SQL> CREATE TABLE svm6122 COMPRESS AS
10:21:51   2  SELECT
10:21:51   3  pair
10:21:51   4  ,ydate
10:21:51   5  ,prdate
10:21:51   6  ,clse
10:21:51   7  -- g6 is important. I want to predict g6:
10:21:51   8  ,ld6 - clse g6
10:21:51   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
10:21:51  10  -- I want more attributes from the ones I derived above:
10:21:51  11  -- clse relation to moving-min
10:21:51  12  ,clse-min4  cm4
10:21:51  13  ,clse-min6  cm6
10:21:51  14  ,clse-min8  cm8
10:21:51  15  ,clse-min10 cm10
10:21:51  16  ,clse-min12 cm12
10:21:51  17  ,clse-min14 cm14
10:21:51  18  ,clse-min16 cm16
10:21:51  19  ,clse-min18 cm18
10:21:51  20  -- clse relation to moving-avg
10:21:51  21  ,clse-avg4  ca4
10:21:51  22  ,clse-avg6  ca6
10:21:51  23  ,clse-avg8  ca8
10:21:51  24  ,clse-avg10 ca10
10:21:51  25  ,clse-avg12 ca12
10:21:51  26  ,clse-avg14 ca14
10:21:51  27  ,clse-avg16 ca16
10:21:51  28  ,clse-avg18 ca18
10:21:51  29  -- clse relation to moving-max
10:21:51  30  ,clse-max4  cx4
10:21:51  31  ,clse-max6  cx6
10:21:51  32  ,clse-max8  cx8
10:21:51  33  ,clse-max10 cx10
10:21:51  34  ,clse-max12 cx12
10:21:51  35  ,clse-max14 cx14
10:21:51  36  ,clse-max16 cx16
10:21:51  37  ,clse-max18 cx18
10:21:51  38  -- Derive more attributes.
10:21:51  39  -- I want to use CORR() here to help SVM see the shape of the series.
10:21:51  40  -- But COVAR_POP is more stable:
10:21:51  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
10:21:51  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
10:21:51  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
10:21:51  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
10:21:51  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
10:21:51  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
10:21:51  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
10:21:51  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
10:21:51  49  -- Derive date related attributes:
10:21:51  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
10:21:51  51  ,0+TO_CHAR(ydate,'D')d
10:21:51  52  ,0+TO_CHAR(ydate,'W')w
10:21:51  53  -- mpm stands for minutes-past-midnight:
10:21:51  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
10:21:51  55  -- mph stands for minutes-past-hour:
10:21:51  56  ,0+TO_CHAR(ydate,'MI')mph
10:21:51  57  FROM svm6102
10:21:51  58  ORDER BY ydate
10:21:51  59  /

Table created.

Elapsed: 00:00:02.07
10:21:53 SQL> 
10:21:53 SQL> -- rpt
10:21:53 SQL> 
10:21:53 SQL> SELECT
10:21:53   2  pair
10:21:53   3  ,COUNT(pair)
10:21:53   4  ,MIN(clse),MAX(clse)
10:21:53   5  ,MIN(ydate),MAX(ydate)
10:21:53   6  FROM svm6122
10:21:53   7  GROUP BY pair
10:21:53   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_cad       19808    .988925	   1.0355 2010-10-04 10:25:01 2011-01-07 10:15:00

Elapsed: 00:00:00.04
10:21:53 SQL> 
10:21:53 SQL> -- Prepare for derivation of NTILE based params:
10:21:53 SQL> 
10:21:53 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.24
10:21:53 SQL> CREATE TABLE svm6142 COMPRESS AS
10:21:53   2  SELECT
10:21:53   3  pair
10:21:53   4  ,ydate
10:21:53   5  ,prdate
10:21:53   6  ,clse
10:21:53   7  ,g6
10:21:53   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
10:21:53   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
10:21:53  10  ,CASE WHEN trend IS NULL THEN 1
10:21:53  11  	    WHEN trend =0      THEN 1
10:21:53  12  	    ELSE trend END trend
10:21:53  13  ,cm4
10:21:53  14  ,cm6
10:21:53  15  ,cm8
10:21:53  16  ,cm10
10:21:53  17  ,cm12
10:21:53  18  ,cm14
10:21:53  19  ,cm16
10:21:53  20  ,cm18
10:21:53  21  --
10:21:53  22  ,ca4
10:21:53  23  ,ca6
10:21:53  24  ,ca8
10:21:53  25  ,ca10
10:21:53  26  ,ca12
10:21:53  27  ,ca14
10:21:53  28  ,ca16
10:21:53  29  ,ca18
10:21:53  30  --
10:21:53  31  ,cx4
10:21:53  32  ,cx6
10:21:53  33  ,cx8
10:21:53  34  ,cx10
10:21:53  35  ,cx12
10:21:53  36  ,cx14
10:21:53  37  ,cx16
10:21:53  38  ,cx18
10:21:53  39  --
10:21:53  40  ,crr4
10:21:53  41  ,crr6
10:21:53  42  ,crr8
10:21:53  43  ,crr10
10:21:53  44  ,crr12
10:21:53  45  ,crr14
10:21:53  46  ,crr16
10:21:53  47  ,crr18
10:21:53  48  --
10:21:53  49  ,hh
10:21:53  50  ,d
10:21:53  51  ,w
10:21:53  52  ,mpm
10:21:53  53  ,mph
10:21:53  54  FROM svm6122
10:21:53  55  ORDER BY ydate
10:21:53  56  /

Table created.

Elapsed: 00:00:00.38
10:21:53 SQL> 
10:21:53 SQL> -- rpt
10:21:53 SQL> 
10:21:53 SQL> SELECT
10:21:53   2  pair
10:21:53   3  ,trend
10:21:53   4  ,gatt
10:21:53   5  ,COUNT(pair)
10:21:53   6  ,AVG(g6)
10:21:53   7  FROM svm6142
10:21:53   8  GROUP BY pair,trend,gatt
10:21:53   9  ORDER BY pair,trend,gatt
10:21:53  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7329 -.00123819
usd_cad 	-1 up	      3145 .003043301
usd_cad 	-1		 7
usd_cad 	 1 nup	      6832 -.00160703
usd_cad 	 1 up	      2430 .003623548
usd_cad 	 1		65

6 rows selected.

Elapsed: 00:00:00.06
10:21:54 SQL> 
10:21:54 SQL> 
10:21:54 SQL> -- Derive NTILE based params:
10:21:54 SQL> 
10:21:54 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.16
10:21:54 SQL> CREATE TABLE svm6162 COMPRESS AS
10:21:54   2  SELECT
10:21:54   3  pair
10:21:54   4  ,ydate
10:21:54   5  ,prdate
10:21:54   6  ,clse
10:21:54   7  ,g6
10:21:54   8  ,gatt
10:21:54   9  ,gattn
10:21:54  10  ,trend
10:21:54  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
10:21:54  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
10:21:54  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
10:21:54  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
10:21:54  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
10:21:54  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
10:21:54  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
10:21:54  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
10:21:54  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
10:21:54  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
10:21:54  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
10:21:54  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
10:21:54  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
10:21:54  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
10:21:54  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
10:21:54  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
10:21:54  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
10:21:54  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
10:21:54  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
10:21:54  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
10:21:54  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
10:21:54  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
10:21:54  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
10:21:54  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
10:21:54  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
10:21:54  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
10:21:54  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
10:21:54  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
10:21:54  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
10:21:54  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
10:21:54  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
10:21:54  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
10:21:54  43  ,hh  att32
10:21:54  44  ,d   att33
10:21:54  45  ,w   att34
10:21:54  46  ,mpm att35
10:21:54  47  ,mph att36
10:21:54  48  ,trend att37
10:21:54  49  FROM svm6142
10:21:54  50  ORDER BY ydate
10:21:54  51  /

Table created.

Elapsed: 00:00:04.76
10:21:58 SQL> 
10:21:58 SQL> -- rpt
10:21:58 SQL> 
10:21:58 SQL> SELECT
10:21:58   2  pair
10:21:58   3  ,trend
10:21:58   4  ,gatt
10:21:58   5  ,COUNT(pair)
10:21:58   6  ,AVG(g6)
10:21:58   7  FROM svm6162
10:21:58   8  GROUP BY pair,trend,gatt
10:21:58   9  ORDER BY pair,trend,gatt
10:21:58  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7329 -.00123819
usd_cad 	-1 up	      3145 .003043301
usd_cad 	-1		 7
usd_cad 	 1 nup	      6832 -.00160703
usd_cad 	 1 up	      2430 .003623548
usd_cad 	 1		65

6 rows selected.

Elapsed: 00:00:00.02
10:21:58 SQL> 
10:21:58 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.18
10:21:59 SQL> CREATE TABLE modsrc COMPRESS AS
10:21:59   2  SELECT
10:21:59   3  pair
10:21:59   4  ,ydate
10:21:59   5  ,prdate
10:21:59   6  ,trend
10:21:59   7  ,g6
10:21:59   8  ,gatt
10:21:59   9  ,gattn
10:21:59  10  FROM svm6162
10:21:59  11  /

Table created.

Elapsed: 00:00:00.09
10:21:59 SQL> 
10:21:59 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.26
10:21:59 SQL> 
10:21:59 SQL> DROP   TABLE cad_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
10:21:59 SQL> CREATE TABLE cad_ms610 COMPRESS AS
10:21:59   2  SELECT
10:21:59   3  ydate
10:21:59   4  ,trend cad_trend
10:21:59   5  ,g6    cad_g6
10:21:59   6  ,gatt  cad_gatt
10:21:59   7  ,gattn cad_gattn
10:21:59   8  FROM modsrc
10:21:59   9  /

Table created.

Elapsed: 00:00:00.08
10:21:59 SQL> 
10:21:59 SQL> ANALYZE TABLE cad_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
10:21:59 SQL> 
10:21:59 SQL> -- I need a copy of the attributes:
10:21:59 SQL> 
10:21:59 SQL> 
10:21:59 SQL> DROP   TABLE cad_att;

Table dropped.

Elapsed: 00:00:00.05
10:21:59 SQL> CREATE TABLE cad_att COMPRESS AS
10:21:59   2  SELECT
10:21:59   3  ydate
10:21:59   4  ,att00 cad_att00
10:21:59   5  ,att01 cad_att01
10:21:59   6  ,att02 cad_att02
10:21:59   7  ,att03 cad_att03
10:21:59   8  ,att04 cad_att04
10:21:59   9  ,att05 cad_att05
10:21:59  10  ,att06 cad_att06
10:21:59  11  ,att07 cad_att07
10:21:59  12  ,att08 cad_att08
10:21:59  13  ,att09 cad_att09
10:21:59  14  ,att10 cad_att10
10:21:59  15  ,att11 cad_att11
10:21:59  16  ,att12 cad_att12
10:21:59  17  ,att13 cad_att13
10:21:59  18  ,att14 cad_att14
10:21:59  19  ,att15 cad_att15
10:21:59  20  ,att16 cad_att16
10:21:59  21  ,att17 cad_att17
10:21:59  22  ,att18 cad_att18
10:21:59  23  ,att19 cad_att19
10:21:59  24  ,att20 cad_att20
10:21:59  25  ,att21 cad_att21
10:21:59  26  ,att22 cad_att22
10:21:59  27  ,att23 cad_att23
10:21:59  28  ,att24 cad_att24
10:21:59  29  ,att25 cad_att25
10:21:59  30  ,att26 cad_att26
10:21:59  31  ,att27 cad_att27
10:21:59  32  ,att28 cad_att28
10:21:59  33  ,att29 cad_att29
10:21:59  34  ,att30 cad_att30
10:21:59  35  ,att31 cad_att31
10:21:59  36  ,att32 cad_att32
10:21:59  37  ,att33 cad_att33
10:21:59  38  ,att34 cad_att34
10:21:59  39  ,att35 cad_att35
10:21:59  40  ,att36 cad_att36
10:21:59  41  ,att37 cad_att37
10:21:59  42  FROM svm6162
10:21:59  43  /

Table created.

Elapsed: 00:00:00.25
10:22:00 SQL> 
10:22:00 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
10:22:00 SQL> 
10:22:00 SQL> -- rpt
10:22:00 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19808

Elapsed: 00:00:00.88
10:22:01 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
     19808

Elapsed: 00:00:00.00
10:22:01 SQL> 
10:22:01 SQL> --
10:22:01 SQL> -- chf610.sql
10:22:01 SQL> --
10:22:01 SQL> 
10:22:01 SQL> -- Creates views and tables for backtesting a forex SVM strategy
10:22:01 SQL> 
10:22:01 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.92
10:22:02 SQL> 
10:22:02 SQL> -- I created di5min here:
10:22:02 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
10:22:02 SQL> 
10:22:02 SQL> CREATE OR REPLACE VIEW svm6102 AS
10:22:02   2  SELECT
10:22:02   3  pair
10:22:02   4  ,ydate
10:22:02   5  ,prdate
10:22:02   6  ,rownum rnum -- acts as t in my time-series
10:22:02   7  ,clse
10:22:02   8  -- Derive a bunch of attributes from clse, the latest price:
10:22:02   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
10:22:02  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
10:22:02  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
10:22:02  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
10:22:02  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
10:22:02  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
10:22:02  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
10:22:02  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
10:22:02  17  --
10:22:02  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
10:22:02  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
10:22:02  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
10:22:02  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
10:22:02  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
10:22:02  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
10:22:02  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
10:22:02  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
10:22:02  26  --
10:22:02  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
10:22:02  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
10:22:02  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
10:22:02  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
10:22:02  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
10:22:02  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
10:22:02  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
10:22:02  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
10:22:02  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
10:22:02  36  FROM di5min WHERE pair LIKE'%chf%'
10:22:02  37  AND ydate > sysdate - 95
10:22:02  38  ORDER BY ydate
10:22:02  39  /

View created.

Elapsed: 00:00:00.06
10:22:02 SQL> 
10:22:02 SQL> -- rpt
10:22:02 SQL> 
10:22:02 SQL> SELECT
10:22:02   2  pair
10:22:02   3  ,COUNT(pair)
10:22:02   4  ,MIN(clse),MAX(clse)
10:22:02   5  ,MIN(avg6),MAX(avg6)
10:22:02   6  ,MIN(ydate),MAX(ydate)
10:22:02   7  FROM svm6102
10:22:02   8  GROUP BY pair
10:22:02   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_chf       19811    .931675	  1.00635 .933257705 1.00498151 2010-10-04 10:25:01 2011-01-07 10:15:00

Elapsed: 00:00:00.90
10:22:03 SQL> 
10:22:03 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
10:22:03 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.28
10:22:03 SQL> CREATE TABLE svm6122 COMPRESS AS
10:22:03   2  SELECT
10:22:03   3  pair
10:22:03   4  ,ydate
10:22:03   5  ,prdate
10:22:03   6  ,clse
10:22:03   7  -- g6 is important. I want to predict g6:
10:22:03   8  ,ld6 - clse g6
10:22:03   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
10:22:03  10  -- I want more attributes from the ones I derived above:
10:22:03  11  -- clse relation to moving-min
10:22:03  12  ,clse-min4  cm4
10:22:03  13  ,clse-min6  cm6
10:22:03  14  ,clse-min8  cm8
10:22:03  15  ,clse-min10 cm10
10:22:03  16  ,clse-min12 cm12
10:22:03  17  ,clse-min14 cm14
10:22:03  18  ,clse-min16 cm16
10:22:03  19  ,clse-min18 cm18
10:22:03  20  -- clse relation to moving-avg
10:22:03  21  ,clse-avg4  ca4
10:22:03  22  ,clse-avg6  ca6
10:22:03  23  ,clse-avg8  ca8
10:22:03  24  ,clse-avg10 ca10
10:22:03  25  ,clse-avg12 ca12
10:22:03  26  ,clse-avg14 ca14
10:22:03  27  ,clse-avg16 ca16
10:22:03  28  ,clse-avg18 ca18
10:22:03  29  -- clse relation to moving-max
10:22:03  30  ,clse-max4  cx4
10:22:03  31  ,clse-max6  cx6
10:22:03  32  ,clse-max8  cx8
10:22:03  33  ,clse-max10 cx10
10:22:03  34  ,clse-max12 cx12
10:22:03  35  ,clse-max14 cx14
10:22:03  36  ,clse-max16 cx16
10:22:03  37  ,clse-max18 cx18
10:22:03  38  -- Derive more attributes.
10:22:03  39  -- I want to use CORR() here to help SVM see the shape of the series.
10:22:03  40  -- But COVAR_POP is more stable:
10:22:03  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
10:22:03  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
10:22:03  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
10:22:03  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
10:22:03  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
10:22:03  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
10:22:03  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
10:22:03  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
10:22:03  49  -- Derive date related attributes:
10:22:03  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
10:22:03  51  ,0+TO_CHAR(ydate,'D')d
10:22:03  52  ,0+TO_CHAR(ydate,'W')w
10:22:03  53  -- mpm stands for minutes-past-midnight:
10:22:03  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
10:22:03  55  -- mph stands for minutes-past-hour:
10:22:03  56  ,0+TO_CHAR(ydate,'MI')mph
10:22:03  57  FROM svm6102
10:22:03  58  ORDER BY ydate
10:22:03  59  /

Table created.

Elapsed: 00:00:02.09
10:22:05 SQL> 
10:22:05 SQL> -- rpt
10:22:05 SQL> 
10:22:05 SQL> SELECT
10:22:05   2  pair
10:22:05   3  ,COUNT(pair)
10:22:05   4  ,MIN(clse),MAX(clse)
10:22:05   5  ,MIN(ydate),MAX(ydate)
10:22:05   6  FROM svm6122
10:22:05   7  GROUP BY pair
10:22:05   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_chf       19811    .931675	  1.00635 2010-10-04 10:25:01 2011-01-07 10:15:00

Elapsed: 00:00:00.04
10:22:05 SQL> 
10:22:05 SQL> -- Prepare for derivation of NTILE based params:
10:22:05 SQL> 
10:22:05 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.25
10:22:06 SQL> CREATE TABLE svm6142 COMPRESS AS
10:22:06   2  SELECT
10:22:06   3  pair
10:22:06   4  ,ydate
10:22:06   5  ,prdate
10:22:06   6  ,clse
10:22:06   7  ,g6
10:22:06   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
10:22:06   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
10:22:06  10  ,CASE WHEN trend IS NULL THEN 1
10:22:06  11  	    WHEN trend =0      THEN 1
10:22:06  12  	    ELSE trend END trend
10:22:06  13  ,cm4
10:22:06  14  ,cm6
10:22:06  15  ,cm8
10:22:06  16  ,cm10
10:22:06  17  ,cm12
10:22:06  18  ,cm14
10:22:06  19  ,cm16
10:22:06  20  ,cm18
10:22:06  21  --
10:22:06  22  ,ca4
10:22:06  23  ,ca6
10:22:06  24  ,ca8
10:22:06  25  ,ca10
10:22:06  26  ,ca12
10:22:06  27  ,ca14
10:22:06  28  ,ca16
10:22:06  29  ,ca18
10:22:06  30  --
10:22:06  31  ,cx4
10:22:06  32  ,cx6
10:22:06  33  ,cx8
10:22:06  34  ,cx10
10:22:06  35  ,cx12
10:22:06  36  ,cx14
10:22:06  37  ,cx16
10:22:06  38  ,cx18
10:22:06  39  --
10:22:06  40  ,crr4
10:22:06  41  ,crr6
10:22:06  42  ,crr8
10:22:06  43  ,crr10
10:22:06  44  ,crr12
10:22:06  45  ,crr14
10:22:06  46  ,crr16
10:22:06  47  ,crr18
10:22:06  48  --
10:22:06  49  ,hh
10:22:06  50  ,d
10:22:06  51  ,w
10:22:06  52  ,mpm
10:22:06  53  ,mph
10:22:06  54  FROM svm6122
10:22:06  55  ORDER BY ydate
10:22:06  56  /

Table created.

Elapsed: 00:00:00.39
10:22:06 SQL> 
10:22:06 SQL> -- rpt
10:22:06 SQL> 
10:22:06 SQL> SELECT
10:22:06   2  pair
10:22:06   3  ,trend
10:22:06   4  ,gatt
10:22:06   5  ,COUNT(pair)
10:22:06   6  ,AVG(g6)
10:22:06   7  FROM svm6142
10:22:06   8  GROUP BY pair,trend,gatt
10:22:06   9  ORDER BY pair,trend,gatt
10:22:06  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7106 -.00197251
usd_chf 	-1 up	      3086 .003809605
usd_chf 	-1		38
usd_chf 	 1 nup	      6601 -.00151293
usd_chf 	 1 up	      2946 .003958819
usd_chf 	 1		34

6 rows selected.

Elapsed: 00:00:00.04
10:22:06 SQL> 
10:22:06 SQL> 
10:22:06 SQL> -- Derive NTILE based params:
10:22:06 SQL> 
10:22:06 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.26
10:22:06 SQL> CREATE TABLE svm6162 COMPRESS AS
10:22:06   2  SELECT
10:22:06   3  pair
10:22:06   4  ,ydate
10:22:06   5  ,prdate
10:22:06   6  ,clse
10:22:06   7  ,g6
10:22:06   8  ,gatt
10:22:06   9  ,gattn
10:22:06  10  ,trend
10:22:06  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
10:22:06  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
10:22:06  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
10:22:06  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
10:22:06  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
10:22:06  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
10:22:06  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
10:22:06  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
10:22:06  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
10:22:06  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
10:22:06  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
10:22:06  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
10:22:06  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
10:22:06  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
10:22:06  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
10:22:06  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
10:22:06  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
10:22:06  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
10:22:06  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
10:22:06  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
10:22:06  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
10:22:06  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
10:22:06  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
10:22:06  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
10:22:06  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
10:22:06  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
10:22:06  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
10:22:06  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
10:22:06  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
10:22:06  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
10:22:06  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
10:22:06  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
10:22:06  43  ,hh  att32
10:22:06  44  ,d   att33
10:22:06  45  ,w   att34
10:22:06  46  ,mpm att35
10:22:06  47  ,mph att36
10:22:06  48  ,trend att37
10:22:06  49  FROM svm6142
10:22:06  50  ORDER BY ydate
10:22:06  51  /

Table created.

Elapsed: 00:00:04.99
10:22:11 SQL> 
10:22:11 SQL> -- rpt
10:22:11 SQL> 
10:22:11 SQL> SELECT
10:22:11   2  pair
10:22:11   3  ,trend
10:22:11   4  ,gatt
10:22:11   5  ,COUNT(pair)
10:22:11   6  ,AVG(g6)
10:22:11   7  FROM svm6162
10:22:11   8  GROUP BY pair,trend,gatt
10:22:11   9  ORDER BY pair,trend,gatt
10:22:11  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7106 -.00197251
usd_chf 	-1 up	      3086 .003809605
usd_chf 	-1		38
usd_chf 	 1 nup	      6601 -.00151293
usd_chf 	 1 up	      2946 .003958819
usd_chf 	 1		34

6 rows selected.

Elapsed: 00:00:00.02
10:22:11 SQL> 
10:22:11 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.10
10:22:11 SQL> CREATE TABLE modsrc COMPRESS AS
10:22:11   2  SELECT
10:22:11   3  pair
10:22:11   4  ,ydate
10:22:11   5  ,prdate
10:22:11   6  ,trend
10:22:11   7  ,g6
10:22:11   8  ,gatt
10:22:11   9  ,gattn
10:22:11  10  FROM svm6162
10:22:11  11  /

Table created.

Elapsed: 00:00:00.09
10:22:11 SQL> 
10:22:11 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.27
10:22:12 SQL> 
10:22:12 SQL> DROP   TABLE chf_ms610 ;

Table dropped.

Elapsed: 00:00:00.08
10:22:12 SQL> CREATE TABLE chf_ms610 COMPRESS AS
10:22:12   2  SELECT
10:22:12   3  ydate
10:22:12   4  ,trend chf_trend
10:22:12   5  ,g6    chf_g6
10:22:12   6  ,gatt  chf_gatt
10:22:12   7  ,gattn chf_gattn
10:22:12   8  FROM modsrc
10:22:12   9  /

Table created.

Elapsed: 00:00:00.07
10:22:12 SQL> 
10:22:12 SQL> ANALYZE TABLE chf_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
10:22:12 SQL> 
10:22:12 SQL> -- I need a copy of the attributes:
10:22:12 SQL> 
10:22:12 SQL> 
10:22:12 SQL> DROP   TABLE chf_att;

Table dropped.

Elapsed: 00:00:00.07
10:22:12 SQL> CREATE TABLE chf_att COMPRESS AS
10:22:12   2  SELECT
10:22:12   3  ydate
10:22:12   4  ,att00 chf_att00
10:22:12   5  ,att01 chf_att01
10:22:12   6  ,att02 chf_att02
10:22:12   7  ,att03 chf_att03
10:22:12   8  ,att04 chf_att04
10:22:12   9  ,att05 chf_att05
10:22:12  10  ,att06 chf_att06
10:22:12  11  ,att07 chf_att07
10:22:12  12  ,att08 chf_att08
10:22:12  13  ,att09 chf_att09
10:22:12  14  ,att10 chf_att10
10:22:12  15  ,att11 chf_att11
10:22:12  16  ,att12 chf_att12
10:22:12  17  ,att13 chf_att13
10:22:12  18  ,att14 chf_att14
10:22:12  19  ,att15 chf_att15
10:22:12  20  ,att16 chf_att16
10:22:12  21  ,att17 chf_att17
10:22:12  22  ,att18 chf_att18
10:22:12  23  ,att19 chf_att19
10:22:12  24  ,att20 chf_att20
10:22:12  25  ,att21 chf_att21
10:22:12  26  ,att22 chf_att22
10:22:12  27  ,att23 chf_att23
10:22:12  28  ,att24 chf_att24
10:22:12  29  ,att25 chf_att25
10:22:12  30  ,att26 chf_att26
10:22:12  31  ,att27 chf_att27
10:22:12  32  ,att28 chf_att28
10:22:12  33  ,att29 chf_att29
10:22:12  34  ,att30 chf_att30
10:22:12  35  ,att31 chf_att31
10:22:12  36  ,att32 chf_att32
10:22:12  37  ,att33 chf_att33
10:22:12  38  ,att34 chf_att34
10:22:12  39  ,att35 chf_att35
10:22:12  40  ,att36 chf_att36
10:22:12  41  ,att37 chf_att37
10:22:12  42  FROM svm6162
10:22:12  43  /

Table created.

Elapsed: 00:00:00.23
10:22:12 SQL> 
10:22:12 SQL> ANALYZE TABLE chf_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
10:22:13 SQL> 
10:22:13 SQL> -- rpt
10:22:13 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19811

Elapsed: 00:00:00.87
10:22:14 SQL> SELECT COUNT(*)FROM chf_att;

  COUNT(*)
----------
     19811

Elapsed: 00:00:00.00
10:22:14 SQL> 
10:22:14 SQL> --
10:22:14 SQL> -- ech610.sql
10:22:14 SQL> --
10:22:14 SQL> 
10:22:14 SQL> -- Creates views and tables for backtesting a forex SVM strategy
10:22:14 SQL> 
10:22:14 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.35
10:22:14 SQL> 
10:22:14 SQL> -- I created di5min here:
10:22:14 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
10:22:14 SQL> 
10:22:14 SQL> CREATE OR REPLACE VIEW svm6102 AS
10:22:14   2  SELECT
10:22:14   3  pair
10:22:14   4  ,ydate
10:22:14   5  ,prdate
10:22:14   6  ,rownum rnum -- acts as t in my time-series
10:22:14   7  ,clse
10:22:14   8  -- Derive a bunch of attributes from clse, the latest price:
10:22:14   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
10:22:14  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
10:22:14  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
10:22:14  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
10:22:14  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
10:22:14  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
10:22:14  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
10:22:14  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
10:22:14  17  --
10:22:14  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
10:22:14  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
10:22:14  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
10:22:14  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
10:22:14  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
10:22:14  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
10:22:14  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
10:22:14  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
10:22:14  26  --
10:22:14  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
10:22:14  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
10:22:14  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
10:22:14  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
10:22:14  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
10:22:14  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
10:22:14  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
10:22:14  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
10:22:14  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
10:22:14  36  FROM di5min WHERE pair LIKE'%ech%'
10:22:14  37  AND ydate > sysdate - 95
10:22:14  38  ORDER BY ydate
10:22:14  39  /

View created.

Elapsed: 00:00:00.05
10:22:14 SQL> 
10:22:14 SQL> -- rpt
10:22:14 SQL> 
10:22:14 SQL> SELECT
10:22:14   2  pair
10:22:14   3  ,COUNT(pair)
10:22:14   4  ,MIN(clse),MAX(clse)
10:22:14   5  ,MIN(avg6),MAX(avg6)
10:22:14   6  ,MIN(ydate),MAX(ydate)
10:22:14   7  FROM svm6102
10:22:14   8  GROUP BY pair
10:22:14   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ech_usd       19809 1.24182424 1.38284305 1.24320711 1.37986485 2010-10-04 10:25:01 2011-01-07 10:15:00

Elapsed: 00:00:00.81
10:22:15 SQL> 
10:22:15 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
10:22:15 SQL> DROP TABLE svm6122;
