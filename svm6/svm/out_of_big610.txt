
SQL*Plus: Release 11.2.0.1.0 Production on Fri Jan 7 10:07:27 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

10:07:27 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
10:07:27 SQL> 10:07:27 SQL> --
10:07:27 SQL> -- eur610.sql
10:07:27 SQL> --
10:07:27 SQL> 
10:07:27 SQL> -- Creates views and tables for backtesting a forex SVM strategy
10:07:27 SQL> 
10:07:27 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.02
10:07:27 SQL> 
10:07:27 SQL> -- I created di5min here:
10:07:27 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
10:07:27 SQL> 
10:07:27 SQL> CREATE OR REPLACE VIEW svm6102 AS
10:07:27   2  SELECT
10:07:27   3  pair
10:07:27   4  ,ydate
10:07:27   5  ,prdate
10:07:27   6  ,rownum rnum -- acts as t in my time-series
10:07:27   7  ,clse
10:07:27   8  -- Derive a bunch of attributes from clse, the latest price:
10:07:27   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
10:07:27  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
10:07:27  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
10:07:27  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
10:07:27  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
10:07:27  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
10:07:27  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
10:07:27  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
10:07:27  17  --
10:07:27  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
10:07:27  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
10:07:27  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
10:07:27  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
10:07:27  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
10:07:27  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
10:07:27  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
10:07:27  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
10:07:27  26  --
10:07:27  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
10:07:27  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
10:07:27  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
10:07:27  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
10:07:27  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
10:07:27  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
10:07:27  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
10:07:27  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
10:07:27  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
10:07:27  36  FROM di5min WHERE pair LIKE'%eur%'
10:07:27  37  AND ydate > sysdate - 95
10:07:27  38  ORDER BY ydate
10:07:27  39  /

View created.

Elapsed: 00:00:00.10
10:07:27 SQL> 
10:07:27 SQL> -- rpt
10:07:27 SQL> 
10:07:27 SQL> SELECT
10:07:27   2  pair
10:07:27   3  ,COUNT(pair)
10:07:27   4  ,MIN(clse),MAX(clse)
10:07:27   5  ,MIN(avg6),MAX(avg6)
10:07:27   6  ,MIN(ydate),MAX(ydate)
10:07:27   7  FROM svm6102
10:07:27   8  GROUP BY pair
10:07:27   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_usd       19810  1.2970625	   1.4273 1.29875068 1.42436233 2010-10-04 10:10:01 2011-01-07 10:00:00

Elapsed: 00:00:00.94
10:07:28 SQL> 
10:07:28 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
10:07:28 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:01.12
10:07:29 SQL> CREATE TABLE svm6122 COMPRESS AS
10:07:29   2  SELECT
10:07:29   3  pair
10:07:29   4  ,ydate
10:07:29   5  ,prdate
10:07:29   6  ,clse
10:07:29   7  -- g6 is important. I want to predict g6:
10:07:29   8  ,ld6 - clse g6
10:07:29   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
10:07:29  10  -- I want more attributes from the ones I derived above:
10:07:29  11  -- clse relation to moving-min
10:07:29  12  ,clse-min4  cm4
10:07:29  13  ,clse-min6  cm6
10:07:29  14  ,clse-min8  cm8
10:07:29  15  ,clse-min10 cm10
10:07:29  16  ,clse-min12 cm12
10:07:29  17  ,clse-min14 cm14
10:07:29  18  ,clse-min16 cm16
10:07:29  19  ,clse-min18 cm18
10:07:29  20  -- clse relation to moving-avg
10:07:29  21  ,clse-avg4  ca4
10:07:29  22  ,clse-avg6  ca6
10:07:29  23  ,clse-avg8  ca8
10:07:29  24  ,clse-avg10 ca10
10:07:29  25  ,clse-avg12 ca12
10:07:29  26  ,clse-avg14 ca14
10:07:29  27  ,clse-avg16 ca16
10:07:29  28  ,clse-avg18 ca18
10:07:29  29  -- clse relation to moving-max
10:07:29  30  ,clse-max4  cx4
10:07:29  31  ,clse-max6  cx6
10:07:29  32  ,clse-max8  cx8
10:07:29  33  ,clse-max10 cx10
10:07:29  34  ,clse-max12 cx12
10:07:29  35  ,clse-max14 cx14
10:07:29  36  ,clse-max16 cx16
10:07:29  37  ,clse-max18 cx18
10:07:29  38  -- Derive more attributes.
10:07:29  39  -- I want to use CORR() here to help SVM see the shape of the series.
10:07:29  40  -- But COVAR_POP is more stable:
10:07:29  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
10:07:29  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
10:07:29  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
10:07:29  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
10:07:29  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
10:07:29  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
10:07:29  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
10:07:29  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
10:07:29  49  -- Derive date related attributes:
10:07:29  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
10:07:29  51  ,0+TO_CHAR(ydate,'D')d
10:07:29  52  ,0+TO_CHAR(ydate,'W')w
10:07:29  53  -- mpm stands for minutes-past-midnight:
10:07:29  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
10:07:29  55  -- mph stands for minutes-past-hour:
10:07:29  56  ,0+TO_CHAR(ydate,'MI')mph
10:07:29  57  FROM svm6102
10:07:29  58  ORDER BY ydate
10:07:29  59  /

Table created.

Elapsed: 00:00:02.43
10:07:32 SQL> 
10:07:32 SQL> -- rpt
10:07:32 SQL> 
10:07:32 SQL> SELECT
10:07:32   2  pair
10:07:32   3  ,COUNT(pair)
10:07:32   4  ,MIN(clse),MAX(clse)
10:07:32   5  ,MIN(ydate),MAX(ydate)
10:07:32   6  FROM svm6122
10:07:32   7  GROUP BY pair
10:07:32   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_usd       19810  1.2970625	   1.4273 2010-10-04 10:10:01 2011-01-07 10:00:00

Elapsed: 00:00:00.08
10:07:32 SQL> 
10:07:32 SQL> -- Prepare for derivation of NTILE based params:
10:07:32 SQL> 
10:07:32 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.37
10:07:32 SQL> CREATE TABLE svm6142 COMPRESS AS
10:07:32   2  SELECT
10:07:32   3  pair
10:07:32   4  ,ydate
10:07:32   5  ,prdate
10:07:32   6  ,clse
10:07:32   7  ,g6
10:07:32   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
10:07:32   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
10:07:32  10  ,CASE WHEN trend IS NULL THEN 1
10:07:32  11  	    WHEN trend =0      THEN 1
10:07:32  12  	    ELSE trend END trend
10:07:32  13  ,cm4
10:07:32  14  ,cm6
10:07:32  15  ,cm8
10:07:32  16  ,cm10
10:07:32  17  ,cm12
10:07:32  18  ,cm14
10:07:32  19  ,cm16
10:07:32  20  ,cm18
10:07:32  21  --
10:07:32  22  ,ca4
10:07:32  23  ,ca6
10:07:32  24  ,ca8
10:07:32  25  ,ca10
10:07:32  26  ,ca12
10:07:32  27  ,ca14
10:07:32  28  ,ca16
10:07:32  29  ,ca18
10:07:32  30  --
10:07:32  31  ,cx4
10:07:32  32  ,cx6
10:07:32  33  ,cx8
10:07:32  34  ,cx10
10:07:32  35  ,cx12
10:07:32  36  ,cx14
10:07:32  37  ,cx16
10:07:32  38  ,cx18
10:07:32  39  --
10:07:32  40  ,crr4
10:07:32  41  ,crr6
10:07:32  42  ,crr8
10:07:32  43  ,crr10
10:07:32  44  ,crr12
10:07:32  45  ,crr14
10:07:32  46  ,crr16
10:07:32  47  ,crr18
10:07:32  48  --
10:07:32  49  ,hh
10:07:32  50  ,d
10:07:32  51  ,w
10:07:32  52  ,mpm
10:07:32  53  ,mph
10:07:32  54  FROM svm6122
10:07:32  55  ORDER BY ydate
10:07:32  56  /

Table created.

Elapsed: 00:00:00.36
10:07:33 SQL> 
10:07:33 SQL> -- rpt
10:07:33 SQL> 
10:07:33 SQL> SELECT
10:07:33   2  pair
10:07:33   3  ,trend
10:07:33   4  ,gatt
10:07:33   5  ,COUNT(pair)
10:07:33   6  ,AVG(g6)
10:07:33   7  FROM svm6142
10:07:33   8  GROUP BY pair,trend,gatt
10:07:33   9  ORDER BY pair,trend,gatt
10:07:33  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6574 -.00314416
eur_usd 	-1 up	      3564 .004451722
eur_usd 	-1		66
eur_usd 	 1 nup	      5895 -.00324075
eur_usd 	 1 up	      3705 .005071238
eur_usd 	 1		 6

6 rows selected.

Elapsed: 00:00:00.06
10:07:33 SQL> 
10:07:33 SQL> 
10:07:33 SQL> -- Derive NTILE based params:
10:07:33 SQL> 
10:07:33 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.76
10:07:33 SQL> CREATE TABLE svm6162 COMPRESS AS
10:07:33   2  SELECT
10:07:33   3  pair
10:07:33   4  ,ydate
10:07:33   5  ,prdate
10:07:33   6  ,clse
10:07:33   7  ,g6
10:07:33   8  ,gatt
10:07:33   9  ,gattn
10:07:33  10  ,trend
10:07:33  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
10:07:33  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
10:07:33  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
10:07:33  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
10:07:33  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
10:07:33  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
10:07:33  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
10:07:33  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
10:07:33  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
10:07:33  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
10:07:33  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
10:07:33  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
10:07:33  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
10:07:33  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
10:07:33  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
10:07:33  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
10:07:33  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
10:07:33  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
10:07:33  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
10:07:33  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
10:07:33  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
10:07:33  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
10:07:33  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
10:07:33  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
10:07:33  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
10:07:33  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
10:07:33  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
10:07:33  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
10:07:33  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
10:07:33  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
10:07:33  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
10:07:33  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
10:07:33  43  ,hh  att32
10:07:33  44  ,d   att33
10:07:33  45  ,w   att34
10:07:33  46  ,mpm att35
10:07:33  47  ,mph att36
10:07:33  48  ,trend att37
10:07:33  49  FROM svm6142
10:07:33  50  ORDER BY ydate
10:07:33  51  /

Table created.

Elapsed: 00:00:04.79
10:07:38 SQL> 
10:07:38 SQL> -- rpt
10:07:38 SQL> 
10:07:38 SQL> SELECT
10:07:38   2  pair
10:07:38   3  ,trend
10:07:38   4  ,gatt
10:07:38   5  ,COUNT(pair)
10:07:38   6  ,AVG(g6)
10:07:38   7  FROM svm6162
10:07:38   8  GROUP BY pair,trend,gatt
10:07:38   9  ORDER BY pair,trend,gatt
10:07:38  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6574 -.00314416
eur_usd 	-1 up	      3564 .004451722
eur_usd 	-1		66
eur_usd 	 1 nup	      5895 -.00324075
eur_usd 	 1 up	      3705 .005071238
eur_usd 	 1		 6

6 rows selected.

Elapsed: 00:00:00.02
10:07:38 SQL> 
10:07:38 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.16
10:07:38 SQL> CREATE TABLE modsrc COMPRESS AS
10:07:38   2  SELECT
10:07:38   3  pair
10:07:38   4  ,ydate
10:07:38   5  ,prdate
10:07:38   6  ,trend
10:07:38   7  ,g6
10:07:38   8  ,gatt
10:07:38   9  ,gattn
10:07:38  10  FROM svm6162
10:07:38  11  /

Table created.

Elapsed: 00:00:00.08
10:07:38 SQL> 
10:07:38 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.26
10:07:39 SQL> 
10:07:39 SQL> DROP   TABLE eur_ms610 ;

Table dropped.

Elapsed: 00:00:00.26
10:07:39 SQL> CREATE TABLE eur_ms610 COMPRESS AS
10:07:39   2  SELECT
10:07:39   3  ydate
10:07:39   4  ,trend eur_trend
10:07:39   5  ,g6    eur_g6
10:07:39   6  ,gatt  eur_gatt
10:07:39   7  ,gattn eur_gattn
10:07:39   8  FROM modsrc
10:07:39   9  /

Table created.

Elapsed: 00:00:00.07
10:07:39 SQL> 
10:07:39 SQL> ANALYZE TABLE eur_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
10:07:39 SQL> 
10:07:39 SQL> -- I need a copy of the attributes:
10:07:39 SQL> 
10:07:39 SQL> 
10:07:39 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.06
10:07:39 SQL> CREATE TABLE eur_att COMPRESS AS
10:07:39   2  SELECT
10:07:39   3  ydate
10:07:39   4  ,att00 eur_att00
10:07:39   5  ,att01 eur_att01
10:07:39   6  ,att02 eur_att02
10:07:39   7  ,att03 eur_att03
10:07:39   8  ,att04 eur_att04
10:07:39   9  ,att05 eur_att05
10:07:39  10  ,att06 eur_att06
10:07:39  11  ,att07 eur_att07
10:07:39  12  ,att08 eur_att08
10:07:39  13  ,att09 eur_att09
10:07:39  14  ,att10 eur_att10
10:07:39  15  ,att11 eur_att11
10:07:39  16  ,att12 eur_att12
10:07:39  17  ,att13 eur_att13
10:07:39  18  ,att14 eur_att14
10:07:39  19  ,att15 eur_att15
10:07:39  20  ,att16 eur_att16
10:07:39  21  ,att17 eur_att17
10:07:39  22  ,att18 eur_att18
10:07:39  23  ,att19 eur_att19
10:07:39  24  ,att20 eur_att20
10:07:39  25  ,att21 eur_att21
10:07:39  26  ,att22 eur_att22
10:07:39  27  ,att23 eur_att23
10:07:39  28  ,att24 eur_att24
10:07:39  29  ,att25 eur_att25
10:07:39  30  ,att26 eur_att26
10:07:39  31  ,att27 eur_att27
10:07:39  32  ,att28 eur_att28
10:07:39  33  ,att29 eur_att29
10:07:39  34  ,att30 eur_att30
10:07:39  35  ,att31 eur_att31
10:07:39  36  ,att32 eur_att32
10:07:39  37  ,att33 eur_att33
10:07:39  38  ,att34 eur_att34
10:07:39  39  ,att35 eur_att35
10:07:39  40  ,att36 eur_att36
10:07:39  41  ,att37 eur_att37
10:07:39  42  FROM svm6162
10:07:39  43  /

Table created.

Elapsed: 00:00:00.17
10:07:39 SQL> 
10:07:39 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.43
10:07:40 SQL> 
10:07:40 SQL> -- rpt
10:07:40 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19810

Elapsed: 00:00:00.91
10:07:41 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     19810

Elapsed: 00:00:00.00
10:07:41 SQL> 
10:07:41 SQL> --
10:07:41 SQL> -- aud610.sql
10:07:41 SQL> --
10:07:41 SQL> 
10:07:41 SQL> -- Creates views and tables for backtesting a forex SVM strategy
10:07:41 SQL> 
10:07:41 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.49
10:07:41 SQL> 
10:07:41 SQL> -- I created di5min here:
10:07:41 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
10:07:41 SQL> 
10:07:41 SQL> CREATE OR REPLACE VIEW svm6102 AS
10:07:41   2  SELECT
10:07:41   3  pair
10:07:41   4  ,ydate
10:07:41   5  ,prdate
10:07:41   6  ,rownum rnum -- acts as t in my time-series
10:07:41   7  ,clse
10:07:41   8  -- Derive a bunch of attributes from clse, the latest price:
10:07:41   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
10:07:41  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
10:07:41  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
10:07:41  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
10:07:41  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
10:07:41  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
10:07:41  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
10:07:41  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
10:07:41  17  --
10:07:41  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
10:07:41  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
10:07:41  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
10:07:41  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
10:07:41  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
10:07:41  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
10:07:41  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
10:07:41  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
10:07:41  26  --
10:07:41  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
10:07:41  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
10:07:41  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
10:07:41  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
10:07:41  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
10:07:41  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
10:07:41  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
10:07:41  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
10:07:41  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
10:07:41  36  FROM di5min WHERE pair LIKE'%aud%'
10:07:41  37  AND ydate > sysdate - 95
10:07:41  38  ORDER BY ydate
10:07:41  39  /

View created.

Elapsed: 00:00:00.04
10:07:41 SQL> 
10:07:41 SQL> -- rpt
10:07:41 SQL> 
10:07:41 SQL> SELECT
10:07:41   2  pair
10:07:41   3  ,COUNT(pair)
10:07:41   4  ,MIN(clse),MAX(clse)
10:07:41   5  ,MIN(avg6),MAX(avg6)
10:07:41   6  ,MIN(ydate),MAX(ydate)
10:07:41   7  FROM svm6102
10:07:41   8  GROUP BY pair
10:07:41   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
aud_usd       19807	.95405	  1.02495 .957141438 1.02284247 2010-10-04 10:10:01 2011-01-07 10:00:00

Elapsed: 00:00:00.90
10:07:42 SQL> 
10:07:42 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
10:07:42 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.23
10:07:42 SQL> CREATE TABLE svm6122 COMPRESS AS
10:07:42   2  SELECT
10:07:42   3  pair
10:07:42   4  ,ydate
10:07:42   5  ,prdate
10:07:42   6  ,clse
10:07:42   7  -- g6 is important. I want to predict g6:
10:07:42   8  ,ld6 - clse g6
10:07:42   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
10:07:42  10  -- I want more attributes from the ones I derived above:
10:07:42  11  -- clse relation to moving-min
10:07:42  12  ,clse-min4  cm4
10:07:42  13  ,clse-min6  cm6
10:07:42  14  ,clse-min8  cm8
10:07:42  15  ,clse-min10 cm10
10:07:42  16  ,clse-min12 cm12
10:07:42  17  ,clse-min14 cm14
10:07:42  18  ,clse-min16 cm16
10:07:42  19  ,clse-min18 cm18
10:07:42  20  -- clse relation to moving-avg
10:07:42  21  ,clse-avg4  ca4
10:07:42  22  ,clse-avg6  ca6
10:07:42  23  ,clse-avg8  ca8
10:07:42  24  ,clse-avg10 ca10
10:07:42  25  ,clse-avg12 ca12
10:07:42  26  ,clse-avg14 ca14
10:07:42  27  ,clse-avg16 ca16
10:07:42  28  ,clse-avg18 ca18
10:07:42  29  -- clse relation to moving-max
10:07:42  30  ,clse-max4  cx4
10:07:42  31  ,clse-max6  cx6
10:07:42  32  ,clse-max8  cx8
10:07:42  33  ,clse-max10 cx10
10:07:42  34  ,clse-max12 cx12
10:07:42  35  ,clse-max14 cx14
10:07:42  36  ,clse-max16 cx16
10:07:42  37  ,clse-max18 cx18
10:07:42  38  -- Derive more attributes.
10:07:42  39  -- I want to use CORR() here to help SVM see the shape of the series.
10:07:42  40  -- But COVAR_POP is more stable:
10:07:42  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
10:07:42  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
10:07:42  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
10:07:42  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
10:07:42  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
10:07:42  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
10:07:42  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
10:07:42  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
10:07:42  49  -- Derive date related attributes:
10:07:42  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
10:07:42  51  ,0+TO_CHAR(ydate,'D')d
10:07:42  52  ,0+TO_CHAR(ydate,'W')w
10:07:42  53  -- mpm stands for minutes-past-midnight:
10:07:42  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
10:07:42  55  -- mph stands for minutes-past-hour:
10:07:42  56  ,0+TO_CHAR(ydate,'MI')mph
10:07:42  57  FROM svm6102
10:07:42  58  ORDER BY ydate
10:07:42  59  /

Table created.

Elapsed: 00:00:02.11
10:07:44 SQL> 
10:07:44 SQL> -- rpt
10:07:44 SQL> 
10:07:44 SQL> SELECT
10:07:44   2  pair
10:07:44   3  ,COUNT(pair)
10:07:44   4  ,MIN(clse),MAX(clse)
10:07:44   5  ,MIN(ydate),MAX(ydate)
10:07:44   6  FROM svm6122
10:07:44   7  GROUP BY pair
10:07:44   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
aud_usd       19807	.95405	  1.02495 2010-10-04 10:10:01 2011-01-07 10:00:00

Elapsed: 00:00:00.04
10:07:45 SQL> 
10:07:45 SQL> -- Prepare for derivation of NTILE based params:
10:07:45 SQL> 
10:07:45 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.24
10:07:45 SQL> CREATE TABLE svm6142 COMPRESS AS
10:07:45   2  SELECT
10:07:45   3  pair
10:07:45   4  ,ydate
10:07:45   5  ,prdate
10:07:45   6  ,clse
10:07:45   7  ,g6
10:07:45   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
10:07:45   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
10:07:45  10  ,CASE WHEN trend IS NULL THEN 1
10:07:45  11  	    WHEN trend =0      THEN 1
10:07:45  12  	    ELSE trend END trend
10:07:45  13  ,cm4
10:07:45  14  ,cm6
10:07:45  15  ,cm8
10:07:45  16  ,cm10
10:07:45  17  ,cm12
10:07:45  18  ,cm14
10:07:45  19  ,cm16
10:07:45  20  ,cm18
10:07:45  21  --
10:07:45  22  ,ca4
10:07:45  23  ,ca6
10:07:45  24  ,ca8
10:07:45  25  ,ca10
10:07:45  26  ,ca12
10:07:45  27  ,ca14
10:07:45  28  ,ca16
10:07:45  29  ,ca18
10:07:45  30  --
10:07:45  31  ,cx4
10:07:45  32  ,cx6
10:07:45  33  ,cx8
10:07:45  34  ,cx10
10:07:45  35  ,cx12
10:07:45  36  ,cx14
10:07:45  37  ,cx16
10:07:45  38  ,cx18
10:07:45  39  --
10:07:45  40  ,crr4
10:07:45  41  ,crr6
10:07:45  42  ,crr8
10:07:45  43  ,crr10
10:07:45  44  ,crr12
10:07:45  45  ,crr14
10:07:45  46  ,crr16
10:07:45  47  ,crr18
10:07:45  48  --
10:07:45  49  ,hh
10:07:45  50  ,d
10:07:45  51  ,w
10:07:45  52  ,mpm
10:07:45  53  ,mph
10:07:45  54  FROM svm6122
10:07:45  55  ORDER BY ydate
10:07:45  56  /

Table created.

Elapsed: 00:00:00.39
10:07:45 SQL> 
10:07:45 SQL> -- rpt
10:07:45 SQL> 
10:07:45 SQL> SELECT
10:07:45   2  pair
10:07:45   3  ,trend
10:07:45   4  ,gatt
10:07:45   5  ,COUNT(pair)
10:07:45   6  ,AVG(g6)
10:07:45   7  FROM svm6142
10:07:45   8  GROUP BY pair,trend,gatt
10:07:45   9  ORDER BY pair,trend,gatt
10:07:45  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5733 -.00213345
aud_usd 	-1 up	      3684 .003755646
aud_usd 	-1		64
aud_usd 	 1 nup	      6725 -.00214267
aud_usd 	 1 up	      3593 .004054752
aud_usd 	 1		 8

6 rows selected.

Elapsed: 00:00:00.04
10:07:45 SQL> 
10:07:45 SQL> 
10:07:45 SQL> -- Derive NTILE based params:
10:07:45 SQL> 
10:07:45 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.18
10:07:45 SQL> CREATE TABLE svm6162 COMPRESS AS
10:07:45   2  SELECT
10:07:45   3  pair
10:07:45   4  ,ydate
10:07:45   5  ,prdate
10:07:45   6  ,clse
10:07:45   7  ,g6
10:07:45   8  ,gatt
10:07:45   9  ,gattn
10:07:45  10  ,trend
10:07:45  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
10:07:45  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
10:07:45  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
10:07:45  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
10:07:45  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
10:07:45  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
10:07:45  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
10:07:45  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
10:07:45  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
10:07:45  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
10:07:45  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
10:07:45  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
10:07:45  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
10:07:45  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
10:07:45  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
10:07:45  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
10:07:45  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
10:07:45  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
10:07:45  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
10:07:45  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
10:07:45  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
10:07:45  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
10:07:45  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
10:07:45  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
10:07:45  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
10:07:45  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
10:07:45  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
10:07:45  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
10:07:45  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
10:07:45  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
10:07:45  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
10:07:45  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
10:07:45  43  ,hh  att32
10:07:45  44  ,d   att33
10:07:45  45  ,w   att34
10:07:45  46  ,mpm att35
10:07:45  47  ,mph att36
10:07:45  48  ,trend att37
10:07:45  49  FROM svm6142
10:07:45  50  ORDER BY ydate
10:07:45  51  /

Table created.

Elapsed: 00:00:04.86
10:07:50 SQL> 
10:07:50 SQL> -- rpt
10:07:50 SQL> 
10:07:50 SQL> SELECT
10:07:50   2  pair
10:07:50   3  ,trend
10:07:50   4  ,gatt
10:07:50   5  ,COUNT(pair)
10:07:50   6  ,AVG(g6)
10:07:50   7  FROM svm6162
10:07:50   8  GROUP BY pair,trend,gatt
10:07:50   9  ORDER BY pair,trend,gatt
10:07:50  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5733 -.00213345
aud_usd 	-1 up	      3684 .003755646
aud_usd 	-1		64
aud_usd 	 1 nup	      6725 -.00214267
aud_usd 	 1 up	      3593 .004054752
aud_usd 	 1		 8

6 rows selected.

Elapsed: 00:00:00.02
10:07:50 SQL> 
10:07:50 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.20
10:07:50 SQL> CREATE TABLE modsrc COMPRESS AS
10:07:50   2  SELECT
10:07:50   3  pair
10:07:50   4  ,ydate
10:07:50   5  ,prdate
10:07:50   6  ,trend
10:07:50   7  ,g6
10:07:50   8  ,gatt
10:07:50   9  ,gattn
10:07:50  10  FROM svm6162
10:07:50  11  /

Table created.

Elapsed: 00:00:00.14
10:07:51 SQL> 
10:07:51 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
10:07:51 SQL> 
10:07:51 SQL> DROP   TABLE aud_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
10:07:51 SQL> CREATE TABLE aud_ms610 COMPRESS AS
10:07:51   2  SELECT
10:07:51   3  ydate
10:07:51   4  ,trend aud_trend
10:07:51   5  ,g6    aud_g6
10:07:51   6  ,gatt  aud_gatt
10:07:51   7  ,gattn aud_gattn
10:07:51   8  FROM modsrc
10:07:51   9  /

Table created.

Elapsed: 00:00:00.08
10:07:51 SQL> 
10:07:51 SQL> ANALYZE TABLE aud_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
10:07:51 SQL> 
10:07:51 SQL> -- I need a copy of the attributes:
10:07:51 SQL> 
10:07:51 SQL> 
10:07:51 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.04
10:07:51 SQL> CREATE TABLE aud_att COMPRESS AS
10:07:51   2  SELECT
10:07:51   3  ydate
10:07:51   4  ,att00 aud_att00
10:07:51   5  ,att01 aud_att01
10:07:51   6  ,att02 aud_att02
10:07:51   7  ,att03 aud_att03
10:07:51   8  ,att04 aud_att04
10:07:51   9  ,att05 aud_att05
10:07:51  10  ,att06 aud_att06
10:07:51  11  ,att07 aud_att07
10:07:51  12  ,att08 aud_att08
10:07:51  13  ,att09 aud_att09
10:07:51  14  ,att10 aud_att10
10:07:51  15  ,att11 aud_att11
10:07:51  16  ,att12 aud_att12
10:07:51  17  ,att13 aud_att13
10:07:51  18  ,att14 aud_att14
10:07:51  19  ,att15 aud_att15
10:07:51  20  ,att16 aud_att16
10:07:51  21  ,att17 aud_att17
10:07:51  22  ,att18 aud_att18
10:07:51  23  ,att19 aud_att19
10:07:51  24  ,att20 aud_att20
10:07:51  25  ,att21 aud_att21
10:07:51  26  ,att22 aud_att22
10:07:51  27  ,att23 aud_att23
10:07:51  28  ,att24 aud_att24
10:07:51  29  ,att25 aud_att25
10:07:51  30  ,att26 aud_att26
10:07:51  31  ,att27 aud_att27
10:07:51  32  ,att28 aud_att28
10:07:51  33  ,att29 aud_att29
10:07:51  34  ,att30 aud_att30
10:07:51  35  ,att31 aud_att31
10:07:51  36  ,att32 aud_att32
10:07:51  37  ,att33 aud_att33
10:07:51  38  ,att34 aud_att34
10:07:51  39  ,att35 aud_att35
10:07:51  40  ,att36 aud_att36
10:07:51  41  ,att37 aud_att37
10:07:51  42  FROM svm6162
10:07:51  43  /

Table created.

Elapsed: 00:00:00.17
10:07:51 SQL> 
10:07:51 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
10:07:52 SQL> 
10:07:52 SQL> -- rpt
10:07:52 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19807

Elapsed: 00:00:00.87
10:07:53 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     19807

Elapsed: 00:00:00.00
10:07:53 SQL> 
10:07:53 SQL> --
10:07:53 SQL> -- gbp610.sql
10:07:53 SQL> --
10:07:53 SQL> 
10:07:53 SQL> -- Creates views and tables for backtesting a forex SVM strategy
10:07:53 SQL> 
10:07:53 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.48
10:07:53 SQL> 
10:07:53 SQL> -- I created di5min here:
10:07:53 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
10:07:53 SQL> 
10:07:53 SQL> CREATE OR REPLACE VIEW svm6102 AS
10:07:53   2  SELECT
10:07:53   3  pair
10:07:53   4  ,ydate
10:07:53   5  ,prdate
10:07:53   6  ,rownum rnum -- acts as t in my time-series
10:07:53   7  ,clse
10:07:53   8  -- Derive a bunch of attributes from clse, the latest price:
10:07:53   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
10:07:53  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
10:07:53  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
10:07:53  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
10:07:53  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
10:07:53  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
10:07:53  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
10:07:53  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
10:07:53  17  --
10:07:53  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
10:07:53  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
10:07:53  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
10:07:53  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
10:07:53  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
10:07:53  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
10:07:53  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
10:07:53  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
10:07:53  26  --
10:07:53  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
10:07:53  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
10:07:53  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
10:07:53  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
10:07:53  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
10:07:53  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
10:07:53  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
10:07:53  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
10:07:53  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
10:07:53  36  FROM di5min WHERE pair LIKE'%gbp%'
10:07:53  37  AND ydate > sysdate - 95
10:07:53  38  ORDER BY ydate
10:07:53  39  /

View created.

Elapsed: 00:00:00.05
10:07:53 SQL> 
10:07:53 SQL> -- rpt
10:07:53 SQL> 
10:07:53 SQL> SELECT
10:07:53   2  pair
10:07:53   3  ,COUNT(pair)
10:07:53   4  ,MIN(clse),MAX(clse)
10:07:53   5  ,MIN(avg6),MAX(avg6)
10:07:53   6  ,MIN(ydate),MAX(ydate)
10:07:53   7  FROM svm6102
10:07:53   8  GROUP BY pair
10:07:53   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
gbp_usd       19810   1.535325	   1.6295 1.53696747 1.62716986 2010-10-04 10:10:01 2011-01-07 10:05:00

Elapsed: 00:00:00.90
10:07:54 SQL> 
10:07:54 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
10:07:54 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.38
10:07:54 SQL> CREATE TABLE svm6122 COMPRESS AS
10:07:54   2  SELECT
10:07:54   3  pair
10:07:54   4  ,ydate
10:07:54   5  ,prdate
10:07:54   6  ,clse
10:07:54   7  -- g6 is important. I want to predict g6:
10:07:54   8  ,ld6 - clse g6
10:07:54   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
10:07:54  10  -- I want more attributes from the ones I derived above:
10:07:54  11  -- clse relation to moving-min
10:07:54  12  ,clse-min4  cm4
10:07:54  13  ,clse-min6  cm6
10:07:54  14  ,clse-min8  cm8
10:07:54  15  ,clse-min10 cm10
10:07:54  16  ,clse-min12 cm12
10:07:54  17  ,clse-min14 cm14
10:07:54  18  ,clse-min16 cm16
10:07:54  19  ,clse-min18 cm18
10:07:54  20  -- clse relation to moving-avg
10:07:54  21  ,clse-avg4  ca4
10:07:54  22  ,clse-avg6  ca6
10:07:54  23  ,clse-avg8  ca8
10:07:54  24  ,clse-avg10 ca10
10:07:54  25  ,clse-avg12 ca12
10:07:54  26  ,clse-avg14 ca14
10:07:54  27  ,clse-avg16 ca16
10:07:54  28  ,clse-avg18 ca18
10:07:54  29  -- clse relation to moving-max
10:07:54  30  ,clse-max4  cx4
10:07:54  31  ,clse-max6  cx6
10:07:54  32  ,clse-max8  cx8
10:07:54  33  ,clse-max10 cx10
10:07:54  34  ,clse-max12 cx12
10:07:54  35  ,clse-max14 cx14
10:07:54  36  ,clse-max16 cx16
10:07:54  37  ,clse-max18 cx18
10:07:54  38  -- Derive more attributes.
10:07:54  39  -- I want to use CORR() here to help SVM see the shape of the series.
10:07:54  40  -- But COVAR_POP is more stable:
10:07:54  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
10:07:54  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
10:07:54  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
10:07:54  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
10:07:54  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
10:07:54  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
10:07:54  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
10:07:54  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
10:07:54  49  -- Derive date related attributes:
10:07:54  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
10:07:54  51  ,0+TO_CHAR(ydate,'D')d
10:07:54  52  ,0+TO_CHAR(ydate,'W')w
10:07:54  53  -- mpm stands for minutes-past-midnight:
10:07:54  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
10:07:54  55  -- mph stands for minutes-past-hour:
10:07:54  56  ,0+TO_CHAR(ydate,'MI')mph
10:07:54  57  FROM svm6102
10:07:54  58  ORDER BY ydate
10:07:54  59  /

Table created.

Elapsed: 00:00:02.09
10:07:57 SQL> 
10:07:57 SQL> -- rpt
10:07:57 SQL> 
10:07:57 SQL> SELECT
10:07:57   2  pair
10:07:57   3  ,COUNT(pair)
10:07:57   4  ,MIN(clse),MAX(clse)
10:07:57   5  ,MIN(ydate),MAX(ydate)
10:07:57   6  FROM svm6122
10:07:57   7  GROUP BY pair
10:07:57   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
gbp_usd       19810   1.535325	   1.6295 2010-10-04 10:10:01 2011-01-07 10:05:00

Elapsed: 00:00:00.04
10:07:57 SQL> 
10:07:57 SQL> -- Prepare for derivation of NTILE based params:
10:07:57 SQL> 
10:07:57 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.22
10:07:57 SQL> CREATE TABLE svm6142 COMPRESS AS
10:07:57   2  SELECT
10:07:57   3  pair
10:07:57   4  ,ydate
10:07:57   5  ,prdate
10:07:57   6  ,clse
10:07:57   7  ,g6
10:07:57   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
10:07:57   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
10:07:57  10  ,CASE WHEN trend IS NULL THEN 1
10:07:57  11  	    WHEN trend =0      THEN 1
10:07:57  12  	    ELSE trend END trend
10:07:57  13  ,cm4
10:07:57  14  ,cm6
10:07:57  15  ,cm8
10:07:57  16  ,cm10
10:07:57  17  ,cm12
10:07:57  18  ,cm14
10:07:57  19  ,cm16
10:07:57  20  ,cm18
10:07:57  21  --
10:07:57  22  ,ca4
10:07:57  23  ,ca6
10:07:57  24  ,ca8
10:07:57  25  ,ca10
10:07:57  26  ,ca12
10:07:57  27  ,ca14
10:07:57  28  ,ca16
10:07:57  29  ,ca18
10:07:57  30  --
10:07:57  31  ,cx4
10:07:57  32  ,cx6
10:07:57  33  ,cx8
10:07:57  34  ,cx10
10:07:57  35  ,cx12
10:07:57  36  ,cx14
10:07:57  37  ,cx16
10:07:57  38  ,cx18
10:07:57  39  --
10:07:57  40  ,crr4
10:07:57  41  ,crr6
10:07:57  42  ,crr8
10:07:57  43  ,crr10
10:07:57  44  ,crr12
10:07:57  45  ,crr14
10:07:57  46  ,crr16
10:07:57  47  ,crr18
10:07:57  48  --
10:07:57  49  ,hh
10:07:57  50  ,d
10:07:57  51  ,w
10:07:57  52  ,mpm
10:07:57  53  ,mph
10:07:57  54  FROM svm6122
10:07:57  55  ORDER BY ydate
10:07:57  56  /

Table created.

Elapsed: 00:00:00.38
10:07:57 SQL> 
10:07:57 SQL> -- rpt
10:07:57 SQL> 
10:07:57 SQL> SELECT
10:07:57   2  pair
10:07:57   3  ,trend
10:07:57   4  ,gatt
10:07:57   5  ,COUNT(pair)
10:07:57   6  ,AVG(g6)
10:07:57   7  FROM svm6142
10:07:57   8  GROUP BY pair,trend,gatt
10:07:57   9  ORDER BY pair,trend,gatt
10:07:57  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6490 -.00261708
gbp_usd 	-1 up	      3511 .004318403
gbp_usd 	-1		68
gbp_usd 	 1 nup	      6279 -.00265679
gbp_usd 	 1 up	      3458 .004523782
gbp_usd 	 1		 4

6 rows selected.

Elapsed: 00:00:00.04
10:07:57 SQL> 
10:07:57 SQL> 
10:07:57 SQL> -- Derive NTILE based params:
10:07:57 SQL> 
10:07:57 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.15
10:07:57 SQL> CREATE TABLE svm6162 COMPRESS AS
10:07:57   2  SELECT
10:07:57   3  pair
10:07:57   4  ,ydate
10:07:57   5  ,prdate
10:07:57   6  ,clse
10:07:57   7  ,g6
10:07:57   8  ,gatt
10:07:57   9  ,gattn
10:07:57  10  ,trend
10:07:57  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
10:07:57  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
10:07:57  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
10:07:57  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
10:07:57  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
10:07:57  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
10:07:57  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
10:07:57  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
10:07:57  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
10:07:57  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
10:07:57  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
10:07:57  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
10:07:57  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
10:07:57  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
10:07:57  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
10:07:57  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
10:07:57  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
10:07:57  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
10:07:57  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
10:07:57  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
10:07:57  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
10:07:57  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
10:07:57  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
10:07:57  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
10:07:57  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
10:07:57  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
10:07:57  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
10:07:57  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
10:07:57  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
10:07:57  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
10:07:57  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
10:07:57  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
10:07:57  43  ,hh  att32
10:07:57  44  ,d   att33
10:07:57  45  ,w   att34
10:07:57  46  ,mpm att35
10:07:57  47  ,mph att36
10:07:57  48  ,trend att37
10:07:57  49  FROM svm6142
10:07:57  50  ORDER BY ydate
10:07:57  51  /

Table created.

Elapsed: 00:00:04.75
10:08:02 SQL> 
10:08:02 SQL> -- rpt
10:08:02 SQL> 
10:08:02 SQL> SELECT
10:08:02   2  pair
10:08:02   3  ,trend
10:08:02   4  ,gatt
10:08:02   5  ,COUNT(pair)
10:08:02   6  ,AVG(g6)
10:08:02   7  FROM svm6162
10:08:02   8  GROUP BY pair,trend,gatt
10:08:02   9  ORDER BY pair,trend,gatt
10:08:02  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6490 -.00261708
gbp_usd 	-1 up	      3511 .004318403
gbp_usd 	-1		68
gbp_usd 	 1 nup	      6279 -.00265679
gbp_usd 	 1 up	      3458 .004523782
gbp_usd 	 1		 4

6 rows selected.

Elapsed: 00:00:00.02
10:08:02 SQL> 
10:08:02 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.14
10:08:02 SQL> CREATE TABLE modsrc COMPRESS AS
10:08:02   2  SELECT
10:08:02   3  pair
10:08:02   4  ,ydate
10:08:02   5  ,prdate
10:08:02   6  ,trend
10:08:02   7  ,g6
10:08:02   8  ,gatt
10:08:02   9  ,gattn
10:08:02  10  FROM svm6162
10:08:02  11  /

Table created.

Elapsed: 00:00:00.08
10:08:02 SQL> 
10:08:02 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
10:08:03 SQL> 
10:08:03 SQL> DROP   TABLE gbp_ms610 ;

Table dropped.

Elapsed: 00:00:00.20
10:08:03 SQL> CREATE TABLE gbp_ms610 COMPRESS AS
10:08:03   2  SELECT
10:08:03   3  ydate
10:08:03   4  ,trend gbp_trend
10:08:03   5  ,g6    gbp_g6
10:08:03   6  ,gatt  gbp_gatt
10:08:03   7  ,gattn gbp_gattn
10:08:03   8  FROM modsrc
10:08:03   9  /

Table created.

Elapsed: 00:00:00.06
10:08:03 SQL> 
10:08:03 SQL> ANALYZE TABLE gbp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
10:08:03 SQL> 
10:08:03 SQL> -- I need a copy of the attributes:
10:08:03 SQL> 
10:08:03 SQL> 
10:08:03 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.05
10:08:03 SQL> CREATE TABLE gbp_att COMPRESS AS
10:08:03   2  SELECT
10:08:03   3  ydate
10:08:03   4  ,att00 gbp_att00
10:08:03   5  ,att01 gbp_att01
10:08:03   6  ,att02 gbp_att02
10:08:03   7  ,att03 gbp_att03
10:08:03   8  ,att04 gbp_att04
10:08:03   9  ,att05 gbp_att05
10:08:03  10  ,att06 gbp_att06
10:08:03  11  ,att07 gbp_att07
10:08:03  12  ,att08 gbp_att08
10:08:03  13  ,att09 gbp_att09
10:08:03  14  ,att10 gbp_att10
10:08:03  15  ,att11 gbp_att11
10:08:03  16  ,att12 gbp_att12
10:08:03  17  ,att13 gbp_att13
10:08:03  18  ,att14 gbp_att14
10:08:03  19  ,att15 gbp_att15
10:08:03  20  ,att16 gbp_att16
10:08:03  21  ,att17 gbp_att17
10:08:03  22  ,att18 gbp_att18
10:08:03  23  ,att19 gbp_att19
10:08:03  24  ,att20 gbp_att20
10:08:03  25  ,att21 gbp_att21
10:08:03  26  ,att22 gbp_att22
10:08:03  27  ,att23 gbp_att23
10:08:03  28  ,att24 gbp_att24
10:08:03  29  ,att25 gbp_att25
10:08:03  30  ,att26 gbp_att26
10:08:03  31  ,att27 gbp_att27
10:08:03  32  ,att28 gbp_att28
10:08:03  33  ,att29 gbp_att29
10:08:03  34  ,att30 gbp_att30
10:08:03  35  ,att31 gbp_att31
10:08:03  36  ,att32 gbp_att32
10:08:03  37  ,att33 gbp_att33
10:08:03  38  ,att34 gbp_att34
10:08:03  39  ,att35 gbp_att35
10:08:03  40  ,att36 gbp_att36
10:08:03  41  ,att37 gbp_att37
10:08:03  42  FROM svm6162
10:08:03  43  /

Table created.

Elapsed: 00:00:00.17
10:08:03 SQL> 
10:08:03 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
10:08:04 SQL> 
10:08:04 SQL> -- rpt
10:08:04 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19810

Elapsed: 00:00:00.91
10:08:05 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     19810

Elapsed: 00:00:00.00
10:08:05 SQL> 
10:08:05 SQL> --
10:08:05 SQL> -- jpy610.sql
10:08:05 SQL> --
10:08:05 SQL> 
10:08:05 SQL> -- Creates views and tables for backtesting a forex SVM strategy
10:08:05 SQL> 
10:08:05 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.63
10:08:05 SQL> 
10:08:05 SQL> -- I created di5min here:
10:08:05 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
10:08:05 SQL> 
10:08:05 SQL> CREATE OR REPLACE VIEW svm6102 AS
10:08:05   2  SELECT
10:08:05   3  pair
10:08:05   4  ,ydate
10:08:05   5  ,prdate
10:08:05   6  ,rownum rnum -- acts as t in my time-series
10:08:05   7  ,clse
10:08:05   8  -- Derive a bunch of attributes from clse, the latest price:
10:08:05   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
10:08:05  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
10:08:05  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
10:08:05  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
10:08:05  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
10:08:05  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
10:08:05  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
10:08:05  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
10:08:05  17  --
10:08:05  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
10:08:05  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
10:08:05  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
10:08:05  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
10:08:05  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
10:08:05  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
10:08:05  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
10:08:05  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
10:08:05  26  --
10:08:05  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
10:08:05  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
10:08:05  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
10:08:05  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
10:08:05  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
10:08:05  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
10:08:05  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
10:08:05  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
10:08:05  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
10:08:05  36  FROM di5min WHERE pair LIKE'%jpy%'
10:08:05  37  AND ydate > sysdate - 95
10:08:05  38  ORDER BY ydate
10:08:05  39  /

View created.

Elapsed: 00:00:00.06
10:08:05 SQL> 
10:08:05 SQL> -- rpt
10:08:05 SQL> 
10:08:05 SQL> SELECT
10:08:05   2  pair
10:08:05   3  ,COUNT(pair)
10:08:05   4  ,MIN(clse),MAX(clse)
10:08:05   5  ,MIN(avg6),MAX(avg6)
10:08:05   6  ,MIN(ydate),MAX(ydate)
10:08:05   7  FROM svm6102
10:08:05   8  GROUP BY pair
10:08:05   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_jpy       19809	 80.25	   84.485 80.3595205 84.3105479 2010-10-04 10:10:01 2011-01-07 10:05:00

Elapsed: 00:00:00.93
10:08:06 SQL> 
10:08:06 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
10:08:06 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.29
10:08:07 SQL> CREATE TABLE svm6122 COMPRESS AS
10:08:07   2  SELECT
10:08:07   3  pair
10:08:07   4  ,ydate
10:08:07   5  ,prdate
10:08:07   6  ,clse
10:08:07   7  -- g6 is important. I want to predict g6:
10:08:07   8  ,ld6 - clse g6
10:08:07   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
10:08:07  10  -- I want more attributes from the ones I derived above:
10:08:07  11  -- clse relation to moving-min
10:08:07  12  ,clse-min4  cm4
10:08:07  13  ,clse-min6  cm6
10:08:07  14  ,clse-min8  cm8
10:08:07  15  ,clse-min10 cm10
10:08:07  16  ,clse-min12 cm12
10:08:07  17  ,clse-min14 cm14
10:08:07  18  ,clse-min16 cm16
10:08:07  19  ,clse-min18 cm18
10:08:07  20  -- clse relation to moving-avg
10:08:07  21  ,clse-avg4  ca4
10:08:07  22  ,clse-avg6  ca6
10:08:07  23  ,clse-avg8  ca8
10:08:07  24  ,clse-avg10 ca10
10:08:07  25  ,clse-avg12 ca12
10:08:07  26  ,clse-avg14 ca14
10:08:07  27  ,clse-avg16 ca16
10:08:07  28  ,clse-avg18 ca18
10:08:07  29  -- clse relation to moving-max
10:08:07  30  ,clse-max4  cx4
10:08:07  31  ,clse-max6  cx6
10:08:07  32  ,clse-max8  cx8
10:08:07  33  ,clse-max10 cx10
10:08:07  34  ,clse-max12 cx12
10:08:07  35  ,clse-max14 cx14
10:08:07  36  ,clse-max16 cx16
10:08:07  37  ,clse-max18 cx18
10:08:07  38  -- Derive more attributes.
10:08:07  39  -- I want to use CORR() here to help SVM see the shape of the series.
10:08:07  40  -- But COVAR_POP is more stable:
10:08:07  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
10:08:07  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
10:08:07  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
10:08:07  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
10:08:07  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
10:08:07  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
10:08:07  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
10:08:07  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
10:08:07  49  -- Derive date related attributes:
10:08:07  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
10:08:07  51  ,0+TO_CHAR(ydate,'D')d
10:08:07  52  ,0+TO_CHAR(ydate,'W')w
10:08:07  53  -- mpm stands for minutes-past-midnight:
10:08:07  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
10:08:07  55  -- mph stands for minutes-past-hour:
10:08:07  56  ,0+TO_CHAR(ydate,'MI')mph
10:08:07  57  FROM svm6102
10:08:07  58  ORDER BY ydate
10:08:07  59  /

Table created.

Elapsed: 00:00:02.10
10:08:09 SQL> 
10:08:09 SQL> -- rpt
10:08:09 SQL> 
10:08:09 SQL> SELECT
10:08:09   2  pair
10:08:09   3  ,COUNT(pair)
10:08:09   4  ,MIN(clse),MAX(clse)
10:08:09   5  ,MIN(ydate),MAX(ydate)
10:08:09   6  FROM svm6122
10:08:09   7  GROUP BY pair
10:08:09   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_jpy       19809	 80.25	   84.485 2010-10-04 10:10:01 2011-01-07 10:05:00

Elapsed: 00:00:00.07
10:08:09 SQL> 
10:08:09 SQL> -- Prepare for derivation of NTILE based params:
10:08:09 SQL> 
10:08:09 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.31
10:08:09 SQL> CREATE TABLE svm6142 COMPRESS AS
10:08:09   2  SELECT
10:08:09   3  pair
10:08:09   4  ,ydate
10:08:09   5  ,prdate
10:08:09   6  ,clse
10:08:09   7  ,g6
10:08:09   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
10:08:09   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
10:08:09  10  ,CASE WHEN trend IS NULL THEN 1
10:08:09  11  	    WHEN trend =0      THEN 1
10:08:09  12  	    ELSE trend END trend
10:08:09  13  ,cm4
10:08:09  14  ,cm6
10:08:09  15  ,cm8
10:08:09  16  ,cm10
10:08:09  17  ,cm12
10:08:09  18  ,cm14
10:08:09  19  ,cm16
10:08:09  20  ,cm18
10:08:09  21  --
10:08:09  22  ,ca4
10:08:09  23  ,ca6
10:08:09  24  ,ca8
10:08:09  25  ,ca10
10:08:09  26  ,ca12
10:08:09  27  ,ca14
10:08:09  28  ,ca16
10:08:09  29  ,ca18
10:08:09  30  --
10:08:09  31  ,cx4
10:08:09  32  ,cx6
10:08:09  33  ,cx8
10:08:09  34  ,cx10
10:08:09  35  ,cx12
10:08:09  36  ,cx14
10:08:09  37  ,cx16
10:08:09  38  ,cx18
10:08:09  39  --
10:08:09  40  ,crr4
10:08:09  41  ,crr6
10:08:09  42  ,crr8
10:08:09  43  ,crr10
10:08:09  44  ,crr12
10:08:09  45  ,crr14
10:08:09  46  ,crr16
10:08:09  47  ,crr18
10:08:09  48  --
10:08:09  49  ,hh
10:08:09  50  ,d
10:08:09  51  ,w
10:08:09  52  ,mpm
10:08:09  53  ,mph
10:08:09  54  FROM svm6122
10:08:09  55  ORDER BY ydate
10:08:09  56  /

Table created.

Elapsed: 00:00:00.38
10:08:09 SQL> 
10:08:09 SQL> -- rpt
10:08:09 SQL> 
10:08:09 SQL> SELECT
10:08:09   2  pair
10:08:09   3  ,trend
10:08:09   4  ,gatt
10:08:09   5  ,COUNT(pair)
10:08:09   6  ,AVG(g6)
10:08:09   7  FROM svm6142
10:08:09   8  GROUP BY pair,trend,gatt
10:08:09   9  ORDER BY pair,trend,gatt
10:08:09  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5171 -.16583061
usd_jpy 	-1 up	      4872 .170572181
usd_jpy 	 1 nup	      5017 -.15289785
usd_jpy 	 1 up	      4677 .172477749
usd_jpy 	 1		72

Elapsed: 00:00:00.04
10:08:09 SQL> 
10:08:09 SQL> 
10:08:09 SQL> -- Derive NTILE based params:
10:08:09 SQL> 
10:08:09 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.30
10:08:10 SQL> CREATE TABLE svm6162 COMPRESS AS
10:08:10   2  SELECT
10:08:10   3  pair
10:08:10   4  ,ydate
10:08:10   5  ,prdate
10:08:10   6  ,clse
10:08:10   7  ,g6
10:08:10   8  ,gatt
10:08:10   9  ,gattn
10:08:10  10  ,trend
10:08:10  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
10:08:10  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
10:08:10  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
10:08:10  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
10:08:10  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
10:08:10  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
10:08:10  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
10:08:10  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
10:08:10  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
10:08:10  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
10:08:10  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
10:08:10  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
10:08:10  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
10:08:10  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
10:08:10  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
10:08:10  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
10:08:10  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
10:08:10  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
10:08:10  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
10:08:10  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
10:08:10  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
10:08:10  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
10:08:10  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
10:08:10  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
10:08:10  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
10:08:10  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
10:08:10  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
10:08:10  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
10:08:10  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
10:08:10  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
10:08:10  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
10:08:10  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
10:08:10  43  ,hh  att32
10:08:10  44  ,d   att33
10:08:10  45  ,w   att34
10:08:10  46  ,mpm att35
10:08:10  47  ,mph att36
10:08:10  48  ,trend att37
10:08:10  49  FROM svm6142
10:08:10  50  ORDER BY ydate
10:08:10  51  /

Table created.

Elapsed: 00:00:04.86
10:08:15 SQL> 
10:08:15 SQL> -- rpt
10:08:15 SQL> 
10:08:15 SQL> SELECT
10:08:15   2  pair
10:08:15   3  ,trend
10:08:15   4  ,gatt
10:08:15   5  ,COUNT(pair)
10:08:15   6  ,AVG(g6)
10:08:15   7  FROM svm6162
10:08:15   8  GROUP BY pair,trend,gatt
10:08:15   9  ORDER BY pair,trend,gatt
10:08:15  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5171 -.16583061
usd_jpy 	-1 up	      4872 .170572181
usd_jpy 	 1 nup	      5017 -.15289785
usd_jpy 	 1 up	      4677 .172477749
usd_jpy 	 1		72

Elapsed: 00:00:00.03
10:08:15 SQL> 
10:08:15 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.18
10:08:15 SQL> CREATE TABLE modsrc COMPRESS AS
10:08:15   2  SELECT
10:08:15   3  pair
10:08:15   4  ,ydate
10:08:15   5  ,prdate
10:08:15   6  ,trend
10:08:15   7  ,g6
10:08:15   8  ,gatt
10:08:15   9  ,gattn
10:08:15  10  FROM svm6162
10:08:15  11  /

Table created.

Elapsed: 00:00:00.09
10:08:15 SQL> 
10:08:15 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.24
10:08:15 SQL> 
10:08:15 SQL> DROP   TABLE jpy_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
10:08:15 SQL> CREATE TABLE jpy_ms610 COMPRESS AS
10:08:15   2  SELECT
10:08:15   3  ydate
10:08:15   4  ,trend jpy_trend
10:08:15   5  ,g6    jpy_g6
10:08:15   6  ,gatt  jpy_gatt
10:08:15   7  ,gattn jpy_gattn
10:08:15   8  FROM modsrc
10:08:15   9  /

Table created.

Elapsed: 00:00:00.07
10:08:15 SQL> 
10:08:15 SQL> ANALYZE TABLE jpy_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
10:08:15 SQL> 
10:08:15 SQL> -- I need a copy of the attributes:
10:08:15 SQL> 
10:08:15 SQL> 
10:08:15 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.04
10:08:15 SQL> CREATE TABLE jpy_att COMPRESS AS
10:08:15   2  SELECT
10:08:15   3  ydate
10:08:15   4  ,att00 jpy_att00
10:08:15   5  ,att01 jpy_att01
10:08:15   6  ,att02 jpy_att02
10:08:15   7  ,att03 jpy_att03
10:08:15   8  ,att04 jpy_att04
10:08:15   9  ,att05 jpy_att05
10:08:15  10  ,att06 jpy_att06
10:08:15  11  ,att07 jpy_att07
10:08:15  12  ,att08 jpy_att08
10:08:15  13  ,att09 jpy_att09
10:08:15  14  ,att10 jpy_att10
10:08:15  15  ,att11 jpy_att11
10:08:15  16  ,att12 jpy_att12
10:08:15  17  ,att13 jpy_att13
10:08:15  18  ,att14 jpy_att14
10:08:15  19  ,att15 jpy_att15
10:08:15  20  ,att16 jpy_att16
10:08:15  21  ,att17 jpy_att17
10:08:15  22  ,att18 jpy_att18
10:08:15  23  ,att19 jpy_att19
10:08:15  24  ,att20 jpy_att20
10:08:15  25  ,att21 jpy_att21
10:08:15  26  ,att22 jpy_att22
10:08:15  27  ,att23 jpy_att23
10:08:15  28  ,att24 jpy_att24
10:08:15  29  ,att25 jpy_att25
10:08:15  30  ,att26 jpy_att26
10:08:15  31  ,att27 jpy_att27
10:08:15  32  ,att28 jpy_att28
10:08:15  33  ,att29 jpy_att29
10:08:15  34  ,att30 jpy_att30
10:08:15  35  ,att31 jpy_att31
10:08:15  36  ,att32 jpy_att32
10:08:15  37  ,att33 jpy_att33
10:08:15  38  ,att34 jpy_att34
10:08:15  39  ,att35 jpy_att35
10:08:15  40  ,att36 jpy_att36
10:08:15  41  ,att37 jpy_att37
10:08:15  42  FROM svm6162
10:08:15  43  /

Table created.

Elapsed: 00:00:00.17
10:08:16 SQL> 
10:08:16 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:01.26
10:08:17 SQL> 
10:08:17 SQL> -- rpt
10:08:17 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19809

Elapsed: 00:00:00.94
10:08:18 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     19809

Elapsed: 00:00:00.00
10:08:18 SQL> 
10:08:18 SQL> --
10:08:18 SQL> -- cad610.sql
10:08:18 SQL> --
10:08:18 SQL> 
10:08:18 SQL> -- Creates views and tables for backtesting a forex SVM strategy
10:08:18 SQL> 
10:08:18 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.53
10:08:18 SQL> 
10:08:18 SQL> -- I created di5min here:
10:08:18 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
10:08:18 SQL> 
10:08:18 SQL> CREATE OR REPLACE VIEW svm6102 AS
10:08:18   2  SELECT
10:08:18   3  pair
10:08:18   4  ,ydate
10:08:18   5  ,prdate
10:08:18   6  ,rownum rnum -- acts as t in my time-series
10:08:18   7  ,clse
10:08:18   8  -- Derive a bunch of attributes from clse, the latest price:
10:08:18   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
10:08:18  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
10:08:18  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
10:08:18  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
10:08:18  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
10:08:18  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
10:08:18  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
10:08:18  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
10:08:18  17  --
10:08:18  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
10:08:18  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
10:08:18  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
10:08:18  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
10:08:18  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
10:08:18  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
10:08:18  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
10:08:18  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
10:08:18  26  --
10:08:18  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
10:08:18  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
10:08:18  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
10:08:18  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
10:08:18  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
10:08:18  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
10:08:18  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
10:08:18  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
10:08:18  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
10:08:18  36  FROM di5min WHERE pair LIKE'%cad%'
10:08:18  37  AND ydate > sysdate - 95
10:08:18  38  ORDER BY ydate
10:08:18  39  /

View created.

Elapsed: 00:00:00.05
10:08:18 SQL> 
10:08:18 SQL> -- rpt
10:08:18 SQL> 
10:08:18 SQL> SELECT
10:08:18   2  pair
10:08:18   3  ,COUNT(pair)
10:08:18   4  ,MIN(clse),MAX(clse)
10:08:18   5  ,MIN(avg6),MAX(avg6)
10:08:18   6  ,MIN(ydate),MAX(ydate)
10:08:18   7  FROM svm6102
10:08:18   8  GROUP BY pair
10:08:18   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_cad       19809    .988925	   1.0355  .99060274 1.03282877 2010-10-04 10:10:01 2011-01-07 10:05:00

Elapsed: 00:00:00.87
10:08:19 SQL> 
10:08:19 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
10:08:19 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.28
10:08:20 SQL> CREATE TABLE svm6122 COMPRESS AS
10:08:20   2  SELECT
10:08:20   3  pair
10:08:20   4  ,ydate
10:08:20   5  ,prdate
10:08:20   6  ,clse
10:08:20   7  -- g6 is important. I want to predict g6:
10:08:20   8  ,ld6 - clse g6
10:08:20   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
10:08:20  10  -- I want more attributes from the ones I derived above:
10:08:20  11  -- clse relation to moving-min
10:08:20  12  ,clse-min4  cm4
10:08:20  13  ,clse-min6  cm6
10:08:20  14  ,clse-min8  cm8
10:08:20  15  ,clse-min10 cm10
10:08:20  16  ,clse-min12 cm12
10:08:20  17  ,clse-min14 cm14
10:08:20  18  ,clse-min16 cm16
10:08:20  19  ,clse-min18 cm18
10:08:20  20  -- clse relation to moving-avg
10:08:20  21  ,clse-avg4  ca4
10:08:20  22  ,clse-avg6  ca6
10:08:20  23  ,clse-avg8  ca8
10:08:20  24  ,clse-avg10 ca10
10:08:20  25  ,clse-avg12 ca12
10:08:20  26  ,clse-avg14 ca14
10:08:20  27  ,clse-avg16 ca16
10:08:20  28  ,clse-avg18 ca18
10:08:20  29  -- clse relation to moving-max
10:08:20  30  ,clse-max4  cx4
10:08:20  31  ,clse-max6  cx6
10:08:20  32  ,clse-max8  cx8
10:08:20  33  ,clse-max10 cx10
10:08:20  34  ,clse-max12 cx12
10:08:20  35  ,clse-max14 cx14
10:08:20  36  ,clse-max16 cx16
10:08:20  37  ,clse-max18 cx18
10:08:20  38  -- Derive more attributes.
10:08:20  39  -- I want to use CORR() here to help SVM see the shape of the series.
10:08:20  40  -- But COVAR_POP is more stable:
10:08:20  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
10:08:20  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
10:08:20  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
10:08:20  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
10:08:20  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
10:08:20  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
10:08:20  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
10:08:20  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
10:08:20  49  -- Derive date related attributes:
10:08:20  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
10:08:20  51  ,0+TO_CHAR(ydate,'D')d
10:08:20  52  ,0+TO_CHAR(ydate,'W')w
10:08:20  53  -- mpm stands for minutes-past-midnight:
10:08:20  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
10:08:20  55  -- mph stands for minutes-past-hour:
10:08:20  56  ,0+TO_CHAR(ydate,'MI')mph
10:08:20  57  FROM svm6102
10:08:20  58  ORDER BY ydate
10:08:20  59  /

Table created.

Elapsed: 00:00:02.11
10:08:22 SQL> 
10:08:22 SQL> -- rpt
10:08:22 SQL> 
10:08:22 SQL> SELECT
10:08:22   2  pair
10:08:22   3  ,COUNT(pair)
10:08:22   4  ,MIN(clse),MAX(clse)
10:08:22   5  ,MIN(ydate),MAX(ydate)
10:08:22   6  FROM svm6122
10:08:22   7  GROUP BY pair
10:08:22   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_cad       19809    .988925	   1.0355 2010-10-04 10:10:01 2011-01-07 10:05:00

Elapsed: 00:00:00.04
10:08:22 SQL> 
10:08:22 SQL> -- Prepare for derivation of NTILE based params:
10:08:22 SQL> 
10:08:22 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.23
10:08:22 SQL> CREATE TABLE svm6142 COMPRESS AS
10:08:22   2  SELECT
10:08:22   3  pair
10:08:22   4  ,ydate
10:08:22   5  ,prdate
10:08:22   6  ,clse
10:08:22   7  ,g6
10:08:22   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
10:08:22   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
10:08:22  10  ,CASE WHEN trend IS NULL THEN 1
10:08:22  11  	    WHEN trend =0      THEN 1
10:08:22  12  	    ELSE trend END trend
10:08:22  13  ,cm4
10:08:22  14  ,cm6
10:08:22  15  ,cm8
10:08:22  16  ,cm10
10:08:22  17  ,cm12
10:08:22  18  ,cm14
10:08:22  19  ,cm16
10:08:22  20  ,cm18
10:08:22  21  --
10:08:22  22  ,ca4
10:08:22  23  ,ca6
10:08:22  24  ,ca8
10:08:22  25  ,ca10
10:08:22  26  ,ca12
10:08:22  27  ,ca14
10:08:22  28  ,ca16
10:08:22  29  ,ca18
10:08:22  30  --
10:08:22  31  ,cx4
10:08:22  32  ,cx6
10:08:22  33  ,cx8
10:08:22  34  ,cx10
10:08:22  35  ,cx12
10:08:22  36  ,cx14
10:08:22  37  ,cx16
10:08:22  38  ,cx18
10:08:22  39  --
10:08:22  40  ,crr4
10:08:22  41  ,crr6
10:08:22  42  ,crr8
10:08:22  43  ,crr10
10:08:22  44  ,crr12
10:08:22  45  ,crr14
10:08:22  46  ,crr16
10:08:22  47  ,crr18
10:08:22  48  --
10:08:22  49  ,hh
10:08:22  50  ,d
10:08:22  51  ,w
10:08:22  52  ,mpm
10:08:22  53  ,mph
10:08:22  54  FROM svm6122
10:08:22  55  ORDER BY ydate
10:08:22  56  /

Table created.

Elapsed: 00:00:00.37
10:08:22 SQL> 
10:08:22 SQL> -- rpt
10:08:22 SQL> 
10:08:22 SQL> SELECT
10:08:22   2  pair
10:08:22   3  ,trend
10:08:22   4  ,gatt
10:08:22   5  ,COUNT(pair)
10:08:22   6  ,AVG(g6)
10:08:22   7  FROM svm6142
10:08:22   8  GROUP BY pair,trend,gatt
10:08:22   9  ORDER BY pair,trend,gatt
10:08:22  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7329  -.0012382
usd_cad 	-1 up	      3150 .003041153
usd_cad 	-1		 7
usd_cad 	 1 nup	      6832 -.00160703
usd_cad 	 1 up	      2426 .003626307
usd_cad 	 1		65

6 rows selected.

Elapsed: 00:00:00.03
10:08:22 SQL> 
10:08:22 SQL> 
10:08:22 SQL> -- Derive NTILE based params:
10:08:22 SQL> 
10:08:22 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.16
10:08:23 SQL> CREATE TABLE svm6162 COMPRESS AS
10:08:23   2  SELECT
10:08:23   3  pair
10:08:23   4  ,ydate
10:08:23   5  ,prdate
10:08:23   6  ,clse
10:08:23   7  ,g6
10:08:23   8  ,gatt
10:08:23   9  ,gattn
10:08:23  10  ,trend
10:08:23  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
10:08:23  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
10:08:23  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
10:08:23  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
10:08:23  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
10:08:23  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
10:08:23  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
10:08:23  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
10:08:23  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
10:08:23  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
10:08:23  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
10:08:23  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
10:08:23  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
10:08:23  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
10:08:23  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
10:08:23  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
10:08:23  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
10:08:23  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
10:08:23  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
10:08:23  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
10:08:23  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
10:08:23  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
10:08:23  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
10:08:23  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
10:08:23  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
10:08:23  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
10:08:23  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
10:08:23  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
10:08:23  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
10:08:23  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
10:08:23  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
10:08:23  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
10:08:23  43  ,hh  att32
10:08:23  44  ,d   att33
10:08:23  45  ,w   att34
10:08:23  46  ,mpm att35
10:08:23  47  ,mph att36
10:08:23  48  ,trend att37
10:08:23  49  FROM svm6142
10:08:23  50  ORDER BY ydate
10:08:23  51  /

Table created.

Elapsed: 00:00:04.85
10:08:27 SQL> 
10:08:27 SQL> -- rpt
10:08:27 SQL> 
10:08:27 SQL> SELECT
10:08:27   2  pair
10:08:27   3  ,trend
10:08:27   4  ,gatt
10:08:27   5  ,COUNT(pair)
10:08:27   6  ,AVG(g6)
10:08:27   7  FROM svm6162
10:08:27   8  GROUP BY pair,trend,gatt
10:08:27   9  ORDER BY pair,trend,gatt
10:08:27  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7329  -.0012382
usd_cad 	-1 up	      3150 .003041153
usd_cad 	-1		 7
usd_cad 	 1 nup	      6832 -.00160703
usd_cad 	 1 up	      2426 .003626307
usd_cad 	 1		65

6 rows selected.

Elapsed: 00:00:00.03
10:08:27 SQL> 
10:08:27 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.21
10:08:28 SQL> CREATE TABLE modsrc COMPRESS AS
10:08:28   2  SELECT
10:08:28   3  pair
10:08:28   4  ,ydate
10:08:28   5  ,prdate
10:08:28   6  ,trend
10:08:28   7  ,g6
10:08:28   8  ,gatt
10:08:28   9  ,gattn
10:08:28  10  FROM svm6162
10:08:28  11  /

Table created.

Elapsed: 00:00:00.09
10:08:28 SQL> 
10:08:28 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
10:08:28 SQL> 
10:08:28 SQL> DROP   TABLE cad_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
10:08:28 SQL> CREATE TABLE cad_ms610 COMPRESS AS
10:08:28   2  SELECT
10:08:28   3  ydate
10:08:28   4  ,trend cad_trend
10:08:28   5  ,g6    cad_g6
10:08:28   6  ,gatt  cad_gatt
10:08:28   7  ,gattn cad_gattn
10:08:28   8  FROM modsrc
10:08:28   9  /

Table created.

Elapsed: 00:00:00.07
10:08:28 SQL> 
10:08:28 SQL> ANALYZE TABLE cad_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
10:08:28 SQL> 
10:08:28 SQL> -- I need a copy of the attributes:
10:08:28 SQL> 
10:08:28 SQL> 
10:08:28 SQL> DROP   TABLE cad_att;

Table dropped.

Elapsed: 00:00:00.04
10:08:28 SQL> CREATE TABLE cad_att COMPRESS AS
10:08:28   2  SELECT
10:08:28   3  ydate
10:08:28   4  ,att00 cad_att00
10:08:28   5  ,att01 cad_att01
10:08:28   6  ,att02 cad_att02
10:08:28   7  ,att03 cad_att03
10:08:28   8  ,att04 cad_att04
10:08:28   9  ,att05 cad_att05
10:08:28  10  ,att06 cad_att06
10:08:28  11  ,att07 cad_att07
10:08:28  12  ,att08 cad_att08
10:08:28  13  ,att09 cad_att09
10:08:28  14  ,att10 cad_att10
10:08:28  15  ,att11 cad_att11
10:08:28  16  ,att12 cad_att12
10:08:28  17  ,att13 cad_att13
10:08:28  18  ,att14 cad_att14
10:08:28  19  ,att15 cad_att15
10:08:28  20  ,att16 cad_att16
10:08:28  21  ,att17 cad_att17
10:08:28  22  ,att18 cad_att18
10:08:28  23  ,att19 cad_att19
10:08:28  24  ,att20 cad_att20
10:08:28  25  ,att21 cad_att21
10:08:28  26  ,att22 cad_att22
10:08:28  27  ,att23 cad_att23
10:08:28  28  ,att24 cad_att24
10:08:28  29  ,att25 cad_att25
10:08:28  30  ,att26 cad_att26
10:08:28  31  ,att27 cad_att27
10:08:28  32  ,att28 cad_att28
10:08:28  33  ,att29 cad_att29
10:08:28  34  ,att30 cad_att30
10:08:28  35  ,att31 cad_att31
10:08:28  36  ,att32 cad_att32
10:08:28  37  ,att33 cad_att33
10:08:28  38  ,att34 cad_att34
10:08:28  39  ,att35 cad_att35
10:08:28  40  ,att36 cad_att36
10:08:28  41  ,att37 cad_att37
10:08:28  42  FROM svm6162
10:08:28  43  /

Table created.

Elapsed: 00:00:00.17
10:08:28 SQL> 
10:08:28 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.50
10:08:29 SQL> 
10:08:29 SQL> -- rpt
10:08:29 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19809

Elapsed: 00:00:00.84
10:08:30 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
     19809

Elapsed: 00:00:00.00
10:08:30 SQL> 
10:08:30 SQL> --
10:08:30 SQL> -- chf610.sql
10:08:30 SQL> --
10:08:30 SQL> 
10:08:30 SQL> -- Creates views and tables for backtesting a forex SVM strategy
10:08:30 SQL> 
10:08:30 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:01.01
10:08:31 SQL> 
10:08:31 SQL> -- I created di5min here:
10:08:31 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
10:08:31 SQL> 
10:08:31 SQL> CREATE OR REPLACE VIEW svm6102 AS
10:08:31   2  SELECT
10:08:31   3  pair
10:08:31   4  ,ydate
10:08:31   5  ,prdate
10:08:31   6  ,rownum rnum -- acts as t in my time-series
10:08:31   7  ,clse
10:08:31   8  -- Derive a bunch of attributes from clse, the latest price:
10:08:31   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
10:08:31  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
10:08:31  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
10:08:31  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
10:08:31  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
10:08:31  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
10:08:31  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
10:08:31  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
10:08:31  17  --
10:08:31  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
10:08:31  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
10:08:31  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
10:08:31  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
10:08:31  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
10:08:31  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
10:08:31  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
10:08:31  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
10:08:31  26  --
10:08:31  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
10:08:31  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
10:08:31  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
10:08:31  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
10:08:31  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
10:08:31  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
10:08:31  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
10:08:31  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
10:08:31  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
10:08:31  36  FROM di5min WHERE pair LIKE'%chf%'
10:08:31  37  AND ydate > sysdate - 95
10:08:31  38  ORDER BY ydate
10:08:31  39  /

View created.

Elapsed: 00:00:00.05
10:08:31 SQL> 
10:08:31 SQL> -- rpt
10:08:31 SQL> 
10:08:31 SQL> SELECT
10:08:31   2  pair
10:08:31   3  ,COUNT(pair)
10:08:31   4  ,MIN(clse),MAX(clse)
10:08:31   5  ,MIN(avg6),MAX(avg6)
10:08:31   6  ,MIN(ydate),MAX(ydate)
10:08:31   7  FROM svm6102
10:08:31   8  GROUP BY pair
10:08:31   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_chf       19812    .931675	  1.00635 .933257705 1.00498151 2010-10-04 10:10:01 2011-01-07 10:05:00

Elapsed: 00:00:00.89
10:08:32 SQL> 
10:08:32 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
10:08:32 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.23
10:08:32 SQL> CREATE TABLE svm6122 COMPRESS AS
10:08:32   2  SELECT
10:08:32   3  pair
10:08:32   4  ,ydate
10:08:32   5  ,prdate
10:08:32   6  ,clse
10:08:32   7  -- g6 is important. I want to predict g6:
10:08:32   8  ,ld6 - clse g6
10:08:32   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
10:08:32  10  -- I want more attributes from the ones I derived above:
10:08:32  11  -- clse relation to moving-min
10:08:32  12  ,clse-min4  cm4
10:08:32  13  ,clse-min6  cm6
10:08:32  14  ,clse-min8  cm8
10:08:32  15  ,clse-min10 cm10
10:08:32  16  ,clse-min12 cm12
10:08:32  17  ,clse-min14 cm14
10:08:32  18  ,clse-min16 cm16
10:08:32  19  ,clse-min18 cm18
10:08:32  20  -- clse relation to moving-avg
10:08:32  21  ,clse-avg4  ca4
10:08:32  22  ,clse-avg6  ca6
10:08:32  23  ,clse-avg8  ca8
10:08:32  24  ,clse-avg10 ca10
10:08:32  25  ,clse-avg12 ca12
10:08:32  26  ,clse-avg14 ca14
10:08:32  27  ,clse-avg16 ca16
10:08:32  28  ,clse-avg18 ca18
10:08:32  29  -- clse relation to moving-max
10:08:32  30  ,clse-max4  cx4
10:08:32  31  ,clse-max6  cx6
10:08:32  32  ,clse-max8  cx8
10:08:32  33  ,clse-max10 cx10
10:08:32  34  ,clse-max12 cx12
10:08:32  35  ,clse-max14 cx14
10:08:32  36  ,clse-max16 cx16
10:08:32  37  ,clse-max18 cx18
10:08:32  38  -- Derive more attributes.
10:08:32  39  -- I want to use CORR() here to help SVM see the shape of the series.
10:08:32  40  -- But COVAR_POP is more stable:
10:08:32  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
10:08:32  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
10:08:32  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
10:08:32  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
10:08:32  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
10:08:32  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
10:08:32  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
10:08:32  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
10:08:32  49  -- Derive date related attributes:
10:08:32  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
10:08:32  51  ,0+TO_CHAR(ydate,'D')d
10:08:32  52  ,0+TO_CHAR(ydate,'W')w
10:08:32  53  -- mpm stands for minutes-past-midnight:
10:08:32  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
10:08:32  55  -- mph stands for minutes-past-hour:
10:08:32  56  ,0+TO_CHAR(ydate,'MI')mph
10:08:32  57  FROM svm6102
10:08:32  58  ORDER BY ydate
10:08:32  59  /

Table created.

Elapsed: 00:00:02.09
10:08:34 SQL> 
10:08:34 SQL> -- rpt
10:08:34 SQL> 
10:08:34 SQL> SELECT
10:08:34   2  pair
10:08:34   3  ,COUNT(pair)
10:08:34   4  ,MIN(clse),MAX(clse)
10:08:34   5  ,MIN(ydate),MAX(ydate)
10:08:34   6  FROM svm6122
10:08:34   7  GROUP BY pair
10:08:34   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_chf       19812    .931675	  1.00635 2010-10-04 10:10:01 2011-01-07 10:05:00

Elapsed: 00:00:00.04
10:08:34 SQL> 
10:08:34 SQL> -- Prepare for derivation of NTILE based params:
10:08:34 SQL> 
10:08:34 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.29
10:08:34 SQL> CREATE TABLE svm6142 COMPRESS AS
10:08:34   2  SELECT
10:08:34   3  pair
10:08:34   4  ,ydate
10:08:34   5  ,prdate
10:08:34   6  ,clse
10:08:34   7  ,g6
10:08:34   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
10:08:34   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
10:08:34  10  ,CASE WHEN trend IS NULL THEN 1
10:08:34  11  	    WHEN trend =0      THEN 1
10:08:34  12  	    ELSE trend END trend
10:08:34  13  ,cm4
10:08:34  14  ,cm6
10:08:34  15  ,cm8
10:08:34  16  ,cm10
10:08:34  17  ,cm12
10:08:34  18  ,cm14
10:08:34  19  ,cm16
10:08:34  20  ,cm18
10:08:34  21  --
10:08:34  22  ,ca4
10:08:34  23  ,ca6
10:08:34  24  ,ca8
10:08:34  25  ,ca10
10:08:34  26  ,ca12
10:08:34  27  ,ca14
10:08:34  28  ,ca16
10:08:34  29  ,ca18
10:08:34  30  --
10:08:34  31  ,cx4
10:08:34  32  ,cx6
10:08:34  33  ,cx8
10:08:34  34  ,cx10
10:08:34  35  ,cx12
10:08:34  36  ,cx14
10:08:34  37  ,cx16
10:08:34  38  ,cx18
10:08:34  39  --
10:08:34  40  ,crr4
10:08:34  41  ,crr6
10:08:34  42  ,crr8
10:08:34  43  ,crr10
10:08:34  44  ,crr12
10:08:34  45  ,crr14
10:08:34  46  ,crr16
10:08:34  47  ,crr18
10:08:34  48  --
10:08:34  49  ,hh
10:08:34  50  ,d
10:08:34  51  ,w
10:08:34  52  ,mpm
10:08:34  53  ,mph
10:08:34  54  FROM svm6122
10:08:34  55  ORDER BY ydate
10:08:34  56  /

Table created.

Elapsed: 00:00:00.39
10:08:35 SQL> 
10:08:35 SQL> -- rpt
10:08:35 SQL> 
10:08:35 SQL> SELECT
10:08:35   2  pair
10:08:35   3  ,trend
10:08:35   4  ,gatt
10:08:35   5  ,COUNT(pair)
10:08:35   6  ,AVG(g6)
10:08:35   7  FROM svm6142
10:08:35   8  GROUP BY pair,trend,gatt
10:08:35   9  ORDER BY pair,trend,gatt
10:08:35  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7103 -.00197284
usd_chf 	-1 up	      3086 .003809605
usd_chf 	-1		36
usd_chf 	 1 nup	      6605 -.00151146
usd_chf 	 1 up	      2946 .003958819
usd_chf 	 1		36

6 rows selected.

Elapsed: 00:00:00.04
10:08:35 SQL> 
10:08:35 SQL> 
10:08:35 SQL> -- Derive NTILE based params:
10:08:35 SQL> 
10:08:35 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.21
10:08:35 SQL> CREATE TABLE svm6162 COMPRESS AS
10:08:35   2  SELECT
10:08:35   3  pair
10:08:35   4  ,ydate
10:08:35   5  ,prdate
10:08:35   6  ,clse
10:08:35   7  ,g6
10:08:35   8  ,gatt
10:08:35   9  ,gattn
10:08:35  10  ,trend
10:08:35  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
10:08:35  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
10:08:35  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
10:08:35  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
10:08:35  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
10:08:35  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
10:08:35  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
10:08:35  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
10:08:35  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
10:08:35  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
10:08:35  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
10:08:35  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
10:08:35  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
10:08:35  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
10:08:35  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
10:08:35  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
10:08:35  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
10:08:35  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
10:08:35  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
10:08:35  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
10:08:35  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
10:08:35  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
10:08:35  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
10:08:35  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
10:08:35  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
10:08:35  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
10:08:35  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
10:08:35  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
10:08:35  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
10:08:35  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
10:08:35  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
10:08:35  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
10:08:35  43  ,hh  att32
10:08:35  44  ,d   att33
10:08:35  45  ,w   att34
10:08:35  46  ,mpm att35
10:08:35  47  ,mph att36
10:08:35  48  ,trend att37
10:08:35  49  FROM svm6142
10:08:35  50  ORDER BY ydate
10:08:35  51  /

Table created.

Elapsed: 00:00:04.88
10:08:40 SQL> 
10:08:40 SQL> -- rpt
10:08:40 SQL> 
10:08:40 SQL> SELECT
10:08:40   2  pair
10:08:40   3  ,trend
10:08:40   4  ,gatt
10:08:40   5  ,COUNT(pair)
10:08:40   6  ,AVG(g6)
10:08:40   7  FROM svm6162
10:08:40   8  GROUP BY pair,trend,gatt
10:08:40   9  ORDER BY pair,trend,gatt
10:08:40  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7103 -.00197284
usd_chf 	-1 up	      3086 .003809605
usd_chf 	-1		36
usd_chf 	 1 nup	      6605 -.00151146
usd_chf 	 1 up	      2946 .003958819
usd_chf 	 1		36

6 rows selected.

Elapsed: 00:00:00.03
10:08:40 SQL> 
10:08:40 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.26
10:08:40 SQL> CREATE TABLE modsrc COMPRESS AS
10:08:40   2  SELECT
10:08:40   3  pair
10:08:40   4  ,ydate
10:08:40   5  ,prdate
10:08:40   6  ,trend
10:08:40   7  ,g6
10:08:40   8  ,gatt
10:08:40   9  ,gattn
10:08:40  10  FROM svm6162
10:08:40  11  /

Table created.

Elapsed: 00:00:00.09
10:08:40 SQL> 
10:08:40 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.29
10:08:41 SQL> 
10:08:41 SQL> DROP   TABLE chf_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
10:08:41 SQL> CREATE TABLE chf_ms610 COMPRESS AS
10:08:41   2  SELECT
10:08:41   3  ydate
10:08:41   4  ,trend chf_trend
10:08:41   5  ,g6    chf_g6
10:08:41   6  ,gatt  chf_gatt
10:08:41   7  ,gattn chf_gattn
10:08:41   8  FROM modsrc
10:08:41   9  /

Table created.

Elapsed: 00:00:00.07
10:08:41 SQL> 
10:08:41 SQL> ANALYZE TABLE chf_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
10:08:41 SQL> 
10:08:41 SQL> -- I need a copy of the attributes:
10:08:41 SQL> 
10:08:41 SQL> 
10:08:41 SQL> DROP   TABLE chf_att;

Table dropped.

Elapsed: 00:00:00.16
10:08:41 SQL> CREATE TABLE chf_att COMPRESS AS
10:08:41   2  SELECT
10:08:41   3  ydate
10:08:41   4  ,att00 chf_att00
10:08:41   5  ,att01 chf_att01
10:08:41   6  ,att02 chf_att02
10:08:41   7  ,att03 chf_att03
10:08:41   8  ,att04 chf_att04
10:08:41   9  ,att05 chf_att05
10:08:41  10  ,att06 chf_att06
10:08:41  11  ,att07 chf_att07
10:08:41  12  ,att08 chf_att08
10:08:41  13  ,att09 chf_att09
10:08:41  14  ,att10 chf_att10
10:08:41  15  ,att11 chf_att11
10:08:41  16  ,att12 chf_att12
10:08:41  17  ,att13 chf_att13
10:08:41  18  ,att14 chf_att14
10:08:41  19  ,att15 chf_att15
10:08:41  20  ,att16 chf_att16
10:08:41  21  ,att17 chf_att17
10:08:41  22  ,att18 chf_att18
10:08:41  23  ,att19 chf_att19
10:08:41  24  ,att20 chf_att20
10:08:41  25  ,att21 chf_att21
10:08:41  26  ,att22 chf_att22
10:08:41  27  ,att23 chf_att23
10:08:41  28  ,att24 chf_att24
10:08:41  29  ,att25 chf_att25
10:08:41  30  ,att26 chf_att26
10:08:41  31  ,att27 chf_att27
10:08:41  32  ,att28 chf_att28
10:08:41  33  ,att29 chf_att29
10:08:41  34  ,att30 chf_att30
10:08:41  35  ,att31 chf_att31
10:08:41  36  ,att32 chf_att32
10:08:41  37  ,att33 chf_att33
10:08:41  38  ,att34 chf_att34
10:08:41  39  ,att35 chf_att35
10:08:41  40  ,att36 chf_att36
10:08:41  41  ,att37 chf_att37
10:08:41  42  FROM svm6162
10:08:41  43  /

Table created.

Elapsed: 00:00:00.18
10:08:41 SQL> 
10:08:41 SQL> ANALYZE TABLE chf_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.44
10:08:42 SQL> 
10:08:42 SQL> -- rpt
10:08:42 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19812

Elapsed: 00:00:00.86
10:08:42 SQL> SELECT COUNT(*)FROM chf_att;

  COUNT(*)
----------
     19812

Elapsed: 00:00:00.00
10:08:42 SQL> 
10:08:42 SQL> --
10:08:42 SQL> -- ech610.sql
10:08:42 SQL> --
10:08:42 SQL> 
10:08:42 SQL> -- Creates views and tables for backtesting a forex SVM strategy
10:08:42 SQL> 
10:08:42 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.60
10:08:43 SQL> 
10:08:43 SQL> -- I created di5min here:
10:08:43 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
10:08:43 SQL> 
10:08:43 SQL> CREATE OR REPLACE VIEW svm6102 AS
10:08:43   2  SELECT
10:08:43   3  pair
10:08:43   4  ,ydate
10:08:43   5  ,prdate
10:08:43   6  ,rownum rnum -- acts as t in my time-series
10:08:43   7  ,clse
10:08:43   8  -- Derive a bunch of attributes from clse, the latest price:
10:08:43   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
10:08:43  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
10:08:43  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
10:08:43  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
10:08:43  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
10:08:43  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
10:08:43  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
10:08:43  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
10:08:43  17  --
10:08:43  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
10:08:43  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
10:08:43  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
10:08:43  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
10:08:43  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
10:08:43  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
10:08:43  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
10:08:43  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
10:08:43  26  --
10:08:43  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
10:08:43  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
10:08:43  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
10:08:43  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
10:08:43  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
10:08:43  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
10:08:43  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
10:08:43  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
10:08:43  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
10:08:43  36  FROM di5min WHERE pair LIKE'%ech%'
10:08:43  37  AND ydate > sysdate - 95
10:08:43  38  ORDER BY ydate
10:08:43  39  /

View created.

Elapsed: 00:00:00.05
10:08:43 SQL> 
10:08:43 SQL> -- rpt
10:08:43 SQL> 
10:08:43 SQL> SELECT
10:08:43   2  pair
10:08:43   3  ,COUNT(pair)
10:08:43   4  ,MIN(clse),MAX(clse)
10:08:43   5  ,MIN(avg6),MAX(avg6)
10:08:43   6  ,MIN(ydate),MAX(ydate)
10:08:43   7  FROM svm6102
10:08:43   8  GROUP BY pair
10:08:43   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ech_usd       19809 1.24182424 1.38284305 1.24320711 1.37986485 2010-10-04 10:10:01 2011-01-07 10:00:00

Elapsed: 00:00:00.82
10:08:44 SQL> 
10:08:44 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
10:08:44 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.20
10:08:44 SQL> CREATE TABLE svm6122 COMPRESS AS
10:08:44   2  SELECT
10:08:44   3  pair
10:08:44   4  ,ydate
10:08:44   5  ,prdate
10:08:44   6  ,clse
10:08:44   7  -- g6 is important. I want to predict g6:
10:08:44   8  ,ld6 - clse g6
10:08:44   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
10:08:44  10  -- I want more attributes from the ones I derived above:
10:08:44  11  -- clse relation to moving-min
10:08:44  12  ,clse-min4  cm4
10:08:44  13  ,clse-min6  cm6
10:08:44  14  ,clse-min8  cm8
10:08:44  15  ,clse-min10 cm10
10:08:44  16  ,clse-min12 cm12
10:08:44  17  ,clse-min14 cm14
10:08:44  18  ,clse-min16 cm16
10:08:44  19  ,clse-min18 cm18
10:08:44  20  -- clse relation to moving-avg
10:08:44  21  ,clse-avg4  ca4
10:08:44  22  ,clse-avg6  ca6
10:08:44  23  ,clse-avg8  ca8
10:08:44  24  ,clse-avg10 ca10
10:08:44  25  ,clse-avg12 ca12
10:08:44  26  ,clse-avg14 ca14
10:08:44  27  ,clse-avg16 ca16
10:08:44  28  ,clse-avg18 ca18
10:08:44  29  -- clse relation to moving-max
10:08:44  30  ,clse-max4  cx4
10:08:44  31  ,clse-max6  cx6
10:08:44  32  ,clse-max8  cx8
10:08:44  33  ,clse-max10 cx10
10:08:44  34  ,clse-max12 cx12
10:08:44  35  ,clse-max14 cx14
10:08:44  36  ,clse-max16 cx16
10:08:44  37  ,clse-max18 cx18
10:08:44  38  -- Derive more attributes.
10:08:44  39  -- I want to use CORR() here to help SVM see the shape of the series.
10:08:44  40  -- But COVAR_POP is more stable:
10:08:44  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
10:08:44  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
10:08:44  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
10:08:44  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
10:08:44  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
10:08:44  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
10:08:44  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
10:08:44  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
10:08:44  49  -- Derive date related attributes:
10:08:44  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
10:08:44  51  ,0+TO_CHAR(ydate,'D')d
10:08:44  52  ,0+TO_CHAR(ydate,'W')w
10:08:44  53  -- mpm stands for minutes-past-midnight:
10:08:44  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
10:08:44  55  -- mph stands for minutes-past-hour:
10:08:44  56  ,0+TO_CHAR(ydate,'MI')mph
10:08:44  57  FROM svm6102
10:08:44  58  ORDER BY ydate
10:08:44  59  /

Table created.

Elapsed: 00:00:03.13
10:08:47 SQL> 
10:08:47 SQL> -- rpt
10:08:47 SQL> 
10:08:47 SQL> SELECT
10:08:47   2  pair
10:08:47   3  ,COUNT(pair)
10:08:47   4  ,MIN(clse),MAX(clse)
10:08:47   5  ,MIN(ydate),MAX(ydate)
10:08:47   6  FROM svm6122
10:08:47   7  GROUP BY pair
10:08:47   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ech_usd       19809 1.24182424 1.38284305 2010-10-04 10:10:01 2011-01-07 10:00:00

Elapsed: 00:00:00.04
10:08:47 SQL> 
10:08:47 SQL> -- Prepare for derivation of NTILE based params:
10:08:47 SQL> 
10:08:47 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.45
10:08:48 SQL> CREATE TABLE svm6142 COMPRESS AS
10:08:48   2  SELECT
10:08:48   3  pair
10:08:48   4  ,ydate
10:08:48   5  ,prdate
10:08:48   6  ,clse
10:08:48   7  ,g6
10:08:48   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
10:08:48   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
10:08:48  10  ,CASE WHEN trend IS NULL THEN 1
10:08:48  11  	    WHEN trend =0      THEN 1
10:08:48  12  	    ELSE trend END trend
10:08:48  13  ,cm4
10:08:48  14  ,cm6
10:08:48  15  ,cm8
10:08:48  16  ,cm10
10:08:48  17  ,cm12
10:08:48  18  ,cm14
10:08:48  19  ,cm16
10:08:48  20  ,cm18
10:08:48  21  --
10:08:48  22  ,ca4
10:08:48  23  ,ca6
10:08:48  24  ,ca8
10:08:48  25  ,ca10
10:08:48  26  ,ca12
10:08:48  27  ,ca14
10:08:48  28  ,ca16
10:08:48  29  ,ca18
10:08:48  30  --
10:08:48  31  ,cx4
10:08:48  32  ,cx6
10:08:48  33  ,cx8
10:08:48  34  ,cx10
10:08:48  35  ,cx12
10:08:48  36  ,cx14
10:08:48  37  ,cx16
10:08:48  38  ,cx18
10:08:48  39  --
10:08:48  40  ,crr4
10:08:48  41  ,crr6
10:08:48  42  ,crr8
10:08:48  43  ,crr10
10:08:48  44  ,crr12
10:08:48  45  ,crr14
10:08:48  46  ,crr16
10:08:48  47  ,crr18
10:08:48  48  --
10:08:48  49  ,hh
10:08:48  50  ,d
10:08:48  51  ,w
10:08:48  52  ,mpm
10:08:48  53  ,mph
10:08:48  54  FROM svm6122
10:08:48  55  ORDER BY ydate
10:08:48  56  /

Table created.

Elapsed: 00:00:00.42
10:08:48 SQL> 
10:08:48 SQL> -- rpt
10:08:48 SQL> 
10:08:48 SQL> SELECT
10:08:48   2  pair
10:08:48   3  ,trend
10:08:48   4  ,gatt
10:08:48   5  ,COUNT(pair)
10:08:48   6  ,AVG(g6)
10:08:48   7  FROM svm6142
10:08:48   8  GROUP BY pair,trend,gatt
10:08:48   9  ORDER BY pair,trend,gatt
10:08:48  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6817 -.00228532
ech_usd 	-1 up	      3567 .003580667
ech_usd 	-1		60
ech_usd 	 1 nup	      6448 -.00231039
ech_usd 	 1 up	      2905 .004122708
ech_usd 	 1		12

6 rows selected.

Elapsed: 00:00:00.04
10:08:48 SQL> 
10:08:48 SQL> 
10:08:48 SQL> -- Derive NTILE based params:
10:08:48 SQL> 
10:08:48 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.22
10:08:48 SQL> CREATE TABLE svm6162 COMPRESS AS
10:08:48   2  SELECT
10:08:48   3  pair
10:08:48   4  ,ydate
10:08:48   5  ,prdate
10:08:48   6  ,clse
10:08:48   7  ,g6
10:08:48   8  ,gatt
10:08:48   9  ,gattn
10:08:48  10  ,trend
10:08:48  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
10:08:48  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
10:08:48  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
10:08:48  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
10:08:48  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
10:08:48  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
10:08:48  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
10:08:48  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
10:08:48  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
10:08:48  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
10:08:48  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
10:08:48  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
10:08:48  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
10:08:48  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
10:08:48  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
10:08:48  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
10:08:48  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
10:08:48  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
10:08:48  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
10:08:48  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
10:08:48  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
10:08:48  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
10:08:48  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
10:08:48  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
10:08:48  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
10:08:48  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
10:08:48  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
10:08:48  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
10:08:48  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
10:08:48  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
10:08:48  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
10:08:48  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
10:08:48  43  ,hh  att32
10:08:48  44  ,d   att33
10:08:48  45  ,w   att34
10:08:48  46  ,mpm att35
10:08:48  47  ,mph att36
10:08:48  48  ,trend att37
10:08:48  49  FROM svm6142
10:08:48  50  ORDER BY ydate
10:08:48  51  /

Table created.

Elapsed: 00:00:05.11
10:08:54 SQL> 
10:08:54 SQL> -- rpt
10:08:54 SQL> 
10:08:54 SQL> SELECT
10:08:54   2  pair
10:08:54   3  ,trend
10:08:54   4  ,gatt
10:08:54   5  ,COUNT(pair)
10:08:54   6  ,AVG(g6)
10:08:54   7  FROM svm6162
10:08:54   8  GROUP BY pair,trend,gatt
10:08:54   9  ORDER BY pair,trend,gatt
10:08:54  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6817 -.00228532
ech_usd 	-1 up	      3567 .003580667
ech_usd 	-1		60
ech_usd 	 1 nup	      6448 -.00231039
ech_usd 	 1 up	      2905 .004122708
ech_usd 	 1		12

6 rows selected.

Elapsed: 00:00:00.03
10:08:54 SQL> 
10:08:54 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.24
10:08:54 SQL> CREATE TABLE modsrc COMPRESS AS
10:08:54   2  SELECT
10:08:54   3  pair
10:08:54   4  ,ydate
10:08:54   5  ,prdate
10:08:54   6  ,trend
10:08:54   7  ,g6
10:08:54   8  ,gatt
10:08:54   9  ,gattn
10:08:54  10  FROM svm6162
10:08:54  11  /

Table created.

Elapsed: 00:00:00.09
10:08:54 SQL> 
10:08:54 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
10:08:54 SQL> 
10:08:54 SQL> DROP   TABLE ech_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
10:08:54 SQL> CREATE TABLE ech_ms610 COMPRESS AS
10:08:54   2  SELECT
10:08:54   3  ydate
10:08:54   4  ,trend ech_trend
10:08:54   5  ,g6    ech_g6
10:08:54   6  ,gatt  ech_gatt
10:08:54   7  ,gattn ech_gattn
10:08:54   8  FROM modsrc
10:08:54   9  /

Table created.

Elapsed: 00:00:00.07
10:08:54 SQL> 
10:08:54 SQL> ANALYZE TABLE ech_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
10:08:54 SQL> 
10:08:54 SQL> -- I need a copy of the attributes:
10:08:54 SQL> 
10:08:54 SQL> 
10:08:54 SQL> DROP   TABLE ech_att;

Table dropped.

Elapsed: 00:00:00.04
10:08:54 SQL> CREATE TABLE ech_att COMPRESS AS
10:08:54   2  SELECT
10:08:54   3  ydate
10:08:54   4  ,att00 ech_att00
10:08:54   5  ,att01 ech_att01
10:08:54   6  ,att02 ech_att02
10:08:54   7  ,att03 ech_att03
10:08:54   8  ,att04 ech_att04
10:08:54   9  ,att05 ech_att05
10:08:54  10  ,att06 ech_att06
10:08:54  11  ,att07 ech_att07
10:08:54  12  ,att08 ech_att08
10:08:54  13  ,att09 ech_att09
10:08:54  14  ,att10 ech_att10
10:08:54  15  ,att11 ech_att11
10:08:54  16  ,att12 ech_att12
10:08:54  17  ,att13 ech_att13
10:08:54  18  ,att14 ech_att14
10:08:54  19  ,att15 ech_att15
10:08:54  20  ,att16 ech_att16
10:08:54  21  ,att17 ech_att17
10:08:54  22  ,att18 ech_att18
10:08:54  23  ,att19 ech_att19
10:08:54  24  ,att20 ech_att20
10:08:54  25  ,att21 ech_att21
10:08:54  26  ,att22 ech_att22
10:08:54  27  ,att23 ech_att23
10:08:54  28  ,att24 ech_att24
10:08:54  29  ,att25 ech_att25
10:08:54  30  ,att26 ech_att26
10:08:54  31  ,att27 ech_att27
10:08:54  32  ,att28 ech_att28
10:08:54  33  ,att29 ech_att29
10:08:54  34  ,att30 ech_att30
10:08:54  35  ,att31 ech_att31
10:08:54  36  ,att32 ech_att32
10:08:54  37  ,att33 ech_att33
10:08:54  38  ,att34 ech_att34
10:08:54  39  ,att35 ech_att35
10:08:54  40  ,att36 ech_att36
10:08:54  41  ,att37 ech_att37
10:08:54  42  FROM svm6162
10:08:54  43  /

Table created.

Elapsed: 00:00:00.21
10:08:55 SQL> 
10:08:55 SQL> ANALYZE TABLE ech_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.48
10:08:55 SQL> 
10:08:55 SQL> -- rpt
10:08:55 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19809

Elapsed: 00:00:00.83
10:08:56 SQL> SELECT COUNT(*)FROM ech_att;

  COUNT(*)
----------
     19809

Elapsed: 00:00:00.00
10:08:56 SQL> 
10:08:56 SQL> --
10:08:56 SQL> -- egb610.sql
10:08:56 SQL> --
10:08:56 SQL> 
10:08:56 SQL> -- Creates views and tables for backtesting a forex SVM strategy
10:08:56 SQL> 
10:08:56 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.66
10:08:57 SQL> 
10:08:57 SQL> -- I created di5min here:
10:08:57 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
10:08:57 SQL> 
10:08:57 SQL> CREATE OR REPLACE VIEW svm6102 AS
10:08:57   2  SELECT
10:08:57   3  pair
10:08:57   4  ,ydate
10:08:57   5  ,prdate
10:08:57   6  ,rownum rnum -- acts as t in my time-series
10:08:57   7  ,clse
10:08:57   8  -- Derive a bunch of attributes from clse, the latest price:
10:08:57   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
10:08:57  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
10:08:57  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
10:08:57  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
10:08:57  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
10:08:57  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
10:08:57  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
10:08:57  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
10:08:57  17  --
10:08:57  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
10:08:57  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
10:08:57  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
10:08:57  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
10:08:57  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
10:08:57  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
10:08:57  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
10:08:57  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
10:08:57  26  --
10:08:57  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
10:08:57  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
10:08:57  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
10:08:57  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
10:08:57  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
10:08:57  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
10:08:57  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
10:08:57  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
10:08:57  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
10:08:57  36  FROM di5min WHERE pair LIKE'%egb%'
10:08:57  37  AND ydate > sysdate - 95
10:08:57  38  ORDER BY ydate
10:08:57  39  /

View created.

Elapsed: 00:00:00.05
10:08:57 SQL> 
10:08:57 SQL> -- rpt
10:08:57 SQL> 
10:08:57 SQL> SELECT
10:08:57   2  pair
10:08:57   3  ,COUNT(pair)
10:08:57   4  ,MIN(clse),MAX(clse)
10:08:57   5  ,MIN(avg6),MAX(avg6)
10:08:57   6  ,MIN(ydate),MAX(ydate)
10:08:57   7  FROM svm6102
10:08:57   8  GROUP BY pair
10:08:57   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
egb_usd       19808 .833520557 .893920122 .834199029 .892400287 2010-10-04 10:10:01 2011-01-07 10:00:00

Elapsed: 00:00:00.94
10:08:58 SQL> 
10:08:58 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
10:08:58 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.31
10:08:58 SQL> CREATE TABLE svm6122 COMPRESS AS
10:08:58   2  SELECT
10:08:58   3  pair
10:08:58   4  ,ydate
10:08:58   5  ,prdate
10:08:58   6  ,clse
10:08:58   7  -- g6 is important. I want to predict g6:
10:08:58   8  ,ld6 - clse g6
10:08:58   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
10:08:58  10  -- I want more attributes from the ones I derived above:
10:08:58  11  -- clse relation to moving-min
10:08:58  12  ,clse-min4  cm4
10:08:58  13  ,clse-min6  cm6
10:08:58  14  ,clse-min8  cm8
10:08:58  15  ,clse-min10 cm10
10:08:58  16  ,clse-min12 cm12
10:08:58  17  ,clse-min14 cm14
10:08:58  18  ,clse-min16 cm16
10:08:58  19  ,clse-min18 cm18
10:08:58  20  -- clse relation to moving-avg
10:08:58  21  ,clse-avg4  ca4
10:08:58  22  ,clse-avg6  ca6
10:08:58  23  ,clse-avg8  ca8
10:08:58  24  ,clse-avg10 ca10
10:08:58  25  ,clse-avg12 ca12
10:08:58  26  ,clse-avg14 ca14
10:08:58  27  ,clse-avg16 ca16
10:08:58  28  ,clse-avg18 ca18
10:08:58  29  -- clse relation to moving-max
10:08:58  30  ,clse-max4  cx4
10:08:58  31  ,clse-max6  cx6
10:08:58  32  ,clse-max8  cx8
10:08:58  33  ,clse-max10 cx10
10:08:58  34  ,clse-max12 cx12
10:08:58  35  ,clse-max14 cx14
10:08:58  36  ,clse-max16 cx16
10:08:58  37  ,clse-max18 cx18
10:08:58  38  -- Derive more attributes.
10:08:58  39  -- I want to use CORR() here to help SVM see the shape of the series.
10:08:58  40  -- But COVAR_POP is more stable:
10:08:58  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
10:08:58  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
10:08:58  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
10:08:58  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
10:08:58  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
10:08:58  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
10:08:58  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
10:08:58  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
10:08:58  49  -- Derive date related attributes:
10:08:58  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
10:08:58  51  ,0+TO_CHAR(ydate,'D')d
10:08:58  52  ,0+TO_CHAR(ydate,'W')w
10:08:58  53  -- mpm stands for minutes-past-midnight:
10:08:58  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
10:08:58  55  -- mph stands for minutes-past-hour:
10:08:58  56  ,0+TO_CHAR(ydate,'MI')mph
10:08:58  57  FROM svm6102
10:08:58  58  ORDER BY ydate
10:08:58  59  /

Table created.

Elapsed: 00:00:02.56
10:09:00 SQL> 
10:09:00 SQL> -- rpt
10:09:00 SQL> 
10:09:00 SQL> SELECT
10:09:00   2  pair
10:09:00   3  ,COUNT(pair)
10:09:00   4  ,MIN(clse),MAX(clse)
10:09:00   5  ,MIN(ydate),MAX(ydate)
10:09:00   6  FROM svm6122
10:09:00   7  GROUP BY pair
10:09:00   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
egb_usd       19808 .833520557 .893920122 2010-10-04 10:10:01 2011-01-07 10:00:00

Elapsed: 00:00:00.04
10:09:01 SQL> 
10:09:01 SQL> -- Prepare for derivation of NTILE based params:
10:09:01 SQL> 
10:09:01 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.72
10:09:01 SQL> CREATE TABLE svm6142 COMPRESS AS
10:09:01   2  SELECT
10:09:01   3  pair
10:09:01   4  ,ydate
10:09:01   5  ,prdate
10:09:01   6  ,clse
10:09:01   7  ,g6
10:09:01   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
10:09:01   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
10:09:01  10  ,CASE WHEN trend IS NULL THEN 1
10:09:01  11  	    WHEN trend =0      THEN 1
10:09:01  12  	    ELSE trend END trend
10:09:01  13  ,cm4
10:09:01  14  ,cm6
10:09:01  15  ,cm8
10:09:01  16  ,cm10
10:09:01  17  ,cm12
10:09:01  18  ,cm14
10:09:01  19  ,cm16
10:09:01  20  ,cm18
10:09:01  21  --
10:09:01  22  ,ca4
10:09:01  23  ,ca6
10:09:01  24  ,ca8
10:09:01  25  ,ca10
10:09:01  26  ,ca12
10:09:01  27  ,ca14
10:09:01  28  ,ca16
10:09:01  29  ,ca18
10:09:01  30  --
10:09:01  31  ,cx4
10:09:01  32  ,cx6
10:09:01  33  ,cx8
10:09:01  34  ,cx10
10:09:01  35  ,cx12
10:09:01  36  ,cx14
10:09:01  37  ,cx16
10:09:01  38  ,cx18
10:09:01  39  --
10:09:01  40  ,crr4
10:09:01  41  ,crr6
10:09:01  42  ,crr8
10:09:01  43  ,crr10
10:09:01  44  ,crr12
10:09:01  45  ,crr14
10:09:01  46  ,crr16
10:09:01  47  ,crr18
10:09:01  48  --
10:09:01  49  ,hh
10:09:01  50  ,d
10:09:01  51  ,w
10:09:01  52  ,mpm
10:09:01  53  ,mph
10:09:01  54  FROM svm6122
10:09:01  55  ORDER BY ydate
10:09:01  56  /

Table created.

Elapsed: 00:00:00.45
10:09:02 SQL> 
10:09:02 SQL> -- rpt
10:09:02 SQL> 
10:09:02 SQL> SELECT
10:09:02   2  pair
10:09:02   3  ,trend
10:09:02   4  ,gatt
10:09:02   5  ,COUNT(pair)
10:09:02   6  ,AVG(g6)
10:09:02   7  FROM svm6142
10:09:02   8  GROUP BY pair,trend,gatt
10:09:02   9  ORDER BY pair,trend,gatt
10:09:02  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7947 -.00103138
egb_usd 	-1 up	      2634 .002928824
egb_usd 	-1		28
egb_usd 	 1 nup	      6536 -.00136109
egb_usd 	 1 up	      2619 .002926948
egb_usd 	 1		44

6 rows selected.

Elapsed: 00:00:00.05
10:09:02 SQL> 
10:09:02 SQL> 
10:09:02 SQL> -- Derive NTILE based params:
10:09:02 SQL> 
10:09:02 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.20
10:09:02 SQL> CREATE TABLE svm6162 COMPRESS AS
10:09:02   2  SELECT
10:09:02   3  pair
10:09:02   4  ,ydate
10:09:02   5  ,prdate
10:09:02   6  ,clse
10:09:02   7  ,g6
10:09:02   8  ,gatt
10:09:02   9  ,gattn
10:09:02  10  ,trend
10:09:02  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
10:09:02  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
10:09:02  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
10:09:02  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
10:09:02  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
10:09:02  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
10:09:02  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
10:09:02  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
10:09:02  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
10:09:02  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
10:09:02  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
10:09:02  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
10:09:02  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
10:09:02  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
10:09:02  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
10:09:02  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
10:09:02  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
10:09:02  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
10:09:02  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
10:09:02  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
10:09:02  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
10:09:02  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
10:09:02  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
10:09:02  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
10:09:02  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
10:09:02  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
10:09:02  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
10:09:02  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
10:09:02  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
10:09:02  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
10:09:02  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
10:09:02  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
10:09:02  43  ,hh  att32
10:09:02  44  ,d   att33
10:09:02  45  ,w   att34
10:09:02  46  ,mpm att35
10:09:02  47  ,mph att36
10:09:02  48  ,trend att37
10:09:02  49  FROM svm6142
10:09:02  50  ORDER BY ydate
10:09:02  51  /

Table created.

Elapsed: 00:00:05.61
10:09:08 SQL> 
10:09:08 SQL> -- rpt
10:09:08 SQL> 
10:09:08 SQL> SELECT
10:09:08   2  pair
10:09:08   3  ,trend
10:09:08   4  ,gatt
10:09:08   5  ,COUNT(pair)
10:09:08   6  ,AVG(g6)
10:09:08   7  FROM svm6162
10:09:08   8  GROUP BY pair,trend,gatt
10:09:08   9  ORDER BY pair,trend,gatt
10:09:08  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7947 -.00103138
egb_usd 	-1 up	      2634 .002928824
egb_usd 	-1		28
egb_usd 	 1 nup	      6536 -.00136109
egb_usd 	 1 up	      2619 .002926948
egb_usd 	 1		44

6 rows selected.

Elapsed: 00:00:00.03
10:09:08 SQL> 
10:09:08 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.21
10:09:08 SQL> CREATE TABLE modsrc COMPRESS AS
10:09:08   2  SELECT
10:09:08   3  pair
10:09:08   4  ,ydate
10:09:08   5  ,prdate
10:09:08   6  ,trend
10:09:08   7  ,g6
10:09:08   8  ,gatt
10:09:08   9  ,gattn
10:09:08  10  FROM svm6162
10:09:08  11  /

Table created.

Elapsed: 00:00:00.09
10:09:08 SQL> 
10:09:08 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.22
10:09:08 SQL> 
10:09:08 SQL> DROP   TABLE egb_ms610 ;

Table dropped.

Elapsed: 00:00:00.14
10:09:08 SQL> CREATE TABLE egb_ms610 COMPRESS AS
10:09:08   2  SELECT
10:09:08   3  ydate
10:09:08   4  ,trend egb_trend
10:09:08   5  ,g6    egb_g6
10:09:08   6  ,gatt  egb_gatt
10:09:08   7  ,gattn egb_gattn
10:09:08   8  FROM modsrc
10:09:08   9  /

Table created.

Elapsed: 00:00:00.07
10:09:08 SQL> 
10:09:08 SQL> ANALYZE TABLE egb_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.28
10:09:09 SQL> 
10:09:09 SQL> -- I need a copy of the attributes:
10:09:09 SQL> 
10:09:09 SQL> 
10:09:09 SQL> DROP   TABLE egb_att;

Table dropped.

Elapsed: 00:00:00.05
10:09:09 SQL> CREATE TABLE egb_att COMPRESS AS
10:09:09   2  SELECT
10:09:09   3  ydate
10:09:09   4  ,att00 egb_att00
10:09:09   5  ,att01 egb_att01
10:09:09   6  ,att02 egb_att02
10:09:09   7  ,att03 egb_att03
10:09:09   8  ,att04 egb_att04
10:09:09   9  ,att05 egb_att05
10:09:09  10  ,att06 egb_att06
10:09:09  11  ,att07 egb_att07
10:09:09  12  ,att08 egb_att08
10:09:09  13  ,att09 egb_att09
10:09:09  14  ,att10 egb_att10
10:09:09  15  ,att11 egb_att11
10:09:09  16  ,att12 egb_att12
10:09:09  17  ,att13 egb_att13
10:09:09  18  ,att14 egb_att14
10:09:09  19  ,att15 egb_att15
10:09:09  20  ,att16 egb_att16
10:09:09  21  ,att17 egb_att17
10:09:09  22  ,att18 egb_att18
10:09:09  23  ,att19 egb_att19
10:09:09  24  ,att20 egb_att20
10:09:09  25  ,att21 egb_att21
10:09:09  26  ,att22 egb_att22
10:09:09  27  ,att23 egb_att23
10:09:09  28  ,att24 egb_att24
10:09:09  29  ,att25 egb_att25
10:09:09  30  ,att26 egb_att26
10:09:09  31  ,att27 egb_att27
10:09:09  32  ,att28 egb_att28
10:09:09  33  ,att29 egb_att29
10:09:09  34  ,att30 egb_att30
10:09:09  35  ,att31 egb_att31
10:09:09  36  ,att32 egb_att32
10:09:09  37  ,att33 egb_att33
10:09:09  38  ,att34 egb_att34
10:09:09  39  ,att35 egb_att35
10:09:09  40  ,att36 egb_att36
10:09:09  41  ,att37 egb_att37
10:09:09  42  FROM svm6162
10:09:09  43  /

Table created.

Elapsed: 00:00:00.18
10:09:09 SQL> 
10:09:09 SQL> ANALYZE TABLE egb_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
10:09:09 SQL> 
10:09:09 SQL> -- rpt
10:09:09 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19808

Elapsed: 00:00:00.97
10:09:10 SQL> SELECT COUNT(*)FROM egb_att;

  COUNT(*)
----------
     19808

Elapsed: 00:00:00.00
10:09:10 SQL> 
10:09:10 SQL> --
10:09:10 SQL> -- ejp610.sql
10:09:10 SQL> --
10:09:10 SQL> 
10:09:10 SQL> -- Creates views and tables for backtesting a forex SVM strategy
10:09:10 SQL> 
10:09:10 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.53
10:09:11 SQL> 
10:09:11 SQL> -- I created di5min here:
10:09:11 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
10:09:11 SQL> 
10:09:11 SQL> CREATE OR REPLACE VIEW svm6102 AS
10:09:11   2  SELECT
10:09:11   3  pair
10:09:11   4  ,ydate
10:09:11   5  ,prdate
10:09:11   6  ,rownum rnum -- acts as t in my time-series
10:09:11   7  ,clse
10:09:11   8  -- Derive a bunch of attributes from clse, the latest price:
10:09:11   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
10:09:11  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
10:09:11  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
10:09:11  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
10:09:11  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
10:09:11  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
10:09:11  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
10:09:11  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
10:09:11  17  --
10:09:11  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
10:09:11  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
10:09:11  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
10:09:11  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
10:09:11  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
10:09:11  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
10:09:11  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
10:09:11  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
10:09:11  26  --
10:09:11  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
10:09:11  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
10:09:11  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
10:09:11  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
10:09:11  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
10:09:11  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
10:09:11  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
10:09:11  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
10:09:11  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
10:09:11  36  FROM di5min WHERE pair LIKE'%ejp%'
10:09:11  37  AND ydate > sysdate - 95
10:09:11  38  ORDER BY ydate
10:09:11  39  /

View created.

Elapsed: 00:00:00.04
10:09:11 SQL> 
10:09:11 SQL> -- rpt
10:09:11 SQL> 
10:09:11 SQL> SELECT
10:09:11   2  pair
10:09:11   3  ,COUNT(pair)
10:09:11   4  ,MIN(clse),MAX(clse)
10:09:11   5  ,MIN(avg6),MAX(avg6)
10:09:11   6  ,MIN(ydate),MAX(ydate)
10:09:11   7  FROM svm6102
10:09:11   8  GROUP BY pair
10:09:11   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ejp_usd       19806 107.643765	115.63485 107.776148 115.509678 2010-10-04 10:10:01 2011-01-07 10:00:00

Elapsed: 00:00:00.87
10:09:12 SQL> 
10:09:12 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
10:09:12 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.32
10:09:12 SQL> CREATE TABLE svm6122 COMPRESS AS
10:09:12   2  SELECT
10:09:12   3  pair
10:09:12   4  ,ydate
10:09:12   5  ,prdate
10:09:12   6  ,clse
10:09:12   7  -- g6 is important. I want to predict g6:
10:09:12   8  ,ld6 - clse g6
10:09:12   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
10:09:12  10  -- I want more attributes from the ones I derived above:
10:09:12  11  -- clse relation to moving-min
10:09:12  12  ,clse-min4  cm4
10:09:12  13  ,clse-min6  cm6
10:09:12  14  ,clse-min8  cm8
10:09:12  15  ,clse-min10 cm10
10:09:12  16  ,clse-min12 cm12
10:09:12  17  ,clse-min14 cm14
10:09:12  18  ,clse-min16 cm16
10:09:12  19  ,clse-min18 cm18
10:09:12  20  -- clse relation to moving-avg
10:09:12  21  ,clse-avg4  ca4
10:09:12  22  ,clse-avg6  ca6
10:09:12  23  ,clse-avg8  ca8
10:09:12  24  ,clse-avg10 ca10
10:09:12  25  ,clse-avg12 ca12
10:09:12  26  ,clse-avg14 ca14
10:09:12  27  ,clse-avg16 ca16
10:09:12  28  ,clse-avg18 ca18
10:09:12  29  -- clse relation to moving-max
10:09:12  30  ,clse-max4  cx4
10:09:12  31  ,clse-max6  cx6
10:09:12  32  ,clse-max8  cx8
10:09:12  33  ,clse-max10 cx10
10:09:12  34  ,clse-max12 cx12
10:09:12  35  ,clse-max14 cx14
10:09:12  36  ,clse-max16 cx16
10:09:12  37  ,clse-max18 cx18
10:09:12  38  -- Derive more attributes.
10:09:12  39  -- I want to use CORR() here to help SVM see the shape of the series.
10:09:12  40  -- But COVAR_POP is more stable:
10:09:12  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
10:09:12  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
10:09:12  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
10:09:12  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
10:09:12  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
10:09:12  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
10:09:12  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
10:09:12  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
10:09:12  49  -- Derive date related attributes:
10:09:12  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
10:09:12  51  ,0+TO_CHAR(ydate,'D')d
10:09:12  52  ,0+TO_CHAR(ydate,'W')w
10:09:12  53  -- mpm stands for minutes-past-midnight:
10:09:12  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
10:09:12  55  -- mph stands for minutes-past-hour:
10:09:12  56  ,0+TO_CHAR(ydate,'MI')mph
10:09:12  57  FROM svm6102
10:09:12  58  ORDER BY ydate
10:09:12  59  /

Table created.

Elapsed: 00:00:02.20
10:09:14 SQL> 
10:09:14 SQL> -- rpt
10:09:14 SQL> 
10:09:14 SQL> SELECT
10:09:14   2  pair
10:09:14   3  ,COUNT(pair)
10:09:14   4  ,MIN(clse),MAX(clse)
10:09:14   5  ,MIN(ydate),MAX(ydate)
10:09:14   6  FROM svm6122
10:09:14   7  GROUP BY pair
10:09:14   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ejp_usd       19806 107.643765	115.63485 2010-10-04 10:10:01 2011-01-07 10:00:00

Elapsed: 00:00:00.04
10:09:14 SQL> 
10:09:14 SQL> -- Prepare for derivation of NTILE based params:
10:09:14 SQL> 
10:09:14 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.27
10:09:15 SQL> CREATE TABLE svm6142 COMPRESS AS
10:09:15   2  SELECT
10:09:15   3  pair
10:09:15   4  ,ydate
10:09:15   5  ,prdate
10:09:15   6  ,clse
10:09:15   7  ,g6
10:09:15   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
10:09:15   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
10:09:15  10  ,CASE WHEN trend IS NULL THEN 1
10:09:15  11  	    WHEN trend =0      THEN 1
10:09:15  12  	    ELSE trend END trend
10:09:15  13  ,cm4
10:09:15  14  ,cm6
10:09:15  15  ,cm8
10:09:15  16  ,cm10
10:09:15  17  ,cm12
10:09:15  18  ,cm14
10:09:15  19  ,cm16
10:09:15  20  ,cm18
10:09:15  21  --
10:09:15  22  ,ca4
10:09:15  23  ,ca6
10:09:15  24  ,ca8
10:09:15  25  ,ca10
10:09:15  26  ,ca12
10:09:15  27  ,ca14
10:09:15  28  ,ca16
10:09:15  29  ,ca18
10:09:15  30  --
10:09:15  31  ,cx4
10:09:15  32  ,cx6
10:09:15  33  ,cx8
10:09:15  34  ,cx10
10:09:15  35  ,cx12
10:09:15  36  ,cx14
10:09:15  37  ,cx16
10:09:15  38  ,cx18
10:09:15  39  --
10:09:15  40  ,crr4
10:09:15  41  ,crr6
10:09:15  42  ,crr8
10:09:15  43  ,crr10
10:09:15  44  ,crr12
10:09:15  45  ,crr14
10:09:15  46  ,crr16
10:09:15  47  ,crr18
10:09:15  48  --
10:09:15  49  ,hh
10:09:15  50  ,d
10:09:15  51  ,w
10:09:15  52  ,mpm
10:09:15  53  ,mph
10:09:15  54  FROM svm6122
10:09:15  55  ORDER BY ydate
10:09:15  56  /

Table created.

Elapsed: 00:00:00.42
10:09:15 SQL> 
10:09:15 SQL> -- rpt
10:09:15 SQL> 
10:09:15 SQL> SELECT
10:09:15   2  pair
10:09:15   3  ,trend
10:09:15   4  ,gatt
10:09:15   5  ,COUNT(pair)
10:09:15   6  ,AVG(g6)
10:09:15   7  FROM svm6142
10:09:15   8  GROUP BY pair,trend,gatt
10:09:15   9  ORDER BY pair,trend,gatt
10:09:15  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      5194    -.32152
ejp_usd 	-1 up	      4948 .276765765
ejp_usd 	-1		 3
ejp_usd 	 1 nup	      4961 -.29114115
ejp_usd 	 1 up	      4631 .288330427
ejp_usd 	 1		69

6 rows selected.

Elapsed: 00:00:00.03
10:09:15 SQL> 
10:09:15 SQL> 
10:09:15 SQL> -- Derive NTILE based params:
10:09:15 SQL> 
10:09:15 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.20
10:09:15 SQL> CREATE TABLE svm6162 COMPRESS AS
10:09:15   2  SELECT
10:09:15   3  pair
10:09:15   4  ,ydate
10:09:15   5  ,prdate
10:09:15   6  ,clse
10:09:15   7  ,g6
10:09:15   8  ,gatt
10:09:15   9  ,gattn
10:09:15  10  ,trend
10:09:15  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
10:09:15  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
10:09:15  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
10:09:15  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
10:09:15  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
10:09:15  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
10:09:15  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
10:09:15  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
10:09:15  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
10:09:15  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
10:09:15  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
10:09:15  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
10:09:15  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
10:09:15  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
10:09:15  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
10:09:15  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
10:09:15  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
10:09:15  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
10:09:15  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
10:09:15  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
10:09:15  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
10:09:15  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
10:09:15  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
10:09:15  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
10:09:15  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
10:09:15  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
10:09:15  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
10:09:15  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
10:09:15  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
10:09:15  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
10:09:15  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
10:09:15  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
10:09:15  43  ,hh  att32
10:09:15  44  ,d   att33
10:09:15  45  ,w   att34
10:09:15  46  ,mpm att35
10:09:15  47  ,mph att36
10:09:15  48  ,trend att37
10:09:15  49  FROM svm6142
10:09:15  50  ORDER BY ydate
10:09:15  51  /

Table created.

Elapsed: 00:00:05.03
10:09:20 SQL> 
10:09:20 SQL> -- rpt
10:09:20 SQL> 
10:09:20 SQL> SELECT
10:09:20   2  pair
10:09:20   3  ,trend
10:09:20   4  ,gatt
10:09:20   5  ,COUNT(pair)
10:09:20   6  ,AVG(g6)
10:09:20   7  FROM svm6162
10:09:20   8  GROUP BY pair,trend,gatt
10:09:20   9  ORDER BY pair,trend,gatt
10:09:20  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      5194    -.32152
ejp_usd 	-1 up	      4948 .276765765
ejp_usd 	-1		 3
ejp_usd 	 1 nup	      4961 -.29114115
ejp_usd 	 1 up	      4631 .288330427
ejp_usd 	 1		69

6 rows selected.

Elapsed: 00:00:00.03
10:09:20 SQL> 
10:09:20 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
10:09:20 SQL> CREATE TABLE modsrc COMPRESS AS
10:09:20   2  SELECT
10:09:20   3  pair
10:09:20   4  ,ydate
10:09:20   5  ,prdate
10:09:20   6  ,trend
10:09:20   7  ,g6
10:09:20   8  ,gatt
10:09:20   9  ,gattn
10:09:20  10  FROM svm6162
10:09:20  11  /

Table created.

Elapsed: 00:00:00.09
10:09:20 SQL> 
10:09:20 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
10:09:21 SQL> 
10:09:21 SQL> DROP   TABLE ejp_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
10:09:21 SQL> CREATE TABLE ejp_ms610 COMPRESS AS
10:09:21   2  SELECT
10:09:21   3  ydate
10:09:21   4  ,trend ejp_trend
10:09:21   5  ,g6    ejp_g6
10:09:21   6  ,gatt  ejp_gatt
10:09:21   7  ,gattn ejp_gattn
10:09:21   8  FROM modsrc
10:09:21   9  /

Table created.

Elapsed: 00:00:00.08
10:09:21 SQL> 
10:09:21 SQL> ANALYZE TABLE ejp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
10:09:21 SQL> 
10:09:21 SQL> -- I need a copy of the attributes:
10:09:21 SQL> 
10:09:21 SQL> 
10:09:21 SQL> DROP   TABLE ejp_att;

Table dropped.

Elapsed: 00:00:00.13
10:09:21 SQL> CREATE TABLE ejp_att COMPRESS AS
10:09:21   2  SELECT
10:09:21   3  ydate
10:09:21   4  ,att00 ejp_att00
10:09:21   5  ,att01 ejp_att01
10:09:21   6  ,att02 ejp_att02
10:09:21   7  ,att03 ejp_att03
10:09:21   8  ,att04 ejp_att04
10:09:21   9  ,att05 ejp_att05
10:09:21  10  ,att06 ejp_att06
10:09:21  11  ,att07 ejp_att07
10:09:21  12  ,att08 ejp_att08
10:09:21  13  ,att09 ejp_att09
10:09:21  14  ,att10 ejp_att10
10:09:21  15  ,att11 ejp_att11
10:09:21  16  ,att12 ejp_att12
10:09:21  17  ,att13 ejp_att13
10:09:21  18  ,att14 ejp_att14
10:09:21  19  ,att15 ejp_att15
10:09:21  20  ,att16 ejp_att16
10:09:21  21  ,att17 ejp_att17
10:09:21  22  ,att18 ejp_att18
10:09:21  23  ,att19 ejp_att19
10:09:21  24  ,att20 ejp_att20
10:09:21  25  ,att21 ejp_att21
10:09:21  26  ,att22 ejp_att22
10:09:21  27  ,att23 ejp_att23
10:09:21  28  ,att24 ejp_att24
10:09:21  29  ,att25 ejp_att25
10:09:21  30  ,att26 ejp_att26
10:09:21  31  ,att27 ejp_att27
10:09:21  32  ,att28 ejp_att28
10:09:21  33  ,att29 ejp_att29
10:09:21  34  ,att30 ejp_att30
10:09:21  35  ,att31 ejp_att31
10:09:21  36  ,att32 ejp_att32
10:09:21  37  ,att33 ejp_att33
10:09:21  38  ,att34 ejp_att34
10:09:21  39  ,att35 ejp_att35
10:09:21  40  ,att36 ejp_att36
10:09:21  41  ,att37 ejp_att37
10:09:21  42  FROM svm6162
10:09:21  43  /

Table created.

Elapsed: 00:00:00.18
10:09:21 SQL> 
10:09:21 SQL> ANALYZE TABLE ejp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.54
10:09:22 SQL> 
10:09:22 SQL> -- rpt
10:09:22 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19806

Elapsed: 00:00:00.87
10:09:23 SQL> SELECT COUNT(*)FROM ejp_att;

  COUNT(*)
----------
     19806

Elapsed: 00:00:00.01
10:09:23 SQL> 
10:09:23 SQL> --
10:09:23 SQL> -- ajp610.sql
10:09:23 SQL> --
10:09:23 SQL> 
10:09:23 SQL> -- Creates views and tables for backtesting a forex SVM strategy
10:09:23 SQL> 
10:09:23 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.38
10:09:23 SQL> 
10:09:23 SQL> -- I created di5min here:
10:09:23 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
10:09:23 SQL> 
10:09:23 SQL> CREATE OR REPLACE VIEW svm6102 AS
10:09:23   2  SELECT
10:09:23   3  pair
10:09:23   4  ,ydate
10:09:23   5  ,prdate
10:09:23   6  ,rownum rnum -- acts as t in my time-series
10:09:23   7  ,clse
10:09:23   8  -- Derive a bunch of attributes from clse, the latest price:
10:09:23   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
10:09:23  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
10:09:23  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
10:09:23  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
10:09:23  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
10:09:23  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
10:09:23  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
10:09:23  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
10:09:23  17  --
10:09:23  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
10:09:23  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
10:09:23  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
10:09:23  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
10:09:23  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
10:09:23  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
10:09:23  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
10:09:23  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
10:09:23  26  --
10:09:23  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
10:09:23  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
10:09:23  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
10:09:23  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
10:09:23  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
10:09:23  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
10:09:23  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
10:09:23  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
10:09:23  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
10:09:23  36  FROM di5min WHERE pair LIKE'%ajp%'
10:09:23  37  AND ydate > sysdate - 95
10:09:23  38  ORDER BY ydate
10:09:23  39  /

View created.

Elapsed: 00:00:00.05
10:09:23 SQL> 
10:09:23 SQL> -- rpt
10:09:23 SQL> 
10:09:23 SQL> SELECT
10:09:23   2  pair
10:09:23   3  ,COUNT(pair)
10:09:23   4  ,MIN(clse),MAX(clse)
10:09:23   5  ,MIN(avg6),MAX(avg6)
10:09:23   6  ,MIN(ydate),MAX(ydate)
10:09:23   7  FROM svm6102
10:09:23   8  GROUP BY pair
10:09:23   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ajp_usd       19803  78.249976 83.6669853 78.5106193  83.546306 2010-10-04 10:10:01 2011-01-07 10:00:00

Elapsed: 00:00:00.82
10:09:24 SQL> 
10:09:24 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
10:09:24 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.25
10:09:24 SQL> CREATE TABLE svm6122 COMPRESS AS
10:09:24   2  SELECT
10:09:24   3  pair
10:09:24   4  ,ydate
10:09:24   5  ,prdate
10:09:24   6  ,clse
10:09:24   7  -- g6 is important. I want to predict g6:
10:09:24   8  ,ld6 - clse g6
10:09:24   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
10:09:24  10  -- I want more attributes from the ones I derived above:
10:09:24  11  -- clse relation to moving-min
10:09:24  12  ,clse-min4  cm4
10:09:24  13  ,clse-min6  cm6
10:09:24  14  ,clse-min8  cm8
10:09:24  15  ,clse-min10 cm10
10:09:24  16  ,clse-min12 cm12
10:09:24  17  ,clse-min14 cm14
10:09:24  18  ,clse-min16 cm16
10:09:24  19  ,clse-min18 cm18
10:09:24  20  -- clse relation to moving-avg
10:09:24  21  ,clse-avg4  ca4
10:09:24  22  ,clse-avg6  ca6
10:09:24  23  ,clse-avg8  ca8
10:09:24  24  ,clse-avg10 ca10
10:09:24  25  ,clse-avg12 ca12
10:09:24  26  ,clse-avg14 ca14
10:09:24  27  ,clse-avg16 ca16
10:09:24  28  ,clse-avg18 ca18
10:09:24  29  -- clse relation to moving-max
10:09:24  30  ,clse-max4  cx4
10:09:24  31  ,clse-max6  cx6
10:09:24  32  ,clse-max8  cx8
10:09:24  33  ,clse-max10 cx10
10:09:24  34  ,clse-max12 cx12
10:09:24  35  ,clse-max14 cx14
10:09:24  36  ,clse-max16 cx16
10:09:24  37  ,clse-max18 cx18
10:09:24  38  -- Derive more attributes.
10:09:24  39  -- I want to use CORR() here to help SVM see the shape of the series.
10:09:24  40  -- But COVAR_POP is more stable:
10:09:24  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
10:09:24  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
10:09:24  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
10:09:24  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
10:09:24  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
10:09:24  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
10:09:24  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
10:09:24  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
10:09:24  49  -- Derive date related attributes:
10:09:24  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
10:09:24  51  ,0+TO_CHAR(ydate,'D')d
10:09:24  52  ,0+TO_CHAR(ydate,'W')w
10:09:24  53  -- mpm stands for minutes-past-midnight:
10:09:24  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
10:09:24  55  -- mph stands for minutes-past-hour:
10:09:24  56  ,0+TO_CHAR(ydate,'MI')mph
10:09:24  57  FROM svm6102
10:09:24  58  ORDER BY ydate
10:09:24  59  /

Table created.

Elapsed: 00:00:02.06
10:09:26 SQL> 
10:09:26 SQL> -- rpt
10:09:26 SQL> 
10:09:26 SQL> SELECT
10:09:26   2  pair
10:09:26   3  ,COUNT(pair)
10:09:26   4  ,MIN(clse),MAX(clse)
10:09:26   5  ,MIN(ydate),MAX(ydate)
10:09:26   6  FROM svm6122
10:09:26   7  GROUP BY pair
10:09:26   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ajp_usd       19803  78.249976 83.6669853 2010-10-04 10:10:01 2011-01-07 10:00:00

Elapsed: 00:00:00.04
10:09:26 SQL> 
10:09:26 SQL> -- Prepare for derivation of NTILE based params:
10:09:26 SQL> 
10:09:26 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.29
10:09:27 SQL> CREATE TABLE svm6142 COMPRESS AS
10:09:27   2  SELECT
10:09:27   3  pair
10:09:27   4  ,ydate
10:09:27   5  ,prdate
10:09:27   6  ,clse
10:09:27   7  ,g6
10:09:27   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
10:09:27   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
10:09:27  10  ,CASE WHEN trend IS NULL THEN 1
10:09:27  11  	    WHEN trend =0      THEN 1
10:09:27  12  	    ELSE trend END trend
10:09:27  13  ,cm4
10:09:27  14  ,cm6
10:09:27  15  ,cm8
10:09:27  16  ,cm10
10:09:27  17  ,cm12
10:09:27  18  ,cm14
10:09:27  19  ,cm16
10:09:27  20  ,cm18
10:09:27  21  --
10:09:27  22  ,ca4
10:09:27  23  ,ca6
10:09:27  24  ,ca8
10:09:27  25  ,ca10
10:09:27  26  ,ca12
10:09:27  27  ,ca14
10:09:27  28  ,ca16
10:09:27  29  ,ca18
10:09:27  30  --
10:09:27  31  ,cx4
10:09:27  32  ,cx6
10:09:27  33  ,cx8
10:09:27  34  ,cx10
10:09:27  35  ,cx12
10:09:27  36  ,cx14
10:09:27  37  ,cx16
10:09:27  38  ,cx18
10:09:27  39  --
10:09:27  40  ,crr4
10:09:27  41  ,crr6
10:09:27  42  ,crr8
10:09:27  43  ,crr10
10:09:27  44  ,crr12
10:09:27  45  ,crr14
10:09:27  46  ,crr16
10:09:27  47  ,crr18
10:09:27  48  --
10:09:27  49  ,hh
10:09:27  50  ,d
10:09:27  51  ,w
10:09:27  52  ,mpm
10:09:27  53  ,mph
10:09:27  54  FROM svm6122
10:09:27  55  ORDER BY ydate
10:09:27  56  /

Table created.

Elapsed: 00:00:00.46
10:09:27 SQL> 
10:09:27 SQL> -- rpt
10:09:27 SQL> 
10:09:27 SQL> SELECT
10:09:27   2  pair
10:09:27   3  ,trend
10:09:27   4  ,gatt
10:09:27   5  ,COUNT(pair)
10:09:27   6  ,AVG(g6)
10:09:27   7  FROM svm6142
10:09:27   8  GROUP BY pair,trend,gatt
10:09:27   9  ORDER BY pair,trend,gatt
10:09:27  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ajp_usd 	-1 nup	      4354 -.22352596
ajp_usd 	-1 up	      5264 .222010519
ajp_usd 	-1		 5
ajp_usd 	 1 nup	      5305 -.19962429
ajp_usd 	 1 up	      4808 .212854352
ajp_usd 	 1		67

6 rows selected.

Elapsed: 00:00:00.04
10:09:27 SQL> 
10:09:27 SQL> 
10:09:27 SQL> -- Derive NTILE based params:
10:09:27 SQL> 
10:09:27 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.19
10:09:27 SQL> CREATE TABLE svm6162 COMPRESS AS
10:09:27   2  SELECT
10:09:27   3  pair
10:09:27   4  ,ydate
10:09:27   5  ,prdate
10:09:27   6  ,clse
10:09:27   7  ,g6
10:09:27   8  ,gatt
10:09:27   9  ,gattn
10:09:27  10  ,trend
10:09:27  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
10:09:27  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
10:09:27  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
10:09:27  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
10:09:27  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
10:09:27  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
10:09:27  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
10:09:27  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
10:09:27  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
10:09:27  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
10:09:27  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
10:09:27  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
10:09:27  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
10:09:27  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
10:09:27  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
10:09:27  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
10:09:27  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
10:09:27  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
10:09:27  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
10:09:27  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
10:09:27  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
10:09:27  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
10:09:27  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
10:09:27  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
10:09:27  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
10:09:27  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
10:09:27  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
10:09:27  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
10:09:27  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
10:09:27  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
10:09:27  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
10:09:27  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
10:09:27  43  ,hh  att32
10:09:27  44  ,d   att33
10:09:27  45  ,w   att34
10:09:27  46  ,mpm att35
10:09:27  47  ,mph att36
10:09:27  48  ,trend att37
10:09:27  49  FROM svm6142
10:09:27  50  ORDER BY ydate
10:09:27  51  /

Table created.

Elapsed: 00:00:04.98
10:09:32 SQL> 
10:09:32 SQL> -- rpt
10:09:32 SQL> 
10:09:32 SQL> SELECT
10:09:32   2  pair
10:09:32   3  ,trend
10:09:32   4  ,gatt
10:09:32   5  ,COUNT(pair)
10:09:32   6  ,AVG(g6)
10:09:32   7  FROM svm6162
10:09:32   8  GROUP BY pair,trend,gatt
10:09:32   9  ORDER BY pair,trend,gatt
10:09:32  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ajp_usd 	-1 nup	      4354 -.22352596
ajp_usd 	-1 up	      5264 .222010519
ajp_usd 	-1		 5
ajp_usd 	 1 nup	      5305 -.19962429
ajp_usd 	 1 up	      4808 .212854352
ajp_usd 	 1		67

6 rows selected.

Elapsed: 00:00:00.03
10:09:32 SQL> 
10:09:32 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.17
10:09:33 SQL> CREATE TABLE modsrc COMPRESS AS
10:09:33   2  SELECT
10:09:33   3  pair
10:09:33   4  ,ydate
10:09:33   5  ,prdate
10:09:33   6  ,trend
10:09:33   7  ,g6
10:09:33   8  ,gatt
10:09:33   9  ,gattn
10:09:33  10  FROM svm6162
10:09:33  11  /

Table created.

Elapsed: 00:00:00.09
10:09:33 SQL> 
10:09:33 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.27
10:09:33 SQL> 
10:09:33 SQL> DROP   TABLE ajp_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
10:09:33 SQL> CREATE TABLE ajp_ms610 COMPRESS AS
10:09:33   2  SELECT
10:09:33   3  ydate
10:09:33   4  ,trend ajp_trend
10:09:33   5  ,g6    ajp_g6
10:09:33   6  ,gatt  ajp_gatt
10:09:33   7  ,gattn ajp_gattn
10:09:33   8  FROM modsrc
10:09:33   9  /

Table created.

Elapsed: 00:00:00.10
10:09:33 SQL> 
10:09:33 SQL> ANALYZE TABLE ajp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
10:09:33 SQL> 
10:09:33 SQL> -- I need a copy of the attributes:
10:09:33 SQL> 
10:09:33 SQL> 
10:09:33 SQL> DROP   TABLE ajp_att;

Table dropped.

Elapsed: 00:00:00.14
10:09:33 SQL> CREATE TABLE ajp_att COMPRESS AS
10:09:33   2  SELECT
10:09:33   3  ydate
10:09:33   4  ,att00 ajp_att00
10:09:33   5  ,att01 ajp_att01
10:09:33   6  ,att02 ajp_att02
10:09:33   7  ,att03 ajp_att03
10:09:33   8  ,att04 ajp_att04
10:09:33   9  ,att05 ajp_att05
10:09:33  10  ,att06 ajp_att06
10:09:33  11  ,att07 ajp_att07
10:09:33  12  ,att08 ajp_att08
10:09:33  13  ,att09 ajp_att09
10:09:33  14  ,att10 ajp_att10
10:09:33  15  ,att11 ajp_att11
10:09:33  16  ,att12 ajp_att12
10:09:33  17  ,att13 ajp_att13
10:09:33  18  ,att14 ajp_att14
10:09:33  19  ,att15 ajp_att15
10:09:33  20  ,att16 ajp_att16
10:09:33  21  ,att17 ajp_att17
10:09:33  22  ,att18 ajp_att18
10:09:33  23  ,att19 ajp_att19
10:09:33  24  ,att20 ajp_att20
10:09:33  25  ,att21 ajp_att21
10:09:33  26  ,att22 ajp_att22
10:09:33  27  ,att23 ajp_att23
10:09:33  28  ,att24 ajp_att24
10:09:33  29  ,att25 ajp_att25
10:09:33  30  ,att26 ajp_att26
10:09:33  31  ,att27 ajp_att27
10:09:33  32  ,att28 ajp_att28
10:09:33  33  ,att29 ajp_att29
10:09:33  34  ,att30 ajp_att30
10:09:33  35  ,att31 ajp_att31
10:09:33  36  ,att32 ajp_att32
10:09:33  37  ,att33 ajp_att33
10:09:33  38  ,att34 ajp_att34
10:09:33  39  ,att35 ajp_att35
10:09:33  40  ,att36 ajp_att36
10:09:33  41  ,att37 ajp_att37
10:09:33  42  FROM svm6162
10:09:33  43  /

Table created.

Elapsed: 00:00:00.16
10:09:34 SQL> 
10:09:34 SQL> ANALYZE TABLE ajp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
10:09:34 SQL> 
10:09:34 SQL> -- rpt
10:09:34 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19803

Elapsed: 00:00:00.78
10:09:35 SQL> SELECT COUNT(*)FROM ajp_att;

  COUNT(*)
----------
     19803

Elapsed: 00:00:00.00
10:09:35 SQL> 
10:09:35 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
