
SQL*Plus: Release 11.2.0.1.0 Production on Mon Jan 3 01:00:24 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

01:00:24 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
01:00:24 SQL> 01:00:24 SQL> --
01:00:24 SQL> -- eur610.sql
01:00:24 SQL> --
01:00:24 SQL> 
01:00:24 SQL> -- Creates views and tables for backtesting a forex SVM strategy
01:00:24 SQL> 
01:00:24 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.03
01:00:24 SQL> 
01:00:24 SQL> -- I created di5min here:
01:00:24 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
01:00:24 SQL> 
01:00:24 SQL> CREATE OR REPLACE VIEW svm6102 AS
01:00:24   2  SELECT
01:00:24   3  pair
01:00:24   4  ,ydate
01:00:24   5  ,prdate
01:00:24   6  ,rownum rnum -- acts as t in my time-series
01:00:24   7  ,clse
01:00:24   8  -- Derive a bunch of attributes from clse, the latest price:
01:00:24   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
01:00:24  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
01:00:24  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
01:00:24  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
01:00:24  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
01:00:24  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
01:00:24  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
01:00:24  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
01:00:24  17  --
01:00:24  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
01:00:24  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
01:00:24  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
01:00:24  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
01:00:24  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
01:00:24  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
01:00:24  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
01:00:24  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
01:00:24  26  --
01:00:24  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
01:00:24  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
01:00:24  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
01:00:24  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
01:00:24  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
01:00:24  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
01:00:24  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
01:00:24  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
01:00:24  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
01:00:24  36  FROM di5min WHERE pair LIKE'%eur%'
01:00:24  37  AND ydate > sysdate - 95
01:00:24  38  ORDER BY ydate
01:00:24  39  /

View created.

Elapsed: 00:00:00.22
01:00:24 SQL> 
01:00:24 SQL> -- rpt
01:00:24 SQL> 
01:00:24 SQL> SELECT
01:00:24   2  pair
01:00:24   3  ,COUNT(pair)
01:00:24   4  ,MIN(clse),MAX(clse)
01:00:24   5  ,MIN(avg6),MAX(avg6)
01:00:24   6  ,MIN(ydate),MAX(ydate)
01:00:24   7  FROM svm6102
01:00:24   8  GROUP BY pair
01:00:24   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_usd       19259    1.29735	   1.4273 1.29875103 1.42436233 2010-09-30 01:05:01 2011-01-03 00:55:00

Elapsed: 00:00:00.92
01:00:25 SQL> 
01:00:25 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
01:00:25 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.08
01:00:25 SQL> CREATE TABLE svm6122 COMPRESS AS
01:00:25   2  SELECT
01:00:25   3  pair
01:00:25   4  ,ydate
01:00:25   5  ,prdate
01:00:25   6  ,clse
01:00:25   7  -- g6 is important. I want to predict g6:
01:00:25   8  ,ld6 - clse g6
01:00:25   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
01:00:25  10  -- I want more attributes from the ones I derived above:
01:00:25  11  -- clse relation to moving-min
01:00:25  12  ,clse-min4  cm4
01:00:25  13  ,clse-min6  cm6
01:00:25  14  ,clse-min8  cm8
01:00:25  15  ,clse-min10 cm10
01:00:25  16  ,clse-min12 cm12
01:00:25  17  ,clse-min14 cm14
01:00:25  18  ,clse-min16 cm16
01:00:25  19  ,clse-min18 cm18
01:00:25  20  -- clse relation to moving-avg
01:00:25  21  ,clse-avg4  ca4
01:00:25  22  ,clse-avg6  ca6
01:00:25  23  ,clse-avg8  ca8
01:00:25  24  ,clse-avg10 ca10
01:00:25  25  ,clse-avg12 ca12
01:00:25  26  ,clse-avg14 ca14
01:00:25  27  ,clse-avg16 ca16
01:00:25  28  ,clse-avg18 ca18
01:00:25  29  -- clse relation to moving-max
01:00:25  30  ,clse-max4  cx4
01:00:25  31  ,clse-max6  cx6
01:00:25  32  ,clse-max8  cx8
01:00:25  33  ,clse-max10 cx10
01:00:25  34  ,clse-max12 cx12
01:00:25  35  ,clse-max14 cx14
01:00:25  36  ,clse-max16 cx16
01:00:25  37  ,clse-max18 cx18
01:00:25  38  -- Derive more attributes.
01:00:25  39  -- I want to use CORR() here to help SVM see the shape of the series.
01:00:25  40  -- But COVAR_POP is more stable:
01:00:25  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
01:00:25  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
01:00:25  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
01:00:25  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
01:00:25  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
01:00:25  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
01:00:25  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
01:00:25  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
01:00:25  49  -- Derive date related attributes:
01:00:25  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
01:00:25  51  ,0+TO_CHAR(ydate,'D')d
01:00:25  52  ,0+TO_CHAR(ydate,'W')w
01:00:25  53  -- mpm stands for minutes-past-midnight:
01:00:25  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
01:00:25  55  -- mph stands for minutes-past-hour:
01:00:25  56  ,0+TO_CHAR(ydate,'MI')mph
01:00:25  57  FROM svm6102
01:00:25  58  ORDER BY ydate
01:00:25  59  /

Table created.

Elapsed: 00:00:02.37
01:00:28 SQL> 
01:00:28 SQL> -- rpt
01:00:28 SQL> 
01:00:28 SQL> SELECT
01:00:28   2  pair
01:00:28   3  ,COUNT(pair)
01:00:28   4  ,MIN(clse),MAX(clse)
01:00:28   5  ,MIN(ydate),MAX(ydate)
01:00:28   6  FROM svm6122
01:00:28   7  GROUP BY pair
01:00:28   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_usd       19259    1.29735	   1.4273 2010-09-30 01:05:01 2011-01-03 00:55:00

Elapsed: 00:00:00.04
01:00:28 SQL> 
01:00:28 SQL> -- Prepare for derivation of NTILE based params:
01:00:28 SQL> 
01:00:28 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.45
01:00:28 SQL> CREATE TABLE svm6142 COMPRESS AS
01:00:28   2  SELECT
01:00:28   3  pair
01:00:28   4  ,ydate
01:00:28   5  ,prdate
01:00:28   6  ,clse
01:00:28   7  ,g6
01:00:28   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
01:00:28   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
01:00:28  10  ,CASE WHEN trend IS NULL THEN 1
01:00:28  11  	    WHEN trend =0      THEN 1
01:00:28  12  	    ELSE trend END trend
01:00:28  13  ,cm4
01:00:28  14  ,cm6
01:00:28  15  ,cm8
01:00:28  16  ,cm10
01:00:28  17  ,cm12
01:00:28  18  ,cm14
01:00:28  19  ,cm16
01:00:28  20  ,cm18
01:00:28  21  --
01:00:28  22  ,ca4
01:00:28  23  ,ca6
01:00:28  24  ,ca8
01:00:28  25  ,ca10
01:00:28  26  ,ca12
01:00:28  27  ,ca14
01:00:28  28  ,ca16
01:00:28  29  ,ca18
01:00:28  30  --
01:00:28  31  ,cx4
01:00:28  32  ,cx6
01:00:28  33  ,cx8
01:00:28  34  ,cx10
01:00:28  35  ,cx12
01:00:28  36  ,cx14
01:00:28  37  ,cx16
01:00:28  38  ,cx18
01:00:28  39  --
01:00:28  40  ,crr4
01:00:28  41  ,crr6
01:00:28  42  ,crr8
01:00:28  43  ,crr10
01:00:28  44  ,crr12
01:00:28  45  ,crr14
01:00:28  46  ,crr16
01:00:28  47  ,crr18
01:00:28  48  --
01:00:28  49  ,hh
01:00:28  50  ,d
01:00:28  51  ,w
01:00:28  52  ,mpm
01:00:28  53  ,mph
01:00:28  54  FROM svm6122
01:00:28  55  ORDER BY ydate
01:00:28  56  /

Table created.

Elapsed: 00:00:00.39
01:00:28 SQL> 
01:00:28 SQL> -- rpt
01:00:28 SQL> 
01:00:28 SQL> SELECT
01:00:28   2  pair
01:00:28   3  ,trend
01:00:28   4  ,gatt
01:00:28   5  ,COUNT(pair)
01:00:28   6  ,AVG(g6)
01:00:28   7  FROM svm6142
01:00:28   8  GROUP BY pair,trend,gatt
01:00:28   9  ORDER BY pair,trend,gatt
01:00:28  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      5944 -.00312159
eur_usd 	-1 up	      3585 .004484529
eur_usd 	-1		66
eur_usd 	 1 nup	      5849 -.00316691
eur_usd 	 1 up	      3809 .005051542
eur_usd 	 1		 6

6 rows selected.

Elapsed: 00:00:00.05
01:00:28 SQL> 
01:00:28 SQL> 
01:00:28 SQL> -- Derive NTILE based params:
01:00:28 SQL> 
01:00:28 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.24
01:00:29 SQL> CREATE TABLE svm6162 COMPRESS AS
01:00:29   2  SELECT
01:00:29   3  pair
01:00:29   4  ,ydate
01:00:29   5  ,prdate
01:00:29   6  ,clse
01:00:29   7  ,g6
01:00:29   8  ,gatt
01:00:29   9  ,gattn
01:00:29  10  ,trend
01:00:29  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
01:00:29  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
01:00:29  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
01:00:29  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
01:00:29  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
01:00:29  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
01:00:29  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
01:00:29  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
01:00:29  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
01:00:29  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
01:00:29  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
01:00:29  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
01:00:29  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
01:00:29  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
01:00:29  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
01:00:29  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
01:00:29  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
01:00:29  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
01:00:29  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
01:00:29  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
01:00:29  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
01:00:29  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
01:00:29  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
01:00:29  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
01:00:29  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
01:00:29  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
01:00:29  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
01:00:29  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
01:00:29  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
01:00:29  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
01:00:29  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
01:00:29  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
01:00:29  43  ,hh  att32
01:00:29  44  ,d   att33
01:00:29  45  ,w   att34
01:00:29  46  ,mpm att35
01:00:29  47  ,mph att36
01:00:29  48  ,trend att37
01:00:29  49  FROM svm6142
01:00:29  50  ORDER BY ydate
01:00:29  51  /

Table created.

Elapsed: 00:00:04.64
01:00:33 SQL> 
01:00:33 SQL> -- rpt
01:00:33 SQL> 
01:00:33 SQL> SELECT
01:00:33   2  pair
01:00:33   3  ,trend
01:00:33   4  ,gatt
01:00:33   5  ,COUNT(pair)
01:00:33   6  ,AVG(g6)
01:00:33   7  FROM svm6162
01:00:33   8  GROUP BY pair,trend,gatt
01:00:33   9  ORDER BY pair,trend,gatt
01:00:33  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      5944 -.00312159
eur_usd 	-1 up	      3585 .004484529
eur_usd 	-1		66
eur_usd 	 1 nup	      5849 -.00316691
eur_usd 	 1 up	      3809 .005051542
eur_usd 	 1		 6

6 rows selected.

Elapsed: 00:00:00.03
01:00:33 SQL> 
01:00:33 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
01:00:34 SQL> CREATE TABLE modsrc COMPRESS AS
01:00:34   2  SELECT
01:00:34   3  pair
01:00:34   4  ,ydate
01:00:34   5  ,prdate
01:00:34   6  ,trend
01:00:34   7  ,g6
01:00:34   8  ,gatt
01:00:34   9  ,gattn
01:00:34  10  FROM svm6162
01:00:34  11  /

Table created.

Elapsed: 00:00:00.15
01:00:34 SQL> 
01:00:34 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.27
01:00:34 SQL> 
01:00:34 SQL> DROP   TABLE eur_ms610 ;

Table dropped.

Elapsed: 00:00:00.09
01:00:34 SQL> CREATE TABLE eur_ms610 COMPRESS AS
01:00:34   2  SELECT
01:00:34   3  ydate
01:00:34   4  ,trend eur_trend
01:00:34   5  ,g6    eur_g6
01:00:34   6  ,gatt  eur_gatt
01:00:34   7  ,gattn eur_gattn
01:00:34   8  FROM modsrc
01:00:34   9  /

Table created.

Elapsed: 00:00:00.07
01:00:34 SQL> 
01:00:34 SQL> ANALYZE TABLE eur_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
01:00:34 SQL> 
01:00:34 SQL> -- I need a copy of the attributes:
01:00:34 SQL> 
01:00:34 SQL> 
01:00:34 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.05
01:00:34 SQL> CREATE TABLE eur_att COMPRESS AS
01:00:34   2  SELECT
01:00:34   3  ydate
01:00:34   4  ,att00 eur_att00
01:00:34   5  ,att01 eur_att01
01:00:34   6  ,att02 eur_att02
01:00:34   7  ,att03 eur_att03
01:00:34   8  ,att04 eur_att04
01:00:34   9  ,att05 eur_att05
01:00:34  10  ,att06 eur_att06
01:00:34  11  ,att07 eur_att07
01:00:34  12  ,att08 eur_att08
01:00:34  13  ,att09 eur_att09
01:00:34  14  ,att10 eur_att10
01:00:34  15  ,att11 eur_att11
01:00:34  16  ,att12 eur_att12
01:00:34  17  ,att13 eur_att13
01:00:34  18  ,att14 eur_att14
01:00:34  19  ,att15 eur_att15
01:00:34  20  ,att16 eur_att16
01:00:34  21  ,att17 eur_att17
01:00:34  22  ,att18 eur_att18
01:00:34  23  ,att19 eur_att19
01:00:34  24  ,att20 eur_att20
01:00:34  25  ,att21 eur_att21
01:00:34  26  ,att22 eur_att22
01:00:34  27  ,att23 eur_att23
01:00:34  28  ,att24 eur_att24
01:00:34  29  ,att25 eur_att25
01:00:34  30  ,att26 eur_att26
01:00:34  31  ,att27 eur_att27
01:00:34  32  ,att28 eur_att28
01:00:34  33  ,att29 eur_att29
01:00:34  34  ,att30 eur_att30
01:00:34  35  ,att31 eur_att31
01:00:34  36  ,att32 eur_att32
01:00:34  37  ,att33 eur_att33
01:00:34  38  ,att34 eur_att34
01:00:34  39  ,att35 eur_att35
01:00:34  40  ,att36 eur_att36
01:00:34  41  ,att37 eur_att37
01:00:34  42  FROM svm6162
01:00:34  43  /

Table created.

Elapsed: 00:00:00.17
01:00:35 SQL> 
01:00:35 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.44
01:00:35 SQL> 
01:00:35 SQL> -- rpt
01:00:35 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19259

Elapsed: 00:00:00.90
01:00:36 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     19259

Elapsed: 00:00:00.00
01:00:36 SQL> 
01:00:36 SQL> --
01:00:36 SQL> -- aud610.sql
01:00:36 SQL> --
01:00:36 SQL> 
01:00:36 SQL> -- Creates views and tables for backtesting a forex SVM strategy
01:00:36 SQL> 
01:00:36 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:01.02
01:00:37 SQL> 
01:00:37 SQL> -- I created di5min here:
01:00:37 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
01:00:37 SQL> 
01:00:37 SQL> CREATE OR REPLACE VIEW svm6102 AS
01:00:37   2  SELECT
01:00:37   3  pair
01:00:37   4  ,ydate
01:00:37   5  ,prdate
01:00:37   6  ,rownum rnum -- acts as t in my time-series
01:00:37   7  ,clse
01:00:37   8  -- Derive a bunch of attributes from clse, the latest price:
01:00:37   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
01:00:37  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
01:00:37  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
01:00:37  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
01:00:37  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
01:00:37  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
01:00:37  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
01:00:37  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
01:00:37  17  --
01:00:37  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
01:00:37  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
01:00:37  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
01:00:37  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
01:00:37  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
01:00:37  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
01:00:37  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
01:00:37  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
01:00:37  26  --
01:00:37  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
01:00:37  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
01:00:37  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
01:00:37  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
01:00:37  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
01:00:37  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
01:00:37  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
01:00:37  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
01:00:37  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
01:00:37  36  FROM di5min WHERE pair LIKE'%aud%'
01:00:37  37  AND ydate > sysdate - 95
01:00:37  38  ORDER BY ydate
01:00:37  39  /

View created.

Elapsed: 00:00:00.04
01:00:37 SQL> 
01:00:37 SQL> -- rpt
01:00:37 SQL> 
01:00:37 SQL> SELECT
01:00:37   2  pair
01:00:37   3  ,COUNT(pair)
01:00:37   4  ,MIN(clse),MAX(clse)
01:00:37   5  ,MIN(avg6),MAX(avg6)
01:00:37   6  ,MIN(ydate),MAX(ydate)
01:00:37   7  FROM svm6102
01:00:37   8  GROUP BY pair
01:00:37   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
aud_usd       19256	.95405	  1.02495 .957141438 1.02284247 2010-09-30 01:05:01 2011-01-03 00:55:00

Elapsed: 00:00:00.87
01:00:38 SQL> 
01:00:38 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
01:00:38 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.17
01:00:38 SQL> CREATE TABLE svm6122 COMPRESS AS
01:00:38   2  SELECT
01:00:38   3  pair
01:00:38   4  ,ydate
01:00:38   5  ,prdate
01:00:38   6  ,clse
01:00:38   7  -- g6 is important. I want to predict g6:
01:00:38   8  ,ld6 - clse g6
01:00:38   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
01:00:38  10  -- I want more attributes from the ones I derived above:
01:00:38  11  -- clse relation to moving-min
01:00:38  12  ,clse-min4  cm4
01:00:38  13  ,clse-min6  cm6
01:00:38  14  ,clse-min8  cm8
01:00:38  15  ,clse-min10 cm10
01:00:38  16  ,clse-min12 cm12
01:00:38  17  ,clse-min14 cm14
01:00:38  18  ,clse-min16 cm16
01:00:38  19  ,clse-min18 cm18
01:00:38  20  -- clse relation to moving-avg
01:00:38  21  ,clse-avg4  ca4
01:00:38  22  ,clse-avg6  ca6
01:00:38  23  ,clse-avg8  ca8
01:00:38  24  ,clse-avg10 ca10
01:00:38  25  ,clse-avg12 ca12
01:00:38  26  ,clse-avg14 ca14
01:00:38  27  ,clse-avg16 ca16
01:00:38  28  ,clse-avg18 ca18
01:00:38  29  -- clse relation to moving-max
01:00:38  30  ,clse-max4  cx4
01:00:38  31  ,clse-max6  cx6
01:00:38  32  ,clse-max8  cx8
01:00:38  33  ,clse-max10 cx10
01:00:38  34  ,clse-max12 cx12
01:00:38  35  ,clse-max14 cx14
01:00:38  36  ,clse-max16 cx16
01:00:38  37  ,clse-max18 cx18
01:00:38  38  -- Derive more attributes.
01:00:38  39  -- I want to use CORR() here to help SVM see the shape of the series.
01:00:38  40  -- But COVAR_POP is more stable:
01:00:38  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
01:00:38  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
01:00:38  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
01:00:38  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
01:00:38  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
01:00:38  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
01:00:38  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
01:00:38  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
01:00:38  49  -- Derive date related attributes:
01:00:38  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
01:00:38  51  ,0+TO_CHAR(ydate,'D')d
01:00:38  52  ,0+TO_CHAR(ydate,'W')w
01:00:38  53  -- mpm stands for minutes-past-midnight:
01:00:38  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
01:00:38  55  -- mph stands for minutes-past-hour:
01:00:38  56  ,0+TO_CHAR(ydate,'MI')mph
01:00:38  57  FROM svm6102
01:00:38  58  ORDER BY ydate
01:00:38  59  /

Table created.

Elapsed: 00:00:02.09
01:00:40 SQL> 
01:00:40 SQL> -- rpt
01:00:40 SQL> 
01:00:40 SQL> SELECT
01:00:40   2  pair
01:00:40   3  ,COUNT(pair)
01:00:40   4  ,MIN(clse),MAX(clse)
01:00:40   5  ,MIN(ydate),MAX(ydate)
01:00:40   6  FROM svm6122
01:00:40   7  GROUP BY pair
01:00:40   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
aud_usd       19256	.95405	  1.02495 2010-09-30 01:05:01 2011-01-03 00:55:00

Elapsed: 00:00:00.06
01:00:40 SQL> 
01:00:40 SQL> -- Prepare for derivation of NTILE based params:
01:00:40 SQL> 
01:00:40 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.28
01:00:40 SQL> CREATE TABLE svm6142 COMPRESS AS
01:00:40   2  SELECT
01:00:40   3  pair
01:00:40   4  ,ydate
01:00:40   5  ,prdate
01:00:40   6  ,clse
01:00:40   7  ,g6
01:00:40   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
01:00:40   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
01:00:40  10  ,CASE WHEN trend IS NULL THEN 1
01:00:40  11  	    WHEN trend =0      THEN 1
01:00:40  12  	    ELSE trend END trend
01:00:40  13  ,cm4
01:00:40  14  ,cm6
01:00:40  15  ,cm8
01:00:40  16  ,cm10
01:00:40  17  ,cm12
01:00:40  18  ,cm14
01:00:40  19  ,cm16
01:00:40  20  ,cm18
01:00:40  21  --
01:00:40  22  ,ca4
01:00:40  23  ,ca6
01:00:40  24  ,ca8
01:00:40  25  ,ca10
01:00:40  26  ,ca12
01:00:40  27  ,ca14
01:00:40  28  ,ca16
01:00:40  29  ,ca18
01:00:40  30  --
01:00:40  31  ,cx4
01:00:40  32  ,cx6
01:00:40  33  ,cx8
01:00:40  34  ,cx10
01:00:40  35  ,cx12
01:00:40  36  ,cx14
01:00:40  37  ,cx16
01:00:40  38  ,cx18
01:00:40  39  --
01:00:40  40  ,crr4
01:00:40  41  ,crr6
01:00:40  42  ,crr8
01:00:40  43  ,crr10
01:00:40  44  ,crr12
01:00:40  45  ,crr14
01:00:40  46  ,crr16
01:00:40  47  ,crr18
01:00:40  48  --
01:00:40  49  ,hh
01:00:40  50  ,d
01:00:40  51  ,w
01:00:40  52  ,mpm
01:00:40  53  ,mph
01:00:40  54  FROM svm6122
01:00:40  55  ORDER BY ydate
01:00:40  56  /

Table created.

Elapsed: 00:00:00.47
01:00:41 SQL> 
01:00:41 SQL> -- rpt
01:00:41 SQL> 
01:00:41 SQL> SELECT
01:00:41   2  pair
01:00:41   3  ,trend
01:00:41   4  ,gatt
01:00:41   5  ,COUNT(pair)
01:00:41   6  ,AVG(g6)
01:00:41   7  FROM svm6142
01:00:41   8  GROUP BY pair,trend,gatt
01:00:41   9  ORDER BY pair,trend,gatt
01:00:41  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5049  -.0021723
aud_usd 	-1 up	      3777 .003736289
aud_usd 	-1		33
aud_usd 	 1 nup	      6680 -.00210776
aud_usd 	 1 up	      3678 .004040246
aud_usd 	 1		39

6 rows selected.

Elapsed: 00:00:00.08
01:00:41 SQL> 
01:00:41 SQL> 
01:00:41 SQL> -- Derive NTILE based params:
01:00:41 SQL> 
01:00:41 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.18
01:00:41 SQL> CREATE TABLE svm6162 COMPRESS AS
01:00:41   2  SELECT
01:00:41   3  pair
01:00:41   4  ,ydate
01:00:41   5  ,prdate
01:00:41   6  ,clse
01:00:41   7  ,g6
01:00:41   8  ,gatt
01:00:41   9  ,gattn
01:00:41  10  ,trend
01:00:41  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
01:00:41  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
01:00:41  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
01:00:41  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
01:00:41  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
01:00:41  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
01:00:41  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
01:00:41  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
01:00:41  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
01:00:41  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
01:00:41  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
01:00:41  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
01:00:41  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
01:00:41  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
01:00:41  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
01:00:41  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
01:00:41  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
01:00:41  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
01:00:41  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
01:00:41  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
01:00:41  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
01:00:41  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
01:00:41  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
01:00:41  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
01:00:41  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
01:00:41  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
01:00:41  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
01:00:41  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
01:00:41  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
01:00:41  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
01:00:41  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
01:00:41  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
01:00:41  43  ,hh  att32
01:00:41  44  ,d   att33
01:00:41  45  ,w   att34
01:00:41  46  ,mpm att35
01:00:41  47  ,mph att36
01:00:41  48  ,trend att37
01:00:41  49  FROM svm6142
01:00:41  50  ORDER BY ydate
01:00:41  51  /

Table created.

Elapsed: 00:00:04.76
01:00:46 SQL> 
01:00:46 SQL> -- rpt
01:00:46 SQL> 
01:00:46 SQL> SELECT
01:00:46   2  pair
01:00:46   3  ,trend
01:00:46   4  ,gatt
01:00:46   5  ,COUNT(pair)
01:00:46   6  ,AVG(g6)
01:00:46   7  FROM svm6162
01:00:46   8  GROUP BY pair,trend,gatt
01:00:46   9  ORDER BY pair,trend,gatt
01:00:46  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5049  -.0021723
aud_usd 	-1 up	      3777 .003736289
aud_usd 	-1		33
aud_usd 	 1 nup	      6680 -.00210776
aud_usd 	 1 up	      3678 .004040246
aud_usd 	 1		39

6 rows selected.

Elapsed: 00:00:00.03
01:00:46 SQL> 
01:00:46 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
01:00:46 SQL> CREATE TABLE modsrc COMPRESS AS
01:00:46   2  SELECT
01:00:46   3  pair
01:00:46   4  ,ydate
01:00:46   5  ,prdate
01:00:46   6  ,trend
01:00:46   7  ,g6
01:00:46   8  ,gatt
01:00:46   9  ,gattn
01:00:46  10  FROM svm6162
01:00:46  11  /

Table created.

Elapsed: 00:00:00.08
01:00:46 SQL> 
01:00:46 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
01:00:46 SQL> 
01:00:46 SQL> DROP   TABLE aud_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
01:00:46 SQL> CREATE TABLE aud_ms610 COMPRESS AS
01:00:46   2  SELECT
01:00:46   3  ydate
01:00:46   4  ,trend aud_trend
01:00:46   5  ,g6    aud_g6
01:00:46   6  ,gatt  aud_gatt
01:00:46   7  ,gattn aud_gattn
01:00:46   8  FROM modsrc
01:00:46   9  /

Table created.

Elapsed: 00:00:00.07
01:00:46 SQL> 
01:00:46 SQL> ANALYZE TABLE aud_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
01:00:47 SQL> 
01:00:47 SQL> -- I need a copy of the attributes:
01:00:47 SQL> 
01:00:47 SQL> 
01:00:47 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.04
01:00:47 SQL> CREATE TABLE aud_att COMPRESS AS
01:00:47   2  SELECT
01:00:47   3  ydate
01:00:47   4  ,att00 aud_att00
01:00:47   5  ,att01 aud_att01
01:00:47   6  ,att02 aud_att02
01:00:47   7  ,att03 aud_att03
01:00:47   8  ,att04 aud_att04
01:00:47   9  ,att05 aud_att05
01:00:47  10  ,att06 aud_att06
01:00:47  11  ,att07 aud_att07
01:00:47  12  ,att08 aud_att08
01:00:47  13  ,att09 aud_att09
01:00:47  14  ,att10 aud_att10
01:00:47  15  ,att11 aud_att11
01:00:47  16  ,att12 aud_att12
01:00:47  17  ,att13 aud_att13
01:00:47  18  ,att14 aud_att14
01:00:47  19  ,att15 aud_att15
01:00:47  20  ,att16 aud_att16
01:00:47  21  ,att17 aud_att17
01:00:47  22  ,att18 aud_att18
01:00:47  23  ,att19 aud_att19
01:00:47  24  ,att20 aud_att20
01:00:47  25  ,att21 aud_att21
01:00:47  26  ,att22 aud_att22
01:00:47  27  ,att23 aud_att23
01:00:47  28  ,att24 aud_att24
01:00:47  29  ,att25 aud_att25
01:00:47  30  ,att26 aud_att26
01:00:47  31  ,att27 aud_att27
01:00:47  32  ,att28 aud_att28
01:00:47  33  ,att29 aud_att29
01:00:47  34  ,att30 aud_att30
01:00:47  35  ,att31 aud_att31
01:00:47  36  ,att32 aud_att32
01:00:47  37  ,att33 aud_att33
01:00:47  38  ,att34 aud_att34
01:00:47  39  ,att35 aud_att35
01:00:47  40  ,att36 aud_att36
01:00:47  41  ,att37 aud_att37
01:00:47  42  FROM svm6162
01:00:47  43  /

Table created.

Elapsed: 00:00:00.17
01:00:47 SQL> 
01:00:47 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
01:00:47 SQL> 
01:00:47 SQL> -- rpt
01:00:47 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19256

Elapsed: 00:00:00.85
01:00:48 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     19256

Elapsed: 00:00:00.00
01:00:48 SQL> 
01:00:48 SQL> --
01:00:48 SQL> -- gbp610.sql
01:00:48 SQL> --
01:00:48 SQL> 
01:00:48 SQL> -- Creates views and tables for backtesting a forex SVM strategy
01:00:48 SQL> 
01:00:48 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.41
01:00:48 SQL> 
01:00:48 SQL> -- I created di5min here:
01:00:48 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
01:00:48 SQL> 
01:00:48 SQL> CREATE OR REPLACE VIEW svm6102 AS
01:00:48   2  SELECT
01:00:48   3  pair
01:00:48   4  ,ydate
01:00:48   5  ,prdate
01:00:48   6  ,rownum rnum -- acts as t in my time-series
01:00:48   7  ,clse
01:00:48   8  -- Derive a bunch of attributes from clse, the latest price:
01:00:48   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
01:00:48  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
01:00:48  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
01:00:48  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
01:00:48  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
01:00:48  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
01:00:48  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
01:00:48  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
01:00:48  17  --
01:00:48  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
01:00:48  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
01:00:48  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
01:00:48  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
01:00:48  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
01:00:48  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
01:00:48  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
01:00:48  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
01:00:48  26  --
01:00:48  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
01:00:48  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
01:00:48  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
01:00:48  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
01:00:48  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
01:00:48  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
01:00:48  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
01:00:48  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
01:00:48  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
01:00:48  36  FROM di5min WHERE pair LIKE'%gbp%'
01:00:48  37  AND ydate > sysdate - 95
01:00:48  38  ORDER BY ydate
01:00:48  39  /

View created.

Elapsed: 00:00:00.04
01:00:49 SQL> 
01:00:49 SQL> -- rpt
01:00:49 SQL> 
01:00:49 SQL> SELECT
01:00:49   2  pair
01:00:49   3  ,COUNT(pair)
01:00:49   4  ,MIN(clse),MAX(clse)
01:00:49   5  ,MIN(avg6),MAX(avg6)
01:00:49   6  ,MIN(ydate),MAX(ydate)
01:00:49   7  FROM svm6102
01:00:49   8  GROUP BY pair
01:00:49   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
gbp_usd       19258   1.535325	   1.6295 1.53696747 1.62716986 2010-09-30 01:05:01 2011-01-03 00:55:00

Elapsed: 00:00:00.87
01:00:49 SQL> 
01:00:49 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
01:00:49 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.28
01:00:50 SQL> CREATE TABLE svm6122 COMPRESS AS
01:00:50   2  SELECT
01:00:50   3  pair
01:00:50   4  ,ydate
01:00:50   5  ,prdate
01:00:50   6  ,clse
01:00:50   7  -- g6 is important. I want to predict g6:
01:00:50   8  ,ld6 - clse g6
01:00:50   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
01:00:50  10  -- I want more attributes from the ones I derived above:
01:00:50  11  -- clse relation to moving-min
01:00:50  12  ,clse-min4  cm4
01:00:50  13  ,clse-min6  cm6
01:00:50  14  ,clse-min8  cm8
01:00:50  15  ,clse-min10 cm10
01:00:50  16  ,clse-min12 cm12
01:00:50  17  ,clse-min14 cm14
01:00:50  18  ,clse-min16 cm16
01:00:50  19  ,clse-min18 cm18
01:00:50  20  -- clse relation to moving-avg
01:00:50  21  ,clse-avg4  ca4
01:00:50  22  ,clse-avg6  ca6
01:00:50  23  ,clse-avg8  ca8
01:00:50  24  ,clse-avg10 ca10
01:00:50  25  ,clse-avg12 ca12
01:00:50  26  ,clse-avg14 ca14
01:00:50  27  ,clse-avg16 ca16
01:00:50  28  ,clse-avg18 ca18
01:00:50  29  -- clse relation to moving-max
01:00:50  30  ,clse-max4  cx4
01:00:50  31  ,clse-max6  cx6
01:00:50  32  ,clse-max8  cx8
01:00:50  33  ,clse-max10 cx10
01:00:50  34  ,clse-max12 cx12
01:00:50  35  ,clse-max14 cx14
01:00:50  36  ,clse-max16 cx16
01:00:50  37  ,clse-max18 cx18
01:00:50  38  -- Derive more attributes.
01:00:50  39  -- I want to use CORR() here to help SVM see the shape of the series.
01:00:50  40  -- But COVAR_POP is more stable:
01:00:50  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
01:00:50  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
01:00:50  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
01:00:50  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
01:00:50  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
01:00:50  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
01:00:50  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
01:00:50  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
01:00:50  49  -- Derive date related attributes:
01:00:50  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
01:00:50  51  ,0+TO_CHAR(ydate,'D')d
01:00:50  52  ,0+TO_CHAR(ydate,'W')w
01:00:50  53  -- mpm stands for minutes-past-midnight:
01:00:50  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
01:00:50  55  -- mph stands for minutes-past-hour:
01:00:50  56  ,0+TO_CHAR(ydate,'MI')mph
01:00:50  57  FROM svm6102
01:00:50  58  ORDER BY ydate
01:00:50  59  /

Table created.

Elapsed: 00:00:02.05
01:00:52 SQL> 
01:00:52 SQL> -- rpt
01:00:52 SQL> 
01:00:52 SQL> SELECT
01:00:52   2  pair
01:00:52   3  ,COUNT(pair)
01:00:52   4  ,MIN(clse),MAX(clse)
01:00:52   5  ,MIN(ydate),MAX(ydate)
01:00:52   6  FROM svm6122
01:00:52   7  GROUP BY pair
01:00:52   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
gbp_usd       19258   1.535325	   1.6295 2010-09-30 01:05:01 2011-01-03 00:55:00

Elapsed: 00:00:00.08
01:00:52 SQL> 
01:00:52 SQL> -- Prepare for derivation of NTILE based params:
01:00:52 SQL> 
01:00:52 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.23
01:00:52 SQL> CREATE TABLE svm6142 COMPRESS AS
01:00:52   2  SELECT
01:00:52   3  pair
01:00:52   4  ,ydate
01:00:52   5  ,prdate
01:00:52   6  ,clse
01:00:52   7  ,g6
01:00:52   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
01:00:52   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
01:00:52  10  ,CASE WHEN trend IS NULL THEN 1
01:00:52  11  	    WHEN trend =0      THEN 1
01:00:52  12  	    ELSE trend END trend
01:00:52  13  ,cm4
01:00:52  14  ,cm6
01:00:52  15  ,cm8
01:00:52  16  ,cm10
01:00:52  17  ,cm12
01:00:52  18  ,cm14
01:00:52  19  ,cm16
01:00:52  20  ,cm18
01:00:52  21  --
01:00:52  22  ,ca4
01:00:52  23  ,ca6
01:00:52  24  ,ca8
01:00:52  25  ,ca10
01:00:52  26  ,ca12
01:00:52  27  ,ca14
01:00:52  28  ,ca16
01:00:52  29  ,ca18
01:00:52  30  --
01:00:52  31  ,cx4
01:00:52  32  ,cx6
01:00:52  33  ,cx8
01:00:52  34  ,cx10
01:00:52  35  ,cx12
01:00:52  36  ,cx14
01:00:52  37  ,cx16
01:00:52  38  ,cx18
01:00:52  39  --
01:00:52  40  ,crr4
01:00:52  41  ,crr6
01:00:52  42  ,crr8
01:00:52  43  ,crr10
01:00:52  44  ,crr12
01:00:52  45  ,crr14
01:00:52  46  ,crr16
01:00:52  47  ,crr18
01:00:52  48  --
01:00:52  49  ,hh
01:00:52  50  ,d
01:00:52  51  ,w
01:00:52  52  ,mpm
01:00:52  53  ,mph
01:00:52  54  FROM svm6122
01:00:52  55  ORDER BY ydate
01:00:52  56  /

Table created.

Elapsed: 00:00:00.35
01:00:52 SQL> 
01:00:52 SQL> -- rpt
01:00:52 SQL> 
01:00:52 SQL> SELECT
01:00:52   2  pair
01:00:52   3  ,trend
01:00:52   4  ,gatt
01:00:52   5  ,COUNT(pair)
01:00:52   6  ,AVG(g6)
01:00:52   7  FROM svm6142
01:00:52   8  GROUP BY pair,trend,gatt
01:00:52   9  ORDER BY pair,trend,gatt
01:00:52  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6119 -.00268394
gbp_usd 	-1 up	      3481 .004326968
gbp_usd 	-1		38
gbp_usd 	 1 nup	      6066 -.00269876
gbp_usd 	 1 up	      3520 .004514325
gbp_usd 	 1		34

6 rows selected.

Elapsed: 00:00:00.07
01:00:52 SQL> 
01:00:52 SQL> 
01:00:52 SQL> -- Derive NTILE based params:
01:00:52 SQL> 
01:00:52 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.12
01:00:53 SQL> CREATE TABLE svm6162 COMPRESS AS
01:00:53   2  SELECT
01:00:53   3  pair
01:00:53   4  ,ydate
01:00:53   5  ,prdate
01:00:53   6  ,clse
01:00:53   7  ,g6
01:00:53   8  ,gatt
01:00:53   9  ,gattn
01:00:53  10  ,trend
01:00:53  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
01:00:53  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
01:00:53  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
01:00:53  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
01:00:53  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
01:00:53  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
01:00:53  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
01:00:53  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
01:00:53  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
01:00:53  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
01:00:53  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
01:00:53  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
01:00:53  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
01:00:53  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
01:00:53  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
01:00:53  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
01:00:53  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
01:00:53  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
01:00:53  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
01:00:53  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
01:00:53  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
01:00:53  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
01:00:53  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
01:00:53  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
01:00:53  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
01:00:53  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
01:00:53  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
01:00:53  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
01:00:53  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
01:00:53  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
01:00:53  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
01:00:53  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
01:00:53  43  ,hh  att32
01:00:53  44  ,d   att33
01:00:53  45  ,w   att34
01:00:53  46  ,mpm att35
01:00:53  47  ,mph att36
01:00:53  48  ,trend att37
01:00:53  49  FROM svm6142
01:00:53  50  ORDER BY ydate
01:00:53  51  /

Table created.

Elapsed: 00:00:04.68
01:00:57 SQL> 
01:00:57 SQL> -- rpt
01:00:57 SQL> 
01:00:57 SQL> SELECT
01:00:57   2  pair
01:00:57   3  ,trend
01:00:57   4  ,gatt
01:00:57   5  ,COUNT(pair)
01:00:57   6  ,AVG(g6)
01:00:57   7  FROM svm6162
01:00:57   8  GROUP BY pair,trend,gatt
01:00:57   9  ORDER BY pair,trend,gatt
01:00:57  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6119 -.00268394
gbp_usd 	-1 up	      3481 .004326968
gbp_usd 	-1		38
gbp_usd 	 1 nup	      6066 -.00269876
gbp_usd 	 1 up	      3520 .004514325
gbp_usd 	 1		34

6 rows selected.

Elapsed: 00:00:00.03
01:00:57 SQL> 
01:00:57 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.14
01:00:57 SQL> CREATE TABLE modsrc COMPRESS AS
01:00:57   2  SELECT
01:00:57   3  pair
01:00:57   4  ,ydate
01:00:57   5  ,prdate
01:00:57   6  ,trend
01:00:57   7  ,g6
01:00:57   8  ,gatt
01:00:57   9  ,gattn
01:00:57  10  FROM svm6162
01:00:57  11  /

Table created.

Elapsed: 00:00:00.08
01:00:58 SQL> 
01:00:58 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
01:00:58 SQL> 
01:00:58 SQL> DROP   TABLE gbp_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
01:00:58 SQL> CREATE TABLE gbp_ms610 COMPRESS AS
01:00:58   2  SELECT
01:00:58   3  ydate
01:00:58   4  ,trend gbp_trend
01:00:58   5  ,g6    gbp_g6
01:00:58   6  ,gatt  gbp_gatt
01:00:58   7  ,gattn gbp_gattn
01:00:58   8  FROM modsrc
01:00:58   9  /

Table created.

Elapsed: 00:00:00.07
01:00:58 SQL> 
01:00:58 SQL> ANALYZE TABLE gbp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
01:00:58 SQL> 
01:00:58 SQL> -- I need a copy of the attributes:
01:00:58 SQL> 
01:00:58 SQL> 
01:00:58 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.05
01:00:58 SQL> CREATE TABLE gbp_att COMPRESS AS
01:00:58   2  SELECT
01:00:58   3  ydate
01:00:58   4  ,att00 gbp_att00
01:00:58   5  ,att01 gbp_att01
01:00:58   6  ,att02 gbp_att02
01:00:58   7  ,att03 gbp_att03
01:00:58   8  ,att04 gbp_att04
01:00:58   9  ,att05 gbp_att05
01:00:58  10  ,att06 gbp_att06
01:00:58  11  ,att07 gbp_att07
01:00:58  12  ,att08 gbp_att08
01:00:58  13  ,att09 gbp_att09
01:00:58  14  ,att10 gbp_att10
01:00:58  15  ,att11 gbp_att11
01:00:58  16  ,att12 gbp_att12
01:00:58  17  ,att13 gbp_att13
01:00:58  18  ,att14 gbp_att14
01:00:58  19  ,att15 gbp_att15
01:00:58  20  ,att16 gbp_att16
01:00:58  21  ,att17 gbp_att17
01:00:58  22  ,att18 gbp_att18
01:00:58  23  ,att19 gbp_att19
01:00:58  24  ,att20 gbp_att20
01:00:58  25  ,att21 gbp_att21
01:00:58  26  ,att22 gbp_att22
01:00:58  27  ,att23 gbp_att23
01:00:58  28  ,att24 gbp_att24
01:00:58  29  ,att25 gbp_att25
01:00:58  30  ,att26 gbp_att26
01:00:58  31  ,att27 gbp_att27
01:00:58  32  ,att28 gbp_att28
01:00:58  33  ,att29 gbp_att29
01:00:58  34  ,att30 gbp_att30
01:00:58  35  ,att31 gbp_att31
01:00:58  36  ,att32 gbp_att32
01:00:58  37  ,att33 gbp_att33
01:00:58  38  ,att34 gbp_att34
01:00:58  39  ,att35 gbp_att35
01:00:58  40  ,att36 gbp_att36
01:00:58  41  ,att37 gbp_att37
01:00:58  42  FROM svm6162
01:00:58  43  /

Table created.

Elapsed: 00:00:00.17
01:00:58 SQL> 
01:00:58 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.44
01:00:59 SQL> 
01:00:59 SQL> -- rpt
01:00:59 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19258

Elapsed: 00:00:00.85
01:01:00 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     19258

Elapsed: 00:00:00.00
01:01:00 SQL> 
01:01:00 SQL> --
01:01:00 SQL> -- jpy610.sql
01:01:00 SQL> --
01:01:00 SQL> 
01:01:00 SQL> -- Creates views and tables for backtesting a forex SVM strategy
01:01:00 SQL> 
01:01:00 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.41
01:01:00 SQL> 
01:01:00 SQL> -- I created di5min here:
01:01:00 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
01:01:00 SQL> 
01:01:00 SQL> CREATE OR REPLACE VIEW svm6102 AS
01:01:00   2  SELECT
01:01:00   3  pair
01:01:00   4  ,ydate
01:01:00   5  ,prdate
01:01:00   6  ,rownum rnum -- acts as t in my time-series
01:01:00   7  ,clse
01:01:00   8  -- Derive a bunch of attributes from clse, the latest price:
01:01:00   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
01:01:00  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
01:01:00  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
01:01:00  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
01:01:00  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
01:01:00  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
01:01:00  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
01:01:00  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
01:01:00  17  --
01:01:00  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
01:01:00  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
01:01:00  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
01:01:00  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
01:01:00  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
01:01:00  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
01:01:00  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
01:01:00  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
01:01:00  26  --
01:01:00  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
01:01:00  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
01:01:00  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
01:01:00  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
01:01:00  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
01:01:00  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
01:01:00  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
01:01:00  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
01:01:00  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
01:01:00  36  FROM di5min WHERE pair LIKE'%jpy%'
01:01:00  37  AND ydate > sysdate - 95
01:01:00  38  ORDER BY ydate
01:01:00  39  /

View created.

Elapsed: 00:00:00.04
01:01:00 SQL> 
01:01:00 SQL> -- rpt
01:01:00 SQL> 
01:01:00 SQL> SELECT
01:01:00   2  pair
01:01:00   3  ,COUNT(pair)
01:01:00   4  ,MIN(clse),MAX(clse)
01:01:00   5  ,MIN(avg6),MAX(avg6)
01:01:00   6  ,MIN(ydate),MAX(ydate)
01:01:00   7  FROM svm6102
01:01:00   8  GROUP BY pair
01:01:00   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_jpy       19256	 80.25	   84.485 80.3595205 84.3105479 2010-09-30 01:05:01 2011-01-03 00:55:00

Elapsed: 00:00:00.90
01:01:01 SQL> 
01:01:01 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
01:01:01 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.24
01:01:01 SQL> CREATE TABLE svm6122 COMPRESS AS
01:01:01   2  SELECT
01:01:01   3  pair
01:01:01   4  ,ydate
01:01:01   5  ,prdate
01:01:01   6  ,clse
01:01:01   7  -- g6 is important. I want to predict g6:
01:01:01   8  ,ld6 - clse g6
01:01:01   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
01:01:01  10  -- I want more attributes from the ones I derived above:
01:01:01  11  -- clse relation to moving-min
01:01:01  12  ,clse-min4  cm4
01:01:01  13  ,clse-min6  cm6
01:01:01  14  ,clse-min8  cm8
01:01:01  15  ,clse-min10 cm10
01:01:01  16  ,clse-min12 cm12
01:01:01  17  ,clse-min14 cm14
01:01:01  18  ,clse-min16 cm16
01:01:01  19  ,clse-min18 cm18
01:01:01  20  -- clse relation to moving-avg
01:01:01  21  ,clse-avg4  ca4
01:01:01  22  ,clse-avg6  ca6
01:01:01  23  ,clse-avg8  ca8
01:01:01  24  ,clse-avg10 ca10
01:01:01  25  ,clse-avg12 ca12
01:01:01  26  ,clse-avg14 ca14
01:01:01  27  ,clse-avg16 ca16
01:01:01  28  ,clse-avg18 ca18
01:01:01  29  -- clse relation to moving-max
01:01:01  30  ,clse-max4  cx4
01:01:01  31  ,clse-max6  cx6
01:01:01  32  ,clse-max8  cx8
01:01:01  33  ,clse-max10 cx10
01:01:01  34  ,clse-max12 cx12
01:01:01  35  ,clse-max14 cx14
01:01:01  36  ,clse-max16 cx16
01:01:01  37  ,clse-max18 cx18
01:01:01  38  -- Derive more attributes.
01:01:01  39  -- I want to use CORR() here to help SVM see the shape of the series.
01:01:01  40  -- But COVAR_POP is more stable:
01:01:01  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
01:01:01  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
01:01:01  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
01:01:01  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
01:01:01  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
01:01:01  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
01:01:01  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
01:01:01  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
01:01:01  49  -- Derive date related attributes:
01:01:01  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
01:01:01  51  ,0+TO_CHAR(ydate,'D')d
01:01:01  52  ,0+TO_CHAR(ydate,'W')w
01:01:01  53  -- mpm stands for minutes-past-midnight:
01:01:01  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
01:01:01  55  -- mph stands for minutes-past-hour:
01:01:01  56  ,0+TO_CHAR(ydate,'MI')mph
01:01:01  57  FROM svm6102
01:01:01  58  ORDER BY ydate
01:01:01  59  /

Table created.

Elapsed: 00:00:02.04
01:01:03 SQL> 
01:01:03 SQL> -- rpt
01:01:03 SQL> 
01:01:03 SQL> SELECT
01:01:03   2  pair
01:01:03   3  ,COUNT(pair)
01:01:03   4  ,MIN(clse),MAX(clse)
01:01:03   5  ,MIN(ydate),MAX(ydate)
01:01:03   6  FROM svm6122
01:01:03   7  GROUP BY pair
01:01:03   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_jpy       19256	 80.25	   84.485 2010-09-30 01:05:01 2011-01-03 00:55:00

Elapsed: 00:00:00.09
01:01:03 SQL> 
01:01:03 SQL> -- Prepare for derivation of NTILE based params:
01:01:03 SQL> 
01:01:03 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.28
01:01:04 SQL> CREATE TABLE svm6142 COMPRESS AS
01:01:04   2  SELECT
01:01:04   3  pair
01:01:04   4  ,ydate
01:01:04   5  ,prdate
01:01:04   6  ,clse
01:01:04   7  ,g6
01:01:04   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
01:01:04   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
01:01:04  10  ,CASE WHEN trend IS NULL THEN 1
01:01:04  11  	    WHEN trend =0      THEN 1
01:01:04  12  	    ELSE trend END trend
01:01:04  13  ,cm4
01:01:04  14  ,cm6
01:01:04  15  ,cm8
01:01:04  16  ,cm10
01:01:04  17  ,cm12
01:01:04  18  ,cm14
01:01:04  19  ,cm16
01:01:04  20  ,cm18
01:01:04  21  --
01:01:04  22  ,ca4
01:01:04  23  ,ca6
01:01:04  24  ,ca8
01:01:04  25  ,ca10
01:01:04  26  ,ca12
01:01:04  27  ,ca14
01:01:04  28  ,ca16
01:01:04  29  ,ca18
01:01:04  30  --
01:01:04  31  ,cx4
01:01:04  32  ,cx6
01:01:04  33  ,cx8
01:01:04  34  ,cx10
01:01:04  35  ,cx12
01:01:04  36  ,cx14
01:01:04  37  ,cx16
01:01:04  38  ,cx18
01:01:04  39  --
01:01:04  40  ,crr4
01:01:04  41  ,crr6
01:01:04  42  ,crr8
01:01:04  43  ,crr10
01:01:04  44  ,crr12
01:01:04  45  ,crr14
01:01:04  46  ,crr16
01:01:04  47  ,crr18
01:01:04  48  --
01:01:04  49  ,hh
01:01:04  50  ,d
01:01:04  51  ,w
01:01:04  52  ,mpm
01:01:04  53  ,mph
01:01:04  54  FROM svm6122
01:01:04  55  ORDER BY ydate
01:01:04  56  /

Table created.

Elapsed: 00:00:00.37
01:01:04 SQL> 
01:01:04 SQL> -- rpt
01:01:04 SQL> 
01:01:04 SQL> SELECT
01:01:04   2  pair
01:01:04   3  ,trend
01:01:04   4  ,gatt
01:01:04   5  ,COUNT(pair)
01:01:04   6  ,AVG(g6)
01:01:04   7  FROM svm6142
01:01:04   8  GROUP BY pair,trend,gatt
01:01:04   9  ORDER BY pair,trend,gatt
01:01:04  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5257 -.16645982
usd_jpy 	-1 up	      4842 .165163254
usd_jpy 	-1		43
usd_jpy 	 1 nup	      4971   -.155939
usd_jpy 	 1 up	      4114 .166208458
usd_jpy 	 1		29

6 rows selected.

Elapsed: 00:00:00.05
01:01:04 SQL> 
01:01:04 SQL> 
01:01:04 SQL> -- Derive NTILE based params:
01:01:04 SQL> 
01:01:04 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.18
01:01:04 SQL> CREATE TABLE svm6162 COMPRESS AS
01:01:04   2  SELECT
01:01:04   3  pair
01:01:04   4  ,ydate
01:01:04   5  ,prdate
01:01:04   6  ,clse
01:01:04   7  ,g6
01:01:04   8  ,gatt
01:01:04   9  ,gattn
01:01:04  10  ,trend
01:01:04  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
01:01:04  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
01:01:04  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
01:01:04  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
01:01:04  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
01:01:04  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
01:01:04  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
01:01:04  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
01:01:04  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
01:01:04  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
01:01:04  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
01:01:04  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
01:01:04  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
01:01:04  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
01:01:04  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
01:01:04  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
01:01:04  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
01:01:04  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
01:01:04  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
01:01:04  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
01:01:04  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
01:01:04  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
01:01:04  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
01:01:04  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
01:01:04  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
01:01:04  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
01:01:04  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
01:01:04  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
01:01:04  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
01:01:04  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
01:01:04  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
01:01:04  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
01:01:04  43  ,hh  att32
01:01:04  44  ,d   att33
01:01:04  45  ,w   att34
01:01:04  46  ,mpm att35
01:01:04  47  ,mph att36
01:01:04  48  ,trend att37
01:01:04  49  FROM svm6142
01:01:04  50  ORDER BY ydate
01:01:04  51  /

Table created.

Elapsed: 00:00:04.80
01:01:09 SQL> 
01:01:09 SQL> -- rpt
01:01:09 SQL> 
01:01:09 SQL> SELECT
01:01:09   2  pair
01:01:09   3  ,trend
01:01:09   4  ,gatt
01:01:09   5  ,COUNT(pair)
01:01:09   6  ,AVG(g6)
01:01:09   7  FROM svm6162
01:01:09   8  GROUP BY pair,trend,gatt
01:01:09   9  ORDER BY pair,trend,gatt
01:01:09  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5257 -.16645982
usd_jpy 	-1 up	      4842 .165163254
usd_jpy 	-1		43
usd_jpy 	 1 nup	      4971   -.155939
usd_jpy 	 1 up	      4114 .166208458
usd_jpy 	 1		29

6 rows selected.

Elapsed: 00:00:00.03
01:01:09 SQL> 
01:01:09 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
01:01:09 SQL> CREATE TABLE modsrc COMPRESS AS
01:01:09   2  SELECT
01:01:09   3  pair
01:01:09   4  ,ydate
01:01:09   5  ,prdate
01:01:09   6  ,trend
01:01:09   7  ,g6
01:01:09   8  ,gatt
01:01:09   9  ,gattn
01:01:09  10  FROM svm6162
01:01:09  11  /

Table created.

Elapsed: 00:00:00.08
01:01:09 SQL> 
01:01:09 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.22
01:01:09 SQL> 
01:01:09 SQL> DROP   TABLE jpy_ms610 ;

Table dropped.

Elapsed: 00:00:00.06
01:01:09 SQL> CREATE TABLE jpy_ms610 COMPRESS AS
01:01:09   2  SELECT
01:01:09   3  ydate
01:01:09   4  ,trend jpy_trend
01:01:09   5  ,g6    jpy_g6
01:01:09   6  ,gatt  jpy_gatt
01:01:09   7  ,gattn jpy_gattn
01:01:09   8  FROM modsrc
01:01:09   9  /

Table created.

Elapsed: 00:00:00.07
01:01:10 SQL> 
01:01:10 SQL> ANALYZE TABLE jpy_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
01:01:10 SQL> 
01:01:10 SQL> -- I need a copy of the attributes:
01:01:10 SQL> 
01:01:10 SQL> 
01:01:10 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.04
01:01:10 SQL> CREATE TABLE jpy_att COMPRESS AS
01:01:10   2  SELECT
01:01:10   3  ydate
01:01:10   4  ,att00 jpy_att00
01:01:10   5  ,att01 jpy_att01
01:01:10   6  ,att02 jpy_att02
01:01:10   7  ,att03 jpy_att03
01:01:10   8  ,att04 jpy_att04
01:01:10   9  ,att05 jpy_att05
01:01:10  10  ,att06 jpy_att06
01:01:10  11  ,att07 jpy_att07
01:01:10  12  ,att08 jpy_att08
01:01:10  13  ,att09 jpy_att09
01:01:10  14  ,att10 jpy_att10
01:01:10  15  ,att11 jpy_att11
01:01:10  16  ,att12 jpy_att12
01:01:10  17  ,att13 jpy_att13
01:01:10  18  ,att14 jpy_att14
01:01:10  19  ,att15 jpy_att15
01:01:10  20  ,att16 jpy_att16
01:01:10  21  ,att17 jpy_att17
01:01:10  22  ,att18 jpy_att18
01:01:10  23  ,att19 jpy_att19
01:01:10  24  ,att20 jpy_att20
01:01:10  25  ,att21 jpy_att21
01:01:10  26  ,att22 jpy_att22
01:01:10  27  ,att23 jpy_att23
01:01:10  28  ,att24 jpy_att24
01:01:10  29  ,att25 jpy_att25
01:01:10  30  ,att26 jpy_att26
01:01:10  31  ,att27 jpy_att27
01:01:10  32  ,att28 jpy_att28
01:01:10  33  ,att29 jpy_att29
01:01:10  34  ,att30 jpy_att30
01:01:10  35  ,att31 jpy_att31
01:01:10  36  ,att32 jpy_att32
01:01:10  37  ,att33 jpy_att33
01:01:10  38  ,att34 jpy_att34
01:01:10  39  ,att35 jpy_att35
01:01:10  40  ,att36 jpy_att36
01:01:10  41  ,att37 jpy_att37
01:01:10  42  FROM svm6162
01:01:10  43  /

Table created.

Elapsed: 00:00:00.18
01:01:10 SQL> 
01:01:10 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.51
01:01:10 SQL> 
01:01:10 SQL> -- rpt
01:01:10 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19256

Elapsed: 00:00:00.89
01:01:11 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     19256

Elapsed: 00:00:00.01
01:01:11 SQL> 
01:01:11 SQL> --
01:01:11 SQL> -- cad610.sql
01:01:11 SQL> --
01:01:11 SQL> 
01:01:11 SQL> -- Creates views and tables for backtesting a forex SVM strategy
01:01:11 SQL> 
01:01:11 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.46
01:01:12 SQL> 
01:01:12 SQL> -- I created di5min here:
01:01:12 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
01:01:12 SQL> 
01:01:12 SQL> CREATE OR REPLACE VIEW svm6102 AS
01:01:12   2  SELECT
01:01:12   3  pair
01:01:12   4  ,ydate
01:01:12   5  ,prdate
01:01:12   6  ,rownum rnum -- acts as t in my time-series
01:01:12   7  ,clse
01:01:12   8  -- Derive a bunch of attributes from clse, the latest price:
01:01:12   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
01:01:12  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
01:01:12  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
01:01:12  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
01:01:12  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
01:01:12  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
01:01:12  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
01:01:12  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
01:01:12  17  --
01:01:12  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
01:01:12  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
01:01:12  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
01:01:12  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
01:01:12  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
01:01:12  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
01:01:12  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
01:01:12  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
01:01:12  26  --
01:01:12  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
01:01:12  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
01:01:12  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
01:01:12  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
01:01:12  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
01:01:12  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
01:01:12  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
01:01:12  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
01:01:12  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
01:01:12  36  FROM di5min WHERE pair LIKE'%cad%'
01:01:12  37  AND ydate > sysdate - 95
01:01:12  38  ORDER BY ydate
01:01:12  39  /

View created.

Elapsed: 00:00:00.06
01:01:12 SQL> 
01:01:12 SQL> -- rpt
01:01:12 SQL> 
01:01:12 SQL> SELECT
01:01:12   2  pair
01:01:12   3  ,COUNT(pair)
01:01:12   4  ,MIN(clse),MAX(clse)
01:01:12   5  ,MIN(avg6),MAX(avg6)
01:01:12   6  ,MIN(ydate),MAX(ydate)
01:01:12   7  FROM svm6102
01:01:12   8  GROUP BY pair
01:01:12   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_cad       19256    .992825	   1.0355 .995113185 1.03341846 2010-09-30 01:05:01 2011-01-03 00:55:00

Elapsed: 00:00:00.84
01:01:13 SQL> 
01:01:13 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
01:01:13 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.20
01:01:13 SQL> CREATE TABLE svm6122 COMPRESS AS
01:01:13   2  SELECT
01:01:13   3  pair
01:01:13   4  ,ydate
01:01:13   5  ,prdate
01:01:13   6  ,clse
01:01:13   7  -- g6 is important. I want to predict g6:
01:01:13   8  ,ld6 - clse g6
01:01:13   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
01:01:13  10  -- I want more attributes from the ones I derived above:
01:01:13  11  -- clse relation to moving-min
01:01:13  12  ,clse-min4  cm4
01:01:13  13  ,clse-min6  cm6
01:01:13  14  ,clse-min8  cm8
01:01:13  15  ,clse-min10 cm10
01:01:13  16  ,clse-min12 cm12
01:01:13  17  ,clse-min14 cm14
01:01:13  18  ,clse-min16 cm16
01:01:13  19  ,clse-min18 cm18
01:01:13  20  -- clse relation to moving-avg
01:01:13  21  ,clse-avg4  ca4
01:01:13  22  ,clse-avg6  ca6
01:01:13  23  ,clse-avg8  ca8
01:01:13  24  ,clse-avg10 ca10
01:01:13  25  ,clse-avg12 ca12
01:01:13  26  ,clse-avg14 ca14
01:01:13  27  ,clse-avg16 ca16
01:01:13  28  ,clse-avg18 ca18
01:01:13  29  -- clse relation to moving-max
01:01:13  30  ,clse-max4  cx4
01:01:13  31  ,clse-max6  cx6
01:01:13  32  ,clse-max8  cx8
01:01:13  33  ,clse-max10 cx10
01:01:13  34  ,clse-max12 cx12
01:01:13  35  ,clse-max14 cx14
01:01:13  36  ,clse-max16 cx16
01:01:13  37  ,clse-max18 cx18
01:01:13  38  -- Derive more attributes.
01:01:13  39  -- I want to use CORR() here to help SVM see the shape of the series.
01:01:13  40  -- But COVAR_POP is more stable:
01:01:13  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
01:01:13  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
01:01:13  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
01:01:13  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
01:01:13  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
01:01:13  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
01:01:13  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
01:01:13  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
01:01:13  49  -- Derive date related attributes:
01:01:13  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
01:01:13  51  ,0+TO_CHAR(ydate,'D')d
01:01:13  52  ,0+TO_CHAR(ydate,'W')w
01:01:13  53  -- mpm stands for minutes-past-midnight:
01:01:13  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
01:01:13  55  -- mph stands for minutes-past-hour:
01:01:13  56  ,0+TO_CHAR(ydate,'MI')mph
01:01:13  57  FROM svm6102
01:01:13  58  ORDER BY ydate
01:01:13  59  /

Table created.

Elapsed: 00:00:02.10
01:01:15 SQL> 
01:01:15 SQL> -- rpt
01:01:15 SQL> 
01:01:15 SQL> SELECT
01:01:15   2  pair
01:01:15   3  ,COUNT(pair)
01:01:15   4  ,MIN(clse),MAX(clse)
01:01:15   5  ,MIN(ydate),MAX(ydate)
01:01:15   6  FROM svm6122
01:01:15   7  GROUP BY pair
01:01:15   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_cad       19256    .992825	   1.0355 2010-09-30 01:05:01 2011-01-03 00:55:00

Elapsed: 00:00:00.11
01:01:15 SQL> 
01:01:15 SQL> -- Prepare for derivation of NTILE based params:
01:01:15 SQL> 
01:01:15 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.18
01:01:15 SQL> CREATE TABLE svm6142 COMPRESS AS
01:01:15   2  SELECT
01:01:15   3  pair
01:01:15   4  ,ydate
01:01:15   5  ,prdate
01:01:15   6  ,clse
01:01:15   7  ,g6
01:01:15   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
01:01:15   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
01:01:15  10  ,CASE WHEN trend IS NULL THEN 1
01:01:15  11  	    WHEN trend =0      THEN 1
01:01:15  12  	    ELSE trend END trend
01:01:15  13  ,cm4
01:01:15  14  ,cm6
01:01:15  15  ,cm8
01:01:15  16  ,cm10
01:01:15  17  ,cm12
01:01:15  18  ,cm14
01:01:15  19  ,cm16
01:01:15  20  ,cm18
01:01:15  21  --
01:01:15  22  ,ca4
01:01:15  23  ,ca6
01:01:15  24  ,ca8
01:01:15  25  ,ca10
01:01:15  26  ,ca12
01:01:15  27  ,ca14
01:01:15  28  ,ca16
01:01:15  29  ,ca18
01:01:15  30  --
01:01:15  31  ,cx4
01:01:15  32  ,cx6
01:01:15  33  ,cx8
01:01:15  34  ,cx10
01:01:15  35  ,cx12
01:01:15  36  ,cx14
01:01:15  37  ,cx16
01:01:15  38  ,cx18
01:01:15  39  --
01:01:15  40  ,crr4
01:01:15  41  ,crr6
01:01:15  42  ,crr8
01:01:15  43  ,crr10
01:01:15  44  ,crr12
01:01:15  45  ,crr14
01:01:15  46  ,crr16
01:01:15  47  ,crr18
01:01:15  48  --
01:01:15  49  ,hh
01:01:15  50  ,d
01:01:15  51  ,w
01:01:15  52  ,mpm
01:01:15  53  ,mph
01:01:15  54  FROM svm6122
01:01:15  55  ORDER BY ydate
01:01:15  56  /

Table created.

Elapsed: 00:00:00.37
01:01:16 SQL> 
01:01:16 SQL> -- rpt
01:01:16 SQL> 
01:01:16 SQL> SELECT
01:01:16   2  pair
01:01:16   3  ,trend
01:01:16   4  ,gatt
01:01:16   5  ,COUNT(pair)
01:01:16   6  ,AVG(g6)
01:01:16   7  FROM svm6142
01:01:16   8  GROUP BY pair,trend,gatt
01:01:16   9  ORDER BY pair,trend,gatt
01:01:16  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7285 -.00131697
usd_cad 	-1 up	      3000 .003056492
usd_cad 	-1		58
usd_cad 	 1 nup	      6594 -.00163065
usd_cad 	 1 up	      2305 .003653973
usd_cad 	 1		14

6 rows selected.

Elapsed: 00:00:00.05
01:01:16 SQL> 
01:01:16 SQL> 
01:01:16 SQL> -- Derive NTILE based params:
01:01:16 SQL> 
01:01:16 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.18
01:01:16 SQL> CREATE TABLE svm6162 COMPRESS AS
01:01:16   2  SELECT
01:01:16   3  pair
01:01:16   4  ,ydate
01:01:16   5  ,prdate
01:01:16   6  ,clse
01:01:16   7  ,g6
01:01:16   8  ,gatt
01:01:16   9  ,gattn
01:01:16  10  ,trend
01:01:16  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
01:01:16  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
01:01:16  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
01:01:16  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
01:01:16  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
01:01:16  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
01:01:16  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
01:01:16  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
01:01:16  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
01:01:16  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
01:01:16  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
01:01:16  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
01:01:16  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
01:01:16  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
01:01:16  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
01:01:16  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
01:01:16  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
01:01:16  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
01:01:16  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
01:01:16  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
01:01:16  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
01:01:16  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
01:01:16  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
01:01:16  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
01:01:16  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
01:01:16  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
01:01:16  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
01:01:16  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
01:01:16  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
01:01:16  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
01:01:16  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
01:01:16  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
01:01:16  43  ,hh  att32
01:01:16  44  ,d   att33
01:01:16  45  ,w   att34
01:01:16  46  ,mpm att35
01:01:16  47  ,mph att36
01:01:16  48  ,trend att37
01:01:16  49  FROM svm6142
01:01:16  50  ORDER BY ydate
01:01:16  51  /

Table created.

Elapsed: 00:00:04.72
01:01:21 SQL> 
01:01:21 SQL> -- rpt
01:01:21 SQL> 
01:01:21 SQL> SELECT
01:01:21   2  pair
01:01:21   3  ,trend
01:01:21   4  ,gatt
01:01:21   5  ,COUNT(pair)
01:01:21   6  ,AVG(g6)
01:01:21   7  FROM svm6162
01:01:21   8  GROUP BY pair,trend,gatt
01:01:21   9  ORDER BY pair,trend,gatt
01:01:21  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7285 -.00131697
usd_cad 	-1 up	      3000 .003056492
usd_cad 	-1		58
usd_cad 	 1 nup	      6594 -.00163065
usd_cad 	 1 up	      2305 .003653973
usd_cad 	 1		14

6 rows selected.

Elapsed: 00:00:00.03
01:01:21 SQL> 
01:01:21 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.16
01:01:21 SQL> CREATE TABLE modsrc COMPRESS AS
01:01:21   2  SELECT
01:01:21   3  pair
01:01:21   4  ,ydate
01:01:21   5  ,prdate
01:01:21   6  ,trend
01:01:21   7  ,g6
01:01:21   8  ,gatt
01:01:21   9  ,gattn
01:01:21  10  FROM svm6162
01:01:21  11  /

Table created.

Elapsed: 00:00:00.08
01:01:21 SQL> 
01:01:21 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
01:01:21 SQL> 
01:01:21 SQL> DROP   TABLE cad_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
01:01:21 SQL> CREATE TABLE cad_ms610 COMPRESS AS
01:01:21   2  SELECT
01:01:21   3  ydate
01:01:21   4  ,trend cad_trend
01:01:21   5  ,g6    cad_g6
01:01:21   6  ,gatt  cad_gatt
01:01:21   7  ,gattn cad_gattn
01:01:21   8  FROM modsrc
01:01:21   9  /

Table created.

Elapsed: 00:00:00.07
01:01:21 SQL> 
01:01:21 SQL> ANALYZE TABLE cad_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
01:01:21 SQL> 
01:01:21 SQL> -- I need a copy of the attributes:
01:01:21 SQL> 
01:01:21 SQL> 
01:01:21 SQL> DROP   TABLE cad_att;

Table dropped.

Elapsed: 00:00:00.04
01:01:21 SQL> CREATE TABLE cad_att COMPRESS AS
01:01:21   2  SELECT
01:01:21   3  ydate
01:01:21   4  ,att00 cad_att00
01:01:21   5  ,att01 cad_att01
01:01:21   6  ,att02 cad_att02
01:01:21   7  ,att03 cad_att03
01:01:21   8  ,att04 cad_att04
01:01:21   9  ,att05 cad_att05
01:01:21  10  ,att06 cad_att06
01:01:21  11  ,att07 cad_att07
01:01:21  12  ,att08 cad_att08
01:01:21  13  ,att09 cad_att09
01:01:21  14  ,att10 cad_att10
01:01:21  15  ,att11 cad_att11
01:01:21  16  ,att12 cad_att12
01:01:21  17  ,att13 cad_att13
01:01:21  18  ,att14 cad_att14
01:01:21  19  ,att15 cad_att15
01:01:21  20  ,att16 cad_att16
01:01:21  21  ,att17 cad_att17
01:01:21  22  ,att18 cad_att18
01:01:21  23  ,att19 cad_att19
01:01:21  24  ,att20 cad_att20
01:01:21  25  ,att21 cad_att21
01:01:21  26  ,att22 cad_att22
01:01:21  27  ,att23 cad_att23
01:01:21  28  ,att24 cad_att24
01:01:21  29  ,att25 cad_att25
01:01:21  30  ,att26 cad_att26
01:01:21  31  ,att27 cad_att27
01:01:21  32  ,att28 cad_att28
01:01:21  33  ,att29 cad_att29
01:01:21  34  ,att30 cad_att30
01:01:21  35  ,att31 cad_att31
01:01:21  36  ,att32 cad_att32
01:01:21  37  ,att33 cad_att33
01:01:21  38  ,att34 cad_att34
01:01:21  39  ,att35 cad_att35
01:01:21  40  ,att36 cad_att36
01:01:21  41  ,att37 cad_att37
01:01:21  42  FROM svm6162
01:01:21  43  /

Table created.

Elapsed: 00:00:00.18
01:01:22 SQL> 
01:01:22 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.41
01:01:22 SQL> 
01:01:22 SQL> -- rpt
01:01:22 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19256

Elapsed: 00:00:00.82
01:01:23 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
     19256

Elapsed: 00:00:00.01
01:01:23 SQL> 
01:01:23 SQL> --
01:01:23 SQL> -- chf610.sql
01:01:23 SQL> --
01:01:23 SQL> 
01:01:23 SQL> -- Creates views and tables for backtesting a forex SVM strategy
01:01:23 SQL> 
01:01:23 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:01.12
01:01:24 SQL> 
01:01:24 SQL> -- I created di5min here:
01:01:24 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
01:01:24 SQL> 
01:01:24 SQL> CREATE OR REPLACE VIEW svm6102 AS
01:01:24   2  SELECT
01:01:24   3  pair
01:01:24   4  ,ydate
01:01:24   5  ,prdate
01:01:24   6  ,rownum rnum -- acts as t in my time-series
01:01:24   7  ,clse
01:01:24   8  -- Derive a bunch of attributes from clse, the latest price:
01:01:24   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
01:01:24  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
01:01:24  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
01:01:24  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
01:01:24  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
01:01:24  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
01:01:24  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
01:01:24  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
01:01:24  17  --
01:01:24  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
01:01:24  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
01:01:24  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
01:01:24  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
01:01:24  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
01:01:24  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
01:01:24  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
01:01:24  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
01:01:24  26  --
01:01:24  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
01:01:24  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
01:01:24  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
01:01:24  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
01:01:24  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
01:01:24  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
01:01:24  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
01:01:24  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
01:01:24  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
01:01:24  36  FROM di5min WHERE pair LIKE'%chf%'
01:01:24  37  AND ydate > sysdate - 95
01:01:24  38  ORDER BY ydate
01:01:24  39  /

View created.

Elapsed: 00:00:00.04
01:01:24 SQL> 
01:01:24 SQL> -- rpt
01:01:24 SQL> 
01:01:24 SQL> SELECT
01:01:24   2  pair
01:01:24   3  ,COUNT(pair)
01:01:24   4  ,MIN(clse),MAX(clse)
01:01:24   5  ,MIN(avg6),MAX(avg6)
01:01:24   6  ,MIN(ydate),MAX(ydate)
01:01:24   7  FROM svm6102
01:01:24   8  GROUP BY pair
01:01:24   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_chf       19259    .931675	  1.00635 .933969692 1.00498151 2010-09-30 01:05:01 2011-01-03 00:55:00

Elapsed: 00:00:00.86
01:01:25 SQL> 
01:01:25 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
01:01:25 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.20
01:01:25 SQL> CREATE TABLE svm6122 COMPRESS AS
01:01:25   2  SELECT
01:01:25   3  pair
01:01:25   4  ,ydate
01:01:25   5  ,prdate
01:01:25   6  ,clse
01:01:25   7  -- g6 is important. I want to predict g6:
01:01:25   8  ,ld6 - clse g6
01:01:25   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
01:01:25  10  -- I want more attributes from the ones I derived above:
01:01:25  11  -- clse relation to moving-min
01:01:25  12  ,clse-min4  cm4
01:01:25  13  ,clse-min6  cm6
01:01:25  14  ,clse-min8  cm8
01:01:25  15  ,clse-min10 cm10
01:01:25  16  ,clse-min12 cm12
01:01:25  17  ,clse-min14 cm14
01:01:25  18  ,clse-min16 cm16
01:01:25  19  ,clse-min18 cm18
01:01:25  20  -- clse relation to moving-avg
01:01:25  21  ,clse-avg4  ca4
01:01:25  22  ,clse-avg6  ca6
01:01:25  23  ,clse-avg8  ca8
01:01:25  24  ,clse-avg10 ca10
01:01:25  25  ,clse-avg12 ca12
01:01:25  26  ,clse-avg14 ca14
01:01:25  27  ,clse-avg16 ca16
01:01:25  28  ,clse-avg18 ca18
01:01:25  29  -- clse relation to moving-max
01:01:25  30  ,clse-max4  cx4
01:01:25  31  ,clse-max6  cx6
01:01:25  32  ,clse-max8  cx8
01:01:25  33  ,clse-max10 cx10
01:01:25  34  ,clse-max12 cx12
01:01:25  35  ,clse-max14 cx14
01:01:25  36  ,clse-max16 cx16
01:01:25  37  ,clse-max18 cx18
01:01:25  38  -- Derive more attributes.
01:01:25  39  -- I want to use CORR() here to help SVM see the shape of the series.
01:01:25  40  -- But COVAR_POP is more stable:
01:01:25  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
01:01:25  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
01:01:25  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
01:01:25  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
01:01:25  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
01:01:25  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
01:01:25  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
01:01:25  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
01:01:25  49  -- Derive date related attributes:
01:01:25  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
01:01:25  51  ,0+TO_CHAR(ydate,'D')d
01:01:25  52  ,0+TO_CHAR(ydate,'W')w
01:01:25  53  -- mpm stands for minutes-past-midnight:
01:01:25  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
01:01:25  55  -- mph stands for minutes-past-hour:
01:01:25  56  ,0+TO_CHAR(ydate,'MI')mph
01:01:25  57  FROM svm6102
01:01:25  58  ORDER BY ydate
01:01:25  59  /

Table created.

Elapsed: 00:00:02.01
01:01:27 SQL> 
01:01:27 SQL> -- rpt
01:01:27 SQL> 
01:01:27 SQL> SELECT
01:01:27   2  pair
01:01:27   3  ,COUNT(pair)
01:01:27   4  ,MIN(clse),MAX(clse)
01:01:27   5  ,MIN(ydate),MAX(ydate)
01:01:27   6  FROM svm6122
01:01:27   7  GROUP BY pair
01:01:27   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_chf       19259    .931675	  1.00635 2010-09-30 01:05:01 2011-01-03 00:55:00

Elapsed: 00:00:00.04
01:01:27 SQL> 
01:01:27 SQL> -- Prepare for derivation of NTILE based params:
01:01:27 SQL> 
01:01:27 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.21
01:01:27 SQL> CREATE TABLE svm6142 COMPRESS AS
01:01:27   2  SELECT
01:01:27   3  pair
01:01:27   4  ,ydate
01:01:27   5  ,prdate
01:01:27   6  ,clse
01:01:27   7  ,g6
01:01:27   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
01:01:27   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
01:01:27  10  ,CASE WHEN trend IS NULL THEN 1
01:01:27  11  	    WHEN trend =0      THEN 1
01:01:27  12  	    ELSE trend END trend
01:01:27  13  ,cm4
01:01:27  14  ,cm6
01:01:27  15  ,cm8
01:01:27  16  ,cm10
01:01:27  17  ,cm12
01:01:27  18  ,cm14
01:01:27  19  ,cm16
01:01:27  20  ,cm18
01:01:27  21  --
01:01:27  22  ,ca4
01:01:27  23  ,ca6
01:01:27  24  ,ca8
01:01:27  25  ,ca10
01:01:27  26  ,ca12
01:01:27  27  ,ca14
01:01:27  28  ,ca16
01:01:27  29  ,ca18
01:01:27  30  --
01:01:27  31  ,cx4
01:01:27  32  ,cx6
01:01:27  33  ,cx8
01:01:27  34  ,cx10
01:01:27  35  ,cx12
01:01:27  36  ,cx14
01:01:27  37  ,cx16
01:01:27  38  ,cx18
01:01:27  39  --
01:01:27  40  ,crr4
01:01:27  41  ,crr6
01:01:27  42  ,crr8
01:01:27  43  ,crr10
01:01:27  44  ,crr12
01:01:27  45  ,crr14
01:01:27  46  ,crr16
01:01:27  47  ,crr18
01:01:27  48  --
01:01:27  49  ,hh
01:01:27  50  ,d
01:01:27  51  ,w
01:01:27  52  ,mpm
01:01:27  53  ,mph
01:01:27  54  FROM svm6122
01:01:27  55  ORDER BY ydate
01:01:27  56  /

Table created.

Elapsed: 00:00:00.38
01:01:28 SQL> 
01:01:28 SQL> -- rpt
01:01:28 SQL> 
01:01:28 SQL> SELECT
01:01:28   2  pair
01:01:28   3  ,trend
01:01:28   4  ,gatt
01:01:28   5  ,COUNT(pair)
01:01:28   6  ,AVG(g6)
01:01:28   7  FROM svm6142
01:01:28   8  GROUP BY pair,trend,gatt
01:01:28   9  ORDER BY pair,trend,gatt
01:01:28  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7203 -.00200132
usd_chf 	-1 up	      3082 .003952661
usd_chf 	-1		27
usd_chf 	 1 nup	      6357  -.0016194
usd_chf 	 1 up	      2545 .003702415
usd_chf 	 1		45

6 rows selected.

Elapsed: 00:00:00.04
01:01:28 SQL> 
01:01:28 SQL> 
01:01:28 SQL> -- Derive NTILE based params:
01:01:28 SQL> 
01:01:28 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.13
01:01:28 SQL> CREATE TABLE svm6162 COMPRESS AS
01:01:28   2  SELECT
01:01:28   3  pair
01:01:28   4  ,ydate
01:01:28   5  ,prdate
01:01:28   6  ,clse
01:01:28   7  ,g6
01:01:28   8  ,gatt
01:01:28   9  ,gattn
01:01:28  10  ,trend
01:01:28  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
01:01:28  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
01:01:28  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
01:01:28  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
01:01:28  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
01:01:28  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
01:01:28  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
01:01:28  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
01:01:28  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
01:01:28  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
01:01:28  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
01:01:28  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
01:01:28  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
01:01:28  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
01:01:28  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
01:01:28  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
01:01:28  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
01:01:28  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
01:01:28  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
01:01:28  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
01:01:28  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
01:01:28  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
01:01:28  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
01:01:28  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
01:01:28  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
01:01:28  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
01:01:28  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
01:01:28  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
01:01:28  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
01:01:28  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
01:01:28  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
01:01:28  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
01:01:28  43  ,hh  att32
01:01:28  44  ,d   att33
01:01:28  45  ,w   att34
01:01:28  46  ,mpm att35
01:01:28  47  ,mph att36
01:01:28  48  ,trend att37
01:01:28  49  FROM svm6142
01:01:28  50  ORDER BY ydate
01:01:28  51  /

Table created.

Elapsed: 00:00:04.77
01:01:33 SQL> 
01:01:33 SQL> -- rpt
01:01:33 SQL> 
01:01:33 SQL> SELECT
01:01:33   2  pair
01:01:33   3  ,trend
01:01:33   4  ,gatt
01:01:33   5  ,COUNT(pair)
01:01:33   6  ,AVG(g6)
01:01:33   7  FROM svm6162
01:01:33   8  GROUP BY pair,trend,gatt
01:01:33   9  ORDER BY pair,trend,gatt
01:01:33  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7203 -.00200132
usd_chf 	-1 up	      3082 .003952661
usd_chf 	-1		27
usd_chf 	 1 nup	      6357  -.0016194
usd_chf 	 1 up	      2545 .003702415
usd_chf 	 1		45

6 rows selected.

Elapsed: 00:00:00.03
01:01:33 SQL> 
01:01:33 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
01:01:33 SQL> CREATE TABLE modsrc COMPRESS AS
01:01:33   2  SELECT
01:01:33   3  pair
01:01:33   4  ,ydate
01:01:33   5  ,prdate
01:01:33   6  ,trend
01:01:33   7  ,g6
01:01:33   8  ,gatt
01:01:33   9  ,gattn
01:01:33  10  FROM svm6162
01:01:33  11  /

Table created.

Elapsed: 00:00:00.10
01:01:33 SQL> 
01:01:33 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
01:01:33 SQL> 
01:01:33 SQL> DROP   TABLE chf_ms610 ;

Table dropped.

Elapsed: 00:00:00.07
01:01:33 SQL> CREATE TABLE chf_ms610 COMPRESS AS
01:01:33   2  SELECT
01:01:33   3  ydate
01:01:33   4  ,trend chf_trend
01:01:33   5  ,g6    chf_g6
01:01:33   6  ,gatt  chf_gatt
01:01:33   7  ,gattn chf_gattn
01:01:33   8  FROM modsrc
01:01:33   9  /

Table created.

Elapsed: 00:00:00.08
01:01:33 SQL> 
01:01:33 SQL> ANALYZE TABLE chf_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
01:01:33 SQL> 
01:01:33 SQL> -- I need a copy of the attributes:
01:01:33 SQL> 
01:01:33 SQL> 
01:01:33 SQL> DROP   TABLE chf_att;

Table dropped.

Elapsed: 00:00:00.05
01:01:33 SQL> CREATE TABLE chf_att COMPRESS AS
01:01:33   2  SELECT
01:01:33   3  ydate
01:01:33   4  ,att00 chf_att00
01:01:33   5  ,att01 chf_att01
01:01:33   6  ,att02 chf_att02
01:01:33   7  ,att03 chf_att03
01:01:33   8  ,att04 chf_att04
01:01:33   9  ,att05 chf_att05
01:01:33  10  ,att06 chf_att06
01:01:33  11  ,att07 chf_att07
01:01:33  12  ,att08 chf_att08
01:01:33  13  ,att09 chf_att09
01:01:33  14  ,att10 chf_att10
01:01:33  15  ,att11 chf_att11
01:01:33  16  ,att12 chf_att12
01:01:33  17  ,att13 chf_att13
01:01:33  18  ,att14 chf_att14
01:01:33  19  ,att15 chf_att15
01:01:33  20  ,att16 chf_att16
01:01:33  21  ,att17 chf_att17
01:01:33  22  ,att18 chf_att18
01:01:33  23  ,att19 chf_att19
01:01:33  24  ,att20 chf_att20
01:01:33  25  ,att21 chf_att21
01:01:33  26  ,att22 chf_att22
01:01:33  27  ,att23 chf_att23
01:01:33  28  ,att24 chf_att24
01:01:33  29  ,att25 chf_att25
01:01:33  30  ,att26 chf_att26
01:01:33  31  ,att27 chf_att27
01:01:33  32  ,att28 chf_att28
01:01:33  33  ,att29 chf_att29
01:01:33  34  ,att30 chf_att30
01:01:33  35  ,att31 chf_att31
01:01:33  36  ,att32 chf_att32
01:01:33  37  ,att33 chf_att33
01:01:33  38  ,att34 chf_att34
01:01:33  39  ,att35 chf_att35
01:01:33  40  ,att36 chf_att36
01:01:33  41  ,att37 chf_att37
01:01:33  42  FROM svm6162
01:01:33  43  /

Table created.

Elapsed: 00:00:00.16
01:01:34 SQL> 
01:01:34 SQL> ANALYZE TABLE chf_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.48
01:01:34 SQL> 
01:01:34 SQL> -- rpt
01:01:34 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19259

Elapsed: 00:00:00.85
01:01:35 SQL> SELECT COUNT(*)FROM chf_att;

  COUNT(*)
----------
     19259

Elapsed: 00:00:00.00
01:01:35 SQL> 
01:01:35 SQL> --
01:01:35 SQL> -- ech610.sql
01:01:35 SQL> --
01:01:35 SQL> 
01:01:35 SQL> -- Creates views and tables for backtesting a forex SVM strategy
01:01:35 SQL> 
01:01:35 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.39
01:01:35 SQL> 
01:01:35 SQL> -- I created di5min here:
01:01:35 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
01:01:35 SQL> 
01:01:35 SQL> CREATE OR REPLACE VIEW svm6102 AS
01:01:35   2  SELECT
01:01:35   3  pair
01:01:35   4  ,ydate
01:01:35   5  ,prdate
01:01:35   6  ,rownum rnum -- acts as t in my time-series
01:01:35   7  ,clse
01:01:35   8  -- Derive a bunch of attributes from clse, the latest price:
01:01:35   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
01:01:35  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
01:01:35  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
01:01:35  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
01:01:35  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
01:01:35  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
01:01:35  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
01:01:35  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
01:01:35  17  --
01:01:35  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
01:01:35  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
01:01:35  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
01:01:35  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
01:01:35  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
01:01:35  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
01:01:35  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
01:01:35  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
01:01:35  26  --
01:01:35  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
01:01:35  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
01:01:35  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
01:01:35  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
01:01:35  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
01:01:35  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
01:01:35  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
01:01:35  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
01:01:35  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
01:01:35  36  FROM di5min WHERE pair LIKE'%ech%'
01:01:35  37  AND ydate > sysdate - 95
01:01:35  38  ORDER BY ydate
01:01:35  39  /

View created.

Elapsed: 00:00:00.04
01:01:35 SQL> 
01:01:35 SQL> -- rpt
01:01:35 SQL> 
01:01:35 SQL> SELECT
01:01:35   2  pair
01:01:35   3  ,COUNT(pair)
01:01:35   4  ,MIN(clse),MAX(clse)
01:01:35   5  ,MIN(avg6),MAX(avg6)
01:01:35   6  ,MIN(ydate),MAX(ydate)
01:01:35   7  FROM svm6102
01:01:35   8  GROUP BY pair
01:01:35   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ech_usd       19258 1.24213032 1.38284305 1.24320499 1.37986485 2010-09-30 01:05:01 2011-01-03 00:55:00

Elapsed: 00:00:00.80
01:01:36 SQL> 
01:01:36 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
01:01:36 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.31
01:01:37 SQL> CREATE TABLE svm6122 COMPRESS AS
01:01:37   2  SELECT
01:01:37   3  pair
01:01:37   4  ,ydate
01:01:37   5  ,prdate
01:01:37   6  ,clse
01:01:37   7  -- g6 is important. I want to predict g6:
01:01:37   8  ,ld6 - clse g6
01:01:37   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
01:01:37  10  -- I want more attributes from the ones I derived above:
01:01:37  11  -- clse relation to moving-min
01:01:37  12  ,clse-min4  cm4
01:01:37  13  ,clse-min6  cm6
01:01:37  14  ,clse-min8  cm8
01:01:37  15  ,clse-min10 cm10
01:01:37  16  ,clse-min12 cm12
01:01:37  17  ,clse-min14 cm14
01:01:37  18  ,clse-min16 cm16
01:01:37  19  ,clse-min18 cm18
01:01:37  20  -- clse relation to moving-avg
01:01:37  21  ,clse-avg4  ca4
01:01:37  22  ,clse-avg6  ca6
01:01:37  23  ,clse-avg8  ca8
01:01:37  24  ,clse-avg10 ca10
01:01:37  25  ,clse-avg12 ca12
01:01:37  26  ,clse-avg14 ca14
01:01:37  27  ,clse-avg16 ca16
01:01:37  28  ,clse-avg18 ca18
01:01:37  29  -- clse relation to moving-max
01:01:37  30  ,clse-max4  cx4
01:01:37  31  ,clse-max6  cx6
01:01:37  32  ,clse-max8  cx8
01:01:37  33  ,clse-max10 cx10
01:01:37  34  ,clse-max12 cx12
01:01:37  35  ,clse-max14 cx14
01:01:37  36  ,clse-max16 cx16
01:01:37  37  ,clse-max18 cx18
01:01:37  38  -- Derive more attributes.
01:01:37  39  -- I want to use CORR() here to help SVM see the shape of the series.
01:01:37  40  -- But COVAR_POP is more stable:
01:01:37  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
01:01:37  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
01:01:37  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
01:01:37  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
01:01:37  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
01:01:37  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
01:01:37  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
01:01:37  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
01:01:37  49  -- Derive date related attributes:
01:01:37  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
01:01:37  51  ,0+TO_CHAR(ydate,'D')d
01:01:37  52  ,0+TO_CHAR(ydate,'W')w
01:01:37  53  -- mpm stands for minutes-past-midnight:
01:01:37  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
01:01:37  55  -- mph stands for minutes-past-hour:
01:01:37  56  ,0+TO_CHAR(ydate,'MI')mph
01:01:37  57  FROM svm6102
01:01:37  58  ORDER BY ydate
01:01:37  59  /

Table created.

Elapsed: 00:00:02.06
01:01:39 SQL> 
01:01:39 SQL> -- rpt
01:01:39 SQL> 
01:01:39 SQL> SELECT
01:01:39   2  pair
01:01:39   3  ,COUNT(pair)
01:01:39   4  ,MIN(clse),MAX(clse)
01:01:39   5  ,MIN(ydate),MAX(ydate)
01:01:39   6  FROM svm6122
01:01:39   7  GROUP BY pair
01:01:39   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ech_usd       19258 1.24213032 1.38284305 2010-09-30 01:05:01 2011-01-03 00:55:00

Elapsed: 00:00:00.04
01:01:39 SQL> 
01:01:39 SQL> -- Prepare for derivation of NTILE based params:
01:01:39 SQL> 
01:01:39 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.26
01:01:39 SQL> CREATE TABLE svm6142 COMPRESS AS
01:01:39   2  SELECT
01:01:39   3  pair
01:01:39   4  ,ydate
01:01:39   5  ,prdate
01:01:39   6  ,clse
01:01:39   7  ,g6
01:01:39   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
01:01:39   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
01:01:39  10  ,CASE WHEN trend IS NULL THEN 1
01:01:39  11  	    WHEN trend =0      THEN 1
01:01:39  12  	    ELSE trend END trend
01:01:39  13  ,cm4
01:01:39  14  ,cm6
01:01:39  15  ,cm8
01:01:39  16  ,cm10
01:01:39  17  ,cm12
01:01:39  18  ,cm14
01:01:39  19  ,cm16
01:01:39  20  ,cm18
01:01:39  21  --
01:01:39  22  ,ca4
01:01:39  23  ,ca6
01:01:39  24  ,ca8
01:01:39  25  ,ca10
01:01:39  26  ,ca12
01:01:39  27  ,ca14
01:01:39  28  ,ca16
01:01:39  29  ,ca18
01:01:39  30  --
01:01:39  31  ,cx4
01:01:39  32  ,cx6
01:01:39  33  ,cx8
01:01:39  34  ,cx10
01:01:39  35  ,cx12
01:01:39  36  ,cx14
01:01:39  37  ,cx16
01:01:39  38  ,cx18
01:01:39  39  --
01:01:39  40  ,crr4
01:01:39  41  ,crr6
01:01:39  42  ,crr8
01:01:39  43  ,crr10
01:01:39  44  ,crr12
01:01:39  45  ,crr14
01:01:39  46  ,crr16
01:01:39  47  ,crr18
01:01:39  48  --
01:01:39  49  ,hh
01:01:39  50  ,d
01:01:39  51  ,w
01:01:39  52  ,mpm
01:01:39  53  ,mph
01:01:39  54  FROM svm6122
01:01:39  55  ORDER BY ydate
01:01:39  56  /

Table created.

Elapsed: 00:00:00.47
01:01:39 SQL> 
01:01:39 SQL> -- rpt
01:01:39 SQL> 
01:01:39 SQL> SELECT
01:01:39   2  pair
01:01:39   3  ,trend
01:01:39   4  ,gatt
01:01:39   5  ,COUNT(pair)
01:01:39   6  ,AVG(g6)
01:01:39   7  FROM svm6142
01:01:39   8  GROUP BY pair,trend,gatt
01:01:39   9  ORDER BY pair,trend,gatt
01:01:39  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6480 -.00223748
ech_usd 	-1 up	      3538 .003550066
ech_usd 	-1		55
ech_usd 	 1 nup	      6311 -.00237173
ech_usd 	 1 up	      2857 .003864232
ech_usd 	 1		17

6 rows selected.

Elapsed: 00:00:00.04
01:01:39 SQL> 
01:01:39 SQL> 
01:01:39 SQL> -- Derive NTILE based params:
01:01:39 SQL> 
01:01:39 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.11
01:01:40 SQL> CREATE TABLE svm6162 COMPRESS AS
01:01:40   2  SELECT
01:01:40   3  pair
01:01:40   4  ,ydate
01:01:40   5  ,prdate
01:01:40   6  ,clse
01:01:40   7  ,g6
01:01:40   8  ,gatt
01:01:40   9  ,gattn
01:01:40  10  ,trend
01:01:40  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
01:01:40  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
01:01:40  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
01:01:40  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
01:01:40  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
01:01:40  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
01:01:40  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
01:01:40  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
01:01:40  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
01:01:40  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
01:01:40  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
01:01:40  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
01:01:40  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
01:01:40  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
01:01:40  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
01:01:40  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
01:01:40  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
01:01:40  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
01:01:40  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
01:01:40  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
01:01:40  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
01:01:40  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
01:01:40  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
01:01:40  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
01:01:40  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
01:01:40  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
01:01:40  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
01:01:40  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
01:01:40  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
01:01:40  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
01:01:40  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
01:01:40  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
01:01:40  43  ,hh  att32
01:01:40  44  ,d   att33
01:01:40  45  ,w   att34
01:01:40  46  ,mpm att35
01:01:40  47  ,mph att36
01:01:40  48  ,trend att37
01:01:40  49  FROM svm6142
01:01:40  50  ORDER BY ydate
01:01:40  51  /

Table created.

Elapsed: 00:00:04.93
01:01:44 SQL> 
01:01:44 SQL> -- rpt
01:01:44 SQL> 
01:01:44 SQL> SELECT
01:01:44   2  pair
01:01:44   3  ,trend
01:01:44   4  ,gatt
01:01:44   5  ,COUNT(pair)
01:01:44   6  ,AVG(g6)
01:01:44   7  FROM svm6162
01:01:44   8  GROUP BY pair,trend,gatt
01:01:44   9  ORDER BY pair,trend,gatt
01:01:44  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6480 -.00223748
ech_usd 	-1 up	      3538 .003550066
ech_usd 	-1		55
ech_usd 	 1 nup	      6311 -.00237173
ech_usd 	 1 up	      2857 .003864232
ech_usd 	 1		17

6 rows selected.

Elapsed: 00:00:00.03
01:01:44 SQL> 
01:01:44 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.11
01:01:45 SQL> CREATE TABLE modsrc COMPRESS AS
01:01:45   2  SELECT
01:01:45   3  pair
01:01:45   4  ,ydate
01:01:45   5  ,prdate
01:01:45   6  ,trend
01:01:45   7  ,g6
01:01:45   8  ,gatt
01:01:45   9  ,gattn
01:01:45  10  FROM svm6162
01:01:45  11  /

Table created.

Elapsed: 00:00:00.09
01:01:45 SQL> 
01:01:45 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
01:01:45 SQL> 
01:01:45 SQL> DROP   TABLE ech_ms610 ;

Table dropped.

Elapsed: 00:00:00.06
01:01:45 SQL> CREATE TABLE ech_ms610 COMPRESS AS
01:01:45   2  SELECT
01:01:45   3  ydate
01:01:45   4  ,trend ech_trend
01:01:45   5  ,g6    ech_g6
01:01:45   6  ,gatt  ech_gatt
01:01:45   7  ,gattn ech_gattn
01:01:45   8  FROM modsrc
01:01:45   9  /

Table created.

Elapsed: 00:00:00.07
01:01:45 SQL> 
01:01:45 SQL> ANALYZE TABLE ech_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
01:01:45 SQL> 
01:01:45 SQL> -- I need a copy of the attributes:
01:01:45 SQL> 
01:01:45 SQL> 
01:01:45 SQL> DROP   TABLE ech_att;

Table dropped.

Elapsed: 00:00:00.06
01:01:45 SQL> CREATE TABLE ech_att COMPRESS AS
01:01:45   2  SELECT
01:01:45   3  ydate
01:01:45   4  ,att00 ech_att00
01:01:45   5  ,att01 ech_att01
01:01:45   6  ,att02 ech_att02
01:01:45   7  ,att03 ech_att03
01:01:45   8  ,att04 ech_att04
01:01:45   9  ,att05 ech_att05
01:01:45  10  ,att06 ech_att06
01:01:45  11  ,att07 ech_att07
01:01:45  12  ,att08 ech_att08
01:01:45  13  ,att09 ech_att09
01:01:45  14  ,att10 ech_att10
01:01:45  15  ,att11 ech_att11
01:01:45  16  ,att12 ech_att12
01:01:45  17  ,att13 ech_att13
01:01:45  18  ,att14 ech_att14
01:01:45  19  ,att15 ech_att15
01:01:45  20  ,att16 ech_att16
01:01:45  21  ,att17 ech_att17
01:01:45  22  ,att18 ech_att18
01:01:45  23  ,att19 ech_att19
01:01:45  24  ,att20 ech_att20
01:01:45  25  ,att21 ech_att21
01:01:45  26  ,att22 ech_att22
01:01:45  27  ,att23 ech_att23
01:01:45  28  ,att24 ech_att24
01:01:45  29  ,att25 ech_att25
01:01:45  30  ,att26 ech_att26
01:01:45  31  ,att27 ech_att27
01:01:45  32  ,att28 ech_att28
01:01:45  33  ,att29 ech_att29
01:01:45  34  ,att30 ech_att30
01:01:45  35  ,att31 ech_att31
01:01:45  36  ,att32 ech_att32
01:01:45  37  ,att33 ech_att33
01:01:45  38  ,att34 ech_att34
01:01:45  39  ,att35 ech_att35
01:01:45  40  ,att36 ech_att36
01:01:45  41  ,att37 ech_att37
01:01:45  42  FROM svm6162
01:01:45  43  /

Table created.

Elapsed: 00:00:00.19
01:01:45 SQL> 
01:01:45 SQL> ANALYZE TABLE ech_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.44
01:01:46 SQL> 
01:01:46 SQL> -- rpt
01:01:46 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19258

Elapsed: 00:00:00.78
01:01:47 SQL> SELECT COUNT(*)FROM ech_att;

  COUNT(*)
----------
     19258

Elapsed: 00:00:00.00
01:01:47 SQL> 
01:01:47 SQL> --
01:01:47 SQL> -- egb610.sql
01:01:47 SQL> --
01:01:47 SQL> 
01:01:47 SQL> -- Creates views and tables for backtesting a forex SVM strategy
01:01:47 SQL> 
01:01:47 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.43
01:01:47 SQL> 
01:01:47 SQL> -- I created di5min here:
01:01:47 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
01:01:47 SQL> 
01:01:47 SQL> CREATE OR REPLACE VIEW svm6102 AS
01:01:47   2  SELECT
01:01:47   3  pair
01:01:47   4  ,ydate
01:01:47   5  ,prdate
01:01:47   6  ,rownum rnum -- acts as t in my time-series
01:01:47   7  ,clse
01:01:47   8  -- Derive a bunch of attributes from clse, the latest price:
01:01:47   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
01:01:47  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
01:01:47  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
01:01:47  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
01:01:47  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
01:01:47  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
01:01:47  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
01:01:47  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
01:01:47  17  --
01:01:47  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
01:01:47  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
01:01:47  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
01:01:47  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
01:01:47  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
01:01:47  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
01:01:47  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
01:01:47  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
01:01:47  26  --
01:01:47  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
01:01:47  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
01:01:47  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
01:01:47  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
01:01:47  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
01:01:47  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
01:01:47  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
01:01:47  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
01:01:47  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
01:01:47  36  FROM di5min WHERE pair LIKE'%egb%'
01:01:47  37  AND ydate > sysdate - 95
01:01:47  38  ORDER BY ydate
01:01:47  39  /

View created.

Elapsed: 00:00:00.04
01:01:47 SQL> 
01:01:47 SQL> -- rpt
01:01:47 SQL> 
01:01:47 SQL> SELECT
01:01:47   2  pair
01:01:47   3  ,COUNT(pair)
01:01:47   4  ,MIN(clse),MAX(clse)
01:01:47   5  ,MIN(avg6),MAX(avg6)
01:01:47   6  ,MIN(ydate),MAX(ydate)
01:01:47   7  FROM svm6102
01:01:47   8  GROUP BY pair
01:01:47   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
egb_usd       19257 .833520557 .893920122 .834199029 .892400287 2010-09-30 01:05:01 2011-01-03 00:55:00

Elapsed: 00:00:00.94
01:01:48 SQL> 
01:01:48 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
01:01:48 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.20
01:01:48 SQL> CREATE TABLE svm6122 COMPRESS AS
01:01:48   2  SELECT
01:01:48   3  pair
01:01:48   4  ,ydate
01:01:48   5  ,prdate
01:01:48   6  ,clse
01:01:48   7  -- g6 is important. I want to predict g6:
01:01:48   8  ,ld6 - clse g6
01:01:48   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
01:01:48  10  -- I want more attributes from the ones I derived above:
01:01:48  11  -- clse relation to moving-min
01:01:48  12  ,clse-min4  cm4
01:01:48  13  ,clse-min6  cm6
01:01:48  14  ,clse-min8  cm8
01:01:48  15  ,clse-min10 cm10
01:01:48  16  ,clse-min12 cm12
01:01:48  17  ,clse-min14 cm14
01:01:48  18  ,clse-min16 cm16
01:01:48  19  ,clse-min18 cm18
01:01:48  20  -- clse relation to moving-avg
01:01:48  21  ,clse-avg4  ca4
01:01:48  22  ,clse-avg6  ca6
01:01:48  23  ,clse-avg8  ca8
01:01:48  24  ,clse-avg10 ca10
01:01:48  25  ,clse-avg12 ca12
01:01:48  26  ,clse-avg14 ca14
01:01:48  27  ,clse-avg16 ca16
01:01:48  28  ,clse-avg18 ca18
01:01:48  29  -- clse relation to moving-max
01:01:48  30  ,clse-max4  cx4
01:01:48  31  ,clse-max6  cx6
01:01:48  32  ,clse-max8  cx8
01:01:48  33  ,clse-max10 cx10
01:01:48  34  ,clse-max12 cx12
01:01:48  35  ,clse-max14 cx14
01:01:48  36  ,clse-max16 cx16
01:01:48  37  ,clse-max18 cx18
01:01:48  38  -- Derive more attributes.
01:01:48  39  -- I want to use CORR() here to help SVM see the shape of the series.
01:01:48  40  -- But COVAR_POP is more stable:
01:01:48  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
01:01:48  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
01:01:48  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
01:01:48  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
01:01:48  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
01:01:48  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
01:01:48  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
01:01:48  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
01:01:48  49  -- Derive date related attributes:
01:01:48  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
01:01:48  51  ,0+TO_CHAR(ydate,'D')d
01:01:48  52  ,0+TO_CHAR(ydate,'W')w
01:01:48  53  -- mpm stands for minutes-past-midnight:
01:01:48  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
01:01:48  55  -- mph stands for minutes-past-hour:
01:01:48  56  ,0+TO_CHAR(ydate,'MI')mph
01:01:48  57  FROM svm6102
01:01:48  58  ORDER BY ydate
01:01:48  59  /

Table created.

Elapsed: 00:00:02.41
01:01:51 SQL> 
01:01:51 SQL> -- rpt
01:01:51 SQL> 
01:01:51 SQL> SELECT
01:01:51   2  pair
01:01:51   3  ,COUNT(pair)
01:01:51   4  ,MIN(clse),MAX(clse)
01:01:51   5  ,MIN(ydate),MAX(ydate)
01:01:51   6  FROM svm6122
01:01:51   7  GROUP BY pair
01:01:51   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
egb_usd       19257 .833520557 .893920122 2010-09-30 01:05:01 2011-01-03 00:55:00

Elapsed: 00:00:00.04
01:01:51 SQL> 
01:01:51 SQL> -- Prepare for derivation of NTILE based params:
01:01:51 SQL> 
01:01:51 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.28
01:01:51 SQL> CREATE TABLE svm6142 COMPRESS AS
01:01:51   2  SELECT
01:01:51   3  pair
01:01:51   4  ,ydate
01:01:51   5  ,prdate
01:01:51   6  ,clse
01:01:51   7  ,g6
01:01:51   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
01:01:51   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
01:01:51  10  ,CASE WHEN trend IS NULL THEN 1
01:01:51  11  	    WHEN trend =0      THEN 1
01:01:51  12  	    ELSE trend END trend
01:01:51  13  ,cm4
01:01:51  14  ,cm6
01:01:51  15  ,cm8
01:01:51  16  ,cm10
01:01:51  17  ,cm12
01:01:51  18  ,cm14
01:01:51  19  ,cm16
01:01:51  20  ,cm18
01:01:51  21  --
01:01:51  22  ,ca4
01:01:51  23  ,ca6
01:01:51  24  ,ca8
01:01:51  25  ,ca10
01:01:51  26  ,ca12
01:01:51  27  ,ca14
01:01:51  28  ,ca16
01:01:51  29  ,ca18
01:01:51  30  --
01:01:51  31  ,cx4
01:01:51  32  ,cx6
01:01:51  33  ,cx8
01:01:51  34  ,cx10
01:01:51  35  ,cx12
01:01:51  36  ,cx14
01:01:51  37  ,cx16
01:01:51  38  ,cx18
01:01:51  39  --
01:01:51  40  ,crr4
01:01:51  41  ,crr6
01:01:51  42  ,crr8
01:01:51  43  ,crr10
01:01:51  44  ,crr12
01:01:51  45  ,crr14
01:01:51  46  ,crr16
01:01:51  47  ,crr18
01:01:51  48  --
01:01:51  49  ,hh
01:01:51  50  ,d
01:01:51  51  ,w
01:01:51  52  ,mpm
01:01:51  53  ,mph
01:01:51  54  FROM svm6122
01:01:51  55  ORDER BY ydate
01:01:51  56  /

Table created.

Elapsed: 00:00:00.43
01:01:51 SQL> 
01:01:51 SQL> -- rpt
01:01:51 SQL> 
01:01:51 SQL> SELECT
01:01:51   2  pair
01:01:51   3  ,trend
01:01:51   4  ,gatt
01:01:51   5  ,COUNT(pair)
01:01:51   6  ,AVG(g6)
01:01:51   7  FROM svm6142
01:01:51   8  GROUP BY pair,trend,gatt
01:01:51   9  ORDER BY pair,trend,gatt
01:01:51  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7300 -.00099472
egb_usd 	-1 up	      2667 .002927443
egb_usd 	-1		60
egb_usd 	 1 nup	      6549 -.00131106
egb_usd 	 1 up	      2669 .002969478
egb_usd 	 1		12

6 rows selected.

Elapsed: 00:00:00.05
01:01:52 SQL> 
01:01:52 SQL> 
01:01:52 SQL> -- Derive NTILE based params:
01:01:52 SQL> 
01:01:52 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.16
01:01:52 SQL> CREATE TABLE svm6162 COMPRESS AS
01:01:52   2  SELECT
01:01:52   3  pair
01:01:52   4  ,ydate
01:01:52   5  ,prdate
01:01:52   6  ,clse
01:01:52   7  ,g6
01:01:52   8  ,gatt
01:01:52   9  ,gattn
01:01:52  10  ,trend
01:01:52  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
01:01:52  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
01:01:52  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
01:01:52  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
01:01:52  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
01:01:52  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
01:01:52  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
01:01:52  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
01:01:52  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
01:01:52  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
01:01:52  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
01:01:52  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
01:01:52  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
01:01:52  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
01:01:52  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
01:01:52  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
01:01:52  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
01:01:52  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
01:01:52  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
01:01:52  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
01:01:52  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
01:01:52  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
01:01:52  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
01:01:52  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
01:01:52  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
01:01:52  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
01:01:52  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
01:01:52  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
01:01:52  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
01:01:52  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
01:01:52  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
01:01:52  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
01:01:52  43  ,hh  att32
01:01:52  44  ,d   att33
01:01:52  45  ,w   att34
01:01:52  46  ,mpm att35
01:01:52  47  ,mph att36
01:01:52  48  ,trend att37
01:01:52  49  FROM svm6142
01:01:52  50  ORDER BY ydate
01:01:52  51  /

Table created.

Elapsed: 00:00:05.51
01:01:57 SQL> 
01:01:57 SQL> -- rpt
01:01:57 SQL> 
01:01:57 SQL> SELECT
01:01:57   2  pair
01:01:57   3  ,trend
01:01:57   4  ,gatt
01:01:57   5  ,COUNT(pair)
01:01:57   6  ,AVG(g6)
01:01:57   7  FROM svm6162
01:01:57   8  GROUP BY pair,trend,gatt
01:01:57   9  ORDER BY pair,trend,gatt
01:01:57  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7300 -.00099472
egb_usd 	-1 up	      2667 .002927443
egb_usd 	-1		60
egb_usd 	 1 nup	      6549 -.00131106
egb_usd 	 1 up	      2669 .002969478
egb_usd 	 1		12

6 rows selected.

Elapsed: 00:00:00.03
01:01:57 SQL> 
01:01:57 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.21
01:01:57 SQL> CREATE TABLE modsrc COMPRESS AS
01:01:57   2  SELECT
01:01:57   3  pair
01:01:57   4  ,ydate
01:01:57   5  ,prdate
01:01:57   6  ,trend
01:01:57   7  ,g6
01:01:57   8  ,gatt
01:01:57   9  ,gattn
01:01:57  10  FROM svm6162
01:01:57  11  /

Table created.

Elapsed: 00:00:00.09
01:01:58 SQL> 
01:01:58 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
01:01:58 SQL> 
01:01:58 SQL> DROP   TABLE egb_ms610 ;

Table dropped.

Elapsed: 00:00:00.06
01:01:58 SQL> CREATE TABLE egb_ms610 COMPRESS AS
01:01:58   2  SELECT
01:01:58   3  ydate
01:01:58   4  ,trend egb_trend
01:01:58   5  ,g6    egb_g6
01:01:58   6  ,gatt  egb_gatt
01:01:58   7  ,gattn egb_gattn
01:01:58   8  FROM modsrc
01:01:58   9  /

Table created.

Elapsed: 00:00:00.08
01:01:58 SQL> 
01:01:58 SQL> ANALYZE TABLE egb_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
01:01:58 SQL> 
01:01:58 SQL> -- I need a copy of the attributes:
01:01:58 SQL> 
01:01:58 SQL> 
01:01:58 SQL> DROP   TABLE egb_att;

Table dropped.

Elapsed: 00:00:00.20
01:01:58 SQL> CREATE TABLE egb_att COMPRESS AS
01:01:58   2  SELECT
01:01:58   3  ydate
01:01:58   4  ,att00 egb_att00
01:01:58   5  ,att01 egb_att01
01:01:58   6  ,att02 egb_att02
01:01:58   7  ,att03 egb_att03
01:01:58   8  ,att04 egb_att04
01:01:58   9  ,att05 egb_att05
01:01:58  10  ,att06 egb_att06
01:01:58  11  ,att07 egb_att07
01:01:58  12  ,att08 egb_att08
01:01:58  13  ,att09 egb_att09
01:01:58  14  ,att10 egb_att10
01:01:58  15  ,att11 egb_att11
01:01:58  16  ,att12 egb_att12
01:01:58  17  ,att13 egb_att13
01:01:58  18  ,att14 egb_att14
01:01:58  19  ,att15 egb_att15
01:01:58  20  ,att16 egb_att16
01:01:58  21  ,att17 egb_att17
01:01:58  22  ,att18 egb_att18
01:01:58  23  ,att19 egb_att19
01:01:58  24  ,att20 egb_att20
01:01:58  25  ,att21 egb_att21
01:01:58  26  ,att22 egb_att22
01:01:58  27  ,att23 egb_att23
01:01:58  28  ,att24 egb_att24
01:01:58  29  ,att25 egb_att25
01:01:58  30  ,att26 egb_att26
01:01:58  31  ,att27 egb_att27
01:01:58  32  ,att28 egb_att28
01:01:58  33  ,att29 egb_att29
01:01:58  34  ,att30 egb_att30
01:01:58  35  ,att31 egb_att31
01:01:58  36  ,att32 egb_att32
01:01:58  37  ,att33 egb_att33
01:01:58  38  ,att34 egb_att34
01:01:58  39  ,att35 egb_att35
01:01:58  40  ,att36 egb_att36
01:01:58  41  ,att37 egb_att37
01:01:58  42  FROM svm6162
01:01:58  43  /

Table created.

Elapsed: 00:00:00.17
01:01:58 SQL> 
01:01:58 SQL> ANALYZE TABLE egb_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.43
01:01:59 SQL> 
01:01:59 SQL> -- rpt
01:01:59 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19257

Elapsed: 00:00:00.92
01:02:00 SQL> SELECT COUNT(*)FROM egb_att;

  COUNT(*)
----------
     19257

Elapsed: 00:00:00.00
01:02:00 SQL> 
01:02:00 SQL> --
01:02:00 SQL> -- ejp610.sql
01:02:00 SQL> --
01:02:00 SQL> 
01:02:00 SQL> -- Creates views and tables for backtesting a forex SVM strategy
01:02:00 SQL> 
01:02:00 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.43
01:02:00 SQL> 
01:02:00 SQL> -- I created di5min here:
01:02:00 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
01:02:00 SQL> 
01:02:00 SQL> CREATE OR REPLACE VIEW svm6102 AS
01:02:00   2  SELECT
01:02:00   3  pair
01:02:00   4  ,ydate
01:02:00   5  ,prdate
01:02:00   6  ,rownum rnum -- acts as t in my time-series
01:02:00   7  ,clse
01:02:00   8  -- Derive a bunch of attributes from clse, the latest price:
01:02:00   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
01:02:00  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
01:02:00  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
01:02:00  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
01:02:00  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
01:02:00  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
01:02:00  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
01:02:00  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
01:02:00  17  --
01:02:00  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
01:02:00  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
01:02:00  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
01:02:00  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
01:02:00  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
01:02:00  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
01:02:00  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
01:02:00  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
01:02:00  26  --
01:02:00  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
01:02:00  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
01:02:00  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
01:02:00  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
01:02:00  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
01:02:00  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
01:02:00  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
01:02:00  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
01:02:00  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
01:02:00  36  FROM di5min WHERE pair LIKE'%ejp%'
01:02:00  37  AND ydate > sysdate - 95
01:02:00  38  ORDER BY ydate
01:02:00  39  /

View created.

Elapsed: 00:00:00.04
01:02:00 SQL> 
01:02:00 SQL> -- rpt
01:02:00 SQL> 
01:02:00 SQL> SELECT
01:02:00   2  pair
01:02:00   3  ,COUNT(pair)
01:02:00   4  ,MIN(clse),MAX(clse)
01:02:00   5  ,MIN(avg6),MAX(avg6)
01:02:00   6  ,MIN(ydate),MAX(ydate)
01:02:00   7  FROM svm6102
01:02:00   8  GROUP BY pair
01:02:00   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ejp_usd       19255 107.643765	115.63485 107.776148 115.509678 2010-09-30 01:05:01 2011-01-03 00:55:00

Elapsed: 00:00:00.83
01:02:01 SQL> 
01:02:01 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
01:02:01 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.31
01:02:01 SQL> CREATE TABLE svm6122 COMPRESS AS
01:02:01   2  SELECT
01:02:01   3  pair
01:02:01   4  ,ydate
01:02:01   5  ,prdate
01:02:01   6  ,clse
01:02:01   7  -- g6 is important. I want to predict g6:
01:02:01   8  ,ld6 - clse g6
01:02:01   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
01:02:01  10  -- I want more attributes from the ones I derived above:
01:02:01  11  -- clse relation to moving-min
01:02:01  12  ,clse-min4  cm4
01:02:01  13  ,clse-min6  cm6
01:02:01  14  ,clse-min8  cm8
01:02:01  15  ,clse-min10 cm10
01:02:01  16  ,clse-min12 cm12
01:02:01  17  ,clse-min14 cm14
01:02:01  18  ,clse-min16 cm16
01:02:01  19  ,clse-min18 cm18
01:02:01  20  -- clse relation to moving-avg
01:02:01  21  ,clse-avg4  ca4
01:02:01  22  ,clse-avg6  ca6
01:02:01  23  ,clse-avg8  ca8
01:02:01  24  ,clse-avg10 ca10
01:02:01  25  ,clse-avg12 ca12
01:02:01  26  ,clse-avg14 ca14
01:02:01  27  ,clse-avg16 ca16
01:02:01  28  ,clse-avg18 ca18
01:02:01  29  -- clse relation to moving-max
01:02:01  30  ,clse-max4  cx4
01:02:01  31  ,clse-max6  cx6
01:02:01  32  ,clse-max8  cx8
01:02:01  33  ,clse-max10 cx10
01:02:01  34  ,clse-max12 cx12
01:02:01  35  ,clse-max14 cx14
01:02:01  36  ,clse-max16 cx16
01:02:01  37  ,clse-max18 cx18
01:02:01  38  -- Derive more attributes.
01:02:01  39  -- I want to use CORR() here to help SVM see the shape of the series.
01:02:01  40  -- But COVAR_POP is more stable:
01:02:01  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
01:02:01  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
01:02:01  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
01:02:01  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
01:02:01  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
01:02:01  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
01:02:01  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
01:02:01  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
01:02:01  49  -- Derive date related attributes:
01:02:01  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
01:02:01  51  ,0+TO_CHAR(ydate,'D')d
01:02:01  52  ,0+TO_CHAR(ydate,'W')w
01:02:01  53  -- mpm stands for minutes-past-midnight:
01:02:01  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
01:02:01  55  -- mph stands for minutes-past-hour:
01:02:01  56  ,0+TO_CHAR(ydate,'MI')mph
01:02:01  57  FROM svm6102
01:02:01  58  ORDER BY ydate
01:02:01  59  /

Table created.

Elapsed: 00:00:02.11
01:02:04 SQL> 
01:02:04 SQL> -- rpt
01:02:04 SQL> 
01:02:04 SQL> SELECT
01:02:04   2  pair
01:02:04   3  ,COUNT(pair)
01:02:04   4  ,MIN(clse),MAX(clse)
01:02:04   5  ,MIN(ydate),MAX(ydate)
01:02:04   6  FROM svm6122
01:02:04   7  GROUP BY pair
01:02:04   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ejp_usd       19255 107.643765	115.63485 2010-09-30 01:05:01 2011-01-03 00:55:00

Elapsed: 00:00:00.06
01:02:04 SQL> 
01:02:04 SQL> -- Prepare for derivation of NTILE based params:
01:02:04 SQL> 
01:02:04 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.25
01:02:04 SQL> CREATE TABLE svm6142 COMPRESS AS
01:02:04   2  SELECT
01:02:04   3  pair
01:02:04   4  ,ydate
01:02:04   5  ,prdate
01:02:04   6  ,clse
01:02:04   7  ,g6
01:02:04   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
01:02:04   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
01:02:04  10  ,CASE WHEN trend IS NULL THEN 1
01:02:04  11  	    WHEN trend =0      THEN 1
01:02:04  12  	    ELSE trend END trend
01:02:04  13  ,cm4
01:02:04  14  ,cm6
01:02:04  15  ,cm8
01:02:04  16  ,cm10
01:02:04  17  ,cm12
01:02:04  18  ,cm14
01:02:04  19  ,cm16
01:02:04  20  ,cm18
01:02:04  21  --
01:02:04  22  ,ca4
01:02:04  23  ,ca6
01:02:04  24  ,ca8
01:02:04  25  ,ca10
01:02:04  26  ,ca12
01:02:04  27  ,ca14
01:02:04  28  ,ca16
01:02:04  29  ,ca18
01:02:04  30  --
01:02:04  31  ,cx4
01:02:04  32  ,cx6
01:02:04  33  ,cx8
01:02:04  34  ,cx10
01:02:04  35  ,cx12
01:02:04  36  ,cx14
01:02:04  37  ,cx16
01:02:04  38  ,cx18
01:02:04  39  --
01:02:04  40  ,crr4
01:02:04  41  ,crr6
01:02:04  42  ,crr8
01:02:04  43  ,crr10
01:02:04  44  ,crr12
01:02:04  45  ,crr14
01:02:04  46  ,crr16
01:02:04  47  ,crr18
01:02:04  48  --
01:02:04  49  ,hh
01:02:04  50  ,d
01:02:04  51  ,w
01:02:04  52  ,mpm
01:02:04  53  ,mph
01:02:04  54  FROM svm6122
01:02:04  55  ORDER BY ydate
01:02:04  56  /

Table created.

Elapsed: 00:00:00.40
01:02:04 SQL> 
01:02:04 SQL> -- rpt
01:02:04 SQL> 
01:02:04 SQL> SELECT
01:02:04   2  pair
01:02:04   3  ,trend
01:02:04   4  ,gatt
01:02:04   5  ,COUNT(pair)
01:02:04   6  ,AVG(g6)
01:02:04   7  FROM svm6142
01:02:04   8  GROUP BY pair,trend,gatt
01:02:04   9  ORDER BY pair,trend,gatt
01:02:04  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      4800 -.32461799
ejp_usd 	-1 up	      4862 .269590947
ejp_usd 	-1		71
ejp_usd 	 1 nup	      4902 -.28951581
ejp_usd 	 1 up	      4619  .28079333
ejp_usd 	 1		 1

6 rows selected.

Elapsed: 00:00:00.04
01:02:04 SQL> 
01:02:04 SQL> 
01:02:04 SQL> -- Derive NTILE based params:
01:02:04 SQL> 
01:02:04 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.13
01:02:04 SQL> CREATE TABLE svm6162 COMPRESS AS
01:02:04   2  SELECT
01:02:04   3  pair
01:02:04   4  ,ydate
01:02:04   5  ,prdate
01:02:04   6  ,clse
01:02:04   7  ,g6
01:02:04   8  ,gatt
01:02:04   9  ,gattn
01:02:04  10  ,trend
01:02:04  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
01:02:04  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
01:02:04  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
01:02:04  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
01:02:04  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
01:02:04  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
01:02:04  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
01:02:04  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
01:02:04  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
01:02:04  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
01:02:04  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
01:02:04  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
01:02:04  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
01:02:04  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
01:02:04  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
01:02:04  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
01:02:04  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
01:02:04  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
01:02:04  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
01:02:04  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
01:02:04  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
01:02:04  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
01:02:04  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
01:02:04  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
01:02:04  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
01:02:04  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
01:02:04  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
01:02:04  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
01:02:04  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
01:02:04  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
01:02:04  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
01:02:04  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
01:02:04  43  ,hh  att32
01:02:04  44  ,d   att33
01:02:04  45  ,w   att34
01:02:04  46  ,mpm att35
01:02:04  47  ,mph att36
01:02:04  48  ,trend att37
01:02:04  49  FROM svm6142
01:02:04  50  ORDER BY ydate
01:02:04  51  /

Table created.

Elapsed: 00:00:04.89
01:02:09 SQL> 
01:02:09 SQL> -- rpt
01:02:09 SQL> 
01:02:09 SQL> SELECT
01:02:09   2  pair
01:02:09   3  ,trend
01:02:09   4  ,gatt
01:02:09   5  ,COUNT(pair)
01:02:09   6  ,AVG(g6)
01:02:09   7  FROM svm6162
01:02:09   8  GROUP BY pair,trend,gatt
01:02:09   9  ORDER BY pair,trend,gatt
01:02:09  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      4800 -.32461799
ejp_usd 	-1 up	      4862 .269590947
ejp_usd 	-1		71
ejp_usd 	 1 nup	      4902 -.28951581
ejp_usd 	 1 up	      4619  .28079333
ejp_usd 	 1		 1

6 rows selected.

Elapsed: 00:00:00.03
01:02:09 SQL> 
01:02:09 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.16
01:02:09 SQL> CREATE TABLE modsrc COMPRESS AS
01:02:09   2  SELECT
01:02:09   3  pair
01:02:09   4  ,ydate
01:02:09   5  ,prdate
01:02:09   6  ,trend
01:02:09   7  ,g6
01:02:09   8  ,gatt
01:02:09   9  ,gattn
01:02:09  10  FROM svm6162
01:02:09  11  /

Table created.

Elapsed: 00:00:00.10
01:02:10 SQL> 
01:02:10 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
01:02:10 SQL> 
01:02:10 SQL> DROP   TABLE ejp_ms610 ;

Table dropped.

Elapsed: 00:00:00.07
01:02:10 SQL> CREATE TABLE ejp_ms610 COMPRESS AS
01:02:10   2  SELECT
01:02:10   3  ydate
01:02:10   4  ,trend ejp_trend
01:02:10   5  ,g6    ejp_g6
01:02:10   6  ,gatt  ejp_gatt
01:02:10   7  ,gattn ejp_gattn
01:02:10   8  FROM modsrc
01:02:10   9  /

Table created.

Elapsed: 00:00:00.07
01:02:10 SQL> 
01:02:10 SQL> ANALYZE TABLE ejp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
01:02:10 SQL> 
01:02:10 SQL> -- I need a copy of the attributes:
01:02:10 SQL> 
01:02:10 SQL> 
01:02:10 SQL> DROP   TABLE ejp_att;

Table dropped.

Elapsed: 00:00:00.04
01:02:10 SQL> CREATE TABLE ejp_att COMPRESS AS
01:02:10   2  SELECT
01:02:10   3  ydate
01:02:10   4  ,att00 ejp_att00
01:02:10   5  ,att01 ejp_att01
01:02:10   6  ,att02 ejp_att02
01:02:10   7  ,att03 ejp_att03
01:02:10   8  ,att04 ejp_att04
01:02:10   9  ,att05 ejp_att05
01:02:10  10  ,att06 ejp_att06
01:02:10  11  ,att07 ejp_att07
01:02:10  12  ,att08 ejp_att08
01:02:10  13  ,att09 ejp_att09
01:02:10  14  ,att10 ejp_att10
01:02:10  15  ,att11 ejp_att11
01:02:10  16  ,att12 ejp_att12
01:02:10  17  ,att13 ejp_att13
01:02:10  18  ,att14 ejp_att14
01:02:10  19  ,att15 ejp_att15
01:02:10  20  ,att16 ejp_att16
01:02:10  21  ,att17 ejp_att17
01:02:10  22  ,att18 ejp_att18
01:02:10  23  ,att19 ejp_att19
01:02:10  24  ,att20 ejp_att20
01:02:10  25  ,att21 ejp_att21
01:02:10  26  ,att22 ejp_att22
01:02:10  27  ,att23 ejp_att23
01:02:10  28  ,att24 ejp_att24
01:02:10  29  ,att25 ejp_att25
01:02:10  30  ,att26 ejp_att26
01:02:10  31  ,att27 ejp_att27
01:02:10  32  ,att28 ejp_att28
01:02:10  33  ,att29 ejp_att29
01:02:10  34  ,att30 ejp_att30
01:02:10  35  ,att31 ejp_att31
01:02:10  36  ,att32 ejp_att32
01:02:10  37  ,att33 ejp_att33
01:02:10  38  ,att34 ejp_att34
01:02:10  39  ,att35 ejp_att35
01:02:10  40  ,att36 ejp_att36
01:02:10  41  ,att37 ejp_att37
01:02:10  42  FROM svm6162
01:02:10  43  /

Table created.

Elapsed: 00:00:00.21
01:02:10 SQL> 
01:02:10 SQL> ANALYZE TABLE ejp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
01:02:11 SQL> 
01:02:11 SQL> -- rpt
01:02:11 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19255

Elapsed: 00:00:00.84
01:02:12 SQL> SELECT COUNT(*)FROM ejp_att;

  COUNT(*)
----------
     19255

Elapsed: 00:00:00.00
01:02:12 SQL> 
01:02:12 SQL> --
01:02:12 SQL> -- ajp610.sql
01:02:12 SQL> --
01:02:12 SQL> 
01:02:12 SQL> -- Creates views and tables for backtesting a forex SVM strategy
01:02:12 SQL> 
01:02:12 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.45
01:02:12 SQL> 
01:02:12 SQL> -- I created di5min here:
01:02:12 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
01:02:12 SQL> 
01:02:12 SQL> CREATE OR REPLACE VIEW svm6102 AS
01:02:12   2  SELECT
01:02:12   3  pair
01:02:12   4  ,ydate
01:02:12   5  ,prdate
01:02:12   6  ,rownum rnum -- acts as t in my time-series
01:02:12   7  ,clse
01:02:12   8  -- Derive a bunch of attributes from clse, the latest price:
01:02:12   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
01:02:12  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
01:02:12  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
01:02:12  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
01:02:12  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
01:02:12  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
01:02:12  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
01:02:12  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
01:02:12  17  --
01:02:12  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
01:02:12  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
01:02:12  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
01:02:12  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
01:02:12  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
01:02:12  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
01:02:12  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
01:02:12  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
01:02:12  26  --
01:02:12  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
01:02:12  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
01:02:12  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
01:02:12  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
01:02:12  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
01:02:12  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
01:02:12  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
01:02:12  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
01:02:12  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
01:02:12  36  FROM di5min WHERE pair LIKE'%ajp%'
01:02:12  37  AND ydate > sysdate - 95
01:02:12  38  ORDER BY ydate
01:02:12  39  /

View created.

Elapsed: 00:00:00.04
01:02:12 SQL> 
01:02:12 SQL> -- rpt
01:02:12 SQL> 
01:02:12 SQL> SELECT
01:02:12   2  pair
01:02:12   3  ,COUNT(pair)
01:02:12   4  ,MIN(clse),MAX(clse)
01:02:12   5  ,MIN(avg6),MAX(avg6)
01:02:12   6  ,MIN(ydate),MAX(ydate)
01:02:12   7  FROM svm6102
01:02:12   8  GROUP BY pair
01:02:12   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ajp_usd       19252  78.249976 83.6669853 78.5106193  83.546306 2010-09-30 01:05:01 2011-01-03 00:55:00

Elapsed: 00:00:00.75
01:02:13 SQL> 
01:02:13 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
01:02:13 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.16
01:02:13 SQL> CREATE TABLE svm6122 COMPRESS AS
01:02:13   2  SELECT
01:02:13   3  pair
01:02:13   4  ,ydate
01:02:13   5  ,prdate
01:02:13   6  ,clse
01:02:13   7  -- g6 is important. I want to predict g6:
01:02:13   8  ,ld6 - clse g6
01:02:13   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
01:02:13  10  -- I want more attributes from the ones I derived above:
01:02:13  11  -- clse relation to moving-min
01:02:13  12  ,clse-min4  cm4
01:02:13  13  ,clse-min6  cm6
01:02:13  14  ,clse-min8  cm8
01:02:13  15  ,clse-min10 cm10
01:02:13  16  ,clse-min12 cm12
01:02:13  17  ,clse-min14 cm14
01:02:13  18  ,clse-min16 cm16
01:02:13  19  ,clse-min18 cm18
01:02:13  20  -- clse relation to moving-avg
01:02:13  21  ,clse-avg4  ca4
01:02:13  22  ,clse-avg6  ca6
01:02:13  23  ,clse-avg8  ca8
01:02:13  24  ,clse-avg10 ca10
01:02:13  25  ,clse-avg12 ca12
01:02:13  26  ,clse-avg14 ca14
01:02:13  27  ,clse-avg16 ca16
01:02:13  28  ,clse-avg18 ca18
01:02:13  29  -- clse relation to moving-max
01:02:13  30  ,clse-max4  cx4
01:02:13  31  ,clse-max6  cx6
01:02:13  32  ,clse-max8  cx8
01:02:13  33  ,clse-max10 cx10
01:02:13  34  ,clse-max12 cx12
01:02:13  35  ,clse-max14 cx14
01:02:13  36  ,clse-max16 cx16
01:02:13  37  ,clse-max18 cx18
01:02:13  38  -- Derive more attributes.
01:02:13  39  -- I want to use CORR() here to help SVM see the shape of the series.
01:02:13  40  -- But COVAR_POP is more stable:
01:02:13  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
01:02:13  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
01:02:13  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
01:02:13  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
01:02:13  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
01:02:13  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
01:02:13  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
01:02:13  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
01:02:13  49  -- Derive date related attributes:
01:02:13  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
01:02:13  51  ,0+TO_CHAR(ydate,'D')d
01:02:13  52  ,0+TO_CHAR(ydate,'W')w
01:02:13  53  -- mpm stands for minutes-past-midnight:
01:02:13  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
01:02:13  55  -- mph stands for minutes-past-hour:
01:02:13  56  ,0+TO_CHAR(ydate,'MI')mph
01:02:13  57  FROM svm6102
01:02:13  58  ORDER BY ydate
01:02:13  59  /

Table created.

Elapsed: 00:00:01.99
01:02:15 SQL> 
01:02:15 SQL> -- rpt
01:02:15 SQL> 
01:02:15 SQL> SELECT
01:02:15   2  pair
01:02:15   3  ,COUNT(pair)
01:02:15   4  ,MIN(clse),MAX(clse)
01:02:15   5  ,MIN(ydate),MAX(ydate)
01:02:15   6  FROM svm6122
01:02:15   7  GROUP BY pair
01:02:15   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ajp_usd       19252  78.249976 83.6669853 2010-09-30 01:05:01 2011-01-03 00:55:00

Elapsed: 00:00:00.04
01:02:15 SQL> 
01:02:15 SQL> -- Prepare for derivation of NTILE based params:
01:02:15 SQL> 
01:02:15 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.24
01:02:15 SQL> CREATE TABLE svm6142 COMPRESS AS
01:02:15   2  SELECT
01:02:15   3  pair
01:02:15   4  ,ydate
01:02:15   5  ,prdate
01:02:15   6  ,clse
01:02:15   7  ,g6
01:02:15   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
01:02:15   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
01:02:15  10  ,CASE WHEN trend IS NULL THEN 1
01:02:15  11  	    WHEN trend =0      THEN 1
01:02:15  12  	    ELSE trend END trend
01:02:15  13  ,cm4
01:02:15  14  ,cm6
01:02:15  15  ,cm8
01:02:15  16  ,cm10
01:02:15  17  ,cm12
01:02:15  18  ,cm14
01:02:15  19  ,cm16
01:02:15  20  ,cm18
01:02:15  21  --
01:02:15  22  ,ca4
01:02:15  23  ,ca6
01:02:15  24  ,ca8
01:02:15  25  ,ca10
01:02:15  26  ,ca12
01:02:15  27  ,ca14
01:02:15  28  ,ca16
01:02:15  29  ,ca18
01:02:15  30  --
01:02:15  31  ,cx4
01:02:15  32  ,cx6
01:02:15  33  ,cx8
01:02:15  34  ,cx10
01:02:15  35  ,cx12
01:02:15  36  ,cx14
01:02:15  37  ,cx16
01:02:15  38  ,cx18
01:02:15  39  --
01:02:15  40  ,crr4
01:02:15  41  ,crr6
01:02:15  42  ,crr8
01:02:15  43  ,crr10
01:02:15  44  ,crr12
01:02:15  45  ,crr14
01:02:15  46  ,crr16
01:02:15  47  ,crr18
01:02:15  48  --
01:02:15  49  ,hh
01:02:15  50  ,d
01:02:15  51  ,w
01:02:15  52  ,mpm
01:02:15  53  ,mph
01:02:15  54  FROM svm6122
01:02:15  55  ORDER BY ydate
01:02:15  56  /

Table created.

Elapsed: 00:00:00.37
01:02:16 SQL> 
01:02:16 SQL> -- rpt
01:02:16 SQL> 
01:02:16 SQL> SELECT
01:02:16   2  pair
01:02:16   3  ,trend
01:02:16   4  ,gatt
01:02:16   5  ,COUNT(pair)
01:02:16   6  ,AVG(g6)
01:02:16   7  FROM svm6142
01:02:16   8  GROUP BY pair,trend,gatt
01:02:16   9  ORDER BY pair,trend,gatt
01:02:16  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ajp_usd 	-1 nup	      4078 -.22856487
ajp_usd 	-1 up	      5147 .222123743
ajp_usd 	-1		32
ajp_usd 	 1 nup	      5173  -.2004072
ajp_usd 	 1 up	      4782 .205529881
ajp_usd 	 1		40

6 rows selected.

Elapsed: 00:00:00.03
01:02:16 SQL> 
01:02:16 SQL> 
01:02:16 SQL> -- Derive NTILE based params:
01:02:16 SQL> 
01:02:16 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.13
01:02:16 SQL> CREATE TABLE svm6162 COMPRESS AS
01:02:16   2  SELECT
01:02:16   3  pair
01:02:16   4  ,ydate
01:02:16   5  ,prdate
01:02:16   6  ,clse
01:02:16   7  ,g6
01:02:16   8  ,gatt
01:02:16   9  ,gattn
01:02:16  10  ,trend
01:02:16  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
01:02:16  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
01:02:16  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
01:02:16  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
01:02:16  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
01:02:16  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
01:02:16  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
01:02:16  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
01:02:16  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
01:02:16  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
01:02:16  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
01:02:16  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
01:02:16  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
01:02:16  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
01:02:16  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
01:02:16  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
01:02:16  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
01:02:16  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
01:02:16  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
01:02:16  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
01:02:16  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
01:02:16  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
01:02:16  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
01:02:16  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
01:02:16  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
01:02:16  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
01:02:16  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
01:02:16  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
01:02:16  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
01:02:16  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
01:02:16  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
01:02:16  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
01:02:16  43  ,hh  att32
01:02:16  44  ,d   att33
01:02:16  45  ,w   att34
01:02:16  46  ,mpm att35
01:02:16  47  ,mph att36
01:02:16  48  ,trend att37
01:02:16  49  FROM svm6142
01:02:16  50  ORDER BY ydate
01:02:16  51  /

Table created.

Elapsed: 00:00:04.94
01:02:21 SQL> 
01:02:21 SQL> -- rpt
01:02:21 SQL> 
01:02:21 SQL> SELECT
01:02:21   2  pair
01:02:21   3  ,trend
01:02:21   4  ,gatt
01:02:21   5  ,COUNT(pair)
01:02:21   6  ,AVG(g6)
01:02:21   7  FROM svm6162
01:02:21   8  GROUP BY pair,trend,gatt
01:02:21   9  ORDER BY pair,trend,gatt
01:02:21  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ajp_usd 	-1 nup	      4078 -.22856487
ajp_usd 	-1 up	      5147 .222123743
ajp_usd 	-1		32
ajp_usd 	 1 nup	      5173  -.2004072
ajp_usd 	 1 up	      4782 .205529881
ajp_usd 	 1		40

6 rows selected.

Elapsed: 00:00:00.03
01:02:21 SQL> 
01:02:21 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
01:02:21 SQL> CREATE TABLE modsrc COMPRESS AS
01:02:21   2  SELECT
01:02:21   3  pair
01:02:21   4  ,ydate
01:02:21   5  ,prdate
01:02:21   6  ,trend
01:02:21   7  ,g6
01:02:21   8  ,gatt
01:02:21   9  ,gattn
01:02:21  10  FROM svm6162
01:02:21  11  /

Table created.

Elapsed: 00:00:00.09
01:02:21 SQL> 
01:02:21 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.23
01:02:21 SQL> 
01:02:21 SQL> DROP   TABLE ajp_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
01:02:21 SQL> CREATE TABLE ajp_ms610 COMPRESS AS
01:02:21   2  SELECT
01:02:21   3  ydate
01:02:21   4  ,trend ajp_trend
01:02:21   5  ,g6    ajp_g6
01:02:21   6  ,gatt  ajp_gatt
01:02:21   7  ,gattn ajp_gattn
01:02:21   8  FROM modsrc
01:02:21   9  /

Table created.

Elapsed: 00:00:00.07
01:02:21 SQL> 
01:02:21 SQL> ANALYZE TABLE ajp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.28
01:02:22 SQL> 
01:02:22 SQL> -- I need a copy of the attributes:
01:02:22 SQL> 
01:02:22 SQL> 
01:02:22 SQL> DROP   TABLE ajp_att;

Table dropped.

Elapsed: 00:00:00.05
01:02:22 SQL> CREATE TABLE ajp_att COMPRESS AS
01:02:22   2  SELECT
01:02:22   3  ydate
01:02:22   4  ,att00 ajp_att00
01:02:22   5  ,att01 ajp_att01
01:02:22   6  ,att02 ajp_att02
01:02:22   7  ,att03 ajp_att03
01:02:22   8  ,att04 ajp_att04
01:02:22   9  ,att05 ajp_att05
01:02:22  10  ,att06 ajp_att06
01:02:22  11  ,att07 ajp_att07
01:02:22  12  ,att08 ajp_att08
01:02:22  13  ,att09 ajp_att09
01:02:22  14  ,att10 ajp_att10
01:02:22  15  ,att11 ajp_att11
01:02:22  16  ,att12 ajp_att12
01:02:22  17  ,att13 ajp_att13
01:02:22  18  ,att14 ajp_att14
01:02:22  19  ,att15 ajp_att15
01:02:22  20  ,att16 ajp_att16
01:02:22  21  ,att17 ajp_att17
01:02:22  22  ,att18 ajp_att18
01:02:22  23  ,att19 ajp_att19
01:02:22  24  ,att20 ajp_att20
01:02:22  25  ,att21 ajp_att21
01:02:22  26  ,att22 ajp_att22
01:02:22  27  ,att23 ajp_att23
01:02:22  28  ,att24 ajp_att24
01:02:22  29  ,att25 ajp_att25
01:02:22  30  ,att26 ajp_att26
01:02:22  31  ,att27 ajp_att27
01:02:22  32  ,att28 ajp_att28
01:02:22  33  ,att29 ajp_att29
01:02:22  34  ,att30 ajp_att30
01:02:22  35  ,att31 ajp_att31
01:02:22  36  ,att32 ajp_att32
01:02:22  37  ,att33 ajp_att33
01:02:22  38  ,att34 ajp_att34
01:02:22  39  ,att35 ajp_att35
01:02:22  40  ,att36 ajp_att36
01:02:22  41  ,att37 ajp_att37
01:02:22  42  FROM svm6162
01:02:22  43  /

Table created.

Elapsed: 00:00:00.17
01:02:22 SQL> 
01:02:22 SQL> ANALYZE TABLE ajp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.51
01:02:22 SQL> 
01:02:22 SQL> -- rpt
01:02:22 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19252

Elapsed: 00:00:00.76
01:02:23 SQL> SELECT COUNT(*)FROM ajp_att;

  COUNT(*)
----------
     19252

Elapsed: 00:00:00.00
01:02:23 SQL> 
01:02:23 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
