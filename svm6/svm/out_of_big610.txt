
SQL*Plus: Release 11.2.0.1.0 Production on Fri Jan 7 07:19:12 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

07:19:12 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
07:19:12 SQL> 07:19:12 SQL> --
07:19:12 SQL> -- eur610.sql
07:19:12 SQL> --
07:19:12 SQL> 
07:19:12 SQL> -- Creates views and tables for backtesting a forex SVM strategy
07:19:12 SQL> 
07:19:12 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.03
07:19:12 SQL> 
07:19:12 SQL> -- I created di5min here:
07:19:12 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
07:19:12 SQL> 
07:19:12 SQL> CREATE OR REPLACE VIEW svm6102 AS
07:19:12   2  SELECT
07:19:12   3  pair
07:19:12   4  ,ydate
07:19:12   5  ,prdate
07:19:12   6  ,rownum rnum -- acts as t in my time-series
07:19:12   7  ,clse
07:19:12   8  -- Derive a bunch of attributes from clse, the latest price:
07:19:12   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
07:19:12  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
07:19:12  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
07:19:12  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
07:19:12  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
07:19:12  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
07:19:12  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
07:19:12  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
07:19:12  17  --
07:19:12  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
07:19:12  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
07:19:12  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
07:19:12  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
07:19:12  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
07:19:12  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
07:19:12  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
07:19:12  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
07:19:12  26  --
07:19:12  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
07:19:12  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
07:19:12  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
07:19:12  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
07:19:12  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
07:19:12  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
07:19:12  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
07:19:12  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
07:19:12  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
07:19:12  36  FROM di5min WHERE pair LIKE'%eur%'
07:19:12  37  AND ydate > sysdate - 95
07:19:12  38  ORDER BY ydate
07:19:12  39  /

View created.

Elapsed: 00:00:00.05
07:19:12 SQL> 
07:19:12 SQL> -- rpt
07:19:12 SQL> 
07:19:12 SQL> SELECT
07:19:12   2  pair
07:19:12   3  ,COUNT(pair)
07:19:12   4  ,MIN(clse),MAX(clse)
07:19:12   5  ,MIN(avg6),MAX(avg6)
07:19:12   6  ,MIN(ydate),MAX(ydate)
07:19:12   7  FROM svm6102
07:19:12   8  GROUP BY pair
07:19:12   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_usd       19811    1.29735	   1.4273 1.29875103 1.42436233 2010-10-04 07:20:01 2011-01-07 07:15:00

Elapsed: 00:00:00.93
07:19:13 SQL> 
07:19:13 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
07:19:13 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.13
07:19:13 SQL> CREATE TABLE svm6122 COMPRESS AS
07:19:13   2  SELECT
07:19:13   3  pair
07:19:13   4  ,ydate
07:19:13   5  ,prdate
07:19:13   6  ,clse
07:19:13   7  -- g6 is important. I want to predict g6:
07:19:13   8  ,ld6 - clse g6
07:19:13   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
07:19:13  10  -- I want more attributes from the ones I derived above:
07:19:13  11  -- clse relation to moving-min
07:19:13  12  ,clse-min4  cm4
07:19:13  13  ,clse-min6  cm6
07:19:13  14  ,clse-min8  cm8
07:19:13  15  ,clse-min10 cm10
07:19:13  16  ,clse-min12 cm12
07:19:13  17  ,clse-min14 cm14
07:19:13  18  ,clse-min16 cm16
07:19:13  19  ,clse-min18 cm18
07:19:13  20  -- clse relation to moving-avg
07:19:13  21  ,clse-avg4  ca4
07:19:13  22  ,clse-avg6  ca6
07:19:13  23  ,clse-avg8  ca8
07:19:13  24  ,clse-avg10 ca10
07:19:13  25  ,clse-avg12 ca12
07:19:13  26  ,clse-avg14 ca14
07:19:13  27  ,clse-avg16 ca16
07:19:13  28  ,clse-avg18 ca18
07:19:13  29  -- clse relation to moving-max
07:19:13  30  ,clse-max4  cx4
07:19:13  31  ,clse-max6  cx6
07:19:13  32  ,clse-max8  cx8
07:19:13  33  ,clse-max10 cx10
07:19:13  34  ,clse-max12 cx12
07:19:13  35  ,clse-max14 cx14
07:19:13  36  ,clse-max16 cx16
07:19:13  37  ,clse-max18 cx18
07:19:13  38  -- Derive more attributes.
07:19:13  39  -- I want to use CORR() here to help SVM see the shape of the series.
07:19:13  40  -- But COVAR_POP is more stable:
07:19:13  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
07:19:13  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
07:19:13  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
07:19:13  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
07:19:13  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
07:19:13  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
07:19:13  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
07:19:13  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
07:19:13  49  -- Derive date related attributes:
07:19:13  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
07:19:13  51  ,0+TO_CHAR(ydate,'D')d
07:19:13  52  ,0+TO_CHAR(ydate,'W')w
07:19:13  53  -- mpm stands for minutes-past-midnight:
07:19:13  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
07:19:13  55  -- mph stands for minutes-past-hour:
07:19:13  56  ,0+TO_CHAR(ydate,'MI')mph
07:19:13  57  FROM svm6102
07:19:13  58  ORDER BY ydate
07:19:13  59  /

Table created.

Elapsed: 00:00:02.37
07:19:15 SQL> 
07:19:15 SQL> -- rpt
07:19:15 SQL> 
07:19:15 SQL> SELECT
07:19:15   2  pair
07:19:15   3  ,COUNT(pair)
07:19:15   4  ,MIN(clse),MAX(clse)
07:19:15   5  ,MIN(ydate),MAX(ydate)
07:19:15   6  FROM svm6122
07:19:15   7  GROUP BY pair
07:19:15   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_usd       19811    1.29735	   1.4273 2010-10-04 07:20:01 2011-01-07 07:15:00

Elapsed: 00:00:00.07
07:19:15 SQL> 
07:19:15 SQL> -- Prepare for derivation of NTILE based params:
07:19:15 SQL> 
07:19:15 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.17
07:19:15 SQL> CREATE TABLE svm6142 COMPRESS AS
07:19:15   2  SELECT
07:19:15   3  pair
07:19:15   4  ,ydate
07:19:15   5  ,prdate
07:19:15   6  ,clse
07:19:15   7  ,g6
07:19:15   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
07:19:15   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
07:19:15  10  ,CASE WHEN trend IS NULL THEN 1
07:19:15  11  	    WHEN trend =0      THEN 1
07:19:15  12  	    ELSE trend END trend
07:19:15  13  ,cm4
07:19:15  14  ,cm6
07:19:15  15  ,cm8
07:19:15  16  ,cm10
07:19:15  17  ,cm12
07:19:15  18  ,cm14
07:19:15  19  ,cm16
07:19:15  20  ,cm18
07:19:15  21  --
07:19:15  22  ,ca4
07:19:15  23  ,ca6
07:19:15  24  ,ca8
07:19:15  25  ,ca10
07:19:15  26  ,ca12
07:19:15  27  ,ca14
07:19:15  28  ,ca16
07:19:15  29  ,ca18
07:19:15  30  --
07:19:15  31  ,cx4
07:19:15  32  ,cx6
07:19:15  33  ,cx8
07:19:15  34  ,cx10
07:19:15  35  ,cx12
07:19:15  36  ,cx14
07:19:15  37  ,cx16
07:19:15  38  ,cx18
07:19:15  39  --
07:19:15  40  ,crr4
07:19:15  41  ,crr6
07:19:15  42  ,crr8
07:19:15  43  ,crr10
07:19:15  44  ,crr12
07:19:15  45  ,crr14
07:19:15  46  ,crr16
07:19:15  47  ,crr18
07:19:15  48  --
07:19:15  49  ,hh
07:19:15  50  ,d
07:19:15  51  ,w
07:19:15  52  ,mpm
07:19:15  53  ,mph
07:19:15  54  FROM svm6122
07:19:15  55  ORDER BY ydate
07:19:15  56  /

Table created.

Elapsed: 00:00:00.38
07:19:16 SQL> 
07:19:16 SQL> -- rpt
07:19:16 SQL> 
07:19:16 SQL> SELECT
07:19:16   2  pair
07:19:16   3  ,trend
07:19:16   4  ,gatt
07:19:16   5  ,COUNT(pair)
07:19:16   6  ,AVG(g6)
07:19:16   7  FROM svm6142
07:19:16   8  GROUP BY pair,trend,gatt
07:19:16   9  ORDER BY pair,trend,gatt
07:19:16  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6581 -.00313706
eur_usd 	-1 up	      3565 .004450866
eur_usd 	-1		56
eur_usd 	 1 nup	      5888 -.00323884
eur_usd 	 1 up	      3705 .005071238
eur_usd 	 1		16

6 rows selected.

Elapsed: 00:00:00.06
07:19:16 SQL> 
07:19:16 SQL> 
07:19:16 SQL> -- Derive NTILE based params:
07:19:16 SQL> 
07:19:16 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.21
07:19:16 SQL> CREATE TABLE svm6162 COMPRESS AS
07:19:16   2  SELECT
07:19:16   3  pair
07:19:16   4  ,ydate
07:19:16   5  ,prdate
07:19:16   6  ,clse
07:19:16   7  ,g6
07:19:16   8  ,gatt
07:19:16   9  ,gattn
07:19:16  10  ,trend
07:19:16  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
07:19:16  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
07:19:16  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
07:19:16  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
07:19:16  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
07:19:16  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
07:19:16  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
07:19:16  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
07:19:16  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
07:19:16  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
07:19:16  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
07:19:16  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
07:19:16  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
07:19:16  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
07:19:16  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
07:19:16  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
07:19:16  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
07:19:16  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
07:19:16  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
07:19:16  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
07:19:16  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
07:19:16  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
07:19:16  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
07:19:16  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
07:19:16  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
07:19:16  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
07:19:16  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
07:19:16  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
07:19:16  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
07:19:16  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
07:19:16  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
07:19:16  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
07:19:16  43  ,hh  att32
07:19:16  44  ,d   att33
07:19:16  45  ,w   att34
07:19:16  46  ,mpm att35
07:19:16  47  ,mph att36
07:19:16  48  ,trend att37
07:19:16  49  FROM svm6142
07:19:16  50  ORDER BY ydate
07:19:16  51  /

Table created.

Elapsed: 00:00:04.83
07:19:21 SQL> 
07:19:21 SQL> -- rpt
07:19:21 SQL> 
07:19:21 SQL> SELECT
07:19:21   2  pair
07:19:21   3  ,trend
07:19:21   4  ,gatt
07:19:21   5  ,COUNT(pair)
07:19:21   6  ,AVG(g6)
07:19:21   7  FROM svm6162
07:19:21   8  GROUP BY pair,trend,gatt
07:19:21   9  ORDER BY pair,trend,gatt
07:19:21  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6581 -.00313706
eur_usd 	-1 up	      3565 .004450866
eur_usd 	-1		56
eur_usd 	 1 nup	      5888 -.00323884
eur_usd 	 1 up	      3705 .005071238
eur_usd 	 1		16

6 rows selected.

Elapsed: 00:00:00.03
07:19:21 SQL> 
07:19:21 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.17
07:19:21 SQL> CREATE TABLE modsrc COMPRESS AS
07:19:21   2  SELECT
07:19:21   3  pair
07:19:21   4  ,ydate
07:19:21   5  ,prdate
07:19:21   6  ,trend
07:19:21   7  ,g6
07:19:21   8  ,gatt
07:19:21   9  ,gattn
07:19:21  10  FROM svm6162
07:19:21  11  /

Table created.

Elapsed: 00:00:00.09
07:19:21 SQL> 
07:19:21 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
07:19:21 SQL> 
07:19:21 SQL> DROP   TABLE eur_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
07:19:21 SQL> CREATE TABLE eur_ms610 COMPRESS AS
07:19:21   2  SELECT
07:19:21   3  ydate
07:19:21   4  ,trend eur_trend
07:19:21   5  ,g6    eur_g6
07:19:21   6  ,gatt  eur_gatt
07:19:21   7  ,gattn eur_gattn
07:19:21   8  FROM modsrc
07:19:21   9  /

Table created.

Elapsed: 00:00:00.06
07:19:22 SQL> 
07:19:22 SQL> ANALYZE TABLE eur_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
07:19:22 SQL> 
07:19:22 SQL> -- I need a copy of the attributes:
07:19:22 SQL> 
07:19:22 SQL> 
07:19:22 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.53
07:19:22 SQL> CREATE TABLE eur_att COMPRESS AS
07:19:22   2  SELECT
07:19:22   3  ydate
07:19:22   4  ,att00 eur_att00
07:19:22   5  ,att01 eur_att01
07:19:22   6  ,att02 eur_att02
07:19:22   7  ,att03 eur_att03
07:19:22   8  ,att04 eur_att04
07:19:22   9  ,att05 eur_att05
07:19:22  10  ,att06 eur_att06
07:19:22  11  ,att07 eur_att07
07:19:22  12  ,att08 eur_att08
07:19:22  13  ,att09 eur_att09
07:19:22  14  ,att10 eur_att10
07:19:22  15  ,att11 eur_att11
07:19:22  16  ,att12 eur_att12
07:19:22  17  ,att13 eur_att13
07:19:22  18  ,att14 eur_att14
07:19:22  19  ,att15 eur_att15
07:19:22  20  ,att16 eur_att16
07:19:22  21  ,att17 eur_att17
07:19:22  22  ,att18 eur_att18
07:19:22  23  ,att19 eur_att19
07:19:22  24  ,att20 eur_att20
07:19:22  25  ,att21 eur_att21
07:19:22  26  ,att22 eur_att22
07:19:22  27  ,att23 eur_att23
07:19:22  28  ,att24 eur_att24
07:19:22  29  ,att25 eur_att25
07:19:22  30  ,att26 eur_att26
07:19:22  31  ,att27 eur_att27
07:19:22  32  ,att28 eur_att28
07:19:22  33  ,att29 eur_att29
07:19:22  34  ,att30 eur_att30
07:19:22  35  ,att31 eur_att31
07:19:22  36  ,att32 eur_att32
07:19:22  37  ,att33 eur_att33
07:19:22  38  ,att34 eur_att34
07:19:22  39  ,att35 eur_att35
07:19:22  40  ,att36 eur_att36
07:19:22  41  ,att37 eur_att37
07:19:22  42  FROM svm6162
07:19:22  43  /

Table created.

Elapsed: 00:00:00.24
07:19:22 SQL> 
07:19:22 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
07:19:23 SQL> 
07:19:23 SQL> -- rpt
07:19:23 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19811

Elapsed: 00:00:00.90
07:19:24 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     19811

Elapsed: 00:00:00.00
07:19:24 SQL> 
07:19:24 SQL> --
07:19:24 SQL> -- aud610.sql
07:19:24 SQL> --
07:19:24 SQL> 
07:19:24 SQL> -- Creates views and tables for backtesting a forex SVM strategy
07:19:24 SQL> 
07:19:24 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.39
07:19:24 SQL> 
07:19:24 SQL> -- I created di5min here:
07:19:24 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
07:19:24 SQL> 
07:19:24 SQL> CREATE OR REPLACE VIEW svm6102 AS
07:19:24   2  SELECT
07:19:24   3  pair
07:19:24   4  ,ydate
07:19:24   5  ,prdate
07:19:24   6  ,rownum rnum -- acts as t in my time-series
07:19:24   7  ,clse
07:19:24   8  -- Derive a bunch of attributes from clse, the latest price:
07:19:24   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
07:19:24  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
07:19:24  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
07:19:24  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
07:19:24  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
07:19:24  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
07:19:24  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
07:19:24  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
07:19:24  17  --
07:19:24  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
07:19:24  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
07:19:24  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
07:19:24  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
07:19:24  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
07:19:24  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
07:19:24  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
07:19:24  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
07:19:24  26  --
07:19:24  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
07:19:24  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
07:19:24  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
07:19:24  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
07:19:24  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
07:19:24  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
07:19:24  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
07:19:24  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
07:19:24  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
07:19:24  36  FROM di5min WHERE pair LIKE'%aud%'
07:19:24  37  AND ydate > sysdate - 95
07:19:24  38  ORDER BY ydate
07:19:24  39  /

View created.

Elapsed: 00:00:00.04
07:19:24 SQL> 
07:19:24 SQL> -- rpt
07:19:24 SQL> 
07:19:24 SQL> SELECT
07:19:24   2  pair
07:19:24   3  ,COUNT(pair)
07:19:24   4  ,MIN(clse),MAX(clse)
07:19:24   5  ,MIN(avg6),MAX(avg6)
07:19:24   6  ,MIN(ydate),MAX(ydate)
07:19:24   7  FROM svm6102
07:19:24   8  GROUP BY pair
07:19:24   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
aud_usd       19808	.95405	  1.02495 .957141438 1.02284247 2010-10-04 07:20:01 2011-01-07 07:15:00

Elapsed: 00:00:00.88
07:19:25 SQL> 
07:19:25 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
07:19:25 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.29
07:19:25 SQL> CREATE TABLE svm6122 COMPRESS AS
07:19:25   2  SELECT
07:19:25   3  pair
07:19:25   4  ,ydate
07:19:25   5  ,prdate
07:19:25   6  ,clse
07:19:25   7  -- g6 is important. I want to predict g6:
07:19:25   8  ,ld6 - clse g6
07:19:25   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
07:19:25  10  -- I want more attributes from the ones I derived above:
07:19:25  11  -- clse relation to moving-min
07:19:25  12  ,clse-min4  cm4
07:19:25  13  ,clse-min6  cm6
07:19:25  14  ,clse-min8  cm8
07:19:25  15  ,clse-min10 cm10
07:19:25  16  ,clse-min12 cm12
07:19:25  17  ,clse-min14 cm14
07:19:25  18  ,clse-min16 cm16
07:19:25  19  ,clse-min18 cm18
07:19:25  20  -- clse relation to moving-avg
07:19:25  21  ,clse-avg4  ca4
07:19:25  22  ,clse-avg6  ca6
07:19:25  23  ,clse-avg8  ca8
07:19:25  24  ,clse-avg10 ca10
07:19:25  25  ,clse-avg12 ca12
07:19:25  26  ,clse-avg14 ca14
07:19:25  27  ,clse-avg16 ca16
07:19:25  28  ,clse-avg18 ca18
07:19:25  29  -- clse relation to moving-max
07:19:25  30  ,clse-max4  cx4
07:19:25  31  ,clse-max6  cx6
07:19:25  32  ,clse-max8  cx8
07:19:25  33  ,clse-max10 cx10
07:19:25  34  ,clse-max12 cx12
07:19:25  35  ,clse-max14 cx14
07:19:25  36  ,clse-max16 cx16
07:19:25  37  ,clse-max18 cx18
07:19:25  38  -- Derive more attributes.
07:19:25  39  -- I want to use CORR() here to help SVM see the shape of the series.
07:19:25  40  -- But COVAR_POP is more stable:
07:19:25  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
07:19:25  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
07:19:25  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
07:19:25  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
07:19:25  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
07:19:25  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
07:19:25  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
07:19:25  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
07:19:25  49  -- Derive date related attributes:
07:19:25  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
07:19:25  51  ,0+TO_CHAR(ydate,'D')d
07:19:25  52  ,0+TO_CHAR(ydate,'W')w
07:19:25  53  -- mpm stands for minutes-past-midnight:
07:19:25  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
07:19:25  55  -- mph stands for minutes-past-hour:
07:19:25  56  ,0+TO_CHAR(ydate,'MI')mph
07:19:25  57  FROM svm6102
07:19:25  58  ORDER BY ydate
07:19:25  59  /

Table created.

Elapsed: 00:00:02.20
07:19:28 SQL> 
07:19:28 SQL> -- rpt
07:19:28 SQL> 
07:19:28 SQL> SELECT
07:19:28   2  pair
07:19:28   3  ,COUNT(pair)
07:19:28   4  ,MIN(clse),MAX(clse)
07:19:28   5  ,MIN(ydate),MAX(ydate)
07:19:28   6  FROM svm6122
07:19:28   7  GROUP BY pair
07:19:28   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
aud_usd       19808	.95405	  1.02495 2010-10-04 07:20:01 2011-01-07 07:15:00

Elapsed: 00:00:00.04
07:19:28 SQL> 
07:19:28 SQL> -- Prepare for derivation of NTILE based params:
07:19:28 SQL> 
07:19:28 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.25
07:19:28 SQL> CREATE TABLE svm6142 COMPRESS AS
07:19:28   2  SELECT
07:19:28   3  pair
07:19:28   4  ,ydate
07:19:28   5  ,prdate
07:19:28   6  ,clse
07:19:28   7  ,g6
07:19:28   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
07:19:28   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
07:19:28  10  ,CASE WHEN trend IS NULL THEN 1
07:19:28  11  	    WHEN trend =0      THEN 1
07:19:28  12  	    ELSE trend END trend
07:19:28  13  ,cm4
07:19:28  14  ,cm6
07:19:28  15  ,cm8
07:19:28  16  ,cm10
07:19:28  17  ,cm12
07:19:28  18  ,cm14
07:19:28  19  ,cm16
07:19:28  20  ,cm18
07:19:28  21  --
07:19:28  22  ,ca4
07:19:28  23  ,ca6
07:19:28  24  ,ca8
07:19:28  25  ,ca10
07:19:28  26  ,ca12
07:19:28  27  ,ca14
07:19:28  28  ,ca16
07:19:28  29  ,ca18
07:19:28  30  --
07:19:28  31  ,cx4
07:19:28  32  ,cx6
07:19:28  33  ,cx8
07:19:28  34  ,cx10
07:19:28  35  ,cx12
07:19:28  36  ,cx14
07:19:28  37  ,cx16
07:19:28  38  ,cx18
07:19:28  39  --
07:19:28  40  ,crr4
07:19:28  41  ,crr6
07:19:28  42  ,crr8
07:19:28  43  ,crr10
07:19:28  44  ,crr12
07:19:28  45  ,crr14
07:19:28  46  ,crr16
07:19:28  47  ,crr18
07:19:28  48  --
07:19:28  49  ,hh
07:19:28  50  ,d
07:19:28  51  ,w
07:19:28  52  ,mpm
07:19:28  53  ,mph
07:19:28  54  FROM svm6122
07:19:28  55  ORDER BY ydate
07:19:28  56  /

Table created.

Elapsed: 00:00:00.37
07:19:28 SQL> 
07:19:28 SQL> -- rpt
07:19:28 SQL> 
07:19:28 SQL> SELECT
07:19:28   2  pair
07:19:28   3  ,trend
07:19:28   4  ,gatt
07:19:28   5  ,COUNT(pair)
07:19:28   6  ,AVG(g6)
07:19:28   7  FROM svm6142
07:19:28   8  GROUP BY pair,trend,gatt
07:19:28   9  ORDER BY pair,trend,gatt
07:19:28  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5690 -.00214022
aud_usd 	-1 up	      3698 .003747445
aud_usd 	-1		65
aud_usd 	 1 nup	      6752 -.00213366
aud_usd 	 1 up	      3596 .004052871
aud_usd 	 1		 7

6 rows selected.

Elapsed: 00:00:00.05
07:19:28 SQL> 
07:19:28 SQL> 
07:19:28 SQL> -- Derive NTILE based params:
07:19:28 SQL> 
07:19:28 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.14
07:19:28 SQL> CREATE TABLE svm6162 COMPRESS AS
07:19:28   2  SELECT
07:19:28   3  pair
07:19:28   4  ,ydate
07:19:28   5  ,prdate
07:19:28   6  ,clse
07:19:28   7  ,g6
07:19:28   8  ,gatt
07:19:28   9  ,gattn
07:19:28  10  ,trend
07:19:28  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
07:19:28  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
07:19:28  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
07:19:28  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
07:19:28  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
07:19:28  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
07:19:28  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
07:19:28  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
07:19:28  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
07:19:28  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
07:19:28  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
07:19:28  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
07:19:28  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
07:19:28  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
07:19:28  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
07:19:28  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
07:19:28  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
07:19:28  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
07:19:28  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
07:19:28  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
07:19:28  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
07:19:28  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
07:19:28  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
07:19:28  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
07:19:28  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
07:19:28  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
07:19:28  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
07:19:28  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
07:19:28  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
07:19:28  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
07:19:28  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
07:19:28  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
07:19:28  43  ,hh  att32
07:19:28  44  ,d   att33
07:19:28  45  ,w   att34
07:19:28  46  ,mpm att35
07:19:28  47  ,mph att36
07:19:28  48  ,trend att37
07:19:28  49  FROM svm6142
07:19:28  50  ORDER BY ydate
07:19:28  51  /

Table created.

Elapsed: 00:00:04.79
07:19:33 SQL> 
07:19:33 SQL> -- rpt
07:19:33 SQL> 
07:19:33 SQL> SELECT
07:19:33   2  pair
07:19:33   3  ,trend
07:19:33   4  ,gatt
07:19:33   5  ,COUNT(pair)
07:19:33   6  ,AVG(g6)
07:19:33   7  FROM svm6162
07:19:33   8  GROUP BY pair,trend,gatt
07:19:33   9  ORDER BY pair,trend,gatt
07:19:33  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5690 -.00214022
aud_usd 	-1 up	      3698 .003747445
aud_usd 	-1		65
aud_usd 	 1 nup	      6752 -.00213366
aud_usd 	 1 up	      3596 .004052871
aud_usd 	 1		 7

6 rows selected.

Elapsed: 00:00:00.03
07:19:33 SQL> 
07:19:33 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.21
07:19:34 SQL> CREATE TABLE modsrc COMPRESS AS
07:19:34   2  SELECT
07:19:34   3  pair
07:19:34   4  ,ydate
07:19:34   5  ,prdate
07:19:34   6  ,trend
07:19:34   7  ,g6
07:19:34   8  ,gatt
07:19:34   9  ,gattn
07:19:34  10  FROM svm6162
07:19:34  11  /

Table created.

Elapsed: 00:00:00.08
07:19:34 SQL> 
07:19:34 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
07:19:34 SQL> 
07:19:34 SQL> DROP   TABLE aud_ms610 ;

Table dropped.

Elapsed: 00:00:00.07
07:19:34 SQL> CREATE TABLE aud_ms610 COMPRESS AS
07:19:34   2  SELECT
07:19:34   3  ydate
07:19:34   4  ,trend aud_trend
07:19:34   5  ,g6    aud_g6
07:19:34   6  ,gatt  aud_gatt
07:19:34   7  ,gattn aud_gattn
07:19:34   8  FROM modsrc
07:19:34   9  /

Table created.

Elapsed: 00:00:00.08
07:19:34 SQL> 
07:19:34 SQL> ANALYZE TABLE aud_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
07:19:34 SQL> 
07:19:34 SQL> -- I need a copy of the attributes:
07:19:34 SQL> 
07:19:34 SQL> 
07:19:34 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.04
07:19:34 SQL> CREATE TABLE aud_att COMPRESS AS
07:19:34   2  SELECT
07:19:34   3  ydate
07:19:34   4  ,att00 aud_att00
07:19:34   5  ,att01 aud_att01
07:19:34   6  ,att02 aud_att02
07:19:34   7  ,att03 aud_att03
07:19:34   8  ,att04 aud_att04
07:19:34   9  ,att05 aud_att05
07:19:34  10  ,att06 aud_att06
07:19:34  11  ,att07 aud_att07
07:19:34  12  ,att08 aud_att08
07:19:34  13  ,att09 aud_att09
07:19:34  14  ,att10 aud_att10
07:19:34  15  ,att11 aud_att11
07:19:34  16  ,att12 aud_att12
07:19:34  17  ,att13 aud_att13
07:19:34  18  ,att14 aud_att14
07:19:34  19  ,att15 aud_att15
07:19:34  20  ,att16 aud_att16
07:19:34  21  ,att17 aud_att17
07:19:34  22  ,att18 aud_att18
07:19:34  23  ,att19 aud_att19
07:19:34  24  ,att20 aud_att20
07:19:34  25  ,att21 aud_att21
07:19:34  26  ,att22 aud_att22
07:19:34  27  ,att23 aud_att23
07:19:34  28  ,att24 aud_att24
07:19:34  29  ,att25 aud_att25
07:19:34  30  ,att26 aud_att26
07:19:34  31  ,att27 aud_att27
07:19:34  32  ,att28 aud_att28
07:19:34  33  ,att29 aud_att29
07:19:34  34  ,att30 aud_att30
07:19:34  35  ,att31 aud_att31
07:19:34  36  ,att32 aud_att32
07:19:34  37  ,att33 aud_att33
07:19:34  38  ,att34 aud_att34
07:19:34  39  ,att35 aud_att35
07:19:34  40  ,att36 aud_att36
07:19:34  41  ,att37 aud_att37
07:19:34  42  FROM svm6162
07:19:34  43  /

Table created.

Elapsed: 00:00:00.18
07:19:34 SQL> 
07:19:34 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
07:19:35 SQL> 
07:19:35 SQL> -- rpt
07:19:35 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19808

Elapsed: 00:00:00.86
07:19:36 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     19808

Elapsed: 00:00:00.00
07:19:36 SQL> 
07:19:36 SQL> --
07:19:36 SQL> -- gbp610.sql
07:19:36 SQL> --
07:19:36 SQL> 
07:19:36 SQL> -- Creates views and tables for backtesting a forex SVM strategy
07:19:36 SQL> 
07:19:36 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.52
07:19:36 SQL> 
07:19:36 SQL> -- I created di5min here:
07:19:36 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
07:19:36 SQL> 
07:19:36 SQL> CREATE OR REPLACE VIEW svm6102 AS
07:19:36   2  SELECT
07:19:36   3  pair
07:19:36   4  ,ydate
07:19:36   5  ,prdate
07:19:36   6  ,rownum rnum -- acts as t in my time-series
07:19:36   7  ,clse
07:19:36   8  -- Derive a bunch of attributes from clse, the latest price:
07:19:36   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
07:19:36  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
07:19:36  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
07:19:36  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
07:19:36  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
07:19:36  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
07:19:36  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
07:19:36  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
07:19:36  17  --
07:19:36  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
07:19:36  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
07:19:36  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
07:19:36  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
07:19:36  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
07:19:36  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
07:19:36  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
07:19:36  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
07:19:36  26  --
07:19:36  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
07:19:36  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
07:19:36  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
07:19:36  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
07:19:36  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
07:19:36  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
07:19:36  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
07:19:36  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
07:19:36  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
07:19:36  36  FROM di5min WHERE pair LIKE'%gbp%'
07:19:36  37  AND ydate > sysdate - 95
07:19:36  38  ORDER BY ydate
07:19:36  39  /

View created.

Elapsed: 00:00:00.07
07:19:36 SQL> 
07:19:36 SQL> -- rpt
07:19:36 SQL> 
07:19:36 SQL> SELECT
07:19:36   2  pair
07:19:36   3  ,COUNT(pair)
07:19:36   4  ,MIN(clse),MAX(clse)
07:19:36   5  ,MIN(avg6),MAX(avg6)
07:19:36   6  ,MIN(ydate),MAX(ydate)
07:19:36   7  FROM svm6102
07:19:36   8  GROUP BY pair
07:19:36   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
gbp_usd       19810   1.535325	   1.6295 1.53696747 1.62716986 2010-10-04 07:20:01 2011-01-07 07:15:00

Elapsed: 00:00:00.89
07:19:37 SQL> 
07:19:37 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
07:19:37 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.23
07:19:37 SQL> CREATE TABLE svm6122 COMPRESS AS
07:19:37   2  SELECT
07:19:37   3  pair
07:19:37   4  ,ydate
07:19:37   5  ,prdate
07:19:37   6  ,clse
07:19:37   7  -- g6 is important. I want to predict g6:
07:19:37   8  ,ld6 - clse g6
07:19:37   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
07:19:37  10  -- I want more attributes from the ones I derived above:
07:19:37  11  -- clse relation to moving-min
07:19:37  12  ,clse-min4  cm4
07:19:37  13  ,clse-min6  cm6
07:19:37  14  ,clse-min8  cm8
07:19:37  15  ,clse-min10 cm10
07:19:37  16  ,clse-min12 cm12
07:19:37  17  ,clse-min14 cm14
07:19:37  18  ,clse-min16 cm16
07:19:37  19  ,clse-min18 cm18
07:19:37  20  -- clse relation to moving-avg
07:19:37  21  ,clse-avg4  ca4
07:19:37  22  ,clse-avg6  ca6
07:19:37  23  ,clse-avg8  ca8
07:19:37  24  ,clse-avg10 ca10
07:19:37  25  ,clse-avg12 ca12
07:19:37  26  ,clse-avg14 ca14
07:19:37  27  ,clse-avg16 ca16
07:19:37  28  ,clse-avg18 ca18
07:19:37  29  -- clse relation to moving-max
07:19:37  30  ,clse-max4  cx4
07:19:37  31  ,clse-max6  cx6
07:19:37  32  ,clse-max8  cx8
07:19:37  33  ,clse-max10 cx10
07:19:37  34  ,clse-max12 cx12
07:19:37  35  ,clse-max14 cx14
07:19:37  36  ,clse-max16 cx16
07:19:37  37  ,clse-max18 cx18
07:19:37  38  -- Derive more attributes.
07:19:37  39  -- I want to use CORR() here to help SVM see the shape of the series.
07:19:37  40  -- But COVAR_POP is more stable:
07:19:37  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
07:19:37  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
07:19:37  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
07:19:37  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
07:19:37  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
07:19:37  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
07:19:37  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
07:19:37  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
07:19:37  49  -- Derive date related attributes:
07:19:37  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
07:19:37  51  ,0+TO_CHAR(ydate,'D')d
07:19:37  52  ,0+TO_CHAR(ydate,'W')w
07:19:37  53  -- mpm stands for minutes-past-midnight:
07:19:37  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
07:19:37  55  -- mph stands for minutes-past-hour:
07:19:37  56  ,0+TO_CHAR(ydate,'MI')mph
07:19:37  57  FROM svm6102
07:19:37  58  ORDER BY ydate
07:19:37  59  /

Table created.

Elapsed: 00:00:02.12
07:19:39 SQL> 
07:19:39 SQL> -- rpt
07:19:39 SQL> 
07:19:39 SQL> SELECT
07:19:39   2  pair
07:19:39   3  ,COUNT(pair)
07:19:39   4  ,MIN(clse),MAX(clse)
07:19:39   5  ,MIN(ydate),MAX(ydate)
07:19:39   6  FROM svm6122
07:19:39   7  GROUP BY pair
07:19:39   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
gbp_usd       19810   1.535325	   1.6295 2010-10-04 07:20:01 2011-01-07 07:15:00

Elapsed: 00:00:00.04
07:19:40 SQL> 
07:19:40 SQL> -- Prepare for derivation of NTILE based params:
07:19:40 SQL> 
07:19:40 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.23
07:19:40 SQL> CREATE TABLE svm6142 COMPRESS AS
07:19:40   2  SELECT
07:19:40   3  pair
07:19:40   4  ,ydate
07:19:40   5  ,prdate
07:19:40   6  ,clse
07:19:40   7  ,g6
07:19:40   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
07:19:40   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
07:19:40  10  ,CASE WHEN trend IS NULL THEN 1
07:19:40  11  	    WHEN trend =0      THEN 1
07:19:40  12  	    ELSE trend END trend
07:19:40  13  ,cm4
07:19:40  14  ,cm6
07:19:40  15  ,cm8
07:19:40  16  ,cm10
07:19:40  17  ,cm12
07:19:40  18  ,cm14
07:19:40  19  ,cm16
07:19:40  20  ,cm18
07:19:40  21  --
07:19:40  22  ,ca4
07:19:40  23  ,ca6
07:19:40  24  ,ca8
07:19:40  25  ,ca10
07:19:40  26  ,ca12
07:19:40  27  ,ca14
07:19:40  28  ,ca16
07:19:40  29  ,ca18
07:19:40  30  --
07:19:40  31  ,cx4
07:19:40  32  ,cx6
07:19:40  33  ,cx8
07:19:40  34  ,cx10
07:19:40  35  ,cx12
07:19:40  36  ,cx14
07:19:40  37  ,cx16
07:19:40  38  ,cx18
07:19:40  39  --
07:19:40  40  ,crr4
07:19:40  41  ,crr6
07:19:40  42  ,crr8
07:19:40  43  ,crr10
07:19:40  44  ,crr12
07:19:40  45  ,crr14
07:19:40  46  ,crr16
07:19:40  47  ,crr18
07:19:40  48  --
07:19:40  49  ,hh
07:19:40  50  ,d
07:19:40  51  ,w
07:19:40  52  ,mpm
07:19:40  53  ,mph
07:19:40  54  FROM svm6122
07:19:40  55  ORDER BY ydate
07:19:40  56  /

Table created.

Elapsed: 00:00:00.37
07:19:40 SQL> 
07:19:40 SQL> -- rpt
07:19:40 SQL> 
07:19:40 SQL> SELECT
07:19:40   2  pair
07:19:40   3  ,trend
07:19:40   4  ,gatt
07:19:40   5  ,COUNT(pair)
07:19:40   6  ,AVG(g6)
07:19:40   7  FROM svm6142
07:19:40   8  GROUP BY pair,trend,gatt
07:19:40   9  ORDER BY pair,trend,gatt
07:19:40  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6456  -.0026237
gbp_usd 	-1 up	      3518 .004323682
gbp_usd 	-1		72
gbp_usd 	 1 nup	      6279 -.00265679
gbp_usd 	 1 up	      3485 .004540212

Elapsed: 00:00:00.04
07:19:40 SQL> 
07:19:40 SQL> 
07:19:40 SQL> -- Derive NTILE based params:
07:19:40 SQL> 
07:19:40 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.21
07:19:40 SQL> CREATE TABLE svm6162 COMPRESS AS
07:19:40   2  SELECT
07:19:40   3  pair
07:19:40   4  ,ydate
07:19:40   5  ,prdate
07:19:40   6  ,clse
07:19:40   7  ,g6
07:19:40   8  ,gatt
07:19:40   9  ,gattn
07:19:40  10  ,trend
07:19:40  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
07:19:40  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
07:19:40  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
07:19:40  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
07:19:40  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
07:19:40  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
07:19:40  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
07:19:40  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
07:19:40  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
07:19:40  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
07:19:40  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
07:19:40  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
07:19:40  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
07:19:40  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
07:19:40  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
07:19:40  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
07:19:40  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
07:19:40  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
07:19:40  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
07:19:40  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
07:19:40  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
07:19:40  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
07:19:40  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
07:19:40  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
07:19:40  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
07:19:40  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
07:19:40  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
07:19:40  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
07:19:40  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
07:19:40  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
07:19:40  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
07:19:40  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
07:19:40  43  ,hh  att32
07:19:40  44  ,d   att33
07:19:40  45  ,w   att34
07:19:40  46  ,mpm att35
07:19:40  47  ,mph att36
07:19:40  48  ,trend att37
07:19:40  49  FROM svm6142
07:19:40  50  ORDER BY ydate
07:19:40  51  /

Table created.

Elapsed: 00:00:04.85
07:19:45 SQL> 
07:19:45 SQL> -- rpt
07:19:45 SQL> 
07:19:45 SQL> SELECT
07:19:45   2  pair
07:19:45   3  ,trend
07:19:45   4  ,gatt
07:19:45   5  ,COUNT(pair)
07:19:45   6  ,AVG(g6)
07:19:45   7  FROM svm6162
07:19:45   8  GROUP BY pair,trend,gatt
07:19:45   9  ORDER BY pair,trend,gatt
07:19:45  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6456  -.0026237
gbp_usd 	-1 up	      3518 .004323682
gbp_usd 	-1		72
gbp_usd 	 1 nup	      6279 -.00265679
gbp_usd 	 1 up	      3485 .004540212

Elapsed: 00:00:00.03
07:19:45 SQL> 
07:19:45 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
07:19:45 SQL> CREATE TABLE modsrc COMPRESS AS
07:19:45   2  SELECT
07:19:45   3  pair
07:19:45   4  ,ydate
07:19:45   5  ,prdate
07:19:45   6  ,trend
07:19:45   7  ,g6
07:19:45   8  ,gatt
07:19:45   9  ,gattn
07:19:45  10  FROM svm6162
07:19:45  11  /

Table created.

Elapsed: 00:00:00.09
07:19:45 SQL> 
07:19:45 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
07:19:46 SQL> 
07:19:46 SQL> DROP   TABLE gbp_ms610 ;

Table dropped.

Elapsed: 00:00:00.06
07:19:46 SQL> CREATE TABLE gbp_ms610 COMPRESS AS
07:19:46   2  SELECT
07:19:46   3  ydate
07:19:46   4  ,trend gbp_trend
07:19:46   5  ,g6    gbp_g6
07:19:46   6  ,gatt  gbp_gatt
07:19:46   7  ,gattn gbp_gattn
07:19:46   8  FROM modsrc
07:19:46   9  /

Table created.

Elapsed: 00:00:00.07
07:19:46 SQL> 
07:19:46 SQL> ANALYZE TABLE gbp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
07:19:46 SQL> 
07:19:46 SQL> -- I need a copy of the attributes:
07:19:46 SQL> 
07:19:46 SQL> 
07:19:46 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.04
07:19:46 SQL> CREATE TABLE gbp_att COMPRESS AS
07:19:46   2  SELECT
07:19:46   3  ydate
07:19:46   4  ,att00 gbp_att00
07:19:46   5  ,att01 gbp_att01
07:19:46   6  ,att02 gbp_att02
07:19:46   7  ,att03 gbp_att03
07:19:46   8  ,att04 gbp_att04
07:19:46   9  ,att05 gbp_att05
07:19:46  10  ,att06 gbp_att06
07:19:46  11  ,att07 gbp_att07
07:19:46  12  ,att08 gbp_att08
07:19:46  13  ,att09 gbp_att09
07:19:46  14  ,att10 gbp_att10
07:19:46  15  ,att11 gbp_att11
07:19:46  16  ,att12 gbp_att12
07:19:46  17  ,att13 gbp_att13
07:19:46  18  ,att14 gbp_att14
07:19:46  19  ,att15 gbp_att15
07:19:46  20  ,att16 gbp_att16
07:19:46  21  ,att17 gbp_att17
07:19:46  22  ,att18 gbp_att18
07:19:46  23  ,att19 gbp_att19
07:19:46  24  ,att20 gbp_att20
07:19:46  25  ,att21 gbp_att21
07:19:46  26  ,att22 gbp_att22
07:19:46  27  ,att23 gbp_att23
07:19:46  28  ,att24 gbp_att24
07:19:46  29  ,att25 gbp_att25
07:19:46  30  ,att26 gbp_att26
07:19:46  31  ,att27 gbp_att27
07:19:46  32  ,att28 gbp_att28
07:19:46  33  ,att29 gbp_att29
07:19:46  34  ,att30 gbp_att30
07:19:46  35  ,att31 gbp_att31
07:19:46  36  ,att32 gbp_att32
07:19:46  37  ,att33 gbp_att33
07:19:46  38  ,att34 gbp_att34
07:19:46  39  ,att35 gbp_att35
07:19:46  40  ,att36 gbp_att36
07:19:46  41  ,att37 gbp_att37
07:19:46  42  FROM svm6162
07:19:46  43  /

Table created.

Elapsed: 00:00:00.21
07:19:46 SQL> 
07:19:46 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
07:19:47 SQL> 
07:19:47 SQL> -- rpt
07:19:47 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19810

Elapsed: 00:00:00.86
07:19:48 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     19810

Elapsed: 00:00:00.00
07:19:48 SQL> 
07:19:48 SQL> --
07:19:48 SQL> -- jpy610.sql
07:19:48 SQL> --
07:19:48 SQL> 
07:19:48 SQL> -- Creates views and tables for backtesting a forex SVM strategy
07:19:48 SQL> 
07:19:48 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.50
07:19:48 SQL> 
07:19:48 SQL> -- I created di5min here:
07:19:48 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
07:19:48 SQL> 
07:19:48 SQL> CREATE OR REPLACE VIEW svm6102 AS
07:19:48   2  SELECT
07:19:48   3  pair
07:19:48   4  ,ydate
07:19:48   5  ,prdate
07:19:48   6  ,rownum rnum -- acts as t in my time-series
07:19:48   7  ,clse
07:19:48   8  -- Derive a bunch of attributes from clse, the latest price:
07:19:48   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
07:19:48  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
07:19:48  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
07:19:48  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
07:19:48  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
07:19:48  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
07:19:48  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
07:19:48  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
07:19:48  17  --
07:19:48  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
07:19:48  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
07:19:48  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
07:19:48  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
07:19:48  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
07:19:48  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
07:19:48  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
07:19:48  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
07:19:48  26  --
07:19:48  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
07:19:48  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
07:19:48  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
07:19:48  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
07:19:48  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
07:19:48  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
07:19:48  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
07:19:48  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
07:19:48  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
07:19:48  36  FROM di5min WHERE pair LIKE'%jpy%'
07:19:48  37  AND ydate > sysdate - 95
07:19:48  38  ORDER BY ydate
07:19:48  39  /

View created.

Elapsed: 00:00:00.05
07:19:48 SQL> 
07:19:48 SQL> -- rpt
07:19:48 SQL> 
07:19:48 SQL> SELECT
07:19:48   2  pair
07:19:48   3  ,COUNT(pair)
07:19:48   4  ,MIN(clse),MAX(clse)
07:19:48   5  ,MIN(avg6),MAX(avg6)
07:19:48   6  ,MIN(ydate),MAX(ydate)
07:19:48   7  FROM svm6102
07:19:48   8  GROUP BY pair
07:19:48   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_jpy       19809	 80.25	   84.485 80.3595205 84.3105479 2010-10-04 07:20:01 2011-01-07 07:15:00

Elapsed: 00:00:00.91
07:19:49 SQL> 
07:19:49 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
07:19:49 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.34
07:19:49 SQL> CREATE TABLE svm6122 COMPRESS AS
07:19:49   2  SELECT
07:19:49   3  pair
07:19:49   4  ,ydate
07:19:49   5  ,prdate
07:19:49   6  ,clse
07:19:49   7  -- g6 is important. I want to predict g6:
07:19:49   8  ,ld6 - clse g6
07:19:49   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
07:19:49  10  -- I want more attributes from the ones I derived above:
07:19:49  11  -- clse relation to moving-min
07:19:49  12  ,clse-min4  cm4
07:19:49  13  ,clse-min6  cm6
07:19:49  14  ,clse-min8  cm8
07:19:49  15  ,clse-min10 cm10
07:19:49  16  ,clse-min12 cm12
07:19:49  17  ,clse-min14 cm14
07:19:49  18  ,clse-min16 cm16
07:19:49  19  ,clse-min18 cm18
07:19:49  20  -- clse relation to moving-avg
07:19:49  21  ,clse-avg4  ca4
07:19:49  22  ,clse-avg6  ca6
07:19:49  23  ,clse-avg8  ca8
07:19:49  24  ,clse-avg10 ca10
07:19:49  25  ,clse-avg12 ca12
07:19:49  26  ,clse-avg14 ca14
07:19:49  27  ,clse-avg16 ca16
07:19:49  28  ,clse-avg18 ca18
07:19:49  29  -- clse relation to moving-max
07:19:49  30  ,clse-max4  cx4
07:19:49  31  ,clse-max6  cx6
07:19:49  32  ,clse-max8  cx8
07:19:49  33  ,clse-max10 cx10
07:19:49  34  ,clse-max12 cx12
07:19:49  35  ,clse-max14 cx14
07:19:49  36  ,clse-max16 cx16
07:19:49  37  ,clse-max18 cx18
07:19:49  38  -- Derive more attributes.
07:19:49  39  -- I want to use CORR() here to help SVM see the shape of the series.
07:19:49  40  -- But COVAR_POP is more stable:
07:19:49  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
07:19:49  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
07:19:49  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
07:19:49  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
07:19:49  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
07:19:49  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
07:19:49  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
07:19:49  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
07:19:49  49  -- Derive date related attributes:
07:19:49  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
07:19:49  51  ,0+TO_CHAR(ydate,'D')d
07:19:49  52  ,0+TO_CHAR(ydate,'W')w
07:19:49  53  -- mpm stands for minutes-past-midnight:
07:19:49  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
07:19:49  55  -- mph stands for minutes-past-hour:
07:19:49  56  ,0+TO_CHAR(ydate,'MI')mph
07:19:49  57  FROM svm6102
07:19:49  58  ORDER BY ydate
07:19:49  59  /

Table created.

Elapsed: 00:00:02.16
07:19:52 SQL> 
07:19:52 SQL> -- rpt
07:19:52 SQL> 
07:19:52 SQL> SELECT
07:19:52   2  pair
07:19:52   3  ,COUNT(pair)
07:19:52   4  ,MIN(clse),MAX(clse)
07:19:52   5  ,MIN(ydate),MAX(ydate)
07:19:52   6  FROM svm6122
07:19:52   7  GROUP BY pair
07:19:52   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_jpy       19809	 80.25	   84.485 2010-10-04 07:20:01 2011-01-07 07:15:00

Elapsed: 00:00:00.04
07:19:52 SQL> 
07:19:52 SQL> -- Prepare for derivation of NTILE based params:
07:19:52 SQL> 
07:19:52 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.29
07:19:52 SQL> CREATE TABLE svm6142 COMPRESS AS
07:19:52   2  SELECT
07:19:52   3  pair
07:19:52   4  ,ydate
07:19:52   5  ,prdate
07:19:52   6  ,clse
07:19:52   7  ,g6
07:19:52   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
07:19:52   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
07:19:52  10  ,CASE WHEN trend IS NULL THEN 1
07:19:52  11  	    WHEN trend =0      THEN 1
07:19:52  12  	    ELSE trend END trend
07:19:52  13  ,cm4
07:19:52  14  ,cm6
07:19:52  15  ,cm8
07:19:52  16  ,cm10
07:19:52  17  ,cm12
07:19:52  18  ,cm14
07:19:52  19  ,cm16
07:19:52  20  ,cm18
07:19:52  21  --
07:19:52  22  ,ca4
07:19:52  23  ,ca6
07:19:52  24  ,ca8
07:19:52  25  ,ca10
07:19:52  26  ,ca12
07:19:52  27  ,ca14
07:19:52  28  ,ca16
07:19:52  29  ,ca18
07:19:52  30  --
07:19:52  31  ,cx4
07:19:52  32  ,cx6
07:19:52  33  ,cx8
07:19:52  34  ,cx10
07:19:52  35  ,cx12
07:19:52  36  ,cx14
07:19:52  37  ,cx16
07:19:52  38  ,cx18
07:19:52  39  --
07:19:52  40  ,crr4
07:19:52  41  ,crr6
07:19:52  42  ,crr8
07:19:52  43  ,crr10
07:19:52  44  ,crr12
07:19:52  45  ,crr14
07:19:52  46  ,crr16
07:19:52  47  ,crr18
07:19:52  48  --
07:19:52  49  ,hh
07:19:52  50  ,d
07:19:52  51  ,w
07:19:52  52  ,mpm
07:19:52  53  ,mph
07:19:52  54  FROM svm6122
07:19:52  55  ORDER BY ydate
07:19:52  56  /

Table created.

Elapsed: 00:00:00.36
07:19:52 SQL> 
07:19:52 SQL> -- rpt
07:19:52 SQL> 
07:19:52 SQL> SELECT
07:19:52   2  pair
07:19:52   3  ,trend
07:19:52   4  ,gatt
07:19:52   5  ,COUNT(pair)
07:19:52   6  ,AVG(g6)
07:19:52   7  FROM svm6142
07:19:52   8  GROUP BY pair,trend,gatt
07:19:52   9  ORDER BY pair,trend,gatt
07:19:52  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5171 -.16583061
usd_jpy 	-1 up	      4866  .17030624
usd_jpy 	-1		14
usd_jpy 	 1 nup	      5017 -.15289785
usd_jpy 	 1 up	      4683 .171900423
usd_jpy 	 1		58

6 rows selected.

Elapsed: 00:00:00.05
07:19:52 SQL> 
07:19:52 SQL> 
07:19:52 SQL> -- Derive NTILE based params:
07:19:52 SQL> 
07:19:52 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.15
07:19:52 SQL> CREATE TABLE svm6162 COMPRESS AS
07:19:52   2  SELECT
07:19:52   3  pair
07:19:52   4  ,ydate
07:19:52   5  ,prdate
07:19:52   6  ,clse
07:19:52   7  ,g6
07:19:52   8  ,gatt
07:19:52   9  ,gattn
07:19:52  10  ,trend
07:19:52  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
07:19:52  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
07:19:52  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
07:19:52  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
07:19:52  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
07:19:52  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
07:19:52  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
07:19:52  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
07:19:52  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
07:19:52  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
07:19:52  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
07:19:52  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
07:19:52  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
07:19:52  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
07:19:52  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
07:19:52  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
07:19:52  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
07:19:52  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
07:19:52  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
07:19:52  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
07:19:52  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
07:19:52  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
07:19:52  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
07:19:52  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
07:19:52  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
07:19:52  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
07:19:52  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
07:19:52  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
07:19:52  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
07:19:52  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
07:19:52  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
07:19:52  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
07:19:52  43  ,hh  att32
07:19:52  44  ,d   att33
07:19:52  45  ,w   att34
07:19:52  46  ,mpm att35
07:19:52  47  ,mph att36
07:19:52  48  ,trend att37
07:19:52  49  FROM svm6142
07:19:52  50  ORDER BY ydate
07:19:52  51  /

Table created.

Elapsed: 00:00:04.95
07:19:57 SQL> 
07:19:57 SQL> -- rpt
07:19:57 SQL> 
07:19:57 SQL> SELECT
07:19:57   2  pair
07:19:57   3  ,trend
07:19:57   4  ,gatt
07:19:57   5  ,COUNT(pair)
07:19:57   6  ,AVG(g6)
07:19:57   7  FROM svm6162
07:19:57   8  GROUP BY pair,trend,gatt
07:19:57   9  ORDER BY pair,trend,gatt
07:19:57  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5171 -.16583061
usd_jpy 	-1 up	      4866  .17030624
usd_jpy 	-1		14
usd_jpy 	 1 nup	      5017 -.15289785
usd_jpy 	 1 up	      4683 .171900423
usd_jpy 	 1		58

6 rows selected.

Elapsed: 00:00:00.03
07:19:57 SQL> 
07:19:57 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.11
07:19:57 SQL> CREATE TABLE modsrc COMPRESS AS
07:19:57   2  SELECT
07:19:57   3  pair
07:19:57   4  ,ydate
07:19:57   5  ,prdate
07:19:57   6  ,trend
07:19:57   7  ,g6
07:19:57   8  ,gatt
07:19:57   9  ,gattn
07:19:57  10  FROM svm6162
07:19:57  11  /

Table created.

Elapsed: 00:00:00.08
07:19:58 SQL> 
07:19:58 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
07:19:58 SQL> 
07:19:58 SQL> DROP   TABLE jpy_ms610 ;

Table dropped.

Elapsed: 00:00:00.09
07:19:58 SQL> CREATE TABLE jpy_ms610 COMPRESS AS
07:19:58   2  SELECT
07:19:58   3  ydate
07:19:58   4  ,trend jpy_trend
07:19:58   5  ,g6    jpy_g6
07:19:58   6  ,gatt  jpy_gatt
07:19:58   7  ,gattn jpy_gattn
07:19:58   8  FROM modsrc
07:19:58   9  /

Table created.

Elapsed: 00:00:00.06
07:19:58 SQL> 
07:19:58 SQL> ANALYZE TABLE jpy_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
07:19:58 SQL> 
07:19:58 SQL> -- I need a copy of the attributes:
07:19:58 SQL> 
07:19:58 SQL> 
07:19:58 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.04
07:19:58 SQL> CREATE TABLE jpy_att COMPRESS AS
07:19:58   2  SELECT
07:19:58   3  ydate
07:19:58   4  ,att00 jpy_att00
07:19:58   5  ,att01 jpy_att01
07:19:58   6  ,att02 jpy_att02
07:19:58   7  ,att03 jpy_att03
07:19:58   8  ,att04 jpy_att04
07:19:58   9  ,att05 jpy_att05
07:19:58  10  ,att06 jpy_att06
07:19:58  11  ,att07 jpy_att07
07:19:58  12  ,att08 jpy_att08
07:19:58  13  ,att09 jpy_att09
07:19:58  14  ,att10 jpy_att10
07:19:58  15  ,att11 jpy_att11
07:19:58  16  ,att12 jpy_att12
07:19:58  17  ,att13 jpy_att13
07:19:58  18  ,att14 jpy_att14
07:19:58  19  ,att15 jpy_att15
07:19:58  20  ,att16 jpy_att16
07:19:58  21  ,att17 jpy_att17
07:19:58  22  ,att18 jpy_att18
07:19:58  23  ,att19 jpy_att19
07:19:58  24  ,att20 jpy_att20
07:19:58  25  ,att21 jpy_att21
07:19:58  26  ,att22 jpy_att22
07:19:58  27  ,att23 jpy_att23
07:19:58  28  ,att24 jpy_att24
07:19:58  29  ,att25 jpy_att25
07:19:58  30  ,att26 jpy_att26
07:19:58  31  ,att27 jpy_att27
07:19:58  32  ,att28 jpy_att28
07:19:58  33  ,att29 jpy_att29
07:19:58  34  ,att30 jpy_att30
07:19:58  35  ,att31 jpy_att31
07:19:58  36  ,att32 jpy_att32
07:19:58  37  ,att33 jpy_att33
07:19:58  38  ,att34 jpy_att34
07:19:58  39  ,att35 jpy_att35
07:19:58  40  ,att36 jpy_att36
07:19:58  41  ,att37 jpy_att37
07:19:58  42  FROM svm6162
07:19:58  43  /

Table created.

Elapsed: 00:00:00.15
07:19:58 SQL> 
07:19:58 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.44
07:19:59 SQL> 
07:19:59 SQL> -- rpt
07:19:59 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19809

Elapsed: 00:00:00.88
07:20:00 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     19809

Elapsed: 00:00:00.01
07:20:00 SQL> 
07:20:00 SQL> --
07:20:00 SQL> -- cad610.sql
07:20:00 SQL> --
07:20:00 SQL> 
07:20:00 SQL> -- Creates views and tables for backtesting a forex SVM strategy
07:20:00 SQL> 
07:20:00 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.38
07:20:00 SQL> 
07:20:00 SQL> -- I created di5min here:
07:20:00 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
07:20:00 SQL> 
07:20:00 SQL> CREATE OR REPLACE VIEW svm6102 AS
07:20:00   2  SELECT
07:20:00   3  pair
07:20:00   4  ,ydate
07:20:00   5  ,prdate
07:20:00   6  ,rownum rnum -- acts as t in my time-series
07:20:00   7  ,clse
07:20:00   8  -- Derive a bunch of attributes from clse, the latest price:
07:20:00   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
07:20:00  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
07:20:00  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
07:20:00  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
07:20:00  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
07:20:00  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
07:20:00  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
07:20:00  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
07:20:00  17  --
07:20:00  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
07:20:00  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
07:20:00  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
07:20:00  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
07:20:00  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
07:20:00  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
07:20:00  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
07:20:00  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
07:20:00  26  --
07:20:00  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
07:20:00  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
07:20:00  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
07:20:00  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
07:20:00  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
07:20:00  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
07:20:00  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
07:20:00  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
07:20:00  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
07:20:00  36  FROM di5min WHERE pair LIKE'%cad%'
07:20:00  37  AND ydate > sysdate - 95
07:20:00  38  ORDER BY ydate
07:20:00  39  /

View created.

Elapsed: 00:00:00.04
07:20:00 SQL> 
07:20:00 SQL> -- rpt
07:20:00 SQL> 
07:20:00 SQL> SELECT
07:20:00   2  pair
07:20:00   3  ,COUNT(pair)
07:20:00   4  ,MIN(clse),MAX(clse)
07:20:00   5  ,MIN(avg6),MAX(avg6)
07:20:00   6  ,MIN(ydate),MAX(ydate)
07:20:00   7  FROM svm6102
07:20:00   8  GROUP BY pair
07:20:00   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_cad       19809    .988925	   1.0355  .99060274 1.03282877 2010-10-04 07:20:01 2011-01-07 07:15:00

Elapsed: 00:00:00.84
07:20:01 SQL> 
07:20:01 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
07:20:01 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.25
07:20:01 SQL> CREATE TABLE svm6122 COMPRESS AS
07:20:01   2  SELECT
07:20:01   3  pair
07:20:01   4  ,ydate
07:20:01   5  ,prdate
07:20:01   6  ,clse
07:20:01   7  -- g6 is important. I want to predict g6:
07:20:01   8  ,ld6 - clse g6
07:20:01   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
07:20:01  10  -- I want more attributes from the ones I derived above:
07:20:01  11  -- clse relation to moving-min
07:20:01  12  ,clse-min4  cm4
07:20:01  13  ,clse-min6  cm6
07:20:01  14  ,clse-min8  cm8
07:20:01  15  ,clse-min10 cm10
07:20:01  16  ,clse-min12 cm12
07:20:01  17  ,clse-min14 cm14
07:20:01  18  ,clse-min16 cm16
07:20:01  19  ,clse-min18 cm18
07:20:01  20  -- clse relation to moving-avg
07:20:01  21  ,clse-avg4  ca4
07:20:01  22  ,clse-avg6  ca6
07:20:01  23  ,clse-avg8  ca8
07:20:01  24  ,clse-avg10 ca10
07:20:01  25  ,clse-avg12 ca12
07:20:01  26  ,clse-avg14 ca14
07:20:01  27  ,clse-avg16 ca16
07:20:01  28  ,clse-avg18 ca18
07:20:01  29  -- clse relation to moving-max
07:20:01  30  ,clse-max4  cx4
07:20:01  31  ,clse-max6  cx6
07:20:01  32  ,clse-max8  cx8
07:20:01  33  ,clse-max10 cx10
07:20:01  34  ,clse-max12 cx12
07:20:01  35  ,clse-max14 cx14
07:20:01  36  ,clse-max16 cx16
07:20:01  37  ,clse-max18 cx18
07:20:01  38  -- Derive more attributes.
07:20:01  39  -- I want to use CORR() here to help SVM see the shape of the series.
07:20:01  40  -- But COVAR_POP is more stable:
07:20:01  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
07:20:01  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
07:20:01  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
07:20:01  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
07:20:01  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
07:20:01  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
07:20:01  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
07:20:01  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
07:20:01  49  -- Derive date related attributes:
07:20:01  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
07:20:01  51  ,0+TO_CHAR(ydate,'D')d
07:20:01  52  ,0+TO_CHAR(ydate,'W')w
07:20:01  53  -- mpm stands for minutes-past-midnight:
07:20:01  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
07:20:01  55  -- mph stands for minutes-past-hour:
07:20:01  56  ,0+TO_CHAR(ydate,'MI')mph
07:20:01  57  FROM svm6102
07:20:01  58  ORDER BY ydate
07:20:01  59  /

Table created.

Elapsed: 00:00:02.03
07:20:03 SQL> 
07:20:03 SQL> -- rpt
07:20:03 SQL> 
07:20:03 SQL> SELECT
07:20:03   2  pair
07:20:03   3  ,COUNT(pair)
07:20:03   4  ,MIN(clse),MAX(clse)
07:20:03   5  ,MIN(ydate),MAX(ydate)
07:20:03   6  FROM svm6122
07:20:03   7  GROUP BY pair
07:20:03   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_cad       19808    .988925	   1.0355 2010-10-04 07:25:01 2011-01-07 07:15:00

Elapsed: 00:00:00.04
07:20:03 SQL> 
07:20:03 SQL> -- Prepare for derivation of NTILE based params:
07:20:03 SQL> 
07:20:03 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.22
07:20:03 SQL> CREATE TABLE svm6142 COMPRESS AS
07:20:03   2  SELECT
07:20:03   3  pair
07:20:03   4  ,ydate
07:20:03   5  ,prdate
07:20:03   6  ,clse
07:20:03   7  ,g6
07:20:03   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
07:20:03   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
07:20:03  10  ,CASE WHEN trend IS NULL THEN 1
07:20:03  11  	    WHEN trend =0      THEN 1
07:20:03  12  	    ELSE trend END trend
07:20:03  13  ,cm4
07:20:03  14  ,cm6
07:20:03  15  ,cm8
07:20:03  16  ,cm10
07:20:03  17  ,cm12
07:20:03  18  ,cm14
07:20:03  19  ,cm16
07:20:03  20  ,cm18
07:20:03  21  --
07:20:03  22  ,ca4
07:20:03  23  ,ca6
07:20:03  24  ,ca8
07:20:03  25  ,ca10
07:20:03  26  ,ca12
07:20:03  27  ,ca14
07:20:03  28  ,ca16
07:20:03  29  ,ca18
07:20:03  30  --
07:20:03  31  ,cx4
07:20:03  32  ,cx6
07:20:03  33  ,cx8
07:20:03  34  ,cx10
07:20:03  35  ,cx12
07:20:03  36  ,cx14
07:20:03  37  ,cx16
07:20:03  38  ,cx18
07:20:03  39  --
07:20:03  40  ,crr4
07:20:03  41  ,crr6
07:20:03  42  ,crr8
07:20:03  43  ,crr10
07:20:03  44  ,crr12
07:20:03  45  ,crr14
07:20:03  46  ,crr16
07:20:03  47  ,crr18
07:20:03  48  --
07:20:03  49  ,hh
07:20:03  50  ,d
07:20:03  51  ,w
07:20:03  52  ,mpm
07:20:03  53  ,mph
07:20:03  54  FROM svm6122
07:20:03  55  ORDER BY ydate
07:20:03  56  /

Table created.

Elapsed: 00:00:00.39
07:20:04 SQL> 
07:20:04 SQL> -- rpt
07:20:04 SQL> 
07:20:04 SQL> SELECT
07:20:04   2  pair
07:20:04   3  ,trend
07:20:04   4  ,gatt
07:20:04   5  ,COUNT(pair)
07:20:04   6  ,AVG(g6)
07:20:04   7  FROM svm6142
07:20:04   8  GROUP BY pair,trend,gatt
07:20:04   9  ORDER BY pair,trend,gatt
07:20:04  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7340 -.00123577
usd_cad 	-1 up	      3155 .003038727
usd_cad 	-1		 7
usd_cad 	 1 nup	      6853 -.00160277
usd_cad 	 1 up	      2388 .003646511
usd_cad 	 1		65

6 rows selected.

Elapsed: 00:00:00.03
07:20:04 SQL> 
07:20:04 SQL> 
07:20:04 SQL> -- Derive NTILE based params:
07:20:04 SQL> 
07:20:04 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.17
07:20:04 SQL> CREATE TABLE svm6162 COMPRESS AS
07:20:04   2  SELECT
07:20:04   3  pair
07:20:04   4  ,ydate
07:20:04   5  ,prdate
07:20:04   6  ,clse
07:20:04   7  ,g6
07:20:04   8  ,gatt
07:20:04   9  ,gattn
07:20:04  10  ,trend
07:20:04  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
07:20:04  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
07:20:04  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
07:20:04  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
07:20:04  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
07:20:04  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
07:20:04  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
07:20:04  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
07:20:04  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
07:20:04  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
07:20:04  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
07:20:04  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
07:20:04  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
07:20:04  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
07:20:04  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
07:20:04  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
07:20:04  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
07:20:04  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
07:20:04  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
07:20:04  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
07:20:04  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
07:20:04  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
07:20:04  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
07:20:04  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
07:20:04  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
07:20:04  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
07:20:04  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
07:20:04  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
07:20:04  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
07:20:04  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
07:20:04  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
07:20:04  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
07:20:04  43  ,hh  att32
07:20:04  44  ,d   att33
07:20:04  45  ,w   att34
07:20:04  46  ,mpm att35
07:20:04  47  ,mph att36
07:20:04  48  ,trend att37
07:20:04  49  FROM svm6142
07:20:04  50  ORDER BY ydate
07:20:04  51  /

Table created.

Elapsed: 00:00:04.80
07:20:09 SQL> 
07:20:09 SQL> -- rpt
07:20:09 SQL> 
07:20:09 SQL> SELECT
07:20:09   2  pair
07:20:09   3  ,trend
07:20:09   4  ,gatt
07:20:09   5  ,COUNT(pair)
07:20:09   6  ,AVG(g6)
07:20:09   7  FROM svm6162
07:20:09   8  GROUP BY pair,trend,gatt
07:20:09   9  ORDER BY pair,trend,gatt
07:20:09  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7340 -.00123577
usd_cad 	-1 up	      3155 .003038727
usd_cad 	-1		 7
usd_cad 	 1 nup	      6853 -.00160277
usd_cad 	 1 up	      2388 .003646511
usd_cad 	 1		65

6 rows selected.

Elapsed: 00:00:00.03
07:20:09 SQL> 
07:20:09 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
07:20:09 SQL> CREATE TABLE modsrc COMPRESS AS
07:20:09   2  SELECT
07:20:09   3  pair
07:20:09   4  ,ydate
07:20:09   5  ,prdate
07:20:09   6  ,trend
07:20:09   7  ,g6
07:20:09   8  ,gatt
07:20:09   9  ,gattn
07:20:09  10  FROM svm6162
07:20:09  11  /

Table created.

Elapsed: 00:00:00.09
07:20:09 SQL> 
07:20:09 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
07:20:09 SQL> 
07:20:09 SQL> DROP   TABLE cad_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
07:20:09 SQL> CREATE TABLE cad_ms610 COMPRESS AS
07:20:09   2  SELECT
07:20:09   3  ydate
07:20:09   4  ,trend cad_trend
07:20:09   5  ,g6    cad_g6
07:20:09   6  ,gatt  cad_gatt
07:20:09   7  ,gattn cad_gattn
07:20:09   8  FROM modsrc
07:20:09   9  /

Table created.

Elapsed: 00:00:00.07
07:20:09 SQL> 
07:20:09 SQL> ANALYZE TABLE cad_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
07:20:10 SQL> 
07:20:10 SQL> -- I need a copy of the attributes:
07:20:10 SQL> 
07:20:10 SQL> 
07:20:10 SQL> DROP   TABLE cad_att;

Table dropped.

Elapsed: 00:00:00.04
07:20:10 SQL> CREATE TABLE cad_att COMPRESS AS
07:20:10   2  SELECT
07:20:10   3  ydate
07:20:10   4  ,att00 cad_att00
07:20:10   5  ,att01 cad_att01
07:20:10   6  ,att02 cad_att02
07:20:10   7  ,att03 cad_att03
07:20:10   8  ,att04 cad_att04
07:20:10   9  ,att05 cad_att05
07:20:10  10  ,att06 cad_att06
07:20:10  11  ,att07 cad_att07
07:20:10  12  ,att08 cad_att08
07:20:10  13  ,att09 cad_att09
07:20:10  14  ,att10 cad_att10
07:20:10  15  ,att11 cad_att11
07:20:10  16  ,att12 cad_att12
07:20:10  17  ,att13 cad_att13
07:20:10  18  ,att14 cad_att14
07:20:10  19  ,att15 cad_att15
07:20:10  20  ,att16 cad_att16
07:20:10  21  ,att17 cad_att17
07:20:10  22  ,att18 cad_att18
07:20:10  23  ,att19 cad_att19
07:20:10  24  ,att20 cad_att20
07:20:10  25  ,att21 cad_att21
07:20:10  26  ,att22 cad_att22
07:20:10  27  ,att23 cad_att23
07:20:10  28  ,att24 cad_att24
07:20:10  29  ,att25 cad_att25
07:20:10  30  ,att26 cad_att26
07:20:10  31  ,att27 cad_att27
07:20:10  32  ,att28 cad_att28
07:20:10  33  ,att29 cad_att29
07:20:10  34  ,att30 cad_att30
07:20:10  35  ,att31 cad_att31
07:20:10  36  ,att32 cad_att32
07:20:10  37  ,att33 cad_att33
07:20:10  38  ,att34 cad_att34
07:20:10  39  ,att35 cad_att35
07:20:10  40  ,att36 cad_att36
07:20:10  41  ,att37 cad_att37
07:20:10  42  FROM svm6162
07:20:10  43  /

Table created.

Elapsed: 00:00:00.17
07:20:10 SQL> 
07:20:10 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.48
07:20:10 SQL> 
07:20:10 SQL> -- rpt
07:20:10 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19808

Elapsed: 00:00:00.86
07:20:11 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
     19808

Elapsed: 00:00:00.01
07:20:11 SQL> 
07:20:11 SQL> --
07:20:11 SQL> -- chf610.sql
07:20:11 SQL> --
07:20:11 SQL> 
07:20:11 SQL> -- Creates views and tables for backtesting a forex SVM strategy
07:20:11 SQL> 
07:20:11 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.79
07:20:12 SQL> 
07:20:12 SQL> -- I created di5min here:
07:20:12 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
07:20:12 SQL> 
07:20:12 SQL> CREATE OR REPLACE VIEW svm6102 AS
07:20:12   2  SELECT
07:20:12   3  pair
07:20:12   4  ,ydate
07:20:12   5  ,prdate
07:20:12   6  ,rownum rnum -- acts as t in my time-series
07:20:12   7  ,clse
07:20:12   8  -- Derive a bunch of attributes from clse, the latest price:
07:20:12   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
07:20:12  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
07:20:12  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
07:20:12  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
07:20:12  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
07:20:12  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
07:20:12  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
07:20:12  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
07:20:12  17  --
07:20:12  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
07:20:12  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
07:20:12  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
07:20:12  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
07:20:12  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
07:20:12  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
07:20:12  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
07:20:12  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
07:20:12  26  --
07:20:12  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
07:20:12  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
07:20:12  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
07:20:12  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
07:20:12  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
07:20:12  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
07:20:12  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
07:20:12  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
07:20:12  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
07:20:12  36  FROM di5min WHERE pair LIKE'%chf%'
07:20:12  37  AND ydate > sysdate - 95
07:20:12  38  ORDER BY ydate
07:20:12  39  /

View created.

Elapsed: 00:00:00.05
07:20:12 SQL> 
07:20:12 SQL> -- rpt
07:20:12 SQL> 
07:20:12 SQL> SELECT
07:20:12   2  pair
07:20:12   3  ,COUNT(pair)
07:20:12   4  ,MIN(clse),MAX(clse)
07:20:12   5  ,MIN(avg6),MAX(avg6)
07:20:12   6  ,MIN(ydate),MAX(ydate)
07:20:12   7  FROM svm6102
07:20:12   8  GROUP BY pair
07:20:12   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_chf       19811    .931675	  1.00635 .933257705 1.00498151 2010-10-04 07:25:01 2011-01-07 07:15:00

Elapsed: 00:00:00.87
07:20:13 SQL> 
07:20:13 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
07:20:13 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.20
07:20:13 SQL> CREATE TABLE svm6122 COMPRESS AS
07:20:13   2  SELECT
07:20:13   3  pair
07:20:13   4  ,ydate
07:20:13   5  ,prdate
07:20:13   6  ,clse
07:20:13   7  -- g6 is important. I want to predict g6:
07:20:13   8  ,ld6 - clse g6
07:20:13   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
07:20:13  10  -- I want more attributes from the ones I derived above:
07:20:13  11  -- clse relation to moving-min
07:20:13  12  ,clse-min4  cm4
07:20:13  13  ,clse-min6  cm6
07:20:13  14  ,clse-min8  cm8
07:20:13  15  ,clse-min10 cm10
07:20:13  16  ,clse-min12 cm12
07:20:13  17  ,clse-min14 cm14
07:20:13  18  ,clse-min16 cm16
07:20:13  19  ,clse-min18 cm18
07:20:13  20  -- clse relation to moving-avg
07:20:13  21  ,clse-avg4  ca4
07:20:13  22  ,clse-avg6  ca6
07:20:13  23  ,clse-avg8  ca8
07:20:13  24  ,clse-avg10 ca10
07:20:13  25  ,clse-avg12 ca12
07:20:13  26  ,clse-avg14 ca14
07:20:13  27  ,clse-avg16 ca16
07:20:13  28  ,clse-avg18 ca18
07:20:13  29  -- clse relation to moving-max
07:20:13  30  ,clse-max4  cx4
07:20:13  31  ,clse-max6  cx6
07:20:13  32  ,clse-max8  cx8
07:20:13  33  ,clse-max10 cx10
07:20:13  34  ,clse-max12 cx12
07:20:13  35  ,clse-max14 cx14
07:20:13  36  ,clse-max16 cx16
07:20:13  37  ,clse-max18 cx18
07:20:13  38  -- Derive more attributes.
07:20:13  39  -- I want to use CORR() here to help SVM see the shape of the series.
07:20:13  40  -- But COVAR_POP is more stable:
07:20:13  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
07:20:13  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
07:20:13  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
07:20:13  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
07:20:13  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
07:20:13  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
07:20:13  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
07:20:13  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
07:20:13  49  -- Derive date related attributes:
07:20:13  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
07:20:13  51  ,0+TO_CHAR(ydate,'D')d
07:20:13  52  ,0+TO_CHAR(ydate,'W')w
07:20:13  53  -- mpm stands for minutes-past-midnight:
07:20:13  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
07:20:13  55  -- mph stands for minutes-past-hour:
07:20:13  56  ,0+TO_CHAR(ydate,'MI')mph
07:20:13  57  FROM svm6102
07:20:13  58  ORDER BY ydate
07:20:13  59  /

Table created.

Elapsed: 00:00:02.06
07:20:15 SQL> 
07:20:15 SQL> -- rpt
07:20:15 SQL> 
07:20:15 SQL> SELECT
07:20:15   2  pair
07:20:15   3  ,COUNT(pair)
07:20:15   4  ,MIN(clse),MAX(clse)
07:20:15   5  ,MIN(ydate),MAX(ydate)
07:20:15   6  FROM svm6122
07:20:15   7  GROUP BY pair
07:20:15   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_chf       19811    .931675	  1.00635 2010-10-04 07:25:01 2011-01-07 07:15:00

Elapsed: 00:00:00.04
07:20:15 SQL> 
07:20:15 SQL> -- Prepare for derivation of NTILE based params:
07:20:15 SQL> 
07:20:15 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.22
07:20:15 SQL> CREATE TABLE svm6142 COMPRESS AS
07:20:15   2  SELECT
07:20:15   3  pair
07:20:15   4  ,ydate
07:20:15   5  ,prdate
07:20:15   6  ,clse
07:20:15   7  ,g6
07:20:15   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
07:20:15   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
07:20:15  10  ,CASE WHEN trend IS NULL THEN 1
07:20:15  11  	    WHEN trend =0      THEN 1
07:20:15  12  	    ELSE trend END trend
07:20:15  13  ,cm4
07:20:15  14  ,cm6
07:20:15  15  ,cm8
07:20:15  16  ,cm10
07:20:15  17  ,cm12
07:20:15  18  ,cm14
07:20:15  19  ,cm16
07:20:15  20  ,cm18
07:20:15  21  --
07:20:15  22  ,ca4
07:20:15  23  ,ca6
07:20:15  24  ,ca8
07:20:15  25  ,ca10
07:20:15  26  ,ca12
07:20:15  27  ,ca14
07:20:15  28  ,ca16
07:20:15  29  ,ca18
07:20:15  30  --
07:20:15  31  ,cx4
07:20:15  32  ,cx6
07:20:15  33  ,cx8
07:20:15  34  ,cx10
07:20:15  35  ,cx12
07:20:15  36  ,cx14
07:20:15  37  ,cx16
07:20:15  38  ,cx18
07:20:15  39  --
07:20:15  40  ,crr4
07:20:15  41  ,crr6
07:20:15  42  ,crr8
07:20:15  43  ,crr10
07:20:15  44  ,crr12
07:20:15  45  ,crr14
07:20:15  46  ,crr16
07:20:15  47  ,crr18
07:20:15  48  --
07:20:15  49  ,hh
07:20:15  50  ,d
07:20:15  51  ,w
07:20:15  52  ,mpm
07:20:15  53  ,mph
07:20:15  54  FROM svm6122
07:20:15  55  ORDER BY ydate
07:20:15  56  /

Table created.

Elapsed: 00:00:00.36
07:20:16 SQL> 
07:20:16 SQL> -- rpt
07:20:16 SQL> 
07:20:16 SQL> SELECT
07:20:16   2  pair
07:20:16   3  ,trend
07:20:16   4  ,gatt
07:20:16   5  ,COUNT(pair)
07:20:16   6  ,AVG(g6)
07:20:16   7  FROM svm6142
07:20:16   8  GROUP BY pair,trend,gatt
07:20:16   9  ORDER BY pair,trend,gatt
07:20:16  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7143 -.00196716
usd_chf 	-1 up	      3086 .003809602
usd_chf 	-1		25
usd_chf 	 1 nup	      6564 -.00151853
usd_chf 	 1 up	      2946 .003958819
usd_chf 	 1		47

6 rows selected.

Elapsed: 00:00:00.04
07:20:16 SQL> 
07:20:16 SQL> 
07:20:16 SQL> -- Derive NTILE based params:
07:20:16 SQL> 
07:20:16 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.23
07:20:16 SQL> CREATE TABLE svm6162 COMPRESS AS
07:20:16   2  SELECT
07:20:16   3  pair
07:20:16   4  ,ydate
07:20:16   5  ,prdate
07:20:16   6  ,clse
07:20:16   7  ,g6
07:20:16   8  ,gatt
07:20:16   9  ,gattn
07:20:16  10  ,trend
07:20:16  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
07:20:16  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
07:20:16  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
07:20:16  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
07:20:16  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
07:20:16  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
07:20:16  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
07:20:16  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
07:20:16  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
07:20:16  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
07:20:16  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
07:20:16  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
07:20:16  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
07:20:16  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
07:20:16  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
07:20:16  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
07:20:16  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
07:20:16  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
07:20:16  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
07:20:16  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
07:20:16  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
07:20:16  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
07:20:16  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
07:20:16  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
07:20:16  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
07:20:16  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
07:20:16  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
07:20:16  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
07:20:16  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
07:20:16  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
07:20:16  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
07:20:16  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
07:20:16  43  ,hh  att32
07:20:16  44  ,d   att33
07:20:16  45  ,w   att34
07:20:16  46  ,mpm att35
07:20:16  47  ,mph att36
07:20:16  48  ,trend att37
07:20:16  49  FROM svm6142
07:20:16  50  ORDER BY ydate
07:20:16  51  /

Table created.

Elapsed: 00:00:04.84
07:20:21 SQL> 
07:20:21 SQL> -- rpt
07:20:21 SQL> 
07:20:21 SQL> SELECT
07:20:21   2  pair
07:20:21   3  ,trend
07:20:21   4  ,gatt
07:20:21   5  ,COUNT(pair)
07:20:21   6  ,AVG(g6)
07:20:21   7  FROM svm6162
07:20:21   8  GROUP BY pair,trend,gatt
07:20:21   9  ORDER BY pair,trend,gatt
07:20:21  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7143 -.00196716
usd_chf 	-1 up	      3086 .003809602
usd_chf 	-1		25
usd_chf 	 1 nup	      6564 -.00151853
usd_chf 	 1 up	      2946 .003958819
usd_chf 	 1		47

6 rows selected.

Elapsed: 00:00:00.03
07:20:21 SQL> 
07:20:21 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.16
07:20:21 SQL> CREATE TABLE modsrc COMPRESS AS
07:20:21   2  SELECT
07:20:21   3  pair
07:20:21   4  ,ydate
07:20:21   5  ,prdate
07:20:21   6  ,trend
07:20:21   7  ,g6
07:20:21   8  ,gatt
07:20:21   9  ,gattn
07:20:21  10  FROM svm6162
07:20:21  11  /

Table created.

Elapsed: 00:00:00.08
07:20:21 SQL> 
07:20:21 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
07:20:21 SQL> 
07:20:21 SQL> DROP   TABLE chf_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
07:20:21 SQL> CREATE TABLE chf_ms610 COMPRESS AS
07:20:21   2  SELECT
07:20:21   3  ydate
07:20:21   4  ,trend chf_trend
07:20:21   5  ,g6    chf_g6
07:20:21   6  ,gatt  chf_gatt
07:20:21   7  ,gattn chf_gattn
07:20:21   8  FROM modsrc
07:20:21   9  /

Table created.

Elapsed: 00:00:00.07
07:20:21 SQL> 
07:20:21 SQL> ANALYZE TABLE chf_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
07:20:22 SQL> 
07:20:22 SQL> -- I need a copy of the attributes:
07:20:22 SQL> 
07:20:22 SQL> 
07:20:22 SQL> DROP   TABLE chf_att;

Table dropped.

Elapsed: 00:00:00.05
07:20:22 SQL> CREATE TABLE chf_att COMPRESS AS
07:20:22   2  SELECT
07:20:22   3  ydate
07:20:22   4  ,att00 chf_att00
07:20:22   5  ,att01 chf_att01
07:20:22   6  ,att02 chf_att02
07:20:22   7  ,att03 chf_att03
07:20:22   8  ,att04 chf_att04
07:20:22   9  ,att05 chf_att05
07:20:22  10  ,att06 chf_att06
07:20:22  11  ,att07 chf_att07
07:20:22  12  ,att08 chf_att08
07:20:22  13  ,att09 chf_att09
07:20:22  14  ,att10 chf_att10
07:20:22  15  ,att11 chf_att11
07:20:22  16  ,att12 chf_att12
07:20:22  17  ,att13 chf_att13
07:20:22  18  ,att14 chf_att14
07:20:22  19  ,att15 chf_att15
07:20:22  20  ,att16 chf_att16
07:20:22  21  ,att17 chf_att17
07:20:22  22  ,att18 chf_att18
07:20:22  23  ,att19 chf_att19
07:20:22  24  ,att20 chf_att20
07:20:22  25  ,att21 chf_att21
07:20:22  26  ,att22 chf_att22
07:20:22  27  ,att23 chf_att23
07:20:22  28  ,att24 chf_att24
07:20:22  29  ,att25 chf_att25
07:20:22  30  ,att26 chf_att26
07:20:22  31  ,att27 chf_att27
07:20:22  32  ,att28 chf_att28
07:20:22  33  ,att29 chf_att29
07:20:22  34  ,att30 chf_att30
07:20:22  35  ,att31 chf_att31
07:20:22  36  ,att32 chf_att32
07:20:22  37  ,att33 chf_att33
07:20:22  38  ,att34 chf_att34
07:20:22  39  ,att35 chf_att35
07:20:22  40  ,att36 chf_att36
07:20:22  41  ,att37 chf_att37
07:20:22  42  FROM svm6162
07:20:22  43  /

Table created.

Elapsed: 00:00:00.16
07:20:22 SQL> 
07:20:22 SQL> ANALYZE TABLE chf_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
07:20:22 SQL> 
07:20:22 SQL> -- rpt
07:20:22 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19811

Elapsed: 00:00:00.84
07:20:23 SQL> SELECT COUNT(*)FROM chf_att;

  COUNT(*)
----------
     19811

Elapsed: 00:00:00.00
07:20:23 SQL> 
07:20:23 SQL> --
07:20:23 SQL> -- ech610.sql
07:20:23 SQL> --
07:20:23 SQL> 
07:20:23 SQL> -- Creates views and tables for backtesting a forex SVM strategy
07:20:23 SQL> 
07:20:23 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.38
07:20:23 SQL> 
07:20:23 SQL> -- I created di5min here:
07:20:23 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
07:20:23 SQL> 
07:20:23 SQL> CREATE OR REPLACE VIEW svm6102 AS
07:20:23   2  SELECT
07:20:23   3  pair
07:20:23   4  ,ydate
07:20:23   5  ,prdate
07:20:23   6  ,rownum rnum -- acts as t in my time-series
07:20:23   7  ,clse
07:20:23   8  -- Derive a bunch of attributes from clse, the latest price:
07:20:23   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
07:20:23  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
07:20:23  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
07:20:23  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
07:20:23  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
07:20:23  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
07:20:23  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
07:20:23  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
07:20:23  17  --
07:20:23  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
07:20:23  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
07:20:23  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
07:20:23  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
07:20:23  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
07:20:23  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
07:20:23  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
07:20:23  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
07:20:23  26  --
07:20:23  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
07:20:23  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
07:20:23  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
07:20:23  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
07:20:23  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
07:20:23  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
07:20:23  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
07:20:23  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
07:20:23  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
07:20:23  36  FROM di5min WHERE pair LIKE'%ech%'
07:20:23  37  AND ydate > sysdate - 95
07:20:23  38  ORDER BY ydate
07:20:23  39  /

View created.

Elapsed: 00:00:00.05
07:20:24 SQL> 
07:20:24 SQL> -- rpt
07:20:24 SQL> 
07:20:24 SQL> SELECT
07:20:24   2  pair
07:20:24   3  ,COUNT(pair)
07:20:24   4  ,MIN(clse),MAX(clse)
07:20:24   5  ,MIN(avg6),MAX(avg6)
07:20:24   6  ,MIN(ydate),MAX(ydate)
07:20:24   7  FROM svm6102
07:20:24   8  GROUP BY pair
07:20:24   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ech_usd       19809 1.24182424 1.38284305 1.24320711 1.37986485 2010-10-04 07:25:01 2011-01-07 07:15:00

Elapsed: 00:00:00.83
07:20:24 SQL> 
07:20:24 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
07:20:24 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.25
07:20:25 SQL> CREATE TABLE svm6122 COMPRESS AS
07:20:25   2  SELECT
07:20:25   3  pair
07:20:25   4  ,ydate
07:20:25   5  ,prdate
07:20:25   6  ,clse
07:20:25   7  -- g6 is important. I want to predict g6:
07:20:25   8  ,ld6 - clse g6
07:20:25   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
07:20:25  10  -- I want more attributes from the ones I derived above:
07:20:25  11  -- clse relation to moving-min
07:20:25  12  ,clse-min4  cm4
07:20:25  13  ,clse-min6  cm6
07:20:25  14  ,clse-min8  cm8
07:20:25  15  ,clse-min10 cm10
07:20:25  16  ,clse-min12 cm12
07:20:25  17  ,clse-min14 cm14
07:20:25  18  ,clse-min16 cm16
07:20:25  19  ,clse-min18 cm18
07:20:25  20  -- clse relation to moving-avg
07:20:25  21  ,clse-avg4  ca4
07:20:25  22  ,clse-avg6  ca6
07:20:25  23  ,clse-avg8  ca8
07:20:25  24  ,clse-avg10 ca10
07:20:25  25  ,clse-avg12 ca12
07:20:25  26  ,clse-avg14 ca14
07:20:25  27  ,clse-avg16 ca16
07:20:25  28  ,clse-avg18 ca18
07:20:25  29  -- clse relation to moving-max
07:20:25  30  ,clse-max4  cx4
07:20:25  31  ,clse-max6  cx6
07:20:25  32  ,clse-max8  cx8
07:20:25  33  ,clse-max10 cx10
07:20:25  34  ,clse-max12 cx12
07:20:25  35  ,clse-max14 cx14
07:20:25  36  ,clse-max16 cx16
07:20:25  37  ,clse-max18 cx18
07:20:25  38  -- Derive more attributes.
07:20:25  39  -- I want to use CORR() here to help SVM see the shape of the series.
07:20:25  40  -- But COVAR_POP is more stable:
07:20:25  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
07:20:25  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
07:20:25  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
07:20:25  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
07:20:25  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
07:20:25  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
07:20:25  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
07:20:25  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
07:20:25  49  -- Derive date related attributes:
07:20:25  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
07:20:25  51  ,0+TO_CHAR(ydate,'D')d
07:20:25  52  ,0+TO_CHAR(ydate,'W')w
07:20:25  53  -- mpm stands for minutes-past-midnight:
07:20:25  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
07:20:25  55  -- mph stands for minutes-past-hour:
07:20:25  56  ,0+TO_CHAR(ydate,'MI')mph
07:20:25  57  FROM svm6102
07:20:25  58  ORDER BY ydate
07:20:25  59  /

Table created.

Elapsed: 00:00:02.55
07:20:27 SQL> 
07:20:27 SQL> -- rpt
07:20:27 SQL> 
07:20:27 SQL> SELECT
07:20:27   2  pair
07:20:27   3  ,COUNT(pair)
07:20:27   4  ,MIN(clse),MAX(clse)
07:20:27   5  ,MIN(ydate),MAX(ydate)
07:20:27   6  FROM svm6122
07:20:27   7  GROUP BY pair
07:20:27   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ech_usd       19809 1.24182424 1.38284305 2010-10-04 07:25:01 2011-01-07 07:15:00

Elapsed: 00:00:00.04
07:20:27 SQL> 
07:20:27 SQL> -- Prepare for derivation of NTILE based params:
07:20:27 SQL> 
07:20:27 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.34
07:20:28 SQL> CREATE TABLE svm6142 COMPRESS AS
07:20:28   2  SELECT
07:20:28   3  pair
07:20:28   4  ,ydate
07:20:28   5  ,prdate
07:20:28   6  ,clse
07:20:28   7  ,g6
07:20:28   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
07:20:28   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
07:20:28  10  ,CASE WHEN trend IS NULL THEN 1
07:20:28  11  	    WHEN trend =0      THEN 1
07:20:28  12  	    ELSE trend END trend
07:20:28  13  ,cm4
07:20:28  14  ,cm6
07:20:28  15  ,cm8
07:20:28  16  ,cm10
07:20:28  17  ,cm12
07:20:28  18  ,cm14
07:20:28  19  ,cm16
07:20:28  20  ,cm18
07:20:28  21  --
07:20:28  22  ,ca4
07:20:28  23  ,ca6
07:20:28  24  ,ca8
07:20:28  25  ,ca10
07:20:28  26  ,ca12
07:20:28  27  ,ca14
07:20:28  28  ,ca16
07:20:28  29  ,ca18
07:20:28  30  --
07:20:28  31  ,cx4
07:20:28  32  ,cx6
07:20:28  33  ,cx8
07:20:28  34  ,cx10
07:20:28  35  ,cx12
07:20:28  36  ,cx14
07:20:28  37  ,cx16
07:20:28  38  ,cx18
07:20:28  39  --
07:20:28  40  ,crr4
07:20:28  41  ,crr6
07:20:28  42  ,crr8
07:20:28  43  ,crr10
07:20:28  44  ,crr12
07:20:28  45  ,crr14
07:20:28  46  ,crr16
07:20:28  47  ,crr18
07:20:28  48  --
07:20:28  49  ,hh
07:20:28  50  ,d
07:20:28  51  ,w
07:20:28  52  ,mpm
07:20:28  53  ,mph
07:20:28  54  FROM svm6122
07:20:28  55  ORDER BY ydate
07:20:28  56  /

Table created.

Elapsed: 00:00:00.39
07:20:28 SQL> 
07:20:28 SQL> -- rpt
07:20:28 SQL> 
07:20:28 SQL> SELECT
07:20:28   2  pair
07:20:28   3  ,trend
07:20:28   4  ,gatt
07:20:28   5  ,COUNT(pair)
07:20:28   6  ,AVG(g6)
07:20:28   7  FROM svm6142
07:20:28   8  GROUP BY pair,trend,gatt
07:20:28   9  ORDER BY pair,trend,gatt
07:20:28  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6860 -.00228276
ech_usd 	-1 up	      3567 .003580667
ech_usd 	-1		53
ech_usd 	 1 nup	      6405  -.0023095
ech_usd 	 1 up	      2905 .004122708
ech_usd 	 1		19

6 rows selected.

Elapsed: 00:00:00.04
07:20:28 SQL> 
07:20:28 SQL> 
07:20:28 SQL> -- Derive NTILE based params:
07:20:28 SQL> 
07:20:28 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.24
07:20:28 SQL> CREATE TABLE svm6162 COMPRESS AS
07:20:28   2  SELECT
07:20:28   3  pair
07:20:28   4  ,ydate
07:20:28   5  ,prdate
07:20:28   6  ,clse
07:20:28   7  ,g6
07:20:28   8  ,gatt
07:20:28   9  ,gattn
07:20:28  10  ,trend
07:20:28  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
07:20:28  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
07:20:28  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
07:20:28  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
07:20:28  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
07:20:28  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
07:20:28  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
07:20:28  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
07:20:28  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
07:20:28  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
07:20:28  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
07:20:28  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
07:20:28  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
07:20:28  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
07:20:28  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
07:20:28  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
07:20:28  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
07:20:28  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
07:20:28  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
07:20:28  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
07:20:28  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
07:20:28  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
07:20:28  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
07:20:28  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
07:20:28  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
07:20:28  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
07:20:28  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
07:20:28  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
07:20:28  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
07:20:28  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
07:20:28  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
07:20:28  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
07:20:28  43  ,hh  att32
07:20:28  44  ,d   att33
07:20:28  45  ,w   att34
07:20:28  46  ,mpm att35
07:20:28  47  ,mph att36
07:20:28  48  ,trend att37
07:20:28  49  FROM svm6142
07:20:28  50  ORDER BY ydate
07:20:28  51  /

Table created.

Elapsed: 00:00:05.06
07:20:33 SQL> 
07:20:33 SQL> -- rpt
07:20:33 SQL> 
07:20:33 SQL> SELECT
07:20:33   2  pair
07:20:33   3  ,trend
07:20:33   4  ,gatt
07:20:33   5  ,COUNT(pair)
07:20:33   6  ,AVG(g6)
07:20:33   7  FROM svm6162
07:20:33   8  GROUP BY pair,trend,gatt
07:20:33   9  ORDER BY pair,trend,gatt
07:20:33  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6860 -.00228276
ech_usd 	-1 up	      3567 .003580667
ech_usd 	-1		53
ech_usd 	 1 nup	      6405  -.0023095
ech_usd 	 1 up	      2905 .004122708
ech_usd 	 1		19

6 rows selected.

Elapsed: 00:00:00.03
07:20:33 SQL> 
07:20:33 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
07:20:33 SQL> CREATE TABLE modsrc COMPRESS AS
07:20:33   2  SELECT
07:20:33   3  pair
07:20:33   4  ,ydate
07:20:33   5  ,prdate
07:20:33   6  ,trend
07:20:33   7  ,g6
07:20:33   8  ,gatt
07:20:33   9  ,gattn
07:20:33  10  FROM svm6162
07:20:33  11  /

Table created.

Elapsed: 00:00:00.09
07:20:33 SQL> 
07:20:33 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
07:20:34 SQL> 
07:20:34 SQL> DROP   TABLE ech_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
07:20:34 SQL> CREATE TABLE ech_ms610 COMPRESS AS
07:20:34   2  SELECT
07:20:34   3  ydate
07:20:34   4  ,trend ech_trend
07:20:34   5  ,g6    ech_g6
07:20:34   6  ,gatt  ech_gatt
07:20:34   7  ,gattn ech_gattn
07:20:34   8  FROM modsrc
07:20:34   9  /

Table created.

Elapsed: 00:00:00.06
07:20:34 SQL> 
07:20:34 SQL> ANALYZE TABLE ech_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
07:20:34 SQL> 
07:20:34 SQL> -- I need a copy of the attributes:
07:20:34 SQL> 
07:20:34 SQL> 
07:20:34 SQL> DROP   TABLE ech_att;

Table dropped.

Elapsed: 00:00:00.08
07:20:34 SQL> CREATE TABLE ech_att COMPRESS AS
07:20:34   2  SELECT
07:20:34   3  ydate
07:20:34   4  ,att00 ech_att00
07:20:34   5  ,att01 ech_att01
07:20:34   6  ,att02 ech_att02
07:20:34   7  ,att03 ech_att03
07:20:34   8  ,att04 ech_att04
07:20:34   9  ,att05 ech_att05
07:20:34  10  ,att06 ech_att06
07:20:34  11  ,att07 ech_att07
07:20:34  12  ,att08 ech_att08
07:20:34  13  ,att09 ech_att09
07:20:34  14  ,att10 ech_att10
07:20:34  15  ,att11 ech_att11
07:20:34  16  ,att12 ech_att12
07:20:34  17  ,att13 ech_att13
07:20:34  18  ,att14 ech_att14
07:20:34  19  ,att15 ech_att15
07:20:34  20  ,att16 ech_att16
07:20:34  21  ,att17 ech_att17
07:20:34  22  ,att18 ech_att18
07:20:34  23  ,att19 ech_att19
07:20:34  24  ,att20 ech_att20
07:20:34  25  ,att21 ech_att21
07:20:34  26  ,att22 ech_att22
07:20:34  27  ,att23 ech_att23
07:20:34  28  ,att24 ech_att24
07:20:34  29  ,att25 ech_att25
07:20:34  30  ,att26 ech_att26
07:20:34  31  ,att27 ech_att27
07:20:34  32  ,att28 ech_att28
07:20:34  33  ,att29 ech_att29
07:20:34  34  ,att30 ech_att30
07:20:34  35  ,att31 ech_att31
07:20:34  36  ,att32 ech_att32
07:20:34  37  ,att33 ech_att33
07:20:34  38  ,att34 ech_att34
07:20:34  39  ,att35 ech_att35
07:20:34  40  ,att36 ech_att36
07:20:34  41  ,att37 ech_att37
07:20:34  42  FROM svm6162
07:20:34  43  /

Table created.

Elapsed: 00:00:00.19
07:20:34 SQL> 
07:20:34 SQL> ANALYZE TABLE ech_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.53
07:20:35 SQL> 
07:20:35 SQL> -- rpt
07:20:35 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19809

Elapsed: 00:00:00.82
07:20:36 SQL> SELECT COUNT(*)FROM ech_att;

  COUNT(*)
----------
     19809

Elapsed: 00:00:00.01
07:20:36 SQL> 
07:20:36 SQL> --
07:20:36 SQL> -- egb610.sql
07:20:36 SQL> --
07:20:36 SQL> 
07:20:36 SQL> -- Creates views and tables for backtesting a forex SVM strategy
07:20:36 SQL> 
07:20:36 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.43
07:20:36 SQL> 
07:20:36 SQL> -- I created di5min here:
07:20:36 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
07:20:36 SQL> 
07:20:36 SQL> CREATE OR REPLACE VIEW svm6102 AS
07:20:36   2  SELECT
07:20:36   3  pair
07:20:36   4  ,ydate
07:20:36   5  ,prdate
07:20:36   6  ,rownum rnum -- acts as t in my time-series
07:20:36   7  ,clse
07:20:36   8  -- Derive a bunch of attributes from clse, the latest price:
07:20:36   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
07:20:36  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
07:20:36  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
07:20:36  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
07:20:36  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
07:20:36  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
07:20:36  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
07:20:36  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
07:20:36  17  --
07:20:36  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
07:20:36  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
07:20:36  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
07:20:36  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
07:20:36  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
07:20:36  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
07:20:36  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
07:20:36  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
07:20:36  26  --
07:20:36  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
07:20:36  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
07:20:36  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
07:20:36  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
07:20:36  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
07:20:36  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
07:20:36  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
07:20:36  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
07:20:36  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
07:20:36  36  FROM di5min WHERE pair LIKE'%egb%'
07:20:36  37  AND ydate > sysdate - 95
07:20:36  38  ORDER BY ydate
07:20:36  39  /

View created.

Elapsed: 00:00:00.04
07:20:36 SQL> 
07:20:36 SQL> -- rpt
07:20:36 SQL> 
07:20:36 SQL> SELECT
07:20:36   2  pair
07:20:36   3  ,COUNT(pair)
07:20:36   4  ,MIN(clse),MAX(clse)
07:20:36   5  ,MIN(avg6),MAX(avg6)
07:20:36   6  ,MIN(ydate),MAX(ydate)
07:20:36   7  FROM svm6102
07:20:36   8  GROUP BY pair
07:20:36   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
egb_usd       19808 .833520557 .893920122 .834199029 .892400287 2010-10-04 07:25:01 2011-01-07 07:15:00

Elapsed: 00:00:00.97
07:20:37 SQL> 
07:20:37 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
07:20:37 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.41
07:20:37 SQL> CREATE TABLE svm6122 COMPRESS AS
07:20:37   2  SELECT
07:20:37   3  pair
07:20:37   4  ,ydate
07:20:37   5  ,prdate
07:20:37   6  ,clse
07:20:37   7  -- g6 is important. I want to predict g6:
07:20:37   8  ,ld6 - clse g6
07:20:37   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
07:20:37  10  -- I want more attributes from the ones I derived above:
07:20:37  11  -- clse relation to moving-min
07:20:37  12  ,clse-min4  cm4
07:20:37  13  ,clse-min6  cm6
07:20:37  14  ,clse-min8  cm8
07:20:37  15  ,clse-min10 cm10
07:20:37  16  ,clse-min12 cm12
07:20:37  17  ,clse-min14 cm14
07:20:37  18  ,clse-min16 cm16
07:20:37  19  ,clse-min18 cm18
07:20:37  20  -- clse relation to moving-avg
07:20:37  21  ,clse-avg4  ca4
07:20:37  22  ,clse-avg6  ca6
07:20:37  23  ,clse-avg8  ca8
07:20:37  24  ,clse-avg10 ca10
07:20:37  25  ,clse-avg12 ca12
07:20:37  26  ,clse-avg14 ca14
07:20:37  27  ,clse-avg16 ca16
07:20:37  28  ,clse-avg18 ca18
07:20:37  29  -- clse relation to moving-max
07:20:37  30  ,clse-max4  cx4
07:20:37  31  ,clse-max6  cx6
07:20:37  32  ,clse-max8  cx8
07:20:37  33  ,clse-max10 cx10
07:20:37  34  ,clse-max12 cx12
07:20:37  35  ,clse-max14 cx14
07:20:37  36  ,clse-max16 cx16
07:20:37  37  ,clse-max18 cx18
07:20:37  38  -- Derive more attributes.
07:20:37  39  -- I want to use CORR() here to help SVM see the shape of the series.
07:20:37  40  -- But COVAR_POP is more stable:
07:20:37  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
07:20:37  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
07:20:37  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
07:20:37  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
07:20:37  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
07:20:37  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
07:20:37  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
07:20:37  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
07:20:37  49  -- Derive date related attributes:
07:20:37  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
07:20:37  51  ,0+TO_CHAR(ydate,'D')d
07:20:37  52  ,0+TO_CHAR(ydate,'W')w
07:20:37  53  -- mpm stands for minutes-past-midnight:
07:20:37  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
07:20:37  55  -- mph stands for minutes-past-hour:
07:20:37  56  ,0+TO_CHAR(ydate,'MI')mph
07:20:37  57  FROM svm6102
07:20:37  58  ORDER BY ydate
07:20:37  59  /

Table created.

Elapsed: 00:00:02.58
07:20:40 SQL> 
07:20:40 SQL> -- rpt
07:20:40 SQL> 
07:20:40 SQL> SELECT
07:20:40   2  pair
07:20:40   3  ,COUNT(pair)
07:20:40   4  ,MIN(clse),MAX(clse)
07:20:40   5  ,MIN(ydate),MAX(ydate)
07:20:40   6  FROM svm6122
07:20:40   7  GROUP BY pair
07:20:40   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
egb_usd       19808 .833520557 .893920122 2010-10-04 07:25:01 2011-01-07 07:15:00

Elapsed: 00:00:00.05
07:20:40 SQL> 
07:20:40 SQL> -- Prepare for derivation of NTILE based params:
07:20:40 SQL> 
07:20:40 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.45
07:20:41 SQL> CREATE TABLE svm6142 COMPRESS AS
07:20:41   2  SELECT
07:20:41   3  pair
07:20:41   4  ,ydate
07:20:41   5  ,prdate
07:20:41   6  ,clse
07:20:41   7  ,g6
07:20:41   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
07:20:41   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
07:20:41  10  ,CASE WHEN trend IS NULL THEN 1
07:20:41  11  	    WHEN trend =0      THEN 1
07:20:41  12  	    ELSE trend END trend
07:20:41  13  ,cm4
07:20:41  14  ,cm6
07:20:41  15  ,cm8
07:20:41  16  ,cm10
07:20:41  17  ,cm12
07:20:41  18  ,cm14
07:20:41  19  ,cm16
07:20:41  20  ,cm18
07:20:41  21  --
07:20:41  22  ,ca4
07:20:41  23  ,ca6
07:20:41  24  ,ca8
07:20:41  25  ,ca10
07:20:41  26  ,ca12
07:20:41  27  ,ca14
07:20:41  28  ,ca16
07:20:41  29  ,ca18
07:20:41  30  --
07:20:41  31  ,cx4
07:20:41  32  ,cx6
07:20:41  33  ,cx8
07:20:41  34  ,cx10
07:20:41  35  ,cx12
07:20:41  36  ,cx14
07:20:41  37  ,cx16
07:20:41  38  ,cx18
07:20:41  39  --
07:20:41  40  ,crr4
07:20:41  41  ,crr6
07:20:41  42  ,crr8
07:20:41  43  ,crr10
07:20:41  44  ,crr12
07:20:41  45  ,crr14
07:20:41  46  ,crr16
07:20:41  47  ,crr18
07:20:41  48  --
07:20:41  49  ,hh
07:20:41  50  ,d
07:20:41  51  ,w
07:20:41  52  ,mpm
07:20:41  53  ,mph
07:20:41  54  FROM svm6122
07:20:41  55  ORDER BY ydate
07:20:41  56  /

Table created.

Elapsed: 00:00:00.42
07:20:41 SQL> 
07:20:41 SQL> -- rpt
07:20:41 SQL> 
07:20:41 SQL> SELECT
07:20:41   2  pair
07:20:41   3  ,trend
07:20:41   4  ,gatt
07:20:41   5  ,COUNT(pair)
07:20:41   6  ,AVG(g6)
07:20:41   7  FROM svm6142
07:20:41   8  GROUP BY pair,trend,gatt
07:20:41   9  ORDER BY pair,trend,gatt
07:20:41  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7985 -.00104282
egb_usd 	-1 up	      2634 .002928824
egb_usd 	-1		 2
egb_usd 	 1 nup	      6500 -.00136426
egb_usd 	 1 up	      2617   .0029282
egb_usd 	 1		70

6 rows selected.

Elapsed: 00:00:00.04
07:20:41 SQL> 
07:20:41 SQL> 
07:20:41 SQL> -- Derive NTILE based params:
07:20:41 SQL> 
07:20:41 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:01.04
07:20:42 SQL> CREATE TABLE svm6162 COMPRESS AS
07:20:42   2  SELECT
07:20:42   3  pair
07:20:42   4  ,ydate
07:20:42   5  ,prdate
07:20:42   6  ,clse
07:20:42   7  ,g6
07:20:42   8  ,gatt
07:20:42   9  ,gattn
07:20:42  10  ,trend
07:20:42  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
07:20:42  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
07:20:42  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
07:20:42  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
07:20:42  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
07:20:42  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
07:20:42  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
07:20:42  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
07:20:42  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
07:20:42  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
07:20:42  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
07:20:42  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
07:20:42  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
07:20:42  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
07:20:42  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
07:20:42  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
07:20:42  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
07:20:42  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
07:20:42  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
07:20:42  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
07:20:42  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
07:20:42  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
07:20:42  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
07:20:42  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
07:20:42  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
07:20:42  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
07:20:42  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
07:20:42  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
07:20:42  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
07:20:42  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
07:20:42  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
07:20:42  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
07:20:42  43  ,hh  att32
07:20:42  44  ,d   att33
07:20:42  45  ,w   att34
07:20:42  46  ,mpm att35
07:20:42  47  ,mph att36
07:20:42  48  ,trend att37
07:20:42  49  FROM svm6142
07:20:42  50  ORDER BY ydate
07:20:42  51  /

Table created.

Elapsed: 00:00:05.65
07:20:48 SQL> 
07:20:48 SQL> -- rpt
07:20:48 SQL> 
07:20:48 SQL> SELECT
07:20:48   2  pair
07:20:48   3  ,trend
07:20:48   4  ,gatt
07:20:48   5  ,COUNT(pair)
07:20:48   6  ,AVG(g6)
07:20:48   7  FROM svm6162
07:20:48   8  GROUP BY pair,trend,gatt
07:20:48   9  ORDER BY pair,trend,gatt
07:20:48  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7985 -.00104282
egb_usd 	-1 up	      2634 .002928824
egb_usd 	-1		 2
egb_usd 	 1 nup	      6500 -.00136426
egb_usd 	 1 up	      2617   .0029282
egb_usd 	 1		70

6 rows selected.

Elapsed: 00:00:00.04
07:20:48 SQL> 
07:20:48 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.19
07:20:48 SQL> CREATE TABLE modsrc COMPRESS AS
07:20:48   2  SELECT
07:20:48   3  pair
07:20:48   4  ,ydate
07:20:48   5  ,prdate
07:20:48   6  ,trend
07:20:48   7  ,g6
07:20:48   8  ,gatt
07:20:48   9  ,gattn
07:20:48  10  FROM svm6162
07:20:48  11  /

Table created.

Elapsed: 00:00:00.09
07:20:48 SQL> 
07:20:48 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.28
07:20:48 SQL> 
07:20:48 SQL> DROP   TABLE egb_ms610 ;

Table dropped.

Elapsed: 00:00:00.07
07:20:48 SQL> CREATE TABLE egb_ms610 COMPRESS AS
07:20:48   2  SELECT
07:20:48   3  ydate
07:20:48   4  ,trend egb_trend
07:20:48   5  ,g6    egb_g6
07:20:48   6  ,gatt  egb_gatt
07:20:48   7  ,gattn egb_gattn
07:20:48   8  FROM modsrc
07:20:48   9  /

Table created.

Elapsed: 00:00:00.08
07:20:48 SQL> 
07:20:48 SQL> ANALYZE TABLE egb_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
07:20:49 SQL> 
07:20:49 SQL> -- I need a copy of the attributes:
07:20:49 SQL> 
07:20:49 SQL> 
07:20:49 SQL> DROP   TABLE egb_att;

Table dropped.

Elapsed: 00:00:00.05
07:20:49 SQL> CREATE TABLE egb_att COMPRESS AS
07:20:49   2  SELECT
07:20:49   3  ydate
07:20:49   4  ,att00 egb_att00
07:20:49   5  ,att01 egb_att01
07:20:49   6  ,att02 egb_att02
07:20:49   7  ,att03 egb_att03
07:20:49   8  ,att04 egb_att04
07:20:49   9  ,att05 egb_att05
07:20:49  10  ,att06 egb_att06
07:20:49  11  ,att07 egb_att07
07:20:49  12  ,att08 egb_att08
07:20:49  13  ,att09 egb_att09
07:20:49  14  ,att10 egb_att10
07:20:49  15  ,att11 egb_att11
07:20:49  16  ,att12 egb_att12
07:20:49  17  ,att13 egb_att13
07:20:49  18  ,att14 egb_att14
07:20:49  19  ,att15 egb_att15
07:20:49  20  ,att16 egb_att16
07:20:49  21  ,att17 egb_att17
07:20:49  22  ,att18 egb_att18
07:20:49  23  ,att19 egb_att19
07:20:49  24  ,att20 egb_att20
07:20:49  25  ,att21 egb_att21
07:20:49  26  ,att22 egb_att22
07:20:49  27  ,att23 egb_att23
07:20:49  28  ,att24 egb_att24
07:20:49  29  ,att25 egb_att25
07:20:49  30  ,att26 egb_att26
07:20:49  31  ,att27 egb_att27
07:20:49  32  ,att28 egb_att28
07:20:49  33  ,att29 egb_att29
07:20:49  34  ,att30 egb_att30
07:20:49  35  ,att31 egb_att31
07:20:49  36  ,att32 egb_att32
07:20:49  37  ,att33 egb_att33
07:20:49  38  ,att34 egb_att34
07:20:49  39  ,att35 egb_att35
07:20:49  40  ,att36 egb_att36
07:20:49  41  ,att37 egb_att37
07:20:49  42  FROM svm6162
07:20:49  43  /

Table created.

Elapsed: 00:00:00.17
07:20:49 SQL> 
07:20:49 SQL> ANALYZE TABLE egb_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
07:20:49 SQL> 
07:20:49 SQL> -- rpt
07:20:49 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19808

Elapsed: 00:00:00.93
07:20:50 SQL> SELECT COUNT(*)FROM egb_att;

  COUNT(*)
----------
     19808

Elapsed: 00:00:00.01
07:20:50 SQL> 
07:20:50 SQL> --
07:20:50 SQL> -- ejp610.sql
07:20:50 SQL> --
07:20:50 SQL> 
07:20:50 SQL> -- Creates views and tables for backtesting a forex SVM strategy
07:20:50 SQL> 
07:20:50 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.38
07:20:51 SQL> 
07:20:51 SQL> -- I created di5min here:
07:20:51 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
07:20:51 SQL> 
07:20:51 SQL> CREATE OR REPLACE VIEW svm6102 AS
07:20:51   2  SELECT
07:20:51   3  pair
07:20:51   4  ,ydate
07:20:51   5  ,prdate
07:20:51   6  ,rownum rnum -- acts as t in my time-series
07:20:51   7  ,clse
07:20:51   8  -- Derive a bunch of attributes from clse, the latest price:
07:20:51   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
07:20:51  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
07:20:51  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
07:20:51  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
07:20:51  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
07:20:51  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
07:20:51  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
07:20:51  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
07:20:51  17  --
07:20:51  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
07:20:51  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
07:20:51  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
07:20:51  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
07:20:51  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
07:20:51  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
07:20:51  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
07:20:51  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
07:20:51  26  --
07:20:51  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
07:20:51  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
07:20:51  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
07:20:51  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
07:20:51  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
07:20:51  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
07:20:51  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
07:20:51  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
07:20:51  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
07:20:51  36  FROM di5min WHERE pair LIKE'%ejp%'
07:20:51  37  AND ydate > sysdate - 95
07:20:51  38  ORDER BY ydate
07:20:51  39  /

View created.

Elapsed: 00:00:00.05
07:20:51 SQL> 
07:20:51 SQL> -- rpt
07:20:51 SQL> 
07:20:51 SQL> SELECT
07:20:51   2  pair
07:20:51   3  ,COUNT(pair)
07:20:51   4  ,MIN(clse),MAX(clse)
07:20:51   5  ,MIN(avg6),MAX(avg6)
07:20:51   6  ,MIN(ydate),MAX(ydate)
07:20:51   7  FROM svm6102
07:20:51   8  GROUP BY pair
07:20:51   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ejp_usd       19806 107.643765	115.63485 107.776148 115.509678 2010-10-04 07:25:01 2011-01-07 07:15:00

Elapsed: 00:00:00.88
07:20:52 SQL> 
07:20:52 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
07:20:52 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.22
07:20:52 SQL> CREATE TABLE svm6122 COMPRESS AS
07:20:52   2  SELECT
07:20:52   3  pair
07:20:52   4  ,ydate
07:20:52   5  ,prdate
07:20:52   6  ,clse
07:20:52   7  -- g6 is important. I want to predict g6:
07:20:52   8  ,ld6 - clse g6
07:20:52   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
07:20:52  10  -- I want more attributes from the ones I derived above:
07:20:52  11  -- clse relation to moving-min
07:20:52  12  ,clse-min4  cm4
07:20:52  13  ,clse-min6  cm6
07:20:52  14  ,clse-min8  cm8
07:20:52  15  ,clse-min10 cm10
07:20:52  16  ,clse-min12 cm12
07:20:52  17  ,clse-min14 cm14
07:20:52  18  ,clse-min16 cm16
07:20:52  19  ,clse-min18 cm18
07:20:52  20  -- clse relation to moving-avg
07:20:52  21  ,clse-avg4  ca4
07:20:52  22  ,clse-avg6  ca6
07:20:52  23  ,clse-avg8  ca8
07:20:52  24  ,clse-avg10 ca10
07:20:52  25  ,clse-avg12 ca12
07:20:52  26  ,clse-avg14 ca14
07:20:52  27  ,clse-avg16 ca16
07:20:52  28  ,clse-avg18 ca18
07:20:52  29  -- clse relation to moving-max
07:20:52  30  ,clse-max4  cx4
07:20:52  31  ,clse-max6  cx6
07:20:52  32  ,clse-max8  cx8
07:20:52  33  ,clse-max10 cx10
07:20:52  34  ,clse-max12 cx12
07:20:52  35  ,clse-max14 cx14
07:20:52  36  ,clse-max16 cx16
07:20:52  37  ,clse-max18 cx18
07:20:52  38  -- Derive more attributes.
07:20:52  39  -- I want to use CORR() here to help SVM see the shape of the series.
07:20:52  40  -- But COVAR_POP is more stable:
07:20:52  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
07:20:52  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
07:20:52  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
07:20:52  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
07:20:52  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
07:20:52  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
07:20:52  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
07:20:52  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
07:20:52  49  -- Derive date related attributes:
07:20:52  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
07:20:52  51  ,0+TO_CHAR(ydate,'D')d
07:20:52  52  ,0+TO_CHAR(ydate,'W')w
07:20:52  53  -- mpm stands for minutes-past-midnight:
07:20:52  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
07:20:52  55  -- mph stands for minutes-past-hour:
07:20:52  56  ,0+TO_CHAR(ydate,'MI')mph
07:20:52  57  FROM svm6102
07:20:52  58  ORDER BY ydate
07:20:52  59  /

Table created.

Elapsed: 00:00:02.17
07:20:54 SQL> 
07:20:54 SQL> -- rpt
07:20:54 SQL> 
07:20:54 SQL> SELECT
07:20:54   2  pair
07:20:54   3  ,COUNT(pair)
07:20:54   4  ,MIN(clse),MAX(clse)
07:20:54   5  ,MIN(ydate),MAX(ydate)
07:20:54   6  FROM svm6122
07:20:54   7  GROUP BY pair
07:20:54   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ejp_usd       19806 107.643765	115.63485 2010-10-04 07:25:01 2011-01-07 07:15:00

Elapsed: 00:00:00.03
07:20:54 SQL> 
07:20:54 SQL> -- Prepare for derivation of NTILE based params:
07:20:54 SQL> 
07:20:54 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.25
07:20:54 SQL> CREATE TABLE svm6142 COMPRESS AS
07:20:54   2  SELECT
07:20:54   3  pair
07:20:54   4  ,ydate
07:20:54   5  ,prdate
07:20:54   6  ,clse
07:20:54   7  ,g6
07:20:54   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
07:20:54   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
07:20:54  10  ,CASE WHEN trend IS NULL THEN 1
07:20:54  11  	    WHEN trend =0      THEN 1
07:20:54  12  	    ELSE trend END trend
07:20:54  13  ,cm4
07:20:54  14  ,cm6
07:20:54  15  ,cm8
07:20:54  16  ,cm10
07:20:54  17  ,cm12
07:20:54  18  ,cm14
07:20:54  19  ,cm16
07:20:54  20  ,cm18
07:20:54  21  --
07:20:54  22  ,ca4
07:20:54  23  ,ca6
07:20:54  24  ,ca8
07:20:54  25  ,ca10
07:20:54  26  ,ca12
07:20:54  27  ,ca14
07:20:54  28  ,ca16
07:20:54  29  ,ca18
07:20:54  30  --
07:20:54  31  ,cx4
07:20:54  32  ,cx6
07:20:54  33  ,cx8
07:20:54  34  ,cx10
07:20:54  35  ,cx12
07:20:54  36  ,cx14
07:20:54  37  ,cx16
07:20:54  38  ,cx18
07:20:54  39  --
07:20:54  40  ,crr4
07:20:54  41  ,crr6
07:20:54  42  ,crr8
07:20:54  43  ,crr10
07:20:54  44  ,crr12
07:20:54  45  ,crr14
07:20:54  46  ,crr16
07:20:54  47  ,crr18
07:20:54  48  --
07:20:54  49  ,hh
07:20:54  50  ,d
07:20:54  51  ,w
07:20:54  52  ,mpm
07:20:54  53  ,mph
07:20:54  54  FROM svm6122
07:20:54  55  ORDER BY ydate
07:20:54  56  /

Table created.

Elapsed: 00:00:00.38
07:20:55 SQL> 
07:20:55 SQL> -- rpt
07:20:55 SQL> 
07:20:55 SQL> SELECT
07:20:55   2  pair
07:20:55   3  ,trend
07:20:55   4  ,gatt
07:20:55   5  ,COUNT(pair)
07:20:55   6  ,AVG(g6)
07:20:55   7  FROM svm6142
07:20:55   8  GROUP BY pair,trend,gatt
07:20:55   9  ORDER BY pair,trend,gatt
07:20:55  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      5191 -.32174788
ejp_usd 	-1 up	      4930 .277892656
ejp_usd 	-1		34
ejp_usd 	 1 nup	      4969 -.29072789
ejp_usd 	 1 up	      4644  .28760776
ejp_usd 	 1		38

6 rows selected.

Elapsed: 00:00:00.03
07:20:55 SQL> 
07:20:55 SQL> 
07:20:55 SQL> -- Derive NTILE based params:
07:20:55 SQL> 
07:20:55 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.17
07:20:55 SQL> CREATE TABLE svm6162 COMPRESS AS
07:20:55   2  SELECT
07:20:55   3  pair
07:20:55   4  ,ydate
07:20:55   5  ,prdate
07:20:55   6  ,clse
07:20:55   7  ,g6
07:20:55   8  ,gatt
07:20:55   9  ,gattn
07:20:55  10  ,trend
07:20:55  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
07:20:55  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
07:20:55  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
07:20:55  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
07:20:55  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
07:20:55  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
07:20:55  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
07:20:55  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
07:20:55  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
07:20:55  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
07:20:55  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
07:20:55  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
07:20:55  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
07:20:55  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
07:20:55  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
07:20:55  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
07:20:55  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
07:20:55  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
07:20:55  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
07:20:55  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
07:20:55  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
07:20:55  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
07:20:55  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
07:20:55  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
07:20:55  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
07:20:55  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
07:20:55  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
07:20:55  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
07:20:55  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
07:20:55  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
07:20:55  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
07:20:55  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
07:20:55  43  ,hh  att32
07:20:55  44  ,d   att33
07:20:55  45  ,w   att34
07:20:55  46  ,mpm att35
07:20:55  47  ,mph att36
07:20:55  48  ,trend att37
07:20:55  49  FROM svm6142
07:20:55  50  ORDER BY ydate
07:20:55  51  /

Table created.

Elapsed: 00:00:04.90
07:21:00 SQL> 
07:21:00 SQL> -- rpt
07:21:00 SQL> 
07:21:00 SQL> SELECT
07:21:00   2  pair
07:21:00   3  ,trend
07:21:00   4  ,gatt
07:21:00   5  ,COUNT(pair)
07:21:00   6  ,AVG(g6)
07:21:00   7  FROM svm6162
07:21:00   8  GROUP BY pair,trend,gatt
07:21:00   9  ORDER BY pair,trend,gatt
07:21:00  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      5191 -.32174788
ejp_usd 	-1 up	      4930 .277892656
ejp_usd 	-1		34
ejp_usd 	 1 nup	      4969 -.29072789
ejp_usd 	 1 up	      4644  .28760776
ejp_usd 	 1		38

6 rows selected.

Elapsed: 00:00:00.03
07:21:00 SQL> 
07:21:00 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.19
07:21:00 SQL> CREATE TABLE modsrc COMPRESS AS
07:21:00   2  SELECT
07:21:00   3  pair
07:21:00   4  ,ydate
07:21:00   5  ,prdate
07:21:00   6  ,trend
07:21:00   7  ,g6
07:21:00   8  ,gatt
07:21:00   9  ,gattn
07:21:00  10  FROM svm6162
07:21:00  11  /

Table created.

Elapsed: 00:00:00.08
07:21:00 SQL> 
07:21:00 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
07:21:00 SQL> 
07:21:00 SQL> DROP   TABLE ejp_ms610 ;

Table dropped.

Elapsed: 00:00:00.07
07:21:00 SQL> CREATE TABLE ejp_ms610 COMPRESS AS
07:21:00   2  SELECT
07:21:00   3  ydate
07:21:00   4  ,trend ejp_trend
07:21:00   5  ,g6    ejp_g6
07:21:00   6  ,gatt  ejp_gatt
07:21:00   7  ,gattn ejp_gattn
07:21:00   8  FROM modsrc
07:21:00   9  /

Table created.

Elapsed: 00:00:00.08
07:21:00 SQL> 
07:21:00 SQL> ANALYZE TABLE ejp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
07:21:01 SQL> 
07:21:01 SQL> -- I need a copy of the attributes:
07:21:01 SQL> 
07:21:01 SQL> 
07:21:01 SQL> DROP   TABLE ejp_att;

Table dropped.

Elapsed: 00:00:00.05
07:21:01 SQL> CREATE TABLE ejp_att COMPRESS AS
07:21:01   2  SELECT
07:21:01   3  ydate
07:21:01   4  ,att00 ejp_att00
07:21:01   5  ,att01 ejp_att01
07:21:01   6  ,att02 ejp_att02
07:21:01   7  ,att03 ejp_att03
07:21:01   8  ,att04 ejp_att04
07:21:01   9  ,att05 ejp_att05
07:21:01  10  ,att06 ejp_att06
07:21:01  11  ,att07 ejp_att07
07:21:01  12  ,att08 ejp_att08
07:21:01  13  ,att09 ejp_att09
07:21:01  14  ,att10 ejp_att10
07:21:01  15  ,att11 ejp_att11
07:21:01  16  ,att12 ejp_att12
07:21:01  17  ,att13 ejp_att13
07:21:01  18  ,att14 ejp_att14
07:21:01  19  ,att15 ejp_att15
07:21:01  20  ,att16 ejp_att16
07:21:01  21  ,att17 ejp_att17
07:21:01  22  ,att18 ejp_att18
07:21:01  23  ,att19 ejp_att19
07:21:01  24  ,att20 ejp_att20
07:21:01  25  ,att21 ejp_att21
07:21:01  26  ,att22 ejp_att22
07:21:01  27  ,att23 ejp_att23
07:21:01  28  ,att24 ejp_att24
07:21:01  29  ,att25 ejp_att25
07:21:01  30  ,att26 ejp_att26
07:21:01  31  ,att27 ejp_att27
07:21:01  32  ,att28 ejp_att28
07:21:01  33  ,att29 ejp_att29
07:21:01  34  ,att30 ejp_att30
07:21:01  35  ,att31 ejp_att31
07:21:01  36  ,att32 ejp_att32
07:21:01  37  ,att33 ejp_att33
07:21:01  38  ,att34 ejp_att34
07:21:01  39  ,att35 ejp_att35
07:21:01  40  ,att36 ejp_att36
07:21:01  41  ,att37 ejp_att37
07:21:01  42  FROM svm6162
07:21:01  43  /

Table created.

Elapsed: 00:00:00.16
07:21:01 SQL> 
07:21:01 SQL> ANALYZE TABLE ejp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.48
07:21:01 SQL> 
07:21:01 SQL> -- rpt
07:21:01 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19806

Elapsed: 00:00:00.85
07:21:02 SQL> SELECT COUNT(*)FROM ejp_att;

  COUNT(*)
----------
     19806

Elapsed: 00:00:00.00
07:21:02 SQL> 
07:21:02 SQL> --
07:21:02 SQL> -- ajp610.sql
07:21:02 SQL> --
07:21:02 SQL> 
07:21:02 SQL> -- Creates views and tables for backtesting a forex SVM strategy
07:21:02 SQL> 
07:21:02 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.37
07:21:02 SQL> 
07:21:02 SQL> -- I created di5min here:
07:21:02 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
07:21:02 SQL> 
07:21:02 SQL> CREATE OR REPLACE VIEW svm6102 AS
07:21:02   2  SELECT
07:21:02   3  pair
07:21:02   4  ,ydate
07:21:02   5  ,prdate
07:21:02   6  ,rownum rnum -- acts as t in my time-series
07:21:02   7  ,clse
07:21:02   8  -- Derive a bunch of attributes from clse, the latest price:
07:21:02   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
07:21:02  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
07:21:02  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
07:21:02  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
07:21:02  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
07:21:02  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
07:21:02  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
07:21:02  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
07:21:02  17  --
07:21:02  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
07:21:02  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
07:21:02  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
07:21:02  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
07:21:02  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
07:21:02  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
07:21:02  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
07:21:02  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
07:21:02  26  --
07:21:02  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
07:21:02  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
07:21:02  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
07:21:02  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
07:21:02  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
07:21:02  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
07:21:02  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
07:21:02  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
07:21:02  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
07:21:02  36  FROM di5min WHERE pair LIKE'%ajp%'
07:21:02  37  AND ydate > sysdate - 95
07:21:02  38  ORDER BY ydate
07:21:02  39  /

View created.

Elapsed: 00:00:00.04
07:21:03 SQL> 
07:21:03 SQL> -- rpt
07:21:03 SQL> 
07:21:03 SQL> SELECT
07:21:03   2  pair
07:21:03   3  ,COUNT(pair)
07:21:03   4  ,MIN(clse),MAX(clse)
07:21:03   5  ,MIN(avg6),MAX(avg6)
07:21:03   6  ,MIN(ydate),MAX(ydate)
07:21:03   7  FROM svm6102
07:21:03   8  GROUP BY pair
07:21:03   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ajp_usd       19803  78.249976 83.6669853 78.5106193  83.546306 2010-10-04 07:25:01 2011-01-07 07:15:00

Elapsed: 00:00:00.78
07:21:03 SQL> 
07:21:03 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
07:21:03 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.24
07:21:04 SQL> CREATE TABLE svm6122 COMPRESS AS
07:21:04   2  SELECT
07:21:04   3  pair
07:21:04   4  ,ydate
07:21:04   5  ,prdate
07:21:04   6  ,clse
07:21:04   7  -- g6 is important. I want to predict g6:
07:21:04   8  ,ld6 - clse g6
07:21:04   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
07:21:04  10  -- I want more attributes from the ones I derived above:
07:21:04  11  -- clse relation to moving-min
07:21:04  12  ,clse-min4  cm4
07:21:04  13  ,clse-min6  cm6
07:21:04  14  ,clse-min8  cm8
07:21:04  15  ,clse-min10 cm10
07:21:04  16  ,clse-min12 cm12
07:21:04  17  ,clse-min14 cm14
07:21:04  18  ,clse-min16 cm16
07:21:04  19  ,clse-min18 cm18
07:21:04  20  -- clse relation to moving-avg
07:21:04  21  ,clse-avg4  ca4
07:21:04  22  ,clse-avg6  ca6
07:21:04  23  ,clse-avg8  ca8
07:21:04  24  ,clse-avg10 ca10
07:21:04  25  ,clse-avg12 ca12
07:21:04  26  ,clse-avg14 ca14
07:21:04  27  ,clse-avg16 ca16
07:21:04  28  ,clse-avg18 ca18
07:21:04  29  -- clse relation to moving-max
07:21:04  30  ,clse-max4  cx4
07:21:04  31  ,clse-max6  cx6
07:21:04  32  ,clse-max8  cx8
07:21:04  33  ,clse-max10 cx10
07:21:04  34  ,clse-max12 cx12
07:21:04  35  ,clse-max14 cx14
07:21:04  36  ,clse-max16 cx16
07:21:04  37  ,clse-max18 cx18
07:21:04  38  -- Derive more attributes.
07:21:04  39  -- I want to use CORR() here to help SVM see the shape of the series.
07:21:04  40  -- But COVAR_POP is more stable:
07:21:04  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
07:21:04  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
07:21:04  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
07:21:04  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
07:21:04  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
07:21:04  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
07:21:04  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
07:21:04  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
07:21:04  49  -- Derive date related attributes:
07:21:04  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
07:21:04  51  ,0+TO_CHAR(ydate,'D')d
07:21:04  52  ,0+TO_CHAR(ydate,'W')w
07:21:04  53  -- mpm stands for minutes-past-midnight:
07:21:04  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
07:21:04  55  -- mph stands for minutes-past-hour:
07:21:04  56  ,0+TO_CHAR(ydate,'MI')mph
07:21:04  57  FROM svm6102
07:21:04  58  ORDER BY ydate
07:21:04  59  /

Table created.

Elapsed: 00:00:02.07
07:21:06 SQL> 
07:21:06 SQL> -- rpt
07:21:06 SQL> 
07:21:06 SQL> SELECT
07:21:06   2  pair
07:21:06   3  ,COUNT(pair)
07:21:06   4  ,MIN(clse),MAX(clse)
07:21:06   5  ,MIN(ydate),MAX(ydate)
07:21:06   6  FROM svm6122
07:21:06   7  GROUP BY pair
07:21:06   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ajp_usd       19803  78.249976 83.6669853 2010-10-04 07:25:01 2011-01-07 07:15:00

Elapsed: 00:00:00.04
07:21:06 SQL> 
07:21:06 SQL> -- Prepare for derivation of NTILE based params:
07:21:06 SQL> 
07:21:06 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.28
07:21:06 SQL> CREATE TABLE svm6142 COMPRESS AS
07:21:06   2  SELECT
07:21:06   3  pair
07:21:06   4  ,ydate
07:21:06   5  ,prdate
07:21:06   6  ,clse
07:21:06   7  ,g6
07:21:06   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
07:21:06   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
07:21:06  10  ,CASE WHEN trend IS NULL THEN 1
07:21:06  11  	    WHEN trend =0      THEN 1
07:21:06  12  	    ELSE trend END trend
07:21:06  13  ,cm4
07:21:06  14  ,cm6
07:21:06  15  ,cm8
07:21:06  16  ,cm10
07:21:06  17  ,cm12
07:21:06  18  ,cm14
07:21:06  19  ,cm16
07:21:06  20  ,cm18
07:21:06  21  --
07:21:06  22  ,ca4
07:21:06  23  ,ca6
07:21:06  24  ,ca8
07:21:06  25  ,ca10
07:21:06  26  ,ca12
07:21:06  27  ,ca14
07:21:06  28  ,ca16
07:21:06  29  ,ca18
07:21:06  30  --
07:21:06  31  ,cx4
07:21:06  32  ,cx6
07:21:06  33  ,cx8
07:21:06  34  ,cx10
07:21:06  35  ,cx12
07:21:06  36  ,cx14
07:21:06  37  ,cx16
07:21:06  38  ,cx18
07:21:06  39  --
07:21:06  40  ,crr4
07:21:06  41  ,crr6
07:21:06  42  ,crr8
07:21:06  43  ,crr10
07:21:06  44  ,crr12
07:21:06  45  ,crr14
07:21:06  46  ,crr16
07:21:06  47  ,crr18
07:21:06  48  --
07:21:06  49  ,hh
07:21:06  50  ,d
07:21:06  51  ,w
07:21:06  52  ,mpm
07:21:06  53  ,mph
07:21:06  54  FROM svm6122
07:21:06  55  ORDER BY ydate
07:21:06  56  /

Table created.

Elapsed: 00:00:00.37
07:21:06 SQL> 
07:21:06 SQL> -- rpt
07:21:06 SQL> 
07:21:06 SQL> SELECT
07:21:06   2  pair
07:21:06   3  ,trend
07:21:06   4  ,gatt
07:21:06   5  ,COUNT(pair)
07:21:06   6  ,AVG(g6)
07:21:06   7  FROM svm6142
07:21:06   8  GROUP BY pair,trend,gatt
07:21:06   9  ORDER BY pair,trend,gatt
07:21:06  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ajp_usd 	-1 nup	      4348   -.223804
ajp_usd 	-1 up	      5234 .223397003
ajp_usd 	-1		38
ajp_usd 	 1 nup	      5312 -.19939353
ajp_usd 	 1 up	      4837 .212071399
ajp_usd 	 1		34

6 rows selected.

Elapsed: 00:00:00.04
07:21:06 SQL> 
07:21:06 SQL> 
07:21:06 SQL> -- Derive NTILE based params:
07:21:06 SQL> 
07:21:06 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.16
07:21:07 SQL> CREATE TABLE svm6162 COMPRESS AS
07:21:07   2  SELECT
07:21:07   3  pair
07:21:07   4  ,ydate
07:21:07   5  ,prdate
07:21:07   6  ,clse
07:21:07   7  ,g6
07:21:07   8  ,gatt
07:21:07   9  ,gattn
07:21:07  10  ,trend
07:21:07  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
07:21:07  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
07:21:07  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
07:21:07  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
07:21:07  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
07:21:07  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
07:21:07  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
07:21:07  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
07:21:07  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
07:21:07  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
07:21:07  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
07:21:07  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
07:21:07  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
07:21:07  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
07:21:07  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
07:21:07  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
07:21:07  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
07:21:07  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
07:21:07  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
07:21:07  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
07:21:07  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
07:21:07  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
07:21:07  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
07:21:07  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
07:21:07  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
07:21:07  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
07:21:07  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
07:21:07  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
07:21:07  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
07:21:07  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
07:21:07  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
07:21:07  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
07:21:07  43  ,hh  att32
07:21:07  44  ,d   att33
07:21:07  45  ,w   att34
07:21:07  46  ,mpm att35
07:21:07  47  ,mph att36
07:21:07  48  ,trend att37
07:21:07  49  FROM svm6142
07:21:07  50  ORDER BY ydate
07:21:07  51  /

Table created.

Elapsed: 00:00:05.45
07:21:12 SQL> 
07:21:12 SQL> -- rpt
07:21:12 SQL> 
07:21:12 SQL> SELECT
07:21:12   2  pair
07:21:12   3  ,trend
07:21:12   4  ,gatt
07:21:12   5  ,COUNT(pair)
07:21:12   6  ,AVG(g6)
07:21:12   7  FROM svm6162
07:21:12   8  GROUP BY pair,trend,gatt
07:21:12   9  ORDER BY pair,trend,gatt
07:21:12  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ajp_usd 	-1 nup	      4348   -.223804
ajp_usd 	-1 up	      5234 .223397003
ajp_usd 	-1		38
ajp_usd 	 1 nup	      5312 -.19939353
ajp_usd 	 1 up	      4837 .212071399
ajp_usd 	 1		34

6 rows selected.

Elapsed: 00:00:00.04
07:21:12 SQL> 
07:21:12 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.25
07:21:12 SQL> CREATE TABLE modsrc COMPRESS AS
07:21:12   2  SELECT
07:21:12   3  pair
07:21:12   4  ,ydate
07:21:12   5  ,prdate
07:21:12   6  ,trend
07:21:12   7  ,g6
07:21:12   8  ,gatt
07:21:12   9  ,gattn
07:21:12  10  FROM svm6162
07:21:12  11  /

Table created.

Elapsed: 00:00:00.09
07:21:12 SQL> 
07:21:12 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.23
07:21:13 SQL> 
07:21:13 SQL> DROP   TABLE ajp_ms610 ;

Table dropped.

Elapsed: 00:00:00.06
07:21:13 SQL> CREATE TABLE ajp_ms610 COMPRESS AS
07:21:13   2  SELECT
07:21:13   3  ydate
07:21:13   4  ,trend ajp_trend
07:21:13   5  ,g6    ajp_g6
07:21:13   6  ,gatt  ajp_gatt
07:21:13   7  ,gattn ajp_gattn
07:21:13   8  FROM modsrc
07:21:13   9  /

Table created.

Elapsed: 00:00:00.09
07:21:13 SQL> 
07:21:13 SQL> ANALYZE TABLE ajp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
07:21:13 SQL> 
07:21:13 SQL> -- I need a copy of the attributes:
07:21:13 SQL> 
07:21:13 SQL> 
07:21:13 SQL> DROP   TABLE ajp_att;

Table dropped.

Elapsed: 00:00:00.08
07:21:13 SQL> CREATE TABLE ajp_att COMPRESS AS
07:21:13   2  SELECT
07:21:13   3  ydate
07:21:13   4  ,att00 ajp_att00
07:21:13   5  ,att01 ajp_att01
07:21:13   6  ,att02 ajp_att02
07:21:13   7  ,att03 ajp_att03
07:21:13   8  ,att04 ajp_att04
07:21:13   9  ,att05 ajp_att05
07:21:13  10  ,att06 ajp_att06
07:21:13  11  ,att07 ajp_att07
07:21:13  12  ,att08 ajp_att08
07:21:13  13  ,att09 ajp_att09
07:21:13  14  ,att10 ajp_att10
07:21:13  15  ,att11 ajp_att11
07:21:13  16  ,att12 ajp_att12
07:21:13  17  ,att13 ajp_att13
07:21:13  18  ,att14 ajp_att14
07:21:13  19  ,att15 ajp_att15
07:21:13  20  ,att16 ajp_att16
07:21:13  21  ,att17 ajp_att17
07:21:13  22  ,att18 ajp_att18
07:21:13  23  ,att19 ajp_att19
07:21:13  24  ,att20 ajp_att20
07:21:13  25  ,att21 ajp_att21
07:21:13  26  ,att22 ajp_att22
07:21:13  27  ,att23 ajp_att23
07:21:13  28  ,att24 ajp_att24
07:21:13  29  ,att25 ajp_att25
07:21:13  30  ,att26 ajp_att26
07:21:13  31  ,att27 ajp_att27
07:21:13  32  ,att28 ajp_att28
07:21:13  33  ,att29 ajp_att29
07:21:13  34  ,att30 ajp_att30
07:21:13  35  ,att31 ajp_att31
07:21:13  36  ,att32 ajp_att32
07:21:13  37  ,att33 ajp_att33
07:21:13  38  ,att34 ajp_att34
07:21:13  39  ,att35 ajp_att35
07:21:13  40  ,att36 ajp_att36
07:21:13  41  ,att37 ajp_att37
07:21:13  42  FROM svm6162
07:21:13  43  /

Table created.

Elapsed: 00:00:00.23
07:21:13 SQL> 
07:21:13 SQL> ANALYZE TABLE ajp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
07:21:14 SQL> 
07:21:14 SQL> -- rpt
07:21:14 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19803

Elapsed: 00:00:00.78
07:21:14 SQL> SELECT COUNT(*)FROM ajp_att;

  COUNT(*)
----------
     19803

Elapsed: 00:00:00.00
07:21:14 SQL> 
07:21:14 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
