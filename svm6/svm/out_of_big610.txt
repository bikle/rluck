
SQL*Plus: Release 11.2.0.1.0 Production on Thu Dec 30 05:16:34 2010

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

05:16:34 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
05:16:34 SQL> 05:16:34 SQL> --
05:16:34 SQL> -- eur610.sql
05:16:34 SQL> --
05:16:34 SQL> 
05:16:34 SQL> -- Creates views and tables for backtesting a forex SVM strategy
05:16:34 SQL> 
05:16:34 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.01
05:16:34 SQL> 
05:16:34 SQL> -- I created di5min here:
05:16:34 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
05:16:34 SQL> 
05:16:34 SQL> CREATE OR REPLACE VIEW svm6102 AS
05:16:34   2  SELECT
05:16:34   3  pair
05:16:34   4  ,ydate
05:16:34   5  ,prdate
05:16:34   6  ,rownum rnum -- acts as t in my time-series
05:16:34   7  ,clse
05:16:34   8  -- Derive a bunch of attributes from clse, the latest price:
05:16:34   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
05:16:34  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
05:16:34  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
05:16:34  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
05:16:34  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
05:16:34  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
05:16:34  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
05:16:34  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
05:16:34  17  --
05:16:34  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
05:16:34  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
05:16:34  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
05:16:34  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
05:16:34  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
05:16:34  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
05:16:34  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
05:16:34  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
05:16:34  26  --
05:16:34  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
05:16:34  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
05:16:34  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
05:16:34  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
05:16:34  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
05:16:34  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
05:16:34  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
05:16:34  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
05:16:34  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
05:16:34  36  FROM di5min WHERE pair LIKE'%eur%'
05:16:34  37  AND ydate > sysdate - 95
05:16:34  38  ORDER BY ydate
05:16:34  39  /

View created.

Elapsed: 00:00:00.06
05:16:34 SQL> 
05:16:34 SQL> -- rpt
05:16:34 SQL> 
05:16:34 SQL> SELECT
05:16:34   2  pair
05:16:34   3  ,COUNT(pair)
05:16:34   4  ,MIN(clse),MAX(clse)
05:16:34   5  ,MIN(avg6),MAX(avg6)
05:16:34   6  ,MIN(ydate),MAX(ydate)
05:16:34   7  FROM svm6102
05:16:34   8  GROUP BY pair
05:16:34   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_usd       19654    1.29735	   1.4273 1.29875103 1.42436233 2010-09-26 20:55:01 2010-12-30 05:10:00

Elapsed: 00:00:00.92
05:16:35 SQL> 
05:16:35 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
05:16:35 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.05
05:16:35 SQL> CREATE TABLE svm6122 COMPRESS AS
05:16:35   2  SELECT
05:16:35   3  pair
05:16:35   4  ,ydate
05:16:35   5  ,prdate
05:16:35   6  ,clse
05:16:35   7  -- g6 is important. I want to predict g6:
05:16:35   8  ,ld6 - clse g6
05:16:35   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
05:16:35  10  -- I want more attributes from the ones I derived above:
05:16:35  11  -- clse relation to moving-min
05:16:35  12  ,clse-min4  cm4
05:16:35  13  ,clse-min6  cm6
05:16:35  14  ,clse-min8  cm8
05:16:35  15  ,clse-min10 cm10
05:16:35  16  ,clse-min12 cm12
05:16:35  17  ,clse-min14 cm14
05:16:35  18  ,clse-min16 cm16
05:16:35  19  ,clse-min18 cm18
05:16:35  20  -- clse relation to moving-avg
05:16:35  21  ,clse-avg4  ca4
05:16:35  22  ,clse-avg6  ca6
05:16:35  23  ,clse-avg8  ca8
05:16:35  24  ,clse-avg10 ca10
05:16:35  25  ,clse-avg12 ca12
05:16:35  26  ,clse-avg14 ca14
05:16:35  27  ,clse-avg16 ca16
05:16:35  28  ,clse-avg18 ca18
05:16:35  29  -- clse relation to moving-max
05:16:35  30  ,clse-max4  cx4
05:16:35  31  ,clse-max6  cx6
05:16:35  32  ,clse-max8  cx8
05:16:35  33  ,clse-max10 cx10
05:16:35  34  ,clse-max12 cx12
05:16:35  35  ,clse-max14 cx14
05:16:35  36  ,clse-max16 cx16
05:16:35  37  ,clse-max18 cx18
05:16:35  38  -- Derive more attributes.
05:16:35  39  -- I want to use CORR() here to help SVM see the shape of the series.
05:16:35  40  -- But COVAR_POP is more stable:
05:16:35  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
05:16:35  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
05:16:35  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
05:16:35  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
05:16:35  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
05:16:35  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
05:16:35  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
05:16:35  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
05:16:35  49  -- Derive date related attributes:
05:16:35  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
05:16:35  51  ,0+TO_CHAR(ydate,'D')d
05:16:35  52  ,0+TO_CHAR(ydate,'W')w
05:16:35  53  -- mpm stands for minutes-past-midnight:
05:16:35  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
05:16:35  55  -- mph stands for minutes-past-hour:
05:16:35  56  ,0+TO_CHAR(ydate,'MI')mph
05:16:35  57  FROM svm6102
05:16:35  58  ORDER BY ydate
05:16:35  59  /

Table created.

Elapsed: 00:00:02.48
05:16:37 SQL> 
05:16:37 SQL> -- rpt
05:16:37 SQL> 
05:16:37 SQL> SELECT
05:16:37   2  pair
05:16:37   3  ,COUNT(pair)
05:16:37   4  ,MIN(clse),MAX(clse)
05:16:37   5  ,MIN(ydate),MAX(ydate)
05:16:37   6  FROM svm6122
05:16:37   7  GROUP BY pair
05:16:37   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_usd       19654    1.29735	   1.4273 2010-09-26 20:55:01 2010-12-30 05:10:00

Elapsed: 00:00:00.04
05:16:37 SQL> 
05:16:37 SQL> -- Prepare for derivation of NTILE based params:
05:16:37 SQL> 
05:16:37 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.17
05:16:37 SQL> CREATE TABLE svm6142 COMPRESS AS
05:16:37   2  SELECT
05:16:37   3  pair
05:16:37   4  ,ydate
05:16:37   5  ,prdate
05:16:37   6  ,clse
05:16:37   7  ,g6
05:16:37   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
05:16:37   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
05:16:37  10  ,CASE WHEN trend IS NULL THEN 1
05:16:37  11  	    WHEN trend =0      THEN 1
05:16:37  12  	    ELSE trend END trend
05:16:37  13  ,cm4
05:16:37  14  ,cm6
05:16:37  15  ,cm8
05:16:37  16  ,cm10
05:16:37  17  ,cm12
05:16:37  18  ,cm14
05:16:37  19  ,cm16
05:16:37  20  ,cm18
05:16:37  21  --
05:16:37  22  ,ca4
05:16:37  23  ,ca6
05:16:37  24  ,ca8
05:16:37  25  ,ca10
05:16:37  26  ,ca12
05:16:37  27  ,ca14
05:16:37  28  ,ca16
05:16:37  29  ,ca18
05:16:37  30  --
05:16:37  31  ,cx4
05:16:37  32  ,cx6
05:16:37  33  ,cx8
05:16:37  34  ,cx10
05:16:37  35  ,cx12
05:16:37  36  ,cx14
05:16:37  37  ,cx16
05:16:37  38  ,cx18
05:16:37  39  --
05:16:37  40  ,crr4
05:16:37  41  ,crr6
05:16:37  42  ,crr8
05:16:37  43  ,crr10
05:16:37  44  ,crr12
05:16:37  45  ,crr14
05:16:37  46  ,crr16
05:16:37  47  ,crr18
05:16:37  48  --
05:16:37  49  ,hh
05:16:37  50  ,d
05:16:37  51  ,w
05:16:37  52  ,mpm
05:16:37  53  ,mph
05:16:37  54  FROM svm6122
05:16:37  55  ORDER BY ydate
05:16:37  56  /

Table created.

Elapsed: 00:00:00.39
05:16:38 SQL> 
05:16:38 SQL> -- rpt
05:16:38 SQL> 
05:16:38 SQL> SELECT
05:16:38   2  pair
05:16:38   3  ,trend
05:16:38   4  ,gatt
05:16:38   5  ,COUNT(pair)
05:16:38   6  ,AVG(g6)
05:16:38   7  FROM svm6142
05:16:38   8  GROUP BY pair,trend,gatt
05:16:38   9  ORDER BY pair,trend,gatt
05:16:38  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6136  -.0030778
eur_usd 	-1 up	      3726 .004494689
eur_usd 	-1		 8
eur_usd 	 1 nup	      5988  -.0031289
eur_usd 	 1 up	      3732 .005131227
eur_usd 	 1		64

6 rows selected.

Elapsed: 00:00:00.04
05:16:38 SQL> 
05:16:38 SQL> 
05:16:38 SQL> -- Derive NTILE based params:
05:16:38 SQL> 
05:16:38 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:01.13
05:16:39 SQL> CREATE TABLE svm6162 COMPRESS AS
05:16:39   2  SELECT
05:16:39   3  pair
05:16:39   4  ,ydate
05:16:39   5  ,prdate
05:16:39   6  ,clse
05:16:39   7  ,g6
05:16:39   8  ,gatt
05:16:39   9  ,gattn
05:16:39  10  ,trend
05:16:39  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
05:16:39  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
05:16:39  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
05:16:39  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
05:16:39  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
05:16:39  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
05:16:39  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
05:16:39  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
05:16:39  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
05:16:39  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
05:16:39  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
05:16:39  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
05:16:39  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
05:16:39  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
05:16:39  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
05:16:39  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
05:16:39  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
05:16:39  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
05:16:39  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
05:16:39  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
05:16:39  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
05:16:39  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
05:16:39  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
05:16:39  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
05:16:39  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
05:16:39  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
05:16:39  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
05:16:39  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
05:16:39  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
05:16:39  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
05:16:39  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
05:16:39  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
05:16:39  43  ,hh  att32
05:16:39  44  ,d   att33
05:16:39  45  ,w   att34
05:16:39  46  ,mpm att35
05:16:39  47  ,mph att36
05:16:39  48  ,trend att37
05:16:39  49  FROM svm6142
05:16:39  50  ORDER BY ydate
05:16:39  51  /

Table created.

Elapsed: 00:00:04.84
05:16:44 SQL> 
05:16:44 SQL> -- rpt
05:16:44 SQL> 
05:16:44 SQL> SELECT
05:16:44   2  pair
05:16:44   3  ,trend
05:16:44   4  ,gatt
05:16:44   5  ,COUNT(pair)
05:16:44   6  ,AVG(g6)
05:16:44   7  FROM svm6162
05:16:44   8  GROUP BY pair,trend,gatt
05:16:44   9  ORDER BY pair,trend,gatt
05:16:44  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6136  -.0030778
eur_usd 	-1 up	      3726 .004494689
eur_usd 	-1		 8
eur_usd 	 1 nup	      5988  -.0031289
eur_usd 	 1 up	      3732 .005131227
eur_usd 	 1		64

6 rows selected.

Elapsed: 00:00:00.03
05:16:44 SQL> 
05:16:44 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.17
05:16:44 SQL> CREATE TABLE modsrc COMPRESS AS
05:16:44   2  SELECT
05:16:44   3  pair
05:16:44   4  ,ydate
05:16:44   5  ,prdate
05:16:44   6  ,trend
05:16:44   7  ,g6
05:16:44   8  ,gatt
05:16:44   9  ,gattn
05:16:44  10  FROM svm6162
05:16:44  11  /

Table created.

Elapsed: 00:00:00.09
05:16:44 SQL> 
05:16:44 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.26
05:16:44 SQL> 
05:16:44 SQL> DROP   TABLE eur_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
05:16:44 SQL> CREATE TABLE eur_ms610 COMPRESS AS
05:16:44   2  SELECT
05:16:44   3  ydate
05:16:44   4  ,trend eur_trend
05:16:44   5  ,g6    eur_g6
05:16:44   6  ,gatt  eur_gatt
05:16:44   7  ,gattn eur_gattn
05:16:44   8  FROM modsrc
05:16:44   9  /

Table created.

Elapsed: 00:00:00.07
05:16:45 SQL> 
05:16:45 SQL> ANALYZE TABLE eur_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.14
05:16:45 SQL> 
05:16:45 SQL> -- I need a copy of the attributes:
05:16:45 SQL> 
05:16:45 SQL> 
05:16:45 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.04
05:16:45 SQL> CREATE TABLE eur_att COMPRESS AS
05:16:45   2  SELECT
05:16:45   3  ydate
05:16:45   4  ,att00 eur_att00
05:16:45   5  ,att01 eur_att01
05:16:45   6  ,att02 eur_att02
05:16:45   7  ,att03 eur_att03
05:16:45   8  ,att04 eur_att04
05:16:45   9  ,att05 eur_att05
05:16:45  10  ,att06 eur_att06
05:16:45  11  ,att07 eur_att07
05:16:45  12  ,att08 eur_att08
05:16:45  13  ,att09 eur_att09
05:16:45  14  ,att10 eur_att10
05:16:45  15  ,att11 eur_att11
05:16:45  16  ,att12 eur_att12
05:16:45  17  ,att13 eur_att13
05:16:45  18  ,att14 eur_att14
05:16:45  19  ,att15 eur_att15
05:16:45  20  ,att16 eur_att16
05:16:45  21  ,att17 eur_att17
05:16:45  22  ,att18 eur_att18
05:16:45  23  ,att19 eur_att19
05:16:45  24  ,att20 eur_att20
05:16:45  25  ,att21 eur_att21
05:16:45  26  ,att22 eur_att22
05:16:45  27  ,att23 eur_att23
05:16:45  28  ,att24 eur_att24
05:16:45  29  ,att25 eur_att25
05:16:45  30  ,att26 eur_att26
05:16:45  31  ,att27 eur_att27
05:16:45  32  ,att28 eur_att28
05:16:45  33  ,att29 eur_att29
05:16:45  34  ,att30 eur_att30
05:16:45  35  ,att31 eur_att31
05:16:45  36  ,att32 eur_att32
05:16:45  37  ,att33 eur_att33
05:16:45  38  ,att34 eur_att34
05:16:45  39  ,att35 eur_att35
05:16:45  40  ,att36 eur_att36
05:16:45  41  ,att37 eur_att37
05:16:45  42  FROM svm6162
05:16:45  43  /

Table created.

Elapsed: 00:00:00.16
05:16:45 SQL> 
05:16:45 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
05:16:45 SQL> 
05:16:45 SQL> -- rpt
05:16:45 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19654

Elapsed: 00:00:00.90
05:16:46 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     19654

Elapsed: 00:00:00.00
05:16:46 SQL> 
05:16:46 SQL> --
05:16:46 SQL> -- aud610.sql
05:16:46 SQL> --
05:16:46 SQL> 
05:16:46 SQL> -- Creates views and tables for backtesting a forex SVM strategy
05:16:46 SQL> 
05:16:46 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.38
05:16:47 SQL> 
05:16:47 SQL> -- I created di5min here:
05:16:47 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
05:16:47 SQL> 
05:16:47 SQL> CREATE OR REPLACE VIEW svm6102 AS
05:16:47   2  SELECT
05:16:47   3  pair
05:16:47   4  ,ydate
05:16:47   5  ,prdate
05:16:47   6  ,rownum rnum -- acts as t in my time-series
05:16:47   7  ,clse
05:16:47   8  -- Derive a bunch of attributes from clse, the latest price:
05:16:47   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
05:16:47  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
05:16:47  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
05:16:47  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
05:16:47  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
05:16:47  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
05:16:47  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
05:16:47  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
05:16:47  17  --
05:16:47  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
05:16:47  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
05:16:47  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
05:16:47  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
05:16:47  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
05:16:47  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
05:16:47  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
05:16:47  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
05:16:47  26  --
05:16:47  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
05:16:47  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
05:16:47  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
05:16:47  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
05:16:47  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
05:16:47  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
05:16:47  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
05:16:47  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
05:16:47  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
05:16:47  36  FROM di5min WHERE pair LIKE'%aud%'
05:16:47  37  AND ydate > sysdate - 95
05:16:47  38  ORDER BY ydate
05:16:47  39  /

View created.

Elapsed: 00:00:00.06
05:16:47 SQL> 
05:16:47 SQL> -- rpt
05:16:47 SQL> 
05:16:47 SQL> SELECT
05:16:47   2  pair
05:16:47   3  ,COUNT(pair)
05:16:47   4  ,MIN(clse),MAX(clse)
05:16:47   5  ,MIN(avg6),MAX(avg6)
05:16:47   6  ,MIN(ydate),MAX(ydate)
05:16:47   7  FROM svm6102
05:16:47   8  GROUP BY pair
05:16:47   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
aud_usd       19651	.95405	1.0195625 .957141438 1.01819366 2010-09-26 20:55:01 2010-12-30 05:10:00

Elapsed: 00:00:00.87
05:16:48 SQL> 
05:16:48 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
05:16:48 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.19
05:16:48 SQL> CREATE TABLE svm6122 COMPRESS AS
05:16:48   2  SELECT
05:16:48   3  pair
05:16:48   4  ,ydate
05:16:48   5  ,prdate
05:16:48   6  ,clse
05:16:48   7  -- g6 is important. I want to predict g6:
05:16:48   8  ,ld6 - clse g6
05:16:48   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
05:16:48  10  -- I want more attributes from the ones I derived above:
05:16:48  11  -- clse relation to moving-min
05:16:48  12  ,clse-min4  cm4
05:16:48  13  ,clse-min6  cm6
05:16:48  14  ,clse-min8  cm8
05:16:48  15  ,clse-min10 cm10
05:16:48  16  ,clse-min12 cm12
05:16:48  17  ,clse-min14 cm14
05:16:48  18  ,clse-min16 cm16
05:16:48  19  ,clse-min18 cm18
05:16:48  20  -- clse relation to moving-avg
05:16:48  21  ,clse-avg4  ca4
05:16:48  22  ,clse-avg6  ca6
05:16:48  23  ,clse-avg8  ca8
05:16:48  24  ,clse-avg10 ca10
05:16:48  25  ,clse-avg12 ca12
05:16:48  26  ,clse-avg14 ca14
05:16:48  27  ,clse-avg16 ca16
05:16:48  28  ,clse-avg18 ca18
05:16:48  29  -- clse relation to moving-max
05:16:48  30  ,clse-max4  cx4
05:16:48  31  ,clse-max6  cx6
05:16:48  32  ,clse-max8  cx8
05:16:48  33  ,clse-max10 cx10
05:16:48  34  ,clse-max12 cx12
05:16:48  35  ,clse-max14 cx14
05:16:48  36  ,clse-max16 cx16
05:16:48  37  ,clse-max18 cx18
05:16:48  38  -- Derive more attributes.
05:16:48  39  -- I want to use CORR() here to help SVM see the shape of the series.
05:16:48  40  -- But COVAR_POP is more stable:
05:16:48  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
05:16:48  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
05:16:48  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
05:16:48  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
05:16:48  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
05:16:48  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
05:16:48  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
05:16:48  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
05:16:48  49  -- Derive date related attributes:
05:16:48  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
05:16:48  51  ,0+TO_CHAR(ydate,'D')d
05:16:48  52  ,0+TO_CHAR(ydate,'W')w
05:16:48  53  -- mpm stands for minutes-past-midnight:
05:16:48  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
05:16:48  55  -- mph stands for minutes-past-hour:
05:16:48  56  ,0+TO_CHAR(ydate,'MI')mph
05:16:48  57  FROM svm6102
05:16:48  58  ORDER BY ydate
05:16:48  59  /

Table created.

Elapsed: 00:00:02.04
05:16:50 SQL> 
05:16:50 SQL> -- rpt
05:16:50 SQL> 
05:16:50 SQL> SELECT
05:16:50   2  pair
05:16:50   3  ,COUNT(pair)
05:16:50   4  ,MIN(clse),MAX(clse)
05:16:50   5  ,MIN(ydate),MAX(ydate)
05:16:50   6  FROM svm6122
05:16:50   7  GROUP BY pair
05:16:50   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
aud_usd       19651	.95405	1.0195625 2010-09-26 20:55:01 2010-12-30 05:10:00

Elapsed: 00:00:00.04
05:16:50 SQL> 
05:16:50 SQL> -- Prepare for derivation of NTILE based params:
05:16:50 SQL> 
05:16:50 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.19
05:16:50 SQL> CREATE TABLE svm6142 COMPRESS AS
05:16:50   2  SELECT
05:16:50   3  pair
05:16:50   4  ,ydate
05:16:50   5  ,prdate
05:16:50   6  ,clse
05:16:50   7  ,g6
05:16:50   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
05:16:50   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
05:16:50  10  ,CASE WHEN trend IS NULL THEN 1
05:16:50  11  	    WHEN trend =0      THEN 1
05:16:50  12  	    ELSE trend END trend
05:16:50  13  ,cm4
05:16:50  14  ,cm6
05:16:50  15  ,cm8
05:16:50  16  ,cm10
05:16:50  17  ,cm12
05:16:50  18  ,cm14
05:16:50  19  ,cm16
05:16:50  20  ,cm18
05:16:50  21  --
05:16:50  22  ,ca4
05:16:50  23  ,ca6
05:16:50  24  ,ca8
05:16:50  25  ,ca10
05:16:50  26  ,ca12
05:16:50  27  ,ca14
05:16:50  28  ,ca16
05:16:50  29  ,ca18
05:16:50  30  --
05:16:50  31  ,cx4
05:16:50  32  ,cx6
05:16:50  33  ,cx8
05:16:50  34  ,cx10
05:16:50  35  ,cx12
05:16:50  36  ,cx14
05:16:50  37  ,cx16
05:16:50  38  ,cx18
05:16:50  39  --
05:16:50  40  ,crr4
05:16:50  41  ,crr6
05:16:50  42  ,crr8
05:16:50  43  ,crr10
05:16:50  44  ,crr12
05:16:50  45  ,crr14
05:16:50  46  ,crr16
05:16:50  47  ,crr18
05:16:50  48  --
05:16:50  49  ,hh
05:16:50  50  ,d
05:16:50  51  ,w
05:16:50  52  ,mpm
05:16:50  53  ,mph
05:16:50  54  FROM svm6122
05:16:50  55  ORDER BY ydate
05:16:50  56  /

Table created.

Elapsed: 00:00:00.37
05:16:50 SQL> 
05:16:50 SQL> -- rpt
05:16:50 SQL> 
05:16:50 SQL> SELECT
05:16:50   2  pair
05:16:50   3  ,trend
05:16:50   4  ,gatt
05:16:50   5  ,COUNT(pair)
05:16:50   6  ,AVG(g6)
05:16:50   7  FROM svm6142
05:16:50   8  GROUP BY pair,trend,gatt
05:16:50   9  ORDER BY pair,trend,gatt
05:16:50  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5198 -.00212209
aud_usd 	-1 up	      3818 .003727577
aud_usd 	-1		32
aud_usd 	 1 nup	      6772 -.00210676
aud_usd 	 1 up	      3791 .004024199
aud_usd 	 1		40

6 rows selected.

Elapsed: 00:00:00.08
05:16:50 SQL> 
05:16:50 SQL> 
05:16:50 SQL> -- Derive NTILE based params:
05:16:50 SQL> 
05:16:50 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.12
05:16:51 SQL> CREATE TABLE svm6162 COMPRESS AS
05:16:51   2  SELECT
05:16:51   3  pair
05:16:51   4  ,ydate
05:16:51   5  ,prdate
05:16:51   6  ,clse
05:16:51   7  ,g6
05:16:51   8  ,gatt
05:16:51   9  ,gattn
05:16:51  10  ,trend
05:16:51  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
05:16:51  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
05:16:51  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
05:16:51  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
05:16:51  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
05:16:51  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
05:16:51  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
05:16:51  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
05:16:51  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
05:16:51  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
05:16:51  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
05:16:51  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
05:16:51  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
05:16:51  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
05:16:51  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
05:16:51  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
05:16:51  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
05:16:51  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
05:16:51  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
05:16:51  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
05:16:51  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
05:16:51  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
05:16:51  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
05:16:51  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
05:16:51  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
05:16:51  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
05:16:51  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
05:16:51  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
05:16:51  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
05:16:51  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
05:16:51  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
05:16:51  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
05:16:51  43  ,hh  att32
05:16:51  44  ,d   att33
05:16:51  45  ,w   att34
05:16:51  46  ,mpm att35
05:16:51  47  ,mph att36
05:16:51  48  ,trend att37
05:16:51  49  FROM svm6142
05:16:51  50  ORDER BY ydate
05:16:51  51  /

Table created.

Elapsed: 00:00:04.78
05:16:55 SQL> 
05:16:55 SQL> -- rpt
05:16:55 SQL> 
05:16:55 SQL> SELECT
05:16:55   2  pair
05:16:55   3  ,trend
05:16:55   4  ,gatt
05:16:55   5  ,COUNT(pair)
05:16:55   6  ,AVG(g6)
05:16:55   7  FROM svm6162
05:16:55   8  GROUP BY pair,trend,gatt
05:16:55   9  ORDER BY pair,trend,gatt
05:16:55  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5198 -.00212209
aud_usd 	-1 up	      3818 .003727577
aud_usd 	-1		32
aud_usd 	 1 nup	      6772 -.00210676
aud_usd 	 1 up	      3791 .004024199
aud_usd 	 1		40

6 rows selected.

Elapsed: 00:00:00.03
05:16:55 SQL> 
05:16:55 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.15
05:16:56 SQL> CREATE TABLE modsrc COMPRESS AS
05:16:56   2  SELECT
05:16:56   3  pair
05:16:56   4  ,ydate
05:16:56   5  ,prdate
05:16:56   6  ,trend
05:16:56   7  ,g6
05:16:56   8  ,gatt
05:16:56   9  ,gattn
05:16:56  10  FROM svm6162
05:16:56  11  /

Table created.

Elapsed: 00:00:00.08
05:16:56 SQL> 
05:16:56 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
05:16:56 SQL> 
05:16:56 SQL> DROP   TABLE aud_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
05:16:56 SQL> CREATE TABLE aud_ms610 COMPRESS AS
05:16:56   2  SELECT
05:16:56   3  ydate
05:16:56   4  ,trend aud_trend
05:16:56   5  ,g6    aud_g6
05:16:56   6  ,gatt  aud_gatt
05:16:56   7  ,gattn aud_gattn
05:16:56   8  FROM modsrc
05:16:56   9  /

Table created.

Elapsed: 00:00:00.06
05:16:56 SQL> 
05:16:56 SQL> ANALYZE TABLE aud_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
05:16:56 SQL> 
05:16:56 SQL> -- I need a copy of the attributes:
05:16:56 SQL> 
05:16:56 SQL> 
05:16:56 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.05
05:16:56 SQL> CREATE TABLE aud_att COMPRESS AS
05:16:56   2  SELECT
05:16:56   3  ydate
05:16:56   4  ,att00 aud_att00
05:16:56   5  ,att01 aud_att01
05:16:56   6  ,att02 aud_att02
05:16:56   7  ,att03 aud_att03
05:16:56   8  ,att04 aud_att04
05:16:56   9  ,att05 aud_att05
05:16:56  10  ,att06 aud_att06
05:16:56  11  ,att07 aud_att07
05:16:56  12  ,att08 aud_att08
05:16:56  13  ,att09 aud_att09
05:16:56  14  ,att10 aud_att10
05:16:56  15  ,att11 aud_att11
05:16:56  16  ,att12 aud_att12
05:16:56  17  ,att13 aud_att13
05:16:56  18  ,att14 aud_att14
05:16:56  19  ,att15 aud_att15
05:16:56  20  ,att16 aud_att16
05:16:56  21  ,att17 aud_att17
05:16:56  22  ,att18 aud_att18
05:16:56  23  ,att19 aud_att19
05:16:56  24  ,att20 aud_att20
05:16:56  25  ,att21 aud_att21
05:16:56  26  ,att22 aud_att22
05:16:56  27  ,att23 aud_att23
05:16:56  28  ,att24 aud_att24
05:16:56  29  ,att25 aud_att25
05:16:56  30  ,att26 aud_att26
05:16:56  31  ,att27 aud_att27
05:16:56  32  ,att28 aud_att28
05:16:56  33  ,att29 aud_att29
05:16:56  34  ,att30 aud_att30
05:16:56  35  ,att31 aud_att31
05:16:56  36  ,att32 aud_att32
05:16:56  37  ,att33 aud_att33
05:16:56  38  ,att34 aud_att34
05:16:56  39  ,att35 aud_att35
05:16:56  40  ,att36 aud_att36
05:16:56  41  ,att37 aud_att37
05:16:56  42  FROM svm6162
05:16:56  43  /

Table created.

Elapsed: 00:00:00.18
05:16:56 SQL> 
05:16:56 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.44
05:16:57 SQL> 
05:16:57 SQL> -- rpt
05:16:57 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19651

Elapsed: 00:00:00.85
05:16:58 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     19651

Elapsed: 00:00:00.00
05:16:58 SQL> 
05:16:58 SQL> --
05:16:58 SQL> -- gbp610.sql
05:16:58 SQL> --
05:16:58 SQL> 
05:16:58 SQL> -- Creates views and tables for backtesting a forex SVM strategy
05:16:58 SQL> 
05:16:58 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.40
05:16:58 SQL> 
05:16:58 SQL> -- I created di5min here:
05:16:58 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
05:16:58 SQL> 
05:16:58 SQL> CREATE OR REPLACE VIEW svm6102 AS
05:16:58   2  SELECT
05:16:58   3  pair
05:16:58   4  ,ydate
05:16:58   5  ,prdate
05:16:58   6  ,rownum rnum -- acts as t in my time-series
05:16:58   7  ,clse
05:16:58   8  -- Derive a bunch of attributes from clse, the latest price:
05:16:58   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
05:16:58  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
05:16:58  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
05:16:58  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
05:16:58  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
05:16:58  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
05:16:58  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
05:16:58  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
05:16:58  17  --
05:16:58  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
05:16:58  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
05:16:58  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
05:16:58  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
05:16:58  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
05:16:58  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
05:16:58  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
05:16:58  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
05:16:58  26  --
05:16:58  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
05:16:58  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
05:16:58  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
05:16:58  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
05:16:58  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
05:16:58  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
05:16:58  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
05:16:58  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
05:16:58  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
05:16:58  36  FROM di5min WHERE pair LIKE'%gbp%'
05:16:58  37  AND ydate > sysdate - 95
05:16:58  38  ORDER BY ydate
05:16:58  39  /

View created.

Elapsed: 00:00:00.04
05:16:58 SQL> 
05:16:58 SQL> -- rpt
05:16:58 SQL> 
05:16:58 SQL> SELECT
05:16:58   2  pair
05:16:58   3  ,COUNT(pair)
05:16:58   4  ,MIN(clse),MAX(clse)
05:16:58   5  ,MIN(avg6),MAX(avg6)
05:16:58   6  ,MIN(ydate),MAX(ydate)
05:16:58   7  FROM svm6102
05:16:58   8  GROUP BY pair
05:16:58   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
gbp_usd       19654   1.535325	   1.6295 1.53696747 1.62716986 2010-09-26 20:55:01 2010-12-30 05:10:00

Elapsed: 00:00:00.86
05:16:59 SQL> 
05:16:59 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
05:16:59 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.23
05:16:59 SQL> CREATE TABLE svm6122 COMPRESS AS
05:16:59   2  SELECT
05:16:59   3  pair
05:16:59   4  ,ydate
05:16:59   5  ,prdate
05:16:59   6  ,clse
05:16:59   7  -- g6 is important. I want to predict g6:
05:16:59   8  ,ld6 - clse g6
05:16:59   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
05:16:59  10  -- I want more attributes from the ones I derived above:
05:16:59  11  -- clse relation to moving-min
05:16:59  12  ,clse-min4  cm4
05:16:59  13  ,clse-min6  cm6
05:16:59  14  ,clse-min8  cm8
05:16:59  15  ,clse-min10 cm10
05:16:59  16  ,clse-min12 cm12
05:16:59  17  ,clse-min14 cm14
05:16:59  18  ,clse-min16 cm16
05:16:59  19  ,clse-min18 cm18
05:16:59  20  -- clse relation to moving-avg
05:16:59  21  ,clse-avg4  ca4
05:16:59  22  ,clse-avg6  ca6
05:16:59  23  ,clse-avg8  ca8
05:16:59  24  ,clse-avg10 ca10
05:16:59  25  ,clse-avg12 ca12
05:16:59  26  ,clse-avg14 ca14
05:16:59  27  ,clse-avg16 ca16
05:16:59  28  ,clse-avg18 ca18
05:16:59  29  -- clse relation to moving-max
05:16:59  30  ,clse-max4  cx4
05:16:59  31  ,clse-max6  cx6
05:16:59  32  ,clse-max8  cx8
05:16:59  33  ,clse-max10 cx10
05:16:59  34  ,clse-max12 cx12
05:16:59  35  ,clse-max14 cx14
05:16:59  36  ,clse-max16 cx16
05:16:59  37  ,clse-max18 cx18
05:16:59  38  -- Derive more attributes.
05:16:59  39  -- I want to use CORR() here to help SVM see the shape of the series.
05:16:59  40  -- But COVAR_POP is more stable:
05:16:59  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
05:16:59  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
05:16:59  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
05:16:59  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
05:16:59  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
05:16:59  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
05:16:59  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
05:16:59  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
05:16:59  49  -- Derive date related attributes:
05:16:59  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
05:16:59  51  ,0+TO_CHAR(ydate,'D')d
05:16:59  52  ,0+TO_CHAR(ydate,'W')w
05:16:59  53  -- mpm stands for minutes-past-midnight:
05:16:59  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
05:16:59  55  -- mph stands for minutes-past-hour:
05:16:59  56  ,0+TO_CHAR(ydate,'MI')mph
05:16:59  57  FROM svm6102
05:16:59  58  ORDER BY ydate
05:16:59  59  /

Table created.

Elapsed: 00:00:02.02
05:17:01 SQL> 
05:17:01 SQL> -- rpt
05:17:01 SQL> 
05:17:01 SQL> SELECT
05:17:01   2  pair
05:17:01   3  ,COUNT(pair)
05:17:01   4  ,MIN(clse),MAX(clse)
05:17:01   5  ,MIN(ydate),MAX(ydate)
05:17:01   6  FROM svm6122
05:17:01   7  GROUP BY pair
05:17:01   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
gbp_usd       19654   1.535325	   1.6295 2010-09-26 20:55:01 2010-12-30 05:10:00

Elapsed: 00:00:00.11
05:17:01 SQL> 
05:17:01 SQL> -- Prepare for derivation of NTILE based params:
05:17:01 SQL> 
05:17:01 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.23
05:17:02 SQL> CREATE TABLE svm6142 COMPRESS AS
05:17:02   2  SELECT
05:17:02   3  pair
05:17:02   4  ,ydate
05:17:02   5  ,prdate
05:17:02   6  ,clse
05:17:02   7  ,g6
05:17:02   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
05:17:02   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
05:17:02  10  ,CASE WHEN trend IS NULL THEN 1
05:17:02  11  	    WHEN trend =0      THEN 1
05:17:02  12  	    ELSE trend END trend
05:17:02  13  ,cm4
05:17:02  14  ,cm6
05:17:02  15  ,cm8
05:17:02  16  ,cm10
05:17:02  17  ,cm12
05:17:02  18  ,cm14
05:17:02  19  ,cm16
05:17:02  20  ,cm18
05:17:02  21  --
05:17:02  22  ,ca4
05:17:02  23  ,ca6
05:17:02  24  ,ca8
05:17:02  25  ,ca10
05:17:02  26  ,ca12
05:17:02  27  ,ca14
05:17:02  28  ,ca16
05:17:02  29  ,ca18
05:17:02  30  --
05:17:02  31  ,cx4
05:17:02  32  ,cx6
05:17:02  33  ,cx8
05:17:02  34  ,cx10
05:17:02  35  ,cx12
05:17:02  36  ,cx14
05:17:02  37  ,cx16
05:17:02  38  ,cx18
05:17:02  39  --
05:17:02  40  ,crr4
05:17:02  41  ,crr6
05:17:02  42  ,crr8
05:17:02  43  ,crr10
05:17:02  44  ,crr12
05:17:02  45  ,crr14
05:17:02  46  ,crr16
05:17:02  47  ,crr18
05:17:02  48  --
05:17:02  49  ,hh
05:17:02  50  ,d
05:17:02  51  ,w
05:17:02  52  ,mpm
05:17:02  53  ,mph
05:17:02  54  FROM svm6122
05:17:02  55  ORDER BY ydate
05:17:02  56  /

Table created.

Elapsed: 00:00:00.36
05:17:02 SQL> 
05:17:02 SQL> -- rpt
05:17:02 SQL> 
05:17:02 SQL> SELECT
05:17:02   2  pair
05:17:02   3  ,trend
05:17:02   4  ,gatt
05:17:02   5  ,COUNT(pair)
05:17:02   6  ,AVG(g6)
05:17:02   7  FROM svm6142
05:17:02   8  GROUP BY pair,trend,gatt
05:17:02   9  ORDER BY pair,trend,gatt
05:17:02  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6295 -.00256031
gbp_usd 	-1 up	      3579 .004286117
gbp_usd 	-1		 3
gbp_usd 	 1 nup	      6234 -.00266653
gbp_usd 	 1 up	      3474  .00436857
gbp_usd 	 1		69

6 rows selected.

Elapsed: 00:00:00.04
05:17:02 SQL> 
05:17:02 SQL> 
05:17:02 SQL> -- Derive NTILE based params:
05:17:02 SQL> 
05:17:02 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.14
05:17:02 SQL> CREATE TABLE svm6162 COMPRESS AS
05:17:02   2  SELECT
05:17:02   3  pair
05:17:02   4  ,ydate
05:17:02   5  ,prdate
05:17:02   6  ,clse
05:17:02   7  ,g6
05:17:02   8  ,gatt
05:17:02   9  ,gattn
05:17:02  10  ,trend
05:17:02  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
05:17:02  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
05:17:02  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
05:17:02  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
05:17:02  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
05:17:02  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
05:17:02  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
05:17:02  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
05:17:02  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
05:17:02  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
05:17:02  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
05:17:02  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
05:17:02  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
05:17:02  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
05:17:02  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
05:17:02  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
05:17:02  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
05:17:02  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
05:17:02  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
05:17:02  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
05:17:02  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
05:17:02  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
05:17:02  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
05:17:02  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
05:17:02  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
05:17:02  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
05:17:02  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
05:17:02  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
05:17:02  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
05:17:02  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
05:17:02  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
05:17:02  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
05:17:02  43  ,hh  att32
05:17:02  44  ,d   att33
05:17:02  45  ,w   att34
05:17:02  46  ,mpm att35
05:17:02  47  ,mph att36
05:17:02  48  ,trend att37
05:17:02  49  FROM svm6142
05:17:02  50  ORDER BY ydate
05:17:02  51  /

Table created.

Elapsed: 00:00:04.71
05:17:07 SQL> 
05:17:07 SQL> -- rpt
05:17:07 SQL> 
05:17:07 SQL> SELECT
05:17:07   2  pair
05:17:07   3  ,trend
05:17:07   4  ,gatt
05:17:07   5  ,COUNT(pair)
05:17:07   6  ,AVG(g6)
05:17:07   7  FROM svm6162
05:17:07   8  GROUP BY pair,trend,gatt
05:17:07   9  ORDER BY pair,trend,gatt
05:17:07  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6295 -.00256031
gbp_usd 	-1 up	      3579 .004286117
gbp_usd 	-1		 3
gbp_usd 	 1 nup	      6234 -.00266653
gbp_usd 	 1 up	      3474  .00436857
gbp_usd 	 1		69

6 rows selected.

Elapsed: 00:00:00.03
05:17:07 SQL> 
05:17:07 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
05:17:07 SQL> CREATE TABLE modsrc COMPRESS AS
05:17:07   2  SELECT
05:17:07   3  pair
05:17:07   4  ,ydate
05:17:07   5  ,prdate
05:17:07   6  ,trend
05:17:07   7  ,g6
05:17:07   8  ,gatt
05:17:07   9  ,gattn
05:17:07  10  FROM svm6162
05:17:07  11  /

Table created.

Elapsed: 00:00:01.02
05:17:08 SQL> 
05:17:08 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.28
05:17:08 SQL> 
05:17:08 SQL> DROP   TABLE gbp_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
05:17:08 SQL> CREATE TABLE gbp_ms610 COMPRESS AS
05:17:08   2  SELECT
05:17:08   3  ydate
05:17:08   4  ,trend gbp_trend
05:17:08   5  ,g6    gbp_g6
05:17:08   6  ,gatt  gbp_gatt
05:17:08   7  ,gattn gbp_gattn
05:17:08   8  FROM modsrc
05:17:08   9  /

Table created.

Elapsed: 00:00:00.05
05:17:08 SQL> 
05:17:08 SQL> ANALYZE TABLE gbp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
05:17:09 SQL> 
05:17:09 SQL> -- I need a copy of the attributes:
05:17:09 SQL> 
05:17:09 SQL> 
05:17:09 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.05
05:17:09 SQL> CREATE TABLE gbp_att COMPRESS AS
05:17:09   2  SELECT
05:17:09   3  ydate
05:17:09   4  ,att00 gbp_att00
05:17:09   5  ,att01 gbp_att01
05:17:09   6  ,att02 gbp_att02
05:17:09   7  ,att03 gbp_att03
05:17:09   8  ,att04 gbp_att04
05:17:09   9  ,att05 gbp_att05
05:17:09  10  ,att06 gbp_att06
05:17:09  11  ,att07 gbp_att07
05:17:09  12  ,att08 gbp_att08
05:17:09  13  ,att09 gbp_att09
05:17:09  14  ,att10 gbp_att10
05:17:09  15  ,att11 gbp_att11
05:17:09  16  ,att12 gbp_att12
05:17:09  17  ,att13 gbp_att13
05:17:09  18  ,att14 gbp_att14
05:17:09  19  ,att15 gbp_att15
05:17:09  20  ,att16 gbp_att16
05:17:09  21  ,att17 gbp_att17
05:17:09  22  ,att18 gbp_att18
05:17:09  23  ,att19 gbp_att19
05:17:09  24  ,att20 gbp_att20
05:17:09  25  ,att21 gbp_att21
05:17:09  26  ,att22 gbp_att22
05:17:09  27  ,att23 gbp_att23
05:17:09  28  ,att24 gbp_att24
05:17:09  29  ,att25 gbp_att25
05:17:09  30  ,att26 gbp_att26
05:17:09  31  ,att27 gbp_att27
05:17:09  32  ,att28 gbp_att28
05:17:09  33  ,att29 gbp_att29
05:17:09  34  ,att30 gbp_att30
05:17:09  35  ,att31 gbp_att31
05:17:09  36  ,att32 gbp_att32
05:17:09  37  ,att33 gbp_att33
05:17:09  38  ,att34 gbp_att34
05:17:09  39  ,att35 gbp_att35
05:17:09  40  ,att36 gbp_att36
05:17:09  41  ,att37 gbp_att37
05:17:09  42  FROM svm6162
05:17:09  43  /

Table created.

Elapsed: 00:00:00.17
05:17:09 SQL> 
05:17:09 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
05:17:09 SQL> 
05:17:09 SQL> -- rpt
05:17:09 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19654

Elapsed: 00:00:00.84
05:17:10 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     19654

Elapsed: 00:00:00.00
05:17:10 SQL> 
05:17:10 SQL> --
05:17:10 SQL> -- jpy610.sql
05:17:10 SQL> --
05:17:10 SQL> 
05:17:10 SQL> -- Creates views and tables for backtesting a forex SVM strategy
05:17:10 SQL> 
05:17:10 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.42
05:17:10 SQL> 
05:17:10 SQL> -- I created di5min here:
05:17:10 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
05:17:10 SQL> 
05:17:10 SQL> CREATE OR REPLACE VIEW svm6102 AS
05:17:10   2  SELECT
05:17:10   3  pair
05:17:10   4  ,ydate
05:17:10   5  ,prdate
05:17:10   6  ,rownum rnum -- acts as t in my time-series
05:17:10   7  ,clse
05:17:10   8  -- Derive a bunch of attributes from clse, the latest price:
05:17:10   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
05:17:10  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
05:17:10  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
05:17:10  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
05:17:10  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
05:17:10  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
05:17:10  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
05:17:10  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
05:17:10  17  --
05:17:10  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
05:17:10  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
05:17:10  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
05:17:10  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
05:17:10  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
05:17:10  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
05:17:10  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
05:17:10  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
05:17:10  26  --
05:17:10  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
05:17:10  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
05:17:10  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
05:17:10  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
05:17:10  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
05:17:10  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
05:17:10  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
05:17:10  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
05:17:10  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
05:17:10  36  FROM di5min WHERE pair LIKE'%jpy%'
05:17:10  37  AND ydate > sysdate - 95
05:17:10  38  ORDER BY ydate
05:17:10  39  /

View created.

Elapsed: 00:00:00.04
05:17:11 SQL> 
05:17:11 SQL> -- rpt
05:17:11 SQL> 
05:17:11 SQL> SELECT
05:17:11   2  pair
05:17:11   3  ,COUNT(pair)
05:17:11   4  ,MIN(clse),MAX(clse)
05:17:11   5  ,MIN(avg6),MAX(avg6)
05:17:11   6  ,MIN(ydate),MAX(ydate)
05:17:11   7  FROM svm6102
05:17:11   8  GROUP BY pair
05:17:11   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_jpy       19651	 80.25	   84.485 80.3595205 84.3105479 2010-09-26 20:55:01 2010-12-30 05:10:00

Elapsed: 00:00:00.89
05:17:11 SQL> 
05:17:11 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
05:17:11 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.23
05:17:12 SQL> CREATE TABLE svm6122 COMPRESS AS
05:17:12   2  SELECT
05:17:12   3  pair
05:17:12   4  ,ydate
05:17:12   5  ,prdate
05:17:12   6  ,clse
05:17:12   7  -- g6 is important. I want to predict g6:
05:17:12   8  ,ld6 - clse g6
05:17:12   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
05:17:12  10  -- I want more attributes from the ones I derived above:
05:17:12  11  -- clse relation to moving-min
05:17:12  12  ,clse-min4  cm4
05:17:12  13  ,clse-min6  cm6
05:17:12  14  ,clse-min8  cm8
05:17:12  15  ,clse-min10 cm10
05:17:12  16  ,clse-min12 cm12
05:17:12  17  ,clse-min14 cm14
05:17:12  18  ,clse-min16 cm16
05:17:12  19  ,clse-min18 cm18
05:17:12  20  -- clse relation to moving-avg
05:17:12  21  ,clse-avg4  ca4
05:17:12  22  ,clse-avg6  ca6
05:17:12  23  ,clse-avg8  ca8
05:17:12  24  ,clse-avg10 ca10
05:17:12  25  ,clse-avg12 ca12
05:17:12  26  ,clse-avg14 ca14
05:17:12  27  ,clse-avg16 ca16
05:17:12  28  ,clse-avg18 ca18
05:17:12  29  -- clse relation to moving-max
05:17:12  30  ,clse-max4  cx4
05:17:12  31  ,clse-max6  cx6
05:17:12  32  ,clse-max8  cx8
05:17:12  33  ,clse-max10 cx10
05:17:12  34  ,clse-max12 cx12
05:17:12  35  ,clse-max14 cx14
05:17:12  36  ,clse-max16 cx16
05:17:12  37  ,clse-max18 cx18
05:17:12  38  -- Derive more attributes.
05:17:12  39  -- I want to use CORR() here to help SVM see the shape of the series.
05:17:12  40  -- But COVAR_POP is more stable:
05:17:12  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
05:17:12  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
05:17:12  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
05:17:12  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
05:17:12  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
05:17:12  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
05:17:12  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
05:17:12  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
05:17:12  49  -- Derive date related attributes:
05:17:12  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
05:17:12  51  ,0+TO_CHAR(ydate,'D')d
05:17:12  52  ,0+TO_CHAR(ydate,'W')w
05:17:12  53  -- mpm stands for minutes-past-midnight:
05:17:12  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
05:17:12  55  -- mph stands for minutes-past-hour:
05:17:12  56  ,0+TO_CHAR(ydate,'MI')mph
05:17:12  57  FROM svm6102
05:17:12  58  ORDER BY ydate
05:17:12  59  /

Table created.

Elapsed: 00:00:02.10
05:17:14 SQL> 
05:17:14 SQL> -- rpt
05:17:14 SQL> 
05:17:14 SQL> SELECT
05:17:14   2  pair
05:17:14   3  ,COUNT(pair)
05:17:14   4  ,MIN(clse),MAX(clse)
05:17:14   5  ,MIN(ydate),MAX(ydate)
05:17:14   6  FROM svm6122
05:17:14   7  GROUP BY pair
05:17:14   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_jpy       19651	 80.25	   84.485 2010-09-26 20:55:01 2010-12-30 05:10:00

Elapsed: 00:00:00.07
05:17:14 SQL> 
05:17:14 SQL> -- Prepare for derivation of NTILE based params:
05:17:14 SQL> 
05:17:14 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.18
05:17:14 SQL> CREATE TABLE svm6142 COMPRESS AS
05:17:14   2  SELECT
05:17:14   3  pair
05:17:14   4  ,ydate
05:17:14   5  ,prdate
05:17:14   6  ,clse
05:17:14   7  ,g6
05:17:14   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
05:17:14   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
05:17:14  10  ,CASE WHEN trend IS NULL THEN 1
05:17:14  11  	    WHEN trend =0      THEN 1
05:17:14  12  	    ELSE trend END trend
05:17:14  13  ,cm4
05:17:14  14  ,cm6
05:17:14  15  ,cm8
05:17:14  16  ,cm10
05:17:14  17  ,cm12
05:17:14  18  ,cm14
05:17:14  19  ,cm16
05:17:14  20  ,cm18
05:17:14  21  --
05:17:14  22  ,ca4
05:17:14  23  ,ca6
05:17:14  24  ,ca8
05:17:14  25  ,ca10
05:17:14  26  ,ca12
05:17:14  27  ,ca14
05:17:14  28  ,ca16
05:17:14  29  ,ca18
05:17:14  30  --
05:17:14  31  ,cx4
05:17:14  32  ,cx6
05:17:14  33  ,cx8
05:17:14  34  ,cx10
05:17:14  35  ,cx12
05:17:14  36  ,cx14
05:17:14  37  ,cx16
05:17:14  38  ,cx18
05:17:14  39  --
05:17:14  40  ,crr4
05:17:14  41  ,crr6
05:17:14  42  ,crr8
05:17:14  43  ,crr10
05:17:14  44  ,crr12
05:17:14  45  ,crr14
05:17:14  46  ,crr16
05:17:14  47  ,crr18
05:17:14  48  --
05:17:14  49  ,hh
05:17:14  50  ,d
05:17:14  51  ,w
05:17:14  52  ,mpm
05:17:14  53  ,mph
05:17:14  54  FROM svm6122
05:17:14  55  ORDER BY ydate
05:17:14  56  /

Table created.

Elapsed: 00:00:00.36
05:17:14 SQL> 
05:17:14 SQL> -- rpt
05:17:14 SQL> 
05:17:14 SQL> SELECT
05:17:14   2  pair
05:17:14   3  ,trend
05:17:14   4  ,gatt
05:17:14   5  ,COUNT(pair)
05:17:14   6  ,AVG(g6)
05:17:14   7  FROM svm6142
05:17:14   8  GROUP BY pair,trend,gatt
05:17:14   9  ORDER BY pair,trend,gatt
05:17:14  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5351 -.16577113
usd_jpy 	-1 up	      4960 .163120816
usd_jpy 	-1		72
usd_jpy 	 1 nup	      5175 -.15491415
usd_jpy 	 1 up	      4093 .165084061

Elapsed: 00:00:00.05
05:17:14 SQL> 
05:17:14 SQL> 
05:17:14 SQL> -- Derive NTILE based params:
05:17:14 SQL> 
05:17:14 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.12
05:17:15 SQL> CREATE TABLE svm6162 COMPRESS AS
05:17:15   2  SELECT
05:17:15   3  pair
05:17:15   4  ,ydate
05:17:15   5  ,prdate
05:17:15   6  ,clse
05:17:15   7  ,g6
05:17:15   8  ,gatt
05:17:15   9  ,gattn
05:17:15  10  ,trend
05:17:15  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
05:17:15  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
05:17:15  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
05:17:15  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
05:17:15  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
05:17:15  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
05:17:15  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
05:17:15  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
05:17:15  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
05:17:15  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
05:17:15  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
05:17:15  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
05:17:15  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
05:17:15  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
05:17:15  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
05:17:15  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
05:17:15  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
05:17:15  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
05:17:15  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
05:17:15  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
05:17:15  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
05:17:15  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
05:17:15  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
05:17:15  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
05:17:15  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
05:17:15  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
05:17:15  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
05:17:15  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
05:17:15  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
05:17:15  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
05:17:15  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
05:17:15  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
05:17:15  43  ,hh  att32
05:17:15  44  ,d   att33
05:17:15  45  ,w   att34
05:17:15  46  ,mpm att35
05:17:15  47  ,mph att36
05:17:15  48  ,trend att37
05:17:15  49  FROM svm6142
05:17:15  50  ORDER BY ydate
05:17:15  51  /

Table created.

Elapsed: 00:00:04.76
05:17:19 SQL> 
05:17:19 SQL> -- rpt
05:17:19 SQL> 
05:17:19 SQL> SELECT
05:17:19   2  pair
05:17:19   3  ,trend
05:17:19   4  ,gatt
05:17:19   5  ,COUNT(pair)
05:17:19   6  ,AVG(g6)
05:17:19   7  FROM svm6162
05:17:19   8  GROUP BY pair,trend,gatt
05:17:19   9  ORDER BY pair,trend,gatt
05:17:19  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5351 -.16577113
usd_jpy 	-1 up	      4960 .163120816
usd_jpy 	-1		72
usd_jpy 	 1 nup	      5175 -.15491415
usd_jpy 	 1 up	      4093 .165084061

Elapsed: 00:00:00.03
05:17:19 SQL> 
05:17:19 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
05:17:19 SQL> CREATE TABLE modsrc COMPRESS AS
05:17:19   2  SELECT
05:17:19   3  pair
05:17:19   4  ,ydate
05:17:19   5  ,prdate
05:17:19   6  ,trend
05:17:19   7  ,g6
05:17:19   8  ,gatt
05:17:19   9  ,gattn
05:17:19  10  FROM svm6162
05:17:19  11  /

Table created.

Elapsed: 00:00:00.09
05:17:20 SQL> 
05:17:20 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
05:17:20 SQL> 
05:17:20 SQL> DROP   TABLE jpy_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
05:17:20 SQL> CREATE TABLE jpy_ms610 COMPRESS AS
05:17:20   2  SELECT
05:17:20   3  ydate
05:17:20   4  ,trend jpy_trend
05:17:20   5  ,g6    jpy_g6
05:17:20   6  ,gatt  jpy_gatt
05:17:20   7  ,gattn jpy_gattn
05:17:20   8  FROM modsrc
05:17:20   9  /

Table created.

Elapsed: 00:00:00.07
05:17:20 SQL> 
05:17:20 SQL> ANALYZE TABLE jpy_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
05:17:20 SQL> 
05:17:20 SQL> -- I need a copy of the attributes:
05:17:20 SQL> 
05:17:20 SQL> 
05:17:20 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.05
05:17:20 SQL> CREATE TABLE jpy_att COMPRESS AS
05:17:20   2  SELECT
05:17:20   3  ydate
05:17:20   4  ,att00 jpy_att00
05:17:20   5  ,att01 jpy_att01
05:17:20   6  ,att02 jpy_att02
05:17:20   7  ,att03 jpy_att03
05:17:20   8  ,att04 jpy_att04
05:17:20   9  ,att05 jpy_att05
05:17:20  10  ,att06 jpy_att06
05:17:20  11  ,att07 jpy_att07
05:17:20  12  ,att08 jpy_att08
05:17:20  13  ,att09 jpy_att09
05:17:20  14  ,att10 jpy_att10
05:17:20  15  ,att11 jpy_att11
05:17:20  16  ,att12 jpy_att12
05:17:20  17  ,att13 jpy_att13
05:17:20  18  ,att14 jpy_att14
05:17:20  19  ,att15 jpy_att15
05:17:20  20  ,att16 jpy_att16
05:17:20  21  ,att17 jpy_att17
05:17:20  22  ,att18 jpy_att18
05:17:20  23  ,att19 jpy_att19
05:17:20  24  ,att20 jpy_att20
05:17:20  25  ,att21 jpy_att21
05:17:20  26  ,att22 jpy_att22
05:17:20  27  ,att23 jpy_att23
05:17:20  28  ,att24 jpy_att24
05:17:20  29  ,att25 jpy_att25
05:17:20  30  ,att26 jpy_att26
05:17:20  31  ,att27 jpy_att27
05:17:20  32  ,att28 jpy_att28
05:17:20  33  ,att29 jpy_att29
05:17:20  34  ,att30 jpy_att30
05:17:20  35  ,att31 jpy_att31
05:17:20  36  ,att32 jpy_att32
05:17:20  37  ,att33 jpy_att33
05:17:20  38  ,att34 jpy_att34
05:17:20  39  ,att35 jpy_att35
05:17:20  40  ,att36 jpy_att36
05:17:20  41  ,att37 jpy_att37
05:17:20  42  FROM svm6162
05:17:20  43  /

Table created.

Elapsed: 00:00:00.22
05:17:20 SQL> 
05:17:20 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
05:17:21 SQL> 
05:17:21 SQL> -- rpt
05:17:21 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19651

Elapsed: 00:00:00.87
05:17:22 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     19651

Elapsed: 00:00:00.00
05:17:22 SQL> 
05:17:22 SQL> --
05:17:22 SQL> -- cad610.sql
05:17:22 SQL> --
05:17:22 SQL> 
05:17:22 SQL> -- Creates views and tables for backtesting a forex SVM strategy
05:17:22 SQL> 
05:17:22 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.36
05:17:22 SQL> 
05:17:22 SQL> -- I created di5min here:
05:17:22 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
05:17:22 SQL> 
05:17:22 SQL> CREATE OR REPLACE VIEW svm6102 AS
05:17:22   2  SELECT
05:17:22   3  pair
05:17:22   4  ,ydate
05:17:22   5  ,prdate
05:17:22   6  ,rownum rnum -- acts as t in my time-series
05:17:22   7  ,clse
05:17:22   8  -- Derive a bunch of attributes from clse, the latest price:
05:17:22   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
05:17:22  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
05:17:22  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
05:17:22  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
05:17:22  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
05:17:22  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
05:17:22  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
05:17:22  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
05:17:22  17  --
05:17:22  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
05:17:22  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
05:17:22  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
05:17:22  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
05:17:22  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
05:17:22  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
05:17:22  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
05:17:22  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
05:17:22  26  --
05:17:22  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
05:17:22  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
05:17:22  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
05:17:22  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
05:17:22  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
05:17:22  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
05:17:22  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
05:17:22  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
05:17:22  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
05:17:22  36  FROM di5min WHERE pair LIKE'%cad%'
05:17:22  37  AND ydate > sysdate - 95
05:17:22  38  ORDER BY ydate
05:17:22  39  /

View created.

Elapsed: 00:00:00.04
05:17:22 SQL> 
05:17:22 SQL> -- rpt
05:17:22 SQL> 
05:17:22 SQL> SELECT
05:17:22   2  pair
05:17:22   3  ,COUNT(pair)
05:17:22   4  ,MIN(clse),MAX(clse)
05:17:22   5  ,MIN(avg6),MAX(avg6)
05:17:22   6  ,MIN(ydate),MAX(ydate)
05:17:22   7  FROM svm6102
05:17:22   8  GROUP BY pair
05:17:22   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_cad       19651	.99755	    1.036 .998845205 1.03336849 2010-09-26 20:55:01 2010-12-30 05:10:00

Elapsed: 00:00:00.83
05:17:23 SQL> 
05:17:23 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
05:17:23 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.17
05:17:23 SQL> CREATE TABLE svm6122 COMPRESS AS
05:17:23   2  SELECT
05:17:23   3  pair
05:17:23   4  ,ydate
05:17:23   5  ,prdate
05:17:23   6  ,clse
05:17:23   7  -- g6 is important. I want to predict g6:
05:17:23   8  ,ld6 - clse g6
05:17:23   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
05:17:23  10  -- I want more attributes from the ones I derived above:
05:17:23  11  -- clse relation to moving-min
05:17:23  12  ,clse-min4  cm4
05:17:23  13  ,clse-min6  cm6
05:17:23  14  ,clse-min8  cm8
05:17:23  15  ,clse-min10 cm10
05:17:23  16  ,clse-min12 cm12
05:17:23  17  ,clse-min14 cm14
05:17:23  18  ,clse-min16 cm16
05:17:23  19  ,clse-min18 cm18
05:17:23  20  -- clse relation to moving-avg
05:17:23  21  ,clse-avg4  ca4
05:17:23  22  ,clse-avg6  ca6
05:17:23  23  ,clse-avg8  ca8
05:17:23  24  ,clse-avg10 ca10
05:17:23  25  ,clse-avg12 ca12
05:17:23  26  ,clse-avg14 ca14
05:17:23  27  ,clse-avg16 ca16
05:17:23  28  ,clse-avg18 ca18
05:17:23  29  -- clse relation to moving-max
05:17:23  30  ,clse-max4  cx4
05:17:23  31  ,clse-max6  cx6
05:17:23  32  ,clse-max8  cx8
05:17:23  33  ,clse-max10 cx10
05:17:23  34  ,clse-max12 cx12
05:17:23  35  ,clse-max14 cx14
05:17:23  36  ,clse-max16 cx16
05:17:23  37  ,clse-max18 cx18
05:17:23  38  -- Derive more attributes.
05:17:23  39  -- I want to use CORR() here to help SVM see the shape of the series.
05:17:23  40  -- But COVAR_POP is more stable:
05:17:23  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
05:17:23  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
05:17:23  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
05:17:23  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
05:17:23  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
05:17:23  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
05:17:23  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
05:17:23  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
05:17:23  49  -- Derive date related attributes:
05:17:23  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
05:17:23  51  ,0+TO_CHAR(ydate,'D')d
05:17:23  52  ,0+TO_CHAR(ydate,'W')w
05:17:23  53  -- mpm stands for minutes-past-midnight:
05:17:23  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
05:17:23  55  -- mph stands for minutes-past-hour:
05:17:23  56  ,0+TO_CHAR(ydate,'MI')mph
05:17:23  57  FROM svm6102
05:17:23  58  ORDER BY ydate
05:17:23  59  /

Table created.

Elapsed: 00:00:02.05
05:17:25 SQL> 
05:17:25 SQL> -- rpt
05:17:25 SQL> 
05:17:25 SQL> SELECT
05:17:25   2  pair
05:17:25   3  ,COUNT(pair)
05:17:25   4  ,MIN(clse),MAX(clse)
05:17:25   5  ,MIN(ydate),MAX(ydate)
05:17:25   6  FROM svm6122
05:17:25   7  GROUP BY pair
05:17:25   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_cad       19651	.99755	    1.036 2010-09-26 20:55:01 2010-12-30 05:10:00

Elapsed: 00:00:00.03
05:17:25 SQL> 
05:17:25 SQL> -- Prepare for derivation of NTILE based params:
05:17:25 SQL> 
05:17:25 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.19
05:17:25 SQL> CREATE TABLE svm6142 COMPRESS AS
05:17:25   2  SELECT
05:17:25   3  pair
05:17:25   4  ,ydate
05:17:25   5  ,prdate
05:17:25   6  ,clse
05:17:25   7  ,g6
05:17:25   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
05:17:25   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
05:17:25  10  ,CASE WHEN trend IS NULL THEN 1
05:17:25  11  	    WHEN trend =0      THEN 1
05:17:25  12  	    ELSE trend END trend
05:17:25  13  ,cm4
05:17:25  14  ,cm6
05:17:25  15  ,cm8
05:17:25  16  ,cm10
05:17:25  17  ,cm12
05:17:25  18  ,cm14
05:17:25  19  ,cm16
05:17:25  20  ,cm18
05:17:25  21  --
05:17:25  22  ,ca4
05:17:25  23  ,ca6
05:17:25  24  ,ca8
05:17:25  25  ,ca10
05:17:25  26  ,ca12
05:17:25  27  ,ca14
05:17:25  28  ,ca16
05:17:25  29  ,ca18
05:17:25  30  --
05:17:25  31  ,cx4
05:17:25  32  ,cx6
05:17:25  33  ,cx8
05:17:25  34  ,cx10
05:17:25  35  ,cx12
05:17:25  36  ,cx14
05:17:25  37  ,cx16
05:17:25  38  ,cx18
05:17:25  39  --
05:17:25  40  ,crr4
05:17:25  41  ,crr6
05:17:25  42  ,crr8
05:17:25  43  ,crr10
05:17:25  44  ,crr12
05:17:25  45  ,crr14
05:17:25  46  ,crr16
05:17:25  47  ,crr18
05:17:25  48  --
05:17:25  49  ,hh
05:17:25  50  ,d
05:17:25  51  ,w
05:17:25  52  ,mpm
05:17:25  53  ,mph
05:17:25  54  FROM svm6122
05:17:25  55  ORDER BY ydate
05:17:25  56  /

Table created.

Elapsed: 00:00:00.35
05:17:26 SQL> 
05:17:26 SQL> -- rpt
05:17:26 SQL> 
05:17:26 SQL> SELECT
05:17:26   2  pair
05:17:26   3  ,trend
05:17:26   4  ,gatt
05:17:26   5  ,COUNT(pair)
05:17:26   6  ,AVG(g6)
05:17:26   7  FROM svm6142
05:17:26   8  GROUP BY pair,trend,gatt
05:17:26   9  ORDER BY pair,trend,gatt
05:17:26  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7211 -.00132946
usd_cad 	-1 up	      3143 .003084915
usd_cad 	-1		66
usd_cad 	 1 nup	      6736 -.00161071
usd_cad 	 1 up	      2489 .003597467
usd_cad 	 1		 6

6 rows selected.

Elapsed: 00:00:00.04
05:17:26 SQL> 
05:17:26 SQL> 
05:17:26 SQL> -- Derive NTILE based params:
05:17:26 SQL> 
05:17:26 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.13
05:17:26 SQL> CREATE TABLE svm6162 COMPRESS AS
05:17:26   2  SELECT
05:17:26   3  pair
05:17:26   4  ,ydate
05:17:26   5  ,prdate
05:17:26   6  ,clse
05:17:26   7  ,g6
05:17:26   8  ,gatt
05:17:26   9  ,gattn
05:17:26  10  ,trend
05:17:26  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
05:17:26  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
05:17:26  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
05:17:26  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
05:17:26  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
05:17:26  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
05:17:26  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
05:17:26  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
05:17:26  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
05:17:26  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
05:17:26  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
05:17:26  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
05:17:26  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
05:17:26  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
05:17:26  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
05:17:26  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
05:17:26  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
05:17:26  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
05:17:26  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
05:17:26  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
05:17:26  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
05:17:26  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
05:17:26  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
05:17:26  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
05:17:26  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
05:17:26  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
05:17:26  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
05:17:26  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
05:17:26  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
05:17:26  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
05:17:26  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
05:17:26  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
05:17:26  43  ,hh  att32
05:17:26  44  ,d   att33
05:17:26  45  ,w   att34
05:17:26  46  ,mpm att35
05:17:26  47  ,mph att36
05:17:26  48  ,trend att37
05:17:26  49  FROM svm6142
05:17:26  50  ORDER BY ydate
05:17:26  51  /

Table created.

Elapsed: 00:00:04.75
05:17:31 SQL> 
05:17:31 SQL> -- rpt
05:17:31 SQL> 
05:17:31 SQL> SELECT
05:17:31   2  pair
05:17:31   3  ,trend
05:17:31   4  ,gatt
05:17:31   5  ,COUNT(pair)
05:17:31   6  ,AVG(g6)
05:17:31   7  FROM svm6162
05:17:31   8  GROUP BY pair,trend,gatt
05:17:31   9  ORDER BY pair,trend,gatt
05:17:31  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7211 -.00132946
usd_cad 	-1 up	      3143 .003084915
usd_cad 	-1		66
usd_cad 	 1 nup	      6736 -.00161071
usd_cad 	 1 up	      2489 .003597467
usd_cad 	 1		 6

6 rows selected.

Elapsed: 00:00:00.03
05:17:31 SQL> 
05:17:31 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
05:17:31 SQL> CREATE TABLE modsrc COMPRESS AS
05:17:31   2  SELECT
05:17:31   3  pair
05:17:31   4  ,ydate
05:17:31   5  ,prdate
05:17:31   6  ,trend
05:17:31   7  ,g6
05:17:31   8  ,gatt
05:17:31   9  ,gattn
05:17:31  10  FROM svm6162
05:17:31  11  /

Table created.

Elapsed: 00:00:00.10
05:17:31 SQL> 
05:17:31 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.27
05:17:31 SQL> 
05:17:31 SQL> DROP   TABLE cad_ms610 ;

Table dropped.

Elapsed: 00:00:00.03
05:17:31 SQL> CREATE TABLE cad_ms610 COMPRESS AS
05:17:31   2  SELECT
05:17:31   3  ydate
05:17:31   4  ,trend cad_trend
05:17:31   5  ,g6    cad_g6
05:17:31   6  ,gatt  cad_gatt
05:17:31   7  ,gattn cad_gattn
05:17:31   8  FROM modsrc
05:17:31   9  /

Table created.

Elapsed: 00:00:00.06
05:17:31 SQL> 
05:17:31 SQL> ANALYZE TABLE cad_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.14
05:17:31 SQL> 
05:17:31 SQL> -- I need a copy of the attributes:
05:17:31 SQL> 
05:17:31 SQL> 
05:17:31 SQL> DROP   TABLE cad_att;

Table dropped.

Elapsed: 00:00:00.05
05:17:31 SQL> CREATE TABLE cad_att COMPRESS AS
05:17:31   2  SELECT
05:17:31   3  ydate
05:17:31   4  ,att00 cad_att00
05:17:31   5  ,att01 cad_att01
05:17:31   6  ,att02 cad_att02
05:17:31   7  ,att03 cad_att03
05:17:31   8  ,att04 cad_att04
05:17:31   9  ,att05 cad_att05
05:17:31  10  ,att06 cad_att06
05:17:31  11  ,att07 cad_att07
05:17:31  12  ,att08 cad_att08
05:17:31  13  ,att09 cad_att09
05:17:31  14  ,att10 cad_att10
05:17:31  15  ,att11 cad_att11
05:17:31  16  ,att12 cad_att12
05:17:31  17  ,att13 cad_att13
05:17:31  18  ,att14 cad_att14
05:17:31  19  ,att15 cad_att15
05:17:31  20  ,att16 cad_att16
05:17:31  21  ,att17 cad_att17
05:17:31  22  ,att18 cad_att18
05:17:31  23  ,att19 cad_att19
05:17:31  24  ,att20 cad_att20
05:17:31  25  ,att21 cad_att21
05:17:31  26  ,att22 cad_att22
05:17:31  27  ,att23 cad_att23
05:17:31  28  ,att24 cad_att24
05:17:31  29  ,att25 cad_att25
05:17:31  30  ,att26 cad_att26
05:17:31  31  ,att27 cad_att27
05:17:31  32  ,att28 cad_att28
05:17:31  33  ,att29 cad_att29
05:17:31  34  ,att30 cad_att30
05:17:31  35  ,att31 cad_att31
05:17:31  36  ,att32 cad_att32
05:17:31  37  ,att33 cad_att33
05:17:31  38  ,att34 cad_att34
05:17:31  39  ,att35 cad_att35
05:17:31  40  ,att36 cad_att36
05:17:31  41  ,att37 cad_att37
05:17:31  42  FROM svm6162
05:17:31  43  /

Table created.

Elapsed: 00:00:00.16
05:17:31 SQL> 
05:17:31 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
05:17:32 SQL> 
05:17:32 SQL> -- rpt
05:17:32 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19651

Elapsed: 00:00:00.81
05:17:33 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
     19651

Elapsed: 00:00:00.00
05:17:33 SQL> 
05:17:33 SQL> --
05:17:33 SQL> -- chf610.sql
05:17:33 SQL> --
05:17:33 SQL> 
05:17:33 SQL> -- Creates views and tables for backtesting a forex SVM strategy
05:17:33 SQL> 
05:17:33 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.36
05:17:33 SQL> 
05:17:33 SQL> -- I created di5min here:
05:17:33 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
05:17:33 SQL> 
05:17:33 SQL> CREATE OR REPLACE VIEW svm6102 AS
05:17:33   2  SELECT
05:17:33   3  pair
05:17:33   4  ,ydate
05:17:33   5  ,prdate
05:17:33   6  ,rownum rnum -- acts as t in my time-series
05:17:33   7  ,clse
05:17:33   8  -- Derive a bunch of attributes from clse, the latest price:
05:17:33   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
05:17:33  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
05:17:33  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
05:17:33  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
05:17:33  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
05:17:33  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
05:17:33  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
05:17:33  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
05:17:33  17  --
05:17:33  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
05:17:33  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
05:17:33  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
05:17:33  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
05:17:33  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
05:17:33  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
05:17:33  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
05:17:33  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
05:17:33  26  --
05:17:33  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
05:17:33  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
05:17:33  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
05:17:33  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
05:17:33  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
05:17:33  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
05:17:33  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
05:17:33  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
05:17:33  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
05:17:33  36  FROM di5min WHERE pair LIKE'%chf%'
05:17:33  37  AND ydate > sysdate - 95
05:17:33  38  ORDER BY ydate
05:17:33  39  /

View created.

Elapsed: 00:00:00.04
05:17:33 SQL> 
05:17:33 SQL> -- rpt
05:17:33 SQL> 
05:17:33 SQL> SELECT
05:17:33   2  pair
05:17:33   3  ,COUNT(pair)
05:17:33   4  ,MIN(clse),MAX(clse)
05:17:33   5  ,MIN(avg6),MAX(avg6)
05:17:33   6  ,MIN(ydate),MAX(ydate)
05:17:33   7  FROM svm6102
05:17:33   8  GROUP BY pair
05:17:33   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_chf       19654    .941975	  1.00635 .943306336 1.00498151 2010-09-26 20:55:01 2010-12-30 05:10:00

Elapsed: 00:00:00.83
05:17:34 SQL> 
05:17:34 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
05:17:34 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.23
05:17:34 SQL> CREATE TABLE svm6122 COMPRESS AS
05:17:34   2  SELECT
05:17:34   3  pair
05:17:34   4  ,ydate
05:17:34   5  ,prdate
05:17:34   6  ,clse
05:17:34   7  -- g6 is important. I want to predict g6:
05:17:34   8  ,ld6 - clse g6
05:17:34   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
05:17:34  10  -- I want more attributes from the ones I derived above:
05:17:34  11  -- clse relation to moving-min
05:17:34  12  ,clse-min4  cm4
05:17:34  13  ,clse-min6  cm6
05:17:34  14  ,clse-min8  cm8
05:17:34  15  ,clse-min10 cm10
05:17:34  16  ,clse-min12 cm12
05:17:34  17  ,clse-min14 cm14
05:17:34  18  ,clse-min16 cm16
05:17:34  19  ,clse-min18 cm18
05:17:34  20  -- clse relation to moving-avg
05:17:34  21  ,clse-avg4  ca4
05:17:34  22  ,clse-avg6  ca6
05:17:34  23  ,clse-avg8  ca8
05:17:34  24  ,clse-avg10 ca10
05:17:34  25  ,clse-avg12 ca12
05:17:34  26  ,clse-avg14 ca14
05:17:34  27  ,clse-avg16 ca16
05:17:34  28  ,clse-avg18 ca18
05:17:34  29  -- clse relation to moving-max
05:17:34  30  ,clse-max4  cx4
05:17:34  31  ,clse-max6  cx6
05:17:34  32  ,clse-max8  cx8
05:17:34  33  ,clse-max10 cx10
05:17:34  34  ,clse-max12 cx12
05:17:34  35  ,clse-max14 cx14
05:17:34  36  ,clse-max16 cx16
05:17:34  37  ,clse-max18 cx18
05:17:34  38  -- Derive more attributes.
05:17:34  39  -- I want to use CORR() here to help SVM see the shape of the series.
05:17:34  40  -- But COVAR_POP is more stable:
05:17:34  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
05:17:34  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
05:17:34  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
05:17:34  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
05:17:34  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
05:17:34  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
05:17:34  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
05:17:34  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
05:17:34  49  -- Derive date related attributes:
05:17:34  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
05:17:34  51  ,0+TO_CHAR(ydate,'D')d
05:17:34  52  ,0+TO_CHAR(ydate,'W')w
05:17:34  53  -- mpm stands for minutes-past-midnight:
05:17:34  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
05:17:34  55  -- mph stands for minutes-past-hour:
05:17:34  56  ,0+TO_CHAR(ydate,'MI')mph
05:17:34  57  FROM svm6102
05:17:34  58  ORDER BY ydate
05:17:34  59  /

Table created.

Elapsed: 00:00:02.05
05:17:36 SQL> 
05:17:36 SQL> -- rpt
05:17:36 SQL> 
05:17:36 SQL> SELECT
05:17:36   2  pair
05:17:36   3  ,COUNT(pair)
05:17:36   4  ,MIN(clse),MAX(clse)
05:17:36   5  ,MIN(ydate),MAX(ydate)
05:17:36   6  FROM svm6122
05:17:36   7  GROUP BY pair
05:17:36   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_chf       19654    .941975	  1.00635 2010-09-26 20:55:01 2010-12-30 05:10:00

Elapsed: 00:00:00.04
05:17:36 SQL> 
05:17:36 SQL> -- Prepare for derivation of NTILE based params:
05:17:36 SQL> 
05:17:36 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.19
05:17:37 SQL> CREATE TABLE svm6142 COMPRESS AS
05:17:37   2  SELECT
05:17:37   3  pair
05:17:37   4  ,ydate
05:17:37   5  ,prdate
05:17:37   6  ,clse
05:17:37   7  ,g6
05:17:37   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
05:17:37   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
05:17:37  10  ,CASE WHEN trend IS NULL THEN 1
05:17:37  11  	    WHEN trend =0      THEN 1
05:17:37  12  	    ELSE trend END trend
05:17:37  13  ,cm4
05:17:37  14  ,cm6
05:17:37  15  ,cm8
05:17:37  16  ,cm10
05:17:37  17  ,cm12
05:17:37  18  ,cm14
05:17:37  19  ,cm16
05:17:37  20  ,cm18
05:17:37  21  --
05:17:37  22  ,ca4
05:17:37  23  ,ca6
05:17:37  24  ,ca8
05:17:37  25  ,ca10
05:17:37  26  ,ca12
05:17:37  27  ,ca14
05:17:37  28  ,ca16
05:17:37  29  ,ca18
05:17:37  30  --
05:17:37  31  ,cx4
05:17:37  32  ,cx6
05:17:37  33  ,cx8
05:17:37  34  ,cx10
05:17:37  35  ,cx12
05:17:37  36  ,cx14
05:17:37  37  ,cx16
05:17:37  38  ,cx18
05:17:37  39  --
05:17:37  40  ,crr4
05:17:37  41  ,crr6
05:17:37  42  ,crr8
05:17:37  43  ,crr10
05:17:37  44  ,crr12
05:17:37  45  ,crr14
05:17:37  46  ,crr16
05:17:37  47  ,crr18
05:17:37  48  --
05:17:37  49  ,hh
05:17:37  50  ,d
05:17:37  51  ,w
05:17:37  52  ,mpm
05:17:37  53  ,mph
05:17:37  54  FROM svm6122
05:17:37  55  ORDER BY ydate
05:17:37  56  /

Table created.

Elapsed: 00:00:00.37
05:17:37 SQL> 
05:17:37 SQL> -- rpt
05:17:37 SQL> 
05:17:37 SQL> SELECT
05:17:37   2  pair
05:17:37   3  ,trend
05:17:37   4  ,gatt
05:17:37   5  ,COUNT(pair)
05:17:37   6  ,AVG(g6)
05:17:37   7  FROM svm6142
05:17:37   8  GROUP BY pair,trend,gatt
05:17:37   9  ORDER BY pair,trend,gatt
05:17:37  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7092 -.00195936
usd_chf 	-1 up	      3177 .003894729
usd_chf 	-1		72
usd_chf 	 1 nup	      6747 -.00161786
usd_chf 	 1 up	      2566 .003688786

Elapsed: 00:00:00.04
05:17:37 SQL> 
05:17:37 SQL> 
05:17:37 SQL> -- Derive NTILE based params:
05:17:37 SQL> 
05:17:37 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.10
05:17:37 SQL> CREATE TABLE svm6162 COMPRESS AS
05:17:37   2  SELECT
05:17:37   3  pair
05:17:37   4  ,ydate
05:17:37   5  ,prdate
05:17:37   6  ,clse
05:17:37   7  ,g6
05:17:37   8  ,gatt
05:17:37   9  ,gattn
05:17:37  10  ,trend
05:17:37  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
05:17:37  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
05:17:37  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
05:17:37  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
05:17:37  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
05:17:37  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
05:17:37  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
05:17:37  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
05:17:37  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
05:17:37  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
05:17:37  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
05:17:37  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
05:17:37  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
05:17:37  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
05:17:37  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
05:17:37  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
05:17:37  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
05:17:37  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
05:17:37  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
05:17:37  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
05:17:37  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
05:17:37  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
05:17:37  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
05:17:37  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
05:17:37  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
05:17:37  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
05:17:37  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
05:17:37  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
05:17:37  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
05:17:37  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
05:17:37  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
05:17:37  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
05:17:37  43  ,hh  att32
05:17:37  44  ,d   att33
05:17:37  45  ,w   att34
05:17:37  46  ,mpm att35
05:17:37  47  ,mph att36
05:17:37  48  ,trend att37
05:17:37  49  FROM svm6142
05:17:37  50  ORDER BY ydate
05:17:37  51  /

Table created.

Elapsed: 00:00:04.80
05:17:42 SQL> 
05:17:42 SQL> -- rpt
05:17:42 SQL> 
05:17:42 SQL> SELECT
05:17:42   2  pair
05:17:42   3  ,trend
05:17:42   4  ,gatt
05:17:42   5  ,COUNT(pair)
05:17:42   6  ,AVG(g6)
05:17:42   7  FROM svm6162
05:17:42   8  GROUP BY pair,trend,gatt
05:17:42   9  ORDER BY pair,trend,gatt
05:17:42  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7092 -.00195936
usd_chf 	-1 up	      3177 .003894729
usd_chf 	-1		72
usd_chf 	 1 nup	      6747 -.00161786
usd_chf 	 1 up	      2566 .003688786

Elapsed: 00:00:00.04
05:17:42 SQL> 
05:17:42 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.18
05:17:42 SQL> CREATE TABLE modsrc COMPRESS AS
05:17:42   2  SELECT
05:17:42   3  pair
05:17:42   4  ,ydate
05:17:42   5  ,prdate
05:17:42   6  ,trend
05:17:42   7  ,g6
05:17:42   8  ,gatt
05:17:42   9  ,gattn
05:17:42  10  FROM svm6162
05:17:42  11  /

Table created.

Elapsed: 00:00:00.08
05:17:42 SQL> 
05:17:42 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
05:17:42 SQL> 
05:17:42 SQL> DROP   TABLE chf_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
05:17:42 SQL> CREATE TABLE chf_ms610 COMPRESS AS
05:17:42   2  SELECT
05:17:42   3  ydate
05:17:42   4  ,trend chf_trend
05:17:42   5  ,g6    chf_g6
05:17:42   6  ,gatt  chf_gatt
05:17:42   7  ,gattn chf_gattn
05:17:42   8  FROM modsrc
05:17:42   9  /

Table created.

Elapsed: 00:00:00.06
05:17:42 SQL> 
05:17:42 SQL> ANALYZE TABLE chf_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.25
05:17:43 SQL> 
05:17:43 SQL> -- I need a copy of the attributes:
05:17:43 SQL> 
05:17:43 SQL> 
05:17:43 SQL> DROP   TABLE chf_att;

Table dropped.

Elapsed: 00:00:00.06
05:17:43 SQL> CREATE TABLE chf_att COMPRESS AS
05:17:43   2  SELECT
05:17:43   3  ydate
05:17:43   4  ,att00 chf_att00
05:17:43   5  ,att01 chf_att01
05:17:43   6  ,att02 chf_att02
05:17:43   7  ,att03 chf_att03
05:17:43   8  ,att04 chf_att04
05:17:43   9  ,att05 chf_att05
05:17:43  10  ,att06 chf_att06
05:17:43  11  ,att07 chf_att07
05:17:43  12  ,att08 chf_att08
05:17:43  13  ,att09 chf_att09
05:17:43  14  ,att10 chf_att10
05:17:43  15  ,att11 chf_att11
05:17:43  16  ,att12 chf_att12
05:17:43  17  ,att13 chf_att13
05:17:43  18  ,att14 chf_att14
05:17:43  19  ,att15 chf_att15
05:17:43  20  ,att16 chf_att16
05:17:43  21  ,att17 chf_att17
05:17:43  22  ,att18 chf_att18
05:17:43  23  ,att19 chf_att19
05:17:43  24  ,att20 chf_att20
05:17:43  25  ,att21 chf_att21
05:17:43  26  ,att22 chf_att22
05:17:43  27  ,att23 chf_att23
05:17:43  28  ,att24 chf_att24
05:17:43  29  ,att25 chf_att25
05:17:43  30  ,att26 chf_att26
05:17:43  31  ,att27 chf_att27
05:17:43  32  ,att28 chf_att28
05:17:43  33  ,att29 chf_att29
05:17:43  34  ,att30 chf_att30
05:17:43  35  ,att31 chf_att31
05:17:43  36  ,att32 chf_att32
05:17:43  37  ,att33 chf_att33
05:17:43  38  ,att34 chf_att34
05:17:43  39  ,att35 chf_att35
05:17:43  40  ,att36 chf_att36
05:17:43  41  ,att37 chf_att37
05:17:43  42  FROM svm6162
05:17:43  43  /

Table created.

Elapsed: 00:00:00.17
05:17:43 SQL> 
05:17:43 SQL> ANALYZE TABLE chf_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.43
05:17:43 SQL> 
05:17:43 SQL> -- rpt
05:17:43 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19654

Elapsed: 00:00:00.82
05:17:44 SQL> SELECT COUNT(*)FROM chf_att;

  COUNT(*)
----------
     19654

Elapsed: 00:00:00.00
05:17:44 SQL> 
05:17:44 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
