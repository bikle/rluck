
SQL*Plus: Release 11.2.0.1.0 Production on Wed Dec 29 02:07:12 2010

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

02:07:12 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.01
02:07:12 SQL> 02:07:12 SQL> --
02:07:12 SQL> -- eur610.sql
02:07:12 SQL> --
02:07:12 SQL> 
02:07:12 SQL> -- Creates views and tables for backtesting a forex SVM strategy
02:07:12 SQL> 
02:07:12 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.18
02:07:12 SQL> 
02:07:12 SQL> -- I created di5min here:
02:07:12 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
02:07:12 SQL> 
02:07:12 SQL> CREATE OR REPLACE VIEW svm6102 AS
02:07:12   2  SELECT
02:07:12   3  pair
02:07:12   4  ,ydate
02:07:12   5  ,prdate
02:07:12   6  ,rownum rnum -- acts as t in my time-series
02:07:12   7  ,clse
02:07:12   8  -- Derive a bunch of attributes from clse, the latest price:
02:07:12   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
02:07:12  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
02:07:12  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
02:07:12  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
02:07:12  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
02:07:12  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
02:07:12  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
02:07:12  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
02:07:12  17  --
02:07:12  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
02:07:12  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
02:07:12  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
02:07:12  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
02:07:12  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
02:07:12  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
02:07:12  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
02:07:12  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
02:07:12  26  --
02:07:12  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
02:07:12  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
02:07:12  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
02:07:12  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
02:07:12  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
02:07:12  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
02:07:12  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
02:07:12  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
02:07:12  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
02:07:12  36  FROM di5min WHERE pair LIKE'%eur%'
02:07:12  37  AND ydate > sysdate - 95
02:07:12  38  ORDER BY ydate
02:07:12  39  /

View created.

Elapsed: 00:00:00.30
02:07:12 SQL> 
02:07:12 SQL> -- rpt
02:07:12 SQL> 
02:07:12 SQL> SELECT
02:07:12   2  pair
02:07:12   3  ,COUNT(pair)
02:07:12   4  ,MIN(clse),MAX(clse)
02:07:12   5  ,MIN(avg6),MAX(avg6)
02:07:12   6  ,MIN(ydate),MAX(ydate)
02:07:12   7  FROM svm6102
02:07:12   8  GROUP BY pair
02:07:12   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_usd       19332    1.29735	   1.4273 1.29875103 1.42436233 2010-09-26 20:55:01 2010-12-29 02:00:00

Elapsed: 00:00:00.91
02:07:13 SQL> 
02:07:13 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
02:07:13 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.09
02:07:13 SQL> CREATE TABLE svm6122 COMPRESS AS
02:07:13   2  SELECT
02:07:13   3  pair
02:07:13   4  ,ydate
02:07:13   5  ,prdate
02:07:13   6  ,clse
02:07:13   7  -- g6 is important. I want to predict g6:
02:07:13   8  ,ld6 - clse g6
02:07:13   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
02:07:13  10  -- I want more attributes from the ones I derived above:
02:07:13  11  -- clse relation to moving-min
02:07:13  12  ,clse-min4  cm4
02:07:13  13  ,clse-min6  cm6
02:07:13  14  ,clse-min8  cm8
02:07:13  15  ,clse-min10 cm10
02:07:13  16  ,clse-min12 cm12
02:07:13  17  ,clse-min14 cm14
02:07:13  18  ,clse-min16 cm16
02:07:13  19  ,clse-min18 cm18
02:07:13  20  -- clse relation to moving-avg
02:07:13  21  ,clse-avg4  ca4
02:07:13  22  ,clse-avg6  ca6
02:07:13  23  ,clse-avg8  ca8
02:07:13  24  ,clse-avg10 ca10
02:07:13  25  ,clse-avg12 ca12
02:07:13  26  ,clse-avg14 ca14
02:07:13  27  ,clse-avg16 ca16
02:07:13  28  ,clse-avg18 ca18
02:07:13  29  -- clse relation to moving-max
02:07:13  30  ,clse-max4  cx4
02:07:13  31  ,clse-max6  cx6
02:07:13  32  ,clse-max8  cx8
02:07:13  33  ,clse-max10 cx10
02:07:13  34  ,clse-max12 cx12
02:07:13  35  ,clse-max14 cx14
02:07:13  36  ,clse-max16 cx16
02:07:13  37  ,clse-max18 cx18
02:07:13  38  -- Derive more attributes.
02:07:13  39  -- I want to use CORR() here to help SVM see the shape of the series.
02:07:13  40  -- But COVAR_POP is more stable:
02:07:13  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
02:07:13  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
02:07:13  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
02:07:13  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
02:07:13  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
02:07:13  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
02:07:13  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
02:07:13  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
02:07:13  49  -- Derive date related attributes:
02:07:13  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
02:07:13  51  ,0+TO_CHAR(ydate,'D')d
02:07:13  52  ,0+TO_CHAR(ydate,'W')w
02:07:13  53  -- mpm stands for minutes-past-midnight:
02:07:13  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
02:07:13  55  -- mph stands for minutes-past-hour:
02:07:13  56  ,0+TO_CHAR(ydate,'MI')mph
02:07:13  57  FROM svm6102
02:07:13  58  ORDER BY ydate
02:07:13  59  /

Table created.

Elapsed: 00:00:02.46
02:07:16 SQL> 
02:07:16 SQL> -- rpt
02:07:16 SQL> 
02:07:16 SQL> SELECT
02:07:16   2  pair
02:07:16   3  ,COUNT(pair)
02:07:16   4  ,MIN(clse),MAX(clse)
02:07:16   5  ,MIN(ydate),MAX(ydate)
02:07:16   6  FROM svm6122
02:07:16   7  GROUP BY pair
02:07:16   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_usd       19332    1.29735	   1.4273 2010-09-26 20:55:01 2010-12-29 02:00:00

Elapsed: 00:00:00.18
02:07:16 SQL> 
02:07:16 SQL> -- Prepare for derivation of NTILE based params:
02:07:16 SQL> 
02:07:16 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.08
02:07:16 SQL> CREATE TABLE svm6142 COMPRESS AS
02:07:16   2  SELECT
02:07:16   3  pair
02:07:16   4  ,ydate
02:07:16   5  ,prdate
02:07:16   6  ,clse
02:07:16   7  ,g6
02:07:16   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
02:07:16   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
02:07:16  10  ,CASE WHEN trend IS NULL THEN 1
02:07:16  11  	    WHEN trend =0      THEN 1
02:07:16  12  	    ELSE trend END trend
02:07:16  13  ,cm4
02:07:16  14  ,cm6
02:07:16  15  ,cm8
02:07:16  16  ,cm10
02:07:16  17  ,cm12
02:07:16  18  ,cm14
02:07:16  19  ,cm16
02:07:16  20  ,cm18
02:07:16  21  --
02:07:16  22  ,ca4
02:07:16  23  ,ca6
02:07:16  24  ,ca8
02:07:16  25  ,ca10
02:07:16  26  ,ca12
02:07:16  27  ,ca14
02:07:16  28  ,ca16
02:07:16  29  ,ca18
02:07:16  30  --
02:07:16  31  ,cx4
02:07:16  32  ,cx6
02:07:16  33  ,cx8
02:07:16  34  ,cx10
02:07:16  35  ,cx12
02:07:16  36  ,cx14
02:07:16  37  ,cx16
02:07:16  38  ,cx18
02:07:16  39  --
02:07:16  40  ,crr4
02:07:16  41  ,crr6
02:07:16  42  ,crr8
02:07:16  43  ,crr10
02:07:16  44  ,crr12
02:07:16  45  ,crr14
02:07:16  46  ,crr16
02:07:16  47  ,crr18
02:07:16  48  --
02:07:16  49  ,hh
02:07:16  50  ,d
02:07:16  51  ,w
02:07:16  52  ,mpm
02:07:16  53  ,mph
02:07:16  54  FROM svm6122
02:07:16  55  ORDER BY ydate
02:07:16  56  /

Table created.

Elapsed: 00:00:00.36
02:07:16 SQL> 
02:07:16 SQL> -- rpt
02:07:16 SQL> 
02:07:16 SQL> SELECT
02:07:16   2  pair
02:07:16   3  ,trend
02:07:16   4  ,gatt
02:07:16   5  ,COUNT(pair)
02:07:16   6  ,AVG(g6)
02:07:16   7  FROM svm6142
02:07:16   8  GROUP BY pair,trend,gatt
02:07:16   9  ORDER BY pair,trend,gatt
02:07:16  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6112  -.0030932
eur_usd 	-1 up	      3632 .004483797
eur_usd 	-1		63
eur_usd 	 1 nup	      5871 -.00319026
eur_usd 	 1 up	      3645 .005140343
eur_usd 	 1		 9

6 rows selected.

Elapsed: 00:00:00.12
02:07:17 SQL> 
02:07:17 SQL> 
02:07:17 SQL> -- Derive NTILE based params:
02:07:17 SQL> 
02:07:17 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.88
02:07:17 SQL> CREATE TABLE svm6162 COMPRESS AS
02:07:17   2  SELECT
02:07:17   3  pair
02:07:17   4  ,ydate
02:07:17   5  ,prdate
02:07:17   6  ,clse
02:07:17   7  ,g6
02:07:17   8  ,gatt
02:07:17   9  ,gattn
02:07:17  10  ,trend
02:07:17  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
02:07:17  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
02:07:17  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
02:07:17  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
02:07:17  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
02:07:17  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
02:07:17  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
02:07:17  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
02:07:17  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
02:07:17  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
02:07:17  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
02:07:17  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
02:07:17  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
02:07:17  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
02:07:17  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
02:07:17  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
02:07:17  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
02:07:17  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
02:07:17  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
02:07:17  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
02:07:17  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
02:07:17  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
02:07:17  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
02:07:17  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
02:07:17  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
02:07:17  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
02:07:17  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
02:07:17  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
02:07:17  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
02:07:17  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
02:07:17  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
02:07:17  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
02:07:17  43  ,hh  att32
02:07:17  44  ,d   att33
02:07:17  45  ,w   att34
02:07:17  46  ,mpm att35
02:07:17  47  ,mph att36
02:07:17  48  ,trend att37
02:07:17  49  FROM svm6142
02:07:17  50  ORDER BY ydate
02:07:17  51  /

Table created.

Elapsed: 00:00:04.71
02:07:22 SQL> 
02:07:22 SQL> -- rpt
02:07:22 SQL> 
02:07:22 SQL> SELECT
02:07:22   2  pair
02:07:22   3  ,trend
02:07:22   4  ,gatt
02:07:22   5  ,COUNT(pair)
02:07:22   6  ,AVG(g6)
02:07:22   7  FROM svm6162
02:07:22   8  GROUP BY pair,trend,gatt
02:07:22   9  ORDER BY pair,trend,gatt
02:07:22  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6112  -.0030932
eur_usd 	-1 up	      3632 .004483797
eur_usd 	-1		63
eur_usd 	 1 nup	      5871 -.00319026
eur_usd 	 1 up	      3645 .005140343
eur_usd 	 1		 9

6 rows selected.

Elapsed: 00:00:00.02
02:07:22 SQL> 
02:07:22 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.32
02:07:22 SQL> CREATE TABLE modsrc COMPRESS AS
02:07:22   2  SELECT
02:07:22   3  pair
02:07:22   4  ,ydate
02:07:22   5  ,prdate
02:07:22   6  ,trend
02:07:22   7  ,g6
02:07:22   8  ,gatt
02:07:22   9  ,gattn
02:07:22  10  FROM svm6162
02:07:22  11  /

Table created.

Elapsed: 00:00:00.08
02:07:23 SQL> 
02:07:23 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.27
02:07:23 SQL> 
02:07:23 SQL> DROP   TABLE eur_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
02:07:23 SQL> CREATE TABLE eur_ms610 COMPRESS AS
02:07:23   2  SELECT
02:07:23   3  ydate
02:07:23   4  ,trend eur_trend
02:07:23   5  ,g6    eur_g6
02:07:23   6  ,gatt  eur_gatt
02:07:23   7  ,gattn eur_gattn
02:07:23   8  FROM modsrc
02:07:23   9  /

Table created.

Elapsed: 00:00:00.07
02:07:23 SQL> 
02:07:23 SQL> ANALYZE TABLE eur_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
02:07:23 SQL> 
02:07:23 SQL> -- I need a copy of the attributes:
02:07:23 SQL> 
02:07:23 SQL> 
02:07:23 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.05
02:07:23 SQL> CREATE TABLE eur_att COMPRESS AS
02:07:23   2  SELECT
02:07:23   3  ydate
02:07:23   4  ,att00 eur_att00
02:07:23   5  ,att01 eur_att01
02:07:23   6  ,att02 eur_att02
02:07:23   7  ,att03 eur_att03
02:07:23   8  ,att04 eur_att04
02:07:23   9  ,att05 eur_att05
02:07:23  10  ,att06 eur_att06
02:07:23  11  ,att07 eur_att07
02:07:23  12  ,att08 eur_att08
02:07:23  13  ,att09 eur_att09
02:07:23  14  ,att10 eur_att10
02:07:23  15  ,att11 eur_att11
02:07:23  16  ,att12 eur_att12
02:07:23  17  ,att13 eur_att13
02:07:23  18  ,att14 eur_att14
02:07:23  19  ,att15 eur_att15
02:07:23  20  ,att16 eur_att16
02:07:23  21  ,att17 eur_att17
02:07:23  22  ,att18 eur_att18
02:07:23  23  ,att19 eur_att19
02:07:23  24  ,att20 eur_att20
02:07:23  25  ,att21 eur_att21
02:07:23  26  ,att22 eur_att22
02:07:23  27  ,att23 eur_att23
02:07:23  28  ,att24 eur_att24
02:07:23  29  ,att25 eur_att25
02:07:23  30  ,att26 eur_att26
02:07:23  31  ,att27 eur_att27
02:07:23  32  ,att28 eur_att28
02:07:23  33  ,att29 eur_att29
02:07:23  34  ,att30 eur_att30
02:07:23  35  ,att31 eur_att31
02:07:23  36  ,att32 eur_att32
02:07:23  37  ,att33 eur_att33
02:07:23  38  ,att34 eur_att34
02:07:23  39  ,att35 eur_att35
02:07:23  40  ,att36 eur_att36
02:07:23  41  ,att37 eur_att37
02:07:23  42  FROM svm6162
02:07:23  43  /

Table created.

Elapsed: 00:00:00.18
02:07:23 SQL> 
02:07:23 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.50
02:07:24 SQL> 
02:07:24 SQL> -- rpt
02:07:24 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19332

Elapsed: 00:00:00.84
02:07:25 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     19332

Elapsed: 00:00:00.00
02:07:25 SQL> 
02:07:25 SQL> --
02:07:25 SQL> -- aud610.sql
02:07:25 SQL> --
02:07:25 SQL> 
02:07:25 SQL> -- Creates views and tables for backtesting a forex SVM strategy
02:07:25 SQL> 
02:07:25 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.58
02:07:25 SQL> 
02:07:25 SQL> -- I created di5min here:
02:07:25 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
02:07:25 SQL> 
02:07:25 SQL> CREATE OR REPLACE VIEW svm6102 AS
02:07:25   2  SELECT
02:07:25   3  pair
02:07:25   4  ,ydate
02:07:25   5  ,prdate
02:07:25   6  ,rownum rnum -- acts as t in my time-series
02:07:25   7  ,clse
02:07:25   8  -- Derive a bunch of attributes from clse, the latest price:
02:07:25   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
02:07:25  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
02:07:25  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
02:07:25  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
02:07:25  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
02:07:25  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
02:07:25  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
02:07:25  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
02:07:25  17  --
02:07:25  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
02:07:25  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
02:07:25  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
02:07:25  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
02:07:25  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
02:07:25  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
02:07:25  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
02:07:25  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
02:07:25  26  --
02:07:25  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
02:07:25  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
02:07:25  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
02:07:25  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
02:07:25  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
02:07:25  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
02:07:25  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
02:07:25  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
02:07:25  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
02:07:25  36  FROM di5min WHERE pair LIKE'%aud%'
02:07:25  37  AND ydate > sysdate - 95
02:07:25  38  ORDER BY ydate
02:07:25  39  /

View created.

Elapsed: 00:00:00.05
02:07:25 SQL> 
02:07:25 SQL> -- rpt
02:07:25 SQL> 
02:07:25 SQL> SELECT
02:07:25   2  pair
02:07:25   3  ,COUNT(pair)
02:07:25   4  ,MIN(clse),MAX(clse)
02:07:25   5  ,MIN(avg6),MAX(avg6)
02:07:25   6  ,MIN(ydate),MAX(ydate)
02:07:25   7  FROM svm6102
02:07:25   8  GROUP BY pair
02:07:25   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
aud_usd       19329	.95405	   1.0181 .957141438 1.01556438 2010-09-26 20:55:01 2010-12-29 02:00:00

Elapsed: 00:00:00.84
02:07:26 SQL> 
02:07:26 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
02:07:26 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.32
02:07:26 SQL> CREATE TABLE svm6122 COMPRESS AS
02:07:26   2  SELECT
02:07:26   3  pair
02:07:26   4  ,ydate
02:07:26   5  ,prdate
02:07:26   6  ,clse
02:07:26   7  -- g6 is important. I want to predict g6:
02:07:26   8  ,ld6 - clse g6
02:07:26   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
02:07:26  10  -- I want more attributes from the ones I derived above:
02:07:26  11  -- clse relation to moving-min
02:07:26  12  ,clse-min4  cm4
02:07:26  13  ,clse-min6  cm6
02:07:26  14  ,clse-min8  cm8
02:07:26  15  ,clse-min10 cm10
02:07:26  16  ,clse-min12 cm12
02:07:26  17  ,clse-min14 cm14
02:07:26  18  ,clse-min16 cm16
02:07:26  19  ,clse-min18 cm18
02:07:26  20  -- clse relation to moving-avg
02:07:26  21  ,clse-avg4  ca4
02:07:26  22  ,clse-avg6  ca6
02:07:26  23  ,clse-avg8  ca8
02:07:26  24  ,clse-avg10 ca10
02:07:26  25  ,clse-avg12 ca12
02:07:26  26  ,clse-avg14 ca14
02:07:26  27  ,clse-avg16 ca16
02:07:26  28  ,clse-avg18 ca18
02:07:26  29  -- clse relation to moving-max
02:07:26  30  ,clse-max4  cx4
02:07:26  31  ,clse-max6  cx6
02:07:26  32  ,clse-max8  cx8
02:07:26  33  ,clse-max10 cx10
02:07:26  34  ,clse-max12 cx12
02:07:26  35  ,clse-max14 cx14
02:07:26  36  ,clse-max16 cx16
02:07:26  37  ,clse-max18 cx18
02:07:26  38  -- Derive more attributes.
02:07:26  39  -- I want to use CORR() here to help SVM see the shape of the series.
02:07:26  40  -- But COVAR_POP is more stable:
02:07:26  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
02:07:26  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
02:07:26  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
02:07:26  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
02:07:26  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
02:07:26  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
02:07:26  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
02:07:26  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
02:07:26  49  -- Derive date related attributes:
02:07:26  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
02:07:26  51  ,0+TO_CHAR(ydate,'D')d
02:07:26  52  ,0+TO_CHAR(ydate,'W')w
02:07:26  53  -- mpm stands for minutes-past-midnight:
02:07:26  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
02:07:26  55  -- mph stands for minutes-past-hour:
02:07:26  56  ,0+TO_CHAR(ydate,'MI')mph
02:07:26  57  FROM svm6102
02:07:26  58  ORDER BY ydate
02:07:26  59  /

Table created.

Elapsed: 00:00:02.03
02:07:28 SQL> 
02:07:28 SQL> -- rpt
02:07:28 SQL> 
02:07:28 SQL> SELECT
02:07:28   2  pair
02:07:28   3  ,COUNT(pair)
02:07:28   4  ,MIN(clse),MAX(clse)
02:07:28   5  ,MIN(ydate),MAX(ydate)
02:07:28   6  FROM svm6122
02:07:28   7  GROUP BY pair
02:07:28   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
aud_usd       19329	.95405	   1.0181 2010-09-26 20:55:01 2010-12-29 02:00:00

Elapsed: 00:00:00.06
02:07:29 SQL> 
02:07:29 SQL> -- Prepare for derivation of NTILE based params:
02:07:29 SQL> 
02:07:29 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.23
02:07:29 SQL> CREATE TABLE svm6142 COMPRESS AS
02:07:29   2  SELECT
02:07:29   3  pair
02:07:29   4  ,ydate
02:07:29   5  ,prdate
02:07:29   6  ,clse
02:07:29   7  ,g6
02:07:29   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
02:07:29   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
02:07:29  10  ,CASE WHEN trend IS NULL THEN 1
02:07:29  11  	    WHEN trend =0      THEN 1
02:07:29  12  	    ELSE trend END trend
02:07:29  13  ,cm4
02:07:29  14  ,cm6
02:07:29  15  ,cm8
02:07:29  16  ,cm10
02:07:29  17  ,cm12
02:07:29  18  ,cm14
02:07:29  19  ,cm16
02:07:29  20  ,cm18
02:07:29  21  --
02:07:29  22  ,ca4
02:07:29  23  ,ca6
02:07:29  24  ,ca8
02:07:29  25  ,ca10
02:07:29  26  ,ca12
02:07:29  27  ,ca14
02:07:29  28  ,ca16
02:07:29  29  ,ca18
02:07:29  30  --
02:07:29  31  ,cx4
02:07:29  32  ,cx6
02:07:29  33  ,cx8
02:07:29  34  ,cx10
02:07:29  35  ,cx12
02:07:29  36  ,cx14
02:07:29  37  ,cx16
02:07:29  38  ,cx18
02:07:29  39  --
02:07:29  40  ,crr4
02:07:29  41  ,crr6
02:07:29  42  ,crr8
02:07:29  43  ,crr10
02:07:29  44  ,crr12
02:07:29  45  ,crr14
02:07:29  46  ,crr16
02:07:29  47  ,crr18
02:07:29  48  --
02:07:29  49  ,hh
02:07:29  50  ,d
02:07:29  51  ,w
02:07:29  52  ,mpm
02:07:29  53  ,mph
02:07:29  54  FROM svm6122
02:07:29  55  ORDER BY ydate
02:07:29  56  /

Table created.

Elapsed: 00:00:00.36
02:07:29 SQL> 
02:07:29 SQL> -- rpt
02:07:29 SQL> 
02:07:29 SQL> SELECT
02:07:29   2  pair
02:07:29   3  ,trend
02:07:29   4  ,gatt
02:07:29   5  ,COUNT(pair)
02:07:29   6  ,AVG(g6)
02:07:29   7  FROM svm6142
02:07:29   8  GROUP BY pair,trend,gatt
02:07:29   9  ORDER BY pair,trend,gatt
02:07:29  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5159 -.00214452
aud_usd 	-1 up	      3772 .003741417
aud_usd 	-1		72
aud_usd 	 1 nup	      6679 -.00213644
aud_usd 	 1 up	      3647 .004062925

Elapsed: 00:00:00.06
02:07:29 SQL> 
02:07:29 SQL> 
02:07:29 SQL> -- Derive NTILE based params:
02:07:29 SQL> 
02:07:29 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:01.17
02:07:30 SQL> CREATE TABLE svm6162 COMPRESS AS
02:07:30   2  SELECT
02:07:30   3  pair
02:07:30   4  ,ydate
02:07:30   5  ,prdate
02:07:30   6  ,clse
02:07:30   7  ,g6
02:07:30   8  ,gatt
02:07:30   9  ,gattn
02:07:30  10  ,trend
02:07:30  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
02:07:30  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
02:07:30  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
02:07:30  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
02:07:30  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
02:07:30  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
02:07:30  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
02:07:30  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
02:07:30  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
02:07:30  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
02:07:30  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
02:07:30  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
02:07:30  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
02:07:30  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
02:07:30  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
02:07:30  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
02:07:30  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
02:07:30  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
02:07:30  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
02:07:30  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
02:07:30  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
02:07:30  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
02:07:30  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
02:07:30  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
02:07:30  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
02:07:30  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
02:07:30  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
02:07:30  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
02:07:30  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
02:07:30  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
02:07:30  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
02:07:30  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
02:07:30  43  ,hh  att32
02:07:30  44  ,d   att33
02:07:30  45  ,w   att34
02:07:30  46  ,mpm att35
02:07:30  47  ,mph att36
02:07:30  48  ,trend att37
02:07:30  49  FROM svm6142
02:07:30  50  ORDER BY ydate
02:07:30  51  /

Table created.

Elapsed: 00:00:04.63
02:07:35 SQL> 
02:07:35 SQL> -- rpt
02:07:35 SQL> 
02:07:35 SQL> SELECT
02:07:35   2  pair
02:07:35   3  ,trend
02:07:35   4  ,gatt
02:07:35   5  ,COUNT(pair)
02:07:35   6  ,AVG(g6)
02:07:35   7  FROM svm6162
02:07:35   8  GROUP BY pair,trend,gatt
02:07:35   9  ORDER BY pair,trend,gatt
02:07:35  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5159 -.00214452
aud_usd 	-1 up	      3772 .003741417
aud_usd 	-1		72
aud_usd 	 1 nup	      6679 -.00213644
aud_usd 	 1 up	      3647 .004062925

Elapsed: 00:00:00.03
02:07:35 SQL> 
02:07:35 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.18
02:07:35 SQL> CREATE TABLE modsrc COMPRESS AS
02:07:35   2  SELECT
02:07:35   3  pair
02:07:35   4  ,ydate
02:07:35   5  ,prdate
02:07:35   6  ,trend
02:07:35   7  ,g6
02:07:35   8  ,gatt
02:07:35   9  ,gattn
02:07:35  10  FROM svm6162
02:07:35  11  /

Table created.

Elapsed: 00:00:00.08
02:07:35 SQL> 
02:07:35 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.26
02:07:36 SQL> 
02:07:36 SQL> DROP   TABLE aud_ms610 ;

Table dropped.

Elapsed: 00:00:00.09
02:07:36 SQL> CREATE TABLE aud_ms610 COMPRESS AS
02:07:36   2  SELECT
02:07:36   3  ydate
02:07:36   4  ,trend aud_trend
02:07:36   5  ,g6    aud_g6
02:07:36   6  ,gatt  aud_gatt
02:07:36   7  ,gattn aud_gattn
02:07:36   8  FROM modsrc
02:07:36   9  /

Table created.

Elapsed: 00:00:00.08
02:07:36 SQL> 
02:07:36 SQL> ANALYZE TABLE aud_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
02:07:36 SQL> 
02:07:36 SQL> -- I need a copy of the attributes:
02:07:36 SQL> 
02:07:36 SQL> 
02:07:36 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.12
02:07:36 SQL> CREATE TABLE aud_att COMPRESS AS
02:07:36   2  SELECT
02:07:36   3  ydate
02:07:36   4  ,att00 aud_att00
02:07:36   5  ,att01 aud_att01
02:07:36   6  ,att02 aud_att02
02:07:36   7  ,att03 aud_att03
02:07:36   8  ,att04 aud_att04
02:07:36   9  ,att05 aud_att05
02:07:36  10  ,att06 aud_att06
02:07:36  11  ,att07 aud_att07
02:07:36  12  ,att08 aud_att08
02:07:36  13  ,att09 aud_att09
02:07:36  14  ,att10 aud_att10
02:07:36  15  ,att11 aud_att11
02:07:36  16  ,att12 aud_att12
02:07:36  17  ,att13 aud_att13
02:07:36  18  ,att14 aud_att14
02:07:36  19  ,att15 aud_att15
02:07:36  20  ,att16 aud_att16
02:07:36  21  ,att17 aud_att17
02:07:36  22  ,att18 aud_att18
02:07:36  23  ,att19 aud_att19
02:07:36  24  ,att20 aud_att20
02:07:36  25  ,att21 aud_att21
02:07:36  26  ,att22 aud_att22
02:07:36  27  ,att23 aud_att23
02:07:36  28  ,att24 aud_att24
02:07:36  29  ,att25 aud_att25
02:07:36  30  ,att26 aud_att26
02:07:36  31  ,att27 aud_att27
02:07:36  32  ,att28 aud_att28
02:07:36  33  ,att29 aud_att29
02:07:36  34  ,att30 aud_att30
02:07:36  35  ,att31 aud_att31
02:07:36  36  ,att32 aud_att32
02:07:36  37  ,att33 aud_att33
02:07:36  38  ,att34 aud_att34
02:07:36  39  ,att35 aud_att35
02:07:36  40  ,att36 aud_att36
02:07:36  41  ,att37 aud_att37
02:07:36  42  FROM svm6162
02:07:36  43  /

Table created.

Elapsed: 00:00:00.18
02:07:36 SQL> 
02:07:36 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.55
02:07:37 SQL> 
02:07:37 SQL> -- rpt
02:07:37 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19329

Elapsed: 00:00:00.84
02:07:38 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     19329

Elapsed: 00:00:00.01
02:07:38 SQL> 
02:07:38 SQL> --
02:07:38 SQL> -- gbp610.sql
02:07:38 SQL> --
02:07:38 SQL> 
02:07:38 SQL> -- Creates views and tables for backtesting a forex SVM strategy
02:07:38 SQL> 
02:07:38 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:01.91
02:07:39 SQL> 
02:07:39 SQL> -- I created di5min here:
02:07:39 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
02:07:39 SQL> 
02:07:39 SQL> CREATE OR REPLACE VIEW svm6102 AS
02:07:39   2  SELECT
02:07:39   3  pair
02:07:39   4  ,ydate
02:07:39   5  ,prdate
02:07:39   6  ,rownum rnum -- acts as t in my time-series
02:07:39   7  ,clse
02:07:39   8  -- Derive a bunch of attributes from clse, the latest price:
02:07:39   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
02:07:39  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
02:07:39  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
02:07:39  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
02:07:39  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
02:07:39  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
02:07:39  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
02:07:39  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
02:07:39  17  --
02:07:39  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
02:07:39  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
02:07:39  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
02:07:39  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
02:07:39  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
02:07:39  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
02:07:39  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
02:07:39  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
02:07:39  26  --
02:07:39  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
02:07:39  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
02:07:39  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
02:07:39  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
02:07:39  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
02:07:39  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
02:07:39  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
02:07:39  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
02:07:39  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
02:07:39  36  FROM di5min WHERE pair LIKE'%gbp%'
02:07:39  37  AND ydate > sysdate - 95
02:07:39  38  ORDER BY ydate
02:07:39  39  /

View created.

Elapsed: 00:00:00.13
02:07:40 SQL> 
02:07:40 SQL> -- rpt
02:07:40 SQL> 
02:07:40 SQL> SELECT
02:07:40   2  pair
02:07:40   3  ,COUNT(pair)
02:07:40   4  ,MIN(clse),MAX(clse)
02:07:40   5  ,MIN(avg6),MAX(avg6)
02:07:40   6  ,MIN(ydate),MAX(ydate)
02:07:40   7  FROM svm6102
02:07:40   8  GROUP BY pair
02:07:40   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
gbp_usd       19331   1.535325	   1.6295 1.53696747 1.62716986 2010-09-26 20:55:01 2010-12-29 02:00:00

Elapsed: 00:00:00.86
02:07:40 SQL> 
02:07:40 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
02:07:40 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.76
02:07:41 SQL> CREATE TABLE svm6122 COMPRESS AS
02:07:41   2  SELECT
02:07:41   3  pair
02:07:41   4  ,ydate
02:07:41   5  ,prdate
02:07:41   6  ,clse
02:07:41   7  -- g6 is important. I want to predict g6:
02:07:41   8  ,ld6 - clse g6
02:07:41   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
02:07:41  10  -- I want more attributes from the ones I derived above:
02:07:41  11  -- clse relation to moving-min
02:07:41  12  ,clse-min4  cm4
02:07:41  13  ,clse-min6  cm6
02:07:41  14  ,clse-min8  cm8
02:07:41  15  ,clse-min10 cm10
02:07:41  16  ,clse-min12 cm12
02:07:41  17  ,clse-min14 cm14
02:07:41  18  ,clse-min16 cm16
02:07:41  19  ,clse-min18 cm18
02:07:41  20  -- clse relation to moving-avg
02:07:41  21  ,clse-avg4  ca4
02:07:41  22  ,clse-avg6  ca6
02:07:41  23  ,clse-avg8  ca8
02:07:41  24  ,clse-avg10 ca10
02:07:41  25  ,clse-avg12 ca12
02:07:41  26  ,clse-avg14 ca14
02:07:41  27  ,clse-avg16 ca16
02:07:41  28  ,clse-avg18 ca18
02:07:41  29  -- clse relation to moving-max
02:07:41  30  ,clse-max4  cx4
02:07:41  31  ,clse-max6  cx6
02:07:41  32  ,clse-max8  cx8
02:07:41  33  ,clse-max10 cx10
02:07:41  34  ,clse-max12 cx12
02:07:41  35  ,clse-max14 cx14
02:07:41  36  ,clse-max16 cx16
02:07:41  37  ,clse-max18 cx18
02:07:41  38  -- Derive more attributes.
02:07:41  39  -- I want to use CORR() here to help SVM see the shape of the series.
02:07:41  40  -- But COVAR_POP is more stable:
02:07:41  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
02:07:41  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
02:07:41  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
02:07:41  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
02:07:41  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
02:07:41  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
02:07:41  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
02:07:41  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
02:07:41  49  -- Derive date related attributes:
02:07:41  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
02:07:41  51  ,0+TO_CHAR(ydate,'D')d
02:07:41  52  ,0+TO_CHAR(ydate,'W')w
02:07:41  53  -- mpm stands for minutes-past-midnight:
02:07:41  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
02:07:41  55  -- mph stands for minutes-past-hour:
02:07:41  56  ,0+TO_CHAR(ydate,'MI')mph
02:07:41  57  FROM svm6102
02:07:41  58  ORDER BY ydate
02:07:41  59  /

Table created.

Elapsed: 00:00:02.08
02:07:43 SQL> 
02:07:43 SQL> -- rpt
02:07:43 SQL> 
02:07:43 SQL> SELECT
02:07:43   2  pair
02:07:43   3  ,COUNT(pair)
02:07:43   4  ,MIN(clse),MAX(clse)
02:07:43   5  ,MIN(ydate),MAX(ydate)
02:07:43   6  FROM svm6122
02:07:43   7  GROUP BY pair
02:07:43   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
gbp_usd       19331   1.535325	   1.6295 2010-09-26 20:55:01 2010-12-29 02:00:00

Elapsed: 00:00:00.37
02:07:44 SQL> 
02:07:44 SQL> -- Prepare for derivation of NTILE based params:
02:07:44 SQL> 
02:07:44 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.27
02:07:44 SQL> CREATE TABLE svm6142 COMPRESS AS
02:07:44   2  SELECT
02:07:44   3  pair
02:07:44   4  ,ydate
02:07:44   5  ,prdate
02:07:44   6  ,clse
02:07:44   7  ,g6
02:07:44   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
02:07:44   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
02:07:44  10  ,CASE WHEN trend IS NULL THEN 1
02:07:44  11  	    WHEN trend =0      THEN 1
02:07:44  12  	    ELSE trend END trend
02:07:44  13  ,cm4
02:07:44  14  ,cm6
02:07:44  15  ,cm8
02:07:44  16  ,cm10
02:07:44  17  ,cm12
02:07:44  18  ,cm14
02:07:44  19  ,cm16
02:07:44  20  ,cm18
02:07:44  21  --
02:07:44  22  ,ca4
02:07:44  23  ,ca6
02:07:44  24  ,ca8
02:07:44  25  ,ca10
02:07:44  26  ,ca12
02:07:44  27  ,ca14
02:07:44  28  ,ca16
02:07:44  29  ,ca18
02:07:44  30  --
02:07:44  31  ,cx4
02:07:44  32  ,cx6
02:07:44  33  ,cx8
02:07:44  34  ,cx10
02:07:44  35  ,cx12
02:07:44  36  ,cx14
02:07:44  37  ,cx16
02:07:44  38  ,cx18
02:07:44  39  --
02:07:44  40  ,crr4
02:07:44  41  ,crr6
02:07:44  42  ,crr8
02:07:44  43  ,crr10
02:07:44  44  ,crr12
02:07:44  45  ,crr14
02:07:44  46  ,crr16
02:07:44  47  ,crr18
02:07:44  48  --
02:07:44  49  ,hh
02:07:44  50  ,d
02:07:44  51  ,w
02:07:44  52  ,mpm
02:07:44  53  ,mph
02:07:44  54  FROM svm6122
02:07:44  55  ORDER BY ydate
02:07:44  56  /

Table created.

Elapsed: 00:00:00.42
02:07:44 SQL> 
02:07:44 SQL> -- rpt
02:07:44 SQL> 
02:07:44 SQL> SELECT
02:07:44   2  pair
02:07:44   3  ,trend
02:07:44   4  ,gatt
02:07:44   5  ,COUNT(pair)
02:07:44   6  ,AVG(g6)
02:07:44   7  FROM svm6142
02:07:44   8  GROUP BY pair,trend,gatt
02:07:44   9  ORDER BY pair,trend,gatt
02:07:44  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6292 -.00256202
gbp_usd 	-1 up	      3482 .004254958
gbp_usd 	-1		40
gbp_usd 	 1 nup	      6124 -.00270402
gbp_usd 	 1 up	      3361 .004356966
gbp_usd 	 1		32

6 rows selected.

Elapsed: 00:00:00.32
02:07:45 SQL> 
02:07:45 SQL> 
02:07:45 SQL> -- Derive NTILE based params:
02:07:45 SQL> 
02:07:45 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.17
02:07:45 SQL> CREATE TABLE svm6162 COMPRESS AS
02:07:45   2  SELECT
02:07:45   3  pair
02:07:45   4  ,ydate
02:07:45   5  ,prdate
02:07:45   6  ,clse
02:07:45   7  ,g6
02:07:45   8  ,gatt
02:07:45   9  ,gattn
02:07:45  10  ,trend
02:07:45  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
02:07:45  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
02:07:45  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
02:07:45  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
02:07:45  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
02:07:45  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
02:07:45  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
02:07:45  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
02:07:45  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
02:07:45  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
02:07:45  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
02:07:45  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
02:07:45  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
02:07:45  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
02:07:45  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
02:07:45  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
02:07:45  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
02:07:45  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
02:07:45  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
02:07:45  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
02:07:45  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
02:07:45  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
02:07:45  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
02:07:45  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
02:07:45  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
02:07:45  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
02:07:45  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
02:07:45  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
02:07:45  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
02:07:45  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
02:07:45  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
02:07:45  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
02:07:45  43  ,hh  att32
02:07:45  44  ,d   att33
02:07:45  45  ,w   att34
02:07:45  46  ,mpm att35
02:07:45  47  ,mph att36
02:07:45  48  ,trend att37
02:07:45  49  FROM svm6142
02:07:45  50  ORDER BY ydate
02:07:45  51  /

Table created.

Elapsed: 00:00:04.64
02:07:50 SQL> 
02:07:50 SQL> -- rpt
02:07:50 SQL> 
02:07:50 SQL> SELECT
02:07:50   2  pair
02:07:50   3  ,trend
02:07:50   4  ,gatt
02:07:50   5  ,COUNT(pair)
02:07:50   6  ,AVG(g6)
02:07:50   7  FROM svm6162
02:07:50   8  GROUP BY pair,trend,gatt
02:07:50   9  ORDER BY pair,trend,gatt
02:07:50  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6292 -.00256202
gbp_usd 	-1 up	      3482 .004254958
gbp_usd 	-1		40
gbp_usd 	 1 nup	      6124 -.00270402
gbp_usd 	 1 up	      3361 .004356966
gbp_usd 	 1		32

6 rows selected.

Elapsed: 00:00:00.03
02:07:50 SQL> 
02:07:50 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.18
02:07:50 SQL> CREATE TABLE modsrc COMPRESS AS
02:07:50   2  SELECT
02:07:50   3  pair
02:07:50   4  ,ydate
02:07:50   5  ,prdate
02:07:50   6  ,trend
02:07:50   7  ,g6
02:07:50   8  ,gatt
02:07:50   9  ,gattn
02:07:50  10  FROM svm6162
02:07:50  11  /

Table created.

Elapsed: 00:00:00.08
02:07:50 SQL> 
02:07:50 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
02:07:50 SQL> 
02:07:50 SQL> DROP   TABLE gbp_ms610 ;

Table dropped.

Elapsed: 00:00:00.07
02:07:50 SQL> CREATE TABLE gbp_ms610 COMPRESS AS
02:07:50   2  SELECT
02:07:50   3  ydate
02:07:50   4  ,trend gbp_trend
02:07:50   5  ,g6    gbp_g6
02:07:50   6  ,gatt  gbp_gatt
02:07:50   7  ,gattn gbp_gattn
02:07:50   8  FROM modsrc
02:07:50   9  /

Table created.

Elapsed: 00:00:00.07
02:07:50 SQL> 
02:07:50 SQL> ANALYZE TABLE gbp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
02:07:50 SQL> 
02:07:50 SQL> -- I need a copy of the attributes:
02:07:50 SQL> 
02:07:50 SQL> 
02:07:50 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.04
02:07:50 SQL> CREATE TABLE gbp_att COMPRESS AS
02:07:50   2  SELECT
02:07:50   3  ydate
02:07:50   4  ,att00 gbp_att00
02:07:50   5  ,att01 gbp_att01
02:07:50   6  ,att02 gbp_att02
02:07:50   7  ,att03 gbp_att03
02:07:50   8  ,att04 gbp_att04
02:07:50   9  ,att05 gbp_att05
02:07:50  10  ,att06 gbp_att06
02:07:50  11  ,att07 gbp_att07
02:07:50  12  ,att08 gbp_att08
02:07:50  13  ,att09 gbp_att09
02:07:50  14  ,att10 gbp_att10
02:07:50  15  ,att11 gbp_att11
02:07:50  16  ,att12 gbp_att12
02:07:50  17  ,att13 gbp_att13
02:07:50  18  ,att14 gbp_att14
02:07:50  19  ,att15 gbp_att15
02:07:50  20  ,att16 gbp_att16
02:07:50  21  ,att17 gbp_att17
02:07:50  22  ,att18 gbp_att18
02:07:50  23  ,att19 gbp_att19
02:07:50  24  ,att20 gbp_att20
02:07:50  25  ,att21 gbp_att21
02:07:50  26  ,att22 gbp_att22
02:07:50  27  ,att23 gbp_att23
02:07:50  28  ,att24 gbp_att24
02:07:50  29  ,att25 gbp_att25
02:07:50  30  ,att26 gbp_att26
02:07:50  31  ,att27 gbp_att27
02:07:50  32  ,att28 gbp_att28
02:07:50  33  ,att29 gbp_att29
02:07:50  34  ,att30 gbp_att30
02:07:50  35  ,att31 gbp_att31
02:07:50  36  ,att32 gbp_att32
02:07:50  37  ,att33 gbp_att33
02:07:50  38  ,att34 gbp_att34
02:07:50  39  ,att35 gbp_att35
02:07:50  40  ,att36 gbp_att36
02:07:50  41  ,att37 gbp_att37
02:07:50  42  FROM svm6162
02:07:50  43  /

Table created.

Elapsed: 00:00:00.19
02:07:51 SQL> 
02:07:51 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.44
02:07:51 SQL> 
02:07:51 SQL> -- rpt
02:07:51 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19331

Elapsed: 00:00:00.82
02:07:52 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     19331

Elapsed: 00:00:00.00
02:07:52 SQL> 
02:07:52 SQL> --
02:07:52 SQL> -- jpy610.sql
02:07:52 SQL> --
02:07:52 SQL> 
02:07:52 SQL> -- Creates views and tables for backtesting a forex SVM strategy
02:07:52 SQL> 
02:07:52 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.42
02:07:52 SQL> 
02:07:52 SQL> -- I created di5min here:
02:07:52 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
02:07:52 SQL> 
02:07:52 SQL> CREATE OR REPLACE VIEW svm6102 AS
02:07:52   2  SELECT
02:07:52   3  pair
02:07:52   4  ,ydate
02:07:52   5  ,prdate
02:07:52   6  ,rownum rnum -- acts as t in my time-series
02:07:52   7  ,clse
02:07:52   8  -- Derive a bunch of attributes from clse, the latest price:
02:07:52   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
02:07:52  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
02:07:52  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
02:07:52  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
02:07:52  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
02:07:52  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
02:07:52  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
02:07:52  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
02:07:52  17  --
02:07:52  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
02:07:52  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
02:07:52  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
02:07:52  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
02:07:52  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
02:07:52  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
02:07:52  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
02:07:52  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
02:07:52  26  --
02:07:52  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
02:07:52  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
02:07:52  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
02:07:52  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
02:07:52  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
02:07:52  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
02:07:52  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
02:07:52  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
02:07:52  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
02:07:52  36  FROM di5min WHERE pair LIKE'%jpy%'
02:07:52  37  AND ydate > sysdate - 95
02:07:52  38  ORDER BY ydate
02:07:52  39  /

View created.

Elapsed: 00:00:00.04
02:07:52 SQL> 
02:07:52 SQL> -- rpt
02:07:52 SQL> 
02:07:52 SQL> SELECT
02:07:52   2  pair
02:07:52   3  ,COUNT(pair)
02:07:52   4  ,MIN(clse),MAX(clse)
02:07:52   5  ,MIN(avg6),MAX(avg6)
02:07:52   6  ,MIN(ydate),MAX(ydate)
02:07:52   7  FROM svm6102
02:07:52   8  GROUP BY pair
02:07:52   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_jpy       19328	 80.25	   84.485 80.3595205 84.3105479 2010-09-26 20:55:01 2010-12-29 02:00:00

Elapsed: 00:00:00.90
02:07:53 SQL> 
02:07:53 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
02:07:53 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.23
02:07:53 SQL> CREATE TABLE svm6122 COMPRESS AS
02:07:53   2  SELECT
02:07:53   3  pair
02:07:53   4  ,ydate
02:07:53   5  ,prdate
02:07:53   6  ,clse
02:07:53   7  -- g6 is important. I want to predict g6:
02:07:53   8  ,ld6 - clse g6
02:07:53   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
02:07:53  10  -- I want more attributes from the ones I derived above:
02:07:53  11  -- clse relation to moving-min
02:07:53  12  ,clse-min4  cm4
02:07:53  13  ,clse-min6  cm6
02:07:53  14  ,clse-min8  cm8
02:07:53  15  ,clse-min10 cm10
02:07:53  16  ,clse-min12 cm12
02:07:53  17  ,clse-min14 cm14
02:07:53  18  ,clse-min16 cm16
02:07:53  19  ,clse-min18 cm18
02:07:53  20  -- clse relation to moving-avg
02:07:53  21  ,clse-avg4  ca4
02:07:53  22  ,clse-avg6  ca6
02:07:53  23  ,clse-avg8  ca8
02:07:53  24  ,clse-avg10 ca10
02:07:53  25  ,clse-avg12 ca12
02:07:53  26  ,clse-avg14 ca14
02:07:53  27  ,clse-avg16 ca16
02:07:53  28  ,clse-avg18 ca18
02:07:53  29  -- clse relation to moving-max
02:07:53  30  ,clse-max4  cx4
02:07:53  31  ,clse-max6  cx6
02:07:53  32  ,clse-max8  cx8
02:07:53  33  ,clse-max10 cx10
02:07:53  34  ,clse-max12 cx12
02:07:53  35  ,clse-max14 cx14
02:07:53  36  ,clse-max16 cx16
02:07:53  37  ,clse-max18 cx18
02:07:53  38  -- Derive more attributes.
02:07:53  39  -- I want to use CORR() here to help SVM see the shape of the series.
02:07:53  40  -- But COVAR_POP is more stable:
02:07:53  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
02:07:53  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
02:07:53  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
02:07:53  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
02:07:53  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
02:07:53  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
02:07:53  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
02:07:53  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
02:07:53  49  -- Derive date related attributes:
02:07:53  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
02:07:53  51  ,0+TO_CHAR(ydate,'D')d
02:07:53  52  ,0+TO_CHAR(ydate,'W')w
02:07:53  53  -- mpm stands for minutes-past-midnight:
02:07:53  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
02:07:53  55  -- mph stands for minutes-past-hour:
02:07:53  56  ,0+TO_CHAR(ydate,'MI')mph
02:07:53  57  FROM svm6102
02:07:53  58  ORDER BY ydate
02:07:53  59  /

Table created.

Elapsed: 00:00:02.04
02:07:55 SQL> 
02:07:55 SQL> -- rpt
02:07:55 SQL> 
02:07:55 SQL> SELECT
02:07:55   2  pair
02:07:55   3  ,COUNT(pair)
02:07:55   4  ,MIN(clse),MAX(clse)
02:07:55   5  ,MIN(ydate),MAX(ydate)
02:07:55   6  FROM svm6122
02:07:55   7  GROUP BY pair
02:07:55   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_jpy       19328	 80.25	   84.485 2010-09-26 20:55:01 2010-12-29 02:00:00

Elapsed: 00:00:00.03
02:07:55 SQL> 
02:07:55 SQL> -- Prepare for derivation of NTILE based params:
02:07:55 SQL> 
02:07:55 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.28
02:07:56 SQL> CREATE TABLE svm6142 COMPRESS AS
02:07:56   2  SELECT
02:07:56   3  pair
02:07:56   4  ,ydate
02:07:56   5  ,prdate
02:07:56   6  ,clse
02:07:56   7  ,g6
02:07:56   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
02:07:56   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
02:07:56  10  ,CASE WHEN trend IS NULL THEN 1
02:07:56  11  	    WHEN trend =0      THEN 1
02:07:56  12  	    ELSE trend END trend
02:07:56  13  ,cm4
02:07:56  14  ,cm6
02:07:56  15  ,cm8
02:07:56  16  ,cm10
02:07:56  17  ,cm12
02:07:56  18  ,cm14
02:07:56  19  ,cm16
02:07:56  20  ,cm18
02:07:56  21  --
02:07:56  22  ,ca4
02:07:56  23  ,ca6
02:07:56  24  ,ca8
02:07:56  25  ,ca10
02:07:56  26  ,ca12
02:07:56  27  ,ca14
02:07:56  28  ,ca16
02:07:56  29  ,ca18
02:07:56  30  --
02:07:56  31  ,cx4
02:07:56  32  ,cx6
02:07:56  33  ,cx8
02:07:56  34  ,cx10
02:07:56  35  ,cx12
02:07:56  36  ,cx14
02:07:56  37  ,cx16
02:07:56  38  ,cx18
02:07:56  39  --
02:07:56  40  ,crr4
02:07:56  41  ,crr6
02:07:56  42  ,crr8
02:07:56  43  ,crr10
02:07:56  44  ,crr12
02:07:56  45  ,crr14
02:07:56  46  ,crr16
02:07:56  47  ,crr18
02:07:56  48  --
02:07:56  49  ,hh
02:07:56  50  ,d
02:07:56  51  ,w
02:07:56  52  ,mpm
02:07:56  53  ,mph
02:07:56  54  FROM svm6122
02:07:56  55  ORDER BY ydate
02:07:56  56  /

Table created.

Elapsed: 00:00:00.35
02:07:56 SQL> 
02:07:56 SQL> -- rpt
02:07:56 SQL> 
02:07:56 SQL> SELECT
02:07:56   2  pair
02:07:56   3  ,trend
02:07:56   4  ,gatt
02:07:56   5  ,COUNT(pair)
02:07:56   6  ,AVG(g6)
02:07:56   7  FROM svm6142
02:07:56   8  GROUP BY pair,trend,gatt
02:07:56   9  ORDER BY pair,trend,gatt
02:07:56  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5097 -.16260702
usd_jpy 	-1 up	      4954 .163304745
usd_jpy 	-1		12
usd_jpy 	 1 nup	      5112 -.15513822
usd_jpy 	 1 up	      4093 .165084061
usd_jpy 	 1		60

6 rows selected.

Elapsed: 00:00:00.05
02:07:56 SQL> 
02:07:56 SQL> 
02:07:56 SQL> -- Derive NTILE based params:
02:07:56 SQL> 
02:07:56 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.13
02:07:56 SQL> CREATE TABLE svm6162 COMPRESS AS
02:07:56   2  SELECT
02:07:56   3  pair
02:07:56   4  ,ydate
02:07:56   5  ,prdate
02:07:56   6  ,clse
02:07:56   7  ,g6
02:07:56   8  ,gatt
02:07:56   9  ,gattn
02:07:56  10  ,trend
02:07:56  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
02:07:56  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
02:07:56  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
02:07:56  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
02:07:56  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
02:07:56  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
02:07:56  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
02:07:56  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
02:07:56  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
02:07:56  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
02:07:56  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
02:07:56  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
02:07:56  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
02:07:56  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
02:07:56  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
02:07:56  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
02:07:56  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
02:07:56  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
02:07:56  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
02:07:56  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
02:07:56  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
02:07:56  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
02:07:56  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
02:07:56  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
02:07:56  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
02:07:56  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
02:07:56  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
02:07:56  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
02:07:56  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
02:07:56  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
02:07:56  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
02:07:56  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
02:07:56  43  ,hh  att32
02:07:56  44  ,d   att33
02:07:56  45  ,w   att34
02:07:56  46  ,mpm att35
02:07:56  47  ,mph att36
02:07:56  48  ,trend att37
02:07:56  49  FROM svm6142
02:07:56  50  ORDER BY ydate
02:07:56  51  /

Table created.

Elapsed: 00:00:04.68
02:08:01 SQL> 
02:08:01 SQL> -- rpt
02:08:01 SQL> 
02:08:01 SQL> SELECT
02:08:01   2  pair
02:08:01   3  ,trend
02:08:01   4  ,gatt
02:08:01   5  ,COUNT(pair)
02:08:01   6  ,AVG(g6)
02:08:01   7  FROM svm6162
02:08:01   8  GROUP BY pair,trend,gatt
02:08:01   9  ORDER BY pair,trend,gatt
02:08:01  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5097 -.16260702
usd_jpy 	-1 up	      4954 .163304745
usd_jpy 	-1		12
usd_jpy 	 1 nup	      5112 -.15513822
usd_jpy 	 1 up	      4093 .165084061
usd_jpy 	 1		60

6 rows selected.

Elapsed: 00:00:00.06
02:08:01 SQL> 
02:08:01 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
02:08:01 SQL> CREATE TABLE modsrc COMPRESS AS
02:08:01   2  SELECT
02:08:01   3  pair
02:08:01   4  ,ydate
02:08:01   5  ,prdate
02:08:01   6  ,trend
02:08:01   7  ,g6
02:08:01   8  ,gatt
02:08:01   9  ,gattn
02:08:01  10  FROM svm6162
02:08:01  11  /

Table created.

Elapsed: 00:00:00.09
02:08:01 SQL> 
02:08:01 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
02:08:01 SQL> 
02:08:01 SQL> DROP   TABLE jpy_ms610 ;

Table dropped.

Elapsed: 00:00:00.08
02:08:02 SQL> CREATE TABLE jpy_ms610 COMPRESS AS
02:08:02   2  SELECT
02:08:02   3  ydate
02:08:02   4  ,trend jpy_trend
02:08:02   5  ,g6    jpy_g6
02:08:02   6  ,gatt  jpy_gatt
02:08:02   7  ,gattn jpy_gattn
02:08:02   8  FROM modsrc
02:08:02   9  /

Table created.

Elapsed: 00:00:00.07
02:08:02 SQL> 
02:08:02 SQL> ANALYZE TABLE jpy_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
02:08:02 SQL> 
02:08:02 SQL> -- I need a copy of the attributes:
02:08:02 SQL> 
02:08:02 SQL> 
02:08:02 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.04
02:08:02 SQL> CREATE TABLE jpy_att COMPRESS AS
02:08:02   2  SELECT
02:08:02   3  ydate
02:08:02   4  ,att00 jpy_att00
02:08:02   5  ,att01 jpy_att01
02:08:02   6  ,att02 jpy_att02
02:08:02   7  ,att03 jpy_att03
02:08:02   8  ,att04 jpy_att04
02:08:02   9  ,att05 jpy_att05
02:08:02  10  ,att06 jpy_att06
02:08:02  11  ,att07 jpy_att07
02:08:02  12  ,att08 jpy_att08
02:08:02  13  ,att09 jpy_att09
02:08:02  14  ,att10 jpy_att10
02:08:02  15  ,att11 jpy_att11
02:08:02  16  ,att12 jpy_att12
02:08:02  17  ,att13 jpy_att13
02:08:02  18  ,att14 jpy_att14
02:08:02  19  ,att15 jpy_att15
02:08:02  20  ,att16 jpy_att16
02:08:02  21  ,att17 jpy_att17
02:08:02  22  ,att18 jpy_att18
02:08:02  23  ,att19 jpy_att19
02:08:02  24  ,att20 jpy_att20
02:08:02  25  ,att21 jpy_att21
02:08:02  26  ,att22 jpy_att22
02:08:02  27  ,att23 jpy_att23
02:08:02  28  ,att24 jpy_att24
02:08:02  29  ,att25 jpy_att25
02:08:02  30  ,att26 jpy_att26
02:08:02  31  ,att27 jpy_att27
02:08:02  32  ,att28 jpy_att28
02:08:02  33  ,att29 jpy_att29
02:08:02  34  ,att30 jpy_att30
02:08:02  35  ,att31 jpy_att31
02:08:02  36  ,att32 jpy_att32
02:08:02  37  ,att33 jpy_att33
02:08:02  38  ,att34 jpy_att34
02:08:02  39  ,att35 jpy_att35
02:08:02  40  ,att36 jpy_att36
02:08:02  41  ,att37 jpy_att37
02:08:02  42  FROM svm6162
02:08:02  43  /

Table created.

Elapsed: 00:00:00.19
02:08:02 SQL> 
02:08:02 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
02:08:02 SQL> 
02:08:02 SQL> -- rpt
02:08:02 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19328

Elapsed: 00:00:00.85
02:08:03 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     19328

Elapsed: 00:00:00.00
02:08:03 SQL> 
02:08:03 SQL> --
02:08:03 SQL> -- cad610.sql
02:08:03 SQL> --
02:08:03 SQL> 
02:08:03 SQL> -- Creates views and tables for backtesting a forex SVM strategy
02:08:03 SQL> 
02:08:03 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.52
02:08:04 SQL> 
02:08:04 SQL> -- I created di5min here:
02:08:04 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
02:08:04 SQL> 
02:08:04 SQL> CREATE OR REPLACE VIEW svm6102 AS
02:08:04   2  SELECT
02:08:04   3  pair
02:08:04   4  ,ydate
02:08:04   5  ,prdate
02:08:04   6  ,rownum rnum -- acts as t in my time-series
02:08:04   7  ,clse
02:08:04   8  -- Derive a bunch of attributes from clse, the latest price:
02:08:04   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
02:08:04  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
02:08:04  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
02:08:04  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
02:08:04  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
02:08:04  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
02:08:04  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
02:08:04  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
02:08:04  17  --
02:08:04  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
02:08:04  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
02:08:04  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
02:08:04  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
02:08:04  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
02:08:04  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
02:08:04  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
02:08:04  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
02:08:04  26  --
02:08:04  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
02:08:04  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
02:08:04  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
02:08:04  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
02:08:04  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
02:08:04  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
02:08:04  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
02:08:04  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
02:08:04  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
02:08:04  36  FROM di5min WHERE pair LIKE'%cad%'
02:08:04  37  AND ydate > sysdate - 95
02:08:04  38  ORDER BY ydate
02:08:04  39  /

View created.

Elapsed: 00:00:00.04
02:08:04 SQL> 
02:08:04 SQL> -- rpt
02:08:04 SQL> 
02:08:04 SQL> SELECT
02:08:04   2  pair
02:08:04   3  ,COUNT(pair)
02:08:04   4  ,MIN(clse),MAX(clse)
02:08:04   5  ,MIN(avg6),MAX(avg6)
02:08:04   6  ,MIN(ydate),MAX(ydate)
02:08:04   7  FROM svm6102
02:08:04   8  GROUP BY pair
02:08:04   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_cad       19328    .997975	    1.036 .999321575 1.03336849 2010-09-26 20:55:01 2010-12-29 02:00:00

Elapsed: 00:00:00.83
02:08:05 SQL> 
02:08:05 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
02:08:05 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.26
02:08:05 SQL> CREATE TABLE svm6122 COMPRESS AS
02:08:05   2  SELECT
02:08:05   3  pair
02:08:05   4  ,ydate
02:08:05   5  ,prdate
02:08:05   6  ,clse
02:08:05   7  -- g6 is important. I want to predict g6:
02:08:05   8  ,ld6 - clse g6
02:08:05   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
02:08:05  10  -- I want more attributes from the ones I derived above:
02:08:05  11  -- clse relation to moving-min
02:08:05  12  ,clse-min4  cm4
02:08:05  13  ,clse-min6  cm6
02:08:05  14  ,clse-min8  cm8
02:08:05  15  ,clse-min10 cm10
02:08:05  16  ,clse-min12 cm12
02:08:05  17  ,clse-min14 cm14
02:08:05  18  ,clse-min16 cm16
02:08:05  19  ,clse-min18 cm18
02:08:05  20  -- clse relation to moving-avg
02:08:05  21  ,clse-avg4  ca4
02:08:05  22  ,clse-avg6  ca6
02:08:05  23  ,clse-avg8  ca8
02:08:05  24  ,clse-avg10 ca10
02:08:05  25  ,clse-avg12 ca12
02:08:05  26  ,clse-avg14 ca14
02:08:05  27  ,clse-avg16 ca16
02:08:05  28  ,clse-avg18 ca18
02:08:05  29  -- clse relation to moving-max
02:08:05  30  ,clse-max4  cx4
02:08:05  31  ,clse-max6  cx6
02:08:05  32  ,clse-max8  cx8
02:08:05  33  ,clse-max10 cx10
02:08:05  34  ,clse-max12 cx12
02:08:05  35  ,clse-max14 cx14
02:08:05  36  ,clse-max16 cx16
02:08:05  37  ,clse-max18 cx18
02:08:05  38  -- Derive more attributes.
02:08:05  39  -- I want to use CORR() here to help SVM see the shape of the series.
02:08:05  40  -- But COVAR_POP is more stable:
02:08:05  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
02:08:05  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
02:08:05  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
02:08:05  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
02:08:05  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
02:08:05  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
02:08:05  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
02:08:05  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
02:08:05  49  -- Derive date related attributes:
02:08:05  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
02:08:05  51  ,0+TO_CHAR(ydate,'D')d
02:08:05  52  ,0+TO_CHAR(ydate,'W')w
02:08:05  53  -- mpm stands for minutes-past-midnight:
02:08:05  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
02:08:05  55  -- mph stands for minutes-past-hour:
02:08:05  56  ,0+TO_CHAR(ydate,'MI')mph
02:08:05  57  FROM svm6102
02:08:05  58  ORDER BY ydate
02:08:05  59  /

Table created.

Elapsed: 00:00:02.01
02:08:07 SQL> 
02:08:07 SQL> -- rpt
02:08:07 SQL> 
02:08:07 SQL> SELECT
02:08:07   2  pair
02:08:07   3  ,COUNT(pair)
02:08:07   4  ,MIN(clse),MAX(clse)
02:08:07   5  ,MIN(ydate),MAX(ydate)
02:08:07   6  FROM svm6122
02:08:07   7  GROUP BY pair
02:08:07   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_cad       19328    .997975	    1.036 2010-09-26 20:55:01 2010-12-29 02:00:00

Elapsed: 00:00:00.26
02:08:07 SQL> 
02:08:07 SQL> -- Prepare for derivation of NTILE based params:
02:08:07 SQL> 
02:08:07 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.22
02:08:07 SQL> CREATE TABLE svm6142 COMPRESS AS
02:08:07   2  SELECT
02:08:07   3  pair
02:08:07   4  ,ydate
02:08:07   5  ,prdate
02:08:07   6  ,clse
02:08:07   7  ,g6
02:08:07   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
02:08:07   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
02:08:07  10  ,CASE WHEN trend IS NULL THEN 1
02:08:07  11  	    WHEN trend =0      THEN 1
02:08:07  12  	    ELSE trend END trend
02:08:07  13  ,cm4
02:08:07  14  ,cm6
02:08:07  15  ,cm8
02:08:07  16  ,cm10
02:08:07  17  ,cm12
02:08:07  18  ,cm14
02:08:07  19  ,cm16
02:08:07  20  ,cm18
02:08:07  21  --
02:08:07  22  ,ca4
02:08:07  23  ,ca6
02:08:07  24  ,ca8
02:08:07  25  ,ca10
02:08:07  26  ,ca12
02:08:07  27  ,ca14
02:08:07  28  ,ca16
02:08:07  29  ,ca18
02:08:07  30  --
02:08:07  31  ,cx4
02:08:07  32  ,cx6
02:08:07  33  ,cx8
02:08:07  34  ,cx10
02:08:07  35  ,cx12
02:08:07  36  ,cx14
02:08:07  37  ,cx16
02:08:07  38  ,cx18
02:08:07  39  --
02:08:07  40  ,crr4
02:08:07  41  ,crr6
02:08:07  42  ,crr8
02:08:07  43  ,crr10
02:08:07  44  ,crr12
02:08:07  45  ,crr14
02:08:07  46  ,crr16
02:08:07  47  ,crr18
02:08:07  48  --
02:08:07  49  ,hh
02:08:07  50  ,d
02:08:07  51  ,w
02:08:07  52  ,mpm
02:08:07  53  ,mph
02:08:07  54  FROM svm6122
02:08:07  55  ORDER BY ydate
02:08:07  56  /

Table created.

Elapsed: 00:00:00.35
02:08:08 SQL> 
02:08:08 SQL> -- rpt
02:08:08 SQL> 
02:08:08 SQL> SELECT
02:08:08   2  pair
02:08:08   3  ,trend
02:08:08   4  ,gatt
02:08:08   5  ,COUNT(pair)
02:08:08   6  ,AVG(g6)
02:08:08   7  FROM svm6142
02:08:08   8  GROUP BY pair,trend,gatt
02:08:08   9  ORDER BY pair,trend,gatt
02:08:08  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7141 -.00133516
usd_cad 	-1 up	      3081  .00310749
usd_cad 	 1 nup	      6545  -.0016324
usd_cad 	 1 up	      2489 .003597467
usd_cad 	 1		72

Elapsed: 00:00:00.04
02:08:08 SQL> 
02:08:08 SQL> 
02:08:08 SQL> -- Derive NTILE based params:
02:08:08 SQL> 
02:08:08 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.13
02:08:08 SQL> CREATE TABLE svm6162 COMPRESS AS
02:08:08   2  SELECT
02:08:08   3  pair
02:08:08   4  ,ydate
02:08:08   5  ,prdate
02:08:08   6  ,clse
02:08:08   7  ,g6
02:08:08   8  ,gatt
02:08:08   9  ,gattn
02:08:08  10  ,trend
02:08:08  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
02:08:08  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
02:08:08  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
02:08:08  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
02:08:08  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
02:08:08  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
02:08:08  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
02:08:08  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
02:08:08  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
02:08:08  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
02:08:08  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
02:08:08  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
02:08:08  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
02:08:08  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
02:08:08  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
02:08:08  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
02:08:08  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
02:08:08  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
02:08:08  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
02:08:08  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
02:08:08  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
02:08:08  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
02:08:08  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
02:08:08  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
02:08:08  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
02:08:08  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
02:08:08  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
02:08:08  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
02:08:08  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
02:08:08  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
02:08:08  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
02:08:08  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
02:08:08  43  ,hh  att32
02:08:08  44  ,d   att33
02:08:08  45  ,w   att34
02:08:08  46  ,mpm att35
02:08:08  47  ,mph att36
02:08:08  48  ,trend att37
02:08:08  49  FROM svm6142
02:08:08  50  ORDER BY ydate
02:08:08  51  /

Table created.

Elapsed: 00:00:04.63
02:08:13 SQL> 
02:08:13 SQL> -- rpt
02:08:13 SQL> 
02:08:13 SQL> SELECT
02:08:13   2  pair
02:08:13   3  ,trend
02:08:13   4  ,gatt
02:08:13   5  ,COUNT(pair)
02:08:13   6  ,AVG(g6)
02:08:13   7  FROM svm6162
02:08:13   8  GROUP BY pair,trend,gatt
02:08:13   9  ORDER BY pair,trend,gatt
02:08:13  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7141 -.00133516
usd_cad 	-1 up	      3081  .00310749
usd_cad 	 1 nup	      6545  -.0016324
usd_cad 	 1 up	      2489 .003597467
usd_cad 	 1		72

Elapsed: 00:00:00.06
02:08:13 SQL> 
02:08:13 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.17
02:08:13 SQL> CREATE TABLE modsrc COMPRESS AS
02:08:13   2  SELECT
02:08:13   3  pair
02:08:13   4  ,ydate
02:08:13   5  ,prdate
02:08:13   6  ,trend
02:08:13   7  ,g6
02:08:13   8  ,gatt
02:08:13   9  ,gattn
02:08:13  10  FROM svm6162
02:08:13  11  /

Table created.

Elapsed: 00:00:00.08
02:08:13 SQL> 
02:08:13 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
02:08:13 SQL> 
02:08:13 SQL> DROP   TABLE cad_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
02:08:13 SQL> CREATE TABLE cad_ms610 COMPRESS AS
02:08:13   2  SELECT
02:08:13   3  ydate
02:08:13   4  ,trend cad_trend
02:08:13   5  ,g6    cad_g6
02:08:13   6  ,gatt  cad_gatt
02:08:13   7  ,gattn cad_gattn
02:08:13   8  FROM modsrc
02:08:13   9  /

Table created.

Elapsed: 00:00:00.06
02:08:13 SQL> 
02:08:13 SQL> ANALYZE TABLE cad_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.14
02:08:13 SQL> 
02:08:13 SQL> -- I need a copy of the attributes:
02:08:13 SQL> 
02:08:13 SQL> 
02:08:13 SQL> DROP   TABLE cad_att;

Table dropped.

Elapsed: 00:00:00.05
02:08:13 SQL> CREATE TABLE cad_att COMPRESS AS
02:08:13   2  SELECT
02:08:13   3  ydate
02:08:13   4  ,att00 cad_att00
02:08:13   5  ,att01 cad_att01
02:08:13   6  ,att02 cad_att02
02:08:13   7  ,att03 cad_att03
02:08:13   8  ,att04 cad_att04
02:08:13   9  ,att05 cad_att05
02:08:13  10  ,att06 cad_att06
02:08:13  11  ,att07 cad_att07
02:08:13  12  ,att08 cad_att08
02:08:13  13  ,att09 cad_att09
02:08:13  14  ,att10 cad_att10
02:08:13  15  ,att11 cad_att11
02:08:13  16  ,att12 cad_att12
02:08:13  17  ,att13 cad_att13
02:08:13  18  ,att14 cad_att14
02:08:13  19  ,att15 cad_att15
02:08:13  20  ,att16 cad_att16
02:08:13  21  ,att17 cad_att17
02:08:13  22  ,att18 cad_att18
02:08:13  23  ,att19 cad_att19
02:08:13  24  ,att20 cad_att20
02:08:13  25  ,att21 cad_att21
02:08:13  26  ,att22 cad_att22
02:08:13  27  ,att23 cad_att23
02:08:13  28  ,att24 cad_att24
02:08:13  29  ,att25 cad_att25
02:08:13  30  ,att26 cad_att26
02:08:13  31  ,att27 cad_att27
02:08:13  32  ,att28 cad_att28
02:08:13  33  ,att29 cad_att29
02:08:13  34  ,att30 cad_att30
02:08:13  35  ,att31 cad_att31
02:08:13  36  ,att32 cad_att32
02:08:13  37  ,att33 cad_att33
02:08:13  38  ,att34 cad_att34
02:08:13  39  ,att35 cad_att35
02:08:13  40  ,att36 cad_att36
02:08:13  41  ,att37 cad_att37
02:08:13  42  FROM svm6162
02:08:13  43  /

Table created.

Elapsed: 00:00:00.17
02:08:14 SQL> 
02:08:14 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.43
02:08:14 SQL> 
02:08:14 SQL> -- rpt
02:08:14 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19328

Elapsed: 00:00:00.81
02:08:15 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
     19328

Elapsed: 00:00:00.01
02:08:15 SQL> 
02:08:15 SQL> --
02:08:15 SQL> -- chf610.sql
02:08:15 SQL> --
02:08:15 SQL> 
02:08:15 SQL> -- Creates views and tables for backtesting a forex SVM strategy
02:08:15 SQL> 
02:08:15 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.70
02:08:16 SQL> 
02:08:16 SQL> -- I created di5min here:
02:08:16 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
02:08:16 SQL> 
02:08:16 SQL> CREATE OR REPLACE VIEW svm6102 AS
02:08:16   2  SELECT
02:08:16   3  pair
02:08:16   4  ,ydate
02:08:16   5  ,prdate
02:08:16   6  ,rownum rnum -- acts as t in my time-series
02:08:16   7  ,clse
02:08:16   8  -- Derive a bunch of attributes from clse, the latest price:
02:08:16   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
02:08:16  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
02:08:16  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
02:08:16  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
02:08:16  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
02:08:16  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
02:08:16  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
02:08:16  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
02:08:16  17  --
02:08:16  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
02:08:16  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
02:08:16  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
02:08:16  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
02:08:16  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
02:08:16  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
02:08:16  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
02:08:16  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
02:08:16  26  --
02:08:16  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
02:08:16  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
02:08:16  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
02:08:16  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
02:08:16  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
02:08:16  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
02:08:16  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
02:08:16  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
02:08:16  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
02:08:16  36  FROM di5min WHERE pair LIKE'%chf%'
02:08:16  37  AND ydate > sysdate - 95
02:08:16  38  ORDER BY ydate
02:08:16  39  /

View created.

Elapsed: 00:00:00.04
02:08:16 SQL> 
02:08:16 SQL> -- rpt
02:08:16 SQL> 
02:08:16 SQL> SELECT
02:08:16   2  pair
02:08:16   3  ,COUNT(pair)
02:08:16   4  ,MIN(clse),MAX(clse)
02:08:16   5  ,MIN(avg6),MAX(avg6)
02:08:16   6  ,MIN(ydate),MAX(ydate)
02:08:16   7  FROM svm6102
02:08:16   8  GROUP BY pair
02:08:16   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_chf       19331	.94525	  1.00635 .947785616 1.00498151 2010-09-26 20:55:01 2010-12-29 02:00:00

Elapsed: 00:00:00.85
02:08:16 SQL> 
02:08:16 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
02:08:16 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.19
02:08:17 SQL> CREATE TABLE svm6122 COMPRESS AS
02:08:17   2  SELECT
02:08:17   3  pair
02:08:17   4  ,ydate
02:08:17   5  ,prdate
02:08:17   6  ,clse
02:08:17   7  -- g6 is important. I want to predict g6:
02:08:17   8  ,ld6 - clse g6
02:08:17   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
02:08:17  10  -- I want more attributes from the ones I derived above:
02:08:17  11  -- clse relation to moving-min
02:08:17  12  ,clse-min4  cm4
02:08:17  13  ,clse-min6  cm6
02:08:17  14  ,clse-min8  cm8
02:08:17  15  ,clse-min10 cm10
02:08:17  16  ,clse-min12 cm12
02:08:17  17  ,clse-min14 cm14
02:08:17  18  ,clse-min16 cm16
02:08:17  19  ,clse-min18 cm18
02:08:17  20  -- clse relation to moving-avg
02:08:17  21  ,clse-avg4  ca4
02:08:17  22  ,clse-avg6  ca6
02:08:17  23  ,clse-avg8  ca8
02:08:17  24  ,clse-avg10 ca10
02:08:17  25  ,clse-avg12 ca12
02:08:17  26  ,clse-avg14 ca14
02:08:17  27  ,clse-avg16 ca16
02:08:17  28  ,clse-avg18 ca18
02:08:17  29  -- clse relation to moving-max
02:08:17  30  ,clse-max4  cx4
02:08:17  31  ,clse-max6  cx6
02:08:17  32  ,clse-max8  cx8
02:08:17  33  ,clse-max10 cx10
02:08:17  34  ,clse-max12 cx12
02:08:17  35  ,clse-max14 cx14
02:08:17  36  ,clse-max16 cx16
02:08:17  37  ,clse-max18 cx18
02:08:17  38  -- Derive more attributes.
02:08:17  39  -- I want to use CORR() here to help SVM see the shape of the series.
02:08:17  40  -- But COVAR_POP is more stable:
02:08:17  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
02:08:17  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
02:08:17  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
02:08:17  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
02:08:17  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
02:08:17  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
02:08:17  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
02:08:17  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
02:08:17  49  -- Derive date related attributes:
02:08:17  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
02:08:17  51  ,0+TO_CHAR(ydate,'D')d
02:08:17  52  ,0+TO_CHAR(ydate,'W')w
02:08:17  53  -- mpm stands for minutes-past-midnight:
02:08:17  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
02:08:17  55  -- mph stands for minutes-past-hour:
02:08:17  56  ,0+TO_CHAR(ydate,'MI')mph
02:08:17  57  FROM svm6102
02:08:17  58  ORDER BY ydate
02:08:17  59  /

Table created.

Elapsed: 00:00:02.04
02:08:19 SQL> 
02:08:19 SQL> -- rpt
02:08:19 SQL> 
02:08:19 SQL> SELECT
02:08:19   2  pair
02:08:19   3  ,COUNT(pair)
02:08:19   4  ,MIN(clse),MAX(clse)
02:08:19   5  ,MIN(ydate),MAX(ydate)
02:08:19   6  FROM svm6122
02:08:19   7  GROUP BY pair
02:08:19   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_chf       19331	.94525	  1.00635 2010-09-26 20:55:01 2010-12-29 02:00:00

Elapsed: 00:00:00.08
02:08:19 SQL> 
02:08:19 SQL> -- Prepare for derivation of NTILE based params:
02:08:19 SQL> 
02:08:19 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.20
02:08:19 SQL> CREATE TABLE svm6142 COMPRESS AS
02:08:19   2  SELECT
02:08:19   3  pair
02:08:19   4  ,ydate
02:08:19   5  ,prdate
02:08:19   6  ,clse
02:08:19   7  ,g6
02:08:19   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
02:08:19   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
02:08:19  10  ,CASE WHEN trend IS NULL THEN 1
02:08:19  11  	    WHEN trend =0      THEN 1
02:08:19  12  	    ELSE trend END trend
02:08:19  13  ,cm4
02:08:19  14  ,cm6
02:08:19  15  ,cm8
02:08:19  16  ,cm10
02:08:19  17  ,cm12
02:08:19  18  ,cm14
02:08:19  19  ,cm16
02:08:19  20  ,cm18
02:08:19  21  --
02:08:19  22  ,ca4
02:08:19  23  ,ca6
02:08:19  24  ,ca8
02:08:19  25  ,ca10
02:08:19  26  ,ca12
02:08:19  27  ,ca14
02:08:19  28  ,ca16
02:08:19  29  ,ca18
02:08:19  30  --
02:08:19  31  ,cx4
02:08:19  32  ,cx6
02:08:19  33  ,cx8
02:08:19  34  ,cx10
02:08:19  35  ,cx12
02:08:19  36  ,cx14
02:08:19  37  ,cx16
02:08:19  38  ,cx18
02:08:19  39  --
02:08:19  40  ,crr4
02:08:19  41  ,crr6
02:08:19  42  ,crr8
02:08:19  43  ,crr10
02:08:19  44  ,crr12
02:08:19  45  ,crr14
02:08:19  46  ,crr16
02:08:19  47  ,crr18
02:08:19  48  --
02:08:19  49  ,hh
02:08:19  50  ,d
02:08:19  51  ,w
02:08:19  52  ,mpm
02:08:19  53  ,mph
02:08:19  54  FROM svm6122
02:08:19  55  ORDER BY ydate
02:08:19  56  /

Table created.

Elapsed: 00:00:00.39
02:08:19 SQL> 
02:08:19 SQL> -- rpt
02:08:19 SQL> 
02:08:19 SQL> SELECT
02:08:19   2  pair
02:08:19   3  ,trend
02:08:19   4  ,gatt
02:08:19   5  ,COUNT(pair)
02:08:19   6  ,AVG(g6)
02:08:19   7  FROM svm6142
02:08:19   8  GROUP BY pair,trend,gatt
02:08:19   9  ORDER BY pair,trend,gatt
02:08:19  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      6894 -.00194326
usd_chf 	-1 up	      3170 .003899842
usd_chf 	-1		14
usd_chf 	 1 nup	      6630 -.00162731
usd_chf 	 1 up	      2565 .003689727
usd_chf 	 1		58

6 rows selected.

Elapsed: 00:00:00.14
02:08:19 SQL> 
02:08:19 SQL> 
02:08:19 SQL> -- Derive NTILE based params:
02:08:19 SQL> 
02:08:19 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.18
02:08:20 SQL> CREATE TABLE svm6162 COMPRESS AS
02:08:20   2  SELECT
02:08:20   3  pair
02:08:20   4  ,ydate
02:08:20   5  ,prdate
02:08:20   6  ,clse
02:08:20   7  ,g6
02:08:20   8  ,gatt
02:08:20   9  ,gattn
02:08:20  10  ,trend
02:08:20  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
02:08:20  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
02:08:20  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
02:08:20  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
02:08:20  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
02:08:20  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
02:08:20  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
02:08:20  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
02:08:20  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
02:08:20  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
02:08:20  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
02:08:20  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
02:08:20  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
02:08:20  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
02:08:20  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
02:08:20  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
02:08:20  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
02:08:20  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
02:08:20  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
02:08:20  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
02:08:20  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
02:08:20  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
02:08:20  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
02:08:20  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
02:08:20  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
02:08:20  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
02:08:20  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
02:08:20  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
02:08:20  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
02:08:20  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
02:08:20  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
02:08:20  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
02:08:20  43  ,hh  att32
02:08:20  44  ,d   att33
02:08:20  45  ,w   att34
02:08:20  46  ,mpm att35
02:08:20  47  ,mph att36
02:08:20  48  ,trend att37
02:08:20  49  FROM svm6142
02:08:20  50  ORDER BY ydate
02:08:20  51  /

Table created.

Elapsed: 00:00:04.68
02:08:24 SQL> 
02:08:24 SQL> -- rpt
02:08:24 SQL> 
02:08:24 SQL> SELECT
02:08:24   2  pair
02:08:24   3  ,trend
02:08:24   4  ,gatt
02:08:24   5  ,COUNT(pair)
02:08:24   6  ,AVG(g6)
02:08:24   7  FROM svm6162
02:08:24   8  GROUP BY pair,trend,gatt
02:08:24   9  ORDER BY pair,trend,gatt
02:08:24  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      6894 -.00194326
usd_chf 	-1 up	      3170 .003899842
usd_chf 	-1		14
usd_chf 	 1 nup	      6630 -.00162731
usd_chf 	 1 up	      2565 .003689727
usd_chf 	 1		58

6 rows selected.

Elapsed: 00:00:00.07
02:08:24 SQL> 
02:08:24 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.18
02:08:25 SQL> CREATE TABLE modsrc COMPRESS AS
02:08:25   2  SELECT
02:08:25   3  pair
02:08:25   4  ,ydate
02:08:25   5  ,prdate
02:08:25   6  ,trend
02:08:25   7  ,g6
02:08:25   8  ,gatt
02:08:25   9  ,gattn
02:08:25  10  FROM svm6162
02:08:25  11  /

Table created.

Elapsed: 00:00:00.08
02:08:25 SQL> 
02:08:25 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
02:08:25 SQL> 
02:08:25 SQL> DROP   TABLE chf_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
02:08:25 SQL> CREATE TABLE chf_ms610 COMPRESS AS
02:08:25   2  SELECT
02:08:25   3  ydate
02:08:25   4  ,trend chf_trend
02:08:25   5  ,g6    chf_g6
02:08:25   6  ,gatt  chf_gatt
02:08:25   7  ,gattn chf_gattn
02:08:25   8  FROM modsrc
02:08:25   9  /

Table created.

Elapsed: 00:00:00.07
02:08:25 SQL> 
02:08:25 SQL> ANALYZE TABLE chf_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
02:08:25 SQL> 
02:08:25 SQL> -- I need a copy of the attributes:
02:08:25 SQL> 
02:08:25 SQL> 
02:08:25 SQL> DROP   TABLE chf_att;

Table dropped.

Elapsed: 00:00:00.05
02:08:25 SQL> CREATE TABLE chf_att COMPRESS AS
02:08:25   2  SELECT
02:08:25   3  ydate
02:08:25   4  ,att00 chf_att00
02:08:25   5  ,att01 chf_att01
02:08:25   6  ,att02 chf_att02
02:08:25   7  ,att03 chf_att03
02:08:25   8  ,att04 chf_att04
02:08:25   9  ,att05 chf_att05
02:08:25  10  ,att06 chf_att06
02:08:25  11  ,att07 chf_att07
02:08:25  12  ,att08 chf_att08
02:08:25  13  ,att09 chf_att09
02:08:25  14  ,att10 chf_att10
02:08:25  15  ,att11 chf_att11
02:08:25  16  ,att12 chf_att12
02:08:25  17  ,att13 chf_att13
02:08:25  18  ,att14 chf_att14
02:08:25  19  ,att15 chf_att15
02:08:25  20  ,att16 chf_att16
02:08:25  21  ,att17 chf_att17
02:08:25  22  ,att18 chf_att18
02:08:25  23  ,att19 chf_att19
02:08:25  24  ,att20 chf_att20
02:08:25  25  ,att21 chf_att21
02:08:25  26  ,att22 chf_att22
02:08:25  27  ,att23 chf_att23
02:08:25  28  ,att24 chf_att24
02:08:25  29  ,att25 chf_att25
02:08:25  30  ,att26 chf_att26
02:08:25  31  ,att27 chf_att27
02:08:25  32  ,att28 chf_att28
02:08:25  33  ,att29 chf_att29
02:08:25  34  ,att30 chf_att30
02:08:25  35  ,att31 chf_att31
02:08:25  36  ,att32 chf_att32
02:08:25  37  ,att33 chf_att33
02:08:25  38  ,att34 chf_att34
02:08:25  39  ,att35 chf_att35
02:08:25  40  ,att36 chf_att36
02:08:25  41  ,att37 chf_att37
02:08:25  42  FROM svm6162
02:08:25  43  /

Table created.

Elapsed: 00:00:00.24
02:08:25 SQL> 
02:08:25 SQL> ANALYZE TABLE chf_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.43
02:08:26 SQL> 
02:08:26 SQL> -- rpt
02:08:26 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19331

Elapsed: 00:00:00.81
02:08:27 SQL> SELECT COUNT(*)FROM chf_att;

  COUNT(*)
----------
     19331

Elapsed: 00:00:00.00
02:08:27 SQL> 
02:08:27 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
