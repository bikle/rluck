
SQL*Plus: Release 11.2.0.1.0 Production on Thu Jan 6 21:03:33 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

21:03:33 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
21:03:33 SQL> 21:03:33 SQL> --
21:03:33 SQL> -- eur610.sql
21:03:33 SQL> --
21:03:33 SQL> 
21:03:33 SQL> -- Creates views and tables for backtesting a forex SVM strategy
21:03:33 SQL> 
21:03:33 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.01
21:03:33 SQL> 
21:03:33 SQL> -- I created di5min here:
21:03:33 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
21:03:33 SQL> 
21:03:33 SQL> CREATE OR REPLACE VIEW svm6102 AS
21:03:33   2  SELECT
21:03:33   3  pair
21:03:33   4  ,ydate
21:03:33   5  ,prdate
21:03:33   6  ,rownum rnum -- acts as t in my time-series
21:03:33   7  ,clse
21:03:33   8  -- Derive a bunch of attributes from clse, the latest price:
21:03:33   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
21:03:33  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
21:03:33  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
21:03:33  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
21:03:33  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
21:03:33  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
21:03:33  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
21:03:33  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
21:03:33  17  --
21:03:33  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
21:03:33  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
21:03:33  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
21:03:33  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
21:03:33  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
21:03:33  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
21:03:33  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
21:03:33  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
21:03:33  26  --
21:03:33  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
21:03:33  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
21:03:33  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
21:03:33  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
21:03:33  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
21:03:33  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
21:03:33  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
21:03:33  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
21:03:33  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
21:03:33  36  FROM di5min WHERE pair LIKE'%eur%'
21:03:33  37  AND ydate > sysdate - 95
21:03:33  38  ORDER BY ydate
21:03:33  39  /

View created.

Elapsed: 00:00:00.07
21:03:33 SQL> 
21:03:33 SQL> -- rpt
21:03:33 SQL> 
21:03:33 SQL> SELECT
21:03:33   2  pair
21:03:33   3  ,COUNT(pair)
21:03:33   4  ,MIN(clse),MAX(clse)
21:03:33   5  ,MIN(avg6),MAX(avg6)
21:03:33   6  ,MIN(ydate),MAX(ydate)
21:03:33   7  FROM svm6102
21:03:33   8  GROUP BY pair
21:03:33   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_usd       19814    1.29735	   1.4273 1.29875103 1.42436233 2010-10-03 21:05:01 2011-01-06 21:00:00

Elapsed: 00:00:00.96
21:03:34 SQL> 
21:03:34 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
21:03:34 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.26
21:03:35 SQL> CREATE TABLE svm6122 COMPRESS AS
21:03:35   2  SELECT
21:03:35   3  pair
21:03:35   4  ,ydate
21:03:35   5  ,prdate
21:03:35   6  ,clse
21:03:35   7  -- g6 is important. I want to predict g6:
21:03:35   8  ,ld6 - clse g6
21:03:35   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
21:03:35  10  -- I want more attributes from the ones I derived above:
21:03:35  11  -- clse relation to moving-min
21:03:35  12  ,clse-min4  cm4
21:03:35  13  ,clse-min6  cm6
21:03:35  14  ,clse-min8  cm8
21:03:35  15  ,clse-min10 cm10
21:03:35  16  ,clse-min12 cm12
21:03:35  17  ,clse-min14 cm14
21:03:35  18  ,clse-min16 cm16
21:03:35  19  ,clse-min18 cm18
21:03:35  20  -- clse relation to moving-avg
21:03:35  21  ,clse-avg4  ca4
21:03:35  22  ,clse-avg6  ca6
21:03:35  23  ,clse-avg8  ca8
21:03:35  24  ,clse-avg10 ca10
21:03:35  25  ,clse-avg12 ca12
21:03:35  26  ,clse-avg14 ca14
21:03:35  27  ,clse-avg16 ca16
21:03:35  28  ,clse-avg18 ca18
21:03:35  29  -- clse relation to moving-max
21:03:35  30  ,clse-max4  cx4
21:03:35  31  ,clse-max6  cx6
21:03:35  32  ,clse-max8  cx8
21:03:35  33  ,clse-max10 cx10
21:03:35  34  ,clse-max12 cx12
21:03:35  35  ,clse-max14 cx14
21:03:35  36  ,clse-max16 cx16
21:03:35  37  ,clse-max18 cx18
21:03:35  38  -- Derive more attributes.
21:03:35  39  -- I want to use CORR() here to help SVM see the shape of the series.
21:03:35  40  -- But COVAR_POP is more stable:
21:03:35  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
21:03:35  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
21:03:35  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
21:03:35  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
21:03:35  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
21:03:35  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
21:03:35  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
21:03:35  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
21:03:35  49  -- Derive date related attributes:
21:03:35  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
21:03:35  51  ,0+TO_CHAR(ydate,'D')d
21:03:35  52  ,0+TO_CHAR(ydate,'W')w
21:03:35  53  -- mpm stands for minutes-past-midnight:
21:03:35  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
21:03:35  55  -- mph stands for minutes-past-hour:
21:03:35  56  ,0+TO_CHAR(ydate,'MI')mph
21:03:35  57  FROM svm6102
21:03:35  58  ORDER BY ydate
21:03:35  59  /

Table created.

Elapsed: 00:00:02.56
21:03:37 SQL> 
21:03:37 SQL> -- rpt
21:03:37 SQL> 
21:03:37 SQL> SELECT
21:03:37   2  pair
21:03:37   3  ,COUNT(pair)
21:03:37   4  ,MIN(clse),MAX(clse)
21:03:37   5  ,MIN(ydate),MAX(ydate)
21:03:37   6  FROM svm6122
21:03:37   7  GROUP BY pair
21:03:37   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_usd       19814    1.29735	   1.4273 2010-10-03 21:05:01 2011-01-06 21:00:00

Elapsed: 00:00:00.07
21:03:37 SQL> 
21:03:37 SQL> -- Prepare for derivation of NTILE based params:
21:03:37 SQL> 
21:03:37 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.17
21:03:37 SQL> CREATE TABLE svm6142 COMPRESS AS
21:03:37   2  SELECT
21:03:37   3  pair
21:03:37   4  ,ydate
21:03:37   5  ,prdate
21:03:37   6  ,clse
21:03:37   7  ,g6
21:03:37   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
21:03:37   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
21:03:37  10  ,CASE WHEN trend IS NULL THEN 1
21:03:37  11  	    WHEN trend =0      THEN 1
21:03:37  12  	    ELSE trend END trend
21:03:37  13  ,cm4
21:03:37  14  ,cm6
21:03:37  15  ,cm8
21:03:37  16  ,cm10
21:03:37  17  ,cm12
21:03:37  18  ,cm14
21:03:37  19  ,cm16
21:03:37  20  ,cm18
21:03:37  21  --
21:03:37  22  ,ca4
21:03:37  23  ,ca6
21:03:37  24  ,ca8
21:03:37  25  ,ca10
21:03:37  26  ,ca12
21:03:37  27  ,ca14
21:03:37  28  ,ca16
21:03:37  29  ,ca18
21:03:37  30  --
21:03:37  31  ,cx4
21:03:37  32  ,cx6
21:03:37  33  ,cx8
21:03:37  34  ,cx10
21:03:37  35  ,cx12
21:03:37  36  ,cx14
21:03:37  37  ,cx16
21:03:37  38  ,cx18
21:03:37  39  --
21:03:37  40  ,crr4
21:03:37  41  ,crr6
21:03:37  42  ,crr8
21:03:37  43  ,crr10
21:03:37  44  ,crr12
21:03:37  45  ,crr14
21:03:37  46  ,crr16
21:03:37  47  ,crr18
21:03:37  48  --
21:03:37  49  ,hh
21:03:37  50  ,d
21:03:37  51  ,w
21:03:37  52  ,mpm
21:03:37  53  ,mph
21:03:37  54  FROM svm6122
21:03:37  55  ORDER BY ydate
21:03:37  56  /

Table created.

Elapsed: 00:00:00.36
21:03:38 SQL> 
21:03:38 SQL> -- rpt
21:03:38 SQL> 
21:03:38 SQL> SELECT
21:03:38   2  pair
21:03:38   3  ,trend
21:03:38   4  ,gatt
21:03:38   5  ,COUNT(pair)
21:03:38   6  ,AVG(g6)
21:03:38   7  FROM svm6142
21:03:38   8  GROUP BY pair,trend,gatt
21:03:38   9  ORDER BY pair,trend,gatt
21:03:38  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6597 -.00317724
eur_usd 	-1 up	      3570 .004447223
eur_usd 	-1		72
eur_usd 	 1 nup	      5870 -.00325282
eur_usd 	 1 up	      3705 .005071238

Elapsed: 00:00:00.04
21:03:38 SQL> 
21:03:38 SQL> 
21:03:38 SQL> -- Derive NTILE based params:
21:03:38 SQL> 
21:03:38 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.05
21:03:38 SQL> CREATE TABLE svm6162 COMPRESS AS
21:03:38   2  SELECT
21:03:38   3  pair
21:03:38   4  ,ydate
21:03:38   5  ,prdate
21:03:38   6  ,clse
21:03:38   7  ,g6
21:03:38   8  ,gatt
21:03:38   9  ,gattn
21:03:38  10  ,trend
21:03:38  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
21:03:38  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
21:03:38  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
21:03:38  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
21:03:38  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
21:03:38  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
21:03:38  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
21:03:38  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
21:03:38  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
21:03:38  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
21:03:38  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
21:03:38  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
21:03:38  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
21:03:38  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
21:03:38  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
21:03:38  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
21:03:38  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
21:03:38  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
21:03:38  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
21:03:38  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
21:03:38  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
21:03:38  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
21:03:38  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
21:03:38  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
21:03:38  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
21:03:38  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
21:03:38  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
21:03:38  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
21:03:38  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
21:03:38  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
21:03:38  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
21:03:38  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
21:03:38  43  ,hh  att32
21:03:38  44  ,d   att33
21:03:38  45  ,w   att34
21:03:38  46  ,mpm att35
21:03:38  47  ,mph att36
21:03:38  48  ,trend att37
21:03:38  49  FROM svm6142
21:03:38  50  ORDER BY ydate
21:03:38  51  /

Table created.

Elapsed: 00:00:04.91
21:03:43 SQL> 
21:03:43 SQL> -- rpt
21:03:43 SQL> 
21:03:43 SQL> SELECT
21:03:43   2  pair
21:03:43   3  ,trend
21:03:43   4  ,gatt
21:03:43   5  ,COUNT(pair)
21:03:43   6  ,AVG(g6)
21:03:43   7  FROM svm6162
21:03:43   8  GROUP BY pair,trend,gatt
21:03:43   9  ORDER BY pair,trend,gatt
21:03:43  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6597 -.00317724
eur_usd 	-1 up	      3570 .004447223
eur_usd 	-1		72
eur_usd 	 1 nup	      5870 -.00325282
eur_usd 	 1 up	      3705 .005071238

Elapsed: 00:00:00.03
21:03:43 SQL> 
21:03:43 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.04
21:03:43 SQL> CREATE TABLE modsrc COMPRESS AS
21:03:43   2  SELECT
21:03:43   3  pair
21:03:43   4  ,ydate
21:03:43   5  ,prdate
21:03:43   6  ,trend
21:03:43   7  ,g6
21:03:43   8  ,gatt
21:03:43   9  ,gattn
21:03:43  10  FROM svm6162
21:03:43  11  /

Table created.

Elapsed: 00:00:00.08
21:03:43 SQL> 
21:03:43 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.73
21:03:44 SQL> 
21:03:44 SQL> DROP   TABLE eur_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
21:03:44 SQL> CREATE TABLE eur_ms610 COMPRESS AS
21:03:44   2  SELECT
21:03:44   3  ydate
21:03:44   4  ,trend eur_trend
21:03:44   5  ,g6    eur_g6
21:03:44   6  ,gatt  eur_gatt
21:03:44   7  ,gattn eur_gattn
21:03:44   8  FROM modsrc
21:03:44   9  /

Table created.

Elapsed: 00:00:00.05
21:03:44 SQL> 
21:03:44 SQL> ANALYZE TABLE eur_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
21:03:44 SQL> 
21:03:44 SQL> -- I need a copy of the attributes:
21:03:44 SQL> 
21:03:44 SQL> 
21:03:44 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.05
21:03:44 SQL> CREATE TABLE eur_att COMPRESS AS
21:03:44   2  SELECT
21:03:44   3  ydate
21:03:44   4  ,att00 eur_att00
21:03:44   5  ,att01 eur_att01
21:03:44   6  ,att02 eur_att02
21:03:44   7  ,att03 eur_att03
21:03:44   8  ,att04 eur_att04
21:03:44   9  ,att05 eur_att05
21:03:44  10  ,att06 eur_att06
21:03:44  11  ,att07 eur_att07
21:03:44  12  ,att08 eur_att08
21:03:44  13  ,att09 eur_att09
21:03:44  14  ,att10 eur_att10
21:03:44  15  ,att11 eur_att11
21:03:44  16  ,att12 eur_att12
21:03:44  17  ,att13 eur_att13
21:03:44  18  ,att14 eur_att14
21:03:44  19  ,att15 eur_att15
21:03:44  20  ,att16 eur_att16
21:03:44  21  ,att17 eur_att17
21:03:44  22  ,att18 eur_att18
21:03:44  23  ,att19 eur_att19
21:03:44  24  ,att20 eur_att20
21:03:44  25  ,att21 eur_att21
21:03:44  26  ,att22 eur_att22
21:03:44  27  ,att23 eur_att23
21:03:44  28  ,att24 eur_att24
21:03:44  29  ,att25 eur_att25
21:03:44  30  ,att26 eur_att26
21:03:44  31  ,att27 eur_att27
21:03:44  32  ,att28 eur_att28
21:03:44  33  ,att29 eur_att29
21:03:44  34  ,att30 eur_att30
21:03:44  35  ,att31 eur_att31
21:03:44  36  ,att32 eur_att32
21:03:44  37  ,att33 eur_att33
21:03:44  38  ,att34 eur_att34
21:03:44  39  ,att35 eur_att35
21:03:44  40  ,att36 eur_att36
21:03:44  41  ,att37 eur_att37
21:03:44  42  FROM svm6162
21:03:44  43  /

Table created.

Elapsed: 00:00:00.19
21:03:44 SQL> 
21:03:44 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.49
21:03:45 SQL> 
21:03:45 SQL> -- rpt
21:03:45 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19814

Elapsed: 00:00:00.88
21:03:46 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     19814

Elapsed: 00:00:00.01
21:03:46 SQL> 
21:03:46 SQL> --
21:03:46 SQL> -- aud610.sql
21:03:46 SQL> --
21:03:46 SQL> 
21:03:46 SQL> -- Creates views and tables for backtesting a forex SVM strategy
21:03:46 SQL> 
21:03:46 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.44
21:03:46 SQL> 
21:03:46 SQL> -- I created di5min here:
21:03:46 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
21:03:46 SQL> 
21:03:46 SQL> CREATE OR REPLACE VIEW svm6102 AS
21:03:46   2  SELECT
21:03:46   3  pair
21:03:46   4  ,ydate
21:03:46   5  ,prdate
21:03:46   6  ,rownum rnum -- acts as t in my time-series
21:03:46   7  ,clse
21:03:46   8  -- Derive a bunch of attributes from clse, the latest price:
21:03:46   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
21:03:46  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
21:03:46  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
21:03:46  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
21:03:46  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
21:03:46  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
21:03:46  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
21:03:46  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
21:03:46  17  --
21:03:46  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
21:03:46  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
21:03:46  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
21:03:46  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
21:03:46  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
21:03:46  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
21:03:46  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
21:03:46  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
21:03:46  26  --
21:03:46  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
21:03:46  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
21:03:46  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
21:03:46  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
21:03:46  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
21:03:46  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
21:03:46  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
21:03:46  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
21:03:46  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
21:03:46  36  FROM di5min WHERE pair LIKE'%aud%'
21:03:46  37  AND ydate > sysdate - 95
21:03:46  38  ORDER BY ydate
21:03:46  39  /

View created.

Elapsed: 00:00:00.05
21:03:46 SQL> 
21:03:46 SQL> -- rpt
21:03:46 SQL> 
21:03:46 SQL> SELECT
21:03:46   2  pair
21:03:46   3  ,COUNT(pair)
21:03:46   4  ,MIN(clse),MAX(clse)
21:03:46   5  ,MIN(avg6),MAX(avg6)
21:03:46   6  ,MIN(ydate),MAX(ydate)
21:03:46   7  FROM svm6102
21:03:46   8  GROUP BY pair
21:03:46   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
aud_usd       19811	.95405	  1.02495 .957141438 1.02284247 2010-10-03 21:05:01 2011-01-06 21:00:00

Elapsed: 00:00:00.92
21:03:47 SQL> 
21:03:47 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
21:03:47 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.30
21:03:47 SQL> CREATE TABLE svm6122 COMPRESS AS
21:03:47   2  SELECT
21:03:47   3  pair
21:03:47   4  ,ydate
21:03:47   5  ,prdate
21:03:47   6  ,clse
21:03:47   7  -- g6 is important. I want to predict g6:
21:03:47   8  ,ld6 - clse g6
21:03:47   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
21:03:47  10  -- I want more attributes from the ones I derived above:
21:03:47  11  -- clse relation to moving-min
21:03:47  12  ,clse-min4  cm4
21:03:47  13  ,clse-min6  cm6
21:03:47  14  ,clse-min8  cm8
21:03:47  15  ,clse-min10 cm10
21:03:47  16  ,clse-min12 cm12
21:03:47  17  ,clse-min14 cm14
21:03:47  18  ,clse-min16 cm16
21:03:47  19  ,clse-min18 cm18
21:03:47  20  -- clse relation to moving-avg
21:03:47  21  ,clse-avg4  ca4
21:03:47  22  ,clse-avg6  ca6
21:03:47  23  ,clse-avg8  ca8
21:03:47  24  ,clse-avg10 ca10
21:03:47  25  ,clse-avg12 ca12
21:03:47  26  ,clse-avg14 ca14
21:03:47  27  ,clse-avg16 ca16
21:03:47  28  ,clse-avg18 ca18
21:03:47  29  -- clse relation to moving-max
21:03:47  30  ,clse-max4  cx4
21:03:47  31  ,clse-max6  cx6
21:03:47  32  ,clse-max8  cx8
21:03:47  33  ,clse-max10 cx10
21:03:47  34  ,clse-max12 cx12
21:03:47  35  ,clse-max14 cx14
21:03:47  36  ,clse-max16 cx16
21:03:47  37  ,clse-max18 cx18
21:03:47  38  -- Derive more attributes.
21:03:47  39  -- I want to use CORR() here to help SVM see the shape of the series.
21:03:47  40  -- But COVAR_POP is more stable:
21:03:47  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
21:03:47  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
21:03:47  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
21:03:47  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
21:03:47  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
21:03:47  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
21:03:47  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
21:03:47  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
21:03:47  49  -- Derive date related attributes:
21:03:47  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
21:03:47  51  ,0+TO_CHAR(ydate,'D')d
21:03:47  52  ,0+TO_CHAR(ydate,'W')w
21:03:47  53  -- mpm stands for minutes-past-midnight:
21:03:47  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
21:03:47  55  -- mph stands for minutes-past-hour:
21:03:47  56  ,0+TO_CHAR(ydate,'MI')mph
21:03:47  57  FROM svm6102
21:03:47  58  ORDER BY ydate
21:03:47  59  /

Table created.

Elapsed: 00:00:02.18
21:03:49 SQL> 
21:03:49 SQL> -- rpt
21:03:49 SQL> 
21:03:49 SQL> SELECT
21:03:49   2  pair
21:03:49   3  ,COUNT(pair)
21:03:49   4  ,MIN(clse),MAX(clse)
21:03:49   5  ,MIN(ydate),MAX(ydate)
21:03:49   6  FROM svm6122
21:03:49   7  GROUP BY pair
21:03:49   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
aud_usd       19811	.95405	  1.02495 2010-10-03 21:05:01 2011-01-06 21:00:00

Elapsed: 00:00:00.05
21:03:50 SQL> 
21:03:50 SQL> -- Prepare for derivation of NTILE based params:
21:03:50 SQL> 
21:03:50 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.32
21:03:50 SQL> CREATE TABLE svm6142 COMPRESS AS
21:03:50   2  SELECT
21:03:50   3  pair
21:03:50   4  ,ydate
21:03:50   5  ,prdate
21:03:50   6  ,clse
21:03:50   7  ,g6
21:03:50   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
21:03:50   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
21:03:50  10  ,CASE WHEN trend IS NULL THEN 1
21:03:50  11  	    WHEN trend =0      THEN 1
21:03:50  12  	    ELSE trend END trend
21:03:50  13  ,cm4
21:03:50  14  ,cm6
21:03:50  15  ,cm8
21:03:50  16  ,cm10
21:03:50  17  ,cm12
21:03:50  18  ,cm14
21:03:50  19  ,cm16
21:03:50  20  ,cm18
21:03:50  21  --
21:03:50  22  ,ca4
21:03:50  23  ,ca6
21:03:50  24  ,ca8
21:03:50  25  ,ca10
21:03:50  26  ,ca12
21:03:50  27  ,ca14
21:03:50  28  ,ca16
21:03:50  29  ,ca18
21:03:50  30  --
21:03:50  31  ,cx4
21:03:50  32  ,cx6
21:03:50  33  ,cx8
21:03:50  34  ,cx10
21:03:50  35  ,cx12
21:03:50  36  ,cx14
21:03:50  37  ,cx16
21:03:50  38  ,cx18
21:03:50  39  --
21:03:50  40  ,crr4
21:03:50  41  ,crr6
21:03:50  42  ,crr8
21:03:50  43  ,crr10
21:03:50  44  ,crr12
21:03:50  45  ,crr14
21:03:50  46  ,crr16
21:03:50  47  ,crr18
21:03:50  48  --
21:03:50  49  ,hh
21:03:50  50  ,d
21:03:50  51  ,w
21:03:50  52  ,mpm
21:03:50  53  ,mph
21:03:50  54  FROM svm6122
21:03:50  55  ORDER BY ydate
21:03:50  56  /

Table created.

Elapsed: 00:00:00.41
21:03:50 SQL> 
21:03:50 SQL> -- rpt
21:03:50 SQL> 
21:03:50 SQL> SELECT
21:03:50   2  pair
21:03:50   3  ,trend
21:03:50   4  ,gatt
21:03:50   5  ,COUNT(pair)
21:03:50   6  ,AVG(g6)
21:03:50   7  FROM svm6142
21:03:50   8  GROUP BY pair,trend,gatt
21:03:50   9  ORDER BY pair,trend,gatt
21:03:50  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5716 -.00214976
aud_usd 	-1 up	      3701 .003745866
aud_usd 	-1		72
aud_usd 	 1 nup	      6729 -.00213856
aud_usd 	 1 up	      3593 .004054752

Elapsed: 00:00:00.04
21:03:50 SQL> 
21:03:50 SQL> 
21:03:50 SQL> -- Derive NTILE based params:
21:03:50 SQL> 
21:03:50 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.19
21:03:50 SQL> CREATE TABLE svm6162 COMPRESS AS
21:03:50   2  SELECT
21:03:50   3  pair
21:03:50   4  ,ydate
21:03:50   5  ,prdate
21:03:50   6  ,clse
21:03:50   7  ,g6
21:03:50   8  ,gatt
21:03:50   9  ,gattn
21:03:50  10  ,trend
21:03:50  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
21:03:50  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
21:03:50  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
21:03:50  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
21:03:50  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
21:03:50  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
21:03:50  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
21:03:50  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
21:03:50  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
21:03:50  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
21:03:50  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
21:03:50  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
21:03:50  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
21:03:50  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
21:03:50  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
21:03:50  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
21:03:50  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
21:03:50  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
21:03:50  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
21:03:50  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
21:03:50  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
21:03:50  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
21:03:51  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
21:03:51  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
21:03:51  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
21:03:51  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
21:03:51  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
21:03:51  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
21:03:51  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
21:03:51  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
21:03:51  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
21:03:51  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
21:03:51  43  ,hh  att32
21:03:51  44  ,d   att33
21:03:51  45  ,w   att34
21:03:51  46  ,mpm att35
21:03:51  47  ,mph att36
21:03:51  48  ,trend att37
21:03:51  49  FROM svm6142
21:03:51  50  ORDER BY ydate
21:03:51  51  /

Table created.

Elapsed: 00:00:04.84
21:03:55 SQL> 
21:03:55 SQL> -- rpt
21:03:55 SQL> 
21:03:55 SQL> SELECT
21:03:55   2  pair
21:03:55   3  ,trend
21:03:55   4  ,gatt
21:03:55   5  ,COUNT(pair)
21:03:55   6  ,AVG(g6)
21:03:55   7  FROM svm6162
21:03:55   8  GROUP BY pair,trend,gatt
21:03:55   9  ORDER BY pair,trend,gatt
21:03:55  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5716 -.00214976
aud_usd 	-1 up	      3701 .003745866
aud_usd 	-1		72
aud_usd 	 1 nup	      6729 -.00213856
aud_usd 	 1 up	      3593 .004054752

Elapsed: 00:00:00.03
21:03:55 SQL> 
21:03:55 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.19
21:03:56 SQL> CREATE TABLE modsrc COMPRESS AS
21:03:56   2  SELECT
21:03:56   3  pair
21:03:56   4  ,ydate
21:03:56   5  ,prdate
21:03:56   6  ,trend
21:03:56   7  ,g6
21:03:56   8  ,gatt
21:03:56   9  ,gattn
21:03:56  10  FROM svm6162
21:03:56  11  /

Table created.

Elapsed: 00:00:00.10
21:03:56 SQL> 
21:03:56 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
21:03:56 SQL> 
21:03:56 SQL> DROP   TABLE aud_ms610 ;

Table dropped.

Elapsed: 00:00:00.06
21:03:56 SQL> CREATE TABLE aud_ms610 COMPRESS AS
21:03:56   2  SELECT
21:03:56   3  ydate
21:03:56   4  ,trend aud_trend
21:03:56   5  ,g6    aud_g6
21:03:56   6  ,gatt  aud_gatt
21:03:56   7  ,gattn aud_gattn
21:03:56   8  FROM modsrc
21:03:56   9  /

Table created.

Elapsed: 00:00:00.07
21:03:56 SQL> 
21:03:56 SQL> ANALYZE TABLE aud_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
21:03:56 SQL> 
21:03:56 SQL> -- I need a copy of the attributes:
21:03:56 SQL> 
21:03:56 SQL> 
21:03:56 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.04
21:03:56 SQL> CREATE TABLE aud_att COMPRESS AS
21:03:56   2  SELECT
21:03:56   3  ydate
21:03:56   4  ,att00 aud_att00
21:03:56   5  ,att01 aud_att01
21:03:56   6  ,att02 aud_att02
21:03:56   7  ,att03 aud_att03
21:03:56   8  ,att04 aud_att04
21:03:56   9  ,att05 aud_att05
21:03:56  10  ,att06 aud_att06
21:03:56  11  ,att07 aud_att07
21:03:56  12  ,att08 aud_att08
21:03:56  13  ,att09 aud_att09
21:03:56  14  ,att10 aud_att10
21:03:56  15  ,att11 aud_att11
21:03:56  16  ,att12 aud_att12
21:03:56  17  ,att13 aud_att13
21:03:56  18  ,att14 aud_att14
21:03:56  19  ,att15 aud_att15
21:03:56  20  ,att16 aud_att16
21:03:56  21  ,att17 aud_att17
21:03:56  22  ,att18 aud_att18
21:03:56  23  ,att19 aud_att19
21:03:56  24  ,att20 aud_att20
21:03:56  25  ,att21 aud_att21
21:03:56  26  ,att22 aud_att22
21:03:56  27  ,att23 aud_att23
21:03:56  28  ,att24 aud_att24
21:03:56  29  ,att25 aud_att25
21:03:56  30  ,att26 aud_att26
21:03:56  31  ,att27 aud_att27
21:03:56  32  ,att28 aud_att28
21:03:56  33  ,att29 aud_att29
21:03:56  34  ,att30 aud_att30
21:03:56  35  ,att31 aud_att31
21:03:56  36  ,att32 aud_att32
21:03:56  37  ,att33 aud_att33
21:03:56  38  ,att34 aud_att34
21:03:56  39  ,att35 aud_att35
21:03:56  40  ,att36 aud_att36
21:03:56  41  ,att37 aud_att37
21:03:56  42  FROM svm6162
21:03:56  43  /

Table created.

Elapsed: 00:00:00.17
21:03:56 SQL> 
21:03:56 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
21:03:57 SQL> 
21:03:57 SQL> -- rpt
21:03:57 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19811

Elapsed: 00:00:00.90
21:03:58 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     19811

Elapsed: 00:00:00.00
21:03:58 SQL> 
21:03:58 SQL> --
21:03:58 SQL> -- gbp610.sql
21:03:58 SQL> --
21:03:58 SQL> 
21:03:58 SQL> -- Creates views and tables for backtesting a forex SVM strategy
21:03:58 SQL> 
21:03:58 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.56
21:03:58 SQL> 
21:03:58 SQL> -- I created di5min here:
21:03:58 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
21:03:58 SQL> 
21:03:58 SQL> CREATE OR REPLACE VIEW svm6102 AS
21:03:58   2  SELECT
21:03:58   3  pair
21:03:58   4  ,ydate
21:03:58   5  ,prdate
21:03:58   6  ,rownum rnum -- acts as t in my time-series
21:03:58   7  ,clse
21:03:58   8  -- Derive a bunch of attributes from clse, the latest price:
21:03:58   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
21:03:58  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
21:03:58  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
21:03:58  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
21:03:58  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
21:03:58  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
21:03:58  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
21:03:58  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
21:03:58  17  --
21:03:58  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
21:03:58  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
21:03:58  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
21:03:58  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
21:03:58  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
21:03:58  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
21:03:58  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
21:03:58  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
21:03:58  26  --
21:03:58  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
21:03:58  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
21:03:58  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
21:03:58  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
21:03:58  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
21:03:58  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
21:03:58  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
21:03:58  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
21:03:58  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
21:03:58  36  FROM di5min WHERE pair LIKE'%gbp%'
21:03:58  37  AND ydate > sysdate - 95
21:03:58  38  ORDER BY ydate
21:03:58  39  /

View created.

Elapsed: 00:00:00.06
21:03:58 SQL> 
21:03:58 SQL> -- rpt
21:03:58 SQL> 
21:03:58 SQL> SELECT
21:03:58   2  pair
21:03:58   3  ,COUNT(pair)
21:03:58   4  ,MIN(clse),MAX(clse)
21:03:58   5  ,MIN(avg6),MAX(avg6)
21:03:58   6  ,MIN(ydate),MAX(ydate)
21:03:58   7  FROM svm6102
21:03:58   8  GROUP BY pair
21:03:58   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
gbp_usd       19813   1.535325	   1.6295 1.53696747 1.62716986 2010-10-03 21:05:01 2011-01-06 21:00:00

Elapsed: 00:00:00.91
21:03:59 SQL> 
21:03:59 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
21:03:59 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.45
21:04:00 SQL> CREATE TABLE svm6122 COMPRESS AS
21:04:00   2  SELECT
21:04:00   3  pair
21:04:00   4  ,ydate
21:04:00   5  ,prdate
21:04:00   6  ,clse
21:04:00   7  -- g6 is important. I want to predict g6:
21:04:00   8  ,ld6 - clse g6
21:04:00   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
21:04:00  10  -- I want more attributes from the ones I derived above:
21:04:00  11  -- clse relation to moving-min
21:04:00  12  ,clse-min4  cm4
21:04:00  13  ,clse-min6  cm6
21:04:00  14  ,clse-min8  cm8
21:04:00  15  ,clse-min10 cm10
21:04:00  16  ,clse-min12 cm12
21:04:00  17  ,clse-min14 cm14
21:04:00  18  ,clse-min16 cm16
21:04:00  19  ,clse-min18 cm18
21:04:00  20  -- clse relation to moving-avg
21:04:00  21  ,clse-avg4  ca4
21:04:00  22  ,clse-avg6  ca6
21:04:00  23  ,clse-avg8  ca8
21:04:00  24  ,clse-avg10 ca10
21:04:00  25  ,clse-avg12 ca12
21:04:00  26  ,clse-avg14 ca14
21:04:00  27  ,clse-avg16 ca16
21:04:00  28  ,clse-avg18 ca18
21:04:00  29  -- clse relation to moving-max
21:04:00  30  ,clse-max4  cx4
21:04:00  31  ,clse-max6  cx6
21:04:00  32  ,clse-max8  cx8
21:04:00  33  ,clse-max10 cx10
21:04:00  34  ,clse-max12 cx12
21:04:00  35  ,clse-max14 cx14
21:04:00  36  ,clse-max16 cx16
21:04:00  37  ,clse-max18 cx18
21:04:00  38  -- Derive more attributes.
21:04:00  39  -- I want to use CORR() here to help SVM see the shape of the series.
21:04:00  40  -- But COVAR_POP is more stable:
21:04:00  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
21:04:00  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
21:04:00  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
21:04:00  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
21:04:00  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
21:04:00  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
21:04:00  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
21:04:00  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
21:04:00  49  -- Derive date related attributes:
21:04:00  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
21:04:00  51  ,0+TO_CHAR(ydate,'D')d
21:04:00  52  ,0+TO_CHAR(ydate,'W')w
21:04:00  53  -- mpm stands for minutes-past-midnight:
21:04:00  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
21:04:00  55  -- mph stands for minutes-past-hour:
21:04:00  56  ,0+TO_CHAR(ydate,'MI')mph
21:04:00  57  FROM svm6102
21:04:00  58  ORDER BY ydate
21:04:00  59  /

Table created.

Elapsed: 00:00:02.14
21:04:02 SQL> 
21:04:02 SQL> -- rpt
21:04:02 SQL> 
21:04:02 SQL> SELECT
21:04:02   2  pair
21:04:02   3  ,COUNT(pair)
21:04:02   4  ,MIN(clse),MAX(clse)
21:04:02   5  ,MIN(ydate),MAX(ydate)
21:04:02   6  FROM svm6122
21:04:02   7  GROUP BY pair
21:04:02   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
gbp_usd       19813   1.535325	   1.6295 2010-10-03 21:05:01 2011-01-06 21:00:00

Elapsed: 00:00:00.05
21:04:02 SQL> 
21:04:02 SQL> -- Prepare for derivation of NTILE based params:
21:04:02 SQL> 
21:04:02 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.23
21:04:02 SQL> CREATE TABLE svm6142 COMPRESS AS
21:04:02   2  SELECT
21:04:02   3  pair
21:04:02   4  ,ydate
21:04:02   5  ,prdate
21:04:02   6  ,clse
21:04:02   7  ,g6
21:04:02   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
21:04:02   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
21:04:02  10  ,CASE WHEN trend IS NULL THEN 1
21:04:02  11  	    WHEN trend =0      THEN 1
21:04:02  12  	    ELSE trend END trend
21:04:02  13  ,cm4
21:04:02  14  ,cm6
21:04:02  15  ,cm8
21:04:02  16  ,cm10
21:04:02  17  ,cm12
21:04:02  18  ,cm14
21:04:02  19  ,cm16
21:04:02  20  ,cm18
21:04:02  21  --
21:04:02  22  ,ca4
21:04:02  23  ,ca6
21:04:02  24  ,ca8
21:04:02  25  ,ca10
21:04:02  26  ,ca12
21:04:02  27  ,ca14
21:04:02  28  ,ca16
21:04:02  29  ,ca18
21:04:02  30  --
21:04:02  31  ,cx4
21:04:02  32  ,cx6
21:04:02  33  ,cx8
21:04:02  34  ,cx10
21:04:02  35  ,cx12
21:04:02  36  ,cx14
21:04:02  37  ,cx16
21:04:02  38  ,cx18
21:04:02  39  --
21:04:02  40  ,crr4
21:04:02  41  ,crr6
21:04:02  42  ,crr8
21:04:02  43  ,crr10
21:04:02  44  ,crr12
21:04:02  45  ,crr14
21:04:02  46  ,crr16
21:04:02  47  ,crr18
21:04:02  48  --
21:04:02  49  ,hh
21:04:02  50  ,d
21:04:02  51  ,w
21:04:02  52  ,mpm
21:04:02  53  ,mph
21:04:02  54  FROM svm6122
21:04:02  55  ORDER BY ydate
21:04:02  56  /

Table created.

Elapsed: 00:00:00.36
21:04:03 SQL> 
21:04:03 SQL> -- rpt
21:04:03 SQL> 
21:04:03 SQL> SELECT
21:04:03   2  pair
21:04:03   3  ,trend
21:04:03   4  ,gatt
21:04:03   5  ,COUNT(pair)
21:04:03   6  ,AVG(g6)
21:04:03   7  FROM svm6142
21:04:03   8  GROUP BY pair,trend,gatt
21:04:03   9  ORDER BY pair,trend,gatt
21:04:03  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6421 -.00262655
gbp_usd 	-1 up	      3579 .004338911
gbp_usd 	-1		50
gbp_usd 	 1 nup	      6285 -.00265048
gbp_usd 	 1 up	      3456 .004524374
gbp_usd 	 1		22

6 rows selected.

Elapsed: 00:00:00.04
21:04:03 SQL> 
21:04:03 SQL> 
21:04:03 SQL> -- Derive NTILE based params:
21:04:03 SQL> 
21:04:03 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.15
21:04:03 SQL> CREATE TABLE svm6162 COMPRESS AS
21:04:03   2  SELECT
21:04:03   3  pair
21:04:03   4  ,ydate
21:04:03   5  ,prdate
21:04:03   6  ,clse
21:04:03   7  ,g6
21:04:03   8  ,gatt
21:04:03   9  ,gattn
21:04:03  10  ,trend
21:04:03  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
21:04:03  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
21:04:03  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
21:04:03  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
21:04:03  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
21:04:03  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
21:04:03  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
21:04:03  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
21:04:03  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
21:04:03  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
21:04:03  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
21:04:03  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
21:04:03  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
21:04:03  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
21:04:03  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
21:04:03  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
21:04:03  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
21:04:03  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
21:04:03  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
21:04:03  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
21:04:03  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
21:04:03  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
21:04:03  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
21:04:03  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
21:04:03  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
21:04:03  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
21:04:03  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
21:04:03  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
21:04:03  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
21:04:03  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
21:04:03  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
21:04:03  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
21:04:03  43  ,hh  att32
21:04:03  44  ,d   att33
21:04:03  45  ,w   att34
21:04:03  46  ,mpm att35
21:04:03  47  ,mph att36
21:04:03  48  ,trend att37
21:04:03  49  FROM svm6142
21:04:03  50  ORDER BY ydate
21:04:03  51  /

Table created.

Elapsed: 00:00:04.84
21:04:08 SQL> 
21:04:08 SQL> -- rpt
21:04:08 SQL> 
21:04:08 SQL> SELECT
21:04:08   2  pair
21:04:08   3  ,trend
21:04:08   4  ,gatt
21:04:08   5  ,COUNT(pair)
21:04:08   6  ,AVG(g6)
21:04:08   7  FROM svm6162
21:04:08   8  GROUP BY pair,trend,gatt
21:04:08   9  ORDER BY pair,trend,gatt
21:04:08  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6421 -.00262655
gbp_usd 	-1 up	      3579 .004338911
gbp_usd 	-1		50
gbp_usd 	 1 nup	      6285 -.00265048
gbp_usd 	 1 up	      3456 .004524374
gbp_usd 	 1		22

6 rows selected.

Elapsed: 00:00:00.03
21:04:08 SQL> 
21:04:08 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.11
21:04:08 SQL> CREATE TABLE modsrc COMPRESS AS
21:04:08   2  SELECT
21:04:08   3  pair
21:04:08   4  ,ydate
21:04:08   5  ,prdate
21:04:08   6  ,trend
21:04:08   7  ,g6
21:04:08   8  ,gatt
21:04:08   9  ,gattn
21:04:08  10  FROM svm6162
21:04:08  11  /

Table created.

Elapsed: 00:00:00.08
21:04:08 SQL> 
21:04:08 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
21:04:08 SQL> 
21:04:08 SQL> DROP   TABLE gbp_ms610 ;

Table dropped.

Elapsed: 00:00:00.07
21:04:08 SQL> CREATE TABLE gbp_ms610 COMPRESS AS
21:04:08   2  SELECT
21:04:08   3  ydate
21:04:08   4  ,trend gbp_trend
21:04:08   5  ,g6    gbp_g6
21:04:08   6  ,gatt  gbp_gatt
21:04:08   7  ,gattn gbp_gattn
21:04:08   8  FROM modsrc
21:04:08   9  /

Table created.

Elapsed: 00:00:00.07
21:04:08 SQL> 
21:04:08 SQL> ANALYZE TABLE gbp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
21:04:08 SQL> 
21:04:08 SQL> -- I need a copy of the attributes:
21:04:08 SQL> 
21:04:08 SQL> 
21:04:08 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.04
21:04:08 SQL> CREATE TABLE gbp_att COMPRESS AS
21:04:08   2  SELECT
21:04:08   3  ydate
21:04:08   4  ,att00 gbp_att00
21:04:08   5  ,att01 gbp_att01
21:04:08   6  ,att02 gbp_att02
21:04:08   7  ,att03 gbp_att03
21:04:08   8  ,att04 gbp_att04
21:04:08   9  ,att05 gbp_att05
21:04:08  10  ,att06 gbp_att06
21:04:08  11  ,att07 gbp_att07
21:04:08  12  ,att08 gbp_att08
21:04:08  13  ,att09 gbp_att09
21:04:08  14  ,att10 gbp_att10
21:04:08  15  ,att11 gbp_att11
21:04:08  16  ,att12 gbp_att12
21:04:08  17  ,att13 gbp_att13
21:04:08  18  ,att14 gbp_att14
21:04:08  19  ,att15 gbp_att15
21:04:08  20  ,att16 gbp_att16
21:04:08  21  ,att17 gbp_att17
21:04:08  22  ,att18 gbp_att18
21:04:08  23  ,att19 gbp_att19
21:04:08  24  ,att20 gbp_att20
21:04:08  25  ,att21 gbp_att21
21:04:08  26  ,att22 gbp_att22
21:04:08  27  ,att23 gbp_att23
21:04:08  28  ,att24 gbp_att24
21:04:08  29  ,att25 gbp_att25
21:04:08  30  ,att26 gbp_att26
21:04:08  31  ,att27 gbp_att27
21:04:08  32  ,att28 gbp_att28
21:04:08  33  ,att29 gbp_att29
21:04:08  34  ,att30 gbp_att30
21:04:08  35  ,att31 gbp_att31
21:04:08  36  ,att32 gbp_att32
21:04:08  37  ,att33 gbp_att33
21:04:08  38  ,att34 gbp_att34
21:04:08  39  ,att35 gbp_att35
21:04:08  40  ,att36 gbp_att36
21:04:08  41  ,att37 gbp_att37
21:04:08  42  FROM svm6162
21:04:08  43  /

Table created.

Elapsed: 00:00:00.16
21:04:08 SQL> 
21:04:08 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
21:04:09 SQL> 
21:04:09 SQL> -- rpt
21:04:09 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19813

Elapsed: 00:00:00.86
21:04:10 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     19813

Elapsed: 00:00:00.00
21:04:10 SQL> 
21:04:10 SQL> --
21:04:10 SQL> -- jpy610.sql
21:04:10 SQL> --
21:04:10 SQL> 
21:04:10 SQL> -- Creates views and tables for backtesting a forex SVM strategy
21:04:10 SQL> 
21:04:10 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.36
21:04:10 SQL> 
21:04:10 SQL> -- I created di5min here:
21:04:10 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
21:04:10 SQL> 
21:04:10 SQL> CREATE OR REPLACE VIEW svm6102 AS
21:04:10   2  SELECT
21:04:10   3  pair
21:04:10   4  ,ydate
21:04:10   5  ,prdate
21:04:10   6  ,rownum rnum -- acts as t in my time-series
21:04:10   7  ,clse
21:04:10   8  -- Derive a bunch of attributes from clse, the latest price:
21:04:10   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
21:04:10  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
21:04:10  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
21:04:10  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
21:04:10  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
21:04:10  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
21:04:10  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
21:04:10  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
21:04:10  17  --
21:04:10  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
21:04:10  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
21:04:10  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
21:04:10  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
21:04:10  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
21:04:10  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
21:04:10  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
21:04:10  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
21:04:10  26  --
21:04:10  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
21:04:10  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
21:04:10  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
21:04:10  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
21:04:10  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
21:04:10  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
21:04:10  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
21:04:10  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
21:04:10  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
21:04:10  36  FROM di5min WHERE pair LIKE'%jpy%'
21:04:10  37  AND ydate > sysdate - 95
21:04:10  38  ORDER BY ydate
21:04:10  39  /

View created.

Elapsed: 00:00:00.05
21:04:10 SQL> 
21:04:10 SQL> -- rpt
21:04:10 SQL> 
21:04:10 SQL> SELECT
21:04:10   2  pair
21:04:10   3  ,COUNT(pair)
21:04:10   4  ,MIN(clse),MAX(clse)
21:04:10   5  ,MIN(avg6),MAX(avg6)
21:04:10   6  ,MIN(ydate),MAX(ydate)
21:04:10   7  FROM svm6102
21:04:10   8  GROUP BY pair
21:04:10   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_jpy       19812	 80.25	   84.485 80.3595205 84.3105479 2010-10-03 21:05:01 2011-01-06 21:00:00

Elapsed: 00:00:00.96
21:04:11 SQL> 
21:04:11 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
21:04:11 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.28
21:04:11 SQL> CREATE TABLE svm6122 COMPRESS AS
21:04:11   2  SELECT
21:04:11   3  pair
21:04:11   4  ,ydate
21:04:11   5  ,prdate
21:04:11   6  ,clse
21:04:11   7  -- g6 is important. I want to predict g6:
21:04:11   8  ,ld6 - clse g6
21:04:11   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
21:04:11  10  -- I want more attributes from the ones I derived above:
21:04:11  11  -- clse relation to moving-min
21:04:11  12  ,clse-min4  cm4
21:04:11  13  ,clse-min6  cm6
21:04:11  14  ,clse-min8  cm8
21:04:11  15  ,clse-min10 cm10
21:04:11  16  ,clse-min12 cm12
21:04:11  17  ,clse-min14 cm14
21:04:11  18  ,clse-min16 cm16
21:04:11  19  ,clse-min18 cm18
21:04:11  20  -- clse relation to moving-avg
21:04:11  21  ,clse-avg4  ca4
21:04:11  22  ,clse-avg6  ca6
21:04:11  23  ,clse-avg8  ca8
21:04:11  24  ,clse-avg10 ca10
21:04:11  25  ,clse-avg12 ca12
21:04:11  26  ,clse-avg14 ca14
21:04:11  27  ,clse-avg16 ca16
21:04:11  28  ,clse-avg18 ca18
21:04:11  29  -- clse relation to moving-max
21:04:11  30  ,clse-max4  cx4
21:04:11  31  ,clse-max6  cx6
21:04:11  32  ,clse-max8  cx8
21:04:11  33  ,clse-max10 cx10
21:04:11  34  ,clse-max12 cx12
21:04:11  35  ,clse-max14 cx14
21:04:11  36  ,clse-max16 cx16
21:04:11  37  ,clse-max18 cx18
21:04:11  38  -- Derive more attributes.
21:04:11  39  -- I want to use CORR() here to help SVM see the shape of the series.
21:04:11  40  -- But COVAR_POP is more stable:
21:04:11  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
21:04:11  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
21:04:11  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
21:04:11  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
21:04:11  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
21:04:11  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
21:04:11  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
21:04:11  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
21:04:11  49  -- Derive date related attributes:
21:04:11  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
21:04:11  51  ,0+TO_CHAR(ydate,'D')d
21:04:11  52  ,0+TO_CHAR(ydate,'W')w
21:04:11  53  -- mpm stands for minutes-past-midnight:
21:04:11  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
21:04:11  55  -- mph stands for minutes-past-hour:
21:04:11  56  ,0+TO_CHAR(ydate,'MI')mph
21:04:11  57  FROM svm6102
21:04:11  58  ORDER BY ydate
21:04:11  59  /

Table created.

Elapsed: 00:00:02.69
21:04:14 SQL> 
21:04:14 SQL> -- rpt
21:04:14 SQL> 
21:04:14 SQL> SELECT
21:04:14   2  pair
21:04:14   3  ,COUNT(pair)
21:04:14   4  ,MIN(clse),MAX(clse)
21:04:14   5  ,MIN(ydate),MAX(ydate)
21:04:14   6  FROM svm6122
21:04:14   7  GROUP BY pair
21:04:14   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_jpy       19812	 80.25	   84.485 2010-10-03 21:05:01 2011-01-06 21:00:00

Elapsed: 00:00:00.07
21:04:14 SQL> 
21:04:14 SQL> -- Prepare for derivation of NTILE based params:
21:04:14 SQL> 
21:04:14 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.22
21:04:14 SQL> CREATE TABLE svm6142 COMPRESS AS
21:04:14   2  SELECT
21:04:14   3  pair
21:04:14   4  ,ydate
21:04:14   5  ,prdate
21:04:14   6  ,clse
21:04:14   7  ,g6
21:04:14   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
21:04:14   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
21:04:14  10  ,CASE WHEN trend IS NULL THEN 1
21:04:14  11  	    WHEN trend =0      THEN 1
21:04:14  12  	    ELSE trend END trend
21:04:14  13  ,cm4
21:04:14  14  ,cm6
21:04:14  15  ,cm8
21:04:14  16  ,cm10
21:04:14  17  ,cm12
21:04:14  18  ,cm14
21:04:14  19  ,cm16
21:04:14  20  ,cm18
21:04:14  21  --
21:04:14  22  ,ca4
21:04:14  23  ,ca6
21:04:14  24  ,ca8
21:04:14  25  ,ca10
21:04:14  26  ,ca12
21:04:14  27  ,ca14
21:04:14  28  ,ca16
21:04:14  29  ,ca18
21:04:14  30  --
21:04:14  31  ,cx4
21:04:14  32  ,cx6
21:04:14  33  ,cx8
21:04:14  34  ,cx10
21:04:14  35  ,cx12
21:04:14  36  ,cx14
21:04:14  37  ,cx16
21:04:14  38  ,cx18
21:04:14  39  --
21:04:14  40  ,crr4
21:04:14  41  ,crr6
21:04:14  42  ,crr8
21:04:14  43  ,crr10
21:04:14  44  ,crr12
21:04:14  45  ,crr14
21:04:14  46  ,crr16
21:04:14  47  ,crr18
21:04:14  48  --
21:04:14  49  ,hh
21:04:14  50  ,d
21:04:14  51  ,w
21:04:14  52  ,mpm
21:04:14  53  ,mph
21:04:14  54  FROM svm6122
21:04:14  55  ORDER BY ydate
21:04:14  56  /

Table created.

Elapsed: 00:00:00.37
21:04:15 SQL> 
21:04:15 SQL> -- rpt
21:04:15 SQL> 
21:04:15 SQL> SELECT
21:04:15   2  pair
21:04:15   3  ,trend
21:04:15   4  ,gatt
21:04:15   5  ,COUNT(pair)
21:04:15   6  ,AVG(g6)
21:04:15   7  FROM svm6142
21:04:15   8  GROUP BY pair,trend,gatt
21:04:15   9  ORDER BY pair,trend,gatt
21:04:15  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5184 -.16553339
usd_jpy 	-1 up	      4906 .169435164
usd_jpy 	-1		 5
usd_jpy 	 1 nup	      5077 -.15499158
usd_jpy 	 1 up	      4573 .174490144
usd_jpy 	 1		67

6 rows selected.

Elapsed: 00:00:00.04
21:04:15 SQL> 
21:04:15 SQL> 
21:04:15 SQL> -- Derive NTILE based params:
21:04:15 SQL> 
21:04:15 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.15
21:04:15 SQL> CREATE TABLE svm6162 COMPRESS AS
21:04:15   2  SELECT
21:04:15   3  pair
21:04:15   4  ,ydate
21:04:15   5  ,prdate
21:04:15   6  ,clse
21:04:15   7  ,g6
21:04:15   8  ,gatt
21:04:15   9  ,gattn
21:04:15  10  ,trend
21:04:15  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
21:04:15  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
21:04:15  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
21:04:15  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
21:04:15  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
21:04:15  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
21:04:15  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
21:04:15  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
21:04:15  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
21:04:15  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
21:04:15  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
21:04:15  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
21:04:15  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
21:04:15  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
21:04:15  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
21:04:15  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
21:04:15  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
21:04:15  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
21:04:15  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
21:04:15  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
21:04:15  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
21:04:15  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
21:04:15  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
21:04:15  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
21:04:15  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
21:04:15  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
21:04:15  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
21:04:15  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
21:04:15  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
21:04:15  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
21:04:15  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
21:04:15  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
21:04:15  43  ,hh  att32
21:04:15  44  ,d   att33
21:04:15  45  ,w   att34
21:04:15  46  ,mpm att35
21:04:15  47  ,mph att36
21:04:15  48  ,trend att37
21:04:15  49  FROM svm6142
21:04:15  50  ORDER BY ydate
21:04:15  51  /

Table created.

Elapsed: 00:00:04.86
21:04:20 SQL> 
21:04:20 SQL> -- rpt
21:04:20 SQL> 
21:04:20 SQL> SELECT
21:04:20   2  pair
21:04:20   3  ,trend
21:04:20   4  ,gatt
21:04:20   5  ,COUNT(pair)
21:04:20   6  ,AVG(g6)
21:04:20   7  FROM svm6162
21:04:20   8  GROUP BY pair,trend,gatt
21:04:20   9  ORDER BY pair,trend,gatt
21:04:20  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5184 -.16553339
usd_jpy 	-1 up	      4906 .169435164
usd_jpy 	-1		 5
usd_jpy 	 1 nup	      5077 -.15499158
usd_jpy 	 1 up	      4573 .174490144
usd_jpy 	 1		67

6 rows selected.

Elapsed: 00:00:00.04
21:04:20 SQL> 
21:04:20 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.11
21:04:20 SQL> CREATE TABLE modsrc COMPRESS AS
21:04:20   2  SELECT
21:04:20   3  pair
21:04:20   4  ,ydate
21:04:20   5  ,prdate
21:04:20   6  ,trend
21:04:20   7  ,g6
21:04:20   8  ,gatt
21:04:20   9  ,gattn
21:04:20  10  FROM svm6162
21:04:20  11  /

Table created.

Elapsed: 00:00:00.09
21:04:20 SQL> 
21:04:20 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.23
21:04:20 SQL> 
21:04:20 SQL> DROP   TABLE jpy_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
21:04:20 SQL> CREATE TABLE jpy_ms610 COMPRESS AS
21:04:20   2  SELECT
21:04:20   3  ydate
21:04:20   4  ,trend jpy_trend
21:04:20   5  ,g6    jpy_g6
21:04:20   6  ,gatt  jpy_gatt
21:04:20   7  ,gattn jpy_gattn
21:04:20   8  FROM modsrc
21:04:20   9  /

Table created.

Elapsed: 00:00:00.08
21:04:20 SQL> 
21:04:20 SQL> ANALYZE TABLE jpy_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
21:04:21 SQL> 
21:04:21 SQL> -- I need a copy of the attributes:
21:04:21 SQL> 
21:04:21 SQL> 
21:04:21 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.05
21:04:21 SQL> CREATE TABLE jpy_att COMPRESS AS
21:04:21   2  SELECT
21:04:21   3  ydate
21:04:21   4  ,att00 jpy_att00
21:04:21   5  ,att01 jpy_att01
21:04:21   6  ,att02 jpy_att02
21:04:21   7  ,att03 jpy_att03
21:04:21   8  ,att04 jpy_att04
21:04:21   9  ,att05 jpy_att05
21:04:21  10  ,att06 jpy_att06
21:04:21  11  ,att07 jpy_att07
21:04:21  12  ,att08 jpy_att08
21:04:21  13  ,att09 jpy_att09
21:04:21  14  ,att10 jpy_att10
21:04:21  15  ,att11 jpy_att11
21:04:21  16  ,att12 jpy_att12
21:04:21  17  ,att13 jpy_att13
21:04:21  18  ,att14 jpy_att14
21:04:21  19  ,att15 jpy_att15
21:04:21  20  ,att16 jpy_att16
21:04:21  21  ,att17 jpy_att17
21:04:21  22  ,att18 jpy_att18
21:04:21  23  ,att19 jpy_att19
21:04:21  24  ,att20 jpy_att20
21:04:21  25  ,att21 jpy_att21
21:04:21  26  ,att22 jpy_att22
21:04:21  27  ,att23 jpy_att23
21:04:21  28  ,att24 jpy_att24
21:04:21  29  ,att25 jpy_att25
21:04:21  30  ,att26 jpy_att26
21:04:21  31  ,att27 jpy_att27
21:04:21  32  ,att28 jpy_att28
21:04:21  33  ,att29 jpy_att29
21:04:21  34  ,att30 jpy_att30
21:04:21  35  ,att31 jpy_att31
21:04:21  36  ,att32 jpy_att32
21:04:21  37  ,att33 jpy_att33
21:04:21  38  ,att34 jpy_att34
21:04:21  39  ,att35 jpy_att35
21:04:21  40  ,att36 jpy_att36
21:04:21  41  ,att37 jpy_att37
21:04:21  42  FROM svm6162
21:04:21  43  /

Table created.

Elapsed: 00:00:00.20
21:04:21 SQL> 
21:04:21 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
21:04:21 SQL> 
21:04:21 SQL> -- rpt
21:04:21 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19812

Elapsed: 00:00:00.92
21:04:22 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     19812

Elapsed: 00:00:00.00
21:04:22 SQL> 
21:04:22 SQL> --
21:04:22 SQL> -- cad610.sql
21:04:22 SQL> --
21:04:22 SQL> 
21:04:22 SQL> -- Creates views and tables for backtesting a forex SVM strategy
21:04:22 SQL> 
21:04:22 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.44
21:04:23 SQL> 
21:04:23 SQL> -- I created di5min here:
21:04:23 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
21:04:23 SQL> 
21:04:23 SQL> CREATE OR REPLACE VIEW svm6102 AS
21:04:23   2  SELECT
21:04:23   3  pair
21:04:23   4  ,ydate
21:04:23   5  ,prdate
21:04:23   6  ,rownum rnum -- acts as t in my time-series
21:04:23   7  ,clse
21:04:23   8  -- Derive a bunch of attributes from clse, the latest price:
21:04:23   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
21:04:23  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
21:04:23  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
21:04:23  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
21:04:23  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
21:04:23  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
21:04:23  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
21:04:23  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
21:04:23  17  --
21:04:23  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
21:04:23  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
21:04:23  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
21:04:23  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
21:04:23  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
21:04:23  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
21:04:23  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
21:04:23  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
21:04:23  26  --
21:04:23  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
21:04:23  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
21:04:23  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
21:04:23  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
21:04:23  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
21:04:23  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
21:04:23  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
21:04:23  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
21:04:23  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
21:04:23  36  FROM di5min WHERE pair LIKE'%cad%'
21:04:23  37  AND ydate > sysdate - 95
21:04:23  38  ORDER BY ydate
21:04:23  39  /

View created.

Elapsed: 00:00:00.04
21:04:23 SQL> 
21:04:23 SQL> -- rpt
21:04:23 SQL> 
21:04:23 SQL> SELECT
21:04:23   2  pair
21:04:23   3  ,COUNT(pair)
21:04:23   4  ,MIN(clse),MAX(clse)
21:04:23   5  ,MIN(avg6),MAX(avg6)
21:04:23   6  ,MIN(ydate),MAX(ydate)
21:04:23   7  FROM svm6102
21:04:23   8  GROUP BY pair
21:04:23   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_cad       19812    .988925	   1.0355  .99060275 1.03282877 2010-10-03 21:05:01 2011-01-06 21:00:00

Elapsed: 00:00:00.88
21:04:24 SQL> 
21:04:24 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
21:04:24 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.23
21:04:24 SQL> CREATE TABLE svm6122 COMPRESS AS
21:04:24   2  SELECT
21:04:24   3  pair
21:04:24   4  ,ydate
21:04:24   5  ,prdate
21:04:24   6  ,clse
21:04:24   7  -- g6 is important. I want to predict g6:
21:04:24   8  ,ld6 - clse g6
21:04:24   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
21:04:24  10  -- I want more attributes from the ones I derived above:
21:04:24  11  -- clse relation to moving-min
21:04:24  12  ,clse-min4  cm4
21:04:24  13  ,clse-min6  cm6
21:04:24  14  ,clse-min8  cm8
21:04:24  15  ,clse-min10 cm10
21:04:24  16  ,clse-min12 cm12
21:04:24  17  ,clse-min14 cm14
21:04:24  18  ,clse-min16 cm16
21:04:24  19  ,clse-min18 cm18
21:04:24  20  -- clse relation to moving-avg
21:04:24  21  ,clse-avg4  ca4
21:04:24  22  ,clse-avg6  ca6
21:04:24  23  ,clse-avg8  ca8
21:04:24  24  ,clse-avg10 ca10
21:04:24  25  ,clse-avg12 ca12
21:04:24  26  ,clse-avg14 ca14
21:04:24  27  ,clse-avg16 ca16
21:04:24  28  ,clse-avg18 ca18
21:04:24  29  -- clse relation to moving-max
21:04:24  30  ,clse-max4  cx4
21:04:24  31  ,clse-max6  cx6
21:04:24  32  ,clse-max8  cx8
21:04:24  33  ,clse-max10 cx10
21:04:24  34  ,clse-max12 cx12
21:04:24  35  ,clse-max14 cx14
21:04:24  36  ,clse-max16 cx16
21:04:24  37  ,clse-max18 cx18
21:04:24  38  -- Derive more attributes.
21:04:24  39  -- I want to use CORR() here to help SVM see the shape of the series.
21:04:24  40  -- But COVAR_POP is more stable:
21:04:24  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
21:04:24  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
21:04:24  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
21:04:24  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
21:04:24  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
21:04:24  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
21:04:24  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
21:04:24  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
21:04:24  49  -- Derive date related attributes:
21:04:24  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
21:04:24  51  ,0+TO_CHAR(ydate,'D')d
21:04:24  52  ,0+TO_CHAR(ydate,'W')w
21:04:24  53  -- mpm stands for minutes-past-midnight:
21:04:24  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
21:04:24  55  -- mph stands for minutes-past-hour:
21:04:24  56  ,0+TO_CHAR(ydate,'MI')mph
21:04:24  57  FROM svm6102
21:04:24  58  ORDER BY ydate
21:04:24  59  /

Table created.

Elapsed: 00:00:02.14
21:04:26 SQL> 
21:04:26 SQL> -- rpt
21:04:26 SQL> 
21:04:26 SQL> SELECT
21:04:26   2  pair
21:04:26   3  ,COUNT(pair)
21:04:26   4  ,MIN(clse),MAX(clse)
21:04:26   5  ,MIN(ydate),MAX(ydate)
21:04:26   6  FROM svm6122
21:04:26   7  GROUP BY pair
21:04:26   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_cad       19812    .988925	   1.0355 2010-10-03 21:05:01 2011-01-06 21:00:00

Elapsed: 00:00:00.04
21:04:26 SQL> 
21:04:26 SQL> -- Prepare for derivation of NTILE based params:
21:04:26 SQL> 
21:04:26 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.24
21:04:26 SQL> CREATE TABLE svm6142 COMPRESS AS
21:04:26   2  SELECT
21:04:26   3  pair
21:04:26   4  ,ydate
21:04:26   5  ,prdate
21:04:26   6  ,clse
21:04:26   7  ,g6
21:04:26   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
21:04:26   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
21:04:26  10  ,CASE WHEN trend IS NULL THEN 1
21:04:26  11  	    WHEN trend =0      THEN 1
21:04:26  12  	    ELSE trend END trend
21:04:26  13  ,cm4
21:04:26  14  ,cm6
21:04:26  15  ,cm8
21:04:26  16  ,cm10
21:04:26  17  ,cm12
21:04:26  18  ,cm14
21:04:26  19  ,cm16
21:04:26  20  ,cm18
21:04:26  21  --
21:04:26  22  ,ca4
21:04:26  23  ,ca6
21:04:26  24  ,ca8
21:04:26  25  ,ca10
21:04:26  26  ,ca12
21:04:26  27  ,ca14
21:04:26  28  ,ca16
21:04:26  29  ,ca18
21:04:26  30  --
21:04:26  31  ,cx4
21:04:26  32  ,cx6
21:04:26  33  ,cx8
21:04:26  34  ,cx10
21:04:26  35  ,cx12
21:04:26  36  ,cx14
21:04:26  37  ,cx16
21:04:26  38  ,cx18
21:04:26  39  --
21:04:26  40  ,crr4
21:04:26  41  ,crr6
21:04:26  42  ,crr8
21:04:26  43  ,crr10
21:04:26  44  ,crr12
21:04:26  45  ,crr14
21:04:26  46  ,crr16
21:04:26  47  ,crr18
21:04:26  48  --
21:04:26  49  ,hh
21:04:26  50  ,d
21:04:26  51  ,w
21:04:26  52  ,mpm
21:04:26  53  ,mph
21:04:26  54  FROM svm6122
21:04:26  55  ORDER BY ydate
21:04:26  56  /

Table created.

Elapsed: 00:00:00.40
21:04:27 SQL> 
21:04:27 SQL> -- rpt
21:04:27 SQL> 
21:04:27 SQL> SELECT
21:04:27   2  pair
21:04:27   3  ,trend
21:04:27   4  ,gatt
21:04:27   5  ,COUNT(pair)
21:04:27   6  ,AVG(g6)
21:04:27   7  FROM svm6142
21:04:27   8  GROUP BY pair,trend,gatt
21:04:27   9  ORDER BY pair,trend,gatt
21:04:27  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7320 -.00124128
usd_cad 	-1 up	      3182 .003050733
usd_cad 	 1 nup	      6845 -.00160872
usd_cad 	 1 up	      2393  .00364514
usd_cad 	 1		72

Elapsed: 00:00:00.03
21:04:27 SQL> 
21:04:27 SQL> 
21:04:27 SQL> -- Derive NTILE based params:
21:04:27 SQL> 
21:04:27 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.20
21:04:27 SQL> CREATE TABLE svm6162 COMPRESS AS
21:04:27   2  SELECT
21:04:27   3  pair
21:04:27   4  ,ydate
21:04:27   5  ,prdate
21:04:27   6  ,clse
21:04:27   7  ,g6
21:04:27   8  ,gatt
21:04:27   9  ,gattn
21:04:27  10  ,trend
21:04:27  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
21:04:27  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
21:04:27  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
21:04:27  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
21:04:27  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
21:04:27  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
21:04:27  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
21:04:27  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
21:04:27  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
21:04:27  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
21:04:27  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
21:04:27  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
21:04:27  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
21:04:27  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
21:04:27  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
21:04:27  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
21:04:27  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
21:04:27  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
21:04:27  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
21:04:27  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
21:04:27  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
21:04:27  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
21:04:27  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
21:04:27  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
21:04:27  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
21:04:27  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
21:04:27  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
21:04:27  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
21:04:27  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
21:04:27  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
21:04:27  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
21:04:27  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
21:04:27  43  ,hh  att32
21:04:27  44  ,d   att33
21:04:27  45  ,w   att34
21:04:27  46  ,mpm att35
21:04:27  47  ,mph att36
21:04:27  48  ,trend att37
21:04:27  49  FROM svm6142
21:04:27  50  ORDER BY ydate
21:04:27  51  /

Table created.

Elapsed: 00:00:04.87
21:04:32 SQL> 
21:04:32 SQL> -- rpt
21:04:32 SQL> 
21:04:32 SQL> SELECT
21:04:32   2  pair
21:04:32   3  ,trend
21:04:32   4  ,gatt
21:04:32   5  ,COUNT(pair)
21:04:32   6  ,AVG(g6)
21:04:32   7  FROM svm6162
21:04:32   8  GROUP BY pair,trend,gatt
21:04:32   9  ORDER BY pair,trend,gatt
21:04:32  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7320 -.00124128
usd_cad 	-1 up	      3182 .003050733
usd_cad 	 1 nup	      6845 -.00160872
usd_cad 	 1 up	      2393  .00364514
usd_cad 	 1		72

Elapsed: 00:00:00.03
21:04:32 SQL> 
21:04:32 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.10
21:04:32 SQL> CREATE TABLE modsrc COMPRESS AS
21:04:32   2  SELECT
21:04:32   3  pair
21:04:32   4  ,ydate
21:04:32   5  ,prdate
21:04:32   6  ,trend
21:04:32   7  ,g6
21:04:32   8  ,gatt
21:04:32   9  ,gattn
21:04:32  10  FROM svm6162
21:04:32  11  /

Table created.

Elapsed: 00:00:00.09
21:04:32 SQL> 
21:04:32 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
21:04:32 SQL> 
21:04:32 SQL> DROP   TABLE cad_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
21:04:32 SQL> CREATE TABLE cad_ms610 COMPRESS AS
21:04:32   2  SELECT
21:04:32   3  ydate
21:04:32   4  ,trend cad_trend
21:04:32   5  ,g6    cad_g6
21:04:32   6  ,gatt  cad_gatt
21:04:32   7  ,gattn cad_gattn
21:04:32   8  FROM modsrc
21:04:32   9  /

Table created.

Elapsed: 00:00:00.08
21:04:32 SQL> 
21:04:32 SQL> ANALYZE TABLE cad_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
21:04:33 SQL> 
21:04:33 SQL> -- I need a copy of the attributes:
21:04:33 SQL> 
21:04:33 SQL> 
21:04:33 SQL> DROP   TABLE cad_att;

Table dropped.

Elapsed: 00:00:00.04
21:04:33 SQL> CREATE TABLE cad_att COMPRESS AS
21:04:33   2  SELECT
21:04:33   3  ydate
21:04:33   4  ,att00 cad_att00
21:04:33   5  ,att01 cad_att01
21:04:33   6  ,att02 cad_att02
21:04:33   7  ,att03 cad_att03
21:04:33   8  ,att04 cad_att04
21:04:33   9  ,att05 cad_att05
21:04:33  10  ,att06 cad_att06
21:04:33  11  ,att07 cad_att07
21:04:33  12  ,att08 cad_att08
21:04:33  13  ,att09 cad_att09
21:04:33  14  ,att10 cad_att10
21:04:33  15  ,att11 cad_att11
21:04:33  16  ,att12 cad_att12
21:04:33  17  ,att13 cad_att13
21:04:33  18  ,att14 cad_att14
21:04:33  19  ,att15 cad_att15
21:04:33  20  ,att16 cad_att16
21:04:33  21  ,att17 cad_att17
21:04:33  22  ,att18 cad_att18
21:04:33  23  ,att19 cad_att19
21:04:33  24  ,att20 cad_att20
21:04:33  25  ,att21 cad_att21
21:04:33  26  ,att22 cad_att22
21:04:33  27  ,att23 cad_att23
21:04:33  28  ,att24 cad_att24
21:04:33  29  ,att25 cad_att25
21:04:33  30  ,att26 cad_att26
21:04:33  31  ,att27 cad_att27
21:04:33  32  ,att28 cad_att28
21:04:33  33  ,att29 cad_att29
21:04:33  34  ,att30 cad_att30
21:04:33  35  ,att31 cad_att31
21:04:33  36  ,att32 cad_att32
21:04:33  37  ,att33 cad_att33
21:04:33  38  ,att34 cad_att34
21:04:33  39  ,att35 cad_att35
21:04:33  40  ,att36 cad_att36
21:04:33  41  ,att37 cad_att37
21:04:33  42  FROM svm6162
21:04:33  43  /

Table created.

Elapsed: 00:00:00.16
21:04:33 SQL> 
21:04:33 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.51
21:04:33 SQL> 
21:04:33 SQL> -- rpt
21:04:33 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19812

Elapsed: 00:00:00.85
21:04:34 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
     19812

Elapsed: 00:00:00.00
21:04:34 SQL> 
21:04:34 SQL> --
21:04:34 SQL> -- chf610.sql
21:04:34 SQL> --
21:04:34 SQL> 
21:04:34 SQL> -- Creates views and tables for backtesting a forex SVM strategy
21:04:34 SQL> 
21:04:34 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.36
21:04:34 SQL> 
21:04:34 SQL> -- I created di5min here:
21:04:34 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
21:04:34 SQL> 
21:04:34 SQL> CREATE OR REPLACE VIEW svm6102 AS
21:04:34   2  SELECT
21:04:34   3  pair
21:04:34   4  ,ydate
21:04:34   5  ,prdate
21:04:34   6  ,rownum rnum -- acts as t in my time-series
21:04:34   7  ,clse
21:04:34   8  -- Derive a bunch of attributes from clse, the latest price:
21:04:34   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
21:04:34  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
21:04:34  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
21:04:34  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
21:04:34  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
21:04:34  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
21:04:34  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
21:04:34  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
21:04:34  17  --
21:04:34  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
21:04:34  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
21:04:34  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
21:04:34  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
21:04:34  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
21:04:34  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
21:04:34  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
21:04:34  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
21:04:34  26  --
21:04:34  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
21:04:34  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
21:04:34  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
21:04:34  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
21:04:34  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
21:04:34  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
21:04:34  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
21:04:34  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
21:04:34  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
21:04:34  36  FROM di5min WHERE pair LIKE'%chf%'
21:04:34  37  AND ydate > sysdate - 95
21:04:34  38  ORDER BY ydate
21:04:34  39  /

View created.

Elapsed: 00:00:00.05
21:04:35 SQL> 
21:04:35 SQL> -- rpt
21:04:35 SQL> 
21:04:35 SQL> SELECT
21:04:35   2  pair
21:04:35   3  ,COUNT(pair)
21:04:35   4  ,MIN(clse),MAX(clse)
21:04:35   5  ,MIN(avg6),MAX(avg6)
21:04:35   6  ,MIN(ydate),MAX(ydate)
21:04:35   7  FROM svm6102
21:04:35   8  GROUP BY pair
21:04:35   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_chf       19815    .931675	  1.00635 .933256155 1.00498151 2010-10-03 21:05:01 2011-01-06 21:00:00

Elapsed: 00:00:00.90
21:04:35 SQL> 
21:04:35 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
21:04:35 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.30
21:04:36 SQL> CREATE TABLE svm6122 COMPRESS AS
21:04:36   2  SELECT
21:04:36   3  pair
21:04:36   4  ,ydate
21:04:36   5  ,prdate
21:04:36   6  ,clse
21:04:36   7  -- g6 is important. I want to predict g6:
21:04:36   8  ,ld6 - clse g6
21:04:36   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
21:04:36  10  -- I want more attributes from the ones I derived above:
21:04:36  11  -- clse relation to moving-min
21:04:36  12  ,clse-min4  cm4
21:04:36  13  ,clse-min6  cm6
21:04:36  14  ,clse-min8  cm8
21:04:36  15  ,clse-min10 cm10
21:04:36  16  ,clse-min12 cm12
21:04:36  17  ,clse-min14 cm14
21:04:36  18  ,clse-min16 cm16
21:04:36  19  ,clse-min18 cm18
21:04:36  20  -- clse relation to moving-avg
21:04:36  21  ,clse-avg4  ca4
21:04:36  22  ,clse-avg6  ca6
21:04:36  23  ,clse-avg8  ca8
21:04:36  24  ,clse-avg10 ca10
21:04:36  25  ,clse-avg12 ca12
21:04:36  26  ,clse-avg14 ca14
21:04:36  27  ,clse-avg16 ca16
21:04:36  28  ,clse-avg18 ca18
21:04:36  29  -- clse relation to moving-max
21:04:36  30  ,clse-max4  cx4
21:04:36  31  ,clse-max6  cx6
21:04:36  32  ,clse-max8  cx8
21:04:36  33  ,clse-max10 cx10
21:04:36  34  ,clse-max12 cx12
21:04:36  35  ,clse-max14 cx14
21:04:36  36  ,clse-max16 cx16
21:04:36  37  ,clse-max18 cx18
21:04:36  38  -- Derive more attributes.
21:04:36  39  -- I want to use CORR() here to help SVM see the shape of the series.
21:04:36  40  -- But COVAR_POP is more stable:
21:04:36  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
21:04:36  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
21:04:36  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
21:04:36  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
21:04:36  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
21:04:36  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
21:04:36  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
21:04:36  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
21:04:36  49  -- Derive date related attributes:
21:04:36  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
21:04:36  51  ,0+TO_CHAR(ydate,'D')d
21:04:36  52  ,0+TO_CHAR(ydate,'W')w
21:04:36  53  -- mpm stands for minutes-past-midnight:
21:04:36  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
21:04:36  55  -- mph stands for minutes-past-hour:
21:04:36  56  ,0+TO_CHAR(ydate,'MI')mph
21:04:36  57  FROM svm6102
21:04:36  58  ORDER BY ydate
21:04:36  59  /

Table created.

Elapsed: 00:00:02.07
21:04:38 SQL> 
21:04:38 SQL> -- rpt
21:04:38 SQL> 
21:04:38 SQL> SELECT
21:04:38   2  pair
21:04:38   3  ,COUNT(pair)
21:04:38   4  ,MIN(clse),MAX(clse)
21:04:38   5  ,MIN(ydate),MAX(ydate)
21:04:38   6  FROM svm6122
21:04:38   7  GROUP BY pair
21:04:38   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_chf       19815    .931675	  1.00635 2010-10-03 21:05:01 2011-01-06 21:00:00

Elapsed: 00:00:00.03
21:04:38 SQL> 
21:04:38 SQL> -- Prepare for derivation of NTILE based params:
21:04:38 SQL> 
21:04:38 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.29
21:04:38 SQL> CREATE TABLE svm6142 COMPRESS AS
21:04:38   2  SELECT
21:04:38   3  pair
21:04:38   4  ,ydate
21:04:38   5  ,prdate
21:04:38   6  ,clse
21:04:38   7  ,g6
21:04:38   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
21:04:38   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
21:04:38  10  ,CASE WHEN trend IS NULL THEN 1
21:04:38  11  	    WHEN trend =0      THEN 1
21:04:38  12  	    ELSE trend END trend
21:04:38  13  ,cm4
21:04:38  14  ,cm6
21:04:38  15  ,cm8
21:04:38  16  ,cm10
21:04:38  17  ,cm12
21:04:38  18  ,cm14
21:04:38  19  ,cm16
21:04:38  20  ,cm18
21:04:38  21  --
21:04:38  22  ,ca4
21:04:38  23  ,ca6
21:04:38  24  ,ca8
21:04:38  25  ,ca10
21:04:38  26  ,ca12
21:04:38  27  ,ca14
21:04:38  28  ,ca16
21:04:38  29  ,ca18
21:04:38  30  --
21:04:38  31  ,cx4
21:04:38  32  ,cx6
21:04:38  33  ,cx8
21:04:38  34  ,cx10
21:04:38  35  ,cx12
21:04:38  36  ,cx14
21:04:38  37  ,cx16
21:04:38  38  ,cx18
21:04:38  39  --
21:04:38  40  ,crr4
21:04:38  41  ,crr6
21:04:38  42  ,crr8
21:04:38  43  ,crr10
21:04:38  44  ,crr12
21:04:38  45  ,crr14
21:04:38  46  ,crr16
21:04:38  47  ,crr18
21:04:38  48  --
21:04:38  49  ,hh
21:04:38  50  ,d
21:04:38  51  ,w
21:04:38  52  ,mpm
21:04:38  53  ,mph
21:04:38  54  FROM svm6122
21:04:38  55  ORDER BY ydate
21:04:38  56  /

Table created.

Elapsed: 00:00:00.39
21:04:38 SQL> 
21:04:38 SQL> -- rpt
21:04:38 SQL> 
21:04:38 SQL> SELECT
21:04:38   2  pair
21:04:38   3  ,trend
21:04:38   4  ,gatt
21:04:38   5  ,COUNT(pair)
21:04:38   6  ,AVG(g6)
21:04:38   7  FROM svm6142
21:04:38   8  GROUP BY pair,trend,gatt
21:04:38   9  ORDER BY pair,trend,gatt
21:04:38  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7111 -.00198638
usd_chf 	-1 up	      3070 .003820536
usd_chf 	-1		61
usd_chf 	 1 nup	      6584 -.00154438
usd_chf 	 1 up	      2978 .003940046
usd_chf 	 1		11

6 rows selected.

Elapsed: 00:00:00.04
21:04:39 SQL> 
21:04:39 SQL> 
21:04:39 SQL> -- Derive NTILE based params:
21:04:39 SQL> 
21:04:39 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.17
21:04:39 SQL> CREATE TABLE svm6162 COMPRESS AS
21:04:39   2  SELECT
21:04:39   3  pair
21:04:39   4  ,ydate
21:04:39   5  ,prdate
21:04:39   6  ,clse
21:04:39   7  ,g6
21:04:39   8  ,gatt
21:04:39   9  ,gattn
21:04:39  10  ,trend
21:04:39  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
21:04:39  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
21:04:39  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
21:04:39  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
21:04:39  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
21:04:39  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
21:04:39  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
21:04:39  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
21:04:39  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
21:04:39  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
21:04:39  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
21:04:39  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
21:04:39  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
21:04:39  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
21:04:39  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
21:04:39  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
21:04:39  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
21:04:39  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
21:04:39  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
21:04:39  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
21:04:39  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
21:04:39  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
21:04:39  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
21:04:39  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
21:04:39  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
21:04:39  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
21:04:39  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
21:04:39  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
21:04:39  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
21:04:39  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
21:04:39  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
21:04:39  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
21:04:39  43  ,hh  att32
21:04:39  44  ,d   att33
21:04:39  45  ,w   att34
21:04:39  46  ,mpm att35
21:04:39  47  ,mph att36
21:04:39  48  ,trend att37
21:04:39  49  FROM svm6142
21:04:39  50  ORDER BY ydate
21:04:39  51  /

Table created.

Elapsed: 00:00:05.43
21:04:44 SQL> 
21:04:44 SQL> -- rpt
21:04:44 SQL> 
21:04:44 SQL> SELECT
21:04:44   2  pair
21:04:44   3  ,trend
21:04:44   4  ,gatt
21:04:44   5  ,COUNT(pair)
21:04:44   6  ,AVG(g6)
21:04:44   7  FROM svm6162
21:04:44   8  GROUP BY pair,trend,gatt
21:04:44   9  ORDER BY pair,trend,gatt
21:04:44  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7111 -.00198638
usd_chf 	-1 up	      3070 .003820536
usd_chf 	-1		61
usd_chf 	 1 nup	      6584 -.00154438
usd_chf 	 1 up	      2978 .003940046
usd_chf 	 1		11

6 rows selected.

Elapsed: 00:00:00.02
21:04:44 SQL> 
21:04:44 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.19
21:04:44 SQL> CREATE TABLE modsrc COMPRESS AS
21:04:44   2  SELECT
21:04:44   3  pair
21:04:44   4  ,ydate
21:04:44   5  ,prdate
21:04:44   6  ,trend
21:04:44   7  ,g6
21:04:44   8  ,gatt
21:04:44   9  ,gattn
21:04:44  10  FROM svm6162
21:04:44  11  /

Table created.

Elapsed: 00:00:00.11
21:04:44 SQL> 
21:04:44 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
21:04:45 SQL> 
21:04:45 SQL> DROP   TABLE chf_ms610 ;

Table dropped.

Elapsed: 00:00:00.03
21:04:45 SQL> CREATE TABLE chf_ms610 COMPRESS AS
21:04:45   2  SELECT
21:04:45   3  ydate
21:04:45   4  ,trend chf_trend
21:04:45   5  ,g6    chf_g6
21:04:45   6  ,gatt  chf_gatt
21:04:45   7  ,gattn chf_gattn
21:04:45   8  FROM modsrc
21:04:45   9  /

Table created.

Elapsed: 00:00:00.07
21:04:45 SQL> 
21:04:45 SQL> ANALYZE TABLE chf_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.14
21:04:45 SQL> 
21:04:45 SQL> -- I need a copy of the attributes:
21:04:45 SQL> 
21:04:45 SQL> 
21:04:45 SQL> DROP   TABLE chf_att;

Table dropped.

Elapsed: 00:00:00.05
21:04:45 SQL> CREATE TABLE chf_att COMPRESS AS
21:04:45   2  SELECT
21:04:45   3  ydate
21:04:45   4  ,att00 chf_att00
21:04:45   5  ,att01 chf_att01
21:04:45   6  ,att02 chf_att02
21:04:45   7  ,att03 chf_att03
21:04:45   8  ,att04 chf_att04
21:04:45   9  ,att05 chf_att05
21:04:45  10  ,att06 chf_att06
21:04:45  11  ,att07 chf_att07
21:04:45  12  ,att08 chf_att08
21:04:45  13  ,att09 chf_att09
21:04:45  14  ,att10 chf_att10
21:04:45  15  ,att11 chf_att11
21:04:45  16  ,att12 chf_att12
21:04:45  17  ,att13 chf_att13
21:04:45  18  ,att14 chf_att14
21:04:45  19  ,att15 chf_att15
21:04:45  20  ,att16 chf_att16
21:04:45  21  ,att17 chf_att17
21:04:45  22  ,att18 chf_att18
21:04:45  23  ,att19 chf_att19
21:04:45  24  ,att20 chf_att20
21:04:45  25  ,att21 chf_att21
21:04:45  26  ,att22 chf_att22
21:04:45  27  ,att23 chf_att23
21:04:45  28  ,att24 chf_att24
21:04:45  29  ,att25 chf_att25
21:04:45  30  ,att26 chf_att26
21:04:45  31  ,att27 chf_att27
21:04:45  32  ,att28 chf_att28
21:04:45  33  ,att29 chf_att29
21:04:45  34  ,att30 chf_att30
21:04:45  35  ,att31 chf_att31
21:04:45  36  ,att32 chf_att32
21:04:45  37  ,att33 chf_att33
21:04:45  38  ,att34 chf_att34
21:04:45  39  ,att35 chf_att35
21:04:45  40  ,att36 chf_att36
21:04:45  41  ,att37 chf_att37
21:04:45  42  FROM svm6162
21:04:45  43  /

Table created.

Elapsed: 00:00:00.19
21:04:45 SQL> 
21:04:45 SQL> ANALYZE TABLE chf_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
21:04:46 SQL> 
21:04:46 SQL> -- rpt
21:04:46 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19815

Elapsed: 00:00:00.85
21:04:46 SQL> SELECT COUNT(*)FROM chf_att;

  COUNT(*)
----------
     19815

Elapsed: 00:00:00.00
21:04:46 SQL> 
21:04:46 SQL> --
21:04:46 SQL> -- ech610.sql
21:04:46 SQL> --
21:04:46 SQL> 
21:04:46 SQL> -- Creates views and tables for backtesting a forex SVM strategy
21:04:46 SQL> 
21:04:46 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:01.01
21:04:47 SQL> 
21:04:47 SQL> -- I created di5min here:
21:04:47 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
21:04:47 SQL> 
21:04:47 SQL> CREATE OR REPLACE VIEW svm6102 AS
21:04:47   2  SELECT
21:04:47   3  pair
21:04:47   4  ,ydate
21:04:47   5  ,prdate
21:04:47   6  ,rownum rnum -- acts as t in my time-series
21:04:47   7  ,clse
21:04:47   8  -- Derive a bunch of attributes from clse, the latest price:
21:04:47   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
21:04:47  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
21:04:47  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
21:04:47  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
21:04:47  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
21:04:47  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
21:04:47  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
21:04:47  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
21:04:47  17  --
21:04:47  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
21:04:47  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
21:04:47  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
21:04:47  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
21:04:47  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
21:04:47  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
21:04:47  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
21:04:47  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
21:04:47  26  --
21:04:47  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
21:04:47  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
21:04:47  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
21:04:47  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
21:04:47  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
21:04:47  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
21:04:47  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
21:04:47  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
21:04:47  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
21:04:47  36  FROM di5min WHERE pair LIKE'%ech%'
21:04:47  37  AND ydate > sysdate - 95
21:04:47  38  ORDER BY ydate
21:04:47  39  /

View created.

Elapsed: 00:00:00.06
21:04:48 SQL> 
21:04:48 SQL> -- rpt
21:04:48 SQL> 
21:04:48 SQL> SELECT
21:04:48   2  pair
21:04:48   3  ,COUNT(pair)
21:04:48   4  ,MIN(clse),MAX(clse)
21:04:48   5  ,MIN(avg6),MAX(avg6)
21:04:48   6  ,MIN(ydate),MAX(ydate)
21:04:48   7  FROM svm6102
21:04:48   8  GROUP BY pair
21:04:48   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ech_usd       19813 1.24182424 1.38284305 1.24320711 1.37986485 2010-10-03 21:05:01 2011-01-06 21:00:00

Elapsed: 00:00:00.84
21:04:48 SQL> 
21:04:48 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
21:04:48 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.28
21:04:49 SQL> CREATE TABLE svm6122 COMPRESS AS
21:04:49   2  SELECT
21:04:49   3  pair
21:04:49   4  ,ydate
21:04:49   5  ,prdate
21:04:49   6  ,clse
21:04:49   7  -- g6 is important. I want to predict g6:
21:04:49   8  ,ld6 - clse g6
21:04:49   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
21:04:49  10  -- I want more attributes from the ones I derived above:
21:04:49  11  -- clse relation to moving-min
21:04:49  12  ,clse-min4  cm4
21:04:49  13  ,clse-min6  cm6
21:04:49  14  ,clse-min8  cm8
21:04:49  15  ,clse-min10 cm10
21:04:49  16  ,clse-min12 cm12
21:04:49  17  ,clse-min14 cm14
21:04:49  18  ,clse-min16 cm16
21:04:49  19  ,clse-min18 cm18
21:04:49  20  -- clse relation to moving-avg
21:04:49  21  ,clse-avg4  ca4
21:04:49  22  ,clse-avg6  ca6
21:04:49  23  ,clse-avg8  ca8
21:04:49  24  ,clse-avg10 ca10
21:04:49  25  ,clse-avg12 ca12
21:04:49  26  ,clse-avg14 ca14
21:04:49  27  ,clse-avg16 ca16
21:04:49  28  ,clse-avg18 ca18
21:04:49  29  -- clse relation to moving-max
21:04:49  30  ,clse-max4  cx4
21:04:49  31  ,clse-max6  cx6
21:04:49  32  ,clse-max8  cx8
21:04:49  33  ,clse-max10 cx10
21:04:49  34  ,clse-max12 cx12
21:04:49  35  ,clse-max14 cx14
21:04:49  36  ,clse-max16 cx16
21:04:49  37  ,clse-max18 cx18
21:04:49  38  -- Derive more attributes.
21:04:49  39  -- I want to use CORR() here to help SVM see the shape of the series.
21:04:49  40  -- But COVAR_POP is more stable:
21:04:49  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
21:04:49  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
21:04:49  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
21:04:49  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
21:04:49  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
21:04:49  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
21:04:49  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
21:04:49  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
21:04:49  49  -- Derive date related attributes:
21:04:49  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
21:04:49  51  ,0+TO_CHAR(ydate,'D')d
21:04:49  52  ,0+TO_CHAR(ydate,'W')w
21:04:49  53  -- mpm stands for minutes-past-midnight:
21:04:49  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
21:04:49  55  -- mph stands for minutes-past-hour:
21:04:49  56  ,0+TO_CHAR(ydate,'MI')mph
21:04:49  57  FROM svm6102
21:04:49  58  ORDER BY ydate
21:04:49  59  /

Table created.

Elapsed: 00:00:02.21
21:04:51 SQL> 
21:04:51 SQL> -- rpt
21:04:51 SQL> 
21:04:51 SQL> SELECT
21:04:51   2  pair
21:04:51   3  ,COUNT(pair)
21:04:51   4  ,MIN(clse),MAX(clse)
21:04:51   5  ,MIN(ydate),MAX(ydate)
21:04:51   6  FROM svm6122
21:04:51   7  GROUP BY pair
21:04:51   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ech_usd       19813 1.24182424 1.38284305 2010-10-03 21:05:01 2011-01-06 21:00:00

Elapsed: 00:00:00.04
21:04:51 SQL> 
21:04:51 SQL> -- Prepare for derivation of NTILE based params:
21:04:51 SQL> 
21:04:51 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.29
21:04:51 SQL> CREATE TABLE svm6142 COMPRESS AS
21:04:51   2  SELECT
21:04:51   3  pair
21:04:51   4  ,ydate
21:04:51   5  ,prdate
21:04:51   6  ,clse
21:04:51   7  ,g6
21:04:51   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
21:04:51   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
21:04:51  10  ,CASE WHEN trend IS NULL THEN 1
21:04:51  11  	    WHEN trend =0      THEN 1
21:04:51  12  	    ELSE trend END trend
21:04:51  13  ,cm4
21:04:51  14  ,cm6
21:04:51  15  ,cm8
21:04:51  16  ,cm10
21:04:51  17  ,cm12
21:04:51  18  ,cm14
21:04:51  19  ,cm16
21:04:51  20  ,cm18
21:04:51  21  --
21:04:51  22  ,ca4
21:04:51  23  ,ca6
21:04:51  24  ,ca8
21:04:51  25  ,ca10
21:04:51  26  ,ca12
21:04:51  27  ,ca14
21:04:51  28  ,ca16
21:04:51  29  ,ca18
21:04:51  30  --
21:04:51  31  ,cx4
21:04:51  32  ,cx6
21:04:51  33  ,cx8
21:04:51  34  ,cx10
21:04:51  35  ,cx12
21:04:51  36  ,cx14
21:04:51  37  ,cx16
21:04:51  38  ,cx18
21:04:51  39  --
21:04:51  40  ,crr4
21:04:51  41  ,crr6
21:04:51  42  ,crr8
21:04:51  43  ,crr10
21:04:51  44  ,crr12
21:04:51  45  ,crr14
21:04:51  46  ,crr16
21:04:51  47  ,crr18
21:04:51  48  --
21:04:51  49  ,hh
21:04:51  50  ,d
21:04:51  51  ,w
21:04:51  52  ,mpm
21:04:51  53  ,mph
21:04:51  54  FROM svm6122
21:04:51  55  ORDER BY ydate
21:04:51  56  /

Table created.

Elapsed: 00:00:00.42
21:04:52 SQL> 
21:04:52 SQL> -- rpt
21:04:52 SQL> 
21:04:52 SQL> SELECT
21:04:52   2  pair
21:04:52   3  ,trend
21:04:52   4  ,gatt
21:04:52   5  ,COUNT(pair)
21:04:52   6  ,AVG(g6)
21:04:52   7  FROM svm6142
21:04:52   8  GROUP BY pair,trend,gatt
21:04:52   9  ORDER BY pair,trend,gatt
21:04:52  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6793 -.00231334
ech_usd 	-1 up	      3581 .003574555
ech_usd 	-1		72
ech_usd 	 1 nup	      6461 -.00238451
ech_usd 	 1 up	      2906 .004121771

Elapsed: 00:00:00.04
21:04:52 SQL> 
21:04:52 SQL> 
21:04:52 SQL> -- Derive NTILE based params:
21:04:52 SQL> 
21:04:52 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.15
21:04:52 SQL> CREATE TABLE svm6162 COMPRESS AS
21:04:52   2  SELECT
21:04:52   3  pair
21:04:52   4  ,ydate
21:04:52   5  ,prdate
21:04:52   6  ,clse
21:04:52   7  ,g6
21:04:52   8  ,gatt
21:04:52   9  ,gattn
21:04:52  10  ,trend
21:04:52  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
21:04:52  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
21:04:52  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
21:04:52  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
21:04:52  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
21:04:52  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
21:04:52  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
21:04:52  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
21:04:52  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
21:04:52  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
21:04:52  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
21:04:52  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
21:04:52  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
21:04:52  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
21:04:52  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
21:04:52  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
21:04:52  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
21:04:52  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
21:04:52  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
21:04:52  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
21:04:52  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
21:04:52  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
21:04:52  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
21:04:52  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
21:04:52  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
21:04:52  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
21:04:52  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
21:04:52  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
21:04:52  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
21:04:52  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
21:04:52  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
21:04:52  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
21:04:52  43  ,hh  att32
21:04:52  44  ,d   att33
21:04:52  45  ,w   att34
21:04:52  46  ,mpm att35
21:04:52  47  ,mph att36
21:04:52  48  ,trend att37
21:04:52  49  FROM svm6142
21:04:52  50  ORDER BY ydate
21:04:52  51  /

Table created.

Elapsed: 00:00:04.93
21:04:57 SQL> 
21:04:57 SQL> -- rpt
21:04:57 SQL> 
21:04:57 SQL> SELECT
21:04:57   2  pair
21:04:57   3  ,trend
21:04:57   4  ,gatt
21:04:57   5  ,COUNT(pair)
21:04:57   6  ,AVG(g6)
21:04:57   7  FROM svm6162
21:04:57   8  GROUP BY pair,trend,gatt
21:04:57   9  ORDER BY pair,trend,gatt
21:04:57  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6793 -.00231334
ech_usd 	-1 up	      3581 .003574555
ech_usd 	-1		72
ech_usd 	 1 nup	      6461 -.00238451
ech_usd 	 1 up	      2906 .004121771

Elapsed: 00:00:00.03
21:04:57 SQL> 
21:04:57 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
21:04:57 SQL> CREATE TABLE modsrc COMPRESS AS
21:04:57   2  SELECT
21:04:57   3  pair
21:04:57   4  ,ydate
21:04:57   5  ,prdate
21:04:57   6  ,trend
21:04:57   7  ,g6
21:04:57   8  ,gatt
21:04:57   9  ,gattn
21:04:57  10  FROM svm6162
21:04:57  11  /

Table created.

Elapsed: 00:00:00.09
21:04:57 SQL> 
21:04:57 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
21:04:57 SQL> 
21:04:57 SQL> DROP   TABLE ech_ms610 ;

Table dropped.

Elapsed: 00:00:00.08
21:04:57 SQL> CREATE TABLE ech_ms610 COMPRESS AS
21:04:57   2  SELECT
21:04:57   3  ydate
21:04:57   4  ,trend ech_trend
21:04:57   5  ,g6    ech_g6
21:04:57   6  ,gatt  ech_gatt
21:04:57   7  ,gattn ech_gattn
21:04:57   8  FROM modsrc
21:04:57   9  /

Table created.

Elapsed: 00:00:00.09
21:04:57 SQL> 
21:04:57 SQL> ANALYZE TABLE ech_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
21:04:58 SQL> 
21:04:58 SQL> -- I need a copy of the attributes:
21:04:58 SQL> 
21:04:58 SQL> 
21:04:58 SQL> DROP   TABLE ech_att;

Table dropped.

Elapsed: 00:00:00.05
21:04:58 SQL> CREATE TABLE ech_att COMPRESS AS
21:04:58   2  SELECT
21:04:58   3  ydate
21:04:58   4  ,att00 ech_att00
21:04:58   5  ,att01 ech_att01
21:04:58   6  ,att02 ech_att02
21:04:58   7  ,att03 ech_att03
21:04:58   8  ,att04 ech_att04
21:04:58   9  ,att05 ech_att05
21:04:58  10  ,att06 ech_att06
21:04:58  11  ,att07 ech_att07
21:04:58  12  ,att08 ech_att08
21:04:58  13  ,att09 ech_att09
21:04:58  14  ,att10 ech_att10
21:04:58  15  ,att11 ech_att11
21:04:58  16  ,att12 ech_att12
21:04:58  17  ,att13 ech_att13
21:04:58  18  ,att14 ech_att14
21:04:58  19  ,att15 ech_att15
21:04:58  20  ,att16 ech_att16
21:04:58  21  ,att17 ech_att17
21:04:58  22  ,att18 ech_att18
21:04:58  23  ,att19 ech_att19
21:04:58  24  ,att20 ech_att20
21:04:58  25  ,att21 ech_att21
21:04:58  26  ,att22 ech_att22
21:04:58  27  ,att23 ech_att23
21:04:58  28  ,att24 ech_att24
21:04:58  29  ,att25 ech_att25
21:04:58  30  ,att26 ech_att26
21:04:58  31  ,att27 ech_att27
21:04:58  32  ,att28 ech_att28
21:04:58  33  ,att29 ech_att29
21:04:58  34  ,att30 ech_att30
21:04:58  35  ,att31 ech_att31
21:04:58  36  ,att32 ech_att32
21:04:58  37  ,att33 ech_att33
21:04:58  38  ,att34 ech_att34
21:04:58  39  ,att35 ech_att35
21:04:58  40  ,att36 ech_att36
21:04:58  41  ,att37 ech_att37
21:04:58  42  FROM svm6162
21:04:58  43  /

Table created.

Elapsed: 00:00:00.18
21:04:58 SQL> 
21:04:58 SQL> ANALYZE TABLE ech_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.50
21:04:58 SQL> 
21:04:58 SQL> -- rpt
21:04:58 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19813

Elapsed: 00:00:00.81
21:04:59 SQL> SELECT COUNT(*)FROM ech_att;

  COUNT(*)
----------
     19813

Elapsed: 00:00:00.00
21:04:59 SQL> 
21:04:59 SQL> --
21:04:59 SQL> -- egb610.sql
21:04:59 SQL> --
21:04:59 SQL> 
21:04:59 SQL> -- Creates views and tables for backtesting a forex SVM strategy
21:04:59 SQL> 
21:04:59 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.36
21:04:59 SQL> 
21:04:59 SQL> -- I created di5min here:
21:04:59 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
21:04:59 SQL> 
21:04:59 SQL> CREATE OR REPLACE VIEW svm6102 AS
21:04:59   2  SELECT
21:04:59   3  pair
21:04:59   4  ,ydate
21:04:59   5  ,prdate
21:04:59   6  ,rownum rnum -- acts as t in my time-series
21:04:59   7  ,clse
21:04:59   8  -- Derive a bunch of attributes from clse, the latest price:
21:04:59   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
21:04:59  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
21:04:59  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
21:04:59  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
21:04:59  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
21:04:59  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
21:04:59  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
21:04:59  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
21:04:59  17  --
21:04:59  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
21:04:59  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
21:04:59  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
21:04:59  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
21:04:59  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
21:04:59  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
21:04:59  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
21:04:59  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
21:04:59  26  --
21:04:59  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
21:04:59  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
21:04:59  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
21:04:59  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
21:04:59  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
21:04:59  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
21:04:59  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
21:04:59  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
21:04:59  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
21:04:59  36  FROM di5min WHERE pair LIKE'%egb%'
21:04:59  37  AND ydate > sysdate - 95
21:04:59  38  ORDER BY ydate
21:04:59  39  /

View created.

Elapsed: 00:00:00.04
21:04:59 SQL> 
21:04:59 SQL> -- rpt
21:04:59 SQL> 
21:04:59 SQL> SELECT
21:04:59   2  pair
21:04:59   3  ,COUNT(pair)
21:04:59   4  ,MIN(clse),MAX(clse)
21:04:59   5  ,MIN(avg6),MAX(avg6)
21:04:59   6  ,MIN(ydate),MAX(ydate)
21:04:59   7  FROM svm6102
21:04:59   8  GROUP BY pair
21:04:59   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
egb_usd       19812 .833520557 .893920122 .834199029 .892400287 2010-10-03 21:05:01 2011-01-06 21:00:00

Elapsed: 00:00:01.02
21:05:01 SQL> 
21:05:01 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
21:05:01 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.27
21:05:01 SQL> CREATE TABLE svm6122 COMPRESS AS
21:05:01   2  SELECT
21:05:01   3  pair
21:05:01   4  ,ydate
21:05:01   5  ,prdate
21:05:01   6  ,clse
21:05:01   7  -- g6 is important. I want to predict g6:
21:05:01   8  ,ld6 - clse g6
21:05:01   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
21:05:01  10  -- I want more attributes from the ones I derived above:
21:05:01  11  -- clse relation to moving-min
21:05:01  12  ,clse-min4  cm4
21:05:01  13  ,clse-min6  cm6
21:05:01  14  ,clse-min8  cm8
21:05:01  15  ,clse-min10 cm10
21:05:01  16  ,clse-min12 cm12
21:05:01  17  ,clse-min14 cm14
21:05:01  18  ,clse-min16 cm16
21:05:01  19  ,clse-min18 cm18
21:05:01  20  -- clse relation to moving-avg
21:05:01  21  ,clse-avg4  ca4
21:05:01  22  ,clse-avg6  ca6
21:05:01  23  ,clse-avg8  ca8
21:05:01  24  ,clse-avg10 ca10
21:05:01  25  ,clse-avg12 ca12
21:05:01  26  ,clse-avg14 ca14
21:05:01  27  ,clse-avg16 ca16
21:05:01  28  ,clse-avg18 ca18
21:05:01  29  -- clse relation to moving-max
21:05:01  30  ,clse-max4  cx4
21:05:01  31  ,clse-max6  cx6
21:05:01  32  ,clse-max8  cx8
21:05:01  33  ,clse-max10 cx10
21:05:01  34  ,clse-max12 cx12
21:05:01  35  ,clse-max14 cx14
21:05:01  36  ,clse-max16 cx16
21:05:01  37  ,clse-max18 cx18
21:05:01  38  -- Derive more attributes.
21:05:01  39  -- I want to use CORR() here to help SVM see the shape of the series.
21:05:01  40  -- But COVAR_POP is more stable:
21:05:01  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
21:05:01  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
21:05:01  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
21:05:01  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
21:05:01  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
21:05:01  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
21:05:01  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
21:05:01  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
21:05:01  49  -- Derive date related attributes:
21:05:01  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
21:05:01  51  ,0+TO_CHAR(ydate,'D')d
21:05:01  52  ,0+TO_CHAR(ydate,'W')w
21:05:01  53  -- mpm stands for minutes-past-midnight:
21:05:01  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
21:05:01  55  -- mph stands for minutes-past-hour:
21:05:01  56  ,0+TO_CHAR(ydate,'MI')mph
21:05:01  57  FROM svm6102
21:05:01  58  ORDER BY ydate
21:05:01  59  /

Table created.

Elapsed: 00:00:02.53
21:05:03 SQL> 
21:05:03 SQL> -- rpt
21:05:03 SQL> 
21:05:03 SQL> SELECT
21:05:03   2  pair
21:05:03   3  ,COUNT(pair)
21:05:03   4  ,MIN(clse),MAX(clse)
21:05:03   5  ,MIN(ydate),MAX(ydate)
21:05:03   6  FROM svm6122
21:05:03   7  GROUP BY pair
21:05:03   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
egb_usd       19811 .833520557 .893920122 2010-10-03 21:10:01 2011-01-06 21:00:00

Elapsed: 00:00:00.05
21:05:03 SQL> 
21:05:03 SQL> -- Prepare for derivation of NTILE based params:
21:05:03 SQL> 
21:05:03 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.28
21:05:04 SQL> CREATE TABLE svm6142 COMPRESS AS
21:05:04   2  SELECT
21:05:04   3  pair
21:05:04   4  ,ydate
21:05:04   5  ,prdate
21:05:04   6  ,clse
21:05:04   7  ,g6
21:05:04   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
21:05:04   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
21:05:04  10  ,CASE WHEN trend IS NULL THEN 1
21:05:04  11  	    WHEN trend =0      THEN 1
21:05:04  12  	    ELSE trend END trend
21:05:04  13  ,cm4
21:05:04  14  ,cm6
21:05:04  15  ,cm8
21:05:04  16  ,cm10
21:05:04  17  ,cm12
21:05:04  18  ,cm14
21:05:04  19  ,cm16
21:05:04  20  ,cm18
21:05:04  21  --
21:05:04  22  ,ca4
21:05:04  23  ,ca6
21:05:04  24  ,ca8
21:05:04  25  ,ca10
21:05:04  26  ,ca12
21:05:04  27  ,ca14
21:05:04  28  ,ca16
21:05:04  29  ,ca18
21:05:04  30  --
21:05:04  31  ,cx4
21:05:04  32  ,cx6
21:05:04  33  ,cx8
21:05:04  34  ,cx10
21:05:04  35  ,cx12
21:05:04  36  ,cx14
21:05:04  37  ,cx16
21:05:04  38  ,cx18
21:05:04  39  --
21:05:04  40  ,crr4
21:05:04  41  ,crr6
21:05:04  42  ,crr8
21:05:04  43  ,crr10
21:05:04  44  ,crr12
21:05:04  45  ,crr14
21:05:04  46  ,crr16
21:05:04  47  ,crr18
21:05:04  48  --
21:05:04  49  ,hh
21:05:04  50  ,d
21:05:04  51  ,w
21:05:04  52  ,mpm
21:05:04  53  ,mph
21:05:04  54  FROM svm6122
21:05:04  55  ORDER BY ydate
21:05:04  56  /

Table created.

Elapsed: 00:00:00.44
21:05:04 SQL> 
21:05:04 SQL> -- rpt
21:05:04 SQL> 
21:05:04 SQL> SELECT
21:05:04   2  pair
21:05:04   3  ,trend
21:05:04   4  ,gatt
21:05:04   5  ,COUNT(pair)
21:05:04   6  ,AVG(g6)
21:05:04   7  FROM svm6142
21:05:04   8  GROUP BY pair,trend,gatt
21:05:04   9  ORDER BY pair,trend,gatt
21:05:04  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7971 -.00106982
egb_usd 	-1 up	      2636 .002928295
egb_usd 	-1		71
egb_usd 	 1 nup	      6515 -.00138243
egb_usd 	 1 up	      2617   .0029282
egb_usd 	 1		 1

6 rows selected.

Elapsed: 00:00:00.04
21:05:04 SQL> 
21:05:04 SQL> 
21:05:04 SQL> -- Derive NTILE based params:
21:05:04 SQL> 
21:05:04 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.20
21:05:04 SQL> CREATE TABLE svm6162 COMPRESS AS
21:05:04   2  SELECT
21:05:04   3  pair
21:05:04   4  ,ydate
21:05:04   5  ,prdate
21:05:04   6  ,clse
21:05:04   7  ,g6
21:05:04   8  ,gatt
21:05:04   9  ,gattn
21:05:04  10  ,trend
21:05:04  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
21:05:04  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
21:05:04  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
21:05:04  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
21:05:04  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
21:05:04  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
21:05:04  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
21:05:04  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
21:05:04  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
21:05:04  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
21:05:04  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
21:05:04  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
21:05:04  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
21:05:04  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
21:05:04  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
21:05:04  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
21:05:04  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
21:05:04  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
21:05:04  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
21:05:04  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
21:05:04  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
21:05:04  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
21:05:04  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
21:05:04  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
21:05:04  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
21:05:04  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
21:05:04  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
21:05:04  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
21:05:04  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
21:05:04  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
21:05:04  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
21:05:04  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
21:05:04  43  ,hh  att32
21:05:04  44  ,d   att33
21:05:04  45  ,w   att34
21:05:04  46  ,mpm att35
21:05:04  47  ,mph att36
21:05:04  48  ,trend att37
21:05:04  49  FROM svm6142
21:05:04  50  ORDER BY ydate
21:05:04  51  /

Table created.

Elapsed: 00:00:05.66
21:05:10 SQL> 
21:05:10 SQL> -- rpt
21:05:10 SQL> 
21:05:10 SQL> SELECT
21:05:10   2  pair
21:05:10   3  ,trend
21:05:10   4  ,gatt
21:05:10   5  ,COUNT(pair)
21:05:10   6  ,AVG(g6)
21:05:10   7  FROM svm6162
21:05:10   8  GROUP BY pair,trend,gatt
21:05:10   9  ORDER BY pair,trend,gatt
21:05:10  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7971 -.00106982
egb_usd 	-1 up	      2636 .002928295
egb_usd 	-1		71
egb_usd 	 1 nup	      6515 -.00138243
egb_usd 	 1 up	      2617   .0029282
egb_usd 	 1		 1

6 rows selected.

Elapsed: 00:00:00.02
21:05:10 SQL> 
21:05:10 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.16
21:05:10 SQL> CREATE TABLE modsrc COMPRESS AS
21:05:10   2  SELECT
21:05:10   3  pair
21:05:10   4  ,ydate
21:05:10   5  ,prdate
21:05:10   6  ,trend
21:05:10   7  ,g6
21:05:10   8  ,gatt
21:05:10   9  ,gattn
21:05:10  10  FROM svm6162
21:05:10  11  /

Table created.

Elapsed: 00:00:00.08
21:05:10 SQL> 
21:05:10 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
21:05:10 SQL> 
21:05:10 SQL> DROP   TABLE egb_ms610 ;

Table dropped.

Elapsed: 00:00:00.21
21:05:11 SQL> CREATE TABLE egb_ms610 COMPRESS AS
21:05:11   2  SELECT
21:05:11   3  ydate
21:05:11   4  ,trend egb_trend
21:05:11   5  ,g6    egb_g6
21:05:11   6  ,gatt  egb_gatt
21:05:11   7  ,gattn egb_gattn
21:05:11   8  FROM modsrc
21:05:11   9  /

Table created.

Elapsed: 00:00:00.09
21:05:11 SQL> 
21:05:11 SQL> ANALYZE TABLE egb_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
21:05:11 SQL> 
21:05:11 SQL> -- I need a copy of the attributes:
21:05:11 SQL> 
21:05:11 SQL> 
21:05:11 SQL> DROP   TABLE egb_att;

Table dropped.

Elapsed: 00:00:00.27
21:05:11 SQL> CREATE TABLE egb_att COMPRESS AS
21:05:11   2  SELECT
21:05:11   3  ydate
21:05:11   4  ,att00 egb_att00
21:05:11   5  ,att01 egb_att01
21:05:11   6  ,att02 egb_att02
21:05:11   7  ,att03 egb_att03
21:05:11   8  ,att04 egb_att04
21:05:11   9  ,att05 egb_att05
21:05:11  10  ,att06 egb_att06
21:05:11  11  ,att07 egb_att07
21:05:11  12  ,att08 egb_att08
21:05:11  13  ,att09 egb_att09
21:05:11  14  ,att10 egb_att10
21:05:11  15  ,att11 egb_att11
21:05:11  16  ,att12 egb_att12
21:05:11  17  ,att13 egb_att13
21:05:11  18  ,att14 egb_att14
21:05:11  19  ,att15 egb_att15
21:05:11  20  ,att16 egb_att16
21:05:11  21  ,att17 egb_att17
21:05:11  22  ,att18 egb_att18
21:05:11  23  ,att19 egb_att19
21:05:11  24  ,att20 egb_att20
21:05:11  25  ,att21 egb_att21
21:05:11  26  ,att22 egb_att22
21:05:11  27  ,att23 egb_att23
21:05:11  28  ,att24 egb_att24
21:05:11  29  ,att25 egb_att25
21:05:11  30  ,att26 egb_att26
21:05:11  31  ,att27 egb_att27
21:05:11  32  ,att28 egb_att28
21:05:11  33  ,att29 egb_att29
21:05:11  34  ,att30 egb_att30
21:05:11  35  ,att31 egb_att31
21:05:11  36  ,att32 egb_att32
21:05:11  37  ,att33 egb_att33
21:05:11  38  ,att34 egb_att34
21:05:11  39  ,att35 egb_att35
21:05:11  40  ,att36 egb_att36
21:05:11  41  ,att37 egb_att37
21:05:11  42  FROM svm6162
21:05:11  43  /

Table created.

Elapsed: 00:00:00.18
21:05:11 SQL> 
21:05:11 SQL> ANALYZE TABLE egb_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.49
21:05:12 SQL> 
21:05:12 SQL> -- rpt
21:05:12 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19811

Elapsed: 00:00:00.95
21:05:13 SQL> SELECT COUNT(*)FROM egb_att;

  COUNT(*)
----------
     19811

Elapsed: 00:00:00.00
21:05:13 SQL> 
21:05:13 SQL> --
21:05:13 SQL> -- ejp610.sql
21:05:13 SQL> --
21:05:13 SQL> 
21:05:13 SQL> -- Creates views and tables for backtesting a forex SVM strategy
21:05:13 SQL> 
21:05:13 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.38
21:05:13 SQL> 
21:05:13 SQL> -- I created di5min here:
21:05:13 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
21:05:13 SQL> 
21:05:13 SQL> CREATE OR REPLACE VIEW svm6102 AS
21:05:13   2  SELECT
21:05:13   3  pair
21:05:13   4  ,ydate
21:05:13   5  ,prdate
21:05:13   6  ,rownum rnum -- acts as t in my time-series
21:05:13   7  ,clse
21:05:13   8  -- Derive a bunch of attributes from clse, the latest price:
21:05:13   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
21:05:13  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
21:05:13  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
21:05:13  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
21:05:13  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
21:05:13  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
21:05:13  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
21:05:13  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
21:05:13  17  --
21:05:13  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
21:05:13  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
21:05:13  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
21:05:13  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
21:05:13  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
21:05:13  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
21:05:13  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
21:05:13  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
21:05:13  26  --
21:05:13  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
21:05:13  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
21:05:13  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
21:05:13  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
21:05:13  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
21:05:13  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
21:05:13  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
21:05:13  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
21:05:13  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
21:05:13  36  FROM di5min WHERE pair LIKE'%ejp%'
21:05:13  37  AND ydate > sysdate - 95
21:05:13  38  ORDER BY ydate
21:05:13  39  /

View created.

Elapsed: 00:00:00.05
21:05:13 SQL> 
21:05:13 SQL> -- rpt
21:05:13 SQL> 
21:05:13 SQL> SELECT
21:05:13   2  pair
21:05:13   3  ,COUNT(pair)
21:05:13   4  ,MIN(clse),MAX(clse)
21:05:13   5  ,MIN(avg6),MAX(avg6)
21:05:13   6  ,MIN(ydate),MAX(ydate)
21:05:13   7  FROM svm6102
21:05:13   8  GROUP BY pair
21:05:13   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ejp_usd       19809 107.643765	115.63485 107.776148 115.509678 2010-10-03 21:10:01 2011-01-06 21:00:00

Elapsed: 00:00:00.89
21:05:14 SQL> 
21:05:14 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
21:05:14 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.59
21:05:15 SQL> CREATE TABLE svm6122 COMPRESS AS
21:05:15   2  SELECT
21:05:15   3  pair
21:05:15   4  ,ydate
21:05:15   5  ,prdate
21:05:15   6  ,clse
21:05:15   7  -- g6 is important. I want to predict g6:
21:05:15   8  ,ld6 - clse g6
21:05:15   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
21:05:15  10  -- I want more attributes from the ones I derived above:
21:05:15  11  -- clse relation to moving-min
21:05:15  12  ,clse-min4  cm4
21:05:15  13  ,clse-min6  cm6
21:05:15  14  ,clse-min8  cm8
21:05:15  15  ,clse-min10 cm10
21:05:15  16  ,clse-min12 cm12
21:05:15  17  ,clse-min14 cm14
21:05:15  18  ,clse-min16 cm16
21:05:15  19  ,clse-min18 cm18
21:05:15  20  -- clse relation to moving-avg
21:05:15  21  ,clse-avg4  ca4
21:05:15  22  ,clse-avg6  ca6
21:05:15  23  ,clse-avg8  ca8
21:05:15  24  ,clse-avg10 ca10
21:05:15  25  ,clse-avg12 ca12
21:05:15  26  ,clse-avg14 ca14
21:05:15  27  ,clse-avg16 ca16
21:05:15  28  ,clse-avg18 ca18
21:05:15  29  -- clse relation to moving-max
21:05:15  30  ,clse-max4  cx4
21:05:15  31  ,clse-max6  cx6
21:05:15  32  ,clse-max8  cx8
21:05:15  33  ,clse-max10 cx10
21:05:15  34  ,clse-max12 cx12
21:05:15  35  ,clse-max14 cx14
21:05:15  36  ,clse-max16 cx16
21:05:15  37  ,clse-max18 cx18
21:05:15  38  -- Derive more attributes.
21:05:15  39  -- I want to use CORR() here to help SVM see the shape of the series.
21:05:15  40  -- But COVAR_POP is more stable:
21:05:15  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
21:05:15  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
21:05:15  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
21:05:15  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
21:05:15  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
21:05:15  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
21:05:15  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
21:05:15  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
21:05:15  49  -- Derive date related attributes:
21:05:15  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
21:05:15  51  ,0+TO_CHAR(ydate,'D')d
21:05:15  52  ,0+TO_CHAR(ydate,'W')w
21:05:15  53  -- mpm stands for minutes-past-midnight:
21:05:15  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
21:05:15  55  -- mph stands for minutes-past-hour:
21:05:15  56  ,0+TO_CHAR(ydate,'MI')mph
21:05:15  57  FROM svm6102
21:05:15  58  ORDER BY ydate
21:05:15  59  /

Table created.

Elapsed: 00:00:02.19
21:05:17 SQL> 
21:05:17 SQL> -- rpt
21:05:17 SQL> 
21:05:17 SQL> SELECT
21:05:17   2  pair
21:05:17   3  ,COUNT(pair)
21:05:17   4  ,MIN(clse),MAX(clse)
21:05:17   5  ,MIN(ydate),MAX(ydate)
21:05:17   6  FROM svm6122
21:05:17   7  GROUP BY pair
21:05:17   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ejp_usd       19809 107.643765	115.63485 2010-10-03 21:10:01 2011-01-06 21:00:00

Elapsed: 00:00:00.03
21:05:17 SQL> 
21:05:17 SQL> -- Prepare for derivation of NTILE based params:
21:05:17 SQL> 
21:05:17 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.27
21:05:17 SQL> CREATE TABLE svm6142 COMPRESS AS
21:05:17   2  SELECT
21:05:17   3  pair
21:05:17   4  ,ydate
21:05:17   5  ,prdate
21:05:17   6  ,clse
21:05:17   7  ,g6
21:05:17   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
21:05:17   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
21:05:17  10  ,CASE WHEN trend IS NULL THEN 1
21:05:17  11  	    WHEN trend =0      THEN 1
21:05:17  12  	    ELSE trend END trend
21:05:17  13  ,cm4
21:05:17  14  ,cm6
21:05:17  15  ,cm8
21:05:17  16  ,cm10
21:05:17  17  ,cm12
21:05:17  18  ,cm14
21:05:17  19  ,cm16
21:05:17  20  ,cm18
21:05:17  21  --
21:05:17  22  ,ca4
21:05:17  23  ,ca6
21:05:17  24  ,ca8
21:05:17  25  ,ca10
21:05:17  26  ,ca12
21:05:17  27  ,ca14
21:05:17  28  ,ca16
21:05:17  29  ,ca18
21:05:17  30  --
21:05:17  31  ,cx4
21:05:17  32  ,cx6
21:05:17  33  ,cx8
21:05:17  34  ,cx10
21:05:17  35  ,cx12
21:05:17  36  ,cx14
21:05:17  37  ,cx16
21:05:17  38  ,cx18
21:05:17  39  --
21:05:17  40  ,crr4
21:05:17  41  ,crr6
21:05:17  42  ,crr8
21:05:17  43  ,crr10
21:05:17  44  ,crr12
21:05:17  45  ,crr14
21:05:17  46  ,crr16
21:05:17  47  ,crr18
21:05:17  48  --
21:05:17  49  ,hh
21:05:17  50  ,d
21:05:17  51  ,w
21:05:17  52  ,mpm
21:05:17  53  ,mph
21:05:17  54  FROM svm6122
21:05:17  55  ORDER BY ydate
21:05:17  56  /

Table created.

Elapsed: 00:00:00.41
21:05:18 SQL> 
21:05:18 SQL> -- rpt
21:05:18 SQL> 
21:05:18 SQL> SELECT
21:05:18   2  pair
21:05:18   3  ,trend
21:05:18   4  ,gatt
21:05:18   5  ,COUNT(pair)
21:05:18   6  ,AVG(g6)
21:05:18   7  FROM svm6142
21:05:18   8  GROUP BY pair,trend,gatt
21:05:18   9  ORDER BY pair,trend,gatt
21:05:18  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      5165 -.32378979
ejp_usd 	-1 up	      4932 .277539155
ejp_usd 	-1		72
ejp_usd 	 1 nup	      5013 -.29960177
ejp_usd 	 1 up	      4627 .288505339

Elapsed: 00:00:00.04
21:05:18 SQL> 
21:05:18 SQL> 
21:05:18 SQL> -- Derive NTILE based params:
21:05:18 SQL> 
21:05:18 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.18
21:05:18 SQL> CREATE TABLE svm6162 COMPRESS AS
21:05:18   2  SELECT
21:05:18   3  pair
21:05:18   4  ,ydate
21:05:18   5  ,prdate
21:05:18   6  ,clse
21:05:18   7  ,g6
21:05:18   8  ,gatt
21:05:18   9  ,gattn
21:05:18  10  ,trend
21:05:18  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
21:05:18  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
21:05:18  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
21:05:18  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
21:05:18  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
21:05:18  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
21:05:18  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
21:05:18  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
21:05:18  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
21:05:18  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
21:05:18  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
21:05:18  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
21:05:18  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
21:05:18  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
21:05:18  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
21:05:18  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
21:05:18  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
21:05:18  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
21:05:18  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
21:05:18  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
21:05:18  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
21:05:18  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
21:05:18  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
21:05:18  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
21:05:18  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
21:05:18  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
21:05:18  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
21:05:18  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
21:05:18  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
21:05:18  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
21:05:18  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
21:05:18  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
21:05:18  43  ,hh  att32
21:05:18  44  ,d   att33
21:05:18  45  ,w   att34
21:05:18  46  ,mpm att35
21:05:18  47  ,mph att36
21:05:18  48  ,trend att37
21:05:18  49  FROM svm6142
21:05:18  50  ORDER BY ydate
21:05:18  51  /

Table created.

Elapsed: 00:00:05.07
21:05:23 SQL> 
21:05:23 SQL> -- rpt
21:05:23 SQL> 
21:05:23 SQL> SELECT
21:05:23   2  pair
21:05:23   3  ,trend
21:05:23   4  ,gatt
21:05:23   5  ,COUNT(pair)
21:05:23   6  ,AVG(g6)
21:05:23   7  FROM svm6162
21:05:23   8  GROUP BY pair,trend,gatt
21:05:23   9  ORDER BY pair,trend,gatt
21:05:23  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      5165 -.32378979
ejp_usd 	-1 up	      4932 .277539155
ejp_usd 	-1		72
ejp_usd 	 1 nup	      5013 -.29960177
ejp_usd 	 1 up	      4627 .288505339

Elapsed: 00:00:00.03
21:05:23 SQL> 
21:05:23 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.14
21:05:23 SQL> CREATE TABLE modsrc COMPRESS AS
21:05:23   2  SELECT
21:05:23   3  pair
21:05:23   4  ,ydate
21:05:23   5  ,prdate
21:05:23   6  ,trend
21:05:23   7  ,g6
21:05:23   8  ,gatt
21:05:23   9  ,gattn
21:05:23  10  FROM svm6162
21:05:23  11  /

Table created.

Elapsed: 00:00:00.08
21:05:23 SQL> 
21:05:23 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
21:05:23 SQL> 
21:05:23 SQL> DROP   TABLE ejp_ms610 ;

Table dropped.

Elapsed: 00:00:00.03
21:05:23 SQL> CREATE TABLE ejp_ms610 COMPRESS AS
21:05:23   2  SELECT
21:05:23   3  ydate
21:05:23   4  ,trend ejp_trend
21:05:23   5  ,g6    ejp_g6
21:05:23   6  ,gatt  ejp_gatt
21:05:23   7  ,gattn ejp_gattn
21:05:23   8  FROM modsrc
21:05:23   9  /

Table created.

Elapsed: 00:00:00.07
21:05:24 SQL> 
21:05:24 SQL> ANALYZE TABLE ejp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
21:05:24 SQL> 
21:05:24 SQL> -- I need a copy of the attributes:
21:05:24 SQL> 
21:05:24 SQL> 
21:05:24 SQL> DROP   TABLE ejp_att;

Table dropped.

Elapsed: 00:00:00.06
21:05:24 SQL> CREATE TABLE ejp_att COMPRESS AS
21:05:24   2  SELECT
21:05:24   3  ydate
21:05:24   4  ,att00 ejp_att00
21:05:24   5  ,att01 ejp_att01
21:05:24   6  ,att02 ejp_att02
21:05:24   7  ,att03 ejp_att03
21:05:24   8  ,att04 ejp_att04
21:05:24   9  ,att05 ejp_att05
21:05:24  10  ,att06 ejp_att06
21:05:24  11  ,att07 ejp_att07
21:05:24  12  ,att08 ejp_att08
21:05:24  13  ,att09 ejp_att09
21:05:24  14  ,att10 ejp_att10
21:05:24  15  ,att11 ejp_att11
21:05:24  16  ,att12 ejp_att12
21:05:24  17  ,att13 ejp_att13
21:05:24  18  ,att14 ejp_att14
21:05:24  19  ,att15 ejp_att15
21:05:24  20  ,att16 ejp_att16
21:05:24  21  ,att17 ejp_att17
21:05:24  22  ,att18 ejp_att18
21:05:24  23  ,att19 ejp_att19
21:05:24  24  ,att20 ejp_att20
21:05:24  25  ,att21 ejp_att21
21:05:24  26  ,att22 ejp_att22
21:05:24  27  ,att23 ejp_att23
21:05:24  28  ,att24 ejp_att24
21:05:24  29  ,att25 ejp_att25
21:05:24  30  ,att26 ejp_att26
21:05:24  31  ,att27 ejp_att27
21:05:24  32  ,att28 ejp_att28
21:05:24  33  ,att29 ejp_att29
21:05:24  34  ,att30 ejp_att30
21:05:24  35  ,att31 ejp_att31
21:05:24  36  ,att32 ejp_att32
21:05:24  37  ,att33 ejp_att33
21:05:24  38  ,att34 ejp_att34
21:05:24  39  ,att35 ejp_att35
21:05:24  40  ,att36 ejp_att36
21:05:24  41  ,att37 ejp_att37
21:05:24  42  FROM svm6162
21:05:24  43  /

Table created.

Elapsed: 00:00:00.17
21:05:24 SQL> 
21:05:24 SQL> ANALYZE TABLE ejp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.49
21:05:24 SQL> 
21:05:24 SQL> -- rpt
21:05:24 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19809

Elapsed: 00:00:00.87
21:05:25 SQL> SELECT COUNT(*)FROM ejp_att;

  COUNT(*)
----------
     19809

Elapsed: 00:00:00.01
21:05:25 SQL> 
21:05:25 SQL> --
21:05:25 SQL> -- ajp610.sql
21:05:25 SQL> --
21:05:25 SQL> 
21:05:25 SQL> -- Creates views and tables for backtesting a forex SVM strategy
21:05:25 SQL> 
21:05:25 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.38
21:05:26 SQL> 
21:05:26 SQL> -- I created di5min here:
21:05:26 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
21:05:26 SQL> 
21:05:26 SQL> CREATE OR REPLACE VIEW svm6102 AS
21:05:26   2  SELECT
21:05:26   3  pair
21:05:26   4  ,ydate
21:05:26   5  ,prdate
21:05:26   6  ,rownum rnum -- acts as t in my time-series
21:05:26   7  ,clse
21:05:26   8  -- Derive a bunch of attributes from clse, the latest price:
21:05:26   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
21:05:26  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
21:05:26  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
21:05:26  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
21:05:26  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
21:05:26  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
21:05:26  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
21:05:26  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
21:05:26  17  --
21:05:26  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
21:05:26  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
21:05:26  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
21:05:26  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
21:05:26  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
21:05:26  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
21:05:26  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
21:05:26  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
21:05:26  26  --
21:05:26  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
21:05:26  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
21:05:26  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
21:05:26  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
21:05:26  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
21:05:26  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
21:05:26  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
21:05:26  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
21:05:26  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
21:05:26  36  FROM di5min WHERE pair LIKE'%ajp%'
21:05:26  37  AND ydate > sysdate - 95
21:05:26  38  ORDER BY ydate
21:05:26  39  /

View created.

Elapsed: 00:00:00.05
21:05:26 SQL> 
21:05:26 SQL> -- rpt
21:05:26 SQL> 
21:05:26 SQL> SELECT
21:05:26   2  pair
21:05:26   3  ,COUNT(pair)
21:05:26   4  ,MIN(clse),MAX(clse)
21:05:26   5  ,MIN(avg6),MAX(avg6)
21:05:26   6  ,MIN(ydate),MAX(ydate)
21:05:26   7  FROM svm6102
21:05:26   8  GROUP BY pair
21:05:26   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ajp_usd       19806  78.249976 83.6669853 78.5106193  83.546306 2010-10-03 21:10:01 2011-01-06 21:00:00

Elapsed: 00:00:00.82
21:05:27 SQL> 
21:05:27 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
21:05:27 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.36
21:05:27 SQL> CREATE TABLE svm6122 COMPRESS AS
21:05:27   2  SELECT
21:05:27   3  pair
21:05:27   4  ,ydate
21:05:27   5  ,prdate
21:05:27   6  ,clse
21:05:27   7  -- g6 is important. I want to predict g6:
21:05:27   8  ,ld6 - clse g6
21:05:27   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
21:05:27  10  -- I want more attributes from the ones I derived above:
21:05:27  11  -- clse relation to moving-min
21:05:27  12  ,clse-min4  cm4
21:05:27  13  ,clse-min6  cm6
21:05:27  14  ,clse-min8  cm8
21:05:27  15  ,clse-min10 cm10
21:05:27  16  ,clse-min12 cm12
21:05:27  17  ,clse-min14 cm14
21:05:27  18  ,clse-min16 cm16
21:05:27  19  ,clse-min18 cm18
21:05:27  20  -- clse relation to moving-avg
21:05:27  21  ,clse-avg4  ca4
21:05:27  22  ,clse-avg6  ca6
21:05:27  23  ,clse-avg8  ca8
21:05:27  24  ,clse-avg10 ca10
21:05:27  25  ,clse-avg12 ca12
21:05:27  26  ,clse-avg14 ca14
21:05:27  27  ,clse-avg16 ca16
21:05:27  28  ,clse-avg18 ca18
21:05:27  29  -- clse relation to moving-max
21:05:27  30  ,clse-max4  cx4
21:05:27  31  ,clse-max6  cx6
21:05:27  32  ,clse-max8  cx8
21:05:27  33  ,clse-max10 cx10
21:05:27  34  ,clse-max12 cx12
21:05:27  35  ,clse-max14 cx14
21:05:27  36  ,clse-max16 cx16
21:05:27  37  ,clse-max18 cx18
21:05:27  38  -- Derive more attributes.
21:05:27  39  -- I want to use CORR() here to help SVM see the shape of the series.
21:05:27  40  -- But COVAR_POP is more stable:
21:05:27  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
21:05:27  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
21:05:27  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
21:05:27  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
21:05:27  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
21:05:27  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
21:05:27  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
21:05:27  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
21:05:27  49  -- Derive date related attributes:
21:05:27  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
21:05:27  51  ,0+TO_CHAR(ydate,'D')d
21:05:27  52  ,0+TO_CHAR(ydate,'W')w
21:05:27  53  -- mpm stands for minutes-past-midnight:
21:05:27  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
21:05:27  55  -- mph stands for minutes-past-hour:
21:05:27  56  ,0+TO_CHAR(ydate,'MI')mph
21:05:27  57  FROM svm6102
21:05:27  58  ORDER BY ydate
21:05:27  59  /

Table created.

Elapsed: 00:00:02.14
21:05:29 SQL> 
21:05:29 SQL> -- rpt
21:05:29 SQL> 
21:05:29 SQL> SELECT
21:05:29   2  pair
21:05:29   3  ,COUNT(pair)
21:05:29   4  ,MIN(clse),MAX(clse)
21:05:29   5  ,MIN(ydate),MAX(ydate)
21:05:29   6  FROM svm6122
21:05:29   7  GROUP BY pair
21:05:29   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ajp_usd       19806  78.249976 83.6669853 2010-10-03 21:10:01 2011-01-06 21:00:00

Elapsed: 00:00:00.03
21:05:29 SQL> 
21:05:29 SQL> -- Prepare for derivation of NTILE based params:
21:05:29 SQL> 
21:05:29 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.21
21:05:29 SQL> CREATE TABLE svm6142 COMPRESS AS
21:05:29   2  SELECT
21:05:29   3  pair
21:05:29   4  ,ydate
21:05:29   5  ,prdate
21:05:29   6  ,clse
21:05:29   7  ,g6
21:05:29   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
21:05:29   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
21:05:29  10  ,CASE WHEN trend IS NULL THEN 1
21:05:29  11  	    WHEN trend =0      THEN 1
21:05:29  12  	    ELSE trend END trend
21:05:29  13  ,cm4
21:05:29  14  ,cm6
21:05:29  15  ,cm8
21:05:29  16  ,cm10
21:05:29  17  ,cm12
21:05:29  18  ,cm14
21:05:29  19  ,cm16
21:05:29  20  ,cm18
21:05:29  21  --
21:05:29  22  ,ca4
21:05:29  23  ,ca6
21:05:29  24  ,ca8
21:05:29  25  ,ca10
21:05:29  26  ,ca12
21:05:29  27  ,ca14
21:05:29  28  ,ca16
21:05:29  29  ,ca18
21:05:29  30  --
21:05:29  31  ,cx4
21:05:29  32  ,cx6
21:05:29  33  ,cx8
21:05:29  34  ,cx10
21:05:29  35  ,cx12
21:05:29  36  ,cx14
21:05:29  37  ,cx16
21:05:29  38  ,cx18
21:05:29  39  --
21:05:29  40  ,crr4
21:05:29  41  ,crr6
21:05:29  42  ,crr8
21:05:29  43  ,crr10
21:05:29  44  ,crr12
21:05:29  45  ,crr14
21:05:29  46  ,crr16
21:05:29  47  ,crr18
21:05:29  48  --
21:05:29  49  ,hh
21:05:29  50  ,d
21:05:29  51  ,w
21:05:29  52  ,mpm
21:05:29  53  ,mph
21:05:29  54  FROM svm6122
21:05:29  55  ORDER BY ydate
21:05:29  56  /

Table created.

Elapsed: 00:00:00.40
21:05:30 SQL> 
21:05:30 SQL> -- rpt
21:05:30 SQL> 
21:05:30 SQL> SELECT
21:05:30   2  pair
21:05:30   3  ,trend
21:05:30   4  ,gatt
21:05:30   5  ,COUNT(pair)
21:05:30   6  ,AVG(g6)
21:05:30   7  FROM svm6142
21:05:30   8  GROUP BY pair,trend,gatt
21:05:30   9  ORDER BY pair,trend,gatt
21:05:30  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ajp_usd 	-1 nup	      4394 -.22297091
ajp_usd 	-1 up	      5213 .223798466
ajp_usd 	-1		61
ajp_usd 	 1 nup	      5309  -.2035003
ajp_usd 	 1 up	      4818 .212499151
ajp_usd 	 1		11

6 rows selected.

Elapsed: 00:00:00.04
21:05:30 SQL> 
21:05:30 SQL> 
21:05:30 SQL> -- Derive NTILE based params:
21:05:30 SQL> 
21:05:30 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.23
21:05:30 SQL> CREATE TABLE svm6162 COMPRESS AS
21:05:30   2  SELECT
21:05:30   3  pair
21:05:30   4  ,ydate
21:05:30   5  ,prdate
21:05:30   6  ,clse
21:05:30   7  ,g6
21:05:30   8  ,gatt
21:05:30   9  ,gattn
21:05:30  10  ,trend
21:05:30  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
21:05:30  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
21:05:30  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
21:05:30  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
21:05:30  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
21:05:30  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
21:05:30  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
21:05:30  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
21:05:30  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
21:05:30  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
21:05:30  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
21:05:30  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
21:05:30  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
21:05:30  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
21:05:30  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
21:05:30  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
21:05:30  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
21:05:30  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
21:05:30  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
21:05:30  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
21:05:30  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
21:05:30  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
21:05:30  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
21:05:30  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
21:05:30  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
21:05:30  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
21:05:30  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
21:05:30  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
21:05:30  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
21:05:30  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
21:05:30  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
21:05:30  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
21:05:30  43  ,hh  att32
21:05:30  44  ,d   att33
21:05:30  45  ,w   att34
21:05:30  46  ,mpm att35
21:05:30  47  ,mph att36
21:05:30  48  ,trend att37
21:05:30  49  FROM svm6142
21:05:30  50  ORDER BY ydate
21:05:30  51  /

Table created.

Elapsed: 00:00:04.99
21:05:35 SQL> 
21:05:35 SQL> -- rpt
21:05:35 SQL> 
21:05:35 SQL> SELECT
21:05:35   2  pair
21:05:35   3  ,trend
21:05:35   4  ,gatt
21:05:35   5  ,COUNT(pair)
21:05:35   6  ,AVG(g6)
21:05:35   7  FROM svm6162
21:05:35   8  GROUP BY pair,trend,gatt
21:05:35   9  ORDER BY pair,trend,gatt
21:05:35  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ajp_usd 	-1 nup	      4394 -.22297091
ajp_usd 	-1 up	      5213 .223798466
ajp_usd 	-1		61
ajp_usd 	 1 nup	      5309  -.2035003
ajp_usd 	 1 up	      4818 .212499151
ajp_usd 	 1		11

6 rows selected.

Elapsed: 00:00:00.03
21:05:35 SQL> 
21:05:35 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.16
21:05:35 SQL> CREATE TABLE modsrc COMPRESS AS
21:05:35   2  SELECT
21:05:35   3  pair
21:05:35   4  ,ydate
21:05:35   5  ,prdate
21:05:35   6  ,trend
21:05:35   7  ,g6
21:05:35   8  ,gatt
21:05:35   9  ,gattn
21:05:35  10  FROM svm6162
21:05:35  11  /

Table created.

Elapsed: 00:00:00.09
21:05:35 SQL> 
21:05:35 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.30
21:05:36 SQL> 
21:05:36 SQL> DROP   TABLE ajp_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
21:05:36 SQL> CREATE TABLE ajp_ms610 COMPRESS AS
21:05:36   2  SELECT
21:05:36   3  ydate
21:05:36   4  ,trend ajp_trend
21:05:36   5  ,g6    ajp_g6
21:05:36   6  ,gatt  ajp_gatt
21:05:36   7  ,gattn ajp_gattn
21:05:36   8  FROM modsrc
21:05:36   9  /

Table created.

Elapsed: 00:00:00.09
21:05:36 SQL> 
21:05:36 SQL> ANALYZE TABLE ajp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
21:05:36 SQL> 
21:05:36 SQL> -- I need a copy of the attributes:
21:05:36 SQL> 
21:05:36 SQL> 
21:05:36 SQL> DROP   TABLE ajp_att;

Table dropped.

Elapsed: 00:00:00.05
21:05:36 SQL> CREATE TABLE ajp_att COMPRESS AS
21:05:36   2  SELECT
21:05:36   3  ydate
21:05:36   4  ,att00 ajp_att00
21:05:36   5  ,att01 ajp_att01
21:05:36   6  ,att02 ajp_att02
21:05:36   7  ,att03 ajp_att03
21:05:36   8  ,att04 ajp_att04
21:05:36   9  ,att05 ajp_att05
21:05:36  10  ,att06 ajp_att06
21:05:36  11  ,att07 ajp_att07
21:05:36  12  ,att08 ajp_att08
21:05:36  13  ,att09 ajp_att09
21:05:36  14  ,att10 ajp_att10
21:05:36  15  ,att11 ajp_att11
21:05:36  16  ,att12 ajp_att12
21:05:36  17  ,att13 ajp_att13
21:05:36  18  ,att14 ajp_att14
21:05:36  19  ,att15 ajp_att15
21:05:36  20  ,att16 ajp_att16
21:05:36  21  ,att17 ajp_att17
21:05:36  22  ,att18 ajp_att18
21:05:36  23  ,att19 ajp_att19
21:05:36  24  ,att20 ajp_att20
21:05:36  25  ,att21 ajp_att21
21:05:36  26  ,att22 ajp_att22
21:05:36  27  ,att23 ajp_att23
21:05:36  28  ,att24 ajp_att24
21:05:36  29  ,att25 ajp_att25
21:05:36  30  ,att26 ajp_att26
21:05:36  31  ,att27 ajp_att27
21:05:36  32  ,att28 ajp_att28
21:05:36  33  ,att29 ajp_att29
21:05:36  34  ,att30 ajp_att30
21:05:36  35  ,att31 ajp_att31
21:05:36  36  ,att32 ajp_att32
21:05:36  37  ,att33 ajp_att33
21:05:36  38  ,att34 ajp_att34
21:05:36  39  ,att35 ajp_att35
21:05:36  40  ,att36 ajp_att36
21:05:36  41  ,att37 ajp_att37
21:05:36  42  FROM svm6162
21:05:36  43  /

Table created.

Elapsed: 00:00:00.19
21:05:36 SQL> 
21:05:36 SQL> ANALYZE TABLE ajp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
21:05:37 SQL> 
21:05:37 SQL> -- rpt
21:05:37 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19806

Elapsed: 00:00:00.77
21:05:37 SQL> SELECT COUNT(*)FROM ajp_att;

  COUNT(*)
----------
     19806

Elapsed: 00:00:00.00
21:05:37 SQL> 
21:05:37 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
