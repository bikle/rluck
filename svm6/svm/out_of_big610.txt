
SQL*Plus: Release 11.2.0.1.0 Production on Mon Jan 3 00:48:13 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

00:48:14 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
00:48:14 SQL> 00:48:14 SQL> --
00:48:14 SQL> -- eur610.sql
00:48:14 SQL> --
00:48:14 SQL> 
00:48:14 SQL> -- Creates views and tables for backtesting a forex SVM strategy
00:48:14 SQL> 
00:48:14 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.06
00:48:14 SQL> 
00:48:14 SQL> -- I created di5min here:
00:48:14 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
00:48:14 SQL> 
00:48:14 SQL> CREATE OR REPLACE VIEW svm6102 AS
00:48:14   2  SELECT
00:48:14   3  pair
00:48:14   4  ,ydate
00:48:14   5  ,prdate
00:48:14   6  ,rownum rnum -- acts as t in my time-series
00:48:14   7  ,clse
00:48:14   8  -- Derive a bunch of attributes from clse, the latest price:
00:48:14   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
00:48:14  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
00:48:14  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
00:48:14  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
00:48:14  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
00:48:14  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
00:48:14  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
00:48:14  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
00:48:14  17  --
00:48:14  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
00:48:14  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
00:48:14  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
00:48:14  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
00:48:14  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
00:48:14  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
00:48:14  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
00:48:14  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
00:48:14  26  --
00:48:14  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
00:48:14  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
00:48:14  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
00:48:14  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
00:48:14  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
00:48:14  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
00:48:14  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
00:48:14  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
00:48:14  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
00:48:14  36  FROM di5min WHERE pair LIKE'%eur%'
00:48:14  37  AND ydate > sysdate - 95
00:48:14  38  ORDER BY ydate
00:48:14  39  /

View created.

Elapsed: 00:00:00.17
00:48:14 SQL> 
00:48:14 SQL> -- rpt
00:48:14 SQL> 
00:48:14 SQL> SELECT
00:48:14   2  pair
00:48:14   3  ,COUNT(pair)
00:48:14   4  ,MIN(clse),MAX(clse)
00:48:14   5  ,MIN(avg6),MAX(avg6)
00:48:14   6  ,MIN(ydate),MAX(ydate)
00:48:14   7  FROM svm6102
00:48:14   8  GROUP BY pair
00:48:14   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_usd       19259    1.29735	   1.4273 1.29875103 1.42436233 2010-09-30 00:50:01 2011-01-03 00:40:00

Elapsed: 00:00:00.90
00:48:15 SQL> 
00:48:15 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
00:48:15 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.28
00:48:15 SQL> CREATE TABLE svm6122 COMPRESS AS
00:48:15   2  SELECT
00:48:15   3  pair
00:48:15   4  ,ydate
00:48:15   5  ,prdate
00:48:15   6  ,clse
00:48:15   7  -- g6 is important. I want to predict g6:
00:48:15   8  ,ld6 - clse g6
00:48:15   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
00:48:15  10  -- I want more attributes from the ones I derived above:
00:48:15  11  -- clse relation to moving-min
00:48:15  12  ,clse-min4  cm4
00:48:15  13  ,clse-min6  cm6
00:48:15  14  ,clse-min8  cm8
00:48:15  15  ,clse-min10 cm10
00:48:15  16  ,clse-min12 cm12
00:48:15  17  ,clse-min14 cm14
00:48:15  18  ,clse-min16 cm16
00:48:15  19  ,clse-min18 cm18
00:48:15  20  -- clse relation to moving-avg
00:48:15  21  ,clse-avg4  ca4
00:48:15  22  ,clse-avg6  ca6
00:48:15  23  ,clse-avg8  ca8
00:48:15  24  ,clse-avg10 ca10
00:48:15  25  ,clse-avg12 ca12
00:48:15  26  ,clse-avg14 ca14
00:48:15  27  ,clse-avg16 ca16
00:48:15  28  ,clse-avg18 ca18
00:48:15  29  -- clse relation to moving-max
00:48:15  30  ,clse-max4  cx4
00:48:15  31  ,clse-max6  cx6
00:48:15  32  ,clse-max8  cx8
00:48:15  33  ,clse-max10 cx10
00:48:15  34  ,clse-max12 cx12
00:48:15  35  ,clse-max14 cx14
00:48:15  36  ,clse-max16 cx16
00:48:15  37  ,clse-max18 cx18
00:48:15  38  -- Derive more attributes.
00:48:15  39  -- I want to use CORR() here to help SVM see the shape of the series.
00:48:15  40  -- But COVAR_POP is more stable:
00:48:15  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
00:48:15  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
00:48:15  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
00:48:15  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
00:48:15  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
00:48:15  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
00:48:15  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
00:48:15  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
00:48:15  49  -- Derive date related attributes:
00:48:15  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
00:48:15  51  ,0+TO_CHAR(ydate,'D')d
00:48:15  52  ,0+TO_CHAR(ydate,'W')w
00:48:15  53  -- mpm stands for minutes-past-midnight:
00:48:15  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
00:48:15  55  -- mph stands for minutes-past-hour:
00:48:15  56  ,0+TO_CHAR(ydate,'MI')mph
00:48:15  57  FROM svm6102
00:48:15  58  ORDER BY ydate
00:48:15  59  /

Table created.

Elapsed: 00:00:02.47
00:48:17 SQL> 
00:48:17 SQL> -- rpt
00:48:17 SQL> 
00:48:17 SQL> SELECT
00:48:17   2  pair
00:48:17   3  ,COUNT(pair)
00:48:17   4  ,MIN(clse),MAX(clse)
00:48:17   5  ,MIN(ydate),MAX(ydate)
00:48:17   6  FROM svm6122
00:48:17   7  GROUP BY pair
00:48:17   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_usd       19259    1.29735	   1.4273 2010-09-30 00:50:01 2011-01-03 00:40:00

Elapsed: 00:00:00.40
00:48:18 SQL> 
00:48:18 SQL> -- Prepare for derivation of NTILE based params:
00:48:18 SQL> 
00:48:18 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:03.71
00:48:22 SQL> CREATE TABLE svm6142 COMPRESS AS
00:48:22   2  SELECT
00:48:22   3  pair
00:48:22   4  ,ydate
00:48:22   5  ,prdate
00:48:22   6  ,clse
00:48:22   7  ,g6
00:48:22   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
00:48:22   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
00:48:22  10  ,CASE WHEN trend IS NULL THEN 1
00:48:22  11  	    WHEN trend =0      THEN 1
00:48:22  12  	    ELSE trend END trend
00:48:22  13  ,cm4
00:48:22  14  ,cm6
00:48:22  15  ,cm8
00:48:22  16  ,cm10
00:48:22  17  ,cm12
00:48:22  18  ,cm14
00:48:22  19  ,cm16
00:48:22  20  ,cm18
00:48:22  21  --
00:48:22  22  ,ca4
00:48:22  23  ,ca6
00:48:22  24  ,ca8
00:48:22  25  ,ca10
00:48:22  26  ,ca12
00:48:22  27  ,ca14
00:48:22  28  ,ca16
00:48:22  29  ,ca18
00:48:22  30  --
00:48:22  31  ,cx4
00:48:22  32  ,cx6
00:48:22  33  ,cx8
00:48:22  34  ,cx10
00:48:22  35  ,cx12
00:48:22  36  ,cx14
00:48:22  37  ,cx16
00:48:22  38  ,cx18
00:48:22  39  --
00:48:22  40  ,crr4
00:48:22  41  ,crr6
00:48:22  42  ,crr8
00:48:22  43  ,crr10
00:48:22  44  ,crr12
00:48:22  45  ,crr14
00:48:22  46  ,crr16
00:48:22  47  ,crr18
00:48:22  48  --
00:48:22  49  ,hh
00:48:22  50  ,d
00:48:22  51  ,w
00:48:22  52  ,mpm
00:48:22  53  ,mph
00:48:22  54  FROM svm6122
00:48:22  55  ORDER BY ydate
00:48:22  56  /

Table created.

Elapsed: 00:00:00.46
00:48:22 SQL> 
00:48:22 SQL> -- rpt
00:48:22 SQL> 
00:48:22 SQL> SELECT
00:48:22   2  pair
00:48:22   3  ,trend
00:48:22   4  ,gatt
00:48:22   5  ,COUNT(pair)
00:48:22   6  ,AVG(g6)
00:48:22   7  FROM svm6142
00:48:22   8  GROUP BY pair,trend,gatt
00:48:22   9  ORDER BY pair,trend,gatt
00:48:22  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      5944  -.0031218
eur_usd 	-1 up	      3585 .004484529
eur_usd 	-1		66
eur_usd 	 1 nup	      5849 -.00316719
eur_usd 	 1 up	      3809 .005051542
eur_usd 	 1		 6

6 rows selected.

Elapsed: 00:00:00.25
00:48:22 SQL> 
00:48:22 SQL> 
00:48:22 SQL> -- Derive NTILE based params:
00:48:22 SQL> 
00:48:22 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:01.06
00:48:23 SQL> CREATE TABLE svm6162 COMPRESS AS
00:48:23   2  SELECT
00:48:23   3  pair
00:48:23   4  ,ydate
00:48:23   5  ,prdate
00:48:23   6  ,clse
00:48:23   7  ,g6
00:48:23   8  ,gatt
00:48:23   9  ,gattn
00:48:23  10  ,trend
00:48:23  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
00:48:23  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
00:48:23  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
00:48:23  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
00:48:23  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
00:48:23  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
00:48:23  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
00:48:23  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
00:48:23  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
00:48:23  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
00:48:23  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
00:48:23  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
00:48:23  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
00:48:23  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
00:48:23  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
00:48:23  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
00:48:23  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
00:48:23  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
00:48:23  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
00:48:23  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
00:48:23  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
00:48:23  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
00:48:23  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
00:48:23  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
00:48:23  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
00:48:23  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
00:48:23  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
00:48:23  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
00:48:23  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
00:48:23  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
00:48:23  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
00:48:23  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
00:48:23  43  ,hh  att32
00:48:23  44  ,d   att33
00:48:23  45  ,w   att34
00:48:23  46  ,mpm att35
00:48:23  47  ,mph att36
00:48:23  48  ,trend att37
00:48:23  49  FROM svm6142
00:48:23  50  ORDER BY ydate
00:48:23  51  /

Table created.

Elapsed: 00:00:04.74
00:48:28 SQL> 
00:48:28 SQL> -- rpt
00:48:28 SQL> 
00:48:28 SQL> SELECT
00:48:28   2  pair
00:48:28   3  ,trend
00:48:28   4  ,gatt
00:48:28   5  ,COUNT(pair)
00:48:28   6  ,AVG(g6)
00:48:28   7  FROM svm6162
00:48:28   8  GROUP BY pair,trend,gatt
00:48:28   9  ORDER BY pair,trend,gatt
00:48:28  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      5944  -.0031218
eur_usd 	-1 up	      3585 .004484529
eur_usd 	-1		66
eur_usd 	 1 nup	      5849 -.00316719
eur_usd 	 1 up	      3809 .005051542
eur_usd 	 1		 6

6 rows selected.

Elapsed: 00:00:00.02
00:48:28 SQL> 
00:48:28 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.15
00:48:28 SQL> CREATE TABLE modsrc COMPRESS AS
00:48:28   2  SELECT
00:48:28   3  pair
00:48:28   4  ,ydate
00:48:28   5  ,prdate
00:48:28   6  ,trend
00:48:28   7  ,g6
00:48:28   8  ,gatt
00:48:28   9  ,gattn
00:48:28  10  FROM svm6162
00:48:28  11  /

Table created.

Elapsed: 00:00:00.08
00:48:28 SQL> 
00:48:28 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.27
00:48:29 SQL> 
00:48:29 SQL> DROP   TABLE eur_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
00:48:29 SQL> CREATE TABLE eur_ms610 COMPRESS AS
00:48:29   2  SELECT
00:48:29   3  ydate
00:48:29   4  ,trend eur_trend
00:48:29   5  ,g6    eur_g6
00:48:29   6  ,gatt  eur_gatt
00:48:29   7  ,gattn eur_gattn
00:48:29   8  FROM modsrc
00:48:29   9  /

Table created.

Elapsed: 00:00:00.06
00:48:29 SQL> 
00:48:29 SQL> ANALYZE TABLE eur_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
00:48:29 SQL> 
00:48:29 SQL> -- I need a copy of the attributes:
00:48:29 SQL> 
00:48:29 SQL> 
00:48:29 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.05
00:48:29 SQL> CREATE TABLE eur_att COMPRESS AS
00:48:29   2  SELECT
00:48:29   3  ydate
00:48:29   4  ,att00 eur_att00
00:48:29   5  ,att01 eur_att01
00:48:29   6  ,att02 eur_att02
00:48:29   7  ,att03 eur_att03
00:48:29   8  ,att04 eur_att04
00:48:29   9  ,att05 eur_att05
00:48:29  10  ,att06 eur_att06
00:48:29  11  ,att07 eur_att07
00:48:29  12  ,att08 eur_att08
00:48:29  13  ,att09 eur_att09
00:48:29  14  ,att10 eur_att10
00:48:29  15  ,att11 eur_att11
00:48:29  16  ,att12 eur_att12
00:48:29  17  ,att13 eur_att13
00:48:29  18  ,att14 eur_att14
00:48:29  19  ,att15 eur_att15
00:48:29  20  ,att16 eur_att16
00:48:29  21  ,att17 eur_att17
00:48:29  22  ,att18 eur_att18
00:48:29  23  ,att19 eur_att19
00:48:29  24  ,att20 eur_att20
00:48:29  25  ,att21 eur_att21
00:48:29  26  ,att22 eur_att22
00:48:29  27  ,att23 eur_att23
00:48:29  28  ,att24 eur_att24
00:48:29  29  ,att25 eur_att25
00:48:29  30  ,att26 eur_att26
00:48:29  31  ,att27 eur_att27
00:48:29  32  ,att28 eur_att28
00:48:29  33  ,att29 eur_att29
00:48:29  34  ,att30 eur_att30
00:48:29  35  ,att31 eur_att31
00:48:29  36  ,att32 eur_att32
00:48:29  37  ,att33 eur_att33
00:48:29  38  ,att34 eur_att34
00:48:29  39  ,att35 eur_att35
00:48:29  40  ,att36 eur_att36
00:48:29  41  ,att37 eur_att37
00:48:29  42  FROM svm6162
00:48:29  43  /

Table created.

Elapsed: 00:00:00.25
00:48:29 SQL> 
00:48:29 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
00:48:30 SQL> 
00:48:30 SQL> -- rpt
00:48:30 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19259

Elapsed: 00:00:00.87
00:48:31 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     19259

Elapsed: 00:00:00.00
00:48:31 SQL> 
00:48:31 SQL> --
00:48:31 SQL> -- aud610.sql
00:48:31 SQL> --
00:48:31 SQL> 
00:48:31 SQL> -- Creates views and tables for backtesting a forex SVM strategy
00:48:31 SQL> 
00:48:31 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.60
00:48:31 SQL> 
00:48:31 SQL> -- I created di5min here:
00:48:31 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
00:48:31 SQL> 
00:48:31 SQL> CREATE OR REPLACE VIEW svm6102 AS
00:48:31   2  SELECT
00:48:31   3  pair
00:48:31   4  ,ydate
00:48:31   5  ,prdate
00:48:31   6  ,rownum rnum -- acts as t in my time-series
00:48:31   7  ,clse
00:48:31   8  -- Derive a bunch of attributes from clse, the latest price:
00:48:31   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
00:48:31  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
00:48:31  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
00:48:31  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
00:48:31  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
00:48:31  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
00:48:31  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
00:48:31  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
00:48:31  17  --
00:48:31  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
00:48:31  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
00:48:31  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
00:48:31  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
00:48:31  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
00:48:31  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
00:48:31  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
00:48:31  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
00:48:31  26  --
00:48:31  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
00:48:31  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
00:48:31  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
00:48:31  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
00:48:31  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
00:48:31  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
00:48:31  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
00:48:31  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
00:48:31  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
00:48:31  36  FROM di5min WHERE pair LIKE'%aud%'
00:48:31  37  AND ydate > sysdate - 95
00:48:31  38  ORDER BY ydate
00:48:31  39  /

View created.

Elapsed: 00:00:00.04
00:48:31 SQL> 
00:48:31 SQL> -- rpt
00:48:31 SQL> 
00:48:31 SQL> SELECT
00:48:31   2  pair
00:48:31   3  ,COUNT(pair)
00:48:31   4  ,MIN(clse),MAX(clse)
00:48:31   5  ,MIN(avg6),MAX(avg6)
00:48:31   6  ,MIN(ydate),MAX(ydate)
00:48:31   7  FROM svm6102
00:48:31   8  GROUP BY pair
00:48:31   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
aud_usd       19256	.95405	  1.02495 .957141438 1.02284247 2010-09-30 00:50:01 2011-01-03 00:40:00

Elapsed: 00:00:00.91
00:48:32 SQL> 
00:48:32 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
00:48:32 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.24
00:48:32 SQL> CREATE TABLE svm6122 COMPRESS AS
00:48:32   2  SELECT
00:48:32   3  pair
00:48:32   4  ,ydate
00:48:32   5  ,prdate
00:48:32   6  ,clse
00:48:32   7  -- g6 is important. I want to predict g6:
00:48:32   8  ,ld6 - clse g6
00:48:32   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
00:48:32  10  -- I want more attributes from the ones I derived above:
00:48:32  11  -- clse relation to moving-min
00:48:32  12  ,clse-min4  cm4
00:48:32  13  ,clse-min6  cm6
00:48:32  14  ,clse-min8  cm8
00:48:32  15  ,clse-min10 cm10
00:48:32  16  ,clse-min12 cm12
00:48:32  17  ,clse-min14 cm14
00:48:32  18  ,clse-min16 cm16
00:48:32  19  ,clse-min18 cm18
00:48:32  20  -- clse relation to moving-avg
00:48:32  21  ,clse-avg4  ca4
00:48:32  22  ,clse-avg6  ca6
00:48:32  23  ,clse-avg8  ca8
00:48:32  24  ,clse-avg10 ca10
00:48:32  25  ,clse-avg12 ca12
00:48:32  26  ,clse-avg14 ca14
00:48:32  27  ,clse-avg16 ca16
00:48:32  28  ,clse-avg18 ca18
00:48:32  29  -- clse relation to moving-max
00:48:32  30  ,clse-max4  cx4
00:48:32  31  ,clse-max6  cx6
00:48:32  32  ,clse-max8  cx8
00:48:32  33  ,clse-max10 cx10
00:48:32  34  ,clse-max12 cx12
00:48:32  35  ,clse-max14 cx14
00:48:32  36  ,clse-max16 cx16
00:48:32  37  ,clse-max18 cx18
00:48:32  38  -- Derive more attributes.
00:48:32  39  -- I want to use CORR() here to help SVM see the shape of the series.
00:48:32  40  -- But COVAR_POP is more stable:
00:48:32  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
00:48:32  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
00:48:32  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
00:48:32  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
00:48:32  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
00:48:32  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
00:48:32  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
00:48:32  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
00:48:32  49  -- Derive date related attributes:
00:48:32  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
00:48:32  51  ,0+TO_CHAR(ydate,'D')d
00:48:32  52  ,0+TO_CHAR(ydate,'W')w
00:48:32  53  -- mpm stands for minutes-past-midnight:
00:48:32  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
00:48:32  55  -- mph stands for minutes-past-hour:
00:48:32  56  ,0+TO_CHAR(ydate,'MI')mph
00:48:32  57  FROM svm6102
00:48:32  58  ORDER BY ydate
00:48:32  59  /

Table created.

Elapsed: 00:00:02.22
00:48:35 SQL> 
00:48:35 SQL> -- rpt
00:48:35 SQL> 
00:48:35 SQL> SELECT
00:48:35   2  pair
00:48:35   3  ,COUNT(pair)
00:48:35   4  ,MIN(clse),MAX(clse)
00:48:35   5  ,MIN(ydate),MAX(ydate)
00:48:35   6  FROM svm6122
00:48:35   7  GROUP BY pair
00:48:35   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
aud_usd       19256	.95405	  1.02495 2010-09-30 00:50:01 2011-01-03 00:40:00

Elapsed: 00:00:00.41
00:48:35 SQL> 
00:48:35 SQL> -- Prepare for derivation of NTILE based params:
00:48:35 SQL> 
00:48:35 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.23
00:48:35 SQL> CREATE TABLE svm6142 COMPRESS AS
00:48:35   2  SELECT
00:48:35   3  pair
00:48:35   4  ,ydate
00:48:35   5  ,prdate
00:48:35   6  ,clse
00:48:35   7  ,g6
00:48:35   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
00:48:35   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
00:48:35  10  ,CASE WHEN trend IS NULL THEN 1
00:48:35  11  	    WHEN trend =0      THEN 1
00:48:35  12  	    ELSE trend END trend
00:48:35  13  ,cm4
00:48:35  14  ,cm6
00:48:35  15  ,cm8
00:48:35  16  ,cm10
00:48:35  17  ,cm12
00:48:35  18  ,cm14
00:48:35  19  ,cm16
00:48:35  20  ,cm18
00:48:35  21  --
00:48:35  22  ,ca4
00:48:35  23  ,ca6
00:48:35  24  ,ca8
00:48:35  25  ,ca10
00:48:35  26  ,ca12
00:48:35  27  ,ca14
00:48:35  28  ,ca16
00:48:35  29  ,ca18
00:48:35  30  --
00:48:35  31  ,cx4
00:48:35  32  ,cx6
00:48:35  33  ,cx8
00:48:35  34  ,cx10
00:48:35  35  ,cx12
00:48:35  36  ,cx14
00:48:35  37  ,cx16
00:48:35  38  ,cx18
00:48:35  39  --
00:48:35  40  ,crr4
00:48:35  41  ,crr6
00:48:35  42  ,crr8
00:48:35  43  ,crr10
00:48:35  44  ,crr12
00:48:35  45  ,crr14
00:48:35  46  ,crr16
00:48:35  47  ,crr18
00:48:35  48  --
00:48:35  49  ,hh
00:48:35  50  ,d
00:48:35  51  ,w
00:48:35  52  ,mpm
00:48:35  53  ,mph
00:48:35  54  FROM svm6122
00:48:35  55  ORDER BY ydate
00:48:35  56  /

Table created.

Elapsed: 00:00:00.38
00:48:36 SQL> 
00:48:36 SQL> -- rpt
00:48:36 SQL> 
00:48:36 SQL> SELECT
00:48:36   2  pair
00:48:36   3  ,trend
00:48:36   4  ,gatt
00:48:36   5  ,COUNT(pair)
00:48:36   6  ,AVG(g6)
00:48:36   7  FROM svm6142
00:48:36   8  GROUP BY pair,trend,gatt
00:48:36   9  ORDER BY pair,trend,gatt
00:48:36  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5052 -.00217238
aud_usd 	-1 up	      3780 .003736974
aud_usd 	-1		30
aud_usd 	 1 nup	      6677 -.00210783
aud_usd 	 1 up	      3675 .004039789
aud_usd 	 1		42

6 rows selected.

Elapsed: 00:00:00.04
00:48:36 SQL> 
00:48:36 SQL> 
00:48:36 SQL> -- Derive NTILE based params:
00:48:36 SQL> 
00:48:36 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.20
00:48:36 SQL> CREATE TABLE svm6162 COMPRESS AS
00:48:36   2  SELECT
00:48:36   3  pair
00:48:36   4  ,ydate
00:48:36   5  ,prdate
00:48:36   6  ,clse
00:48:36   7  ,g6
00:48:36   8  ,gatt
00:48:36   9  ,gattn
00:48:36  10  ,trend
00:48:36  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
00:48:36  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
00:48:36  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
00:48:36  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
00:48:36  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
00:48:36  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
00:48:36  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
00:48:36  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
00:48:36  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
00:48:36  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
00:48:36  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
00:48:36  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
00:48:36  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
00:48:36  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
00:48:36  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
00:48:36  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
00:48:36  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
00:48:36  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
00:48:36  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
00:48:36  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
00:48:36  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
00:48:36  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
00:48:36  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
00:48:36  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
00:48:36  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
00:48:36  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
00:48:36  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
00:48:36  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
00:48:36  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
00:48:36  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
00:48:36  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
00:48:36  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
00:48:36  43  ,hh  att32
00:48:36  44  ,d   att33
00:48:36  45  ,w   att34
00:48:36  46  ,mpm att35
00:48:36  47  ,mph att36
00:48:36  48  ,trend att37
00:48:36  49  FROM svm6142
00:48:36  50  ORDER BY ydate
00:48:36  51  /

Table created.

Elapsed: 00:00:04.81
00:48:41 SQL> 
00:48:41 SQL> -- rpt
00:48:41 SQL> 
00:48:41 SQL> SELECT
00:48:41   2  pair
00:48:41   3  ,trend
00:48:41   4  ,gatt
00:48:41   5  ,COUNT(pair)
00:48:41   6  ,AVG(g6)
00:48:41   7  FROM svm6162
00:48:41   8  GROUP BY pair,trend,gatt
00:48:41   9  ORDER BY pair,trend,gatt
00:48:41  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5052 -.00217238
aud_usd 	-1 up	      3780 .003736974
aud_usd 	-1		30
aud_usd 	 1 nup	      6677 -.00210783
aud_usd 	 1 up	      3675 .004039789
aud_usd 	 1		42

6 rows selected.

Elapsed: 00:00:00.03
00:48:41 SQL> 
00:48:41 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.17
00:48:41 SQL> CREATE TABLE modsrc COMPRESS AS
00:48:41   2  SELECT
00:48:41   3  pair
00:48:41   4  ,ydate
00:48:41   5  ,prdate
00:48:41   6  ,trend
00:48:41   7  ,g6
00:48:41   8  ,gatt
00:48:41   9  ,gattn
00:48:41  10  FROM svm6162
00:48:41  11  /

Table created.

Elapsed: 00:00:00.10
00:48:41 SQL> 
00:48:41 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
00:48:41 SQL> 
00:48:41 SQL> DROP   TABLE aud_ms610 ;

Table dropped.

Elapsed: 00:00:00.07
00:48:41 SQL> CREATE TABLE aud_ms610 COMPRESS AS
00:48:41   2  SELECT
00:48:41   3  ydate
00:48:41   4  ,trend aud_trend
00:48:41   5  ,g6    aud_g6
00:48:41   6  ,gatt  aud_gatt
00:48:41   7  ,gattn aud_gattn
00:48:41   8  FROM modsrc
00:48:41   9  /

Table created.

Elapsed: 00:00:00.07
00:48:41 SQL> 
00:48:41 SQL> ANALYZE TABLE aud_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
00:48:41 SQL> 
00:48:41 SQL> -- I need a copy of the attributes:
00:48:41 SQL> 
00:48:41 SQL> 
00:48:41 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.05
00:48:41 SQL> CREATE TABLE aud_att COMPRESS AS
00:48:41   2  SELECT
00:48:41   3  ydate
00:48:41   4  ,att00 aud_att00
00:48:41   5  ,att01 aud_att01
00:48:41   6  ,att02 aud_att02
00:48:41   7  ,att03 aud_att03
00:48:41   8  ,att04 aud_att04
00:48:41   9  ,att05 aud_att05
00:48:41  10  ,att06 aud_att06
00:48:41  11  ,att07 aud_att07
00:48:41  12  ,att08 aud_att08
00:48:41  13  ,att09 aud_att09
00:48:41  14  ,att10 aud_att10
00:48:41  15  ,att11 aud_att11
00:48:41  16  ,att12 aud_att12
00:48:41  17  ,att13 aud_att13
00:48:41  18  ,att14 aud_att14
00:48:41  19  ,att15 aud_att15
00:48:41  20  ,att16 aud_att16
00:48:41  21  ,att17 aud_att17
00:48:41  22  ,att18 aud_att18
00:48:41  23  ,att19 aud_att19
00:48:41  24  ,att20 aud_att20
00:48:41  25  ,att21 aud_att21
00:48:41  26  ,att22 aud_att22
00:48:41  27  ,att23 aud_att23
00:48:41  28  ,att24 aud_att24
00:48:41  29  ,att25 aud_att25
00:48:41  30  ,att26 aud_att26
00:48:41  31  ,att27 aud_att27
00:48:41  32  ,att28 aud_att28
00:48:41  33  ,att29 aud_att29
00:48:41  34  ,att30 aud_att30
00:48:41  35  ,att31 aud_att31
00:48:41  36  ,att32 aud_att32
00:48:41  37  ,att33 aud_att33
00:48:41  38  ,att34 aud_att34
00:48:41  39  ,att35 aud_att35
00:48:41  40  ,att36 aud_att36
00:48:41  41  ,att37 aud_att37
00:48:41  42  FROM svm6162
00:48:41  43  /

Table created.

Elapsed: 00:00:00.17
00:48:42 SQL> 
00:48:42 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.49
00:48:42 SQL> 
00:48:42 SQL> -- rpt
00:48:42 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19256

Elapsed: 00:00:00.86
00:48:43 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     19256

Elapsed: 00:00:00.00
00:48:43 SQL> 
00:48:43 SQL> --
00:48:43 SQL> -- gbp610.sql
00:48:43 SQL> --
00:48:43 SQL> 
00:48:43 SQL> -- Creates views and tables for backtesting a forex SVM strategy
00:48:43 SQL> 
00:48:43 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.40
00:48:43 SQL> 
00:48:43 SQL> -- I created di5min here:
00:48:43 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
00:48:43 SQL> 
00:48:43 SQL> CREATE OR REPLACE VIEW svm6102 AS
00:48:43   2  SELECT
00:48:43   3  pair
00:48:43   4  ,ydate
00:48:43   5  ,prdate
00:48:43   6  ,rownum rnum -- acts as t in my time-series
00:48:43   7  ,clse
00:48:43   8  -- Derive a bunch of attributes from clse, the latest price:
00:48:43   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
00:48:43  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
00:48:43  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
00:48:43  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
00:48:43  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
00:48:43  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
00:48:43  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
00:48:43  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
00:48:43  17  --
00:48:43  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
00:48:43  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
00:48:43  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
00:48:43  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
00:48:43  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
00:48:43  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
00:48:43  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
00:48:43  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
00:48:43  26  --
00:48:43  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
00:48:43  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
00:48:43  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
00:48:43  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
00:48:43  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
00:48:43  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
00:48:43  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
00:48:43  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
00:48:43  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
00:48:43  36  FROM di5min WHERE pair LIKE'%gbp%'
00:48:43  37  AND ydate > sysdate - 95
00:48:43  38  ORDER BY ydate
00:48:43  39  /

View created.

Elapsed: 00:00:00.06
00:48:43 SQL> 
00:48:43 SQL> -- rpt
00:48:43 SQL> 
00:48:43 SQL> SELECT
00:48:43   2  pair
00:48:43   3  ,COUNT(pair)
00:48:43   4  ,MIN(clse),MAX(clse)
00:48:43   5  ,MIN(avg6),MAX(avg6)
00:48:43   6  ,MIN(ydate),MAX(ydate)
00:48:43   7  FROM svm6102
00:48:43   8  GROUP BY pair
00:48:43   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
gbp_usd       19258   1.535325	   1.6295 1.53696747 1.62716986 2010-09-30 00:50:01 2011-01-03 00:40:00

Elapsed: 00:00:00.86
00:48:44 SQL> 
00:48:44 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
00:48:44 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.29
00:48:45 SQL> CREATE TABLE svm6122 COMPRESS AS
00:48:45   2  SELECT
00:48:45   3  pair
00:48:45   4  ,ydate
00:48:45   5  ,prdate
00:48:45   6  ,clse
00:48:45   7  -- g6 is important. I want to predict g6:
00:48:45   8  ,ld6 - clse g6
00:48:45   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
00:48:45  10  -- I want more attributes from the ones I derived above:
00:48:45  11  -- clse relation to moving-min
00:48:45  12  ,clse-min4  cm4
00:48:45  13  ,clse-min6  cm6
00:48:45  14  ,clse-min8  cm8
00:48:45  15  ,clse-min10 cm10
00:48:45  16  ,clse-min12 cm12
00:48:45  17  ,clse-min14 cm14
00:48:45  18  ,clse-min16 cm16
00:48:45  19  ,clse-min18 cm18
00:48:45  20  -- clse relation to moving-avg
00:48:45  21  ,clse-avg4  ca4
00:48:45  22  ,clse-avg6  ca6
00:48:45  23  ,clse-avg8  ca8
00:48:45  24  ,clse-avg10 ca10
00:48:45  25  ,clse-avg12 ca12
00:48:45  26  ,clse-avg14 ca14
00:48:45  27  ,clse-avg16 ca16
00:48:45  28  ,clse-avg18 ca18
00:48:45  29  -- clse relation to moving-max
00:48:45  30  ,clse-max4  cx4
00:48:45  31  ,clse-max6  cx6
00:48:45  32  ,clse-max8  cx8
00:48:45  33  ,clse-max10 cx10
00:48:45  34  ,clse-max12 cx12
00:48:45  35  ,clse-max14 cx14
00:48:45  36  ,clse-max16 cx16
00:48:45  37  ,clse-max18 cx18
00:48:45  38  -- Derive more attributes.
00:48:45  39  -- I want to use CORR() here to help SVM see the shape of the series.
00:48:45  40  -- But COVAR_POP is more stable:
00:48:45  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
00:48:45  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
00:48:45  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
00:48:45  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
00:48:45  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
00:48:45  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
00:48:45  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
00:48:45  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
00:48:45  49  -- Derive date related attributes:
00:48:45  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
00:48:45  51  ,0+TO_CHAR(ydate,'D')d
00:48:45  52  ,0+TO_CHAR(ydate,'W')w
00:48:45  53  -- mpm stands for minutes-past-midnight:
00:48:45  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
00:48:45  55  -- mph stands for minutes-past-hour:
00:48:45  56  ,0+TO_CHAR(ydate,'MI')mph
00:48:45  57  FROM svm6102
00:48:45  58  ORDER BY ydate
00:48:45  59  /

Table created.

Elapsed: 00:00:02.02
00:48:47 SQL> 
00:48:47 SQL> -- rpt
00:48:47 SQL> 
00:48:47 SQL> SELECT
00:48:47   2  pair
00:48:47   3  ,COUNT(pair)
00:48:47   4  ,MIN(clse),MAX(clse)
00:48:47   5  ,MIN(ydate),MAX(ydate)
00:48:47   6  FROM svm6122
00:48:47   7  GROUP BY pair
00:48:47   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
gbp_usd       19258   1.535325	   1.6295 2010-09-30 00:50:01 2011-01-03 00:40:00

Elapsed: 00:00:00.09
00:48:47 SQL> 
00:48:47 SQL> -- Prepare for derivation of NTILE based params:
00:48:47 SQL> 
00:48:47 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.24
00:48:47 SQL> CREATE TABLE svm6142 COMPRESS AS
00:48:47   2  SELECT
00:48:47   3  pair
00:48:47   4  ,ydate
00:48:47   5  ,prdate
00:48:47   6  ,clse
00:48:47   7  ,g6
00:48:47   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
00:48:47   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
00:48:47  10  ,CASE WHEN trend IS NULL THEN 1
00:48:47  11  	    WHEN trend =0      THEN 1
00:48:47  12  	    ELSE trend END trend
00:48:47  13  ,cm4
00:48:47  14  ,cm6
00:48:47  15  ,cm8
00:48:47  16  ,cm10
00:48:47  17  ,cm12
00:48:47  18  ,cm14
00:48:47  19  ,cm16
00:48:47  20  ,cm18
00:48:47  21  --
00:48:47  22  ,ca4
00:48:47  23  ,ca6
00:48:47  24  ,ca8
00:48:47  25  ,ca10
00:48:47  26  ,ca12
00:48:47  27  ,ca14
00:48:47  28  ,ca16
00:48:47  29  ,ca18
00:48:47  30  --
00:48:47  31  ,cx4
00:48:47  32  ,cx6
00:48:47  33  ,cx8
00:48:47  34  ,cx10
00:48:47  35  ,cx12
00:48:47  36  ,cx14
00:48:47  37  ,cx16
00:48:47  38  ,cx18
00:48:47  39  --
00:48:47  40  ,crr4
00:48:47  41  ,crr6
00:48:47  42  ,crr8
00:48:47  43  ,crr10
00:48:47  44  ,crr12
00:48:47  45  ,crr14
00:48:47  46  ,crr16
00:48:47  47  ,crr18
00:48:47  48  --
00:48:47  49  ,hh
00:48:47  50  ,d
00:48:47  51  ,w
00:48:47  52  ,mpm
00:48:47  53  ,mph
00:48:47  54  FROM svm6122
00:48:47  55  ORDER BY ydate
00:48:47  56  /

Table created.

Elapsed: 00:00:00.38
00:48:47 SQL> 
00:48:47 SQL> -- rpt
00:48:47 SQL> 
00:48:47 SQL> SELECT
00:48:47   2  pair
00:48:47   3  ,trend
00:48:47   4  ,gatt
00:48:47   5  ,COUNT(pair)
00:48:47   6  ,AVG(g6)
00:48:47   7  FROM svm6142
00:48:47   8  GROUP BY pair,trend,gatt
00:48:47   9  ORDER BY pair,trend,gatt
00:48:47  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6118 -.00268455
gbp_usd 	-1 up	      3481 .004326968
gbp_usd 	-1		35
gbp_usd 	 1 nup	      6066 -.00269704
gbp_usd 	 1 up	      3521 .004513498
gbp_usd 	 1		37

6 rows selected.

Elapsed: 00:00:00.16
00:48:48 SQL> 
00:48:48 SQL> 
00:48:48 SQL> -- Derive NTILE based params:
00:48:48 SQL> 
00:48:48 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.23
00:48:48 SQL> CREATE TABLE svm6162 COMPRESS AS
00:48:48   2  SELECT
00:48:48   3  pair
00:48:48   4  ,ydate
00:48:48   5  ,prdate
00:48:48   6  ,clse
00:48:48   7  ,g6
00:48:48   8  ,gatt
00:48:48   9  ,gattn
00:48:48  10  ,trend
00:48:48  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
00:48:48  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
00:48:48  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
00:48:48  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
00:48:48  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
00:48:48  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
00:48:48  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
00:48:48  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
00:48:48  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
00:48:48  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
00:48:48  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
00:48:48  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
00:48:48  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
00:48:48  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
00:48:48  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
00:48:48  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
00:48:48  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
00:48:48  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
00:48:48  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
00:48:48  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
00:48:48  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
00:48:48  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
00:48:48  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
00:48:48  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
00:48:48  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
00:48:48  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
00:48:48  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
00:48:48  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
00:48:48  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
00:48:48  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
00:48:48  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
00:48:48  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
00:48:48  43  ,hh  att32
00:48:48  44  ,d   att33
00:48:48  45  ,w   att34
00:48:48  46  ,mpm att35
00:48:48  47  ,mph att36
00:48:48  48  ,trend att37
00:48:48  49  FROM svm6142
00:48:48  50  ORDER BY ydate
00:48:48  51  /

Table created.

Elapsed: 00:00:04.75
00:48:52 SQL> 
00:48:52 SQL> -- rpt
00:48:52 SQL> 
00:48:52 SQL> SELECT
00:48:52   2  pair
00:48:52   3  ,trend
00:48:52   4  ,gatt
00:48:52   5  ,COUNT(pair)
00:48:52   6  ,AVG(g6)
00:48:52   7  FROM svm6162
00:48:52   8  GROUP BY pair,trend,gatt
00:48:52   9  ORDER BY pair,trend,gatt
00:48:52  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6118 -.00268455
gbp_usd 	-1 up	      3481 .004326968
gbp_usd 	-1		35
gbp_usd 	 1 nup	      6066 -.00269704
gbp_usd 	 1 up	      3521 .004513498
gbp_usd 	 1		37

6 rows selected.

Elapsed: 00:00:00.03
00:48:53 SQL> 
00:48:53 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.18
00:48:53 SQL> CREATE TABLE modsrc COMPRESS AS
00:48:53   2  SELECT
00:48:53   3  pair
00:48:53   4  ,ydate
00:48:53   5  ,prdate
00:48:53   6  ,trend
00:48:53   7  ,g6
00:48:53   8  ,gatt
00:48:53   9  ,gattn
00:48:53  10  FROM svm6162
00:48:53  11  /

Table created.

Elapsed: 00:00:00.08
00:48:53 SQL> 
00:48:53 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
00:48:53 SQL> 
00:48:53 SQL> DROP   TABLE gbp_ms610 ;

Table dropped.

Elapsed: 00:00:00.06
00:48:53 SQL> CREATE TABLE gbp_ms610 COMPRESS AS
00:48:53   2  SELECT
00:48:53   3  ydate
00:48:53   4  ,trend gbp_trend
00:48:53   5  ,g6    gbp_g6
00:48:53   6  ,gatt  gbp_gatt
00:48:53   7  ,gattn gbp_gattn
00:48:53   8  FROM modsrc
00:48:53   9  /

Table created.

Elapsed: 00:00:00.10
00:48:53 SQL> 
00:48:53 SQL> ANALYZE TABLE gbp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
00:48:53 SQL> 
00:48:53 SQL> -- I need a copy of the attributes:
00:48:53 SQL> 
00:48:53 SQL> 
00:48:53 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.05
00:48:53 SQL> CREATE TABLE gbp_att COMPRESS AS
00:48:53   2  SELECT
00:48:53   3  ydate
00:48:53   4  ,att00 gbp_att00
00:48:53   5  ,att01 gbp_att01
00:48:53   6  ,att02 gbp_att02
00:48:53   7  ,att03 gbp_att03
00:48:53   8  ,att04 gbp_att04
00:48:53   9  ,att05 gbp_att05
00:48:53  10  ,att06 gbp_att06
00:48:53  11  ,att07 gbp_att07
00:48:53  12  ,att08 gbp_att08
00:48:53  13  ,att09 gbp_att09
00:48:53  14  ,att10 gbp_att10
00:48:53  15  ,att11 gbp_att11
00:48:53  16  ,att12 gbp_att12
00:48:53  17  ,att13 gbp_att13
00:48:53  18  ,att14 gbp_att14
00:48:53  19  ,att15 gbp_att15
00:48:53  20  ,att16 gbp_att16
00:48:53  21  ,att17 gbp_att17
00:48:53  22  ,att18 gbp_att18
00:48:53  23  ,att19 gbp_att19
00:48:53  24  ,att20 gbp_att20
00:48:53  25  ,att21 gbp_att21
00:48:53  26  ,att22 gbp_att22
00:48:53  27  ,att23 gbp_att23
00:48:53  28  ,att24 gbp_att24
00:48:53  29  ,att25 gbp_att25
00:48:53  30  ,att26 gbp_att26
00:48:53  31  ,att27 gbp_att27
00:48:53  32  ,att28 gbp_att28
00:48:53  33  ,att29 gbp_att29
00:48:53  34  ,att30 gbp_att30
00:48:53  35  ,att31 gbp_att31
00:48:53  36  ,att32 gbp_att32
00:48:53  37  ,att33 gbp_att33
00:48:53  38  ,att34 gbp_att34
00:48:53  39  ,att35 gbp_att35
00:48:53  40  ,att36 gbp_att36
00:48:53  41  ,att37 gbp_att37
00:48:53  42  FROM svm6162
00:48:53  43  /

Table created.

Elapsed: 00:00:00.19
00:48:54 SQL> 
00:48:54 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
00:48:54 SQL> 
00:48:54 SQL> -- rpt
00:48:54 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19258

Elapsed: 00:00:00.87
00:48:55 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     19258

Elapsed: 00:00:00.00
00:48:55 SQL> 
00:48:55 SQL> --
00:48:55 SQL> -- jpy610.sql
00:48:55 SQL> --
00:48:55 SQL> 
00:48:55 SQL> -- Creates views and tables for backtesting a forex SVM strategy
00:48:55 SQL> 
00:48:55 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.50
00:48:55 SQL> 
00:48:55 SQL> -- I created di5min here:
00:48:55 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
00:48:55 SQL> 
00:48:55 SQL> CREATE OR REPLACE VIEW svm6102 AS
00:48:55   2  SELECT
00:48:55   3  pair
00:48:55   4  ,ydate
00:48:55   5  ,prdate
00:48:55   6  ,rownum rnum -- acts as t in my time-series
00:48:55   7  ,clse
00:48:55   8  -- Derive a bunch of attributes from clse, the latest price:
00:48:55   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
00:48:55  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
00:48:55  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
00:48:55  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
00:48:55  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
00:48:55  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
00:48:55  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
00:48:55  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
00:48:55  17  --
00:48:55  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
00:48:55  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
00:48:55  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
00:48:55  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
00:48:55  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
00:48:55  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
00:48:55  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
00:48:55  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
00:48:55  26  --
00:48:55  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
00:48:55  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
00:48:55  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
00:48:55  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
00:48:55  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
00:48:55  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
00:48:55  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
00:48:55  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
00:48:55  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
00:48:55  36  FROM di5min WHERE pair LIKE'%jpy%'
00:48:55  37  AND ydate > sysdate - 95
00:48:55  38  ORDER BY ydate
00:48:55  39  /

View created.

Elapsed: 00:00:00.08
00:48:56 SQL> 
00:48:56 SQL> -- rpt
00:48:56 SQL> 
00:48:56 SQL> SELECT
00:48:56   2  pair
00:48:56   3  ,COUNT(pair)
00:48:56   4  ,MIN(clse),MAX(clse)
00:48:56   5  ,MIN(avg6),MAX(avg6)
00:48:56   6  ,MIN(ydate),MAX(ydate)
00:48:56   7  FROM svm6102
00:48:56   8  GROUP BY pair
00:48:56   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_jpy       19256	 80.25	   84.485 80.3595205 84.3105479 2010-09-30 00:50:01 2011-01-03 00:40:00

Elapsed: 00:00:00.93
00:48:56 SQL> 
00:48:56 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
00:48:56 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.18
00:48:57 SQL> CREATE TABLE svm6122 COMPRESS AS
00:48:57   2  SELECT
00:48:57   3  pair
00:48:57   4  ,ydate
00:48:57   5  ,prdate
00:48:57   6  ,clse
00:48:57   7  -- g6 is important. I want to predict g6:
00:48:57   8  ,ld6 - clse g6
00:48:57   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
00:48:57  10  -- I want more attributes from the ones I derived above:
00:48:57  11  -- clse relation to moving-min
00:48:57  12  ,clse-min4  cm4
00:48:57  13  ,clse-min6  cm6
00:48:57  14  ,clse-min8  cm8
00:48:57  15  ,clse-min10 cm10
00:48:57  16  ,clse-min12 cm12
00:48:57  17  ,clse-min14 cm14
00:48:57  18  ,clse-min16 cm16
00:48:57  19  ,clse-min18 cm18
00:48:57  20  -- clse relation to moving-avg
00:48:57  21  ,clse-avg4  ca4
00:48:57  22  ,clse-avg6  ca6
00:48:57  23  ,clse-avg8  ca8
00:48:57  24  ,clse-avg10 ca10
00:48:57  25  ,clse-avg12 ca12
00:48:57  26  ,clse-avg14 ca14
00:48:57  27  ,clse-avg16 ca16
00:48:57  28  ,clse-avg18 ca18
00:48:57  29  -- clse relation to moving-max
00:48:57  30  ,clse-max4  cx4
00:48:57  31  ,clse-max6  cx6
00:48:57  32  ,clse-max8  cx8
00:48:57  33  ,clse-max10 cx10
00:48:57  34  ,clse-max12 cx12
00:48:57  35  ,clse-max14 cx14
00:48:57  36  ,clse-max16 cx16
00:48:57  37  ,clse-max18 cx18
00:48:57  38  -- Derive more attributes.
00:48:57  39  -- I want to use CORR() here to help SVM see the shape of the series.
00:48:57  40  -- But COVAR_POP is more stable:
00:48:57  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
00:48:57  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
00:48:57  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
00:48:57  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
00:48:57  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
00:48:57  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
00:48:57  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
00:48:57  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
00:48:57  49  -- Derive date related attributes:
00:48:57  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
00:48:57  51  ,0+TO_CHAR(ydate,'D')d
00:48:57  52  ,0+TO_CHAR(ydate,'W')w
00:48:57  53  -- mpm stands for minutes-past-midnight:
00:48:57  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
00:48:57  55  -- mph stands for minutes-past-hour:
00:48:57  56  ,0+TO_CHAR(ydate,'MI')mph
00:48:57  57  FROM svm6102
00:48:57  58  ORDER BY ydate
00:48:57  59  /

Table created.

Elapsed: 00:00:02.07
00:48:59 SQL> 
00:48:59 SQL> -- rpt
00:48:59 SQL> 
00:48:59 SQL> SELECT
00:48:59   2  pair
00:48:59   3  ,COUNT(pair)
00:48:59   4  ,MIN(clse),MAX(clse)
00:48:59   5  ,MIN(ydate),MAX(ydate)
00:48:59   6  FROM svm6122
00:48:59   7  GROUP BY pair
00:48:59   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_jpy       19256	 80.25	   84.485 2010-09-30 00:50:01 2011-01-03 00:40:00

Elapsed: 00:00:00.03
00:48:59 SQL> 
00:48:59 SQL> -- Prepare for derivation of NTILE based params:
00:48:59 SQL> 
00:48:59 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.17
00:48:59 SQL> CREATE TABLE svm6142 COMPRESS AS
00:48:59   2  SELECT
00:48:59   3  pair
00:48:59   4  ,ydate
00:48:59   5  ,prdate
00:48:59   6  ,clse
00:48:59   7  ,g6
00:48:59   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
00:48:59   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
00:48:59  10  ,CASE WHEN trend IS NULL THEN 1
00:48:59  11  	    WHEN trend =0      THEN 1
00:48:59  12  	    ELSE trend END trend
00:48:59  13  ,cm4
00:48:59  14  ,cm6
00:48:59  15  ,cm8
00:48:59  16  ,cm10
00:48:59  17  ,cm12
00:48:59  18  ,cm14
00:48:59  19  ,cm16
00:48:59  20  ,cm18
00:48:59  21  --
00:48:59  22  ,ca4
00:48:59  23  ,ca6
00:48:59  24  ,ca8
00:48:59  25  ,ca10
00:48:59  26  ,ca12
00:48:59  27  ,ca14
00:48:59  28  ,ca16
00:48:59  29  ,ca18
00:48:59  30  --
00:48:59  31  ,cx4
00:48:59  32  ,cx6
00:48:59  33  ,cx8
00:48:59  34  ,cx10
00:48:59  35  ,cx12
00:48:59  36  ,cx14
00:48:59  37  ,cx16
00:48:59  38  ,cx18
00:48:59  39  --
00:48:59  40  ,crr4
00:48:59  41  ,crr6
00:48:59  42  ,crr8
00:48:59  43  ,crr10
00:48:59  44  ,crr12
00:48:59  45  ,crr14
00:48:59  46  ,crr16
00:48:59  47  ,crr18
00:48:59  48  --
00:48:59  49  ,hh
00:48:59  50  ,d
00:48:59  51  ,w
00:48:59  52  ,mpm
00:48:59  53  ,mph
00:48:59  54  FROM svm6122
00:48:59  55  ORDER BY ydate
00:48:59  56  /

Table created.

Elapsed: 00:00:00.36
00:48:59 SQL> 
00:48:59 SQL> -- rpt
00:48:59 SQL> 
00:48:59 SQL> SELECT
00:48:59   2  pair
00:48:59   3  ,trend
00:48:59   4  ,gatt
00:48:59   5  ,COUNT(pair)
00:48:59   6  ,AVG(g6)
00:48:59   7  FROM svm6142
00:48:59   8  GROUP BY pair,trend,gatt
00:48:59   9  ORDER BY pair,trend,gatt
00:48:59  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5261 -.16657646
usd_jpy 	-1 up	      4839 .165223543
usd_jpy 	-1		46
usd_jpy 	 1 nup	      4970 -.15594534
usd_jpy 	 1 up	      4114 .166208458
usd_jpy 	 1		26

6 rows selected.

Elapsed: 00:00:00.12
00:48:59 SQL> 
00:48:59 SQL> 
00:48:59 SQL> -- Derive NTILE based params:
00:48:59 SQL> 
00:48:59 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.19
00:49:00 SQL> CREATE TABLE svm6162 COMPRESS AS
00:49:00   2  SELECT
00:49:00   3  pair
00:49:00   4  ,ydate
00:49:00   5  ,prdate
00:49:00   6  ,clse
00:49:00   7  ,g6
00:49:00   8  ,gatt
00:49:00   9  ,gattn
00:49:00  10  ,trend
00:49:00  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
00:49:00  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
00:49:00  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
00:49:00  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
00:49:00  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
00:49:00  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
00:49:00  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
00:49:00  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
00:49:00  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
00:49:00  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
00:49:00  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
00:49:00  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
00:49:00  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
00:49:00  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
00:49:00  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
00:49:00  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
00:49:00  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
00:49:00  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
00:49:00  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
00:49:00  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
00:49:00  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
00:49:00  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
00:49:00  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
00:49:00  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
00:49:00  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
00:49:00  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
00:49:00  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
00:49:00  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
00:49:00  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
00:49:00  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
00:49:00  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
00:49:00  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
00:49:00  43  ,hh  att32
00:49:00  44  ,d   att33
00:49:00  45  ,w   att34
00:49:00  46  ,mpm att35
00:49:00  47  ,mph att36
00:49:00  48  ,trend att37
00:49:00  49  FROM svm6142
00:49:00  50  ORDER BY ydate
00:49:00  51  /

Table created.

Elapsed: 00:00:04.82
00:49:04 SQL> 
00:49:04 SQL> -- rpt
00:49:04 SQL> 
00:49:04 SQL> SELECT
00:49:04   2  pair
00:49:04   3  ,trend
00:49:04   4  ,gatt
00:49:04   5  ,COUNT(pair)
00:49:04   6  ,AVG(g6)
00:49:04   7  FROM svm6162
00:49:04   8  GROUP BY pair,trend,gatt
00:49:04   9  ORDER BY pair,trend,gatt
00:49:04  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5261 -.16657646
usd_jpy 	-1 up	      4839 .165223543
usd_jpy 	-1		46
usd_jpy 	 1 nup	      4970 -.15594534
usd_jpy 	 1 up	      4114 .166208458
usd_jpy 	 1		26

6 rows selected.

Elapsed: 00:00:00.06
00:49:04 SQL> 
00:49:04 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.23
00:49:05 SQL> CREATE TABLE modsrc COMPRESS AS
00:49:05   2  SELECT
00:49:05   3  pair
00:49:05   4  ,ydate
00:49:05   5  ,prdate
00:49:05   6  ,trend
00:49:05   7  ,g6
00:49:05   8  ,gatt
00:49:05   9  ,gattn
00:49:05  10  FROM svm6162
00:49:05  11  /

Table created.

Elapsed: 00:00:00.08
00:49:05 SQL> 
00:49:05 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
00:49:05 SQL> 
00:49:05 SQL> DROP   TABLE jpy_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
00:49:05 SQL> CREATE TABLE jpy_ms610 COMPRESS AS
00:49:05   2  SELECT
00:49:05   3  ydate
00:49:05   4  ,trend jpy_trend
00:49:05   5  ,g6    jpy_g6
00:49:05   6  ,gatt  jpy_gatt
00:49:05   7  ,gattn jpy_gattn
00:49:05   8  FROM modsrc
00:49:05   9  /

Table created.

Elapsed: 00:00:00.10
00:49:05 SQL> 
00:49:05 SQL> ANALYZE TABLE jpy_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
00:49:05 SQL> 
00:49:05 SQL> -- I need a copy of the attributes:
00:49:05 SQL> 
00:49:05 SQL> 
00:49:05 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.05
00:49:05 SQL> CREATE TABLE jpy_att COMPRESS AS
00:49:05   2  SELECT
00:49:05   3  ydate
00:49:05   4  ,att00 jpy_att00
00:49:05   5  ,att01 jpy_att01
00:49:05   6  ,att02 jpy_att02
00:49:05   7  ,att03 jpy_att03
00:49:05   8  ,att04 jpy_att04
00:49:05   9  ,att05 jpy_att05
00:49:05  10  ,att06 jpy_att06
00:49:05  11  ,att07 jpy_att07
00:49:05  12  ,att08 jpy_att08
00:49:05  13  ,att09 jpy_att09
00:49:05  14  ,att10 jpy_att10
00:49:05  15  ,att11 jpy_att11
00:49:05  16  ,att12 jpy_att12
00:49:05  17  ,att13 jpy_att13
00:49:05  18  ,att14 jpy_att14
00:49:05  19  ,att15 jpy_att15
00:49:05  20  ,att16 jpy_att16
00:49:05  21  ,att17 jpy_att17
00:49:05  22  ,att18 jpy_att18
00:49:05  23  ,att19 jpy_att19
00:49:05  24  ,att20 jpy_att20
00:49:05  25  ,att21 jpy_att21
00:49:05  26  ,att22 jpy_att22
00:49:05  27  ,att23 jpy_att23
00:49:05  28  ,att24 jpy_att24
00:49:05  29  ,att25 jpy_att25
00:49:05  30  ,att26 jpy_att26
00:49:05  31  ,att27 jpy_att27
00:49:05  32  ,att28 jpy_att28
00:49:05  33  ,att29 jpy_att29
00:49:05  34  ,att30 jpy_att30
00:49:05  35  ,att31 jpy_att31
00:49:05  36  ,att32 jpy_att32
00:49:05  37  ,att33 jpy_att33
00:49:05  38  ,att34 jpy_att34
00:49:05  39  ,att35 jpy_att35
00:49:05  40  ,att36 jpy_att36
00:49:05  41  ,att37 jpy_att37
00:49:05  42  FROM svm6162
00:49:05  43  /

Table created.

Elapsed: 00:00:00.16
00:49:05 SQL> 
00:49:05 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
00:49:06 SQL> 
00:49:06 SQL> -- rpt
00:49:06 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19256

Elapsed: 00:00:00.89
00:49:07 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     19256

Elapsed: 00:00:00.00
00:49:07 SQL> 
00:49:07 SQL> --
00:49:07 SQL> -- cad610.sql
00:49:07 SQL> --
00:49:07 SQL> 
00:49:07 SQL> -- Creates views and tables for backtesting a forex SVM strategy
00:49:07 SQL> 
00:49:07 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.44
00:49:07 SQL> 
00:49:07 SQL> -- I created di5min here:
00:49:07 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
00:49:07 SQL> 
00:49:07 SQL> CREATE OR REPLACE VIEW svm6102 AS
00:49:07   2  SELECT
00:49:07   3  pair
00:49:07   4  ,ydate
00:49:07   5  ,prdate
00:49:07   6  ,rownum rnum -- acts as t in my time-series
00:49:07   7  ,clse
00:49:07   8  -- Derive a bunch of attributes from clse, the latest price:
00:49:07   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
00:49:07  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
00:49:07  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
00:49:07  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
00:49:07  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
00:49:07  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
00:49:07  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
00:49:07  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
00:49:07  17  --
00:49:07  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
00:49:07  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
00:49:07  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
00:49:07  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
00:49:07  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
00:49:07  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
00:49:07  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
00:49:07  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
00:49:07  26  --
00:49:07  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
00:49:07  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
00:49:07  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
00:49:07  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
00:49:07  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
00:49:07  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
00:49:07  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
00:49:07  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
00:49:07  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
00:49:07  36  FROM di5min WHERE pair LIKE'%cad%'
00:49:07  37  AND ydate > sysdate - 95
00:49:07  38  ORDER BY ydate
00:49:07  39  /

View created.

Elapsed: 00:00:00.04
00:49:07 SQL> 
00:49:07 SQL> -- rpt
00:49:07 SQL> 
00:49:07 SQL> SELECT
00:49:07   2  pair
00:49:07   3  ,COUNT(pair)
00:49:07   4  ,MIN(clse),MAX(clse)
00:49:07   5  ,MIN(avg6),MAX(avg6)
00:49:07   6  ,MIN(ydate),MAX(ydate)
00:49:07   7  FROM svm6102
00:49:07   8  GROUP BY pair
00:49:07   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_cad       19256    .992825	   1.0355 .995120719 1.03337132 2010-09-30 00:50:01 2011-01-03 00:40:00

Elapsed: 00:00:00.86
00:49:08 SQL> 
00:49:08 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
00:49:08 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.78
00:49:09 SQL> CREATE TABLE svm6122 COMPRESS AS
00:49:09   2  SELECT
00:49:09   3  pair
00:49:09   4  ,ydate
00:49:09   5  ,prdate
00:49:09   6  ,clse
00:49:09   7  -- g6 is important. I want to predict g6:
00:49:09   8  ,ld6 - clse g6
00:49:09   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
00:49:09  10  -- I want more attributes from the ones I derived above:
00:49:09  11  -- clse relation to moving-min
00:49:09  12  ,clse-min4  cm4
00:49:09  13  ,clse-min6  cm6
00:49:09  14  ,clse-min8  cm8
00:49:09  15  ,clse-min10 cm10
00:49:09  16  ,clse-min12 cm12
00:49:09  17  ,clse-min14 cm14
00:49:09  18  ,clse-min16 cm16
00:49:09  19  ,clse-min18 cm18
00:49:09  20  -- clse relation to moving-avg
00:49:09  21  ,clse-avg4  ca4
00:49:09  22  ,clse-avg6  ca6
00:49:09  23  ,clse-avg8  ca8
00:49:09  24  ,clse-avg10 ca10
00:49:09  25  ,clse-avg12 ca12
00:49:09  26  ,clse-avg14 ca14
00:49:09  27  ,clse-avg16 ca16
00:49:09  28  ,clse-avg18 ca18
00:49:09  29  -- clse relation to moving-max
00:49:09  30  ,clse-max4  cx4
00:49:09  31  ,clse-max6  cx6
00:49:09  32  ,clse-max8  cx8
00:49:09  33  ,clse-max10 cx10
00:49:09  34  ,clse-max12 cx12
00:49:09  35  ,clse-max14 cx14
00:49:09  36  ,clse-max16 cx16
00:49:09  37  ,clse-max18 cx18
00:49:09  38  -- Derive more attributes.
00:49:09  39  -- I want to use CORR() here to help SVM see the shape of the series.
00:49:09  40  -- But COVAR_POP is more stable:
00:49:09  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
00:49:09  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
00:49:09  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
00:49:09  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
00:49:09  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
00:49:09  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
00:49:09  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
00:49:09  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
00:49:09  49  -- Derive date related attributes:
00:49:09  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
00:49:09  51  ,0+TO_CHAR(ydate,'D')d
00:49:09  52  ,0+TO_CHAR(ydate,'W')w
00:49:09  53  -- mpm stands for minutes-past-midnight:
00:49:09  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
00:49:09  55  -- mph stands for minutes-past-hour:
00:49:09  56  ,0+TO_CHAR(ydate,'MI')mph
00:49:09  57  FROM svm6102
00:49:09  58  ORDER BY ydate
00:49:09  59  /

Table created.

Elapsed: 00:00:02.02
00:49:11 SQL> 
00:49:11 SQL> -- rpt
00:49:11 SQL> 
00:49:11 SQL> SELECT
00:49:11   2  pair
00:49:11   3  ,COUNT(pair)
00:49:11   4  ,MIN(clse),MAX(clse)
00:49:11   5  ,MIN(ydate),MAX(ydate)
00:49:11   6  FROM svm6122
00:49:11   7  GROUP BY pair
00:49:11   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_cad       19256    .992825	   1.0355 2010-09-30 00:50:01 2011-01-03 00:40:00

Elapsed: 00:00:00.18
00:49:11 SQL> 
00:49:11 SQL> -- Prepare for derivation of NTILE based params:
00:49:11 SQL> 
00:49:11 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.29
00:49:11 SQL> CREATE TABLE svm6142 COMPRESS AS
00:49:11   2  SELECT
00:49:11   3  pair
00:49:11   4  ,ydate
00:49:11   5  ,prdate
00:49:11   6  ,clse
00:49:11   7  ,g6
00:49:11   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
00:49:11   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
00:49:11  10  ,CASE WHEN trend IS NULL THEN 1
00:49:11  11  	    WHEN trend =0      THEN 1
00:49:11  12  	    ELSE trend END trend
00:49:11  13  ,cm4
00:49:11  14  ,cm6
00:49:11  15  ,cm8
00:49:11  16  ,cm10
00:49:11  17  ,cm12
00:49:11  18  ,cm14
00:49:11  19  ,cm16
00:49:11  20  ,cm18
00:49:11  21  --
00:49:11  22  ,ca4
00:49:11  23  ,ca6
00:49:11  24  ,ca8
00:49:11  25  ,ca10
00:49:11  26  ,ca12
00:49:11  27  ,ca14
00:49:11  28  ,ca16
00:49:11  29  ,ca18
00:49:11  30  --
00:49:11  31  ,cx4
00:49:11  32  ,cx6
00:49:11  33  ,cx8
00:49:11  34  ,cx10
00:49:11  35  ,cx12
00:49:11  36  ,cx14
00:49:11  37  ,cx16
00:49:11  38  ,cx18
00:49:11  39  --
00:49:11  40  ,crr4
00:49:11  41  ,crr6
00:49:11  42  ,crr8
00:49:11  43  ,crr10
00:49:11  44  ,crr12
00:49:11  45  ,crr14
00:49:11  46  ,crr16
00:49:11  47  ,crr18
00:49:11  48  --
00:49:11  49  ,hh
00:49:11  50  ,d
00:49:11  51  ,w
00:49:11  52  ,mpm
00:49:11  53  ,mph
00:49:11  54  FROM svm6122
00:49:11  55  ORDER BY ydate
00:49:11  56  /

Table created.

Elapsed: 00:00:00.38
00:49:12 SQL> 
00:49:12 SQL> -- rpt
00:49:12 SQL> 
00:49:12 SQL> SELECT
00:49:12   2  pair
00:49:12   3  ,trend
00:49:12   4  ,gatt
00:49:12   5  ,COUNT(pair)
00:49:12   6  ,AVG(g6)
00:49:12   7  FROM svm6142
00:49:12   8  GROUP BY pair,trend,gatt
00:49:12   9  ORDER BY pair,trend,gatt
00:49:12  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7277 -.00131429
usd_cad 	-1 up	      3000 .003056492
usd_cad 	-1		58
usd_cad 	 1 nup	      6602 -.00163265
usd_cad 	 1 up	      2305 .003653973
usd_cad 	 1		14

6 rows selected.

Elapsed: 00:00:00.07
00:49:12 SQL> 
00:49:12 SQL> 
00:49:12 SQL> -- Derive NTILE based params:
00:49:12 SQL> 
00:49:12 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.18
00:49:12 SQL> CREATE TABLE svm6162 COMPRESS AS
00:49:12   2  SELECT
00:49:12   3  pair
00:49:12   4  ,ydate
00:49:12   5  ,prdate
00:49:12   6  ,clse
00:49:12   7  ,g6
00:49:12   8  ,gatt
00:49:12   9  ,gattn
00:49:12  10  ,trend
00:49:12  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
00:49:12  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
00:49:12  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
00:49:12  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
00:49:12  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
00:49:12  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
00:49:12  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
00:49:12  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
00:49:12  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
00:49:12  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
00:49:12  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
00:49:12  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
00:49:12  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
00:49:12  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
00:49:12  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
00:49:12  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
00:49:12  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
00:49:12  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
00:49:12  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
00:49:12  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
00:49:12  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
00:49:12  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
00:49:12  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
00:49:12  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
00:49:12  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
00:49:12  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
00:49:12  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
00:49:12  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
00:49:12  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
00:49:12  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
00:49:12  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
00:49:12  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
00:49:12  43  ,hh  att32
00:49:12  44  ,d   att33
00:49:12  45  ,w   att34
00:49:12  46  ,mpm att35
00:49:12  47  ,mph att36
00:49:12  48  ,trend att37
00:49:12  49  FROM svm6142
00:49:12  50  ORDER BY ydate
00:49:12  51  /

Table created.

Elapsed: 00:00:04.88
00:49:17 SQL> 
00:49:17 SQL> -- rpt
00:49:17 SQL> 
00:49:17 SQL> SELECT
00:49:17   2  pair
00:49:17   3  ,trend
00:49:17   4  ,gatt
00:49:17   5  ,COUNT(pair)
00:49:17   6  ,AVG(g6)
00:49:17   7  FROM svm6162
00:49:17   8  GROUP BY pair,trend,gatt
00:49:17   9  ORDER BY pair,trend,gatt
00:49:17  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7277 -.00131429
usd_cad 	-1 up	      3000 .003056492
usd_cad 	-1		58
usd_cad 	 1 nup	      6602 -.00163265
usd_cad 	 1 up	      2305 .003653973
usd_cad 	 1		14

6 rows selected.

Elapsed: 00:00:00.07
00:49:17 SQL> 
00:49:17 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.18
00:49:17 SQL> CREATE TABLE modsrc COMPRESS AS
00:49:17   2  SELECT
00:49:17   3  pair
00:49:17   4  ,ydate
00:49:17   5  ,prdate
00:49:17   6  ,trend
00:49:17   7  ,g6
00:49:17   8  ,gatt
00:49:17   9  ,gattn
00:49:17  10  FROM svm6162
00:49:17  11  /

Table created.

Elapsed: 00:00:00.08
00:49:17 SQL> 
00:49:17 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
00:49:17 SQL> 
00:49:17 SQL> DROP   TABLE cad_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
00:49:17 SQL> CREATE TABLE cad_ms610 COMPRESS AS
00:49:17   2  SELECT
00:49:17   3  ydate
00:49:17   4  ,trend cad_trend
00:49:17   5  ,g6    cad_g6
00:49:17   6  ,gatt  cad_gatt
00:49:17   7  ,gattn cad_gattn
00:49:17   8  FROM modsrc
00:49:17   9  /

Table created.

Elapsed: 00:00:00.08
00:49:18 SQL> 
00:49:18 SQL> ANALYZE TABLE cad_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
00:49:18 SQL> 
00:49:18 SQL> -- I need a copy of the attributes:
00:49:18 SQL> 
00:49:18 SQL> 
00:49:18 SQL> DROP   TABLE cad_att;

Table dropped.

Elapsed: 00:00:00.04
00:49:18 SQL> CREATE TABLE cad_att COMPRESS AS
00:49:18   2  SELECT
00:49:18   3  ydate
00:49:18   4  ,att00 cad_att00
00:49:18   5  ,att01 cad_att01
00:49:18   6  ,att02 cad_att02
00:49:18   7  ,att03 cad_att03
00:49:18   8  ,att04 cad_att04
00:49:18   9  ,att05 cad_att05
00:49:18  10  ,att06 cad_att06
00:49:18  11  ,att07 cad_att07
00:49:18  12  ,att08 cad_att08
00:49:18  13  ,att09 cad_att09
00:49:18  14  ,att10 cad_att10
00:49:18  15  ,att11 cad_att11
00:49:18  16  ,att12 cad_att12
00:49:18  17  ,att13 cad_att13
00:49:18  18  ,att14 cad_att14
00:49:18  19  ,att15 cad_att15
00:49:18  20  ,att16 cad_att16
00:49:18  21  ,att17 cad_att17
00:49:18  22  ,att18 cad_att18
00:49:18  23  ,att19 cad_att19
00:49:18  24  ,att20 cad_att20
00:49:18  25  ,att21 cad_att21
00:49:18  26  ,att22 cad_att22
00:49:18  27  ,att23 cad_att23
00:49:18  28  ,att24 cad_att24
00:49:18  29  ,att25 cad_att25
00:49:18  30  ,att26 cad_att26
00:49:18  31  ,att27 cad_att27
00:49:18  32  ,att28 cad_att28
00:49:18  33  ,att29 cad_att29
00:49:18  34  ,att30 cad_att30
00:49:18  35  ,att31 cad_att31
00:49:18  36  ,att32 cad_att32
00:49:18  37  ,att33 cad_att33
00:49:18  38  ,att34 cad_att34
00:49:18  39  ,att35 cad_att35
00:49:18  40  ,att36 cad_att36
00:49:18  41  ,att37 cad_att37
00:49:18  42  FROM svm6162
00:49:18  43  /

Table created.

Elapsed: 00:00:00.17
00:49:18 SQL> 
00:49:18 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.49
00:49:18 SQL> 
00:49:18 SQL> -- rpt
00:49:18 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19256

Elapsed: 00:00:00.83
00:49:19 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
     19256

Elapsed: 00:00:00.00
00:49:19 SQL> 
00:49:19 SQL> --
00:49:19 SQL> -- chf610.sql
00:49:19 SQL> --
00:49:19 SQL> 
00:49:19 SQL> -- Creates views and tables for backtesting a forex SVM strategy
00:49:19 SQL> 
00:49:19 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:01.07
00:49:20 SQL> 
00:49:20 SQL> -- I created di5min here:
00:49:20 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
00:49:20 SQL> 
00:49:20 SQL> CREATE OR REPLACE VIEW svm6102 AS
00:49:20   2  SELECT
00:49:20   3  pair
00:49:20   4  ,ydate
00:49:20   5  ,prdate
00:49:20   6  ,rownum rnum -- acts as t in my time-series
00:49:20   7  ,clse
00:49:20   8  -- Derive a bunch of attributes from clse, the latest price:
00:49:20   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
00:49:20  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
00:49:20  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
00:49:20  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
00:49:20  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
00:49:20  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
00:49:20  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
00:49:20  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
00:49:20  17  --
00:49:20  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
00:49:20  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
00:49:20  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
00:49:20  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
00:49:20  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
00:49:20  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
00:49:20  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
00:49:20  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
00:49:20  26  --
00:49:20  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
00:49:20  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
00:49:20  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
00:49:20  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
00:49:20  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
00:49:20  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
00:49:20  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
00:49:20  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
00:49:20  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
00:49:20  36  FROM di5min WHERE pair LIKE'%chf%'
00:49:20  37  AND ydate > sysdate - 95
00:49:20  38  ORDER BY ydate
00:49:20  39  /

View created.

Elapsed: 00:00:00.11
00:49:20 SQL> 
00:49:20 SQL> -- rpt
00:49:20 SQL> 
00:49:20 SQL> SELECT
00:49:20   2  pair
00:49:20   3  ,COUNT(pair)
00:49:20   4  ,MIN(clse),MAX(clse)
00:49:20   5  ,MIN(avg6),MAX(avg6)
00:49:20   6  ,MIN(ydate),MAX(ydate)
00:49:20   7  FROM svm6102
00:49:20   8  GROUP BY pair
00:49:20   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_chf       19259    .931675	  1.00635 .933969692 1.00498151 2010-09-30 00:50:01 2011-01-03 00:40:00

Elapsed: 00:00:00.88
00:49:21 SQL> 
00:49:21 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
00:49:21 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.17
00:49:21 SQL> CREATE TABLE svm6122 COMPRESS AS
00:49:21   2  SELECT
00:49:21   3  pair
00:49:21   4  ,ydate
00:49:21   5  ,prdate
00:49:21   6  ,clse
00:49:21   7  -- g6 is important. I want to predict g6:
00:49:21   8  ,ld6 - clse g6
00:49:21   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
00:49:21  10  -- I want more attributes from the ones I derived above:
00:49:21  11  -- clse relation to moving-min
00:49:21  12  ,clse-min4  cm4
00:49:21  13  ,clse-min6  cm6
00:49:21  14  ,clse-min8  cm8
00:49:21  15  ,clse-min10 cm10
00:49:21  16  ,clse-min12 cm12
00:49:21  17  ,clse-min14 cm14
00:49:21  18  ,clse-min16 cm16
00:49:21  19  ,clse-min18 cm18
00:49:21  20  -- clse relation to moving-avg
00:49:21  21  ,clse-avg4  ca4
00:49:21  22  ,clse-avg6  ca6
00:49:21  23  ,clse-avg8  ca8
00:49:21  24  ,clse-avg10 ca10
00:49:21  25  ,clse-avg12 ca12
00:49:21  26  ,clse-avg14 ca14
00:49:21  27  ,clse-avg16 ca16
00:49:21  28  ,clse-avg18 ca18
00:49:21  29  -- clse relation to moving-max
00:49:21  30  ,clse-max4  cx4
00:49:21  31  ,clse-max6  cx6
00:49:21  32  ,clse-max8  cx8
00:49:21  33  ,clse-max10 cx10
00:49:21  34  ,clse-max12 cx12
00:49:21  35  ,clse-max14 cx14
00:49:21  36  ,clse-max16 cx16
00:49:21  37  ,clse-max18 cx18
00:49:22  38  -- Derive more attributes.
00:49:22  39  -- I want to use CORR() here to help SVM see the shape of the series.
00:49:22  40  -- But COVAR_POP is more stable:
00:49:22  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
00:49:22  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
00:49:22  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
00:49:22  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
00:49:22  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
00:49:22  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
00:49:22  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
00:49:22  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
00:49:22  49  -- Derive date related attributes:
00:49:22  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
00:49:22  51  ,0+TO_CHAR(ydate,'D')d
00:49:22  52  ,0+TO_CHAR(ydate,'W')w
00:49:22  53  -- mpm stands for minutes-past-midnight:
00:49:22  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
00:49:22  55  -- mph stands for minutes-past-hour:
00:49:22  56  ,0+TO_CHAR(ydate,'MI')mph
00:49:22  57  FROM svm6102
00:49:22  58  ORDER BY ydate
00:49:22  59  /

Table created.

Elapsed: 00:00:02.05
00:49:24 SQL> 
00:49:24 SQL> -- rpt
00:49:24 SQL> 
00:49:24 SQL> SELECT
00:49:24   2  pair
00:49:24   3  ,COUNT(pair)
00:49:24   4  ,MIN(clse),MAX(clse)
00:49:24   5  ,MIN(ydate),MAX(ydate)
00:49:24   6  FROM svm6122
00:49:24   7  GROUP BY pair
00:49:24   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_chf       19259    .931675	  1.00635 2010-09-30 00:50:01 2011-01-03 00:40:00

Elapsed: 00:00:00.04
00:49:24 SQL> 
00:49:24 SQL> -- Prepare for derivation of NTILE based params:
00:49:24 SQL> 
00:49:24 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.19
00:49:24 SQL> CREATE TABLE svm6142 COMPRESS AS
00:49:24   2  SELECT
00:49:24   3  pair
00:49:24   4  ,ydate
00:49:24   5  ,prdate
00:49:24   6  ,clse
00:49:24   7  ,g6
00:49:24   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
00:49:24   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
00:49:24  10  ,CASE WHEN trend IS NULL THEN 1
00:49:24  11  	    WHEN trend =0      THEN 1
00:49:24  12  	    ELSE trend END trend
00:49:24  13  ,cm4
00:49:24  14  ,cm6
00:49:24  15  ,cm8
00:49:24  16  ,cm10
00:49:24  17  ,cm12
00:49:24  18  ,cm14
00:49:24  19  ,cm16
00:49:24  20  ,cm18
00:49:24  21  --
00:49:24  22  ,ca4
00:49:24  23  ,ca6
00:49:24  24  ,ca8
00:49:24  25  ,ca10
00:49:24  26  ,ca12
00:49:24  27  ,ca14
00:49:24  28  ,ca16
00:49:24  29  ,ca18
00:49:24  30  --
00:49:24  31  ,cx4
00:49:24  32  ,cx6
00:49:24  33  ,cx8
00:49:24  34  ,cx10
00:49:24  35  ,cx12
00:49:24  36  ,cx14
00:49:24  37  ,cx16
00:49:24  38  ,cx18
00:49:24  39  --
00:49:24  40  ,crr4
00:49:24  41  ,crr6
00:49:24  42  ,crr8
00:49:24  43  ,crr10
00:49:24  44  ,crr12
00:49:24  45  ,crr14
00:49:24  46  ,crr16
00:49:24  47  ,crr18
00:49:24  48  --
00:49:24  49  ,hh
00:49:24  50  ,d
00:49:24  51  ,w
00:49:24  52  ,mpm
00:49:24  53  ,mph
00:49:24  54  FROM svm6122
00:49:24  55  ORDER BY ydate
00:49:24  56  /

Table created.

Elapsed: 00:00:00.40
00:49:24 SQL> 
00:49:24 SQL> -- rpt
00:49:24 SQL> 
00:49:24 SQL> SELECT
00:49:24   2  pair
00:49:24   3  ,trend
00:49:24   4  ,gatt
00:49:24   5  ,COUNT(pair)
00:49:24   6  ,AVG(g6)
00:49:24   7  FROM svm6142
00:49:24   8  GROUP BY pair,trend,gatt
00:49:24   9  ORDER BY pair,trend,gatt
00:49:24  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7199 -.00200226
usd_chf 	-1 up	      3083 .003951958
usd_chf 	-1		30
usd_chf 	 1 nup	      6359 -.00161941
usd_chf 	 1 up	      2546 .003701747
usd_chf 	 1		42

6 rows selected.

Elapsed: 00:00:00.07
00:49:24 SQL> 
00:49:24 SQL> 
00:49:24 SQL> -- Derive NTILE based params:
00:49:24 SQL> 
00:49:24 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.26
00:49:25 SQL> CREATE TABLE svm6162 COMPRESS AS
00:49:25   2  SELECT
00:49:25   3  pair
00:49:25   4  ,ydate
00:49:25   5  ,prdate
00:49:25   6  ,clse
00:49:25   7  ,g6
00:49:25   8  ,gatt
00:49:25   9  ,gattn
00:49:25  10  ,trend
00:49:25  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
00:49:25  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
00:49:25  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
00:49:25  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
00:49:25  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
00:49:25  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
00:49:25  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
00:49:25  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
00:49:25  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
00:49:25  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
00:49:25  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
00:49:25  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
00:49:25  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
00:49:25  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
00:49:25  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
00:49:25  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
00:49:25  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
00:49:25  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
00:49:25  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
00:49:25  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
00:49:25  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
00:49:25  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
00:49:25  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
00:49:25  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
00:49:25  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
00:49:25  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
00:49:25  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
00:49:25  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
00:49:25  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
00:49:25  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
00:49:25  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
00:49:25  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
00:49:25  43  ,hh  att32
00:49:25  44  ,d   att33
00:49:25  45  ,w   att34
00:49:25  46  ,mpm att35
00:49:25  47  ,mph att36
00:49:25  48  ,trend att37
00:49:25  49  FROM svm6142
00:49:25  50  ORDER BY ydate
00:49:25  51  /

Table created.

Elapsed: 00:00:04.71
00:49:29 SQL> 
00:49:29 SQL> -- rpt
00:49:29 SQL> 
00:49:29 SQL> SELECT
00:49:29   2  pair
00:49:29   3  ,trend
00:49:29   4  ,gatt
00:49:29   5  ,COUNT(pair)
00:49:29   6  ,AVG(g6)
00:49:29   7  FROM svm6162
00:49:29   8  GROUP BY pair,trend,gatt
00:49:29   9  ORDER BY pair,trend,gatt
00:49:29  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7199 -.00200226
usd_chf 	-1 up	      3083 .003951958
usd_chf 	-1		30
usd_chf 	 1 nup	      6359 -.00161941
usd_chf 	 1 up	      2546 .003701747
usd_chf 	 1		42

6 rows selected.

Elapsed: 00:00:00.03
00:49:29 SQL> 
00:49:29 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.27
00:49:30 SQL> CREATE TABLE modsrc COMPRESS AS
00:49:30   2  SELECT
00:49:30   3  pair
00:49:30   4  ,ydate
00:49:30   5  ,prdate
00:49:30   6  ,trend
00:49:30   7  ,g6
00:49:30   8  ,gatt
00:49:30   9  ,gattn
00:49:30  10  FROM svm6162
00:49:30  11  /

Table created.

Elapsed: 00:00:00.08
00:49:30 SQL> 
00:49:30 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
00:49:30 SQL> 
00:49:30 SQL> DROP   TABLE chf_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
00:49:30 SQL> CREATE TABLE chf_ms610 COMPRESS AS
00:49:30   2  SELECT
00:49:30   3  ydate
00:49:30   4  ,trend chf_trend
00:49:30   5  ,g6    chf_g6
00:49:30   6  ,gatt  chf_gatt
00:49:30   7  ,gattn chf_gattn
00:49:30   8  FROM modsrc
00:49:30   9  /

Table created.

Elapsed: 00:00:00.07
00:49:30 SQL> 
00:49:30 SQL> ANALYZE TABLE chf_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
00:49:30 SQL> 
00:49:30 SQL> -- I need a copy of the attributes:
00:49:30 SQL> 
00:49:30 SQL> 
00:49:30 SQL> DROP   TABLE chf_att;

Table dropped.

Elapsed: 00:00:00.04
00:49:30 SQL> CREATE TABLE chf_att COMPRESS AS
00:49:30   2  SELECT
00:49:30   3  ydate
00:49:30   4  ,att00 chf_att00
00:49:30   5  ,att01 chf_att01
00:49:30   6  ,att02 chf_att02
00:49:30   7  ,att03 chf_att03
00:49:30   8  ,att04 chf_att04
00:49:30   9  ,att05 chf_att05
00:49:30  10  ,att06 chf_att06
00:49:30  11  ,att07 chf_att07
00:49:30  12  ,att08 chf_att08
00:49:30  13  ,att09 chf_att09
00:49:30  14  ,att10 chf_att10
00:49:30  15  ,att11 chf_att11
00:49:30  16  ,att12 chf_att12
00:49:30  17  ,att13 chf_att13
00:49:30  18  ,att14 chf_att14
00:49:30  19  ,att15 chf_att15
00:49:30  20  ,att16 chf_att16
00:49:30  21  ,att17 chf_att17
00:49:30  22  ,att18 chf_att18
00:49:30  23  ,att19 chf_att19
00:49:30  24  ,att20 chf_att20
00:49:30  25  ,att21 chf_att21
00:49:30  26  ,att22 chf_att22
00:49:30  27  ,att23 chf_att23
00:49:30  28  ,att24 chf_att24
00:49:30  29  ,att25 chf_att25
00:49:30  30  ,att26 chf_att26
00:49:30  31  ,att27 chf_att27
00:49:30  32  ,att28 chf_att28
00:49:30  33  ,att29 chf_att29
00:49:30  34  ,att30 chf_att30
00:49:30  35  ,att31 chf_att31
00:49:30  36  ,att32 chf_att32
00:49:30  37  ,att33 chf_att33
00:49:30  38  ,att34 chf_att34
00:49:30  39  ,att35 chf_att35
00:49:30  40  ,att36 chf_att36
00:49:30  41  ,att37 chf_att37
00:49:30  42  FROM svm6162
00:49:30  43  /

Table created.

Elapsed: 00:00:00.18
00:49:30 SQL> 
00:49:30 SQL> ANALYZE TABLE chf_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.48
00:49:31 SQL> 
00:49:31 SQL> -- rpt
00:49:31 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19259

Elapsed: 00:00:00.83
00:49:32 SQL> SELECT COUNT(*)FROM chf_att;

  COUNT(*)
----------
     19259

Elapsed: 00:00:00.00
00:49:32 SQL> 
00:49:32 SQL> --
00:49:32 SQL> -- ech610.sql
00:49:32 SQL> --
00:49:32 SQL> 
00:49:32 SQL> -- Creates views and tables for backtesting a forex SVM strategy
00:49:32 SQL> 
00:49:32 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.86
00:49:32 SQL> 
00:49:32 SQL> -- I created di5min here:
00:49:32 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
00:49:32 SQL> 
00:49:32 SQL> CREATE OR REPLACE VIEW svm6102 AS
00:49:32   2  SELECT
00:49:32   3  pair
00:49:32   4  ,ydate
00:49:32   5  ,prdate
00:49:32   6  ,rownum rnum -- acts as t in my time-series
00:49:32   7  ,clse
00:49:32   8  -- Derive a bunch of attributes from clse, the latest price:
00:49:32   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
00:49:32  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
00:49:32  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
00:49:32  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
00:49:32  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
00:49:32  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
00:49:32  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
00:49:32  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
00:49:32  17  --
00:49:32  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
00:49:32  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
00:49:32  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
00:49:32  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
00:49:32  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
00:49:32  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
00:49:32  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
00:49:32  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
00:49:32  26  --
00:49:32  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
00:49:32  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
00:49:33  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
00:49:33  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
00:49:33  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
00:49:33  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
00:49:33  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
00:49:33  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
00:49:33  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
00:49:33  36  FROM di5min WHERE pair LIKE'%ech%'
00:49:33  37  AND ydate > sysdate - 95
00:49:33  38  ORDER BY ydate
00:49:33  39  /

View created.

Elapsed: 00:00:00.08
00:49:33 SQL> 
00:49:33 SQL> -- rpt
00:49:33 SQL> 
00:49:33 SQL> SELECT
00:49:33   2  pair
00:49:33   3  ,COUNT(pair)
00:49:33   4  ,MIN(clse),MAX(clse)
00:49:33   5  ,MIN(avg6),MAX(avg6)
00:49:33   6  ,MIN(ydate),MAX(ydate)
00:49:33   7  FROM svm6102
00:49:33   8  GROUP BY pair
00:49:33   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ech_usd       19258 1.24213032 1.38284305 1.24320424 1.37986485 2010-09-30 00:50:01 2011-01-03 00:40:00

Elapsed: 00:00:00.80
00:49:33 SQL> 
00:49:33 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
00:49:33 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.19
00:49:34 SQL> CREATE TABLE svm6122 COMPRESS AS
00:49:34   2  SELECT
00:49:34   3  pair
00:49:34   4  ,ydate
00:49:34   5  ,prdate
00:49:34   6  ,clse
00:49:34   7  -- g6 is important. I want to predict g6:
00:49:34   8  ,ld6 - clse g6
00:49:34   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
00:49:34  10  -- I want more attributes from the ones I derived above:
00:49:34  11  -- clse relation to moving-min
00:49:34  12  ,clse-min4  cm4
00:49:34  13  ,clse-min6  cm6
00:49:34  14  ,clse-min8  cm8
00:49:34  15  ,clse-min10 cm10
00:49:34  16  ,clse-min12 cm12
00:49:34  17  ,clse-min14 cm14
00:49:34  18  ,clse-min16 cm16
00:49:34  19  ,clse-min18 cm18
00:49:34  20  -- clse relation to moving-avg
00:49:34  21  ,clse-avg4  ca4
00:49:34  22  ,clse-avg6  ca6
00:49:34  23  ,clse-avg8  ca8
00:49:34  24  ,clse-avg10 ca10
00:49:34  25  ,clse-avg12 ca12
00:49:34  26  ,clse-avg14 ca14
00:49:34  27  ,clse-avg16 ca16
00:49:34  28  ,clse-avg18 ca18
00:49:34  29  -- clse relation to moving-max
00:49:34  30  ,clse-max4  cx4
00:49:34  31  ,clse-max6  cx6
00:49:34  32  ,clse-max8  cx8
00:49:34  33  ,clse-max10 cx10
00:49:34  34  ,clse-max12 cx12
00:49:34  35  ,clse-max14 cx14
00:49:34  36  ,clse-max16 cx16
00:49:34  37  ,clse-max18 cx18
00:49:34  38  -- Derive more attributes.
00:49:34  39  -- I want to use CORR() here to help SVM see the shape of the series.
00:49:34  40  -- But COVAR_POP is more stable:
00:49:34  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
00:49:34  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
00:49:34  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
00:49:34  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
00:49:34  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
00:49:34  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
00:49:34  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
00:49:34  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
00:49:34  49  -- Derive date related attributes:
00:49:34  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
00:49:34  51  ,0+TO_CHAR(ydate,'D')d
00:49:34  52  ,0+TO_CHAR(ydate,'W')w
00:49:34  53  -- mpm stands for minutes-past-midnight:
00:49:34  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
00:49:34  55  -- mph stands for minutes-past-hour:
00:49:34  56  ,0+TO_CHAR(ydate,'MI')mph
00:49:34  57  FROM svm6102
00:49:34  58  ORDER BY ydate
00:49:34  59  /

Table created.

Elapsed: 00:00:02.00
00:49:36 SQL> 
00:49:36 SQL> -- rpt
00:49:36 SQL> 
00:49:36 SQL> SELECT
00:49:36   2  pair
00:49:36   3  ,COUNT(pair)
00:49:36   4  ,MIN(clse),MAX(clse)
00:49:36   5  ,MIN(ydate),MAX(ydate)
00:49:36   6  FROM svm6122
00:49:36   7  GROUP BY pair
00:49:36   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ech_usd       19258 1.24213032 1.38284305 2010-09-30 00:50:01 2011-01-03 00:40:00

Elapsed: 00:00:00.04
00:49:36 SQL> 
00:49:36 SQL> -- Prepare for derivation of NTILE based params:
00:49:36 SQL> 
00:49:36 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.22
00:49:36 SQL> CREATE TABLE svm6142 COMPRESS AS
00:49:36   2  SELECT
00:49:36   3  pair
00:49:36   4  ,ydate
00:49:36   5  ,prdate
00:49:36   6  ,clse
00:49:36   7  ,g6
00:49:36   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
00:49:36   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
00:49:36  10  ,CASE WHEN trend IS NULL THEN 1
00:49:36  11  	    WHEN trend =0      THEN 1
00:49:36  12  	    ELSE trend END trend
00:49:36  13  ,cm4
00:49:36  14  ,cm6
00:49:36  15  ,cm8
00:49:36  16  ,cm10
00:49:36  17  ,cm12
00:49:36  18  ,cm14
00:49:36  19  ,cm16
00:49:36  20  ,cm18
00:49:36  21  --
00:49:36  22  ,ca4
00:49:36  23  ,ca6
00:49:36  24  ,ca8
00:49:36  25  ,ca10
00:49:36  26  ,ca12
00:49:36  27  ,ca14
00:49:36  28  ,ca16
00:49:36  29  ,ca18
00:49:36  30  --
00:49:36  31  ,cx4
00:49:36  32  ,cx6
00:49:36  33  ,cx8
00:49:36  34  ,cx10
00:49:36  35  ,cx12
00:49:36  36  ,cx14
00:49:36  37  ,cx16
00:49:36  38  ,cx18
00:49:36  39  --
00:49:36  40  ,crr4
00:49:36  41  ,crr6
00:49:36  42  ,crr8
00:49:36  43  ,crr10
00:49:36  44  ,crr12
00:49:36  45  ,crr14
00:49:36  46  ,crr16
00:49:36  47  ,crr18
00:49:36  48  --
00:49:36  49  ,hh
00:49:36  50  ,d
00:49:36  51  ,w
00:49:36  52  ,mpm
00:49:36  53  ,mph
00:49:36  54  FROM svm6122
00:49:36  55  ORDER BY ydate
00:49:36  56  /

Table created.

Elapsed: 00:00:00.43
00:49:36 SQL> 
00:49:36 SQL> -- rpt
00:49:36 SQL> 
00:49:36 SQL> SELECT
00:49:36   2  pair
00:49:36   3  ,trend
00:49:36   4  ,gatt
00:49:36   5  ,COUNT(pair)
00:49:36   6  ,AVG(g6)
00:49:36   7  FROM svm6142
00:49:36   8  GROUP BY pair,trend,gatt
00:49:36   9  ORDER BY pair,trend,gatt
00:49:36  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6483 -.00223703
ech_usd 	-1 up	      3538 .003550081
ech_usd 	-1		55
ech_usd 	 1 nup	      6308  -.0023724
ech_usd 	 1 up	      2857 .003864232
ech_usd 	 1		17

6 rows selected.

Elapsed: 00:00:00.11
00:49:36 SQL> 
00:49:36 SQL> 
00:49:36 SQL> -- Derive NTILE based params:
00:49:36 SQL> 
00:49:36 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.26
00:49:37 SQL> CREATE TABLE svm6162 COMPRESS AS
00:49:37   2  SELECT
00:49:37   3  pair
00:49:37   4  ,ydate
00:49:37   5  ,prdate
00:49:37   6  ,clse
00:49:37   7  ,g6
00:49:37   8  ,gatt
00:49:37   9  ,gattn
00:49:37  10  ,trend
00:49:37  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
00:49:37  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
00:49:37  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
00:49:37  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
00:49:37  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
00:49:37  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
00:49:37  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
00:49:37  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
00:49:37  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
00:49:37  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
00:49:37  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
00:49:37  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
00:49:37  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
00:49:37  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
00:49:37  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
00:49:37  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
00:49:37  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
00:49:37  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
00:49:37  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
00:49:37  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
00:49:37  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
00:49:37  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
00:49:37  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
00:49:37  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
00:49:37  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
00:49:37  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
00:49:37  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
00:49:37  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
00:49:37  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
00:49:37  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
00:49:37  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
00:49:37  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
00:49:37  43  ,hh  att32
00:49:37  44  ,d   att33
00:49:37  45  ,w   att34
00:49:37  46  ,mpm att35
00:49:37  47  ,mph att36
00:49:37  48  ,trend att37
00:49:37  49  FROM svm6142
00:49:37  50  ORDER BY ydate
00:49:37  51  /

Table created.

Elapsed: 00:00:04.76
00:49:41 SQL> 
00:49:41 SQL> -- rpt
00:49:41 SQL> 
00:49:41 SQL> SELECT
00:49:41   2  pair
00:49:41   3  ,trend
00:49:41   4  ,gatt
00:49:41   5  ,COUNT(pair)
00:49:41   6  ,AVG(g6)
00:49:41   7  FROM svm6162
00:49:41   8  GROUP BY pair,trend,gatt
00:49:41   9  ORDER BY pair,trend,gatt
00:49:41  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6483 -.00223703
ech_usd 	-1 up	      3538 .003550081
ech_usd 	-1		55
ech_usd 	 1 nup	      6308  -.0023724
ech_usd 	 1 up	      2857 .003864232
ech_usd 	 1		17

6 rows selected.

Elapsed: 00:00:00.03
00:49:41 SQL> 
00:49:41 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.10
00:49:42 SQL> CREATE TABLE modsrc COMPRESS AS
00:49:42   2  SELECT
00:49:42   3  pair
00:49:42   4  ,ydate
00:49:42   5  ,prdate
00:49:42   6  ,trend
00:49:42   7  ,g6
00:49:42   8  ,gatt
00:49:42   9  ,gattn
00:49:42  10  FROM svm6162
00:49:42  11  /

Table created.

Elapsed: 00:00:00.07
00:49:42 SQL> 
00:49:42 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
00:49:42 SQL> 
00:49:42 SQL> DROP   TABLE ech_ms610 ;

Table dropped.

Elapsed: 00:00:00.07
00:49:42 SQL> CREATE TABLE ech_ms610 COMPRESS AS
00:49:42   2  SELECT
00:49:42   3  ydate
00:49:42   4  ,trend ech_trend
00:49:42   5  ,g6    ech_g6
00:49:42   6  ,gatt  ech_gatt
00:49:42   7  ,gattn ech_gattn
00:49:42   8  FROM modsrc
00:49:42   9  /

Table created.

Elapsed: 00:00:00.07
00:49:42 SQL> 
00:49:42 SQL> ANALYZE TABLE ech_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
00:49:42 SQL> 
00:49:42 SQL> -- I need a copy of the attributes:
00:49:42 SQL> 
00:49:42 SQL> 
00:49:42 SQL> DROP   TABLE ech_att;

Table dropped.

Elapsed: 00:00:00.06
00:49:42 SQL> CREATE TABLE ech_att COMPRESS AS
00:49:42   2  SELECT
00:49:42   3  ydate
00:49:42   4  ,att00 ech_att00
00:49:42   5  ,att01 ech_att01
00:49:42   6  ,att02 ech_att02
00:49:42   7  ,att03 ech_att03
00:49:42   8  ,att04 ech_att04
00:49:42   9  ,att05 ech_att05
00:49:42  10  ,att06 ech_att06
00:49:42  11  ,att07 ech_att07
00:49:42  12  ,att08 ech_att08
00:49:42  13  ,att09 ech_att09
00:49:42  14  ,att10 ech_att10
00:49:42  15  ,att11 ech_att11
00:49:42  16  ,att12 ech_att12
00:49:42  17  ,att13 ech_att13
00:49:42  18  ,att14 ech_att14
00:49:42  19  ,att15 ech_att15
00:49:42  20  ,att16 ech_att16
00:49:42  21  ,att17 ech_att17
00:49:42  22  ,att18 ech_att18
00:49:42  23  ,att19 ech_att19
00:49:42  24  ,att20 ech_att20
00:49:42  25  ,att21 ech_att21
00:49:42  26  ,att22 ech_att22
00:49:42  27  ,att23 ech_att23
00:49:42  28  ,att24 ech_att24
00:49:42  29  ,att25 ech_att25
00:49:42  30  ,att26 ech_att26
00:49:42  31  ,att27 ech_att27
00:49:42  32  ,att28 ech_att28
00:49:42  33  ,att29 ech_att29
00:49:42  34  ,att30 ech_att30
00:49:42  35  ,att31 ech_att31
00:49:42  36  ,att32 ech_att32
00:49:42  37  ,att33 ech_att33
00:49:42  38  ,att34 ech_att34
00:49:42  39  ,att35 ech_att35
00:49:42  40  ,att36 ech_att36
00:49:42  41  ,att37 ech_att37
00:49:42  42  FROM svm6162
00:49:42  43  /

Table created.

Elapsed: 00:00:00.18
00:49:42 SQL> 
00:49:42 SQL> ANALYZE TABLE ech_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.48
00:49:43 SQL> 
00:49:43 SQL> -- rpt
00:49:43 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19258

Elapsed: 00:00:00.81
00:49:44 SQL> SELECT COUNT(*)FROM ech_att;

  COUNT(*)
----------
     19258

Elapsed: 00:00:00.01
00:49:44 SQL> 
00:49:44 SQL> --
00:49:44 SQL> -- egb610.sql
00:49:44 SQL> --
00:49:44 SQL> 
00:49:44 SQL> -- Creates views and tables for backtesting a forex SVM strategy
00:49:44 SQL> 
00:49:44 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.40
00:49:44 SQL> 
00:49:44 SQL> -- I created di5min here:
00:49:44 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
00:49:44 SQL> 
00:49:44 SQL> CREATE OR REPLACE VIEW svm6102 AS
00:49:44   2  SELECT
00:49:44   3  pair
00:49:44   4  ,ydate
00:49:44   5  ,prdate
00:49:44   6  ,rownum rnum -- acts as t in my time-series
00:49:44   7  ,clse
00:49:44   8  -- Derive a bunch of attributes from clse, the latest price:
00:49:44   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
00:49:44  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
00:49:44  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
00:49:44  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
00:49:44  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
00:49:44  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
00:49:44  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
00:49:44  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
00:49:44  17  --
00:49:44  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
00:49:44  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
00:49:44  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
00:49:44  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
00:49:44  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
00:49:44  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
00:49:44  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
00:49:44  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
00:49:44  26  --
00:49:44  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
00:49:44  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
00:49:44  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
00:49:44  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
00:49:44  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
00:49:44  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
00:49:44  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
00:49:44  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
00:49:44  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
00:49:44  36  FROM di5min WHERE pair LIKE'%egb%'
00:49:44  37  AND ydate > sysdate - 95
00:49:44  38  ORDER BY ydate
00:49:44  39  /

View created.

Elapsed: 00:00:00.05
00:49:44 SQL> 
00:49:44 SQL> -- rpt
00:49:44 SQL> 
00:49:44 SQL> SELECT
00:49:44   2  pair
00:49:44   3  ,COUNT(pair)
00:49:44   4  ,MIN(clse),MAX(clse)
00:49:44   5  ,MIN(avg6),MAX(avg6)
00:49:44   6  ,MIN(ydate),MAX(ydate)
00:49:44   7  FROM svm6102
00:49:44   8  GROUP BY pair
00:49:44   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
egb_usd       19257 .833520557 .893920122 .834199029 .892400287 2010-09-30 00:50:01 2011-01-03 00:40:00

Elapsed: 00:00:00.92
00:49:45 SQL> 
00:49:45 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
00:49:45 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.19
00:49:45 SQL> CREATE TABLE svm6122 COMPRESS AS
00:49:45   2  SELECT
00:49:45   3  pair
00:49:45   4  ,ydate
00:49:45   5  ,prdate
00:49:45   6  ,clse
00:49:45   7  -- g6 is important. I want to predict g6:
00:49:45   8  ,ld6 - clse g6
00:49:45   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
00:49:45  10  -- I want more attributes from the ones I derived above:
00:49:45  11  -- clse relation to moving-min
00:49:45  12  ,clse-min4  cm4
00:49:45  13  ,clse-min6  cm6
00:49:45  14  ,clse-min8  cm8
00:49:45  15  ,clse-min10 cm10
00:49:45  16  ,clse-min12 cm12
00:49:45  17  ,clse-min14 cm14
00:49:45  18  ,clse-min16 cm16
00:49:45  19  ,clse-min18 cm18
00:49:45  20  -- clse relation to moving-avg
00:49:45  21  ,clse-avg4  ca4
00:49:45  22  ,clse-avg6  ca6
00:49:45  23  ,clse-avg8  ca8
00:49:45  24  ,clse-avg10 ca10
00:49:45  25  ,clse-avg12 ca12
00:49:45  26  ,clse-avg14 ca14
00:49:45  27  ,clse-avg16 ca16
00:49:45  28  ,clse-avg18 ca18
00:49:45  29  -- clse relation to moving-max
00:49:45  30  ,clse-max4  cx4
00:49:45  31  ,clse-max6  cx6
00:49:45  32  ,clse-max8  cx8
00:49:45  33  ,clse-max10 cx10
00:49:45  34  ,clse-max12 cx12
00:49:45  35  ,clse-max14 cx14
00:49:45  36  ,clse-max16 cx16
00:49:45  37  ,clse-max18 cx18
00:49:45  38  -- Derive more attributes.
00:49:45  39  -- I want to use CORR() here to help SVM see the shape of the series.
00:49:45  40  -- But COVAR_POP is more stable:
00:49:45  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
00:49:45  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
00:49:45  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
00:49:45  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
00:49:45  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
00:49:45  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
00:49:45  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
00:49:45  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
00:49:45  49  -- Derive date related attributes:
00:49:45  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
00:49:45  51  ,0+TO_CHAR(ydate,'D')d
00:49:45  52  ,0+TO_CHAR(ydate,'W')w
00:49:45  53  -- mpm stands for minutes-past-midnight:
00:49:45  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
00:49:45  55  -- mph stands for minutes-past-hour:
00:49:45  56  ,0+TO_CHAR(ydate,'MI')mph
00:49:45  57  FROM svm6102
00:49:45  58  ORDER BY ydate
00:49:45  59  /

Table created.

Elapsed: 00:00:02.46
00:49:48 SQL> 
00:49:48 SQL> -- rpt
00:49:48 SQL> 
00:49:48 SQL> SELECT
00:49:48   2  pair
00:49:48   3  ,COUNT(pair)
00:49:48   4  ,MIN(clse),MAX(clse)
00:49:48   5  ,MIN(ydate),MAX(ydate)
00:49:48   6  FROM svm6122
00:49:48   7  GROUP BY pair
00:49:48   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
egb_usd       19257 .833520557 .893920122 2010-09-30 00:50:01 2011-01-03 00:40:00

Elapsed: 00:00:00.14
00:49:48 SQL> 
00:49:48 SQL> -- Prepare for derivation of NTILE based params:
00:49:48 SQL> 
00:49:48 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.31
00:49:48 SQL> CREATE TABLE svm6142 COMPRESS AS
00:49:48   2  SELECT
00:49:48   3  pair
00:49:48   4  ,ydate
00:49:48   5  ,prdate
00:49:48   6  ,clse
00:49:48   7  ,g6
00:49:48   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
00:49:48   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
00:49:48  10  ,CASE WHEN trend IS NULL THEN 1
00:49:48  11  	    WHEN trend =0      THEN 1
00:49:48  12  	    ELSE trend END trend
00:49:48  13  ,cm4
00:49:48  14  ,cm6
00:49:48  15  ,cm8
00:49:48  16  ,cm10
00:49:48  17  ,cm12
00:49:48  18  ,cm14
00:49:48  19  ,cm16
00:49:48  20  ,cm18
00:49:48  21  --
00:49:48  22  ,ca4
00:49:48  23  ,ca6
00:49:48  24  ,ca8
00:49:48  25  ,ca10
00:49:48  26  ,ca12
00:49:48  27  ,ca14
00:49:48  28  ,ca16
00:49:48  29  ,ca18
00:49:48  30  --
00:49:48  31  ,cx4
00:49:48  32  ,cx6
00:49:48  33  ,cx8
00:49:48  34  ,cx10
00:49:48  35  ,cx12
00:49:48  36  ,cx14
00:49:48  37  ,cx16
00:49:48  38  ,cx18
00:49:48  39  --
00:49:48  40  ,crr4
00:49:48  41  ,crr6
00:49:48  42  ,crr8
00:49:48  43  ,crr10
00:49:48  44  ,crr12
00:49:48  45  ,crr14
00:49:48  46  ,crr16
00:49:48  47  ,crr18
00:49:48  48  --
00:49:48  49  ,hh
00:49:48  50  ,d
00:49:48  51  ,w
00:49:48  52  ,mpm
00:49:48  53  ,mph
00:49:48  54  FROM svm6122
00:49:48  55  ORDER BY ydate
00:49:48  56  /

Table created.

Elapsed: 00:00:00.42
00:49:49 SQL> 
00:49:49 SQL> -- rpt
00:49:49 SQL> 
00:49:49 SQL> SELECT
00:49:49   2  pair
00:49:49   3  ,trend
00:49:49   4  ,gatt
00:49:49   5  ,COUNT(pair)
00:49:49   6  ,AVG(g6)
00:49:49   7  FROM svm6142
00:49:49   8  GROUP BY pair,trend,gatt
00:49:49   9  ORDER BY pair,trend,gatt
00:49:49  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7300 -.00099582
egb_usd 	-1 up	      2667 .002927443
egb_usd 	-1		60
egb_usd 	 1 nup	      6549 -.00131102
egb_usd 	 1 up	      2669 .002969478
egb_usd 	 1		12

6 rows selected.

Elapsed: 00:00:00.05
00:49:49 SQL> 
00:49:49 SQL> 
00:49:49 SQL> -- Derive NTILE based params:
00:49:49 SQL> 
00:49:49 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.21
00:49:49 SQL> CREATE TABLE svm6162 COMPRESS AS
00:49:49   2  SELECT
00:49:49   3  pair
00:49:49   4  ,ydate
00:49:49   5  ,prdate
00:49:49   6  ,clse
00:49:49   7  ,g6
00:49:49   8  ,gatt
00:49:49   9  ,gattn
00:49:49  10  ,trend
00:49:49  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
00:49:49  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
00:49:49  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
00:49:49  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
00:49:49  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
00:49:49  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
00:49:49  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
00:49:49  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
00:49:49  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
00:49:49  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
00:49:49  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
00:49:49  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
00:49:49  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
00:49:49  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
00:49:49  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
00:49:49  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
00:49:49  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
00:49:49  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
00:49:49  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
00:49:49  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
00:49:49  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
00:49:49  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
00:49:49  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
00:49:49  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
00:49:49  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
00:49:49  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
00:49:49  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
00:49:49  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
00:49:49  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
00:49:49  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
00:49:49  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
00:49:49  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
00:49:49  43  ,hh  att32
00:49:49  44  ,d   att33
00:49:49  45  ,w   att34
00:49:49  46  ,mpm att35
00:49:49  47  ,mph att36
00:49:49  48  ,trend att37
00:49:49  49  FROM svm6142
00:49:49  50  ORDER BY ydate
00:49:49  51  /

Table created.

Elapsed: 00:00:05.47
00:49:54 SQL> 
00:49:54 SQL> -- rpt
00:49:54 SQL> 
00:49:54 SQL> SELECT
00:49:54   2  pair
00:49:54   3  ,trend
00:49:54   4  ,gatt
00:49:54   5  ,COUNT(pair)
00:49:54   6  ,AVG(g6)
00:49:54   7  FROM svm6162
00:49:54   8  GROUP BY pair,trend,gatt
00:49:54   9  ORDER BY pair,trend,gatt
00:49:54  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7300 -.00099582
egb_usd 	-1 up	      2667 .002927443
egb_usd 	-1		60
egb_usd 	 1 nup	      6549 -.00131102
egb_usd 	 1 up	      2669 .002969478
egb_usd 	 1		12

6 rows selected.

Elapsed: 00:00:00.03
00:49:54 SQL> 
00:49:54 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.35
00:49:55 SQL> CREATE TABLE modsrc COMPRESS AS
00:49:55   2  SELECT
00:49:55   3  pair
00:49:55   4  ,ydate
00:49:55   5  ,prdate
00:49:55   6  ,trend
00:49:55   7  ,g6
00:49:55   8  ,gatt
00:49:55   9  ,gattn
00:49:55  10  FROM svm6162
00:49:55  11  /

Table created.

Elapsed: 00:00:00.09
00:49:55 SQL> 
00:49:55 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.25
00:49:55 SQL> 
00:49:55 SQL> DROP   TABLE egb_ms610 ;

Table dropped.

Elapsed: 00:00:00.06
00:49:55 SQL> CREATE TABLE egb_ms610 COMPRESS AS
00:49:55   2  SELECT
00:49:55   3  ydate
00:49:55   4  ,trend egb_trend
00:49:55   5  ,g6    egb_g6
00:49:55   6  ,gatt  egb_gatt
00:49:55   7  ,gattn egb_gattn
00:49:55   8  FROM modsrc
00:49:55   9  /

Table created.

Elapsed: 00:00:00.06
00:49:55 SQL> 
00:49:55 SQL> ANALYZE TABLE egb_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
00:49:55 SQL> 
00:49:55 SQL> -- I need a copy of the attributes:
00:49:55 SQL> 
00:49:55 SQL> 
00:49:55 SQL> DROP   TABLE egb_att;

Table dropped.

Elapsed: 00:00:00.05
00:49:55 SQL> CREATE TABLE egb_att COMPRESS AS
00:49:55   2  SELECT
00:49:55   3  ydate
00:49:55   4  ,att00 egb_att00
00:49:55   5  ,att01 egb_att01
00:49:55   6  ,att02 egb_att02
00:49:55   7  ,att03 egb_att03
00:49:55   8  ,att04 egb_att04
00:49:55   9  ,att05 egb_att05
00:49:55  10  ,att06 egb_att06
00:49:55  11  ,att07 egb_att07
00:49:55  12  ,att08 egb_att08
00:49:55  13  ,att09 egb_att09
00:49:55  14  ,att10 egb_att10
00:49:55  15  ,att11 egb_att11
00:49:55  16  ,att12 egb_att12
00:49:55  17  ,att13 egb_att13
00:49:55  18  ,att14 egb_att14
00:49:55  19  ,att15 egb_att15
00:49:55  20  ,att16 egb_att16
00:49:55  21  ,att17 egb_att17
00:49:55  22  ,att18 egb_att18
00:49:55  23  ,att19 egb_att19
00:49:55  24  ,att20 egb_att20
00:49:55  25  ,att21 egb_att21
00:49:55  26  ,att22 egb_att22
00:49:55  27  ,att23 egb_att23
00:49:55  28  ,att24 egb_att24
00:49:55  29  ,att25 egb_att25
00:49:55  30  ,att26 egb_att26
00:49:55  31  ,att27 egb_att27
00:49:55  32  ,att28 egb_att28
00:49:55  33  ,att29 egb_att29
00:49:55  34  ,att30 egb_att30
00:49:55  35  ,att31 egb_att31
00:49:55  36  ,att32 egb_att32
00:49:55  37  ,att33 egb_att33
00:49:55  38  ,att34 egb_att34
00:49:55  39  ,att35 egb_att35
00:49:55  40  ,att36 egb_att36
00:49:55  41  ,att37 egb_att37
00:49:55  42  FROM svm6162
00:49:55  43  /

Table created.

Elapsed: 00:00:00.16
00:49:56 SQL> 
00:49:56 SQL> ANALYZE TABLE egb_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.50
00:49:56 SQL> 
00:49:56 SQL> -- rpt
00:49:56 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19257

Elapsed: 00:00:00.94
00:49:57 SQL> SELECT COUNT(*)FROM egb_att;

  COUNT(*)
----------
     19257

Elapsed: 00:00:00.00
00:49:57 SQL> 
00:49:57 SQL> --
00:49:57 SQL> -- ejp610.sql
00:49:57 SQL> --
00:49:57 SQL> 
00:49:57 SQL> -- Creates views and tables for backtesting a forex SVM strategy
00:49:57 SQL> 
00:49:57 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.56
00:49:58 SQL> 
00:49:58 SQL> -- I created di5min here:
00:49:58 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
00:49:58 SQL> 
00:49:58 SQL> CREATE OR REPLACE VIEW svm6102 AS
00:49:58   2  SELECT
00:49:58   3  pair
00:49:58   4  ,ydate
00:49:58   5  ,prdate
00:49:58   6  ,rownum rnum -- acts as t in my time-series
00:49:58   7  ,clse
00:49:58   8  -- Derive a bunch of attributes from clse, the latest price:
00:49:58   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
00:49:58  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
00:49:58  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
00:49:58  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
00:49:58  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
00:49:58  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
00:49:58  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
00:49:58  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
00:49:58  17  --
00:49:58  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
00:49:58  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
00:49:58  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
00:49:58  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
00:49:58  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
00:49:58  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
00:49:58  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
00:49:58  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
00:49:58  26  --
00:49:58  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
00:49:58  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
00:49:58  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
00:49:58  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
00:49:58  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
00:49:58  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
00:49:58  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
00:49:58  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
00:49:58  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
00:49:58  36  FROM di5min WHERE pair LIKE'%ejp%'
00:49:58  37  AND ydate > sysdate - 95
00:49:58  38  ORDER BY ydate
00:49:58  39  /

View created.

Elapsed: 00:00:00.05
00:49:58 SQL> 
00:49:58 SQL> -- rpt
00:49:58 SQL> 
00:49:58 SQL> SELECT
00:49:58   2  pair
00:49:58   3  ,COUNT(pair)
00:49:58   4  ,MIN(clse),MAX(clse)
00:49:58   5  ,MIN(avg6),MAX(avg6)
00:49:58   6  ,MIN(ydate),MAX(ydate)
00:49:58   7  FROM svm6102
00:49:58   8  GROUP BY pair
00:49:58   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ejp_usd       19255 107.643765	115.63485 107.776148 115.509678 2010-09-30 00:50:01 2011-01-03 00:40:00

Elapsed: 00:00:00.83
00:49:58 SQL> 
00:49:58 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
00:49:58 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.20
00:49:59 SQL> CREATE TABLE svm6122 COMPRESS AS
00:49:59   2  SELECT
00:49:59   3  pair
00:49:59   4  ,ydate
00:49:59   5  ,prdate
00:49:59   6  ,clse
00:49:59   7  -- g6 is important. I want to predict g6:
00:49:59   8  ,ld6 - clse g6
00:49:59   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
00:49:59  10  -- I want more attributes from the ones I derived above:
00:49:59  11  -- clse relation to moving-min
00:49:59  12  ,clse-min4  cm4
00:49:59  13  ,clse-min6  cm6
00:49:59  14  ,clse-min8  cm8
00:49:59  15  ,clse-min10 cm10
00:49:59  16  ,clse-min12 cm12
00:49:59  17  ,clse-min14 cm14
00:49:59  18  ,clse-min16 cm16
00:49:59  19  ,clse-min18 cm18
00:49:59  20  -- clse relation to moving-avg
00:49:59  21  ,clse-avg4  ca4
00:49:59  22  ,clse-avg6  ca6
00:49:59  23  ,clse-avg8  ca8
00:49:59  24  ,clse-avg10 ca10
00:49:59  25  ,clse-avg12 ca12
00:49:59  26  ,clse-avg14 ca14
00:49:59  27  ,clse-avg16 ca16
00:49:59  28  ,clse-avg18 ca18
00:49:59  29  -- clse relation to moving-max
00:49:59  30  ,clse-max4  cx4
00:49:59  31  ,clse-max6  cx6
00:49:59  32  ,clse-max8  cx8
00:49:59  33  ,clse-max10 cx10
00:49:59  34  ,clse-max12 cx12
00:49:59  35  ,clse-max14 cx14
00:49:59  36  ,clse-max16 cx16
00:49:59  37  ,clse-max18 cx18
00:49:59  38  -- Derive more attributes.
00:49:59  39  -- I want to use CORR() here to help SVM see the shape of the series.
00:49:59  40  -- But COVAR_POP is more stable:
00:49:59  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
00:49:59  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
00:49:59  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
00:49:59  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
00:49:59  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
00:49:59  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
00:49:59  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
00:49:59  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
00:49:59  49  -- Derive date related attributes:
00:49:59  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
00:49:59  51  ,0+TO_CHAR(ydate,'D')d
00:49:59  52  ,0+TO_CHAR(ydate,'W')w
00:49:59  53  -- mpm stands for minutes-past-midnight:
00:49:59  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
00:49:59  55  -- mph stands for minutes-past-hour:
00:49:59  56  ,0+TO_CHAR(ydate,'MI')mph
00:49:59  57  FROM svm6102
00:49:59  58  ORDER BY ydate
00:49:59  59  /

Table created.

Elapsed: 00:00:02.09
00:50:01 SQL> 
00:50:01 SQL> -- rpt
00:50:01 SQL> 
00:50:01 SQL> SELECT
00:50:01   2  pair
00:50:01   3  ,COUNT(pair)
00:50:01   4  ,MIN(clse),MAX(clse)
00:50:01   5  ,MIN(ydate),MAX(ydate)
00:50:01   6  FROM svm6122
00:50:01   7  GROUP BY pair
00:50:01   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ejp_usd       19255 107.643765	115.63485 2010-09-30 00:50:01 2011-01-03 00:40:00

Elapsed: 00:00:00.03
00:50:01 SQL> 
00:50:01 SQL> -- Prepare for derivation of NTILE based params:
00:50:01 SQL> 
00:50:01 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.20
00:50:01 SQL> CREATE TABLE svm6142 COMPRESS AS
00:50:01   2  SELECT
00:50:01   3  pair
00:50:01   4  ,ydate
00:50:01   5  ,prdate
00:50:01   6  ,clse
00:50:01   7  ,g6
00:50:01   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
00:50:01   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
00:50:01  10  ,CASE WHEN trend IS NULL THEN 1
00:50:01  11  	    WHEN trend =0      THEN 1
00:50:01  12  	    ELSE trend END trend
00:50:01  13  ,cm4
00:50:01  14  ,cm6
00:50:01  15  ,cm8
00:50:01  16  ,cm10
00:50:01  17  ,cm12
00:50:01  18  ,cm14
00:50:01  19  ,cm16
00:50:01  20  ,cm18
00:50:01  21  --
00:50:01  22  ,ca4
00:50:01  23  ,ca6
00:50:01  24  ,ca8
00:50:01  25  ,ca10
00:50:01  26  ,ca12
00:50:01  27  ,ca14
00:50:01  28  ,ca16
00:50:01  29  ,ca18
00:50:01  30  --
00:50:01  31  ,cx4
00:50:01  32  ,cx6
00:50:01  33  ,cx8
00:50:01  34  ,cx10
00:50:01  35  ,cx12
00:50:01  36  ,cx14
00:50:01  37  ,cx16
00:50:01  38  ,cx18
00:50:01  39  --
00:50:01  40  ,crr4
00:50:01  41  ,crr6
00:50:01  42  ,crr8
00:50:01  43  ,crr10
00:50:01  44  ,crr12
00:50:01  45  ,crr14
00:50:01  46  ,crr16
00:50:01  47  ,crr18
00:50:01  48  --
00:50:01  49  ,hh
00:50:01  50  ,d
00:50:01  51  ,w
00:50:01  52  ,mpm
00:50:01  53  ,mph
00:50:01  54  FROM svm6122
00:50:01  55  ORDER BY ydate
00:50:01  56  /

Table created.

Elapsed: 00:00:00.38
00:50:01 SQL> 
00:50:01 SQL> -- rpt
00:50:01 SQL> 
00:50:01 SQL> SELECT
00:50:01   2  pair
00:50:01   3  ,trend
00:50:01   4  ,gatt
00:50:01   5  ,COUNT(pair)
00:50:01   6  ,AVG(g6)
00:50:01   7  FROM svm6142
00:50:01   8  GROUP BY pair,trend,gatt
00:50:01   9  ORDER BY pair,trend,gatt
00:50:01  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      4800 -.32496454
ejp_usd 	-1 up	      4862 .269591113
ejp_usd 	-1		71
ejp_usd 	 1 nup	      4902 -.28960651
ejp_usd 	 1 up	      4619  .28079333
ejp_usd 	 1		 1

6 rows selected.

Elapsed: 00:00:00.03
00:50:01 SQL> 
00:50:01 SQL> 
00:50:01 SQL> -- Derive NTILE based params:
00:50:01 SQL> 
00:50:01 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.14
00:50:02 SQL> CREATE TABLE svm6162 COMPRESS AS
00:50:02   2  SELECT
00:50:02   3  pair
00:50:02   4  ,ydate
00:50:02   5  ,prdate
00:50:02   6  ,clse
00:50:02   7  ,g6
00:50:02   8  ,gatt
00:50:02   9  ,gattn
00:50:02  10  ,trend
00:50:02  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
00:50:02  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
00:50:02  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
00:50:02  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
00:50:02  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
00:50:02  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
00:50:02  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
00:50:02  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
00:50:02  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
00:50:02  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
00:50:02  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
00:50:02  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
00:50:02  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
00:50:02  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
00:50:02  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
00:50:02  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
00:50:02  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
00:50:02  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
00:50:02  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
00:50:02  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
00:50:02  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
00:50:02  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
00:50:02  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
00:50:02  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
00:50:02  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
00:50:02  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
00:50:02  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
00:50:02  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
00:50:02  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
00:50:02  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
00:50:02  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
00:50:02  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
00:50:02  43  ,hh  att32
00:50:02  44  ,d   att33
00:50:02  45  ,w   att34
00:50:02  46  ,mpm att35
00:50:02  47  ,mph att36
00:50:02  48  ,trend att37
00:50:02  49  FROM svm6142
00:50:02  50  ORDER BY ydate
00:50:02  51  /

Table created.

Elapsed: 00:00:05.02
00:50:07 SQL> 
00:50:07 SQL> -- rpt
00:50:07 SQL> 
00:50:07 SQL> SELECT
00:50:07   2  pair
00:50:07   3  ,trend
00:50:07   4  ,gatt
00:50:07   5  ,COUNT(pair)
00:50:07   6  ,AVG(g6)
00:50:07   7  FROM svm6162
00:50:07   8  GROUP BY pair,trend,gatt
00:50:07   9  ORDER BY pair,trend,gatt
00:50:07  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      4800 -.32496454
ejp_usd 	-1 up	      4862 .269591113
ejp_usd 	-1		71
ejp_usd 	 1 nup	      4902 -.28960651
ejp_usd 	 1 up	      4619  .28079333
ejp_usd 	 1		 1

6 rows selected.

Elapsed: 00:00:00.02
00:50:07 SQL> 
00:50:07 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
00:50:07 SQL> CREATE TABLE modsrc COMPRESS AS
00:50:07   2  SELECT
00:50:07   3  pair
00:50:07   4  ,ydate
00:50:07   5  ,prdate
00:50:07   6  ,trend
00:50:07   7  ,g6
00:50:07   8  ,gatt
00:50:07   9  ,gattn
00:50:07  10  FROM svm6162
00:50:07  11  /

Table created.

Elapsed: 00:00:00.08
00:50:07 SQL> 
00:50:07 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
00:50:07 SQL> 
00:50:07 SQL> DROP   TABLE ejp_ms610 ;

Table dropped.

Elapsed: 00:00:00.07
00:50:07 SQL> CREATE TABLE ejp_ms610 COMPRESS AS
00:50:07   2  SELECT
00:50:07   3  ydate
00:50:07   4  ,trend ejp_trend
00:50:07   5  ,g6    ejp_g6
00:50:07   6  ,gatt  ejp_gatt
00:50:07   7  ,gattn ejp_gattn
00:50:07   8  FROM modsrc
00:50:07   9  /

Table created.

Elapsed: 00:00:00.07
00:50:07 SQL> 
00:50:07 SQL> ANALYZE TABLE ejp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
00:50:07 SQL> 
00:50:07 SQL> -- I need a copy of the attributes:
00:50:07 SQL> 
00:50:07 SQL> 
00:50:07 SQL> DROP   TABLE ejp_att;

Table dropped.

Elapsed: 00:00:00.07
00:50:07 SQL> CREATE TABLE ejp_att COMPRESS AS
00:50:07   2  SELECT
00:50:07   3  ydate
00:50:07   4  ,att00 ejp_att00
00:50:07   5  ,att01 ejp_att01
00:50:07   6  ,att02 ejp_att02
00:50:07   7  ,att03 ejp_att03
00:50:07   8  ,att04 ejp_att04
00:50:07   9  ,att05 ejp_att05
00:50:07  10  ,att06 ejp_att06
00:50:07  11  ,att07 ejp_att07
00:50:07  12  ,att08 ejp_att08
00:50:07  13  ,att09 ejp_att09
00:50:07  14  ,att10 ejp_att10
00:50:07  15  ,att11 ejp_att11
00:50:07  16  ,att12 ejp_att12
00:50:07  17  ,att13 ejp_att13
00:50:07  18  ,att14 ejp_att14
00:50:07  19  ,att15 ejp_att15
00:50:07  20  ,att16 ejp_att16
00:50:07  21  ,att17 ejp_att17
00:50:07  22  ,att18 ejp_att18
00:50:07  23  ,att19 ejp_att19
00:50:07  24  ,att20 ejp_att20
00:50:07  25  ,att21 ejp_att21
00:50:07  26  ,att22 ejp_att22
00:50:07  27  ,att23 ejp_att23
00:50:07  28  ,att24 ejp_att24
00:50:07  29  ,att25 ejp_att25
00:50:07  30  ,att26 ejp_att26
00:50:07  31  ,att27 ejp_att27
00:50:07  32  ,att28 ejp_att28
00:50:07  33  ,att29 ejp_att29
00:50:07  34  ,att30 ejp_att30
00:50:07  35  ,att31 ejp_att31
00:50:07  36  ,att32 ejp_att32
00:50:07  37  ,att33 ejp_att33
00:50:07  38  ,att34 ejp_att34
00:50:07  39  ,att35 ejp_att35
00:50:07  40  ,att36 ejp_att36
00:50:07  41  ,att37 ejp_att37
00:50:07  42  FROM svm6162
00:50:07  43  /

Table created.

Elapsed: 00:00:00.15
00:50:08 SQL> 
00:50:08 SQL> ANALYZE TABLE ejp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:01.57
00:50:09 SQL> 
00:50:09 SQL> -- rpt
00:50:09 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19254

Elapsed: 00:00:00.83
00:50:10 SQL> SELECT COUNT(*)FROM ejp_att;

  COUNT(*)
----------
     19255

Elapsed: 00:00:00.00
00:50:10 SQL> 
00:50:10 SQL> --
00:50:10 SQL> -- ajp610.sql
00:50:10 SQL> --
00:50:10 SQL> 
00:50:10 SQL> -- Creates views and tables for backtesting a forex SVM strategy
00:50:10 SQL> 
00:50:10 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.36
00:50:10 SQL> 
00:50:10 SQL> -- I created di5min here:
00:50:10 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
00:50:10 SQL> 
00:50:10 SQL> CREATE OR REPLACE VIEW svm6102 AS
00:50:10   2  SELECT
00:50:10   3  pair
00:50:10   4  ,ydate
00:50:10   5  ,prdate
00:50:10   6  ,rownum rnum -- acts as t in my time-series
00:50:10   7  ,clse
00:50:10   8  -- Derive a bunch of attributes from clse, the latest price:
00:50:10   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
00:50:10  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
00:50:10  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
00:50:10  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
00:50:10  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
00:50:10  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
00:50:10  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
00:50:10  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
00:50:10  17  --
00:50:10  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
00:50:10  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
00:50:10  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
00:50:10  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
00:50:10  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
00:50:10  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
00:50:10  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
00:50:10  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
00:50:10  26  --
00:50:10  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
00:50:10  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
00:50:10  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
00:50:10  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
00:50:10  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
00:50:10  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
00:50:10  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
00:50:10  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
00:50:10  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
00:50:10  36  FROM di5min WHERE pair LIKE'%ajp%'
00:50:10  37  AND ydate > sysdate - 95
00:50:10  38  ORDER BY ydate
00:50:10  39  /

View created.

Elapsed: 00:00:00.04
00:50:10 SQL> 
00:50:10 SQL> -- rpt
00:50:10 SQL> 
00:50:10 SQL> SELECT
00:50:10   2  pair
00:50:10   3  ,COUNT(pair)
00:50:10   4  ,MIN(clse),MAX(clse)
00:50:10   5  ,MIN(avg6),MAX(avg6)
00:50:10   6  ,MIN(ydate),MAX(ydate)
00:50:10   7  FROM svm6102
00:50:10   8  GROUP BY pair
00:50:10   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ajp_usd       19251  78.249976 83.6669853 78.5106193  83.546306 2010-09-30 00:55:01 2011-01-03 00:40:00

Elapsed: 00:00:00.79
00:50:11 SQL> 
00:50:11 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
00:50:11 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.27
00:50:11 SQL> CREATE TABLE svm6122 COMPRESS AS
00:50:11   2  SELECT
00:50:11   3  pair
00:50:11   4  ,ydate
00:50:11   5  ,prdate
00:50:11   6  ,clse
00:50:11   7  -- g6 is important. I want to predict g6:
00:50:11   8  ,ld6 - clse g6
00:50:11   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
00:50:11  10  -- I want more attributes from the ones I derived above:
00:50:11  11  -- clse relation to moving-min
00:50:11  12  ,clse-min4  cm4
00:50:11  13  ,clse-min6  cm6
00:50:11  14  ,clse-min8  cm8
00:50:11  15  ,clse-min10 cm10
00:50:11  16  ,clse-min12 cm12
00:50:11  17  ,clse-min14 cm14
00:50:11  18  ,clse-min16 cm16
00:50:11  19  ,clse-min18 cm18
00:50:11  20  -- clse relation to moving-avg
00:50:11  21  ,clse-avg4  ca4
00:50:11  22  ,clse-avg6  ca6
00:50:11  23  ,clse-avg8  ca8
00:50:11  24  ,clse-avg10 ca10
00:50:11  25  ,clse-avg12 ca12
00:50:11  26  ,clse-avg14 ca14
00:50:11  27  ,clse-avg16 ca16
00:50:11  28  ,clse-avg18 ca18
00:50:11  29  -- clse relation to moving-max
00:50:11  30  ,clse-max4  cx4
00:50:11  31  ,clse-max6  cx6
00:50:11  32  ,clse-max8  cx8
00:50:11  33  ,clse-max10 cx10
00:50:11  34  ,clse-max12 cx12
00:50:11  35  ,clse-max14 cx14
00:50:11  36  ,clse-max16 cx16
00:50:11  37  ,clse-max18 cx18
00:50:11  38  -- Derive more attributes.
00:50:11  39  -- I want to use CORR() here to help SVM see the shape of the series.
00:50:11  40  -- But COVAR_POP is more stable:
00:50:11  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
00:50:11  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
00:50:11  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
00:50:11  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
00:50:11  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
00:50:11  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
00:50:11  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
00:50:11  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
00:50:11  49  -- Derive date related attributes:
00:50:11  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
00:50:11  51  ,0+TO_CHAR(ydate,'D')d
00:50:11  52  ,0+TO_CHAR(ydate,'W')w
00:50:11  53  -- mpm stands for minutes-past-midnight:
00:50:11  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
00:50:11  55  -- mph stands for minutes-past-hour:
00:50:11  56  ,0+TO_CHAR(ydate,'MI')mph
00:50:11  57  FROM svm6102
00:50:11  58  ORDER BY ydate
00:50:11  59  /

Table created.

Elapsed: 00:00:01.99
00:50:13 SQL> 
00:50:13 SQL> -- rpt
00:50:13 SQL> 
00:50:13 SQL> SELECT
00:50:13   2  pair
00:50:13   3  ,COUNT(pair)
00:50:13   4  ,MIN(clse),MAX(clse)
00:50:13   5  ,MIN(ydate),MAX(ydate)
00:50:13   6  FROM svm6122
00:50:13   7  GROUP BY pair
00:50:13   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ajp_usd       19251  78.249976 83.6669853 2010-09-30 00:55:01 2011-01-03 00:40:00

Elapsed: 00:00:00.07
00:50:13 SQL> 
00:50:13 SQL> -- Prepare for derivation of NTILE based params:
00:50:13 SQL> 
00:50:13 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.30
00:50:14 SQL> CREATE TABLE svm6142 COMPRESS AS
00:50:14   2  SELECT
00:50:14   3  pair
00:50:14   4  ,ydate
00:50:14   5  ,prdate
00:50:14   6  ,clse
00:50:14   7  ,g6
00:50:14   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
00:50:14   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
00:50:14  10  ,CASE WHEN trend IS NULL THEN 1
00:50:14  11  	    WHEN trend =0      THEN 1
00:50:14  12  	    ELSE trend END trend
00:50:14  13  ,cm4
00:50:14  14  ,cm6
00:50:14  15  ,cm8
00:50:14  16  ,cm10
00:50:14  17  ,cm12
00:50:14  18  ,cm14
00:50:14  19  ,cm16
00:50:14  20  ,cm18
00:50:14  21  --
00:50:14  22  ,ca4
00:50:14  23  ,ca6
00:50:14  24  ,ca8
00:50:14  25  ,ca10
00:50:14  26  ,ca12
00:50:14  27  ,ca14
00:50:14  28  ,ca16
00:50:14  29  ,ca18
00:50:14  30  --
00:50:14  31  ,cx4
00:50:14  32  ,cx6
00:50:14  33  ,cx8
00:50:14  34  ,cx10
00:50:14  35  ,cx12
00:50:14  36  ,cx14
00:50:14  37  ,cx16
00:50:14  38  ,cx18
00:50:14  39  --
00:50:14  40  ,crr4
00:50:14  41  ,crr6
00:50:14  42  ,crr8
00:50:14  43  ,crr10
00:50:14  44  ,crr12
00:50:14  45  ,crr14
00:50:14  46  ,crr16
00:50:14  47  ,crr18
00:50:14  48  --
00:50:14  49  ,hh
00:50:14  50  ,d
00:50:14  51  ,w
00:50:14  52  ,mpm
00:50:14  53  ,mph
00:50:14  54  FROM svm6122
00:50:14  55  ORDER BY ydate
00:50:14  56  /

Table created.

Elapsed: 00:00:00.40
00:50:14 SQL> 
00:50:14 SQL> -- rpt
00:50:14 SQL> 
00:50:14 SQL> SELECT
00:50:14   2  pair
00:50:14   3  ,trend
00:50:14   4  ,gatt
00:50:14   5  ,COUNT(pair)
00:50:14   6  ,AVG(g6)
00:50:14   7  FROM svm6142
00:50:14   8  GROUP BY pair,trend,gatt
00:50:14   9  ORDER BY pair,trend,gatt
00:50:14  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ajp_usd 	-1 nup	      4080 -.22868744
ajp_usd 	-1 up	      5147 .222123761
ajp_usd 	-1		29
ajp_usd 	 1 nup	      5170 -.20049625
ajp_usd 	 1 up	      4782 .205529943
ajp_usd 	 1		43

6 rows selected.

Elapsed: 00:00:00.05
00:50:14 SQL> 
00:50:14 SQL> 
00:50:14 SQL> -- Derive NTILE based params:
00:50:14 SQL> 
00:50:14 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.13
00:50:14 SQL> CREATE TABLE svm6162 COMPRESS AS
00:50:14   2  SELECT
00:50:14   3  pair
00:50:14   4  ,ydate
00:50:14   5  ,prdate
00:50:14   6  ,clse
00:50:14   7  ,g6
00:50:14   8  ,gatt
00:50:14   9  ,gattn
00:50:14  10  ,trend
00:50:14  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
00:50:14  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
00:50:14  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
00:50:14  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
00:50:14  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
00:50:14  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
00:50:14  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
00:50:14  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
00:50:14  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
00:50:14  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
00:50:14  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
00:50:14  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
00:50:14  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
00:50:14  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
00:50:14  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
00:50:14  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
00:50:14  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
00:50:14  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
00:50:14  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
00:50:14  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
00:50:14  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
00:50:14  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
00:50:14  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
00:50:14  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
00:50:14  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
00:50:14  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
00:50:14  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
00:50:14  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
00:50:14  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
00:50:14  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
00:50:14  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
00:50:14  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
00:50:14  43  ,hh  att32
00:50:14  44  ,d   att33
00:50:14  45  ,w   att34
00:50:14  46  ,mpm att35
00:50:14  47  ,mph att36
00:50:14  48  ,trend att37
00:50:14  49  FROM svm6142
00:50:14  50  ORDER BY ydate
00:50:14  51  /

Table created.

Elapsed: 00:00:04.92
00:50:19 SQL> 
00:50:19 SQL> -- rpt
00:50:19 SQL> 
00:50:19 SQL> SELECT
00:50:19   2  pair
00:50:19   3  ,trend
00:50:19   4  ,gatt
00:50:19   5  ,COUNT(pair)
00:50:19   6  ,AVG(g6)
00:50:19   7  FROM svm6162
00:50:19   8  GROUP BY pair,trend,gatt
00:50:19   9  ORDER BY pair,trend,gatt
00:50:19  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ajp_usd 	-1 nup	      4080 -.22868744
ajp_usd 	-1 up	      5147 .222123761
ajp_usd 	-1		29
ajp_usd 	 1 nup	      5170 -.20049625
ajp_usd 	 1 up	      4782 .205529943
ajp_usd 	 1		43

6 rows selected.

Elapsed: 00:00:00.02
00:50:19 SQL> 
00:50:19 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.17
00:50:19 SQL> CREATE TABLE modsrc COMPRESS AS
00:50:19   2  SELECT
00:50:19   3  pair
00:50:19   4  ,ydate
00:50:19   5  ,prdate
00:50:19   6  ,trend
00:50:19   7  ,g6
00:50:19   8  ,gatt
00:50:19   9  ,gattn
00:50:19  10  FROM svm6162
00:50:19  11  /

Table created.

Elapsed: 00:00:00.10
00:50:20 SQL> 
00:50:20 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
00:50:20 SQL> 
00:50:20 SQL> DROP   TABLE ajp_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
00:50:20 SQL> CREATE TABLE ajp_ms610 COMPRESS AS
00:50:20   2  SELECT
00:50:20   3  ydate
00:50:20   4  ,trend ajp_trend
00:50:20   5  ,g6    ajp_g6
00:50:20   6  ,gatt  ajp_gatt
00:50:20   7  ,gattn ajp_gattn
00:50:20   8  FROM modsrc
00:50:20   9  /

Table created.

Elapsed: 00:00:00.07
00:50:20 SQL> 
00:50:20 SQL> ANALYZE TABLE ajp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.23
00:50:20 SQL> 
00:50:20 SQL> -- I need a copy of the attributes:
00:50:20 SQL> 
00:50:20 SQL> 
00:50:20 SQL> DROP   TABLE ajp_att;

Table dropped.

Elapsed: 00:00:00.05
00:50:20 SQL> CREATE TABLE ajp_att COMPRESS AS
00:50:20   2  SELECT
00:50:20   3  ydate
00:50:20   4  ,att00 ajp_att00
00:50:20   5  ,att01 ajp_att01
00:50:20   6  ,att02 ajp_att02
00:50:20   7  ,att03 ajp_att03
00:50:20   8  ,att04 ajp_att04
00:50:20   9  ,att05 ajp_att05
00:50:20  10  ,att06 ajp_att06
00:50:20  11  ,att07 ajp_att07
00:50:20  12  ,att08 ajp_att08
00:50:20  13  ,att09 ajp_att09
00:50:20  14  ,att10 ajp_att10
00:50:20  15  ,att11 ajp_att11
00:50:20  16  ,att12 ajp_att12
00:50:20  17  ,att13 ajp_att13
00:50:20  18  ,att14 ajp_att14
00:50:20  19  ,att15 ajp_att15
00:50:20  20  ,att16 ajp_att16
00:50:20  21  ,att17 ajp_att17
00:50:20  22  ,att18 ajp_att18
00:50:20  23  ,att19 ajp_att19
00:50:20  24  ,att20 ajp_att20
00:50:20  25  ,att21 ajp_att21
00:50:20  26  ,att22 ajp_att22
00:50:20  27  ,att23 ajp_att23
00:50:20  28  ,att24 ajp_att24
00:50:20  29  ,att25 ajp_att25
00:50:20  30  ,att26 ajp_att26
00:50:20  31  ,att27 ajp_att27
00:50:20  32  ,att28 ajp_att28
00:50:20  33  ,att29 ajp_att29
00:50:20  34  ,att30 ajp_att30
00:50:20  35  ,att31 ajp_att31
00:50:20  36  ,att32 ajp_att32
00:50:20  37  ,att33 ajp_att33
00:50:20  38  ,att34 ajp_att34
00:50:20  39  ,att35 ajp_att35
00:50:20  40  ,att36 ajp_att36
00:50:20  41  ,att37 ajp_att37
00:50:20  42  FROM svm6162
00:50:20  43  /

Table created.

Elapsed: 00:00:00.17
00:50:20 SQL> 
00:50:20 SQL> ANALYZE TABLE ajp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.48
00:50:21 SQL> 
00:50:21 SQL> -- rpt
00:50:21 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19251

Elapsed: 00:00:00.75
00:50:22 SQL> SELECT COUNT(*)FROM ajp_att;

  COUNT(*)
----------
     19251

Elapsed: 00:00:00.00
00:50:22 SQL> 
00:50:22 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
