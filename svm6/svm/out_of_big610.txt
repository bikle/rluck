
SQL*Plus: Release 11.2.0.1.0 Production on Wed Dec 29 07:48:16 2010

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

07:48:16 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.01
07:48:16 SQL> 07:48:16 SQL> --
07:48:16 SQL> -- eur610.sql
07:48:16 SQL> --
07:48:16 SQL> 
07:48:16 SQL> -- Creates views and tables for backtesting a forex SVM strategy
07:48:16 SQL> 
07:48:16 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.04
07:48:16 SQL> 
07:48:16 SQL> -- I created di5min here:
07:48:16 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
07:48:16 SQL> 
07:48:16 SQL> CREATE OR REPLACE VIEW svm6102 AS
07:48:16   2  SELECT
07:48:16   3  pair
07:48:16   4  ,ydate
07:48:16   5  ,prdate
07:48:16   6  ,rownum rnum -- acts as t in my time-series
07:48:16   7  ,clse
07:48:16   8  -- Derive a bunch of attributes from clse, the latest price:
07:48:16   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
07:48:16  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
07:48:16  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
07:48:16  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
07:48:16  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
07:48:16  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
07:48:16  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
07:48:16  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
07:48:16  17  --
07:48:16  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
07:48:16  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
07:48:16  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
07:48:16  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
07:48:16  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
07:48:16  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
07:48:16  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
07:48:16  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
07:48:16  26  --
07:48:16  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
07:48:16  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
07:48:16  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
07:48:16  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
07:48:16  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
07:48:16  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
07:48:16  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
07:48:16  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
07:48:16  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
07:48:16  36  FROM di5min WHERE pair LIKE'%eur%'
07:48:16  37  AND ydate > sysdate - 95
07:48:16  38  ORDER BY ydate
07:48:16  39  /

View created.

Elapsed: 00:00:00.15
07:48:17 SQL> 
07:48:17 SQL> -- rpt
07:48:17 SQL> 
07:48:17 SQL> SELECT
07:48:17   2  pair
07:48:17   3  ,COUNT(pair)
07:48:17   4  ,MIN(clse),MAX(clse)
07:48:17   5  ,MIN(avg6),MAX(avg6)
07:48:17   6  ,MIN(ydate),MAX(ydate)
07:48:17   7  FROM svm6102
07:48:17   8  GROUP BY pair
07:48:17   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_usd       19401    1.29735	   1.4273 1.29875103 1.42436233 2010-09-26 20:55:01 2010-12-29 07:45:00

Elapsed: 00:00:00.88
07:48:17 SQL> 
07:48:17 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
07:48:17 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.19
07:48:18 SQL> CREATE TABLE svm6122 COMPRESS AS
07:48:18   2  SELECT
07:48:18   3  pair
07:48:18   4  ,ydate
07:48:18   5  ,prdate
07:48:18   6  ,clse
07:48:18   7  -- g6 is important. I want to predict g6:
07:48:18   8  ,ld6 - clse g6
07:48:18   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
07:48:18  10  -- I want more attributes from the ones I derived above:
07:48:18  11  -- clse relation to moving-min
07:48:18  12  ,clse-min4  cm4
07:48:18  13  ,clse-min6  cm6
07:48:18  14  ,clse-min8  cm8
07:48:18  15  ,clse-min10 cm10
07:48:18  16  ,clse-min12 cm12
07:48:18  17  ,clse-min14 cm14
07:48:18  18  ,clse-min16 cm16
07:48:18  19  ,clse-min18 cm18
07:48:18  20  -- clse relation to moving-avg
07:48:18  21  ,clse-avg4  ca4
07:48:18  22  ,clse-avg6  ca6
07:48:18  23  ,clse-avg8  ca8
07:48:18  24  ,clse-avg10 ca10
07:48:18  25  ,clse-avg12 ca12
07:48:18  26  ,clse-avg14 ca14
07:48:18  27  ,clse-avg16 ca16
07:48:18  28  ,clse-avg18 ca18
07:48:18  29  -- clse relation to moving-max
07:48:18  30  ,clse-max4  cx4
07:48:18  31  ,clse-max6  cx6
07:48:18  32  ,clse-max8  cx8
07:48:18  33  ,clse-max10 cx10
07:48:18  34  ,clse-max12 cx12
07:48:18  35  ,clse-max14 cx14
07:48:18  36  ,clse-max16 cx16
07:48:18  37  ,clse-max18 cx18
07:48:18  38  -- Derive more attributes.
07:48:18  39  -- I want to use CORR() here to help SVM see the shape of the series.
07:48:18  40  -- But COVAR_POP is more stable:
07:48:18  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
07:48:18  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
07:48:18  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
07:48:18  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
07:48:18  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
07:48:18  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
07:48:18  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
07:48:18  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
07:48:18  49  -- Derive date related attributes:
07:48:18  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
07:48:18  51  ,0+TO_CHAR(ydate,'D')d
07:48:18  52  ,0+TO_CHAR(ydate,'W')w
07:48:18  53  -- mpm stands for minutes-past-midnight:
07:48:18  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
07:48:18  55  -- mph stands for minutes-past-hour:
07:48:18  56  ,0+TO_CHAR(ydate,'MI')mph
07:48:18  57  FROM svm6102
07:48:18  58  ORDER BY ydate
07:48:18  59  /

Table created.

Elapsed: 00:00:02.34
07:48:20 SQL> 
07:48:20 SQL> -- rpt
07:48:20 SQL> 
07:48:20 SQL> SELECT
07:48:20   2  pair
07:48:20   3  ,COUNT(pair)
07:48:20   4  ,MIN(clse),MAX(clse)
07:48:20   5  ,MIN(ydate),MAX(ydate)
07:48:20   6  FROM svm6122
07:48:20   7  GROUP BY pair
07:48:20   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_usd       19401    1.29735	   1.4273 2010-09-26 20:55:01 2010-12-29 07:45:00

Elapsed: 00:00:00.05
07:48:20 SQL> 
07:48:20 SQL> -- Prepare for derivation of NTILE based params:
07:48:20 SQL> 
07:48:20 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.23
07:48:20 SQL> CREATE TABLE svm6142 COMPRESS AS
07:48:20   2  SELECT
07:48:20   3  pair
07:48:20   4  ,ydate
07:48:20   5  ,prdate
07:48:20   6  ,clse
07:48:20   7  ,g6
07:48:20   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
07:48:20   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
07:48:20  10  ,CASE WHEN trend IS NULL THEN 1
07:48:20  11  	    WHEN trend =0      THEN 1
07:48:20  12  	    ELSE trend END trend
07:48:20  13  ,cm4
07:48:20  14  ,cm6
07:48:20  15  ,cm8
07:48:20  16  ,cm10
07:48:20  17  ,cm12
07:48:20  18  ,cm14
07:48:20  19  ,cm16
07:48:20  20  ,cm18
07:48:20  21  --
07:48:20  22  ,ca4
07:48:20  23  ,ca6
07:48:20  24  ,ca8
07:48:20  25  ,ca10
07:48:20  26  ,ca12
07:48:20  27  ,ca14
07:48:20  28  ,ca16
07:48:20  29  ,ca18
07:48:20  30  --
07:48:20  31  ,cx4
07:48:20  32  ,cx6
07:48:20  33  ,cx8
07:48:20  34  ,cx10
07:48:20  35  ,cx12
07:48:20  36  ,cx14
07:48:20  37  ,cx16
07:48:20  38  ,cx18
07:48:20  39  --
07:48:20  40  ,crr4
07:48:20  41  ,crr6
07:48:20  42  ,crr8
07:48:20  43  ,crr10
07:48:20  44  ,crr12
07:48:20  45  ,crr14
07:48:20  46  ,crr16
07:48:20  47  ,crr18
07:48:20  48  --
07:48:20  49  ,hh
07:48:20  50  ,d
07:48:20  51  ,w
07:48:20  52  ,mpm
07:48:20  53  ,mph
07:48:20  54  FROM svm6122
07:48:20  55  ORDER BY ydate
07:48:20  56  /

Table created.

Elapsed: 00:00:00.38
07:48:21 SQL> 
07:48:21 SQL> -- rpt
07:48:21 SQL> 
07:48:21 SQL> SELECT
07:48:21   2  pair
07:48:21   3  ,trend
07:48:21   4  ,gatt
07:48:21   5  ,COUNT(pair)
07:48:21   6  ,AVG(g6)
07:48:21   7  FROM svm6142
07:48:21   8  GROUP BY pair,trend,gatt
07:48:21   9  ORDER BY pair,trend,gatt
07:48:21  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6131 -.00308082
eur_usd 	-1 up	      3675 .004457663
eur_usd 	-1		 1
eur_usd 	 1 nup	      5871 -.00319026
eur_usd 	 1 up	      3652 .005137438
eur_usd 	 1		71

6 rows selected.

Elapsed: 00:00:00.04
07:48:21 SQL> 
07:48:21 SQL> 
07:48:21 SQL> -- Derive NTILE based params:
07:48:21 SQL> 
07:48:21 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.54
07:48:21 SQL> CREATE TABLE svm6162 COMPRESS AS
07:48:21   2  SELECT
07:48:21   3  pair
07:48:21   4  ,ydate
07:48:21   5  ,prdate
07:48:21   6  ,clse
07:48:21   7  ,g6
07:48:21   8  ,gatt
07:48:21   9  ,gattn
07:48:21  10  ,trend
07:48:21  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
07:48:21  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
07:48:21  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
07:48:21  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
07:48:21  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
07:48:21  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
07:48:21  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
07:48:21  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
07:48:21  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
07:48:21  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
07:48:21  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
07:48:21  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
07:48:21  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
07:48:21  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
07:48:21  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
07:48:21  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
07:48:21  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
07:48:21  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
07:48:21  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
07:48:21  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
07:48:21  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
07:48:21  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
07:48:21  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
07:48:21  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
07:48:21  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
07:48:21  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
07:48:21  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
07:48:21  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
07:48:21  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
07:48:21  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
07:48:21  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
07:48:21  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
07:48:21  43  ,hh  att32
07:48:21  44  ,d   att33
07:48:21  45  ,w   att34
07:48:21  46  ,mpm att35
07:48:21  47  ,mph att36
07:48:21  48  ,trend att37
07:48:21  49  FROM svm6142
07:48:21  50  ORDER BY ydate
07:48:21  51  /

Table created.

Elapsed: 00:00:04.77
07:48:26 SQL> 
07:48:26 SQL> -- rpt
07:48:26 SQL> 
07:48:26 SQL> SELECT
07:48:26   2  pair
07:48:26   3  ,trend
07:48:26   4  ,gatt
07:48:26   5  ,COUNT(pair)
07:48:26   6  ,AVG(g6)
07:48:26   7  FROM svm6162
07:48:26   8  GROUP BY pair,trend,gatt
07:48:26   9  ORDER BY pair,trend,gatt
07:48:26  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6131 -.00308082
eur_usd 	-1 up	      3675 .004457663
eur_usd 	-1		 1
eur_usd 	 1 nup	      5871 -.00319026
eur_usd 	 1 up	      3652 .005137438
eur_usd 	 1		71

6 rows selected.

Elapsed: 00:00:00.03
07:48:26 SQL> 
07:48:26 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.04
07:48:26 SQL> CREATE TABLE modsrc COMPRESS AS
07:48:26   2  SELECT
07:48:26   3  pair
07:48:26   4  ,ydate
07:48:26   5  ,prdate
07:48:26   6  ,trend
07:48:26   7  ,g6
07:48:26   8  ,gatt
07:48:26   9  ,gattn
07:48:26  10  FROM svm6162
07:48:26  11  /

Table created.

Elapsed: 00:00:00.08
07:48:26 SQL> 
07:48:26 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
07:48:26 SQL> 
07:48:26 SQL> DROP   TABLE eur_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
07:48:26 SQL> CREATE TABLE eur_ms610 COMPRESS AS
07:48:26   2  SELECT
07:48:26   3  ydate
07:48:26   4  ,trend eur_trend
07:48:26   5  ,g6    eur_g6
07:48:26   6  ,gatt  eur_gatt
07:48:26   7  ,gattn eur_gattn
07:48:26   8  FROM modsrc
07:48:26   9  /

Table created.

Elapsed: 00:00:00.08
07:48:26 SQL> 
07:48:26 SQL> ANALYZE TABLE eur_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
07:48:27 SQL> 
07:48:27 SQL> -- I need a copy of the attributes:
07:48:27 SQL> 
07:48:27 SQL> 
07:48:27 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.05
07:48:27 SQL> CREATE TABLE eur_att COMPRESS AS
07:48:27   2  SELECT
07:48:27   3  ydate
07:48:27   4  ,att00 eur_att00
07:48:27   5  ,att01 eur_att01
07:48:27   6  ,att02 eur_att02
07:48:27   7  ,att03 eur_att03
07:48:27   8  ,att04 eur_att04
07:48:27   9  ,att05 eur_att05
07:48:27  10  ,att06 eur_att06
07:48:27  11  ,att07 eur_att07
07:48:27  12  ,att08 eur_att08
07:48:27  13  ,att09 eur_att09
07:48:27  14  ,att10 eur_att10
07:48:27  15  ,att11 eur_att11
07:48:27  16  ,att12 eur_att12
07:48:27  17  ,att13 eur_att13
07:48:27  18  ,att14 eur_att14
07:48:27  19  ,att15 eur_att15
07:48:27  20  ,att16 eur_att16
07:48:27  21  ,att17 eur_att17
07:48:27  22  ,att18 eur_att18
07:48:27  23  ,att19 eur_att19
07:48:27  24  ,att20 eur_att20
07:48:27  25  ,att21 eur_att21
07:48:27  26  ,att22 eur_att22
07:48:27  27  ,att23 eur_att23
07:48:27  28  ,att24 eur_att24
07:48:27  29  ,att25 eur_att25
07:48:27  30  ,att26 eur_att26
07:48:27  31  ,att27 eur_att27
07:48:27  32  ,att28 eur_att28
07:48:27  33  ,att29 eur_att29
07:48:27  34  ,att30 eur_att30
07:48:27  35  ,att31 eur_att31
07:48:27  36  ,att32 eur_att32
07:48:27  37  ,att33 eur_att33
07:48:27  38  ,att34 eur_att34
07:48:27  39  ,att35 eur_att35
07:48:27  40  ,att36 eur_att36
07:48:27  41  ,att37 eur_att37
07:48:27  42  FROM svm6162
07:48:27  43  /

Table created.

Elapsed: 00:00:00.15
07:48:27 SQL> 
07:48:27 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.42
07:48:27 SQL> 
07:48:27 SQL> -- rpt
07:48:27 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19401

Elapsed: 00:00:00.85
07:48:28 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     19401

Elapsed: 00:00:00.00
07:48:28 SQL> 
07:48:28 SQL> --
07:48:28 SQL> -- aud610.sql
07:48:28 SQL> --
07:48:28 SQL> 
07:48:28 SQL> -- Creates views and tables for backtesting a forex SVM strategy
07:48:28 SQL> 
07:48:28 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.39
07:48:29 SQL> 
07:48:29 SQL> -- I created di5min here:
07:48:29 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
07:48:29 SQL> 
07:48:29 SQL> CREATE OR REPLACE VIEW svm6102 AS
07:48:29   2  SELECT
07:48:29   3  pair
07:48:29   4  ,ydate
07:48:29   5  ,prdate
07:48:29   6  ,rownum rnum -- acts as t in my time-series
07:48:29   7  ,clse
07:48:29   8  -- Derive a bunch of attributes from clse, the latest price:
07:48:29   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
07:48:29  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
07:48:29  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
07:48:29  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
07:48:29  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
07:48:29  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
07:48:29  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
07:48:29  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
07:48:29  17  --
07:48:29  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
07:48:29  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
07:48:29  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
07:48:29  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
07:48:29  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
07:48:29  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
07:48:29  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
07:48:29  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
07:48:29  26  --
07:48:29  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
07:48:29  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
07:48:29  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
07:48:29  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
07:48:29  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
07:48:29  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
07:48:29  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
07:48:29  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
07:48:29  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
07:48:29  36  FROM di5min WHERE pair LIKE'%aud%'
07:48:29  37  AND ydate > sysdate - 95
07:48:29  38  ORDER BY ydate
07:48:29  39  /

View created.

Elapsed: 00:00:00.06
07:48:29 SQL> 
07:48:29 SQL> -- rpt
07:48:29 SQL> 
07:48:29 SQL> SELECT
07:48:29   2  pair
07:48:29   3  ,COUNT(pair)
07:48:29   4  ,MIN(clse),MAX(clse)
07:48:29   5  ,MIN(avg6),MAX(avg6)
07:48:29   6  ,MIN(ydate),MAX(ydate)
07:48:29   7  FROM svm6102
07:48:29   8  GROUP BY pair
07:48:29   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
aud_usd       19397	.95405	   1.0181 .957141438 1.01556438 2010-09-26 20:55:01 2010-12-29 07:40:00

Elapsed: 00:00:00.86
07:48:29 SQL> 
07:48:29 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
07:48:29 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.27
07:48:30 SQL> CREATE TABLE svm6122 COMPRESS AS
07:48:30   2  SELECT
07:48:30   3  pair
07:48:30   4  ,ydate
07:48:30   5  ,prdate
07:48:30   6  ,clse
07:48:30   7  -- g6 is important. I want to predict g6:
07:48:30   8  ,ld6 - clse g6
07:48:30   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
07:48:30  10  -- I want more attributes from the ones I derived above:
07:48:30  11  -- clse relation to moving-min
07:48:30  12  ,clse-min4  cm4
07:48:30  13  ,clse-min6  cm6
07:48:30  14  ,clse-min8  cm8
07:48:30  15  ,clse-min10 cm10
07:48:30  16  ,clse-min12 cm12
07:48:30  17  ,clse-min14 cm14
07:48:30  18  ,clse-min16 cm16
07:48:30  19  ,clse-min18 cm18
07:48:30  20  -- clse relation to moving-avg
07:48:30  21  ,clse-avg4  ca4
07:48:30  22  ,clse-avg6  ca6
07:48:30  23  ,clse-avg8  ca8
07:48:30  24  ,clse-avg10 ca10
07:48:30  25  ,clse-avg12 ca12
07:48:30  26  ,clse-avg14 ca14
07:48:30  27  ,clse-avg16 ca16
07:48:30  28  ,clse-avg18 ca18
07:48:30  29  -- clse relation to moving-max
07:48:30  30  ,clse-max4  cx4
07:48:30  31  ,clse-max6  cx6
07:48:30  32  ,clse-max8  cx8
07:48:30  33  ,clse-max10 cx10
07:48:30  34  ,clse-max12 cx12
07:48:30  35  ,clse-max14 cx14
07:48:30  36  ,clse-max16 cx16
07:48:30  37  ,clse-max18 cx18
07:48:30  38  -- Derive more attributes.
07:48:30  39  -- I want to use CORR() here to help SVM see the shape of the series.
07:48:30  40  -- But COVAR_POP is more stable:
07:48:30  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
07:48:30  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
07:48:30  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
07:48:30  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
07:48:30  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
07:48:30  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
07:48:30  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
07:48:30  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
07:48:30  49  -- Derive date related attributes:
07:48:30  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
07:48:30  51  ,0+TO_CHAR(ydate,'D')d
07:48:30  52  ,0+TO_CHAR(ydate,'W')w
07:48:30  53  -- mpm stands for minutes-past-midnight:
07:48:30  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
07:48:30  55  -- mph stands for minutes-past-hour:
07:48:30  56  ,0+TO_CHAR(ydate,'MI')mph
07:48:30  57  FROM svm6102
07:48:30  58  ORDER BY ydate
07:48:30  59  /

Table created.

Elapsed: 00:00:02.06
07:48:32 SQL> 
07:48:32 SQL> -- rpt
07:48:32 SQL> 
07:48:32 SQL> SELECT
07:48:32   2  pair
07:48:32   3  ,COUNT(pair)
07:48:32   4  ,MIN(clse),MAX(clse)
07:48:32   5  ,MIN(ydate),MAX(ydate)
07:48:32   6  FROM svm6122
07:48:32   7  GROUP BY pair
07:48:32   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
aud_usd       19397	.95405	   1.0181 2010-09-26 20:55:01 2010-12-29 07:40:00

Elapsed: 00:00:00.04
07:48:32 SQL> 
07:48:32 SQL> -- Prepare for derivation of NTILE based params:
07:48:32 SQL> 
07:48:32 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.18
07:48:32 SQL> CREATE TABLE svm6142 COMPRESS AS
07:48:32   2  SELECT
07:48:32   3  pair
07:48:32   4  ,ydate
07:48:32   5  ,prdate
07:48:32   6  ,clse
07:48:32   7  ,g6
07:48:32   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
07:48:32   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
07:48:32  10  ,CASE WHEN trend IS NULL THEN 1
07:48:32  11  	    WHEN trend =0      THEN 1
07:48:32  12  	    ELSE trend END trend
07:48:32  13  ,cm4
07:48:32  14  ,cm6
07:48:32  15  ,cm8
07:48:32  16  ,cm10
07:48:32  17  ,cm12
07:48:32  18  ,cm14
07:48:32  19  ,cm16
07:48:32  20  ,cm18
07:48:32  21  --
07:48:32  22  ,ca4
07:48:32  23  ,ca6
07:48:32  24  ,ca8
07:48:32  25  ,ca10
07:48:32  26  ,ca12
07:48:32  27  ,ca14
07:48:32  28  ,ca16
07:48:32  29  ,ca18
07:48:32  30  --
07:48:32  31  ,cx4
07:48:32  32  ,cx6
07:48:32  33  ,cx8
07:48:32  34  ,cx10
07:48:32  35  ,cx12
07:48:32  36  ,cx14
07:48:32  37  ,cx16
07:48:32  38  ,cx18
07:48:32  39  --
07:48:32  40  ,crr4
07:48:32  41  ,crr6
07:48:32  42  ,crr8
07:48:32  43  ,crr10
07:48:32  44  ,crr12
07:48:32  45  ,crr14
07:48:32  46  ,crr16
07:48:32  47  ,crr18
07:48:32  48  --
07:48:32  49  ,hh
07:48:32  50  ,d
07:48:32  51  ,w
07:48:32  52  ,mpm
07:48:32  53  ,mph
07:48:32  54  FROM svm6122
07:48:32  55  ORDER BY ydate
07:48:32  56  /

Table created.

Elapsed: 00:00:00.44
07:48:32 SQL> 
07:48:32 SQL> -- rpt
07:48:32 SQL> 
07:48:32 SQL> SELECT
07:48:32   2  pair
07:48:32   3  ,trend
07:48:32   4  ,gatt
07:48:32   5  ,COUNT(pair)
07:48:32   6  ,AVG(g6)
07:48:32   7  FROM svm6142
07:48:32   8  GROUP BY pair,trend,gatt
07:48:32   9  ORDER BY pair,trend,gatt
07:48:32  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5198 -.00212209
aud_usd 	-1 up	      3801 .003727355
aud_usd 	-1		 4
aud_usd 	 1 nup	      6679 -.00213644
aud_usd 	 1 up	      3647 .004062925
aud_usd 	 1		68

6 rows selected.

Elapsed: 00:00:00.04
07:48:32 SQL> 
07:48:32 SQL> 
07:48:32 SQL> -- Derive NTILE based params:
07:48:32 SQL> 
07:48:32 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.11
07:48:33 SQL> CREATE TABLE svm6162 COMPRESS AS
07:48:33   2  SELECT
07:48:33   3  pair
07:48:33   4  ,ydate
07:48:33   5  ,prdate
07:48:33   6  ,clse
07:48:33   7  ,g6
07:48:33   8  ,gatt
07:48:33   9  ,gattn
07:48:33  10  ,trend
07:48:33  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
07:48:33  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
07:48:33  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
07:48:33  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
07:48:33  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
07:48:33  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
07:48:33  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
07:48:33  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
07:48:33  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
07:48:33  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
07:48:33  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
07:48:33  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
07:48:33  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
07:48:33  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
07:48:33  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
07:48:33  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
07:48:33  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
07:48:33  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
07:48:33  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
07:48:33  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
07:48:33  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
07:48:33  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
07:48:33  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
07:48:33  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
07:48:33  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
07:48:33  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
07:48:33  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
07:48:33  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
07:48:33  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
07:48:33  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
07:48:33  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
07:48:33  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
07:48:33  43  ,hh  att32
07:48:33  44  ,d   att33
07:48:33  45  ,w   att34
07:48:33  46  ,mpm att35
07:48:33  47  ,mph att36
07:48:33  48  ,trend att37
07:48:33  49  FROM svm6142
07:48:33  50  ORDER BY ydate
07:48:33  51  /

Table created.

Elapsed: 00:00:04.81
07:48:37 SQL> 
07:48:37 SQL> -- rpt
07:48:37 SQL> 
07:48:37 SQL> SELECT
07:48:37   2  pair
07:48:37   3  ,trend
07:48:37   4  ,gatt
07:48:37   5  ,COUNT(pair)
07:48:37   6  ,AVG(g6)
07:48:37   7  FROM svm6162
07:48:37   8  GROUP BY pair,trend,gatt
07:48:37   9  ORDER BY pair,trend,gatt
07:48:37  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5198 -.00212209
aud_usd 	-1 up	      3801 .003727355
aud_usd 	-1		 4
aud_usd 	 1 nup	      6679 -.00213644
aud_usd 	 1 up	      3647 .004062925
aud_usd 	 1		68

6 rows selected.

Elapsed: 00:00:00.03
07:48:37 SQL> 
07:48:37 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
07:48:38 SQL> CREATE TABLE modsrc COMPRESS AS
07:48:38   2  SELECT
07:48:38   3  pair
07:48:38   4  ,ydate
07:48:38   5  ,prdate
07:48:38   6  ,trend
07:48:38   7  ,g6
07:48:38   8  ,gatt
07:48:38   9  ,gattn
07:48:38  10  FROM svm6162
07:48:38  11  /

Table created.

Elapsed: 00:00:00.08
07:48:38 SQL> 
07:48:38 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
07:48:38 SQL> 
07:48:38 SQL> DROP   TABLE aud_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
07:48:38 SQL> CREATE TABLE aud_ms610 COMPRESS AS
07:48:38   2  SELECT
07:48:38   3  ydate
07:48:38   4  ,trend aud_trend
07:48:38   5  ,g6    aud_g6
07:48:38   6  ,gatt  aud_gatt
07:48:38   7  ,gattn aud_gattn
07:48:38   8  FROM modsrc
07:48:38   9  /

Table created.

Elapsed: 00:00:00.07
07:48:38 SQL> 
07:48:38 SQL> ANALYZE TABLE aud_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
07:48:38 SQL> 
07:48:38 SQL> -- I need a copy of the attributes:
07:48:38 SQL> 
07:48:38 SQL> 
07:48:38 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.04
07:48:38 SQL> CREATE TABLE aud_att COMPRESS AS
07:48:38   2  SELECT
07:48:38   3  ydate
07:48:38   4  ,att00 aud_att00
07:48:38   5  ,att01 aud_att01
07:48:38   6  ,att02 aud_att02
07:48:38   7  ,att03 aud_att03
07:48:38   8  ,att04 aud_att04
07:48:38   9  ,att05 aud_att05
07:48:38  10  ,att06 aud_att06
07:48:38  11  ,att07 aud_att07
07:48:38  12  ,att08 aud_att08
07:48:38  13  ,att09 aud_att09
07:48:38  14  ,att10 aud_att10
07:48:38  15  ,att11 aud_att11
07:48:38  16  ,att12 aud_att12
07:48:38  17  ,att13 aud_att13
07:48:38  18  ,att14 aud_att14
07:48:38  19  ,att15 aud_att15
07:48:38  20  ,att16 aud_att16
07:48:38  21  ,att17 aud_att17
07:48:38  22  ,att18 aud_att18
07:48:38  23  ,att19 aud_att19
07:48:38  24  ,att20 aud_att20
07:48:38  25  ,att21 aud_att21
07:48:38  26  ,att22 aud_att22
07:48:38  27  ,att23 aud_att23
07:48:38  28  ,att24 aud_att24
07:48:38  29  ,att25 aud_att25
07:48:38  30  ,att26 aud_att26
07:48:38  31  ,att27 aud_att27
07:48:38  32  ,att28 aud_att28
07:48:38  33  ,att29 aud_att29
07:48:38  34  ,att30 aud_att30
07:48:38  35  ,att31 aud_att31
07:48:38  36  ,att32 aud_att32
07:48:38  37  ,att33 aud_att33
07:48:38  38  ,att34 aud_att34
07:48:38  39  ,att35 aud_att35
07:48:38  40  ,att36 aud_att36
07:48:38  41  ,att37 aud_att37
07:48:38  42  FROM svm6162
07:48:38  43  /

Table created.

Elapsed: 00:00:00.16
07:48:38 SQL> 
07:48:38 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
07:48:39 SQL> 
07:48:39 SQL> -- rpt
07:48:39 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19397

Elapsed: 00:00:00.83
07:48:40 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     19397

Elapsed: 00:00:00.00
07:48:40 SQL> 
07:48:40 SQL> --
07:48:40 SQL> -- gbp610.sql
07:48:40 SQL> --
07:48:40 SQL> 
07:48:40 SQL> -- Creates views and tables for backtesting a forex SVM strategy
07:48:40 SQL> 
07:48:40 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.41
07:48:40 SQL> 
07:48:40 SQL> -- I created di5min here:
07:48:40 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
07:48:40 SQL> 
07:48:40 SQL> CREATE OR REPLACE VIEW svm6102 AS
07:48:40   2  SELECT
07:48:40   3  pair
07:48:40   4  ,ydate
07:48:40   5  ,prdate
07:48:40   6  ,rownum rnum -- acts as t in my time-series
07:48:40   7  ,clse
07:48:40   8  -- Derive a bunch of attributes from clse, the latest price:
07:48:40   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
07:48:40  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
07:48:40  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
07:48:40  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
07:48:40  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
07:48:40  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
07:48:40  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
07:48:40  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
07:48:40  17  --
07:48:40  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
07:48:40  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
07:48:40  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
07:48:40  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
07:48:40  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
07:48:40  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
07:48:40  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
07:48:40  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
07:48:40  26  --
07:48:40  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
07:48:40  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
07:48:40  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
07:48:40  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
07:48:40  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
07:48:40  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
07:48:40  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
07:48:40  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
07:48:40  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
07:48:40  36  FROM di5min WHERE pair LIKE'%gbp%'
07:48:40  37  AND ydate > sysdate - 95
07:48:40  38  ORDER BY ydate
07:48:40  39  /

View created.

Elapsed: 00:00:00.04
07:48:40 SQL> 
07:48:40 SQL> -- rpt
07:48:40 SQL> 
07:48:40 SQL> SELECT
07:48:40   2  pair
07:48:40   3  ,COUNT(pair)
07:48:40   4  ,MIN(clse),MAX(clse)
07:48:40   5  ,MIN(avg6),MAX(avg6)
07:48:40   6  ,MIN(ydate),MAX(ydate)
07:48:40   7  FROM svm6102
07:48:40   8  GROUP BY pair
07:48:40   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
gbp_usd       19400   1.535325	   1.6295 1.53696747 1.62716986 2010-09-26 20:55:01 2010-12-29 07:45:00

Elapsed: 00:00:00.83
07:48:41 SQL> 
07:48:41 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
07:48:41 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.26
07:48:41 SQL> CREATE TABLE svm6122 COMPRESS AS
07:48:41   2  SELECT
07:48:41   3  pair
07:48:41   4  ,ydate
07:48:41   5  ,prdate
07:48:41   6  ,clse
07:48:41   7  -- g6 is important. I want to predict g6:
07:48:41   8  ,ld6 - clse g6
07:48:41   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
07:48:41  10  -- I want more attributes from the ones I derived above:
07:48:41  11  -- clse relation to moving-min
07:48:41  12  ,clse-min4  cm4
07:48:41  13  ,clse-min6  cm6
07:48:41  14  ,clse-min8  cm8
07:48:41  15  ,clse-min10 cm10
07:48:41  16  ,clse-min12 cm12
07:48:41  17  ,clse-min14 cm14
07:48:41  18  ,clse-min16 cm16
07:48:41  19  ,clse-min18 cm18
07:48:41  20  -- clse relation to moving-avg
07:48:41  21  ,clse-avg4  ca4
07:48:41  22  ,clse-avg6  ca6
07:48:41  23  ,clse-avg8  ca8
07:48:41  24  ,clse-avg10 ca10
07:48:41  25  ,clse-avg12 ca12
07:48:41  26  ,clse-avg14 ca14
07:48:41  27  ,clse-avg16 ca16
07:48:41  28  ,clse-avg18 ca18
07:48:41  29  -- clse relation to moving-max
07:48:41  30  ,clse-max4  cx4
07:48:41  31  ,clse-max6  cx6
07:48:41  32  ,clse-max8  cx8
07:48:41  33  ,clse-max10 cx10
07:48:41  34  ,clse-max12 cx12
07:48:41  35  ,clse-max14 cx14
07:48:41  36  ,clse-max16 cx16
07:48:41  37  ,clse-max18 cx18
07:48:41  38  -- Derive more attributes.
07:48:41  39  -- I want to use CORR() here to help SVM see the shape of the series.
07:48:41  40  -- But COVAR_POP is more stable:
07:48:41  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
07:48:41  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
07:48:41  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
07:48:41  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
07:48:41  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
07:48:41  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
07:48:41  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
07:48:41  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
07:48:41  49  -- Derive date related attributes:
07:48:41  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
07:48:41  51  ,0+TO_CHAR(ydate,'D')d
07:48:41  52  ,0+TO_CHAR(ydate,'W')w
07:48:41  53  -- mpm stands for minutes-past-midnight:
07:48:41  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
07:48:41  55  -- mph stands for minutes-past-hour:
07:48:41  56  ,0+TO_CHAR(ydate,'MI')mph
07:48:41  57  FROM svm6102
07:48:41  58  ORDER BY ydate
07:48:41  59  /

Table created.

Elapsed: 00:00:02.03
07:48:43 SQL> 
07:48:43 SQL> -- rpt
07:48:43 SQL> 
07:48:43 SQL> SELECT
07:48:43   2  pair
07:48:43   3  ,COUNT(pair)
07:48:43   4  ,MIN(clse),MAX(clse)
07:48:43   5  ,MIN(ydate),MAX(ydate)
07:48:43   6  FROM svm6122
07:48:43   7  GROUP BY pair
07:48:43   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
gbp_usd       19400   1.535325	   1.6295 2010-09-26 20:55:01 2010-12-29 07:45:00

Elapsed: 00:00:00.05
07:48:43 SQL> 
07:48:43 SQL> -- Prepare for derivation of NTILE based params:
07:48:43 SQL> 
07:48:43 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.26
07:48:43 SQL> CREATE TABLE svm6142 COMPRESS AS
07:48:43   2  SELECT
07:48:43   3  pair
07:48:43   4  ,ydate
07:48:43   5  ,prdate
07:48:43   6  ,clse
07:48:43   7  ,g6
07:48:43   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
07:48:43   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
07:48:43  10  ,CASE WHEN trend IS NULL THEN 1
07:48:43  11  	    WHEN trend =0      THEN 1
07:48:43  12  	    ELSE trend END trend
07:48:43  13  ,cm4
07:48:43  14  ,cm6
07:48:43  15  ,cm8
07:48:43  16  ,cm10
07:48:43  17  ,cm12
07:48:43  18  ,cm14
07:48:43  19  ,cm16
07:48:43  20  ,cm18
07:48:43  21  --
07:48:43  22  ,ca4
07:48:43  23  ,ca6
07:48:43  24  ,ca8
07:48:43  25  ,ca10
07:48:43  26  ,ca12
07:48:43  27  ,ca14
07:48:43  28  ,ca16
07:48:43  29  ,ca18
07:48:43  30  --
07:48:43  31  ,cx4
07:48:43  32  ,cx6
07:48:43  33  ,cx8
07:48:43  34  ,cx10
07:48:43  35  ,cx12
07:48:43  36  ,cx14
07:48:43  37  ,cx16
07:48:43  38  ,cx18
07:48:43  39  --
07:48:43  40  ,crr4
07:48:43  41  ,crr6
07:48:43  42  ,crr8
07:48:43  43  ,crr10
07:48:43  44  ,crr12
07:48:43  45  ,crr14
07:48:43  46  ,crr16
07:48:43  47  ,crr18
07:48:43  48  --
07:48:43  49  ,hh
07:48:43  50  ,d
07:48:43  51  ,w
07:48:43  52  ,mpm
07:48:43  53  ,mph
07:48:43  54  FROM svm6122
07:48:43  55  ORDER BY ydate
07:48:43  56  /

Table created.

Elapsed: 00:00:00.37
07:48:44 SQL> 
07:48:44 SQL> -- rpt
07:48:44 SQL> 
07:48:44 SQL> SELECT
07:48:44   2  pair
07:48:44   3  ,trend
07:48:44   4  ,gatt
07:48:44   5  ,COUNT(pair)
07:48:44   6  ,AVG(g6)
07:48:44   7  FROM svm6142
07:48:44   8  GROUP BY pair,trend,gatt
07:48:44   9  ORDER BY pair,trend,gatt
07:48:44  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6294  -.0025609
gbp_usd 	-1 up	      3520 .004238398
gbp_usd 	 1 nup	      6134 -.00269842
gbp_usd 	 1 up	      3380 .004347293
gbp_usd 	 1		72

Elapsed: 00:00:00.03
07:48:44 SQL> 
07:48:44 SQL> 
07:48:44 SQL> -- Derive NTILE based params:
07:48:44 SQL> 
07:48:44 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.14
07:48:44 SQL> CREATE TABLE svm6162 COMPRESS AS
07:48:44   2  SELECT
07:48:44   3  pair
07:48:44   4  ,ydate
07:48:44   5  ,prdate
07:48:44   6  ,clse
07:48:44   7  ,g6
07:48:44   8  ,gatt
07:48:44   9  ,gattn
07:48:44  10  ,trend
07:48:44  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
07:48:44  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
07:48:44  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
07:48:44  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
07:48:44  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
07:48:44  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
07:48:44  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
07:48:44  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
07:48:44  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
07:48:44  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
07:48:44  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
07:48:44  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
07:48:44  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
07:48:44  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
07:48:44  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
07:48:44  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
07:48:44  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
07:48:44  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
07:48:44  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
07:48:44  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
07:48:44  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
07:48:44  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
07:48:44  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
07:48:44  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
07:48:44  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
07:48:44  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
07:48:44  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
07:48:44  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
07:48:44  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
07:48:44  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
07:48:44  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
07:48:44  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
07:48:44  43  ,hh  att32
07:48:44  44  ,d   att33
07:48:44  45  ,w   att34
07:48:44  46  ,mpm att35
07:48:44  47  ,mph att36
07:48:44  48  ,trend att37
07:48:44  49  FROM svm6142
07:48:44  50  ORDER BY ydate
07:48:44  51  /

Table created.

Elapsed: 00:00:04.74
07:48:49 SQL> 
07:48:49 SQL> -- rpt
07:48:49 SQL> 
07:48:49 SQL> SELECT
07:48:49   2  pair
07:48:49   3  ,trend
07:48:49   4  ,gatt
07:48:49   5  ,COUNT(pair)
07:48:49   6  ,AVG(g6)
07:48:49   7  FROM svm6162
07:48:49   8  GROUP BY pair,trend,gatt
07:48:49   9  ORDER BY pair,trend,gatt
07:48:49  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6294  -.0025609
gbp_usd 	-1 up	      3520 .004238398
gbp_usd 	 1 nup	      6134 -.00269842
gbp_usd 	 1 up	      3380 .004347293
gbp_usd 	 1		72

Elapsed: 00:00:00.03
07:48:49 SQL> 
07:48:49 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.17
07:48:49 SQL> CREATE TABLE modsrc COMPRESS AS
07:48:49   2  SELECT
07:48:49   3  pair
07:48:49   4  ,ydate
07:48:49   5  ,prdate
07:48:49   6  ,trend
07:48:49   7  ,g6
07:48:49   8  ,gatt
07:48:49   9  ,gattn
07:48:49  10  FROM svm6162
07:48:49  11  /

Table created.

Elapsed: 00:00:00.08
07:48:49 SQL> 
07:48:49 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
07:48:49 SQL> 
07:48:49 SQL> DROP   TABLE gbp_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
07:48:49 SQL> CREATE TABLE gbp_ms610 COMPRESS AS
07:48:49   2  SELECT
07:48:49   3  ydate
07:48:49   4  ,trend gbp_trend
07:48:49   5  ,g6    gbp_g6
07:48:49   6  ,gatt  gbp_gatt
07:48:49   7  ,gattn gbp_gattn
07:48:49   8  FROM modsrc
07:48:49   9  /

Table created.

Elapsed: 00:00:00.07
07:48:49 SQL> 
07:48:49 SQL> ANALYZE TABLE gbp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
07:48:49 SQL> 
07:48:49 SQL> -- I need a copy of the attributes:
07:48:49 SQL> 
07:48:49 SQL> 
07:48:49 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.04
07:48:50 SQL> CREATE TABLE gbp_att COMPRESS AS
07:48:50   2  SELECT
07:48:50   3  ydate
07:48:50   4  ,att00 gbp_att00
07:48:50   5  ,att01 gbp_att01
07:48:50   6  ,att02 gbp_att02
07:48:50   7  ,att03 gbp_att03
07:48:50   8  ,att04 gbp_att04
07:48:50   9  ,att05 gbp_att05
07:48:50  10  ,att06 gbp_att06
07:48:50  11  ,att07 gbp_att07
07:48:50  12  ,att08 gbp_att08
07:48:50  13  ,att09 gbp_att09
07:48:50  14  ,att10 gbp_att10
07:48:50  15  ,att11 gbp_att11
07:48:50  16  ,att12 gbp_att12
07:48:50  17  ,att13 gbp_att13
07:48:50  18  ,att14 gbp_att14
07:48:50  19  ,att15 gbp_att15
07:48:50  20  ,att16 gbp_att16
07:48:50  21  ,att17 gbp_att17
07:48:50  22  ,att18 gbp_att18
07:48:50  23  ,att19 gbp_att19
07:48:50  24  ,att20 gbp_att20
07:48:50  25  ,att21 gbp_att21
07:48:50  26  ,att22 gbp_att22
07:48:50  27  ,att23 gbp_att23
07:48:50  28  ,att24 gbp_att24
07:48:50  29  ,att25 gbp_att25
07:48:50  30  ,att26 gbp_att26
07:48:50  31  ,att27 gbp_att27
07:48:50  32  ,att28 gbp_att28
07:48:50  33  ,att29 gbp_att29
07:48:50  34  ,att30 gbp_att30
07:48:50  35  ,att31 gbp_att31
07:48:50  36  ,att32 gbp_att32
07:48:50  37  ,att33 gbp_att33
07:48:50  38  ,att34 gbp_att34
07:48:50  39  ,att35 gbp_att35
07:48:50  40  ,att36 gbp_att36
07:48:50  41  ,att37 gbp_att37
07:48:50  42  FROM svm6162
07:48:50  43  /

Table created.

Elapsed: 00:00:00.19
07:48:50 SQL> 
07:48:50 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
07:48:50 SQL> 
07:48:50 SQL> -- rpt
07:48:50 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19400

Elapsed: 00:00:00.86
07:48:51 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     19400

Elapsed: 00:00:00.00
07:48:51 SQL> 
07:48:51 SQL> --
07:48:51 SQL> -- jpy610.sql
07:48:51 SQL> --
07:48:51 SQL> 
07:48:51 SQL> -- Creates views and tables for backtesting a forex SVM strategy
07:48:51 SQL> 
07:48:51 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.34
07:48:51 SQL> 
07:48:51 SQL> -- I created di5min here:
07:48:51 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
07:48:51 SQL> 
07:48:51 SQL> CREATE OR REPLACE VIEW svm6102 AS
07:48:51   2  SELECT
07:48:51   3  pair
07:48:51   4  ,ydate
07:48:51   5  ,prdate
07:48:51   6  ,rownum rnum -- acts as t in my time-series
07:48:51   7  ,clse
07:48:51   8  -- Derive a bunch of attributes from clse, the latest price:
07:48:51   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
07:48:51  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
07:48:51  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
07:48:51  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
07:48:51  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
07:48:51  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
07:48:51  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
07:48:51  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
07:48:51  17  --
07:48:51  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
07:48:51  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
07:48:51  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
07:48:51  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
07:48:51  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
07:48:51  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
07:48:51  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
07:48:51  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
07:48:51  26  --
07:48:51  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
07:48:51  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
07:48:51  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
07:48:51  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
07:48:51  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
07:48:51  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
07:48:51  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
07:48:51  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
07:48:51  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
07:48:51  36  FROM di5min WHERE pair LIKE'%jpy%'
07:48:51  37  AND ydate > sysdate - 95
07:48:51  38  ORDER BY ydate
07:48:51  39  /

View created.

Elapsed: 00:00:00.05
07:48:51 SQL> 
07:48:51 SQL> -- rpt
07:48:51 SQL> 
07:48:51 SQL> SELECT
07:48:51   2  pair
07:48:51   3  ,COUNT(pair)
07:48:51   4  ,MIN(clse),MAX(clse)
07:48:51   5  ,MIN(avg6),MAX(avg6)
07:48:51   6  ,MIN(ydate),MAX(ydate)
07:48:51   7  FROM svm6102
07:48:51   8  GROUP BY pair
07:48:51   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_jpy       19397	 80.25	   84.485 80.3595205 84.3105479 2010-09-26 20:55:01 2010-12-29 07:45:00

Elapsed: 00:00:00.88
07:48:52 SQL> 
07:48:52 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
07:48:52 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.23
07:48:53 SQL> CREATE TABLE svm6122 COMPRESS AS
07:48:53   2  SELECT
07:48:53   3  pair
07:48:53   4  ,ydate
07:48:53   5  ,prdate
07:48:53   6  ,clse
07:48:53   7  -- g6 is important. I want to predict g6:
07:48:53   8  ,ld6 - clse g6
07:48:53   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
07:48:53  10  -- I want more attributes from the ones I derived above:
07:48:53  11  -- clse relation to moving-min
07:48:53  12  ,clse-min4  cm4
07:48:53  13  ,clse-min6  cm6
07:48:53  14  ,clse-min8  cm8
07:48:53  15  ,clse-min10 cm10
07:48:53  16  ,clse-min12 cm12
07:48:53  17  ,clse-min14 cm14
07:48:53  18  ,clse-min16 cm16
07:48:53  19  ,clse-min18 cm18
07:48:53  20  -- clse relation to moving-avg
07:48:53  21  ,clse-avg4  ca4
07:48:53  22  ,clse-avg6  ca6
07:48:53  23  ,clse-avg8  ca8
07:48:53  24  ,clse-avg10 ca10
07:48:53  25  ,clse-avg12 ca12
07:48:53  26  ,clse-avg14 ca14
07:48:53  27  ,clse-avg16 ca16
07:48:53  28  ,clse-avg18 ca18
07:48:53  29  -- clse relation to moving-max
07:48:53  30  ,clse-max4  cx4
07:48:53  31  ,clse-max6  cx6
07:48:53  32  ,clse-max8  cx8
07:48:53  33  ,clse-max10 cx10
07:48:53  34  ,clse-max12 cx12
07:48:53  35  ,clse-max14 cx14
07:48:53  36  ,clse-max16 cx16
07:48:53  37  ,clse-max18 cx18
07:48:53  38  -- Derive more attributes.
07:48:53  39  -- I want to use CORR() here to help SVM see the shape of the series.
07:48:53  40  -- But COVAR_POP is more stable:
07:48:53  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
07:48:53  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
07:48:53  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
07:48:53  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
07:48:53  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
07:48:53  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
07:48:53  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
07:48:53  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
07:48:53  49  -- Derive date related attributes:
07:48:53  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
07:48:53  51  ,0+TO_CHAR(ydate,'D')d
07:48:53  52  ,0+TO_CHAR(ydate,'W')w
07:48:53  53  -- mpm stands for minutes-past-midnight:
07:48:53  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
07:48:53  55  -- mph stands for minutes-past-hour:
07:48:53  56  ,0+TO_CHAR(ydate,'MI')mph
07:48:53  57  FROM svm6102
07:48:53  58  ORDER BY ydate
07:48:53  59  /

Table created.

Elapsed: 00:00:02.06
07:48:55 SQL> 
07:48:55 SQL> -- rpt
07:48:55 SQL> 
07:48:55 SQL> SELECT
07:48:55   2  pair
07:48:55   3  ,COUNT(pair)
07:48:55   4  ,MIN(clse),MAX(clse)
07:48:55   5  ,MIN(ydate),MAX(ydate)
07:48:55   6  FROM svm6122
07:48:55   7  GROUP BY pair
07:48:55   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_jpy       19397	 80.25	   84.485 2010-09-26 20:55:01 2010-12-29 07:45:00

Elapsed: 00:00:00.08
07:48:55 SQL> 
07:48:55 SQL> -- Prepare for derivation of NTILE based params:
07:48:55 SQL> 
07:48:55 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.22
07:48:55 SQL> CREATE TABLE svm6142 COMPRESS AS
07:48:55   2  SELECT
07:48:55   3  pair
07:48:55   4  ,ydate
07:48:55   5  ,prdate
07:48:55   6  ,clse
07:48:55   7  ,g6
07:48:55   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
07:48:55   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
07:48:55  10  ,CASE WHEN trend IS NULL THEN 1
07:48:55  11  	    WHEN trend =0      THEN 1
07:48:55  12  	    ELSE trend END trend
07:48:55  13  ,cm4
07:48:55  14  ,cm6
07:48:55  15  ,cm8
07:48:55  16  ,cm10
07:48:55  17  ,cm12
07:48:55  18  ,cm14
07:48:55  19  ,cm16
07:48:55  20  ,cm18
07:48:55  21  --
07:48:55  22  ,ca4
07:48:55  23  ,ca6
07:48:55  24  ,ca8
07:48:55  25  ,ca10
07:48:55  26  ,ca12
07:48:55  27  ,ca14
07:48:55  28  ,ca16
07:48:55  29  ,ca18
07:48:55  30  --
07:48:55  31  ,cx4
07:48:55  32  ,cx6
07:48:55  33  ,cx8
07:48:55  34  ,cx10
07:48:55  35  ,cx12
07:48:55  36  ,cx14
07:48:55  37  ,cx16
07:48:55  38  ,cx18
07:48:55  39  --
07:48:55  40  ,crr4
07:48:55  41  ,crr6
07:48:55  42  ,crr8
07:48:55  43  ,crr10
07:48:55  44  ,crr12
07:48:55  45  ,crr14
07:48:55  46  ,crr16
07:48:55  47  ,crr18
07:48:55  48  --
07:48:55  49  ,hh
07:48:55  50  ,d
07:48:55  51  ,w
07:48:55  52  ,mpm
07:48:55  53  ,mph
07:48:55  54  FROM svm6122
07:48:55  55  ORDER BY ydate
07:48:55  56  /

Table created.

Elapsed: 00:00:00.35
07:48:55 SQL> 
07:48:55 SQL> -- rpt
07:48:55 SQL> 
07:48:55 SQL> SELECT
07:48:55   2  pair
07:48:55   3  ,trend
07:48:55   4  ,gatt
07:48:55   5  ,COUNT(pair)
07:48:55   6  ,AVG(g6)
07:48:55   7  FROM svm6142
07:48:55   8  GROUP BY pair,trend,gatt
07:48:55   9  ORDER BY pair,trend,gatt
07:48:55  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5106 -.16259728
usd_jpy 	-1 up	      4954 .163304745
usd_jpy 	-1		72
usd_jpy 	 1 nup	      5172 -.15469916
usd_jpy 	 1 up	      4093 .165084061

Elapsed: 00:00:00.06
07:48:55 SQL> 
07:48:55 SQL> 
07:48:55 SQL> -- Derive NTILE based params:
07:48:55 SQL> 
07:48:55 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.20
07:48:56 SQL> CREATE TABLE svm6162 COMPRESS AS
07:48:56   2  SELECT
07:48:56   3  pair
07:48:56   4  ,ydate
07:48:56   5  ,prdate
07:48:56   6  ,clse
07:48:56   7  ,g6
07:48:56   8  ,gatt
07:48:56   9  ,gattn
07:48:56  10  ,trend
07:48:56  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
07:48:56  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
07:48:56  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
07:48:56  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
07:48:56  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
07:48:56  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
07:48:56  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
07:48:56  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
07:48:56  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
07:48:56  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
07:48:56  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
07:48:56  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
07:48:56  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
07:48:56  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
07:48:56  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
07:48:56  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
07:48:56  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
07:48:56  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
07:48:56  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
07:48:56  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
07:48:56  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
07:48:56  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
07:48:56  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
07:48:56  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
07:48:56  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
07:48:56  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
07:48:56  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
07:48:56  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
07:48:56  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
07:48:56  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
07:48:56  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
07:48:56  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
07:48:56  43  ,hh  att32
07:48:56  44  ,d   att33
07:48:56  45  ,w   att34
07:48:56  46  ,mpm att35
07:48:56  47  ,mph att36
07:48:56  48  ,trend att37
07:48:56  49  FROM svm6142
07:48:56  50  ORDER BY ydate
07:48:56  51  /

Table created.

Elapsed: 00:00:04.75
07:49:00 SQL> 
07:49:00 SQL> -- rpt
07:49:00 SQL> 
07:49:00 SQL> SELECT
07:49:00   2  pair
07:49:00   3  ,trend
07:49:00   4  ,gatt
07:49:00   5  ,COUNT(pair)
07:49:00   6  ,AVG(g6)
07:49:00   7  FROM svm6162
07:49:00   8  GROUP BY pair,trend,gatt
07:49:00   9  ORDER BY pair,trend,gatt
07:49:00  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5106 -.16259728
usd_jpy 	-1 up	      4954 .163304745
usd_jpy 	-1		72
usd_jpy 	 1 nup	      5172 -.15469916
usd_jpy 	 1 up	      4093 .165084061

Elapsed: 00:00:00.03
07:49:00 SQL> 
07:49:00 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
07:49:00 SQL> CREATE TABLE modsrc COMPRESS AS
07:49:00   2  SELECT
07:49:00   3  pair
07:49:00   4  ,ydate
07:49:00   5  ,prdate
07:49:00   6  ,trend
07:49:00   7  ,g6
07:49:00   8  ,gatt
07:49:00   9  ,gattn
07:49:00  10  FROM svm6162
07:49:00  11  /

Table created.

Elapsed: 00:00:00.08
07:49:01 SQL> 
07:49:01 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
07:49:01 SQL> 
07:49:01 SQL> DROP   TABLE jpy_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
07:49:01 SQL> CREATE TABLE jpy_ms610 COMPRESS AS
07:49:01   2  SELECT
07:49:01   3  ydate
07:49:01   4  ,trend jpy_trend
07:49:01   5  ,g6    jpy_g6
07:49:01   6  ,gatt  jpy_gatt
07:49:01   7  ,gattn jpy_gattn
07:49:01   8  FROM modsrc
07:49:01   9  /

Table created.

Elapsed: 00:00:00.07
07:49:01 SQL> 
07:49:01 SQL> ANALYZE TABLE jpy_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
07:49:01 SQL> 
07:49:01 SQL> -- I need a copy of the attributes:
07:49:01 SQL> 
07:49:01 SQL> 
07:49:01 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.04
07:49:01 SQL> CREATE TABLE jpy_att COMPRESS AS
07:49:01   2  SELECT
07:49:01   3  ydate
07:49:01   4  ,att00 jpy_att00
07:49:01   5  ,att01 jpy_att01
07:49:01   6  ,att02 jpy_att02
07:49:01   7  ,att03 jpy_att03
07:49:01   8  ,att04 jpy_att04
07:49:01   9  ,att05 jpy_att05
07:49:01  10  ,att06 jpy_att06
07:49:01  11  ,att07 jpy_att07
07:49:01  12  ,att08 jpy_att08
07:49:01  13  ,att09 jpy_att09
07:49:01  14  ,att10 jpy_att10
07:49:01  15  ,att11 jpy_att11
07:49:01  16  ,att12 jpy_att12
07:49:01  17  ,att13 jpy_att13
07:49:01  18  ,att14 jpy_att14
07:49:01  19  ,att15 jpy_att15
07:49:01  20  ,att16 jpy_att16
07:49:01  21  ,att17 jpy_att17
07:49:01  22  ,att18 jpy_att18
07:49:01  23  ,att19 jpy_att19
07:49:01  24  ,att20 jpy_att20
07:49:01  25  ,att21 jpy_att21
07:49:01  26  ,att22 jpy_att22
07:49:01  27  ,att23 jpy_att23
07:49:01  28  ,att24 jpy_att24
07:49:01  29  ,att25 jpy_att25
07:49:01  30  ,att26 jpy_att26
07:49:01  31  ,att27 jpy_att27
07:49:01  32  ,att28 jpy_att28
07:49:01  33  ,att29 jpy_att29
07:49:01  34  ,att30 jpy_att30
07:49:01  35  ,att31 jpy_att31
07:49:01  36  ,att32 jpy_att32
07:49:01  37  ,att33 jpy_att33
07:49:01  38  ,att34 jpy_att34
07:49:01  39  ,att35 jpy_att35
07:49:01  40  ,att36 jpy_att36
07:49:01  41  ,att37 jpy_att37
07:49:01  42  FROM svm6162
07:49:01  43  /

Table created.

Elapsed: 00:00:00.17
07:49:01 SQL> 
07:49:01 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.43
07:49:02 SQL> 
07:49:02 SQL> -- rpt
07:49:02 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19397

Elapsed: 00:00:00.86
07:49:02 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     19397

Elapsed: 00:00:00.00
07:49:02 SQL> 
07:49:02 SQL> --
07:49:02 SQL> -- cad610.sql
07:49:02 SQL> --
07:49:02 SQL> 
07:49:02 SQL> -- Creates views and tables for backtesting a forex SVM strategy
07:49:02 SQL> 
07:49:02 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.39
07:49:03 SQL> 
07:49:03 SQL> -- I created di5min here:
07:49:03 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
07:49:03 SQL> 
07:49:03 SQL> CREATE OR REPLACE VIEW svm6102 AS
07:49:03   2  SELECT
07:49:03   3  pair
07:49:03   4  ,ydate
07:49:03   5  ,prdate
07:49:03   6  ,rownum rnum -- acts as t in my time-series
07:49:03   7  ,clse
07:49:03   8  -- Derive a bunch of attributes from clse, the latest price:
07:49:03   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
07:49:03  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
07:49:03  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
07:49:03  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
07:49:03  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
07:49:03  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
07:49:03  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
07:49:03  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
07:49:03  17  --
07:49:03  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
07:49:03  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
07:49:03  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
07:49:03  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
07:49:03  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
07:49:03  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
07:49:03  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
07:49:03  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
07:49:03  26  --
07:49:03  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
07:49:03  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
07:49:03  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
07:49:03  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
07:49:03  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
07:49:03  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
07:49:03  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
07:49:03  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
07:49:03  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
07:49:03  36  FROM di5min WHERE pair LIKE'%cad%'
07:49:03  37  AND ydate > sysdate - 95
07:49:03  38  ORDER BY ydate
07:49:03  39  /

View created.

Elapsed: 00:00:00.04
07:49:03 SQL> 
07:49:03 SQL> -- rpt
07:49:03 SQL> 
07:49:03 SQL> SELECT
07:49:03   2  pair
07:49:03   3  ,COUNT(pair)
07:49:03   4  ,MIN(clse),MAX(clse)
07:49:03   5  ,MIN(avg6),MAX(avg6)
07:49:03   6  ,MIN(ydate),MAX(ydate)
07:49:03   7  FROM svm6102
07:49:03   8  GROUP BY pair
07:49:03   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_cad       19397    .997975	    1.036 .999321575 1.03336849 2010-09-26 20:55:01 2010-12-29 07:45:00

Elapsed: 00:00:00.84
07:49:04 SQL> 
07:49:04 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
07:49:04 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.26
07:49:04 SQL> CREATE TABLE svm6122 COMPRESS AS
07:49:04   2  SELECT
07:49:04   3  pair
07:49:04   4  ,ydate
07:49:04   5  ,prdate
07:49:04   6  ,clse
07:49:04   7  -- g6 is important. I want to predict g6:
07:49:04   8  ,ld6 - clse g6
07:49:04   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
07:49:04  10  -- I want more attributes from the ones I derived above:
07:49:04  11  -- clse relation to moving-min
07:49:04  12  ,clse-min4  cm4
07:49:04  13  ,clse-min6  cm6
07:49:04  14  ,clse-min8  cm8
07:49:04  15  ,clse-min10 cm10
07:49:04  16  ,clse-min12 cm12
07:49:04  17  ,clse-min14 cm14
07:49:04  18  ,clse-min16 cm16
07:49:04  19  ,clse-min18 cm18
07:49:04  20  -- clse relation to moving-avg
07:49:04  21  ,clse-avg4  ca4
07:49:04  22  ,clse-avg6  ca6
07:49:04  23  ,clse-avg8  ca8
07:49:04  24  ,clse-avg10 ca10
07:49:04  25  ,clse-avg12 ca12
07:49:04  26  ,clse-avg14 ca14
07:49:04  27  ,clse-avg16 ca16
07:49:04  28  ,clse-avg18 ca18
07:49:04  29  -- clse relation to moving-max
07:49:04  30  ,clse-max4  cx4
07:49:04  31  ,clse-max6  cx6
07:49:04  32  ,clse-max8  cx8
07:49:04  33  ,clse-max10 cx10
07:49:04  34  ,clse-max12 cx12
07:49:04  35  ,clse-max14 cx14
07:49:04  36  ,clse-max16 cx16
07:49:04  37  ,clse-max18 cx18
07:49:04  38  -- Derive more attributes.
07:49:04  39  -- I want to use CORR() here to help SVM see the shape of the series.
07:49:04  40  -- But COVAR_POP is more stable:
07:49:04  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
07:49:04  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
07:49:04  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
07:49:04  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
07:49:04  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
07:49:04  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
07:49:04  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
07:49:04  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
07:49:04  49  -- Derive date related attributes:
07:49:04  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
07:49:04  51  ,0+TO_CHAR(ydate,'D')d
07:49:04  52  ,0+TO_CHAR(ydate,'W')w
07:49:04  53  -- mpm stands for minutes-past-midnight:
07:49:04  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
07:49:04  55  -- mph stands for minutes-past-hour:
07:49:04  56  ,0+TO_CHAR(ydate,'MI')mph
07:49:04  57  FROM svm6102
07:49:04  58  ORDER BY ydate
07:49:04  59  /

Table created.

Elapsed: 00:00:02.09
07:49:06 SQL> 
07:49:06 SQL> -- rpt
07:49:06 SQL> 
07:49:06 SQL> SELECT
07:49:06   2  pair
07:49:06   3  ,COUNT(pair)
07:49:06   4  ,MIN(clse),MAX(clse)
07:49:06   5  ,MIN(ydate),MAX(ydate)
07:49:06   6  FROM svm6122
07:49:06   7  GROUP BY pair
07:49:06   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_cad       19397    .997975	    1.036 2010-09-26 20:55:01 2010-12-29 07:45:00

Elapsed: 00:00:00.05
07:49:06 SQL> 
07:49:06 SQL> -- Prepare for derivation of NTILE based params:
07:49:06 SQL> 
07:49:06 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.30
07:49:06 SQL> CREATE TABLE svm6142 COMPRESS AS
07:49:06   2  SELECT
07:49:06   3  pair
07:49:06   4  ,ydate
07:49:06   5  ,prdate
07:49:06   6  ,clse
07:49:06   7  ,g6
07:49:06   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
07:49:06   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
07:49:06  10  ,CASE WHEN trend IS NULL THEN 1
07:49:06  11  	    WHEN trend =0      THEN 1
07:49:06  12  	    ELSE trend END trend
07:49:06  13  ,cm4
07:49:06  14  ,cm6
07:49:06  15  ,cm8
07:49:06  16  ,cm10
07:49:06  17  ,cm12
07:49:06  18  ,cm14
07:49:06  19  ,cm16
07:49:06  20  ,cm18
07:49:06  21  --
07:49:06  22  ,ca4
07:49:06  23  ,ca6
07:49:06  24  ,ca8
07:49:06  25  ,ca10
07:49:06  26  ,ca12
07:49:06  27  ,ca14
07:49:06  28  ,ca16
07:49:06  29  ,ca18
07:49:06  30  --
07:49:06  31  ,cx4
07:49:06  32  ,cx6
07:49:06  33  ,cx8
07:49:06  34  ,cx10
07:49:06  35  ,cx12
07:49:06  36  ,cx14
07:49:06  37  ,cx16
07:49:06  38  ,cx18
07:49:06  39  --
07:49:06  40  ,crr4
07:49:06  41  ,crr6
07:49:06  42  ,crr8
07:49:06  43  ,crr10
07:49:06  44  ,crr12
07:49:06  45  ,crr14
07:49:06  46  ,crr16
07:49:06  47  ,crr18
07:49:06  48  --
07:49:06  49  ,hh
07:49:06  50  ,d
07:49:06  51  ,w
07:49:06  52  ,mpm
07:49:06  53  ,mph
07:49:06  54  FROM svm6122
07:49:06  55  ORDER BY ydate
07:49:06  56  /

Table created.

Elapsed: 00:00:00.36
07:49:07 SQL> 
07:49:07 SQL> -- rpt
07:49:07 SQL> 
07:49:07 SQL> SELECT
07:49:07   2  pair
07:49:07   3  ,trend
07:49:07   4  ,gatt
07:49:07   5  ,COUNT(pair)
07:49:07   6  ,AVG(g6)
07:49:07   7  FROM svm6142
07:49:07   8  GROUP BY pair,trend,gatt
07:49:07   9  ORDER BY pair,trend,gatt
07:49:07  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7141 -.00133516
usd_cad 	-1 up	      3081  .00310749
usd_cad 	-1		52
usd_cad 	 1 nup	      6614 -.00162486
usd_cad 	 1 up	      2489 .003597467
usd_cad 	 1		20

6 rows selected.

Elapsed: 00:00:00.04
07:49:07 SQL> 
07:49:07 SQL> 
07:49:07 SQL> -- Derive NTILE based params:
07:49:07 SQL> 
07:49:07 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.12
07:49:07 SQL> CREATE TABLE svm6162 COMPRESS AS
07:49:07   2  SELECT
07:49:07   3  pair
07:49:07   4  ,ydate
07:49:07   5  ,prdate
07:49:07   6  ,clse
07:49:07   7  ,g6
07:49:07   8  ,gatt
07:49:07   9  ,gattn
07:49:07  10  ,trend
07:49:07  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
07:49:07  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
07:49:07  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
07:49:07  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
07:49:07  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
07:49:07  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
07:49:07  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
07:49:07  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
07:49:07  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
07:49:07  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
07:49:07  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
07:49:07  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
07:49:07  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
07:49:07  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
07:49:07  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
07:49:07  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
07:49:07  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
07:49:07  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
07:49:07  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
07:49:07  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
07:49:07  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
07:49:07  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
07:49:07  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
07:49:07  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
07:49:07  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
07:49:07  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
07:49:07  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
07:49:07  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
07:49:07  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
07:49:07  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
07:49:07  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
07:49:07  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
07:49:07  43  ,hh  att32
07:49:07  44  ,d   att33
07:49:07  45  ,w   att34
07:49:07  46  ,mpm att35
07:49:07  47  ,mph att36
07:49:07  48  ,trend att37
07:49:07  49  FROM svm6142
07:49:07  50  ORDER BY ydate
07:49:07  51  /

Table created.

Elapsed: 00:00:04.81
07:49:12 SQL> 
07:49:12 SQL> -- rpt
07:49:12 SQL> 
07:49:12 SQL> SELECT
07:49:12   2  pair
07:49:12   3  ,trend
07:49:12   4  ,gatt
07:49:12   5  ,COUNT(pair)
07:49:12   6  ,AVG(g6)
07:49:12   7  FROM svm6162
07:49:12   8  GROUP BY pair,trend,gatt
07:49:12   9  ORDER BY pair,trend,gatt
07:49:12  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7141 -.00133516
usd_cad 	-1 up	      3081  .00310749
usd_cad 	-1		52
usd_cad 	 1 nup	      6614 -.00162486
usd_cad 	 1 up	      2489 .003597467
usd_cad 	 1		20

6 rows selected.

Elapsed: 00:00:00.03
07:49:12 SQL> 
07:49:12 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.17
07:49:12 SQL> CREATE TABLE modsrc COMPRESS AS
07:49:12   2  SELECT
07:49:12   3  pair
07:49:12   4  ,ydate
07:49:12   5  ,prdate
07:49:12   6  ,trend
07:49:12   7  ,g6
07:49:12   8  ,gatt
07:49:12   9  ,gattn
07:49:12  10  FROM svm6162
07:49:12  11  /

Table created.

Elapsed: 00:00:00.13
07:49:12 SQL> 
07:49:12 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.28
07:49:12 SQL> 
07:49:12 SQL> DROP   TABLE cad_ms610 ;

Table dropped.

Elapsed: 00:00:00.06
07:49:12 SQL> CREATE TABLE cad_ms610 COMPRESS AS
07:49:12   2  SELECT
07:49:12   3  ydate
07:49:12   4  ,trend cad_trend
07:49:12   5  ,g6    cad_g6
07:49:12   6  ,gatt  cad_gatt
07:49:12   7  ,gattn cad_gattn
07:49:12   8  FROM modsrc
07:49:12   9  /

Table created.

Elapsed: 00:00:00.06
07:49:13 SQL> 
07:49:13 SQL> ANALYZE TABLE cad_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
07:49:13 SQL> 
07:49:13 SQL> -- I need a copy of the attributes:
07:49:13 SQL> 
07:49:13 SQL> 
07:49:13 SQL> DROP   TABLE cad_att;

Table dropped.

Elapsed: 00:00:00.04
07:49:13 SQL> CREATE TABLE cad_att COMPRESS AS
07:49:13   2  SELECT
07:49:13   3  ydate
07:49:13   4  ,att00 cad_att00
07:49:13   5  ,att01 cad_att01
07:49:13   6  ,att02 cad_att02
07:49:13   7  ,att03 cad_att03
07:49:13   8  ,att04 cad_att04
07:49:13   9  ,att05 cad_att05
07:49:13  10  ,att06 cad_att06
07:49:13  11  ,att07 cad_att07
07:49:13  12  ,att08 cad_att08
07:49:13  13  ,att09 cad_att09
07:49:13  14  ,att10 cad_att10
07:49:13  15  ,att11 cad_att11
07:49:13  16  ,att12 cad_att12
07:49:13  17  ,att13 cad_att13
07:49:13  18  ,att14 cad_att14
07:49:13  19  ,att15 cad_att15
07:49:13  20  ,att16 cad_att16
07:49:13  21  ,att17 cad_att17
07:49:13  22  ,att18 cad_att18
07:49:13  23  ,att19 cad_att19
07:49:13  24  ,att20 cad_att20
07:49:13  25  ,att21 cad_att21
07:49:13  26  ,att22 cad_att22
07:49:13  27  ,att23 cad_att23
07:49:13  28  ,att24 cad_att24
07:49:13  29  ,att25 cad_att25
07:49:13  30  ,att26 cad_att26
07:49:13  31  ,att27 cad_att27
07:49:13  32  ,att28 cad_att28
07:49:13  33  ,att29 cad_att29
07:49:13  34  ,att30 cad_att30
07:49:13  35  ,att31 cad_att31
07:49:13  36  ,att32 cad_att32
07:49:13  37  ,att33 cad_att33
07:49:13  38  ,att34 cad_att34
07:49:13  39  ,att35 cad_att35
07:49:13  40  ,att36 cad_att36
07:49:13  41  ,att37 cad_att37
07:49:13  42  FROM svm6162
07:49:13  43  /

Table created.

Elapsed: 00:00:00.17
07:49:13 SQL> 
07:49:13 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.44
07:49:13 SQL> 
07:49:13 SQL> -- rpt
07:49:13 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19397

Elapsed: 00:00:00.84
07:49:14 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
     19397

Elapsed: 00:00:00.00
07:49:14 SQL> 
07:49:14 SQL> --
07:49:14 SQL> -- chf610.sql
07:49:14 SQL> --
07:49:14 SQL> 
07:49:14 SQL> -- Creates views and tables for backtesting a forex SVM strategy
07:49:14 SQL> 
07:49:14 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.39
07:49:15 SQL> 
07:49:15 SQL> -- I created di5min here:
07:49:15 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
07:49:15 SQL> 
07:49:15 SQL> CREATE OR REPLACE VIEW svm6102 AS
07:49:15   2  SELECT
07:49:15   3  pair
07:49:15   4  ,ydate
07:49:15   5  ,prdate
07:49:15   6  ,rownum rnum -- acts as t in my time-series
07:49:15   7  ,clse
07:49:15   8  -- Derive a bunch of attributes from clse, the latest price:
07:49:15   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
07:49:15  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
07:49:15  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
07:49:15  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
07:49:15  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
07:49:15  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
07:49:15  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
07:49:15  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
07:49:15  17  --
07:49:15  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
07:49:15  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
07:49:15  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
07:49:15  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
07:49:15  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
07:49:15  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
07:49:15  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
07:49:15  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
07:49:15  26  --
07:49:15  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
07:49:15  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
07:49:15  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
07:49:15  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
07:49:15  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
07:49:15  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
07:49:15  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
07:49:15  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
07:49:15  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
07:49:15  36  FROM di5min WHERE pair LIKE'%chf%'
07:49:15  37  AND ydate > sysdate - 95
07:49:15  38  ORDER BY ydate
07:49:15  39  /

View created.

Elapsed: 00:00:00.05
07:49:15 SQL> 
07:49:15 SQL> -- rpt
07:49:15 SQL> 
07:49:15 SQL> SELECT
07:49:15   2  pair
07:49:15   3  ,COUNT(pair)
07:49:15   4  ,MIN(clse),MAX(clse)
07:49:15   5  ,MIN(avg6),MAX(avg6)
07:49:15   6  ,MIN(ydate),MAX(ydate)
07:49:15   7  FROM svm6102
07:49:15   8  GROUP BY pair
07:49:15   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_chf       19400	.94525	  1.00635 .947785616 1.00498151 2010-09-26 20:55:01 2010-12-29 07:45:00

Elapsed: 00:00:00.85
07:49:15 SQL> 
07:49:15 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
07:49:15 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.49
07:49:16 SQL> CREATE TABLE svm6122 COMPRESS AS
07:49:16   2  SELECT
07:49:16   3  pair
07:49:16   4  ,ydate
07:49:16   5  ,prdate
07:49:16   6  ,clse
07:49:16   7  -- g6 is important. I want to predict g6:
07:49:16   8  ,ld6 - clse g6
07:49:16   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
07:49:16  10  -- I want more attributes from the ones I derived above:
07:49:16  11  -- clse relation to moving-min
07:49:16  12  ,clse-min4  cm4
07:49:16  13  ,clse-min6  cm6
07:49:16  14  ,clse-min8  cm8
07:49:16  15  ,clse-min10 cm10
07:49:16  16  ,clse-min12 cm12
07:49:16  17  ,clse-min14 cm14
07:49:16  18  ,clse-min16 cm16
07:49:16  19  ,clse-min18 cm18
07:49:16  20  -- clse relation to moving-avg
07:49:16  21  ,clse-avg4  ca4
07:49:16  22  ,clse-avg6  ca6
07:49:16  23  ,clse-avg8  ca8
07:49:16  24  ,clse-avg10 ca10
07:49:16  25  ,clse-avg12 ca12
07:49:16  26  ,clse-avg14 ca14
07:49:16  27  ,clse-avg16 ca16
07:49:16  28  ,clse-avg18 ca18
07:49:16  29  -- clse relation to moving-max
07:49:16  30  ,clse-max4  cx4
07:49:16  31  ,clse-max6  cx6
07:49:16  32  ,clse-max8  cx8
07:49:16  33  ,clse-max10 cx10
07:49:16  34  ,clse-max12 cx12
07:49:16  35  ,clse-max14 cx14
07:49:16  36  ,clse-max16 cx16
07:49:16  37  ,clse-max18 cx18
07:49:16  38  -- Derive more attributes.
07:49:16  39  -- I want to use CORR() here to help SVM see the shape of the series.
07:49:16  40  -- But COVAR_POP is more stable:
07:49:16  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
07:49:16  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
07:49:16  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
07:49:16  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
07:49:16  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
07:49:16  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
07:49:16  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
07:49:16  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
07:49:16  49  -- Derive date related attributes:
07:49:16  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
07:49:16  51  ,0+TO_CHAR(ydate,'D')d
07:49:16  52  ,0+TO_CHAR(ydate,'W')w
07:49:16  53  -- mpm stands for minutes-past-midnight:
07:49:16  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
07:49:16  55  -- mph stands for minutes-past-hour:
07:49:16  56  ,0+TO_CHAR(ydate,'MI')mph
07:49:16  57  FROM svm6102
07:49:16  58  ORDER BY ydate
07:49:16  59  /

Table created.

Elapsed: 00:00:02.11
07:49:18 SQL> 
07:49:18 SQL> -- rpt
07:49:18 SQL> 
07:49:18 SQL> SELECT
07:49:18   2  pair
07:49:18   3  ,COUNT(pair)
07:49:18   4  ,MIN(clse),MAX(clse)
07:49:18   5  ,MIN(ydate),MAX(ydate)
07:49:18   6  FROM svm6122
07:49:18   7  GROUP BY pair
07:49:18   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_chf       19400	.94525	  1.00635 2010-09-26 20:55:01 2010-12-29 07:45:00

Elapsed: 00:00:00.04
07:49:18 SQL> 
07:49:18 SQL> -- Prepare for derivation of NTILE based params:
07:49:18 SQL> 
07:49:18 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.19
07:49:18 SQL> CREATE TABLE svm6142 COMPRESS AS
07:49:18   2  SELECT
07:49:18   3  pair
07:49:18   4  ,ydate
07:49:18   5  ,prdate
07:49:18   6  ,clse
07:49:18   7  ,g6
07:49:18   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
07:49:18   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
07:49:18  10  ,CASE WHEN trend IS NULL THEN 1
07:49:18  11  	    WHEN trend =0      THEN 1
07:49:18  12  	    ELSE trend END trend
07:49:18  13  ,cm4
07:49:18  14  ,cm6
07:49:18  15  ,cm8
07:49:18  16  ,cm10
07:49:18  17  ,cm12
07:49:18  18  ,cm14
07:49:18  19  ,cm16
07:49:18  20  ,cm18
07:49:18  21  --
07:49:18  22  ,ca4
07:49:18  23  ,ca6
07:49:18  24  ,ca8
07:49:18  25  ,ca10
07:49:18  26  ,ca12
07:49:18  27  ,ca14
07:49:18  28  ,ca16
07:49:18  29  ,ca18
07:49:18  30  --
07:49:18  31  ,cx4
07:49:18  32  ,cx6
07:49:18  33  ,cx8
07:49:18  34  ,cx10
07:49:18  35  ,cx12
07:49:18  36  ,cx14
07:49:18  37  ,cx16
07:49:18  38  ,cx18
07:49:18  39  --
07:49:18  40  ,crr4
07:49:18  41  ,crr6
07:49:18  42  ,crr8
07:49:18  43  ,crr10
07:49:18  44  ,crr12
07:49:18  45  ,crr14
07:49:18  46  ,crr16
07:49:18  47  ,crr18
07:49:18  48  --
07:49:18  49  ,hh
07:49:18  50  ,d
07:49:18  51  ,w
07:49:18  52  ,mpm
07:49:18  53  ,mph
07:49:18  54  FROM svm6122
07:49:18  55  ORDER BY ydate
07:49:18  56  /

Table created.

Elapsed: 00:00:00.36
07:49:19 SQL> 
07:49:19 SQL> -- rpt
07:49:19 SQL> 
07:49:19 SQL> SELECT
07:49:19   2  pair
07:49:19   3  ,trend
07:49:19   4  ,gatt
07:49:19   5  ,COUNT(pair)
07:49:19   6  ,AVG(g6)
07:49:19   7  FROM svm6142
07:49:19   8  GROUP BY pair,trend,gatt
07:49:19   9  ORDER BY pair,trend,gatt
07:49:19  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      6905 -.00194109
usd_chf 	-1 up	      3170 .003899842
usd_chf 	-1		59
usd_chf 	 1 nup	      6688 -.00161756
usd_chf 	 1 up	      2565 .003689727
usd_chf 	 1		13

6 rows selected.

Elapsed: 00:00:00.04
07:49:19 SQL> 
07:49:19 SQL> 
07:49:19 SQL> -- Derive NTILE based params:
07:49:19 SQL> 
07:49:19 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.16
07:49:19 SQL> CREATE TABLE svm6162 COMPRESS AS
07:49:19   2  SELECT
07:49:19   3  pair
07:49:19   4  ,ydate
07:49:19   5  ,prdate
07:49:19   6  ,clse
07:49:19   7  ,g6
07:49:19   8  ,gatt
07:49:19   9  ,gattn
07:49:19  10  ,trend
07:49:19  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
07:49:19  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
07:49:19  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
07:49:19  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
07:49:19  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
07:49:19  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
07:49:19  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
07:49:19  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
07:49:19  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
07:49:19  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
07:49:19  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
07:49:19  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
07:49:19  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
07:49:19  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
07:49:19  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
07:49:19  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
07:49:19  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
07:49:19  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
07:49:19  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
07:49:19  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
07:49:19  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
07:49:19  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
07:49:19  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
07:49:19  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
07:49:19  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
07:49:19  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
07:49:19  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
07:49:19  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
07:49:19  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
07:49:19  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
07:49:19  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
07:49:19  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
07:49:19  43  ,hh  att32
07:49:19  44  ,d   att33
07:49:19  45  ,w   att34
07:49:19  46  ,mpm att35
07:49:19  47  ,mph att36
07:49:19  48  ,trend att37
07:49:19  49  FROM svm6142
07:49:19  50  ORDER BY ydate
07:49:19  51  /

Table created.

Elapsed: 00:00:04.76
07:49:24 SQL> 
07:49:24 SQL> -- rpt
07:49:24 SQL> 
07:49:24 SQL> SELECT
07:49:24   2  pair
07:49:24   3  ,trend
07:49:24   4  ,gatt
07:49:24   5  ,COUNT(pair)
07:49:24   6  ,AVG(g6)
07:49:24   7  FROM svm6162
07:49:24   8  GROUP BY pair,trend,gatt
07:49:24   9  ORDER BY pair,trend,gatt
07:49:24  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      6905 -.00194109
usd_chf 	-1 up	      3170 .003899842
usd_chf 	-1		59
usd_chf 	 1 nup	      6688 -.00161756
usd_chf 	 1 up	      2565 .003689727
usd_chf 	 1		13

6 rows selected.

Elapsed: 00:00:00.02
07:49:24 SQL> 
07:49:24 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.16
07:49:24 SQL> CREATE TABLE modsrc COMPRESS AS
07:49:24   2  SELECT
07:49:24   3  pair
07:49:24   4  ,ydate
07:49:24   5  ,prdate
07:49:24   6  ,trend
07:49:24   7  ,g6
07:49:24   8  ,gatt
07:49:24   9  ,gattn
07:49:24  10  FROM svm6162
07:49:24  11  /

Table created.

Elapsed: 00:00:00.09
07:49:24 SQL> 
07:49:24 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
07:49:24 SQL> 
07:49:24 SQL> DROP   TABLE chf_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
07:49:24 SQL> CREATE TABLE chf_ms610 COMPRESS AS
07:49:24   2  SELECT
07:49:24   3  ydate
07:49:24   4  ,trend chf_trend
07:49:24   5  ,g6    chf_g6
07:49:24   6  ,gatt  chf_gatt
07:49:24   7  ,gattn chf_gattn
07:49:24   8  FROM modsrc
07:49:24   9  /

Table created.

Elapsed: 00:00:00.07
07:49:24 SQL> 
07:49:24 SQL> ANALYZE TABLE chf_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.14
07:49:24 SQL> 
07:49:24 SQL> -- I need a copy of the attributes:
07:49:24 SQL> 
07:49:24 SQL> 
07:49:24 SQL> DROP   TABLE chf_att;

Table dropped.

Elapsed: 00:00:00.04
07:49:24 SQL> CREATE TABLE chf_att COMPRESS AS
07:49:24   2  SELECT
07:49:24   3  ydate
07:49:24   4  ,att00 chf_att00
07:49:24   5  ,att01 chf_att01
07:49:24   6  ,att02 chf_att02
07:49:24   7  ,att03 chf_att03
07:49:24   8  ,att04 chf_att04
07:49:24   9  ,att05 chf_att05
07:49:24  10  ,att06 chf_att06
07:49:24  11  ,att07 chf_att07
07:49:24  12  ,att08 chf_att08
07:49:24  13  ,att09 chf_att09
07:49:24  14  ,att10 chf_att10
07:49:24  15  ,att11 chf_att11
07:49:24  16  ,att12 chf_att12
07:49:24  17  ,att13 chf_att13
07:49:24  18  ,att14 chf_att14
07:49:24  19  ,att15 chf_att15
07:49:24  20  ,att16 chf_att16
07:49:24  21  ,att17 chf_att17
07:49:24  22  ,att18 chf_att18
07:49:24  23  ,att19 chf_att19
07:49:24  24  ,att20 chf_att20
07:49:24  25  ,att21 chf_att21
07:49:24  26  ,att22 chf_att22
07:49:24  27  ,att23 chf_att23
07:49:24  28  ,att24 chf_att24
07:49:24  29  ,att25 chf_att25
07:49:24  30  ,att26 chf_att26
07:49:24  31  ,att27 chf_att27
07:49:24  32  ,att28 chf_att28
07:49:24  33  ,att29 chf_att29
07:49:24  34  ,att30 chf_att30
07:49:24  35  ,att31 chf_att31
07:49:24  36  ,att32 chf_att32
07:49:24  37  ,att33 chf_att33
07:49:24  38  ,att34 chf_att34
07:49:24  39  ,att35 chf_att35
07:49:24  40  ,att36 chf_att36
07:49:24  41  ,att37 chf_att37
07:49:24  42  FROM svm6162
07:49:24  43  /

Table created.

Elapsed: 00:00:00.17
07:49:25 SQL> 
07:49:25 SQL> ANALYZE TABLE chf_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.42
07:49:25 SQL> 
07:49:25 SQL> -- rpt
07:49:25 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19400

Elapsed: 00:00:00.82
07:49:26 SQL> SELECT COUNT(*)FROM chf_att;

  COUNT(*)
----------
     19400

Elapsed: 00:00:00.00
07:49:26 SQL> 
07:49:26 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
