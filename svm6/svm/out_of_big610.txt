
SQL*Plus: Release 11.2.0.1.0 Production on Fri Dec 31 22:33:30 2010

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

22:33:30 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
22:33:30 SQL> 22:33:30 SQL> --
22:33:30 SQL> -- eur610.sql
22:33:30 SQL> --
22:33:30 SQL> 
22:33:30 SQL> -- Creates views and tables for backtesting a forex SVM strategy
22:33:30 SQL> 
22:33:30 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.01
22:33:30 SQL> 
22:33:30 SQL> -- I created di5min here:
22:33:30 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
22:33:30 SQL> 
22:33:30 SQL> CREATE OR REPLACE VIEW svm6102 AS
22:33:30   2  SELECT
22:33:30   3  pair
22:33:30   4  ,ydate
22:33:30   5  ,prdate
22:33:30   6  ,rownum rnum -- acts as t in my time-series
22:33:30   7  ,clse
22:33:30   8  -- Derive a bunch of attributes from clse, the latest price:
22:33:30   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
22:33:30  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
22:33:30  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
22:33:30  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
22:33:30  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
22:33:30  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
22:33:30  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
22:33:30  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
22:33:30  17  --
22:33:30  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
22:33:30  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
22:33:30  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
22:33:30  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
22:33:30  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
22:33:30  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
22:33:30  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
22:33:30  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
22:33:30  26  --
22:33:30  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
22:33:30  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
22:33:30  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
22:33:30  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
22:33:30  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
22:33:30  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
22:33:30  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
22:33:30  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
22:33:30  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
22:33:30  36  FROM di5min WHERE pair LIKE'%eur%'
22:33:30  37  AND ydate > sysdate - 95
22:33:30  38  ORDER BY ydate
22:33:30  39  /

View created.

Elapsed: 00:00:00.05
22:33:30 SQL> 
22:33:30 SQL> -- rpt
22:33:30 SQL> 
22:33:30 SQL> SELECT
22:33:30   2  pair
22:33:30   3  ,COUNT(pair)
22:33:30   4  ,MIN(clse),MAX(clse)
22:33:30   5  ,MIN(avg6),MAX(avg6)
22:33:30   6  ,MIN(ydate),MAX(ydate)
22:33:30   7  FROM svm6102
22:33:30   8  GROUP BY pair
22:33:30   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_usd       19832    1.29735	   1.4273 1.29875103 1.42436233 2010-09-27 22:35:01 2010-12-31 21:55:00

Elapsed: 00:00:00.94
22:33:31 SQL> 
22:33:31 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
22:33:31 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.49
22:33:31 SQL> CREATE TABLE svm6122 COMPRESS AS
22:33:31   2  SELECT
22:33:31   3  pair
22:33:31   4  ,ydate
22:33:31   5  ,prdate
22:33:31   6  ,clse
22:33:31   7  -- g6 is important. I want to predict g6:
22:33:31   8  ,ld6 - clse g6
22:33:31   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
22:33:31  10  -- I want more attributes from the ones I derived above:
22:33:31  11  -- clse relation to moving-min
22:33:31  12  ,clse-min4  cm4
22:33:31  13  ,clse-min6  cm6
22:33:31  14  ,clse-min8  cm8
22:33:31  15  ,clse-min10 cm10
22:33:31  16  ,clse-min12 cm12
22:33:31  17  ,clse-min14 cm14
22:33:31  18  ,clse-min16 cm16
22:33:31  19  ,clse-min18 cm18
22:33:31  20  -- clse relation to moving-avg
22:33:31  21  ,clse-avg4  ca4
22:33:31  22  ,clse-avg6  ca6
22:33:31  23  ,clse-avg8  ca8
22:33:31  24  ,clse-avg10 ca10
22:33:31  25  ,clse-avg12 ca12
22:33:31  26  ,clse-avg14 ca14
22:33:31  27  ,clse-avg16 ca16
22:33:31  28  ,clse-avg18 ca18
22:33:31  29  -- clse relation to moving-max
22:33:31  30  ,clse-max4  cx4
22:33:31  31  ,clse-max6  cx6
22:33:31  32  ,clse-max8  cx8
22:33:31  33  ,clse-max10 cx10
22:33:31  34  ,clse-max12 cx12
22:33:31  35  ,clse-max14 cx14
22:33:31  36  ,clse-max16 cx16
22:33:31  37  ,clse-max18 cx18
22:33:31  38  -- Derive more attributes.
22:33:31  39  -- I want to use CORR() here to help SVM see the shape of the series.
22:33:31  40  -- But COVAR_POP is more stable:
22:33:31  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
22:33:31  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
22:33:31  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
22:33:31  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
22:33:31  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
22:33:31  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
22:33:31  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
22:33:31  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
22:33:31  49  -- Derive date related attributes:
22:33:31  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:33:31  51  ,0+TO_CHAR(ydate,'D')d
22:33:31  52  ,0+TO_CHAR(ydate,'W')w
22:33:31  53  -- mpm stands for minutes-past-midnight:
22:33:31  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:33:31  55  -- mph stands for minutes-past-hour:
22:33:31  56  ,0+TO_CHAR(ydate,'MI')mph
22:33:31  57  FROM svm6102
22:33:31  58  ORDER BY ydate
22:33:31  59  /

Table created.

Elapsed: 00:00:02.36
22:33:34 SQL> 
22:33:34 SQL> -- rpt
22:33:34 SQL> 
22:33:34 SQL> SELECT
22:33:34   2  pair
22:33:34   3  ,COUNT(pair)
22:33:34   4  ,MIN(clse),MAX(clse)
22:33:34   5  ,MIN(ydate),MAX(ydate)
22:33:34   6  FROM svm6122
22:33:34   7  GROUP BY pair
22:33:34   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_usd       19832    1.29735	   1.4273 2010-09-27 22:35:01 2010-12-31 21:55:00

Elapsed: 00:00:00.04
22:33:34 SQL> 
22:33:34 SQL> -- Prepare for derivation of NTILE based params:
22:33:34 SQL> 
22:33:34 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.38
22:33:34 SQL> CREATE TABLE svm6142 COMPRESS AS
22:33:34   2  SELECT
22:33:34   3  pair
22:33:34   4  ,ydate
22:33:34   5  ,prdate
22:33:34   6  ,clse
22:33:34   7  ,g6
22:33:34   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
22:33:34   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
22:33:34  10  ,CASE WHEN trend IS NULL THEN 1
22:33:34  11  	    WHEN trend =0      THEN 1
22:33:34  12  	    ELSE trend END trend
22:33:34  13  ,cm4
22:33:34  14  ,cm6
22:33:34  15  ,cm8
22:33:34  16  ,cm10
22:33:34  17  ,cm12
22:33:34  18  ,cm14
22:33:34  19  ,cm16
22:33:34  20  ,cm18
22:33:34  21  --
22:33:34  22  ,ca4
22:33:34  23  ,ca6
22:33:34  24  ,ca8
22:33:34  25  ,ca10
22:33:34  26  ,ca12
22:33:34  27  ,ca14
22:33:34  28  ,ca16
22:33:34  29  ,ca18
22:33:34  30  --
22:33:34  31  ,cx4
22:33:34  32  ,cx6
22:33:34  33  ,cx8
22:33:34  34  ,cx10
22:33:34  35  ,cx12
22:33:34  36  ,cx14
22:33:34  37  ,cx16
22:33:34  38  ,cx18
22:33:34  39  --
22:33:34  40  ,crr4
22:33:34  41  ,crr6
22:33:34  42  ,crr8
22:33:34  43  ,crr10
22:33:34  44  ,crr12
22:33:34  45  ,crr14
22:33:34  46  ,crr16
22:33:34  47  ,crr18
22:33:34  48  --
22:33:34  49  ,hh
22:33:34  50  ,d
22:33:34  51  ,w
22:33:34  52  ,mpm
22:33:34  53  ,mph
22:33:34  54  FROM svm6122
22:33:34  55  ORDER BY ydate
22:33:34  56  /

Table created.

Elapsed: 00:00:00.36
22:33:35 SQL> 
22:33:35 SQL> -- rpt
22:33:35 SQL> 
22:33:35 SQL> SELECT
22:33:35   2  pair
22:33:35   3  ,trend
22:33:35   4  ,gatt
22:33:35   5  ,COUNT(pair)
22:33:35   6  ,AVG(g6)
22:33:35   7  FROM svm6142
22:33:35   8  GROUP BY pair,trend,gatt
22:33:35   9  ORDER BY pair,trend,gatt
22:33:35  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      5985 -.00311572
eur_usd 	-1 up	      3687 .004525085
eur_usd 	-1		46
eur_usd 	 1 nup	      6092 -.00306642
eur_usd 	 1 up	      3996 .005034641
eur_usd 	 1		26

6 rows selected.

Elapsed: 00:00:00.15
22:33:35 SQL> 
22:33:35 SQL> 
22:33:35 SQL> -- Derive NTILE based params:
22:33:35 SQL> 
22:33:35 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.86
22:33:36 SQL> CREATE TABLE svm6162 COMPRESS AS
22:33:36   2  SELECT
22:33:36   3  pair
22:33:36   4  ,ydate
22:33:36   5  ,prdate
22:33:36   6  ,clse
22:33:36   7  ,g6
22:33:36   8  ,gatt
22:33:36   9  ,gattn
22:33:36  10  ,trend
22:33:36  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
22:33:36  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
22:33:36  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
22:33:36  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
22:33:36  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
22:33:36  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
22:33:36  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
22:33:36  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
22:33:36  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
22:33:36  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
22:33:36  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
22:33:36  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
22:33:36  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
22:33:36  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
22:33:36  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
22:33:36  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
22:33:36  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
22:33:36  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
22:33:36  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
22:33:36  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
22:33:36  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
22:33:36  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
22:33:36  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
22:33:36  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
22:33:36  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
22:33:36  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
22:33:36  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
22:33:36  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
22:33:36  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
22:33:36  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
22:33:36  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
22:33:36  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
22:33:36  43  ,hh  att32
22:33:36  44  ,d   att33
22:33:36  45  ,w   att34
22:33:36  46  ,mpm att35
22:33:36  47  ,mph att36
22:33:36  48  ,trend att37
22:33:36  49  FROM svm6142
22:33:36  50  ORDER BY ydate
22:33:36  51  /

Table created.

Elapsed: 00:00:04.82
22:33:40 SQL> 
22:33:40 SQL> -- rpt
22:33:40 SQL> 
22:33:40 SQL> SELECT
22:33:40   2  pair
22:33:40   3  ,trend
22:33:40   4  ,gatt
22:33:40   5  ,COUNT(pair)
22:33:40   6  ,AVG(g6)
22:33:40   7  FROM svm6162
22:33:40   8  GROUP BY pair,trend,gatt
22:33:40   9  ORDER BY pair,trend,gatt
22:33:40  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      5985 -.00311572
eur_usd 	-1 up	      3687 .004525085
eur_usd 	-1		46
eur_usd 	 1 nup	      6092 -.00306642
eur_usd 	 1 up	      3996 .005034641
eur_usd 	 1		26

6 rows selected.

Elapsed: 00:00:00.04
22:33:40 SQL> 
22:33:40 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.18
22:33:41 SQL> CREATE TABLE modsrc COMPRESS AS
22:33:41   2  SELECT
22:33:41   3  pair
22:33:41   4  ,ydate
22:33:41   5  ,prdate
22:33:41   6  ,trend
22:33:41   7  ,g6
22:33:41   8  ,gatt
22:33:41   9  ,gattn
22:33:41  10  FROM svm6162
22:33:41  11  /

Table created.

Elapsed: 00:00:00.08
22:33:41 SQL> 
22:33:41 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.27
22:33:41 SQL> 
22:33:41 SQL> DROP   TABLE eur_ms610 ;

Table dropped.

Elapsed: 00:00:00.17
22:33:41 SQL> CREATE TABLE eur_ms610 COMPRESS AS
22:33:41   2  SELECT
22:33:41   3  ydate
22:33:41   4  ,trend eur_trend
22:33:41   5  ,g6    eur_g6
22:33:41   6  ,gatt  eur_gatt
22:33:41   7  ,gattn eur_gattn
22:33:41   8  FROM modsrc
22:33:41   9  /

Table created.

Elapsed: 00:00:00.07
22:33:41 SQL> 
22:33:41 SQL> ANALYZE TABLE eur_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
22:33:41 SQL> 
22:33:41 SQL> -- I need a copy of the attributes:
22:33:41 SQL> 
22:33:41 SQL> 
22:33:41 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.13
22:33:42 SQL> CREATE TABLE eur_att COMPRESS AS
22:33:42   2  SELECT
22:33:42   3  ydate
22:33:42   4  ,att00 eur_att00
22:33:42   5  ,att01 eur_att01
22:33:42   6  ,att02 eur_att02
22:33:42   7  ,att03 eur_att03
22:33:42   8  ,att04 eur_att04
22:33:42   9  ,att05 eur_att05
22:33:42  10  ,att06 eur_att06
22:33:42  11  ,att07 eur_att07
22:33:42  12  ,att08 eur_att08
22:33:42  13  ,att09 eur_att09
22:33:42  14  ,att10 eur_att10
22:33:42  15  ,att11 eur_att11
22:33:42  16  ,att12 eur_att12
22:33:42  17  ,att13 eur_att13
22:33:42  18  ,att14 eur_att14
22:33:42  19  ,att15 eur_att15
22:33:42  20  ,att16 eur_att16
22:33:42  21  ,att17 eur_att17
22:33:42  22  ,att18 eur_att18
22:33:42  23  ,att19 eur_att19
22:33:42  24  ,att20 eur_att20
22:33:42  25  ,att21 eur_att21
22:33:42  26  ,att22 eur_att22
22:33:42  27  ,att23 eur_att23
22:33:42  28  ,att24 eur_att24
22:33:42  29  ,att25 eur_att25
22:33:42  30  ,att26 eur_att26
22:33:42  31  ,att27 eur_att27
22:33:42  32  ,att28 eur_att28
22:33:42  33  ,att29 eur_att29
22:33:42  34  ,att30 eur_att30
22:33:42  35  ,att31 eur_att31
22:33:42  36  ,att32 eur_att32
22:33:42  37  ,att33 eur_att33
22:33:42  38  ,att34 eur_att34
22:33:42  39  ,att35 eur_att35
22:33:42  40  ,att36 eur_att36
22:33:42  41  ,att37 eur_att37
22:33:42  42  FROM svm6162
22:33:42  43  /

Table created.

Elapsed: 00:00:00.17
22:33:42 SQL> 
22:33:42 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.44
22:33:42 SQL> 
22:33:42 SQL> -- rpt
22:33:42 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19832

Elapsed: 00:00:00.89
22:33:43 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     19832

Elapsed: 00:00:00.00
22:33:43 SQL> 
22:33:43 SQL> --
22:33:43 SQL> -- aud610.sql
22:33:43 SQL> --
22:33:43 SQL> 
22:33:43 SQL> -- Creates views and tables for backtesting a forex SVM strategy
22:33:43 SQL> 
22:33:43 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.39
22:33:43 SQL> 
22:33:43 SQL> -- I created di5min here:
22:33:43 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
22:33:43 SQL> 
22:33:43 SQL> CREATE OR REPLACE VIEW svm6102 AS
22:33:43   2  SELECT
22:33:43   3  pair
22:33:43   4  ,ydate
22:33:43   5  ,prdate
22:33:43   6  ,rownum rnum -- acts as t in my time-series
22:33:43   7  ,clse
22:33:43   8  -- Derive a bunch of attributes from clse, the latest price:
22:33:43   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
22:33:43  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
22:33:43  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
22:33:43  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
22:33:43  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
22:33:43  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
22:33:43  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
22:33:43  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
22:33:43  17  --
22:33:43  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
22:33:43  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
22:33:43  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
22:33:43  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
22:33:43  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
22:33:43  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
22:33:43  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
22:33:43  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
22:33:43  26  --
22:33:43  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
22:33:43  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
22:33:43  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
22:33:43  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
22:33:43  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
22:33:43  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
22:33:43  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
22:33:43  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
22:33:43  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
22:33:43  36  FROM di5min WHERE pair LIKE'%aud%'
22:33:43  37  AND ydate > sysdate - 95
22:33:43  38  ORDER BY ydate
22:33:43  39  /

View created.

Elapsed: 00:00:00.05
22:33:43 SQL> 
22:33:43 SQL> -- rpt
22:33:43 SQL> 
22:33:43 SQL> SELECT
22:33:43   2  pair
22:33:43   3  ,COUNT(pair)
22:33:43   4  ,MIN(clse),MAX(clse)
22:33:43   5  ,MIN(avg6),MAX(avg6)
22:33:43   6  ,MIN(ydate),MAX(ydate)
22:33:43   7  FROM svm6102
22:33:43   8  GROUP BY pair
22:33:43   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
aud_usd       19829	.95405	  1.02495 .957141438 1.02284247 2010-09-27 22:35:01 2010-12-31 21:55:00

Elapsed: 00:00:00.87
22:33:44 SQL> 
22:33:44 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
22:33:44 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.28
22:33:45 SQL> CREATE TABLE svm6122 COMPRESS AS
22:33:45   2  SELECT
22:33:45   3  pair
22:33:45   4  ,ydate
22:33:45   5  ,prdate
22:33:45   6  ,clse
22:33:45   7  -- g6 is important. I want to predict g6:
22:33:45   8  ,ld6 - clse g6
22:33:45   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
22:33:45  10  -- I want more attributes from the ones I derived above:
22:33:45  11  -- clse relation to moving-min
22:33:45  12  ,clse-min4  cm4
22:33:45  13  ,clse-min6  cm6
22:33:45  14  ,clse-min8  cm8
22:33:45  15  ,clse-min10 cm10
22:33:45  16  ,clse-min12 cm12
22:33:45  17  ,clse-min14 cm14
22:33:45  18  ,clse-min16 cm16
22:33:45  19  ,clse-min18 cm18
22:33:45  20  -- clse relation to moving-avg
22:33:45  21  ,clse-avg4  ca4
22:33:45  22  ,clse-avg6  ca6
22:33:45  23  ,clse-avg8  ca8
22:33:45  24  ,clse-avg10 ca10
22:33:45  25  ,clse-avg12 ca12
22:33:45  26  ,clse-avg14 ca14
22:33:45  27  ,clse-avg16 ca16
22:33:45  28  ,clse-avg18 ca18
22:33:45  29  -- clse relation to moving-max
22:33:45  30  ,clse-max4  cx4
22:33:45  31  ,clse-max6  cx6
22:33:45  32  ,clse-max8  cx8
22:33:45  33  ,clse-max10 cx10
22:33:45  34  ,clse-max12 cx12
22:33:45  35  ,clse-max14 cx14
22:33:45  36  ,clse-max16 cx16
22:33:45  37  ,clse-max18 cx18
22:33:45  38  -- Derive more attributes.
22:33:45  39  -- I want to use CORR() here to help SVM see the shape of the series.
22:33:45  40  -- But COVAR_POP is more stable:
22:33:45  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
22:33:45  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
22:33:45  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
22:33:45  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
22:33:45  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
22:33:45  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
22:33:45  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
22:33:45  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
22:33:45  49  -- Derive date related attributes:
22:33:45  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:33:45  51  ,0+TO_CHAR(ydate,'D')d
22:33:45  52  ,0+TO_CHAR(ydate,'W')w
22:33:45  53  -- mpm stands for minutes-past-midnight:
22:33:45  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:33:45  55  -- mph stands for minutes-past-hour:
22:33:45  56  ,0+TO_CHAR(ydate,'MI')mph
22:33:45  57  FROM svm6102
22:33:45  58  ORDER BY ydate
22:33:45  59  /

Table created.

Elapsed: 00:00:02.09
22:33:47 SQL> 
22:33:47 SQL> -- rpt
22:33:47 SQL> 
22:33:47 SQL> SELECT
22:33:47   2  pair
22:33:47   3  ,COUNT(pair)
22:33:47   4  ,MIN(clse),MAX(clse)
22:33:47   5  ,MIN(ydate),MAX(ydate)
22:33:47   6  FROM svm6122
22:33:47   7  GROUP BY pair
22:33:47   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
aud_usd       19829	.95405	  1.02495 2010-09-27 22:35:01 2010-12-31 21:55:00

Elapsed: 00:00:00.06
22:33:47 SQL> 
22:33:47 SQL> -- Prepare for derivation of NTILE based params:
22:33:47 SQL> 
22:33:47 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.21
22:33:47 SQL> CREATE TABLE svm6142 COMPRESS AS
22:33:47   2  SELECT
22:33:47   3  pair
22:33:47   4  ,ydate
22:33:47   5  ,prdate
22:33:47   6  ,clse
22:33:47   7  ,g6
22:33:47   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
22:33:47   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
22:33:47  10  ,CASE WHEN trend IS NULL THEN 1
22:33:47  11  	    WHEN trend =0      THEN 1
22:33:47  12  	    ELSE trend END trend
22:33:47  13  ,cm4
22:33:47  14  ,cm6
22:33:47  15  ,cm8
22:33:47  16  ,cm10
22:33:47  17  ,cm12
22:33:47  18  ,cm14
22:33:47  19  ,cm16
22:33:47  20  ,cm18
22:33:47  21  --
22:33:47  22  ,ca4
22:33:47  23  ,ca6
22:33:47  24  ,ca8
22:33:47  25  ,ca10
22:33:47  26  ,ca12
22:33:47  27  ,ca14
22:33:47  28  ,ca16
22:33:47  29  ,ca18
22:33:47  30  --
22:33:47  31  ,cx4
22:33:47  32  ,cx6
22:33:47  33  ,cx8
22:33:47  34  ,cx10
22:33:47  35  ,cx12
22:33:47  36  ,cx14
22:33:47  37  ,cx16
22:33:47  38  ,cx18
22:33:47  39  --
22:33:47  40  ,crr4
22:33:47  41  ,crr6
22:33:47  42  ,crr8
22:33:47  43  ,crr10
22:33:47  44  ,crr12
22:33:47  45  ,crr14
22:33:47  46  ,crr16
22:33:47  47  ,crr18
22:33:47  48  --
22:33:47  49  ,hh
22:33:47  50  ,d
22:33:47  51  ,w
22:33:47  52  ,mpm
22:33:47  53  ,mph
22:33:47  54  FROM svm6122
22:33:47  55  ORDER BY ydate
22:33:47  56  /

Table created.

Elapsed: 00:00:00.37
22:33:47 SQL> 
22:33:47 SQL> -- rpt
22:33:47 SQL> 
22:33:47 SQL> SELECT
22:33:47   2  pair
22:33:47   3  ,trend
22:33:47   4  ,gatt
22:33:47   5  ,COUNT(pair)
22:33:47   6  ,AVG(g6)
22:33:47   7  FROM svm6142
22:33:47   8  GROUP BY pair,trend,gatt
22:33:47   9  ORDER BY pair,trend,gatt
22:33:47  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5191 -.00213644
aud_usd 	-1 up	      3869  .00373518
aud_usd 	 1 nup	      6881 -.00206833
aud_usd 	 1 up	      3816 .004036327
aud_usd 	 1		72

Elapsed: 00:00:00.13
22:33:48 SQL> 
22:33:48 SQL> 
22:33:48 SQL> -- Derive NTILE based params:
22:33:48 SQL> 
22:33:48 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.12
22:33:48 SQL> CREATE TABLE svm6162 COMPRESS AS
22:33:48   2  SELECT
22:33:48   3  pair
22:33:48   4  ,ydate
22:33:48   5  ,prdate
22:33:48   6  ,clse
22:33:48   7  ,g6
22:33:48   8  ,gatt
22:33:48   9  ,gattn
22:33:48  10  ,trend
22:33:48  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
22:33:48  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
22:33:48  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
22:33:48  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
22:33:48  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
22:33:48  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
22:33:48  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
22:33:48  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
22:33:48  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
22:33:48  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
22:33:48  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
22:33:48  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
22:33:48  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
22:33:48  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
22:33:48  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
22:33:48  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
22:33:48  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
22:33:48  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
22:33:48  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
22:33:48  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
22:33:48  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
22:33:48  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
22:33:48  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
22:33:48  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
22:33:48  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
22:33:48  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
22:33:48  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
22:33:48  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
22:33:48  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
22:33:48  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
22:33:48  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
22:33:48  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
22:33:48  43  ,hh  att32
22:33:48  44  ,d   att33
22:33:48  45  ,w   att34
22:33:48  46  ,mpm att35
22:33:48  47  ,mph att36
22:33:48  48  ,trend att37
22:33:48  49  FROM svm6142
22:33:48  50  ORDER BY ydate
22:33:48  51  /

Table created.

Elapsed: 00:00:04.79
22:33:52 SQL> 
22:33:52 SQL> -- rpt
22:33:52 SQL> 
22:33:52 SQL> SELECT
22:33:52   2  pair
22:33:52   3  ,trend
22:33:52   4  ,gatt
22:33:52   5  ,COUNT(pair)
22:33:52   6  ,AVG(g6)
22:33:52   7  FROM svm6162
22:33:52   8  GROUP BY pair,trend,gatt
22:33:52   9  ORDER BY pair,trend,gatt
22:33:52  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5191 -.00213644
aud_usd 	-1 up	      3869  .00373518
aud_usd 	 1 nup	      6881 -.00206833
aud_usd 	 1 up	      3816 .004036327
aud_usd 	 1		72

Elapsed: 00:00:00.04
22:33:52 SQL> 
22:33:52 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
22:33:53 SQL> CREATE TABLE modsrc COMPRESS AS
22:33:53   2  SELECT
22:33:53   3  pair
22:33:53   4  ,ydate
22:33:53   5  ,prdate
22:33:53   6  ,trend
22:33:53   7  ,g6
22:33:53   8  ,gatt
22:33:53   9  ,gattn
22:33:53  10  FROM svm6162
22:33:53  11  /

Table created.

Elapsed: 00:00:00.09
22:33:53 SQL> 
22:33:53 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
22:33:53 SQL> 
22:33:53 SQL> DROP   TABLE aud_ms610 ;

Table dropped.

Elapsed: 00:00:00.09
22:33:53 SQL> CREATE TABLE aud_ms610 COMPRESS AS
22:33:53   2  SELECT
22:33:53   3  ydate
22:33:53   4  ,trend aud_trend
22:33:53   5  ,g6    aud_g6
22:33:53   6  ,gatt  aud_gatt
22:33:53   7  ,gattn aud_gattn
22:33:53   8  FROM modsrc
22:33:53   9  /

Table created.

Elapsed: 00:00:00.07
22:33:53 SQL> 
22:33:53 SQL> ANALYZE TABLE aud_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
22:33:53 SQL> 
22:33:53 SQL> -- I need a copy of the attributes:
22:33:53 SQL> 
22:33:53 SQL> 
22:33:53 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.05
22:33:53 SQL> CREATE TABLE aud_att COMPRESS AS
22:33:53   2  SELECT
22:33:53   3  ydate
22:33:53   4  ,att00 aud_att00
22:33:53   5  ,att01 aud_att01
22:33:53   6  ,att02 aud_att02
22:33:53   7  ,att03 aud_att03
22:33:53   8  ,att04 aud_att04
22:33:53   9  ,att05 aud_att05
22:33:53  10  ,att06 aud_att06
22:33:53  11  ,att07 aud_att07
22:33:53  12  ,att08 aud_att08
22:33:53  13  ,att09 aud_att09
22:33:53  14  ,att10 aud_att10
22:33:53  15  ,att11 aud_att11
22:33:53  16  ,att12 aud_att12
22:33:53  17  ,att13 aud_att13
22:33:53  18  ,att14 aud_att14
22:33:53  19  ,att15 aud_att15
22:33:53  20  ,att16 aud_att16
22:33:53  21  ,att17 aud_att17
22:33:53  22  ,att18 aud_att18
22:33:53  23  ,att19 aud_att19
22:33:53  24  ,att20 aud_att20
22:33:53  25  ,att21 aud_att21
22:33:53  26  ,att22 aud_att22
22:33:53  27  ,att23 aud_att23
22:33:53  28  ,att24 aud_att24
22:33:53  29  ,att25 aud_att25
22:33:53  30  ,att26 aud_att26
22:33:53  31  ,att27 aud_att27
22:33:53  32  ,att28 aud_att28
22:33:53  33  ,att29 aud_att29
22:33:53  34  ,att30 aud_att30
22:33:53  35  ,att31 aud_att31
22:33:53  36  ,att32 aud_att32
22:33:53  37  ,att33 aud_att33
22:33:53  38  ,att34 aud_att34
22:33:53  39  ,att35 aud_att35
22:33:53  40  ,att36 aud_att36
22:33:53  41  ,att37 aud_att37
22:33:53  42  FROM svm6162
22:33:53  43  /

Table created.

Elapsed: 00:00:00.16
22:33:53 SQL> 
22:33:53 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.43
22:33:54 SQL> 
22:33:54 SQL> -- rpt
22:33:54 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19829

Elapsed: 00:00:00.86
22:33:55 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     19829

Elapsed: 00:00:00.00
22:33:55 SQL> 
22:33:55 SQL> --
22:33:55 SQL> -- gbp610.sql
22:33:55 SQL> --
22:33:55 SQL> 
22:33:55 SQL> -- Creates views and tables for backtesting a forex SVM strategy
22:33:55 SQL> 
22:33:55 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:01.72
22:33:56 SQL> 
22:33:56 SQL> -- I created di5min here:
22:33:56 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
22:33:56 SQL> 
22:33:56 SQL> CREATE OR REPLACE VIEW svm6102 AS
22:33:56   2  SELECT
22:33:56   3  pair
22:33:56   4  ,ydate
22:33:56   5  ,prdate
22:33:56   6  ,rownum rnum -- acts as t in my time-series
22:33:56   7  ,clse
22:33:56   8  -- Derive a bunch of attributes from clse, the latest price:
22:33:56   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
22:33:56  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
22:33:56  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
22:33:56  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
22:33:56  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
22:33:56  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
22:33:56  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
22:33:56  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
22:33:56  17  --
22:33:56  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
22:33:56  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
22:33:56  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
22:33:56  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
22:33:56  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
22:33:56  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
22:33:56  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
22:33:56  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
22:33:56  26  --
22:33:56  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
22:33:56  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
22:33:56  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
22:33:56  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
22:33:56  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
22:33:56  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
22:33:56  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
22:33:56  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
22:33:56  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
22:33:56  36  FROM di5min WHERE pair LIKE'%gbp%'
22:33:56  37  AND ydate > sysdate - 95
22:33:56  38  ORDER BY ydate
22:33:56  39  /

View created.

Elapsed: 00:00:00.04
22:33:56 SQL> 
22:33:56 SQL> -- rpt
22:33:56 SQL> 
22:33:56 SQL> SELECT
22:33:56   2  pair
22:33:56   3  ,COUNT(pair)
22:33:56   4  ,MIN(clse),MAX(clse)
22:33:56   5  ,MIN(avg6),MAX(avg6)
22:33:56   6  ,MIN(ydate),MAX(ydate)
22:33:56   7  FROM svm6102
22:33:56   8  GROUP BY pair
22:33:56   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
gbp_usd       19831   1.535325	   1.6295 1.53696747 1.62716986 2010-09-27 22:35:01 2010-12-31 21:55:00

Elapsed: 00:00:00.90
22:33:57 SQL> 
22:33:57 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
22:33:57 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.29
22:33:58 SQL> CREATE TABLE svm6122 COMPRESS AS
22:33:58   2  SELECT
22:33:58   3  pair
22:33:58   4  ,ydate
22:33:58   5  ,prdate
22:33:58   6  ,clse
22:33:58   7  -- g6 is important. I want to predict g6:
22:33:58   8  ,ld6 - clse g6
22:33:58   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
22:33:58  10  -- I want more attributes from the ones I derived above:
22:33:58  11  -- clse relation to moving-min
22:33:58  12  ,clse-min4  cm4
22:33:58  13  ,clse-min6  cm6
22:33:58  14  ,clse-min8  cm8
22:33:58  15  ,clse-min10 cm10
22:33:58  16  ,clse-min12 cm12
22:33:58  17  ,clse-min14 cm14
22:33:58  18  ,clse-min16 cm16
22:33:58  19  ,clse-min18 cm18
22:33:58  20  -- clse relation to moving-avg
22:33:58  21  ,clse-avg4  ca4
22:33:58  22  ,clse-avg6  ca6
22:33:58  23  ,clse-avg8  ca8
22:33:58  24  ,clse-avg10 ca10
22:33:58  25  ,clse-avg12 ca12
22:33:58  26  ,clse-avg14 ca14
22:33:58  27  ,clse-avg16 ca16
22:33:58  28  ,clse-avg18 ca18
22:33:58  29  -- clse relation to moving-max
22:33:58  30  ,clse-max4  cx4
22:33:58  31  ,clse-max6  cx6
22:33:58  32  ,clse-max8  cx8
22:33:58  33  ,clse-max10 cx10
22:33:58  34  ,clse-max12 cx12
22:33:58  35  ,clse-max14 cx14
22:33:58  36  ,clse-max16 cx16
22:33:58  37  ,clse-max18 cx18
22:33:58  38  -- Derive more attributes.
22:33:58  39  -- I want to use CORR() here to help SVM see the shape of the series.
22:33:58  40  -- But COVAR_POP is more stable:
22:33:58  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
22:33:58  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
22:33:58  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
22:33:58  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
22:33:58  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
22:33:58  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
22:33:58  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
22:33:58  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
22:33:58  49  -- Derive date related attributes:
22:33:58  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:33:58  51  ,0+TO_CHAR(ydate,'D')d
22:33:58  52  ,0+TO_CHAR(ydate,'W')w
22:33:58  53  -- mpm stands for minutes-past-midnight:
22:33:58  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:33:58  55  -- mph stands for minutes-past-hour:
22:33:58  56  ,0+TO_CHAR(ydate,'MI')mph
22:33:58  57  FROM svm6102
22:33:58  58  ORDER BY ydate
22:33:58  59  /

Table created.

Elapsed: 00:00:02.14
22:34:00 SQL> 
22:34:00 SQL> -- rpt
22:34:00 SQL> 
22:34:00 SQL> SELECT
22:34:00   2  pair
22:34:00   3  ,COUNT(pair)
22:34:00   4  ,MIN(clse),MAX(clse)
22:34:00   5  ,MIN(ydate),MAX(ydate)
22:34:00   6  FROM svm6122
22:34:00   7  GROUP BY pair
22:34:00   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
gbp_usd       19831   1.535325	   1.6295 2010-09-27 22:35:01 2010-12-31 21:55:00

Elapsed: 00:00:00.04
22:34:00 SQL> 
22:34:00 SQL> -- Prepare for derivation of NTILE based params:
22:34:00 SQL> 
22:34:00 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.16
22:34:00 SQL> CREATE TABLE svm6142 COMPRESS AS
22:34:00   2  SELECT
22:34:00   3  pair
22:34:00   4  ,ydate
22:34:00   5  ,prdate
22:34:00   6  ,clse
22:34:00   7  ,g6
22:34:00   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
22:34:00   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
22:34:00  10  ,CASE WHEN trend IS NULL THEN 1
22:34:00  11  	    WHEN trend =0      THEN 1
22:34:00  12  	    ELSE trend END trend
22:34:00  13  ,cm4
22:34:00  14  ,cm6
22:34:00  15  ,cm8
22:34:00  16  ,cm10
22:34:00  17  ,cm12
22:34:00  18  ,cm14
22:34:00  19  ,cm16
22:34:00  20  ,cm18
22:34:00  21  --
22:34:00  22  ,ca4
22:34:00  23  ,ca6
22:34:00  24  ,ca8
22:34:00  25  ,ca10
22:34:00  26  ,ca12
22:34:00  27  ,ca14
22:34:00  28  ,ca16
22:34:00  29  ,ca18
22:34:00  30  --
22:34:00  31  ,cx4
22:34:00  32  ,cx6
22:34:00  33  ,cx8
22:34:00  34  ,cx10
22:34:00  35  ,cx12
22:34:00  36  ,cx14
22:34:00  37  ,cx16
22:34:00  38  ,cx18
22:34:00  39  --
22:34:00  40  ,crr4
22:34:00  41  ,crr6
22:34:00  42  ,crr8
22:34:00  43  ,crr10
22:34:00  44  ,crr12
22:34:00  45  ,crr14
22:34:00  46  ,crr16
22:34:00  47  ,crr18
22:34:00  48  --
22:34:00  49  ,hh
22:34:00  50  ,d
22:34:00  51  ,w
22:34:00  52  ,mpm
22:34:00  53  ,mph
22:34:00  54  FROM svm6122
22:34:00  55  ORDER BY ydate
22:34:00  56  /

Table created.

Elapsed: 00:00:00.37
22:34:00 SQL> 
22:34:00 SQL> -- rpt
22:34:00 SQL> 
22:34:00 SQL> SELECT
22:34:00   2  pair
22:34:00   3  ,trend
22:34:00   4  ,gatt
22:34:00   5  ,COUNT(pair)
22:34:00   6  ,AVG(g6)
22:34:00   7  FROM svm6142
22:34:00   8  GROUP BY pair,trend,gatt
22:34:00   9  ORDER BY pair,trend,gatt
22:34:00  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6277 -.00263588
gbp_usd 	-1 up	      3589 .004299283
gbp_usd 	-1		 5
gbp_usd 	 1 nup	      6248 -.00268355
gbp_usd 	 1 up	      3645 .004467154
gbp_usd 	 1		67

6 rows selected.

Elapsed: 00:00:00.04
22:34:00 SQL> 
22:34:00 SQL> 
22:34:00 SQL> -- Derive NTILE based params:
22:34:00 SQL> 
22:34:00 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.13
22:34:01 SQL> CREATE TABLE svm6162 COMPRESS AS
22:34:01   2  SELECT
22:34:01   3  pair
22:34:01   4  ,ydate
22:34:01   5  ,prdate
22:34:01   6  ,clse
22:34:01   7  ,g6
22:34:01   8  ,gatt
22:34:01   9  ,gattn
22:34:01  10  ,trend
22:34:01  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
22:34:01  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
22:34:01  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
22:34:01  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
22:34:01  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
22:34:01  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
22:34:01  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
22:34:01  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
22:34:01  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
22:34:01  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
22:34:01  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
22:34:01  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
22:34:01  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
22:34:01  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
22:34:01  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
22:34:01  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
22:34:01  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
22:34:01  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
22:34:01  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
22:34:01  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
22:34:01  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
22:34:01  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
22:34:01  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
22:34:01  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
22:34:01  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
22:34:01  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
22:34:01  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
22:34:01  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
22:34:01  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
22:34:01  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
22:34:01  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
22:34:01  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
22:34:01  43  ,hh  att32
22:34:01  44  ,d   att33
22:34:01  45  ,w   att34
22:34:01  46  ,mpm att35
22:34:01  47  ,mph att36
22:34:01  48  ,trend att37
22:34:01  49  FROM svm6142
22:34:01  50  ORDER BY ydate
22:34:01  51  /

Table created.

Elapsed: 00:00:04.71
22:34:05 SQL> 
22:34:05 SQL> -- rpt
22:34:05 SQL> 
22:34:05 SQL> SELECT
22:34:05   2  pair
22:34:05   3  ,trend
22:34:05   4  ,gatt
22:34:05   5  ,COUNT(pair)
22:34:05   6  ,AVG(g6)
22:34:05   7  FROM svm6162
22:34:05   8  GROUP BY pair,trend,gatt
22:34:05   9  ORDER BY pair,trend,gatt
22:34:05  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6277 -.00263588
gbp_usd 	-1 up	      3589 .004299283
gbp_usd 	-1		 5
gbp_usd 	 1 nup	      6248 -.00268355
gbp_usd 	 1 up	      3645 .004467154
gbp_usd 	 1		67

6 rows selected.

Elapsed: 00:00:00.03
22:34:05 SQL> 
22:34:05 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
22:34:05 SQL> CREATE TABLE modsrc COMPRESS AS
22:34:05   2  SELECT
22:34:05   3  pair
22:34:05   4  ,ydate
22:34:05   5  ,prdate
22:34:05   6  ,trend
22:34:05   7  ,g6
22:34:05   8  ,gatt
22:34:05   9  ,gattn
22:34:05  10  FROM svm6162
22:34:05  11  /

Table created.

Elapsed: 00:00:00.08
22:34:05 SQL> 
22:34:05 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
22:34:06 SQL> 
22:34:06 SQL> DROP   TABLE gbp_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
22:34:06 SQL> CREATE TABLE gbp_ms610 COMPRESS AS
22:34:06   2  SELECT
22:34:06   3  ydate
22:34:06   4  ,trend gbp_trend
22:34:06   5  ,g6    gbp_g6
22:34:06   6  ,gatt  gbp_gatt
22:34:06   7  ,gattn gbp_gattn
22:34:06   8  FROM modsrc
22:34:06   9  /

Table created.

Elapsed: 00:00:00.06
22:34:06 SQL> 
22:34:06 SQL> ANALYZE TABLE gbp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
22:34:06 SQL> 
22:34:06 SQL> -- I need a copy of the attributes:
22:34:06 SQL> 
22:34:06 SQL> 
22:34:06 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.04
22:34:06 SQL> CREATE TABLE gbp_att COMPRESS AS
22:34:06   2  SELECT
22:34:06   3  ydate
22:34:06   4  ,att00 gbp_att00
22:34:06   5  ,att01 gbp_att01
22:34:06   6  ,att02 gbp_att02
22:34:06   7  ,att03 gbp_att03
22:34:06   8  ,att04 gbp_att04
22:34:06   9  ,att05 gbp_att05
22:34:06  10  ,att06 gbp_att06
22:34:06  11  ,att07 gbp_att07
22:34:06  12  ,att08 gbp_att08
22:34:06  13  ,att09 gbp_att09
22:34:06  14  ,att10 gbp_att10
22:34:06  15  ,att11 gbp_att11
22:34:06  16  ,att12 gbp_att12
22:34:06  17  ,att13 gbp_att13
22:34:06  18  ,att14 gbp_att14
22:34:06  19  ,att15 gbp_att15
22:34:06  20  ,att16 gbp_att16
22:34:06  21  ,att17 gbp_att17
22:34:06  22  ,att18 gbp_att18
22:34:06  23  ,att19 gbp_att19
22:34:06  24  ,att20 gbp_att20
22:34:06  25  ,att21 gbp_att21
22:34:06  26  ,att22 gbp_att22
22:34:06  27  ,att23 gbp_att23
22:34:06  28  ,att24 gbp_att24
22:34:06  29  ,att25 gbp_att25
22:34:06  30  ,att26 gbp_att26
22:34:06  31  ,att27 gbp_att27
22:34:06  32  ,att28 gbp_att28
22:34:06  33  ,att29 gbp_att29
22:34:06  34  ,att30 gbp_att30
22:34:06  35  ,att31 gbp_att31
22:34:06  36  ,att32 gbp_att32
22:34:06  37  ,att33 gbp_att33
22:34:06  38  ,att34 gbp_att34
22:34:06  39  ,att35 gbp_att35
22:34:06  40  ,att36 gbp_att36
22:34:06  41  ,att37 gbp_att37
22:34:06  42  FROM svm6162
22:34:06  43  /

Table created.

Elapsed: 00:00:00.16
22:34:06 SQL> 
22:34:06 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
22:34:07 SQL> 
22:34:07 SQL> -- rpt
22:34:07 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19831

Elapsed: 00:00:00.86
22:34:07 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     19831

Elapsed: 00:00:00.00
22:34:07 SQL> 
22:34:07 SQL> --
22:34:07 SQL> -- jpy610.sql
22:34:07 SQL> --
22:34:07 SQL> 
22:34:07 SQL> -- Creates views and tables for backtesting a forex SVM strategy
22:34:07 SQL> 
22:34:07 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.47
22:34:08 SQL> 
22:34:08 SQL> -- I created di5min here:
22:34:08 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
22:34:08 SQL> 
22:34:08 SQL> CREATE OR REPLACE VIEW svm6102 AS
22:34:08   2  SELECT
22:34:08   3  pair
22:34:08   4  ,ydate
22:34:08   5  ,prdate
22:34:08   6  ,rownum rnum -- acts as t in my time-series
22:34:08   7  ,clse
22:34:08   8  -- Derive a bunch of attributes from clse, the latest price:
22:34:08   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
22:34:08  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
22:34:08  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
22:34:08  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
22:34:08  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
22:34:08  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
22:34:08  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
22:34:08  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
22:34:08  17  --
22:34:08  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
22:34:08  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
22:34:08  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
22:34:08  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
22:34:08  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
22:34:08  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
22:34:08  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
22:34:08  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
22:34:08  26  --
22:34:08  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
22:34:08  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
22:34:08  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
22:34:08  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
22:34:08  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
22:34:08  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
22:34:08  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
22:34:08  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
22:34:08  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
22:34:08  36  FROM di5min WHERE pair LIKE'%jpy%'
22:34:08  37  AND ydate > sysdate - 95
22:34:08  38  ORDER BY ydate
22:34:08  39  /

View created.

Elapsed: 00:00:00.06
22:34:08 SQL> 
22:34:08 SQL> -- rpt
22:34:08 SQL> 
22:34:08 SQL> SELECT
22:34:08   2  pair
22:34:08   3  ,COUNT(pair)
22:34:08   4  ,MIN(clse),MAX(clse)
22:34:08   5  ,MIN(avg6),MAX(avg6)
22:34:08   6  ,MIN(ydate),MAX(ydate)
22:34:08   7  FROM svm6102
22:34:08   8  GROUP BY pair
22:34:08   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_jpy       19829	 80.25	   84.485 80.3595205 84.3105479 2010-09-27 22:35:01 2010-12-31 21:55:00

Elapsed: 00:00:00.91
22:34:09 SQL> 
22:34:09 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
22:34:09 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.18
22:34:09 SQL> CREATE TABLE svm6122 COMPRESS AS
22:34:09   2  SELECT
22:34:09   3  pair
22:34:09   4  ,ydate
22:34:09   5  ,prdate
22:34:09   6  ,clse
22:34:09   7  -- g6 is important. I want to predict g6:
22:34:09   8  ,ld6 - clse g6
22:34:09   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
22:34:09  10  -- I want more attributes from the ones I derived above:
22:34:09  11  -- clse relation to moving-min
22:34:09  12  ,clse-min4  cm4
22:34:09  13  ,clse-min6  cm6
22:34:09  14  ,clse-min8  cm8
22:34:09  15  ,clse-min10 cm10
22:34:09  16  ,clse-min12 cm12
22:34:09  17  ,clse-min14 cm14
22:34:09  18  ,clse-min16 cm16
22:34:09  19  ,clse-min18 cm18
22:34:09  20  -- clse relation to moving-avg
22:34:09  21  ,clse-avg4  ca4
22:34:09  22  ,clse-avg6  ca6
22:34:09  23  ,clse-avg8  ca8
22:34:09  24  ,clse-avg10 ca10
22:34:09  25  ,clse-avg12 ca12
22:34:09  26  ,clse-avg14 ca14
22:34:09  27  ,clse-avg16 ca16
22:34:09  28  ,clse-avg18 ca18
22:34:09  29  -- clse relation to moving-max
22:34:09  30  ,clse-max4  cx4
22:34:09  31  ,clse-max6  cx6
22:34:09  32  ,clse-max8  cx8
22:34:09  33  ,clse-max10 cx10
22:34:09  34  ,clse-max12 cx12
22:34:09  35  ,clse-max14 cx14
22:34:09  36  ,clse-max16 cx16
22:34:09  37  ,clse-max18 cx18
22:34:09  38  -- Derive more attributes.
22:34:09  39  -- I want to use CORR() here to help SVM see the shape of the series.
22:34:09  40  -- But COVAR_POP is more stable:
22:34:09  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
22:34:09  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
22:34:09  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
22:34:09  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
22:34:09  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
22:34:09  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
22:34:09  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
22:34:09  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
22:34:09  49  -- Derive date related attributes:
22:34:09  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:34:09  51  ,0+TO_CHAR(ydate,'D')d
22:34:09  52  ,0+TO_CHAR(ydate,'W')w
22:34:09  53  -- mpm stands for minutes-past-midnight:
22:34:09  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:34:09  55  -- mph stands for minutes-past-hour:
22:34:09  56  ,0+TO_CHAR(ydate,'MI')mph
22:34:09  57  FROM svm6102
22:34:09  58  ORDER BY ydate
22:34:09  59  /

Table created.

Elapsed: 00:00:02.10
22:34:11 SQL> 
22:34:11 SQL> -- rpt
22:34:11 SQL> 
22:34:11 SQL> SELECT
22:34:11   2  pair
22:34:11   3  ,COUNT(pair)
22:34:11   4  ,MIN(clse),MAX(clse)
22:34:11   5  ,MIN(ydate),MAX(ydate)
22:34:11   6  FROM svm6122
22:34:11   7  GROUP BY pair
22:34:11   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_jpy       19829	 80.25	   84.485 2010-09-27 22:35:01 2010-12-31 21:55:00

Elapsed: 00:00:00.04
22:34:11 SQL> 
22:34:11 SQL> -- Prepare for derivation of NTILE based params:
22:34:11 SQL> 
22:34:11 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.23
22:34:11 SQL> CREATE TABLE svm6142 COMPRESS AS
22:34:11   2  SELECT
22:34:11   3  pair
22:34:11   4  ,ydate
22:34:11   5  ,prdate
22:34:11   6  ,clse
22:34:11   7  ,g6
22:34:11   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
22:34:11   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
22:34:11  10  ,CASE WHEN trend IS NULL THEN 1
22:34:11  11  	    WHEN trend =0      THEN 1
22:34:11  12  	    ELSE trend END trend
22:34:11  13  ,cm4
22:34:11  14  ,cm6
22:34:11  15  ,cm8
22:34:11  16  ,cm10
22:34:11  17  ,cm12
22:34:11  18  ,cm14
22:34:11  19  ,cm16
22:34:11  20  ,cm18
22:34:11  21  --
22:34:11  22  ,ca4
22:34:11  23  ,ca6
22:34:11  24  ,ca8
22:34:11  25  ,ca10
22:34:11  26  ,ca12
22:34:11  27  ,ca14
22:34:11  28  ,ca16
22:34:11  29  ,ca18
22:34:11  30  --
22:34:11  31  ,cx4
22:34:11  32  ,cx6
22:34:11  33  ,cx8
22:34:11  34  ,cx10
22:34:11  35  ,cx12
22:34:11  36  ,cx14
22:34:11  37  ,cx16
22:34:11  38  ,cx18
22:34:11  39  --
22:34:11  40  ,crr4
22:34:11  41  ,crr6
22:34:11  42  ,crr8
22:34:11  43  ,crr10
22:34:11  44  ,crr12
22:34:11  45  ,crr14
22:34:11  46  ,crr16
22:34:11  47  ,crr18
22:34:11  48  --
22:34:11  49  ,hh
22:34:11  50  ,d
22:34:11  51  ,w
22:34:11  52  ,mpm
22:34:11  53  ,mph
22:34:11  54  FROM svm6122
22:34:11  55  ORDER BY ydate
22:34:11  56  /

Table created.

Elapsed: 00:00:00.39
22:34:12 SQL> 
22:34:12 SQL> -- rpt
22:34:12 SQL> 
22:34:12 SQL> SELECT
22:34:12   2  pair
22:34:12   3  ,trend
22:34:12   4  ,gatt
22:34:12   5  ,COUNT(pair)
22:34:12   6  ,AVG(g6)
22:34:12   7  FROM svm6142
22:34:12   8  GROUP BY pair,trend,gatt
22:34:12   9  ORDER BY pair,trend,gatt
22:34:12  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5512 -.16518093
usd_jpy 	-1 up	      4972 .163401958
usd_jpy 	-1		65
usd_jpy 	 1 nup	      5136 -.15710038
usd_jpy 	 1 up	      4137  .16563732
usd_jpy 	 1		 7

6 rows selected.

Elapsed: 00:00:00.04
22:34:12 SQL> 
22:34:12 SQL> 
22:34:12 SQL> -- Derive NTILE based params:
22:34:12 SQL> 
22:34:12 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.18
22:34:12 SQL> CREATE TABLE svm6162 COMPRESS AS
22:34:12   2  SELECT
22:34:12   3  pair
22:34:12   4  ,ydate
22:34:12   5  ,prdate
22:34:12   6  ,clse
22:34:12   7  ,g6
22:34:12   8  ,gatt
22:34:12   9  ,gattn
22:34:12  10  ,trend
22:34:12  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
22:34:12  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
22:34:12  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
22:34:12  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
22:34:12  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
22:34:12  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
22:34:12  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
22:34:12  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
22:34:12  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
22:34:12  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
22:34:12  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
22:34:12  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
22:34:12  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
22:34:12  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
22:34:12  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
22:34:12  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
22:34:12  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
22:34:12  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
22:34:12  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
22:34:12  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
22:34:12  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
22:34:12  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
22:34:12  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
22:34:12  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
22:34:12  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
22:34:12  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
22:34:12  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
22:34:12  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
22:34:12  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
22:34:12  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
22:34:12  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
22:34:12  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
22:34:12  43  ,hh  att32
22:34:12  44  ,d   att33
22:34:12  45  ,w   att34
22:34:12  46  ,mpm att35
22:34:12  47  ,mph att36
22:34:12  48  ,trend att37
22:34:12  49  FROM svm6142
22:34:12  50  ORDER BY ydate
22:34:12  51  /

Table created.

Elapsed: 00:00:04.80
22:34:17 SQL> 
22:34:17 SQL> -- rpt
22:34:17 SQL> 
22:34:17 SQL> SELECT
22:34:17   2  pair
22:34:17   3  ,trend
22:34:17   4  ,gatt
22:34:17   5  ,COUNT(pair)
22:34:17   6  ,AVG(g6)
22:34:17   7  FROM svm6162
22:34:17   8  GROUP BY pair,trend,gatt
22:34:17   9  ORDER BY pair,trend,gatt
22:34:17  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5512 -.16518093
usd_jpy 	-1 up	      4972 .163401958
usd_jpy 	-1		65
usd_jpy 	 1 nup	      5136 -.15710038
usd_jpy 	 1 up	      4137  .16563732
usd_jpy 	 1		 7

6 rows selected.

Elapsed: 00:00:00.03
22:34:17 SQL> 
22:34:17 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.18
22:34:17 SQL> CREATE TABLE modsrc COMPRESS AS
22:34:17   2  SELECT
22:34:17   3  pair
22:34:17   4  ,ydate
22:34:17   5  ,prdate
22:34:17   6  ,trend
22:34:17   7  ,g6
22:34:17   8  ,gatt
22:34:17   9  ,gattn
22:34:17  10  FROM svm6162
22:34:17  11  /

Table created.

Elapsed: 00:00:00.07
22:34:17 SQL> 
22:34:17 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
22:34:17 SQL> 
22:34:17 SQL> DROP   TABLE jpy_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
22:34:17 SQL> CREATE TABLE jpy_ms610 COMPRESS AS
22:34:17   2  SELECT
22:34:17   3  ydate
22:34:17   4  ,trend jpy_trend
22:34:17   5  ,g6    jpy_g6
22:34:17   6  ,gatt  jpy_gatt
22:34:17   7  ,gattn jpy_gattn
22:34:17   8  FROM modsrc
22:34:17   9  /

Table created.

Elapsed: 00:00:00.07
22:34:17 SQL> 
22:34:17 SQL> ANALYZE TABLE jpy_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.14
22:34:18 SQL> 
22:34:18 SQL> -- I need a copy of the attributes:
22:34:18 SQL> 
22:34:18 SQL> 
22:34:18 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.11
22:34:18 SQL> CREATE TABLE jpy_att COMPRESS AS
22:34:18   2  SELECT
22:34:18   3  ydate
22:34:18   4  ,att00 jpy_att00
22:34:18   5  ,att01 jpy_att01
22:34:18   6  ,att02 jpy_att02
22:34:18   7  ,att03 jpy_att03
22:34:18   8  ,att04 jpy_att04
22:34:18   9  ,att05 jpy_att05
22:34:18  10  ,att06 jpy_att06
22:34:18  11  ,att07 jpy_att07
22:34:18  12  ,att08 jpy_att08
22:34:18  13  ,att09 jpy_att09
22:34:18  14  ,att10 jpy_att10
22:34:18  15  ,att11 jpy_att11
22:34:18  16  ,att12 jpy_att12
22:34:18  17  ,att13 jpy_att13
22:34:18  18  ,att14 jpy_att14
22:34:18  19  ,att15 jpy_att15
22:34:18  20  ,att16 jpy_att16
22:34:18  21  ,att17 jpy_att17
22:34:18  22  ,att18 jpy_att18
22:34:18  23  ,att19 jpy_att19
22:34:18  24  ,att20 jpy_att20
22:34:18  25  ,att21 jpy_att21
22:34:18  26  ,att22 jpy_att22
22:34:18  27  ,att23 jpy_att23
22:34:18  28  ,att24 jpy_att24
22:34:18  29  ,att25 jpy_att25
22:34:18  30  ,att26 jpy_att26
22:34:18  31  ,att27 jpy_att27
22:34:18  32  ,att28 jpy_att28
22:34:18  33  ,att29 jpy_att29
22:34:18  34  ,att30 jpy_att30
22:34:18  35  ,att31 jpy_att31
22:34:18  36  ,att32 jpy_att32
22:34:18  37  ,att33 jpy_att33
22:34:18  38  ,att34 jpy_att34
22:34:18  39  ,att35 jpy_att35
22:34:18  40  ,att36 jpy_att36
22:34:18  41  ,att37 jpy_att37
22:34:18  42  FROM svm6162
22:34:18  43  /

Table created.

Elapsed: 00:00:00.16
22:34:18 SQL> 
22:34:18 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
22:34:18 SQL> 
22:34:18 SQL> -- rpt
22:34:18 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19829

Elapsed: 00:00:00.91
22:34:19 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     19829

Elapsed: 00:00:00.00
22:34:19 SQL> 
22:34:19 SQL> --
22:34:19 SQL> -- cad610.sql
22:34:19 SQL> --
22:34:19 SQL> 
22:34:19 SQL> -- Creates views and tables for backtesting a forex SVM strategy
22:34:19 SQL> 
22:34:19 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.44
22:34:20 SQL> 
22:34:20 SQL> -- I created di5min here:
22:34:20 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
22:34:20 SQL> 
22:34:20 SQL> CREATE OR REPLACE VIEW svm6102 AS
22:34:20   2  SELECT
22:34:20   3  pair
22:34:20   4  ,ydate
22:34:20   5  ,prdate
22:34:20   6  ,rownum rnum -- acts as t in my time-series
22:34:20   7  ,clse
22:34:20   8  -- Derive a bunch of attributes from clse, the latest price:
22:34:20   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
22:34:20  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
22:34:20  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
22:34:20  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
22:34:20  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
22:34:20  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
22:34:20  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
22:34:20  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
22:34:20  17  --
22:34:20  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
22:34:20  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
22:34:20  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
22:34:20  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
22:34:20  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
22:34:20  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
22:34:20  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
22:34:20  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
22:34:20  26  --
22:34:20  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
22:34:20  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
22:34:20  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
22:34:20  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
22:34:20  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
22:34:20  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
22:34:20  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
22:34:20  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
22:34:20  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
22:34:20  36  FROM di5min WHERE pair LIKE'%cad%'
22:34:20  37  AND ydate > sysdate - 95
22:34:20  38  ORDER BY ydate
22:34:20  39  /

View created.

Elapsed: 00:00:00.04
22:34:20 SQL> 
22:34:20 SQL> -- rpt
22:34:20 SQL> 
22:34:20 SQL> SELECT
22:34:20   2  pair
22:34:20   3  ,COUNT(pair)
22:34:20   4  ,MIN(clse),MAX(clse)
22:34:20   5  ,MIN(avg6),MAX(avg6)
22:34:20   6  ,MIN(ydate),MAX(ydate)
22:34:20   7  FROM svm6102
22:34:20   8  GROUP BY pair
22:34:20   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_cad       19829    .992825	    1.036 .995120719 1.03336849 2010-09-27 22:35:01 2010-12-31 21:55:00

Elapsed: 00:00:00.86
22:34:21 SQL> 
22:34:21 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
22:34:21 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.27
22:34:21 SQL> CREATE TABLE svm6122 COMPRESS AS
22:34:21   2  SELECT
22:34:21   3  pair
22:34:21   4  ,ydate
22:34:21   5  ,prdate
22:34:21   6  ,clse
22:34:21   7  -- g6 is important. I want to predict g6:
22:34:21   8  ,ld6 - clse g6
22:34:21   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
22:34:21  10  -- I want more attributes from the ones I derived above:
22:34:21  11  -- clse relation to moving-min
22:34:21  12  ,clse-min4  cm4
22:34:21  13  ,clse-min6  cm6
22:34:21  14  ,clse-min8  cm8
22:34:21  15  ,clse-min10 cm10
22:34:21  16  ,clse-min12 cm12
22:34:21  17  ,clse-min14 cm14
22:34:21  18  ,clse-min16 cm16
22:34:21  19  ,clse-min18 cm18
22:34:21  20  -- clse relation to moving-avg
22:34:21  21  ,clse-avg4  ca4
22:34:21  22  ,clse-avg6  ca6
22:34:21  23  ,clse-avg8  ca8
22:34:21  24  ,clse-avg10 ca10
22:34:21  25  ,clse-avg12 ca12
22:34:21  26  ,clse-avg14 ca14
22:34:21  27  ,clse-avg16 ca16
22:34:21  28  ,clse-avg18 ca18
22:34:21  29  -- clse relation to moving-max
22:34:21  30  ,clse-max4  cx4
22:34:21  31  ,clse-max6  cx6
22:34:21  32  ,clse-max8  cx8
22:34:21  33  ,clse-max10 cx10
22:34:21  34  ,clse-max12 cx12
22:34:21  35  ,clse-max14 cx14
22:34:21  36  ,clse-max16 cx16
22:34:21  37  ,clse-max18 cx18
22:34:21  38  -- Derive more attributes.
22:34:21  39  -- I want to use CORR() here to help SVM see the shape of the series.
22:34:21  40  -- But COVAR_POP is more stable:
22:34:21  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
22:34:21  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
22:34:21  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
22:34:21  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
22:34:21  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
22:34:21  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
22:34:21  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
22:34:21  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
22:34:21  49  -- Derive date related attributes:
22:34:21  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:34:21  51  ,0+TO_CHAR(ydate,'D')d
22:34:21  52  ,0+TO_CHAR(ydate,'W')w
22:34:21  53  -- mpm stands for minutes-past-midnight:
22:34:21  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:34:21  55  -- mph stands for minutes-past-hour:
22:34:21  56  ,0+TO_CHAR(ydate,'MI')mph
22:34:21  57  FROM svm6102
22:34:21  58  ORDER BY ydate
22:34:21  59  /

Table created.

Elapsed: 00:00:02.04
22:34:23 SQL> 
22:34:23 SQL> -- rpt
22:34:23 SQL> 
22:34:23 SQL> SELECT
22:34:23   2  pair
22:34:23   3  ,COUNT(pair)
22:34:23   4  ,MIN(clse),MAX(clse)
22:34:23   5  ,MIN(ydate),MAX(ydate)
22:34:23   6  FROM svm6122
22:34:23   7  GROUP BY pair
22:34:23   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_cad       19829    .992825	    1.036 2010-09-27 22:35:01 2010-12-31 21:55:00

Elapsed: 00:00:00.04
22:34:23 SQL> 
22:34:23 SQL> -- Prepare for derivation of NTILE based params:
22:34:23 SQL> 
22:34:23 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.19
22:34:23 SQL> CREATE TABLE svm6142 COMPRESS AS
22:34:23   2  SELECT
22:34:23   3  pair
22:34:23   4  ,ydate
22:34:23   5  ,prdate
22:34:23   6  ,clse
22:34:23   7  ,g6
22:34:23   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
22:34:23   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
22:34:23  10  ,CASE WHEN trend IS NULL THEN 1
22:34:23  11  	    WHEN trend =0      THEN 1
22:34:23  12  	    ELSE trend END trend
22:34:23  13  ,cm4
22:34:23  14  ,cm6
22:34:23  15  ,cm8
22:34:23  16  ,cm10
22:34:23  17  ,cm12
22:34:23  18  ,cm14
22:34:23  19  ,cm16
22:34:23  20  ,cm18
22:34:23  21  --
22:34:23  22  ,ca4
22:34:23  23  ,ca6
22:34:23  24  ,ca8
22:34:23  25  ,ca10
22:34:23  26  ,ca12
22:34:23  27  ,ca14
22:34:23  28  ,ca16
22:34:23  29  ,ca18
22:34:23  30  --
22:34:23  31  ,cx4
22:34:23  32  ,cx6
22:34:23  33  ,cx8
22:34:23  34  ,cx10
22:34:23  35  ,cx12
22:34:23  36  ,cx14
22:34:23  37  ,cx16
22:34:23  38  ,cx18
22:34:23  39  --
22:34:23  40  ,crr4
22:34:23  41  ,crr6
22:34:23  42  ,crr8
22:34:23  43  ,crr10
22:34:23  44  ,crr12
22:34:23  45  ,crr14
22:34:23  46  ,crr16
22:34:23  47  ,crr18
22:34:23  48  --
22:34:23  49  ,hh
22:34:23  50  ,d
22:34:23  51  ,w
22:34:23  52  ,mpm
22:34:23  53  ,mph
22:34:23  54  FROM svm6122
22:34:23  55  ORDER BY ydate
22:34:23  56  /

Table created.

Elapsed: 00:00:00.37
22:34:23 SQL> 
22:34:23 SQL> -- rpt
22:34:23 SQL> 
22:34:23 SQL> SELECT
22:34:23   2  pair
22:34:23   3  ,trend
22:34:23   4  ,gatt
22:34:23   5  ,COUNT(pair)
22:34:23   6  ,AVG(g6)
22:34:23   7  FROM svm6142
22:34:23   8  GROUP BY pair,trend,gatt
22:34:23   9  ORDER BY pair,trend,gatt
22:34:23  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7460 -.00131272
usd_cad 	-1 up	      3125  .00310196
usd_cad 	-1		67
usd_cad 	 1 nup	      6791 -.00160948
usd_cad 	 1 up	      2381  .00359889
usd_cad 	 1		 5

6 rows selected.

Elapsed: 00:00:00.04
22:34:24 SQL> 
22:34:24 SQL> 
22:34:24 SQL> -- Derive NTILE based params:
22:34:24 SQL> 
22:34:24 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.14
22:34:24 SQL> CREATE TABLE svm6162 COMPRESS AS
22:34:24   2  SELECT
22:34:24   3  pair
22:34:24   4  ,ydate
22:34:24   5  ,prdate
22:34:24   6  ,clse
22:34:24   7  ,g6
22:34:24   8  ,gatt
22:34:24   9  ,gattn
22:34:24  10  ,trend
22:34:24  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
22:34:24  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
22:34:24  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
22:34:24  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
22:34:24  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
22:34:24  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
22:34:24  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
22:34:24  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
22:34:24  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
22:34:24  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
22:34:24  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
22:34:24  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
22:34:24  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
22:34:24  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
22:34:24  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
22:34:24  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
22:34:24  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
22:34:24  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
22:34:24  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
22:34:24  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
22:34:24  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
22:34:24  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
22:34:24  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
22:34:24  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
22:34:24  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
22:34:24  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
22:34:24  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
22:34:24  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
22:34:24  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
22:34:24  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
22:34:24  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
22:34:24  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
22:34:24  43  ,hh  att32
22:34:24  44  ,d   att33
22:34:24  45  ,w   att34
22:34:24  46  ,mpm att35
22:34:24  47  ,mph att36
22:34:24  48  ,trend att37
22:34:24  49  FROM svm6142
22:34:24  50  ORDER BY ydate
22:34:24  51  /

Table created.

Elapsed: 00:00:04.81
22:34:28 SQL> 
22:34:28 SQL> -- rpt
22:34:28 SQL> 
22:34:28 SQL> SELECT
22:34:28   2  pair
22:34:28   3  ,trend
22:34:28   4  ,gatt
22:34:28   5  ,COUNT(pair)
22:34:28   6  ,AVG(g6)
22:34:28   7  FROM svm6162
22:34:28   8  GROUP BY pair,trend,gatt
22:34:28   9  ORDER BY pair,trend,gatt
22:34:28  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7460 -.00131272
usd_cad 	-1 up	      3125  .00310196
usd_cad 	-1		67
usd_cad 	 1 nup	      6791 -.00160948
usd_cad 	 1 up	      2381  .00359889
usd_cad 	 1		 5

6 rows selected.

Elapsed: 00:00:00.03
22:34:29 SQL> 
22:34:29 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
22:34:29 SQL> CREATE TABLE modsrc COMPRESS AS
22:34:29   2  SELECT
22:34:29   3  pair
22:34:29   4  ,ydate
22:34:29   5  ,prdate
22:34:29   6  ,trend
22:34:29   7  ,g6
22:34:29   8  ,gatt
22:34:29   9  ,gattn
22:34:29  10  FROM svm6162
22:34:29  11  /

Table created.

Elapsed: 00:00:00.09
22:34:29 SQL> 
22:34:29 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
22:34:29 SQL> 
22:34:29 SQL> DROP   TABLE cad_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
22:34:29 SQL> CREATE TABLE cad_ms610 COMPRESS AS
22:34:29   2  SELECT
22:34:29   3  ydate
22:34:29   4  ,trend cad_trend
22:34:29   5  ,g6    cad_g6
22:34:29   6  ,gatt  cad_gatt
22:34:29   7  ,gattn cad_gattn
22:34:29   8  FROM modsrc
22:34:29   9  /

Table created.

Elapsed: 00:00:00.07
22:34:29 SQL> 
22:34:29 SQL> ANALYZE TABLE cad_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
22:34:29 SQL> 
22:34:29 SQL> -- I need a copy of the attributes:
22:34:29 SQL> 
22:34:29 SQL> 
22:34:29 SQL> DROP   TABLE cad_att;

Table dropped.

Elapsed: 00:00:00.05
22:34:29 SQL> CREATE TABLE cad_att COMPRESS AS
22:34:29   2  SELECT
22:34:29   3  ydate
22:34:29   4  ,att00 cad_att00
22:34:29   5  ,att01 cad_att01
22:34:29   6  ,att02 cad_att02
22:34:29   7  ,att03 cad_att03
22:34:29   8  ,att04 cad_att04
22:34:29   9  ,att05 cad_att05
22:34:29  10  ,att06 cad_att06
22:34:29  11  ,att07 cad_att07
22:34:29  12  ,att08 cad_att08
22:34:29  13  ,att09 cad_att09
22:34:29  14  ,att10 cad_att10
22:34:29  15  ,att11 cad_att11
22:34:29  16  ,att12 cad_att12
22:34:29  17  ,att13 cad_att13
22:34:29  18  ,att14 cad_att14
22:34:29  19  ,att15 cad_att15
22:34:29  20  ,att16 cad_att16
22:34:29  21  ,att17 cad_att17
22:34:29  22  ,att18 cad_att18
22:34:29  23  ,att19 cad_att19
22:34:29  24  ,att20 cad_att20
22:34:29  25  ,att21 cad_att21
22:34:29  26  ,att22 cad_att22
22:34:29  27  ,att23 cad_att23
22:34:29  28  ,att24 cad_att24
22:34:29  29  ,att25 cad_att25
22:34:29  30  ,att26 cad_att26
22:34:29  31  ,att27 cad_att27
22:34:29  32  ,att28 cad_att28
22:34:29  33  ,att29 cad_att29
22:34:29  34  ,att30 cad_att30
22:34:29  35  ,att31 cad_att31
22:34:29  36  ,att32 cad_att32
22:34:29  37  ,att33 cad_att33
22:34:29  38  ,att34 cad_att34
22:34:29  39  ,att35 cad_att35
22:34:29  40  ,att36 cad_att36
22:34:29  41  ,att37 cad_att37
22:34:29  42  FROM svm6162
22:34:29  43  /

Table created.

Elapsed: 00:00:00.19
22:34:29 SQL> 
22:34:29 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.49
22:34:30 SQL> 
22:34:30 SQL> -- rpt
22:34:30 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19829

Elapsed: 00:00:00.82
22:34:31 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
     19829

Elapsed: 00:00:00.00
22:34:31 SQL> 
22:34:31 SQL> --
22:34:31 SQL> -- chf610.sql
22:34:31 SQL> --
22:34:31 SQL> 
22:34:31 SQL> -- Creates views and tables for backtesting a forex SVM strategy
22:34:31 SQL> 
22:34:31 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.48
22:34:31 SQL> 
22:34:31 SQL> -- I created di5min here:
22:34:31 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
22:34:31 SQL> 
22:34:31 SQL> CREATE OR REPLACE VIEW svm6102 AS
22:34:31   2  SELECT
22:34:31   3  pair
22:34:31   4  ,ydate
22:34:31   5  ,prdate
22:34:31   6  ,rownum rnum -- acts as t in my time-series
22:34:31   7  ,clse
22:34:31   8  -- Derive a bunch of attributes from clse, the latest price:
22:34:31   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
22:34:31  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
22:34:31  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
22:34:31  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
22:34:31  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
22:34:31  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
22:34:31  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
22:34:31  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
22:34:31  17  --
22:34:31  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
22:34:31  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
22:34:31  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
22:34:31  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
22:34:31  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
22:34:31  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
22:34:31  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
22:34:31  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
22:34:31  26  --
22:34:31  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
22:34:31  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
22:34:31  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
22:34:31  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
22:34:31  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
22:34:31  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
22:34:31  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
22:34:31  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
22:34:31  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
22:34:31  36  FROM di5min WHERE pair LIKE'%chf%'
22:34:31  37  AND ydate > sysdate - 95
22:34:31  38  ORDER BY ydate
22:34:31  39  /

View created.

Elapsed: 00:00:00.05
22:34:31 SQL> 
22:34:31 SQL> -- rpt
22:34:31 SQL> 
22:34:31 SQL> SELECT
22:34:31   2  pair
22:34:31   3  ,COUNT(pair)
22:34:31   4  ,MIN(clse),MAX(clse)
22:34:31   5  ,MIN(avg6),MAX(avg6)
22:34:31   6  ,MIN(ydate),MAX(ydate)
22:34:31   7  FROM svm6102
22:34:31   8  GROUP BY pair
22:34:31   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_chf       19832    .931675	  1.00635 .933969692 1.00498151 2010-09-27 22:35:01 2010-12-31 21:55:00

Elapsed: 00:00:00.87
22:34:32 SQL> 
22:34:32 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
22:34:32 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.23
22:34:32 SQL> CREATE TABLE svm6122 COMPRESS AS
22:34:32   2  SELECT
22:34:32   3  pair
22:34:32   4  ,ydate
22:34:32   5  ,prdate
22:34:32   6  ,clse
22:34:32   7  -- g6 is important. I want to predict g6:
22:34:32   8  ,ld6 - clse g6
22:34:32   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
22:34:32  10  -- I want more attributes from the ones I derived above:
22:34:32  11  -- clse relation to moving-min
22:34:32  12  ,clse-min4  cm4
22:34:32  13  ,clse-min6  cm6
22:34:32  14  ,clse-min8  cm8
22:34:32  15  ,clse-min10 cm10
22:34:32  16  ,clse-min12 cm12
22:34:32  17  ,clse-min14 cm14
22:34:32  18  ,clse-min16 cm16
22:34:32  19  ,clse-min18 cm18
22:34:32  20  -- clse relation to moving-avg
22:34:32  21  ,clse-avg4  ca4
22:34:32  22  ,clse-avg6  ca6
22:34:32  23  ,clse-avg8  ca8
22:34:32  24  ,clse-avg10 ca10
22:34:32  25  ,clse-avg12 ca12
22:34:32  26  ,clse-avg14 ca14
22:34:32  27  ,clse-avg16 ca16
22:34:32  28  ,clse-avg18 ca18
22:34:32  29  -- clse relation to moving-max
22:34:32  30  ,clse-max4  cx4
22:34:32  31  ,clse-max6  cx6
22:34:32  32  ,clse-max8  cx8
22:34:32  33  ,clse-max10 cx10
22:34:32  34  ,clse-max12 cx12
22:34:32  35  ,clse-max14 cx14
22:34:32  36  ,clse-max16 cx16
22:34:32  37  ,clse-max18 cx18
22:34:32  38  -- Derive more attributes.
22:34:32  39  -- I want to use CORR() here to help SVM see the shape of the series.
22:34:32  40  -- But COVAR_POP is more stable:
22:34:32  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
22:34:32  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
22:34:32  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
22:34:32  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
22:34:32  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
22:34:32  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
22:34:32  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
22:34:32  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
22:34:32  49  -- Derive date related attributes:
22:34:32  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:34:32  51  ,0+TO_CHAR(ydate,'D')d
22:34:32  52  ,0+TO_CHAR(ydate,'W')w
22:34:32  53  -- mpm stands for minutes-past-midnight:
22:34:32  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:34:32  55  -- mph stands for minutes-past-hour:
22:34:32  56  ,0+TO_CHAR(ydate,'MI')mph
22:34:32  57  FROM svm6102
22:34:32  58  ORDER BY ydate
22:34:32  59  /

Table created.

Elapsed: 00:00:02.04
22:34:34 SQL> 
22:34:34 SQL> -- rpt
22:34:34 SQL> 
22:34:34 SQL> SELECT
22:34:34   2  pair
22:34:34   3  ,COUNT(pair)
22:34:34   4  ,MIN(clse),MAX(clse)
22:34:34   5  ,MIN(ydate),MAX(ydate)
22:34:34   6  FROM svm6122
22:34:34   7  GROUP BY pair
22:34:34   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_chf       19832    .931675	  1.00635 2010-09-27 22:35:01 2010-12-31 21:55:00

Elapsed: 00:00:00.03
22:34:34 SQL> 
22:34:34 SQL> -- Prepare for derivation of NTILE based params:
22:34:34 SQL> 
22:34:34 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.23
22:34:35 SQL> CREATE TABLE svm6142 COMPRESS AS
22:34:35   2  SELECT
22:34:35   3  pair
22:34:35   4  ,ydate
22:34:35   5  ,prdate
22:34:35   6  ,clse
22:34:35   7  ,g6
22:34:35   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
22:34:35   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
22:34:35  10  ,CASE WHEN trend IS NULL THEN 1
22:34:35  11  	    WHEN trend =0      THEN 1
22:34:35  12  	    ELSE trend END trend
22:34:35  13  ,cm4
22:34:35  14  ,cm6
22:34:35  15  ,cm8
22:34:35  16  ,cm10
22:34:35  17  ,cm12
22:34:35  18  ,cm14
22:34:35  19  ,cm16
22:34:35  20  ,cm18
22:34:35  21  --
22:34:35  22  ,ca4
22:34:35  23  ,ca6
22:34:35  24  ,ca8
22:34:35  25  ,ca10
22:34:35  26  ,ca12
22:34:35  27  ,ca14
22:34:35  28  ,ca16
22:34:35  29  ,ca18
22:34:35  30  --
22:34:35  31  ,cx4
22:34:35  32  ,cx6
22:34:35  33  ,cx8
22:34:35  34  ,cx10
22:34:35  35  ,cx12
22:34:35  36  ,cx14
22:34:35  37  ,cx16
22:34:35  38  ,cx18
22:34:35  39  --
22:34:35  40  ,crr4
22:34:35  41  ,crr6
22:34:35  42  ,crr8
22:34:35  43  ,crr10
22:34:35  44  ,crr12
22:34:35  45  ,crr14
22:34:35  46  ,crr16
22:34:35  47  ,crr18
22:34:35  48  --
22:34:35  49  ,hh
22:34:35  50  ,d
22:34:35  51  ,w
22:34:35  52  ,mpm
22:34:35  53  ,mph
22:34:35  54  FROM svm6122
22:34:35  55  ORDER BY ydate
22:34:35  56  /

Table created.

Elapsed: 00:00:00.37
22:34:35 SQL> 
22:34:35 SQL> -- rpt
22:34:35 SQL> 
22:34:35 SQL> SELECT
22:34:35   2  pair
22:34:35   3  ,trend
22:34:35   4  ,gatt
22:34:35   5  ,COUNT(pair)
22:34:35   6  ,AVG(g6)
22:34:35   7  FROM svm6142
22:34:35   8  GROUP BY pair,trend,gatt
22:34:35   9  ORDER BY pair,trend,gatt
22:34:35  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7395 -.00197062
usd_chf 	-1 up	      3198 .003888525
usd_chf 	-1		38
usd_chf 	 1 nup	      6618 -.00165124
usd_chf 	 1 up	      2549  .00369945
usd_chf 	 1		34

6 rows selected.

Elapsed: 00:00:00.04
22:34:35 SQL> 
22:34:35 SQL> 
22:34:35 SQL> -- Derive NTILE based params:
22:34:35 SQL> 
22:34:35 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.12
22:34:35 SQL> CREATE TABLE svm6162 COMPRESS AS
22:34:35   2  SELECT
22:34:35   3  pair
22:34:35   4  ,ydate
22:34:35   5  ,prdate
22:34:35   6  ,clse
22:34:35   7  ,g6
22:34:35   8  ,gatt
22:34:35   9  ,gattn
22:34:35  10  ,trend
22:34:35  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
22:34:35  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
22:34:35  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
22:34:35  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
22:34:35  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
22:34:35  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
22:34:35  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
22:34:35  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
22:34:35  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
22:34:35  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
22:34:35  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
22:34:35  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
22:34:35  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
22:34:35  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
22:34:35  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
22:34:35  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
22:34:35  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
22:34:35  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
22:34:35  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
22:34:35  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
22:34:35  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
22:34:35  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
22:34:35  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
22:34:35  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
22:34:35  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
22:34:35  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
22:34:35  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
22:34:35  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
22:34:35  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
22:34:35  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
22:34:35  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
22:34:35  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
22:34:35  43  ,hh  att32
22:34:35  44  ,d   att33
22:34:35  45  ,w   att34
22:34:35  46  ,mpm att35
22:34:35  47  ,mph att36
22:34:35  48  ,trend att37
22:34:35  49  FROM svm6142
22:34:35  50  ORDER BY ydate
22:34:35  51  /

Table created.

Elapsed: 00:00:04.92
22:34:40 SQL> 
22:34:40 SQL> -- rpt
22:34:40 SQL> 
22:34:40 SQL> SELECT
22:34:40   2  pair
22:34:40   3  ,trend
22:34:40   4  ,gatt
22:34:40   5  ,COUNT(pair)
22:34:40   6  ,AVG(g6)
22:34:40   7  FROM svm6162
22:34:40   8  GROUP BY pair,trend,gatt
22:34:40   9  ORDER BY pair,trend,gatt
22:34:40  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7395 -.00197062
usd_chf 	-1 up	      3198 .003888525
usd_chf 	-1		38
usd_chf 	 1 nup	      6618 -.00165124
usd_chf 	 1 up	      2549  .00369945
usd_chf 	 1		34

6 rows selected.

Elapsed: 00:00:00.03
22:34:40 SQL> 
22:34:40 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.18
22:34:40 SQL> CREATE TABLE modsrc COMPRESS AS
22:34:40   2  SELECT
22:34:40   3  pair
22:34:40   4  ,ydate
22:34:40   5  ,prdate
22:34:40   6  ,trend
22:34:40   7  ,g6
22:34:40   8  ,gatt
22:34:40   9  ,gattn
22:34:40  10  FROM svm6162
22:34:40  11  /

Table created.

Elapsed: 00:00:00.07
22:34:40 SQL> 
22:34:40 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
22:34:41 SQL> 
22:34:41 SQL> DROP   TABLE chf_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
22:34:41 SQL> CREATE TABLE chf_ms610 COMPRESS AS
22:34:41   2  SELECT
22:34:41   3  ydate
22:34:41   4  ,trend chf_trend
22:34:41   5  ,g6    chf_g6
22:34:41   6  ,gatt  chf_gatt
22:34:41   7  ,gattn chf_gattn
22:34:41   8  FROM modsrc
22:34:41   9  /

Table created.

Elapsed: 00:00:00.06
22:34:41 SQL> 
22:34:41 SQL> ANALYZE TABLE chf_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
22:34:41 SQL> 
22:34:41 SQL> -- I need a copy of the attributes:
22:34:41 SQL> 
22:34:41 SQL> 
22:34:41 SQL> DROP   TABLE chf_att;

Table dropped.

Elapsed: 00:00:00.04
22:34:41 SQL> CREATE TABLE chf_att COMPRESS AS
22:34:41   2  SELECT
22:34:41   3  ydate
22:34:41   4  ,att00 chf_att00
22:34:41   5  ,att01 chf_att01
22:34:41   6  ,att02 chf_att02
22:34:41   7  ,att03 chf_att03
22:34:41   8  ,att04 chf_att04
22:34:41   9  ,att05 chf_att05
22:34:41  10  ,att06 chf_att06
22:34:41  11  ,att07 chf_att07
22:34:41  12  ,att08 chf_att08
22:34:41  13  ,att09 chf_att09
22:34:41  14  ,att10 chf_att10
22:34:41  15  ,att11 chf_att11
22:34:41  16  ,att12 chf_att12
22:34:41  17  ,att13 chf_att13
22:34:41  18  ,att14 chf_att14
22:34:41  19  ,att15 chf_att15
22:34:41  20  ,att16 chf_att16
22:34:41  21  ,att17 chf_att17
22:34:41  22  ,att18 chf_att18
22:34:41  23  ,att19 chf_att19
22:34:41  24  ,att20 chf_att20
22:34:41  25  ,att21 chf_att21
22:34:41  26  ,att22 chf_att22
22:34:41  27  ,att23 chf_att23
22:34:41  28  ,att24 chf_att24
22:34:41  29  ,att25 chf_att25
22:34:41  30  ,att26 chf_att26
22:34:41  31  ,att27 chf_att27
22:34:41  32  ,att28 chf_att28
22:34:41  33  ,att29 chf_att29
22:34:41  34  ,att30 chf_att30
22:34:41  35  ,att31 chf_att31
22:34:41  36  ,att32 chf_att32
22:34:41  37  ,att33 chf_att33
22:34:41  38  ,att34 chf_att34
22:34:41  39  ,att35 chf_att35
22:34:41  40  ,att36 chf_att36
22:34:41  41  ,att37 chf_att37
22:34:41  42  FROM svm6162
22:34:41  43  /

Table created.

Elapsed: 00:00:00.17
22:34:41 SQL> 
22:34:41 SQL> ANALYZE TABLE chf_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
22:34:42 SQL> 
22:34:42 SQL> -- rpt
22:34:42 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19832

Elapsed: 00:00:00.85
22:34:42 SQL> SELECT COUNT(*)FROM chf_att;

  COUNT(*)
----------
     19832

Elapsed: 00:00:00.00
22:34:42 SQL> 
22:34:42 SQL> --
22:34:42 SQL> -- ech610.sql
22:34:42 SQL> --
22:34:42 SQL> 
22:34:42 SQL> -- Creates views and tables for backtesting a forex SVM strategy
22:34:42 SQL> 
22:34:42 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.37
22:34:43 SQL> 
22:34:43 SQL> -- I created di5min here:
22:34:43 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
22:34:43 SQL> 
22:34:43 SQL> CREATE OR REPLACE VIEW svm6102 AS
22:34:43   2  SELECT
22:34:43   3  pair
22:34:43   4  ,ydate
22:34:43   5  ,prdate
22:34:43   6  ,rownum rnum -- acts as t in my time-series
22:34:43   7  ,clse
22:34:43   8  -- Derive a bunch of attributes from clse, the latest price:
22:34:43   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
22:34:43  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
22:34:43  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
22:34:43  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
22:34:43  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
22:34:43  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
22:34:43  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
22:34:43  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
22:34:43  17  --
22:34:43  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
22:34:43  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
22:34:43  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
22:34:43  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
22:34:43  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
22:34:43  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
22:34:43  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
22:34:43  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
22:34:43  26  --
22:34:43  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
22:34:43  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
22:34:43  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
22:34:43  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
22:34:43  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
22:34:43  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
22:34:43  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
22:34:43  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
22:34:43  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
22:34:43  36  FROM di5min WHERE pair LIKE'%ech%'
22:34:43  37  AND ydate > sysdate - 95
22:34:43  38  ORDER BY ydate
22:34:43  39  /

View created.

Elapsed: 00:00:00.05
22:34:43 SQL> 
22:34:43 SQL> -- rpt
22:34:43 SQL> 
22:34:43 SQL> SELECT
22:34:43   2  pair
22:34:43   3  ,COUNT(pair)
22:34:43   4  ,MIN(clse),MAX(clse)
22:34:43   5  ,MIN(avg6),MAX(avg6)
22:34:43   6  ,MIN(ydate),MAX(ydate)
22:34:43   7  FROM svm6102
22:34:43   8  GROUP BY pair
22:34:43   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ech_usd       19831 1.24213032 1.38284305 1.24319868 1.37986485 2010-09-27 22:35:01 2010-12-31 21:55:00

Elapsed: 00:00:00.80
22:34:44 SQL> 
22:34:44 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
22:34:44 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.17
22:34:44 SQL> CREATE TABLE svm6122 COMPRESS AS
22:34:44   2  SELECT
22:34:44   3  pair
22:34:44   4  ,ydate
22:34:44   5  ,prdate
22:34:44   6  ,clse
22:34:44   7  -- g6 is important. I want to predict g6:
22:34:44   8  ,ld6 - clse g6
22:34:44   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
22:34:44  10  -- I want more attributes from the ones I derived above:
22:34:44  11  -- clse relation to moving-min
22:34:44  12  ,clse-min4  cm4
22:34:44  13  ,clse-min6  cm6
22:34:44  14  ,clse-min8  cm8
22:34:44  15  ,clse-min10 cm10
22:34:44  16  ,clse-min12 cm12
22:34:44  17  ,clse-min14 cm14
22:34:44  18  ,clse-min16 cm16
22:34:44  19  ,clse-min18 cm18
22:34:44  20  -- clse relation to moving-avg
22:34:44  21  ,clse-avg4  ca4
22:34:44  22  ,clse-avg6  ca6
22:34:44  23  ,clse-avg8  ca8
22:34:44  24  ,clse-avg10 ca10
22:34:44  25  ,clse-avg12 ca12
22:34:44  26  ,clse-avg14 ca14
22:34:44  27  ,clse-avg16 ca16
22:34:44  28  ,clse-avg18 ca18
22:34:44  29  -- clse relation to moving-max
22:34:44  30  ,clse-max4  cx4
22:34:44  31  ,clse-max6  cx6
22:34:44  32  ,clse-max8  cx8
22:34:44  33  ,clse-max10 cx10
22:34:44  34  ,clse-max12 cx12
22:34:44  35  ,clse-max14 cx14
22:34:44  36  ,clse-max16 cx16
22:34:44  37  ,clse-max18 cx18
22:34:44  38  -- Derive more attributes.
22:34:44  39  -- I want to use CORR() here to help SVM see the shape of the series.
22:34:44  40  -- But COVAR_POP is more stable:
22:34:44  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
22:34:44  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
22:34:44  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
22:34:44  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
22:34:44  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
22:34:44  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
22:34:44  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
22:34:44  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
22:34:44  49  -- Derive date related attributes:
22:34:44  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:34:44  51  ,0+TO_CHAR(ydate,'D')d
22:34:44  52  ,0+TO_CHAR(ydate,'W')w
22:34:44  53  -- mpm stands for minutes-past-midnight:
22:34:44  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:34:44  55  -- mph stands for minutes-past-hour:
22:34:44  56  ,0+TO_CHAR(ydate,'MI')mph
22:34:44  57  FROM svm6102
22:34:44  58  ORDER BY ydate
22:34:44  59  /

Table created.

Elapsed: 00:00:02.08
22:34:46 SQL> 
22:34:46 SQL> -- rpt
22:34:46 SQL> 
22:34:46 SQL> SELECT
22:34:46   2  pair
22:34:46   3  ,COUNT(pair)
22:34:46   4  ,MIN(clse),MAX(clse)
22:34:46   5  ,MIN(ydate),MAX(ydate)
22:34:46   6  FROM svm6122
22:34:46   7  GROUP BY pair
22:34:46   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ech_usd       19831 1.24213032 1.38284305 2010-09-27 22:35:01 2010-12-31 21:55:00

Elapsed: 00:00:00.04
22:34:46 SQL> 
22:34:46 SQL> -- Prepare for derivation of NTILE based params:
22:34:46 SQL> 
22:34:46 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.17
22:34:46 SQL> CREATE TABLE svm6142 COMPRESS AS
22:34:46   2  SELECT
22:34:46   3  pair
22:34:46   4  ,ydate
22:34:46   5  ,prdate
22:34:46   6  ,clse
22:34:46   7  ,g6
22:34:46   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
22:34:46   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
22:34:46  10  ,CASE WHEN trend IS NULL THEN 1
22:34:46  11  	    WHEN trend =0      THEN 1
22:34:46  12  	    ELSE trend END trend
22:34:46  13  ,cm4
22:34:46  14  ,cm6
22:34:46  15  ,cm8
22:34:46  16  ,cm10
22:34:46  17  ,cm12
22:34:46  18  ,cm14
22:34:46  19  ,cm16
22:34:46  20  ,cm18
22:34:46  21  --
22:34:46  22  ,ca4
22:34:46  23  ,ca6
22:34:46  24  ,ca8
22:34:46  25  ,ca10
22:34:46  26  ,ca12
22:34:46  27  ,ca14
22:34:46  28  ,ca16
22:34:46  29  ,ca18
22:34:46  30  --
22:34:46  31  ,cx4
22:34:46  32  ,cx6
22:34:46  33  ,cx8
22:34:46  34  ,cx10
22:34:46  35  ,cx12
22:34:46  36  ,cx14
22:34:46  37  ,cx16
22:34:46  38  ,cx18
22:34:46  39  --
22:34:46  40  ,crr4
22:34:46  41  ,crr6
22:34:46  42  ,crr8
22:34:46  43  ,crr10
22:34:46  44  ,crr12
22:34:46  45  ,crr14
22:34:46  46  ,crr16
22:34:46  47  ,crr18
22:34:46  48  --
22:34:46  49  ,hh
22:34:46  50  ,d
22:34:46  51  ,w
22:34:46  52  ,mpm
22:34:46  53  ,mph
22:34:46  54  FROM svm6122
22:34:46  55  ORDER BY ydate
22:34:46  56  /

Table created.

Elapsed: 00:00:00.42
22:34:47 SQL> 
22:34:47 SQL> -- rpt
22:34:47 SQL> 
22:34:47 SQL> SELECT
22:34:47   2  pair
22:34:47   3  ,trend
22:34:47   4  ,gatt
22:34:47   5  ,COUNT(pair)
22:34:47   6  ,AVG(g6)
22:34:47   7  FROM svm6142
22:34:47   8  GROUP BY pair,trend,gatt
22:34:47   9  ORDER BY pair,trend,gatt
22:34:47  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6567 -.00220544
ech_usd 	-1 up	      3679 .003561148
ech_usd 	-1		43
ech_usd 	 1 nup	      6565 -.00233104
ech_usd 	 1 up	      2948 .003834892
ech_usd 	 1		29

6 rows selected.

Elapsed: 00:00:00.04
22:34:47 SQL> 
22:34:47 SQL> 
22:34:47 SQL> -- Derive NTILE based params:
22:34:47 SQL> 
22:34:47 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.18
22:34:47 SQL> CREATE TABLE svm6162 COMPRESS AS
22:34:47   2  SELECT
22:34:47   3  pair
22:34:47   4  ,ydate
22:34:47   5  ,prdate
22:34:47   6  ,clse
22:34:47   7  ,g6
22:34:47   8  ,gatt
22:34:47   9  ,gattn
22:34:47  10  ,trend
22:34:47  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
22:34:47  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
22:34:47  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
22:34:47  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
22:34:47  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
22:34:47  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
22:34:47  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
22:34:47  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
22:34:47  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
22:34:47  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
22:34:47  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
22:34:47  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
22:34:47  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
22:34:47  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
22:34:47  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
22:34:47  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
22:34:47  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
22:34:47  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
22:34:47  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
22:34:47  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
22:34:47  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
22:34:47  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
22:34:47  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
22:34:47  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
22:34:47  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
22:34:47  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
22:34:47  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
22:34:47  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
22:34:47  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
22:34:47  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
22:34:47  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
22:34:47  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
22:34:47  43  ,hh  att32
22:34:47  44  ,d   att33
22:34:47  45  ,w   att34
22:34:47  46  ,mpm att35
22:34:47  47  ,mph att36
22:34:47  48  ,trend att37
22:34:47  49  FROM svm6142
22:34:47  50  ORDER BY ydate
22:34:47  51  /

Table created.

Elapsed: 00:00:04.90
22:34:52 SQL> 
22:34:52 SQL> -- rpt
22:34:52 SQL> 
22:34:52 SQL> SELECT
22:34:52   2  pair
22:34:52   3  ,trend
22:34:52   4  ,gatt
22:34:52   5  ,COUNT(pair)
22:34:52   6  ,AVG(g6)
22:34:52   7  FROM svm6162
22:34:52   8  GROUP BY pair,trend,gatt
22:34:52   9  ORDER BY pair,trend,gatt
22:34:52  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6567 -.00220544
ech_usd 	-1 up	      3679 .003561148
ech_usd 	-1		43
ech_usd 	 1 nup	      6565 -.00233104
ech_usd 	 1 up	      2948 .003834892
ech_usd 	 1		29

6 rows selected.

Elapsed: 00:00:00.03
22:34:52 SQL> 
22:34:52 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.17
22:34:52 SQL> CREATE TABLE modsrc COMPRESS AS
22:34:52   2  SELECT
22:34:52   3  pair
22:34:52   4  ,ydate
22:34:52   5  ,prdate
22:34:52   6  ,trend
22:34:52   7  ,g6
22:34:52   8  ,gatt
22:34:52   9  ,gattn
22:34:52  10  FROM svm6162
22:34:52  11  /

Table created.

Elapsed: 00:00:00.11
22:34:52 SQL> 
22:34:52 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
22:34:52 SQL> 
22:34:52 SQL> DROP   TABLE ech_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
22:34:52 SQL> CREATE TABLE ech_ms610 COMPRESS AS
22:34:52   2  SELECT
22:34:52   3  ydate
22:34:52   4  ,trend ech_trend
22:34:52   5  ,g6    ech_g6
22:34:52   6  ,gatt  ech_gatt
22:34:52   7  ,gattn ech_gattn
22:34:52   8  FROM modsrc
22:34:52   9  /

Table created.

Elapsed: 00:00:00.07
22:34:52 SQL> 
22:34:52 SQL> ANALYZE TABLE ech_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
22:34:53 SQL> 
22:34:53 SQL> -- I need a copy of the attributes:
22:34:53 SQL> 
22:34:53 SQL> 
22:34:53 SQL> DROP   TABLE ech_att;

Table dropped.

Elapsed: 00:00:00.23
22:34:53 SQL> CREATE TABLE ech_att COMPRESS AS
22:34:53   2  SELECT
22:34:53   3  ydate
22:34:53   4  ,att00 ech_att00
22:34:53   5  ,att01 ech_att01
22:34:53   6  ,att02 ech_att02
22:34:53   7  ,att03 ech_att03
22:34:53   8  ,att04 ech_att04
22:34:53   9  ,att05 ech_att05
22:34:53  10  ,att06 ech_att06
22:34:53  11  ,att07 ech_att07
22:34:53  12  ,att08 ech_att08
22:34:53  13  ,att09 ech_att09
22:34:53  14  ,att10 ech_att10
22:34:53  15  ,att11 ech_att11
22:34:53  16  ,att12 ech_att12
22:34:53  17  ,att13 ech_att13
22:34:53  18  ,att14 ech_att14
22:34:53  19  ,att15 ech_att15
22:34:53  20  ,att16 ech_att16
22:34:53  21  ,att17 ech_att17
22:34:53  22  ,att18 ech_att18
22:34:53  23  ,att19 ech_att19
22:34:53  24  ,att20 ech_att20
22:34:53  25  ,att21 ech_att21
22:34:53  26  ,att22 ech_att22
22:34:53  27  ,att23 ech_att23
22:34:53  28  ,att24 ech_att24
22:34:53  29  ,att25 ech_att25
22:34:53  30  ,att26 ech_att26
22:34:53  31  ,att27 ech_att27
22:34:53  32  ,att28 ech_att28
22:34:53  33  ,att29 ech_att29
22:34:53  34  ,att30 ech_att30
22:34:53  35  ,att31 ech_att31
22:34:53  36  ,att32 ech_att32
22:34:53  37  ,att33 ech_att33
22:34:53  38  ,att34 ech_att34
22:34:53  39  ,att35 ech_att35
22:34:53  40  ,att36 ech_att36
22:34:53  41  ,att37 ech_att37
22:34:53  42  FROM svm6162
22:34:53  43  /

Table created.

Elapsed: 00:00:00.17
22:34:53 SQL> 
22:34:53 SQL> ANALYZE TABLE ech_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
22:34:53 SQL> 
22:34:53 SQL> -- rpt
22:34:53 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19831

Elapsed: 00:00:00.79
22:34:54 SQL> SELECT COUNT(*)FROM ech_att;

  COUNT(*)
----------
     19831

Elapsed: 00:00:00.00
22:34:54 SQL> 
22:34:54 SQL> --
22:34:54 SQL> -- egb610.sql
22:34:54 SQL> --
22:34:54 SQL> 
22:34:54 SQL> -- Creates views and tables for backtesting a forex SVM strategy
22:34:54 SQL> 
22:34:54 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.38
22:34:55 SQL> 
22:34:55 SQL> -- I created di5min here:
22:34:55 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
22:34:55 SQL> 
22:34:55 SQL> CREATE OR REPLACE VIEW svm6102 AS
22:34:55   2  SELECT
22:34:55   3  pair
22:34:55   4  ,ydate
22:34:55   5  ,prdate
22:34:55   6  ,rownum rnum -- acts as t in my time-series
22:34:55   7  ,clse
22:34:55   8  -- Derive a bunch of attributes from clse, the latest price:
22:34:55   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
22:34:55  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
22:34:55  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
22:34:55  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
22:34:55  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
22:34:55  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
22:34:55  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
22:34:55  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
22:34:55  17  --
22:34:55  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
22:34:55  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
22:34:55  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
22:34:55  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
22:34:55  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
22:34:55  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
22:34:55  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
22:34:55  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
22:34:55  26  --
22:34:55  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
22:34:55  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
22:34:55  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
22:34:55  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
22:34:55  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
22:34:55  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
22:34:55  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
22:34:55  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
22:34:55  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
22:34:55  36  FROM di5min WHERE pair LIKE'%egb%'
22:34:55  37  AND ydate > sysdate - 95
22:34:55  38  ORDER BY ydate
22:34:55  39  /

View created.

Elapsed: 00:00:00.04
22:34:55 SQL> 
22:34:55 SQL> -- rpt
22:34:55 SQL> 
22:34:55 SQL> SELECT
22:34:55   2  pair
22:34:55   3  ,COUNT(pair)
22:34:55   4  ,MIN(clse),MAX(clse)
22:34:55   5  ,MIN(avg6),MAX(avg6)
22:34:55   6  ,MIN(ydate),MAX(ydate)
22:34:55   7  FROM svm6102
22:34:55   8  GROUP BY pair
22:34:55   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
egb_usd       19830 .833520557 .893920122 .834199029 .892400287 2010-09-27 22:35:01 2010-12-31 21:55:00

Elapsed: 00:00:00.98
22:34:56 SQL> 
22:34:56 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
22:34:56 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.60
22:34:56 SQL> CREATE TABLE svm6122 COMPRESS AS
22:34:56   2  SELECT
22:34:56   3  pair
22:34:56   4  ,ydate
22:34:56   5  ,prdate
22:34:56   6  ,clse
22:34:56   7  -- g6 is important. I want to predict g6:
22:34:56   8  ,ld6 - clse g6
22:34:56   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
22:34:56  10  -- I want more attributes from the ones I derived above:
22:34:56  11  -- clse relation to moving-min
22:34:56  12  ,clse-min4  cm4
22:34:56  13  ,clse-min6  cm6
22:34:56  14  ,clse-min8  cm8
22:34:56  15  ,clse-min10 cm10
22:34:56  16  ,clse-min12 cm12
22:34:56  17  ,clse-min14 cm14
22:34:56  18  ,clse-min16 cm16
22:34:56  19  ,clse-min18 cm18
22:34:56  20  -- clse relation to moving-avg
22:34:56  21  ,clse-avg4  ca4
22:34:56  22  ,clse-avg6  ca6
22:34:56  23  ,clse-avg8  ca8
22:34:56  24  ,clse-avg10 ca10
22:34:56  25  ,clse-avg12 ca12
22:34:56  26  ,clse-avg14 ca14
22:34:56  27  ,clse-avg16 ca16
22:34:56  28  ,clse-avg18 ca18
22:34:56  29  -- clse relation to moving-max
22:34:56  30  ,clse-max4  cx4
22:34:56  31  ,clse-max6  cx6
22:34:56  32  ,clse-max8  cx8
22:34:56  33  ,clse-max10 cx10
22:34:56  34  ,clse-max12 cx12
22:34:56  35  ,clse-max14 cx14
22:34:56  36  ,clse-max16 cx16
22:34:56  37  ,clse-max18 cx18
22:34:56  38  -- Derive more attributes.
22:34:56  39  -- I want to use CORR() here to help SVM see the shape of the series.
22:34:56  40  -- But COVAR_POP is more stable:
22:34:56  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
22:34:56  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
22:34:56  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
22:34:56  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
22:34:56  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
22:34:56  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
22:34:56  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
22:34:56  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
22:34:56  49  -- Derive date related attributes:
22:34:56  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:34:56  51  ,0+TO_CHAR(ydate,'D')d
22:34:56  52  ,0+TO_CHAR(ydate,'W')w
22:34:56  53  -- mpm stands for minutes-past-midnight:
22:34:56  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:34:56  55  -- mph stands for minutes-past-hour:
22:34:56  56  ,0+TO_CHAR(ydate,'MI')mph
22:34:56  57  FROM svm6102
22:34:56  58  ORDER BY ydate
22:34:56  59  /

Table created.

Elapsed: 00:00:02.53
22:34:59 SQL> 
22:34:59 SQL> -- rpt
22:34:59 SQL> 
22:34:59 SQL> SELECT
22:34:59   2  pair
22:34:59   3  ,COUNT(pair)
22:34:59   4  ,MIN(clse),MAX(clse)
22:34:59   5  ,MIN(ydate),MAX(ydate)
22:34:59   6  FROM svm6122
22:34:59   7  GROUP BY pair
22:34:59   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
egb_usd       19830 .833520557 .893920122 2010-09-27 22:35:01 2010-12-31 21:55:00

Elapsed: 00:00:00.04
22:34:59 SQL> 
22:34:59 SQL> -- Prepare for derivation of NTILE based params:
22:34:59 SQL> 
22:34:59 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.18
22:34:59 SQL> CREATE TABLE svm6142 COMPRESS AS
22:34:59   2  SELECT
22:34:59   3  pair
22:34:59   4  ,ydate
22:34:59   5  ,prdate
22:34:59   6  ,clse
22:34:59   7  ,g6
22:34:59   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
22:34:59   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
22:34:59  10  ,CASE WHEN trend IS NULL THEN 1
22:34:59  11  	    WHEN trend =0      THEN 1
22:34:59  12  	    ELSE trend END trend
22:34:59  13  ,cm4
22:34:59  14  ,cm6
22:34:59  15  ,cm8
22:34:59  16  ,cm10
22:34:59  17  ,cm12
22:34:59  18  ,cm14
22:34:59  19  ,cm16
22:34:59  20  ,cm18
22:34:59  21  --
22:34:59  22  ,ca4
22:34:59  23  ,ca6
22:34:59  24  ,ca8
22:34:59  25  ,ca10
22:34:59  26  ,ca12
22:34:59  27  ,ca14
22:34:59  28  ,ca16
22:34:59  29  ,ca18
22:34:59  30  --
22:34:59  31  ,cx4
22:34:59  32  ,cx6
22:34:59  33  ,cx8
22:34:59  34  ,cx10
22:34:59  35  ,cx12
22:34:59  36  ,cx14
22:34:59  37  ,cx16
22:34:59  38  ,cx18
22:34:59  39  --
22:34:59  40  ,crr4
22:34:59  41  ,crr6
22:34:59  42  ,crr8
22:34:59  43  ,crr10
22:34:59  44  ,crr12
22:34:59  45  ,crr14
22:34:59  46  ,crr16
22:34:59  47  ,crr18
22:34:59  48  --
22:34:59  49  ,hh
22:34:59  50  ,d
22:34:59  51  ,w
22:34:59  52  ,mpm
22:34:59  53  ,mph
22:34:59  54  FROM svm6122
22:34:59  55  ORDER BY ydate
22:34:59  56  /

Table created.

Elapsed: 00:00:00.42
22:34:59 SQL> 
22:34:59 SQL> -- rpt
22:34:59 SQL> 
22:34:59 SQL> SELECT
22:34:59   2  pair
22:34:59   3  ,trend
22:34:59   4  ,gatt
22:34:59   5  ,COUNT(pair)
22:34:59   6  ,AVG(g6)
22:34:59   7  FROM svm6142
22:34:59   8  GROUP BY pair,trend,gatt
22:34:59   9  ORDER BY pair,trend,gatt
22:34:59  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7358  -.0010033
egb_usd 	-1 up	      2808 .003077011
egb_usd 	-1		69
egb_usd 	 1 nup	      6821 -.00130863
egb_usd 	 1 up	      2771 .002960164
egb_usd 	 1		 3

6 rows selected.

Elapsed: 00:00:00.04
22:34:59 SQL> 
22:34:59 SQL> 
22:34:59 SQL> -- Derive NTILE based params:
22:34:59 SQL> 
22:34:59 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.12
22:35:00 SQL> CREATE TABLE svm6162 COMPRESS AS
22:35:00   2  SELECT
22:35:00   3  pair
22:35:00   4  ,ydate
22:35:00   5  ,prdate
22:35:00   6  ,clse
22:35:00   7  ,g6
22:35:00   8  ,gatt
22:35:00   9  ,gattn
22:35:00  10  ,trend
22:35:00  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
22:35:00  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
22:35:00  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
22:35:00  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
22:35:00  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
22:35:00  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
22:35:00  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
22:35:00  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
22:35:00  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
22:35:00  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
22:35:00  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
22:35:00  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
22:35:00  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
22:35:00  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
22:35:00  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
22:35:00  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
22:35:00  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
22:35:00  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
22:35:00  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
22:35:00  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
22:35:00  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
22:35:00  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
22:35:00  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
22:35:00  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
22:35:00  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
22:35:00  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
22:35:00  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
22:35:00  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
22:35:00  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
22:35:00  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
22:35:00  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
22:35:00  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
22:35:00  43  ,hh  att32
22:35:00  44  ,d   att33
22:35:00  45  ,w   att34
22:35:00  46  ,mpm att35
22:35:00  47  ,mph att36
22:35:00  48  ,trend att37
22:35:00  49  FROM svm6142
22:35:00  50  ORDER BY ydate
22:35:00  51  /

Table created.

Elapsed: 00:00:05.70
22:35:05 SQL> 
22:35:05 SQL> -- rpt
22:35:05 SQL> 
22:35:05 SQL> SELECT
22:35:05   2  pair
22:35:05   3  ,trend
22:35:05   4  ,gatt
22:35:05   5  ,COUNT(pair)
22:35:05   6  ,AVG(g6)
22:35:05   7  FROM svm6162
22:35:05   8  GROUP BY pair,trend,gatt
22:35:05   9  ORDER BY pair,trend,gatt
22:35:05  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7358  -.0010033
egb_usd 	-1 up	      2808 .003077011
egb_usd 	-1		69
egb_usd 	 1 nup	      6821 -.00130863
egb_usd 	 1 up	      2771 .002960164
egb_usd 	 1		 3

6 rows selected.

Elapsed: 00:00:00.03
22:35:05 SQL> 
22:35:05 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
22:35:05 SQL> CREATE TABLE modsrc COMPRESS AS
22:35:05   2  SELECT
22:35:05   3  pair
22:35:05   4  ,ydate
22:35:05   5  ,prdate
22:35:05   6  ,trend
22:35:05   7  ,g6
22:35:05   8  ,gatt
22:35:05   9  ,gattn
22:35:05  10  FROM svm6162
22:35:05  11  /

Table created.

Elapsed: 00:00:00.09
22:35:05 SQL> 
22:35:05 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
22:35:06 SQL> 
22:35:06 SQL> DROP   TABLE egb_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
22:35:06 SQL> CREATE TABLE egb_ms610 COMPRESS AS
22:35:06   2  SELECT
22:35:06   3  ydate
22:35:06   4  ,trend egb_trend
22:35:06   5  ,g6    egb_g6
22:35:06   6  ,gatt  egb_gatt
22:35:06   7  ,gattn egb_gattn
22:35:06   8  FROM modsrc
22:35:06   9  /

Table created.

Elapsed: 00:00:00.06
22:35:06 SQL> 
22:35:06 SQL> ANALYZE TABLE egb_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
22:35:06 SQL> 
22:35:06 SQL> -- I need a copy of the attributes:
22:35:06 SQL> 
22:35:06 SQL> 
22:35:06 SQL> DROP   TABLE egb_att;

Table dropped.

Elapsed: 00:00:00.04
22:35:06 SQL> CREATE TABLE egb_att COMPRESS AS
22:35:06   2  SELECT
22:35:06   3  ydate
22:35:06   4  ,att00 egb_att00
22:35:06   5  ,att01 egb_att01
22:35:06   6  ,att02 egb_att02
22:35:06   7  ,att03 egb_att03
22:35:06   8  ,att04 egb_att04
22:35:06   9  ,att05 egb_att05
22:35:06  10  ,att06 egb_att06
22:35:06  11  ,att07 egb_att07
22:35:06  12  ,att08 egb_att08
22:35:06  13  ,att09 egb_att09
22:35:06  14  ,att10 egb_att10
22:35:06  15  ,att11 egb_att11
22:35:06  16  ,att12 egb_att12
22:35:06  17  ,att13 egb_att13
22:35:06  18  ,att14 egb_att14
22:35:06  19  ,att15 egb_att15
22:35:06  20  ,att16 egb_att16
22:35:06  21  ,att17 egb_att17
22:35:06  22  ,att18 egb_att18
22:35:06  23  ,att19 egb_att19
22:35:06  24  ,att20 egb_att20
22:35:06  25  ,att21 egb_att21
22:35:06  26  ,att22 egb_att22
22:35:06  27  ,att23 egb_att23
22:35:06  28  ,att24 egb_att24
22:35:06  29  ,att25 egb_att25
22:35:06  30  ,att26 egb_att26
22:35:06  31  ,att27 egb_att27
22:35:06  32  ,att28 egb_att28
22:35:06  33  ,att29 egb_att29
22:35:06  34  ,att30 egb_att30
22:35:06  35  ,att31 egb_att31
22:35:06  36  ,att32 egb_att32
22:35:06  37  ,att33 egb_att33
22:35:06  38  ,att34 egb_att34
22:35:06  39  ,att35 egb_att35
22:35:06  40  ,att36 egb_att36
22:35:06  41  ,att37 egb_att37
22:35:06  42  FROM svm6162
22:35:06  43  /

Table created.

Elapsed: 00:00:00.23
22:35:06 SQL> 
22:35:06 SQL> ANALYZE TABLE egb_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
22:35:07 SQL> 
22:35:07 SQL> -- rpt
22:35:07 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19829

Elapsed: 00:00:00.95
22:35:08 SQL> SELECT COUNT(*)FROM egb_att;

  COUNT(*)
----------
     19830

Elapsed: 00:00:00.00
22:35:08 SQL> 
22:35:08 SQL> --
22:35:08 SQL> -- ejp610.sql
22:35:08 SQL> --
22:35:08 SQL> 
22:35:08 SQL> -- Creates views and tables for backtesting a forex SVM strategy
22:35:08 SQL> 
22:35:08 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.83
22:35:08 SQL> 
22:35:08 SQL> -- I created di5min here:
22:35:08 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
22:35:08 SQL> 
22:35:08 SQL> CREATE OR REPLACE VIEW svm6102 AS
22:35:08   2  SELECT
22:35:08   3  pair
22:35:08   4  ,ydate
22:35:08   5  ,prdate
22:35:08   6  ,rownum rnum -- acts as t in my time-series
22:35:08   7  ,clse
22:35:08   8  -- Derive a bunch of attributes from clse, the latest price:
22:35:08   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
22:35:08  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
22:35:08  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
22:35:08  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
22:35:08  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
22:35:08  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
22:35:08  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
22:35:08  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
22:35:08  17  --
22:35:08  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
22:35:08  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
22:35:08  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
22:35:08  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
22:35:08  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
22:35:08  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
22:35:08  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
22:35:08  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
22:35:08  26  --
22:35:08  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
22:35:08  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
22:35:08  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
22:35:08  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
22:35:08  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
22:35:08  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
22:35:08  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
22:35:08  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
22:35:08  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
22:35:08  36  FROM di5min WHERE pair LIKE'%ejp%'
22:35:08  37  AND ydate > sysdate - 95
22:35:08  38  ORDER BY ydate
22:35:08  39  /

View created.

Elapsed: 00:00:00.05
22:35:09 SQL> 
22:35:09 SQL> -- rpt
22:35:09 SQL> 
22:35:09 SQL> SELECT
22:35:09   2  pair
22:35:09   3  ,COUNT(pair)
22:35:09   4  ,MIN(clse),MAX(clse)
22:35:09   5  ,MIN(avg6),MAX(avg6)
22:35:09   6  ,MIN(ydate),MAX(ydate)
22:35:09   7  FROM svm6102
22:35:09   8  GROUP BY pair
22:35:09   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ejp_usd       19827 107.643765	115.63485 107.776148 115.509678 2010-09-27 22:40:01 2010-12-31 21:55:00

Elapsed: 00:00:00.86
22:35:09 SQL> 
22:35:09 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
22:35:09 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.21
22:35:10 SQL> CREATE TABLE svm6122 COMPRESS AS
22:35:10   2  SELECT
22:35:10   3  pair
22:35:10   4  ,ydate
22:35:10   5  ,prdate
22:35:10   6  ,clse
22:35:10   7  -- g6 is important. I want to predict g6:
22:35:10   8  ,ld6 - clse g6
22:35:10   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
22:35:10  10  -- I want more attributes from the ones I derived above:
22:35:10  11  -- clse relation to moving-min
22:35:10  12  ,clse-min4  cm4
22:35:10  13  ,clse-min6  cm6
22:35:10  14  ,clse-min8  cm8
22:35:10  15  ,clse-min10 cm10
22:35:10  16  ,clse-min12 cm12
22:35:10  17  ,clse-min14 cm14
22:35:10  18  ,clse-min16 cm16
22:35:10  19  ,clse-min18 cm18
22:35:10  20  -- clse relation to moving-avg
22:35:10  21  ,clse-avg4  ca4
22:35:10  22  ,clse-avg6  ca6
22:35:10  23  ,clse-avg8  ca8
22:35:10  24  ,clse-avg10 ca10
22:35:10  25  ,clse-avg12 ca12
22:35:10  26  ,clse-avg14 ca14
22:35:10  27  ,clse-avg16 ca16
22:35:10  28  ,clse-avg18 ca18
22:35:10  29  -- clse relation to moving-max
22:35:10  30  ,clse-max4  cx4
22:35:10  31  ,clse-max6  cx6
22:35:10  32  ,clse-max8  cx8
22:35:10  33  ,clse-max10 cx10
22:35:10  34  ,clse-max12 cx12
22:35:10  35  ,clse-max14 cx14
22:35:10  36  ,clse-max16 cx16
22:35:10  37  ,clse-max18 cx18
22:35:10  38  -- Derive more attributes.
22:35:10  39  -- I want to use CORR() here to help SVM see the shape of the series.
22:35:10  40  -- But COVAR_POP is more stable:
22:35:10  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
22:35:10  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
22:35:10  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
22:35:10  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
22:35:10  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
22:35:10  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
22:35:10  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
22:35:10  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
22:35:10  49  -- Derive date related attributes:
22:35:10  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:35:10  51  ,0+TO_CHAR(ydate,'D')d
22:35:10  52  ,0+TO_CHAR(ydate,'W')w
22:35:10  53  -- mpm stands for minutes-past-midnight:
22:35:10  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:35:10  55  -- mph stands for minutes-past-hour:
22:35:10  56  ,0+TO_CHAR(ydate,'MI')mph
22:35:10  57  FROM svm6102
22:35:10  58  ORDER BY ydate
22:35:10  59  /

Table created.

Elapsed: 00:00:02.22
22:35:12 SQL> 
22:35:12 SQL> -- rpt
22:35:12 SQL> 
22:35:12 SQL> SELECT
22:35:12   2  pair
22:35:12   3  ,COUNT(pair)
22:35:12   4  ,MIN(clse),MAX(clse)
22:35:12   5  ,MIN(ydate),MAX(ydate)
22:35:12   6  FROM svm6122
22:35:12   7  GROUP BY pair
22:35:12   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ejp_usd       19827 107.643765	115.63485 2010-09-27 22:40:01 2010-12-31 21:55:00

Elapsed: 00:00:00.03
22:35:12 SQL> 
22:35:12 SQL> -- Prepare for derivation of NTILE based params:
22:35:12 SQL> 
22:35:12 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:01.71
22:35:14 SQL> CREATE TABLE svm6142 COMPRESS AS
22:35:14   2  SELECT
22:35:14   3  pair
22:35:14   4  ,ydate
22:35:14   5  ,prdate
22:35:14   6  ,clse
22:35:14   7  ,g6
22:35:14   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
22:35:14   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
22:35:14  10  ,CASE WHEN trend IS NULL THEN 1
22:35:14  11  	    WHEN trend =0      THEN 1
22:35:14  12  	    ELSE trend END trend
22:35:14  13  ,cm4
22:35:14  14  ,cm6
22:35:14  15  ,cm8
22:35:14  16  ,cm10
22:35:14  17  ,cm12
22:35:14  18  ,cm14
22:35:14  19  ,cm16
22:35:14  20  ,cm18
22:35:14  21  --
22:35:14  22  ,ca4
22:35:14  23  ,ca6
22:35:14  24  ,ca8
22:35:14  25  ,ca10
22:35:14  26  ,ca12
22:35:14  27  ,ca14
22:35:14  28  ,ca16
22:35:14  29  ,ca18
22:35:14  30  --
22:35:14  31  ,cx4
22:35:14  32  ,cx6
22:35:14  33  ,cx8
22:35:14  34  ,cx10
22:35:14  35  ,cx12
22:35:14  36  ,cx14
22:35:14  37  ,cx16
22:35:14  38  ,cx18
22:35:14  39  --
22:35:14  40  ,crr4
22:35:14  41  ,crr6
22:35:14  42  ,crr8
22:35:14  43  ,crr10
22:35:14  44  ,crr12
22:35:14  45  ,crr14
22:35:14  46  ,crr16
22:35:14  47  ,crr18
22:35:14  48  --
22:35:14  49  ,hh
22:35:14  50  ,d
22:35:14  51  ,w
22:35:14  52  ,mpm
22:35:14  53  ,mph
22:35:14  54  FROM svm6122
22:35:14  55  ORDER BY ydate
22:35:14  56  /

Table created.

Elapsed: 00:00:00.43
22:35:14 SQL> 
22:35:14 SQL> -- rpt
22:35:14 SQL> 
22:35:14 SQL> SELECT
22:35:14   2  pair
22:35:14   3  ,trend
22:35:14   4  ,gatt
22:35:14   5  ,COUNT(pair)
22:35:14   6  ,AVG(g6)
22:35:14   7  FROM svm6142
22:35:14   8  GROUP BY pair,trend,gatt
22:35:14   9  ORDER BY pair,trend,gatt
22:35:14  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      4824 -.32377901
ejp_usd 	-1 up	      5018 .270458834
ejp_usd 	-1		60
ejp_usd 	 1 nup	      5096 -.28908403
ejp_usd 	 1 up	      4817 .278114326
ejp_usd 	 1		12

6 rows selected.

Elapsed: 00:00:00.03
22:35:14 SQL> 
22:35:14 SQL> 
22:35:14 SQL> -- Derive NTILE based params:
22:35:14 SQL> 
22:35:14 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:01.13
22:35:15 SQL> CREATE TABLE svm6162 COMPRESS AS
22:35:15   2  SELECT
22:35:15   3  pair
22:35:15   4  ,ydate
22:35:15   5  ,prdate
22:35:15   6  ,clse
22:35:15   7  ,g6
22:35:15   8  ,gatt
22:35:15   9  ,gattn
22:35:15  10  ,trend
22:35:15  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
22:35:15  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
22:35:15  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
22:35:15  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
22:35:15  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
22:35:15  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
22:35:15  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
22:35:15  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
22:35:15  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
22:35:15  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
22:35:15  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
22:35:15  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
22:35:15  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
22:35:15  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
22:35:15  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
22:35:15  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
22:35:15  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
22:35:15  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
22:35:15  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
22:35:15  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
22:35:15  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
22:35:15  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
22:35:15  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
22:35:15  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
22:35:15  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
22:35:15  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
22:35:15  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
22:35:15  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
22:35:15  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
22:35:15  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
22:35:15  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
22:35:15  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
22:35:15  43  ,hh  att32
22:35:15  44  ,d   att33
22:35:15  45  ,w   att34
22:35:15  46  ,mpm att35
22:35:15  47  ,mph att36
22:35:15  48  ,trend att37
22:35:15  49  FROM svm6142
22:35:15  50  ORDER BY ydate
22:35:15  51  /

Table created.

Elapsed: 00:00:05.10
22:35:20 SQL> 
22:35:20 SQL> -- rpt
22:35:20 SQL> 
22:35:20 SQL> SELECT
22:35:20   2  pair
22:35:20   3  ,trend
22:35:20   4  ,gatt
22:35:20   5  ,COUNT(pair)
22:35:20   6  ,AVG(g6)
22:35:20   7  FROM svm6162
22:35:20   8  GROUP BY pair,trend,gatt
22:35:20   9  ORDER BY pair,trend,gatt
22:35:20  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      4824 -.32377901
ejp_usd 	-1 up	      5018 .270458834
ejp_usd 	-1		60
ejp_usd 	 1 nup	      5096 -.28908403
ejp_usd 	 1 up	      4817 .278114326
ejp_usd 	 1		12

6 rows selected.

Elapsed: 00:00:00.03
22:35:20 SQL> 
22:35:20 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.50
22:35:21 SQL> CREATE TABLE modsrc COMPRESS AS
22:35:21   2  SELECT
22:35:21   3  pair
22:35:21   4  ,ydate
22:35:21   5  ,prdate
22:35:21   6  ,trend
22:35:21   7  ,g6
22:35:21   8  ,gatt
22:35:21   9  ,gattn
22:35:21  10  FROM svm6162
22:35:21  11  /

Table created.

Elapsed: 00:00:00.56
22:35:21 SQL> 
22:35:21 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.28
22:35:22 SQL> 
22:35:22 SQL> DROP   TABLE ejp_ms610 ;

Table dropped.

Elapsed: 00:00:00.03
22:35:22 SQL> CREATE TABLE ejp_ms610 COMPRESS AS
22:35:22   2  SELECT
22:35:22   3  ydate
22:35:22   4  ,trend ejp_trend
22:35:22   5  ,g6    ejp_g6
22:35:22   6  ,gatt  ejp_gatt
22:35:22   7  ,gattn ejp_gattn
22:35:22   8  FROM modsrc
22:35:22   9  /

Table created.

Elapsed: 00:00:00.07
22:35:22 SQL> 
22:35:22 SQL> ANALYZE TABLE ejp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
22:35:22 SQL> 
22:35:22 SQL> -- I need a copy of the attributes:
22:35:22 SQL> 
22:35:22 SQL> 
22:35:22 SQL> DROP   TABLE ejp_att;

Table dropped.

Elapsed: 00:00:00.05
22:35:22 SQL> CREATE TABLE ejp_att COMPRESS AS
22:35:22   2  SELECT
22:35:22   3  ydate
22:35:22   4  ,att00 ejp_att00
22:35:22   5  ,att01 ejp_att01
22:35:22   6  ,att02 ejp_att02
22:35:22   7  ,att03 ejp_att03
22:35:22   8  ,att04 ejp_att04
22:35:22   9  ,att05 ejp_att05
22:35:22  10  ,att06 ejp_att06
22:35:22  11  ,att07 ejp_att07
22:35:22  12  ,att08 ejp_att08
22:35:22  13  ,att09 ejp_att09
22:35:22  14  ,att10 ejp_att10
22:35:22  15  ,att11 ejp_att11
22:35:22  16  ,att12 ejp_att12
22:35:22  17  ,att13 ejp_att13
22:35:22  18  ,att14 ejp_att14
22:35:22  19  ,att15 ejp_att15
22:35:22  20  ,att16 ejp_att16
22:35:22  21  ,att17 ejp_att17
22:35:22  22  ,att18 ejp_att18
22:35:22  23  ,att19 ejp_att19
22:35:22  24  ,att20 ejp_att20
22:35:22  25  ,att21 ejp_att21
22:35:22  26  ,att22 ejp_att22
22:35:22  27  ,att23 ejp_att23
22:35:22  28  ,att24 ejp_att24
22:35:22  29  ,att25 ejp_att25
22:35:22  30  ,att26 ejp_att26
22:35:22  31  ,att27 ejp_att27
22:35:22  32  ,att28 ejp_att28
22:35:22  33  ,att29 ejp_att29
22:35:22  34  ,att30 ejp_att30
22:35:22  35  ,att31 ejp_att31
22:35:22  36  ,att32 ejp_att32
22:35:22  37  ,att33 ejp_att33
22:35:22  38  ,att34 ejp_att34
22:35:22  39  ,att35 ejp_att35
22:35:22  40  ,att36 ejp_att36
22:35:22  41  ,att37 ejp_att37
22:35:22  42  FROM svm6162
22:35:22  43  /

Table created.

Elapsed: 00:00:00.19
22:35:22 SQL> 
22:35:22 SQL> ANALYZE TABLE ejp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.43
22:35:23 SQL> 
22:35:23 SQL> -- rpt
22:35:23 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19827

Elapsed: 00:00:00.83
22:35:23 SQL> SELECT COUNT(*)FROM ejp_att;

  COUNT(*)
----------
     19827

Elapsed: 00:00:00.00
22:35:23 SQL> 
22:35:23 SQL> --
22:35:23 SQL> -- ajp610.sql
22:35:23 SQL> --
22:35:23 SQL> 
22:35:23 SQL> -- Creates views and tables for backtesting a forex SVM strategy
22:35:23 SQL> 
22:35:23 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.42
22:35:24 SQL> 
22:35:24 SQL> -- I created di5min here:
22:35:24 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
22:35:24 SQL> 
22:35:24 SQL> CREATE OR REPLACE VIEW svm6102 AS
22:35:24   2  SELECT
22:35:24   3  pair
22:35:24   4  ,ydate
22:35:24   5  ,prdate
22:35:24   6  ,rownum rnum -- acts as t in my time-series
22:35:24   7  ,clse
22:35:24   8  -- Derive a bunch of attributes from clse, the latest price:
22:35:24   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
22:35:24  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
22:35:24  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
22:35:24  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
22:35:24  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
22:35:24  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
22:35:24  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
22:35:24  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
22:35:24  17  --
22:35:24  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
22:35:24  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
22:35:24  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
22:35:24  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
22:35:24  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
22:35:24  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
22:35:24  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
22:35:24  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
22:35:24  26  --
22:35:24  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
22:35:24  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
22:35:24  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
22:35:24  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
22:35:24  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
22:35:24  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
22:35:24  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
22:35:24  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
22:35:24  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
22:35:24  36  FROM di5min WHERE pair LIKE'%ajp%'
22:35:24  37  AND ydate > sysdate - 95
22:35:24  38  ORDER BY ydate
22:35:24  39  /

View created.

Elapsed: 00:00:00.05
22:35:24 SQL> 
22:35:24 SQL> -- rpt
22:35:24 SQL> 
22:35:24 SQL> SELECT
22:35:24   2  pair
22:35:24   3  ,COUNT(pair)
22:35:24   4  ,MIN(clse),MAX(clse)
22:35:24   5  ,MIN(avg6),MAX(avg6)
22:35:24   6  ,MIN(ydate),MAX(ydate)
22:35:24   7  FROM svm6102
22:35:24   8  GROUP BY pair
22:35:24   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ajp_usd       19824  78.249976 83.6669853 78.5106193  83.546306 2010-09-27 22:40:01 2010-12-31 21:55:00

Elapsed: 00:00:00.78
22:35:25 SQL> 
22:35:25 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
22:35:25 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.17
22:35:25 SQL> CREATE TABLE svm6122 COMPRESS AS
22:35:25   2  SELECT
22:35:25   3  pair
22:35:25   4  ,ydate
22:35:25   5  ,prdate
22:35:25   6  ,clse
22:35:25   7  -- g6 is important. I want to predict g6:
22:35:25   8  ,ld6 - clse g6
22:35:25   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
22:35:25  10  -- I want more attributes from the ones I derived above:
22:35:25  11  -- clse relation to moving-min
22:35:25  12  ,clse-min4  cm4
22:35:25  13  ,clse-min6  cm6
22:35:25  14  ,clse-min8  cm8
22:35:25  15  ,clse-min10 cm10
22:35:25  16  ,clse-min12 cm12
22:35:25  17  ,clse-min14 cm14
22:35:25  18  ,clse-min16 cm16
22:35:25  19  ,clse-min18 cm18
22:35:25  20  -- clse relation to moving-avg
22:35:25  21  ,clse-avg4  ca4
22:35:25  22  ,clse-avg6  ca6
22:35:25  23  ,clse-avg8  ca8
22:35:25  24  ,clse-avg10 ca10
22:35:25  25  ,clse-avg12 ca12
22:35:25  26  ,clse-avg14 ca14
22:35:25  27  ,clse-avg16 ca16
22:35:25  28  ,clse-avg18 ca18
22:35:25  29  -- clse relation to moving-max
22:35:25  30  ,clse-max4  cx4
22:35:25  31  ,clse-max6  cx6
22:35:25  32  ,clse-max8  cx8
22:35:25  33  ,clse-max10 cx10
22:35:25  34  ,clse-max12 cx12
22:35:25  35  ,clse-max14 cx14
22:35:25  36  ,clse-max16 cx16
22:35:25  37  ,clse-max18 cx18
22:35:25  38  -- Derive more attributes.
22:35:25  39  -- I want to use CORR() here to help SVM see the shape of the series.
22:35:25  40  -- But COVAR_POP is more stable:
22:35:25  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
22:35:25  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
22:35:25  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
22:35:25  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
22:35:25  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
22:35:25  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
22:35:25  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
22:35:25  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
22:35:25  49  -- Derive date related attributes:
22:35:25  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:35:25  51  ,0+TO_CHAR(ydate,'D')d
22:35:25  52  ,0+TO_CHAR(ydate,'W')w
22:35:25  53  -- mpm stands for minutes-past-midnight:
22:35:25  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:35:25  55  -- mph stands for minutes-past-hour:
22:35:25  56  ,0+TO_CHAR(ydate,'MI')mph
22:35:25  57  FROM svm6102
22:35:25  58  ORDER BY ydate
22:35:25  59  /

Table created.

Elapsed: 00:00:02.05
22:35:27 SQL> 
22:35:27 SQL> -- rpt
22:35:27 SQL> 
22:35:27 SQL> SELECT
22:35:27   2  pair
22:35:27   3  ,COUNT(pair)
22:35:27   4  ,MIN(clse),MAX(clse)
22:35:27   5  ,MIN(ydate),MAX(ydate)
22:35:27   6  FROM svm6122
22:35:27   7  GROUP BY pair
22:35:27   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ajp_usd       19824  78.249976 83.6669853 2010-09-27 22:40:01 2010-12-31 21:55:00

Elapsed: 00:00:00.04
22:35:27 SQL> 
22:35:27 SQL> -- Prepare for derivation of NTILE based params:
22:35:27 SQL> 
22:35:27 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.18
22:35:27 SQL> CREATE TABLE svm6142 COMPRESS AS
22:35:27   2  SELECT
22:35:27   3  pair
22:35:27   4  ,ydate
22:35:27   5  ,prdate
22:35:27   6  ,clse
22:35:27   7  ,g6
22:35:27   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
22:35:27   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
22:35:27  10  ,CASE WHEN trend IS NULL THEN 1
22:35:27  11  	    WHEN trend =0      THEN 1
22:35:27  12  	    ELSE trend END trend
22:35:27  13  ,cm4
22:35:27  14  ,cm6
22:35:27  15  ,cm8
22:35:27  16  ,cm10
22:35:27  17  ,cm12
22:35:27  18  ,cm14
22:35:27  19  ,cm16
22:35:27  20  ,cm18
22:35:27  21  --
22:35:27  22  ,ca4
22:35:27  23  ,ca6
22:35:27  24  ,ca8
22:35:27  25  ,ca10
22:35:27  26  ,ca12
22:35:27  27  ,ca14
22:35:27  28  ,ca16
22:35:27  29  ,ca18
22:35:27  30  --
22:35:27  31  ,cx4
22:35:27  32  ,cx6
22:35:27  33  ,cx8
22:35:27  34  ,cx10
22:35:27  35  ,cx12
22:35:27  36  ,cx14
22:35:27  37  ,cx16
22:35:27  38  ,cx18
22:35:27  39  --
22:35:27  40  ,crr4
22:35:27  41  ,crr6
22:35:27  42  ,crr8
22:35:27  43  ,crr10
22:35:27  44  ,crr12
22:35:27  45  ,crr14
22:35:27  46  ,crr16
22:35:27  47  ,crr18
22:35:27  48  --
22:35:27  49  ,hh
22:35:27  50  ,d
22:35:27  51  ,w
22:35:27  52  ,mpm
22:35:27  53  ,mph
22:35:27  54  FROM svm6122
22:35:27  55  ORDER BY ydate
22:35:27  56  /

Table created.

Elapsed: 00:00:00.46
22:35:28 SQL> 
22:35:28 SQL> -- rpt
22:35:28 SQL> 
22:35:28 SQL> SELECT
22:35:28   2  pair
22:35:28   3  ,trend
22:35:28   4  ,gatt
22:35:28   5  ,COUNT(pair)
22:35:28   6  ,AVG(g6)
22:35:28   7  FROM svm6142
22:35:28   8  GROUP BY pair,trend,gatt
22:35:28   9  ORDER BY pair,trend,gatt
22:35:28  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ajp_usd 	-1 nup	      4174 -.22639064
ajp_usd 	-1 up	      5318 .219490443
ajp_usd 	 1 nup	      5345  -.1995254
ajp_usd 	 1 up	      4915 .203713712
ajp_usd 	 1		72

Elapsed: 00:00:00.04
22:35:28 SQL> 
22:35:28 SQL> 
22:35:28 SQL> -- Derive NTILE based params:
22:35:28 SQL> 
22:35:28 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.15
22:35:28 SQL> CREATE TABLE svm6162 COMPRESS AS
22:35:28   2  SELECT
22:35:28   3  pair
22:35:28   4  ,ydate
22:35:28   5  ,prdate
22:35:28   6  ,clse
22:35:28   7  ,g6
22:35:28   8  ,gatt
22:35:28   9  ,gattn
22:35:28  10  ,trend
22:35:28  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
22:35:28  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
22:35:28  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
22:35:28  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
22:35:28  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
22:35:28  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
22:35:28  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
22:35:28  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
22:35:28  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
22:35:28  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
22:35:28  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
22:35:28  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
22:35:28  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
22:35:28  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
22:35:28  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
22:35:28  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
22:35:28  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
22:35:28  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
22:35:28  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
22:35:28  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
22:35:28  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
22:35:28  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
22:35:28  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
22:35:28  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
22:35:28  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
22:35:28  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
22:35:28  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
22:35:28  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
22:35:28  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
22:35:28  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
22:35:28  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
22:35:28  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
22:35:28  43  ,hh  att32
22:35:28  44  ,d   att33
22:35:28  45  ,w   att34
22:35:28  46  ,mpm att35
22:35:28  47  ,mph att36
22:35:28  48  ,trend att37
22:35:28  49  FROM svm6142
22:35:28  50  ORDER BY ydate
22:35:28  51  /

Table created.

Elapsed: 00:00:04.88
22:35:33 SQL> 
22:35:33 SQL> -- rpt
22:35:33 SQL> 
22:35:33 SQL> SELECT
22:35:33   2  pair
22:35:33   3  ,trend
22:35:33   4  ,gatt
22:35:33   5  ,COUNT(pair)
22:35:33   6  ,AVG(g6)
22:35:33   7  FROM svm6162
22:35:33   8  GROUP BY pair,trend,gatt
22:35:33   9  ORDER BY pair,trend,gatt
22:35:33  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ajp_usd 	-1 nup	      4174 -.22639064
ajp_usd 	-1 up	      5318 .219490443
ajp_usd 	 1 nup	      5345  -.1995254
ajp_usd 	 1 up	      4915 .203713712
ajp_usd 	 1		72

Elapsed: 00:00:00.04
22:35:33 SQL> 
22:35:33 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
22:35:33 SQL> CREATE TABLE modsrc COMPRESS AS
22:35:33   2  SELECT
22:35:33   3  pair
22:35:33   4  ,ydate
22:35:33   5  ,prdate
22:35:33   6  ,trend
22:35:33   7  ,g6
22:35:33   8  ,gatt
22:35:33   9  ,gattn
22:35:33  10  FROM svm6162
22:35:33  11  /

Table created.

Elapsed: 00:00:00.08
22:35:33 SQL> 
22:35:33 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
22:35:33 SQL> 
22:35:33 SQL> DROP   TABLE ajp_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
22:35:33 SQL> CREATE TABLE ajp_ms610 COMPRESS AS
22:35:33   2  SELECT
22:35:33   3  ydate
22:35:33   4  ,trend ajp_trend
22:35:33   5  ,g6    ajp_g6
22:35:33   6  ,gatt  ajp_gatt
22:35:33   7  ,gattn ajp_gattn
22:35:33   8  FROM modsrc
22:35:33   9  /

Table created.

Elapsed: 00:00:00.07
22:35:33 SQL> 
22:35:33 SQL> ANALYZE TABLE ajp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
22:35:33 SQL> 
22:35:33 SQL> -- I need a copy of the attributes:
22:35:33 SQL> 
22:35:33 SQL> 
22:35:33 SQL> DROP   TABLE ajp_att;

Table dropped.

Elapsed: 00:00:00.05
22:35:33 SQL> CREATE TABLE ajp_att COMPRESS AS
22:35:33   2  SELECT
22:35:33   3  ydate
22:35:33   4  ,att00 ajp_att00
22:35:33   5  ,att01 ajp_att01
22:35:33   6  ,att02 ajp_att02
22:35:33   7  ,att03 ajp_att03
22:35:33   8  ,att04 ajp_att04
22:35:33   9  ,att05 ajp_att05
22:35:33  10  ,att06 ajp_att06
22:35:33  11  ,att07 ajp_att07
22:35:33  12  ,att08 ajp_att08
22:35:33  13  ,att09 ajp_att09
22:35:33  14  ,att10 ajp_att10
22:35:33  15  ,att11 ajp_att11
22:35:33  16  ,att12 ajp_att12
22:35:33  17  ,att13 ajp_att13
22:35:33  18  ,att14 ajp_att14
22:35:33  19  ,att15 ajp_att15
22:35:33  20  ,att16 ajp_att16
22:35:33  21  ,att17 ajp_att17
22:35:33  22  ,att18 ajp_att18
22:35:33  23  ,att19 ajp_att19
22:35:33  24  ,att20 ajp_att20
22:35:33  25  ,att21 ajp_att21
22:35:33  26  ,att22 ajp_att22
22:35:33  27  ,att23 ajp_att23
22:35:33  28  ,att24 ajp_att24
22:35:33  29  ,att25 ajp_att25
22:35:33  30  ,att26 ajp_att26
22:35:33  31  ,att27 ajp_att27
22:35:33  32  ,att28 ajp_att28
22:35:33  33  ,att29 ajp_att29
22:35:33  34  ,att30 ajp_att30
22:35:33  35  ,att31 ajp_att31
22:35:33  36  ,att32 ajp_att32
22:35:33  37  ,att33 ajp_att33
22:35:33  38  ,att34 ajp_att34
22:35:33  39  ,att35 ajp_att35
22:35:33  40  ,att36 ajp_att36
22:35:33  41  ,att37 ajp_att37
22:35:33  42  FROM svm6162
22:35:33  43  /

Table created.

Elapsed: 00:00:00.21
22:35:34 SQL> 
22:35:34 SQL> ANALYZE TABLE ajp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.44
22:35:34 SQL> 
22:35:34 SQL> -- rpt
22:35:34 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19824

Elapsed: 00:00:00.76
22:35:35 SQL> SELECT COUNT(*)FROM ajp_att;

  COUNT(*)
----------
     19824

Elapsed: 00:00:00.00
22:35:35 SQL> 
22:35:35 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
