
SQL*Plus: Release 11.2.0.1.0 Production on Thu Jan 6 23:27:32 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

23:27:32 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
23:27:32 SQL> 23:27:32 SQL> --
23:27:32 SQL> -- eur610.sql
23:27:32 SQL> --
23:27:32 SQL> 
23:27:32 SQL> -- Creates views and tables for backtesting a forex SVM strategy
23:27:32 SQL> 
23:27:32 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.04
23:27:32 SQL> 
23:27:32 SQL> -- I created di5min here:
23:27:32 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
23:27:32 SQL> 
23:27:32 SQL> CREATE OR REPLACE VIEW svm6102 AS
23:27:32   2  SELECT
23:27:32   3  pair
23:27:32   4  ,ydate
23:27:32   5  ,prdate
23:27:32   6  ,rownum rnum -- acts as t in my time-series
23:27:32   7  ,clse
23:27:32   8  -- Derive a bunch of attributes from clse, the latest price:
23:27:32   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
23:27:32  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
23:27:32  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
23:27:32  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
23:27:32  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
23:27:32  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
23:27:32  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
23:27:32  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
23:27:32  17  --
23:27:32  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
23:27:32  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
23:27:32  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
23:27:32  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
23:27:32  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
23:27:32  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
23:27:32  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
23:27:32  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
23:27:32  26  --
23:27:32  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
23:27:32  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
23:27:32  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
23:27:32  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
23:27:32  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
23:27:32  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
23:27:32  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
23:27:32  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
23:27:32  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
23:27:32  36  FROM di5min WHERE pair LIKE'%eur%'
23:27:32  37  AND ydate > sysdate - 95
23:27:32  38  ORDER BY ydate
23:27:32  39  /

View created.

Elapsed: 00:00:00.07
23:27:32 SQL> 
23:27:32 SQL> -- rpt
23:27:32 SQL> 
23:27:32 SQL> SELECT
23:27:32   2  pair
23:27:32   3  ,COUNT(pair)
23:27:32   4  ,MIN(clse),MAX(clse)
23:27:32   5  ,MIN(avg6),MAX(avg6)
23:27:32   6  ,MIN(ydate),MAX(ydate)
23:27:32   7  FROM svm6102
23:27:32   8  GROUP BY pair
23:27:32   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_usd       19811    1.29735	   1.4273 1.29875103 1.42436233 2010-10-03 23:30:01 2011-01-06 23:25:00

Elapsed: 00:00:00.97
23:27:33 SQL> 
23:27:33 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
23:27:33 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.04
23:27:33 SQL> CREATE TABLE svm6122 COMPRESS AS
23:27:33   2  SELECT
23:27:33   3  pair
23:27:33   4  ,ydate
23:27:33   5  ,prdate
23:27:33   6  ,clse
23:27:33   7  -- g6 is important. I want to predict g6:
23:27:33   8  ,ld6 - clse g6
23:27:33   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
23:27:33  10  -- I want more attributes from the ones I derived above:
23:27:33  11  -- clse relation to moving-min
23:27:33  12  ,clse-min4  cm4
23:27:33  13  ,clse-min6  cm6
23:27:33  14  ,clse-min8  cm8
23:27:33  15  ,clse-min10 cm10
23:27:33  16  ,clse-min12 cm12
23:27:33  17  ,clse-min14 cm14
23:27:33  18  ,clse-min16 cm16
23:27:33  19  ,clse-min18 cm18
23:27:33  20  -- clse relation to moving-avg
23:27:33  21  ,clse-avg4  ca4
23:27:33  22  ,clse-avg6  ca6
23:27:33  23  ,clse-avg8  ca8
23:27:33  24  ,clse-avg10 ca10
23:27:33  25  ,clse-avg12 ca12
23:27:33  26  ,clse-avg14 ca14
23:27:33  27  ,clse-avg16 ca16
23:27:33  28  ,clse-avg18 ca18
23:27:33  29  -- clse relation to moving-max
23:27:33  30  ,clse-max4  cx4
23:27:33  31  ,clse-max6  cx6
23:27:33  32  ,clse-max8  cx8
23:27:33  33  ,clse-max10 cx10
23:27:33  34  ,clse-max12 cx12
23:27:33  35  ,clse-max14 cx14
23:27:33  36  ,clse-max16 cx16
23:27:33  37  ,clse-max18 cx18
23:27:33  38  -- Derive more attributes.
23:27:33  39  -- I want to use CORR() here to help SVM see the shape of the series.
23:27:33  40  -- But COVAR_POP is more stable:
23:27:33  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
23:27:33  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
23:27:33  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
23:27:33  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
23:27:33  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
23:27:33  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
23:27:33  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
23:27:33  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
23:27:33  49  -- Derive date related attributes:
23:27:33  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
23:27:33  51  ,0+TO_CHAR(ydate,'D')d
23:27:33  52  ,0+TO_CHAR(ydate,'W')w
23:27:33  53  -- mpm stands for minutes-past-midnight:
23:27:33  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
23:27:33  55  -- mph stands for minutes-past-hour:
23:27:33  56  ,0+TO_CHAR(ydate,'MI')mph
23:27:33  57  FROM svm6102
23:27:33  58  ORDER BY ydate
23:27:33  59  /

Table created.

Elapsed: 00:00:02.48
23:27:35 SQL> 
23:27:35 SQL> -- rpt
23:27:35 SQL> 
23:27:35 SQL> SELECT
23:27:35   2  pair
23:27:35   3  ,COUNT(pair)
23:27:35   4  ,MIN(clse),MAX(clse)
23:27:35   5  ,MIN(ydate),MAX(ydate)
23:27:35   6  FROM svm6122
23:27:35   7  GROUP BY pair
23:27:35   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_usd       19811    1.29735	   1.4273 2010-10-03 23:30:01 2011-01-06 23:25:00

Elapsed: 00:00:00.04
23:27:36 SQL> 
23:27:36 SQL> -- Prepare for derivation of NTILE based params:
23:27:36 SQL> 
23:27:36 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.86
23:27:36 SQL> CREATE TABLE svm6142 COMPRESS AS
23:27:36   2  SELECT
23:27:36   3  pair
23:27:36   4  ,ydate
23:27:36   5  ,prdate
23:27:36   6  ,clse
23:27:36   7  ,g6
23:27:36   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
23:27:36   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
23:27:36  10  ,CASE WHEN trend IS NULL THEN 1
23:27:36  11  	    WHEN trend =0      THEN 1
23:27:36  12  	    ELSE trend END trend
23:27:36  13  ,cm4
23:27:36  14  ,cm6
23:27:36  15  ,cm8
23:27:36  16  ,cm10
23:27:36  17  ,cm12
23:27:36  18  ,cm14
23:27:36  19  ,cm16
23:27:36  20  ,cm18
23:27:36  21  --
23:27:36  22  ,ca4
23:27:36  23  ,ca6
23:27:36  24  ,ca8
23:27:36  25  ,ca10
23:27:36  26  ,ca12
23:27:36  27  ,ca14
23:27:36  28  ,ca16
23:27:36  29  ,ca18
23:27:36  30  --
23:27:36  31  ,cx4
23:27:36  32  ,cx6
23:27:36  33  ,cx8
23:27:36  34  ,cx10
23:27:36  35  ,cx12
23:27:36  36  ,cx14
23:27:36  37  ,cx16
23:27:36  38  ,cx18
23:27:36  39  --
23:27:36  40  ,crr4
23:27:36  41  ,crr6
23:27:36  42  ,crr8
23:27:36  43  ,crr10
23:27:36  44  ,crr12
23:27:36  45  ,crr14
23:27:36  46  ,crr16
23:27:36  47  ,crr18
23:27:36  48  --
23:27:36  49  ,hh
23:27:36  50  ,d
23:27:36  51  ,w
23:27:36  52  ,mpm
23:27:36  53  ,mph
23:27:36  54  FROM svm6122
23:27:36  55  ORDER BY ydate
23:27:36  56  /

Table created.

Elapsed: 00:00:00.44
23:27:37 SQL> 
23:27:37 SQL> -- rpt
23:27:37 SQL> 
23:27:37 SQL> SELECT
23:27:37   2  pair
23:27:37   3  ,trend
23:27:37   4  ,gatt
23:27:37   5  ,COUNT(pair)
23:27:37   6  ,AVG(g6)
23:27:37   7  FROM svm6142
23:27:37   8  GROUP BY pair,trend,gatt
23:27:37   9  ORDER BY pair,trend,gatt
23:27:37  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6582 -.00317267
eur_usd 	-1 up	      3570 .004447223
eur_usd 	-1		72
eur_usd 	 1 nup	      5882 -.00326164
eur_usd 	 1 up	      3705 .005071238

Elapsed: 00:00:00.05
23:27:37 SQL> 
23:27:37 SQL> 
23:27:37 SQL> -- Derive NTILE based params:
23:27:37 SQL> 
23:27:37 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.86
23:27:38 SQL> CREATE TABLE svm6162 COMPRESS AS
23:27:38   2  SELECT
23:27:38   3  pair
23:27:38   4  ,ydate
23:27:38   5  ,prdate
23:27:38   6  ,clse
23:27:38   7  ,g6
23:27:38   8  ,gatt
23:27:38   9  ,gattn
23:27:38  10  ,trend
23:27:38  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
23:27:38  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
23:27:38  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
23:27:38  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
23:27:38  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
23:27:38  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
23:27:38  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
23:27:38  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
23:27:38  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
23:27:38  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
23:27:38  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
23:27:38  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
23:27:38  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
23:27:38  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
23:27:38  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
23:27:38  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
23:27:38  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
23:27:38  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
23:27:38  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
23:27:38  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
23:27:38  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
23:27:38  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
23:27:38  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
23:27:38  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
23:27:38  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
23:27:38  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
23:27:38  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
23:27:38  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
23:27:38  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
23:27:38  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
23:27:38  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
23:27:38  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
23:27:38  43  ,hh  att32
23:27:38  44  ,d   att33
23:27:38  45  ,w   att34
23:27:38  46  ,mpm att35
23:27:38  47  ,mph att36
23:27:38  48  ,trend att37
23:27:38  49  FROM svm6142
23:27:38  50  ORDER BY ydate
23:27:38  51  /

Table created.

Elapsed: 00:00:04.97
23:27:43 SQL> 
23:27:43 SQL> -- rpt
23:27:43 SQL> 
23:27:43 SQL> SELECT
23:27:43   2  pair
23:27:43   3  ,trend
23:27:43   4  ,gatt
23:27:43   5  ,COUNT(pair)
23:27:43   6  ,AVG(g6)
23:27:43   7  FROM svm6162
23:27:43   8  GROUP BY pair,trend,gatt
23:27:43   9  ORDER BY pair,trend,gatt
23:27:43  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6582 -.00317267
eur_usd 	-1 up	      3570 .004447223
eur_usd 	-1		72
eur_usd 	 1 nup	      5882 -.00326164
eur_usd 	 1 up	      3705 .005071238

Elapsed: 00:00:00.03
23:27:43 SQL> 
23:27:43 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.18
23:27:43 SQL> CREATE TABLE modsrc COMPRESS AS
23:27:43   2  SELECT
23:27:43   3  pair
23:27:43   4  ,ydate
23:27:43   5  ,prdate
23:27:43   6  ,trend
23:27:43   7  ,g6
23:27:43   8  ,gatt
23:27:43   9  ,gattn
23:27:43  10  FROM svm6162
23:27:43  11  /

Table created.

Elapsed: 00:00:00.09
23:27:43 SQL> 
23:27:43 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.30
23:27:43 SQL> 
23:27:43 SQL> DROP   TABLE eur_ms610 ;

Table dropped.

Elapsed: 00:00:00.24
23:27:44 SQL> CREATE TABLE eur_ms610 COMPRESS AS
23:27:44   2  SELECT
23:27:44   3  ydate
23:27:44   4  ,trend eur_trend
23:27:44   5  ,g6    eur_g6
23:27:44   6  ,gatt  eur_gatt
23:27:44   7  ,gattn eur_gattn
23:27:44   8  FROM modsrc
23:27:44   9  /

Table created.

Elapsed: 00:00:00.07
23:27:44 SQL> 
23:27:44 SQL> ANALYZE TABLE eur_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
23:27:44 SQL> 
23:27:44 SQL> -- I need a copy of the attributes:
23:27:44 SQL> 
23:27:44 SQL> 
23:27:44 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.12
23:27:44 SQL> CREATE TABLE eur_att COMPRESS AS
23:27:44   2  SELECT
23:27:44   3  ydate
23:27:44   4  ,att00 eur_att00
23:27:44   5  ,att01 eur_att01
23:27:44   6  ,att02 eur_att02
23:27:44   7  ,att03 eur_att03
23:27:44   8  ,att04 eur_att04
23:27:44   9  ,att05 eur_att05
23:27:44  10  ,att06 eur_att06
23:27:44  11  ,att07 eur_att07
23:27:44  12  ,att08 eur_att08
23:27:44  13  ,att09 eur_att09
23:27:44  14  ,att10 eur_att10
23:27:44  15  ,att11 eur_att11
23:27:44  16  ,att12 eur_att12
23:27:44  17  ,att13 eur_att13
23:27:44  18  ,att14 eur_att14
23:27:44  19  ,att15 eur_att15
23:27:44  20  ,att16 eur_att16
23:27:44  21  ,att17 eur_att17
23:27:44  22  ,att18 eur_att18
23:27:44  23  ,att19 eur_att19
23:27:44  24  ,att20 eur_att20
23:27:44  25  ,att21 eur_att21
23:27:44  26  ,att22 eur_att22
23:27:44  27  ,att23 eur_att23
23:27:44  28  ,att24 eur_att24
23:27:44  29  ,att25 eur_att25
23:27:44  30  ,att26 eur_att26
23:27:44  31  ,att27 eur_att27
23:27:44  32  ,att28 eur_att28
23:27:44  33  ,att29 eur_att29
23:27:44  34  ,att30 eur_att30
23:27:44  35  ,att31 eur_att31
23:27:44  36  ,att32 eur_att32
23:27:44  37  ,att33 eur_att33
23:27:44  38  ,att34 eur_att34
23:27:44  39  ,att35 eur_att35
23:27:44  40  ,att36 eur_att36
23:27:44  41  ,att37 eur_att37
23:27:44  42  FROM svm6162
23:27:44  43  /

Table created.

Elapsed: 00:00:00.18
23:27:44 SQL> 
23:27:44 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
23:27:45 SQL> 
23:27:45 SQL> -- rpt
23:27:45 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19811

Elapsed: 00:00:00.90
23:27:45 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     19811

Elapsed: 00:00:00.01
23:27:45 SQL> 
23:27:45 SQL> --
23:27:45 SQL> -- aud610.sql
23:27:45 SQL> --
23:27:45 SQL> 
23:27:45 SQL> -- Creates views and tables for backtesting a forex SVM strategy
23:27:45 SQL> 
23:27:45 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.35
23:27:46 SQL> 
23:27:46 SQL> -- I created di5min here:
23:27:46 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
23:27:46 SQL> 
23:27:46 SQL> CREATE OR REPLACE VIEW svm6102 AS
23:27:46   2  SELECT
23:27:46   3  pair
23:27:46   4  ,ydate
23:27:46   5  ,prdate
23:27:46   6  ,rownum rnum -- acts as t in my time-series
23:27:46   7  ,clse
23:27:46   8  -- Derive a bunch of attributes from clse, the latest price:
23:27:46   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
23:27:46  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
23:27:46  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
23:27:46  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
23:27:46  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
23:27:46  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
23:27:46  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
23:27:46  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
23:27:46  17  --
23:27:46  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
23:27:46  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
23:27:46  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
23:27:46  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
23:27:46  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
23:27:46  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
23:27:46  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
23:27:46  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
23:27:46  26  --
23:27:46  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
23:27:46  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
23:27:46  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
23:27:46  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
23:27:46  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
23:27:46  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
23:27:46  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
23:27:46  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
23:27:46  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
23:27:46  36  FROM di5min WHERE pair LIKE'%aud%'
23:27:46  37  AND ydate > sysdate - 95
23:27:46  38  ORDER BY ydate
23:27:46  39  /

View created.

Elapsed: 00:00:00.06
23:27:46 SQL> 
23:27:46 SQL> -- rpt
23:27:46 SQL> 
23:27:46 SQL> SELECT
23:27:46   2  pair
23:27:46   3  ,COUNT(pair)
23:27:46   4  ,MIN(clse),MAX(clse)
23:27:46   5  ,MIN(avg6),MAX(avg6)
23:27:46   6  ,MIN(ydate),MAX(ydate)
23:27:46   7  FROM svm6102
23:27:46   8  GROUP BY pair
23:27:46   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
aud_usd       19808	.95405	  1.02495 .957141438 1.02284247 2010-10-03 23:30:01 2011-01-06 23:25:00

Elapsed: 00:00:00.89
23:27:47 SQL> 
23:27:47 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
23:27:47 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.22
23:27:47 SQL> CREATE TABLE svm6122 COMPRESS AS
23:27:47   2  SELECT
23:27:47   3  pair
23:27:47   4  ,ydate
23:27:47   5  ,prdate
23:27:47   6  ,clse
23:27:47   7  -- g6 is important. I want to predict g6:
23:27:47   8  ,ld6 - clse g6
23:27:47   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
23:27:47  10  -- I want more attributes from the ones I derived above:
23:27:47  11  -- clse relation to moving-min
23:27:47  12  ,clse-min4  cm4
23:27:47  13  ,clse-min6  cm6
23:27:47  14  ,clse-min8  cm8
23:27:47  15  ,clse-min10 cm10
23:27:47  16  ,clse-min12 cm12
23:27:47  17  ,clse-min14 cm14
23:27:47  18  ,clse-min16 cm16
23:27:47  19  ,clse-min18 cm18
23:27:47  20  -- clse relation to moving-avg
23:27:47  21  ,clse-avg4  ca4
23:27:47  22  ,clse-avg6  ca6
23:27:47  23  ,clse-avg8  ca8
23:27:47  24  ,clse-avg10 ca10
23:27:47  25  ,clse-avg12 ca12
23:27:47  26  ,clse-avg14 ca14
23:27:47  27  ,clse-avg16 ca16
23:27:47  28  ,clse-avg18 ca18
23:27:47  29  -- clse relation to moving-max
23:27:47  30  ,clse-max4  cx4
23:27:47  31  ,clse-max6  cx6
23:27:47  32  ,clse-max8  cx8
23:27:47  33  ,clse-max10 cx10
23:27:47  34  ,clse-max12 cx12
23:27:47  35  ,clse-max14 cx14
23:27:47  36  ,clse-max16 cx16
23:27:47  37  ,clse-max18 cx18
23:27:47  38  -- Derive more attributes.
23:27:47  39  -- I want to use CORR() here to help SVM see the shape of the series.
23:27:47  40  -- But COVAR_POP is more stable:
23:27:47  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
23:27:47  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
23:27:47  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
23:27:47  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
23:27:47  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
23:27:47  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
23:27:47  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
23:27:47  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
23:27:47  49  -- Derive date related attributes:
23:27:47  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
23:27:47  51  ,0+TO_CHAR(ydate,'D')d
23:27:47  52  ,0+TO_CHAR(ydate,'W')w
23:27:47  53  -- mpm stands for minutes-past-midnight:
23:27:47  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
23:27:47  55  -- mph stands for minutes-past-hour:
23:27:47  56  ,0+TO_CHAR(ydate,'MI')mph
23:27:47  57  FROM svm6102
23:27:47  58  ORDER BY ydate
23:27:47  59  /

Table created.

Elapsed: 00:00:02.07
23:27:49 SQL> 
23:27:49 SQL> -- rpt
23:27:49 SQL> 
23:27:49 SQL> SELECT
23:27:49   2  pair
23:27:49   3  ,COUNT(pair)
23:27:49   4  ,MIN(clse),MAX(clse)
23:27:49   5  ,MIN(ydate),MAX(ydate)
23:27:49   6  FROM svm6122
23:27:49   7  GROUP BY pair
23:27:49   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
aud_usd       19808	.95405	  1.02495 2010-10-03 23:30:01 2011-01-06 23:25:00

Elapsed: 00:00:00.04
23:27:49 SQL> 
23:27:49 SQL> -- Prepare for derivation of NTILE based params:
23:27:49 SQL> 
23:27:49 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.19
23:27:49 SQL> CREATE TABLE svm6142 COMPRESS AS
23:27:49   2  SELECT
23:27:49   3  pair
23:27:49   4  ,ydate
23:27:49   5  ,prdate
23:27:49   6  ,clse
23:27:49   7  ,g6
23:27:49   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
23:27:49   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
23:27:49  10  ,CASE WHEN trend IS NULL THEN 1
23:27:49  11  	    WHEN trend =0      THEN 1
23:27:49  12  	    ELSE trend END trend
23:27:49  13  ,cm4
23:27:49  14  ,cm6
23:27:49  15  ,cm8
23:27:49  16  ,cm10
23:27:49  17  ,cm12
23:27:49  18  ,cm14
23:27:49  19  ,cm16
23:27:49  20  ,cm18
23:27:49  21  --
23:27:49  22  ,ca4
23:27:49  23  ,ca6
23:27:49  24  ,ca8
23:27:49  25  ,ca10
23:27:49  26  ,ca12
23:27:49  27  ,ca14
23:27:49  28  ,ca16
23:27:49  29  ,ca18
23:27:49  30  --
23:27:49  31  ,cx4
23:27:49  32  ,cx6
23:27:49  33  ,cx8
23:27:49  34  ,cx10
23:27:49  35  ,cx12
23:27:49  36  ,cx14
23:27:49  37  ,cx16
23:27:49  38  ,cx18
23:27:49  39  --
23:27:49  40  ,crr4
23:27:49  41  ,crr6
23:27:49  42  ,crr8
23:27:49  43  ,crr10
23:27:49  44  ,crr12
23:27:49  45  ,crr14
23:27:49  46  ,crr16
23:27:49  47  ,crr18
23:27:49  48  --
23:27:49  49  ,hh
23:27:49  50  ,d
23:27:49  51  ,w
23:27:49  52  ,mpm
23:27:49  53  ,mph
23:27:49  54  FROM svm6122
23:27:49  55  ORDER BY ydate
23:27:49  56  /

Table created.

Elapsed: 00:00:00.38
23:27:50 SQL> 
23:27:50 SQL> -- rpt
23:27:50 SQL> 
23:27:50 SQL> SELECT
23:27:50   2  pair
23:27:50   3  ,trend
23:27:50   4  ,gatt
23:27:50   5  ,COUNT(pair)
23:27:50   6  ,AVG(g6)
23:27:50   7  FROM svm6142
23:27:50   8  GROUP BY pair,trend,gatt
23:27:50   9  ORDER BY pair,trend,gatt
23:27:50  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5712 -.00213988
aud_usd 	-1 up	      3701 .003745866
aud_usd 	-1		71
aud_usd 	 1 nup	      6730 -.00213939
aud_usd 	 1 up	      3593 .004054752
aud_usd 	 1		 1

6 rows selected.

Elapsed: 00:00:00.04
23:27:50 SQL> 
23:27:50 SQL> 
23:27:50 SQL> -- Derive NTILE based params:
23:27:50 SQL> 
23:27:50 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.16
23:27:50 SQL> CREATE TABLE svm6162 COMPRESS AS
23:27:50   2  SELECT
23:27:50   3  pair
23:27:50   4  ,ydate
23:27:50   5  ,prdate
23:27:50   6  ,clse
23:27:50   7  ,g6
23:27:50   8  ,gatt
23:27:50   9  ,gattn
23:27:50  10  ,trend
23:27:50  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
23:27:50  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
23:27:50  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
23:27:50  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
23:27:50  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
23:27:50  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
23:27:50  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
23:27:50  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
23:27:50  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
23:27:50  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
23:27:50  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
23:27:50  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
23:27:50  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
23:27:50  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
23:27:50  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
23:27:50  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
23:27:50  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
23:27:50  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
23:27:50  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
23:27:50  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
23:27:50  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
23:27:50  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
23:27:50  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
23:27:50  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
23:27:50  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
23:27:50  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
23:27:50  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
23:27:50  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
23:27:50  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
23:27:50  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
23:27:50  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
23:27:50  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
23:27:50  43  ,hh  att32
23:27:50  44  ,d   att33
23:27:50  45  ,w   att34
23:27:50  46  ,mpm att35
23:27:50  47  ,mph att36
23:27:50  48  ,trend att37
23:27:50  49  FROM svm6142
23:27:50  50  ORDER BY ydate
23:27:50  51  /

Table created.

Elapsed: 00:00:04.93
23:27:55 SQL> 
23:27:55 SQL> -- rpt
23:27:55 SQL> 
23:27:55 SQL> SELECT
23:27:55   2  pair
23:27:55   3  ,trend
23:27:55   4  ,gatt
23:27:55   5  ,COUNT(pair)
23:27:55   6  ,AVG(g6)
23:27:55   7  FROM svm6162
23:27:55   8  GROUP BY pair,trend,gatt
23:27:55   9  ORDER BY pair,trend,gatt
23:27:55  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5712 -.00213988
aud_usd 	-1 up	      3701 .003745866
aud_usd 	-1		71
aud_usd 	 1 nup	      6730 -.00213939
aud_usd 	 1 up	      3593 .004054752
aud_usd 	 1		 1

6 rows selected.

Elapsed: 00:00:00.03
23:27:55 SQL> 
23:27:55 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.19
23:27:55 SQL> CREATE TABLE modsrc COMPRESS AS
23:27:55   2  SELECT
23:27:55   3  pair
23:27:55   4  ,ydate
23:27:55   5  ,prdate
23:27:55   6  ,trend
23:27:55   7  ,g6
23:27:55   8  ,gatt
23:27:55   9  ,gattn
23:27:55  10  FROM svm6162
23:27:55  11  /

Table created.

Elapsed: 00:00:00.09
23:27:55 SQL> 
23:27:55 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.29
23:27:55 SQL> 
23:27:55 SQL> DROP   TABLE aud_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
23:27:55 SQL> CREATE TABLE aud_ms610 COMPRESS AS
23:27:55   2  SELECT
23:27:55   3  ydate
23:27:55   4  ,trend aud_trend
23:27:55   5  ,g6    aud_g6
23:27:55   6  ,gatt  aud_gatt
23:27:55   7  ,gattn aud_gattn
23:27:55   8  FROM modsrc
23:27:55   9  /

Table created.

Elapsed: 00:00:00.06
23:27:55 SQL> 
23:27:55 SQL> ANALYZE TABLE aud_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
23:27:56 SQL> 
23:27:56 SQL> -- I need a copy of the attributes:
23:27:56 SQL> 
23:27:56 SQL> 
23:27:56 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.05
23:27:56 SQL> CREATE TABLE aud_att COMPRESS AS
23:27:56   2  SELECT
23:27:56   3  ydate
23:27:56   4  ,att00 aud_att00
23:27:56   5  ,att01 aud_att01
23:27:56   6  ,att02 aud_att02
23:27:56   7  ,att03 aud_att03
23:27:56   8  ,att04 aud_att04
23:27:56   9  ,att05 aud_att05
23:27:56  10  ,att06 aud_att06
23:27:56  11  ,att07 aud_att07
23:27:56  12  ,att08 aud_att08
23:27:56  13  ,att09 aud_att09
23:27:56  14  ,att10 aud_att10
23:27:56  15  ,att11 aud_att11
23:27:56  16  ,att12 aud_att12
23:27:56  17  ,att13 aud_att13
23:27:56  18  ,att14 aud_att14
23:27:56  19  ,att15 aud_att15
23:27:56  20  ,att16 aud_att16
23:27:56  21  ,att17 aud_att17
23:27:56  22  ,att18 aud_att18
23:27:56  23  ,att19 aud_att19
23:27:56  24  ,att20 aud_att20
23:27:56  25  ,att21 aud_att21
23:27:56  26  ,att22 aud_att22
23:27:56  27  ,att23 aud_att23
23:27:56  28  ,att24 aud_att24
23:27:56  29  ,att25 aud_att25
23:27:56  30  ,att26 aud_att26
23:27:56  31  ,att27 aud_att27
23:27:56  32  ,att28 aud_att28
23:27:56  33  ,att29 aud_att29
23:27:56  34  ,att30 aud_att30
23:27:56  35  ,att31 aud_att31
23:27:56  36  ,att32 aud_att32
23:27:56  37  ,att33 aud_att33
23:27:56  38  ,att34 aud_att34
23:27:56  39  ,att35 aud_att35
23:27:56  40  ,att36 aud_att36
23:27:56  41  ,att37 aud_att37
23:27:56  42  FROM svm6162
23:27:56  43  /

Table created.

Elapsed: 00:00:00.17
23:27:56 SQL> 
23:27:56 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.43
23:27:56 SQL> 
23:27:56 SQL> -- rpt
23:27:56 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19808

Elapsed: 00:00:00.90
23:27:57 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     19808

Elapsed: 00:00:00.00
23:27:57 SQL> 
23:27:57 SQL> --
23:27:57 SQL> -- gbp610.sql
23:27:57 SQL> --
23:27:57 SQL> 
23:27:57 SQL> -- Creates views and tables for backtesting a forex SVM strategy
23:27:57 SQL> 
23:27:57 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.39
23:27:58 SQL> 
23:27:58 SQL> -- I created di5min here:
23:27:58 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
23:27:58 SQL> 
23:27:58 SQL> CREATE OR REPLACE VIEW svm6102 AS
23:27:58   2  SELECT
23:27:58   3  pair
23:27:58   4  ,ydate
23:27:58   5  ,prdate
23:27:58   6  ,rownum rnum -- acts as t in my time-series
23:27:58   7  ,clse
23:27:58   8  -- Derive a bunch of attributes from clse, the latest price:
23:27:58   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
23:27:58  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
23:27:58  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
23:27:58  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
23:27:58  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
23:27:58  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
23:27:58  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
23:27:58  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
23:27:58  17  --
23:27:58  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
23:27:58  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
23:27:58  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
23:27:58  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
23:27:58  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
23:27:58  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
23:27:58  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
23:27:58  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
23:27:58  26  --
23:27:58  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
23:27:58  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
23:27:58  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
23:27:58  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
23:27:58  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
23:27:58  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
23:27:58  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
23:27:58  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
23:27:58  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
23:27:58  36  FROM di5min WHERE pair LIKE'%gbp%'
23:27:58  37  AND ydate > sysdate - 95
23:27:58  38  ORDER BY ydate
23:27:58  39  /

View created.

Elapsed: 00:00:00.06
23:27:58 SQL> 
23:27:58 SQL> -- rpt
23:27:58 SQL> 
23:27:58 SQL> SELECT
23:27:58   2  pair
23:27:58   3  ,COUNT(pair)
23:27:58   4  ,MIN(clse),MAX(clse)
23:27:58   5  ,MIN(avg6),MAX(avg6)
23:27:58   6  ,MIN(ydate),MAX(ydate)
23:27:58   7  FROM svm6102
23:27:58   8  GROUP BY pair
23:27:58   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
gbp_usd       19810   1.535325	   1.6295 1.53696747 1.62716986 2010-10-03 23:30:01 2011-01-06 23:25:00

Elapsed: 00:00:00.88
23:27:59 SQL> 
23:27:59 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
23:27:59 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.29
23:27:59 SQL> CREATE TABLE svm6122 COMPRESS AS
23:27:59   2  SELECT
23:27:59   3  pair
23:27:59   4  ,ydate
23:27:59   5  ,prdate
23:27:59   6  ,clse
23:27:59   7  -- g6 is important. I want to predict g6:
23:27:59   8  ,ld6 - clse g6
23:27:59   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
23:27:59  10  -- I want more attributes from the ones I derived above:
23:27:59  11  -- clse relation to moving-min
23:27:59  12  ,clse-min4  cm4
23:27:59  13  ,clse-min6  cm6
23:27:59  14  ,clse-min8  cm8
23:27:59  15  ,clse-min10 cm10
23:27:59  16  ,clse-min12 cm12
23:27:59  17  ,clse-min14 cm14
23:27:59  18  ,clse-min16 cm16
23:27:59  19  ,clse-min18 cm18
23:27:59  20  -- clse relation to moving-avg
23:27:59  21  ,clse-avg4  ca4
23:27:59  22  ,clse-avg6  ca6
23:27:59  23  ,clse-avg8  ca8
23:27:59  24  ,clse-avg10 ca10
23:27:59  25  ,clse-avg12 ca12
23:27:59  26  ,clse-avg14 ca14
23:27:59  27  ,clse-avg16 ca16
23:27:59  28  ,clse-avg18 ca18
23:27:59  29  -- clse relation to moving-max
23:27:59  30  ,clse-max4  cx4
23:27:59  31  ,clse-max6  cx6
23:27:59  32  ,clse-max8  cx8
23:27:59  33  ,clse-max10 cx10
23:27:59  34  ,clse-max12 cx12
23:27:59  35  ,clse-max14 cx14
23:27:59  36  ,clse-max16 cx16
23:27:59  37  ,clse-max18 cx18
23:27:59  38  -- Derive more attributes.
23:27:59  39  -- I want to use CORR() here to help SVM see the shape of the series.
23:27:59  40  -- But COVAR_POP is more stable:
23:27:59  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
23:27:59  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
23:27:59  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
23:27:59  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
23:27:59  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
23:27:59  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
23:27:59  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
23:27:59  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
23:27:59  49  -- Derive date related attributes:
23:27:59  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
23:27:59  51  ,0+TO_CHAR(ydate,'D')d
23:27:59  52  ,0+TO_CHAR(ydate,'W')w
23:27:59  53  -- mpm stands for minutes-past-midnight:
23:27:59  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
23:27:59  55  -- mph stands for minutes-past-hour:
23:27:59  56  ,0+TO_CHAR(ydate,'MI')mph
23:27:59  57  FROM svm6102
23:27:59  58  ORDER BY ydate
23:27:59  59  /

Table created.

Elapsed: 00:00:02.07
23:28:01 SQL> 
23:28:01 SQL> -- rpt
23:28:01 SQL> 
23:28:01 SQL> SELECT
23:28:01   2  pair
23:28:01   3  ,COUNT(pair)
23:28:01   4  ,MIN(clse),MAX(clse)
23:28:01   5  ,MIN(ydate),MAX(ydate)
23:28:01   6  FROM svm6122
23:28:01   7  GROUP BY pair
23:28:01   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
gbp_usd       19810   1.535325	   1.6295 2010-10-03 23:30:01 2011-01-06 23:25:00

Elapsed: 00:00:00.05
23:28:01 SQL> 
23:28:01 SQL> -- Prepare for derivation of NTILE based params:
23:28:01 SQL> 
23:28:01 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.33
23:28:01 SQL> CREATE TABLE svm6142 COMPRESS AS
23:28:01   2  SELECT
23:28:01   3  pair
23:28:01   4  ,ydate
23:28:01   5  ,prdate
23:28:01   6  ,clse
23:28:01   7  ,g6
23:28:01   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
23:28:01   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
23:28:01  10  ,CASE WHEN trend IS NULL THEN 1
23:28:01  11  	    WHEN trend =0      THEN 1
23:28:01  12  	    ELSE trend END trend
23:28:01  13  ,cm4
23:28:01  14  ,cm6
23:28:01  15  ,cm8
23:28:01  16  ,cm10
23:28:01  17  ,cm12
23:28:01  18  ,cm14
23:28:01  19  ,cm16
23:28:01  20  ,cm18
23:28:01  21  --
23:28:01  22  ,ca4
23:28:01  23  ,ca6
23:28:01  24  ,ca8
23:28:01  25  ,ca10
23:28:01  26  ,ca12
23:28:01  27  ,ca14
23:28:01  28  ,ca16
23:28:01  29  ,ca18
23:28:01  30  --
23:28:01  31  ,cx4
23:28:01  32  ,cx6
23:28:01  33  ,cx8
23:28:01  34  ,cx10
23:28:01  35  ,cx12
23:28:01  36  ,cx14
23:28:01  37  ,cx16
23:28:01  38  ,cx18
23:28:01  39  --
23:28:01  40  ,crr4
23:28:01  41  ,crr6
23:28:01  42  ,crr8
23:28:01  43  ,crr10
23:28:01  44  ,crr12
23:28:01  45  ,crr14
23:28:01  46  ,crr16
23:28:01  47  ,crr18
23:28:01  48  --
23:28:01  49  ,hh
23:28:01  50  ,d
23:28:01  51  ,w
23:28:01  52  ,mpm
23:28:01  53  ,mph
23:28:01  54  FROM svm6122
23:28:01  55  ORDER BY ydate
23:28:01  56  /

Table created.

Elapsed: 00:00:00.37
23:28:02 SQL> 
23:28:02 SQL> -- rpt
23:28:02 SQL> 
23:28:02 SQL> SELECT
23:28:02   2  pair
23:28:02   3  ,trend
23:28:02   4  ,gatt
23:28:02   5  ,COUNT(pair)
23:28:02   6  ,AVG(g6)
23:28:02   7  FROM svm6142
23:28:02   8  GROUP BY pair,trend,gatt
23:28:02   9  ORDER BY pair,trend,gatt
23:28:02  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6422 -.00263084
gbp_usd 	-1 up	      3574 .004342253
gbp_usd 	-1		61
gbp_usd 	 1 nup	      6281 -.00265389
gbp_usd 	 1 up	      3461 .004520655
gbp_usd 	 1		11

6 rows selected.

Elapsed: 00:00:00.05
23:28:02 SQL> 
23:28:02 SQL> 
23:28:02 SQL> -- Derive NTILE based params:
23:28:02 SQL> 
23:28:02 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.21
23:28:02 SQL> CREATE TABLE svm6162 COMPRESS AS
23:28:02   2  SELECT
23:28:02   3  pair
23:28:02   4  ,ydate
23:28:02   5  ,prdate
23:28:02   6  ,clse
23:28:02   7  ,g6
23:28:02   8  ,gatt
23:28:02   9  ,gattn
23:28:02  10  ,trend
23:28:02  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
23:28:02  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
23:28:02  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
23:28:02  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
23:28:02  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
23:28:02  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
23:28:02  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
23:28:02  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
23:28:02  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
23:28:02  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
23:28:02  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
23:28:02  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
23:28:02  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
23:28:02  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
23:28:02  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
23:28:02  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
23:28:02  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
23:28:02  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
23:28:02  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
23:28:02  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
23:28:02  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
23:28:02  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
23:28:02  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
23:28:02  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
23:28:02  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
23:28:02  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
23:28:02  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
23:28:02  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
23:28:02  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
23:28:02  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
23:28:02  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
23:28:02  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
23:28:02  43  ,hh  att32
23:28:02  44  ,d   att33
23:28:02  45  ,w   att34
23:28:02  46  ,mpm att35
23:28:02  47  ,mph att36
23:28:02  48  ,trend att37
23:28:02  49  FROM svm6142
23:28:02  50  ORDER BY ydate
23:28:02  51  /

Table created.

Elapsed: 00:00:04.84
23:28:07 SQL> 
23:28:07 SQL> -- rpt
23:28:07 SQL> 
23:28:07 SQL> SELECT
23:28:07   2  pair
23:28:07   3  ,trend
23:28:07   4  ,gatt
23:28:07   5  ,COUNT(pair)
23:28:07   6  ,AVG(g6)
23:28:07   7  FROM svm6162
23:28:07   8  GROUP BY pair,trend,gatt
23:28:07   9  ORDER BY pair,trend,gatt
23:28:07  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6422 -.00263084
gbp_usd 	-1 up	      3574 .004342253
gbp_usd 	-1		61
gbp_usd 	 1 nup	      6281 -.00265389
gbp_usd 	 1 up	      3461 .004520655
gbp_usd 	 1		11

6 rows selected.

Elapsed: 00:00:00.03
23:28:07 SQL> 
23:28:07 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
23:28:07 SQL> CREATE TABLE modsrc COMPRESS AS
23:28:07   2  SELECT
23:28:07   3  pair
23:28:07   4  ,ydate
23:28:07   5  ,prdate
23:28:07   6  ,trend
23:28:07   7  ,g6
23:28:07   8  ,gatt
23:28:07   9  ,gattn
23:28:07  10  FROM svm6162
23:28:07  11  /

Table created.

Elapsed: 00:00:00.09
23:28:07 SQL> 
23:28:07 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.24
23:28:07 SQL> 
23:28:07 SQL> DROP   TABLE gbp_ms610 ;

Table dropped.

Elapsed: 00:00:00.13
23:28:07 SQL> CREATE TABLE gbp_ms610 COMPRESS AS
23:28:07   2  SELECT
23:28:07   3  ydate
23:28:07   4  ,trend gbp_trend
23:28:07   5  ,g6    gbp_g6
23:28:07   6  ,gatt  gbp_gatt
23:28:07   7  ,gattn gbp_gattn
23:28:07   8  FROM modsrc
23:28:07   9  /

Table created.

Elapsed: 00:00:00.07
23:28:07 SQL> 
23:28:07 SQL> ANALYZE TABLE gbp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
23:28:08 SQL> 
23:28:08 SQL> -- I need a copy of the attributes:
23:28:08 SQL> 
23:28:08 SQL> 
23:28:08 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.05
23:28:08 SQL> CREATE TABLE gbp_att COMPRESS AS
23:28:08   2  SELECT
23:28:08   3  ydate
23:28:08   4  ,att00 gbp_att00
23:28:08   5  ,att01 gbp_att01
23:28:08   6  ,att02 gbp_att02
23:28:08   7  ,att03 gbp_att03
23:28:08   8  ,att04 gbp_att04
23:28:08   9  ,att05 gbp_att05
23:28:08  10  ,att06 gbp_att06
23:28:08  11  ,att07 gbp_att07
23:28:08  12  ,att08 gbp_att08
23:28:08  13  ,att09 gbp_att09
23:28:08  14  ,att10 gbp_att10
23:28:08  15  ,att11 gbp_att11
23:28:08  16  ,att12 gbp_att12
23:28:08  17  ,att13 gbp_att13
23:28:08  18  ,att14 gbp_att14
23:28:08  19  ,att15 gbp_att15
23:28:08  20  ,att16 gbp_att16
23:28:08  21  ,att17 gbp_att17
23:28:08  22  ,att18 gbp_att18
23:28:08  23  ,att19 gbp_att19
23:28:08  24  ,att20 gbp_att20
23:28:08  25  ,att21 gbp_att21
23:28:08  26  ,att22 gbp_att22
23:28:08  27  ,att23 gbp_att23
23:28:08  28  ,att24 gbp_att24
23:28:08  29  ,att25 gbp_att25
23:28:08  30  ,att26 gbp_att26
23:28:08  31  ,att27 gbp_att27
23:28:08  32  ,att28 gbp_att28
23:28:08  33  ,att29 gbp_att29
23:28:08  34  ,att30 gbp_att30
23:28:08  35  ,att31 gbp_att31
23:28:08  36  ,att32 gbp_att32
23:28:08  37  ,att33 gbp_att33
23:28:08  38  ,att34 gbp_att34
23:28:08  39  ,att35 gbp_att35
23:28:08  40  ,att36 gbp_att36
23:28:08  41  ,att37 gbp_att37
23:28:08  42  FROM svm6162
23:28:08  43  /

Table created.

Elapsed: 00:00:00.18
23:28:08 SQL> 
23:28:08 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
23:28:08 SQL> 
23:28:08 SQL> -- rpt
23:28:08 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19810

Elapsed: 00:00:00.87
23:28:09 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     19810

Elapsed: 00:00:00.00
23:28:09 SQL> 
23:28:09 SQL> --
23:28:09 SQL> -- jpy610.sql
23:28:09 SQL> --
23:28:09 SQL> 
23:28:09 SQL> -- Creates views and tables for backtesting a forex SVM strategy
23:28:09 SQL> 
23:28:09 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.41
23:28:10 SQL> 
23:28:10 SQL> -- I created di5min here:
23:28:10 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
23:28:10 SQL> 
23:28:10 SQL> CREATE OR REPLACE VIEW svm6102 AS
23:28:10   2  SELECT
23:28:10   3  pair
23:28:10   4  ,ydate
23:28:10   5  ,prdate
23:28:10   6  ,rownum rnum -- acts as t in my time-series
23:28:10   7  ,clse
23:28:10   8  -- Derive a bunch of attributes from clse, the latest price:
23:28:10   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
23:28:10  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
23:28:10  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
23:28:10  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
23:28:10  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
23:28:10  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
23:28:10  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
23:28:10  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
23:28:10  17  --
23:28:10  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
23:28:10  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
23:28:10  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
23:28:10  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
23:28:10  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
23:28:10  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
23:28:10  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
23:28:10  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
23:28:10  26  --
23:28:10  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
23:28:10  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
23:28:10  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
23:28:10  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
23:28:10  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
23:28:10  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
23:28:10  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
23:28:10  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
23:28:10  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
23:28:10  36  FROM di5min WHERE pair LIKE'%jpy%'
23:28:10  37  AND ydate > sysdate - 95
23:28:10  38  ORDER BY ydate
23:28:10  39  /

View created.

Elapsed: 00:00:00.04
23:28:10 SQL> 
23:28:10 SQL> -- rpt
23:28:10 SQL> 
23:28:10 SQL> SELECT
23:28:10   2  pair
23:28:10   3  ,COUNT(pair)
23:28:10   4  ,MIN(clse),MAX(clse)
23:28:10   5  ,MIN(avg6),MAX(avg6)
23:28:10   6  ,MIN(ydate),MAX(ydate)
23:28:10   7  FROM svm6102
23:28:10   8  GROUP BY pair
23:28:10   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_jpy       19809	 80.25	   84.485 80.3595205 84.3105479 2010-10-03 23:30:01 2011-01-06 23:25:00

Elapsed: 00:00:00.93
23:28:11 SQL> 
23:28:11 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
23:28:11 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.18
23:28:11 SQL> CREATE TABLE svm6122 COMPRESS AS
23:28:11   2  SELECT
23:28:11   3  pair
23:28:11   4  ,ydate
23:28:11   5  ,prdate
23:28:11   6  ,clse
23:28:11   7  -- g6 is important. I want to predict g6:
23:28:11   8  ,ld6 - clse g6
23:28:11   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
23:28:11  10  -- I want more attributes from the ones I derived above:
23:28:11  11  -- clse relation to moving-min
23:28:11  12  ,clse-min4  cm4
23:28:11  13  ,clse-min6  cm6
23:28:11  14  ,clse-min8  cm8
23:28:11  15  ,clse-min10 cm10
23:28:11  16  ,clse-min12 cm12
23:28:11  17  ,clse-min14 cm14
23:28:11  18  ,clse-min16 cm16
23:28:11  19  ,clse-min18 cm18
23:28:11  20  -- clse relation to moving-avg
23:28:11  21  ,clse-avg4  ca4
23:28:11  22  ,clse-avg6  ca6
23:28:11  23  ,clse-avg8  ca8
23:28:11  24  ,clse-avg10 ca10
23:28:11  25  ,clse-avg12 ca12
23:28:11  26  ,clse-avg14 ca14
23:28:11  27  ,clse-avg16 ca16
23:28:11  28  ,clse-avg18 ca18
23:28:11  29  -- clse relation to moving-max
23:28:11  30  ,clse-max4  cx4
23:28:11  31  ,clse-max6  cx6
23:28:11  32  ,clse-max8  cx8
23:28:11  33  ,clse-max10 cx10
23:28:11  34  ,clse-max12 cx12
23:28:11  35  ,clse-max14 cx14
23:28:11  36  ,clse-max16 cx16
23:28:11  37  ,clse-max18 cx18
23:28:11  38  -- Derive more attributes.
23:28:11  39  -- I want to use CORR() here to help SVM see the shape of the series.
23:28:11  40  -- But COVAR_POP is more stable:
23:28:11  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
23:28:11  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
23:28:11  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
23:28:11  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
23:28:11  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
23:28:11  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
23:28:11  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
23:28:11  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
23:28:11  49  -- Derive date related attributes:
23:28:11  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
23:28:11  51  ,0+TO_CHAR(ydate,'D')d
23:28:11  52  ,0+TO_CHAR(ydate,'W')w
23:28:11  53  -- mpm stands for minutes-past-midnight:
23:28:11  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
23:28:11  55  -- mph stands for minutes-past-hour:
23:28:11  56  ,0+TO_CHAR(ydate,'MI')mph
23:28:11  57  FROM svm6102
23:28:11  58  ORDER BY ydate
23:28:11  59  /

Table created.

Elapsed: 00:00:02.14
23:28:13 SQL> 
23:28:13 SQL> -- rpt
23:28:13 SQL> 
23:28:13 SQL> SELECT
23:28:13   2  pair
23:28:13   3  ,COUNT(pair)
23:28:13   4  ,MIN(clse),MAX(clse)
23:28:13   5  ,MIN(ydate),MAX(ydate)
23:28:13   6  FROM svm6122
23:28:13   7  GROUP BY pair
23:28:13   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_jpy       19809	 80.25	   84.485 2010-10-03 23:30:01 2011-01-06 23:25:00

Elapsed: 00:00:00.05
23:28:13 SQL> 
23:28:13 SQL> -- Prepare for derivation of NTILE based params:
23:28:13 SQL> 
23:28:13 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.31
23:28:13 SQL> CREATE TABLE svm6142 COMPRESS AS
23:28:13   2  SELECT
23:28:13   3  pair
23:28:13   4  ,ydate
23:28:13   5  ,prdate
23:28:13   6  ,clse
23:28:13   7  ,g6
23:28:13   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
23:28:13   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
23:28:13  10  ,CASE WHEN trend IS NULL THEN 1
23:28:13  11  	    WHEN trend =0      THEN 1
23:28:13  12  	    ELSE trend END trend
23:28:13  13  ,cm4
23:28:13  14  ,cm6
23:28:13  15  ,cm8
23:28:13  16  ,cm10
23:28:13  17  ,cm12
23:28:13  18  ,cm14
23:28:13  19  ,cm16
23:28:13  20  ,cm18
23:28:13  21  --
23:28:13  22  ,ca4
23:28:13  23  ,ca6
23:28:13  24  ,ca8
23:28:13  25  ,ca10
23:28:13  26  ,ca12
23:28:13  27  ,ca14
23:28:13  28  ,ca16
23:28:13  29  ,ca18
23:28:13  30  --
23:28:13  31  ,cx4
23:28:13  32  ,cx6
23:28:13  33  ,cx8
23:28:13  34  ,cx10
23:28:13  35  ,cx12
23:28:13  36  ,cx14
23:28:13  37  ,cx16
23:28:13  38  ,cx18
23:28:13  39  --
23:28:13  40  ,crr4
23:28:13  41  ,crr6
23:28:13  42  ,crr8
23:28:13  43  ,crr10
23:28:13  44  ,crr12
23:28:13  45  ,crr14
23:28:13  46  ,crr16
23:28:13  47  ,crr18
23:28:13  48  --
23:28:13  49  ,hh
23:28:13  50  ,d
23:28:13  51  ,w
23:28:13  52  ,mpm
23:28:13  53  ,mph
23:28:13  54  FROM svm6122
23:28:13  55  ORDER BY ydate
23:28:13  56  /

Table created.

Elapsed: 00:00:00.38
23:28:14 SQL> 
23:28:14 SQL> -- rpt
23:28:14 SQL> 
23:28:14 SQL> SELECT
23:28:14   2  pair
23:28:14   3  ,trend
23:28:14   4  ,gatt
23:28:14   5  ,COUNT(pair)
23:28:14   6  ,AVG(g6)
23:28:14   7  FROM svm6142
23:28:14   8  GROUP BY pair,trend,gatt
23:28:14   9  ORDER BY pair,trend,gatt
23:28:14  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5189 -.16550204
usd_jpy 	-1 up	      4906 .169399494
usd_jpy 	-1		 4
usd_jpy 	 1 nup	      5072 -.15501326
usd_jpy 	 1 up	      4570 .173627939
usd_jpy 	 1		68

6 rows selected.

Elapsed: 00:00:00.04
23:28:14 SQL> 
23:28:14 SQL> 
23:28:14 SQL> -- Derive NTILE based params:
23:28:14 SQL> 
23:28:14 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.19
23:28:14 SQL> CREATE TABLE svm6162 COMPRESS AS
23:28:14   2  SELECT
23:28:14   3  pair
23:28:14   4  ,ydate
23:28:14   5  ,prdate
23:28:14   6  ,clse
23:28:14   7  ,g6
23:28:14   8  ,gatt
23:28:14   9  ,gattn
23:28:14  10  ,trend
23:28:14  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
23:28:14  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
23:28:14  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
23:28:14  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
23:28:14  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
23:28:14  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
23:28:14  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
23:28:14  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
23:28:14  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
23:28:14  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
23:28:14  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
23:28:14  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
23:28:14  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
23:28:14  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
23:28:14  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
23:28:14  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
23:28:14  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
23:28:14  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
23:28:14  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
23:28:14  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
23:28:14  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
23:28:14  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
23:28:14  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
23:28:14  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
23:28:14  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
23:28:14  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
23:28:14  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
23:28:14  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
23:28:14  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
23:28:14  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
23:28:14  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
23:28:14  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
23:28:14  43  ,hh  att32
23:28:14  44  ,d   att33
23:28:14  45  ,w   att34
23:28:14  46  ,mpm att35
23:28:14  47  ,mph att36
23:28:14  48  ,trend att37
23:28:14  49  FROM svm6142
23:28:14  50  ORDER BY ydate
23:28:14  51  /

Table created.

Elapsed: 00:00:04.83
23:28:19 SQL> 
23:28:19 SQL> -- rpt
23:28:19 SQL> 
23:28:19 SQL> SELECT
23:28:19   2  pair
23:28:19   3  ,trend
23:28:19   4  ,gatt
23:28:19   5  ,COUNT(pair)
23:28:19   6  ,AVG(g6)
23:28:19   7  FROM svm6162
23:28:19   8  GROUP BY pair,trend,gatt
23:28:19   9  ORDER BY pair,trend,gatt
23:28:19  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5189 -.16550204
usd_jpy 	-1 up	      4906 .169399494
usd_jpy 	-1		 4
usd_jpy 	 1 nup	      5072 -.15501326
usd_jpy 	 1 up	      4570 .173627939
usd_jpy 	 1		68

6 rows selected.

Elapsed: 00:00:00.02
23:28:19 SQL> 
23:28:19 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.18
23:28:19 SQL> CREATE TABLE modsrc COMPRESS AS
23:28:19   2  SELECT
23:28:19   3  pair
23:28:19   4  ,ydate
23:28:19   5  ,prdate
23:28:19   6  ,trend
23:28:19   7  ,g6
23:28:19   8  ,gatt
23:28:19   9  ,gattn
23:28:19  10  FROM svm6162
23:28:19  11  /

Table created.

Elapsed: 00:00:00.08
23:28:19 SQL> 
23:28:19 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
23:28:19 SQL> 
23:28:19 SQL> DROP   TABLE jpy_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
23:28:19 SQL> CREATE TABLE jpy_ms610 COMPRESS AS
23:28:19   2  SELECT
23:28:19   3  ydate
23:28:19   4  ,trend jpy_trend
23:28:19   5  ,g6    jpy_g6
23:28:19   6  ,gatt  jpy_gatt
23:28:19   7  ,gattn jpy_gattn
23:28:19   8  FROM modsrc
23:28:19   9  /

Table created.

Elapsed: 00:00:00.07
23:28:19 SQL> 
23:28:19 SQL> ANALYZE TABLE jpy_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
23:28:19 SQL> 
23:28:19 SQL> -- I need a copy of the attributes:
23:28:19 SQL> 
23:28:19 SQL> 
23:28:19 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.04
23:28:20 SQL> CREATE TABLE jpy_att COMPRESS AS
23:28:20   2  SELECT
23:28:20   3  ydate
23:28:20   4  ,att00 jpy_att00
23:28:20   5  ,att01 jpy_att01
23:28:20   6  ,att02 jpy_att02
23:28:20   7  ,att03 jpy_att03
23:28:20   8  ,att04 jpy_att04
23:28:20   9  ,att05 jpy_att05
23:28:20  10  ,att06 jpy_att06
23:28:20  11  ,att07 jpy_att07
23:28:20  12  ,att08 jpy_att08
23:28:20  13  ,att09 jpy_att09
23:28:20  14  ,att10 jpy_att10
23:28:20  15  ,att11 jpy_att11
23:28:20  16  ,att12 jpy_att12
23:28:20  17  ,att13 jpy_att13
23:28:20  18  ,att14 jpy_att14
23:28:20  19  ,att15 jpy_att15
23:28:20  20  ,att16 jpy_att16
23:28:20  21  ,att17 jpy_att17
23:28:20  22  ,att18 jpy_att18
23:28:20  23  ,att19 jpy_att19
23:28:20  24  ,att20 jpy_att20
23:28:20  25  ,att21 jpy_att21
23:28:20  26  ,att22 jpy_att22
23:28:20  27  ,att23 jpy_att23
23:28:20  28  ,att24 jpy_att24
23:28:20  29  ,att25 jpy_att25
23:28:20  30  ,att26 jpy_att26
23:28:20  31  ,att27 jpy_att27
23:28:20  32  ,att28 jpy_att28
23:28:20  33  ,att29 jpy_att29
23:28:20  34  ,att30 jpy_att30
23:28:20  35  ,att31 jpy_att31
23:28:20  36  ,att32 jpy_att32
23:28:20  37  ,att33 jpy_att33
23:28:20  38  ,att34 jpy_att34
23:28:20  39  ,att35 jpy_att35
23:28:20  40  ,att36 jpy_att36
23:28:20  41  ,att37 jpy_att37
23:28:20  42  FROM svm6162
23:28:20  43  /

Table created.

Elapsed: 00:00:00.22
23:28:20 SQL> 
23:28:20 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.54
23:28:20 SQL> 
23:28:20 SQL> -- rpt
23:28:20 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19809

Elapsed: 00:00:00.94
23:28:21 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     19809

Elapsed: 00:00:00.00
23:28:21 SQL> 
23:28:21 SQL> --
23:28:21 SQL> -- cad610.sql
23:28:21 SQL> --
23:28:21 SQL> 
23:28:21 SQL> -- Creates views and tables for backtesting a forex SVM strategy
23:28:21 SQL> 
23:28:21 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:01.04
23:28:22 SQL> 
23:28:22 SQL> -- I created di5min here:
23:28:22 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
23:28:22 SQL> 
23:28:22 SQL> CREATE OR REPLACE VIEW svm6102 AS
23:28:22   2  SELECT
23:28:22   3  pair
23:28:22   4  ,ydate
23:28:22   5  ,prdate
23:28:22   6  ,rownum rnum -- acts as t in my time-series
23:28:22   7  ,clse
23:28:22   8  -- Derive a bunch of attributes from clse, the latest price:
23:28:22   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
23:28:22  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
23:28:22  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
23:28:22  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
23:28:22  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
23:28:22  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
23:28:22  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
23:28:22  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
23:28:22  17  --
23:28:22  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
23:28:22  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
23:28:22  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
23:28:22  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
23:28:22  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
23:28:22  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
23:28:22  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
23:28:22  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
23:28:22  26  --
23:28:22  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
23:28:22  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
23:28:22  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
23:28:22  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
23:28:22  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
23:28:22  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
23:28:22  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
23:28:22  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
23:28:22  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
23:28:22  36  FROM di5min WHERE pair LIKE'%cad%'
23:28:22  37  AND ydate > sysdate - 95
23:28:22  38  ORDER BY ydate
23:28:22  39  /

View created.

Elapsed: 00:00:00.04
23:28:22 SQL> 
23:28:22 SQL> -- rpt
23:28:22 SQL> 
23:28:22 SQL> SELECT
23:28:22   2  pair
23:28:22   3  ,COUNT(pair)
23:28:22   4  ,MIN(clse),MAX(clse)
23:28:22   5  ,MIN(avg6),MAX(avg6)
23:28:22   6  ,MIN(ydate),MAX(ydate)
23:28:22   7  FROM svm6102
23:28:22   8  GROUP BY pair
23:28:22   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_cad       19809    .988925	   1.0355  .99060274 1.03282877 2010-10-03 23:30:01 2011-01-06 23:25:00

Elapsed: 00:00:00.86
23:28:23 SQL> 
23:28:23 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
23:28:23 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.20
23:28:23 SQL> CREATE TABLE svm6122 COMPRESS AS
23:28:23   2  SELECT
23:28:23   3  pair
23:28:23   4  ,ydate
23:28:23   5  ,prdate
23:28:23   6  ,clse
23:28:23   7  -- g6 is important. I want to predict g6:
23:28:23   8  ,ld6 - clse g6
23:28:23   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
23:28:23  10  -- I want more attributes from the ones I derived above:
23:28:23  11  -- clse relation to moving-min
23:28:23  12  ,clse-min4  cm4
23:28:23  13  ,clse-min6  cm6
23:28:23  14  ,clse-min8  cm8
23:28:23  15  ,clse-min10 cm10
23:28:23  16  ,clse-min12 cm12
23:28:23  17  ,clse-min14 cm14
23:28:23  18  ,clse-min16 cm16
23:28:23  19  ,clse-min18 cm18
23:28:23  20  -- clse relation to moving-avg
23:28:23  21  ,clse-avg4  ca4
23:28:23  22  ,clse-avg6  ca6
23:28:23  23  ,clse-avg8  ca8
23:28:23  24  ,clse-avg10 ca10
23:28:23  25  ,clse-avg12 ca12
23:28:23  26  ,clse-avg14 ca14
23:28:23  27  ,clse-avg16 ca16
23:28:23  28  ,clse-avg18 ca18
23:28:23  29  -- clse relation to moving-max
23:28:23  30  ,clse-max4  cx4
23:28:23  31  ,clse-max6  cx6
23:28:23  32  ,clse-max8  cx8
23:28:23  33  ,clse-max10 cx10
23:28:23  34  ,clse-max12 cx12
23:28:23  35  ,clse-max14 cx14
23:28:23  36  ,clse-max16 cx16
23:28:23  37  ,clse-max18 cx18
23:28:23  38  -- Derive more attributes.
23:28:23  39  -- I want to use CORR() here to help SVM see the shape of the series.
23:28:23  40  -- But COVAR_POP is more stable:
23:28:23  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
23:28:23  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
23:28:23  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
23:28:23  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
23:28:23  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
23:28:23  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
23:28:23  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
23:28:23  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
23:28:23  49  -- Derive date related attributes:
23:28:23  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
23:28:23  51  ,0+TO_CHAR(ydate,'D')d
23:28:23  52  ,0+TO_CHAR(ydate,'W')w
23:28:23  53  -- mpm stands for minutes-past-midnight:
23:28:23  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
23:28:23  55  -- mph stands for minutes-past-hour:
23:28:23  56  ,0+TO_CHAR(ydate,'MI')mph
23:28:23  57  FROM svm6102
23:28:23  58  ORDER BY ydate
23:28:23  59  /

Table created.

Elapsed: 00:00:02.09
23:28:25 SQL> 
23:28:25 SQL> -- rpt
23:28:25 SQL> 
23:28:25 SQL> SELECT
23:28:25   2  pair
23:28:25   3  ,COUNT(pair)
23:28:25   4  ,MIN(clse),MAX(clse)
23:28:25   5  ,MIN(ydate),MAX(ydate)
23:28:25   6  FROM svm6122
23:28:25   7  GROUP BY pair
23:28:25   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_cad       19809    .988925	   1.0355 2010-10-03 23:30:01 2011-01-06 23:25:00

Elapsed: 00:00:00.04
23:28:25 SQL> 
23:28:26 SQL> -- Prepare for derivation of NTILE based params:
23:28:26 SQL> 
23:28:26 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.30
23:28:26 SQL> CREATE TABLE svm6142 COMPRESS AS
23:28:26   2  SELECT
23:28:26   3  pair
23:28:26   4  ,ydate
23:28:26   5  ,prdate
23:28:26   6  ,clse
23:28:26   7  ,g6
23:28:26   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
23:28:26   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
23:28:26  10  ,CASE WHEN trend IS NULL THEN 1
23:28:26  11  	    WHEN trend =0      THEN 1
23:28:26  12  	    ELSE trend END trend
23:28:26  13  ,cm4
23:28:26  14  ,cm6
23:28:26  15  ,cm8
23:28:26  16  ,cm10
23:28:26  17  ,cm12
23:28:26  18  ,cm14
23:28:26  19  ,cm16
23:28:26  20  ,cm18
23:28:26  21  --
23:28:26  22  ,ca4
23:28:26  23  ,ca6
23:28:26  24  ,ca8
23:28:26  25  ,ca10
23:28:26  26  ,ca12
23:28:26  27  ,ca14
23:28:26  28  ,ca16
23:28:26  29  ,ca18
23:28:26  30  --
23:28:26  31  ,cx4
23:28:26  32  ,cx6
23:28:26  33  ,cx8
23:28:26  34  ,cx10
23:28:26  35  ,cx12
23:28:26  36  ,cx14
23:28:26  37  ,cx16
23:28:26  38  ,cx18
23:28:26  39  --
23:28:26  40  ,crr4
23:28:26  41  ,crr6
23:28:26  42  ,crr8
23:28:26  43  ,crr10
23:28:26  44  ,crr12
23:28:26  45  ,crr14
23:28:26  46  ,crr16
23:28:26  47  ,crr18
23:28:26  48  --
23:28:26  49  ,hh
23:28:26  50  ,d
23:28:26  51  ,w
23:28:26  52  ,mpm
23:28:26  53  ,mph
23:28:26  54  FROM svm6122
23:28:26  55  ORDER BY ydate
23:28:26  56  /

Table created.

Elapsed: 00:00:00.36
23:28:26 SQL> 
23:28:26 SQL> -- rpt
23:28:26 SQL> 
23:28:26 SQL> SELECT
23:28:26   2  pair
23:28:26   3  ,trend
23:28:26   4  ,gatt
23:28:26   5  ,COUNT(pair)
23:28:26   6  ,AVG(g6)
23:28:26   7  FROM svm6142
23:28:26   8  GROUP BY pair,trend,gatt
23:28:26   9  ORDER BY pair,trend,gatt
23:28:26  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7317 -.00124171
usd_cad 	-1 up	      3186 .003051082
usd_cad 	-1		20
usd_cad 	 1 nup	      6841   -.001609
usd_cad 	 1 up	      2393 .003642184
usd_cad 	 1		52

6 rows selected.

Elapsed: 00:00:00.03
23:28:26 SQL> 
23:28:26 SQL> 
23:28:26 SQL> -- Derive NTILE based params:
23:28:26 SQL> 
23:28:26 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.16
23:28:26 SQL> CREATE TABLE svm6162 COMPRESS AS
23:28:26   2  SELECT
23:28:26   3  pair
23:28:26   4  ,ydate
23:28:26   5  ,prdate
23:28:26   6  ,clse
23:28:26   7  ,g6
23:28:26   8  ,gatt
23:28:26   9  ,gattn
23:28:26  10  ,trend
23:28:26  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
23:28:26  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
23:28:26  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
23:28:26  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
23:28:26  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
23:28:26  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
23:28:26  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
23:28:26  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
23:28:26  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
23:28:26  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
23:28:26  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
23:28:26  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
23:28:26  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
23:28:26  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
23:28:26  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
23:28:26  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
23:28:26  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
23:28:26  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
23:28:26  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
23:28:26  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
23:28:26  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
23:28:26  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
23:28:26  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
23:28:26  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
23:28:26  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
23:28:26  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
23:28:26  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
23:28:26  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
23:28:26  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
23:28:26  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
23:28:26  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
23:28:26  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
23:28:26  43  ,hh  att32
23:28:26  44  ,d   att33
23:28:26  45  ,w   att34
23:28:26  46  ,mpm att35
23:28:26  47  ,mph att36
23:28:26  48  ,trend att37
23:28:26  49  FROM svm6142
23:28:26  50  ORDER BY ydate
23:28:26  51  /

Table created.

Elapsed: 00:00:04.79
23:28:31 SQL> 
23:28:31 SQL> -- rpt
23:28:31 SQL> 
23:28:31 SQL> SELECT
23:28:31   2  pair
23:28:31   3  ,trend
23:28:31   4  ,gatt
23:28:31   5  ,COUNT(pair)
23:28:31   6  ,AVG(g6)
23:28:31   7  FROM svm6162
23:28:31   8  GROUP BY pair,trend,gatt
23:28:31   9  ORDER BY pair,trend,gatt
23:28:31  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7317 -.00124171
usd_cad 	-1 up	      3186 .003051082
usd_cad 	-1		20
usd_cad 	 1 nup	      6841   -.001609
usd_cad 	 1 up	      2393 .003642184
usd_cad 	 1		52

6 rows selected.

Elapsed: 00:00:00.03
23:28:31 SQL> 
23:28:31 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.11
23:28:31 SQL> CREATE TABLE modsrc COMPRESS AS
23:28:31   2  SELECT
23:28:31   3  pair
23:28:31   4  ,ydate
23:28:31   5  ,prdate
23:28:31   6  ,trend
23:28:31   7  ,g6
23:28:31   8  ,gatt
23:28:31   9  ,gattn
23:28:31  10  FROM svm6162
23:28:31  11  /

Table created.

Elapsed: 00:00:00.08
23:28:31 SQL> 
23:28:31 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
23:28:32 SQL> 
23:28:32 SQL> DROP   TABLE cad_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
23:28:32 SQL> CREATE TABLE cad_ms610 COMPRESS AS
23:28:32   2  SELECT
23:28:32   3  ydate
23:28:32   4  ,trend cad_trend
23:28:32   5  ,g6    cad_g6
23:28:32   6  ,gatt  cad_gatt
23:28:32   7  ,gattn cad_gattn
23:28:32   8  FROM modsrc
23:28:32   9  /

Table created.

Elapsed: 00:00:00.05
23:28:32 SQL> 
23:28:32 SQL> ANALYZE TABLE cad_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
23:28:32 SQL> 
23:28:32 SQL> -- I need a copy of the attributes:
23:28:32 SQL> 
23:28:32 SQL> 
23:28:32 SQL> DROP   TABLE cad_att;

Table dropped.

Elapsed: 00:00:00.04
23:28:32 SQL> CREATE TABLE cad_att COMPRESS AS
23:28:32   2  SELECT
23:28:32   3  ydate
23:28:32   4  ,att00 cad_att00
23:28:32   5  ,att01 cad_att01
23:28:32   6  ,att02 cad_att02
23:28:32   7  ,att03 cad_att03
23:28:32   8  ,att04 cad_att04
23:28:32   9  ,att05 cad_att05
23:28:32  10  ,att06 cad_att06
23:28:32  11  ,att07 cad_att07
23:28:32  12  ,att08 cad_att08
23:28:32  13  ,att09 cad_att09
23:28:32  14  ,att10 cad_att10
23:28:32  15  ,att11 cad_att11
23:28:32  16  ,att12 cad_att12
23:28:32  17  ,att13 cad_att13
23:28:32  18  ,att14 cad_att14
23:28:32  19  ,att15 cad_att15
23:28:32  20  ,att16 cad_att16
23:28:32  21  ,att17 cad_att17
23:28:32  22  ,att18 cad_att18
23:28:32  23  ,att19 cad_att19
23:28:32  24  ,att20 cad_att20
23:28:32  25  ,att21 cad_att21
23:28:32  26  ,att22 cad_att22
23:28:32  27  ,att23 cad_att23
23:28:32  28  ,att24 cad_att24
23:28:32  29  ,att25 cad_att25
23:28:32  30  ,att26 cad_att26
23:28:32  31  ,att27 cad_att27
23:28:32  32  ,att28 cad_att28
23:28:32  33  ,att29 cad_att29
23:28:32  34  ,att30 cad_att30
23:28:32  35  ,att31 cad_att31
23:28:32  36  ,att32 cad_att32
23:28:32  37  ,att33 cad_att33
23:28:32  38  ,att34 cad_att34
23:28:32  39  ,att35 cad_att35
23:28:32  40  ,att36 cad_att36
23:28:32  41  ,att37 cad_att37
23:28:32  42  FROM svm6162
23:28:32  43  /

Table created.

Elapsed: 00:00:00.16
23:28:32 SQL> 
23:28:32 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.48
23:28:33 SQL> 
23:28:33 SQL> -- rpt
23:28:33 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19809

Elapsed: 00:00:00.84
23:28:33 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
     19809

Elapsed: 00:00:00.00
23:28:33 SQL> 
23:28:33 SQL> --
23:28:33 SQL> -- chf610.sql
23:28:33 SQL> --
23:28:33 SQL> 
23:28:33 SQL> -- Creates views and tables for backtesting a forex SVM strategy
23:28:33 SQL> 
23:28:33 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.46
23:28:34 SQL> 
23:28:34 SQL> -- I created di5min here:
23:28:34 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
23:28:34 SQL> 
23:28:34 SQL> CREATE OR REPLACE VIEW svm6102 AS
23:28:34   2  SELECT
23:28:34   3  pair
23:28:34   4  ,ydate
23:28:34   5  ,prdate
23:28:34   6  ,rownum rnum -- acts as t in my time-series
23:28:34   7  ,clse
23:28:34   8  -- Derive a bunch of attributes from clse, the latest price:
23:28:34   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
23:28:34  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
23:28:34  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
23:28:34  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
23:28:34  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
23:28:34  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
23:28:34  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
23:28:34  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
23:28:34  17  --
23:28:34  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
23:28:34  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
23:28:34  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
23:28:34  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
23:28:34  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
23:28:34  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
23:28:34  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
23:28:34  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
23:28:34  26  --
23:28:34  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
23:28:34  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
23:28:34  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
23:28:34  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
23:28:34  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
23:28:34  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
23:28:34  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
23:28:34  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
23:28:34  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
23:28:34  36  FROM di5min WHERE pair LIKE'%chf%'
23:28:34  37  AND ydate > sysdate - 95
23:28:34  38  ORDER BY ydate
23:28:34  39  /

View created.

Elapsed: 00:00:00.04
23:28:34 SQL> 
23:28:34 SQL> -- rpt
23:28:34 SQL> 
23:28:34 SQL> SELECT
23:28:34   2  pair
23:28:34   3  ,COUNT(pair)
23:28:34   4  ,MIN(clse),MAX(clse)
23:28:34   5  ,MIN(avg6),MAX(avg6)
23:28:34   6  ,MIN(ydate),MAX(ydate)
23:28:34   7  FROM svm6102
23:28:34   8  GROUP BY pair
23:28:34   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_chf       19812    .931675	  1.00635 .933257711 1.00498151 2010-10-03 23:30:01 2011-01-06 23:25:00

Elapsed: 00:00:00.86
23:28:35 SQL> 
23:28:35 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
23:28:35 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.28
23:28:35 SQL> CREATE TABLE svm6122 COMPRESS AS
23:28:35   2  SELECT
23:28:35   3  pair
23:28:35   4  ,ydate
23:28:35   5  ,prdate
23:28:35   6  ,clse
23:28:35   7  -- g6 is important. I want to predict g6:
23:28:35   8  ,ld6 - clse g6
23:28:35   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
23:28:35  10  -- I want more attributes from the ones I derived above:
23:28:35  11  -- clse relation to moving-min
23:28:35  12  ,clse-min4  cm4
23:28:35  13  ,clse-min6  cm6
23:28:35  14  ,clse-min8  cm8
23:28:35  15  ,clse-min10 cm10
23:28:35  16  ,clse-min12 cm12
23:28:35  17  ,clse-min14 cm14
23:28:35  18  ,clse-min16 cm16
23:28:35  19  ,clse-min18 cm18
23:28:35  20  -- clse relation to moving-avg
23:28:35  21  ,clse-avg4  ca4
23:28:35  22  ,clse-avg6  ca6
23:28:35  23  ,clse-avg8  ca8
23:28:35  24  ,clse-avg10 ca10
23:28:35  25  ,clse-avg12 ca12
23:28:35  26  ,clse-avg14 ca14
23:28:35  27  ,clse-avg16 ca16
23:28:35  28  ,clse-avg18 ca18
23:28:35  29  -- clse relation to moving-max
23:28:35  30  ,clse-max4  cx4
23:28:35  31  ,clse-max6  cx6
23:28:35  32  ,clse-max8  cx8
23:28:35  33  ,clse-max10 cx10
23:28:35  34  ,clse-max12 cx12
23:28:35  35  ,clse-max14 cx14
23:28:35  36  ,clse-max16 cx16
23:28:35  37  ,clse-max18 cx18
23:28:35  38  -- Derive more attributes.
23:28:35  39  -- I want to use CORR() here to help SVM see the shape of the series.
23:28:35  40  -- But COVAR_POP is more stable:
23:28:35  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
23:28:35  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
23:28:35  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
23:28:35  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
23:28:35  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
23:28:35  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
23:28:35  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
23:28:35  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
23:28:35  49  -- Derive date related attributes:
23:28:35  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
23:28:35  51  ,0+TO_CHAR(ydate,'D')d
23:28:35  52  ,0+TO_CHAR(ydate,'W')w
23:28:35  53  -- mpm stands for minutes-past-midnight:
23:28:35  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
23:28:35  55  -- mph stands for minutes-past-hour:
23:28:35  56  ,0+TO_CHAR(ydate,'MI')mph
23:28:35  57  FROM svm6102
23:28:35  58  ORDER BY ydate
23:28:35  59  /

Table created.

Elapsed: 00:00:02.07
23:28:37 SQL> 
23:28:37 SQL> -- rpt
23:28:37 SQL> 
23:28:37 SQL> SELECT
23:28:37   2  pair
23:28:37   3  ,COUNT(pair)
23:28:37   4  ,MIN(clse),MAX(clse)
23:28:37   5  ,MIN(ydate),MAX(ydate)
23:28:37   6  FROM svm6122
23:28:37   7  GROUP BY pair
23:28:37   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_chf       19812    .931675	  1.00635 2010-10-03 23:30:01 2011-01-06 23:25:00

Elapsed: 00:00:00.04
23:28:37 SQL> 
23:28:37 SQL> -- Prepare for derivation of NTILE based params:
23:28:37 SQL> 
23:28:37 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.19
23:28:37 SQL> CREATE TABLE svm6142 COMPRESS AS
23:28:37   2  SELECT
23:28:37   3  pair
23:28:37   4  ,ydate
23:28:37   5  ,prdate
23:28:37   6  ,clse
23:28:37   7  ,g6
23:28:37   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
23:28:37   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
23:28:37  10  ,CASE WHEN trend IS NULL THEN 1
23:28:37  11  	    WHEN trend =0      THEN 1
23:28:37  12  	    ELSE trend END trend
23:28:37  13  ,cm4
23:28:37  14  ,cm6
23:28:37  15  ,cm8
23:28:37  16  ,cm10
23:28:37  17  ,cm12
23:28:37  18  ,cm14
23:28:37  19  ,cm16
23:28:37  20  ,cm18
23:28:37  21  --
23:28:37  22  ,ca4
23:28:37  23  ,ca6
23:28:37  24  ,ca8
23:28:37  25  ,ca10
23:28:37  26  ,ca12
23:28:37  27  ,ca14
23:28:37  28  ,ca16
23:28:37  29  ,ca18
23:28:37  30  --
23:28:37  31  ,cx4
23:28:37  32  ,cx6
23:28:37  33  ,cx8
23:28:37  34  ,cx10
23:28:37  35  ,cx12
23:28:37  36  ,cx14
23:28:37  37  ,cx16
23:28:37  38  ,cx18
23:28:37  39  --
23:28:37  40  ,crr4
23:28:37  41  ,crr6
23:28:37  42  ,crr8
23:28:37  43  ,crr10
23:28:37  44  ,crr12
23:28:37  45  ,crr14
23:28:37  46  ,crr16
23:28:37  47  ,crr18
23:28:37  48  --
23:28:37  49  ,hh
23:28:37  50  ,d
23:28:37  51  ,w
23:28:37  52  ,mpm
23:28:37  53  ,mph
23:28:37  54  FROM svm6122
23:28:37  55  ORDER BY ydate
23:28:37  56  /

Table created.

Elapsed: 00:00:00.36
23:28:38 SQL> 
23:28:38 SQL> -- rpt
23:28:38 SQL> 
23:28:38 SQL> SELECT
23:28:38   2  pair
23:28:38   3  ,trend
23:28:38   4  ,gatt
23:28:38   5  ,COUNT(pair)
23:28:38   6  ,AVG(g6)
23:28:38   7  FROM svm6142
23:28:38   8  GROUP BY pair,trend,gatt
23:28:38   9  ORDER BY pair,trend,gatt
23:28:38  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7126 -.00198276
usd_chf 	-1 up	      3082 .003812716
usd_chf 	-1		40
usd_chf 	 1 nup	      6581 -.00154375
usd_chf 	 1 up	      2951  .00395578
usd_chf 	 1		32

6 rows selected.

Elapsed: 00:00:00.04
23:28:38 SQL> 
23:28:38 SQL> 
23:28:38 SQL> -- Derive NTILE based params:
23:28:38 SQL> 
23:28:38 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.15
23:28:38 SQL> CREATE TABLE svm6162 COMPRESS AS
23:28:38   2  SELECT
23:28:38   3  pair
23:28:38   4  ,ydate
23:28:38   5  ,prdate
23:28:38   6  ,clse
23:28:38   7  ,g6
23:28:38   8  ,gatt
23:28:38   9  ,gattn
23:28:38  10  ,trend
23:28:38  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
23:28:38  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
23:28:38  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
23:28:38  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
23:28:38  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
23:28:38  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
23:28:38  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
23:28:38  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
23:28:38  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
23:28:38  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
23:28:38  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
23:28:38  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
23:28:38  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
23:28:38  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
23:28:38  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
23:28:38  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
23:28:38  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
23:28:38  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
23:28:38  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
23:28:38  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
23:28:38  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
23:28:38  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
23:28:38  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
23:28:38  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
23:28:38  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
23:28:38  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
23:28:38  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
23:28:38  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
23:28:38  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
23:28:38  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
23:28:38  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
23:28:38  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
23:28:38  43  ,hh  att32
23:28:38  44  ,d   att33
23:28:38  45  ,w   att34
23:28:38  46  ,mpm att35
23:28:38  47  ,mph att36
23:28:38  48  ,trend att37
23:28:38  49  FROM svm6142
23:28:38  50  ORDER BY ydate
23:28:38  51  /

Table created.

Elapsed: 00:00:04.95
23:28:43 SQL> 
23:28:43 SQL> -- rpt
23:28:43 SQL> 
23:28:43 SQL> SELECT
23:28:43   2  pair
23:28:43   3  ,trend
23:28:43   4  ,gatt
23:28:43   5  ,COUNT(pair)
23:28:43   6  ,AVG(g6)
23:28:43   7  FROM svm6162
23:28:43   8  GROUP BY pair,trend,gatt
23:28:43   9  ORDER BY pair,trend,gatt
23:28:43  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7126 -.00198276
usd_chf 	-1 up	      3082 .003812716
usd_chf 	-1		40
usd_chf 	 1 nup	      6581 -.00154375
usd_chf 	 1 up	      2951  .00395578
usd_chf 	 1		32

6 rows selected.

Elapsed: 00:00:00.03
23:28:43 SQL> 
23:28:43 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.14
23:28:43 SQL> CREATE TABLE modsrc COMPRESS AS
23:28:43   2  SELECT
23:28:43   3  pair
23:28:43   4  ,ydate
23:28:43   5  ,prdate
23:28:43   6  ,trend
23:28:43   7  ,g6
23:28:43   8  ,gatt
23:28:43   9  ,gattn
23:28:43  10  FROM svm6162
23:28:43  11  /

Table created.

Elapsed: 00:00:00.08
23:28:43 SQL> 
23:28:43 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
23:28:43 SQL> 
23:28:43 SQL> DROP   TABLE chf_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
23:28:43 SQL> CREATE TABLE chf_ms610 COMPRESS AS
23:28:43   2  SELECT
23:28:43   3  ydate
23:28:43   4  ,trend chf_trend
23:28:43   5  ,g6    chf_g6
23:28:43   6  ,gatt  chf_gatt
23:28:43   7  ,gattn chf_gattn
23:28:43   8  FROM modsrc
23:28:43   9  /

Table created.

Elapsed: 00:00:00.07
23:28:43 SQL> 
23:28:43 SQL> ANALYZE TABLE chf_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
23:28:44 SQL> 
23:28:44 SQL> -- I need a copy of the attributes:
23:28:44 SQL> 
23:28:44 SQL> 
23:28:44 SQL> DROP   TABLE chf_att;

Table dropped.

Elapsed: 00:00:00.04
23:28:44 SQL> CREATE TABLE chf_att COMPRESS AS
23:28:44   2  SELECT
23:28:44   3  ydate
23:28:44   4  ,att00 chf_att00
23:28:44   5  ,att01 chf_att01
23:28:44   6  ,att02 chf_att02
23:28:44   7  ,att03 chf_att03
23:28:44   8  ,att04 chf_att04
23:28:44   9  ,att05 chf_att05
23:28:44  10  ,att06 chf_att06
23:28:44  11  ,att07 chf_att07
23:28:44  12  ,att08 chf_att08
23:28:44  13  ,att09 chf_att09
23:28:44  14  ,att10 chf_att10
23:28:44  15  ,att11 chf_att11
23:28:44  16  ,att12 chf_att12
23:28:44  17  ,att13 chf_att13
23:28:44  18  ,att14 chf_att14
23:28:44  19  ,att15 chf_att15
23:28:44  20  ,att16 chf_att16
23:28:44  21  ,att17 chf_att17
23:28:44  22  ,att18 chf_att18
23:28:44  23  ,att19 chf_att19
23:28:44  24  ,att20 chf_att20
23:28:44  25  ,att21 chf_att21
23:28:44  26  ,att22 chf_att22
23:28:44  27  ,att23 chf_att23
23:28:44  28  ,att24 chf_att24
23:28:44  29  ,att25 chf_att25
23:28:44  30  ,att26 chf_att26
23:28:44  31  ,att27 chf_att27
23:28:44  32  ,att28 chf_att28
23:28:44  33  ,att29 chf_att29
23:28:44  34  ,att30 chf_att30
23:28:44  35  ,att31 chf_att31
23:28:44  36  ,att32 chf_att32
23:28:44  37  ,att33 chf_att33
23:28:44  38  ,att34 chf_att34
23:28:44  39  ,att35 chf_att35
23:28:44  40  ,att36 chf_att36
23:28:44  41  ,att37 chf_att37
23:28:44  42  FROM svm6162
23:28:44  43  /

Table created.

Elapsed: 00:00:00.16
23:28:44 SQL> 
23:28:44 SQL> ANALYZE TABLE chf_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.42
23:28:44 SQL> 
23:28:44 SQL> -- rpt
23:28:44 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19812

Elapsed: 00:00:00.85
23:28:45 SQL> SELECT COUNT(*)FROM chf_att;

  COUNT(*)
----------
     19812

Elapsed: 00:00:00.00
23:28:45 SQL> 
23:28:45 SQL> --
23:28:45 SQL> -- ech610.sql
23:28:45 SQL> --
23:28:45 SQL> 
23:28:45 SQL> -- Creates views and tables for backtesting a forex SVM strategy
23:28:45 SQL> 
23:28:45 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.50
23:28:46 SQL> 
23:28:46 SQL> -- I created di5min here:
23:28:46 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
23:28:46 SQL> 
23:28:46 SQL> CREATE OR REPLACE VIEW svm6102 AS
23:28:46   2  SELECT
23:28:46   3  pair
23:28:46   4  ,ydate
23:28:46   5  ,prdate
23:28:46   6  ,rownum rnum -- acts as t in my time-series
23:28:46   7  ,clse
23:28:46   8  -- Derive a bunch of attributes from clse, the latest price:
23:28:46   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
23:28:46  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
23:28:46  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
23:28:46  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
23:28:46  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
23:28:46  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
23:28:46  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
23:28:46  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
23:28:46  17  --
23:28:46  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
23:28:46  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
23:28:46  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
23:28:46  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
23:28:46  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
23:28:46  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
23:28:46  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
23:28:46  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
23:28:46  26  --
23:28:46  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
23:28:46  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
23:28:46  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
23:28:46  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
23:28:46  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
23:28:46  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
23:28:46  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
23:28:46  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
23:28:46  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
23:28:46  36  FROM di5min WHERE pair LIKE'%ech%'
23:28:46  37  AND ydate > sysdate - 95
23:28:46  38  ORDER BY ydate
23:28:46  39  /

View created.

Elapsed: 00:00:00.04
23:28:46 SQL> 
23:28:46 SQL> -- rpt
23:28:46 SQL> 
23:28:46 SQL> SELECT
23:28:46   2  pair
23:28:46   3  ,COUNT(pair)
23:28:46   4  ,MIN(clse),MAX(clse)
23:28:46   5  ,MIN(avg6),MAX(avg6)
23:28:46   6  ,MIN(ydate),MAX(ydate)
23:28:46   7  FROM svm6102
23:28:46   8  GROUP BY pair
23:28:46   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ech_usd       19810 1.24182424 1.38284305 1.24320711 1.37986485 2010-10-03 23:30:01 2011-01-06 23:25:00

Elapsed: 00:00:00.82
23:28:46 SQL> 
23:28:46 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
23:28:46 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.21
23:28:47 SQL> CREATE TABLE svm6122 COMPRESS AS
23:28:47   2  SELECT
23:28:47   3  pair
23:28:47   4  ,ydate
23:28:47   5  ,prdate
23:28:47   6  ,clse
23:28:47   7  -- g6 is important. I want to predict g6:
23:28:47   8  ,ld6 - clse g6
23:28:47   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
23:28:47  10  -- I want more attributes from the ones I derived above:
23:28:47  11  -- clse relation to moving-min
23:28:47  12  ,clse-min4  cm4
23:28:47  13  ,clse-min6  cm6
23:28:47  14  ,clse-min8  cm8
23:28:47  15  ,clse-min10 cm10
23:28:47  16  ,clse-min12 cm12
23:28:47  17  ,clse-min14 cm14
23:28:47  18  ,clse-min16 cm16
23:28:47  19  ,clse-min18 cm18
23:28:47  20  -- clse relation to moving-avg
23:28:47  21  ,clse-avg4  ca4
23:28:47  22  ,clse-avg6  ca6
23:28:47  23  ,clse-avg8  ca8
23:28:47  24  ,clse-avg10 ca10
23:28:47  25  ,clse-avg12 ca12
23:28:47  26  ,clse-avg14 ca14
23:28:47  27  ,clse-avg16 ca16
23:28:47  28  ,clse-avg18 ca18
23:28:47  29  -- clse relation to moving-max
23:28:47  30  ,clse-max4  cx4
23:28:47  31  ,clse-max6  cx6
23:28:47  32  ,clse-max8  cx8
23:28:47  33  ,clse-max10 cx10
23:28:47  34  ,clse-max12 cx12
23:28:47  35  ,clse-max14 cx14
23:28:47  36  ,clse-max16 cx16
23:28:47  37  ,clse-max18 cx18
23:28:47  38  -- Derive more attributes.
23:28:47  39  -- I want to use CORR() here to help SVM see the shape of the series.
23:28:47  40  -- But COVAR_POP is more stable:
23:28:47  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
23:28:47  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
23:28:47  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
23:28:47  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
23:28:47  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
23:28:47  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
23:28:47  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
23:28:47  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
23:28:47  49  -- Derive date related attributes:
23:28:47  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
23:28:47  51  ,0+TO_CHAR(ydate,'D')d
23:28:47  52  ,0+TO_CHAR(ydate,'W')w
23:28:47  53  -- mpm stands for minutes-past-midnight:
23:28:47  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
23:28:47  55  -- mph stands for minutes-past-hour:
23:28:47  56  ,0+TO_CHAR(ydate,'MI')mph
23:28:47  57  FROM svm6102
23:28:47  58  ORDER BY ydate
23:28:47  59  /

Table created.

Elapsed: 00:00:02.09
23:28:49 SQL> 
23:28:49 SQL> -- rpt
23:28:49 SQL> 
23:28:49 SQL> SELECT
23:28:49   2  pair
23:28:49   3  ,COUNT(pair)
23:28:49   4  ,MIN(clse),MAX(clse)
23:28:49   5  ,MIN(ydate),MAX(ydate)
23:28:49   6  FROM svm6122
23:28:49   7  GROUP BY pair
23:28:49   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ech_usd       19810 1.24182424 1.38284305 2010-10-03 23:30:01 2011-01-06 23:25:00

Elapsed: 00:00:00.04
23:28:49 SQL> 
23:28:49 SQL> -- Prepare for derivation of NTILE based params:
23:28:49 SQL> 
23:28:49 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.42
23:28:49 SQL> CREATE TABLE svm6142 COMPRESS AS
23:28:49   2  SELECT
23:28:49   3  pair
23:28:49   4  ,ydate
23:28:49   5  ,prdate
23:28:49   6  ,clse
23:28:49   7  ,g6
23:28:49   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
23:28:49   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
23:28:49  10  ,CASE WHEN trend IS NULL THEN 1
23:28:49  11  	    WHEN trend =0      THEN 1
23:28:49  12  	    ELSE trend END trend
23:28:49  13  ,cm4
23:28:49  14  ,cm6
23:28:49  15  ,cm8
23:28:49  16  ,cm10
23:28:49  17  ,cm12
23:28:49  18  ,cm14
23:28:49  19  ,cm16
23:28:49  20  ,cm18
23:28:49  21  --
23:28:49  22  ,ca4
23:28:49  23  ,ca6
23:28:49  24  ,ca8
23:28:49  25  ,ca10
23:28:49  26  ,ca12
23:28:49  27  ,ca14
23:28:49  28  ,ca16
23:28:49  29  ,ca18
23:28:49  30  --
23:28:49  31  ,cx4
23:28:49  32  ,cx6
23:28:49  33  ,cx8
23:28:49  34  ,cx10
23:28:49  35  ,cx12
23:28:49  36  ,cx14
23:28:49  37  ,cx16
23:28:49  38  ,cx18
23:28:49  39  --
23:28:49  40  ,crr4
23:28:49  41  ,crr6
23:28:49  42  ,crr8
23:28:49  43  ,crr10
23:28:49  44  ,crr12
23:28:49  45  ,crr14
23:28:49  46  ,crr16
23:28:49  47  ,crr18
23:28:49  48  --
23:28:49  49  ,hh
23:28:49  50  ,d
23:28:49  51  ,w
23:28:49  52  ,mpm
23:28:49  53  ,mph
23:28:49  54  FROM svm6122
23:28:49  55  ORDER BY ydate
23:28:49  56  /

Table created.

Elapsed: 00:00:00.47
23:28:50 SQL> 
23:28:50 SQL> -- rpt
23:28:50 SQL> 
23:28:50 SQL> SELECT
23:28:50   2  pair
23:28:50   3  ,trend
23:28:50   4  ,gatt
23:28:50   5  ,COUNT(pair)
23:28:50   6  ,AVG(g6)
23:28:50   7  FROM svm6142
23:28:50   8  GROUP BY pair,trend,gatt
23:28:50   9  ORDER BY pair,trend,gatt
23:28:50  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6796 -.00230978
ech_usd 	-1 up	      3579 .003575741
ech_usd 	-1		63
ech_usd 	 1 nup	      6457 -.00239752
ech_usd 	 1 up	      2906 .004121782
ech_usd 	 1		 9

6 rows selected.

Elapsed: 00:00:00.04
23:28:50 SQL> 
23:28:50 SQL> 
23:28:50 SQL> -- Derive NTILE based params:
23:28:50 SQL> 
23:28:50 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.16
23:28:50 SQL> CREATE TABLE svm6162 COMPRESS AS
23:28:50   2  SELECT
23:28:50   3  pair
23:28:50   4  ,ydate
23:28:50   5  ,prdate
23:28:50   6  ,clse
23:28:50   7  ,g6
23:28:50   8  ,gatt
23:28:50   9  ,gattn
23:28:50  10  ,trend
23:28:50  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
23:28:50  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
23:28:50  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
23:28:50  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
23:28:50  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
23:28:50  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
23:28:50  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
23:28:50  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
23:28:50  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
23:28:50  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
23:28:50  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
23:28:50  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
23:28:50  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
23:28:50  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
23:28:50  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
23:28:50  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
23:28:50  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
23:28:50  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
23:28:50  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
23:28:50  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
23:28:50  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
23:28:50  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
23:28:50  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
23:28:50  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
23:28:50  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
23:28:50  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
23:28:50  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
23:28:50  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
23:28:50  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
23:28:50  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
23:28:50  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
23:28:50  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
23:28:50  43  ,hh  att32
23:28:50  44  ,d   att33
23:28:50  45  ,w   att34
23:28:50  46  ,mpm att35
23:28:50  47  ,mph att36
23:28:50  48  ,trend att37
23:28:50  49  FROM svm6142
23:28:50  50  ORDER BY ydate
23:28:50  51  /

Table created.

Elapsed: 00:00:04.96
23:28:55 SQL> 
23:28:55 SQL> -- rpt
23:28:55 SQL> 
23:28:55 SQL> SELECT
23:28:55   2  pair
23:28:55   3  ,trend
23:28:55   4  ,gatt
23:28:55   5  ,COUNT(pair)
23:28:55   6  ,AVG(g6)
23:28:55   7  FROM svm6162
23:28:55   8  GROUP BY pair,trend,gatt
23:28:55   9  ORDER BY pair,trend,gatt
23:28:55  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6796 -.00230978
ech_usd 	-1 up	      3579 .003575741
ech_usd 	-1		63
ech_usd 	 1 nup	      6457 -.00239752
ech_usd 	 1 up	      2906 .004121782
ech_usd 	 1		 9

6 rows selected.

Elapsed: 00:00:00.03
23:28:55 SQL> 
23:28:55 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.15
23:28:55 SQL> CREATE TABLE modsrc COMPRESS AS
23:28:55   2  SELECT
23:28:55   3  pair
23:28:55   4  ,ydate
23:28:55   5  ,prdate
23:28:55   6  ,trend
23:28:55   7  ,g6
23:28:55   8  ,gatt
23:28:55   9  ,gattn
23:28:55  10  FROM svm6162
23:28:55  11  /

Table created.

Elapsed: 00:00:00.07
23:28:55 SQL> 
23:28:55 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
23:28:55 SQL> 
23:28:55 SQL> DROP   TABLE ech_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
23:28:55 SQL> CREATE TABLE ech_ms610 COMPRESS AS
23:28:55   2  SELECT
23:28:55   3  ydate
23:28:55   4  ,trend ech_trend
23:28:55   5  ,g6    ech_g6
23:28:55   6  ,gatt  ech_gatt
23:28:55   7  ,gattn ech_gattn
23:28:55   8  FROM modsrc
23:28:55   9  /

Table created.

Elapsed: 00:00:00.07
23:28:55 SQL> 
23:28:55 SQL> ANALYZE TABLE ech_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
23:28:56 SQL> 
23:28:56 SQL> -- I need a copy of the attributes:
23:28:56 SQL> 
23:28:56 SQL> 
23:28:56 SQL> DROP   TABLE ech_att;

Table dropped.

Elapsed: 00:00:00.23
23:28:56 SQL> CREATE TABLE ech_att COMPRESS AS
23:28:56   2  SELECT
23:28:56   3  ydate
23:28:56   4  ,att00 ech_att00
23:28:56   5  ,att01 ech_att01
23:28:56   6  ,att02 ech_att02
23:28:56   7  ,att03 ech_att03
23:28:56   8  ,att04 ech_att04
23:28:56   9  ,att05 ech_att05
23:28:56  10  ,att06 ech_att06
23:28:56  11  ,att07 ech_att07
23:28:56  12  ,att08 ech_att08
23:28:56  13  ,att09 ech_att09
23:28:56  14  ,att10 ech_att10
23:28:56  15  ,att11 ech_att11
23:28:56  16  ,att12 ech_att12
23:28:56  17  ,att13 ech_att13
23:28:56  18  ,att14 ech_att14
23:28:56  19  ,att15 ech_att15
23:28:56  20  ,att16 ech_att16
23:28:56  21  ,att17 ech_att17
23:28:56  22  ,att18 ech_att18
23:28:56  23  ,att19 ech_att19
23:28:56  24  ,att20 ech_att20
23:28:56  25  ,att21 ech_att21
23:28:56  26  ,att22 ech_att22
23:28:56  27  ,att23 ech_att23
23:28:56  28  ,att24 ech_att24
23:28:56  29  ,att25 ech_att25
23:28:56  30  ,att26 ech_att26
23:28:56  31  ,att27 ech_att27
23:28:56  32  ,att28 ech_att28
23:28:56  33  ,att29 ech_att29
23:28:56  34  ,att30 ech_att30
23:28:56  35  ,att31 ech_att31
23:28:56  36  ,att32 ech_att32
23:28:56  37  ,att33 ech_att33
23:28:56  38  ,att34 ech_att34
23:28:56  39  ,att35 ech_att35
23:28:56  40  ,att36 ech_att36
23:28:56  41  ,att37 ech_att37
23:28:56  42  FROM svm6162
23:28:56  43  /

Table created.

Elapsed: 00:00:00.16
23:28:56 SQL> 
23:28:56 SQL> ANALYZE TABLE ech_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
23:28:56 SQL> 
23:28:56 SQL> -- rpt
23:28:56 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19810

Elapsed: 00:00:00.80
23:28:57 SQL> SELECT COUNT(*)FROM ech_att;

  COUNT(*)
----------
     19810

Elapsed: 00:00:00.00
23:28:57 SQL> 
23:28:57 SQL> --
23:28:57 SQL> -- egb610.sql
23:28:57 SQL> --
23:28:57 SQL> 
23:28:57 SQL> -- Creates views and tables for backtesting a forex SVM strategy
23:28:57 SQL> 
23:28:57 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.38
23:28:58 SQL> 
23:28:58 SQL> -- I created di5min here:
23:28:58 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
23:28:58 SQL> 
23:28:58 SQL> CREATE OR REPLACE VIEW svm6102 AS
23:28:58   2  SELECT
23:28:58   3  pair
23:28:58   4  ,ydate
23:28:58   5  ,prdate
23:28:58   6  ,rownum rnum -- acts as t in my time-series
23:28:58   7  ,clse
23:28:58   8  -- Derive a bunch of attributes from clse, the latest price:
23:28:58   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
23:28:58  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
23:28:58  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
23:28:58  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
23:28:58  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
23:28:58  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
23:28:58  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
23:28:58  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
23:28:58  17  --
23:28:58  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
23:28:58  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
23:28:58  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
23:28:58  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
23:28:58  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
23:28:58  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
23:28:58  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
23:28:58  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
23:28:58  26  --
23:28:58  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
23:28:58  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
23:28:58  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
23:28:58  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
23:28:58  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
23:28:58  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
23:28:58  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
23:28:58  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
23:28:58  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
23:28:58  36  FROM di5min WHERE pair LIKE'%egb%'
23:28:58  37  AND ydate > sysdate - 95
23:28:58  38  ORDER BY ydate
23:28:58  39  /

View created.

Elapsed: 00:00:00.05
23:28:58 SQL> 
23:28:58 SQL> -- rpt
23:28:58 SQL> 
23:28:58 SQL> SELECT
23:28:58   2  pair
23:28:58   3  ,COUNT(pair)
23:28:58   4  ,MIN(clse),MAX(clse)
23:28:58   5  ,MIN(avg6),MAX(avg6)
23:28:58   6  ,MIN(ydate),MAX(ydate)
23:28:58   7  FROM svm6102
23:28:58   8  GROUP BY pair
23:28:58   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
egb_usd       19809 .833520557 .893920122 .834199029 .892400287 2010-10-03 23:30:01 2011-01-06 23:25:00

Elapsed: 00:00:01.00
23:28:59 SQL> 
23:28:59 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
23:28:59 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.44
23:28:59 SQL> CREATE TABLE svm6122 COMPRESS AS
23:28:59   2  SELECT
23:28:59   3  pair
23:28:59   4  ,ydate
23:28:59   5  ,prdate
23:28:59   6  ,clse
23:28:59   7  -- g6 is important. I want to predict g6:
23:28:59   8  ,ld6 - clse g6
23:28:59   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
23:28:59  10  -- I want more attributes from the ones I derived above:
23:28:59  11  -- clse relation to moving-min
23:28:59  12  ,clse-min4  cm4
23:28:59  13  ,clse-min6  cm6
23:28:59  14  ,clse-min8  cm8
23:28:59  15  ,clse-min10 cm10
23:28:59  16  ,clse-min12 cm12
23:28:59  17  ,clse-min14 cm14
23:28:59  18  ,clse-min16 cm16
23:28:59  19  ,clse-min18 cm18
23:28:59  20  -- clse relation to moving-avg
23:28:59  21  ,clse-avg4  ca4
23:28:59  22  ,clse-avg6  ca6
23:28:59  23  ,clse-avg8  ca8
23:28:59  24  ,clse-avg10 ca10
23:28:59  25  ,clse-avg12 ca12
23:28:59  26  ,clse-avg14 ca14
23:28:59  27  ,clse-avg16 ca16
23:28:59  28  ,clse-avg18 ca18
23:28:59  29  -- clse relation to moving-max
23:28:59  30  ,clse-max4  cx4
23:28:59  31  ,clse-max6  cx6
23:28:59  32  ,clse-max8  cx8
23:28:59  33  ,clse-max10 cx10
23:28:59  34  ,clse-max12 cx12
23:28:59  35  ,clse-max14 cx14
23:28:59  36  ,clse-max16 cx16
23:28:59  37  ,clse-max18 cx18
23:28:59  38  -- Derive more attributes.
23:28:59  39  -- I want to use CORR() here to help SVM see the shape of the series.
23:28:59  40  -- But COVAR_POP is more stable:
23:28:59  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
23:28:59  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
23:28:59  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
23:28:59  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
23:28:59  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
23:28:59  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
23:28:59  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
23:28:59  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
23:28:59  49  -- Derive date related attributes:
23:28:59  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
23:28:59  51  ,0+TO_CHAR(ydate,'D')d
23:28:59  52  ,0+TO_CHAR(ydate,'W')w
23:28:59  53  -- mpm stands for minutes-past-midnight:
23:28:59  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
23:28:59  55  -- mph stands for minutes-past-hour:
23:28:59  56  ,0+TO_CHAR(ydate,'MI')mph
23:28:59  57  FROM svm6102
23:28:59  58  ORDER BY ydate
23:28:59  59  /

Table created.

Elapsed: 00:00:02.57
23:29:02 SQL> 
23:29:02 SQL> -- rpt
23:29:02 SQL> 
23:29:02 SQL> SELECT
23:29:02   2  pair
23:29:02   3  ,COUNT(pair)
23:29:02   4  ,MIN(clse),MAX(clse)
23:29:02   5  ,MIN(ydate),MAX(ydate)
23:29:02   6  FROM svm6122
23:29:02   7  GROUP BY pair
23:29:02   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
egb_usd       19809 .833520557 .893920122 2010-10-03 23:30:01 2011-01-06 23:25:00

Elapsed: 00:00:00.04
23:29:02 SQL> 
23:29:02 SQL> -- Prepare for derivation of NTILE based params:
23:29:02 SQL> 
23:29:02 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.38
23:29:02 SQL> CREATE TABLE svm6142 COMPRESS AS
23:29:02   2  SELECT
23:29:02   3  pair
23:29:02   4  ,ydate
23:29:02   5  ,prdate
23:29:02   6  ,clse
23:29:02   7  ,g6
23:29:02   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
23:29:02   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
23:29:02  10  ,CASE WHEN trend IS NULL THEN 1
23:29:02  11  	    WHEN trend =0      THEN 1
23:29:02  12  	    ELSE trend END trend
23:29:02  13  ,cm4
23:29:02  14  ,cm6
23:29:02  15  ,cm8
23:29:02  16  ,cm10
23:29:02  17  ,cm12
23:29:02  18  ,cm14
23:29:02  19  ,cm16
23:29:02  20  ,cm18
23:29:02  21  --
23:29:02  22  ,ca4
23:29:02  23  ,ca6
23:29:02  24  ,ca8
23:29:02  25  ,ca10
23:29:02  26  ,ca12
23:29:02  27  ,ca14
23:29:02  28  ,ca16
23:29:02  29  ,ca18
23:29:02  30  --
23:29:02  31  ,cx4
23:29:02  32  ,cx6
23:29:02  33  ,cx8
23:29:02  34  ,cx10
23:29:02  35  ,cx12
23:29:02  36  ,cx14
23:29:02  37  ,cx16
23:29:02  38  ,cx18
23:29:02  39  --
23:29:02  40  ,crr4
23:29:02  41  ,crr6
23:29:02  42  ,crr8
23:29:02  43  ,crr10
23:29:02  44  ,crr12
23:29:02  45  ,crr14
23:29:02  46  ,crr16
23:29:02  47  ,crr18
23:29:02  48  --
23:29:02  49  ,hh
23:29:02  50  ,d
23:29:02  51  ,w
23:29:02  52  ,mpm
23:29:02  53  ,mph
23:29:02  54  FROM svm6122
23:29:02  55  ORDER BY ydate
23:29:02  56  /

Table created.

Elapsed: 00:00:00.51
23:29:03 SQL> 
23:29:03 SQL> -- rpt
23:29:03 SQL> 
23:29:03 SQL> SELECT
23:29:03   2  pair
23:29:03   3  ,trend
23:29:03   4  ,gatt
23:29:03   5  ,COUNT(pair)
23:29:03   6  ,AVG(g6)
23:29:03   7  FROM svm6142
23:29:03   8  GROUP BY pair,trend,gatt
23:29:03   9  ORDER BY pair,trend,gatt
23:29:03  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7941 -.00106276
egb_usd 	-1 up	      2636 .002928295
egb_usd 	-1		65
egb_usd 	 1 nup	      6543 -.00138838
egb_usd 	 1 up	      2617   .0029282
egb_usd 	 1		 7

6 rows selected.

Elapsed: 00:00:00.20
23:29:03 SQL> 
23:29:03 SQL> 
23:29:03 SQL> -- Derive NTILE based params:
23:29:03 SQL> 
23:29:03 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.23
23:29:03 SQL> CREATE TABLE svm6162 COMPRESS AS
23:29:03   2  SELECT
23:29:03   3  pair
23:29:03   4  ,ydate
23:29:03   5  ,prdate
23:29:03   6  ,clse
23:29:03   7  ,g6
23:29:03   8  ,gatt
23:29:03   9  ,gattn
23:29:03  10  ,trend
23:29:03  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
23:29:03  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
23:29:03  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
23:29:03  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
23:29:03  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
23:29:03  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
23:29:03  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
23:29:03  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
23:29:03  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
23:29:03  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
23:29:03  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
23:29:03  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
23:29:03  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
23:29:03  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
23:29:03  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
23:29:03  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
23:29:03  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
23:29:03  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
23:29:03  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
23:29:03  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
23:29:03  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
23:29:03  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
23:29:03  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
23:29:03  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
23:29:03  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
23:29:03  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
23:29:03  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
23:29:03  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
23:29:03  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
23:29:03  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
23:29:03  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
23:29:03  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
23:29:03  43  ,hh  att32
23:29:03  44  ,d   att33
23:29:03  45  ,w   att34
23:29:03  46  ,mpm att35
23:29:03  47  ,mph att36
23:29:03  48  ,trend att37
23:29:03  49  FROM svm6142
23:29:03  50  ORDER BY ydate
23:29:03  51  /

Table created.

Elapsed: 00:00:05.61
23:29:09 SQL> 
23:29:09 SQL> -- rpt
23:29:09 SQL> 
23:29:09 SQL> SELECT
23:29:09   2  pair
23:29:09   3  ,trend
23:29:09   4  ,gatt
23:29:09   5  ,COUNT(pair)
23:29:09   6  ,AVG(g6)
23:29:09   7  FROM svm6162
23:29:09   8  GROUP BY pair,trend,gatt
23:29:09   9  ORDER BY pair,trend,gatt
23:29:09  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7941 -.00106276
egb_usd 	-1 up	      2636 .002928295
egb_usd 	-1		65
egb_usd 	 1 nup	      6543 -.00138838
egb_usd 	 1 up	      2617   .0029282
egb_usd 	 1		 7

6 rows selected.

Elapsed: 00:00:00.03
23:29:09 SQL> 
23:29:09 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.42
23:29:09 SQL> CREATE TABLE modsrc COMPRESS AS
23:29:09   2  SELECT
23:29:09   3  pair
23:29:09   4  ,ydate
23:29:09   5  ,prdate
23:29:09   6  ,trend
23:29:09   7  ,g6
23:29:09   8  ,gatt
23:29:09   9  ,gattn
23:29:09  10  FROM svm6162
23:29:09  11  /

Table created.

Elapsed: 00:00:00.09
23:29:09 SQL> 
23:29:09 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
23:29:09 SQL> 
23:29:09 SQL> DROP   TABLE egb_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
23:29:09 SQL> CREATE TABLE egb_ms610 COMPRESS AS
23:29:09   2  SELECT
23:29:09   3  ydate
23:29:09   4  ,trend egb_trend
23:29:09   5  ,g6    egb_g6
23:29:09   6  ,gatt  egb_gatt
23:29:09   7  ,gattn egb_gattn
23:29:09   8  FROM modsrc
23:29:09   9  /

Table created.

Elapsed: 00:00:00.06
23:29:10 SQL> 
23:29:10 SQL> ANALYZE TABLE egb_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
23:29:10 SQL> 
23:29:10 SQL> -- I need a copy of the attributes:
23:29:10 SQL> 
23:29:10 SQL> 
23:29:10 SQL> DROP   TABLE egb_att;

Table dropped.

Elapsed: 00:00:00.04
23:29:10 SQL> CREATE TABLE egb_att COMPRESS AS
23:29:10   2  SELECT
23:29:10   3  ydate
23:29:10   4  ,att00 egb_att00
23:29:10   5  ,att01 egb_att01
23:29:10   6  ,att02 egb_att02
23:29:10   7  ,att03 egb_att03
23:29:10   8  ,att04 egb_att04
23:29:10   9  ,att05 egb_att05
23:29:10  10  ,att06 egb_att06
23:29:10  11  ,att07 egb_att07
23:29:10  12  ,att08 egb_att08
23:29:10  13  ,att09 egb_att09
23:29:10  14  ,att10 egb_att10
23:29:10  15  ,att11 egb_att11
23:29:10  16  ,att12 egb_att12
23:29:10  17  ,att13 egb_att13
23:29:10  18  ,att14 egb_att14
23:29:10  19  ,att15 egb_att15
23:29:10  20  ,att16 egb_att16
23:29:10  21  ,att17 egb_att17
23:29:10  22  ,att18 egb_att18
23:29:10  23  ,att19 egb_att19
23:29:10  24  ,att20 egb_att20
23:29:10  25  ,att21 egb_att21
23:29:10  26  ,att22 egb_att22
23:29:10  27  ,att23 egb_att23
23:29:10  28  ,att24 egb_att24
23:29:10  29  ,att25 egb_att25
23:29:10  30  ,att26 egb_att26
23:29:10  31  ,att27 egb_att27
23:29:10  32  ,att28 egb_att28
23:29:10  33  ,att29 egb_att29
23:29:10  34  ,att30 egb_att30
23:29:10  35  ,att31 egb_att31
23:29:10  36  ,att32 egb_att32
23:29:10  37  ,att33 egb_att33
23:29:10  38  ,att34 egb_att34
23:29:10  39  ,att35 egb_att35
23:29:10  40  ,att36 egb_att36
23:29:10  41  ,att37 egb_att37
23:29:10  42  FROM svm6162
23:29:10  43  /

Table created.

Elapsed: 00:00:00.19
23:29:10 SQL> 
23:29:10 SQL> ANALYZE TABLE egb_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.52
23:29:10 SQL> 
23:29:10 SQL> -- rpt
23:29:10 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19809

Elapsed: 00:00:01.01
23:29:11 SQL> SELECT COUNT(*)FROM egb_att;

  COUNT(*)
----------
     19809

Elapsed: 00:00:00.00
23:29:11 SQL> 
23:29:11 SQL> --
23:29:11 SQL> -- ejp610.sql
23:29:11 SQL> --
23:29:11 SQL> 
23:29:11 SQL> -- Creates views and tables for backtesting a forex SVM strategy
23:29:11 SQL> 
23:29:11 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.33
23:29:12 SQL> 
23:29:12 SQL> -- I created di5min here:
23:29:12 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
23:29:12 SQL> 
23:29:12 SQL> CREATE OR REPLACE VIEW svm6102 AS
23:29:12   2  SELECT
23:29:12   3  pair
23:29:12   4  ,ydate
23:29:12   5  ,prdate
23:29:12   6  ,rownum rnum -- acts as t in my time-series
23:29:12   7  ,clse
23:29:12   8  -- Derive a bunch of attributes from clse, the latest price:
23:29:12   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
23:29:12  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
23:29:12  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
23:29:12  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
23:29:12  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
23:29:12  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
23:29:12  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
23:29:12  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
23:29:12  17  --
23:29:12  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
23:29:12  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
23:29:12  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
23:29:12  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
23:29:12  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
23:29:12  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
23:29:12  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
23:29:12  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
23:29:12  26  --
23:29:12  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
23:29:12  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
23:29:12  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
23:29:12  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
23:29:12  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
23:29:12  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
23:29:12  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
23:29:12  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
23:29:12  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
23:29:12  36  FROM di5min WHERE pair LIKE'%ejp%'
23:29:12  37  AND ydate > sysdate - 95
23:29:12  38  ORDER BY ydate
23:29:12  39  /

View created.

Elapsed: 00:00:00.04
23:29:12 SQL> 
23:29:12 SQL> -- rpt
23:29:12 SQL> 
23:29:12 SQL> SELECT
23:29:12   2  pair
23:29:12   3  ,COUNT(pair)
23:29:12   4  ,MIN(clse),MAX(clse)
23:29:12   5  ,MIN(avg6),MAX(avg6)
23:29:12   6  ,MIN(ydate),MAX(ydate)
23:29:12   7  FROM svm6102
23:29:12   8  GROUP BY pair
23:29:12   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ejp_usd       19807 107.643765	115.63485 107.776148 115.509678 2010-10-03 23:30:01 2011-01-06 23:25:00

Elapsed: 00:00:00.89
23:29:13 SQL> 
23:29:13 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
23:29:13 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.31
23:29:13 SQL> CREATE TABLE svm6122 COMPRESS AS
23:29:13   2  SELECT
23:29:13   3  pair
23:29:13   4  ,ydate
23:29:13   5  ,prdate
23:29:13   6  ,clse
23:29:13   7  -- g6 is important. I want to predict g6:
23:29:13   8  ,ld6 - clse g6
23:29:13   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
23:29:13  10  -- I want more attributes from the ones I derived above:
23:29:13  11  -- clse relation to moving-min
23:29:13  12  ,clse-min4  cm4
23:29:13  13  ,clse-min6  cm6
23:29:13  14  ,clse-min8  cm8
23:29:13  15  ,clse-min10 cm10
23:29:13  16  ,clse-min12 cm12
23:29:13  17  ,clse-min14 cm14
23:29:13  18  ,clse-min16 cm16
23:29:13  19  ,clse-min18 cm18
23:29:13  20  -- clse relation to moving-avg
23:29:13  21  ,clse-avg4  ca4
23:29:13  22  ,clse-avg6  ca6
23:29:13  23  ,clse-avg8  ca8
23:29:13  24  ,clse-avg10 ca10
23:29:13  25  ,clse-avg12 ca12
23:29:13  26  ,clse-avg14 ca14
23:29:13  27  ,clse-avg16 ca16
23:29:13  28  ,clse-avg18 ca18
23:29:13  29  -- clse relation to moving-max
23:29:13  30  ,clse-max4  cx4
23:29:13  31  ,clse-max6  cx6
23:29:13  32  ,clse-max8  cx8
23:29:13  33  ,clse-max10 cx10
23:29:13  34  ,clse-max12 cx12
23:29:13  35  ,clse-max14 cx14
23:29:13  36  ,clse-max16 cx16
23:29:13  37  ,clse-max18 cx18
23:29:13  38  -- Derive more attributes.
23:29:13  39  -- I want to use CORR() here to help SVM see the shape of the series.
23:29:13  40  -- But COVAR_POP is more stable:
23:29:13  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
23:29:13  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
23:29:13  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
23:29:13  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
23:29:13  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
23:29:13  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
23:29:13  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
23:29:13  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
23:29:13  49  -- Derive date related attributes:
23:29:13  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
23:29:13  51  ,0+TO_CHAR(ydate,'D')d
23:29:13  52  ,0+TO_CHAR(ydate,'W')w
23:29:13  53  -- mpm stands for minutes-past-midnight:
23:29:13  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
23:29:13  55  -- mph stands for minutes-past-hour:
23:29:13  56  ,0+TO_CHAR(ydate,'MI')mph
23:29:13  57  FROM svm6102
23:29:13  58  ORDER BY ydate
23:29:13  59  /

Table created.

Elapsed: 00:00:02.24
23:29:15 SQL> 
23:29:15 SQL> -- rpt
23:29:15 SQL> 
23:29:15 SQL> SELECT
23:29:15   2  pair
23:29:15   3  ,COUNT(pair)
23:29:15   4  ,MIN(clse),MAX(clse)
23:29:15   5  ,MIN(ydate),MAX(ydate)
23:29:15   6  FROM svm6122
23:29:15   7  GROUP BY pair
23:29:15   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ejp_usd       19807 107.643765	115.63485 2010-10-03 23:30:01 2011-01-06 23:25:00

Elapsed: 00:00:00.04
23:29:15 SQL> 
23:29:15 SQL> -- Prepare for derivation of NTILE based params:
23:29:15 SQL> 
23:29:15 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.04
23:29:15 SQL> CREATE TABLE svm6142 COMPRESS AS
23:29:15   2  SELECT
23:29:15   3  pair
23:29:15   4  ,ydate
23:29:15   5  ,prdate
23:29:15   6  ,clse
23:29:15   7  ,g6
23:29:15   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
23:29:15   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
23:29:15  10  ,CASE WHEN trend IS NULL THEN 1
23:29:15  11  	    WHEN trend =0      THEN 1
23:29:15  12  	    ELSE trend END trend
23:29:15  13  ,cm4
23:29:15  14  ,cm6
23:29:15  15  ,cm8
23:29:15  16  ,cm10
23:29:15  17  ,cm12
23:29:15  18  ,cm14
23:29:15  19  ,cm16
23:29:15  20  ,cm18
23:29:15  21  --
23:29:15  22  ,ca4
23:29:15  23  ,ca6
23:29:15  24  ,ca8
23:29:15  25  ,ca10
23:29:15  26  ,ca12
23:29:15  27  ,ca14
23:29:15  28  ,ca16
23:29:15  29  ,ca18
23:29:15  30  --
23:29:15  31  ,cx4
23:29:15  32  ,cx6
23:29:15  33  ,cx8
23:29:15  34  ,cx10
23:29:15  35  ,cx12
23:29:15  36  ,cx14
23:29:15  37  ,cx16
23:29:15  38  ,cx18
23:29:15  39  --
23:29:15  40  ,crr4
23:29:15  41  ,crr6
23:29:15  42  ,crr8
23:29:15  43  ,crr10
23:29:15  44  ,crr12
23:29:15  45  ,crr14
23:29:15  46  ,crr16
23:29:15  47  ,crr18
23:29:15  48  --
23:29:15  49  ,hh
23:29:15  50  ,d
23:29:15  51  ,w
23:29:15  52  ,mpm
23:29:15  53  ,mph
23:29:15  54  FROM svm6122
23:29:15  55  ORDER BY ydate
23:29:15  56  /

Table created.

Elapsed: 00:00:00.39
23:29:16 SQL> 
23:29:16 SQL> -- rpt
23:29:16 SQL> 
23:29:16 SQL> SELECT
23:29:16   2  pair
23:29:16   3  ,trend
23:29:16   4  ,gatt
23:29:16   5  ,COUNT(pair)
23:29:16   6  ,AVG(g6)
23:29:16   7  FROM svm6142
23:29:16   8  GROUP BY pair,trend,gatt
23:29:16   9  ORDER BY pair,trend,gatt
23:29:16  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      5192 -.32371432
ejp_usd 	-1 up	      4922 .277569703
ejp_usd 	-1		66
ejp_usd 	 1 nup	      5006 -.29899163
ejp_usd 	 1 up	      4615 .288910735
ejp_usd 	 1		 6

6 rows selected.

Elapsed: 00:00:00.04
23:29:16 SQL> 
23:29:16 SQL> 
23:29:16 SQL> -- Derive NTILE based params:
23:29:16 SQL> 
23:29:16 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.17
23:29:16 SQL> CREATE TABLE svm6162 COMPRESS AS
23:29:16   2  SELECT
23:29:16   3  pair
23:29:16   4  ,ydate
23:29:16   5  ,prdate
23:29:16   6  ,clse
23:29:16   7  ,g6
23:29:16   8  ,gatt
23:29:16   9  ,gattn
23:29:16  10  ,trend
23:29:16  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
23:29:16  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
23:29:16  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
23:29:16  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
23:29:16  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
23:29:16  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
23:29:16  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
23:29:16  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
23:29:16  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
23:29:16  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
23:29:16  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
23:29:16  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
23:29:16  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
23:29:16  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
23:29:16  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
23:29:16  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
23:29:16  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
23:29:16  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
23:29:16  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
23:29:16  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
23:29:16  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
23:29:16  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
23:29:16  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
23:29:16  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
23:29:16  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
23:29:16  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
23:29:16  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
23:29:16  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
23:29:16  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
23:29:16  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
23:29:16  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
23:29:16  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
23:29:16  43  ,hh  att32
23:29:16  44  ,d   att33
23:29:16  45  ,w   att34
23:29:16  46  ,mpm att35
23:29:16  47  ,mph att36
23:29:16  48  ,trend att37
23:29:16  49  FROM svm6142
23:29:16  50  ORDER BY ydate
23:29:16  51  /

Table created.

Elapsed: 00:00:05.35
23:29:21 SQL> 
23:29:21 SQL> -- rpt
23:29:21 SQL> 
23:29:21 SQL> SELECT
23:29:21   2  pair
23:29:21   3  ,trend
23:29:21   4  ,gatt
23:29:21   5  ,COUNT(pair)
23:29:21   6  ,AVG(g6)
23:29:21   7  FROM svm6162
23:29:21   8  GROUP BY pair,trend,gatt
23:29:21   9  ORDER BY pair,trend,gatt
23:29:21  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      5192 -.32371432
ejp_usd 	-1 up	      4922 .277569703
ejp_usd 	-1		66
ejp_usd 	 1 nup	      5006 -.29899163
ejp_usd 	 1 up	      4615 .288910735
ejp_usd 	 1		 6

6 rows selected.

Elapsed: 00:00:00.03
23:29:21 SQL> 
23:29:21 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.78
23:29:22 SQL> CREATE TABLE modsrc COMPRESS AS
23:29:22   2  SELECT
23:29:22   3  pair
23:29:22   4  ,ydate
23:29:22   5  ,prdate
23:29:22   6  ,trend
23:29:22   7  ,g6
23:29:22   8  ,gatt
23:29:22   9  ,gattn
23:29:22  10  FROM svm6162
23:29:22  11  /

Table created.

Elapsed: 00:00:00.09
23:29:22 SQL> 
23:29:22 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.23
23:29:22 SQL> 
23:29:22 SQL> DROP   TABLE ejp_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
23:29:23 SQL> CREATE TABLE ejp_ms610 COMPRESS AS
23:29:23   2  SELECT
23:29:23   3  ydate
23:29:23   4  ,trend ejp_trend
23:29:23   5  ,g6    ejp_g6
23:29:23   6  ,gatt  ejp_gatt
23:29:23   7  ,gattn ejp_gattn
23:29:23   8  FROM modsrc
23:29:23   9  /

Table created.

Elapsed: 00:00:00.07
23:29:23 SQL> 
23:29:23 SQL> ANALYZE TABLE ejp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.27
23:29:23 SQL> 
23:29:23 SQL> -- I need a copy of the attributes:
23:29:23 SQL> 
23:29:23 SQL> 
23:29:23 SQL> DROP   TABLE ejp_att;

Table dropped.

Elapsed: 00:00:00.04
23:29:23 SQL> CREATE TABLE ejp_att COMPRESS AS
23:29:23   2  SELECT
23:29:23   3  ydate
23:29:23   4  ,att00 ejp_att00
23:29:23   5  ,att01 ejp_att01
23:29:23   6  ,att02 ejp_att02
23:29:23   7  ,att03 ejp_att03
23:29:23   8  ,att04 ejp_att04
23:29:23   9  ,att05 ejp_att05
23:29:23  10  ,att06 ejp_att06
23:29:23  11  ,att07 ejp_att07
23:29:23  12  ,att08 ejp_att08
23:29:23  13  ,att09 ejp_att09
23:29:23  14  ,att10 ejp_att10
23:29:23  15  ,att11 ejp_att11
23:29:23  16  ,att12 ejp_att12
23:29:23  17  ,att13 ejp_att13
23:29:23  18  ,att14 ejp_att14
23:29:23  19  ,att15 ejp_att15
23:29:23  20  ,att16 ejp_att16
23:29:23  21  ,att17 ejp_att17
23:29:23  22  ,att18 ejp_att18
23:29:23  23  ,att19 ejp_att19
23:29:23  24  ,att20 ejp_att20
23:29:23  25  ,att21 ejp_att21
23:29:23  26  ,att22 ejp_att22
23:29:23  27  ,att23 ejp_att23
23:29:23  28  ,att24 ejp_att24
23:29:23  29  ,att25 ejp_att25
23:29:23  30  ,att26 ejp_att26
23:29:23  31  ,att27 ejp_att27
23:29:23  32  ,att28 ejp_att28
23:29:23  33  ,att29 ejp_att29
23:29:23  34  ,att30 ejp_att30
23:29:23  35  ,att31 ejp_att31
23:29:23  36  ,att32 ejp_att32
23:29:23  37  ,att33 ejp_att33
23:29:23  38  ,att34 ejp_att34
23:29:23  39  ,att35 ejp_att35
23:29:23  40  ,att36 ejp_att36
23:29:23  41  ,att37 ejp_att37
23:29:23  42  FROM svm6162
23:29:23  43  /

Table created.

Elapsed: 00:00:00.17
23:29:23 SQL> 
23:29:23 SQL> ANALYZE TABLE ejp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
23:29:24 SQL> 
23:29:24 SQL> -- rpt
23:29:24 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19807

Elapsed: 00:00:00.84
23:29:24 SQL> SELECT COUNT(*)FROM ejp_att;

  COUNT(*)
----------
     19807

Elapsed: 00:00:00.00
23:29:24 SQL> 
23:29:24 SQL> --
23:29:24 SQL> -- ajp610.sql
23:29:24 SQL> --
23:29:24 SQL> 
23:29:24 SQL> -- Creates views and tables for backtesting a forex SVM strategy
23:29:24 SQL> 
23:29:24 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.42
23:29:25 SQL> 
23:29:25 SQL> -- I created di5min here:
23:29:25 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
23:29:25 SQL> 
23:29:25 SQL> CREATE OR REPLACE VIEW svm6102 AS
23:29:25   2  SELECT
23:29:25   3  pair
23:29:25   4  ,ydate
23:29:25   5  ,prdate
23:29:25   6  ,rownum rnum -- acts as t in my time-series
23:29:25   7  ,clse
23:29:25   8  -- Derive a bunch of attributes from clse, the latest price:
23:29:25   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
23:29:25  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
23:29:25  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
23:29:25  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
23:29:25  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
23:29:25  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
23:29:25  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
23:29:25  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
23:29:25  17  --
23:29:25  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
23:29:25  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
23:29:25  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
23:29:25  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
23:29:25  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
23:29:25  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
23:29:25  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
23:29:25  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
23:29:25  26  --
23:29:25  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
23:29:25  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
23:29:25  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
23:29:25  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
23:29:25  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
23:29:25  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
23:29:25  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
23:29:25  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
23:29:25  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
23:29:25  36  FROM di5min WHERE pair LIKE'%ajp%'
23:29:25  37  AND ydate > sysdate - 95
23:29:25  38  ORDER BY ydate
23:29:25  39  /

View created.

Elapsed: 00:00:00.05
23:29:25 SQL> 
23:29:25 SQL> -- rpt
23:29:25 SQL> 
23:29:25 SQL> SELECT
23:29:25   2  pair
23:29:25   3  ,COUNT(pair)
23:29:25   4  ,MIN(clse),MAX(clse)
23:29:25   5  ,MIN(avg6),MAX(avg6)
23:29:25   6  ,MIN(ydate),MAX(ydate)
23:29:25   7  FROM svm6102
23:29:25   8  GROUP BY pair
23:29:25   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ajp_usd       19804  78.249976 83.6669853 78.5106193  83.546306 2010-10-03 23:30:01 2011-01-06 23:25:00

Elapsed: 00:00:00.82
23:29:26 SQL> 
23:29:26 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
23:29:26 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.30
23:29:26 SQL> CREATE TABLE svm6122 COMPRESS AS
23:29:26   2  SELECT
23:29:26   3  pair
23:29:26   4  ,ydate
23:29:26   5  ,prdate
23:29:26   6  ,clse
23:29:26   7  -- g6 is important. I want to predict g6:
23:29:26   8  ,ld6 - clse g6
23:29:26   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
23:29:26  10  -- I want more attributes from the ones I derived above:
23:29:26  11  -- clse relation to moving-min
23:29:26  12  ,clse-min4  cm4
23:29:26  13  ,clse-min6  cm6
23:29:26  14  ,clse-min8  cm8
23:29:26  15  ,clse-min10 cm10
23:29:26  16  ,clse-min12 cm12
23:29:26  17  ,clse-min14 cm14
23:29:26  18  ,clse-min16 cm16
23:29:26  19  ,clse-min18 cm18
23:29:26  20  -- clse relation to moving-avg
23:29:26  21  ,clse-avg4  ca4
23:29:26  22  ,clse-avg6  ca6
23:29:26  23  ,clse-avg8  ca8
23:29:26  24  ,clse-avg10 ca10
23:29:26  25  ,clse-avg12 ca12
23:29:26  26  ,clse-avg14 ca14
23:29:26  27  ,clse-avg16 ca16
23:29:26  28  ,clse-avg18 ca18
23:29:26  29  -- clse relation to moving-max
23:29:26  30  ,clse-max4  cx4
23:29:26  31  ,clse-max6  cx6
23:29:26  32  ,clse-max8  cx8
23:29:26  33  ,clse-max10 cx10
23:29:26  34  ,clse-max12 cx12
23:29:26  35  ,clse-max14 cx14
23:29:26  36  ,clse-max16 cx16
23:29:26  37  ,clse-max18 cx18
23:29:26  38  -- Derive more attributes.
23:29:26  39  -- I want to use CORR() here to help SVM see the shape of the series.
23:29:26  40  -- But COVAR_POP is more stable:
23:29:26  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
23:29:26  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
23:29:26  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
23:29:26  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
23:29:26  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
23:29:26  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
23:29:26  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
23:29:26  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
23:29:26  49  -- Derive date related attributes:
23:29:26  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
23:29:26  51  ,0+TO_CHAR(ydate,'D')d
23:29:26  52  ,0+TO_CHAR(ydate,'W')w
23:29:26  53  -- mpm stands for minutes-past-midnight:
23:29:26  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
23:29:26  55  -- mph stands for minutes-past-hour:
23:29:26  56  ,0+TO_CHAR(ydate,'MI')mph
23:29:26  57  FROM svm6102
23:29:26  58  ORDER BY ydate
23:29:26  59  /

Table created.

Elapsed: 00:00:02.12
23:29:28 SQL> 
23:29:28 SQL> -- rpt
23:29:28 SQL> 
23:29:28 SQL> SELECT
23:29:28   2  pair
23:29:28   3  ,COUNT(pair)
23:29:28   4  ,MIN(clse),MAX(clse)
23:29:28   5  ,MIN(ydate),MAX(ydate)
23:29:28   6  FROM svm6122
23:29:28   7  GROUP BY pair
23:29:28   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ajp_usd       19804  78.249976 83.6669853 2010-10-03 23:30:01 2011-01-06 23:25:00

Elapsed: 00:00:00.04
23:29:28 SQL> 
23:29:28 SQL> -- Prepare for derivation of NTILE based params:
23:29:28 SQL> 
23:29:28 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.21
23:29:28 SQL> CREATE TABLE svm6142 COMPRESS AS
23:29:28   2  SELECT
23:29:28   3  pair
23:29:28   4  ,ydate
23:29:28   5  ,prdate
23:29:28   6  ,clse
23:29:28   7  ,g6
23:29:28   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
23:29:28   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
23:29:28  10  ,CASE WHEN trend IS NULL THEN 1
23:29:28  11  	    WHEN trend =0      THEN 1
23:29:28  12  	    ELSE trend END trend
23:29:28  13  ,cm4
23:29:28  14  ,cm6
23:29:28  15  ,cm8
23:29:28  16  ,cm10
23:29:28  17  ,cm12
23:29:28  18  ,cm14
23:29:28  19  ,cm16
23:29:28  20  ,cm18
23:29:28  21  --
23:29:28  22  ,ca4
23:29:28  23  ,ca6
23:29:28  24  ,ca8
23:29:28  25  ,ca10
23:29:28  26  ,ca12
23:29:28  27  ,ca14
23:29:28  28  ,ca16
23:29:28  29  ,ca18
23:29:28  30  --
23:29:28  31  ,cx4
23:29:28  32  ,cx6
23:29:28  33  ,cx8
23:29:28  34  ,cx10
23:29:28  35  ,cx12
23:29:28  36  ,cx14
23:29:28  37  ,cx16
23:29:28  38  ,cx18
23:29:28  39  --
23:29:28  40  ,crr4
23:29:28  41  ,crr6
23:29:28  42  ,crr8
23:29:28  43  ,crr10
23:29:28  44  ,crr12
23:29:28  45  ,crr14
23:29:28  46  ,crr16
23:29:28  47  ,crr18
23:29:28  48  --
23:29:28  49  ,hh
23:29:28  50  ,d
23:29:28  51  ,w
23:29:28  52  ,mpm
23:29:28  53  ,mph
23:29:28  54  FROM svm6122
23:29:28  55  ORDER BY ydate
23:29:28  56  /

Table created.

Elapsed: 00:00:00.41
23:29:29 SQL> 
23:29:29 SQL> -- rpt
23:29:29 SQL> 
23:29:29 SQL> SELECT
23:29:29   2  pair
23:29:29   3  ,trend
23:29:29   4  ,gatt
23:29:29   5  ,COUNT(pair)
23:29:29   6  ,AVG(g6)
23:29:29   7  FROM svm6142
23:29:29   8  GROUP BY pair,trend,gatt
23:29:29   9  ORDER BY pair,trend,gatt
23:29:29  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ajp_usd 	-1 nup	      4408 -.22378217
ajp_usd 	-1 up	      5227 .223416513
ajp_usd 	-1		37
ajp_usd 	 1 nup	      5291 -.20288072
ajp_usd 	 1 up	      4806 .212866042
ajp_usd 	 1		35

6 rows selected.

Elapsed: 00:00:00.04
23:29:29 SQL> 
23:29:29 SQL> 
23:29:29 SQL> -- Derive NTILE based params:
23:29:29 SQL> 
23:29:29 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.17
23:29:29 SQL> CREATE TABLE svm6162 COMPRESS AS
23:29:29   2  SELECT
23:29:29   3  pair
23:29:29   4  ,ydate
23:29:29   5  ,prdate
23:29:29   6  ,clse
23:29:29   7  ,g6
23:29:29   8  ,gatt
23:29:29   9  ,gattn
23:29:29  10  ,trend
23:29:29  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
23:29:29  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
23:29:29  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
23:29:29  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
23:29:29  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
23:29:29  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
23:29:29  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
23:29:29  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
23:29:29  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
23:29:29  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
23:29:29  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
23:29:29  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
23:29:29  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
23:29:29  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
23:29:29  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
23:29:29  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
23:29:29  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
23:29:29  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
23:29:29  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
23:29:29  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
23:29:29  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
23:29:29  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
23:29:29  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
23:29:29  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
23:29:29  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
23:29:29  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
23:29:29  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
23:29:29  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
23:29:29  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
23:29:29  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
23:29:29  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
23:29:29  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
23:29:29  43  ,hh  att32
23:29:29  44  ,d   att33
23:29:29  45  ,w   att34
23:29:29  46  ,mpm att35
23:29:29  47  ,mph att36
23:29:29  48  ,trend att37
23:29:29  49  FROM svm6142
23:29:29  50  ORDER BY ydate
23:29:29  51  /

Table created.

Elapsed: 00:00:04.97
23:29:34 SQL> 
23:29:34 SQL> -- rpt
23:29:34 SQL> 
23:29:34 SQL> SELECT
23:29:34   2  pair
23:29:34   3  ,trend
23:29:34   4  ,gatt
23:29:34   5  ,COUNT(pair)
23:29:34   6  ,AVG(g6)
23:29:34   7  FROM svm6162
23:29:34   8  GROUP BY pair,trend,gatt
23:29:34   9  ORDER BY pair,trend,gatt
23:29:34  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ajp_usd 	-1 nup	      4408 -.22378217
ajp_usd 	-1 up	      5227 .223416513
ajp_usd 	-1		37
ajp_usd 	 1 nup	      5291 -.20288072
ajp_usd 	 1 up	      4806 .212866042
ajp_usd 	 1		35

6 rows selected.

Elapsed: 00:00:00.03
23:29:34 SQL> 
23:29:34 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
23:29:34 SQL> CREATE TABLE modsrc COMPRESS AS
23:29:34   2  SELECT
23:29:34   3  pair
23:29:34   4  ,ydate
23:29:34   5  ,prdate
23:29:34   6  ,trend
23:29:34   7  ,g6
23:29:34   8  ,gatt
23:29:34   9  ,gattn
23:29:34  10  FROM svm6162
23:29:34  11  /

Table created.

Elapsed: 00:00:00.08
23:29:34 SQL> 
23:29:34 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.22
23:29:34 SQL> 
23:29:34 SQL> DROP   TABLE ajp_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
23:29:34 SQL> CREATE TABLE ajp_ms610 COMPRESS AS
23:29:34   2  SELECT
23:29:34   3  ydate
23:29:34   4  ,trend ajp_trend
23:29:34   5  ,g6    ajp_g6
23:29:34   6  ,gatt  ajp_gatt
23:29:34   7  ,gattn ajp_gattn
23:29:34   8  FROM modsrc
23:29:34   9  /

Table created.

Elapsed: 00:00:00.07
23:29:34 SQL> 
23:29:34 SQL> ANALYZE TABLE ajp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
23:29:35 SQL> 
23:29:35 SQL> -- I need a copy of the attributes:
23:29:35 SQL> 
23:29:35 SQL> 
23:29:35 SQL> DROP   TABLE ajp_att;

Table dropped.

Elapsed: 00:00:00.05
23:29:35 SQL> CREATE TABLE ajp_att COMPRESS AS
23:29:35   2  SELECT
23:29:35   3  ydate
23:29:35   4  ,att00 ajp_att00
23:29:35   5  ,att01 ajp_att01
23:29:35   6  ,att02 ajp_att02
23:29:35   7  ,att03 ajp_att03
23:29:35   8  ,att04 ajp_att04
23:29:35   9  ,att05 ajp_att05
23:29:35  10  ,att06 ajp_att06
23:29:35  11  ,att07 ajp_att07
23:29:35  12  ,att08 ajp_att08
23:29:35  13  ,att09 ajp_att09
23:29:35  14  ,att10 ajp_att10
23:29:35  15  ,att11 ajp_att11
23:29:35  16  ,att12 ajp_att12
23:29:35  17  ,att13 ajp_att13
23:29:35  18  ,att14 ajp_att14
23:29:35  19  ,att15 ajp_att15
23:29:35  20  ,att16 ajp_att16
23:29:35  21  ,att17 ajp_att17
23:29:35  22  ,att18 ajp_att18
23:29:35  23  ,att19 ajp_att19
23:29:35  24  ,att20 ajp_att20
23:29:35  25  ,att21 ajp_att21
23:29:35  26  ,att22 ajp_att22
23:29:35  27  ,att23 ajp_att23
23:29:35  28  ,att24 ajp_att24
23:29:35  29  ,att25 ajp_att25
23:29:35  30  ,att26 ajp_att26
23:29:35  31  ,att27 ajp_att27
23:29:35  32  ,att28 ajp_att28
23:29:35  33  ,att29 ajp_att29
23:29:35  34  ,att30 ajp_att30
23:29:35  35  ,att31 ajp_att31
23:29:35  36  ,att32 ajp_att32
23:29:35  37  ,att33 ajp_att33
23:29:35  38  ,att34 ajp_att34
23:29:35  39  ,att35 ajp_att35
23:29:35  40  ,att36 ajp_att36
23:29:35  41  ,att37 ajp_att37
23:29:35  42  FROM svm6162
23:29:35  43  /

Table created.

Elapsed: 00:00:00.18
23:29:35 SQL> 
23:29:35 SQL> ANALYZE TABLE ajp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
23:29:35 SQL> 
23:29:35 SQL> -- rpt
23:29:35 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19804

Elapsed: 00:00:00.80
23:29:36 SQL> SELECT COUNT(*)FROM ajp_att;

  COUNT(*)
----------
     19804

Elapsed: 00:00:00.00
23:29:36 SQL> 
23:29:36 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
