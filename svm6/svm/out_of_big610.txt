
SQL*Plus: Release 11.2.0.1.0 Production on Wed Dec 29 07:37:19 2010

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

07:37:19 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
07:37:19 SQL> 07:37:19 SQL> --
07:37:19 SQL> -- eur610.sql
07:37:19 SQL> --
07:37:19 SQL> 
07:37:19 SQL> -- Creates views and tables for backtesting a forex SVM strategy
07:37:19 SQL> 
07:37:19 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.01
07:37:19 SQL> 
07:37:19 SQL> -- I created di5min here:
07:37:19 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
07:37:19 SQL> 
07:37:19 SQL> CREATE OR REPLACE VIEW svm6102 AS
07:37:19   2  SELECT
07:37:19   3  pair
07:37:19   4  ,ydate
07:37:19   5  ,prdate
07:37:19   6  ,rownum rnum -- acts as t in my time-series
07:37:19   7  ,clse
07:37:19   8  -- Derive a bunch of attributes from clse, the latest price:
07:37:19   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
07:37:19  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
07:37:19  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
07:37:19  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
07:37:19  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
07:37:19  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
07:37:19  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
07:37:19  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
07:37:19  17  --
07:37:19  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
07:37:19  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
07:37:19  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
07:37:19  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
07:37:19  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
07:37:19  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
07:37:19  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
07:37:19  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
07:37:19  26  --
07:37:19  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
07:37:19  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
07:37:19  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
07:37:19  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
07:37:19  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
07:37:19  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
07:37:19  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
07:37:19  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
07:37:19  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
07:37:19  36  FROM di5min WHERE pair LIKE'%eur%'
07:37:19  37  AND ydate > sysdate - 95
07:37:19  38  ORDER BY ydate
07:37:19  39  /

View created.

Elapsed: 00:00:00.05
07:37:19 SQL> 
07:37:19 SQL> -- rpt
07:37:19 SQL> 
07:37:19 SQL> SELECT
07:37:19   2  pair
07:37:19   3  ,COUNT(pair)
07:37:19   4  ,MIN(clse),MAX(clse)
07:37:19   5  ,MIN(avg6),MAX(avg6)
07:37:19   6  ,MIN(ydate),MAX(ydate)
07:37:19   7  FROM svm6102
07:37:19   8  GROUP BY pair
07:37:19   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_usd       19398    1.29735	   1.4273 1.29875103 1.42436233 2010-09-26 20:55:01 2010-12-29 07:30:00

Elapsed: 00:00:00.89
07:37:20 SQL> 
07:37:20 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
07:37:20 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.07
07:37:20 SQL> CREATE TABLE svm6122 COMPRESS AS
07:37:20   2  SELECT
07:37:20   3  pair
07:37:20   4  ,ydate
07:37:20   5  ,prdate
07:37:20   6  ,clse
07:37:20   7  -- g6 is important. I want to predict g6:
07:37:20   8  ,ld6 - clse g6
07:37:20   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
07:37:20  10  -- I want more attributes from the ones I derived above:
07:37:20  11  -- clse relation to moving-min
07:37:20  12  ,clse-min4  cm4
07:37:20  13  ,clse-min6  cm6
07:37:20  14  ,clse-min8  cm8
07:37:20  15  ,clse-min10 cm10
07:37:20  16  ,clse-min12 cm12
07:37:20  17  ,clse-min14 cm14
07:37:20  18  ,clse-min16 cm16
07:37:20  19  ,clse-min18 cm18
07:37:20  20  -- clse relation to moving-avg
07:37:20  21  ,clse-avg4  ca4
07:37:20  22  ,clse-avg6  ca6
07:37:20  23  ,clse-avg8  ca8
07:37:20  24  ,clse-avg10 ca10
07:37:20  25  ,clse-avg12 ca12
07:37:20  26  ,clse-avg14 ca14
07:37:20  27  ,clse-avg16 ca16
07:37:20  28  ,clse-avg18 ca18
07:37:20  29  -- clse relation to moving-max
07:37:20  30  ,clse-max4  cx4
07:37:20  31  ,clse-max6  cx6
07:37:20  32  ,clse-max8  cx8
07:37:20  33  ,clse-max10 cx10
07:37:20  34  ,clse-max12 cx12
07:37:20  35  ,clse-max14 cx14
07:37:20  36  ,clse-max16 cx16
07:37:20  37  ,clse-max18 cx18
07:37:20  38  -- Derive more attributes.
07:37:20  39  -- I want to use CORR() here to help SVM see the shape of the series.
07:37:20  40  -- But COVAR_POP is more stable:
07:37:20  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
07:37:20  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
07:37:20  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
07:37:20  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
07:37:20  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
07:37:20  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
07:37:20  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
07:37:20  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
07:37:20  49  -- Derive date related attributes:
07:37:20  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
07:37:20  51  ,0+TO_CHAR(ydate,'D')d
07:37:20  52  ,0+TO_CHAR(ydate,'W')w
07:37:20  53  -- mpm stands for minutes-past-midnight:
07:37:20  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
07:37:20  55  -- mph stands for minutes-past-hour:
07:37:20  56  ,0+TO_CHAR(ydate,'MI')mph
07:37:20  57  FROM svm6102
07:37:20  58  ORDER BY ydate
07:37:20  59  /

Table created.

Elapsed: 00:00:02.35
07:37:23 SQL> 
07:37:23 SQL> -- rpt
07:37:23 SQL> 
07:37:23 SQL> SELECT
07:37:23   2  pair
07:37:23   3  ,COUNT(pair)
07:37:23   4  ,MIN(clse),MAX(clse)
07:37:23   5  ,MIN(ydate),MAX(ydate)
07:37:23   6  FROM svm6122
07:37:23   7  GROUP BY pair
07:37:23   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_usd       19398    1.29735	   1.4273 2010-09-26 20:55:01 2010-12-29 07:30:00

Elapsed: 00:00:00.04
07:37:23 SQL> 
07:37:23 SQL> -- Prepare for derivation of NTILE based params:
07:37:23 SQL> 
07:37:23 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.92
07:37:24 SQL> CREATE TABLE svm6142 COMPRESS AS
07:37:24   2  SELECT
07:37:24   3  pair
07:37:24   4  ,ydate
07:37:24   5  ,prdate
07:37:24   6  ,clse
07:37:24   7  ,g6
07:37:24   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
07:37:24   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
07:37:24  10  ,CASE WHEN trend IS NULL THEN 1
07:37:24  11  	    WHEN trend =0      THEN 1
07:37:24  12  	    ELSE trend END trend
07:37:24  13  ,cm4
07:37:24  14  ,cm6
07:37:24  15  ,cm8
07:37:24  16  ,cm10
07:37:24  17  ,cm12
07:37:24  18  ,cm14
07:37:24  19  ,cm16
07:37:24  20  ,cm18
07:37:24  21  --
07:37:24  22  ,ca4
07:37:24  23  ,ca6
07:37:24  24  ,ca8
07:37:24  25  ,ca10
07:37:24  26  ,ca12
07:37:24  27  ,ca14
07:37:24  28  ,ca16
07:37:24  29  ,ca18
07:37:24  30  --
07:37:24  31  ,cx4
07:37:24  32  ,cx6
07:37:24  33  ,cx8
07:37:24  34  ,cx10
07:37:24  35  ,cx12
07:37:24  36  ,cx14
07:37:24  37  ,cx16
07:37:24  38  ,cx18
07:37:24  39  --
07:37:24  40  ,crr4
07:37:24  41  ,crr6
07:37:24  42  ,crr8
07:37:24  43  ,crr10
07:37:24  44  ,crr12
07:37:24  45  ,crr14
07:37:24  46  ,crr16
07:37:24  47  ,crr18
07:37:24  48  --
07:37:24  49  ,hh
07:37:24  50  ,d
07:37:24  51  ,w
07:37:24  52  ,mpm
07:37:24  53  ,mph
07:37:24  54  FROM svm6122
07:37:24  55  ORDER BY ydate
07:37:24  56  /

Table created.

Elapsed: 00:00:00.45
07:37:24 SQL> 
07:37:24 SQL> -- rpt
07:37:24 SQL> 
07:37:24 SQL> SELECT
07:37:24   2  pair
07:37:24   3  ,trend
07:37:24   4  ,gatt
07:37:24   5  ,COUNT(pair)
07:37:24   6  ,AVG(g6)
07:37:24   7  FROM svm6142
07:37:24   8  GROUP BY pair,trend,gatt
07:37:24   9  ORDER BY pair,trend,gatt
07:37:24  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6131 -.00308082
eur_usd 	-1 up	      3672 .004457901
eur_usd 	-1		 4
eur_usd 	 1 nup	      5871 -.00319026
eur_usd 	 1 up	      3652 .005137462
eur_usd 	 1		68

6 rows selected.

Elapsed: 00:00:00.04
07:37:24 SQL> 
07:37:24 SQL> 
07:37:24 SQL> -- Derive NTILE based params:
07:37:24 SQL> 
07:37:24 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.24
07:37:24 SQL> CREATE TABLE svm6162 COMPRESS AS
07:37:24   2  SELECT
07:37:24   3  pair
07:37:24   4  ,ydate
07:37:24   5  ,prdate
07:37:24   6  ,clse
07:37:24   7  ,g6
07:37:24   8  ,gatt
07:37:24   9  ,gattn
07:37:24  10  ,trend
07:37:24  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
07:37:24  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
07:37:24  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
07:37:24  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
07:37:24  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
07:37:24  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
07:37:24  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
07:37:24  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
07:37:24  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
07:37:24  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
07:37:24  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
07:37:24  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
07:37:24  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
07:37:24  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
07:37:24  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
07:37:24  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
07:37:24  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
07:37:24  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
07:37:24  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
07:37:24  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
07:37:24  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
07:37:24  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
07:37:24  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
07:37:24  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
07:37:24  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
07:37:24  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
07:37:24  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
07:37:24  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
07:37:24  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
07:37:24  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
07:37:24  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
07:37:24  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
07:37:24  43  ,hh  att32
07:37:24  44  ,d   att33
07:37:24  45  ,w   att34
07:37:24  46  ,mpm att35
07:37:24  47  ,mph att36
07:37:24  48  ,trend att37
07:37:24  49  FROM svm6142
07:37:24  50  ORDER BY ydate
07:37:24  51  /

Table created.

Elapsed: 00:00:04.74
07:37:29 SQL> 
07:37:29 SQL> -- rpt
07:37:29 SQL> 
07:37:29 SQL> SELECT
07:37:29   2  pair
07:37:29   3  ,trend
07:37:29   4  ,gatt
07:37:29   5  ,COUNT(pair)
07:37:29   6  ,AVG(g6)
07:37:29   7  FROM svm6162
07:37:29   8  GROUP BY pair,trend,gatt
07:37:29   9  ORDER BY pair,trend,gatt
07:37:29  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6131 -.00308082
eur_usd 	-1 up	      3672 .004457901
eur_usd 	-1		 4
eur_usd 	 1 nup	      5871 -.00319026
eur_usd 	 1 up	      3652 .005137462
eur_usd 	 1		68

6 rows selected.

Elapsed: 00:00:00.02
07:37:29 SQL> 
07:37:29 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.29
07:37:30 SQL> CREATE TABLE modsrc COMPRESS AS
07:37:30   2  SELECT
07:37:30   3  pair
07:37:30   4  ,ydate
07:37:30   5  ,prdate
07:37:30   6  ,trend
07:37:30   7  ,g6
07:37:30   8  ,gatt
07:37:30   9  ,gattn
07:37:30  10  FROM svm6162
07:37:30  11  /

Table created.

Elapsed: 00:00:00.08
07:37:30 SQL> 
07:37:30 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.22
07:37:30 SQL> 
07:37:30 SQL> DROP   TABLE eur_ms610 ;

Table dropped.

Elapsed: 00:00:00.20
07:37:30 SQL> CREATE TABLE eur_ms610 COMPRESS AS
07:37:30   2  SELECT
07:37:30   3  ydate
07:37:30   4  ,trend eur_trend
07:37:30   5  ,g6    eur_g6
07:37:30   6  ,gatt  eur_gatt
07:37:30   7  ,gattn eur_gattn
07:37:30   8  FROM modsrc
07:37:30   9  /

Table created.

Elapsed: 00:00:00.07
07:37:30 SQL> 
07:37:30 SQL> ANALYZE TABLE eur_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
07:37:30 SQL> 
07:37:30 SQL> -- I need a copy of the attributes:
07:37:30 SQL> 
07:37:30 SQL> 
07:37:30 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.05
07:37:30 SQL> CREATE TABLE eur_att COMPRESS AS
07:37:30   2  SELECT
07:37:30   3  ydate
07:37:30   4  ,att00 eur_att00
07:37:30   5  ,att01 eur_att01
07:37:30   6  ,att02 eur_att02
07:37:30   7  ,att03 eur_att03
07:37:30   8  ,att04 eur_att04
07:37:30   9  ,att05 eur_att05
07:37:30  10  ,att06 eur_att06
07:37:30  11  ,att07 eur_att07
07:37:30  12  ,att08 eur_att08
07:37:30  13  ,att09 eur_att09
07:37:30  14  ,att10 eur_att10
07:37:30  15  ,att11 eur_att11
07:37:30  16  ,att12 eur_att12
07:37:30  17  ,att13 eur_att13
07:37:30  18  ,att14 eur_att14
07:37:30  19  ,att15 eur_att15
07:37:30  20  ,att16 eur_att16
07:37:30  21  ,att17 eur_att17
07:37:30  22  ,att18 eur_att18
07:37:30  23  ,att19 eur_att19
07:37:30  24  ,att20 eur_att20
07:37:30  25  ,att21 eur_att21
07:37:30  26  ,att22 eur_att22
07:37:30  27  ,att23 eur_att23
07:37:30  28  ,att24 eur_att24
07:37:30  29  ,att25 eur_att25
07:37:30  30  ,att26 eur_att26
07:37:30  31  ,att27 eur_att27
07:37:30  32  ,att28 eur_att28
07:37:30  33  ,att29 eur_att29
07:37:30  34  ,att30 eur_att30
07:37:30  35  ,att31 eur_att31
07:37:30  36  ,att32 eur_att32
07:37:30  37  ,att33 eur_att33
07:37:30  38  ,att34 eur_att34
07:37:30  39  ,att35 eur_att35
07:37:30  40  ,att36 eur_att36
07:37:30  41  ,att37 eur_att37
07:37:30  42  FROM svm6162
07:37:30  43  /

Table created.

Elapsed: 00:00:00.18
07:37:31 SQL> 
07:37:31 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.43
07:37:31 SQL> 
07:37:31 SQL> -- rpt
07:37:31 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19398

Elapsed: 00:00:00.88
07:37:32 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     19398

Elapsed: 00:00:00.00
07:37:32 SQL> 
07:37:32 SQL> --
07:37:32 SQL> -- aud610.sql
07:37:32 SQL> --
07:37:32 SQL> 
07:37:32 SQL> -- Creates views and tables for backtesting a forex SVM strategy
07:37:32 SQL> 
07:37:32 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.72
07:37:33 SQL> 
07:37:33 SQL> -- I created di5min here:
07:37:33 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
07:37:33 SQL> 
07:37:33 SQL> CREATE OR REPLACE VIEW svm6102 AS
07:37:33   2  SELECT
07:37:33   3  pair
07:37:33   4  ,ydate
07:37:33   5  ,prdate
07:37:33   6  ,rownum rnum -- acts as t in my time-series
07:37:33   7  ,clse
07:37:33   8  -- Derive a bunch of attributes from clse, the latest price:
07:37:33   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
07:37:33  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
07:37:33  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
07:37:33  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
07:37:33  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
07:37:33  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
07:37:33  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
07:37:33  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
07:37:33  17  --
07:37:33  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
07:37:33  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
07:37:33  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
07:37:33  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
07:37:33  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
07:37:33  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
07:37:33  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
07:37:33  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
07:37:33  26  --
07:37:33  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
07:37:33  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
07:37:33  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
07:37:33  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
07:37:33  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
07:37:33  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
07:37:33  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
07:37:33  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
07:37:33  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
07:37:33  36  FROM di5min WHERE pair LIKE'%aud%'
07:37:33  37  AND ydate > sysdate - 95
07:37:33  38  ORDER BY ydate
07:37:33  39  /

View created.

Elapsed: 00:00:00.03
07:37:33 SQL> 
07:37:33 SQL> -- rpt
07:37:33 SQL> 
07:37:33 SQL> SELECT
07:37:33   2  pair
07:37:33   3  ,COUNT(pair)
07:37:33   4  ,MIN(clse),MAX(clse)
07:37:33   5  ,MIN(avg6),MAX(avg6)
07:37:33   6  ,MIN(ydate),MAX(ydate)
07:37:33   7  FROM svm6102
07:37:33   8  GROUP BY pair
07:37:33   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
aud_usd       19395	.95405	   1.0181 .957141438 1.01556438 2010-09-26 20:55:01 2010-12-29 07:30:00

Elapsed: 00:00:00.87
07:37:33 SQL> 
07:37:33 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
07:37:33 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.17
07:37:34 SQL> CREATE TABLE svm6122 COMPRESS AS
07:37:34   2  SELECT
07:37:34   3  pair
07:37:34   4  ,ydate
07:37:34   5  ,prdate
07:37:34   6  ,clse
07:37:34   7  -- g6 is important. I want to predict g6:
07:37:34   8  ,ld6 - clse g6
07:37:34   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
07:37:34  10  -- I want more attributes from the ones I derived above:
07:37:34  11  -- clse relation to moving-min
07:37:34  12  ,clse-min4  cm4
07:37:34  13  ,clse-min6  cm6
07:37:34  14  ,clse-min8  cm8
07:37:34  15  ,clse-min10 cm10
07:37:34  16  ,clse-min12 cm12
07:37:34  17  ,clse-min14 cm14
07:37:34  18  ,clse-min16 cm16
07:37:34  19  ,clse-min18 cm18
07:37:34  20  -- clse relation to moving-avg
07:37:34  21  ,clse-avg4  ca4
07:37:34  22  ,clse-avg6  ca6
07:37:34  23  ,clse-avg8  ca8
07:37:34  24  ,clse-avg10 ca10
07:37:34  25  ,clse-avg12 ca12
07:37:34  26  ,clse-avg14 ca14
07:37:34  27  ,clse-avg16 ca16
07:37:34  28  ,clse-avg18 ca18
07:37:34  29  -- clse relation to moving-max
07:37:34  30  ,clse-max4  cx4
07:37:34  31  ,clse-max6  cx6
07:37:34  32  ,clse-max8  cx8
07:37:34  33  ,clse-max10 cx10
07:37:34  34  ,clse-max12 cx12
07:37:34  35  ,clse-max14 cx14
07:37:34  36  ,clse-max16 cx16
07:37:34  37  ,clse-max18 cx18
07:37:34  38  -- Derive more attributes.
07:37:34  39  -- I want to use CORR() here to help SVM see the shape of the series.
07:37:34  40  -- But COVAR_POP is more stable:
07:37:34  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
07:37:34  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
07:37:34  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
07:37:34  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
07:37:34  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
07:37:34  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
07:37:34  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
07:37:34  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
07:37:34  49  -- Derive date related attributes:
07:37:34  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
07:37:34  51  ,0+TO_CHAR(ydate,'D')d
07:37:34  52  ,0+TO_CHAR(ydate,'W')w
07:37:34  53  -- mpm stands for minutes-past-midnight:
07:37:34  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
07:37:34  55  -- mph stands for minutes-past-hour:
07:37:34  56  ,0+TO_CHAR(ydate,'MI')mph
07:37:34  57  FROM svm6102
07:37:34  58  ORDER BY ydate
07:37:34  59  /

Table created.

Elapsed: 00:00:02.05
07:37:36 SQL> 
07:37:36 SQL> -- rpt
07:37:36 SQL> 
07:37:36 SQL> SELECT
07:37:36   2  pair
07:37:36   3  ,COUNT(pair)
07:37:36   4  ,MIN(clse),MAX(clse)
07:37:36   5  ,MIN(ydate),MAX(ydate)
07:37:36   6  FROM svm6122
07:37:36   7  GROUP BY pair
07:37:36   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
aud_usd       19395	.95405	   1.0181 2010-09-26 20:55:01 2010-12-29 07:30:00

Elapsed: 00:00:00.06
07:37:36 SQL> 
07:37:36 SQL> -- Prepare for derivation of NTILE based params:
07:37:36 SQL> 
07:37:36 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.18
07:37:36 SQL> CREATE TABLE svm6142 COMPRESS AS
07:37:36   2  SELECT
07:37:36   3  pair
07:37:36   4  ,ydate
07:37:36   5  ,prdate
07:37:36   6  ,clse
07:37:36   7  ,g6
07:37:36   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
07:37:36   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
07:37:36  10  ,CASE WHEN trend IS NULL THEN 1
07:37:36  11  	    WHEN trend =0      THEN 1
07:37:36  12  	    ELSE trend END trend
07:37:36  13  ,cm4
07:37:36  14  ,cm6
07:37:36  15  ,cm8
07:37:36  16  ,cm10
07:37:36  17  ,cm12
07:37:36  18  ,cm14
07:37:36  19  ,cm16
07:37:36  20  ,cm18
07:37:36  21  --
07:37:36  22  ,ca4
07:37:36  23  ,ca6
07:37:36  24  ,ca8
07:37:36  25  ,ca10
07:37:36  26  ,ca12
07:37:36  27  ,ca14
07:37:36  28  ,ca16
07:37:36  29  ,ca18
07:37:36  30  --
07:37:36  31  ,cx4
07:37:36  32  ,cx6
07:37:36  33  ,cx8
07:37:36  34  ,cx10
07:37:36  35  ,cx12
07:37:36  36  ,cx14
07:37:36  37  ,cx16
07:37:36  38  ,cx18
07:37:36  39  --
07:37:36  40  ,crr4
07:37:36  41  ,crr6
07:37:36  42  ,crr8
07:37:36  43  ,crr10
07:37:36  44  ,crr12
07:37:36  45  ,crr14
07:37:36  46  ,crr16
07:37:36  47  ,crr18
07:37:36  48  --
07:37:36  49  ,hh
07:37:36  50  ,d
07:37:36  51  ,w
07:37:36  52  ,mpm
07:37:36  53  ,mph
07:37:36  54  FROM svm6122
07:37:36  55  ORDER BY ydate
07:37:36  56  /

Table created.

Elapsed: 00:00:00.38
07:37:36 SQL> 
07:37:36 SQL> -- rpt
07:37:36 SQL> 
07:37:36 SQL> SELECT
07:37:36   2  pair
07:37:36   3  ,trend
07:37:36   4  ,gatt
07:37:36   5  ,COUNT(pair)
07:37:36   6  ,AVG(g6)
07:37:36   7  FROM svm6142
07:37:36   8  GROUP BY pair,trend,gatt
07:37:36   9  ORDER BY pair,trend,gatt
07:37:36  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5198 -.00212209
aud_usd 	-1 up	      3799  .00372754
aud_usd 	-1		 6
aud_usd 	 1 nup	      6679 -.00213644
aud_usd 	 1 up	      3647 .004062925
aud_usd 	 1		66

6 rows selected.

Elapsed: 00:00:00.04
07:37:36 SQL> 
07:37:36 SQL> 
07:37:36 SQL> -- Derive NTILE based params:
07:37:36 SQL> 
07:37:36 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.12
07:37:36 SQL> CREATE TABLE svm6162 COMPRESS AS
07:37:36   2  SELECT
07:37:36   3  pair
07:37:36   4  ,ydate
07:37:36   5  ,prdate
07:37:36   6  ,clse
07:37:36   7  ,g6
07:37:36   8  ,gatt
07:37:36   9  ,gattn
07:37:36  10  ,trend
07:37:36  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
07:37:36  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
07:37:36  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
07:37:36  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
07:37:36  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
07:37:36  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
07:37:36  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
07:37:36  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
07:37:36  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
07:37:36  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
07:37:36  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
07:37:36  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
07:37:36  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
07:37:36  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
07:37:36  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
07:37:36  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
07:37:36  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
07:37:36  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
07:37:36  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
07:37:36  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
07:37:36  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
07:37:36  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
07:37:36  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
07:37:36  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
07:37:36  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
07:37:36  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
07:37:36  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
07:37:36  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
07:37:36  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
07:37:36  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
07:37:36  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
07:37:36  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
07:37:36  43  ,hh  att32
07:37:36  44  ,d   att33
07:37:36  45  ,w   att34
07:37:36  46  ,mpm att35
07:37:36  47  ,mph att36
07:37:36  48  ,trend att37
07:37:36  49  FROM svm6142
07:37:36  50  ORDER BY ydate
07:37:36  51  /

Table created.

Elapsed: 00:00:04.65
07:37:41 SQL> 
07:37:41 SQL> -- rpt
07:37:41 SQL> 
07:37:41 SQL> SELECT
07:37:41   2  pair
07:37:41   3  ,trend
07:37:41   4  ,gatt
07:37:41   5  ,COUNT(pair)
07:37:41   6  ,AVG(g6)
07:37:41   7  FROM svm6162
07:37:41   8  GROUP BY pair,trend,gatt
07:37:41   9  ORDER BY pair,trend,gatt
07:37:41  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5198 -.00212209
aud_usd 	-1 up	      3799  .00372754
aud_usd 	-1		 6
aud_usd 	 1 nup	      6679 -.00213644
aud_usd 	 1 up	      3647 .004062925
aud_usd 	 1		66

6 rows selected.

Elapsed: 00:00:00.03
07:37:41 SQL> 
07:37:41 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.14
07:37:41 SQL> CREATE TABLE modsrc COMPRESS AS
07:37:41   2  SELECT
07:37:41   3  pair
07:37:41   4  ,ydate
07:37:41   5  ,prdate
07:37:41   6  ,trend
07:37:41   7  ,g6
07:37:41   8  ,gatt
07:37:41   9  ,gattn
07:37:41  10  FROM svm6162
07:37:41  11  /

Table created.

Elapsed: 00:00:00.09
07:37:41 SQL> 
07:37:41 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
07:37:42 SQL> 
07:37:42 SQL> DROP   TABLE aud_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
07:37:42 SQL> CREATE TABLE aud_ms610 COMPRESS AS
07:37:42   2  SELECT
07:37:42   3  ydate
07:37:42   4  ,trend aud_trend
07:37:42   5  ,g6    aud_g6
07:37:42   6  ,gatt  aud_gatt
07:37:42   7  ,gattn aud_gattn
07:37:42   8  FROM modsrc
07:37:42   9  /

Table created.

Elapsed: 00:00:00.06
07:37:42 SQL> 
07:37:42 SQL> ANALYZE TABLE aud_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
07:37:42 SQL> 
07:37:42 SQL> -- I need a copy of the attributes:
07:37:42 SQL> 
07:37:42 SQL> 
07:37:42 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.07
07:37:42 SQL> CREATE TABLE aud_att COMPRESS AS
07:37:42   2  SELECT
07:37:42   3  ydate
07:37:42   4  ,att00 aud_att00
07:37:42   5  ,att01 aud_att01
07:37:42   6  ,att02 aud_att02
07:37:42   7  ,att03 aud_att03
07:37:42   8  ,att04 aud_att04
07:37:42   9  ,att05 aud_att05
07:37:42  10  ,att06 aud_att06
07:37:42  11  ,att07 aud_att07
07:37:42  12  ,att08 aud_att08
07:37:42  13  ,att09 aud_att09
07:37:42  14  ,att10 aud_att10
07:37:42  15  ,att11 aud_att11
07:37:42  16  ,att12 aud_att12
07:37:42  17  ,att13 aud_att13
07:37:42  18  ,att14 aud_att14
07:37:42  19  ,att15 aud_att15
07:37:42  20  ,att16 aud_att16
07:37:42  21  ,att17 aud_att17
07:37:42  22  ,att18 aud_att18
07:37:42  23  ,att19 aud_att19
07:37:42  24  ,att20 aud_att20
07:37:42  25  ,att21 aud_att21
07:37:42  26  ,att22 aud_att22
07:37:42  27  ,att23 aud_att23
07:37:42  28  ,att24 aud_att24
07:37:42  29  ,att25 aud_att25
07:37:42  30  ,att26 aud_att26
07:37:42  31  ,att27 aud_att27
07:37:42  32  ,att28 aud_att28
07:37:42  33  ,att29 aud_att29
07:37:42  34  ,att30 aud_att30
07:37:42  35  ,att31 aud_att31
07:37:42  36  ,att32 aud_att32
07:37:42  37  ,att33 aud_att33
07:37:42  38  ,att34 aud_att34
07:37:42  39  ,att35 aud_att35
07:37:42  40  ,att36 aud_att36
07:37:42  41  ,att37 aud_att37
07:37:42  42  FROM svm6162
07:37:42  43  /

Table created.

Elapsed: 00:00:00.17
07:37:42 SQL> 
07:37:42 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.44
07:37:43 SQL> 
07:37:43 SQL> -- rpt
07:37:43 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19395

Elapsed: 00:00:00.83
07:37:43 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     19395

Elapsed: 00:00:00.00
07:37:43 SQL> 
07:37:43 SQL> --
07:37:43 SQL> -- gbp610.sql
07:37:43 SQL> --
07:37:43 SQL> 
07:37:43 SQL> -- Creates views and tables for backtesting a forex SVM strategy
07:37:43 SQL> 
07:37:43 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.39
07:37:44 SQL> 
07:37:44 SQL> -- I created di5min here:
07:37:44 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
07:37:44 SQL> 
07:37:44 SQL> CREATE OR REPLACE VIEW svm6102 AS
07:37:44   2  SELECT
07:37:44   3  pair
07:37:44   4  ,ydate
07:37:44   5  ,prdate
07:37:44   6  ,rownum rnum -- acts as t in my time-series
07:37:44   7  ,clse
07:37:44   8  -- Derive a bunch of attributes from clse, the latest price:
07:37:44   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
07:37:44  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
07:37:44  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
07:37:44  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
07:37:44  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
07:37:44  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
07:37:44  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
07:37:44  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
07:37:44  17  --
07:37:44  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
07:37:44  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
07:37:44  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
07:37:44  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
07:37:44  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
07:37:44  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
07:37:44  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
07:37:44  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
07:37:44  26  --
07:37:44  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
07:37:44  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
07:37:44  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
07:37:44  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
07:37:44  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
07:37:44  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
07:37:44  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
07:37:44  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
07:37:44  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
07:37:44  36  FROM di5min WHERE pair LIKE'%gbp%'
07:37:44  37  AND ydate > sysdate - 95
07:37:44  38  ORDER BY ydate
07:37:44  39  /

View created.

Elapsed: 00:00:00.06
07:37:44 SQL> 
07:37:44 SQL> -- rpt
07:37:44 SQL> 
07:37:44 SQL> SELECT
07:37:44   2  pair
07:37:44   3  ,COUNT(pair)
07:37:44   4  ,MIN(clse),MAX(clse)
07:37:44   5  ,MIN(avg6),MAX(avg6)
07:37:44   6  ,MIN(ydate),MAX(ydate)
07:37:44   7  FROM svm6102
07:37:44   8  GROUP BY pair
07:37:44   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
gbp_usd       19397   1.535325	   1.6295 1.53696747 1.62716986 2010-09-26 20:55:01 2010-12-29 07:30:00

Elapsed: 00:00:00.84
07:37:45 SQL> 
07:37:45 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
07:37:45 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.29
07:37:45 SQL> CREATE TABLE svm6122 COMPRESS AS
07:37:45   2  SELECT
07:37:45   3  pair
07:37:45   4  ,ydate
07:37:45   5  ,prdate
07:37:45   6  ,clse
07:37:45   7  -- g6 is important. I want to predict g6:
07:37:45   8  ,ld6 - clse g6
07:37:45   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
07:37:45  10  -- I want more attributes from the ones I derived above:
07:37:45  11  -- clse relation to moving-min
07:37:45  12  ,clse-min4  cm4
07:37:45  13  ,clse-min6  cm6
07:37:45  14  ,clse-min8  cm8
07:37:45  15  ,clse-min10 cm10
07:37:45  16  ,clse-min12 cm12
07:37:45  17  ,clse-min14 cm14
07:37:45  18  ,clse-min16 cm16
07:37:45  19  ,clse-min18 cm18
07:37:45  20  -- clse relation to moving-avg
07:37:45  21  ,clse-avg4  ca4
07:37:45  22  ,clse-avg6  ca6
07:37:45  23  ,clse-avg8  ca8
07:37:45  24  ,clse-avg10 ca10
07:37:45  25  ,clse-avg12 ca12
07:37:45  26  ,clse-avg14 ca14
07:37:45  27  ,clse-avg16 ca16
07:37:45  28  ,clse-avg18 ca18
07:37:45  29  -- clse relation to moving-max
07:37:45  30  ,clse-max4  cx4
07:37:45  31  ,clse-max6  cx6
07:37:45  32  ,clse-max8  cx8
07:37:45  33  ,clse-max10 cx10
07:37:45  34  ,clse-max12 cx12
07:37:45  35  ,clse-max14 cx14
07:37:45  36  ,clse-max16 cx16
07:37:45  37  ,clse-max18 cx18
07:37:45  38  -- Derive more attributes.
07:37:45  39  -- I want to use CORR() here to help SVM see the shape of the series.
07:37:45  40  -- But COVAR_POP is more stable:
07:37:45  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
07:37:45  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
07:37:45  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
07:37:45  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
07:37:45  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
07:37:45  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
07:37:45  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
07:37:45  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
07:37:45  49  -- Derive date related attributes:
07:37:45  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
07:37:45  51  ,0+TO_CHAR(ydate,'D')d
07:37:45  52  ,0+TO_CHAR(ydate,'W')w
07:37:45  53  -- mpm stands for minutes-past-midnight:
07:37:45  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
07:37:45  55  -- mph stands for minutes-past-hour:
07:37:45  56  ,0+TO_CHAR(ydate,'MI')mph
07:37:45  57  FROM svm6102
07:37:45  58  ORDER BY ydate
07:37:45  59  /

Table created.

Elapsed: 00:00:02.44
07:37:47 SQL> 
07:37:47 SQL> -- rpt
07:37:47 SQL> 
07:37:47 SQL> SELECT
07:37:47   2  pair
07:37:47   3  ,COUNT(pair)
07:37:47   4  ,MIN(clse),MAX(clse)
07:37:47   5  ,MIN(ydate),MAX(ydate)
07:37:47   6  FROM svm6122
07:37:47   7  GROUP BY pair
07:37:47   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
gbp_usd       19397   1.535325	   1.6295 2010-09-26 20:55:01 2010-12-29 07:30:00

Elapsed: 00:00:00.04
07:37:47 SQL> 
07:37:47 SQL> -- Prepare for derivation of NTILE based params:
07:37:47 SQL> 
07:37:47 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.32
07:37:48 SQL> CREATE TABLE svm6142 COMPRESS AS
07:37:48   2  SELECT
07:37:48   3  pair
07:37:48   4  ,ydate
07:37:48   5  ,prdate
07:37:48   6  ,clse
07:37:48   7  ,g6
07:37:48   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
07:37:48   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
07:37:48  10  ,CASE WHEN trend IS NULL THEN 1
07:37:48  11  	    WHEN trend =0      THEN 1
07:37:48  12  	    ELSE trend END trend
07:37:48  13  ,cm4
07:37:48  14  ,cm6
07:37:48  15  ,cm8
07:37:48  16  ,cm10
07:37:48  17  ,cm12
07:37:48  18  ,cm14
07:37:48  19  ,cm16
07:37:48  20  ,cm18
07:37:48  21  --
07:37:48  22  ,ca4
07:37:48  23  ,ca6
07:37:48  24  ,ca8
07:37:48  25  ,ca10
07:37:48  26  ,ca12
07:37:48  27  ,ca14
07:37:48  28  ,ca16
07:37:48  29  ,ca18
07:37:48  30  --
07:37:48  31  ,cx4
07:37:48  32  ,cx6
07:37:48  33  ,cx8
07:37:48  34  ,cx10
07:37:48  35  ,cx12
07:37:48  36  ,cx14
07:37:48  37  ,cx16
07:37:48  38  ,cx18
07:37:48  39  --
07:37:48  40  ,crr4
07:37:48  41  ,crr6
07:37:48  42  ,crr8
07:37:48  43  ,crr10
07:37:48  44  ,crr12
07:37:48  45  ,crr14
07:37:48  46  ,crr16
07:37:48  47  ,crr18
07:37:48  48  --
07:37:48  49  ,hh
07:37:48  50  ,d
07:37:48  51  ,w
07:37:48  52  ,mpm
07:37:48  53  ,mph
07:37:48  54  FROM svm6122
07:37:48  55  ORDER BY ydate
07:37:48  56  /

Table created.

Elapsed: 00:00:00.39
07:37:48 SQL> 
07:37:48 SQL> -- rpt
07:37:48 SQL> 
07:37:48 SQL> SELECT
07:37:48   2  pair
07:37:48   3  ,trend
07:37:48   4  ,gatt
07:37:48   5  ,COUNT(pair)
07:37:48   6  ,AVG(g6)
07:37:48   7  FROM svm6142
07:37:48   8  GROUP BY pair,trend,gatt
07:37:48   9  ORDER BY pair,trend,gatt
07:37:48  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6294  -.0025609
gbp_usd 	-1 up	      3520 .004238398
gbp_usd 	 1 nup	      6134 -.00269842
gbp_usd 	 1 up	      3377 .004349656
gbp_usd 	 1		72

Elapsed: 00:00:00.05
07:37:48 SQL> 
07:37:48 SQL> 
07:37:48 SQL> -- Derive NTILE based params:
07:37:48 SQL> 
07:37:48 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.13
07:37:48 SQL> CREATE TABLE svm6162 COMPRESS AS
07:37:48   2  SELECT
07:37:48   3  pair
07:37:48   4  ,ydate
07:37:48   5  ,prdate
07:37:48   6  ,clse
07:37:48   7  ,g6
07:37:48   8  ,gatt
07:37:48   9  ,gattn
07:37:48  10  ,trend
07:37:48  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
07:37:48  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
07:37:48  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
07:37:48  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
07:37:48  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
07:37:48  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
07:37:48  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
07:37:48  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
07:37:48  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
07:37:48  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
07:37:48  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
07:37:48  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
07:37:48  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
07:37:48  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
07:37:48  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
07:37:48  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
07:37:48  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
07:37:48  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
07:37:48  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
07:37:48  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
07:37:48  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
07:37:48  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
07:37:48  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
07:37:48  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
07:37:48  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
07:37:48  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
07:37:48  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
07:37:48  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
07:37:48  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
07:37:48  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
07:37:48  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
07:37:48  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
07:37:48  43  ,hh  att32
07:37:48  44  ,d   att33
07:37:48  45  ,w   att34
07:37:48  46  ,mpm att35
07:37:48  47  ,mph att36
07:37:48  48  ,trend att37
07:37:48  49  FROM svm6142
07:37:48  50  ORDER BY ydate
07:37:48  51  /

Table created.

Elapsed: 00:00:04.65
07:37:53 SQL> 
07:37:53 SQL> -- rpt
07:37:53 SQL> 
07:37:53 SQL> SELECT
07:37:53   2  pair
07:37:53   3  ,trend
07:37:53   4  ,gatt
07:37:53   5  ,COUNT(pair)
07:37:53   6  ,AVG(g6)
07:37:53   7  FROM svm6162
07:37:53   8  GROUP BY pair,trend,gatt
07:37:53   9  ORDER BY pair,trend,gatt
07:37:53  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6294  -.0025609
gbp_usd 	-1 up	      3520 .004238398
gbp_usd 	 1 nup	      6134 -.00269842
gbp_usd 	 1 up	      3377 .004349656
gbp_usd 	 1		72

Elapsed: 00:00:00.03
07:37:53 SQL> 
07:37:53 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.11
07:37:53 SQL> CREATE TABLE modsrc COMPRESS AS
07:37:53   2  SELECT
07:37:53   3  pair
07:37:53   4  ,ydate
07:37:53   5  ,prdate
07:37:53   6  ,trend
07:37:53   7  ,g6
07:37:53   8  ,gatt
07:37:53   9  ,gattn
07:37:53  10  FROM svm6162
07:37:53  11  /

Table created.

Elapsed: 00:00:00.09
07:37:53 SQL> 
07:37:53 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
07:37:53 SQL> 
07:37:53 SQL> DROP   TABLE gbp_ms610 ;

Table dropped.

Elapsed: 00:00:00.08
07:37:53 SQL> CREATE TABLE gbp_ms610 COMPRESS AS
07:37:53   2  SELECT
07:37:53   3  ydate
07:37:53   4  ,trend gbp_trend
07:37:53   5  ,g6    gbp_g6
07:37:53   6  ,gatt  gbp_gatt
07:37:53   7  ,gattn gbp_gattn
07:37:53   8  FROM modsrc
07:37:53   9  /

Table created.

Elapsed: 00:00:00.07
07:37:54 SQL> 
07:37:54 SQL> ANALYZE TABLE gbp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
07:37:54 SQL> 
07:37:54 SQL> -- I need a copy of the attributes:
07:37:54 SQL> 
07:37:54 SQL> 
07:37:54 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.04
07:37:54 SQL> CREATE TABLE gbp_att COMPRESS AS
07:37:54   2  SELECT
07:37:54   3  ydate
07:37:54   4  ,att00 gbp_att00
07:37:54   5  ,att01 gbp_att01
07:37:54   6  ,att02 gbp_att02
07:37:54   7  ,att03 gbp_att03
07:37:54   8  ,att04 gbp_att04
07:37:54   9  ,att05 gbp_att05
07:37:54  10  ,att06 gbp_att06
07:37:54  11  ,att07 gbp_att07
07:37:54  12  ,att08 gbp_att08
07:37:54  13  ,att09 gbp_att09
07:37:54  14  ,att10 gbp_att10
07:37:54  15  ,att11 gbp_att11
07:37:54  16  ,att12 gbp_att12
07:37:54  17  ,att13 gbp_att13
07:37:54  18  ,att14 gbp_att14
07:37:54  19  ,att15 gbp_att15
07:37:54  20  ,att16 gbp_att16
07:37:54  21  ,att17 gbp_att17
07:37:54  22  ,att18 gbp_att18
07:37:54  23  ,att19 gbp_att19
07:37:54  24  ,att20 gbp_att20
07:37:54  25  ,att21 gbp_att21
07:37:54  26  ,att22 gbp_att22
07:37:54  27  ,att23 gbp_att23
07:37:54  28  ,att24 gbp_att24
07:37:54  29  ,att25 gbp_att25
07:37:54  30  ,att26 gbp_att26
07:37:54  31  ,att27 gbp_att27
07:37:54  32  ,att28 gbp_att28
07:37:54  33  ,att29 gbp_att29
07:37:54  34  ,att30 gbp_att30
07:37:54  35  ,att31 gbp_att31
07:37:54  36  ,att32 gbp_att32
07:37:54  37  ,att33 gbp_att33
07:37:54  38  ,att34 gbp_att34
07:37:54  39  ,att35 gbp_att35
07:37:54  40  ,att36 gbp_att36
07:37:54  41  ,att37 gbp_att37
07:37:54  42  FROM svm6162
07:37:54  43  /

Table created.

Elapsed: 00:00:00.15
07:37:54 SQL> 
07:37:54 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.44
07:37:54 SQL> 
07:37:54 SQL> -- rpt
07:37:54 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19397

Elapsed: 00:00:00.82
07:37:55 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     19397

Elapsed: 00:00:00.00
07:37:55 SQL> 
07:37:55 SQL> --
07:37:55 SQL> -- jpy610.sql
07:37:55 SQL> --
07:37:55 SQL> 
07:37:55 SQL> -- Creates views and tables for backtesting a forex SVM strategy
07:37:55 SQL> 
07:37:55 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.36
07:37:56 SQL> 
07:37:56 SQL> -- I created di5min here:
07:37:56 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
07:37:56 SQL> 
07:37:56 SQL> CREATE OR REPLACE VIEW svm6102 AS
07:37:56   2  SELECT
07:37:56   3  pair
07:37:56   4  ,ydate
07:37:56   5  ,prdate
07:37:56   6  ,rownum rnum -- acts as t in my time-series
07:37:56   7  ,clse
07:37:56   8  -- Derive a bunch of attributes from clse, the latest price:
07:37:56   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
07:37:56  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
07:37:56  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
07:37:56  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
07:37:56  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
07:37:56  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
07:37:56  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
07:37:56  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
07:37:56  17  --
07:37:56  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
07:37:56  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
07:37:56  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
07:37:56  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
07:37:56  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
07:37:56  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
07:37:56  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
07:37:56  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
07:37:56  26  --
07:37:56  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
07:37:56  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
07:37:56  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
07:37:56  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
07:37:56  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
07:37:56  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
07:37:56  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
07:37:56  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
07:37:56  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
07:37:56  36  FROM di5min WHERE pair LIKE'%jpy%'
07:37:56  37  AND ydate > sysdate - 95
07:37:56  38  ORDER BY ydate
07:37:56  39  /

View created.

Elapsed: 00:00:00.04
07:37:56 SQL> 
07:37:56 SQL> -- rpt
07:37:56 SQL> 
07:37:56 SQL> SELECT
07:37:56   2  pair
07:37:56   3  ,COUNT(pair)
07:37:56   4  ,MIN(clse),MAX(clse)
07:37:56   5  ,MIN(avg6),MAX(avg6)
07:37:56   6  ,MIN(ydate),MAX(ydate)
07:37:56   7  FROM svm6102
07:37:56   8  GROUP BY pair
07:37:56   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_jpy       19395	 80.25	   84.485 80.3595205 84.3105479 2010-09-26 20:55:01 2010-12-29 07:35:00

Elapsed: 00:00:00.88
07:37:56 SQL> 
07:37:56 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
07:37:56 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.23
07:37:57 SQL> CREATE TABLE svm6122 COMPRESS AS
07:37:57   2  SELECT
07:37:57   3  pair
07:37:57   4  ,ydate
07:37:57   5  ,prdate
07:37:57   6  ,clse
07:37:57   7  -- g6 is important. I want to predict g6:
07:37:57   8  ,ld6 - clse g6
07:37:57   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
07:37:57  10  -- I want more attributes from the ones I derived above:
07:37:57  11  -- clse relation to moving-min
07:37:57  12  ,clse-min4  cm4
07:37:57  13  ,clse-min6  cm6
07:37:57  14  ,clse-min8  cm8
07:37:57  15  ,clse-min10 cm10
07:37:57  16  ,clse-min12 cm12
07:37:57  17  ,clse-min14 cm14
07:37:57  18  ,clse-min16 cm16
07:37:57  19  ,clse-min18 cm18
07:37:57  20  -- clse relation to moving-avg
07:37:57  21  ,clse-avg4  ca4
07:37:57  22  ,clse-avg6  ca6
07:37:57  23  ,clse-avg8  ca8
07:37:57  24  ,clse-avg10 ca10
07:37:57  25  ,clse-avg12 ca12
07:37:57  26  ,clse-avg14 ca14
07:37:57  27  ,clse-avg16 ca16
07:37:57  28  ,clse-avg18 ca18
07:37:57  29  -- clse relation to moving-max
07:37:57  30  ,clse-max4  cx4
07:37:57  31  ,clse-max6  cx6
07:37:57  32  ,clse-max8  cx8
07:37:57  33  ,clse-max10 cx10
07:37:57  34  ,clse-max12 cx12
07:37:57  35  ,clse-max14 cx14
07:37:57  36  ,clse-max16 cx16
07:37:57  37  ,clse-max18 cx18
07:37:57  38  -- Derive more attributes.
07:37:57  39  -- I want to use CORR() here to help SVM see the shape of the series.
07:37:57  40  -- But COVAR_POP is more stable:
07:37:57  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
07:37:57  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
07:37:57  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
07:37:57  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
07:37:57  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
07:37:57  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
07:37:57  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
07:37:57  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
07:37:57  49  -- Derive date related attributes:
07:37:57  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
07:37:57  51  ,0+TO_CHAR(ydate,'D')d
07:37:57  52  ,0+TO_CHAR(ydate,'W')w
07:37:57  53  -- mpm stands for minutes-past-midnight:
07:37:57  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
07:37:57  55  -- mph stands for minutes-past-hour:
07:37:57  56  ,0+TO_CHAR(ydate,'MI')mph
07:37:57  57  FROM svm6102
07:37:57  58  ORDER BY ydate
07:37:57  59  /

Table created.

Elapsed: 00:00:02.10
07:37:59 SQL> 
07:37:59 SQL> -- rpt
07:37:59 SQL> 
07:37:59 SQL> SELECT
07:37:59   2  pair
07:37:59   3  ,COUNT(pair)
07:37:59   4  ,MIN(clse),MAX(clse)
07:37:59   5  ,MIN(ydate),MAX(ydate)
07:37:59   6  FROM svm6122
07:37:59   7  GROUP BY pair
07:37:59   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_jpy       19395	 80.25	   84.485 2010-09-26 20:55:01 2010-12-29 07:35:00

Elapsed: 00:00:00.05
07:37:59 SQL> 
07:37:59 SQL> -- Prepare for derivation of NTILE based params:
07:37:59 SQL> 
07:37:59 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.25
07:37:59 SQL> CREATE TABLE svm6142 COMPRESS AS
07:37:59   2  SELECT
07:37:59   3  pair
07:37:59   4  ,ydate
07:37:59   5  ,prdate
07:37:59   6  ,clse
07:37:59   7  ,g6
07:37:59   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
07:37:59   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
07:37:59  10  ,CASE WHEN trend IS NULL THEN 1
07:37:59  11  	    WHEN trend =0      THEN 1
07:37:59  12  	    ELSE trend END trend
07:37:59  13  ,cm4
07:37:59  14  ,cm6
07:37:59  15  ,cm8
07:37:59  16  ,cm10
07:37:59  17  ,cm12
07:37:59  18  ,cm14
07:37:59  19  ,cm16
07:37:59  20  ,cm18
07:37:59  21  --
07:37:59  22  ,ca4
07:37:59  23  ,ca6
07:37:59  24  ,ca8
07:37:59  25  ,ca10
07:37:59  26  ,ca12
07:37:59  27  ,ca14
07:37:59  28  ,ca16
07:37:59  29  ,ca18
07:37:59  30  --
07:37:59  31  ,cx4
07:37:59  32  ,cx6
07:37:59  33  ,cx8
07:37:59  34  ,cx10
07:37:59  35  ,cx12
07:37:59  36  ,cx14
07:37:59  37  ,cx16
07:37:59  38  ,cx18
07:37:59  39  --
07:37:59  40  ,crr4
07:37:59  41  ,crr6
07:37:59  42  ,crr8
07:37:59  43  ,crr10
07:37:59  44  ,crr12
07:37:59  45  ,crr14
07:37:59  46  ,crr16
07:37:59  47  ,crr18
07:37:59  48  --
07:37:59  49  ,hh
07:37:59  50  ,d
07:37:59  51  ,w
07:37:59  52  ,mpm
07:37:59  53  ,mph
07:37:59  54  FROM svm6122
07:37:59  55  ORDER BY ydate
07:37:59  56  /

Table created.

Elapsed: 00:00:00.35
07:37:59 SQL> 
07:37:59 SQL> -- rpt
07:37:59 SQL> 
07:37:59 SQL> SELECT
07:37:59   2  pair
07:37:59   3  ,trend
07:37:59   4  ,gatt
07:37:59   5  ,COUNT(pair)
07:37:59   6  ,AVG(g6)
07:37:59   7  FROM svm6142
07:37:59   8  GROUP BY pair,trend,gatt
07:37:59   9  ORDER BY pair,trend,gatt
07:37:59  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5104 -.16257822
usd_jpy 	-1 up	      4954 .163304745
usd_jpy 	-1		72
usd_jpy 	 1 nup	      5172 -.15469916
usd_jpy 	 1 up	      4093 .165084061

Elapsed: 00:00:00.04
07:37:59 SQL> 
07:37:59 SQL> 
07:37:59 SQL> -- Derive NTILE based params:
07:37:59 SQL> 
07:37:59 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.13
07:38:00 SQL> CREATE TABLE svm6162 COMPRESS AS
07:38:00   2  SELECT
07:38:00   3  pair
07:38:00   4  ,ydate
07:38:00   5  ,prdate
07:38:00   6  ,clse
07:38:00   7  ,g6
07:38:00   8  ,gatt
07:38:00   9  ,gattn
07:38:00  10  ,trend
07:38:00  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
07:38:00  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
07:38:00  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
07:38:00  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
07:38:00  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
07:38:00  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
07:38:00  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
07:38:00  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
07:38:00  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
07:38:00  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
07:38:00  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
07:38:00  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
07:38:00  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
07:38:00  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
07:38:00  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
07:38:00  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
07:38:00  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
07:38:00  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
07:38:00  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
07:38:00  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
07:38:00  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
07:38:00  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
07:38:00  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
07:38:00  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
07:38:00  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
07:38:00  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
07:38:00  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
07:38:00  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
07:38:00  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
07:38:00  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
07:38:00  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
07:38:00  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
07:38:00  43  ,hh  att32
07:38:00  44  ,d   att33
07:38:00  45  ,w   att34
07:38:00  46  ,mpm att35
07:38:00  47  ,mph att36
07:38:00  48  ,trend att37
07:38:00  49  FROM svm6142
07:38:00  50  ORDER BY ydate
07:38:00  51  /

Table created.

Elapsed: 00:00:04.64
07:38:04 SQL> 
07:38:04 SQL> -- rpt
07:38:04 SQL> 
07:38:04 SQL> SELECT
07:38:04   2  pair
07:38:04   3  ,trend
07:38:04   4  ,gatt
07:38:04   5  ,COUNT(pair)
07:38:04   6  ,AVG(g6)
07:38:04   7  FROM svm6162
07:38:04   8  GROUP BY pair,trend,gatt
07:38:04   9  ORDER BY pair,trend,gatt
07:38:04  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5104 -.16257822
usd_jpy 	-1 up	      4954 .163304745
usd_jpy 	-1		72
usd_jpy 	 1 nup	      5172 -.15469916
usd_jpy 	 1 up	      4093 .165084061

Elapsed: 00:00:00.03
07:38:04 SQL> 
07:38:04 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.16
07:38:04 SQL> CREATE TABLE modsrc COMPRESS AS
07:38:04   2  SELECT
07:38:04   3  pair
07:38:04   4  ,ydate
07:38:04   5  ,prdate
07:38:04   6  ,trend
07:38:04   7  ,g6
07:38:04   8  ,gatt
07:38:04   9  ,gattn
07:38:04  10  FROM svm6162
07:38:04  11  /

Table created.

Elapsed: 00:00:00.08
07:38:05 SQL> 
07:38:05 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
07:38:05 SQL> 
07:38:05 SQL> DROP   TABLE jpy_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
07:38:05 SQL> CREATE TABLE jpy_ms610 COMPRESS AS
07:38:05   2  SELECT
07:38:05   3  ydate
07:38:05   4  ,trend jpy_trend
07:38:05   5  ,g6    jpy_g6
07:38:05   6  ,gatt  jpy_gatt
07:38:05   7  ,gattn jpy_gattn
07:38:05   8  FROM modsrc
07:38:05   9  /

Table created.

Elapsed: 00:00:00.07
07:38:05 SQL> 
07:38:05 SQL> ANALYZE TABLE jpy_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
07:38:05 SQL> 
07:38:05 SQL> -- I need a copy of the attributes:
07:38:05 SQL> 
07:38:05 SQL> 
07:38:05 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.04
07:38:05 SQL> CREATE TABLE jpy_att COMPRESS AS
07:38:05   2  SELECT
07:38:05   3  ydate
07:38:05   4  ,att00 jpy_att00
07:38:05   5  ,att01 jpy_att01
07:38:05   6  ,att02 jpy_att02
07:38:05   7  ,att03 jpy_att03
07:38:05   8  ,att04 jpy_att04
07:38:05   9  ,att05 jpy_att05
07:38:05  10  ,att06 jpy_att06
07:38:05  11  ,att07 jpy_att07
07:38:05  12  ,att08 jpy_att08
07:38:05  13  ,att09 jpy_att09
07:38:05  14  ,att10 jpy_att10
07:38:05  15  ,att11 jpy_att11
07:38:05  16  ,att12 jpy_att12
07:38:05  17  ,att13 jpy_att13
07:38:05  18  ,att14 jpy_att14
07:38:05  19  ,att15 jpy_att15
07:38:05  20  ,att16 jpy_att16
07:38:05  21  ,att17 jpy_att17
07:38:05  22  ,att18 jpy_att18
07:38:05  23  ,att19 jpy_att19
07:38:05  24  ,att20 jpy_att20
07:38:05  25  ,att21 jpy_att21
07:38:05  26  ,att22 jpy_att22
07:38:05  27  ,att23 jpy_att23
07:38:05  28  ,att24 jpy_att24
07:38:05  29  ,att25 jpy_att25
07:38:05  30  ,att26 jpy_att26
07:38:05  31  ,att27 jpy_att27
07:38:05  32  ,att28 jpy_att28
07:38:05  33  ,att29 jpy_att29
07:38:05  34  ,att30 jpy_att30
07:38:05  35  ,att31 jpy_att31
07:38:05  36  ,att32 jpy_att32
07:38:05  37  ,att33 jpy_att33
07:38:05  38  ,att34 jpy_att34
07:38:05  39  ,att35 jpy_att35
07:38:05  40  ,att36 jpy_att36
07:38:05  41  ,att37 jpy_att37
07:38:05  42  FROM svm6162
07:38:05  43  /

Table created.

Elapsed: 00:00:00.16
07:38:05 SQL> 
07:38:05 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.44
07:38:06 SQL> 
07:38:06 SQL> -- rpt
07:38:06 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19395

Elapsed: 00:00:00.87
07:38:07 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     19395

Elapsed: 00:00:00.00
07:38:07 SQL> 
07:38:07 SQL> --
07:38:07 SQL> -- cad610.sql
07:38:07 SQL> --
07:38:07 SQL> 
07:38:07 SQL> -- Creates views and tables for backtesting a forex SVM strategy
07:38:07 SQL> 
07:38:07 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.40
07:38:07 SQL> 
07:38:07 SQL> -- I created di5min here:
07:38:07 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
07:38:07 SQL> 
07:38:07 SQL> CREATE OR REPLACE VIEW svm6102 AS
07:38:07   2  SELECT
07:38:07   3  pair
07:38:07   4  ,ydate
07:38:07   5  ,prdate
07:38:07   6  ,rownum rnum -- acts as t in my time-series
07:38:07   7  ,clse
07:38:07   8  -- Derive a bunch of attributes from clse, the latest price:
07:38:07   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
07:38:07  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
07:38:07  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
07:38:07  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
07:38:07  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
07:38:07  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
07:38:07  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
07:38:07  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
07:38:07  17  --
07:38:07  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
07:38:07  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
07:38:07  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
07:38:07  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
07:38:07  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
07:38:07  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
07:38:07  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
07:38:07  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
07:38:07  26  --
07:38:07  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
07:38:07  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
07:38:07  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
07:38:07  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
07:38:07  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
07:38:07  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
07:38:07  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
07:38:07  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
07:38:07  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
07:38:07  36  FROM di5min WHERE pair LIKE'%cad%'
07:38:07  37  AND ydate > sysdate - 95
07:38:07  38  ORDER BY ydate
07:38:07  39  /

View created.

Elapsed: 00:00:00.04
07:38:07 SQL> 
07:38:07 SQL> -- rpt
07:38:07 SQL> 
07:38:07 SQL> SELECT
07:38:07   2  pair
07:38:07   3  ,COUNT(pair)
07:38:07   4  ,MIN(clse),MAX(clse)
07:38:07   5  ,MIN(avg6),MAX(avg6)
07:38:07   6  ,MIN(ydate),MAX(ydate)
07:38:07   7  FROM svm6102
07:38:07   8  GROUP BY pair
07:38:07   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_cad       19394    .997975	    1.036 .999321575 1.03336849 2010-09-26 20:55:01 2010-12-29 07:30:00

Elapsed: 00:00:00.81
07:38:08 SQL> 
07:38:08 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
07:38:08 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.18
07:38:08 SQL> CREATE TABLE svm6122 COMPRESS AS
07:38:08   2  SELECT
07:38:08   3  pair
07:38:08   4  ,ydate
07:38:08   5  ,prdate
07:38:08   6  ,clse
07:38:08   7  -- g6 is important. I want to predict g6:
07:38:08   8  ,ld6 - clse g6
07:38:08   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
07:38:08  10  -- I want more attributes from the ones I derived above:
07:38:08  11  -- clse relation to moving-min
07:38:08  12  ,clse-min4  cm4
07:38:08  13  ,clse-min6  cm6
07:38:08  14  ,clse-min8  cm8
07:38:08  15  ,clse-min10 cm10
07:38:08  16  ,clse-min12 cm12
07:38:08  17  ,clse-min14 cm14
07:38:08  18  ,clse-min16 cm16
07:38:08  19  ,clse-min18 cm18
07:38:08  20  -- clse relation to moving-avg
07:38:08  21  ,clse-avg4  ca4
07:38:08  22  ,clse-avg6  ca6
07:38:08  23  ,clse-avg8  ca8
07:38:08  24  ,clse-avg10 ca10
07:38:08  25  ,clse-avg12 ca12
07:38:08  26  ,clse-avg14 ca14
07:38:08  27  ,clse-avg16 ca16
07:38:08  28  ,clse-avg18 ca18
07:38:08  29  -- clse relation to moving-max
07:38:08  30  ,clse-max4  cx4
07:38:08  31  ,clse-max6  cx6
07:38:08  32  ,clse-max8  cx8
07:38:08  33  ,clse-max10 cx10
07:38:08  34  ,clse-max12 cx12
07:38:08  35  ,clse-max14 cx14
07:38:08  36  ,clse-max16 cx16
07:38:08  37  ,clse-max18 cx18
07:38:08  38  -- Derive more attributes.
07:38:08  39  -- I want to use CORR() here to help SVM see the shape of the series.
07:38:08  40  -- But COVAR_POP is more stable:
07:38:08  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
07:38:08  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
07:38:08  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
07:38:08  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
07:38:08  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
07:38:08  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
07:38:08  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
07:38:08  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
07:38:08  49  -- Derive date related attributes:
07:38:08  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
07:38:08  51  ,0+TO_CHAR(ydate,'D')d
07:38:08  52  ,0+TO_CHAR(ydate,'W')w
07:38:08  53  -- mpm stands for minutes-past-midnight:
07:38:08  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
07:38:08  55  -- mph stands for minutes-past-hour:
07:38:08  56  ,0+TO_CHAR(ydate,'MI')mph
07:38:08  57  FROM svm6102
07:38:08  58  ORDER BY ydate
07:38:08  59  /

Table created.

Elapsed: 00:00:02.03
07:38:10 SQL> 
07:38:10 SQL> -- rpt
07:38:10 SQL> 
07:38:10 SQL> SELECT
07:38:10   2  pair
07:38:10   3  ,COUNT(pair)
07:38:10   4  ,MIN(clse),MAX(clse)
07:38:10   5  ,MIN(ydate),MAX(ydate)
07:38:10   6  FROM svm6122
07:38:10   7  GROUP BY pair
07:38:10   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_cad       19394    .997975	    1.036 2010-09-26 20:55:01 2010-12-29 07:30:00

Elapsed: 00:00:00.04
07:38:10 SQL> 
07:38:10 SQL> -- Prepare for derivation of NTILE based params:
07:38:10 SQL> 
07:38:10 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.22
07:38:10 SQL> CREATE TABLE svm6142 COMPRESS AS
07:38:10   2  SELECT
07:38:10   3  pair
07:38:10   4  ,ydate
07:38:10   5  ,prdate
07:38:10   6  ,clse
07:38:10   7  ,g6
07:38:10   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
07:38:10   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
07:38:10  10  ,CASE WHEN trend IS NULL THEN 1
07:38:10  11  	    WHEN trend =0      THEN 1
07:38:10  12  	    ELSE trend END trend
07:38:10  13  ,cm4
07:38:10  14  ,cm6
07:38:10  15  ,cm8
07:38:10  16  ,cm10
07:38:10  17  ,cm12
07:38:10  18  ,cm14
07:38:10  19  ,cm16
07:38:10  20  ,cm18
07:38:10  21  --
07:38:10  22  ,ca4
07:38:10  23  ,ca6
07:38:10  24  ,ca8
07:38:10  25  ,ca10
07:38:10  26  ,ca12
07:38:10  27  ,ca14
07:38:10  28  ,ca16
07:38:10  29  ,ca18
07:38:10  30  --
07:38:10  31  ,cx4
07:38:10  32  ,cx6
07:38:10  33  ,cx8
07:38:10  34  ,cx10
07:38:10  35  ,cx12
07:38:10  36  ,cx14
07:38:10  37  ,cx16
07:38:10  38  ,cx18
07:38:10  39  --
07:38:10  40  ,crr4
07:38:10  41  ,crr6
07:38:10  42  ,crr8
07:38:10  43  ,crr10
07:38:10  44  ,crr12
07:38:10  45  ,crr14
07:38:10  46  ,crr16
07:38:10  47  ,crr18
07:38:10  48  --
07:38:10  49  ,hh
07:38:10  50  ,d
07:38:10  51  ,w
07:38:10  52  ,mpm
07:38:10  53  ,mph
07:38:10  54  FROM svm6122
07:38:10  55  ORDER BY ydate
07:38:10  56  /

Table created.

Elapsed: 00:00:00.37
07:38:11 SQL> 
07:38:11 SQL> -- rpt
07:38:11 SQL> 
07:38:11 SQL> SELECT
07:38:11   2  pair
07:38:11   3  ,trend
07:38:11   4  ,gatt
07:38:11   5  ,COUNT(pair)
07:38:11   6  ,AVG(g6)
07:38:11   7  FROM svm6142
07:38:11   8  GROUP BY pair,trend,gatt
07:38:11   9  ORDER BY pair,trend,gatt
07:38:11  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7141 -.00133516
usd_cad 	-1 up	      3081  .00310749
usd_cad 	-1		49
usd_cad 	 1 nup	      6611 -.00162465
usd_cad 	 1 up	      2489 .003597467
usd_cad 	 1		23

6 rows selected.

Elapsed: 00:00:00.04
07:38:11 SQL> 
07:38:11 SQL> 
07:38:11 SQL> -- Derive NTILE based params:
07:38:11 SQL> 
07:38:11 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.13
07:38:11 SQL> CREATE TABLE svm6162 COMPRESS AS
07:38:11   2  SELECT
07:38:11   3  pair
07:38:11   4  ,ydate
07:38:11   5  ,prdate
07:38:11   6  ,clse
07:38:11   7  ,g6
07:38:11   8  ,gatt
07:38:11   9  ,gattn
07:38:11  10  ,trend
07:38:11  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
07:38:11  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
07:38:11  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
07:38:11  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
07:38:11  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
07:38:11  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
07:38:11  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
07:38:11  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
07:38:11  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
07:38:11  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
07:38:11  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
07:38:11  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
07:38:11  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
07:38:11  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
07:38:11  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
07:38:11  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
07:38:11  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
07:38:11  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
07:38:11  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
07:38:11  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
07:38:11  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
07:38:11  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
07:38:11  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
07:38:11  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
07:38:11  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
07:38:11  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
07:38:11  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
07:38:11  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
07:38:11  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
07:38:11  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
07:38:11  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
07:38:11  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
07:38:11  43  ,hh  att32
07:38:11  44  ,d   att33
07:38:11  45  ,w   att34
07:38:11  46  ,mpm att35
07:38:11  47  ,mph att36
07:38:11  48  ,trend att37
07:38:11  49  FROM svm6142
07:38:11  50  ORDER BY ydate
07:38:11  51  /

Table created.

Elapsed: 00:00:04.78
07:38:16 SQL> 
07:38:16 SQL> -- rpt
07:38:16 SQL> 
07:38:16 SQL> SELECT
07:38:16   2  pair
07:38:16   3  ,trend
07:38:16   4  ,gatt
07:38:16   5  ,COUNT(pair)
07:38:16   6  ,AVG(g6)
07:38:16   7  FROM svm6162
07:38:16   8  GROUP BY pair,trend,gatt
07:38:16   9  ORDER BY pair,trend,gatt
07:38:16  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7141 -.00133516
usd_cad 	-1 up	      3081  .00310749
usd_cad 	-1		49
usd_cad 	 1 nup	      6611 -.00162465
usd_cad 	 1 up	      2489 .003597467
usd_cad 	 1		23

6 rows selected.

Elapsed: 00:00:00.03
07:38:16 SQL> 
07:38:16 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
07:38:16 SQL> CREATE TABLE modsrc COMPRESS AS
07:38:16   2  SELECT
07:38:16   3  pair
07:38:16   4  ,ydate
07:38:16   5  ,prdate
07:38:16   6  ,trend
07:38:16   7  ,g6
07:38:16   8  ,gatt
07:38:16   9  ,gattn
07:38:16  10  FROM svm6162
07:38:16  11  /

Table created.

Elapsed: 00:00:00.10
07:38:16 SQL> 
07:38:16 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.23
07:38:16 SQL> 
07:38:16 SQL> DROP   TABLE cad_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
07:38:16 SQL> CREATE TABLE cad_ms610 COMPRESS AS
07:38:16   2  SELECT
07:38:16   3  ydate
07:38:16   4  ,trend cad_trend
07:38:16   5  ,g6    cad_g6
07:38:16   6  ,gatt  cad_gatt
07:38:16   7  ,gattn cad_gattn
07:38:16   8  FROM modsrc
07:38:16   9  /

Table created.

Elapsed: 00:00:00.07
07:38:16 SQL> 
07:38:16 SQL> ANALYZE TABLE cad_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
07:38:16 SQL> 
07:38:16 SQL> -- I need a copy of the attributes:
07:38:16 SQL> 
07:38:16 SQL> 
07:38:16 SQL> DROP   TABLE cad_att;

Table dropped.

Elapsed: 00:00:00.14
07:38:16 SQL> CREATE TABLE cad_att COMPRESS AS
07:38:16   2  SELECT
07:38:16   3  ydate
07:38:16   4  ,att00 cad_att00
07:38:16   5  ,att01 cad_att01
07:38:16   6  ,att02 cad_att02
07:38:16   7  ,att03 cad_att03
07:38:16   8  ,att04 cad_att04
07:38:16   9  ,att05 cad_att05
07:38:16  10  ,att06 cad_att06
07:38:16  11  ,att07 cad_att07
07:38:16  12  ,att08 cad_att08
07:38:16  13  ,att09 cad_att09
07:38:16  14  ,att10 cad_att10
07:38:16  15  ,att11 cad_att11
07:38:16  16  ,att12 cad_att12
07:38:16  17  ,att13 cad_att13
07:38:16  18  ,att14 cad_att14
07:38:16  19  ,att15 cad_att15
07:38:16  20  ,att16 cad_att16
07:38:16  21  ,att17 cad_att17
07:38:16  22  ,att18 cad_att18
07:38:16  23  ,att19 cad_att19
07:38:16  24  ,att20 cad_att20
07:38:16  25  ,att21 cad_att21
07:38:16  26  ,att22 cad_att22
07:38:16  27  ,att23 cad_att23
07:38:16  28  ,att24 cad_att24
07:38:16  29  ,att25 cad_att25
07:38:16  30  ,att26 cad_att26
07:38:16  31  ,att27 cad_att27
07:38:16  32  ,att28 cad_att28
07:38:16  33  ,att29 cad_att29
07:38:16  34  ,att30 cad_att30
07:38:16  35  ,att31 cad_att31
07:38:16  36  ,att32 cad_att32
07:38:16  37  ,att33 cad_att33
07:38:16  38  ,att34 cad_att34
07:38:16  39  ,att35 cad_att35
07:38:16  40  ,att36 cad_att36
07:38:16  41  ,att37 cad_att37
07:38:16  42  FROM svm6162
07:38:16  43  /

Table created.

Elapsed: 00:00:00.62
07:38:17 SQL> 
07:38:17 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
07:38:18 SQL> 
07:38:18 SQL> -- rpt
07:38:18 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19394

Elapsed: 00:00:00.82
07:38:18 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
     19394

Elapsed: 00:00:00.00
07:38:18 SQL> 
07:38:18 SQL> --
07:38:18 SQL> -- chf610.sql
07:38:18 SQL> --
07:38:18 SQL> 
07:38:18 SQL> -- Creates views and tables for backtesting a forex SVM strategy
07:38:18 SQL> 
07:38:18 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.44
07:38:19 SQL> 
07:38:19 SQL> -- I created di5min here:
07:38:19 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
07:38:19 SQL> 
07:38:19 SQL> CREATE OR REPLACE VIEW svm6102 AS
07:38:19   2  SELECT
07:38:19   3  pair
07:38:19   4  ,ydate
07:38:19   5  ,prdate
07:38:19   6  ,rownum rnum -- acts as t in my time-series
07:38:19   7  ,clse
07:38:19   8  -- Derive a bunch of attributes from clse, the latest price:
07:38:19   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
07:38:19  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
07:38:19  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
07:38:19  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
07:38:19  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
07:38:19  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
07:38:19  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
07:38:19  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
07:38:19  17  --
07:38:19  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
07:38:19  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
07:38:19  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
07:38:19  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
07:38:19  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
07:38:19  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
07:38:19  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
07:38:19  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
07:38:19  26  --
07:38:19  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
07:38:19  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
07:38:19  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
07:38:19  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
07:38:19  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
07:38:19  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
07:38:19  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
07:38:19  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
07:38:19  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
07:38:19  36  FROM di5min WHERE pair LIKE'%chf%'
07:38:19  37  AND ydate > sysdate - 95
07:38:19  38  ORDER BY ydate
07:38:19  39  /

View created.

Elapsed: 00:00:00.04
07:38:19 SQL> 
07:38:19 SQL> -- rpt
07:38:19 SQL> 
07:38:19 SQL> SELECT
07:38:19   2  pair
07:38:19   3  ,COUNT(pair)
07:38:19   4  ,MIN(clse),MAX(clse)
07:38:19   5  ,MIN(avg6),MAX(avg6)
07:38:19   6  ,MIN(ydate),MAX(ydate)
07:38:19   7  FROM svm6102
07:38:19   8  GROUP BY pair
07:38:19   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_chf       19397	.94525	  1.00635 .947785616 1.00498151 2010-09-26 20:55:01 2010-12-29 07:30:00

Elapsed: 00:00:00.84
07:38:20 SQL> 
07:38:20 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
07:38:20 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.19
07:38:20 SQL> CREATE TABLE svm6122 COMPRESS AS
07:38:20   2  SELECT
07:38:20   3  pair
07:38:20   4  ,ydate
07:38:20   5  ,prdate
07:38:20   6  ,clse
07:38:20   7  -- g6 is important. I want to predict g6:
07:38:20   8  ,ld6 - clse g6
07:38:20   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
07:38:20  10  -- I want more attributes from the ones I derived above:
07:38:20  11  -- clse relation to moving-min
07:38:20  12  ,clse-min4  cm4
07:38:20  13  ,clse-min6  cm6
07:38:20  14  ,clse-min8  cm8
07:38:20  15  ,clse-min10 cm10
07:38:20  16  ,clse-min12 cm12
07:38:20  17  ,clse-min14 cm14
07:38:20  18  ,clse-min16 cm16
07:38:20  19  ,clse-min18 cm18
07:38:20  20  -- clse relation to moving-avg
07:38:20  21  ,clse-avg4  ca4
07:38:20  22  ,clse-avg6  ca6
07:38:20  23  ,clse-avg8  ca8
07:38:20  24  ,clse-avg10 ca10
07:38:20  25  ,clse-avg12 ca12
07:38:20  26  ,clse-avg14 ca14
07:38:20  27  ,clse-avg16 ca16
07:38:20  28  ,clse-avg18 ca18
07:38:20  29  -- clse relation to moving-max
07:38:20  30  ,clse-max4  cx4
07:38:20  31  ,clse-max6  cx6
07:38:20  32  ,clse-max8  cx8
07:38:20  33  ,clse-max10 cx10
07:38:20  34  ,clse-max12 cx12
07:38:20  35  ,clse-max14 cx14
07:38:20  36  ,clse-max16 cx16
07:38:20  37  ,clse-max18 cx18
07:38:20  38  -- Derive more attributes.
07:38:20  39  -- I want to use CORR() here to help SVM see the shape of the series.
07:38:20  40  -- But COVAR_POP is more stable:
07:38:20  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
07:38:20  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
07:38:20  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
07:38:20  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
07:38:20  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
07:38:20  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
07:38:20  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
07:38:20  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
07:38:20  49  -- Derive date related attributes:
07:38:20  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
07:38:20  51  ,0+TO_CHAR(ydate,'D')d
07:38:20  52  ,0+TO_CHAR(ydate,'W')w
07:38:20  53  -- mpm stands for minutes-past-midnight:
07:38:20  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
07:38:20  55  -- mph stands for minutes-past-hour:
07:38:20  56  ,0+TO_CHAR(ydate,'MI')mph
07:38:20  57  FROM svm6102
07:38:20  58  ORDER BY ydate
07:38:20  59  /

Table created.

Elapsed: 00:00:02.07
07:38:22 SQL> 
07:38:22 SQL> -- rpt
07:38:22 SQL> 
07:38:22 SQL> SELECT
07:38:22   2  pair
07:38:22   3  ,COUNT(pair)
07:38:22   4  ,MIN(clse),MAX(clse)
07:38:22   5  ,MIN(ydate),MAX(ydate)
07:38:22   6  FROM svm6122
07:38:22   7  GROUP BY pair
07:38:22   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_chf       19397	.94525	  1.00635 2010-09-26 20:55:01 2010-12-29 07:30:00

Elapsed: 00:00:00.04
07:38:22 SQL> 
07:38:22 SQL> -- Prepare for derivation of NTILE based params:
07:38:22 SQL> 
07:38:22 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.21
07:38:22 SQL> CREATE TABLE svm6142 COMPRESS AS
07:38:22   2  SELECT
07:38:22   3  pair
07:38:22   4  ,ydate
07:38:22   5  ,prdate
07:38:22   6  ,clse
07:38:22   7  ,g6
07:38:22   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
07:38:22   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
07:38:22  10  ,CASE WHEN trend IS NULL THEN 1
07:38:22  11  	    WHEN trend =0      THEN 1
07:38:22  12  	    ELSE trend END trend
07:38:22  13  ,cm4
07:38:22  14  ,cm6
07:38:22  15  ,cm8
07:38:22  16  ,cm10
07:38:22  17  ,cm12
07:38:22  18  ,cm14
07:38:22  19  ,cm16
07:38:22  20  ,cm18
07:38:22  21  --
07:38:22  22  ,ca4
07:38:22  23  ,ca6
07:38:22  24  ,ca8
07:38:22  25  ,ca10
07:38:22  26  ,ca12
07:38:22  27  ,ca14
07:38:22  28  ,ca16
07:38:22  29  ,ca18
07:38:22  30  --
07:38:22  31  ,cx4
07:38:22  32  ,cx6
07:38:22  33  ,cx8
07:38:22  34  ,cx10
07:38:22  35  ,cx12
07:38:22  36  ,cx14
07:38:22  37  ,cx16
07:38:22  38  ,cx18
07:38:22  39  --
07:38:22  40  ,crr4
07:38:22  41  ,crr6
07:38:22  42  ,crr8
07:38:22  43  ,crr10
07:38:22  44  ,crr12
07:38:22  45  ,crr14
07:38:22  46  ,crr16
07:38:22  47  ,crr18
07:38:22  48  --
07:38:22  49  ,hh
07:38:22  50  ,d
07:38:22  51  ,w
07:38:22  52  ,mpm
07:38:22  53  ,mph
07:38:22  54  FROM svm6122
07:38:22  55  ORDER BY ydate
07:38:22  56  /

Table created.

Elapsed: 00:00:00.41
07:38:23 SQL> 
07:38:23 SQL> -- rpt
07:38:23 SQL> 
07:38:23 SQL> SELECT
07:38:23   2  pair
07:38:23   3  ,trend
07:38:23   4  ,gatt
07:38:23   5  ,COUNT(pair)
07:38:23   6  ,AVG(g6)
07:38:23   7  FROM svm6142
07:38:23   8  GROUP BY pair,trend,gatt
07:38:23   9  ORDER BY pair,trend,gatt
07:38:23  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      6904  -.0019412
usd_chf 	-1 up	      3170 .003899842
usd_chf 	-1		57
usd_chf 	 1 nup	      6686 -.00161771
usd_chf 	 1 up	      2565 .003689727
usd_chf 	 1		15

6 rows selected.

Elapsed: 00:00:00.04
07:38:23 SQL> 
07:38:23 SQL> 
07:38:23 SQL> -- Derive NTILE based params:
07:38:23 SQL> 
07:38:23 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.13
07:38:23 SQL> CREATE TABLE svm6162 COMPRESS AS
07:38:23   2  SELECT
07:38:23   3  pair
07:38:23   4  ,ydate
07:38:23   5  ,prdate
07:38:23   6  ,clse
07:38:23   7  ,g6
07:38:23   8  ,gatt
07:38:23   9  ,gattn
07:38:23  10  ,trend
07:38:23  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
07:38:23  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
07:38:23  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
07:38:23  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
07:38:23  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
07:38:23  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
07:38:23  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
07:38:23  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
07:38:23  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
07:38:23  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
07:38:23  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
07:38:23  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
07:38:23  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
07:38:23  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
07:38:23  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
07:38:23  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
07:38:23  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
07:38:23  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
07:38:23  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
07:38:23  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
07:38:23  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
07:38:23  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
07:38:23  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
07:38:23  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
07:38:23  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
07:38:23  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
07:38:23  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
07:38:23  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
07:38:23  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
07:38:23  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
07:38:23  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
07:38:23  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
07:38:23  43  ,hh  att32
07:38:23  44  ,d   att33
07:38:23  45  ,w   att34
07:38:23  46  ,mpm att35
07:38:23  47  ,mph att36
07:38:23  48  ,trend att37
07:38:23  49  FROM svm6142
07:38:23  50  ORDER BY ydate
07:38:23  51  /

Table created.

Elapsed: 00:00:04.70
07:38:28 SQL> 
07:38:28 SQL> -- rpt
07:38:28 SQL> 
07:38:28 SQL> SELECT
07:38:28   2  pair
07:38:28   3  ,trend
07:38:28   4  ,gatt
07:38:28   5  ,COUNT(pair)
07:38:28   6  ,AVG(g6)
07:38:28   7  FROM svm6162
07:38:28   8  GROUP BY pair,trend,gatt
07:38:28   9  ORDER BY pair,trend,gatt
07:38:28  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      6904  -.0019412
usd_chf 	-1 up	      3170 .003899842
usd_chf 	-1		57
usd_chf 	 1 nup	      6686 -.00161771
usd_chf 	 1 up	      2565 .003689727
usd_chf 	 1		15

6 rows selected.

Elapsed: 00:00:00.03
07:38:28 SQL> 
07:38:28 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
07:38:28 SQL> CREATE TABLE modsrc COMPRESS AS
07:38:28   2  SELECT
07:38:28   3  pair
07:38:28   4  ,ydate
07:38:28   5  ,prdate
07:38:28   6  ,trend
07:38:28   7  ,g6
07:38:28   8  ,gatt
07:38:28   9  ,gattn
07:38:28  10  FROM svm6162
07:38:28  11  /

Table created.

Elapsed: 00:00:00.08
07:38:28 SQL> 
07:38:28 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
07:38:28 SQL> 
07:38:28 SQL> DROP   TABLE chf_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
07:38:28 SQL> CREATE TABLE chf_ms610 COMPRESS AS
07:38:28   2  SELECT
07:38:28   3  ydate
07:38:28   4  ,trend chf_trend
07:38:28   5  ,g6    chf_g6
07:38:28   6  ,gatt  chf_gatt
07:38:28   7  ,gattn chf_gattn
07:38:28   8  FROM modsrc
07:38:28   9  /

Table created.

Elapsed: 00:00:00.07
07:38:28 SQL> 
07:38:28 SQL> ANALYZE TABLE chf_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
07:38:28 SQL> 
07:38:28 SQL> -- I need a copy of the attributes:
07:38:28 SQL> 
07:38:28 SQL> 
07:38:28 SQL> DROP   TABLE chf_att;

Table dropped.

Elapsed: 00:00:00.04
07:38:28 SQL> CREATE TABLE chf_att COMPRESS AS
07:38:28   2  SELECT
07:38:28   3  ydate
07:38:28   4  ,att00 chf_att00
07:38:28   5  ,att01 chf_att01
07:38:28   6  ,att02 chf_att02
07:38:28   7  ,att03 chf_att03
07:38:28   8  ,att04 chf_att04
07:38:28   9  ,att05 chf_att05
07:38:28  10  ,att06 chf_att06
07:38:28  11  ,att07 chf_att07
07:38:28  12  ,att08 chf_att08
07:38:28  13  ,att09 chf_att09
07:38:28  14  ,att10 chf_att10
07:38:28  15  ,att11 chf_att11
07:38:28  16  ,att12 chf_att12
07:38:28  17  ,att13 chf_att13
07:38:28  18  ,att14 chf_att14
07:38:28  19  ,att15 chf_att15
07:38:28  20  ,att16 chf_att16
07:38:28  21  ,att17 chf_att17
07:38:28  22  ,att18 chf_att18
07:38:28  23  ,att19 chf_att19
07:38:28  24  ,att20 chf_att20
07:38:28  25  ,att21 chf_att21
07:38:28  26  ,att22 chf_att22
07:38:28  27  ,att23 chf_att23
07:38:28  28  ,att24 chf_att24
07:38:28  29  ,att25 chf_att25
07:38:28  30  ,att26 chf_att26
07:38:28  31  ,att27 chf_att27
07:38:28  32  ,att28 chf_att28
07:38:28  33  ,att29 chf_att29
07:38:28  34  ,att30 chf_att30
07:38:28  35  ,att31 chf_att31
07:38:28  36  ,att32 chf_att32
07:38:28  37  ,att33 chf_att33
07:38:28  38  ,att34 chf_att34
07:38:28  39  ,att35 chf_att35
07:38:28  40  ,att36 chf_att36
07:38:28  41  ,att37 chf_att37
07:38:28  42  FROM svm6162
07:38:28  43  /

Table created.

Elapsed: 00:00:00.15
07:38:28 SQL> 
07:38:28 SQL> ANALYZE TABLE chf_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.43
07:38:29 SQL> 
07:38:29 SQL> -- rpt
07:38:29 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19397

Elapsed: 00:00:00.81
07:38:30 SQL> SELECT COUNT(*)FROM chf_att;

  COUNT(*)
----------
     19397

Elapsed: 00:00:00.00
07:38:30 SQL> 
07:38:30 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
