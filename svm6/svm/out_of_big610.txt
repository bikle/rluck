
SQL*Plus: Release 11.2.0.1.0 Production on Sun Dec 26 09:59:57 2010

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

09:59:57 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
09:59:57 SQL> 09:59:57 SQL> --
09:59:57 SQL> -- eur610.sql
09:59:57 SQL> --
09:59:57 SQL> 
09:59:57 SQL> -- Creates views and tables for backtesting a forex SVM strategy
09:59:57 SQL> 
09:59:57 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.14
09:59:57 SQL> 
09:59:57 SQL> -- I created di5min here:
09:59:57 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
09:59:57 SQL> 
09:59:57 SQL> CREATE OR REPLACE VIEW svm6102 AS
09:59:57   2  SELECT
09:59:57   3  pair
09:59:57   4  ,ydate
09:59:57   5  ,prdate
09:59:57   6  ,rownum rnum -- acts as t in my time-series
09:59:57   7  ,clse
09:59:57   8  -- Derive a bunch of attributes from clse, the latest price:
09:59:57   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
09:59:57  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
09:59:57  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
09:59:57  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
09:59:57  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
09:59:57  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
09:59:57  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
09:59:57  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
09:59:57  17  --
09:59:57  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
09:59:57  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
09:59:57  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
09:59:57  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
09:59:57  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
09:59:57  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
09:59:57  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
09:59:57  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
09:59:57  26  --
09:59:57  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
09:59:57  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
09:59:57  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
09:59:57  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
09:59:57  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
09:59:57  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
09:59:57  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
09:59:57  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
09:59:57  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
09:59:57  36  FROM di5min WHERE pair LIKE'%eur%'
09:59:57  37  ORDER BY ydate
09:59:57  38  /

View created.

Elapsed: 00:00:00.07
09:59:57 SQL> 
09:59:57 SQL> -- rpt
09:59:57 SQL> 
09:59:57 SQL> SELECT
09:59:57   2  pair
09:59:57   3  ,COUNT(pair)
09:59:57   4  ,MIN(clse),MAX(clse)
09:59:57   5  ,MIN(avg6),MAX(avg6)
09:59:57   6  ,MIN(ydate),MAX(ydate)
09:59:57   7  FROM svm6102
09:59:57   8  GROUP BY pair
09:59:57   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_usd       20738    1.29735	   1.4273 1.29875103 1.42436233 2010-09-15 22:25:01 2010-12-24 21:55:00

Elapsed: 00:00:01.10
09:59:58 SQL> 
09:59:58 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
09:59:58 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.07
09:59:58 SQL> CREATE TABLE svm6122 COMPRESS AS
09:59:58   2  SELECT
09:59:58   3  pair
09:59:58   4  ,ydate
09:59:58   5  ,prdate
09:59:58   6  ,clse
09:59:58   7  -- g6 is important. I want to predict g6:
09:59:58   8  ,ld6 - clse g6
09:59:58   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
09:59:58  10  -- I want more attributes from the ones I derived above:
09:59:58  11  -- clse relation to moving-min
09:59:58  12  ,clse-min4  cm4
09:59:58  13  ,clse-min6  cm6
09:59:58  14  ,clse-min8  cm8
09:59:58  15  ,clse-min10 cm10
09:59:58  16  ,clse-min12 cm12
09:59:58  17  ,clse-min14 cm14
09:59:58  18  ,clse-min16 cm16
09:59:58  19  ,clse-min18 cm18
09:59:58  20  -- clse relation to moving-avg
09:59:58  21  ,clse-avg4  ca4
09:59:58  22  ,clse-avg6  ca6
09:59:58  23  ,clse-avg8  ca8
09:59:58  24  ,clse-avg10 ca10
09:59:58  25  ,clse-avg12 ca12
09:59:58  26  ,clse-avg14 ca14
09:59:58  27  ,clse-avg16 ca16
09:59:58  28  ,clse-avg18 ca18
09:59:58  29  -- clse relation to moving-max
09:59:58  30  ,clse-max4  cx4
09:59:58  31  ,clse-max6  cx6
09:59:58  32  ,clse-max8  cx8
09:59:58  33  ,clse-max10 cx10
09:59:58  34  ,clse-max12 cx12
09:59:58  35  ,clse-max14 cx14
09:59:58  36  ,clse-max16 cx16
09:59:58  37  ,clse-max18 cx18
09:59:58  38  -- Derive more attributes.
09:59:58  39  -- I want to use CORR() here to help SVM see the shape of the series.
09:59:58  40  -- But COVAR_POP is more stable:
09:59:58  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
09:59:58  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
09:59:58  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
09:59:58  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
09:59:58  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
09:59:58  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
09:59:58  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
09:59:58  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
09:59:58  49  -- Derive date related attributes:
09:59:58  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
09:59:58  51  ,0+TO_CHAR(ydate,'D')d
09:59:58  52  ,0+TO_CHAR(ydate,'W')w
09:59:58  53  -- mpm stands for minutes-past-midnight:
09:59:58  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
09:59:58  55  -- mph stands for minutes-past-hour:
09:59:58  56  ,0+TO_CHAR(ydate,'MI')mph
09:59:58  57  FROM svm6102
09:59:58  58  ORDER BY ydate
09:59:58  59  /

Table created.

Elapsed: 00:00:02.45
10:00:01 SQL> 
10:00:01 SQL> -- rpt
10:00:01 SQL> 
10:00:01 SQL> SELECT
10:00:01   2  pair
10:00:01   3  ,COUNT(pair)
10:00:01   4  ,MIN(clse),MAX(clse)
10:00:01   5  ,MIN(ydate),MAX(ydate)
10:00:01   6  FROM svm6122
10:00:01   7  GROUP BY pair
10:00:01   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_usd       20738    1.29735	   1.4273 2010-09-15 22:25:01 2010-12-24 21:55:00

Elapsed: 00:00:00.04
10:00:01 SQL> 
10:00:01 SQL> -- Prepare for derivation of NTILE based params:
10:00:01 SQL> 
10:00:01 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.05
10:00:01 SQL> CREATE TABLE svm6142 COMPRESS AS
10:00:01   2  SELECT
10:00:01   3  pair
10:00:01   4  ,ydate
10:00:01   5  ,prdate
10:00:01   6  ,clse
10:00:01   7  ,g6
10:00:01   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
10:00:01   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
10:00:01  10  ,CASE WHEN trend IS NULL THEN 1
10:00:01  11  	    WHEN trend =0      THEN 1
10:00:01  12  	    ELSE trend END trend
10:00:01  13  ,cm4
10:00:01  14  ,cm6
10:00:01  15  ,cm8
10:00:01  16  ,cm10
10:00:01  17  ,cm12
10:00:01  18  ,cm14
10:00:01  19  ,cm16
10:00:01  20  ,cm18
10:00:01  21  --
10:00:01  22  ,ca4
10:00:01  23  ,ca6
10:00:01  24  ,ca8
10:00:01  25  ,ca10
10:00:01  26  ,ca12
10:00:01  27  ,ca14
10:00:01  28  ,ca16
10:00:01  29  ,ca18
10:00:01  30  --
10:00:01  31  ,cx4
10:00:01  32  ,cx6
10:00:01  33  ,cx8
10:00:01  34  ,cx10
10:00:01  35  ,cx12
10:00:01  36  ,cx14
10:00:01  37  ,cx16
10:00:01  38  ,cx18
10:00:01  39  --
10:00:01  40  ,crr4
10:00:01  41  ,crr6
10:00:01  42  ,crr8
10:00:01  43  ,crr10
10:00:01  44  ,crr12
10:00:01  45  ,crr14
10:00:01  46  ,crr16
10:00:01  47  ,crr18
10:00:01  48  --
10:00:01  49  ,hh
10:00:01  50  ,d
10:00:01  51  ,w
10:00:01  52  ,mpm
10:00:01  53  ,mph
10:00:01  54  FROM svm6122
10:00:01  55  ORDER BY ydate
10:00:01  56  /

Table created.

Elapsed: 00:00:00.41
10:00:01 SQL> 
10:00:01 SQL> -- rpt
10:00:01 SQL> 
10:00:01 SQL> SELECT
10:00:01   2  pair
10:00:01   3  ,trend
10:00:01   4  ,gatt
10:00:01   5  ,COUNT(pair)
10:00:01   6  ,AVG(g6)
10:00:01   7  FROM svm6142
10:00:01   8  GROUP BY pair,trend,gatt
10:00:01   9  ORDER BY pair,trend,gatt
10:00:01  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6297  -.0029884
eur_usd 	-1 up	      3903 .004552181
eur_usd 	-1		44
eur_usd 	 1 nup	      6303  -.0030992
eur_usd 	 1 up	      4163 .005148703
eur_usd 	 1		28

6 rows selected.

Elapsed: 00:00:00.05
10:00:01 SQL> 
10:00:01 SQL> 
10:00:01 SQL> -- Derive NTILE based params:
10:00:01 SQL> 
10:00:01 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.03
10:00:01 SQL> CREATE TABLE svm6162 COMPRESS AS
10:00:01   2  SELECT
10:00:01   3  pair
10:00:01   4  ,ydate
10:00:01   5  ,prdate
10:00:01   6  ,clse
10:00:01   7  ,g6
10:00:01   8  ,gatt
10:00:01   9  ,gattn
10:00:01  10  ,trend
10:00:01  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
10:00:01  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
10:00:01  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
10:00:01  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
10:00:01  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
10:00:01  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
10:00:01  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
10:00:01  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
10:00:01  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
10:00:01  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
10:00:01  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
10:00:01  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
10:00:01  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
10:00:01  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
10:00:01  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
10:00:01  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
10:00:01  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
10:00:01  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
10:00:01  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
10:00:01  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
10:00:01  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
10:00:01  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
10:00:01  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
10:00:01  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
10:00:01  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
10:00:01  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
10:00:01  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
10:00:01  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
10:00:01  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
10:00:01  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
10:00:01  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
10:00:01  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
10:00:01  43  ,hh  att32
10:00:01  44  ,d   att33
10:00:01  45  ,w   att34
10:00:01  46  ,mpm att35
10:00:01  47  ,mph att36
10:00:01  48  ,trend att37
10:00:01  49  FROM svm6142
10:00:01  50  ORDER BY ydate
10:00:01  51  /

Table created.

Elapsed: 00:00:04.99
10:00:06 SQL> 
10:00:06 SQL> -- rpt
10:00:06 SQL> 
10:00:06 SQL> SELECT
10:00:06   2  pair
10:00:06   3  ,trend
10:00:06   4  ,gatt
10:00:06   5  ,COUNT(pair)
10:00:06   6  ,AVG(g6)
10:00:06   7  FROM svm6162
10:00:06   8  GROUP BY pair,trend,gatt
10:00:06   9  ORDER BY pair,trend,gatt
10:00:06  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6297  -.0029884
eur_usd 	-1 up	      3903 .004552181
eur_usd 	-1		44
eur_usd 	 1 nup	      6303  -.0030992
eur_usd 	 1 up	      4163 .005148703
eur_usd 	 1		28

6 rows selected.

Elapsed: 00:00:00.03
10:00:06 SQL> 
10:00:06 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.04
10:00:06 SQL> CREATE TABLE modsrc COMPRESS AS
10:00:06   2  SELECT
10:00:06   3  pair
10:00:06   4  ,ydate
10:00:06   5  ,prdate
10:00:06   6  ,trend
10:00:06   7  ,g6
10:00:06   8  ,gatt
10:00:06   9  ,gattn
10:00:06  10  FROM svm6162
10:00:06  11  /

Table created.

Elapsed: 00:00:00.09
10:00:06 SQL> 
10:00:06 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.31
10:00:07 SQL> 
10:00:07 SQL> DROP   TABLE eur_ms610 ;

Table dropped.

Elapsed: 00:00:00.09
10:00:07 SQL> CREATE TABLE eur_ms610 COMPRESS AS
10:00:07   2  SELECT
10:00:07   3  ydate
10:00:07   4  ,trend eur_trend
10:00:07   5  ,g6    eur_g6
10:00:07   6  ,gatt  eur_gatt
10:00:07   7  ,gattn eur_gattn
10:00:07   8  FROM modsrc
10:00:07   9  /

Table created.

Elapsed: 00:00:00.07
10:00:07 SQL> 
10:00:07 SQL> ANALYZE TABLE eur_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
10:00:07 SQL> 
10:00:07 SQL> -- I need a copy of the attributes:
10:00:07 SQL> 
10:00:07 SQL> 
10:00:07 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.05
10:00:07 SQL> CREATE TABLE eur_att COMPRESS AS
10:00:07   2  SELECT
10:00:07   3  ydate
10:00:07   4  ,att00 eur_att00
10:00:07   5  ,att01 eur_att01
10:00:07   6  ,att02 eur_att02
10:00:07   7  ,att03 eur_att03
10:00:07   8  ,att04 eur_att04
10:00:07   9  ,att05 eur_att05
10:00:07  10  ,att06 eur_att06
10:00:07  11  ,att07 eur_att07
10:00:07  12  ,att08 eur_att08
10:00:07  13  ,att09 eur_att09
10:00:07  14  ,att10 eur_att10
10:00:07  15  ,att11 eur_att11
10:00:07  16  ,att12 eur_att12
10:00:07  17  ,att13 eur_att13
10:00:07  18  ,att14 eur_att14
10:00:07  19  ,att15 eur_att15
10:00:07  20  ,att16 eur_att16
10:00:07  21  ,att17 eur_att17
10:00:07  22  ,att18 eur_att18
10:00:07  23  ,att19 eur_att19
10:00:07  24  ,att20 eur_att20
10:00:07  25  ,att21 eur_att21
10:00:07  26  ,att22 eur_att22
10:00:07  27  ,att23 eur_att23
10:00:07  28  ,att24 eur_att24
10:00:07  29  ,att25 eur_att25
10:00:07  30  ,att26 eur_att26
10:00:07  31  ,att27 eur_att27
10:00:07  32  ,att28 eur_att28
10:00:07  33  ,att29 eur_att29
10:00:07  34  ,att30 eur_att30
10:00:07  35  ,att31 eur_att31
10:00:07  36  ,att32 eur_att32
10:00:07  37  ,att33 eur_att33
10:00:07  38  ,att34 eur_att34
10:00:07  39  ,att35 eur_att35
10:00:07  40  ,att36 eur_att36
10:00:07  41  ,att37 eur_att37
10:00:07  42  FROM svm6162
10:00:07  43  /

Table created.

Elapsed: 00:00:00.17
10:00:07 SQL> 
10:00:07 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.51
10:00:08 SQL> 
10:00:08 SQL> -- rpt
10:00:08 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     20738

Elapsed: 00:00:00.91
10:00:09 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     20738

Elapsed: 00:00:00.01
10:00:09 SQL> 
10:00:09 SQL> --
10:00:09 SQL> -- aud610.sql
10:00:09 SQL> --
10:00:09 SQL> 
10:00:09 SQL> -- Creates views and tables for backtesting a forex SVM strategy
10:00:09 SQL> 
10:00:09 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.46
10:00:09 SQL> 
10:00:09 SQL> -- I created di5min here:
10:00:09 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
10:00:09 SQL> 
10:00:09 SQL> CREATE OR REPLACE VIEW svm6102 AS
10:00:09   2  SELECT
10:00:09   3  pair
10:00:09   4  ,ydate
10:00:09   5  ,prdate
10:00:09   6  ,rownum rnum -- acts as t in my time-series
10:00:09   7  ,clse
10:00:09   8  -- Derive a bunch of attributes from clse, the latest price:
10:00:09   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
10:00:09  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
10:00:09  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
10:00:09  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
10:00:09  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
10:00:09  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
10:00:09  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
10:00:09  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
10:00:09  17  --
10:00:09  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
10:00:09  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
10:00:09  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
10:00:09  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
10:00:09  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
10:00:09  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
10:00:09  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
10:00:09  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
10:00:09  26  --
10:00:09  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
10:00:09  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
10:00:09  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
10:00:09  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
10:00:09  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
10:00:09  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
10:00:09  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
10:00:09  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
10:00:09  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
10:00:09  36  FROM di5min WHERE pair LIKE'%aud%'
10:00:09  37  ORDER BY ydate
10:00:09  38  /

View created.

Elapsed: 00:00:00.05
10:00:09 SQL> 
10:00:09 SQL> -- rpt
10:00:09 SQL> 
10:00:09 SQL> SELECT
10:00:09   2  pair
10:00:09   3  ,COUNT(pair)
10:00:09   4  ,MIN(clse),MAX(clse)
10:00:09   5  ,MIN(avg6),MAX(avg6)
10:00:09   6  ,MIN(ydate),MAX(ydate)
10:00:09   7  FROM svm6102
10:00:09   8  GROUP BY pair
10:00:09   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
aud_usd       20735	 .9332	   1.0181 .935386301 1.01556438 2010-09-15 22:25:01 2010-12-24 21:55:00

Elapsed: 00:00:00.90
10:00:10 SQL> 
10:00:10 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
10:00:10 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.24
10:00:10 SQL> CREATE TABLE svm6122 COMPRESS AS
10:00:10   2  SELECT
10:00:10   3  pair
10:00:10   4  ,ydate
10:00:10   5  ,prdate
10:00:10   6  ,clse
10:00:10   7  -- g6 is important. I want to predict g6:
10:00:10   8  ,ld6 - clse g6
10:00:10   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
10:00:10  10  -- I want more attributes from the ones I derived above:
10:00:10  11  -- clse relation to moving-min
10:00:10  12  ,clse-min4  cm4
10:00:10  13  ,clse-min6  cm6
10:00:10  14  ,clse-min8  cm8
10:00:10  15  ,clse-min10 cm10
10:00:10  16  ,clse-min12 cm12
10:00:10  17  ,clse-min14 cm14
10:00:10  18  ,clse-min16 cm16
10:00:10  19  ,clse-min18 cm18
10:00:10  20  -- clse relation to moving-avg
10:00:10  21  ,clse-avg4  ca4
10:00:10  22  ,clse-avg6  ca6
10:00:10  23  ,clse-avg8  ca8
10:00:10  24  ,clse-avg10 ca10
10:00:10  25  ,clse-avg12 ca12
10:00:10  26  ,clse-avg14 ca14
10:00:10  27  ,clse-avg16 ca16
10:00:10  28  ,clse-avg18 ca18
10:00:10  29  -- clse relation to moving-max
10:00:10  30  ,clse-max4  cx4
10:00:10  31  ,clse-max6  cx6
10:00:10  32  ,clse-max8  cx8
10:00:10  33  ,clse-max10 cx10
10:00:10  34  ,clse-max12 cx12
10:00:10  35  ,clse-max14 cx14
10:00:10  36  ,clse-max16 cx16
10:00:10  37  ,clse-max18 cx18
10:00:10  38  -- Derive more attributes.
10:00:10  39  -- I want to use CORR() here to help SVM see the shape of the series.
10:00:10  40  -- But COVAR_POP is more stable:
10:00:10  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
10:00:10  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
10:00:10  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
10:00:10  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
10:00:10  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
10:00:10  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
10:00:10  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
10:00:10  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
10:00:10  49  -- Derive date related attributes:
10:00:10  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
10:00:10  51  ,0+TO_CHAR(ydate,'D')d
10:00:10  52  ,0+TO_CHAR(ydate,'W')w
10:00:10  53  -- mpm stands for minutes-past-midnight:
10:00:10  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
10:00:10  55  -- mph stands for minutes-past-hour:
10:00:10  56  ,0+TO_CHAR(ydate,'MI')mph
10:00:10  57  FROM svm6102
10:00:10  58  ORDER BY ydate
10:00:10  59  /

Table created.

Elapsed: 00:00:02.12
10:00:13 SQL> 
10:00:13 SQL> -- rpt
10:00:13 SQL> 
10:00:13 SQL> SELECT
10:00:13   2  pair
10:00:13   3  ,COUNT(pair)
10:00:13   4  ,MIN(clse),MAX(clse)
10:00:13   5  ,MIN(ydate),MAX(ydate)
10:00:13   6  FROM svm6122
10:00:13   7  GROUP BY pair
10:00:13   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
aud_usd       20735	 .9332	   1.0181 2010-09-15 22:25:01 2010-12-24 21:55:00

Elapsed: 00:00:00.06
10:00:13 SQL> 
10:00:13 SQL> -- Prepare for derivation of NTILE based params:
10:00:13 SQL> 
10:00:13 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.19
10:00:13 SQL> CREATE TABLE svm6142 COMPRESS AS
10:00:13   2  SELECT
10:00:13   3  pair
10:00:13   4  ,ydate
10:00:13   5  ,prdate
10:00:13   6  ,clse
10:00:13   7  ,g6
10:00:13   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
10:00:13   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
10:00:13  10  ,CASE WHEN trend IS NULL THEN 1
10:00:13  11  	    WHEN trend =0      THEN 1
10:00:13  12  	    ELSE trend END trend
10:00:13  13  ,cm4
10:00:13  14  ,cm6
10:00:13  15  ,cm8
10:00:13  16  ,cm10
10:00:13  17  ,cm12
10:00:13  18  ,cm14
10:00:13  19  ,cm16
10:00:13  20  ,cm18
10:00:13  21  --
10:00:13  22  ,ca4
10:00:13  23  ,ca6
10:00:13  24  ,ca8
10:00:13  25  ,ca10
10:00:13  26  ,ca12
10:00:13  27  ,ca14
10:00:13  28  ,ca16
10:00:13  29  ,ca18
10:00:13  30  --
10:00:13  31  ,cx4
10:00:13  32  ,cx6
10:00:13  33  ,cx8
10:00:13  34  ,cx10
10:00:13  35  ,cx12
10:00:13  36  ,cx14
10:00:13  37  ,cx16
10:00:13  38  ,cx18
10:00:13  39  --
10:00:13  40  ,crr4
10:00:13  41  ,crr6
10:00:13  42  ,crr8
10:00:13  43  ,crr10
10:00:13  44  ,crr12
10:00:13  45  ,crr14
10:00:13  46  ,crr16
10:00:13  47  ,crr18
10:00:13  48  --
10:00:13  49  ,hh
10:00:13  50  ,d
10:00:13  51  ,w
10:00:13  52  ,mpm
10:00:13  53  ,mph
10:00:13  54  FROM svm6122
10:00:13  55  ORDER BY ydate
10:00:13  56  /

Table created.

Elapsed: 00:00:00.37
10:00:13 SQL> 
10:00:13 SQL> -- rpt
10:00:13 SQL> 
10:00:13 SQL> SELECT
10:00:13   2  pair
10:00:13   3  ,trend
10:00:13   4  ,gatt
10:00:13   5  ,COUNT(pair)
10:00:13   6  ,AVG(g6)
10:00:13   7  FROM svm6142
10:00:13   8  GROUP BY pair,trend,gatt
10:00:13   9  ORDER BY pair,trend,gatt
10:00:13  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5458 -.00207705
aud_usd 	-1 up	      4030 .003724423
aud_usd 	-1		12
aud_usd 	 1 nup	      7178 -.00213233
aud_usd 	 1 up	      3997 .004125554
aud_usd 	 1		60

6 rows selected.

Elapsed: 00:00:00.03
10:00:13 SQL> 
10:00:13 SQL> 
10:00:13 SQL> -- Derive NTILE based params:
10:00:13 SQL> 
10:00:13 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.13
10:00:13 SQL> CREATE TABLE svm6162 COMPRESS AS
10:00:13   2  SELECT
10:00:13   3  pair
10:00:13   4  ,ydate
10:00:13   5  ,prdate
10:00:13   6  ,clse
10:00:13   7  ,g6
10:00:13   8  ,gatt
10:00:13   9  ,gattn
10:00:13  10  ,trend
10:00:13  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
10:00:13  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
10:00:13  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
10:00:13  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
10:00:13  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
10:00:13  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
10:00:13  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
10:00:13  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
10:00:13  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
10:00:13  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
10:00:13  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
10:00:13  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
10:00:13  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
10:00:13  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
10:00:13  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
10:00:13  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
10:00:13  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
10:00:13  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
10:00:13  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
10:00:13  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
10:00:13  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
10:00:13  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
10:00:13  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
10:00:13  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
10:00:13  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
10:00:13  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
10:00:13  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
10:00:13  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
10:00:13  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
10:00:13  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
10:00:13  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
10:00:13  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
10:00:13  43  ,hh  att32
10:00:13  44  ,d   att33
10:00:13  45  ,w   att34
10:00:13  46  ,mpm att35
10:00:13  47  ,mph att36
10:00:13  48  ,trend att37
10:00:13  49  FROM svm6142
10:00:13  50  ORDER BY ydate
10:00:13  51  /

Table created.

Elapsed: 00:00:05.02
10:00:18 SQL> 
10:00:18 SQL> -- rpt
10:00:18 SQL> 
10:00:18 SQL> SELECT
10:00:18   2  pair
10:00:18   3  ,trend
10:00:18   4  ,gatt
10:00:18   5  ,COUNT(pair)
10:00:18   6  ,AVG(g6)
10:00:18   7  FROM svm6162
10:00:18   8  GROUP BY pair,trend,gatt
10:00:18   9  ORDER BY pair,trend,gatt
10:00:18  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5458 -.00207705
aud_usd 	-1 up	      4030 .003724423
aud_usd 	-1		12
aud_usd 	 1 nup	      7178 -.00213233
aud_usd 	 1 up	      3997 .004125554
aud_usd 	 1		60

6 rows selected.

Elapsed: 00:00:00.03
10:00:18 SQL> 
10:00:18 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.15
10:00:18 SQL> CREATE TABLE modsrc COMPRESS AS
10:00:18   2  SELECT
10:00:18   3  pair
10:00:18   4  ,ydate
10:00:18   5  ,prdate
10:00:18   6  ,trend
10:00:18   7  ,g6
10:00:18   8  ,gatt
10:00:18   9  ,gattn
10:00:18  10  FROM svm6162
10:00:18  11  /

Table created.

Elapsed: 00:00:00.08
10:00:19 SQL> 
10:00:19 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
10:00:19 SQL> 
10:00:19 SQL> DROP   TABLE aud_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
10:00:19 SQL> CREATE TABLE aud_ms610 COMPRESS AS
10:00:19   2  SELECT
10:00:19   3  ydate
10:00:19   4  ,trend aud_trend
10:00:19   5  ,g6    aud_g6
10:00:19   6  ,gatt  aud_gatt
10:00:19   7  ,gattn aud_gattn
10:00:19   8  FROM modsrc
10:00:19   9  /

Table created.

Elapsed: 00:00:00.08
10:00:19 SQL> 
10:00:19 SQL> ANALYZE TABLE aud_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
10:00:19 SQL> 
10:00:19 SQL> -- I need a copy of the attributes:
10:00:19 SQL> 
10:00:19 SQL> 
10:00:19 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.08
10:00:19 SQL> CREATE TABLE aud_att COMPRESS AS
10:00:19   2  SELECT
10:00:19   3  ydate
10:00:19   4  ,att00 aud_att00
10:00:19   5  ,att01 aud_att01
10:00:19   6  ,att02 aud_att02
10:00:19   7  ,att03 aud_att03
10:00:19   8  ,att04 aud_att04
10:00:19   9  ,att05 aud_att05
10:00:19  10  ,att06 aud_att06
10:00:19  11  ,att07 aud_att07
10:00:19  12  ,att08 aud_att08
10:00:19  13  ,att09 aud_att09
10:00:19  14  ,att10 aud_att10
10:00:19  15  ,att11 aud_att11
10:00:19  16  ,att12 aud_att12
10:00:19  17  ,att13 aud_att13
10:00:19  18  ,att14 aud_att14
10:00:19  19  ,att15 aud_att15
10:00:19  20  ,att16 aud_att16
10:00:19  21  ,att17 aud_att17
10:00:19  22  ,att18 aud_att18
10:00:19  23  ,att19 aud_att19
10:00:19  24  ,att20 aud_att20
10:00:19  25  ,att21 aud_att21
10:00:19  26  ,att22 aud_att22
10:00:19  27  ,att23 aud_att23
10:00:19  28  ,att24 aud_att24
10:00:19  29  ,att25 aud_att25
10:00:19  30  ,att26 aud_att26
10:00:19  31  ,att27 aud_att27
10:00:19  32  ,att28 aud_att28
10:00:19  33  ,att29 aud_att29
10:00:19  34  ,att30 aud_att30
10:00:19  35  ,att31 aud_att31
10:00:19  36  ,att32 aud_att32
10:00:19  37  ,att33 aud_att33
10:00:19  38  ,att34 aud_att34
10:00:19  39  ,att35 aud_att35
10:00:19  40  ,att36 aud_att36
10:00:19  41  ,att37 aud_att37
10:00:19  42  FROM svm6162
10:00:19  43  /

Table created.

Elapsed: 00:00:00.17
10:00:19 SQL> 
10:00:19 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
10:00:20 SQL> 
10:00:20 SQL> -- rpt
10:00:20 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     20735

Elapsed: 00:00:00.87
10:00:21 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     20735

Elapsed: 00:00:00.00
10:00:21 SQL> 
10:00:21 SQL> --
10:00:21 SQL> -- gbp610.sql
10:00:21 SQL> --
10:00:21 SQL> 
10:00:21 SQL> -- Creates views and tables for backtesting a forex SVM strategy
10:00:21 SQL> 
10:00:21 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.41
10:00:21 SQL> 
10:00:21 SQL> -- I created di5min here:
10:00:21 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
10:00:21 SQL> 
10:00:21 SQL> CREATE OR REPLACE VIEW svm6102 AS
10:00:21   2  SELECT
10:00:21   3  pair
10:00:21   4  ,ydate
10:00:21   5  ,prdate
10:00:21   6  ,rownum rnum -- acts as t in my time-series
10:00:21   7  ,clse
10:00:21   8  -- Derive a bunch of attributes from clse, the latest price:
10:00:21   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
10:00:21  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
10:00:21  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
10:00:21  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
10:00:21  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
10:00:21  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
10:00:21  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
10:00:21  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
10:00:21  17  --
10:00:21  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
10:00:21  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
10:00:21  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
10:00:21  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
10:00:21  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
10:00:21  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
10:00:21  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
10:00:21  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
10:00:21  26  --
10:00:21  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
10:00:21  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
10:00:21  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
10:00:21  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
10:00:21  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
10:00:21  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
10:00:21  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
10:00:21  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
10:00:21  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
10:00:21  36  FROM di5min WHERE pair LIKE'%gbp%'
10:00:21  37  ORDER BY ydate
10:00:21  38  /

View created.

Elapsed: 00:00:00.05
10:00:21 SQL> 
10:00:21 SQL> -- rpt
10:00:21 SQL> 
10:00:21 SQL> SELECT
10:00:21   2  pair
10:00:21   3  ,COUNT(pair)
10:00:21   4  ,MIN(clse),MAX(clse)
10:00:21   5  ,MIN(avg6),MAX(avg6)
10:00:21   6  ,MIN(ydate),MAX(ydate)
10:00:21   7  FROM svm6102
10:00:21   8  GROUP BY pair
10:00:21   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
gbp_usd       20737   1.535825	   1.6295 1.53821404 1.62716986 2010-09-15 22:25:01 2010-12-24 21:55:00

Elapsed: 00:00:00.88
10:00:22 SQL> 
10:00:22 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
10:00:22 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.21
10:00:22 SQL> CREATE TABLE svm6122 COMPRESS AS
10:00:22   2  SELECT
10:00:22   3  pair
10:00:22   4  ,ydate
10:00:22   5  ,prdate
10:00:22   6  ,clse
10:00:22   7  -- g6 is important. I want to predict g6:
10:00:22   8  ,ld6 - clse g6
10:00:22   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
10:00:22  10  -- I want more attributes from the ones I derived above:
10:00:22  11  -- clse relation to moving-min
10:00:22  12  ,clse-min4  cm4
10:00:22  13  ,clse-min6  cm6
10:00:22  14  ,clse-min8  cm8
10:00:22  15  ,clse-min10 cm10
10:00:22  16  ,clse-min12 cm12
10:00:22  17  ,clse-min14 cm14
10:00:22  18  ,clse-min16 cm16
10:00:22  19  ,clse-min18 cm18
10:00:22  20  -- clse relation to moving-avg
10:00:22  21  ,clse-avg4  ca4
10:00:22  22  ,clse-avg6  ca6
10:00:22  23  ,clse-avg8  ca8
10:00:22  24  ,clse-avg10 ca10
10:00:22  25  ,clse-avg12 ca12
10:00:22  26  ,clse-avg14 ca14
10:00:22  27  ,clse-avg16 ca16
10:00:22  28  ,clse-avg18 ca18
10:00:22  29  -- clse relation to moving-max
10:00:22  30  ,clse-max4  cx4
10:00:22  31  ,clse-max6  cx6
10:00:22  32  ,clse-max8  cx8
10:00:22  33  ,clse-max10 cx10
10:00:22  34  ,clse-max12 cx12
10:00:22  35  ,clse-max14 cx14
10:00:22  36  ,clse-max16 cx16
10:00:22  37  ,clse-max18 cx18
10:00:22  38  -- Derive more attributes.
10:00:22  39  -- I want to use CORR() here to help SVM see the shape of the series.
10:00:22  40  -- But COVAR_POP is more stable:
10:00:22  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
10:00:22  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
10:00:22  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
10:00:22  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
10:00:22  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
10:00:22  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
10:00:22  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
10:00:22  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
10:00:22  49  -- Derive date related attributes:
10:00:22  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
10:00:22  51  ,0+TO_CHAR(ydate,'D')d
10:00:22  52  ,0+TO_CHAR(ydate,'W')w
10:00:22  53  -- mpm stands for minutes-past-midnight:
10:00:22  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
10:00:22  55  -- mph stands for minutes-past-hour:
10:00:22  56  ,0+TO_CHAR(ydate,'MI')mph
10:00:22  57  FROM svm6102
10:00:22  58  ORDER BY ydate
10:00:22  59  /

Table created.

Elapsed: 00:00:02.13
10:00:24 SQL> 
10:00:24 SQL> -- rpt
10:00:24 SQL> 
10:00:24 SQL> SELECT
10:00:24   2  pair
10:00:24   3  ,COUNT(pair)
10:00:24   4  ,MIN(clse),MAX(clse)
10:00:24   5  ,MIN(ydate),MAX(ydate)
10:00:24   6  FROM svm6122
10:00:24   7  GROUP BY pair
10:00:24   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
gbp_usd       20737   1.535825	   1.6295 2010-09-15 22:25:01 2010-12-24 21:55:00

Elapsed: 00:00:00.04
10:00:24 SQL> 
10:00:24 SQL> -- Prepare for derivation of NTILE based params:
10:00:24 SQL> 
10:00:24 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.20
10:00:25 SQL> CREATE TABLE svm6142 COMPRESS AS
10:00:25   2  SELECT
10:00:25   3  pair
10:00:25   4  ,ydate
10:00:25   5  ,prdate
10:00:25   6  ,clse
10:00:25   7  ,g6
10:00:25   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
10:00:25   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
10:00:25  10  ,CASE WHEN trend IS NULL THEN 1
10:00:25  11  	    WHEN trend =0      THEN 1
10:00:25  12  	    ELSE trend END trend
10:00:25  13  ,cm4
10:00:25  14  ,cm6
10:00:25  15  ,cm8
10:00:25  16  ,cm10
10:00:25  17  ,cm12
10:00:25  18  ,cm14
10:00:25  19  ,cm16
10:00:25  20  ,cm18
10:00:25  21  --
10:00:25  22  ,ca4
10:00:25  23  ,ca6
10:00:25  24  ,ca8
10:00:25  25  ,ca10
10:00:25  26  ,ca12
10:00:25  27  ,ca14
10:00:25  28  ,ca16
10:00:25  29  ,ca18
10:00:25  30  --
10:00:25  31  ,cx4
10:00:25  32  ,cx6
10:00:25  33  ,cx8
10:00:25  34  ,cx10
10:00:25  35  ,cx12
10:00:25  36  ,cx14
10:00:25  37  ,cx16
10:00:25  38  ,cx18
10:00:25  39  --
10:00:25  40  ,crr4
10:00:25  41  ,crr6
10:00:25  42  ,crr8
10:00:25  43  ,crr10
10:00:25  44  ,crr12
10:00:25  45  ,crr14
10:00:25  46  ,crr16
10:00:25  47  ,crr18
10:00:25  48  --
10:00:25  49  ,hh
10:00:25  50  ,d
10:00:25  51  ,w
10:00:25  52  ,mpm
10:00:25  53  ,mph
10:00:25  54  FROM svm6122
10:00:25  55  ORDER BY ydate
10:00:25  56  /

Table created.

Elapsed: 00:00:00.39
10:00:25 SQL> 
10:00:25 SQL> -- rpt
10:00:25 SQL> 
10:00:25 SQL> SELECT
10:00:25   2  pair
10:00:25   3  ,trend
10:00:25   4  ,gatt
10:00:25   5  ,COUNT(pair)
10:00:25   6  ,AVG(g6)
10:00:25   7  FROM svm6142
10:00:25   8  GROUP BY pair,trend,gatt
10:00:25   9  ORDER BY pair,trend,gatt
10:00:25  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6598 -.00249501
gbp_usd 	-1 up	      3731 .004304556
gbp_usd 	-1		23
gbp_usd 	 1 nup	      6594 -.00262086
gbp_usd 	 1 up	      3742 .004375975
gbp_usd 	 1		49

6 rows selected.

Elapsed: 00:00:00.05
10:00:25 SQL> 
10:00:25 SQL> 
10:00:25 SQL> -- Derive NTILE based params:
10:00:25 SQL> 
10:00:25 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.29
10:00:25 SQL> CREATE TABLE svm6162 COMPRESS AS
10:00:25   2  SELECT
10:00:25   3  pair
10:00:25   4  ,ydate
10:00:25   5  ,prdate
10:00:25   6  ,clse
10:00:25   7  ,g6
10:00:25   8  ,gatt
10:00:25   9  ,gattn
10:00:25  10  ,trend
10:00:25  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
10:00:25  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
10:00:25  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
10:00:25  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
10:00:25  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
10:00:25  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
10:00:25  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
10:00:25  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
10:00:25  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
10:00:25  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
10:00:25  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
10:00:25  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
10:00:25  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
10:00:25  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
10:00:25  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
10:00:25  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
10:00:25  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
10:00:25  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
10:00:25  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
10:00:25  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
10:00:25  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
10:00:25  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
10:00:25  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
10:00:25  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
10:00:25  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
10:00:25  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
10:00:25  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
10:00:25  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
10:00:25  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
10:00:25  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
10:00:25  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
10:00:25  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
10:00:25  43  ,hh  att32
10:00:25  44  ,d   att33
10:00:25  45  ,w   att34
10:00:25  46  ,mpm att35
10:00:25  47  ,mph att36
10:00:25  48  ,trend att37
10:00:25  49  FROM svm6142
10:00:25  50  ORDER BY ydate
10:00:25  51  /

Table created.

Elapsed: 00:00:04.94
10:00:30 SQL> 
10:00:30 SQL> -- rpt
10:00:30 SQL> 
10:00:30 SQL> SELECT
10:00:30   2  pair
10:00:30   3  ,trend
10:00:30   4  ,gatt
10:00:30   5  ,COUNT(pair)
10:00:30   6  ,AVG(g6)
10:00:30   7  FROM svm6162
10:00:30   8  GROUP BY pair,trend,gatt
10:00:30   9  ORDER BY pair,trend,gatt
10:00:30  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6598 -.00249501
gbp_usd 	-1 up	      3731 .004304556
gbp_usd 	-1		23
gbp_usd 	 1 nup	      6594 -.00262086
gbp_usd 	 1 up	      3742 .004375975
gbp_usd 	 1		49

6 rows selected.

Elapsed: 00:00:00.03
10:00:30 SQL> 
10:00:30 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
10:00:30 SQL> CREATE TABLE modsrc COMPRESS AS
10:00:30   2  SELECT
10:00:30   3  pair
10:00:30   4  ,ydate
10:00:30   5  ,prdate
10:00:30   6  ,trend
10:00:30   7  ,g6
10:00:30   8  ,gatt
10:00:30   9  ,gattn
10:00:30  10  FROM svm6162
10:00:30  11  /

Table created.

Elapsed: 00:00:00.08
10:00:30 SQL> 
10:00:30 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
10:00:31 SQL> 
10:00:31 SQL> DROP   TABLE gbp_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
10:00:31 SQL> CREATE TABLE gbp_ms610 COMPRESS AS
10:00:31   2  SELECT
10:00:31   3  ydate
10:00:31   4  ,trend gbp_trend
10:00:31   5  ,g6    gbp_g6
10:00:31   6  ,gatt  gbp_gatt
10:00:31   7  ,gattn gbp_gattn
10:00:31   8  FROM modsrc
10:00:31   9  /

Table created.

Elapsed: 00:00:00.07
10:00:31 SQL> 
10:00:31 SQL> ANALYZE TABLE gbp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
10:00:31 SQL> 
10:00:31 SQL> -- I need a copy of the attributes:
10:00:31 SQL> 
10:00:31 SQL> 
10:00:31 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.04
10:00:31 SQL> CREATE TABLE gbp_att COMPRESS AS
10:00:31   2  SELECT
10:00:31   3  ydate
10:00:31   4  ,att00 gbp_att00
10:00:31   5  ,att01 gbp_att01
10:00:31   6  ,att02 gbp_att02
10:00:31   7  ,att03 gbp_att03
10:00:31   8  ,att04 gbp_att04
10:00:31   9  ,att05 gbp_att05
10:00:31  10  ,att06 gbp_att06
10:00:31  11  ,att07 gbp_att07
10:00:31  12  ,att08 gbp_att08
10:00:31  13  ,att09 gbp_att09
10:00:31  14  ,att10 gbp_att10
10:00:31  15  ,att11 gbp_att11
10:00:31  16  ,att12 gbp_att12
10:00:31  17  ,att13 gbp_att13
10:00:31  18  ,att14 gbp_att14
10:00:31  19  ,att15 gbp_att15
10:00:31  20  ,att16 gbp_att16
10:00:31  21  ,att17 gbp_att17
10:00:31  22  ,att18 gbp_att18
10:00:31  23  ,att19 gbp_att19
10:00:31  24  ,att20 gbp_att20
10:00:31  25  ,att21 gbp_att21
10:00:31  26  ,att22 gbp_att22
10:00:31  27  ,att23 gbp_att23
10:00:31  28  ,att24 gbp_att24
10:00:31  29  ,att25 gbp_att25
10:00:31  30  ,att26 gbp_att26
10:00:31  31  ,att27 gbp_att27
10:00:31  32  ,att28 gbp_att28
10:00:31  33  ,att29 gbp_att29
10:00:31  34  ,att30 gbp_att30
10:00:31  35  ,att31 gbp_att31
10:00:31  36  ,att32 gbp_att32
10:00:31  37  ,att33 gbp_att33
10:00:31  38  ,att34 gbp_att34
10:00:31  39  ,att35 gbp_att35
10:00:31  40  ,att36 gbp_att36
10:00:31  41  ,att37 gbp_att37
10:00:31  42  FROM svm6162
10:00:31  43  /

Table created.

Elapsed: 00:00:00.23
10:00:31 SQL> 
10:00:31 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.48
10:00:32 SQL> 
10:00:32 SQL> -- rpt
10:00:32 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     20737

Elapsed: 00:00:00.90
10:00:33 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     20737

Elapsed: 00:00:00.00
10:00:33 SQL> 
10:00:33 SQL> --
10:00:33 SQL> -- jpy610.sql
10:00:33 SQL> --
10:00:33 SQL> 
10:00:33 SQL> -- Creates views and tables for backtesting a forex SVM strategy
10:00:33 SQL> 
10:00:33 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.91
10:00:33 SQL> 
10:00:33 SQL> -- I created di5min here:
10:00:33 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
10:00:33 SQL> 
10:00:33 SQL> CREATE OR REPLACE VIEW svm6102 AS
10:00:33   2  SELECT
10:00:33   3  pair
10:00:33   4  ,ydate
10:00:33   5  ,prdate
10:00:33   6  ,rownum rnum -- acts as t in my time-series
10:00:33   7  ,clse
10:00:33   8  -- Derive a bunch of attributes from clse, the latest price:
10:00:33   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
10:00:33  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
10:00:33  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
10:00:33  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
10:00:33  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
10:00:33  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
10:00:33  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
10:00:33  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
10:00:33  17  --
10:00:33  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
10:00:33  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
10:00:33  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
10:00:33  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
10:00:33  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
10:00:33  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
10:00:33  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
10:00:33  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
10:00:33  26  --
10:00:33  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
10:00:33  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
10:00:33  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
10:00:33  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
10:00:33  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
10:00:33  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
10:00:33  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
10:00:33  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
10:00:33  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
10:00:33  36  FROM di5min WHERE pair LIKE'%jpy%'
10:00:34  37  ORDER BY ydate
10:00:34  38  /

View created.

Elapsed: 00:00:00.04
10:00:34 SQL> 
10:00:34 SQL> -- rpt
10:00:34 SQL> 
10:00:34 SQL> SELECT
10:00:34   2  pair
10:00:34   3  ,COUNT(pair)
10:00:34   4  ,MIN(clse),MAX(clse)
10:00:34   5  ,MIN(avg6),MAX(avg6)
10:00:34   6  ,MIN(ydate),MAX(ydate)
10:00:34   7  FROM svm6102
10:00:34   8  GROUP BY pair
10:00:34   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_jpy       20736	 80.25	    85.89 80.3595205 85.8020548 2010-09-15 22:25:01 2010-12-24 21:55:00

Elapsed: 00:00:00.93
10:00:34 SQL> 
10:00:34 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
10:00:34 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.20
10:00:35 SQL> CREATE TABLE svm6122 COMPRESS AS
10:00:35   2  SELECT
10:00:35   3  pair
10:00:35   4  ,ydate
10:00:35   5  ,prdate
10:00:35   6  ,clse
10:00:35   7  -- g6 is important. I want to predict g6:
10:00:35   8  ,ld6 - clse g6
10:00:35   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
10:00:35  10  -- I want more attributes from the ones I derived above:
10:00:35  11  -- clse relation to moving-min
10:00:35  12  ,clse-min4  cm4
10:00:35  13  ,clse-min6  cm6
10:00:35  14  ,clse-min8  cm8
10:00:35  15  ,clse-min10 cm10
10:00:35  16  ,clse-min12 cm12
10:00:35  17  ,clse-min14 cm14
10:00:35  18  ,clse-min16 cm16
10:00:35  19  ,clse-min18 cm18
10:00:35  20  -- clse relation to moving-avg
10:00:35  21  ,clse-avg4  ca4
10:00:35  22  ,clse-avg6  ca6
10:00:35  23  ,clse-avg8  ca8
10:00:35  24  ,clse-avg10 ca10
10:00:35  25  ,clse-avg12 ca12
10:00:35  26  ,clse-avg14 ca14
10:00:35  27  ,clse-avg16 ca16
10:00:35  28  ,clse-avg18 ca18
10:00:35  29  -- clse relation to moving-max
10:00:35  30  ,clse-max4  cx4
10:00:35  31  ,clse-max6  cx6
10:00:35  32  ,clse-max8  cx8
10:00:35  33  ,clse-max10 cx10
10:00:35  34  ,clse-max12 cx12
10:00:35  35  ,clse-max14 cx14
10:00:35  36  ,clse-max16 cx16
10:00:35  37  ,clse-max18 cx18
10:00:35  38  -- Derive more attributes.
10:00:35  39  -- I want to use CORR() here to help SVM see the shape of the series.
10:00:35  40  -- But COVAR_POP is more stable:
10:00:35  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
10:00:35  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
10:00:35  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
10:00:35  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
10:00:35  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
10:00:35  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
10:00:35  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
10:00:35  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
10:00:35  49  -- Derive date related attributes:
10:00:35  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
10:00:35  51  ,0+TO_CHAR(ydate,'D')d
10:00:35  52  ,0+TO_CHAR(ydate,'W')w
10:00:35  53  -- mpm stands for minutes-past-midnight:
10:00:35  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
10:00:35  55  -- mph stands for minutes-past-hour:
10:00:35  56  ,0+TO_CHAR(ydate,'MI')mph
10:00:35  57  FROM svm6102
10:00:35  58  ORDER BY ydate
10:00:35  59  /

Table created.

Elapsed: 00:00:02.24
10:00:37 SQL> 
10:00:37 SQL> -- rpt
10:00:37 SQL> 
10:00:37 SQL> SELECT
10:00:37   2  pair
10:00:37   3  ,COUNT(pair)
10:00:37   4  ,MIN(clse),MAX(clse)
10:00:37   5  ,MIN(ydate),MAX(ydate)
10:00:37   6  FROM svm6122
10:00:37   7  GROUP BY pair
10:00:37   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_jpy       20736	 80.25	    85.89 2010-09-15 22:25:01 2010-12-24 21:55:00

Elapsed: 00:00:00.04
10:00:37 SQL> 
10:00:37 SQL> -- Prepare for derivation of NTILE based params:
10:00:37 SQL> 
10:00:37 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.21
10:00:37 SQL> CREATE TABLE svm6142 COMPRESS AS
10:00:37   2  SELECT
10:00:37   3  pair
10:00:37   4  ,ydate
10:00:37   5  ,prdate
10:00:37   6  ,clse
10:00:37   7  ,g6
10:00:37   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
10:00:37   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
10:00:37  10  ,CASE WHEN trend IS NULL THEN 1
10:00:37  11  	    WHEN trend =0      THEN 1
10:00:37  12  	    ELSE trend END trend
10:00:37  13  ,cm4
10:00:37  14  ,cm6
10:00:37  15  ,cm8
10:00:37  16  ,cm10
10:00:37  17  ,cm12
10:00:37  18  ,cm14
10:00:37  19  ,cm16
10:00:37  20  ,cm18
10:00:37  21  --
10:00:37  22  ,ca4
10:00:37  23  ,ca6
10:00:37  24  ,ca8
10:00:37  25  ,ca10
10:00:37  26  ,ca12
10:00:37  27  ,ca14
10:00:37  28  ,ca16
10:00:37  29  ,ca18
10:00:37  30  --
10:00:37  31  ,cx4
10:00:37  32  ,cx6
10:00:37  33  ,cx8
10:00:37  34  ,cx10
10:00:37  35  ,cx12
10:00:37  36  ,cx14
10:00:37  37  ,cx16
10:00:37  38  ,cx18
10:00:37  39  --
10:00:37  40  ,crr4
10:00:37  41  ,crr6
10:00:37  42  ,crr8
10:00:37  43  ,crr10
10:00:37  44  ,crr12
10:00:37  45  ,crr14
10:00:37  46  ,crr16
10:00:37  47  ,crr18
10:00:37  48  --
10:00:37  49  ,hh
10:00:37  50  ,d
10:00:37  51  ,w
10:00:37  52  ,mpm
10:00:37  53  ,mph
10:00:37  54  FROM svm6122
10:00:37  55  ORDER BY ydate
10:00:37  56  /

Table created.

Elapsed: 00:00:00.36
10:00:38 SQL> 
10:00:38 SQL> -- rpt
10:00:38 SQL> 
10:00:38 SQL> SELECT
10:00:38   2  pair
10:00:38   3  ,trend
10:00:38   4  ,gatt
10:00:38   5  ,COUNT(pair)
10:00:38   6  ,AVG(g6)
10:00:38   7  FROM svm6142
10:00:38   8  GROUP BY pair,trend,gatt
10:00:38   9  ORDER BY pair,trend,gatt
10:00:38  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5654 -.15617184
usd_jpy 	-1 up	      5199 .158911925
usd_jpy 	-1		66
usd_jpy 	 1 nup	      5403 -.15620008
usd_jpy 	 1 up	      4408 .162386074
usd_jpy 	 1		 6

6 rows selected.

Elapsed: 00:00:00.05
10:00:38 SQL> 
10:00:38 SQL> 
10:00:38 SQL> -- Derive NTILE based params:
10:00:38 SQL> 
10:00:38 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.15
10:00:38 SQL> CREATE TABLE svm6162 COMPRESS AS
10:00:38   2  SELECT
10:00:38   3  pair
10:00:38   4  ,ydate
10:00:38   5  ,prdate
10:00:38   6  ,clse
10:00:38   7  ,g6
10:00:38   8  ,gatt
10:00:38   9  ,gattn
10:00:38  10  ,trend
10:00:38  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
10:00:38  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
10:00:38  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
10:00:38  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
10:00:38  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
10:00:38  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
10:00:38  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
10:00:38  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
10:00:38  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
10:00:38  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
10:00:38  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
10:00:38  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
10:00:38  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
10:00:38  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
10:00:38  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
10:00:38  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
10:00:38  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
10:00:38  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
10:00:38  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
10:00:38  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
10:00:38  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
10:00:38  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
10:00:38  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
10:00:38  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
10:00:38  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
10:00:38  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
10:00:38  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
10:00:38  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
10:00:38  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
10:00:38  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
10:00:38  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
10:00:38  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
10:00:38  43  ,hh  att32
10:00:38  44  ,d   att33
10:00:38  45  ,w   att34
10:00:38  46  ,mpm att35
10:00:38  47  ,mph att36
10:00:38  48  ,trend att37
10:00:38  49  FROM svm6142
10:00:38  50  ORDER BY ydate
10:00:38  51  /

Table created.

Elapsed: 00:00:05.05
10:00:43 SQL> 
10:00:43 SQL> -- rpt
10:00:43 SQL> 
10:00:43 SQL> SELECT
10:00:43   2  pair
10:00:43   3  ,trend
10:00:43   4  ,gatt
10:00:43   5  ,COUNT(pair)
10:00:43   6  ,AVG(g6)
10:00:43   7  FROM svm6162
10:00:43   8  GROUP BY pair,trend,gatt
10:00:43   9  ORDER BY pair,trend,gatt
10:00:43  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5654 -.15617184
usd_jpy 	-1 up	      5199 .158911925
usd_jpy 	-1		66
usd_jpy 	 1 nup	      5403 -.15620008
usd_jpy 	 1 up	      4408 .162386074
usd_jpy 	 1		 6

6 rows selected.

Elapsed: 00:00:00.03
10:00:43 SQL> 
10:00:43 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
10:00:43 SQL> CREATE TABLE modsrc COMPRESS AS
10:00:43   2  SELECT
10:00:43   3  pair
10:00:43   4  ,ydate
10:00:43   5  ,prdate
10:00:43   6  ,trend
10:00:43   7  ,g6
10:00:43   8  ,gatt
10:00:43   9  ,gattn
10:00:43  10  FROM svm6162
10:00:43  11  /

Table created.

Elapsed: 00:00:00.08
10:00:43 SQL> 
10:00:43 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
10:00:43 SQL> 
10:00:43 SQL> DROP   TABLE jpy_ms610 ;

Table dropped.

Elapsed: 00:00:00.08
10:00:43 SQL> CREATE TABLE jpy_ms610 COMPRESS AS
10:00:43   2  SELECT
10:00:43   3  ydate
10:00:43   4  ,trend jpy_trend
10:00:43   5  ,g6    jpy_g6
10:00:43   6  ,gatt  jpy_gatt
10:00:43   7  ,gattn jpy_gattn
10:00:43   8  FROM modsrc
10:00:43   9  /

Table created.

Elapsed: 00:00:00.14
10:00:43 SQL> 
10:00:43 SQL> ANALYZE TABLE jpy_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
10:00:44 SQL> 
10:00:44 SQL> -- I need a copy of the attributes:
10:00:44 SQL> 
10:00:44 SQL> 
10:00:44 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.15
10:00:44 SQL> CREATE TABLE jpy_att COMPRESS AS
10:00:44   2  SELECT
10:00:44   3  ydate
10:00:44   4  ,att00 jpy_att00
10:00:44   5  ,att01 jpy_att01
10:00:44   6  ,att02 jpy_att02
10:00:44   7  ,att03 jpy_att03
10:00:44   8  ,att04 jpy_att04
10:00:44   9  ,att05 jpy_att05
10:00:44  10  ,att06 jpy_att06
10:00:44  11  ,att07 jpy_att07
10:00:44  12  ,att08 jpy_att08
10:00:44  13  ,att09 jpy_att09
10:00:44  14  ,att10 jpy_att10
10:00:44  15  ,att11 jpy_att11
10:00:44  16  ,att12 jpy_att12
10:00:44  17  ,att13 jpy_att13
10:00:44  18  ,att14 jpy_att14
10:00:44  19  ,att15 jpy_att15
10:00:44  20  ,att16 jpy_att16
10:00:44  21  ,att17 jpy_att17
10:00:44  22  ,att18 jpy_att18
10:00:44  23  ,att19 jpy_att19
10:00:44  24  ,att20 jpy_att20
10:00:44  25  ,att21 jpy_att21
10:00:44  26  ,att22 jpy_att22
10:00:44  27  ,att23 jpy_att23
10:00:44  28  ,att24 jpy_att24
10:00:44  29  ,att25 jpy_att25
10:00:44  30  ,att26 jpy_att26
10:00:44  31  ,att27 jpy_att27
10:00:44  32  ,att28 jpy_att28
10:00:44  33  ,att29 jpy_att29
10:00:44  34  ,att30 jpy_att30
10:00:44  35  ,att31 jpy_att31
10:00:44  36  ,att32 jpy_att32
10:00:44  37  ,att33 jpy_att33
10:00:44  38  ,att34 jpy_att34
10:00:44  39  ,att35 jpy_att35
10:00:44  40  ,att36 jpy_att36
10:00:44  41  ,att37 jpy_att37
10:00:44  42  FROM svm6162
10:00:44  43  /

Table created.

Elapsed: 00:00:00.18
10:00:44 SQL> 
10:00:44 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.50
10:00:44 SQL> 
10:00:44 SQL> -- rpt
10:00:44 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     20736

Elapsed: 00:00:00.91
10:00:45 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     20736

Elapsed: 00:00:00.00
10:00:45 SQL> 
10:00:45 SQL> --
10:00:45 SQL> -- cad610.sql
10:00:45 SQL> --
10:00:45 SQL> 
10:00:45 SQL> -- Creates views and tables for backtesting a forex SVM strategy
10:00:45 SQL> 
10:00:45 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.38
10:00:46 SQL> 
10:00:46 SQL> -- I created di5min here:
10:00:46 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
10:00:46 SQL> 
10:00:46 SQL> CREATE OR REPLACE VIEW svm6102 AS
10:00:46   2  SELECT
10:00:46   3  pair
10:00:46   4  ,ydate
10:00:46   5  ,prdate
10:00:46   6  ,rownum rnum -- acts as t in my time-series
10:00:46   7  ,clse
10:00:46   8  -- Derive a bunch of attributes from clse, the latest price:
10:00:46   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
10:00:46  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
10:00:46  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
10:00:46  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
10:00:46  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
10:00:46  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
10:00:46  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
10:00:46  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
10:00:46  17  --
10:00:46  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
10:00:46  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
10:00:46  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
10:00:46  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
10:00:46  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
10:00:46  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
10:00:46  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
10:00:46  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
10:00:46  26  --
10:00:46  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
10:00:46  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
10:00:46  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
10:00:46  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
10:00:46  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
10:00:46  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
10:00:46  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
10:00:46  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
10:00:46  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
10:00:46  36  FROM di5min WHERE pair LIKE'%cad%'
10:00:46  37  ORDER BY ydate
10:00:46  38  /

View created.

Elapsed: 00:00:00.05
10:00:46 SQL> 
10:00:46 SQL> -- rpt
10:00:46 SQL> 
10:00:46 SQL> SELECT
10:00:46   2  pair
10:00:46   3  ,COUNT(pair)
10:00:46   4  ,MIN(clse),MAX(clse)
10:00:46   5  ,MIN(avg6),MAX(avg6)
10:00:46   6  ,MIN(ydate),MAX(ydate)
10:00:46   7  FROM svm6102
10:00:46   8  GROUP BY pair
10:00:46   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_cad       20734	 .9981	   1.0371 .999404795 1.03438904 2010-09-15 22:25:01 2010-12-24 21:55:00

Elapsed: 00:00:00.89
10:00:47 SQL> 
10:00:47 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
10:00:47 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.26
10:00:47 SQL> CREATE TABLE svm6122 COMPRESS AS
10:00:47   2  SELECT
10:00:47   3  pair
10:00:47   4  ,ydate
10:00:47   5  ,prdate
10:00:47   6  ,clse
10:00:47   7  -- g6 is important. I want to predict g6:
10:00:47   8  ,ld6 - clse g6
10:00:47   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
10:00:47  10  -- I want more attributes from the ones I derived above:
10:00:47  11  -- clse relation to moving-min
10:00:47  12  ,clse-min4  cm4
10:00:47  13  ,clse-min6  cm6
10:00:47  14  ,clse-min8  cm8
10:00:47  15  ,clse-min10 cm10
10:00:47  16  ,clse-min12 cm12
10:00:47  17  ,clse-min14 cm14
10:00:47  18  ,clse-min16 cm16
10:00:47  19  ,clse-min18 cm18
10:00:47  20  -- clse relation to moving-avg
10:00:47  21  ,clse-avg4  ca4
10:00:47  22  ,clse-avg6  ca6
10:00:47  23  ,clse-avg8  ca8
10:00:47  24  ,clse-avg10 ca10
10:00:47  25  ,clse-avg12 ca12
10:00:47  26  ,clse-avg14 ca14
10:00:47  27  ,clse-avg16 ca16
10:00:47  28  ,clse-avg18 ca18
10:00:47  29  -- clse relation to moving-max
10:00:47  30  ,clse-max4  cx4
10:00:47  31  ,clse-max6  cx6
10:00:47  32  ,clse-max8  cx8
10:00:47  33  ,clse-max10 cx10
10:00:47  34  ,clse-max12 cx12
10:00:47  35  ,clse-max14 cx14
10:00:47  36  ,clse-max16 cx16
10:00:47  37  ,clse-max18 cx18
10:00:47  38  -- Derive more attributes.
10:00:47  39  -- I want to use CORR() here to help SVM see the shape of the series.
10:00:47  40  -- But COVAR_POP is more stable:
10:00:47  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
10:00:47  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
10:00:47  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
10:00:47  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
10:00:47  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
10:00:47  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
10:00:47  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
10:00:47  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
10:00:47  49  -- Derive date related attributes:
10:00:47  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
10:00:47  51  ,0+TO_CHAR(ydate,'D')d
10:00:47  52  ,0+TO_CHAR(ydate,'W')w
10:00:47  53  -- mpm stands for minutes-past-midnight:
10:00:47  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
10:00:47  55  -- mph stands for minutes-past-hour:
10:00:47  56  ,0+TO_CHAR(ydate,'MI')mph
10:00:47  57  FROM svm6102
10:00:47  58  ORDER BY ydate
10:00:47  59  /

Table created.

Elapsed: 00:00:02.12
10:00:49 SQL> 
10:00:49 SQL> -- rpt
10:00:49 SQL> 
10:00:49 SQL> SELECT
10:00:49   2  pair
10:00:49   3  ,COUNT(pair)
10:00:49   4  ,MIN(clse),MAX(clse)
10:00:49   5  ,MIN(ydate),MAX(ydate)
10:00:49   6  FROM svm6122
10:00:49   7  GROUP BY pair
10:00:49   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_cad       20734	 .9981	   1.0371 2010-09-15 22:25:01 2010-12-24 21:55:00

Elapsed: 00:00:00.04
10:00:49 SQL> 
10:00:49 SQL> -- Prepare for derivation of NTILE based params:
10:00:49 SQL> 
10:00:49 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.25
10:00:49 SQL> CREATE TABLE svm6142 COMPRESS AS
10:00:49   2  SELECT
10:00:49   3  pair
10:00:49   4  ,ydate
10:00:49   5  ,prdate
10:00:49   6  ,clse
10:00:49   7  ,g6
10:00:49   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
10:00:49   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
10:00:49  10  ,CASE WHEN trend IS NULL THEN 1
10:00:49  11  	    WHEN trend =0      THEN 1
10:00:49  12  	    ELSE trend END trend
10:00:49  13  ,cm4
10:00:49  14  ,cm6
10:00:49  15  ,cm8
10:00:49  16  ,cm10
10:00:49  17  ,cm12
10:00:49  18  ,cm14
10:00:49  19  ,cm16
10:00:49  20  ,cm18
10:00:49  21  --
10:00:49  22  ,ca4
10:00:49  23  ,ca6
10:00:49  24  ,ca8
10:00:49  25  ,ca10
10:00:49  26  ,ca12
10:00:49  27  ,ca14
10:00:49  28  ,ca16
10:00:49  29  ,ca18
10:00:49  30  --
10:00:49  31  ,cx4
10:00:49  32  ,cx6
10:00:49  33  ,cx8
10:00:49  34  ,cx10
10:00:49  35  ,cx12
10:00:49  36  ,cx14
10:00:49  37  ,cx16
10:00:49  38  ,cx18
10:00:49  39  --
10:00:49  40  ,crr4
10:00:49  41  ,crr6
10:00:49  42  ,crr8
10:00:49  43  ,crr10
10:00:49  44  ,crr12
10:00:49  45  ,crr14
10:00:49  46  ,crr16
10:00:49  47  ,crr18
10:00:49  48  --
10:00:49  49  ,hh
10:00:49  50  ,d
10:00:49  51  ,w
10:00:49  52  ,mpm
10:00:49  53  ,mph
10:00:49  54  FROM svm6122
10:00:49  55  ORDER BY ydate
10:00:49  56  /

Table created.

Elapsed: 00:00:00.39
10:00:50 SQL> 
10:00:50 SQL> -- rpt
10:00:50 SQL> 
10:00:50 SQL> SELECT
10:00:50   2  pair
10:00:50   3  ,trend
10:00:50   4  ,gatt
10:00:50   5  ,COUNT(pair)
10:00:50   6  ,AVG(g6)
10:00:50   7  FROM svm6142
10:00:50   8  GROUP BY pair,trend,gatt
10:00:50   9  ORDER BY pair,trend,gatt
10:00:50  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7678 -.00136161
usd_cad 	-1 up	      3375 .003327746
usd_cad 	-1		26
usd_cad 	 1 nup	      7021 -.00163282
usd_cad 	 1 up	      2588 .003590763
usd_cad 	 1		46

6 rows selected.

Elapsed: 00:00:00.04
10:00:50 SQL> 
10:00:50 SQL> 
10:00:50 SQL> -- Derive NTILE based params:
10:00:50 SQL> 
10:00:50 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.15
10:00:50 SQL> CREATE TABLE svm6162 COMPRESS AS
10:00:50   2  SELECT
10:00:50   3  pair
10:00:50   4  ,ydate
10:00:50   5  ,prdate
10:00:50   6  ,clse
10:00:50   7  ,g6
10:00:50   8  ,gatt
10:00:50   9  ,gattn
10:00:50  10  ,trend
10:00:50  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
10:00:50  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
10:00:50  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
10:00:50  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
10:00:50  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
10:00:50  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
10:00:50  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
10:00:50  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
10:00:50  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
10:00:50  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
10:00:50  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
10:00:50  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
10:00:50  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
10:00:50  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
10:00:50  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
10:00:50  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
10:00:50  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
10:00:50  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
10:00:50  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
10:00:50  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
10:00:50  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
10:00:50  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
10:00:50  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
10:00:50  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
10:00:50  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
10:00:50  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
10:00:50  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
10:00:50  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
10:00:50  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
10:00:50  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
10:00:50  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
10:00:50  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
10:00:50  43  ,hh  att32
10:00:50  44  ,d   att33
10:00:50  45  ,w   att34
10:00:50  46  ,mpm att35
10:00:50  47  ,mph att36
10:00:50  48  ,trend att37
10:00:50  49  FROM svm6142
10:00:50  50  ORDER BY ydate
10:00:50  51  /

Table created.

Elapsed: 00:00:05.13
10:00:55 SQL> 
10:00:55 SQL> -- rpt
10:00:55 SQL> 
10:00:55 SQL> SELECT
10:00:55   2  pair
10:00:55   3  ,trend
10:00:55   4  ,gatt
10:00:55   5  ,COUNT(pair)
10:00:55   6  ,AVG(g6)
10:00:55   7  FROM svm6162
10:00:55   8  GROUP BY pair,trend,gatt
10:00:55   9  ORDER BY pair,trend,gatt
10:00:55  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7678 -.00136161
usd_cad 	-1 up	      3375 .003327746
usd_cad 	-1		26
usd_cad 	 1 nup	      7021 -.00163282
usd_cad 	 1 up	      2588 .003590763
usd_cad 	 1		46

6 rows selected.

Elapsed: 00:00:00.03
10:00:55 SQL> 
10:00:55 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.54
10:00:56 SQL> CREATE TABLE modsrc COMPRESS AS
10:00:56   2  SELECT
10:00:56   3  pair
10:00:56   4  ,ydate
10:00:56   5  ,prdate
10:00:56   6  ,trend
10:00:56   7  ,g6
10:00:56   8  ,gatt
10:00:56   9  ,gattn
10:00:56  10  FROM svm6162
10:00:56  11  /

Table created.

Elapsed: 00:00:00.09
10:00:56 SQL> 
10:00:56 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.22
10:00:56 SQL> 
10:00:56 SQL> DROP   TABLE cad_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
10:00:56 SQL> CREATE TABLE cad_ms610 COMPRESS AS
10:00:56   2  SELECT
10:00:56   3  ydate
10:00:56   4  ,trend cad_trend
10:00:56   5  ,g6    cad_g6
10:00:56   6  ,gatt  cad_gatt
10:00:56   7  ,gattn cad_gattn
10:00:56   8  FROM modsrc
10:00:56   9  /

Table created.

Elapsed: 00:00:00.08
10:00:56 SQL> 
10:00:56 SQL> ANALYZE TABLE cad_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
10:00:56 SQL> 
10:00:56 SQL> -- I need a copy of the attributes:
10:00:56 SQL> 
10:00:56 SQL> 
10:00:56 SQL> DROP   TABLE cad_att;

Table dropped.

Elapsed: 00:00:00.05
10:00:56 SQL> CREATE TABLE cad_att COMPRESS AS
10:00:56   2  SELECT
10:00:56   3  ydate
10:00:56   4  ,att00 cad_att00
10:00:56   5  ,att01 cad_att01
10:00:56   6  ,att02 cad_att02
10:00:56   7  ,att03 cad_att03
10:00:56   8  ,att04 cad_att04
10:00:56   9  ,att05 cad_att05
10:00:56  10  ,att06 cad_att06
10:00:56  11  ,att07 cad_att07
10:00:56  12  ,att08 cad_att08
10:00:56  13  ,att09 cad_att09
10:00:56  14  ,att10 cad_att10
10:00:56  15  ,att11 cad_att11
10:00:56  16  ,att12 cad_att12
10:00:56  17  ,att13 cad_att13
10:00:56  18  ,att14 cad_att14
10:00:56  19  ,att15 cad_att15
10:00:56  20  ,att16 cad_att16
10:00:56  21  ,att17 cad_att17
10:00:56  22  ,att18 cad_att18
10:00:56  23  ,att19 cad_att19
10:00:56  24  ,att20 cad_att20
10:00:56  25  ,att21 cad_att21
10:00:56  26  ,att22 cad_att22
10:00:56  27  ,att23 cad_att23
10:00:56  28  ,att24 cad_att24
10:00:56  29  ,att25 cad_att25
10:00:56  30  ,att26 cad_att26
10:00:56  31  ,att27 cad_att27
10:00:56  32  ,att28 cad_att28
10:00:56  33  ,att29 cad_att29
10:00:56  34  ,att30 cad_att30
10:00:56  35  ,att31 cad_att31
10:00:56  36  ,att32 cad_att32
10:00:56  37  ,att33 cad_att33
10:00:56  38  ,att34 cad_att34
10:00:56  39  ,att35 cad_att35
10:00:56  40  ,att36 cad_att36
10:00:56  41  ,att37 cad_att37
10:00:56  42  FROM svm6162
10:00:56  43  /

Table created.

Elapsed: 00:00:00.19
10:00:57 SQL> 
10:00:57 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
10:00:57 SQL> 
10:00:57 SQL> -- rpt
10:00:57 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     20734

Elapsed: 00:00:00.88
10:00:58 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
     20734

Elapsed: 00:00:00.00
10:00:58 SQL> 
10:00:58 SQL> --
10:00:58 SQL> -- chf610.sql
10:00:58 SQL> --
10:00:58 SQL> 
10:00:58 SQL> -- Creates views and tables for backtesting a forex SVM strategy
10:00:58 SQL> 
10:00:58 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.51
10:00:58 SQL> 
10:00:58 SQL> -- I created di5min here:
10:00:58 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
10:00:58 SQL> 
10:00:58 SQL> CREATE OR REPLACE VIEW svm6102 AS
10:00:58   2  SELECT
10:00:58   3  pair
10:00:58   4  ,ydate
10:00:58   5  ,prdate
10:00:58   6  ,rownum rnum -- acts as t in my time-series
10:00:58   7  ,clse
10:00:58   8  -- Derive a bunch of attributes from clse, the latest price:
10:00:58   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
10:00:58  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
10:00:58  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
10:00:58  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
10:00:58  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
10:00:58  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
10:00:58  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
10:00:58  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
10:00:58  17  --
10:00:58  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
10:00:58  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
10:00:58  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
10:00:58  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
10:00:58  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
10:00:58  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
10:00:58  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
10:00:58  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
10:00:58  26  --
10:00:58  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
10:00:58  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
10:00:58  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
10:00:58  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
10:00:58  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
10:00:58  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
10:00:58  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
10:00:58  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
10:00:58  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
10:00:58  36  FROM di5min WHERE pair LIKE'%chf%'
10:00:58  37  ORDER BY ydate
10:00:58  38  /

View created.

Elapsed: 00:00:00.07
10:00:58 SQL> 
10:00:58 SQL> -- rpt
10:00:58 SQL> 
10:00:58 SQL> SELECT
10:00:58   2  pair
10:00:58   3  ,COUNT(pair)
10:00:58   4  ,MIN(clse),MAX(clse)
10:00:58   5  ,MIN(avg6),MAX(avg6)
10:00:58   6  ,MIN(ydate),MAX(ydate)
10:00:58   7  FROM svm6102
10:00:58   8  GROUP BY pair
10:00:58   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_chf       20737	 .9471	   1.0177 .950038356 1.01613699 2010-09-15 22:25:01 2010-12-24 21:55:00

Elapsed: 00:00:00.90
10:00:59 SQL> 
10:00:59 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
10:00:59 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.23
10:01:00 SQL> CREATE TABLE svm6122 COMPRESS AS
10:01:00   2  SELECT
10:01:00   3  pair
10:01:00   4  ,ydate
10:01:00   5  ,prdate
10:01:00   6  ,clse
10:01:00   7  -- g6 is important. I want to predict g6:
10:01:00   8  ,ld6 - clse g6
10:01:00   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
10:01:00  10  -- I want more attributes from the ones I derived above:
10:01:00  11  -- clse relation to moving-min
10:01:00  12  ,clse-min4  cm4
10:01:00  13  ,clse-min6  cm6
10:01:00  14  ,clse-min8  cm8
10:01:00  15  ,clse-min10 cm10
10:01:00  16  ,clse-min12 cm12
10:01:00  17  ,clse-min14 cm14
10:01:00  18  ,clse-min16 cm16
10:01:00  19  ,clse-min18 cm18
10:01:00  20  -- clse relation to moving-avg
10:01:00  21  ,clse-avg4  ca4
10:01:00  22  ,clse-avg6  ca6
10:01:00  23  ,clse-avg8  ca8
10:01:00  24  ,clse-avg10 ca10
10:01:00  25  ,clse-avg12 ca12
10:01:00  26  ,clse-avg14 ca14
10:01:00  27  ,clse-avg16 ca16
10:01:00  28  ,clse-avg18 ca18
10:01:00  29  -- clse relation to moving-max
10:01:00  30  ,clse-max4  cx4
10:01:00  31  ,clse-max6  cx6
10:01:00  32  ,clse-max8  cx8
10:01:00  33  ,clse-max10 cx10
10:01:00  34  ,clse-max12 cx12
10:01:00  35  ,clse-max14 cx14
10:01:00  36  ,clse-max16 cx16
10:01:00  37  ,clse-max18 cx18
10:01:00  38  -- Derive more attributes.
10:01:00  39  -- I want to use CORR() here to help SVM see the shape of the series.
10:01:00  40  -- But COVAR_POP is more stable:
10:01:00  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
10:01:00  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
10:01:00  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
10:01:00  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
10:01:00  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
10:01:00  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
10:01:00  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
10:01:00  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
10:01:00  49  -- Derive date related attributes:
10:01:00  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
10:01:00  51  ,0+TO_CHAR(ydate,'D')d
10:01:00  52  ,0+TO_CHAR(ydate,'W')w
10:01:00  53  -- mpm stands for minutes-past-midnight:
10:01:00  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
10:01:00  55  -- mph stands for minutes-past-hour:
10:01:00  56  ,0+TO_CHAR(ydate,'MI')mph
10:01:00  57  FROM svm6102
10:01:00  58  ORDER BY ydate
10:01:00  59  /

Table created.

Elapsed: 00:00:02.12
10:01:02 SQL> 
10:01:02 SQL> -- rpt
10:01:02 SQL> 
10:01:02 SQL> SELECT
10:01:02   2  pair
10:01:02   3  ,COUNT(pair)
10:01:02   4  ,MIN(clse),MAX(clse)
10:01:02   5  ,MIN(ydate),MAX(ydate)
10:01:02   6  FROM svm6122
10:01:02   7  GROUP BY pair
10:01:02   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_chf       20737	 .9471	   1.0177 2010-09-15 22:25:01 2010-12-24 21:55:00

Elapsed: 00:00:00.03
10:01:02 SQL> 
10:01:02 SQL> -- Prepare for derivation of NTILE based params:
10:01:02 SQL> 
10:01:02 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.29
10:01:02 SQL> CREATE TABLE svm6142 COMPRESS AS
10:01:02   2  SELECT
10:01:02   3  pair
10:01:02   4  ,ydate
10:01:02   5  ,prdate
10:01:02   6  ,clse
10:01:02   7  ,g6
10:01:02   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
10:01:02   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
10:01:02  10  ,CASE WHEN trend IS NULL THEN 1
10:01:02  11  	    WHEN trend =0      THEN 1
10:01:02  12  	    ELSE trend END trend
10:01:02  13  ,cm4
10:01:02  14  ,cm6
10:01:02  15  ,cm8
10:01:02  16  ,cm10
10:01:02  17  ,cm12
10:01:02  18  ,cm14
10:01:02  19  ,cm16
10:01:02  20  ,cm18
10:01:02  21  --
10:01:02  22  ,ca4
10:01:02  23  ,ca6
10:01:02  24  ,ca8
10:01:02  25  ,ca10
10:01:02  26  ,ca12
10:01:02  27  ,ca14
10:01:02  28  ,ca16
10:01:02  29  ,ca18
10:01:02  30  --
10:01:02  31  ,cx4
10:01:02  32  ,cx6
10:01:02  33  ,cx8
10:01:02  34  ,cx10
10:01:02  35  ,cx12
10:01:02  36  ,cx14
10:01:02  37  ,cx16
10:01:02  38  ,cx18
10:01:02  39  --
10:01:02  40  ,crr4
10:01:02  41  ,crr6
10:01:02  42  ,crr8
10:01:02  43  ,crr10
10:01:02  44  ,crr12
10:01:02  45  ,crr14
10:01:02  46  ,crr16
10:01:02  47  ,crr18
10:01:02  48  --
10:01:02  49  ,hh
10:01:02  50  ,d
10:01:02  51  ,w
10:01:02  52  ,mpm
10:01:02  53  ,mph
10:01:02  54  FROM svm6122
10:01:02  55  ORDER BY ydate
10:01:02  56  /

Table created.

Elapsed: 00:00:01.10
10:01:03 SQL> 
10:01:03 SQL> -- rpt
10:01:03 SQL> 
10:01:03 SQL> SELECT
10:01:03   2  pair
10:01:03   3  ,trend
10:01:03   4  ,gatt
10:01:03   5  ,COUNT(pair)
10:01:03   6  ,AVG(g6)
10:01:03   7  FROM svm6142
10:01:03   8  GROUP BY pair,trend,gatt
10:01:03   9  ORDER BY pair,trend,gatt
10:01:03  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7524 -.00182455
usd_chf 	-1 up	      3335 .003944738
usd_chf 	-1		20
usd_chf 	 1 nup	      7122 -.00171477
usd_chf 	 1 up	      2684 .003708453
usd_chf 	 1		52

6 rows selected.

Elapsed: 00:00:00.05
10:01:03 SQL> 
10:01:03 SQL> 
10:01:03 SQL> -- Derive NTILE based params:
10:01:03 SQL> 
10:01:03 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.13
10:01:03 SQL> CREATE TABLE svm6162 COMPRESS AS
10:01:03   2  SELECT
10:01:03   3  pair
10:01:03   4  ,ydate
10:01:03   5  ,prdate
10:01:03   6  ,clse
10:01:03   7  ,g6
10:01:03   8  ,gatt
10:01:03   9  ,gattn
10:01:03  10  ,trend
10:01:03  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
10:01:03  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
10:01:03  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
10:01:03  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
10:01:03  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
10:01:03  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
10:01:03  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
10:01:03  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
10:01:03  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
10:01:03  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
10:01:03  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
10:01:03  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
10:01:03  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
10:01:03  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
10:01:03  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
10:01:03  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
10:01:03  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
10:01:03  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
10:01:03  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
10:01:03  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
10:01:03  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
10:01:03  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
10:01:03  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
10:01:03  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
10:01:03  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
10:01:03  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
10:01:03  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
10:01:03  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
10:01:03  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
10:01:03  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
10:01:03  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
10:01:03  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
10:01:03  43  ,hh  att32
10:01:03  44  ,d   att33
10:01:03  45  ,w   att34
10:01:03  46  ,mpm att35
10:01:03  47  ,mph att36
10:01:03  48  ,trend att37
10:01:03  49  FROM svm6142
10:01:03  50  ORDER BY ydate
10:01:03  51  /

Table created.

Elapsed: 00:00:05.14
10:01:08 SQL> 
10:01:08 SQL> -- rpt
10:01:08 SQL> 
10:01:08 SQL> SELECT
10:01:08   2  pair
10:01:08   3  ,trend
10:01:08   4  ,gatt
10:01:08   5  ,COUNT(pair)
10:01:08   6  ,AVG(g6)
10:01:08   7  FROM svm6162
10:01:08   8  GROUP BY pair,trend,gatt
10:01:08   9  ORDER BY pair,trend,gatt
10:01:08  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7524 -.00182455
usd_chf 	-1 up	      3335 .003944738
usd_chf 	-1		20
usd_chf 	 1 nup	      7122 -.00171477
usd_chf 	 1 up	      2684 .003708453
usd_chf 	 1		52

6 rows selected.

Elapsed: 00:00:00.03
10:01:08 SQL> 
10:01:08 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
10:01:09 SQL> CREATE TABLE modsrc COMPRESS AS
10:01:09   2  SELECT
10:01:09   3  pair
10:01:09   4  ,ydate
10:01:09   5  ,prdate
10:01:09   6  ,trend
10:01:09   7  ,g6
10:01:09   8  ,gatt
10:01:09   9  ,gattn
10:01:09  10  FROM svm6162
10:01:09  11  /

Table created.

Elapsed: 00:00:00.10
10:01:09 SQL> 
10:01:09 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
10:01:09 SQL> 
10:01:09 SQL> DROP   TABLE chf_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
10:01:09 SQL> CREATE TABLE chf_ms610 COMPRESS AS
10:01:09   2  SELECT
10:01:09   3  ydate
10:01:09   4  ,trend chf_trend
10:01:09   5  ,g6    chf_g6
10:01:09   6  ,gatt  chf_gatt
10:01:09   7  ,gattn chf_gattn
10:01:09   8  FROM modsrc
10:01:09   9  /

Table created.

Elapsed: 00:00:00.09
10:01:09 SQL> 
10:01:09 SQL> ANALYZE TABLE chf_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
10:01:09 SQL> 
10:01:09 SQL> -- I need a copy of the attributes:
10:01:09 SQL> 
10:01:09 SQL> 
10:01:09 SQL> DROP   TABLE chf_att;

Table dropped.

Elapsed: 00:00:00.05
10:01:09 SQL> CREATE TABLE chf_att COMPRESS AS
10:01:09   2  SELECT
10:01:09   3  ydate
10:01:09   4  ,att00 chf_att00
10:01:09   5  ,att01 chf_att01
10:01:09   6  ,att02 chf_att02
10:01:09   7  ,att03 chf_att03
10:01:09   8  ,att04 chf_att04
10:01:09   9  ,att05 chf_att05
10:01:09  10  ,att06 chf_att06
10:01:09  11  ,att07 chf_att07
10:01:09  12  ,att08 chf_att08
10:01:09  13  ,att09 chf_att09
10:01:09  14  ,att10 chf_att10
10:01:09  15  ,att11 chf_att11
10:01:09  16  ,att12 chf_att12
10:01:09  17  ,att13 chf_att13
10:01:09  18  ,att14 chf_att14
10:01:09  19  ,att15 chf_att15
10:01:09  20  ,att16 chf_att16
10:01:09  21  ,att17 chf_att17
10:01:09  22  ,att18 chf_att18
10:01:09  23  ,att19 chf_att19
10:01:09  24  ,att20 chf_att20
10:01:09  25  ,att21 chf_att21
10:01:09  26  ,att22 chf_att22
10:01:09  27  ,att23 chf_att23
10:01:09  28  ,att24 chf_att24
10:01:09  29  ,att25 chf_att25
10:01:09  30  ,att26 chf_att26
10:01:09  31  ,att27 chf_att27
10:01:09  32  ,att28 chf_att28
10:01:09  33  ,att29 chf_att29
10:01:09  34  ,att30 chf_att30
10:01:09  35  ,att31 chf_att31
10:01:09  36  ,att32 chf_att32
10:01:09  37  ,att33 chf_att33
10:01:09  38  ,att34 chf_att34
10:01:09  39  ,att35 chf_att35
10:01:09  40  ,att36 chf_att36
10:01:09  41  ,att37 chf_att37
10:01:09  42  FROM svm6162
10:01:09  43  /

Table created.

Elapsed: 00:00:00.18
10:01:09 SQL> 
10:01:09 SQL> ANALYZE TABLE chf_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
10:01:10 SQL> 
10:01:10 SQL> -- rpt
10:01:10 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     20737

Elapsed: 00:00:00.85
10:01:11 SQL> SELECT COUNT(*)FROM chf_att;

  COUNT(*)
----------
     20737

Elapsed: 00:00:00.00
10:01:11 SQL> 
10:01:11 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
