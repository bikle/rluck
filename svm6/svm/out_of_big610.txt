
SQL*Plus: Release 11.2.0.1.0 Production on Mon Jan 3 03:52:14 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

03:52:14 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
03:52:14 SQL> 03:52:14 SQL> --
03:52:14 SQL> -- eur610.sql
03:52:14 SQL> --
03:52:14 SQL> 
03:52:14 SQL> -- Creates views and tables for backtesting a forex SVM strategy
03:52:14 SQL> 
03:52:14 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.01
03:52:14 SQL> 
03:52:14 SQL> -- I created di5min here:
03:52:14 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
03:52:14 SQL> 
03:52:14 SQL> CREATE OR REPLACE VIEW svm6102 AS
03:52:14   2  SELECT
03:52:14   3  pair
03:52:14   4  ,ydate
03:52:14   5  ,prdate
03:52:14   6  ,rownum rnum -- acts as t in my time-series
03:52:14   7  ,clse
03:52:14   8  -- Derive a bunch of attributes from clse, the latest price:
03:52:14   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
03:52:14  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
03:52:14  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
03:52:14  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
03:52:14  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
03:52:14  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
03:52:14  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
03:52:14  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
03:52:14  17  --
03:52:14  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
03:52:14  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
03:52:14  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
03:52:14  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
03:52:14  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
03:52:14  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
03:52:14  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
03:52:14  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
03:52:14  26  --
03:52:14  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
03:52:14  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
03:52:14  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
03:52:14  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
03:52:14  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
03:52:14  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
03:52:14  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
03:52:14  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
03:52:14  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
03:52:14  36  FROM di5min WHERE pair LIKE'%eur%'
03:52:14  37  AND ydate > sysdate - 95
03:52:14  38  ORDER BY ydate
03:52:14  39  /

View created.

Elapsed: 00:00:00.09
03:52:14 SQL> 
03:52:14 SQL> -- rpt
03:52:14 SQL> 
03:52:14 SQL> SELECT
03:52:14   2  pair
03:52:14   3  ,COUNT(pair)
03:52:14   4  ,MIN(clse),MAX(clse)
03:52:14   5  ,MIN(avg6),MAX(avg6)
03:52:14   6  ,MIN(ydate),MAX(ydate)
03:52:14   7  FROM svm6102
03:52:14   8  GROUP BY pair
03:52:14   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_usd       19259    1.29735	   1.4273 1.29875103 1.42436233 2010-09-30 03:55:01 2011-01-03 03:45:00

Elapsed: 00:00:00.88
03:52:15 SQL> 
03:52:15 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
03:52:15 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.17
03:52:15 SQL> CREATE TABLE svm6122 COMPRESS AS
03:52:15   2  SELECT
03:52:15   3  pair
03:52:15   4  ,ydate
03:52:15   5  ,prdate
03:52:15   6  ,clse
03:52:15   7  -- g6 is important. I want to predict g6:
03:52:15   8  ,ld6 - clse g6
03:52:15   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
03:52:15  10  -- I want more attributes from the ones I derived above:
03:52:15  11  -- clse relation to moving-min
03:52:15  12  ,clse-min4  cm4
03:52:15  13  ,clse-min6  cm6
03:52:15  14  ,clse-min8  cm8
03:52:15  15  ,clse-min10 cm10
03:52:15  16  ,clse-min12 cm12
03:52:15  17  ,clse-min14 cm14
03:52:15  18  ,clse-min16 cm16
03:52:15  19  ,clse-min18 cm18
03:52:15  20  -- clse relation to moving-avg
03:52:15  21  ,clse-avg4  ca4
03:52:15  22  ,clse-avg6  ca6
03:52:15  23  ,clse-avg8  ca8
03:52:15  24  ,clse-avg10 ca10
03:52:15  25  ,clse-avg12 ca12
03:52:15  26  ,clse-avg14 ca14
03:52:15  27  ,clse-avg16 ca16
03:52:15  28  ,clse-avg18 ca18
03:52:15  29  -- clse relation to moving-max
03:52:15  30  ,clse-max4  cx4
03:52:15  31  ,clse-max6  cx6
03:52:15  32  ,clse-max8  cx8
03:52:15  33  ,clse-max10 cx10
03:52:15  34  ,clse-max12 cx12
03:52:15  35  ,clse-max14 cx14
03:52:15  36  ,clse-max16 cx16
03:52:15  37  ,clse-max18 cx18
03:52:15  38  -- Derive more attributes.
03:52:15  39  -- I want to use CORR() here to help SVM see the shape of the series.
03:52:15  40  -- But COVAR_POP is more stable:
03:52:15  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
03:52:15  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
03:52:15  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
03:52:15  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
03:52:15  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
03:52:15  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
03:52:15  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
03:52:15  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
03:52:15  49  -- Derive date related attributes:
03:52:15  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
03:52:15  51  ,0+TO_CHAR(ydate,'D')d
03:52:15  52  ,0+TO_CHAR(ydate,'W')w
03:52:15  53  -- mpm stands for minutes-past-midnight:
03:52:15  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
03:52:15  55  -- mph stands for minutes-past-hour:
03:52:15  56  ,0+TO_CHAR(ydate,'MI')mph
03:52:15  57  FROM svm6102
03:52:15  58  ORDER BY ydate
03:52:15  59  /

Table created.

Elapsed: 00:00:02.34
03:52:17 SQL> 
03:52:17 SQL> -- rpt
03:52:17 SQL> 
03:52:17 SQL> SELECT
03:52:17   2  pair
03:52:17   3  ,COUNT(pair)
03:52:17   4  ,MIN(clse),MAX(clse)
03:52:17   5  ,MIN(ydate),MAX(ydate)
03:52:17   6  FROM svm6122
03:52:17   7  GROUP BY pair
03:52:17   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_usd       19259    1.29735	   1.4273 2010-09-30 03:55:01 2011-01-03 03:45:00

Elapsed: 00:00:00.08
03:52:17 SQL> 
03:52:17 SQL> -- Prepare for derivation of NTILE based params:
03:52:17 SQL> 
03:52:17 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.21
03:52:17 SQL> CREATE TABLE svm6142 COMPRESS AS
03:52:17   2  SELECT
03:52:17   3  pair
03:52:17   4  ,ydate
03:52:17   5  ,prdate
03:52:17   6  ,clse
03:52:17   7  ,g6
03:52:17   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
03:52:17   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
03:52:17  10  ,CASE WHEN trend IS NULL THEN 1
03:52:17  11  	    WHEN trend =0      THEN 1
03:52:17  12  	    ELSE trend END trend
03:52:17  13  ,cm4
03:52:17  14  ,cm6
03:52:17  15  ,cm8
03:52:17  16  ,cm10
03:52:17  17  ,cm12
03:52:17  18  ,cm14
03:52:17  19  ,cm16
03:52:17  20  ,cm18
03:52:17  21  --
03:52:17  22  ,ca4
03:52:17  23  ,ca6
03:52:17  24  ,ca8
03:52:17  25  ,ca10
03:52:17  26  ,ca12
03:52:17  27  ,ca14
03:52:17  28  ,ca16
03:52:17  29  ,ca18
03:52:17  30  --
03:52:17  31  ,cx4
03:52:17  32  ,cx6
03:52:17  33  ,cx8
03:52:17  34  ,cx10
03:52:17  35  ,cx12
03:52:17  36  ,cx14
03:52:17  37  ,cx16
03:52:17  38  ,cx18
03:52:17  39  --
03:52:17  40  ,crr4
03:52:17  41  ,crr6
03:52:17  42  ,crr8
03:52:17  43  ,crr10
03:52:17  44  ,crr12
03:52:17  45  ,crr14
03:52:17  46  ,crr16
03:52:17  47  ,crr18
03:52:17  48  --
03:52:17  49  ,hh
03:52:17  50  ,d
03:52:17  51  ,w
03:52:17  52  ,mpm
03:52:17  53  ,mph
03:52:17  54  FROM svm6122
03:52:17  55  ORDER BY ydate
03:52:17  56  /

Table created.

Elapsed: 00:00:00.38
03:52:18 SQL> 
03:52:18 SQL> -- rpt
03:52:18 SQL> 
03:52:18 SQL> SELECT
03:52:18   2  pair
03:52:18   3  ,trend
03:52:18   4  ,gatt
03:52:18   5  ,COUNT(pair)
03:52:18   6  ,AVG(g6)
03:52:18   7  FROM svm6142
03:52:18   8  GROUP BY pair,trend,gatt
03:52:18   9  ORDER BY pair,trend,gatt
03:52:18  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      5959 -.00314386
eur_usd 	-1 up	      3547 .004481009
eur_usd 	-1		72
eur_usd 	 1 nup	      5853 -.00317247
eur_usd 	 1 up	      3828 .005055257

Elapsed: 00:00:00.08
03:52:18 SQL> 
03:52:18 SQL> 
03:52:18 SQL> -- Derive NTILE based params:
03:52:18 SQL> 
03:52:18 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:01.18
03:52:19 SQL> CREATE TABLE svm6162 COMPRESS AS
03:52:19   2  SELECT
03:52:19   3  pair
03:52:19   4  ,ydate
03:52:19   5  ,prdate
03:52:19   6  ,clse
03:52:19   7  ,g6
03:52:19   8  ,gatt
03:52:19   9  ,gattn
03:52:19  10  ,trend
03:52:19  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
03:52:19  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
03:52:19  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
03:52:19  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
03:52:19  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
03:52:19  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
03:52:19  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
03:52:19  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
03:52:19  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
03:52:19  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
03:52:19  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
03:52:19  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
03:52:19  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
03:52:19  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
03:52:19  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
03:52:19  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
03:52:19  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
03:52:19  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
03:52:19  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
03:52:19  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
03:52:19  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
03:52:19  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
03:52:19  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
03:52:19  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
03:52:19  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
03:52:19  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
03:52:19  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
03:52:19  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
03:52:19  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
03:52:19  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
03:52:19  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
03:52:19  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
03:52:19  43  ,hh  att32
03:52:19  44  ,d   att33
03:52:19  45  ,w   att34
03:52:19  46  ,mpm att35
03:52:19  47  ,mph att36
03:52:19  48  ,trend att37
03:52:19  49  FROM svm6142
03:52:19  50  ORDER BY ydate
03:52:19  51  /

Table created.

Elapsed: 00:00:04.72
03:52:24 SQL> 
03:52:24 SQL> -- rpt
03:52:24 SQL> 
03:52:24 SQL> SELECT
03:52:24   2  pair
03:52:24   3  ,trend
03:52:24   4  ,gatt
03:52:24   5  ,COUNT(pair)
03:52:24   6  ,AVG(g6)
03:52:24   7  FROM svm6162
03:52:24   8  GROUP BY pair,trend,gatt
03:52:24   9  ORDER BY pair,trend,gatt
03:52:24  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      5959 -.00314386
eur_usd 	-1 up	      3547 .004481009
eur_usd 	-1		72
eur_usd 	 1 nup	      5853 -.00317247
eur_usd 	 1 up	      3828 .005055257

Elapsed: 00:00:00.03
03:52:24 SQL> 
03:52:24 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.42
03:52:24 SQL> CREATE TABLE modsrc COMPRESS AS
03:52:24   2  SELECT
03:52:24   3  pair
03:52:24   4  ,ydate
03:52:24   5  ,prdate
03:52:24   6  ,trend
03:52:24   7  ,g6
03:52:24   8  ,gatt
03:52:24   9  ,gattn
03:52:24  10  FROM svm6162
03:52:24  11  /

Table created.

Elapsed: 00:00:00.09
03:52:24 SQL> 
03:52:24 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.27
03:52:25 SQL> 
03:52:25 SQL> DROP   TABLE eur_ms610 ;

Table dropped.

Elapsed: 00:00:00.08
03:52:25 SQL> CREATE TABLE eur_ms610 COMPRESS AS
03:52:25   2  SELECT
03:52:25   3  ydate
03:52:25   4  ,trend eur_trend
03:52:25   5  ,g6    eur_g6
03:52:25   6  ,gatt  eur_gatt
03:52:25   7  ,gattn eur_gattn
03:52:25   8  FROM modsrc
03:52:25   9  /

Table created.

Elapsed: 00:00:00.07
03:52:25 SQL> 
03:52:25 SQL> ANALYZE TABLE eur_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
03:52:25 SQL> 
03:52:25 SQL> -- I need a copy of the attributes:
03:52:25 SQL> 
03:52:25 SQL> 
03:52:25 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.04
03:52:25 SQL> CREATE TABLE eur_att COMPRESS AS
03:52:25   2  SELECT
03:52:25   3  ydate
03:52:25   4  ,att00 eur_att00
03:52:25   5  ,att01 eur_att01
03:52:25   6  ,att02 eur_att02
03:52:25   7  ,att03 eur_att03
03:52:25   8  ,att04 eur_att04
03:52:25   9  ,att05 eur_att05
03:52:25  10  ,att06 eur_att06
03:52:25  11  ,att07 eur_att07
03:52:25  12  ,att08 eur_att08
03:52:25  13  ,att09 eur_att09
03:52:25  14  ,att10 eur_att10
03:52:25  15  ,att11 eur_att11
03:52:25  16  ,att12 eur_att12
03:52:25  17  ,att13 eur_att13
03:52:25  18  ,att14 eur_att14
03:52:25  19  ,att15 eur_att15
03:52:25  20  ,att16 eur_att16
03:52:25  21  ,att17 eur_att17
03:52:25  22  ,att18 eur_att18
03:52:25  23  ,att19 eur_att19
03:52:25  24  ,att20 eur_att20
03:52:25  25  ,att21 eur_att21
03:52:25  26  ,att22 eur_att22
03:52:25  27  ,att23 eur_att23
03:52:25  28  ,att24 eur_att24
03:52:25  29  ,att25 eur_att25
03:52:25  30  ,att26 eur_att26
03:52:25  31  ,att27 eur_att27
03:52:25  32  ,att28 eur_att28
03:52:25  33  ,att29 eur_att29
03:52:25  34  ,att30 eur_att30
03:52:25  35  ,att31 eur_att31
03:52:25  36  ,att32 eur_att32
03:52:25  37  ,att33 eur_att33
03:52:25  38  ,att34 eur_att34
03:52:25  39  ,att35 eur_att35
03:52:25  40  ,att36 eur_att36
03:52:25  41  ,att37 eur_att37
03:52:25  42  FROM svm6162
03:52:25  43  /

Table created.

Elapsed: 00:00:00.17
03:52:25 SQL> 
03:52:25 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.48
03:52:26 SQL> 
03:52:26 SQL> -- rpt
03:52:26 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19259

Elapsed: 00:00:00.89
03:52:27 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     19259

Elapsed: 00:00:00.00
03:52:27 SQL> 
03:52:27 SQL> --
03:52:27 SQL> -- aud610.sql
03:52:27 SQL> --
03:52:27 SQL> 
03:52:27 SQL> -- Creates views and tables for backtesting a forex SVM strategy
03:52:27 SQL> 
03:52:27 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.64
03:52:27 SQL> 
03:52:27 SQL> -- I created di5min here:
03:52:27 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
03:52:27 SQL> 
03:52:27 SQL> CREATE OR REPLACE VIEW svm6102 AS
03:52:27   2  SELECT
03:52:27   3  pair
03:52:27   4  ,ydate
03:52:27   5  ,prdate
03:52:27   6  ,rownum rnum -- acts as t in my time-series
03:52:27   7  ,clse
03:52:27   8  -- Derive a bunch of attributes from clse, the latest price:
03:52:27   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
03:52:27  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
03:52:27  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
03:52:27  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
03:52:27  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
03:52:27  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
03:52:27  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
03:52:27  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
03:52:27  17  --
03:52:27  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
03:52:27  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
03:52:27  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
03:52:27  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
03:52:27  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
03:52:27  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
03:52:27  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
03:52:27  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
03:52:27  26  --
03:52:27  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
03:52:27  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
03:52:27  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
03:52:27  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
03:52:27  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
03:52:27  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
03:52:27  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
03:52:27  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
03:52:27  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
03:52:27  36  FROM di5min WHERE pair LIKE'%aud%'
03:52:27  37  AND ydate > sysdate - 95
03:52:27  38  ORDER BY ydate
03:52:27  39  /

View created.

Elapsed: 00:00:00.05
03:52:27 SQL> 
03:52:27 SQL> -- rpt
03:52:27 SQL> 
03:52:27 SQL> SELECT
03:52:27   2  pair
03:52:27   3  ,COUNT(pair)
03:52:27   4  ,MIN(clse),MAX(clse)
03:52:27   5  ,MIN(avg6),MAX(avg6)
03:52:27   6  ,MIN(ydate),MAX(ydate)
03:52:27   7  FROM svm6102
03:52:27   8  GROUP BY pair
03:52:27   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
aud_usd       19256	.95405	  1.02495 .957141438 1.02284247 2010-09-30 03:55:01 2011-01-03 03:45:00

Elapsed: 00:00:00.84
03:52:28 SQL> 
03:52:28 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
03:52:28 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.25
03:52:28 SQL> CREATE TABLE svm6122 COMPRESS AS
03:52:28   2  SELECT
03:52:28   3  pair
03:52:28   4  ,ydate
03:52:28   5  ,prdate
03:52:28   6  ,clse
03:52:28   7  -- g6 is important. I want to predict g6:
03:52:28   8  ,ld6 - clse g6
03:52:28   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
03:52:28  10  -- I want more attributes from the ones I derived above:
03:52:28  11  -- clse relation to moving-min
03:52:28  12  ,clse-min4  cm4
03:52:28  13  ,clse-min6  cm6
03:52:28  14  ,clse-min8  cm8
03:52:28  15  ,clse-min10 cm10
03:52:28  16  ,clse-min12 cm12
03:52:28  17  ,clse-min14 cm14
03:52:28  18  ,clse-min16 cm16
03:52:28  19  ,clse-min18 cm18
03:52:28  20  -- clse relation to moving-avg
03:52:28  21  ,clse-avg4  ca4
03:52:28  22  ,clse-avg6  ca6
03:52:28  23  ,clse-avg8  ca8
03:52:28  24  ,clse-avg10 ca10
03:52:28  25  ,clse-avg12 ca12
03:52:28  26  ,clse-avg14 ca14
03:52:28  27  ,clse-avg16 ca16
03:52:28  28  ,clse-avg18 ca18
03:52:28  29  -- clse relation to moving-max
03:52:28  30  ,clse-max4  cx4
03:52:28  31  ,clse-max6  cx6
03:52:28  32  ,clse-max8  cx8
03:52:28  33  ,clse-max10 cx10
03:52:28  34  ,clse-max12 cx12
03:52:28  35  ,clse-max14 cx14
03:52:28  36  ,clse-max16 cx16
03:52:28  37  ,clse-max18 cx18
03:52:28  38  -- Derive more attributes.
03:52:28  39  -- I want to use CORR() here to help SVM see the shape of the series.
03:52:28  40  -- But COVAR_POP is more stable:
03:52:28  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
03:52:28  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
03:52:28  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
03:52:28  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
03:52:28  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
03:52:28  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
03:52:28  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
03:52:28  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
03:52:28  49  -- Derive date related attributes:
03:52:28  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
03:52:28  51  ,0+TO_CHAR(ydate,'D')d
03:52:28  52  ,0+TO_CHAR(ydate,'W')w
03:52:28  53  -- mpm stands for minutes-past-midnight:
03:52:28  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
03:52:28  55  -- mph stands for minutes-past-hour:
03:52:28  56  ,0+TO_CHAR(ydate,'MI')mph
03:52:28  57  FROM svm6102
03:52:28  58  ORDER BY ydate
03:52:28  59  /

Table created.

Elapsed: 00:00:02.05
03:52:30 SQL> 
03:52:30 SQL> -- rpt
03:52:30 SQL> 
03:52:30 SQL> SELECT
03:52:30   2  pair
03:52:30   3  ,COUNT(pair)
03:52:30   4  ,MIN(clse),MAX(clse)
03:52:30   5  ,MIN(ydate),MAX(ydate)
03:52:30   6  FROM svm6122
03:52:30   7  GROUP BY pair
03:52:30   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
aud_usd       19256	.95405	  1.02495 2010-09-30 03:55:01 2011-01-03 03:45:00

Elapsed: 00:00:00.04
03:52:30 SQL> 
03:52:30 SQL> -- Prepare for derivation of NTILE based params:
03:52:30 SQL> 
03:52:30 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.32
03:52:31 SQL> CREATE TABLE svm6142 COMPRESS AS
03:52:31   2  SELECT
03:52:31   3  pair
03:52:31   4  ,ydate
03:52:31   5  ,prdate
03:52:31   6  ,clse
03:52:31   7  ,g6
03:52:31   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
03:52:31   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
03:52:31  10  ,CASE WHEN trend IS NULL THEN 1
03:52:31  11  	    WHEN trend =0      THEN 1
03:52:31  12  	    ELSE trend END trend
03:52:31  13  ,cm4
03:52:31  14  ,cm6
03:52:31  15  ,cm8
03:52:31  16  ,cm10
03:52:31  17  ,cm12
03:52:31  18  ,cm14
03:52:31  19  ,cm16
03:52:31  20  ,cm18
03:52:31  21  --
03:52:31  22  ,ca4
03:52:31  23  ,ca6
03:52:31  24  ,ca8
03:52:31  25  ,ca10
03:52:31  26  ,ca12
03:52:31  27  ,ca14
03:52:31  28  ,ca16
03:52:31  29  ,ca18
03:52:31  30  --
03:52:31  31  ,cx4
03:52:31  32  ,cx6
03:52:31  33  ,cx8
03:52:31  34  ,cx10
03:52:31  35  ,cx12
03:52:31  36  ,cx14
03:52:31  37  ,cx16
03:52:31  38  ,cx18
03:52:31  39  --
03:52:31  40  ,crr4
03:52:31  41  ,crr6
03:52:31  42  ,crr8
03:52:31  43  ,crr10
03:52:31  44  ,crr12
03:52:31  45  ,crr14
03:52:31  46  ,crr16
03:52:31  47  ,crr18
03:52:31  48  --
03:52:31  49  ,hh
03:52:31  50  ,d
03:52:31  51  ,w
03:52:31  52  ,mpm
03:52:31  53  ,mph
03:52:31  54  FROM svm6122
03:52:31  55  ORDER BY ydate
03:52:31  56  /

Table created.

Elapsed: 00:00:00.37
03:52:31 SQL> 
03:52:31 SQL> -- rpt
03:52:31 SQL> 
03:52:31 SQL> SELECT
03:52:31   2  pair
03:52:31   3  ,trend
03:52:31   4  ,gatt
03:52:31   5  ,COUNT(pair)
03:52:31   6  ,AVG(g6)
03:52:31   7  FROM svm6142
03:52:31   8  GROUP BY pair,trend,gatt
03:52:31   9  ORDER BY pair,trend,gatt
03:52:31  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5033 -.00217742
aud_usd 	-1 up	      3736 .003752372
aud_usd 	-1		67
aud_usd 	 1 nup	      6712 -.00211589
aud_usd 	 1 up	      3703 .004030739
aud_usd 	 1		 5

6 rows selected.

Elapsed: 00:00:00.04
03:52:31 SQL> 
03:52:31 SQL> 
03:52:31 SQL> -- Derive NTILE based params:
03:52:31 SQL> 
03:52:31 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.18
03:52:31 SQL> CREATE TABLE svm6162 COMPRESS AS
03:52:31   2  SELECT
03:52:31   3  pair
03:52:31   4  ,ydate
03:52:31   5  ,prdate
03:52:31   6  ,clse
03:52:31   7  ,g6
03:52:31   8  ,gatt
03:52:31   9  ,gattn
03:52:31  10  ,trend
03:52:31  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
03:52:31  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
03:52:31  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
03:52:31  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
03:52:31  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
03:52:31  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
03:52:31  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
03:52:31  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
03:52:31  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
03:52:31  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
03:52:31  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
03:52:31  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
03:52:31  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
03:52:31  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
03:52:31  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
03:52:31  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
03:52:31  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
03:52:31  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
03:52:31  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
03:52:31  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
03:52:31  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
03:52:31  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
03:52:31  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
03:52:31  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
03:52:31  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
03:52:31  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
03:52:31  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
03:52:31  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
03:52:31  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
03:52:31  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
03:52:31  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
03:52:31  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
03:52:31  43  ,hh  att32
03:52:31  44  ,d   att33
03:52:31  45  ,w   att34
03:52:31  46  ,mpm att35
03:52:31  47  ,mph att36
03:52:31  48  ,trend att37
03:52:31  49  FROM svm6142
03:52:31  50  ORDER BY ydate
03:52:31  51  /

Table created.

Elapsed: 00:00:04.79
03:52:36 SQL> 
03:52:36 SQL> -- rpt
03:52:36 SQL> 
03:52:36 SQL> SELECT
03:52:36   2  pair
03:52:36   3  ,trend
03:52:36   4  ,gatt
03:52:36   5  ,COUNT(pair)
03:52:36   6  ,AVG(g6)
03:52:36   7  FROM svm6162
03:52:36   8  GROUP BY pair,trend,gatt
03:52:36   9  ORDER BY pair,trend,gatt
03:52:36  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5033 -.00217742
aud_usd 	-1 up	      3736 .003752372
aud_usd 	-1		67
aud_usd 	 1 nup	      6712 -.00211589
aud_usd 	 1 up	      3703 .004030739
aud_usd 	 1		 5

6 rows selected.

Elapsed: 00:00:00.02
03:52:36 SQL> 
03:52:36 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.21
03:52:36 SQL> CREATE TABLE modsrc COMPRESS AS
03:52:36   2  SELECT
03:52:36   3  pair
03:52:36   4  ,ydate
03:52:36   5  ,prdate
03:52:36   6  ,trend
03:52:36   7  ,g6
03:52:36   8  ,gatt
03:52:36   9  ,gattn
03:52:36  10  FROM svm6162
03:52:36  11  /

Table created.

Elapsed: 00:00:00.08
03:52:36 SQL> 
03:52:36 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
03:52:37 SQL> 
03:52:37 SQL> DROP   TABLE aud_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
03:52:37 SQL> CREATE TABLE aud_ms610 COMPRESS AS
03:52:37   2  SELECT
03:52:37   3  ydate
03:52:37   4  ,trend aud_trend
03:52:37   5  ,g6    aud_g6
03:52:37   6  ,gatt  aud_gatt
03:52:37   7  ,gattn aud_gattn
03:52:37   8  FROM modsrc
03:52:37   9  /

Table created.

Elapsed: 00:00:00.06
03:52:37 SQL> 
03:52:37 SQL> ANALYZE TABLE aud_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.51
03:52:37 SQL> 
03:52:37 SQL> -- I need a copy of the attributes:
03:52:37 SQL> 
03:52:37 SQL> 
03:52:37 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.06
03:52:37 SQL> CREATE TABLE aud_att COMPRESS AS
03:52:37   2  SELECT
03:52:37   3  ydate
03:52:37   4  ,att00 aud_att00
03:52:37   5  ,att01 aud_att01
03:52:37   6  ,att02 aud_att02
03:52:37   7  ,att03 aud_att03
03:52:37   8  ,att04 aud_att04
03:52:37   9  ,att05 aud_att05
03:52:37  10  ,att06 aud_att06
03:52:37  11  ,att07 aud_att07
03:52:37  12  ,att08 aud_att08
03:52:37  13  ,att09 aud_att09
03:52:37  14  ,att10 aud_att10
03:52:37  15  ,att11 aud_att11
03:52:37  16  ,att12 aud_att12
03:52:37  17  ,att13 aud_att13
03:52:37  18  ,att14 aud_att14
03:52:37  19  ,att15 aud_att15
03:52:37  20  ,att16 aud_att16
03:52:37  21  ,att17 aud_att17
03:52:37  22  ,att18 aud_att18
03:52:37  23  ,att19 aud_att19
03:52:37  24  ,att20 aud_att20
03:52:37  25  ,att21 aud_att21
03:52:37  26  ,att22 aud_att22
03:52:37  27  ,att23 aud_att23
03:52:37  28  ,att24 aud_att24
03:52:37  29  ,att25 aud_att25
03:52:37  30  ,att26 aud_att26
03:52:37  31  ,att27 aud_att27
03:52:37  32  ,att28 aud_att28
03:52:37  33  ,att29 aud_att29
03:52:37  34  ,att30 aud_att30
03:52:37  35  ,att31 aud_att31
03:52:37  36  ,att32 aud_att32
03:52:37  37  ,att33 aud_att33
03:52:37  38  ,att34 aud_att34
03:52:37  39  ,att35 aud_att35
03:52:37  40  ,att36 aud_att36
03:52:37  41  ,att37 aud_att37
03:52:37  42  FROM svm6162
03:52:37  43  /

Table created.

Elapsed: 00:00:00.17
03:52:37 SQL> 
03:52:37 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.42
03:52:38 SQL> 
03:52:38 SQL> -- rpt
03:52:38 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19256

Elapsed: 00:00:00.85
03:52:39 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     19256

Elapsed: 00:00:00.00
03:52:39 SQL> 
03:52:39 SQL> --
03:52:39 SQL> -- gbp610.sql
03:52:39 SQL> --
03:52:39 SQL> 
03:52:39 SQL> -- Creates views and tables for backtesting a forex SVM strategy
03:52:39 SQL> 
03:52:39 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.75
03:52:39 SQL> 
03:52:39 SQL> -- I created di5min here:
03:52:39 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
03:52:39 SQL> 
03:52:39 SQL> CREATE OR REPLACE VIEW svm6102 AS
03:52:39   2  SELECT
03:52:39   3  pair
03:52:39   4  ,ydate
03:52:39   5  ,prdate
03:52:39   6  ,rownum rnum -- acts as t in my time-series
03:52:39   7  ,clse
03:52:39   8  -- Derive a bunch of attributes from clse, the latest price:
03:52:39   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
03:52:39  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
03:52:39  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
03:52:39  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
03:52:39  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
03:52:39  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
03:52:39  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
03:52:39  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
03:52:39  17  --
03:52:39  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
03:52:39  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
03:52:39  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
03:52:39  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
03:52:39  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
03:52:39  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
03:52:39  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
03:52:39  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
03:52:39  26  --
03:52:39  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
03:52:39  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
03:52:39  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
03:52:39  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
03:52:39  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
03:52:39  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
03:52:39  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
03:52:39  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
03:52:39  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
03:52:39  36  FROM di5min WHERE pair LIKE'%gbp%'
03:52:39  37  AND ydate > sysdate - 95
03:52:39  38  ORDER BY ydate
03:52:39  39  /

View created.

Elapsed: 00:00:00.05
03:52:40 SQL> 
03:52:40 SQL> -- rpt
03:52:40 SQL> 
03:52:40 SQL> SELECT
03:52:40   2  pair
03:52:40   3  ,COUNT(pair)
03:52:40   4  ,MIN(clse),MAX(clse)
03:52:40   5  ,MIN(avg6),MAX(avg6)
03:52:40   6  ,MIN(ydate),MAX(ydate)
03:52:40   7  FROM svm6102
03:52:40   8  GROUP BY pair
03:52:40   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
gbp_usd       19258   1.535325	   1.6295 1.53696747 1.62716986 2010-09-30 03:55:01 2011-01-03 03:45:00

Elapsed: 00:00:00.84
03:52:40 SQL> 
03:52:40 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
03:52:40 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.18
03:52:41 SQL> CREATE TABLE svm6122 COMPRESS AS
03:52:41   2  SELECT
03:52:41   3  pair
03:52:41   4  ,ydate
03:52:41   5  ,prdate
03:52:41   6  ,clse
03:52:41   7  -- g6 is important. I want to predict g6:
03:52:41   8  ,ld6 - clse g6
03:52:41   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
03:52:41  10  -- I want more attributes from the ones I derived above:
03:52:41  11  -- clse relation to moving-min
03:52:41  12  ,clse-min4  cm4
03:52:41  13  ,clse-min6  cm6
03:52:41  14  ,clse-min8  cm8
03:52:41  15  ,clse-min10 cm10
03:52:41  16  ,clse-min12 cm12
03:52:41  17  ,clse-min14 cm14
03:52:41  18  ,clse-min16 cm16
03:52:41  19  ,clse-min18 cm18
03:52:41  20  -- clse relation to moving-avg
03:52:41  21  ,clse-avg4  ca4
03:52:41  22  ,clse-avg6  ca6
03:52:41  23  ,clse-avg8  ca8
03:52:41  24  ,clse-avg10 ca10
03:52:41  25  ,clse-avg12 ca12
03:52:41  26  ,clse-avg14 ca14
03:52:41  27  ,clse-avg16 ca16
03:52:41  28  ,clse-avg18 ca18
03:52:41  29  -- clse relation to moving-max
03:52:41  30  ,clse-max4  cx4
03:52:41  31  ,clse-max6  cx6
03:52:41  32  ,clse-max8  cx8
03:52:41  33  ,clse-max10 cx10
03:52:41  34  ,clse-max12 cx12
03:52:41  35  ,clse-max14 cx14
03:52:41  36  ,clse-max16 cx16
03:52:41  37  ,clse-max18 cx18
03:52:41  38  -- Derive more attributes.
03:52:41  39  -- I want to use CORR() here to help SVM see the shape of the series.
03:52:41  40  -- But COVAR_POP is more stable:
03:52:41  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
03:52:41  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
03:52:41  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
03:52:41  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
03:52:41  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
03:52:41  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
03:52:41  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
03:52:41  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
03:52:41  49  -- Derive date related attributes:
03:52:41  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
03:52:41  51  ,0+TO_CHAR(ydate,'D')d
03:52:41  52  ,0+TO_CHAR(ydate,'W')w
03:52:41  53  -- mpm stands for minutes-past-midnight:
03:52:41  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
03:52:41  55  -- mph stands for minutes-past-hour:
03:52:41  56  ,0+TO_CHAR(ydate,'MI')mph
03:52:41  57  FROM svm6102
03:52:41  58  ORDER BY ydate
03:52:41  59  /

Table created.

Elapsed: 00:00:02.02
03:52:43 SQL> 
03:52:43 SQL> -- rpt
03:52:43 SQL> 
03:52:43 SQL> SELECT
03:52:43   2  pair
03:52:43   3  ,COUNT(pair)
03:52:43   4  ,MIN(clse),MAX(clse)
03:52:43   5  ,MIN(ydate),MAX(ydate)
03:52:43   6  FROM svm6122
03:52:43   7  GROUP BY pair
03:52:43   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
gbp_usd       19258   1.535325	   1.6295 2010-09-30 03:55:01 2011-01-03 03:45:00

Elapsed: 00:00:00.05
03:52:43 SQL> 
03:52:43 SQL> -- Prepare for derivation of NTILE based params:
03:52:43 SQL> 
03:52:43 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.31
03:52:43 SQL> CREATE TABLE svm6142 COMPRESS AS
03:52:43   2  SELECT
03:52:43   3  pair
03:52:43   4  ,ydate
03:52:43   5  ,prdate
03:52:43   6  ,clse
03:52:43   7  ,g6
03:52:43   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
03:52:43   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
03:52:43  10  ,CASE WHEN trend IS NULL THEN 1
03:52:43  11  	    WHEN trend =0      THEN 1
03:52:43  12  	    ELSE trend END trend
03:52:43  13  ,cm4
03:52:43  14  ,cm6
03:52:43  15  ,cm8
03:52:43  16  ,cm10
03:52:43  17  ,cm12
03:52:43  18  ,cm14
03:52:43  19  ,cm16
03:52:43  20  ,cm18
03:52:43  21  --
03:52:43  22  ,ca4
03:52:43  23  ,ca6
03:52:43  24  ,ca8
03:52:43  25  ,ca10
03:52:43  26  ,ca12
03:52:43  27  ,ca14
03:52:43  28  ,ca16
03:52:43  29  ,ca18
03:52:43  30  --
03:52:43  31  ,cx4
03:52:43  32  ,cx6
03:52:43  33  ,cx8
03:52:43  34  ,cx10
03:52:43  35  ,cx12
03:52:43  36  ,cx14
03:52:43  37  ,cx16
03:52:43  38  ,cx18
03:52:43  39  --
03:52:43  40  ,crr4
03:52:43  41  ,crr6
03:52:43  42  ,crr8
03:52:43  43  ,crr10
03:52:43  44  ,crr12
03:52:43  45  ,crr14
03:52:43  46  ,crr16
03:52:43  47  ,crr18
03:52:43  48  --
03:52:43  49  ,hh
03:52:43  50  ,d
03:52:43  51  ,w
03:52:43  52  ,mpm
03:52:43  53  ,mph
03:52:43  54  FROM svm6122
03:52:43  55  ORDER BY ydate
03:52:43  56  /

Table created.

Elapsed: 00:00:00.35
03:52:43 SQL> 
03:52:43 SQL> -- rpt
03:52:43 SQL> 
03:52:43 SQL> SELECT
03:52:43   2  pair
03:52:43   3  ,trend
03:52:43   4  ,gatt
03:52:43   5  ,COUNT(pair)
03:52:43   6  ,AVG(g6)
03:52:43   7  FROM svm6142
03:52:43   8  GROUP BY pair,trend,gatt
03:52:43   9  ORDER BY pair,trend,gatt
03:52:43  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6121 -.00268543
gbp_usd 	-1 up	      3472  .00432734
gbp_usd 	-1		72
gbp_usd 	 1 nup	      6095 -.00271022
gbp_usd 	 1 up	      3498 .004510928

Elapsed: 00:00:00.07
03:52:43 SQL> 
03:52:43 SQL> 
03:52:43 SQL> -- Derive NTILE based params:
03:52:43 SQL> 
03:52:43 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.19
03:52:44 SQL> CREATE TABLE svm6162 COMPRESS AS
03:52:44   2  SELECT
03:52:44   3  pair
03:52:44   4  ,ydate
03:52:44   5  ,prdate
03:52:44   6  ,clse
03:52:44   7  ,g6
03:52:44   8  ,gatt
03:52:44   9  ,gattn
03:52:44  10  ,trend
03:52:44  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
03:52:44  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
03:52:44  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
03:52:44  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
03:52:44  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
03:52:44  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
03:52:44  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
03:52:44  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
03:52:44  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
03:52:44  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
03:52:44  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
03:52:44  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
03:52:44  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
03:52:44  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
03:52:44  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
03:52:44  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
03:52:44  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
03:52:44  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
03:52:44  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
03:52:44  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
03:52:44  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
03:52:44  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
03:52:44  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
03:52:44  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
03:52:44  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
03:52:44  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
03:52:44  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
03:52:44  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
03:52:44  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
03:52:44  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
03:52:44  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
03:52:44  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
03:52:44  43  ,hh  att32
03:52:44  44  ,d   att33
03:52:44  45  ,w   att34
03:52:44  46  ,mpm att35
03:52:44  47  ,mph att36
03:52:44  48  ,trend att37
03:52:44  49  FROM svm6142
03:52:44  50  ORDER BY ydate
03:52:44  51  /

Table created.

Elapsed: 00:00:04.61
03:52:48 SQL> 
03:52:48 SQL> -- rpt
03:52:48 SQL> 
03:52:48 SQL> SELECT
03:52:48   2  pair
03:52:48   3  ,trend
03:52:48   4  ,gatt
03:52:48   5  ,COUNT(pair)
03:52:48   6  ,AVG(g6)
03:52:48   7  FROM svm6162
03:52:48   8  GROUP BY pair,trend,gatt
03:52:48   9  ORDER BY pair,trend,gatt
03:52:48  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6121 -.00268543
gbp_usd 	-1 up	      3472  .00432734
gbp_usd 	-1		72
gbp_usd 	 1 nup	      6095 -.00271022
gbp_usd 	 1 up	      3498 .004510928

Elapsed: 00:00:00.02
03:52:48 SQL> 
03:52:48 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
03:52:48 SQL> CREATE TABLE modsrc COMPRESS AS
03:52:48   2  SELECT
03:52:48   3  pair
03:52:48   4  ,ydate
03:52:48   5  ,prdate
03:52:48   6  ,trend
03:52:48   7  ,g6
03:52:48   8  ,gatt
03:52:48   9  ,gattn
03:52:48  10  FROM svm6162
03:52:48  11  /

Table created.

Elapsed: 00:00:00.10
03:52:48 SQL> 
03:52:48 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
03:52:49 SQL> 
03:52:49 SQL> DROP   TABLE gbp_ms610 ;

Table dropped.

Elapsed: 00:00:00.13
03:52:49 SQL> CREATE TABLE gbp_ms610 COMPRESS AS
03:52:49   2  SELECT
03:52:49   3  ydate
03:52:49   4  ,trend gbp_trend
03:52:49   5  ,g6    gbp_g6
03:52:49   6  ,gatt  gbp_gatt
03:52:49   7  ,gattn gbp_gattn
03:52:49   8  FROM modsrc
03:52:49   9  /

Table created.

Elapsed: 00:00:00.07
03:52:49 SQL> 
03:52:49 SQL> ANALYZE TABLE gbp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
03:52:49 SQL> 
03:52:49 SQL> -- I need a copy of the attributes:
03:52:49 SQL> 
03:52:49 SQL> 
03:52:49 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.06
03:52:49 SQL> CREATE TABLE gbp_att COMPRESS AS
03:52:49   2  SELECT
03:52:49   3  ydate
03:52:49   4  ,att00 gbp_att00
03:52:49   5  ,att01 gbp_att01
03:52:49   6  ,att02 gbp_att02
03:52:49   7  ,att03 gbp_att03
03:52:49   8  ,att04 gbp_att04
03:52:49   9  ,att05 gbp_att05
03:52:49  10  ,att06 gbp_att06
03:52:49  11  ,att07 gbp_att07
03:52:49  12  ,att08 gbp_att08
03:52:49  13  ,att09 gbp_att09
03:52:49  14  ,att10 gbp_att10
03:52:49  15  ,att11 gbp_att11
03:52:49  16  ,att12 gbp_att12
03:52:49  17  ,att13 gbp_att13
03:52:49  18  ,att14 gbp_att14
03:52:49  19  ,att15 gbp_att15
03:52:49  20  ,att16 gbp_att16
03:52:49  21  ,att17 gbp_att17
03:52:49  22  ,att18 gbp_att18
03:52:49  23  ,att19 gbp_att19
03:52:49  24  ,att20 gbp_att20
03:52:49  25  ,att21 gbp_att21
03:52:49  26  ,att22 gbp_att22
03:52:49  27  ,att23 gbp_att23
03:52:49  28  ,att24 gbp_att24
03:52:49  29  ,att25 gbp_att25
03:52:49  30  ,att26 gbp_att26
03:52:49  31  ,att27 gbp_att27
03:52:49  32  ,att28 gbp_att28
03:52:49  33  ,att29 gbp_att29
03:52:49  34  ,att30 gbp_att30
03:52:49  35  ,att31 gbp_att31
03:52:49  36  ,att32 gbp_att32
03:52:49  37  ,att33 gbp_att33
03:52:49  38  ,att34 gbp_att34
03:52:49  39  ,att35 gbp_att35
03:52:49  40  ,att36 gbp_att36
03:52:49  41  ,att37 gbp_att37
03:52:49  42  FROM svm6162
03:52:49  43  /

Table created.

Elapsed: 00:00:00.18
03:52:49 SQL> 
03:52:49 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.43
03:52:50 SQL> 
03:52:50 SQL> -- rpt
03:52:50 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19258

Elapsed: 00:00:00.84
03:52:50 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     19258

Elapsed: 00:00:00.00
03:52:50 SQL> 
03:52:50 SQL> --
03:52:50 SQL> -- jpy610.sql
03:52:50 SQL> --
03:52:50 SQL> 
03:52:50 SQL> -- Creates views and tables for backtesting a forex SVM strategy
03:52:50 SQL> 
03:52:50 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.51
03:52:51 SQL> 
03:52:51 SQL> -- I created di5min here:
03:52:51 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
03:52:51 SQL> 
03:52:51 SQL> CREATE OR REPLACE VIEW svm6102 AS
03:52:51   2  SELECT
03:52:51   3  pair
03:52:51   4  ,ydate
03:52:51   5  ,prdate
03:52:51   6  ,rownum rnum -- acts as t in my time-series
03:52:51   7  ,clse
03:52:51   8  -- Derive a bunch of attributes from clse, the latest price:
03:52:51   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
03:52:51  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
03:52:51  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
03:52:51  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
03:52:51  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
03:52:51  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
03:52:51  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
03:52:51  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
03:52:51  17  --
03:52:51  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
03:52:51  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
03:52:51  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
03:52:51  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
03:52:51  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
03:52:51  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
03:52:51  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
03:52:51  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
03:52:51  26  --
03:52:51  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
03:52:51  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
03:52:51  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
03:52:51  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
03:52:51  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
03:52:51  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
03:52:51  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
03:52:51  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
03:52:51  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
03:52:51  36  FROM di5min WHERE pair LIKE'%jpy%'
03:52:51  37  AND ydate > sysdate - 95
03:52:51  38  ORDER BY ydate
03:52:51  39  /

View created.

Elapsed: 00:00:00.05
03:52:51 SQL> 
03:52:51 SQL> -- rpt
03:52:51 SQL> 
03:52:51 SQL> SELECT
03:52:51   2  pair
03:52:51   3  ,COUNT(pair)
03:52:51   4  ,MIN(clse),MAX(clse)
03:52:51   5  ,MIN(avg6),MAX(avg6)
03:52:51   6  ,MIN(ydate),MAX(ydate)
03:52:51   7  FROM svm6102
03:52:51   8  GROUP BY pair
03:52:51   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_jpy       19256	 80.25	   84.485 80.3595205 84.3105479 2010-09-30 03:55:01 2011-01-03 03:45:00

Elapsed: 00:00:00.88
03:52:52 SQL> 
03:52:52 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
03:52:52 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:01.01
03:52:53 SQL> CREATE TABLE svm6122 COMPRESS AS
03:52:53   2  SELECT
03:52:53   3  pair
03:52:53   4  ,ydate
03:52:53   5  ,prdate
03:52:53   6  ,clse
03:52:53   7  -- g6 is important. I want to predict g6:
03:52:53   8  ,ld6 - clse g6
03:52:53   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
03:52:53  10  -- I want more attributes from the ones I derived above:
03:52:53  11  -- clse relation to moving-min
03:52:53  12  ,clse-min4  cm4
03:52:53  13  ,clse-min6  cm6
03:52:53  14  ,clse-min8  cm8
03:52:53  15  ,clse-min10 cm10
03:52:53  16  ,clse-min12 cm12
03:52:53  17  ,clse-min14 cm14
03:52:53  18  ,clse-min16 cm16
03:52:53  19  ,clse-min18 cm18
03:52:53  20  -- clse relation to moving-avg
03:52:53  21  ,clse-avg4  ca4
03:52:53  22  ,clse-avg6  ca6
03:52:53  23  ,clse-avg8  ca8
03:52:53  24  ,clse-avg10 ca10
03:52:53  25  ,clse-avg12 ca12
03:52:53  26  ,clse-avg14 ca14
03:52:53  27  ,clse-avg16 ca16
03:52:53  28  ,clse-avg18 ca18
03:52:53  29  -- clse relation to moving-max
03:52:53  30  ,clse-max4  cx4
03:52:53  31  ,clse-max6  cx6
03:52:53  32  ,clse-max8  cx8
03:52:53  33  ,clse-max10 cx10
03:52:53  34  ,clse-max12 cx12
03:52:53  35  ,clse-max14 cx14
03:52:53  36  ,clse-max16 cx16
03:52:53  37  ,clse-max18 cx18
03:52:53  38  -- Derive more attributes.
03:52:53  39  -- I want to use CORR() here to help SVM see the shape of the series.
03:52:53  40  -- But COVAR_POP is more stable:
03:52:53  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
03:52:53  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
03:52:53  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
03:52:53  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
03:52:53  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
03:52:53  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
03:52:53  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
03:52:53  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
03:52:53  49  -- Derive date related attributes:
03:52:53  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
03:52:53  51  ,0+TO_CHAR(ydate,'D')d
03:52:53  52  ,0+TO_CHAR(ydate,'W')w
03:52:53  53  -- mpm stands for minutes-past-midnight:
03:52:53  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
03:52:53  55  -- mph stands for minutes-past-hour:
03:52:53  56  ,0+TO_CHAR(ydate,'MI')mph
03:52:53  57  FROM svm6102
03:52:53  58  ORDER BY ydate
03:52:53  59  /

Table created.

Elapsed: 00:00:02.10
03:52:55 SQL> 
03:52:55 SQL> -- rpt
03:52:55 SQL> 
03:52:55 SQL> SELECT
03:52:55   2  pair
03:52:55   3  ,COUNT(pair)
03:52:55   4  ,MIN(clse),MAX(clse)
03:52:55   5  ,MIN(ydate),MAX(ydate)
03:52:55   6  FROM svm6122
03:52:55   7  GROUP BY pair
03:52:55   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_jpy       19256	 80.25	   84.485 2010-09-30 03:55:01 2011-01-03 03:45:00

Elapsed: 00:00:00.06
03:52:55 SQL> 
03:52:55 SQL> -- Prepare for derivation of NTILE based params:
03:52:55 SQL> 
03:52:55 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.26
03:52:55 SQL> CREATE TABLE svm6142 COMPRESS AS
03:52:55   2  SELECT
03:52:55   3  pair
03:52:55   4  ,ydate
03:52:55   5  ,prdate
03:52:55   6  ,clse
03:52:55   7  ,g6
03:52:55   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
03:52:55   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
03:52:55  10  ,CASE WHEN trend IS NULL THEN 1
03:52:55  11  	    WHEN trend =0      THEN 1
03:52:55  12  	    ELSE trend END trend
03:52:55  13  ,cm4
03:52:55  14  ,cm6
03:52:55  15  ,cm8
03:52:55  16  ,cm10
03:52:55  17  ,cm12
03:52:55  18  ,cm14
03:52:55  19  ,cm16
03:52:55  20  ,cm18
03:52:55  21  --
03:52:55  22  ,ca4
03:52:55  23  ,ca6
03:52:55  24  ,ca8
03:52:55  25  ,ca10
03:52:55  26  ,ca12
03:52:55  27  ,ca14
03:52:55  28  ,ca16
03:52:55  29  ,ca18
03:52:55  30  --
03:52:55  31  ,cx4
03:52:55  32  ,cx6
03:52:55  33  ,cx8
03:52:55  34  ,cx10
03:52:55  35  ,cx12
03:52:55  36  ,cx14
03:52:55  37  ,cx16
03:52:55  38  ,cx18
03:52:55  39  --
03:52:55  40  ,crr4
03:52:55  41  ,crr6
03:52:55  42  ,crr8
03:52:55  43  ,crr10
03:52:55  44  ,crr12
03:52:55  45  ,crr14
03:52:55  46  ,crr16
03:52:55  47  ,crr18
03:52:55  48  --
03:52:55  49  ,hh
03:52:55  50  ,d
03:52:55  51  ,w
03:52:55  52  ,mpm
03:52:55  53  ,mph
03:52:55  54  FROM svm6122
03:52:55  55  ORDER BY ydate
03:52:55  56  /

Table created.

Elapsed: 00:00:00.38
03:52:56 SQL> 
03:52:56 SQL> -- rpt
03:52:56 SQL> 
03:52:56 SQL> SELECT
03:52:56   2  pair
03:52:56   3  ,trend
03:52:56   4  ,gatt
03:52:56   5  ,COUNT(pair)
03:52:56   6  ,AVG(g6)
03:52:56   7  FROM svm6142
03:52:56   8  GROUP BY pair,trend,gatt
03:52:56   9  ORDER BY pair,trend,gatt
03:52:56  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5226 -.16565991
usd_jpy 	-1 up	      4874 .164792875
usd_jpy 	-1		11
usd_jpy 	 1 nup	      4968 -.15575451
usd_jpy 	 1 up	      4116 .166146221
usd_jpy 	 1		61

6 rows selected.

Elapsed: 00:00:00.04
03:52:56 SQL> 
03:52:56 SQL> 
03:52:56 SQL> -- Derive NTILE based params:
03:52:56 SQL> 
03:52:56 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.22
03:52:56 SQL> CREATE TABLE svm6162 COMPRESS AS
03:52:56   2  SELECT
03:52:56   3  pair
03:52:56   4  ,ydate
03:52:56   5  ,prdate
03:52:56   6  ,clse
03:52:56   7  ,g6
03:52:56   8  ,gatt
03:52:56   9  ,gattn
03:52:56  10  ,trend
03:52:56  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
03:52:56  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
03:52:56  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
03:52:56  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
03:52:56  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
03:52:56  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
03:52:56  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
03:52:56  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
03:52:56  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
03:52:56  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
03:52:56  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
03:52:56  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
03:52:56  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
03:52:56  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
03:52:56  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
03:52:56  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
03:52:56  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
03:52:56  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
03:52:56  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
03:52:56  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
03:52:56  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
03:52:56  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
03:52:56  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
03:52:56  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
03:52:56  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
03:52:56  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
03:52:56  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
03:52:56  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
03:52:56  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
03:52:56  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
03:52:56  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
03:52:56  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
03:52:56  43  ,hh  att32
03:52:56  44  ,d   att33
03:52:56  45  ,w   att34
03:52:56  46  ,mpm att35
03:52:56  47  ,mph att36
03:52:56  48  ,trend att37
03:52:56  49  FROM svm6142
03:52:56  50  ORDER BY ydate
03:52:56  51  /

Table created.

Elapsed: 00:00:04.82
03:53:01 SQL> 
03:53:01 SQL> -- rpt
03:53:01 SQL> 
03:53:01 SQL> SELECT
03:53:01   2  pair
03:53:01   3  ,trend
03:53:01   4  ,gatt
03:53:01   5  ,COUNT(pair)
03:53:01   6  ,AVG(g6)
03:53:01   7  FROM svm6162
03:53:01   8  GROUP BY pair,trend,gatt
03:53:01   9  ORDER BY pair,trend,gatt
03:53:01  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5226 -.16565991
usd_jpy 	-1 up	      4874 .164792875
usd_jpy 	-1		11
usd_jpy 	 1 nup	      4968 -.15575451
usd_jpy 	 1 up	      4116 .166146221
usd_jpy 	 1		61

6 rows selected.

Elapsed: 00:00:00.03
03:53:01 SQL> 
03:53:01 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
03:53:01 SQL> CREATE TABLE modsrc COMPRESS AS
03:53:01   2  SELECT
03:53:01   3  pair
03:53:01   4  ,ydate
03:53:01   5  ,prdate
03:53:01   6  ,trend
03:53:01   7  ,g6
03:53:01   8  ,gatt
03:53:01   9  ,gattn
03:53:01  10  FROM svm6162
03:53:01  11  /

Table created.

Elapsed: 00:00:00.09
03:53:01 SQL> 
03:53:01 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
03:53:01 SQL> 
03:53:01 SQL> DROP   TABLE jpy_ms610 ;

Table dropped.

Elapsed: 00:00:00.06
03:53:01 SQL> CREATE TABLE jpy_ms610 COMPRESS AS
03:53:01   2  SELECT
03:53:01   3  ydate
03:53:01   4  ,trend jpy_trend
03:53:01   5  ,g6    jpy_g6
03:53:01   6  ,gatt  jpy_gatt
03:53:01   7  ,gattn jpy_gattn
03:53:01   8  FROM modsrc
03:53:01   9  /

Table created.

Elapsed: 00:00:00.08
03:53:01 SQL> 
03:53:01 SQL> ANALYZE TABLE jpy_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
03:53:02 SQL> 
03:53:02 SQL> -- I need a copy of the attributes:
03:53:02 SQL> 
03:53:02 SQL> 
03:53:02 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.10
03:53:02 SQL> CREATE TABLE jpy_att COMPRESS AS
03:53:02   2  SELECT
03:53:02   3  ydate
03:53:02   4  ,att00 jpy_att00
03:53:02   5  ,att01 jpy_att01
03:53:02   6  ,att02 jpy_att02
03:53:02   7  ,att03 jpy_att03
03:53:02   8  ,att04 jpy_att04
03:53:02   9  ,att05 jpy_att05
03:53:02  10  ,att06 jpy_att06
03:53:02  11  ,att07 jpy_att07
03:53:02  12  ,att08 jpy_att08
03:53:02  13  ,att09 jpy_att09
03:53:02  14  ,att10 jpy_att10
03:53:02  15  ,att11 jpy_att11
03:53:02  16  ,att12 jpy_att12
03:53:02  17  ,att13 jpy_att13
03:53:02  18  ,att14 jpy_att14
03:53:02  19  ,att15 jpy_att15
03:53:02  20  ,att16 jpy_att16
03:53:02  21  ,att17 jpy_att17
03:53:02  22  ,att18 jpy_att18
03:53:02  23  ,att19 jpy_att19
03:53:02  24  ,att20 jpy_att20
03:53:02  25  ,att21 jpy_att21
03:53:02  26  ,att22 jpy_att22
03:53:02  27  ,att23 jpy_att23
03:53:02  28  ,att24 jpy_att24
03:53:02  29  ,att25 jpy_att25
03:53:02  30  ,att26 jpy_att26
03:53:02  31  ,att27 jpy_att27
03:53:02  32  ,att28 jpy_att28
03:53:02  33  ,att29 jpy_att29
03:53:02  34  ,att30 jpy_att30
03:53:02  35  ,att31 jpy_att31
03:53:02  36  ,att32 jpy_att32
03:53:02  37  ,att33 jpy_att33
03:53:02  38  ,att34 jpy_att34
03:53:02  39  ,att35 jpy_att35
03:53:02  40  ,att36 jpy_att36
03:53:02  41  ,att37 jpy_att37
03:53:02  42  FROM svm6162
03:53:02  43  /

Table created.

Elapsed: 00:00:00.21
03:53:02 SQL> 
03:53:02 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.48
03:53:02 SQL> 
03:53:02 SQL> -- rpt
03:53:02 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19256

Elapsed: 00:00:00.87
03:53:03 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     19256

Elapsed: 00:00:00.00
03:53:03 SQL> 
03:53:03 SQL> --
03:53:03 SQL> -- cad610.sql
03:53:03 SQL> --
03:53:03 SQL> 
03:53:03 SQL> -- Creates views and tables for backtesting a forex SVM strategy
03:53:03 SQL> 
03:53:03 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.46
03:53:04 SQL> 
03:53:04 SQL> -- I created di5min here:
03:53:04 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
03:53:04 SQL> 
03:53:04 SQL> CREATE OR REPLACE VIEW svm6102 AS
03:53:04   2  SELECT
03:53:04   3  pair
03:53:04   4  ,ydate
03:53:04   5  ,prdate
03:53:04   6  ,rownum rnum -- acts as t in my time-series
03:53:04   7  ,clse
03:53:04   8  -- Derive a bunch of attributes from clse, the latest price:
03:53:04   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
03:53:04  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
03:53:04  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
03:53:04  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
03:53:04  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
03:53:04  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
03:53:04  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
03:53:04  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
03:53:04  17  --
03:53:04  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
03:53:04  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
03:53:04  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
03:53:04  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
03:53:04  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
03:53:04  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
03:53:04  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
03:53:04  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
03:53:04  26  --
03:53:04  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
03:53:04  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
03:53:04  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
03:53:04  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
03:53:04  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
03:53:04  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
03:53:04  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
03:53:04  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
03:53:04  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
03:53:04  36  FROM di5min WHERE pair LIKE'%cad%'
03:53:04  37  AND ydate > sysdate - 95
03:53:04  38  ORDER BY ydate
03:53:04  39  /

View created.

Elapsed: 00:00:00.04
03:53:04 SQL> 
03:53:04 SQL> -- rpt
03:53:04 SQL> 
03:53:04 SQL> SELECT
03:53:04   2  pair
03:53:04   3  ,COUNT(pair)
03:53:04   4  ,MIN(clse),MAX(clse)
03:53:04   5  ,MIN(avg6),MAX(avg6)
03:53:04   6  ,MIN(ydate),MAX(ydate)
03:53:04   7  FROM svm6102
03:53:04   8  GROUP BY pair
03:53:04   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_cad       19256	 .9928	   1.0355 .993940753	1.03391 2010-09-30 03:55:01 2011-01-03 03:45:00

Elapsed: 00:00:00.83
03:53:05 SQL> 
03:53:05 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
03:53:05 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.24
03:53:05 SQL> CREATE TABLE svm6122 COMPRESS AS
03:53:05   2  SELECT
03:53:05   3  pair
03:53:05   4  ,ydate
03:53:05   5  ,prdate
03:53:05   6  ,clse
03:53:05   7  -- g6 is important. I want to predict g6:
03:53:05   8  ,ld6 - clse g6
03:53:05   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
03:53:05  10  -- I want more attributes from the ones I derived above:
03:53:05  11  -- clse relation to moving-min
03:53:05  12  ,clse-min4  cm4
03:53:05  13  ,clse-min6  cm6
03:53:05  14  ,clse-min8  cm8
03:53:05  15  ,clse-min10 cm10
03:53:05  16  ,clse-min12 cm12
03:53:05  17  ,clse-min14 cm14
03:53:05  18  ,clse-min16 cm16
03:53:05  19  ,clse-min18 cm18
03:53:05  20  -- clse relation to moving-avg
03:53:05  21  ,clse-avg4  ca4
03:53:05  22  ,clse-avg6  ca6
03:53:05  23  ,clse-avg8  ca8
03:53:05  24  ,clse-avg10 ca10
03:53:05  25  ,clse-avg12 ca12
03:53:05  26  ,clse-avg14 ca14
03:53:05  27  ,clse-avg16 ca16
03:53:05  28  ,clse-avg18 ca18
03:53:05  29  -- clse relation to moving-max
03:53:05  30  ,clse-max4  cx4
03:53:05  31  ,clse-max6  cx6
03:53:05  32  ,clse-max8  cx8
03:53:05  33  ,clse-max10 cx10
03:53:05  34  ,clse-max12 cx12
03:53:05  35  ,clse-max14 cx14
03:53:05  36  ,clse-max16 cx16
03:53:05  37  ,clse-max18 cx18
03:53:05  38  -- Derive more attributes.
03:53:05  39  -- I want to use CORR() here to help SVM see the shape of the series.
03:53:05  40  -- But COVAR_POP is more stable:
03:53:05  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
03:53:05  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
03:53:05  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
03:53:05  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
03:53:05  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
03:53:05  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
03:53:05  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
03:53:05  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
03:53:05  49  -- Derive date related attributes:
03:53:05  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
03:53:05  51  ,0+TO_CHAR(ydate,'D')d
03:53:05  52  ,0+TO_CHAR(ydate,'W')w
03:53:05  53  -- mpm stands for minutes-past-midnight:
03:53:05  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
03:53:05  55  -- mph stands for minutes-past-hour:
03:53:05  56  ,0+TO_CHAR(ydate,'MI')mph
03:53:05  57  FROM svm6102
03:53:05  58  ORDER BY ydate
03:53:05  59  /

Table created.

Elapsed: 00:00:02.01
03:53:07 SQL> 
03:53:07 SQL> -- rpt
03:53:07 SQL> 
03:53:07 SQL> SELECT
03:53:07   2  pair
03:53:07   3  ,COUNT(pair)
03:53:07   4  ,MIN(clse),MAX(clse)
03:53:07   5  ,MIN(ydate),MAX(ydate)
03:53:07   6  FROM svm6122
03:53:07   7  GROUP BY pair
03:53:07   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_cad       19256	 .9928	   1.0355 2010-09-30 03:55:01 2011-01-03 03:45:00

Elapsed: 00:00:00.12
03:53:07 SQL> 
03:53:07 SQL> -- Prepare for derivation of NTILE based params:
03:53:07 SQL> 
03:53:07 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.72
03:53:08 SQL> CREATE TABLE svm6142 COMPRESS AS
03:53:08   2  SELECT
03:53:08   3  pair
03:53:08   4  ,ydate
03:53:08   5  ,prdate
03:53:08   6  ,clse
03:53:08   7  ,g6
03:53:08   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
03:53:08   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
03:53:08  10  ,CASE WHEN trend IS NULL THEN 1
03:53:08  11  	    WHEN trend =0      THEN 1
03:53:08  12  	    ELSE trend END trend
03:53:08  13  ,cm4
03:53:08  14  ,cm6
03:53:08  15  ,cm8
03:53:08  16  ,cm10
03:53:08  17  ,cm12
03:53:08  18  ,cm14
03:53:08  19  ,cm16
03:53:08  20  ,cm18
03:53:08  21  --
03:53:08  22  ,ca4
03:53:08  23  ,ca6
03:53:08  24  ,ca8
03:53:08  25  ,ca10
03:53:08  26  ,ca12
03:53:08  27  ,ca14
03:53:08  28  ,ca16
03:53:08  29  ,ca18
03:53:08  30  --
03:53:08  31  ,cx4
03:53:08  32  ,cx6
03:53:08  33  ,cx8
03:53:08  34  ,cx10
03:53:08  35  ,cx12
03:53:08  36  ,cx14
03:53:08  37  ,cx16
03:53:08  38  ,cx18
03:53:08  39  --
03:53:08  40  ,crr4
03:53:08  41  ,crr6
03:53:08  42  ,crr8
03:53:08  43  ,crr10
03:53:08  44  ,crr12
03:53:08  45  ,crr14
03:53:08  46  ,crr16
03:53:08  47  ,crr18
03:53:08  48  --
03:53:08  49  ,hh
03:53:08  50  ,d
03:53:08  51  ,w
03:53:08  52  ,mpm
03:53:08  53  ,mph
03:53:08  54  FROM svm6122
03:53:08  55  ORDER BY ydate
03:53:08  56  /

Table created.

Elapsed: 00:00:00.36
03:53:08 SQL> 
03:53:08 SQL> -- rpt
03:53:08 SQL> 
03:53:08 SQL> SELECT
03:53:08   2  pair
03:53:08   3  ,trend
03:53:08   4  ,gatt
03:53:08   5  ,COUNT(pair)
03:53:08   6  ,AVG(g6)
03:53:08   7  FROM svm6142
03:53:08   8  GROUP BY pair,trend,gatt
03:53:08   9  ORDER BY pair,trend,gatt
03:53:08  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7333 -.00132768
usd_cad 	-1 up	      3000 .003056492
usd_cad 	-1		58
usd_cad 	 1 nup	      6546 -.00162646
usd_cad 	 1 up	      2305 .003653973
usd_cad 	 1		14

6 rows selected.

Elapsed: 00:00:00.04
03:53:08 SQL> 
03:53:08 SQL> 
03:53:08 SQL> -- Derive NTILE based params:
03:53:08 SQL> 
03:53:08 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.13
03:53:08 SQL> CREATE TABLE svm6162 COMPRESS AS
03:53:08   2  SELECT
03:53:08   3  pair
03:53:08   4  ,ydate
03:53:08   5  ,prdate
03:53:08   6  ,clse
03:53:08   7  ,g6
03:53:08   8  ,gatt
03:53:08   9  ,gattn
03:53:08  10  ,trend
03:53:08  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
03:53:08  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
03:53:08  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
03:53:08  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
03:53:08  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
03:53:08  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
03:53:08  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
03:53:08  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
03:53:08  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
03:53:08  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
03:53:08  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
03:53:08  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
03:53:08  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
03:53:08  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
03:53:08  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
03:53:08  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
03:53:08  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
03:53:08  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
03:53:08  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
03:53:08  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
03:53:08  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
03:53:08  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
03:53:08  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
03:53:08  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
03:53:08  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
03:53:08  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
03:53:08  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
03:53:08  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
03:53:08  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
03:53:08  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
03:53:08  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
03:53:08  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
03:53:08  43  ,hh  att32
03:53:08  44  ,d   att33
03:53:08  45  ,w   att34
03:53:08  46  ,mpm att35
03:53:08  47  ,mph att36
03:53:08  48  ,trend att37
03:53:08  49  FROM svm6142
03:53:08  50  ORDER BY ydate
03:53:08  51  /

Table created.

Elapsed: 00:00:04.74
03:53:13 SQL> 
03:53:13 SQL> -- rpt
03:53:13 SQL> 
03:53:13 SQL> SELECT
03:53:13   2  pair
03:53:13   3  ,trend
03:53:13   4  ,gatt
03:53:13   5  ,COUNT(pair)
03:53:13   6  ,AVG(g6)
03:53:13   7  FROM svm6162
03:53:13   8  GROUP BY pair,trend,gatt
03:53:13   9  ORDER BY pair,trend,gatt
03:53:13  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7333 -.00132768
usd_cad 	-1 up	      3000 .003056492
usd_cad 	-1		58
usd_cad 	 1 nup	      6546 -.00162646
usd_cad 	 1 up	      2305 .003653973
usd_cad 	 1		14

6 rows selected.

Elapsed: 00:00:00.02
03:53:13 SQL> 
03:53:13 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
03:53:13 SQL> CREATE TABLE modsrc COMPRESS AS
03:53:13   2  SELECT
03:53:13   3  pair
03:53:13   4  ,ydate
03:53:13   5  ,prdate
03:53:13   6  ,trend
03:53:13   7  ,g6
03:53:13   8  ,gatt
03:53:13   9  ,gattn
03:53:13  10  FROM svm6162
03:53:13  11  /

Table created.

Elapsed: 00:00:00.08
03:53:13 SQL> 
03:53:13 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
03:53:13 SQL> 
03:53:13 SQL> DROP   TABLE cad_ms610 ;

Table dropped.

Elapsed: 00:00:00.07
03:53:13 SQL> CREATE TABLE cad_ms610 COMPRESS AS
03:53:13   2  SELECT
03:53:13   3  ydate
03:53:13   4  ,trend cad_trend
03:53:13   5  ,g6    cad_g6
03:53:13   6  ,gatt  cad_gatt
03:53:13   7  ,gattn cad_gattn
03:53:13   8  FROM modsrc
03:53:13   9  /

Table created.

Elapsed: 00:00:00.07
03:53:13 SQL> 
03:53:13 SQL> ANALYZE TABLE cad_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
03:53:14 SQL> 
03:53:14 SQL> -- I need a copy of the attributes:
03:53:14 SQL> 
03:53:14 SQL> 
03:53:14 SQL> DROP   TABLE cad_att;

Table dropped.

Elapsed: 00:00:00.04
03:53:14 SQL> CREATE TABLE cad_att COMPRESS AS
03:53:14   2  SELECT
03:53:14   3  ydate
03:53:14   4  ,att00 cad_att00
03:53:14   5  ,att01 cad_att01
03:53:14   6  ,att02 cad_att02
03:53:14   7  ,att03 cad_att03
03:53:14   8  ,att04 cad_att04
03:53:14   9  ,att05 cad_att05
03:53:14  10  ,att06 cad_att06
03:53:14  11  ,att07 cad_att07
03:53:14  12  ,att08 cad_att08
03:53:14  13  ,att09 cad_att09
03:53:14  14  ,att10 cad_att10
03:53:14  15  ,att11 cad_att11
03:53:14  16  ,att12 cad_att12
03:53:14  17  ,att13 cad_att13
03:53:14  18  ,att14 cad_att14
03:53:14  19  ,att15 cad_att15
03:53:14  20  ,att16 cad_att16
03:53:14  21  ,att17 cad_att17
03:53:14  22  ,att18 cad_att18
03:53:14  23  ,att19 cad_att19
03:53:14  24  ,att20 cad_att20
03:53:14  25  ,att21 cad_att21
03:53:14  26  ,att22 cad_att22
03:53:14  27  ,att23 cad_att23
03:53:14  28  ,att24 cad_att24
03:53:14  29  ,att25 cad_att25
03:53:14  30  ,att26 cad_att26
03:53:14  31  ,att27 cad_att27
03:53:14  32  ,att28 cad_att28
03:53:14  33  ,att29 cad_att29
03:53:14  34  ,att30 cad_att30
03:53:14  35  ,att31 cad_att31
03:53:14  36  ,att32 cad_att32
03:53:14  37  ,att33 cad_att33
03:53:14  38  ,att34 cad_att34
03:53:14  39  ,att35 cad_att35
03:53:14  40  ,att36 cad_att36
03:53:14  41  ,att37 cad_att37
03:53:14  42  FROM svm6162
03:53:14  43  /

Table created.

Elapsed: 00:00:00.16
03:53:14 SQL> 
03:53:14 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
03:53:14 SQL> 
03:53:14 SQL> -- rpt
03:53:14 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19256

Elapsed: 00:00:00.83
03:53:15 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
     19256

Elapsed: 00:00:00.01
03:53:15 SQL> 
03:53:15 SQL> --
03:53:15 SQL> -- chf610.sql
03:53:15 SQL> --
03:53:15 SQL> 
03:53:15 SQL> -- Creates views and tables for backtesting a forex SVM strategy
03:53:15 SQL> 
03:53:15 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.45
03:53:16 SQL> 
03:53:16 SQL> -- I created di5min here:
03:53:16 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
03:53:16 SQL> 
03:53:16 SQL> CREATE OR REPLACE VIEW svm6102 AS
03:53:16   2  SELECT
03:53:16   3  pair
03:53:16   4  ,ydate
03:53:16   5  ,prdate
03:53:16   6  ,rownum rnum -- acts as t in my time-series
03:53:16   7  ,clse
03:53:16   8  -- Derive a bunch of attributes from clse, the latest price:
03:53:16   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
03:53:16  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
03:53:16  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
03:53:16  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
03:53:16  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
03:53:16  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
03:53:16  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
03:53:16  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
03:53:16  17  --
03:53:16  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
03:53:16  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
03:53:16  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
03:53:16  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
03:53:16  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
03:53:16  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
03:53:16  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
03:53:16  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
03:53:16  26  --
03:53:16  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
03:53:16  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
03:53:16  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
03:53:16  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
03:53:16  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
03:53:16  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
03:53:16  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
03:53:16  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
03:53:16  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
03:53:16  36  FROM di5min WHERE pair LIKE'%chf%'
03:53:16  37  AND ydate > sysdate - 95
03:53:16  38  ORDER BY ydate
03:53:16  39  /

View created.

Elapsed: 00:00:00.04
03:53:16 SQL> 
03:53:16 SQL> -- rpt
03:53:16 SQL> 
03:53:16 SQL> SELECT
03:53:16   2  pair
03:53:16   3  ,COUNT(pair)
03:53:16   4  ,MIN(clse),MAX(clse)
03:53:16   5  ,MIN(avg6),MAX(avg6)
03:53:16   6  ,MIN(ydate),MAX(ydate)
03:53:16   7  FROM svm6102
03:53:16   8  GROUP BY pair
03:53:16   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_chf       19259    .931675	  1.00635 .933969692 1.00498151 2010-09-30 03:55:01 2011-01-03 03:45:00

Elapsed: 00:00:00.84
03:53:16 SQL> 
03:53:16 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
03:53:16 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.20
03:53:17 SQL> CREATE TABLE svm6122 COMPRESS AS
03:53:17   2  SELECT
03:53:17   3  pair
03:53:17   4  ,ydate
03:53:17   5  ,prdate
03:53:17   6  ,clse
03:53:17   7  -- g6 is important. I want to predict g6:
03:53:17   8  ,ld6 - clse g6
03:53:17   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
03:53:17  10  -- I want more attributes from the ones I derived above:
03:53:17  11  -- clse relation to moving-min
03:53:17  12  ,clse-min4  cm4
03:53:17  13  ,clse-min6  cm6
03:53:17  14  ,clse-min8  cm8
03:53:17  15  ,clse-min10 cm10
03:53:17  16  ,clse-min12 cm12
03:53:17  17  ,clse-min14 cm14
03:53:17  18  ,clse-min16 cm16
03:53:17  19  ,clse-min18 cm18
03:53:17  20  -- clse relation to moving-avg
03:53:17  21  ,clse-avg4  ca4
03:53:17  22  ,clse-avg6  ca6
03:53:17  23  ,clse-avg8  ca8
03:53:17  24  ,clse-avg10 ca10
03:53:17  25  ,clse-avg12 ca12
03:53:17  26  ,clse-avg14 ca14
03:53:17  27  ,clse-avg16 ca16
03:53:17  28  ,clse-avg18 ca18
03:53:17  29  -- clse relation to moving-max
03:53:17  30  ,clse-max4  cx4
03:53:17  31  ,clse-max6  cx6
03:53:17  32  ,clse-max8  cx8
03:53:17  33  ,clse-max10 cx10
03:53:17  34  ,clse-max12 cx12
03:53:17  35  ,clse-max14 cx14
03:53:17  36  ,clse-max16 cx16
03:53:17  37  ,clse-max18 cx18
03:53:17  38  -- Derive more attributes.
03:53:17  39  -- I want to use CORR() here to help SVM see the shape of the series.
03:53:17  40  -- But COVAR_POP is more stable:
03:53:17  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
03:53:17  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
03:53:17  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
03:53:17  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
03:53:17  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
03:53:17  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
03:53:17  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
03:53:17  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
03:53:17  49  -- Derive date related attributes:
03:53:17  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
03:53:17  51  ,0+TO_CHAR(ydate,'D')d
03:53:17  52  ,0+TO_CHAR(ydate,'W')w
03:53:17  53  -- mpm stands for minutes-past-midnight:
03:53:17  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
03:53:17  55  -- mph stands for minutes-past-hour:
03:53:17  56  ,0+TO_CHAR(ydate,'MI')mph
03:53:17  57  FROM svm6102
03:53:17  58  ORDER BY ydate
03:53:17  59  /

Table created.

Elapsed: 00:00:02.00
03:53:19 SQL> 
03:53:19 SQL> -- rpt
03:53:19 SQL> 
03:53:19 SQL> SELECT
03:53:19   2  pair
03:53:19   3  ,COUNT(pair)
03:53:19   4  ,MIN(clse),MAX(clse)
03:53:19   5  ,MIN(ydate),MAX(ydate)
03:53:19   6  FROM svm6122
03:53:19   7  GROUP BY pair
03:53:19   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_chf       19259    .931675	  1.00635 2010-09-30 03:55:01 2011-01-03 03:45:00

Elapsed: 00:00:00.04
03:53:19 SQL> 
03:53:19 SQL> -- Prepare for derivation of NTILE based params:
03:53:19 SQL> 
03:53:19 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.16
03:53:19 SQL> CREATE TABLE svm6142 COMPRESS AS
03:53:19   2  SELECT
03:53:19   3  pair
03:53:19   4  ,ydate
03:53:19   5  ,prdate
03:53:19   6  ,clse
03:53:19   7  ,g6
03:53:19   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
03:53:19   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
03:53:19  10  ,CASE WHEN trend IS NULL THEN 1
03:53:19  11  	    WHEN trend =0      THEN 1
03:53:19  12  	    ELSE trend END trend
03:53:19  13  ,cm4
03:53:19  14  ,cm6
03:53:19  15  ,cm8
03:53:19  16  ,cm10
03:53:19  17  ,cm12
03:53:19  18  ,cm14
03:53:19  19  ,cm16
03:53:19  20  ,cm18
03:53:19  21  --
03:53:19  22  ,ca4
03:53:19  23  ,ca6
03:53:19  24  ,ca8
03:53:19  25  ,ca10
03:53:19  26  ,ca12
03:53:19  27  ,ca14
03:53:19  28  ,ca16
03:53:19  29  ,ca18
03:53:19  30  --
03:53:19  31  ,cx4
03:53:19  32  ,cx6
03:53:19  33  ,cx8
03:53:19  34  ,cx10
03:53:19  35  ,cx12
03:53:19  36  ,cx14
03:53:19  37  ,cx16
03:53:19  38  ,cx18
03:53:19  39  --
03:53:19  40  ,crr4
03:53:19  41  ,crr6
03:53:19  42  ,crr8
03:53:19  43  ,crr10
03:53:19  44  ,crr12
03:53:19  45  ,crr14
03:53:19  46  ,crr16
03:53:19  47  ,crr18
03:53:19  48  --
03:53:19  49  ,hh
03:53:19  50  ,d
03:53:19  51  ,w
03:53:19  52  ,mpm
03:53:19  53  ,mph
03:53:19  54  FROM svm6122
03:53:19  55  ORDER BY ydate
03:53:19  56  /

Table created.

Elapsed: 00:00:00.35
03:53:19 SQL> 
03:53:19 SQL> -- rpt
03:53:19 SQL> 
03:53:19 SQL> SELECT
03:53:19   2  pair
03:53:19   3  ,trend
03:53:19   4  ,gatt
03:53:19   5  ,COUNT(pair)
03:53:19   6  ,AVG(g6)
03:53:19   7  FROM svm6142
03:53:19   8  GROUP BY pair,trend,gatt
03:53:19   9  ORDER BY pair,trend,gatt
03:53:19  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7217 -.00200099
usd_chf 	-1 up	      3083 .003952581
usd_chf 	-1		22
usd_chf 	 1 nup	      6330 -.00161584
usd_chf 	 1 up	      2557 .003696024
usd_chf 	 1		50

6 rows selected.

Elapsed: 00:00:00.03
03:53:19 SQL> 
03:53:19 SQL> 
03:53:19 SQL> -- Derive NTILE based params:
03:53:19 SQL> 
03:53:19 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.15
03:53:19 SQL> CREATE TABLE svm6162 COMPRESS AS
03:53:19   2  SELECT
03:53:19   3  pair
03:53:19   4  ,ydate
03:53:19   5  ,prdate
03:53:19   6  ,clse
03:53:19   7  ,g6
03:53:19   8  ,gatt
03:53:19   9  ,gattn
03:53:19  10  ,trend
03:53:19  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
03:53:19  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
03:53:19  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
03:53:19  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
03:53:19  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
03:53:19  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
03:53:19  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
03:53:19  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
03:53:19  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
03:53:19  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
03:53:19  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
03:53:19  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
03:53:19  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
03:53:19  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
03:53:19  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
03:53:19  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
03:53:19  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
03:53:19  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
03:53:19  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
03:53:19  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
03:53:19  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
03:53:19  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
03:53:19  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
03:53:19  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
03:53:19  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
03:53:19  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
03:53:19  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
03:53:19  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
03:53:19  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
03:53:19  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
03:53:19  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
03:53:19  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
03:53:19  43  ,hh  att32
03:53:19  44  ,d   att33
03:53:19  45  ,w   att34
03:53:19  46  ,mpm att35
03:53:19  47  ,mph att36
03:53:19  48  ,trend att37
03:53:19  49  FROM svm6142
03:53:19  50  ORDER BY ydate
03:53:19  51  /

Table created.

Elapsed: 00:00:04.80
03:53:24 SQL> 
03:53:24 SQL> -- rpt
03:53:24 SQL> 
03:53:24 SQL> SELECT
03:53:24   2  pair
03:53:24   3  ,trend
03:53:24   4  ,gatt
03:53:24   5  ,COUNT(pair)
03:53:24   6  ,AVG(g6)
03:53:24   7  FROM svm6162
03:53:24   8  GROUP BY pair,trend,gatt
03:53:24   9  ORDER BY pair,trend,gatt
03:53:24  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7217 -.00200099
usd_chf 	-1 up	      3083 .003952581
usd_chf 	-1		22
usd_chf 	 1 nup	      6330 -.00161584
usd_chf 	 1 up	      2557 .003696024
usd_chf 	 1		50

6 rows selected.

Elapsed: 00:00:00.02
03:53:24 SQL> 
03:53:24 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.14
03:53:24 SQL> CREATE TABLE modsrc COMPRESS AS
03:53:24   2  SELECT
03:53:24   3  pair
03:53:24   4  ,ydate
03:53:24   5  ,prdate
03:53:24   6  ,trend
03:53:24   7  ,g6
03:53:24   8  ,gatt
03:53:24   9  ,gattn
03:53:24  10  FROM svm6162
03:53:24  11  /

Table created.

Elapsed: 00:00:00.08
03:53:24 SQL> 
03:53:24 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
03:53:25 SQL> 
03:53:25 SQL> DROP   TABLE chf_ms610 ;

Table dropped.

Elapsed: 00:00:00.08
03:53:25 SQL> CREATE TABLE chf_ms610 COMPRESS AS
03:53:25   2  SELECT
03:53:25   3  ydate
03:53:25   4  ,trend chf_trend
03:53:25   5  ,g6    chf_g6
03:53:25   6  ,gatt  chf_gatt
03:53:25   7  ,gattn chf_gattn
03:53:25   8  FROM modsrc
03:53:25   9  /

Table created.

Elapsed: 00:00:00.06
03:53:25 SQL> 
03:53:25 SQL> ANALYZE TABLE chf_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
03:53:25 SQL> 
03:53:25 SQL> -- I need a copy of the attributes:
03:53:25 SQL> 
03:53:25 SQL> 
03:53:25 SQL> DROP   TABLE chf_att;

Table dropped.

Elapsed: 00:00:00.06
03:53:25 SQL> CREATE TABLE chf_att COMPRESS AS
03:53:25   2  SELECT
03:53:25   3  ydate
03:53:25   4  ,att00 chf_att00
03:53:25   5  ,att01 chf_att01
03:53:25   6  ,att02 chf_att02
03:53:25   7  ,att03 chf_att03
03:53:25   8  ,att04 chf_att04
03:53:25   9  ,att05 chf_att05
03:53:25  10  ,att06 chf_att06
03:53:25  11  ,att07 chf_att07
03:53:25  12  ,att08 chf_att08
03:53:25  13  ,att09 chf_att09
03:53:25  14  ,att10 chf_att10
03:53:25  15  ,att11 chf_att11
03:53:25  16  ,att12 chf_att12
03:53:25  17  ,att13 chf_att13
03:53:25  18  ,att14 chf_att14
03:53:25  19  ,att15 chf_att15
03:53:25  20  ,att16 chf_att16
03:53:25  21  ,att17 chf_att17
03:53:25  22  ,att18 chf_att18
03:53:25  23  ,att19 chf_att19
03:53:25  24  ,att20 chf_att20
03:53:25  25  ,att21 chf_att21
03:53:25  26  ,att22 chf_att22
03:53:25  27  ,att23 chf_att23
03:53:25  28  ,att24 chf_att24
03:53:25  29  ,att25 chf_att25
03:53:25  30  ,att26 chf_att26
03:53:25  31  ,att27 chf_att27
03:53:25  32  ,att28 chf_att28
03:53:25  33  ,att29 chf_att29
03:53:25  34  ,att30 chf_att30
03:53:25  35  ,att31 chf_att31
03:53:25  36  ,att32 chf_att32
03:53:25  37  ,att33 chf_att33
03:53:25  38  ,att34 chf_att34
03:53:25  39  ,att35 chf_att35
03:53:25  40  ,att36 chf_att36
03:53:25  41  ,att37 chf_att37
03:53:25  42  FROM svm6162
03:53:25  43  /

Table created.

Elapsed: 00:00:00.18
03:53:25 SQL> 
03:53:25 SQL> ANALYZE TABLE chf_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
03:53:26 SQL> 
03:53:26 SQL> -- rpt
03:53:26 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19259

Elapsed: 00:00:00.83
03:53:26 SQL> SELECT COUNT(*)FROM chf_att;

  COUNT(*)
----------
     19259

Elapsed: 00:00:00.00
03:53:26 SQL> 
03:53:26 SQL> --
03:53:26 SQL> -- ech610.sql
03:53:26 SQL> --
03:53:26 SQL> 
03:53:26 SQL> -- Creates views and tables for backtesting a forex SVM strategy
03:53:26 SQL> 
03:53:26 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.59
03:53:27 SQL> 
03:53:27 SQL> -- I created di5min here:
03:53:27 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
03:53:27 SQL> 
03:53:27 SQL> CREATE OR REPLACE VIEW svm6102 AS
03:53:27   2  SELECT
03:53:27   3  pair
03:53:27   4  ,ydate
03:53:27   5  ,prdate
03:53:27   6  ,rownum rnum -- acts as t in my time-series
03:53:27   7  ,clse
03:53:27   8  -- Derive a bunch of attributes from clse, the latest price:
03:53:27   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
03:53:27  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
03:53:27  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
03:53:27  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
03:53:27  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
03:53:27  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
03:53:27  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
03:53:27  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
03:53:27  17  --
03:53:27  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
03:53:27  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
03:53:27  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
03:53:27  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
03:53:27  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
03:53:27  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
03:53:27  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
03:53:27  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
03:53:27  26  --
03:53:27  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
03:53:27  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
03:53:27  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
03:53:27  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
03:53:27  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
03:53:27  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
03:53:27  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
03:53:27  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
03:53:27  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
03:53:27  36  FROM di5min WHERE pair LIKE'%ech%'
03:53:27  37  AND ydate > sysdate - 95
03:53:27  38  ORDER BY ydate
03:53:27  39  /

View created.

Elapsed: 00:00:00.05
03:53:27 SQL> 
03:53:27 SQL> -- rpt
03:53:27 SQL> 
03:53:27 SQL> SELECT
03:53:27   2  pair
03:53:27   3  ,COUNT(pair)
03:53:27   4  ,MIN(clse),MAX(clse)
03:53:27   5  ,MIN(avg6),MAX(avg6)
03:53:27   6  ,MIN(ydate),MAX(ydate)
03:53:27   7  FROM svm6102
03:53:27   8  GROUP BY pair
03:53:27   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ech_usd       19258 1.24213032 1.38284305 1.24320711 1.37986485 2010-09-30 03:55:01 2011-01-03 03:45:00

Elapsed: 00:00:00.79
03:53:28 SQL> 
03:53:28 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
03:53:28 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.19
03:53:28 SQL> CREATE TABLE svm6122 COMPRESS AS
03:53:28   2  SELECT
03:53:28   3  pair
03:53:28   4  ,ydate
03:53:28   5  ,prdate
03:53:28   6  ,clse
03:53:28   7  -- g6 is important. I want to predict g6:
03:53:28   8  ,ld6 - clse g6
03:53:28   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
03:53:28  10  -- I want more attributes from the ones I derived above:
03:53:28  11  -- clse relation to moving-min
03:53:28  12  ,clse-min4  cm4
03:53:28  13  ,clse-min6  cm6
03:53:28  14  ,clse-min8  cm8
03:53:28  15  ,clse-min10 cm10
03:53:28  16  ,clse-min12 cm12
03:53:28  17  ,clse-min14 cm14
03:53:28  18  ,clse-min16 cm16
03:53:28  19  ,clse-min18 cm18
03:53:28  20  -- clse relation to moving-avg
03:53:28  21  ,clse-avg4  ca4
03:53:28  22  ,clse-avg6  ca6
03:53:28  23  ,clse-avg8  ca8
03:53:28  24  ,clse-avg10 ca10
03:53:28  25  ,clse-avg12 ca12
03:53:28  26  ,clse-avg14 ca14
03:53:28  27  ,clse-avg16 ca16
03:53:28  28  ,clse-avg18 ca18
03:53:28  29  -- clse relation to moving-max
03:53:28  30  ,clse-max4  cx4
03:53:28  31  ,clse-max6  cx6
03:53:28  32  ,clse-max8  cx8
03:53:28  33  ,clse-max10 cx10
03:53:28  34  ,clse-max12 cx12
03:53:28  35  ,clse-max14 cx14
03:53:28  36  ,clse-max16 cx16
03:53:28  37  ,clse-max18 cx18
03:53:28  38  -- Derive more attributes.
03:53:28  39  -- I want to use CORR() here to help SVM see the shape of the series.
03:53:28  40  -- But COVAR_POP is more stable:
03:53:28  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
03:53:28  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
03:53:28  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
03:53:28  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
03:53:28  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
03:53:28  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
03:53:28  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
03:53:28  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
03:53:28  49  -- Derive date related attributes:
03:53:28  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
03:53:28  51  ,0+TO_CHAR(ydate,'D')d
03:53:28  52  ,0+TO_CHAR(ydate,'W')w
03:53:28  53  -- mpm stands for minutes-past-midnight:
03:53:28  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
03:53:28  55  -- mph stands for minutes-past-hour:
03:53:28  56  ,0+TO_CHAR(ydate,'MI')mph
03:53:28  57  FROM svm6102
03:53:28  58  ORDER BY ydate
03:53:28  59  /

Table created.

Elapsed: 00:00:02.07
03:53:30 SQL> 
03:53:30 SQL> -- rpt
03:53:30 SQL> 
03:53:30 SQL> SELECT
03:53:30   2  pair
03:53:30   3  ,COUNT(pair)
03:53:30   4  ,MIN(clse),MAX(clse)
03:53:30   5  ,MIN(ydate),MAX(ydate)
03:53:30   6  FROM svm6122
03:53:30   7  GROUP BY pair
03:53:30   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ech_usd       19258 1.24213032 1.38284305 2010-09-30 03:55:01 2011-01-03 03:45:00

Elapsed: 00:00:00.05
03:53:30 SQL> 
03:53:30 SQL> -- Prepare for derivation of NTILE based params:
03:53:30 SQL> 
03:53:30 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.18
03:53:30 SQL> CREATE TABLE svm6142 COMPRESS AS
03:53:30   2  SELECT
03:53:30   3  pair
03:53:30   4  ,ydate
03:53:30   5  ,prdate
03:53:30   6  ,clse
03:53:30   7  ,g6
03:53:30   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
03:53:30   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
03:53:30  10  ,CASE WHEN trend IS NULL THEN 1
03:53:30  11  	    WHEN trend =0      THEN 1
03:53:30  12  	    ELSE trend END trend
03:53:30  13  ,cm4
03:53:30  14  ,cm6
03:53:30  15  ,cm8
03:53:30  16  ,cm10
03:53:30  17  ,cm12
03:53:30  18  ,cm14
03:53:30  19  ,cm16
03:53:30  20  ,cm18
03:53:30  21  --
03:53:30  22  ,ca4
03:53:30  23  ,ca6
03:53:30  24  ,ca8
03:53:30  25  ,ca10
03:53:30  26  ,ca12
03:53:30  27  ,ca14
03:53:30  28  ,ca16
03:53:30  29  ,ca18
03:53:30  30  --
03:53:30  31  ,cx4
03:53:30  32  ,cx6
03:53:30  33  ,cx8
03:53:30  34  ,cx10
03:53:30  35  ,cx12
03:53:30  36  ,cx14
03:53:30  37  ,cx16
03:53:30  38  ,cx18
03:53:30  39  --
03:53:30  40  ,crr4
03:53:30  41  ,crr6
03:53:30  42  ,crr8
03:53:30  43  ,crr10
03:53:30  44  ,crr12
03:53:30  45  ,crr14
03:53:30  46  ,crr16
03:53:30  47  ,crr18
03:53:30  48  --
03:53:30  49  ,hh
03:53:30  50  ,d
03:53:30  51  ,w
03:53:30  52  ,mpm
03:53:30  53  ,mph
03:53:30  54  FROM svm6122
03:53:30  55  ORDER BY ydate
03:53:30  56  /

Table created.

Elapsed: 00:00:00.40
03:53:31 SQL> 
03:53:31 SQL> -- rpt
03:53:31 SQL> 
03:53:31 SQL> SELECT
03:53:31   2  pair
03:53:31   3  ,trend
03:53:31   4  ,gatt
03:53:31   5  ,COUNT(pair)
03:53:31   6  ,AVG(g6)
03:53:31   7  FROM svm6142
03:53:31   8  GROUP BY pair,trend,gatt
03:53:31   9  ORDER BY pair,trend,gatt
03:53:31  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6484 -.00224893
ech_usd 	-1 up	      3509 .003563647
ech_usd 	-1		67
ech_usd 	 1 nup	      6326 -.00237667
ech_usd 	 1 up	      2867 .003858371
ech_usd 	 1		 5

6 rows selected.

Elapsed: 00:00:00.05
03:53:31 SQL> 
03:53:31 SQL> 
03:53:31 SQL> -- Derive NTILE based params:
03:53:31 SQL> 
03:53:31 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.15
03:53:31 SQL> CREATE TABLE svm6162 COMPRESS AS
03:53:31   2  SELECT
03:53:31   3  pair
03:53:31   4  ,ydate
03:53:31   5  ,prdate
03:53:31   6  ,clse
03:53:31   7  ,g6
03:53:31   8  ,gatt
03:53:31   9  ,gattn
03:53:31  10  ,trend
03:53:31  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
03:53:31  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
03:53:31  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
03:53:31  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
03:53:31  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
03:53:31  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
03:53:31  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
03:53:31  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
03:53:31  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
03:53:31  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
03:53:31  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
03:53:31  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
03:53:31  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
03:53:31  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
03:53:31  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
03:53:31  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
03:53:31  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
03:53:31  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
03:53:31  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
03:53:31  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
03:53:31  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
03:53:31  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
03:53:31  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
03:53:31  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
03:53:31  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
03:53:31  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
03:53:31  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
03:53:31  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
03:53:31  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
03:53:31  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
03:53:31  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
03:53:31  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
03:53:31  43  ,hh  att32
03:53:31  44  ,d   att33
03:53:31  45  ,w   att34
03:53:31  46  ,mpm att35
03:53:31  47  ,mph att36
03:53:31  48  ,trend att37
03:53:31  49  FROM svm6142
03:53:31  50  ORDER BY ydate
03:53:31  51  /

Table created.

Elapsed: 00:00:04.89
03:53:36 SQL> 
03:53:36 SQL> -- rpt
03:53:36 SQL> 
03:53:36 SQL> SELECT
03:53:36   2  pair
03:53:36   3  ,trend
03:53:36   4  ,gatt
03:53:36   5  ,COUNT(pair)
03:53:36   6  ,AVG(g6)
03:53:36   7  FROM svm6162
03:53:36   8  GROUP BY pair,trend,gatt
03:53:36   9  ORDER BY pair,trend,gatt
03:53:36  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6484 -.00224893
ech_usd 	-1 up	      3509 .003563647
ech_usd 	-1		67
ech_usd 	 1 nup	      6326 -.00237667
ech_usd 	 1 up	      2867 .003858371
ech_usd 	 1		 5

6 rows selected.

Elapsed: 00:00:00.03
03:53:36 SQL> 
03:53:36 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
03:53:36 SQL> CREATE TABLE modsrc COMPRESS AS
03:53:36   2  SELECT
03:53:36   3  pair
03:53:36   4  ,ydate
03:53:36   5  ,prdate
03:53:36   6  ,trend
03:53:36   7  ,g6
03:53:36   8  ,gatt
03:53:36   9  ,gattn
03:53:36  10  FROM svm6162
03:53:36  11  /

Table created.

Elapsed: 00:00:00.09
03:53:36 SQL> 
03:53:36 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.22
03:53:36 SQL> 
03:53:36 SQL> DROP   TABLE ech_ms610 ;

Table dropped.

Elapsed: 00:00:00.06
03:53:36 SQL> CREATE TABLE ech_ms610 COMPRESS AS
03:53:36   2  SELECT
03:53:36   3  ydate
03:53:36   4  ,trend ech_trend
03:53:36   5  ,g6    ech_g6
03:53:36   6  ,gatt  ech_gatt
03:53:36   7  ,gattn ech_gattn
03:53:36   8  FROM modsrc
03:53:36   9  /

Table created.

Elapsed: 00:00:00.08
03:53:37 SQL> 
03:53:37 SQL> ANALYZE TABLE ech_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
03:53:37 SQL> 
03:53:37 SQL> -- I need a copy of the attributes:
03:53:37 SQL> 
03:53:37 SQL> 
03:53:37 SQL> DROP   TABLE ech_att;

Table dropped.

Elapsed: 00:00:00.04
03:53:37 SQL> CREATE TABLE ech_att COMPRESS AS
03:53:37   2  SELECT
03:53:37   3  ydate
03:53:37   4  ,att00 ech_att00
03:53:37   5  ,att01 ech_att01
03:53:37   6  ,att02 ech_att02
03:53:37   7  ,att03 ech_att03
03:53:37   8  ,att04 ech_att04
03:53:37   9  ,att05 ech_att05
03:53:37  10  ,att06 ech_att06
03:53:37  11  ,att07 ech_att07
03:53:37  12  ,att08 ech_att08
03:53:37  13  ,att09 ech_att09
03:53:37  14  ,att10 ech_att10
03:53:37  15  ,att11 ech_att11
03:53:37  16  ,att12 ech_att12
03:53:37  17  ,att13 ech_att13
03:53:37  18  ,att14 ech_att14
03:53:37  19  ,att15 ech_att15
03:53:37  20  ,att16 ech_att16
03:53:37  21  ,att17 ech_att17
03:53:37  22  ,att18 ech_att18
03:53:37  23  ,att19 ech_att19
03:53:37  24  ,att20 ech_att20
03:53:37  25  ,att21 ech_att21
03:53:37  26  ,att22 ech_att22
03:53:37  27  ,att23 ech_att23
03:53:37  28  ,att24 ech_att24
03:53:37  29  ,att25 ech_att25
03:53:37  30  ,att26 ech_att26
03:53:37  31  ,att27 ech_att27
03:53:37  32  ,att28 ech_att28
03:53:37  33  ,att29 ech_att29
03:53:37  34  ,att30 ech_att30
03:53:37  35  ,att31 ech_att31
03:53:37  36  ,att32 ech_att32
03:53:37  37  ,att33 ech_att33
03:53:37  38  ,att34 ech_att34
03:53:37  39  ,att35 ech_att35
03:53:37  40  ,att36 ech_att36
03:53:37  41  ,att37 ech_att37
03:53:37  42  FROM svm6162
03:53:37  43  /

Table created.

Elapsed: 00:00:00.36
03:53:37 SQL> 
03:53:37 SQL> ANALYZE TABLE ech_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.49
03:53:38 SQL> 
03:53:38 SQL> -- rpt
03:53:38 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19258

Elapsed: 00:00:00.79
03:53:38 SQL> SELECT COUNT(*)FROM ech_att;

  COUNT(*)
----------
     19258

Elapsed: 00:00:00.00
03:53:38 SQL> 
03:53:38 SQL> --
03:53:38 SQL> -- egb610.sql
03:53:38 SQL> --
03:53:38 SQL> 
03:53:38 SQL> -- Creates views and tables for backtesting a forex SVM strategy
03:53:38 SQL> 
03:53:38 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.40
03:53:39 SQL> 
03:53:39 SQL> -- I created di5min here:
03:53:39 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
03:53:39 SQL> 
03:53:39 SQL> CREATE OR REPLACE VIEW svm6102 AS
03:53:39   2  SELECT
03:53:39   3  pair
03:53:39   4  ,ydate
03:53:39   5  ,prdate
03:53:39   6  ,rownum rnum -- acts as t in my time-series
03:53:39   7  ,clse
03:53:39   8  -- Derive a bunch of attributes from clse, the latest price:
03:53:39   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
03:53:39  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
03:53:39  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
03:53:39  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
03:53:39  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
03:53:39  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
03:53:39  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
03:53:39  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
03:53:39  17  --
03:53:39  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
03:53:39  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
03:53:39  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
03:53:39  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
03:53:39  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
03:53:39  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
03:53:39  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
03:53:39  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
03:53:39  26  --
03:53:39  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
03:53:39  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
03:53:39  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
03:53:39  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
03:53:39  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
03:53:39  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
03:53:39  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
03:53:39  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
03:53:39  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
03:53:39  36  FROM di5min WHERE pair LIKE'%egb%'
03:53:39  37  AND ydate > sysdate - 95
03:53:39  38  ORDER BY ydate
03:53:39  39  /

View created.

Elapsed: 00:00:00.06
03:53:39 SQL> 
03:53:39 SQL> -- rpt
03:53:39 SQL> 
03:53:39 SQL> SELECT
03:53:39   2  pair
03:53:39   3  ,COUNT(pair)
03:53:39   4  ,MIN(clse),MAX(clse)
03:53:39   5  ,MIN(avg6),MAX(avg6)
03:53:39   6  ,MIN(ydate),MAX(ydate)
03:53:39   7  FROM svm6102
03:53:39   8  GROUP BY pair
03:53:39   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
egb_usd       19257 .833520557 .893920122 .834199029 .892400287 2010-09-30 03:55:01 2011-01-03 03:45:00

Elapsed: 00:00:00.94
03:53:40 SQL> 
03:53:40 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
03:53:40 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.19
03:53:40 SQL> CREATE TABLE svm6122 COMPRESS AS
03:53:40   2  SELECT
03:53:40   3  pair
03:53:40   4  ,ydate
03:53:40   5  ,prdate
03:53:40   6  ,clse
03:53:40   7  -- g6 is important. I want to predict g6:
03:53:40   8  ,ld6 - clse g6
03:53:40   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
03:53:40  10  -- I want more attributes from the ones I derived above:
03:53:40  11  -- clse relation to moving-min
03:53:40  12  ,clse-min4  cm4
03:53:40  13  ,clse-min6  cm6
03:53:40  14  ,clse-min8  cm8
03:53:40  15  ,clse-min10 cm10
03:53:40  16  ,clse-min12 cm12
03:53:40  17  ,clse-min14 cm14
03:53:40  18  ,clse-min16 cm16
03:53:40  19  ,clse-min18 cm18
03:53:40  20  -- clse relation to moving-avg
03:53:40  21  ,clse-avg4  ca4
03:53:40  22  ,clse-avg6  ca6
03:53:40  23  ,clse-avg8  ca8
03:53:40  24  ,clse-avg10 ca10
03:53:40  25  ,clse-avg12 ca12
03:53:40  26  ,clse-avg14 ca14
03:53:40  27  ,clse-avg16 ca16
03:53:40  28  ,clse-avg18 ca18
03:53:40  29  -- clse relation to moving-max
03:53:40  30  ,clse-max4  cx4
03:53:40  31  ,clse-max6  cx6
03:53:40  32  ,clse-max8  cx8
03:53:40  33  ,clse-max10 cx10
03:53:40  34  ,clse-max12 cx12
03:53:40  35  ,clse-max14 cx14
03:53:40  36  ,clse-max16 cx16
03:53:40  37  ,clse-max18 cx18
03:53:40  38  -- Derive more attributes.
03:53:40  39  -- I want to use CORR() here to help SVM see the shape of the series.
03:53:40  40  -- But COVAR_POP is more stable:
03:53:40  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
03:53:40  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
03:53:40  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
03:53:40  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
03:53:40  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
03:53:40  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
03:53:40  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
03:53:40  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
03:53:40  49  -- Derive date related attributes:
03:53:40  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
03:53:40  51  ,0+TO_CHAR(ydate,'D')d
03:53:40  52  ,0+TO_CHAR(ydate,'W')w
03:53:40  53  -- mpm stands for minutes-past-midnight:
03:53:40  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
03:53:40  55  -- mph stands for minutes-past-hour:
03:53:40  56  ,0+TO_CHAR(ydate,'MI')mph
03:53:40  57  FROM svm6102
03:53:40  58  ORDER BY ydate
03:53:40  59  /

Table created.

Elapsed: 00:00:02.42
03:53:42 SQL> 
03:53:42 SQL> -- rpt
03:53:42 SQL> 
03:53:42 SQL> SELECT
03:53:42   2  pair
03:53:42   3  ,COUNT(pair)
03:53:42   4  ,MIN(clse),MAX(clse)
03:53:42   5  ,MIN(ydate),MAX(ydate)
03:53:42   6  FROM svm6122
03:53:42   7  GROUP BY pair
03:53:42   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
egb_usd       19257 .833520557 .893920122 2010-09-30 03:55:01 2011-01-03 03:45:00

Elapsed: 00:00:00.04
03:53:42 SQL> 
03:53:42 SQL> -- Prepare for derivation of NTILE based params:
03:53:42 SQL> 
03:53:42 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.25
03:53:43 SQL> CREATE TABLE svm6142 COMPRESS AS
03:53:43   2  SELECT
03:53:43   3  pair
03:53:43   4  ,ydate
03:53:43   5  ,prdate
03:53:43   6  ,clse
03:53:43   7  ,g6
03:53:43   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
03:53:43   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
03:53:43  10  ,CASE WHEN trend IS NULL THEN 1
03:53:43  11  	    WHEN trend =0      THEN 1
03:53:43  12  	    ELSE trend END trend
03:53:43  13  ,cm4
03:53:43  14  ,cm6
03:53:43  15  ,cm8
03:53:43  16  ,cm10
03:53:43  17  ,cm12
03:53:43  18  ,cm14
03:53:43  19  ,cm16
03:53:43  20  ,cm18
03:53:43  21  --
03:53:43  22  ,ca4
03:53:43  23  ,ca6
03:53:43  24  ,ca8
03:53:43  25  ,ca10
03:53:43  26  ,ca12
03:53:43  27  ,ca14
03:53:43  28  ,ca16
03:53:43  29  ,ca18
03:53:43  30  --
03:53:43  31  ,cx4
03:53:43  32  ,cx6
03:53:43  33  ,cx8
03:53:43  34  ,cx10
03:53:43  35  ,cx12
03:53:43  36  ,cx14
03:53:43  37  ,cx16
03:53:43  38  ,cx18
03:53:43  39  --
03:53:43  40  ,crr4
03:53:43  41  ,crr6
03:53:43  42  ,crr8
03:53:43  43  ,crr10
03:53:43  44  ,crr12
03:53:43  45  ,crr14
03:53:43  46  ,crr16
03:53:43  47  ,crr18
03:53:43  48  --
03:53:43  49  ,hh
03:53:43  50  ,d
03:53:43  51  ,w
03:53:43  52  ,mpm
03:53:43  53  ,mph
03:53:43  54  FROM svm6122
03:53:43  55  ORDER BY ydate
03:53:43  56  /

Table created.

Elapsed: 00:00:00.43
03:53:43 SQL> 
03:53:43 SQL> -- rpt
03:53:43 SQL> 
03:53:43 SQL> SELECT
03:53:43   2  pair
03:53:43   3  ,trend
03:53:43   4  ,gatt
03:53:43   5  ,COUNT(pair)
03:53:43   6  ,AVG(g6)
03:53:43   7  FROM svm6142
03:53:43   8  GROUP BY pair,trend,gatt
03:53:43   9  ORDER BY pair,trend,gatt
03:53:43  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7298 -.00099897
egb_usd 	-1 up	      2640 .002894501
egb_usd 	-1		60
egb_usd 	 1 nup	      6552 -.00130893
egb_usd 	 1 up	      2695 .003001963
egb_usd 	 1		12

6 rows selected.

Elapsed: 00:00:00.04
03:53:43 SQL> 
03:53:43 SQL> 
03:53:43 SQL> -- Derive NTILE based params:
03:53:43 SQL> 
03:53:43 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.31
03:53:43 SQL> CREATE TABLE svm6162 COMPRESS AS
03:53:43   2  SELECT
03:53:43   3  pair
03:53:43   4  ,ydate
03:53:43   5  ,prdate
03:53:43   6  ,clse
03:53:43   7  ,g6
03:53:43   8  ,gatt
03:53:43   9  ,gattn
03:53:43  10  ,trend
03:53:43  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
03:53:43  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
03:53:43  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
03:53:43  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
03:53:43  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
03:53:43  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
03:53:43  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
03:53:43  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
03:53:43  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
03:53:43  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
03:53:43  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
03:53:43  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
03:53:43  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
03:53:43  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
03:53:43  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
03:53:43  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
03:53:43  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
03:53:43  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
03:53:43  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
03:53:43  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
03:53:43  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
03:53:43  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
03:53:43  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
03:53:43  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
03:53:43  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
03:53:43  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
03:53:43  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
03:53:43  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
03:53:43  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
03:53:43  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
03:53:43  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
03:53:43  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
03:53:43  43  ,hh  att32
03:53:43  44  ,d   att33
03:53:43  45  ,w   att34
03:53:43  46  ,mpm att35
03:53:43  47  ,mph att36
03:53:43  48  ,trend att37
03:53:43  49  FROM svm6142
03:53:43  50  ORDER BY ydate
03:53:43  51  /

Table created.

Elapsed: 00:00:05.50
03:53:49 SQL> 
03:53:49 SQL> -- rpt
03:53:49 SQL> 
03:53:49 SQL> SELECT
03:53:49   2  pair
03:53:49   3  ,trend
03:53:49   4  ,gatt
03:53:49   5  ,COUNT(pair)
03:53:49   6  ,AVG(g6)
03:53:49   7  FROM svm6162
03:53:49   8  GROUP BY pair,trend,gatt
03:53:49   9  ORDER BY pair,trend,gatt
03:53:49  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7298 -.00099897
egb_usd 	-1 up	      2640 .002894501
egb_usd 	-1		60
egb_usd 	 1 nup	      6552 -.00130893
egb_usd 	 1 up	      2695 .003001963
egb_usd 	 1		12

6 rows selected.

Elapsed: 00:00:00.03
03:53:49 SQL> 
03:53:49 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.34
03:53:49 SQL> CREATE TABLE modsrc COMPRESS AS
03:53:49   2  SELECT
03:53:49   3  pair
03:53:49   4  ,ydate
03:53:49   5  ,prdate
03:53:49   6  ,trend
03:53:49   7  ,g6
03:53:49   8  ,gatt
03:53:49   9  ,gattn
03:53:49  10  FROM svm6162
03:53:49  11  /

Table created.

Elapsed: 00:00:00.09
03:53:49 SQL> 
03:53:49 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
03:53:50 SQL> 
03:53:50 SQL> DROP   TABLE egb_ms610 ;

Table dropped.

Elapsed: 00:00:00.15
03:53:50 SQL> CREATE TABLE egb_ms610 COMPRESS AS
03:53:50   2  SELECT
03:53:50   3  ydate
03:53:50   4  ,trend egb_trend
03:53:50   5  ,g6    egb_g6
03:53:50   6  ,gatt  egb_gatt
03:53:50   7  ,gattn egb_gattn
03:53:50   8  FROM modsrc
03:53:50   9  /

Table created.

Elapsed: 00:00:00.08
03:53:50 SQL> 
03:53:50 SQL> ANALYZE TABLE egb_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
03:53:50 SQL> 
03:53:50 SQL> -- I need a copy of the attributes:
03:53:50 SQL> 
03:53:50 SQL> 
03:53:50 SQL> DROP   TABLE egb_att;

Table dropped.

Elapsed: 00:00:00.07
03:53:50 SQL> CREATE TABLE egb_att COMPRESS AS
03:53:50   2  SELECT
03:53:50   3  ydate
03:53:50   4  ,att00 egb_att00
03:53:50   5  ,att01 egb_att01
03:53:50   6  ,att02 egb_att02
03:53:50   7  ,att03 egb_att03
03:53:50   8  ,att04 egb_att04
03:53:50   9  ,att05 egb_att05
03:53:50  10  ,att06 egb_att06
03:53:50  11  ,att07 egb_att07
03:53:50  12  ,att08 egb_att08
03:53:50  13  ,att09 egb_att09
03:53:50  14  ,att10 egb_att10
03:53:50  15  ,att11 egb_att11
03:53:50  16  ,att12 egb_att12
03:53:50  17  ,att13 egb_att13
03:53:50  18  ,att14 egb_att14
03:53:50  19  ,att15 egb_att15
03:53:50  20  ,att16 egb_att16
03:53:50  21  ,att17 egb_att17
03:53:50  22  ,att18 egb_att18
03:53:50  23  ,att19 egb_att19
03:53:50  24  ,att20 egb_att20
03:53:50  25  ,att21 egb_att21
03:53:50  26  ,att22 egb_att22
03:53:50  27  ,att23 egb_att23
03:53:50  28  ,att24 egb_att24
03:53:50  29  ,att25 egb_att25
03:53:50  30  ,att26 egb_att26
03:53:50  31  ,att27 egb_att27
03:53:50  32  ,att28 egb_att28
03:53:50  33  ,att29 egb_att29
03:53:50  34  ,att30 egb_att30
03:53:50  35  ,att31 egb_att31
03:53:50  36  ,att32 egb_att32
03:53:50  37  ,att33 egb_att33
03:53:50  38  ,att34 egb_att34
03:53:50  39  ,att35 egb_att35
03:53:50  40  ,att36 egb_att36
03:53:50  41  ,att37 egb_att37
03:53:50  42  FROM svm6162
03:53:50  43  /

Table created.

Elapsed: 00:00:00.18
03:53:50 SQL> 
03:53:50 SQL> ANALYZE TABLE egb_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
03:53:51 SQL> 
03:53:51 SQL> -- rpt
03:53:51 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19257

Elapsed: 00:00:00.93
03:53:52 SQL> SELECT COUNT(*)FROM egb_att;

  COUNT(*)
----------
     19257

Elapsed: 00:00:00.00
03:53:52 SQL> 
03:53:52 SQL> --
03:53:52 SQL> -- ejp610.sql
03:53:52 SQL> --
03:53:52 SQL> 
03:53:52 SQL> -- Creates views and tables for backtesting a forex SVM strategy
03:53:52 SQL> 
03:53:52 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:01.66
03:53:53 SQL> 
03:53:53 SQL> -- I created di5min here:
03:53:53 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
03:53:53 SQL> 
03:53:53 SQL> CREATE OR REPLACE VIEW svm6102 AS
03:53:53   2  SELECT
03:53:53   3  pair
03:53:53   4  ,ydate
03:53:53   5  ,prdate
03:53:53   6  ,rownum rnum -- acts as t in my time-series
03:53:53   7  ,clse
03:53:53   8  -- Derive a bunch of attributes from clse, the latest price:
03:53:53   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
03:53:53  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
03:53:53  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
03:53:53  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
03:53:53  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
03:53:53  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
03:53:53  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
03:53:53  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
03:53:53  17  --
03:53:53  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
03:53:53  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
03:53:53  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
03:53:53  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
03:53:53  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
03:53:53  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
03:53:53  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
03:53:53  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
03:53:53  26  --
03:53:53  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
03:53:53  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
03:53:53  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
03:53:53  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
03:53:53  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
03:53:53  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
03:53:53  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
03:53:53  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
03:53:53  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
03:53:53  36  FROM di5min WHERE pair LIKE'%ejp%'
03:53:53  37  AND ydate > sysdate - 95
03:53:53  38  ORDER BY ydate
03:53:53  39  /

View created.

Elapsed: 00:00:00.04
03:53:53 SQL> 
03:53:53 SQL> -- rpt
03:53:53 SQL> 
03:53:53 SQL> SELECT
03:53:53   2  pair
03:53:53   3  ,COUNT(pair)
03:53:53   4  ,MIN(clse),MAX(clse)
03:53:53   5  ,MIN(avg6),MAX(avg6)
03:53:53   6  ,MIN(ydate),MAX(ydate)
03:53:53   7  FROM svm6102
03:53:53   8  GROUP BY pair
03:53:53   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ejp_usd       19255 107.643765	115.63485 107.776148 115.509678 2010-09-30 03:55:01 2011-01-03 03:45:00

Elapsed: 00:00:00.83
03:53:54 SQL> 
03:53:54 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
03:53:54 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.26
03:53:54 SQL> CREATE TABLE svm6122 COMPRESS AS
03:53:54   2  SELECT
03:53:54   3  pair
03:53:54   4  ,ydate
03:53:54   5  ,prdate
03:53:54   6  ,clse
03:53:54   7  -- g6 is important. I want to predict g6:
03:53:54   8  ,ld6 - clse g6
03:53:54   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
03:53:54  10  -- I want more attributes from the ones I derived above:
03:53:54  11  -- clse relation to moving-min
03:53:54  12  ,clse-min4  cm4
03:53:54  13  ,clse-min6  cm6
03:53:54  14  ,clse-min8  cm8
03:53:54  15  ,clse-min10 cm10
03:53:54  16  ,clse-min12 cm12
03:53:54  17  ,clse-min14 cm14
03:53:54  18  ,clse-min16 cm16
03:53:54  19  ,clse-min18 cm18
03:53:54  20  -- clse relation to moving-avg
03:53:54  21  ,clse-avg4  ca4
03:53:54  22  ,clse-avg6  ca6
03:53:54  23  ,clse-avg8  ca8
03:53:54  24  ,clse-avg10 ca10
03:53:54  25  ,clse-avg12 ca12
03:53:54  26  ,clse-avg14 ca14
03:53:54  27  ,clse-avg16 ca16
03:53:54  28  ,clse-avg18 ca18
03:53:54  29  -- clse relation to moving-max
03:53:54  30  ,clse-max4  cx4
03:53:54  31  ,clse-max6  cx6
03:53:54  32  ,clse-max8  cx8
03:53:54  33  ,clse-max10 cx10
03:53:54  34  ,clse-max12 cx12
03:53:54  35  ,clse-max14 cx14
03:53:54  36  ,clse-max16 cx16
03:53:54  37  ,clse-max18 cx18
03:53:54  38  -- Derive more attributes.
03:53:54  39  -- I want to use CORR() here to help SVM see the shape of the series.
03:53:54  40  -- But COVAR_POP is more stable:
03:53:54  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
03:53:54  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
03:53:54  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
03:53:54  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
03:53:54  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
03:53:54  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
03:53:54  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
03:53:54  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
03:53:54  49  -- Derive date related attributes:
03:53:54  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
03:53:54  51  ,0+TO_CHAR(ydate,'D')d
03:53:54  52  ,0+TO_CHAR(ydate,'W')w
03:53:54  53  -- mpm stands for minutes-past-midnight:
03:53:54  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
03:53:54  55  -- mph stands for minutes-past-hour:
03:53:54  56  ,0+TO_CHAR(ydate,'MI')mph
03:53:54  57  FROM svm6102
03:53:54  58  ORDER BY ydate
03:53:54  59  /

Table created.

Elapsed: 00:00:02.06
03:53:57 SQL> 
03:53:57 SQL> -- rpt
03:53:57 SQL> 
03:53:57 SQL> SELECT
03:53:57   2  pair
03:53:57   3  ,COUNT(pair)
03:53:57   4  ,MIN(clse),MAX(clse)
03:53:57   5  ,MIN(ydate),MAX(ydate)
03:53:57   6  FROM svm6122
03:53:57   7  GROUP BY pair
03:53:57   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ejp_usd       19255 107.643765	115.63485 2010-09-30 03:55:01 2011-01-03 03:45:00

Elapsed: 00:00:00.04
03:53:57 SQL> 
03:53:57 SQL> -- Prepare for derivation of NTILE based params:
03:53:57 SQL> 
03:53:57 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.20
03:53:57 SQL> CREATE TABLE svm6142 COMPRESS AS
03:53:57   2  SELECT
03:53:57   3  pair
03:53:57   4  ,ydate
03:53:57   5  ,prdate
03:53:57   6  ,clse
03:53:57   7  ,g6
03:53:57   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
03:53:57   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
03:53:57  10  ,CASE WHEN trend IS NULL THEN 1
03:53:57  11  	    WHEN trend =0      THEN 1
03:53:57  12  	    ELSE trend END trend
03:53:57  13  ,cm4
03:53:57  14  ,cm6
03:53:57  15  ,cm8
03:53:57  16  ,cm10
03:53:57  17  ,cm12
03:53:57  18  ,cm14
03:53:57  19  ,cm16
03:53:57  20  ,cm18
03:53:57  21  --
03:53:57  22  ,ca4
03:53:57  23  ,ca6
03:53:57  24  ,ca8
03:53:57  25  ,ca10
03:53:57  26  ,ca12
03:53:57  27  ,ca14
03:53:57  28  ,ca16
03:53:57  29  ,ca18
03:53:57  30  --
03:53:57  31  ,cx4
03:53:57  32  ,cx6
03:53:57  33  ,cx8
03:53:57  34  ,cx10
03:53:57  35  ,cx12
03:53:57  36  ,cx14
03:53:57  37  ,cx16
03:53:57  38  ,cx18
03:53:57  39  --
03:53:57  40  ,crr4
03:53:57  41  ,crr6
03:53:57  42  ,crr8
03:53:57  43  ,crr10
03:53:57  44  ,crr12
03:53:57  45  ,crr14
03:53:57  46  ,crr16
03:53:57  47  ,crr18
03:53:57  48  --
03:53:57  49  ,hh
03:53:57  50  ,d
03:53:57  51  ,w
03:53:57  52  ,mpm
03:53:57  53  ,mph
03:53:57  54  FROM svm6122
03:53:57  55  ORDER BY ydate
03:53:57  56  /

Table created.

Elapsed: 00:00:00.41
03:53:57 SQL> 
03:53:57 SQL> -- rpt
03:53:57 SQL> 
03:53:57 SQL> SELECT
03:53:57   2  pair
03:53:57   3  ,trend
03:53:57   4  ,gatt
03:53:57   5  ,COUNT(pair)
03:53:57   6  ,AVG(g6)
03:53:57   7  FROM svm6142
03:53:57   8  GROUP BY pair,trend,gatt
03:53:57   9  ORDER BY pair,trend,gatt
03:53:57  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      4806 -.32530327
ejp_usd 	-1 up	      4835 .269537012
ejp_usd 	-1		71
ejp_usd 	 1 nup	      4903 -.28926055
ejp_usd 	 1 up	      4639 .281061677
ejp_usd 	 1		 1

6 rows selected.

Elapsed: 00:00:00.04
03:53:57 SQL> 
03:53:57 SQL> 
03:53:57 SQL> -- Derive NTILE based params:
03:53:57 SQL> 
03:53:57 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.19
03:53:57 SQL> CREATE TABLE svm6162 COMPRESS AS
03:53:57   2  SELECT
03:53:57   3  pair
03:53:57   4  ,ydate
03:53:57   5  ,prdate
03:53:57   6  ,clse
03:53:57   7  ,g6
03:53:57   8  ,gatt
03:53:57   9  ,gattn
03:53:57  10  ,trend
03:53:57  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
03:53:57  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
03:53:57  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
03:53:57  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
03:53:57  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
03:53:57  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
03:53:57  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
03:53:57  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
03:53:57  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
03:53:57  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
03:53:57  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
03:53:57  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
03:53:57  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
03:53:57  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
03:53:57  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
03:53:57  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
03:53:57  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
03:53:57  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
03:53:57  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
03:53:57  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
03:53:57  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
03:53:57  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
03:53:57  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
03:53:57  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
03:53:57  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
03:53:57  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
03:53:57  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
03:53:57  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
03:53:57  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
03:53:57  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
03:53:57  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
03:53:57  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
03:53:57  43  ,hh  att32
03:53:57  44  ,d   att33
03:53:57  45  ,w   att34
03:53:57  46  ,mpm att35
03:53:57  47  ,mph att36
03:53:57  48  ,trend att37
03:53:57  49  FROM svm6142
03:53:57  50  ORDER BY ydate
03:53:57  51  /

Table created.

Elapsed: 00:00:04.71
03:54:02 SQL> 
03:54:02 SQL> -- rpt
03:54:02 SQL> 
03:54:02 SQL> SELECT
03:54:02   2  pair
03:54:02   3  ,trend
03:54:02   4  ,gatt
03:54:02   5  ,COUNT(pair)
03:54:02   6  ,AVG(g6)
03:54:02   7  FROM svm6162
03:54:02   8  GROUP BY pair,trend,gatt
03:54:02   9  ORDER BY pair,trend,gatt
03:54:02  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      4806 -.32530327
ejp_usd 	-1 up	      4835 .269537012
ejp_usd 	-1		71
ejp_usd 	 1 nup	      4903 -.28926055
ejp_usd 	 1 up	      4639 .281061677
ejp_usd 	 1		 1

6 rows selected.

Elapsed: 00:00:00.02
03:54:02 SQL> 
03:54:02 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
03:54:02 SQL> CREATE TABLE modsrc COMPRESS AS
03:54:02   2  SELECT
03:54:02   3  pair
03:54:02   4  ,ydate
03:54:02   5  ,prdate
03:54:02   6  ,trend
03:54:02   7  ,g6
03:54:02   8  ,gatt
03:54:02   9  ,gattn
03:54:02  10  FROM svm6162
03:54:02  11  /

Table created.

Elapsed: 00:00:00.08
03:54:02 SQL> 
03:54:02 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.29
03:54:03 SQL> 
03:54:03 SQL> DROP   TABLE ejp_ms610 ;

Table dropped.

Elapsed: 00:00:00.08
03:54:03 SQL> CREATE TABLE ejp_ms610 COMPRESS AS
03:54:03   2  SELECT
03:54:03   3  ydate
03:54:03   4  ,trend ejp_trend
03:54:03   5  ,g6    ejp_g6
03:54:03   6  ,gatt  ejp_gatt
03:54:03   7  ,gattn ejp_gattn
03:54:03   8  FROM modsrc
03:54:03   9  /

Table created.

Elapsed: 00:00:00.06
03:54:03 SQL> 
03:54:03 SQL> ANALYZE TABLE ejp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
03:54:03 SQL> 
03:54:03 SQL> -- I need a copy of the attributes:
03:54:03 SQL> 
03:54:03 SQL> 
03:54:03 SQL> DROP   TABLE ejp_att;

Table dropped.

Elapsed: 00:00:00.06
03:54:03 SQL> CREATE TABLE ejp_att COMPRESS AS
03:54:03   2  SELECT
03:54:03   3  ydate
03:54:03   4  ,att00 ejp_att00
03:54:03   5  ,att01 ejp_att01
03:54:03   6  ,att02 ejp_att02
03:54:03   7  ,att03 ejp_att03
03:54:03   8  ,att04 ejp_att04
03:54:03   9  ,att05 ejp_att05
03:54:03  10  ,att06 ejp_att06
03:54:03  11  ,att07 ejp_att07
03:54:03  12  ,att08 ejp_att08
03:54:03  13  ,att09 ejp_att09
03:54:03  14  ,att10 ejp_att10
03:54:03  15  ,att11 ejp_att11
03:54:03  16  ,att12 ejp_att12
03:54:03  17  ,att13 ejp_att13
03:54:03  18  ,att14 ejp_att14
03:54:03  19  ,att15 ejp_att15
03:54:03  20  ,att16 ejp_att16
03:54:03  21  ,att17 ejp_att17
03:54:03  22  ,att18 ejp_att18
03:54:03  23  ,att19 ejp_att19
03:54:03  24  ,att20 ejp_att20
03:54:03  25  ,att21 ejp_att21
03:54:03  26  ,att22 ejp_att22
03:54:03  27  ,att23 ejp_att23
03:54:03  28  ,att24 ejp_att24
03:54:03  29  ,att25 ejp_att25
03:54:03  30  ,att26 ejp_att26
03:54:03  31  ,att27 ejp_att27
03:54:03  32  ,att28 ejp_att28
03:54:03  33  ,att29 ejp_att29
03:54:03  34  ,att30 ejp_att30
03:54:03  35  ,att31 ejp_att31
03:54:03  36  ,att32 ejp_att32
03:54:03  37  ,att33 ejp_att33
03:54:03  38  ,att34 ejp_att34
03:54:03  39  ,att35 ejp_att35
03:54:03  40  ,att36 ejp_att36
03:54:03  41  ,att37 ejp_att37
03:54:03  42  FROM svm6162
03:54:03  43  /

Table created.

Elapsed: 00:00:00.18
03:54:03 SQL> 
03:54:03 SQL> ANALYZE TABLE ejp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.43
03:54:04 SQL> 
03:54:04 SQL> -- rpt
03:54:04 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19255

Elapsed: 00:00:00.80
03:54:04 SQL> SELECT COUNT(*)FROM ejp_att;

  COUNT(*)
----------
     19255

Elapsed: 00:00:00.00
03:54:04 SQL> 
03:54:04 SQL> --
03:54:04 SQL> -- ajp610.sql
03:54:04 SQL> --
03:54:04 SQL> 
03:54:04 SQL> -- Creates views and tables for backtesting a forex SVM strategy
03:54:04 SQL> 
03:54:04 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.44
03:54:05 SQL> 
03:54:05 SQL> -- I created di5min here:
03:54:05 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
03:54:05 SQL> 
03:54:05 SQL> CREATE OR REPLACE VIEW svm6102 AS
03:54:05   2  SELECT
03:54:05   3  pair
03:54:05   4  ,ydate
03:54:05   5  ,prdate
03:54:05   6  ,rownum rnum -- acts as t in my time-series
03:54:05   7  ,clse
03:54:05   8  -- Derive a bunch of attributes from clse, the latest price:
03:54:05   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
03:54:05  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
03:54:05  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
03:54:05  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
03:54:05  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
03:54:05  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
03:54:05  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
03:54:05  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
03:54:05  17  --
03:54:05  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
03:54:05  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
03:54:05  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
03:54:05  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
03:54:05  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
03:54:05  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
03:54:05  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
03:54:05  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
03:54:05  26  --
03:54:05  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
03:54:05  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
03:54:05  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
03:54:05  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
03:54:05  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
03:54:05  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
03:54:05  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
03:54:05  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
03:54:05  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
03:54:05  36  FROM di5min WHERE pair LIKE'%ajp%'
03:54:05  37  AND ydate > sysdate - 95
03:54:05  38  ORDER BY ydate
03:54:05  39  /

View created.

Elapsed: 00:00:00.04
03:54:05 SQL> 
03:54:05 SQL> -- rpt
03:54:05 SQL> 
03:54:05 SQL> SELECT
03:54:05   2  pair
03:54:05   3  ,COUNT(pair)
03:54:05   4  ,MIN(clse),MAX(clse)
03:54:05   5  ,MIN(avg6),MAX(avg6)
03:54:05   6  ,MIN(ydate),MAX(ydate)
03:54:05   7  FROM svm6102
03:54:05   8  GROUP BY pair
03:54:05   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ajp_usd       19252  78.249976 83.6669853 78.5106193  83.546306 2010-09-30 03:55:01 2011-01-03 03:45:00

Elapsed: 00:00:00.76
03:54:06 SQL> 
03:54:06 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
03:54:06 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.19
03:54:06 SQL> CREATE TABLE svm6122 COMPRESS AS
03:54:06   2  SELECT
03:54:06   3  pair
03:54:06   4  ,ydate
03:54:06   5  ,prdate
03:54:06   6  ,clse
03:54:06   7  -- g6 is important. I want to predict g6:
03:54:06   8  ,ld6 - clse g6
03:54:06   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
03:54:06  10  -- I want more attributes from the ones I derived above:
03:54:06  11  -- clse relation to moving-min
03:54:06  12  ,clse-min4  cm4
03:54:06  13  ,clse-min6  cm6
03:54:06  14  ,clse-min8  cm8
03:54:06  15  ,clse-min10 cm10
03:54:06  16  ,clse-min12 cm12
03:54:06  17  ,clse-min14 cm14
03:54:06  18  ,clse-min16 cm16
03:54:06  19  ,clse-min18 cm18
03:54:06  20  -- clse relation to moving-avg
03:54:06  21  ,clse-avg4  ca4
03:54:06  22  ,clse-avg6  ca6
03:54:06  23  ,clse-avg8  ca8
03:54:06  24  ,clse-avg10 ca10
03:54:06  25  ,clse-avg12 ca12
03:54:06  26  ,clse-avg14 ca14
03:54:06  27  ,clse-avg16 ca16
03:54:06  28  ,clse-avg18 ca18
03:54:06  29  -- clse relation to moving-max
03:54:06  30  ,clse-max4  cx4
03:54:06  31  ,clse-max6  cx6
03:54:06  32  ,clse-max8  cx8
03:54:06  33  ,clse-max10 cx10
03:54:06  34  ,clse-max12 cx12
03:54:06  35  ,clse-max14 cx14
03:54:06  36  ,clse-max16 cx16
03:54:06  37  ,clse-max18 cx18
03:54:06  38  -- Derive more attributes.
03:54:06  39  -- I want to use CORR() here to help SVM see the shape of the series.
03:54:06  40  -- But COVAR_POP is more stable:
03:54:06  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
03:54:06  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
03:54:06  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
03:54:06  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
03:54:06  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
03:54:06  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
03:54:06  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
03:54:06  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
03:54:06  49  -- Derive date related attributes:
03:54:06  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
03:54:06  51  ,0+TO_CHAR(ydate,'D')d
03:54:06  52  ,0+TO_CHAR(ydate,'W')w
03:54:06  53  -- mpm stands for minutes-past-midnight:
03:54:06  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
03:54:06  55  -- mph stands for minutes-past-hour:
03:54:06  56  ,0+TO_CHAR(ydate,'MI')mph
03:54:06  57  FROM svm6102
03:54:06  58  ORDER BY ydate
03:54:06  59  /

Table created.

Elapsed: 00:00:02.01
03:54:08 SQL> 
03:54:08 SQL> -- rpt
03:54:08 SQL> 
03:54:08 SQL> SELECT
03:54:08   2  pair
03:54:08   3  ,COUNT(pair)
03:54:08   4  ,MIN(clse),MAX(clse)
03:54:08   5  ,MIN(ydate),MAX(ydate)
03:54:08   6  FROM svm6122
03:54:08   7  GROUP BY pair
03:54:08   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ajp_usd       19252  78.249976 83.6669853 2010-09-30 03:55:01 2011-01-03 03:45:00

Elapsed: 00:00:00.03
03:54:08 SQL> 
03:54:08 SQL> -- Prepare for derivation of NTILE based params:
03:54:08 SQL> 
03:54:08 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.19
03:54:08 SQL> CREATE TABLE svm6142 COMPRESS AS
03:54:08   2  SELECT
03:54:08   3  pair
03:54:08   4  ,ydate
03:54:08   5  ,prdate
03:54:08   6  ,clse
03:54:08   7  ,g6
03:54:08   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
03:54:08   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
03:54:08  10  ,CASE WHEN trend IS NULL THEN 1
03:54:08  11  	    WHEN trend =0      THEN 1
03:54:08  12  	    ELSE trend END trend
03:54:08  13  ,cm4
03:54:08  14  ,cm6
03:54:08  15  ,cm8
03:54:08  16  ,cm10
03:54:08  17  ,cm12
03:54:08  18  ,cm14
03:54:08  19  ,cm16
03:54:08  20  ,cm18
03:54:08  21  --
03:54:08  22  ,ca4
03:54:08  23  ,ca6
03:54:08  24  ,ca8
03:54:08  25  ,ca10
03:54:08  26  ,ca12
03:54:08  27  ,ca14
03:54:08  28  ,ca16
03:54:08  29  ,ca18
03:54:08  30  --
03:54:08  31  ,cx4
03:54:08  32  ,cx6
03:54:08  33  ,cx8
03:54:08  34  ,cx10
03:54:08  35  ,cx12
03:54:08  36  ,cx14
03:54:08  37  ,cx16
03:54:08  38  ,cx18
03:54:08  39  --
03:54:08  40  ,crr4
03:54:08  41  ,crr6
03:54:08  42  ,crr8
03:54:08  43  ,crr10
03:54:08  44  ,crr12
03:54:08  45  ,crr14
03:54:08  46  ,crr16
03:54:08  47  ,crr18
03:54:08  48  --
03:54:08  49  ,hh
03:54:08  50  ,d
03:54:08  51  ,w
03:54:08  52  ,mpm
03:54:08  53  ,mph
03:54:08  54  FROM svm6122
03:54:08  55  ORDER BY ydate
03:54:08  56  /

Table created.

Elapsed: 00:00:00.37
03:54:08 SQL> 
03:54:08 SQL> -- rpt
03:54:08 SQL> 
03:54:08 SQL> SELECT
03:54:08   2  pair
03:54:08   3  ,trend
03:54:08   4  ,gatt
03:54:08   5  ,COUNT(pair)
03:54:08   6  ,AVG(g6)
03:54:08   7  FROM svm6142
03:54:08   8  GROUP BY pair,trend,gatt
03:54:08   9  ORDER BY pair,trend,gatt
03:54:08  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ajp_usd 	-1 nup	      4029  -.2285948
ajp_usd 	-1 up	      5142 .222095732
ajp_usd 	-1		66
ajp_usd 	 1 nup	      5223 -.20011249
ajp_usd 	 1 up	      4786 .205617463
ajp_usd 	 1		 6

6 rows selected.

Elapsed: 00:00:00.04
03:54:09 SQL> 
03:54:09 SQL> 
03:54:09 SQL> -- Derive NTILE based params:
03:54:09 SQL> 
03:54:09 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.12
03:54:09 SQL> CREATE TABLE svm6162 COMPRESS AS
03:54:09   2  SELECT
03:54:09   3  pair
03:54:09   4  ,ydate
03:54:09   5  ,prdate
03:54:09   6  ,clse
03:54:09   7  ,g6
03:54:09   8  ,gatt
03:54:09   9  ,gattn
03:54:09  10  ,trend
03:54:09  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
03:54:09  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
03:54:09  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
03:54:09  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
03:54:09  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
03:54:09  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
03:54:09  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
03:54:09  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
03:54:09  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
03:54:09  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
03:54:09  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
03:54:09  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
03:54:09  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
03:54:09  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
03:54:09  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
03:54:09  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
03:54:09  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
03:54:09  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
03:54:09  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
03:54:09  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
03:54:09  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
03:54:09  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
03:54:09  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
03:54:09  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
03:54:09  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
03:54:09  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
03:54:09  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
03:54:09  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
03:54:09  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
03:54:09  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
03:54:09  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
03:54:09  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
03:54:09  43  ,hh  att32
03:54:09  44  ,d   att33
03:54:09  45  ,w   att34
03:54:09  46  ,mpm att35
03:54:09  47  ,mph att36
03:54:09  48  ,trend att37
03:54:09  49  FROM svm6142
03:54:09  50  ORDER BY ydate
03:54:09  51  /

Table created.

Elapsed: 00:00:04.83
03:54:13 SQL> 
03:54:13 SQL> -- rpt
03:54:13 SQL> 
03:54:13 SQL> SELECT
03:54:13   2  pair
03:54:13   3  ,trend
03:54:13   4  ,gatt
03:54:13   5  ,COUNT(pair)
03:54:13   6  ,AVG(g6)
03:54:13   7  FROM svm6162
03:54:13   8  GROUP BY pair,trend,gatt
03:54:13   9  ORDER BY pair,trend,gatt
03:54:13  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ajp_usd 	-1 nup	      4029  -.2285948
ajp_usd 	-1 up	      5142 .222095732
ajp_usd 	-1		66
ajp_usd 	 1 nup	      5223 -.20011249
ajp_usd 	 1 up	      4786 .205617463
ajp_usd 	 1		 6

6 rows selected.

Elapsed: 00:00:00.03
03:54:13 SQL> 
03:54:13 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.11
03:54:14 SQL> CREATE TABLE modsrc COMPRESS AS
03:54:14   2  SELECT
03:54:14   3  pair
03:54:14   4  ,ydate
03:54:14   5  ,prdate
03:54:14   6  ,trend
03:54:14   7  ,g6
03:54:14   8  ,gatt
03:54:14   9  ,gattn
03:54:14  10  FROM svm6162
03:54:14  11  /

Table created.

Elapsed: 00:00:00.08
03:54:14 SQL> 
03:54:14 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
03:54:14 SQL> 
03:54:14 SQL> DROP   TABLE ajp_ms610 ;

Table dropped.

Elapsed: 00:00:00.06
03:54:14 SQL> CREATE TABLE ajp_ms610 COMPRESS AS
03:54:14   2  SELECT
03:54:14   3  ydate
03:54:14   4  ,trend ajp_trend
03:54:14   5  ,g6    ajp_g6
03:54:14   6  ,gatt  ajp_gatt
03:54:14   7  ,gattn ajp_gattn
03:54:14   8  FROM modsrc
03:54:14   9  /

Table created.

Elapsed: 00:00:00.07
03:54:14 SQL> 
03:54:14 SQL> ANALYZE TABLE ajp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
03:54:14 SQL> 
03:54:14 SQL> -- I need a copy of the attributes:
03:54:14 SQL> 
03:54:14 SQL> 
03:54:14 SQL> DROP   TABLE ajp_att;

Table dropped.

Elapsed: 00:00:00.06
03:54:14 SQL> CREATE TABLE ajp_att COMPRESS AS
03:54:14   2  SELECT
03:54:14   3  ydate
03:54:14   4  ,att00 ajp_att00
03:54:14   5  ,att01 ajp_att01
03:54:14   6  ,att02 ajp_att02
03:54:14   7  ,att03 ajp_att03
03:54:14   8  ,att04 ajp_att04
03:54:14   9  ,att05 ajp_att05
03:54:14  10  ,att06 ajp_att06
03:54:14  11  ,att07 ajp_att07
03:54:14  12  ,att08 ajp_att08
03:54:14  13  ,att09 ajp_att09
03:54:14  14  ,att10 ajp_att10
03:54:14  15  ,att11 ajp_att11
03:54:14  16  ,att12 ajp_att12
03:54:14  17  ,att13 ajp_att13
03:54:14  18  ,att14 ajp_att14
03:54:14  19  ,att15 ajp_att15
03:54:14  20  ,att16 ajp_att16
03:54:14  21  ,att17 ajp_att17
03:54:14  22  ,att18 ajp_att18
03:54:14  23  ,att19 ajp_att19
03:54:14  24  ,att20 ajp_att20
03:54:14  25  ,att21 ajp_att21
03:54:14  26  ,att22 ajp_att22
03:54:14  27  ,att23 ajp_att23
03:54:14  28  ,att24 ajp_att24
03:54:14  29  ,att25 ajp_att25
03:54:14  30  ,att26 ajp_att26
03:54:14  31  ,att27 ajp_att27
03:54:14  32  ,att28 ajp_att28
03:54:14  33  ,att29 ajp_att29
03:54:14  34  ,att30 ajp_att30
03:54:14  35  ,att31 ajp_att31
03:54:14  36  ,att32 ajp_att32
03:54:14  37  ,att33 ajp_att33
03:54:14  38  ,att34 ajp_att34
03:54:14  39  ,att35 ajp_att35
03:54:14  40  ,att36 ajp_att36
03:54:14  41  ,att37 ajp_att37
03:54:14  42  FROM svm6162
03:54:14  43  /

Table created.

Elapsed: 00:00:00.19
03:54:14 SQL> 
03:54:14 SQL> ANALYZE TABLE ajp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
03:54:15 SQL> 
03:54:15 SQL> -- rpt
03:54:15 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19252

Elapsed: 00:00:00.77
03:54:16 SQL> SELECT COUNT(*)FROM ajp_att;

  COUNT(*)
----------
     19252

Elapsed: 00:00:00.00
03:54:16 SQL> 
03:54:16 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
