
SQL*Plus: Release 11.2.0.1.0 Production on Mon Jan 3 07:05:58 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

07:05:58 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
07:05:58 SQL> 07:05:58 SQL> --
07:05:58 SQL> -- eur610.sql
07:05:58 SQL> --
07:05:58 SQL> 
07:05:58 SQL> -- Creates views and tables for backtesting a forex SVM strategy
07:05:58 SQL> 
07:05:58 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.02
07:05:58 SQL> 
07:05:58 SQL> -- I created di5min here:
07:05:58 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
07:05:58 SQL> 
07:05:58 SQL> CREATE OR REPLACE VIEW svm6102 AS
07:05:58   2  SELECT
07:05:58   3  pair
07:05:58   4  ,ydate
07:05:58   5  ,prdate
07:05:58   6  ,rownum rnum -- acts as t in my time-series
07:05:58   7  ,clse
07:05:58   8  -- Derive a bunch of attributes from clse, the latest price:
07:05:58   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
07:05:58  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
07:05:58  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
07:05:58  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
07:05:58  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
07:05:58  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
07:05:58  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
07:05:58  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
07:05:58  17  --
07:05:58  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
07:05:58  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
07:05:58  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
07:05:58  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
07:05:58  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
07:05:58  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
07:05:58  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
07:05:58  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
07:05:58  26  --
07:05:58  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
07:05:58  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
07:05:58  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
07:05:58  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
07:05:58  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
07:05:58  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
07:05:58  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
07:05:58  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
07:05:58  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
07:05:58  36  FROM di5min WHERE pair LIKE'%eur%'
07:05:58  37  AND ydate > sysdate - 95
07:05:58  38  ORDER BY ydate
07:05:58  39  /

View created.

Elapsed: 00:00:00.08
07:05:59 SQL> 
07:05:59 SQL> -- rpt
07:05:59 SQL> 
07:05:59 SQL> SELECT
07:05:59   2  pair
07:05:59   3  ,COUNT(pair)
07:05:59   4  ,MIN(clse),MAX(clse)
07:05:59   5  ,MIN(avg6),MAX(avg6)
07:05:59   6  ,MIN(ydate),MAX(ydate)
07:05:59   7  FROM svm6102
07:05:59   8  GROUP BY pair
07:05:59   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_usd       19259    1.29735	   1.4273 1.29875103 1.42436233 2010-09-30 07:10:01 2011-01-03 07:00:00

Elapsed: 00:00:00.89
07:05:59 SQL> 
07:05:59 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
07:05:59 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.10
07:06:00 SQL> CREATE TABLE svm6122 COMPRESS AS
07:06:00   2  SELECT
07:06:00   3  pair
07:06:00   4  ,ydate
07:06:00   5  ,prdate
07:06:00   6  ,clse
07:06:00   7  -- g6 is important. I want to predict g6:
07:06:00   8  ,ld6 - clse g6
07:06:00   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
07:06:00  10  -- I want more attributes from the ones I derived above:
07:06:00  11  -- clse relation to moving-min
07:06:00  12  ,clse-min4  cm4
07:06:00  13  ,clse-min6  cm6
07:06:00  14  ,clse-min8  cm8
07:06:00  15  ,clse-min10 cm10
07:06:00  16  ,clse-min12 cm12
07:06:00  17  ,clse-min14 cm14
07:06:00  18  ,clse-min16 cm16
07:06:00  19  ,clse-min18 cm18
07:06:00  20  -- clse relation to moving-avg
07:06:00  21  ,clse-avg4  ca4
07:06:00  22  ,clse-avg6  ca6
07:06:00  23  ,clse-avg8  ca8
07:06:00  24  ,clse-avg10 ca10
07:06:00  25  ,clse-avg12 ca12
07:06:00  26  ,clse-avg14 ca14
07:06:00  27  ,clse-avg16 ca16
07:06:00  28  ,clse-avg18 ca18
07:06:00  29  -- clse relation to moving-max
07:06:00  30  ,clse-max4  cx4
07:06:00  31  ,clse-max6  cx6
07:06:00  32  ,clse-max8  cx8
07:06:00  33  ,clse-max10 cx10
07:06:00  34  ,clse-max12 cx12
07:06:00  35  ,clse-max14 cx14
07:06:00  36  ,clse-max16 cx16
07:06:00  37  ,clse-max18 cx18
07:06:00  38  -- Derive more attributes.
07:06:00  39  -- I want to use CORR() here to help SVM see the shape of the series.
07:06:00  40  -- But COVAR_POP is more stable:
07:06:00  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
07:06:00  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
07:06:00  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
07:06:00  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
07:06:00  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
07:06:00  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
07:06:00  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
07:06:00  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
07:06:00  49  -- Derive date related attributes:
07:06:00  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
07:06:00  51  ,0+TO_CHAR(ydate,'D')d
07:06:00  52  ,0+TO_CHAR(ydate,'W')w
07:06:00  53  -- mpm stands for minutes-past-midnight:
07:06:00  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
07:06:00  55  -- mph stands for minutes-past-hour:
07:06:00  56  ,0+TO_CHAR(ydate,'MI')mph
07:06:00  57  FROM svm6102
07:06:00  58  ORDER BY ydate
07:06:00  59  /

Table created.

Elapsed: 00:00:02.39
07:06:02 SQL> 
07:06:02 SQL> -- rpt
07:06:02 SQL> 
07:06:02 SQL> SELECT
07:06:02   2  pair
07:06:02   3  ,COUNT(pair)
07:06:02   4  ,MIN(clse),MAX(clse)
07:06:02   5  ,MIN(ydate),MAX(ydate)
07:06:02   6  FROM svm6122
07:06:02   7  GROUP BY pair
07:06:02   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_usd       19259    1.29735	   1.4273 2010-09-30 07:10:01 2011-01-03 07:00:00

Elapsed: 00:00:00.25
07:06:02 SQL> 
07:06:02 SQL> -- Prepare for derivation of NTILE based params:
07:06:02 SQL> 
07:06:02 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.27
07:06:02 SQL> CREATE TABLE svm6142 COMPRESS AS
07:06:02   2  SELECT
07:06:02   3  pair
07:06:02   4  ,ydate
07:06:02   5  ,prdate
07:06:02   6  ,clse
07:06:02   7  ,g6
07:06:02   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
07:06:02   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
07:06:02  10  ,CASE WHEN trend IS NULL THEN 1
07:06:02  11  	    WHEN trend =0      THEN 1
07:06:02  12  	    ELSE trend END trend
07:06:02  13  ,cm4
07:06:02  14  ,cm6
07:06:02  15  ,cm8
07:06:02  16  ,cm10
07:06:02  17  ,cm12
07:06:02  18  ,cm14
07:06:02  19  ,cm16
07:06:02  20  ,cm18
07:06:02  21  --
07:06:02  22  ,ca4
07:06:02  23  ,ca6
07:06:02  24  ,ca8
07:06:02  25  ,ca10
07:06:02  26  ,ca12
07:06:02  27  ,ca14
07:06:02  28  ,ca16
07:06:02  29  ,ca18
07:06:02  30  --
07:06:02  31  ,cx4
07:06:02  32  ,cx6
07:06:02  33  ,cx8
07:06:02  34  ,cx10
07:06:02  35  ,cx12
07:06:02  36  ,cx14
07:06:02  37  ,cx16
07:06:02  38  ,cx18
07:06:02  39  --
07:06:02  40  ,crr4
07:06:02  41  ,crr6
07:06:02  42  ,crr8
07:06:02  43  ,crr10
07:06:02  44  ,crr12
07:06:02  45  ,crr14
07:06:02  46  ,crr16
07:06:02  47  ,crr18
07:06:02  48  --
07:06:02  49  ,hh
07:06:02  50  ,d
07:06:02  51  ,w
07:06:02  52  ,mpm
07:06:02  53  ,mph
07:06:02  54  FROM svm6122
07:06:02  55  ORDER BY ydate
07:06:02  56  /

Table created.

Elapsed: 00:00:00.36
07:06:03 SQL> 
07:06:03 SQL> -- rpt
07:06:03 SQL> 
07:06:03 SQL> SELECT
07:06:03   2  pair
07:06:03   3  ,trend
07:06:03   4  ,gatt
07:06:03   5  ,COUNT(pair)
07:06:03   6  ,AVG(g6)
07:06:03   7  FROM svm6142
07:06:03   8  GROUP BY pair,trend,gatt
07:06:03   9  ORDER BY pair,trend,gatt
07:06:03  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6004 -.00315437
eur_usd 	-1 up	      3522 .004466124
eur_usd 	-1		72
eur_usd 	 1 nup	      5847 -.00317437
eur_usd 	 1 up	      3814 .005051344

Elapsed: 00:00:00.09
07:06:03 SQL> 
07:06:03 SQL> 
07:06:03 SQL> -- Derive NTILE based params:
07:06:03 SQL> 
07:06:03 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.79
07:06:04 SQL> CREATE TABLE svm6162 COMPRESS AS
07:06:04   2  SELECT
07:06:04   3  pair
07:06:04   4  ,ydate
07:06:04   5  ,prdate
07:06:04   6  ,clse
07:06:04   7  ,g6
07:06:04   8  ,gatt
07:06:04   9  ,gattn
07:06:04  10  ,trend
07:06:04  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
07:06:04  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
07:06:04  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
07:06:04  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
07:06:04  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
07:06:04  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
07:06:04  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
07:06:04  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
07:06:04  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
07:06:04  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
07:06:04  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
07:06:04  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
07:06:04  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
07:06:04  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
07:06:04  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
07:06:04  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
07:06:04  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
07:06:04  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
07:06:04  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
07:06:04  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
07:06:04  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
07:06:04  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
07:06:04  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
07:06:04  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
07:06:04  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
07:06:04  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
07:06:04  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
07:06:04  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
07:06:04  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
07:06:04  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
07:06:04  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
07:06:04  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
07:06:04  43  ,hh  att32
07:06:04  44  ,d   att33
07:06:04  45  ,w   att34
07:06:04  46  ,mpm att35
07:06:04  47  ,mph att36
07:06:04  48  ,trend att37
07:06:04  49  FROM svm6142
07:06:04  50  ORDER BY ydate
07:06:04  51  /

Table created.

Elapsed: 00:00:04.67
07:06:08 SQL> 
07:06:08 SQL> -- rpt
07:06:08 SQL> 
07:06:08 SQL> SELECT
07:06:08   2  pair
07:06:08   3  ,trend
07:06:08   4  ,gatt
07:06:08   5  ,COUNT(pair)
07:06:08   6  ,AVG(g6)
07:06:08   7  FROM svm6162
07:06:08   8  GROUP BY pair,trend,gatt
07:06:08   9  ORDER BY pair,trend,gatt
07:06:08  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6004 -.00315437
eur_usd 	-1 up	      3522 .004466124
eur_usd 	-1		72
eur_usd 	 1 nup	      5847 -.00317437
eur_usd 	 1 up	      3814 .005051344

Elapsed: 00:00:00.03
07:06:08 SQL> 
07:06:08 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.22
07:06:09 SQL> CREATE TABLE modsrc COMPRESS AS
07:06:09   2  SELECT
07:06:09   3  pair
07:06:09   4  ,ydate
07:06:09   5  ,prdate
07:06:09   6  ,trend
07:06:09   7  ,g6
07:06:09   8  ,gatt
07:06:09   9  ,gattn
07:06:09  10  FROM svm6162
07:06:09  11  /

Table created.

Elapsed: 00:00:00.09
07:06:09 SQL> 
07:06:09 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
07:06:09 SQL> 
07:06:09 SQL> DROP   TABLE eur_ms610 ;

Table dropped.

Elapsed: 00:00:00.07
07:06:09 SQL> CREATE TABLE eur_ms610 COMPRESS AS
07:06:09   2  SELECT
07:06:09   3  ydate
07:06:09   4  ,trend eur_trend
07:06:09   5  ,g6    eur_g6
07:06:09   6  ,gatt  eur_gatt
07:06:09   7  ,gattn eur_gattn
07:06:09   8  FROM modsrc
07:06:09   9  /

Table created.

Elapsed: 00:00:00.08
07:06:09 SQL> 
07:06:09 SQL> ANALYZE TABLE eur_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
07:06:09 SQL> 
07:06:09 SQL> -- I need a copy of the attributes:
07:06:09 SQL> 
07:06:09 SQL> 
07:06:09 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.04
07:06:09 SQL> CREATE TABLE eur_att COMPRESS AS
07:06:09   2  SELECT
07:06:09   3  ydate
07:06:09   4  ,att00 eur_att00
07:06:09   5  ,att01 eur_att01
07:06:09   6  ,att02 eur_att02
07:06:09   7  ,att03 eur_att03
07:06:09   8  ,att04 eur_att04
07:06:09   9  ,att05 eur_att05
07:06:09  10  ,att06 eur_att06
07:06:09  11  ,att07 eur_att07
07:06:09  12  ,att08 eur_att08
07:06:09  13  ,att09 eur_att09
07:06:09  14  ,att10 eur_att10
07:06:09  15  ,att11 eur_att11
07:06:09  16  ,att12 eur_att12
07:06:09  17  ,att13 eur_att13
07:06:09  18  ,att14 eur_att14
07:06:09  19  ,att15 eur_att15
07:06:09  20  ,att16 eur_att16
07:06:09  21  ,att17 eur_att17
07:06:09  22  ,att18 eur_att18
07:06:09  23  ,att19 eur_att19
07:06:09  24  ,att20 eur_att20
07:06:09  25  ,att21 eur_att21
07:06:09  26  ,att22 eur_att22
07:06:09  27  ,att23 eur_att23
07:06:09  28  ,att24 eur_att24
07:06:09  29  ,att25 eur_att25
07:06:09  30  ,att26 eur_att26
07:06:09  31  ,att27 eur_att27
07:06:09  32  ,att28 eur_att28
07:06:09  33  ,att29 eur_att29
07:06:09  34  ,att30 eur_att30
07:06:09  35  ,att31 eur_att31
07:06:09  36  ,att32 eur_att32
07:06:09  37  ,att33 eur_att33
07:06:09  38  ,att34 eur_att34
07:06:09  39  ,att35 eur_att35
07:06:09  40  ,att36 eur_att36
07:06:09  41  ,att37 eur_att37
07:06:09  42  FROM svm6162
07:06:09  43  /

Table created.

Elapsed: 00:00:00.17
07:06:09 SQL> 
07:06:09 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
07:06:10 SQL> 
07:06:10 SQL> -- rpt
07:06:10 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19259

Elapsed: 00:00:00.88
07:06:11 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     19259

Elapsed: 00:00:00.00
07:06:11 SQL> 
07:06:11 SQL> --
07:06:11 SQL> -- aud610.sql
07:06:11 SQL> --
07:06:11 SQL> 
07:06:11 SQL> -- Creates views and tables for backtesting a forex SVM strategy
07:06:11 SQL> 
07:06:11 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.67
07:06:11 SQL> 
07:06:11 SQL> -- I created di5min here:
07:06:11 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
07:06:11 SQL> 
07:06:11 SQL> CREATE OR REPLACE VIEW svm6102 AS
07:06:11   2  SELECT
07:06:11   3  pair
07:06:11   4  ,ydate
07:06:11   5  ,prdate
07:06:11   6  ,rownum rnum -- acts as t in my time-series
07:06:11   7  ,clse
07:06:11   8  -- Derive a bunch of attributes from clse, the latest price:
07:06:11   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
07:06:11  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
07:06:11  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
07:06:11  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
07:06:11  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
07:06:11  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
07:06:11  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
07:06:11  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
07:06:11  17  --
07:06:11  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
07:06:11  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
07:06:11  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
07:06:11  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
07:06:11  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
07:06:11  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
07:06:11  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
07:06:11  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
07:06:11  26  --
07:06:11  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
07:06:11  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
07:06:11  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
07:06:11  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
07:06:11  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
07:06:11  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
07:06:11  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
07:06:11  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
07:06:11  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
07:06:11  36  FROM di5min WHERE pair LIKE'%aud%'
07:06:11  37  AND ydate > sysdate - 95
07:06:11  38  ORDER BY ydate
07:06:11  39  /

View created.

Elapsed: 00:00:00.05
07:06:11 SQL> 
07:06:11 SQL> -- rpt
07:06:11 SQL> 
07:06:11 SQL> SELECT
07:06:11   2  pair
07:06:11   3  ,COUNT(pair)
07:06:11   4  ,MIN(clse),MAX(clse)
07:06:11   5  ,MIN(avg6),MAX(avg6)
07:06:11   6  ,MIN(ydate),MAX(ydate)
07:06:11   7  FROM svm6102
07:06:11   8  GROUP BY pair
07:06:11   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
aud_usd       19256	.95405	  1.02495 .957141438 1.02284247 2010-09-30 07:10:01 2011-01-03 07:00:00

Elapsed: 00:00:00.84
07:06:12 SQL> 
07:06:12 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
07:06:12 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.46
07:06:13 SQL> CREATE TABLE svm6122 COMPRESS AS
07:06:13   2  SELECT
07:06:13   3  pair
07:06:13   4  ,ydate
07:06:13   5  ,prdate
07:06:13   6  ,clse
07:06:13   7  -- g6 is important. I want to predict g6:
07:06:13   8  ,ld6 - clse g6
07:06:13   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
07:06:13  10  -- I want more attributes from the ones I derived above:
07:06:13  11  -- clse relation to moving-min
07:06:13  12  ,clse-min4  cm4
07:06:13  13  ,clse-min6  cm6
07:06:13  14  ,clse-min8  cm8
07:06:13  15  ,clse-min10 cm10
07:06:13  16  ,clse-min12 cm12
07:06:13  17  ,clse-min14 cm14
07:06:13  18  ,clse-min16 cm16
07:06:13  19  ,clse-min18 cm18
07:06:13  20  -- clse relation to moving-avg
07:06:13  21  ,clse-avg4  ca4
07:06:13  22  ,clse-avg6  ca6
07:06:13  23  ,clse-avg8  ca8
07:06:13  24  ,clse-avg10 ca10
07:06:13  25  ,clse-avg12 ca12
07:06:13  26  ,clse-avg14 ca14
07:06:13  27  ,clse-avg16 ca16
07:06:13  28  ,clse-avg18 ca18
07:06:13  29  -- clse relation to moving-max
07:06:13  30  ,clse-max4  cx4
07:06:13  31  ,clse-max6  cx6
07:06:13  32  ,clse-max8  cx8
07:06:13  33  ,clse-max10 cx10
07:06:13  34  ,clse-max12 cx12
07:06:13  35  ,clse-max14 cx14
07:06:13  36  ,clse-max16 cx16
07:06:13  37  ,clse-max18 cx18
07:06:13  38  -- Derive more attributes.
07:06:13  39  -- I want to use CORR() here to help SVM see the shape of the series.
07:06:13  40  -- But COVAR_POP is more stable:
07:06:13  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
07:06:13  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
07:06:13  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
07:06:13  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
07:06:13  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
07:06:13  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
07:06:13  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
07:06:13  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
07:06:13  49  -- Derive date related attributes:
07:06:13  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
07:06:13  51  ,0+TO_CHAR(ydate,'D')d
07:06:13  52  ,0+TO_CHAR(ydate,'W')w
07:06:13  53  -- mpm stands for minutes-past-midnight:
07:06:13  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
07:06:13  55  -- mph stands for minutes-past-hour:
07:06:13  56  ,0+TO_CHAR(ydate,'MI')mph
07:06:13  57  FROM svm6102
07:06:13  58  ORDER BY ydate
07:06:13  59  /

Table created.

Elapsed: 00:00:02.00
07:06:15 SQL> 
07:06:15 SQL> -- rpt
07:06:15 SQL> 
07:06:15 SQL> SELECT
07:06:15   2  pair
07:06:15   3  ,COUNT(pair)
07:06:15   4  ,MIN(clse),MAX(clse)
07:06:15   5  ,MIN(ydate),MAX(ydate)
07:06:15   6  FROM svm6122
07:06:15   7  GROUP BY pair
07:06:15   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
aud_usd       19256	.95405	  1.02495 2010-09-30 07:10:01 2011-01-03 07:00:00

Elapsed: 00:00:00.05
07:06:15 SQL> 
07:06:15 SQL> -- Prepare for derivation of NTILE based params:
07:06:15 SQL> 
07:06:15 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.22
07:06:15 SQL> CREATE TABLE svm6142 COMPRESS AS
07:06:15   2  SELECT
07:06:15   3  pair
07:06:15   4  ,ydate
07:06:15   5  ,prdate
07:06:15   6  ,clse
07:06:15   7  ,g6
07:06:15   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
07:06:15   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
07:06:15  10  ,CASE WHEN trend IS NULL THEN 1
07:06:15  11  	    WHEN trend =0      THEN 1
07:06:15  12  	    ELSE trend END trend
07:06:15  13  ,cm4
07:06:15  14  ,cm6
07:06:15  15  ,cm8
07:06:15  16  ,cm10
07:06:15  17  ,cm12
07:06:15  18  ,cm14
07:06:15  19  ,cm16
07:06:15  20  ,cm18
07:06:15  21  --
07:06:15  22  ,ca4
07:06:15  23  ,ca6
07:06:15  24  ,ca8
07:06:15  25  ,ca10
07:06:15  26  ,ca12
07:06:15  27  ,ca14
07:06:15  28  ,ca16
07:06:15  29  ,ca18
07:06:15  30  --
07:06:15  31  ,cx4
07:06:15  32  ,cx6
07:06:15  33  ,cx8
07:06:15  34  ,cx10
07:06:15  35  ,cx12
07:06:15  36  ,cx14
07:06:15  37  ,cx16
07:06:15  38  ,cx18
07:06:15  39  --
07:06:15  40  ,crr4
07:06:15  41  ,crr6
07:06:15  42  ,crr8
07:06:15  43  ,crr10
07:06:15  44  ,crr12
07:06:15  45  ,crr14
07:06:15  46  ,crr16
07:06:15  47  ,crr18
07:06:15  48  --
07:06:15  49  ,hh
07:06:15  50  ,d
07:06:15  51  ,w
07:06:15  52  ,mpm
07:06:15  53  ,mph
07:06:15  54  FROM svm6122
07:06:15  55  ORDER BY ydate
07:06:15  56  /

Table created.

Elapsed: 00:00:00.43
07:06:15 SQL> 
07:06:15 SQL> -- rpt
07:06:15 SQL> 
07:06:15 SQL> SELECT
07:06:15   2  pair
07:06:15   3  ,trend
07:06:15   4  ,gatt
07:06:15   5  ,COUNT(pair)
07:06:15   6  ,AVG(g6)
07:06:15   7  FROM svm6142
07:06:15   8  GROUP BY pair,trend,gatt
07:06:15   9  ORDER BY pair,trend,gatt
07:06:15  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5071 -.00216935
aud_usd 	-1 up	      3721 .003756393
aud_usd 	-1		70
aud_usd 	 1 nup	      6712 -.00211603
aud_usd 	 1 up	      3680 .004037086
aud_usd 	 1		 2

6 rows selected.

Elapsed: 00:00:00.07
07:06:16 SQL> 
07:06:16 SQL> 
07:06:16 SQL> -- Derive NTILE based params:
07:06:16 SQL> 
07:06:16 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.21
07:06:16 SQL> CREATE TABLE svm6162 COMPRESS AS
07:06:16   2  SELECT
07:06:16   3  pair
07:06:16   4  ,ydate
07:06:16   5  ,prdate
07:06:16   6  ,clse
07:06:16   7  ,g6
07:06:16   8  ,gatt
07:06:16   9  ,gattn
07:06:16  10  ,trend
07:06:16  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
07:06:16  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
07:06:16  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
07:06:16  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
07:06:16  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
07:06:16  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
07:06:16  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
07:06:16  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
07:06:16  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
07:06:16  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
07:06:16  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
07:06:16  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
07:06:16  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
07:06:16  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
07:06:16  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
07:06:16  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
07:06:16  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
07:06:16  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
07:06:16  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
07:06:16  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
07:06:16  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
07:06:16  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
07:06:16  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
07:06:16  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
07:06:16  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
07:06:16  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
07:06:16  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
07:06:16  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
07:06:16  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
07:06:16  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
07:06:16  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
07:06:16  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
07:06:16  43  ,hh  att32
07:06:16  44  ,d   att33
07:06:16  45  ,w   att34
07:06:16  46  ,mpm att35
07:06:16  47  ,mph att36
07:06:16  48  ,trend att37
07:06:16  49  FROM svm6142
07:06:16  50  ORDER BY ydate
07:06:16  51  /

Table created.

Elapsed: 00:00:04.72
07:06:20 SQL> 
07:06:20 SQL> -- rpt
07:06:20 SQL> 
07:06:20 SQL> SELECT
07:06:20   2  pair
07:06:20   3  ,trend
07:06:20   4  ,gatt
07:06:20   5  ,COUNT(pair)
07:06:20   6  ,AVG(g6)
07:06:20   7  FROM svm6162
07:06:20   8  GROUP BY pair,trend,gatt
07:06:20   9  ORDER BY pair,trend,gatt
07:06:20  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5071 -.00216935
aud_usd 	-1 up	      3721 .003756393
aud_usd 	-1		70
aud_usd 	 1 nup	      6712 -.00211603
aud_usd 	 1 up	      3680 .004037086
aud_usd 	 1		 2

6 rows selected.

Elapsed: 00:00:00.03
07:06:21 SQL> 
07:06:21 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.24
07:06:21 SQL> CREATE TABLE modsrc COMPRESS AS
07:06:21   2  SELECT
07:06:21   3  pair
07:06:21   4  ,ydate
07:06:21   5  ,prdate
07:06:21   6  ,trend
07:06:21   7  ,g6
07:06:21   8  ,gatt
07:06:21   9  ,gattn
07:06:21  10  FROM svm6162
07:06:21  11  /

Table created.

Elapsed: 00:00:00.10
07:06:21 SQL> 
07:06:21 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.27
07:06:21 SQL> 
07:06:21 SQL> DROP   TABLE aud_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
07:06:21 SQL> CREATE TABLE aud_ms610 COMPRESS AS
07:06:21   2  SELECT
07:06:21   3  ydate
07:06:21   4  ,trend aud_trend
07:06:21   5  ,g6    aud_g6
07:06:21   6  ,gatt  aud_gatt
07:06:21   7  ,gattn aud_gattn
07:06:21   8  FROM modsrc
07:06:21   9  /

Table created.

Elapsed: 00:00:00.07
07:06:21 SQL> 
07:06:21 SQL> ANALYZE TABLE aud_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
07:06:21 SQL> 
07:06:21 SQL> -- I need a copy of the attributes:
07:06:21 SQL> 
07:06:21 SQL> 
07:06:21 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.04
07:06:21 SQL> CREATE TABLE aud_att COMPRESS AS
07:06:21   2  SELECT
07:06:21   3  ydate
07:06:21   4  ,att00 aud_att00
07:06:21   5  ,att01 aud_att01
07:06:21   6  ,att02 aud_att02
07:06:21   7  ,att03 aud_att03
07:06:21   8  ,att04 aud_att04
07:06:21   9  ,att05 aud_att05
07:06:21  10  ,att06 aud_att06
07:06:21  11  ,att07 aud_att07
07:06:21  12  ,att08 aud_att08
07:06:21  13  ,att09 aud_att09
07:06:21  14  ,att10 aud_att10
07:06:21  15  ,att11 aud_att11
07:06:21  16  ,att12 aud_att12
07:06:21  17  ,att13 aud_att13
07:06:21  18  ,att14 aud_att14
07:06:21  19  ,att15 aud_att15
07:06:21  20  ,att16 aud_att16
07:06:21  21  ,att17 aud_att17
07:06:21  22  ,att18 aud_att18
07:06:21  23  ,att19 aud_att19
07:06:21  24  ,att20 aud_att20
07:06:21  25  ,att21 aud_att21
07:06:21  26  ,att22 aud_att22
07:06:21  27  ,att23 aud_att23
07:06:21  28  ,att24 aud_att24
07:06:21  29  ,att25 aud_att25
07:06:21  30  ,att26 aud_att26
07:06:21  31  ,att27 aud_att27
07:06:21  32  ,att28 aud_att28
07:06:21  33  ,att29 aud_att29
07:06:21  34  ,att30 aud_att30
07:06:21  35  ,att31 aud_att31
07:06:21  36  ,att32 aud_att32
07:06:21  37  ,att33 aud_att33
07:06:21  38  ,att34 aud_att34
07:06:21  39  ,att35 aud_att35
07:06:21  40  ,att36 aud_att36
07:06:21  41  ,att37 aud_att37
07:06:21  42  FROM svm6162
07:06:21  43  /

Table created.

Elapsed: 00:00:00.18
07:06:22 SQL> 
07:06:22 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.53
07:06:22 SQL> 
07:06:22 SQL> -- rpt
07:06:22 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19256

Elapsed: 00:00:00.85
07:06:23 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     19256

Elapsed: 00:00:00.00
07:06:23 SQL> 
07:06:23 SQL> --
07:06:23 SQL> -- gbp610.sql
07:06:23 SQL> --
07:06:23 SQL> 
07:06:23 SQL> -- Creates views and tables for backtesting a forex SVM strategy
07:06:23 SQL> 
07:06:23 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.43
07:06:23 SQL> 
07:06:23 SQL> -- I created di5min here:
07:06:23 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
07:06:23 SQL> 
07:06:23 SQL> CREATE OR REPLACE VIEW svm6102 AS
07:06:23   2  SELECT
07:06:23   3  pair
07:06:23   4  ,ydate
07:06:23   5  ,prdate
07:06:23   6  ,rownum rnum -- acts as t in my time-series
07:06:23   7  ,clse
07:06:23   8  -- Derive a bunch of attributes from clse, the latest price:
07:06:23   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
07:06:23  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
07:06:23  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
07:06:23  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
07:06:23  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
07:06:23  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
07:06:23  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
07:06:23  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
07:06:23  17  --
07:06:23  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
07:06:23  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
07:06:23  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
07:06:23  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
07:06:23  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
07:06:23  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
07:06:23  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
07:06:23  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
07:06:23  26  --
07:06:23  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
07:06:23  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
07:06:23  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
07:06:23  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
07:06:23  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
07:06:23  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
07:06:23  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
07:06:23  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
07:06:23  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
07:06:23  36  FROM di5min WHERE pair LIKE'%gbp%'
07:06:23  37  AND ydate > sysdate - 95
07:06:23  38  ORDER BY ydate
07:06:23  39  /

View created.

Elapsed: 00:00:00.04
07:06:23 SQL> 
07:06:23 SQL> -- rpt
07:06:23 SQL> 
07:06:23 SQL> SELECT
07:06:23   2  pair
07:06:23   3  ,COUNT(pair)
07:06:23   4  ,MIN(clse),MAX(clse)
07:06:23   5  ,MIN(avg6),MAX(avg6)
07:06:23   6  ,MIN(ydate),MAX(ydate)
07:06:23   7  FROM svm6102
07:06:23   8  GROUP BY pair
07:06:23   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
gbp_usd       19258   1.535325	   1.6295 1.53696747 1.62716986 2010-09-30 07:10:01 2011-01-03 07:00:00

Elapsed: 00:00:00.86
07:06:24 SQL> 
07:06:24 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
07:06:24 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.25
07:06:25 SQL> CREATE TABLE svm6122 COMPRESS AS
07:06:25   2  SELECT
07:06:25   3  pair
07:06:25   4  ,ydate
07:06:25   5  ,prdate
07:06:25   6  ,clse
07:06:25   7  -- g6 is important. I want to predict g6:
07:06:25   8  ,ld6 - clse g6
07:06:25   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
07:06:25  10  -- I want more attributes from the ones I derived above:
07:06:25  11  -- clse relation to moving-min
07:06:25  12  ,clse-min4  cm4
07:06:25  13  ,clse-min6  cm6
07:06:25  14  ,clse-min8  cm8
07:06:25  15  ,clse-min10 cm10
07:06:25  16  ,clse-min12 cm12
07:06:25  17  ,clse-min14 cm14
07:06:25  18  ,clse-min16 cm16
07:06:25  19  ,clse-min18 cm18
07:06:25  20  -- clse relation to moving-avg
07:06:25  21  ,clse-avg4  ca4
07:06:25  22  ,clse-avg6  ca6
07:06:25  23  ,clse-avg8  ca8
07:06:25  24  ,clse-avg10 ca10
07:06:25  25  ,clse-avg12 ca12
07:06:25  26  ,clse-avg14 ca14
07:06:25  27  ,clse-avg16 ca16
07:06:25  28  ,clse-avg18 ca18
07:06:25  29  -- clse relation to moving-max
07:06:25  30  ,clse-max4  cx4
07:06:25  31  ,clse-max6  cx6
07:06:25  32  ,clse-max8  cx8
07:06:25  33  ,clse-max10 cx10
07:06:25  34  ,clse-max12 cx12
07:06:25  35  ,clse-max14 cx14
07:06:25  36  ,clse-max16 cx16
07:06:25  37  ,clse-max18 cx18
07:06:25  38  -- Derive more attributes.
07:06:25  39  -- I want to use CORR() here to help SVM see the shape of the series.
07:06:25  40  -- But COVAR_POP is more stable:
07:06:25  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
07:06:25  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
07:06:25  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
07:06:25  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
07:06:25  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
07:06:25  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
07:06:25  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
07:06:25  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
07:06:25  49  -- Derive date related attributes:
07:06:25  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
07:06:25  51  ,0+TO_CHAR(ydate,'D')d
07:06:25  52  ,0+TO_CHAR(ydate,'W')w
07:06:25  53  -- mpm stands for minutes-past-midnight:
07:06:25  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
07:06:25  55  -- mph stands for minutes-past-hour:
07:06:25  56  ,0+TO_CHAR(ydate,'MI')mph
07:06:25  57  FROM svm6102
07:06:25  58  ORDER BY ydate
07:06:25  59  /

Table created.

Elapsed: 00:00:02.07
07:06:27 SQL> 
07:06:27 SQL> -- rpt
07:06:27 SQL> 
07:06:27 SQL> SELECT
07:06:27   2  pair
07:06:27   3  ,COUNT(pair)
07:06:27   4  ,MIN(clse),MAX(clse)
07:06:27   5  ,MIN(ydate),MAX(ydate)
07:06:27   6  FROM svm6122
07:06:27   7  GROUP BY pair
07:06:27   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
gbp_usd       19258   1.535325	   1.6295 2010-09-30 07:10:01 2011-01-03 07:00:00

Elapsed: 00:00:00.04
07:06:27 SQL> 
07:06:27 SQL> -- Prepare for derivation of NTILE based params:
07:06:27 SQL> 
07:06:27 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.27
07:06:27 SQL> CREATE TABLE svm6142 COMPRESS AS
07:06:27   2  SELECT
07:06:27   3  pair
07:06:27   4  ,ydate
07:06:27   5  ,prdate
07:06:27   6  ,clse
07:06:27   7  ,g6
07:06:27   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
07:06:27   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
07:06:27  10  ,CASE WHEN trend IS NULL THEN 1
07:06:27  11  	    WHEN trend =0      THEN 1
07:06:27  12  	    ELSE trend END trend
07:06:27  13  ,cm4
07:06:27  14  ,cm6
07:06:27  15  ,cm8
07:06:27  16  ,cm10
07:06:27  17  ,cm12
07:06:27  18  ,cm14
07:06:27  19  ,cm16
07:06:27  20  ,cm18
07:06:27  21  --
07:06:27  22  ,ca4
07:06:27  23  ,ca6
07:06:27  24  ,ca8
07:06:27  25  ,ca10
07:06:27  26  ,ca12
07:06:27  27  ,ca14
07:06:27  28  ,ca16
07:06:27  29  ,ca18
07:06:27  30  --
07:06:27  31  ,cx4
07:06:27  32  ,cx6
07:06:27  33  ,cx8
07:06:27  34  ,cx10
07:06:27  35  ,cx12
07:06:27  36  ,cx14
07:06:27  37  ,cx16
07:06:27  38  ,cx18
07:06:27  39  --
07:06:27  40  ,crr4
07:06:27  41  ,crr6
07:06:27  42  ,crr8
07:06:27  43  ,crr10
07:06:27  44  ,crr12
07:06:27  45  ,crr14
07:06:27  46  ,crr16
07:06:27  47  ,crr18
07:06:27  48  --
07:06:27  49  ,hh
07:06:27  50  ,d
07:06:27  51  ,w
07:06:27  52  ,mpm
07:06:27  53  ,mph
07:06:27  54  FROM svm6122
07:06:27  55  ORDER BY ydate
07:06:27  56  /

Table created.

Elapsed: 00:00:00.36
07:06:27 SQL> 
07:06:27 SQL> -- rpt
07:06:27 SQL> 
07:06:27 SQL> SELECT
07:06:27   2  pair
07:06:27   3  ,trend
07:06:27   4  ,gatt
07:06:27   5  ,COUNT(pair)
07:06:27   6  ,AVG(g6)
07:06:27   7  FROM svm6142
07:06:27   8  GROUP BY pair,trend,gatt
07:06:27   9  ORDER BY pair,trend,gatt
07:06:27  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6155 -.00269243
gbp_usd 	-1 up	      3467 .004326269
gbp_usd 	-1		64
gbp_usd 	 1 nup	      6088  -.0027007
gbp_usd 	 1 up	      3476 .004505243
gbp_usd 	 1		 8

6 rows selected.

Elapsed: 00:00:00.06
07:06:27 SQL> 
07:06:27 SQL> 
07:06:27 SQL> -- Derive NTILE based params:
07:06:27 SQL> 
07:06:27 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:01.13
07:06:29 SQL> CREATE TABLE svm6162 COMPRESS AS
07:06:29   2  SELECT
07:06:29   3  pair
07:06:29   4  ,ydate
07:06:29   5  ,prdate
07:06:29   6  ,clse
07:06:29   7  ,g6
07:06:29   8  ,gatt
07:06:29   9  ,gattn
07:06:29  10  ,trend
07:06:29  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
07:06:29  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
07:06:29  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
07:06:29  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
07:06:29  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
07:06:29  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
07:06:29  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
07:06:29  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
07:06:29  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
07:06:29  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
07:06:29  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
07:06:29  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
07:06:29  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
07:06:29  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
07:06:29  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
07:06:29  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
07:06:29  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
07:06:29  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
07:06:29  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
07:06:29  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
07:06:29  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
07:06:29  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
07:06:29  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
07:06:29  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
07:06:29  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
07:06:29  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
07:06:29  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
07:06:29  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
07:06:29  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
07:06:29  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
07:06:29  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
07:06:29  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
07:06:29  43  ,hh  att32
07:06:29  44  ,d   att33
07:06:29  45  ,w   att34
07:06:29  46  ,mpm att35
07:06:29  47  ,mph att36
07:06:29  48  ,trend att37
07:06:29  49  FROM svm6142
07:06:29  50  ORDER BY ydate
07:06:29  51  /

Table created.

Elapsed: 00:00:04.76
07:06:33 SQL> 
07:06:33 SQL> -- rpt
07:06:33 SQL> 
07:06:33 SQL> SELECT
07:06:33   2  pair
07:06:33   3  ,trend
07:06:33   4  ,gatt
07:06:33   5  ,COUNT(pair)
07:06:33   6  ,AVG(g6)
07:06:33   7  FROM svm6162
07:06:33   8  GROUP BY pair,trend,gatt
07:06:33   9  ORDER BY pair,trend,gatt
07:06:33  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6155 -.00269243
gbp_usd 	-1 up	      3467 .004326269
gbp_usd 	-1		64
gbp_usd 	 1 nup	      6088  -.0027007
gbp_usd 	 1 up	      3476 .004505243
gbp_usd 	 1		 8

6 rows selected.

Elapsed: 00:00:00.03
07:06:33 SQL> 
07:06:33 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.17
07:06:34 SQL> CREATE TABLE modsrc COMPRESS AS
07:06:34   2  SELECT
07:06:34   3  pair
07:06:34   4  ,ydate
07:06:34   5  ,prdate
07:06:34   6  ,trend
07:06:34   7  ,g6
07:06:34   8  ,gatt
07:06:34   9  ,gattn
07:06:34  10  FROM svm6162
07:06:34  11  /

Table created.

Elapsed: 00:00:00.09
07:06:34 SQL> 
07:06:34 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.27
07:06:34 SQL> 
07:06:34 SQL> DROP   TABLE gbp_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
07:06:34 SQL> CREATE TABLE gbp_ms610 COMPRESS AS
07:06:34   2  SELECT
07:06:34   3  ydate
07:06:34   4  ,trend gbp_trend
07:06:34   5  ,g6    gbp_g6
07:06:34   6  ,gatt  gbp_gatt
07:06:34   7  ,gattn gbp_gattn
07:06:34   8  FROM modsrc
07:06:34   9  /

Table created.

Elapsed: 00:00:00.07
07:06:34 SQL> 
07:06:34 SQL> ANALYZE TABLE gbp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.22
07:06:34 SQL> 
07:06:34 SQL> -- I need a copy of the attributes:
07:06:34 SQL> 
07:06:34 SQL> 
07:06:34 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.14
07:06:34 SQL> CREATE TABLE gbp_att COMPRESS AS
07:06:34   2  SELECT
07:06:34   3  ydate
07:06:34   4  ,att00 gbp_att00
07:06:34   5  ,att01 gbp_att01
07:06:34   6  ,att02 gbp_att02
07:06:34   7  ,att03 gbp_att03
07:06:34   8  ,att04 gbp_att04
07:06:34   9  ,att05 gbp_att05
07:06:34  10  ,att06 gbp_att06
07:06:34  11  ,att07 gbp_att07
07:06:34  12  ,att08 gbp_att08
07:06:34  13  ,att09 gbp_att09
07:06:34  14  ,att10 gbp_att10
07:06:34  15  ,att11 gbp_att11
07:06:34  16  ,att12 gbp_att12
07:06:34  17  ,att13 gbp_att13
07:06:34  18  ,att14 gbp_att14
07:06:34  19  ,att15 gbp_att15
07:06:34  20  ,att16 gbp_att16
07:06:34  21  ,att17 gbp_att17
07:06:34  22  ,att18 gbp_att18
07:06:34  23  ,att19 gbp_att19
07:06:34  24  ,att20 gbp_att20
07:06:34  25  ,att21 gbp_att21
07:06:34  26  ,att22 gbp_att22
07:06:34  27  ,att23 gbp_att23
07:06:34  28  ,att24 gbp_att24
07:06:34  29  ,att25 gbp_att25
07:06:34  30  ,att26 gbp_att26
07:06:34  31  ,att27 gbp_att27
07:06:34  32  ,att28 gbp_att28
07:06:34  33  ,att29 gbp_att29
07:06:34  34  ,att30 gbp_att30
07:06:34  35  ,att31 gbp_att31
07:06:34  36  ,att32 gbp_att32
07:06:34  37  ,att33 gbp_att33
07:06:34  38  ,att34 gbp_att34
07:06:34  39  ,att35 gbp_att35
07:06:34  40  ,att36 gbp_att36
07:06:34  41  ,att37 gbp_att37
07:06:34  42  FROM svm6162
07:06:34  43  /

Table created.

Elapsed: 00:00:00.24
07:06:35 SQL> 
07:06:35 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
07:06:35 SQL> 
07:06:35 SQL> -- rpt
07:06:35 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19258

Elapsed: 00:00:00.86
07:06:36 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     19258

Elapsed: 00:00:00.00
07:06:36 SQL> 
07:06:36 SQL> --
07:06:36 SQL> -- jpy610.sql
07:06:36 SQL> --
07:06:36 SQL> 
07:06:36 SQL> -- Creates views and tables for backtesting a forex SVM strategy
07:06:36 SQL> 
07:06:36 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.54
07:06:36 SQL> 
07:06:36 SQL> -- I created di5min here:
07:06:36 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
07:06:36 SQL> 
07:06:36 SQL> CREATE OR REPLACE VIEW svm6102 AS
07:06:36   2  SELECT
07:06:36   3  pair
07:06:36   4  ,ydate
07:06:36   5  ,prdate
07:06:36   6  ,rownum rnum -- acts as t in my time-series
07:06:36   7  ,clse
07:06:36   8  -- Derive a bunch of attributes from clse, the latest price:
07:06:36   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
07:06:36  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
07:06:36  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
07:06:36  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
07:06:36  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
07:06:36  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
07:06:36  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
07:06:36  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
07:06:36  17  --
07:06:36  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
07:06:36  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
07:06:36  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
07:06:36  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
07:06:36  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
07:06:36  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
07:06:36  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
07:06:36  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
07:06:36  26  --
07:06:36  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
07:06:36  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
07:06:36  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
07:06:36  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
07:06:36  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
07:06:36  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
07:06:36  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
07:06:36  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
07:06:36  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
07:06:36  36  FROM di5min WHERE pair LIKE'%jpy%'
07:06:36  37  AND ydate > sysdate - 95
07:06:36  38  ORDER BY ydate
07:06:36  39  /

View created.

Elapsed: 00:00:00.06
07:06:37 SQL> 
07:06:37 SQL> -- rpt
07:06:37 SQL> 
07:06:37 SQL> SELECT
07:06:37   2  pair
07:06:37   3  ,COUNT(pair)
07:06:37   4  ,MIN(clse),MAX(clse)
07:06:37   5  ,MIN(avg6),MAX(avg6)
07:06:37   6  ,MIN(ydate),MAX(ydate)
07:06:37   7  FROM svm6102
07:06:37   8  GROUP BY pair
07:06:37   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_jpy       19256	 80.25	   84.485 80.3595205 84.3105479 2010-09-30 07:10:01 2011-01-03 07:00:00

Elapsed: 00:00:00.91
07:06:37 SQL> 
07:06:37 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
07:06:37 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.23
07:06:38 SQL> CREATE TABLE svm6122 COMPRESS AS
07:06:38   2  SELECT
07:06:38   3  pair
07:06:38   4  ,ydate
07:06:38   5  ,prdate
07:06:38   6  ,clse
07:06:38   7  -- g6 is important. I want to predict g6:
07:06:38   8  ,ld6 - clse g6
07:06:38   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
07:06:38  10  -- I want more attributes from the ones I derived above:
07:06:38  11  -- clse relation to moving-min
07:06:38  12  ,clse-min4  cm4
07:06:38  13  ,clse-min6  cm6
07:06:38  14  ,clse-min8  cm8
07:06:38  15  ,clse-min10 cm10
07:06:38  16  ,clse-min12 cm12
07:06:38  17  ,clse-min14 cm14
07:06:38  18  ,clse-min16 cm16
07:06:38  19  ,clse-min18 cm18
07:06:38  20  -- clse relation to moving-avg
07:06:38  21  ,clse-avg4  ca4
07:06:38  22  ,clse-avg6  ca6
07:06:38  23  ,clse-avg8  ca8
07:06:38  24  ,clse-avg10 ca10
07:06:38  25  ,clse-avg12 ca12
07:06:38  26  ,clse-avg14 ca14
07:06:38  27  ,clse-avg16 ca16
07:06:38  28  ,clse-avg18 ca18
07:06:38  29  -- clse relation to moving-max
07:06:38  30  ,clse-max4  cx4
07:06:38  31  ,clse-max6  cx6
07:06:38  32  ,clse-max8  cx8
07:06:38  33  ,clse-max10 cx10
07:06:38  34  ,clse-max12 cx12
07:06:38  35  ,clse-max14 cx14
07:06:38  36  ,clse-max16 cx16
07:06:38  37  ,clse-max18 cx18
07:06:38  38  -- Derive more attributes.
07:06:38  39  -- I want to use CORR() here to help SVM see the shape of the series.
07:06:38  40  -- But COVAR_POP is more stable:
07:06:38  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
07:06:38  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
07:06:38  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
07:06:38  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
07:06:38  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
07:06:38  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
07:06:38  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
07:06:38  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
07:06:38  49  -- Derive date related attributes:
07:06:38  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
07:06:38  51  ,0+TO_CHAR(ydate,'D')d
07:06:38  52  ,0+TO_CHAR(ydate,'W')w
07:06:38  53  -- mpm stands for minutes-past-midnight:
07:06:38  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
07:06:38  55  -- mph stands for minutes-past-hour:
07:06:38  56  ,0+TO_CHAR(ydate,'MI')mph
07:06:38  57  FROM svm6102
07:06:38  58  ORDER BY ydate
07:06:38  59  /

Table created.

Elapsed: 00:00:02.11
07:06:40 SQL> 
07:06:40 SQL> -- rpt
07:06:40 SQL> 
07:06:40 SQL> SELECT
07:06:40   2  pair
07:06:40   3  ,COUNT(pair)
07:06:40   4  ,MIN(clse),MAX(clse)
07:06:40   5  ,MIN(ydate),MAX(ydate)
07:06:40   6  FROM svm6122
07:06:40   7  GROUP BY pair
07:06:40   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_jpy       19256	 80.25	   84.485 2010-09-30 07:10:01 2011-01-03 07:00:00

Elapsed: 00:00:00.09
07:06:40 SQL> 
07:06:40 SQL> -- Prepare for derivation of NTILE based params:
07:06:40 SQL> 
07:06:40 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.23
07:06:40 SQL> CREATE TABLE svm6142 COMPRESS AS
07:06:40   2  SELECT
07:06:40   3  pair
07:06:40   4  ,ydate
07:06:40   5  ,prdate
07:06:40   6  ,clse
07:06:40   7  ,g6
07:06:40   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
07:06:40   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
07:06:40  10  ,CASE WHEN trend IS NULL THEN 1
07:06:40  11  	    WHEN trend =0      THEN 1
07:06:40  12  	    ELSE trend END trend
07:06:40  13  ,cm4
07:06:40  14  ,cm6
07:06:40  15  ,cm8
07:06:40  16  ,cm10
07:06:40  17  ,cm12
07:06:40  18  ,cm14
07:06:40  19  ,cm16
07:06:40  20  ,cm18
07:06:40  21  --
07:06:40  22  ,ca4
07:06:40  23  ,ca6
07:06:40  24  ,ca8
07:06:40  25  ,ca10
07:06:40  26  ,ca12
07:06:40  27  ,ca14
07:06:40  28  ,ca16
07:06:40  29  ,ca18
07:06:40  30  --
07:06:40  31  ,cx4
07:06:40  32  ,cx6
07:06:40  33  ,cx8
07:06:40  34  ,cx10
07:06:40  35  ,cx12
07:06:40  36  ,cx14
07:06:40  37  ,cx16
07:06:40  38  ,cx18
07:06:40  39  --
07:06:40  40  ,crr4
07:06:40  41  ,crr6
07:06:40  42  ,crr8
07:06:40  43  ,crr10
07:06:40  44  ,crr12
07:06:40  45  ,crr14
07:06:40  46  ,crr16
07:06:40  47  ,crr18
07:06:40  48  --
07:06:40  49  ,hh
07:06:40  50  ,d
07:06:40  51  ,w
07:06:40  52  ,mpm
07:06:40  53  ,mph
07:06:40  54  FROM svm6122
07:06:40  55  ORDER BY ydate
07:06:40  56  /

Table created.

Elapsed: 00:00:00.36
07:06:40 SQL> 
07:06:40 SQL> -- rpt
07:06:40 SQL> 
07:06:40 SQL> SELECT
07:06:40   2  pair
07:06:40   3  ,trend
07:06:40   4  ,gatt
07:06:40   5  ,COUNT(pair)
07:06:40   6  ,AVG(g6)
07:06:40   7  FROM svm6142
07:06:40   8  GROUP BY pair,trend,gatt
07:06:40   9  ORDER BY pair,trend,gatt
07:06:40  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5192 -.16584549
usd_jpy 	-1 up	      4851 .164756076
usd_jpy 	-1		 5
usd_jpy 	 1 nup	      4973 -.15547451
usd_jpy 	 1 up	      4168  .16575974
usd_jpy 	 1		67

6 rows selected.

Elapsed: 00:00:00.07
07:06:41 SQL> 
07:06:41 SQL> 
07:06:41 SQL> -- Derive NTILE based params:
07:06:41 SQL> 
07:06:41 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.21
07:06:41 SQL> CREATE TABLE svm6162 COMPRESS AS
07:06:41   2  SELECT
07:06:41   3  pair
07:06:41   4  ,ydate
07:06:41   5  ,prdate
07:06:41   6  ,clse
07:06:41   7  ,g6
07:06:41   8  ,gatt
07:06:41   9  ,gattn
07:06:41  10  ,trend
07:06:41  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
07:06:41  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
07:06:41  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
07:06:41  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
07:06:41  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
07:06:41  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
07:06:41  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
07:06:41  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
07:06:41  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
07:06:41  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
07:06:41  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
07:06:41  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
07:06:41  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
07:06:41  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
07:06:41  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
07:06:41  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
07:06:41  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
07:06:41  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
07:06:41  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
07:06:41  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
07:06:41  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
07:06:41  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
07:06:41  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
07:06:41  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
07:06:41  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
07:06:41  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
07:06:41  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
07:06:41  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
07:06:41  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
07:06:41  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
07:06:41  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
07:06:41  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
07:06:41  43  ,hh  att32
07:06:41  44  ,d   att33
07:06:41  45  ,w   att34
07:06:41  46  ,mpm att35
07:06:41  47  ,mph att36
07:06:41  48  ,trend att37
07:06:41  49  FROM svm6142
07:06:41  50  ORDER BY ydate
07:06:41  51  /

Table created.

Elapsed: 00:00:04.75
07:06:46 SQL> 
07:06:46 SQL> -- rpt
07:06:46 SQL> 
07:06:46 SQL> SELECT
07:06:46   2  pair
07:06:46   3  ,trend
07:06:46   4  ,gatt
07:06:46   5  ,COUNT(pair)
07:06:46   6  ,AVG(g6)
07:06:46   7  FROM svm6162
07:06:46   8  GROUP BY pair,trend,gatt
07:06:46   9  ORDER BY pair,trend,gatt
07:06:46  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5192 -.16584549
usd_jpy 	-1 up	      4851 .164756076
usd_jpy 	-1		 5
usd_jpy 	 1 nup	      4973 -.15547451
usd_jpy 	 1 up	      4168  .16575974
usd_jpy 	 1		67

6 rows selected.

Elapsed: 00:00:00.06
07:06:46 SQL> 
07:06:46 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.17
07:06:46 SQL> CREATE TABLE modsrc COMPRESS AS
07:06:46   2  SELECT
07:06:46   3  pair
07:06:46   4  ,ydate
07:06:46   5  ,prdate
07:06:46   6  ,trend
07:06:46   7  ,g6
07:06:46   8  ,gatt
07:06:46   9  ,gattn
07:06:46  10  FROM svm6162
07:06:46  11  /

Table created.

Elapsed: 00:00:00.09
07:06:46 SQL> 
07:06:46 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
07:06:46 SQL> 
07:06:46 SQL> DROP   TABLE jpy_ms610 ;

Table dropped.

Elapsed: 00:00:00.07
07:06:46 SQL> CREATE TABLE jpy_ms610 COMPRESS AS
07:06:46   2  SELECT
07:06:46   3  ydate
07:06:46   4  ,trend jpy_trend
07:06:46   5  ,g6    jpy_g6
07:06:46   6  ,gatt  jpy_gatt
07:06:46   7  ,gattn jpy_gattn
07:06:46   8  FROM modsrc
07:06:46   9  /

Table created.

Elapsed: 00:00:00.07
07:06:46 SQL> 
07:06:46 SQL> ANALYZE TABLE jpy_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.14
07:06:46 SQL> 
07:06:46 SQL> -- I need a copy of the attributes:
07:06:46 SQL> 
07:06:46 SQL> 
07:06:46 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.05
07:06:46 SQL> CREATE TABLE jpy_att COMPRESS AS
07:06:46   2  SELECT
07:06:46   3  ydate
07:06:46   4  ,att00 jpy_att00
07:06:46   5  ,att01 jpy_att01
07:06:46   6  ,att02 jpy_att02
07:06:46   7  ,att03 jpy_att03
07:06:46   8  ,att04 jpy_att04
07:06:46   9  ,att05 jpy_att05
07:06:46  10  ,att06 jpy_att06
07:06:46  11  ,att07 jpy_att07
07:06:46  12  ,att08 jpy_att08
07:06:46  13  ,att09 jpy_att09
07:06:46  14  ,att10 jpy_att10
07:06:46  15  ,att11 jpy_att11
07:06:46  16  ,att12 jpy_att12
07:06:46  17  ,att13 jpy_att13
07:06:46  18  ,att14 jpy_att14
07:06:46  19  ,att15 jpy_att15
07:06:46  20  ,att16 jpy_att16
07:06:46  21  ,att17 jpy_att17
07:06:46  22  ,att18 jpy_att18
07:06:46  23  ,att19 jpy_att19
07:06:46  24  ,att20 jpy_att20
07:06:46  25  ,att21 jpy_att21
07:06:46  26  ,att22 jpy_att22
07:06:46  27  ,att23 jpy_att23
07:06:46  28  ,att24 jpy_att24
07:06:46  29  ,att25 jpy_att25
07:06:46  30  ,att26 jpy_att26
07:06:46  31  ,att27 jpy_att27
07:06:46  32  ,att28 jpy_att28
07:06:46  33  ,att29 jpy_att29
07:06:46  34  ,att30 jpy_att30
07:06:46  35  ,att31 jpy_att31
07:06:46  36  ,att32 jpy_att32
07:06:46  37  ,att33 jpy_att33
07:06:46  38  ,att34 jpy_att34
07:06:46  39  ,att35 jpy_att35
07:06:46  40  ,att36 jpy_att36
07:06:46  41  ,att37 jpy_att37
07:06:46  42  FROM svm6162
07:06:46  43  /

Table created.

Elapsed: 00:00:00.21
07:06:47 SQL> 
07:06:47 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
07:06:47 SQL> 
07:06:47 SQL> -- rpt
07:06:47 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19256

Elapsed: 00:00:00.88
07:06:48 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     19256

Elapsed: 00:00:00.01
07:06:48 SQL> 
07:06:48 SQL> --
07:06:48 SQL> -- cad610.sql
07:06:48 SQL> --
07:06:48 SQL> 
07:06:48 SQL> -- Creates views and tables for backtesting a forex SVM strategy
07:06:48 SQL> 
07:06:48 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.40
07:06:48 SQL> 
07:06:48 SQL> -- I created di5min here:
07:06:48 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
07:06:48 SQL> 
07:06:48 SQL> CREATE OR REPLACE VIEW svm6102 AS
07:06:48   2  SELECT
07:06:48   3  pair
07:06:48   4  ,ydate
07:06:48   5  ,prdate
07:06:48   6  ,rownum rnum -- acts as t in my time-series
07:06:48   7  ,clse
07:06:48   8  -- Derive a bunch of attributes from clse, the latest price:
07:06:48   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
07:06:48  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
07:06:48  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
07:06:48  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
07:06:48  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
07:06:48  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
07:06:48  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
07:06:48  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
07:06:48  17  --
07:06:48  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
07:06:48  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
07:06:48  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
07:06:48  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
07:06:48  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
07:06:48  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
07:06:48  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
07:06:48  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
07:06:48  26  --
07:06:48  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
07:06:48  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
07:06:48  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
07:06:48  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
07:06:48  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
07:06:48  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
07:06:48  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
07:06:48  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
07:06:48  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
07:06:48  36  FROM di5min WHERE pair LIKE'%cad%'
07:06:48  37  AND ydate > sysdate - 95
07:06:48  38  ORDER BY ydate
07:06:48  39  /

View created.

Elapsed: 00:00:00.04
07:06:48 SQL> 
07:06:48 SQL> -- rpt
07:06:48 SQL> 
07:06:48 SQL> SELECT
07:06:48   2  pair
07:06:48   3  ,COUNT(pair)
07:06:48   4  ,MIN(clse),MAX(clse)
07:06:48   5  ,MIN(avg6),MAX(avg6)
07:06:48   6  ,MIN(ydate),MAX(ydate)
07:06:48   7  FROM svm6102
07:06:48   8  GROUP BY pair
07:06:48   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_cad       19256	.99165	   1.0355 .992862671 1.03282877 2010-09-30 07:10:01 2011-01-03 07:00:00

Elapsed: 00:00:00.86
07:06:49 SQL> 
07:06:49 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
07:06:49 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.24
07:06:49 SQL> CREATE TABLE svm6122 COMPRESS AS
07:06:49   2  SELECT
07:06:49   3  pair
07:06:49   4  ,ydate
07:06:49   5  ,prdate
07:06:49   6  ,clse
07:06:49   7  -- g6 is important. I want to predict g6:
07:06:49   8  ,ld6 - clse g6
07:06:49   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
07:06:49  10  -- I want more attributes from the ones I derived above:
07:06:49  11  -- clse relation to moving-min
07:06:49  12  ,clse-min4  cm4
07:06:49  13  ,clse-min6  cm6
07:06:49  14  ,clse-min8  cm8
07:06:49  15  ,clse-min10 cm10
07:06:49  16  ,clse-min12 cm12
07:06:49  17  ,clse-min14 cm14
07:06:49  18  ,clse-min16 cm16
07:06:49  19  ,clse-min18 cm18
07:06:49  20  -- clse relation to moving-avg
07:06:49  21  ,clse-avg4  ca4
07:06:49  22  ,clse-avg6  ca6
07:06:49  23  ,clse-avg8  ca8
07:06:49  24  ,clse-avg10 ca10
07:06:49  25  ,clse-avg12 ca12
07:06:49  26  ,clse-avg14 ca14
07:06:49  27  ,clse-avg16 ca16
07:06:49  28  ,clse-avg18 ca18
07:06:49  29  -- clse relation to moving-max
07:06:49  30  ,clse-max4  cx4
07:06:49  31  ,clse-max6  cx6
07:06:49  32  ,clse-max8  cx8
07:06:49  33  ,clse-max10 cx10
07:06:49  34  ,clse-max12 cx12
07:06:49  35  ,clse-max14 cx14
07:06:49  36  ,clse-max16 cx16
07:06:49  37  ,clse-max18 cx18
07:06:49  38  -- Derive more attributes.
07:06:49  39  -- I want to use CORR() here to help SVM see the shape of the series.
07:06:49  40  -- But COVAR_POP is more stable:
07:06:49  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
07:06:49  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
07:06:49  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
07:06:49  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
07:06:49  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
07:06:49  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
07:06:49  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
07:06:49  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
07:06:49  49  -- Derive date related attributes:
07:06:49  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
07:06:49  51  ,0+TO_CHAR(ydate,'D')d
07:06:49  52  ,0+TO_CHAR(ydate,'W')w
07:06:49  53  -- mpm stands for minutes-past-midnight:
07:06:49  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
07:06:49  55  -- mph stands for minutes-past-hour:
07:06:49  56  ,0+TO_CHAR(ydate,'MI')mph
07:06:49  57  FROM svm6102
07:06:49  58  ORDER BY ydate
07:06:49  59  /

Table created.

Elapsed: 00:00:02.05
07:06:51 SQL> 
07:06:51 SQL> -- rpt
07:06:51 SQL> 
07:06:51 SQL> SELECT
07:06:51   2  pair
07:06:51   3  ,COUNT(pair)
07:06:51   4  ,MIN(clse),MAX(clse)
07:06:51   5  ,MIN(ydate),MAX(ydate)
07:06:51   6  FROM svm6122
07:06:51   7  GROUP BY pair
07:06:51   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_cad       19256	.99165	   1.0355 2010-09-30 07:10:01 2011-01-03 07:00:00

Elapsed: 00:00:00.04
07:06:52 SQL> 
07:06:52 SQL> -- Prepare for derivation of NTILE based params:
07:06:52 SQL> 
07:06:52 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.23
07:06:52 SQL> CREATE TABLE svm6142 COMPRESS AS
07:06:52   2  SELECT
07:06:52   3  pair
07:06:52   4  ,ydate
07:06:52   5  ,prdate
07:06:52   6  ,clse
07:06:52   7  ,g6
07:06:52   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
07:06:52   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
07:06:52  10  ,CASE WHEN trend IS NULL THEN 1
07:06:52  11  	    WHEN trend =0      THEN 1
07:06:52  12  	    ELSE trend END trend
07:06:52  13  ,cm4
07:06:52  14  ,cm6
07:06:52  15  ,cm8
07:06:52  16  ,cm10
07:06:52  17  ,cm12
07:06:52  18  ,cm14
07:06:52  19  ,cm16
07:06:52  20  ,cm18
07:06:52  21  --
07:06:52  22  ,ca4
07:06:52  23  ,ca6
07:06:52  24  ,ca8
07:06:52  25  ,ca10
07:06:52  26  ,ca12
07:06:52  27  ,ca14
07:06:52  28  ,ca16
07:06:52  29  ,ca18
07:06:52  30  --
07:06:52  31  ,cx4
07:06:52  32  ,cx6
07:06:52  33  ,cx8
07:06:52  34  ,cx10
07:06:52  35  ,cx12
07:06:52  36  ,cx14
07:06:52  37  ,cx16
07:06:52  38  ,cx18
07:06:52  39  --
07:06:52  40  ,crr4
07:06:52  41  ,crr6
07:06:52  42  ,crr8
07:06:52  43  ,crr10
07:06:52  44  ,crr12
07:06:52  45  ,crr14
07:06:52  46  ,crr16
07:06:52  47  ,crr18
07:06:52  48  --
07:06:52  49  ,hh
07:06:52  50  ,d
07:06:52  51  ,w
07:06:52  52  ,mpm
07:06:52  53  ,mph
07:06:52  54  FROM svm6122
07:06:52  55  ORDER BY ydate
07:06:52  56  /

Table created.

Elapsed: 00:00:00.36
07:06:52 SQL> 
07:06:52 SQL> -- rpt
07:06:52 SQL> 
07:06:52 SQL> SELECT
07:06:52   2  pair
07:06:52   3  ,trend
07:06:52   4  ,gatt
07:06:52   5  ,COUNT(pair)
07:06:52   6  ,AVG(g6)
07:06:52   7  FROM svm6142
07:06:52   8  GROUP BY pair,trend,gatt
07:06:52   9  ORDER BY pair,trend,gatt
07:06:52  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7316 -.00131066
usd_cad 	-1 up	      3000 .003056492
usd_cad 	-1		72
usd_cad 	 1 nup	      6563 -.00163383
usd_cad 	 1 up	      2305 .003653973

Elapsed: 00:00:00.04
07:06:52 SQL> 
07:06:52 SQL> 
07:06:52 SQL> -- Derive NTILE based params:
07:06:52 SQL> 
07:06:52 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.13
07:06:52 SQL> CREATE TABLE svm6162 COMPRESS AS
07:06:52   2  SELECT
07:06:52   3  pair
07:06:52   4  ,ydate
07:06:52   5  ,prdate
07:06:52   6  ,clse
07:06:52   7  ,g6
07:06:52   8  ,gatt
07:06:52   9  ,gattn
07:06:52  10  ,trend
07:06:52  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
07:06:52  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
07:06:52  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
07:06:52  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
07:06:52  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
07:06:52  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
07:06:52  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
07:06:52  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
07:06:52  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
07:06:52  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
07:06:52  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
07:06:52  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
07:06:52  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
07:06:52  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
07:06:52  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
07:06:52  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
07:06:52  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
07:06:52  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
07:06:52  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
07:06:52  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
07:06:52  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
07:06:52  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
07:06:52  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
07:06:52  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
07:06:52  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
07:06:52  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
07:06:52  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
07:06:52  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
07:06:52  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
07:06:52  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
07:06:52  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
07:06:52  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
07:06:52  43  ,hh  att32
07:06:52  44  ,d   att33
07:06:52  45  ,w   att34
07:06:52  46  ,mpm att35
07:06:52  47  ,mph att36
07:06:52  48  ,trend att37
07:06:52  49  FROM svm6142
07:06:52  50  ORDER BY ydate
07:06:52  51  /

Table created.

Elapsed: 00:00:04.74
07:06:57 SQL> 
07:06:57 SQL> -- rpt
07:06:57 SQL> 
07:06:57 SQL> SELECT
07:06:57   2  pair
07:06:57   3  ,trend
07:06:57   4  ,gatt
07:06:57   5  ,COUNT(pair)
07:06:57   6  ,AVG(g6)
07:06:57   7  FROM svm6162
07:06:57   8  GROUP BY pair,trend,gatt
07:06:57   9  ORDER BY pair,trend,gatt
07:06:57  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7316 -.00131066
usd_cad 	-1 up	      3000 .003056492
usd_cad 	-1		72
usd_cad 	 1 nup	      6563 -.00163383
usd_cad 	 1 up	      2305 .003653973

Elapsed: 00:00:00.02
07:06:57 SQL> 
07:06:57 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.17
07:06:57 SQL> CREATE TABLE modsrc COMPRESS AS
07:06:57   2  SELECT
07:06:57   3  pair
07:06:57   4  ,ydate
07:06:57   5  ,prdate
07:06:57   6  ,trend
07:06:57   7  ,g6
07:06:57   8  ,gatt
07:06:57   9  ,gattn
07:06:57  10  FROM svm6162
07:06:57  11  /

Table created.

Elapsed: 00:00:00.09
07:06:57 SQL> 
07:06:57 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.23
07:06:58 SQL> 
07:06:58 SQL> DROP   TABLE cad_ms610 ;

Table dropped.

Elapsed: 00:00:00.06
07:06:58 SQL> CREATE TABLE cad_ms610 COMPRESS AS
07:06:58   2  SELECT
07:06:58   3  ydate
07:06:58   4  ,trend cad_trend
07:06:58   5  ,g6    cad_g6
07:06:58   6  ,gatt  cad_gatt
07:06:58   7  ,gattn cad_gattn
07:06:58   8  FROM modsrc
07:06:58   9  /

Table created.

Elapsed: 00:00:00.09
07:06:58 SQL> 
07:06:58 SQL> ANALYZE TABLE cad_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.78
07:06:58 SQL> 
07:06:58 SQL> -- I need a copy of the attributes:
07:06:58 SQL> 
07:06:58 SQL> 
07:06:58 SQL> DROP   TABLE cad_att;

Table dropped.

Elapsed: 00:00:00.05
07:06:59 SQL> CREATE TABLE cad_att COMPRESS AS
07:06:59   2  SELECT
07:06:59   3  ydate
07:06:59   4  ,att00 cad_att00
07:06:59   5  ,att01 cad_att01
07:06:59   6  ,att02 cad_att02
07:06:59   7  ,att03 cad_att03
07:06:59   8  ,att04 cad_att04
07:06:59   9  ,att05 cad_att05
07:06:59  10  ,att06 cad_att06
07:06:59  11  ,att07 cad_att07
07:06:59  12  ,att08 cad_att08
07:06:59  13  ,att09 cad_att09
07:06:59  14  ,att10 cad_att10
07:06:59  15  ,att11 cad_att11
07:06:59  16  ,att12 cad_att12
07:06:59  17  ,att13 cad_att13
07:06:59  18  ,att14 cad_att14
07:06:59  19  ,att15 cad_att15
07:06:59  20  ,att16 cad_att16
07:06:59  21  ,att17 cad_att17
07:06:59  22  ,att18 cad_att18
07:06:59  23  ,att19 cad_att19
07:06:59  24  ,att20 cad_att20
07:06:59  25  ,att21 cad_att21
07:06:59  26  ,att22 cad_att22
07:06:59  27  ,att23 cad_att23
07:06:59  28  ,att24 cad_att24
07:06:59  29  ,att25 cad_att25
07:06:59  30  ,att26 cad_att26
07:06:59  31  ,att27 cad_att27
07:06:59  32  ,att28 cad_att28
07:06:59  33  ,att29 cad_att29
07:06:59  34  ,att30 cad_att30
07:06:59  35  ,att31 cad_att31
07:06:59  36  ,att32 cad_att32
07:06:59  37  ,att33 cad_att33
07:06:59  38  ,att34 cad_att34
07:06:59  39  ,att35 cad_att35
07:06:59  40  ,att36 cad_att36
07:06:59  41  ,att37 cad_att37
07:06:59  42  FROM svm6162
07:06:59  43  /

Table created.

Elapsed: 00:00:00.18
07:06:59 SQL> 
07:06:59 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
07:06:59 SQL> 
07:06:59 SQL> -- rpt
07:06:59 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19256

Elapsed: 00:00:00.81
07:07:00 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
     19256

Elapsed: 00:00:00.01
07:07:00 SQL> 
07:07:00 SQL> --
07:07:00 SQL> -- chf610.sql
07:07:00 SQL> --
07:07:00 SQL> 
07:07:00 SQL> -- Creates views and tables for backtesting a forex SVM strategy
07:07:00 SQL> 
07:07:00 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.41
07:07:00 SQL> 
07:07:00 SQL> -- I created di5min here:
07:07:00 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
07:07:00 SQL> 
07:07:00 SQL> CREATE OR REPLACE VIEW svm6102 AS
07:07:00   2  SELECT
07:07:00   3  pair
07:07:00   4  ,ydate
07:07:00   5  ,prdate
07:07:00   6  ,rownum rnum -- acts as t in my time-series
07:07:00   7  ,clse
07:07:00   8  -- Derive a bunch of attributes from clse, the latest price:
07:07:00   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
07:07:00  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
07:07:00  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
07:07:00  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
07:07:00  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
07:07:00  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
07:07:00  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
07:07:00  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
07:07:00  17  --
07:07:00  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
07:07:00  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
07:07:00  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
07:07:00  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
07:07:00  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
07:07:00  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
07:07:00  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
07:07:00  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
07:07:00  26  --
07:07:00  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
07:07:00  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
07:07:00  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
07:07:00  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
07:07:00  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
07:07:00  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
07:07:00  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
07:07:00  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
07:07:00  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
07:07:00  36  FROM di5min WHERE pair LIKE'%chf%'
07:07:00  37  AND ydate > sysdate - 95
07:07:00  38  ORDER BY ydate
07:07:00  39  /

View created.

Elapsed: 00:00:00.05
07:07:00 SQL> 
07:07:00 SQL> -- rpt
07:07:00 SQL> 
07:07:00 SQL> SELECT
07:07:00   2  pair
07:07:00   3  ,COUNT(pair)
07:07:00   4  ,MIN(clse),MAX(clse)
07:07:00   5  ,MIN(avg6),MAX(avg6)
07:07:00   6  ,MIN(ydate),MAX(ydate)
07:07:00   7  FROM svm6102
07:07:00   8  GROUP BY pair
07:07:00   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_chf       19259    .931675	  1.00635 .933969692 1.00498151 2010-09-30 07:10:01 2011-01-03 07:00:00

Elapsed: 00:00:00.83
07:07:01 SQL> 
07:07:01 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
07:07:01 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.17
07:07:01 SQL> CREATE TABLE svm6122 COMPRESS AS
07:07:01   2  SELECT
07:07:01   3  pair
07:07:01   4  ,ydate
07:07:01   5  ,prdate
07:07:01   6  ,clse
07:07:01   7  -- g6 is important. I want to predict g6:
07:07:01   8  ,ld6 - clse g6
07:07:01   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
07:07:01  10  -- I want more attributes from the ones I derived above:
07:07:01  11  -- clse relation to moving-min
07:07:01  12  ,clse-min4  cm4
07:07:01  13  ,clse-min6  cm6
07:07:01  14  ,clse-min8  cm8
07:07:01  15  ,clse-min10 cm10
07:07:01  16  ,clse-min12 cm12
07:07:01  17  ,clse-min14 cm14
07:07:01  18  ,clse-min16 cm16
07:07:01  19  ,clse-min18 cm18
07:07:01  20  -- clse relation to moving-avg
07:07:01  21  ,clse-avg4  ca4
07:07:01  22  ,clse-avg6  ca6
07:07:01  23  ,clse-avg8  ca8
07:07:01  24  ,clse-avg10 ca10
07:07:01  25  ,clse-avg12 ca12
07:07:01  26  ,clse-avg14 ca14
07:07:01  27  ,clse-avg16 ca16
07:07:01  28  ,clse-avg18 ca18
07:07:01  29  -- clse relation to moving-max
07:07:01  30  ,clse-max4  cx4
07:07:01  31  ,clse-max6  cx6
07:07:01  32  ,clse-max8  cx8
07:07:01  33  ,clse-max10 cx10
07:07:01  34  ,clse-max12 cx12
07:07:01  35  ,clse-max14 cx14
07:07:01  36  ,clse-max16 cx16
07:07:01  37  ,clse-max18 cx18
07:07:01  38  -- Derive more attributes.
07:07:01  39  -- I want to use CORR() here to help SVM see the shape of the series.
07:07:01  40  -- But COVAR_POP is more stable:
07:07:01  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
07:07:01  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
07:07:01  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
07:07:01  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
07:07:01  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
07:07:01  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
07:07:01  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
07:07:01  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
07:07:01  49  -- Derive date related attributes:
07:07:01  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
07:07:01  51  ,0+TO_CHAR(ydate,'D')d
07:07:01  52  ,0+TO_CHAR(ydate,'W')w
07:07:01  53  -- mpm stands for minutes-past-midnight:
07:07:01  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
07:07:01  55  -- mph stands for minutes-past-hour:
07:07:01  56  ,0+TO_CHAR(ydate,'MI')mph
07:07:01  57  FROM svm6102
07:07:01  58  ORDER BY ydate
07:07:01  59  /

Table created.

Elapsed: 00:00:02.00
07:07:03 SQL> 
07:07:03 SQL> -- rpt
07:07:03 SQL> 
07:07:03 SQL> SELECT
07:07:03   2  pair
07:07:03   3  ,COUNT(pair)
07:07:03   4  ,MIN(clse),MAX(clse)
07:07:03   5  ,MIN(ydate),MAX(ydate)
07:07:03   6  FROM svm6122
07:07:03   7  GROUP BY pair
07:07:03   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_chf       19259    .931675	  1.00635 2010-09-30 07:10:01 2011-01-03 07:00:00

Elapsed: 00:00:00.07
07:07:04 SQL> 
07:07:04 SQL> -- Prepare for derivation of NTILE based params:
07:07:04 SQL> 
07:07:04 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.30
07:07:04 SQL> CREATE TABLE svm6142 COMPRESS AS
07:07:04   2  SELECT
07:07:04   3  pair
07:07:04   4  ,ydate
07:07:04   5  ,prdate
07:07:04   6  ,clse
07:07:04   7  ,g6
07:07:04   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
07:07:04   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
07:07:04  10  ,CASE WHEN trend IS NULL THEN 1
07:07:04  11  	    WHEN trend =0      THEN 1
07:07:04  12  	    ELSE trend END trend
07:07:04  13  ,cm4
07:07:04  14  ,cm6
07:07:04  15  ,cm8
07:07:04  16  ,cm10
07:07:04  17  ,cm12
07:07:04  18  ,cm14
07:07:04  19  ,cm16
07:07:04  20  ,cm18
07:07:04  21  --
07:07:04  22  ,ca4
07:07:04  23  ,ca6
07:07:04  24  ,ca8
07:07:04  25  ,ca10
07:07:04  26  ,ca12
07:07:04  27  ,ca14
07:07:04  28  ,ca16
07:07:04  29  ,ca18
07:07:04  30  --
07:07:04  31  ,cx4
07:07:04  32  ,cx6
07:07:04  33  ,cx8
07:07:04  34  ,cx10
07:07:04  35  ,cx12
07:07:04  36  ,cx14
07:07:04  37  ,cx16
07:07:04  38  ,cx18
07:07:04  39  --
07:07:04  40  ,crr4
07:07:04  41  ,crr6
07:07:04  42  ,crr8
07:07:04  43  ,crr10
07:07:04  44  ,crr12
07:07:04  45  ,crr14
07:07:04  46  ,crr16
07:07:04  47  ,crr18
07:07:04  48  --
07:07:04  49  ,hh
07:07:04  50  ,d
07:07:04  51  ,w
07:07:04  52  ,mpm
07:07:04  53  ,mph
07:07:04  54  FROM svm6122
07:07:04  55  ORDER BY ydate
07:07:04  56  /

Table created.

Elapsed: 00:00:00.36
07:07:04 SQL> 
07:07:04 SQL> -- rpt
07:07:04 SQL> 
07:07:04 SQL> SELECT
07:07:04   2  pair
07:07:04   3  ,trend
07:07:04   4  ,gatt
07:07:04   5  ,COUNT(pair)
07:07:04   6  ,AVG(g6)
07:07:04   7  FROM svm6142
07:07:04   8  GROUP BY pair,trend,gatt
07:07:04   9  ORDER BY pair,trend,gatt
07:07:04  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7210 -.00199875
usd_chf 	-1 up	      3103 .003937162
usd_chf 	-1		 6
usd_chf 	 1 nup	      6310  -.0015965
usd_chf 	 1 up	      2564 .003692886
usd_chf 	 1		66

6 rows selected.

Elapsed: 00:00:00.04
07:07:04 SQL> 
07:07:04 SQL> 
07:07:04 SQL> -- Derive NTILE based params:
07:07:04 SQL> 
07:07:04 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.18
07:07:04 SQL> CREATE TABLE svm6162 COMPRESS AS
07:07:04   2  SELECT
07:07:04   3  pair
07:07:04   4  ,ydate
07:07:04   5  ,prdate
07:07:04   6  ,clse
07:07:04   7  ,g6
07:07:04   8  ,gatt
07:07:04   9  ,gattn
07:07:04  10  ,trend
07:07:04  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
07:07:04  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
07:07:04  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
07:07:04  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
07:07:04  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
07:07:04  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
07:07:04  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
07:07:04  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
07:07:04  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
07:07:04  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
07:07:04  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
07:07:04  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
07:07:04  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
07:07:04  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
07:07:04  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
07:07:04  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
07:07:04  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
07:07:04  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
07:07:04  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
07:07:04  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
07:07:04  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
07:07:04  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
07:07:04  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
07:07:04  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
07:07:04  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
07:07:04  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
07:07:04  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
07:07:04  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
07:07:04  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
07:07:04  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
07:07:04  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
07:07:04  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
07:07:04  43  ,hh  att32
07:07:04  44  ,d   att33
07:07:04  45  ,w   att34
07:07:04  46  ,mpm att35
07:07:04  47  ,mph att36
07:07:04  48  ,trend att37
07:07:04  49  FROM svm6142
07:07:04  50  ORDER BY ydate
07:07:04  51  /

Table created.

Elapsed: 00:00:04.75
07:07:09 SQL> 
07:07:09 SQL> -- rpt
07:07:09 SQL> 
07:07:09 SQL> SELECT
07:07:09   2  pair
07:07:09   3  ,trend
07:07:09   4  ,gatt
07:07:09   5  ,COUNT(pair)
07:07:09   6  ,AVG(g6)
07:07:09   7  FROM svm6162
07:07:09   8  GROUP BY pair,trend,gatt
07:07:09   9  ORDER BY pair,trend,gatt
07:07:09  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7210 -.00199875
usd_chf 	-1 up	      3103 .003937162
usd_chf 	-1		 6
usd_chf 	 1 nup	      6310  -.0015965
usd_chf 	 1 up	      2564 .003692886
usd_chf 	 1		66

6 rows selected.

Elapsed: 00:00:00.03
07:07:09 SQL> 
07:07:09 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
07:07:09 SQL> CREATE TABLE modsrc COMPRESS AS
07:07:09   2  SELECT
07:07:09   3  pair
07:07:09   4  ,ydate
07:07:09   5  ,prdate
07:07:09   6  ,trend
07:07:09   7  ,g6
07:07:09   8  ,gatt
07:07:09   9  ,gattn
07:07:09  10  FROM svm6162
07:07:09  11  /

Table created.

Elapsed: 00:00:00.12
07:07:09 SQL> 
07:07:09 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
07:07:10 SQL> 
07:07:10 SQL> DROP   TABLE chf_ms610 ;

Table dropped.

Elapsed: 00:00:00.07
07:07:10 SQL> CREATE TABLE chf_ms610 COMPRESS AS
07:07:10   2  SELECT
07:07:10   3  ydate
07:07:10   4  ,trend chf_trend
07:07:10   5  ,g6    chf_g6
07:07:10   6  ,gatt  chf_gatt
07:07:10   7  ,gattn chf_gattn
07:07:10   8  FROM modsrc
07:07:10   9  /

Table created.

Elapsed: 00:00:00.06
07:07:10 SQL> 
07:07:10 SQL> ANALYZE TABLE chf_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
07:07:10 SQL> 
07:07:10 SQL> -- I need a copy of the attributes:
07:07:10 SQL> 
07:07:10 SQL> 
07:07:10 SQL> DROP   TABLE chf_att;

Table dropped.

Elapsed: 00:00:00.04
07:07:10 SQL> CREATE TABLE chf_att COMPRESS AS
07:07:10   2  SELECT
07:07:10   3  ydate
07:07:10   4  ,att00 chf_att00
07:07:10   5  ,att01 chf_att01
07:07:10   6  ,att02 chf_att02
07:07:10   7  ,att03 chf_att03
07:07:10   8  ,att04 chf_att04
07:07:10   9  ,att05 chf_att05
07:07:10  10  ,att06 chf_att06
07:07:10  11  ,att07 chf_att07
07:07:10  12  ,att08 chf_att08
07:07:10  13  ,att09 chf_att09
07:07:10  14  ,att10 chf_att10
07:07:10  15  ,att11 chf_att11
07:07:10  16  ,att12 chf_att12
07:07:10  17  ,att13 chf_att13
07:07:10  18  ,att14 chf_att14
07:07:10  19  ,att15 chf_att15
07:07:10  20  ,att16 chf_att16
07:07:10  21  ,att17 chf_att17
07:07:10  22  ,att18 chf_att18
07:07:10  23  ,att19 chf_att19
07:07:10  24  ,att20 chf_att20
07:07:10  25  ,att21 chf_att21
07:07:10  26  ,att22 chf_att22
07:07:10  27  ,att23 chf_att23
07:07:10  28  ,att24 chf_att24
07:07:10  29  ,att25 chf_att25
07:07:10  30  ,att26 chf_att26
07:07:10  31  ,att27 chf_att27
07:07:10  32  ,att28 chf_att28
07:07:10  33  ,att29 chf_att29
07:07:10  34  ,att30 chf_att30
07:07:10  35  ,att31 chf_att31
07:07:10  36  ,att32 chf_att32
07:07:10  37  ,att33 chf_att33
07:07:10  38  ,att34 chf_att34
07:07:10  39  ,att35 chf_att35
07:07:10  40  ,att36 chf_att36
07:07:10  41  ,att37 chf_att37
07:07:10  42  FROM svm6162
07:07:10  43  /

Table created.

Elapsed: 00:00:00.17
07:07:10 SQL> 
07:07:10 SQL> ANALYZE TABLE chf_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
07:07:11 SQL> 
07:07:11 SQL> -- rpt
07:07:11 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19259

Elapsed: 00:00:00.85
07:07:11 SQL> SELECT COUNT(*)FROM chf_att;

  COUNT(*)
----------
     19259

Elapsed: 00:00:00.00
07:07:11 SQL> 
07:07:11 SQL> --
07:07:11 SQL> -- ech610.sql
07:07:11 SQL> --
07:07:11 SQL> 
07:07:11 SQL> -- Creates views and tables for backtesting a forex SVM strategy
07:07:11 SQL> 
07:07:11 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.45
07:07:12 SQL> 
07:07:12 SQL> -- I created di5min here:
07:07:12 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
07:07:12 SQL> 
07:07:12 SQL> CREATE OR REPLACE VIEW svm6102 AS
07:07:12   2  SELECT
07:07:12   3  pair
07:07:12   4  ,ydate
07:07:12   5  ,prdate
07:07:12   6  ,rownum rnum -- acts as t in my time-series
07:07:12   7  ,clse
07:07:12   8  -- Derive a bunch of attributes from clse, the latest price:
07:07:12   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
07:07:12  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
07:07:12  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
07:07:12  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
07:07:12  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
07:07:12  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
07:07:12  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
07:07:12  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
07:07:12  17  --
07:07:12  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
07:07:12  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
07:07:12  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
07:07:12  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
07:07:12  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
07:07:12  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
07:07:12  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
07:07:12  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
07:07:12  26  --
07:07:12  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
07:07:12  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
07:07:12  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
07:07:12  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
07:07:12  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
07:07:12  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
07:07:12  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
07:07:12  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
07:07:12  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
07:07:12  36  FROM di5min WHERE pair LIKE'%ech%'
07:07:12  37  AND ydate > sysdate - 95
07:07:12  38  ORDER BY ydate
07:07:12  39  /

View created.

Elapsed: 00:00:00.04
07:07:12 SQL> 
07:07:12 SQL> -- rpt
07:07:12 SQL> 
07:07:12 SQL> SELECT
07:07:12   2  pair
07:07:12   3  ,COUNT(pair)
07:07:12   4  ,MIN(clse),MAX(clse)
07:07:12   5  ,MIN(avg6),MAX(avg6)
07:07:12   6  ,MIN(ydate),MAX(ydate)
07:07:12   7  FROM svm6102
07:07:12   8  GROUP BY pair
07:07:12   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ech_usd       19258 1.24213032 1.38284305 1.24320711 1.37986485 2010-09-30 07:10:01 2011-01-03 07:00:00

Elapsed: 00:00:00.78
07:07:13 SQL> 
07:07:13 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
07:07:13 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:01.09
07:07:14 SQL> CREATE TABLE svm6122 COMPRESS AS
07:07:14   2  SELECT
07:07:14   3  pair
07:07:14   4  ,ydate
07:07:14   5  ,prdate
07:07:14   6  ,clse
07:07:14   7  -- g6 is important. I want to predict g6:
07:07:14   8  ,ld6 - clse g6
07:07:14   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
07:07:14  10  -- I want more attributes from the ones I derived above:
07:07:14  11  -- clse relation to moving-min
07:07:14  12  ,clse-min4  cm4
07:07:14  13  ,clse-min6  cm6
07:07:14  14  ,clse-min8  cm8
07:07:14  15  ,clse-min10 cm10
07:07:14  16  ,clse-min12 cm12
07:07:14  17  ,clse-min14 cm14
07:07:14  18  ,clse-min16 cm16
07:07:14  19  ,clse-min18 cm18
07:07:14  20  -- clse relation to moving-avg
07:07:14  21  ,clse-avg4  ca4
07:07:14  22  ,clse-avg6  ca6
07:07:14  23  ,clse-avg8  ca8
07:07:14  24  ,clse-avg10 ca10
07:07:14  25  ,clse-avg12 ca12
07:07:14  26  ,clse-avg14 ca14
07:07:14  27  ,clse-avg16 ca16
07:07:14  28  ,clse-avg18 ca18
07:07:14  29  -- clse relation to moving-max
07:07:14  30  ,clse-max4  cx4
07:07:14  31  ,clse-max6  cx6
07:07:14  32  ,clse-max8  cx8
07:07:14  33  ,clse-max10 cx10
07:07:14  34  ,clse-max12 cx12
07:07:14  35  ,clse-max14 cx14
07:07:14  36  ,clse-max16 cx16
07:07:14  37  ,clse-max18 cx18
07:07:14  38  -- Derive more attributes.
07:07:14  39  -- I want to use CORR() here to help SVM see the shape of the series.
07:07:14  40  -- But COVAR_POP is more stable:
07:07:14  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
07:07:14  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
07:07:14  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
07:07:14  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
07:07:14  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
07:07:14  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
07:07:14  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
07:07:14  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
07:07:14  49  -- Derive date related attributes:
07:07:14  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
07:07:14  51  ,0+TO_CHAR(ydate,'D')d
07:07:14  52  ,0+TO_CHAR(ydate,'W')w
07:07:14  53  -- mpm stands for minutes-past-midnight:
07:07:14  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
07:07:14  55  -- mph stands for minutes-past-hour:
07:07:14  56  ,0+TO_CHAR(ydate,'MI')mph
07:07:14  57  FROM svm6102
07:07:14  58  ORDER BY ydate
07:07:14  59  /

Table created.

Elapsed: 00:00:02.03
07:07:16 SQL> 
07:07:16 SQL> -- rpt
07:07:16 SQL> 
07:07:16 SQL> SELECT
07:07:16   2  pair
07:07:16   3  ,COUNT(pair)
07:07:16   4  ,MIN(clse),MAX(clse)
07:07:16   5  ,MIN(ydate),MAX(ydate)
07:07:16   6  FROM svm6122
07:07:16   7  GROUP BY pair
07:07:16   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ech_usd       19258 1.24213032 1.38284305 2010-09-30 07:10:01 2011-01-03 07:00:00

Elapsed: 00:00:00.04
07:07:16 SQL> 
07:07:16 SQL> -- Prepare for derivation of NTILE based params:
07:07:16 SQL> 
07:07:16 SQL> DROP TABLE svm6142;
