
SQL*Plus: Release 11.2.0.1.0 Production on Wed Dec 29 20:48:21 2010

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

20:48:22 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.01
20:48:22 SQL> 20:48:22 SQL> --
20:48:22 SQL> -- eur610.sql
20:48:22 SQL> --
20:48:22 SQL> 
20:48:22 SQL> -- Creates views and tables for backtesting a forex SVM strategy
20:48:22 SQL> 
20:48:22 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.02
20:48:22 SQL> 
20:48:22 SQL> -- I created di5min here:
20:48:22 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
20:48:22 SQL> 
20:48:22 SQL> CREATE OR REPLACE VIEW svm6102 AS
20:48:22   2  SELECT
20:48:22   3  pair
20:48:22   4  ,ydate
20:48:22   5  ,prdate
20:48:22   6  ,rownum rnum -- acts as t in my time-series
20:48:22   7  ,clse
20:48:22   8  -- Derive a bunch of attributes from clse, the latest price:
20:48:22   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
20:48:22  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
20:48:22  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
20:48:22  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
20:48:22  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
20:48:22  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
20:48:22  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
20:48:22  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
20:48:22  17  --
20:48:22  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
20:48:22  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
20:48:22  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
20:48:22  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
20:48:22  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
20:48:22  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
20:48:22  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
20:48:22  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
20:48:22  26  --
20:48:22  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
20:48:22  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
20:48:22  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
20:48:22  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
20:48:22  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
20:48:22  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
20:48:22  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
20:48:22  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
20:48:22  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
20:48:22  36  FROM di5min WHERE pair LIKE'%eur%'
20:48:22  37  AND ydate > sysdate - 95
20:48:22  38  ORDER BY ydate
20:48:22  39  /

View created.

Elapsed: 00:00:00.10
20:48:22 SQL> 
20:48:22 SQL> -- rpt
20:48:22 SQL> 
20:48:22 SQL> SELECT
20:48:22   2  pair
20:48:22   3  ,COUNT(pair)
20:48:22   4  ,MIN(clse),MAX(clse)
20:48:22   5  ,MIN(avg6),MAX(avg6)
20:48:22   6  ,MIN(ydate),MAX(ydate)
20:48:22   7  FROM svm6102
20:48:22   8  GROUP BY pair
20:48:22   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_usd       19556    1.29735	   1.4273 1.29875103 1.42436233 2010-09-26 20:55:01 2010-12-29 20:40:00

Elapsed: 00:00:00.90
20:48:23 SQL> 
20:48:23 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
20:48:23 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.07
20:48:23 SQL> CREATE TABLE svm6122 COMPRESS AS
20:48:23   2  SELECT
20:48:23   3  pair
20:48:23   4  ,ydate
20:48:23   5  ,prdate
20:48:23   6  ,clse
20:48:23   7  -- g6 is important. I want to predict g6:
20:48:23   8  ,ld6 - clse g6
20:48:23   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
20:48:23  10  -- I want more attributes from the ones I derived above:
20:48:23  11  -- clse relation to moving-min
20:48:23  12  ,clse-min4  cm4
20:48:23  13  ,clse-min6  cm6
20:48:23  14  ,clse-min8  cm8
20:48:23  15  ,clse-min10 cm10
20:48:23  16  ,clse-min12 cm12
20:48:23  17  ,clse-min14 cm14
20:48:23  18  ,clse-min16 cm16
20:48:23  19  ,clse-min18 cm18
20:48:23  20  -- clse relation to moving-avg
20:48:23  21  ,clse-avg4  ca4
20:48:23  22  ,clse-avg6  ca6
20:48:23  23  ,clse-avg8  ca8
20:48:23  24  ,clse-avg10 ca10
20:48:23  25  ,clse-avg12 ca12
20:48:23  26  ,clse-avg14 ca14
20:48:23  27  ,clse-avg16 ca16
20:48:23  28  ,clse-avg18 ca18
20:48:23  29  -- clse relation to moving-max
20:48:23  30  ,clse-max4  cx4
20:48:23  31  ,clse-max6  cx6
20:48:23  32  ,clse-max8  cx8
20:48:23  33  ,clse-max10 cx10
20:48:23  34  ,clse-max12 cx12
20:48:23  35  ,clse-max14 cx14
20:48:23  36  ,clse-max16 cx16
20:48:23  37  ,clse-max18 cx18
20:48:23  38  -- Derive more attributes.
20:48:23  39  -- I want to use CORR() here to help SVM see the shape of the series.
20:48:23  40  -- But COVAR_POP is more stable:
20:48:23  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
20:48:23  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
20:48:23  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
20:48:23  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
20:48:23  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
20:48:23  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
20:48:23  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
20:48:23  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
20:48:23  49  -- Derive date related attributes:
20:48:23  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
20:48:23  51  ,0+TO_CHAR(ydate,'D')d
20:48:23  52  ,0+TO_CHAR(ydate,'W')w
20:48:23  53  -- mpm stands for minutes-past-midnight:
20:48:23  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
20:48:23  55  -- mph stands for minutes-past-hour:
20:48:23  56  ,0+TO_CHAR(ydate,'MI')mph
20:48:23  57  FROM svm6102
20:48:23  58  ORDER BY ydate
20:48:23  59  /

Table created.

Elapsed: 00:00:02.42
20:48:25 SQL> 
20:48:25 SQL> -- rpt
20:48:25 SQL> 
20:48:25 SQL> SELECT
20:48:25   2  pair
20:48:25   3  ,COUNT(pair)
20:48:25   4  ,MIN(clse),MAX(clse)
20:48:25   5  ,MIN(ydate),MAX(ydate)
20:48:25   6  FROM svm6122
20:48:25   7  GROUP BY pair
20:48:25   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_usd       19556    1.29735	   1.4273 2010-09-26 20:55:01 2010-12-29 20:40:00

Elapsed: 00:00:00.09
20:48:25 SQL> 
20:48:25 SQL> -- Prepare for derivation of NTILE based params:
20:48:25 SQL> 
20:48:25 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.33
20:48:26 SQL> CREATE TABLE svm6142 COMPRESS AS
20:48:26   2  SELECT
20:48:26   3  pair
20:48:26   4  ,ydate
20:48:26   5  ,prdate
20:48:26   6  ,clse
20:48:26   7  ,g6
20:48:26   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
20:48:26   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
20:48:26  10  ,CASE WHEN trend IS NULL THEN 1
20:48:26  11  	    WHEN trend =0      THEN 1
20:48:26  12  	    ELSE trend END trend
20:48:26  13  ,cm4
20:48:26  14  ,cm6
20:48:26  15  ,cm8
20:48:26  16  ,cm10
20:48:26  17  ,cm12
20:48:26  18  ,cm14
20:48:26  19  ,cm16
20:48:26  20  ,cm18
20:48:26  21  --
20:48:26  22  ,ca4
20:48:26  23  ,ca6
20:48:26  24  ,ca8
20:48:26  25  ,ca10
20:48:26  26  ,ca12
20:48:26  27  ,ca14
20:48:26  28  ,ca16
20:48:26  29  ,ca18
20:48:26  30  --
20:48:26  31  ,cx4
20:48:26  32  ,cx6
20:48:26  33  ,cx8
20:48:26  34  ,cx10
20:48:26  35  ,cx12
20:48:26  36  ,cx14
20:48:26  37  ,cx16
20:48:26  38  ,cx18
20:48:26  39  --
20:48:26  40  ,crr4
20:48:26  41  ,crr6
20:48:26  42  ,crr8
20:48:26  43  ,crr10
20:48:26  44  ,crr12
20:48:26  45  ,crr14
20:48:26  46  ,crr16
20:48:26  47  ,crr18
20:48:26  48  --
20:48:26  49  ,hh
20:48:26  50  ,d
20:48:26  51  ,w
20:48:26  52  ,mpm
20:48:26  53  ,mph
20:48:26  54  FROM svm6122
20:48:26  55  ORDER BY ydate
20:48:26  56  /

Table created.

Elapsed: 00:00:00.38
20:48:26 SQL> 
20:48:26 SQL> -- rpt
20:48:26 SQL> 
20:48:26 SQL> SELECT
20:48:26   2  pair
20:48:26   3  ,trend
20:48:26   4  ,gatt
20:48:26   5  ,COUNT(pair)
20:48:26   6  ,AVG(g6)
20:48:26   7  FROM svm6142
20:48:26   8  GROUP BY pair,trend,gatt
20:48:26   9  ORDER BY pair,trend,gatt
20:48:26  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6136  -.0030778
eur_usd 	-1 up	      3720 .004487591
eur_usd 	-1		 6
eur_usd 	 1 nup	      5958 -.00314638
eur_usd 	 1 up	      3670 .005144176
eur_usd 	 1		66

6 rows selected.

Elapsed: 00:00:00.05
20:48:26 SQL> 
20:48:26 SQL> 
20:48:26 SQL> -- Derive NTILE based params:
20:48:26 SQL> 
20:48:26 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.29
20:48:26 SQL> CREATE TABLE svm6162 COMPRESS AS
20:48:26   2  SELECT
20:48:26   3  pair
20:48:26   4  ,ydate
20:48:26   5  ,prdate
20:48:26   6  ,clse
20:48:26   7  ,g6
20:48:26   8  ,gatt
20:48:26   9  ,gattn
20:48:26  10  ,trend
20:48:26  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
20:48:26  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
20:48:26  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
20:48:26  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
20:48:26  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
20:48:26  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
20:48:26  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
20:48:26  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
20:48:26  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
20:48:26  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
20:48:26  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
20:48:26  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
20:48:26  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
20:48:26  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
20:48:26  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
20:48:26  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
20:48:26  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
20:48:26  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
20:48:26  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
20:48:26  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
20:48:26  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
20:48:26  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
20:48:26  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
20:48:26  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
20:48:26  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
20:48:26  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
20:48:26  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
20:48:26  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
20:48:26  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
20:48:26  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
20:48:26  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
20:48:26  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
20:48:26  43  ,hh  att32
20:48:26  44  ,d   att33
20:48:26  45  ,w   att34
20:48:26  46  ,mpm att35
20:48:26  47  ,mph att36
20:48:26  48  ,trend att37
20:48:26  49  FROM svm6142
20:48:26  50  ORDER BY ydate
20:48:26  51  /

Table created.

Elapsed: 00:00:04.76
20:48:31 SQL> 
20:48:31 SQL> -- rpt
20:48:31 SQL> 
20:48:31 SQL> SELECT
20:48:31   2  pair
20:48:31   3  ,trend
20:48:31   4  ,gatt
20:48:31   5  ,COUNT(pair)
20:48:31   6  ,AVG(g6)
20:48:31   7  FROM svm6162
20:48:31   8  GROUP BY pair,trend,gatt
20:48:31   9  ORDER BY pair,trend,gatt
20:48:31  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6136  -.0030778
eur_usd 	-1 up	      3720 .004487591
eur_usd 	-1		 6
eur_usd 	 1 nup	      5958 -.00314638
eur_usd 	 1 up	      3670 .005144176
eur_usd 	 1		66

6 rows selected.

Elapsed: 00:00:00.03
20:48:31 SQL> 
20:48:31 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.10
20:48:31 SQL> CREATE TABLE modsrc COMPRESS AS
20:48:31   2  SELECT
20:48:31   3  pair
20:48:31   4  ,ydate
20:48:31   5  ,prdate
20:48:31   6  ,trend
20:48:31   7  ,g6
20:48:31   8  ,gatt
20:48:31   9  ,gattn
20:48:31  10  FROM svm6162
20:48:31  11  /

Table created.

Elapsed: 00:00:00.09
20:48:31 SQL> 
20:48:31 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
20:48:31 SQL> 
20:48:31 SQL> DROP   TABLE eur_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
20:48:31 SQL> CREATE TABLE eur_ms610 COMPRESS AS
20:48:31   2  SELECT
20:48:31   3  ydate
20:48:31   4  ,trend eur_trend
20:48:31   5  ,g6    eur_g6
20:48:31   6  ,gatt  eur_gatt
20:48:31   7  ,gattn eur_gattn
20:48:31   8  FROM modsrc
20:48:31   9  /

Table created.

Elapsed: 00:00:00.06
20:48:32 SQL> 
20:48:32 SQL> ANALYZE TABLE eur_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
20:48:32 SQL> 
20:48:32 SQL> -- I need a copy of the attributes:
20:48:32 SQL> 
20:48:32 SQL> 
20:48:32 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.04
20:48:32 SQL> CREATE TABLE eur_att COMPRESS AS
20:48:32   2  SELECT
20:48:32   3  ydate
20:48:32   4  ,att00 eur_att00
20:48:32   5  ,att01 eur_att01
20:48:32   6  ,att02 eur_att02
20:48:32   7  ,att03 eur_att03
20:48:32   8  ,att04 eur_att04
20:48:32   9  ,att05 eur_att05
20:48:32  10  ,att06 eur_att06
20:48:32  11  ,att07 eur_att07
20:48:32  12  ,att08 eur_att08
20:48:32  13  ,att09 eur_att09
20:48:32  14  ,att10 eur_att10
20:48:32  15  ,att11 eur_att11
20:48:32  16  ,att12 eur_att12
20:48:32  17  ,att13 eur_att13
20:48:32  18  ,att14 eur_att14
20:48:32  19  ,att15 eur_att15
20:48:32  20  ,att16 eur_att16
20:48:32  21  ,att17 eur_att17
20:48:32  22  ,att18 eur_att18
20:48:32  23  ,att19 eur_att19
20:48:32  24  ,att20 eur_att20
20:48:32  25  ,att21 eur_att21
20:48:32  26  ,att22 eur_att22
20:48:32  27  ,att23 eur_att23
20:48:32  28  ,att24 eur_att24
20:48:32  29  ,att25 eur_att25
20:48:32  30  ,att26 eur_att26
20:48:32  31  ,att27 eur_att27
20:48:32  32  ,att28 eur_att28
20:48:32  33  ,att29 eur_att29
20:48:32  34  ,att30 eur_att30
20:48:32  35  ,att31 eur_att31
20:48:32  36  ,att32 eur_att32
20:48:32  37  ,att33 eur_att33
20:48:32  38  ,att34 eur_att34
20:48:32  39  ,att35 eur_att35
20:48:32  40  ,att36 eur_att36
20:48:32  41  ,att37 eur_att37
20:48:32  42  FROM svm6162
20:48:32  43  /

Table created.

Elapsed: 00:00:00.16
20:48:32 SQL> 
20:48:32 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.43
20:48:32 SQL> 
20:48:32 SQL> -- rpt
20:48:32 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19556

Elapsed: 00:00:00.86
20:48:33 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     19556

Elapsed: 00:00:00.01
20:48:33 SQL> 
20:48:33 SQL> --
20:48:33 SQL> -- aud610.sql
20:48:33 SQL> --
20:48:33 SQL> 
20:48:33 SQL> -- Creates views and tables for backtesting a forex SVM strategy
20:48:33 SQL> 
20:48:33 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.67
20:48:34 SQL> 
20:48:34 SQL> -- I created di5min here:
20:48:34 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
20:48:34 SQL> 
20:48:34 SQL> CREATE OR REPLACE VIEW svm6102 AS
20:48:34   2  SELECT
20:48:34   3  pair
20:48:34   4  ,ydate
20:48:34   5  ,prdate
20:48:34   6  ,rownum rnum -- acts as t in my time-series
20:48:34   7  ,clse
20:48:34   8  -- Derive a bunch of attributes from clse, the latest price:
20:48:34   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
20:48:34  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
20:48:34  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
20:48:34  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
20:48:34  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
20:48:34  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
20:48:34  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
20:48:34  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
20:48:34  17  --
20:48:34  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
20:48:34  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
20:48:34  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
20:48:34  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
20:48:34  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
20:48:34  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
20:48:34  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
20:48:34  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
20:48:34  26  --
20:48:34  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
20:48:34  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
20:48:34  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
20:48:34  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
20:48:34  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
20:48:34  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
20:48:34  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
20:48:34  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
20:48:34  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
20:48:34  36  FROM di5min WHERE pair LIKE'%aud%'
20:48:34  37  AND ydate > sysdate - 95
20:48:34  38  ORDER BY ydate
20:48:34  39  /

View created.

Elapsed: 00:00:00.05
20:48:34 SQL> 
20:48:34 SQL> -- rpt
20:48:34 SQL> 
20:48:34 SQL> SELECT
20:48:34   2  pair
20:48:34   3  ,COUNT(pair)
20:48:34   4  ,MIN(clse),MAX(clse)
20:48:34   5  ,MIN(avg6),MAX(avg6)
20:48:34   6  ,MIN(ydate),MAX(ydate)
20:48:34   7  FROM svm6102
20:48:34   8  GROUP BY pair
20:48:34   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
aud_usd       19553	.95405	   1.0183 .957141438 1.01583373 2010-09-26 20:55:01 2010-12-29 20:40:00

Elapsed: 00:00:00.87
20:48:35 SQL> 
20:48:35 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
20:48:35 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.18
20:48:35 SQL> CREATE TABLE svm6122 COMPRESS AS
20:48:35   2  SELECT
20:48:35   3  pair
20:48:35   4  ,ydate
20:48:35   5  ,prdate
20:48:35   6  ,clse
20:48:35   7  -- g6 is important. I want to predict g6:
20:48:35   8  ,ld6 - clse g6
20:48:35   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
20:48:35  10  -- I want more attributes from the ones I derived above:
20:48:35  11  -- clse relation to moving-min
20:48:35  12  ,clse-min4  cm4
20:48:35  13  ,clse-min6  cm6
20:48:35  14  ,clse-min8  cm8
20:48:35  15  ,clse-min10 cm10
20:48:35  16  ,clse-min12 cm12
20:48:35  17  ,clse-min14 cm14
20:48:35  18  ,clse-min16 cm16
20:48:35  19  ,clse-min18 cm18
20:48:35  20  -- clse relation to moving-avg
20:48:35  21  ,clse-avg4  ca4
20:48:35  22  ,clse-avg6  ca6
20:48:35  23  ,clse-avg8  ca8
20:48:35  24  ,clse-avg10 ca10
20:48:35  25  ,clse-avg12 ca12
20:48:35  26  ,clse-avg14 ca14
20:48:35  27  ,clse-avg16 ca16
20:48:35  28  ,clse-avg18 ca18
20:48:35  29  -- clse relation to moving-max
20:48:35  30  ,clse-max4  cx4
20:48:35  31  ,clse-max6  cx6
20:48:35  32  ,clse-max8  cx8
20:48:35  33  ,clse-max10 cx10
20:48:35  34  ,clse-max12 cx12
20:48:35  35  ,clse-max14 cx14
20:48:35  36  ,clse-max16 cx16
20:48:35  37  ,clse-max18 cx18
20:48:35  38  -- Derive more attributes.
20:48:35  39  -- I want to use CORR() here to help SVM see the shape of the series.
20:48:35  40  -- But COVAR_POP is more stable:
20:48:35  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
20:48:35  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
20:48:35  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
20:48:35  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
20:48:35  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
20:48:35  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
20:48:35  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
20:48:35  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
20:48:35  49  -- Derive date related attributes:
20:48:35  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
20:48:35  51  ,0+TO_CHAR(ydate,'D')d
20:48:35  52  ,0+TO_CHAR(ydate,'W')w
20:48:35  53  -- mpm stands for minutes-past-midnight:
20:48:35  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
20:48:35  55  -- mph stands for minutes-past-hour:
20:48:35  56  ,0+TO_CHAR(ydate,'MI')mph
20:48:35  57  FROM svm6102
20:48:35  58  ORDER BY ydate
20:48:35  59  /

Table created.

Elapsed: 00:00:02.06
20:48:37 SQL> 
20:48:37 SQL> -- rpt
20:48:37 SQL> 
20:48:37 SQL> SELECT
20:48:37   2  pair
20:48:37   3  ,COUNT(pair)
20:48:37   4  ,MIN(clse),MAX(clse)
20:48:37   5  ,MIN(ydate),MAX(ydate)
20:48:37   6  FROM svm6122
20:48:37   7  GROUP BY pair
20:48:37   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
aud_usd       19553	.95405	   1.0183 2010-09-26 20:55:01 2010-12-29 20:40:00

Elapsed: 00:00:00.11
20:48:37 SQL> 
20:48:37 SQL> -- Prepare for derivation of NTILE based params:
20:48:37 SQL> 
20:48:37 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.27
20:48:37 SQL> CREATE TABLE svm6142 COMPRESS AS
20:48:37   2  SELECT
20:48:37   3  pair
20:48:37   4  ,ydate
20:48:37   5  ,prdate
20:48:37   6  ,clse
20:48:37   7  ,g6
20:48:37   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
20:48:37   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
20:48:37  10  ,CASE WHEN trend IS NULL THEN 1
20:48:37  11  	    WHEN trend =0      THEN 1
20:48:37  12  	    ELSE trend END trend
20:48:37  13  ,cm4
20:48:37  14  ,cm6
20:48:37  15  ,cm8
20:48:37  16  ,cm10
20:48:37  17  ,cm12
20:48:37  18  ,cm14
20:48:37  19  ,cm16
20:48:37  20  ,cm18
20:48:37  21  --
20:48:37  22  ,ca4
20:48:37  23  ,ca6
20:48:37  24  ,ca8
20:48:37  25  ,ca10
20:48:37  26  ,ca12
20:48:37  27  ,ca14
20:48:37  28  ,ca16
20:48:37  29  ,ca18
20:48:37  30  --
20:48:37  31  ,cx4
20:48:37  32  ,cx6
20:48:37  33  ,cx8
20:48:37  34  ,cx10
20:48:37  35  ,cx12
20:48:37  36  ,cx14
20:48:37  37  ,cx16
20:48:37  38  ,cx18
20:48:37  39  --
20:48:37  40  ,crr4
20:48:37  41  ,crr6
20:48:37  42  ,crr8
20:48:37  43  ,crr10
20:48:37  44  ,crr12
20:48:37  45  ,crr14
20:48:37  46  ,crr16
20:48:37  47  ,crr18
20:48:37  48  --
20:48:37  49  ,hh
20:48:37  50  ,d
20:48:37  51  ,w
20:48:37  52  ,mpm
20:48:37  53  ,mph
20:48:37  54  FROM svm6122
20:48:37  55  ORDER BY ydate
20:48:37  56  /

Table created.

Elapsed: 00:00:00.36
20:48:38 SQL> 
20:48:38 SQL> -- rpt
20:48:38 SQL> 
20:48:38 SQL> SELECT
20:48:38   2  pair
20:48:38   3  ,trend
20:48:38   4  ,gatt
20:48:38   5  ,COUNT(pair)
20:48:38   6  ,AVG(g6)
20:48:38   7  FROM svm6142
20:48:38   8  GROUP BY pair,trend,gatt
20:48:38   9  ORDER BY pair,trend,gatt
20:48:38  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5198 -.00212209
aud_usd 	-1 up	      3809 .003727245
aud_usd 	-1		 9
aud_usd 	 1 nup	      6736 -.00211534
aud_usd 	 1 up	      3738 .004046164
aud_usd 	 1		63

6 rows selected.

Elapsed: 00:00:00.07
20:48:38 SQL> 
20:48:38 SQL> 
20:48:38 SQL> -- Derive NTILE based params:
20:48:38 SQL> 
20:48:38 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.19
20:48:38 SQL> CREATE TABLE svm6162 COMPRESS AS
20:48:38   2  SELECT
20:48:38   3  pair
20:48:38   4  ,ydate
20:48:38   5  ,prdate
20:48:38   6  ,clse
20:48:38   7  ,g6
20:48:38   8  ,gatt
20:48:38   9  ,gattn
20:48:38  10  ,trend
20:48:38  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
20:48:38  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
20:48:38  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
20:48:38  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
20:48:38  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
20:48:38  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
20:48:38  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
20:48:38  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
20:48:38  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
20:48:38  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
20:48:38  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
20:48:38  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
20:48:38  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
20:48:38  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
20:48:38  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
20:48:38  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
20:48:38  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
20:48:38  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
20:48:38  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
20:48:38  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
20:48:38  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
20:48:38  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
20:48:38  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
20:48:38  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
20:48:38  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
20:48:38  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
20:48:38  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
20:48:38  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
20:48:38  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
20:48:38  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
20:48:38  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
20:48:38  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
20:48:38  43  ,hh  att32
20:48:38  44  ,d   att33
20:48:38  45  ,w   att34
20:48:38  46  ,mpm att35
20:48:38  47  ,mph att36
20:48:38  48  ,trend att37
20:48:38  49  FROM svm6142
20:48:38  50  ORDER BY ydate
20:48:38  51  /

Table created.

Elapsed: 00:00:04.83
20:48:43 SQL> 
20:48:43 SQL> -- rpt
20:48:43 SQL> 
20:48:43 SQL> SELECT
20:48:43   2  pair
20:48:43   3  ,trend
20:48:43   4  ,gatt
20:48:43   5  ,COUNT(pair)
20:48:43   6  ,AVG(g6)
20:48:43   7  FROM svm6162
20:48:43   8  GROUP BY pair,trend,gatt
20:48:43   9  ORDER BY pair,trend,gatt
20:48:43  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5198 -.00212209
aud_usd 	-1 up	      3809 .003727245
aud_usd 	-1		 9
aud_usd 	 1 nup	      6736 -.00211534
aud_usd 	 1 up	      3738 .004046164
aud_usd 	 1		63

6 rows selected.

Elapsed: 00:00:00.03
20:48:43 SQL> 
20:48:43 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.18
20:48:43 SQL> CREATE TABLE modsrc COMPRESS AS
20:48:43   2  SELECT
20:48:43   3  pair
20:48:43   4  ,ydate
20:48:43   5  ,prdate
20:48:43   6  ,trend
20:48:43   7  ,g6
20:48:43   8  ,gatt
20:48:43   9  ,gattn
20:48:43  10  FROM svm6162
20:48:43  11  /

Table created.

Elapsed: 00:00:00.08
20:48:43 SQL> 
20:48:43 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
20:48:43 SQL> 
20:48:43 SQL> DROP   TABLE aud_ms610 ;

Table dropped.

Elapsed: 00:00:00.06
20:48:43 SQL> CREATE TABLE aud_ms610 COMPRESS AS
20:48:43   2  SELECT
20:48:43   3  ydate
20:48:43   4  ,trend aud_trend
20:48:43   5  ,g6    aud_g6
20:48:43   6  ,gatt  aud_gatt
20:48:43   7  ,gattn aud_gattn
20:48:43   8  FROM modsrc
20:48:43   9  /

Table created.

Elapsed: 00:00:00.07
20:48:44 SQL> 
20:48:44 SQL> ANALYZE TABLE aud_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
20:48:44 SQL> 
20:48:44 SQL> -- I need a copy of the attributes:
20:48:44 SQL> 
20:48:44 SQL> 
20:48:44 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.05
20:48:44 SQL> CREATE TABLE aud_att COMPRESS AS
20:48:44   2  SELECT
20:48:44   3  ydate
20:48:44   4  ,att00 aud_att00
20:48:44   5  ,att01 aud_att01
20:48:44   6  ,att02 aud_att02
20:48:44   7  ,att03 aud_att03
20:48:44   8  ,att04 aud_att04
20:48:44   9  ,att05 aud_att05
20:48:44  10  ,att06 aud_att06
20:48:44  11  ,att07 aud_att07
20:48:44  12  ,att08 aud_att08
20:48:44  13  ,att09 aud_att09
20:48:44  14  ,att10 aud_att10
20:48:44  15  ,att11 aud_att11
20:48:44  16  ,att12 aud_att12
20:48:44  17  ,att13 aud_att13
20:48:44  18  ,att14 aud_att14
20:48:44  19  ,att15 aud_att15
20:48:44  20  ,att16 aud_att16
20:48:44  21  ,att17 aud_att17
20:48:44  22  ,att18 aud_att18
20:48:44  23  ,att19 aud_att19
20:48:44  24  ,att20 aud_att20
20:48:44  25  ,att21 aud_att21
20:48:44  26  ,att22 aud_att22
20:48:44  27  ,att23 aud_att23
20:48:44  28  ,att24 aud_att24
20:48:44  29  ,att25 aud_att25
20:48:44  30  ,att26 aud_att26
20:48:44  31  ,att27 aud_att27
20:48:44  32  ,att28 aud_att28
20:48:44  33  ,att29 aud_att29
20:48:44  34  ,att30 aud_att30
20:48:44  35  ,att31 aud_att31
20:48:44  36  ,att32 aud_att32
20:48:44  37  ,att33 aud_att33
20:48:44  38  ,att34 aud_att34
20:48:44  39  ,att35 aud_att35
20:48:44  40  ,att36 aud_att36
20:48:44  41  ,att37 aud_att37
20:48:44  42  FROM svm6162
20:48:44  43  /

Table created.

Elapsed: 00:00:00.22
20:48:44 SQL> 
20:48:44 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
20:48:44 SQL> 
20:48:44 SQL> -- rpt
20:48:44 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19553

Elapsed: 00:00:00.86
20:48:45 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     19553

Elapsed: 00:00:00.00
20:48:45 SQL> 
20:48:45 SQL> --
20:48:45 SQL> -- gbp610.sql
20:48:45 SQL> --
20:48:45 SQL> 
20:48:45 SQL> -- Creates views and tables for backtesting a forex SVM strategy
20:48:45 SQL> 
20:48:45 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.56
20:48:46 SQL> 
20:48:46 SQL> -- I created di5min here:
20:48:46 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
20:48:46 SQL> 
20:48:46 SQL> CREATE OR REPLACE VIEW svm6102 AS
20:48:46   2  SELECT
20:48:46   3  pair
20:48:46   4  ,ydate
20:48:46   5  ,prdate
20:48:46   6  ,rownum rnum -- acts as t in my time-series
20:48:46   7  ,clse
20:48:46   8  -- Derive a bunch of attributes from clse, the latest price:
20:48:46   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
20:48:46  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
20:48:46  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
20:48:46  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
20:48:46  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
20:48:46  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
20:48:46  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
20:48:46  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
20:48:46  17  --
20:48:46  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
20:48:46  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
20:48:46  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
20:48:46  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
20:48:46  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
20:48:46  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
20:48:46  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
20:48:46  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
20:48:46  26  --
20:48:46  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
20:48:46  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
20:48:46  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
20:48:46  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
20:48:46  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
20:48:46  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
20:48:46  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
20:48:46  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
20:48:46  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
20:48:46  36  FROM di5min WHERE pair LIKE'%gbp%'
20:48:46  37  AND ydate > sysdate - 95
20:48:46  38  ORDER BY ydate
20:48:46  39  /

View created.

Elapsed: 00:00:00.05
20:48:46 SQL> 
20:48:46 SQL> -- rpt
20:48:46 SQL> 
20:48:46 SQL> SELECT
20:48:46   2  pair
20:48:46   3  ,COUNT(pair)
20:48:46   4  ,MIN(clse),MAX(clse)
20:48:46   5  ,MIN(avg6),MAX(avg6)
20:48:46   6  ,MIN(ydate),MAX(ydate)
20:48:46   7  FROM svm6102
20:48:46   8  GROUP BY pair
20:48:46   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
gbp_usd       19556   1.535325	   1.6295 1.53696747 1.62716986 2010-09-26 20:55:01 2010-12-29 20:45:00

Elapsed: 00:00:00.86
20:48:47 SQL> 
20:48:47 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
20:48:47 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.19
20:48:47 SQL> CREATE TABLE svm6122 COMPRESS AS
20:48:47   2  SELECT
20:48:47   3  pair
20:48:47   4  ,ydate
20:48:47   5  ,prdate
20:48:47   6  ,clse
20:48:47   7  -- g6 is important. I want to predict g6:
20:48:47   8  ,ld6 - clse g6
20:48:47   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
20:48:47  10  -- I want more attributes from the ones I derived above:
20:48:47  11  -- clse relation to moving-min
20:48:47  12  ,clse-min4  cm4
20:48:47  13  ,clse-min6  cm6
20:48:47  14  ,clse-min8  cm8
20:48:47  15  ,clse-min10 cm10
20:48:47  16  ,clse-min12 cm12
20:48:47  17  ,clse-min14 cm14
20:48:47  18  ,clse-min16 cm16
20:48:47  19  ,clse-min18 cm18
20:48:47  20  -- clse relation to moving-avg
20:48:47  21  ,clse-avg4  ca4
20:48:47  22  ,clse-avg6  ca6
20:48:47  23  ,clse-avg8  ca8
20:48:47  24  ,clse-avg10 ca10
20:48:47  25  ,clse-avg12 ca12
20:48:47  26  ,clse-avg14 ca14
20:48:47  27  ,clse-avg16 ca16
20:48:47  28  ,clse-avg18 ca18
20:48:47  29  -- clse relation to moving-max
20:48:47  30  ,clse-max4  cx4
20:48:47  31  ,clse-max6  cx6
20:48:47  32  ,clse-max8  cx8
20:48:47  33  ,clse-max10 cx10
20:48:47  34  ,clse-max12 cx12
20:48:47  35  ,clse-max14 cx14
20:48:47  36  ,clse-max16 cx16
20:48:47  37  ,clse-max18 cx18
20:48:47  38  -- Derive more attributes.
20:48:47  39  -- I want to use CORR() here to help SVM see the shape of the series.
20:48:47  40  -- But COVAR_POP is more stable:
20:48:47  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
20:48:47  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
20:48:47  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
20:48:47  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
20:48:47  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
20:48:47  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
20:48:47  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
20:48:47  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
20:48:47  49  -- Derive date related attributes:
20:48:47  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
20:48:47  51  ,0+TO_CHAR(ydate,'D')d
20:48:47  52  ,0+TO_CHAR(ydate,'W')w
20:48:47  53  -- mpm stands for minutes-past-midnight:
20:48:47  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
20:48:47  55  -- mph stands for minutes-past-hour:
20:48:47  56  ,0+TO_CHAR(ydate,'MI')mph
20:48:47  57  FROM svm6102
20:48:47  58  ORDER BY ydate
20:48:47  59  /

Table created.

Elapsed: 00:00:02.01
20:48:49 SQL> 
20:48:49 SQL> -- rpt
20:48:49 SQL> 
20:48:49 SQL> SELECT
20:48:49   2  pair
20:48:49   3  ,COUNT(pair)
20:48:49   4  ,MIN(clse),MAX(clse)
20:48:49   5  ,MIN(ydate),MAX(ydate)
20:48:49   6  FROM svm6122
20:48:49   7  GROUP BY pair
20:48:49   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
gbp_usd       19556   1.535325	   1.6295 2010-09-26 20:55:01 2010-12-29 20:45:00

Elapsed: 00:00:00.08
20:48:49 SQL> 
20:48:49 SQL> -- Prepare for derivation of NTILE based params:
20:48:49 SQL> 
20:48:49 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.40
20:48:49 SQL> CREATE TABLE svm6142 COMPRESS AS
20:48:49   2  SELECT
20:48:49   3  pair
20:48:49   4  ,ydate
20:48:49   5  ,prdate
20:48:49   6  ,clse
20:48:49   7  ,g6
20:48:49   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
20:48:49   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
20:48:49  10  ,CASE WHEN trend IS NULL THEN 1
20:48:49  11  	    WHEN trend =0      THEN 1
20:48:49  12  	    ELSE trend END trend
20:48:49  13  ,cm4
20:48:49  14  ,cm6
20:48:49  15  ,cm8
20:48:49  16  ,cm10
20:48:49  17  ,cm12
20:48:49  18  ,cm14
20:48:49  19  ,cm16
20:48:49  20  ,cm18
20:48:49  21  --
20:48:49  22  ,ca4
20:48:49  23  ,ca6
20:48:49  24  ,ca8
20:48:49  25  ,ca10
20:48:49  26  ,ca12
20:48:49  27  ,ca14
20:48:49  28  ,ca16
20:48:49  29  ,ca18
20:48:49  30  --
20:48:49  31  ,cx4
20:48:49  32  ,cx6
20:48:49  33  ,cx8
20:48:49  34  ,cx10
20:48:49  35  ,cx12
20:48:49  36  ,cx14
20:48:49  37  ,cx16
20:48:49  38  ,cx18
20:48:49  39  --
20:48:49  40  ,crr4
20:48:49  41  ,crr6
20:48:49  42  ,crr8
20:48:49  43  ,crr10
20:48:49  44  ,crr12
20:48:49  45  ,crr14
20:48:49  46  ,crr16
20:48:49  47  ,crr18
20:48:49  48  --
20:48:49  49  ,hh
20:48:49  50  ,d
20:48:49  51  ,w
20:48:49  52  ,mpm
20:48:49  53  ,mph
20:48:49  54  FROM svm6122
20:48:49  55  ORDER BY ydate
20:48:49  56  /

Table created.

Elapsed: 00:00:00.36
20:48:50 SQL> 
20:48:50 SQL> -- rpt
20:48:50 SQL> 
20:48:50 SQL> SELECT
20:48:50   2  pair
20:48:50   3  ,trend
20:48:50   4  ,gatt
20:48:50   5  ,COUNT(pair)
20:48:50   6  ,AVG(g6)
20:48:50   7  FROM svm6142
20:48:50   8  GROUP BY pair,trend,gatt
20:48:50   9  ORDER BY pair,trend,gatt
20:48:50  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6295 -.00256031
gbp_usd 	-1 up	      3579 .004286117
gbp_usd 	 1 nup	      6206 -.00268133
gbp_usd 	 1 up	      3404 .004380402
gbp_usd 	 1		72

Elapsed: 00:00:00.04
20:48:50 SQL> 
20:48:50 SQL> 
20:48:50 SQL> -- Derive NTILE based params:
20:48:50 SQL> 
20:48:50 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.13
20:48:50 SQL> CREATE TABLE svm6162 COMPRESS AS
20:48:50   2  SELECT
20:48:50   3  pair
20:48:50   4  ,ydate
20:48:50   5  ,prdate
20:48:50   6  ,clse
20:48:50   7  ,g6
20:48:50   8  ,gatt
20:48:50   9  ,gattn
20:48:50  10  ,trend
20:48:50  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
20:48:50  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
20:48:50  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
20:48:50  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
20:48:50  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
20:48:50  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
20:48:50  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
20:48:50  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
20:48:50  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
20:48:50  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
20:48:50  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
20:48:50  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
20:48:50  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
20:48:50  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
20:48:50  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
20:48:50  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
20:48:50  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
20:48:50  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
20:48:50  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
20:48:50  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
20:48:50  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
20:48:50  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
20:48:50  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
20:48:50  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
20:48:50  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
20:48:50  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
20:48:50  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
20:48:50  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
20:48:50  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
20:48:50  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
20:48:50  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
20:48:50  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
20:48:50  43  ,hh  att32
20:48:50  44  ,d   att33
20:48:50  45  ,w   att34
20:48:50  46  ,mpm att35
20:48:50  47  ,mph att36
20:48:50  48  ,trend att37
20:48:50  49  FROM svm6142
20:48:50  50  ORDER BY ydate
20:48:50  51  /

Table created.

Elapsed: 00:00:04.66
20:48:55 SQL> 
20:48:55 SQL> -- rpt
20:48:55 SQL> 
20:48:55 SQL> SELECT
20:48:55   2  pair
20:48:55   3  ,trend
20:48:55   4  ,gatt
20:48:55   5  ,COUNT(pair)
20:48:55   6  ,AVG(g6)
20:48:55   7  FROM svm6162
20:48:55   8  GROUP BY pair,trend,gatt
20:48:55   9  ORDER BY pair,trend,gatt
20:48:55  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6295 -.00256031
gbp_usd 	-1 up	      3579 .004286117
gbp_usd 	 1 nup	      6206 -.00268133
gbp_usd 	 1 up	      3404 .004380402
gbp_usd 	 1		72

Elapsed: 00:00:00.03
20:48:55 SQL> 
20:48:55 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
20:48:55 SQL> CREATE TABLE modsrc COMPRESS AS
20:48:55   2  SELECT
20:48:55   3  pair
20:48:55   4  ,ydate
20:48:55   5  ,prdate
20:48:55   6  ,trend
20:48:55   7  ,g6
20:48:55   8  ,gatt
20:48:55   9  ,gattn
20:48:55  10  FROM svm6162
20:48:55  11  /

Table created.

Elapsed: 00:00:00.08
20:48:55 SQL> 
20:48:55 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
20:48:55 SQL> 
20:48:55 SQL> DROP   TABLE gbp_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
20:48:55 SQL> CREATE TABLE gbp_ms610 COMPRESS AS
20:48:55   2  SELECT
20:48:55   3  ydate
20:48:55   4  ,trend gbp_trend
20:48:55   5  ,g6    gbp_g6
20:48:55   6  ,gatt  gbp_gatt
20:48:55   7  ,gattn gbp_gattn
20:48:55   8  FROM modsrc
20:48:55   9  /

Table created.

Elapsed: 00:00:00.06
20:48:55 SQL> 
20:48:55 SQL> ANALYZE TABLE gbp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
20:48:55 SQL> 
20:48:55 SQL> -- I need a copy of the attributes:
20:48:55 SQL> 
20:48:55 SQL> 
20:48:55 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.09
20:48:55 SQL> CREATE TABLE gbp_att COMPRESS AS
20:48:55   2  SELECT
20:48:55   3  ydate
20:48:55   4  ,att00 gbp_att00
20:48:55   5  ,att01 gbp_att01
20:48:55   6  ,att02 gbp_att02
20:48:55   7  ,att03 gbp_att03
20:48:55   8  ,att04 gbp_att04
20:48:55   9  ,att05 gbp_att05
20:48:55  10  ,att06 gbp_att06
20:48:55  11  ,att07 gbp_att07
20:48:55  12  ,att08 gbp_att08
20:48:55  13  ,att09 gbp_att09
20:48:55  14  ,att10 gbp_att10
20:48:55  15  ,att11 gbp_att11
20:48:55  16  ,att12 gbp_att12
20:48:55  17  ,att13 gbp_att13
20:48:55  18  ,att14 gbp_att14
20:48:55  19  ,att15 gbp_att15
20:48:55  20  ,att16 gbp_att16
20:48:55  21  ,att17 gbp_att17
20:48:55  22  ,att18 gbp_att18
20:48:55  23  ,att19 gbp_att19
20:48:55  24  ,att20 gbp_att20
20:48:55  25  ,att21 gbp_att21
20:48:55  26  ,att22 gbp_att22
20:48:55  27  ,att23 gbp_att23
20:48:55  28  ,att24 gbp_att24
20:48:55  29  ,att25 gbp_att25
20:48:55  30  ,att26 gbp_att26
20:48:55  31  ,att27 gbp_att27
20:48:55  32  ,att28 gbp_att28
20:48:55  33  ,att29 gbp_att29
20:48:55  34  ,att30 gbp_att30
20:48:55  35  ,att31 gbp_att31
20:48:55  36  ,att32 gbp_att32
20:48:55  37  ,att33 gbp_att33
20:48:55  38  ,att34 gbp_att34
20:48:55  39  ,att35 gbp_att35
20:48:55  40  ,att36 gbp_att36
20:48:55  41  ,att37 gbp_att37
20:48:55  42  FROM svm6162
20:48:55  43  /

Table created.

Elapsed: 00:00:00.20
20:48:56 SQL> 
20:48:56 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.50
20:48:56 SQL> 
20:48:56 SQL> -- rpt
20:48:56 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19556

Elapsed: 00:00:00.83
20:48:57 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     19556

Elapsed: 00:00:00.00
20:48:57 SQL> 
20:48:57 SQL> --
20:48:57 SQL> -- jpy610.sql
20:48:57 SQL> --
20:48:57 SQL> 
20:48:57 SQL> -- Creates views and tables for backtesting a forex SVM strategy
20:48:57 SQL> 
20:48:57 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.36
20:48:57 SQL> 
20:48:57 SQL> -- I created di5min here:
20:48:57 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
20:48:57 SQL> 
20:48:57 SQL> CREATE OR REPLACE VIEW svm6102 AS
20:48:57   2  SELECT
20:48:57   3  pair
20:48:57   4  ,ydate
20:48:57   5  ,prdate
20:48:57   6  ,rownum rnum -- acts as t in my time-series
20:48:57   7  ,clse
20:48:57   8  -- Derive a bunch of attributes from clse, the latest price:
20:48:57   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
20:48:57  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
20:48:57  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
20:48:57  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
20:48:57  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
20:48:57  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
20:48:57  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
20:48:57  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
20:48:57  17  --
20:48:57  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
20:48:57  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
20:48:57  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
20:48:57  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
20:48:57  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
20:48:57  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
20:48:57  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
20:48:57  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
20:48:57  26  --
20:48:57  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
20:48:57  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
20:48:57  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
20:48:57  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
20:48:57  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
20:48:57  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
20:48:57  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
20:48:57  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
20:48:57  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
20:48:57  36  FROM di5min WHERE pair LIKE'%jpy%'
20:48:57  37  AND ydate > sysdate - 95
20:48:57  38  ORDER BY ydate
20:48:57  39  /

View created.

Elapsed: 00:00:00.04
20:48:57 SQL> 
20:48:57 SQL> -- rpt
20:48:57 SQL> 
20:48:57 SQL> SELECT
20:48:57   2  pair
20:48:57   3  ,COUNT(pair)
20:48:57   4  ,MIN(clse),MAX(clse)
20:48:57   5  ,MIN(avg6),MAX(avg6)
20:48:57   6  ,MIN(ydate),MAX(ydate)
20:48:57   7  FROM svm6102
20:48:57   8  GROUP BY pair
20:48:57   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_jpy       19553	 80.25	   84.485 80.3595205 84.3105479 2010-09-26 20:55:01 2010-12-29 20:45:00

Elapsed: 00:00:00.90
20:48:58 SQL> 
20:48:58 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
20:48:58 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.26
20:48:58 SQL> CREATE TABLE svm6122 COMPRESS AS
20:48:58   2  SELECT
20:48:58   3  pair
20:48:58   4  ,ydate
20:48:58   5  ,prdate
20:48:58   6  ,clse
20:48:58   7  -- g6 is important. I want to predict g6:
20:48:58   8  ,ld6 - clse g6
20:48:58   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
20:48:58  10  -- I want more attributes from the ones I derived above:
20:48:58  11  -- clse relation to moving-min
20:48:58  12  ,clse-min4  cm4
20:48:58  13  ,clse-min6  cm6
20:48:58  14  ,clse-min8  cm8
20:48:58  15  ,clse-min10 cm10
20:48:58  16  ,clse-min12 cm12
20:48:58  17  ,clse-min14 cm14
20:48:58  18  ,clse-min16 cm16
20:48:58  19  ,clse-min18 cm18
20:48:58  20  -- clse relation to moving-avg
20:48:58  21  ,clse-avg4  ca4
20:48:58  22  ,clse-avg6  ca6
20:48:58  23  ,clse-avg8  ca8
20:48:58  24  ,clse-avg10 ca10
20:48:58  25  ,clse-avg12 ca12
20:48:58  26  ,clse-avg14 ca14
20:48:58  27  ,clse-avg16 ca16
20:48:58  28  ,clse-avg18 ca18
20:48:58  29  -- clse relation to moving-max
20:48:58  30  ,clse-max4  cx4
20:48:58  31  ,clse-max6  cx6
20:48:58  32  ,clse-max8  cx8
20:48:58  33  ,clse-max10 cx10
20:48:58  34  ,clse-max12 cx12
20:48:58  35  ,clse-max14 cx14
20:48:58  36  ,clse-max16 cx16
20:48:58  37  ,clse-max18 cx18
20:48:58  38  -- Derive more attributes.
20:48:58  39  -- I want to use CORR() here to help SVM see the shape of the series.
20:48:58  40  -- But COVAR_POP is more stable:
20:48:58  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
20:48:58  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
20:48:58  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
20:48:58  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
20:48:58  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
20:48:58  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
20:48:58  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
20:48:59  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
20:48:59  49  -- Derive date related attributes:
20:48:59  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
20:48:59  51  ,0+TO_CHAR(ydate,'D')d
20:48:59  52  ,0+TO_CHAR(ydate,'W')w
20:48:59  53  -- mpm stands for minutes-past-midnight:
20:48:59  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
20:48:59  55  -- mph stands for minutes-past-hour:
20:48:59  56  ,0+TO_CHAR(ydate,'MI')mph
20:48:59  57  FROM svm6102
20:48:59  58  ORDER BY ydate
20:48:59  59  /

Table created.

Elapsed: 00:00:02.07
20:49:01 SQL> 
20:49:01 SQL> -- rpt
20:49:01 SQL> 
20:49:01 SQL> SELECT
20:49:01   2  pair
20:49:01   3  ,COUNT(pair)
20:49:01   4  ,MIN(clse),MAX(clse)
20:49:01   5  ,MIN(ydate),MAX(ydate)
20:49:01   6  FROM svm6122
20:49:01   7  GROUP BY pair
20:49:01   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_jpy       19553	 80.25	   84.485 2010-09-26 20:55:01 2010-12-29 20:45:00

Elapsed: 00:00:00.09
20:49:01 SQL> 
20:49:01 SQL> -- Prepare for derivation of NTILE based params:
20:49:01 SQL> 
20:49:01 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.31
20:49:01 SQL> CREATE TABLE svm6142 COMPRESS AS
20:49:01   2  SELECT
20:49:01   3  pair
20:49:01   4  ,ydate
20:49:01   5  ,prdate
20:49:01   6  ,clse
20:49:01   7  ,g6
20:49:01   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
20:49:01   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
20:49:01  10  ,CASE WHEN trend IS NULL THEN 1
20:49:01  11  	    WHEN trend =0      THEN 1
20:49:01  12  	    ELSE trend END trend
20:49:01  13  ,cm4
20:49:01  14  ,cm6
20:49:01  15  ,cm8
20:49:01  16  ,cm10
20:49:01  17  ,cm12
20:49:01  18  ,cm14
20:49:01  19  ,cm16
20:49:01  20  ,cm18
20:49:01  21  --
20:49:01  22  ,ca4
20:49:01  23  ,ca6
20:49:01  24  ,ca8
20:49:01  25  ,ca10
20:49:01  26  ,ca12
20:49:01  27  ,ca14
20:49:01  28  ,ca16
20:49:01  29  ,ca18
20:49:01  30  --
20:49:01  31  ,cx4
20:49:01  32  ,cx6
20:49:01  33  ,cx8
20:49:01  34  ,cx10
20:49:01  35  ,cx12
20:49:01  36  ,cx14
20:49:01  37  ,cx16
20:49:01  38  ,cx18
20:49:01  39  --
20:49:01  40  ,crr4
20:49:01  41  ,crr6
20:49:01  42  ,crr8
20:49:01  43  ,crr10
20:49:01  44  ,crr12
20:49:01  45  ,crr14
20:49:01  46  ,crr16
20:49:01  47  ,crr18
20:49:01  48  --
20:49:01  49  ,hh
20:49:01  50  ,d
20:49:01  51  ,w
20:49:01  52  ,mpm
20:49:01  53  ,mph
20:49:01  54  FROM svm6122
20:49:01  55  ORDER BY ydate
20:49:01  56  /

Table created.

Elapsed: 00:00:00.35
20:49:01 SQL> 
20:49:01 SQL> -- rpt
20:49:01 SQL> 
20:49:01 SQL> SELECT
20:49:01   2  pair
20:49:01   3  ,trend
20:49:01   4  ,gatt
20:49:01   5  ,COUNT(pair)
20:49:01   6  ,AVG(g6)
20:49:01   7  FROM svm6142
20:49:01   8  GROUP BY pair,trend,gatt
20:49:01   9  ORDER BY pair,trend,gatt
20:49:01  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5253 -.16388287
usd_jpy 	-1 up	      4960 .163122068
usd_jpy 	-1		72
usd_jpy 	 1 nup	      5175 -.15491648
usd_jpy 	 1 up	      4093 .165084061

Elapsed: 00:00:00.04
20:49:01 SQL> 
20:49:01 SQL> 
20:49:01 SQL> -- Derive NTILE based params:
20:49:01 SQL> 
20:49:01 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.14
20:49:02 SQL> CREATE TABLE svm6162 COMPRESS AS
20:49:02   2  SELECT
20:49:02   3  pair
20:49:02   4  ,ydate
20:49:02   5  ,prdate
20:49:02   6  ,clse
20:49:02   7  ,g6
20:49:02   8  ,gatt
20:49:02   9  ,gattn
20:49:02  10  ,trend
20:49:02  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
20:49:02  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
20:49:02  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
20:49:02  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
20:49:02  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
20:49:02  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
20:49:02  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
20:49:02  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
20:49:02  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
20:49:02  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
20:49:02  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
20:49:02  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
20:49:02  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
20:49:02  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
20:49:02  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
20:49:02  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
20:49:02  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
20:49:02  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
20:49:02  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
20:49:02  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
20:49:02  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
20:49:02  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
20:49:02  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
20:49:02  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
20:49:02  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
20:49:02  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
20:49:02  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
20:49:02  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
20:49:02  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
20:49:02  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
20:49:02  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
20:49:02  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
20:49:02  43  ,hh  att32
20:49:02  44  ,d   att33
20:49:02  45  ,w   att34
20:49:02  46  ,mpm att35
20:49:02  47  ,mph att36
20:49:02  48  ,trend att37
20:49:02  49  FROM svm6142
20:49:02  50  ORDER BY ydate
20:49:02  51  /

Table created.

Elapsed: 00:00:04.70
20:49:06 SQL> 
20:49:06 SQL> -- rpt
20:49:06 SQL> 
20:49:06 SQL> SELECT
20:49:06   2  pair
20:49:06   3  ,trend
20:49:06   4  ,gatt
20:49:06   5  ,COUNT(pair)
20:49:06   6  ,AVG(g6)
20:49:06   7  FROM svm6162
20:49:06   8  GROUP BY pair,trend,gatt
20:49:06   9  ORDER BY pair,trend,gatt
20:49:06  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5253 -.16388287
usd_jpy 	-1 up	      4960 .163122068
usd_jpy 	-1		72
usd_jpy 	 1 nup	      5175 -.15491648
usd_jpy 	 1 up	      4093 .165084061

Elapsed: 00:00:00.03
20:49:06 SQL> 
20:49:06 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
20:49:06 SQL> CREATE TABLE modsrc COMPRESS AS
20:49:06   2  SELECT
20:49:06   3  pair
20:49:06   4  ,ydate
20:49:06   5  ,prdate
20:49:06   6  ,trend
20:49:06   7  ,g6
20:49:06   8  ,gatt
20:49:06   9  ,gattn
20:49:06  10  FROM svm6162
20:49:06  11  /

Table created.

Elapsed: 00:00:00.11
20:49:06 SQL> 
20:49:06 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
20:49:07 SQL> 
20:49:07 SQL> DROP   TABLE jpy_ms610 ;

Table dropped.

Elapsed: 00:00:00.10
20:49:07 SQL> CREATE TABLE jpy_ms610 COMPRESS AS
20:49:07   2  SELECT
20:49:07   3  ydate
20:49:07   4  ,trend jpy_trend
20:49:07   5  ,g6    jpy_g6
20:49:07   6  ,gatt  jpy_gatt
20:49:07   7  ,gattn jpy_gattn
20:49:07   8  FROM modsrc
20:49:07   9  /

Table created.

Elapsed: 00:00:00.07
20:49:07 SQL> 
20:49:07 SQL> ANALYZE TABLE jpy_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
20:49:07 SQL> 
20:49:07 SQL> -- I need a copy of the attributes:
20:49:07 SQL> 
20:49:07 SQL> 
20:49:07 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.10
20:49:07 SQL> CREATE TABLE jpy_att COMPRESS AS
20:49:07   2  SELECT
20:49:07   3  ydate
20:49:07   4  ,att00 jpy_att00
20:49:07   5  ,att01 jpy_att01
20:49:07   6  ,att02 jpy_att02
20:49:07   7  ,att03 jpy_att03
20:49:07   8  ,att04 jpy_att04
20:49:07   9  ,att05 jpy_att05
20:49:07  10  ,att06 jpy_att06
20:49:07  11  ,att07 jpy_att07
20:49:07  12  ,att08 jpy_att08
20:49:07  13  ,att09 jpy_att09
20:49:07  14  ,att10 jpy_att10
20:49:07  15  ,att11 jpy_att11
20:49:07  16  ,att12 jpy_att12
20:49:07  17  ,att13 jpy_att13
20:49:07  18  ,att14 jpy_att14
20:49:07  19  ,att15 jpy_att15
20:49:07  20  ,att16 jpy_att16
20:49:07  21  ,att17 jpy_att17
20:49:07  22  ,att18 jpy_att18
20:49:07  23  ,att19 jpy_att19
20:49:07  24  ,att20 jpy_att20
20:49:07  25  ,att21 jpy_att21
20:49:07  26  ,att22 jpy_att22
20:49:07  27  ,att23 jpy_att23
20:49:07  28  ,att24 jpy_att24
20:49:07  29  ,att25 jpy_att25
20:49:07  30  ,att26 jpy_att26
20:49:07  31  ,att27 jpy_att27
20:49:07  32  ,att28 jpy_att28
20:49:07  33  ,att29 jpy_att29
20:49:07  34  ,att30 jpy_att30
20:49:07  35  ,att31 jpy_att31
20:49:07  36  ,att32 jpy_att32
20:49:07  37  ,att33 jpy_att33
20:49:07  38  ,att34 jpy_att34
20:49:07  39  ,att35 jpy_att35
20:49:07  40  ,att36 jpy_att36
20:49:07  41  ,att37 jpy_att37
20:49:07  42  FROM svm6162
20:49:07  43  /

Table created.

Elapsed: 00:00:00.15
20:49:07 SQL> 
20:49:07 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.44
20:49:08 SQL> 
20:49:08 SQL> -- rpt
20:49:08 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19553

Elapsed: 00:00:00.89
20:49:09 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     19553

Elapsed: 00:00:00.01
20:49:09 SQL> 
20:49:09 SQL> --
20:49:09 SQL> -- cad610.sql
20:49:09 SQL> --
20:49:09 SQL> 
20:49:09 SQL> -- Creates views and tables for backtesting a forex SVM strategy
20:49:09 SQL> 
20:49:09 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:01.27
20:49:10 SQL> 
20:49:10 SQL> -- I created di5min here:
20:49:10 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
20:49:10 SQL> 
20:49:10 SQL> CREATE OR REPLACE VIEW svm6102 AS
20:49:10   2  SELECT
20:49:10   3  pair
20:49:10   4  ,ydate
20:49:10   5  ,prdate
20:49:10   6  ,rownum rnum -- acts as t in my time-series
20:49:10   7  ,clse
20:49:10   8  -- Derive a bunch of attributes from clse, the latest price:
20:49:10   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
20:49:10  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
20:49:10  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
20:49:10  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
20:49:10  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
20:49:10  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
20:49:10  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
20:49:10  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
20:49:10  17  --
20:49:10  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
20:49:10  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
20:49:10  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
20:49:10  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
20:49:10  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
20:49:10  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
20:49:10  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
20:49:10  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
20:49:10  26  --
20:49:10  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
20:49:10  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
20:49:10  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
20:49:10  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
20:49:10  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
20:49:10  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
20:49:10  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
20:49:10  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
20:49:10  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
20:49:10  36  FROM di5min WHERE pair LIKE'%cad%'
20:49:10  37  AND ydate > sysdate - 95
20:49:10  38  ORDER BY ydate
20:49:10  39  /

View created.

Elapsed: 00:00:00.05
20:49:10 SQL> 
20:49:10 SQL> -- rpt
20:49:10 SQL> 
20:49:10 SQL> SELECT
20:49:10   2  pair
20:49:10   3  ,COUNT(pair)
20:49:10   4  ,MIN(clse),MAX(clse)
20:49:10   5  ,MIN(avg6),MAX(avg6)
20:49:10   6  ,MIN(ydate),MAX(ydate)
20:49:10   7  FROM svm6102
20:49:10   8  GROUP BY pair
20:49:10   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_cad       19553	.99755	    1.036 .998845205 1.03336849 2010-09-26 20:55:01 2010-12-29 20:45:00

Elapsed: 00:00:00.82
20:49:11 SQL> 
20:49:11 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
20:49:11 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.19
20:49:11 SQL> CREATE TABLE svm6122 COMPRESS AS
20:49:11   2  SELECT
20:49:11   3  pair
20:49:11   4  ,ydate
20:49:11   5  ,prdate
20:49:11   6  ,clse
20:49:11   7  -- g6 is important. I want to predict g6:
20:49:11   8  ,ld6 - clse g6
20:49:11   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
20:49:11  10  -- I want more attributes from the ones I derived above:
20:49:11  11  -- clse relation to moving-min
20:49:11  12  ,clse-min4  cm4
20:49:11  13  ,clse-min6  cm6
20:49:11  14  ,clse-min8  cm8
20:49:11  15  ,clse-min10 cm10
20:49:11  16  ,clse-min12 cm12
20:49:11  17  ,clse-min14 cm14
20:49:11  18  ,clse-min16 cm16
20:49:11  19  ,clse-min18 cm18
20:49:11  20  -- clse relation to moving-avg
20:49:11  21  ,clse-avg4  ca4
20:49:11  22  ,clse-avg6  ca6
20:49:11  23  ,clse-avg8  ca8
20:49:11  24  ,clse-avg10 ca10
20:49:11  25  ,clse-avg12 ca12
20:49:11  26  ,clse-avg14 ca14
20:49:11  27  ,clse-avg16 ca16
20:49:11  28  ,clse-avg18 ca18
20:49:11  29  -- clse relation to moving-max
20:49:11  30  ,clse-max4  cx4
20:49:11  31  ,clse-max6  cx6
20:49:11  32  ,clse-max8  cx8
20:49:11  33  ,clse-max10 cx10
20:49:11  34  ,clse-max12 cx12
20:49:11  35  ,clse-max14 cx14
20:49:11  36  ,clse-max16 cx16
20:49:11  37  ,clse-max18 cx18
20:49:11  38  -- Derive more attributes.
20:49:11  39  -- I want to use CORR() here to help SVM see the shape of the series.
20:49:11  40  -- But COVAR_POP is more stable:
20:49:11  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
20:49:11  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
20:49:11  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
20:49:11  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
20:49:11  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
20:49:11  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
20:49:11  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
20:49:11  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
20:49:11  49  -- Derive date related attributes:
20:49:11  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
20:49:11  51  ,0+TO_CHAR(ydate,'D')d
20:49:11  52  ,0+TO_CHAR(ydate,'W')w
20:49:11  53  -- mpm stands for minutes-past-midnight:
20:49:11  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
20:49:11  55  -- mph stands for minutes-past-hour:
20:49:11  56  ,0+TO_CHAR(ydate,'MI')mph
20:49:11  57  FROM svm6102
20:49:11  58  ORDER BY ydate
20:49:11  59  /

Table created.

Elapsed: 00:00:02.10
20:49:13 SQL> 
20:49:13 SQL> -- rpt
20:49:13 SQL> 
20:49:13 SQL> SELECT
20:49:13   2  pair
20:49:13   3  ,COUNT(pair)
20:49:13   4  ,MIN(clse),MAX(clse)
20:49:13   5  ,MIN(ydate),MAX(ydate)
20:49:13   6  FROM svm6122
20:49:13   7  GROUP BY pair
20:49:13   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_cad       19553	.99755	    1.036 2010-09-26 20:55:01 2010-12-29 20:45:00

Elapsed: 00:00:00.07
20:49:13 SQL> 
20:49:13 SQL> -- Prepare for derivation of NTILE based params:
20:49:13 SQL> 
20:49:13 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.32
20:49:13 SQL> CREATE TABLE svm6142 COMPRESS AS
20:49:13   2  SELECT
20:49:13   3  pair
20:49:13   4  ,ydate
20:49:13   5  ,prdate
20:49:13   6  ,clse
20:49:13   7  ,g6
20:49:13   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
20:49:13   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
20:49:13  10  ,CASE WHEN trend IS NULL THEN 1
20:49:13  11  	    WHEN trend =0      THEN 1
20:49:13  12  	    ELSE trend END trend
20:49:13  13  ,cm4
20:49:13  14  ,cm6
20:49:13  15  ,cm8
20:49:13  16  ,cm10
20:49:13  17  ,cm12
20:49:13  18  ,cm14
20:49:13  19  ,cm16
20:49:13  20  ,cm18
20:49:13  21  --
20:49:13  22  ,ca4
20:49:13  23  ,ca6
20:49:13  24  ,ca8
20:49:13  25  ,ca10
20:49:13  26  ,ca12
20:49:13  27  ,ca14
20:49:13  28  ,ca16
20:49:13  29  ,ca18
20:49:13  30  --
20:49:13  31  ,cx4
20:49:13  32  ,cx6
20:49:13  33  ,cx8
20:49:13  34  ,cx10
20:49:13  35  ,cx12
20:49:13  36  ,cx14
20:49:13  37  ,cx16
20:49:13  38  ,cx18
20:49:13  39  --
20:49:13  40  ,crr4
20:49:13  41  ,crr6
20:49:13  42  ,crr8
20:49:13  43  ,crr10
20:49:13  44  ,crr12
20:49:13  45  ,crr14
20:49:13  46  ,crr16
20:49:13  47  ,crr18
20:49:13  48  --
20:49:13  49  ,hh
20:49:13  50  ,d
20:49:13  51  ,w
20:49:13  52  ,mpm
20:49:13  53  ,mph
20:49:13  54  FROM svm6122
20:49:13  55  ORDER BY ydate
20:49:13  56  /

Table created.

Elapsed: 00:00:00.37
20:49:14 SQL> 
20:49:14 SQL> -- rpt
20:49:14 SQL> 
20:49:14 SQL> SELECT
20:49:14   2  pair
20:49:14   3  ,trend
20:49:14   4  ,gatt
20:49:14   5  ,COUNT(pair)
20:49:14   6  ,AVG(g6)
20:49:14   7  FROM svm6142
20:49:14   8  GROUP BY pair,trend,gatt
20:49:14   9  ORDER BY pair,trend,gatt
20:49:14  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7183 -.00133291
usd_cad 	-1 up	      3143 .003084935
usd_cad 	-1		24
usd_cad 	 1 nup	      6666 -.00162439
usd_cad 	 1 up	      2489 .003597467
usd_cad 	 1		48

6 rows selected.

Elapsed: 00:00:00.04
20:49:14 SQL> 
20:49:14 SQL> 
20:49:14 SQL> -- Derive NTILE based params:
20:49:14 SQL> 
20:49:14 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.16
20:49:14 SQL> CREATE TABLE svm6162 COMPRESS AS
20:49:14   2  SELECT
20:49:14   3  pair
20:49:14   4  ,ydate
20:49:14   5  ,prdate
20:49:14   6  ,clse
20:49:14   7  ,g6
20:49:14   8  ,gatt
20:49:14   9  ,gattn
20:49:14  10  ,trend
20:49:14  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
20:49:14  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
20:49:14  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
20:49:14  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
20:49:14  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
20:49:14  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
20:49:14  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
20:49:14  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
20:49:14  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
20:49:14  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
20:49:14  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
20:49:14  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
20:49:14  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
20:49:14  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
20:49:14  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
20:49:14  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
20:49:14  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
20:49:14  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
20:49:14  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
20:49:14  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
20:49:14  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
20:49:14  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
20:49:14  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
20:49:14  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
20:49:14  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
20:49:14  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
20:49:14  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
20:49:14  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
20:49:14  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
20:49:14  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
20:49:14  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
20:49:14  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
20:49:14  43  ,hh  att32
20:49:14  44  ,d   att33
20:49:14  45  ,w   att34
20:49:14  46  ,mpm att35
20:49:14  47  ,mph att36
20:49:14  48  ,trend att37
20:49:14  49  FROM svm6142
20:49:14  50  ORDER BY ydate
20:49:14  51  /

Table created.

Elapsed: 00:00:04.81
20:49:19 SQL> 
20:49:19 SQL> -- rpt
20:49:19 SQL> 
20:49:19 SQL> SELECT
20:49:19   2  pair
20:49:19   3  ,trend
20:49:19   4  ,gatt
20:49:19   5  ,COUNT(pair)
20:49:19   6  ,AVG(g6)
20:49:19   7  FROM svm6162
20:49:19   8  GROUP BY pair,trend,gatt
20:49:19   9  ORDER BY pair,trend,gatt
20:49:19  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7183 -.00133291
usd_cad 	-1 up	      3143 .003084935
usd_cad 	-1		24
usd_cad 	 1 nup	      6666 -.00162439
usd_cad 	 1 up	      2489 .003597467
usd_cad 	 1		48

6 rows selected.

Elapsed: 00:00:00.03
20:49:19 SQL> 
20:49:19 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.15
20:49:19 SQL> CREATE TABLE modsrc COMPRESS AS
20:49:19   2  SELECT
20:49:19   3  pair
20:49:19   4  ,ydate
20:49:19   5  ,prdate
20:49:19   6  ,trend
20:49:19   7  ,g6
20:49:19   8  ,gatt
20:49:19   9  ,gattn
20:49:19  10  FROM svm6162
20:49:19  11  /

Table created.

Elapsed: 00:00:00.09
20:49:19 SQL> 
20:49:19 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
20:49:19 SQL> 
20:49:19 SQL> DROP   TABLE cad_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
20:49:19 SQL> CREATE TABLE cad_ms610 COMPRESS AS
20:49:19   2  SELECT
20:49:19   3  ydate
20:49:19   4  ,trend cad_trend
20:49:19   5  ,g6    cad_g6
20:49:19   6  ,gatt  cad_gatt
20:49:19   7  ,gattn cad_gattn
20:49:19   8  FROM modsrc
20:49:19   9  /

Table created.

Elapsed: 00:00:00.06
20:49:19 SQL> 
20:49:19 SQL> ANALYZE TABLE cad_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.14
20:49:20 SQL> 
20:49:20 SQL> -- I need a copy of the attributes:
20:49:20 SQL> 
20:49:20 SQL> 
20:49:20 SQL> DROP   TABLE cad_att;

Table dropped.

Elapsed: 00:00:00.03
20:49:20 SQL> CREATE TABLE cad_att COMPRESS AS
20:49:20   2  SELECT
20:49:20   3  ydate
20:49:20   4  ,att00 cad_att00
20:49:20   5  ,att01 cad_att01
20:49:20   6  ,att02 cad_att02
20:49:20   7  ,att03 cad_att03
20:49:20   8  ,att04 cad_att04
20:49:20   9  ,att05 cad_att05
20:49:20  10  ,att06 cad_att06
20:49:20  11  ,att07 cad_att07
20:49:20  12  ,att08 cad_att08
20:49:20  13  ,att09 cad_att09
20:49:20  14  ,att10 cad_att10
20:49:20  15  ,att11 cad_att11
20:49:20  16  ,att12 cad_att12
20:49:20  17  ,att13 cad_att13
20:49:20  18  ,att14 cad_att14
20:49:20  19  ,att15 cad_att15
20:49:20  20  ,att16 cad_att16
20:49:20  21  ,att17 cad_att17
20:49:20  22  ,att18 cad_att18
20:49:20  23  ,att19 cad_att19
20:49:20  24  ,att20 cad_att20
20:49:20  25  ,att21 cad_att21
20:49:20  26  ,att22 cad_att22
20:49:20  27  ,att23 cad_att23
20:49:20  28  ,att24 cad_att24
20:49:20  29  ,att25 cad_att25
20:49:20  30  ,att26 cad_att26
20:49:20  31  ,att27 cad_att27
20:49:20  32  ,att28 cad_att28
20:49:20  33  ,att29 cad_att29
20:49:20  34  ,att30 cad_att30
20:49:20  35  ,att31 cad_att31
20:49:20  36  ,att32 cad_att32
20:49:20  37  ,att33 cad_att33
20:49:20  38  ,att34 cad_att34
20:49:20  39  ,att35 cad_att35
20:49:20  40  ,att36 cad_att36
20:49:20  41  ,att37 cad_att37
20:49:20  42  FROM svm6162
20:49:20  43  /

Table created.

Elapsed: 00:00:00.17
20:49:20 SQL> 
20:49:20 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.44
20:49:20 SQL> 
20:49:20 SQL> -- rpt
20:49:20 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19553

Elapsed: 00:00:00.83
20:49:21 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
     19553

Elapsed: 00:00:00.00
20:49:21 SQL> 
20:49:21 SQL> --
20:49:21 SQL> -- chf610.sql
20:49:21 SQL> --
20:49:21 SQL> 
20:49:21 SQL> -- Creates views and tables for backtesting a forex SVM strategy
20:49:21 SQL> 
20:49:21 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.34
20:49:21 SQL> 
20:49:21 SQL> -- I created di5min here:
20:49:21 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
20:49:21 SQL> 
20:49:21 SQL> CREATE OR REPLACE VIEW svm6102 AS
20:49:21   2  SELECT
20:49:21   3  pair
20:49:21   4  ,ydate
20:49:21   5  ,prdate
20:49:21   6  ,rownum rnum -- acts as t in my time-series
20:49:21   7  ,clse
20:49:21   8  -- Derive a bunch of attributes from clse, the latest price:
20:49:21   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
20:49:21  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
20:49:21  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
20:49:21  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
20:49:21  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
20:49:21  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
20:49:21  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
20:49:21  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
20:49:21  17  --
20:49:21  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
20:49:21  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
20:49:21  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
20:49:21  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
20:49:21  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
20:49:21  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
20:49:21  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
20:49:21  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
20:49:21  26  --
20:49:21  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
20:49:21  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
20:49:21  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
20:49:21  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
20:49:21  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
20:49:21  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
20:49:21  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
20:49:21  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
20:49:21  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
20:49:21  36  FROM di5min WHERE pair LIKE'%chf%'
20:49:21  37  AND ydate > sysdate - 95
20:49:21  38  ORDER BY ydate
20:49:21  39  /

View created.

Elapsed: 00:00:00.04
20:49:21 SQL> 
20:49:21 SQL> -- rpt
20:49:21 SQL> 
20:49:21 SQL> SELECT
20:49:21   2  pair
20:49:21   3  ,COUNT(pair)
20:49:21   4  ,MIN(clse),MAX(clse)
20:49:21   5  ,MIN(avg6),MAX(avg6)
20:49:21   6  ,MIN(ydate),MAX(ydate)
20:49:21   7  FROM svm6102
20:49:21   8  GROUP BY pair
20:49:21   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_chf       19556	.94525	  1.00635 .947785616 1.00498151 2010-09-26 20:55:01 2010-12-29 20:45:00

Elapsed: 00:00:00.83
20:49:22 SQL> 
20:49:22 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
20:49:22 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.22
20:49:22 SQL> CREATE TABLE svm6122 COMPRESS AS
20:49:22   2  SELECT
20:49:22   3  pair
20:49:22   4  ,ydate
20:49:22   5  ,prdate
20:49:22   6  ,clse
20:49:22   7  -- g6 is important. I want to predict g6:
20:49:22   8  ,ld6 - clse g6
20:49:22   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
20:49:22  10  -- I want more attributes from the ones I derived above:
20:49:22  11  -- clse relation to moving-min
20:49:22  12  ,clse-min4  cm4
20:49:22  13  ,clse-min6  cm6
20:49:22  14  ,clse-min8  cm8
20:49:22  15  ,clse-min10 cm10
20:49:22  16  ,clse-min12 cm12
20:49:22  17  ,clse-min14 cm14
20:49:22  18  ,clse-min16 cm16
20:49:22  19  ,clse-min18 cm18
20:49:22  20  -- clse relation to moving-avg
20:49:22  21  ,clse-avg4  ca4
20:49:22  22  ,clse-avg6  ca6
20:49:22  23  ,clse-avg8  ca8
20:49:22  24  ,clse-avg10 ca10
20:49:22  25  ,clse-avg12 ca12
20:49:22  26  ,clse-avg14 ca14
20:49:22  27  ,clse-avg16 ca16
20:49:22  28  ,clse-avg18 ca18
20:49:22  29  -- clse relation to moving-max
20:49:22  30  ,clse-max4  cx4
20:49:22  31  ,clse-max6  cx6
20:49:22  32  ,clse-max8  cx8
20:49:22  33  ,clse-max10 cx10
20:49:22  34  ,clse-max12 cx12
20:49:22  35  ,clse-max14 cx14
20:49:22  36  ,clse-max16 cx16
20:49:22  37  ,clse-max18 cx18
20:49:22  38  -- Derive more attributes.
20:49:22  39  -- I want to use CORR() here to help SVM see the shape of the series.
20:49:22  40  -- But COVAR_POP is more stable:
20:49:22  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
20:49:22  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
20:49:22  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
20:49:22  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
20:49:22  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
20:49:22  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
20:49:22  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
20:49:22  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
20:49:22  49  -- Derive date related attributes:
20:49:22  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
20:49:22  51  ,0+TO_CHAR(ydate,'D')d
20:49:22  52  ,0+TO_CHAR(ydate,'W')w
20:49:22  53  -- mpm stands for minutes-past-midnight:
20:49:22  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
20:49:22  55  -- mph stands for minutes-past-hour:
20:49:22  56  ,0+TO_CHAR(ydate,'MI')mph
20:49:22  57  FROM svm6102
20:49:22  58  ORDER BY ydate
20:49:22  59  /

Table created.

Elapsed: 00:00:02.07
20:49:25 SQL> 
20:49:25 SQL> -- rpt
20:49:25 SQL> 
20:49:25 SQL> SELECT
20:49:25   2  pair
20:49:25   3  ,COUNT(pair)
20:49:25   4  ,MIN(clse),MAX(clse)
20:49:25   5  ,MIN(ydate),MAX(ydate)
20:49:25   6  FROM svm6122
20:49:25   7  GROUP BY pair
20:49:25   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_chf       19556	.94525	  1.00635 2010-09-26 20:55:01 2010-12-29 20:45:00

Elapsed: 00:00:00.04
20:49:25 SQL> 
20:49:25 SQL> -- Prepare for derivation of NTILE based params:
20:49:25 SQL> 
20:49:25 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.23
20:49:25 SQL> CREATE TABLE svm6142 COMPRESS AS
20:49:25   2  SELECT
20:49:25   3  pair
20:49:25   4  ,ydate
20:49:25   5  ,prdate
20:49:25   6  ,clse
20:49:25   7  ,g6
20:49:25   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
20:49:25   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
20:49:25  10  ,CASE WHEN trend IS NULL THEN 1
20:49:25  11  	    WHEN trend =0      THEN 1
20:49:25  12  	    ELSE trend END trend
20:49:25  13  ,cm4
20:49:25  14  ,cm6
20:49:25  15  ,cm8
20:49:25  16  ,cm10
20:49:25  17  ,cm12
20:49:25  18  ,cm14
20:49:25  19  ,cm16
20:49:25  20  ,cm18
20:49:25  21  --
20:49:25  22  ,ca4
20:49:25  23  ,ca6
20:49:25  24  ,ca8
20:49:25  25  ,ca10
20:49:25  26  ,ca12
20:49:25  27  ,ca14
20:49:25  28  ,ca16
20:49:25  29  ,ca18
20:49:25  30  --
20:49:25  31  ,cx4
20:49:25  32  ,cx6
20:49:25  33  ,cx8
20:49:25  34  ,cx10
20:49:25  35  ,cx12
20:49:25  36  ,cx14
20:49:25  37  ,cx16
20:49:25  38  ,cx18
20:49:25  39  --
20:49:25  40  ,crr4
20:49:25  41  ,crr6
20:49:25  42  ,crr8
20:49:25  43  ,crr10
20:49:25  44  ,crr12
20:49:25  45  ,crr14
20:49:25  46  ,crr16
20:49:25  47  ,crr18
20:49:25  48  --
20:49:25  49  ,hh
20:49:25  50  ,d
20:49:25  51  ,w
20:49:25  52  ,mpm
20:49:25  53  ,mph
20:49:25  54  FROM svm6122
20:49:25  55  ORDER BY ydate
20:49:25  56  /

Table created.

Elapsed: 00:00:00.38
20:49:25 SQL> 
20:49:25 SQL> -- rpt
20:49:25 SQL> 
20:49:25 SQL> SELECT
20:49:25   2  pair
20:49:25   3  ,trend
20:49:25   4  ,gatt
20:49:25   5  ,COUNT(pair)
20:49:25   6  ,AVG(g6)
20:49:25   7  FROM svm6142
20:49:25   8  GROUP BY pair,trend,gatt
20:49:25   9  ORDER BY pair,trend,gatt
20:49:25  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      6994 -.00193187
usd_chf 	-1 up	      3177 .003894688
usd_chf 	-1		72
usd_chf 	 1 nup	      6747 -.00161786
usd_chf 	 1 up	      2566 .003688786

Elapsed: 00:00:00.03
20:49:25 SQL> 
20:49:25 SQL> 
20:49:25 SQL> -- Derive NTILE based params:
20:49:25 SQL> 
20:49:25 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.11
20:49:25 SQL> CREATE TABLE svm6162 COMPRESS AS
20:49:25   2  SELECT
20:49:25   3  pair
20:49:25   4  ,ydate
20:49:25   5  ,prdate
20:49:25   6  ,clse
20:49:25   7  ,g6
20:49:25   8  ,gatt
20:49:25   9  ,gattn
20:49:25  10  ,trend
20:49:25  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
20:49:25  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
20:49:25  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
20:49:25  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
20:49:25  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
20:49:25  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
20:49:25  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
20:49:25  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
20:49:25  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
20:49:25  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
20:49:25  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
20:49:25  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
20:49:25  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
20:49:25  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
20:49:25  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
20:49:25  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
20:49:25  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
20:49:25  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
20:49:25  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
20:49:25  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
20:49:25  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
20:49:25  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
20:49:25  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
20:49:25  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
20:49:25  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
20:49:25  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
20:49:25  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
20:49:25  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
20:49:25  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
20:49:25  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
20:49:25  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
20:49:25  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
20:49:25  43  ,hh  att32
20:49:25  44  ,d   att33
20:49:25  45  ,w   att34
20:49:25  46  ,mpm att35
20:49:25  47  ,mph att36
20:49:25  48  ,trend att37
20:49:25  49  FROM svm6142
20:49:25  50  ORDER BY ydate
20:49:25  51  /

Table created.

Elapsed: 00:00:04.72
20:49:30 SQL> 
20:49:30 SQL> -- rpt
20:49:30 SQL> 
20:49:30 SQL> SELECT
20:49:30   2  pair
20:49:30   3  ,trend
20:49:30   4  ,gatt
20:49:30   5  ,COUNT(pair)
20:49:30   6  ,AVG(g6)
20:49:30   7  FROM svm6162
20:49:30   8  GROUP BY pair,trend,gatt
20:49:30   9  ORDER BY pair,trend,gatt
20:49:30  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      6994 -.00193187
usd_chf 	-1 up	      3177 .003894688
usd_chf 	-1		72
usd_chf 	 1 nup	      6747 -.00161786
usd_chf 	 1 up	      2566 .003688786

Elapsed: 00:00:00.02
20:49:30 SQL> 
20:49:30 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.10
20:49:30 SQL> CREATE TABLE modsrc COMPRESS AS
20:49:30   2  SELECT
20:49:30   3  pair
20:49:30   4  ,ydate
20:49:30   5  ,prdate
20:49:30   6  ,trend
20:49:30   7  ,g6
20:49:30   8  ,gatt
20:49:30   9  ,gattn
20:49:30  10  FROM svm6162
20:49:30  11  /

Table created.

Elapsed: 00:00:00.08
20:49:30 SQL> 
20:49:30 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
20:49:30 SQL> 
20:49:30 SQL> DROP   TABLE chf_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
20:49:30 SQL> CREATE TABLE chf_ms610 COMPRESS AS
20:49:30   2  SELECT
20:49:30   3  ydate
20:49:30   4  ,trend chf_trend
20:49:30   5  ,g6    chf_g6
20:49:30   6  ,gatt  chf_gatt
20:49:30   7  ,gattn chf_gattn
20:49:30   8  FROM modsrc
20:49:30   9  /

Table created.

Elapsed: 00:00:00.06
20:49:31 SQL> 
20:49:31 SQL> ANALYZE TABLE chf_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.23
20:49:31 SQL> 
20:49:31 SQL> -- I need a copy of the attributes:
20:49:31 SQL> 
20:49:31 SQL> 
20:49:31 SQL> DROP   TABLE chf_att;

Table dropped.

Elapsed: 00:00:00.22
20:49:31 SQL> CREATE TABLE chf_att COMPRESS AS
20:49:31   2  SELECT
20:49:31   3  ydate
20:49:31   4  ,att00 chf_att00
20:49:31   5  ,att01 chf_att01
20:49:31   6  ,att02 chf_att02
20:49:31   7  ,att03 chf_att03
20:49:31   8  ,att04 chf_att04
20:49:31   9  ,att05 chf_att05
20:49:31  10  ,att06 chf_att06
20:49:31  11  ,att07 chf_att07
20:49:31  12  ,att08 chf_att08
20:49:31  13  ,att09 chf_att09
20:49:31  14  ,att10 chf_att10
20:49:31  15  ,att11 chf_att11
20:49:31  16  ,att12 chf_att12
20:49:31  17  ,att13 chf_att13
20:49:31  18  ,att14 chf_att14
20:49:31  19  ,att15 chf_att15
20:49:31  20  ,att16 chf_att16
20:49:31  21  ,att17 chf_att17
20:49:31  22  ,att18 chf_att18
20:49:31  23  ,att19 chf_att19
20:49:31  24  ,att20 chf_att20
20:49:31  25  ,att21 chf_att21
20:49:31  26  ,att22 chf_att22
20:49:31  27  ,att23 chf_att23
20:49:31  28  ,att24 chf_att24
20:49:31  29  ,att25 chf_att25
20:49:31  30  ,att26 chf_att26
20:49:31  31  ,att27 chf_att27
20:49:31  32  ,att28 chf_att28
20:49:31  33  ,att29 chf_att29
20:49:31  34  ,att30 chf_att30
20:49:31  35  ,att31 chf_att31
20:49:31  36  ,att32 chf_att32
20:49:31  37  ,att33 chf_att33
20:49:31  38  ,att34 chf_att34
20:49:31  39  ,att35 chf_att35
20:49:31  40  ,att36 chf_att36
20:49:31  41  ,att37 chf_att37
20:49:31  42  FROM svm6162
20:49:31  43  /

Table created.

Elapsed: 00:00:00.16
20:49:31 SQL> 
20:49:31 SQL> ANALYZE TABLE chf_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
20:49:32 SQL> 
20:49:32 SQL> -- rpt
20:49:32 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19556

Elapsed: 00:00:00.84
20:49:32 SQL> SELECT COUNT(*)FROM chf_att;

  COUNT(*)
----------
     19556

Elapsed: 00:00:00.00
20:49:32 SQL> 
20:49:32 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
