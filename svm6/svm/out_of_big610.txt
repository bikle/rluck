
SQL*Plus: Release 11.2.0.1.0 Production on Fri Jan 7 23:11:40 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

23:11:41 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
23:11:41 SQL> 23:11:41 SQL> --
23:11:41 SQL> -- eur610.sql
23:11:41 SQL> --
23:11:41 SQL> 
23:11:41 SQL> -- Creates views and tables for backtesting a forex SVM strategy
23:11:41 SQL> 
23:11:41 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.01
23:11:41 SQL> 
23:11:41 SQL> -- I created di5min here:
23:11:41 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
23:11:41 SQL> 
23:11:41 SQL> CREATE OR REPLACE VIEW svm6102 AS
23:11:41   2  SELECT
23:11:41   3  pair
23:11:41   4  ,ydate
23:11:41   5  ,prdate
23:11:41   6  ,rownum rnum -- acts as t in my time-series
23:11:41   7  ,clse
23:11:41   8  -- Derive a bunch of attributes from clse, the latest price:
23:11:41   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
23:11:41  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
23:11:41  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
23:11:41  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
23:11:41  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
23:11:41  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
23:11:41  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
23:11:41  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
23:11:41  17  --
23:11:41  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
23:11:41  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
23:11:41  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
23:11:41  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
23:11:41  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
23:11:41  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
23:11:41  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
23:11:41  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
23:11:41  26  --
23:11:41  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
23:11:41  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
23:11:41  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
23:11:41  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
23:11:41  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
23:11:41  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
23:11:41  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
23:11:41  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
23:11:41  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
23:11:41  36  FROM di5min WHERE pair LIKE'%eur%'
23:11:41  37  AND ydate > sysdate - 95
23:11:41  38  ORDER BY ydate
23:11:41  39  /

View created.

Elapsed: 00:00:00.05
23:11:41 SQL> 
23:11:41 SQL> -- rpt
23:11:41 SQL> 
23:11:41 SQL> SELECT
23:11:41   2  pair
23:11:41   3  ,COUNT(pair)
23:11:41   4  ,MIN(clse),MAX(clse)
23:11:41   5  ,MIN(avg6),MAX(avg6)
23:11:41   6  ,MIN(ydate),MAX(ydate)
23:11:41   7  FROM svm6102
23:11:41   8  GROUP BY pair
23:11:41   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_usd       19796	1.2907	   1.4273 1.29300908 1.42436233 2010-10-04 23:15:01 2011-01-07 21:55:00

Elapsed: 00:00:00.91
23:11:42 SQL> 
23:11:42 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
23:11:42 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.04
23:11:42 SQL> CREATE TABLE svm6122 COMPRESS AS
23:11:42   2  SELECT
23:11:42   3  pair
23:11:42   4  ,ydate
23:11:42   5  ,prdate
23:11:42   6  ,clse
23:11:42   7  -- g6 is important. I want to predict g6:
23:11:42   8  ,ld6 - clse g6
23:11:42   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
23:11:42  10  -- I want more attributes from the ones I derived above:
23:11:42  11  -- clse relation to moving-min
23:11:42  12  ,clse-min4  cm4
23:11:42  13  ,clse-min6  cm6
23:11:42  14  ,clse-min8  cm8
23:11:42  15  ,clse-min10 cm10
23:11:42  16  ,clse-min12 cm12
23:11:42  17  ,clse-min14 cm14
23:11:42  18  ,clse-min16 cm16
23:11:42  19  ,clse-min18 cm18
23:11:42  20  -- clse relation to moving-avg
23:11:42  21  ,clse-avg4  ca4
23:11:42  22  ,clse-avg6  ca6
23:11:42  23  ,clse-avg8  ca8
23:11:42  24  ,clse-avg10 ca10
23:11:42  25  ,clse-avg12 ca12
23:11:42  26  ,clse-avg14 ca14
23:11:42  27  ,clse-avg16 ca16
23:11:42  28  ,clse-avg18 ca18
23:11:42  29  -- clse relation to moving-max
23:11:42  30  ,clse-max4  cx4
23:11:42  31  ,clse-max6  cx6
23:11:42  32  ,clse-max8  cx8
23:11:42  33  ,clse-max10 cx10
23:11:42  34  ,clse-max12 cx12
23:11:42  35  ,clse-max14 cx14
23:11:42  36  ,clse-max16 cx16
23:11:42  37  ,clse-max18 cx18
23:11:42  38  -- Derive more attributes.
23:11:42  39  -- I want to use CORR() here to help SVM see the shape of the series.
23:11:42  40  -- But COVAR_POP is more stable:
23:11:42  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
23:11:42  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
23:11:42  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
23:11:42  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
23:11:42  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
23:11:42  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
23:11:42  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
23:11:42  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
23:11:42  49  -- Derive date related attributes:
23:11:42  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
23:11:42  51  ,0+TO_CHAR(ydate,'D')d
23:11:42  52  ,0+TO_CHAR(ydate,'W')w
23:11:42  53  -- mpm stands for minutes-past-midnight:
23:11:42  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
23:11:42  55  -- mph stands for minutes-past-hour:
23:11:42  56  ,0+TO_CHAR(ydate,'MI')mph
23:11:42  57  FROM svm6102
23:11:42  58  ORDER BY ydate
23:11:42  59  /

Table created.

Elapsed: 00:00:02.43
23:11:44 SQL> 
23:11:44 SQL> -- rpt
23:11:44 SQL> 
23:11:44 SQL> SELECT
23:11:44   2  pair
23:11:44   3  ,COUNT(pair)
23:11:44   4  ,MIN(clse),MAX(clse)
23:11:44   5  ,MIN(ydate),MAX(ydate)
23:11:44   6  FROM svm6122
23:11:44   7  GROUP BY pair
23:11:44   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_usd       19796	1.2907	   1.4273 2010-10-04 23:15:01 2011-01-07 21:55:00

Elapsed: 00:00:00.05
23:11:44 SQL> 
23:11:44 SQL> -- Prepare for derivation of NTILE based params:
23:11:44 SQL> 
23:11:44 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.45
23:11:44 SQL> CREATE TABLE svm6142 COMPRESS AS
23:11:44   2  SELECT
23:11:44   3  pair
23:11:44   4  ,ydate
23:11:44   5  ,prdate
23:11:44   6  ,clse
23:11:44   7  ,g6
23:11:44   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
23:11:44   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
23:11:44  10  ,CASE WHEN trend IS NULL THEN 1
23:11:44  11  	    WHEN trend =0      THEN 1
23:11:44  12  	    ELSE trend END trend
23:11:44  13  ,cm4
23:11:44  14  ,cm6
23:11:44  15  ,cm8
23:11:44  16  ,cm10
23:11:44  17  ,cm12
23:11:44  18  ,cm14
23:11:44  19  ,cm16
23:11:44  20  ,cm18
23:11:44  21  --
23:11:44  22  ,ca4
23:11:44  23  ,ca6
23:11:44  24  ,ca8
23:11:44  25  ,ca10
23:11:44  26  ,ca12
23:11:44  27  ,ca14
23:11:44  28  ,ca16
23:11:44  29  ,ca18
23:11:44  30  --
23:11:44  31  ,cx4
23:11:44  32  ,cx6
23:11:44  33  ,cx8
23:11:44  34  ,cx10
23:11:44  35  ,cx12
23:11:44  36  ,cx14
23:11:44  37  ,cx16
23:11:44  38  ,cx18
23:11:44  39  --
23:11:44  40  ,crr4
23:11:44  41  ,crr6
23:11:44  42  ,crr8
23:11:44  43  ,crr10
23:11:44  44  ,crr12
23:11:44  45  ,crr14
23:11:44  46  ,crr16
23:11:44  47  ,crr18
23:11:44  48  --
23:11:44  49  ,hh
23:11:44  50  ,d
23:11:44  51  ,w
23:11:44  52  ,mpm
23:11:44  53  ,mph
23:11:44  54  FROM svm6122
23:11:44  55  ORDER BY ydate
23:11:44  56  /

Table created.

Elapsed: 00:00:00.38
23:11:45 SQL> 
23:11:45 SQL> -- rpt
23:11:45 SQL> 
23:11:45 SQL> SELECT
23:11:45   2  pair
23:11:45   3  ,trend
23:11:45   4  ,gatt
23:11:45   5  ,COUNT(pair)
23:11:45   6  ,AVG(g6)
23:11:45   7  FROM svm6142
23:11:45   8  GROUP BY pair,trend,gatt
23:11:45   9  ORDER BY pair,trend,gatt
23:11:45  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6583 -.00316063
eur_usd 	-1 up	      3545 .004441901
eur_usd 	-1		72
eur_usd 	 1 nup	      5868 -.00325655
eur_usd 	 1 up	      3728 .005073897

Elapsed: 00:00:00.04
23:11:45 SQL> 
23:11:45 SQL> 
23:11:45 SQL> -- Derive NTILE based params:
23:11:45 SQL> 
23:11:45 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:01.44
23:11:46 SQL> CREATE TABLE svm6162 COMPRESS AS
23:11:46   2  SELECT
23:11:46   3  pair
23:11:46   4  ,ydate
23:11:46   5  ,prdate
23:11:46   6  ,clse
23:11:46   7  ,g6
23:11:46   8  ,gatt
23:11:46   9  ,gattn
23:11:46  10  ,trend
23:11:46  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
23:11:46  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
23:11:46  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
23:11:46  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
23:11:46  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
23:11:46  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
23:11:46  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
23:11:46  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
23:11:46  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
23:11:46  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
23:11:46  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
23:11:46  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
23:11:46  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
23:11:46  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
23:11:46  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
23:11:46  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
23:11:46  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
23:11:46  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
23:11:46  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
23:11:46  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
23:11:46  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
23:11:46  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
23:11:46  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
23:11:46  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
23:11:46  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
23:11:46  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
23:11:46  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
23:11:46  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
23:11:46  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
23:11:46  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
23:11:46  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
23:11:46  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
23:11:46  43  ,hh  att32
23:11:46  44  ,d   att33
23:11:46  45  ,w   att34
23:11:46  46  ,mpm att35
23:11:46  47  ,mph att36
23:11:46  48  ,trend att37
23:11:46  49  FROM svm6142
23:11:46  50  ORDER BY ydate
23:11:46  51  /

Table created.

Elapsed: 00:00:04.80
23:11:51 SQL> 
23:11:51 SQL> -- rpt
23:11:51 SQL> 
23:11:51 SQL> SELECT
23:11:51   2  pair
23:11:51   3  ,trend
23:11:51   4  ,gatt
23:11:51   5  ,COUNT(pair)
23:11:51   6  ,AVG(g6)
23:11:51   7  FROM svm6162
23:11:51   8  GROUP BY pair,trend,gatt
23:11:51   9  ORDER BY pair,trend,gatt
23:11:51  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6583 -.00316063
eur_usd 	-1 up	      3545 .004441901
eur_usd 	-1		72
eur_usd 	 1 nup	      5868 -.00325655
eur_usd 	 1 up	      3728 .005073897

Elapsed: 00:00:00.03
23:11:51 SQL> 
23:11:51 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.52
23:11:52 SQL> CREATE TABLE modsrc COMPRESS AS
23:11:52   2  SELECT
23:11:52   3  pair
23:11:52   4  ,ydate
23:11:52   5  ,prdate
23:11:52   6  ,trend
23:11:52   7  ,g6
23:11:52   8  ,gatt
23:11:52   9  ,gattn
23:11:52  10  FROM svm6162
23:11:52  11  /

Table created.

Elapsed: 00:00:00.08
23:11:52 SQL> 
23:11:52 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.28
23:11:52 SQL> 
23:11:52 SQL> DROP   TABLE eur_ms610 ;

Table dropped.

Elapsed: 00:00:00.13
23:11:52 SQL> CREATE TABLE eur_ms610 COMPRESS AS
23:11:52   2  SELECT
23:11:52   3  ydate
23:11:52   4  ,trend eur_trend
23:11:52   5  ,g6    eur_g6
23:11:52   6  ,gatt  eur_gatt
23:11:52   7  ,gattn eur_gattn
23:11:52   8  FROM modsrc
23:11:52   9  /

Table created.

Elapsed: 00:00:00.07
23:11:52 SQL> 
23:11:52 SQL> ANALYZE TABLE eur_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
23:11:52 SQL> 
23:11:52 SQL> -- I need a copy of the attributes:
23:11:52 SQL> 
23:11:52 SQL> 
23:11:52 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.06
23:11:52 SQL> CREATE TABLE eur_att COMPRESS AS
23:11:52   2  SELECT
23:11:52   3  ydate
23:11:52   4  ,att00 eur_att00
23:11:52   5  ,att01 eur_att01
23:11:52   6  ,att02 eur_att02
23:11:52   7  ,att03 eur_att03
23:11:52   8  ,att04 eur_att04
23:11:52   9  ,att05 eur_att05
23:11:52  10  ,att06 eur_att06
23:11:52  11  ,att07 eur_att07
23:11:52  12  ,att08 eur_att08
23:11:52  13  ,att09 eur_att09
23:11:52  14  ,att10 eur_att10
23:11:52  15  ,att11 eur_att11
23:11:52  16  ,att12 eur_att12
23:11:52  17  ,att13 eur_att13
23:11:52  18  ,att14 eur_att14
23:11:52  19  ,att15 eur_att15
23:11:52  20  ,att16 eur_att16
23:11:52  21  ,att17 eur_att17
23:11:52  22  ,att18 eur_att18
23:11:52  23  ,att19 eur_att19
23:11:52  24  ,att20 eur_att20
23:11:52  25  ,att21 eur_att21
23:11:52  26  ,att22 eur_att22
23:11:52  27  ,att23 eur_att23
23:11:52  28  ,att24 eur_att24
23:11:52  29  ,att25 eur_att25
23:11:52  30  ,att26 eur_att26
23:11:52  31  ,att27 eur_att27
23:11:52  32  ,att28 eur_att28
23:11:52  33  ,att29 eur_att29
23:11:52  34  ,att30 eur_att30
23:11:52  35  ,att31 eur_att31
23:11:52  36  ,att32 eur_att32
23:11:52  37  ,att33 eur_att33
23:11:52  38  ,att34 eur_att34
23:11:52  39  ,att35 eur_att35
23:11:52  40  ,att36 eur_att36
23:11:52  41  ,att37 eur_att37
23:11:52  42  FROM svm6162
23:11:52  43  /

Table created.

Elapsed: 00:00:00.19
23:11:53 SQL> 
23:11:53 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
23:11:53 SQL> 
23:11:53 SQL> -- rpt
23:11:53 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19796

Elapsed: 00:00:00.91
23:11:54 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     19796

Elapsed: 00:00:00.00
23:11:54 SQL> 
23:11:54 SQL> --
23:11:54 SQL> -- aud610.sql
23:11:54 SQL> --
23:11:54 SQL> 
23:11:54 SQL> -- Creates views and tables for backtesting a forex SVM strategy
23:11:54 SQL> 
23:11:54 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.49
23:11:55 SQL> 
23:11:55 SQL> -- I created di5min here:
23:11:55 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
23:11:55 SQL> 
23:11:55 SQL> CREATE OR REPLACE VIEW svm6102 AS
23:11:55   2  SELECT
23:11:55   3  pair
23:11:55   4  ,ydate
23:11:55   5  ,prdate
23:11:55   6  ,rownum rnum -- acts as t in my time-series
23:11:55   7  ,clse
23:11:55   8  -- Derive a bunch of attributes from clse, the latest price:
23:11:55   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
23:11:55  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
23:11:55  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
23:11:55  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
23:11:55  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
23:11:55  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
23:11:55  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
23:11:55  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
23:11:55  17  --
23:11:55  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
23:11:55  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
23:11:55  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
23:11:55  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
23:11:55  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
23:11:55  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
23:11:55  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
23:11:55  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
23:11:55  26  --
23:11:55  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
23:11:55  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
23:11:55  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
23:11:55  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
23:11:55  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
23:11:55  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
23:11:55  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
23:11:55  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
23:11:55  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
23:11:55  36  FROM di5min WHERE pair LIKE'%aud%'
23:11:55  37  AND ydate > sysdate - 95
23:11:55  38  ORDER BY ydate
23:11:55  39  /

View created.

Elapsed: 00:00:00.08
23:11:55 SQL> 
23:11:55 SQL> -- rpt
23:11:55 SQL> 
23:11:55 SQL> SELECT
23:11:55   2  pair
23:11:55   3  ,COUNT(pair)
23:11:55   4  ,MIN(clse),MAX(clse)
23:11:55   5  ,MIN(avg6),MAX(avg6)
23:11:55   6  ,MIN(ydate),MAX(ydate)
23:11:55   7  FROM svm6102
23:11:55   8  GROUP BY pair
23:11:55   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
aud_usd       19793	.95405	  1.02495 .957141438 1.02284247 2010-10-04 23:15:01 2011-01-07 21:55:00

Elapsed: 00:00:00.89
23:11:56 SQL> 
23:11:56 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
23:11:56 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.24
23:11:56 SQL> CREATE TABLE svm6122 COMPRESS AS
23:11:56   2  SELECT
23:11:56   3  pair
23:11:56   4  ,ydate
23:11:56   5  ,prdate
23:11:56   6  ,clse
23:11:56   7  -- g6 is important. I want to predict g6:
23:11:56   8  ,ld6 - clse g6
23:11:56   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
23:11:56  10  -- I want more attributes from the ones I derived above:
23:11:56  11  -- clse relation to moving-min
23:11:56  12  ,clse-min4  cm4
23:11:56  13  ,clse-min6  cm6
23:11:56  14  ,clse-min8  cm8
23:11:56  15  ,clse-min10 cm10
23:11:56  16  ,clse-min12 cm12
23:11:56  17  ,clse-min14 cm14
23:11:56  18  ,clse-min16 cm16
23:11:56  19  ,clse-min18 cm18
23:11:56  20  -- clse relation to moving-avg
23:11:56  21  ,clse-avg4  ca4
23:11:56  22  ,clse-avg6  ca6
23:11:56  23  ,clse-avg8  ca8
23:11:56  24  ,clse-avg10 ca10
23:11:56  25  ,clse-avg12 ca12
23:11:56  26  ,clse-avg14 ca14
23:11:56  27  ,clse-avg16 ca16
23:11:56  28  ,clse-avg18 ca18
23:11:56  29  -- clse relation to moving-max
23:11:56  30  ,clse-max4  cx4
23:11:56  31  ,clse-max6  cx6
23:11:56  32  ,clse-max8  cx8
23:11:56  33  ,clse-max10 cx10
23:11:56  34  ,clse-max12 cx12
23:11:56  35  ,clse-max14 cx14
23:11:56  36  ,clse-max16 cx16
23:11:56  37  ,clse-max18 cx18
23:11:56  38  -- Derive more attributes.
23:11:56  39  -- I want to use CORR() here to help SVM see the shape of the series.
23:11:56  40  -- But COVAR_POP is more stable:
23:11:56  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
23:11:56  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
23:11:56  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
23:11:56  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
23:11:56  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
23:11:56  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
23:11:56  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
23:11:56  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
23:11:56  49  -- Derive date related attributes:
23:11:56  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
23:11:56  51  ,0+TO_CHAR(ydate,'D')d
23:11:56  52  ,0+TO_CHAR(ydate,'W')w
23:11:56  53  -- mpm stands for minutes-past-midnight:
23:11:56  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
23:11:56  55  -- mph stands for minutes-past-hour:
23:11:56  56  ,0+TO_CHAR(ydate,'MI')mph
23:11:56  57  FROM svm6102
23:11:56  58  ORDER BY ydate
23:11:56  59  /

Table created.

Elapsed: 00:00:02.12
23:11:58 SQL> 
23:11:58 SQL> -- rpt
23:11:58 SQL> 
23:11:58 SQL> SELECT
23:11:58   2  pair
23:11:58   3  ,COUNT(pair)
23:11:58   4  ,MIN(clse),MAX(clse)
23:11:58   5  ,MIN(ydate),MAX(ydate)
23:11:58   6  FROM svm6122
23:11:58   7  GROUP BY pair
23:11:58   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
aud_usd       19793	.95405	  1.02495 2010-10-04 23:15:01 2011-01-07 21:55:00

Elapsed: 00:00:00.05
23:11:58 SQL> 
23:11:58 SQL> -- Prepare for derivation of NTILE based params:
23:11:58 SQL> 
23:11:58 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.25
23:11:58 SQL> CREATE TABLE svm6142 COMPRESS AS
23:11:58   2  SELECT
23:11:58   3  pair
23:11:58   4  ,ydate
23:11:58   5  ,prdate
23:11:58   6  ,clse
23:11:58   7  ,g6
23:11:58   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
23:11:58   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
23:11:58  10  ,CASE WHEN trend IS NULL THEN 1
23:11:58  11  	    WHEN trend =0      THEN 1
23:11:58  12  	    ELSE trend END trend
23:11:58  13  ,cm4
23:11:58  14  ,cm6
23:11:58  15  ,cm8
23:11:58  16  ,cm10
23:11:58  17  ,cm12
23:11:58  18  ,cm14
23:11:58  19  ,cm16
23:11:58  20  ,cm18
23:11:58  21  --
23:11:58  22  ,ca4
23:11:58  23  ,ca6
23:11:58  24  ,ca8
23:11:58  25  ,ca10
23:11:58  26  ,ca12
23:11:58  27  ,ca14
23:11:58  28  ,ca16
23:11:58  29  ,ca18
23:11:58  30  --
23:11:58  31  ,cx4
23:11:58  32  ,cx6
23:11:58  33  ,cx8
23:11:58  34  ,cx10
23:11:58  35  ,cx12
23:11:58  36  ,cx14
23:11:58  37  ,cx16
23:11:58  38  ,cx18
23:11:58  39  --
23:11:58  40  ,crr4
23:11:58  41  ,crr6
23:11:58  42  ,crr8
23:11:58  43  ,crr10
23:11:58  44  ,crr12
23:11:58  45  ,crr14
23:11:58  46  ,crr16
23:11:58  47  ,crr18
23:11:58  48  --
23:11:58  49  ,hh
23:11:58  50  ,d
23:11:58  51  ,w
23:11:58  52  ,mpm
23:11:58  53  ,mph
23:11:58  54  FROM svm6122
23:11:58  55  ORDER BY ydate
23:11:58  56  /

Table created.

Elapsed: 00:00:00.83
23:11:59 SQL> 
23:11:59 SQL> -- rpt
23:11:59 SQL> 
23:11:59 SQL> SELECT
23:11:59   2  pair
23:11:59   3  ,trend
23:11:59   4  ,gatt
23:11:59   5  ,COUNT(pair)
23:11:59   6  ,AVG(g6)
23:11:59   7  FROM svm6142
23:11:59   8  GROUP BY pair,trend,gatt
23:11:59   9  ORDER BY pair,trend,gatt
23:11:59  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5684 -.00214086
aud_usd 	-1 up	      3738  .00376965
aud_usd 	-1		29
aud_usd 	 1 nup	      6704 -.00212433
aud_usd 	 1 up	      3595 .004053724
aud_usd 	 1		43

6 rows selected.

Elapsed: 00:00:00.04
23:11:59 SQL> 
23:11:59 SQL> 
23:11:59 SQL> -- Derive NTILE based params:
23:11:59 SQL> 
23:11:59 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.21
23:11:59 SQL> CREATE TABLE svm6162 COMPRESS AS
23:11:59   2  SELECT
23:11:59   3  pair
23:11:59   4  ,ydate
23:11:59   5  ,prdate
23:11:59   6  ,clse
23:11:59   7  ,g6
23:11:59   8  ,gatt
23:11:59   9  ,gattn
23:11:59  10  ,trend
23:11:59  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
23:11:59  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
23:11:59  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
23:11:59  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
23:11:59  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
23:11:59  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
23:11:59  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
23:11:59  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
23:11:59  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
23:11:59  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
23:11:59  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
23:11:59  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
23:11:59  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
23:11:59  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
23:11:59  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
23:11:59  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
23:11:59  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
23:11:59  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
23:11:59  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
23:11:59  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
23:11:59  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
23:11:59  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
23:11:59  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
23:11:59  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
23:11:59  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
23:11:59  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
23:11:59  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
23:11:59  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
23:11:59  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
23:11:59  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
23:11:59  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
23:11:59  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
23:11:59  43  ,hh  att32
23:11:59  44  ,d   att33
23:11:59  45  ,w   att34
23:11:59  46  ,mpm att35
23:11:59  47  ,mph att36
23:11:59  48  ,trend att37
23:11:59  49  FROM svm6142
23:11:59  50  ORDER BY ydate
23:11:59  51  /

Table created.

Elapsed: 00:00:04.77
23:12:04 SQL> 
23:12:04 SQL> -- rpt
23:12:04 SQL> 
23:12:04 SQL> SELECT
23:12:04   2  pair
23:12:04   3  ,trend
23:12:04   4  ,gatt
23:12:04   5  ,COUNT(pair)
23:12:04   6  ,AVG(g6)
23:12:04   7  FROM svm6162
23:12:04   8  GROUP BY pair,trend,gatt
23:12:04   9  ORDER BY pair,trend,gatt
23:12:04  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5684 -.00214086
aud_usd 	-1 up	      3738  .00376965
aud_usd 	-1		29
aud_usd 	 1 nup	      6704 -.00212433
aud_usd 	 1 up	      3595 .004053724
aud_usd 	 1		43

6 rows selected.

Elapsed: 00:00:00.04
23:12:04 SQL> 
23:12:04 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
23:12:04 SQL> CREATE TABLE modsrc COMPRESS AS
23:12:04   2  SELECT
23:12:04   3  pair
23:12:04   4  ,ydate
23:12:04   5  ,prdate
23:12:04   6  ,trend
23:12:04   7  ,g6
23:12:04   8  ,gatt
23:12:04   9  ,gattn
23:12:04  10  FROM svm6162
23:12:04  11  /

Table created.

Elapsed: 00:00:00.09
23:12:04 SQL> 
23:12:04 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
23:12:04 SQL> 
23:12:04 SQL> DROP   TABLE aud_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
23:12:05 SQL> CREATE TABLE aud_ms610 COMPRESS AS
23:12:05   2  SELECT
23:12:05   3  ydate
23:12:05   4  ,trend aud_trend
23:12:05   5  ,g6    aud_g6
23:12:05   6  ,gatt  aud_gatt
23:12:05   7  ,gattn aud_gattn
23:12:05   8  FROM modsrc
23:12:05   9  /

Table created.

Elapsed: 00:00:00.06
23:12:05 SQL> 
23:12:05 SQL> ANALYZE TABLE aud_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
23:12:05 SQL> 
23:12:05 SQL> -- I need a copy of the attributes:
23:12:05 SQL> 
23:12:05 SQL> 
23:12:05 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.07
23:12:05 SQL> CREATE TABLE aud_att COMPRESS AS
23:12:05   2  SELECT
23:12:05   3  ydate
23:12:05   4  ,att00 aud_att00
23:12:05   5  ,att01 aud_att01
23:12:05   6  ,att02 aud_att02
23:12:05   7  ,att03 aud_att03
23:12:05   8  ,att04 aud_att04
23:12:05   9  ,att05 aud_att05
23:12:05  10  ,att06 aud_att06
23:12:05  11  ,att07 aud_att07
23:12:05  12  ,att08 aud_att08
23:12:05  13  ,att09 aud_att09
23:12:05  14  ,att10 aud_att10
23:12:05  15  ,att11 aud_att11
23:12:05  16  ,att12 aud_att12
23:12:05  17  ,att13 aud_att13
23:12:05  18  ,att14 aud_att14
23:12:05  19  ,att15 aud_att15
23:12:05  20  ,att16 aud_att16
23:12:05  21  ,att17 aud_att17
23:12:05  22  ,att18 aud_att18
23:12:05  23  ,att19 aud_att19
23:12:05  24  ,att20 aud_att20
23:12:05  25  ,att21 aud_att21
23:12:05  26  ,att22 aud_att22
23:12:05  27  ,att23 aud_att23
23:12:05  28  ,att24 aud_att24
23:12:05  29  ,att25 aud_att25
23:12:05  30  ,att26 aud_att26
23:12:05  31  ,att27 aud_att27
23:12:05  32  ,att28 aud_att28
23:12:05  33  ,att29 aud_att29
23:12:05  34  ,att30 aud_att30
23:12:05  35  ,att31 aud_att31
23:12:05  36  ,att32 aud_att32
23:12:05  37  ,att33 aud_att33
23:12:05  38  ,att34 aud_att34
23:12:05  39  ,att35 aud_att35
23:12:05  40  ,att36 aud_att36
23:12:05  41  ,att37 aud_att37
23:12:05  42  FROM svm6162
23:12:05  43  /

Table created.

Elapsed: 00:00:00.18
23:12:05 SQL> 
23:12:05 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.56
23:12:06 SQL> 
23:12:06 SQL> -- rpt
23:12:06 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19793

Elapsed: 00:00:00.92
23:12:06 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     19793

Elapsed: 00:00:00.01
23:12:06 SQL> 
23:12:06 SQL> --
23:12:06 SQL> -- gbp610.sql
23:12:06 SQL> --
23:12:06 SQL> 
23:12:06 SQL> -- Creates views and tables for backtesting a forex SVM strategy
23:12:06 SQL> 
23:12:06 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.54
23:12:07 SQL> 
23:12:07 SQL> -- I created di5min here:
23:12:07 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
23:12:07 SQL> 
23:12:07 SQL> CREATE OR REPLACE VIEW svm6102 AS
23:12:07   2  SELECT
23:12:07   3  pair
23:12:07   4  ,ydate
23:12:07   5  ,prdate
23:12:07   6  ,rownum rnum -- acts as t in my time-series
23:12:07   7  ,clse
23:12:07   8  -- Derive a bunch of attributes from clse, the latest price:
23:12:07   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
23:12:07  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
23:12:07  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
23:12:07  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
23:12:07  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
23:12:07  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
23:12:07  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
23:12:07  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
23:12:07  17  --
23:12:07  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
23:12:07  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
23:12:07  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
23:12:07  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
23:12:07  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
23:12:07  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
23:12:07  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
23:12:07  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
23:12:07  26  --
23:12:07  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
23:12:07  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
23:12:07  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
23:12:07  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
23:12:07  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
23:12:07  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
23:12:07  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
23:12:07  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
23:12:07  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
23:12:07  36  FROM di5min WHERE pair LIKE'%gbp%'
23:12:07  37  AND ydate > sysdate - 95
23:12:07  38  ORDER BY ydate
23:12:07  39  /

View created.

Elapsed: 00:00:00.05
23:12:07 SQL> 
23:12:07 SQL> -- rpt
23:12:07 SQL> 
23:12:07 SQL> SELECT
23:12:07   2  pair
23:12:07   3  ,COUNT(pair)
23:12:07   4  ,MIN(clse),MAX(clse)
23:12:07   5  ,MIN(avg6),MAX(avg6)
23:12:07   6  ,MIN(ydate),MAX(ydate)
23:12:07   7  FROM svm6102
23:12:07   8  GROUP BY pair
23:12:07   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
gbp_usd       19795   1.535325	   1.6295 1.53696747 1.62716986 2010-10-04 23:15:01 2011-01-07 21:55:00

Elapsed: 00:00:00.87
23:12:08 SQL> 
23:12:08 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
23:12:08 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.27
23:12:08 SQL> CREATE TABLE svm6122 COMPRESS AS
23:12:08   2  SELECT
23:12:08   3  pair
23:12:08   4  ,ydate
23:12:08   5  ,prdate
23:12:08   6  ,clse
23:12:08   7  -- g6 is important. I want to predict g6:
23:12:08   8  ,ld6 - clse g6
23:12:08   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
23:12:08  10  -- I want more attributes from the ones I derived above:
23:12:08  11  -- clse relation to moving-min
23:12:08  12  ,clse-min4  cm4
23:12:08  13  ,clse-min6  cm6
23:12:08  14  ,clse-min8  cm8
23:12:08  15  ,clse-min10 cm10
23:12:08  16  ,clse-min12 cm12
23:12:08  17  ,clse-min14 cm14
23:12:08  18  ,clse-min16 cm16
23:12:08  19  ,clse-min18 cm18
23:12:08  20  -- clse relation to moving-avg
23:12:08  21  ,clse-avg4  ca4
23:12:08  22  ,clse-avg6  ca6
23:12:08  23  ,clse-avg8  ca8
23:12:08  24  ,clse-avg10 ca10
23:12:08  25  ,clse-avg12 ca12
23:12:08  26  ,clse-avg14 ca14
23:12:08  27  ,clse-avg16 ca16
23:12:08  28  ,clse-avg18 ca18
23:12:08  29  -- clse relation to moving-max
23:12:08  30  ,clse-max4  cx4
23:12:08  31  ,clse-max6  cx6
23:12:08  32  ,clse-max8  cx8
23:12:08  33  ,clse-max10 cx10
23:12:08  34  ,clse-max12 cx12
23:12:08  35  ,clse-max14 cx14
23:12:08  36  ,clse-max16 cx16
23:12:08  37  ,clse-max18 cx18
23:12:08  38  -- Derive more attributes.
23:12:08  39  -- I want to use CORR() here to help SVM see the shape of the series.
23:12:08  40  -- But COVAR_POP is more stable:
23:12:08  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
23:12:08  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
23:12:08  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
23:12:08  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
23:12:08  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
23:12:08  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
23:12:08  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
23:12:08  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
23:12:08  49  -- Derive date related attributes:
23:12:08  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
23:12:08  51  ,0+TO_CHAR(ydate,'D')d
23:12:08  52  ,0+TO_CHAR(ydate,'W')w
23:12:08  53  -- mpm stands for minutes-past-midnight:
23:12:08  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
23:12:08  55  -- mph stands for minutes-past-hour:
23:12:08  56  ,0+TO_CHAR(ydate,'MI')mph
23:12:08  57  FROM svm6102
23:12:08  58  ORDER BY ydate
23:12:08  59  /

Table created.

Elapsed: 00:00:02.07
23:12:10 SQL> 
23:12:10 SQL> -- rpt
23:12:10 SQL> 
23:12:10 SQL> SELECT
23:12:10   2  pair
23:12:10   3  ,COUNT(pair)
23:12:10   4  ,MIN(clse),MAX(clse)
23:12:10   5  ,MIN(ydate),MAX(ydate)
23:12:10   6  FROM svm6122
23:12:10   7  GROUP BY pair
23:12:10   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
gbp_usd       19795   1.535325	   1.6295 2010-10-04 23:15:01 2011-01-07 21:55:00

Elapsed: 00:00:00.04
23:12:10 SQL> 
23:12:10 SQL> -- Prepare for derivation of NTILE based params:
23:12:10 SQL> 
23:12:10 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.25
23:12:11 SQL> CREATE TABLE svm6142 COMPRESS AS
23:12:11   2  SELECT
23:12:11   3  pair
23:12:11   4  ,ydate
23:12:11   5  ,prdate
23:12:11   6  ,clse
23:12:11   7  ,g6
23:12:11   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
23:12:11   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
23:12:11  10  ,CASE WHEN trend IS NULL THEN 1
23:12:11  11  	    WHEN trend =0      THEN 1
23:12:11  12  	    ELSE trend END trend
23:12:11  13  ,cm4
23:12:11  14  ,cm6
23:12:11  15  ,cm8
23:12:11  16  ,cm10
23:12:11  17  ,cm12
23:12:11  18  ,cm14
23:12:11  19  ,cm16
23:12:11  20  ,cm18
23:12:11  21  --
23:12:11  22  ,ca4
23:12:11  23  ,ca6
23:12:11  24  ,ca8
23:12:11  25  ,ca10
23:12:11  26  ,ca12
23:12:11  27  ,ca14
23:12:11  28  ,ca16
23:12:11  29  ,ca18
23:12:11  30  --
23:12:11  31  ,cx4
23:12:11  32  ,cx6
23:12:11  33  ,cx8
23:12:11  34  ,cx10
23:12:11  35  ,cx12
23:12:11  36  ,cx14
23:12:11  37  ,cx16
23:12:11  38  ,cx18
23:12:11  39  --
23:12:11  40  ,crr4
23:12:11  41  ,crr6
23:12:11  42  ,crr8
23:12:11  43  ,crr10
23:12:11  44  ,crr12
23:12:11  45  ,crr14
23:12:11  46  ,crr16
23:12:11  47  ,crr18
23:12:11  48  --
23:12:11  49  ,hh
23:12:11  50  ,d
23:12:11  51  ,w
23:12:11  52  ,mpm
23:12:11  53  ,mph
23:12:11  54  FROM svm6122
23:12:11  55  ORDER BY ydate
23:12:11  56  /

Table created.

Elapsed: 00:00:00.36
23:12:11 SQL> 
23:12:11 SQL> -- rpt
23:12:11 SQL> 
23:12:11 SQL> SELECT
23:12:11   2  pair
23:12:11   3  ,trend
23:12:11   4  ,gatt
23:12:11   5  ,COUNT(pair)
23:12:11   6  ,AVG(g6)
23:12:11   7  FROM svm6142
23:12:11   8  GROUP BY pair,trend,gatt
23:12:11   9  ORDER BY pair,trend,gatt
23:12:11  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6439 -.00261912
gbp_usd 	-1 up	      3536 .004331625
gbp_usd 	-1		 4
gbp_usd 	 1 nup	      6214 -.00266504
gbp_usd 	 1 up	      3534 .004600294
gbp_usd 	 1		68

6 rows selected.

Elapsed: 00:00:00.04
23:12:11 SQL> 
23:12:11 SQL> 
23:12:11 SQL> -- Derive NTILE based params:
23:12:11 SQL> 
23:12:11 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.23
23:12:11 SQL> CREATE TABLE svm6162 COMPRESS AS
23:12:11   2  SELECT
23:12:11   3  pair
23:12:11   4  ,ydate
23:12:11   5  ,prdate
23:12:11   6  ,clse
23:12:11   7  ,g6
23:12:11   8  ,gatt
23:12:11   9  ,gattn
23:12:11  10  ,trend
23:12:11  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
23:12:11  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
23:12:11  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
23:12:11  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
23:12:11  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
23:12:11  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
23:12:11  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
23:12:11  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
23:12:11  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
23:12:11  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
23:12:11  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
23:12:11  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
23:12:11  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
23:12:11  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
23:12:11  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
23:12:11  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
23:12:11  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
23:12:11  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
23:12:11  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
23:12:11  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
23:12:11  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
23:12:11  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
23:12:11  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
23:12:11  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
23:12:11  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
23:12:11  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
23:12:11  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
23:12:11  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
23:12:11  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
23:12:11  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
23:12:11  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
23:12:11  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
23:12:11  43  ,hh  att32
23:12:11  44  ,d   att33
23:12:11  45  ,w   att34
23:12:11  46  ,mpm att35
23:12:11  47  ,mph att36
23:12:11  48  ,trend att37
23:12:11  49  FROM svm6142
23:12:11  50  ORDER BY ydate
23:12:11  51  /

Table created.

Elapsed: 00:00:04.79
23:12:16 SQL> 
23:12:16 SQL> -- rpt
23:12:16 SQL> 
23:12:16 SQL> SELECT
23:12:16   2  pair
23:12:16   3  ,trend
23:12:16   4  ,gatt
23:12:16   5  ,COUNT(pair)
23:12:16   6  ,AVG(g6)
23:12:16   7  FROM svm6162
23:12:16   8  GROUP BY pair,trend,gatt
23:12:16   9  ORDER BY pair,trend,gatt
23:12:16  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6439 -.00261912
gbp_usd 	-1 up	      3536 .004331625
gbp_usd 	-1		 4
gbp_usd 	 1 nup	      6214 -.00266504
gbp_usd 	 1 up	      3534 .004600294
gbp_usd 	 1		68

6 rows selected.

Elapsed: 00:00:00.03
23:12:16 SQL> 
23:12:16 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.11
23:12:16 SQL> CREATE TABLE modsrc COMPRESS AS
23:12:16   2  SELECT
23:12:16   3  pair
23:12:16   4  ,ydate
23:12:16   5  ,prdate
23:12:16   6  ,trend
23:12:16   7  ,g6
23:12:16   8  ,gatt
23:12:16   9  ,gattn
23:12:16  10  FROM svm6162
23:12:16  11  /

Table created.

Elapsed: 00:00:00.09
23:12:16 SQL> 
23:12:16 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
23:12:16 SQL> 
23:12:16 SQL> DROP   TABLE gbp_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
23:12:16 SQL> CREATE TABLE gbp_ms610 COMPRESS AS
23:12:16   2  SELECT
23:12:16   3  ydate
23:12:16   4  ,trend gbp_trend
23:12:16   5  ,g6    gbp_g6
23:12:16   6  ,gatt  gbp_gatt
23:12:16   7  ,gattn gbp_gattn
23:12:16   8  FROM modsrc
23:12:16   9  /

Table created.

Elapsed: 00:00:00.06
23:12:17 SQL> 
23:12:17 SQL> ANALYZE TABLE gbp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
23:12:17 SQL> 
23:12:17 SQL> -- I need a copy of the attributes:
23:12:17 SQL> 
23:12:17 SQL> 
23:12:17 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.20
23:12:17 SQL> CREATE TABLE gbp_att COMPRESS AS
23:12:17   2  SELECT
23:12:17   3  ydate
23:12:17   4  ,att00 gbp_att00
23:12:17   5  ,att01 gbp_att01
23:12:17   6  ,att02 gbp_att02
23:12:17   7  ,att03 gbp_att03
23:12:17   8  ,att04 gbp_att04
23:12:17   9  ,att05 gbp_att05
23:12:17  10  ,att06 gbp_att06
23:12:17  11  ,att07 gbp_att07
23:12:17  12  ,att08 gbp_att08
23:12:17  13  ,att09 gbp_att09
23:12:17  14  ,att10 gbp_att10
23:12:17  15  ,att11 gbp_att11
23:12:17  16  ,att12 gbp_att12
23:12:17  17  ,att13 gbp_att13
23:12:17  18  ,att14 gbp_att14
23:12:17  19  ,att15 gbp_att15
23:12:17  20  ,att16 gbp_att16
23:12:17  21  ,att17 gbp_att17
23:12:17  22  ,att18 gbp_att18
23:12:17  23  ,att19 gbp_att19
23:12:17  24  ,att20 gbp_att20
23:12:17  25  ,att21 gbp_att21
23:12:17  26  ,att22 gbp_att22
23:12:17  27  ,att23 gbp_att23
23:12:17  28  ,att24 gbp_att24
23:12:17  29  ,att25 gbp_att25
23:12:17  30  ,att26 gbp_att26
23:12:17  31  ,att27 gbp_att27
23:12:17  32  ,att28 gbp_att28
23:12:17  33  ,att29 gbp_att29
23:12:17  34  ,att30 gbp_att30
23:12:17  35  ,att31 gbp_att31
23:12:17  36  ,att32 gbp_att32
23:12:17  37  ,att33 gbp_att33
23:12:17  38  ,att34 gbp_att34
23:12:17  39  ,att35 gbp_att35
23:12:17  40  ,att36 gbp_att36
23:12:17  41  ,att37 gbp_att37
23:12:17  42  FROM svm6162
23:12:17  43  /

Table created.

Elapsed: 00:00:00.21
23:12:17 SQL> 
23:12:17 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
23:12:18 SQL> 
23:12:18 SQL> -- rpt
23:12:18 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19795

Elapsed: 00:00:00.88
23:12:18 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     19795

Elapsed: 00:00:00.01
23:12:18 SQL> 
23:12:18 SQL> --
23:12:18 SQL> -- jpy610.sql
23:12:18 SQL> --
23:12:18 SQL> 
23:12:18 SQL> -- Creates views and tables for backtesting a forex SVM strategy
23:12:18 SQL> 
23:12:18 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.36
23:12:19 SQL> 
23:12:19 SQL> -- I created di5min here:
23:12:19 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
23:12:19 SQL> 
23:12:19 SQL> CREATE OR REPLACE VIEW svm6102 AS
23:12:19   2  SELECT
23:12:19   3  pair
23:12:19   4  ,ydate
23:12:19   5  ,prdate
23:12:19   6  ,rownum rnum -- acts as t in my time-series
23:12:19   7  ,clse
23:12:19   8  -- Derive a bunch of attributes from clse, the latest price:
23:12:19   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
23:12:19  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
23:12:19  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
23:12:19  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
23:12:19  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
23:12:19  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
23:12:19  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
23:12:19  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
23:12:19  17  --
23:12:19  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
23:12:19  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
23:12:19  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
23:12:19  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
23:12:19  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
23:12:19  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
23:12:19  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
23:12:19  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
23:12:19  26  --
23:12:19  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
23:12:19  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
23:12:19  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
23:12:19  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
23:12:19  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
23:12:19  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
23:12:19  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
23:12:19  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
23:12:19  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
23:12:19  36  FROM di5min WHERE pair LIKE'%jpy%'
23:12:19  37  AND ydate > sysdate - 95
23:12:19  38  ORDER BY ydate
23:12:19  39  /

View created.

Elapsed: 00:00:00.04
23:12:19 SQL> 
23:12:19 SQL> -- rpt
23:12:19 SQL> 
23:12:19 SQL> SELECT
23:12:19   2  pair
23:12:19   3  ,COUNT(pair)
23:12:19   4  ,MIN(clse),MAX(clse)
23:12:19   5  ,MIN(avg6),MAX(avg6)
23:12:19   6  ,MIN(ydate),MAX(ydate)
23:12:19   7  FROM svm6102
23:12:19   8  GROUP BY pair
23:12:19   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_jpy       19794	 80.25	   84.485 80.3595205 84.3105479 2010-10-04 23:15:01 2011-01-07 21:55:00

Elapsed: 00:00:00.92
23:12:20 SQL> 
23:12:20 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
23:12:20 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.25
23:12:20 SQL> CREATE TABLE svm6122 COMPRESS AS
23:12:20   2  SELECT
23:12:20   3  pair
23:12:20   4  ,ydate
23:12:20   5  ,prdate
23:12:20   6  ,clse
23:12:20   7  -- g6 is important. I want to predict g6:
23:12:20   8  ,ld6 - clse g6
23:12:20   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
23:12:20  10  -- I want more attributes from the ones I derived above:
23:12:20  11  -- clse relation to moving-min
23:12:20  12  ,clse-min4  cm4
23:12:20  13  ,clse-min6  cm6
23:12:20  14  ,clse-min8  cm8
23:12:20  15  ,clse-min10 cm10
23:12:20  16  ,clse-min12 cm12
23:12:20  17  ,clse-min14 cm14
23:12:20  18  ,clse-min16 cm16
23:12:20  19  ,clse-min18 cm18
23:12:20  20  -- clse relation to moving-avg
23:12:20  21  ,clse-avg4  ca4
23:12:20  22  ,clse-avg6  ca6
23:12:20  23  ,clse-avg8  ca8
23:12:20  24  ,clse-avg10 ca10
23:12:20  25  ,clse-avg12 ca12
23:12:20  26  ,clse-avg14 ca14
23:12:20  27  ,clse-avg16 ca16
23:12:20  28  ,clse-avg18 ca18
23:12:20  29  -- clse relation to moving-max
23:12:20  30  ,clse-max4  cx4
23:12:20  31  ,clse-max6  cx6
23:12:20  32  ,clse-max8  cx8
23:12:20  33  ,clse-max10 cx10
23:12:20  34  ,clse-max12 cx12
23:12:20  35  ,clse-max14 cx14
23:12:20  36  ,clse-max16 cx16
23:12:20  37  ,clse-max18 cx18
23:12:20  38  -- Derive more attributes.
23:12:20  39  -- I want to use CORR() here to help SVM see the shape of the series.
23:12:20  40  -- But COVAR_POP is more stable:
23:12:20  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
23:12:20  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
23:12:20  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
23:12:20  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
23:12:20  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
23:12:20  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
23:12:20  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
23:12:20  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
23:12:20  49  -- Derive date related attributes:
23:12:20  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
23:12:20  51  ,0+TO_CHAR(ydate,'D')d
23:12:20  52  ,0+TO_CHAR(ydate,'W')w
23:12:20  53  -- mpm stands for minutes-past-midnight:
23:12:20  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
23:12:20  55  -- mph stands for minutes-past-hour:
23:12:20  56  ,0+TO_CHAR(ydate,'MI')mph
23:12:20  57  FROM svm6102
23:12:20  58  ORDER BY ydate
23:12:20  59  /

Table created.

Elapsed: 00:00:02.11
23:12:22 SQL> 
23:12:22 SQL> -- rpt
23:12:22 SQL> 
23:12:22 SQL> SELECT
23:12:22   2  pair
23:12:22   3  ,COUNT(pair)
23:12:22   4  ,MIN(clse),MAX(clse)
23:12:22   5  ,MIN(ydate),MAX(ydate)
23:12:22   6  FROM svm6122
23:12:22   7  GROUP BY pair
23:12:22   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_jpy       19794	 80.25	   84.485 2010-10-04 23:15:01 2011-01-07 21:55:00

Elapsed: 00:00:00.04
23:12:22 SQL> 
23:12:22 SQL> -- Prepare for derivation of NTILE based params:
23:12:22 SQL> 
23:12:22 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.24
23:12:22 SQL> CREATE TABLE svm6142 COMPRESS AS
23:12:22   2  SELECT
23:12:22   3  pair
23:12:22   4  ,ydate
23:12:22   5  ,prdate
23:12:22   6  ,clse
23:12:22   7  ,g6
23:12:22   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
23:12:22   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
23:12:22  10  ,CASE WHEN trend IS NULL THEN 1
23:12:22  11  	    WHEN trend =0      THEN 1
23:12:22  12  	    ELSE trend END trend
23:12:22  13  ,cm4
23:12:22  14  ,cm6
23:12:22  15  ,cm8
23:12:22  16  ,cm10
23:12:22  17  ,cm12
23:12:22  18  ,cm14
23:12:22  19  ,cm16
23:12:22  20  ,cm18
23:12:22  21  --
23:12:22  22  ,ca4
23:12:22  23  ,ca6
23:12:22  24  ,ca8
23:12:22  25  ,ca10
23:12:22  26  ,ca12
23:12:22  27  ,ca14
23:12:22  28  ,ca16
23:12:22  29  ,ca18
23:12:22  30  --
23:12:22  31  ,cx4
23:12:22  32  ,cx6
23:12:22  33  ,cx8
23:12:22  34  ,cx10
23:12:22  35  ,cx12
23:12:22  36  ,cx14
23:12:22  37  ,cx16
23:12:22  38  ,cx18
23:12:22  39  --
23:12:22  40  ,crr4
23:12:22  41  ,crr6
23:12:22  42  ,crr8
23:12:22  43  ,crr10
23:12:22  44  ,crr12
23:12:22  45  ,crr14
23:12:22  46  ,crr16
23:12:22  47  ,crr18
23:12:22  48  --
23:12:22  49  ,hh
23:12:22  50  ,d
23:12:22  51  ,w
23:12:22  52  ,mpm
23:12:22  53  ,mph
23:12:22  54  FROM svm6122
23:12:22  55  ORDER BY ydate
23:12:22  56  /

Table created.

Elapsed: 00:00:00.36
23:12:23 SQL> 
23:12:23 SQL> -- rpt
23:12:23 SQL> 
23:12:23 SQL> SELECT
23:12:23   2  pair
23:12:23   3  ,trend
23:12:23   4  ,gatt
23:12:23   5  ,COUNT(pair)
23:12:23   6  ,AVG(g6)
23:12:23   7  FROM svm6142
23:12:23   8  GROUP BY pair,trend,gatt
23:12:23   9  ORDER BY pair,trend,gatt
23:12:23  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5221 -.16565226
usd_jpy 	-1 up	      4870 .171145454
usd_jpy 	-1		70
usd_jpy 	 1 nup	      5062 -.15748063
usd_jpy 	 1 up	      4569 .173120826
usd_jpy 	 1		 2

6 rows selected.

Elapsed: 00:00:00.04
23:12:23 SQL> 
23:12:23 SQL> 
23:12:23 SQL> -- Derive NTILE based params:
23:12:23 SQL> 
23:12:23 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.15
23:12:23 SQL> CREATE TABLE svm6162 COMPRESS AS
23:12:23   2  SELECT
23:12:23   3  pair
23:12:23   4  ,ydate
23:12:23   5  ,prdate
23:12:23   6  ,clse
23:12:23   7  ,g6
23:12:23   8  ,gatt
23:12:23   9  ,gattn
23:12:23  10  ,trend
23:12:23  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
23:12:23  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
23:12:23  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
23:12:23  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
23:12:23  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
23:12:23  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
23:12:23  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
23:12:23  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
23:12:23  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
23:12:23  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
23:12:23  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
23:12:23  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
23:12:23  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
23:12:23  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
23:12:23  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
23:12:23  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
23:12:23  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
23:12:23  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
23:12:23  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
23:12:23  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
23:12:23  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
23:12:23  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
23:12:23  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
23:12:23  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
23:12:23  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
23:12:23  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
23:12:23  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
23:12:23  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
23:12:23  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
23:12:23  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
23:12:23  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
23:12:23  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
23:12:23  43  ,hh  att32
23:12:23  44  ,d   att33
23:12:23  45  ,w   att34
23:12:23  46  ,mpm att35
23:12:23  47  ,mph att36
23:12:23  48  ,trend att37
23:12:23  49  FROM svm6142
23:12:23  50  ORDER BY ydate
23:12:23  51  /

Table created.

Elapsed: 00:00:04.84
23:12:28 SQL> 
23:12:28 SQL> -- rpt
23:12:28 SQL> 
23:12:28 SQL> SELECT
23:12:28   2  pair
23:12:28   3  ,trend
23:12:28   4  ,gatt
23:12:28   5  ,COUNT(pair)
23:12:28   6  ,AVG(g6)
23:12:28   7  FROM svm6162
23:12:28   8  GROUP BY pair,trend,gatt
23:12:28   9  ORDER BY pair,trend,gatt
23:12:28  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5221 -.16565226
usd_jpy 	-1 up	      4870 .171145454
usd_jpy 	-1		70
usd_jpy 	 1 nup	      5062 -.15748063
usd_jpy 	 1 up	      4569 .173120826
usd_jpy 	 1		 2

6 rows selected.

Elapsed: 00:00:00.03
23:12:28 SQL> 
23:12:28 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.20
23:12:28 SQL> CREATE TABLE modsrc COMPRESS AS
23:12:28   2  SELECT
23:12:28   3  pair
23:12:28   4  ,ydate
23:12:28   5  ,prdate
23:12:28   6  ,trend
23:12:28   7  ,g6
23:12:28   8  ,gatt
23:12:28   9  ,gattn
23:12:28  10  FROM svm6162
23:12:28  11  /

Table created.

Elapsed: 00:00:00.09
23:12:28 SQL> 
23:12:28 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:01.51
23:12:30 SQL> 
23:12:30 SQL> DROP   TABLE jpy_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
23:12:30 SQL> CREATE TABLE jpy_ms610 COMPRESS AS
23:12:30   2  SELECT
23:12:30   3  ydate
23:12:30   4  ,trend jpy_trend
23:12:30   5  ,g6    jpy_g6
23:12:30   6  ,gatt  jpy_gatt
23:12:30   7  ,gattn jpy_gattn
23:12:30   8  FROM modsrc
23:12:30   9  /

Table created.

Elapsed: 00:00:00.08
23:12:30 SQL> 
23:12:30 SQL> ANALYZE TABLE jpy_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
23:12:30 SQL> 
23:12:30 SQL> -- I need a copy of the attributes:
23:12:30 SQL> 
23:12:30 SQL> 
23:12:30 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.13
23:12:30 SQL> CREATE TABLE jpy_att COMPRESS AS
23:12:30   2  SELECT
23:12:30   3  ydate
23:12:30   4  ,att00 jpy_att00
23:12:30   5  ,att01 jpy_att01
23:12:30   6  ,att02 jpy_att02
23:12:30   7  ,att03 jpy_att03
23:12:30   8  ,att04 jpy_att04
23:12:30   9  ,att05 jpy_att05
23:12:30  10  ,att06 jpy_att06
23:12:30  11  ,att07 jpy_att07
23:12:30  12  ,att08 jpy_att08
23:12:30  13  ,att09 jpy_att09
23:12:30  14  ,att10 jpy_att10
23:12:30  15  ,att11 jpy_att11
23:12:30  16  ,att12 jpy_att12
23:12:30  17  ,att13 jpy_att13
23:12:30  18  ,att14 jpy_att14
23:12:30  19  ,att15 jpy_att15
23:12:30  20  ,att16 jpy_att16
23:12:30  21  ,att17 jpy_att17
23:12:30  22  ,att18 jpy_att18
23:12:30  23  ,att19 jpy_att19
23:12:30  24  ,att20 jpy_att20
23:12:30  25  ,att21 jpy_att21
23:12:30  26  ,att22 jpy_att22
23:12:30  27  ,att23 jpy_att23
23:12:30  28  ,att24 jpy_att24
23:12:30  29  ,att25 jpy_att25
23:12:30  30  ,att26 jpy_att26
23:12:30  31  ,att27 jpy_att27
23:12:30  32  ,att28 jpy_att28
23:12:30  33  ,att29 jpy_att29
23:12:30  34  ,att30 jpy_att30
23:12:30  35  ,att31 jpy_att31
23:12:30  36  ,att32 jpy_att32
23:12:30  37  ,att33 jpy_att33
23:12:30  38  ,att34 jpy_att34
23:12:30  39  ,att35 jpy_att35
23:12:30  40  ,att36 jpy_att36
23:12:30  41  ,att37 jpy_att37
23:12:30  42  FROM svm6162
23:12:30  43  /

Table created.

Elapsed: 00:00:00.17
23:12:30 SQL> 
23:12:30 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
23:12:31 SQL> 
23:12:31 SQL> -- rpt
23:12:31 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19794

Elapsed: 00:00:00.89
23:12:32 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     19794

Elapsed: 00:00:00.00
23:12:32 SQL> 
23:12:32 SQL> --
23:12:32 SQL> -- cad610.sql
23:12:32 SQL> --
23:12:32 SQL> 
23:12:32 SQL> -- Creates views and tables for backtesting a forex SVM strategy
23:12:32 SQL> 
23:12:32 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.37
23:12:32 SQL> 
23:12:32 SQL> -- I created di5min here:
23:12:32 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
23:12:32 SQL> 
23:12:32 SQL> CREATE OR REPLACE VIEW svm6102 AS
23:12:32   2  SELECT
23:12:32   3  pair
23:12:32   4  ,ydate
23:12:32   5  ,prdate
23:12:32   6  ,rownum rnum -- acts as t in my time-series
23:12:32   7  ,clse
23:12:32   8  -- Derive a bunch of attributes from clse, the latest price:
23:12:32   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
23:12:32  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
23:12:32  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
23:12:32  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
23:12:32  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
23:12:32  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
23:12:32  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
23:12:32  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
23:12:32  17  --
23:12:32  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
23:12:32  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
23:12:32  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
23:12:32  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
23:12:32  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
23:12:32  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
23:12:32  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
23:12:32  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
23:12:32  26  --
23:12:32  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
23:12:32  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
23:12:32  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
23:12:32  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
23:12:32  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
23:12:32  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
23:12:32  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
23:12:32  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
23:12:32  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
23:12:32  36  FROM di5min WHERE pair LIKE'%cad%'
23:12:32  37  AND ydate > sysdate - 95
23:12:32  38  ORDER BY ydate
23:12:32  39  /

View created.

Elapsed: 00:00:00.04
23:12:32 SQL> 
23:12:32 SQL> -- rpt
23:12:32 SQL> 
23:12:32 SQL> SELECT
23:12:32   2  pair
23:12:32   3  ,COUNT(pair)
23:12:32   4  ,MIN(clse),MAX(clse)
23:12:32   5  ,MIN(avg6),MAX(avg6)
23:12:32   6  ,MIN(ydate),MAX(ydate)
23:12:32   7  FROM svm6102
23:12:32   8  GROUP BY pair
23:12:32   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_cad       19794    .988925	   1.0355  .99060274 1.03282877 2010-10-04 23:15:01 2011-01-07 21:55:00

Elapsed: 00:00:00.85
23:12:33 SQL> 
23:12:33 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
23:12:33 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.28
23:12:33 SQL> CREATE TABLE svm6122 COMPRESS AS
23:12:33   2  SELECT
23:12:33   3  pair
23:12:33   4  ,ydate
23:12:33   5  ,prdate
23:12:33   6  ,clse
23:12:33   7  -- g6 is important. I want to predict g6:
23:12:33   8  ,ld6 - clse g6
23:12:33   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
23:12:33  10  -- I want more attributes from the ones I derived above:
23:12:33  11  -- clse relation to moving-min
23:12:33  12  ,clse-min4  cm4
23:12:33  13  ,clse-min6  cm6
23:12:33  14  ,clse-min8  cm8
23:12:33  15  ,clse-min10 cm10
23:12:33  16  ,clse-min12 cm12
23:12:33  17  ,clse-min14 cm14
23:12:33  18  ,clse-min16 cm16
23:12:33  19  ,clse-min18 cm18
23:12:33  20  -- clse relation to moving-avg
23:12:33  21  ,clse-avg4  ca4
23:12:33  22  ,clse-avg6  ca6
23:12:33  23  ,clse-avg8  ca8
23:12:33  24  ,clse-avg10 ca10
23:12:33  25  ,clse-avg12 ca12
23:12:33  26  ,clse-avg14 ca14
23:12:33  27  ,clse-avg16 ca16
23:12:33  28  ,clse-avg18 ca18
23:12:33  29  -- clse relation to moving-max
23:12:33  30  ,clse-max4  cx4
23:12:33  31  ,clse-max6  cx6
23:12:33  32  ,clse-max8  cx8
23:12:33  33  ,clse-max10 cx10
23:12:33  34  ,clse-max12 cx12
23:12:33  35  ,clse-max14 cx14
23:12:33  36  ,clse-max16 cx16
23:12:33  37  ,clse-max18 cx18
23:12:33  38  -- Derive more attributes.
23:12:33  39  -- I want to use CORR() here to help SVM see the shape of the series.
23:12:33  40  -- But COVAR_POP is more stable:
23:12:33  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
23:12:33  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
23:12:33  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
23:12:33  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
23:12:33  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
23:12:33  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
23:12:33  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
23:12:33  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
23:12:33  49  -- Derive date related attributes:
23:12:33  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
23:12:33  51  ,0+TO_CHAR(ydate,'D')d
23:12:33  52  ,0+TO_CHAR(ydate,'W')w
23:12:33  53  -- mpm stands for minutes-past-midnight:
23:12:33  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
23:12:33  55  -- mph stands for minutes-past-hour:
23:12:33  56  ,0+TO_CHAR(ydate,'MI')mph
23:12:33  57  FROM svm6102
23:12:33  58  ORDER BY ydate
23:12:33  59  /

Table created.

Elapsed: 00:00:02.10
23:12:35 SQL> 
23:12:35 SQL> -- rpt
23:12:35 SQL> 
23:12:35 SQL> SELECT
23:12:35   2  pair
23:12:35   3  ,COUNT(pair)
23:12:35   4  ,MIN(clse),MAX(clse)
23:12:35   5  ,MIN(ydate),MAX(ydate)
23:12:35   6  FROM svm6122
23:12:35   7  GROUP BY pair
23:12:35   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_cad       19794    .988925	   1.0355 2010-10-04 23:15:01 2011-01-07 21:55:00

Elapsed: 00:00:00.04
23:12:35 SQL> 
23:12:35 SQL> -- Prepare for derivation of NTILE based params:
23:12:35 SQL> 
23:12:35 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.25
23:12:36 SQL> CREATE TABLE svm6142 COMPRESS AS
23:12:36   2  SELECT
23:12:36   3  pair
23:12:36   4  ,ydate
23:12:36   5  ,prdate
23:12:36   6  ,clse
23:12:36   7  ,g6
23:12:36   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
23:12:36   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
23:12:36  10  ,CASE WHEN trend IS NULL THEN 1
23:12:36  11  	    WHEN trend =0      THEN 1
23:12:36  12  	    ELSE trend END trend
23:12:36  13  ,cm4
23:12:36  14  ,cm6
23:12:36  15  ,cm8
23:12:36  16  ,cm10
23:12:36  17  ,cm12
23:12:36  18  ,cm14
23:12:36  19  ,cm16
23:12:36  20  ,cm18
23:12:36  21  --
23:12:36  22  ,ca4
23:12:36  23  ,ca6
23:12:36  24  ,ca8
23:12:36  25  ,ca10
23:12:36  26  ,ca12
23:12:36  27  ,ca14
23:12:36  28  ,ca16
23:12:36  29  ,ca18
23:12:36  30  --
23:12:36  31  ,cx4
23:12:36  32  ,cx6
23:12:36  33  ,cx8
23:12:36  34  ,cx10
23:12:36  35  ,cx12
23:12:36  36  ,cx14
23:12:36  37  ,cx16
23:12:36  38  ,cx18
23:12:36  39  --
23:12:36  40  ,crr4
23:12:36  41  ,crr6
23:12:36  42  ,crr8
23:12:36  43  ,crr10
23:12:36  44  ,crr12
23:12:36  45  ,crr14
23:12:36  46  ,crr16
23:12:36  47  ,crr18
23:12:36  48  --
23:12:36  49  ,hh
23:12:36  50  ,d
23:12:36  51  ,w
23:12:36  52  ,mpm
23:12:36  53  ,mph
23:12:36  54  FROM svm6122
23:12:36  55  ORDER BY ydate
23:12:36  56  /

Table created.

Elapsed: 00:00:00.38
23:12:36 SQL> 
23:12:36 SQL> -- rpt
23:12:36 SQL> 
23:12:36 SQL> SELECT
23:12:36   2  pair
23:12:36   3  ,trend
23:12:36   4  ,gatt
23:12:36   5  ,COUNT(pair)
23:12:36   6  ,AVG(g6)
23:12:36   7  FROM svm6142
23:12:36   8  GROUP BY pair,trend,gatt
23:12:36   9  ORDER BY pair,trend,gatt
23:12:36  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7347 -.00124075
usd_cad 	-1 up	      3165  .00304003
usd_cad 	-1		25
usd_cad 	 1 nup	      6804 -.00168055
usd_cad 	 1 up	      2406 .003640169
usd_cad 	 1		47

6 rows selected.

Elapsed: 00:00:00.03
23:12:36 SQL> 
23:12:36 SQL> 
23:12:36 SQL> -- Derive NTILE based params:
23:12:36 SQL> 
23:12:36 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.16
23:12:36 SQL> CREATE TABLE svm6162 COMPRESS AS
23:12:36   2  SELECT
23:12:36   3  pair
23:12:36   4  ,ydate
23:12:36   5  ,prdate
23:12:36   6  ,clse
23:12:36   7  ,g6
23:12:36   8  ,gatt
23:12:36   9  ,gattn
23:12:36  10  ,trend
23:12:36  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
23:12:36  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
23:12:36  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
23:12:36  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
23:12:36  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
23:12:36  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
23:12:36  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
23:12:36  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
23:12:36  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
23:12:36  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
23:12:36  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
23:12:36  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
23:12:36  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
23:12:36  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
23:12:36  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
23:12:36  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
23:12:36  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
23:12:36  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
23:12:36  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
23:12:36  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
23:12:36  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
23:12:36  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
23:12:36  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
23:12:36  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
23:12:36  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
23:12:36  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
23:12:36  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
23:12:36  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
23:12:36  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
23:12:36  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
23:12:36  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
23:12:36  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
23:12:36  43  ,hh  att32
23:12:36  44  ,d   att33
23:12:36  45  ,w   att34
23:12:36  46  ,mpm att35
23:12:36  47  ,mph att36
23:12:36  48  ,trend att37
23:12:36  49  FROM svm6142
23:12:36  50  ORDER BY ydate
23:12:36  51  /

Table created.

Elapsed: 00:00:04.81
23:12:41 SQL> 
23:12:41 SQL> -- rpt
23:12:41 SQL> 
23:12:41 SQL> SELECT
23:12:41   2  pair
23:12:41   3  ,trend
23:12:41   4  ,gatt
23:12:41   5  ,COUNT(pair)
23:12:41   6  ,AVG(g6)
23:12:41   7  FROM svm6162
23:12:41   8  GROUP BY pair,trend,gatt
23:12:41   9  ORDER BY pair,trend,gatt
23:12:41  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7347 -.00124075
usd_cad 	-1 up	      3165  .00304003
usd_cad 	-1		25
usd_cad 	 1 nup	      6804 -.00168055
usd_cad 	 1 up	      2406 .003640169
usd_cad 	 1		47

6 rows selected.

Elapsed: 00:00:00.03
23:12:41 SQL> 
23:12:41 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.14
23:12:41 SQL> CREATE TABLE modsrc COMPRESS AS
23:12:41   2  SELECT
23:12:41   3  pair
23:12:41   4  ,ydate
23:12:41   5  ,prdate
23:12:41   6  ,trend
23:12:41   7  ,g6
23:12:41   8  ,gatt
23:12:41   9  ,gattn
23:12:41  10  FROM svm6162
23:12:41  11  /

Table created.

Elapsed: 00:00:00.09
23:12:41 SQL> 
23:12:41 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
23:12:41 SQL> 
23:12:41 SQL> DROP   TABLE cad_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
23:12:41 SQL> CREATE TABLE cad_ms610 COMPRESS AS
23:12:41   2  SELECT
23:12:41   3  ydate
23:12:41   4  ,trend cad_trend
23:12:41   5  ,g6    cad_g6
23:12:41   6  ,gatt  cad_gatt
23:12:41   7  ,gattn cad_gattn
23:12:41   8  FROM modsrc
23:12:41   9  /

Table created.

Elapsed: 00:00:00.06
23:12:42 SQL> 
23:12:42 SQL> ANALYZE TABLE cad_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
23:12:42 SQL> 
23:12:42 SQL> -- I need a copy of the attributes:
23:12:42 SQL> 
23:12:42 SQL> 
23:12:42 SQL> DROP   TABLE cad_att;

Table dropped.

Elapsed: 00:00:00.04
23:12:42 SQL> CREATE TABLE cad_att COMPRESS AS
23:12:42   2  SELECT
23:12:42   3  ydate
23:12:42   4  ,att00 cad_att00
23:12:42   5  ,att01 cad_att01
23:12:42   6  ,att02 cad_att02
23:12:42   7  ,att03 cad_att03
23:12:42   8  ,att04 cad_att04
23:12:42   9  ,att05 cad_att05
23:12:42  10  ,att06 cad_att06
23:12:42  11  ,att07 cad_att07
23:12:42  12  ,att08 cad_att08
23:12:42  13  ,att09 cad_att09
23:12:42  14  ,att10 cad_att10
23:12:42  15  ,att11 cad_att11
23:12:42  16  ,att12 cad_att12
23:12:42  17  ,att13 cad_att13
23:12:42  18  ,att14 cad_att14
23:12:42  19  ,att15 cad_att15
23:12:42  20  ,att16 cad_att16
23:12:42  21  ,att17 cad_att17
23:12:42  22  ,att18 cad_att18
23:12:42  23  ,att19 cad_att19
23:12:42  24  ,att20 cad_att20
23:12:42  25  ,att21 cad_att21
23:12:42  26  ,att22 cad_att22
23:12:42  27  ,att23 cad_att23
23:12:42  28  ,att24 cad_att24
23:12:42  29  ,att25 cad_att25
23:12:42  30  ,att26 cad_att26
23:12:42  31  ,att27 cad_att27
23:12:42  32  ,att28 cad_att28
23:12:42  33  ,att29 cad_att29
23:12:42  34  ,att30 cad_att30
23:12:42  35  ,att31 cad_att31
23:12:42  36  ,att32 cad_att32
23:12:42  37  ,att33 cad_att33
23:12:42  38  ,att34 cad_att34
23:12:42  39  ,att35 cad_att35
23:12:42  40  ,att36 cad_att36
23:12:42  41  ,att37 cad_att37
23:12:42  42  FROM svm6162
23:12:42  43  /

Table created.

Elapsed: 00:00:00.18
23:12:42 SQL> 
23:12:42 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.44
23:12:42 SQL> 
23:12:42 SQL> -- rpt
23:12:42 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19794

Elapsed: 00:00:00.82
23:12:43 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
     19794

Elapsed: 00:00:00.01
23:12:43 SQL> 
23:12:43 SQL> --
23:12:43 SQL> -- chf610.sql
23:12:43 SQL> --
23:12:43 SQL> 
23:12:43 SQL> -- Creates views and tables for backtesting a forex SVM strategy
23:12:43 SQL> 
23:12:43 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.52
23:12:44 SQL> 
23:12:44 SQL> -- I created di5min here:
23:12:44 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
23:12:44 SQL> 
23:12:44 SQL> CREATE OR REPLACE VIEW svm6102 AS
23:12:44   2  SELECT
23:12:44   3  pair
23:12:44   4  ,ydate
23:12:44   5  ,prdate
23:12:44   6  ,rownum rnum -- acts as t in my time-series
23:12:44   7  ,clse
23:12:44   8  -- Derive a bunch of attributes from clse, the latest price:
23:12:44   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
23:12:44  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
23:12:44  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
23:12:44  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
23:12:44  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
23:12:44  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
23:12:44  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
23:12:44  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
23:12:44  17  --
23:12:44  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
23:12:44  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
23:12:44  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
23:12:44  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
23:12:44  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
23:12:44  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
23:12:44  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
23:12:44  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
23:12:44  26  --
23:12:44  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
23:12:44  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
23:12:44  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
23:12:44  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
23:12:44  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
23:12:44  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
23:12:44  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
23:12:44  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
23:12:44  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
23:12:44  36  FROM di5min WHERE pair LIKE'%chf%'
23:12:44  37  AND ydate > sysdate - 95
23:12:44  38  ORDER BY ydate
23:12:44  39  /

View created.

Elapsed: 00:00:00.05
23:12:44 SQL> 
23:12:44 SQL> -- rpt
23:12:44 SQL> 
23:12:44 SQL> SELECT
23:12:44   2  pair
23:12:44   3  ,COUNT(pair)
23:12:44   4  ,MIN(clse),MAX(clse)
23:12:44   5  ,MIN(avg6),MAX(avg6)
23:12:44   6  ,MIN(ydate),MAX(ydate)
23:12:44   7  FROM svm6102
23:12:44   8  GROUP BY pair
23:12:44   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_chf       19797    .931675	  1.00635 .933257705 1.00498151 2010-10-04 23:15:01 2011-01-07 21:55:00

Elapsed: 00:00:00.88
23:12:45 SQL> 
23:12:45 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
23:12:45 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.29
23:12:45 SQL> CREATE TABLE svm6122 COMPRESS AS
23:12:45   2  SELECT
23:12:45   3  pair
23:12:45   4  ,ydate
23:12:45   5  ,prdate
23:12:45   6  ,clse
23:12:45   7  -- g6 is important. I want to predict g6:
23:12:45   8  ,ld6 - clse g6
23:12:45   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
23:12:45  10  -- I want more attributes from the ones I derived above:
23:12:45  11  -- clse relation to moving-min
23:12:45  12  ,clse-min4  cm4
23:12:45  13  ,clse-min6  cm6
23:12:45  14  ,clse-min8  cm8
23:12:45  15  ,clse-min10 cm10
23:12:45  16  ,clse-min12 cm12
23:12:45  17  ,clse-min14 cm14
23:12:45  18  ,clse-min16 cm16
23:12:45  19  ,clse-min18 cm18
23:12:45  20  -- clse relation to moving-avg
23:12:45  21  ,clse-avg4  ca4
23:12:45  22  ,clse-avg6  ca6
23:12:45  23  ,clse-avg8  ca8
23:12:45  24  ,clse-avg10 ca10
23:12:45  25  ,clse-avg12 ca12
23:12:45  26  ,clse-avg14 ca14
23:12:45  27  ,clse-avg16 ca16
23:12:45  28  ,clse-avg18 ca18
23:12:45  29  -- clse relation to moving-max
23:12:45  30  ,clse-max4  cx4
23:12:45  31  ,clse-max6  cx6
23:12:45  32  ,clse-max8  cx8
23:12:45  33  ,clse-max10 cx10
23:12:45  34  ,clse-max12 cx12
23:12:45  35  ,clse-max14 cx14
23:12:45  36  ,clse-max16 cx16
23:12:45  37  ,clse-max18 cx18
23:12:45  38  -- Derive more attributes.
23:12:45  39  -- I want to use CORR() here to help SVM see the shape of the series.
23:12:45  40  -- But COVAR_POP is more stable:
23:12:45  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
23:12:45  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
23:12:45  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
23:12:45  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
23:12:45  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
23:12:45  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
23:12:45  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
23:12:45  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
23:12:45  49  -- Derive date related attributes:
23:12:45  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
23:12:45  51  ,0+TO_CHAR(ydate,'D')d
23:12:45  52  ,0+TO_CHAR(ydate,'W')w
23:12:45  53  -- mpm stands for minutes-past-midnight:
23:12:45  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
23:12:45  55  -- mph stands for minutes-past-hour:
23:12:45  56  ,0+TO_CHAR(ydate,'MI')mph
23:12:45  57  FROM svm6102
23:12:45  58  ORDER BY ydate
23:12:45  59  /

Table created.

Elapsed: 00:00:02.11
23:12:47 SQL> 
23:12:47 SQL> -- rpt
23:12:47 SQL> 
23:12:47 SQL> SELECT
23:12:47   2  pair
23:12:47   3  ,COUNT(pair)
23:12:47   4  ,MIN(clse),MAX(clse)
23:12:47   5  ,MIN(ydate),MAX(ydate)
23:12:47   6  FROM svm6122
23:12:47   7  GROUP BY pair
23:12:47   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_chf       19797    .931675	  1.00635 2010-10-04 23:15:01 2011-01-07 21:55:00

Elapsed: 00:00:00.04
23:12:47 SQL> 
23:12:47 SQL> -- Prepare for derivation of NTILE based params:
23:12:47 SQL> 
23:12:47 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.23
23:12:47 SQL> CREATE TABLE svm6142 COMPRESS AS
23:12:47   2  SELECT
23:12:47   3  pair
23:12:47   4  ,ydate
23:12:47   5  ,prdate
23:12:47   6  ,clse
23:12:47   7  ,g6
23:12:47   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
23:12:47   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
23:12:47  10  ,CASE WHEN trend IS NULL THEN 1
23:12:47  11  	    WHEN trend =0      THEN 1
23:12:47  12  	    ELSE trend END trend
23:12:47  13  ,cm4
23:12:47  14  ,cm6
23:12:47  15  ,cm8
23:12:47  16  ,cm10
23:12:47  17  ,cm12
23:12:47  18  ,cm14
23:12:47  19  ,cm16
23:12:47  20  ,cm18
23:12:47  21  --
23:12:47  22  ,ca4
23:12:47  23  ,ca6
23:12:47  24  ,ca8
23:12:47  25  ,ca10
23:12:47  26  ,ca12
23:12:47  27  ,ca14
23:12:47  28  ,ca16
23:12:47  29  ,ca18
23:12:47  30  --
23:12:47  31  ,cx4
23:12:47  32  ,cx6
23:12:47  33  ,cx8
23:12:47  34  ,cx10
23:12:47  35  ,cx12
23:12:47  36  ,cx14
23:12:47  37  ,cx16
23:12:47  38  ,cx18
23:12:47  39  --
23:12:47  40  ,crr4
23:12:47  41  ,crr6
23:12:47  42  ,crr8
23:12:47  43  ,crr10
23:12:47  44  ,crr12
23:12:47  45  ,crr14
23:12:47  46  ,crr16
23:12:47  47  ,crr18
23:12:47  48  --
23:12:47  49  ,hh
23:12:47  50  ,d
23:12:47  51  ,w
23:12:47  52  ,mpm
23:12:47  53  ,mph
23:12:47  54  FROM svm6122
23:12:47  55  ORDER BY ydate
23:12:47  56  /

Table created.

Elapsed: 00:00:00.38
23:12:48 SQL> 
23:12:48 SQL> -- rpt
23:12:48 SQL> 
23:12:48 SQL> SELECT
23:12:48   2  pair
23:12:48   3  ,trend
23:12:48   4  ,gatt
23:12:48   5  ,COUNT(pair)
23:12:48   6  ,AVG(g6)
23:12:48   7  FROM svm6142
23:12:48   8  GROUP BY pair,trend,gatt
23:12:48   9  ORDER BY pair,trend,gatt
23:12:48  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7043 -.00199108
usd_chf 	-1 up	      3120 .003801533
usd_chf 	-1		 3
usd_chf 	 1 nup	      6605 -.00150981
usd_chf 	 1 up	      2957 .003952297
usd_chf 	 1		69

6 rows selected.

Elapsed: 00:00:00.03
23:12:48 SQL> 
23:12:48 SQL> 
23:12:48 SQL> -- Derive NTILE based params:
23:12:48 SQL> 
23:12:48 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.17
23:12:48 SQL> CREATE TABLE svm6162 COMPRESS AS
23:12:48   2  SELECT
23:12:48   3  pair
23:12:48   4  ,ydate
23:12:48   5  ,prdate
23:12:48   6  ,clse
23:12:48   7  ,g6
23:12:48   8  ,gatt
23:12:48   9  ,gattn
23:12:48  10  ,trend
23:12:48  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
23:12:48  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
23:12:48  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
23:12:48  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
23:12:48  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
23:12:48  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
23:12:48  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
23:12:48  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
23:12:48  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
23:12:48  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
23:12:48  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
23:12:48  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
23:12:48  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
23:12:48  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
23:12:48  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
23:12:48  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
23:12:48  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
23:12:48  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
23:12:48  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
23:12:48  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
23:12:48  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
23:12:48  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
23:12:48  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
23:12:48  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
23:12:48  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
23:12:48  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
23:12:48  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
23:12:48  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
23:12:48  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
23:12:48  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
23:12:48  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
23:12:48  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
23:12:48  43  ,hh  att32
23:12:48  44  ,d   att33
23:12:48  45  ,w   att34
23:12:48  46  ,mpm att35
23:12:48  47  ,mph att36
23:12:48  48  ,trend att37
23:12:48  49  FROM svm6142
23:12:48  50  ORDER BY ydate
23:12:48  51  /

Table created.

Elapsed: 00:00:04.89
23:12:53 SQL> 
23:12:53 SQL> -- rpt
23:12:53 SQL> 
23:12:53 SQL> SELECT
23:12:53   2  pair
23:12:53   3  ,trend
23:12:53   4  ,gatt
23:12:53   5  ,COUNT(pair)
23:12:53   6  ,AVG(g6)
23:12:53   7  FROM svm6162
23:12:53   8  GROUP BY pair,trend,gatt
23:12:53   9  ORDER BY pair,trend,gatt
23:12:53  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7043 -.00199108
usd_chf 	-1 up	      3120 .003801533
usd_chf 	-1		 3
usd_chf 	 1 nup	      6605 -.00150981
usd_chf 	 1 up	      2957 .003952297
usd_chf 	 1		69

6 rows selected.

Elapsed: 00:00:00.03
23:12:53 SQL> 
23:12:53 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.14
23:12:53 SQL> CREATE TABLE modsrc COMPRESS AS
23:12:53   2  SELECT
23:12:53   3  pair
23:12:53   4  ,ydate
23:12:53   5  ,prdate
23:12:53   6  ,trend
23:12:53   7  ,g6
23:12:53   8  ,gatt
23:12:53   9  ,gattn
23:12:53  10  FROM svm6162
23:12:53  11  /

Table created.

Elapsed: 00:00:00.10
23:12:53 SQL> 
23:12:53 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
23:12:53 SQL> 
23:12:53 SQL> DROP   TABLE chf_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
23:12:53 SQL> CREATE TABLE chf_ms610 COMPRESS AS
23:12:53   2  SELECT
23:12:53   3  ydate
23:12:53   4  ,trend chf_trend
23:12:53   5  ,g6    chf_g6
23:12:53   6  ,gatt  chf_gatt
23:12:53   7  ,gattn chf_gattn
23:12:53   8  FROM modsrc
23:12:53   9  /

Table created.

Elapsed: 00:00:00.06
23:12:53 SQL> 
23:12:53 SQL> ANALYZE TABLE chf_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
23:12:54 SQL> 
23:12:54 SQL> -- I need a copy of the attributes:
23:12:54 SQL> 
23:12:54 SQL> 
23:12:54 SQL> DROP   TABLE chf_att;

Table dropped.

Elapsed: 00:00:00.05
23:12:54 SQL> CREATE TABLE chf_att COMPRESS AS
23:12:54   2  SELECT
23:12:54   3  ydate
23:12:54   4  ,att00 chf_att00
23:12:54   5  ,att01 chf_att01
23:12:54   6  ,att02 chf_att02
23:12:54   7  ,att03 chf_att03
23:12:54   8  ,att04 chf_att04
23:12:54   9  ,att05 chf_att05
23:12:54  10  ,att06 chf_att06
23:12:54  11  ,att07 chf_att07
23:12:54  12  ,att08 chf_att08
23:12:54  13  ,att09 chf_att09
23:12:54  14  ,att10 chf_att10
23:12:54  15  ,att11 chf_att11
23:12:54  16  ,att12 chf_att12
23:12:54  17  ,att13 chf_att13
23:12:54  18  ,att14 chf_att14
23:12:54  19  ,att15 chf_att15
23:12:54  20  ,att16 chf_att16
23:12:54  21  ,att17 chf_att17
23:12:54  22  ,att18 chf_att18
23:12:54  23  ,att19 chf_att19
23:12:54  24  ,att20 chf_att20
23:12:54  25  ,att21 chf_att21
23:12:54  26  ,att22 chf_att22
23:12:54  27  ,att23 chf_att23
23:12:54  28  ,att24 chf_att24
23:12:54  29  ,att25 chf_att25
23:12:54  30  ,att26 chf_att26
23:12:54  31  ,att27 chf_att27
23:12:54  32  ,att28 chf_att28
23:12:54  33  ,att29 chf_att29
23:12:54  34  ,att30 chf_att30
23:12:54  35  ,att31 chf_att31
23:12:54  36  ,att32 chf_att32
23:12:54  37  ,att33 chf_att33
23:12:54  38  ,att34 chf_att34
23:12:54  39  ,att35 chf_att35
23:12:54  40  ,att36 chf_att36
23:12:54  41  ,att37 chf_att37
23:12:54  42  FROM svm6162
23:12:54  43  /

Table created.

Elapsed: 00:00:00.18
23:12:54 SQL> 
23:12:54 SQL> ANALYZE TABLE chf_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.49
23:12:54 SQL> 
23:12:54 SQL> -- rpt
23:12:54 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19797

Elapsed: 00:00:00.85
23:12:55 SQL> SELECT COUNT(*)FROM chf_att;

  COUNT(*)
----------
     19797

Elapsed: 00:00:00.01
23:12:55 SQL> 
23:12:55 SQL> --
23:12:55 SQL> -- ech610.sql
23:12:55 SQL> --
23:12:55 SQL> 
23:12:55 SQL> -- Creates views and tables for backtesting a forex SVM strategy
23:12:55 SQL> 
23:12:55 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.45
23:12:56 SQL> 
23:12:56 SQL> -- I created di5min here:
23:12:56 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
23:12:56 SQL> 
23:12:56 SQL> CREATE OR REPLACE VIEW svm6102 AS
23:12:56   2  SELECT
23:12:56   3  pair
23:12:56   4  ,ydate
23:12:56   5  ,prdate
23:12:56   6  ,rownum rnum -- acts as t in my time-series
23:12:56   7  ,clse
23:12:56   8  -- Derive a bunch of attributes from clse, the latest price:
23:12:56   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
23:12:56  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
23:12:56  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
23:12:56  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
23:12:56  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
23:12:56  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
23:12:56  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
23:12:56  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
23:12:56  17  --
23:12:56  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
23:12:56  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
23:12:56  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
23:12:56  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
23:12:56  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
23:12:56  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
23:12:56  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
23:12:56  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
23:12:56  26  --
23:12:56  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
23:12:56  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
23:12:56  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
23:12:56  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
23:12:56  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
23:12:56  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
23:12:56  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
23:12:56  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
23:12:56  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
23:12:56  36  FROM di5min WHERE pair LIKE'%ech%'
23:12:56  37  AND ydate > sysdate - 95
23:12:56  38  ORDER BY ydate
23:12:56  39  /

View created.

Elapsed: 00:00:00.04
23:12:56 SQL> 
23:12:56 SQL> -- rpt
23:12:56 SQL> 
23:12:56 SQL> SELECT
23:12:56   2  pair
23:12:56   3  ,COUNT(pair)
23:12:56   4  ,MIN(clse),MAX(clse)
23:12:56   5  ,MIN(avg6),MAX(avg6)
23:12:56   6  ,MIN(ydate),MAX(ydate)
23:12:56   7  FROM svm6102
23:12:56   8  GROUP BY pair
23:12:56   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ech_usd       19795 1.24182424 1.38284305 1.24320711 1.37986485 2010-10-04 23:15:01 2011-01-07 21:55:00

Elapsed: 00:00:00.81
23:12:56 SQL> 
23:12:56 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
23:12:56 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.24
23:12:57 SQL> CREATE TABLE svm6122 COMPRESS AS
23:12:57   2  SELECT
23:12:57   3  pair
23:12:57   4  ,ydate
23:12:57   5  ,prdate
23:12:57   6  ,clse
23:12:57   7  -- g6 is important. I want to predict g6:
23:12:57   8  ,ld6 - clse g6
23:12:57   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
23:12:57  10  -- I want more attributes from the ones I derived above:
23:12:57  11  -- clse relation to moving-min
23:12:57  12  ,clse-min4  cm4
23:12:57  13  ,clse-min6  cm6
23:12:57  14  ,clse-min8  cm8
23:12:57  15  ,clse-min10 cm10
23:12:57  16  ,clse-min12 cm12
23:12:57  17  ,clse-min14 cm14
23:12:57  18  ,clse-min16 cm16
23:12:57  19  ,clse-min18 cm18
23:12:57  20  -- clse relation to moving-avg
23:12:57  21  ,clse-avg4  ca4
23:12:57  22  ,clse-avg6  ca6
23:12:57  23  ,clse-avg8  ca8
23:12:57  24  ,clse-avg10 ca10
23:12:57  25  ,clse-avg12 ca12
23:12:57  26  ,clse-avg14 ca14
23:12:57  27  ,clse-avg16 ca16
23:12:57  28  ,clse-avg18 ca18
23:12:57  29  -- clse relation to moving-max
23:12:57  30  ,clse-max4  cx4
23:12:57  31  ,clse-max6  cx6
23:12:57  32  ,clse-max8  cx8
23:12:57  33  ,clse-max10 cx10
23:12:57  34  ,clse-max12 cx12
23:12:57  35  ,clse-max14 cx14
23:12:57  36  ,clse-max16 cx16
23:12:57  37  ,clse-max18 cx18
23:12:57  38  -- Derive more attributes.
23:12:57  39  -- I want to use CORR() here to help SVM see the shape of the series.
23:12:57  40  -- But COVAR_POP is more stable:
23:12:57  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
23:12:57  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
23:12:57  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
23:12:57  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
23:12:57  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
23:12:57  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
23:12:57  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
23:12:57  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
23:12:57  49  -- Derive date related attributes:
23:12:57  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
23:12:57  51  ,0+TO_CHAR(ydate,'D')d
23:12:57  52  ,0+TO_CHAR(ydate,'W')w
23:12:57  53  -- mpm stands for minutes-past-midnight:
23:12:57  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
23:12:57  55  -- mph stands for minutes-past-hour:
23:12:57  56  ,0+TO_CHAR(ydate,'MI')mph
23:12:57  57  FROM svm6102
23:12:57  58  ORDER BY ydate
23:12:57  59  /

Table created.

Elapsed: 00:00:03.06
23:13:00 SQL> 
23:13:00 SQL> -- rpt
23:13:00 SQL> 
23:13:00 SQL> SELECT
23:13:00   2  pair
23:13:00   3  ,COUNT(pair)
23:13:00   4  ,MIN(clse),MAX(clse)
23:13:00   5  ,MIN(ydate),MAX(ydate)
23:13:00   6  FROM svm6122
23:13:00   7  GROUP BY pair
23:13:00   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ech_usd       19795 1.24182424 1.38284305 2010-10-04 23:15:01 2011-01-07 21:55:00

Elapsed: 00:00:00.04
23:13:00 SQL> 
23:13:00 SQL> -- Prepare for derivation of NTILE based params:
23:13:00 SQL> 
23:13:00 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:02.48
23:13:02 SQL> CREATE TABLE svm6142 COMPRESS AS
23:13:02   2  SELECT
23:13:02   3  pair
23:13:02   4  ,ydate
23:13:02   5  ,prdate
23:13:02   6  ,clse
23:13:02   7  ,g6
23:13:02   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
23:13:02   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
23:13:02  10  ,CASE WHEN trend IS NULL THEN 1
23:13:02  11  	    WHEN trend =0      THEN 1
23:13:02  12  	    ELSE trend END trend
23:13:02  13  ,cm4
23:13:02  14  ,cm6
23:13:02  15  ,cm8
23:13:02  16  ,cm10
23:13:02  17  ,cm12
23:13:02  18  ,cm14
23:13:02  19  ,cm16
23:13:02  20  ,cm18
23:13:02  21  --
23:13:02  22  ,ca4
23:13:02  23  ,ca6
23:13:02  24  ,ca8
23:13:02  25  ,ca10
23:13:02  26  ,ca12
23:13:02  27  ,ca14
23:13:02  28  ,ca16
23:13:02  29  ,ca18
23:13:02  30  --
23:13:02  31  ,cx4
23:13:02  32  ,cx6
23:13:02  33  ,cx8
23:13:02  34  ,cx10
23:13:02  35  ,cx12
23:13:02  36  ,cx14
23:13:02  37  ,cx16
23:13:02  38  ,cx18
23:13:02  39  --
23:13:02  40  ,crr4
23:13:02  41  ,crr6
23:13:02  42  ,crr8
23:13:02  43  ,crr10
23:13:02  44  ,crr12
23:13:02  45  ,crr14
23:13:02  46  ,crr16
23:13:02  47  ,crr18
23:13:02  48  --
23:13:02  49  ,hh
23:13:02  50  ,d
23:13:02  51  ,w
23:13:02  52  ,mpm
23:13:02  53  ,mph
23:13:02  54  FROM svm6122
23:13:02  55  ORDER BY ydate
23:13:02  56  /

Table created.

Elapsed: 00:00:00.48
23:13:03 SQL> 
23:13:03 SQL> -- rpt
23:13:03 SQL> 
23:13:03 SQL> SELECT
23:13:03   2  pair
23:13:03   3  ,trend
23:13:03   4  ,gatt
23:13:03   5  ,COUNT(pair)
23:13:03   6  ,AVG(g6)
23:13:03   7  FROM svm6142
23:13:03   8  GROUP BY pair,trend,gatt
23:13:03   9  ORDER BY pair,trend,gatt
23:13:03  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6803  -.0022901
ech_usd 	-1 up	      3540 .003572921
ech_usd 	-1		66
ech_usd 	 1 nup	      6430 -.00231563
ech_usd 	 1 up	      2950 .004113263
ech_usd 	 1		 6

6 rows selected.

Elapsed: 00:00:00.04
23:13:03 SQL> 
23:13:03 SQL> 
23:13:03 SQL> -- Derive NTILE based params:
23:13:03 SQL> 
23:13:03 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:01.16
23:13:04 SQL> CREATE TABLE svm6162 COMPRESS AS
23:13:04   2  SELECT
23:13:04   3  pair
23:13:04   4  ,ydate
23:13:04   5  ,prdate
23:13:04   6  ,clse
23:13:04   7  ,g6
23:13:04   8  ,gatt
23:13:04   9  ,gattn
23:13:04  10  ,trend
23:13:04  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
23:13:04  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
23:13:04  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
23:13:04  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
23:13:04  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
23:13:04  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
23:13:04  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
23:13:04  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
23:13:04  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
23:13:04  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
23:13:04  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
23:13:04  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
23:13:04  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
23:13:04  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
23:13:04  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
23:13:04  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
23:13:04  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
23:13:04  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
23:13:04  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
23:13:04  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
23:13:04  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
23:13:04  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
23:13:04  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
23:13:04  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
23:13:04  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
23:13:04  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
23:13:04  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
23:13:04  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
23:13:04  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
23:13:04  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
23:13:04  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
23:13:04  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
23:13:04  43  ,hh  att32
23:13:04  44  ,d   att33
23:13:04  45  ,w   att34
23:13:04  46  ,mpm att35
23:13:04  47  ,mph att36
23:13:04  48  ,trend att37
23:13:04  49  FROM svm6142
23:13:04  50  ORDER BY ydate
23:13:04  51  /

Table created.

Elapsed: 00:00:05.15
23:13:09 SQL> 
23:13:09 SQL> -- rpt
23:13:09 SQL> 
23:13:09 SQL> SELECT
23:13:09   2  pair
23:13:09   3  ,trend
23:13:09   4  ,gatt
23:13:09   5  ,COUNT(pair)
23:13:09   6  ,AVG(g6)
23:13:09   7  FROM svm6162
23:13:09   8  GROUP BY pair,trend,gatt
23:13:09   9  ORDER BY pair,trend,gatt
23:13:09  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6803  -.0022901
ech_usd 	-1 up	      3540 .003572921
ech_usd 	-1		66
ech_usd 	 1 nup	      6430 -.00231563
ech_usd 	 1 up	      2950 .004113263
ech_usd 	 1		 6

6 rows selected.

Elapsed: 00:00:00.03
23:13:09 SQL> 
23:13:09 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:01.19
23:13:10 SQL> CREATE TABLE modsrc COMPRESS AS
23:13:10   2  SELECT
23:13:10   3  pair
23:13:10   4  ,ydate
23:13:10   5  ,prdate
23:13:10   6  ,trend
23:13:10   7  ,g6
23:13:10   8  ,gatt
23:13:10   9  ,gattn
23:13:10  10  FROM svm6162
23:13:10  11  /

Table created.

Elapsed: 00:00:00.24
23:13:10 SQL> 
23:13:10 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.44
23:13:11 SQL> 
23:13:11 SQL> DROP   TABLE ech_ms610 ;

Table dropped.

Elapsed: 00:00:00.23
23:13:11 SQL> CREATE TABLE ech_ms610 COMPRESS AS
23:13:11   2  SELECT
23:13:11   3  ydate
23:13:11   4  ,trend ech_trend
23:13:11   5  ,g6    ech_g6
23:13:11   6  ,gatt  ech_gatt
23:13:11   7  ,gattn ech_gattn
23:13:11   8  FROM modsrc
23:13:11   9  /

Table created.

Elapsed: 00:00:00.25
23:13:11 SQL> 
23:13:11 SQL> ANALYZE TABLE ech_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.42
23:13:12 SQL> 
23:13:12 SQL> -- I need a copy of the attributes:
23:13:12 SQL> 
23:13:12 SQL> 
23:13:12 SQL> DROP   TABLE ech_att;

Table dropped.

Elapsed: 00:00:00.60
23:13:13 SQL> CREATE TABLE ech_att COMPRESS AS
23:13:13   2  SELECT
23:13:13   3  ydate
23:13:13   4  ,att00 ech_att00
23:13:13   5  ,att01 ech_att01
23:13:13   6  ,att02 ech_att02
23:13:13   7  ,att03 ech_att03
23:13:13   8  ,att04 ech_att04
23:13:13   9  ,att05 ech_att05
23:13:13  10  ,att06 ech_att06
23:13:13  11  ,att07 ech_att07
23:13:13  12  ,att08 ech_att08
23:13:13  13  ,att09 ech_att09
23:13:13  14  ,att10 ech_att10
23:13:13  15  ,att11 ech_att11
23:13:13  16  ,att12 ech_att12
23:13:13  17  ,att13 ech_att13
23:13:13  18  ,att14 ech_att14
23:13:13  19  ,att15 ech_att15
23:13:13  20  ,att16 ech_att16
23:13:13  21  ,att17 ech_att17
23:13:13  22  ,att18 ech_att18
23:13:13  23  ,att19 ech_att19
23:13:13  24  ,att20 ech_att20
23:13:13  25  ,att21 ech_att21
23:13:13  26  ,att22 ech_att22
23:13:13  27  ,att23 ech_att23
23:13:13  28  ,att24 ech_att24
23:13:13  29  ,att25 ech_att25
23:13:13  30  ,att26 ech_att26
23:13:13  31  ,att27 ech_att27
23:13:13  32  ,att28 ech_att28
23:13:13  33  ,att29 ech_att29
23:13:13  34  ,att30 ech_att30
23:13:13  35  ,att31 ech_att31
23:13:13  36  ,att32 ech_att32
23:13:13  37  ,att33 ech_att33
23:13:13  38  ,att34 ech_att34
23:13:13  39  ,att35 ech_att35
23:13:13  40  ,att36 ech_att36
23:13:13  41  ,att37 ech_att37
23:13:13  42  FROM svm6162
23:13:13  43  /

Table created.

Elapsed: 00:00:00.41
23:13:13 SQL> 
23:13:13 SQL> ANALYZE TABLE ech_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.52
23:13:13 SQL> 
23:13:13 SQL> -- rpt
23:13:13 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19795

Elapsed: 00:00:00.85
23:13:14 SQL> SELECT COUNT(*)FROM ech_att;

  COUNT(*)
----------
     19795

Elapsed: 00:00:00.00
23:13:14 SQL> 
23:13:14 SQL> --
23:13:14 SQL> -- egb610.sql
23:13:14 SQL> --
23:13:14 SQL> 
23:13:14 SQL> -- Creates views and tables for backtesting a forex SVM strategy
23:13:14 SQL> 
23:13:14 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.46
23:13:15 SQL> 
23:13:15 SQL> -- I created di5min here:
23:13:15 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
23:13:15 SQL> 
23:13:15 SQL> CREATE OR REPLACE VIEW svm6102 AS
23:13:15   2  SELECT
23:13:15   3  pair
23:13:15   4  ,ydate
23:13:15   5  ,prdate
23:13:15   6  ,rownum rnum -- acts as t in my time-series
23:13:15   7  ,clse
23:13:15   8  -- Derive a bunch of attributes from clse, the latest price:
23:13:15   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
23:13:15  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
23:13:15  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
23:13:15  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
23:13:15  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
23:13:15  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
23:13:15  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
23:13:15  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
23:13:15  17  --
23:13:15  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
23:13:15  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
23:13:15  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
23:13:15  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
23:13:15  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
23:13:15  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
23:13:15  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
23:13:15  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
23:13:15  26  --
23:13:15  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
23:13:15  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
23:13:15  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
23:13:15  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
23:13:15  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
23:13:15  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
23:13:15  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
23:13:15  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
23:13:15  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
23:13:15  36  FROM di5min WHERE pair LIKE'%egb%'
23:13:15  37  AND ydate > sysdate - 95
23:13:15  38  ORDER BY ydate
23:13:15  39  /

View created.

Elapsed: 00:00:00.04
23:13:15 SQL> 
23:13:15 SQL> -- rpt
23:13:15 SQL> 
23:13:15 SQL> SELECT
23:13:15   2  pair
23:13:15   3  ,COUNT(pair)
23:13:15   4  ,MIN(clse),MAX(clse)
23:13:15   5  ,MIN(avg6),MAX(avg6)
23:13:15   6  ,MIN(ydate),MAX(ydate)
23:13:15   7  FROM svm6102
23:13:15   8  GROUP BY pair
23:13:15   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
egb_usd       19794 .829912848 .893920122 .831297096 .892400287 2010-10-04 23:15:01 2011-01-07 21:55:00

Elapsed: 00:00:00.94
23:13:16 SQL> 
23:13:16 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
23:13:16 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.26
23:13:16 SQL> CREATE TABLE svm6122 COMPRESS AS
23:13:16   2  SELECT
23:13:16   3  pair
23:13:16   4  ,ydate
23:13:16   5  ,prdate
23:13:16   6  ,clse
23:13:16   7  -- g6 is important. I want to predict g6:
23:13:16   8  ,ld6 - clse g6
23:13:16   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
23:13:16  10  -- I want more attributes from the ones I derived above:
23:13:16  11  -- clse relation to moving-min
23:13:16  12  ,clse-min4  cm4
23:13:16  13  ,clse-min6  cm6
23:13:16  14  ,clse-min8  cm8
23:13:16  15  ,clse-min10 cm10
23:13:16  16  ,clse-min12 cm12
23:13:16  17  ,clse-min14 cm14
23:13:16  18  ,clse-min16 cm16
23:13:16  19  ,clse-min18 cm18
23:13:16  20  -- clse relation to moving-avg
23:13:16  21  ,clse-avg4  ca4
23:13:16  22  ,clse-avg6  ca6
23:13:16  23  ,clse-avg8  ca8
23:13:16  24  ,clse-avg10 ca10
23:13:16  25  ,clse-avg12 ca12
23:13:16  26  ,clse-avg14 ca14
23:13:16  27  ,clse-avg16 ca16
23:13:16  28  ,clse-avg18 ca18
23:13:16  29  -- clse relation to moving-max
23:13:16  30  ,clse-max4  cx4
23:13:16  31  ,clse-max6  cx6
23:13:16  32  ,clse-max8  cx8
23:13:16  33  ,clse-max10 cx10
23:13:16  34  ,clse-max12 cx12
23:13:16  35  ,clse-max14 cx14
23:13:16  36  ,clse-max16 cx16
23:13:16  37  ,clse-max18 cx18
23:13:16  38  -- Derive more attributes.
23:13:16  39  -- I want to use CORR() here to help SVM see the shape of the series.
23:13:16  40  -- But COVAR_POP is more stable:
23:13:16  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
23:13:16  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
23:13:16  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
23:13:16  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
23:13:16  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
23:13:16  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
23:13:16  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
23:13:16  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
23:13:16  49  -- Derive date related attributes:
23:13:16  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
23:13:16  51  ,0+TO_CHAR(ydate,'D')d
23:13:16  52  ,0+TO_CHAR(ydate,'W')w
23:13:16  53  -- mpm stands for minutes-past-midnight:
23:13:16  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
23:13:16  55  -- mph stands for minutes-past-hour:
23:13:16  56  ,0+TO_CHAR(ydate,'MI')mph
23:13:16  57  FROM svm6102
23:13:16  58  ORDER BY ydate
23:13:16  59  /

Table created.

Elapsed: 00:00:02.47
23:13:19 SQL> 
23:13:19 SQL> -- rpt
23:13:19 SQL> 
23:13:19 SQL> SELECT
23:13:19   2  pair
23:13:19   3  ,COUNT(pair)
23:13:19   4  ,MIN(clse),MAX(clse)
23:13:19   5  ,MIN(ydate),MAX(ydate)
23:13:19   6  FROM svm6122
23:13:19   7  GROUP BY pair
23:13:19   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
egb_usd       19794 .829912848 .893920122 2010-10-04 23:15:01 2011-01-07 21:55:00

Elapsed: 00:00:00.04
23:13:19 SQL> 
23:13:19 SQL> -- Prepare for derivation of NTILE based params:
23:13:19 SQL> 
23:13:19 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.20
23:13:19 SQL> CREATE TABLE svm6142 COMPRESS AS
23:13:19   2  SELECT
23:13:19   3  pair
23:13:19   4  ,ydate
23:13:19   5  ,prdate
23:13:19   6  ,clse
23:13:19   7  ,g6
23:13:19   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
23:13:19   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
23:13:19  10  ,CASE WHEN trend IS NULL THEN 1
23:13:19  11  	    WHEN trend =0      THEN 1
23:13:19  12  	    ELSE trend END trend
23:13:19  13  ,cm4
23:13:19  14  ,cm6
23:13:19  15  ,cm8
23:13:19  16  ,cm10
23:13:19  17  ,cm12
23:13:19  18  ,cm14
23:13:19  19  ,cm16
23:13:19  20  ,cm18
23:13:19  21  --
23:13:19  22  ,ca4
23:13:19  23  ,ca6
23:13:19  24  ,ca8
23:13:19  25  ,ca10
23:13:19  26  ,ca12
23:13:19  27  ,ca14
23:13:19  28  ,ca16
23:13:19  29  ,ca18
23:13:19  30  --
23:13:19  31  ,cx4
23:13:19  32  ,cx6
23:13:19  33  ,cx8
23:13:19  34  ,cx10
23:13:19  35  ,cx12
23:13:19  36  ,cx14
23:13:19  37  ,cx16
23:13:19  38  ,cx18
23:13:19  39  --
23:13:19  40  ,crr4
23:13:19  41  ,crr6
23:13:19  42  ,crr8
23:13:19  43  ,crr10
23:13:19  44  ,crr12
23:13:19  45  ,crr14
23:13:19  46  ,crr16
23:13:19  47  ,crr18
23:13:19  48  --
23:13:19  49  ,hh
23:13:19  50  ,d
23:13:19  51  ,w
23:13:19  52  ,mpm
23:13:19  53  ,mph
23:13:19  54  FROM svm6122
23:13:19  55  ORDER BY ydate
23:13:19  56  /

Table created.

Elapsed: 00:00:00.46
23:13:19 SQL> 
23:13:19 SQL> -- rpt
23:13:19 SQL> 
23:13:19 SQL> SELECT
23:13:19   2  pair
23:13:19   3  ,trend
23:13:19   4  ,gatt
23:13:19   5  ,COUNT(pair)
23:13:19   6  ,AVG(g6)
23:13:19   7  FROM svm6142
23:13:19   8  GROUP BY pair,trend,gatt
23:13:19   9  ORDER BY pair,trend,gatt
23:13:19  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7939   -.001108
egb_usd 	-1 up	      2617 .002926111
egb_usd 	-1		72
egb_usd 	 1 nup	      6530 -.00136808
egb_usd 	 1 up	      2636 .002929653

Elapsed: 00:00:00.04
23:13:19 SQL> 
23:13:19 SQL> 
23:13:19 SQL> -- Derive NTILE based params:
23:13:19 SQL> 
23:13:19 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.15
23:13:19 SQL> CREATE TABLE svm6162 COMPRESS AS
23:13:19   2  SELECT
23:13:19   3  pair
23:13:19   4  ,ydate
23:13:19   5  ,prdate
23:13:19   6  ,clse
23:13:19   7  ,g6
23:13:19   8  ,gatt
23:13:19   9  ,gattn
23:13:19  10  ,trend
23:13:19  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
23:13:19  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
23:13:19  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
23:13:19  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
23:13:19  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
23:13:19  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
23:13:19  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
23:13:19  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
23:13:19  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
23:13:19  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
23:13:19  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
23:13:19  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
23:13:19  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
23:13:19  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
23:13:19  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
23:13:19  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
23:13:19  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
23:13:19  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
23:13:19  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
23:13:19  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
23:13:19  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
23:13:19  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
23:13:19  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
23:13:19  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
23:13:19  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
23:13:19  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
23:13:19  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
23:13:19  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
23:13:19  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
23:13:19  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
23:13:19  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
23:13:19  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
23:13:19  43  ,hh  att32
23:13:19  44  ,d   att33
23:13:19  45  ,w   att34
23:13:19  46  ,mpm att35
23:13:19  47  ,mph att36
23:13:19  48  ,trend att37
23:13:19  49  FROM svm6142
23:13:19  50  ORDER BY ydate
23:13:19  51  /

Table created.

Elapsed: 00:00:05.59
23:13:25 SQL> 
23:13:25 SQL> -- rpt
23:13:25 SQL> 
23:13:25 SQL> SELECT
23:13:25   2  pair
23:13:25   3  ,trend
23:13:25   4  ,gatt
23:13:25   5  ,COUNT(pair)
23:13:25   6  ,AVG(g6)
23:13:25   7  FROM svm6162
23:13:25   8  GROUP BY pair,trend,gatt
23:13:25   9  ORDER BY pair,trend,gatt
23:13:25  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7939   -.001108
egb_usd 	-1 up	      2617 .002926111
egb_usd 	-1		72
egb_usd 	 1 nup	      6530 -.00136808
egb_usd 	 1 up	      2636 .002929653

Elapsed: 00:00:00.02
23:13:25 SQL> 
23:13:25 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.16
23:13:25 SQL> CREATE TABLE modsrc COMPRESS AS
23:13:25   2  SELECT
23:13:25   3  pair
23:13:25   4  ,ydate
23:13:25   5  ,prdate
23:13:25   6  ,trend
23:13:25   7  ,g6
23:13:25   8  ,gatt
23:13:25   9  ,gattn
23:13:25  10  FROM svm6162
23:13:25  11  /

Table created.

Elapsed: 00:00:00.08
23:13:25 SQL> 
23:13:25 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.22
23:13:26 SQL> 
23:13:26 SQL> DROP   TABLE egb_ms610 ;

Table dropped.

Elapsed: 00:00:00.03
23:13:26 SQL> CREATE TABLE egb_ms610 COMPRESS AS
23:13:26   2  SELECT
23:13:26   3  ydate
23:13:26   4  ,trend egb_trend
23:13:26   5  ,g6    egb_g6
23:13:26   6  ,gatt  egb_gatt
23:13:26   7  ,gattn egb_gattn
23:13:26   8  FROM modsrc
23:13:26   9  /

Table created.

Elapsed: 00:00:00.07
23:13:26 SQL> 
23:13:26 SQL> ANALYZE TABLE egb_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
23:13:26 SQL> 
23:13:26 SQL> -- I need a copy of the attributes:
23:13:26 SQL> 
23:13:26 SQL> 
23:13:26 SQL> DROP   TABLE egb_att;

Table dropped.

Elapsed: 00:00:00.05
23:13:26 SQL> CREATE TABLE egb_att COMPRESS AS
23:13:26   2  SELECT
23:13:26   3  ydate
23:13:26   4  ,att00 egb_att00
23:13:26   5  ,att01 egb_att01
23:13:26   6  ,att02 egb_att02
23:13:26   7  ,att03 egb_att03
23:13:26   8  ,att04 egb_att04
23:13:26   9  ,att05 egb_att05
23:13:26  10  ,att06 egb_att06
23:13:26  11  ,att07 egb_att07
23:13:26  12  ,att08 egb_att08
23:13:26  13  ,att09 egb_att09
23:13:26  14  ,att10 egb_att10
23:13:26  15  ,att11 egb_att11
23:13:26  16  ,att12 egb_att12
23:13:26  17  ,att13 egb_att13
23:13:26  18  ,att14 egb_att14
23:13:26  19  ,att15 egb_att15
23:13:26  20  ,att16 egb_att16
23:13:26  21  ,att17 egb_att17
23:13:26  22  ,att18 egb_att18
23:13:26  23  ,att19 egb_att19
23:13:26  24  ,att20 egb_att20
23:13:26  25  ,att21 egb_att21
23:13:26  26  ,att22 egb_att22
23:13:26  27  ,att23 egb_att23
23:13:26  28  ,att24 egb_att24
23:13:26  29  ,att25 egb_att25
23:13:26  30  ,att26 egb_att26
23:13:26  31  ,att27 egb_att27
23:13:26  32  ,att28 egb_att28
23:13:26  33  ,att29 egb_att29
23:13:26  34  ,att30 egb_att30
23:13:26  35  ,att31 egb_att31
23:13:26  36  ,att32 egb_att32
23:13:26  37  ,att33 egb_att33
23:13:26  38  ,att34 egb_att34
23:13:26  39  ,att35 egb_att35
23:13:26  40  ,att36 egb_att36
23:13:26  41  ,att37 egb_att37
23:13:26  42  FROM svm6162
23:13:26  43  /

Table created.

Elapsed: 00:00:00.17
23:13:26 SQL> 
23:13:26 SQL> ANALYZE TABLE egb_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
23:13:26 SQL> 
23:13:26 SQL> -- rpt
23:13:26 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19794

Elapsed: 00:00:00.97
23:13:27 SQL> SELECT COUNT(*)FROM egb_att;

  COUNT(*)
----------
     19794

Elapsed: 00:00:00.00
23:13:27 SQL> 
23:13:27 SQL> --
23:13:27 SQL> -- ejp610.sql
23:13:27 SQL> --
23:13:27 SQL> 
23:13:27 SQL> -- Creates views and tables for backtesting a forex SVM strategy
23:13:27 SQL> 
23:13:27 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.39
23:13:28 SQL> 
23:13:28 SQL> -- I created di5min here:
23:13:28 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
23:13:28 SQL> 
23:13:28 SQL> CREATE OR REPLACE VIEW svm6102 AS
23:13:28   2  SELECT
23:13:28   3  pair
23:13:28   4  ,ydate
23:13:28   5  ,prdate
23:13:28   6  ,rownum rnum -- acts as t in my time-series
23:13:28   7  ,clse
23:13:28   8  -- Derive a bunch of attributes from clse, the latest price:
23:13:28   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
23:13:28  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
23:13:28  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
23:13:28  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
23:13:28  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
23:13:28  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
23:13:28  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
23:13:28  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
23:13:28  17  --
23:13:28  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
23:13:28  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
23:13:28  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
23:13:28  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
23:13:28  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
23:13:28  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
23:13:28  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
23:13:28  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
23:13:28  26  --
23:13:28  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
23:13:28  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
23:13:28  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
23:13:28  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
23:13:28  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
23:13:28  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
23:13:28  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
23:13:28  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
23:13:28  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
23:13:28  36  FROM di5min WHERE pair LIKE'%ejp%'
23:13:28  37  AND ydate > sysdate - 95
23:13:28  38  ORDER BY ydate
23:13:28  39  /

View created.

Elapsed: 00:00:00.05
23:13:28 SQL> 
23:13:28 SQL> -- rpt
23:13:28 SQL> 
23:13:28 SQL> SELECT
23:13:28   2  pair
23:13:28   3  ,COUNT(pair)
23:13:28   4  ,MIN(clse),MAX(clse)
23:13:28   5  ,MIN(avg6),MAX(avg6)
23:13:28   6  ,MIN(ydate),MAX(ydate)
23:13:28   7  FROM svm6102
23:13:28   8  GROUP BY pair
23:13:28   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ejp_usd       19792 107.015572	115.63485 107.340407 115.509678 2010-10-04 23:15:01 2011-01-07 21:55:00

Elapsed: 00:00:00.87
23:13:29 SQL> 
23:13:29 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
23:13:29 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:01.19
23:13:30 SQL> CREATE TABLE svm6122 COMPRESS AS
23:13:30   2  SELECT
23:13:30   3  pair
23:13:30   4  ,ydate
23:13:30   5  ,prdate
23:13:30   6  ,clse
23:13:30   7  -- g6 is important. I want to predict g6:
23:13:30   8  ,ld6 - clse g6
23:13:30   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
23:13:30  10  -- I want more attributes from the ones I derived above:
23:13:30  11  -- clse relation to moving-min
23:13:30  12  ,clse-min4  cm4
23:13:30  13  ,clse-min6  cm6
23:13:30  14  ,clse-min8  cm8
23:13:30  15  ,clse-min10 cm10
23:13:30  16  ,clse-min12 cm12
23:13:30  17  ,clse-min14 cm14
23:13:30  18  ,clse-min16 cm16
23:13:30  19  ,clse-min18 cm18
23:13:30  20  -- clse relation to moving-avg
23:13:30  21  ,clse-avg4  ca4
23:13:30  22  ,clse-avg6  ca6
23:13:30  23  ,clse-avg8  ca8
23:13:30  24  ,clse-avg10 ca10
23:13:30  25  ,clse-avg12 ca12
23:13:30  26  ,clse-avg14 ca14
23:13:30  27  ,clse-avg16 ca16
23:13:30  28  ,clse-avg18 ca18
23:13:30  29  -- clse relation to moving-max
23:13:30  30  ,clse-max4  cx4
23:13:30  31  ,clse-max6  cx6
23:13:30  32  ,clse-max8  cx8
23:13:30  33  ,clse-max10 cx10
23:13:30  34  ,clse-max12 cx12
23:13:30  35  ,clse-max14 cx14
23:13:30  36  ,clse-max16 cx16
23:13:30  37  ,clse-max18 cx18
23:13:30  38  -- Derive more attributes.
23:13:30  39  -- I want to use CORR() here to help SVM see the shape of the series.
23:13:30  40  -- But COVAR_POP is more stable:
23:13:30  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
23:13:30  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
23:13:30  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
23:13:30  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
23:13:30  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
23:13:30  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
23:13:30  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
23:13:30  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
23:13:30  49  -- Derive date related attributes:
23:13:30  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
23:13:30  51  ,0+TO_CHAR(ydate,'D')d
23:13:30  52  ,0+TO_CHAR(ydate,'W')w
23:13:30  53  -- mpm stands for minutes-past-midnight:
23:13:30  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
23:13:30  55  -- mph stands for minutes-past-hour:
23:13:30  56  ,0+TO_CHAR(ydate,'MI')mph
23:13:30  57  FROM svm6102
23:13:30  58  ORDER BY ydate
23:13:30  59  /

Table created.

Elapsed: 00:00:02.18
23:13:32 SQL> 
23:13:32 SQL> -- rpt
23:13:32 SQL> 
23:13:32 SQL> SELECT
23:13:32   2  pair
23:13:32   3  ,COUNT(pair)
23:13:32   4  ,MIN(clse),MAX(clse)
23:13:32   5  ,MIN(ydate),MAX(ydate)
23:13:32   6  FROM svm6122
23:13:32   7  GROUP BY pair
23:13:32   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ejp_usd       19792 107.015572	115.63485 2010-10-04 23:15:01 2011-01-07 21:55:00

Elapsed: 00:00:00.04
23:13:32 SQL> 
23:13:32 SQL> -- Prepare for derivation of NTILE based params:
23:13:32 SQL> 
23:13:32 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.30
23:13:32 SQL> CREATE TABLE svm6142 COMPRESS AS
23:13:32   2  SELECT
23:13:32   3  pair
23:13:32   4  ,ydate
23:13:32   5  ,prdate
23:13:32   6  ,clse
23:13:32   7  ,g6
23:13:32   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
23:13:32   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
23:13:32  10  ,CASE WHEN trend IS NULL THEN 1
23:13:32  11  	    WHEN trend =0      THEN 1
23:13:32  12  	    ELSE trend END trend
23:13:32  13  ,cm4
23:13:32  14  ,cm6
23:13:32  15  ,cm8
23:13:32  16  ,cm10
23:13:32  17  ,cm12
23:13:32  18  ,cm14
23:13:32  19  ,cm16
23:13:32  20  ,cm18
23:13:32  21  --
23:13:32  22  ,ca4
23:13:32  23  ,ca6
23:13:32  24  ,ca8
23:13:32  25  ,ca10
23:13:32  26  ,ca12
23:13:32  27  ,ca14
23:13:32  28  ,ca16
23:13:32  29  ,ca18
23:13:32  30  --
23:13:32  31  ,cx4
23:13:32  32  ,cx6
23:13:32  33  ,cx8
23:13:32  34  ,cx10
23:13:32  35  ,cx12
23:13:32  36  ,cx14
23:13:32  37  ,cx16
23:13:32  38  ,cx18
23:13:32  39  --
23:13:32  40  ,crr4
23:13:32  41  ,crr6
23:13:32  42  ,crr8
23:13:32  43  ,crr10
23:13:32  44  ,crr12
23:13:32  45  ,crr14
23:13:32  46  ,crr16
23:13:32  47  ,crr18
23:13:32  48  --
23:13:32  49  ,hh
23:13:32  50  ,d
23:13:32  51  ,w
23:13:32  52  ,mpm
23:13:32  53  ,mph
23:13:32  54  FROM svm6122
23:13:32  55  ORDER BY ydate
23:13:32  56  /

Table created.

Elapsed: 00:00:00.39
23:13:33 SQL> 
23:13:33 SQL> -- rpt
23:13:33 SQL> 
23:13:33 SQL> SELECT
23:13:33   2  pair
23:13:33   3  ,trend
23:13:33   4  ,gatt
23:13:33   5  ,COUNT(pair)
23:13:33   6  ,AVG(g6)
23:13:33   7  FROM svm6142
23:13:33   8  GROUP BY pair,trend,gatt
23:13:33   9  ORDER BY pair,trend,gatt
23:13:33  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      5209 -.32877261
ejp_usd 	-1 up	      4921 .278803383
ejp_usd 	-1		72
ejp_usd 	 1 nup	      4986 -.29588646
ejp_usd 	 1 up	      4604 .288531114

Elapsed: 00:00:00.04
23:13:33 SQL> 
23:13:33 SQL> 
23:13:33 SQL> -- Derive NTILE based params:
23:13:33 SQL> 
23:13:33 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.17
23:13:33 SQL> CREATE TABLE svm6162 COMPRESS AS
23:13:33   2  SELECT
23:13:33   3  pair
23:13:33   4  ,ydate
23:13:33   5  ,prdate
23:13:33   6  ,clse
23:13:33   7  ,g6
23:13:33   8  ,gatt
23:13:33   9  ,gattn
23:13:33  10  ,trend
23:13:33  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
23:13:33  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
23:13:33  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
23:13:33  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
23:13:33  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
23:13:33  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
23:13:33  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
23:13:33  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
23:13:33  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
23:13:33  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
23:13:33  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
23:13:33  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
23:13:33  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
23:13:33  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
23:13:33  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
23:13:33  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
23:13:33  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
23:13:33  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
23:13:33  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
23:13:33  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
23:13:33  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
23:13:33  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
23:13:33  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
23:13:33  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
23:13:33  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
23:13:33  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
23:13:33  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
23:13:33  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
23:13:33  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
23:13:33  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
23:13:33  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
23:13:33  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
23:13:33  43  ,hh  att32
23:13:33  44  ,d   att33
23:13:33  45  ,w   att34
23:13:33  46  ,mpm att35
23:13:33  47  ,mph att36
23:13:33  48  ,trend att37
23:13:33  49  FROM svm6142
23:13:33  50  ORDER BY ydate
23:13:33  51  /

Table created.

Elapsed: 00:00:04.94
23:13:38 SQL> 
23:13:38 SQL> -- rpt
23:13:38 SQL> 
23:13:38 SQL> SELECT
23:13:38   2  pair
23:13:38   3  ,trend
23:13:38   4  ,gatt
23:13:38   5  ,COUNT(pair)
23:13:38   6  ,AVG(g6)
23:13:38   7  FROM svm6162
23:13:38   8  GROUP BY pair,trend,gatt
23:13:38   9  ORDER BY pair,trend,gatt
23:13:38  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      5209 -.32877261
ejp_usd 	-1 up	      4921 .278803383
ejp_usd 	-1		72
ejp_usd 	 1 nup	      4986 -.29588646
ejp_usd 	 1 up	      4604 .288531114

Elapsed: 00:00:00.03
23:13:38 SQL> 
23:13:38 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.15
23:13:38 SQL> CREATE TABLE modsrc COMPRESS AS
23:13:38   2  SELECT
23:13:38   3  pair
23:13:38   4  ,ydate
23:13:38   5  ,prdate
23:13:38   6  ,trend
23:13:38   7  ,g6
23:13:38   8  ,gatt
23:13:38   9  ,gattn
23:13:38  10  FROM svm6162
23:13:38  11  /

Table created.

Elapsed: 00:00:00.09
23:13:38 SQL> 
23:13:38 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
23:13:38 SQL> 
23:13:38 SQL> DROP   TABLE ejp_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
23:13:39 SQL> CREATE TABLE ejp_ms610 COMPRESS AS
23:13:39   2  SELECT
23:13:39   3  ydate
23:13:39   4  ,trend ejp_trend
23:13:39   5  ,g6    ejp_g6
23:13:39   6  ,gatt  ejp_gatt
23:13:39   7  ,gattn ejp_gattn
23:13:39   8  FROM modsrc
23:13:39   9  /

Table created.

Elapsed: 00:00:00.09
23:13:39 SQL> 
23:13:39 SQL> ANALYZE TABLE ejp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
23:13:39 SQL> 
23:13:39 SQL> -- I need a copy of the attributes:
23:13:39 SQL> 
23:13:39 SQL> 
23:13:39 SQL> DROP   TABLE ejp_att;

Table dropped.

Elapsed: 00:00:00.04
23:13:39 SQL> CREATE TABLE ejp_att COMPRESS AS
23:13:39   2  SELECT
23:13:39   3  ydate
23:13:39   4  ,att00 ejp_att00
23:13:39   5  ,att01 ejp_att01
23:13:39   6  ,att02 ejp_att02
23:13:39   7  ,att03 ejp_att03
23:13:39   8  ,att04 ejp_att04
23:13:39   9  ,att05 ejp_att05
23:13:39  10  ,att06 ejp_att06
23:13:39  11  ,att07 ejp_att07
23:13:39  12  ,att08 ejp_att08
23:13:39  13  ,att09 ejp_att09
23:13:39  14  ,att10 ejp_att10
23:13:39  15  ,att11 ejp_att11
23:13:39  16  ,att12 ejp_att12
23:13:39  17  ,att13 ejp_att13
23:13:39  18  ,att14 ejp_att14
23:13:39  19  ,att15 ejp_att15
23:13:39  20  ,att16 ejp_att16
23:13:39  21  ,att17 ejp_att17
23:13:39  22  ,att18 ejp_att18
23:13:39  23  ,att19 ejp_att19
23:13:39  24  ,att20 ejp_att20
23:13:39  25  ,att21 ejp_att21
23:13:39  26  ,att22 ejp_att22
23:13:39  27  ,att23 ejp_att23
23:13:39  28  ,att24 ejp_att24
23:13:39  29  ,att25 ejp_att25
23:13:39  30  ,att26 ejp_att26
23:13:39  31  ,att27 ejp_att27
23:13:39  32  ,att28 ejp_att28
23:13:39  33  ,att29 ejp_att29
23:13:39  34  ,att30 ejp_att30
23:13:39  35  ,att31 ejp_att31
23:13:39  36  ,att32 ejp_att32
23:13:39  37  ,att33 ejp_att33
23:13:39  38  ,att34 ejp_att34
23:13:39  39  ,att35 ejp_att35
23:13:39  40  ,att36 ejp_att36
23:13:39  41  ,att37 ejp_att37
23:13:39  42  FROM svm6162
23:13:39  43  /

Table created.

Elapsed: 00:00:00.18
23:13:39 SQL> 
23:13:39 SQL> ANALYZE TABLE ejp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.42
23:13:39 SQL> 
23:13:39 SQL> -- rpt
23:13:39 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19792

Elapsed: 00:00:00.85
23:13:40 SQL> SELECT COUNT(*)FROM ejp_att;

  COUNT(*)
----------
     19792

Elapsed: 00:00:00.00
23:13:40 SQL> 
23:13:40 SQL> --
23:13:40 SQL> -- ajp610.sql
23:13:40 SQL> --
23:13:40 SQL> 
23:13:40 SQL> -- Creates views and tables for backtesting a forex SVM strategy
23:13:40 SQL> 
23:13:40 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.44
23:13:41 SQL> 
23:13:41 SQL> -- I created di5min here:
23:13:41 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
23:13:41 SQL> 
23:13:41 SQL> CREATE OR REPLACE VIEW svm6102 AS
23:13:41   2  SELECT
23:13:41   3  pair
23:13:41   4  ,ydate
23:13:41   5  ,prdate
23:13:41   6  ,rownum rnum -- acts as t in my time-series
23:13:41   7  ,clse
23:13:41   8  -- Derive a bunch of attributes from clse, the latest price:
23:13:41   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
23:13:41  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
23:13:41  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
23:13:41  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
23:13:41  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
23:13:41  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
23:13:41  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
23:13:41  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
23:13:41  17  --
23:13:41  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
23:13:41  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
23:13:41  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
23:13:41  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
23:13:41  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
23:13:41  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
23:13:41  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
23:13:41  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
23:13:41  26  --
23:13:41  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
23:13:41  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
23:13:41  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
23:13:41  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
23:13:41  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
23:13:41  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
23:13:41  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
23:13:41  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
23:13:41  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
23:13:41  36  FROM di5min WHERE pair LIKE'%ajp%'
23:13:41  37  AND ydate > sysdate - 95
23:13:41  38  ORDER BY ydate
23:13:41  39  /

View created.

Elapsed: 00:00:00.06
23:13:41 SQL> 
23:13:41 SQL> -- rpt
23:13:41 SQL> 
23:13:41 SQL> SELECT
23:13:41   2  pair
23:13:41   3  ,COUNT(pair)
23:13:41   4  ,MIN(clse),MAX(clse)
23:13:41   5  ,MIN(avg6),MAX(avg6)
23:13:41   6  ,MIN(ydate),MAX(ydate)
23:13:41   7  FROM svm6102
23:13:41   8  GROUP BY pair
23:13:41   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ajp_usd       19789  78.249976 83.6669853 78.5106193  83.546306 2010-10-04 23:15:01 2011-01-07 21:55:00

Elapsed: 00:00:00.79
23:13:42 SQL> 
23:13:42 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
23:13:42 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.30
23:13:42 SQL> CREATE TABLE svm6122 COMPRESS AS
23:13:42   2  SELECT
23:13:42   3  pair
23:13:42   4  ,ydate
23:13:42   5  ,prdate
23:13:42   6  ,clse
23:13:42   7  -- g6 is important. I want to predict g6:
23:13:42   8  ,ld6 - clse g6
23:13:42   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
23:13:42  10  -- I want more attributes from the ones I derived above:
23:13:42  11  -- clse relation to moving-min
23:13:42  12  ,clse-min4  cm4
23:13:42  13  ,clse-min6  cm6
23:13:42  14  ,clse-min8  cm8
23:13:42  15  ,clse-min10 cm10
23:13:42  16  ,clse-min12 cm12
23:13:42  17  ,clse-min14 cm14
23:13:42  18  ,clse-min16 cm16
23:13:42  19  ,clse-min18 cm18
23:13:42  20  -- clse relation to moving-avg
23:13:42  21  ,clse-avg4  ca4
23:13:42  22  ,clse-avg6  ca6
23:13:42  23  ,clse-avg8  ca8
23:13:42  24  ,clse-avg10 ca10
23:13:42  25  ,clse-avg12 ca12
23:13:42  26  ,clse-avg14 ca14
23:13:42  27  ,clse-avg16 ca16
23:13:42  28  ,clse-avg18 ca18
23:13:42  29  -- clse relation to moving-max
23:13:42  30  ,clse-max4  cx4
23:13:42  31  ,clse-max6  cx6
23:13:42  32  ,clse-max8  cx8
23:13:42  33  ,clse-max10 cx10
23:13:42  34  ,clse-max12 cx12
23:13:42  35  ,clse-max14 cx14
23:13:42  36  ,clse-max16 cx16
23:13:42  37  ,clse-max18 cx18
23:13:42  38  -- Derive more attributes.
23:13:42  39  -- I want to use CORR() here to help SVM see the shape of the series.
23:13:42  40  -- But COVAR_POP is more stable:
23:13:42  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
23:13:42  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
23:13:42  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
23:13:42  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
23:13:42  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
23:13:42  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
23:13:42  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
23:13:42  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
23:13:42  49  -- Derive date related attributes:
23:13:42  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
23:13:42  51  ,0+TO_CHAR(ydate,'D')d
23:13:42  52  ,0+TO_CHAR(ydate,'W')w
23:13:42  53  -- mpm stands for minutes-past-midnight:
23:13:42  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
23:13:42  55  -- mph stands for minutes-past-hour:
23:13:42  56  ,0+TO_CHAR(ydate,'MI')mph
23:13:42  57  FROM svm6102
23:13:42  58  ORDER BY ydate
23:13:42  59  /

Table created.

Elapsed: 00:00:02.09
23:13:44 SQL> 
23:13:44 SQL> -- rpt
23:13:44 SQL> 
23:13:44 SQL> SELECT
23:13:44   2  pair
23:13:44   3  ,COUNT(pair)
23:13:44   4  ,MIN(clse),MAX(clse)
23:13:44   5  ,MIN(ydate),MAX(ydate)
23:13:44   6  FROM svm6122
23:13:44   7  GROUP BY pair
23:13:44   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ajp_usd       19789  78.249976 83.6669853 2010-10-04 23:15:01 2011-01-07 21:55:00

Elapsed: 00:00:00.03
23:13:44 SQL> 
23:13:44 SQL> -- Prepare for derivation of NTILE based params:
23:13:44 SQL> 
23:13:44 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.28
23:13:44 SQL> CREATE TABLE svm6142 COMPRESS AS
23:13:44   2  SELECT
23:13:44   3  pair
23:13:44   4  ,ydate
23:13:44   5  ,prdate
23:13:44   6  ,clse
23:13:44   7  ,g6
23:13:44   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
23:13:44   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
23:13:44  10  ,CASE WHEN trend IS NULL THEN 1
23:13:44  11  	    WHEN trend =0      THEN 1
23:13:44  12  	    ELSE trend END trend
23:13:44  13  ,cm4
23:13:44  14  ,cm6
23:13:44  15  ,cm8
23:13:44  16  ,cm10
23:13:44  17  ,cm12
23:13:44  18  ,cm14
23:13:44  19  ,cm16
23:13:44  20  ,cm18
23:13:44  21  --
23:13:44  22  ,ca4
23:13:44  23  ,ca6
23:13:44  24  ,ca8
23:13:44  25  ,ca10
23:13:44  26  ,ca12
23:13:44  27  ,ca14
23:13:44  28  ,ca16
23:13:44  29  ,ca18
23:13:44  30  --
23:13:44  31  ,cx4
23:13:44  32  ,cx6
23:13:44  33  ,cx8
23:13:44  34  ,cx10
23:13:44  35  ,cx12
23:13:44  36  ,cx14
23:13:44  37  ,cx16
23:13:44  38  ,cx18
23:13:44  39  --
23:13:44  40  ,crr4
23:13:44  41  ,crr6
23:13:44  42  ,crr8
23:13:44  43  ,crr10
23:13:44  44  ,crr12
23:13:44  45  ,crr14
23:13:44  46  ,crr16
23:13:44  47  ,crr18
23:13:44  48  --
23:13:44  49  ,hh
23:13:44  50  ,d
23:13:44  51  ,w
23:13:44  52  ,mpm
23:13:44  53  ,mph
23:13:44  54  FROM svm6122
23:13:44  55  ORDER BY ydate
23:13:44  56  /

Table created.

Elapsed: 00:00:00.48
23:13:45 SQL> 
23:13:45 SQL> -- rpt
23:13:45 SQL> 
23:13:45 SQL> SELECT
23:13:45   2  pair
23:13:45   3  ,trend
23:13:45   4  ,gatt
23:13:45   5  ,COUNT(pair)
23:13:45   6  ,AVG(g6)
23:13:45   7  FROM svm6142
23:13:45   8  GROUP BY pair,trend,gatt
23:13:45   9  ORDER BY pair,trend,gatt
23:13:45  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ajp_usd 	-1 nup	      4392 -.22740365
ajp_usd 	-1 up	      5205 .223043683
ajp_usd 	-1		72
ajp_usd 	 1 nup	      5279 -.19659377
ajp_usd 	 1 up	      4841 .212050935

Elapsed: 00:00:00.03
23:13:45 SQL> 
23:13:45 SQL> 
23:13:45 SQL> -- Derive NTILE based params:
23:13:45 SQL> 
23:13:45 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.21
23:13:45 SQL> CREATE TABLE svm6162 COMPRESS AS
23:13:45   2  SELECT
23:13:45   3  pair
23:13:45   4  ,ydate
23:13:45   5  ,prdate
23:13:45   6  ,clse
23:13:45   7  ,g6
23:13:45   8  ,gatt
23:13:45   9  ,gattn
23:13:45  10  ,trend
23:13:45  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
23:13:45  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
23:13:45  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
23:13:45  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
23:13:45  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
23:13:45  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
23:13:45  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
23:13:45  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
23:13:45  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
23:13:45  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
23:13:45  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
23:13:45  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
23:13:45  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
23:13:45  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
23:13:45  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
23:13:45  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
23:13:45  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
23:13:45  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
23:13:45  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
23:13:45  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
23:13:45  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
23:13:45  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
23:13:45  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
23:13:45  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
23:13:45  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
23:13:45  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
23:13:45  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
23:13:45  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
23:13:45  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
23:13:45  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
23:13:45  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
23:13:45  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
23:13:45  43  ,hh  att32
23:13:45  44  ,d   att33
23:13:45  45  ,w   att34
23:13:45  46  ,mpm att35
23:13:45  47  ,mph att36
23:13:45  48  ,trend att37
23:13:45  49  FROM svm6142
23:13:45  50  ORDER BY ydate
23:13:45  51  /

Table created.

Elapsed: 00:00:04.94
23:13:50 SQL> 
23:13:50 SQL> -- rpt
23:13:50 SQL> 
23:13:50 SQL> SELECT
23:13:50   2  pair
23:13:50   3  ,trend
23:13:50   4  ,gatt
23:13:50   5  ,COUNT(pair)
23:13:50   6  ,AVG(g6)
23:13:50   7  FROM svm6162
23:13:50   8  GROUP BY pair,trend,gatt
23:13:50   9  ORDER BY pair,trend,gatt
23:13:50  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ajp_usd 	-1 nup	      4392 -.22740365
ajp_usd 	-1 up	      5205 .223043683
ajp_usd 	-1		72
ajp_usd 	 1 nup	      5279 -.19659377
ajp_usd 	 1 up	      4841 .212050935

Elapsed: 00:00:00.03
23:13:50 SQL> 
23:13:50 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.16
23:13:50 SQL> CREATE TABLE modsrc COMPRESS AS
23:13:50   2  SELECT
23:13:50   3  pair
23:13:50   4  ,ydate
23:13:50   5  ,prdate
23:13:50   6  ,trend
23:13:50   7  ,g6
23:13:50   8  ,gatt
23:13:50   9  ,gattn
23:13:50  10  FROM svm6162
23:13:50  11  /

Table created.

Elapsed: 00:00:00.08
23:13:50 SQL> 
23:13:50 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.29
23:13:50 SQL> 
23:13:50 SQL> DROP   TABLE ajp_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
23:13:51 SQL> CREATE TABLE ajp_ms610 COMPRESS AS
23:13:51   2  SELECT
23:13:51   3  ydate
23:13:51   4  ,trend ajp_trend
23:13:51   5  ,g6    ajp_g6
23:13:51   6  ,gatt  ajp_gatt
23:13:51   7  ,gattn ajp_gattn
23:13:51   8  FROM modsrc
23:13:51   9  /

Table created.

Elapsed: 00:00:00.08
23:13:51 SQL> 
23:13:51 SQL> ANALYZE TABLE ajp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
23:13:51 SQL> 
23:13:51 SQL> -- I need a copy of the attributes:
23:13:51 SQL> 
23:13:51 SQL> 
23:13:51 SQL> DROP   TABLE ajp_att;

Table dropped.

Elapsed: 00:00:00.04
23:13:51 SQL> CREATE TABLE ajp_att COMPRESS AS
23:13:51   2  SELECT
23:13:51   3  ydate
23:13:51   4  ,att00 ajp_att00
23:13:51   5  ,att01 ajp_att01
23:13:51   6  ,att02 ajp_att02
23:13:51   7  ,att03 ajp_att03
23:13:51   8  ,att04 ajp_att04
23:13:51   9  ,att05 ajp_att05
23:13:51  10  ,att06 ajp_att06
23:13:51  11  ,att07 ajp_att07
23:13:51  12  ,att08 ajp_att08
23:13:51  13  ,att09 ajp_att09
23:13:51  14  ,att10 ajp_att10
23:13:51  15  ,att11 ajp_att11
23:13:51  16  ,att12 ajp_att12
23:13:51  17  ,att13 ajp_att13
23:13:51  18  ,att14 ajp_att14
23:13:51  19  ,att15 ajp_att15
23:13:51  20  ,att16 ajp_att16
23:13:51  21  ,att17 ajp_att17
23:13:51  22  ,att18 ajp_att18
23:13:51  23  ,att19 ajp_att19
23:13:51  24  ,att20 ajp_att20
23:13:51  25  ,att21 ajp_att21
23:13:51  26  ,att22 ajp_att22
23:13:51  27  ,att23 ajp_att23
23:13:51  28  ,att24 ajp_att24
23:13:51  29  ,att25 ajp_att25
23:13:51  30  ,att26 ajp_att26
23:13:51  31  ,att27 ajp_att27
23:13:51  32  ,att28 ajp_att28
23:13:51  33  ,att29 ajp_att29
23:13:51  34  ,att30 ajp_att30
23:13:51  35  ,att31 ajp_att31
23:13:51  36  ,att32 ajp_att32
23:13:51  37  ,att33 ajp_att33
23:13:51  38  ,att34 ajp_att34
23:13:51  39  ,att35 ajp_att35
23:13:51  40  ,att36 ajp_att36
23:13:51  41  ,att37 ajp_att37
23:13:51  42  FROM svm6162
23:13:51  43  /

Table created.

Elapsed: 00:00:00.18
23:13:51 SQL> 
23:13:51 SQL> ANALYZE TABLE ajp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
23:13:51 SQL> 
23:13:51 SQL> -- rpt
23:13:51 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19789

Elapsed: 00:00:00.78
23:13:52 SQL> SELECT COUNT(*)FROM ajp_att;

  COUNT(*)
----------
     19789

Elapsed: 00:00:00.01
23:13:52 SQL> 
23:13:52 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
