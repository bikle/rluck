
SQL*Plus: Release 11.2.0.1.0 Production on Thu Jan 6 23:00:43 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

23:00:44 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
23:00:44 SQL> 23:00:44 SQL> --
23:00:44 SQL> -- eur610.sql
23:00:44 SQL> --
23:00:44 SQL> 
23:00:44 SQL> -- Creates views and tables for backtesting a forex SVM strategy
23:00:44 SQL> 
23:00:44 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.31
23:00:44 SQL> 
23:00:44 SQL> -- I created di5min here:
23:00:44 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
23:00:44 SQL> 
23:00:44 SQL> CREATE OR REPLACE VIEW svm6102 AS
23:00:44   2  SELECT
23:00:44   3  pair
23:00:44   4  ,ydate
23:00:44   5  ,prdate
23:00:44   6  ,rownum rnum -- acts as t in my time-series
23:00:44   7  ,clse
23:00:44   8  -- Derive a bunch of attributes from clse, the latest price:
23:00:44   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
23:00:44  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
23:00:44  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
23:00:44  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
23:00:44  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
23:00:44  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
23:00:44  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
23:00:44  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
23:00:44  17  --
23:00:44  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
23:00:44  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
23:00:44  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
23:00:44  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
23:00:44  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
23:00:44  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
23:00:44  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
23:00:44  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
23:00:44  26  --
23:00:44  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
23:00:44  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
23:00:44  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
23:00:44  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
23:00:44  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
23:00:44  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
23:00:44  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
23:00:44  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
23:00:44  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
23:00:44  36  FROM di5min WHERE pair LIKE'%eur%'
23:00:44  37  AND ydate > sysdate - 95
23:00:44  38  ORDER BY ydate
23:00:44  39  /

View created.

Elapsed: 00:00:00.28
23:00:44 SQL> 
23:00:44 SQL> -- rpt
23:00:44 SQL> 
23:00:44 SQL> SELECT
23:00:44   2  pair
23:00:44   3  ,COUNT(pair)
23:00:44   4  ,MIN(clse),MAX(clse)
23:00:44   5  ,MIN(avg6),MAX(avg6)
23:00:44   6  ,MIN(ydate),MAX(ydate)
23:00:44   7  FROM svm6102
23:00:44   8  GROUP BY pair
23:00:44   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_usd       19810    1.29735	   1.4273 1.29875103 1.42436233 2010-10-03 23:05:01 2011-01-06 22:55:00

Elapsed: 00:00:00.96
23:00:45 SQL> 
23:00:45 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
23:00:45 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.07
23:00:45 SQL> CREATE TABLE svm6122 COMPRESS AS
23:00:45   2  SELECT
23:00:45   3  pair
23:00:45   4  ,ydate
23:00:45   5  ,prdate
23:00:45   6  ,clse
23:00:45   7  -- g6 is important. I want to predict g6:
23:00:45   8  ,ld6 - clse g6
23:00:45   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
23:00:45  10  -- I want more attributes from the ones I derived above:
23:00:45  11  -- clse relation to moving-min
23:00:45  12  ,clse-min4  cm4
23:00:45  13  ,clse-min6  cm6
23:00:45  14  ,clse-min8  cm8
23:00:45  15  ,clse-min10 cm10
23:00:45  16  ,clse-min12 cm12
23:00:45  17  ,clse-min14 cm14
23:00:45  18  ,clse-min16 cm16
23:00:45  19  ,clse-min18 cm18
23:00:45  20  -- clse relation to moving-avg
23:00:45  21  ,clse-avg4  ca4
23:00:45  22  ,clse-avg6  ca6
23:00:45  23  ,clse-avg8  ca8
23:00:45  24  ,clse-avg10 ca10
23:00:45  25  ,clse-avg12 ca12
23:00:45  26  ,clse-avg14 ca14
23:00:45  27  ,clse-avg16 ca16
23:00:45  28  ,clse-avg18 ca18
23:00:45  29  -- clse relation to moving-max
23:00:45  30  ,clse-max4  cx4
23:00:45  31  ,clse-max6  cx6
23:00:45  32  ,clse-max8  cx8
23:00:45  33  ,clse-max10 cx10
23:00:45  34  ,clse-max12 cx12
23:00:45  35  ,clse-max14 cx14
23:00:45  36  ,clse-max16 cx16
23:00:45  37  ,clse-max18 cx18
23:00:45  38  -- Derive more attributes.
23:00:45  39  -- I want to use CORR() here to help SVM see the shape of the series.
23:00:45  40  -- But COVAR_POP is more stable:
23:00:45  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
23:00:45  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
23:00:45  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
23:00:45  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
23:00:45  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
23:00:45  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
23:00:45  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
23:00:45  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
23:00:45  49  -- Derive date related attributes:
23:00:45  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
23:00:45  51  ,0+TO_CHAR(ydate,'D')d
23:00:45  52  ,0+TO_CHAR(ydate,'W')w
23:00:45  53  -- mpm stands for minutes-past-midnight:
23:00:45  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
23:00:45  55  -- mph stands for minutes-past-hour:
23:00:45  56  ,0+TO_CHAR(ydate,'MI')mph
23:00:45  57  FROM svm6102
23:00:45  58  ORDER BY ydate
23:00:45  59  /

Table created.

Elapsed: 00:00:02.45
23:00:48 SQL> 
23:00:48 SQL> -- rpt
23:00:48 SQL> 
23:00:48 SQL> SELECT
23:00:48   2  pair
23:00:48   3  ,COUNT(pair)
23:00:48   4  ,MIN(clse),MAX(clse)
23:00:48   5  ,MIN(ydate),MAX(ydate)
23:00:48   6  FROM svm6122
23:00:48   7  GROUP BY pair
23:00:48   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_usd       19810    1.29735	   1.4273 2010-10-03 23:05:01 2011-01-06 22:55:00

Elapsed: 00:00:00.05
23:00:48 SQL> 
23:00:48 SQL> -- Prepare for derivation of NTILE based params:
23:00:48 SQL> 
23:00:48 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.31
23:00:48 SQL> CREATE TABLE svm6142 COMPRESS AS
23:00:48   2  SELECT
23:00:48   3  pair
23:00:48   4  ,ydate
23:00:48   5  ,prdate
23:00:48   6  ,clse
23:00:48   7  ,g6
23:00:48   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
23:00:48   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
23:00:48  10  ,CASE WHEN trend IS NULL THEN 1
23:00:48  11  	    WHEN trend =0      THEN 1
23:00:48  12  	    ELSE trend END trend
23:00:48  13  ,cm4
23:00:48  14  ,cm6
23:00:48  15  ,cm8
23:00:48  16  ,cm10
23:00:48  17  ,cm12
23:00:48  18  ,cm14
23:00:48  19  ,cm16
23:00:48  20  ,cm18
23:00:48  21  --
23:00:48  22  ,ca4
23:00:48  23  ,ca6
23:00:48  24  ,ca8
23:00:48  25  ,ca10
23:00:48  26  ,ca12
23:00:48  27  ,ca14
23:00:48  28  ,ca16
23:00:48  29  ,ca18
23:00:48  30  --
23:00:48  31  ,cx4
23:00:48  32  ,cx6
23:00:48  33  ,cx8
23:00:48  34  ,cx10
23:00:48  35  ,cx12
23:00:48  36  ,cx14
23:00:48  37  ,cx16
23:00:48  38  ,cx18
23:00:48  39  --
23:00:48  40  ,crr4
23:00:48  41  ,crr6
23:00:48  42  ,crr8
23:00:48  43  ,crr10
23:00:48  44  ,crr12
23:00:48  45  ,crr14
23:00:48  46  ,crr16
23:00:48  47  ,crr18
23:00:48  48  --
23:00:48  49  ,hh
23:00:48  50  ,d
23:00:48  51  ,w
23:00:48  52  ,mpm
23:00:48  53  ,mph
23:00:48  54  FROM svm6122
23:00:48  55  ORDER BY ydate
23:00:48  56  /

Table created.

Elapsed: 00:00:00.39
23:00:49 SQL> 
23:00:49 SQL> -- rpt
23:00:49 SQL> 
23:00:49 SQL> SELECT
23:00:49   2  pair
23:00:49   3  ,trend
23:00:49   4  ,gatt
23:00:49   5  ,COUNT(pair)
23:00:49   6  ,AVG(g6)
23:00:49   7  FROM svm6142
23:00:49   8  GROUP BY pair,trend,gatt
23:00:49   9  ORDER BY pair,trend,gatt
23:00:49  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6578 -.00317477
eur_usd 	-1 up	      3570 .004447223
eur_usd 	-1		72
eur_usd 	 1 nup	      5885 -.00325921
eur_usd 	 1 up	      3705 .005071238

Elapsed: 00:00:00.04
23:00:49 SQL> 
23:00:49 SQL> 
23:00:49 SQL> -- Derive NTILE based params:
23:00:49 SQL> 
23:00:49 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.81
23:00:49 SQL> CREATE TABLE svm6162 COMPRESS AS
23:00:49   2  SELECT
23:00:49   3  pair
23:00:49   4  ,ydate
23:00:49   5  ,prdate
23:00:49   6  ,clse
23:00:49   7  ,g6
23:00:49   8  ,gatt
23:00:49   9  ,gattn
23:00:49  10  ,trend
23:00:49  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
23:00:49  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
23:00:49  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
23:00:49  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
23:00:49  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
23:00:49  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
23:00:49  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
23:00:49  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
23:00:49  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
23:00:49  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
23:00:49  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
23:00:49  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
23:00:49  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
23:00:49  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
23:00:49  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
23:00:49  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
23:00:49  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
23:00:49  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
23:00:49  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
23:00:49  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
23:00:49  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
23:00:49  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
23:00:49  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
23:00:49  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
23:00:49  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
23:00:49  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
23:00:49  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
23:00:49  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
23:00:49  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
23:00:49  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
23:00:49  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
23:00:49  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
23:00:49  43  ,hh  att32
23:00:49  44  ,d   att33
23:00:49  45  ,w   att34
23:00:49  46  ,mpm att35
23:00:49  47  ,mph att36
23:00:49  48  ,trend att37
23:00:49  49  FROM svm6142
23:00:49  50  ORDER BY ydate
23:00:49  51  /

Table created.

Elapsed: 00:00:04.88
23:00:54 SQL> 
23:00:54 SQL> -- rpt
23:00:54 SQL> 
23:00:54 SQL> SELECT
23:00:54   2  pair
23:00:54   3  ,trend
23:00:54   4  ,gatt
23:00:54   5  ,COUNT(pair)
23:00:54   6  ,AVG(g6)
23:00:54   7  FROM svm6162
23:00:54   8  GROUP BY pair,trend,gatt
23:00:54   9  ORDER BY pair,trend,gatt
23:00:54  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6578 -.00317477
eur_usd 	-1 up	      3570 .004447223
eur_usd 	-1		72
eur_usd 	 1 nup	      5885 -.00325921
eur_usd 	 1 up	      3705 .005071238

Elapsed: 00:00:00.03
23:00:54 SQL> 
23:00:54 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.05
23:00:54 SQL> CREATE TABLE modsrc COMPRESS AS
23:00:54   2  SELECT
23:00:54   3  pair
23:00:54   4  ,ydate
23:00:54   5  ,prdate
23:00:54   6  ,trend
23:00:54   7  ,g6
23:00:54   8  ,gatt
23:00:54   9  ,gattn
23:00:54  10  FROM svm6162
23:00:54  11  /

Table created.

Elapsed: 00:00:00.08
23:00:54 SQL> 
23:00:54 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
23:00:55 SQL> 
23:00:55 SQL> DROP   TABLE eur_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
23:00:55 SQL> CREATE TABLE eur_ms610 COMPRESS AS
23:00:55   2  SELECT
23:00:55   3  ydate
23:00:55   4  ,trend eur_trend
23:00:55   5  ,g6    eur_g6
23:00:55   6  ,gatt  eur_gatt
23:00:55   7  ,gattn eur_gattn
23:00:55   8  FROM modsrc
23:00:55   9  /

Table created.

Elapsed: 00:00:00.07
23:00:55 SQL> 
23:00:55 SQL> ANALYZE TABLE eur_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.14
23:00:55 SQL> 
23:00:55 SQL> -- I need a copy of the attributes:
23:00:55 SQL> 
23:00:55 SQL> 
23:00:55 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.04
23:00:55 SQL> CREATE TABLE eur_att COMPRESS AS
23:00:55   2  SELECT
23:00:55   3  ydate
23:00:55   4  ,att00 eur_att00
23:00:55   5  ,att01 eur_att01
23:00:55   6  ,att02 eur_att02
23:00:55   7  ,att03 eur_att03
23:00:55   8  ,att04 eur_att04
23:00:55   9  ,att05 eur_att05
23:00:55  10  ,att06 eur_att06
23:00:55  11  ,att07 eur_att07
23:00:55  12  ,att08 eur_att08
23:00:55  13  ,att09 eur_att09
23:00:55  14  ,att10 eur_att10
23:00:55  15  ,att11 eur_att11
23:00:55  16  ,att12 eur_att12
23:00:55  17  ,att13 eur_att13
23:00:55  18  ,att14 eur_att14
23:00:55  19  ,att15 eur_att15
23:00:55  20  ,att16 eur_att16
23:00:55  21  ,att17 eur_att17
23:00:55  22  ,att18 eur_att18
23:00:55  23  ,att19 eur_att19
23:00:55  24  ,att20 eur_att20
23:00:55  25  ,att21 eur_att21
23:00:55  26  ,att22 eur_att22
23:00:55  27  ,att23 eur_att23
23:00:55  28  ,att24 eur_att24
23:00:55  29  ,att25 eur_att25
23:00:55  30  ,att26 eur_att26
23:00:55  31  ,att27 eur_att27
23:00:55  32  ,att28 eur_att28
23:00:55  33  ,att29 eur_att29
23:00:55  34  ,att30 eur_att30
23:00:55  35  ,att31 eur_att31
23:00:55  36  ,att32 eur_att32
23:00:55  37  ,att33 eur_att33
23:00:55  38  ,att34 eur_att34
23:00:55  39  ,att35 eur_att35
23:00:55  40  ,att36 eur_att36
23:00:55  41  ,att37 eur_att37
23:00:55  42  FROM svm6162
23:00:55  43  /

Table created.

Elapsed: 00:00:00.16
23:00:55 SQL> 
23:00:55 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.44
23:00:56 SQL> 
23:00:56 SQL> -- rpt
23:00:56 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19810

Elapsed: 00:00:00.88
23:00:56 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     19810

Elapsed: 00:00:00.00
23:00:56 SQL> 
23:00:56 SQL> --
23:00:56 SQL> -- aud610.sql
23:00:56 SQL> --
23:00:56 SQL> 
23:00:56 SQL> -- Creates views and tables for backtesting a forex SVM strategy
23:00:56 SQL> 
23:00:56 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.37
23:00:57 SQL> 
23:00:57 SQL> -- I created di5min here:
23:00:57 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
23:00:57 SQL> 
23:00:57 SQL> CREATE OR REPLACE VIEW svm6102 AS
23:00:57   2  SELECT
23:00:57   3  pair
23:00:57   4  ,ydate
23:00:57   5  ,prdate
23:00:57   6  ,rownum rnum -- acts as t in my time-series
23:00:57   7  ,clse
23:00:57   8  -- Derive a bunch of attributes from clse, the latest price:
23:00:57   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
23:00:57  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
23:00:57  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
23:00:57  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
23:00:57  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
23:00:57  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
23:00:57  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
23:00:57  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
23:00:57  17  --
23:00:57  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
23:00:57  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
23:00:57  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
23:00:57  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
23:00:57  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
23:00:57  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
23:00:57  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
23:00:57  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
23:00:57  26  --
23:00:57  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
23:00:57  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
23:00:57  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
23:00:57  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
23:00:57  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
23:00:57  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
23:00:57  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
23:00:57  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
23:00:57  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
23:00:57  36  FROM di5min WHERE pair LIKE'%aud%'
23:00:57  37  AND ydate > sysdate - 95
23:00:57  38  ORDER BY ydate
23:00:57  39  /

View created.

Elapsed: 00:00:00.05
23:00:57 SQL> 
23:00:57 SQL> -- rpt
23:00:57 SQL> 
23:00:57 SQL> SELECT
23:00:57   2  pair
23:00:57   3  ,COUNT(pair)
23:00:57   4  ,MIN(clse),MAX(clse)
23:00:57   5  ,MIN(avg6),MAX(avg6)
23:00:57   6  ,MIN(ydate),MAX(ydate)
23:00:57   7  FROM svm6102
23:00:57   8  GROUP BY pair
23:00:57   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
aud_usd       19807	.95405	  1.02495 .957141438 1.02284247 2010-10-03 23:05:01 2011-01-06 22:55:00

Elapsed: 00:00:00.91
23:00:58 SQL> 
23:00:58 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
23:00:58 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.24
23:00:58 SQL> CREATE TABLE svm6122 COMPRESS AS
23:00:58   2  SELECT
23:00:58   3  pair
23:00:58   4  ,ydate
23:00:58   5  ,prdate
23:00:58   6  ,clse
23:00:58   7  -- g6 is important. I want to predict g6:
23:00:58   8  ,ld6 - clse g6
23:00:58   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
23:00:58  10  -- I want more attributes from the ones I derived above:
23:00:58  11  -- clse relation to moving-min
23:00:58  12  ,clse-min4  cm4
23:00:58  13  ,clse-min6  cm6
23:00:58  14  ,clse-min8  cm8
23:00:58  15  ,clse-min10 cm10
23:00:58  16  ,clse-min12 cm12
23:00:58  17  ,clse-min14 cm14
23:00:58  18  ,clse-min16 cm16
23:00:58  19  ,clse-min18 cm18
23:00:58  20  -- clse relation to moving-avg
23:00:58  21  ,clse-avg4  ca4
23:00:58  22  ,clse-avg6  ca6
23:00:58  23  ,clse-avg8  ca8
23:00:58  24  ,clse-avg10 ca10
23:00:58  25  ,clse-avg12 ca12
23:00:58  26  ,clse-avg14 ca14
23:00:58  27  ,clse-avg16 ca16
23:00:58  28  ,clse-avg18 ca18
23:00:58  29  -- clse relation to moving-max
23:00:58  30  ,clse-max4  cx4
23:00:58  31  ,clse-max6  cx6
23:00:58  32  ,clse-max8  cx8
23:00:58  33  ,clse-max10 cx10
23:00:58  34  ,clse-max12 cx12
23:00:58  35  ,clse-max14 cx14
23:00:58  36  ,clse-max16 cx16
23:00:58  37  ,clse-max18 cx18
23:00:58  38  -- Derive more attributes.
23:00:58  39  -- I want to use CORR() here to help SVM see the shape of the series.
23:00:58  40  -- But COVAR_POP is more stable:
23:00:58  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
23:00:58  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
23:00:58  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
23:00:58  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
23:00:58  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
23:00:58  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
23:00:58  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
23:00:58  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
23:00:58  49  -- Derive date related attributes:
23:00:58  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
23:00:58  51  ,0+TO_CHAR(ydate,'D')d
23:00:58  52  ,0+TO_CHAR(ydate,'W')w
23:00:58  53  -- mpm stands for minutes-past-midnight:
23:00:58  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
23:00:58  55  -- mph stands for minutes-past-hour:
23:00:58  56  ,0+TO_CHAR(ydate,'MI')mph
23:00:58  57  FROM svm6102
23:00:58  58  ORDER BY ydate
23:00:58  59  /

Table created.

Elapsed: 00:00:02.10
23:01:00 SQL> 
23:01:00 SQL> -- rpt
23:01:00 SQL> 
23:01:00 SQL> SELECT
23:01:00   2  pair
23:01:00   3  ,COUNT(pair)
23:01:00   4  ,MIN(clse),MAX(clse)
23:01:00   5  ,MIN(ydate),MAX(ydate)
23:01:00   6  FROM svm6122
23:01:00   7  GROUP BY pair
23:01:00   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
aud_usd       19807	.95405	  1.02495 2010-10-03 23:05:01 2011-01-06 22:55:00

Elapsed: 00:00:00.04
23:01:00 SQL> 
23:01:00 SQL> -- Prepare for derivation of NTILE based params:
23:01:00 SQL> 
23:01:00 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.26
23:01:00 SQL> CREATE TABLE svm6142 COMPRESS AS
23:01:00   2  SELECT
23:01:00   3  pair
23:01:00   4  ,ydate
23:01:00   5  ,prdate
23:01:00   6  ,clse
23:01:00   7  ,g6
23:01:00   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
23:01:00   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
23:01:00  10  ,CASE WHEN trend IS NULL THEN 1
23:01:00  11  	    WHEN trend =0      THEN 1
23:01:00  12  	    ELSE trend END trend
23:01:00  13  ,cm4
23:01:00  14  ,cm6
23:01:00  15  ,cm8
23:01:00  16  ,cm10
23:01:00  17  ,cm12
23:01:00  18  ,cm14
23:01:00  19  ,cm16
23:01:00  20  ,cm18
23:01:00  21  --
23:01:00  22  ,ca4
23:01:00  23  ,ca6
23:01:00  24  ,ca8
23:01:00  25  ,ca10
23:01:00  26  ,ca12
23:01:00  27  ,ca14
23:01:00  28  ,ca16
23:01:00  29  ,ca18
23:01:00  30  --
23:01:00  31  ,cx4
23:01:00  32  ,cx6
23:01:00  33  ,cx8
23:01:00  34  ,cx10
23:01:00  35  ,cx12
23:01:00  36  ,cx14
23:01:00  37  ,cx16
23:01:00  38  ,cx18
23:01:00  39  --
23:01:00  40  ,crr4
23:01:00  41  ,crr6
23:01:00  42  ,crr8
23:01:00  43  ,crr10
23:01:00  44  ,crr12
23:01:00  45  ,crr14
23:01:00  46  ,crr16
23:01:00  47  ,crr18
23:01:00  48  --
23:01:00  49  ,hh
23:01:00  50  ,d
23:01:00  51  ,w
23:01:00  52  ,mpm
23:01:00  53  ,mph
23:01:00  54  FROM svm6122
23:01:00  55  ORDER BY ydate
23:01:00  56  /

Table created.

Elapsed: 00:00:00.38
23:01:01 SQL> 
23:01:01 SQL> -- rpt
23:01:01 SQL> 
23:01:01 SQL> SELECT
23:01:01   2  pair
23:01:01   3  ,trend
23:01:01   4  ,gatt
23:01:01   5  ,COUNT(pair)
23:01:01   6  ,AVG(g6)
23:01:01   7  FROM svm6142
23:01:01   8  GROUP BY pair,trend,gatt
23:01:01   9  ORDER BY pair,trend,gatt
23:01:01  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5711 -.00214252
aud_usd 	-1 up	      3701 .003745866
aud_usd 	-1		72
aud_usd 	 1 nup	      6730 -.00213873
aud_usd 	 1 up	      3593 .004054752

Elapsed: 00:00:00.04
23:01:01 SQL> 
23:01:01 SQL> 
23:01:01 SQL> -- Derive NTILE based params:
23:01:01 SQL> 
23:01:01 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.22
23:01:01 SQL> CREATE TABLE svm6162 COMPRESS AS
23:01:01   2  SELECT
23:01:01   3  pair
23:01:01   4  ,ydate
23:01:01   5  ,prdate
23:01:01   6  ,clse
23:01:01   7  ,g6
23:01:01   8  ,gatt
23:01:01   9  ,gattn
23:01:01  10  ,trend
23:01:01  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
23:01:01  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
23:01:01  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
23:01:01  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
23:01:01  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
23:01:01  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
23:01:01  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
23:01:01  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
23:01:01  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
23:01:01  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
23:01:01  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
23:01:01  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
23:01:01  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
23:01:01  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
23:01:01  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
23:01:01  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
23:01:01  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
23:01:01  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
23:01:01  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
23:01:01  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
23:01:01  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
23:01:01  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
23:01:01  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
23:01:01  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
23:01:01  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
23:01:01  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
23:01:01  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
23:01:01  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
23:01:01  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
23:01:01  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
23:01:01  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
23:01:01  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
23:01:01  43  ,hh  att32
23:01:01  44  ,d   att33
23:01:01  45  ,w   att34
23:01:01  46  ,mpm att35
23:01:01  47  ,mph att36
23:01:01  48  ,trend att37
23:01:01  49  FROM svm6142
23:01:01  50  ORDER BY ydate
23:01:01  51  /

Table created.

Elapsed: 00:00:04.78
23:01:06 SQL> 
23:01:06 SQL> -- rpt
23:01:06 SQL> 
23:01:06 SQL> SELECT
23:01:06   2  pair
23:01:06   3  ,trend
23:01:06   4  ,gatt
23:01:06   5  ,COUNT(pair)
23:01:06   6  ,AVG(g6)
23:01:06   7  FROM svm6162
23:01:06   8  GROUP BY pair,trend,gatt
23:01:06   9  ORDER BY pair,trend,gatt
23:01:06  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5711 -.00214252
aud_usd 	-1 up	      3701 .003745866
aud_usd 	-1		72
aud_usd 	 1 nup	      6730 -.00213873
aud_usd 	 1 up	      3593 .004054752

Elapsed: 00:00:00.02
23:01:06 SQL> 
23:01:06 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
23:01:06 SQL> CREATE TABLE modsrc COMPRESS AS
23:01:06   2  SELECT
23:01:06   3  pair
23:01:06   4  ,ydate
23:01:06   5  ,prdate
23:01:06   6  ,trend
23:01:06   7  ,g6
23:01:06   8  ,gatt
23:01:06   9  ,gattn
23:01:06  10  FROM svm6162
23:01:06  11  /

Table created.

Elapsed: 00:00:00.08
23:01:06 SQL> 
23:01:06 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
23:01:06 SQL> 
23:01:06 SQL> DROP   TABLE aud_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
23:01:06 SQL> CREATE TABLE aud_ms610 COMPRESS AS
23:01:06   2  SELECT
23:01:06   3  ydate
23:01:06   4  ,trend aud_trend
23:01:06   5  ,g6    aud_g6
23:01:06   6  ,gatt  aud_gatt
23:01:06   7  ,gattn aud_gattn
23:01:06   8  FROM modsrc
23:01:06   9  /

Table created.

Elapsed: 00:00:00.07
23:01:06 SQL> 
23:01:06 SQL> ANALYZE TABLE aud_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
23:01:07 SQL> 
23:01:07 SQL> -- I need a copy of the attributes:
23:01:07 SQL> 
23:01:07 SQL> 
23:01:07 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.05
23:01:07 SQL> CREATE TABLE aud_att COMPRESS AS
23:01:07   2  SELECT
23:01:07   3  ydate
23:01:07   4  ,att00 aud_att00
23:01:07   5  ,att01 aud_att01
23:01:07   6  ,att02 aud_att02
23:01:07   7  ,att03 aud_att03
23:01:07   8  ,att04 aud_att04
23:01:07   9  ,att05 aud_att05
23:01:07  10  ,att06 aud_att06
23:01:07  11  ,att07 aud_att07
23:01:07  12  ,att08 aud_att08
23:01:07  13  ,att09 aud_att09
23:01:07  14  ,att10 aud_att10
23:01:07  15  ,att11 aud_att11
23:01:07  16  ,att12 aud_att12
23:01:07  17  ,att13 aud_att13
23:01:07  18  ,att14 aud_att14
23:01:07  19  ,att15 aud_att15
23:01:07  20  ,att16 aud_att16
23:01:07  21  ,att17 aud_att17
23:01:07  22  ,att18 aud_att18
23:01:07  23  ,att19 aud_att19
23:01:07  24  ,att20 aud_att20
23:01:07  25  ,att21 aud_att21
23:01:07  26  ,att22 aud_att22
23:01:07  27  ,att23 aud_att23
23:01:07  28  ,att24 aud_att24
23:01:07  29  ,att25 aud_att25
23:01:07  30  ,att26 aud_att26
23:01:07  31  ,att27 aud_att27
23:01:07  32  ,att28 aud_att28
23:01:07  33  ,att29 aud_att29
23:01:07  34  ,att30 aud_att30
23:01:07  35  ,att31 aud_att31
23:01:07  36  ,att32 aud_att32
23:01:07  37  ,att33 aud_att33
23:01:07  38  ,att34 aud_att34
23:01:07  39  ,att35 aud_att35
23:01:07  40  ,att36 aud_att36
23:01:07  41  ,att37 aud_att37
23:01:07  42  FROM svm6162
23:01:07  43  /

Table created.

Elapsed: 00:00:00.19
23:01:07 SQL> 
23:01:07 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
23:01:07 SQL> 
23:01:07 SQL> -- rpt
23:01:07 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19807

Elapsed: 00:00:00.86
23:01:08 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     19807

Elapsed: 00:00:00.00
23:01:08 SQL> 
23:01:08 SQL> --
23:01:08 SQL> -- gbp610.sql
23:01:08 SQL> --
23:01:08 SQL> 
23:01:08 SQL> -- Creates views and tables for backtesting a forex SVM strategy
23:01:08 SQL> 
23:01:08 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.39
23:01:08 SQL> 
23:01:08 SQL> -- I created di5min here:
23:01:08 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
23:01:08 SQL> 
23:01:08 SQL> CREATE OR REPLACE VIEW svm6102 AS
23:01:08   2  SELECT
23:01:08   3  pair
23:01:08   4  ,ydate
23:01:08   5  ,prdate
23:01:08   6  ,rownum rnum -- acts as t in my time-series
23:01:08   7  ,clse
23:01:08   8  -- Derive a bunch of attributes from clse, the latest price:
23:01:08   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
23:01:08  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
23:01:08  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
23:01:08  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
23:01:08  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
23:01:08  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
23:01:08  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
23:01:08  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
23:01:08  17  --
23:01:08  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
23:01:08  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
23:01:08  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
23:01:08  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
23:01:08  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
23:01:08  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
23:01:08  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
23:01:08  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
23:01:08  26  --
23:01:08  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
23:01:08  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
23:01:08  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
23:01:08  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
23:01:08  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
23:01:08  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
23:01:08  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
23:01:08  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
23:01:08  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
23:01:08  36  FROM di5min WHERE pair LIKE'%gbp%'
23:01:08  37  AND ydate > sysdate - 95
23:01:08  38  ORDER BY ydate
23:01:08  39  /

View created.

Elapsed: 00:00:00.04
23:01:09 SQL> 
23:01:09 SQL> -- rpt
23:01:09 SQL> 
23:01:09 SQL> SELECT
23:01:09   2  pair
23:01:09   3  ,COUNT(pair)
23:01:09   4  ,MIN(clse),MAX(clse)
23:01:09   5  ,MIN(avg6),MAX(avg6)
23:01:09   6  ,MIN(ydate),MAX(ydate)
23:01:09   7  FROM svm6102
23:01:09   8  GROUP BY pair
23:01:09   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
gbp_usd       19809   1.535325	   1.6295 1.53696747 1.62716986 2010-10-03 23:05:01 2011-01-06 22:55:00

Elapsed: 00:00:00.89
23:01:09 SQL> 
23:01:09 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
23:01:09 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.28
23:01:10 SQL> CREATE TABLE svm6122 COMPRESS AS
23:01:10   2  SELECT
23:01:10   3  pair
23:01:10   4  ,ydate
23:01:10   5  ,prdate
23:01:10   6  ,clse
23:01:10   7  -- g6 is important. I want to predict g6:
23:01:10   8  ,ld6 - clse g6
23:01:10   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
23:01:10  10  -- I want more attributes from the ones I derived above:
23:01:10  11  -- clse relation to moving-min
23:01:10  12  ,clse-min4  cm4
23:01:10  13  ,clse-min6  cm6
23:01:10  14  ,clse-min8  cm8
23:01:10  15  ,clse-min10 cm10
23:01:10  16  ,clse-min12 cm12
23:01:10  17  ,clse-min14 cm14
23:01:10  18  ,clse-min16 cm16
23:01:10  19  ,clse-min18 cm18
23:01:10  20  -- clse relation to moving-avg
23:01:10  21  ,clse-avg4  ca4
23:01:10  22  ,clse-avg6  ca6
23:01:10  23  ,clse-avg8  ca8
23:01:10  24  ,clse-avg10 ca10
23:01:10  25  ,clse-avg12 ca12
23:01:10  26  ,clse-avg14 ca14
23:01:10  27  ,clse-avg16 ca16
23:01:10  28  ,clse-avg18 ca18
23:01:10  29  -- clse relation to moving-max
23:01:10  30  ,clse-max4  cx4
23:01:10  31  ,clse-max6  cx6
23:01:10  32  ,clse-max8  cx8
23:01:10  33  ,clse-max10 cx10
23:01:10  34  ,clse-max12 cx12
23:01:10  35  ,clse-max14 cx14
23:01:10  36  ,clse-max16 cx16
23:01:10  37  ,clse-max18 cx18
23:01:10  38  -- Derive more attributes.
23:01:10  39  -- I want to use CORR() here to help SVM see the shape of the series.
23:01:10  40  -- But COVAR_POP is more stable:
23:01:10  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
23:01:10  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
23:01:10  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
23:01:10  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
23:01:10  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
23:01:10  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
23:01:10  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
23:01:10  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
23:01:10  49  -- Derive date related attributes:
23:01:10  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
23:01:10  51  ,0+TO_CHAR(ydate,'D')d
23:01:10  52  ,0+TO_CHAR(ydate,'W')w
23:01:10  53  -- mpm stands for minutes-past-midnight:
23:01:10  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
23:01:10  55  -- mph stands for minutes-past-hour:
23:01:10  56  ,0+TO_CHAR(ydate,'MI')mph
23:01:10  57  FROM svm6102
23:01:10  58  ORDER BY ydate
23:01:10  59  /

Table created.

Elapsed: 00:00:02.09
23:01:12 SQL> 
23:01:12 SQL> -- rpt
23:01:12 SQL> 
23:01:12 SQL> SELECT
23:01:12   2  pair
23:01:12   3  ,COUNT(pair)
23:01:12   4  ,MIN(clse),MAX(clse)
23:01:12   5  ,MIN(ydate),MAX(ydate)
23:01:12   6  FROM svm6122
23:01:12   7  GROUP BY pair
23:01:12   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
gbp_usd       19809   1.535325	   1.6295 2010-10-03 23:05:01 2011-01-06 22:55:00

Elapsed: 00:00:00.03
23:01:12 SQL> 
23:01:12 SQL> -- Prepare for derivation of NTILE based params:
23:01:12 SQL> 
23:01:12 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.24
23:01:12 SQL> CREATE TABLE svm6142 COMPRESS AS
23:01:12   2  SELECT
23:01:12   3  pair
23:01:12   4  ,ydate
23:01:12   5  ,prdate
23:01:12   6  ,clse
23:01:12   7  ,g6
23:01:12   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
23:01:12   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
23:01:12  10  ,CASE WHEN trend IS NULL THEN 1
23:01:12  11  	    WHEN trend =0      THEN 1
23:01:12  12  	    ELSE trend END trend
23:01:12  13  ,cm4
23:01:12  14  ,cm6
23:01:12  15  ,cm8
23:01:12  16  ,cm10
23:01:12  17  ,cm12
23:01:12  18  ,cm14
23:01:12  19  ,cm16
23:01:12  20  ,cm18
23:01:12  21  --
23:01:12  22  ,ca4
23:01:12  23  ,ca6
23:01:12  24  ,ca8
23:01:12  25  ,ca10
23:01:12  26  ,ca12
23:01:12  27  ,ca14
23:01:12  28  ,ca16
23:01:12  29  ,ca18
23:01:12  30  --
23:01:12  31  ,cx4
23:01:12  32  ,cx6
23:01:12  33  ,cx8
23:01:12  34  ,cx10
23:01:12  35  ,cx12
23:01:12  36  ,cx14
23:01:12  37  ,cx16
23:01:12  38  ,cx18
23:01:12  39  --
23:01:12  40  ,crr4
23:01:12  41  ,crr6
23:01:12  42  ,crr8
23:01:12  43  ,crr10
23:01:12  44  ,crr12
23:01:12  45  ,crr14
23:01:12  46  ,crr16
23:01:12  47  ,crr18
23:01:12  48  --
23:01:12  49  ,hh
23:01:12  50  ,d
23:01:12  51  ,w
23:01:12  52  ,mpm
23:01:12  53  ,mph
23:01:12  54  FROM svm6122
23:01:12  55  ORDER BY ydate
23:01:12  56  /

Table created.

Elapsed: 00:00:00.36
23:01:12 SQL> 
23:01:12 SQL> -- rpt
23:01:12 SQL> 
23:01:12 SQL> SELECT
23:01:12   2  pair
23:01:12   3  ,trend
23:01:12   4  ,gatt
23:01:12   5  ,COUNT(pair)
23:01:12   6  ,AVG(g6)
23:01:12   7  FROM svm6142
23:01:12   8  GROUP BY pair,trend,gatt
23:01:12   9  ORDER BY pair,trend,gatt
23:01:12  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6425  -.0026304
gbp_usd 	-1 up	      3575 .004341794
gbp_usd 	-1		55
gbp_usd 	 1 nup	      6277 -.00265409
gbp_usd 	 1 up	      3460 .004521181
gbp_usd 	 1		17

6 rows selected.

Elapsed: 00:00:00.05
23:01:12 SQL> 
23:01:12 SQL> 
23:01:12 SQL> -- Derive NTILE based params:
23:01:12 SQL> 
23:01:12 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.21
23:01:13 SQL> CREATE TABLE svm6162 COMPRESS AS
23:01:13   2  SELECT
23:01:13   3  pair
23:01:13   4  ,ydate
23:01:13   5  ,prdate
23:01:13   6  ,clse
23:01:13   7  ,g6
23:01:13   8  ,gatt
23:01:13   9  ,gattn
23:01:13  10  ,trend
23:01:13  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
23:01:13  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
23:01:13  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
23:01:13  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
23:01:13  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
23:01:13  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
23:01:13  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
23:01:13  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
23:01:13  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
23:01:13  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
23:01:13  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
23:01:13  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
23:01:13  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
23:01:13  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
23:01:13  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
23:01:13  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
23:01:13  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
23:01:13  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
23:01:13  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
23:01:13  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
23:01:13  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
23:01:13  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
23:01:13  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
23:01:13  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
23:01:13  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
23:01:13  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
23:01:13  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
23:01:13  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
23:01:13  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
23:01:13  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
23:01:13  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
23:01:13  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
23:01:13  43  ,hh  att32
23:01:13  44  ,d   att33
23:01:13  45  ,w   att34
23:01:13  46  ,mpm att35
23:01:13  47  ,mph att36
23:01:13  48  ,trend att37
23:01:13  49  FROM svm6142
23:01:13  50  ORDER BY ydate
23:01:13  51  /

Table created.

Elapsed: 00:00:04.75
23:01:17 SQL> 
23:01:17 SQL> -- rpt
23:01:17 SQL> 
23:01:17 SQL> SELECT
23:01:17   2  pair
23:01:17   3  ,trend
23:01:17   4  ,gatt
23:01:17   5  ,COUNT(pair)
23:01:17   6  ,AVG(g6)
23:01:17   7  FROM svm6162
23:01:17   8  GROUP BY pair,trend,gatt
23:01:17   9  ORDER BY pair,trend,gatt
23:01:17  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6425  -.0026304
gbp_usd 	-1 up	      3575 .004341794
gbp_usd 	-1		55
gbp_usd 	 1 nup	      6277 -.00265409
gbp_usd 	 1 up	      3460 .004521181
gbp_usd 	 1		17

6 rows selected.

Elapsed: 00:00:00.03
23:01:17 SQL> 
23:01:17 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.19
23:01:18 SQL> CREATE TABLE modsrc COMPRESS AS
23:01:18   2  SELECT
23:01:18   3  pair
23:01:18   4  ,ydate
23:01:18   5  ,prdate
23:01:18   6  ,trend
23:01:18   7  ,g6
23:01:18   8  ,gatt
23:01:18   9  ,gattn
23:01:18  10  FROM svm6162
23:01:18  11  /

Table created.

Elapsed: 00:00:00.08
23:01:18 SQL> 
23:01:18 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
23:01:18 SQL> 
23:01:18 SQL> DROP   TABLE gbp_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
23:01:18 SQL> CREATE TABLE gbp_ms610 COMPRESS AS
23:01:18   2  SELECT
23:01:18   3  ydate
23:01:18   4  ,trend gbp_trend
23:01:18   5  ,g6    gbp_g6
23:01:18   6  ,gatt  gbp_gatt
23:01:18   7  ,gattn gbp_gattn
23:01:18   8  FROM modsrc
23:01:18   9  /

Table created.

Elapsed: 00:00:00.07
23:01:18 SQL> 
23:01:18 SQL> ANALYZE TABLE gbp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
23:01:18 SQL> 
23:01:18 SQL> -- I need a copy of the attributes:
23:01:18 SQL> 
23:01:18 SQL> 
23:01:18 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.09
23:01:18 SQL> CREATE TABLE gbp_att COMPRESS AS
23:01:18   2  SELECT
23:01:18   3  ydate
23:01:18   4  ,att00 gbp_att00
23:01:18   5  ,att01 gbp_att01
23:01:18   6  ,att02 gbp_att02
23:01:18   7  ,att03 gbp_att03
23:01:18   8  ,att04 gbp_att04
23:01:18   9  ,att05 gbp_att05
23:01:18  10  ,att06 gbp_att06
23:01:18  11  ,att07 gbp_att07
23:01:18  12  ,att08 gbp_att08
23:01:18  13  ,att09 gbp_att09
23:01:18  14  ,att10 gbp_att10
23:01:18  15  ,att11 gbp_att11
23:01:18  16  ,att12 gbp_att12
23:01:18  17  ,att13 gbp_att13
23:01:18  18  ,att14 gbp_att14
23:01:18  19  ,att15 gbp_att15
23:01:18  20  ,att16 gbp_att16
23:01:18  21  ,att17 gbp_att17
23:01:18  22  ,att18 gbp_att18
23:01:18  23  ,att19 gbp_att19
23:01:18  24  ,att20 gbp_att20
23:01:18  25  ,att21 gbp_att21
23:01:18  26  ,att22 gbp_att22
23:01:18  27  ,att23 gbp_att23
23:01:18  28  ,att24 gbp_att24
23:01:18  29  ,att25 gbp_att25
23:01:18  30  ,att26 gbp_att26
23:01:18  31  ,att27 gbp_att27
23:01:18  32  ,att28 gbp_att28
23:01:18  33  ,att29 gbp_att29
23:01:18  34  ,att30 gbp_att30
23:01:18  35  ,att31 gbp_att31
23:01:18  36  ,att32 gbp_att32
23:01:18  37  ,att33 gbp_att33
23:01:18  38  ,att34 gbp_att34
23:01:18  39  ,att35 gbp_att35
23:01:18  40  ,att36 gbp_att36
23:01:18  41  ,att37 gbp_att37
23:01:18  42  FROM svm6162
23:01:18  43  /

Table created.

Elapsed: 00:00:00.20
23:01:19 SQL> 
23:01:19 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.69
23:01:19 SQL> 
23:01:19 SQL> -- rpt
23:01:19 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19809

Elapsed: 00:00:00.88
23:01:20 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     19809

Elapsed: 00:00:00.00
23:01:20 SQL> 
23:01:20 SQL> --
23:01:20 SQL> -- jpy610.sql
23:01:20 SQL> --
23:01:20 SQL> 
23:01:20 SQL> -- Creates views and tables for backtesting a forex SVM strategy
23:01:20 SQL> 
23:01:20 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.33
23:01:20 SQL> 
23:01:20 SQL> -- I created di5min here:
23:01:20 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
23:01:20 SQL> 
23:01:20 SQL> CREATE OR REPLACE VIEW svm6102 AS
23:01:20   2  SELECT
23:01:20   3  pair
23:01:20   4  ,ydate
23:01:20   5  ,prdate
23:01:20   6  ,rownum rnum -- acts as t in my time-series
23:01:20   7  ,clse
23:01:20   8  -- Derive a bunch of attributes from clse, the latest price:
23:01:20   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
23:01:20  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
23:01:20  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
23:01:20  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
23:01:20  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
23:01:20  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
23:01:20  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
23:01:20  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
23:01:20  17  --
23:01:20  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
23:01:20  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
23:01:20  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
23:01:20  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
23:01:20  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
23:01:20  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
23:01:20  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
23:01:20  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
23:01:20  26  --
23:01:20  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
23:01:20  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
23:01:20  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
23:01:20  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
23:01:20  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
23:01:20  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
23:01:20  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
23:01:20  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
23:01:20  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
23:01:20  36  FROM di5min WHERE pair LIKE'%jpy%'
23:01:20  37  AND ydate > sysdate - 95
23:01:20  38  ORDER BY ydate
23:01:20  39  /

View created.

Elapsed: 00:00:00.05
23:01:20 SQL> 
23:01:20 SQL> -- rpt
23:01:20 SQL> 
23:01:20 SQL> SELECT
23:01:20   2  pair
23:01:20   3  ,COUNT(pair)
23:01:20   4  ,MIN(clse),MAX(clse)
23:01:20   5  ,MIN(avg6),MAX(avg6)
23:01:20   6  ,MIN(ydate),MAX(ydate)
23:01:20   7  FROM svm6102
23:01:20   8  GROUP BY pair
23:01:20   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_jpy       19808	 80.25	   84.485 80.3595205 84.3105479 2010-10-03 23:05:01 2011-01-06 22:55:00

Elapsed: 00:00:00.92
23:01:21 SQL> 
23:01:21 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
23:01:21 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.22
23:01:22 SQL> CREATE TABLE svm6122 COMPRESS AS
23:01:22   2  SELECT
23:01:22   3  pair
23:01:22   4  ,ydate
23:01:22   5  ,prdate
23:01:22   6  ,clse
23:01:22   7  -- g6 is important. I want to predict g6:
23:01:22   8  ,ld6 - clse g6
23:01:22   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
23:01:22  10  -- I want more attributes from the ones I derived above:
23:01:22  11  -- clse relation to moving-min
23:01:22  12  ,clse-min4  cm4
23:01:22  13  ,clse-min6  cm6
23:01:22  14  ,clse-min8  cm8
23:01:22  15  ,clse-min10 cm10
23:01:22  16  ,clse-min12 cm12
23:01:22  17  ,clse-min14 cm14
23:01:22  18  ,clse-min16 cm16
23:01:22  19  ,clse-min18 cm18
23:01:22  20  -- clse relation to moving-avg
23:01:22  21  ,clse-avg4  ca4
23:01:22  22  ,clse-avg6  ca6
23:01:22  23  ,clse-avg8  ca8
23:01:22  24  ,clse-avg10 ca10
23:01:22  25  ,clse-avg12 ca12
23:01:22  26  ,clse-avg14 ca14
23:01:22  27  ,clse-avg16 ca16
23:01:22  28  ,clse-avg18 ca18
23:01:22  29  -- clse relation to moving-max
23:01:22  30  ,clse-max4  cx4
23:01:22  31  ,clse-max6  cx6
23:01:22  32  ,clse-max8  cx8
23:01:22  33  ,clse-max10 cx10
23:01:22  34  ,clse-max12 cx12
23:01:22  35  ,clse-max14 cx14
23:01:22  36  ,clse-max16 cx16
23:01:22  37  ,clse-max18 cx18
23:01:22  38  -- Derive more attributes.
23:01:22  39  -- I want to use CORR() here to help SVM see the shape of the series.
23:01:22  40  -- But COVAR_POP is more stable:
23:01:22  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
23:01:22  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
23:01:22  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
23:01:22  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
23:01:22  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
23:01:22  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
23:01:22  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
23:01:22  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
23:01:22  49  -- Derive date related attributes:
23:01:22  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
23:01:22  51  ,0+TO_CHAR(ydate,'D')d
23:01:22  52  ,0+TO_CHAR(ydate,'W')w
23:01:22  53  -- mpm stands for minutes-past-midnight:
23:01:22  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
23:01:22  55  -- mph stands for minutes-past-hour:
23:01:22  56  ,0+TO_CHAR(ydate,'MI')mph
23:01:22  57  FROM svm6102
23:01:22  58  ORDER BY ydate
23:01:22  59  /

Table created.

Elapsed: 00:00:02.12
23:01:24 SQL> 
23:01:24 SQL> -- rpt
23:01:24 SQL> 
23:01:24 SQL> SELECT
23:01:24   2  pair
23:01:24   3  ,COUNT(pair)
23:01:24   4  ,MIN(clse),MAX(clse)
23:01:24   5  ,MIN(ydate),MAX(ydate)
23:01:24   6  FROM svm6122
23:01:24   7  GROUP BY pair
23:01:24   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_jpy       19808	 80.25	   84.485 2010-10-03 23:05:01 2011-01-06 22:55:00

Elapsed: 00:00:00.05
23:01:24 SQL> 
23:01:24 SQL> -- Prepare for derivation of NTILE based params:
23:01:24 SQL> 
23:01:24 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.24
23:01:24 SQL> CREATE TABLE svm6142 COMPRESS AS
23:01:24   2  SELECT
23:01:24   3  pair
23:01:24   4  ,ydate
23:01:24   5  ,prdate
23:01:24   6  ,clse
23:01:24   7  ,g6
23:01:24   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
23:01:24   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
23:01:24  10  ,CASE WHEN trend IS NULL THEN 1
23:01:24  11  	    WHEN trend =0      THEN 1
23:01:24  12  	    ELSE trend END trend
23:01:24  13  ,cm4
23:01:24  14  ,cm6
23:01:24  15  ,cm8
23:01:24  16  ,cm10
23:01:24  17  ,cm12
23:01:24  18  ,cm14
23:01:24  19  ,cm16
23:01:24  20  ,cm18
23:01:24  21  --
23:01:24  22  ,ca4
23:01:24  23  ,ca6
23:01:24  24  ,ca8
23:01:24  25  ,ca10
23:01:24  26  ,ca12
23:01:24  27  ,ca14
23:01:24  28  ,ca16
23:01:24  29  ,ca18
23:01:24  30  --
23:01:24  31  ,cx4
23:01:24  32  ,cx6
23:01:24  33  ,cx8
23:01:24  34  ,cx10
23:01:24  35  ,cx12
23:01:24  36  ,cx14
23:01:24  37  ,cx16
23:01:24  38  ,cx18
23:01:24  39  --
23:01:24  40  ,crr4
23:01:24  41  ,crr6
23:01:24  42  ,crr8
23:01:24  43  ,crr10
23:01:24  44  ,crr12
23:01:24  45  ,crr14
23:01:24  46  ,crr16
23:01:24  47  ,crr18
23:01:24  48  --
23:01:24  49  ,hh
23:01:24  50  ,d
23:01:24  51  ,w
23:01:24  52  ,mpm
23:01:24  53  ,mph
23:01:24  54  FROM svm6122
23:01:24  55  ORDER BY ydate
23:01:24  56  /

Table created.

Elapsed: 00:00:00.37
23:01:24 SQL> 
23:01:24 SQL> -- rpt
23:01:24 SQL> 
23:01:24 SQL> SELECT
23:01:24   2  pair
23:01:24   3  ,trend
23:01:24   4  ,gatt
23:01:24   5  ,COUNT(pair)
23:01:24   6  ,AVG(g6)
23:01:24   7  FROM svm6142
23:01:24   8  GROUP BY pair,trend,gatt
23:01:24   9  ORDER BY pair,trend,gatt
23:01:24  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5187 -.16544922
usd_jpy 	-1 up	      4910 .169311388
usd_jpy 	-1		 4
usd_jpy 	 1 nup	      5074  -.1550714
usd_jpy 	 1 up	      4565 .173911759
usd_jpy 	 1		68

6 rows selected.

Elapsed: 00:00:00.04
23:01:24 SQL> 
23:01:24 SQL> 
23:01:24 SQL> -- Derive NTILE based params:
23:01:24 SQL> 
23:01:24 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.17
23:01:25 SQL> CREATE TABLE svm6162 COMPRESS AS
23:01:25   2  SELECT
23:01:25   3  pair
23:01:25   4  ,ydate
23:01:25   5  ,prdate
23:01:25   6  ,clse
23:01:25   7  ,g6
23:01:25   8  ,gatt
23:01:25   9  ,gattn
23:01:25  10  ,trend
23:01:25  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
23:01:25  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
23:01:25  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
23:01:25  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
23:01:25  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
23:01:25  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
23:01:25  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
23:01:25  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
23:01:25  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
23:01:25  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
23:01:25  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
23:01:25  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
23:01:25  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
23:01:25  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
23:01:25  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
23:01:25  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
23:01:25  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
23:01:25  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
23:01:25  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
23:01:25  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
23:01:25  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
23:01:25  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
23:01:25  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
23:01:25  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
23:01:25  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
23:01:25  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
23:01:25  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
23:01:25  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
23:01:25  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
23:01:25  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
23:01:25  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
23:01:25  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
23:01:25  43  ,hh  att32
23:01:25  44  ,d   att33
23:01:25  45  ,w   att34
23:01:25  46  ,mpm att35
23:01:25  47  ,mph att36
23:01:25  48  ,trend att37
23:01:25  49  FROM svm6142
23:01:25  50  ORDER BY ydate
23:01:25  51  /

Table created.

Elapsed: 00:00:04.79
23:01:29 SQL> 
23:01:29 SQL> -- rpt
23:01:29 SQL> 
23:01:29 SQL> SELECT
23:01:29   2  pair
23:01:29   3  ,trend
23:01:29   4  ,gatt
23:01:29   5  ,COUNT(pair)
23:01:29   6  ,AVG(g6)
23:01:29   7  FROM svm6162
23:01:29   8  GROUP BY pair,trend,gatt
23:01:29   9  ORDER BY pair,trend,gatt
23:01:29  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5187 -.16544922
usd_jpy 	-1 up	      4910 .169311388
usd_jpy 	-1		 4
usd_jpy 	 1 nup	      5074  -.1550714
usd_jpy 	 1 up	      4565 .173911759
usd_jpy 	 1		68

6 rows selected.

Elapsed: 00:00:00.03
23:01:29 SQL> 
23:01:29 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
23:01:30 SQL> CREATE TABLE modsrc COMPRESS AS
23:01:30   2  SELECT
23:01:30   3  pair
23:01:30   4  ,ydate
23:01:30   5  ,prdate
23:01:30   6  ,trend
23:01:30   7  ,g6
23:01:30   8  ,gatt
23:01:30   9  ,gattn
23:01:30  10  FROM svm6162
23:01:30  11  /

Table created.

Elapsed: 00:00:00.10
23:01:30 SQL> 
23:01:30 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
23:01:30 SQL> 
23:01:30 SQL> DROP   TABLE jpy_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
23:01:30 SQL> CREATE TABLE jpy_ms610 COMPRESS AS
23:01:30   2  SELECT
23:01:30   3  ydate
23:01:30   4  ,trend jpy_trend
23:01:30   5  ,g6    jpy_g6
23:01:30   6  ,gatt  jpy_gatt
23:01:30   7  ,gattn jpy_gattn
23:01:30   8  FROM modsrc
23:01:30   9  /

Table created.

Elapsed: 00:00:00.07
23:01:30 SQL> 
23:01:30 SQL> ANALYZE TABLE jpy_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
23:01:30 SQL> 
23:01:30 SQL> -- I need a copy of the attributes:
23:01:30 SQL> 
23:01:30 SQL> 
23:01:30 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.04
23:01:30 SQL> CREATE TABLE jpy_att COMPRESS AS
23:01:30   2  SELECT
23:01:30   3  ydate
23:01:30   4  ,att00 jpy_att00
23:01:30   5  ,att01 jpy_att01
23:01:30   6  ,att02 jpy_att02
23:01:30   7  ,att03 jpy_att03
23:01:30   8  ,att04 jpy_att04
23:01:30   9  ,att05 jpy_att05
23:01:30  10  ,att06 jpy_att06
23:01:30  11  ,att07 jpy_att07
23:01:30  12  ,att08 jpy_att08
23:01:30  13  ,att09 jpy_att09
23:01:30  14  ,att10 jpy_att10
23:01:30  15  ,att11 jpy_att11
23:01:30  16  ,att12 jpy_att12
23:01:30  17  ,att13 jpy_att13
23:01:30  18  ,att14 jpy_att14
23:01:30  19  ,att15 jpy_att15
23:01:30  20  ,att16 jpy_att16
23:01:30  21  ,att17 jpy_att17
23:01:30  22  ,att18 jpy_att18
23:01:30  23  ,att19 jpy_att19
23:01:30  24  ,att20 jpy_att20
23:01:30  25  ,att21 jpy_att21
23:01:30  26  ,att22 jpy_att22
23:01:30  27  ,att23 jpy_att23
23:01:30  28  ,att24 jpy_att24
23:01:30  29  ,att25 jpy_att25
23:01:30  30  ,att26 jpy_att26
23:01:30  31  ,att27 jpy_att27
23:01:30  32  ,att28 jpy_att28
23:01:30  33  ,att29 jpy_att29
23:01:30  34  ,att30 jpy_att30
23:01:30  35  ,att31 jpy_att31
23:01:30  36  ,att32 jpy_att32
23:01:30  37  ,att33 jpy_att33
23:01:30  38  ,att34 jpy_att34
23:01:30  39  ,att35 jpy_att35
23:01:30  40  ,att36 jpy_att36
23:01:30  41  ,att37 jpy_att37
23:01:30  42  FROM svm6162
23:01:30  43  /

Table created.

Elapsed: 00:00:00.18
23:01:30 SQL> 
23:01:30 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
23:01:31 SQL> 
23:01:31 SQL> -- rpt
23:01:31 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19808

Elapsed: 00:00:00.91
23:01:32 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     19808

Elapsed: 00:00:00.00
23:01:32 SQL> 
23:01:32 SQL> --
23:01:32 SQL> -- cad610.sql
23:01:32 SQL> --
23:01:32 SQL> 
23:01:32 SQL> -- Creates views and tables for backtesting a forex SVM strategy
23:01:32 SQL> 
23:01:32 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.33
23:01:32 SQL> 
23:01:32 SQL> -- I created di5min here:
23:01:32 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
23:01:32 SQL> 
23:01:32 SQL> CREATE OR REPLACE VIEW svm6102 AS
23:01:32   2  SELECT
23:01:32   3  pair
23:01:32   4  ,ydate
23:01:32   5  ,prdate
23:01:32   6  ,rownum rnum -- acts as t in my time-series
23:01:32   7  ,clse
23:01:32   8  -- Derive a bunch of attributes from clse, the latest price:
23:01:32   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
23:01:32  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
23:01:32  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
23:01:32  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
23:01:32  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
23:01:32  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
23:01:32  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
23:01:32  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
23:01:32  17  --
23:01:32  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
23:01:32  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
23:01:32  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
23:01:32  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
23:01:32  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
23:01:32  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
23:01:32  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
23:01:32  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
23:01:32  26  --
23:01:32  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
23:01:32  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
23:01:32  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
23:01:32  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
23:01:32  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
23:01:32  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
23:01:32  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
23:01:32  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
23:01:32  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
23:01:32  36  FROM di5min WHERE pair LIKE'%cad%'
23:01:32  37  AND ydate > sysdate - 95
23:01:32  38  ORDER BY ydate
23:01:32  39  /

View created.

Elapsed: 00:00:00.04
23:01:32 SQL> 
23:01:32 SQL> -- rpt
23:01:32 SQL> 
23:01:32 SQL> SELECT
23:01:32   2  pair
23:01:32   3  ,COUNT(pair)
23:01:32   4  ,MIN(clse),MAX(clse)
23:01:32   5  ,MIN(avg6),MAX(avg6)
23:01:32   6  ,MIN(ydate),MAX(ydate)
23:01:32   7  FROM svm6102
23:01:32   8  GROUP BY pair
23:01:32   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_cad       19808    .988925	   1.0355  .99060274 1.03282877 2010-10-03 23:05:01 2011-01-06 22:55:00

Elapsed: 00:00:00.85
23:01:33 SQL> 
23:01:33 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
23:01:33 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.25
23:01:33 SQL> CREATE TABLE svm6122 COMPRESS AS
23:01:33   2  SELECT
23:01:33   3  pair
23:01:33   4  ,ydate
23:01:33   5  ,prdate
23:01:33   6  ,clse
23:01:33   7  -- g6 is important. I want to predict g6:
23:01:33   8  ,ld6 - clse g6
23:01:33   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
23:01:33  10  -- I want more attributes from the ones I derived above:
23:01:33  11  -- clse relation to moving-min
23:01:33  12  ,clse-min4  cm4
23:01:33  13  ,clse-min6  cm6
23:01:33  14  ,clse-min8  cm8
23:01:33  15  ,clse-min10 cm10
23:01:33  16  ,clse-min12 cm12
23:01:33  17  ,clse-min14 cm14
23:01:33  18  ,clse-min16 cm16
23:01:33  19  ,clse-min18 cm18
23:01:33  20  -- clse relation to moving-avg
23:01:33  21  ,clse-avg4  ca4
23:01:33  22  ,clse-avg6  ca6
23:01:33  23  ,clse-avg8  ca8
23:01:33  24  ,clse-avg10 ca10
23:01:33  25  ,clse-avg12 ca12
23:01:33  26  ,clse-avg14 ca14
23:01:33  27  ,clse-avg16 ca16
23:01:33  28  ,clse-avg18 ca18
23:01:33  29  -- clse relation to moving-max
23:01:33  30  ,clse-max4  cx4
23:01:33  31  ,clse-max6  cx6
23:01:33  32  ,clse-max8  cx8
23:01:33  33  ,clse-max10 cx10
23:01:33  34  ,clse-max12 cx12
23:01:33  35  ,clse-max14 cx14
23:01:33  36  ,clse-max16 cx16
23:01:33  37  ,clse-max18 cx18
23:01:33  38  -- Derive more attributes.
23:01:33  39  -- I want to use CORR() here to help SVM see the shape of the series.
23:01:33  40  -- But COVAR_POP is more stable:
23:01:33  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
23:01:33  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
23:01:33  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
23:01:33  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
23:01:33  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
23:01:33  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
23:01:33  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
23:01:33  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
23:01:33  49  -- Derive date related attributes:
23:01:33  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
23:01:33  51  ,0+TO_CHAR(ydate,'D')d
23:01:33  52  ,0+TO_CHAR(ydate,'W')w
23:01:33  53  -- mpm stands for minutes-past-midnight:
23:01:33  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
23:01:33  55  -- mph stands for minutes-past-hour:
23:01:33  56  ,0+TO_CHAR(ydate,'MI')mph
23:01:33  57  FROM svm6102
23:01:33  58  ORDER BY ydate
23:01:33  59  /

Table created.

Elapsed: 00:00:02.20
23:01:35 SQL> 
23:01:35 SQL> -- rpt
23:01:35 SQL> 
23:01:35 SQL> SELECT
23:01:35   2  pair
23:01:35   3  ,COUNT(pair)
23:01:35   4  ,MIN(clse),MAX(clse)
23:01:35   5  ,MIN(ydate),MAX(ydate)
23:01:35   6  FROM svm6122
23:01:35   7  GROUP BY pair
23:01:35   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_cad       19808    .988925	   1.0355 2010-10-03 23:05:01 2011-01-06 22:55:00

Elapsed: 00:00:00.04
23:01:35 SQL> 
23:01:35 SQL> -- Prepare for derivation of NTILE based params:
23:01:35 SQL> 
23:01:35 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.22
23:01:36 SQL> CREATE TABLE svm6142 COMPRESS AS
23:01:36   2  SELECT
23:01:36   3  pair
23:01:36   4  ,ydate
23:01:36   5  ,prdate
23:01:36   6  ,clse
23:01:36   7  ,g6
23:01:36   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
23:01:36   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
23:01:36  10  ,CASE WHEN trend IS NULL THEN 1
23:01:36  11  	    WHEN trend =0      THEN 1
23:01:36  12  	    ELSE trend END trend
23:01:36  13  ,cm4
23:01:36  14  ,cm6
23:01:36  15  ,cm8
23:01:36  16  ,cm10
23:01:36  17  ,cm12
23:01:36  18  ,cm14
23:01:36  19  ,cm16
23:01:36  20  ,cm18
23:01:36  21  --
23:01:36  22  ,ca4
23:01:36  23  ,ca6
23:01:36  24  ,ca8
23:01:36  25  ,ca10
23:01:36  26  ,ca12
23:01:36  27  ,ca14
23:01:36  28  ,ca16
23:01:36  29  ,ca18
23:01:36  30  --
23:01:36  31  ,cx4
23:01:36  32  ,cx6
23:01:36  33  ,cx8
23:01:36  34  ,cx10
23:01:36  35  ,cx12
23:01:36  36  ,cx14
23:01:36  37  ,cx16
23:01:36  38  ,cx18
23:01:36  39  --
23:01:36  40  ,crr4
23:01:36  41  ,crr6
23:01:36  42  ,crr8
23:01:36  43  ,crr10
23:01:36  44  ,crr12
23:01:36  45  ,crr14
23:01:36  46  ,crr16
23:01:36  47  ,crr18
23:01:36  48  --
23:01:36  49  ,hh
23:01:36  50  ,d
23:01:36  51  ,w
23:01:36  52  ,mpm
23:01:36  53  ,mph
23:01:36  54  FROM svm6122
23:01:36  55  ORDER BY ydate
23:01:36  56  /

Table created.

Elapsed: 00:00:00.36
23:01:36 SQL> 
23:01:36 SQL> -- rpt
23:01:36 SQL> 
23:01:36 SQL> SELECT
23:01:36   2  pair
23:01:36   3  ,trend
23:01:36   4  ,gatt
23:01:36   5  ,COUNT(pair)
23:01:36   6  ,AVG(g6)
23:01:36   7  FROM svm6142
23:01:36   8  GROUP BY pair,trend,gatt
23:01:36   9  ORDER BY pair,trend,gatt
23:01:36  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7322  -.0012413
usd_cad 	-1 up	      3186 .003051105
usd_cad 	-1		18
usd_cad 	 1 nup	      6839 -.00160964
usd_cad 	 1 up	      2389 .003645697
usd_cad 	 1		54

6 rows selected.

Elapsed: 00:00:00.03
23:01:36 SQL> 
23:01:36 SQL> 
23:01:36 SQL> -- Derive NTILE based params:
23:01:36 SQL> 
23:01:36 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.21
23:01:36 SQL> CREATE TABLE svm6162 COMPRESS AS
23:01:36   2  SELECT
23:01:36   3  pair
23:01:36   4  ,ydate
23:01:36   5  ,prdate
23:01:36   6  ,clse
23:01:36   7  ,g6
23:01:36   8  ,gatt
23:01:36   9  ,gattn
23:01:36  10  ,trend
23:01:36  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
23:01:36  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
23:01:36  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
23:01:36  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
23:01:36  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
23:01:36  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
23:01:36  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
23:01:36  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
23:01:36  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
23:01:36  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
23:01:36  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
23:01:36  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
23:01:36  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
23:01:36  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
23:01:36  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
23:01:36  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
23:01:36  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
23:01:36  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
23:01:36  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
23:01:36  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
23:01:36  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
23:01:36  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
23:01:36  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
23:01:36  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
23:01:36  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
23:01:36  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
23:01:36  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
23:01:36  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
23:01:36  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
23:01:36  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
23:01:36  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
23:01:36  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
23:01:36  43  ,hh  att32
23:01:36  44  ,d   att33
23:01:36  45  ,w   att34
23:01:36  46  ,mpm att35
23:01:36  47  ,mph att36
23:01:36  48  ,trend att37
23:01:36  49  FROM svm6142
23:01:36  50  ORDER BY ydate
23:01:36  51  /

Table created.

Elapsed: 00:00:04.88
23:01:41 SQL> 
23:01:41 SQL> -- rpt
23:01:41 SQL> 
23:01:41 SQL> SELECT
23:01:41   2  pair
23:01:41   3  ,trend
23:01:41   4  ,gatt
23:01:41   5  ,COUNT(pair)
23:01:41   6  ,AVG(g6)
23:01:41   7  FROM svm6162
23:01:41   8  GROUP BY pair,trend,gatt
23:01:41   9  ORDER BY pair,trend,gatt
23:01:41  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7322  -.0012413
usd_cad 	-1 up	      3186 .003051105
usd_cad 	-1		18
usd_cad 	 1 nup	      6839 -.00160964
usd_cad 	 1 up	      2389 .003645697
usd_cad 	 1		54

6 rows selected.

Elapsed: 00:00:00.03
23:01:41 SQL> 
23:01:41 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.16
23:01:41 SQL> CREATE TABLE modsrc COMPRESS AS
23:01:41   2  SELECT
23:01:41   3  pair
23:01:41   4  ,ydate
23:01:41   5  ,prdate
23:01:41   6  ,trend
23:01:41   7  ,g6
23:01:41   8  ,gatt
23:01:41   9  ,gattn
23:01:41  10  FROM svm6162
23:01:41  11  /

Table created.

Elapsed: 00:00:00.09
23:01:41 SQL> 
23:01:41 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
23:01:42 SQL> 
23:01:42 SQL> DROP   TABLE cad_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
23:01:42 SQL> CREATE TABLE cad_ms610 COMPRESS AS
23:01:42   2  SELECT
23:01:42   3  ydate
23:01:42   4  ,trend cad_trend
23:01:42   5  ,g6    cad_g6
23:01:42   6  ,gatt  cad_gatt
23:01:42   7  ,gattn cad_gattn
23:01:42   8  FROM modsrc
23:01:42   9  /

Table created.

Elapsed: 00:00:00.07
23:01:42 SQL> 
23:01:42 SQL> ANALYZE TABLE cad_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
23:01:42 SQL> 
23:01:42 SQL> -- I need a copy of the attributes:
23:01:42 SQL> 
23:01:42 SQL> 
23:01:42 SQL> DROP   TABLE cad_att;

Table dropped.

Elapsed: 00:00:00.05
23:01:42 SQL> CREATE TABLE cad_att COMPRESS AS
23:01:42   2  SELECT
23:01:42   3  ydate
23:01:42   4  ,att00 cad_att00
23:01:42   5  ,att01 cad_att01
23:01:42   6  ,att02 cad_att02
23:01:42   7  ,att03 cad_att03
23:01:42   8  ,att04 cad_att04
23:01:42   9  ,att05 cad_att05
23:01:42  10  ,att06 cad_att06
23:01:42  11  ,att07 cad_att07
23:01:42  12  ,att08 cad_att08
23:01:42  13  ,att09 cad_att09
23:01:42  14  ,att10 cad_att10
23:01:42  15  ,att11 cad_att11
23:01:42  16  ,att12 cad_att12
23:01:42  17  ,att13 cad_att13
23:01:42  18  ,att14 cad_att14
23:01:42  19  ,att15 cad_att15
23:01:42  20  ,att16 cad_att16
23:01:42  21  ,att17 cad_att17
23:01:42  22  ,att18 cad_att18
23:01:42  23  ,att19 cad_att19
23:01:42  24  ,att20 cad_att20
23:01:42  25  ,att21 cad_att21
23:01:42  26  ,att22 cad_att22
23:01:42  27  ,att23 cad_att23
23:01:42  28  ,att24 cad_att24
23:01:42  29  ,att25 cad_att25
23:01:42  30  ,att26 cad_att26
23:01:42  31  ,att27 cad_att27
23:01:42  32  ,att28 cad_att28
23:01:42  33  ,att29 cad_att29
23:01:42  34  ,att30 cad_att30
23:01:42  35  ,att31 cad_att31
23:01:42  36  ,att32 cad_att32
23:01:42  37  ,att33 cad_att33
23:01:42  38  ,att34 cad_att34
23:01:42  39  ,att35 cad_att35
23:01:42  40  ,att36 cad_att36
23:01:42  41  ,att37 cad_att37
23:01:42  42  FROM svm6162
23:01:42  43  /

Table created.

Elapsed: 00:00:00.18
23:01:42 SQL> 
23:01:42 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
23:01:43 SQL> 
23:01:43 SQL> -- rpt
23:01:43 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19808

Elapsed: 00:00:00.86
23:01:43 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
     19808

Elapsed: 00:00:00.00
23:01:43 SQL> 
23:01:43 SQL> --
23:01:43 SQL> -- chf610.sql
23:01:43 SQL> --
23:01:43 SQL> 
23:01:43 SQL> -- Creates views and tables for backtesting a forex SVM strategy
23:01:43 SQL> 
23:01:43 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.37
23:01:44 SQL> 
23:01:44 SQL> -- I created di5min here:
23:01:44 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
23:01:44 SQL> 
23:01:44 SQL> CREATE OR REPLACE VIEW svm6102 AS
23:01:44   2  SELECT
23:01:44   3  pair
23:01:44   4  ,ydate
23:01:44   5  ,prdate
23:01:44   6  ,rownum rnum -- acts as t in my time-series
23:01:44   7  ,clse
23:01:44   8  -- Derive a bunch of attributes from clse, the latest price:
23:01:44   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
23:01:44  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
23:01:44  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
23:01:44  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
23:01:44  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
23:01:44  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
23:01:44  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
23:01:44  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
23:01:44  17  --
23:01:44  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
23:01:44  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
23:01:44  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
23:01:44  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
23:01:44  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
23:01:44  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
23:01:44  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
23:01:44  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
23:01:44  26  --
23:01:44  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
23:01:44  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
23:01:44  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
23:01:44  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
23:01:44  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
23:01:44  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
23:01:44  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
23:01:44  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
23:01:44  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
23:01:44  36  FROM di5min WHERE pair LIKE'%chf%'
23:01:44  37  AND ydate > sysdate - 95
23:01:44  38  ORDER BY ydate
23:01:44  39  /

View created.

Elapsed: 00:00:00.04
23:01:44 SQL> 
23:01:44 SQL> -- rpt
23:01:44 SQL> 
23:01:44 SQL> SELECT
23:01:44   2  pair
23:01:44   3  ,COUNT(pair)
23:01:44   4  ,MIN(clse),MAX(clse)
23:01:44   5  ,MIN(avg6),MAX(avg6)
23:01:44   6  ,MIN(ydate),MAX(ydate)
23:01:44   7  FROM svm6102
23:01:44   8  GROUP BY pair
23:01:44   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_chf       19811    .931675	  1.00635 .933257727 1.00498151 2010-10-03 23:05:01 2011-01-06 22:55:00

Elapsed: 00:00:00.88
23:01:45 SQL> 
23:01:45 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
23:01:45 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.20
23:01:45 SQL> CREATE TABLE svm6122 COMPRESS AS
23:01:45   2  SELECT
23:01:45   3  pair
23:01:45   4  ,ydate
23:01:45   5  ,prdate
23:01:45   6  ,clse
23:01:45   7  -- g6 is important. I want to predict g6:
23:01:45   8  ,ld6 - clse g6
23:01:45   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
23:01:45  10  -- I want more attributes from the ones I derived above:
23:01:45  11  -- clse relation to moving-min
23:01:45  12  ,clse-min4  cm4
23:01:45  13  ,clse-min6  cm6
23:01:45  14  ,clse-min8  cm8
23:01:45  15  ,clse-min10 cm10
23:01:45  16  ,clse-min12 cm12
23:01:45  17  ,clse-min14 cm14
23:01:45  18  ,clse-min16 cm16
23:01:45  19  ,clse-min18 cm18
23:01:45  20  -- clse relation to moving-avg
23:01:45  21  ,clse-avg4  ca4
23:01:45  22  ,clse-avg6  ca6
23:01:45  23  ,clse-avg8  ca8
23:01:45  24  ,clse-avg10 ca10
23:01:45  25  ,clse-avg12 ca12
23:01:45  26  ,clse-avg14 ca14
23:01:45  27  ,clse-avg16 ca16
23:01:45  28  ,clse-avg18 ca18
23:01:45  29  -- clse relation to moving-max
23:01:45  30  ,clse-max4  cx4
23:01:45  31  ,clse-max6  cx6
23:01:45  32  ,clse-max8  cx8
23:01:45  33  ,clse-max10 cx10
23:01:45  34  ,clse-max12 cx12
23:01:45  35  ,clse-max14 cx14
23:01:45  36  ,clse-max16 cx16
23:01:45  37  ,clse-max18 cx18
23:01:45  38  -- Derive more attributes.
23:01:45  39  -- I want to use CORR() here to help SVM see the shape of the series.
23:01:45  40  -- But COVAR_POP is more stable:
23:01:45  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
23:01:45  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
23:01:45  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
23:01:45  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
23:01:45  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
23:01:45  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
23:01:45  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
23:01:45  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
23:01:45  49  -- Derive date related attributes:
23:01:45  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
23:01:45  51  ,0+TO_CHAR(ydate,'D')d
23:01:45  52  ,0+TO_CHAR(ydate,'W')w
23:01:45  53  -- mpm stands for minutes-past-midnight:
23:01:45  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
23:01:45  55  -- mph stands for minutes-past-hour:
23:01:45  56  ,0+TO_CHAR(ydate,'MI')mph
23:01:45  57  FROM svm6102
23:01:45  58  ORDER BY ydate
23:01:45  59  /

Table created.

Elapsed: 00:00:02.12
23:01:47 SQL> 
23:01:47 SQL> -- rpt
23:01:47 SQL> 
23:01:47 SQL> SELECT
23:01:47   2  pair
23:01:47   3  ,COUNT(pair)
23:01:47   4  ,MIN(clse),MAX(clse)
23:01:47   5  ,MIN(ydate),MAX(ydate)
23:01:47   6  FROM svm6122
23:01:47   7  GROUP BY pair
23:01:47   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_chf       19811    .931675	  1.00635 2010-10-03 23:05:01 2011-01-06 22:55:00

Elapsed: 00:00:00.03
23:01:47 SQL> 
23:01:47 SQL> -- Prepare for derivation of NTILE based params:
23:01:47 SQL> 
23:01:47 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.20
23:01:47 SQL> CREATE TABLE svm6142 COMPRESS AS
23:01:47   2  SELECT
23:01:47   3  pair
23:01:47   4  ,ydate
23:01:47   5  ,prdate
23:01:47   6  ,clse
23:01:47   7  ,g6
23:01:47   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
23:01:47   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
23:01:47  10  ,CASE WHEN trend IS NULL THEN 1
23:01:47  11  	    WHEN trend =0      THEN 1
23:01:47  12  	    ELSE trend END trend
23:01:47  13  ,cm4
23:01:47  14  ,cm6
23:01:47  15  ,cm8
23:01:47  16  ,cm10
23:01:47  17  ,cm12
23:01:47  18  ,cm14
23:01:47  19  ,cm16
23:01:47  20  ,cm18
23:01:47  21  --
23:01:47  22  ,ca4
23:01:47  23  ,ca6
23:01:47  24  ,ca8
23:01:47  25  ,ca10
23:01:47  26  ,ca12
23:01:47  27  ,ca14
23:01:47  28  ,ca16
23:01:47  29  ,ca18
23:01:47  30  --
23:01:47  31  ,cx4
23:01:47  32  ,cx6
23:01:47  33  ,cx8
23:01:47  34  ,cx10
23:01:47  35  ,cx12
23:01:47  36  ,cx14
23:01:47  37  ,cx16
23:01:47  38  ,cx18
23:01:47  39  --
23:01:47  40  ,crr4
23:01:47  41  ,crr6
23:01:47  42  ,crr8
23:01:47  43  ,crr10
23:01:47  44  ,crr12
23:01:47  45  ,crr14
23:01:47  46  ,crr16
23:01:47  47  ,crr18
23:01:47  48  --
23:01:47  49  ,hh
23:01:47  50  ,d
23:01:47  51  ,w
23:01:47  52  ,mpm
23:01:47  53  ,mph
23:01:47  54  FROM svm6122
23:01:47  55  ORDER BY ydate
23:01:47  56  /

Table created.

Elapsed: 00:00:00.37
23:01:48 SQL> 
23:01:48 SQL> -- rpt
23:01:48 SQL> 
23:01:48 SQL> SELECT
23:01:48   2  pair
23:01:48   3  ,trend
23:01:48   4  ,gatt
23:01:48   5  ,COUNT(pair)
23:01:48   6  ,AVG(g6)
23:01:48   7  FROM svm6142
23:01:48   8  GROUP BY pair,trend,gatt
23:01:48   9  ORDER BY pair,trend,gatt
23:01:48  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7123 -.00198239
usd_chf 	-1 up	      3083 .003813601
usd_chf 	-1		46
usd_chf 	 1 nup	      6583 -.00154473
usd_chf 	 1 up	      2950 .003956036
usd_chf 	 1		26

6 rows selected.

Elapsed: 00:00:00.04
23:01:48 SQL> 
23:01:48 SQL> 
23:01:48 SQL> -- Derive NTILE based params:
23:01:48 SQL> 
23:01:48 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.19
23:01:48 SQL> CREATE TABLE svm6162 COMPRESS AS
23:01:48   2  SELECT
23:01:48   3  pair
23:01:48   4  ,ydate
23:01:48   5  ,prdate
23:01:48   6  ,clse
23:01:48   7  ,g6
23:01:48   8  ,gatt
23:01:48   9  ,gattn
23:01:48  10  ,trend
23:01:48  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
23:01:48  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
23:01:48  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
23:01:48  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
23:01:48  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
23:01:48  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
23:01:48  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
23:01:48  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
23:01:48  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
23:01:48  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
23:01:48  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
23:01:48  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
23:01:48  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
23:01:48  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
23:01:48  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
23:01:48  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
23:01:48  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
23:01:48  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
23:01:48  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
23:01:48  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
23:01:48  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
23:01:48  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
23:01:48  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
23:01:48  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
23:01:48  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
23:01:48  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
23:01:48  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
23:01:48  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
23:01:48  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
23:01:48  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
23:01:48  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
23:01:48  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
23:01:48  43  ,hh  att32
23:01:48  44  ,d   att33
23:01:48  45  ,w   att34
23:01:48  46  ,mpm att35
23:01:48  47  ,mph att36
23:01:48  48  ,trend att37
23:01:48  49  FROM svm6142
23:01:48  50  ORDER BY ydate
23:01:48  51  /

Table created.

Elapsed: 00:00:04.85
23:01:53 SQL> 
23:01:53 SQL> -- rpt
23:01:53 SQL> 
23:01:53 SQL> SELECT
23:01:53   2  pair
23:01:53   3  ,trend
23:01:53   4  ,gatt
23:01:53   5  ,COUNT(pair)
23:01:53   6  ,AVG(g6)
23:01:53   7  FROM svm6162
23:01:53   8  GROUP BY pair,trend,gatt
23:01:53   9  ORDER BY pair,trend,gatt
23:01:53  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7123 -.00198239
usd_chf 	-1 up	      3083 .003813601
usd_chf 	-1		46
usd_chf 	 1 nup	      6583 -.00154473
usd_chf 	 1 up	      2950 .003956036
usd_chf 	 1		26

6 rows selected.

Elapsed: 00:00:00.02
23:01:53 SQL> 
23:01:53 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.14
23:01:53 SQL> CREATE TABLE modsrc COMPRESS AS
23:01:53   2  SELECT
23:01:53   3  pair
23:01:53   4  ,ydate
23:01:53   5  ,prdate
23:01:53   6  ,trend
23:01:53   7  ,g6
23:01:53   8  ,gatt
23:01:53   9  ,gattn
23:01:53  10  FROM svm6162
23:01:53  11  /

Table created.

Elapsed: 00:00:00.07
23:01:53 SQL> 
23:01:53 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
23:01:53 SQL> 
23:01:53 SQL> DROP   TABLE chf_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
23:01:53 SQL> CREATE TABLE chf_ms610 COMPRESS AS
23:01:53   2  SELECT
23:01:53   3  ydate
23:01:53   4  ,trend chf_trend
23:01:53   5  ,g6    chf_g6
23:01:53   6  ,gatt  chf_gatt
23:01:53   7  ,gattn chf_gattn
23:01:53   8  FROM modsrc
23:01:53   9  /

Table created.

Elapsed: 00:00:00.05
23:01:53 SQL> 
23:01:53 SQL> ANALYZE TABLE chf_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
23:01:53 SQL> 
23:01:53 SQL> -- I need a copy of the attributes:
23:01:53 SQL> 
23:01:53 SQL> 
23:01:53 SQL> DROP   TABLE chf_att;

Table dropped.

Elapsed: 00:00:00.05
23:01:53 SQL> CREATE TABLE chf_att COMPRESS AS
23:01:53   2  SELECT
23:01:53   3  ydate
23:01:53   4  ,att00 chf_att00
23:01:53   5  ,att01 chf_att01
23:01:53   6  ,att02 chf_att02
23:01:53   7  ,att03 chf_att03
23:01:53   8  ,att04 chf_att04
23:01:53   9  ,att05 chf_att05
23:01:53  10  ,att06 chf_att06
23:01:53  11  ,att07 chf_att07
23:01:53  12  ,att08 chf_att08
23:01:53  13  ,att09 chf_att09
23:01:53  14  ,att10 chf_att10
23:01:53  15  ,att11 chf_att11
23:01:53  16  ,att12 chf_att12
23:01:53  17  ,att13 chf_att13
23:01:53  18  ,att14 chf_att14
23:01:53  19  ,att15 chf_att15
23:01:53  20  ,att16 chf_att16
23:01:53  21  ,att17 chf_att17
23:01:53  22  ,att18 chf_att18
23:01:53  23  ,att19 chf_att19
23:01:53  24  ,att20 chf_att20
23:01:53  25  ,att21 chf_att21
23:01:53  26  ,att22 chf_att22
23:01:53  27  ,att23 chf_att23
23:01:53  28  ,att24 chf_att24
23:01:53  29  ,att25 chf_att25
23:01:53  30  ,att26 chf_att26
23:01:53  31  ,att27 chf_att27
23:01:53  32  ,att28 chf_att28
23:01:53  33  ,att29 chf_att29
23:01:53  34  ,att30 chf_att30
23:01:53  35  ,att31 chf_att31
23:01:53  36  ,att32 chf_att32
23:01:53  37  ,att33 chf_att33
23:01:53  38  ,att34 chf_att34
23:01:53  39  ,att35 chf_att35
23:01:53  40  ,att36 chf_att36
23:01:53  41  ,att37 chf_att37
23:01:53  42  FROM svm6162
23:01:53  43  /

Table created.

Elapsed: 00:00:00.19
23:01:54 SQL> 
23:01:54 SQL> ANALYZE TABLE chf_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
23:01:54 SQL> 
23:01:54 SQL> -- rpt
23:01:54 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19811

Elapsed: 00:00:00.86
23:01:55 SQL> SELECT COUNT(*)FROM chf_att;

  COUNT(*)
----------
     19811

Elapsed: 00:00:00.00
23:01:55 SQL> 
23:01:55 SQL> --
23:01:55 SQL> -- ech610.sql
23:01:55 SQL> --
23:01:55 SQL> 
23:01:55 SQL> -- Creates views and tables for backtesting a forex SVM strategy
23:01:55 SQL> 
23:01:55 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.37
23:01:55 SQL> 
23:01:55 SQL> -- I created di5min here:
23:01:55 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
23:01:55 SQL> 
23:01:55 SQL> CREATE OR REPLACE VIEW svm6102 AS
23:01:55   2  SELECT
23:01:55   3  pair
23:01:55   4  ,ydate
23:01:55   5  ,prdate
23:01:55   6  ,rownum rnum -- acts as t in my time-series
23:01:55   7  ,clse
23:01:55   8  -- Derive a bunch of attributes from clse, the latest price:
23:01:55   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
23:01:55  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
23:01:55  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
23:01:55  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
23:01:55  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
23:01:55  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
23:01:55  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
23:01:55  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
23:01:55  17  --
23:01:55  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
23:01:55  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
23:01:55  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
23:01:55  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
23:01:55  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
23:01:55  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
23:01:55  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
23:01:55  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
23:01:55  26  --
23:01:55  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
23:01:55  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
23:01:55  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
23:01:55  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
23:01:55  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
23:01:55  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
23:01:55  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
23:01:55  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
23:01:55  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
23:01:55  36  FROM di5min WHERE pair LIKE'%ech%'
23:01:55  37  AND ydate > sysdate - 95
23:01:55  38  ORDER BY ydate
23:01:55  39  /

View created.

Elapsed: 00:00:00.04
23:01:55 SQL> 
23:01:55 SQL> -- rpt
23:01:55 SQL> 
23:01:55 SQL> SELECT
23:01:55   2  pair
23:01:55   3  ,COUNT(pair)
23:01:55   4  ,MIN(clse),MAX(clse)
23:01:55   5  ,MIN(avg6),MAX(avg6)
23:01:55   6  ,MIN(ydate),MAX(ydate)
23:01:55   7  FROM svm6102
23:01:55   8  GROUP BY pair
23:01:55   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ech_usd       19809 1.24182424 1.38284305 1.24320711 1.37986485 2010-10-03 23:05:01 2011-01-06 22:55:00

Elapsed: 00:00:00.82
23:01:56 SQL> 
23:01:56 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
23:01:56 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.21
23:01:56 SQL> CREATE TABLE svm6122 COMPRESS AS
23:01:56   2  SELECT
23:01:56   3  pair
23:01:56   4  ,ydate
23:01:56   5  ,prdate
23:01:56   6  ,clse
23:01:56   7  -- g6 is important. I want to predict g6:
23:01:56   8  ,ld6 - clse g6
23:01:56   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
23:01:56  10  -- I want more attributes from the ones I derived above:
23:01:56  11  -- clse relation to moving-min
23:01:56  12  ,clse-min4  cm4
23:01:56  13  ,clse-min6  cm6
23:01:56  14  ,clse-min8  cm8
23:01:56  15  ,clse-min10 cm10
23:01:56  16  ,clse-min12 cm12
23:01:56  17  ,clse-min14 cm14
23:01:56  18  ,clse-min16 cm16
23:01:56  19  ,clse-min18 cm18
23:01:56  20  -- clse relation to moving-avg
23:01:56  21  ,clse-avg4  ca4
23:01:56  22  ,clse-avg6  ca6
23:01:56  23  ,clse-avg8  ca8
23:01:56  24  ,clse-avg10 ca10
23:01:56  25  ,clse-avg12 ca12
23:01:56  26  ,clse-avg14 ca14
23:01:56  27  ,clse-avg16 ca16
23:01:56  28  ,clse-avg18 ca18
23:01:56  29  -- clse relation to moving-max
23:01:56  30  ,clse-max4  cx4
23:01:56  31  ,clse-max6  cx6
23:01:56  32  ,clse-max8  cx8
23:01:56  33  ,clse-max10 cx10
23:01:56  34  ,clse-max12 cx12
23:01:56  35  ,clse-max14 cx14
23:01:56  36  ,clse-max16 cx16
23:01:56  37  ,clse-max18 cx18
23:01:56  38  -- Derive more attributes.
23:01:56  39  -- I want to use CORR() here to help SVM see the shape of the series.
23:01:56  40  -- But COVAR_POP is more stable:
23:01:56  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
23:01:56  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
23:01:56  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
23:01:56  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
23:01:56  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
23:01:56  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
23:01:56  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
23:01:56  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
23:01:56  49  -- Derive date related attributes:
23:01:56  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
23:01:56  51  ,0+TO_CHAR(ydate,'D')d
23:01:56  52  ,0+TO_CHAR(ydate,'W')w
23:01:56  53  -- mpm stands for minutes-past-midnight:
23:01:56  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
23:01:56  55  -- mph stands for minutes-past-hour:
23:01:56  56  ,0+TO_CHAR(ydate,'MI')mph
23:01:56  57  FROM svm6102
23:01:56  58  ORDER BY ydate
23:01:56  59  /

Table created.

Elapsed: 00:00:02.09
23:01:59 SQL> 
23:01:59 SQL> -- rpt
23:01:59 SQL> 
23:01:59 SQL> SELECT
23:01:59   2  pair
23:01:59   3  ,COUNT(pair)
23:01:59   4  ,MIN(clse),MAX(clse)
23:01:59   5  ,MIN(ydate),MAX(ydate)
23:01:59   6  FROM svm6122
23:01:59   7  GROUP BY pair
23:01:59   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ech_usd       19809 1.24182424 1.38284305 2010-10-03 23:05:01 2011-01-06 22:55:00

Elapsed: 00:00:00.04
23:01:59 SQL> 
23:01:59 SQL> -- Prepare for derivation of NTILE based params:
23:01:59 SQL> 
23:01:59 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.24
23:01:59 SQL> CREATE TABLE svm6142 COMPRESS AS
23:01:59   2  SELECT
23:01:59   3  pair
23:01:59   4  ,ydate
23:01:59   5  ,prdate
23:01:59   6  ,clse
23:01:59   7  ,g6
23:01:59   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
23:01:59   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
23:01:59  10  ,CASE WHEN trend IS NULL THEN 1
23:01:59  11  	    WHEN trend =0      THEN 1
23:01:59  12  	    ELSE trend END trend
23:01:59  13  ,cm4
23:01:59  14  ,cm6
23:01:59  15  ,cm8
23:01:59  16  ,cm10
23:01:59  17  ,cm12
23:01:59  18  ,cm14
23:01:59  19  ,cm16
23:01:59  20  ,cm18
23:01:59  21  --
23:01:59  22  ,ca4
23:01:59  23  ,ca6
23:01:59  24  ,ca8
23:01:59  25  ,ca10
23:01:59  26  ,ca12
23:01:59  27  ,ca14
23:01:59  28  ,ca16
23:01:59  29  ,ca18
23:01:59  30  --
23:01:59  31  ,cx4
23:01:59  32  ,cx6
23:01:59  33  ,cx8
23:01:59  34  ,cx10
23:01:59  35  ,cx12
23:01:59  36  ,cx14
23:01:59  37  ,cx16
23:01:59  38  ,cx18
23:01:59  39  --
23:01:59  40  ,crr4
23:01:59  41  ,crr6
23:01:59  42  ,crr8
23:01:59  43  ,crr10
23:01:59  44  ,crr12
23:01:59  45  ,crr14
23:01:59  46  ,crr16
23:01:59  47  ,crr18
23:01:59  48  --
23:01:59  49  ,hh
23:01:59  50  ,d
23:01:59  51  ,w
23:01:59  52  ,mpm
23:01:59  53  ,mph
23:01:59  54  FROM svm6122
23:01:59  55  ORDER BY ydate
23:01:59  56  /

Table created.

Elapsed: 00:00:00.39
23:01:59 SQL> 
23:01:59 SQL> -- rpt
23:01:59 SQL> 
23:01:59 SQL> SELECT
23:01:59   2  pair
23:01:59   3  ,trend
23:01:59   4  ,gatt
23:01:59   5  ,COUNT(pair)
23:01:59   6  ,AVG(g6)
23:01:59   7  FROM svm6142
23:01:59   8  GROUP BY pair,trend,gatt
23:01:59   9  ORDER BY pair,trend,gatt
23:01:59  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6791 -.00231118
ech_usd 	-1 up	      3583 .003573302
ech_usd 	-1		67
ech_usd 	 1 nup	      6458 -.00239703
ech_usd 	 1 up	      2905 .004122754
ech_usd 	 1		 5

6 rows selected.

Elapsed: 00:00:00.03
23:01:59 SQL> 
23:01:59 SQL> 
23:01:59 SQL> -- Derive NTILE based params:
23:01:59 SQL> 
23:01:59 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.16
23:01:59 SQL> CREATE TABLE svm6162 COMPRESS AS
23:01:59   2  SELECT
23:01:59   3  pair
23:01:59   4  ,ydate
23:01:59   5  ,prdate
23:01:59   6  ,clse
23:01:59   7  ,g6
23:01:59   8  ,gatt
23:01:59   9  ,gattn
23:01:59  10  ,trend
23:01:59  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
23:01:59  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
23:01:59  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
23:01:59  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
23:01:59  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
23:01:59  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
23:01:59  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
23:01:59  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
23:01:59  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
23:01:59  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
23:01:59  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
23:01:59  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
23:01:59  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
23:01:59  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
23:01:59  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
23:01:59  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
23:01:59  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
23:01:59  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
23:01:59  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
23:01:59  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
23:01:59  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
23:01:59  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
23:01:59  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
23:01:59  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
23:01:59  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
23:01:59  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
23:01:59  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
23:01:59  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
23:01:59  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
23:01:59  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
23:01:59  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
23:01:59  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
23:01:59  43  ,hh  att32
23:01:59  44  ,d   att33
23:01:59  45  ,w   att34
23:01:59  46  ,mpm att35
23:01:59  47  ,mph att36
23:01:59  48  ,trend att37
23:01:59  49  FROM svm6142
23:01:59  50  ORDER BY ydate
23:01:59  51  /

Table created.

Elapsed: 00:00:05.37
23:02:05 SQL> 
23:02:05 SQL> -- rpt
23:02:05 SQL> 
23:02:05 SQL> SELECT
23:02:05   2  pair
23:02:05   3  ,trend
23:02:05   4  ,gatt
23:02:05   5  ,COUNT(pair)
23:02:05   6  ,AVG(g6)
23:02:05   7  FROM svm6162
23:02:05   8  GROUP BY pair,trend,gatt
23:02:05   9  ORDER BY pair,trend,gatt
23:02:05  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6791 -.00231118
ech_usd 	-1 up	      3583 .003573302
ech_usd 	-1		67
ech_usd 	 1 nup	      6458 -.00239703
ech_usd 	 1 up	      2905 .004122754
ech_usd 	 1		 5

6 rows selected.

Elapsed: 00:00:00.03
23:02:05 SQL> 
23:02:05 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.22
23:02:05 SQL> CREATE TABLE modsrc COMPRESS AS
23:02:05   2  SELECT
23:02:05   3  pair
23:02:05   4  ,ydate
23:02:05   5  ,prdate
23:02:05   6  ,trend
23:02:05   7  ,g6
23:02:05   8  ,gatt
23:02:05   9  ,gattn
23:02:05  10  FROM svm6162
23:02:05  11  /

Table created.

Elapsed: 00:00:00.11
23:02:05 SQL> 
23:02:05 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.24
23:02:05 SQL> 
23:02:05 SQL> DROP   TABLE ech_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
23:02:05 SQL> CREATE TABLE ech_ms610 COMPRESS AS
23:02:05   2  SELECT
23:02:05   3  ydate
23:02:05   4  ,trend ech_trend
23:02:05   5  ,g6    ech_g6
23:02:05   6  ,gatt  ech_gatt
23:02:05   7  ,gattn ech_gattn
23:02:05   8  FROM modsrc
23:02:05   9  /

Table created.

Elapsed: 00:00:00.06
23:02:05 SQL> 
23:02:05 SQL> ANALYZE TABLE ech_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
23:02:06 SQL> 
23:02:06 SQL> -- I need a copy of the attributes:
23:02:06 SQL> 
23:02:06 SQL> 
23:02:06 SQL> DROP   TABLE ech_att;

Table dropped.

Elapsed: 00:00:00.04
23:02:06 SQL> CREATE TABLE ech_att COMPRESS AS
23:02:06   2  SELECT
23:02:06   3  ydate
23:02:06   4  ,att00 ech_att00
23:02:06   5  ,att01 ech_att01
23:02:06   6  ,att02 ech_att02
23:02:06   7  ,att03 ech_att03
23:02:06   8  ,att04 ech_att04
23:02:06   9  ,att05 ech_att05
23:02:06  10  ,att06 ech_att06
23:02:06  11  ,att07 ech_att07
23:02:06  12  ,att08 ech_att08
23:02:06  13  ,att09 ech_att09
23:02:06  14  ,att10 ech_att10
23:02:06  15  ,att11 ech_att11
23:02:06  16  ,att12 ech_att12
23:02:06  17  ,att13 ech_att13
23:02:06  18  ,att14 ech_att14
23:02:06  19  ,att15 ech_att15
23:02:06  20  ,att16 ech_att16
23:02:06  21  ,att17 ech_att17
23:02:06  22  ,att18 ech_att18
23:02:06  23  ,att19 ech_att19
23:02:06  24  ,att20 ech_att20
23:02:06  25  ,att21 ech_att21
23:02:06  26  ,att22 ech_att22
23:02:06  27  ,att23 ech_att23
23:02:06  28  ,att24 ech_att24
23:02:06  29  ,att25 ech_att25
23:02:06  30  ,att26 ech_att26
23:02:06  31  ,att27 ech_att27
23:02:06  32  ,att28 ech_att28
23:02:06  33  ,att29 ech_att29
23:02:06  34  ,att30 ech_att30
23:02:06  35  ,att31 ech_att31
23:02:06  36  ,att32 ech_att32
23:02:06  37  ,att33 ech_att33
23:02:06  38  ,att34 ech_att34
23:02:06  39  ,att35 ech_att35
23:02:06  40  ,att36 ech_att36
23:02:06  41  ,att37 ech_att37
23:02:06  42  FROM svm6162
23:02:06  43  /

Table created.

Elapsed: 00:00:00.15
23:02:06 SQL> 
23:02:06 SQL> ANALYZE TABLE ech_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.50
23:02:06 SQL> 
23:02:06 SQL> -- rpt
23:02:06 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19809

Elapsed: 00:00:00.79
23:02:07 SQL> SELECT COUNT(*)FROM ech_att;

  COUNT(*)
----------
     19809

Elapsed: 00:00:00.01
23:02:07 SQL> 
23:02:07 SQL> --
23:02:07 SQL> -- egb610.sql
23:02:07 SQL> --
23:02:07 SQL> 
23:02:07 SQL> -- Creates views and tables for backtesting a forex SVM strategy
23:02:07 SQL> 
23:02:07 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.46
23:02:08 SQL> 
23:02:08 SQL> -- I created di5min here:
23:02:08 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
23:02:08 SQL> 
23:02:08 SQL> CREATE OR REPLACE VIEW svm6102 AS
23:02:08   2  SELECT
23:02:08   3  pair
23:02:08   4  ,ydate
23:02:08   5  ,prdate
23:02:08   6  ,rownum rnum -- acts as t in my time-series
23:02:08   7  ,clse
23:02:08   8  -- Derive a bunch of attributes from clse, the latest price:
23:02:08   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
23:02:08  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
23:02:08  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
23:02:08  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
23:02:08  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
23:02:08  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
23:02:08  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
23:02:08  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
23:02:08  17  --
23:02:08  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
23:02:08  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
23:02:08  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
23:02:08  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
23:02:08  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
23:02:08  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
23:02:08  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
23:02:08  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
23:02:08  26  --
23:02:08  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
23:02:08  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
23:02:08  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
23:02:08  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
23:02:08  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
23:02:08  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
23:02:08  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
23:02:08  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
23:02:08  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
23:02:08  36  FROM di5min WHERE pair LIKE'%egb%'
23:02:08  37  AND ydate > sysdate - 95
23:02:08  38  ORDER BY ydate
23:02:08  39  /

View created.

Elapsed: 00:00:00.05
23:02:08 SQL> 
23:02:08 SQL> -- rpt
23:02:08 SQL> 
23:02:08 SQL> SELECT
23:02:08   2  pair
23:02:08   3  ,COUNT(pair)
23:02:08   4  ,MIN(clse),MAX(clse)
23:02:08   5  ,MIN(avg6),MAX(avg6)
23:02:08   6  ,MIN(ydate),MAX(ydate)
23:02:08   7  FROM svm6102
23:02:08   8  GROUP BY pair
23:02:08   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
egb_usd       19808 .833520557 .893920122 .834199029 .892400287 2010-10-03 23:05:01 2011-01-06 22:55:00

Elapsed: 00:00:00.95
23:02:09 SQL> 
23:02:09 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
23:02:09 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.27
23:02:09 SQL> CREATE TABLE svm6122 COMPRESS AS
23:02:09   2  SELECT
23:02:09   3  pair
23:02:09   4  ,ydate
23:02:09   5  ,prdate
23:02:09   6  ,clse
23:02:09   7  -- g6 is important. I want to predict g6:
23:02:09   8  ,ld6 - clse g6
23:02:09   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
23:02:09  10  -- I want more attributes from the ones I derived above:
23:02:09  11  -- clse relation to moving-min
23:02:09  12  ,clse-min4  cm4
23:02:09  13  ,clse-min6  cm6
23:02:09  14  ,clse-min8  cm8
23:02:09  15  ,clse-min10 cm10
23:02:09  16  ,clse-min12 cm12
23:02:09  17  ,clse-min14 cm14
23:02:09  18  ,clse-min16 cm16
23:02:09  19  ,clse-min18 cm18
23:02:09  20  -- clse relation to moving-avg
23:02:09  21  ,clse-avg4  ca4
23:02:09  22  ,clse-avg6  ca6
23:02:09  23  ,clse-avg8  ca8
23:02:09  24  ,clse-avg10 ca10
23:02:09  25  ,clse-avg12 ca12
23:02:09  26  ,clse-avg14 ca14
23:02:09  27  ,clse-avg16 ca16
23:02:09  28  ,clse-avg18 ca18
23:02:09  29  -- clse relation to moving-max
23:02:09  30  ,clse-max4  cx4
23:02:09  31  ,clse-max6  cx6
23:02:09  32  ,clse-max8  cx8
23:02:09  33  ,clse-max10 cx10
23:02:09  34  ,clse-max12 cx12
23:02:09  35  ,clse-max14 cx14
23:02:09  36  ,clse-max16 cx16
23:02:09  37  ,clse-max18 cx18
23:02:09  38  -- Derive more attributes.
23:02:09  39  -- I want to use CORR() here to help SVM see the shape of the series.
23:02:09  40  -- But COVAR_POP is more stable:
23:02:09  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
23:02:09  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
23:02:09  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
23:02:09  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
23:02:09  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
23:02:09  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
23:02:09  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
23:02:09  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
23:02:09  49  -- Derive date related attributes:
23:02:09  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
23:02:09  51  ,0+TO_CHAR(ydate,'D')d
23:02:09  52  ,0+TO_CHAR(ydate,'W')w
23:02:09  53  -- mpm stands for minutes-past-midnight:
23:02:09  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
23:02:09  55  -- mph stands for minutes-past-hour:
23:02:09  56  ,0+TO_CHAR(ydate,'MI')mph
23:02:09  57  FROM svm6102
23:02:09  58  ORDER BY ydate
23:02:09  59  /

Table created.

Elapsed: 00:00:02.52
23:02:11 SQL> 
23:02:11 SQL> -- rpt
23:02:11 SQL> 
23:02:11 SQL> SELECT
23:02:11   2  pair
23:02:11   3  ,COUNT(pair)
23:02:11   4  ,MIN(clse),MAX(clse)
23:02:11   5  ,MIN(ydate),MAX(ydate)
23:02:11   6  FROM svm6122
23:02:11   7  GROUP BY pair
23:02:11   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
egb_usd       19808 .833520557 .893920122 2010-10-03 23:05:01 2011-01-06 22:55:00

Elapsed: 00:00:00.05
23:02:11 SQL> 
23:02:11 SQL> -- Prepare for derivation of NTILE based params:
23:02:11 SQL> 
23:02:11 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.22
23:02:12 SQL> CREATE TABLE svm6142 COMPRESS AS
23:02:12   2  SELECT
23:02:12   3  pair
23:02:12   4  ,ydate
23:02:12   5  ,prdate
23:02:12   6  ,clse
23:02:12   7  ,g6
23:02:12   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
23:02:12   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
23:02:12  10  ,CASE WHEN trend IS NULL THEN 1
23:02:12  11  	    WHEN trend =0      THEN 1
23:02:12  12  	    ELSE trend END trend
23:02:12  13  ,cm4
23:02:12  14  ,cm6
23:02:12  15  ,cm8
23:02:12  16  ,cm10
23:02:12  17  ,cm12
23:02:12  18  ,cm14
23:02:12  19  ,cm16
23:02:12  20  ,cm18
23:02:12  21  --
23:02:12  22  ,ca4
23:02:12  23  ,ca6
23:02:12  24  ,ca8
23:02:12  25  ,ca10
23:02:12  26  ,ca12
23:02:12  27  ,ca14
23:02:12  28  ,ca16
23:02:12  29  ,ca18
23:02:12  30  --
23:02:12  31  ,cx4
23:02:12  32  ,cx6
23:02:12  33  ,cx8
23:02:12  34  ,cx10
23:02:12  35  ,cx12
23:02:12  36  ,cx14
23:02:12  37  ,cx16
23:02:12  38  ,cx18
23:02:12  39  --
23:02:12  40  ,crr4
23:02:12  41  ,crr6
23:02:12  42  ,crr8
23:02:12  43  ,crr10
23:02:12  44  ,crr12
23:02:12  45  ,crr14
23:02:12  46  ,crr16
23:02:12  47  ,crr18
23:02:12  48  --
23:02:12  49  ,hh
23:02:12  50  ,d
23:02:12  51  ,w
23:02:12  52  ,mpm
23:02:12  53  ,mph
23:02:12  54  FROM svm6122
23:02:12  55  ORDER BY ydate
23:02:12  56  /

Table created.

Elapsed: 00:00:00.44
23:02:12 SQL> 
23:02:12 SQL> -- rpt
23:02:12 SQL> 
23:02:12 SQL> SELECT
23:02:12   2  pair
23:02:12   3  ,trend
23:02:12   4  ,gatt
23:02:12   5  ,COUNT(pair)
23:02:12   6  ,AVG(g6)
23:02:12   7  FROM svm6142
23:02:12   8  GROUP BY pair,trend,gatt
23:02:12   9  ORDER BY pair,trend,gatt
23:02:12  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7942   -.001064
egb_usd 	-1 up	      2636 .002928295
egb_usd 	-1		68
egb_usd 	 1 nup	      6541 -.00138713
egb_usd 	 1 up	      2617   .0029282
egb_usd 	 1		 4

6 rows selected.

Elapsed: 00:00:00.04
23:02:12 SQL> 
23:02:12 SQL> 
23:02:12 SQL> -- Derive NTILE based params:
23:02:12 SQL> 
23:02:12 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.18
23:02:12 SQL> CREATE TABLE svm6162 COMPRESS AS
23:02:12   2  SELECT
23:02:12   3  pair
23:02:12   4  ,ydate
23:02:12   5  ,prdate
23:02:12   6  ,clse
23:02:12   7  ,g6
23:02:12   8  ,gatt
23:02:12   9  ,gattn
23:02:12  10  ,trend
23:02:12  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
23:02:12  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
23:02:12  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
23:02:12  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
23:02:12  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
23:02:12  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
23:02:12  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
23:02:12  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
23:02:12  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
23:02:12  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
23:02:12  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
23:02:12  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
23:02:12  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
23:02:12  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
23:02:12  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
23:02:12  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
23:02:12  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
23:02:12  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
23:02:12  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
23:02:12  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
23:02:12  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
23:02:12  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
23:02:12  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
23:02:12  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
23:02:12  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
23:02:12  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
23:02:12  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
23:02:12  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
23:02:12  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
23:02:12  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
23:02:12  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
23:02:12  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
23:02:12  43  ,hh  att32
23:02:12  44  ,d   att33
23:02:12  45  ,w   att34
23:02:12  46  ,mpm att35
23:02:12  47  ,mph att36
23:02:12  48  ,trend att37
23:02:12  49  FROM svm6142
23:02:12  50  ORDER BY ydate
23:02:12  51  /

Table created.

Elapsed: 00:00:05.67
23:02:18 SQL> 
23:02:18 SQL> -- rpt
23:02:18 SQL> 
23:02:18 SQL> SELECT
23:02:18   2  pair
23:02:18   3  ,trend
23:02:18   4  ,gatt
23:02:18   5  ,COUNT(pair)
23:02:18   6  ,AVG(g6)
23:02:18   7  FROM svm6162
23:02:18   8  GROUP BY pair,trend,gatt
23:02:18   9  ORDER BY pair,trend,gatt
23:02:18  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7942   -.001064
egb_usd 	-1 up	      2636 .002928295
egb_usd 	-1		68
egb_usd 	 1 nup	      6541 -.00138713
egb_usd 	 1 up	      2617   .0029282
egb_usd 	 1		 4

6 rows selected.

Elapsed: 00:00:00.02
23:02:18 SQL> 
23:02:18 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.21
23:02:18 SQL> CREATE TABLE modsrc COMPRESS AS
23:02:18   2  SELECT
23:02:18   3  pair
23:02:18   4  ,ydate
23:02:18   5  ,prdate
23:02:18   6  ,trend
23:02:18   7  ,g6
23:02:18   8  ,gatt
23:02:18   9  ,gattn
23:02:18  10  FROM svm6162
23:02:18  11  /

Table created.

Elapsed: 00:00:00.07
23:02:18 SQL> 
23:02:18 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.23
23:02:19 SQL> 
23:02:19 SQL> DROP   TABLE egb_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
23:02:19 SQL> CREATE TABLE egb_ms610 COMPRESS AS
23:02:19   2  SELECT
23:02:19   3  ydate
23:02:19   4  ,trend egb_trend
23:02:19   5  ,g6    egb_g6
23:02:19   6  ,gatt  egb_gatt
23:02:19   7  ,gattn egb_gattn
23:02:19   8  FROM modsrc
23:02:19   9  /

Table created.

Elapsed: 00:00:00.07
23:02:19 SQL> 
23:02:19 SQL> ANALYZE TABLE egb_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
23:02:19 SQL> 
23:02:19 SQL> -- I need a copy of the attributes:
23:02:19 SQL> 
23:02:19 SQL> 
23:02:19 SQL> DROP   TABLE egb_att;

Table dropped.

Elapsed: 00:00:00.42
23:02:19 SQL> CREATE TABLE egb_att COMPRESS AS
23:02:19   2  SELECT
23:02:19   3  ydate
23:02:19   4  ,att00 egb_att00
23:02:19   5  ,att01 egb_att01
23:02:19   6  ,att02 egb_att02
23:02:19   7  ,att03 egb_att03
23:02:19   8  ,att04 egb_att04
23:02:19   9  ,att05 egb_att05
23:02:19  10  ,att06 egb_att06
23:02:19  11  ,att07 egb_att07
23:02:19  12  ,att08 egb_att08
23:02:19  13  ,att09 egb_att09
23:02:19  14  ,att10 egb_att10
23:02:19  15  ,att11 egb_att11
23:02:19  16  ,att12 egb_att12
23:02:19  17  ,att13 egb_att13
23:02:19  18  ,att14 egb_att14
23:02:19  19  ,att15 egb_att15
23:02:19  20  ,att16 egb_att16
23:02:19  21  ,att17 egb_att17
23:02:19  22  ,att18 egb_att18
23:02:19  23  ,att19 egb_att19
23:02:19  24  ,att20 egb_att20
23:02:19  25  ,att21 egb_att21
23:02:19  26  ,att22 egb_att22
23:02:19  27  ,att23 egb_att23
23:02:19  28  ,att24 egb_att24
23:02:19  29  ,att25 egb_att25
23:02:19  30  ,att26 egb_att26
23:02:19  31  ,att27 egb_att27
23:02:19  32  ,att28 egb_att28
23:02:19  33  ,att29 egb_att29
23:02:19  34  ,att30 egb_att30
23:02:19  35  ,att31 egb_att31
23:02:19  36  ,att32 egb_att32
23:02:19  37  ,att33 egb_att33
23:02:19  38  ,att34 egb_att34
23:02:19  39  ,att35 egb_att35
23:02:19  40  ,att36 egb_att36
23:02:19  41  ,att37 egb_att37
23:02:19  42  FROM svm6162
23:02:19  43  /

Table created.

Elapsed: 00:00:00.18
23:02:19 SQL> 
23:02:19 SQL> ANALYZE TABLE egb_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
23:02:20 SQL> 
23:02:20 SQL> -- rpt
23:02:20 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19808

Elapsed: 00:00:00.93
23:02:21 SQL> SELECT COUNT(*)FROM egb_att;

  COUNT(*)
----------
     19808

Elapsed: 00:00:00.00
23:02:21 SQL> 
23:02:21 SQL> --
23:02:21 SQL> -- ejp610.sql
23:02:21 SQL> --
23:02:21 SQL> 
23:02:21 SQL> -- Creates views and tables for backtesting a forex SVM strategy
23:02:21 SQL> 
23:02:21 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.55
23:02:21 SQL> 
23:02:21 SQL> -- I created di5min here:
23:02:21 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
23:02:21 SQL> 
23:02:21 SQL> CREATE OR REPLACE VIEW svm6102 AS
23:02:21   2  SELECT
23:02:21   3  pair
23:02:21   4  ,ydate
23:02:21   5  ,prdate
23:02:21   6  ,rownum rnum -- acts as t in my time-series
23:02:21   7  ,clse
23:02:21   8  -- Derive a bunch of attributes from clse, the latest price:
23:02:21   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
23:02:21  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
23:02:21  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
23:02:21  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
23:02:21  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
23:02:21  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
23:02:21  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
23:02:21  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
23:02:21  17  --
23:02:21  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
23:02:21  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
23:02:21  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
23:02:21  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
23:02:21  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
23:02:21  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
23:02:21  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
23:02:21  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
23:02:21  26  --
23:02:21  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
23:02:21  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
23:02:21  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
23:02:21  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
23:02:21  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
23:02:21  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
23:02:21  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
23:02:21  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
23:02:21  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
23:02:21  36  FROM di5min WHERE pair LIKE'%ejp%'
23:02:21  37  AND ydate > sysdate - 95
23:02:21  38  ORDER BY ydate
23:02:21  39  /

View created.

Elapsed: 00:00:00.04
23:02:21 SQL> 
23:02:21 SQL> -- rpt
23:02:21 SQL> 
23:02:21 SQL> SELECT
23:02:21   2  pair
23:02:21   3  ,COUNT(pair)
23:02:21   4  ,MIN(clse),MAX(clse)
23:02:21   5  ,MIN(avg6),MAX(avg6)
23:02:21   6  ,MIN(ydate),MAX(ydate)
23:02:21   7  FROM svm6102
23:02:21   8  GROUP BY pair
23:02:21   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ejp_usd       19806 107.643765	115.63485 107.776148 115.509678 2010-10-03 23:05:01 2011-01-06 22:55:00

Elapsed: 00:00:00.85
23:02:22 SQL> 
23:02:22 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
23:02:22 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.30
23:02:23 SQL> CREATE TABLE svm6122 COMPRESS AS
23:02:23   2  SELECT
23:02:23   3  pair
23:02:23   4  ,ydate
23:02:23   5  ,prdate
23:02:23   6  ,clse
23:02:23   7  -- g6 is important. I want to predict g6:
23:02:23   8  ,ld6 - clse g6
23:02:23   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
23:02:23  10  -- I want more attributes from the ones I derived above:
23:02:23  11  -- clse relation to moving-min
23:02:23  12  ,clse-min4  cm4
23:02:23  13  ,clse-min6  cm6
23:02:23  14  ,clse-min8  cm8
23:02:23  15  ,clse-min10 cm10
23:02:23  16  ,clse-min12 cm12
23:02:23  17  ,clse-min14 cm14
23:02:23  18  ,clse-min16 cm16
23:02:23  19  ,clse-min18 cm18
23:02:23  20  -- clse relation to moving-avg
23:02:23  21  ,clse-avg4  ca4
23:02:23  22  ,clse-avg6  ca6
23:02:23  23  ,clse-avg8  ca8
23:02:23  24  ,clse-avg10 ca10
23:02:23  25  ,clse-avg12 ca12
23:02:23  26  ,clse-avg14 ca14
23:02:23  27  ,clse-avg16 ca16
23:02:23  28  ,clse-avg18 ca18
23:02:23  29  -- clse relation to moving-max
23:02:23  30  ,clse-max4  cx4
23:02:23  31  ,clse-max6  cx6
23:02:23  32  ,clse-max8  cx8
23:02:23  33  ,clse-max10 cx10
23:02:23  34  ,clse-max12 cx12
23:02:23  35  ,clse-max14 cx14
23:02:23  36  ,clse-max16 cx16
23:02:23  37  ,clse-max18 cx18
23:02:23  38  -- Derive more attributes.
23:02:23  39  -- I want to use CORR() here to help SVM see the shape of the series.
23:02:23  40  -- But COVAR_POP is more stable:
23:02:23  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
23:02:23  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
23:02:23  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
23:02:23  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
23:02:23  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
23:02:23  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
23:02:23  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
23:02:23  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
23:02:23  49  -- Derive date related attributes:
23:02:23  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
23:02:23  51  ,0+TO_CHAR(ydate,'D')d
23:02:23  52  ,0+TO_CHAR(ydate,'W')w
23:02:23  53  -- mpm stands for minutes-past-midnight:
23:02:23  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
23:02:23  55  -- mph stands for minutes-past-hour:
23:02:23  56  ,0+TO_CHAR(ydate,'MI')mph
23:02:23  57  FROM svm6102
23:02:23  58  ORDER BY ydate
23:02:23  59  /

Table created.

Elapsed: 00:00:02.17
23:02:25 SQL> 
23:02:25 SQL> -- rpt
23:02:25 SQL> 
23:02:25 SQL> SELECT
23:02:25   2  pair
23:02:25   3  ,COUNT(pair)
23:02:25   4  ,MIN(clse),MAX(clse)
23:02:25   5  ,MIN(ydate),MAX(ydate)
23:02:25   6  FROM svm6122
23:02:25   7  GROUP BY pair
23:02:25   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ejp_usd       19806 107.643765	115.63485 2010-10-03 23:05:01 2011-01-06 22:55:00

Elapsed: 00:00:00.04
23:02:25 SQL> 
23:02:25 SQL> -- Prepare for derivation of NTILE based params:
23:02:25 SQL> 
23:02:25 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.23
23:02:25 SQL> CREATE TABLE svm6142 COMPRESS AS
23:02:25   2  SELECT
23:02:25   3  pair
23:02:25   4  ,ydate
23:02:25   5  ,prdate
23:02:25   6  ,clse
23:02:25   7  ,g6
23:02:25   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
23:02:25   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
23:02:25  10  ,CASE WHEN trend IS NULL THEN 1
23:02:25  11  	    WHEN trend =0      THEN 1
23:02:25  12  	    ELSE trend END trend
23:02:25  13  ,cm4
23:02:25  14  ,cm6
23:02:25  15  ,cm8
23:02:25  16  ,cm10
23:02:25  17  ,cm12
23:02:25  18  ,cm14
23:02:25  19  ,cm16
23:02:25  20  ,cm18
23:02:25  21  --
23:02:25  22  ,ca4
23:02:25  23  ,ca6
23:02:25  24  ,ca8
23:02:25  25  ,ca10
23:02:25  26  ,ca12
23:02:25  27  ,ca14
23:02:25  28  ,ca16
23:02:25  29  ,ca18
23:02:25  30  --
23:02:25  31  ,cx4
23:02:25  32  ,cx6
23:02:25  33  ,cx8
23:02:25  34  ,cx10
23:02:25  35  ,cx12
23:02:25  36  ,cx14
23:02:25  37  ,cx16
23:02:25  38  ,cx18
23:02:25  39  --
23:02:25  40  ,crr4
23:02:25  41  ,crr6
23:02:25  42  ,crr8
23:02:25  43  ,crr10
23:02:25  44  ,crr12
23:02:25  45  ,crr14
23:02:25  46  ,crr16
23:02:25  47  ,crr18
23:02:25  48  --
23:02:25  49  ,hh
23:02:25  50  ,d
23:02:25  51  ,w
23:02:25  52  ,mpm
23:02:25  53  ,mph
23:02:25  54  FROM svm6122
23:02:25  55  ORDER BY ydate
23:02:25  56  /

Table created.

Elapsed: 00:00:00.37
23:02:25 SQL> 
23:02:25 SQL> -- rpt
23:02:25 SQL> 
23:02:25 SQL> SELECT
23:02:25   2  pair
23:02:25   3  ,trend
23:02:25   4  ,gatt
23:02:25   5  ,COUNT(pair)
23:02:25   6  ,AVG(g6)
23:02:25   7  FROM svm6142
23:02:25   8  GROUP BY pair,trend,gatt
23:02:25   9  ORDER BY pair,trend,gatt
23:02:25  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      5180 -.32352786
ejp_usd 	-1 up	      4922  .27756873
ejp_usd 	-1		67
ejp_usd 	 1 nup	      5012  -.2995087
ejp_usd 	 1 up	      4620 .288767593
ejp_usd 	 1		 5

6 rows selected.

Elapsed: 00:00:00.03
23:02:25 SQL> 
23:02:25 SQL> 
23:02:25 SQL> -- Derive NTILE based params:
23:02:25 SQL> 
23:02:25 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.16
23:02:26 SQL> CREATE TABLE svm6162 COMPRESS AS
23:02:26   2  SELECT
23:02:26   3  pair
23:02:26   4  ,ydate
23:02:26   5  ,prdate
23:02:26   6  ,clse
23:02:26   7  ,g6
23:02:26   8  ,gatt
23:02:26   9  ,gattn
23:02:26  10  ,trend
23:02:26  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
23:02:26  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
23:02:26  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
23:02:26  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
23:02:26  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
23:02:26  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
23:02:26  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
23:02:26  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
23:02:26  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
23:02:26  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
23:02:26  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
23:02:26  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
23:02:26  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
23:02:26  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
23:02:26  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
23:02:26  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
23:02:26  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
23:02:26  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
23:02:26  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
23:02:26  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
23:02:26  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
23:02:26  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
23:02:26  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
23:02:26  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
23:02:26  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
23:02:26  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
23:02:26  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
23:02:26  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
23:02:26  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
23:02:26  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
23:02:26  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
23:02:26  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
23:02:26  43  ,hh  att32
23:02:26  44  ,d   att33
23:02:26  45  ,w   att34
23:02:26  46  ,mpm att35
23:02:26  47  ,mph att36
23:02:26  48  ,trend att37
23:02:26  49  FROM svm6142
23:02:26  50  ORDER BY ydate
23:02:26  51  /

Table created.

Elapsed: 00:00:04.91
23:02:30 SQL> 
23:02:30 SQL> -- rpt
23:02:30 SQL> 
23:02:30 SQL> SELECT
23:02:30   2  pair
23:02:30   3  ,trend
23:02:30   4  ,gatt
23:02:30   5  ,COUNT(pair)
23:02:30   6  ,AVG(g6)
23:02:30   7  FROM svm6162
23:02:30   8  GROUP BY pair,trend,gatt
23:02:30   9  ORDER BY pair,trend,gatt
23:02:30  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      5180 -.32352786
ejp_usd 	-1 up	      4922  .27756873
ejp_usd 	-1		67
ejp_usd 	 1 nup	      5012  -.2995087
ejp_usd 	 1 up	      4620 .288767593
ejp_usd 	 1		 5

6 rows selected.

Elapsed: 00:00:00.03
23:02:31 SQL> 
23:02:31 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
23:02:31 SQL> CREATE TABLE modsrc COMPRESS AS
23:02:31   2  SELECT
23:02:31   3  pair
23:02:31   4  ,ydate
23:02:31   5  ,prdate
23:02:31   6  ,trend
23:02:31   7  ,g6
23:02:31   8  ,gatt
23:02:31   9  ,gattn
23:02:31  10  FROM svm6162
23:02:31  11  /

Table created.

Elapsed: 00:00:00.09
23:02:31 SQL> 
23:02:31 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
23:02:31 SQL> 
23:02:31 SQL> DROP   TABLE ejp_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
23:02:31 SQL> CREATE TABLE ejp_ms610 COMPRESS AS
23:02:31   2  SELECT
23:02:31   3  ydate
23:02:31   4  ,trend ejp_trend
23:02:31   5  ,g6    ejp_g6
23:02:31   6  ,gatt  ejp_gatt
23:02:31   7  ,gattn ejp_gattn
23:02:31   8  FROM modsrc
23:02:31   9  /

Table created.

Elapsed: 00:00:00.08
23:02:31 SQL> 
23:02:31 SQL> ANALYZE TABLE ejp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
23:02:31 SQL> 
23:02:31 SQL> -- I need a copy of the attributes:
23:02:31 SQL> 
23:02:31 SQL> 
23:02:31 SQL> DROP   TABLE ejp_att;

Table dropped.

Elapsed: 00:00:00.05
23:02:31 SQL> CREATE TABLE ejp_att COMPRESS AS
23:02:31   2  SELECT
23:02:31   3  ydate
23:02:31   4  ,att00 ejp_att00
23:02:31   5  ,att01 ejp_att01
23:02:31   6  ,att02 ejp_att02
23:02:31   7  ,att03 ejp_att03
23:02:31   8  ,att04 ejp_att04
23:02:31   9  ,att05 ejp_att05
23:02:31  10  ,att06 ejp_att06
23:02:31  11  ,att07 ejp_att07
23:02:31  12  ,att08 ejp_att08
23:02:31  13  ,att09 ejp_att09
23:02:31  14  ,att10 ejp_att10
23:02:31  15  ,att11 ejp_att11
23:02:31  16  ,att12 ejp_att12
23:02:31  17  ,att13 ejp_att13
23:02:31  18  ,att14 ejp_att14
23:02:31  19  ,att15 ejp_att15
23:02:31  20  ,att16 ejp_att16
23:02:31  21  ,att17 ejp_att17
23:02:31  22  ,att18 ejp_att18
23:02:31  23  ,att19 ejp_att19
23:02:31  24  ,att20 ejp_att20
23:02:31  25  ,att21 ejp_att21
23:02:31  26  ,att22 ejp_att22
23:02:31  27  ,att23 ejp_att23
23:02:31  28  ,att24 ejp_att24
23:02:31  29  ,att25 ejp_att25
23:02:31  30  ,att26 ejp_att26
23:02:31  31  ,att27 ejp_att27
23:02:31  32  ,att28 ejp_att28
23:02:31  33  ,att29 ejp_att29
23:02:31  34  ,att30 ejp_att30
23:02:31  35  ,att31 ejp_att31
23:02:31  36  ,att32 ejp_att32
23:02:31  37  ,att33 ejp_att33
23:02:31  38  ,att34 ejp_att34
23:02:31  39  ,att35 ejp_att35
23:02:31  40  ,att36 ejp_att36
23:02:31  41  ,att37 ejp_att37
23:02:31  42  FROM svm6162
23:02:31  43  /

Table created.

Elapsed: 00:00:00.16
23:02:31 SQL> 
23:02:31 SQL> ANALYZE TABLE ejp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.43
23:02:32 SQL> 
23:02:32 SQL> -- rpt
23:02:32 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19806

Elapsed: 00:00:00.83
23:02:33 SQL> SELECT COUNT(*)FROM ejp_att;

  COUNT(*)
----------
     19806

Elapsed: 00:00:00.00
23:02:33 SQL> 
23:02:33 SQL> --
23:02:33 SQL> -- ajp610.sql
23:02:33 SQL> --
23:02:33 SQL> 
23:02:33 SQL> -- Creates views and tables for backtesting a forex SVM strategy
23:02:33 SQL> 
23:02:33 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.35
23:02:33 SQL> 
23:02:33 SQL> -- I created di5min here:
23:02:33 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
23:02:33 SQL> 
23:02:33 SQL> CREATE OR REPLACE VIEW svm6102 AS
23:02:33   2  SELECT
23:02:33   3  pair
23:02:33   4  ,ydate
23:02:33   5  ,prdate
23:02:33   6  ,rownum rnum -- acts as t in my time-series
23:02:33   7  ,clse
23:02:33   8  -- Derive a bunch of attributes from clse, the latest price:
23:02:33   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
23:02:33  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
23:02:33  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
23:02:33  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
23:02:33  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
23:02:33  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
23:02:33  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
23:02:33  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
23:02:33  17  --
23:02:33  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
23:02:33  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
23:02:33  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
23:02:33  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
23:02:33  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
23:02:33  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
23:02:33  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
23:02:33  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
23:02:33  26  --
23:02:33  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
23:02:33  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
23:02:33  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
23:02:33  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
23:02:33  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
23:02:33  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
23:02:33  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
23:02:33  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
23:02:33  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
23:02:33  36  FROM di5min WHERE pair LIKE'%ajp%'
23:02:33  37  AND ydate > sysdate - 95
23:02:33  38  ORDER BY ydate
23:02:33  39  /

View created.

Elapsed: 00:00:00.05
23:02:33 SQL> 
23:02:33 SQL> -- rpt
23:02:33 SQL> 
23:02:33 SQL> SELECT
23:02:33   2  pair
23:02:33   3  ,COUNT(pair)
23:02:33   4  ,MIN(clse),MAX(clse)
23:02:33   5  ,MIN(avg6),MAX(avg6)
23:02:33   6  ,MIN(ydate),MAX(ydate)
23:02:33   7  FROM svm6102
23:02:33   8  GROUP BY pair
23:02:33   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ajp_usd       19803  78.249976 83.6669853 78.5106193  83.546306 2010-10-03 23:05:01 2011-01-06 22:55:00

Elapsed: 00:00:00.79
23:02:34 SQL> 
23:02:34 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
23:02:34 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:01.08
23:02:35 SQL> CREATE TABLE svm6122 COMPRESS AS
23:02:35   2  SELECT
23:02:35   3  pair
23:02:35   4  ,ydate
23:02:35   5  ,prdate
23:02:35   6  ,clse
23:02:35   7  -- g6 is important. I want to predict g6:
23:02:35   8  ,ld6 - clse g6
23:02:35   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
23:02:35  10  -- I want more attributes from the ones I derived above:
23:02:35  11  -- clse relation to moving-min
23:02:35  12  ,clse-min4  cm4
23:02:35  13  ,clse-min6  cm6
23:02:35  14  ,clse-min8  cm8
23:02:35  15  ,clse-min10 cm10
23:02:35  16  ,clse-min12 cm12
23:02:35  17  ,clse-min14 cm14
23:02:35  18  ,clse-min16 cm16
23:02:35  19  ,clse-min18 cm18
23:02:35  20  -- clse relation to moving-avg
23:02:35  21  ,clse-avg4  ca4
23:02:35  22  ,clse-avg6  ca6
23:02:35  23  ,clse-avg8  ca8
23:02:35  24  ,clse-avg10 ca10
23:02:35  25  ,clse-avg12 ca12
23:02:35  26  ,clse-avg14 ca14
23:02:35  27  ,clse-avg16 ca16
23:02:35  28  ,clse-avg18 ca18
23:02:35  29  -- clse relation to moving-max
23:02:35  30  ,clse-max4  cx4
23:02:35  31  ,clse-max6  cx6
23:02:35  32  ,clse-max8  cx8
23:02:35  33  ,clse-max10 cx10
23:02:35  34  ,clse-max12 cx12
23:02:35  35  ,clse-max14 cx14
23:02:35  36  ,clse-max16 cx16
23:02:35  37  ,clse-max18 cx18
23:02:35  38  -- Derive more attributes.
23:02:35  39  -- I want to use CORR() here to help SVM see the shape of the series.
23:02:35  40  -- But COVAR_POP is more stable:
23:02:35  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
23:02:35  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
23:02:35  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
23:02:35  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
23:02:35  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
23:02:35  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
23:02:35  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
23:02:35  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
23:02:35  49  -- Derive date related attributes:
23:02:35  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
23:02:35  51  ,0+TO_CHAR(ydate,'D')d
23:02:35  52  ,0+TO_CHAR(ydate,'W')w
23:02:35  53  -- mpm stands for minutes-past-midnight:
23:02:35  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
23:02:35  55  -- mph stands for minutes-past-hour:
23:02:35  56  ,0+TO_CHAR(ydate,'MI')mph
23:02:35  57  FROM svm6102
23:02:35  58  ORDER BY ydate
23:02:35  59  /

Table created.

Elapsed: 00:00:02.12
23:02:37 SQL> 
23:02:37 SQL> -- rpt
23:02:37 SQL> 
23:02:37 SQL> SELECT
23:02:37   2  pair
23:02:37   3  ,COUNT(pair)
23:02:37   4  ,MIN(clse),MAX(clse)
23:02:37   5  ,MIN(ydate),MAX(ydate)
23:02:37   6  FROM svm6122
23:02:37   7  GROUP BY pair
23:02:37   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ajp_usd       19803  78.249976 83.6669853 2010-10-03 23:05:01 2011-01-06 22:55:00

Elapsed: 00:00:00.04
23:02:37 SQL> 
23:02:37 SQL> -- Prepare for derivation of NTILE based params:
23:02:37 SQL> 
23:02:37 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.18
23:02:37 SQL> CREATE TABLE svm6142 COMPRESS AS
23:02:37   2  SELECT
23:02:37   3  pair
23:02:37   4  ,ydate
23:02:37   5  ,prdate
23:02:37   6  ,clse
23:02:37   7  ,g6
23:02:37   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
23:02:37   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
23:02:37  10  ,CASE WHEN trend IS NULL THEN 1
23:02:37  11  	    WHEN trend =0      THEN 1
23:02:37  12  	    ELSE trend END trend
23:02:37  13  ,cm4
23:02:37  14  ,cm6
23:02:37  15  ,cm8
23:02:37  16  ,cm10
23:02:37  17  ,cm12
23:02:37  18  ,cm14
23:02:37  19  ,cm16
23:02:37  20  ,cm18
23:02:37  21  --
23:02:37  22  ,ca4
23:02:37  23  ,ca6
23:02:37  24  ,ca8
23:02:37  25  ,ca10
23:02:37  26  ,ca12
23:02:37  27  ,ca14
23:02:37  28  ,ca16
23:02:37  29  ,ca18
23:02:37  30  --
23:02:37  31  ,cx4
23:02:37  32  ,cx6
23:02:37  33  ,cx8
23:02:37  34  ,cx10
23:02:37  35  ,cx12
23:02:37  36  ,cx14
23:02:37  37  ,cx16
23:02:37  38  ,cx18
23:02:37  39  --
23:02:37  40  ,crr4
23:02:37  41  ,crr6
23:02:37  42  ,crr8
23:02:37  43  ,crr10
23:02:37  44  ,crr12
23:02:37  45  ,crr14
23:02:37  46  ,crr16
23:02:37  47  ,crr18
23:02:37  48  --
23:02:37  49  ,hh
23:02:37  50  ,d
23:02:37  51  ,w
23:02:37  52  ,mpm
23:02:37  53  ,mph
23:02:37  54  FROM svm6122
23:02:37  55  ORDER BY ydate
23:02:37  56  /

Table created.

Elapsed: 00:00:00.38
23:02:38 SQL> 
23:02:38 SQL> -- rpt
23:02:38 SQL> 
23:02:38 SQL> SELECT
23:02:38   2  pair
23:02:38   3  ,trend
23:02:38   4  ,gatt
23:02:38   5  ,COUNT(pair)
23:02:38   6  ,AVG(g6)
23:02:38   7  FROM svm6142
23:02:38   8  GROUP BY pair,trend,gatt
23:02:38   9  ORDER BY pair,trend,gatt
23:02:38  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ajp_usd 	-1 nup	      4403 -.22379913
ajp_usd 	-1 up	      5224  .22353051
ajp_usd 	-1		41
ajp_usd 	 1 nup	      5296  -.2028966
ajp_usd 	 1 up	      4808 .212789104
ajp_usd 	 1		31

6 rows selected.

Elapsed: 00:00:00.03
23:02:38 SQL> 
23:02:38 SQL> 
23:02:38 SQL> -- Derive NTILE based params:
23:02:38 SQL> 
23:02:38 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.15
23:02:38 SQL> CREATE TABLE svm6162 COMPRESS AS
23:02:38   2  SELECT
23:02:38   3  pair
23:02:38   4  ,ydate
23:02:38   5  ,prdate
23:02:38   6  ,clse
23:02:38   7  ,g6
23:02:38   8  ,gatt
23:02:38   9  ,gattn
23:02:38  10  ,trend
23:02:38  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
23:02:38  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
23:02:38  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
23:02:38  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
23:02:38  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
23:02:38  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
23:02:38  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
23:02:38  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
23:02:38  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
23:02:38  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
23:02:38  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
23:02:38  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
23:02:38  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
23:02:38  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
23:02:38  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
23:02:38  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
23:02:38  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
23:02:38  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
23:02:38  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
23:02:38  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
23:02:38  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
23:02:38  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
23:02:38  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
23:02:38  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
23:02:38  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
23:02:38  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
23:02:38  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
23:02:38  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
23:02:38  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
23:02:38  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
23:02:38  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
23:02:38  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
23:02:38  43  ,hh  att32
23:02:38  44  ,d   att33
23:02:38  45  ,w   att34
23:02:38  46  ,mpm att35
23:02:38  47  ,mph att36
23:02:38  48  ,trend att37
23:02:38  49  FROM svm6142
23:02:38  50  ORDER BY ydate
23:02:38  51  /

Table created.

Elapsed: 00:00:04.88
23:02:43 SQL> 
23:02:43 SQL> -- rpt
23:02:43 SQL> 
23:02:43 SQL> SELECT
23:02:43   2  pair
23:02:43   3  ,trend
23:02:43   4  ,gatt
23:02:43   5  ,COUNT(pair)
23:02:43   6  ,AVG(g6)
23:02:43   7  FROM svm6162
23:02:43   8  GROUP BY pair,trend,gatt
23:02:43   9  ORDER BY pair,trend,gatt
23:02:43  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ajp_usd 	-1 nup	      4403 -.22379913
ajp_usd 	-1 up	      5224  .22353051
ajp_usd 	-1		41
ajp_usd 	 1 nup	      5296  -.2028966
ajp_usd 	 1 up	      4808 .212789104
ajp_usd 	 1		31

6 rows selected.

Elapsed: 00:00:00.02
23:02:43 SQL> 
23:02:43 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.15
23:02:43 SQL> CREATE TABLE modsrc COMPRESS AS
23:02:43   2  SELECT
23:02:43   3  pair
23:02:43   4  ,ydate
23:02:43   5  ,prdate
23:02:43   6  ,trend
23:02:43   7  ,g6
23:02:43   8  ,gatt
23:02:43   9  ,gattn
23:02:43  10  FROM svm6162
23:02:43  11  /

Table created.

Elapsed: 00:00:00.09
23:02:43 SQL> 
23:02:43 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.29
23:02:43 SQL> 
23:02:43 SQL> DROP   TABLE ajp_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
23:02:43 SQL> CREATE TABLE ajp_ms610 COMPRESS AS
23:02:43   2  SELECT
23:02:43   3  ydate
23:02:43   4  ,trend ajp_trend
23:02:43   5  ,g6    ajp_g6
23:02:43   6  ,gatt  ajp_gatt
23:02:43   7  ,gattn ajp_gattn
23:02:43   8  FROM modsrc
23:02:43   9  /

Table created.

Elapsed: 00:00:00.09
23:02:43 SQL> 
23:02:43 SQL> ANALYZE TABLE ajp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
23:02:44 SQL> 
23:02:44 SQL> -- I need a copy of the attributes:
23:02:44 SQL> 
23:02:44 SQL> 
23:02:44 SQL> DROP   TABLE ajp_att;

Table dropped.

Elapsed: 00:00:00.05
23:02:44 SQL> CREATE TABLE ajp_att COMPRESS AS
23:02:44   2  SELECT
23:02:44   3  ydate
23:02:44   4  ,att00 ajp_att00
23:02:44   5  ,att01 ajp_att01
23:02:44   6  ,att02 ajp_att02
23:02:44   7  ,att03 ajp_att03
23:02:44   8  ,att04 ajp_att04
23:02:44   9  ,att05 ajp_att05
23:02:44  10  ,att06 ajp_att06
23:02:44  11  ,att07 ajp_att07
23:02:44  12  ,att08 ajp_att08
23:02:44  13  ,att09 ajp_att09
23:02:44  14  ,att10 ajp_att10
23:02:44  15  ,att11 ajp_att11
23:02:44  16  ,att12 ajp_att12
23:02:44  17  ,att13 ajp_att13
23:02:44  18  ,att14 ajp_att14
23:02:44  19  ,att15 ajp_att15
23:02:44  20  ,att16 ajp_att16
23:02:44  21  ,att17 ajp_att17
23:02:44  22  ,att18 ajp_att18
23:02:44  23  ,att19 ajp_att19
23:02:44  24  ,att20 ajp_att20
23:02:44  25  ,att21 ajp_att21
23:02:44  26  ,att22 ajp_att22
23:02:44  27  ,att23 ajp_att23
23:02:44  28  ,att24 ajp_att24
23:02:44  29  ,att25 ajp_att25
23:02:44  30  ,att26 ajp_att26
23:02:44  31  ,att27 ajp_att27
23:02:44  32  ,att28 ajp_att28
23:02:44  33  ,att29 ajp_att29
23:02:44  34  ,att30 ajp_att30
23:02:44  35  ,att31 ajp_att31
23:02:44  36  ,att32 ajp_att32
23:02:44  37  ,att33 ajp_att33
23:02:44  38  ,att34 ajp_att34
23:02:44  39  ,att35 ajp_att35
23:02:44  40  ,att36 ajp_att36
23:02:44  41  ,att37 ajp_att37
23:02:44  42  FROM svm6162
23:02:44  43  /

Table created.

Elapsed: 00:00:00.18
23:02:44 SQL> 
23:02:44 SQL> ANALYZE TABLE ajp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
23:02:44 SQL> 
23:02:44 SQL> -- rpt
23:02:44 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19803

Elapsed: 00:00:00.79
23:02:45 SQL> SELECT COUNT(*)FROM ajp_att;

  COUNT(*)
----------
     19803

Elapsed: 00:00:00.01
23:02:45 SQL> 
23:02:45 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
