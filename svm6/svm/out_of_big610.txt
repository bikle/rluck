
SQL*Plus: Release 11.2.0.1.0 Production on Thu Dec 30 14:13:49 2010

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

14:13:49 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
14:13:49 SQL> 14:13:49 SQL> --
14:13:49 SQL> -- eur610.sql
14:13:49 SQL> --
14:13:49 SQL> 
14:13:49 SQL> -- Creates views and tables for backtesting a forex SVM strategy
14:13:49 SQL> 
14:13:49 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.11
14:13:49 SQL> 
14:13:49 SQL> -- I created di5min here:
14:13:49 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
14:13:49 SQL> 
14:13:49 SQL> CREATE OR REPLACE VIEW svm6102 AS
14:13:49   2  SELECT
14:13:49   3  pair
14:13:49   4  ,ydate
14:13:49   5  ,prdate
14:13:49   6  ,rownum rnum -- acts as t in my time-series
14:13:49   7  ,clse
14:13:49   8  -- Derive a bunch of attributes from clse, the latest price:
14:13:49   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
14:13:49  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
14:13:49  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
14:13:49  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
14:13:49  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
14:13:49  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
14:13:49  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
14:13:49  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
14:13:49  17  --
14:13:49  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
14:13:49  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
14:13:49  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
14:13:49  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
14:13:49  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
14:13:49  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
14:13:49  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
14:13:49  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
14:13:49  26  --
14:13:49  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
14:13:49  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
14:13:49  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
14:13:49  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
14:13:49  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
14:13:49  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
14:13:49  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
14:13:49  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
14:13:49  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
14:13:49  36  FROM di5min WHERE pair LIKE'%eur%'
14:13:49  37  AND ydate > sysdate - 95
14:13:49  38  ORDER BY ydate
14:13:49  39  /

View created.

Elapsed: 00:00:00.07
14:13:49 SQL> 
14:13:49 SQL> -- rpt
14:13:49 SQL> 
14:13:49 SQL> SELECT
14:13:49   2  pair
14:13:49   3  ,COUNT(pair)
14:13:49   4  ,MIN(clse),MAX(clse)
14:13:49   5  ,MIN(avg6),MAX(avg6)
14:13:49   6  ,MIN(ydate),MAX(ydate)
14:13:49   7  FROM svm6102
14:13:49   8  GROUP BY pair
14:13:49   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_usd       19762    1.29735	   1.4273 1.29875103 1.42436233 2010-09-26 20:55:01 2010-12-30 14:10:00

Elapsed: 00:00:00.94
14:13:50 SQL> 
14:13:50 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
14:13:50 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.27
14:13:51 SQL> CREATE TABLE svm6122 COMPRESS AS
14:13:51   2  SELECT
14:13:51   3  pair
14:13:51   4  ,ydate
14:13:51   5  ,prdate
14:13:51   6  ,clse
14:13:51   7  -- g6 is important. I want to predict g6:
14:13:51   8  ,ld6 - clse g6
14:13:51   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
14:13:51  10  -- I want more attributes from the ones I derived above:
14:13:51  11  -- clse relation to moving-min
14:13:51  12  ,clse-min4  cm4
14:13:51  13  ,clse-min6  cm6
14:13:51  14  ,clse-min8  cm8
14:13:51  15  ,clse-min10 cm10
14:13:51  16  ,clse-min12 cm12
14:13:51  17  ,clse-min14 cm14
14:13:51  18  ,clse-min16 cm16
14:13:51  19  ,clse-min18 cm18
14:13:51  20  -- clse relation to moving-avg
14:13:51  21  ,clse-avg4  ca4
14:13:51  22  ,clse-avg6  ca6
14:13:51  23  ,clse-avg8  ca8
14:13:51  24  ,clse-avg10 ca10
14:13:51  25  ,clse-avg12 ca12
14:13:51  26  ,clse-avg14 ca14
14:13:51  27  ,clse-avg16 ca16
14:13:51  28  ,clse-avg18 ca18
14:13:51  29  -- clse relation to moving-max
14:13:51  30  ,clse-max4  cx4
14:13:51  31  ,clse-max6  cx6
14:13:51  32  ,clse-max8  cx8
14:13:51  33  ,clse-max10 cx10
14:13:51  34  ,clse-max12 cx12
14:13:51  35  ,clse-max14 cx14
14:13:51  36  ,clse-max16 cx16
14:13:51  37  ,clse-max18 cx18
14:13:51  38  -- Derive more attributes.
14:13:51  39  -- I want to use CORR() here to help SVM see the shape of the series.
14:13:51  40  -- But COVAR_POP is more stable:
14:13:51  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
14:13:51  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
14:13:51  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
14:13:51  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
14:13:51  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
14:13:51  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
14:13:51  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
14:13:51  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
14:13:51  49  -- Derive date related attributes:
14:13:51  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
14:13:51  51  ,0+TO_CHAR(ydate,'D')d
14:13:51  52  ,0+TO_CHAR(ydate,'W')w
14:13:51  53  -- mpm stands for minutes-past-midnight:
14:13:51  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
14:13:51  55  -- mph stands for minutes-past-hour:
14:13:51  56  ,0+TO_CHAR(ydate,'MI')mph
14:13:51  57  FROM svm6102
14:13:51  58  ORDER BY ydate
14:13:51  59  /

Table created.

Elapsed: 00:00:02.45
14:13:53 SQL> 
14:13:53 SQL> -- rpt
14:13:53 SQL> 
14:13:53 SQL> SELECT
14:13:53   2  pair
14:13:53   3  ,COUNT(pair)
14:13:53   4  ,MIN(clse),MAX(clse)
14:13:53   5  ,MIN(ydate),MAX(ydate)
14:13:53   6  FROM svm6122
14:13:53   7  GROUP BY pair
14:13:53   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_usd       19762    1.29735	   1.4273 2010-09-26 20:55:01 2010-12-30 14:10:00

Elapsed: 00:00:00.04
14:13:53 SQL> 
14:13:53 SQL> -- Prepare for derivation of NTILE based params:
14:13:53 SQL> 
14:13:53 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.04
14:13:53 SQL> CREATE TABLE svm6142 COMPRESS AS
14:13:53   2  SELECT
14:13:53   3  pair
14:13:53   4  ,ydate
14:13:53   5  ,prdate
14:13:53   6  ,clse
14:13:53   7  ,g6
14:13:53   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
14:13:53   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
14:13:53  10  ,CASE WHEN trend IS NULL THEN 1
14:13:53  11  	    WHEN trend =0      THEN 1
14:13:53  12  	    ELSE trend END trend
14:13:53  13  ,cm4
14:13:53  14  ,cm6
14:13:53  15  ,cm8
14:13:53  16  ,cm10
14:13:53  17  ,cm12
14:13:53  18  ,cm14
14:13:53  19  ,cm16
14:13:53  20  ,cm18
14:13:53  21  --
14:13:53  22  ,ca4
14:13:53  23  ,ca6
14:13:53  24  ,ca8
14:13:53  25  ,ca10
14:13:53  26  ,ca12
14:13:53  27  ,ca14
14:13:53  28  ,ca16
14:13:53  29  ,ca18
14:13:53  30  --
14:13:53  31  ,cx4
14:13:53  32  ,cx6
14:13:53  33  ,cx8
14:13:53  34  ,cx10
14:13:53  35  ,cx12
14:13:53  36  ,cx14
14:13:53  37  ,cx16
14:13:53  38  ,cx18
14:13:53  39  --
14:13:53  40  ,crr4
14:13:53  41  ,crr6
14:13:53  42  ,crr8
14:13:53  43  ,crr10
14:13:53  44  ,crr12
14:13:53  45  ,crr14
14:13:53  46  ,crr16
14:13:53  47  ,crr18
14:13:53  48  --
14:13:53  49  ,hh
14:13:53  50  ,d
14:13:53  51  ,w
14:13:53  52  ,mpm
14:13:53  53  ,mph
14:13:53  54  FROM svm6122
14:13:53  55  ORDER BY ydate
14:13:53  56  /

Table created.

Elapsed: 00:00:00.39
14:13:54 SQL> 
14:13:54 SQL> -- rpt
14:13:54 SQL> 
14:13:54 SQL> SELECT
14:13:54   2  pair
14:13:54   3  ,trend
14:13:54   4  ,gatt
14:13:54   5  ,COUNT(pair)
14:13:54   6  ,AVG(g6)
14:13:54   7  FROM svm6142
14:13:54   8  GROUP BY pair,trend,gatt
14:13:54   9  ORDER BY pair,trend,gatt
14:13:54  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6137 -.00307718
eur_usd 	-1 up	      3748 .004488551
eur_usd 	-1		 5
eur_usd 	 1 nup	      6028 -.00310899
eur_usd 	 1 up	      3777 .005091182
eur_usd 	 1		67

6 rows selected.

Elapsed: 00:00:00.05
14:13:54 SQL> 
14:13:54 SQL> 
14:13:54 SQL> -- Derive NTILE based params:
14:13:54 SQL> 
14:13:54 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.66
14:13:54 SQL> CREATE TABLE svm6162 COMPRESS AS
14:13:54   2  SELECT
14:13:54   3  pair
14:13:54   4  ,ydate
14:13:54   5  ,prdate
14:13:54   6  ,clse
14:13:54   7  ,g6
14:13:54   8  ,gatt
14:13:54   9  ,gattn
14:13:54  10  ,trend
14:13:54  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
14:13:54  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
14:13:54  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
14:13:54  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
14:13:54  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
14:13:54  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
14:13:54  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
14:13:54  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
14:13:54  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
14:13:54  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
14:13:54  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
14:13:54  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
14:13:54  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
14:13:54  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
14:13:54  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
14:13:54  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
14:13:54  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
14:13:54  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
14:13:54  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
14:13:54  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
14:13:54  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
14:13:54  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
14:13:54  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
14:13:54  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
14:13:54  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
14:13:54  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
14:13:54  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
14:13:54  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
14:13:54  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
14:13:54  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
14:13:54  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
14:13:54  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
14:13:54  43  ,hh  att32
14:13:54  44  ,d   att33
14:13:54  45  ,w   att34
14:13:54  46  ,mpm att35
14:13:54  47  ,mph att36
14:13:54  48  ,trend att37
14:13:54  49  FROM svm6142
14:13:54  50  ORDER BY ydate
14:13:54  51  /

Table created.

Elapsed: 00:00:04.85
14:13:59 SQL> 
14:13:59 SQL> -- rpt
14:13:59 SQL> 
14:13:59 SQL> SELECT
14:13:59   2  pair
14:13:59   3  ,trend
14:13:59   4  ,gatt
14:13:59   5  ,COUNT(pair)
14:13:59   6  ,AVG(g6)
14:13:59   7  FROM svm6162
14:13:59   8  GROUP BY pair,trend,gatt
14:13:59   9  ORDER BY pair,trend,gatt
14:13:59  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6137 -.00307718
eur_usd 	-1 up	      3748 .004488551
eur_usd 	-1		 5
eur_usd 	 1 nup	      6028 -.00310899
eur_usd 	 1 up	      3777 .005091182
eur_usd 	 1		67

6 rows selected.

Elapsed: 00:00:00.03
14:13:59 SQL> 
14:13:59 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.19
14:13:59 SQL> CREATE TABLE modsrc COMPRESS AS
14:13:59   2  SELECT
14:13:59   3  pair
14:13:59   4  ,ydate
14:13:59   5  ,prdate
14:13:59   6  ,trend
14:13:59   7  ,g6
14:13:59   8  ,gatt
14:13:59   9  ,gattn
14:13:59  10  FROM svm6162
14:13:59  11  /

Table created.

Elapsed: 00:00:00.08
14:13:59 SQL> 
14:13:59 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
14:14:00 SQL> 
14:14:00 SQL> DROP   TABLE eur_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
14:14:00 SQL> CREATE TABLE eur_ms610 COMPRESS AS
14:14:00   2  SELECT
14:14:00   3  ydate
14:14:00   4  ,trend eur_trend
14:14:00   5  ,g6    eur_g6
14:14:00   6  ,gatt  eur_gatt
14:14:00   7  ,gattn eur_gattn
14:14:00   8  FROM modsrc
14:14:00   9  /

Table created.

Elapsed: 00:00:00.07
14:14:00 SQL> 
14:14:00 SQL> ANALYZE TABLE eur_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
14:14:00 SQL> 
14:14:00 SQL> -- I need a copy of the attributes:
14:14:00 SQL> 
14:14:00 SQL> 
14:14:00 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.04
14:14:00 SQL> CREATE TABLE eur_att COMPRESS AS
14:14:00   2  SELECT
14:14:00   3  ydate
14:14:00   4  ,att00 eur_att00
14:14:00   5  ,att01 eur_att01
14:14:00   6  ,att02 eur_att02
14:14:00   7  ,att03 eur_att03
14:14:00   8  ,att04 eur_att04
14:14:00   9  ,att05 eur_att05
14:14:00  10  ,att06 eur_att06
14:14:00  11  ,att07 eur_att07
14:14:00  12  ,att08 eur_att08
14:14:00  13  ,att09 eur_att09
14:14:00  14  ,att10 eur_att10
14:14:00  15  ,att11 eur_att11
14:14:00  16  ,att12 eur_att12
14:14:00  17  ,att13 eur_att13
14:14:00  18  ,att14 eur_att14
14:14:00  19  ,att15 eur_att15
14:14:00  20  ,att16 eur_att16
14:14:00  21  ,att17 eur_att17
14:14:00  22  ,att18 eur_att18
14:14:00  23  ,att19 eur_att19
14:14:00  24  ,att20 eur_att20
14:14:00  25  ,att21 eur_att21
14:14:00  26  ,att22 eur_att22
14:14:00  27  ,att23 eur_att23
14:14:00  28  ,att24 eur_att24
14:14:00  29  ,att25 eur_att25
14:14:00  30  ,att26 eur_att26
14:14:00  31  ,att27 eur_att27
14:14:00  32  ,att28 eur_att28
14:14:00  33  ,att29 eur_att29
14:14:00  34  ,att30 eur_att30
14:14:00  35  ,att31 eur_att31
14:14:00  36  ,att32 eur_att32
14:14:00  37  ,att33 eur_att33
14:14:00  38  ,att34 eur_att34
14:14:00  39  ,att35 eur_att35
14:14:00  40  ,att36 eur_att36
14:14:00  41  ,att37 eur_att37
14:14:00  42  FROM svm6162
14:14:00  43  /

Table created.

Elapsed: 00:00:00.18
14:14:00 SQL> 
14:14:00 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.44
14:14:01 SQL> 
14:14:01 SQL> -- rpt
14:14:01 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19762

Elapsed: 00:00:00.86
14:14:01 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     19762

Elapsed: 00:00:00.00
14:14:01 SQL> 
14:14:01 SQL> --
14:14:01 SQL> -- aud610.sql
14:14:01 SQL> --
14:14:01 SQL> 
14:14:01 SQL> -- Creates views and tables for backtesting a forex SVM strategy
14:14:01 SQL> 
14:14:01 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.54
14:14:02 SQL> 
14:14:02 SQL> -- I created di5min here:
14:14:02 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
14:14:02 SQL> 
14:14:02 SQL> CREATE OR REPLACE VIEW svm6102 AS
14:14:02   2  SELECT
14:14:02   3  pair
14:14:02   4  ,ydate
14:14:02   5  ,prdate
14:14:02   6  ,rownum rnum -- acts as t in my time-series
14:14:02   7  ,clse
14:14:02   8  -- Derive a bunch of attributes from clse, the latest price:
14:14:02   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
14:14:02  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
14:14:02  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
14:14:02  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
14:14:02  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
14:14:02  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
14:14:02  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
14:14:02  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
14:14:02  17  --
14:14:02  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
14:14:02  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
14:14:02  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
14:14:02  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
14:14:02  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
14:14:02  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
14:14:02  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
14:14:02  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
14:14:02  26  --
14:14:02  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
14:14:02  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
14:14:02  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
14:14:02  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
14:14:02  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
14:14:02  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
14:14:02  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
14:14:02  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
14:14:02  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
14:14:02  36  FROM di5min WHERE pair LIKE'%aud%'
14:14:02  37  AND ydate > sysdate - 95
14:14:02  38  ORDER BY ydate
14:14:02  39  /

View created.

Elapsed: 00:00:00.04
14:14:02 SQL> 
14:14:02 SQL> -- rpt
14:14:02 SQL> 
14:14:02 SQL> SELECT
14:14:02   2  pair
14:14:02   3  ,COUNT(pair)
14:14:02   4  ,MIN(clse),MAX(clse)
14:14:02   5  ,MIN(avg6),MAX(avg6)
14:14:02   6  ,MIN(ydate),MAX(ydate)
14:14:02   7  FROM svm6102
14:14:02   8  GROUP BY pair
14:14:02   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
aud_usd       19759	.95405	1.0195625 .957141438 1.01819366 2010-09-26 20:55:01 2010-12-30 14:10:00

Elapsed: 00:00:00.88
14:14:03 SQL> 
14:14:03 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
14:14:03 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.18
14:14:03 SQL> CREATE TABLE svm6122 COMPRESS AS
14:14:03   2  SELECT
14:14:03   3  pair
14:14:03   4  ,ydate
14:14:03   5  ,prdate
14:14:03   6  ,clse
14:14:03   7  -- g6 is important. I want to predict g6:
14:14:03   8  ,ld6 - clse g6
14:14:03   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
14:14:03  10  -- I want more attributes from the ones I derived above:
14:14:03  11  -- clse relation to moving-min
14:14:03  12  ,clse-min4  cm4
14:14:03  13  ,clse-min6  cm6
14:14:03  14  ,clse-min8  cm8
14:14:03  15  ,clse-min10 cm10
14:14:03  16  ,clse-min12 cm12
14:14:03  17  ,clse-min14 cm14
14:14:03  18  ,clse-min16 cm16
14:14:03  19  ,clse-min18 cm18
14:14:03  20  -- clse relation to moving-avg
14:14:03  21  ,clse-avg4  ca4
14:14:03  22  ,clse-avg6  ca6
14:14:03  23  ,clse-avg8  ca8
14:14:03  24  ,clse-avg10 ca10
14:14:03  25  ,clse-avg12 ca12
14:14:03  26  ,clse-avg14 ca14
14:14:03  27  ,clse-avg16 ca16
14:14:03  28  ,clse-avg18 ca18
14:14:03  29  -- clse relation to moving-max
14:14:03  30  ,clse-max4  cx4
14:14:03  31  ,clse-max6  cx6
14:14:03  32  ,clse-max8  cx8
14:14:03  33  ,clse-max10 cx10
14:14:03  34  ,clse-max12 cx12
14:14:03  35  ,clse-max14 cx14
14:14:03  36  ,clse-max16 cx16
14:14:03  37  ,clse-max18 cx18
14:14:03  38  -- Derive more attributes.
14:14:03  39  -- I want to use CORR() here to help SVM see the shape of the series.
14:14:03  40  -- But COVAR_POP is more stable:
14:14:03  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
14:14:03  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
14:14:03  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
14:14:03  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
14:14:03  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
14:14:03  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
14:14:03  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
14:14:03  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
14:14:03  49  -- Derive date related attributes:
14:14:03  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
14:14:03  51  ,0+TO_CHAR(ydate,'D')d
14:14:03  52  ,0+TO_CHAR(ydate,'W')w
14:14:03  53  -- mpm stands for minutes-past-midnight:
14:14:03  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
14:14:03  55  -- mph stands for minutes-past-hour:
14:14:03  56  ,0+TO_CHAR(ydate,'MI')mph
14:14:03  57  FROM svm6102
14:14:03  58  ORDER BY ydate
14:14:03  59  /

Table created.

Elapsed: 00:00:02.09
14:14:05 SQL> 
14:14:05 SQL> -- rpt
14:14:05 SQL> 
14:14:05 SQL> SELECT
14:14:05   2  pair
14:14:05   3  ,COUNT(pair)
14:14:05   4  ,MIN(clse),MAX(clse)
14:14:05   5  ,MIN(ydate),MAX(ydate)
14:14:05   6  FROM svm6122
14:14:05   7  GROUP BY pair
14:14:05   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
aud_usd       19759	.95405	1.0195625 2010-09-26 20:55:01 2010-12-30 14:10:00

Elapsed: 00:00:00.04
14:14:05 SQL> 
14:14:05 SQL> -- Prepare for derivation of NTILE based params:
14:14:05 SQL> 
14:14:05 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.31
14:14:05 SQL> CREATE TABLE svm6142 COMPRESS AS
14:14:05   2  SELECT
14:14:05   3  pair
14:14:05   4  ,ydate
14:14:05   5  ,prdate
14:14:05   6  ,clse
14:14:05   7  ,g6
14:14:05   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
14:14:05   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
14:14:05  10  ,CASE WHEN trend IS NULL THEN 1
14:14:05  11  	    WHEN trend =0      THEN 1
14:14:05  12  	    ELSE trend END trend
14:14:05  13  ,cm4
14:14:05  14  ,cm6
14:14:05  15  ,cm8
14:14:05  16  ,cm10
14:14:05  17  ,cm12
14:14:05  18  ,cm14
14:14:05  19  ,cm16
14:14:05  20  ,cm18
14:14:05  21  --
14:14:05  22  ,ca4
14:14:05  23  ,ca6
14:14:05  24  ,ca8
14:14:05  25  ,ca10
14:14:05  26  ,ca12
14:14:05  27  ,ca14
14:14:05  28  ,ca16
14:14:05  29  ,ca18
14:14:05  30  --
14:14:05  31  ,cx4
14:14:05  32  ,cx6
14:14:05  33  ,cx8
14:14:05  34  ,cx10
14:14:05  35  ,cx12
14:14:05  36  ,cx14
14:14:05  37  ,cx16
14:14:05  38  ,cx18
14:14:05  39  --
14:14:05  40  ,crr4
14:14:05  41  ,crr6
14:14:05  42  ,crr8
14:14:05  43  ,crr10
14:14:05  44  ,crr12
14:14:05  45  ,crr14
14:14:05  46  ,crr16
14:14:05  47  ,crr18
14:14:05  48  --
14:14:05  49  ,hh
14:14:05  50  ,d
14:14:05  51  ,w
14:14:05  52  ,mpm
14:14:05  53  ,mph
14:14:05  54  FROM svm6122
14:14:05  55  ORDER BY ydate
14:14:05  56  /

Table created.

Elapsed: 00:00:00.36
14:14:06 SQL> 
14:14:06 SQL> -- rpt
14:14:06 SQL> 
14:14:06 SQL> SELECT
14:14:06   2  pair
14:14:06   3  ,trend
14:14:06   4  ,gatt
14:14:06   5  ,COUNT(pair)
14:14:06   6  ,AVG(g6)
14:14:06   7  FROM svm6142
14:14:06   8  GROUP BY pair,trend,gatt
14:14:06   9  ORDER BY pair,trend,gatt
14:14:06  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5266 -.00210808
aud_usd 	-1 up	      3818 .003727577
aud_usd 	-1		54
aud_usd 	 1 nup	      6812 -.00210327
aud_usd 	 1 up	      3791 .004024199
aud_usd 	 1		18

6 rows selected.

Elapsed: 00:00:00.03
14:14:06 SQL> 
14:14:06 SQL> 
14:14:06 SQL> -- Derive NTILE based params:
14:14:06 SQL> 
14:14:06 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.15
14:14:06 SQL> CREATE TABLE svm6162 COMPRESS AS
14:14:06   2  SELECT
14:14:06   3  pair
14:14:06   4  ,ydate
14:14:06   5  ,prdate
14:14:06   6  ,clse
14:14:06   7  ,g6
14:14:06   8  ,gatt
14:14:06   9  ,gattn
14:14:06  10  ,trend
14:14:06  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
14:14:06  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
14:14:06  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
14:14:06  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
14:14:06  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
14:14:06  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
14:14:06  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
14:14:06  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
14:14:06  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
14:14:06  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
14:14:06  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
14:14:06  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
14:14:06  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
14:14:06  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
14:14:06  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
14:14:06  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
14:14:06  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
14:14:06  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
14:14:06  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
14:14:06  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
14:14:06  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
14:14:06  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
14:14:06  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
14:14:06  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
14:14:06  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
14:14:06  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
14:14:06  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
14:14:06  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
14:14:06  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
14:14:06  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
14:14:06  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
14:14:06  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
14:14:06  43  ,hh  att32
14:14:06  44  ,d   att33
14:14:06  45  ,w   att34
14:14:06  46  ,mpm att35
14:14:06  47  ,mph att36
14:14:06  48  ,trend att37
14:14:06  49  FROM svm6142
14:14:06  50  ORDER BY ydate
14:14:06  51  /

Table created.

Elapsed: 00:00:04.82
14:14:11 SQL> 
14:14:11 SQL> -- rpt
14:14:11 SQL> 
14:14:11 SQL> SELECT
14:14:11   2  pair
14:14:11   3  ,trend
14:14:11   4  ,gatt
14:14:11   5  ,COUNT(pair)
14:14:11   6  ,AVG(g6)
14:14:11   7  FROM svm6162
14:14:11   8  GROUP BY pair,trend,gatt
14:14:11   9  ORDER BY pair,trend,gatt
14:14:11  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5266 -.00210808
aud_usd 	-1 up	      3818 .003727577
aud_usd 	-1		54
aud_usd 	 1 nup	      6812 -.00210327
aud_usd 	 1 up	      3791 .004024199
aud_usd 	 1		18

6 rows selected.

Elapsed: 00:00:00.02
14:14:11 SQL> 
14:14:11 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
14:14:11 SQL> CREATE TABLE modsrc COMPRESS AS
14:14:11   2  SELECT
14:14:11   3  pair
14:14:11   4  ,ydate
14:14:11   5  ,prdate
14:14:11   6  ,trend
14:14:11   7  ,g6
14:14:11   8  ,gatt
14:14:11   9  ,gattn
14:14:11  10  FROM svm6162
14:14:11  11  /

Table created.

Elapsed: 00:00:00.09
14:14:11 SQL> 
14:14:11 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.23
14:14:11 SQL> 
14:14:11 SQL> DROP   TABLE aud_ms610 ;

Table dropped.

Elapsed: 00:00:00.12
14:14:11 SQL> CREATE TABLE aud_ms610 COMPRESS AS
14:14:11   2  SELECT
14:14:11   3  ydate
14:14:11   4  ,trend aud_trend
14:14:11   5  ,g6    aud_g6
14:14:11   6  ,gatt  aud_gatt
14:14:11   7  ,gattn aud_gattn
14:14:11   8  FROM modsrc
14:14:11   9  /

Table created.

Elapsed: 00:00:00.06
14:14:11 SQL> 
14:14:11 SQL> ANALYZE TABLE aud_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
14:14:12 SQL> 
14:14:12 SQL> -- I need a copy of the attributes:
14:14:12 SQL> 
14:14:12 SQL> 
14:14:12 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.04
14:14:12 SQL> CREATE TABLE aud_att COMPRESS AS
14:14:12   2  SELECT
14:14:12   3  ydate
14:14:12   4  ,att00 aud_att00
14:14:12   5  ,att01 aud_att01
14:14:12   6  ,att02 aud_att02
14:14:12   7  ,att03 aud_att03
14:14:12   8  ,att04 aud_att04
14:14:12   9  ,att05 aud_att05
14:14:12  10  ,att06 aud_att06
14:14:12  11  ,att07 aud_att07
14:14:12  12  ,att08 aud_att08
14:14:12  13  ,att09 aud_att09
14:14:12  14  ,att10 aud_att10
14:14:12  15  ,att11 aud_att11
14:14:12  16  ,att12 aud_att12
14:14:12  17  ,att13 aud_att13
14:14:12  18  ,att14 aud_att14
14:14:12  19  ,att15 aud_att15
14:14:12  20  ,att16 aud_att16
14:14:12  21  ,att17 aud_att17
14:14:12  22  ,att18 aud_att18
14:14:12  23  ,att19 aud_att19
14:14:12  24  ,att20 aud_att20
14:14:12  25  ,att21 aud_att21
14:14:12  26  ,att22 aud_att22
14:14:12  27  ,att23 aud_att23
14:14:12  28  ,att24 aud_att24
14:14:12  29  ,att25 aud_att25
14:14:12  30  ,att26 aud_att26
14:14:12  31  ,att27 aud_att27
14:14:12  32  ,att28 aud_att28
14:14:12  33  ,att29 aud_att29
14:14:12  34  ,att30 aud_att30
14:14:12  35  ,att31 aud_att31
14:14:12  36  ,att32 aud_att32
14:14:12  37  ,att33 aud_att33
14:14:12  38  ,att34 aud_att34
14:14:12  39  ,att35 aud_att35
14:14:12  40  ,att36 aud_att36
14:14:12  41  ,att37 aud_att37
14:14:12  42  FROM svm6162
14:14:12  43  /

Table created.

Elapsed: 00:00:00.15
14:14:12 SQL> 
14:14:12 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.60
14:14:12 SQL> 
14:14:12 SQL> -- rpt
14:14:12 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19759

Elapsed: 00:00:00.88
14:14:13 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     19759

Elapsed: 00:00:00.00
14:14:13 SQL> 
14:14:13 SQL> --
14:14:13 SQL> -- gbp610.sql
14:14:13 SQL> --
14:14:13 SQL> 
14:14:13 SQL> -- Creates views and tables for backtesting a forex SVM strategy
14:14:13 SQL> 
14:14:13 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.35
14:14:14 SQL> 
14:14:14 SQL> -- I created di5min here:
14:14:14 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
14:14:14 SQL> 
14:14:14 SQL> CREATE OR REPLACE VIEW svm6102 AS
14:14:14   2  SELECT
14:14:14   3  pair
14:14:14   4  ,ydate
14:14:14   5  ,prdate
14:14:14   6  ,rownum rnum -- acts as t in my time-series
14:14:14   7  ,clse
14:14:14   8  -- Derive a bunch of attributes from clse, the latest price:
14:14:14   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
14:14:14  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
14:14:14  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
14:14:14  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
14:14:14  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
14:14:14  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
14:14:14  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
14:14:14  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
14:14:14  17  --
14:14:14  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
14:14:14  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
14:14:14  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
14:14:14  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
14:14:14  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
14:14:14  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
14:14:14  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
14:14:14  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
14:14:14  26  --
14:14:14  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
14:14:14  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
14:14:14  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
14:14:14  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
14:14:14  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
14:14:14  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
14:14:14  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
14:14:14  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
14:14:14  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
14:14:14  36  FROM di5min WHERE pair LIKE'%gbp%'
14:14:14  37  AND ydate > sysdate - 95
14:14:14  38  ORDER BY ydate
14:14:14  39  /

View created.

Elapsed: 00:00:00.05
14:14:14 SQL> 
14:14:14 SQL> -- rpt
14:14:14 SQL> 
14:14:14 SQL> SELECT
14:14:14   2  pair
14:14:14   3  ,COUNT(pair)
14:14:14   4  ,MIN(clse),MAX(clse)
14:14:14   5  ,MIN(avg6),MAX(avg6)
14:14:14   6  ,MIN(ydate),MAX(ydate)
14:14:14   7  FROM svm6102
14:14:14   8  GROUP BY pair
14:14:14   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
gbp_usd       19762   1.535325	   1.6295 1.53696747 1.62716986 2010-09-26 20:55:01 2010-12-30 14:10:00

Elapsed: 00:00:00.87
14:14:15 SQL> 
14:14:15 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
14:14:15 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.33
14:14:15 SQL> CREATE TABLE svm6122 COMPRESS AS
14:14:15   2  SELECT
14:14:15   3  pair
14:14:15   4  ,ydate
14:14:15   5  ,prdate
14:14:15   6  ,clse
14:14:15   7  -- g6 is important. I want to predict g6:
14:14:15   8  ,ld6 - clse g6
14:14:15   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
14:14:15  10  -- I want more attributes from the ones I derived above:
14:14:15  11  -- clse relation to moving-min
14:14:15  12  ,clse-min4  cm4
14:14:15  13  ,clse-min6  cm6
14:14:15  14  ,clse-min8  cm8
14:14:15  15  ,clse-min10 cm10
14:14:15  16  ,clse-min12 cm12
14:14:15  17  ,clse-min14 cm14
14:14:15  18  ,clse-min16 cm16
14:14:15  19  ,clse-min18 cm18
14:14:15  20  -- clse relation to moving-avg
14:14:15  21  ,clse-avg4  ca4
14:14:15  22  ,clse-avg6  ca6
14:14:15  23  ,clse-avg8  ca8
14:14:15  24  ,clse-avg10 ca10
14:14:15  25  ,clse-avg12 ca12
14:14:15  26  ,clse-avg14 ca14
14:14:15  27  ,clse-avg16 ca16
14:14:15  28  ,clse-avg18 ca18
14:14:15  29  -- clse relation to moving-max
14:14:15  30  ,clse-max4  cx4
14:14:15  31  ,clse-max6  cx6
14:14:15  32  ,clse-max8  cx8
14:14:15  33  ,clse-max10 cx10
14:14:15  34  ,clse-max12 cx12
14:14:15  35  ,clse-max14 cx14
14:14:15  36  ,clse-max16 cx16
14:14:15  37  ,clse-max18 cx18
14:14:15  38  -- Derive more attributes.
14:14:15  39  -- I want to use CORR() here to help SVM see the shape of the series.
14:14:15  40  -- But COVAR_POP is more stable:
14:14:15  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
14:14:15  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
14:14:15  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
14:14:15  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
14:14:15  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
14:14:15  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
14:14:15  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
14:14:15  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
14:14:15  49  -- Derive date related attributes:
14:14:15  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
14:14:15  51  ,0+TO_CHAR(ydate,'D')d
14:14:15  52  ,0+TO_CHAR(ydate,'W')w
14:14:15  53  -- mpm stands for minutes-past-midnight:
14:14:15  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
14:14:15  55  -- mph stands for minutes-past-hour:
14:14:15  56  ,0+TO_CHAR(ydate,'MI')mph
14:14:15  57  FROM svm6102
14:14:15  58  ORDER BY ydate
14:14:15  59  /

Table created.

Elapsed: 00:00:02.05
14:14:17 SQL> 
14:14:17 SQL> -- rpt
14:14:17 SQL> 
14:14:17 SQL> SELECT
14:14:17   2  pair
14:14:17   3  ,COUNT(pair)
14:14:17   4  ,MIN(clse),MAX(clse)
14:14:17   5  ,MIN(ydate),MAX(ydate)
14:14:17   6  FROM svm6122
14:14:17   7  GROUP BY pair
14:14:17   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
gbp_usd       19762   1.535325	   1.6295 2010-09-26 20:55:01 2010-12-30 14:10:00

Elapsed: 00:00:00.03
14:14:17 SQL> 
14:14:17 SQL> -- Prepare for derivation of NTILE based params:
14:14:17 SQL> 
14:14:17 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.24
14:14:17 SQL> CREATE TABLE svm6142 COMPRESS AS
14:14:17   2  SELECT
14:14:17   3  pair
14:14:17   4  ,ydate
14:14:17   5  ,prdate
14:14:17   6  ,clse
14:14:17   7  ,g6
14:14:17   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
14:14:17   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
14:14:17  10  ,CASE WHEN trend IS NULL THEN 1
14:14:17  11  	    WHEN trend =0      THEN 1
14:14:17  12  	    ELSE trend END trend
14:14:17  13  ,cm4
14:14:17  14  ,cm6
14:14:17  15  ,cm8
14:14:17  16  ,cm10
14:14:17  17  ,cm12
14:14:17  18  ,cm14
14:14:17  19  ,cm16
14:14:17  20  ,cm18
14:14:17  21  --
14:14:17  22  ,ca4
14:14:17  23  ,ca6
14:14:17  24  ,ca8
14:14:17  25  ,ca10
14:14:17  26  ,ca12
14:14:17  27  ,ca14
14:14:17  28  ,ca16
14:14:17  29  ,ca18
14:14:17  30  --
14:14:17  31  ,cx4
14:14:17  32  ,cx6
14:14:17  33  ,cx8
14:14:17  34  ,cx10
14:14:17  35  ,cx12
14:14:17  36  ,cx14
14:14:17  37  ,cx16
14:14:17  38  ,cx18
14:14:17  39  --
14:14:17  40  ,crr4
14:14:17  41  ,crr6
14:14:17  42  ,crr8
14:14:17  43  ,crr10
14:14:17  44  ,crr12
14:14:17  45  ,crr14
14:14:17  46  ,crr16
14:14:17  47  ,crr18
14:14:17  48  --
14:14:17  49  ,hh
14:14:17  50  ,d
14:14:17  51  ,w
14:14:17  52  ,mpm
14:14:17  53  ,mph
14:14:17  54  FROM svm6122
14:14:17  55  ORDER BY ydate
14:14:17  56  /

Table created.

Elapsed: 00:00:00.37
14:14:18 SQL> 
14:14:18 SQL> -- rpt
14:14:18 SQL> 
14:14:18 SQL> SELECT
14:14:18   2  pair
14:14:18   3  ,trend
14:14:18   4  ,gatt
14:14:18   5  ,COUNT(pair)
14:14:18   6  ,AVG(g6)
14:14:18   7  FROM svm6142
14:14:18   8  GROUP BY pair,trend,gatt
14:14:18   9  ORDER BY pair,trend,gatt
14:14:18  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6315 -.00257645
gbp_usd 	-1 up	      3579 .004286117
gbp_usd 	-1		72
gbp_usd 	 1 nup	      6312 -.00267403
gbp_usd 	 1 up	      3484 .004360516

Elapsed: 00:00:00.04
14:14:18 SQL> 
14:14:18 SQL> 
14:14:18 SQL> -- Derive NTILE based params:
14:14:18 SQL> 
14:14:18 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.58
14:14:18 SQL> CREATE TABLE svm6162 COMPRESS AS
14:14:18   2  SELECT
14:14:18   3  pair
14:14:18   4  ,ydate
14:14:18   5  ,prdate
14:14:18   6  ,clse
14:14:18   7  ,g6
14:14:18   8  ,gatt
14:14:18   9  ,gattn
14:14:18  10  ,trend
14:14:18  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
14:14:18  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
14:14:18  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
14:14:18  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
14:14:18  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
14:14:18  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
14:14:18  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
14:14:18  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
14:14:18  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
14:14:18  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
14:14:18  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
14:14:18  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
14:14:18  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
14:14:18  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
14:14:18  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
14:14:18  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
14:14:18  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
14:14:18  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
14:14:18  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
14:14:18  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
14:14:18  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
14:14:18  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
14:14:18  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
14:14:18  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
14:14:18  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
14:14:18  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
14:14:18  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
14:14:18  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
14:14:18  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
14:14:18  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
14:14:18  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
14:14:18  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
14:14:18  43  ,hh  att32
14:14:18  44  ,d   att33
14:14:18  45  ,w   att34
14:14:18  46  ,mpm att35
14:14:18  47  ,mph att36
14:14:18  48  ,trend att37
14:14:18  49  FROM svm6142
14:14:18  50  ORDER BY ydate
14:14:18  51  /

Table created.

Elapsed: 00:00:04.82
14:14:23 SQL> 
14:14:23 SQL> -- rpt
14:14:23 SQL> 
14:14:23 SQL> SELECT
14:14:23   2  pair
14:14:23   3  ,trend
14:14:23   4  ,gatt
14:14:23   5  ,COUNT(pair)
14:14:23   6  ,AVG(g6)
14:14:23   7  FROM svm6162
14:14:23   8  GROUP BY pair,trend,gatt
14:14:23   9  ORDER BY pair,trend,gatt
14:14:23  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6315 -.00257645
gbp_usd 	-1 up	      3579 .004286117
gbp_usd 	-1		72
gbp_usd 	 1 nup	      6312 -.00267403
gbp_usd 	 1 up	      3484 .004360516

Elapsed: 00:00:00.03
14:14:23 SQL> 
14:14:23 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.14
14:14:23 SQL> CREATE TABLE modsrc COMPRESS AS
14:14:23   2  SELECT
14:14:23   3  pair
14:14:23   4  ,ydate
14:14:23   5  ,prdate
14:14:23   6  ,trend
14:14:23   7  ,g6
14:14:23   8  ,gatt
14:14:23   9  ,gattn
14:14:23  10  FROM svm6162
14:14:23  11  /

Table created.

Elapsed: 00:00:00.09
14:14:23 SQL> 
14:14:23 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
14:14:23 SQL> 
14:14:23 SQL> DROP   TABLE gbp_ms610 ;

Table dropped.

Elapsed: 00:00:00.07
14:14:24 SQL> CREATE TABLE gbp_ms610 COMPRESS AS
14:14:24   2  SELECT
14:14:24   3  ydate
14:14:24   4  ,trend gbp_trend
14:14:24   5  ,g6    gbp_g6
14:14:24   6  ,gatt  gbp_gatt
14:14:24   7  ,gattn gbp_gattn
14:14:24   8  FROM modsrc
14:14:24   9  /

Table created.

Elapsed: 00:00:00.06
14:14:24 SQL> 
14:14:24 SQL> ANALYZE TABLE gbp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
14:14:24 SQL> 
14:14:24 SQL> -- I need a copy of the attributes:
14:14:24 SQL> 
14:14:24 SQL> 
14:14:24 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.04
14:14:24 SQL> CREATE TABLE gbp_att COMPRESS AS
14:14:24   2  SELECT
14:14:24   3  ydate
14:14:24   4  ,att00 gbp_att00
14:14:24   5  ,att01 gbp_att01
14:14:24   6  ,att02 gbp_att02
14:14:24   7  ,att03 gbp_att03
14:14:24   8  ,att04 gbp_att04
14:14:24   9  ,att05 gbp_att05
14:14:24  10  ,att06 gbp_att06
14:14:24  11  ,att07 gbp_att07
14:14:24  12  ,att08 gbp_att08
14:14:24  13  ,att09 gbp_att09
14:14:24  14  ,att10 gbp_att10
14:14:24  15  ,att11 gbp_att11
14:14:24  16  ,att12 gbp_att12
14:14:24  17  ,att13 gbp_att13
14:14:24  18  ,att14 gbp_att14
14:14:24  19  ,att15 gbp_att15
14:14:24  20  ,att16 gbp_att16
14:14:24  21  ,att17 gbp_att17
14:14:24  22  ,att18 gbp_att18
14:14:24  23  ,att19 gbp_att19
14:14:24  24  ,att20 gbp_att20
14:14:24  25  ,att21 gbp_att21
14:14:24  26  ,att22 gbp_att22
14:14:24  27  ,att23 gbp_att23
14:14:24  28  ,att24 gbp_att24
14:14:24  29  ,att25 gbp_att25
14:14:24  30  ,att26 gbp_att26
14:14:24  31  ,att27 gbp_att27
14:14:24  32  ,att28 gbp_att28
14:14:24  33  ,att29 gbp_att29
14:14:24  34  ,att30 gbp_att30
14:14:24  35  ,att31 gbp_att31
14:14:24  36  ,att32 gbp_att32
14:14:24  37  ,att33 gbp_att33
14:14:24  38  ,att34 gbp_att34
14:14:24  39  ,att35 gbp_att35
14:14:24  40  ,att36 gbp_att36
14:14:24  41  ,att37 gbp_att37
14:14:24  42  FROM svm6162
14:14:24  43  /

Table created.

Elapsed: 00:00:00.17
14:14:24 SQL> 
14:14:24 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.44
14:14:24 SQL> 
14:14:24 SQL> -- rpt
14:14:24 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19762

Elapsed: 00:00:00.86
14:14:25 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     19762

Elapsed: 00:00:00.00
14:14:25 SQL> 
14:14:25 SQL> --
14:14:25 SQL> -- jpy610.sql
14:14:25 SQL> --
14:14:25 SQL> 
14:14:25 SQL> -- Creates views and tables for backtesting a forex SVM strategy
14:14:25 SQL> 
14:14:25 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.39
14:14:26 SQL> 
14:14:26 SQL> -- I created di5min here:
14:14:26 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
14:14:26 SQL> 
14:14:26 SQL> CREATE OR REPLACE VIEW svm6102 AS
14:14:26   2  SELECT
14:14:26   3  pair
14:14:26   4  ,ydate
14:14:26   5  ,prdate
14:14:26   6  ,rownum rnum -- acts as t in my time-series
14:14:26   7  ,clse
14:14:26   8  -- Derive a bunch of attributes from clse, the latest price:
14:14:26   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
14:14:26  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
14:14:26  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
14:14:26  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
14:14:26  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
14:14:26  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
14:14:26  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
14:14:26  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
14:14:26  17  --
14:14:26  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
14:14:26  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
14:14:26  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
14:14:26  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
14:14:26  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
14:14:26  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
14:14:26  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
14:14:26  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
14:14:26  26  --
14:14:26  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
14:14:26  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
14:14:26  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
14:14:26  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
14:14:26  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
14:14:26  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
14:14:26  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
14:14:26  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
14:14:26  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
14:14:26  36  FROM di5min WHERE pair LIKE'%jpy%'
14:14:26  37  AND ydate > sysdate - 95
14:14:26  38  ORDER BY ydate
14:14:26  39  /

View created.

Elapsed: 00:00:00.05
14:14:26 SQL> 
14:14:26 SQL> -- rpt
14:14:26 SQL> 
14:14:26 SQL> SELECT
14:14:26   2  pair
14:14:26   3  ,COUNT(pair)
14:14:26   4  ,MIN(clse),MAX(clse)
14:14:26   5  ,MIN(avg6),MAX(avg6)
14:14:26   6  ,MIN(ydate),MAX(ydate)
14:14:26   7  FROM svm6102
14:14:26   8  GROUP BY pair
14:14:26   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_jpy       19759	 80.25	   84.485 80.3595205 84.3105479 2010-09-26 20:55:01 2010-12-30 14:10:00

Elapsed: 00:00:00.92
14:14:27 SQL> 
14:14:27 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
14:14:27 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.23
14:14:27 SQL> CREATE TABLE svm6122 COMPRESS AS
14:14:27   2  SELECT
14:14:27   3  pair
14:14:27   4  ,ydate
14:14:27   5  ,prdate
14:14:27   6  ,clse
14:14:27   7  -- g6 is important. I want to predict g6:
14:14:27   8  ,ld6 - clse g6
14:14:27   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
14:14:27  10  -- I want more attributes from the ones I derived above:
14:14:27  11  -- clse relation to moving-min
14:14:27  12  ,clse-min4  cm4
14:14:27  13  ,clse-min6  cm6
14:14:27  14  ,clse-min8  cm8
14:14:27  15  ,clse-min10 cm10
14:14:27  16  ,clse-min12 cm12
14:14:27  17  ,clse-min14 cm14
14:14:27  18  ,clse-min16 cm16
14:14:27  19  ,clse-min18 cm18
14:14:27  20  -- clse relation to moving-avg
14:14:27  21  ,clse-avg4  ca4
14:14:27  22  ,clse-avg6  ca6
14:14:27  23  ,clse-avg8  ca8
14:14:27  24  ,clse-avg10 ca10
14:14:27  25  ,clse-avg12 ca12
14:14:27  26  ,clse-avg14 ca14
14:14:27  27  ,clse-avg16 ca16
14:14:27  28  ,clse-avg18 ca18
14:14:27  29  -- clse relation to moving-max
14:14:27  30  ,clse-max4  cx4
14:14:27  31  ,clse-max6  cx6
14:14:27  32  ,clse-max8  cx8
14:14:27  33  ,clse-max10 cx10
14:14:27  34  ,clse-max12 cx12
14:14:27  35  ,clse-max14 cx14
14:14:27  36  ,clse-max16 cx16
14:14:27  37  ,clse-max18 cx18
14:14:27  38  -- Derive more attributes.
14:14:27  39  -- I want to use CORR() here to help SVM see the shape of the series.
14:14:27  40  -- But COVAR_POP is more stable:
14:14:27  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
14:14:27  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
14:14:27  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
14:14:27  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
14:14:27  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
14:14:27  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
14:14:27  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
14:14:27  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
14:14:27  49  -- Derive date related attributes:
14:14:27  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
14:14:27  51  ,0+TO_CHAR(ydate,'D')d
14:14:27  52  ,0+TO_CHAR(ydate,'W')w
14:14:27  53  -- mpm stands for minutes-past-midnight:
14:14:27  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
14:14:27  55  -- mph stands for minutes-past-hour:
14:14:27  56  ,0+TO_CHAR(ydate,'MI')mph
14:14:27  57  FROM svm6102
14:14:27  58  ORDER BY ydate
14:14:27  59  /

Table created.

Elapsed: 00:00:02.11
14:14:29 SQL> 
14:14:29 SQL> -- rpt
14:14:29 SQL> 
14:14:29 SQL> SELECT
14:14:29   2  pair
14:14:29   3  ,COUNT(pair)
14:14:29   4  ,MIN(clse),MAX(clse)
14:14:29   5  ,MIN(ydate),MAX(ydate)
14:14:29   6  FROM svm6122
14:14:29   7  GROUP BY pair
14:14:29   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_jpy       19759	 80.25	   84.485 2010-09-26 20:55:01 2010-12-30 14:10:00

Elapsed: 00:00:00.04
14:14:29 SQL> 
14:14:29 SQL> -- Prepare for derivation of NTILE based params:
14:14:29 SQL> 
14:14:29 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.24
14:14:29 SQL> CREATE TABLE svm6142 COMPRESS AS
14:14:29   2  SELECT
14:14:29   3  pair
14:14:29   4  ,ydate
14:14:29   5  ,prdate
14:14:29   6  ,clse
14:14:29   7  ,g6
14:14:29   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
14:14:29   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
14:14:29  10  ,CASE WHEN trend IS NULL THEN 1
14:14:29  11  	    WHEN trend =0      THEN 1
14:14:29  12  	    ELSE trend END trend
14:14:29  13  ,cm4
14:14:29  14  ,cm6
14:14:29  15  ,cm8
14:14:29  16  ,cm10
14:14:29  17  ,cm12
14:14:29  18  ,cm14
14:14:29  19  ,cm16
14:14:29  20  ,cm18
14:14:29  21  --
14:14:29  22  ,ca4
14:14:29  23  ,ca6
14:14:29  24  ,ca8
14:14:29  25  ,ca10
14:14:29  26  ,ca12
14:14:29  27  ,ca14
14:14:29  28  ,ca16
14:14:29  29  ,ca18
14:14:29  30  --
14:14:29  31  ,cx4
14:14:29  32  ,cx6
14:14:29  33  ,cx8
14:14:29  34  ,cx10
14:14:29  35  ,cx12
14:14:29  36  ,cx14
14:14:29  37  ,cx16
14:14:29  38  ,cx18
14:14:29  39  --
14:14:29  40  ,crr4
14:14:29  41  ,crr6
14:14:29  42  ,crr8
14:14:29  43  ,crr10
14:14:29  44  ,crr12
14:14:29  45  ,crr14
14:14:29  46  ,crr16
14:14:29  47  ,crr18
14:14:29  48  --
14:14:29  49  ,hh
14:14:29  50  ,d
14:14:29  51  ,w
14:14:29  52  ,mpm
14:14:29  53  ,mph
14:14:29  54  FROM svm6122
14:14:29  55  ORDER BY ydate
14:14:29  56  /

Table created.

Elapsed: 00:00:00.39
14:14:30 SQL> 
14:14:30 SQL> -- rpt
14:14:30 SQL> 
14:14:30 SQL> SELECT
14:14:30   2  pair
14:14:30   3  ,trend
14:14:30   4  ,gatt
14:14:30   5  ,COUNT(pair)
14:14:30   6  ,AVG(g6)
14:14:30   7  FROM svm6142
14:14:30   8  GROUP BY pair,trend,gatt
14:14:30   9  ORDER BY pair,trend,gatt
14:14:30  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5375  -.1655366
usd_jpy 	-1 up	      5025 .162195708
usd_jpy 	-1		19
usd_jpy 	 1 nup	      5186 -.15468564
usd_jpy 	 1 up	      4101 .164864439
usd_jpy 	 1		53

6 rows selected.

Elapsed: 00:00:00.07
14:14:30 SQL> 
14:14:30 SQL> 
14:14:30 SQL> -- Derive NTILE based params:
14:14:30 SQL> 
14:14:30 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.23
14:14:30 SQL> CREATE TABLE svm6162 COMPRESS AS
14:14:30   2  SELECT
14:14:30   3  pair
14:14:30   4  ,ydate
14:14:30   5  ,prdate
14:14:30   6  ,clse
14:14:30   7  ,g6
14:14:30   8  ,gatt
14:14:30   9  ,gattn
14:14:30  10  ,trend
14:14:30  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
14:14:30  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
14:14:30  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
14:14:30  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
14:14:30  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
14:14:30  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
14:14:30  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
14:14:30  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
14:14:30  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
14:14:30  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
14:14:30  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
14:14:30  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
14:14:30  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
14:14:30  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
14:14:30  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
14:14:30  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
14:14:30  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
14:14:30  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
14:14:30  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
14:14:30  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
14:14:30  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
14:14:30  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
14:14:30  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
14:14:30  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
14:14:30  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
14:14:30  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
14:14:30  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
14:14:30  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
14:14:30  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
14:14:30  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
14:14:30  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
14:14:30  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
14:14:30  43  ,hh  att32
14:14:30  44  ,d   att33
14:14:30  45  ,w   att34
14:14:30  46  ,mpm att35
14:14:30  47  ,mph att36
14:14:30  48  ,trend att37
14:14:30  49  FROM svm6142
14:14:30  50  ORDER BY ydate
14:14:30  51  /

Table created.

Elapsed: 00:00:04.77
14:14:35 SQL> 
14:14:35 SQL> -- rpt
14:14:35 SQL> 
14:14:35 SQL> SELECT
14:14:35   2  pair
14:14:35   3  ,trend
14:14:35   4  ,gatt
14:14:35   5  ,COUNT(pair)
14:14:35   6  ,AVG(g6)
14:14:35   7  FROM svm6162
14:14:35   8  GROUP BY pair,trend,gatt
14:14:35   9  ORDER BY pair,trend,gatt
14:14:35  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5375  -.1655366
usd_jpy 	-1 up	      5025 .162195708
usd_jpy 	-1		19
usd_jpy 	 1 nup	      5186 -.15468564
usd_jpy 	 1 up	      4101 .164864439
usd_jpy 	 1		53

6 rows selected.

Elapsed: 00:00:00.02
14:14:35 SQL> 
14:14:35 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.21
14:14:35 SQL> CREATE TABLE modsrc COMPRESS AS
14:14:35   2  SELECT
14:14:35   3  pair
14:14:35   4  ,ydate
14:14:35   5  ,prdate
14:14:35   6  ,trend
14:14:35   7  ,g6
14:14:35   8  ,gatt
14:14:35   9  ,gattn
14:14:35  10  FROM svm6162
14:14:35  11  /

Table created.

Elapsed: 00:00:00.09
14:14:35 SQL> 
14:14:35 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
14:14:35 SQL> 
14:14:35 SQL> DROP   TABLE jpy_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
14:14:35 SQL> CREATE TABLE jpy_ms610 COMPRESS AS
14:14:35   2  SELECT
14:14:35   3  ydate
14:14:35   4  ,trend jpy_trend
14:14:35   5  ,g6    jpy_g6
14:14:35   6  ,gatt  jpy_gatt
14:14:35   7  ,gattn jpy_gattn
14:14:35   8  FROM modsrc
14:14:35   9  /

Table created.

Elapsed: 00:00:00.07
14:14:35 SQL> 
14:14:35 SQL> ANALYZE TABLE jpy_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
14:14:36 SQL> 
14:14:36 SQL> -- I need a copy of the attributes:
14:14:36 SQL> 
14:14:36 SQL> 
14:14:36 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.04
14:14:36 SQL> CREATE TABLE jpy_att COMPRESS AS
14:14:36   2  SELECT
14:14:36   3  ydate
14:14:36   4  ,att00 jpy_att00
14:14:36   5  ,att01 jpy_att01
14:14:36   6  ,att02 jpy_att02
14:14:36   7  ,att03 jpy_att03
14:14:36   8  ,att04 jpy_att04
14:14:36   9  ,att05 jpy_att05
14:14:36  10  ,att06 jpy_att06
14:14:36  11  ,att07 jpy_att07
14:14:36  12  ,att08 jpy_att08
14:14:36  13  ,att09 jpy_att09
14:14:36  14  ,att10 jpy_att10
14:14:36  15  ,att11 jpy_att11
14:14:36  16  ,att12 jpy_att12
14:14:36  17  ,att13 jpy_att13
14:14:36  18  ,att14 jpy_att14
14:14:36  19  ,att15 jpy_att15
14:14:36  20  ,att16 jpy_att16
14:14:36  21  ,att17 jpy_att17
14:14:36  22  ,att18 jpy_att18
14:14:36  23  ,att19 jpy_att19
14:14:36  24  ,att20 jpy_att20
14:14:36  25  ,att21 jpy_att21
14:14:36  26  ,att22 jpy_att22
14:14:36  27  ,att23 jpy_att23
14:14:36  28  ,att24 jpy_att24
14:14:36  29  ,att25 jpy_att25
14:14:36  30  ,att26 jpy_att26
14:14:36  31  ,att27 jpy_att27
14:14:36  32  ,att28 jpy_att28
14:14:36  33  ,att29 jpy_att29
14:14:36  34  ,att30 jpy_att30
14:14:36  35  ,att31 jpy_att31
14:14:36  36  ,att32 jpy_att32
14:14:36  37  ,att33 jpy_att33
14:14:36  38  ,att34 jpy_att34
14:14:36  39  ,att35 jpy_att35
14:14:36  40  ,att36 jpy_att36
14:14:36  41  ,att37 jpy_att37
14:14:36  42  FROM svm6162
14:14:36  43  /

Table created.

Elapsed: 00:00:00.18
14:14:36 SQL> 
14:14:36 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.49
14:14:36 SQL> 
14:14:36 SQL> -- rpt
14:14:36 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19759

Elapsed: 00:00:00.88
14:14:37 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     19759

Elapsed: 00:00:00.01
14:14:37 SQL> 
14:14:37 SQL> --
14:14:37 SQL> -- cad610.sql
14:14:37 SQL> --
14:14:37 SQL> 
14:14:37 SQL> -- Creates views and tables for backtesting a forex SVM strategy
14:14:37 SQL> 
14:14:37 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.35
14:14:37 SQL> 
14:14:37 SQL> -- I created di5min here:
14:14:37 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
14:14:37 SQL> 
14:14:37 SQL> CREATE OR REPLACE VIEW svm6102 AS
14:14:37   2  SELECT
14:14:37   3  pair
14:14:37   4  ,ydate
14:14:37   5  ,prdate
14:14:37   6  ,rownum rnum -- acts as t in my time-series
14:14:37   7  ,clse
14:14:37   8  -- Derive a bunch of attributes from clse, the latest price:
14:14:37   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
14:14:37  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
14:14:37  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
14:14:37  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
14:14:37  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
14:14:37  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
14:14:37  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
14:14:37  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
14:14:37  17  --
14:14:37  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
14:14:37  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
14:14:37  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
14:14:37  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
14:14:37  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
14:14:37  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
14:14:37  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
14:14:37  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
14:14:37  26  --
14:14:37  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
14:14:37  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
14:14:37  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
14:14:37  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
14:14:37  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
14:14:37  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
14:14:37  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
14:14:37  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
14:14:37  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
14:14:37  36  FROM di5min WHERE pair LIKE'%cad%'
14:14:37  37  AND ydate > sysdate - 95
14:14:37  38  ORDER BY ydate
14:14:37  39  /

View created.

Elapsed: 00:00:00.03
14:14:38 SQL> 
14:14:38 SQL> -- rpt
14:14:38 SQL> 
14:14:38 SQL> SELECT
14:14:38   2  pair
14:14:38   3  ,COUNT(pair)
14:14:38   4  ,MIN(clse),MAX(clse)
14:14:38   5  ,MIN(avg6),MAX(avg6)
14:14:38   6  ,MIN(ydate),MAX(ydate)
14:14:38   7  FROM svm6102
14:14:38   8  GROUP BY pair
14:14:38   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_cad       19759	.99755	    1.036 .998845205 1.03336849 2010-09-26 20:55:01 2010-12-30 14:10:00

Elapsed: 00:00:00.85
14:14:38 SQL> 
14:14:38 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
14:14:38 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.24
14:14:39 SQL> CREATE TABLE svm6122 COMPRESS AS
14:14:39   2  SELECT
14:14:39   3  pair
14:14:39   4  ,ydate
14:14:39   5  ,prdate
14:14:39   6  ,clse
14:14:39   7  -- g6 is important. I want to predict g6:
14:14:39   8  ,ld6 - clse g6
14:14:39   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
14:14:39  10  -- I want more attributes from the ones I derived above:
14:14:39  11  -- clse relation to moving-min
14:14:39  12  ,clse-min4  cm4
14:14:39  13  ,clse-min6  cm6
14:14:39  14  ,clse-min8  cm8
14:14:39  15  ,clse-min10 cm10
14:14:39  16  ,clse-min12 cm12
14:14:39  17  ,clse-min14 cm14
14:14:39  18  ,clse-min16 cm16
14:14:39  19  ,clse-min18 cm18
14:14:39  20  -- clse relation to moving-avg
14:14:39  21  ,clse-avg4  ca4
14:14:39  22  ,clse-avg6  ca6
14:14:39  23  ,clse-avg8  ca8
14:14:39  24  ,clse-avg10 ca10
14:14:39  25  ,clse-avg12 ca12
14:14:39  26  ,clse-avg14 ca14
14:14:39  27  ,clse-avg16 ca16
14:14:39  28  ,clse-avg18 ca18
14:14:39  29  -- clse relation to moving-max
14:14:39  30  ,clse-max4  cx4
14:14:39  31  ,clse-max6  cx6
14:14:39  32  ,clse-max8  cx8
14:14:39  33  ,clse-max10 cx10
14:14:39  34  ,clse-max12 cx12
14:14:39  35  ,clse-max14 cx14
14:14:39  36  ,clse-max16 cx16
14:14:39  37  ,clse-max18 cx18
14:14:39  38  -- Derive more attributes.
14:14:39  39  -- I want to use CORR() here to help SVM see the shape of the series.
14:14:39  40  -- But COVAR_POP is more stable:
14:14:39  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
14:14:39  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
14:14:39  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
14:14:39  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
14:14:39  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
14:14:39  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
14:14:39  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
14:14:39  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
14:14:39  49  -- Derive date related attributes:
14:14:39  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
14:14:39  51  ,0+TO_CHAR(ydate,'D')d
14:14:39  52  ,0+TO_CHAR(ydate,'W')w
14:14:39  53  -- mpm stands for minutes-past-midnight:
14:14:39  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
14:14:39  55  -- mph stands for minutes-past-hour:
14:14:39  56  ,0+TO_CHAR(ydate,'MI')mph
14:14:39  57  FROM svm6102
14:14:39  58  ORDER BY ydate
14:14:39  59  /

Table created.

Elapsed: 00:00:02.06
14:14:41 SQL> 
14:14:41 SQL> -- rpt
14:14:41 SQL> 
14:14:41 SQL> SELECT
14:14:41   2  pair
14:14:41   3  ,COUNT(pair)
14:14:41   4  ,MIN(clse),MAX(clse)
14:14:41   5  ,MIN(ydate),MAX(ydate)
14:14:41   6  FROM svm6122
14:14:41   7  GROUP BY pair
14:14:41   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_cad       19759	.99755	    1.036 2010-09-26 20:55:01 2010-12-30 14:10:00

Elapsed: 00:00:00.04
14:14:41 SQL> 
14:14:41 SQL> -- Prepare for derivation of NTILE based params:
14:14:41 SQL> 
14:14:41 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.18
14:14:41 SQL> CREATE TABLE svm6142 COMPRESS AS
14:14:41   2  SELECT
14:14:41   3  pair
14:14:41   4  ,ydate
14:14:41   5  ,prdate
14:14:41   6  ,clse
14:14:41   7  ,g6
14:14:41   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
14:14:41   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
14:14:41  10  ,CASE WHEN trend IS NULL THEN 1
14:14:41  11  	    WHEN trend =0      THEN 1
14:14:41  12  	    ELSE trend END trend
14:14:41  13  ,cm4
14:14:41  14  ,cm6
14:14:41  15  ,cm8
14:14:41  16  ,cm10
14:14:41  17  ,cm12
14:14:41  18  ,cm14
14:14:41  19  ,cm16
14:14:41  20  ,cm18
14:14:41  21  --
14:14:41  22  ,ca4
14:14:41  23  ,ca6
14:14:41  24  ,ca8
14:14:41  25  ,ca10
14:14:41  26  ,ca12
14:14:41  27  ,ca14
14:14:41  28  ,ca16
14:14:41  29  ,ca18
14:14:41  30  --
14:14:41  31  ,cx4
14:14:41  32  ,cx6
14:14:41  33  ,cx8
14:14:41  34  ,cx10
14:14:41  35  ,cx12
14:14:41  36  ,cx14
14:14:41  37  ,cx16
14:14:41  38  ,cx18
14:14:41  39  --
14:14:41  40  ,crr4
14:14:41  41  ,crr6
14:14:41  42  ,crr8
14:14:41  43  ,crr10
14:14:41  44  ,crr12
14:14:41  45  ,crr14
14:14:41  46  ,crr16
14:14:41  47  ,crr18
14:14:41  48  --
14:14:41  49  ,hh
14:14:41  50  ,d
14:14:41  51  ,w
14:14:41  52  ,mpm
14:14:41  53  ,mph
14:14:41  54  FROM svm6122
14:14:41  55  ORDER BY ydate
14:14:41  56  /

Table created.

Elapsed: 00:00:00.35
14:14:41 SQL> 
14:14:41 SQL> -- rpt
14:14:41 SQL> 
14:14:41 SQL> SELECT
14:14:41   2  pair
14:14:41   3  ,trend
14:14:41   4  ,gatt
14:14:41   5  ,COUNT(pair)
14:14:41   6  ,AVG(g6)
14:14:41   7  FROM svm6142
14:14:41   8  GROUP BY pair,trend,gatt
14:14:41   9  ORDER BY pair,trend,gatt
14:14:41  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7282  -.0013138
usd_cad 	-1 up	      3152 .003080718
usd_cad 	-1		27
usd_cad 	 1 nup	      6760 -.00160578
usd_cad 	 1 up	      2493 .003594531
usd_cad 	 1		45

6 rows selected.

Elapsed: 00:00:00.04
14:14:41 SQL> 
14:14:41 SQL> 
14:14:41 SQL> -- Derive NTILE based params:
14:14:41 SQL> 
14:14:41 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.23
14:14:42 SQL> CREATE TABLE svm6162 COMPRESS AS
14:14:42   2  SELECT
14:14:42   3  pair
14:14:42   4  ,ydate
14:14:42   5  ,prdate
14:14:42   6  ,clse
14:14:42   7  ,g6
14:14:42   8  ,gatt
14:14:42   9  ,gattn
14:14:42  10  ,trend
14:14:42  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
14:14:42  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
14:14:42  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
14:14:42  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
14:14:42  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
14:14:42  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
14:14:42  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
14:14:42  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
14:14:42  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
14:14:42  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
14:14:42  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
14:14:42  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
14:14:42  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
14:14:42  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
14:14:42  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
14:14:42  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
14:14:42  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
14:14:42  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
14:14:42  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
14:14:42  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
14:14:42  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
14:14:42  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
14:14:42  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
14:14:42  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
14:14:42  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
14:14:42  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
14:14:42  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
14:14:42  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
14:14:42  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
14:14:42  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
14:14:42  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
14:14:42  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
14:14:42  43  ,hh  att32
14:14:42  44  ,d   att33
14:14:42  45  ,w   att34
14:14:42  46  ,mpm att35
14:14:42  47  ,mph att36
14:14:42  48  ,trend att37
14:14:42  49  FROM svm6142
14:14:42  50  ORDER BY ydate
14:14:42  51  /

Table created.

Elapsed: 00:00:04.78
14:14:46 SQL> 
14:14:46 SQL> -- rpt
14:14:46 SQL> 
14:14:46 SQL> SELECT
14:14:46   2  pair
14:14:46   3  ,trend
14:14:46   4  ,gatt
14:14:46   5  ,COUNT(pair)
14:14:46   6  ,AVG(g6)
14:14:46   7  FROM svm6162
14:14:46   8  GROUP BY pair,trend,gatt
14:14:46   9  ORDER BY pair,trend,gatt
14:14:46  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7282  -.0013138
usd_cad 	-1 up	      3152 .003080718
usd_cad 	-1		27
usd_cad 	 1 nup	      6760 -.00160578
usd_cad 	 1 up	      2493 .003594531
usd_cad 	 1		45

6 rows selected.

Elapsed: 00:00:00.03
14:14:46 SQL> 
14:14:46 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
14:14:46 SQL> CREATE TABLE modsrc COMPRESS AS
14:14:46   2  SELECT
14:14:46   3  pair
14:14:46   4  ,ydate
14:14:46   5  ,prdate
14:14:46   6  ,trend
14:14:46   7  ,g6
14:14:46   8  ,gatt
14:14:46   9  ,gattn
14:14:46  10  FROM svm6162
14:14:46  11  /

Table created.

Elapsed: 00:00:00.09
14:14:47 SQL> 
14:14:47 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
14:14:47 SQL> 
14:14:47 SQL> DROP   TABLE cad_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
14:14:47 SQL> CREATE TABLE cad_ms610 COMPRESS AS
14:14:47   2  SELECT
14:14:47   3  ydate
14:14:47   4  ,trend cad_trend
14:14:47   5  ,g6    cad_g6
14:14:47   6  ,gatt  cad_gatt
14:14:47   7  ,gattn cad_gattn
14:14:47   8  FROM modsrc
14:14:47   9  /

Table created.

Elapsed: 00:00:00.06
14:14:47 SQL> 
14:14:47 SQL> ANALYZE TABLE cad_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
14:14:47 SQL> 
14:14:47 SQL> -- I need a copy of the attributes:
14:14:47 SQL> 
14:14:47 SQL> 
14:14:47 SQL> DROP   TABLE cad_att;

Table dropped.

Elapsed: 00:00:00.21
14:14:47 SQL> CREATE TABLE cad_att COMPRESS AS
14:14:47   2  SELECT
14:14:47   3  ydate
14:14:47   4  ,att00 cad_att00
14:14:47   5  ,att01 cad_att01
14:14:47   6  ,att02 cad_att02
14:14:47   7  ,att03 cad_att03
14:14:47   8  ,att04 cad_att04
14:14:47   9  ,att05 cad_att05
14:14:47  10  ,att06 cad_att06
14:14:47  11  ,att07 cad_att07
14:14:47  12  ,att08 cad_att08
14:14:47  13  ,att09 cad_att09
14:14:47  14  ,att10 cad_att10
14:14:47  15  ,att11 cad_att11
14:14:47  16  ,att12 cad_att12
14:14:47  17  ,att13 cad_att13
14:14:47  18  ,att14 cad_att14
14:14:47  19  ,att15 cad_att15
14:14:47  20  ,att16 cad_att16
14:14:47  21  ,att17 cad_att17
14:14:47  22  ,att18 cad_att18
14:14:47  23  ,att19 cad_att19
14:14:47  24  ,att20 cad_att20
14:14:47  25  ,att21 cad_att21
14:14:47  26  ,att22 cad_att22
14:14:47  27  ,att23 cad_att23
14:14:47  28  ,att24 cad_att24
14:14:47  29  ,att25 cad_att25
14:14:47  30  ,att26 cad_att26
14:14:47  31  ,att27 cad_att27
14:14:47  32  ,att28 cad_att28
14:14:47  33  ,att29 cad_att29
14:14:47  34  ,att30 cad_att30
14:14:47  35  ,att31 cad_att31
14:14:47  36  ,att32 cad_att32
14:14:47  37  ,att33 cad_att33
14:14:47  38  ,att34 cad_att34
14:14:47  39  ,att35 cad_att35
14:14:47  40  ,att36 cad_att36
14:14:47  41  ,att37 cad_att37
14:14:47  42  FROM svm6162
14:14:47  43  /

Table created.

Elapsed: 00:00:00.18
14:14:47 SQL> 
14:14:47 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.44
14:14:48 SQL> 
14:14:48 SQL> -- rpt
14:14:48 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19759

Elapsed: 00:00:00.82
14:14:49 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
     19759

Elapsed: 00:00:00.00
14:14:49 SQL> 
14:14:49 SQL> --
14:14:49 SQL> -- chf610.sql
14:14:49 SQL> --
14:14:49 SQL> 
14:14:49 SQL> -- Creates views and tables for backtesting a forex SVM strategy
14:14:49 SQL> 
14:14:49 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.34
14:14:49 SQL> 
14:14:49 SQL> -- I created di5min here:
14:14:49 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
14:14:49 SQL> 
14:14:49 SQL> CREATE OR REPLACE VIEW svm6102 AS
14:14:49   2  SELECT
14:14:49   3  pair
14:14:49   4  ,ydate
14:14:49   5  ,prdate
14:14:49   6  ,rownum rnum -- acts as t in my time-series
14:14:49   7  ,clse
14:14:49   8  -- Derive a bunch of attributes from clse, the latest price:
14:14:49   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
14:14:49  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
14:14:49  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
14:14:49  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
14:14:49  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
14:14:49  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
14:14:49  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
14:14:49  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
14:14:49  17  --
14:14:49  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
14:14:49  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
14:14:49  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
14:14:49  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
14:14:49  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
14:14:49  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
14:14:49  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
14:14:49  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
14:14:49  26  --
14:14:49  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
14:14:49  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
14:14:49  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
14:14:49  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
14:14:49  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
14:14:49  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
14:14:49  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
14:14:49  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
14:14:49  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
14:14:49  36  FROM di5min WHERE pair LIKE'%chf%'
14:14:49  37  AND ydate > sysdate - 95
14:14:49  38  ORDER BY ydate
14:14:49  39  /

View created.

Elapsed: 00:00:00.06
14:14:49 SQL> 
14:14:49 SQL> -- rpt
14:14:49 SQL> 
14:14:49 SQL> SELECT
14:14:49   2  pair
14:14:49   3  ,COUNT(pair)
14:14:49   4  ,MIN(clse),MAX(clse)
14:14:49   5  ,MIN(avg6),MAX(avg6)
14:14:49   6  ,MIN(ydate),MAX(ydate)
14:14:49   7  FROM svm6102
14:14:49   8  GROUP BY pair
14:14:49   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_chf       19762    .937875	  1.00635 .939267152 1.00498151 2010-09-26 20:55:01 2010-12-30 14:10:00

Elapsed: 00:00:00.85
14:14:50 SQL> 
14:14:50 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
14:14:50 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.20
14:14:50 SQL> CREATE TABLE svm6122 COMPRESS AS
14:14:50   2  SELECT
14:14:50   3  pair
14:14:50   4  ,ydate
14:14:50   5  ,prdate
14:14:50   6  ,clse
14:14:50   7  -- g6 is important. I want to predict g6:
14:14:50   8  ,ld6 - clse g6
14:14:50   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
14:14:50  10  -- I want more attributes from the ones I derived above:
14:14:50  11  -- clse relation to moving-min
14:14:50  12  ,clse-min4  cm4
14:14:50  13  ,clse-min6  cm6
14:14:50  14  ,clse-min8  cm8
14:14:50  15  ,clse-min10 cm10
14:14:50  16  ,clse-min12 cm12
14:14:50  17  ,clse-min14 cm14
14:14:50  18  ,clse-min16 cm16
14:14:50  19  ,clse-min18 cm18
14:14:50  20  -- clse relation to moving-avg
14:14:50  21  ,clse-avg4  ca4
14:14:50  22  ,clse-avg6  ca6
14:14:50  23  ,clse-avg8  ca8
14:14:50  24  ,clse-avg10 ca10
14:14:50  25  ,clse-avg12 ca12
14:14:50  26  ,clse-avg14 ca14
14:14:50  27  ,clse-avg16 ca16
14:14:50  28  ,clse-avg18 ca18
14:14:50  29  -- clse relation to moving-max
14:14:50  30  ,clse-max4  cx4
14:14:50  31  ,clse-max6  cx6
14:14:50  32  ,clse-max8  cx8
14:14:50  33  ,clse-max10 cx10
14:14:50  34  ,clse-max12 cx12
14:14:50  35  ,clse-max14 cx14
14:14:50  36  ,clse-max16 cx16
14:14:50  37  ,clse-max18 cx18
14:14:50  38  -- Derive more attributes.
14:14:50  39  -- I want to use CORR() here to help SVM see the shape of the series.
14:14:50  40  -- But COVAR_POP is more stable:
14:14:50  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
14:14:50  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
14:14:50  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
14:14:50  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
14:14:50  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
14:14:50  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
14:14:50  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
14:14:50  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
14:14:50  49  -- Derive date related attributes:
14:14:50  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
14:14:50  51  ,0+TO_CHAR(ydate,'D')d
14:14:50  52  ,0+TO_CHAR(ydate,'W')w
14:14:50  53  -- mpm stands for minutes-past-midnight:
14:14:50  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
14:14:50  55  -- mph stands for minutes-past-hour:
14:14:50  56  ,0+TO_CHAR(ydate,'MI')mph
14:14:50  57  FROM svm6102
14:14:50  58  ORDER BY ydate
14:14:50  59  /

Table created.

Elapsed: 00:00:02.09
14:14:52 SQL> 
14:14:52 SQL> -- rpt
14:14:52 SQL> 
14:14:52 SQL> SELECT
14:14:52   2  pair
14:14:52   3  ,COUNT(pair)
14:14:52   4  ,MIN(clse),MAX(clse)
14:14:52   5  ,MIN(ydate),MAX(ydate)
14:14:52   6  FROM svm6122
14:14:52   7  GROUP BY pair
14:14:52   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_chf       19762    .937875	  1.00635 2010-09-26 20:55:01 2010-12-30 14:10:00

Elapsed: 00:00:00.04
14:14:52 SQL> 
14:14:52 SQL> -- Prepare for derivation of NTILE based params:
14:14:52 SQL> 
14:14:52 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.27
14:14:53 SQL> CREATE TABLE svm6142 COMPRESS AS
14:14:53   2  SELECT
14:14:53   3  pair
14:14:53   4  ,ydate
14:14:53   5  ,prdate
14:14:53   6  ,clse
14:14:53   7  ,g6
14:14:53   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
14:14:53   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
14:14:53  10  ,CASE WHEN trend IS NULL THEN 1
14:14:53  11  	    WHEN trend =0      THEN 1
14:14:53  12  	    ELSE trend END trend
14:14:53  13  ,cm4
14:14:53  14  ,cm6
14:14:53  15  ,cm8
14:14:53  16  ,cm10
14:14:53  17  ,cm12
14:14:53  18  ,cm14
14:14:53  19  ,cm16
14:14:53  20  ,cm18
14:14:53  21  --
14:14:53  22  ,ca4
14:14:53  23  ,ca6
14:14:53  24  ,ca8
14:14:53  25  ,ca10
14:14:53  26  ,ca12
14:14:53  27  ,ca14
14:14:53  28  ,ca16
14:14:53  29  ,ca18
14:14:53  30  --
14:14:53  31  ,cx4
14:14:53  32  ,cx6
14:14:53  33  ,cx8
14:14:53  34  ,cx10
14:14:53  35  ,cx12
14:14:53  36  ,cx14
14:14:53  37  ,cx16
14:14:53  38  ,cx18
14:14:53  39  --
14:14:53  40  ,crr4
14:14:53  41  ,crr6
14:14:53  42  ,crr8
14:14:53  43  ,crr10
14:14:53  44  ,crr12
14:14:53  45  ,crr14
14:14:53  46  ,crr16
14:14:53  47  ,crr18
14:14:53  48  --
14:14:53  49  ,hh
14:14:53  50  ,d
14:14:53  51  ,w
14:14:53  52  ,mpm
14:14:53  53  ,mph
14:14:53  54  FROM svm6122
14:14:53  55  ORDER BY ydate
14:14:53  56  /

Table created.

Elapsed: 00:00:00.35
14:14:53 SQL> 
14:14:53 SQL> -- rpt
14:14:53 SQL> 
14:14:53 SQL> SELECT
14:14:53   2  pair
14:14:53   3  ,trend
14:14:53   4  ,gatt
14:14:53   5  ,COUNT(pair)
14:14:53   6  ,AVG(g6)
14:14:53   7  FROM svm6142
14:14:53   8  GROUP BY pair,trend,gatt
14:14:53   9  ORDER BY pair,trend,gatt
14:14:53  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7197 -.00197082
usd_chf 	-1 up	      3178 .003893865
usd_chf 	-1		72
usd_chf 	 1 nup	      6749 -.00161788
usd_chf 	 1 up	      2566 .003688801

Elapsed: 00:00:00.05
14:14:53 SQL> 
14:14:53 SQL> 
14:14:53 SQL> -- Derive NTILE based params:
14:14:53 SQL> 
14:14:53 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.15
14:14:53 SQL> CREATE TABLE svm6162 COMPRESS AS
14:14:53   2  SELECT
14:14:53   3  pair
14:14:53   4  ,ydate
14:14:53   5  ,prdate
14:14:53   6  ,clse
14:14:53   7  ,g6
14:14:53   8  ,gatt
14:14:53   9  ,gattn
14:14:53  10  ,trend
14:14:53  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
14:14:53  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
14:14:53  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
14:14:53  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
14:14:53  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
14:14:53  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
14:14:53  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
14:14:53  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
14:14:53  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
14:14:53  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
14:14:53  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
14:14:53  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
14:14:53  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
14:14:53  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
14:14:53  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
14:14:53  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
14:14:53  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
14:14:53  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
14:14:53  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
14:14:53  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
14:14:53  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
14:14:53  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
14:14:53  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
14:14:53  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
14:14:53  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
14:14:53  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
14:14:53  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
14:14:53  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
14:14:53  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
14:14:53  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
14:14:53  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
14:14:53  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
14:14:53  43  ,hh  att32
14:14:53  44  ,d   att33
14:14:53  45  ,w   att34
14:14:53  46  ,mpm att35
14:14:53  47  ,mph att36
14:14:53  48  ,trend att37
14:14:53  49  FROM svm6142
14:14:53  50  ORDER BY ydate
14:14:53  51  /

Table created.

Elapsed: 00:00:05.11
14:14:58 SQL> 
14:14:58 SQL> -- rpt
14:14:58 SQL> 
14:14:58 SQL> SELECT
14:14:58   2  pair
14:14:58   3  ,trend
14:14:58   4  ,gatt
14:14:58   5  ,COUNT(pair)
14:14:58   6  ,AVG(g6)
14:14:58   7  FROM svm6162
14:14:58   8  GROUP BY pair,trend,gatt
14:14:58   9  ORDER BY pair,trend,gatt
14:14:58  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7197 -.00197082
usd_chf 	-1 up	      3178 .003893865
usd_chf 	-1		72
usd_chf 	 1 nup	      6749 -.00161788
usd_chf 	 1 up	      2566 .003688801

Elapsed: 00:00:00.02
14:14:58 SQL> 
14:14:58 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.17
14:14:58 SQL> CREATE TABLE modsrc COMPRESS AS
14:14:58   2  SELECT
14:14:58   3  pair
14:14:58   4  ,ydate
14:14:58   5  ,prdate
14:14:58   6  ,trend
14:14:58   7  ,g6
14:14:58   8  ,gatt
14:14:58   9  ,gattn
14:14:58  10  FROM svm6162
14:14:58  11  /

Table created.

Elapsed: 00:00:00.08
14:14:58 SQL> 
14:14:58 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
14:14:59 SQL> 
14:14:59 SQL> DROP   TABLE chf_ms610 ;

Table dropped.

Elapsed: 00:00:00.06
14:14:59 SQL> CREATE TABLE chf_ms610 COMPRESS AS
14:14:59   2  SELECT
14:14:59   3  ydate
14:14:59   4  ,trend chf_trend
14:14:59   5  ,g6    chf_g6
14:14:59   6  ,gatt  chf_gatt
14:14:59   7  ,gattn chf_gattn
14:14:59   8  FROM modsrc
14:14:59   9  /

Table created.

Elapsed: 00:00:00.08
14:14:59 SQL> 
14:14:59 SQL> ANALYZE TABLE chf_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.14
14:14:59 SQL> 
14:14:59 SQL> -- I need a copy of the attributes:
14:14:59 SQL> 
14:14:59 SQL> 
14:14:59 SQL> DROP   TABLE chf_att;

Table dropped.

Elapsed: 00:00:00.04
14:14:59 SQL> CREATE TABLE chf_att COMPRESS AS
14:14:59   2  SELECT
14:14:59   3  ydate
14:14:59   4  ,att00 chf_att00
14:14:59   5  ,att01 chf_att01
14:14:59   6  ,att02 chf_att02
14:14:59   7  ,att03 chf_att03
14:14:59   8  ,att04 chf_att04
14:14:59   9  ,att05 chf_att05
14:14:59  10  ,att06 chf_att06
14:14:59  11  ,att07 chf_att07
14:14:59  12  ,att08 chf_att08
14:14:59  13  ,att09 chf_att09
14:14:59  14  ,att10 chf_att10
14:14:59  15  ,att11 chf_att11
14:14:59  16  ,att12 chf_att12
14:14:59  17  ,att13 chf_att13
14:14:59  18  ,att14 chf_att14
14:14:59  19  ,att15 chf_att15
14:14:59  20  ,att16 chf_att16
14:14:59  21  ,att17 chf_att17
14:14:59  22  ,att18 chf_att18
14:14:59  23  ,att19 chf_att19
14:14:59  24  ,att20 chf_att20
14:14:59  25  ,att21 chf_att21
14:14:59  26  ,att22 chf_att22
14:14:59  27  ,att23 chf_att23
14:14:59  28  ,att24 chf_att24
14:14:59  29  ,att25 chf_att25
14:14:59  30  ,att26 chf_att26
14:14:59  31  ,att27 chf_att27
14:14:59  32  ,att28 chf_att28
14:14:59  33  ,att29 chf_att29
14:14:59  34  ,att30 chf_att30
14:14:59  35  ,att31 chf_att31
14:14:59  36  ,att32 chf_att32
14:14:59  37  ,att33 chf_att33
14:14:59  38  ,att34 chf_att34
14:14:59  39  ,att35 chf_att35
14:14:59  40  ,att36 chf_att36
14:14:59  41  ,att37 chf_att37
14:14:59  42  FROM svm6162
14:14:59  43  /

Table created.

Elapsed: 00:00:00.19
14:14:59 SQL> 
14:14:59 SQL> ANALYZE TABLE chf_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
14:15:00 SQL> 
14:15:00 SQL> -- rpt
14:15:00 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19762

Elapsed: 00:00:00.83
14:15:00 SQL> SELECT COUNT(*)FROM chf_att;

  COUNT(*)
----------
     19762

Elapsed: 00:00:00.01
14:15:00 SQL> 
14:15:00 SQL> --
14:15:00 SQL> -- ech610.sql
14:15:00 SQL> --
14:15:00 SQL> 
14:15:00 SQL> -- Creates views and tables for backtesting a forex SVM strategy
14:15:00 SQL> 
14:15:00 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.55
14:15:01 SQL> 
14:15:01 SQL> -- I created di5min here:
14:15:01 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
14:15:01 SQL> 
14:15:01 SQL> CREATE OR REPLACE VIEW svm6102 AS
14:15:01   2  SELECT
14:15:01   3  pair
14:15:01   4  ,ydate
14:15:01   5  ,prdate
14:15:01   6  ,rownum rnum -- acts as t in my time-series
14:15:01   7  ,clse
14:15:01   8  -- Derive a bunch of attributes from clse, the latest price:
14:15:01   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
14:15:01  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
14:15:01  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
14:15:01  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
14:15:01  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
14:15:01  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
14:15:01  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
14:15:01  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
14:15:01  17  --
14:15:01  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
14:15:01  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
14:15:01  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
14:15:01  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
14:15:01  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
14:15:01  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
14:15:01  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
14:15:01  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
14:15:01  26  --
14:15:01  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
14:15:01  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
14:15:01  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
14:15:01  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
14:15:01  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
14:15:01  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
14:15:01  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
14:15:01  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
14:15:01  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
14:15:01  36  FROM di5min WHERE pair LIKE'%ech%'
14:15:01  37  AND ydate > sysdate - 95
14:15:01  38  ORDER BY ydate
14:15:01  39  /

View created.

Elapsed: 00:00:00.05
14:15:01 SQL> 
14:15:01 SQL> -- rpt
14:15:01 SQL> 
14:15:01 SQL> SELECT
14:15:01   2  pair
14:15:01   3  ,COUNT(pair)
14:15:01   4  ,MIN(clse),MAX(clse)
14:15:01   5  ,MIN(avg6),MAX(avg6)
14:15:01   6  ,MIN(ydate),MAX(ydate)
14:15:01   7  FROM svm6102
14:15:01   8  GROUP BY pair
14:15:01   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ech_usd       19761 1.24213032 1.38284305 1.24477017 1.37986485 2010-09-26 20:55:01 2010-12-30 14:10:00

Elapsed: 00:00:00.82
14:15:02 SQL> 
14:15:02 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
14:15:02 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.29
14:15:02 SQL> CREATE TABLE svm6122 COMPRESS AS
14:15:02   2  SELECT
14:15:02   3  pair
14:15:02   4  ,ydate
14:15:02   5  ,prdate
14:15:02   6  ,clse
14:15:02   7  -- g6 is important. I want to predict g6:
14:15:02   8  ,ld6 - clse g6
14:15:02   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
14:15:02  10  -- I want more attributes from the ones I derived above:
14:15:02  11  -- clse relation to moving-min
14:15:02  12  ,clse-min4  cm4
14:15:02  13  ,clse-min6  cm6
14:15:02  14  ,clse-min8  cm8
14:15:02  15  ,clse-min10 cm10
14:15:02  16  ,clse-min12 cm12
14:15:02  17  ,clse-min14 cm14
14:15:02  18  ,clse-min16 cm16
14:15:02  19  ,clse-min18 cm18
14:15:02  20  -- clse relation to moving-avg
14:15:02  21  ,clse-avg4  ca4
14:15:02  22  ,clse-avg6  ca6
14:15:02  23  ,clse-avg8  ca8
14:15:02  24  ,clse-avg10 ca10
14:15:02  25  ,clse-avg12 ca12
14:15:02  26  ,clse-avg14 ca14
14:15:02  27  ,clse-avg16 ca16
14:15:02  28  ,clse-avg18 ca18
14:15:02  29  -- clse relation to moving-max
14:15:02  30  ,clse-max4  cx4
14:15:02  31  ,clse-max6  cx6
14:15:02  32  ,clse-max8  cx8
14:15:02  33  ,clse-max10 cx10
14:15:02  34  ,clse-max12 cx12
14:15:02  35  ,clse-max14 cx14
14:15:02  36  ,clse-max16 cx16
14:15:02  37  ,clse-max18 cx18
14:15:02  38  -- Derive more attributes.
14:15:02  39  -- I want to use CORR() here to help SVM see the shape of the series.
14:15:02  40  -- But COVAR_POP is more stable:
14:15:02  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
14:15:02  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
14:15:02  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
14:15:02  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
14:15:02  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
14:15:02  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
14:15:02  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
14:15:02  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
14:15:02  49  -- Derive date related attributes:
14:15:02  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
14:15:02  51  ,0+TO_CHAR(ydate,'D')d
14:15:02  52  ,0+TO_CHAR(ydate,'W')w
14:15:02  53  -- mpm stands for minutes-past-midnight:
14:15:02  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
14:15:02  55  -- mph stands for minutes-past-hour:
14:15:02  56  ,0+TO_CHAR(ydate,'MI')mph
14:15:02  57  FROM svm6102
14:15:02  58  ORDER BY ydate
14:15:02  59  /

Table created.

Elapsed: 00:00:02.11
14:15:04 SQL> 
14:15:04 SQL> -- rpt
14:15:04 SQL> 
14:15:04 SQL> SELECT
14:15:04   2  pair
14:15:04   3  ,COUNT(pair)
14:15:04   4  ,MIN(clse),MAX(clse)
14:15:04   5  ,MIN(ydate),MAX(ydate)
14:15:04   6  FROM svm6122
14:15:04   7  GROUP BY pair
14:15:04   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ech_usd       19761 1.24213032 1.38284305 2010-09-26 20:55:01 2010-12-30 14:10:00

Elapsed: 00:00:00.04
14:15:04 SQL> 
14:15:04 SQL> -- Prepare for derivation of NTILE based params:
14:15:04 SQL> 
14:15:04 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.19
14:15:05 SQL> CREATE TABLE svm6142 COMPRESS AS
14:15:05   2  SELECT
14:15:05   3  pair
14:15:05   4  ,ydate
14:15:05   5  ,prdate
14:15:05   6  ,clse
14:15:05   7  ,g6
14:15:05   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
14:15:05   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
14:15:05  10  ,CASE WHEN trend IS NULL THEN 1
14:15:05  11  	    WHEN trend =0      THEN 1
14:15:05  12  	    ELSE trend END trend
14:15:05  13  ,cm4
14:15:05  14  ,cm6
14:15:05  15  ,cm8
14:15:05  16  ,cm10
14:15:05  17  ,cm12
14:15:05  18  ,cm14
14:15:05  19  ,cm16
14:15:05  20  ,cm18
14:15:05  21  --
14:15:05  22  ,ca4
14:15:05  23  ,ca6
14:15:05  24  ,ca8
14:15:05  25  ,ca10
14:15:05  26  ,ca12
14:15:05  27  ,ca14
14:15:05  28  ,ca16
14:15:05  29  ,ca18
14:15:05  30  --
14:15:05  31  ,cx4
14:15:05  32  ,cx6
14:15:05  33  ,cx8
14:15:05  34  ,cx10
14:15:05  35  ,cx12
14:15:05  36  ,cx14
14:15:05  37  ,cx16
14:15:05  38  ,cx18
14:15:05  39  --
14:15:05  40  ,crr4
14:15:05  41  ,crr6
14:15:05  42  ,crr8
14:15:05  43  ,crr10
14:15:05  44  ,crr12
14:15:05  45  ,crr14
14:15:05  46  ,crr16
14:15:05  47  ,crr18
14:15:05  48  --
14:15:05  49  ,hh
14:15:05  50  ,d
14:15:05  51  ,w
14:15:05  52  ,mpm
14:15:05  53  ,mph
14:15:05  54  FROM svm6122
14:15:05  55  ORDER BY ydate
14:15:05  56  /

Table created.

Elapsed: 00:00:00.40
14:15:05 SQL> 
14:15:05 SQL> -- rpt
14:15:05 SQL> 
14:15:05 SQL> SELECT
14:15:05   2  pair
14:15:05   3  ,trend
14:15:05   4  ,gatt
14:15:05   5  ,COUNT(pair)
14:15:05   6  ,AVG(g6)
14:15:05   7  FROM svm6142
14:15:05   8  GROUP BY pair,trend,gatt
14:15:05   9  ORDER BY pair,trend,gatt
14:15:05  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6620 -.00220422
ech_usd 	-1 up	      3608 .003538093
ech_usd 	-1		63
ech_usd 	 1 nup	      6575 -.00229098
ech_usd 	 1 up	      2886 .003816993
ech_usd 	 1		 9

6 rows selected.

Elapsed: 00:00:00.04
14:15:05 SQL> 
14:15:05 SQL> 
14:15:05 SQL> -- Derive NTILE based params:
14:15:05 SQL> 
14:15:05 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.12
14:15:05 SQL> CREATE TABLE svm6162 COMPRESS AS
14:15:05   2  SELECT
14:15:05   3  pair
14:15:05   4  ,ydate
14:15:05   5  ,prdate
14:15:05   6  ,clse
14:15:05   7  ,g6
14:15:05   8  ,gatt
14:15:05   9  ,gattn
14:15:05  10  ,trend
14:15:05  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
14:15:05  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
14:15:05  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
14:15:05  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
14:15:05  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
14:15:05  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
14:15:05  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
14:15:05  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
14:15:05  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
14:15:05  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
14:15:05  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
14:15:05  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
14:15:05  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
14:15:05  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
14:15:05  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
14:15:05  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
14:15:05  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
14:15:05  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
14:15:05  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
14:15:05  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
14:15:05  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
14:15:05  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
14:15:05  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
14:15:05  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
14:15:05  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
14:15:05  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
14:15:05  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
14:15:05  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
14:15:05  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
14:15:05  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
14:15:05  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
14:15:05  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
14:15:05  43  ,hh  att32
14:15:05  44  ,d   att33
14:15:05  45  ,w   att34
14:15:05  46  ,mpm att35
14:15:05  47  ,mph att36
14:15:05  48  ,trend att37
14:15:05  49  FROM svm6142
14:15:05  50  ORDER BY ydate
14:15:05  51  /

Table created.

Elapsed: 00:00:04.82
14:15:10 SQL> 
14:15:10 SQL> -- rpt
14:15:10 SQL> 
14:15:10 SQL> SELECT
14:15:10   2  pair
14:15:10   3  ,trend
14:15:10   4  ,gatt
14:15:10   5  ,COUNT(pair)
14:15:10   6  ,AVG(g6)
14:15:10   7  FROM svm6162
14:15:10   8  GROUP BY pair,trend,gatt
14:15:10   9  ORDER BY pair,trend,gatt
14:15:10  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6620 -.00220422
ech_usd 	-1 up	      3608 .003538093
ech_usd 	-1		63
ech_usd 	 1 nup	      6575 -.00229098
ech_usd 	 1 up	      2886 .003816993
ech_usd 	 1		 9

6 rows selected.

Elapsed: 00:00:00.03
14:15:10 SQL> 
14:15:10 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.19
14:15:10 SQL> CREATE TABLE modsrc COMPRESS AS
14:15:10   2  SELECT
14:15:10   3  pair
14:15:10   4  ,ydate
14:15:10   5  ,prdate
14:15:10   6  ,trend
14:15:10   7  ,g6
14:15:10   8  ,gatt
14:15:10   9  ,gattn
14:15:10  10  FROM svm6162
14:15:10  11  /

Table created.

Elapsed: 00:00:00.09
14:15:10 SQL> 
14:15:10 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
14:15:10 SQL> 
14:15:10 SQL> DROP   TABLE ech_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
14:15:10 SQL> CREATE TABLE ech_ms610 COMPRESS AS
14:15:10   2  SELECT
14:15:10   3  ydate
14:15:10   4  ,trend ech_trend
14:15:10   5  ,g6    ech_g6
14:15:10   6  ,gatt  ech_gatt
14:15:10   7  ,gattn ech_gattn
14:15:10   8  FROM modsrc
14:15:10   9  /

Table created.

Elapsed: 00:00:00.07
14:15:11 SQL> 
14:15:11 SQL> ANALYZE TABLE ech_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
14:15:11 SQL> 
14:15:11 SQL> -- I need a copy of the attributes:
14:15:11 SQL> 
14:15:11 SQL> 
14:15:11 SQL> DROP   TABLE ech_att;

Table dropped.

Elapsed: 00:00:00.04
14:15:11 SQL> CREATE TABLE ech_att COMPRESS AS
14:15:11   2  SELECT
14:15:11   3  ydate
14:15:11   4  ,att00 ech_att00
14:15:11   5  ,att01 ech_att01
14:15:11   6  ,att02 ech_att02
14:15:11   7  ,att03 ech_att03
14:15:11   8  ,att04 ech_att04
14:15:11   9  ,att05 ech_att05
14:15:11  10  ,att06 ech_att06
14:15:11  11  ,att07 ech_att07
14:15:11  12  ,att08 ech_att08
14:15:11  13  ,att09 ech_att09
14:15:11  14  ,att10 ech_att10
14:15:11  15  ,att11 ech_att11
14:15:11  16  ,att12 ech_att12
14:15:11  17  ,att13 ech_att13
14:15:11  18  ,att14 ech_att14
14:15:11  19  ,att15 ech_att15
14:15:11  20  ,att16 ech_att16
14:15:11  21  ,att17 ech_att17
14:15:11  22  ,att18 ech_att18
14:15:11  23  ,att19 ech_att19
14:15:11  24  ,att20 ech_att20
14:15:11  25  ,att21 ech_att21
14:15:11  26  ,att22 ech_att22
14:15:11  27  ,att23 ech_att23
14:15:11  28  ,att24 ech_att24
14:15:11  29  ,att25 ech_att25
14:15:11  30  ,att26 ech_att26
14:15:11  31  ,att27 ech_att27
14:15:11  32  ,att28 ech_att28
14:15:11  33  ,att29 ech_att29
14:15:11  34  ,att30 ech_att30
14:15:11  35  ,att31 ech_att31
14:15:11  36  ,att32 ech_att32
14:15:11  37  ,att33 ech_att33
14:15:11  38  ,att34 ech_att34
14:15:11  39  ,att35 ech_att35
14:15:11  40  ,att36 ech_att36
14:15:11  41  ,att37 ech_att37
14:15:11  42  FROM svm6162
14:15:11  43  /

Table created.

Elapsed: 00:00:00.19
14:15:11 SQL> 
14:15:11 SQL> ANALYZE TABLE ech_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.42
14:15:11 SQL> 
14:15:11 SQL> -- rpt
14:15:11 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19761

Elapsed: 00:00:00.80
14:15:12 SQL> SELECT COUNT(*)FROM ech_att;

  COUNT(*)
----------
     19761

Elapsed: 00:00:00.00
14:15:12 SQL> 
14:15:12 SQL> --
14:15:12 SQL> -- ech610.sql
14:15:12 SQL> --
14:15:12 SQL> 
14:15:12 SQL> -- Creates views and tables for backtesting a forex SVM strategy
14:15:12 SQL> 
14:15:12 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.60
14:15:13 SQL> 
14:15:13 SQL> -- I created di5min here:
14:15:13 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
14:15:13 SQL> 
14:15:13 SQL> CREATE OR REPLACE VIEW svm6102 AS
14:15:13   2  SELECT
14:15:13   3  pair
14:15:13   4  ,ydate
14:15:13   5  ,prdate
14:15:13   6  ,rownum rnum -- acts as t in my time-series
14:15:13   7  ,clse
14:15:13   8  -- Derive a bunch of attributes from clse, the latest price:
14:15:13   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
14:15:13  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
14:15:13  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
14:15:13  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
14:15:13  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
14:15:13  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
14:15:13  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
14:15:13  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
14:15:13  17  --
14:15:13  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
14:15:13  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
14:15:13  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
14:15:13  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
14:15:13  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
14:15:13  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
14:15:13  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
14:15:13  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
14:15:13  26  --
14:15:13  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
14:15:13  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
14:15:13  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
14:15:13  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
14:15:13  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
14:15:13  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
14:15:13  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
14:15:13  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
14:15:13  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
14:15:13  36  FROM di5min WHERE pair LIKE'%ech%'
14:15:13  37  AND ydate > sysdate - 95
14:15:13  38  ORDER BY ydate
14:15:13  39  /

View created.

Elapsed: 00:00:00.04
14:15:13 SQL> 
14:15:13 SQL> -- rpt
14:15:13 SQL> 
14:15:13 SQL> SELECT
14:15:13   2  pair
14:15:13   3  ,COUNT(pair)
14:15:13   4  ,MIN(clse),MAX(clse)
14:15:13   5  ,MIN(avg6),MAX(avg6)
14:15:13   6  ,MIN(ydate),MAX(ydate)
14:15:13   7  FROM svm6102
14:15:13   8  GROUP BY pair
14:15:13   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ech_usd       19761 1.24213032 1.38284305 1.24477017 1.37986485 2010-09-26 20:55:01 2010-12-30 14:10:00

Elapsed: 00:00:00.79
14:15:14 SQL> 
14:15:14 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
14:15:14 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.26
14:15:14 SQL> CREATE TABLE svm6122 COMPRESS AS
14:15:14   2  SELECT
14:15:14   3  pair
14:15:14   4  ,ydate
14:15:14   5  ,prdate
14:15:14   6  ,clse
14:15:14   7  -- g6 is important. I want to predict g6:
14:15:14   8  ,ld6 - clse g6
14:15:14   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
14:15:14  10  -- I want more attributes from the ones I derived above:
14:15:14  11  -- clse relation to moving-min
14:15:14  12  ,clse-min4  cm4
14:15:14  13  ,clse-min6  cm6
14:15:14  14  ,clse-min8  cm8
14:15:14  15  ,clse-min10 cm10
14:15:14  16  ,clse-min12 cm12
14:15:14  17  ,clse-min14 cm14
14:15:14  18  ,clse-min16 cm16
14:15:14  19  ,clse-min18 cm18
14:15:14  20  -- clse relation to moving-avg
14:15:14  21  ,clse-avg4  ca4
14:15:14  22  ,clse-avg6  ca6
14:15:14  23  ,clse-avg8  ca8
14:15:14  24  ,clse-avg10 ca10
14:15:14  25  ,clse-avg12 ca12
14:15:14  26  ,clse-avg14 ca14
14:15:14  27  ,clse-avg16 ca16
14:15:14  28  ,clse-avg18 ca18
14:15:14  29  -- clse relation to moving-max
14:15:14  30  ,clse-max4  cx4
14:15:14  31  ,clse-max6  cx6
14:15:14  32  ,clse-max8  cx8
14:15:14  33  ,clse-max10 cx10
14:15:14  34  ,clse-max12 cx12
14:15:14  35  ,clse-max14 cx14
14:15:14  36  ,clse-max16 cx16
14:15:14  37  ,clse-max18 cx18
14:15:14  38  -- Derive more attributes.
14:15:14  39  -- I want to use CORR() here to help SVM see the shape of the series.
14:15:14  40  -- But COVAR_POP is more stable:
14:15:14  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
14:15:14  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
14:15:14  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
14:15:14  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
14:15:14  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
14:15:14  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
14:15:14  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
14:15:14  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
14:15:14  49  -- Derive date related attributes:
14:15:14  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
14:15:14  51  ,0+TO_CHAR(ydate,'D')d
14:15:14  52  ,0+TO_CHAR(ydate,'W')w
14:15:14  53  -- mpm stands for minutes-past-midnight:
14:15:14  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
14:15:14  55  -- mph stands for minutes-past-hour:
14:15:14  56  ,0+TO_CHAR(ydate,'MI')mph
14:15:14  57  FROM svm6102
14:15:14  58  ORDER BY ydate
14:15:14  59  /

Table created.

Elapsed: 00:00:02.11
14:15:16 SQL> 
14:15:16 SQL> -- rpt
14:15:16 SQL> 
14:15:16 SQL> SELECT
14:15:16   2  pair
14:15:16   3  ,COUNT(pair)
14:15:16   4  ,MIN(clse),MAX(clse)
14:15:16   5  ,MIN(ydate),MAX(ydate)
14:15:16   6  FROM svm6122
14:15:16   7  GROUP BY pair
14:15:16   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ech_usd       19761 1.24213032 1.38284305 2010-09-26 20:55:01 2010-12-30 14:10:00

Elapsed: 00:00:00.04
14:15:16 SQL> 
14:15:16 SQL> -- Prepare for derivation of NTILE based params:
14:15:16 SQL> 
14:15:16 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.21
14:15:16 SQL> CREATE TABLE svm6142 COMPRESS AS
14:15:16   2  SELECT
14:15:16   3  pair
14:15:16   4  ,ydate
14:15:16   5  ,prdate
14:15:16   6  ,clse
14:15:16   7  ,g6
14:15:16   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
14:15:16   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
14:15:16  10  ,CASE WHEN trend IS NULL THEN 1
14:15:16  11  	    WHEN trend =0      THEN 1
14:15:16  12  	    ELSE trend END trend
14:15:16  13  ,cm4
14:15:16  14  ,cm6
14:15:16  15  ,cm8
14:15:16  16  ,cm10
14:15:16  17  ,cm12
14:15:16  18  ,cm14
14:15:16  19  ,cm16
14:15:16  20  ,cm18
14:15:16  21  --
14:15:16  22  ,ca4
14:15:16  23  ,ca6
14:15:16  24  ,ca8
14:15:16  25  ,ca10
14:15:16  26  ,ca12
14:15:16  27  ,ca14
14:15:16  28  ,ca16
14:15:16  29  ,ca18
14:15:16  30  --
14:15:16  31  ,cx4
14:15:16  32  ,cx6
14:15:16  33  ,cx8
14:15:16  34  ,cx10
14:15:16  35  ,cx12
14:15:16  36  ,cx14
14:15:16  37  ,cx16
14:15:16  38  ,cx18
14:15:16  39  --
14:15:16  40  ,crr4
14:15:16  41  ,crr6
14:15:16  42  ,crr8
14:15:16  43  ,crr10
14:15:16  44  ,crr12
14:15:16  45  ,crr14
14:15:16  46  ,crr16
14:15:16  47  ,crr18
14:15:16  48  --
14:15:16  49  ,hh
14:15:16  50  ,d
14:15:16  51  ,w
14:15:16  52  ,mpm
14:15:16  53  ,mph
14:15:16  54  FROM svm6122
14:15:16  55  ORDER BY ydate
14:15:16  56  /

Table created.

Elapsed: 00:00:00.38
14:15:17 SQL> 
14:15:17 SQL> -- rpt
14:15:17 SQL> 
14:15:17 SQL> SELECT
14:15:17   2  pair
14:15:17   3  ,trend
14:15:17   4  ,gatt
14:15:17   5  ,COUNT(pair)
14:15:17   6  ,AVG(g6)
14:15:17   7  FROM svm6142
14:15:17   8  GROUP BY pair,trend,gatt
14:15:17   9  ORDER BY pair,trend,gatt
14:15:17  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6620 -.00220422
ech_usd 	-1 up	      3608 .003538093
ech_usd 	-1		63
ech_usd 	 1 nup	      6575 -.00229098
ech_usd 	 1 up	      2886 .003816993
ech_usd 	 1		 9

6 rows selected.

Elapsed: 00:00:00.04
14:15:17 SQL> 
14:15:17 SQL> 
14:15:17 SQL> -- Derive NTILE based params:
14:15:17 SQL> 
14:15:17 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.14
14:15:17 SQL> CREATE TABLE svm6162 COMPRESS AS
14:15:17   2  SELECT
14:15:17   3  pair
14:15:17   4  ,ydate
14:15:17   5  ,prdate
14:15:17   6  ,clse
14:15:17   7  ,g6
14:15:17   8  ,gatt
14:15:17   9  ,gattn
14:15:17  10  ,trend
14:15:17  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
14:15:17  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
14:15:17  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
14:15:17  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
14:15:17  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
14:15:17  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
14:15:17  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
14:15:17  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
14:15:17  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
14:15:17  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
14:15:17  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
14:15:17  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
14:15:17  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
14:15:17  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
14:15:17  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
14:15:17  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
14:15:17  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
14:15:17  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
14:15:17  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
14:15:17  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
14:15:17  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
14:15:17  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
14:15:17  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
14:15:17  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
14:15:17  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
14:15:17  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
14:15:17  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
14:15:17  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
14:15:17  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
14:15:17  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
14:15:17  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
14:15:17  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
14:15:17  43  ,hh  att32
14:15:17  44  ,d   att33
14:15:17  45  ,w   att34
14:15:17  46  ,mpm att35
14:15:17  47  ,mph att36
14:15:17  48  ,trend att37
14:15:17  49  FROM svm6142
14:15:17  50  ORDER BY ydate
14:15:17  51  /

Table created.

Elapsed: 00:00:04.87
14:15:22 SQL> 
14:15:22 SQL> -- rpt
14:15:22 SQL> 
14:15:22 SQL> SELECT
14:15:22   2  pair
14:15:22   3  ,trend
14:15:22   4  ,gatt
14:15:22   5  ,COUNT(pair)
14:15:22   6  ,AVG(g6)
14:15:22   7  FROM svm6162
14:15:22   8  GROUP BY pair,trend,gatt
14:15:22   9  ORDER BY pair,trend,gatt
14:15:22  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6620 -.00220422
ech_usd 	-1 up	      3608 .003538093
ech_usd 	-1		63
ech_usd 	 1 nup	      6575 -.00229098
ech_usd 	 1 up	      2886 .003816993
ech_usd 	 1		 9

6 rows selected.

Elapsed: 00:00:00.03
14:15:22 SQL> 
14:15:22 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.15
14:15:22 SQL> CREATE TABLE modsrc COMPRESS AS
14:15:22   2  SELECT
14:15:22   3  pair
14:15:22   4  ,ydate
14:15:22   5  ,prdate
14:15:22   6  ,trend
14:15:22   7  ,g6
14:15:22   8  ,gatt
14:15:22   9  ,gattn
14:15:22  10  FROM svm6162
14:15:22  11  /

Table created.

Elapsed: 00:00:00.08
14:15:22 SQL> 
14:15:22 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
14:15:22 SQL> 
14:15:22 SQL> DROP   TABLE ech_ms610 ;

Table dropped.

Elapsed: 00:00:00.10
14:15:22 SQL> CREATE TABLE ech_ms610 COMPRESS AS
14:15:22   2  SELECT
14:15:22   3  ydate
14:15:22   4  ,trend ech_trend
14:15:22   5  ,g6    ech_g6
14:15:22   6  ,gatt  ech_gatt
14:15:22   7  ,gattn ech_gattn
14:15:22   8  FROM modsrc
14:15:22   9  /

Table created.

Elapsed: 00:00:00.07
14:15:22 SQL> 
14:15:22 SQL> ANALYZE TABLE ech_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
14:15:22 SQL> 
14:15:22 SQL> -- I need a copy of the attributes:
14:15:22 SQL> 
14:15:22 SQL> 
14:15:22 SQL> DROP   TABLE ech_att;

Table dropped.

Elapsed: 00:00:00.15
14:15:23 SQL> CREATE TABLE ech_att COMPRESS AS
14:15:23   2  SELECT
14:15:23   3  ydate
14:15:23   4  ,att00 ech_att00
14:15:23   5  ,att01 ech_att01
14:15:23   6  ,att02 ech_att02
14:15:23   7  ,att03 ech_att03
14:15:23   8  ,att04 ech_att04
14:15:23   9  ,att05 ech_att05
14:15:23  10  ,att06 ech_att06
14:15:23  11  ,att07 ech_att07
14:15:23  12  ,att08 ech_att08
14:15:23  13  ,att09 ech_att09
14:15:23  14  ,att10 ech_att10
14:15:23  15  ,att11 ech_att11
14:15:23  16  ,att12 ech_att12
14:15:23  17  ,att13 ech_att13
14:15:23  18  ,att14 ech_att14
14:15:23  19  ,att15 ech_att15
14:15:23  20  ,att16 ech_att16
14:15:23  21  ,att17 ech_att17
14:15:23  22  ,att18 ech_att18
14:15:23  23  ,att19 ech_att19
14:15:23  24  ,att20 ech_att20
14:15:23  25  ,att21 ech_att21
14:15:23  26  ,att22 ech_att22
14:15:23  27  ,att23 ech_att23
14:15:23  28  ,att24 ech_att24
14:15:23  29  ,att25 ech_att25
14:15:23  30  ,att26 ech_att26
14:15:23  31  ,att27 ech_att27
14:15:23  32  ,att28 ech_att28
14:15:23  33  ,att29 ech_att29
14:15:23  34  ,att30 ech_att30
14:15:23  35  ,att31 ech_att31
14:15:23  36  ,att32 ech_att32
14:15:23  37  ,att33 ech_att33
14:15:23  38  ,att34 ech_att34
14:15:23  39  ,att35 ech_att35
14:15:23  40  ,att36 ech_att36
14:15:23  41  ,att37 ech_att37
14:15:23  42  FROM svm6162
14:15:23  43  /

Table created.

Elapsed: 00:00:00.16
14:15:23 SQL> 
14:15:23 SQL> ANALYZE TABLE ech_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
14:15:23 SQL> 
14:15:23 SQL> -- rpt
14:15:23 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19761

Elapsed: 00:00:00.79
14:15:24 SQL> SELECT COUNT(*)FROM ech_att;

  COUNT(*)
----------
     19761

Elapsed: 00:00:00.01
14:15:24 SQL> 
14:15:24 SQL> --
14:15:24 SQL> -- ech610.sql
14:15:24 SQL> --
14:15:24 SQL> 
14:15:24 SQL> -- Creates views and tables for backtesting a forex SVM strategy
14:15:24 SQL> 
14:15:24 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.76
14:15:25 SQL> 
14:15:25 SQL> -- I created di5min here:
14:15:25 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
14:15:25 SQL> 
14:15:25 SQL> CREATE OR REPLACE VIEW svm6102 AS
14:15:25   2  SELECT
14:15:25   3  pair
14:15:25   4  ,ydate
14:15:25   5  ,prdate
14:15:25   6  ,rownum rnum -- acts as t in my time-series
14:15:25   7  ,clse
14:15:25   8  -- Derive a bunch of attributes from clse, the latest price:
14:15:25   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
14:15:25  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
14:15:25  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
14:15:25  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
14:15:25  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
14:15:25  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
14:15:25  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
14:15:25  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
14:15:25  17  --
14:15:25  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
14:15:25  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
14:15:25  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
14:15:25  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
14:15:25  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
14:15:25  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
14:15:25  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
14:15:25  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
14:15:25  26  --
14:15:25  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
14:15:25  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
14:15:25  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
14:15:25  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
14:15:25  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
14:15:25  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
14:15:25  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
14:15:25  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
14:15:25  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
14:15:25  36  FROM di5min WHERE pair LIKE'%ech%'
14:15:25  37  AND ydate > sysdate - 95
14:15:25  38  ORDER BY ydate
14:15:25  39  /

View created.

Elapsed: 00:00:00.04
14:15:25 SQL> 
14:15:25 SQL> -- rpt
14:15:25 SQL> 
14:15:25 SQL> SELECT
14:15:25   2  pair
14:15:25   3  ,COUNT(pair)
14:15:25   4  ,MIN(clse),MAX(clse)
14:15:25   5  ,MIN(avg6),MAX(avg6)
14:15:25   6  ,MIN(ydate),MAX(ydate)
14:15:25   7  FROM svm6102
14:15:25   8  GROUP BY pair
14:15:25   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ech_usd       19761 1.24213032 1.38284305 1.24477017 1.37986485 2010-09-26 20:55:01 2010-12-30 14:10:00

Elapsed: 00:00:00.81
14:15:26 SQL> 
14:15:26 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
14:15:26 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.19
14:15:26 SQL> CREATE TABLE svm6122 COMPRESS AS
14:15:26   2  SELECT
14:15:26   3  pair
14:15:26   4  ,ydate
14:15:26   5  ,prdate
14:15:26   6  ,clse
14:15:26   7  -- g6 is important. I want to predict g6:
14:15:26   8  ,ld6 - clse g6
14:15:26   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
14:15:26  10  -- I want more attributes from the ones I derived above:
14:15:26  11  -- clse relation to moving-min
14:15:26  12  ,clse-min4  cm4
14:15:26  13  ,clse-min6  cm6
14:15:26  14  ,clse-min8  cm8
14:15:26  15  ,clse-min10 cm10
14:15:26  16  ,clse-min12 cm12
14:15:26  17  ,clse-min14 cm14
14:15:26  18  ,clse-min16 cm16
14:15:26  19  ,clse-min18 cm18
14:15:26  20  -- clse relation to moving-avg
14:15:26  21  ,clse-avg4  ca4
14:15:26  22  ,clse-avg6  ca6
14:15:26  23  ,clse-avg8  ca8
14:15:26  24  ,clse-avg10 ca10
14:15:26  25  ,clse-avg12 ca12
14:15:26  26  ,clse-avg14 ca14
14:15:26  27  ,clse-avg16 ca16
14:15:26  28  ,clse-avg18 ca18
14:15:26  29  -- clse relation to moving-max
14:15:26  30  ,clse-max4  cx4
14:15:26  31  ,clse-max6  cx6
14:15:26  32  ,clse-max8  cx8
14:15:26  33  ,clse-max10 cx10
14:15:26  34  ,clse-max12 cx12
14:15:26  35  ,clse-max14 cx14
14:15:26  36  ,clse-max16 cx16
14:15:26  37  ,clse-max18 cx18
14:15:26  38  -- Derive more attributes.
14:15:26  39  -- I want to use CORR() here to help SVM see the shape of the series.
14:15:26  40  -- But COVAR_POP is more stable:
14:15:26  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
14:15:26  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
14:15:26  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
14:15:26  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
14:15:26  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
14:15:26  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
14:15:26  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
14:15:26  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
14:15:26  49  -- Derive date related attributes:
14:15:26  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
14:15:26  51  ,0+TO_CHAR(ydate,'D')d
14:15:26  52  ,0+TO_CHAR(ydate,'W')w
14:15:26  53  -- mpm stands for minutes-past-midnight:
14:15:26  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
14:15:26  55  -- mph stands for minutes-past-hour:
14:15:26  56  ,0+TO_CHAR(ydate,'MI')mph
14:15:26  57  FROM svm6102
14:15:26  58  ORDER BY ydate
14:15:26  59  /

Table created.

Elapsed: 00:00:02.08
14:15:28 SQL> 
14:15:28 SQL> -- rpt
14:15:28 SQL> 
14:15:28 SQL> SELECT
14:15:28   2  pair
14:15:28   3  ,COUNT(pair)
14:15:28   4  ,MIN(clse),MAX(clse)
14:15:28   5  ,MIN(ydate),MAX(ydate)
14:15:28   6  FROM svm6122
14:15:28   7  GROUP BY pair
14:15:28   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ech_usd       19761 1.24213032 1.38284305 2010-09-26 20:55:01 2010-12-30 14:10:00

Elapsed: 00:00:00.04
14:15:28 SQL> 
14:15:28 SQL> -- Prepare for derivation of NTILE based params:
14:15:28 SQL> 
14:15:28 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.18
14:15:28 SQL> CREATE TABLE svm6142 COMPRESS AS
14:15:28   2  SELECT
14:15:28   3  pair
14:15:28   4  ,ydate
14:15:28   5  ,prdate
14:15:28   6  ,clse
14:15:28   7  ,g6
14:15:28   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
14:15:28   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
14:15:28  10  ,CASE WHEN trend IS NULL THEN 1
14:15:28  11  	    WHEN trend =0      THEN 1
14:15:28  12  	    ELSE trend END trend
14:15:28  13  ,cm4
14:15:28  14  ,cm6
14:15:28  15  ,cm8
14:15:28  16  ,cm10
14:15:28  17  ,cm12
14:15:28  18  ,cm14
14:15:28  19  ,cm16
14:15:28  20  ,cm18
14:15:28  21  --
14:15:28  22  ,ca4
14:15:28  23  ,ca6
14:15:28  24  ,ca8
14:15:28  25  ,ca10
14:15:28  26  ,ca12
14:15:28  27  ,ca14
14:15:28  28  ,ca16
14:15:28  29  ,ca18
14:15:28  30  --
14:15:28  31  ,cx4
14:15:28  32  ,cx6
14:15:28  33  ,cx8
14:15:28  34  ,cx10
14:15:28  35  ,cx12
14:15:28  36  ,cx14
14:15:28  37  ,cx16
14:15:28  38  ,cx18
14:15:28  39  --
14:15:28  40  ,crr4
14:15:28  41  ,crr6
14:15:28  42  ,crr8
14:15:28  43  ,crr10
14:15:28  44  ,crr12
14:15:28  45  ,crr14
14:15:28  46  ,crr16
14:15:28  47  ,crr18
14:15:28  48  --
14:15:28  49  ,hh
14:15:28  50  ,d
14:15:28  51  ,w
14:15:28  52  ,mpm
14:15:28  53  ,mph
14:15:28  54  FROM svm6122
14:15:28  55  ORDER BY ydate
14:15:28  56  /

Table created.

Elapsed: 00:00:00.46
14:15:29 SQL> 
14:15:29 SQL> -- rpt
14:15:29 SQL> 
14:15:29 SQL> SELECT
14:15:29   2  pair
14:15:29   3  ,trend
14:15:29   4  ,gatt
14:15:29   5  ,COUNT(pair)
14:15:29   6  ,AVG(g6)
14:15:29   7  FROM svm6142
14:15:29   8  GROUP BY pair,trend,gatt
14:15:29   9  ORDER BY pair,trend,gatt
14:15:29  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6620 -.00220422
ech_usd 	-1 up	      3608 .003538093
ech_usd 	-1		63
ech_usd 	 1 nup	      6575 -.00229098
ech_usd 	 1 up	      2886 .003816993
ech_usd 	 1		 9

6 rows selected.

Elapsed: 00:00:00.05
14:15:29 SQL> 
14:15:29 SQL> 
14:15:29 SQL> -- Derive NTILE based params:
14:15:29 SQL> 
14:15:29 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.11
14:15:29 SQL> CREATE TABLE svm6162 COMPRESS AS
14:15:29   2  SELECT
14:15:29   3  pair
14:15:29   4  ,ydate
14:15:29   5  ,prdate
14:15:29   6  ,clse
14:15:29   7  ,g6
14:15:29   8  ,gatt
14:15:29   9  ,gattn
14:15:29  10  ,trend
14:15:29  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
14:15:29  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
14:15:29  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
14:15:29  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
14:15:29  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
14:15:29  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
14:15:29  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
14:15:29  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
14:15:29  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
14:15:29  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
14:15:29  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
14:15:29  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
14:15:29  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
14:15:29  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
14:15:29  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
14:15:29  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
14:15:29  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
14:15:29  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
14:15:29  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
14:15:29  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
14:15:29  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
14:15:29  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
14:15:29  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
14:15:29  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
14:15:29  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
14:15:29  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
14:15:29  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
14:15:29  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
14:15:29  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
14:15:29  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
14:15:29  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
14:15:29  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
14:15:29  43  ,hh  att32
14:15:29  44  ,d   att33
14:15:29  45  ,w   att34
14:15:29  46  ,mpm att35
14:15:29  47  ,mph att36
14:15:29  48  ,trend att37
14:15:29  49  FROM svm6142
14:15:29  50  ORDER BY ydate
14:15:29  51  /

Table created.

Elapsed: 00:00:04.85
14:15:34 SQL> 
14:15:34 SQL> -- rpt
14:15:34 SQL> 
14:15:34 SQL> SELECT
14:15:34   2  pair
14:15:34   3  ,trend
14:15:34   4  ,gatt
14:15:34   5  ,COUNT(pair)
14:15:34   6  ,AVG(g6)
14:15:34   7  FROM svm6162
14:15:34   8  GROUP BY pair,trend,gatt
14:15:34   9  ORDER BY pair,trend,gatt
14:15:34  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6620 -.00220422
ech_usd 	-1 up	      3608 .003538093
ech_usd 	-1		63
ech_usd 	 1 nup	      6575 -.00229098
ech_usd 	 1 up	      2886 .003816993
ech_usd 	 1		 9

6 rows selected.

Elapsed: 00:00:00.03
14:15:34 SQL> 
14:15:34 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.20
14:15:34 SQL> CREATE TABLE modsrc COMPRESS AS
14:15:34   2  SELECT
14:15:34   3  pair
14:15:34   4  ,ydate
14:15:34   5  ,prdate
14:15:34   6  ,trend
14:15:34   7  ,g6
14:15:34   8  ,gatt
14:15:34   9  ,gattn
14:15:34  10  FROM svm6162
14:15:34  11  /

Table created.

Elapsed: 00:00:00.10
14:15:34 SQL> 
14:15:34 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
14:15:34 SQL> 
14:15:34 SQL> DROP   TABLE ech_ms610 ;

Table dropped.

Elapsed: 00:00:00.09
14:15:34 SQL> CREATE TABLE ech_ms610 COMPRESS AS
14:15:34   2  SELECT
14:15:34   3  ydate
14:15:34   4  ,trend ech_trend
14:15:34   5  ,g6    ech_g6
14:15:34   6  ,gatt  ech_gatt
14:15:34   7  ,gattn ech_gattn
14:15:34   8  FROM modsrc
14:15:34   9  /

Table created.

Elapsed: 00:00:00.08
14:15:34 SQL> 
14:15:34 SQL> ANALYZE TABLE ech_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.27
14:15:35 SQL> 
14:15:35 SQL> -- I need a copy of the attributes:
14:15:35 SQL> 
14:15:35 SQL> 
14:15:35 SQL> DROP   TABLE ech_att;

Table dropped.

Elapsed: 00:00:00.14
14:15:35 SQL> CREATE TABLE ech_att COMPRESS AS
14:15:35   2  SELECT
14:15:35   3  ydate
14:15:35   4  ,att00 ech_att00
14:15:35   5  ,att01 ech_att01
14:15:35   6  ,att02 ech_att02
14:15:35   7  ,att03 ech_att03
14:15:35   8  ,att04 ech_att04
14:15:35   9  ,att05 ech_att05
14:15:35  10  ,att06 ech_att06
14:15:35  11  ,att07 ech_att07
14:15:35  12  ,att08 ech_att08
14:15:35  13  ,att09 ech_att09
14:15:35  14  ,att10 ech_att10
14:15:35  15  ,att11 ech_att11
14:15:35  16  ,att12 ech_att12
14:15:35  17  ,att13 ech_att13
14:15:35  18  ,att14 ech_att14
14:15:35  19  ,att15 ech_att15
14:15:35  20  ,att16 ech_att16
14:15:35  21  ,att17 ech_att17
14:15:35  22  ,att18 ech_att18
14:15:35  23  ,att19 ech_att19
14:15:35  24  ,att20 ech_att20
14:15:35  25  ,att21 ech_att21
14:15:35  26  ,att22 ech_att22
14:15:35  27  ,att23 ech_att23
14:15:35  28  ,att24 ech_att24
14:15:35  29  ,att25 ech_att25
14:15:35  30  ,att26 ech_att26
14:15:35  31  ,att27 ech_att27
14:15:35  32  ,att28 ech_att28
14:15:35  33  ,att29 ech_att29
14:15:35  34  ,att30 ech_att30
14:15:35  35  ,att31 ech_att31
14:15:35  36  ,att32 ech_att32
14:15:35  37  ,att33 ech_att33
14:15:35  38  ,att34 ech_att34
14:15:35  39  ,att35 ech_att35
14:15:35  40  ,att36 ech_att36
14:15:35  41  ,att37 ech_att37
14:15:35  42  FROM svm6162
14:15:35  43  /

Table created.

Elapsed: 00:00:00.19
14:15:35 SQL> 
14:15:35 SQL> ANALYZE TABLE ech_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
14:15:35 SQL> 
14:15:35 SQL> -- rpt
14:15:35 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19761

Elapsed: 00:00:00.77
14:15:36 SQL> SELECT COUNT(*)FROM ech_att;

  COUNT(*)
----------
     19761

Elapsed: 00:00:00.00
14:15:36 SQL> 
14:15:36 SQL> --
14:15:36 SQL> -- ech610.sql
14:15:36 SQL> --
14:15:36 SQL> 
14:15:36 SQL> -- Creates views and tables for backtesting a forex SVM strategy
14:15:36 SQL> 
14:15:36 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.49
14:15:37 SQL> 
14:15:37 SQL> -- I created di5min here:
14:15:37 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
14:15:37 SQL> 
14:15:37 SQL> CREATE OR REPLACE VIEW svm6102 AS
14:15:37   2  SELECT
14:15:37   3  pair
14:15:37   4  ,ydate
14:15:37   5  ,prdate
14:15:37   6  ,rownum rnum -- acts as t in my time-series
14:15:37   7  ,clse
14:15:37   8  -- Derive a bunch of attributes from clse, the latest price:
14:15:37   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
14:15:37  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
14:15:37  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
14:15:37  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
14:15:37  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
14:15:37  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
14:15:37  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
14:15:37  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
14:15:37  17  --
14:15:37  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
14:15:37  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
14:15:37  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
14:15:37  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
14:15:37  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
14:15:37  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
14:15:37  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
14:15:37  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
14:15:37  26  --
14:15:37  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
14:15:37  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
14:15:37  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
14:15:37  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
14:15:37  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
14:15:37  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
14:15:37  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
14:15:37  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
14:15:37  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
14:15:37  36  FROM di5min WHERE pair LIKE'%ech%'
14:15:37  37  AND ydate > sysdate - 95
14:15:37  38  ORDER BY ydate
14:15:37  39  /

View created.

Elapsed: 00:00:00.05
14:15:37 SQL> 
14:15:37 SQL> -- rpt
14:15:37 SQL> 
14:15:37 SQL> SELECT
14:15:37   2  pair
14:15:37   3  ,COUNT(pair)
14:15:37   4  ,MIN(clse),MAX(clse)
14:15:37   5  ,MIN(avg6),MAX(avg6)
14:15:37   6  ,MIN(ydate),MAX(ydate)
14:15:37   7  FROM svm6102
14:15:37   8  GROUP BY pair
14:15:37   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ech_usd       19761 1.24213032 1.38284305 1.24477017 1.37986485 2010-09-26 20:55:01 2010-12-30 14:10:00

Elapsed: 00:00:00.79
14:15:37 SQL> 
14:15:37 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
14:15:37 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.24
14:15:38 SQL> CREATE TABLE svm6122 COMPRESS AS
14:15:38   2  SELECT
14:15:38   3  pair
14:15:38   4  ,ydate
14:15:38   5  ,prdate
14:15:38   6  ,clse
14:15:38   7  -- g6 is important. I want to predict g6:
14:15:38   8  ,ld6 - clse g6
14:15:38   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
14:15:38  10  -- I want more attributes from the ones I derived above:
14:15:38  11  -- clse relation to moving-min
14:15:38  12  ,clse-min4  cm4
14:15:38  13  ,clse-min6  cm6
14:15:38  14  ,clse-min8  cm8
14:15:38  15  ,clse-min10 cm10
14:15:38  16  ,clse-min12 cm12
14:15:38  17  ,clse-min14 cm14
14:15:38  18  ,clse-min16 cm16
14:15:38  19  ,clse-min18 cm18
14:15:38  20  -- clse relation to moving-avg
14:15:38  21  ,clse-avg4  ca4
14:15:38  22  ,clse-avg6  ca6
14:15:38  23  ,clse-avg8  ca8
14:15:38  24  ,clse-avg10 ca10
14:15:38  25  ,clse-avg12 ca12
14:15:38  26  ,clse-avg14 ca14
14:15:38  27  ,clse-avg16 ca16
14:15:38  28  ,clse-avg18 ca18
14:15:38  29  -- clse relation to moving-max
14:15:38  30  ,clse-max4  cx4
14:15:38  31  ,clse-max6  cx6
14:15:38  32  ,clse-max8  cx8
14:15:38  33  ,clse-max10 cx10
14:15:38  34  ,clse-max12 cx12
14:15:38  35  ,clse-max14 cx14
14:15:38  36  ,clse-max16 cx16
14:15:38  37  ,clse-max18 cx18
14:15:38  38  -- Derive more attributes.
14:15:38  39  -- I want to use CORR() here to help SVM see the shape of the series.
14:15:38  40  -- But COVAR_POP is more stable:
14:15:38  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
14:15:38  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
14:15:38  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
14:15:38  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
14:15:38  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
14:15:38  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
14:15:38  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
14:15:38  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
14:15:38  49  -- Derive date related attributes:
14:15:38  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
14:15:38  51  ,0+TO_CHAR(ydate,'D')d
14:15:38  52  ,0+TO_CHAR(ydate,'W')w
14:15:38  53  -- mpm stands for minutes-past-midnight:
14:15:38  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
14:15:38  55  -- mph stands for minutes-past-hour:
14:15:38  56  ,0+TO_CHAR(ydate,'MI')mph
14:15:38  57  FROM svm6102
14:15:38  58  ORDER BY ydate
14:15:38  59  /

Table created.

Elapsed: 00:00:02.06
14:15:40 SQL> 
14:15:40 SQL> -- rpt
14:15:40 SQL> 
14:15:40 SQL> SELECT
14:15:40   2  pair
14:15:40   3  ,COUNT(pair)
14:15:40   4  ,MIN(clse),MAX(clse)
14:15:40   5  ,MIN(ydate),MAX(ydate)
14:15:40   6  FROM svm6122
14:15:40   7  GROUP BY pair
14:15:40   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ech_usd       19761 1.24213032 1.38284305 2010-09-26 20:55:01 2010-12-30 14:10:00

Elapsed: 00:00:00.07
14:15:40 SQL> 
14:15:40 SQL> -- Prepare for derivation of NTILE based params:
14:15:40 SQL> 
14:15:40 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.28
14:15:40 SQL> CREATE TABLE svm6142 COMPRESS AS
14:15:40   2  SELECT
14:15:40   3  pair
14:15:40   4  ,ydate
14:15:40   5  ,prdate
14:15:40   6  ,clse
14:15:40   7  ,g6
14:15:40   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
14:15:40   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
14:15:40  10  ,CASE WHEN trend IS NULL THEN 1
14:15:40  11  	    WHEN trend =0      THEN 1
14:15:40  12  	    ELSE trend END trend
14:15:40  13  ,cm4
14:15:40  14  ,cm6
14:15:40  15  ,cm8
14:15:40  16  ,cm10
14:15:40  17  ,cm12
14:15:40  18  ,cm14
14:15:40  19  ,cm16
14:15:40  20  ,cm18
14:15:40  21  --
14:15:40  22  ,ca4
14:15:40  23  ,ca6
14:15:40  24  ,ca8
14:15:40  25  ,ca10
14:15:40  26  ,ca12
14:15:40  27  ,ca14
14:15:40  28  ,ca16
14:15:40  29  ,ca18
14:15:40  30  --
14:15:40  31  ,cx4
14:15:40  32  ,cx6
14:15:40  33  ,cx8
14:15:40  34  ,cx10
14:15:40  35  ,cx12
14:15:40  36  ,cx14
14:15:40  37  ,cx16
14:15:40  38  ,cx18
14:15:40  39  --
14:15:40  40  ,crr4
14:15:40  41  ,crr6
14:15:40  42  ,crr8
14:15:40  43  ,crr10
14:15:40  44  ,crr12
14:15:40  45  ,crr14
14:15:40  46  ,crr16
14:15:40  47  ,crr18
14:15:40  48  --
14:15:40  49  ,hh
14:15:40  50  ,d
14:15:40  51  ,w
14:15:40  52  ,mpm
14:15:40  53  ,mph
14:15:40  54  FROM svm6122
14:15:40  55  ORDER BY ydate
14:15:40  56  /

Table created.

Elapsed: 00:00:00.38
14:15:41 SQL> 
14:15:41 SQL> -- rpt
14:15:41 SQL> 
14:15:41 SQL> SELECT
14:15:41   2  pair
14:15:41   3  ,trend
14:15:41   4  ,gatt
14:15:41   5  ,COUNT(pair)
14:15:41   6  ,AVG(g6)
14:15:41   7  FROM svm6142
14:15:41   8  GROUP BY pair,trend,gatt
14:15:41   9  ORDER BY pair,trend,gatt
14:15:41  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6620 -.00220422
ech_usd 	-1 up	      3608 .003538093
ech_usd 	-1		63
ech_usd 	 1 nup	      6575 -.00229098
ech_usd 	 1 up	      2886 .003816993
ech_usd 	 1		 9

6 rows selected.

Elapsed: 00:00:00.04
14:15:41 SQL> 
14:15:41 SQL> 
14:15:41 SQL> -- Derive NTILE based params:
14:15:41 SQL> 
14:15:41 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.19
14:15:41 SQL> CREATE TABLE svm6162 COMPRESS AS
14:15:41   2  SELECT
14:15:41   3  pair
14:15:41   4  ,ydate
14:15:41   5  ,prdate
14:15:41   6  ,clse
14:15:41   7  ,g6
14:15:41   8  ,gatt
14:15:41   9  ,gattn
14:15:41  10  ,trend
14:15:41  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
14:15:41  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
14:15:41  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
14:15:41  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
14:15:41  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
14:15:41  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
14:15:41  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
14:15:41  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
14:15:41  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
14:15:41  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
14:15:41  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
14:15:41  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
14:15:41  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
14:15:41  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
14:15:41  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
14:15:41  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
14:15:41  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
14:15:41  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
14:15:41  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
14:15:41  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
14:15:41  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
14:15:41  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
14:15:41  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
14:15:41  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
14:15:41  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
14:15:41  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
14:15:41  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
14:15:41  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
14:15:41  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
14:15:41  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
14:15:41  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
14:15:41  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
14:15:41  43  ,hh  att32
14:15:41  44  ,d   att33
14:15:41  45  ,w   att34
14:15:41  46  ,mpm att35
14:15:41  47  ,mph att36
14:15:41  48  ,trend att37
14:15:41  49  FROM svm6142
14:15:41  50  ORDER BY ydate
14:15:41  51  /

Table created.

Elapsed: 00:00:04.88
14:15:46 SQL> 
14:15:46 SQL> -- rpt
14:15:46 SQL> 
14:15:46 SQL> SELECT
14:15:46   2  pair
14:15:46   3  ,trend
14:15:46   4  ,gatt
14:15:46   5  ,COUNT(pair)
14:15:46   6  ,AVG(g6)
14:15:46   7  FROM svm6162
14:15:46   8  GROUP BY pair,trend,gatt
14:15:46   9  ORDER BY pair,trend,gatt
14:15:46  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6620 -.00220422
ech_usd 	-1 up	      3608 .003538093
ech_usd 	-1		63
ech_usd 	 1 nup	      6575 -.00229098
ech_usd 	 1 up	      2886 .003816993
ech_usd 	 1		 9

6 rows selected.

Elapsed: 00:00:00.03
14:15:46 SQL> 
14:15:46 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.21
14:15:46 SQL> CREATE TABLE modsrc COMPRESS AS
14:15:46   2  SELECT
14:15:46   3  pair
14:15:46   4  ,ydate
14:15:46   5  ,prdate
14:15:46   6  ,trend
14:15:46   7  ,g6
14:15:46   8  ,gatt
14:15:46   9  ,gattn
14:15:46  10  FROM svm6162
14:15:46  11  /

Table created.

Elapsed: 00:00:00.09
14:15:46 SQL> 
14:15:46 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
14:15:46 SQL> 
14:15:46 SQL> DROP   TABLE ech_ms610 ;

Table dropped.

Elapsed: 00:00:00.10
14:15:46 SQL> CREATE TABLE ech_ms610 COMPRESS AS
14:15:46   2  SELECT
14:15:46   3  ydate
14:15:46   4  ,trend ech_trend
14:15:46   5  ,g6    ech_g6
14:15:46   6  ,gatt  ech_gatt
14:15:46   7  ,gattn ech_gattn
14:15:46   8  FROM modsrc
14:15:46   9  /

Table created.

Elapsed: 00:00:00.08
14:15:46 SQL> 
14:15:46 SQL> ANALYZE TABLE ech_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
14:15:47 SQL> 
14:15:47 SQL> -- I need a copy of the attributes:
14:15:47 SQL> 
14:15:47 SQL> 
14:15:47 SQL> DROP   TABLE ech_att;

Table dropped.

Elapsed: 00:00:00.20
14:15:47 SQL> CREATE TABLE ech_att COMPRESS AS
14:15:47   2  SELECT
14:15:47   3  ydate
14:15:47   4  ,att00 ech_att00
14:15:47   5  ,att01 ech_att01
14:15:47   6  ,att02 ech_att02
14:15:47   7  ,att03 ech_att03
14:15:47   8  ,att04 ech_att04
14:15:47   9  ,att05 ech_att05
14:15:47  10  ,att06 ech_att06
14:15:47  11  ,att07 ech_att07
14:15:47  12  ,att08 ech_att08
14:15:47  13  ,att09 ech_att09
14:15:47  14  ,att10 ech_att10
14:15:47  15  ,att11 ech_att11
14:15:47  16  ,att12 ech_att12
14:15:47  17  ,att13 ech_att13
14:15:47  18  ,att14 ech_att14
14:15:47  19  ,att15 ech_att15
14:15:47  20  ,att16 ech_att16
14:15:47  21  ,att17 ech_att17
14:15:47  22  ,att18 ech_att18
14:15:47  23  ,att19 ech_att19
14:15:47  24  ,att20 ech_att20
14:15:47  25  ,att21 ech_att21
14:15:47  26  ,att22 ech_att22
14:15:47  27  ,att23 ech_att23
14:15:47  28  ,att24 ech_att24
14:15:47  29  ,att25 ech_att25
14:15:47  30  ,att26 ech_att26
14:15:47  31  ,att27 ech_att27
14:15:47  32  ,att28 ech_att28
14:15:47  33  ,att29 ech_att29
14:15:47  34  ,att30 ech_att30
14:15:47  35  ,att31 ech_att31
14:15:47  36  ,att32 ech_att32
14:15:47  37  ,att33 ech_att33
14:15:47  38  ,att34 ech_att34
14:15:47  39  ,att35 ech_att35
14:15:47  40  ,att36 ech_att36
14:15:47  41  ,att37 ech_att37
14:15:47  42  FROM svm6162
14:15:47  43  /

Table created.

Elapsed: 00:00:00.17
14:15:47 SQL> 
14:15:47 SQL> ANALYZE TABLE ech_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
14:15:47 SQL> 
14:15:47 SQL> -- rpt
14:15:47 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19761

Elapsed: 00:00:00.80
14:15:48 SQL> SELECT COUNT(*)FROM ech_att;

  COUNT(*)
----------
     19761

Elapsed: 00:00:00.00
14:15:48 SQL> 
14:15:48 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
