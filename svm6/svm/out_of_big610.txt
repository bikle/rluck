
SQL*Plus: Release 11.2.0.1.0 Production on Mon Jan 3 06:15:48 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

06:15:48 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
06:15:48 SQL> 06:15:48 SQL> --
06:15:48 SQL> -- eur610.sql
06:15:48 SQL> --
06:15:48 SQL> 
06:15:48 SQL> -- Creates views and tables for backtesting a forex SVM strategy
06:15:48 SQL> 
06:15:48 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.02
06:15:48 SQL> 
06:15:48 SQL> -- I created di5min here:
06:15:48 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
06:15:48 SQL> 
06:15:48 SQL> CREATE OR REPLACE VIEW svm6102 AS
06:15:48   2  SELECT
06:15:48   3  pair
06:15:48   4  ,ydate
06:15:48   5  ,prdate
06:15:48   6  ,rownum rnum -- acts as t in my time-series
06:15:48   7  ,clse
06:15:48   8  -- Derive a bunch of attributes from clse, the latest price:
06:15:48   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
06:15:48  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
06:15:48  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
06:15:48  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
06:15:48  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
06:15:48  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
06:15:48  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
06:15:48  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
06:15:48  17  --
06:15:48  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
06:15:48  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
06:15:48  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
06:15:48  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
06:15:48  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
06:15:48  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
06:15:48  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
06:15:48  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
06:15:48  26  --
06:15:48  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
06:15:48  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
06:15:48  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
06:15:48  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
06:15:48  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
06:15:48  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
06:15:48  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
06:15:48  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
06:15:48  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
06:15:48  36  FROM di5min WHERE pair LIKE'%eur%'
06:15:48  37  AND ydate > sysdate - 95
06:15:48  38  ORDER BY ydate
06:15:48  39  /

View created.

Elapsed: 00:00:00.09
06:15:48 SQL> 
06:15:48 SQL> -- rpt
06:15:48 SQL> 
06:15:48 SQL> SELECT
06:15:48   2  pair
06:15:48   3  ,COUNT(pair)
06:15:48   4  ,MIN(clse),MAX(clse)
06:15:48   5  ,MIN(avg6),MAX(avg6)
06:15:48   6  ,MIN(ydate),MAX(ydate)
06:15:48   7  FROM svm6102
06:15:48   8  GROUP BY pair
06:15:48   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_usd       19259    1.29735	   1.4273 1.29875103 1.42436233 2010-09-30 06:20:01 2011-01-03 06:10:00

Elapsed: 00:00:00.87
06:15:49 SQL> 
06:15:49 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
06:15:49 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.09
06:15:49 SQL> CREATE TABLE svm6122 COMPRESS AS
06:15:49   2  SELECT
06:15:49   3  pair
06:15:49   4  ,ydate
06:15:49   5  ,prdate
06:15:49   6  ,clse
06:15:49   7  -- g6 is important. I want to predict g6:
06:15:49   8  ,ld6 - clse g6
06:15:49   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
06:15:49  10  -- I want more attributes from the ones I derived above:
06:15:49  11  -- clse relation to moving-min
06:15:49  12  ,clse-min4  cm4
06:15:49  13  ,clse-min6  cm6
06:15:49  14  ,clse-min8  cm8
06:15:49  15  ,clse-min10 cm10
06:15:49  16  ,clse-min12 cm12
06:15:49  17  ,clse-min14 cm14
06:15:49  18  ,clse-min16 cm16
06:15:49  19  ,clse-min18 cm18
06:15:49  20  -- clse relation to moving-avg
06:15:49  21  ,clse-avg4  ca4
06:15:49  22  ,clse-avg6  ca6
06:15:49  23  ,clse-avg8  ca8
06:15:49  24  ,clse-avg10 ca10
06:15:49  25  ,clse-avg12 ca12
06:15:49  26  ,clse-avg14 ca14
06:15:49  27  ,clse-avg16 ca16
06:15:49  28  ,clse-avg18 ca18
06:15:49  29  -- clse relation to moving-max
06:15:49  30  ,clse-max4  cx4
06:15:49  31  ,clse-max6  cx6
06:15:49  32  ,clse-max8  cx8
06:15:49  33  ,clse-max10 cx10
06:15:49  34  ,clse-max12 cx12
06:15:49  35  ,clse-max14 cx14
06:15:49  36  ,clse-max16 cx16
06:15:49  37  ,clse-max18 cx18
06:15:49  38  -- Derive more attributes.
06:15:49  39  -- I want to use CORR() here to help SVM see the shape of the series.
06:15:49  40  -- But COVAR_POP is more stable:
06:15:49  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
06:15:49  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
06:15:49  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
06:15:49  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
06:15:49  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
06:15:49  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
06:15:49  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
06:15:49  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
06:15:49  49  -- Derive date related attributes:
06:15:49  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
06:15:49  51  ,0+TO_CHAR(ydate,'D')d
06:15:49  52  ,0+TO_CHAR(ydate,'W')w
06:15:49  53  -- mpm stands for minutes-past-midnight:
06:15:49  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
06:15:49  55  -- mph stands for minutes-past-hour:
06:15:49  56  ,0+TO_CHAR(ydate,'MI')mph
06:15:49  57  FROM svm6102
06:15:49  58  ORDER BY ydate
06:15:49  59  /

Table created.

Elapsed: 00:00:02.34
06:15:51 SQL> 
06:15:51 SQL> -- rpt
06:15:51 SQL> 
06:15:51 SQL> SELECT
06:15:51   2  pair
06:15:51   3  ,COUNT(pair)
06:15:51   4  ,MIN(clse),MAX(clse)
06:15:51   5  ,MIN(ydate),MAX(ydate)
06:15:51   6  FROM svm6122
06:15:51   7  GROUP BY pair
06:15:51   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_usd       19259    1.29735	   1.4273 2010-09-30 06:20:01 2011-01-03 06:10:00

Elapsed: 00:00:00.05
06:15:51 SQL> 
06:15:51 SQL> -- Prepare for derivation of NTILE based params:
06:15:51 SQL> 
06:15:51 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:01.36
06:15:52 SQL> CREATE TABLE svm6142 COMPRESS AS
06:15:52   2  SELECT
06:15:52   3  pair
06:15:52   4  ,ydate
06:15:52   5  ,prdate
06:15:52   6  ,clse
06:15:52   7  ,g6
06:15:52   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
06:15:52   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
06:15:52  10  ,CASE WHEN trend IS NULL THEN 1
06:15:52  11  	    WHEN trend =0      THEN 1
06:15:52  12  	    ELSE trend END trend
06:15:52  13  ,cm4
06:15:52  14  ,cm6
06:15:52  15  ,cm8
06:15:52  16  ,cm10
06:15:52  17  ,cm12
06:15:52  18  ,cm14
06:15:52  19  ,cm16
06:15:52  20  ,cm18
06:15:52  21  --
06:15:52  22  ,ca4
06:15:52  23  ,ca6
06:15:52  24  ,ca8
06:15:52  25  ,ca10
06:15:52  26  ,ca12
06:15:52  27  ,ca14
06:15:52  28  ,ca16
06:15:52  29  ,ca18
06:15:52  30  --
06:15:52  31  ,cx4
06:15:52  32  ,cx6
06:15:52  33  ,cx8
06:15:52  34  ,cx10
06:15:52  35  ,cx12
06:15:52  36  ,cx14
06:15:52  37  ,cx16
06:15:52  38  ,cx18
06:15:52  39  --
06:15:52  40  ,crr4
06:15:52  41  ,crr6
06:15:52  42  ,crr8
06:15:52  43  ,crr10
06:15:52  44  ,crr12
06:15:52  45  ,crr14
06:15:52  46  ,crr16
06:15:52  47  ,crr18
06:15:52  48  --
06:15:52  49  ,hh
06:15:52  50  ,d
06:15:52  51  ,w
06:15:52  52  ,mpm
06:15:52  53  ,mph
06:15:52  54  FROM svm6122
06:15:52  55  ORDER BY ydate
06:15:52  56  /

Table created.

Elapsed: 00:00:00.38
06:15:53 SQL> 
06:15:53 SQL> -- rpt
06:15:53 SQL> 
06:15:53 SQL> SELECT
06:15:53   2  pair
06:15:53   3  ,trend
06:15:53   4  ,gatt
06:15:53   5  ,COUNT(pair)
06:15:53   6  ,AVG(g6)
06:15:53   7  FROM svm6142
06:15:53   8  GROUP BY pair,trend,gatt
06:15:53   9  ORDER BY pair,trend,gatt
06:15:53  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      5990 -.00315665
eur_usd 	-1 up	      3521 .004465773
eur_usd 	-1		72
eur_usd 	 1 nup	      5851 -.00317328
eur_usd 	 1 up	      3825 .005058438

Elapsed: 00:00:00.04
06:15:53 SQL> 
06:15:53 SQL> 
06:15:53 SQL> -- Derive NTILE based params:
06:15:53 SQL> 
06:15:53 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:01.35
06:15:54 SQL> CREATE TABLE svm6162 COMPRESS AS
06:15:54   2  SELECT
06:15:54   3  pair
06:15:54   4  ,ydate
06:15:54   5  ,prdate
06:15:54   6  ,clse
06:15:54   7  ,g6
06:15:54   8  ,gatt
06:15:54   9  ,gattn
06:15:54  10  ,trend
06:15:54  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
06:15:54  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
06:15:54  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
06:15:54  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
06:15:54  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
06:15:54  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
06:15:54  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
06:15:54  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
06:15:54  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
06:15:54  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
06:15:54  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
06:15:54  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
06:15:54  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
06:15:54  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
06:15:54  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
06:15:54  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
06:15:54  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
06:15:54  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
06:15:54  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
06:15:54  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
06:15:54  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
06:15:54  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
06:15:54  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
06:15:54  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
06:15:54  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
06:15:54  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
06:15:54  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
06:15:54  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
06:15:54  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
06:15:54  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
06:15:54  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
06:15:54  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
06:15:54  43  ,hh  att32
06:15:54  44  ,d   att33
06:15:54  45  ,w   att34
06:15:54  46  ,mpm att35
06:15:54  47  ,mph att36
06:15:54  48  ,trend att37
06:15:54  49  FROM svm6142
06:15:54  50  ORDER BY ydate
06:15:54  51  /

Table created.

Elapsed: 00:00:04.65
06:15:59 SQL> 
06:15:59 SQL> -- rpt
06:15:59 SQL> 
06:15:59 SQL> SELECT
06:15:59   2  pair
06:15:59   3  ,trend
06:15:59   4  ,gatt
06:15:59   5  ,COUNT(pair)
06:15:59   6  ,AVG(g6)
06:15:59   7  FROM svm6162
06:15:59   8  GROUP BY pair,trend,gatt
06:15:59   9  ORDER BY pair,trend,gatt
06:15:59  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      5990 -.00315665
eur_usd 	-1 up	      3521 .004465773
eur_usd 	-1		72
eur_usd 	 1 nup	      5851 -.00317328
eur_usd 	 1 up	      3825 .005058438

Elapsed: 00:00:00.03
06:15:59 SQL> 
06:15:59 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.32
06:15:59 SQL> CREATE TABLE modsrc COMPRESS AS
06:15:59   2  SELECT
06:15:59   3  pair
06:15:59   4  ,ydate
06:15:59   5  ,prdate
06:15:59   6  ,trend
06:15:59   7  ,g6
06:15:59   8  ,gatt
06:15:59   9  ,gattn
06:15:59  10  FROM svm6162
06:15:59  11  /

Table created.

Elapsed: 00:00:00.09
06:15:59 SQL> 
06:15:59 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.31
06:16:00 SQL> 
06:16:00 SQL> DROP   TABLE eur_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
06:16:00 SQL> CREATE TABLE eur_ms610 COMPRESS AS
06:16:00   2  SELECT
06:16:00   3  ydate
06:16:00   4  ,trend eur_trend
06:16:00   5  ,g6    eur_g6
06:16:00   6  ,gatt  eur_gatt
06:16:00   7  ,gattn eur_gattn
06:16:00   8  FROM modsrc
06:16:00   9  /

Table created.

Elapsed: 00:00:00.07
06:16:00 SQL> 
06:16:00 SQL> ANALYZE TABLE eur_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
06:16:00 SQL> 
06:16:00 SQL> -- I need a copy of the attributes:
06:16:00 SQL> 
06:16:00 SQL> 
06:16:00 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.16
06:16:00 SQL> CREATE TABLE eur_att COMPRESS AS
06:16:00   2  SELECT
06:16:00   3  ydate
06:16:00   4  ,att00 eur_att00
06:16:00   5  ,att01 eur_att01
06:16:00   6  ,att02 eur_att02
06:16:00   7  ,att03 eur_att03
06:16:00   8  ,att04 eur_att04
06:16:00   9  ,att05 eur_att05
06:16:00  10  ,att06 eur_att06
06:16:00  11  ,att07 eur_att07
06:16:00  12  ,att08 eur_att08
06:16:00  13  ,att09 eur_att09
06:16:00  14  ,att10 eur_att10
06:16:00  15  ,att11 eur_att11
06:16:00  16  ,att12 eur_att12
06:16:00  17  ,att13 eur_att13
06:16:00  18  ,att14 eur_att14
06:16:00  19  ,att15 eur_att15
06:16:00  20  ,att16 eur_att16
06:16:00  21  ,att17 eur_att17
06:16:00  22  ,att18 eur_att18
06:16:00  23  ,att19 eur_att19
06:16:00  24  ,att20 eur_att20
06:16:00  25  ,att21 eur_att21
06:16:00  26  ,att22 eur_att22
06:16:00  27  ,att23 eur_att23
06:16:00  28  ,att24 eur_att24
06:16:00  29  ,att25 eur_att25
06:16:00  30  ,att26 eur_att26
06:16:00  31  ,att27 eur_att27
06:16:00  32  ,att28 eur_att28
06:16:00  33  ,att29 eur_att29
06:16:00  34  ,att30 eur_att30
06:16:00  35  ,att31 eur_att31
06:16:00  36  ,att32 eur_att32
06:16:00  37  ,att33 eur_att33
06:16:00  38  ,att34 eur_att34
06:16:00  39  ,att35 eur_att35
06:16:00  40  ,att36 eur_att36
06:16:00  41  ,att37 eur_att37
06:16:00  42  FROM svm6162
06:16:00  43  /

Table created.

Elapsed: 00:00:00.20
06:16:00 SQL> 
06:16:00 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.44
06:16:01 SQL> 
06:16:01 SQL> -- rpt
06:16:01 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19259

Elapsed: 00:00:00.86
06:16:02 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     19259

Elapsed: 00:00:00.00
06:16:02 SQL> 
06:16:02 SQL> --
06:16:02 SQL> -- aud610.sql
06:16:02 SQL> --
06:16:02 SQL> 
06:16:02 SQL> -- Creates views and tables for backtesting a forex SVM strategy
06:16:02 SQL> 
06:16:02 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.59
06:16:02 SQL> 
06:16:02 SQL> -- I created di5min here:
06:16:02 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
06:16:02 SQL> 
06:16:02 SQL> CREATE OR REPLACE VIEW svm6102 AS
06:16:02   2  SELECT
06:16:02   3  pair
06:16:02   4  ,ydate
06:16:02   5  ,prdate
06:16:02   6  ,rownum rnum -- acts as t in my time-series
06:16:02   7  ,clse
06:16:02   8  -- Derive a bunch of attributes from clse, the latest price:
06:16:02   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
06:16:02  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
06:16:02  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
06:16:02  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
06:16:02  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
06:16:02  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
06:16:02  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
06:16:02  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
06:16:02  17  --
06:16:02  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
06:16:02  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
06:16:02  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
06:16:02  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
06:16:02  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
06:16:02  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
06:16:02  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
06:16:02  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
06:16:02  26  --
06:16:02  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
06:16:02  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
06:16:02  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
06:16:02  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
06:16:02  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
06:16:02  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
06:16:02  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
06:16:02  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
06:16:02  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
06:16:02  36  FROM di5min WHERE pair LIKE'%aud%'
06:16:02  37  AND ydate > sysdate - 95
06:16:02  38  ORDER BY ydate
06:16:02  39  /

View created.

Elapsed: 00:00:00.05
06:16:02 SQL> 
06:16:02 SQL> -- rpt
06:16:02 SQL> 
06:16:02 SQL> SELECT
06:16:02   2  pair
06:16:02   3  ,COUNT(pair)
06:16:02   4  ,MIN(clse),MAX(clse)
06:16:02   5  ,MIN(avg6),MAX(avg6)
06:16:02   6  ,MIN(ydate),MAX(ydate)
06:16:02   7  FROM svm6102
06:16:02   8  GROUP BY pair
06:16:02   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
aud_usd       19256	.95405	  1.02495 .957141438 1.02284247 2010-09-30 06:20:01 2011-01-03 06:10:00

Elapsed: 00:00:00.86
06:16:03 SQL> 
06:16:03 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
06:16:03 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.29
06:16:03 SQL> CREATE TABLE svm6122 COMPRESS AS
06:16:03   2  SELECT
06:16:03   3  pair
06:16:03   4  ,ydate
06:16:03   5  ,prdate
06:16:03   6  ,clse
06:16:03   7  -- g6 is important. I want to predict g6:
06:16:03   8  ,ld6 - clse g6
06:16:03   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
06:16:03  10  -- I want more attributes from the ones I derived above:
06:16:03  11  -- clse relation to moving-min
06:16:03  12  ,clse-min4  cm4
06:16:03  13  ,clse-min6  cm6
06:16:03  14  ,clse-min8  cm8
06:16:03  15  ,clse-min10 cm10
06:16:03  16  ,clse-min12 cm12
06:16:03  17  ,clse-min14 cm14
06:16:03  18  ,clse-min16 cm16
06:16:03  19  ,clse-min18 cm18
06:16:03  20  -- clse relation to moving-avg
06:16:03  21  ,clse-avg4  ca4
06:16:03  22  ,clse-avg6  ca6
06:16:03  23  ,clse-avg8  ca8
06:16:03  24  ,clse-avg10 ca10
06:16:03  25  ,clse-avg12 ca12
06:16:03  26  ,clse-avg14 ca14
06:16:03  27  ,clse-avg16 ca16
06:16:03  28  ,clse-avg18 ca18
06:16:03  29  -- clse relation to moving-max
06:16:03  30  ,clse-max4  cx4
06:16:03  31  ,clse-max6  cx6
06:16:03  32  ,clse-max8  cx8
06:16:03  33  ,clse-max10 cx10
06:16:03  34  ,clse-max12 cx12
06:16:03  35  ,clse-max14 cx14
06:16:03  36  ,clse-max16 cx16
06:16:03  37  ,clse-max18 cx18
06:16:03  38  -- Derive more attributes.
06:16:03  39  -- I want to use CORR() here to help SVM see the shape of the series.
06:16:03  40  -- But COVAR_POP is more stable:
06:16:03  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
06:16:03  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
06:16:03  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
06:16:03  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
06:16:03  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
06:16:03  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
06:16:03  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
06:16:03  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
06:16:03  49  -- Derive date related attributes:
06:16:03  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
06:16:03  51  ,0+TO_CHAR(ydate,'D')d
06:16:03  52  ,0+TO_CHAR(ydate,'W')w
06:16:03  53  -- mpm stands for minutes-past-midnight:
06:16:03  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
06:16:03  55  -- mph stands for minutes-past-hour:
06:16:03  56  ,0+TO_CHAR(ydate,'MI')mph
06:16:03  57  FROM svm6102
06:16:03  58  ORDER BY ydate
06:16:03  59  /

Table created.

Elapsed: 00:00:02.13
06:16:06 SQL> 
06:16:06 SQL> -- rpt
06:16:06 SQL> 
06:16:06 SQL> SELECT
06:16:06   2  pair
06:16:06   3  ,COUNT(pair)
06:16:06   4  ,MIN(clse),MAX(clse)
06:16:06   5  ,MIN(ydate),MAX(ydate)
06:16:06   6  FROM svm6122
06:16:06   7  GROUP BY pair
06:16:06   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
aud_usd       19256	.95405	  1.02495 2010-09-30 06:20:01 2011-01-03 06:10:00

Elapsed: 00:00:00.04
06:16:06 SQL> 
06:16:06 SQL> -- Prepare for derivation of NTILE based params:
06:16:06 SQL> 
06:16:06 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.30
06:16:06 SQL> CREATE TABLE svm6142 COMPRESS AS
06:16:06   2  SELECT
06:16:06   3  pair
06:16:06   4  ,ydate
06:16:06   5  ,prdate
06:16:06   6  ,clse
06:16:06   7  ,g6
06:16:06   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
06:16:06   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
06:16:06  10  ,CASE WHEN trend IS NULL THEN 1
06:16:06  11  	    WHEN trend =0      THEN 1
06:16:06  12  	    ELSE trend END trend
06:16:06  13  ,cm4
06:16:06  14  ,cm6
06:16:06  15  ,cm8
06:16:06  16  ,cm10
06:16:06  17  ,cm12
06:16:06  18  ,cm14
06:16:06  19  ,cm16
06:16:06  20  ,cm18
06:16:06  21  --
06:16:06  22  ,ca4
06:16:06  23  ,ca6
06:16:06  24  ,ca8
06:16:06  25  ,ca10
06:16:06  26  ,ca12
06:16:06  27  ,ca14
06:16:06  28  ,ca16
06:16:06  29  ,ca18
06:16:06  30  --
06:16:06  31  ,cx4
06:16:06  32  ,cx6
06:16:06  33  ,cx8
06:16:06  34  ,cx10
06:16:06  35  ,cx12
06:16:06  36  ,cx14
06:16:06  37  ,cx16
06:16:06  38  ,cx18
06:16:06  39  --
06:16:06  40  ,crr4
06:16:06  41  ,crr6
06:16:06  42  ,crr8
06:16:06  43  ,crr10
06:16:06  44  ,crr12
06:16:06  45  ,crr14
06:16:06  46  ,crr16
06:16:06  47  ,crr18
06:16:06  48  --
06:16:06  49  ,hh
06:16:06  50  ,d
06:16:06  51  ,w
06:16:06  52  ,mpm
06:16:06  53  ,mph
06:16:06  54  FROM svm6122
06:16:06  55  ORDER BY ydate
06:16:06  56  /

Table created.

Elapsed: 00:00:00.37
06:16:06 SQL> 
06:16:06 SQL> -- rpt
06:16:06 SQL> 
06:16:06 SQL> SELECT
06:16:06   2  pair
06:16:06   3  ,trend
06:16:06   4  ,gatt
06:16:06   5  ,COUNT(pair)
06:16:06   6  ,AVG(g6)
06:16:06   7  FROM svm6142
06:16:06   8  GROUP BY pair,trend,gatt
06:16:06   9  ORDER BY pair,trend,gatt
06:16:06  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5062 -.00217255
aud_usd 	-1 up	      3718  .00375705
aud_usd 	-1		72
aud_usd 	 1 nup	      6712 -.00211603
aud_usd 	 1 up	      3692 .004036626

Elapsed: 00:00:00.07
06:16:06 SQL> 
06:16:06 SQL> 
06:16:06 SQL> -- Derive NTILE based params:
06:16:06 SQL> 
06:16:06 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.15
06:16:06 SQL> CREATE TABLE svm6162 COMPRESS AS
06:16:06   2  SELECT
06:16:06   3  pair
06:16:06   4  ,ydate
06:16:06   5  ,prdate
06:16:06   6  ,clse
06:16:06   7  ,g6
06:16:06   8  ,gatt
06:16:06   9  ,gattn
06:16:06  10  ,trend
06:16:06  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
06:16:06  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
06:16:06  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
06:16:06  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
06:16:06  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
06:16:06  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
06:16:06  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
06:16:06  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
06:16:06  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
06:16:06  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
06:16:06  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
06:16:06  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
06:16:06  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
06:16:06  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
06:16:06  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
06:16:06  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
06:16:06  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
06:16:06  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
06:16:06  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
06:16:06  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
06:16:06  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
06:16:06  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
06:16:06  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
06:16:06  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
06:16:06  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
06:16:06  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
06:16:06  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
06:16:06  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
06:16:06  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
06:16:06  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
06:16:06  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
06:16:06  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
06:16:06  43  ,hh  att32
06:16:06  44  ,d   att33
06:16:06  45  ,w   att34
06:16:06  46  ,mpm att35
06:16:06  47  ,mph att36
06:16:06  48  ,trend att37
06:16:06  49  FROM svm6142
06:16:06  50  ORDER BY ydate
06:16:06  51  /

Table created.

Elapsed: 00:00:04.61
06:16:11 SQL> 
06:16:11 SQL> -- rpt
06:16:11 SQL> 
06:16:11 SQL> SELECT
06:16:11   2  pair
06:16:11   3  ,trend
06:16:11   4  ,gatt
06:16:11   5  ,COUNT(pair)
06:16:11   6  ,AVG(g6)
06:16:11   7  FROM svm6162
06:16:11   8  GROUP BY pair,trend,gatt
06:16:11   9  ORDER BY pair,trend,gatt
06:16:11  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5062 -.00217255
aud_usd 	-1 up	      3718  .00375705
aud_usd 	-1		72
aud_usd 	 1 nup	      6712 -.00211603
aud_usd 	 1 up	      3692 .004036626

Elapsed: 00:00:00.03
06:16:11 SQL> 
06:16:11 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
06:16:11 SQL> CREATE TABLE modsrc COMPRESS AS
06:16:11   2  SELECT
06:16:11   3  pair
06:16:11   4  ,ydate
06:16:11   5  ,prdate
06:16:11   6  ,trend
06:16:11   7  ,g6
06:16:11   8  ,gatt
06:16:11   9  ,gattn
06:16:11  10  FROM svm6162
06:16:11  11  /

Table created.

Elapsed: 00:00:00.08
06:16:11 SQL> 
06:16:11 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
06:16:12 SQL> 
06:16:12 SQL> DROP   TABLE aud_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
06:16:12 SQL> CREATE TABLE aud_ms610 COMPRESS AS
06:16:12   2  SELECT
06:16:12   3  ydate
06:16:12   4  ,trend aud_trend
06:16:12   5  ,g6    aud_g6
06:16:12   6  ,gatt  aud_gatt
06:16:12   7  ,gattn aud_gattn
06:16:12   8  FROM modsrc
06:16:12   9  /

Table created.

Elapsed: 00:00:00.07
06:16:12 SQL> 
06:16:12 SQL> ANALYZE TABLE aud_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
06:16:12 SQL> 
06:16:12 SQL> -- I need a copy of the attributes:
06:16:12 SQL> 
06:16:12 SQL> 
06:16:12 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.13
06:16:12 SQL> CREATE TABLE aud_att COMPRESS AS
06:16:12   2  SELECT
06:16:12   3  ydate
06:16:12   4  ,att00 aud_att00
06:16:12   5  ,att01 aud_att01
06:16:12   6  ,att02 aud_att02
06:16:12   7  ,att03 aud_att03
06:16:12   8  ,att04 aud_att04
06:16:12   9  ,att05 aud_att05
06:16:12  10  ,att06 aud_att06
06:16:12  11  ,att07 aud_att07
06:16:12  12  ,att08 aud_att08
06:16:12  13  ,att09 aud_att09
06:16:12  14  ,att10 aud_att10
06:16:12  15  ,att11 aud_att11
06:16:12  16  ,att12 aud_att12
06:16:12  17  ,att13 aud_att13
06:16:12  18  ,att14 aud_att14
06:16:12  19  ,att15 aud_att15
06:16:12  20  ,att16 aud_att16
06:16:12  21  ,att17 aud_att17
06:16:12  22  ,att18 aud_att18
06:16:12  23  ,att19 aud_att19
06:16:12  24  ,att20 aud_att20
06:16:12  25  ,att21 aud_att21
06:16:12  26  ,att22 aud_att22
06:16:12  27  ,att23 aud_att23
06:16:12  28  ,att24 aud_att24
06:16:12  29  ,att25 aud_att25
06:16:12  30  ,att26 aud_att26
06:16:12  31  ,att27 aud_att27
06:16:12  32  ,att28 aud_att28
06:16:12  33  ,att29 aud_att29
06:16:12  34  ,att30 aud_att30
06:16:12  35  ,att31 aud_att31
06:16:12  36  ,att32 aud_att32
06:16:12  37  ,att33 aud_att33
06:16:12  38  ,att34 aud_att34
06:16:12  39  ,att35 aud_att35
06:16:12  40  ,att36 aud_att36
06:16:12  41  ,att37 aud_att37
06:16:12  42  FROM svm6162
06:16:12  43  /

Table created.

Elapsed: 00:00:00.17
06:16:12 SQL> 
06:16:12 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
06:16:13 SQL> 
06:16:13 SQL> -- rpt
06:16:13 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19256

Elapsed: 00:00:00.85
06:16:13 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     19256

Elapsed: 00:00:00.01
06:16:13 SQL> 
06:16:13 SQL> --
06:16:13 SQL> -- gbp610.sql
06:16:13 SQL> --
06:16:13 SQL> 
06:16:13 SQL> -- Creates views and tables for backtesting a forex SVM strategy
06:16:13 SQL> 
06:16:13 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.44
06:16:14 SQL> 
06:16:14 SQL> -- I created di5min here:
06:16:14 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
06:16:14 SQL> 
06:16:14 SQL> CREATE OR REPLACE VIEW svm6102 AS
06:16:14   2  SELECT
06:16:14   3  pair
06:16:14   4  ,ydate
06:16:14   5  ,prdate
06:16:14   6  ,rownum rnum -- acts as t in my time-series
06:16:14   7  ,clse
06:16:14   8  -- Derive a bunch of attributes from clse, the latest price:
06:16:14   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
06:16:14  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
06:16:14  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
06:16:14  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
06:16:14  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
06:16:14  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
06:16:14  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
06:16:14  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
06:16:14  17  --
06:16:14  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
06:16:14  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
06:16:14  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
06:16:14  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
06:16:14  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
06:16:14  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
06:16:14  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
06:16:14  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
06:16:14  26  --
06:16:14  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
06:16:14  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
06:16:14  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
06:16:14  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
06:16:14  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
06:16:14  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
06:16:14  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
06:16:14  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
06:16:14  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
06:16:14  36  FROM di5min WHERE pair LIKE'%gbp%'
06:16:14  37  AND ydate > sysdate - 95
06:16:14  38  ORDER BY ydate
06:16:14  39  /

View created.

Elapsed: 00:00:00.05
06:16:14 SQL> 
06:16:14 SQL> -- rpt
06:16:14 SQL> 
06:16:14 SQL> SELECT
06:16:14   2  pair
06:16:14   3  ,COUNT(pair)
06:16:14   4  ,MIN(clse),MAX(clse)
06:16:14   5  ,MIN(avg6),MAX(avg6)
06:16:14   6  ,MIN(ydate),MAX(ydate)
06:16:14   7  FROM svm6102
06:16:14   8  GROUP BY pair
06:16:14   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
gbp_usd       19258   1.535325	   1.6295 1.53696747 1.62716986 2010-09-30 06:20:01 2011-01-03 06:10:00

Elapsed: 00:00:00.90
06:16:15 SQL> 
06:16:15 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
06:16:15 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.26
06:16:15 SQL> CREATE TABLE svm6122 COMPRESS AS
06:16:15   2  SELECT
06:16:15   3  pair
06:16:15   4  ,ydate
06:16:15   5  ,prdate
06:16:15   6  ,clse
06:16:15   7  -- g6 is important. I want to predict g6:
06:16:15   8  ,ld6 - clse g6
06:16:15   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
06:16:15  10  -- I want more attributes from the ones I derived above:
06:16:15  11  -- clse relation to moving-min
06:16:15  12  ,clse-min4  cm4
06:16:15  13  ,clse-min6  cm6
06:16:15  14  ,clse-min8  cm8
06:16:15  15  ,clse-min10 cm10
06:16:15  16  ,clse-min12 cm12
06:16:15  17  ,clse-min14 cm14
06:16:15  18  ,clse-min16 cm16
06:16:15  19  ,clse-min18 cm18
06:16:15  20  -- clse relation to moving-avg
06:16:15  21  ,clse-avg4  ca4
06:16:15  22  ,clse-avg6  ca6
06:16:15  23  ,clse-avg8  ca8
06:16:15  24  ,clse-avg10 ca10
06:16:15  25  ,clse-avg12 ca12
06:16:15  26  ,clse-avg14 ca14
06:16:15  27  ,clse-avg16 ca16
06:16:15  28  ,clse-avg18 ca18
06:16:15  29  -- clse relation to moving-max
06:16:15  30  ,clse-max4  cx4
06:16:15  31  ,clse-max6  cx6
06:16:15  32  ,clse-max8  cx8
06:16:15  33  ,clse-max10 cx10
06:16:15  34  ,clse-max12 cx12
06:16:15  35  ,clse-max14 cx14
06:16:15  36  ,clse-max16 cx16
06:16:15  37  ,clse-max18 cx18
06:16:15  38  -- Derive more attributes.
06:16:15  39  -- I want to use CORR() here to help SVM see the shape of the series.
06:16:15  40  -- But COVAR_POP is more stable:
06:16:15  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
06:16:15  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
06:16:15  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
06:16:15  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
06:16:15  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
06:16:15  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
06:16:15  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
06:16:15  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
06:16:15  49  -- Derive date related attributes:
06:16:15  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
06:16:15  51  ,0+TO_CHAR(ydate,'D')d
06:16:15  52  ,0+TO_CHAR(ydate,'W')w
06:16:15  53  -- mpm stands for minutes-past-midnight:
06:16:15  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
06:16:15  55  -- mph stands for minutes-past-hour:
06:16:15  56  ,0+TO_CHAR(ydate,'MI')mph
06:16:15  57  FROM svm6102
06:16:15  58  ORDER BY ydate
06:16:15  59  /

Table created.

Elapsed: 00:00:02.01
06:16:17 SQL> 
06:16:17 SQL> -- rpt
06:16:17 SQL> 
06:16:17 SQL> SELECT
06:16:17   2  pair
06:16:17   3  ,COUNT(pair)
06:16:17   4  ,MIN(clse),MAX(clse)
06:16:17   5  ,MIN(ydate),MAX(ydate)
06:16:17   6  FROM svm6122
06:16:17   7  GROUP BY pair
06:16:17   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
gbp_usd       19258   1.535325	   1.6295 2010-09-30 06:20:01 2011-01-03 06:10:00

Elapsed: 00:00:00.04
06:16:17 SQL> 
06:16:17 SQL> -- Prepare for derivation of NTILE based params:
06:16:17 SQL> 
06:16:17 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.17
06:16:17 SQL> CREATE TABLE svm6142 COMPRESS AS
06:16:17   2  SELECT
06:16:17   3  pair
06:16:17   4  ,ydate
06:16:17   5  ,prdate
06:16:17   6  ,clse
06:16:17   7  ,g6
06:16:17   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
06:16:17   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
06:16:17  10  ,CASE WHEN trend IS NULL THEN 1
06:16:17  11  	    WHEN trend =0      THEN 1
06:16:17  12  	    ELSE trend END trend
06:16:17  13  ,cm4
06:16:17  14  ,cm6
06:16:17  15  ,cm8
06:16:17  16  ,cm10
06:16:17  17  ,cm12
06:16:17  18  ,cm14
06:16:17  19  ,cm16
06:16:17  20  ,cm18
06:16:17  21  --
06:16:17  22  ,ca4
06:16:17  23  ,ca6
06:16:17  24  ,ca8
06:16:17  25  ,ca10
06:16:17  26  ,ca12
06:16:17  27  ,ca14
06:16:17  28  ,ca16
06:16:17  29  ,ca18
06:16:17  30  --
06:16:17  31  ,cx4
06:16:17  32  ,cx6
06:16:17  33  ,cx8
06:16:17  34  ,cx10
06:16:17  35  ,cx12
06:16:17  36  ,cx14
06:16:17  37  ,cx16
06:16:17  38  ,cx18
06:16:17  39  --
06:16:17  40  ,crr4
06:16:17  41  ,crr6
06:16:17  42  ,crr8
06:16:17  43  ,crr10
06:16:17  44  ,crr12
06:16:17  45  ,crr14
06:16:17  46  ,crr16
06:16:17  47  ,crr18
06:16:17  48  --
06:16:17  49  ,hh
06:16:17  50  ,d
06:16:17  51  ,w
06:16:17  52  ,mpm
06:16:17  53  ,mph
06:16:17  54  FROM svm6122
06:16:17  55  ORDER BY ydate
06:16:17  56  /

Table created.

Elapsed: 00:00:00.36
06:16:18 SQL> 
06:16:18 SQL> -- rpt
06:16:18 SQL> 
06:16:18 SQL> SELECT
06:16:18   2  pair
06:16:18   3  ,trend
06:16:18   4  ,gatt
06:16:18   5  ,COUNT(pair)
06:16:18   6  ,AVG(g6)
06:16:18   7  FROM svm6142
06:16:18   8  GROUP BY pair,trend,gatt
06:16:18   9  ORDER BY pair,trend,gatt
06:16:18  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6140 -.00269121
gbp_usd 	-1 up	      3467 .004326269
gbp_usd 	-1		69
gbp_usd 	 1 nup	      6103 -.00270454
gbp_usd 	 1 up	      3476 .004505243
gbp_usd 	 1		 3

6 rows selected.

Elapsed: 00:00:00.08
06:16:18 SQL> 
06:16:18 SQL> 
06:16:18 SQL> -- Derive NTILE based params:
06:16:18 SQL> 
06:16:18 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.17
06:16:18 SQL> CREATE TABLE svm6162 COMPRESS AS
06:16:18   2  SELECT
06:16:18   3  pair
06:16:18   4  ,ydate
06:16:18   5  ,prdate
06:16:18   6  ,clse
06:16:18   7  ,g6
06:16:18   8  ,gatt
06:16:18   9  ,gattn
06:16:18  10  ,trend
06:16:18  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
06:16:18  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
06:16:18  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
06:16:18  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
06:16:18  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
06:16:18  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
06:16:18  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
06:16:18  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
06:16:18  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
06:16:18  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
06:16:18  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
06:16:18  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
06:16:18  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
06:16:18  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
06:16:18  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
06:16:18  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
06:16:18  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
06:16:18  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
06:16:18  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
06:16:18  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
06:16:18  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
06:16:18  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
06:16:18  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
06:16:18  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
06:16:18  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
06:16:18  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
06:16:18  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
06:16:18  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
06:16:18  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
06:16:18  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
06:16:18  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
06:16:18  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
06:16:18  43  ,hh  att32
06:16:18  44  ,d   att33
06:16:18  45  ,w   att34
06:16:18  46  ,mpm att35
06:16:18  47  ,mph att36
06:16:18  48  ,trend att37
06:16:18  49  FROM svm6142
06:16:18  50  ORDER BY ydate
06:16:18  51  /

Table created.

Elapsed: 00:00:04.84
06:16:23 SQL> 
06:16:23 SQL> -- rpt
06:16:23 SQL> 
06:16:23 SQL> SELECT
06:16:23   2  pair
06:16:23   3  ,trend
06:16:23   4  ,gatt
06:16:23   5  ,COUNT(pair)
06:16:23   6  ,AVG(g6)
06:16:23   7  FROM svm6162
06:16:23   8  GROUP BY pair,trend,gatt
06:16:23   9  ORDER BY pair,trend,gatt
06:16:23  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6140 -.00269121
gbp_usd 	-1 up	      3467 .004326269
gbp_usd 	-1		69
gbp_usd 	 1 nup	      6103 -.00270454
gbp_usd 	 1 up	      3476 .004505243
gbp_usd 	 1		 3

6 rows selected.

Elapsed: 00:00:00.02
06:16:23 SQL> 
06:16:23 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
06:16:23 SQL> CREATE TABLE modsrc COMPRESS AS
06:16:23   2  SELECT
06:16:23   3  pair
06:16:23   4  ,ydate
06:16:23   5  ,prdate
06:16:23   6  ,trend
06:16:23   7  ,g6
06:16:23   8  ,gatt
06:16:23   9  ,gattn
06:16:23  10  FROM svm6162
06:16:23  11  /

Table created.

Elapsed: 00:00:00.09
06:16:23 SQL> 
06:16:23 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
06:16:23 SQL> 
06:16:23 SQL> DROP   TABLE gbp_ms610 ;

Table dropped.

Elapsed: 00:00:00.07
06:16:23 SQL> CREATE TABLE gbp_ms610 COMPRESS AS
06:16:23   2  SELECT
06:16:23   3  ydate
06:16:23   4  ,trend gbp_trend
06:16:23   5  ,g6    gbp_g6
06:16:23   6  ,gatt  gbp_gatt
06:16:23   7  ,gattn gbp_gattn
06:16:23   8  FROM modsrc
06:16:23   9  /

Table created.

Elapsed: 00:00:00.07
06:16:23 SQL> 
06:16:23 SQL> ANALYZE TABLE gbp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
06:16:23 SQL> 
06:16:23 SQL> -- I need a copy of the attributes:
06:16:23 SQL> 
06:16:23 SQL> 
06:16:23 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.05
06:16:24 SQL> CREATE TABLE gbp_att COMPRESS AS
06:16:24   2  SELECT
06:16:24   3  ydate
06:16:24   4  ,att00 gbp_att00
06:16:24   5  ,att01 gbp_att01
06:16:24   6  ,att02 gbp_att02
06:16:24   7  ,att03 gbp_att03
06:16:24   8  ,att04 gbp_att04
06:16:24   9  ,att05 gbp_att05
06:16:24  10  ,att06 gbp_att06
06:16:24  11  ,att07 gbp_att07
06:16:24  12  ,att08 gbp_att08
06:16:24  13  ,att09 gbp_att09
06:16:24  14  ,att10 gbp_att10
06:16:24  15  ,att11 gbp_att11
06:16:24  16  ,att12 gbp_att12
06:16:24  17  ,att13 gbp_att13
06:16:24  18  ,att14 gbp_att14
06:16:24  19  ,att15 gbp_att15
06:16:24  20  ,att16 gbp_att16
06:16:24  21  ,att17 gbp_att17
06:16:24  22  ,att18 gbp_att18
06:16:24  23  ,att19 gbp_att19
06:16:24  24  ,att20 gbp_att20
06:16:24  25  ,att21 gbp_att21
06:16:24  26  ,att22 gbp_att22
06:16:24  27  ,att23 gbp_att23
06:16:24  28  ,att24 gbp_att24
06:16:24  29  ,att25 gbp_att25
06:16:24  30  ,att26 gbp_att26
06:16:24  31  ,att27 gbp_att27
06:16:24  32  ,att28 gbp_att28
06:16:24  33  ,att29 gbp_att29
06:16:24  34  ,att30 gbp_att30
06:16:24  35  ,att31 gbp_att31
06:16:24  36  ,att32 gbp_att32
06:16:24  37  ,att33 gbp_att33
06:16:24  38  ,att34 gbp_att34
06:16:24  39  ,att35 gbp_att35
06:16:24  40  ,att36 gbp_att36
06:16:24  41  ,att37 gbp_att37
06:16:24  42  FROM svm6162
06:16:24  43  /

Table created.

Elapsed: 00:00:00.16
06:16:24 SQL> 
06:16:24 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.43
06:16:24 SQL> 
06:16:24 SQL> -- rpt
06:16:24 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19258

Elapsed: 00:00:00.83
06:16:25 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     19258

Elapsed: 00:00:00.00
06:16:25 SQL> 
06:16:25 SQL> --
06:16:25 SQL> -- jpy610.sql
06:16:25 SQL> --
06:16:25 SQL> 
06:16:25 SQL> -- Creates views and tables for backtesting a forex SVM strategy
06:16:25 SQL> 
06:16:25 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.43
06:16:25 SQL> 
06:16:25 SQL> -- I created di5min here:
06:16:25 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
06:16:25 SQL> 
06:16:25 SQL> CREATE OR REPLACE VIEW svm6102 AS
06:16:25   2  SELECT
06:16:25   3  pair
06:16:25   4  ,ydate
06:16:25   5  ,prdate
06:16:25   6  ,rownum rnum -- acts as t in my time-series
06:16:25   7  ,clse
06:16:25   8  -- Derive a bunch of attributes from clse, the latest price:
06:16:25   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
06:16:25  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
06:16:25  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
06:16:25  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
06:16:25  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
06:16:25  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
06:16:25  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
06:16:25  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
06:16:25  17  --
06:16:25  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
06:16:25  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
06:16:25  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
06:16:25  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
06:16:25  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
06:16:25  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
06:16:25  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
06:16:25  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
06:16:25  26  --
06:16:25  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
06:16:25  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
06:16:25  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
06:16:25  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
06:16:25  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
06:16:25  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
06:16:25  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
06:16:25  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
06:16:25  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
06:16:25  36  FROM di5min WHERE pair LIKE'%jpy%'
06:16:25  37  AND ydate > sysdate - 95
06:16:25  38  ORDER BY ydate
06:16:25  39  /

View created.

Elapsed: 00:00:00.06
06:16:25 SQL> 
06:16:25 SQL> -- rpt
06:16:25 SQL> 
06:16:25 SQL> SELECT
06:16:25   2  pair
06:16:25   3  ,COUNT(pair)
06:16:25   4  ,MIN(clse),MAX(clse)
06:16:25   5  ,MIN(avg6),MAX(avg6)
06:16:25   6  ,MIN(ydate),MAX(ydate)
06:16:25   7  FROM svm6102
06:16:25   8  GROUP BY pair
06:16:25   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_jpy       19256	 80.25	   84.485 80.3595205 84.3105479 2010-09-30 06:20:01 2011-01-03 06:10:00

Elapsed: 00:00:00.90
06:16:26 SQL> 
06:16:26 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
06:16:26 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.19
06:16:27 SQL> CREATE TABLE svm6122 COMPRESS AS
06:16:27   2  SELECT
06:16:27   3  pair
06:16:27   4  ,ydate
06:16:27   5  ,prdate
06:16:27   6  ,clse
06:16:27   7  -- g6 is important. I want to predict g6:
06:16:27   8  ,ld6 - clse g6
06:16:27   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
06:16:27  10  -- I want more attributes from the ones I derived above:
06:16:27  11  -- clse relation to moving-min
06:16:27  12  ,clse-min4  cm4
06:16:27  13  ,clse-min6  cm6
06:16:27  14  ,clse-min8  cm8
06:16:27  15  ,clse-min10 cm10
06:16:27  16  ,clse-min12 cm12
06:16:27  17  ,clse-min14 cm14
06:16:27  18  ,clse-min16 cm16
06:16:27  19  ,clse-min18 cm18
06:16:27  20  -- clse relation to moving-avg
06:16:27  21  ,clse-avg4  ca4
06:16:27  22  ,clse-avg6  ca6
06:16:27  23  ,clse-avg8  ca8
06:16:27  24  ,clse-avg10 ca10
06:16:27  25  ,clse-avg12 ca12
06:16:27  26  ,clse-avg14 ca14
06:16:27  27  ,clse-avg16 ca16
06:16:27  28  ,clse-avg18 ca18
06:16:27  29  -- clse relation to moving-max
06:16:27  30  ,clse-max4  cx4
06:16:27  31  ,clse-max6  cx6
06:16:27  32  ,clse-max8  cx8
06:16:27  33  ,clse-max10 cx10
06:16:27  34  ,clse-max12 cx12
06:16:27  35  ,clse-max14 cx14
06:16:27  36  ,clse-max16 cx16
06:16:27  37  ,clse-max18 cx18
06:16:27  38  -- Derive more attributes.
06:16:27  39  -- I want to use CORR() here to help SVM see the shape of the series.
06:16:27  40  -- But COVAR_POP is more stable:
06:16:27  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
06:16:27  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
06:16:27  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
06:16:27  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
06:16:27  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
06:16:27  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
06:16:27  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
06:16:27  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
06:16:27  49  -- Derive date related attributes:
06:16:27  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
06:16:27  51  ,0+TO_CHAR(ydate,'D')d
06:16:27  52  ,0+TO_CHAR(ydate,'W')w
06:16:27  53  -- mpm stands for minutes-past-midnight:
06:16:27  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
06:16:27  55  -- mph stands for minutes-past-hour:
06:16:27  56  ,0+TO_CHAR(ydate,'MI')mph
06:16:27  57  FROM svm6102
06:16:27  58  ORDER BY ydate
06:16:27  59  /

Table created.

Elapsed: 00:00:02.07
06:16:29 SQL> 
06:16:29 SQL> -- rpt
06:16:29 SQL> 
06:16:29 SQL> SELECT
06:16:29   2  pair
06:16:29   3  ,COUNT(pair)
06:16:29   4  ,MIN(clse),MAX(clse)
06:16:29   5  ,MIN(ydate),MAX(ydate)
06:16:29   6  FROM svm6122
06:16:29   7  GROUP BY pair
06:16:29   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_jpy       19256	 80.25	   84.485 2010-09-30 06:20:01 2011-01-03 06:10:00

Elapsed: 00:00:00.04
06:16:29 SQL> 
06:16:29 SQL> -- Prepare for derivation of NTILE based params:
06:16:29 SQL> 
06:16:29 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.19
06:16:29 SQL> CREATE TABLE svm6142 COMPRESS AS
06:16:29   2  SELECT
06:16:29   3  pair
06:16:29   4  ,ydate
06:16:29   5  ,prdate
06:16:29   6  ,clse
06:16:29   7  ,g6
06:16:29   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
06:16:29   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
06:16:29  10  ,CASE WHEN trend IS NULL THEN 1
06:16:29  11  	    WHEN trend =0      THEN 1
06:16:29  12  	    ELSE trend END trend
06:16:29  13  ,cm4
06:16:29  14  ,cm6
06:16:29  15  ,cm8
06:16:29  16  ,cm10
06:16:29  17  ,cm12
06:16:29  18  ,cm14
06:16:29  19  ,cm16
06:16:29  20  ,cm18
06:16:29  21  --
06:16:29  22  ,ca4
06:16:29  23  ,ca6
06:16:29  24  ,ca8
06:16:29  25  ,ca10
06:16:29  26  ,ca12
06:16:29  27  ,ca14
06:16:29  28  ,ca16
06:16:29  29  ,ca18
06:16:29  30  --
06:16:29  31  ,cx4
06:16:29  32  ,cx6
06:16:29  33  ,cx8
06:16:29  34  ,cx10
06:16:29  35  ,cx12
06:16:29  36  ,cx14
06:16:29  37  ,cx16
06:16:29  38  ,cx18
06:16:29  39  --
06:16:29  40  ,crr4
06:16:29  41  ,crr6
06:16:29  42  ,crr8
06:16:29  43  ,crr10
06:16:29  44  ,crr12
06:16:29  45  ,crr14
06:16:29  46  ,crr16
06:16:29  47  ,crr18
06:16:29  48  --
06:16:29  49  ,hh
06:16:29  50  ,d
06:16:29  51  ,w
06:16:29  52  ,mpm
06:16:29  53  ,mph
06:16:29  54  FROM svm6122
06:16:29  55  ORDER BY ydate
06:16:29  56  /

Table created.

Elapsed: 00:00:00.35
06:16:29 SQL> 
06:16:29 SQL> -- rpt
06:16:29 SQL> 
06:16:29 SQL> SELECT
06:16:29   2  pair
06:16:29   3  ,trend
06:16:29   4  ,gatt
06:16:29   5  ,COUNT(pair)
06:16:29   6  ,AVG(g6)
06:16:29   7  FROM svm6142
06:16:29   8  GROUP BY pair,trend,gatt
06:16:29   9  ORDER BY pair,trend,gatt
06:16:29  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5202 -.16565164
usd_jpy 	-1 up	      4862 .164889546
usd_jpy 	-1		 1
usd_jpy 	 1 nup	      4966 -.15569568
usd_jpy 	 1 up	      4154 .165693391
usd_jpy 	 1		71

6 rows selected.

Elapsed: 00:00:00.07
06:16:29 SQL> 
06:16:29 SQL> 
06:16:29 SQL> -- Derive NTILE based params:
06:16:29 SQL> 
06:16:29 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.17
06:16:29 SQL> CREATE TABLE svm6162 COMPRESS AS
06:16:29   2  SELECT
06:16:29   3  pair
06:16:29   4  ,ydate
06:16:29   5  ,prdate
06:16:29   6  ,clse
06:16:29   7  ,g6
06:16:29   8  ,gatt
06:16:29   9  ,gattn
06:16:29  10  ,trend
06:16:29  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
06:16:29  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
06:16:29  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
06:16:29  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
06:16:29  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
06:16:29  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
06:16:29  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
06:16:29  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
06:16:29  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
06:16:29  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
06:16:29  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
06:16:29  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
06:16:29  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
06:16:29  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
06:16:29  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
06:16:29  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
06:16:29  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
06:16:29  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
06:16:29  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
06:16:29  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
06:16:29  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
06:16:29  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
06:16:29  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
06:16:29  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
06:16:29  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
06:16:29  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
06:16:29  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
06:16:29  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
06:16:29  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
06:16:29  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
06:16:29  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
06:16:29  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
06:16:29  43  ,hh  att32
06:16:29  44  ,d   att33
06:16:29  45  ,w   att34
06:16:29  46  ,mpm att35
06:16:29  47  ,mph att36
06:16:29  48  ,trend att37
06:16:29  49  FROM svm6142
06:16:29  50  ORDER BY ydate
06:16:29  51  /

Table created.

Elapsed: 00:00:04.73
06:16:34 SQL> 
06:16:34 SQL> -- rpt
06:16:34 SQL> 
06:16:34 SQL> SELECT
06:16:34   2  pair
06:16:34   3  ,trend
06:16:34   4  ,gatt
06:16:34   5  ,COUNT(pair)
06:16:34   6  ,AVG(g6)
06:16:34   7  FROM svm6162
06:16:34   8  GROUP BY pair,trend,gatt
06:16:34   9  ORDER BY pair,trend,gatt
06:16:34  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5202 -.16565164
usd_jpy 	-1 up	      4862 .164889546
usd_jpy 	-1		 1
usd_jpy 	 1 nup	      4966 -.15569568
usd_jpy 	 1 up	      4154 .165693391
usd_jpy 	 1		71

6 rows selected.

Elapsed: 00:00:00.02
06:16:34 SQL> 
06:16:34 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.25
06:16:34 SQL> CREATE TABLE modsrc COMPRESS AS
06:16:34   2  SELECT
06:16:34   3  pair
06:16:34   4  ,ydate
06:16:34   5  ,prdate
06:16:34   6  ,trend
06:16:34   7  ,g6
06:16:34   8  ,gatt
06:16:34   9  ,gattn
06:16:34  10  FROM svm6162
06:16:34  11  /

Table created.

Elapsed: 00:00:00.10
06:16:35 SQL> 
06:16:35 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
06:16:35 SQL> 
06:16:35 SQL> DROP   TABLE jpy_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
06:16:35 SQL> CREATE TABLE jpy_ms610 COMPRESS AS
06:16:35   2  SELECT
06:16:35   3  ydate
06:16:35   4  ,trend jpy_trend
06:16:35   5  ,g6    jpy_g6
06:16:35   6  ,gatt  jpy_gatt
06:16:35   7  ,gattn jpy_gattn
06:16:35   8  FROM modsrc
06:16:35   9  /

Table created.

Elapsed: 00:00:00.08
06:16:35 SQL> 
06:16:35 SQL> ANALYZE TABLE jpy_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
06:16:35 SQL> 
06:16:35 SQL> -- I need a copy of the attributes:
06:16:35 SQL> 
06:16:35 SQL> 
06:16:35 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.05
06:16:35 SQL> CREATE TABLE jpy_att COMPRESS AS
06:16:35   2  SELECT
06:16:35   3  ydate
06:16:35   4  ,att00 jpy_att00
06:16:35   5  ,att01 jpy_att01
06:16:35   6  ,att02 jpy_att02
06:16:35   7  ,att03 jpy_att03
06:16:35   8  ,att04 jpy_att04
06:16:35   9  ,att05 jpy_att05
06:16:35  10  ,att06 jpy_att06
06:16:35  11  ,att07 jpy_att07
06:16:35  12  ,att08 jpy_att08
06:16:35  13  ,att09 jpy_att09
06:16:35  14  ,att10 jpy_att10
06:16:35  15  ,att11 jpy_att11
06:16:35  16  ,att12 jpy_att12
06:16:35  17  ,att13 jpy_att13
06:16:35  18  ,att14 jpy_att14
06:16:35  19  ,att15 jpy_att15
06:16:35  20  ,att16 jpy_att16
06:16:35  21  ,att17 jpy_att17
06:16:35  22  ,att18 jpy_att18
06:16:35  23  ,att19 jpy_att19
06:16:35  24  ,att20 jpy_att20
06:16:35  25  ,att21 jpy_att21
06:16:35  26  ,att22 jpy_att22
06:16:35  27  ,att23 jpy_att23
06:16:35  28  ,att24 jpy_att24
06:16:35  29  ,att25 jpy_att25
06:16:35  30  ,att26 jpy_att26
06:16:35  31  ,att27 jpy_att27
06:16:35  32  ,att28 jpy_att28
06:16:35  33  ,att29 jpy_att29
06:16:35  34  ,att30 jpy_att30
06:16:35  35  ,att31 jpy_att31
06:16:35  36  ,att32 jpy_att32
06:16:35  37  ,att33 jpy_att33
06:16:35  38  ,att34 jpy_att34
06:16:35  39  ,att35 jpy_att35
06:16:35  40  ,att36 jpy_att36
06:16:35  41  ,att37 jpy_att37
06:16:35  42  FROM svm6162
06:16:35  43  /

Table created.

Elapsed: 00:00:00.22
06:16:35 SQL> 
06:16:35 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.50
06:16:36 SQL> 
06:16:36 SQL> -- rpt
06:16:36 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19256

Elapsed: 00:00:00.88
06:16:37 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     19256

Elapsed: 00:00:00.00
06:16:37 SQL> 
06:16:37 SQL> --
06:16:37 SQL> -- cad610.sql
06:16:37 SQL> --
06:16:37 SQL> 
06:16:37 SQL> -- Creates views and tables for backtesting a forex SVM strategy
06:16:37 SQL> 
06:16:37 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.49
06:16:37 SQL> 
06:16:37 SQL> -- I created di5min here:
06:16:37 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
06:16:37 SQL> 
06:16:37 SQL> CREATE OR REPLACE VIEW svm6102 AS
06:16:37   2  SELECT
06:16:37   3  pair
06:16:37   4  ,ydate
06:16:37   5  ,prdate
06:16:37   6  ,rownum rnum -- acts as t in my time-series
06:16:37   7  ,clse
06:16:37   8  -- Derive a bunch of attributes from clse, the latest price:
06:16:37   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
06:16:37  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
06:16:37  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
06:16:37  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
06:16:37  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
06:16:37  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
06:16:37  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
06:16:37  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
06:16:37  17  --
06:16:37  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
06:16:37  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
06:16:37  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
06:16:37  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
06:16:37  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
06:16:37  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
06:16:37  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
06:16:37  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
06:16:37  26  --
06:16:37  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
06:16:37  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
06:16:37  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
06:16:37  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
06:16:37  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
06:16:37  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
06:16:37  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
06:16:37  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
06:16:37  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
06:16:37  36  FROM di5min WHERE pair LIKE'%cad%'
06:16:37  37  AND ydate > sysdate - 95
06:16:37  38  ORDER BY ydate
06:16:37  39  /

View created.

Elapsed: 00:00:00.04
06:16:37 SQL> 
06:16:37 SQL> -- rpt
06:16:37 SQL> 
06:16:37 SQL> SELECT
06:16:37   2  pair
06:16:37   3  ,COUNT(pair)
06:16:37   4  ,MIN(clse),MAX(clse)
06:16:37   5  ,MIN(avg6),MAX(avg6)
06:16:37   6  ,MIN(ydate),MAX(ydate)
06:16:37   7  FROM svm6102
06:16:37   8  GROUP BY pair
06:16:37   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_cad       19256	.99175	   1.0355 .993067979	 1.0339 2010-09-30 06:20:01 2011-01-03 06:10:00

Elapsed: 00:00:00.83
06:16:38 SQL> 
06:16:38 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
06:16:38 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.25
06:16:38 SQL> CREATE TABLE svm6122 COMPRESS AS
06:16:38   2  SELECT
06:16:38   3  pair
06:16:38   4  ,ydate
06:16:38   5  ,prdate
06:16:38   6  ,clse
06:16:38   7  -- g6 is important. I want to predict g6:
06:16:38   8  ,ld6 - clse g6
06:16:38   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
06:16:38  10  -- I want more attributes from the ones I derived above:
06:16:38  11  -- clse relation to moving-min
06:16:38  12  ,clse-min4  cm4
06:16:38  13  ,clse-min6  cm6
06:16:38  14  ,clse-min8  cm8
06:16:38  15  ,clse-min10 cm10
06:16:38  16  ,clse-min12 cm12
06:16:38  17  ,clse-min14 cm14
06:16:38  18  ,clse-min16 cm16
06:16:38  19  ,clse-min18 cm18
06:16:38  20  -- clse relation to moving-avg
06:16:38  21  ,clse-avg4  ca4
06:16:38  22  ,clse-avg6  ca6
06:16:38  23  ,clse-avg8  ca8
06:16:38  24  ,clse-avg10 ca10
06:16:38  25  ,clse-avg12 ca12
06:16:38  26  ,clse-avg14 ca14
06:16:38  27  ,clse-avg16 ca16
06:16:38  28  ,clse-avg18 ca18
06:16:38  29  -- clse relation to moving-max
06:16:38  30  ,clse-max4  cx4
06:16:38  31  ,clse-max6  cx6
06:16:38  32  ,clse-max8  cx8
06:16:38  33  ,clse-max10 cx10
06:16:38  34  ,clse-max12 cx12
06:16:38  35  ,clse-max14 cx14
06:16:38  36  ,clse-max16 cx16
06:16:38  37  ,clse-max18 cx18
06:16:38  38  -- Derive more attributes.
06:16:38  39  -- I want to use CORR() here to help SVM see the shape of the series.
06:16:38  40  -- But COVAR_POP is more stable:
06:16:38  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
06:16:38  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
06:16:38  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
06:16:38  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
06:16:38  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
06:16:38  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
06:16:38  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
06:16:38  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
06:16:38  49  -- Derive date related attributes:
06:16:38  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
06:16:38  51  ,0+TO_CHAR(ydate,'D')d
06:16:38  52  ,0+TO_CHAR(ydate,'W')w
06:16:38  53  -- mpm stands for minutes-past-midnight:
06:16:38  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
06:16:38  55  -- mph stands for minutes-past-hour:
06:16:38  56  ,0+TO_CHAR(ydate,'MI')mph
06:16:38  57  FROM svm6102
06:16:38  58  ORDER BY ydate
06:16:38  59  /

Table created.

Elapsed: 00:00:02.01
06:16:40 SQL> 
06:16:40 SQL> -- rpt
06:16:40 SQL> 
06:16:40 SQL> SELECT
06:16:40   2  pair
06:16:40   3  ,COUNT(pair)
06:16:40   4  ,MIN(clse),MAX(clse)
06:16:40   5  ,MIN(ydate),MAX(ydate)
06:16:40   6  FROM svm6122
06:16:40   7  GROUP BY pair
06:16:40   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_cad       19256	.99175	   1.0355 2010-09-30 06:20:01 2011-01-03 06:10:00

Elapsed: 00:00:00.04
06:16:40 SQL> 
06:16:40 SQL> -- Prepare for derivation of NTILE based params:
06:16:40 SQL> 
06:16:40 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.22
06:16:41 SQL> CREATE TABLE svm6142 COMPRESS AS
06:16:41   2  SELECT
06:16:41   3  pair
06:16:41   4  ,ydate
06:16:41   5  ,prdate
06:16:41   6  ,clse
06:16:41   7  ,g6
06:16:41   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
06:16:41   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
06:16:41  10  ,CASE WHEN trend IS NULL THEN 1
06:16:41  11  	    WHEN trend =0      THEN 1
06:16:41  12  	    ELSE trend END trend
06:16:41  13  ,cm4
06:16:41  14  ,cm6
06:16:41  15  ,cm8
06:16:41  16  ,cm10
06:16:41  17  ,cm12
06:16:41  18  ,cm14
06:16:41  19  ,cm16
06:16:41  20  ,cm18
06:16:41  21  --
06:16:41  22  ,ca4
06:16:41  23  ,ca6
06:16:41  24  ,ca8
06:16:41  25  ,ca10
06:16:41  26  ,ca12
06:16:41  27  ,ca14
06:16:41  28  ,ca16
06:16:41  29  ,ca18
06:16:41  30  --
06:16:41  31  ,cx4
06:16:41  32  ,cx6
06:16:41  33  ,cx8
06:16:41  34  ,cx10
06:16:41  35  ,cx12
06:16:41  36  ,cx14
06:16:41  37  ,cx16
06:16:41  38  ,cx18
06:16:41  39  --
06:16:41  40  ,crr4
06:16:41  41  ,crr6
06:16:41  42  ,crr8
06:16:41  43  ,crr10
06:16:41  44  ,crr12
06:16:41  45  ,crr14
06:16:41  46  ,crr16
06:16:41  47  ,crr18
06:16:41  48  --
06:16:41  49  ,hh
06:16:41  50  ,d
06:16:41  51  ,w
06:16:41  52  ,mpm
06:16:41  53  ,mph
06:16:41  54  FROM svm6122
06:16:41  55  ORDER BY ydate
06:16:41  56  /

Table created.

Elapsed: 00:00:00.35
06:16:41 SQL> 
06:16:41 SQL> -- rpt
06:16:41 SQL> 
06:16:41 SQL> SELECT
06:16:41   2  pair
06:16:41   3  ,trend
06:16:41   4  ,gatt
06:16:41   5  ,COUNT(pair)
06:16:41   6  ,AVG(g6)
06:16:41   7  FROM svm6142
06:16:41   8  GROUP BY pair,trend,gatt
06:16:41   9  ORDER BY pair,trend,gatt
06:16:41  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7326 -.00132428
usd_cad 	-1 up	      3000 .003056492
usd_cad 	-1		72
usd_cad 	 1 nup	      6553 -.00162802
usd_cad 	 1 up	      2305 .003653973

Elapsed: 00:00:00.04
06:16:41 SQL> 
06:16:41 SQL> 
06:16:41 SQL> -- Derive NTILE based params:
06:16:41 SQL> 
06:16:41 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.11
06:16:41 SQL> CREATE TABLE svm6162 COMPRESS AS
06:16:41   2  SELECT
06:16:41   3  pair
06:16:41   4  ,ydate
06:16:41   5  ,prdate
06:16:41   6  ,clse
06:16:41   7  ,g6
06:16:41   8  ,gatt
06:16:41   9  ,gattn
06:16:41  10  ,trend
06:16:41  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
06:16:41  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
06:16:41  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
06:16:41  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
06:16:41  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
06:16:41  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
06:16:41  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
06:16:41  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
06:16:41  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
06:16:41  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
06:16:41  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
06:16:41  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
06:16:41  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
06:16:41  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
06:16:41  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
06:16:41  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
06:16:41  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
06:16:41  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
06:16:41  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
06:16:41  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
06:16:41  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
06:16:41  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
06:16:41  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
06:16:41  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
06:16:41  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
06:16:41  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
06:16:41  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
06:16:41  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
06:16:41  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
06:16:41  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
06:16:41  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
06:16:41  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
06:16:41  43  ,hh  att32
06:16:41  44  ,d   att33
06:16:41  45  ,w   att34
06:16:41  46  ,mpm att35
06:16:41  47  ,mph att36
06:16:41  48  ,trend att37
06:16:41  49  FROM svm6142
06:16:41  50  ORDER BY ydate
06:16:41  51  /

Table created.

Elapsed: 00:00:04.58
06:16:46 SQL> 
06:16:46 SQL> -- rpt
06:16:46 SQL> 
06:16:46 SQL> SELECT
06:16:46   2  pair
06:16:46   3  ,trend
06:16:46   4  ,gatt
06:16:46   5  ,COUNT(pair)
06:16:46   6  ,AVG(g6)
06:16:46   7  FROM svm6162
06:16:46   8  GROUP BY pair,trend,gatt
06:16:46   9  ORDER BY pair,trend,gatt
06:16:46  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7326 -.00132428
usd_cad 	-1 up	      3000 .003056492
usd_cad 	-1		72
usd_cad 	 1 nup	      6553 -.00162802
usd_cad 	 1 up	      2305 .003653973

Elapsed: 00:00:00.03
06:16:46 SQL> 
06:16:46 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.15
06:16:46 SQL> CREATE TABLE modsrc COMPRESS AS
06:16:46   2  SELECT
06:16:46   3  pair
06:16:46   4  ,ydate
06:16:46   5  ,prdate
06:16:46   6  ,trend
06:16:46   7  ,g6
06:16:46   8  ,gatt
06:16:46   9  ,gattn
06:16:46  10  FROM svm6162
06:16:46  11  /

Table created.

Elapsed: 00:00:00.08
06:16:46 SQL> 
06:16:46 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
06:16:46 SQL> 
06:16:46 SQL> DROP   TABLE cad_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
06:16:46 SQL> CREATE TABLE cad_ms610 COMPRESS AS
06:16:46   2  SELECT
06:16:46   3  ydate
06:16:46   4  ,trend cad_trend
06:16:46   5  ,g6    cad_g6
06:16:46   6  ,gatt  cad_gatt
06:16:46   7  ,gattn cad_gattn
06:16:46   8  FROM modsrc
06:16:46   9  /

Table created.

Elapsed: 00:00:00.06
06:16:46 SQL> 
06:16:46 SQL> ANALYZE TABLE cad_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
06:16:46 SQL> 
06:16:46 SQL> -- I need a copy of the attributes:
06:16:46 SQL> 
06:16:46 SQL> 
06:16:46 SQL> DROP   TABLE cad_att;

Table dropped.

Elapsed: 00:00:00.21
06:16:47 SQL> CREATE TABLE cad_att COMPRESS AS
06:16:47   2  SELECT
06:16:47   3  ydate
06:16:47   4  ,att00 cad_att00
06:16:47   5  ,att01 cad_att01
06:16:47   6  ,att02 cad_att02
06:16:47   7  ,att03 cad_att03
06:16:47   8  ,att04 cad_att04
06:16:47   9  ,att05 cad_att05
06:16:47  10  ,att06 cad_att06
06:16:47  11  ,att07 cad_att07
06:16:47  12  ,att08 cad_att08
06:16:47  13  ,att09 cad_att09
06:16:47  14  ,att10 cad_att10
06:16:47  15  ,att11 cad_att11
06:16:47  16  ,att12 cad_att12
06:16:47  17  ,att13 cad_att13
06:16:47  18  ,att14 cad_att14
06:16:47  19  ,att15 cad_att15
06:16:47  20  ,att16 cad_att16
06:16:47  21  ,att17 cad_att17
06:16:47  22  ,att18 cad_att18
06:16:47  23  ,att19 cad_att19
06:16:47  24  ,att20 cad_att20
06:16:47  25  ,att21 cad_att21
06:16:47  26  ,att22 cad_att22
06:16:47  27  ,att23 cad_att23
06:16:47  28  ,att24 cad_att24
06:16:47  29  ,att25 cad_att25
06:16:47  30  ,att26 cad_att26
06:16:47  31  ,att27 cad_att27
06:16:47  32  ,att28 cad_att28
06:16:47  33  ,att29 cad_att29
06:16:47  34  ,att30 cad_att30
06:16:47  35  ,att31 cad_att31
06:16:47  36  ,att32 cad_att32
06:16:47  37  ,att33 cad_att33
06:16:47  38  ,att34 cad_att34
06:16:47  39  ,att35 cad_att35
06:16:47  40  ,att36 cad_att36
06:16:47  41  ,att37 cad_att37
06:16:47  42  FROM svm6162
06:16:47  43  /

Table created.

Elapsed: 00:00:00.19
06:16:47 SQL> 
06:16:47 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.44
06:16:47 SQL> 
06:16:47 SQL> -- rpt
06:16:47 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19256

Elapsed: 00:00:00.81
06:16:48 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
     19256

Elapsed: 00:00:00.00
06:16:48 SQL> 
06:16:48 SQL> --
06:16:48 SQL> -- chf610.sql
06:16:48 SQL> --
06:16:48 SQL> 
06:16:48 SQL> -- Creates views and tables for backtesting a forex SVM strategy
06:16:48 SQL> 
06:16:48 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.37
06:16:48 SQL> 
06:16:48 SQL> -- I created di5min here:
06:16:48 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
06:16:48 SQL> 
06:16:48 SQL> CREATE OR REPLACE VIEW svm6102 AS
06:16:48   2  SELECT
06:16:48   3  pair
06:16:48   4  ,ydate
06:16:48   5  ,prdate
06:16:48   6  ,rownum rnum -- acts as t in my time-series
06:16:48   7  ,clse
06:16:48   8  -- Derive a bunch of attributes from clse, the latest price:
06:16:48   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
06:16:48  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
06:16:48  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
06:16:48  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
06:16:48  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
06:16:48  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
06:16:48  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
06:16:48  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
06:16:48  17  --
06:16:48  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
06:16:48  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
06:16:48  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
06:16:48  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
06:16:48  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
06:16:48  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
06:16:48  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
06:16:48  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
06:16:48  26  --
06:16:48  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
06:16:48  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
06:16:48  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
06:16:48  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
06:16:48  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
06:16:48  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
06:16:48  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
06:16:48  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
06:16:48  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
06:16:48  36  FROM di5min WHERE pair LIKE'%chf%'
06:16:48  37  AND ydate > sysdate - 95
06:16:48  38  ORDER BY ydate
06:16:48  39  /

View created.

Elapsed: 00:00:00.04
06:16:48 SQL> 
06:16:48 SQL> -- rpt
06:16:48 SQL> 
06:16:48 SQL> SELECT
06:16:48   2  pair
06:16:48   3  ,COUNT(pair)
06:16:48   4  ,MIN(clse),MAX(clse)
06:16:48   5  ,MIN(avg6),MAX(avg6)
06:16:48   6  ,MIN(ydate),MAX(ydate)
06:16:48   7  FROM svm6102
06:16:48   8  GROUP BY pair
06:16:48   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_chf       19259    .931675	  1.00635 .933969692 1.00498151 2010-09-30 06:20:01 2011-01-03 06:10:00

Elapsed: 00:00:00.85
06:16:49 SQL> 
06:16:49 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
06:16:49 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.20
06:16:49 SQL> CREATE TABLE svm6122 COMPRESS AS
06:16:49   2  SELECT
06:16:49   3  pair
06:16:49   4  ,ydate
06:16:49   5  ,prdate
06:16:49   6  ,clse
06:16:49   7  -- g6 is important. I want to predict g6:
06:16:49   8  ,ld6 - clse g6
06:16:49   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
06:16:49  10  -- I want more attributes from the ones I derived above:
06:16:49  11  -- clse relation to moving-min
06:16:49  12  ,clse-min4  cm4
06:16:49  13  ,clse-min6  cm6
06:16:49  14  ,clse-min8  cm8
06:16:49  15  ,clse-min10 cm10
06:16:49  16  ,clse-min12 cm12
06:16:49  17  ,clse-min14 cm14
06:16:49  18  ,clse-min16 cm16
06:16:49  19  ,clse-min18 cm18
06:16:49  20  -- clse relation to moving-avg
06:16:49  21  ,clse-avg4  ca4
06:16:49  22  ,clse-avg6  ca6
06:16:49  23  ,clse-avg8  ca8
06:16:49  24  ,clse-avg10 ca10
06:16:49  25  ,clse-avg12 ca12
06:16:49  26  ,clse-avg14 ca14
06:16:49  27  ,clse-avg16 ca16
06:16:49  28  ,clse-avg18 ca18
06:16:49  29  -- clse relation to moving-max
06:16:49  30  ,clse-max4  cx4
06:16:49  31  ,clse-max6  cx6
06:16:49  32  ,clse-max8  cx8
06:16:49  33  ,clse-max10 cx10
06:16:49  34  ,clse-max12 cx12
06:16:49  35  ,clse-max14 cx14
06:16:49  36  ,clse-max16 cx16
06:16:49  37  ,clse-max18 cx18
06:16:49  38  -- Derive more attributes.
06:16:49  39  -- I want to use CORR() here to help SVM see the shape of the series.
06:16:49  40  -- But COVAR_POP is more stable:
06:16:49  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
06:16:49  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
06:16:49  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
06:16:49  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
06:16:49  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
06:16:49  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
06:16:49  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
06:16:49  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
06:16:49  49  -- Derive date related attributes:
06:16:49  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
06:16:49  51  ,0+TO_CHAR(ydate,'D')d
06:16:49  52  ,0+TO_CHAR(ydate,'W')w
06:16:49  53  -- mpm stands for minutes-past-midnight:
06:16:49  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
06:16:49  55  -- mph stands for minutes-past-hour:
06:16:49  56  ,0+TO_CHAR(ydate,'MI')mph
06:16:49  57  FROM svm6102
06:16:49  58  ORDER BY ydate
06:16:49  59  /

Table created.

Elapsed: 00:00:02.04
06:16:52 SQL> 
06:16:52 SQL> -- rpt
06:16:52 SQL> 
06:16:52 SQL> SELECT
06:16:52   2  pair
06:16:52   3  ,COUNT(pair)
06:16:52   4  ,MIN(clse),MAX(clse)
06:16:52   5  ,MIN(ydate),MAX(ydate)
06:16:52   6  FROM svm6122
06:16:52   7  GROUP BY pair
06:16:52   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_chf       19259    .931675	  1.00635 2010-09-30 06:20:01 2011-01-03 06:10:00

Elapsed: 00:00:00.03
06:16:52 SQL> 
06:16:52 SQL> -- Prepare for derivation of NTILE based params:
06:16:52 SQL> 
06:16:52 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.24
06:16:52 SQL> CREATE TABLE svm6142 COMPRESS AS
06:16:52   2  SELECT
06:16:52   3  pair
06:16:52   4  ,ydate
06:16:52   5  ,prdate
06:16:52   6  ,clse
06:16:52   7  ,g6
06:16:52   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
06:16:52   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
06:16:52  10  ,CASE WHEN trend IS NULL THEN 1
06:16:52  11  	    WHEN trend =0      THEN 1
06:16:52  12  	    ELSE trend END trend
06:16:52  13  ,cm4
06:16:52  14  ,cm6
06:16:52  15  ,cm8
06:16:52  16  ,cm10
06:16:52  17  ,cm12
06:16:52  18  ,cm14
06:16:52  19  ,cm16
06:16:52  20  ,cm18
06:16:52  21  --
06:16:52  22  ,ca4
06:16:52  23  ,ca6
06:16:52  24  ,ca8
06:16:52  25  ,ca10
06:16:52  26  ,ca12
06:16:52  27  ,ca14
06:16:52  28  ,ca16
06:16:52  29  ,ca18
06:16:52  30  --
06:16:52  31  ,cx4
06:16:52  32  ,cx6
06:16:52  33  ,cx8
06:16:52  34  ,cx10
06:16:52  35  ,cx12
06:16:52  36  ,cx14
06:16:52  37  ,cx16
06:16:52  38  ,cx18
06:16:52  39  --
06:16:52  40  ,crr4
06:16:52  41  ,crr6
06:16:52  42  ,crr8
06:16:52  43  ,crr10
06:16:52  44  ,crr12
06:16:52  45  ,crr14
06:16:52  46  ,crr16
06:16:52  47  ,crr18
06:16:52  48  --
06:16:52  49  ,hh
06:16:52  50  ,d
06:16:52  51  ,w
06:16:52  52  ,mpm
06:16:52  53  ,mph
06:16:52  54  FROM svm6122
06:16:52  55  ORDER BY ydate
06:16:52  56  /

Table created.

Elapsed: 00:00:00.38
06:16:52 SQL> 
06:16:52 SQL> -- rpt
06:16:52 SQL> 
06:16:52 SQL> SELECT
06:16:52   2  pair
06:16:52   3  ,trend
06:16:52   4  ,gatt
06:16:52   5  ,COUNT(pair)
06:16:52   6  ,AVG(g6)
06:16:52   7  FROM svm6142
06:16:52   8  GROUP BY pair,trend,gatt
06:16:52   9  ORDER BY pair,trend,gatt
06:16:52  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7223 -.00200076
usd_chf 	-1 up	      3102  .00394015
usd_chf 	-1		 1
usd_chf 	 1 nup	      6299 -.00159971
usd_chf 	 1 up	      2563 .003691147
usd_chf 	 1		71

6 rows selected.

Elapsed: 00:00:00.04
06:16:52 SQL> 
06:16:52 SQL> 
06:16:52 SQL> -- Derive NTILE based params:
06:16:52 SQL> 
06:16:52 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.11
06:16:52 SQL> CREATE TABLE svm6162 COMPRESS AS
06:16:52   2  SELECT
06:16:52   3  pair
06:16:52   4  ,ydate
06:16:52   5  ,prdate
06:16:52   6  ,clse
06:16:52   7  ,g6
06:16:52   8  ,gatt
06:16:52   9  ,gattn
06:16:52  10  ,trend
06:16:52  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
06:16:52  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
06:16:52  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
06:16:52  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
06:16:52  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
06:16:52  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
06:16:52  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
06:16:52  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
06:16:52  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
06:16:52  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
06:16:52  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
06:16:52  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
06:16:52  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
06:16:52  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
06:16:52  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
06:16:52  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
06:16:52  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
06:16:52  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
06:16:52  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
06:16:52  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
06:16:52  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
06:16:52  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
06:16:52  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
06:16:52  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
06:16:52  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
06:16:52  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
06:16:52  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
06:16:52  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
06:16:52  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
06:16:52  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
06:16:52  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
06:16:52  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
06:16:52  43  ,hh  att32
06:16:52  44  ,d   att33
06:16:52  45  ,w   att34
06:16:52  46  ,mpm att35
06:16:52  47  ,mph att36
06:16:52  48  ,trend att37
06:16:52  49  FROM svm6142
06:16:52  50  ORDER BY ydate
06:16:52  51  /

Table created.

Elapsed: 00:00:04.92
06:16:57 SQL> 
06:16:57 SQL> -- rpt
06:16:57 SQL> 
06:16:57 SQL> SELECT
06:16:57   2  pair
06:16:57   3  ,trend
06:16:57   4  ,gatt
06:16:57   5  ,COUNT(pair)
06:16:57   6  ,AVG(g6)
06:16:57   7  FROM svm6162
06:16:57   8  GROUP BY pair,trend,gatt
06:16:57   9  ORDER BY pair,trend,gatt
06:16:57  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7223 -.00200076
usd_chf 	-1 up	      3102  .00394015
usd_chf 	-1		 1
usd_chf 	 1 nup	      6299 -.00159971
usd_chf 	 1 up	      2563 .003691147
usd_chf 	 1		71

6 rows selected.

Elapsed: 00:00:00.02
06:16:57 SQL> 
06:16:57 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.18
06:16:57 SQL> CREATE TABLE modsrc COMPRESS AS
06:16:57   2  SELECT
06:16:57   3  pair
06:16:57   4  ,ydate
06:16:57   5  ,prdate
06:16:57   6  ,trend
06:16:57   7  ,g6
06:16:57   8  ,gatt
06:16:57   9  ,gattn
06:16:57  10  FROM svm6162
06:16:57  11  /

Table created.

Elapsed: 00:00:00.08
06:16:58 SQL> 
06:16:58 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
06:16:58 SQL> 
06:16:58 SQL> DROP   TABLE chf_ms610 ;

Table dropped.

Elapsed: 00:00:00.07
06:16:58 SQL> CREATE TABLE chf_ms610 COMPRESS AS
06:16:58   2  SELECT
06:16:58   3  ydate
06:16:58   4  ,trend chf_trend
06:16:58   5  ,g6    chf_g6
06:16:58   6  ,gatt  chf_gatt
06:16:58   7  ,gattn chf_gattn
06:16:58   8  FROM modsrc
06:16:58   9  /

Table created.

Elapsed: 00:00:00.07
06:16:58 SQL> 
06:16:58 SQL> ANALYZE TABLE chf_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
06:16:58 SQL> 
06:16:58 SQL> -- I need a copy of the attributes:
06:16:58 SQL> 
06:16:58 SQL> 
06:16:58 SQL> DROP   TABLE chf_att;

Table dropped.

Elapsed: 00:00:00.14
06:16:58 SQL> CREATE TABLE chf_att COMPRESS AS
06:16:58   2  SELECT
06:16:58   3  ydate
06:16:58   4  ,att00 chf_att00
06:16:58   5  ,att01 chf_att01
06:16:58   6  ,att02 chf_att02
06:16:58   7  ,att03 chf_att03
06:16:58   8  ,att04 chf_att04
06:16:58   9  ,att05 chf_att05
06:16:58  10  ,att06 chf_att06
06:16:58  11  ,att07 chf_att07
06:16:58  12  ,att08 chf_att08
06:16:58  13  ,att09 chf_att09
06:16:58  14  ,att10 chf_att10
06:16:58  15  ,att11 chf_att11
06:16:58  16  ,att12 chf_att12
06:16:58  17  ,att13 chf_att13
06:16:58  18  ,att14 chf_att14
06:16:58  19  ,att15 chf_att15
06:16:58  20  ,att16 chf_att16
06:16:58  21  ,att17 chf_att17
06:16:58  22  ,att18 chf_att18
06:16:58  23  ,att19 chf_att19
06:16:58  24  ,att20 chf_att20
06:16:58  25  ,att21 chf_att21
06:16:58  26  ,att22 chf_att22
06:16:58  27  ,att23 chf_att23
06:16:58  28  ,att24 chf_att24
06:16:58  29  ,att25 chf_att25
06:16:58  30  ,att26 chf_att26
06:16:58  31  ,att27 chf_att27
06:16:58  32  ,att28 chf_att28
06:16:58  33  ,att29 chf_att29
06:16:58  34  ,att30 chf_att30
06:16:58  35  ,att31 chf_att31
06:16:58  36  ,att32 chf_att32
06:16:58  37  ,att33 chf_att33
06:16:58  38  ,att34 chf_att34
06:16:58  39  ,att35 chf_att35
06:16:58  40  ,att36 chf_att36
06:16:58  41  ,att37 chf_att37
06:16:58  42  FROM svm6162
06:16:58  43  /

Table created.

Elapsed: 00:00:00.16
06:16:58 SQL> 
06:16:58 SQL> ANALYZE TABLE chf_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
06:16:59 SQL> 
06:16:59 SQL> -- rpt
06:16:59 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19259

Elapsed: 00:00:00.84
06:17:00 SQL> SELECT COUNT(*)FROM chf_att;

  COUNT(*)
----------
     19259

Elapsed: 00:00:00.00
06:17:00 SQL> 
06:17:00 SQL> --
06:17:00 SQL> -- ech610.sql
06:17:00 SQL> --
06:17:00 SQL> 
06:17:00 SQL> -- Creates views and tables for backtesting a forex SVM strategy
06:17:00 SQL> 
06:17:00 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.39
06:17:00 SQL> 
06:17:00 SQL> -- I created di5min here:
06:17:00 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
06:17:00 SQL> 
06:17:00 SQL> CREATE OR REPLACE VIEW svm6102 AS
06:17:00   2  SELECT
06:17:00   3  pair
06:17:00   4  ,ydate
06:17:00   5  ,prdate
06:17:00   6  ,rownum rnum -- acts as t in my time-series
06:17:00   7  ,clse
06:17:00   8  -- Derive a bunch of attributes from clse, the latest price:
06:17:00   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
06:17:00  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
06:17:00  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
06:17:00  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
06:17:00  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
06:17:00  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
06:17:00  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
06:17:00  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
06:17:00  17  --
06:17:00  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
06:17:00  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
06:17:00  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
06:17:00  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
06:17:00  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
06:17:00  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
06:17:00  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
06:17:00  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
06:17:00  26  --
06:17:00  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
06:17:00  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
06:17:00  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
06:17:00  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
06:17:00  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
06:17:00  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
06:17:00  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
06:17:00  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
06:17:00  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
06:17:00  36  FROM di5min WHERE pair LIKE'%ech%'
06:17:00  37  AND ydate > sysdate - 95
06:17:00  38  ORDER BY ydate
06:17:00  39  /

View created.

Elapsed: 00:00:00.04
06:17:00 SQL> 
06:17:00 SQL> -- rpt
06:17:00 SQL> 
06:17:00 SQL> SELECT
06:17:00   2  pair
06:17:00   3  ,COUNT(pair)
06:17:00   4  ,MIN(clse),MAX(clse)
06:17:00   5  ,MIN(avg6),MAX(avg6)
06:17:00   6  ,MIN(ydate),MAX(ydate)
06:17:00   7  FROM svm6102
06:17:00   8  GROUP BY pair
06:17:00   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ech_usd       19258 1.24213032 1.38284305 1.24320711 1.37986485 2010-09-30 06:20:01 2011-01-03 06:10:00

Elapsed: 00:00:00.77
06:17:01 SQL> 
06:17:01 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
06:17:01 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.18
06:17:01 SQL> CREATE TABLE svm6122 COMPRESS AS
06:17:01   2  SELECT
06:17:01   3  pair
06:17:01   4  ,ydate
06:17:01   5  ,prdate
06:17:01   6  ,clse
06:17:01   7  -- g6 is important. I want to predict g6:
06:17:01   8  ,ld6 - clse g6
06:17:01   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
06:17:01  10  -- I want more attributes from the ones I derived above:
06:17:01  11  -- clse relation to moving-min
06:17:01  12  ,clse-min4  cm4
06:17:01  13  ,clse-min6  cm6
06:17:01  14  ,clse-min8  cm8
06:17:01  15  ,clse-min10 cm10
06:17:01  16  ,clse-min12 cm12
06:17:01  17  ,clse-min14 cm14
06:17:01  18  ,clse-min16 cm16
06:17:01  19  ,clse-min18 cm18
06:17:01  20  -- clse relation to moving-avg
06:17:01  21  ,clse-avg4  ca4
06:17:01  22  ,clse-avg6  ca6
06:17:01  23  ,clse-avg8  ca8
06:17:01  24  ,clse-avg10 ca10
06:17:01  25  ,clse-avg12 ca12
06:17:01  26  ,clse-avg14 ca14
06:17:01  27  ,clse-avg16 ca16
06:17:01  28  ,clse-avg18 ca18
06:17:01  29  -- clse relation to moving-max
06:17:01  30  ,clse-max4  cx4
06:17:01  31  ,clse-max6  cx6
06:17:01  32  ,clse-max8  cx8
06:17:01  33  ,clse-max10 cx10
06:17:01  34  ,clse-max12 cx12
06:17:01  35  ,clse-max14 cx14
06:17:01  36  ,clse-max16 cx16
06:17:01  37  ,clse-max18 cx18
06:17:01  38  -- Derive more attributes.
06:17:01  39  -- I want to use CORR() here to help SVM see the shape of the series.
06:17:01  40  -- But COVAR_POP is more stable:
06:17:01  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
06:17:01  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
06:17:01  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
06:17:01  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
06:17:01  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
06:17:01  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
06:17:01  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
06:17:01  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
06:17:01  49  -- Derive date related attributes:
06:17:01  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
06:17:01  51  ,0+TO_CHAR(ydate,'D')d
06:17:01  52  ,0+TO_CHAR(ydate,'W')w
06:17:01  53  -- mpm stands for minutes-past-midnight:
06:17:01  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
06:17:01  55  -- mph stands for minutes-past-hour:
06:17:01  56  ,0+TO_CHAR(ydate,'MI')mph
06:17:01  57  FROM svm6102
06:17:01  58  ORDER BY ydate
06:17:01  59  /

Table created.

Elapsed: 00:00:02.05
06:17:03 SQL> 
06:17:03 SQL> -- rpt
06:17:03 SQL> 
06:17:03 SQL> SELECT
06:17:03   2  pair
06:17:03   3  ,COUNT(pair)
06:17:03   4  ,MIN(clse),MAX(clse)
06:17:03   5  ,MIN(ydate),MAX(ydate)
06:17:03   6  FROM svm6122
06:17:03   7  GROUP BY pair
06:17:03   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ech_usd       19258 1.24213032 1.38284305 2010-09-30 06:20:01 2011-01-03 06:10:00

Elapsed: 00:00:00.04
06:17:03 SQL> 
06:17:03 SQL> -- Prepare for derivation of NTILE based params:
06:17:03 SQL> 
06:17:03 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.19
06:17:03 SQL> CREATE TABLE svm6142 COMPRESS AS
06:17:03   2  SELECT
06:17:03   3  pair
06:17:03   4  ,ydate
06:17:03   5  ,prdate
06:17:03   6  ,clse
06:17:03   7  ,g6
06:17:03   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
06:17:03   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
06:17:03  10  ,CASE WHEN trend IS NULL THEN 1
06:17:03  11  	    WHEN trend =0      THEN 1
06:17:03  12  	    ELSE trend END trend
06:17:03  13  ,cm4
06:17:03  14  ,cm6
06:17:03  15  ,cm8
06:17:03  16  ,cm10
06:17:03  17  ,cm12
06:17:03  18  ,cm14
06:17:03  19  ,cm16
06:17:03  20  ,cm18
06:17:03  21  --
06:17:03  22  ,ca4
06:17:03  23  ,ca6
06:17:03  24  ,ca8
06:17:03  25  ,ca10
06:17:03  26  ,ca12
06:17:03  27  ,ca14
06:17:03  28  ,ca16
06:17:03  29  ,ca18
06:17:03  30  --
06:17:03  31  ,cx4
06:17:03  32  ,cx6
06:17:03  33  ,cx8
06:17:03  34  ,cx10
06:17:03  35  ,cx12
06:17:03  36  ,cx14
06:17:03  37  ,cx16
06:17:03  38  ,cx18
06:17:03  39  --
06:17:03  40  ,crr4
06:17:03  41  ,crr6
06:17:03  42  ,crr8
06:17:03  43  ,crr10
06:17:03  44  ,crr12
06:17:03  45  ,crr14
06:17:03  46  ,crr16
06:17:03  47  ,crr18
06:17:03  48  --
06:17:03  49  ,hh
06:17:03  50  ,d
06:17:03  51  ,w
06:17:03  52  ,mpm
06:17:03  53  ,mph
06:17:03  54  FROM svm6122
06:17:03  55  ORDER BY ydate
06:17:03  56  /

Table created.

Elapsed: 00:00:00.88
06:17:04 SQL> 
06:17:04 SQL> -- rpt
06:17:04 SQL> 
06:17:04 SQL> SELECT
06:17:04   2  pair
06:17:04   3  ,trend
06:17:04   4  ,gatt
06:17:04   5  ,COUNT(pair)
06:17:04   6  ,AVG(g6)
06:17:04   7  FROM svm6142
06:17:04   8  GROUP BY pair,trend,gatt
06:17:04   9  ORDER BY pair,trend,gatt
06:17:04  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6494 -.00225424
ech_usd 	-1 up	      3524 .003574395
ech_usd 	-1		72
ech_usd 	 1 nup	      6318 -.00238231
ech_usd 	 1 up	      2850 .003848442

Elapsed: 00:00:00.04
06:17:04 SQL> 
06:17:04 SQL> 
06:17:04 SQL> -- Derive NTILE based params:
06:17:04 SQL> 
06:17:04 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.11
06:17:04 SQL> CREATE TABLE svm6162 COMPRESS AS
06:17:04   2  SELECT
06:17:04   3  pair
06:17:04   4  ,ydate
06:17:04   5  ,prdate
06:17:04   6  ,clse
06:17:04   7  ,g6
06:17:04   8  ,gatt
06:17:04   9  ,gattn
06:17:04  10  ,trend
06:17:04  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
06:17:04  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
06:17:04  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
06:17:04  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
06:17:04  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
06:17:04  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
06:17:04  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
06:17:04  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
06:17:04  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
06:17:04  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
06:17:04  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
06:17:04  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
06:17:04  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
06:17:04  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
06:17:04  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
06:17:04  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
06:17:04  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
06:17:04  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
06:17:04  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
06:17:04  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
06:17:04  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
06:17:04  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
06:17:04  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
06:17:04  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
06:17:04  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
06:17:04  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
06:17:04  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
06:17:04  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
06:17:04  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
06:17:04  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
06:17:04  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
06:17:04  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
06:17:04  43  ,hh  att32
06:17:04  44  ,d   att33
06:17:04  45  ,w   att34
06:17:04  46  ,mpm att35
06:17:04  47  ,mph att36
06:17:04  48  ,trend att37
06:17:04  49  FROM svm6142
06:17:04  50  ORDER BY ydate
06:17:04  51  /

Table created.

Elapsed: 00:00:04.83
06:17:09 SQL> 
06:17:09 SQL> -- rpt
06:17:09 SQL> 
06:17:09 SQL> SELECT
06:17:09   2  pair
06:17:09   3  ,trend
06:17:09   4  ,gatt
06:17:09   5  ,COUNT(pair)
06:17:09   6  ,AVG(g6)
06:17:09   7  FROM svm6162
06:17:09   8  GROUP BY pair,trend,gatt
06:17:09   9  ORDER BY pair,trend,gatt
06:17:09  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6494 -.00225424
ech_usd 	-1 up	      3524 .003574395
ech_usd 	-1		72
ech_usd 	 1 nup	      6318 -.00238231
ech_usd 	 1 up	      2850 .003848442

Elapsed: 00:00:00.03
06:17:09 SQL> 
06:17:09 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.11
06:17:09 SQL> CREATE TABLE modsrc COMPRESS AS
06:17:09   2  SELECT
06:17:09   3  pair
06:17:09   4  ,ydate
06:17:09   5  ,prdate
06:17:09   6  ,trend
06:17:09   7  ,g6
06:17:09   8  ,gatt
06:17:09   9  ,gattn
06:17:09  10  FROM svm6162
06:17:09  11  /

Table created.

Elapsed: 00:00:00.08
06:17:09 SQL> 
06:17:09 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
06:17:10 SQL> 
06:17:10 SQL> DROP   TABLE ech_ms610 ;

Table dropped.

Elapsed: 00:00:00.10
06:17:10 SQL> CREATE TABLE ech_ms610 COMPRESS AS
06:17:10   2  SELECT
06:17:10   3  ydate
06:17:10   4  ,trend ech_trend
06:17:10   5  ,g6    ech_g6
06:17:10   6  ,gatt  ech_gatt
06:17:10   7  ,gattn ech_gattn
06:17:10   8  FROM modsrc
06:17:10   9  /

Table created.

Elapsed: 00:00:00.08
06:17:10 SQL> 
06:17:10 SQL> ANALYZE TABLE ech_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
06:17:10 SQL> 
06:17:10 SQL> -- I need a copy of the attributes:
06:17:10 SQL> 
06:17:10 SQL> 
06:17:10 SQL> DROP   TABLE ech_att;

Table dropped.

Elapsed: 00:00:00.08
06:17:10 SQL> CREATE TABLE ech_att COMPRESS AS
06:17:10   2  SELECT
06:17:10   3  ydate
06:17:10   4  ,att00 ech_att00
06:17:10   5  ,att01 ech_att01
06:17:10   6  ,att02 ech_att02
06:17:10   7  ,att03 ech_att03
06:17:10   8  ,att04 ech_att04
06:17:10   9  ,att05 ech_att05
06:17:10  10  ,att06 ech_att06
06:17:10  11  ,att07 ech_att07
06:17:10  12  ,att08 ech_att08
06:17:10  13  ,att09 ech_att09
06:17:10  14  ,att10 ech_att10
06:17:10  15  ,att11 ech_att11
06:17:10  16  ,att12 ech_att12
06:17:10  17  ,att13 ech_att13
06:17:10  18  ,att14 ech_att14
06:17:10  19  ,att15 ech_att15
06:17:10  20  ,att16 ech_att16
06:17:10  21  ,att17 ech_att17
06:17:10  22  ,att18 ech_att18
06:17:10  23  ,att19 ech_att19
06:17:10  24  ,att20 ech_att20
06:17:10  25  ,att21 ech_att21
06:17:10  26  ,att22 ech_att22
06:17:10  27  ,att23 ech_att23
06:17:10  28  ,att24 ech_att24
06:17:10  29  ,att25 ech_att25
06:17:10  30  ,att26 ech_att26
06:17:10  31  ,att27 ech_att27
06:17:10  32  ,att28 ech_att28
06:17:10  33  ,att29 ech_att29
06:17:10  34  ,att30 ech_att30
06:17:10  35  ,att31 ech_att31
06:17:10  36  ,att32 ech_att32
06:17:10  37  ,att33 ech_att33
06:17:10  38  ,att34 ech_att34
06:17:10  39  ,att35 ech_att35
06:17:10  40  ,att36 ech_att36
06:17:10  41  ,att37 ech_att37
06:17:10  42  FROM svm6162
06:17:10  43  /

Table created.

Elapsed: 00:00:00.24
06:17:10 SQL> 
06:17:10 SQL> ANALYZE TABLE ech_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.55
06:17:11 SQL> 
06:17:11 SQL> -- rpt
06:17:11 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19258

Elapsed: 00:00:00.79
06:17:12 SQL> SELECT COUNT(*)FROM ech_att;

  COUNT(*)
----------
     19258

Elapsed: 00:00:00.00
06:17:12 SQL> 
06:17:12 SQL> --
06:17:12 SQL> -- egb610.sql
06:17:12 SQL> --
06:17:12 SQL> 
06:17:12 SQL> -- Creates views and tables for backtesting a forex SVM strategy
06:17:12 SQL> 
06:17:12 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.54
06:17:12 SQL> 
06:17:12 SQL> -- I created di5min here:
06:17:12 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
06:17:12 SQL> 
06:17:12 SQL> CREATE OR REPLACE VIEW svm6102 AS
06:17:12   2  SELECT
06:17:12   3  pair
06:17:12   4  ,ydate
06:17:12   5  ,prdate
06:17:12   6  ,rownum rnum -- acts as t in my time-series
06:17:12   7  ,clse
06:17:12   8  -- Derive a bunch of attributes from clse, the latest price:
06:17:12   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
06:17:12  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
06:17:12  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
06:17:12  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
06:17:12  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
06:17:12  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
06:17:12  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
06:17:12  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
06:17:12  17  --
06:17:12  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
06:17:12  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
06:17:12  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
06:17:12  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
06:17:12  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
06:17:12  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
06:17:12  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
06:17:12  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
06:17:12  26  --
06:17:12  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
06:17:12  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
06:17:12  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
06:17:12  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
06:17:12  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
06:17:12  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
06:17:12  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
06:17:12  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
06:17:12  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
06:17:12  36  FROM di5min WHERE pair LIKE'%egb%'
06:17:12  37  AND ydate > sysdate - 95
06:17:12  38  ORDER BY ydate
06:17:12  39  /

View created.

Elapsed: 00:00:00.06
06:17:12 SQL> 
06:17:12 SQL> -- rpt
06:17:12 SQL> 
06:17:12 SQL> SELECT
06:17:12   2  pair
06:17:12   3  ,COUNT(pair)
06:17:12   4  ,MIN(clse),MAX(clse)
06:17:12   5  ,MIN(avg6),MAX(avg6)
06:17:12   6  ,MIN(ydate),MAX(ydate)
06:17:12   7  FROM svm6102
06:17:12   8  GROUP BY pair
06:17:12   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
egb_usd       19257 .833520557 .893920122 .834199029 .892400287 2010-09-30 06:20:01 2011-01-03 06:10:00

Elapsed: 00:00:00.94
06:17:13 SQL> 
06:17:13 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
06:17:13 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.22
06:17:13 SQL> CREATE TABLE svm6122 COMPRESS AS
06:17:13   2  SELECT
06:17:13   3  pair
06:17:13   4  ,ydate
06:17:13   5  ,prdate
06:17:13   6  ,clse
06:17:13   7  -- g6 is important. I want to predict g6:
06:17:13   8  ,ld6 - clse g6
06:17:13   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
06:17:13  10  -- I want more attributes from the ones I derived above:
06:17:13  11  -- clse relation to moving-min
06:17:13  12  ,clse-min4  cm4
06:17:13  13  ,clse-min6  cm6
06:17:13  14  ,clse-min8  cm8
06:17:13  15  ,clse-min10 cm10
06:17:13  16  ,clse-min12 cm12
06:17:13  17  ,clse-min14 cm14
06:17:13  18  ,clse-min16 cm16
06:17:13  19  ,clse-min18 cm18
06:17:13  20  -- clse relation to moving-avg
06:17:13  21  ,clse-avg4  ca4
06:17:13  22  ,clse-avg6  ca6
06:17:13  23  ,clse-avg8  ca8
06:17:13  24  ,clse-avg10 ca10
06:17:13  25  ,clse-avg12 ca12
06:17:13  26  ,clse-avg14 ca14
06:17:13  27  ,clse-avg16 ca16
06:17:13  28  ,clse-avg18 ca18
06:17:13  29  -- clse relation to moving-max
06:17:13  30  ,clse-max4  cx4
06:17:13  31  ,clse-max6  cx6
06:17:13  32  ,clse-max8  cx8
06:17:13  33  ,clse-max10 cx10
06:17:13  34  ,clse-max12 cx12
06:17:13  35  ,clse-max14 cx14
06:17:13  36  ,clse-max16 cx16
06:17:13  37  ,clse-max18 cx18
06:17:13  38  -- Derive more attributes.
06:17:13  39  -- I want to use CORR() here to help SVM see the shape of the series.
06:17:13  40  -- But COVAR_POP is more stable:
06:17:13  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
06:17:13  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
06:17:13  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
06:17:13  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
06:17:13  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
06:17:13  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
06:17:13  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
06:17:13  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
06:17:13  49  -- Derive date related attributes:
06:17:13  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
06:17:13  51  ,0+TO_CHAR(ydate,'D')d
06:17:13  52  ,0+TO_CHAR(ydate,'W')w
06:17:13  53  -- mpm stands for minutes-past-midnight:
06:17:13  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
06:17:13  55  -- mph stands for minutes-past-hour:
06:17:13  56  ,0+TO_CHAR(ydate,'MI')mph
06:17:13  57  FROM svm6102
06:17:13  58  ORDER BY ydate
06:17:13  59  /

Table created.

Elapsed: 00:00:02.45
06:17:16 SQL> 
06:17:16 SQL> -- rpt
06:17:16 SQL> 
06:17:16 SQL> SELECT
06:17:16   2  pair
06:17:16   3  ,COUNT(pair)
06:17:16   4  ,MIN(clse),MAX(clse)
06:17:16   5  ,MIN(ydate),MAX(ydate)
06:17:16   6  FROM svm6122
06:17:16   7  GROUP BY pair
06:17:16   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
egb_usd       19257 .833520557 .893920122 2010-09-30 06:20:01 2011-01-03 06:10:00

Elapsed: 00:00:00.04
06:17:16 SQL> 
06:17:16 SQL> -- Prepare for derivation of NTILE based params:
06:17:16 SQL> 
06:17:16 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.29
06:17:16 SQL> CREATE TABLE svm6142 COMPRESS AS
06:17:16   2  SELECT
06:17:16   3  pair
06:17:16   4  ,ydate
06:17:16   5  ,prdate
06:17:16   6  ,clse
06:17:16   7  ,g6
06:17:16   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
06:17:16   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
06:17:16  10  ,CASE WHEN trend IS NULL THEN 1
06:17:16  11  	    WHEN trend =0      THEN 1
06:17:16  12  	    ELSE trend END trend
06:17:16  13  ,cm4
06:17:16  14  ,cm6
06:17:16  15  ,cm8
06:17:16  16  ,cm10
06:17:16  17  ,cm12
06:17:16  18  ,cm14
06:17:16  19  ,cm16
06:17:16  20  ,cm18
06:17:16  21  --
06:17:16  22  ,ca4
06:17:16  23  ,ca6
06:17:16  24  ,ca8
06:17:16  25  ,ca10
06:17:16  26  ,ca12
06:17:16  27  ,ca14
06:17:16  28  ,ca16
06:17:16  29  ,ca18
06:17:16  30  --
06:17:16  31  ,cx4
06:17:16  32  ,cx6
06:17:16  33  ,cx8
06:17:16  34  ,cx10
06:17:16  35  ,cx12
06:17:16  36  ,cx14
06:17:16  37  ,cx16
06:17:16  38  ,cx18
06:17:16  39  --
06:17:16  40  ,crr4
06:17:16  41  ,crr6
06:17:16  42  ,crr8
06:17:16  43  ,crr10
06:17:16  44  ,crr12
06:17:16  45  ,crr14
06:17:16  46  ,crr16
06:17:16  47  ,crr18
06:17:16  48  --
06:17:16  49  ,hh
06:17:16  50  ,d
06:17:16  51  ,w
06:17:16  52  ,mpm
06:17:16  53  ,mph
06:17:16  54  FROM svm6122
06:17:16  55  ORDER BY ydate
06:17:16  56  /

Table created.

Elapsed: 00:00:00.40
06:17:17 SQL> 
06:17:17 SQL> -- rpt
06:17:17 SQL> 
06:17:17 SQL> SELECT
06:17:17   2  pair
06:17:17   3  ,trend
06:17:17   4  ,gatt
06:17:17   5  ,COUNT(pair)
06:17:17   6  ,AVG(g6)
06:17:17   7  FROM svm6142
06:17:17   8  GROUP BY pair,trend,gatt
06:17:17   9  ORDER BY pair,trend,gatt
06:17:17  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7300 -.00100576
egb_usd 	-1 up	      2653 .002937474
egb_usd 	-1		71
egb_usd 	 1 nup	      6558 -.00131223
egb_usd 	 1 up	      2674  .00296119
egb_usd 	 1		 1

6 rows selected.

Elapsed: 00:00:00.03
06:17:17 SQL> 
06:17:17 SQL> 
06:17:17 SQL> -- Derive NTILE based params:
06:17:17 SQL> 
06:17:17 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.25
06:17:17 SQL> CREATE TABLE svm6162 COMPRESS AS
06:17:17   2  SELECT
06:17:17   3  pair
06:17:17   4  ,ydate
06:17:17   5  ,prdate
06:17:17   6  ,clse
06:17:17   7  ,g6
06:17:17   8  ,gatt
06:17:17   9  ,gattn
06:17:17  10  ,trend
06:17:17  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
06:17:17  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
06:17:17  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
06:17:17  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
06:17:17  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
06:17:17  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
06:17:17  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
06:17:17  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
06:17:17  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
06:17:17  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
06:17:17  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
06:17:17  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
06:17:17  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
06:17:17  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
06:17:17  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
06:17:17  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
06:17:17  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
06:17:17  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
06:17:17  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
06:17:17  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
06:17:17  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
06:17:17  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
06:17:17  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
06:17:17  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
06:17:17  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
06:17:17  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
06:17:17  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
06:17:17  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
06:17:17  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
06:17:17  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
06:17:17  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
06:17:17  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
06:17:17  43  ,hh  att32
06:17:17  44  ,d   att33
06:17:17  45  ,w   att34
06:17:17  46  ,mpm att35
06:17:17  47  ,mph att36
06:17:17  48  ,trend att37
06:17:17  49  FROM svm6142
06:17:17  50  ORDER BY ydate
06:17:17  51  /

Table created.

Elapsed: 00:00:05.58
06:17:22 SQL> 
06:17:22 SQL> -- rpt
06:17:22 SQL> 
06:17:22 SQL> SELECT
06:17:22   2  pair
06:17:22   3  ,trend
06:17:22   4  ,gatt
06:17:22   5  ,COUNT(pair)
06:17:22   6  ,AVG(g6)
06:17:22   7  FROM svm6162
06:17:22   8  GROUP BY pair,trend,gatt
06:17:22   9  ORDER BY pair,trend,gatt
06:17:22  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7300 -.00100576
egb_usd 	-1 up	      2653 .002937474
egb_usd 	-1		71
egb_usd 	 1 nup	      6558 -.00131223
egb_usd 	 1 up	      2674  .00296119
egb_usd 	 1		 1

6 rows selected.

Elapsed: 00:00:00.03
06:17:22 SQL> 
06:17:22 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.22
06:17:23 SQL> CREATE TABLE modsrc COMPRESS AS
06:17:23   2  SELECT
06:17:23   3  pair
06:17:23   4  ,ydate
06:17:23   5  ,prdate
06:17:23   6  ,trend
06:17:23   7  ,g6
06:17:23   8  ,gatt
06:17:23   9  ,gattn
06:17:23  10  FROM svm6162
06:17:23  11  /

Table created.

Elapsed: 00:00:00.08
06:17:23 SQL> 
06:17:23 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.22
06:17:23 SQL> 
06:17:23 SQL> DROP   TABLE egb_ms610 ;

Table dropped.

Elapsed: 00:00:00.07
06:17:23 SQL> CREATE TABLE egb_ms610 COMPRESS AS
06:17:23   2  SELECT
06:17:23   3  ydate
06:17:23   4  ,trend egb_trend
06:17:23   5  ,g6    egb_g6
06:17:23   6  ,gatt  egb_gatt
06:17:23   7  ,gattn egb_gattn
06:17:23   8  FROM modsrc
06:17:23   9  /

Table created.

Elapsed: 00:00:00.06
06:17:23 SQL> 
06:17:23 SQL> ANALYZE TABLE egb_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
06:17:23 SQL> 
06:17:23 SQL> -- I need a copy of the attributes:
06:17:23 SQL> 
06:17:23 SQL> 
06:17:23 SQL> DROP   TABLE egb_att;

Table dropped.

Elapsed: 00:00:00.06
06:17:23 SQL> CREATE TABLE egb_att COMPRESS AS
06:17:23   2  SELECT
06:17:23   3  ydate
06:17:23   4  ,att00 egb_att00
06:17:23   5  ,att01 egb_att01
06:17:23   6  ,att02 egb_att02
06:17:23   7  ,att03 egb_att03
06:17:23   8  ,att04 egb_att04
06:17:23   9  ,att05 egb_att05
06:17:23  10  ,att06 egb_att06
06:17:23  11  ,att07 egb_att07
06:17:23  12  ,att08 egb_att08
06:17:23  13  ,att09 egb_att09
06:17:23  14  ,att10 egb_att10
06:17:23  15  ,att11 egb_att11
06:17:23  16  ,att12 egb_att12
06:17:23  17  ,att13 egb_att13
06:17:23  18  ,att14 egb_att14
06:17:23  19  ,att15 egb_att15
06:17:23  20  ,att16 egb_att16
06:17:23  21  ,att17 egb_att17
06:17:23  22  ,att18 egb_att18
06:17:23  23  ,att19 egb_att19
06:17:23  24  ,att20 egb_att20
06:17:23  25  ,att21 egb_att21
06:17:23  26  ,att22 egb_att22
06:17:23  27  ,att23 egb_att23
06:17:23  28  ,att24 egb_att24
06:17:23  29  ,att25 egb_att25
06:17:23  30  ,att26 egb_att26
06:17:23  31  ,att27 egb_att27
06:17:23  32  ,att28 egb_att28
06:17:23  33  ,att29 egb_att29
06:17:23  34  ,att30 egb_att30
06:17:23  35  ,att31 egb_att31
06:17:23  36  ,att32 egb_att32
06:17:23  37  ,att33 egb_att33
06:17:23  38  ,att34 egb_att34
06:17:23  39  ,att35 egb_att35
06:17:23  40  ,att36 egb_att36
06:17:23  41  ,att37 egb_att37
06:17:23  42  FROM svm6162
06:17:23  43  /

Table created.

Elapsed: 00:00:00.17
06:17:24 SQL> 
06:17:24 SQL> ANALYZE TABLE egb_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
06:17:24 SQL> 
06:17:24 SQL> -- rpt
06:17:24 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19257

Elapsed: 00:00:00.92
06:17:25 SQL> SELECT COUNT(*)FROM egb_att;

  COUNT(*)
----------
     19257

Elapsed: 00:00:00.01
06:17:25 SQL> 
06:17:25 SQL> --
06:17:25 SQL> -- ejp610.sql
06:17:25 SQL> --
06:17:25 SQL> 
06:17:25 SQL> -- Creates views and tables for backtesting a forex SVM strategy
06:17:25 SQL> 
06:17:25 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.37
06:17:25 SQL> 
06:17:25 SQL> -- I created di5min here:
06:17:25 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
06:17:25 SQL> 
06:17:25 SQL> CREATE OR REPLACE VIEW svm6102 AS
06:17:25   2  SELECT
06:17:25   3  pair
06:17:25   4  ,ydate
06:17:25   5  ,prdate
06:17:25   6  ,rownum rnum -- acts as t in my time-series
06:17:25   7  ,clse
06:17:25   8  -- Derive a bunch of attributes from clse, the latest price:
06:17:25   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
06:17:25  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
06:17:25  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
06:17:25  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
06:17:25  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
06:17:25  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
06:17:25  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
06:17:25  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
06:17:25  17  --
06:17:25  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
06:17:25  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
06:17:25  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
06:17:25  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
06:17:25  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
06:17:25  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
06:17:25  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
06:17:25  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
06:17:25  26  --
06:17:25  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
06:17:25  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
06:17:25  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
06:17:25  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
06:17:25  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
06:17:25  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
06:17:25  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
06:17:25  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
06:17:25  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
06:17:25  36  FROM di5min WHERE pair LIKE'%ejp%'
06:17:25  37  AND ydate > sysdate - 95
06:17:25  38  ORDER BY ydate
06:17:25  39  /

View created.

Elapsed: 00:00:00.05
06:17:25 SQL> 
06:17:25 SQL> -- rpt
06:17:25 SQL> 
06:17:25 SQL> SELECT
06:17:25   2  pair
06:17:25   3  ,COUNT(pair)
06:17:25   4  ,MIN(clse),MAX(clse)
06:17:25   5  ,MIN(avg6),MAX(avg6)
06:17:25   6  ,MIN(ydate),MAX(ydate)
06:17:25   7  FROM svm6102
06:17:25   8  GROUP BY pair
06:17:25   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ejp_usd       19255 107.643765	115.63485 107.776148 115.509678 2010-09-30 06:20:01 2011-01-03 06:10:00

Elapsed: 00:00:00.82
06:17:26 SQL> 
06:17:26 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
06:17:26 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.20
06:17:26 SQL> CREATE TABLE svm6122 COMPRESS AS
06:17:26   2  SELECT
06:17:26   3  pair
06:17:26   4  ,ydate
06:17:26   5  ,prdate
06:17:26   6  ,clse
06:17:26   7  -- g6 is important. I want to predict g6:
06:17:26   8  ,ld6 - clse g6
06:17:26   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
06:17:26  10  -- I want more attributes from the ones I derived above:
06:17:26  11  -- clse relation to moving-min
06:17:26  12  ,clse-min4  cm4
06:17:26  13  ,clse-min6  cm6
06:17:26  14  ,clse-min8  cm8
06:17:26  15  ,clse-min10 cm10
06:17:26  16  ,clse-min12 cm12
06:17:26  17  ,clse-min14 cm14
06:17:26  18  ,clse-min16 cm16
06:17:26  19  ,clse-min18 cm18
06:17:26  20  -- clse relation to moving-avg
06:17:26  21  ,clse-avg4  ca4
06:17:26  22  ,clse-avg6  ca6
06:17:26  23  ,clse-avg8  ca8
06:17:26  24  ,clse-avg10 ca10
06:17:26  25  ,clse-avg12 ca12
06:17:26  26  ,clse-avg14 ca14
06:17:26  27  ,clse-avg16 ca16
06:17:26  28  ,clse-avg18 ca18
06:17:26  29  -- clse relation to moving-max
06:17:26  30  ,clse-max4  cx4
06:17:26  31  ,clse-max6  cx6
06:17:26  32  ,clse-max8  cx8
06:17:26  33  ,clse-max10 cx10
06:17:26  34  ,clse-max12 cx12
06:17:26  35  ,clse-max14 cx14
06:17:26  36  ,clse-max16 cx16
06:17:26  37  ,clse-max18 cx18
06:17:26  38  -- Derive more attributes.
06:17:26  39  -- I want to use CORR() here to help SVM see the shape of the series.
06:17:26  40  -- But COVAR_POP is more stable:
06:17:26  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
06:17:26  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
06:17:26  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
06:17:26  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
06:17:26  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
06:17:26  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
06:17:26  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
06:17:26  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
06:17:26  49  -- Derive date related attributes:
06:17:26  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
06:17:26  51  ,0+TO_CHAR(ydate,'D')d
06:17:26  52  ,0+TO_CHAR(ydate,'W')w
06:17:26  53  -- mpm stands for minutes-past-midnight:
06:17:26  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
06:17:26  55  -- mph stands for minutes-past-hour:
06:17:26  56  ,0+TO_CHAR(ydate,'MI')mph
06:17:26  57  FROM svm6102
06:17:26  58  ORDER BY ydate
06:17:26  59  /

Table created.

Elapsed: 00:00:02.06
06:17:28 SQL> 
06:17:28 SQL> -- rpt
06:17:28 SQL> 
06:17:28 SQL> SELECT
06:17:28   2  pair
06:17:28   3  ,COUNT(pair)
06:17:28   4  ,MIN(clse),MAX(clse)
06:17:28   5  ,MIN(ydate),MAX(ydate)
06:17:28   6  FROM svm6122
06:17:28   7  GROUP BY pair
06:17:28   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ejp_usd       19255 107.643765	115.63485 2010-09-30 06:20:01 2011-01-03 06:10:00

Elapsed: 00:00:00.03
06:17:29 SQL> 
06:17:29 SQL> -- Prepare for derivation of NTILE based params:
06:17:29 SQL> 
06:17:29 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.29
06:17:29 SQL> CREATE TABLE svm6142 COMPRESS AS
06:17:29   2  SELECT
06:17:29   3  pair
06:17:29   4  ,ydate
06:17:29   5  ,prdate
06:17:29   6  ,clse
06:17:29   7  ,g6
06:17:29   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
06:17:29   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
06:17:29  10  ,CASE WHEN trend IS NULL THEN 1
06:17:29  11  	    WHEN trend =0      THEN 1
06:17:29  12  	    ELSE trend END trend
06:17:29  13  ,cm4
06:17:29  14  ,cm6
06:17:29  15  ,cm8
06:17:29  16  ,cm10
06:17:29  17  ,cm12
06:17:29  18  ,cm14
06:17:29  19  ,cm16
06:17:29  20  ,cm18
06:17:29  21  --
06:17:29  22  ,ca4
06:17:29  23  ,ca6
06:17:29  24  ,ca8
06:17:29  25  ,ca10
06:17:29  26  ,ca12
06:17:29  27  ,ca14
06:17:29  28  ,ca16
06:17:29  29  ,ca18
06:17:29  30  --
06:17:29  31  ,cx4
06:17:29  32  ,cx6
06:17:29  33  ,cx8
06:17:29  34  ,cx10
06:17:29  35  ,cx12
06:17:29  36  ,cx14
06:17:29  37  ,cx16
06:17:29  38  ,cx18
06:17:29  39  --
06:17:29  40  ,crr4
06:17:29  41  ,crr6
06:17:29  42  ,crr8
06:17:29  43  ,crr10
06:17:29  44  ,crr12
06:17:29  45  ,crr14
06:17:29  46  ,crr16
06:17:29  47  ,crr18
06:17:29  48  --
06:17:29  49  ,hh
06:17:29  50  ,d
06:17:29  51  ,w
06:17:29  52  ,mpm
06:17:29  53  ,mph
06:17:29  54  FROM svm6122
06:17:29  55  ORDER BY ydate
06:17:29  56  /

Table created.

Elapsed: 00:00:00.39
06:17:29 SQL> 
06:17:29 SQL> -- rpt
06:17:29 SQL> 
06:17:29 SQL> SELECT
06:17:29   2  pair
06:17:29   3  ,trend
06:17:29   4  ,gatt
06:17:29   5  ,COUNT(pair)
06:17:29   6  ,AVG(g6)
06:17:29   7  FROM svm6142
06:17:29   8  GROUP BY pair,trend,gatt
06:17:29   9  ORDER BY pair,trend,gatt
06:17:29  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      4833 -.32543746
ejp_usd 	-1 up	      4799 .268791517
ejp_usd 	-1		72
ejp_usd 	 1 nup	      4904  -.2893313
ejp_usd 	 1 up	      4647 .281674137

Elapsed: 00:00:00.03
06:17:29 SQL> 
06:17:29 SQL> 
06:17:29 SQL> -- Derive NTILE based params:
06:17:29 SQL> 
06:17:29 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.14
06:17:29 SQL> CREATE TABLE svm6162 COMPRESS AS
06:17:29   2  SELECT
06:17:29   3  pair
06:17:29   4  ,ydate
06:17:29   5  ,prdate
06:17:29   6  ,clse
06:17:29   7  ,g6
06:17:29   8  ,gatt
06:17:29   9  ,gattn
06:17:29  10  ,trend
06:17:29  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
06:17:29  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
06:17:29  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
06:17:29  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
06:17:29  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
06:17:29  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
06:17:29  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
06:17:29  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
06:17:29  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
06:17:29  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
06:17:29  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
06:17:29  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
06:17:29  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
06:17:29  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
06:17:29  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
06:17:29  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
06:17:29  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
06:17:29  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
06:17:29  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
06:17:29  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
06:17:29  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
06:17:29  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
06:17:29  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
06:17:29  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
06:17:29  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
06:17:29  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
06:17:29  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
06:17:29  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
06:17:29  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
06:17:29  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
06:17:29  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
06:17:29  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
06:17:29  43  ,hh  att32
06:17:29  44  ,d   att33
06:17:29  45  ,w   att34
06:17:29  46  ,mpm att35
06:17:29  47  ,mph att36
06:17:29  48  ,trend att37
06:17:29  49  FROM svm6142
06:17:29  50  ORDER BY ydate
06:17:29  51  /

Table created.

Elapsed: 00:00:04.82
06:17:34 SQL> 
06:17:34 SQL> -- rpt
06:17:34 SQL> 
06:17:34 SQL> SELECT
06:17:34   2  pair
06:17:34   3  ,trend
06:17:34   4  ,gatt
06:17:34   5  ,COUNT(pair)
06:17:34   6  ,AVG(g6)
06:17:34   7  FROM svm6162
06:17:34   8  GROUP BY pair,trend,gatt
06:17:34   9  ORDER BY pair,trend,gatt
06:17:34  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      4833 -.32543746
ejp_usd 	-1 up	      4799 .268791517
ejp_usd 	-1		72
ejp_usd 	 1 nup	      4904  -.2893313
ejp_usd 	 1 up	      4647 .281674137

Elapsed: 00:00:00.03
06:17:34 SQL> 
06:17:34 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.11
06:17:34 SQL> CREATE TABLE modsrc COMPRESS AS
06:17:34   2  SELECT
06:17:34   3  pair
06:17:34   4  ,ydate
06:17:34   5  ,prdate
06:17:34   6  ,trend
06:17:34   7  ,g6
06:17:34   8  ,gatt
06:17:34   9  ,gattn
06:17:34  10  FROM svm6162
06:17:34  11  /

Table created.

Elapsed: 00:00:00.08
06:17:34 SQL> 
06:17:34 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
06:17:35 SQL> 
06:17:35 SQL> DROP   TABLE ejp_ms610 ;

Table dropped.

Elapsed: 00:00:00.08
06:17:35 SQL> CREATE TABLE ejp_ms610 COMPRESS AS
06:17:35   2  SELECT
06:17:35   3  ydate
06:17:35   4  ,trend ejp_trend
06:17:35   5  ,g6    ejp_g6
06:17:35   6  ,gatt  ejp_gatt
06:17:35   7  ,gattn ejp_gattn
06:17:35   8  FROM modsrc
06:17:35   9  /

Table created.

Elapsed: 00:00:00.07
06:17:35 SQL> 
06:17:35 SQL> ANALYZE TABLE ejp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
06:17:35 SQL> 
06:17:35 SQL> -- I need a copy of the attributes:
06:17:35 SQL> 
06:17:35 SQL> 
06:17:35 SQL> DROP   TABLE ejp_att;

Table dropped.

Elapsed: 00:00:00.08
06:17:35 SQL> CREATE TABLE ejp_att COMPRESS AS
06:17:35   2  SELECT
06:17:35   3  ydate
06:17:35   4  ,att00 ejp_att00
06:17:35   5  ,att01 ejp_att01
06:17:35   6  ,att02 ejp_att02
06:17:35   7  ,att03 ejp_att03
06:17:35   8  ,att04 ejp_att04
06:17:35   9  ,att05 ejp_att05
06:17:35  10  ,att06 ejp_att06
06:17:35  11  ,att07 ejp_att07
06:17:35  12  ,att08 ejp_att08
06:17:35  13  ,att09 ejp_att09
06:17:35  14  ,att10 ejp_att10
06:17:35  15  ,att11 ejp_att11
06:17:35  16  ,att12 ejp_att12
06:17:35  17  ,att13 ejp_att13
06:17:35  18  ,att14 ejp_att14
06:17:35  19  ,att15 ejp_att15
06:17:35  20  ,att16 ejp_att16
06:17:35  21  ,att17 ejp_att17
06:17:35  22  ,att18 ejp_att18
06:17:35  23  ,att19 ejp_att19
06:17:35  24  ,att20 ejp_att20
06:17:35  25  ,att21 ejp_att21
06:17:35  26  ,att22 ejp_att22
06:17:35  27  ,att23 ejp_att23
06:17:35  28  ,att24 ejp_att24
06:17:35  29  ,att25 ejp_att25
06:17:35  30  ,att26 ejp_att26
06:17:35  31  ,att27 ejp_att27
06:17:35  32  ,att28 ejp_att28
06:17:35  33  ,att29 ejp_att29
06:17:35  34  ,att30 ejp_att30
06:17:35  35  ,att31 ejp_att31
06:17:35  36  ,att32 ejp_att32
06:17:35  37  ,att33 ejp_att33
06:17:35  38  ,att34 ejp_att34
06:17:35  39  ,att35 ejp_att35
06:17:35  40  ,att36 ejp_att36
06:17:35  41  ,att37 ejp_att37
06:17:35  42  FROM svm6162
06:17:35  43  /

Table created.

Elapsed: 00:00:00.17
06:17:35 SQL> 
06:17:35 SQL> ANALYZE TABLE ejp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
06:17:36 SQL> 
06:17:36 SQL> -- rpt
06:17:36 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19255

Elapsed: 00:00:00.84
06:17:36 SQL> SELECT COUNT(*)FROM ejp_att;

  COUNT(*)
----------
     19255

Elapsed: 00:00:00.01
06:17:36 SQL> 
06:17:36 SQL> --
06:17:36 SQL> -- ajp610.sql
06:17:36 SQL> --
06:17:36 SQL> 
06:17:36 SQL> -- Creates views and tables for backtesting a forex SVM strategy
06:17:36 SQL> 
06:17:36 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.49
06:17:37 SQL> 
06:17:37 SQL> -- I created di5min here:
06:17:37 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
06:17:37 SQL> 
06:17:37 SQL> CREATE OR REPLACE VIEW svm6102 AS
06:17:37   2  SELECT
06:17:37   3  pair
06:17:37   4  ,ydate
06:17:37   5  ,prdate
06:17:37   6  ,rownum rnum -- acts as t in my time-series
06:17:37   7  ,clse
06:17:37   8  -- Derive a bunch of attributes from clse, the latest price:
06:17:37   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
06:17:37  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
06:17:37  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
06:17:37  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
06:17:37  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
06:17:37  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
06:17:37  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
06:17:37  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
06:17:37  17  --
06:17:37  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
06:17:37  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
06:17:37  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
06:17:37  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
06:17:37  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
06:17:37  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
06:17:37  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
06:17:37  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
06:17:37  26  --
06:17:37  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
06:17:37  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
06:17:37  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
06:17:37  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
06:17:37  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
06:17:37  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
06:17:37  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
06:17:37  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
06:17:37  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
06:17:37  36  FROM di5min WHERE pair LIKE'%ajp%'
06:17:37  37  AND ydate > sysdate - 95
06:17:37  38  ORDER BY ydate
06:17:37  39  /

View created.

Elapsed: 00:00:00.03
06:17:37 SQL> 
06:17:37 SQL> -- rpt
06:17:37 SQL> 
06:17:37 SQL> SELECT
06:17:37   2  pair
06:17:37   3  ,COUNT(pair)
06:17:37   4  ,MIN(clse),MAX(clse)
06:17:37   5  ,MIN(avg6),MAX(avg6)
06:17:37   6  ,MIN(ydate),MAX(ydate)
06:17:37   7  FROM svm6102
06:17:37   8  GROUP BY pair
06:17:37   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ajp_usd       19252  78.249976 83.6669853 78.5106193  83.546306 2010-09-30 06:20:01 2011-01-03 06:10:00

Elapsed: 00:00:00.77
06:17:38 SQL> 
06:17:38 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
06:17:38 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.37
06:17:38 SQL> CREATE TABLE svm6122 COMPRESS AS
06:17:38   2  SELECT
06:17:38   3  pair
06:17:38   4  ,ydate
06:17:38   5  ,prdate
06:17:38   6  ,clse
06:17:38   7  -- g6 is important. I want to predict g6:
06:17:38   8  ,ld6 - clse g6
06:17:38   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
06:17:38  10  -- I want more attributes from the ones I derived above:
06:17:38  11  -- clse relation to moving-min
06:17:38  12  ,clse-min4  cm4
06:17:38  13  ,clse-min6  cm6
06:17:38  14  ,clse-min8  cm8
06:17:38  15  ,clse-min10 cm10
06:17:38  16  ,clse-min12 cm12
06:17:38  17  ,clse-min14 cm14
06:17:38  18  ,clse-min16 cm16
06:17:38  19  ,clse-min18 cm18
06:17:38  20  -- clse relation to moving-avg
06:17:38  21  ,clse-avg4  ca4
06:17:38  22  ,clse-avg6  ca6
06:17:38  23  ,clse-avg8  ca8
06:17:38  24  ,clse-avg10 ca10
06:17:38  25  ,clse-avg12 ca12
06:17:38  26  ,clse-avg14 ca14
06:17:38  27  ,clse-avg16 ca16
06:17:38  28  ,clse-avg18 ca18
06:17:38  29  -- clse relation to moving-max
06:17:38  30  ,clse-max4  cx4
06:17:38  31  ,clse-max6  cx6
06:17:38  32  ,clse-max8  cx8
06:17:38  33  ,clse-max10 cx10
06:17:38  34  ,clse-max12 cx12
06:17:38  35  ,clse-max14 cx14
06:17:38  36  ,clse-max16 cx16
06:17:38  37  ,clse-max18 cx18
06:17:38  38  -- Derive more attributes.
06:17:38  39  -- I want to use CORR() here to help SVM see the shape of the series.
06:17:38  40  -- But COVAR_POP is more stable:
06:17:38  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
06:17:38  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
06:17:38  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
06:17:38  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
06:17:38  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
06:17:38  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
06:17:38  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
06:17:38  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
06:17:38  49  -- Derive date related attributes:
06:17:38  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
06:17:38  51  ,0+TO_CHAR(ydate,'D')d
06:17:38  52  ,0+TO_CHAR(ydate,'W')w
06:17:38  53  -- mpm stands for minutes-past-midnight:
06:17:38  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
06:17:38  55  -- mph stands for minutes-past-hour:
06:17:38  56  ,0+TO_CHAR(ydate,'MI')mph
06:17:38  57  FROM svm6102
06:17:38  58  ORDER BY ydate
06:17:38  59  /

Table created.

Elapsed: 00:00:01.97
06:17:40 SQL> 
06:17:40 SQL> -- rpt
06:17:40 SQL> 
06:17:40 SQL> SELECT
06:17:40   2  pair
06:17:40   3  ,COUNT(pair)
06:17:40   4  ,MIN(clse),MAX(clse)
06:17:40   5  ,MIN(ydate),MAX(ydate)
06:17:40   6  FROM svm6122
06:17:40   7  GROUP BY pair
06:17:40   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ajp_usd       19252  78.249976 83.6669853 2010-09-30 06:20:01 2011-01-03 06:10:00

Elapsed: 00:00:00.04
06:17:40 SQL> 
06:17:40 SQL> -- Prepare for derivation of NTILE based params:
06:17:40 SQL> 
06:17:40 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.20
06:17:40 SQL> CREATE TABLE svm6142 COMPRESS AS
06:17:40   2  SELECT
06:17:40   3  pair
06:17:40   4  ,ydate
06:17:40   5  ,prdate
06:17:40   6  ,clse
06:17:40   7  ,g6
06:17:40   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
06:17:40   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
06:17:40  10  ,CASE WHEN trend IS NULL THEN 1
06:17:40  11  	    WHEN trend =0      THEN 1
06:17:40  12  	    ELSE trend END trend
06:17:40  13  ,cm4
06:17:40  14  ,cm6
06:17:40  15  ,cm8
06:17:40  16  ,cm10
06:17:40  17  ,cm12
06:17:40  18  ,cm14
06:17:40  19  ,cm16
06:17:40  20  ,cm18
06:17:40  21  --
06:17:40  22  ,ca4
06:17:40  23  ,ca6
06:17:40  24  ,ca8
06:17:40  25  ,ca10
06:17:40  26  ,ca12
06:17:40  27  ,ca14
06:17:40  28  ,ca16
06:17:40  29  ,ca18
06:17:40  30  --
06:17:40  31  ,cx4
06:17:40  32  ,cx6
06:17:40  33  ,cx8
06:17:40  34  ,cx10
06:17:40  35  ,cx12
06:17:40  36  ,cx14
06:17:40  37  ,cx16
06:17:40  38  ,cx18
06:17:40  39  --
06:17:40  40  ,crr4
06:17:40  41  ,crr6
06:17:40  42  ,crr8
06:17:40  43  ,crr10
06:17:40  44  ,crr12
06:17:40  45  ,crr14
06:17:40  46  ,crr16
06:17:40  47  ,crr18
06:17:40  48  --
06:17:40  49  ,hh
06:17:40  50  ,d
06:17:40  51  ,w
06:17:40  52  ,mpm
06:17:40  53  ,mph
06:17:40  54  FROM svm6122
06:17:40  55  ORDER BY ydate
06:17:40  56  /

Table created.

Elapsed: 00:00:00.38
06:17:41 SQL> 
06:17:41 SQL> -- rpt
06:17:41 SQL> 
06:17:41 SQL> SELECT
06:17:41   2  pair
06:17:41   3  ,trend
06:17:41   4  ,gatt
06:17:41   5  ,COUNT(pair)
06:17:41   6  ,AVG(g6)
06:17:41   7  FROM svm6142
06:17:41   8  GROUP BY pair,trend,gatt
06:17:41   9  ORDER BY pair,trend,gatt
06:17:41  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ajp_usd 	-1 nup	      4019 -.22864981
ajp_usd 	-1 up	      5135 .222081884
ajp_usd 	-1		55
ajp_usd 	 1 nup	      5235 -.20019847
ajp_usd 	 1 up	      4791 .205528627
ajp_usd 	 1		17

6 rows selected.

Elapsed: 00:00:00.04
06:17:41 SQL> 
06:17:41 SQL> 
06:17:41 SQL> -- Derive NTILE based params:
06:17:41 SQL> 
06:17:41 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.13
06:17:41 SQL> CREATE TABLE svm6162 COMPRESS AS
06:17:41   2  SELECT
06:17:41   3  pair
06:17:41   4  ,ydate
06:17:41   5  ,prdate
06:17:41   6  ,clse
06:17:41   7  ,g6
06:17:41   8  ,gatt
06:17:41   9  ,gattn
06:17:41  10  ,trend
06:17:41  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
06:17:41  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
06:17:41  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
06:17:41  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
06:17:41  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
06:17:41  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
06:17:41  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
06:17:41  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
06:17:41  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
06:17:41  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
06:17:41  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
06:17:41  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
06:17:41  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
06:17:41  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
06:17:41  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
06:17:41  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
06:17:41  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
06:17:41  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
06:17:41  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
06:17:41  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
06:17:41  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
06:17:41  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
06:17:41  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
06:17:41  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
06:17:41  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
06:17:41  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
06:17:41  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
06:17:41  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
06:17:41  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
06:17:41  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
06:17:41  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
06:17:41  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
06:17:41  43  ,hh  att32
06:17:41  44  ,d   att33
06:17:41  45  ,w   att34
06:17:41  46  ,mpm att35
06:17:41  47  ,mph att36
06:17:41  48  ,trend att37
06:17:41  49  FROM svm6142
06:17:41  50  ORDER BY ydate
06:17:41  51  /

Table created.

Elapsed: 00:00:04.94
06:17:46 SQL> 
06:17:46 SQL> -- rpt
06:17:46 SQL> 
06:17:46 SQL> SELECT
06:17:46   2  pair
06:17:46   3  ,trend
06:17:46   4  ,gatt
06:17:46   5  ,COUNT(pair)
06:17:46   6  ,AVG(g6)
06:17:46   7  FROM svm6162
06:17:46   8  GROUP BY pair,trend,gatt
06:17:46   9  ORDER BY pair,trend,gatt
06:17:46  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ajp_usd 	-1 nup	      4019 -.22864981
ajp_usd 	-1 up	      5135 .222081884
ajp_usd 	-1		55
ajp_usd 	 1 nup	      5235 -.20019847
ajp_usd 	 1 up	      4791 .205528627
ajp_usd 	 1		17

6 rows selected.

Elapsed: 00:00:00.03
06:17:46 SQL> 
06:17:46 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
06:17:46 SQL> CREATE TABLE modsrc COMPRESS AS
06:17:46   2  SELECT
06:17:46   3  pair
06:17:46   4  ,ydate
06:17:46   5  ,prdate
06:17:46   6  ,trend
06:17:46   7  ,g6
06:17:46   8  ,gatt
06:17:46   9  ,gattn
06:17:46  10  FROM svm6162
06:17:46  11  /

Table created.

Elapsed: 00:00:00.08
06:17:46 SQL> 
06:17:46 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
06:17:46 SQL> 
06:17:46 SQL> DROP   TABLE ajp_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
06:17:46 SQL> CREATE TABLE ajp_ms610 COMPRESS AS
06:17:46   2  SELECT
06:17:46   3  ydate
06:17:46   4  ,trend ajp_trend
06:17:46   5  ,g6    ajp_g6
06:17:46   6  ,gatt  ajp_gatt
06:17:46   7  ,gattn ajp_gattn
06:17:46   8  FROM modsrc
06:17:46   9  /

Table created.

Elapsed: 00:00:00.07
06:17:46 SQL> 
06:17:46 SQL> ANALYZE TABLE ajp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
06:17:47 SQL> 
06:17:47 SQL> -- I need a copy of the attributes:
06:17:47 SQL> 
06:17:47 SQL> 
06:17:47 SQL> DROP   TABLE ajp_att;

Table dropped.

Elapsed: 00:00:00.05
06:17:47 SQL> CREATE TABLE ajp_att COMPRESS AS
06:17:47   2  SELECT
06:17:47   3  ydate
06:17:47   4  ,att00 ajp_att00
06:17:47   5  ,att01 ajp_att01
06:17:47   6  ,att02 ajp_att02
06:17:47   7  ,att03 ajp_att03
06:17:47   8  ,att04 ajp_att04
06:17:47   9  ,att05 ajp_att05
06:17:47  10  ,att06 ajp_att06
06:17:47  11  ,att07 ajp_att07
06:17:47  12  ,att08 ajp_att08
06:17:47  13  ,att09 ajp_att09
06:17:47  14  ,att10 ajp_att10
06:17:47  15  ,att11 ajp_att11
06:17:47  16  ,att12 ajp_att12
06:17:47  17  ,att13 ajp_att13
06:17:47  18  ,att14 ajp_att14
06:17:47  19  ,att15 ajp_att15
06:17:47  20  ,att16 ajp_att16
06:17:47  21  ,att17 ajp_att17
06:17:47  22  ,att18 ajp_att18
06:17:47  23  ,att19 ajp_att19
06:17:47  24  ,att20 ajp_att20
06:17:47  25  ,att21 ajp_att21
06:17:47  26  ,att22 ajp_att22
06:17:47  27  ,att23 ajp_att23
06:17:47  28  ,att24 ajp_att24
06:17:47  29  ,att25 ajp_att25
06:17:47  30  ,att26 ajp_att26
06:17:47  31  ,att27 ajp_att27
06:17:47  32  ,att28 ajp_att28
06:17:47  33  ,att29 ajp_att29
06:17:47  34  ,att30 ajp_att30
06:17:47  35  ,att31 ajp_att31
06:17:47  36  ,att32 ajp_att32
06:17:47  37  ,att33 ajp_att33
06:17:47  38  ,att34 ajp_att34
06:17:47  39  ,att35 ajp_att35
06:17:47  40  ,att36 ajp_att36
06:17:47  41  ,att37 ajp_att37
06:17:47  42  FROM svm6162
06:17:47  43  /

Table created.

Elapsed: 00:00:00.20
06:17:47 SQL> 
06:17:47 SQL> ANALYZE TABLE ajp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.54
06:17:47 SQL> 
06:17:47 SQL> -- rpt
06:17:47 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19252

Elapsed: 00:00:00.75
06:17:48 SQL> SELECT COUNT(*)FROM ajp_att;

  COUNT(*)
----------
     19252

Elapsed: 00:00:00.00
06:17:48 SQL> 
06:17:48 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
