
SQL*Plus: Release 11.2.0.1.0 Production on Wed Dec 29 03:17:15 2010

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

03:17:16 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
03:17:16 SQL> 03:17:16 SQL> --
03:17:16 SQL> -- eur610.sql
03:17:16 SQL> --
03:17:16 SQL> 
03:17:16 SQL> -- Creates views and tables for backtesting a forex SVM strategy
03:17:16 SQL> 
03:17:16 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.02
03:17:16 SQL> 
03:17:16 SQL> -- I created di5min here:
03:17:16 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
03:17:16 SQL> 
03:17:16 SQL> CREATE OR REPLACE VIEW svm6102 AS
03:17:16   2  SELECT
03:17:16   3  pair
03:17:16   4  ,ydate
03:17:16   5  ,prdate
03:17:16   6  ,rownum rnum -- acts as t in my time-series
03:17:16   7  ,clse
03:17:16   8  -- Derive a bunch of attributes from clse, the latest price:
03:17:16   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
03:17:16  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
03:17:16  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
03:17:16  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
03:17:16  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
03:17:16  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
03:17:16  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
03:17:16  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
03:17:16  17  --
03:17:16  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
03:17:16  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
03:17:16  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
03:17:16  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
03:17:16  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
03:17:16  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
03:17:16  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
03:17:16  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
03:17:16  26  --
03:17:16  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
03:17:16  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
03:17:16  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
03:17:16  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
03:17:16  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
03:17:16  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
03:17:16  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
03:17:16  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
03:17:16  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
03:17:16  36  FROM di5min WHERE pair LIKE'%eur%'
03:17:16  37  AND ydate > sysdate - 95
03:17:16  38  ORDER BY ydate
03:17:16  39  /

View created.

Elapsed: 00:00:00.09
03:17:16 SQL> 
03:17:16 SQL> -- rpt
03:17:16 SQL> 
03:17:16 SQL> SELECT
03:17:16   2  pair
03:17:16   3  ,COUNT(pair)
03:17:16   4  ,MIN(clse),MAX(clse)
03:17:16   5  ,MIN(avg6),MAX(avg6)
03:17:16   6  ,MIN(ydate),MAX(ydate)
03:17:16   7  FROM svm6102
03:17:16   8  GROUP BY pair
03:17:16   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_usd       19346    1.29735	   1.4273 1.29875103 1.42436233 2010-09-26 20:55:01 2010-12-29 03:10:00

Elapsed: 00:00:00.92
03:17:17 SQL> 
03:17:17 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
03:17:17 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.11
03:17:17 SQL> CREATE TABLE svm6122 COMPRESS AS
03:17:17   2  SELECT
03:17:17   3  pair
03:17:17   4  ,ydate
03:17:17   5  ,prdate
03:17:17   6  ,clse
03:17:17   7  -- g6 is important. I want to predict g6:
03:17:17   8  ,ld6 - clse g6
03:17:17   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
03:17:17  10  -- I want more attributes from the ones I derived above:
03:17:17  11  -- clse relation to moving-min
03:17:17  12  ,clse-min4  cm4
03:17:17  13  ,clse-min6  cm6
03:17:17  14  ,clse-min8  cm8
03:17:17  15  ,clse-min10 cm10
03:17:17  16  ,clse-min12 cm12
03:17:17  17  ,clse-min14 cm14
03:17:17  18  ,clse-min16 cm16
03:17:17  19  ,clse-min18 cm18
03:17:17  20  -- clse relation to moving-avg
03:17:17  21  ,clse-avg4  ca4
03:17:17  22  ,clse-avg6  ca6
03:17:17  23  ,clse-avg8  ca8
03:17:17  24  ,clse-avg10 ca10
03:17:17  25  ,clse-avg12 ca12
03:17:17  26  ,clse-avg14 ca14
03:17:17  27  ,clse-avg16 ca16
03:17:17  28  ,clse-avg18 ca18
03:17:17  29  -- clse relation to moving-max
03:17:17  30  ,clse-max4  cx4
03:17:17  31  ,clse-max6  cx6
03:17:17  32  ,clse-max8  cx8
03:17:17  33  ,clse-max10 cx10
03:17:17  34  ,clse-max12 cx12
03:17:17  35  ,clse-max14 cx14
03:17:17  36  ,clse-max16 cx16
03:17:17  37  ,clse-max18 cx18
03:17:17  38  -- Derive more attributes.
03:17:17  39  -- I want to use CORR() here to help SVM see the shape of the series.
03:17:17  40  -- But COVAR_POP is more stable:
03:17:17  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
03:17:17  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
03:17:17  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
03:17:17  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
03:17:17  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
03:17:17  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
03:17:17  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
03:17:17  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
03:17:17  49  -- Derive date related attributes:
03:17:17  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
03:17:17  51  ,0+TO_CHAR(ydate,'D')d
03:17:17  52  ,0+TO_CHAR(ydate,'W')w
03:17:17  53  -- mpm stands for minutes-past-midnight:
03:17:17  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
03:17:17  55  -- mph stands for minutes-past-hour:
03:17:17  56  ,0+TO_CHAR(ydate,'MI')mph
03:17:17  57  FROM svm6102
03:17:17  58  ORDER BY ydate
03:17:17  59  /

Table created.

Elapsed: 00:00:02.34
03:17:19 SQL> 
03:17:19 SQL> -- rpt
03:17:19 SQL> 
03:17:19 SQL> SELECT
03:17:19   2  pair
03:17:19   3  ,COUNT(pair)
03:17:19   4  ,MIN(clse),MAX(clse)
03:17:19   5  ,MIN(ydate),MAX(ydate)
03:17:19   6  FROM svm6122
03:17:19   7  GROUP BY pair
03:17:19   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_usd       19346    1.29735	   1.4273 2010-09-26 20:55:01 2010-12-29 03:10:00

Elapsed: 00:00:00.04
03:17:19 SQL> 
03:17:19 SQL> -- Prepare for derivation of NTILE based params:
03:17:19 SQL> 
03:17:19 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.74
03:17:20 SQL> CREATE TABLE svm6142 COMPRESS AS
03:17:20   2  SELECT
03:17:20   3  pair
03:17:20   4  ,ydate
03:17:20   5  ,prdate
03:17:20   6  ,clse
03:17:20   7  ,g6
03:17:20   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
03:17:20   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
03:17:20  10  ,CASE WHEN trend IS NULL THEN 1
03:17:20  11  	    WHEN trend =0      THEN 1
03:17:20  12  	    ELSE trend END trend
03:17:20  13  ,cm4
03:17:20  14  ,cm6
03:17:20  15  ,cm8
03:17:20  16  ,cm10
03:17:20  17  ,cm12
03:17:20  18  ,cm14
03:17:20  19  ,cm16
03:17:20  20  ,cm18
03:17:20  21  --
03:17:20  22  ,ca4
03:17:20  23  ,ca6
03:17:20  24  ,ca8
03:17:20  25  ,ca10
03:17:20  26  ,ca12
03:17:20  27  ,ca14
03:17:20  28  ,ca16
03:17:20  29  ,ca18
03:17:20  30  --
03:17:20  31  ,cx4
03:17:20  32  ,cx6
03:17:20  33  ,cx8
03:17:20  34  ,cx10
03:17:20  35  ,cx12
03:17:20  36  ,cx14
03:17:20  37  ,cx16
03:17:20  38  ,cx18
03:17:20  39  --
03:17:20  40  ,crr4
03:17:20  41  ,crr6
03:17:20  42  ,crr8
03:17:20  43  ,crr10
03:17:20  44  ,crr12
03:17:20  45  ,crr14
03:17:20  46  ,crr16
03:17:20  47  ,crr18
03:17:20  48  --
03:17:20  49  ,hh
03:17:20  50  ,d
03:17:20  51  ,w
03:17:20  52  ,mpm
03:17:20  53  ,mph
03:17:20  54  FROM svm6122
03:17:20  55  ORDER BY ydate
03:17:20  56  /

Table created.

Elapsed: 00:00:00.40
03:17:20 SQL> 
03:17:20 SQL> -- rpt
03:17:20 SQL> 
03:17:20 SQL> SELECT
03:17:20   2  pair
03:17:20   3  ,trend
03:17:20   4  ,gatt
03:17:20   5  ,COUNT(pair)
03:17:20   6  ,AVG(g6)
03:17:20   7  FROM svm6142
03:17:20   8  GROUP BY pair,trend,gatt
03:17:20   9  ORDER BY pair,trend,gatt
03:17:20  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6120 -.00308799
eur_usd 	-1 up	      3638 .004478907
eur_usd 	-1		49
eur_usd 	 1 nup	      5871 -.00319026
eur_usd 	 1 up	      3645 .005140343
eur_usd 	 1		23

6 rows selected.

Elapsed: 00:00:00.04
03:17:20 SQL> 
03:17:20 SQL> 
03:17:20 SQL> -- Derive NTILE based params:
03:17:20 SQL> 
03:17:20 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.44
03:17:21 SQL> CREATE TABLE svm6162 COMPRESS AS
03:17:21   2  SELECT
03:17:21   3  pair
03:17:21   4  ,ydate
03:17:21   5  ,prdate
03:17:21   6  ,clse
03:17:21   7  ,g6
03:17:21   8  ,gatt
03:17:21   9  ,gattn
03:17:21  10  ,trend
03:17:21  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
03:17:21  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
03:17:21  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
03:17:21  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
03:17:21  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
03:17:21  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
03:17:21  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
03:17:21  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
03:17:21  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
03:17:21  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
03:17:21  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
03:17:21  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
03:17:21  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
03:17:21  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
03:17:21  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
03:17:21  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
03:17:21  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
03:17:21  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
03:17:21  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
03:17:21  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
03:17:21  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
03:17:21  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
03:17:21  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
03:17:21  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
03:17:21  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
03:17:21  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
03:17:21  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
03:17:21  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
03:17:21  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
03:17:21  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
03:17:21  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
03:17:21  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
03:17:21  43  ,hh  att32
03:17:21  44  ,d   att33
03:17:21  45  ,w   att34
03:17:21  46  ,mpm att35
03:17:21  47  ,mph att36
03:17:21  48  ,trend att37
03:17:21  49  FROM svm6142
03:17:21  50  ORDER BY ydate
03:17:21  51  /

Table created.

Elapsed: 00:00:04.77
03:17:26 SQL> 
03:17:26 SQL> -- rpt
03:17:26 SQL> 
03:17:26 SQL> SELECT
03:17:26   2  pair
03:17:26   3  ,trend
03:17:26   4  ,gatt
03:17:26   5  ,COUNT(pair)
03:17:26   6  ,AVG(g6)
03:17:26   7  FROM svm6162
03:17:26   8  GROUP BY pair,trend,gatt
03:17:26   9  ORDER BY pair,trend,gatt
03:17:26  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6120 -.00308799
eur_usd 	-1 up	      3638 .004478907
eur_usd 	-1		49
eur_usd 	 1 nup	      5871 -.00319026
eur_usd 	 1 up	      3645 .005140343
eur_usd 	 1		23

6 rows selected.

Elapsed: 00:00:00.03
03:17:26 SQL> 
03:17:26 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.03
03:17:26 SQL> CREATE TABLE modsrc COMPRESS AS
03:17:26   2  SELECT
03:17:26   3  pair
03:17:26   4  ,ydate
03:17:26   5  ,prdate
03:17:26   6  ,trend
03:17:26   7  ,g6
03:17:26   8  ,gatt
03:17:26   9  ,gattn
03:17:26  10  FROM svm6162
03:17:26  11  /

Table created.

Elapsed: 00:00:00.08
03:17:26 SQL> 
03:17:26 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
03:17:26 SQL> 
03:17:26 SQL> DROP   TABLE eur_ms610 ;

Table dropped.

Elapsed: 00:00:00.06
03:17:26 SQL> CREATE TABLE eur_ms610 COMPRESS AS
03:17:26   2  SELECT
03:17:26   3  ydate
03:17:26   4  ,trend eur_trend
03:17:26   5  ,g6    eur_g6
03:17:26   6  ,gatt  eur_gatt
03:17:26   7  ,gattn eur_gattn
03:17:26   8  FROM modsrc
03:17:26   9  /

Table created.

Elapsed: 00:00:00.07
03:17:26 SQL> 
03:17:26 SQL> ANALYZE TABLE eur_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
03:17:26 SQL> 
03:17:26 SQL> -- I need a copy of the attributes:
03:17:26 SQL> 
03:17:26 SQL> 
03:17:26 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.05
03:17:26 SQL> CREATE TABLE eur_att COMPRESS AS
03:17:26   2  SELECT
03:17:26   3  ydate
03:17:26   4  ,att00 eur_att00
03:17:26   5  ,att01 eur_att01
03:17:26   6  ,att02 eur_att02
03:17:26   7  ,att03 eur_att03
03:17:26   8  ,att04 eur_att04
03:17:26   9  ,att05 eur_att05
03:17:26  10  ,att06 eur_att06
03:17:26  11  ,att07 eur_att07
03:17:26  12  ,att08 eur_att08
03:17:26  13  ,att09 eur_att09
03:17:26  14  ,att10 eur_att10
03:17:26  15  ,att11 eur_att11
03:17:26  16  ,att12 eur_att12
03:17:26  17  ,att13 eur_att13
03:17:26  18  ,att14 eur_att14
03:17:26  19  ,att15 eur_att15
03:17:26  20  ,att16 eur_att16
03:17:26  21  ,att17 eur_att17
03:17:26  22  ,att18 eur_att18
03:17:26  23  ,att19 eur_att19
03:17:26  24  ,att20 eur_att20
03:17:26  25  ,att21 eur_att21
03:17:26  26  ,att22 eur_att22
03:17:26  27  ,att23 eur_att23
03:17:26  28  ,att24 eur_att24
03:17:26  29  ,att25 eur_att25
03:17:26  30  ,att26 eur_att26
03:17:26  31  ,att27 eur_att27
03:17:26  32  ,att28 eur_att28
03:17:26  33  ,att29 eur_att29
03:17:26  34  ,att30 eur_att30
03:17:26  35  ,att31 eur_att31
03:17:26  36  ,att32 eur_att32
03:17:26  37  ,att33 eur_att33
03:17:26  38  ,att34 eur_att34
03:17:26  39  ,att35 eur_att35
03:17:26  40  ,att36 eur_att36
03:17:26  41  ,att37 eur_att37
03:17:26  42  FROM svm6162
03:17:26  43  /

Table created.

Elapsed: 00:00:00.17
03:17:26 SQL> 
03:17:26 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
03:17:27 SQL> 
03:17:27 SQL> -- rpt
03:17:27 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19346

Elapsed: 00:00:00.87
03:17:28 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     19346

Elapsed: 00:00:00.00
03:17:28 SQL> 
03:17:28 SQL> --
03:17:28 SQL> -- aud610.sql
03:17:28 SQL> --
03:17:28 SQL> 
03:17:28 SQL> -- Creates views and tables for backtesting a forex SVM strategy
03:17:28 SQL> 
03:17:28 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.50
03:17:28 SQL> 
03:17:28 SQL> -- I created di5min here:
03:17:28 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
03:17:28 SQL> 
03:17:28 SQL> CREATE OR REPLACE VIEW svm6102 AS
03:17:28   2  SELECT
03:17:28   3  pair
03:17:28   4  ,ydate
03:17:28   5  ,prdate
03:17:28   6  ,rownum rnum -- acts as t in my time-series
03:17:28   7  ,clse
03:17:28   8  -- Derive a bunch of attributes from clse, the latest price:
03:17:28   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
03:17:28  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
03:17:28  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
03:17:28  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
03:17:28  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
03:17:28  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
03:17:28  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
03:17:28  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
03:17:28  17  --
03:17:28  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
03:17:28  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
03:17:28  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
03:17:28  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
03:17:28  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
03:17:28  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
03:17:28  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
03:17:28  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
03:17:28  26  --
03:17:28  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
03:17:28  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
03:17:28  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
03:17:28  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
03:17:28  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
03:17:28  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
03:17:28  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
03:17:28  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
03:17:28  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
03:17:28  36  FROM di5min WHERE pair LIKE'%aud%'
03:17:28  37  AND ydate > sysdate - 95
03:17:28  38  ORDER BY ydate
03:17:28  39  /

View created.

Elapsed: 00:00:00.04
03:17:28 SQL> 
03:17:28 SQL> -- rpt
03:17:28 SQL> 
03:17:28 SQL> SELECT
03:17:28   2  pair
03:17:28   3  ,COUNT(pair)
03:17:28   4  ,MIN(clse),MAX(clse)
03:17:28   5  ,MIN(avg6),MAX(avg6)
03:17:28   6  ,MIN(ydate),MAX(ydate)
03:17:28   7  FROM svm6102
03:17:28   8  GROUP BY pair
03:17:28   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
aud_usd       19343	.95405	   1.0181 .957141438 1.01556438 2010-09-26 20:55:01 2010-12-29 03:10:00

Elapsed: 00:00:00.84
03:17:29 SQL> 
03:17:29 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
03:17:29 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.23
03:17:29 SQL> CREATE TABLE svm6122 COMPRESS AS
03:17:29   2  SELECT
03:17:29   3  pair
03:17:29   4  ,ydate
03:17:29   5  ,prdate
03:17:29   6  ,clse
03:17:29   7  -- g6 is important. I want to predict g6:
03:17:29   8  ,ld6 - clse g6
03:17:29   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
03:17:29  10  -- I want more attributes from the ones I derived above:
03:17:29  11  -- clse relation to moving-min
03:17:29  12  ,clse-min4  cm4
03:17:29  13  ,clse-min6  cm6
03:17:29  14  ,clse-min8  cm8
03:17:29  15  ,clse-min10 cm10
03:17:29  16  ,clse-min12 cm12
03:17:29  17  ,clse-min14 cm14
03:17:29  18  ,clse-min16 cm16
03:17:29  19  ,clse-min18 cm18
03:17:29  20  -- clse relation to moving-avg
03:17:29  21  ,clse-avg4  ca4
03:17:29  22  ,clse-avg6  ca6
03:17:29  23  ,clse-avg8  ca8
03:17:29  24  ,clse-avg10 ca10
03:17:29  25  ,clse-avg12 ca12
03:17:29  26  ,clse-avg14 ca14
03:17:29  27  ,clse-avg16 ca16
03:17:29  28  ,clse-avg18 ca18
03:17:29  29  -- clse relation to moving-max
03:17:29  30  ,clse-max4  cx4
03:17:29  31  ,clse-max6  cx6
03:17:29  32  ,clse-max8  cx8
03:17:29  33  ,clse-max10 cx10
03:17:29  34  ,clse-max12 cx12
03:17:29  35  ,clse-max14 cx14
03:17:29  36  ,clse-max16 cx16
03:17:29  37  ,clse-max18 cx18
03:17:29  38  -- Derive more attributes.
03:17:29  39  -- I want to use CORR() here to help SVM see the shape of the series.
03:17:29  40  -- But COVAR_POP is more stable:
03:17:29  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
03:17:29  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
03:17:29  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
03:17:29  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
03:17:29  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
03:17:29  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
03:17:29  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
03:17:29  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
03:17:29  49  -- Derive date related attributes:
03:17:29  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
03:17:29  51  ,0+TO_CHAR(ydate,'D')d
03:17:29  52  ,0+TO_CHAR(ydate,'W')w
03:17:29  53  -- mpm stands for minutes-past-midnight:
03:17:29  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
03:17:29  55  -- mph stands for minutes-past-hour:
03:17:29  56  ,0+TO_CHAR(ydate,'MI')mph
03:17:29  57  FROM svm6102
03:17:29  58  ORDER BY ydate
03:17:29  59  /

Table created.

Elapsed: 00:00:01.99
03:17:31 SQL> 
03:17:31 SQL> -- rpt
03:17:31 SQL> 
03:17:31 SQL> SELECT
03:17:31   2  pair
03:17:31   3  ,COUNT(pair)
03:17:31   4  ,MIN(clse),MAX(clse)
03:17:31   5  ,MIN(ydate),MAX(ydate)
03:17:31   6  FROM svm6122
03:17:31   7  GROUP BY pair
03:17:31   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
aud_usd       19343	.95405	   1.0181 2010-09-26 20:55:01 2010-12-29 03:10:00

Elapsed: 00:00:00.07
03:17:31 SQL> 
03:17:31 SQL> -- Prepare for derivation of NTILE based params:
03:17:31 SQL> 
03:17:31 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.16
03:17:32 SQL> CREATE TABLE svm6142 COMPRESS AS
03:17:32   2  SELECT
03:17:32   3  pair
03:17:32   4  ,ydate
03:17:32   5  ,prdate
03:17:32   6  ,clse
03:17:32   7  ,g6
03:17:32   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
03:17:32   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
03:17:32  10  ,CASE WHEN trend IS NULL THEN 1
03:17:32  11  	    WHEN trend =0      THEN 1
03:17:32  12  	    ELSE trend END trend
03:17:32  13  ,cm4
03:17:32  14  ,cm6
03:17:32  15  ,cm8
03:17:32  16  ,cm10
03:17:32  17  ,cm12
03:17:32  18  ,cm14
03:17:32  19  ,cm16
03:17:32  20  ,cm18
03:17:32  21  --
03:17:32  22  ,ca4
03:17:32  23  ,ca6
03:17:32  24  ,ca8
03:17:32  25  ,ca10
03:17:32  26  ,ca12
03:17:32  27  ,ca14
03:17:32  28  ,ca16
03:17:32  29  ,ca18
03:17:32  30  --
03:17:32  31  ,cx4
03:17:32  32  ,cx6
03:17:32  33  ,cx8
03:17:32  34  ,cx10
03:17:32  35  ,cx12
03:17:32  36  ,cx14
03:17:32  37  ,cx16
03:17:32  38  ,cx18
03:17:32  39  --
03:17:32  40  ,crr4
03:17:32  41  ,crr6
03:17:32  42  ,crr8
03:17:32  43  ,crr10
03:17:32  44  ,crr12
03:17:32  45  ,crr14
03:17:32  46  ,crr16
03:17:32  47  ,crr18
03:17:32  48  --
03:17:32  49  ,hh
03:17:32  50  ,d
03:17:32  51  ,w
03:17:32  52  ,mpm
03:17:32  53  ,mph
03:17:32  54  FROM svm6122
03:17:32  55  ORDER BY ydate
03:17:32  56  /

Table created.

Elapsed: 00:00:00.36
03:17:32 SQL> 
03:17:32 SQL> -- rpt
03:17:32 SQL> 
03:17:32 SQL> SELECT
03:17:32   2  pair
03:17:32   3  ,trend
03:17:32   4  ,gatt
03:17:32   5  ,COUNT(pair)
03:17:32   6  ,AVG(g6)
03:17:32   7  FROM svm6142
03:17:32   8  GROUP BY pair,trend,gatt
03:17:32   9  ORDER BY pair,trend,gatt
03:17:32  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5173 -.00213677
aud_usd 	-1 up	      3772 .003741417
aud_usd 	-1		58
aud_usd 	 1 nup	      6679 -.00213644
aud_usd 	 1 up	      3647 .004062925
aud_usd 	 1		14

6 rows selected.

Elapsed: 00:00:00.11
03:17:32 SQL> 
03:17:32 SQL> 
03:17:32 SQL> -- Derive NTILE based params:
03:17:32 SQL> 
03:17:32 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.18
03:17:32 SQL> CREATE TABLE svm6162 COMPRESS AS
03:17:32   2  SELECT
03:17:32   3  pair
03:17:32   4  ,ydate
03:17:32   5  ,prdate
03:17:32   6  ,clse
03:17:32   7  ,g6
03:17:32   8  ,gatt
03:17:32   9  ,gattn
03:17:32  10  ,trend
03:17:32  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
03:17:32  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
03:17:32  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
03:17:32  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
03:17:32  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
03:17:32  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
03:17:32  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
03:17:32  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
03:17:32  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
03:17:32  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
03:17:32  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
03:17:32  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
03:17:32  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
03:17:32  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
03:17:32  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
03:17:32  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
03:17:32  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
03:17:32  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
03:17:32  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
03:17:32  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
03:17:32  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
03:17:32  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
03:17:32  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
03:17:32  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
03:17:32  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
03:17:32  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
03:17:32  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
03:17:32  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
03:17:32  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
03:17:32  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
03:17:32  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
03:17:32  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
03:17:32  43  ,hh  att32
03:17:32  44  ,d   att33
03:17:32  45  ,w   att34
03:17:32  46  ,mpm att35
03:17:32  47  ,mph att36
03:17:32  48  ,trend att37
03:17:32  49  FROM svm6142
03:17:32  50  ORDER BY ydate
03:17:32  51  /

Table created.

Elapsed: 00:00:04.66
03:17:37 SQL> 
03:17:37 SQL> -- rpt
03:17:37 SQL> 
03:17:37 SQL> SELECT
03:17:37   2  pair
03:17:37   3  ,trend
03:17:37   4  ,gatt
03:17:37   5  ,COUNT(pair)
03:17:37   6  ,AVG(g6)
03:17:37   7  FROM svm6162
03:17:37   8  GROUP BY pair,trend,gatt
03:17:37   9  ORDER BY pair,trend,gatt
03:17:37  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5173 -.00213677
aud_usd 	-1 up	      3772 .003741417
aud_usd 	-1		58
aud_usd 	 1 nup	      6679 -.00213644
aud_usd 	 1 up	      3647 .004062925
aud_usd 	 1		14

6 rows selected.

Elapsed: 00:00:00.05
03:17:37 SQL> 
03:17:37 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.20
03:17:37 SQL> CREATE TABLE modsrc COMPRESS AS
03:17:37   2  SELECT
03:17:37   3  pair
03:17:37   4  ,ydate
03:17:37   5  ,prdate
03:17:37   6  ,trend
03:17:37   7  ,g6
03:17:37   8  ,gatt
03:17:37   9  ,gattn
03:17:37  10  FROM svm6162
03:17:37  11  /

Table created.

Elapsed: 00:00:00.09
03:17:37 SQL> 
03:17:37 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.24
03:17:38 SQL> 
03:17:38 SQL> DROP   TABLE aud_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
03:17:38 SQL> CREATE TABLE aud_ms610 COMPRESS AS
03:17:38   2  SELECT
03:17:38   3  ydate
03:17:38   4  ,trend aud_trend
03:17:38   5  ,g6    aud_g6
03:17:38   6  ,gatt  aud_gatt
03:17:38   7  ,gattn aud_gattn
03:17:38   8  FROM modsrc
03:17:38   9  /

Table created.

Elapsed: 00:00:00.06
03:17:38 SQL> 
03:17:38 SQL> ANALYZE TABLE aud_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
03:17:38 SQL> 
03:17:38 SQL> -- I need a copy of the attributes:
03:17:38 SQL> 
03:17:38 SQL> 
03:17:38 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.05
03:17:38 SQL> CREATE TABLE aud_att COMPRESS AS
03:17:38   2  SELECT
03:17:38   3  ydate
03:17:38   4  ,att00 aud_att00
03:17:38   5  ,att01 aud_att01
03:17:38   6  ,att02 aud_att02
03:17:38   7  ,att03 aud_att03
03:17:38   8  ,att04 aud_att04
03:17:38   9  ,att05 aud_att05
03:17:38  10  ,att06 aud_att06
03:17:38  11  ,att07 aud_att07
03:17:38  12  ,att08 aud_att08
03:17:38  13  ,att09 aud_att09
03:17:38  14  ,att10 aud_att10
03:17:38  15  ,att11 aud_att11
03:17:38  16  ,att12 aud_att12
03:17:38  17  ,att13 aud_att13
03:17:38  18  ,att14 aud_att14
03:17:38  19  ,att15 aud_att15
03:17:38  20  ,att16 aud_att16
03:17:38  21  ,att17 aud_att17
03:17:38  22  ,att18 aud_att18
03:17:38  23  ,att19 aud_att19
03:17:38  24  ,att20 aud_att20
03:17:38  25  ,att21 aud_att21
03:17:38  26  ,att22 aud_att22
03:17:38  27  ,att23 aud_att23
03:17:38  28  ,att24 aud_att24
03:17:38  29  ,att25 aud_att25
03:17:38  30  ,att26 aud_att26
03:17:38  31  ,att27 aud_att27
03:17:38  32  ,att28 aud_att28
03:17:38  33  ,att29 aud_att29
03:17:38  34  ,att30 aud_att30
03:17:38  35  ,att31 aud_att31
03:17:38  36  ,att32 aud_att32
03:17:38  37  ,att33 aud_att33
03:17:38  38  ,att34 aud_att34
03:17:38  39  ,att35 aud_att35
03:17:38  40  ,att36 aud_att36
03:17:38  41  ,att37 aud_att37
03:17:38  42  FROM svm6162
03:17:38  43  /

Table created.

Elapsed: 00:00:00.20
03:17:38 SQL> 
03:17:38 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.42
03:17:38 SQL> 
03:17:38 SQL> -- rpt
03:17:38 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19343

Elapsed: 00:00:00.82
03:17:39 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     19343

Elapsed: 00:00:00.01
03:17:39 SQL> 
03:17:39 SQL> --
03:17:39 SQL> -- gbp610.sql
03:17:39 SQL> --
03:17:39 SQL> 
03:17:39 SQL> -- Creates views and tables for backtesting a forex SVM strategy
03:17:39 SQL> 
03:17:39 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.39
03:17:40 SQL> 
03:17:40 SQL> -- I created di5min here:
03:17:40 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
03:17:40 SQL> 
03:17:40 SQL> CREATE OR REPLACE VIEW svm6102 AS
03:17:40   2  SELECT
03:17:40   3  pair
03:17:40   4  ,ydate
03:17:40   5  ,prdate
03:17:40   6  ,rownum rnum -- acts as t in my time-series
03:17:40   7  ,clse
03:17:40   8  -- Derive a bunch of attributes from clse, the latest price:
03:17:40   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
03:17:40  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
03:17:40  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
03:17:40  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
03:17:40  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
03:17:40  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
03:17:40  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
03:17:40  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
03:17:40  17  --
03:17:40  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
03:17:40  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
03:17:40  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
03:17:40  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
03:17:40  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
03:17:40  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
03:17:40  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
03:17:40  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
03:17:40  26  --
03:17:40  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
03:17:40  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
03:17:40  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
03:17:40  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
03:17:40  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
03:17:40  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
03:17:40  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
03:17:40  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
03:17:40  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
03:17:40  36  FROM di5min WHERE pair LIKE'%gbp%'
03:17:40  37  AND ydate > sysdate - 95
03:17:40  38  ORDER BY ydate
03:17:40  39  /

View created.

Elapsed: 00:00:00.06
03:17:40 SQL> 
03:17:40 SQL> -- rpt
03:17:40 SQL> 
03:17:40 SQL> SELECT
03:17:40   2  pair
03:17:40   3  ,COUNT(pair)
03:17:40   4  ,MIN(clse),MAX(clse)
03:17:40   5  ,MIN(avg6),MAX(avg6)
03:17:40   6  ,MIN(ydate),MAX(ydate)
03:17:40   7  FROM svm6102
03:17:40   8  GROUP BY pair
03:17:40   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
gbp_usd       19345   1.535325	   1.6295 1.53696747 1.62716986 2010-09-26 20:55:01 2010-12-29 03:10:00

Elapsed: 00:00:00.82
03:17:41 SQL> 
03:17:41 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
03:17:41 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.18
03:17:41 SQL> CREATE TABLE svm6122 COMPRESS AS
03:17:41   2  SELECT
03:17:41   3  pair
03:17:41   4  ,ydate
03:17:41   5  ,prdate
03:17:41   6  ,clse
03:17:41   7  -- g6 is important. I want to predict g6:
03:17:41   8  ,ld6 - clse g6
03:17:41   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
03:17:41  10  -- I want more attributes from the ones I derived above:
03:17:41  11  -- clse relation to moving-min
03:17:41  12  ,clse-min4  cm4
03:17:41  13  ,clse-min6  cm6
03:17:41  14  ,clse-min8  cm8
03:17:41  15  ,clse-min10 cm10
03:17:41  16  ,clse-min12 cm12
03:17:41  17  ,clse-min14 cm14
03:17:41  18  ,clse-min16 cm16
03:17:41  19  ,clse-min18 cm18
03:17:41  20  -- clse relation to moving-avg
03:17:41  21  ,clse-avg4  ca4
03:17:41  22  ,clse-avg6  ca6
03:17:41  23  ,clse-avg8  ca8
03:17:41  24  ,clse-avg10 ca10
03:17:41  25  ,clse-avg12 ca12
03:17:41  26  ,clse-avg14 ca14
03:17:41  27  ,clse-avg16 ca16
03:17:41  28  ,clse-avg18 ca18
03:17:41  29  -- clse relation to moving-max
03:17:41  30  ,clse-max4  cx4
03:17:41  31  ,clse-max6  cx6
03:17:41  32  ,clse-max8  cx8
03:17:41  33  ,clse-max10 cx10
03:17:41  34  ,clse-max12 cx12
03:17:41  35  ,clse-max14 cx14
03:17:41  36  ,clse-max16 cx16
03:17:41  37  ,clse-max18 cx18
03:17:41  38  -- Derive more attributes.
03:17:41  39  -- I want to use CORR() here to help SVM see the shape of the series.
03:17:41  40  -- But COVAR_POP is more stable:
03:17:41  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
03:17:41  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
03:17:41  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
03:17:41  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
03:17:41  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
03:17:41  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
03:17:41  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
03:17:41  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
03:17:41  49  -- Derive date related attributes:
03:17:41  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
03:17:41  51  ,0+TO_CHAR(ydate,'D')d
03:17:41  52  ,0+TO_CHAR(ydate,'W')w
03:17:41  53  -- mpm stands for minutes-past-midnight:
03:17:41  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
03:17:41  55  -- mph stands for minutes-past-hour:
03:17:41  56  ,0+TO_CHAR(ydate,'MI')mph
03:17:41  57  FROM svm6102
03:17:41  58  ORDER BY ydate
03:17:41  59  /

Table created.

Elapsed: 00:00:01.98
03:17:43 SQL> 
03:17:43 SQL> -- rpt
03:17:43 SQL> 
03:17:43 SQL> SELECT
03:17:43   2  pair
03:17:43   3  ,COUNT(pair)
03:17:43   4  ,MIN(clse),MAX(clse)
03:17:43   5  ,MIN(ydate),MAX(ydate)
03:17:43   6  FROM svm6122
03:17:43   7  GROUP BY pair
03:17:43   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
gbp_usd       19345   1.535325	   1.6295 2010-09-26 20:55:01 2010-12-29 03:10:00

Elapsed: 00:00:00.09
03:17:43 SQL> 
03:17:43 SQL> -- Prepare for derivation of NTILE based params:
03:17:43 SQL> 
03:17:43 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.26
03:17:43 SQL> CREATE TABLE svm6142 COMPRESS AS
03:17:43   2  SELECT
03:17:43   3  pair
03:17:43   4  ,ydate
03:17:43   5  ,prdate
03:17:43   6  ,clse
03:17:43   7  ,g6
03:17:43   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
03:17:43   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
03:17:43  10  ,CASE WHEN trend IS NULL THEN 1
03:17:43  11  	    WHEN trend =0      THEN 1
03:17:43  12  	    ELSE trend END trend
03:17:43  13  ,cm4
03:17:43  14  ,cm6
03:17:43  15  ,cm8
03:17:43  16  ,cm10
03:17:43  17  ,cm12
03:17:43  18  ,cm14
03:17:43  19  ,cm16
03:17:43  20  ,cm18
03:17:43  21  --
03:17:43  22  ,ca4
03:17:43  23  ,ca6
03:17:43  24  ,ca8
03:17:43  25  ,ca10
03:17:43  26  ,ca12
03:17:43  27  ,ca14
03:17:43  28  ,ca16
03:17:43  29  ,ca18
03:17:43  30  --
03:17:43  31  ,cx4
03:17:43  32  ,cx6
03:17:43  33  ,cx8
03:17:43  34  ,cx10
03:17:43  35  ,cx12
03:17:43  36  ,cx14
03:17:43  37  ,cx16
03:17:43  38  ,cx18
03:17:43  39  --
03:17:43  40  ,crr4
03:17:43  41  ,crr6
03:17:43  42  ,crr8
03:17:43  43  ,crr10
03:17:43  44  ,crr12
03:17:43  45  ,crr14
03:17:43  46  ,crr16
03:17:43  47  ,crr18
03:17:43  48  --
03:17:43  49  ,hh
03:17:43  50  ,d
03:17:43  51  ,w
03:17:43  52  ,mpm
03:17:43  53  ,mph
03:17:43  54  FROM svm6122
03:17:43  55  ORDER BY ydate
03:17:43  56  /

Table created.

Elapsed: 00:00:00.36
03:17:43 SQL> 
03:17:43 SQL> -- rpt
03:17:43 SQL> 
03:17:43 SQL> SELECT
03:17:43   2  pair
03:17:43   3  ,trend
03:17:43   4  ,gatt
03:17:43   5  ,COUNT(pair)
03:17:43   6  ,AVG(g6)
03:17:43   7  FROM svm6142
03:17:43   8  GROUP BY pair,trend,gatt
03:17:43   9  ORDER BY pair,trend,gatt
03:17:43  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6292 -.00256202
gbp_usd 	-1 up	      3496 .004246618
gbp_usd 	-1		26
gbp_usd 	 1 nup	      6124 -.00270402
gbp_usd 	 1 up	      3361 .004356966
gbp_usd 	 1		46

6 rows selected.

Elapsed: 00:00:00.05
03:17:43 SQL> 
03:17:43 SQL> 
03:17:43 SQL> -- Derive NTILE based params:
03:17:43 SQL> 
03:17:43 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.12
03:17:44 SQL> CREATE TABLE svm6162 COMPRESS AS
03:17:44   2  SELECT
03:17:44   3  pair
03:17:44   4  ,ydate
03:17:44   5  ,prdate
03:17:44   6  ,clse
03:17:44   7  ,g6
03:17:44   8  ,gatt
03:17:44   9  ,gattn
03:17:44  10  ,trend
03:17:44  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
03:17:44  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
03:17:44  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
03:17:44  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
03:17:44  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
03:17:44  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
03:17:44  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
03:17:44  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
03:17:44  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
03:17:44  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
03:17:44  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
03:17:44  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
03:17:44  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
03:17:44  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
03:17:44  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
03:17:44  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
03:17:44  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
03:17:44  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
03:17:44  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
03:17:44  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
03:17:44  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
03:17:44  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
03:17:44  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
03:17:44  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
03:17:44  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
03:17:44  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
03:17:44  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
03:17:44  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
03:17:44  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
03:17:44  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
03:17:44  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
03:17:44  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
03:17:44  43  ,hh  att32
03:17:44  44  ,d   att33
03:17:44  45  ,w   att34
03:17:44  46  ,mpm att35
03:17:44  47  ,mph att36
03:17:44  48  ,trend att37
03:17:44  49  FROM svm6142
03:17:44  50  ORDER BY ydate
03:17:44  51  /

Table created.

Elapsed: 00:00:04.62
03:17:48 SQL> 
03:17:48 SQL> -- rpt
03:17:48 SQL> 
03:17:48 SQL> SELECT
03:17:48   2  pair
03:17:48   3  ,trend
03:17:48   4  ,gatt
03:17:48   5  ,COUNT(pair)
03:17:48   6  ,AVG(g6)
03:17:48   7  FROM svm6162
03:17:48   8  GROUP BY pair,trend,gatt
03:17:48   9  ORDER BY pair,trend,gatt
03:17:48  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6292 -.00256202
gbp_usd 	-1 up	      3496 .004246618
gbp_usd 	-1		26
gbp_usd 	 1 nup	      6124 -.00270402
gbp_usd 	 1 up	      3361 .004356966
gbp_usd 	 1		46

6 rows selected.

Elapsed: 00:00:00.03
03:17:48 SQL> 
03:17:48 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.18
03:17:48 SQL> CREATE TABLE modsrc COMPRESS AS
03:17:48   2  SELECT
03:17:48   3  pair
03:17:48   4  ,ydate
03:17:48   5  ,prdate
03:17:48   6  ,trend
03:17:48   7  ,g6
03:17:48   8  ,gatt
03:17:48   9  ,gattn
03:17:48  10  FROM svm6162
03:17:48  11  /

Table created.

Elapsed: 00:00:00.11
03:17:49 SQL> 
03:17:49 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.27
03:17:49 SQL> 
03:17:49 SQL> DROP   TABLE gbp_ms610 ;

Table dropped.

Elapsed: 00:00:00.08
03:17:49 SQL> CREATE TABLE gbp_ms610 COMPRESS AS
03:17:49   2  SELECT
03:17:49   3  ydate
03:17:49   4  ,trend gbp_trend
03:17:49   5  ,g6    gbp_g6
03:17:49   6  ,gatt  gbp_gatt
03:17:49   7  ,gattn gbp_gattn
03:17:49   8  FROM modsrc
03:17:49   9  /

Table created.

Elapsed: 00:00:00.06
03:17:49 SQL> 
03:17:49 SQL> ANALYZE TABLE gbp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
03:17:49 SQL> 
03:17:49 SQL> -- I need a copy of the attributes:
03:17:49 SQL> 
03:17:49 SQL> 
03:17:49 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.11
03:17:49 SQL> CREATE TABLE gbp_att COMPRESS AS
03:17:49   2  SELECT
03:17:49   3  ydate
03:17:49   4  ,att00 gbp_att00
03:17:49   5  ,att01 gbp_att01
03:17:49   6  ,att02 gbp_att02
03:17:49   7  ,att03 gbp_att03
03:17:49   8  ,att04 gbp_att04
03:17:49   9  ,att05 gbp_att05
03:17:49  10  ,att06 gbp_att06
03:17:49  11  ,att07 gbp_att07
03:17:49  12  ,att08 gbp_att08
03:17:49  13  ,att09 gbp_att09
03:17:49  14  ,att10 gbp_att10
03:17:49  15  ,att11 gbp_att11
03:17:49  16  ,att12 gbp_att12
03:17:49  17  ,att13 gbp_att13
03:17:49  18  ,att14 gbp_att14
03:17:49  19  ,att15 gbp_att15
03:17:49  20  ,att16 gbp_att16
03:17:49  21  ,att17 gbp_att17
03:17:49  22  ,att18 gbp_att18
03:17:49  23  ,att19 gbp_att19
03:17:49  24  ,att20 gbp_att20
03:17:49  25  ,att21 gbp_att21
03:17:49  26  ,att22 gbp_att22
03:17:49  27  ,att23 gbp_att23
03:17:49  28  ,att24 gbp_att24
03:17:49  29  ,att25 gbp_att25
03:17:49  30  ,att26 gbp_att26
03:17:49  31  ,att27 gbp_att27
03:17:49  32  ,att28 gbp_att28
03:17:49  33  ,att29 gbp_att29
03:17:49  34  ,att30 gbp_att30
03:17:49  35  ,att31 gbp_att31
03:17:49  36  ,att32 gbp_att32
03:17:49  37  ,att33 gbp_att33
03:17:49  38  ,att34 gbp_att34
03:17:49  39  ,att35 gbp_att35
03:17:49  40  ,att36 gbp_att36
03:17:49  41  ,att37 gbp_att37
03:17:49  42  FROM svm6162
03:17:49  43  /

Table created.

Elapsed: 00:00:00.17
03:17:49 SQL> 
03:17:49 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
03:17:50 SQL> 
03:17:50 SQL> -- rpt
03:17:50 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19345

Elapsed: 00:00:00.83
03:17:51 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     19345

Elapsed: 00:00:00.00
03:17:51 SQL> 
03:17:51 SQL> --
03:17:51 SQL> -- jpy610.sql
03:17:51 SQL> --
03:17:51 SQL> 
03:17:51 SQL> -- Creates views and tables for backtesting a forex SVM strategy
03:17:51 SQL> 
03:17:51 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.47
03:17:51 SQL> 
03:17:51 SQL> -- I created di5min here:
03:17:51 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
03:17:51 SQL> 
03:17:51 SQL> CREATE OR REPLACE VIEW svm6102 AS
03:17:51   2  SELECT
03:17:51   3  pair
03:17:51   4  ,ydate
03:17:51   5  ,prdate
03:17:51   6  ,rownum rnum -- acts as t in my time-series
03:17:51   7  ,clse
03:17:51   8  -- Derive a bunch of attributes from clse, the latest price:
03:17:51   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
03:17:51  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
03:17:51  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
03:17:51  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
03:17:51  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
03:17:51  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
03:17:51  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
03:17:51  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
03:17:51  17  --
03:17:51  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
03:17:51  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
03:17:51  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
03:17:51  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
03:17:51  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
03:17:51  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
03:17:51  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
03:17:51  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
03:17:51  26  --
03:17:51  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
03:17:51  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
03:17:51  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
03:17:51  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
03:17:51  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
03:17:51  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
03:17:51  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
03:17:51  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
03:17:51  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
03:17:51  36  FROM di5min WHERE pair LIKE'%jpy%'
03:17:51  37  AND ydate > sysdate - 95
03:17:51  38  ORDER BY ydate
03:17:51  39  /

View created.

Elapsed: 00:00:00.04
03:17:51 SQL> 
03:17:51 SQL> -- rpt
03:17:51 SQL> 
03:17:51 SQL> SELECT
03:17:51   2  pair
03:17:51   3  ,COUNT(pair)
03:17:51   4  ,MIN(clse),MAX(clse)
03:17:51   5  ,MIN(avg6),MAX(avg6)
03:17:51   6  ,MIN(ydate),MAX(ydate)
03:17:51   7  FROM svm6102
03:17:51   8  GROUP BY pair
03:17:51   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_jpy       19342	 80.25	   84.485 80.3595205 84.3105479 2010-09-26 20:55:01 2010-12-29 03:10:00

Elapsed: 00:00:00.88
03:17:52 SQL> 
03:17:52 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
03:17:52 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.33
03:17:52 SQL> CREATE TABLE svm6122 COMPRESS AS
03:17:52   2  SELECT
03:17:52   3  pair
03:17:52   4  ,ydate
03:17:52   5  ,prdate
03:17:52   6  ,clse
03:17:52   7  -- g6 is important. I want to predict g6:
03:17:52   8  ,ld6 - clse g6
03:17:52   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
03:17:52  10  -- I want more attributes from the ones I derived above:
03:17:52  11  -- clse relation to moving-min
03:17:52  12  ,clse-min4  cm4
03:17:52  13  ,clse-min6  cm6
03:17:52  14  ,clse-min8  cm8
03:17:52  15  ,clse-min10 cm10
03:17:52  16  ,clse-min12 cm12
03:17:52  17  ,clse-min14 cm14
03:17:52  18  ,clse-min16 cm16
03:17:52  19  ,clse-min18 cm18
03:17:52  20  -- clse relation to moving-avg
03:17:52  21  ,clse-avg4  ca4
03:17:52  22  ,clse-avg6  ca6
03:17:52  23  ,clse-avg8  ca8
03:17:52  24  ,clse-avg10 ca10
03:17:52  25  ,clse-avg12 ca12
03:17:52  26  ,clse-avg14 ca14
03:17:52  27  ,clse-avg16 ca16
03:17:52  28  ,clse-avg18 ca18
03:17:52  29  -- clse relation to moving-max
03:17:52  30  ,clse-max4  cx4
03:17:52  31  ,clse-max6  cx6
03:17:52  32  ,clse-max8  cx8
03:17:52  33  ,clse-max10 cx10
03:17:52  34  ,clse-max12 cx12
03:17:52  35  ,clse-max14 cx14
03:17:52  36  ,clse-max16 cx16
03:17:52  37  ,clse-max18 cx18
03:17:52  38  -- Derive more attributes.
03:17:52  39  -- I want to use CORR() here to help SVM see the shape of the series.
03:17:52  40  -- But COVAR_POP is more stable:
03:17:52  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
03:17:52  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
03:17:52  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
03:17:52  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
03:17:52  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
03:17:52  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
03:17:52  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
03:17:52  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
03:17:52  49  -- Derive date related attributes:
03:17:52  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
03:17:52  51  ,0+TO_CHAR(ydate,'D')d
03:17:52  52  ,0+TO_CHAR(ydate,'W')w
03:17:52  53  -- mpm stands for minutes-past-midnight:
03:17:52  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
03:17:52  55  -- mph stands for minutes-past-hour:
03:17:52  56  ,0+TO_CHAR(ydate,'MI')mph
03:17:52  57  FROM svm6102
03:17:52  58  ORDER BY ydate
03:17:52  59  /

Table created.

Elapsed: 00:00:02.07
03:17:55 SQL> 
03:17:55 SQL> -- rpt
03:17:55 SQL> 
03:17:55 SQL> SELECT
03:17:55   2  pair
03:17:55   3  ,COUNT(pair)
03:17:55   4  ,MIN(clse),MAX(clse)
03:17:55   5  ,MIN(ydate),MAX(ydate)
03:17:55   6  FROM svm6122
03:17:55   7  GROUP BY pair
03:17:55   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_jpy       19342	 80.25	   84.485 2010-09-26 20:55:01 2010-12-29 03:10:00

Elapsed: 00:00:00.07
03:17:55 SQL> 
03:17:55 SQL> -- Prepare for derivation of NTILE based params:
03:17:55 SQL> 
03:17:55 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.23
03:17:55 SQL> CREATE TABLE svm6142 COMPRESS AS
03:17:55   2  SELECT
03:17:55   3  pair
03:17:55   4  ,ydate
03:17:55   5  ,prdate
03:17:55   6  ,clse
03:17:55   7  ,g6
03:17:55   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
03:17:55   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
03:17:55  10  ,CASE WHEN trend IS NULL THEN 1
03:17:55  11  	    WHEN trend =0      THEN 1
03:17:55  12  	    ELSE trend END trend
03:17:55  13  ,cm4
03:17:55  14  ,cm6
03:17:55  15  ,cm8
03:17:55  16  ,cm10
03:17:55  17  ,cm12
03:17:55  18  ,cm14
03:17:55  19  ,cm16
03:17:55  20  ,cm18
03:17:55  21  --
03:17:55  22  ,ca4
03:17:55  23  ,ca6
03:17:55  24  ,ca8
03:17:55  25  ,ca10
03:17:55  26  ,ca12
03:17:55  27  ,ca14
03:17:55  28  ,ca16
03:17:55  29  ,ca18
03:17:55  30  --
03:17:55  31  ,cx4
03:17:55  32  ,cx6
03:17:55  33  ,cx8
03:17:55  34  ,cx10
03:17:55  35  ,cx12
03:17:55  36  ,cx14
03:17:55  37  ,cx16
03:17:55  38  ,cx18
03:17:55  39  --
03:17:55  40  ,crr4
03:17:55  41  ,crr6
03:17:55  42  ,crr8
03:17:55  43  ,crr10
03:17:55  44  ,crr12
03:17:55  45  ,crr14
03:17:55  46  ,crr16
03:17:55  47  ,crr18
03:17:55  48  --
03:17:55  49  ,hh
03:17:55  50  ,d
03:17:55  51  ,w
03:17:55  52  ,mpm
03:17:55  53  ,mph
03:17:55  54  FROM svm6122
03:17:55  55  ORDER BY ydate
03:17:55  56  /

Table created.

Elapsed: 00:00:00.34
03:17:55 SQL> 
03:17:55 SQL> -- rpt
03:17:55 SQL> 
03:17:55 SQL> SELECT
03:17:55   2  pair
03:17:55   3  ,trend
03:17:55   4  ,gatt
03:17:55   5  ,COUNT(pair)
03:17:55   6  ,AVG(g6)
03:17:55   7  FROM svm6142
03:17:55   8  GROUP BY pair,trend,gatt
03:17:55   9  ORDER BY pair,trend,gatt
03:17:55  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5097 -.16260702
usd_jpy 	-1 up	      4954 .163304745
usd_jpy 	-1		26
usd_jpy 	 1 nup	      5126 -.15502908
usd_jpy 	 1 up	      4093 .165084061
usd_jpy 	 1		46

6 rows selected.

Elapsed: 00:00:00.08
03:17:55 SQL> 
03:17:55 SQL> 
03:17:55 SQL> -- Derive NTILE based params:
03:17:55 SQL> 
03:17:55 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.24
03:17:55 SQL> CREATE TABLE svm6162 COMPRESS AS
03:17:55   2  SELECT
03:17:55   3  pair
03:17:55   4  ,ydate
03:17:55   5  ,prdate
03:17:55   6  ,clse
03:17:55   7  ,g6
03:17:55   8  ,gatt
03:17:55   9  ,gattn
03:17:55  10  ,trend
03:17:55  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
03:17:55  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
03:17:55  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
03:17:55  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
03:17:55  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
03:17:55  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
03:17:55  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
03:17:55  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
03:17:55  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
03:17:55  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
03:17:55  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
03:17:55  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
03:17:55  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
03:17:55  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
03:17:55  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
03:17:55  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
03:17:55  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
03:17:55  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
03:17:55  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
03:17:55  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
03:17:55  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
03:17:55  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
03:17:55  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
03:17:55  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
03:17:55  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
03:17:55  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
03:17:55  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
03:17:55  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
03:17:55  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
03:17:55  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
03:17:55  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
03:17:55  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
03:17:55  43  ,hh  att32
03:17:55  44  ,d   att33
03:17:55  45  ,w   att34
03:17:55  46  ,mpm att35
03:17:55  47  ,mph att36
03:17:55  48  ,trend att37
03:17:55  49  FROM svm6142
03:17:55  50  ORDER BY ydate
03:17:55  51  /

Table created.

Elapsed: 00:00:04.60
03:18:00 SQL> 
03:18:00 SQL> -- rpt
03:18:00 SQL> 
03:18:00 SQL> SELECT
03:18:00   2  pair
03:18:00   3  ,trend
03:18:00   4  ,gatt
03:18:00   5  ,COUNT(pair)
03:18:00   6  ,AVG(g6)
03:18:00   7  FROM svm6162
03:18:00   8  GROUP BY pair,trend,gatt
03:18:00   9  ORDER BY pair,trend,gatt
03:18:00  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5097 -.16260702
usd_jpy 	-1 up	      4954 .163304745
usd_jpy 	-1		26
usd_jpy 	 1 nup	      5126 -.15502908
usd_jpy 	 1 up	      4093 .165084061
usd_jpy 	 1		46

6 rows selected.

Elapsed: 00:00:00.03
03:18:00 SQL> 
03:18:00 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
03:18:00 SQL> CREATE TABLE modsrc COMPRESS AS
03:18:00   2  SELECT
03:18:00   3  pair
03:18:00   4  ,ydate
03:18:00   5  ,prdate
03:18:00   6  ,trend
03:18:00   7  ,g6
03:18:00   8  ,gatt
03:18:00   9  ,gattn
03:18:00  10  FROM svm6162
03:18:00  11  /

Table created.

Elapsed: 00:00:00.08
03:18:00 SQL> 
03:18:00 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
03:18:00 SQL> 
03:18:00 SQL> DROP   TABLE jpy_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
03:18:01 SQL> CREATE TABLE jpy_ms610 COMPRESS AS
03:18:01   2  SELECT
03:18:01   3  ydate
03:18:01   4  ,trend jpy_trend
03:18:01   5  ,g6    jpy_g6
03:18:01   6  ,gatt  jpy_gatt
03:18:01   7  ,gattn jpy_gattn
03:18:01   8  FROM modsrc
03:18:01   9  /

Table created.

Elapsed: 00:00:00.08
03:18:01 SQL> 
03:18:01 SQL> ANALYZE TABLE jpy_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.14
03:18:01 SQL> 
03:18:01 SQL> -- I need a copy of the attributes:
03:18:01 SQL> 
03:18:01 SQL> 
03:18:01 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.04
03:18:01 SQL> CREATE TABLE jpy_att COMPRESS AS
03:18:01   2  SELECT
03:18:01   3  ydate
03:18:01   4  ,att00 jpy_att00
03:18:01   5  ,att01 jpy_att01
03:18:01   6  ,att02 jpy_att02
03:18:01   7  ,att03 jpy_att03
03:18:01   8  ,att04 jpy_att04
03:18:01   9  ,att05 jpy_att05
03:18:01  10  ,att06 jpy_att06
03:18:01  11  ,att07 jpy_att07
03:18:01  12  ,att08 jpy_att08
03:18:01  13  ,att09 jpy_att09
03:18:01  14  ,att10 jpy_att10
03:18:01  15  ,att11 jpy_att11
03:18:01  16  ,att12 jpy_att12
03:18:01  17  ,att13 jpy_att13
03:18:01  18  ,att14 jpy_att14
03:18:01  19  ,att15 jpy_att15
03:18:01  20  ,att16 jpy_att16
03:18:01  21  ,att17 jpy_att17
03:18:01  22  ,att18 jpy_att18
03:18:01  23  ,att19 jpy_att19
03:18:01  24  ,att20 jpy_att20
03:18:01  25  ,att21 jpy_att21
03:18:01  26  ,att22 jpy_att22
03:18:01  27  ,att23 jpy_att23
03:18:01  28  ,att24 jpy_att24
03:18:01  29  ,att25 jpy_att25
03:18:01  30  ,att26 jpy_att26
03:18:01  31  ,att27 jpy_att27
03:18:01  32  ,att28 jpy_att28
03:18:01  33  ,att29 jpy_att29
03:18:01  34  ,att30 jpy_att30
03:18:01  35  ,att31 jpy_att31
03:18:01  36  ,att32 jpy_att32
03:18:01  37  ,att33 jpy_att33
03:18:01  38  ,att34 jpy_att34
03:18:01  39  ,att35 jpy_att35
03:18:01  40  ,att36 jpy_att36
03:18:01  41  ,att37 jpy_att37
03:18:01  42  FROM svm6162
03:18:01  43  /

Table created.

Elapsed: 00:00:00.17
03:18:01 SQL> 
03:18:01 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
03:18:01 SQL> 
03:18:01 SQL> -- rpt
03:18:01 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19342

Elapsed: 00:00:00.86
03:18:02 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     19342

Elapsed: 00:00:00.00
03:18:02 SQL> 
03:18:02 SQL> --
03:18:02 SQL> -- cad610.sql
03:18:02 SQL> --
03:18:02 SQL> 
03:18:02 SQL> -- Creates views and tables for backtesting a forex SVM strategy
03:18:02 SQL> 
03:18:02 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.45
03:18:03 SQL> 
03:18:03 SQL> -- I created di5min here:
03:18:03 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
03:18:03 SQL> 
03:18:03 SQL> CREATE OR REPLACE VIEW svm6102 AS
03:18:03   2  SELECT
03:18:03   3  pair
03:18:03   4  ,ydate
03:18:03   5  ,prdate
03:18:03   6  ,rownum rnum -- acts as t in my time-series
03:18:03   7  ,clse
03:18:03   8  -- Derive a bunch of attributes from clse, the latest price:
03:18:03   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
03:18:03  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
03:18:03  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
03:18:03  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
03:18:03  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
03:18:03  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
03:18:03  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
03:18:03  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
03:18:03  17  --
03:18:03  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
03:18:03  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
03:18:03  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
03:18:03  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
03:18:03  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
03:18:03  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
03:18:03  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
03:18:03  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
03:18:03  26  --
03:18:03  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
03:18:03  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
03:18:03  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
03:18:03  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
03:18:03  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
03:18:03  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
03:18:03  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
03:18:03  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
03:18:03  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
03:18:03  36  FROM di5min WHERE pair LIKE'%cad%'
03:18:03  37  AND ydate > sysdate - 95
03:18:03  38  ORDER BY ydate
03:18:03  39  /

View created.

Elapsed: 00:00:00.04
03:18:03 SQL> 
03:18:03 SQL> -- rpt
03:18:03 SQL> 
03:18:03 SQL> SELECT
03:18:03   2  pair
03:18:03   3  ,COUNT(pair)
03:18:03   4  ,MIN(clse),MAX(clse)
03:18:03   5  ,MIN(avg6),MAX(avg6)
03:18:03   6  ,MIN(ydate),MAX(ydate)
03:18:03   7  FROM svm6102
03:18:03   8  GROUP BY pair
03:18:03   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_cad       19342    .997975	    1.036 .999321575 1.03336849 2010-09-26 20:55:01 2010-12-29 03:10:00

Elapsed: 00:00:00.81
03:18:04 SQL> 
03:18:04 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
03:18:04 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.25
03:18:04 SQL> CREATE TABLE svm6122 COMPRESS AS
03:18:04   2  SELECT
03:18:04   3  pair
03:18:04   4  ,ydate
03:18:04   5  ,prdate
03:18:04   6  ,clse
03:18:04   7  -- g6 is important. I want to predict g6:
03:18:04   8  ,ld6 - clse g6
03:18:04   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
03:18:04  10  -- I want more attributes from the ones I derived above:
03:18:04  11  -- clse relation to moving-min
03:18:04  12  ,clse-min4  cm4
03:18:04  13  ,clse-min6  cm6
03:18:04  14  ,clse-min8  cm8
03:18:04  15  ,clse-min10 cm10
03:18:04  16  ,clse-min12 cm12
03:18:04  17  ,clse-min14 cm14
03:18:04  18  ,clse-min16 cm16
03:18:04  19  ,clse-min18 cm18
03:18:04  20  -- clse relation to moving-avg
03:18:04  21  ,clse-avg4  ca4
03:18:04  22  ,clse-avg6  ca6
03:18:04  23  ,clse-avg8  ca8
03:18:04  24  ,clse-avg10 ca10
03:18:04  25  ,clse-avg12 ca12
03:18:04  26  ,clse-avg14 ca14
03:18:04  27  ,clse-avg16 ca16
03:18:04  28  ,clse-avg18 ca18
03:18:04  29  -- clse relation to moving-max
03:18:04  30  ,clse-max4  cx4
03:18:04  31  ,clse-max6  cx6
03:18:04  32  ,clse-max8  cx8
03:18:04  33  ,clse-max10 cx10
03:18:04  34  ,clse-max12 cx12
03:18:04  35  ,clse-max14 cx14
03:18:04  36  ,clse-max16 cx16
03:18:04  37  ,clse-max18 cx18
03:18:04  38  -- Derive more attributes.
03:18:04  39  -- I want to use CORR() here to help SVM see the shape of the series.
03:18:04  40  -- But COVAR_POP is more stable:
03:18:04  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
03:18:04  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
03:18:04  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
03:18:04  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
03:18:04  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
03:18:04  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
03:18:04  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
03:18:04  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
03:18:04  49  -- Derive date related attributes:
03:18:04  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
03:18:04  51  ,0+TO_CHAR(ydate,'D')d
03:18:04  52  ,0+TO_CHAR(ydate,'W')w
03:18:04  53  -- mpm stands for minutes-past-midnight:
03:18:04  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
03:18:04  55  -- mph stands for minutes-past-hour:
03:18:04  56  ,0+TO_CHAR(ydate,'MI')mph
03:18:04  57  FROM svm6102
03:18:04  58  ORDER BY ydate
03:18:04  59  /

Table created.

Elapsed: 00:00:01.98
03:18:06 SQL> 
03:18:06 SQL> -- rpt
03:18:06 SQL> 
03:18:06 SQL> SELECT
03:18:06   2  pair
03:18:06   3  ,COUNT(pair)
03:18:06   4  ,MIN(clse),MAX(clse)
03:18:06   5  ,MIN(ydate),MAX(ydate)
03:18:06   6  FROM svm6122
03:18:06   7  GROUP BY pair
03:18:06   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_cad       19342    .997975	    1.036 2010-09-26 20:55:01 2010-12-29 03:10:00

Elapsed: 00:00:00.13
03:18:06 SQL> 
03:18:06 SQL> -- Prepare for derivation of NTILE based params:
03:18:06 SQL> 
03:18:06 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.23
03:18:06 SQL> CREATE TABLE svm6142 COMPRESS AS
03:18:06   2  SELECT
03:18:06   3  pair
03:18:06   4  ,ydate
03:18:06   5  ,prdate
03:18:06   6  ,clse
03:18:06   7  ,g6
03:18:06   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
03:18:06   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
03:18:06  10  ,CASE WHEN trend IS NULL THEN 1
03:18:06  11  	    WHEN trend =0      THEN 1
03:18:06  12  	    ELSE trend END trend
03:18:06  13  ,cm4
03:18:06  14  ,cm6
03:18:06  15  ,cm8
03:18:06  16  ,cm10
03:18:06  17  ,cm12
03:18:06  18  ,cm14
03:18:06  19  ,cm16
03:18:06  20  ,cm18
03:18:06  21  --
03:18:06  22  ,ca4
03:18:06  23  ,ca6
03:18:06  24  ,ca8
03:18:06  25  ,ca10
03:18:06  26  ,ca12
03:18:06  27  ,ca14
03:18:06  28  ,ca16
03:18:06  29  ,ca18
03:18:06  30  --
03:18:06  31  ,cx4
03:18:06  32  ,cx6
03:18:06  33  ,cx8
03:18:06  34  ,cx10
03:18:06  35  ,cx12
03:18:06  36  ,cx14
03:18:06  37  ,cx16
03:18:06  38  ,cx18
03:18:06  39  --
03:18:06  40  ,crr4
03:18:06  41  ,crr6
03:18:06  42  ,crr8
03:18:06  43  ,crr10
03:18:06  44  ,crr12
03:18:06  45  ,crr14
03:18:06  46  ,crr16
03:18:06  47  ,crr18
03:18:06  48  --
03:18:06  49  ,hh
03:18:06  50  ,d
03:18:06  51  ,w
03:18:06  52  ,mpm
03:18:06  53  ,mph
03:18:06  54  FROM svm6122
03:18:06  55  ORDER BY ydate
03:18:06  56  /

Table created.

Elapsed: 00:00:00.35
03:18:07 SQL> 
03:18:07 SQL> -- rpt
03:18:07 SQL> 
03:18:07 SQL> SELECT
03:18:07   2  pair
03:18:07   3  ,trend
03:18:07   4  ,gatt
03:18:07   5  ,COUNT(pair)
03:18:07   6  ,AVG(g6)
03:18:07   7  FROM svm6142
03:18:07   8  GROUP BY pair,trend,gatt
03:18:07   9  ORDER BY pair,trend,gatt
03:18:07  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7141 -.00133516
usd_cad 	-1 up	      3081  .00310749
usd_cad 	 1 nup	      6559 -.00162731
usd_cad 	 1 up	      2489 .003597467
usd_cad 	 1		72

Elapsed: 00:00:00.06
03:18:07 SQL> 
03:18:07 SQL> 
03:18:07 SQL> -- Derive NTILE based params:
03:18:07 SQL> 
03:18:07 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.20
03:18:07 SQL> CREATE TABLE svm6162 COMPRESS AS
03:18:07   2  SELECT
03:18:07   3  pair
03:18:07   4  ,ydate
03:18:07   5  ,prdate
03:18:07   6  ,clse
03:18:07   7  ,g6
03:18:07   8  ,gatt
03:18:07   9  ,gattn
03:18:07  10  ,trend
03:18:07  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
03:18:07  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
03:18:07  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
03:18:07  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
03:18:07  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
03:18:07  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
03:18:07  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
03:18:07  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
03:18:07  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
03:18:07  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
03:18:07  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
03:18:07  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
03:18:07  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
03:18:07  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
03:18:07  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
03:18:07  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
03:18:07  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
03:18:07  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
03:18:07  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
03:18:07  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
03:18:07  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
03:18:07  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
03:18:07  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
03:18:07  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
03:18:07  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
03:18:07  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
03:18:07  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
03:18:07  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
03:18:07  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
03:18:07  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
03:18:07  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
03:18:07  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
03:18:07  43  ,hh  att32
03:18:07  44  ,d   att33
03:18:07  45  ,w   att34
03:18:07  46  ,mpm att35
03:18:07  47  ,mph att36
03:18:07  48  ,trend att37
03:18:07  49  FROM svm6142
03:18:07  50  ORDER BY ydate
03:18:07  51  /

Table created.

Elapsed: 00:00:04.63
03:18:11 SQL> 
03:18:11 SQL> -- rpt
03:18:11 SQL> 
03:18:11 SQL> SELECT
03:18:11   2  pair
03:18:11   3  ,trend
03:18:11   4  ,gatt
03:18:11   5  ,COUNT(pair)
03:18:11   6  ,AVG(g6)
03:18:11   7  FROM svm6162
03:18:11   8  GROUP BY pair,trend,gatt
03:18:11   9  ORDER BY pair,trend,gatt
03:18:11  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7141 -.00133516
usd_cad 	-1 up	      3081  .00310749
usd_cad 	 1 nup	      6559 -.00162731
usd_cad 	 1 up	      2489 .003597467
usd_cad 	 1		72

Elapsed: 00:00:00.03
03:18:11 SQL> 
03:18:11 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.19
03:18:12 SQL> CREATE TABLE modsrc COMPRESS AS
03:18:12   2  SELECT
03:18:12   3  pair
03:18:12   4  ,ydate
03:18:12   5  ,prdate
03:18:12   6  ,trend
03:18:12   7  ,g6
03:18:12   8  ,gatt
03:18:12   9  ,gattn
03:18:12  10  FROM svm6162
03:18:12  11  /

Table created.

Elapsed: 00:00:00.10
03:18:12 SQL> 
03:18:12 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
03:18:12 SQL> 
03:18:12 SQL> DROP   TABLE cad_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
03:18:12 SQL> CREATE TABLE cad_ms610 COMPRESS AS
03:18:12   2  SELECT
03:18:12   3  ydate
03:18:12   4  ,trend cad_trend
03:18:12   5  ,g6    cad_g6
03:18:12   6  ,gatt  cad_gatt
03:18:12   7  ,gattn cad_gattn
03:18:12   8  FROM modsrc
03:18:12   9  /

Table created.

Elapsed: 00:00:00.11
03:18:12 SQL> 
03:18:12 SQL> ANALYZE TABLE cad_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.14
03:18:12 SQL> 
03:18:12 SQL> -- I need a copy of the attributes:
03:18:12 SQL> 
03:18:12 SQL> 
03:18:12 SQL> DROP   TABLE cad_att;

Table dropped.

Elapsed: 00:00:00.04
03:18:12 SQL> CREATE TABLE cad_att COMPRESS AS
03:18:12   2  SELECT
03:18:12   3  ydate
03:18:12   4  ,att00 cad_att00
03:18:12   5  ,att01 cad_att01
03:18:12   6  ,att02 cad_att02
03:18:12   7  ,att03 cad_att03
03:18:12   8  ,att04 cad_att04
03:18:12   9  ,att05 cad_att05
03:18:12  10  ,att06 cad_att06
03:18:12  11  ,att07 cad_att07
03:18:12  12  ,att08 cad_att08
03:18:12  13  ,att09 cad_att09
03:18:12  14  ,att10 cad_att10
03:18:12  15  ,att11 cad_att11
03:18:12  16  ,att12 cad_att12
03:18:12  17  ,att13 cad_att13
03:18:12  18  ,att14 cad_att14
03:18:12  19  ,att15 cad_att15
03:18:12  20  ,att16 cad_att16
03:18:12  21  ,att17 cad_att17
03:18:12  22  ,att18 cad_att18
03:18:12  23  ,att19 cad_att19
03:18:12  24  ,att20 cad_att20
03:18:12  25  ,att21 cad_att21
03:18:12  26  ,att22 cad_att22
03:18:12  27  ,att23 cad_att23
03:18:12  28  ,att24 cad_att24
03:18:12  29  ,att25 cad_att25
03:18:12  30  ,att26 cad_att26
03:18:12  31  ,att27 cad_att27
03:18:12  32  ,att28 cad_att28
03:18:12  33  ,att29 cad_att29
03:18:12  34  ,att30 cad_att30
03:18:12  35  ,att31 cad_att31
03:18:12  36  ,att32 cad_att32
03:18:12  37  ,att33 cad_att33
03:18:12  38  ,att34 cad_att34
03:18:12  39  ,att35 cad_att35
03:18:12  40  ,att36 cad_att36
03:18:12  41  ,att37 cad_att37
03:18:12  42  FROM svm6162
03:18:12  43  /

Table created.

Elapsed: 00:00:00.17
03:18:12 SQL> 
03:18:12 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.44
03:18:13 SQL> 
03:18:13 SQL> -- rpt
03:18:13 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19342

Elapsed: 00:00:00.80
03:18:14 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
     19342

Elapsed: 00:00:00.00
03:18:14 SQL> 
03:18:14 SQL> --
03:18:14 SQL> -- chf610.sql
03:18:14 SQL> --
03:18:14 SQL> 
03:18:14 SQL> -- Creates views and tables for backtesting a forex SVM strategy
03:18:14 SQL> 
03:18:14 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.46
03:18:14 SQL> 
03:18:14 SQL> -- I created di5min here:
03:18:14 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
03:18:14 SQL> 
03:18:14 SQL> CREATE OR REPLACE VIEW svm6102 AS
03:18:14   2  SELECT
03:18:14   3  pair
03:18:14   4  ,ydate
03:18:14   5  ,prdate
03:18:14   6  ,rownum rnum -- acts as t in my time-series
03:18:14   7  ,clse
03:18:14   8  -- Derive a bunch of attributes from clse, the latest price:
03:18:14   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
03:18:14  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
03:18:14  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
03:18:14  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
03:18:14  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
03:18:14  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
03:18:14  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
03:18:14  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
03:18:14  17  --
03:18:14  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
03:18:14  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
03:18:14  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
03:18:14  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
03:18:14  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
03:18:14  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
03:18:14  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
03:18:14  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
03:18:14  26  --
03:18:14  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
03:18:14  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
03:18:14  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
03:18:14  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
03:18:14  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
03:18:14  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
03:18:14  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
03:18:14  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
03:18:14  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
03:18:14  36  FROM di5min WHERE pair LIKE'%chf%'
03:18:14  37  AND ydate > sysdate - 95
03:18:14  38  ORDER BY ydate
03:18:14  39  /

View created.

Elapsed: 00:00:00.05
03:18:14 SQL> 
03:18:14 SQL> -- rpt
03:18:14 SQL> 
03:18:14 SQL> SELECT
03:18:14   2  pair
03:18:14   3  ,COUNT(pair)
03:18:14   4  ,MIN(clse),MAX(clse)
03:18:14   5  ,MIN(avg6),MAX(avg6)
03:18:14   6  ,MIN(ydate),MAX(ydate)
03:18:14   7  FROM svm6102
03:18:14   8  GROUP BY pair
03:18:14   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_chf       19345	.94525	  1.00635 .947785616 1.00498151 2010-09-26 20:55:01 2010-12-29 03:10:00

Elapsed: 00:00:00.83
03:18:15 SQL> 
03:18:15 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
03:18:15 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.17
03:18:15 SQL> CREATE TABLE svm6122 COMPRESS AS
03:18:15   2  SELECT
03:18:15   3  pair
03:18:15   4  ,ydate
03:18:15   5  ,prdate
03:18:15   6  ,clse
03:18:15   7  -- g6 is important. I want to predict g6:
03:18:15   8  ,ld6 - clse g6
03:18:15   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
03:18:15  10  -- I want more attributes from the ones I derived above:
03:18:15  11  -- clse relation to moving-min
03:18:15  12  ,clse-min4  cm4
03:18:15  13  ,clse-min6  cm6
03:18:15  14  ,clse-min8  cm8
03:18:15  15  ,clse-min10 cm10
03:18:15  16  ,clse-min12 cm12
03:18:15  17  ,clse-min14 cm14
03:18:15  18  ,clse-min16 cm16
03:18:15  19  ,clse-min18 cm18
03:18:15  20  -- clse relation to moving-avg
03:18:15  21  ,clse-avg4  ca4
03:18:15  22  ,clse-avg6  ca6
03:18:15  23  ,clse-avg8  ca8
03:18:15  24  ,clse-avg10 ca10
03:18:15  25  ,clse-avg12 ca12
03:18:15  26  ,clse-avg14 ca14
03:18:15  27  ,clse-avg16 ca16
03:18:15  28  ,clse-avg18 ca18
03:18:15  29  -- clse relation to moving-max
03:18:15  30  ,clse-max4  cx4
03:18:15  31  ,clse-max6  cx6
03:18:15  32  ,clse-max8  cx8
03:18:15  33  ,clse-max10 cx10
03:18:15  34  ,clse-max12 cx12
03:18:15  35  ,clse-max14 cx14
03:18:15  36  ,clse-max16 cx16
03:18:15  37  ,clse-max18 cx18
03:18:15  38  -- Derive more attributes.
03:18:15  39  -- I want to use CORR() here to help SVM see the shape of the series.
03:18:15  40  -- But COVAR_POP is more stable:
03:18:15  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
03:18:15  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
03:18:15  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
03:18:15  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
03:18:15  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
03:18:15  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
03:18:15  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
03:18:15  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
03:18:15  49  -- Derive date related attributes:
03:18:15  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
03:18:15  51  ,0+TO_CHAR(ydate,'D')d
03:18:15  52  ,0+TO_CHAR(ydate,'W')w
03:18:15  53  -- mpm stands for minutes-past-midnight:
03:18:15  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
03:18:15  55  -- mph stands for minutes-past-hour:
03:18:15  56  ,0+TO_CHAR(ydate,'MI')mph
03:18:15  57  FROM svm6102
03:18:15  58  ORDER BY ydate
03:18:15  59  /

Table created.

Elapsed: 00:00:03.04
03:18:18 SQL> 
03:18:18 SQL> -- rpt
03:18:18 SQL> 
03:18:18 SQL> SELECT
03:18:18   2  pair
03:18:18   3  ,COUNT(pair)
03:18:18   4  ,MIN(clse),MAX(clse)
03:18:18   5  ,MIN(ydate),MAX(ydate)
03:18:18   6  FROM svm6122
03:18:18   7  GROUP BY pair
03:18:18   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_chf       19345	.94525	  1.00635 2010-09-26 20:55:01 2010-12-29 03:10:00

Elapsed: 00:00:00.09
03:18:18 SQL> 
03:18:18 SQL> -- Prepare for derivation of NTILE based params:
03:18:18 SQL> 
03:18:18 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.26
03:18:19 SQL> CREATE TABLE svm6142 COMPRESS AS
03:18:19   2  SELECT
03:18:19   3  pair
03:18:19   4  ,ydate
03:18:19   5  ,prdate
03:18:19   6  ,clse
03:18:19   7  ,g6
03:18:19   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
03:18:19   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
03:18:19  10  ,CASE WHEN trend IS NULL THEN 1
03:18:19  11  	    WHEN trend =0      THEN 1
03:18:19  12  	    ELSE trend END trend
03:18:19  13  ,cm4
03:18:19  14  ,cm6
03:18:19  15  ,cm8
03:18:19  16  ,cm10
03:18:19  17  ,cm12
03:18:19  18  ,cm14
03:18:19  19  ,cm16
03:18:19  20  ,cm18
03:18:19  21  --
03:18:19  22  ,ca4
03:18:19  23  ,ca6
03:18:19  24  ,ca8
03:18:19  25  ,ca10
03:18:19  26  ,ca12
03:18:19  27  ,ca14
03:18:19  28  ,ca16
03:18:19  29  ,ca18
03:18:19  30  --
03:18:19  31  ,cx4
03:18:19  32  ,cx6
03:18:19  33  ,cx8
03:18:19  34  ,cx10
03:18:19  35  ,cx12
03:18:19  36  ,cx14
03:18:19  37  ,cx16
03:18:19  38  ,cx18
03:18:19  39  --
03:18:19  40  ,crr4
03:18:19  41  ,crr6
03:18:19  42  ,crr8
03:18:19  43  ,crr10
03:18:19  44  ,crr12
03:18:19  45  ,crr14
03:18:19  46  ,crr16
03:18:19  47  ,crr18
03:18:19  48  --
03:18:19  49  ,hh
03:18:19  50  ,d
03:18:19  51  ,w
03:18:19  52  ,mpm
03:18:19  53  ,mph
03:18:19  54  FROM svm6122
03:18:19  55  ORDER BY ydate
03:18:19  56  /

Table created.

Elapsed: 00:00:00.36
03:18:19 SQL> 
03:18:19 SQL> -- rpt
03:18:19 SQL> 
03:18:19 SQL> SELECT
03:18:19   2  pair
03:18:19   3  ,trend
03:18:19   4  ,gatt
03:18:19   5  ,COUNT(pair)
03:18:19   6  ,AVG(g6)
03:18:19   7  FROM svm6142
03:18:19   8  GROUP BY pair,trend,gatt
03:18:19   9  ORDER BY pair,trend,gatt
03:18:19  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      6894 -.00194326
usd_chf 	-1 up	      3170 .003899842
usd_chf 	-1		26
usd_chf 	 1 nup	      6644 -.00162484
usd_chf 	 1 up	      2565 .003689727
usd_chf 	 1		46

6 rows selected.

Elapsed: 00:00:00.06
03:18:19 SQL> 
03:18:19 SQL> 
03:18:19 SQL> -- Derive NTILE based params:
03:18:19 SQL> 
03:18:19 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.21
03:18:19 SQL> CREATE TABLE svm6162 COMPRESS AS
03:18:19   2  SELECT
03:18:19   3  pair
03:18:19   4  ,ydate
03:18:19   5  ,prdate
03:18:19   6  ,clse
03:18:19   7  ,g6
03:18:19   8  ,gatt
03:18:19   9  ,gattn
03:18:19  10  ,trend
03:18:19  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
03:18:19  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
03:18:19  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
03:18:19  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
03:18:19  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
03:18:19  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
03:18:19  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
03:18:19  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
03:18:19  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
03:18:19  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
03:18:19  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
03:18:19  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
03:18:19  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
03:18:19  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
03:18:19  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
03:18:19  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
03:18:19  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
03:18:19  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
03:18:19  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
03:18:19  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
03:18:19  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
03:18:19  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
03:18:19  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
03:18:19  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
03:18:19  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
03:18:19  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
03:18:19  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
03:18:19  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
03:18:19  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
03:18:19  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
03:18:19  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
03:18:19  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
03:18:19  43  ,hh  att32
03:18:19  44  ,d   att33
03:18:19  45  ,w   att34
03:18:19  46  ,mpm att35
03:18:19  47  ,mph att36
03:18:19  48  ,trend att37
03:18:19  49  FROM svm6142
03:18:19  50  ORDER BY ydate
03:18:19  51  /

Table created.

Elapsed: 00:00:04.76
03:18:24 SQL> 
03:18:24 SQL> -- rpt
03:18:24 SQL> 
03:18:24 SQL> SELECT
03:18:24   2  pair
03:18:24   3  ,trend
03:18:24   4  ,gatt
03:18:24   5  ,COUNT(pair)
03:18:24   6  ,AVG(g6)
03:18:24   7  FROM svm6162
03:18:24   8  GROUP BY pair,trend,gatt
03:18:24   9  ORDER BY pair,trend,gatt
03:18:24  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      6894 -.00194326
usd_chf 	-1 up	      3170 .003899842
usd_chf 	-1		26
usd_chf 	 1 nup	      6644 -.00162484
usd_chf 	 1 up	      2565 .003689727
usd_chf 	 1		46

6 rows selected.

Elapsed: 00:00:00.02
03:18:24 SQL> 
03:18:24 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.25
03:18:24 SQL> CREATE TABLE modsrc COMPRESS AS
03:18:24   2  SELECT
03:18:24   3  pair
03:18:24   4  ,ydate
03:18:24   5  ,prdate
03:18:24   6  ,trend
03:18:24   7  ,g6
03:18:24   8  ,gatt
03:18:24   9  ,gattn
03:18:24  10  FROM svm6162
03:18:24  11  /

Table created.

Elapsed: 00:00:00.07
03:18:24 SQL> 
03:18:24 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
03:18:25 SQL> 
03:18:25 SQL> DROP   TABLE chf_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
03:18:25 SQL> CREATE TABLE chf_ms610 COMPRESS AS
03:18:25   2  SELECT
03:18:25   3  ydate
03:18:25   4  ,trend chf_trend
03:18:25   5  ,g6    chf_g6
03:18:25   6  ,gatt  chf_gatt
03:18:25   7  ,gattn chf_gattn
03:18:25   8  FROM modsrc
03:18:25   9  /

Table created.

Elapsed: 00:00:00.07
03:18:25 SQL> 
03:18:25 SQL> ANALYZE TABLE chf_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.14
03:18:25 SQL> 
03:18:25 SQL> -- I need a copy of the attributes:
03:18:25 SQL> 
03:18:25 SQL> 
03:18:25 SQL> DROP   TABLE chf_att;

Table dropped.

Elapsed: 00:00:00.05
03:18:25 SQL> CREATE TABLE chf_att COMPRESS AS
03:18:25   2  SELECT
03:18:25   3  ydate
03:18:25   4  ,att00 chf_att00
03:18:25   5  ,att01 chf_att01
03:18:25   6  ,att02 chf_att02
03:18:25   7  ,att03 chf_att03
03:18:25   8  ,att04 chf_att04
03:18:25   9  ,att05 chf_att05
03:18:25  10  ,att06 chf_att06
03:18:25  11  ,att07 chf_att07
03:18:25  12  ,att08 chf_att08
03:18:25  13  ,att09 chf_att09
03:18:25  14  ,att10 chf_att10
03:18:25  15  ,att11 chf_att11
03:18:25  16  ,att12 chf_att12
03:18:25  17  ,att13 chf_att13
03:18:25  18  ,att14 chf_att14
03:18:25  19  ,att15 chf_att15
03:18:25  20  ,att16 chf_att16
03:18:25  21  ,att17 chf_att17
03:18:25  22  ,att18 chf_att18
03:18:25  23  ,att19 chf_att19
03:18:25  24  ,att20 chf_att20
03:18:25  25  ,att21 chf_att21
03:18:25  26  ,att22 chf_att22
03:18:25  27  ,att23 chf_att23
03:18:25  28  ,att24 chf_att24
03:18:25  29  ,att25 chf_att25
03:18:25  30  ,att26 chf_att26
03:18:25  31  ,att27 chf_att27
03:18:25  32  ,att28 chf_att28
03:18:25  33  ,att29 chf_att29
03:18:25  34  ,att30 chf_att30
03:18:25  35  ,att31 chf_att31
03:18:25  36  ,att32 chf_att32
03:18:25  37  ,att33 chf_att33
03:18:25  38  ,att34 chf_att34
03:18:25  39  ,att35 chf_att35
03:18:25  40  ,att36 chf_att36
03:18:25  41  ,att37 chf_att37
03:18:25  42  FROM svm6162
03:18:25  43  /

Table created.

Elapsed: 00:00:00.18
03:18:25 SQL> 
03:18:25 SQL> ANALYZE TABLE chf_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.44
03:18:25 SQL> 
03:18:25 SQL> -- rpt
03:18:25 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19345

Elapsed: 00:00:00.81
03:18:26 SQL> SELECT COUNT(*)FROM chf_att;

  COUNT(*)
----------
     19345

Elapsed: 00:00:00.01
03:18:26 SQL> 
03:18:26 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
