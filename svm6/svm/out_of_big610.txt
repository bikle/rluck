
SQL*Plus: Release 11.2.0.1.0 Production on Wed Dec 29 21:34:25 2010

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

21:34:25 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
21:34:25 SQL> 21:34:25 SQL> --
21:34:25 SQL> -- eur610.sql
21:34:25 SQL> --
21:34:25 SQL> 
21:34:25 SQL> -- Creates views and tables for backtesting a forex SVM strategy
21:34:25 SQL> 
21:34:25 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.03
21:34:25 SQL> 
21:34:25 SQL> -- I created di5min here:
21:34:25 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
21:34:25 SQL> 
21:34:25 SQL> CREATE OR REPLACE VIEW svm6102 AS
21:34:25   2  SELECT
21:34:25   3  pair
21:34:25   4  ,ydate
21:34:25   5  ,prdate
21:34:25   6  ,rownum rnum -- acts as t in my time-series
21:34:25   7  ,clse
21:34:25   8  -- Derive a bunch of attributes from clse, the latest price:
21:34:25   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
21:34:25  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
21:34:25  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
21:34:25  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
21:34:25  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
21:34:25  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
21:34:25  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
21:34:25  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
21:34:25  17  --
21:34:25  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
21:34:25  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
21:34:25  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
21:34:25  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
21:34:25  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
21:34:25  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
21:34:25  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
21:34:25  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
21:34:25  26  --
21:34:25  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
21:34:25  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
21:34:25  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
21:34:25  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
21:34:25  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
21:34:25  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
21:34:25  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
21:34:25  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
21:34:25  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
21:34:25  36  FROM di5min WHERE pair LIKE'%eur%'
21:34:25  37  AND ydate > sysdate - 95
21:34:25  38  ORDER BY ydate
21:34:25  39  /

View created.

Elapsed: 00:00:00.09
21:34:26 SQL> 
21:34:26 SQL> -- rpt
21:34:26 SQL> 
21:34:26 SQL> SELECT
21:34:26   2  pair
21:34:26   3  ,COUNT(pair)
21:34:26   4  ,MIN(clse),MAX(clse)
21:34:26   5  ,MIN(avg6),MAX(avg6)
21:34:26   6  ,MIN(ydate),MAX(ydate)
21:34:26   7  FROM svm6102
21:34:26   8  GROUP BY pair
21:34:26   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_usd       19566    1.29735	   1.4273 1.29875103 1.42436233 2010-09-26 20:55:01 2010-12-29 21:30:00

Elapsed: 00:00:00.91
21:34:26 SQL> 
21:34:26 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
21:34:26 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.09
21:34:27 SQL> CREATE TABLE svm6122 COMPRESS AS
21:34:27   2  SELECT
21:34:27   3  pair
21:34:27   4  ,ydate
21:34:27   5  ,prdate
21:34:27   6  ,clse
21:34:27   7  -- g6 is important. I want to predict g6:
21:34:27   8  ,ld6 - clse g6
21:34:27   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
21:34:27  10  -- I want more attributes from the ones I derived above:
21:34:27  11  -- clse relation to moving-min
21:34:27  12  ,clse-min4  cm4
21:34:27  13  ,clse-min6  cm6
21:34:27  14  ,clse-min8  cm8
21:34:27  15  ,clse-min10 cm10
21:34:27  16  ,clse-min12 cm12
21:34:27  17  ,clse-min14 cm14
21:34:27  18  ,clse-min16 cm16
21:34:27  19  ,clse-min18 cm18
21:34:27  20  -- clse relation to moving-avg
21:34:27  21  ,clse-avg4  ca4
21:34:27  22  ,clse-avg6  ca6
21:34:27  23  ,clse-avg8  ca8
21:34:27  24  ,clse-avg10 ca10
21:34:27  25  ,clse-avg12 ca12
21:34:27  26  ,clse-avg14 ca14
21:34:27  27  ,clse-avg16 ca16
21:34:27  28  ,clse-avg18 ca18
21:34:27  29  -- clse relation to moving-max
21:34:27  30  ,clse-max4  cx4
21:34:27  31  ,clse-max6  cx6
21:34:27  32  ,clse-max8  cx8
21:34:27  33  ,clse-max10 cx10
21:34:27  34  ,clse-max12 cx12
21:34:27  35  ,clse-max14 cx14
21:34:27  36  ,clse-max16 cx16
21:34:27  37  ,clse-max18 cx18
21:34:27  38  -- Derive more attributes.
21:34:27  39  -- I want to use CORR() here to help SVM see the shape of the series.
21:34:27  40  -- But COVAR_POP is more stable:
21:34:27  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
21:34:27  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
21:34:27  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
21:34:27  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
21:34:27  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
21:34:27  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
21:34:27  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
21:34:27  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
21:34:27  49  -- Derive date related attributes:
21:34:27  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
21:34:27  51  ,0+TO_CHAR(ydate,'D')d
21:34:27  52  ,0+TO_CHAR(ydate,'W')w
21:34:27  53  -- mpm stands for minutes-past-midnight:
21:34:27  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
21:34:27  55  -- mph stands for minutes-past-hour:
21:34:27  56  ,0+TO_CHAR(ydate,'MI')mph
21:34:27  57  FROM svm6102
21:34:27  58  ORDER BY ydate
21:34:27  59  /

Table created.

Elapsed: 00:00:02.39
21:34:29 SQL> 
21:34:29 SQL> -- rpt
21:34:29 SQL> 
21:34:29 SQL> SELECT
21:34:29   2  pair
21:34:29   3  ,COUNT(pair)
21:34:29   4  ,MIN(clse),MAX(clse)
21:34:29   5  ,MIN(ydate),MAX(ydate)
21:34:29   6  FROM svm6122
21:34:29   7  GROUP BY pair
21:34:29   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_usd       19566    1.29735	   1.4273 2010-09-26 20:55:01 2010-12-29 21:30:00

Elapsed: 00:00:00.06
21:34:29 SQL> 
21:34:29 SQL> -- Prepare for derivation of NTILE based params:
21:34:29 SQL> 
21:34:29 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.14
21:34:29 SQL> CREATE TABLE svm6142 COMPRESS AS
21:34:29   2  SELECT
21:34:29   3  pair
21:34:29   4  ,ydate
21:34:29   5  ,prdate
21:34:29   6  ,clse
21:34:29   7  ,g6
21:34:29   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
21:34:29   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
21:34:29  10  ,CASE WHEN trend IS NULL THEN 1
21:34:29  11  	    WHEN trend =0      THEN 1
21:34:29  12  	    ELSE trend END trend
21:34:29  13  ,cm4
21:34:29  14  ,cm6
21:34:29  15  ,cm8
21:34:29  16  ,cm10
21:34:29  17  ,cm12
21:34:29  18  ,cm14
21:34:29  19  ,cm16
21:34:29  20  ,cm18
21:34:29  21  --
21:34:29  22  ,ca4
21:34:29  23  ,ca6
21:34:29  24  ,ca8
21:34:29  25  ,ca10
21:34:29  26  ,ca12
21:34:29  27  ,ca14
21:34:29  28  ,ca16
21:34:29  29  ,ca18
21:34:29  30  --
21:34:29  31  ,cx4
21:34:29  32  ,cx6
21:34:29  33  ,cx8
21:34:29  34  ,cx10
21:34:29  35  ,cx12
21:34:29  36  ,cx14
21:34:29  37  ,cx16
21:34:29  38  ,cx18
21:34:29  39  --
21:34:29  40  ,crr4
21:34:29  41  ,crr6
21:34:29  42  ,crr8
21:34:29  43  ,crr10
21:34:29  44  ,crr12
21:34:29  45  ,crr14
21:34:29  46  ,crr16
21:34:29  47  ,crr18
21:34:29  48  --
21:34:29  49  ,hh
21:34:29  50  ,d
21:34:29  51  ,w
21:34:29  52  ,mpm
21:34:29  53  ,mph
21:34:29  54  FROM svm6122
21:34:29  55  ORDER BY ydate
21:34:29  56  /

Table created.

Elapsed: 00:00:00.37
21:34:30 SQL> 
21:34:30 SQL> -- rpt
21:34:30 SQL> 
21:34:30 SQL> SELECT
21:34:30   2  pair
21:34:30   3  ,trend
21:34:30   4  ,gatt
21:34:30   5  ,COUNT(pair)
21:34:30   6  ,AVG(g6)
21:34:30   7  FROM svm6142
21:34:30   8  GROUP BY pair,trend,gatt
21:34:30   9  ORDER BY pair,trend,gatt
21:34:30  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6136  -.0030778
eur_usd 	-1 up	      3721 .004488709
eur_usd 	-1		 5
eur_usd 	 1 nup	      5958 -.00314638
eur_usd 	 1 up	      3679 .005153472
eur_usd 	 1		67

6 rows selected.

Elapsed: 00:00:00.07
21:34:30 SQL> 
21:34:30 SQL> 
21:34:30 SQL> -- Derive NTILE based params:
21:34:30 SQL> 
21:34:30 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.47
21:34:30 SQL> CREATE TABLE svm6162 COMPRESS AS
21:34:30   2  SELECT
21:34:30   3  pair
21:34:30   4  ,ydate
21:34:30   5  ,prdate
21:34:30   6  ,clse
21:34:30   7  ,g6
21:34:30   8  ,gatt
21:34:30   9  ,gattn
21:34:30  10  ,trend
21:34:30  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
21:34:30  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
21:34:30  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
21:34:30  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
21:34:30  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
21:34:30  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
21:34:30  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
21:34:30  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
21:34:30  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
21:34:30  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
21:34:30  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
21:34:30  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
21:34:30  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
21:34:30  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
21:34:30  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
21:34:30  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
21:34:30  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
21:34:30  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
21:34:30  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
21:34:30  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
21:34:30  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
21:34:30  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
21:34:30  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
21:34:30  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
21:34:30  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
21:34:30  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
21:34:30  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
21:34:30  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
21:34:30  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
21:34:30  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
21:34:30  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
21:34:30  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
21:34:30  43  ,hh  att32
21:34:30  44  ,d   att33
21:34:30  45  ,w   att34
21:34:30  46  ,mpm att35
21:34:30  47  ,mph att36
21:34:30  48  ,trend att37
21:34:30  49  FROM svm6142
21:34:30  50  ORDER BY ydate
21:34:30  51  /

Table created.

Elapsed: 00:00:04.83
21:34:35 SQL> 
21:34:35 SQL> -- rpt
21:34:35 SQL> 
21:34:35 SQL> SELECT
21:34:35   2  pair
21:34:35   3  ,trend
21:34:35   4  ,gatt
21:34:35   5  ,COUNT(pair)
21:34:35   6  ,AVG(g6)
21:34:35   7  FROM svm6162
21:34:35   8  GROUP BY pair,trend,gatt
21:34:35   9  ORDER BY pair,trend,gatt
21:34:35  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6136  -.0030778
eur_usd 	-1 up	      3721 .004488709
eur_usd 	-1		 5
eur_usd 	 1 nup	      5958 -.00314638
eur_usd 	 1 up	      3679 .005153472
eur_usd 	 1		67

6 rows selected.

Elapsed: 00:00:00.03
21:34:35 SQL> 
21:34:35 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:01.50
21:34:36 SQL> CREATE TABLE modsrc COMPRESS AS
21:34:36   2  SELECT
21:34:36   3  pair
21:34:36   4  ,ydate
21:34:36   5  ,prdate
21:34:36   6  ,trend
21:34:36   7  ,g6
21:34:36   8  ,gatt
21:34:36   9  ,gattn
21:34:36  10  FROM svm6162
21:34:36  11  /

Table created.

Elapsed: 00:00:00.28
21:34:37 SQL> 
21:34:37 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
21:34:37 SQL> 
21:34:37 SQL> DROP   TABLE eur_ms610 ;

Table dropped.

Elapsed: 00:00:00.45
21:34:38 SQL> CREATE TABLE eur_ms610 COMPRESS AS
21:34:38   2  SELECT
21:34:38   3  ydate
21:34:38   4  ,trend eur_trend
21:34:38   5  ,g6    eur_g6
21:34:38   6  ,gatt  eur_gatt
21:34:38   7  ,gattn eur_gattn
21:34:38   8  FROM modsrc
21:34:38   9  /

Table created.

Elapsed: 00:00:00.08
21:34:38 SQL> 
21:34:38 SQL> ANALYZE TABLE eur_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
21:34:38 SQL> 
21:34:38 SQL> -- I need a copy of the attributes:
21:34:38 SQL> 
21:34:38 SQL> 
21:34:38 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.12
21:34:38 SQL> CREATE TABLE eur_att COMPRESS AS
21:34:38   2  SELECT
21:34:38   3  ydate
21:34:38   4  ,att00 eur_att00
21:34:38   5  ,att01 eur_att01
21:34:38   6  ,att02 eur_att02
21:34:38   7  ,att03 eur_att03
21:34:38   8  ,att04 eur_att04
21:34:38   9  ,att05 eur_att05
21:34:38  10  ,att06 eur_att06
21:34:38  11  ,att07 eur_att07
21:34:38  12  ,att08 eur_att08
21:34:38  13  ,att09 eur_att09
21:34:38  14  ,att10 eur_att10
21:34:38  15  ,att11 eur_att11
21:34:38  16  ,att12 eur_att12
21:34:38  17  ,att13 eur_att13
21:34:38  18  ,att14 eur_att14
21:34:38  19  ,att15 eur_att15
21:34:38  20  ,att16 eur_att16
21:34:38  21  ,att17 eur_att17
21:34:38  22  ,att18 eur_att18
21:34:38  23  ,att19 eur_att19
21:34:38  24  ,att20 eur_att20
21:34:38  25  ,att21 eur_att21
21:34:38  26  ,att22 eur_att22
21:34:38  27  ,att23 eur_att23
21:34:38  28  ,att24 eur_att24
21:34:38  29  ,att25 eur_att25
21:34:38  30  ,att26 eur_att26
21:34:38  31  ,att27 eur_att27
21:34:38  32  ,att28 eur_att28
21:34:38  33  ,att29 eur_att29
21:34:38  34  ,att30 eur_att30
21:34:38  35  ,att31 eur_att31
21:34:38  36  ,att32 eur_att32
21:34:38  37  ,att33 eur_att33
21:34:38  38  ,att34 eur_att34
21:34:38  39  ,att35 eur_att35
21:34:38  40  ,att36 eur_att36
21:34:38  41  ,att37 eur_att37
21:34:38  42  FROM svm6162
21:34:38  43  /

Table created.

Elapsed: 00:00:00.17
21:34:38 SQL> 
21:34:38 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.44
21:34:39 SQL> 
21:34:39 SQL> -- rpt
21:34:39 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19566

Elapsed: 00:00:00.85
21:34:39 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     19566

Elapsed: 00:00:00.01
21:34:39 SQL> 
21:34:39 SQL> --
21:34:39 SQL> -- aud610.sql
21:34:39 SQL> --
21:34:39 SQL> 
21:34:39 SQL> -- Creates views and tables for backtesting a forex SVM strategy
21:34:39 SQL> 
21:34:39 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:01.37
21:34:41 SQL> 
21:34:41 SQL> -- I created di5min here:
21:34:41 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
21:34:41 SQL> 
21:34:41 SQL> CREATE OR REPLACE VIEW svm6102 AS
21:34:41   2  SELECT
21:34:41   3  pair
21:34:41   4  ,ydate
21:34:41   5  ,prdate
21:34:41   6  ,rownum rnum -- acts as t in my time-series
21:34:41   7  ,clse
21:34:41   8  -- Derive a bunch of attributes from clse, the latest price:
21:34:41   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
21:34:41  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
21:34:41  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
21:34:41  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
21:34:41  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
21:34:41  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
21:34:41  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
21:34:41  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
21:34:41  17  --
21:34:41  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
21:34:41  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
21:34:41  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
21:34:41  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
21:34:41  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
21:34:41  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
21:34:41  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
21:34:41  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
21:34:41  26  --
21:34:41  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
21:34:41  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
21:34:41  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
21:34:41  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
21:34:41  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
21:34:41  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
21:34:41  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
21:34:41  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
21:34:41  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
21:34:41  36  FROM di5min WHERE pair LIKE'%aud%'
21:34:41  37  AND ydate > sysdate - 95
21:34:41  38  ORDER BY ydate
21:34:41  39  /

View created.

Elapsed: 00:00:00.07
21:34:41 SQL> 
21:34:41 SQL> -- rpt
21:34:41 SQL> 
21:34:41 SQL> SELECT
21:34:41   2  pair
21:34:41   3  ,COUNT(pair)
21:34:41   4  ,MIN(clse),MAX(clse)
21:34:41   5  ,MIN(avg6),MAX(avg6)
21:34:41   6  ,MIN(ydate),MAX(ydate)
21:34:41   7  FROM svm6102
21:34:41   8  GROUP BY pair
21:34:41   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
aud_usd       19563	.95405	   1.0183 .957141438 1.01629281 2010-09-26 20:55:01 2010-12-29 21:30:00

Elapsed: 00:00:00.88
21:34:42 SQL> 
21:34:42 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
21:34:42 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.19
21:34:42 SQL> CREATE TABLE svm6122 COMPRESS AS
21:34:42   2  SELECT
21:34:42   3  pair
21:34:42   4  ,ydate
21:34:42   5  ,prdate
21:34:42   6  ,clse
21:34:42   7  -- g6 is important. I want to predict g6:
21:34:42   8  ,ld6 - clse g6
21:34:42   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
21:34:42  10  -- I want more attributes from the ones I derived above:
21:34:42  11  -- clse relation to moving-min
21:34:42  12  ,clse-min4  cm4
21:34:42  13  ,clse-min6  cm6
21:34:42  14  ,clse-min8  cm8
21:34:42  15  ,clse-min10 cm10
21:34:42  16  ,clse-min12 cm12
21:34:42  17  ,clse-min14 cm14
21:34:42  18  ,clse-min16 cm16
21:34:42  19  ,clse-min18 cm18
21:34:42  20  -- clse relation to moving-avg
21:34:42  21  ,clse-avg4  ca4
21:34:42  22  ,clse-avg6  ca6
21:34:42  23  ,clse-avg8  ca8
21:34:42  24  ,clse-avg10 ca10
21:34:42  25  ,clse-avg12 ca12
21:34:42  26  ,clse-avg14 ca14
21:34:42  27  ,clse-avg16 ca16
21:34:42  28  ,clse-avg18 ca18
21:34:42  29  -- clse relation to moving-max
21:34:42  30  ,clse-max4  cx4
21:34:42  31  ,clse-max6  cx6
21:34:42  32  ,clse-max8  cx8
21:34:42  33  ,clse-max10 cx10
21:34:42  34  ,clse-max12 cx12
21:34:42  35  ,clse-max14 cx14
21:34:42  36  ,clse-max16 cx16
21:34:42  37  ,clse-max18 cx18
21:34:42  38  -- Derive more attributes.
21:34:42  39  -- I want to use CORR() here to help SVM see the shape of the series.
21:34:42  40  -- But COVAR_POP is more stable:
21:34:42  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
21:34:42  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
21:34:42  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
21:34:42  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
21:34:42  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
21:34:42  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
21:34:42  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
21:34:42  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
21:34:42  49  -- Derive date related attributes:
21:34:42  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
21:34:42  51  ,0+TO_CHAR(ydate,'D')d
21:34:42  52  ,0+TO_CHAR(ydate,'W')w
21:34:42  53  -- mpm stands for minutes-past-midnight:
21:34:42  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
21:34:42  55  -- mph stands for minutes-past-hour:
21:34:42  56  ,0+TO_CHAR(ydate,'MI')mph
21:34:42  57  FROM svm6102
21:34:42  58  ORDER BY ydate
21:34:42  59  /

Table created.

Elapsed: 00:00:02.05
21:34:44 SQL> 
21:34:44 SQL> -- rpt
21:34:44 SQL> 
21:34:44 SQL> SELECT
21:34:44   2  pair
21:34:44   3  ,COUNT(pair)
21:34:44   4  ,MIN(clse),MAX(clse)
21:34:44   5  ,MIN(ydate),MAX(ydate)
21:34:44   6  FROM svm6122
21:34:44   7  GROUP BY pair
21:34:44   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
aud_usd       19563	.95405	   1.0183 2010-09-26 20:55:01 2010-12-29 21:30:00

Elapsed: 00:00:00.04
21:34:44 SQL> 
21:34:44 SQL> -- Prepare for derivation of NTILE based params:
21:34:44 SQL> 
21:34:44 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.18
21:34:44 SQL> CREATE TABLE svm6142 COMPRESS AS
21:34:44   2  SELECT
21:34:44   3  pair
21:34:44   4  ,ydate
21:34:44   5  ,prdate
21:34:44   6  ,clse
21:34:44   7  ,g6
21:34:44   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
21:34:44   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
21:34:44  10  ,CASE WHEN trend IS NULL THEN 1
21:34:44  11  	    WHEN trend =0      THEN 1
21:34:44  12  	    ELSE trend END trend
21:34:44  13  ,cm4
21:34:44  14  ,cm6
21:34:44  15  ,cm8
21:34:44  16  ,cm10
21:34:44  17  ,cm12
21:34:44  18  ,cm14
21:34:44  19  ,cm16
21:34:44  20  ,cm18
21:34:44  21  --
21:34:44  22  ,ca4
21:34:44  23  ,ca6
21:34:44  24  ,ca8
21:34:44  25  ,ca10
21:34:44  26  ,ca12
21:34:44  27  ,ca14
21:34:44  28  ,ca16
21:34:44  29  ,ca18
21:34:44  30  --
21:34:44  31  ,cx4
21:34:44  32  ,cx6
21:34:44  33  ,cx8
21:34:44  34  ,cx10
21:34:44  35  ,cx12
21:34:44  36  ,cx14
21:34:44  37  ,cx16
21:34:44  38  ,cx18
21:34:44  39  --
21:34:44  40  ,crr4
21:34:44  41  ,crr6
21:34:44  42  ,crr8
21:34:44  43  ,crr10
21:34:44  44  ,crr12
21:34:44  45  ,crr14
21:34:44  46  ,crr16
21:34:44  47  ,crr18
21:34:44  48  --
21:34:44  49  ,hh
21:34:44  50  ,d
21:34:44  51  ,w
21:34:44  52  ,mpm
21:34:44  53  ,mph
21:34:44  54  FROM svm6122
21:34:44  55  ORDER BY ydate
21:34:44  56  /

Table created.

Elapsed: 00:00:00.37
21:34:45 SQL> 
21:34:45 SQL> -- rpt
21:34:45 SQL> 
21:34:45 SQL> SELECT
21:34:45   2  pair
21:34:45   3  ,trend
21:34:45   4  ,gatt
21:34:45   5  ,COUNT(pair)
21:34:45   6  ,AVG(g6)
21:34:45   7  FROM svm6142
21:34:45   8  GROUP BY pair,trend,gatt
21:34:45   9  ORDER BY pair,trend,gatt
21:34:45  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5198 -.00212209
aud_usd 	-1 up	      3809 .003727245
aud_usd 	-1		 9
aud_usd 	 1 nup	      6736 -.00211534
aud_usd 	 1 up	      3748 .004044364
aud_usd 	 1		63

6 rows selected.

Elapsed: 00:00:00.04
21:34:45 SQL> 
21:34:45 SQL> 
21:34:45 SQL> -- Derive NTILE based params:
21:34:45 SQL> 
21:34:45 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.16
21:34:45 SQL> CREATE TABLE svm6162 COMPRESS AS
21:34:45   2  SELECT
21:34:45   3  pair
21:34:45   4  ,ydate
21:34:45   5  ,prdate
21:34:45   6  ,clse
21:34:45   7  ,g6
21:34:45   8  ,gatt
21:34:45   9  ,gattn
21:34:45  10  ,trend
21:34:45  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
21:34:45  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
21:34:45  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
21:34:45  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
21:34:45  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
21:34:45  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
21:34:45  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
21:34:45  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
21:34:45  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
21:34:45  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
21:34:45  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
21:34:45  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
21:34:45  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
21:34:45  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
21:34:45  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
21:34:45  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
21:34:45  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
21:34:45  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
21:34:45  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
21:34:45  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
21:34:45  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
21:34:45  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
21:34:45  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
21:34:45  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
21:34:45  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
21:34:45  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
21:34:45  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
21:34:45  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
21:34:45  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
21:34:45  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
21:34:45  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
21:34:45  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
21:34:45  43  ,hh  att32
21:34:45  44  ,d   att33
21:34:45  45  ,w   att34
21:34:45  46  ,mpm att35
21:34:45  47  ,mph att36
21:34:45  48  ,trend att37
21:34:45  49  FROM svm6142
21:34:45  50  ORDER BY ydate
21:34:45  51  /

Table created.

Elapsed: 00:00:04.84
21:34:50 SQL> 
21:34:50 SQL> -- rpt
21:34:50 SQL> 
21:34:50 SQL> SELECT
21:34:50   2  pair
21:34:50   3  ,trend
21:34:50   4  ,gatt
21:34:50   5  ,COUNT(pair)
21:34:50   6  ,AVG(g6)
21:34:50   7  FROM svm6162
21:34:50   8  GROUP BY pair,trend,gatt
21:34:50   9  ORDER BY pair,trend,gatt
21:34:50  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5198 -.00212209
aud_usd 	-1 up	      3809 .003727245
aud_usd 	-1		 9
aud_usd 	 1 nup	      6736 -.00211534
aud_usd 	 1 up	      3748 .004044364
aud_usd 	 1		63

6 rows selected.

Elapsed: 00:00:00.03
21:34:50 SQL> 
21:34:50 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.22
21:34:50 SQL> CREATE TABLE modsrc COMPRESS AS
21:34:50   2  SELECT
21:34:50   3  pair
21:34:50   4  ,ydate
21:34:50   5  ,prdate
21:34:50   6  ,trend
21:34:50   7  ,g6
21:34:50   8  ,gatt
21:34:50   9  ,gattn
21:34:50  10  FROM svm6162
21:34:50  11  /

Table created.

Elapsed: 00:00:00.08
21:34:50 SQL> 
21:34:50 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.29
21:34:50 SQL> 
21:34:50 SQL> DROP   TABLE aud_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
21:34:50 SQL> CREATE TABLE aud_ms610 COMPRESS AS
21:34:50   2  SELECT
21:34:50   3  ydate
21:34:50   4  ,trend aud_trend
21:34:50   5  ,g6    aud_g6
21:34:50   6  ,gatt  aud_gatt
21:34:50   7  ,gattn aud_gattn
21:34:50   8  FROM modsrc
21:34:50   9  /

Table created.

Elapsed: 00:00:00.07
21:34:50 SQL> 
21:34:50 SQL> ANALYZE TABLE aud_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
21:34:51 SQL> 
21:34:51 SQL> -- I need a copy of the attributes:
21:34:51 SQL> 
21:34:51 SQL> 
21:34:51 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.06
21:34:51 SQL> CREATE TABLE aud_att COMPRESS AS
21:34:51   2  SELECT
21:34:51   3  ydate
21:34:51   4  ,att00 aud_att00
21:34:51   5  ,att01 aud_att01
21:34:51   6  ,att02 aud_att02
21:34:51   7  ,att03 aud_att03
21:34:51   8  ,att04 aud_att04
21:34:51   9  ,att05 aud_att05
21:34:51  10  ,att06 aud_att06
21:34:51  11  ,att07 aud_att07
21:34:51  12  ,att08 aud_att08
21:34:51  13  ,att09 aud_att09
21:34:51  14  ,att10 aud_att10
21:34:51  15  ,att11 aud_att11
21:34:51  16  ,att12 aud_att12
21:34:51  17  ,att13 aud_att13
21:34:51  18  ,att14 aud_att14
21:34:51  19  ,att15 aud_att15
21:34:51  20  ,att16 aud_att16
21:34:51  21  ,att17 aud_att17
21:34:51  22  ,att18 aud_att18
21:34:51  23  ,att19 aud_att19
21:34:51  24  ,att20 aud_att20
21:34:51  25  ,att21 aud_att21
21:34:51  26  ,att22 aud_att22
21:34:51  27  ,att23 aud_att23
21:34:51  28  ,att24 aud_att24
21:34:51  29  ,att25 aud_att25
21:34:51  30  ,att26 aud_att26
21:34:51  31  ,att27 aud_att27
21:34:51  32  ,att28 aud_att28
21:34:51  33  ,att29 aud_att29
21:34:51  34  ,att30 aud_att30
21:34:51  35  ,att31 aud_att31
21:34:51  36  ,att32 aud_att32
21:34:51  37  ,att33 aud_att33
21:34:51  38  ,att34 aud_att34
21:34:51  39  ,att35 aud_att35
21:34:51  40  ,att36 aud_att36
21:34:51  41  ,att37 aud_att37
21:34:51  42  FROM svm6162
21:34:51  43  /

Table created.

Elapsed: 00:00:00.16
21:34:51 SQL> 
21:34:51 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.42
21:34:51 SQL> 
21:34:51 SQL> -- rpt
21:34:51 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19563

Elapsed: 00:00:00.84
21:34:52 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     19563

Elapsed: 00:00:00.00
21:34:52 SQL> 
21:34:52 SQL> --
21:34:52 SQL> -- gbp610.sql
21:34:52 SQL> --
21:34:52 SQL> 
21:34:52 SQL> -- Creates views and tables for backtesting a forex SVM strategy
21:34:52 SQL> 
21:34:52 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.45
21:34:52 SQL> 
21:34:52 SQL> -- I created di5min here:
21:34:52 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
21:34:52 SQL> 
21:34:52 SQL> CREATE OR REPLACE VIEW svm6102 AS
21:34:52   2  SELECT
21:34:52   3  pair
21:34:52   4  ,ydate
21:34:52   5  ,prdate
21:34:52   6  ,rownum rnum -- acts as t in my time-series
21:34:52   7  ,clse
21:34:52   8  -- Derive a bunch of attributes from clse, the latest price:
21:34:52   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
21:34:52  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
21:34:52  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
21:34:52  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
21:34:52  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
21:34:52  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
21:34:52  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
21:34:52  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
21:34:52  17  --
21:34:52  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
21:34:52  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
21:34:52  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
21:34:52  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
21:34:52  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
21:34:52  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
21:34:53  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
21:34:53  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
21:34:53  26  --
21:34:53  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
21:34:53  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
21:34:53  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
21:34:53  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
21:34:53  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
21:34:53  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
21:34:53  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
21:34:53  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
21:34:53  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
21:34:53  36  FROM di5min WHERE pair LIKE'%gbp%'
21:34:53  37  AND ydate > sysdate - 95
21:34:53  38  ORDER BY ydate
21:34:53  39  /

View created.

Elapsed: 00:00:00.04
21:34:53 SQL> 
21:34:53 SQL> -- rpt
21:34:53 SQL> 
21:34:53 SQL> SELECT
21:34:53   2  pair
21:34:53   3  ,COUNT(pair)
21:34:53   4  ,MIN(clse),MAX(clse)
21:34:53   5  ,MIN(avg6),MAX(avg6)
21:34:53   6  ,MIN(ydate),MAX(ydate)
21:34:53   7  FROM svm6102
21:34:53   8  GROUP BY pair
21:34:53   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
gbp_usd       19565   1.535325	   1.6295 1.53696747 1.62716986 2010-09-26 20:55:01 2010-12-29 21:30:00

Elapsed: 00:00:00.86
21:34:53 SQL> 
21:34:53 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
21:34:53 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.32
21:34:54 SQL> CREATE TABLE svm6122 COMPRESS AS
21:34:54   2  SELECT
21:34:54   3  pair
21:34:54   4  ,ydate
21:34:54   5  ,prdate
21:34:54   6  ,clse
21:34:54   7  -- g6 is important. I want to predict g6:
21:34:54   8  ,ld6 - clse g6
21:34:54   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
21:34:54  10  -- I want more attributes from the ones I derived above:
21:34:54  11  -- clse relation to moving-min
21:34:54  12  ,clse-min4  cm4
21:34:54  13  ,clse-min6  cm6
21:34:54  14  ,clse-min8  cm8
21:34:54  15  ,clse-min10 cm10
21:34:54  16  ,clse-min12 cm12
21:34:54  17  ,clse-min14 cm14
21:34:54  18  ,clse-min16 cm16
21:34:54  19  ,clse-min18 cm18
21:34:54  20  -- clse relation to moving-avg
21:34:54  21  ,clse-avg4  ca4
21:34:54  22  ,clse-avg6  ca6
21:34:54  23  ,clse-avg8  ca8
21:34:54  24  ,clse-avg10 ca10
21:34:54  25  ,clse-avg12 ca12
21:34:54  26  ,clse-avg14 ca14
21:34:54  27  ,clse-avg16 ca16
21:34:54  28  ,clse-avg18 ca18
21:34:54  29  -- clse relation to moving-max
21:34:54  30  ,clse-max4  cx4
21:34:54  31  ,clse-max6  cx6
21:34:54  32  ,clse-max8  cx8
21:34:54  33  ,clse-max10 cx10
21:34:54  34  ,clse-max12 cx12
21:34:54  35  ,clse-max14 cx14
21:34:54  36  ,clse-max16 cx16
21:34:54  37  ,clse-max18 cx18
21:34:54  38  -- Derive more attributes.
21:34:54  39  -- I want to use CORR() here to help SVM see the shape of the series.
21:34:54  40  -- But COVAR_POP is more stable:
21:34:54  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
21:34:54  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
21:34:54  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
21:34:54  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
21:34:54  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
21:34:54  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
21:34:54  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
21:34:54  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
21:34:54  49  -- Derive date related attributes:
21:34:54  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
21:34:54  51  ,0+TO_CHAR(ydate,'D')d
21:34:54  52  ,0+TO_CHAR(ydate,'W')w
21:34:54  53  -- mpm stands for minutes-past-midnight:
21:34:54  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
21:34:54  55  -- mph stands for minutes-past-hour:
21:34:54  56  ,0+TO_CHAR(ydate,'MI')mph
21:34:54  57  FROM svm6102
21:34:54  58  ORDER BY ydate
21:34:54  59  /

Table created.

Elapsed: 00:00:02.12
21:34:56 SQL> 
21:34:56 SQL> -- rpt
21:34:56 SQL> 
21:34:56 SQL> SELECT
21:34:56   2  pair
21:34:56   3  ,COUNT(pair)
21:34:56   4  ,MIN(clse),MAX(clse)
21:34:56   5  ,MIN(ydate),MAX(ydate)
21:34:56   6  FROM svm6122
21:34:56   7  GROUP BY pair
21:34:56   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
gbp_usd       19565   1.535325	   1.6295 2010-09-26 20:55:01 2010-12-29 21:30:00

Elapsed: 00:00:00.04
21:34:56 SQL> 
21:34:56 SQL> -- Prepare for derivation of NTILE based params:
21:34:56 SQL> 
21:34:56 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.20
21:34:56 SQL> CREATE TABLE svm6142 COMPRESS AS
21:34:56   2  SELECT
21:34:56   3  pair
21:34:56   4  ,ydate
21:34:56   5  ,prdate
21:34:56   6  ,clse
21:34:56   7  ,g6
21:34:56   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
21:34:56   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
21:34:56  10  ,CASE WHEN trend IS NULL THEN 1
21:34:56  11  	    WHEN trend =0      THEN 1
21:34:56  12  	    ELSE trend END trend
21:34:56  13  ,cm4
21:34:56  14  ,cm6
21:34:56  15  ,cm8
21:34:56  16  ,cm10
21:34:56  17  ,cm12
21:34:56  18  ,cm14
21:34:56  19  ,cm16
21:34:56  20  ,cm18
21:34:56  21  --
21:34:56  22  ,ca4
21:34:56  23  ,ca6
21:34:56  24  ,ca8
21:34:56  25  ,ca10
21:34:56  26  ,ca12
21:34:56  27  ,ca14
21:34:56  28  ,ca16
21:34:56  29  ,ca18
21:34:56  30  --
21:34:56  31  ,cx4
21:34:56  32  ,cx6
21:34:56  33  ,cx8
21:34:56  34  ,cx10
21:34:56  35  ,cx12
21:34:56  36  ,cx14
21:34:56  37  ,cx16
21:34:56  38  ,cx18
21:34:56  39  --
21:34:56  40  ,crr4
21:34:56  41  ,crr6
21:34:56  42  ,crr8
21:34:56  43  ,crr10
21:34:56  44  ,crr12
21:34:56  45  ,crr14
21:34:56  46  ,crr16
21:34:56  47  ,crr18
21:34:56  48  --
21:34:56  49  ,hh
21:34:56  50  ,d
21:34:56  51  ,w
21:34:56  52  ,mpm
21:34:56  53  ,mph
21:34:56  54  FROM svm6122
21:34:56  55  ORDER BY ydate
21:34:56  56  /

Table created.

Elapsed: 00:00:00.37
21:34:56 SQL> 
21:34:56 SQL> -- rpt
21:34:56 SQL> 
21:34:56 SQL> SELECT
21:34:56   2  pair
21:34:56   3  ,trend
21:34:56   4  ,gatt
21:34:56   5  ,COUNT(pair)
21:34:56   6  ,AVG(g6)
21:34:56   7  FROM svm6142
21:34:56   8  GROUP BY pair,trend,gatt
21:34:56   9  ORDER BY pair,trend,gatt
21:34:56  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6295 -.00256031
gbp_usd 	-1 up	      3579 .004286117
gbp_usd 	 1 nup	      6206 -.00268133
gbp_usd 	 1 up	      3413 .004384889
gbp_usd 	 1		72

Elapsed: 00:00:00.20
21:34:57 SQL> 
21:34:57 SQL> 
21:34:57 SQL> -- Derive NTILE based params:
21:34:57 SQL> 
21:34:57 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.30
21:34:57 SQL> CREATE TABLE svm6162 COMPRESS AS
21:34:57   2  SELECT
21:34:57   3  pair
21:34:57   4  ,ydate
21:34:57   5  ,prdate
21:34:57   6  ,clse
21:34:57   7  ,g6
21:34:57   8  ,gatt
21:34:57   9  ,gattn
21:34:57  10  ,trend
21:34:57  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
21:34:57  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
21:34:57  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
21:34:57  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
21:34:57  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
21:34:57  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
21:34:57  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
21:34:57  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
21:34:57  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
21:34:57  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
21:34:57  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
21:34:57  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
21:34:57  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
21:34:57  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
21:34:57  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
21:34:57  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
21:34:57  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
21:34:57  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
21:34:57  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
21:34:57  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
21:34:57  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
21:34:57  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
21:34:57  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
21:34:57  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
21:34:57  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
21:34:57  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
21:34:57  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
21:34:57  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
21:34:57  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
21:34:57  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
21:34:57  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
21:34:57  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
21:34:57  43  ,hh  att32
21:34:57  44  ,d   att33
21:34:57  45  ,w   att34
21:34:57  46  ,mpm att35
21:34:57  47  ,mph att36
21:34:57  48  ,trend att37
21:34:57  49  FROM svm6142
21:34:57  50  ORDER BY ydate
21:34:57  51  /

Table created.

Elapsed: 00:00:05.17
21:35:02 SQL> 
21:35:02 SQL> -- rpt
21:35:02 SQL> 
21:35:02 SQL> SELECT
21:35:02   2  pair
21:35:02   3  ,trend
21:35:02   4  ,gatt
21:35:02   5  ,COUNT(pair)
21:35:02   6  ,AVG(g6)
21:35:02   7  FROM svm6162
21:35:02   8  GROUP BY pair,trend,gatt
21:35:02   9  ORDER BY pair,trend,gatt
21:35:02  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6295 -.00256031
gbp_usd 	-1 up	      3579 .004286117
gbp_usd 	 1 nup	      6206 -.00268133
gbp_usd 	 1 up	      3413 .004384889
gbp_usd 	 1		72

Elapsed: 00:00:00.02
21:35:02 SQL> 
21:35:02 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.15
21:35:02 SQL> CREATE TABLE modsrc COMPRESS AS
21:35:02   2  SELECT
21:35:02   3  pair
21:35:02   4  ,ydate
21:35:02   5  ,prdate
21:35:02   6  ,trend
21:35:02   7  ,g6
21:35:02   8  ,gatt
21:35:02   9  ,gattn
21:35:02  10  FROM svm6162
21:35:02  11  /

Table created.

Elapsed: 00:00:00.08
21:35:02 SQL> 
21:35:02 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
21:35:03 SQL> 
21:35:03 SQL> DROP   TABLE gbp_ms610 ;

Table dropped.

Elapsed: 00:00:00.09
21:35:03 SQL> CREATE TABLE gbp_ms610 COMPRESS AS
21:35:03   2  SELECT
21:35:03   3  ydate
21:35:03   4  ,trend gbp_trend
21:35:03   5  ,g6    gbp_g6
21:35:03   6  ,gatt  gbp_gatt
21:35:03   7  ,gattn gbp_gattn
21:35:03   8  FROM modsrc
21:35:03   9  /

Table created.

Elapsed: 00:00:00.06
21:35:03 SQL> 
21:35:03 SQL> ANALYZE TABLE gbp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
21:35:03 SQL> 
21:35:03 SQL> -- I need a copy of the attributes:
21:35:03 SQL> 
21:35:03 SQL> 
21:35:03 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.13
21:35:03 SQL> CREATE TABLE gbp_att COMPRESS AS
21:35:03   2  SELECT
21:35:03   3  ydate
21:35:03   4  ,att00 gbp_att00
21:35:03   5  ,att01 gbp_att01
21:35:03   6  ,att02 gbp_att02
21:35:03   7  ,att03 gbp_att03
21:35:03   8  ,att04 gbp_att04
21:35:03   9  ,att05 gbp_att05
21:35:03  10  ,att06 gbp_att06
21:35:03  11  ,att07 gbp_att07
21:35:03  12  ,att08 gbp_att08
21:35:03  13  ,att09 gbp_att09
21:35:03  14  ,att10 gbp_att10
21:35:03  15  ,att11 gbp_att11
21:35:03  16  ,att12 gbp_att12
21:35:03  17  ,att13 gbp_att13
21:35:03  18  ,att14 gbp_att14
21:35:03  19  ,att15 gbp_att15
21:35:03  20  ,att16 gbp_att16
21:35:03  21  ,att17 gbp_att17
21:35:03  22  ,att18 gbp_att18
21:35:03  23  ,att19 gbp_att19
21:35:03  24  ,att20 gbp_att20
21:35:03  25  ,att21 gbp_att21
21:35:03  26  ,att22 gbp_att22
21:35:03  27  ,att23 gbp_att23
21:35:03  28  ,att24 gbp_att24
21:35:03  29  ,att25 gbp_att25
21:35:03  30  ,att26 gbp_att26
21:35:03  31  ,att27 gbp_att27
21:35:03  32  ,att28 gbp_att28
21:35:03  33  ,att29 gbp_att29
21:35:03  34  ,att30 gbp_att30
21:35:03  35  ,att31 gbp_att31
21:35:03  36  ,att32 gbp_att32
21:35:03  37  ,att33 gbp_att33
21:35:03  38  ,att34 gbp_att34
21:35:03  39  ,att35 gbp_att35
21:35:03  40  ,att36 gbp_att36
21:35:03  41  ,att37 gbp_att37
21:35:03  42  FROM svm6162
21:35:03  43  /

Table created.

Elapsed: 00:00:00.21
21:35:03 SQL> 
21:35:03 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
21:35:04 SQL> 
21:35:04 SQL> -- rpt
21:35:04 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19565

Elapsed: 00:00:00.86
21:35:05 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     19565

Elapsed: 00:00:00.00
21:35:05 SQL> 
21:35:05 SQL> --
21:35:05 SQL> -- jpy610.sql
21:35:05 SQL> --
21:35:05 SQL> 
21:35:05 SQL> -- Creates views and tables for backtesting a forex SVM strategy
21:35:05 SQL> 
21:35:05 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.39
21:35:05 SQL> 
21:35:05 SQL> -- I created di5min here:
21:35:05 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
21:35:05 SQL> 
21:35:05 SQL> CREATE OR REPLACE VIEW svm6102 AS
21:35:05   2  SELECT
21:35:05   3  pair
21:35:05   4  ,ydate
21:35:05   5  ,prdate
21:35:05   6  ,rownum rnum -- acts as t in my time-series
21:35:05   7  ,clse
21:35:05   8  -- Derive a bunch of attributes from clse, the latest price:
21:35:05   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
21:35:05  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
21:35:05  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
21:35:05  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
21:35:05  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
21:35:05  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
21:35:05  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
21:35:05  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
21:35:05  17  --
21:35:05  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
21:35:05  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
21:35:05  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
21:35:05  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
21:35:05  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
21:35:05  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
21:35:05  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
21:35:05  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
21:35:05  26  --
21:35:05  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
21:35:05  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
21:35:05  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
21:35:05  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
21:35:05  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
21:35:05  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
21:35:05  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
21:35:05  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
21:35:05  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
21:35:05  36  FROM di5min WHERE pair LIKE'%jpy%'
21:35:05  37  AND ydate > sysdate - 95
21:35:05  38  ORDER BY ydate
21:35:05  39  /

View created.

Elapsed: 00:00:00.05
21:35:05 SQL> 
21:35:05 SQL> -- rpt
21:35:05 SQL> 
21:35:05 SQL> SELECT
21:35:05   2  pair
21:35:05   3  ,COUNT(pair)
21:35:05   4  ,MIN(clse),MAX(clse)
21:35:05   5  ,MIN(avg6),MAX(avg6)
21:35:05   6  ,MIN(ydate),MAX(ydate)
21:35:05   7  FROM svm6102
21:35:05   8  GROUP BY pair
21:35:05   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_jpy       19562	 80.25	   84.485 80.3595205 84.3105479 2010-09-26 20:55:01 2010-12-29 21:30:00

Elapsed: 00:00:00.90
21:35:06 SQL> 
21:35:06 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
21:35:06 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.28
21:35:06 SQL> CREATE TABLE svm6122 COMPRESS AS
21:35:06   2  SELECT
21:35:06   3  pair
21:35:06   4  ,ydate
21:35:06   5  ,prdate
21:35:06   6  ,clse
21:35:06   7  -- g6 is important. I want to predict g6:
21:35:06   8  ,ld6 - clse g6
21:35:06   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
21:35:06  10  -- I want more attributes from the ones I derived above:
21:35:06  11  -- clse relation to moving-min
21:35:06  12  ,clse-min4  cm4
21:35:06  13  ,clse-min6  cm6
21:35:06  14  ,clse-min8  cm8
21:35:06  15  ,clse-min10 cm10
21:35:06  16  ,clse-min12 cm12
21:35:06  17  ,clse-min14 cm14
21:35:06  18  ,clse-min16 cm16
21:35:06  19  ,clse-min18 cm18
21:35:06  20  -- clse relation to moving-avg
21:35:06  21  ,clse-avg4  ca4
21:35:06  22  ,clse-avg6  ca6
21:35:06  23  ,clse-avg8  ca8
21:35:06  24  ,clse-avg10 ca10
21:35:06  25  ,clse-avg12 ca12
21:35:06  26  ,clse-avg14 ca14
21:35:06  27  ,clse-avg16 ca16
21:35:06  28  ,clse-avg18 ca18
21:35:06  29  -- clse relation to moving-max
21:35:06  30  ,clse-max4  cx4
21:35:06  31  ,clse-max6  cx6
21:35:06  32  ,clse-max8  cx8
21:35:06  33  ,clse-max10 cx10
21:35:06  34  ,clse-max12 cx12
21:35:06  35  ,clse-max14 cx14
21:35:06  36  ,clse-max16 cx16
21:35:06  37  ,clse-max18 cx18
21:35:06  38  -- Derive more attributes.
21:35:06  39  -- I want to use CORR() here to help SVM see the shape of the series.
21:35:06  40  -- But COVAR_POP is more stable:
21:35:06  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
21:35:06  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
21:35:06  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
21:35:06  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
21:35:06  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
21:35:06  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
21:35:06  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
21:35:06  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
21:35:06  49  -- Derive date related attributes:
21:35:06  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
21:35:06  51  ,0+TO_CHAR(ydate,'D')d
21:35:06  52  ,0+TO_CHAR(ydate,'W')w
21:35:06  53  -- mpm stands for minutes-past-midnight:
21:35:06  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
21:35:06  55  -- mph stands for minutes-past-hour:
21:35:06  56  ,0+TO_CHAR(ydate,'MI')mph
21:35:06  57  FROM svm6102
21:35:06  58  ORDER BY ydate
21:35:06  59  /

Table created.

Elapsed: 00:00:02.16
21:35:08 SQL> 
21:35:08 SQL> -- rpt
21:35:08 SQL> 
21:35:08 SQL> SELECT
21:35:08   2  pair
21:35:08   3  ,COUNT(pair)
21:35:08   4  ,MIN(clse),MAX(clse)
21:35:08   5  ,MIN(ydate),MAX(ydate)
21:35:08   6  FROM svm6122
21:35:08   7  GROUP BY pair
21:35:08   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_jpy       19562	 80.25	   84.485 2010-09-26 20:55:01 2010-12-29 21:30:00

Elapsed: 00:00:00.07
21:35:08 SQL> 
21:35:08 SQL> -- Prepare for derivation of NTILE based params:
21:35:08 SQL> 
21:35:08 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.24
21:35:09 SQL> CREATE TABLE svm6142 COMPRESS AS
21:35:09   2  SELECT
21:35:09   3  pair
21:35:09   4  ,ydate
21:35:09   5  ,prdate
21:35:09   6  ,clse
21:35:09   7  ,g6
21:35:09   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
21:35:09   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
21:35:09  10  ,CASE WHEN trend IS NULL THEN 1
21:35:09  11  	    WHEN trend =0      THEN 1
21:35:09  12  	    ELSE trend END trend
21:35:09  13  ,cm4
21:35:09  14  ,cm6
21:35:09  15  ,cm8
21:35:09  16  ,cm10
21:35:09  17  ,cm12
21:35:09  18  ,cm14
21:35:09  19  ,cm16
21:35:09  20  ,cm18
21:35:09  21  --
21:35:09  22  ,ca4
21:35:09  23  ,ca6
21:35:09  24  ,ca8
21:35:09  25  ,ca10
21:35:09  26  ,ca12
21:35:09  27  ,ca14
21:35:09  28  ,ca16
21:35:09  29  ,ca18
21:35:09  30  --
21:35:09  31  ,cx4
21:35:09  32  ,cx6
21:35:09  33  ,cx8
21:35:09  34  ,cx10
21:35:09  35  ,cx12
21:35:09  36  ,cx14
21:35:09  37  ,cx16
21:35:09  38  ,cx18
21:35:09  39  --
21:35:09  40  ,crr4
21:35:09  41  ,crr6
21:35:09  42  ,crr8
21:35:09  43  ,crr10
21:35:09  44  ,crr12
21:35:09  45  ,crr14
21:35:09  46  ,crr16
21:35:09  47  ,crr18
21:35:09  48  --
21:35:09  49  ,hh
21:35:09  50  ,d
21:35:09  51  ,w
21:35:09  52  ,mpm
21:35:09  53  ,mph
21:35:09  54  FROM svm6122
21:35:09  55  ORDER BY ydate
21:35:09  56  /

Table created.

Elapsed: 00:00:00.37
21:35:09 SQL> 
21:35:09 SQL> -- rpt
21:35:09 SQL> 
21:35:09 SQL> SELECT
21:35:09   2  pair
21:35:09   3  ,trend
21:35:09   4  ,gatt
21:35:09   5  ,COUNT(pair)
21:35:09   6  ,AVG(g6)
21:35:09   7  FROM svm6142
21:35:09   8  GROUP BY pair,trend,gatt
21:35:09   9  ORDER BY pair,trend,gatt
21:35:09  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5262 -.16420666
usd_jpy 	-1 up	      4960 .163122068
usd_jpy 	-1		72
usd_jpy 	 1 nup	      5175 -.15491648
usd_jpy 	 1 up	      4093 .165084061

Elapsed: 00:00:00.04
21:35:09 SQL> 
21:35:09 SQL> 
21:35:09 SQL> -- Derive NTILE based params:
21:35:09 SQL> 
21:35:09 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.17
21:35:09 SQL> CREATE TABLE svm6162 COMPRESS AS
21:35:09   2  SELECT
21:35:09   3  pair
21:35:09   4  ,ydate
21:35:09   5  ,prdate
21:35:09   6  ,clse
21:35:09   7  ,g6
21:35:09   8  ,gatt
21:35:09   9  ,gattn
21:35:09  10  ,trend
21:35:09  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
21:35:09  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
21:35:09  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
21:35:09  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
21:35:09  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
21:35:09  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
21:35:09  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
21:35:09  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
21:35:09  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
21:35:09  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
21:35:09  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
21:35:09  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
21:35:09  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
21:35:09  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
21:35:09  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
21:35:09  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
21:35:09  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
21:35:09  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
21:35:09  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
21:35:09  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
21:35:09  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
21:35:09  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
21:35:09  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
21:35:09  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
21:35:09  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
21:35:09  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
21:35:09  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
21:35:09  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
21:35:09  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
21:35:09  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
21:35:09  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
21:35:09  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
21:35:09  43  ,hh  att32
21:35:09  44  ,d   att33
21:35:09  45  ,w   att34
21:35:09  46  ,mpm att35
21:35:09  47  ,mph att36
21:35:09  48  ,trend att37
21:35:09  49  FROM svm6142
21:35:09  50  ORDER BY ydate
21:35:09  51  /

Table created.

Elapsed: 00:00:04.73
21:35:14 SQL> 
21:35:14 SQL> -- rpt
21:35:14 SQL> 
21:35:14 SQL> SELECT
21:35:14   2  pair
21:35:14   3  ,trend
21:35:14   4  ,gatt
21:35:14   5  ,COUNT(pair)
21:35:14   6  ,AVG(g6)
21:35:14   7  FROM svm6162
21:35:14   8  GROUP BY pair,trend,gatt
21:35:14   9  ORDER BY pair,trend,gatt
21:35:14  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5262 -.16420666
usd_jpy 	-1 up	      4960 .163122068
usd_jpy 	-1		72
usd_jpy 	 1 nup	      5175 -.15491648
usd_jpy 	 1 up	      4093 .165084061

Elapsed: 00:00:00.02
21:35:14 SQL> 
21:35:14 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.15
21:35:14 SQL> CREATE TABLE modsrc COMPRESS AS
21:35:14   2  SELECT
21:35:14   3  pair
21:35:14   4  ,ydate
21:35:14   5  ,prdate
21:35:14   6  ,trend
21:35:14   7  ,g6
21:35:14   8  ,gatt
21:35:14   9  ,gattn
21:35:14  10  FROM svm6162
21:35:14  11  /

Table created.

Elapsed: 00:00:00.09
21:35:14 SQL> 
21:35:14 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
21:35:14 SQL> 
21:35:14 SQL> DROP   TABLE jpy_ms610 ;

Table dropped.

Elapsed: 00:00:00.06
21:35:14 SQL> CREATE TABLE jpy_ms610 COMPRESS AS
21:35:14   2  SELECT
21:35:14   3  ydate
21:35:14   4  ,trend jpy_trend
21:35:14   5  ,g6    jpy_g6
21:35:14   6  ,gatt  jpy_gatt
21:35:14   7  ,gattn jpy_gattn
21:35:14   8  FROM modsrc
21:35:14   9  /

Table created.

Elapsed: 00:00:00.07
21:35:15 SQL> 
21:35:15 SQL> ANALYZE TABLE jpy_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
21:35:15 SQL> 
21:35:15 SQL> -- I need a copy of the attributes:
21:35:15 SQL> 
21:35:15 SQL> 
21:35:15 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.04
21:35:15 SQL> CREATE TABLE jpy_att COMPRESS AS
21:35:15   2  SELECT
21:35:15   3  ydate
21:35:15   4  ,att00 jpy_att00
21:35:15   5  ,att01 jpy_att01
21:35:15   6  ,att02 jpy_att02
21:35:15   7  ,att03 jpy_att03
21:35:15   8  ,att04 jpy_att04
21:35:15   9  ,att05 jpy_att05
21:35:15  10  ,att06 jpy_att06
21:35:15  11  ,att07 jpy_att07
21:35:15  12  ,att08 jpy_att08
21:35:15  13  ,att09 jpy_att09
21:35:15  14  ,att10 jpy_att10
21:35:15  15  ,att11 jpy_att11
21:35:15  16  ,att12 jpy_att12
21:35:15  17  ,att13 jpy_att13
21:35:15  18  ,att14 jpy_att14
21:35:15  19  ,att15 jpy_att15
21:35:15  20  ,att16 jpy_att16
21:35:15  21  ,att17 jpy_att17
21:35:15  22  ,att18 jpy_att18
21:35:15  23  ,att19 jpy_att19
21:35:15  24  ,att20 jpy_att20
21:35:15  25  ,att21 jpy_att21
21:35:15  26  ,att22 jpy_att22
21:35:15  27  ,att23 jpy_att23
21:35:15  28  ,att24 jpy_att24
21:35:15  29  ,att25 jpy_att25
21:35:15  30  ,att26 jpy_att26
21:35:15  31  ,att27 jpy_att27
21:35:15  32  ,att28 jpy_att28
21:35:15  33  ,att29 jpy_att29
21:35:15  34  ,att30 jpy_att30
21:35:15  35  ,att31 jpy_att31
21:35:15  36  ,att32 jpy_att32
21:35:15  37  ,att33 jpy_att33
21:35:15  38  ,att34 jpy_att34
21:35:15  39  ,att35 jpy_att35
21:35:15  40  ,att36 jpy_att36
21:35:15  41  ,att37 jpy_att37
21:35:15  42  FROM svm6162
21:35:15  43  /

Table created.

Elapsed: 00:00:00.17
21:35:15 SQL> 
21:35:15 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.43
21:35:15 SQL> 
21:35:15 SQL> -- rpt
21:35:15 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19562

Elapsed: 00:00:00.90
21:35:16 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     19562

Elapsed: 00:00:00.00
21:35:16 SQL> 
21:35:16 SQL> --
21:35:16 SQL> -- cad610.sql
21:35:16 SQL> --
21:35:16 SQL> 
21:35:16 SQL> -- Creates views and tables for backtesting a forex SVM strategy
21:35:16 SQL> 
21:35:16 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:03.72
21:35:20 SQL> 
21:35:20 SQL> -- I created di5min here:
21:35:20 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
21:35:20 SQL> 
21:35:20 SQL> CREATE OR REPLACE VIEW svm6102 AS
21:35:20   2  SELECT
21:35:20   3  pair
21:35:20   4  ,ydate
21:35:20   5  ,prdate
21:35:20   6  ,rownum rnum -- acts as t in my time-series
21:35:20   7  ,clse
21:35:20   8  -- Derive a bunch of attributes from clse, the latest price:
21:35:20   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
21:35:20  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
21:35:20  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
21:35:20  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
21:35:20  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
21:35:20  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
21:35:20  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
21:35:20  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
21:35:20  17  --
21:35:20  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
21:35:20  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
21:35:20  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
21:35:20  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
21:35:20  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
21:35:20  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
21:35:20  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
21:35:20  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
21:35:20  26  --
21:35:20  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
21:35:20  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
21:35:20  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
21:35:20  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
21:35:20  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
21:35:20  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
21:35:20  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
21:35:20  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
21:35:20  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
21:35:20  36  FROM di5min WHERE pair LIKE'%cad%'
21:35:20  37  AND ydate > sysdate - 95
21:35:20  38  ORDER BY ydate
21:35:20  39  /

View created.

Elapsed: 00:00:00.07
21:35:20 SQL> 
21:35:20 SQL> -- rpt
21:35:20 SQL> 
21:35:20 SQL> SELECT
21:35:20   2  pair
21:35:20   3  ,COUNT(pair)
21:35:20   4  ,MIN(clse),MAX(clse)
21:35:20   5  ,MIN(avg6),MAX(avg6)
21:35:20   6  ,MIN(ydate),MAX(ydate)
21:35:20   7  FROM svm6102
21:35:20   8  GROUP BY pair
21:35:20   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_cad       19562	.99755	    1.036 .998845205 1.03336849 2010-09-26 20:55:01 2010-12-29 21:30:00

Elapsed: 00:00:00.85
21:35:21 SQL> 
21:35:21 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
21:35:21 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.17
21:35:21 SQL> CREATE TABLE svm6122 COMPRESS AS
21:35:21   2  SELECT
21:35:21   3  pair
21:35:21   4  ,ydate
21:35:21   5  ,prdate
21:35:21   6  ,clse
21:35:21   7  -- g6 is important. I want to predict g6:
21:35:21   8  ,ld6 - clse g6
21:35:21   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
21:35:21  10  -- I want more attributes from the ones I derived above:
21:35:21  11  -- clse relation to moving-min
21:35:21  12  ,clse-min4  cm4
21:35:21  13  ,clse-min6  cm6
21:35:21  14  ,clse-min8  cm8
21:35:21  15  ,clse-min10 cm10
21:35:21  16  ,clse-min12 cm12
21:35:21  17  ,clse-min14 cm14
21:35:21  18  ,clse-min16 cm16
21:35:21  19  ,clse-min18 cm18
21:35:21  20  -- clse relation to moving-avg
21:35:21  21  ,clse-avg4  ca4
21:35:21  22  ,clse-avg6  ca6
21:35:21  23  ,clse-avg8  ca8
21:35:21  24  ,clse-avg10 ca10
21:35:21  25  ,clse-avg12 ca12
21:35:21  26  ,clse-avg14 ca14
21:35:21  27  ,clse-avg16 ca16
21:35:21  28  ,clse-avg18 ca18
21:35:21  29  -- clse relation to moving-max
21:35:21  30  ,clse-max4  cx4
21:35:21  31  ,clse-max6  cx6
21:35:21  32  ,clse-max8  cx8
21:35:21  33  ,clse-max10 cx10
21:35:21  34  ,clse-max12 cx12
21:35:21  35  ,clse-max14 cx14
21:35:21  36  ,clse-max16 cx16
21:35:21  37  ,clse-max18 cx18
21:35:21  38  -- Derive more attributes.
21:35:21  39  -- I want to use CORR() here to help SVM see the shape of the series.
21:35:21  40  -- But COVAR_POP is more stable:
21:35:21  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
21:35:21  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
21:35:21  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
21:35:21  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
21:35:21  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
21:35:21  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
21:35:21  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
21:35:21  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
21:35:21  49  -- Derive date related attributes:
21:35:21  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
21:35:21  51  ,0+TO_CHAR(ydate,'D')d
21:35:21  52  ,0+TO_CHAR(ydate,'W')w
21:35:21  53  -- mpm stands for minutes-past-midnight:
21:35:21  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
21:35:21  55  -- mph stands for minutes-past-hour:
21:35:21  56  ,0+TO_CHAR(ydate,'MI')mph
21:35:21  57  FROM svm6102
21:35:21  58  ORDER BY ydate
21:35:21  59  /

Table created.

Elapsed: 00:00:02.03
21:35:23 SQL> 
21:35:23 SQL> -- rpt
21:35:23 SQL> 
21:35:23 SQL> SELECT
21:35:23   2  pair
21:35:23   3  ,COUNT(pair)
21:35:23   4  ,MIN(clse),MAX(clse)
21:35:23   5  ,MIN(ydate),MAX(ydate)
21:35:23   6  FROM svm6122
21:35:23   7  GROUP BY pair
21:35:23   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_cad       19562	.99755	    1.036 2010-09-26 20:55:01 2010-12-29 21:30:00

Elapsed: 00:00:00.10
21:35:23 SQL> 
21:35:23 SQL> -- Prepare for derivation of NTILE based params:
21:35:23 SQL> 
21:35:23 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.48
21:35:24 SQL> CREATE TABLE svm6142 COMPRESS AS
21:35:24   2  SELECT
21:35:24   3  pair
21:35:24   4  ,ydate
21:35:24   5  ,prdate
21:35:24   6  ,clse
21:35:24   7  ,g6
21:35:24   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
21:35:24   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
21:35:24  10  ,CASE WHEN trend IS NULL THEN 1
21:35:24  11  	    WHEN trend =0      THEN 1
21:35:24  12  	    ELSE trend END trend
21:35:24  13  ,cm4
21:35:24  14  ,cm6
21:35:24  15  ,cm8
21:35:24  16  ,cm10
21:35:24  17  ,cm12
21:35:24  18  ,cm14
21:35:24  19  ,cm16
21:35:24  20  ,cm18
21:35:24  21  --
21:35:24  22  ,ca4
21:35:24  23  ,ca6
21:35:24  24  ,ca8
21:35:24  25  ,ca10
21:35:24  26  ,ca12
21:35:24  27  ,ca14
21:35:24  28  ,ca16
21:35:24  29  ,ca18
21:35:24  30  --
21:35:24  31  ,cx4
21:35:24  32  ,cx6
21:35:24  33  ,cx8
21:35:24  34  ,cx10
21:35:24  35  ,cx12
21:35:24  36  ,cx14
21:35:24  37  ,cx16
21:35:24  38  ,cx18
21:35:24  39  --
21:35:24  40  ,crr4
21:35:24  41  ,crr6
21:35:24  42  ,crr8
21:35:24  43  ,crr10
21:35:24  44  ,crr12
21:35:24  45  ,crr14
21:35:24  46  ,crr16
21:35:24  47  ,crr18
21:35:24  48  --
21:35:24  49  ,hh
21:35:24  50  ,d
21:35:24  51  ,w
21:35:24  52  ,mpm
21:35:24  53  ,mph
21:35:24  54  FROM svm6122
21:35:24  55  ORDER BY ydate
21:35:24  56  /

Table created.

Elapsed: 00:00:00.37
21:35:24 SQL> 
21:35:24 SQL> -- rpt
21:35:24 SQL> 
21:35:24 SQL> SELECT
21:35:24   2  pair
21:35:24   3  ,trend
21:35:24   4  ,gatt
21:35:24   5  ,COUNT(pair)
21:35:24   6  ,AVG(g6)
21:35:24   7  FROM svm6142
21:35:24   8  GROUP BY pair,trend,gatt
21:35:24   9  ORDER BY pair,trend,gatt
21:35:24  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7183 -.00133291
usd_cad 	-1 up	      3143 .003084935
usd_cad 	-1		26
usd_cad 	 1 nup	      6675 -.00162197
usd_cad 	 1 up	      2489 .003597467
usd_cad 	 1		46

6 rows selected.

Elapsed: 00:00:00.04
21:35:24 SQL> 
21:35:24 SQL> 
21:35:24 SQL> -- Derive NTILE based params:
21:35:24 SQL> 
21:35:24 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.13
21:35:24 SQL> CREATE TABLE svm6162 COMPRESS AS
21:35:24   2  SELECT
21:35:24   3  pair
21:35:24   4  ,ydate
21:35:24   5  ,prdate
21:35:24   6  ,clse
21:35:24   7  ,g6
21:35:24   8  ,gatt
21:35:24   9  ,gattn
21:35:24  10  ,trend
21:35:24  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
21:35:24  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
21:35:24  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
21:35:24  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
21:35:24  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
21:35:24  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
21:35:24  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
21:35:24  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
21:35:24  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
21:35:24  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
21:35:24  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
21:35:24  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
21:35:24  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
21:35:24  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
21:35:24  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
21:35:24  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
21:35:24  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
21:35:24  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
21:35:24  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
21:35:24  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
21:35:24  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
21:35:24  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
21:35:24  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
21:35:24  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
21:35:24  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
21:35:24  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
21:35:24  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
21:35:24  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
21:35:24  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
21:35:24  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
21:35:24  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
21:35:24  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
21:35:24  43  ,hh  att32
21:35:24  44  ,d   att33
21:35:24  45  ,w   att34
21:35:24  46  ,mpm att35
21:35:24  47  ,mph att36
21:35:24  48  ,trend att37
21:35:24  49  FROM svm6142
21:35:24  50  ORDER BY ydate
21:35:24  51  /

Table created.

Elapsed: 00:00:04.67
21:35:29 SQL> 
21:35:29 SQL> -- rpt
21:35:29 SQL> 
21:35:29 SQL> SELECT
21:35:29   2  pair
21:35:29   3  ,trend
21:35:29   4  ,gatt
21:35:29   5  ,COUNT(pair)
21:35:29   6  ,AVG(g6)
21:35:29   7  FROM svm6162
21:35:29   8  GROUP BY pair,trend,gatt
21:35:29   9  ORDER BY pair,trend,gatt
21:35:29  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7183 -.00133291
usd_cad 	-1 up	      3143 .003084935
usd_cad 	-1		26
usd_cad 	 1 nup	      6675 -.00162197
usd_cad 	 1 up	      2489 .003597467
usd_cad 	 1		46

6 rows selected.

Elapsed: 00:00:00.03
21:35:29 SQL> 
21:35:29 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.17
21:35:29 SQL> CREATE TABLE modsrc COMPRESS AS
21:35:29   2  SELECT
21:35:29   3  pair
21:35:29   4  ,ydate
21:35:29   5  ,prdate
21:35:29   6  ,trend
21:35:29   7  ,g6
21:35:29   8  ,gatt
21:35:29   9  ,gattn
21:35:29  10  FROM svm6162
21:35:29  11  /

Table created.

Elapsed: 00:00:00.08
21:35:29 SQL> 
21:35:29 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
21:35:29 SQL> 
21:35:29 SQL> DROP   TABLE cad_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
21:35:29 SQL> CREATE TABLE cad_ms610 COMPRESS AS
21:35:29   2  SELECT
21:35:29   3  ydate
21:35:29   4  ,trend cad_trend
21:35:29   5  ,g6    cad_g6
21:35:29   6  ,gatt  cad_gatt
21:35:29   7  ,gattn cad_gattn
21:35:29   8  FROM modsrc
21:35:29   9  /

Table created.

Elapsed: 00:00:00.07
21:35:30 SQL> 
21:35:30 SQL> ANALYZE TABLE cad_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.26
21:35:30 SQL> 
21:35:30 SQL> -- I need a copy of the attributes:
21:35:30 SQL> 
21:35:30 SQL> 
21:35:30 SQL> DROP   TABLE cad_att;

Table dropped.

Elapsed: 00:00:00.12
21:35:30 SQL> CREATE TABLE cad_att COMPRESS AS
21:35:30   2  SELECT
21:35:30   3  ydate
21:35:30   4  ,att00 cad_att00
21:35:30   5  ,att01 cad_att01
21:35:30   6  ,att02 cad_att02
21:35:30   7  ,att03 cad_att03
21:35:30   8  ,att04 cad_att04
21:35:30   9  ,att05 cad_att05
21:35:30  10  ,att06 cad_att06
21:35:30  11  ,att07 cad_att07
21:35:30  12  ,att08 cad_att08
21:35:30  13  ,att09 cad_att09
21:35:30  14  ,att10 cad_att10
21:35:30  15  ,att11 cad_att11
21:35:30  16  ,att12 cad_att12
21:35:30  17  ,att13 cad_att13
21:35:30  18  ,att14 cad_att14
21:35:30  19  ,att15 cad_att15
21:35:30  20  ,att16 cad_att16
21:35:30  21  ,att17 cad_att17
21:35:30  22  ,att18 cad_att18
21:35:30  23  ,att19 cad_att19
21:35:30  24  ,att20 cad_att20
21:35:30  25  ,att21 cad_att21
21:35:30  26  ,att22 cad_att22
21:35:30  27  ,att23 cad_att23
21:35:30  28  ,att24 cad_att24
21:35:30  29  ,att25 cad_att25
21:35:30  30  ,att26 cad_att26
21:35:30  31  ,att27 cad_att27
21:35:30  32  ,att28 cad_att28
21:35:30  33  ,att29 cad_att29
21:35:30  34  ,att30 cad_att30
21:35:30  35  ,att31 cad_att31
21:35:30  36  ,att32 cad_att32
21:35:30  37  ,att33 cad_att33
21:35:30  38  ,att34 cad_att34
21:35:30  39  ,att35 cad_att35
21:35:30  40  ,att36 cad_att36
21:35:30  41  ,att37 cad_att37
21:35:30  42  FROM svm6162
21:35:30  43  /

Table created.

Elapsed: 00:00:00.34
21:35:30 SQL> 
21:35:30 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.55
21:35:31 SQL> 
21:35:31 SQL> -- rpt
21:35:31 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19562

Elapsed: 00:00:00.81
21:35:32 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
     19562

Elapsed: 00:00:00.00
21:35:32 SQL> 
21:35:32 SQL> --
21:35:32 SQL> -- chf610.sql
21:35:32 SQL> --
21:35:32 SQL> 
21:35:32 SQL> -- Creates views and tables for backtesting a forex SVM strategy
21:35:32 SQL> 
21:35:32 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.41
21:35:32 SQL> 
21:35:32 SQL> -- I created di5min here:
21:35:32 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
21:35:32 SQL> 
21:35:32 SQL> CREATE OR REPLACE VIEW svm6102 AS
21:35:32   2  SELECT
21:35:32   3  pair
21:35:32   4  ,ydate
21:35:32   5  ,prdate
21:35:32   6  ,rownum rnum -- acts as t in my time-series
21:35:32   7  ,clse
21:35:32   8  -- Derive a bunch of attributes from clse, the latest price:
21:35:32   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
21:35:32  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
21:35:32  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
21:35:32  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
21:35:32  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
21:35:32  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
21:35:32  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
21:35:32  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
21:35:32  17  --
21:35:32  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
21:35:32  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
21:35:32  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
21:35:32  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
21:35:32  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
21:35:32  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
21:35:32  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
21:35:32  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
21:35:32  26  --
21:35:32  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
21:35:32  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
21:35:32  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
21:35:32  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
21:35:32  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
21:35:32  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
21:35:32  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
21:35:32  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
21:35:32  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
21:35:32  36  FROM di5min WHERE pair LIKE'%chf%'
21:35:32  37  AND ydate > sysdate - 95
21:35:32  38  ORDER BY ydate
21:35:32  39  /

View created.

Elapsed: 00:00:00.05
21:35:32 SQL> 
21:35:32 SQL> -- rpt
21:35:32 SQL> 
21:35:32 SQL> SELECT
21:35:32   2  pair
21:35:32   3  ,COUNT(pair)
21:35:32   4  ,MIN(clse),MAX(clse)
21:35:32   5  ,MIN(avg6),MAX(avg6)
21:35:32   6  ,MIN(ydate),MAX(ydate)
21:35:32   7  FROM svm6102
21:35:32   8  GROUP BY pair
21:35:32   9  /
