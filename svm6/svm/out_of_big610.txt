
SQL*Plus: Release 11.2.0.1.0 Production on Thu Dec 30 22:04:02 2010

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

22:04:02 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.01
22:04:02 SQL> 22:04:02 SQL> --
22:04:02 SQL> -- eur610.sql
22:04:02 SQL> --
22:04:02 SQL> 
22:04:02 SQL> -- Creates views and tables for backtesting a forex SVM strategy
22:04:02 SQL> 
22:04:02 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.02
22:04:02 SQL> 
22:04:02 SQL> -- I created di5min here:
22:04:02 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
22:04:02 SQL> 
22:04:02 SQL> CREATE OR REPLACE VIEW svm6102 AS
22:04:02   2  SELECT
22:04:02   3  pair
22:04:02   4  ,ydate
22:04:02   5  ,prdate
22:04:02   6  ,rownum rnum -- acts as t in my time-series
22:04:02   7  ,clse
22:04:02   8  -- Derive a bunch of attributes from clse, the latest price:
22:04:02   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
22:04:02  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
22:04:02  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
22:04:02  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
22:04:02  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
22:04:02  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
22:04:02  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
22:04:02  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
22:04:02  17  --
22:04:02  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
22:04:02  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
22:04:02  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
22:04:02  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
22:04:02  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
22:04:02  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
22:04:02  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
22:04:02  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
22:04:02  26  --
22:04:02  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
22:04:02  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
22:04:02  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
22:04:02  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
22:04:02  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
22:04:02  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
22:04:02  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
22:04:02  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
22:04:02  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
22:04:02  36  FROM di5min WHERE pair LIKE'%eur%'
22:04:02  37  AND ydate > sysdate - 95
22:04:02  38  ORDER BY ydate
22:04:02  39  /

View created.

Elapsed: 00:00:00.07
22:04:03 SQL> 
22:04:03 SQL> -- rpt
22:04:03 SQL> 
22:04:03 SQL> SELECT
22:04:03   2  pair
22:04:03   3  ,COUNT(pair)
22:04:03   4  ,MIN(clse),MAX(clse)
22:04:03   5  ,MIN(avg6),MAX(avg6)
22:04:03   6  ,MIN(ydate),MAX(ydate)
22:04:03   7  FROM svm6102
22:04:03   8  GROUP BY pair
22:04:03   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_usd       19841    1.29735	   1.4273 1.29875103 1.42436233 2010-09-26 22:05:01 2010-12-30 21:55:00

Elapsed: 00:00:00.92
22:04:03 SQL> 
22:04:03 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
22:04:03 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.12
22:04:04 SQL> CREATE TABLE svm6122 COMPRESS AS
22:04:04   2  SELECT
22:04:04   3  pair
22:04:04   4  ,ydate
22:04:04   5  ,prdate
22:04:04   6  ,clse
22:04:04   7  -- g6 is important. I want to predict g6:
22:04:04   8  ,ld6 - clse g6
22:04:04   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
22:04:04  10  -- I want more attributes from the ones I derived above:
22:04:04  11  -- clse relation to moving-min
22:04:04  12  ,clse-min4  cm4
22:04:04  13  ,clse-min6  cm6
22:04:04  14  ,clse-min8  cm8
22:04:04  15  ,clse-min10 cm10
22:04:04  16  ,clse-min12 cm12
22:04:04  17  ,clse-min14 cm14
22:04:04  18  ,clse-min16 cm16
22:04:04  19  ,clse-min18 cm18
22:04:04  20  -- clse relation to moving-avg
22:04:04  21  ,clse-avg4  ca4
22:04:04  22  ,clse-avg6  ca6
22:04:04  23  ,clse-avg8  ca8
22:04:04  24  ,clse-avg10 ca10
22:04:04  25  ,clse-avg12 ca12
22:04:04  26  ,clse-avg14 ca14
22:04:04  27  ,clse-avg16 ca16
22:04:04  28  ,clse-avg18 ca18
22:04:04  29  -- clse relation to moving-max
22:04:04  30  ,clse-max4  cx4
22:04:04  31  ,clse-max6  cx6
22:04:04  32  ,clse-max8  cx8
22:04:04  33  ,clse-max10 cx10
22:04:04  34  ,clse-max12 cx12
22:04:04  35  ,clse-max14 cx14
22:04:04  36  ,clse-max16 cx16
22:04:04  37  ,clse-max18 cx18
22:04:04  38  -- Derive more attributes.
22:04:04  39  -- I want to use CORR() here to help SVM see the shape of the series.
22:04:04  40  -- But COVAR_POP is more stable:
22:04:04  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
22:04:04  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
22:04:04  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
22:04:04  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
22:04:04  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
22:04:04  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
22:04:04  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
22:04:04  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
22:04:04  49  -- Derive date related attributes:
22:04:04  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:04:04  51  ,0+TO_CHAR(ydate,'D')d
22:04:04  52  ,0+TO_CHAR(ydate,'W')w
22:04:04  53  -- mpm stands for minutes-past-midnight:
22:04:04  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:04:04  55  -- mph stands for minutes-past-hour:
22:04:04  56  ,0+TO_CHAR(ydate,'MI')mph
22:04:04  57  FROM svm6102
22:04:04  58  ORDER BY ydate
22:04:04  59  /

Table created.

Elapsed: 00:00:02.33
22:04:06 SQL> 
22:04:06 SQL> -- rpt
22:04:06 SQL> 
22:04:06 SQL> SELECT
22:04:06   2  pair
22:04:06   3  ,COUNT(pair)
22:04:06   4  ,MIN(clse),MAX(clse)
22:04:06   5  ,MIN(ydate),MAX(ydate)
22:04:06   6  FROM svm6122
22:04:06   7  GROUP BY pair
22:04:06   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_usd       19841    1.29735	   1.4273 2010-09-26 22:05:01 2010-12-30 21:55:00

Elapsed: 00:00:00.04
22:04:06 SQL> 
22:04:06 SQL> -- Prepare for derivation of NTILE based params:
22:04:06 SQL> 
22:04:06 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.16
22:04:06 SQL> CREATE TABLE svm6142 COMPRESS AS
22:04:06   2  SELECT
22:04:06   3  pair
22:04:06   4  ,ydate
22:04:06   5  ,prdate
22:04:06   6  ,clse
22:04:06   7  ,g6
22:04:06   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
22:04:06   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
22:04:06  10  ,CASE WHEN trend IS NULL THEN 1
22:04:06  11  	    WHEN trend =0      THEN 1
22:04:06  12  	    ELSE trend END trend
22:04:06  13  ,cm4
22:04:06  14  ,cm6
22:04:06  15  ,cm8
22:04:06  16  ,cm10
22:04:06  17  ,cm12
22:04:06  18  ,cm14
22:04:06  19  ,cm16
22:04:06  20  ,cm18
22:04:06  21  --
22:04:06  22  ,ca4
22:04:06  23  ,ca6
22:04:06  24  ,ca8
22:04:06  25  ,ca10
22:04:06  26  ,ca12
22:04:06  27  ,ca14
22:04:06  28  ,ca16
22:04:06  29  ,ca18
22:04:06  30  --
22:04:06  31  ,cx4
22:04:06  32  ,cx6
22:04:06  33  ,cx8
22:04:06  34  ,cx10
22:04:06  35  ,cx12
22:04:06  36  ,cx14
22:04:06  37  ,cx16
22:04:06  38  ,cx18
22:04:06  39  --
22:04:06  40  ,crr4
22:04:06  41  ,crr6
22:04:06  42  ,crr8
22:04:06  43  ,crr10
22:04:06  44  ,crr12
22:04:06  45  ,crr14
22:04:06  46  ,crr16
22:04:06  47  ,crr18
22:04:06  48  --
22:04:06  49  ,hh
22:04:06  50  ,d
22:04:06  51  ,w
22:04:06  52  ,mpm
22:04:06  53  ,mph
22:04:06  54  FROM svm6122
22:04:06  55  ORDER BY ydate
22:04:06  56  /

Table created.

Elapsed: 00:00:00.35
22:04:06 SQL> 
22:04:06 SQL> -- rpt
22:04:06 SQL> 
22:04:06 SQL> SELECT
22:04:06   2  pair
22:04:06   3  ,trend
22:04:06   4  ,gatt
22:04:06   5  ,COUNT(pair)
22:04:06   6  ,AVG(g6)
22:04:06   7  FROM svm6142
22:04:06   8  GROUP BY pair,trend,gatt
22:04:06   9  ORDER BY pair,trend,gatt
22:04:06  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6129 -.00307836
eur_usd 	-1 up	      3753 .004490504
eur_usd 	-1		16
eur_usd 	 1 nup	      6050  -.0030967
eur_usd 	 1 up	      3837 .005053769
eur_usd 	 1		56

6 rows selected.

Elapsed: 00:00:00.07
22:04:07 SQL> 
22:04:07 SQL> 
22:04:07 SQL> -- Derive NTILE based params:
22:04:07 SQL> 
22:04:07 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.32
22:04:07 SQL> CREATE TABLE svm6162 COMPRESS AS
22:04:07   2  SELECT
22:04:07   3  pair
22:04:07   4  ,ydate
22:04:07   5  ,prdate
22:04:07   6  ,clse
22:04:07   7  ,g6
22:04:07   8  ,gatt
22:04:07   9  ,gattn
22:04:07  10  ,trend
22:04:07  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
22:04:07  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
22:04:07  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
22:04:07  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
22:04:07  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
22:04:07  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
22:04:07  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
22:04:07  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
22:04:07  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
22:04:07  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
22:04:07  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
22:04:07  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
22:04:07  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
22:04:07  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
22:04:07  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
22:04:07  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
22:04:07  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
22:04:07  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
22:04:07  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
22:04:07  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
22:04:07  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
22:04:07  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
22:04:07  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
22:04:07  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
22:04:07  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
22:04:07  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
22:04:07  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
22:04:07  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
22:04:07  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
22:04:07  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
22:04:07  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
22:04:07  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
22:04:07  43  ,hh  att32
22:04:07  44  ,d   att33
22:04:07  45  ,w   att34
22:04:07  46  ,mpm att35
22:04:07  47  ,mph att36
22:04:07  48  ,trend att37
22:04:07  49  FROM svm6142
22:04:07  50  ORDER BY ydate
22:04:07  51  /

Table created.

Elapsed: 00:00:04.75
22:04:12 SQL> 
22:04:12 SQL> -- rpt
22:04:12 SQL> 
22:04:12 SQL> SELECT
22:04:12   2  pair
22:04:12   3  ,trend
22:04:12   4  ,gatt
22:04:12   5  ,COUNT(pair)
22:04:12   6  ,AVG(g6)
22:04:12   7  FROM svm6162
22:04:12   8  GROUP BY pair,trend,gatt
22:04:12   9  ORDER BY pair,trend,gatt
22:04:12  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6129 -.00307836
eur_usd 	-1 up	      3753 .004490504
eur_usd 	-1		16
eur_usd 	 1 nup	      6050  -.0030967
eur_usd 	 1 up	      3837 .005053769
eur_usd 	 1		56

6 rows selected.

Elapsed: 00:00:00.03
22:04:12 SQL> 
22:04:12 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.27
22:04:12 SQL> CREATE TABLE modsrc COMPRESS AS
22:04:12   2  SELECT
22:04:12   3  pair
22:04:12   4  ,ydate
22:04:12   5  ,prdate
22:04:12   6  ,trend
22:04:12   7  ,g6
22:04:12   8  ,gatt
22:04:12   9  ,gattn
22:04:12  10  FROM svm6162
22:04:12  11  /

Table created.

Elapsed: 00:00:00.09
22:04:12 SQL> 
22:04:12 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
22:04:12 SQL> 
22:04:12 SQL> DROP   TABLE eur_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
22:04:12 SQL> CREATE TABLE eur_ms610 COMPRESS AS
22:04:12   2  SELECT
22:04:12   3  ydate
22:04:12   4  ,trend eur_trend
22:04:12   5  ,g6    eur_g6
22:04:12   6  ,gatt  eur_gatt
22:04:12   7  ,gattn eur_gattn
22:04:12   8  FROM modsrc
22:04:12   9  /

Table created.

Elapsed: 00:00:00.07
22:04:12 SQL> 
22:04:12 SQL> ANALYZE TABLE eur_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.14
22:04:12 SQL> 
22:04:12 SQL> -- I need a copy of the attributes:
22:04:12 SQL> 
22:04:12 SQL> 
22:04:12 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.04
22:04:12 SQL> CREATE TABLE eur_att COMPRESS AS
22:04:12   2  SELECT
22:04:12   3  ydate
22:04:12   4  ,att00 eur_att00
22:04:12   5  ,att01 eur_att01
22:04:12   6  ,att02 eur_att02
22:04:12   7  ,att03 eur_att03
22:04:12   8  ,att04 eur_att04
22:04:12   9  ,att05 eur_att05
22:04:12  10  ,att06 eur_att06
22:04:12  11  ,att07 eur_att07
22:04:12  12  ,att08 eur_att08
22:04:12  13  ,att09 eur_att09
22:04:12  14  ,att10 eur_att10
22:04:12  15  ,att11 eur_att11
22:04:12  16  ,att12 eur_att12
22:04:12  17  ,att13 eur_att13
22:04:12  18  ,att14 eur_att14
22:04:12  19  ,att15 eur_att15
22:04:12  20  ,att16 eur_att16
22:04:12  21  ,att17 eur_att17
22:04:12  22  ,att18 eur_att18
22:04:12  23  ,att19 eur_att19
22:04:12  24  ,att20 eur_att20
22:04:12  25  ,att21 eur_att21
22:04:12  26  ,att22 eur_att22
22:04:12  27  ,att23 eur_att23
22:04:12  28  ,att24 eur_att24
22:04:12  29  ,att25 eur_att25
22:04:12  30  ,att26 eur_att26
22:04:12  31  ,att27 eur_att27
22:04:12  32  ,att28 eur_att28
22:04:12  33  ,att29 eur_att29
22:04:12  34  ,att30 eur_att30
22:04:12  35  ,att31 eur_att31
22:04:12  36  ,att32 eur_att32
22:04:12  37  ,att33 eur_att33
22:04:12  38  ,att34 eur_att34
22:04:12  39  ,att35 eur_att35
22:04:12  40  ,att36 eur_att36
22:04:12  41  ,att37 eur_att37
22:04:12  42  FROM svm6162
22:04:12  43  /

Table created.

Elapsed: 00:00:00.19
22:04:13 SQL> 
22:04:13 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.54
22:04:13 SQL> 
22:04:13 SQL> -- rpt
22:04:13 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19841

Elapsed: 00:00:00.91
22:04:14 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     19841

Elapsed: 00:00:00.00
22:04:14 SQL> 
22:04:14 SQL> --
22:04:14 SQL> -- aud610.sql
22:04:14 SQL> --
22:04:14 SQL> 
22:04:14 SQL> -- Creates views and tables for backtesting a forex SVM strategy
22:04:14 SQL> 
22:04:14 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.51
22:04:15 SQL> 
22:04:15 SQL> -- I created di5min here:
22:04:15 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
22:04:15 SQL> 
22:04:15 SQL> CREATE OR REPLACE VIEW svm6102 AS
22:04:15   2  SELECT
22:04:15   3  pair
22:04:15   4  ,ydate
22:04:15   5  ,prdate
22:04:15   6  ,rownum rnum -- acts as t in my time-series
22:04:15   7  ,clse
22:04:15   8  -- Derive a bunch of attributes from clse, the latest price:
22:04:15   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
22:04:15  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
22:04:15  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
22:04:15  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
22:04:15  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
22:04:15  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
22:04:15  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
22:04:15  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
22:04:15  17  --
22:04:15  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
22:04:15  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
22:04:15  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
22:04:15  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
22:04:15  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
22:04:15  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
22:04:15  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
22:04:15  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
22:04:15  26  --
22:04:15  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
22:04:15  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
22:04:15  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
22:04:15  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
22:04:15  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
22:04:15  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
22:04:15  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
22:04:15  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
22:04:15  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
22:04:15  36  FROM di5min WHERE pair LIKE'%aud%'
22:04:15  37  AND ydate > sysdate - 95
22:04:15  38  ORDER BY ydate
22:04:15  39  /

View created.

Elapsed: 00:00:00.05
22:04:15 SQL> 
22:04:15 SQL> -- rpt
22:04:15 SQL> 
22:04:15 SQL> SELECT
22:04:15   2  pair
22:04:15   3  ,COUNT(pair)
22:04:15   4  ,MIN(clse),MAX(clse)
22:04:15   5  ,MIN(avg6),MAX(avg6)
22:04:15   6  ,MIN(ydate),MAX(ydate)
22:04:15   7  FROM svm6102
22:04:15   8  GROUP BY pair
22:04:15   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
aud_usd       19838	.95405	1.0195625 .957141438 1.01819366 2010-09-26 22:05:01 2010-12-30 21:55:00

Elapsed: 00:00:00.89
22:04:16 SQL> 
22:04:16 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
22:04:16 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.17
22:04:16 SQL> CREATE TABLE svm6122 COMPRESS AS
22:04:16   2  SELECT
22:04:16   3  pair
22:04:16   4  ,ydate
22:04:16   5  ,prdate
22:04:16   6  ,clse
22:04:16   7  -- g6 is important. I want to predict g6:
22:04:16   8  ,ld6 - clse g6
22:04:16   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
22:04:16  10  -- I want more attributes from the ones I derived above:
22:04:16  11  -- clse relation to moving-min
22:04:16  12  ,clse-min4  cm4
22:04:16  13  ,clse-min6  cm6
22:04:16  14  ,clse-min8  cm8
22:04:16  15  ,clse-min10 cm10
22:04:16  16  ,clse-min12 cm12
22:04:16  17  ,clse-min14 cm14
22:04:16  18  ,clse-min16 cm16
22:04:16  19  ,clse-min18 cm18
22:04:16  20  -- clse relation to moving-avg
22:04:16  21  ,clse-avg4  ca4
22:04:16  22  ,clse-avg6  ca6
22:04:16  23  ,clse-avg8  ca8
22:04:16  24  ,clse-avg10 ca10
22:04:16  25  ,clse-avg12 ca12
22:04:16  26  ,clse-avg14 ca14
22:04:16  27  ,clse-avg16 ca16
22:04:16  28  ,clse-avg18 ca18
22:04:16  29  -- clse relation to moving-max
22:04:16  30  ,clse-max4  cx4
22:04:16  31  ,clse-max6  cx6
22:04:16  32  ,clse-max8  cx8
22:04:16  33  ,clse-max10 cx10
22:04:16  34  ,clse-max12 cx12
22:04:16  35  ,clse-max14 cx14
22:04:16  36  ,clse-max16 cx16
22:04:16  37  ,clse-max18 cx18
22:04:16  38  -- Derive more attributes.
22:04:16  39  -- I want to use CORR() here to help SVM see the shape of the series.
22:04:16  40  -- But COVAR_POP is more stable:
22:04:16  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
22:04:16  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
22:04:16  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
22:04:16  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
22:04:16  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
22:04:16  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
22:04:16  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
22:04:16  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
22:04:16  49  -- Derive date related attributes:
22:04:16  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:04:16  51  ,0+TO_CHAR(ydate,'D')d
22:04:16  52  ,0+TO_CHAR(ydate,'W')w
22:04:16  53  -- mpm stands for minutes-past-midnight:
22:04:16  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:04:16  55  -- mph stands for minutes-past-hour:
22:04:16  56  ,0+TO_CHAR(ydate,'MI')mph
22:04:16  57  FROM svm6102
22:04:16  58  ORDER BY ydate
22:04:16  59  /

Table created.

Elapsed: 00:00:02.06
22:04:18 SQL> 
22:04:18 SQL> -- rpt
22:04:18 SQL> 
22:04:18 SQL> SELECT
22:04:18   2  pair
22:04:18   3  ,COUNT(pair)
22:04:18   4  ,MIN(clse),MAX(clse)
22:04:18   5  ,MIN(ydate),MAX(ydate)
22:04:18   6  FROM svm6122
22:04:18   7  GROUP BY pair
22:04:18   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
aud_usd       19838	.95405	1.0195625 2010-09-26 22:05:01 2010-12-30 21:55:00

Elapsed: 00:00:00.04
22:04:18 SQL> 
22:04:18 SQL> -- Prepare for derivation of NTILE based params:
22:04:18 SQL> 
22:04:18 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.25
22:04:18 SQL> CREATE TABLE svm6142 COMPRESS AS
22:04:18   2  SELECT
22:04:18   3  pair
22:04:18   4  ,ydate
22:04:18   5  ,prdate
22:04:18   6  ,clse
22:04:18   7  ,g6
22:04:18   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
22:04:18   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
22:04:18  10  ,CASE WHEN trend IS NULL THEN 1
22:04:18  11  	    WHEN trend =0      THEN 1
22:04:18  12  	    ELSE trend END trend
22:04:18  13  ,cm4
22:04:18  14  ,cm6
22:04:18  15  ,cm8
22:04:18  16  ,cm10
22:04:18  17  ,cm12
22:04:18  18  ,cm14
22:04:18  19  ,cm16
22:04:18  20  ,cm18
22:04:18  21  --
22:04:18  22  ,ca4
22:04:18  23  ,ca6
22:04:18  24  ,ca8
22:04:18  25  ,ca10
22:04:18  26  ,ca12
22:04:18  27  ,ca14
22:04:18  28  ,ca16
22:04:18  29  ,ca18
22:04:18  30  --
22:04:18  31  ,cx4
22:04:18  32  ,cx6
22:04:18  33  ,cx8
22:04:18  34  ,cx10
22:04:18  35  ,cx12
22:04:18  36  ,cx14
22:04:18  37  ,cx16
22:04:18  38  ,cx18
22:04:18  39  --
22:04:18  40  ,crr4
22:04:18  41  ,crr6
22:04:18  42  ,crr8
22:04:18  43  ,crr10
22:04:18  44  ,crr12
22:04:18  45  ,crr14
22:04:18  46  ,crr16
22:04:18  47  ,crr18
22:04:18  48  --
22:04:18  49  ,hh
22:04:18  50  ,d
22:04:18  51  ,w
22:04:18  52  ,mpm
22:04:18  53  ,mph
22:04:18  54  FROM svm6122
22:04:18  55  ORDER BY ydate
22:04:18  56  /

Table created.

Elapsed: 00:00:00.39
22:04:18 SQL> 
22:04:18 SQL> -- rpt
22:04:18 SQL> 
22:04:18 SQL> SELECT
22:04:18   2  pair
22:04:18   3  ,trend
22:04:18   4  ,gatt
22:04:18   5  ,COUNT(pair)
22:04:18   6  ,AVG(g6)
22:04:18   7  FROM svm6142
22:04:18   8  GROUP BY pair,trend,gatt
22:04:18   9  ORDER BY pair,trend,gatt
22:04:18  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5313  -.0021062
aud_usd 	-1 up	      3839 .003723681
aud_usd 	-1		42
aud_usd 	 1 nup	      6823 -.00210712
aud_usd 	 1 up	      3791 .004024199
aud_usd 	 1		30

6 rows selected.

Elapsed: 00:00:00.04
22:04:18 SQL> 
22:04:18 SQL> 
22:04:18 SQL> -- Derive NTILE based params:
22:04:18 SQL> 
22:04:18 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.12
22:04:19 SQL> CREATE TABLE svm6162 COMPRESS AS
22:04:19   2  SELECT
22:04:19   3  pair
22:04:19   4  ,ydate
22:04:19   5  ,prdate
22:04:19   6  ,clse
22:04:19   7  ,g6
22:04:19   8  ,gatt
22:04:19   9  ,gattn
22:04:19  10  ,trend
22:04:19  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
22:04:19  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
22:04:19  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
22:04:19  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
22:04:19  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
22:04:19  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
22:04:19  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
22:04:19  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
22:04:19  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
22:04:19  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
22:04:19  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
22:04:19  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
22:04:19  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
22:04:19  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
22:04:19  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
22:04:19  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
22:04:19  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
22:04:19  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
22:04:19  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
22:04:19  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
22:04:19  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
22:04:19  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
22:04:19  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
22:04:19  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
22:04:19  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
22:04:19  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
22:04:19  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
22:04:19  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
22:04:19  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
22:04:19  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
22:04:19  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
22:04:19  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
22:04:19  43  ,hh  att32
22:04:19  44  ,d   att33
22:04:19  45  ,w   att34
22:04:19  46  ,mpm att35
22:04:19  47  ,mph att36
22:04:19  48  ,trend att37
22:04:19  49  FROM svm6142
22:04:19  50  ORDER BY ydate
22:04:19  51  /

Table created.

Elapsed: 00:00:04.79
22:04:23 SQL> 
22:04:23 SQL> -- rpt
22:04:23 SQL> 
22:04:23 SQL> SELECT
22:04:23   2  pair
22:04:23   3  ,trend
22:04:23   4  ,gatt
22:04:23   5  ,COUNT(pair)
22:04:23   6  ,AVG(g6)
22:04:23   7  FROM svm6162
22:04:23   8  GROUP BY pair,trend,gatt
22:04:23   9  ORDER BY pair,trend,gatt
22:04:23  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5313  -.0021062
aud_usd 	-1 up	      3839 .003723681
aud_usd 	-1		42
aud_usd 	 1 nup	      6823 -.00210712
aud_usd 	 1 up	      3791 .004024199
aud_usd 	 1		30

6 rows selected.

Elapsed: 00:00:00.03
22:04:23 SQL> 
22:04:23 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.16
22:04:24 SQL> CREATE TABLE modsrc COMPRESS AS
22:04:24   2  SELECT
22:04:24   3  pair
22:04:24   4  ,ydate
22:04:24   5  ,prdate
22:04:24   6  ,trend
22:04:24   7  ,g6
22:04:24   8  ,gatt
22:04:24   9  ,gattn
22:04:24  10  FROM svm6162
22:04:24  11  /

Table created.

Elapsed: 00:00:00.09
22:04:24 SQL> 
22:04:24 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
22:04:24 SQL> 
22:04:24 SQL> DROP   TABLE aud_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
22:04:24 SQL> CREATE TABLE aud_ms610 COMPRESS AS
22:04:24   2  SELECT
22:04:24   3  ydate
22:04:24   4  ,trend aud_trend
22:04:24   5  ,g6    aud_g6
22:04:24   6  ,gatt  aud_gatt
22:04:24   7  ,gattn aud_gattn
22:04:24   8  FROM modsrc
22:04:24   9  /

Table created.

Elapsed: 00:00:00.07
22:04:24 SQL> 
22:04:24 SQL> ANALYZE TABLE aud_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
22:04:24 SQL> 
22:04:24 SQL> -- I need a copy of the attributes:
22:04:24 SQL> 
22:04:24 SQL> 
22:04:24 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.04
22:04:24 SQL> CREATE TABLE aud_att COMPRESS AS
22:04:24   2  SELECT
22:04:24   3  ydate
22:04:24   4  ,att00 aud_att00
22:04:24   5  ,att01 aud_att01
22:04:24   6  ,att02 aud_att02
22:04:24   7  ,att03 aud_att03
22:04:24   8  ,att04 aud_att04
22:04:24   9  ,att05 aud_att05
22:04:24  10  ,att06 aud_att06
22:04:24  11  ,att07 aud_att07
22:04:24  12  ,att08 aud_att08
22:04:24  13  ,att09 aud_att09
22:04:24  14  ,att10 aud_att10
22:04:24  15  ,att11 aud_att11
22:04:24  16  ,att12 aud_att12
22:04:24  17  ,att13 aud_att13
22:04:24  18  ,att14 aud_att14
22:04:24  19  ,att15 aud_att15
22:04:24  20  ,att16 aud_att16
22:04:24  21  ,att17 aud_att17
22:04:24  22  ,att18 aud_att18
22:04:24  23  ,att19 aud_att19
22:04:24  24  ,att20 aud_att20
22:04:24  25  ,att21 aud_att21
22:04:24  26  ,att22 aud_att22
22:04:24  27  ,att23 aud_att23
22:04:24  28  ,att24 aud_att24
22:04:24  29  ,att25 aud_att25
22:04:24  30  ,att26 aud_att26
22:04:24  31  ,att27 aud_att27
22:04:24  32  ,att28 aud_att28
22:04:24  33  ,att29 aud_att29
22:04:24  34  ,att30 aud_att30
22:04:24  35  ,att31 aud_att31
22:04:24  36  ,att32 aud_att32
22:04:24  37  ,att33 aud_att33
22:04:24  38  ,att34 aud_att34
22:04:24  39  ,att35 aud_att35
22:04:24  40  ,att36 aud_att36
22:04:24  41  ,att37 aud_att37
22:04:24  42  FROM svm6162
22:04:24  43  /

Table created.

Elapsed: 00:00:00.18
22:04:24 SQL> 
22:04:24 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
22:04:25 SQL> 
22:04:25 SQL> -- rpt
22:04:25 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19838

Elapsed: 00:00:00.87
22:04:26 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     19838

Elapsed: 00:00:00.00
22:04:26 SQL> 
22:04:26 SQL> --
22:04:26 SQL> -- gbp610.sql
22:04:26 SQL> --
22:04:26 SQL> 
22:04:26 SQL> -- Creates views and tables for backtesting a forex SVM strategy
22:04:26 SQL> 
22:04:26 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.35
22:04:26 SQL> 
22:04:26 SQL> -- I created di5min here:
22:04:26 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
22:04:26 SQL> 
22:04:26 SQL> CREATE OR REPLACE VIEW svm6102 AS
22:04:26   2  SELECT
22:04:26   3  pair
22:04:26   4  ,ydate
22:04:26   5  ,prdate
22:04:26   6  ,rownum rnum -- acts as t in my time-series
22:04:26   7  ,clse
22:04:26   8  -- Derive a bunch of attributes from clse, the latest price:
22:04:26   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
22:04:26  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
22:04:26  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
22:04:26  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
22:04:26  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
22:04:26  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
22:04:26  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
22:04:26  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
22:04:26  17  --
22:04:26  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
22:04:26  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
22:04:26  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
22:04:26  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
22:04:26  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
22:04:26  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
22:04:26  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
22:04:26  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
22:04:26  26  --
22:04:26  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
22:04:26  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
22:04:26  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
22:04:26  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
22:04:26  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
22:04:26  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
22:04:26  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
22:04:26  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
22:04:26  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
22:04:26  36  FROM di5min WHERE pair LIKE'%gbp%'
22:04:26  37  AND ydate > sysdate - 95
22:04:26  38  ORDER BY ydate
22:04:26  39  /

View created.

Elapsed: 00:00:00.04
22:04:26 SQL> 
22:04:26 SQL> -- rpt
22:04:26 SQL> 
22:04:26 SQL> SELECT
22:04:26   2  pair
22:04:26   3  ,COUNT(pair)
22:04:26   4  ,MIN(clse),MAX(clse)
22:04:26   5  ,MIN(avg6),MAX(avg6)
22:04:26   6  ,MIN(ydate),MAX(ydate)
22:04:26   7  FROM svm6102
22:04:26   8  GROUP BY pair
22:04:26   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
gbp_usd       19841   1.535325	   1.6295 1.53696747 1.62716986 2010-09-26 22:05:01 2010-12-30 21:55:00

Elapsed: 00:00:00.90
22:04:27 SQL> 
22:04:27 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
22:04:27 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.52
22:04:27 SQL> CREATE TABLE svm6122 COMPRESS AS
22:04:27   2  SELECT
22:04:27   3  pair
22:04:27   4  ,ydate
22:04:27   5  ,prdate
22:04:27   6  ,clse
22:04:27   7  -- g6 is important. I want to predict g6:
22:04:27   8  ,ld6 - clse g6
22:04:27   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
22:04:27  10  -- I want more attributes from the ones I derived above:
22:04:27  11  -- clse relation to moving-min
22:04:27  12  ,clse-min4  cm4
22:04:27  13  ,clse-min6  cm6
22:04:27  14  ,clse-min8  cm8
22:04:27  15  ,clse-min10 cm10
22:04:27  16  ,clse-min12 cm12
22:04:27  17  ,clse-min14 cm14
22:04:27  18  ,clse-min16 cm16
22:04:27  19  ,clse-min18 cm18
22:04:27  20  -- clse relation to moving-avg
22:04:27  21  ,clse-avg4  ca4
22:04:27  22  ,clse-avg6  ca6
22:04:27  23  ,clse-avg8  ca8
22:04:27  24  ,clse-avg10 ca10
22:04:27  25  ,clse-avg12 ca12
22:04:27  26  ,clse-avg14 ca14
22:04:27  27  ,clse-avg16 ca16
22:04:27  28  ,clse-avg18 ca18
22:04:27  29  -- clse relation to moving-max
22:04:27  30  ,clse-max4  cx4
22:04:27  31  ,clse-max6  cx6
22:04:27  32  ,clse-max8  cx8
22:04:27  33  ,clse-max10 cx10
22:04:27  34  ,clse-max12 cx12
22:04:27  35  ,clse-max14 cx14
22:04:27  36  ,clse-max16 cx16
22:04:27  37  ,clse-max18 cx18
22:04:27  38  -- Derive more attributes.
22:04:27  39  -- I want to use CORR() here to help SVM see the shape of the series.
22:04:27  40  -- But COVAR_POP is more stable:
22:04:27  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
22:04:27  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
22:04:27  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
22:04:27  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
22:04:27  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
22:04:27  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
22:04:27  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
22:04:27  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
22:04:27  49  -- Derive date related attributes:
22:04:27  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:04:27  51  ,0+TO_CHAR(ydate,'D')d
22:04:27  52  ,0+TO_CHAR(ydate,'W')w
22:04:27  53  -- mpm stands for minutes-past-midnight:
22:04:27  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:04:27  55  -- mph stands for minutes-past-hour:
22:04:27  56  ,0+TO_CHAR(ydate,'MI')mph
22:04:27  57  FROM svm6102
22:04:27  58  ORDER BY ydate
22:04:27  59  /

Table created.

Elapsed: 00:00:02.06
22:04:30 SQL> 
22:04:30 SQL> -- rpt
22:04:30 SQL> 
22:04:30 SQL> SELECT
22:04:30   2  pair
22:04:30   3  ,COUNT(pair)
22:04:30   4  ,MIN(clse),MAX(clse)
22:04:30   5  ,MIN(ydate),MAX(ydate)
22:04:30   6  FROM svm6122
22:04:30   7  GROUP BY pair
22:04:30   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
gbp_usd       19841   1.535325	   1.6295 2010-09-26 22:05:01 2010-12-30 21:55:00

Elapsed: 00:00:00.07
22:04:30 SQL> 
22:04:30 SQL> -- Prepare for derivation of NTILE based params:
22:04:30 SQL> 
22:04:30 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.22
22:04:30 SQL> CREATE TABLE svm6142 COMPRESS AS
22:04:30   2  SELECT
22:04:30   3  pair
22:04:30   4  ,ydate
22:04:30   5  ,prdate
22:04:30   6  ,clse
22:04:30   7  ,g6
22:04:30   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
22:04:30   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
22:04:30  10  ,CASE WHEN trend IS NULL THEN 1
22:04:30  11  	    WHEN trend =0      THEN 1
22:04:30  12  	    ELSE trend END trend
22:04:30  13  ,cm4
22:04:30  14  ,cm6
22:04:30  15  ,cm8
22:04:30  16  ,cm10
22:04:30  17  ,cm12
22:04:30  18  ,cm14
22:04:30  19  ,cm16
22:04:30  20  ,cm18
22:04:30  21  --
22:04:30  22  ,ca4
22:04:30  23  ,ca6
22:04:30  24  ,ca8
22:04:30  25  ,ca10
22:04:30  26  ,ca12
22:04:30  27  ,ca14
22:04:30  28  ,ca16
22:04:30  29  ,ca18
22:04:30  30  --
22:04:30  31  ,cx4
22:04:30  32  ,cx6
22:04:30  33  ,cx8
22:04:30  34  ,cx10
22:04:30  35  ,cx12
22:04:30  36  ,cx14
22:04:30  37  ,cx16
22:04:30  38  ,cx18
22:04:30  39  --
22:04:30  40  ,crr4
22:04:30  41  ,crr6
22:04:30  42  ,crr8
22:04:30  43  ,crr10
22:04:30  44  ,crr12
22:04:30  45  ,crr14
22:04:30  46  ,crr16
22:04:30  47  ,crr18
22:04:30  48  --
22:04:30  49  ,hh
22:04:30  50  ,d
22:04:30  51  ,w
22:04:30  52  ,mpm
22:04:30  53  ,mph
22:04:30  54  FROM svm6122
22:04:30  55  ORDER BY ydate
22:04:30  56  /

Table created.

Elapsed: 00:00:00.38
22:04:30 SQL> 
22:04:30 SQL> -- rpt
22:04:30 SQL> 
22:04:30 SQL> SELECT
22:04:30   2  pair
22:04:30   3  ,trend
22:04:30   4  ,gatt
22:04:30   5  ,COUNT(pair)
22:04:30   6  ,AVG(g6)
22:04:30   7  FROM svm6142
22:04:30   8  GROUP BY pair,trend,gatt
22:04:30   9  ORDER BY pair,trend,gatt
22:04:30  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6404 -.00260266
gbp_usd 	-1 up	      3587 .004281489
gbp_usd 	-1		61
gbp_usd 	 1 nup	      6294 -.00268024
gbp_usd 	 1 up	      3484 .004360516
gbp_usd 	 1		11

6 rows selected.

Elapsed: 00:00:00.03
22:04:30 SQL> 
22:04:30 SQL> 
22:04:30 SQL> -- Derive NTILE based params:
22:04:30 SQL> 
22:04:30 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.17
22:04:30 SQL> CREATE TABLE svm6162 COMPRESS AS
22:04:30   2  SELECT
22:04:30   3  pair
22:04:30   4  ,ydate
22:04:30   5  ,prdate
22:04:30   6  ,clse
22:04:30   7  ,g6
22:04:30   8  ,gatt
22:04:30   9  ,gattn
22:04:30  10  ,trend
22:04:30  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
22:04:30  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
22:04:30  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
22:04:30  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
22:04:30  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
22:04:30  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
22:04:30  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
22:04:30  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
22:04:30  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
22:04:30  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
22:04:30  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
22:04:30  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
22:04:30  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
22:04:30  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
22:04:30  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
22:04:30  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
22:04:30  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
22:04:30  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
22:04:30  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
22:04:30  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
22:04:30  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
22:04:30  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
22:04:30  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
22:04:30  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
22:04:30  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
22:04:30  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
22:04:30  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
22:04:30  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
22:04:30  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
22:04:30  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
22:04:30  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
22:04:30  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
22:04:30  43  ,hh  att32
22:04:30  44  ,d   att33
22:04:30  45  ,w   att34
22:04:30  46  ,mpm att35
22:04:30  47  ,mph att36
22:04:30  48  ,trend att37
22:04:30  49  FROM svm6142
22:04:30  50  ORDER BY ydate
22:04:30  51  /

Table created.

Elapsed: 00:00:04.82
22:04:35 SQL> 
22:04:35 SQL> -- rpt
22:04:35 SQL> 
22:04:35 SQL> SELECT
22:04:35   2  pair
22:04:35   3  ,trend
22:04:35   4  ,gatt
22:04:35   5  ,COUNT(pair)
22:04:35   6  ,AVG(g6)
22:04:35   7  FROM svm6162
22:04:35   8  GROUP BY pair,trend,gatt
22:04:35   9  ORDER BY pair,trend,gatt
22:04:35  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6404 -.00260266
gbp_usd 	-1 up	      3587 .004281489
gbp_usd 	-1		61
gbp_usd 	 1 nup	      6294 -.00268024
gbp_usd 	 1 up	      3484 .004360516
gbp_usd 	 1		11

6 rows selected.

Elapsed: 00:00:00.02
22:04:35 SQL> 
22:04:35 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.17
22:04:35 SQL> CREATE TABLE modsrc COMPRESS AS
22:04:35   2  SELECT
22:04:35   3  pair
22:04:35   4  ,ydate
22:04:35   5  ,prdate
22:04:35   6  ,trend
22:04:35   7  ,g6
22:04:35   8  ,gatt
22:04:35   9  ,gattn
22:04:35  10  FROM svm6162
22:04:35  11  /

Table created.

Elapsed: 00:00:00.08
22:04:36 SQL> 
22:04:36 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
22:04:36 SQL> 
22:04:36 SQL> DROP   TABLE gbp_ms610 ;

Table dropped.

Elapsed: 00:00:00.03
22:04:36 SQL> CREATE TABLE gbp_ms610 COMPRESS AS
22:04:36   2  SELECT
22:04:36   3  ydate
22:04:36   4  ,trend gbp_trend
22:04:36   5  ,g6    gbp_g6
22:04:36   6  ,gatt  gbp_gatt
22:04:36   7  ,gattn gbp_gattn
22:04:36   8  FROM modsrc
22:04:36   9  /

Table created.

Elapsed: 00:00:00.05
22:04:36 SQL> 
22:04:36 SQL> ANALYZE TABLE gbp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
22:04:36 SQL> 
22:04:36 SQL> -- I need a copy of the attributes:
22:04:36 SQL> 
22:04:36 SQL> 
22:04:36 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.05
22:04:36 SQL> CREATE TABLE gbp_att COMPRESS AS
22:04:36   2  SELECT
22:04:36   3  ydate
22:04:36   4  ,att00 gbp_att00
22:04:36   5  ,att01 gbp_att01
22:04:36   6  ,att02 gbp_att02
22:04:36   7  ,att03 gbp_att03
22:04:36   8  ,att04 gbp_att04
22:04:36   9  ,att05 gbp_att05
22:04:36  10  ,att06 gbp_att06
22:04:36  11  ,att07 gbp_att07
22:04:36  12  ,att08 gbp_att08
22:04:36  13  ,att09 gbp_att09
22:04:36  14  ,att10 gbp_att10
22:04:36  15  ,att11 gbp_att11
22:04:36  16  ,att12 gbp_att12
22:04:36  17  ,att13 gbp_att13
22:04:36  18  ,att14 gbp_att14
22:04:36  19  ,att15 gbp_att15
22:04:36  20  ,att16 gbp_att16
22:04:36  21  ,att17 gbp_att17
22:04:36  22  ,att18 gbp_att18
22:04:36  23  ,att19 gbp_att19
22:04:36  24  ,att20 gbp_att20
22:04:36  25  ,att21 gbp_att21
22:04:36  26  ,att22 gbp_att22
22:04:36  27  ,att23 gbp_att23
22:04:36  28  ,att24 gbp_att24
22:04:36  29  ,att25 gbp_att25
22:04:36  30  ,att26 gbp_att26
22:04:36  31  ,att27 gbp_att27
22:04:36  32  ,att28 gbp_att28
22:04:36  33  ,att29 gbp_att29
22:04:36  34  ,att30 gbp_att30
22:04:36  35  ,att31 gbp_att31
22:04:36  36  ,att32 gbp_att32
22:04:36  37  ,att33 gbp_att33
22:04:36  38  ,att34 gbp_att34
22:04:36  39  ,att35 gbp_att35
22:04:36  40  ,att36 gbp_att36
22:04:36  41  ,att37 gbp_att37
22:04:36  42  FROM svm6162
22:04:36  43  /

Table created.

Elapsed: 00:00:00.17
22:04:36 SQL> 
22:04:36 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
22:04:37 SQL> 
22:04:37 SQL> -- rpt
22:04:37 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19841

Elapsed: 00:00:00.87
22:04:38 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     19841

Elapsed: 00:00:00.00
22:04:38 SQL> 
22:04:38 SQL> --
22:04:38 SQL> -- jpy610.sql
22:04:38 SQL> --
22:04:38 SQL> 
22:04:38 SQL> -- Creates views and tables for backtesting a forex SVM strategy
22:04:38 SQL> 
22:04:38 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.41
22:04:38 SQL> 
22:04:38 SQL> -- I created di5min here:
22:04:38 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
22:04:38 SQL> 
22:04:38 SQL> CREATE OR REPLACE VIEW svm6102 AS
22:04:38   2  SELECT
22:04:38   3  pair
22:04:38   4  ,ydate
22:04:38   5  ,prdate
22:04:38   6  ,rownum rnum -- acts as t in my time-series
22:04:38   7  ,clse
22:04:38   8  -- Derive a bunch of attributes from clse, the latest price:
22:04:38   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
22:04:38  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
22:04:38  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
22:04:38  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
22:04:38  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
22:04:38  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
22:04:38  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
22:04:38  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
22:04:38  17  --
22:04:38  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
22:04:38  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
22:04:38  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
22:04:38  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
22:04:38  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
22:04:38  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
22:04:38  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
22:04:38  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
22:04:38  26  --
22:04:38  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
22:04:38  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
22:04:38  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
22:04:38  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
22:04:38  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
22:04:38  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
22:04:38  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
22:04:38  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
22:04:38  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
22:04:38  36  FROM di5min WHERE pair LIKE'%jpy%'
22:04:38  37  AND ydate > sysdate - 95
22:04:38  38  ORDER BY ydate
22:04:38  39  /

View created.

Elapsed: 00:00:00.03
22:04:38 SQL> 
22:04:38 SQL> -- rpt
22:04:38 SQL> 
22:04:38 SQL> SELECT
22:04:38   2  pair
22:04:38   3  ,COUNT(pair)
22:04:38   4  ,MIN(clse),MAX(clse)
22:04:38   5  ,MIN(avg6),MAX(avg6)
22:04:38   6  ,MIN(ydate),MAX(ydate)
22:04:38   7  FROM svm6102
22:04:38   8  GROUP BY pair
22:04:38   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_jpy       19838	 80.25	   84.485 80.3595205 84.3180645 2010-09-26 22:05:01 2010-12-30 21:55:00

Elapsed: 00:00:00.90
22:04:39 SQL> 
22:04:39 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
22:04:39 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.23
22:04:39 SQL> CREATE TABLE svm6122 COMPRESS AS
22:04:39   2  SELECT
22:04:39   3  pair
22:04:39   4  ,ydate
22:04:39   5  ,prdate
22:04:39   6  ,clse
22:04:39   7  -- g6 is important. I want to predict g6:
22:04:39   8  ,ld6 - clse g6
22:04:39   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
22:04:39  10  -- I want more attributes from the ones I derived above:
22:04:39  11  -- clse relation to moving-min
22:04:39  12  ,clse-min4  cm4
22:04:39  13  ,clse-min6  cm6
22:04:39  14  ,clse-min8  cm8
22:04:39  15  ,clse-min10 cm10
22:04:39  16  ,clse-min12 cm12
22:04:39  17  ,clse-min14 cm14
22:04:39  18  ,clse-min16 cm16
22:04:39  19  ,clse-min18 cm18
22:04:39  20  -- clse relation to moving-avg
22:04:39  21  ,clse-avg4  ca4
22:04:39  22  ,clse-avg6  ca6
22:04:39  23  ,clse-avg8  ca8
22:04:39  24  ,clse-avg10 ca10
22:04:39  25  ,clse-avg12 ca12
22:04:39  26  ,clse-avg14 ca14
22:04:39  27  ,clse-avg16 ca16
22:04:39  28  ,clse-avg18 ca18
22:04:39  29  -- clse relation to moving-max
22:04:39  30  ,clse-max4  cx4
22:04:39  31  ,clse-max6  cx6
22:04:39  32  ,clse-max8  cx8
22:04:39  33  ,clse-max10 cx10
22:04:39  34  ,clse-max12 cx12
22:04:39  35  ,clse-max14 cx14
22:04:39  36  ,clse-max16 cx16
22:04:39  37  ,clse-max18 cx18
22:04:39  38  -- Derive more attributes.
22:04:39  39  -- I want to use CORR() here to help SVM see the shape of the series.
22:04:39  40  -- But COVAR_POP is more stable:
22:04:39  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
22:04:39  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
22:04:39  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
22:04:39  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
22:04:39  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
22:04:39  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
22:04:39  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
22:04:39  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
22:04:39  49  -- Derive date related attributes:
22:04:39  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:04:39  51  ,0+TO_CHAR(ydate,'D')d
22:04:39  52  ,0+TO_CHAR(ydate,'W')w
22:04:39  53  -- mpm stands for minutes-past-midnight:
22:04:39  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:04:39  55  -- mph stands for minutes-past-hour:
22:04:39  56  ,0+TO_CHAR(ydate,'MI')mph
22:04:39  57  FROM svm6102
22:04:39  58  ORDER BY ydate
22:04:39  59  /

Table created.

Elapsed: 00:00:02.08
22:04:41 SQL> 
22:04:41 SQL> -- rpt
22:04:41 SQL> 
22:04:41 SQL> SELECT
22:04:41   2  pair
22:04:41   3  ,COUNT(pair)
22:04:41   4  ,MIN(clse),MAX(clse)
22:04:41   5  ,MIN(ydate),MAX(ydate)
22:04:41   6  FROM svm6122
22:04:41   7  GROUP BY pair
22:04:41   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_jpy       19838	 80.25	   84.485 2010-09-26 22:05:01 2010-12-30 21:55:00

Elapsed: 00:00:00.04
22:04:41 SQL> 
22:04:41 SQL> -- Prepare for derivation of NTILE based params:
22:04:41 SQL> 
22:04:41 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.58
22:04:42 SQL> CREATE TABLE svm6142 COMPRESS AS
22:04:42   2  SELECT
22:04:42   3  pair
22:04:42   4  ,ydate
22:04:42   5  ,prdate
22:04:42   6  ,clse
22:04:42   7  ,g6
22:04:42   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
22:04:42   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
22:04:42  10  ,CASE WHEN trend IS NULL THEN 1
22:04:42  11  	    WHEN trend =0      THEN 1
22:04:42  12  	    ELSE trend END trend
22:04:42  13  ,cm4
22:04:42  14  ,cm6
22:04:42  15  ,cm8
22:04:42  16  ,cm10
22:04:42  17  ,cm12
22:04:42  18  ,cm14
22:04:42  19  ,cm16
22:04:42  20  ,cm18
22:04:42  21  --
22:04:42  22  ,ca4
22:04:42  23  ,ca6
22:04:42  24  ,ca8
22:04:42  25  ,ca10
22:04:42  26  ,ca12
22:04:42  27  ,ca14
22:04:42  28  ,ca16
22:04:42  29  ,ca18
22:04:42  30  --
22:04:42  31  ,cx4
22:04:42  32  ,cx6
22:04:42  33  ,cx8
22:04:42  34  ,cx10
22:04:42  35  ,cx12
22:04:42  36  ,cx14
22:04:42  37  ,cx16
22:04:42  38  ,cx18
22:04:42  39  --
22:04:42  40  ,crr4
22:04:42  41  ,crr6
22:04:42  42  ,crr8
22:04:42  43  ,crr10
22:04:42  44  ,crr12
22:04:42  45  ,crr14
22:04:42  46  ,crr16
22:04:42  47  ,crr18
22:04:42  48  --
22:04:42  49  ,hh
22:04:42  50  ,d
22:04:42  51  ,w
22:04:42  52  ,mpm
22:04:42  53  ,mph
22:04:42  54  FROM svm6122
22:04:42  55  ORDER BY ydate
22:04:42  56  /

Table created.

Elapsed: 00:00:00.34
22:04:42 SQL> 
22:04:42 SQL> -- rpt
22:04:42 SQL> 
22:04:42 SQL> SELECT
22:04:42   2  pair
22:04:42   3  ,trend
22:04:42   4  ,gatt
22:04:42   5  ,COUNT(pair)
22:04:42   6  ,AVG(g6)
22:04:42   7  FROM svm6142
22:04:42   8  GROUP BY pair,trend,gatt
22:04:42   9  ORDER BY pair,trend,gatt
22:04:42  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5392 -.16525173
usd_jpy 	-1 up	      5046 .162199069
usd_jpy 	-1		15
usd_jpy 	 1 nup	      5177 -.15509335
usd_jpy 	 1 up	      4151  .16523858
usd_jpy 	 1		57

6 rows selected.

Elapsed: 00:00:00.06
22:04:42 SQL> 
22:04:42 SQL> 
22:04:42 SQL> -- Derive NTILE based params:
22:04:42 SQL> 
22:04:42 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.13
22:04:42 SQL> CREATE TABLE svm6162 COMPRESS AS
22:04:42   2  SELECT
22:04:42   3  pair
22:04:42   4  ,ydate
22:04:42   5  ,prdate
22:04:42   6  ,clse
22:04:42   7  ,g6
22:04:42   8  ,gatt
22:04:42   9  ,gattn
22:04:42  10  ,trend
22:04:42  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
22:04:42  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
22:04:42  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
22:04:42  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
22:04:42  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
22:04:42  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
22:04:42  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
22:04:42  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
22:04:42  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
22:04:42  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
22:04:42  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
22:04:42  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
22:04:42  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
22:04:42  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
22:04:42  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
22:04:42  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
22:04:42  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
22:04:42  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
22:04:42  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
22:04:42  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
22:04:42  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
22:04:42  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
22:04:42  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
22:04:42  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
22:04:42  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
22:04:42  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
22:04:42  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
22:04:42  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
22:04:42  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
22:04:42  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
22:04:42  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
22:04:42  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
22:04:42  43  ,hh  att32
22:04:42  44  ,d   att33
22:04:42  45  ,w   att34
22:04:42  46  ,mpm att35
22:04:42  47  ,mph att36
22:04:42  48  ,trend att37
22:04:42  49  FROM svm6142
22:04:42  50  ORDER BY ydate
22:04:42  51  /

Table created.

Elapsed: 00:00:04.79
22:04:47 SQL> 
22:04:47 SQL> -- rpt
22:04:47 SQL> 
22:04:47 SQL> SELECT
22:04:47   2  pair
22:04:47   3  ,trend
22:04:47   4  ,gatt
22:04:47   5  ,COUNT(pair)
22:04:47   6  ,AVG(g6)
22:04:47   7  FROM svm6162
22:04:47   8  GROUP BY pair,trend,gatt
22:04:47   9  ORDER BY pair,trend,gatt
22:04:47  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5392 -.16525173
usd_jpy 	-1 up	      5046 .162199069
usd_jpy 	-1		15
usd_jpy 	 1 nup	      5177 -.15509335
usd_jpy 	 1 up	      4151  .16523858
usd_jpy 	 1		57

6 rows selected.

Elapsed: 00:00:00.03
22:04:47 SQL> 
22:04:47 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
22:04:47 SQL> CREATE TABLE modsrc COMPRESS AS
22:04:47   2  SELECT
22:04:47   3  pair
22:04:47   4  ,ydate
22:04:47   5  ,prdate
22:04:47   6  ,trend
22:04:47   7  ,g6
22:04:47   8  ,gatt
22:04:47   9  ,gattn
22:04:47  10  FROM svm6162
22:04:47  11  /

Table created.

Elapsed: 00:00:00.07
22:04:47 SQL> 
22:04:47 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
22:04:48 SQL> 
22:04:48 SQL> DROP   TABLE jpy_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
22:04:48 SQL> CREATE TABLE jpy_ms610 COMPRESS AS
22:04:48   2  SELECT
22:04:48   3  ydate
22:04:48   4  ,trend jpy_trend
22:04:48   5  ,g6    jpy_g6
22:04:48   6  ,gatt  jpy_gatt
22:04:48   7  ,gattn jpy_gattn
22:04:48   8  FROM modsrc
22:04:48   9  /

Table created.

Elapsed: 00:00:00.06
22:04:48 SQL> 
22:04:48 SQL> ANALYZE TABLE jpy_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
22:04:48 SQL> 
22:04:48 SQL> -- I need a copy of the attributes:
22:04:48 SQL> 
22:04:48 SQL> 
22:04:48 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.13
22:04:48 SQL> CREATE TABLE jpy_att COMPRESS AS
22:04:48   2  SELECT
22:04:48   3  ydate
22:04:48   4  ,att00 jpy_att00
22:04:48   5  ,att01 jpy_att01
22:04:48   6  ,att02 jpy_att02
22:04:48   7  ,att03 jpy_att03
22:04:48   8  ,att04 jpy_att04
22:04:48   9  ,att05 jpy_att05
22:04:48  10  ,att06 jpy_att06
22:04:48  11  ,att07 jpy_att07
22:04:48  12  ,att08 jpy_att08
22:04:48  13  ,att09 jpy_att09
22:04:48  14  ,att10 jpy_att10
22:04:48  15  ,att11 jpy_att11
22:04:48  16  ,att12 jpy_att12
22:04:48  17  ,att13 jpy_att13
22:04:48  18  ,att14 jpy_att14
22:04:48  19  ,att15 jpy_att15
22:04:48  20  ,att16 jpy_att16
22:04:48  21  ,att17 jpy_att17
22:04:48  22  ,att18 jpy_att18
22:04:48  23  ,att19 jpy_att19
22:04:48  24  ,att20 jpy_att20
22:04:48  25  ,att21 jpy_att21
22:04:48  26  ,att22 jpy_att22
22:04:48  27  ,att23 jpy_att23
22:04:48  28  ,att24 jpy_att24
22:04:48  29  ,att25 jpy_att25
22:04:48  30  ,att26 jpy_att26
22:04:48  31  ,att27 jpy_att27
22:04:48  32  ,att28 jpy_att28
22:04:48  33  ,att29 jpy_att29
22:04:48  34  ,att30 jpy_att30
22:04:48  35  ,att31 jpy_att31
22:04:48  36  ,att32 jpy_att32
22:04:48  37  ,att33 jpy_att33
22:04:48  38  ,att34 jpy_att34
22:04:48  39  ,att35 jpy_att35
22:04:48  40  ,att36 jpy_att36
22:04:48  41  ,att37 jpy_att37
22:04:48  42  FROM svm6162
22:04:48  43  /

Table created.

Elapsed: 00:00:00.16
22:04:48 SQL> 
22:04:48 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
22:04:49 SQL> 
22:04:49 SQL> -- rpt
22:04:49 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19838

Elapsed: 00:00:00.92
22:04:50 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     19838

Elapsed: 00:00:00.00
22:04:50 SQL> 
22:04:50 SQL> --
22:04:50 SQL> -- cad610.sql
22:04:50 SQL> --
22:04:50 SQL> 
22:04:50 SQL> -- Creates views and tables for backtesting a forex SVM strategy
22:04:50 SQL> 
22:04:50 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.36
22:04:50 SQL> 
22:04:50 SQL> -- I created di5min here:
22:04:50 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
22:04:50 SQL> 
22:04:50 SQL> CREATE OR REPLACE VIEW svm6102 AS
22:04:50   2  SELECT
22:04:50   3  pair
22:04:50   4  ,ydate
22:04:50   5  ,prdate
22:04:50   6  ,rownum rnum -- acts as t in my time-series
22:04:50   7  ,clse
22:04:50   8  -- Derive a bunch of attributes from clse, the latest price:
22:04:50   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
22:04:50  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
22:04:50  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
22:04:50  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
22:04:50  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
22:04:50  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
22:04:50  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
22:04:50  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
22:04:50  17  --
22:04:50  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
22:04:50  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
22:04:50  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
22:04:50  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
22:04:50  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
22:04:50  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
22:04:50  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
22:04:50  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
22:04:50  26  --
22:04:50  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
22:04:50  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
22:04:50  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
22:04:50  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
22:04:50  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
22:04:50  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
22:04:50  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
22:04:50  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
22:04:50  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
22:04:50  36  FROM di5min WHERE pair LIKE'%cad%'
22:04:50  37  AND ydate > sysdate - 95
22:04:50  38  ORDER BY ydate
22:04:50  39  /

View created.

Elapsed: 00:00:00.04
22:04:50 SQL> 
22:04:50 SQL> -- rpt
22:04:50 SQL> 
22:04:50 SQL> SELECT
22:04:50   2  pair
22:04:50   3  ,COUNT(pair)
22:04:50   4  ,MIN(clse),MAX(clse)
22:04:50   5  ,MIN(avg6),MAX(avg6)
22:04:50   6  ,MIN(ydate),MAX(ydate)
22:04:50   7  FROM svm6102
22:04:50   8  GROUP BY pair
22:04:50   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_cad       19838	.99755	    1.036 .998845205 1.03336849 2010-09-26 22:05:01 2010-12-30 21:55:00

Elapsed: 00:00:00.87
22:04:51 SQL> 
22:04:51 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
22:04:51 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.18
22:04:51 SQL> CREATE TABLE svm6122 COMPRESS AS
22:04:51   2  SELECT
22:04:51   3  pair
22:04:51   4  ,ydate
22:04:51   5  ,prdate
22:04:51   6  ,clse
22:04:51   7  -- g6 is important. I want to predict g6:
22:04:51   8  ,ld6 - clse g6
22:04:51   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
22:04:51  10  -- I want more attributes from the ones I derived above:
22:04:51  11  -- clse relation to moving-min
22:04:51  12  ,clse-min4  cm4
22:04:51  13  ,clse-min6  cm6
22:04:51  14  ,clse-min8  cm8
22:04:51  15  ,clse-min10 cm10
22:04:51  16  ,clse-min12 cm12
22:04:51  17  ,clse-min14 cm14
22:04:51  18  ,clse-min16 cm16
22:04:51  19  ,clse-min18 cm18
22:04:51  20  -- clse relation to moving-avg
22:04:51  21  ,clse-avg4  ca4
22:04:51  22  ,clse-avg6  ca6
22:04:51  23  ,clse-avg8  ca8
22:04:51  24  ,clse-avg10 ca10
22:04:51  25  ,clse-avg12 ca12
22:04:51  26  ,clse-avg14 ca14
22:04:51  27  ,clse-avg16 ca16
22:04:51  28  ,clse-avg18 ca18
22:04:51  29  -- clse relation to moving-max
22:04:51  30  ,clse-max4  cx4
22:04:51  31  ,clse-max6  cx6
22:04:51  32  ,clse-max8  cx8
22:04:51  33  ,clse-max10 cx10
22:04:51  34  ,clse-max12 cx12
22:04:51  35  ,clse-max14 cx14
22:04:51  36  ,clse-max16 cx16
22:04:51  37  ,clse-max18 cx18
22:04:51  38  -- Derive more attributes.
22:04:51  39  -- I want to use CORR() here to help SVM see the shape of the series.
22:04:51  40  -- But COVAR_POP is more stable:
22:04:51  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
22:04:51  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
22:04:51  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
22:04:51  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
22:04:51  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
22:04:51  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
22:04:51  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
22:04:51  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
22:04:51  49  -- Derive date related attributes:
22:04:51  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:04:51  51  ,0+TO_CHAR(ydate,'D')d
22:04:51  52  ,0+TO_CHAR(ydate,'W')w
22:04:51  53  -- mpm stands for minutes-past-midnight:
22:04:51  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:04:51  55  -- mph stands for minutes-past-hour:
22:04:51  56  ,0+TO_CHAR(ydate,'MI')mph
22:04:51  57  FROM svm6102
22:04:51  58  ORDER BY ydate
22:04:51  59  /

Table created.

Elapsed: 00:00:02.05
22:04:53 SQL> 
22:04:53 SQL> -- rpt
22:04:53 SQL> 
22:04:53 SQL> SELECT
22:04:53   2  pair
22:04:53   3  ,COUNT(pair)
22:04:53   4  ,MIN(clse),MAX(clse)
22:04:53   5  ,MIN(ydate),MAX(ydate)
22:04:53   6  FROM svm6122
22:04:53   7  GROUP BY pair
22:04:53   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_cad       19838	.99755	    1.036 2010-09-26 22:05:01 2010-12-30 21:55:00

Elapsed: 00:00:00.05
22:04:53 SQL> 
22:04:53 SQL> -- Prepare for derivation of NTILE based params:
22:04:53 SQL> 
22:04:53 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.16
22:04:53 SQL> CREATE TABLE svm6142 COMPRESS AS
22:04:53   2  SELECT
22:04:53   3  pair
22:04:53   4  ,ydate
22:04:53   5  ,prdate
22:04:53   6  ,clse
22:04:53   7  ,g6
22:04:53   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
22:04:53   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
22:04:53  10  ,CASE WHEN trend IS NULL THEN 1
22:04:53  11  	    WHEN trend =0      THEN 1
22:04:53  12  	    ELSE trend END trend
22:04:53  13  ,cm4
22:04:53  14  ,cm6
22:04:53  15  ,cm8
22:04:53  16  ,cm10
22:04:53  17  ,cm12
22:04:53  18  ,cm14
22:04:53  19  ,cm16
22:04:53  20  ,cm18
22:04:53  21  --
22:04:53  22  ,ca4
22:04:53  23  ,ca6
22:04:53  24  ,ca8
22:04:53  25  ,ca10
22:04:53  26  ,ca12
22:04:53  27  ,ca14
22:04:53  28  ,ca16
22:04:53  29  ,ca18
22:04:53  30  --
22:04:53  31  ,cx4
22:04:53  32  ,cx6
22:04:53  33  ,cx8
22:04:53  34  ,cx10
22:04:53  35  ,cx12
22:04:53  36  ,cx14
22:04:53  37  ,cx16
22:04:53  38  ,cx18
22:04:53  39  --
22:04:53  40  ,crr4
22:04:53  41  ,crr6
22:04:53  42  ,crr8
22:04:53  43  ,crr10
22:04:53  44  ,crr12
22:04:53  45  ,crr14
22:04:53  46  ,crr16
22:04:53  47  ,crr18
22:04:53  48  --
22:04:53  49  ,hh
22:04:53  50  ,d
22:04:53  51  ,w
22:04:53  52  ,mpm
22:04:53  53  ,mph
22:04:53  54  FROM svm6122
22:04:53  55  ORDER BY ydate
22:04:53  56  /

Table created.

Elapsed: 00:00:00.36
22:04:54 SQL> 
22:04:54 SQL> -- rpt
22:04:54 SQL> 
22:04:54 SQL> SELECT
22:04:54   2  pair
22:04:54   3  ,trend
22:04:54   4  ,gatt
22:04:54   5  ,COUNT(pair)
22:04:54   6  ,AVG(g6)
22:04:54   7  FROM svm6142
22:04:54   8  GROUP BY pair,trend,gatt
22:04:54   9  ORDER BY pair,trend,gatt
22:04:54  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7314 -.00130711
usd_cad 	-1 up	      3153 .003080158
usd_cad 	-1		39
usd_cad 	 1 nup	      6807 -.00159691
usd_cad 	 1 up	      2492 .003595539
usd_cad 	 1		33

6 rows selected.

Elapsed: 00:00:00.04
22:04:54 SQL> 
22:04:54 SQL> 
22:04:54 SQL> -- Derive NTILE based params:
22:04:54 SQL> 
22:04:54 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.12
22:04:54 SQL> CREATE TABLE svm6162 COMPRESS AS
22:04:54   2  SELECT
22:04:54   3  pair
22:04:54   4  ,ydate
22:04:54   5  ,prdate
22:04:54   6  ,clse
22:04:54   7  ,g6
22:04:54   8  ,gatt
22:04:54   9  ,gattn
22:04:54  10  ,trend
22:04:54  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
22:04:54  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
22:04:54  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
22:04:54  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
22:04:54  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
22:04:54  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
22:04:54  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
22:04:54  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
22:04:54  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
22:04:54  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
22:04:54  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
22:04:54  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
22:04:54  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
22:04:54  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
22:04:54  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
22:04:54  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
22:04:54  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
22:04:54  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
22:04:54  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
22:04:54  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
22:04:54  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
22:04:54  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
22:04:54  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
22:04:54  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
22:04:54  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
22:04:54  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
22:04:54  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
22:04:54  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
22:04:54  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
22:04:54  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
22:04:54  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
22:04:54  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
22:04:54  43  ,hh  att32
22:04:54  44  ,d   att33
22:04:54  45  ,w   att34
22:04:54  46  ,mpm att35
22:04:54  47  ,mph att36
22:04:54  48  ,trend att37
22:04:54  49  FROM svm6142
22:04:54  50  ORDER BY ydate
22:04:54  51  /

Table created.

Elapsed: 00:00:04.78
22:04:59 SQL> 
22:04:59 SQL> -- rpt
22:04:59 SQL> 
22:04:59 SQL> SELECT
22:04:59   2  pair
22:04:59   3  ,trend
22:04:59   4  ,gatt
22:04:59   5  ,COUNT(pair)
22:04:59   6  ,AVG(g6)
22:04:59   7  FROM svm6162
22:04:59   8  GROUP BY pair,trend,gatt
22:04:59   9  ORDER BY pair,trend,gatt
22:04:59  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7314 -.00130711
usd_cad 	-1 up	      3153 .003080158
usd_cad 	-1		39
usd_cad 	 1 nup	      6807 -.00159691
usd_cad 	 1 up	      2492 .003595539
usd_cad 	 1		33

6 rows selected.

Elapsed: 00:00:00.06
22:04:59 SQL> 
22:04:59 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.19
22:04:59 SQL> CREATE TABLE modsrc COMPRESS AS
22:04:59   2  SELECT
22:04:59   3  pair
22:04:59   4  ,ydate
22:04:59   5  ,prdate
22:04:59   6  ,trend
22:04:59   7  ,g6
22:04:59   8  ,gatt
22:04:59   9  ,gattn
22:04:59  10  FROM svm6162
22:04:59  11  /

Table created.

Elapsed: 00:00:00.08
22:04:59 SQL> 
22:04:59 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
22:04:59 SQL> 
22:04:59 SQL> DROP   TABLE cad_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
22:04:59 SQL> CREATE TABLE cad_ms610 COMPRESS AS
22:04:59   2  SELECT
22:04:59   3  ydate
22:04:59   4  ,trend cad_trend
22:04:59   5  ,g6    cad_g6
22:04:59   6  ,gatt  cad_gatt
22:04:59   7  ,gattn cad_gattn
22:04:59   8  FROM modsrc
22:04:59   9  /

Table created.

Elapsed: 00:00:00.07
22:04:59 SQL> 
22:04:59 SQL> ANALYZE TABLE cad_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
22:04:59 SQL> 
22:04:59 SQL> -- I need a copy of the attributes:
22:04:59 SQL> 
22:04:59 SQL> 
22:04:59 SQL> DROP   TABLE cad_att;

Table dropped.

Elapsed: 00:00:00.04
22:04:59 SQL> CREATE TABLE cad_att COMPRESS AS
22:04:59   2  SELECT
22:04:59   3  ydate
22:04:59   4  ,att00 cad_att00
22:04:59   5  ,att01 cad_att01
22:04:59   6  ,att02 cad_att02
22:04:59   7  ,att03 cad_att03
22:04:59   8  ,att04 cad_att04
22:04:59   9  ,att05 cad_att05
22:04:59  10  ,att06 cad_att06
22:04:59  11  ,att07 cad_att07
22:04:59  12  ,att08 cad_att08
22:04:59  13  ,att09 cad_att09
22:04:59  14  ,att10 cad_att10
22:04:59  15  ,att11 cad_att11
22:04:59  16  ,att12 cad_att12
22:04:59  17  ,att13 cad_att13
22:04:59  18  ,att14 cad_att14
22:04:59  19  ,att15 cad_att15
22:04:59  20  ,att16 cad_att16
22:04:59  21  ,att17 cad_att17
22:04:59  22  ,att18 cad_att18
22:04:59  23  ,att19 cad_att19
22:04:59  24  ,att20 cad_att20
22:04:59  25  ,att21 cad_att21
22:04:59  26  ,att22 cad_att22
22:04:59  27  ,att23 cad_att23
22:04:59  28  ,att24 cad_att24
22:04:59  29  ,att25 cad_att25
22:04:59  30  ,att26 cad_att26
22:04:59  31  ,att27 cad_att27
22:04:59  32  ,att28 cad_att28
22:04:59  33  ,att29 cad_att29
22:04:59  34  ,att30 cad_att30
22:04:59  35  ,att31 cad_att31
22:04:59  36  ,att32 cad_att32
22:04:59  37  ,att33 cad_att33
22:04:59  38  ,att34 cad_att34
22:04:59  39  ,att35 cad_att35
22:04:59  40  ,att36 cad_att36
22:04:59  41  ,att37 cad_att37
22:04:59  42  FROM svm6162
22:04:59  43  /

Table created.

Elapsed: 00:00:00.17
22:05:00 SQL> 
22:05:00 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
22:05:00 SQL> 
22:05:00 SQL> -- rpt
22:05:00 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19838

Elapsed: 00:00:00.82
22:05:01 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
     19838

Elapsed: 00:00:00.00
22:05:01 SQL> 
22:05:01 SQL> --
22:05:01 SQL> -- chf610.sql
22:05:01 SQL> --
22:05:01 SQL> 
22:05:01 SQL> -- Creates views and tables for backtesting a forex SVM strategy
22:05:01 SQL> 
22:05:01 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.36
22:05:01 SQL> 
22:05:01 SQL> -- I created di5min here:
22:05:01 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
22:05:01 SQL> 
22:05:01 SQL> CREATE OR REPLACE VIEW svm6102 AS
22:05:01   2  SELECT
22:05:01   3  pair
22:05:01   4  ,ydate
22:05:01   5  ,prdate
22:05:01   6  ,rownum rnum -- acts as t in my time-series
22:05:01   7  ,clse
22:05:01   8  -- Derive a bunch of attributes from clse, the latest price:
22:05:01   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
22:05:01  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
22:05:01  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
22:05:01  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
22:05:01  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
22:05:01  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
22:05:01  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
22:05:01  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
22:05:01  17  --
22:05:01  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
22:05:01  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
22:05:01  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
22:05:01  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
22:05:01  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
22:05:01  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
22:05:01  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
22:05:01  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
22:05:01  26  --
22:05:01  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
22:05:01  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
22:05:01  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
22:05:01  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
22:05:01  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
22:05:01  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
22:05:01  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
22:05:01  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
22:05:01  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
22:05:01  36  FROM di5min WHERE pair LIKE'%chf%'
22:05:01  37  AND ydate > sysdate - 95
22:05:01  38  ORDER BY ydate
22:05:01  39  /

View created.

Elapsed: 00:00:00.04
22:05:01 SQL> 
22:05:01 SQL> -- rpt
22:05:01 SQL> 
22:05:01 SQL> SELECT
22:05:01   2  pair
22:05:01   3  ,COUNT(pair)
22:05:01   4  ,MIN(clse),MAX(clse)
22:05:01   5  ,MIN(avg6),MAX(avg6)
22:05:01   6  ,MIN(ydate),MAX(ydate)
22:05:01   7  FROM svm6102
22:05:01   8  GROUP BY pair
22:05:01   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_chf       19840    .935075	  1.00635 .936442808 1.00498151 2010-09-26 22:10:01 2010-12-30 21:55:00

Elapsed: 00:00:00.84
22:05:02 SQL> 
22:05:02 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
22:05:02 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.18
22:05:02 SQL> CREATE TABLE svm6122 COMPRESS AS
22:05:02   2  SELECT
22:05:02   3  pair
22:05:02   4  ,ydate
22:05:02   5  ,prdate
22:05:02   6  ,clse
22:05:02   7  -- g6 is important. I want to predict g6:
22:05:02   8  ,ld6 - clse g6
22:05:02   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
22:05:02  10  -- I want more attributes from the ones I derived above:
22:05:02  11  -- clse relation to moving-min
22:05:02  12  ,clse-min4  cm4
22:05:02  13  ,clse-min6  cm6
22:05:02  14  ,clse-min8  cm8
22:05:02  15  ,clse-min10 cm10
22:05:02  16  ,clse-min12 cm12
22:05:02  17  ,clse-min14 cm14
22:05:02  18  ,clse-min16 cm16
22:05:02  19  ,clse-min18 cm18
22:05:02  20  -- clse relation to moving-avg
22:05:02  21  ,clse-avg4  ca4
22:05:02  22  ,clse-avg6  ca6
22:05:02  23  ,clse-avg8  ca8
22:05:02  24  ,clse-avg10 ca10
22:05:02  25  ,clse-avg12 ca12
22:05:02  26  ,clse-avg14 ca14
22:05:02  27  ,clse-avg16 ca16
22:05:02  28  ,clse-avg18 ca18
22:05:02  29  -- clse relation to moving-max
22:05:02  30  ,clse-max4  cx4
22:05:02  31  ,clse-max6  cx6
22:05:02  32  ,clse-max8  cx8
22:05:02  33  ,clse-max10 cx10
22:05:02  34  ,clse-max12 cx12
22:05:02  35  ,clse-max14 cx14
22:05:02  36  ,clse-max16 cx16
22:05:02  37  ,clse-max18 cx18
22:05:02  38  -- Derive more attributes.
22:05:02  39  -- I want to use CORR() here to help SVM see the shape of the series.
22:05:02  40  -- But COVAR_POP is more stable:
22:05:02  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
22:05:02  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
22:05:02  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
22:05:02  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
22:05:02  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
22:05:02  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
22:05:02  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
22:05:02  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
22:05:02  49  -- Derive date related attributes:
22:05:02  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:05:02  51  ,0+TO_CHAR(ydate,'D')d
22:05:02  52  ,0+TO_CHAR(ydate,'W')w
22:05:02  53  -- mpm stands for minutes-past-midnight:
22:05:02  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:05:02  55  -- mph stands for minutes-past-hour:
22:05:02  56  ,0+TO_CHAR(ydate,'MI')mph
22:05:02  57  FROM svm6102
22:05:02  58  ORDER BY ydate
22:05:02  59  /

Table created.

Elapsed: 00:00:02.04
22:05:04 SQL> 
22:05:04 SQL> -- rpt
22:05:04 SQL> 
22:05:04 SQL> SELECT
22:05:04   2  pair
22:05:04   3  ,COUNT(pair)
22:05:04   4  ,MIN(clse),MAX(clse)
22:05:04   5  ,MIN(ydate),MAX(ydate)
22:05:04   6  FROM svm6122
22:05:04   7  GROUP BY pair
22:05:04   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_chf       19840    .935075	  1.00635 2010-09-26 22:10:01 2010-12-30 21:55:00

Elapsed: 00:00:00.04
22:05:04 SQL> 
22:05:04 SQL> -- Prepare for derivation of NTILE based params:
22:05:04 SQL> 
22:05:04 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.15
22:05:04 SQL> CREATE TABLE svm6142 COMPRESS AS
22:05:04   2  SELECT
22:05:04   3  pair
22:05:04   4  ,ydate
22:05:04   5  ,prdate
22:05:04   6  ,clse
22:05:04   7  ,g6
22:05:04   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
22:05:04   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
22:05:04  10  ,CASE WHEN trend IS NULL THEN 1
22:05:04  11  	    WHEN trend =0      THEN 1
22:05:04  12  	    ELSE trend END trend
22:05:04  13  ,cm4
22:05:04  14  ,cm6
22:05:04  15  ,cm8
22:05:04  16  ,cm10
22:05:04  17  ,cm12
22:05:04  18  ,cm14
22:05:04  19  ,cm16
22:05:04  20  ,cm18
22:05:04  21  --
22:05:04  22  ,ca4
22:05:04  23  ,ca6
22:05:04  24  ,ca8
22:05:04  25  ,ca10
22:05:04  26  ,ca12
22:05:04  27  ,ca14
22:05:04  28  ,ca16
22:05:04  29  ,ca18
22:05:04  30  --
22:05:04  31  ,cx4
22:05:04  32  ,cx6
22:05:04  33  ,cx8
22:05:04  34  ,cx10
22:05:04  35  ,cx12
22:05:04  36  ,cx14
22:05:04  37  ,cx16
22:05:04  38  ,cx18
22:05:04  39  --
22:05:04  40  ,crr4
22:05:04  41  ,crr6
22:05:04  42  ,crr8
22:05:04  43  ,crr10
22:05:04  44  ,crr12
22:05:04  45  ,crr14
22:05:04  46  ,crr16
22:05:04  47  ,crr18
22:05:04  48  --
22:05:04  49  ,hh
22:05:04  50  ,d
22:05:04  51  ,w
22:05:04  52  ,mpm
22:05:04  53  ,mph
22:05:04  54  FROM svm6122
22:05:04  55  ORDER BY ydate
22:05:04  56  /

Table created.

Elapsed: 00:00:00.36
22:05:05 SQL> 
22:05:05 SQL> -- rpt
22:05:05 SQL> 
22:05:05 SQL> SELECT
22:05:05   2  pair
22:05:05   3  ,trend
22:05:05   4  ,gatt
22:05:05   5  ,COUNT(pair)
22:05:05   6  ,AVG(g6)
22:05:05   7  FROM svm6142
22:05:05   8  GROUP BY pair,trend,gatt
22:05:05   9  ORDER BY pair,trend,gatt
22:05:05  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7302 -.00196573
usd_chf 	-1 up	      3177 .003893858
usd_chf 	-1		72
usd_chf 	 1 nup	      6734 -.00162671
usd_chf 	 1 up	      2555 .003693704

Elapsed: 00:00:00.04
22:05:05 SQL> 
22:05:05 SQL> 
22:05:05 SQL> -- Derive NTILE based params:
22:05:05 SQL> 
22:05:05 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.16
22:05:05 SQL> CREATE TABLE svm6162 COMPRESS AS
22:05:05   2  SELECT
22:05:05   3  pair
22:05:05   4  ,ydate
22:05:05   5  ,prdate
22:05:05   6  ,clse
22:05:05   7  ,g6
22:05:05   8  ,gatt
22:05:05   9  ,gattn
22:05:05  10  ,trend
22:05:05  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
22:05:05  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
22:05:05  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
22:05:05  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
22:05:05  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
22:05:05  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
22:05:05  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
22:05:05  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
22:05:05  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
22:05:05  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
22:05:05  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
22:05:05  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
22:05:05  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
22:05:05  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
22:05:05  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
22:05:05  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
22:05:05  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
22:05:05  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
22:05:05  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
22:05:05  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
22:05:05  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
22:05:05  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
22:05:05  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
22:05:05  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
22:05:05  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
22:05:05  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
22:05:05  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
22:05:05  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
22:05:05  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
22:05:05  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
22:05:05  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
22:05:05  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
22:05:05  43  ,hh  att32
22:05:05  44  ,d   att33
22:05:05  45  ,w   att34
22:05:05  46  ,mpm att35
22:05:05  47  ,mph att36
22:05:05  48  ,trend att37
22:05:05  49  FROM svm6142
22:05:05  50  ORDER BY ydate
22:05:05  51  /

Table created.

Elapsed: 00:00:04.76
22:05:10 SQL> 
22:05:10 SQL> -- rpt
22:05:10 SQL> 
22:05:10 SQL> SELECT
22:05:10   2  pair
22:05:10   3  ,trend
22:05:10   4  ,gatt
22:05:10   5  ,COUNT(pair)
22:05:10   6  ,AVG(g6)
22:05:10   7  FROM svm6162
22:05:10   8  GROUP BY pair,trend,gatt
22:05:10   9  ORDER BY pair,trend,gatt
22:05:10  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7302 -.00196573
usd_chf 	-1 up	      3177 .003893858
usd_chf 	-1		72
usd_chf 	 1 nup	      6734 -.00162671
usd_chf 	 1 up	      2555 .003693704

Elapsed: 00:00:00.04
22:05:10 SQL> 
22:05:10 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.20
22:05:10 SQL> CREATE TABLE modsrc COMPRESS AS
22:05:10   2  SELECT
22:05:10   3  pair
22:05:10   4  ,ydate
22:05:10   5  ,prdate
22:05:10   6  ,trend
22:05:10   7  ,g6
22:05:10   8  ,gatt
22:05:10   9  ,gattn
22:05:10  10  FROM svm6162
22:05:10  11  /

Table created.

Elapsed: 00:00:00.08
22:05:10 SQL> 
22:05:10 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
22:05:10 SQL> 
22:05:10 SQL> DROP   TABLE chf_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
22:05:10 SQL> CREATE TABLE chf_ms610 COMPRESS AS
22:05:10   2  SELECT
22:05:10   3  ydate
22:05:10   4  ,trend chf_trend
22:05:10   5  ,g6    chf_g6
22:05:10   6  ,gatt  chf_gatt
22:05:10   7  ,gattn chf_gattn
22:05:10   8  FROM modsrc
22:05:10   9  /

Table created.

Elapsed: 00:00:00.07
22:05:10 SQL> 
22:05:10 SQL> ANALYZE TABLE chf_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
22:05:11 SQL> 
22:05:11 SQL> -- I need a copy of the attributes:
22:05:11 SQL> 
22:05:11 SQL> 
22:05:11 SQL> DROP   TABLE chf_att;

Table dropped.

Elapsed: 00:00:00.05
22:05:11 SQL> CREATE TABLE chf_att COMPRESS AS
22:05:11   2  SELECT
22:05:11   3  ydate
22:05:11   4  ,att00 chf_att00
22:05:11   5  ,att01 chf_att01
22:05:11   6  ,att02 chf_att02
22:05:11   7  ,att03 chf_att03
22:05:11   8  ,att04 chf_att04
22:05:11   9  ,att05 chf_att05
22:05:11  10  ,att06 chf_att06
22:05:11  11  ,att07 chf_att07
22:05:11  12  ,att08 chf_att08
22:05:11  13  ,att09 chf_att09
22:05:11  14  ,att10 chf_att10
22:05:11  15  ,att11 chf_att11
22:05:11  16  ,att12 chf_att12
22:05:11  17  ,att13 chf_att13
22:05:11  18  ,att14 chf_att14
22:05:11  19  ,att15 chf_att15
22:05:11  20  ,att16 chf_att16
22:05:11  21  ,att17 chf_att17
22:05:11  22  ,att18 chf_att18
22:05:11  23  ,att19 chf_att19
22:05:11  24  ,att20 chf_att20
22:05:11  25  ,att21 chf_att21
22:05:11  26  ,att22 chf_att22
22:05:11  27  ,att23 chf_att23
22:05:11  28  ,att24 chf_att24
22:05:11  29  ,att25 chf_att25
22:05:11  30  ,att26 chf_att26
22:05:11  31  ,att27 chf_att27
22:05:11  32  ,att28 chf_att28
22:05:11  33  ,att29 chf_att29
22:05:11  34  ,att30 chf_att30
22:05:11  35  ,att31 chf_att31
22:05:11  36  ,att32 chf_att32
22:05:11  37  ,att33 chf_att33
22:05:11  38  ,att34 chf_att34
22:05:11  39  ,att35 chf_att35
22:05:11  40  ,att36 chf_att36
22:05:11  41  ,att37 chf_att37
22:05:11  42  FROM svm6162
22:05:11  43  /

Table created.

Elapsed: 00:00:00.16
22:05:11 SQL> 
22:05:11 SQL> ANALYZE TABLE chf_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
22:05:11 SQL> 
22:05:11 SQL> -- rpt
22:05:11 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19840

Elapsed: 00:00:00.86
22:05:12 SQL> SELECT COUNT(*)FROM chf_att;

  COUNT(*)
----------
     19840

Elapsed: 00:00:00.00
22:05:12 SQL> 
22:05:12 SQL> --
22:05:12 SQL> -- ech610.sql
22:05:12 SQL> --
22:05:12 SQL> 
22:05:12 SQL> -- Creates views and tables for backtesting a forex SVM strategy
22:05:12 SQL> 
22:05:12 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.43
22:05:13 SQL> 
22:05:13 SQL> -- I created di5min here:
22:05:13 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
22:05:13 SQL> 
22:05:13 SQL> CREATE OR REPLACE VIEW svm6102 AS
22:05:13   2  SELECT
22:05:13   3  pair
22:05:13   4  ,ydate
22:05:13   5  ,prdate
22:05:13   6  ,rownum rnum -- acts as t in my time-series
22:05:13   7  ,clse
22:05:13   8  -- Derive a bunch of attributes from clse, the latest price:
22:05:13   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
22:05:13  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
22:05:13  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
22:05:13  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
22:05:13  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
22:05:13  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
22:05:13  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
22:05:13  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
22:05:13  17  --
22:05:13  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
22:05:13  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
22:05:13  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
22:05:13  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
22:05:13  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
22:05:13  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
22:05:13  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
22:05:13  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
22:05:13  26  --
22:05:13  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
22:05:13  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
22:05:13  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
22:05:13  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
22:05:13  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
22:05:13  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
22:05:13  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
22:05:13  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
22:05:13  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
22:05:13  36  FROM di5min WHERE pair LIKE'%ech%'
22:05:13  37  AND ydate > sysdate - 95
22:05:13  38  ORDER BY ydate
22:05:13  39  /

View created.

Elapsed: 00:00:00.04
22:05:13 SQL> 
22:05:13 SQL> -- rpt
22:05:13 SQL> 
22:05:13 SQL> SELECT
22:05:13   2  pair
22:05:13   3  ,COUNT(pair)
22:05:13   4  ,MIN(clse),MAX(clse)
22:05:13   5  ,MIN(avg6),MAX(avg6)
22:05:13   6  ,MIN(ydate),MAX(ydate)
22:05:13   7  FROM svm6102
22:05:13   8  GROUP BY pair
22:05:13   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ech_usd       19839 1.24213032 1.38284305 1.24369518 1.37986485 2010-09-26 22:10:01 2010-12-30 21:55:00

Elapsed: 00:00:00.79
22:05:13 SQL> 
22:05:13 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
22:05:13 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.27
22:05:14 SQL> CREATE TABLE svm6122 COMPRESS AS
22:05:14   2  SELECT
22:05:14   3  pair
22:05:14   4  ,ydate
22:05:14   5  ,prdate
22:05:14   6  ,clse
22:05:14   7  -- g6 is important. I want to predict g6:
22:05:14   8  ,ld6 - clse g6
22:05:14   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
22:05:14  10  -- I want more attributes from the ones I derived above:
22:05:14  11  -- clse relation to moving-min
22:05:14  12  ,clse-min4  cm4
22:05:14  13  ,clse-min6  cm6
22:05:14  14  ,clse-min8  cm8
22:05:14  15  ,clse-min10 cm10
22:05:14  16  ,clse-min12 cm12
22:05:14  17  ,clse-min14 cm14
22:05:14  18  ,clse-min16 cm16
22:05:14  19  ,clse-min18 cm18
22:05:14  20  -- clse relation to moving-avg
22:05:14  21  ,clse-avg4  ca4
22:05:14  22  ,clse-avg6  ca6
22:05:14  23  ,clse-avg8  ca8
22:05:14  24  ,clse-avg10 ca10
22:05:14  25  ,clse-avg12 ca12
22:05:14  26  ,clse-avg14 ca14
22:05:14  27  ,clse-avg16 ca16
22:05:14  28  ,clse-avg18 ca18
22:05:14  29  -- clse relation to moving-max
22:05:14  30  ,clse-max4  cx4
22:05:14  31  ,clse-max6  cx6
22:05:14  32  ,clse-max8  cx8
22:05:14  33  ,clse-max10 cx10
22:05:14  34  ,clse-max12 cx12
22:05:14  35  ,clse-max14 cx14
22:05:14  36  ,clse-max16 cx16
22:05:14  37  ,clse-max18 cx18
22:05:14  38  -- Derive more attributes.
22:05:14  39  -- I want to use CORR() here to help SVM see the shape of the series.
22:05:14  40  -- But COVAR_POP is more stable:
22:05:14  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
22:05:14  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
22:05:14  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
22:05:14  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
22:05:14  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
22:05:14  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
22:05:14  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
22:05:14  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
22:05:14  49  -- Derive date related attributes:
22:05:14  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:05:14  51  ,0+TO_CHAR(ydate,'D')d
22:05:14  52  ,0+TO_CHAR(ydate,'W')w
22:05:14  53  -- mpm stands for minutes-past-midnight:
22:05:14  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:05:14  55  -- mph stands for minutes-past-hour:
22:05:14  56  ,0+TO_CHAR(ydate,'MI')mph
22:05:14  57  FROM svm6102
22:05:14  58  ORDER BY ydate
22:05:14  59  /

Table created.

Elapsed: 00:00:02.05
22:05:16 SQL> 
22:05:16 SQL> -- rpt
22:05:16 SQL> 
22:05:16 SQL> SELECT
22:05:16   2  pair
22:05:16   3  ,COUNT(pair)
22:05:16   4  ,MIN(clse),MAX(clse)
22:05:16   5  ,MIN(ydate),MAX(ydate)
22:05:16   6  FROM svm6122
22:05:16   7  GROUP BY pair
22:05:16   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ech_usd       19839 1.24213032 1.38284305 2010-09-26 22:10:01 2010-12-30 21:55:00

Elapsed: 00:00:00.04
22:05:16 SQL> 
22:05:16 SQL> -- Prepare for derivation of NTILE based params:
22:05:16 SQL> 
22:05:16 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.19
22:05:16 SQL> CREATE TABLE svm6142 COMPRESS AS
22:05:16   2  SELECT
22:05:16   3  pair
22:05:16   4  ,ydate
22:05:16   5  ,prdate
22:05:16   6  ,clse
22:05:16   7  ,g6
22:05:16   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
22:05:16   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
22:05:16  10  ,CASE WHEN trend IS NULL THEN 1
22:05:16  11  	    WHEN trend =0      THEN 1
22:05:16  12  	    ELSE trend END trend
22:05:16  13  ,cm4
22:05:16  14  ,cm6
22:05:16  15  ,cm8
22:05:16  16  ,cm10
22:05:16  17  ,cm12
22:05:16  18  ,cm14
22:05:16  19  ,cm16
22:05:16  20  ,cm18
22:05:16  21  --
22:05:16  22  ,ca4
22:05:16  23  ,ca6
22:05:16  24  ,ca8
22:05:16  25  ,ca10
22:05:16  26  ,ca12
22:05:16  27  ,ca14
22:05:16  28  ,ca16
22:05:16  29  ,ca18
22:05:16  30  --
22:05:16  31  ,cx4
22:05:16  32  ,cx6
22:05:16  33  ,cx8
22:05:16  34  ,cx10
22:05:16  35  ,cx12
22:05:16  36  ,cx14
22:05:16  37  ,cx16
22:05:16  38  ,cx18
22:05:16  39  --
22:05:16  40  ,crr4
22:05:16  41  ,crr6
22:05:16  42  ,crr8
22:05:16  43  ,crr10
22:05:16  44  ,crr12
22:05:16  45  ,crr14
22:05:16  46  ,crr16
22:05:16  47  ,crr18
22:05:16  48  --
22:05:16  49  ,hh
22:05:16  50  ,d
22:05:16  51  ,w
22:05:16  52  ,mpm
22:05:16  53  ,mph
22:05:16  54  FROM svm6122
22:05:16  55  ORDER BY ydate
22:05:16  56  /

Table created.

Elapsed: 00:00:00.38
22:05:16 SQL> 
22:05:16 SQL> -- rpt
22:05:16 SQL> 
22:05:16 SQL> SELECT
22:05:16   2  pair
22:05:16   3  ,trend
22:05:16   4  ,gatt
22:05:16   5  ,COUNT(pair)
22:05:16   6  ,AVG(g6)
22:05:16   7  FROM svm6142
22:05:16   8  GROUP BY pair,trend,gatt
22:05:16   9  ORDER BY pair,trend,gatt
22:05:16  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6695  -.0021906
ech_usd 	-1 up	      3632 .003536567
ech_usd 	-1		61
ech_usd 	 1 nup	      6562 -.00231058
ech_usd 	 1 up	      2878  .00382189
ech_usd 	 1		11

6 rows selected.

Elapsed: 00:00:00.05
22:05:16 SQL> 
22:05:16 SQL> 
22:05:16 SQL> -- Derive NTILE based params:
22:05:16 SQL> 
22:05:16 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.13
22:05:16 SQL> CREATE TABLE svm6162 COMPRESS AS
22:05:16   2  SELECT
22:05:16   3  pair
22:05:16   4  ,ydate
22:05:16   5  ,prdate
22:05:16   6  ,clse
22:05:16   7  ,g6
22:05:16   8  ,gatt
22:05:16   9  ,gattn
22:05:16  10  ,trend
22:05:16  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
22:05:16  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
22:05:16  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
22:05:16  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
22:05:16  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
22:05:16  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
22:05:16  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
22:05:16  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
22:05:16  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
22:05:16  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
22:05:16  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
22:05:16  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
22:05:16  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
22:05:16  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
22:05:16  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
22:05:16  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
22:05:16  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
22:05:16  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
22:05:16  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
22:05:16  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
22:05:16  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
22:05:16  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
22:05:16  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
22:05:16  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
22:05:16  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
22:05:16  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
22:05:16  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
22:05:16  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
22:05:16  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
22:05:16  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
22:05:16  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
22:05:16  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
22:05:16  43  ,hh  att32
22:05:16  44  ,d   att33
22:05:16  45  ,w   att34
22:05:16  46  ,mpm att35
22:05:16  47  ,mph att36
22:05:16  48  ,trend att37
22:05:16  49  FROM svm6142
22:05:16  50  ORDER BY ydate
22:05:16  51  /

Table created.

Elapsed: 00:00:04.85
22:05:21 SQL> 
22:05:21 SQL> -- rpt
22:05:21 SQL> 
22:05:21 SQL> SELECT
22:05:21   2  pair
22:05:21   3  ,trend
22:05:21   4  ,gatt
22:05:21   5  ,COUNT(pair)
22:05:21   6  ,AVG(g6)
22:05:21   7  FROM svm6162
22:05:21   8  GROUP BY pair,trend,gatt
22:05:21   9  ORDER BY pair,trend,gatt
22:05:21  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6695  -.0021906
ech_usd 	-1 up	      3632 .003536567
ech_usd 	-1		61
ech_usd 	 1 nup	      6562 -.00231058
ech_usd 	 1 up	      2878  .00382189
ech_usd 	 1		11

6 rows selected.

Elapsed: 00:00:00.03
22:05:21 SQL> 
22:05:21 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
22:05:21 SQL> CREATE TABLE modsrc COMPRESS AS
22:05:21   2  SELECT
22:05:21   3  pair
22:05:21   4  ,ydate
22:05:21   5  ,prdate
22:05:21   6  ,trend
22:05:21   7  ,g6
22:05:21   8  ,gatt
22:05:21   9  ,gattn
22:05:21  10  FROM svm6162
22:05:21  11  /

Table created.

Elapsed: 00:00:00.08
22:05:22 SQL> 
22:05:22 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
22:05:22 SQL> 
22:05:22 SQL> DROP   TABLE ech_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
22:05:22 SQL> CREATE TABLE ech_ms610 COMPRESS AS
22:05:22   2  SELECT
22:05:22   3  ydate
22:05:22   4  ,trend ech_trend
22:05:22   5  ,g6    ech_g6
22:05:22   6  ,gatt  ech_gatt
22:05:22   7  ,gattn ech_gattn
22:05:22   8  FROM modsrc
22:05:22   9  /

Table created.

Elapsed: 00:00:00.07
22:05:22 SQL> 
22:05:22 SQL> ANALYZE TABLE ech_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
22:05:22 SQL> 
22:05:22 SQL> -- I need a copy of the attributes:
22:05:22 SQL> 
22:05:22 SQL> 
22:05:22 SQL> DROP   TABLE ech_att;

Table dropped.

Elapsed: 00:00:00.04
22:05:22 SQL> CREATE TABLE ech_att COMPRESS AS
22:05:22   2  SELECT
22:05:22   3  ydate
22:05:22   4  ,att00 ech_att00
22:05:22   5  ,att01 ech_att01
22:05:22   6  ,att02 ech_att02
22:05:22   7  ,att03 ech_att03
22:05:22   8  ,att04 ech_att04
22:05:22   9  ,att05 ech_att05
22:05:22  10  ,att06 ech_att06
22:05:22  11  ,att07 ech_att07
22:05:22  12  ,att08 ech_att08
22:05:22  13  ,att09 ech_att09
22:05:22  14  ,att10 ech_att10
22:05:22  15  ,att11 ech_att11
22:05:22  16  ,att12 ech_att12
22:05:22  17  ,att13 ech_att13
22:05:22  18  ,att14 ech_att14
22:05:22  19  ,att15 ech_att15
22:05:22  20  ,att16 ech_att16
22:05:22  21  ,att17 ech_att17
22:05:22  22  ,att18 ech_att18
22:05:22  23  ,att19 ech_att19
22:05:22  24  ,att20 ech_att20
22:05:22  25  ,att21 ech_att21
22:05:22  26  ,att22 ech_att22
22:05:22  27  ,att23 ech_att23
22:05:22  28  ,att24 ech_att24
22:05:22  29  ,att25 ech_att25
22:05:22  30  ,att26 ech_att26
22:05:22  31  ,att27 ech_att27
22:05:22  32  ,att28 ech_att28
22:05:22  33  ,att29 ech_att29
22:05:22  34  ,att30 ech_att30
22:05:22  35  ,att31 ech_att31
22:05:22  36  ,att32 ech_att32
22:05:22  37  ,att33 ech_att33
22:05:22  38  ,att34 ech_att34
22:05:22  39  ,att35 ech_att35
22:05:22  40  ,att36 ech_att36
22:05:22  41  ,att37 ech_att37
22:05:22  42  FROM svm6162
22:05:22  43  /

Table created.

Elapsed: 00:00:00.16
22:05:22 SQL> 
22:05:22 SQL> ANALYZE TABLE ech_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
22:05:23 SQL> 
22:05:23 SQL> -- rpt
22:05:23 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19839

Elapsed: 00:00:00.78
22:05:23 SQL> SELECT COUNT(*)FROM ech_att;

  COUNT(*)
----------
     19839

Elapsed: 00:00:00.00
22:05:23 SQL> 
22:05:23 SQL> --
22:05:23 SQL> -- egb610.sql
22:05:23 SQL> --
22:05:23 SQL> 
22:05:23 SQL> -- Creates views and tables for backtesting a forex SVM strategy
22:05:23 SQL> 
22:05:23 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.37
22:05:24 SQL> 
22:05:24 SQL> -- I created di5min here:
22:05:24 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
22:05:24 SQL> 
22:05:24 SQL> CREATE OR REPLACE VIEW svm6102 AS
22:05:24   2  SELECT
22:05:24   3  pair
22:05:24   4  ,ydate
22:05:24   5  ,prdate
22:05:24   6  ,rownum rnum -- acts as t in my time-series
22:05:24   7  ,clse
22:05:24   8  -- Derive a bunch of attributes from clse, the latest price:
22:05:24   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
22:05:24  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
22:05:24  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
22:05:24  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
22:05:24  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
22:05:24  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
22:05:24  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
22:05:24  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
22:05:24  17  --
22:05:24  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
22:05:24  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
22:05:24  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
22:05:24  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
22:05:24  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
22:05:24  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
22:05:24  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
22:05:24  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
22:05:24  26  --
22:05:24  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
22:05:24  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
22:05:24  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
22:05:24  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
22:05:24  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
22:05:24  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
22:05:24  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
22:05:24  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
22:05:24  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
22:05:24  36  FROM di5min WHERE pair LIKE'%egb%'
22:05:24  37  AND ydate > sysdate - 95
22:05:24  38  ORDER BY ydate
22:05:24  39  /

View created.

Elapsed: 00:00:00.05
22:05:24 SQL> 
22:05:24 SQL> -- rpt
22:05:24 SQL> 
22:05:24 SQL> SELECT
22:05:24   2  pair
22:05:24   3  ,COUNT(pair)
22:05:24   4  ,MIN(clse),MAX(clse)
22:05:24   5  ,MIN(avg6),MAX(avg6)
22:05:24   6  ,MIN(ydate),MAX(ydate)
22:05:24   7  FROM svm6102
22:05:24   8  GROUP BY pair
22:05:24   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
egb_usd       19839 .833520557 .893920122 .834199029 .892400287 2010-09-26 22:10:01 2010-12-30 21:55:00

Elapsed: 00:00:00.94
22:05:25 SQL> 
22:05:25 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
22:05:25 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.29
22:05:25 SQL> CREATE TABLE svm6122 COMPRESS AS
22:05:25   2  SELECT
22:05:25   3  pair
22:05:25   4  ,ydate
22:05:25   5  ,prdate
22:05:25   6  ,clse
22:05:25   7  -- g6 is important. I want to predict g6:
22:05:25   8  ,ld6 - clse g6
22:05:25   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
22:05:25  10  -- I want more attributes from the ones I derived above:
22:05:25  11  -- clse relation to moving-min
22:05:25  12  ,clse-min4  cm4
22:05:25  13  ,clse-min6  cm6
22:05:25  14  ,clse-min8  cm8
22:05:25  15  ,clse-min10 cm10
22:05:25  16  ,clse-min12 cm12
22:05:25  17  ,clse-min14 cm14
22:05:25  18  ,clse-min16 cm16
22:05:25  19  ,clse-min18 cm18
22:05:25  20  -- clse relation to moving-avg
22:05:25  21  ,clse-avg4  ca4
22:05:25  22  ,clse-avg6  ca6
22:05:25  23  ,clse-avg8  ca8
22:05:25  24  ,clse-avg10 ca10
22:05:25  25  ,clse-avg12 ca12
22:05:25  26  ,clse-avg14 ca14
22:05:25  27  ,clse-avg16 ca16
22:05:25  28  ,clse-avg18 ca18
22:05:25  29  -- clse relation to moving-max
22:05:25  30  ,clse-max4  cx4
22:05:25  31  ,clse-max6  cx6
22:05:25  32  ,clse-max8  cx8
22:05:25  33  ,clse-max10 cx10
22:05:25  34  ,clse-max12 cx12
22:05:25  35  ,clse-max14 cx14
22:05:25  36  ,clse-max16 cx16
22:05:25  37  ,clse-max18 cx18
22:05:25  38  -- Derive more attributes.
22:05:25  39  -- I want to use CORR() here to help SVM see the shape of the series.
22:05:25  40  -- But COVAR_POP is more stable:
22:05:25  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
22:05:25  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
22:05:25  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
22:05:25  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
22:05:25  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
22:05:25  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
22:05:25  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
22:05:25  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
22:05:25  49  -- Derive date related attributes:
22:05:25  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:05:25  51  ,0+TO_CHAR(ydate,'D')d
22:05:25  52  ,0+TO_CHAR(ydate,'W')w
22:05:25  53  -- mpm stands for minutes-past-midnight:
22:05:25  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:05:25  55  -- mph stands for minutes-past-hour:
22:05:25  56  ,0+TO_CHAR(ydate,'MI')mph
22:05:25  57  FROM svm6102
22:05:25  58  ORDER BY ydate
22:05:25  59  /

Table created.

Elapsed: 00:00:02.49
22:05:28 SQL> 
22:05:28 SQL> -- rpt
22:05:28 SQL> 
22:05:28 SQL> SELECT
22:05:28   2  pair
22:05:28   3  ,COUNT(pair)
22:05:28   4  ,MIN(clse),MAX(clse)
22:05:28   5  ,MIN(ydate),MAX(ydate)
22:05:28   6  FROM svm6122
22:05:28   7  GROUP BY pair
22:05:28   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
egb_usd       19839 .833520557 .893920122 2010-09-26 22:10:01 2010-12-30 21:55:00

Elapsed: 00:00:00.05
22:05:28 SQL> 
22:05:28 SQL> -- Prepare for derivation of NTILE based params:
22:05:28 SQL> 
22:05:28 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.23
22:05:28 SQL> CREATE TABLE svm6142 COMPRESS AS
22:05:28   2  SELECT
22:05:28   3  pair
22:05:28   4  ,ydate
22:05:28   5  ,prdate
22:05:28   6  ,clse
22:05:28   7  ,g6
22:05:28   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
22:05:28   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
22:05:28  10  ,CASE WHEN trend IS NULL THEN 1
22:05:28  11  	    WHEN trend =0      THEN 1
22:05:28  12  	    ELSE trend END trend
22:05:28  13  ,cm4
22:05:28  14  ,cm6
22:05:28  15  ,cm8
22:05:28  16  ,cm10
22:05:28  17  ,cm12
22:05:28  18  ,cm14
22:05:28  19  ,cm16
22:05:28  20  ,cm18
22:05:28  21  --
22:05:28  22  ,ca4
22:05:28  23  ,ca6
22:05:28  24  ,ca8
22:05:28  25  ,ca10
22:05:28  26  ,ca12
22:05:28  27  ,ca14
22:05:28  28  ,ca16
22:05:28  29  ,ca18
22:05:28  30  --
22:05:28  31  ,cx4
22:05:28  32  ,cx6
22:05:28  33  ,cx8
22:05:28  34  ,cx10
22:05:28  35  ,cx12
22:05:28  36  ,cx14
22:05:28  37  ,cx16
22:05:28  38  ,cx18
22:05:28  39  --
22:05:28  40  ,crr4
22:05:28  41  ,crr6
22:05:28  42  ,crr8
22:05:28  43  ,crr10
22:05:28  44  ,crr12
22:05:28  45  ,crr14
22:05:28  46  ,crr16
22:05:28  47  ,crr18
22:05:28  48  --
22:05:28  49  ,hh
22:05:28  50  ,d
22:05:28  51  ,w
22:05:28  52  ,mpm
22:05:28  53  ,mph
22:05:28  54  FROM svm6122
22:05:28  55  ORDER BY ydate
22:05:28  56  /

Table created.

Elapsed: 00:00:00.42
22:05:28 SQL> 
22:05:28 SQL> -- rpt
22:05:28 SQL> 
22:05:28 SQL> SELECT
22:05:28   2  pair
22:05:28   3  ,trend
22:05:28   4  ,gatt
22:05:28   5  ,COUNT(pair)
22:05:28   6  ,AVG(g6)
22:05:28   7  FROM svm6142
22:05:28   8  GROUP BY pair,trend,gatt
22:05:28   9  ORDER BY pair,trend,gatt
22:05:28  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7489 -.00097982
egb_usd 	-1 up	      2777 .003089568
egb_usd 	-1		13
egb_usd 	 1 nup	      6733 -.00128752
egb_usd 	 1 up	      2768 .002961387
egb_usd 	 1		59

6 rows selected.

Elapsed: 00:00:00.04
22:05:28 SQL> 
22:05:28 SQL> 
22:05:28 SQL> -- Derive NTILE based params:
22:05:28 SQL> 
22:05:28 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.12
22:05:28 SQL> CREATE TABLE svm6162 COMPRESS AS
22:05:28   2  SELECT
22:05:28   3  pair
22:05:28   4  ,ydate
22:05:28   5  ,prdate
22:05:28   6  ,clse
22:05:28   7  ,g6
22:05:28   8  ,gatt
22:05:28   9  ,gattn
22:05:28  10  ,trend
22:05:28  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
22:05:28  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
22:05:28  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
22:05:28  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
22:05:28  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
22:05:28  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
22:05:28  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
22:05:28  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
22:05:28  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
22:05:28  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
22:05:28  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
22:05:28  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
22:05:28  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
22:05:28  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
22:05:28  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
22:05:28  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
22:05:28  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
22:05:28  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
22:05:28  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
22:05:28  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
22:05:28  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
22:05:28  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
22:05:28  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
22:05:28  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
22:05:28  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
22:05:28  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
22:05:28  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
22:05:28  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
22:05:28  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
22:05:28  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
22:05:28  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
22:05:28  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
22:05:28  43  ,hh  att32
22:05:28  44  ,d   att33
22:05:28  45  ,w   att34
22:05:28  46  ,mpm att35
22:05:28  47  ,mph att36
22:05:28  48  ,trend att37
22:05:28  49  FROM svm6142
22:05:28  50  ORDER BY ydate
22:05:28  51  /

Table created.

Elapsed: 00:00:05.56
22:05:34 SQL> 
22:05:34 SQL> -- rpt
22:05:34 SQL> 
22:05:34 SQL> SELECT
22:05:34   2  pair
22:05:34   3  ,trend
22:05:34   4  ,gatt
22:05:34   5  ,COUNT(pair)
22:05:34   6  ,AVG(g6)
22:05:34   7  FROM svm6162
22:05:34   8  GROUP BY pair,trend,gatt
22:05:34   9  ORDER BY pair,trend,gatt
22:05:34  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7489 -.00097982
egb_usd 	-1 up	      2777 .003089568
egb_usd 	-1		13
egb_usd 	 1 nup	      6733 -.00128752
egb_usd 	 1 up	      2768 .002961387
egb_usd 	 1		59

6 rows selected.

Elapsed: 00:00:00.03
22:05:34 SQL> 
22:05:34 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.14
22:05:34 SQL> CREATE TABLE modsrc COMPRESS AS
22:05:34   2  SELECT
22:05:34   3  pair
22:05:34   4  ,ydate
22:05:34   5  ,prdate
22:05:34   6  ,trend
22:05:34   7  ,g6
22:05:34   8  ,gatt
22:05:34   9  ,gattn
22:05:34  10  FROM svm6162
22:05:34  11  /

Table created.

Elapsed: 00:00:00.07
22:05:34 SQL> 
22:05:34 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
22:05:34 SQL> 
22:05:34 SQL> DROP   TABLE egb_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
22:05:35 SQL> CREATE TABLE egb_ms610 COMPRESS AS
22:05:35   2  SELECT
22:05:35   3  ydate
22:05:35   4  ,trend egb_trend
22:05:35   5  ,g6    egb_g6
22:05:35   6  ,gatt  egb_gatt
22:05:35   7  ,gattn egb_gattn
22:05:35   8  FROM modsrc
22:05:35   9  /

Table created.

Elapsed: 00:00:00.07
22:05:35 SQL> 
22:05:35 SQL> ANALYZE TABLE egb_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
22:05:35 SQL> 
22:05:35 SQL> -- I need a copy of the attributes:
22:05:35 SQL> 
22:05:35 SQL> 
22:05:35 SQL> DROP   TABLE egb_att;

Table dropped.

Elapsed: 00:00:00.04
22:05:35 SQL> CREATE TABLE egb_att COMPRESS AS
22:05:35   2  SELECT
22:05:35   3  ydate
22:05:35   4  ,att00 egb_att00
22:05:35   5  ,att01 egb_att01
22:05:35   6  ,att02 egb_att02
22:05:35   7  ,att03 egb_att03
22:05:35   8  ,att04 egb_att04
22:05:35   9  ,att05 egb_att05
22:05:35  10  ,att06 egb_att06
22:05:35  11  ,att07 egb_att07
22:05:35  12  ,att08 egb_att08
22:05:35  13  ,att09 egb_att09
22:05:35  14  ,att10 egb_att10
22:05:35  15  ,att11 egb_att11
22:05:35  16  ,att12 egb_att12
22:05:35  17  ,att13 egb_att13
22:05:35  18  ,att14 egb_att14
22:05:35  19  ,att15 egb_att15
22:05:35  20  ,att16 egb_att16
22:05:35  21  ,att17 egb_att17
22:05:35  22  ,att18 egb_att18
22:05:35  23  ,att19 egb_att19
22:05:35  24  ,att20 egb_att20
22:05:35  25  ,att21 egb_att21
22:05:35  26  ,att22 egb_att22
22:05:35  27  ,att23 egb_att23
22:05:35  28  ,att24 egb_att24
22:05:35  29  ,att25 egb_att25
22:05:35  30  ,att26 egb_att26
22:05:35  31  ,att27 egb_att27
22:05:35  32  ,att28 egb_att28
22:05:35  33  ,att29 egb_att29
22:05:35  34  ,att30 egb_att30
22:05:35  35  ,att31 egb_att31
22:05:35  36  ,att32 egb_att32
22:05:35  37  ,att33 egb_att33
22:05:35  38  ,att34 egb_att34
22:05:35  39  ,att35 egb_att35
22:05:35  40  ,att36 egb_att36
22:05:35  41  ,att37 egb_att37
22:05:35  42  FROM svm6162
22:05:35  43  /

Table created.

Elapsed: 00:00:00.22
22:05:35 SQL> 
22:05:35 SQL> ANALYZE TABLE egb_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
22:05:35 SQL> 
22:05:35 SQL> -- rpt
22:05:35 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19839

Elapsed: 00:00:00.94
22:05:36 SQL> SELECT COUNT(*)FROM egb_att;

  COUNT(*)
----------
     19839

Elapsed: 00:00:00.00
22:05:36 SQL> 
22:05:36 SQL> --
22:05:36 SQL> -- ejp610.sql
22:05:36 SQL> --
22:05:36 SQL> 
22:05:36 SQL> -- Creates views and tables for backtesting a forex SVM strategy
22:05:36 SQL> 
22:05:36 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.34
22:05:37 SQL> 
22:05:37 SQL> -- I created di5min here:
22:05:37 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
22:05:37 SQL> 
22:05:37 SQL> CREATE OR REPLACE VIEW svm6102 AS
22:05:37   2  SELECT
22:05:37   3  pair
22:05:37   4  ,ydate
22:05:37   5  ,prdate
22:05:37   6  ,rownum rnum -- acts as t in my time-series
22:05:37   7  ,clse
22:05:37   8  -- Derive a bunch of attributes from clse, the latest price:
22:05:37   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
22:05:37  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
22:05:37  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
22:05:37  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
22:05:37  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
22:05:37  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
22:05:37  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
22:05:37  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
22:05:37  17  --
22:05:37  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
22:05:37  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
22:05:37  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
22:05:37  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
22:05:37  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
22:05:37  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
22:05:37  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
22:05:37  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
22:05:37  26  --
22:05:37  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
22:05:37  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
22:05:37  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
22:05:37  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
22:05:37  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
22:05:37  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
22:05:37  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
22:05:37  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
22:05:37  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
22:05:37  36  FROM di5min WHERE pair LIKE'%ejp%'
22:05:37  37  AND ydate > sysdate - 95
22:05:37  38  ORDER BY ydate
22:05:37  39  /

View created.

Elapsed: 00:00:00.04
22:05:37 SQL> 
22:05:37 SQL> -- rpt
22:05:37 SQL> 
22:05:37 SQL> SELECT
22:05:37   2  pair
22:05:37   3  ,COUNT(pair)
22:05:37   4  ,MIN(clse),MAX(clse)
22:05:37   5  ,MIN(avg6),MAX(avg6)
22:05:37   6  ,MIN(ydate),MAX(ydate)
22:05:37   7  FROM svm6102
22:05:37   8  GROUP BY pair
22:05:37   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ejp_usd       19836 107.643765	115.63485 107.776148 115.509678 2010-09-26 22:10:01 2010-12-30 21:55:00

Elapsed: 00:00:00.86
22:05:38 SQL> 
22:05:38 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
22:05:38 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.22
22:05:38 SQL> CREATE TABLE svm6122 COMPRESS AS
22:05:38   2  SELECT
22:05:38   3  pair
22:05:38   4  ,ydate
22:05:38   5  ,prdate
22:05:38   6  ,clse
22:05:38   7  -- g6 is important. I want to predict g6:
22:05:38   8  ,ld6 - clse g6
22:05:38   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
22:05:38  10  -- I want more attributes from the ones I derived above:
22:05:38  11  -- clse relation to moving-min
22:05:38  12  ,clse-min4  cm4
22:05:38  13  ,clse-min6  cm6
22:05:38  14  ,clse-min8  cm8
22:05:38  15  ,clse-min10 cm10
22:05:38  16  ,clse-min12 cm12
22:05:38  17  ,clse-min14 cm14
22:05:38  18  ,clse-min16 cm16
22:05:38  19  ,clse-min18 cm18
22:05:38  20  -- clse relation to moving-avg
22:05:38  21  ,clse-avg4  ca4
22:05:38  22  ,clse-avg6  ca6
22:05:38  23  ,clse-avg8  ca8
22:05:38  24  ,clse-avg10 ca10
22:05:38  25  ,clse-avg12 ca12
22:05:38  26  ,clse-avg14 ca14
22:05:38  27  ,clse-avg16 ca16
22:05:38  28  ,clse-avg18 ca18
22:05:38  29  -- clse relation to moving-max
22:05:38  30  ,clse-max4  cx4
22:05:38  31  ,clse-max6  cx6
22:05:38  32  ,clse-max8  cx8
22:05:38  33  ,clse-max10 cx10
22:05:38  34  ,clse-max12 cx12
22:05:38  35  ,clse-max14 cx14
22:05:38  36  ,clse-max16 cx16
22:05:38  37  ,clse-max18 cx18
22:05:38  38  -- Derive more attributes.
22:05:38  39  -- I want to use CORR() here to help SVM see the shape of the series.
22:05:38  40  -- But COVAR_POP is more stable:
22:05:38  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
22:05:38  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
22:05:38  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
22:05:38  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
22:05:38  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
22:05:38  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
22:05:38  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
22:05:38  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
22:05:38  49  -- Derive date related attributes:
22:05:38  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:05:38  51  ,0+TO_CHAR(ydate,'D')d
22:05:38  52  ,0+TO_CHAR(ydate,'W')w
22:05:38  53  -- mpm stands for minutes-past-midnight:
22:05:38  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:05:38  55  -- mph stands for minutes-past-hour:
22:05:38  56  ,0+TO_CHAR(ydate,'MI')mph
22:05:38  57  FROM svm6102
22:05:38  58  ORDER BY ydate
22:05:38  59  /

Table created.

Elapsed: 00:00:02.09
22:05:40 SQL> 
22:05:40 SQL> -- rpt
22:05:40 SQL> 
22:05:40 SQL> SELECT
22:05:40   2  pair
22:05:40   3  ,COUNT(pair)
22:05:40   4  ,MIN(clse),MAX(clse)
22:05:40   5  ,MIN(ydate),MAX(ydate)
22:05:40   6  FROM svm6122
22:05:40   7  GROUP BY pair
22:05:40   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ejp_usd       19836 107.643765	115.63485 2010-09-26 22:10:01 2010-12-30 21:55:00

Elapsed: 00:00:00.04
22:05:40 SQL> 
22:05:40 SQL> -- Prepare for derivation of NTILE based params:
22:05:40 SQL> 
22:05:40 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.35
22:05:40 SQL> CREATE TABLE svm6142 COMPRESS AS
22:05:40   2  SELECT
22:05:40   3  pair
22:05:40   4  ,ydate
22:05:40   5  ,prdate
22:05:40   6  ,clse
22:05:40   7  ,g6
22:05:40   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
22:05:40   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
22:05:40  10  ,CASE WHEN trend IS NULL THEN 1
22:05:40  11  	    WHEN trend =0      THEN 1
22:05:40  12  	    ELSE trend END trend
22:05:40  13  ,cm4
22:05:40  14  ,cm6
22:05:40  15  ,cm8
22:05:40  16  ,cm10
22:05:40  17  ,cm12
22:05:40  18  ,cm14
22:05:40  19  ,cm16
22:05:40  20  ,cm18
22:05:40  21  --
22:05:40  22  ,ca4
22:05:40  23  ,ca6
22:05:40  24  ,ca8
22:05:40  25  ,ca10
22:05:40  26  ,ca12
22:05:40  27  ,ca14
22:05:40  28  ,ca16
22:05:40  29  ,ca18
22:05:40  30  --
22:05:40  31  ,cx4
22:05:40  32  ,cx6
22:05:40  33  ,cx8
22:05:40  34  ,cx10
22:05:40  35  ,cx12
22:05:40  36  ,cx14
22:05:40  37  ,cx16
22:05:40  38  ,cx18
22:05:40  39  --
22:05:40  40  ,crr4
22:05:40  41  ,crr6
22:05:40  42  ,crr8
22:05:40  43  ,crr10
22:05:40  44  ,crr12
22:05:40  45  ,crr14
22:05:40  46  ,crr16
22:05:40  47  ,crr18
22:05:40  48  --
22:05:40  49  ,hh
22:05:40  50  ,d
22:05:40  51  ,w
22:05:40  52  ,mpm
22:05:40  53  ,mph
22:05:40  54  FROM svm6122
22:05:40  55  ORDER BY ydate
22:05:40  56  /

Table created.

Elapsed: 00:00:00.38
22:05:41 SQL> 
22:05:41 SQL> -- rpt
22:05:41 SQL> 
22:05:41 SQL> SELECT
22:05:41   2  pair
22:05:41   3  ,trend
22:05:41   4  ,gatt
22:05:41   5  ,COUNT(pair)
22:05:41   6  ,AVG(g6)
22:05:41   7  FROM svm6142
22:05:41   8  GROUP BY pair,trend,gatt
22:05:41   9  ORDER BY pair,trend,gatt
22:05:41  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      4946 -.32106418
ejp_usd 	-1 up	      5064  .26899477
ejp_usd 	-1		17
ejp_usd 	 1 nup	      5045 -.28916247
ejp_usd 	 1 up	      4709 .280025594
ejp_usd 	 1		55

6 rows selected.

Elapsed: 00:00:00.06
22:05:41 SQL> 
22:05:41 SQL> 
22:05:41 SQL> -- Derive NTILE based params:
22:05:41 SQL> 
22:05:41 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.20
22:05:41 SQL> CREATE TABLE svm6162 COMPRESS AS
22:05:41   2  SELECT
22:05:41   3  pair
22:05:41   4  ,ydate
22:05:41   5  ,prdate
22:05:41   6  ,clse
22:05:41   7  ,g6
22:05:41   8  ,gatt
22:05:41   9  ,gattn
22:05:41  10  ,trend
22:05:41  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
22:05:41  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
22:05:41  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
22:05:41  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
22:05:41  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
22:05:41  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
22:05:41  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
22:05:41  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
22:05:41  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
22:05:41  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
22:05:41  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
22:05:41  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
22:05:41  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
22:05:41  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
22:05:41  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
22:05:41  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
22:05:41  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
22:05:41  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
22:05:41  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
22:05:41  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
22:05:41  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
22:05:41  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
22:05:41  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
22:05:41  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
22:05:41  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
22:05:41  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
22:05:41  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
22:05:41  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
22:05:41  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
22:05:41  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
22:05:41  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
22:05:41  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
22:05:41  43  ,hh  att32
22:05:41  44  ,d   att33
22:05:41  45  ,w   att34
22:05:41  46  ,mpm att35
22:05:41  47  ,mph att36
22:05:41  48  ,trend att37
22:05:41  49  FROM svm6142
22:05:41  50  ORDER BY ydate
22:05:41  51  /

Table created.

Elapsed: 00:00:04.92
22:05:46 SQL> 
22:05:46 SQL> -- rpt
22:05:46 SQL> 
22:05:46 SQL> SELECT
22:05:46   2  pair
22:05:46   3  ,trend
22:05:46   4  ,gatt
22:05:46   5  ,COUNT(pair)
22:05:46   6  ,AVG(g6)
22:05:46   7  FROM svm6162
22:05:46   8  GROUP BY pair,trend,gatt
22:05:46   9  ORDER BY pair,trend,gatt
22:05:46  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      4946 -.32106418
ejp_usd 	-1 up	      5064  .26899477
ejp_usd 	-1		17
ejp_usd 	 1 nup	      5045 -.28916247
ejp_usd 	 1 up	      4709 .280025594
ejp_usd 	 1		55

6 rows selected.

Elapsed: 00:00:00.03
22:05:46 SQL> 
22:05:46 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.18
22:05:46 SQL> CREATE TABLE modsrc COMPRESS AS
22:05:46   2  SELECT
22:05:46   3  pair
22:05:46   4  ,ydate
22:05:46   5  ,prdate
22:05:46   6  ,trend
22:05:46   7  ,g6
22:05:46   8  ,gatt
22:05:46   9  ,gattn
22:05:46  10  FROM svm6162
22:05:46  11  /

Table created.

Elapsed: 00:00:00.08
22:05:46 SQL> 
22:05:46 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
22:05:46 SQL> 
22:05:46 SQL> DROP   TABLE ejp_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
22:05:46 SQL> CREATE TABLE ejp_ms610 COMPRESS AS
22:05:46   2  SELECT
22:05:46   3  ydate
22:05:46   4  ,trend ejp_trend
22:05:46   5  ,g6    ejp_g6
22:05:46   6  ,gatt  ejp_gatt
22:05:46   7  ,gattn ejp_gattn
22:05:46   8  FROM modsrc
22:05:46   9  /

Table created.

Elapsed: 00:00:00.09
22:05:47 SQL> 
22:05:47 SQL> ANALYZE TABLE ejp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
22:05:47 SQL> 
22:05:47 SQL> -- I need a copy of the attributes:
22:05:47 SQL> 
22:05:47 SQL> 
22:05:47 SQL> DROP   TABLE ejp_att;

Table dropped.

Elapsed: 00:00:00.04
22:05:47 SQL> CREATE TABLE ejp_att COMPRESS AS
22:05:47   2  SELECT
22:05:47   3  ydate
22:05:47   4  ,att00 ejp_att00
22:05:47   5  ,att01 ejp_att01
22:05:47   6  ,att02 ejp_att02
22:05:47   7  ,att03 ejp_att03
22:05:47   8  ,att04 ejp_att04
22:05:47   9  ,att05 ejp_att05
22:05:47  10  ,att06 ejp_att06
22:05:47  11  ,att07 ejp_att07
22:05:47  12  ,att08 ejp_att08
22:05:47  13  ,att09 ejp_att09
22:05:47  14  ,att10 ejp_att10
22:05:47  15  ,att11 ejp_att11
22:05:47  16  ,att12 ejp_att12
22:05:47  17  ,att13 ejp_att13
22:05:47  18  ,att14 ejp_att14
22:05:47  19  ,att15 ejp_att15
22:05:47  20  ,att16 ejp_att16
22:05:47  21  ,att17 ejp_att17
22:05:47  22  ,att18 ejp_att18
22:05:47  23  ,att19 ejp_att19
22:05:47  24  ,att20 ejp_att20
22:05:47  25  ,att21 ejp_att21
22:05:47  26  ,att22 ejp_att22
22:05:47  27  ,att23 ejp_att23
22:05:47  28  ,att24 ejp_att24
22:05:47  29  ,att25 ejp_att25
22:05:47  30  ,att26 ejp_att26
22:05:47  31  ,att27 ejp_att27
22:05:47  32  ,att28 ejp_att28
22:05:47  33  ,att29 ejp_att29
22:05:47  34  ,att30 ejp_att30
22:05:47  35  ,att31 ejp_att31
22:05:47  36  ,att32 ejp_att32
22:05:47  37  ,att33 ejp_att33
22:05:47  38  ,att34 ejp_att34
22:05:47  39  ,att35 ejp_att35
22:05:47  40  ,att36 ejp_att36
22:05:47  41  ,att37 ejp_att37
22:05:47  42  FROM svm6162
22:05:47  43  /

Table created.

Elapsed: 00:00:00.16
22:05:47 SQL> 
22:05:47 SQL> ANALYZE TABLE ejp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
22:05:47 SQL> 
22:05:47 SQL> -- rpt
22:05:47 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19836

Elapsed: 00:00:00.81
22:05:48 SQL> SELECT COUNT(*)FROM ejp_att;

  COUNT(*)
----------
     19836

Elapsed: 00:00:00.00
22:05:48 SQL> 
22:05:48 SQL> --
22:05:48 SQL> -- ajp610.sql
22:05:48 SQL> --
22:05:48 SQL> 
22:05:48 SQL> -- Creates views and tables for backtesting a forex SVM strategy
22:05:48 SQL> 
22:05:48 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.43
22:05:49 SQL> 
22:05:49 SQL> -- I created di5min here:
22:05:49 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
22:05:49 SQL> 
22:05:49 SQL> CREATE OR REPLACE VIEW svm6102 AS
22:05:49   2  SELECT
22:05:49   3  pair
22:05:49   4  ,ydate
22:05:49   5  ,prdate
22:05:49   6  ,rownum rnum -- acts as t in my time-series
22:05:49   7  ,clse
22:05:49   8  -- Derive a bunch of attributes from clse, the latest price:
22:05:49   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
22:05:49  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
22:05:49  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
22:05:49  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
22:05:49  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
22:05:49  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
22:05:49  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
22:05:49  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
22:05:49  17  --
22:05:49  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
22:05:49  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
22:05:49  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
22:05:49  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
22:05:49  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
22:05:49  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
22:05:49  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
22:05:49  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
22:05:49  26  --
22:05:49  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
22:05:49  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
22:05:49  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
22:05:49  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
22:05:49  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
22:05:49  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
22:05:49  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
22:05:49  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
22:05:49  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
22:05:49  36  FROM di5min WHERE pair LIKE'%ajp%'
22:05:49  37  AND ydate > sysdate - 95
22:05:49  38  ORDER BY ydate
22:05:49  39  /

View created.

Elapsed: 00:00:00.04
22:05:49 SQL> 
22:05:49 SQL> -- rpt
22:05:49 SQL> 
22:05:49 SQL> SELECT
22:05:49   2  pair
22:05:49   3  ,COUNT(pair)
22:05:49   4  ,MIN(clse),MAX(clse)
22:05:49   5  ,MIN(avg6),MAX(avg6)
22:05:49   6  ,MIN(ydate),MAX(ydate)
22:05:49   7  FROM svm6102
22:05:49   8  GROUP BY pair
22:05:49   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ajp_usd       19833  78.249976 83.6669853 78.5106193  83.546306 2010-09-26 22:10:01 2010-12-30 21:55:00

Elapsed: 00:00:00.80
22:05:49 SQL> 
22:05:49 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
22:05:49 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.28
22:05:50 SQL> CREATE TABLE svm6122 COMPRESS AS
22:05:50   2  SELECT
22:05:50   3  pair
22:05:50   4  ,ydate
22:05:50   5  ,prdate
22:05:50   6  ,clse
22:05:50   7  -- g6 is important. I want to predict g6:
22:05:50   8  ,ld6 - clse g6
22:05:50   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
22:05:50  10  -- I want more attributes from the ones I derived above:
22:05:50  11  -- clse relation to moving-min
22:05:50  12  ,clse-min4  cm4
22:05:50  13  ,clse-min6  cm6
22:05:50  14  ,clse-min8  cm8
22:05:50  15  ,clse-min10 cm10
22:05:50  16  ,clse-min12 cm12
22:05:50  17  ,clse-min14 cm14
22:05:50  18  ,clse-min16 cm16
22:05:50  19  ,clse-min18 cm18
22:05:50  20  -- clse relation to moving-avg
22:05:50  21  ,clse-avg4  ca4
22:05:50  22  ,clse-avg6  ca6
22:05:50  23  ,clse-avg8  ca8
22:05:50  24  ,clse-avg10 ca10
22:05:50  25  ,clse-avg12 ca12
22:05:50  26  ,clse-avg14 ca14
22:05:50  27  ,clse-avg16 ca16
22:05:50  28  ,clse-avg18 ca18
22:05:50  29  -- clse relation to moving-max
22:05:50  30  ,clse-max4  cx4
22:05:50  31  ,clse-max6  cx6
22:05:50  32  ,clse-max8  cx8
22:05:50  33  ,clse-max10 cx10
22:05:50  34  ,clse-max12 cx12
22:05:50  35  ,clse-max14 cx14
22:05:50  36  ,clse-max16 cx16
22:05:50  37  ,clse-max18 cx18
22:05:50  38  -- Derive more attributes.
22:05:50  39  -- I want to use CORR() here to help SVM see the shape of the series.
22:05:50  40  -- But COVAR_POP is more stable:
22:05:50  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
22:05:50  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
22:05:50  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
22:05:50  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
22:05:50  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
22:05:50  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
22:05:50  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
22:05:50  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
22:05:50  49  -- Derive date related attributes:
22:05:50  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:05:50  51  ,0+TO_CHAR(ydate,'D')d
22:05:50  52  ,0+TO_CHAR(ydate,'W')w
22:05:50  53  -- mpm stands for minutes-past-midnight:
22:05:50  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:05:50  55  -- mph stands for minutes-past-hour:
22:05:50  56  ,0+TO_CHAR(ydate,'MI')mph
22:05:50  57  FROM svm6102
22:05:50  58  ORDER BY ydate
22:05:50  59  /

Table created.

Elapsed: 00:00:02.06
22:05:52 SQL> 
22:05:52 SQL> -- rpt
22:05:52 SQL> 
22:05:52 SQL> SELECT
22:05:52   2  pair
22:05:52   3  ,COUNT(pair)
22:05:52   4  ,MIN(clse),MAX(clse)
22:05:52   5  ,MIN(ydate),MAX(ydate)
22:05:52   6  FROM svm6122
22:05:52   7  GROUP BY pair
22:05:52   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ajp_usd       19833  78.249976 83.6669853 2010-09-26 22:10:01 2010-12-30 21:55:00

Elapsed: 00:00:00.04
22:05:52 SQL> 
22:05:52 SQL> -- Prepare for derivation of NTILE based params:
22:05:52 SQL> 
22:05:52 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.22
22:05:52 SQL> CREATE TABLE svm6142 COMPRESS AS
22:05:52   2  SELECT
22:05:52   3  pair
22:05:52   4  ,ydate
22:05:52   5  ,prdate
22:05:52   6  ,clse
22:05:52   7  ,g6
22:05:52   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
22:05:52   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
22:05:52  10  ,CASE WHEN trend IS NULL THEN 1
22:05:52  11  	    WHEN trend =0      THEN 1
22:05:52  12  	    ELSE trend END trend
22:05:52  13  ,cm4
22:05:52  14  ,cm6
22:05:52  15  ,cm8
22:05:52  16  ,cm10
22:05:52  17  ,cm12
22:05:52  18  ,cm14
22:05:52  19  ,cm16
22:05:52  20  ,cm18
22:05:52  21  --
22:05:52  22  ,ca4
22:05:52  23  ,ca6
22:05:52  24  ,ca8
22:05:52  25  ,ca10
22:05:52  26  ,ca12
22:05:52  27  ,ca14
22:05:52  28  ,ca16
22:05:52  29  ,ca18
22:05:52  30  --
22:05:52  31  ,cx4
22:05:52  32  ,cx6
22:05:52  33  ,cx8
22:05:52  34  ,cx10
22:05:52  35  ,cx12
22:05:52  36  ,cx14
22:05:52  37  ,cx16
22:05:52  38  ,cx18
22:05:52  39  --
22:05:52  40  ,crr4
22:05:52  41  ,crr6
22:05:52  42  ,crr8
22:05:52  43  ,crr10
22:05:52  44  ,crr12
22:05:52  45  ,crr14
22:05:52  46  ,crr16
22:05:52  47  ,crr18
22:05:52  48  --
22:05:52  49  ,hh
22:05:52  50  ,d
22:05:52  51  ,w
22:05:52  52  ,mpm
22:05:52  53  ,mph
22:05:52  54  FROM svm6122
22:05:52  55  ORDER BY ydate
22:05:52  56  /

Table created.

Elapsed: 00:00:00.37
22:05:52 SQL> 
22:05:52 SQL> -- rpt
22:05:52 SQL> 
22:05:52 SQL> SELECT
22:05:52   2  pair
22:05:52   3  ,trend
22:05:52   4  ,gatt
22:05:52   5  ,COUNT(pair)
22:05:52   6  ,AVG(g6)
22:05:52   7  FROM svm6142
22:05:52   8  GROUP BY pair,trend,gatt
22:05:52   9  ORDER BY pair,trend,gatt
22:05:52  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ajp_usd 	-1 nup	      4216 -.22647359
ajp_usd 	-1 up	      5287 .218094637
ajp_usd 	-1		21
ajp_usd 	 1 nup	      5298 -.20162799
ajp_usd 	 1 up	      4960 .204369085
ajp_usd 	 1		51

6 rows selected.

Elapsed: 00:00:00.04
22:05:53 SQL> 
22:05:53 SQL> 
22:05:53 SQL> -- Derive NTILE based params:
22:05:53 SQL> 
22:05:53 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.14
22:05:53 SQL> CREATE TABLE svm6162 COMPRESS AS
22:05:53   2  SELECT
22:05:53   3  pair
22:05:53   4  ,ydate
22:05:53   5  ,prdate
22:05:53   6  ,clse
22:05:53   7  ,g6
22:05:53   8  ,gatt
22:05:53   9  ,gattn
22:05:53  10  ,trend
22:05:53  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
22:05:53  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
22:05:53  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
22:05:53  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
22:05:53  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
22:05:53  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
22:05:53  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
22:05:53  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
22:05:53  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
22:05:53  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
22:05:53  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
22:05:53  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
22:05:53  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
22:05:53  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
22:05:53  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
22:05:53  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
22:05:53  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
22:05:53  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
22:05:53  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
22:05:53  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
22:05:53  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
22:05:53  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
22:05:53  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
22:05:53  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
22:05:53  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
22:05:53  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
22:05:53  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
22:05:53  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
22:05:53  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
22:05:53  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
22:05:53  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
22:05:53  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
22:05:53  43  ,hh  att32
22:05:53  44  ,d   att33
22:05:53  45  ,w   att34
22:05:53  46  ,mpm att35
22:05:53  47  ,mph att36
22:05:53  48  ,trend att37
22:05:53  49  FROM svm6142
22:05:53  50  ORDER BY ydate
22:05:53  51  /

Table created.

Elapsed: 00:00:04.91
22:05:58 SQL> 
22:05:58 SQL> -- rpt
22:05:58 SQL> 
22:05:58 SQL> SELECT
22:05:58   2  pair
22:05:58   3  ,trend
22:05:58   4  ,gatt
22:05:58   5  ,COUNT(pair)
22:05:58   6  ,AVG(g6)
22:05:58   7  FROM svm6162
22:05:58   8  GROUP BY pair,trend,gatt
22:05:58   9  ORDER BY pair,trend,gatt
22:05:58  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ajp_usd 	-1 nup	      4216 -.22647359
ajp_usd 	-1 up	      5287 .218094637
ajp_usd 	-1		21
ajp_usd 	 1 nup	      5298 -.20162799
ajp_usd 	 1 up	      4960 .204369085
ajp_usd 	 1		51

6 rows selected.

Elapsed: 00:00:00.04
22:05:58 SQL> 
22:05:58 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.15
22:05:58 SQL> CREATE TABLE modsrc COMPRESS AS
22:05:58   2  SELECT
22:05:58   3  pair
22:05:58   4  ,ydate
22:05:58   5  ,prdate
22:05:58   6  ,trend
22:05:58   7  ,g6
22:05:58   8  ,gatt
22:05:58   9  ,gattn
22:05:58  10  FROM svm6162
22:05:58  11  /

Table created.

Elapsed: 00:00:00.08
22:05:58 SQL> 
22:05:58 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
22:05:58 SQL> 
22:05:58 SQL> DROP   TABLE ajp_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
22:05:58 SQL> CREATE TABLE ajp_ms610 COMPRESS AS
22:05:58   2  SELECT
22:05:58   3  ydate
22:05:58   4  ,trend ajp_trend
22:05:58   5  ,g6    ajp_g6
22:05:58   6  ,gatt  ajp_gatt
22:05:58   7  ,gattn ajp_gattn
22:05:58   8  FROM modsrc
22:05:58   9  /

Table created.

Elapsed: 00:00:00.06
22:05:58 SQL> 
22:05:58 SQL> ANALYZE TABLE ajp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
22:05:58 SQL> 
22:05:58 SQL> -- I need a copy of the attributes:
22:05:58 SQL> 
22:05:58 SQL> 
22:05:58 SQL> DROP   TABLE ajp_att;

Table dropped.

Elapsed: 00:00:00.04
22:05:58 SQL> CREATE TABLE ajp_att COMPRESS AS
22:05:58   2  SELECT
22:05:58   3  ydate
22:05:58   4  ,att00 ajp_att00
22:05:58   5  ,att01 ajp_att01
22:05:58   6  ,att02 ajp_att02
22:05:58   7  ,att03 ajp_att03
22:05:58   8  ,att04 ajp_att04
22:05:58   9  ,att05 ajp_att05
22:05:58  10  ,att06 ajp_att06
22:05:58  11  ,att07 ajp_att07
22:05:58  12  ,att08 ajp_att08
22:05:58  13  ,att09 ajp_att09
22:05:58  14  ,att10 ajp_att10
22:05:58  15  ,att11 ajp_att11
22:05:58  16  ,att12 ajp_att12
22:05:58  17  ,att13 ajp_att13
22:05:58  18  ,att14 ajp_att14
22:05:58  19  ,att15 ajp_att15
22:05:58  20  ,att16 ajp_att16
22:05:58  21  ,att17 ajp_att17
22:05:58  22  ,att18 ajp_att18
22:05:58  23  ,att19 ajp_att19
22:05:58  24  ,att20 ajp_att20
22:05:58  25  ,att21 ajp_att21
22:05:58  26  ,att22 ajp_att22
22:05:58  27  ,att23 ajp_att23
22:05:58  28  ,att24 ajp_att24
22:05:58  29  ,att25 ajp_att25
22:05:58  30  ,att26 ajp_att26
22:05:58  31  ,att27 ajp_att27
22:05:58  32  ,att28 ajp_att28
22:05:58  33  ,att29 ajp_att29
22:05:58  34  ,att30 ajp_att30
22:05:58  35  ,att31 ajp_att31
22:05:58  36  ,att32 ajp_att32
22:05:58  37  ,att33 ajp_att33
22:05:58  38  ,att34 ajp_att34
22:05:58  39  ,att35 ajp_att35
22:05:58  40  ,att36 ajp_att36
22:05:58  41  ,att37 ajp_att37
22:05:58  42  FROM svm6162
22:05:58  43  /

Table created.

Elapsed: 00:00:00.17
22:05:59 SQL> 
22:05:59 SQL> ANALYZE TABLE ajp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.44
22:05:59 SQL> 
22:05:59 SQL> -- rpt
22:05:59 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19833

Elapsed: 00:00:00.77
22:06:00 SQL> SELECT COUNT(*)FROM ajp_att;

  COUNT(*)
----------
     19833

Elapsed: 00:00:00.00
22:06:00 SQL> 
22:06:00 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
