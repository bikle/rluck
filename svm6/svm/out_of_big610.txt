
SQL*Plus: Release 11.2.0.1.0 Production on Tue Jan 4 11:52:02 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

11:52:02 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
11:52:02 SQL> 11:52:02 SQL> --
11:52:02 SQL> -- eur610.sql
11:52:02 SQL> --
11:52:02 SQL> 
11:52:02 SQL> -- Creates views and tables for backtesting a forex SVM strategy
11:52:02 SQL> 
11:52:02 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.03
11:52:02 SQL> 
11:52:02 SQL> -- I created di5min here:
11:52:02 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
11:52:02 SQL> 
11:52:02 SQL> CREATE OR REPLACE VIEW svm6102 AS
11:52:02   2  SELECT
11:52:02   3  pair
11:52:02   4  ,ydate
11:52:02   5  ,prdate
11:52:02   6  ,rownum rnum -- acts as t in my time-series
11:52:02   7  ,clse
11:52:02   8  -- Derive a bunch of attributes from clse, the latest price:
11:52:02   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
11:52:02  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
11:52:02  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
11:52:02  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
11:52:02  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
11:52:02  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
11:52:02  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
11:52:02  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
11:52:02  17  --
11:52:02  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
11:52:02  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
11:52:02  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
11:52:02  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
11:52:02  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
11:52:02  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
11:52:02  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
11:52:02  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
11:52:02  26  --
11:52:02  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
11:52:02  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
11:52:02  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
11:52:02  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
11:52:02  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
11:52:02  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
11:52:02  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
11:52:02  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
11:52:02  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
11:52:02  36  FROM di5min WHERE pair LIKE'%eur%'
11:52:02  37  AND ydate > sysdate - 95
11:52:02  38  ORDER BY ydate
11:52:02  39  /

View created.

Elapsed: 00:00:00.06
11:52:02 SQL> 
11:52:02 SQL> -- rpt
11:52:02 SQL> 
11:52:02 SQL> SELECT
11:52:02   2  pair
11:52:02   3  ,COUNT(pair)
11:52:02   4  ,MIN(clse),MAX(clse)
11:52:02   5  ,MIN(avg6),MAX(avg6)
11:52:02   6  ,MIN(ydate),MAX(ydate)
11:52:02   7  FROM svm6102
11:52:02   8  GROUP BY pair
11:52:02   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_usd       19257    1.29735	   1.4273 1.29875103 1.42436233 2010-10-01 11:55:01 2011-01-04 11:50:00

Elapsed: 00:00:00.89
11:52:03 SQL> 
11:52:03 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
11:52:03 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.07
11:52:03 SQL> CREATE TABLE svm6122 COMPRESS AS
11:52:03   2  SELECT
11:52:03   3  pair
11:52:03   4  ,ydate
11:52:03   5  ,prdate
11:52:03   6  ,clse
11:52:03   7  -- g6 is important. I want to predict g6:
11:52:03   8  ,ld6 - clse g6
11:52:03   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
11:52:03  10  -- I want more attributes from the ones I derived above:
11:52:03  11  -- clse relation to moving-min
11:52:03  12  ,clse-min4  cm4
11:52:03  13  ,clse-min6  cm6
11:52:03  14  ,clse-min8  cm8
11:52:03  15  ,clse-min10 cm10
11:52:03  16  ,clse-min12 cm12
11:52:03  17  ,clse-min14 cm14
11:52:03  18  ,clse-min16 cm16
11:52:03  19  ,clse-min18 cm18
11:52:03  20  -- clse relation to moving-avg
11:52:03  21  ,clse-avg4  ca4
11:52:03  22  ,clse-avg6  ca6
11:52:03  23  ,clse-avg8  ca8
11:52:03  24  ,clse-avg10 ca10
11:52:03  25  ,clse-avg12 ca12
11:52:03  26  ,clse-avg14 ca14
11:52:03  27  ,clse-avg16 ca16
11:52:03  28  ,clse-avg18 ca18
11:52:03  29  -- clse relation to moving-max
11:52:03  30  ,clse-max4  cx4
11:52:03  31  ,clse-max6  cx6
11:52:03  32  ,clse-max8  cx8
11:52:03  33  ,clse-max10 cx10
11:52:03  34  ,clse-max12 cx12
11:52:03  35  ,clse-max14 cx14
11:52:03  36  ,clse-max16 cx16
11:52:03  37  ,clse-max18 cx18
11:52:03  38  -- Derive more attributes.
11:52:03  39  -- I want to use CORR() here to help SVM see the shape of the series.
11:52:03  40  -- But COVAR_POP is more stable:
11:52:03  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
11:52:03  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
11:52:03  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
11:52:03  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
11:52:03  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
11:52:03  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
11:52:03  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
11:52:03  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
11:52:03  49  -- Derive date related attributes:
11:52:03  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
11:52:03  51  ,0+TO_CHAR(ydate,'D')d
11:52:03  52  ,0+TO_CHAR(ydate,'W')w
11:52:03  53  -- mpm stands for minutes-past-midnight:
11:52:03  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
11:52:03  55  -- mph stands for minutes-past-hour:
11:52:03  56  ,0+TO_CHAR(ydate,'MI')mph
11:52:03  57  FROM svm6102
11:52:03  58  ORDER BY ydate
11:52:03  59  /

Table created.

Elapsed: 00:00:02.34
11:52:05 SQL> 
11:52:05 SQL> -- rpt
11:52:05 SQL> 
11:52:05 SQL> SELECT
11:52:05   2  pair
11:52:05   3  ,COUNT(pair)
11:52:05   4  ,MIN(clse),MAX(clse)
11:52:05   5  ,MIN(ydate),MAX(ydate)
11:52:05   6  FROM svm6122
11:52:05   7  GROUP BY pair
11:52:05   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_usd       19257    1.29735	   1.4273 2010-10-01 11:55:01 2011-01-04 11:50:00

Elapsed: 00:00:00.04
11:52:05 SQL> 
11:52:05 SQL> -- Prepare for derivation of NTILE based params:
11:52:05 SQL> 
11:52:05 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.04
11:52:05 SQL> CREATE TABLE svm6142 COMPRESS AS
11:52:05   2  SELECT
11:52:05   3  pair
11:52:05   4  ,ydate
11:52:05   5  ,prdate
11:52:05   6  ,clse
11:52:05   7  ,g6
11:52:05   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
11:52:05   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
11:52:05  10  ,CASE WHEN trend IS NULL THEN 1
11:52:05  11  	    WHEN trend =0      THEN 1
11:52:05  12  	    ELSE trend END trend
11:52:05  13  ,cm4
11:52:05  14  ,cm6
11:52:05  15  ,cm8
11:52:05  16  ,cm10
11:52:05  17  ,cm12
11:52:05  18  ,cm14
11:52:05  19  ,cm16
11:52:05  20  ,cm18
11:52:05  21  --
11:52:05  22  ,ca4
11:52:05  23  ,ca6
11:52:05  24  ,ca8
11:52:05  25  ,ca10
11:52:05  26  ,ca12
11:52:05  27  ,ca14
11:52:05  28  ,ca16
11:52:05  29  ,ca18
11:52:05  30  --
11:52:05  31  ,cx4
11:52:05  32  ,cx6
11:52:05  33  ,cx8
11:52:05  34  ,cx10
11:52:05  35  ,cx12
11:52:05  36  ,cx14
11:52:05  37  ,cx16
11:52:05  38  ,cx18
11:52:05  39  --
11:52:05  40  ,crr4
11:52:05  41  ,crr6
11:52:05  42  ,crr8
11:52:05  43  ,crr10
11:52:05  44  ,crr12
11:52:05  45  ,crr14
11:52:05  46  ,crr16
11:52:05  47  ,crr18
11:52:05  48  --
11:52:05  49  ,hh
11:52:05  50  ,d
11:52:05  51  ,w
11:52:05  52  ,mpm
11:52:05  53  ,mph
11:52:05  54  FROM svm6122
11:52:05  55  ORDER BY ydate
11:52:05  56  /

Table created.

Elapsed: 00:00:00.38
11:52:06 SQL> 
11:52:06 SQL> -- rpt
11:52:06 SQL> 
11:52:06 SQL> SELECT
11:52:06   2  pair
11:52:06   3  ,trend
11:52:06   4  ,gatt
11:52:06   5  ,COUNT(pair)
11:52:06   6  ,AVG(g6)
11:52:06   7  FROM svm6142
11:52:06   8  GROUP BY pair,trend,gatt
11:52:06   9  ORDER BY pair,trend,gatt
11:52:06  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6065 -.00312577
eur_usd 	-1 up	      3543 .004455952
eur_usd 	-1		17
eur_usd 	 1 nup	      5828 -.00317252
eur_usd 	 1 up	      3749 .005048606
eur_usd 	 1		55

6 rows selected.

Elapsed: 00:00:00.03
11:52:06 SQL> 
11:52:06 SQL> 
11:52:06 SQL> -- Derive NTILE based params:
11:52:06 SQL> 
11:52:06 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.05
11:52:06 SQL> CREATE TABLE svm6162 COMPRESS AS
11:52:06   2  SELECT
11:52:06   3  pair
11:52:06   4  ,ydate
11:52:06   5  ,prdate
11:52:06   6  ,clse
11:52:06   7  ,g6
11:52:06   8  ,gatt
11:52:06   9  ,gattn
11:52:06  10  ,trend
11:52:06  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
11:52:06  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
11:52:06  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
11:52:06  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
11:52:06  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
11:52:06  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
11:52:06  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
11:52:06  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
11:52:06  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
11:52:06  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
11:52:06  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
11:52:06  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
11:52:06  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
11:52:06  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
11:52:06  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
11:52:06  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
11:52:06  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
11:52:06  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
11:52:06  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
11:52:06  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
11:52:06  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
11:52:06  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
11:52:06  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
11:52:06  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
11:52:06  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
11:52:06  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
11:52:06  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
11:52:06  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
11:52:06  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
11:52:06  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
11:52:06  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
11:52:06  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
11:52:06  43  ,hh  att32
11:52:06  44  ,d   att33
11:52:06  45  ,w   att34
11:52:06  46  ,mpm att35
11:52:06  47  ,mph att36
11:52:06  48  ,trend att37
11:52:06  49  FROM svm6142
11:52:06  50  ORDER BY ydate
11:52:06  51  /

Table created.

Elapsed: 00:00:04.73
11:52:10 SQL> 
11:52:10 SQL> -- rpt
11:52:10 SQL> 
11:52:10 SQL> SELECT
11:52:10   2  pair
11:52:10   3  ,trend
11:52:10   4  ,gatt
11:52:10   5  ,COUNT(pair)
11:52:10   6  ,AVG(g6)
11:52:10   7  FROM svm6162
11:52:10   8  GROUP BY pair,trend,gatt
11:52:10   9  ORDER BY pair,trend,gatt
11:52:10  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6065 -.00312577
eur_usd 	-1 up	      3543 .004455952
eur_usd 	-1		17
eur_usd 	 1 nup	      5828 -.00317252
eur_usd 	 1 up	      3749 .005048606
eur_usd 	 1		55

6 rows selected.

Elapsed: 00:00:00.03
11:52:10 SQL> 
11:52:10 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.03
11:52:10 SQL> CREATE TABLE modsrc COMPRESS AS
11:52:10   2  SELECT
11:52:10   3  pair
11:52:10   4  ,ydate
11:52:10   5  ,prdate
11:52:10   6  ,trend
11:52:10   7  ,g6
11:52:10   8  ,gatt
11:52:10   9  ,gattn
11:52:10  10  FROM svm6162
11:52:10  11  /

Table created.

Elapsed: 00:00:00.09
11:52:11 SQL> 
11:52:11 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
11:52:11 SQL> 
11:52:11 SQL> DROP   TABLE eur_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
11:52:11 SQL> CREATE TABLE eur_ms610 COMPRESS AS
11:52:11   2  SELECT
11:52:11   3  ydate
11:52:11   4  ,trend eur_trend
11:52:11   5  ,g6    eur_g6
11:52:11   6  ,gatt  eur_gatt
11:52:11   7  ,gattn eur_gattn
11:52:11   8  FROM modsrc
11:52:11   9  /

Table created.

Elapsed: 00:00:00.07
11:52:11 SQL> 
11:52:11 SQL> ANALYZE TABLE eur_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
11:52:11 SQL> 
11:52:11 SQL> -- I need a copy of the attributes:
11:52:11 SQL> 
11:52:11 SQL> 
11:52:11 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.04
11:52:11 SQL> CREATE TABLE eur_att COMPRESS AS
11:52:11   2  SELECT
11:52:11   3  ydate
11:52:11   4  ,att00 eur_att00
11:52:11   5  ,att01 eur_att01
11:52:11   6  ,att02 eur_att02
11:52:11   7  ,att03 eur_att03
11:52:11   8  ,att04 eur_att04
11:52:11   9  ,att05 eur_att05
11:52:11  10  ,att06 eur_att06
11:52:11  11  ,att07 eur_att07
11:52:11  12  ,att08 eur_att08
11:52:11  13  ,att09 eur_att09
11:52:11  14  ,att10 eur_att10
11:52:11  15  ,att11 eur_att11
11:52:11  16  ,att12 eur_att12
11:52:11  17  ,att13 eur_att13
11:52:11  18  ,att14 eur_att14
11:52:11  19  ,att15 eur_att15
11:52:11  20  ,att16 eur_att16
11:52:11  21  ,att17 eur_att17
11:52:11  22  ,att18 eur_att18
11:52:11  23  ,att19 eur_att19
11:52:11  24  ,att20 eur_att20
11:52:11  25  ,att21 eur_att21
11:52:11  26  ,att22 eur_att22
11:52:11  27  ,att23 eur_att23
11:52:11  28  ,att24 eur_att24
11:52:11  29  ,att25 eur_att25
11:52:11  30  ,att26 eur_att26
11:52:11  31  ,att27 eur_att27
11:52:11  32  ,att28 eur_att28
11:52:11  33  ,att29 eur_att29
11:52:11  34  ,att30 eur_att30
11:52:11  35  ,att31 eur_att31
11:52:11  36  ,att32 eur_att32
11:52:11  37  ,att33 eur_att33
11:52:11  38  ,att34 eur_att34
11:52:11  39  ,att35 eur_att35
11:52:11  40  ,att36 eur_att36
11:52:11  41  ,att37 eur_att37
11:52:11  42  FROM svm6162
11:52:11  43  /

Table created.

Elapsed: 00:00:00.17
11:52:11 SQL> 
11:52:11 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.43
11:52:12 SQL> 
11:52:12 SQL> -- rpt
11:52:12 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19257

Elapsed: 00:00:00.87
11:52:12 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     19257

Elapsed: 00:00:00.00
11:52:12 SQL> 
11:52:12 SQL> --
11:52:12 SQL> -- aud610.sql
11:52:12 SQL> --
11:52:12 SQL> 
11:52:12 SQL> -- Creates views and tables for backtesting a forex SVM strategy
11:52:12 SQL> 
11:52:12 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.43
11:52:13 SQL> 
11:52:13 SQL> -- I created di5min here:
11:52:13 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
11:52:13 SQL> 
11:52:13 SQL> CREATE OR REPLACE VIEW svm6102 AS
11:52:13   2  SELECT
11:52:13   3  pair
11:52:13   4  ,ydate
11:52:13   5  ,prdate
11:52:13   6  ,rownum rnum -- acts as t in my time-series
11:52:13   7  ,clse
11:52:13   8  -- Derive a bunch of attributes from clse, the latest price:
11:52:13   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
11:52:13  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
11:52:13  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
11:52:13  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
11:52:13  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
11:52:13  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
11:52:13  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
11:52:13  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
11:52:13  17  --
11:52:13  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
11:52:13  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
11:52:13  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
11:52:13  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
11:52:13  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
11:52:13  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
11:52:13  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
11:52:13  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
11:52:13  26  --
11:52:13  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
11:52:13  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
11:52:13  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
11:52:13  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
11:52:13  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
11:52:13  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
11:52:13  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
11:52:13  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
11:52:13  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
11:52:13  36  FROM di5min WHERE pair LIKE'%aud%'
11:52:13  37  AND ydate > sysdate - 95
11:52:13  38  ORDER BY ydate
11:52:13  39  /

View created.

Elapsed: 00:00:00.05
11:52:13 SQL> 
11:52:13 SQL> -- rpt
11:52:13 SQL> 
11:52:13 SQL> SELECT
11:52:13   2  pair
11:52:13   3  ,COUNT(pair)
11:52:13   4  ,MIN(clse),MAX(clse)
11:52:13   5  ,MIN(avg6),MAX(avg6)
11:52:13   6  ,MIN(ydate),MAX(ydate)
11:52:13   7  FROM svm6102
11:52:13   8  GROUP BY pair
11:52:13   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
aud_usd       19254	.95405	  1.02495 .957141438 1.02284247 2010-10-01 11:55:01 2011-01-04 11:50:00

Elapsed: 00:00:00.86
11:52:14 SQL> 
11:52:14 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
11:52:14 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.21
11:52:14 SQL> CREATE TABLE svm6122 COMPRESS AS
11:52:14   2  SELECT
11:52:14   3  pair
11:52:14   4  ,ydate
11:52:14   5  ,prdate
11:52:14   6  ,clse
11:52:14   7  -- g6 is important. I want to predict g6:
11:52:14   8  ,ld6 - clse g6
11:52:14   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
11:52:14  10  -- I want more attributes from the ones I derived above:
11:52:14  11  -- clse relation to moving-min
11:52:14  12  ,clse-min4  cm4
11:52:14  13  ,clse-min6  cm6
11:52:14  14  ,clse-min8  cm8
11:52:14  15  ,clse-min10 cm10
11:52:14  16  ,clse-min12 cm12
11:52:14  17  ,clse-min14 cm14
11:52:14  18  ,clse-min16 cm16
11:52:14  19  ,clse-min18 cm18
11:52:14  20  -- clse relation to moving-avg
11:52:14  21  ,clse-avg4  ca4
11:52:14  22  ,clse-avg6  ca6
11:52:14  23  ,clse-avg8  ca8
11:52:14  24  ,clse-avg10 ca10
11:52:14  25  ,clse-avg12 ca12
11:52:14  26  ,clse-avg14 ca14
11:52:14  27  ,clse-avg16 ca16
11:52:14  28  ,clse-avg18 ca18
11:52:14  29  -- clse relation to moving-max
11:52:14  30  ,clse-max4  cx4
11:52:14  31  ,clse-max6  cx6
11:52:14  32  ,clse-max8  cx8
11:52:14  33  ,clse-max10 cx10
11:52:14  34  ,clse-max12 cx12
11:52:14  35  ,clse-max14 cx14
11:52:14  36  ,clse-max16 cx16
11:52:14  37  ,clse-max18 cx18
11:52:14  38  -- Derive more attributes.
11:52:14  39  -- I want to use CORR() here to help SVM see the shape of the series.
11:52:14  40  -- But COVAR_POP is more stable:
11:52:14  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
11:52:14  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
11:52:14  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
11:52:14  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
11:52:14  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
11:52:14  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
11:52:14  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
11:52:14  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
11:52:14  49  -- Derive date related attributes:
11:52:14  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
11:52:14  51  ,0+TO_CHAR(ydate,'D')d
11:52:14  52  ,0+TO_CHAR(ydate,'W')w
11:52:14  53  -- mpm stands for minutes-past-midnight:
11:52:14  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
11:52:14  55  -- mph stands for minutes-past-hour:
11:52:14  56  ,0+TO_CHAR(ydate,'MI')mph
11:52:14  57  FROM svm6102
11:52:14  58  ORDER BY ydate
11:52:14  59  /

Table created.

Elapsed: 00:00:02.04
11:52:16 SQL> 
11:52:16 SQL> -- rpt
11:52:16 SQL> 
11:52:16 SQL> SELECT
11:52:16   2  pair
11:52:16   3  ,COUNT(pair)
11:52:16   4  ,MIN(clse),MAX(clse)
11:52:16   5  ,MIN(ydate),MAX(ydate)
11:52:16   6  FROM svm6122
11:52:16   7  GROUP BY pair
11:52:16   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
aud_usd       19254	.95405	  1.02495 2010-10-01 11:55:01 2011-01-04 11:50:00

Elapsed: 00:00:00.04
11:52:16 SQL> 
11:52:16 SQL> -- Prepare for derivation of NTILE based params:
11:52:16 SQL> 
11:52:16 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.22
11:52:16 SQL> CREATE TABLE svm6142 COMPRESS AS
11:52:16   2  SELECT
11:52:16   3  pair
11:52:16   4  ,ydate
11:52:16   5  ,prdate
11:52:16   6  ,clse
11:52:16   7  ,g6
11:52:16   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
11:52:16   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
11:52:16  10  ,CASE WHEN trend IS NULL THEN 1
11:52:16  11  	    WHEN trend =0      THEN 1
11:52:16  12  	    ELSE trend END trend
11:52:16  13  ,cm4
11:52:16  14  ,cm6
11:52:16  15  ,cm8
11:52:16  16  ,cm10
11:52:16  17  ,cm12
11:52:16  18  ,cm14
11:52:16  19  ,cm16
11:52:16  20  ,cm18
11:52:16  21  --
11:52:16  22  ,ca4
11:52:16  23  ,ca6
11:52:16  24  ,ca8
11:52:16  25  ,ca10
11:52:16  26  ,ca12
11:52:16  27  ,ca14
11:52:16  28  ,ca16
11:52:16  29  ,ca18
11:52:16  30  --
11:52:16  31  ,cx4
11:52:16  32  ,cx6
11:52:16  33  ,cx8
11:52:16  34  ,cx10
11:52:16  35  ,cx12
11:52:16  36  ,cx14
11:52:16  37  ,cx16
11:52:16  38  ,cx18
11:52:16  39  --
11:52:16  40  ,crr4
11:52:16  41  ,crr6
11:52:16  42  ,crr8
11:52:16  43  ,crr10
11:52:16  44  ,crr12
11:52:16  45  ,crr14
11:52:16  46  ,crr16
11:52:16  47  ,crr18
11:52:16  48  --
11:52:16  49  ,hh
11:52:16  50  ,d
11:52:16  51  ,w
11:52:16  52  ,mpm
11:52:16  53  ,mph
11:52:16  54  FROM svm6122
11:52:16  55  ORDER BY ydate
11:52:16  56  /

Table created.

Elapsed: 00:00:00.36
11:52:17 SQL> 
11:52:17 SQL> -- rpt
11:52:17 SQL> 
11:52:17 SQL> SELECT
11:52:17   2  pair
11:52:17   3  ,trend
11:52:17   4  ,gatt
11:52:17   5  ,COUNT(pair)
11:52:17   6  ,AVG(g6)
11:52:17   7  FROM svm6142
11:52:17   8  GROUP BY pair,trend,gatt
11:52:17   9  ORDER BY pair,trend,gatt
11:52:17  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5280 -.00220184
aud_usd 	-1 up	      3660 .003763101
aud_usd 	-1		69
aud_usd 	 1 nup	      6649 -.00210901
aud_usd 	 1 up	      3593 .004054752
aud_usd 	 1		 3

6 rows selected.

Elapsed: 00:00:00.04
11:52:17 SQL> 
11:52:17 SQL> 
11:52:17 SQL> -- Derive NTILE based params:
11:52:17 SQL> 
11:52:17 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.12
11:52:17 SQL> CREATE TABLE svm6162 COMPRESS AS
11:52:17   2  SELECT
11:52:17   3  pair
11:52:17   4  ,ydate
11:52:17   5  ,prdate
11:52:17   6  ,clse
11:52:17   7  ,g6
11:52:17   8  ,gatt
11:52:17   9  ,gattn
11:52:17  10  ,trend
11:52:17  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
11:52:17  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
11:52:17  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
11:52:17  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
11:52:17  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
11:52:17  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
11:52:17  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
11:52:17  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
11:52:17  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
11:52:17  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
11:52:17  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
11:52:17  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
11:52:17  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
11:52:17  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
11:52:17  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
11:52:17  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
11:52:17  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
11:52:17  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
11:52:17  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
11:52:17  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
11:52:17  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
11:52:17  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
11:52:17  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
11:52:17  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
11:52:17  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
11:52:17  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
11:52:17  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
11:52:17  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
11:52:17  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
11:52:17  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
11:52:17  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
11:52:17  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
11:52:17  43  ,hh  att32
11:52:17  44  ,d   att33
11:52:17  45  ,w   att34
11:52:17  46  ,mpm att35
11:52:17  47  ,mph att36
11:52:17  48  ,trend att37
11:52:17  49  FROM svm6142
11:52:17  50  ORDER BY ydate
11:52:17  51  /

Table created.

Elapsed: 00:00:04.82
11:52:22 SQL> 
11:52:22 SQL> -- rpt
11:52:22 SQL> 
11:52:22 SQL> SELECT
11:52:22   2  pair
11:52:22   3  ,trend
11:52:22   4  ,gatt
11:52:22   5  ,COUNT(pair)
11:52:22   6  ,AVG(g6)
11:52:22   7  FROM svm6162
11:52:22   8  GROUP BY pair,trend,gatt
11:52:22   9  ORDER BY pair,trend,gatt
11:52:22  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5280 -.00220184
aud_usd 	-1 up	      3660 .003763101
aud_usd 	-1		69
aud_usd 	 1 nup	      6649 -.00210901
aud_usd 	 1 up	      3593 .004054752
aud_usd 	 1		 3

6 rows selected.

Elapsed: 00:00:00.03
11:52:22 SQL> 
11:52:22 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.18
11:52:22 SQL> CREATE TABLE modsrc COMPRESS AS
11:52:22   2  SELECT
11:52:22   3  pair
11:52:22   4  ,ydate
11:52:22   5  ,prdate
11:52:22   6  ,trend
11:52:22   7  ,g6
11:52:22   8  ,gatt
11:52:22   9  ,gattn
11:52:22  10  FROM svm6162
11:52:22  11  /

Table created.

Elapsed: 00:00:00.08
11:52:22 SQL> 
11:52:22 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
11:52:22 SQL> 
11:52:22 SQL> DROP   TABLE aud_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
11:52:22 SQL> CREATE TABLE aud_ms610 COMPRESS AS
11:52:22   2  SELECT
11:52:22   3  ydate
11:52:22   4  ,trend aud_trend
11:52:22   5  ,g6    aud_g6
11:52:22   6  ,gatt  aud_gatt
11:52:22   7  ,gattn aud_gattn
11:52:22   8  FROM modsrc
11:52:22   9  /

Table created.

Elapsed: 00:00:00.07
11:52:22 SQL> 
11:52:22 SQL> ANALYZE TABLE aud_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
11:52:22 SQL> 
11:52:22 SQL> -- I need a copy of the attributes:
11:52:22 SQL> 
11:52:22 SQL> 
11:52:22 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.04
11:52:23 SQL> CREATE TABLE aud_att COMPRESS AS
11:52:23   2  SELECT
11:52:23   3  ydate
11:52:23   4  ,att00 aud_att00
11:52:23   5  ,att01 aud_att01
11:52:23   6  ,att02 aud_att02
11:52:23   7  ,att03 aud_att03
11:52:23   8  ,att04 aud_att04
11:52:23   9  ,att05 aud_att05
11:52:23  10  ,att06 aud_att06
11:52:23  11  ,att07 aud_att07
11:52:23  12  ,att08 aud_att08
11:52:23  13  ,att09 aud_att09
11:52:23  14  ,att10 aud_att10
11:52:23  15  ,att11 aud_att11
11:52:23  16  ,att12 aud_att12
11:52:23  17  ,att13 aud_att13
11:52:23  18  ,att14 aud_att14
11:52:23  19  ,att15 aud_att15
11:52:23  20  ,att16 aud_att16
11:52:23  21  ,att17 aud_att17
11:52:23  22  ,att18 aud_att18
11:52:23  23  ,att19 aud_att19
11:52:23  24  ,att20 aud_att20
11:52:23  25  ,att21 aud_att21
11:52:23  26  ,att22 aud_att22
11:52:23  27  ,att23 aud_att23
11:52:23  28  ,att24 aud_att24
11:52:23  29  ,att25 aud_att25
11:52:23  30  ,att26 aud_att26
11:52:23  31  ,att27 aud_att27
11:52:23  32  ,att28 aud_att28
11:52:23  33  ,att29 aud_att29
11:52:23  34  ,att30 aud_att30
11:52:23  35  ,att31 aud_att31
11:52:23  36  ,att32 aud_att32
11:52:23  37  ,att33 aud_att33
11:52:23  38  ,att34 aud_att34
11:52:23  39  ,att35 aud_att35
11:52:23  40  ,att36 aud_att36
11:52:23  41  ,att37 aud_att37
11:52:23  42  FROM svm6162
11:52:23  43  /

Table created.

Elapsed: 00:00:00.17
11:52:23 SQL> 
11:52:23 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
11:52:23 SQL> 
11:52:23 SQL> -- rpt
11:52:23 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19254

Elapsed: 00:00:00.83
11:52:24 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     19254

Elapsed: 00:00:00.01
11:52:24 SQL> 
11:52:24 SQL> --
11:52:24 SQL> -- gbp610.sql
11:52:24 SQL> --
11:52:24 SQL> 
11:52:24 SQL> -- Creates views and tables for backtesting a forex SVM strategy
11:52:24 SQL> 
11:52:24 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.53
11:52:25 SQL> 
11:52:25 SQL> -- I created di5min here:
11:52:25 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
11:52:25 SQL> 
11:52:25 SQL> CREATE OR REPLACE VIEW svm6102 AS
11:52:25   2  SELECT
11:52:25   3  pair
11:52:25   4  ,ydate
11:52:25   5  ,prdate
11:52:25   6  ,rownum rnum -- acts as t in my time-series
11:52:25   7  ,clse
11:52:25   8  -- Derive a bunch of attributes from clse, the latest price:
11:52:25   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
11:52:25  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
11:52:25  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
11:52:25  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
11:52:25  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
11:52:25  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
11:52:25  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
11:52:25  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
11:52:25  17  --
11:52:25  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
11:52:25  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
11:52:25  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
11:52:25  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
11:52:25  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
11:52:25  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
11:52:25  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
11:52:25  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
11:52:25  26  --
11:52:25  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
11:52:25  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
11:52:25  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
11:52:25  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
11:52:25  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
11:52:25  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
11:52:25  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
11:52:25  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
11:52:25  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
11:52:25  36  FROM di5min WHERE pair LIKE'%gbp%'
11:52:25  37  AND ydate > sysdate - 95
11:52:25  38  ORDER BY ydate
11:52:25  39  /

View created.

Elapsed: 00:00:00.08
11:52:25 SQL> 
11:52:25 SQL> -- rpt
11:52:25 SQL> 
11:52:25 SQL> SELECT
11:52:25   2  pair
11:52:25   3  ,COUNT(pair)
11:52:25   4  ,MIN(clse),MAX(clse)
11:52:25   5  ,MIN(avg6),MAX(avg6)
11:52:25   6  ,MIN(ydate),MAX(ydate)
11:52:25   7  FROM svm6102
11:52:25   8  GROUP BY pair
11:52:25   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
gbp_usd       19256   1.535325	   1.6295 1.53696747 1.62716986 2010-10-01 11:55:01 2011-01-04 11:50:00

Elapsed: 00:00:00.87
11:52:25 SQL> 
11:52:25 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
11:52:25 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.24
11:52:26 SQL> CREATE TABLE svm6122 COMPRESS AS
11:52:26   2  SELECT
11:52:26   3  pair
11:52:26   4  ,ydate
11:52:26   5  ,prdate
11:52:26   6  ,clse
11:52:26   7  -- g6 is important. I want to predict g6:
11:52:26   8  ,ld6 - clse g6
11:52:26   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
11:52:26  10  -- I want more attributes from the ones I derived above:
11:52:26  11  -- clse relation to moving-min
11:52:26  12  ,clse-min4  cm4
11:52:26  13  ,clse-min6  cm6
11:52:26  14  ,clse-min8  cm8
11:52:26  15  ,clse-min10 cm10
11:52:26  16  ,clse-min12 cm12
11:52:26  17  ,clse-min14 cm14
11:52:26  18  ,clse-min16 cm16
11:52:26  19  ,clse-min18 cm18
11:52:26  20  -- clse relation to moving-avg
11:52:26  21  ,clse-avg4  ca4
11:52:26  22  ,clse-avg6  ca6
11:52:26  23  ,clse-avg8  ca8
11:52:26  24  ,clse-avg10 ca10
11:52:26  25  ,clse-avg12 ca12
11:52:26  26  ,clse-avg14 ca14
11:52:26  27  ,clse-avg16 ca16
11:52:26  28  ,clse-avg18 ca18
11:52:26  29  -- clse relation to moving-max
11:52:26  30  ,clse-max4  cx4
11:52:26  31  ,clse-max6  cx6
11:52:26  32  ,clse-max8  cx8
11:52:26  33  ,clse-max10 cx10
11:52:26  34  ,clse-max12 cx12
11:52:26  35  ,clse-max14 cx14
11:52:26  36  ,clse-max16 cx16
11:52:26  37  ,clse-max18 cx18
11:52:26  38  -- Derive more attributes.
11:52:26  39  -- I want to use CORR() here to help SVM see the shape of the series.
11:52:26  40  -- But COVAR_POP is more stable:
11:52:26  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
11:52:26  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
11:52:26  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
11:52:26  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
11:52:26  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
11:52:26  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
11:52:26  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
11:52:26  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
11:52:26  49  -- Derive date related attributes:
11:52:26  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
11:52:26  51  ,0+TO_CHAR(ydate,'D')d
11:52:26  52  ,0+TO_CHAR(ydate,'W')w
11:52:26  53  -- mpm stands for minutes-past-midnight:
11:52:26  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
11:52:26  55  -- mph stands for minutes-past-hour:
11:52:26  56  ,0+TO_CHAR(ydate,'MI')mph
11:52:26  57  FROM svm6102
11:52:26  58  ORDER BY ydate
11:52:26  59  /

Table created.

Elapsed: 00:00:02.05
11:52:28 SQL> 
11:52:28 SQL> -- rpt
11:52:28 SQL> 
11:52:28 SQL> SELECT
11:52:28   2  pair
11:52:28   3  ,COUNT(pair)
11:52:28   4  ,MIN(clse),MAX(clse)
11:52:28   5  ,MIN(ydate),MAX(ydate)
11:52:28   6  FROM svm6122
11:52:28   7  GROUP BY pair
11:52:28   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
gbp_usd       19256   1.535325	   1.6295 2010-10-01 11:55:01 2011-01-04 11:50:00

Elapsed: 00:00:00.03
11:52:28 SQL> 
11:52:28 SQL> -- Prepare for derivation of NTILE based params:
11:52:28 SQL> 
11:52:28 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.16
11:52:28 SQL> CREATE TABLE svm6142 COMPRESS AS
11:52:28   2  SELECT
11:52:28   3  pair
11:52:28   4  ,ydate
11:52:28   5  ,prdate
11:52:28   6  ,clse
11:52:28   7  ,g6
11:52:28   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
11:52:28   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
11:52:28  10  ,CASE WHEN trend IS NULL THEN 1
11:52:28  11  	    WHEN trend =0      THEN 1
11:52:28  12  	    ELSE trend END trend
11:52:28  13  ,cm4
11:52:28  14  ,cm6
11:52:28  15  ,cm8
11:52:28  16  ,cm10
11:52:28  17  ,cm12
11:52:28  18  ,cm14
11:52:28  19  ,cm16
11:52:28  20  ,cm18
11:52:28  21  --
11:52:28  22  ,ca4
11:52:28  23  ,ca6
11:52:28  24  ,ca8
11:52:28  25  ,ca10
11:52:28  26  ,ca12
11:52:28  27  ,ca14
11:52:28  28  ,ca16
11:52:28  29  ,ca18
11:52:28  30  --
11:52:28  31  ,cx4
11:52:28  32  ,cx6
11:52:28  33  ,cx8
11:52:28  34  ,cx10
11:52:28  35  ,cx12
11:52:28  36  ,cx14
11:52:28  37  ,cx16
11:52:28  38  ,cx18
11:52:28  39  --
11:52:28  40  ,crr4
11:52:28  41  ,crr6
11:52:28  42  ,crr8
11:52:28  43  ,crr10
11:52:28  44  ,crr12
11:52:28  45  ,crr14
11:52:28  46  ,crr16
11:52:28  47  ,crr18
11:52:28  48  --
11:52:28  49  ,hh
11:52:28  50  ,d
11:52:28  51  ,w
11:52:28  52  ,mpm
11:52:28  53  ,mph
11:52:28  54  FROM svm6122
11:52:28  55  ORDER BY ydate
11:52:28  56  /

Table created.

Elapsed: 00:00:00.34
11:52:28 SQL> 
11:52:28 SQL> -- rpt
11:52:28 SQL> 
11:52:28 SQL> SELECT
11:52:28   2  pair
11:52:28   3  ,trend
11:52:28   4  ,gatt
11:52:28   5  ,COUNT(pair)
11:52:28   6  ,AVG(g6)
11:52:28   7  FROM svm6142
11:52:28   8  GROUP BY pair,trend,gatt
11:52:28   9  ORDER BY pair,trend,gatt
11:52:28  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6259  -.0026523
gbp_usd 	-1 up	      3451 .004317629
gbp_usd 	-1		23
gbp_usd 	 1 nup	      6052 -.00259669
gbp_usd 	 1 up	      3422 .004513775
gbp_usd 	 1		49

6 rows selected.

Elapsed: 00:00:00.04
11:52:28 SQL> 
11:52:28 SQL> 
11:52:28 SQL> -- Derive NTILE based params:
11:52:28 SQL> 
11:52:28 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.18
11:52:28 SQL> CREATE TABLE svm6162 COMPRESS AS
11:52:28   2  SELECT
11:52:28   3  pair
11:52:28   4  ,ydate
11:52:28   5  ,prdate
11:52:28   6  ,clse
11:52:28   7  ,g6
11:52:28   8  ,gatt
11:52:28   9  ,gattn
11:52:28  10  ,trend
11:52:28  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
11:52:28  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
11:52:28  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
11:52:28  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
11:52:28  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
11:52:28  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
11:52:28  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
11:52:28  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
11:52:28  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
11:52:28  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
11:52:28  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
11:52:28  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
11:52:28  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
11:52:28  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
11:52:28  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
11:52:28  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
11:52:28  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
11:52:28  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
11:52:28  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
11:52:28  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
11:52:28  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
11:52:28  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
11:52:28  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
11:52:28  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
11:52:28  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
11:52:28  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
11:52:28  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
11:52:28  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
11:52:28  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
11:52:28  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
11:52:28  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
11:52:28  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
11:52:28  43  ,hh  att32
11:52:28  44  ,d   att33
11:52:28  45  ,w   att34
11:52:28  46  ,mpm att35
11:52:28  47  ,mph att36
11:52:28  48  ,trend att37
11:52:28  49  FROM svm6142
11:52:28  50  ORDER BY ydate
11:52:28  51  /

Table created.

Elapsed: 00:00:04.72
11:52:33 SQL> 
11:52:33 SQL> -- rpt
11:52:33 SQL> 
11:52:33 SQL> SELECT
11:52:33   2  pair
11:52:33   3  ,trend
11:52:33   4  ,gatt
11:52:33   5  ,COUNT(pair)
11:52:33   6  ,AVG(g6)
11:52:33   7  FROM svm6162
11:52:33   8  GROUP BY pair,trend,gatt
11:52:33   9  ORDER BY pair,trend,gatt
11:52:33  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6259  -.0026523
gbp_usd 	-1 up	      3451 .004317629
gbp_usd 	-1		23
gbp_usd 	 1 nup	      6052 -.00259669
gbp_usd 	 1 up	      3422 .004513775
gbp_usd 	 1		49

6 rows selected.

Elapsed: 00:00:00.03
11:52:33 SQL> 
11:52:33 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.17
11:52:33 SQL> CREATE TABLE modsrc COMPRESS AS
11:52:33   2  SELECT
11:52:33   3  pair
11:52:33   4  ,ydate
11:52:33   5  ,prdate
11:52:33   6  ,trend
11:52:33   7  ,g6
11:52:33   8  ,gatt
11:52:33   9  ,gattn
11:52:33  10  FROM svm6162
11:52:33  11  /

Table created.

Elapsed: 00:00:00.08
11:52:33 SQL> 
11:52:33 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
11:52:34 SQL> 
11:52:34 SQL> DROP   TABLE gbp_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
11:52:34 SQL> CREATE TABLE gbp_ms610 COMPRESS AS
11:52:34   2  SELECT
11:52:34   3  ydate
11:52:34   4  ,trend gbp_trend
11:52:34   5  ,g6    gbp_g6
11:52:34   6  ,gatt  gbp_gatt
11:52:34   7  ,gattn gbp_gattn
11:52:34   8  FROM modsrc
11:52:34   9  /

Table created.

Elapsed: 00:00:00.06
11:52:34 SQL> 
11:52:34 SQL> ANALYZE TABLE gbp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.14
11:52:34 SQL> 
11:52:34 SQL> -- I need a copy of the attributes:
11:52:34 SQL> 
11:52:34 SQL> 
11:52:34 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.05
11:52:34 SQL> CREATE TABLE gbp_att COMPRESS AS
11:52:34   2  SELECT
11:52:34   3  ydate
11:52:34   4  ,att00 gbp_att00
11:52:34   5  ,att01 gbp_att01
11:52:34   6  ,att02 gbp_att02
11:52:34   7  ,att03 gbp_att03
11:52:34   8  ,att04 gbp_att04
11:52:34   9  ,att05 gbp_att05
11:52:34  10  ,att06 gbp_att06
11:52:34  11  ,att07 gbp_att07
11:52:34  12  ,att08 gbp_att08
11:52:34  13  ,att09 gbp_att09
11:52:34  14  ,att10 gbp_att10
11:52:34  15  ,att11 gbp_att11
11:52:34  16  ,att12 gbp_att12
11:52:34  17  ,att13 gbp_att13
11:52:34  18  ,att14 gbp_att14
11:52:34  19  ,att15 gbp_att15
11:52:34  20  ,att16 gbp_att16
11:52:34  21  ,att17 gbp_att17
11:52:34  22  ,att18 gbp_att18
11:52:34  23  ,att19 gbp_att19
11:52:34  24  ,att20 gbp_att20
11:52:34  25  ,att21 gbp_att21
11:52:34  26  ,att22 gbp_att22
11:52:34  27  ,att23 gbp_att23
11:52:34  28  ,att24 gbp_att24
11:52:34  29  ,att25 gbp_att25
11:52:34  30  ,att26 gbp_att26
11:52:34  31  ,att27 gbp_att27
11:52:34  32  ,att28 gbp_att28
11:52:34  33  ,att29 gbp_att29
11:52:34  34  ,att30 gbp_att30
11:52:34  35  ,att31 gbp_att31
11:52:34  36  ,att32 gbp_att32
11:52:34  37  ,att33 gbp_att33
11:52:34  38  ,att34 gbp_att34
11:52:34  39  ,att35 gbp_att35
11:52:34  40  ,att36 gbp_att36
11:52:34  41  ,att37 gbp_att37
11:52:34  42  FROM svm6162
11:52:34  43  /

Table created.

Elapsed: 00:00:00.19
11:52:34 SQL> 
11:52:34 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.43
11:52:35 SQL> 
11:52:35 SQL> -- rpt
11:52:35 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19256

Elapsed: 00:00:00.83
11:52:35 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     19256

Elapsed: 00:00:00.00
11:52:35 SQL> 
11:52:35 SQL> --
11:52:35 SQL> -- jpy610.sql
11:52:35 SQL> --
11:52:35 SQL> 
11:52:35 SQL> -- Creates views and tables for backtesting a forex SVM strategy
11:52:35 SQL> 
11:52:35 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.38
11:52:36 SQL> 
11:52:36 SQL> -- I created di5min here:
11:52:36 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
11:52:36 SQL> 
11:52:36 SQL> CREATE OR REPLACE VIEW svm6102 AS
11:52:36   2  SELECT
11:52:36   3  pair
11:52:36   4  ,ydate
11:52:36   5  ,prdate
11:52:36   6  ,rownum rnum -- acts as t in my time-series
11:52:36   7  ,clse
11:52:36   8  -- Derive a bunch of attributes from clse, the latest price:
11:52:36   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
11:52:36  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
11:52:36  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
11:52:36  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
11:52:36  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
11:52:36  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
11:52:36  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
11:52:36  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
11:52:36  17  --
11:52:36  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
11:52:36  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
11:52:36  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
11:52:36  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
11:52:36  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
11:52:36  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
11:52:36  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
11:52:36  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
11:52:36  26  --
11:52:36  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
11:52:36  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
11:52:36  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
11:52:36  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
11:52:36  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
11:52:36  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
11:52:36  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
11:52:36  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
11:52:36  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
11:52:36  36  FROM di5min WHERE pair LIKE'%jpy%'
11:52:36  37  AND ydate > sysdate - 95
11:52:36  38  ORDER BY ydate
11:52:36  39  /

View created.

Elapsed: 00:00:00.05
11:52:36 SQL> 
11:52:36 SQL> -- rpt
11:52:36 SQL> 
11:52:36 SQL> SELECT
11:52:36   2  pair
11:52:36   3  ,COUNT(pair)
11:52:36   4  ,MIN(clse),MAX(clse)
11:52:36   5  ,MIN(avg6),MAX(avg6)
11:52:36   6  ,MIN(ydate),MAX(ydate)
11:52:36   7  FROM svm6102
11:52:36   8  GROUP BY pair
11:52:36   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_jpy       19254	 80.25	   84.485 80.3595205 84.3105479 2010-10-01 11:55:01 2011-01-04 11:50:00

Elapsed: 00:00:00.91
11:52:37 SQL> 
11:52:37 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
11:52:37 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.19
11:52:37 SQL> CREATE TABLE svm6122 COMPRESS AS
11:52:37   2  SELECT
11:52:37   3  pair
11:52:37   4  ,ydate
11:52:37   5  ,prdate
11:52:37   6  ,clse
11:52:37   7  -- g6 is important. I want to predict g6:
11:52:37   8  ,ld6 - clse g6
11:52:37   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
11:52:37  10  -- I want more attributes from the ones I derived above:
11:52:37  11  -- clse relation to moving-min
11:52:37  12  ,clse-min4  cm4
11:52:37  13  ,clse-min6  cm6
11:52:37  14  ,clse-min8  cm8
11:52:37  15  ,clse-min10 cm10
11:52:37  16  ,clse-min12 cm12
11:52:37  17  ,clse-min14 cm14
11:52:37  18  ,clse-min16 cm16
11:52:37  19  ,clse-min18 cm18
11:52:37  20  -- clse relation to moving-avg
11:52:37  21  ,clse-avg4  ca4
11:52:37  22  ,clse-avg6  ca6
11:52:37  23  ,clse-avg8  ca8
11:52:37  24  ,clse-avg10 ca10
11:52:37  25  ,clse-avg12 ca12
11:52:37  26  ,clse-avg14 ca14
11:52:37  27  ,clse-avg16 ca16
11:52:37  28  ,clse-avg18 ca18
11:52:37  29  -- clse relation to moving-max
11:52:37  30  ,clse-max4  cx4
11:52:37  31  ,clse-max6  cx6
11:52:37  32  ,clse-max8  cx8
11:52:37  33  ,clse-max10 cx10
11:52:37  34  ,clse-max12 cx12
11:52:37  35  ,clse-max14 cx14
11:52:37  36  ,clse-max16 cx16
11:52:37  37  ,clse-max18 cx18
11:52:37  38  -- Derive more attributes.
11:52:37  39  -- I want to use CORR() here to help SVM see the shape of the series.
11:52:37  40  -- But COVAR_POP is more stable:
11:52:37  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
11:52:37  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
11:52:37  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
11:52:37  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
11:52:37  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
11:52:37  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
11:52:37  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
11:52:37  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
11:52:37  49  -- Derive date related attributes:
11:52:37  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
11:52:37  51  ,0+TO_CHAR(ydate,'D')d
11:52:37  52  ,0+TO_CHAR(ydate,'W')w
11:52:37  53  -- mpm stands for minutes-past-midnight:
11:52:37  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
11:52:37  55  -- mph stands for minutes-past-hour:
11:52:37  56  ,0+TO_CHAR(ydate,'MI')mph
11:52:37  57  FROM svm6102
11:52:37  58  ORDER BY ydate
11:52:37  59  /

Table created.

Elapsed: 00:00:02.14
11:52:39 SQL> 
11:52:39 SQL> -- rpt
11:52:39 SQL> 
11:52:39 SQL> SELECT
11:52:39   2  pair
11:52:39   3  ,COUNT(pair)
11:52:39   4  ,MIN(clse),MAX(clse)
11:52:39   5  ,MIN(ydate),MAX(ydate)
11:52:39   6  FROM svm6122
11:52:39   7  GROUP BY pair
11:52:39   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_jpy       19254	 80.25	   84.485 2010-10-01 11:55:01 2011-01-04 11:50:00

Elapsed: 00:00:00.03
11:52:39 SQL> 
11:52:39 SQL> -- Prepare for derivation of NTILE based params:
11:52:39 SQL> 
11:52:39 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.19
11:52:39 SQL> CREATE TABLE svm6142 COMPRESS AS
11:52:39   2  SELECT
11:52:39   3  pair
11:52:39   4  ,ydate
11:52:39   5  ,prdate
11:52:39   6  ,clse
11:52:39   7  ,g6
11:52:39   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
11:52:39   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
11:52:39  10  ,CASE WHEN trend IS NULL THEN 1
11:52:39  11  	    WHEN trend =0      THEN 1
11:52:39  12  	    ELSE trend END trend
11:52:39  13  ,cm4
11:52:39  14  ,cm6
11:52:39  15  ,cm8
11:52:39  16  ,cm10
11:52:39  17  ,cm12
11:52:39  18  ,cm14
11:52:39  19  ,cm16
11:52:39  20  ,cm18
11:52:39  21  --
11:52:39  22  ,ca4
11:52:39  23  ,ca6
11:52:39  24  ,ca8
11:52:39  25  ,ca10
11:52:39  26  ,ca12
11:52:39  27  ,ca14
11:52:39  28  ,ca16
11:52:39  29  ,ca18
11:52:39  30  --
11:52:39  31  ,cx4
11:52:39  32  ,cx6
11:52:39  33  ,cx8
11:52:39  34  ,cx10
11:52:39  35  ,cx12
11:52:39  36  ,cx14
11:52:39  37  ,cx16
11:52:39  38  ,cx18
11:52:39  39  --
11:52:39  40  ,crr4
11:52:39  41  ,crr6
11:52:39  42  ,crr8
11:52:39  43  ,crr10
11:52:39  44  ,crr12
11:52:39  45  ,crr14
11:52:39  46  ,crr16
11:52:39  47  ,crr18
11:52:39  48  --
11:52:39  49  ,hh
11:52:39  50  ,d
11:52:39  51  ,w
11:52:39  52  ,mpm
11:52:39  53  ,mph
11:52:39  54  FROM svm6122
11:52:39  55  ORDER BY ydate
11:52:39  56  /

Table created.

Elapsed: 00:00:00.34
11:52:40 SQL> 
11:52:40 SQL> -- rpt
11:52:40 SQL> 
11:52:40 SQL> SELECT
11:52:40   2  pair
11:52:40   3  ,trend
11:52:40   4  ,gatt
11:52:40   5  ,COUNT(pair)
11:52:40   6  ,AVG(g6)
11:52:40   7  FROM svm6142
11:52:40   8  GROUP BY pair,trend,gatt
11:52:40   9  ORDER BY pair,trend,gatt
11:52:40  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5082 -.16657592
usd_jpy 	-1 up	      4769 .164878678
usd_jpy 	-1		 5
usd_jpy 	 1 nup	      4915 -.15611109
usd_jpy 	 1 up	      4416 .168916934
usd_jpy 	 1		67

6 rows selected.

Elapsed: 00:00:00.04
11:52:40 SQL> 
11:52:40 SQL> 
11:52:40 SQL> -- Derive NTILE based params:
11:52:40 SQL> 
11:52:40 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.18
11:52:40 SQL> CREATE TABLE svm6162 COMPRESS AS
11:52:40   2  SELECT
11:52:40   3  pair
11:52:40   4  ,ydate
11:52:40   5  ,prdate
11:52:40   6  ,clse
11:52:40   7  ,g6
11:52:40   8  ,gatt
11:52:40   9  ,gattn
11:52:40  10  ,trend
11:52:40  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
11:52:40  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
11:52:40  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
11:52:40  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
11:52:40  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
11:52:40  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
11:52:40  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
11:52:40  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
11:52:40  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
11:52:40  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
11:52:40  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
11:52:40  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
11:52:40  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
11:52:40  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
11:52:40  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
11:52:40  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
11:52:40  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
11:52:40  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
11:52:40  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
11:52:40  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
11:52:40  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
11:52:40  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
11:52:40  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
11:52:40  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
11:52:40  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
11:52:40  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
11:52:40  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
11:52:40  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
11:52:40  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
11:52:40  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
11:52:40  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
11:52:40  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
11:52:40  43  ,hh  att32
11:52:40  44  ,d   att33
11:52:40  45  ,w   att34
11:52:40  46  ,mpm att35
11:52:40  47  ,mph att36
11:52:40  48  ,trend att37
11:52:40  49  FROM svm6142
11:52:40  50  ORDER BY ydate
11:52:40  51  /

Table created.

Elapsed: 00:00:04.69
11:52:45 SQL> 
11:52:45 SQL> -- rpt
11:52:45 SQL> 
11:52:45 SQL> SELECT
11:52:45   2  pair
11:52:45   3  ,trend
11:52:45   4  ,gatt
11:52:45   5  ,COUNT(pair)
11:52:45   6  ,AVG(g6)
11:52:45   7  FROM svm6162
11:52:45   8  GROUP BY pair,trend,gatt
11:52:45   9  ORDER BY pair,trend,gatt
11:52:45  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5082 -.16657592
usd_jpy 	-1 up	      4769 .164878678
usd_jpy 	-1		 5
usd_jpy 	 1 nup	      4915 -.15611109
usd_jpy 	 1 up	      4416 .168916934
usd_jpy 	 1		67

6 rows selected.

Elapsed: 00:00:00.03
11:52:45 SQL> 
11:52:45 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
11:52:45 SQL> CREATE TABLE modsrc COMPRESS AS
11:52:45   2  SELECT
11:52:45   3  pair
11:52:45   4  ,ydate
11:52:45   5  ,prdate
11:52:45   6  ,trend
11:52:45   7  ,g6
11:52:45   8  ,gatt
11:52:45   9  ,gattn
11:52:45  10  FROM svm6162
11:52:45  11  /

Table created.

Elapsed: 00:00:00.08
11:52:45 SQL> 
11:52:45 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
11:52:45 SQL> 
11:52:45 SQL> DROP   TABLE jpy_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
11:52:45 SQL> CREATE TABLE jpy_ms610 COMPRESS AS
11:52:45   2  SELECT
11:52:45   3  ydate
11:52:45   4  ,trend jpy_trend
11:52:45   5  ,g6    jpy_g6
11:52:45   6  ,gatt  jpy_gatt
11:52:45   7  ,gattn jpy_gattn
11:52:45   8  FROM modsrc
11:52:45   9  /

Table created.

Elapsed: 00:00:00.06
11:52:45 SQL> 
11:52:45 SQL> ANALYZE TABLE jpy_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.14
11:52:45 SQL> 
11:52:45 SQL> -- I need a copy of the attributes:
11:52:45 SQL> 
11:52:45 SQL> 
11:52:45 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.04
11:52:45 SQL> CREATE TABLE jpy_att COMPRESS AS
11:52:45   2  SELECT
11:52:45   3  ydate
11:52:45   4  ,att00 jpy_att00
11:52:45   5  ,att01 jpy_att01
11:52:45   6  ,att02 jpy_att02
11:52:45   7  ,att03 jpy_att03
11:52:45   8  ,att04 jpy_att04
11:52:45   9  ,att05 jpy_att05
11:52:45  10  ,att06 jpy_att06
11:52:45  11  ,att07 jpy_att07
11:52:45  12  ,att08 jpy_att08
11:52:45  13  ,att09 jpy_att09
11:52:45  14  ,att10 jpy_att10
11:52:45  15  ,att11 jpy_att11
11:52:45  16  ,att12 jpy_att12
11:52:45  17  ,att13 jpy_att13
11:52:45  18  ,att14 jpy_att14
11:52:45  19  ,att15 jpy_att15
11:52:45  20  ,att16 jpy_att16
11:52:45  21  ,att17 jpy_att17
11:52:45  22  ,att18 jpy_att18
11:52:45  23  ,att19 jpy_att19
11:52:45  24  ,att20 jpy_att20
11:52:45  25  ,att21 jpy_att21
11:52:45  26  ,att22 jpy_att22
11:52:45  27  ,att23 jpy_att23
11:52:45  28  ,att24 jpy_att24
11:52:45  29  ,att25 jpy_att25
11:52:45  30  ,att26 jpy_att26
11:52:45  31  ,att27 jpy_att27
11:52:45  32  ,att28 jpy_att28
11:52:45  33  ,att29 jpy_att29
11:52:45  34  ,att30 jpy_att30
11:52:45  35  ,att31 jpy_att31
11:52:45  36  ,att32 jpy_att32
11:52:45  37  ,att33 jpy_att33
11:52:45  38  ,att34 jpy_att34
11:52:45  39  ,att35 jpy_att35
11:52:45  40  ,att36 jpy_att36
11:52:45  41  ,att37 jpy_att37
11:52:45  42  FROM svm6162
11:52:45  43  /

Table created.

Elapsed: 00:00:00.16
11:52:45 SQL> 
11:52:45 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
11:52:46 SQL> 
11:52:46 SQL> -- rpt
11:52:46 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19254

Elapsed: 00:00:00.89
11:52:47 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     19254

Elapsed: 00:00:00.01
11:52:47 SQL> 
11:52:47 SQL> --
11:52:47 SQL> -- cad610.sql
11:52:47 SQL> --
11:52:47 SQL> 
11:52:47 SQL> -- Creates views and tables for backtesting a forex SVM strategy
11:52:47 SQL> 
11:52:47 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.37
11:52:47 SQL> 
11:52:47 SQL> -- I created di5min here:
11:52:47 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
11:52:47 SQL> 
11:52:47 SQL> CREATE OR REPLACE VIEW svm6102 AS
11:52:47   2  SELECT
11:52:47   3  pair
11:52:47   4  ,ydate
11:52:47   5  ,prdate
11:52:47   6  ,rownum rnum -- acts as t in my time-series
11:52:47   7  ,clse
11:52:47   8  -- Derive a bunch of attributes from clse, the latest price:
11:52:47   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
11:52:47  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
11:52:47  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
11:52:47  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
11:52:47  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
11:52:47  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
11:52:47  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
11:52:47  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
11:52:47  17  --
11:52:47  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
11:52:47  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
11:52:47  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
11:52:47  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
11:52:47  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
11:52:47  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
11:52:47  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
11:52:47  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
11:52:47  26  --
11:52:47  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
11:52:47  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
11:52:47  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
11:52:47  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
11:52:47  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
11:52:47  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
11:52:47  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
11:52:47  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
11:52:47  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
11:52:47  36  FROM di5min WHERE pair LIKE'%cad%'
11:52:47  37  AND ydate > sysdate - 95
11:52:47  38  ORDER BY ydate
11:52:47  39  /

View created.

Elapsed: 00:00:00.04
11:52:47 SQL> 
11:52:47 SQL> -- rpt
11:52:47 SQL> 
11:52:47 SQL> SELECT
11:52:47   2  pair
11:52:47   3  ,COUNT(pair)
11:52:47   4  ,MIN(clse),MAX(clse)
11:52:47   5  ,MIN(avg6),MAX(avg6)
11:52:47   6  ,MIN(ydate),MAX(ydate)
11:52:47   7  FROM svm6102
11:52:47   8  GROUP BY pair
11:52:47   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_cad       19254    .988925	   1.0355 .990603938 1.03282877 2010-10-01 11:55:01 2011-01-04 11:50:00

Elapsed: 00:00:00.84
11:52:48 SQL> 
11:52:48 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
11:52:48 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.17
11:52:48 SQL> CREATE TABLE svm6122 COMPRESS AS
11:52:48   2  SELECT
11:52:48   3  pair
11:52:48   4  ,ydate
11:52:48   5  ,prdate
11:52:48   6  ,clse
11:52:48   7  -- g6 is important. I want to predict g6:
11:52:48   8  ,ld6 - clse g6
11:52:48   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
11:52:48  10  -- I want more attributes from the ones I derived above:
11:52:48  11  -- clse relation to moving-min
11:52:48  12  ,clse-min4  cm4
11:52:48  13  ,clse-min6  cm6
11:52:48  14  ,clse-min8  cm8
11:52:48  15  ,clse-min10 cm10
11:52:48  16  ,clse-min12 cm12
11:52:48  17  ,clse-min14 cm14
11:52:48  18  ,clse-min16 cm16
11:52:48  19  ,clse-min18 cm18
11:52:48  20  -- clse relation to moving-avg
11:52:48  21  ,clse-avg4  ca4
11:52:48  22  ,clse-avg6  ca6
11:52:48  23  ,clse-avg8  ca8
11:52:48  24  ,clse-avg10 ca10
11:52:48  25  ,clse-avg12 ca12
11:52:48  26  ,clse-avg14 ca14
11:52:48  27  ,clse-avg16 ca16
11:52:48  28  ,clse-avg18 ca18
11:52:48  29  -- clse relation to moving-max
11:52:48  30  ,clse-max4  cx4
11:52:48  31  ,clse-max6  cx6
11:52:48  32  ,clse-max8  cx8
11:52:48  33  ,clse-max10 cx10
11:52:48  34  ,clse-max12 cx12
11:52:48  35  ,clse-max14 cx14
11:52:48  36  ,clse-max16 cx16
11:52:48  37  ,clse-max18 cx18
11:52:48  38  -- Derive more attributes.
11:52:48  39  -- I want to use CORR() here to help SVM see the shape of the series.
11:52:48  40  -- But COVAR_POP is more stable:
11:52:48  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
11:52:48  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
11:52:48  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
11:52:48  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
11:52:48  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
11:52:48  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
11:52:48  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
11:52:48  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
11:52:48  49  -- Derive date related attributes:
11:52:48  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
11:52:48  51  ,0+TO_CHAR(ydate,'D')d
11:52:48  52  ,0+TO_CHAR(ydate,'W')w
11:52:48  53  -- mpm stands for minutes-past-midnight:
11:52:48  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
11:52:48  55  -- mph stands for minutes-past-hour:
11:52:48  56  ,0+TO_CHAR(ydate,'MI')mph
11:52:48  57  FROM svm6102
11:52:48  58  ORDER BY ydate
11:52:48  59  /

Table created.

Elapsed: 00:00:02.01
11:52:50 SQL> 
11:52:50 SQL> -- rpt
11:52:50 SQL> 
11:52:50 SQL> SELECT
11:52:50   2  pair
11:52:50   3  ,COUNT(pair)
11:52:50   4  ,MIN(clse),MAX(clse)
11:52:50   5  ,MIN(ydate),MAX(ydate)
11:52:50   6  FROM svm6122
11:52:50   7  GROUP BY pair
11:52:50   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_cad       19254    .988925	   1.0355 2010-10-01 11:55:01 2011-01-04 11:50:00

Elapsed: 00:00:00.04
11:52:50 SQL> 
11:52:50 SQL> -- Prepare for derivation of NTILE based params:
11:52:50 SQL> 
11:52:50 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.20
11:52:51 SQL> CREATE TABLE svm6142 COMPRESS AS
11:52:51   2  SELECT
11:52:51   3  pair
11:52:51   4  ,ydate
11:52:51   5  ,prdate
11:52:51   6  ,clse
11:52:51   7  ,g6
11:52:51   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
11:52:51   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
11:52:51  10  ,CASE WHEN trend IS NULL THEN 1
11:52:51  11  	    WHEN trend =0      THEN 1
11:52:51  12  	    ELSE trend END trend
11:52:51  13  ,cm4
11:52:51  14  ,cm6
11:52:51  15  ,cm8
11:52:51  16  ,cm10
11:52:51  17  ,cm12
11:52:51  18  ,cm14
11:52:51  19  ,cm16
11:52:51  20  ,cm18
11:52:51  21  --
11:52:51  22  ,ca4
11:52:51  23  ,ca6
11:52:51  24  ,ca8
11:52:51  25  ,ca10
11:52:51  26  ,ca12
11:52:51  27  ,ca14
11:52:51  28  ,ca16
11:52:51  29  ,ca18
11:52:51  30  --
11:52:51  31  ,cx4
11:52:51  32  ,cx6
11:52:51  33  ,cx8
11:52:51  34  ,cx10
11:52:51  35  ,cx12
11:52:51  36  ,cx14
11:52:51  37  ,cx16
11:52:51  38  ,cx18
11:52:51  39  --
11:52:51  40  ,crr4
11:52:51  41  ,crr6
11:52:51  42  ,crr8
11:52:51  43  ,crr10
11:52:51  44  ,crr12
11:52:51  45  ,crr14
11:52:51  46  ,crr16
11:52:51  47  ,crr18
11:52:51  48  --
11:52:51  49  ,hh
11:52:51  50  ,d
11:52:51  51  ,w
11:52:51  52  ,mpm
11:52:51  53  ,mph
11:52:51  54  FROM svm6122
11:52:51  55  ORDER BY ydate
11:52:51  56  /

Table created.

Elapsed: 00:00:00.36
11:52:51 SQL> 
11:52:51 SQL> -- rpt
11:52:51 SQL> 
11:52:51 SQL> SELECT
11:52:51   2  pair
11:52:51   3  ,trend
11:52:51   4  ,gatt
11:52:51   5  ,COUNT(pair)
11:52:51   6  ,AVG(g6)
11:52:51   7  FROM svm6142
11:52:51   8  GROUP BY pair,trend,gatt
11:52:51   9  ORDER BY pair,trend,gatt
11:52:51  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7270  -.0012483
usd_cad 	-1 up	      3031 .003046813
usd_cad 	-1		15
usd_cad 	 1 nup	      6570 -.00163931
usd_cad 	 1 up	      2311 .003649906
usd_cad 	 1		57

6 rows selected.

Elapsed: 00:00:00.04
11:52:51 SQL> 
11:52:51 SQL> 
11:52:51 SQL> -- Derive NTILE based params:
11:52:51 SQL> 
11:52:51 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.13
11:52:51 SQL> CREATE TABLE svm6162 COMPRESS AS
11:52:51   2  SELECT
11:52:51   3  pair
11:52:51   4  ,ydate
11:52:51   5  ,prdate
11:52:51   6  ,clse
11:52:51   7  ,g6
11:52:51   8  ,gatt
11:52:51   9  ,gattn
11:52:51  10  ,trend
11:52:51  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
11:52:51  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
11:52:51  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
11:52:51  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
11:52:51  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
11:52:51  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
11:52:51  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
11:52:51  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
11:52:51  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
11:52:51  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
11:52:51  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
11:52:51  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
11:52:51  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
11:52:51  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
11:52:51  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
11:52:51  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
11:52:51  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
11:52:51  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
11:52:51  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
11:52:51  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
11:52:51  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
11:52:51  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
11:52:51  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
11:52:51  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
11:52:51  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
11:52:51  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
11:52:51  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
11:52:51  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
11:52:51  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
11:52:51  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
11:52:51  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
11:52:51  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
11:52:51  43  ,hh  att32
11:52:51  44  ,d   att33
11:52:51  45  ,w   att34
11:52:51  46  ,mpm att35
11:52:51  47  ,mph att36
11:52:51  48  ,trend att37
11:52:51  49  FROM svm6142
11:52:51  50  ORDER BY ydate
11:52:51  51  /

Table created.

Elapsed: 00:00:04.66
11:52:56 SQL> 
11:52:56 SQL> -- rpt
11:52:56 SQL> 
11:52:56 SQL> SELECT
11:52:56   2  pair
11:52:56   3  ,trend
11:52:56   4  ,gatt
11:52:56   5  ,COUNT(pair)
11:52:56   6  ,AVG(g6)
11:52:56   7  FROM svm6162
11:52:56   8  GROUP BY pair,trend,gatt
11:52:56   9  ORDER BY pair,trend,gatt
11:52:56  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7270  -.0012483
usd_cad 	-1 up	      3031 .003046813
usd_cad 	-1		15
usd_cad 	 1 nup	      6570 -.00163931
usd_cad 	 1 up	      2311 .003649906
usd_cad 	 1		57

6 rows selected.

Elapsed: 00:00:00.03
11:52:56 SQL> 
11:52:56 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.20
11:52:56 SQL> CREATE TABLE modsrc COMPRESS AS
11:52:56   2  SELECT
11:52:56   3  pair
11:52:56   4  ,ydate
11:52:56   5  ,prdate
11:52:56   6  ,trend
11:52:56   7  ,g6
11:52:56   8  ,gatt
11:52:56   9  ,gattn
11:52:56  10  FROM svm6162
11:52:56  11  /

Table created.

Elapsed: 00:00:00.09
11:52:56 SQL> 
11:52:56 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
11:52:56 SQL> 
11:52:56 SQL> DROP   TABLE cad_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
11:52:56 SQL> CREATE TABLE cad_ms610 COMPRESS AS
11:52:56   2  SELECT
11:52:56   3  ydate
11:52:56   4  ,trend cad_trend
11:52:56   5  ,g6    cad_g6
11:52:56   6  ,gatt  cad_gatt
11:52:56   7  ,gattn cad_gattn
11:52:56   8  FROM modsrc
11:52:56   9  /

Table created.

Elapsed: 00:00:00.07
11:52:56 SQL> 
11:52:56 SQL> ANALYZE TABLE cad_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
11:52:57 SQL> 
11:52:57 SQL> -- I need a copy of the attributes:
11:52:57 SQL> 
11:52:57 SQL> 
11:52:57 SQL> DROP   TABLE cad_att;

Table dropped.

Elapsed: 00:00:00.05
11:52:57 SQL> CREATE TABLE cad_att COMPRESS AS
11:52:57   2  SELECT
11:52:57   3  ydate
11:52:57   4  ,att00 cad_att00
11:52:57   5  ,att01 cad_att01
11:52:57   6  ,att02 cad_att02
11:52:57   7  ,att03 cad_att03
11:52:57   8  ,att04 cad_att04
11:52:57   9  ,att05 cad_att05
11:52:57  10  ,att06 cad_att06
11:52:57  11  ,att07 cad_att07
11:52:57  12  ,att08 cad_att08
11:52:57  13  ,att09 cad_att09
11:52:57  14  ,att10 cad_att10
11:52:57  15  ,att11 cad_att11
11:52:57  16  ,att12 cad_att12
11:52:57  17  ,att13 cad_att13
11:52:57  18  ,att14 cad_att14
11:52:57  19  ,att15 cad_att15
11:52:57  20  ,att16 cad_att16
11:52:57  21  ,att17 cad_att17
11:52:57  22  ,att18 cad_att18
11:52:57  23  ,att19 cad_att19
11:52:57  24  ,att20 cad_att20
11:52:57  25  ,att21 cad_att21
11:52:57  26  ,att22 cad_att22
11:52:57  27  ,att23 cad_att23
11:52:57  28  ,att24 cad_att24
11:52:57  29  ,att25 cad_att25
11:52:57  30  ,att26 cad_att26
11:52:57  31  ,att27 cad_att27
11:52:57  32  ,att28 cad_att28
11:52:57  33  ,att29 cad_att29
11:52:57  34  ,att30 cad_att30
11:52:57  35  ,att31 cad_att31
11:52:57  36  ,att32 cad_att32
11:52:57  37  ,att33 cad_att33
11:52:57  38  ,att34 cad_att34
11:52:57  39  ,att35 cad_att35
11:52:57  40  ,att36 cad_att36
11:52:57  41  ,att37 cad_att37
11:52:57  42  FROM svm6162
11:52:57  43  /

Table created.

Elapsed: 00:00:00.16
11:52:57 SQL> 
11:52:57 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.44
11:52:57 SQL> 
11:52:57 SQL> -- rpt
11:52:57 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19254

Elapsed: 00:00:00.82
11:52:58 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
     19254

Elapsed: 00:00:00.00
11:52:58 SQL> 
11:52:58 SQL> --
11:52:58 SQL> -- chf610.sql
11:52:58 SQL> --
11:52:58 SQL> 
11:52:58 SQL> -- Creates views and tables for backtesting a forex SVM strategy
11:52:58 SQL> 
11:52:58 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.37
11:52:58 SQL> 
11:52:58 SQL> -- I created di5min here:
11:52:58 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
11:52:58 SQL> 
11:52:58 SQL> CREATE OR REPLACE VIEW svm6102 AS
11:52:58   2  SELECT
11:52:58   3  pair
11:52:58   4  ,ydate
11:52:58   5  ,prdate
11:52:58   6  ,rownum rnum -- acts as t in my time-series
11:52:58   7  ,clse
11:52:58   8  -- Derive a bunch of attributes from clse, the latest price:
11:52:58   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
11:52:58  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
11:52:58  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
11:52:58  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
11:52:58  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
11:52:58  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
11:52:58  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
11:52:58  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
11:52:58  17  --
11:52:58  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
11:52:58  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
11:52:58  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
11:52:58  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
11:52:58  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
11:52:58  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
11:52:58  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
11:52:58  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
11:52:58  26  --
11:52:58  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
11:52:58  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
11:52:58  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
11:52:58  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
11:52:58  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
11:52:58  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
11:52:58  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
11:52:58  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
11:52:58  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
11:52:58  36  FROM di5min WHERE pair LIKE'%chf%'
11:52:58  37  AND ydate > sysdate - 95
11:52:58  38  ORDER BY ydate
11:52:58  39  /

View created.

Elapsed: 00:00:00.05
11:52:58 SQL> 
11:52:58 SQL> -- rpt
11:52:58 SQL> 
11:52:58 SQL> SELECT
11:52:58   2  pair
11:52:58   3  ,COUNT(pair)
11:52:58   4  ,MIN(clse),MAX(clse)
11:52:58   5  ,MIN(avg6),MAX(avg6)
11:52:58   6  ,MIN(ydate),MAX(ydate)
11:52:58   7  FROM svm6102
11:52:58   8  GROUP BY pair
11:52:58   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_chf       19257    .931675	  1.00635  .93325411 1.00498151 2010-10-01 11:55:01 2011-01-04 11:50:00

Elapsed: 00:00:00.85
11:52:59 SQL> 
11:52:59 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
11:52:59 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.73
11:53:00 SQL> CREATE TABLE svm6122 COMPRESS AS
11:53:00   2  SELECT
11:53:00   3  pair
11:53:00   4  ,ydate
11:53:00   5  ,prdate
11:53:00   6  ,clse
11:53:00   7  -- g6 is important. I want to predict g6:
11:53:00   8  ,ld6 - clse g6
11:53:00   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
11:53:00  10  -- I want more attributes from the ones I derived above:
11:53:00  11  -- clse relation to moving-min
11:53:00  12  ,clse-min4  cm4
11:53:00  13  ,clse-min6  cm6
11:53:00  14  ,clse-min8  cm8
11:53:00  15  ,clse-min10 cm10
11:53:00  16  ,clse-min12 cm12
11:53:00  17  ,clse-min14 cm14
11:53:00  18  ,clse-min16 cm16
11:53:00  19  ,clse-min18 cm18
11:53:00  20  -- clse relation to moving-avg
11:53:00  21  ,clse-avg4  ca4
11:53:00  22  ,clse-avg6  ca6
11:53:00  23  ,clse-avg8  ca8
11:53:00  24  ,clse-avg10 ca10
11:53:00  25  ,clse-avg12 ca12
11:53:00  26  ,clse-avg14 ca14
11:53:00  27  ,clse-avg16 ca16
11:53:00  28  ,clse-avg18 ca18
11:53:00  29  -- clse relation to moving-max
11:53:00  30  ,clse-max4  cx4
11:53:00  31  ,clse-max6  cx6
11:53:00  32  ,clse-max8  cx8
11:53:00  33  ,clse-max10 cx10
11:53:00  34  ,clse-max12 cx12
11:53:00  35  ,clse-max14 cx14
11:53:00  36  ,clse-max16 cx16
11:53:00  37  ,clse-max18 cx18
11:53:00  38  -- Derive more attributes.
11:53:00  39  -- I want to use CORR() here to help SVM see the shape of the series.
11:53:00  40  -- But COVAR_POP is more stable:
11:53:00  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
11:53:00  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
11:53:00  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
11:53:00  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
11:53:00  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
11:53:00  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
11:53:00  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
11:53:00  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
11:53:00  49  -- Derive date related attributes:
11:53:00  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
11:53:00  51  ,0+TO_CHAR(ydate,'D')d
11:53:00  52  ,0+TO_CHAR(ydate,'W')w
11:53:00  53  -- mpm stands for minutes-past-midnight:
11:53:00  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
11:53:00  55  -- mph stands for minutes-past-hour:
11:53:00  56  ,0+TO_CHAR(ydate,'MI')mph
11:53:00  57  FROM svm6102
11:53:00  58  ORDER BY ydate
11:53:00  59  /

Table created.

Elapsed: 00:00:02.07
11:53:02 SQL> 
11:53:02 SQL> -- rpt
11:53:02 SQL> 
11:53:02 SQL> SELECT
11:53:02   2  pair
11:53:02   3  ,COUNT(pair)
11:53:02   4  ,MIN(clse),MAX(clse)
11:53:02   5  ,MIN(ydate),MAX(ydate)
11:53:02   6  FROM svm6122
11:53:02   7  GROUP BY pair
11:53:02   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_chf       19257    .931675	  1.00635 2010-10-01 11:55:01 2011-01-04 11:50:00

Elapsed: 00:00:00.04
11:53:02 SQL> 
11:53:02 SQL> -- Prepare for derivation of NTILE based params:
11:53:02 SQL> 
11:53:02 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.16
11:53:02 SQL> CREATE TABLE svm6142 COMPRESS AS
11:53:02   2  SELECT
11:53:02   3  pair
11:53:02   4  ,ydate
11:53:02   5  ,prdate
11:53:02   6  ,clse
11:53:02   7  ,g6
11:53:02   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
11:53:02   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
11:53:02  10  ,CASE WHEN trend IS NULL THEN 1
11:53:02  11  	    WHEN trend =0      THEN 1
11:53:02  12  	    ELSE trend END trend
11:53:02  13  ,cm4
11:53:02  14  ,cm6
11:53:02  15  ,cm8
11:53:02  16  ,cm10
11:53:02  17  ,cm12
11:53:02  18  ,cm14
11:53:02  19  ,cm16
11:53:02  20  ,cm18
11:53:02  21  --
11:53:02  22  ,ca4
11:53:02  23  ,ca6
11:53:02  24  ,ca8
11:53:02  25  ,ca10
11:53:02  26  ,ca12
11:53:02  27  ,ca14
11:53:02  28  ,ca16
11:53:02  29  ,ca18
11:53:02  30  --
11:53:02  31  ,cx4
11:53:02  32  ,cx6
11:53:02  33  ,cx8
11:53:02  34  ,cx10
11:53:02  35  ,cx12
11:53:02  36  ,cx14
11:53:02  37  ,cx16
11:53:02  38  ,cx18
11:53:02  39  --
11:53:02  40  ,crr4
11:53:02  41  ,crr6
11:53:02  42  ,crr8
11:53:02  43  ,crr10
11:53:02  44  ,crr12
11:53:02  45  ,crr14
11:53:02  46  ,crr16
11:53:02  47  ,crr18
11:53:02  48  --
11:53:02  49  ,hh
11:53:02  50  ,d
11:53:02  51  ,w
11:53:02  52  ,mpm
11:53:02  53  ,mph
11:53:02  54  FROM svm6122
11:53:02  55  ORDER BY ydate
11:53:02  56  /

Table created.

Elapsed: 00:00:00.35
11:53:03 SQL> 
11:53:03 SQL> -- rpt
11:53:03 SQL> 
11:53:03 SQL> SELECT
11:53:03   2  pair
11:53:03   3  ,trend
11:53:03   4  ,gatt
11:53:03   5  ,COUNT(pair)
11:53:03   6  ,AVG(g6)
11:53:03   7  FROM svm6142
11:53:03   8  GROUP BY pair,trend,gatt
11:53:03   9  ORDER BY pair,trend,gatt
11:53:03  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7135 -.00198953
usd_chf 	-1 up	      3080 .003832088
usd_chf 	 1 nup	      6340 -.00157887
usd_chf 	 1 up	      2630 .003745968
usd_chf 	 1		72

Elapsed: 00:00:00.03
11:53:03 SQL> 
11:53:03 SQL> 
11:53:03 SQL> -- Derive NTILE based params:
11:53:03 SQL> 
11:53:03 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.13
11:53:03 SQL> CREATE TABLE svm6162 COMPRESS AS
11:53:03   2  SELECT
11:53:03   3  pair
11:53:03   4  ,ydate
11:53:03   5  ,prdate
11:53:03   6  ,clse
11:53:03   7  ,g6
11:53:03   8  ,gatt
11:53:03   9  ,gattn
11:53:03  10  ,trend
11:53:03  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
11:53:03  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
11:53:03  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
11:53:03  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
11:53:03  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
11:53:03  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
11:53:03  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
11:53:03  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
11:53:03  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
11:53:03  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
11:53:03  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
11:53:03  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
11:53:03  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
11:53:03  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
11:53:03  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
11:53:03  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
11:53:03  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
11:53:03  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
11:53:03  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
11:53:03  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
11:53:03  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
11:53:03  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
11:53:03  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
11:53:03  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
11:53:03  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
11:53:03  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
11:53:03  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
11:53:03  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
11:53:03  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
11:53:03  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
11:53:03  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
11:53:03  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
11:53:03  43  ,hh  att32
11:53:03  44  ,d   att33
11:53:03  45  ,w   att34
11:53:03  46  ,mpm att35
11:53:03  47  ,mph att36
11:53:03  48  ,trend att37
11:53:03  49  FROM svm6142
11:53:03  50  ORDER BY ydate
11:53:03  51  /

Table created.

Elapsed: 00:00:04.80
11:53:08 SQL> 
11:53:08 SQL> -- rpt
11:53:08 SQL> 
11:53:08 SQL> SELECT
11:53:08   2  pair
11:53:08   3  ,trend
11:53:08   4  ,gatt
11:53:08   5  ,COUNT(pair)
11:53:08   6  ,AVG(g6)
11:53:08   7  FROM svm6162
11:53:08   8  GROUP BY pair,trend,gatt
11:53:08   9  ORDER BY pair,trend,gatt
11:53:08  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7135 -.00198953
usd_chf 	-1 up	      3080 .003832088
usd_chf 	 1 nup	      6340 -.00157887
usd_chf 	 1 up	      2630 .003745968
usd_chf 	 1		72

Elapsed: 00:00:00.03
11:53:08 SQL> 
11:53:08 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.18
11:53:08 SQL> CREATE TABLE modsrc COMPRESS AS
11:53:08   2  SELECT
11:53:08   3  pair
11:53:08   4  ,ydate
11:53:08   5  ,prdate
11:53:08   6  ,trend
11:53:08   7  ,g6
11:53:08   8  ,gatt
11:53:08   9  ,gattn
11:53:08  10  FROM svm6162
11:53:08  11  /

Table created.

Elapsed: 00:00:00.08
11:53:08 SQL> 
11:53:08 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
11:53:08 SQL> 
11:53:08 SQL> DROP   TABLE chf_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
11:53:08 SQL> CREATE TABLE chf_ms610 COMPRESS AS
11:53:08   2  SELECT
11:53:08   3  ydate
11:53:08   4  ,trend chf_trend
11:53:08   5  ,g6    chf_g6
11:53:08   6  ,gatt  chf_gatt
11:53:08   7  ,gattn chf_gattn
11:53:08   8  FROM modsrc
11:53:08   9  /

Table created.

Elapsed: 00:00:00.06
11:53:08 SQL> 
11:53:08 SQL> ANALYZE TABLE chf_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
11:53:08 SQL> 
11:53:08 SQL> -- I need a copy of the attributes:
11:53:08 SQL> 
11:53:08 SQL> 
11:53:08 SQL> DROP   TABLE chf_att;

Table dropped.

Elapsed: 00:00:00.05
11:53:08 SQL> CREATE TABLE chf_att COMPRESS AS
11:53:08   2  SELECT
11:53:08   3  ydate
11:53:08   4  ,att00 chf_att00
11:53:08   5  ,att01 chf_att01
11:53:08   6  ,att02 chf_att02
11:53:08   7  ,att03 chf_att03
11:53:08   8  ,att04 chf_att04
11:53:08   9  ,att05 chf_att05
11:53:08  10  ,att06 chf_att06
11:53:08  11  ,att07 chf_att07
11:53:08  12  ,att08 chf_att08
11:53:08  13  ,att09 chf_att09
11:53:08  14  ,att10 chf_att10
11:53:08  15  ,att11 chf_att11
11:53:08  16  ,att12 chf_att12
11:53:08  17  ,att13 chf_att13
11:53:08  18  ,att14 chf_att14
11:53:08  19  ,att15 chf_att15
11:53:08  20  ,att16 chf_att16
11:53:08  21  ,att17 chf_att17
11:53:08  22  ,att18 chf_att18
11:53:08  23  ,att19 chf_att19
11:53:08  24  ,att20 chf_att20
11:53:08  25  ,att21 chf_att21
11:53:08  26  ,att22 chf_att22
11:53:08  27  ,att23 chf_att23
11:53:08  28  ,att24 chf_att24
11:53:08  29  ,att25 chf_att25
11:53:08  30  ,att26 chf_att26
11:53:08  31  ,att27 chf_att27
11:53:08  32  ,att28 chf_att28
11:53:08  33  ,att29 chf_att29
11:53:08  34  ,att30 chf_att30
11:53:08  35  ,att31 chf_att31
11:53:08  36  ,att32 chf_att32
11:53:08  37  ,att33 chf_att33
11:53:08  38  ,att34 chf_att34
11:53:08  39  ,att35 chf_att35
11:53:08  40  ,att36 chf_att36
11:53:08  41  ,att37 chf_att37
11:53:08  42  FROM svm6162
11:53:08  43  /

Table created.

Elapsed: 00:00:00.16
11:53:09 SQL> 
11:53:09 SQL> ANALYZE TABLE chf_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.44
11:53:09 SQL> 
11:53:09 SQL> -- rpt
11:53:09 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19257

Elapsed: 00:00:00.81
11:53:10 SQL> SELECT COUNT(*)FROM chf_att;

  COUNT(*)
----------
     19257

Elapsed: 00:00:00.00
11:53:10 SQL> 
11:53:10 SQL> --
11:53:10 SQL> -- ech610.sql
11:53:10 SQL> --
11:53:10 SQL> 
11:53:10 SQL> -- Creates views and tables for backtesting a forex SVM strategy
11:53:10 SQL> 
11:53:10 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.40
11:53:10 SQL> 
11:53:10 SQL> -- I created di5min here:
11:53:10 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
11:53:10 SQL> 
11:53:10 SQL> CREATE OR REPLACE VIEW svm6102 AS
11:53:10   2  SELECT
11:53:10   3  pair
11:53:10   4  ,ydate
11:53:10   5  ,prdate
11:53:10   6  ,rownum rnum -- acts as t in my time-series
11:53:10   7  ,clse
11:53:10   8  -- Derive a bunch of attributes from clse, the latest price:
11:53:10   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
11:53:10  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
11:53:10  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
11:53:10  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
11:53:10  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
11:53:10  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
11:53:10  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
11:53:10  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
11:53:10  17  --
11:53:10  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
11:53:10  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
11:53:10  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
11:53:10  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
11:53:10  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
11:53:10  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
11:53:10  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
11:53:10  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
11:53:10  26  --
11:53:10  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
11:53:10  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
11:53:10  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
11:53:10  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
11:53:10  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
11:53:10  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
11:53:10  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
11:53:10  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
11:53:10  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
11:53:10  36  FROM di5min WHERE pair LIKE'%ech%'
11:53:10  37  AND ydate > sysdate - 95
11:53:10  38  ORDER BY ydate
11:53:10  39  /

View created.

Elapsed: 00:00:00.06
11:53:10 SQL> 
11:53:10 SQL> -- rpt
11:53:10 SQL> 
11:53:10 SQL> SELECT
11:53:10   2  pair
11:53:10   3  ,COUNT(pair)
11:53:10   4  ,MIN(clse),MAX(clse)
11:53:10   5  ,MIN(avg6),MAX(avg6)
11:53:10   6  ,MIN(ydate),MAX(ydate)
11:53:10   7  FROM svm6102
11:53:10   8  GROUP BY pair
11:53:10   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ech_usd       19256 1.24192946 1.38284305 1.24320711 1.37986485 2010-10-01 11:55:01 2011-01-04 11:50:00

Elapsed: 00:00:00.78
11:53:11 SQL> 
11:53:11 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
11:53:11 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.19
11:53:11 SQL> CREATE TABLE svm6122 COMPRESS AS
11:53:11   2  SELECT
11:53:11   3  pair
11:53:11   4  ,ydate
11:53:11   5  ,prdate
11:53:11   6  ,clse
11:53:11   7  -- g6 is important. I want to predict g6:
11:53:11   8  ,ld6 - clse g6
11:53:11   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
11:53:11  10  -- I want more attributes from the ones I derived above:
11:53:11  11  -- clse relation to moving-min
11:53:11  12  ,clse-min4  cm4
11:53:11  13  ,clse-min6  cm6
11:53:11  14  ,clse-min8  cm8
11:53:11  15  ,clse-min10 cm10
11:53:11  16  ,clse-min12 cm12
11:53:11  17  ,clse-min14 cm14
11:53:11  18  ,clse-min16 cm16
11:53:11  19  ,clse-min18 cm18
11:53:11  20  -- clse relation to moving-avg
11:53:11  21  ,clse-avg4  ca4
11:53:11  22  ,clse-avg6  ca6
11:53:11  23  ,clse-avg8  ca8
11:53:11  24  ,clse-avg10 ca10
11:53:11  25  ,clse-avg12 ca12
11:53:11  26  ,clse-avg14 ca14
11:53:11  27  ,clse-avg16 ca16
11:53:11  28  ,clse-avg18 ca18
11:53:11  29  -- clse relation to moving-max
11:53:11  30  ,clse-max4  cx4
11:53:11  31  ,clse-max6  cx6
11:53:11  32  ,clse-max8  cx8
11:53:11  33  ,clse-max10 cx10
11:53:11  34  ,clse-max12 cx12
11:53:11  35  ,clse-max14 cx14
11:53:11  36  ,clse-max16 cx16
11:53:11  37  ,clse-max18 cx18
11:53:11  38  -- Derive more attributes.
11:53:11  39  -- I want to use CORR() here to help SVM see the shape of the series.
11:53:11  40  -- But COVAR_POP is more stable:
11:53:11  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
11:53:11  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
11:53:11  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
11:53:11  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
11:53:11  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
11:53:11  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
11:53:11  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
11:53:11  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
11:53:11  49  -- Derive date related attributes:
11:53:11  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
11:53:11  51  ,0+TO_CHAR(ydate,'D')d
11:53:11  52  ,0+TO_CHAR(ydate,'W')w
11:53:11  53  -- mpm stands for minutes-past-midnight:
11:53:11  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
11:53:11  55  -- mph stands for minutes-past-hour:
11:53:11  56  ,0+TO_CHAR(ydate,'MI')mph
11:53:11  57  FROM svm6102
11:53:11  58  ORDER BY ydate
11:53:11  59  /

Table created.

Elapsed: 00:00:02.06
11:53:13 SQL> 
11:53:13 SQL> -- rpt
11:53:13 SQL> 
11:53:13 SQL> SELECT
11:53:13   2  pair
11:53:13   3  ,COUNT(pair)
11:53:13   4  ,MIN(clse),MAX(clse)
11:53:13   5  ,MIN(ydate),MAX(ydate)
11:53:13   6  FROM svm6122
11:53:13   7  GROUP BY pair
11:53:13   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ech_usd       19256 1.24192946 1.38284305 2010-10-01 11:55:01 2011-01-04 11:50:00

Elapsed: 00:00:00.04
11:53:13 SQL> 
11:53:13 SQL> -- Prepare for derivation of NTILE based params:
11:53:13 SQL> 
11:53:13 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.17
11:53:14 SQL> CREATE TABLE svm6142 COMPRESS AS
11:53:14   2  SELECT
11:53:14   3  pair
11:53:14   4  ,ydate
11:53:14   5  ,prdate
11:53:14   6  ,clse
11:53:14   7  ,g6
11:53:14   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
11:53:14   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
11:53:14  10  ,CASE WHEN trend IS NULL THEN 1
11:53:14  11  	    WHEN trend =0      THEN 1
11:53:14  12  	    ELSE trend END trend
11:53:14  13  ,cm4
11:53:14  14  ,cm6
11:53:14  15  ,cm8
11:53:14  16  ,cm10
11:53:14  17  ,cm12
11:53:14  18  ,cm14
11:53:14  19  ,cm16
11:53:14  20  ,cm18
11:53:14  21  --
11:53:14  22  ,ca4
11:53:14  23  ,ca6
11:53:14  24  ,ca8
11:53:14  25  ,ca10
11:53:14  26  ,ca12
11:53:14  27  ,ca14
11:53:14  28  ,ca16
11:53:14  29  ,ca18
11:53:14  30  --
11:53:14  31  ,cx4
11:53:14  32  ,cx6
11:53:14  33  ,cx8
11:53:14  34  ,cx10
11:53:14  35  ,cx12
11:53:14  36  ,cx14
11:53:14  37  ,cx16
11:53:14  38  ,cx18
11:53:14  39  --
11:53:14  40  ,crr4
11:53:14  41  ,crr6
11:53:14  42  ,crr8
11:53:14  43  ,crr10
11:53:14  44  ,crr12
11:53:14  45  ,crr14
11:53:14  46  ,crr16
11:53:14  47  ,crr18
11:53:14  48  --
11:53:14  49  ,hh
11:53:14  50  ,d
11:53:14  51  ,w
11:53:14  52  ,mpm
11:53:14  53  ,mph
11:53:14  54  FROM svm6122
11:53:14  55  ORDER BY ydate
11:53:14  56  /

Table created.

Elapsed: 00:00:00.39
11:53:14 SQL> 
11:53:14 SQL> -- rpt
11:53:14 SQL> 
11:53:14 SQL> SELECT
11:53:14   2  pair
11:53:14   3  ,trend
11:53:14   4  ,gatt
11:53:14   5  ,COUNT(pair)
11:53:14   6  ,AVG(g6)
11:53:14   7  FROM svm6142
11:53:14   8  GROUP BY pair,trend,gatt
11:53:14   9  ORDER BY pair,trend,gatt
11:53:14  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6535 -.00224208
ech_usd 	-1 up	      3555 .003507369
ech_usd 	 1 nup	      6273 -.00239816
ech_usd 	 1 up	      2821 .003952294
ech_usd 	 1		72

Elapsed: 00:00:00.03
11:53:14 SQL> 
11:53:14 SQL> 
11:53:14 SQL> -- Derive NTILE based params:
11:53:14 SQL> 
11:53:14 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.15
11:53:14 SQL> CREATE TABLE svm6162 COMPRESS AS
11:53:14   2  SELECT
11:53:14   3  pair
11:53:14   4  ,ydate
11:53:14   5  ,prdate
11:53:14   6  ,clse
11:53:14   7  ,g6
11:53:14   8  ,gatt
11:53:14   9  ,gattn
11:53:14  10  ,trend
11:53:14  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
11:53:14  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
11:53:14  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
11:53:14  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
11:53:14  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
11:53:14  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
11:53:14  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
11:53:14  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
11:53:14  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
11:53:14  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
11:53:14  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
11:53:14  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
11:53:14  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
11:53:14  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
11:53:14  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
11:53:14  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
11:53:14  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
11:53:14  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
11:53:14  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
11:53:14  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
11:53:14  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
11:53:14  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
11:53:14  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
11:53:14  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
11:53:14  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
11:53:14  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
11:53:14  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
11:53:14  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
11:53:14  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
11:53:14  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
11:53:14  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
11:53:14  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
11:53:14  43  ,hh  att32
11:53:14  44  ,d   att33
11:53:14  45  ,w   att34
11:53:14  46  ,mpm att35
11:53:14  47  ,mph att36
11:53:14  48  ,trend att37
11:53:14  49  FROM svm6142
11:53:14  50  ORDER BY ydate
11:53:14  51  /

Table created.

Elapsed: 00:00:04.71
11:53:19 SQL> 
11:53:19 SQL> -- rpt
11:53:19 SQL> 
11:53:19 SQL> SELECT
11:53:19   2  pair
11:53:19   3  ,trend
11:53:19   4  ,gatt
11:53:19   5  ,COUNT(pair)
11:53:19   6  ,AVG(g6)
11:53:19   7  FROM svm6162
11:53:19   8  GROUP BY pair,trend,gatt
11:53:19   9  ORDER BY pair,trend,gatt
11:53:19  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6535 -.00224208
ech_usd 	-1 up	      3555 .003507369
ech_usd 	 1 nup	      6273 -.00239816
ech_usd 	 1 up	      2821 .003952294
ech_usd 	 1		72

Elapsed: 00:00:00.03
11:53:19 SQL> 
11:53:19 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.11
11:53:19 SQL> CREATE TABLE modsrc COMPRESS AS
11:53:19   2  SELECT
11:53:19   3  pair
11:53:19   4  ,ydate
11:53:19   5  ,prdate
11:53:19   6  ,trend
11:53:19   7  ,g6
11:53:19   8  ,gatt
11:53:19   9  ,gattn
11:53:19  10  FROM svm6162
11:53:19  11  /

Table created.

Elapsed: 00:00:00.09
11:53:19 SQL> 
11:53:19 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
11:53:19 SQL> 
11:53:19 SQL> DROP   TABLE ech_ms610 ;

Table dropped.

Elapsed: 00:00:00.03
11:53:19 SQL> CREATE TABLE ech_ms610 COMPRESS AS
11:53:19   2  SELECT
11:53:19   3  ydate
11:53:19   4  ,trend ech_trend
11:53:19   5  ,g6    ech_g6
11:53:19   6  ,gatt  ech_gatt
11:53:19   7  ,gattn ech_gattn
11:53:19   8  FROM modsrc
11:53:19   9  /

Table created.

Elapsed: 00:00:00.06
11:53:19 SQL> 
11:53:19 SQL> ANALYZE TABLE ech_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
11:53:20 SQL> 
11:53:20 SQL> -- I need a copy of the attributes:
11:53:20 SQL> 
11:53:20 SQL> 
11:53:20 SQL> DROP   TABLE ech_att;

Table dropped.

Elapsed: 00:00:00.04
11:53:20 SQL> CREATE TABLE ech_att COMPRESS AS
11:53:20   2  SELECT
11:53:20   3  ydate
11:53:20   4  ,att00 ech_att00
11:53:20   5  ,att01 ech_att01
11:53:20   6  ,att02 ech_att02
11:53:20   7  ,att03 ech_att03
11:53:20   8  ,att04 ech_att04
11:53:20   9  ,att05 ech_att05
11:53:20  10  ,att06 ech_att06
11:53:20  11  ,att07 ech_att07
11:53:20  12  ,att08 ech_att08
11:53:20  13  ,att09 ech_att09
11:53:20  14  ,att10 ech_att10
11:53:20  15  ,att11 ech_att11
11:53:20  16  ,att12 ech_att12
11:53:20  17  ,att13 ech_att13
11:53:20  18  ,att14 ech_att14
11:53:20  19  ,att15 ech_att15
11:53:20  20  ,att16 ech_att16
11:53:20  21  ,att17 ech_att17
11:53:20  22  ,att18 ech_att18
11:53:20  23  ,att19 ech_att19
11:53:20  24  ,att20 ech_att20
11:53:20  25  ,att21 ech_att21
11:53:20  26  ,att22 ech_att22
11:53:20  27  ,att23 ech_att23
11:53:20  28  ,att24 ech_att24
11:53:20  29  ,att25 ech_att25
11:53:20  30  ,att26 ech_att26
11:53:20  31  ,att27 ech_att27
11:53:20  32  ,att28 ech_att28
11:53:20  33  ,att29 ech_att29
11:53:20  34  ,att30 ech_att30
11:53:20  35  ,att31 ech_att31
11:53:20  36  ,att32 ech_att32
11:53:20  37  ,att33 ech_att33
11:53:20  38  ,att34 ech_att34
11:53:20  39  ,att35 ech_att35
11:53:20  40  ,att36 ech_att36
11:53:20  41  ,att37 ech_att37
11:53:20  42  FROM svm6162
11:53:20  43  /

Table created.

Elapsed: 00:00:00.17
11:53:20 SQL> 
11:53:20 SQL> ANALYZE TABLE ech_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
11:53:20 SQL> 
11:53:20 SQL> -- rpt
11:53:20 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19256

Elapsed: 00:00:00.77
11:53:21 SQL> SELECT COUNT(*)FROM ech_att;

  COUNT(*)
----------
     19256

Elapsed: 00:00:00.00
11:53:21 SQL> 
11:53:21 SQL> --
11:53:21 SQL> -- egb610.sql
11:53:21 SQL> --
11:53:21 SQL> 
11:53:21 SQL> -- Creates views and tables for backtesting a forex SVM strategy
11:53:21 SQL> 
11:53:21 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.35
11:53:21 SQL> 
11:53:21 SQL> -- I created di5min here:
11:53:21 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
11:53:21 SQL> 
11:53:21 SQL> CREATE OR REPLACE VIEW svm6102 AS
11:53:21   2  SELECT
11:53:21   3  pair
11:53:21   4  ,ydate
11:53:21   5  ,prdate
11:53:21   6  ,rownum rnum -- acts as t in my time-series
11:53:21   7  ,clse
11:53:21   8  -- Derive a bunch of attributes from clse, the latest price:
11:53:21   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
11:53:21  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
11:53:21  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
11:53:21  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
11:53:21  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
11:53:21  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
11:53:21  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
11:53:21  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
11:53:21  17  --
11:53:21  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
11:53:21  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
11:53:21  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
11:53:21  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
11:53:21  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
11:53:21  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
11:53:21  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
11:53:21  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
11:53:21  26  --
11:53:21  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
11:53:21  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
11:53:21  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
11:53:21  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
11:53:21  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
11:53:21  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
11:53:21  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
11:53:21  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
11:53:21  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
11:53:21  36  FROM di5min WHERE pair LIKE'%egb%'
11:53:21  37  AND ydate > sysdate - 95
11:53:21  38  ORDER BY ydate
11:53:21  39  /

View created.

Elapsed: 00:00:00.04
11:53:21 SQL> 
11:53:21 SQL> -- rpt
11:53:21 SQL> 
11:53:21 SQL> SELECT
11:53:21   2  pair
11:53:21   3  ,COUNT(pair)
11:53:21   4  ,MIN(clse),MAX(clse)
11:53:21   5  ,MIN(avg6),MAX(avg6)
11:53:21   6  ,MIN(ydate),MAX(ydate)
11:53:21   7  FROM svm6102
11:53:21   8  GROUP BY pair
11:53:21   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
egb_usd       19255 .833520557 .893920122 .834199029 .892400287 2010-10-01 11:55:01 2011-01-04 11:50:00

Elapsed: 00:00:00.95
11:53:22 SQL> 
11:53:22 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
11:53:22 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.19
11:53:22 SQL> CREATE TABLE svm6122 COMPRESS AS
11:53:22   2  SELECT
11:53:22   3  pair
11:53:22   4  ,ydate
11:53:22   5  ,prdate
11:53:22   6  ,clse
11:53:22   7  -- g6 is important. I want to predict g6:
11:53:22   8  ,ld6 - clse g6
11:53:22   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
11:53:22  10  -- I want more attributes from the ones I derived above:
11:53:22  11  -- clse relation to moving-min
11:53:22  12  ,clse-min4  cm4
11:53:22  13  ,clse-min6  cm6
11:53:22  14  ,clse-min8  cm8
11:53:22  15  ,clse-min10 cm10
11:53:22  16  ,clse-min12 cm12
11:53:22  17  ,clse-min14 cm14
11:53:22  18  ,clse-min16 cm16
11:53:22  19  ,clse-min18 cm18
11:53:22  20  -- clse relation to moving-avg
11:53:22  21  ,clse-avg4  ca4
11:53:22  22  ,clse-avg6  ca6
11:53:22  23  ,clse-avg8  ca8
11:53:22  24  ,clse-avg10 ca10
11:53:22  25  ,clse-avg12 ca12
11:53:22  26  ,clse-avg14 ca14
11:53:22  27  ,clse-avg16 ca16
11:53:22  28  ,clse-avg18 ca18
11:53:22  29  -- clse relation to moving-max
11:53:22  30  ,clse-max4  cx4
11:53:22  31  ,clse-max6  cx6
11:53:22  32  ,clse-max8  cx8
11:53:22  33  ,clse-max10 cx10
11:53:22  34  ,clse-max12 cx12
11:53:22  35  ,clse-max14 cx14
11:53:22  36  ,clse-max16 cx16
11:53:22  37  ,clse-max18 cx18
11:53:22  38  -- Derive more attributes.
11:53:22  39  -- I want to use CORR() here to help SVM see the shape of the series.
11:53:22  40  -- But COVAR_POP is more stable:
11:53:22  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
11:53:22  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
11:53:22  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
11:53:22  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
11:53:22  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
11:53:22  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
11:53:22  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
11:53:22  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
11:53:22  49  -- Derive date related attributes:
11:53:22  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
11:53:22  51  ,0+TO_CHAR(ydate,'D')d
11:53:22  52  ,0+TO_CHAR(ydate,'W')w
11:53:22  53  -- mpm stands for minutes-past-midnight:
11:53:22  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
11:53:22  55  -- mph stands for minutes-past-hour:
11:53:22  56  ,0+TO_CHAR(ydate,'MI')mph
11:53:22  57  FROM svm6102
11:53:22  58  ORDER BY ydate
11:53:22  59  /

Table created.

Elapsed: 00:00:02.43
11:53:25 SQL> 
11:53:25 SQL> -- rpt
11:53:25 SQL> 
11:53:25 SQL> SELECT
11:53:25   2  pair
11:53:25   3  ,COUNT(pair)
11:53:25   4  ,MIN(clse),MAX(clse)
11:53:25   5  ,MIN(ydate),MAX(ydate)
11:53:25   6  FROM svm6122
11:53:25   7  GROUP BY pair
11:53:25   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
egb_usd       19255 .833520557 .893920122 2010-10-01 11:55:01 2011-01-04 11:50:00

Elapsed: 00:00:00.04
11:53:25 SQL> 
11:53:25 SQL> -- Prepare for derivation of NTILE based params:
11:53:25 SQL> 
11:53:25 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.17
11:53:25 SQL> CREATE TABLE svm6142 COMPRESS AS
11:53:25   2  SELECT
11:53:25   3  pair
11:53:25   4  ,ydate
11:53:25   5  ,prdate
11:53:25   6  ,clse
11:53:25   7  ,g6
11:53:25   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
11:53:25   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
11:53:25  10  ,CASE WHEN trend IS NULL THEN 1
11:53:25  11  	    WHEN trend =0      THEN 1
11:53:25  12  	    ELSE trend END trend
11:53:25  13  ,cm4
11:53:25  14  ,cm6
11:53:25  15  ,cm8
11:53:25  16  ,cm10
11:53:25  17  ,cm12
11:53:25  18  ,cm14
11:53:25  19  ,cm16
11:53:25  20  ,cm18
11:53:25  21  --
11:53:25  22  ,ca4
11:53:25  23  ,ca6
11:53:25  24  ,ca8
11:53:25  25  ,ca10
11:53:25  26  ,ca12
11:53:25  27  ,ca14
11:53:25  28  ,ca16
11:53:25  29  ,ca18
11:53:25  30  --
11:53:25  31  ,cx4
11:53:25  32  ,cx6
11:53:25  33  ,cx8
11:53:25  34  ,cx10
11:53:25  35  ,cx12
11:53:25  36  ,cx14
11:53:25  37  ,cx16
11:53:25  38  ,cx18
11:53:25  39  --
11:53:25  40  ,crr4
11:53:25  41  ,crr6
11:53:25  42  ,crr8
11:53:25  43  ,crr10
11:53:25  44  ,crr12
11:53:25  45  ,crr14
11:53:25  46  ,crr16
11:53:25  47  ,crr18
11:53:25  48  --
11:53:25  49  ,hh
11:53:25  50  ,d
11:53:25  51  ,w
11:53:25  52  ,mpm
11:53:25  53  ,mph
11:53:25  54  FROM svm6122
11:53:25  55  ORDER BY ydate
11:53:25  56  /

Table created.

Elapsed: 00:00:00.43
11:53:26 SQL> 
11:53:26 SQL> -- rpt
11:53:26 SQL> 
11:53:26 SQL> SELECT
11:53:26   2  pair
11:53:26   3  ,trend
11:53:26   4  ,gatt
11:53:26   5  ,COUNT(pair)
11:53:26   6  ,AVG(g6)
11:53:26   7  FROM svm6142
11:53:26   8  GROUP BY pair,trend,gatt
11:53:26   9  ORDER BY pair,trend,gatt
11:53:26  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7373 -.00101699
egb_usd 	-1 up	      2628 .002935012
egb_usd 	-1		48
egb_usd 	 1 nup	      6492 -.00134256
egb_usd 	 1 up	      2690 .002916199
egb_usd 	 1		24

6 rows selected.

Elapsed: 00:00:00.04
11:53:26 SQL> 
11:53:26 SQL> 
11:53:26 SQL> -- Derive NTILE based params:
11:53:26 SQL> 
11:53:26 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.13
11:53:26 SQL> CREATE TABLE svm6162 COMPRESS AS
11:53:26   2  SELECT
11:53:26   3  pair
11:53:26   4  ,ydate
11:53:26   5  ,prdate
11:53:26   6  ,clse
11:53:26   7  ,g6
11:53:26   8  ,gatt
11:53:26   9  ,gattn
11:53:26  10  ,trend
11:53:26  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
11:53:26  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
11:53:26  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
11:53:26  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
11:53:26  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
11:53:26  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
11:53:26  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
11:53:26  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
11:53:26  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
11:53:26  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
11:53:26  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
11:53:26  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
11:53:26  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
11:53:26  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
11:53:26  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
11:53:26  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
11:53:26  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
11:53:26  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
11:53:26  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
11:53:26  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
11:53:26  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
11:53:26  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
11:53:26  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
11:53:26  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
11:53:26  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
11:53:26  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
11:53:26  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
11:53:26  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
11:53:26  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
11:53:26  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
11:53:26  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
11:53:26  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
11:53:26  43  ,hh  att32
11:53:26  44  ,d   att33
11:53:26  45  ,w   att34
11:53:26  46  ,mpm att35
11:53:26  47  ,mph att36
11:53:26  48  ,trend att37
11:53:26  49  FROM svm6142
11:53:26  50  ORDER BY ydate
11:53:26  51  /

Table created.

Elapsed: 00:00:05.49
11:53:31 SQL> 
11:53:31 SQL> -- rpt
11:53:31 SQL> 
11:53:31 SQL> SELECT
11:53:31   2  pair
11:53:31   3  ,trend
11:53:31   4  ,gatt
11:53:31   5  ,COUNT(pair)
11:53:31   6  ,AVG(g6)
11:53:31   7  FROM svm6162
11:53:31   8  GROUP BY pair,trend,gatt
11:53:31   9  ORDER BY pair,trend,gatt
11:53:31  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7373 -.00101699
egb_usd 	-1 up	      2628 .002935012
egb_usd 	-1		48
egb_usd 	 1 nup	      6492 -.00134256
egb_usd 	 1 up	      2690 .002916199
egb_usd 	 1		24

6 rows selected.

Elapsed: 00:00:00.04
11:53:31 SQL> 
11:53:31 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
11:53:31 SQL> CREATE TABLE modsrc COMPRESS AS
11:53:31   2  SELECT
11:53:31   3  pair
11:53:31   4  ,ydate
11:53:31   5  ,prdate
11:53:31   6  ,trend
11:53:31   7  ,g6
11:53:31   8  ,gatt
11:53:31   9  ,gattn
11:53:31  10  FROM svm6162
11:53:31  11  /

Table created.

Elapsed: 00:00:00.08
11:53:31 SQL> 
11:53:31 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
11:53:32 SQL> 
11:53:32 SQL> DROP   TABLE egb_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
11:53:32 SQL> CREATE TABLE egb_ms610 COMPRESS AS
11:53:32   2  SELECT
11:53:32   3  ydate
11:53:32   4  ,trend egb_trend
11:53:32   5  ,g6    egb_g6
11:53:32   6  ,gatt  egb_gatt
11:53:32   7  ,gattn egb_gattn
11:53:32   8  FROM modsrc
11:53:32   9  /

Table created.

Elapsed: 00:00:00.07
11:53:32 SQL> 
11:53:32 SQL> ANALYZE TABLE egb_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
11:53:32 SQL> 
11:53:32 SQL> -- I need a copy of the attributes:
11:53:32 SQL> 
11:53:32 SQL> 
11:53:32 SQL> DROP   TABLE egb_att;

Table dropped.

Elapsed: 00:00:00.05
11:53:32 SQL> CREATE TABLE egb_att COMPRESS AS
11:53:32   2  SELECT
11:53:32   3  ydate
11:53:32   4  ,att00 egb_att00
11:53:32   5  ,att01 egb_att01
11:53:32   6  ,att02 egb_att02
11:53:32   7  ,att03 egb_att03
11:53:32   8  ,att04 egb_att04
11:53:32   9  ,att05 egb_att05
11:53:32  10  ,att06 egb_att06
11:53:32  11  ,att07 egb_att07
11:53:32  12  ,att08 egb_att08
11:53:32  13  ,att09 egb_att09
11:53:32  14  ,att10 egb_att10
11:53:32  15  ,att11 egb_att11
11:53:32  16  ,att12 egb_att12
11:53:32  17  ,att13 egb_att13
11:53:32  18  ,att14 egb_att14
11:53:32  19  ,att15 egb_att15
11:53:32  20  ,att16 egb_att16
11:53:32  21  ,att17 egb_att17
11:53:32  22  ,att18 egb_att18
11:53:32  23  ,att19 egb_att19
11:53:32  24  ,att20 egb_att20
11:53:32  25  ,att21 egb_att21
11:53:32  26  ,att22 egb_att22
11:53:32  27  ,att23 egb_att23
11:53:32  28  ,att24 egb_att24
11:53:32  29  ,att25 egb_att25
11:53:32  30  ,att26 egb_att26
11:53:32  31  ,att27 egb_att27
11:53:32  32  ,att28 egb_att28
11:53:32  33  ,att29 egb_att29
11:53:32  34  ,att30 egb_att30
11:53:32  35  ,att31 egb_att31
11:53:32  36  ,att32 egb_att32
11:53:32  37  ,att33 egb_att33
11:53:32  38  ,att34 egb_att34
11:53:32  39  ,att35 egb_att35
11:53:32  40  ,att36 egb_att36
11:53:32  41  ,att37 egb_att37
11:53:32  42  FROM svm6162
11:53:32  43  /

Table created.

Elapsed: 00:00:00.17
11:53:32 SQL> 
11:53:32 SQL> ANALYZE TABLE egb_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.43
11:53:33 SQL> 
11:53:33 SQL> -- rpt
11:53:33 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19255

Elapsed: 00:00:00.89
11:53:33 SQL> SELECT COUNT(*)FROM egb_att;

  COUNT(*)
----------
     19255

Elapsed: 00:00:00.01
11:53:33 SQL> 
11:53:33 SQL> --
11:53:33 SQL> -- ejp610.sql
11:53:33 SQL> --
11:53:33 SQL> 
11:53:33 SQL> -- Creates views and tables for backtesting a forex SVM strategy
11:53:33 SQL> 
11:53:33 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.38
11:53:34 SQL> 
11:53:34 SQL> -- I created di5min here:
11:53:34 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
11:53:34 SQL> 
11:53:34 SQL> CREATE OR REPLACE VIEW svm6102 AS
11:53:34   2  SELECT
11:53:34   3  pair
11:53:34   4  ,ydate
11:53:34   5  ,prdate
11:53:34   6  ,rownum rnum -- acts as t in my time-series
11:53:34   7  ,clse
11:53:34   8  -- Derive a bunch of attributes from clse, the latest price:
11:53:34   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
11:53:34  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
11:53:34  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
11:53:34  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
11:53:34  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
11:53:34  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
11:53:34  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
11:53:34  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
11:53:34  17  --
11:53:34  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
11:53:34  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
11:53:34  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
11:53:34  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
11:53:34  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
11:53:34  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
11:53:34  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
11:53:34  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
11:53:34  26  --
11:53:34  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
11:53:34  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
11:53:34  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
11:53:34  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
11:53:34  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
11:53:34  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
11:53:34  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
11:53:34  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
11:53:34  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
11:53:34  36  FROM di5min WHERE pair LIKE'%ejp%'
11:53:34  37  AND ydate > sysdate - 95
11:53:34  38  ORDER BY ydate
11:53:34  39  /

View created.

Elapsed: 00:00:00.05
11:53:34 SQL> 
11:53:34 SQL> -- rpt
11:53:34 SQL> 
11:53:34 SQL> SELECT
11:53:34   2  pair
11:53:34   3  ,COUNT(pair)
11:53:34   4  ,MIN(clse),MAX(clse)
11:53:34   5  ,MIN(avg6),MAX(avg6)
11:53:34   6  ,MIN(ydate),MAX(ydate)
11:53:34   7  FROM svm6102
11:53:34   8  GROUP BY pair
11:53:34   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ejp_usd       19253 107.643765	115.63485 107.776148 115.509678 2010-10-01 11:55:01 2011-01-04 11:50:00

Elapsed: 00:00:00.84
11:53:35 SQL> 
11:53:35 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
11:53:35 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.20
11:53:35 SQL> CREATE TABLE svm6122 COMPRESS AS
11:53:35   2  SELECT
11:53:35   3  pair
11:53:35   4  ,ydate
11:53:35   5  ,prdate
11:53:35   6  ,clse
11:53:35   7  -- g6 is important. I want to predict g6:
11:53:35   8  ,ld6 - clse g6
11:53:35   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
11:53:35  10  -- I want more attributes from the ones I derived above:
11:53:35  11  -- clse relation to moving-min
11:53:35  12  ,clse-min4  cm4
11:53:35  13  ,clse-min6  cm6
11:53:35  14  ,clse-min8  cm8
11:53:35  15  ,clse-min10 cm10
11:53:35  16  ,clse-min12 cm12
11:53:35  17  ,clse-min14 cm14
11:53:35  18  ,clse-min16 cm16
11:53:35  19  ,clse-min18 cm18
11:53:35  20  -- clse relation to moving-avg
11:53:35  21  ,clse-avg4  ca4
11:53:35  22  ,clse-avg6  ca6
11:53:35  23  ,clse-avg8  ca8
11:53:35  24  ,clse-avg10 ca10
11:53:35  25  ,clse-avg12 ca12
11:53:35  26  ,clse-avg14 ca14
11:53:35  27  ,clse-avg16 ca16
11:53:35  28  ,clse-avg18 ca18
11:53:35  29  -- clse relation to moving-max
11:53:35  30  ,clse-max4  cx4
11:53:35  31  ,clse-max6  cx6
11:53:35  32  ,clse-max8  cx8
11:53:35  33  ,clse-max10 cx10
11:53:35  34  ,clse-max12 cx12
11:53:35  35  ,clse-max14 cx14
11:53:35  36  ,clse-max16 cx16
11:53:35  37  ,clse-max18 cx18
11:53:35  38  -- Derive more attributes.
11:53:35  39  -- I want to use CORR() here to help SVM see the shape of the series.
11:53:35  40  -- But COVAR_POP is more stable:
11:53:35  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
11:53:35  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
11:53:35  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
11:53:35  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
11:53:35  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
11:53:35  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
11:53:35  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
11:53:35  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
11:53:35  49  -- Derive date related attributes:
11:53:35  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
11:53:35  51  ,0+TO_CHAR(ydate,'D')d
11:53:35  52  ,0+TO_CHAR(ydate,'W')w
11:53:35  53  -- mpm stands for minutes-past-midnight:
11:53:35  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
11:53:35  55  -- mph stands for minutes-past-hour:
11:53:35  56  ,0+TO_CHAR(ydate,'MI')mph
11:53:35  57  FROM svm6102
11:53:35  58  ORDER BY ydate
11:53:35  59  /

Table created.

Elapsed: 00:00:02.05
11:53:37 SQL> 
11:53:37 SQL> -- rpt
11:53:37 SQL> 
11:53:37 SQL> SELECT
11:53:37   2  pair
11:53:37   3  ,COUNT(pair)
11:53:37   4  ,MIN(clse),MAX(clse)
11:53:37   5  ,MIN(ydate),MAX(ydate)
11:53:37   6  FROM svm6122
11:53:37   7  GROUP BY pair
11:53:37   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ejp_usd       19253 107.643765	115.63485 2010-10-01 11:55:01 2011-01-04 11:50:00

Elapsed: 00:00:00.03
11:53:37 SQL> 
11:53:37 SQL> -- Prepare for derivation of NTILE based params:
11:53:37 SQL> 
11:53:37 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.22
11:53:37 SQL> CREATE TABLE svm6142 COMPRESS AS
11:53:37   2  SELECT
11:53:37   3  pair
11:53:37   4  ,ydate
11:53:37   5  ,prdate
11:53:37   6  ,clse
11:53:37   7  ,g6
11:53:37   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
11:53:37   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
11:53:37  10  ,CASE WHEN trend IS NULL THEN 1
11:53:37  11  	    WHEN trend =0      THEN 1
11:53:37  12  	    ELSE trend END trend
11:53:37  13  ,cm4
11:53:37  14  ,cm6
11:53:37  15  ,cm8
11:53:37  16  ,cm10
11:53:37  17  ,cm12
11:53:37  18  ,cm14
11:53:37  19  ,cm16
11:53:37  20  ,cm18
11:53:37  21  --
11:53:37  22  ,ca4
11:53:37  23  ,ca6
11:53:37  24  ,ca8
11:53:37  25  ,ca10
11:53:37  26  ,ca12
11:53:37  27  ,ca14
11:53:37  28  ,ca16
11:53:37  29  ,ca18
11:53:37  30  --
11:53:37  31  ,cx4
11:53:37  32  ,cx6
11:53:37  33  ,cx8
11:53:37  34  ,cx10
11:53:37  35  ,cx12
11:53:37  36  ,cx14
11:53:37  37  ,cx16
11:53:37  38  ,cx18
11:53:37  39  --
11:53:37  40  ,crr4
11:53:37  41  ,crr6
11:53:37  42  ,crr8
11:53:37  43  ,crr10
11:53:37  44  ,crr12
11:53:37  45  ,crr14
11:53:37  46  ,crr16
11:53:37  47  ,crr18
11:53:37  48  --
11:53:37  49  ,hh
11:53:37  50  ,d
11:53:37  51  ,w
11:53:37  52  ,mpm
11:53:37  53  ,mph
11:53:37  54  FROM svm6122
11:53:37  55  ORDER BY ydate
11:53:37  56  /

Table created.

Elapsed: 00:00:00.37
11:53:38 SQL> 
11:53:38 SQL> -- rpt
11:53:38 SQL> 
11:53:38 SQL> SELECT
11:53:38   2  pair
11:53:38   3  ,trend
11:53:38   4  ,gatt
11:53:38   5  ,COUNT(pair)
11:53:38   6  ,AVG(g6)
11:53:38   7  FROM svm6142
11:53:38   8  GROUP BY pair,trend,gatt
11:53:38   9  ORDER BY pair,trend,gatt
11:53:38  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      4860 -.32448106
ejp_usd 	-1 up	      4816 .272192265
ejp_usd 	 1 nup	      4854  -.2911121
ejp_usd 	 1 up	      4651 .288643225
ejp_usd 	 1		72

Elapsed: 00:00:00.04
11:53:38 SQL> 
11:53:38 SQL> 
11:53:38 SQL> -- Derive NTILE based params:
11:53:38 SQL> 
11:53:38 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.23
11:53:38 SQL> CREATE TABLE svm6162 COMPRESS AS
11:53:38   2  SELECT
11:53:38   3  pair
11:53:38   4  ,ydate
11:53:38   5  ,prdate
11:53:38   6  ,clse
11:53:38   7  ,g6
11:53:38   8  ,gatt
11:53:38   9  ,gattn
11:53:38  10  ,trend
11:53:38  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
11:53:38  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
11:53:38  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
11:53:38  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
11:53:38  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
11:53:38  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
11:53:38  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
11:53:38  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
11:53:38  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
11:53:38  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
11:53:38  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
11:53:38  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
11:53:38  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
11:53:38  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
11:53:38  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
11:53:38  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
11:53:38  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
11:53:38  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
11:53:38  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
11:53:38  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
11:53:38  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
11:53:38  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
11:53:38  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
11:53:38  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
11:53:38  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
11:53:38  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
11:53:38  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
11:53:38  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
11:53:38  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
11:53:38  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
11:53:38  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
11:53:38  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
11:53:38  43  ,hh  att32
11:53:38  44  ,d   att33
11:53:38  45  ,w   att34
11:53:38  46  ,mpm att35
11:53:38  47  ,mph att36
11:53:38  48  ,trend att37
11:53:38  49  FROM svm6142
11:53:38  50  ORDER BY ydate
11:53:38  51  /

Table created.

Elapsed: 00:00:04.70
11:53:43 SQL> 
11:53:43 SQL> -- rpt
11:53:43 SQL> 
11:53:43 SQL> SELECT
11:53:43   2  pair
11:53:43   3  ,trend
11:53:43   4  ,gatt
11:53:43   5  ,COUNT(pair)
11:53:43   6  ,AVG(g6)
11:53:43   7  FROM svm6162
11:53:43   8  GROUP BY pair,trend,gatt
11:53:43   9  ORDER BY pair,trend,gatt
11:53:43  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      4860 -.32448106
ejp_usd 	-1 up	      4816 .272192265
ejp_usd 	 1 nup	      4854  -.2911121
ejp_usd 	 1 up	      4651 .288643225
ejp_usd 	 1		72

Elapsed: 00:00:00.03
11:53:43 SQL> 
11:53:43 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
11:53:43 SQL> CREATE TABLE modsrc COMPRESS AS
11:53:43   2  SELECT
11:53:43   3  pair
11:53:43   4  ,ydate
11:53:43   5  ,prdate
11:53:43   6  ,trend
11:53:43   7  ,g6
11:53:43   8  ,gatt
11:53:43   9  ,gattn
11:53:43  10  FROM svm6162
11:53:43  11  /

Table created.

Elapsed: 00:00:00.08
11:53:43 SQL> 
11:53:43 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.22
11:53:43 SQL> 
11:53:43 SQL> DROP   TABLE ejp_ms610 ;

Table dropped.

Elapsed: 00:00:00.06
11:53:43 SQL> CREATE TABLE ejp_ms610 COMPRESS AS
11:53:43   2  SELECT
11:53:43   3  ydate
11:53:43   4  ,trend ejp_trend
11:53:43   5  ,g6    ejp_g6
11:53:43   6  ,gatt  ejp_gatt
11:53:43   7  ,gattn ejp_gattn
11:53:43   8  FROM modsrc
11:53:43   9  /

Table created.

Elapsed: 00:00:00.08
11:53:43 SQL> 
11:53:43 SQL> ANALYZE TABLE ejp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
11:53:43 SQL> 
11:53:43 SQL> -- I need a copy of the attributes:
11:53:43 SQL> 
11:53:43 SQL> 
11:53:43 SQL> DROP   TABLE ejp_att;

Table dropped.

Elapsed: 00:00:00.04
11:53:43 SQL> CREATE TABLE ejp_att COMPRESS AS
11:53:43   2  SELECT
11:53:43   3  ydate
11:53:43   4  ,att00 ejp_att00
11:53:43   5  ,att01 ejp_att01
11:53:43   6  ,att02 ejp_att02
11:53:43   7  ,att03 ejp_att03
11:53:43   8  ,att04 ejp_att04
11:53:43   9  ,att05 ejp_att05
11:53:43  10  ,att06 ejp_att06
11:53:43  11  ,att07 ejp_att07
11:53:43  12  ,att08 ejp_att08
11:53:43  13  ,att09 ejp_att09
11:53:43  14  ,att10 ejp_att10
11:53:43  15  ,att11 ejp_att11
11:53:43  16  ,att12 ejp_att12
11:53:43  17  ,att13 ejp_att13
11:53:43  18  ,att14 ejp_att14
11:53:43  19  ,att15 ejp_att15
11:53:43  20  ,att16 ejp_att16
11:53:43  21  ,att17 ejp_att17
11:53:43  22  ,att18 ejp_att18
11:53:43  23  ,att19 ejp_att19
11:53:43  24  ,att20 ejp_att20
11:53:43  25  ,att21 ejp_att21
11:53:43  26  ,att22 ejp_att22
11:53:43  27  ,att23 ejp_att23
11:53:43  28  ,att24 ejp_att24
11:53:43  29  ,att25 ejp_att25
11:53:43  30  ,att26 ejp_att26
11:53:43  31  ,att27 ejp_att27
11:53:43  32  ,att28 ejp_att28
11:53:43  33  ,att29 ejp_att29
11:53:43  34  ,att30 ejp_att30
11:53:43  35  ,att31 ejp_att31
11:53:43  36  ,att32 ejp_att32
11:53:43  37  ,att33 ejp_att33
11:53:43  38  ,att34 ejp_att34
11:53:43  39  ,att35 ejp_att35
11:53:43  40  ,att36 ejp_att36
11:53:43  41  ,att37 ejp_att37
11:53:43  42  FROM svm6162
11:53:43  43  /

Table created.

Elapsed: 00:00:00.17
11:53:44 SQL> 
11:53:44 SQL> ANALYZE TABLE ejp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
11:53:44 SQL> 
11:53:44 SQL> -- rpt
11:53:44 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19253

Elapsed: 00:00:00.82
11:53:45 SQL> SELECT COUNT(*)FROM ejp_att;

  COUNT(*)
----------
     19253

Elapsed: 00:00:00.00
11:53:45 SQL> 
11:53:45 SQL> --
11:53:45 SQL> -- ajp610.sql
11:53:45 SQL> --
11:53:45 SQL> 
11:53:45 SQL> -- Creates views and tables for backtesting a forex SVM strategy
11:53:45 SQL> 
11:53:45 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.36
11:53:45 SQL> 
11:53:45 SQL> -- I created di5min here:
11:53:45 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
11:53:45 SQL> 
11:53:45 SQL> CREATE OR REPLACE VIEW svm6102 AS
11:53:45   2  SELECT
11:53:45   3  pair
11:53:45   4  ,ydate
11:53:45   5  ,prdate
11:53:45   6  ,rownum rnum -- acts as t in my time-series
11:53:45   7  ,clse
11:53:45   8  -- Derive a bunch of attributes from clse, the latest price:
11:53:45   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
11:53:45  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
11:53:45  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
11:53:45  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
11:53:45  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
11:53:45  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
11:53:45  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
11:53:45  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
11:53:45  17  --
11:53:45  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
11:53:45  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
11:53:45  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
11:53:45  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
11:53:45  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
11:53:45  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
11:53:45  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
11:53:45  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
11:53:45  26  --
11:53:45  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
11:53:45  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
11:53:45  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
11:53:45  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
11:53:45  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
11:53:45  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
11:53:45  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
11:53:45  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
11:53:45  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
11:53:45  36  FROM di5min WHERE pair LIKE'%ajp%'
11:53:45  37  AND ydate > sysdate - 95
11:53:45  38  ORDER BY ydate
11:53:45  39  /

View created.

Elapsed: 00:00:00.04
11:53:45 SQL> 
11:53:45 SQL> -- rpt
11:53:45 SQL> 
11:53:45 SQL> SELECT
11:53:45   2  pair
11:53:45   3  ,COUNT(pair)
11:53:45   4  ,MIN(clse),MAX(clse)
11:53:45   5  ,MIN(avg6),MAX(avg6)
11:53:45   6  ,MIN(ydate),MAX(ydate)
11:53:45   7  FROM svm6102
11:53:45   8  GROUP BY pair
11:53:45   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ajp_usd       19250  78.249976 83.6669853 78.5106193  83.546306 2010-10-01 11:55:01 2011-01-04 11:50:00

Elapsed: 00:00:00.79
11:53:46 SQL> 
11:53:46 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
11:53:46 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.19
11:53:46 SQL> CREATE TABLE svm6122 COMPRESS AS
11:53:46   2  SELECT
11:53:46   3  pair
11:53:46   4  ,ydate
11:53:46   5  ,prdate
11:53:46   6  ,clse
11:53:46   7  -- g6 is important. I want to predict g6:
11:53:46   8  ,ld6 - clse g6
11:53:46   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
11:53:46  10  -- I want more attributes from the ones I derived above:
11:53:46  11  -- clse relation to moving-min
11:53:46  12  ,clse-min4  cm4
11:53:46  13  ,clse-min6  cm6
11:53:46  14  ,clse-min8  cm8
11:53:46  15  ,clse-min10 cm10
11:53:46  16  ,clse-min12 cm12
11:53:46  17  ,clse-min14 cm14
11:53:46  18  ,clse-min16 cm16
11:53:46  19  ,clse-min18 cm18
11:53:46  20  -- clse relation to moving-avg
11:53:46  21  ,clse-avg4  ca4
11:53:46  22  ,clse-avg6  ca6
11:53:46  23  ,clse-avg8  ca8
11:53:46  24  ,clse-avg10 ca10
11:53:46  25  ,clse-avg12 ca12
11:53:46  26  ,clse-avg14 ca14
11:53:46  27  ,clse-avg16 ca16
11:53:46  28  ,clse-avg18 ca18
11:53:46  29  -- clse relation to moving-max
11:53:46  30  ,clse-max4  cx4
11:53:46  31  ,clse-max6  cx6
11:53:46  32  ,clse-max8  cx8
11:53:46  33  ,clse-max10 cx10
11:53:46  34  ,clse-max12 cx12
11:53:46  35  ,clse-max14 cx14
11:53:46  36  ,clse-max16 cx16
11:53:46  37  ,clse-max18 cx18
11:53:46  38  -- Derive more attributes.
11:53:46  39  -- I want to use CORR() here to help SVM see the shape of the series.
11:53:46  40  -- But COVAR_POP is more stable:
11:53:46  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
11:53:46  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
11:53:46  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
11:53:46  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
11:53:46  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
11:53:46  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
11:53:46  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
11:53:46  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
11:53:46  49  -- Derive date related attributes:
11:53:46  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
11:53:46  51  ,0+TO_CHAR(ydate,'D')d
11:53:46  52  ,0+TO_CHAR(ydate,'W')w
11:53:46  53  -- mpm stands for minutes-past-midnight:
11:53:46  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
11:53:46  55  -- mph stands for minutes-past-hour:
11:53:46  56  ,0+TO_CHAR(ydate,'MI')mph
11:53:46  57  FROM svm6102
11:53:46  58  ORDER BY ydate
11:53:46  59  /

Table created.

Elapsed: 00:00:02.03
11:53:48 SQL> 
11:53:48 SQL> -- rpt
11:53:48 SQL> 
11:53:48 SQL> SELECT
11:53:48   2  pair
11:53:48   3  ,COUNT(pair)
11:53:48   4  ,MIN(clse),MAX(clse)
11:53:48   5  ,MIN(ydate),MAX(ydate)
11:53:48   6  FROM svm6122
11:53:48   7  GROUP BY pair
11:53:48   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ajp_usd       19250  78.249976 83.6669853 2010-10-01 11:55:01 2011-01-04 11:50:00

Elapsed: 00:00:00.03
11:53:48 SQL> 
11:53:48 SQL> -- Prepare for derivation of NTILE based params:
11:53:48 SQL> 
11:53:48 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.19
11:53:49 SQL> CREATE TABLE svm6142 COMPRESS AS
11:53:49   2  SELECT
11:53:49   3  pair
11:53:49   4  ,ydate
11:53:49   5  ,prdate
11:53:49   6  ,clse
11:53:49   7  ,g6
11:53:49   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
11:53:49   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
11:53:49  10  ,CASE WHEN trend IS NULL THEN 1
11:53:49  11  	    WHEN trend =0      THEN 1
11:53:49  12  	    ELSE trend END trend
11:53:49  13  ,cm4
11:53:49  14  ,cm6
11:53:49  15  ,cm8
11:53:49  16  ,cm10
11:53:49  17  ,cm12
11:53:49  18  ,cm14
11:53:49  19  ,cm16
11:53:49  20  ,cm18
11:53:49  21  --
11:53:49  22  ,ca4
11:53:49  23  ,ca6
11:53:49  24  ,ca8
11:53:49  25  ,ca10
11:53:49  26  ,ca12
11:53:49  27  ,ca14
11:53:49  28  ,ca16
11:53:49  29  ,ca18
11:53:49  30  --
11:53:49  31  ,cx4
11:53:49  32  ,cx6
11:53:49  33  ,cx8
11:53:49  34  ,cx10
11:53:49  35  ,cx12
11:53:49  36  ,cx14
11:53:49  37  ,cx16
11:53:49  38  ,cx18
11:53:49  39  --
11:53:49  40  ,crr4
11:53:49  41  ,crr6
11:53:49  42  ,crr8
11:53:49  43  ,crr10
11:53:49  44  ,crr12
11:53:49  45  ,crr14
11:53:49  46  ,crr16
11:53:49  47  ,crr18
11:53:49  48  --
11:53:49  49  ,hh
11:53:49  50  ,d
11:53:49  51  ,w
11:53:49  52  ,mpm
11:53:49  53  ,mph
11:53:49  54  FROM svm6122
11:53:49  55  ORDER BY ydate
11:53:49  56  /

Table created.

Elapsed: 00:00:00.37
11:53:49 SQL> 
11:53:49 SQL> -- rpt
11:53:49 SQL> 
11:53:49 SQL> SELECT
11:53:49   2  pair
11:53:49   3  ,trend
11:53:49   4  ,gatt
11:53:49   5  ,COUNT(pair)
11:53:49   6  ,AVG(g6)
11:53:49   7  FROM svm6142
11:53:49   8  GROUP BY pair,trend,gatt
11:53:49   9  ORDER BY pair,trend,gatt
11:53:49  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ajp_usd 	-1 nup	      4100 -.22647652
ajp_usd 	-1 up	      5080 .220736342
ajp_usd 	-1		68
ajp_usd 	 1 nup	      5192 -.20024399
ajp_usd 	 1 up	      4806 .205773588
ajp_usd 	 1		 4

6 rows selected.

Elapsed: 00:00:00.04
11:53:49 SQL> 
11:53:49 SQL> 
11:53:49 SQL> -- Derive NTILE based params:
11:53:49 SQL> 
11:53:49 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.20
11:53:49 SQL> CREATE TABLE svm6162 COMPRESS AS
11:53:49   2  SELECT
11:53:49   3  pair
11:53:49   4  ,ydate
11:53:49   5  ,prdate
11:53:49   6  ,clse
11:53:49   7  ,g6
11:53:49   8  ,gatt
11:53:49   9  ,gattn
11:53:49  10  ,trend
11:53:49  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
11:53:49  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
11:53:49  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
11:53:49  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
11:53:49  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
11:53:49  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
11:53:49  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
11:53:49  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
11:53:49  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
11:53:49  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
11:53:49  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
11:53:49  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
11:53:49  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
11:53:49  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
11:53:49  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
11:53:49  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
11:53:49  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
11:53:49  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
11:53:49  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
11:53:49  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
11:53:49  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
11:53:49  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
11:53:49  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
11:53:49  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
11:53:49  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
11:53:49  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
11:53:49  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
11:53:49  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
11:53:49  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
11:53:49  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
11:53:49  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
11:53:49  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
11:53:49  43  ,hh  att32
11:53:49  44  ,d   att33
11:53:49  45  ,w   att34
11:53:49  46  ,mpm att35
11:53:49  47  ,mph att36
11:53:49  48  ,trend att37
11:53:49  49  FROM svm6142
11:53:49  50  ORDER BY ydate
11:53:49  51  /

Table created.

Elapsed: 00:00:04.83
11:53:54 SQL> 
11:53:54 SQL> -- rpt
11:53:54 SQL> 
11:53:54 SQL> SELECT
11:53:54   2  pair
11:53:54   3  ,trend
11:53:54   4  ,gatt
11:53:54   5  ,COUNT(pair)
11:53:54   6  ,AVG(g6)
11:53:54   7  FROM svm6162
11:53:54   8  GROUP BY pair,trend,gatt
11:53:54   9  ORDER BY pair,trend,gatt
11:53:54  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ajp_usd 	-1 nup	      4100 -.22647652
ajp_usd 	-1 up	      5080 .220736342
ajp_usd 	-1		68
ajp_usd 	 1 nup	      5192 -.20024399
ajp_usd 	 1 up	      4806 .205773588
ajp_usd 	 1		 4

6 rows selected.

Elapsed: 00:00:00.03
11:53:54 SQL> 
11:53:54 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
11:53:54 SQL> CREATE TABLE modsrc COMPRESS AS
11:53:54   2  SELECT
11:53:54   3  pair
11:53:54   4  ,ydate
11:53:54   5  ,prdate
11:53:54   6  ,trend
11:53:54   7  ,g6
11:53:54   8  ,gatt
11:53:54   9  ,gattn
11:53:54  10  FROM svm6162
11:53:54  11  /

Table created.

Elapsed: 00:00:00.09
11:53:54 SQL> 
11:53:54 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.23
11:53:54 SQL> 
11:53:54 SQL> DROP   TABLE ajp_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
11:53:54 SQL> CREATE TABLE ajp_ms610 COMPRESS AS
11:53:54   2  SELECT
11:53:54   3  ydate
11:53:54   4  ,trend ajp_trend
11:53:54   5  ,g6    ajp_g6
11:53:54   6  ,gatt  ajp_gatt
11:53:54   7  ,gattn ajp_gattn
11:53:54   8  FROM modsrc
11:53:54   9  /

Table created.

Elapsed: 00:00:00.08
11:53:55 SQL> 
11:53:55 SQL> ANALYZE TABLE ajp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
11:53:55 SQL> 
11:53:55 SQL> -- I need a copy of the attributes:
11:53:55 SQL> 
11:53:55 SQL> 
11:53:55 SQL> DROP   TABLE ajp_att;

Table dropped.

Elapsed: 00:00:00.04
11:53:55 SQL> CREATE TABLE ajp_att COMPRESS AS
11:53:55   2  SELECT
11:53:55   3  ydate
11:53:55   4  ,att00 ajp_att00
11:53:55   5  ,att01 ajp_att01
11:53:55   6  ,att02 ajp_att02
11:53:55   7  ,att03 ajp_att03
11:53:55   8  ,att04 ajp_att04
11:53:55   9  ,att05 ajp_att05
11:53:55  10  ,att06 ajp_att06
11:53:55  11  ,att07 ajp_att07
11:53:55  12  ,att08 ajp_att08
11:53:55  13  ,att09 ajp_att09
11:53:55  14  ,att10 ajp_att10
11:53:55  15  ,att11 ajp_att11
11:53:55  16  ,att12 ajp_att12
11:53:55  17  ,att13 ajp_att13
11:53:55  18  ,att14 ajp_att14
11:53:55  19  ,att15 ajp_att15
11:53:55  20  ,att16 ajp_att16
11:53:55  21  ,att17 ajp_att17
11:53:55  22  ,att18 ajp_att18
11:53:55  23  ,att19 ajp_att19
11:53:55  24  ,att20 ajp_att20
11:53:55  25  ,att21 ajp_att21
11:53:55  26  ,att22 ajp_att22
11:53:55  27  ,att23 ajp_att23
11:53:55  28  ,att24 ajp_att24
11:53:55  29  ,att25 ajp_att25
11:53:55  30  ,att26 ajp_att26
11:53:55  31  ,att27 ajp_att27
11:53:55  32  ,att28 ajp_att28
11:53:55  33  ,att29 ajp_att29
11:53:55  34  ,att30 ajp_att30
11:53:55  35  ,att31 ajp_att31
11:53:55  36  ,att32 ajp_att32
11:53:55  37  ,att33 ajp_att33
11:53:55  38  ,att34 ajp_att34
11:53:55  39  ,att35 ajp_att35
11:53:55  40  ,att36 ajp_att36
11:53:55  41  ,att37 ajp_att37
11:53:55  42  FROM svm6162
11:53:55  43  /

Table created.

Elapsed: 00:00:00.16
11:53:55 SQL> 
11:53:55 SQL> ANALYZE TABLE ajp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
11:53:55 SQL> 
11:53:55 SQL> -- rpt
11:53:55 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19250

Elapsed: 00:00:00.74
11:53:56 SQL> SELECT COUNT(*)FROM ajp_att;

  COUNT(*)
----------
     19250

Elapsed: 00:00:00.00
11:53:56 SQL> 
11:53:56 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
