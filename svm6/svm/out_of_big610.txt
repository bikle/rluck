
SQL*Plus: Release 11.2.0.1.0 Production on Tue Dec 28 21:08:35 2010

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

21:08:35 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
21:08:35 SQL> 21:08:35 SQL> --
21:08:35 SQL> -- eur610.sql
21:08:35 SQL> --
21:08:35 SQL> 
21:08:35 SQL> -- Creates views and tables for backtesting a forex SVM strategy
21:08:35 SQL> 
21:08:35 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.02
21:08:35 SQL> 
21:08:35 SQL> -- I created di5min here:
21:08:35 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
21:08:35 SQL> 
21:08:35 SQL> CREATE OR REPLACE VIEW svm6102 AS
21:08:35   2  SELECT
21:08:35   3  pair
21:08:35   4  ,ydate
21:08:35   5  ,prdate
21:08:35   6  ,rownum rnum -- acts as t in my time-series
21:08:35   7  ,clse
21:08:35   8  -- Derive a bunch of attributes from clse, the latest price:
21:08:35   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
21:08:35  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
21:08:35  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
21:08:35  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
21:08:35  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
21:08:35  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
21:08:35  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
21:08:35  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
21:08:35  17  --
21:08:35  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
21:08:35  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
21:08:35  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
21:08:35  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
21:08:35  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
21:08:35  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
21:08:35  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
21:08:35  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
21:08:35  26  --
21:08:35  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
21:08:35  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
21:08:35  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
21:08:35  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
21:08:35  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
21:08:35  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
21:08:35  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
21:08:35  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
21:08:35  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
21:08:35  36  FROM di5min WHERE pair LIKE'%eur%'
21:08:35  37  AND ydate > sysdate - 95
21:08:35  38  ORDER BY ydate
21:08:35  39  /

View created.

Elapsed: 00:00:00.13
21:08:35 SQL> 
21:08:35 SQL> -- rpt
21:08:35 SQL> 
21:08:35 SQL> SELECT
21:08:35   2  pair
21:08:35   3  ,COUNT(pair)
21:08:35   4  ,MIN(clse),MAX(clse)
21:08:35   5  ,MIN(avg6),MAX(avg6)
21:08:35   6  ,MIN(ydate),MAX(ydate)
21:08:35   7  FROM svm6102
21:08:35   8  GROUP BY pair
21:08:35   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_usd       19285    1.29735	   1.4273 1.29875103 1.42436233 2010-09-24 21:10:01 2010-12-28 21:05:00

Elapsed: 00:00:00.91
21:08:36 SQL> 
21:08:36 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
21:08:36 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.15
21:08:36 SQL> CREATE TABLE svm6122 COMPRESS AS
21:08:36   2  SELECT
21:08:36   3  pair
21:08:36   4  ,ydate
21:08:36   5  ,prdate
21:08:36   6  ,clse
21:08:36   7  -- g6 is important. I want to predict g6:
21:08:36   8  ,ld6 - clse g6
21:08:36   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
21:08:36  10  -- I want more attributes from the ones I derived above:
21:08:36  11  -- clse relation to moving-min
21:08:36  12  ,clse-min4  cm4
21:08:36  13  ,clse-min6  cm6
21:08:36  14  ,clse-min8  cm8
21:08:36  15  ,clse-min10 cm10
21:08:36  16  ,clse-min12 cm12
21:08:36  17  ,clse-min14 cm14
21:08:36  18  ,clse-min16 cm16
21:08:36  19  ,clse-min18 cm18
21:08:36  20  -- clse relation to moving-avg
21:08:36  21  ,clse-avg4  ca4
21:08:36  22  ,clse-avg6  ca6
21:08:36  23  ,clse-avg8  ca8
21:08:36  24  ,clse-avg10 ca10
21:08:36  25  ,clse-avg12 ca12
21:08:36  26  ,clse-avg14 ca14
21:08:36  27  ,clse-avg16 ca16
21:08:36  28  ,clse-avg18 ca18
21:08:36  29  -- clse relation to moving-max
21:08:36  30  ,clse-max4  cx4
21:08:36  31  ,clse-max6  cx6
21:08:36  32  ,clse-max8  cx8
21:08:36  33  ,clse-max10 cx10
21:08:36  34  ,clse-max12 cx12
21:08:36  35  ,clse-max14 cx14
21:08:36  36  ,clse-max16 cx16
21:08:36  37  ,clse-max18 cx18
21:08:36  38  -- Derive more attributes.
21:08:36  39  -- I want to use CORR() here to help SVM see the shape of the series.
21:08:36  40  -- But COVAR_POP is more stable:
21:08:36  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
21:08:36  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
21:08:36  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
21:08:36  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
21:08:36  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
21:08:36  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
21:08:36  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
21:08:36  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
21:08:36  49  -- Derive date related attributes:
21:08:36  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
21:08:36  51  ,0+TO_CHAR(ydate,'D')d
21:08:36  52  ,0+TO_CHAR(ydate,'W')w
21:08:36  53  -- mpm stands for minutes-past-midnight:
21:08:36  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
21:08:36  55  -- mph stands for minutes-past-hour:
21:08:36  56  ,0+TO_CHAR(ydate,'MI')mph
21:08:36  57  FROM svm6102
21:08:36  58  ORDER BY ydate
21:08:36  59  /

Table created.

Elapsed: 00:00:02.37
21:08:38 SQL> 
21:08:38 SQL> -- rpt
21:08:38 SQL> 
21:08:38 SQL> SELECT
21:08:38   2  pair
21:08:38   3  ,COUNT(pair)
21:08:38   4  ,MIN(clse),MAX(clse)
21:08:38   5  ,MIN(ydate),MAX(ydate)
21:08:38   6  FROM svm6122
21:08:38   7  GROUP BY pair
21:08:38   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_usd       19285    1.29735	   1.4273 2010-09-24 21:10:01 2010-12-28 21:05:00

Elapsed: 00:00:00.14
21:08:39 SQL> 
21:08:39 SQL> -- Prepare for derivation of NTILE based params:
21:08:39 SQL> 
21:08:39 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.30
21:08:39 SQL> CREATE TABLE svm6142 COMPRESS AS
21:08:39   2  SELECT
21:08:39   3  pair
21:08:39   4  ,ydate
21:08:39   5  ,prdate
21:08:39   6  ,clse
21:08:39   7  ,g6
21:08:39   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
21:08:39   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
21:08:39  10  ,CASE WHEN trend IS NULL THEN 1
21:08:39  11  	    WHEN trend =0      THEN 1
21:08:39  12  	    ELSE trend END trend
21:08:39  13  ,cm4
21:08:39  14  ,cm6
21:08:39  15  ,cm8
21:08:39  16  ,cm10
21:08:39  17  ,cm12
21:08:39  18  ,cm14
21:08:39  19  ,cm16
21:08:39  20  ,cm18
21:08:39  21  --
21:08:39  22  ,ca4
21:08:39  23  ,ca6
21:08:39  24  ,ca8
21:08:39  25  ,ca10
21:08:39  26  ,ca12
21:08:39  27  ,ca14
21:08:39  28  ,ca16
21:08:39  29  ,ca18
21:08:39  30  --
21:08:39  31  ,cx4
21:08:39  32  ,cx6
21:08:39  33  ,cx8
21:08:39  34  ,cx10
21:08:39  35  ,cx12
21:08:39  36  ,cx14
21:08:39  37  ,cx16
21:08:39  38  ,cx18
21:08:39  39  --
21:08:39  40  ,crr4
21:08:39  41  ,crr6
21:08:39  42  ,crr8
21:08:39  43  ,crr10
21:08:39  44  ,crr12
21:08:39  45  ,crr14
21:08:39  46  ,crr16
21:08:39  47  ,crr18
21:08:39  48  --
21:08:39  49  ,hh
21:08:39  50  ,d
21:08:39  51  ,w
21:08:39  52  ,mpm
21:08:39  53  ,mph
21:08:39  54  FROM svm6122
21:08:39  55  ORDER BY ydate
21:08:39  56  /

Table created.

Elapsed: 00:00:00.39
21:08:39 SQL> 
21:08:39 SQL> -- rpt
21:08:39 SQL> 
21:08:39 SQL> SELECT
21:08:39   2  pair
21:08:39   3  ,trend
21:08:39   4  ,gatt
21:08:39   5  ,COUNT(pair)
21:08:39   6  ,AVG(g6)
21:08:39   7  FROM svm6142
21:08:39   8  GROUP BY pair,trend,gatt
21:08:39   9  ORDER BY pair,trend,gatt
21:08:39  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6066 -.00310628
eur_usd 	-1 up	      3630 .004485382
eur_usd 	-1		72
eur_usd 	 1 nup	      5872 -.00319018
eur_usd 	 1 up	      3645 .005140343

Elapsed: 00:00:00.07
21:08:39 SQL> 
21:08:39 SQL> 
21:08:39 SQL> -- Derive NTILE based params:
21:08:39 SQL> 
21:08:39 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.72
21:08:40 SQL> CREATE TABLE svm6162 COMPRESS AS
21:08:40   2  SELECT
21:08:40   3  pair
21:08:40   4  ,ydate
21:08:40   5  ,prdate
21:08:40   6  ,clse
21:08:40   7  ,g6
21:08:40   8  ,gatt
21:08:40   9  ,gattn
21:08:40  10  ,trend
21:08:40  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
21:08:40  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
21:08:40  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
21:08:40  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
21:08:40  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
21:08:40  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
21:08:40  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
21:08:40  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
21:08:40  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
21:08:40  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
21:08:40  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
21:08:40  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
21:08:40  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
21:08:40  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
21:08:40  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
21:08:40  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
21:08:40  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
21:08:40  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
21:08:40  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
21:08:40  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
21:08:40  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
21:08:40  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
21:08:40  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
21:08:40  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
21:08:40  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
21:08:40  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
21:08:40  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
21:08:40  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
21:08:40  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
21:08:40  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
21:08:40  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
21:08:40  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
21:08:40  43  ,hh  att32
21:08:40  44  ,d   att33
21:08:40  45  ,w   att34
21:08:40  46  ,mpm att35
21:08:40  47  ,mph att36
21:08:40  48  ,trend att37
21:08:40  49  FROM svm6142
21:08:40  50  ORDER BY ydate
21:08:40  51  /

Table created.

Elapsed: 00:00:04.60
21:08:45 SQL> 
21:08:45 SQL> -- rpt
21:08:45 SQL> 
21:08:45 SQL> SELECT
21:08:45   2  pair
21:08:45   3  ,trend
21:08:45   4  ,gatt
21:08:45   5  ,COUNT(pair)
21:08:45   6  ,AVG(g6)
21:08:45   7  FROM svm6162
21:08:45   8  GROUP BY pair,trend,gatt
21:08:45   9  ORDER BY pair,trend,gatt
21:08:45  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6066 -.00310628
eur_usd 	-1 up	      3630 .004485382
eur_usd 	-1		72
eur_usd 	 1 nup	      5872 -.00319018
eur_usd 	 1 up	      3645 .005140343

Elapsed: 00:00:00.03
21:08:45 SQL> 
21:08:45 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.17
21:08:45 SQL> CREATE TABLE modsrc COMPRESS AS
21:08:45   2  SELECT
21:08:45   3  pair
21:08:45   4  ,ydate
21:08:45   5  ,prdate
21:08:45   6  ,trend
21:08:45   7  ,g6
21:08:45   8  ,gatt
21:08:45   9  ,gattn
21:08:45  10  FROM svm6162
21:08:45  11  /

Table created.

Elapsed: 00:00:00.09
21:08:45 SQL> 
21:08:45 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
21:08:45 SQL> 
21:08:45 SQL> DROP   TABLE eur_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
21:08:45 SQL> CREATE TABLE eur_ms610 COMPRESS AS
21:08:45   2  SELECT
21:08:45   3  ydate
21:08:45   4  ,trend eur_trend
21:08:45   5  ,g6    eur_g6
21:08:45   6  ,gatt  eur_gatt
21:08:45   7  ,gattn eur_gattn
21:08:45   8  FROM modsrc
21:08:45   9  /

Table created.

Elapsed: 00:00:00.07
21:08:45 SQL> 
21:08:45 SQL> ANALYZE TABLE eur_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.14
21:08:45 SQL> 
21:08:45 SQL> -- I need a copy of the attributes:
21:08:45 SQL> 
21:08:45 SQL> 
21:08:45 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.05
21:08:45 SQL> CREATE TABLE eur_att COMPRESS AS
21:08:45   2  SELECT
21:08:45   3  ydate
21:08:45   4  ,att00 eur_att00
21:08:45   5  ,att01 eur_att01
21:08:45   6  ,att02 eur_att02
21:08:45   7  ,att03 eur_att03
21:08:45   8  ,att04 eur_att04
21:08:45   9  ,att05 eur_att05
21:08:45  10  ,att06 eur_att06
21:08:45  11  ,att07 eur_att07
21:08:45  12  ,att08 eur_att08
21:08:45  13  ,att09 eur_att09
21:08:45  14  ,att10 eur_att10
21:08:45  15  ,att11 eur_att11
21:08:45  16  ,att12 eur_att12
21:08:45  17  ,att13 eur_att13
21:08:45  18  ,att14 eur_att14
21:08:45  19  ,att15 eur_att15
21:08:45  20  ,att16 eur_att16
21:08:45  21  ,att17 eur_att17
21:08:45  22  ,att18 eur_att18
21:08:45  23  ,att19 eur_att19
21:08:45  24  ,att20 eur_att20
21:08:45  25  ,att21 eur_att21
21:08:45  26  ,att22 eur_att22
21:08:45  27  ,att23 eur_att23
21:08:45  28  ,att24 eur_att24
21:08:45  29  ,att25 eur_att25
21:08:45  30  ,att26 eur_att26
21:08:45  31  ,att27 eur_att27
21:08:45  32  ,att28 eur_att28
21:08:45  33  ,att29 eur_att29
21:08:45  34  ,att30 eur_att30
21:08:45  35  ,att31 eur_att31
21:08:45  36  ,att32 eur_att32
21:08:45  37  ,att33 eur_att33
21:08:45  38  ,att34 eur_att34
21:08:45  39  ,att35 eur_att35
21:08:45  40  ,att36 eur_att36
21:08:45  41  ,att37 eur_att37
21:08:45  42  FROM svm6162
21:08:45  43  /

Table created.

Elapsed: 00:00:00.19
21:08:46 SQL> 
21:08:46 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.67
21:08:46 SQL> 
21:08:46 SQL> -- rpt
21:08:46 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19285

Elapsed: 00:00:00.89
21:08:47 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     19285

Elapsed: 00:00:00.01
21:08:47 SQL> 
21:08:47 SQL> --
21:08:47 SQL> -- aud610.sql
21:08:47 SQL> --
21:08:47 SQL> 
21:08:47 SQL> -- Creates views and tables for backtesting a forex SVM strategy
21:08:47 SQL> 
21:08:47 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:01.08
21:08:48 SQL> 
21:08:48 SQL> -- I created di5min here:
21:08:48 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
21:08:48 SQL> 
21:08:48 SQL> CREATE OR REPLACE VIEW svm6102 AS
21:08:48   2  SELECT
21:08:48   3  pair
21:08:48   4  ,ydate
21:08:48   5  ,prdate
21:08:48   6  ,rownum rnum -- acts as t in my time-series
21:08:48   7  ,clse
21:08:48   8  -- Derive a bunch of attributes from clse, the latest price:
21:08:48   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
21:08:48  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
21:08:48  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
21:08:48  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
21:08:48  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
21:08:48  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
21:08:48  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
21:08:48  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
21:08:48  17  --
21:08:48  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
21:08:48  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
21:08:48  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
21:08:48  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
21:08:48  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
21:08:48  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
21:08:48  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
21:08:48  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
21:08:48  26  --
21:08:48  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
21:08:48  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
21:08:48  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
21:08:48  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
21:08:48  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
21:08:48  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
21:08:48  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
21:08:48  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
21:08:48  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
21:08:48  36  FROM di5min WHERE pair LIKE'%aud%'
21:08:48  37  AND ydate > sysdate - 95
21:08:48  38  ORDER BY ydate
21:08:48  39  /

View created.

Elapsed: 00:00:00.06
21:08:48 SQL> 
21:08:48 SQL> -- rpt
21:08:48 SQL> 
21:08:48 SQL> SELECT
21:08:48   2  pair
21:08:48   3  ,COUNT(pair)
21:08:48   4  ,MIN(clse),MAX(clse)
21:08:48   5  ,MIN(avg6),MAX(avg6)
21:08:48   6  ,MIN(ydate),MAX(ydate)
21:08:48   7  FROM svm6102
21:08:48   8  GROUP BY pair
21:08:48   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
aud_usd       19282	.95405	   1.0181 .957141438 1.01556438 2010-09-24 21:10:01 2010-12-28 21:05:00

Elapsed: 00:00:00.86
21:08:49 SQL> 
21:08:49 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
21:08:49 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.22
21:08:49 SQL> CREATE TABLE svm6122 COMPRESS AS
21:08:49   2  SELECT
21:08:49   3  pair
21:08:49   4  ,ydate
21:08:49   5  ,prdate
21:08:49   6  ,clse
21:08:49   7  -- g6 is important. I want to predict g6:
21:08:49   8  ,ld6 - clse g6
21:08:49   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
21:08:49  10  -- I want more attributes from the ones I derived above:
21:08:49  11  -- clse relation to moving-min
21:08:49  12  ,clse-min4  cm4
21:08:49  13  ,clse-min6  cm6
21:08:49  14  ,clse-min8  cm8
21:08:49  15  ,clse-min10 cm10
21:08:49  16  ,clse-min12 cm12
21:08:49  17  ,clse-min14 cm14
21:08:49  18  ,clse-min16 cm16
21:08:49  19  ,clse-min18 cm18
21:08:49  20  -- clse relation to moving-avg
21:08:49  21  ,clse-avg4  ca4
21:08:49  22  ,clse-avg6  ca6
21:08:49  23  ,clse-avg8  ca8
21:08:49  24  ,clse-avg10 ca10
21:08:49  25  ,clse-avg12 ca12
21:08:49  26  ,clse-avg14 ca14
21:08:49  27  ,clse-avg16 ca16
21:08:49  28  ,clse-avg18 ca18
21:08:49  29  -- clse relation to moving-max
21:08:49  30  ,clse-max4  cx4
21:08:49  31  ,clse-max6  cx6
21:08:49  32  ,clse-max8  cx8
21:08:49  33  ,clse-max10 cx10
21:08:49  34  ,clse-max12 cx12
21:08:49  35  ,clse-max14 cx14
21:08:49  36  ,clse-max16 cx16
21:08:49  37  ,clse-max18 cx18
21:08:49  38  -- Derive more attributes.
21:08:49  39  -- I want to use CORR() here to help SVM see the shape of the series.
21:08:49  40  -- But COVAR_POP is more stable:
21:08:49  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
21:08:49  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
21:08:49  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
21:08:49  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
21:08:49  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
21:08:49  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
21:08:49  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
21:08:49  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
21:08:49  49  -- Derive date related attributes:
21:08:49  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
21:08:49  51  ,0+TO_CHAR(ydate,'D')d
21:08:49  52  ,0+TO_CHAR(ydate,'W')w
21:08:49  53  -- mpm stands for minutes-past-midnight:
21:08:49  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
21:08:49  55  -- mph stands for minutes-past-hour:
21:08:49  56  ,0+TO_CHAR(ydate,'MI')mph
21:08:49  57  FROM svm6102
21:08:49  58  ORDER BY ydate
21:08:49  59  /

Table created.

Elapsed: 00:00:02.01
21:08:51 SQL> 
21:08:51 SQL> -- rpt
21:08:51 SQL> 
21:08:51 SQL> SELECT
21:08:51   2  pair
21:08:51   3  ,COUNT(pair)
21:08:51   4  ,MIN(clse),MAX(clse)
21:08:51   5  ,MIN(ydate),MAX(ydate)
21:08:51   6  FROM svm6122
21:08:51   7  GROUP BY pair
21:08:51   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
aud_usd       19282	.95405	   1.0181 2010-09-24 21:10:01 2010-12-28 21:05:00

Elapsed: 00:00:00.08
21:08:51 SQL> 
21:08:51 SQL> -- Prepare for derivation of NTILE based params:
21:08:51 SQL> 
21:08:51 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.81
21:08:52 SQL> CREATE TABLE svm6142 COMPRESS AS
21:08:52   2  SELECT
21:08:52   3  pair
21:08:52   4  ,ydate
21:08:52   5  ,prdate
21:08:52   6  ,clse
21:08:52   7  ,g6
21:08:52   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
21:08:52   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
21:08:52  10  ,CASE WHEN trend IS NULL THEN 1
21:08:52  11  	    WHEN trend =0      THEN 1
21:08:52  12  	    ELSE trend END trend
21:08:52  13  ,cm4
21:08:52  14  ,cm6
21:08:52  15  ,cm8
21:08:52  16  ,cm10
21:08:52  17  ,cm12
21:08:52  18  ,cm14
21:08:52  19  ,cm16
21:08:52  20  ,cm18
21:08:52  21  --
21:08:52  22  ,ca4
21:08:52  23  ,ca6
21:08:52  24  ,ca8
21:08:52  25  ,ca10
21:08:52  26  ,ca12
21:08:52  27  ,ca14
21:08:52  28  ,ca16
21:08:52  29  ,ca18
21:08:52  30  --
21:08:52  31  ,cx4
21:08:52  32  ,cx6
21:08:52  33  ,cx8
21:08:52  34  ,cx10
21:08:52  35  ,cx12
21:08:52  36  ,cx14
21:08:52  37  ,cx16
21:08:52  38  ,cx18
21:08:52  39  --
21:08:52  40  ,crr4
21:08:52  41  ,crr6
21:08:52  42  ,crr8
21:08:52  43  ,crr10
21:08:52  44  ,crr12
21:08:52  45  ,crr14
21:08:52  46  ,crr16
21:08:52  47  ,crr18
21:08:52  48  --
21:08:52  49  ,hh
21:08:52  50  ,d
21:08:52  51  ,w
21:08:52  52  ,mpm
21:08:52  53  ,mph
21:08:52  54  FROM svm6122
21:08:52  55  ORDER BY ydate
21:08:52  56  /

Table created.

Elapsed: 00:00:00.40
21:08:53 SQL> 
21:08:53 SQL> -- rpt
21:08:53 SQL> 
21:08:53 SQL> SELECT
21:08:53   2  pair
21:08:53   3  ,trend
21:08:53   4  ,gatt
21:08:53   5  ,COUNT(pair)
21:08:53   6  ,AVG(g6)
21:08:53   7  FROM svm6142
21:08:53   8  GROUP BY pair,trend,gatt
21:08:53   9  ORDER BY pair,trend,gatt
21:08:53  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5098 -.00215384
aud_usd 	-1 up	      3772 .003741417
aud_usd 	-1		56
aud_usd 	 1 nup	      6693 -.00213311
aud_usd 	 1 up	      3647 .004062925
aud_usd 	 1		16

6 rows selected.

Elapsed: 00:00:00.12
21:08:53 SQL> 
21:08:53 SQL> 
21:08:53 SQL> -- Derive NTILE based params:
21:08:53 SQL> 
21:08:53 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.41
21:08:53 SQL> CREATE TABLE svm6162 COMPRESS AS
21:08:53   2  SELECT
21:08:53   3  pair
21:08:53   4  ,ydate
21:08:53   5  ,prdate
21:08:53   6  ,clse
21:08:53   7  ,g6
21:08:53   8  ,gatt
21:08:53   9  ,gattn
21:08:53  10  ,trend
21:08:53  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
21:08:53  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
21:08:53  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
21:08:53  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
21:08:53  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
21:08:53  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
21:08:53  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
21:08:53  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
21:08:53  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
21:08:53  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
21:08:53  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
21:08:53  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
21:08:53  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
21:08:53  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
21:08:53  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
21:08:53  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
21:08:53  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
21:08:53  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
21:08:53  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
21:08:53  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
21:08:53  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
21:08:53  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
21:08:53  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
21:08:53  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
21:08:53  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
21:08:53  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
21:08:53  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
21:08:53  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
21:08:53  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
21:08:53  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
21:08:53  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
21:08:53  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
21:08:53  43  ,hh  att32
21:08:53  44  ,d   att33
21:08:53  45  ,w   att34
21:08:53  46  ,mpm att35
21:08:53  47  ,mph att36
21:08:53  48  ,trend att37
21:08:53  49  FROM svm6142
21:08:53  50  ORDER BY ydate
21:08:53  51  /

Table created.

Elapsed: 00:00:04.69
21:08:58 SQL> 
21:08:58 SQL> -- rpt
21:08:58 SQL> 
21:08:58 SQL> SELECT
21:08:58   2  pair
21:08:58   3  ,trend
21:08:58   4  ,gatt
21:08:58   5  ,COUNT(pair)
21:08:58   6  ,AVG(g6)
21:08:58   7  FROM svm6162
21:08:58   8  GROUP BY pair,trend,gatt
21:08:58   9  ORDER BY pair,trend,gatt
21:08:58  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5098 -.00215384
aud_usd 	-1 up	      3772 .003741417
aud_usd 	-1		56
aud_usd 	 1 nup	      6693 -.00213311
aud_usd 	 1 up	      3647 .004062925
aud_usd 	 1		16

6 rows selected.

Elapsed: 00:00:00.02
21:08:58 SQL> 
21:08:58 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
21:08:58 SQL> CREATE TABLE modsrc COMPRESS AS
21:08:58   2  SELECT
21:08:58   3  pair
21:08:58   4  ,ydate
21:08:58   5  ,prdate
21:08:58   6  ,trend
21:08:58   7  ,g6
21:08:58   8  ,gatt
21:08:58   9  ,gattn
21:08:58  10  FROM svm6162
21:08:58  11  /

Table created.

Elapsed: 00:00:00.10
21:08:58 SQL> 
21:08:58 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
21:08:58 SQL> 
21:08:58 SQL> DROP   TABLE aud_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
21:08:58 SQL> CREATE TABLE aud_ms610 COMPRESS AS
21:08:58   2  SELECT
21:08:58   3  ydate
21:08:58   4  ,trend aud_trend
21:08:58   5  ,g6    aud_g6
21:08:58   6  ,gatt  aud_gatt
21:08:58   7  ,gattn aud_gattn
21:08:58   8  FROM modsrc
21:08:58   9  /

Table created.

Elapsed: 00:00:00.07
21:08:58 SQL> 
21:08:58 SQL> ANALYZE TABLE aud_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
21:08:59 SQL> 
21:08:59 SQL> -- I need a copy of the attributes:
21:08:59 SQL> 
21:08:59 SQL> 
21:08:59 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.04
21:08:59 SQL> CREATE TABLE aud_att COMPRESS AS
21:08:59   2  SELECT
21:08:59   3  ydate
21:08:59   4  ,att00 aud_att00
21:08:59   5  ,att01 aud_att01
21:08:59   6  ,att02 aud_att02
21:08:59   7  ,att03 aud_att03
21:08:59   8  ,att04 aud_att04
21:08:59   9  ,att05 aud_att05
21:08:59  10  ,att06 aud_att06
21:08:59  11  ,att07 aud_att07
21:08:59  12  ,att08 aud_att08
21:08:59  13  ,att09 aud_att09
21:08:59  14  ,att10 aud_att10
21:08:59  15  ,att11 aud_att11
21:08:59  16  ,att12 aud_att12
21:08:59  17  ,att13 aud_att13
21:08:59  18  ,att14 aud_att14
21:08:59  19  ,att15 aud_att15
21:08:59  20  ,att16 aud_att16
21:08:59  21  ,att17 aud_att17
21:08:59  22  ,att18 aud_att18
21:08:59  23  ,att19 aud_att19
21:08:59  24  ,att20 aud_att20
21:08:59  25  ,att21 aud_att21
21:08:59  26  ,att22 aud_att22
21:08:59  27  ,att23 aud_att23
21:08:59  28  ,att24 aud_att24
21:08:59  29  ,att25 aud_att25
21:08:59  30  ,att26 aud_att26
21:08:59  31  ,att27 aud_att27
21:08:59  32  ,att28 aud_att28
21:08:59  33  ,att29 aud_att29
21:08:59  34  ,att30 aud_att30
21:08:59  35  ,att31 aud_att31
21:08:59  36  ,att32 aud_att32
21:08:59  37  ,att33 aud_att33
21:08:59  38  ,att34 aud_att34
21:08:59  39  ,att35 aud_att35
21:08:59  40  ,att36 aud_att36
21:08:59  41  ,att37 aud_att37
21:08:59  42  FROM svm6162
21:08:59  43  /

Table created.

Elapsed: 00:00:00.16
21:08:59 SQL> 
21:08:59 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.55
21:08:59 SQL> 
21:08:59 SQL> -- rpt
21:08:59 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19282

Elapsed: 00:00:00.85
21:09:00 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     19282

Elapsed: 00:00:00.00
21:09:00 SQL> 
21:09:00 SQL> --
21:09:00 SQL> -- gbp610.sql
21:09:00 SQL> --
21:09:00 SQL> 
21:09:00 SQL> -- Creates views and tables for backtesting a forex SVM strategy
21:09:00 SQL> 
21:09:00 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.36
21:09:01 SQL> 
21:09:01 SQL> -- I created di5min here:
21:09:01 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
21:09:01 SQL> 
21:09:01 SQL> CREATE OR REPLACE VIEW svm6102 AS
21:09:01   2  SELECT
21:09:01   3  pair
21:09:01   4  ,ydate
21:09:01   5  ,prdate
21:09:01   6  ,rownum rnum -- acts as t in my time-series
21:09:01   7  ,clse
21:09:01   8  -- Derive a bunch of attributes from clse, the latest price:
21:09:01   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
21:09:01  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
21:09:01  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
21:09:01  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
21:09:01  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
21:09:01  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
21:09:01  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
21:09:01  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
21:09:01  17  --
21:09:01  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
21:09:01  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
21:09:01  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
21:09:01  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
21:09:01  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
21:09:01  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
21:09:01  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
21:09:01  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
21:09:01  26  --
21:09:01  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
21:09:01  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
21:09:01  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
21:09:01  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
21:09:01  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
21:09:01  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
21:09:01  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
21:09:01  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
21:09:01  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
21:09:01  36  FROM di5min WHERE pair LIKE'%gbp%'
21:09:01  37  AND ydate > sysdate - 95
21:09:01  38  ORDER BY ydate
21:09:01  39  /

View created.

Elapsed: 00:00:00.05
21:09:01 SQL> 
21:09:01 SQL> -- rpt
21:09:01 SQL> 
21:09:01 SQL> SELECT
21:09:01   2  pair
21:09:01   3  ,COUNT(pair)
21:09:01   4  ,MIN(clse),MAX(clse)
21:09:01   5  ,MIN(avg6),MAX(avg6)
21:09:01   6  ,MIN(ydate),MAX(ydate)
21:09:01   7  FROM svm6102
21:09:01   8  GROUP BY pair
21:09:01   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
gbp_usd       19284   1.535475	   1.6295 1.53731473 1.62716986 2010-09-24 21:10:01 2010-12-28 21:05:00

Elapsed: 00:00:00.85
21:09:02 SQL> 
21:09:02 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
21:09:02 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.28
21:09:02 SQL> CREATE TABLE svm6122 COMPRESS AS
21:09:02   2  SELECT
21:09:02   3  pair
21:09:02   4  ,ydate
21:09:02   5  ,prdate
21:09:02   6  ,clse
21:09:02   7  -- g6 is important. I want to predict g6:
21:09:02   8  ,ld6 - clse g6
21:09:02   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
21:09:02  10  -- I want more attributes from the ones I derived above:
21:09:02  11  -- clse relation to moving-min
21:09:02  12  ,clse-min4  cm4
21:09:02  13  ,clse-min6  cm6
21:09:02  14  ,clse-min8  cm8
21:09:02  15  ,clse-min10 cm10
21:09:02  16  ,clse-min12 cm12
21:09:02  17  ,clse-min14 cm14
21:09:02  18  ,clse-min16 cm16
21:09:02  19  ,clse-min18 cm18
21:09:02  20  -- clse relation to moving-avg
21:09:02  21  ,clse-avg4  ca4
21:09:02  22  ,clse-avg6  ca6
21:09:02  23  ,clse-avg8  ca8
21:09:02  24  ,clse-avg10 ca10
21:09:02  25  ,clse-avg12 ca12
21:09:02  26  ,clse-avg14 ca14
21:09:02  27  ,clse-avg16 ca16
21:09:02  28  ,clse-avg18 ca18
21:09:02  29  -- clse relation to moving-max
21:09:02  30  ,clse-max4  cx4
21:09:02  31  ,clse-max6  cx6
21:09:02  32  ,clse-max8  cx8
21:09:02  33  ,clse-max10 cx10
21:09:02  34  ,clse-max12 cx12
21:09:02  35  ,clse-max14 cx14
21:09:02  36  ,clse-max16 cx16
21:09:02  37  ,clse-max18 cx18
21:09:02  38  -- Derive more attributes.
21:09:02  39  -- I want to use CORR() here to help SVM see the shape of the series.
21:09:02  40  -- But COVAR_POP is more stable:
21:09:02  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
21:09:02  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
21:09:02  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
21:09:02  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
21:09:02  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
21:09:02  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
21:09:02  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
21:09:02  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
21:09:02  49  -- Derive date related attributes:
21:09:02  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
21:09:02  51  ,0+TO_CHAR(ydate,'D')d
21:09:02  52  ,0+TO_CHAR(ydate,'W')w
21:09:02  53  -- mpm stands for minutes-past-midnight:
21:09:02  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
21:09:02  55  -- mph stands for minutes-past-hour:
21:09:02  56  ,0+TO_CHAR(ydate,'MI')mph
21:09:02  57  FROM svm6102
21:09:02  58  ORDER BY ydate
21:09:02  59  /

Table created.

Elapsed: 00:00:02.04
21:09:04 SQL> 
21:09:04 SQL> -- rpt
21:09:04 SQL> 
21:09:04 SQL> SELECT
21:09:04   2  pair
21:09:04   3  ,COUNT(pair)
21:09:04   4  ,MIN(clse),MAX(clse)
21:09:04   5  ,MIN(ydate),MAX(ydate)
21:09:04   6  FROM svm6122
21:09:04   7  GROUP BY pair
21:09:04   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
gbp_usd       19284   1.535475	   1.6295 2010-09-24 21:10:01 2010-12-28 21:05:00

Elapsed: 00:00:00.07
21:09:04 SQL> 
21:09:04 SQL> -- Prepare for derivation of NTILE based params:
21:09:04 SQL> 
21:09:04 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.24
21:09:04 SQL> CREATE TABLE svm6142 COMPRESS AS
21:09:04   2  SELECT
21:09:04   3  pair
21:09:04   4  ,ydate
21:09:04   5  ,prdate
21:09:04   6  ,clse
21:09:04   7  ,g6
21:09:04   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
21:09:04   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
21:09:04  10  ,CASE WHEN trend IS NULL THEN 1
21:09:04  11  	    WHEN trend =0      THEN 1
21:09:04  12  	    ELSE trend END trend
21:09:04  13  ,cm4
21:09:04  14  ,cm6
21:09:04  15  ,cm8
21:09:04  16  ,cm10
21:09:04  17  ,cm12
21:09:04  18  ,cm14
21:09:04  19  ,cm16
21:09:04  20  ,cm18
21:09:04  21  --
21:09:04  22  ,ca4
21:09:04  23  ,ca6
21:09:04  24  ,ca8
21:09:04  25  ,ca10
21:09:04  26  ,ca12
21:09:04  27  ,ca14
21:09:04  28  ,ca16
21:09:04  29  ,ca18
21:09:04  30  --
21:09:04  31  ,cx4
21:09:04  32  ,cx6
21:09:04  33  ,cx8
21:09:04  34  ,cx10
21:09:04  35  ,cx12
21:09:04  36  ,cx14
21:09:04  37  ,cx16
21:09:04  38  ,cx18
21:09:04  39  --
21:09:04  40  ,crr4
21:09:04  41  ,crr6
21:09:04  42  ,crr8
21:09:04  43  ,crr10
21:09:04  44  ,crr12
21:09:04  45  ,crr14
21:09:04  46  ,crr16
21:09:04  47  ,crr18
21:09:04  48  --
21:09:04  49  ,hh
21:09:04  50  ,d
21:09:04  51  ,w
21:09:04  52  ,mpm
21:09:04  53  ,mph
21:09:04  54  FROM svm6122
21:09:04  55  ORDER BY ydate
21:09:04  56  /

Table created.

Elapsed: 00:00:00.38
21:09:05 SQL> 
21:09:05 SQL> -- rpt
21:09:05 SQL> 
21:09:05 SQL> SELECT
21:09:05   2  pair
21:09:05   3  ,trend
21:09:05   4  ,gatt
21:09:05   5  ,COUNT(pair)
21:09:05   6  ,AVG(g6)
21:09:05   7  FROM svm6142
21:09:05   8  GROUP BY pair,trend,gatt
21:09:05   9  ORDER BY pair,trend,gatt
21:09:05  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6252 -.00257404
gbp_usd 	-1 up	      3468 .004262774
gbp_usd 	-1		71
gbp_usd 	 1 nup	      6131 -.00270211
gbp_usd 	 1 up	      3361 .004356966
gbp_usd 	 1		 1

6 rows selected.

Elapsed: 00:00:00.06
21:09:05 SQL> 
21:09:05 SQL> 
21:09:05 SQL> -- Derive NTILE based params:
21:09:05 SQL> 
21:09:05 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.20
21:09:05 SQL> CREATE TABLE svm6162 COMPRESS AS
21:09:05   2  SELECT
21:09:05   3  pair
21:09:05   4  ,ydate
21:09:05   5  ,prdate
21:09:05   6  ,clse
21:09:05   7  ,g6
21:09:05   8  ,gatt
21:09:05   9  ,gattn
21:09:05  10  ,trend
21:09:05  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
21:09:05  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
21:09:05  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
21:09:05  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
21:09:05  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
21:09:05  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
21:09:05  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
21:09:05  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
21:09:05  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
21:09:05  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
21:09:05  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
21:09:05  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
21:09:05  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
21:09:05  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
21:09:05  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
21:09:05  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
21:09:05  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
21:09:05  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
21:09:05  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
21:09:05  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
21:09:05  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
21:09:05  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
21:09:05  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
21:09:05  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
21:09:05  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
21:09:05  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
21:09:05  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
21:09:05  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
21:09:05  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
21:09:05  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
21:09:05  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
21:09:05  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
21:09:05  43  ,hh  att32
21:09:05  44  ,d   att33
21:09:05  45  ,w   att34
21:09:05  46  ,mpm att35
21:09:05  47  ,mph att36
21:09:05  48  ,trend att37
21:09:05  49  FROM svm6142
21:09:05  50  ORDER BY ydate
21:09:05  51  /

Table created.

Elapsed: 00:00:04.63
21:09:09 SQL> 
21:09:09 SQL> -- rpt
21:09:09 SQL> 
21:09:09 SQL> SELECT
21:09:09   2  pair
21:09:09   3  ,trend
21:09:09   4  ,gatt
21:09:09   5  ,COUNT(pair)
21:09:09   6  ,AVG(g6)
21:09:09   7  FROM svm6162
21:09:09   8  GROUP BY pair,trend,gatt
21:09:09   9  ORDER BY pair,trend,gatt
21:09:09  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6252 -.00257404
gbp_usd 	-1 up	      3468 .004262774
gbp_usd 	-1		71
gbp_usd 	 1 nup	      6131 -.00270211
gbp_usd 	 1 up	      3361 .004356966
gbp_usd 	 1		 1

6 rows selected.

Elapsed: 00:00:00.04
21:09:09 SQL> 
21:09:09 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.75
21:09:10 SQL> CREATE TABLE modsrc COMPRESS AS
21:09:10   2  SELECT
21:09:10   3  pair
21:09:10   4  ,ydate
21:09:10   5  ,prdate
21:09:10   6  ,trend
21:09:10   7  ,g6
21:09:10   8  ,gatt
21:09:10   9  ,gattn
21:09:10  10  FROM svm6162
21:09:10  11  /

Table created.

Elapsed: 00:00:00.09
21:09:10 SQL> 
21:09:10 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
21:09:10 SQL> 
21:09:10 SQL> DROP   TABLE gbp_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
21:09:11 SQL> CREATE TABLE gbp_ms610 COMPRESS AS
21:09:11   2  SELECT
21:09:11   3  ydate
21:09:11   4  ,trend gbp_trend
21:09:11   5  ,g6    gbp_g6
21:09:11   6  ,gatt  gbp_gatt
21:09:11   7  ,gattn gbp_gattn
21:09:11   8  FROM modsrc
21:09:11   9  /

Table created.

Elapsed: 00:00:00.06
21:09:11 SQL> 
21:09:11 SQL> ANALYZE TABLE gbp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
21:09:11 SQL> 
21:09:11 SQL> -- I need a copy of the attributes:
21:09:11 SQL> 
21:09:11 SQL> 
21:09:11 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.08
21:09:11 SQL> CREATE TABLE gbp_att COMPRESS AS
21:09:11   2  SELECT
21:09:11   3  ydate
21:09:11   4  ,att00 gbp_att00
21:09:11   5  ,att01 gbp_att01
21:09:11   6  ,att02 gbp_att02
21:09:11   7  ,att03 gbp_att03
21:09:11   8  ,att04 gbp_att04
21:09:11   9  ,att05 gbp_att05
21:09:11  10  ,att06 gbp_att06
21:09:11  11  ,att07 gbp_att07
21:09:11  12  ,att08 gbp_att08
21:09:11  13  ,att09 gbp_att09
21:09:11  14  ,att10 gbp_att10
21:09:11  15  ,att11 gbp_att11
21:09:11  16  ,att12 gbp_att12
21:09:11  17  ,att13 gbp_att13
21:09:11  18  ,att14 gbp_att14
21:09:11  19  ,att15 gbp_att15
21:09:11  20  ,att16 gbp_att16
21:09:11  21  ,att17 gbp_att17
21:09:11  22  ,att18 gbp_att18
21:09:11  23  ,att19 gbp_att19
21:09:11  24  ,att20 gbp_att20
21:09:11  25  ,att21 gbp_att21
21:09:11  26  ,att22 gbp_att22
21:09:11  27  ,att23 gbp_att23
21:09:11  28  ,att24 gbp_att24
21:09:11  29  ,att25 gbp_att25
21:09:11  30  ,att26 gbp_att26
21:09:11  31  ,att27 gbp_att27
21:09:11  32  ,att28 gbp_att28
21:09:11  33  ,att29 gbp_att29
21:09:11  34  ,att30 gbp_att30
21:09:11  35  ,att31 gbp_att31
21:09:11  36  ,att32 gbp_att32
21:09:11  37  ,att33 gbp_att33
21:09:11  38  ,att34 gbp_att34
21:09:11  39  ,att35 gbp_att35
21:09:11  40  ,att36 gbp_att36
21:09:11  41  ,att37 gbp_att37
21:09:11  42  FROM svm6162
21:09:11  43  /

Table created.

Elapsed: 00:00:00.21
21:09:11 SQL> 
21:09:11 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.43
21:09:11 SQL> 
21:09:11 SQL> -- rpt
21:09:11 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19284

Elapsed: 00:00:00.88
21:09:12 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     19284

Elapsed: 00:00:00.01
21:09:12 SQL> 
21:09:12 SQL> --
21:09:12 SQL> -- jpy610.sql
21:09:12 SQL> --
21:09:12 SQL> 
21:09:12 SQL> -- Creates views and tables for backtesting a forex SVM strategy
21:09:12 SQL> 
21:09:12 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.41
21:09:13 SQL> 
21:09:13 SQL> -- I created di5min here:
21:09:13 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
21:09:13 SQL> 
21:09:13 SQL> CREATE OR REPLACE VIEW svm6102 AS
21:09:13   2  SELECT
21:09:13   3  pair
21:09:13   4  ,ydate
21:09:13   5  ,prdate
21:09:13   6  ,rownum rnum -- acts as t in my time-series
21:09:13   7  ,clse
21:09:13   8  -- Derive a bunch of attributes from clse, the latest price:
21:09:13   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
21:09:13  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
21:09:13  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
21:09:13  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
21:09:13  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
21:09:13  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
21:09:13  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
21:09:13  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
21:09:13  17  --
21:09:13  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
21:09:13  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
21:09:13  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
21:09:13  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
21:09:13  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
21:09:13  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
21:09:13  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
21:09:13  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
21:09:13  26  --
21:09:13  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
21:09:13  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
21:09:13  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
21:09:13  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
21:09:13  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
21:09:13  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
21:09:13  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
21:09:13  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
21:09:13  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
21:09:13  36  FROM di5min WHERE pair LIKE'%jpy%'
21:09:13  37  AND ydate > sysdate - 95
21:09:13  38  ORDER BY ydate
21:09:13  39  /

View created.

Elapsed: 00:00:00.06
21:09:13 SQL> 
21:09:13 SQL> -- rpt
21:09:13 SQL> 
21:09:13 SQL> SELECT
21:09:13   2  pair
21:09:13   3  ,COUNT(pair)
21:09:13   4  ,MIN(clse),MAX(clse)
21:09:13   5  ,MIN(avg6),MAX(avg6)
21:09:13   6  ,MIN(ydate),MAX(ydate)
21:09:13   7  FROM svm6102
21:09:13   8  GROUP BY pair
21:09:13   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_jpy       19281	 80.25	   84.485 80.3595205 84.3105479 2010-09-24 21:10:01 2010-12-28 21:05:00

Elapsed: 00:00:00.88
21:09:14 SQL> 
21:09:14 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
21:09:14 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.18
21:09:14 SQL> CREATE TABLE svm6122 COMPRESS AS
21:09:14   2  SELECT
21:09:14   3  pair
21:09:14   4  ,ydate
21:09:14   5  ,prdate
21:09:14   6  ,clse
21:09:14   7  -- g6 is important. I want to predict g6:
21:09:14   8  ,ld6 - clse g6
21:09:14   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
21:09:14  10  -- I want more attributes from the ones I derived above:
21:09:14  11  -- clse relation to moving-min
21:09:14  12  ,clse-min4  cm4
21:09:14  13  ,clse-min6  cm6
21:09:14  14  ,clse-min8  cm8
21:09:14  15  ,clse-min10 cm10
21:09:14  16  ,clse-min12 cm12
21:09:14  17  ,clse-min14 cm14
21:09:14  18  ,clse-min16 cm16
21:09:14  19  ,clse-min18 cm18
21:09:14  20  -- clse relation to moving-avg
21:09:14  21  ,clse-avg4  ca4
21:09:14  22  ,clse-avg6  ca6
21:09:14  23  ,clse-avg8  ca8
21:09:14  24  ,clse-avg10 ca10
21:09:14  25  ,clse-avg12 ca12
21:09:14  26  ,clse-avg14 ca14
21:09:14  27  ,clse-avg16 ca16
21:09:14  28  ,clse-avg18 ca18
21:09:14  29  -- clse relation to moving-max
21:09:14  30  ,clse-max4  cx4
21:09:14  31  ,clse-max6  cx6
21:09:14  32  ,clse-max8  cx8
21:09:14  33  ,clse-max10 cx10
21:09:14  34  ,clse-max12 cx12
21:09:14  35  ,clse-max14 cx14
21:09:14  36  ,clse-max16 cx16
21:09:14  37  ,clse-max18 cx18
21:09:14  38  -- Derive more attributes.
21:09:14  39  -- I want to use CORR() here to help SVM see the shape of the series.
21:09:14  40  -- But COVAR_POP is more stable:
21:09:14  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
21:09:14  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
21:09:14  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
21:09:14  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
21:09:14  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
21:09:14  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
21:09:14  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
21:09:14  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
21:09:14  49  -- Derive date related attributes:
21:09:14  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
21:09:14  51  ,0+TO_CHAR(ydate,'D')d
21:09:14  52  ,0+TO_CHAR(ydate,'W')w
21:09:14  53  -- mpm stands for minutes-past-midnight:
21:09:14  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
21:09:14  55  -- mph stands for minutes-past-hour:
21:09:14  56  ,0+TO_CHAR(ydate,'MI')mph
21:09:14  57  FROM svm6102
21:09:14  58  ORDER BY ydate
21:09:14  59  /

Table created.

Elapsed: 00:00:02.05
21:09:16 SQL> 
21:09:16 SQL> -- rpt
21:09:16 SQL> 
21:09:16 SQL> SELECT
21:09:16   2  pair
21:09:16   3  ,COUNT(pair)
21:09:16   4  ,MIN(clse),MAX(clse)
21:09:16   5  ,MIN(ydate),MAX(ydate)
21:09:16   6  FROM svm6122
21:09:16   7  GROUP BY pair
21:09:16   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_jpy       19281	 80.25	   84.485 2010-09-24 21:10:01 2010-12-28 21:05:00

Elapsed: 00:00:00.04
21:09:16 SQL> 
21:09:16 SQL> -- Prepare for derivation of NTILE based params:
21:09:16 SQL> 
21:09:16 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.19
21:09:16 SQL> CREATE TABLE svm6142 COMPRESS AS
21:09:16   2  SELECT
21:09:16   3  pair
21:09:16   4  ,ydate
21:09:16   5  ,prdate
21:09:16   6  ,clse
21:09:16   7  ,g6
21:09:16   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
21:09:16   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
21:09:16  10  ,CASE WHEN trend IS NULL THEN 1
21:09:16  11  	    WHEN trend =0      THEN 1
21:09:16  12  	    ELSE trend END trend
21:09:16  13  ,cm4
21:09:16  14  ,cm6
21:09:16  15  ,cm8
21:09:16  16  ,cm10
21:09:16  17  ,cm12
21:09:16  18  ,cm14
21:09:16  19  ,cm16
21:09:16  20  ,cm18
21:09:16  21  --
21:09:16  22  ,ca4
21:09:16  23  ,ca6
21:09:16  24  ,ca8
21:09:16  25  ,ca10
21:09:16  26  ,ca12
21:09:16  27  ,ca14
21:09:16  28  ,ca16
21:09:16  29  ,ca18
21:09:16  30  --
21:09:16  31  ,cx4
21:09:16  32  ,cx6
21:09:16  33  ,cx8
21:09:16  34  ,cx10
21:09:16  35  ,cx12
21:09:16  36  ,cx14
21:09:16  37  ,cx16
21:09:16  38  ,cx18
21:09:16  39  --
21:09:16  40  ,crr4
21:09:16  41  ,crr6
21:09:16  42  ,crr8
21:09:16  43  ,crr10
21:09:16  44  ,crr12
21:09:16  45  ,crr14
21:09:16  46  ,crr16
21:09:16  47  ,crr18
21:09:16  48  --
21:09:16  49  ,hh
21:09:16  50  ,d
21:09:16  51  ,w
21:09:16  52  ,mpm
21:09:16  53  ,mph
21:09:16  54  FROM svm6122
21:09:16  55  ORDER BY ydate
21:09:16  56  /

Table created.

Elapsed: 00:00:00.35
21:09:17 SQL> 
21:09:17 SQL> -- rpt
21:09:17 SQL> 
21:09:17 SQL> SELECT
21:09:17   2  pair
21:09:17   3  ,trend
21:09:17   4  ,gatt
21:09:17   5  ,COUNT(pair)
21:09:17   6  ,AVG(g6)
21:09:17   7  FROM svm6142
21:09:17   8  GROUP BY pair,trend,gatt
21:09:17   9  ORDER BY pair,trend,gatt
21:09:17  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5086 -.16286728
usd_jpy 	-1 up	      4931 .162917098
usd_jpy 	-1		19
usd_jpy 	 1 nup	      5108 -.15523254
usd_jpy 	 1 up	      4084 .164774195
usd_jpy 	 1		53

6 rows selected.

Elapsed: 00:00:00.03
21:09:17 SQL> 
21:09:17 SQL> 
21:09:17 SQL> -- Derive NTILE based params:
21:09:17 SQL> 
21:09:17 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.12
21:09:17 SQL> CREATE TABLE svm6162 COMPRESS AS
21:09:17   2  SELECT
21:09:17   3  pair
21:09:17   4  ,ydate
21:09:17   5  ,prdate
21:09:17   6  ,clse
21:09:17   7  ,g6
21:09:17   8  ,gatt
21:09:17   9  ,gattn
21:09:17  10  ,trend
21:09:17  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
21:09:17  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
21:09:17  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
21:09:17  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
21:09:17  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
21:09:17  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
21:09:17  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
21:09:17  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
21:09:17  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
21:09:17  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
21:09:17  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
21:09:17  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
21:09:17  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
21:09:17  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
21:09:17  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
21:09:17  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
21:09:17  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
21:09:17  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
21:09:17  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
21:09:17  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
21:09:17  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
21:09:17  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
21:09:17  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
21:09:17  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
21:09:17  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
21:09:17  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
21:09:17  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
21:09:17  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
21:09:17  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
21:09:17  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
21:09:17  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
21:09:17  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
21:09:17  43  ,hh  att32
21:09:17  44  ,d   att33
21:09:17  45  ,w   att34
21:09:17  46  ,mpm att35
21:09:17  47  ,mph att36
21:09:17  48  ,trend att37
21:09:17  49  FROM svm6142
21:09:17  50  ORDER BY ydate
21:09:17  51  /

Table created.

Elapsed: 00:00:04.63
21:09:21 SQL> 
21:09:21 SQL> -- rpt
21:09:21 SQL> 
21:09:21 SQL> SELECT
21:09:21   2  pair
21:09:21   3  ,trend
21:09:21   4  ,gatt
21:09:21   5  ,COUNT(pair)
21:09:21   6  ,AVG(g6)
21:09:21   7  FROM svm6162
21:09:21   8  GROUP BY pair,trend,gatt
21:09:21   9  ORDER BY pair,trend,gatt
21:09:21  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5086 -.16286728
usd_jpy 	-1 up	      4931 .162917098
usd_jpy 	-1		19
usd_jpy 	 1 nup	      5108 -.15523254
usd_jpy 	 1 up	      4084 .164774195
usd_jpy 	 1		53

6 rows selected.

Elapsed: 00:00:00.02
21:09:21 SQL> 
21:09:21 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
21:09:21 SQL> CREATE TABLE modsrc COMPRESS AS
21:09:21   2  SELECT
21:09:21   3  pair
21:09:21   4  ,ydate
21:09:21   5  ,prdate
21:09:21   6  ,trend
21:09:21   7  ,g6
21:09:21   8  ,gatt
21:09:21   9  ,gattn
21:09:21  10  FROM svm6162
21:09:21  11  /

Table created.

Elapsed: 00:00:00.10
21:09:22 SQL> 
21:09:22 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.26
21:09:22 SQL> 
21:09:22 SQL> DROP   TABLE jpy_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
21:09:22 SQL> CREATE TABLE jpy_ms610 COMPRESS AS
21:09:22   2  SELECT
21:09:22   3  ydate
21:09:22   4  ,trend jpy_trend
21:09:22   5  ,g6    jpy_g6
21:09:22   6  ,gatt  jpy_gatt
21:09:22   7  ,gattn jpy_gattn
21:09:22   8  FROM modsrc
21:09:22   9  /

Table created.

Elapsed: 00:00:00.07
21:09:22 SQL> 
21:09:22 SQL> ANALYZE TABLE jpy_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
21:09:22 SQL> 
21:09:22 SQL> -- I need a copy of the attributes:
21:09:22 SQL> 
21:09:22 SQL> 
21:09:22 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.04
21:09:22 SQL> CREATE TABLE jpy_att COMPRESS AS
21:09:22   2  SELECT
21:09:22   3  ydate
21:09:22   4  ,att00 jpy_att00
21:09:22   5  ,att01 jpy_att01
21:09:22   6  ,att02 jpy_att02
21:09:22   7  ,att03 jpy_att03
21:09:22   8  ,att04 jpy_att04
21:09:22   9  ,att05 jpy_att05
21:09:22  10  ,att06 jpy_att06
21:09:22  11  ,att07 jpy_att07
21:09:22  12  ,att08 jpy_att08
21:09:22  13  ,att09 jpy_att09
21:09:22  14  ,att10 jpy_att10
21:09:22  15  ,att11 jpy_att11
21:09:22  16  ,att12 jpy_att12
21:09:22  17  ,att13 jpy_att13
21:09:22  18  ,att14 jpy_att14
21:09:22  19  ,att15 jpy_att15
21:09:22  20  ,att16 jpy_att16
21:09:22  21  ,att17 jpy_att17
21:09:22  22  ,att18 jpy_att18
21:09:22  23  ,att19 jpy_att19
21:09:22  24  ,att20 jpy_att20
21:09:22  25  ,att21 jpy_att21
21:09:22  26  ,att22 jpy_att22
21:09:22  27  ,att23 jpy_att23
21:09:22  28  ,att24 jpy_att24
21:09:22  29  ,att25 jpy_att25
21:09:22  30  ,att26 jpy_att26
21:09:22  31  ,att27 jpy_att27
21:09:22  32  ,att28 jpy_att28
21:09:22  33  ,att29 jpy_att29
21:09:22  34  ,att30 jpy_att30
21:09:22  35  ,att31 jpy_att31
21:09:22  36  ,att32 jpy_att32
21:09:22  37  ,att33 jpy_att33
21:09:22  38  ,att34 jpy_att34
21:09:22  39  ,att35 jpy_att35
21:09:22  40  ,att36 jpy_att36
21:09:22  41  ,att37 jpy_att37
21:09:22  42  FROM svm6162
21:09:22  43  /

Table created.

Elapsed: 00:00:00.16
21:09:22 SQL> 
21:09:22 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.42
21:09:23 SQL> 
21:09:23 SQL> -- rpt
21:09:23 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19281

Elapsed: 00:00:00.89
21:09:24 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     19281

Elapsed: 00:00:00.00
21:09:24 SQL> 
21:09:24 SQL> --
21:09:24 SQL> -- cad610.sql
21:09:24 SQL> --
21:09:24 SQL> 
21:09:24 SQL> -- Creates views and tables for backtesting a forex SVM strategy
21:09:24 SQL> 
21:09:24 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.50
21:09:24 SQL> 
21:09:24 SQL> -- I created di5min here:
21:09:24 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
21:09:24 SQL> 
21:09:24 SQL> CREATE OR REPLACE VIEW svm6102 AS
21:09:24   2  SELECT
21:09:24   3  pair
21:09:24   4  ,ydate
21:09:24   5  ,prdate
21:09:24   6  ,rownum rnum -- acts as t in my time-series
21:09:24   7  ,clse
21:09:24   8  -- Derive a bunch of attributes from clse, the latest price:
21:09:24   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
21:09:24  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
21:09:24  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
21:09:24  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
21:09:24  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
21:09:24  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
21:09:24  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
21:09:24  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
21:09:24  17  --
21:09:24  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
21:09:24  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
21:09:24  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
21:09:24  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
21:09:24  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
21:09:24  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
21:09:24  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
21:09:24  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
21:09:24  26  --
21:09:24  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
21:09:24  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
21:09:24  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
21:09:24  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
21:09:24  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
21:09:24  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
21:09:24  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
21:09:24  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
21:09:24  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
21:09:24  36  FROM di5min WHERE pair LIKE'%cad%'
21:09:24  37  AND ydate > sysdate - 95
21:09:24  38  ORDER BY ydate
21:09:24  39  /

View created.

Elapsed: 00:00:00.03
21:09:24 SQL> 
21:09:24 SQL> -- rpt
21:09:24 SQL> 
21:09:24 SQL> SELECT
21:09:24   2  pair
21:09:24   3  ,COUNT(pair)
21:09:24   4  ,MIN(clse),MAX(clse)
21:09:24   5  ,MIN(avg6),MAX(avg6)
21:09:24   6  ,MIN(ydate),MAX(ydate)
21:09:24   7  FROM svm6102
21:09:24   8  GROUP BY pair
21:09:24   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_cad       19281    .997975	    1.036 .999321575 1.03336849 2010-09-24 21:10:01 2010-12-28 21:05:00

Elapsed: 00:00:00.84
21:09:25 SQL> 
21:09:25 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
21:09:25 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.95
21:09:26 SQL> CREATE TABLE svm6122 COMPRESS AS
21:09:26   2  SELECT
21:09:26   3  pair
21:09:26   4  ,ydate
21:09:26   5  ,prdate
21:09:26   6  ,clse
21:09:26   7  -- g6 is important. I want to predict g6:
21:09:26   8  ,ld6 - clse g6
21:09:26   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
21:09:26  10  -- I want more attributes from the ones I derived above:
21:09:26  11  -- clse relation to moving-min
21:09:26  12  ,clse-min4  cm4
21:09:26  13  ,clse-min6  cm6
21:09:26  14  ,clse-min8  cm8
21:09:26  15  ,clse-min10 cm10
21:09:26  16  ,clse-min12 cm12
21:09:26  17  ,clse-min14 cm14
21:09:26  18  ,clse-min16 cm16
21:09:26  19  ,clse-min18 cm18
21:09:26  20  -- clse relation to moving-avg
21:09:26  21  ,clse-avg4  ca4
21:09:26  22  ,clse-avg6  ca6
21:09:26  23  ,clse-avg8  ca8
21:09:26  24  ,clse-avg10 ca10
21:09:26  25  ,clse-avg12 ca12
21:09:26  26  ,clse-avg14 ca14
21:09:26  27  ,clse-avg16 ca16
21:09:26  28  ,clse-avg18 ca18
21:09:26  29  -- clse relation to moving-max
21:09:26  30  ,clse-max4  cx4
21:09:26  31  ,clse-max6  cx6
21:09:26  32  ,clse-max8  cx8
21:09:26  33  ,clse-max10 cx10
21:09:26  34  ,clse-max12 cx12
21:09:26  35  ,clse-max14 cx14
21:09:26  36  ,clse-max16 cx16
21:09:26  37  ,clse-max18 cx18
21:09:26  38  -- Derive more attributes.
21:09:26  39  -- I want to use CORR() here to help SVM see the shape of the series.
21:09:26  40  -- But COVAR_POP is more stable:
21:09:26  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
21:09:26  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
21:09:26  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
21:09:26  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
21:09:26  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
21:09:26  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
21:09:26  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
21:09:26  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
21:09:26  49  -- Derive date related attributes:
21:09:26  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
21:09:26  51  ,0+TO_CHAR(ydate,'D')d
21:09:26  52  ,0+TO_CHAR(ydate,'W')w
21:09:26  53  -- mpm stands for minutes-past-midnight:
21:09:26  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
21:09:26  55  -- mph stands for minutes-past-hour:
21:09:26  56  ,0+TO_CHAR(ydate,'MI')mph
21:09:26  57  FROM svm6102
21:09:26  58  ORDER BY ydate
21:09:26  59  /

Table created.

Elapsed: 00:00:02.00
21:09:28 SQL> 
21:09:28 SQL> -- rpt
21:09:28 SQL> 
21:09:28 SQL> SELECT
21:09:28   2  pair
21:09:28   3  ,COUNT(pair)
21:09:28   4  ,MIN(clse),MAX(clse)
21:09:28   5  ,MIN(ydate),MAX(ydate)
21:09:28   6  FROM svm6122
21:09:28   7  GROUP BY pair
21:09:28   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_cad       19281    .997975	    1.036 2010-09-24 21:10:01 2010-12-28 21:05:00

Elapsed: 00:00:00.07
21:09:28 SQL> 
21:09:28 SQL> -- Prepare for derivation of NTILE based params:
21:09:28 SQL> 
21:09:28 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.26
21:09:28 SQL> CREATE TABLE svm6142 COMPRESS AS
21:09:28   2  SELECT
21:09:28   3  pair
21:09:28   4  ,ydate
21:09:28   5  ,prdate
21:09:28   6  ,clse
21:09:28   7  ,g6
21:09:28   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
21:09:28   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
21:09:28  10  ,CASE WHEN trend IS NULL THEN 1
21:09:28  11  	    WHEN trend =0      THEN 1
21:09:28  12  	    ELSE trend END trend
21:09:28  13  ,cm4
21:09:28  14  ,cm6
21:09:28  15  ,cm8
21:09:28  16  ,cm10
21:09:28  17  ,cm12
21:09:28  18  ,cm14
21:09:28  19  ,cm16
21:09:28  20  ,cm18
21:09:28  21  --
21:09:28  22  ,ca4
21:09:28  23  ,ca6
21:09:28  24  ,ca8
21:09:28  25  ,ca10
21:09:28  26  ,ca12
21:09:28  27  ,ca14
21:09:28  28  ,ca16
21:09:28  29  ,ca18
21:09:28  30  --
21:09:28  31  ,cx4
21:09:28  32  ,cx6
21:09:28  33  ,cx8
21:09:28  34  ,cx10
21:09:28  35  ,cx12
21:09:28  36  ,cx14
21:09:28  37  ,cx16
21:09:28  38  ,cx18
21:09:28  39  --
21:09:28  40  ,crr4
21:09:28  41  ,crr6
21:09:28  42  ,crr8
21:09:28  43  ,crr10
21:09:28  44  ,crr12
21:09:28  45  ,crr14
21:09:28  46  ,crr16
21:09:28  47  ,crr18
21:09:28  48  --
21:09:28  49  ,hh
21:09:28  50  ,d
21:09:28  51  ,w
21:09:28  52  ,mpm
21:09:28  53  ,mph
21:09:28  54  FROM svm6122
21:09:28  55  ORDER BY ydate
21:09:28  56  /

Table created.

Elapsed: 00:00:00.35
21:09:29 SQL> 
21:09:29 SQL> -- rpt
21:09:29 SQL> 
21:09:29 SQL> SELECT
21:09:29   2  pair
21:09:29   3  ,trend
21:09:29   4  ,gatt
21:09:29   5  ,COUNT(pair)
21:09:29   6  ,AVG(g6)
21:09:29   7  FROM svm6142
21:09:29   8  GROUP BY pair,trend,gatt
21:09:29   9  ORDER BY pair,trend,gatt
21:09:29  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7131 -.00133765
usd_cad 	-1 up	      3038 .003121384
usd_cad 	-1		48
usd_cad 	 1 nup	      6553 -.00162969
usd_cad 	 1 up	      2487 .003598993
usd_cad 	 1		24

6 rows selected.

Elapsed: 00:00:00.05
21:09:29 SQL> 
21:09:29 SQL> 
21:09:29 SQL> -- Derive NTILE based params:
21:09:29 SQL> 
21:09:29 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.19
21:09:29 SQL> CREATE TABLE svm6162 COMPRESS AS
21:09:29   2  SELECT
21:09:29   3  pair
21:09:29   4  ,ydate
21:09:29   5  ,prdate
21:09:29   6  ,clse
21:09:29   7  ,g6
21:09:29   8  ,gatt
21:09:29   9  ,gattn
21:09:29  10  ,trend
21:09:29  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
21:09:29  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
21:09:29  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
21:09:29  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
21:09:29  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
21:09:29  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
21:09:29  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
21:09:29  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
21:09:29  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
21:09:29  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
21:09:29  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
21:09:29  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
21:09:29  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
21:09:29  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
21:09:29  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
21:09:29  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
21:09:29  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
21:09:29  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
21:09:29  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
21:09:29  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
21:09:29  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
21:09:29  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
21:09:29  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
21:09:29  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
21:09:29  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
21:09:29  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
21:09:29  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
21:09:29  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
21:09:29  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
21:09:29  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
21:09:29  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
21:09:29  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
21:09:29  43  ,hh  att32
21:09:29  44  ,d   att33
21:09:29  45  ,w   att34
21:09:29  46  ,mpm att35
21:09:29  47  ,mph att36
21:09:29  48  ,trend att37
21:09:29  49  FROM svm6142
21:09:29  50  ORDER BY ydate
21:09:29  51  /

Table created.

Elapsed: 00:00:04.70
21:09:34 SQL> 
21:09:34 SQL> -- rpt
21:09:34 SQL> 
21:09:34 SQL> SELECT
21:09:34   2  pair
21:09:34   3  ,trend
21:09:34   4  ,gatt
21:09:34   5  ,COUNT(pair)
21:09:34   6  ,AVG(g6)
21:09:34   7  FROM svm6162
21:09:34   8  GROUP BY pair,trend,gatt
21:09:34   9  ORDER BY pair,trend,gatt
21:09:34  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7131 -.00133765
usd_cad 	-1 up	      3038 .003121384
usd_cad 	-1		48
usd_cad 	 1 nup	      6553 -.00162969
usd_cad 	 1 up	      2487 .003598993
usd_cad 	 1		24

6 rows selected.

Elapsed: 00:00:00.04
21:09:34 SQL> 
21:09:34 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
21:09:34 SQL> CREATE TABLE modsrc COMPRESS AS
21:09:34   2  SELECT
21:09:34   3  pair
21:09:34   4  ,ydate
21:09:34   5  ,prdate
21:09:34   6  ,trend
21:09:34   7  ,g6
21:09:34   8  ,gatt
21:09:34   9  ,gattn
21:09:34  10  FROM svm6162
21:09:34  11  /

Table created.

Elapsed: 00:00:00.08
21:09:34 SQL> 
21:09:34 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
21:09:34 SQL> 
21:09:34 SQL> DROP   TABLE cad_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
21:09:34 SQL> CREATE TABLE cad_ms610 COMPRESS AS
21:09:34   2  SELECT
21:09:34   3  ydate
21:09:34   4  ,trend cad_trend
21:09:34   5  ,g6    cad_g6
21:09:34   6  ,gatt  cad_gatt
21:09:34   7  ,gattn cad_gattn
21:09:34   8  FROM modsrc
21:09:34   9  /

Table created.

Elapsed: 00:00:00.06
21:09:34 SQL> 
21:09:34 SQL> ANALYZE TABLE cad_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
21:09:34 SQL> 
21:09:34 SQL> -- I need a copy of the attributes:
21:09:34 SQL> 
21:09:34 SQL> 
21:09:34 SQL> DROP   TABLE cad_att;

Table dropped.

Elapsed: 00:00:00.04
21:09:34 SQL> CREATE TABLE cad_att COMPRESS AS
21:09:34   2  SELECT
21:09:34   3  ydate
21:09:34   4  ,att00 cad_att00
21:09:34   5  ,att01 cad_att01
21:09:34   6  ,att02 cad_att02
21:09:34   7  ,att03 cad_att03
21:09:34   8  ,att04 cad_att04
21:09:34   9  ,att05 cad_att05
21:09:34  10  ,att06 cad_att06
21:09:34  11  ,att07 cad_att07
21:09:34  12  ,att08 cad_att08
21:09:34  13  ,att09 cad_att09
21:09:34  14  ,att10 cad_att10
21:09:34  15  ,att11 cad_att11
21:09:34  16  ,att12 cad_att12
21:09:34  17  ,att13 cad_att13
21:09:34  18  ,att14 cad_att14
21:09:34  19  ,att15 cad_att15
21:09:34  20  ,att16 cad_att16
21:09:34  21  ,att17 cad_att17
21:09:34  22  ,att18 cad_att18
21:09:34  23  ,att19 cad_att19
21:09:34  24  ,att20 cad_att20
21:09:34  25  ,att21 cad_att21
21:09:34  26  ,att22 cad_att22
21:09:34  27  ,att23 cad_att23
21:09:34  28  ,att24 cad_att24
21:09:34  29  ,att25 cad_att25
21:09:34  30  ,att26 cad_att26
21:09:34  31  ,att27 cad_att27
21:09:34  32  ,att28 cad_att28
21:09:34  33  ,att29 cad_att29
21:09:34  34  ,att30 cad_att30
21:09:34  35  ,att31 cad_att31
21:09:34  36  ,att32 cad_att32
21:09:34  37  ,att33 cad_att33
21:09:34  38  ,att34 cad_att34
21:09:34  39  ,att35 cad_att35
21:09:34  40  ,att36 cad_att36
21:09:34  41  ,att37 cad_att37
21:09:34  42  FROM svm6162
21:09:34  43  /

Table created.

Elapsed: 00:00:00.17
21:09:34 SQL> 
21:09:34 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.43
21:09:35 SQL> 
21:09:35 SQL> -- rpt
21:09:35 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19281

Elapsed: 00:00:00.81
21:09:36 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
     19281

Elapsed: 00:00:00.00
21:09:36 SQL> 
21:09:36 SQL> --
21:09:36 SQL> -- chf610.sql
21:09:36 SQL> --
21:09:36 SQL> 
21:09:36 SQL> -- Creates views and tables for backtesting a forex SVM strategy
21:09:36 SQL> 
21:09:36 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.53
21:09:36 SQL> 
21:09:36 SQL> -- I created di5min here:
21:09:36 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
21:09:36 SQL> 
21:09:36 SQL> CREATE OR REPLACE VIEW svm6102 AS
21:09:36   2  SELECT
21:09:36   3  pair
21:09:36   4  ,ydate
21:09:36   5  ,prdate
21:09:36   6  ,rownum rnum -- acts as t in my time-series
21:09:36   7  ,clse
21:09:36   8  -- Derive a bunch of attributes from clse, the latest price:
21:09:36   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
21:09:36  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
21:09:36  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
21:09:36  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
21:09:36  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
21:09:36  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
21:09:36  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
21:09:36  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
21:09:36  17  --
21:09:36  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
21:09:36  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
21:09:36  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
21:09:36  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
21:09:36  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
21:09:36  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
21:09:36  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
21:09:36  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
21:09:36  26  --
21:09:36  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
21:09:36  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
21:09:36  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
21:09:36  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
21:09:36  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
21:09:36  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
21:09:36  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
21:09:36  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
21:09:36  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
21:09:36  36  FROM di5min WHERE pair LIKE'%chf%'
21:09:36  37  AND ydate > sysdate - 95
21:09:36  38  ORDER BY ydate
21:09:36  39  /

View created.

Elapsed: 00:00:00.05
21:09:36 SQL> 
21:09:36 SQL> -- rpt
21:09:36 SQL> 
21:09:36 SQL> SELECT
21:09:36   2  pair
21:09:36   3  ,COUNT(pair)
21:09:36   4  ,MIN(clse),MAX(clse)
21:09:36   5  ,MIN(avg6),MAX(avg6)
21:09:36   6  ,MIN(ydate),MAX(ydate)
21:09:36   7  FROM svm6102
21:09:36   8  GROUP BY pair
21:09:36   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_chf       19284	.94525	  1.00635 .947785616 1.00498151 2010-09-24 21:10:01 2010-12-28 21:05:00

Elapsed: 00:00:00.86
21:09:37 SQL> 
21:09:37 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
21:09:37 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.26
21:09:37 SQL> CREATE TABLE svm6122 COMPRESS AS
21:09:37   2  SELECT
21:09:37   3  pair
21:09:37   4  ,ydate
21:09:37   5  ,prdate
21:09:37   6  ,clse
21:09:37   7  -- g6 is important. I want to predict g6:
21:09:37   8  ,ld6 - clse g6
21:09:37   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
21:09:37  10  -- I want more attributes from the ones I derived above:
21:09:37  11  -- clse relation to moving-min
21:09:37  12  ,clse-min4  cm4
21:09:37  13  ,clse-min6  cm6
21:09:37  14  ,clse-min8  cm8
21:09:37  15  ,clse-min10 cm10
21:09:37  16  ,clse-min12 cm12
21:09:37  17  ,clse-min14 cm14
21:09:37  18  ,clse-min16 cm16
21:09:37  19  ,clse-min18 cm18
21:09:37  20  -- clse relation to moving-avg
21:09:37  21  ,clse-avg4  ca4
21:09:37  22  ,clse-avg6  ca6
21:09:37  23  ,clse-avg8  ca8
21:09:37  24  ,clse-avg10 ca10
21:09:37  25  ,clse-avg12 ca12
21:09:37  26  ,clse-avg14 ca14
21:09:37  27  ,clse-avg16 ca16
21:09:37  28  ,clse-avg18 ca18
21:09:37  29  -- clse relation to moving-max
21:09:37  30  ,clse-max4  cx4
21:09:37  31  ,clse-max6  cx6
21:09:37  32  ,clse-max8  cx8
21:09:37  33  ,clse-max10 cx10
21:09:37  34  ,clse-max12 cx12
21:09:37  35  ,clse-max14 cx14
21:09:37  36  ,clse-max16 cx16
21:09:37  37  ,clse-max18 cx18
21:09:37  38  -- Derive more attributes.
21:09:37  39  -- I want to use CORR() here to help SVM see the shape of the series.
21:09:37  40  -- But COVAR_POP is more stable:
21:09:37  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
21:09:37  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
21:09:37  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
21:09:37  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
21:09:37  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
21:09:37  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
21:09:37  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
21:09:37  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
21:09:37  49  -- Derive date related attributes:
21:09:37  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
21:09:37  51  ,0+TO_CHAR(ydate,'D')d
21:09:37  52  ,0+TO_CHAR(ydate,'W')w
21:09:37  53  -- mpm stands for minutes-past-midnight:
21:09:37  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
21:09:37  55  -- mph stands for minutes-past-hour:
21:09:37  56  ,0+TO_CHAR(ydate,'MI')mph
21:09:37  57  FROM svm6102
21:09:37  58  ORDER BY ydate
21:09:37  59  /

Table created.

Elapsed: 00:00:02.00
21:09:39 SQL> 
21:09:39 SQL> -- rpt
21:09:39 SQL> 
21:09:39 SQL> SELECT
21:09:39   2  pair
21:09:39   3  ,COUNT(pair)
21:09:39   4  ,MIN(clse),MAX(clse)
21:09:39   5  ,MIN(ydate),MAX(ydate)
21:09:39   6  FROM svm6122
21:09:39   7  GROUP BY pair
21:09:39   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_chf       19284	.94525	  1.00635 2010-09-24 21:10:01 2010-12-28 21:05:00

Elapsed: 00:00:00.04
21:09:39 SQL> 
21:09:39 SQL> -- Prepare for derivation of NTILE based params:
21:09:39 SQL> 
21:09:39 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.18
21:09:40 SQL> CREATE TABLE svm6142 COMPRESS AS
21:09:40   2  SELECT
21:09:40   3  pair
21:09:40   4  ,ydate
21:09:40   5  ,prdate
21:09:40   6  ,clse
21:09:40   7  ,g6
21:09:40   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
21:09:40   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
21:09:40  10  ,CASE WHEN trend IS NULL THEN 1
21:09:40  11  	    WHEN trend =0      THEN 1
21:09:40  12  	    ELSE trend END trend
21:09:40  13  ,cm4
21:09:40  14  ,cm6
21:09:40  15  ,cm8
21:09:40  16  ,cm10
21:09:40  17  ,cm12
21:09:40  18  ,cm14
21:09:40  19  ,cm16
21:09:40  20  ,cm18
21:09:40  21  --
21:09:40  22  ,ca4
21:09:40  23  ,ca6
21:09:40  24  ,ca8
21:09:40  25  ,ca10
21:09:40  26  ,ca12
21:09:40  27  ,ca14
21:09:40  28  ,ca16
21:09:40  29  ,ca18
21:09:40  30  --
21:09:40  31  ,cx4
21:09:40  32  ,cx6
21:09:40  33  ,cx8
21:09:40  34  ,cx10
21:09:40  35  ,cx12
21:09:40  36  ,cx14
21:09:40  37  ,cx16
21:09:40  38  ,cx18
21:09:40  39  --
21:09:40  40  ,crr4
21:09:40  41  ,crr6
21:09:40  42  ,crr8
21:09:40  43  ,crr10
21:09:40  44  ,crr12
21:09:40  45  ,crr14
21:09:40  46  ,crr16
21:09:40  47  ,crr18
21:09:40  48  --
21:09:40  49  ,hh
21:09:40  50  ,d
21:09:40  51  ,w
21:09:40  52  ,mpm
21:09:40  53  ,mph
21:09:40  54  FROM svm6122
21:09:40  55  ORDER BY ydate
21:09:40  56  /

Table created.

Elapsed: 00:00:00.70
21:09:40 SQL> 
21:09:40 SQL> -- rpt
21:09:40 SQL> 
21:09:40 SQL> SELECT
21:09:40   2  pair
21:09:40   3  ,trend
21:09:40   4  ,gatt
21:09:40   5  ,COUNT(pair)
21:09:40   6  ,AVG(g6)
21:09:40   7  FROM svm6142
21:09:40   8  GROUP BY pair,trend,gatt
21:09:40   9  ORDER BY pair,trend,gatt
21:09:40  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      6891 -.00194454
usd_chf 	-1 up	      3172 .003901151
usd_chf 	-1		 8
usd_chf 	 1 nup	      6591 -.00163733
usd_chf 	 1 up	      2558 .003693657
usd_chf 	 1		64

6 rows selected.

Elapsed: 00:00:00.04
21:09:40 SQL> 
21:09:40 SQL> 
21:09:40 SQL> -- Derive NTILE based params:
21:09:40 SQL> 
21:09:40 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.18
21:09:41 SQL> CREATE TABLE svm6162 COMPRESS AS
21:09:41   2  SELECT
21:09:41   3  pair
21:09:41   4  ,ydate
21:09:41   5  ,prdate
21:09:41   6  ,clse
21:09:41   7  ,g6
21:09:41   8  ,gatt
21:09:41   9  ,gattn
21:09:41  10  ,trend
21:09:41  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
21:09:41  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
21:09:41  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
21:09:41  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
21:09:41  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
21:09:41  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
21:09:41  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
21:09:41  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
21:09:41  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
21:09:41  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
21:09:41  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
21:09:41  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
21:09:41  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
21:09:41  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
21:09:41  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
21:09:41  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
21:09:41  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
21:09:41  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
21:09:41  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
21:09:41  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
21:09:41  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
21:09:41  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
21:09:41  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
21:09:41  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
21:09:41  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
21:09:41  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
21:09:41  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
21:09:41  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
21:09:41  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
21:09:41  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
21:09:41  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
21:09:41  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
21:09:41  43  ,hh  att32
21:09:41  44  ,d   att33
21:09:41  45  ,w   att34
21:09:41  46  ,mpm att35
21:09:41  47  ,mph att36
21:09:41  48  ,trend att37
21:09:41  49  FROM svm6142
21:09:41  50  ORDER BY ydate
21:09:41  51  /

Table created.

Elapsed: 00:00:04.65
21:09:45 SQL> 
21:09:45 SQL> -- rpt
21:09:45 SQL> 
21:09:45 SQL> SELECT
21:09:45   2  pair
21:09:45   3  ,trend
21:09:45   4  ,gatt
21:09:45   5  ,COUNT(pair)
21:09:45   6  ,AVG(g6)
21:09:45   7  FROM svm6162
21:09:45   8  GROUP BY pair,trend,gatt
21:09:45   9  ORDER BY pair,trend,gatt
21:09:45  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      6891 -.00194454
usd_chf 	-1 up	      3172 .003901151
usd_chf 	-1		 8
usd_chf 	 1 nup	      6591 -.00163733
usd_chf 	 1 up	      2558 .003693657
usd_chf 	 1		64

6 rows selected.

Elapsed: 00:00:00.03
21:09:45 SQL> 
21:09:45 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
21:09:45 SQL> CREATE TABLE modsrc COMPRESS AS
21:09:45   2  SELECT
21:09:45   3  pair
21:09:45   4  ,ydate
21:09:45   5  ,prdate
21:09:45   6  ,trend
21:09:45   7  ,g6
21:09:45   8  ,gatt
21:09:45   9  ,gattn
21:09:45  10  FROM svm6162
21:09:45  11  /

Table created.

Elapsed: 00:00:00.08
21:09:45 SQL> 
21:09:45 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
21:09:46 SQL> 
21:09:46 SQL> DROP   TABLE chf_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
21:09:46 SQL> CREATE TABLE chf_ms610 COMPRESS AS
21:09:46   2  SELECT
21:09:46   3  ydate
21:09:46   4  ,trend chf_trend
21:09:46   5  ,g6    chf_g6
21:09:46   6  ,gatt  chf_gatt
21:09:46   7  ,gattn chf_gattn
21:09:46   8  FROM modsrc
21:09:46   9  /

Table created.

Elapsed: 00:00:00.06
21:09:46 SQL> 
21:09:46 SQL> ANALYZE TABLE chf_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.14
21:09:46 SQL> 
21:09:46 SQL> -- I need a copy of the attributes:
21:09:46 SQL> 
21:09:46 SQL> 
21:09:46 SQL> DROP   TABLE chf_att;

Table dropped.

Elapsed: 00:00:00.03
21:09:46 SQL> CREATE TABLE chf_att COMPRESS AS
21:09:46   2  SELECT
21:09:46   3  ydate
21:09:46   4  ,att00 chf_att00
21:09:46   5  ,att01 chf_att01
21:09:46   6  ,att02 chf_att02
21:09:46   7  ,att03 chf_att03
21:09:46   8  ,att04 chf_att04
21:09:46   9  ,att05 chf_att05
21:09:46  10  ,att06 chf_att06
21:09:46  11  ,att07 chf_att07
21:09:46  12  ,att08 chf_att08
21:09:46  13  ,att09 chf_att09
21:09:46  14  ,att10 chf_att10
21:09:46  15  ,att11 chf_att11
21:09:46  16  ,att12 chf_att12
21:09:46  17  ,att13 chf_att13
21:09:46  18  ,att14 chf_att14
21:09:46  19  ,att15 chf_att15
21:09:46  20  ,att16 chf_att16
21:09:46  21  ,att17 chf_att17
21:09:46  22  ,att18 chf_att18
21:09:46  23  ,att19 chf_att19
21:09:46  24  ,att20 chf_att20
21:09:46  25  ,att21 chf_att21
21:09:46  26  ,att22 chf_att22
21:09:46  27  ,att23 chf_att23
21:09:46  28  ,att24 chf_att24
21:09:46  29  ,att25 chf_att25
21:09:46  30  ,att26 chf_att26
21:09:46  31  ,att27 chf_att27
21:09:46  32  ,att28 chf_att28
21:09:46  33  ,att29 chf_att29
21:09:46  34  ,att30 chf_att30
21:09:46  35  ,att31 chf_att31
21:09:46  36  ,att32 chf_att32
21:09:46  37  ,att33 chf_att33
21:09:46  38  ,att34 chf_att34
21:09:46  39  ,att35 chf_att35
21:09:46  40  ,att36 chf_att36
21:09:46  41  ,att37 chf_att37
21:09:46  42  FROM svm6162
21:09:46  43  /

Table created.

Elapsed: 00:00:00.16
21:09:46 SQL> 
21:09:46 SQL> ANALYZE TABLE chf_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.41
21:09:47 SQL> 
21:09:47 SQL> -- rpt
21:09:47 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19284

Elapsed: 00:00:00.82
21:09:47 SQL> SELECT COUNT(*)FROM chf_att;

  COUNT(*)
----------
     19284

Elapsed: 00:00:00.01
21:09:47 SQL> 
21:09:47 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
